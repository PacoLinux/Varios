VERSION E05

PL6.E3A0      #001=JSS$BACKSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:48 Page:1    
        1        1        /*M*  JSS$UTIL   EXECUTION CONTROL SAFE-STORE MANIPULATING ROUTINES */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ENU=0,ECU=0    */
        8        8        /**/
        9        9        /*F*   NAME:    JSS$BACKSS
       10       10               PURPOSE: To adjust safe-store descriptor in the magic segment.
       11       11        */
       12       12        JSS$BACKSS: PROC;
       13       13    1   DCL ADJUST UBIN(36);
       14       14    1   DCL EWSQ UBIN(9);
       15       15
       16       16
       17       17        %INCLUDE B$SS;
       18      196        %INCLUDE B_MAGIC_C;
       19      314        %B_MPT (FPTN=B_MPT,STCLASS=SYMREF);
       20      407
       21      408    1   DCL J_USRMXSS_D UBIN(36) SYMREF READONLY;
       22      409
       23      410        %INCLUDE B_MACROS_C;
       24      521        %T01DESCR (NAME=B$$DESCR);
       25      529        %SUB B$SS=B_MPT.SS$->B$SS;
       26      530        %EJECT;
PL6.E3A0      #001=JSS$BACKSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:48 Page:2    
       27      531    1   BACKSS: ;
       28      532    1      IF B_MPT.SSDESC$->B$$DESCR.BASE < J_USRMXSS_D THEN RETURN;
       29      533    1      IF B$SS.SCR = '00'B THEN ADJUST = 64;
       30      534    1      ELSE IF B$SS.SCR = '01'B THEN ADJUST =96;
       31      535    1           ELSE ADJUST = 256;
       32      536        /**/
       33      537    1      EWSQ  = B$SS.ISR.WSR;
       34      538    1      B_MPT.SSDESC$->B$$DESCR.BOUND = B_MPT.SSDESC$->B$$DESCR.BOUND + ADJUST;
       35      539    1      B_MPT.SSDESC$->B$$DESCR.BASE = B_MPT.SSDESC$->B$$DESCR.BASE - ADJUST;
       36      540             /*  A LABEL MUST BE HERE TO INSURE THAT THE MSEG.SS PR WILL BE RELOADED  */
       37      541    1   RELOAD_PTR: ;
       38      542    1      IF B$SS.ISR.WSR = EWSQ THEN GOTO BACKSS;
       39      543    1      RETURN;
       40      544    1   END JSS$BACKSS;
       41      545        %EOD;

PL6.E3A0      #001=JSS$BACKSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:48 Page:3    
--  Include file information  --

   B_MACROS_C.:E05TOU  is referenced.
   B_MAGIC_C.:E05TOU  is referenced.
   B$SS.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JSS$BACKSS.

   Procedure JSS$BACKSS requires 49 words for executable code.
   Procedure JSS$BACKSS requires 8 words of local(AUTO) storage.

PL6.E3A0      #001=JSS$BACKSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:48 Page:4    

 Object Unit name= JSS$BACKSS                                 File name= JSS$UTIL.:E05TOU
 UTS= JUL 29 '97 23:48:49.08 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    49     61  JSS$BACKSS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        0  JSS$BACKSS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_MPT                            r    J_USRMXSS_D                           B_VECTNIL
PL6.E3A0      #001=JSS$BACKSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:48 Page:5    


        1        1        /*M*  JSS$UTIL   EXECUTION CONTROL SAFE-STORE MANIPULATING ROUTINES */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ENU=0,ECU=0    */
        8        8        /**/
        9        9        /*F*   NAME:    JSS$BACKSS
       10       10               PURPOSE: To adjust safe-store descriptor in the magic segment.
       11       11        */
       12       12        JSS$BACKSS: PROC;

     12  0 000000   000000 700200 xent  JSS$BACKSS   TSX0  ! X66_AUTO_0
         0 000001   000010 000000                    ZERO    8,0

       13       13    1   DCL ADJUST UBIN(36);
       14       14    1   DCL EWSQ UBIN(9);
       15       15
       16       16
       17       17        %INCLUDE B$SS;
       18      196        %INCLUDE B_MAGIC_C;
       19      314        %B_MPT (FPTN=B_MPT,STCLASS=SYMREF);
       20      407
       21      408    1   DCL J_USRMXSS_D UBIN(36) SYMREF READONLY;
       22      409
       23      410        %INCLUDE B_MACROS_C;
       24      521        %T01DESCR (NAME=B$$DESCR);

    522  0 000002                       BACKSS       null
       25      529        %SUB B$SS=B_MPT.SS$->B$SS;
       26      530        %EJECT;
PL6.E3A0      #001=JSS$BACKSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:48 Page:6    
       27      531    1   BACKSS: ;
       28      532    1      IF B_MPT.SSDESC$->B$$DESCR.BASE < J_USRMXSS_D THEN RETURN;

    532  0 000002   000006 470400 xsym               LDP0    B_MPT+6
         0 000003   000001 236100                    LDQ     1,,PR0
         0 000004   000007 604000 0                  TMI     s:532
         0 000005   000000 116000 xsym               CMPQ    J_USRMXSS_D
         0 000006   000010 603000 0                  TRC     s:533

    532  0 000007   000000 702200 xent               TSX2  ! X66_ARET

       29      533    1      IF B$SS.SCR = '00'B THEN ADJUST = 64;

    533  0 000010   000000 471400 xsym               LDP1    B_MPT
         0 000011   100005 236100                    LDQ     5,,PR1
         0 000012   030000 316007                    CANQ    12288,DL
         0 000013   000017 601000 0                  TNZ     s:534

    533  0 000014   000100 235007                    LDA     64,DL
         0 000015   200003 755100                    STA     ADJUST,,AUTO
         0 000016   000027 710000 0                  TRA     s:537

       30      534    1      ELSE IF B$SS.SCR = '01'B THEN ADJUST =96;

    534  0 000017   030000 376007                    ANQ     12288,DL
         0 000020   010000 116007                    CMPQ    4096,DL
         0 000021   000025 601000 0                  TNZ     s:535

    534  0 000022   000140 235007                    LDA     96,DL
         0 000023   200003 755100                    STA     ADJUST,,AUTO
         0 000024   000027 710000 0                  TRA     s:537

       31      535    1           ELSE ADJUST = 256;

    535  0 000025   000400 235007                    LDA     256,DL
         0 000026   200003 755100                    STA     ADJUST,,AUTO

PL6.E3A0      #001=JSS$BACKSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:48 Page:7    
       32      536        /**/
       33      537    1      EWSQ  = B$SS.ISR.WSR;

    537  0 000027   100010 236100                    LDQ     8,,PR1
         0 000030   000004 772000                    QRL     4
         0 000031   000007 376007                    ANQ     7,DL
         0 000032   000033 736000                    QLS     27
         0 000033   200004 756100                    STQ     EWSQ,,AUTO

       34      538    1      B_MPT.SSDESC$->B$$DESCR.BOUND = B_MPT.SSDESC$->B$$DESCR.BOUND + ADJUST;

    538  0 000034   000000 236100                    LDQ     0,,PR0
         0 000035   000020 772000                    QRL     16
         0 000036   200003 036100                    ADLQ    ADJUST,,AUTO
         0 000037   000020 736000                    QLS     16
         0 000040   000000 676100                    ERQ     0,,PR0
         0 000041   000034 376000 xsym               ANQ     B_VECTNIL+28
         0 000042   000000 656100                    ERSQ    0,,PR0

       35      539    1      B_MPT.SSDESC$->B$$DESCR.BASE = B_MPT.SSDESC$->B$$DESCR.BASE - ADJUST;

    539  0 000043   000006 470400 xsym               LDP0    B_MPT+6
         0 000044   000001 236100                    LDQ     1,,PR0
         0 000045   200003 136100                    SBLQ    ADJUST,,AUTO
         0 000046   000001 756100                    STQ     1,,PR0

    539  0 000047                       RELOAD_PTR   null
       36      540             /*  A LABEL MUST BE HERE TO INSURE THAT THE MSEG.SS PR WILL BE RELOADED  */
       37      541    1   RELOAD_PTR: ;
       38      542    1      IF B$SS.ISR.WSR = EWSQ THEN GOTO BACKSS;

    542  0 000047   200004 236100                    LDQ     EWSQ,,AUTO
         0 000050   000033 772000                    QRL     27
         0 000051   200006 756100                    STQ     EWSQ+2,,AUTO
         0 000052   000000 470400 xsym               LDP0    B_MPT
         0 000053   000010 236100                    LDQ     8,,PR0
         0 000054   000004 772000                    QRL     4
PL6.E3A0      #001=JSS$BACKSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:48 Page:8    
         0 000055   000007 376007                    ANQ     7,DL
         0 000056   200006 116100                    CMPQ    EWSQ+2,,AUTO
         0 000057   000002 600000 0                  TZE     BACKSS

       39      543    1      RETURN;

    543  0 000060   000000 702200 xent               TSX2  ! X66_ARET
       40      544    1   END JSS$BACKSS;
       41      545        %EOD;

PL6.E3A0      #001=JSS$BACKSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:48 Page:9    
--  Include file information  --

   B_MACROS_C.:E05TOU  is referenced.
   B_MAGIC_C.:E05TOU  is referenced.
   B$SS.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JSS$BACKSS.
PL6.E3A0      #001=JSS$BACKSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:48 Page:10   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w UBIN        r     1 ADJUST                     4-0-0/w UBIN(9)     r     1 EWSQ

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(432)   r     1 B_MPT                      0-0-0/w UBIN        r     1 J_USRMXSS_D

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(72)    r     1 B$$DESCR                   0-0-0/d STRC(2304)  r     1 B$SS


   Procedure JSS$BACKSS requires 49 words for executable code.
   Procedure JSS$BACKSS requires 8 words of local(AUTO) storage.
PL6.E3A0      #001=JSS$BACKSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:48 Page:11   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=JSS$BACKSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:48 Page:12   
          MINI XREF LISTING

ADJUST
        13**DCL       533<<ASSIGN    534<<ASSIGN    535<<ASSIGN    538>>ASSIGN    539>>ASSIGN
B$$DESCR.BASE
       527**DCL       532>>IF        539<<ASSIGN    539>>ASSIGN
B$$DESCR.BOUND
       523**DCL       538<<ASSIGN    538>>ASSIGN
B$SS.ISR.WSR
        74**DCL       537>>ASSIGN    542>>IF
B$SS.RVA
        69**DCL        70--REDEF
B$SS.SCR
        61**DCL       533>>IF        534>>IF
BACKSS
       522**LABEL     542--GOTO
B_MPT.AS
       350**DCL       353--REDEF
B_MPT.ASDESC
       382**DCL       386--REDEF
B_MPT.ECCB
       365**DCL       368--REDEF
B_MPT.ECCBDESC
       400**DCL       404--REDEF
B_MPT.LS
       345**DCL       348--REDEF
B_MPT.LSDESC
       376**DCL       380--REDEF
B_MPT.PS
       355**DCL       358--REDEF
B_MPT.PSDESC
       388**DCL       392--REDEF
B_MPT.SS
       340**DCL       343--REDEF
PL6.E3A0      #001=JSS$BACKSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:48 Page:13   
B_MPT.SS$
       343**DCL       533>>IF        534>>IF        537>>ASSIGN    542>>IF
B_MPT.SSDESC
       370**DCL       374--REDEF
B_MPT.SSDESC$
       374**DCL       532>>IF        538>>ASSIGN    538>>ASSIGN    539>>ASSIGN    539>>ASSIGN
B_MPT.TCB
       360**DCL       363--REDEF
B_MPT.TCBDESC
       394**DCL       398--REDEF
EWSQ
        14**DCL       537<<ASSIGN    542>>IF
J_USRMXSS_D
       408**DCL       532>>IF

PL6.E3A0      #002=JSS$FIXLASR File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:48 Page:14   
       42        1        /*T***********************************************************/
       43        2        /*T*                                                         */
       44        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       45        4        /*T*                                                         */
       46        5        /*T***********************************************************/
       47        6        /*F*   NAME:    JSS$FIXLASR
       48        7               PURPOSE:  To fix up the Arguement when the user has blown it
       49        8        */
       50        9        JSS$FIXLASR: PROC;
       51       10
       52       11    1   DCL ADJUST UBIN(36);
       53       12    1   DCL SAVESS UBIN(36);
       54       13
       55       14    1   DCL JSN$SETASR ENTRY(1);
       56       15    1   DCL UDN$MAGIC ENTRY;
       57       16
       58       17        %INCLUDE B$SS;
       59      196        %INCLUDE B_STRINGS_C;
       60      325        %INCLUDE B_MAGIC_C;
       61      443        %B_MPT (FPTN=B_MPT,STCLASS=SYMREF);
       62      536    1   DCL J_ASR_E BIT(72) SYMREF READONLY DALIGNED;
       63      537    1   DCL J_PSR_E BIT(72) SYMREF READONLY DALIGNED;
       64      538
       65      539        %INCLUDE B_MACROS_C;
       66      650        %T01DESCR (NAME=B$$DESCR);
       67      658        %SUB B$SS=B_MPT.SS$->B$SS;
       68      659        %EJECT;
PL6.E3A0      #002=JSS$FIXLASR File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:48 Page:15   
       69      660    1      SAVESS = B_MPT.SSDESC$->B$$DESCR.BASE;
       70      661    1   FIXASR: ;
       71      662    1      B$SS.ASR = J_ASR_E;
       72      663    1      B$SS.PSR = J_PSR_E;
       73      664    1      IF NOT (B$SS.ISR.FLAGS & %DSEXEC)
       74      665    2      THEN DO;                   /* IF EXU NOT SET WE ARE AT BOTTOM OF STACK     */
       75      666    2           B_MPT.SSDESC$->B$$DESCR.BASE = SAVESS;
       76      667    2           CALL JSN$SETASR(J_ASR_E);
       77      668    2           CALL UDN$MAGIC;
       78      669    2           RETURN;
       79      670    2           END;
       80      671    1      IF B$SS.SCR = '00'B THEN ADJUST = 64;
       81      672    1      ELSE IF B$SS.SCR = '01'B THEN ADJUST =96;
       82      673    1           ELSE ADJUST = 256;
       83      674    1      B_MPT.SSDESC$->B$$DESCR.BASE = B_MPT.SSDESC$->B$$DESCR.BASE - ADJUST;
       84      675    1      GOTO FIXASR;
       85      676    1   END JSS$FIXLASR;
       86      677        %EOD;

PL6.E3A0      #002=JSS$FIXLASR File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:48 Page:16   
--  Include file information  --

   B_MACROS_C.:E05TOU  is referenced.
   B_MAGIC_C.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   B$SS.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JSS$FIXLASR.

   Procedure JSS$FIXLASR requires 45 words for executable code.
   Procedure JSS$FIXLASR requires 6 words of local(AUTO) storage.

PL6.E3A0      #002=JSS$FIXLASR File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:48 Page:17   

 Object Unit name= JSS$FIXLASR                                File name= JSS$UTIL.:E05TOU
 UTS= JUL 29 '97 23:48:56.12 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    45     55  JSS$FIXLASR
    1  RoData even  none     1      1  JSS$FIXLASR

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        0  JSS$FIXLASR

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 JSN$SETASR
         yes           Std       0 UDN$MAGIC
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_MPT                            r    J_ASR_E                          r    J_PSR_E
     B_VECTNIL
PL6.E3A0      #002=JSS$FIXLASR File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:48 Page:18   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=JSS$FIXLASR File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:48 Page:19   


       42        1        /*T***********************************************************/
       43        2        /*T*                                                         */
       44        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       45        4        /*T*                                                         */
       46        5        /*T***********************************************************/
       47        6        /*F*   NAME:    JSS$FIXLASR
       48        7               PURPOSE:  To fix up the Arguement when the user has blown it
       49        8        */
       50        9        JSS$FIXLASR: PROC;

      9  0 000000   000000 700200 xent  JSS$FIXLASR  TSX0  ! X66_AUTO_0
         0 000001   000006 000000                    ZERO    6,0

       51       10
       52       11    1   DCL ADJUST UBIN(36);
       53       12    1   DCL SAVESS UBIN(36);
       54       13
       55       14    1   DCL JSN$SETASR ENTRY(1);
       56       15    1   DCL UDN$MAGIC ENTRY;
       57       16
       58       17        %INCLUDE B$SS;
       59      196        %INCLUDE B_STRINGS_C;
       60      325        %INCLUDE B_MAGIC_C;
       61      443        %B_MPT (FPTN=B_MPT,STCLASS=SYMREF);
       62      536    1   DCL J_ASR_E BIT(72) SYMREF READONLY DALIGNED;
       63      537    1   DCL J_PSR_E BIT(72) SYMREF READONLY DALIGNED;
       64      538
       65      539        %INCLUDE B_MACROS_C;
       66      650        %T01DESCR (NAME=B$$DESCR);
       67      658        %SUB B$SS=B_MPT.SS$->B$SS;
       68      659        %EJECT;
PL6.E3A0      #002=JSS$FIXLASR File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:48 Page:20   
       69      660    1      SAVESS = B_MPT.SSDESC$->B$$DESCR.BASE;

    660  0 000002   000006 470400 xsym               LDP0    B_MPT+6
         0 000003   000001 235100                    LDA     1,,PR0
         0 000004   200004 755100                    STA     SAVESS,,AUTO

    660  0 000005                       FIXASR       null
       70      661    1   FIXASR: ;
       71      662    1      B$SS.ASR = J_ASR_E;

    662  0 000005   000000 237000 xsym               LDAQ    J_ASR_E
         0 000006   000000 470400 xsym               LDP0    B_MPT
         0 000007   000012 757100                    STAQ    10,,PR0

       72      663    1      B$SS.PSR = J_PSR_E;

    663  0 000010   000000 237000 xsym               LDAQ    J_PSR_E
         0 000011   000016 757100                    STAQ    14,,PR0

       73      664    1      IF NOT (B$SS.ISR.FLAGS & %DSEXEC)

    664  0 000012   000010 236100                    LDQ     8,,PR0
         0 000013   000024 736000                    QLS     20
         0 000014   777000 376003                    ANQ     -512,DU
         0 000015   010000 376003                    ANQ     4096,DU
         0 000016   000032 601000 0                  TNZ     s:671

       74      665    2      THEN DO;                   /* IF EXU NOT SET WE ARE AT BOTTOM OF STACK     */

       75      666    2           B_MPT.SSDESC$->B$$DESCR.BASE = SAVESS;

    666  0 000017   200004 236100                    LDQ     SAVESS,,AUTO
         0 000020   000006 471400 xsym               LDP1    B_MPT+6
         0 000021   100001 756100                    STQ     1,,PR1

       76      667    2           CALL JSN$SETASR(J_ASR_E);

PL6.E3A0      #002=JSS$FIXLASR File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:48 Page:21   
    667  0 000022   000000 630400 1                  EPPR0   0
         0 000023   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000024   000000 701000 xent               TSX1    JSN$SETASR
         0 000025   000000 011000                    NOP     0

       77      668    2           CALL UDN$MAGIC;

    668  0 000026   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000027   000000 701000 xent               TSX1    UDN$MAGIC
         0 000030   000000 011000                    NOP     0

       78      669    2           RETURN;

    669  0 000031   000000 702200 xent               TSX2  ! X66_ARET

       79      670    2           END;
       80      671    1      IF B$SS.SCR = '00'B THEN ADJUST = 64;

    671  0 000032   000005 236100                    LDQ     5,,PR0
         0 000033   030000 316007                    CANQ    12288,DL
         0 000034   000040 601000 0                  TNZ     s:672

    671  0 000035   000100 235007                    LDA     64,DL
         0 000036   200003 755100                    STA     ADJUST,,AUTO
         0 000037   000050 710000 0                  TRA     s:674

       81      672    1      ELSE IF B$SS.SCR = '01'B THEN ADJUST =96;

    672  0 000040   030000 376007                    ANQ     12288,DL
         0 000041   010000 116007                    CMPQ    4096,DL
         0 000042   000046 601000 0                  TNZ     s:673

    672  0 000043   000140 236007                    LDQ     96,DL
         0 000044   200003 756100                    STQ     ADJUST,,AUTO
         0 000045   000050 710000 0                  TRA     s:674

       82      673    1           ELSE ADJUST = 256;
PL6.E3A0      #002=JSS$FIXLASR File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:48 Page:22   

    673  0 000046   000400 236007                    LDQ     256,DL
         0 000047   200003 756100                    STQ     ADJUST,,AUTO

       83      674    1      B_MPT.SSDESC$->B$$DESCR.BASE = B_MPT.SSDESC$->B$$DESCR.BASE - ADJUST;

    674  0 000050   000006 471400 xsym               LDP1    B_MPT+6
         0 000051   100001 236100                    LDQ     1,,PR1
         0 000052   200003 136100                    SBLQ    ADJUST,,AUTO
         0 000053   100001 756100                    STQ     1,,PR1

       84      675    1      GOTO FIXASR;

    675  0 000054   000005 710000 0                  TRA     FIXASR

(unnamed)
 Sect OctLoc
   1     000   000000 006000                                                    ....
       85      676    1   END JSS$FIXLASR;
       86      677        %EOD;

PL6.E3A0      #002=JSS$FIXLASR File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:48 Page:23   
--  Include file information  --

   B_MACROS_C.:E05TOU  is referenced.
   B_MAGIC_C.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   B$SS.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JSS$FIXLASR.
PL6.E3A0      #002=JSS$FIXLASR File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:48 Page:24   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w UBIN        r     1 ADJUST                     4-0-0/w UBIN        r     1 SAVESS

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(432)   r     1 B_MPT                      0-0-0/d BIT (72)    r     1 J_ASR_E
     0-0-0/d BIT (72)    r     1 J_PSR_E

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(72)    r     1 B$$DESCR                   0-0-0/d STRC(2304)  r     1 B$SS


   Procedure JSS$FIXLASR requires 45 words for executable code.
   Procedure JSS$FIXLASR requires 6 words of local(AUTO) storage.
PL6.E3A0      #002=JSS$FIXLASR File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:48 Page:25   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=JSS$FIXLASR File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:48 Page:26   
          MINI XREF LISTING

ADJUST
        11**DCL       671<<ASSIGN    672<<ASSIGN    673<<ASSIGN    674>>ASSIGN
B$$DESCR.BASE
       656**DCL       660>>ASSIGN    666<<ASSIGN    674<<ASSIGN    674>>ASSIGN
B$SS.ASR
        77**DCL       662<<ASSIGN
B$SS.ISR.FLAGS
        73**DCL       664>>IF
B$SS.PSR
        89**DCL       663<<ASSIGN
B$SS.RVA
        69**DCL        70--REDEF
B$SS.SCR
        61**DCL       671>>IF        672>>IF
B_MPT.AS
       479**DCL       482--REDEF
B_MPT.ASDESC
       511**DCL       515--REDEF
B_MPT.ECCB
       494**DCL       497--REDEF
B_MPT.ECCBDESC
       529**DCL       533--REDEF
B_MPT.LS
       474**DCL       477--REDEF
B_MPT.LSDESC
       505**DCL       509--REDEF
B_MPT.PS
       484**DCL       487--REDEF
B_MPT.PSDESC
       517**DCL       521--REDEF
B_MPT.SS
       469**DCL       472--REDEF
PL6.E3A0      #002=JSS$FIXLASR File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:48 Page:27   
B_MPT.SS$
       472**DCL       662>>ASSIGN    663>>ASSIGN    664>>IF        671>>IF        672>>IF
B_MPT.SSDESC
       499**DCL       503--REDEF
B_MPT.SSDESC$
       503**DCL       660>>ASSIGN    666>>ASSIGN    674>>ASSIGN    674>>ASSIGN
B_MPT.TCB
       489**DCL       492--REDEF
B_MPT.TCBDESC
       523**DCL       527--REDEF
FIXASR
       660**LABEL     675--GOTO
JSN$SETASR
        14**DCL-ENT   667--CALL
J_ASR_E
       536**DCL       662>>ASSIGN    667<>CALL
J_PSR_E
       537**DCL       663>>ASSIGN
SAVESS
        12**DCL       660<<ASSIGN    666>>ASSIGN
UDN$MAGIC
        15**DCL-ENT   668--CALL

PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:28   
       87        1        /*T***********************************************************/
       88        2        /*T*                                                         */
       89        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       90        4        /*T*                                                         */
       91        5        /*T***********************************************************/
       92        6        JSS$INITSS: PROC(IC,WSR);
       93        7
       94        8        /*F*   NAME:  JSS$INITSS
       95        9               PURPOSE:  To build a Safe Store frame to enter a new job step
       96       10        */
       97       11
       98       12        /*F*    NAME: JSS_XCONSS
       99       13                PURPOSE:  To build 'safe' Safe-Store frames for
      100       14                          rippling up xcon
      101       15        */
      102       16        /**/
      103       17    1   DCL IC SBIN;             /* 0 MEANS BUILD SMALL FRAME FOLLOWED BY BIG ONE     */
      104       18    1   DCL WSR SBIN;                 /* WSR OF   DOMAIN REQUIRING SAFE-STORE FRAME*/
      105       19
      106       20    1   DCL XCON SBIN;
      107       21    1   DCL SSAUTO SBIN HALF;
      108       22    1   DCL TPTR$ PTR;
      109       23    1   DCL ISPTR UBIN(36);
      110       24
      111       25    1   DCL B$LS$ PTR SYMREF READONLY;
      112       26    1   DCL B$USERLS$ PTR SYMREF READONLY;
      113       27    1   DCL B$DBLS$ PTR SYMREF READONLY;
      114       28    1   DCL B$ASLLS$ PTR SYMREF READONLY;
      115       29    1   DCL B$CPLS$ PTR SYMREF READONLY;
      116       30    1   DCL J_ASR_E BIT(72) SYMREF READONLY DALIGNED;
      117       31    1   DCL J_PSR_E BIT(72) SYMREF READONLY DALIGNED;
      118       32
      119       33    1   DCL UDN$LOADSS ENTRY;
      120       34
      121       35        %INCLUDE B_MAGIC_C;
      122      153        %B_MPT (FPTN=B_MPT,STCLASS=SYMREF);
      123      246        %INCLUDE B_MACROS_C;
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:29   
      124      357        %T01DESCR (NAME=B$$DESCR);
      125      365        %INCLUDE B$SS;                     /* BASED DEFINITION OF SAFE STORE STACK    */
      126      544        %INCLUDE B_MLSMAC_C;
      127     1486        %B_MLS (FPTN=B$MLS,STCLASS=BASED);
      128     2301        %INCLUDE B_SEGIDS_C;                    /* SYSTEM-WIDE SEGID DEFINITIONS      */
      129     2840        %INCLUDE B_STRINGS_C;                   /* SYSTEM-WIDE STRING SUBSTITUTIONS   */
      130     2969
      131     2970        %SUB B$SS=B_MPT.SS$->B$SS;
      132     2971        %EJECT;
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:30   
      133     2972        /* NOTE THAT THIS PROCEDURE WILL ONLY WORK IF UDN$MAGIC HAS BEEN  */
      134     2973        /* PREVIOUSLY CALLED TO ESTABLISH THE NEEDED TYPE 0 DESCRIPTOR     */
      135     2974        /* OF THE CURRENT TOP FRAME IN SAFE STORE.                          */
      136     2975                                                /*                                    */
      137     2976    1   SSBUILD: PROC;                          /* INTERNAL PROCEDURE                 */
      138     2977    2   BUILD_SS: ;
      139     2978                                                /*PROTECT AREA WHILE WE BUILD IT*/
      140     2979    2      CALL UDN$LOADSS;
      141     2980    2      B$SS='0'B;
      142     2981    2      B$SS.AUTOPT=SSAUTO;
      143     2982    2      B$SS.IC = IC;                        /* SET IC VALUE                       */
      144     2983    2      B$SS.IR = '004010'O;                 /*NO OVF, FLOAT OX                    */
      145     2984    2      B$SS.IS_SEGID=%ISSID;
      146     2985    3      DO CASE(WSR);
      147     2986    3       CASE(%CPWSR);                       /*COMMAND PROCESSOR*/
      148     2987    3         B$SS.LSR=B$LS$->B$MLS.CPLS;
      149     2988    3         TPTR$=B$CPLS$;
      150     2989    3       CASE(%DBWSR);                       /*DEBUGGER*/
      151     2990    3         B$SS.LSR=B$LS$->B$MLS.DBLS;
      152     2991    3         TPTR$=B$DBLS$;
      153     2992    3       CASE(%ASLWSR);                      /* ALTERNATE SHARED LIBRARY*/
      154     2993    3         B$SS.LSR=B$LS$->B$MLS.ASLLS;
      155     2994    3         TPTR$=B$ASLLS$;
      156     2995    3       CASE(ELSE);                         /* BETTER BE USER*/
      157     2996    3         B$SS.LSR=B$LS$->B$MLS.USERLS;
      158     2997    3         TPTR$=B$USERLS$;
      159     2998    3         END;
      160     2999    2      B$SS.ISR=TPTR$->B$MLS.IS;
      161     3000    2      B_MPT.LSDESC$->B$$DESCR=B$SS.LSR;
      162     3001    2      B$SS.LSR.TYPE = '0001'B;
      163     3002    2      B$SS.LSR.FLAGS='101100011'B;
      164     3003    2      B$SS.ASR=J_ASR_E;
      165     3004    2      IF XCON<=1                           /*IF CALLED FOR XCON                  */
      166     3005    2      THEN B$SS.ASR.BASE=B_MPT.ASDESC$->B$$DESCR.BASE;
      167     3006    2      B$SS.PSR=J_PSR_E;
      168     3007        /**/
      169     3008        /**/
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:31   
      170     3009        %EJECT;
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:32   
      171     3010        /* IF CALLED FOR XCON SS FRAME GET READY TO BUILD ANOTHER ONE */
      172     3011    3      IF XCON=0 THEN DO;
      173     3012    3           B$SS.SCR = '11'B;               /*ASSUME BIG FRAME NEXT               */
      174     3013    3           B$SS.ISR.FLAGS = (B$SS.ISR.FLAGS &~ %DSEXEC);
      175     3014    3           B_MPT.SSDESC$->B$$DESCR.BOUND = B_MPT.SSDESC$->B$$DESCR.BOUND -64;
      176     3015    3           B_MPT.SSDESC$->B$$DESCR.BASE = B_MPT.SSDESC$->B$$DESCR.BASE +64;
      177     3016    3           XCON=1;                         /*SO WE DONT DO IT AGAIN*/
      178     3017    3           GOTO BUILD_SS;
      179     3018    3           END;
      180     3019        /**/
      181     3020        /* NOW, SET ALL DR'S TO BE COPIES OF ISR, ALL SEGIDS = %ISSID       */
      182     3021    2      ISPTR = BITBIN(%ISSID);
      183     3022    2      B$SS.PR0 = BINBIT(ISPTR,36);
      184     3023    2      B$SS.PR1 = BINBIT(ISPTR,36);
      185     3024    2      B$SS.PR2 = BINBIT(ISPTR,36);
      186     3025    2      B$SS.PR3 = BINBIT(ISPTR,36);
      187     3026    2      B$SS.PR4 = BINBIT(ISPTR,36);
      188     3027    2      B$SS.PR5 = BINBIT(ISPTR,36);
      189     3028    2      B$SS.PR6 = BINBIT(ISPTR,36);
      190     3029    2      B$SS.PR7 = BINBIT(ISPTR,36);
      191     3030    2      B$SS.DR0 = B$SS.ISR;
      192     3031    2      B$SS.DR1 = B$SS.ISR;
      193     3032    2      B$SS.DR2 = B$SS.ISR;
      194     3033    2      B$SS.DR3 = B$SS.ISR;
      195     3034    2      B$SS.DR4 = B$SS.ISR;
      196     3035    2      B$SS.DR5 = B$SS.ISR;
      197     3036    2      B$SS.DR6 = B$SS.ISR;
      198     3037    2      B$SS.DR7 = B$SS.ISR;
      199     3038    2      RETURN;
      200     3039    2   END SSBUILD;
      201     3040
      202     3041        %EJECT;
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:33   
      203     3042    1      XCON=99;                             /*DONT BUILD TWO FRAMES               */
      204     3043    1      SSAUTO=-5;
      205     3044    1      CALL SSBUILD;
      206     3045    1      RETURN;
      207     3046
      208     3047
      209     3048
      210     3049                                                /*                                    */
      211     3050
      212     3051    1   JSS$XCON_SS: ENTRY(IC,WSR);
      213     3052    1      XCON=0;
      214     3053    1      SSAUTO=IC;
      215     3054    1      CALL SSBUILD;
      216     3055    1      RETURN;
      217     3056
      218     3057    1   END JSS$INITSS;
      219     3058        %EOD;

PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:34   
--  Include file information  --

   B_STRINGS_C.:E05TOU  is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   B_MLSMAC_C.:E05TOU  is referenced.
   B$SS.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B_MAGIC_C.:E05TOU  is referenced.
      No diagnostics issued in procedure JSS$INITSS.

   Procedure JSS$INITSS requires 150 words for executable code.
   Procedure JSS$INITSS requires 12 words of local(AUTO) storage.

PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:35   

 Object Unit name= JSS$INITSS                                 File name= JSS$UTIL.:E05TOU
 UTS= JUL 29 '97 23:49:03.48 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   150    226  JSS$INITSS
    1  RoData even  none     2      2  JSS$INITSS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        2  JSS$INITSS
     0    215                  yes      Std        2  JSS$XCON_SS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 UDN$LOADSS
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    B$LS$                            r    B$USERLS$                        r    B$DBLS$
r    B$ASLLS$                         r    B$CPLS$                          r    J_ASR_E
r    J_PSR_E                               B_MPT                                 B_VECTNIL
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:36   


       87        1        /*T***********************************************************/
       88        2        /*T*                                                         */
       89        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       90        4        /*T*                                                         */
       91        5        /*T***********************************************************/
       92        6        JSS$INITSS: PROC(IC,WSR);

      6  0 000000   000000 700200 xent  JSS$INITSS   TSX0  ! X66_AUTO_2
         0 000001   000014 000002                    ZERO    12,2
         0 000002   000206 710000 0                  TRA     s:3042

       93        7
       94        8        /*F*   NAME:  JSS$INITSS
       95        9               PURPOSE:  To build a Safe Store frame to enter a new job step
       96       10        */
       97       11
       98       12        /*F*    NAME: JSS_XCONSS
       99       13                PURPOSE:  To build 'safe' Safe-Store frames for
      100       14                          rippling up xcon
      101       15        */
      102       16        /**/
      103       17    1   DCL IC SBIN;             /* 0 MEANS BUILD SMALL FRAME FOLLOWED BY BIG ONE     */
      104       18    1   DCL WSR SBIN;                 /* WSR OF   DOMAIN REQUIRING SAFE-STORE FRAME*/
      105       19
      106       20    1   DCL XCON SBIN;
      107       21    1   DCL SSAUTO SBIN HALF;
      108       22    1   DCL TPTR$ PTR;
      109       23    1   DCL ISPTR UBIN(36);
      110       24
      111       25    1   DCL B$LS$ PTR SYMREF READONLY;
      112       26    1   DCL B$USERLS$ PTR SYMREF READONLY;
      113       27    1   DCL B$DBLS$ PTR SYMREF READONLY;
      114       28    1   DCL B$ASLLS$ PTR SYMREF READONLY;
      115       29    1   DCL B$CPLS$ PTR SYMREF READONLY;
      116       30    1   DCL J_ASR_E BIT(72) SYMREF READONLY DALIGNED;
      117       31    1   DCL J_PSR_E BIT(72) SYMREF READONLY DALIGNED;
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:37   
      118       32
      119       33    1   DCL UDN$LOADSS ENTRY;
      120       34
      121       35        %INCLUDE B_MAGIC_C;
      122      153        %B_MPT (FPTN=B_MPT,STCLASS=SYMREF);
      123      246        %INCLUDE B_MACROS_C;
      124      357        %T01DESCR (NAME=B$$DESCR);
      125      365        %INCLUDE B$SS;                     /* BASED DEFINITION OF SAFE STORE STACK    */
      126      544        %INCLUDE B_MLSMAC_C;
      127     1486        %B_MLS (FPTN=B$MLS,STCLASS=BASED);
      128     2301        %INCLUDE B_SEGIDS_C;                    /* SYSTEM-WIDE SEGID DEFINITIONS      */
      129     2840        %INCLUDE B_STRINGS_C;                   /* SYSTEM-WIDE STRING SUBSTITUTIONS   */
      130     2969
      131     2970        %SUB B$SS=B_MPT.SS$->B$SS;
      132     2971        %EJECT;
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:38   
      133     2972        /* NOTE THAT THIS PROCEDURE WILL ONLY WORK IF UDN$MAGIC HAS BEEN  */
      134     2973        /* PREVIOUSLY CALLED TO ESTABLISH THE NEEDED TYPE 0 DESCRIPTOR     */
      135     2974        /* OF THE CURRENT TOP FRAME IN SAFE STORE.                          */
      136     2975                                                /*                                    */
      137     2976    1   SSBUILD: PROC;                          /* INTERNAL PROCEDURE                 */

   2976  0 000003   200012 741300       SSBUILD      STX1  ! ISPTR+2,,AUTO

   2299  0 000004                       BUILD_SS     null
      138     2977    2   BUILD_SS: ;
      139     2978                                                /*PROTECT AREA WHILE WE BUILD IT*/
      140     2979    2      CALL UDN$LOADSS;

   2979  0 000004   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000005   000000 701000 xent               TSX1    UDN$LOADSS
         0 000006   000000 011000                    NOP     0

      141     2980    2      B$SS='0'B;

   2980  0 000007   000000 470400 xsym               LDP0    B_MPT
         0 000010   000100 100400                    MLR     fill='000'O
         0 000011   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         0 000012   000000 000400                    ADSC9   0,,PR0                   cn=0,n=256

      142     2981    2      B$SS.AUTOPT=SSAUTO;

   2981  0 000013   200006 220100                    LDX0    SSAUTO,,AUTO
         0 000014   000000 470400 xsym               LDP0    B_MPT
         0 000015   000001 440100                    SXL0    1,,PR0

      143     2982    2      B$SS.IC = IC;                        /* SET IC VALUE                       */

   2982  0 000016   200003 471500                    LDP1    @IC,,AUTO
         0 000017   100000 721100                    LXL1    0,,PR1
         0 000020   000004 741100                    STX1    4,,PR0

      144     2983    2      B$SS.IR = '004010'O;                 /*NO OVF, FLOAT OX                    */
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:39   

   2983  0 000021   004010 222003                    LDX2    2056,DU
         0 000022   000004 442100                    SXL2    4,,PR0

      145     2984    2      B$SS.IS_SEGID=%ISSID;

   2984  0 000023   006000 236007                    LDQ     3072,DL
         0 000024   000005 752103                    STCQ    5,'03'O,PR0

      146     2985    3      DO CASE(WSR);

   2985  0 000025   200004 473500                    LDP3    @WSR,,AUTO
         0 000026   300000 235100                    LDA     0,,PR3
         0 000027   000004 135007                    SBLA    4,DL
         0 000030   000003 115007                    CMPA    3,DL
         0 000031   000033 602005 0                  TNC     s:2985+6,AL
         0 000032   000060 710000 0                  TRA     s:2996
         0 000033   000036 710000 0                  TRA     s:2987
         0 000034   000044 710000 0                  TRA     s:2990
         0 000035   000052 710000 0                  TRA     s:2993

      147     2986    3       CASE(%CPWSR);                       /*COMMAND PROCESSOR*/

      148     2987    3         B$SS.LSR=B$LS$->B$MLS.CPLS;

   2987  0 000036   000000 474400 xsym               LDP4    B$LS$
         0 000037   400070 237100                    LDAQ    56,,PR4
         0 000040   000014 757100                    STAQ    12,,PR0

      149     2988    3         TPTR$=B$CPLS$;

   2988  0 000041   000000 236000 xsym               LDQ     B$CPLS$
         0 000042   200007 756100                    STQ     TPTR$,,AUTO
         0 000043   000065 710000 0                  TRA     s:2999

      150     2989    3       CASE(%DBWSR);                       /*DEBUGGER*/

PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:40   
      151     2990    3         B$SS.LSR=B$LS$->B$MLS.DBLS;

   2990  0 000044   000000 474400 xsym               LDP4    B$LS$
         0 000045   400064 237100                    LDAQ    52,,PR4
         0 000046   000014 757100                    STAQ    12,,PR0

      152     2991    3         TPTR$=B$DBLS$;

   2991  0 000047   000000 236000 xsym               LDQ     B$DBLS$
         0 000050   200007 756100                    STQ     TPTR$,,AUTO
         0 000051   000065 710000 0                  TRA     s:2999

      153     2992    3       CASE(%ASLWSR);                      /* ALTERNATE SHARED LIBRARY*/

      154     2993    3         B$SS.LSR=B$LS$->B$MLS.ASLLS;

   2993  0 000052   000000 474400 xsym               LDP4    B$LS$
         0 000053   400066 237100                    LDAQ    54,,PR4
         0 000054   000014 757100                    STAQ    12,,PR0

      155     2994    3         TPTR$=B$ASLLS$;

   2994  0 000055   000000 236000 xsym               LDQ     B$ASLLS$
         0 000056   200007 756100                    STQ     TPTR$,,AUTO
         0 000057   000065 710000 0                  TRA     s:2999

      156     2995    3       CASE(ELSE);                         /* BETTER BE USER*/

      157     2996    3         B$SS.LSR=B$LS$->B$MLS.USERLS;

   2996  0 000060   000000 474400 xsym               LDP4    B$LS$
         0 000061   400062 237100                    LDAQ    50,,PR4
         0 000062   000014 757100                    STAQ    12,,PR0

      158     2997    3         TPTR$=B$USERLS$;

   2997  0 000063   000000 236000 xsym               LDQ     B$USERLS$
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:41   
         0 000064   200007 756100                    STQ     TPTR$,,AUTO

      159     2998    3         END;

      160     2999    2      B$SS.ISR=TPTR$->B$MLS.IS;

   2999  0 000065   200007 475500                    LDP5    TPTR$,,AUTO
         0 000066   500000 237100                    LDAQ    0,,PR5
         0 000067   000010 757100                    STAQ    8,,PR0

      161     3000    2      B_MPT.LSDESC$->B$$DESCR=B$SS.LSR;

   3000  0 000070   000007 476400 xsym               LDP6    B_MPT+7
         0 000071   000014 237100                    LDAQ    12,,PR0
         0 000072   600000 755100                    STA     0,,PR6
         0 000073   600001 756100                    STQ     1,,PR6

      162     3001    2      B$SS.LSR.TYPE = '0001'B;

   3001  0 000074   000000 470400 xsym               LDP0    B_MPT
         0 000075   000014 236100                    LDQ     12,,PR0
         0 000076   000000 376000 1                  ANQ     0
         0 000077   000001 276007                    ORQ     1,DL
         0 000100   000014 756100                    STQ     12,,PR0

      163     3002    2      B$SS.LSR.FLAGS='101100011'B;

   3002  0 000101   000014 236100                    LDQ     12,,PR0
         0 000102   000001 376000 1                  ANQ     1
         0 000103   130600 276007                    ORQ     45440,DL
         0 000104   000014 756100                    STQ     12,,PR0

      164     3003    2      B$SS.ASR=J_ASR_E;

   3003  0 000105   000000 237000 xsym               LDAQ    J_ASR_E
         0 000106   000012 757100                    STAQ    10,,PR0

PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:42   
      165     3004    2      IF XCON<=1                           /*IF CALLED FOR XCON                  */

   3004  0 000107   200005 235100                    LDA     XCON,,AUTO
         0 000110   000001 115007                    CMPA    1,DL
         0 000111   000115 605400 0                  TPNZ    s:3006

      166     3005    2      THEN B$SS.ASR.BASE=B_MPT.ASDESC$->B$$DESCR.BASE;

   3005  0 000112   000010 476400 xsym               LDP6    B_MPT+8
         0 000113   600001 235100                    LDA     1,,PR6
         0 000114   000013 755100                    STA     11,,PR0

      167     3006    2      B$SS.PSR=J_PSR_E;

   3006  0 000115   000000 237000 xsym               LDAQ    J_PSR_E
         0 000116   000016 757100                    STAQ    14,,PR0

      168     3007        /**/
      169     3008        /**/
      170     3009        %EJECT;
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:43   
      171     3010        /* IF CALLED FOR XCON SS FRAME GET READY TO BUILD ANOTHER ONE */
      172     3011    3      IF XCON=0 THEN DO;

   3011  0 000117   200005 235100                    LDA     XCON,,AUTO
         0 000120   000151 601000 0                  TNZ     s:3021

      173     3012    3           B$SS.SCR = '11'B;               /*ASSUME BIG FRAME NEXT               */

   3012  0 000121   030000 236007                    LDQ     12288,DL
         0 000122   000005 256100                    ORSQ    5,,PR0

      174     3013    3           B$SS.ISR.FLAGS = (B$SS.ISR.FLAGS &~ %DSEXEC);

   3013  0 000123   000010 236100                    LDQ     8,,PR0
         0 000124   000024 736000                    QLS     20
         0 000125   777000 376003                    ANQ     -512,DU
         0 000126   767000 376003                    ANQ     -4608,DU
         0 000127   000024 772000                    QRL     20
         0 000130   000010 676100                    ERQ     8,,PR0
         0 000131   177600 376007                    ANQ     65408,DL
         0 000132   000010 656100                    ERSQ    8,,PR0

      175     3014    3           B_MPT.SSDESC$->B$$DESCR.BOUND = B_MPT.SSDESC$->B$$DESCR.BOUND -64;

   3014  0 000133   000006 476400 xsym               LDP6    B_MPT+6
         0 000134   600000 236100                    LDQ     0,,PR6
         0 000135   000020 772000                    QRL     16
         0 000136   000100 136007                    SBLQ    64,DL
         0 000137   000020 736000                    QLS     16
         0 000140   600000 676100                    ERQ     0,,PR6
         0 000141   000034 376000 xsym               ANQ     B_VECTNIL+28
         0 000142   600000 656100                    ERSQ    0,,PR6

      176     3015    3           B_MPT.SSDESC$->B$$DESCR.BASE = B_MPT.SSDESC$->B$$DESCR.BASE +64;

   3015  0 000143   000006 470400 xsym               LDP0    B_MPT+6
         0 000144   000100 236007                    LDQ     64,DL
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:44   
         0 000145   000001 056100                    ASQ     1,,PR0

      177     3016    3           XCON=1;                         /*SO WE DONT DO IT AGAIN*/

   3016  0 000146   000001 235007                    LDA     1,DL
         0 000147   200005 755100                    STA     XCON,,AUTO

      178     3017    3           GOTO BUILD_SS;

   3017  0 000150   000004 710000 0                  TRA     BUILD_SS

      179     3018    3           END;
      180     3019        /**/
      181     3020        /* NOW, SET ALL DR'S TO BE COPIES OF ISR, ALL SEGIDS = %ISSID       */
      182     3021    2      ISPTR = BITBIN(%ISSID);

   3021  0 000151   006000 235007                    LDA     3072,DL
         0 000152   200010 755100                    STA     ISPTR,,AUTO

      183     3022    2      B$SS.PR0 = BINBIT(ISPTR,36);

   3022  0 000153   200010 236100                    LDQ     ISPTR,,AUTO
         0 000154   000020 756100                    STQ     16,,PR0

      184     3023    2      B$SS.PR1 = BINBIT(ISPTR,36);

   3023  0 000155   000021 756100                    STQ     17,,PR0

      185     3024    2      B$SS.PR2 = BINBIT(ISPTR,36);

   3024  0 000156   000022 756100                    STQ     18,,PR0

      186     3025    2      B$SS.PR3 = BINBIT(ISPTR,36);

   3025  0 000157   000023 756100                    STQ     19,,PR0

      187     3026    2      B$SS.PR4 = BINBIT(ISPTR,36);
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:45   

   3026  0 000160   000024 756100                    STQ     20,,PR0

      188     3027    2      B$SS.PR5 = BINBIT(ISPTR,36);

   3027  0 000161   000025 756100                    STQ     21,,PR0

      189     3028    2      B$SS.PR6 = BINBIT(ISPTR,36);

   3028  0 000162   000026 756100                    STQ     22,,PR0

      190     3029    2      B$SS.PR7 = BINBIT(ISPTR,36);

   3029  0 000163   000027 756100                    STQ     23,,PR0

      191     3030    2      B$SS.DR0 = B$SS.ISR;

   3030  0 000164   000010 237100                    LDAQ    8,,PR0
         0 000165   000030 757100                    STAQ    24,,PR0

      192     3031    2      B$SS.DR1 = B$SS.ISR;

   3031  0 000166   000010 237100                    LDAQ    8,,PR0
         0 000167   000032 757100                    STAQ    26,,PR0

      193     3032    2      B$SS.DR2 = B$SS.ISR;

   3032  0 000170   000010 237100                    LDAQ    8,,PR0
         0 000171   000034 757100                    STAQ    28,,PR0

      194     3033    2      B$SS.DR3 = B$SS.ISR;

   3033  0 000172   000010 237100                    LDAQ    8,,PR0
         0 000173   000036 757100                    STAQ    30,,PR0

      195     3034    2      B$SS.DR4 = B$SS.ISR;

PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:46   
   3034  0 000174   000010 237100                    LDAQ    8,,PR0
         0 000175   000040 757100                    STAQ    32,,PR0

      196     3035    2      B$SS.DR5 = B$SS.ISR;

   3035  0 000176   000010 237100                    LDAQ    8,,PR0
         0 000177   000042 757100                    STAQ    34,,PR0

      197     3036    2      B$SS.DR6 = B$SS.ISR;

   3036  0 000200   000010 237100                    LDAQ    8,,PR0
         0 000201   000044 757100                    STAQ    36,,PR0

      198     3037    2      B$SS.DR7 = B$SS.ISR;

   3037  0 000202   000010 237100                    LDAQ    8,,PR0
         0 000203   000046 757100                    STAQ    38,,PR0

      199     3038    2      RETURN;

   3038  0 000204   200012 221300                    LDX1  ! ISPTR+2,,AUTO
         0 000205   000001 702211                    TSX2  ! 1,X1

      200     3039    2   END SSBUILD;
      201     3040
      202     3041        %EJECT;
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:47   
      203     3042    1      XCON=99;                             /*DONT BUILD TWO FRAMES               */

   3042  0 000206   000143 235007                    LDA     99,DL
         0 000207   200005 755100                    STA     XCON,,AUTO

      204     3043    1      SSAUTO=-5;

   3043  0 000210   777773 220003                    LDX0    -5,DU
         0 000211   200006 740100                    STX0    SSAUTO,,AUTO

      205     3044    1      CALL SSBUILD;

   3044  0 000212   000003 701000 0                  TSX1    SSBUILD
         0 000213   000000 011000                    NOP     0

      206     3045    1      RETURN;

   3045  0 000214   000000 702200 xent               TSX2  ! X66_ARET

      207     3046
      208     3047
      209     3048
      210     3049                                                /*                                    */
      211     3050
      212     3051    1   JSS$XCON_SS: ENTRY(IC,WSR);

   3051  0 000215   000000 700200 xent  JSS$XCON_SS  TSX0  ! X66_AUTO_2
         0 000216   000014 000002                    ZERO    12,2

      213     3052    1      XCON=0;

   3052  0 000217   200005 450100                    STZ     XCON,,AUTO

      214     3053    1      SSAUTO=IC;

   3053  0 000220   200003 470500                    LDP0    @IC,,AUTO
         0 000221   000000 720100                    LXL0    0,,PR0
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:48   
         0 000222   200006 740100                    STX0    SSAUTO,,AUTO

      215     3054    1      CALL SSBUILD;

   3054  0 000223   000003 701000 0                  TSX1    SSBUILD
         0 000224   000000 011000                    NOP     0

      216     3055    1      RETURN;

   3055  0 000225   000000 702200 xent               TSX2  ! X66_ARET

(unnamed)
 Sect OctLoc
   1     000   777777 777760   777777 600177                                    ........
      217     3056
      218     3057    1   END JSS$INITSS;
      219     3058        %EOD;

PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:49   
--  Include file information  --

   B_STRINGS_C.:E05TOU  is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   B_MLSMAC_C.:E05TOU  is referenced.
   B$SS.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B_MAGIC_C.:E05TOU  is referenced.
      No diagnostics issued in procedure JSS$INITSS.
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:50   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @IC                        4-0-0/w PTR         r     1 @WSR
    *0-0-0/w SBIN        r     1 IC                        10-0-0/w UBIN        r     1 ISPTR
     6-0-0/w SBIN(18)    r     1 SSAUTO                     7-0-0/w PTR         r     1 TPTR$
    *0-0-0/w SBIN        r     1 WSR                        5-0-0/w SBIN        r     1 XCON

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$ASLLS$                   0-0-0/w PTR         r     1 B$CPLS$
     0-0-0/w PTR         r     1 B$DBLS$                    0-0-0/w PTR         r     1 B$LS$
     0-0-0/w PTR         r     1 B$USERLS$                  0-0-0/d STRC(432)   r     1 B_MPT
     0-0-0/d BIT (72)    r     1 J_ASR_E                    0-0-0/d BIT (72)    r     1 J_PSR_E

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(72)    r     1 B$$DESCR                   0-0-0/d STRC(10368) r     1 B$MLS
     0-0-0/d STRC(2304)  r     1 B$SS


   Procedure JSS$INITSS requires 150 words for executable code.
   Procedure JSS$INITSS requires 12 words of local(AUTO) storage.
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:51   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:52   
          MINI XREF LISTING

B$$DESCR
       358**DCL      3000<<ASSIGN
B$$DESCR.BASE
       363**DCL      3005>>ASSIGN   3015<<ASSIGN   3015>>ASSIGN
B$$DESCR.BOUND
       359**DCL      3014<<ASSIGN   3014>>ASSIGN
B$ASLLS$
        28**DCL      2994>>ASSIGN
B$CPLS$
        29**DCL      2988>>ASSIGN
B$DBLS$
        27**DCL      2991>>ASSIGN
B$LS$
        25**DCL      2987>>ASSIGN   2990>>ASSIGN   2993>>ASSIGN   2996>>ASSIGN
B$MLS.ASLLS
      1696**DCL      2993>>ASSIGN
B$MLS.CPLS
      1702**DCL      2987>>ASSIGN
B$MLS.DBLS
      1690**DCL      2990>>ASSIGN
B$MLS.IS
      1526**DCL      2999>>ASSIGN
B$MLS.USERLS
      1684**DCL      2996>>ASSIGN
B$SS
       373**DCL      2980<<ASSIGN
B$SS.ASR
       425**DCL      3003<<ASSIGN
B$SS.ASR.BASE
       430**DCL      3005<<ASSIGN
B$SS.AUTOPT
       380**DCL      2981<<ASSIGN
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:53   
B$SS.DR0
       467**DCL      3030<<ASSIGN
B$SS.DR1
       473**DCL      3031<<ASSIGN
B$SS.DR2
       479**DCL      3032<<ASSIGN
B$SS.DR3
       485**DCL      3033<<ASSIGN
B$SS.DR4
       491**DCL      3034<<ASSIGN
B$SS.DR5
       497**DCL      3035<<ASSIGN
B$SS.DR6
       503**DCL      3036<<ASSIGN
B$SS.DR7
       509**DCL      3037<<ASSIGN
B$SS.IC
       384**DCL      2982<<ASSIGN
B$SS.IR
       385**DCL      2983<<ASSIGN
B$SS.ISR
       419**DCL      2999<<ASSIGN   3030>>ASSIGN   3031>>ASSIGN   3032>>ASSIGN   3033>>ASSIGN   3034>>ASSIGN
      3035>>ASSIGN   3036>>ASSIGN   3037>>ASSIGN
B$SS.ISR.FLAGS
       421**DCL      3013<<ASSIGN   3013>>ASSIGN
B$SS.IS_SEGID
       410**DCL      2984<<ASSIGN
B$SS.LSR
       431**DCL      2987<<ASSIGN   2990<<ASSIGN   2993<<ASSIGN   2996<<ASSIGN   3000>>ASSIGN
B$SS.LSR.FLAGS
       433**DCL      3002<<ASSIGN
B$SS.LSR.TYPE
       435**DCL      3001<<ASSIGN
B$SS.PR0
       443**DCL      3022<<ASSIGN
B$SS.PR1
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:54   
       446**DCL      3023<<ASSIGN
B$SS.PR2
       449**DCL      3024<<ASSIGN
B$SS.PR3
       452**DCL      3025<<ASSIGN
B$SS.PR4
       455**DCL      3026<<ASSIGN
B$SS.PR5
       458**DCL      3027<<ASSIGN
B$SS.PR6
       461**DCL      3028<<ASSIGN
B$SS.PR7
       464**DCL      3029<<ASSIGN
B$SS.PSR
       437**DCL      3006<<ASSIGN
B$SS.RVA
       417**DCL       418--REDEF
B$SS.SCR
       409**DCL      3012<<ASSIGN
B$USERLS$
        26**DCL      2997>>ASSIGN
BUILD_SS IN PROCEDURE SSBUILD
      2299**LABEL    3017--GOTO
B_MPT.AS
       189**DCL       192--REDEF
B_MPT.ASDESC
       221**DCL       225--REDEF
B_MPT.ASDESC$
       225**DCL      3005>>ASSIGN
B_MPT.ECCB
       204**DCL       207--REDEF
B_MPT.ECCBDESC
       239**DCL       243--REDEF
B_MPT.LS
       184**DCL       187--REDEF
B_MPT.LSDESC
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:55   
       215**DCL       219--REDEF
B_MPT.LSDESC$
       219**DCL      3000>>ASSIGN
B_MPT.PS
       194**DCL       197--REDEF
B_MPT.PSDESC
       227**DCL       231--REDEF
B_MPT.SS
       179**DCL       182--REDEF
B_MPT.SS$
       182**DCL      2980>>ASSIGN   2981>>ASSIGN   2982>>ASSIGN   2983>>ASSIGN   2984>>ASSIGN   2987>>ASSIGN
      2990>>ASSIGN   2993>>ASSIGN   2996>>ASSIGN   2999>>ASSIGN   3000>>ASSIGN   3001>>ASSIGN   3002>>ASSIGN
      3003>>ASSIGN   3005>>ASSIGN   3006>>ASSIGN   3012>>ASSIGN   3013>>ASSIGN   3013>>ASSIGN   3022>>ASSIGN
      3023>>ASSIGN   3024>>ASSIGN   3025>>ASSIGN   3026>>ASSIGN   3027>>ASSIGN   3028>>ASSIGN   3029>>ASSIGN
      3030>>ASSIGN   3030>>ASSIGN   3031>>ASSIGN   3031>>ASSIGN   3032>>ASSIGN   3032>>ASSIGN   3033>>ASSIGN
      3033>>ASSIGN   3034>>ASSIGN   3034>>ASSIGN   3035>>ASSIGN   3035>>ASSIGN   3036>>ASSIGN   3036>>ASSIGN
      3037>>ASSIGN   3037>>ASSIGN
B_MPT.SSDESC
       209**DCL       213--REDEF
B_MPT.SSDESC$
       213**DCL      3014>>ASSIGN   3014>>ASSIGN   3015>>ASSIGN   3015>>ASSIGN
B_MPT.TCB
       199**DCL       202--REDEF
B_MPT.TCBDESC
       233**DCL       237--REDEF
IC
        17**DCL         6--PROC     2982>>ASSIGN   3051--ENTRY    3053>>ASSIGN
ISPTR
        23**DCL      3021<<ASSIGN   3022>>ASSIGN   3023>>ASSIGN   3024>>ASSIGN   3025>>ASSIGN   3026>>ASSIGN
      3027>>ASSIGN   3028>>ASSIGN   3029>>ASSIGN
J_ASR_E
        30**DCL      3003>>ASSIGN
J_PSR_E
        31**DCL      3006>>ASSIGN
SSAUTO
        21**DCL      2981>>ASSIGN   3043<<ASSIGN   3053<<ASSIGN
PL6.E3A0      #003=JSS$INITSS File=JSS$UTIL.:E05TSI                              TUE 07/29/97 23:49 Page:56   
SSBUILD
      2976**PROC     3044--CALL     3054--CALL
TPTR$
        22**DCL      2988<<ASSIGN   2991<<ASSIGN   2994<<ASSIGN   2997<<ASSIGN   2999>>ASSIGN
UDN$LOADSS
        33**DCL-ENT  2979--CALL
WSR
        18**DCL         6--PROC     2985>>DOCASE   3051--ENTRY
XCON
        20**DCL      3004>>IF       3011>>IF       3016<<ASSIGN   3042<<ASSIGN   3052<<ASSIGN

PL6.E3A0      #004=JSS$RUNDSPC File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:49 Page:57   
      220        1        /*T***********************************************************/
      221        2        /*T*                                                         */
      222        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      223        4        /*T*                                                         */
      224        5        /*T***********************************************************/
      225        6        /*
      226        7        */
      227        8        /*F*    NAME:   JSS$RUNDSPC
      228        9                PURPOSE: TO FLUSH SPECIAL SHARED PROECSSORS SS FRAMES
      229       10                         AND ARGUEMENT AND PARAMETER STACKS
      230       11        */
      231       12
      232       13        JSS$RUNDSPC: PROC;
      233       14    1   DCL UDN$MAGICSS1 ENTRY(2);
      234       15    1   DCL JSS$BACKSS ENTRY;
      235       16        /**/
      236       17        %INCLUDE B_MAGIC_C;
      237      135        %B_MPT (FPTN=B_MPT,STCLASS=SYMREF);
      238      228        %INCLUDE B_MACROS_C;
      239      339        %T01DESCR (NAME=B$$DESCR);
      240      347        /**/
      241      348        %INCLUDE B$SS;
      242      527        %INCLUDE B_STRINGS_C;
      243      656        %SUB B$SS=B_MPT.SS$->B$SS;
      244      657        /**/
      245      658    1   DCL PSDESC BIT(72) DALIGNED;
      246      659    1   DCL ASDESC BIT(72) DALIGNED;
      247      660        %EJECT;
PL6.E3A0      #004=JSS$RUNDSPC File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:49 Page:58   
      248      661    1      IF B_MPT.LSDESC$->B$$DESCR.WSR <=1 THEN RETURN; /* SKIP IF NEW USER        */
      249      662    1      IF B$SS.ISR.WSR=7 THEN RETURN;
      250      663    1      PSDESC=B$SS.PSR;
      251      664    1      ASDESC=B$SS.ASR;
      252      665    1      IF (ADDR(PSDESC)->B$$DESCR.FLGS & %DSNULL)
      253      666    2      THEN DO;
      254      667    2           ADDR(PSDESC)->B$$DESCR.FLGS=
      255      668    2             ADDR(PSDESC)->B$$DESCR.FLGS&(~%DSNULL);
      256      669    2           ASDESC=PSDESC;
      257      670    2           END;
      258      671    1      CALL JSS$BACKSS;
      259      672    1      CALL UDN$MAGICSS1 (PSDESC,ASDESC);
      260      673    1      RETURN;
      261      674        /**/
      262      675        /**/
      263      676    1   END JSS$RUNDSPC;

PL6.E3A0      #004=JSS$RUNDSPC File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:49 Page:59   
--  Include file information  --

   B_STRINGS_C.:E05TOU  is referenced.
   B$SS.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B_MAGIC_C.:E05TOU  is referenced.
      No diagnostics issued in procedure JSS$RUNDSPC.

   Procedure JSS$RUNDSPC requires 45 words for executable code.
   Procedure JSS$RUNDSPC requires 10 words of local(AUTO) storage.

    No errors detected in file JSS$UTIL.:E05TSI    .

PL6.E3A0      #004=JSS$RUNDSPC File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:49 Page:60   

 Object Unit name= JSS$RUNDSPC                                File name= JSS$UTIL.:E05TOU
 UTS= JUL 29 '97 23:49:33.84 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    45     55  JSS$RUNDSPC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        0  JSS$RUNDSPC

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 JSS$BACKSS
         yes           Std       2 UDN$MAGICSS1
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_MPT                                 B_VECTNIL
PL6.E3A0      #004=JSS$RUNDSPC File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:49 Page:61   


      220        1        /*T***********************************************************/
      221        2        /*T*                                                         */
      222        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      223        4        /*T*                                                         */
      224        5        /*T***********************************************************/
      225        6        /*
      226        7        */
      227        8        /*F*    NAME:   JSS$RUNDSPC
      228        9                PURPOSE: TO FLUSH SPECIAL SHARED PROECSSORS SS FRAMES
      229       10                         AND ARGUEMENT AND PARAMETER STACKS
      230       11        */
      231       12
      232       13        JSS$RUNDSPC: PROC;

     13  0 000000   000000 700200 xent  JSS$RUNDSPC  TSX0  ! X66_AUTO_0
         0 000001   000012 000000                    ZERO    10,0

      233       14    1   DCL UDN$MAGICSS1 ENTRY(2);
      234       15    1   DCL JSS$BACKSS ENTRY;
      235       16        /**/
      236       17        %INCLUDE B_MAGIC_C;
      237      135        %B_MPT (FPTN=B_MPT,STCLASS=SYMREF);
      238      228        %INCLUDE B_MACROS_C;
      239      339        %T01DESCR (NAME=B$$DESCR);
      240      347        /**/
      241      348        %INCLUDE B$SS;
      242      527        %INCLUDE B_STRINGS_C;
      243      656        %SUB B$SS=B_MPT.SS$->B$SS;
      244      657        /**/
      245      658    1   DCL PSDESC BIT(72) DALIGNED;
      246      659    1   DCL ASDESC BIT(72) DALIGNED;
      247      660        %EJECT;
PL6.E3A0      #004=JSS$RUNDSPC File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:49 Page:62   
      248      661    1      IF B_MPT.LSDESC$->B$$DESCR.WSR <=1 THEN RETURN; /* SKIP IF NEW USER        */

    661  0 000002   000007 470400 xsym               LDP0    B_MPT+7
         0 000003   000000 236100                    LDQ     0,,PR0
         0 000004   000160 376007                    ANQ     112,DL
         0 000005   000040 116007                    CMPQ    32,DL
         0 000006   000010 603000 0                  TRC     s:662

    661  0 000007   000000 702200 xent               TSX2  ! X66_ARET

      249      662    1      IF B$SS.ISR.WSR=7 THEN RETURN;

    662  0 000010   000000 471400 xsym               LDP1    B_MPT
         0 000011   100010 236100                    LDQ     8,,PR1
         0 000012   000160 376007                    ANQ     112,DL
         0 000013   000160 116007                    CMPQ    112,DL
         0 000014   000016 601000 0                  TNZ     s:663

    662  0 000015   000000 702200 xent               TSX2  ! X66_ARET

      250      663    1      PSDESC=B$SS.PSR;

    663  0 000016   100016 237100                    LDAQ    14,,PR1
         0 000017   200004 757100                    STAQ    PSDESC,,AUTO

      251      664    1      ASDESC=B$SS.ASR;

    664  0 000020   100012 237100                    LDAQ    10,,PR1
         0 000021   200006 757100                    STAQ    ASDESC,,AUTO

      252      665    1      IF (ADDR(PSDESC)->B$$DESCR.FLGS & %DSNULL)

    665  0 000022   200004 236100                    LDQ     PSDESC,,AUTO
         0 000023   000024 736000                    QLS     20
         0 000024   777000 376003                    ANQ     -512,DU
         0 000025   002000 376003                    ANQ     1024,DU
         0 000026   000041 600000 0                  TZE     s:671
PL6.E3A0      #004=JSS$RUNDSPC File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:49 Page:63   

      253      666    2      THEN DO;

      254      667    2           ADDR(PSDESC)->B$$DESCR.FLGS=

    667  0 000027   200004 236100                    LDQ     PSDESC,,AUTO
         0 000030   000024 736000                    QLS     20
         0 000031   777000 376003                    ANQ     -512,DU
         0 000032   775000 376003                    ANQ     -1536,DU
         0 000033   000024 772000                    QRL     20
         0 000034   200004 676100                    ERQ     PSDESC,,AUTO
         0 000035   177600 376007                    ANQ     65408,DL
         0 000036   200004 656100                    ERSQ    PSDESC,,AUTO

      255      668    2             ADDR(PSDESC)->B$$DESCR.FLGS&(~%DSNULL);
      256      669    2           ASDESC=PSDESC;

    669  0 000037   200004 237100                    LDAQ    PSDESC,,AUTO
         0 000040   200006 757100                    STAQ    ASDESC,,AUTO

      257      670    2           END;

      258      671    1      CALL JSS$BACKSS;

    671  0 000041   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000042   000000 701000 xent               TSX1    JSS$BACKSS
         0 000043   000000 011000                    NOP     0

      259      672    1      CALL UDN$MAGICSS1 (PSDESC,ASDESC);

    672  0 000044   200006 630500                    EPPR0   ASDESC,,AUTO
         0 000045   200011 450500                    STP0    ASDESC+3,,AUTO
         0 000046   200004 631500                    EPPR1   PSDESC,,AUTO
         0 000047   200010 451500                    STP1    ASDESC+2,,AUTO
         0 000050   200010 630500                    EPPR0   ASDESC+2,,AUTO
         0 000051   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000052   000000 701000 xent               TSX1    UDN$MAGICSS1
PL6.E3A0      #004=JSS$RUNDSPC File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:49 Page:64   
         0 000053   000000 011000                    NOP     0

      260      673    1      RETURN;

    673  0 000054   000000 702200 xent               TSX2  ! X66_ARET
      261      674        /**/
      262      675        /**/
      263      676    1   END JSS$RUNDSPC;

PL6.E3A0      #004=JSS$RUNDSPC File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:49 Page:65   
--  Include file information  --

   B_STRINGS_C.:E05TOU  is referenced.
   B$SS.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B_MAGIC_C.:E05TOU  is referenced.
      No diagnostics issued in procedure JSS$RUNDSPC.
PL6.E3A0      #004=JSS$RUNDSPC File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:49 Page:66   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/d BIT (72)    r     1 ASDESC                     4-0-0/d BIT (72)    r     1 PSDESC

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(432)   r     1 B_MPT

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(72)    r     1 B$$DESCR                   0-0-0/d STRC(2304)  r     1 B$SS


   Procedure JSS$RUNDSPC requires 45 words for executable code.
   Procedure JSS$RUNDSPC requires 10 words of local(AUTO) storage.

    No errors detected in file JSS$UTIL.:E05TSI    .
PL6.E3A0      #004=JSS$RUNDSPC File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:49 Page:67   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=JSS$RUNDSPC File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:49 Page:68   
          MINI XREF LISTING

ASDESC
       659**DCL       664<<ASSIGN    669<<ASSIGN    672<>CALL
B$$DESCR.FLGS
       342**DCL       665>>IF        667<<ASSIGN    667>>ASSIGN
B$$DESCR.WSR
       343**DCL       661>>IF
B$SS.ASR
       408**DCL       664>>ASSIGN
B$SS.ISR.WSR
       405**DCL       662>>IF
B$SS.PSR
       420**DCL       663>>ASSIGN
B$SS.RVA
       400**DCL       401--REDEF
B_MPT.AS
       171**DCL       174--REDEF
B_MPT.ASDESC
       203**DCL       207--REDEF
B_MPT.ECCB
       186**DCL       189--REDEF
B_MPT.ECCBDESC
       221**DCL       225--REDEF
B_MPT.LS
       166**DCL       169--REDEF
B_MPT.LSDESC
       197**DCL       201--REDEF
B_MPT.LSDESC$
       201**DCL       661>>IF
B_MPT.PS
       176**DCL       179--REDEF
B_MPT.PSDESC
       209**DCL       213--REDEF
PL6.E3A0      #004=JSS$RUNDSPC File=JSS$UTIL.:E05TSI                             TUE 07/29/97 23:49 Page:69   
B_MPT.SS
       161**DCL       164--REDEF
B_MPT.SS$
       164**DCL       662>>IF        663>>ASSIGN    664>>ASSIGN
B_MPT.SSDESC
       191**DCL       195--REDEF
B_MPT.TCB
       181**DCL       184--REDEF
B_MPT.TCBDESC
       215**DCL       219--REDEF
JSS$BACKSS
        15**DCL-ENT   671--CALL
PSDESC
       658**DCL       663<<ASSIGN    665--IF        667--ASSIGN    667--ASSIGN    669>>ASSIGN    672<>CALL
UDN$MAGICSS1
        14**DCL-ENT   672--CALL
