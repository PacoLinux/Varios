VERSION E05

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC  */
        7        7        /*M*  VYQ$SORT    Performs a sort  */
        8        8        /*P*  NAME: VYQ$SORT
        9        9              PURPOSE: Performs a sort on names or values
       10       10              DESCRIPTION: Performs a sort on names or values
       11       11              REFERENCE: Knuth, D. E., The Art of Computer Programming,
       12       12                         Addison Wesley, Vol. 3, 1973, pp 114-123.
       13       13                                                      */
       14       14        /*D*  NAME: VYQ$SORT
       15       15              ENTRY: VYQ$SORT_V
       16       16              CALL: CALL VYQ$SORT(NAME$, START$, STOP$, SZ,   TP,   N_D,       TYES);
       17       17                    CALL VYQ$SORT_V(NAME$, START$, STOP$, SZ,   TP,   N_D,       TYES);
       18       18              INPUT: NAME$   - Pointer to start of name pool
       19       19                     START$  - Pointer to beginning of list to be searched
       20       20                     STOP$   - Pointer to end of the list ...
       21       21                     SZ      - Size in words of an item in the list
       22       22                     TP      - Switch which indicates type of sort;
       23       23                               0=>by value; 1=>by name
       24       24                     N_D     -  Index into list item where relative word displacement
       25       25                                to its associated name resides
       26       26                     TYES    - Half word index into list item of second key fo name sorts
       27       27                               Type of record for value sorts.
       28       28              OUTPUT: The list in sorted ascending order
       29       29              DESCRIPTION: Performs a sort on a list bounded by START$
       30       30                           and STOP$. The sorting technique employed is a partition
       31       31                           exchange sort. Each list during its initial pass is
       32       32                           broken into 3 partitions such that each element of the
       33       33                           first partition is smaller than all elements of the
       34       34                           third partition( conversely, each element of the third
       35       35                           partition is larger than all elements of the first
       36       36                           partition). The second partition has exactly 1 entry
       37       37                           and is in its proper position  with respect to the
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:2    
       38       38                           sort. Thus, partitions 1 and 3 need to be processed.
       39       39                           The shorter of 1 and 3 is selected for processing
       40       40                           while the longer is stacked. The selected list(1 or 3)
       41       41                           becomes the initial list and the process is repeated,
       42       42                           provided the list is sufficiently "large". If it is
       43       43                           not sufficiently large, a straight selection sort is
       44       44                           performed on the (sub-)list. The next (sub-)list is
       45       45                           then taken off the stack and processed. This
       46       46                           procedure occurs iteratively until all (sub-)lists
       47       47                           are processes and the algorithm terminates when a
       48       48                           pop off an empty stack occurs.
       49       49                                                                     */
       50       50        VYQ$SORT :
       51       51              PROC( NAME$, START$, STOP$, SZ, TP, N_D, TYES ) NOAUTO;
       52       52        %INCLUDE VY_INC_C;
       53     9228        %BANNER(ARG=SUBS);

              9236    1   /*******************************************************************************
              9237    1   *                                                                              *
              9238    1   *                          SUBS                                                 *
              9239    1   *                                                                              *
              9240    1   *******************************************************************************/

       54     9244        %B$RECORDSUBS;
       55     9272        %VY$NODE;

              9284    1   /*******************************************************************************
              9285    1   *                                                                              *
              9286    1   *                          VY$NODE                                                 *
              9287    1   *                                                                              *
              9288    1   *******************************************************************************/

              9304    1   DCL 1 VY$NODE      ALIGNED    BASED,
              9305    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
              9306    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
              9307    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
              9308    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:3    
              9309    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
              9310                              to list of file nodes for this node            */
              9311    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
              9312    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
              9312                  /* Head pointer to shared library list */
              9313    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
              9313                  /* Head pointer to list of shared libraries
              9314                                          which have been mapped to included libraries */
              9315    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
              9316    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
              9317    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
              9318    1         2 ADDR_START REDEF  ADDR_START_A,
              9319    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
              9320    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
              9321    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
              9322    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
              9323    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
              9324    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
              9325    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
              9326    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
              9327    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
              9328    1         2 START_PAGE# REDEF START_PAGE#_A,
              9329    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
              9330    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
              9331    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
              9332    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
              9333    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
              9334    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
              9335    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
              9336    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
              9337    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
              9337                  /* Starting pointer for common sections for this node */
              9338    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
              9338                  /* Stopping pointer for common sections for this node */
              9339    1         2 L_START,
              9340    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
              9341    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:4    
              9342    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
              9343    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
              9344    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
              9345    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
              9346    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
              9347    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
              9348    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
              9349    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
              9350    1         2 L_START_A$(0:9)     REDEF L_START PTR,
              9351    1         2 L_STOP,
              9352    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
              9353    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
              9354    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
              9355    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
              9356    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
              9357    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
              9358    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
              9359    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
              9360    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
              9361    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
              9362    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
              9363    1         2 L_SIZE,
              9364    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
              9365    1           3 DN      UBIN /*(0)*/, /* Def names                          */
              9366    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
              9367    1           3 SC      UBIN /*(0)*/, /* Sections                           */
              9368    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
              9369    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
              9370    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
              9371    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
              9372    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
              9373    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
              9374    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
              9375    1         2 L_PREV_SIZE,
              9376    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
              9377    1           3 DN      UBIN /*(0)*/, /* Def names                          */
              9378    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:5    
              9379    1           3 SC      UBIN /*(0)*/, /* Sections                           */
              9380    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
              9381    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
              9382    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
              9383    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
              9384    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
              9385    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
              9386    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
              9387    1         2 BIT_MAP                ALIGNED,
              9388    1           3 DATA                  ALIGNED,
              9389    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
              9390    1           3 RPROC                 ALIGNED,
              9391    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
              9392    1           3 ROS                   ALIGNED,
              9393    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
              9394    1         2 L_SC_START,
              9395    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
              9396    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
              9397    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
              9398    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
              9399    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
              9400    1         2 L_SC_STOP,
              9401    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
              9402    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
              9403    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
              9404    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
              9405    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
              9406    1         2 PROMOTE_HEAD,
              9407    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
              9408    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
              9409    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
              9410    1         2 PROMOTE_TAIL,
              9411    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
              9412    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
              9413    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
              9414    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
              9415    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:6    
              9416    1         2 *                 BIT(34)   UNAL /*('0'B)*/,
              9417    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       56     9421        %VY$SC;

              9435    1   /*******************************************************************************
              9436    1   *                                                                              *
              9437    1   *                          VY$SC                                                 *
              9438    1   *                                                                              *
              9439    1   *******************************************************************************/

              9443    1   DCL 1 VY$SC               BASED     ALIGNED,
              9444    1         2 TYPE              UBIN(9)   UNAL,
              9445    1         2 EMPTY             BIT (1)   UNAL,
              9446    1         2 ATTR                        UNAL,
              9447    1           3 INT              UBIN(2)   UNAL,
              9448    1           3 SEGMENT          BIT(1)    UNAL,
              9449    1           3 ALL              BIT(1)    UNAL,
              9450    1           3 PRE_DCB          BIT(1) UNAL, /* '1'B => true; '0'B => false        */
              9451    1           3 MES_INIT         BIT (1)   UNAL,
              9452    1           3 ALIGN            UBIN(2)   UNAL,
              9453    1         2 ADDRESS           UBIN(18)  UNAL,
              9454    1         2 NAME_DISP         SBIN HALF UNAL,
              9455    1         2 SIZE              UBIN(18)  UNAL,
              9456    1         2 NODE#             UBIN(18)  UNAL,
              9457    1         2 COM_LINK          UBIN(18)  UNAL;

              9466    1   /*******************************************************************************
              9467    1   *                                                                              *
              9468    1   *                          VY$SECT                                                 *
              9469    1   *                                                                              *
              9470    1   *******************************************************************************/

              9474    1   DCL 1 VY$SECT       BASED     ALIGNED,
              9475    1         2 TYPE              UBIN(9)   UNAL,
              9476    1         2 EMPTY             BIT (1)   UNAL,
              9477    1         2 ATTR                        UNAL,
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:7    
              9478    1           3 INT              UBIN(2)  UNAL,
              9479    1           3 SEGMENT          BIT (1)  UNAL,
              9480    1           3 *                UBIN(3)  UNAL,
              9481    1           3 ALIGN            UBIN(2)  UNAL,
              9482    1         2 SIZE              UBIN(18)  UNAL,
              9483    1         2 NAME_DISP         SBIN HALF UNAL,
              9484    1         2 SEG_NPOINTER      UBIN(18)  UNAL;
       57     9487        %VYD$TMPLT;

              9499    1   /*******************************************************************************
              9500    1   *                                                                              *
              9501    1   *                          VYD$TMPLT                                               *
              9502    1   *                                                                              *
              9503    1   *******************************************************************************/

              9508    1   DCL 1 VYD$TMPLT          ALIGNED BASED, /* Template for defs                  */
              9509    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array ...                          */
              9510    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
              9511    1         2 I       REDEF     A,            /* Items                              */
              9512    1           3 WHERE        UBIN( 3) UNAL,   /* Source of def                      */
              9513                                                                /* Value from
              9514                                                                     0   object
              9515                                                                     1   library */
              9516    1           3 DEFINED      BIT( 1) UNAL,    /* Defined or not                     */
              9517    1           3 B                      UNAL,
              9518    1             4 MULTIPLY    BIT(1) UNAL,    /* Multiply defined                   */
              9519    1           3 SC#          UBIN(13) UNAL,   /* Section #                          */
              9520    1           3 AFTER        REDEF SC#      UNAL,
              9521    1             4 USED        BIT(1) UNAL,    /* Used or not                        */
              9522    1             4 *           BIT(12) UNAL,
              9523    1           3 OFFSET      UBIN(18) UNAL,    /* Offset/address                     */
              9524    1           3 NAME_DISP   UBIN(18) UNAL,    /* Displacement to name(in words)     */
              9525    1           3 NAME_DISP_SBIN REDEF NAME_DISP   SBIN HALF UNAL,
              9526    1           3 P           UBIN( 1) UNAL,    /* Primary entdef                     */
              9527    1           3 C REDEF P   BIT(  1) UNAL,    /* Constant bit for symdefs           */
              9528    1           3 A           UBIN( 1) UNAL,    /* Altret specified                   */
              9529    1           3 MULTIPLY REDEF A BIT(1) UNAL, /* Multiply defined for constant sym defs */
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:8    
              9530    1           3 I           BIT(  1) UNAL,    /* Argument/parameter check           */
              9531    1           3 USED    REDEF I  BIT(1) UNAL, /* Used or not for constant sym defs  */
              9532    1           3 CST         UBIN( 4) UNAL,    /* Calling sequence type              */
              9533    1           3 WHERE_C REDEF CST UBIN(4) UNAL, /* Source of def for constant sym defs */
              9534    1           3 NP          UBIN(11) UNAL,    /* # of parameters                    */
              9535    1           3 IS_DCB  REDEF     NP,
              9536    1             4 DCB_BIT     BIT(1)    UNAL,
              9537    1             4 *           BIT(10)   UNAL,
              9538    1         2 SEG REDEF A,
              9539    1           3 *             UBIN      UNAL,
              9540    1           3 NPOINTER      UBIN(18)  UNAL,
              9541    1           3 CONSTNT       BIT(1)    UNAL,
              9542    1           3 TYPE          UBIN(5)   UNAL,
              9543    1           3 SEGID         UBIN(12)  UNAL,
              9544    1         2 V REDEF A,
              9545    1           3 VALUE       UBIN(36) UNAL,    /* Value if C=1                       */
              9546    1           3 *           UBIN(36) UNAL,
              9547    1         2 S  REDEF  A,                    /* Value if C=1                       */
              9548    1           3 *         UBIN(24) UNAL,
              9549    1           3 SEGID     UBIN(12) UNAL,
              9550    1           3 *         UBIN     UNAL;
       58     9553        %SET LISTDIR='0'B;

              9565    1   /*******************************************************************************
              9566    1   *                                                                              *
              9567    1   *                          B$DNAME                                                 *
              9568    1   *                                                                              *
              9569    1   *******************************************************************************/

              9581    1   DCL 1 B$DNAME BASED ALIGNED,
              9582    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
              9583                /*K*  COUNT is the number of characters in the name */
              9589    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;

              9604    1   /*******************************************************************************
              9605    1   *                                                                              *
              9606    1   *                          TMPLT                                                 *
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:9    
              9607    1   *                                                                              *
              9608    1   *******************************************************************************/

              9613    1   DCL 1 VY$TMPLT           ALIGNED BASED, /* Template for defs                  */
              9614    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
              9615    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
              9616    1         2 W       REDEF     A,            /* By name                            */
              9617    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
              9618    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */

              9633    1   /*******************************************************************************
              9634    1   *                                                                              *
              9635    1   *                          PARAMETERS                                              *
              9636    1   *                                                                              *
              9637    1   *******************************************************************************/

       70     9641    1   DCL NAME$           PTR;                /* Pointer to B$DNAME pool */
       71     9642    1   DCL START$          PTR;                /* Starting ptr */
       72     9643    1   DCL STOP$           PTR;                /* Stoping  ptr */
       73     9644    1   DCL SZ              UBIN(36);           /* Size in words of an entry */
       74     9645    1   DCL TP              UBIN(36);           /* 0=> by value; 1=> by dname   */
       75     9646    1   DCL N_D             UBIN(36);   /* Word displacement to name pointer field */
       76     9647    1   DCL TYES            UBIN(36);       /* Half-word index for second name key */
       77     9648    1   DCL TYPE REDEF TYES UBIN(36);       /* Type of record to be sorted by value */

              9657    1   /*******************************************************************************
              9658    1   *                                                                              *
              9659    1   *                          UBIN                                                 *
              9660    1   *                                                                              *
              9661    1   *******************************************************************************/

       79     9665    1   DCL SIZE            SBIN(36)  ALIGNED   STATIC;
       80     9666    1   DCL NAME_DISP       UBIN(36)  ALIGNED   STATIC;
       81     9667    1   DCL PIVOT            SBIN(36)  ALIGNED   STATIC;
       82     9668    1   DCL PARTITION_SIZE   UBIN(36)  ALIGNED   STATIC;
       83     9669    1   DCL I                UBIN(36)  ALIGNED   STATIC;
       84     9670    1   DCL 1 BUF STATIC,
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:10   
       85     9671    1         2 A(0:5) UBIN(18) UNAL,
       86     9672    1         2 W REDEF A,
       87     9673    1           3 WORD0 UBIN(36) UNAL,
       88     9674    1           3 WORD1 UBIN(36) UNAL,
       89     9675    1           3 WORD2 UBIN(36) UNAL;
       90     9676    1   DCL VALUE_KEY1      UBIN(36)  ALIGNED   STATIC;
       91     9677    1   DCL VALUE_KEY2      UBIN(36)  ALIGNED   STATIC;
       92     9678    1   DCL IEPS            UBIN(36)  ALIGNED   STATIC;

              9687    1   /*******************************************************************************
              9688    1   *                                                                              *
              9689    1   *                          SBIN                                                 *
              9690    1   *                                                                              *
              9691    1   *******************************************************************************/

       94     9695    1   DCL STACK_TOP       SBIN WORD ALIGNED STATIC INIT ( -1 );
       95     9696    1   DCL MSIZE           SBIN WORD ALIGNED STATIC;
       96     9697    1   DCL HIGH_TO_ILOW    SBIN WORD ALIGNED STATIC;
       97     9698    1   DCL ILOW_TO_LOW     SBIN WORD ALIGNED STATIC;

              9707    1   /*******************************************************************************
              9708    1   *                                                                              *
              9709    1   *                          PTR                                                 *
              9710    1   *                                                                              *
              9711    1   *******************************************************************************/

       99     9715    1   DCL N$              PTR       ALIGNED   STATIC;
      100     9716    1   DCL Q$              PTR       ALIGNED   STATIC;
      101     9717    1   DCL LOW$            PTR       ALIGNED   STATIC;
      102     9718    1   DCL HIGH$           PTR       ALIGNED   STATIC;
      103     9719    1   DCL ILOW$           PTR       ALIGNED   STATIC;
      104     9720    1   DCL JHIGH$          PTR       ALIGNED   STATIC;
      105     9721    1   DCL R$              PTR       ALIGNED   STATIC;
      106     9722    1   DCL KEY$            PTR       ALIGNED   STATIC;
      107     9723    1   DCL DNAME$          PTR       ALIGNED   STATIC;
      108     9724    1   DCL STACK_LOW$(0:18)    PTR       ALIGNED   STATIC;
      109     9725    1   DCL STACK_HIGH$(0:18)    PTR       ALIGNED   STATIC;
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:11   

              9734    1   /*******************************************************************************
              9735    1   *                                                                              *
              9736    1   *                          CHAR                                                 *
              9737    1   *                                                                              *
              9738    1   *******************************************************************************/

      111     9742    1   DCL KEY           CHAR(1024);
      112     9743    1   DCL KEY_I         CHAR(1024);
      113     9744    1   DCL KEY_J         CHAR(1024);

              9753    1   /*******************************************************************************
              9754    1   *                                                                              *
              9755    1   *                          BIT                                                 *
              9756    1   *                                                                              *
              9757    1   *******************************************************************************/

      115     9761    1   DCL TWO_KEY_SORT  BIT(1);
      116     9762        /**/
      117     9763        /**/
      118     9764        /**/
              9766    1   DCL VY$TARGET_B           BIT( VY_TARGET_COUNT ) ALIGNED    BASED;
              9767    1   DCL VY$SOURCE_B           BIT( VY_SOURCE_COUNT ) ALIGNED    BASED;
              9768    1   DCL VY$TARGET_C         CHAR( VY_TARGET_COUNT ) ALIGNED BASED;
              9769    1   DCL VY$SOURCE_C         CHAR( VY_SOURCE_COUNT ) ALIGNED BASED;
      124     9775        %EJECT;
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:12   
      125     9776                                                /*
      126     9777                                                                     Sort by name
      127     9778
      128     9779                                                move params into local variables
      129     9780                                                */
      130     9781    1         IF START$ = STOP$ THEN RETURN;
      131     9782    1         STACK_LOW$(0) = START$;
      132     9783    1         STACK_HIGH$(0) = STOP$;
      133     9784    1         STACK_TOP = 0;
      134     9785    1         SIZE = SZ;
      135     9786    1         VY_TARGET_COUNT = SIZE * @CHAR_WORD * @BIT_CHAR;
      136     9787    1         VY_SOURCE_COUNT = VY_TARGET_COUNT;
      137     9788    1         NAME_DISP = N_D;
      138     9789    1         N$ = NAME$;
      139     9790    1         IF N_D = TYES THEN TWO_KEY_SORT = @FALSE_B;
      140     9791    2         ELSE DO;
      141     9792    2             DNAME$ = VY_CURR$ -> VY$NODE.L_START.DN$;
      142     9793    2             TWO_KEY_SORT = @TRUE_B;
      143     9794    2            END;
      144     9795    1         IEPS  = 10 * SIZE;
      145     9796    1         MSIZE = - SIZE;
      146     9797
      147     9798    2         DO WHILE ( '1'B );                /* Do forever */
      148     9799        /*
      149     9800                                      Get pointers which delimit partition from
      150     9801                                                               top of stacks */
      151     9802    2             IF STACK_TOP < 0 THEN RETURN; /* Done sorting */
      152     9803    2             LOW$ = STACK_LOW$(STACK_TOP);
      153     9804    2             HIGH$ = STACK_HIGH$(STACK_TOP);
      154     9805    2             STACK_TOP = STACK_TOP - 1;
      155     9806    3             DO WHILE( POFFW(HIGH$, LOW$)  <  IEPS );
      156     9807        /*
      157     9808                                              Use insertion method to sort the partition
      158     9809        */
      159     9810    3                 PARTITION_SIZE = (POFFW( HIGH$, LOW$) + SIZE ) / SIZE;
      160     9811    3                 JHIGH$ = PINCRW(HIGH$, MSIZE);
      161     9812    4                 DO I = 2 TO PARTITION_SIZE;
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:13   
      162     9813    4                     BUF = JHIGH$ -> VY$TARGET_B;
      163     9814    4                     ILOW$ = PINCRW( JHIGH$, SIZE );
      164     9815    4                     CALL GET_NAME_KEY( KEY, JHIGH$ );
      165     9816    5                     DO WHILE ( ILOW$ <= HIGH$ );
      166     9817    5                         CALL GET_NAME_KEY( KEY_I, ILOW$ );
      167     9818    5                         IF KEY_I >= KEY THEN GOTO EXIT_1;
      168     9819    5                         PINCRW(ILOW$, MSIZE) -> VY$TARGET_B = ILOW$ ->VY$SOURCE_B;
      169     9820    5                         ILOW$ = PINCRW( ILOW$, SIZE );
      170     9821    5                        END;
      171     9822    4   EXIT_1:           ;
      172     9823    4                     PINCRW(ILOW$, MSIZE) -> VY$TARGET_B  = BUF;
      173     9824    4                     JHIGH$ = PINCRW( JHIGH$, MSIZE );
      174     9825    4                    END;                   /* do i = 2 to partition_size   */
      175     9826    3                 IF STACK_TOP < 0 THEN RETURN; /* Done with the sort */
      176     9827        /*
      177     9828                                          Get pointers for next partition
      178     9829        */
      179     9830    3                 LOW$ = STACK_LOW$(STACK_TOP);
      180     9831    3                 HIGH$ = STACK_HIGH$(STACK_TOP);
      181     9832    3                 STACK_TOP = STACK_TOP - 1;
      182     9833    3                END;                   /* end do while(poffw(HIGH$,LOW$) < ieps) */
      183     9834        /*
      184     9835                                         Use quick sort method to get next partition(s)*/
      185     9836    2             ILOW$ = LOW$;
      186     9837    2             JHIGH$ = HIGH$;
      187     9838        /*
      188     9839                                          Choose pivot element and switch
      189     9840                                          the low element and the pivot element
      190     9841                                          saving the pivot element in buf
      191     9842        */
      192     9843    2             PIVOT = VY_LINK_UTS / 2 ;
      193     9844    2             PIVOT = MOD ( PIVOT,
      194     9845    2                     (POFFW( HIGH$, LOW$ ) / SIZE + 1 ) ) * SIZE;
      195     9846    2             Q$ = PINCRW( LOW$, PIVOT );
      196     9847    2             BUF = Q$ -> VY$SOURCE_B;
      197     9848    2             Q$ -> VY$TARGET_B = LOW$ -> VY$SOURCE_B;
      198     9849    2             LOW$ -> VY$TARGET_B = BUF;
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:14   
      199     9850    2             CALL GET_NAME_KEY( KEY, LOW$ );
      200     9851
      201     9852
      202     9853    3             DO WHILE ( JHIGH$  >  ILOW$ );
      203     9854    4                 DO WHILE (JHIGH$ > LOW$ );
      204     9855    4                     CALL GET_NAME_KEY( KEY_J, JHIGH$ );
      205     9856    4                     IF KEY_J > KEY THEN   /* Move JHIGH$ towards ILOW$ */
      206     9857    4                         JHIGH$ = PINCRW( JHIGH$, MSIZE );
      207     9858    4                     ELSE GOTO EXIT_2;
      208     9859    4                    END;
      209     9860    3   EXIT_2:       ;
      210     9861    3                 IF JHIGH$ > ILOW$ THEN
      211     9862    4                 DO;
      212     9863    4                     ILOW$ -> VY$TARGET_B = JHIGH$ -> VY$SOURCE_B;
      213     9864    4                     ILOW$ = PINCRW( ILOW$, SIZE );
      214     9865    5                     DO WHILE ( ILOW$ < HIGH$ );
      215     9866    5                         CALL GET_NAME_KEY( KEY_I, ILOW$ );
      216     9867    5                         IF KEY_I < KEY THEN /* Move ILOW$ toward JHIGH$ */
      217     9868    5                             ILOW$ = PINCRW( ILOW$, SIZE );
      218     9869    5                         ELSE GOTO EXIT_3;
      219     9870    5                        END;
      220     9871    4   EXIT_3:           ;
      221     9872    4                     IF JHIGH$ > ILOW$ THEN
      222     9873    5                     DO;
      223     9874    5                         JHIGH$ -> VY$TARGET_B = ILOW$ -> VY$SOURCE_B;
      224     9875    5                         JHIGH$ = PINCRW( JHIGH$, MSIZE );
      225     9876    5                        END;
      226     9877    4                     ELSE ILOW$ = JHIGH$;  /* No more passes */
      227     9878    4                    END;                   /* end if JHIGH$ > ILOW$ then */
      228     9879    3                 ELSE JHIGH$ = ILOW$;      /* No more passes  */
      229     9880    3                END;                       /* end do while(JHIGH$ > ILOW$) */
      230     9881                                    /* Assign pivot element to the correct position */
      231     9882    2             JHIGH$ -> VY$TARGET_B =  BUF;
      232     9883        /*
      233     9884                                      Put the pointers which delimit the partitions onto
      234     9885                                      the stacks.  Largest partition first.
      235     9886        */
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:15   
      236     9887    2             HIGH_TO_ILOW = POFFW( HIGH$, ILOW$ );
      237     9888    2             ILOW_TO_LOW  = POFFW( ILOW$, LOW$  );
      238     9889    3             IF HIGH_TO_ILOW > ILOW_TO_LOW THEN DO;
      239     9890    4                 IF HIGH_TO_ILOW > SIZE THEN DO;
      240     9891    4                     STACK_TOP = STACK_TOP + 1;
      241     9892    4                     STACK_LOW$(STACK_TOP) = PINCRW(ILOW$, SIZE);
      242     9893    4                     STACK_HIGH$(STACK_TOP) = HIGH$;
      243     9894    4                    END;
      244     9895    4                 IF ILOW_TO_LOW > SIZE THEN DO;
      245     9896    4                     STACK_TOP = STACK_TOP + 1;
      246     9897    4                     STACK_LOW$(STACK_TOP) = LOW$;
      247     9898    4                     STACK_HIGH$(STACK_TOP) = PINCRW( ILOW$, MSIZE );
      248     9899    4                    END;
      249     9900    3                END;
      250     9901    3             ELSE DO;
      251     9902    4                 IF ILOW_TO_LOW > SIZE THEN DO;
      252     9903    4                     STACK_TOP = STACK_TOP + 1;
      253     9904    4                     STACK_LOW$(STACK_TOP) = LOW$;
      254     9905    4                     STACK_HIGH$(STACK_TOP) = PINCRW( ILOW$, MSIZE );
      255     9906    4                    END;
      256     9907    4                 IF HIGH_TO_ILOW > SIZE THEN DO;
      257     9908    4                     STACK_TOP = STACK_TOP + 1;
      258     9909    4                     STACK_LOW$(STACK_TOP) = PINCRW( ILOW$, SIZE );
      259     9910    4                     STACK_HIGH$(STACK_TOP) = HIGH$;
      260     9911    4                    END;
      261     9912    3                END;
      262     9913    2            END;                           /* do forever */
      263     9914        %EJECT;
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:16   
      264     9915              %BANNER(ARG=VYQ$SORT_V ENTRY );

              9923    2   /*******************************************************************************
              9924    2   *                                                                              *
              9925    2   *                          VYQ$SORT_V ENTRY                                        *
              9926    2   *                                                                              *
              9927    2   *******************************************************************************/

      265     9931
      266     9932
      267     9933
      268     9934    1   VYQ$SORT_V :
      269     9935    1         ENTRY ( NAME$, START$, STOP$, SZ, TP, N_D, TYES );
      270     9936        /*
      271     9937                              Sort by value
      272     9938        */
      273     9939    1         IF START$ = STOP$ THEN RETURN;
      274     9940    1         STACK_LOW$(0) = START$;
      275     9941    1         STACK_HIGH$(0) = STOP$;
      276     9942    1         STACK_TOP = 0;
      277     9943    1         SIZE = SZ;
      278     9944    1         VY_TARGET_COUNT = SIZE * @CHAR_WORD * @BIT_CHAR;
      279     9945    1         VY_SOURCE_COUNT = VY_TARGET_COUNT;
      280     9946    1         IEPS  = 10 * SIZE;
      281     9947    1         MSIZE = - SIZE;
      282     9948
      283     9949    2         DO WHILE ( '1'B );                /* Do forever */
      284     9950        /*
      285     9951                                      Get pointers which delimit partition from
      286     9952                                                               top of stacks */
      287     9953    2             IF STACK_TOP < 0 THEN RETURN; /* Done sorting  */
      288     9954    2             LOW$ = STACK_LOW$(STACK_TOP);
      289     9955    2             HIGH$ = STACK_HIGH$(STACK_TOP);
      290     9956    2             STACK_TOP = STACK_TOP - 1;
      291     9957    3             DO WHILE( POFFW(HIGH$, LOW$)  <  IEPS );
      292     9958        /*
      293     9959                                              Use insertion method to sort the partition
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:17   
      294     9960        */
      295     9961    3                 PARTITION_SIZE = ( POFFW( HIGH$, LOW$ ) + SIZE ) / SIZE;
      296     9962    3                 JHIGH$ = PINCRW(HIGH$, MSIZE);
      297     9963    4                 DO I = 2 TO PARTITION_SIZE;
      298     9964    4                     BUF = JHIGH$ -> VY$TARGET_B;
      299     9965    4                     ILOW$ = PINCRW( JHIGH$, SIZE );
      300     9966    4                     CALL GET_VALUE_KEY( VALUE_KEY1, JHIGH$ );
      301     9967    5                     DO WHILE ( ILOW$ <= HIGH$ );
      302     9968    5                         CALL GET_VALUE_KEY( VALUE_KEY2, ILOW$ );
      303     9969    5                         IF VALUE_KEY2 >= VALUE_KEY1 THEN GOTO JUMP_OUT_1;
      304     9970    5                         PINCRW(ILOW$, MSIZE) -> VY$TARGET_B = ILOW$ ->VY$SOURCE_B;
      305     9971    5                         ILOW$ = PINCRW( ILOW$, SIZE );
      306     9972    5                        END;
      307     9973    4   JUMP_OUT_1:
      308     9974    4                     PINCRW(ILOW$, MSIZE) -> VY$TARGET_B  = BUF;
      309     9975    4                     JHIGH$ = PINCRW( JHIGH$, MSIZE );
      310     9976    4                    END;                   /* do i = 2 to partition_size  */
      311     9977    3                 IF STACK_TOP < 0 THEN RETURN; /* Done with the sort */
      312     9978        /*
      313     9979                                          Get pointers for next partition
      314     9980        */
      315     9981    3                 LOW$ = STACK_LOW$(STACK_TOP);
      316     9982    3                 HIGH$ = STACK_HIGH$(STACK_TOP);
      317     9983    3                 STACK_TOP = STACK_TOP - 1;
      318     9984    3                END;                   /* end do while(poffw(HIGH$,LOW$) < ieps) */
      319     9985        /*
      320     9986                                         Use quick sort method to get next partition(s)*/
      321     9987    2             ILOW$ = LOW$;
      322     9988    2             JHIGH$ = HIGH$;
      323     9989        /*
      324     9990                                          Choose pivot element and switch
      325     9991                                          the low element and the pivot element
      326     9992                                          saving the pivot element in buf
      327     9993        */
      328     9994    2             PIVOT = VY_LINK_UTS / 2 ;
      329     9995    2             PIVOT = MOD ( PIVOT,
      330     9996    2                     (POFFW( HIGH$, LOW$ ) / SIZE + 1 ) ) * SIZE;
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:18   
      331     9997    2             Q$ = PINCRW( LOW$, PIVOT );
      332     9998    2             BUF = Q$ -> VY$SOURCE_B;
      333     9999    2             Q$ -> VY$TARGET_B = LOW$ -> VY$SOURCE_B;
      334    10000    2             LOW$ -> VY$TARGET_B = BUF;
      335    10001    2             CALL GET_VALUE_KEY( VALUE_KEY1, LOW$ );
      336    10002
      337    10003
      338    10004    3             DO WHILE ( JHIGH$  >  ILOW$ );
      339    10005    4                 DO WHILE ( JHIGH$ > LOW$ );
      340    10006    4                     CALL GET_VALUE_KEY( VALUE_KEY2, JHIGH$ );
      341    10007    4                     IF VALUE_KEY1 >= VALUE_KEY2 THEN GOTO JUMP_OUT_2;
      342    10008                                                /* Move JHIGH$ towards ILOW$ */
      343    10009    4                     JHIGH$ = PINCRW( JHIGH$, MSIZE );
      344    10010    4                    END;
      345    10011    3   JUMP_OUT_2:
      346    10012    3                 IF JHIGH$ > ILOW$ THEN
      347    10013    4                 DO;
      348    10014    4                     ILOW$ -> VY$TARGET_B = JHIGH$ -> VY$SOURCE_B;
      349    10015    4                     ILOW$ = PINCRW( ILOW$, SIZE );
      350    10016    5                     DO WHILE ( ILOW$ < HIGH$  );
      351    10017    5                         CALL GET_VALUE_KEY( VALUE_KEY2, ILOW$ );
      352    10018    5                         IF VALUE_KEY1 <= VALUE_KEY2 THEN GOTO JUMP_OUT_3;
      353    10019                                                /* Move ILOW$ toward JHIGH$ */
      354    10020    5                         ILOW$ = PINCRW( ILOW$, SIZE );
      355    10021    5                        END;
      356    10022    4   JUMP_OUT_3:
      357    10023    5                     IF JHIGH$ > ILOW$ THEN DO;
      358    10024    5                         JHIGH$ -> VY$TARGET_B = ILOW$ -> VY$SOURCE_B;
      359    10025    5                         JHIGH$ = PINCRW( JHIGH$, MSIZE );
      360    10026    5                        END;
      361    10027    4                     ELSE ILOW$ = JHIGH$;  /* No more passes */
      362    10028    4                    END;                   /* end if JHIGH$ > ILOW$ then */
      363    10029    3                 ELSE JHIGH$ = ILOW$;      /* No more passes  */
      364    10030    3                END;                       /* end do while(JHIGH$ > ILOW$) */
      365    10031                                    /* Assign pivot element to the correct position */
      366    10032    2             JHIGH$ -> VY$TARGET_B =  BUF;
      367    10033        /*
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:19   
      368    10034                                      Put the pointers which delimit the partitions onto
      369    10035                                      the stacks.  Largest partition first.
      370    10036        */
      371    10037    2             HIGH_TO_ILOW = POFFW( HIGH$, ILOW$ );
      372    10038    2             ILOW_TO_LOW  = POFFW( ILOW$, LOW$  );
      373    10039    3             IF HIGH_TO_ILOW > ILOW_TO_LOW THEN DO;
      374    10040    4                 IF HIGH_TO_ILOW > SIZE THEN DO;
      375    10041    4                     STACK_TOP = STACK_TOP + 1;
      376    10042    4                     STACK_LOW$(STACK_TOP) = PINCRW(ILOW$, SIZE);
      377    10043    4                     STACK_HIGH$(STACK_TOP) = HIGH$;
      378    10044    4                    END;
      379    10045    4                 IF ILOW_TO_LOW > SIZE THEN DO;
      380    10046    4                     STACK_TOP = STACK_TOP + 1;
      381    10047    4                     STACK_LOW$(STACK_TOP) = LOW$;
      382    10048    4                     STACK_HIGH$(STACK_TOP) = PINCRW( ILOW$, MSIZE );
      383    10049    4                    END;
      384    10050    3                END;
      385    10051    3             ELSE DO;
      386    10052    4                 IF ILOW_TO_LOW > SIZE THEN DO;
      387    10053    4                     STACK_TOP = STACK_TOP + 1;
      388    10054    4                     STACK_LOW$(STACK_TOP) = LOW$;
      389    10055    4                     STACK_HIGH$(STACK_TOP) = PINCRW( ILOW$, MSIZE );
      390    10056    4                    END;
      391    10057    4                 IF HIGH_TO_ILOW > SIZE THEN DO;
      392    10058    4                     STACK_TOP = STACK_TOP + 1;
      393    10059    4                     STACK_LOW$(STACK_TOP) = PINCRW( ILOW$, SIZE );
      394    10060    4                     STACK_HIGH$(STACK_TOP) = HIGH$;
      395    10061    4                    END;
      396    10062    3                END;
      397    10063    2            END;                           /* do forever */
      398    10064
      399    10065        %EJECT;
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:20   
      400    10066    1   GET_NAME_KEY: PROC( KEY, ITEM$ );
      401    10067
      402    10068    2   DCL KEY(0:1)  CHAR(512);
      403    10069    2   DCL ITEM$     PTR;
      404    10070
      405    10071
      406    10072    2         KEY(0) = PINCRW(N$, ITEM$->VY$TMPLT.A(NAME_DISP)) -> B$DNAME.TEXT;
      407    10073    2         IF TWO_KEY_SORT
      408    10074    2         THEN KEY(1) = PINCRW(DNAME$, ITEM$->VY$TMPLT.A(TYES)) -> B$DNAME.TEXT;
      409    10075    2         ELSE KEY(1) = ' ';
      410    10076
      411    10077
      412    10078
      413    10079    2   END GET_NAME_KEY;
      414    10080
      415    10081        %EJECT;
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:21   
      416    10082    1   GET_VALUE_KEY: PROC ( KEY, ITEM$ );
      417    10083
      418    10084    2   DCL KEY UBIN;
      419    10085    2   DCL KEY_A(0:1) REDEF KEY UBIN HALF UNAL;
      420    10086    2   DCL ITEM$ PTR;
      421    10087
      422    10088    3         DO CASE( TYPE );
      423    10089    3           CASE( %TYPSECT );
      424    10090    3             KEY = ITEM$ -> VY$SC.ADDRESS;
      425    10091    3             IF ITEM$ -> VY$SC.ATTR.SEGMENT
      426    10092    3             THEN KEY_A(0) = ITEM$ -> VY$SC.NODE#;
      427    10093    3           CASE( %TYPEDEF );
      428    10094    3             KEY = ITEM$ -> VYD$TMPLT.I.OFFSET;
      429    10095    3           CASE( %TYPSDEF );
      430    10096    3             IF ITEM$ -> VYD$TMPLT.I.C
      431    10097    3             THEN KEY = ITEM$ -> VYD$TMPLT.V.VALUE;
      432    10098    3             ELSE KEY = ITEM$ -> VYD$TMPLT.I.OFFSET;
      433    10099    3           CASE( %TYPSEGDEF );
      434    10100    4             IF ITEM$ -> VYD$TMPLT.I.C THEN DO;
      435    10101    4                 KEY_A(0) = ITEM$ -> VYD$TMPLT.A(1);
      436    10102    4                 KEY_A(1) = ITEM$ -> VYD$TMPLT.A(0);
      437    10103    4                END;
      438    10104    4             ELSE DO;
      439    10105    4                 KEY_A(0) = ITEM$ -> VYD$TMPLT.SEG.SEGID;
      440    10106    4                 KEY_A(1) = ITEM$ -> VYD$TMPLT.I.OFFSET;
      441    10107    4                END;
      442    10108    3           END;
      443    10109    2   END GET_VALUE_KEY;
      444    10110
      445    10111
      446    10112
      447    10113
      448    10114    1   END VYQ$SORT;

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:22   
--  Include file information  --

   B$OBJECT_C.:E05TOU  is referenced.
   VY_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VY_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VY_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VY_MACRO_C.:E05TOU  is referenced.
   VY_PERR_C.:E05TOU  is referenced.
   VY_SUBS_C.:E05TOU  is referenced.
   VY_INC_NO_C.:E05TOU  is referenced.
   VY_SWITCH_C.:E05TOU  is referenced.
   VY_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VYQ$SORT.

   Procedure VYQ$SORT requires 778 words for executable code.
   Procedure VYQ$SORT is declared NOAUTO and requires 848 words of local(STATIC) storage.

    No errors detected in file VYQ$SORT.:E05TSI    .

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:23   

 Object Unit name= VYQ$SORT                                   File name= VYQ$SORT.:E05TOU
 UTS= JUL 30 '97 09:01:39.40 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none   848   1520  VYQ$SORT
    1   DCB   even  none     0      0  M$UC
    2   Proc  even  none   778   1412  VYQ$SORT
    3  RoData even  none    10     12  VYQ$SORT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        7  VYQ$SORT
     2    516                  yes      Std        7  VYQ$SORT_V

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_STATIC_N
                       Std       0 B_CONSPOOL_D

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VY_LINK_UTS                           VY_CURR$
     VY_ERRORS                             VY_TARGET_COUNT                       VY_SOURCE_COUNT
     VY_PAR_UNWIND                         B_VECTNIL
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:24   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:25   


        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC  */
        7        7        /*M*  VYQ$SORT    Performs a sort  */
        8        8        /*P*  NAME: VYQ$SORT
        9        9              PURPOSE: Performs a sort on names or values
       10       10              DESCRIPTION: Performs a sort on names or values
       11       11              REFERENCE: Knuth, D. E., The Art of Computer Programming,
       12       12                         Addison Wesley, Vol. 3, 1973, pp 114-123.
       13       13                                                      */
       14       14        /*D*  NAME: VYQ$SORT
       15       15              ENTRY: VYQ$SORT_V
       16       16              CALL: CALL VYQ$SORT(NAME$, START$, STOP$, SZ,   TP,   N_D,       TYES);
       17       17                    CALL VYQ$SORT_V(NAME$, START$, STOP$, SZ,   TP,   N_D,       TYES);
       18       18              INPUT: NAME$   - Pointer to start of name pool
       19       19                     START$  - Pointer to beginning of list to be searched
       20       20                     STOP$   - Pointer to end of the list ...
       21       21                     SZ      - Size in words of an item in the list
       22       22                     TP      - Switch which indicates type of sort;
       23       23                               0=>by value; 1=>by name
       24       24                     N_D     -  Index into list item where relative word displacement
       25       25                                to its associated name resides
       26       26                     TYES    - Half word index into list item of second key fo name sorts
       27       27                               Type of record for value sorts.
       28       28              OUTPUT: The list in sorted ascending order
       29       29              DESCRIPTION: Performs a sort on a list bounded by START$
       30       30                           and STOP$. The sorting technique employed is a partition
       31       31                           exchange sort. Each list during its initial pass is
       32       32                           broken into 3 partitions such that each element of the
       33       33                           first partition is smaller than all elements of the
       34       34                           third partition( conversely, each element of the third
       35       35                           partition is larger than all elements of the first
       36       36                           partition). The second partition has exactly 1 entry
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:26   
       37       37                           and is in its proper position  with respect to the
       38       38                           sort. Thus, partitions 1 and 3 need to be processed.
       39       39                           The shorter of 1 and 3 is selected for processing
       40       40                           while the longer is stacked. The selected list(1 or 3)
       41       41                           becomes the initial list and the process is repeated,
       42       42                           provided the list is sufficiently "large". If it is
       43       43                           not sufficiently large, a straight selection sort is
       44       44                           performed on the (sub-)list. The next (sub-)list is
       45       45                           then taken off the stack and processed. This
       46       46                           procedure occurs iteratively until all (sub-)lists
       47       47                           are processes and the algorithm terminates when a
       48       48                           pop off an empty stack occurs.
       49       49                                                                     */
       50       50        VYQ$SORT :
       51       51              PROC( NAME$, START$, STOP$, SZ, TP, N_D, TYES ) NOAUTO;

     51  2 000000   000000 700200 xent  VYQ$SORT     TSX0  ! X66_STATIC_N
         2 000001   000000 000007 0                  ZERO    0,7

       52       52        %INCLUDE VY_INC_C;
       53     9228        %BANNER(ARG=SUBS);

              9236    1   /*******************************************************************************
              9237    1   *                                                                              *
              9238    1   *                          SUBS                                                 *
              9239    1   *                                                                              *
              9240    1   *******************************************************************************/

       54     9244        %B$RECORDSUBS;
       55     9272        %VY$NODE;

              9284    1   /*******************************************************************************
              9285    1   *                                                                              *
              9286    1   *                          VY$NODE                                                *
              9287    1   *                                                                              *
              9288    1   *******************************************************************************/

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:27   
              9304    1   DCL 1 VY$NODE      ALIGNED    BASED,
              9305    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
              9306    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
              9307    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
              9308    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
              9309    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
              9310                              to list of file nodes for this node            */
              9311    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
              9312    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
              9312                  /* Head pointer to shared library list */
              9313    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
              9313                  /* Head pointer to list of shared libraries
              9314                                          which have been mapped to included libraries */
              9315    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
              9316    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
              9317    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
              9318    1         2 ADDR_START REDEF  ADDR_START_A,
              9319    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
              9320    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
              9321    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
              9322    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
              9323    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
              9324    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
              9325    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
              9326    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
              9327    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
              9328    1         2 START_PAGE# REDEF START_PAGE#_A,
              9329    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
              9330    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
              9331    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
              9332    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
              9333    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
              9334    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
              9335    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
              9336    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
              9337    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
              9337                  /* Starting pointer for common sections for this node */
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:28   
              9338    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
              9338                  /* Stopping pointer for common sections for this node */
              9339    1         2 L_START,
              9340    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
              9341    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
              9342    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
              9343    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
              9344    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
              9345    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
              9346    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
              9347    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
              9348    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
              9349    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
              9350    1         2 L_START_A$(0:9)     REDEF L_START PTR,
              9351    1         2 L_STOP,
              9352    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
              9353    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
              9354    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
              9355    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
              9356    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
              9357    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
              9358    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
              9359    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
              9360    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
              9361    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
              9362    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
              9363    1         2 L_SIZE,
              9364    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
              9365    1           3 DN      UBIN /*(0)*/, /* Def names                          */
              9366    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
              9367    1           3 SC      UBIN /*(0)*/, /* Sections                           */
              9368    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
              9369    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
              9370    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
              9371    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
              9372    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
              9373    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:29   
              9374    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
              9375    1         2 L_PREV_SIZE,
              9376    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
              9377    1           3 DN      UBIN /*(0)*/, /* Def names                          */
              9378    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
              9379    1           3 SC      UBIN /*(0)*/, /* Sections                           */
              9380    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
              9381    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
              9382    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
              9383    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
              9384    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
              9385    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
              9386    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
              9387    1         2 BIT_MAP                ALIGNED,
              9388    1           3 DATA                  ALIGNED,
              9389    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
              9390    1           3 RPROC                 ALIGNED,
              9391    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
              9392    1           3 ROS                   ALIGNED,
              9393    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
              9394    1         2 L_SC_START,
              9395    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
              9396    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
              9397    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
              9398    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
              9399    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
              9400    1         2 L_SC_STOP,
              9401    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
              9402    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
              9403    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
              9404    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
              9405    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
              9406    1         2 PROMOTE_HEAD,
              9407    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
              9408    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
              9409    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
              9410    1         2 PROMOTE_TAIL,
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:30   
              9411    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
              9412    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
              9413    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
              9414    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
              9415    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
              9416    1         2 *                 BIT(34)   UNAL /*('0'B)*/,
              9417    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       56     9421        %VY$SC;

              9435    1   /*******************************************************************************
              9436    1   *                                                                              *
              9437    1   *                          VY$SC                                                 *
              9438    1   *                                                                              *
              9439    1   *******************************************************************************/

              9443    1   DCL 1 VY$SC               BASED     ALIGNED,
              9444    1         2 TYPE              UBIN(9)   UNAL,
              9445    1         2 EMPTY             BIT (1)   UNAL,
              9446    1         2 ATTR                        UNAL,
              9447    1           3 INT              UBIN(2)   UNAL,
              9448    1           3 SEGMENT          BIT(1)    UNAL,
              9449    1           3 ALL              BIT(1)    UNAL,
              9450    1           3 PRE_DCB          BIT(1) UNAL, /* '1'B => true; '0'B => false        */
              9451    1           3 MES_INIT         BIT (1)   UNAL,
              9452    1           3 ALIGN            UBIN(2)   UNAL,
              9453    1         2 ADDRESS           UBIN(18)  UNAL,
              9454    1         2 NAME_DISP         SBIN HALF UNAL,
              9455    1         2 SIZE              UBIN(18)  UNAL,
              9456    1         2 NODE#             UBIN(18)  UNAL,
              9457    1         2 COM_LINK          UBIN(18)  UNAL;

              9466    1   /*******************************************************************************
              9467    1   *                                                                              *
              9468    1   *                          VY$SECT                                                *
              9469    1   *                                                                              *
              9470    1   *******************************************************************************/
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:31   

              9474    1   DCL 1 VY$SECT       BASED     ALIGNED,
              9475    1         2 TYPE              UBIN(9)   UNAL,
              9476    1         2 EMPTY             BIT (1)   UNAL,
              9477    1         2 ATTR                        UNAL,
              9478    1           3 INT              UBIN(2)  UNAL,
              9479    1           3 SEGMENT          BIT (1)  UNAL,
              9480    1           3 *                UBIN(3)  UNAL,
              9481    1           3 ALIGN            UBIN(2)  UNAL,
              9482    1         2 SIZE              UBIN(18)  UNAL,
              9483    1         2 NAME_DISP         SBIN HALF UNAL,
              9484    1         2 SEG_NPOINTER      UBIN(18)  UNAL;
       57     9487        %VYD$TMPLT;

              9499    1   /*******************************************************************************
              9500    1   *                                                                              *
              9501    1   *                          VYD$TMPLT                                              *
              9502    1   *                                                                              *
              9503    1   *******************************************************************************/

              9508    1   DCL 1 VYD$TMPLT          ALIGNED BASED, /* Template for defs                  */
              9509    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array ...                          */
              9510    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
              9511    1         2 I       REDEF     A,            /* Items                              */
              9512    1           3 WHERE        UBIN( 3) UNAL,   /* Source of def                      */
              9513                                                                /* Value from
              9514                                                                     0   object
              9515                                                                     1   library */
              9516    1           3 DEFINED      BIT( 1) UNAL,    /* Defined or not                     */
              9517    1           3 B                      UNAL,
              9518    1             4 MULTIPLY    BIT(1) UNAL,    /* Multiply defined                   */
              9519    1           3 SC#          UBIN(13) UNAL,   /* Section #                          */
              9520    1           3 AFTER        REDEF SC#      UNAL,
              9521    1             4 USED        BIT(1) UNAL,    /* Used or not                        */
              9522    1             4 *           BIT(12) UNAL,
              9523    1           3 OFFSET      UBIN(18) UNAL,    /* Offset/address                     */
              9524    1           3 NAME_DISP   UBIN(18) UNAL,    /* Displacement to name(in words)     */
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:32   
              9525    1           3 NAME_DISP_SBIN REDEF NAME_DISP   SBIN HALF UNAL,
              9526    1           3 P           UBIN( 1) UNAL,    /* Primary entdef                     */
              9527    1           3 C REDEF P   BIT(  1) UNAL,    /* Constant bit for symdefs           */
              9528    1           3 A           UBIN( 1) UNAL,    /* Altret specified                   */
              9529    1          3 MULTIPLY REDEF A BIT(1) UNAL, /* Multiply defined for constant sym defs */
              9530    1           3 I           BIT(  1) UNAL,    /* Argument/parameter check           */
              9531    1           3 USED    REDEF I  BIT(1) UNAL, /* Used or not for constant sym defs  */
              9532    1           3 CST         UBIN( 4) UNAL,    /* Calling sequence type              */
              9533    1           3 WHERE_C REDEF CST UBIN(4) UNAL, /* Source of def for constant sym defs */
              9534    1           3 NP          UBIN(11) UNAL,    /* # of parameters                    */
              9535    1           3 IS_DCB  REDEF     NP,
              9536    1             4 DCB_BIT     BIT(1)    UNAL,
              9537    1             4 *           BIT(10)   UNAL,
              9538    1         2 SEG REDEF A,
              9539    1           3 *             UBIN      UNAL,
              9540    1           3 NPOINTER      UBIN(18)  UNAL,
              9541    1           3 CONSTNT       BIT(1)    UNAL,
              9542    1           3 TYPE          UBIN(5)   UNAL,
              9543    1           3 SEGID         UBIN(12)  UNAL,
              9544    1         2 V REDEF A,
              9545    1           3 VALUE       UBIN(36) UNAL,    /* Value if C=1                       */
              9546    1           3 *           UBIN(36) UNAL,
              9547    1         2 S  REDEF  A,                    /* Value if C=1                       */
              9548    1           3 *         UBIN(24) UNAL,
              9549    1           3 SEGID     UBIN(12) UNAL,
              9550    1           3 *         UBIN     UNAL;
       58     9553        %SET LISTDIR='0'B;

              9565    1   /*******************************************************************************
              9566    1   *                                                                              *
              9567    1   *                          B$DNAME                                                *
              9568    1   *                                                                              *
              9569    1   *******************************************************************************/

              9581    1   DCL 1 B$DNAME BASED ALIGNED,
              9582    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
              9583                /*K*  COUNT is the number of characters in the name */
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:33   
              9589    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;

              9604    1   /*******************************************************************************
              9605    1   *                                                                              *
              9606    1   *                          TMPLT                                                 *
              9607    1   *                                                                              *
              9608    1   *******************************************************************************/

              9613    1   DCL 1 VY$TMPLT           ALIGNED BASED, /* Template for defs                  */
              9614    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
              9615    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
              9616    1         2 W       REDEF     A,            /* By name                            */
              9617    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
              9618    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */

              9633    1   /*******************************************************************************
              9634    1   *                                                                              *
              9635    1   *                          PARAMETERS                                             *
              9636    1   *                                                                              *
              9637    1   *******************************************************************************/

       70     9641    1   DCL NAME$           PTR;                /* Pointer to B$DNAME pool */
       71     9642    1   DCL START$          PTR;                /* Starting ptr */
       72     9643    1   DCL STOP$           PTR;                /* Stoping  ptr */
       73     9644    1   DCL SZ              UBIN(36);           /* Size in words of an entry */
       74     9645    1   DCL TP              UBIN(36);           /* 0=> by value; 1=> by dname   */
       75     9646    1   DCL N_D             UBIN(36);   /* Word displacement to name pointer field */
       76     9647    1   DCL TYES            UBIN(36);       /* Half-word index for second name key */
       77     9648    1   DCL TYPE REDEF TYES UBIN(36);       /* Type of record to be sorted by value */

              9657    1   /*******************************************************************************
              9658    1   *                                                                              *
              9659    1   *                          UBIN                                                 *
              9660    1   *                                                                              *
              9661    1   *******************************************************************************/

       79     9665    1   DCL SIZE            SBIN(36)  ALIGNED   STATIC;
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:34   
       80     9666    1   DCL NAME_DISP       UBIN(36)  ALIGNED   STATIC;
       81     9667    1   DCL PIVOT            SBIN(36)  ALIGNED   STATIC;
       82     9668    1   DCL PARTITION_SIZE   UBIN(36)  ALIGNED   STATIC;
       83     9669    1   DCL I                UBIN(36)  ALIGNED   STATIC;
       84     9670    1   DCL 1 BUF STATIC,
       85     9671    1         2 A(0:5) UBIN(18) UNAL,
       86     9672    1         2 W REDEF A,
       87     9673    1           3 WORD0 UBIN(36) UNAL,
       88     9674    1           3 WORD1 UBIN(36) UNAL,
       89     9675    1           3 WORD2 UBIN(36) UNAL;
       90     9676    1   DCL VALUE_KEY1      UBIN(36)  ALIGNED   STATIC;
       91     9677    1   DCL VALUE_KEY2      UBIN(36)  ALIGNED   STATIC;
       92     9678    1   DCL IEPS            UBIN(36)  ALIGNED   STATIC;

              9687    1   /*******************************************************************************
              9688    1   *                                                                              *
              9689    1   *                          SBIN                                                 *
              9690    1   *                                                                              *
              9691    1   *******************************************************************************/

       94     9695    1   DCL STACK_TOP       SBIN WORD ALIGNED STATIC INIT ( -1 );
       95     9696    1   DCL MSIZE           SBIN WORD ALIGNED STATIC;
       96     9697    1   DCL HIGH_TO_ILOW    SBIN WORD ALIGNED STATIC;
       97     9698    1   DCL ILOW_TO_LOW     SBIN WORD ALIGNED STATIC;

              9707    1   /*******************************************************************************
              9708    1   *                                                                              *
              9709    1   *                          PTR                                                 *
              9710    1   *                                                                              *
              9711    1   *******************************************************************************/

       99     9715    1   DCL N$              PTR       ALIGNED   STATIC;
      100     9716    1   DCL Q$              PTR       ALIGNED   STATIC;
      101     9717    1   DCL LOW$            PTR       ALIGNED   STATIC;
      102     9718    1   DCL HIGH$           PTR       ALIGNED   STATIC;
      103     9719    1   DCL ILOW$           PTR       ALIGNED   STATIC;
      104     9720    1   DCL JHIGH$          PTR       ALIGNED   STATIC;
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:35   
      105     9721    1   DCL R$              PTR       ALIGNED   STATIC;
      106     9722    1   DCL KEY$            PTR       ALIGNED   STATIC;
      107     9723    1   DCL DNAME$          PTR       ALIGNED   STATIC;
      108     9724    1   DCL STACK_LOW$(0:18)    PTR       ALIGNED   STATIC;
      109     9725    1   DCL STACK_HIGH$(0:18)    PTR       ALIGNED   STATIC;

              9734    1   /*******************************************************************************
              9735    1   *                                                                              *
              9736    1   *                          CHAR                                                 *
              9737    1   *                                                                              *
              9738    1   *******************************************************************************/

      111     9742    1   DCL KEY           CHAR(1024);
      112     9743    1   DCL KEY_I         CHAR(1024);
      113     9744    1   DCL KEY_J         CHAR(1024);

              9753    1   /*******************************************************************************
              9754    1   *                                                                              *
              9755    1   *                          BIT                                                 *
              9756    1   *                                                                              *
              9757    1   *******************************************************************************/

      115     9761    1   DCL TWO_KEY_SORT  BIT(1);
      116     9762        /**/
      117     9763        /**/
      118     9764        /**/
              9766    1   DCL VY$TARGET_B           BIT( VY_TARGET_COUNT ) ALIGNED    BASED;
              9767    1   DCL VY$SOURCE_B           BIT( VY_SOURCE_COUNT ) ALIGNED    BASED;
              9768    1   DCL VY$TARGET_C         CHAR( VY_TARGET_COUNT ) ALIGNED BASED;
              9769    1   DCL VY$SOURCE_C         CHAR( VY_SOURCE_COUNT ) ALIGNED BASED;
      124     9775        %EJECT;
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:36   
      125     9776                                                /*
      126     9777                                                                     Sort by name
      127     9778
      128     9779                                                move params into local variables
      129     9780                                                */
      130     9781    1         IF START$ = STOP$ THEN RETURN;

   9781  2 000002   000002 470400 0                  LDP0    @START$
         2 000003   000003 471400 0                  LDP1    @STOP$
         2 000004   000000 236100                    LDQ     0,,PR0
         2 000005   100000 116100                    CMPQ    0,,PR1
         2 000006   000011 601000 2                  TNZ     s:9782

   9781  2 000007   000000 221200 0                  LDX1  ! 0
         2 000010   000001 702211                    TSX2  ! 1,X1

      131     9782    1         STACK_LOW$(0) = START$;

   9782  2 000011   000040 756000 0                  STQ     STACK_LOW$

      132     9783    1         STACK_HIGH$(0) = STOP$;

   9783  2 000012   100000 236100                    LDQ     0,,PR1
         2 000013   000063 756000 0                  STQ     STACK_HIGH$

      133     9784    1         STACK_TOP = 0;

   9784  2 000014   000023 450000 0                  STZ     STACK_TOP

      134     9785    1         SIZE = SZ;

   9785  2 000015   000004 473400 0                  LDP3    @SZ
         2 000016   300000 235100                    LDA     0,,PR3
         2 000017   000010 755000 0                  STA     SIZE

      135     9786    1         VY_TARGET_COUNT = SIZE * @CHAR_WORD * @BIT_CHAR;

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:37   
   9786  2 000020   000010 236000 0                  LDQ     SIZE
         2 000021   000044 402007                    MPY     36,DL
         2 000022   000000 756000 xsym               STQ     VY_TARGET_COUNT

      136     9787    1         VY_SOURCE_COUNT = VY_TARGET_COUNT;

   9787  2 000023   000000 756000 xsym               STQ     VY_SOURCE_COUNT

      137     9788    1         NAME_DISP = N_D;

   9788  2 000024   000006 474400 0                  LDP4    @N_D
         2 000025   400000 235100                    LDA     0,,PR4
         2 000026   000011 755000 0                  STA     NAME_DISP

      138     9789    1         N$ = NAME$;

   9789  2 000027   000001 475400 0                  LDP5    @NAME$
         2 000030   500000 236100                    LDQ     0,,PR5
         2 000031   000027 756000 0                  STQ     N$

      139     9790    1         IF N_D = TYES THEN TWO_KEY_SORT = @FALSE_B;

   9790  2 000032   000007 476400 0                  LDP6    @TYES
         2 000033   400000 236100                    LDQ     0,,PR4
         2 000034   600000 116100                    CMPQ    0,,PR6
         2 000035   000040 601000 2                  TNZ     s:9792

   9790  2 000036   001506 450000 0                  STZ     TWO_KEY_SORT
         2 000037   000045 710000 2                  TRA     s:9795

      140     9791    2         ELSE DO;

      141     9792    2             DNAME$ = VY_CURR$ -> VY$NODE.L_START.DN$;

   9792  2 000040   000000 477400 xsym               LDP7    VY_CURR$
         2 000041   700031 236100                    LDQ     25,,PR7
         2 000042   000037 756000 0                  STQ     DNAME$
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:38   

      142     9793    2             TWO_KEY_SORT = @TRUE_B;

   9793  2 000043   400000 236003                    LDQ     -131072,DU
         2 000044   001506 756000 0                  STQ     TWO_KEY_SORT

      143     9794    2            END;

      144     9795    1         IEPS  = 10 * SIZE;

   9795  2 000045   000010 236000 0                  LDQ     SIZE
         2 000046   000012 402007                    MPY     10,DL
         2 000047   000022 756000 0                  STQ     IEPS

      145     9796    1         MSIZE = - SIZE;

   9796  2 000050   000010 335000 0                  LCA     SIZE
         2 000051   000024 755000 0                  STA     MSIZE

      146     9797
      147     9798    2         DO WHILE ( '1'B );                /* Do forever */

      148     9799        /*
      149     9800                                      Get pointers which delimit partition from
      150     9801                                                               top of stacks */
      151     9802    2             IF STACK_TOP < 0 THEN RETURN; /* Done sorting */

   9802  2 000052   000023 235000 0                  LDA     STACK_TOP
         2 000053   000056 605000 2                  TPL     s:9803

   9802  2 000054   000000 221200 0                  LDX1  ! 0
         2 000055   000001 702211                    TSX2  ! 1,X1

      152     9803    2             LOW$ = STACK_LOW$(STACK_TOP);

   9803  2 000056   000040 236005 0                  LDQ     STACK_LOW$,AL
         2 000057   000031 756000 0                  STQ     LOW$
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:39   

      153     9804    2             HIGH$ = STACK_HIGH$(STACK_TOP);

   9804  2 000060   000023 720000 0                  LXL0    STACK_TOP
         2 000061   000063 236010 0                  LDQ     STACK_HIGH$,X0
         2 000062   000032 756000 0                  STQ     HIGH$

      154     9805    2             STACK_TOP = STACK_TOP - 1;

   9805  2 000063   000001 336007                    LCQ     1,DL
         2 000064   000023 056000 0                  ASQ     STACK_TOP

      155     9806    3             DO WHILE( POFFW(HIGH$, LOW$)  <  IEPS );

   9806  2 000065   000217 710000 2                  TRA     s:9833

      156     9807        /*
      157     9808                                              Use insertion method to sort the partition
      158     9809        */
      159     9810    3                 PARTITION_SIZE = (POFFW( HIGH$, LOW$) + SIZE ) / SIZE;

   9810  2 000066   000031 235000 0                  LDA     LOW$
         2 000067   000022 771000                    ARL     18
         2 000070   001516 755000 0                  STA     @ITEM$+2
         2 000071   000032 236000 0                  LDQ     HIGH$
         2 000072   000022 772000                    QRL     18
         2 000073   001516 136000 0                  SBLQ    @ITEM$+2
         2 000074   000010 036000 0                  ADLQ    SIZE
         2 000075   000010 506000 0                  DIV     SIZE
         2 000076   000013 756000 0                  STQ     PARTITION_SIZE

      160     9811    3                 JHIGH$ = PINCRW(HIGH$, MSIZE);

   9811  2 000077   000024 236000 0                  LDQ     MSIZE
         2 000100   000022 736000                    QLS     18
         2 000101   000032 036000 0                  ADLQ    HIGH$
         2 000102   000034 756000 0                  STQ     JHIGH$
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:40   

      161     9812    4                 DO I = 2 TO PARTITION_SIZE;

   9812  2 000103   000002 235007                    LDA     2,DL
         2 000104   000014 755000 0                  STA     I
         2 000105   000201 710000 2                  TRA     s:9825+3

      162     9813    4                     BUF = JHIGH$ -> VY$TARGET_B;

   9813  2 000106   000034 470400 0                  LDP0    JHIGH$
         2 000107   000000 720000 xsym               LXL0    VY_TARGET_COUNT
         2 000110   003000 060540                    CSL     bolr='003'O
         2 000111   000000 000010                    BDSC    0,,PR0                   by=0,bit=0,n=*X0
         2 000112   000015 000154 0                  BDSC    BUF                      by=0,bit=0,n=108

      163     9814    4                     ILOW$ = PINCRW( JHIGH$, SIZE );

   9814  2 000113   000010 236000 0                  LDQ     SIZE
         2 000114   000022 736000                    QLS     18
         2 000115   000034 036000 0                  ADLQ    JHIGH$
         2 000116   000033 756000 0                  STQ     ILOW$

      164     9815    4                     CALL GET_NAME_KEY( KEY, JHIGH$ );

   9815  2 000117   000000 237000 3                  LDAQ    0
         2 000120   001510 757000 0                  STAQ    TWO_KEY_SORT+2
         2 000121   001220 701000 2                  TSX1    GET_NAME_KEY
         2 000122   000000 011000                    NOP     0

      165     9816    5                     DO WHILE ( ILOW$ <= HIGH$ );

   9816  2 000123   000032 236000 0                  LDQ     HIGH$
         2 000124   000033 116000 0                  CMPQ    ILOW$
         2 000125   000160 602000 2                  TNC     EXIT_1

      166     9817    5                         CALL GET_NAME_KEY( KEY_I, ILOW$ );

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:41   
   9817  2 000126   000002 237000 3                  LDAQ    2
         2 000127   001510 757000 0                  STAQ    TWO_KEY_SORT+2
         2 000130   001220 701000 2                  TSX1    GET_NAME_KEY
         2 000131   000000 011000                    NOP     0

      167     9818    5                         IF KEY_I >= KEY THEN GOTO EXIT_1;

   9818  2 000132   040000 106400                    CMPC    fill='040'O
         2 000133   000506 002000 0                  ADSC9   KEY_I                    cn=0,n=1024
         2 000134   000106 002000 0                  ADSC9   KEY                      cn=0,n=1024
         2 000135   000160 603000 2                  TRC     EXIT_1

      168     9819    5                         PINCRW(ILOW$, MSIZE) -> VY$TARGET_B = ILOW$ ->VY$SOURCE_B;

   9819  2 000136   000024 236000 0                  LDQ     MSIZE
         2 000137   000044 402007                    MPY     36,DL
         2 000140   000000 116003                    CMPQ    0,DU
         2 000141   000143 605000 2                  TPL     s:9819+5
         2 000142   000044 036003                    ADLQ    36,DU
         2 000143   000033 470400 0                  LDP0    ILOW$
         2 000144   000000 720000 xsym               LXL0    VY_SOURCE_COUNT
         2 000145   000000 721000 xsym               LXL1    VY_TARGET_COUNT
         2 000146   003146 060540                    CSL     bolr='003'O
         2 000147   000000 000010                    BDSC    0,,PR0                   by=0,bit=0,n=*X0
         2 000150   000000 000011                    BDSC    0,Q,PR0                  by=0,bit=0,n=*X1

      169     9820    5                         ILOW$ = PINCRW( ILOW$, SIZE );

   9820  2 000151   000010 236000 0                  LDQ     SIZE
         2 000152   000022 736000                    QLS     18
         2 000153   000033 036000 0                  ADLQ    ILOW$
         2 000154   000033 756000 0                  STQ     ILOW$

      170     9821    5                        END;

   9821  2 000155   000032 116000 0                  CMPQ    HIGH$
         2 000156   000126 602000 2                  TNC     s:9817
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:42   
         2 000157   000126 600000 2                  TZE     s:9817

   9817  2 000160                       EXIT_1       null
      171     9822    4   EXIT_1:           ;
      172     9823    4                     PINCRW(ILOW$, MSIZE) -> VY$TARGET_B  = BUF;

   9823  2 000160   000024 236000 0                  LDQ     MSIZE
         2 000161   000044 402007                    MPY     36,DL
         2 000162   000000 116003                    CMPQ    0,DU
         2 000163   000165 605000 2                  TPL     EXIT_1+5
         2 000164   000044 036003                    ADLQ    36,DU
         2 000165   000033 470400 0                  LDP0    ILOW$
         2 000166   000000 720000 xsym               LXL0    VY_TARGET_COUNT
         2 000167   003146 060400                    CSL     bolr='003'O
         2 000170   000015 000154 0                  BDSC    BUF                      by=0,bit=0,n=108
         2 000171   000000 000010                    BDSC    0,Q,PR0                  by=0,bit=0,n=*X0

      173     9824    4                     JHIGH$ = PINCRW( JHIGH$, MSIZE );

   9824  2 000172   000024 236000 0                  LDQ     MSIZE
         2 000173   000022 736000                    QLS     18
         2 000174   000034 036000 0                  ADLQ    JHIGH$
         2 000175   000034 756000 0                  STQ     JHIGH$

      174     9825    4                    END;                   /* do i = 2 to partition_size   */

   9825  2 000176   000014 235000 0                  LDA     I
         2 000177   000001 035007                    ADLA    1,DL
         2 000200   000014 755000 0                  STA     I
         2 000201   000013 236000 0                  LDQ     PARTITION_SIZE
         2 000202   000014 116000 0                  CMPQ    I
         2 000203   000106 603000 2                  TRC     s:9813

      175     9826    3                 IF STACK_TOP < 0 THEN RETURN; /* Done with the sort */

   9826  2 000204   000023 235000 0                  LDA     STACK_TOP
         2 000205   000210 605000 2                  TPL     s:9830
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:43   

   9826  2 000206   000000 221200 0                  LDX1  ! 0
         2 000207   000001 702211                    TSX2  ! 1,X1

      176     9827        /*
      177     9828                                          Get pointers for next partition
      178     9829        */
      179     9830    3                 LOW$ = STACK_LOW$(STACK_TOP);

   9830  2 000210   000040 236005 0                  LDQ     STACK_LOW$,AL
         2 000211   000031 756000 0                  STQ     LOW$

      180     9831    3                 HIGH$ = STACK_HIGH$(STACK_TOP);

   9831  2 000212   000023 720000 0                  LXL0    STACK_TOP
         2 000213   000063 236010 0                  LDQ     STACK_HIGH$,X0
         2 000214   000032 756000 0                  STQ     HIGH$

      181     9832    3                 STACK_TOP = STACK_TOP - 1;

   9832  2 000215   000001 336007                    LCQ     1,DL
         2 000216   000023 056000 0                  ASQ     STACK_TOP

      182     9833    3                END;                   /* end do while(poffw(HIGH$,LOW$) < ieps) */

   9833  2 000217   000031 235000 0                  LDA     LOW$
         2 000220   000022 771000                    ARL     18
         2 000221   001516 755000 0                  STA     @ITEM$+2
         2 000222   000032 236000 0                  LDQ     HIGH$
         2 000223   000022 772000                    QRL     18
         2 000224   001516 136000 0                  SBLQ    @ITEM$+2
         2 000225   000066 604000 2                  TMI     s:9810
         2 000226   000022 116000 0                  CMPQ    IEPS
         2 000227   000066 602000 2                  TNC     s:9810

      183     9834        /*
      184     9835                                         Use quick sort method to get next partition(s)*/
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:44   
      185     9836    2             ILOW$ = LOW$;

   9836  2 000230   000031 236000 0                  LDQ     LOW$
         2 000231   000033 756000 0                  STQ     ILOW$

      186     9837    2             JHIGH$ = HIGH$;

   9837  2 000232   000032 236000 0                  LDQ     HIGH$
         2 000233   000034 756000 0                  STQ     JHIGH$

      187     9838        /*
      188     9839                                          Choose pivot element and switch
      189     9840                                          the low element and the pivot element
      190     9841                                          saving the pivot element in buf
      191     9842        */
      192     9843    2             PIVOT = VY_LINK_UTS / 2 ;

   9843  2 000234   000000 236000 xsym               LDQ     VY_LINK_UTS
         2 000235   000001 772000                    QRL     1
         2 000236   000012 756000 0                  STQ     PIVOT

      193     9844    2             PIVOT = MOD ( PIVOT,

   9844  2 000237   001516 755000 0                  STA     @ITEM$+2
         2 000240   000032 236000 0                  LDQ     HIGH$
         2 000241   000022 772000                    QRL     18
         2 000242   001516 136000 0                  SBLQ    @ITEM$+2
         2 000243   000010 506000 0                  DIV     SIZE
         2 000244   000001 036007                    ADLQ    1,DL
         2 000245   001517 756000 0                  STQ     @ITEM$+3
         2 000246   000012 236000 0                  LDQ     PIVOT
         2 000247   001517 506000 0                  DIV     @ITEM$+3
         2 000250   000044 733000                    LRS     36
         2 000251   000010 402000 0                  MPY     SIZE
         2 000252   000012 756000 0                  STQ     PIVOT

      194     9845    2                     (POFFW( HIGH$, LOW$ ) / SIZE + 1 ) ) * SIZE;
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:45   
      195     9846    2             Q$ = PINCRW( LOW$, PIVOT );

   9846  2 000253   000022 736000                    QLS     18
         2 000254   000031 036000 0                  ADLQ    LOW$
         2 000255   000030 756000 0                  STQ     Q$

      196     9847    2             BUF = Q$ -> VY$SOURCE_B;

   9847  2 000256   000030 470400 0                  LDP0    Q$
         2 000257   000000 720000 xsym               LXL0    VY_SOURCE_COUNT
         2 000260   003000 060540                    CSL     bolr='003'O
         2 000261   000000 000010                    BDSC    0,,PR0                   by=0,bit=0,n=*X0
         2 000262   000015 000154 0                  BDSC    BUF                      by=0,bit=0,n=108

      197     9848    2             Q$ -> VY$TARGET_B = LOW$ -> VY$SOURCE_B;

   9848  2 000263   000031 471400 0                  LDP1    LOW$
         2 000264   000000 721000 xsym               LXL1    VY_TARGET_COUNT
         2 000265   003140 060540                    CSL     bolr='003'O
         2 000266   100000 000010                    BDSC    0,,PR1                   by=0,bit=0,n=*X0
         2 000267   000000 000011                    BDSC    0,,PR0                   by=0,bit=0,n=*X1

      198     9849    2             LOW$ -> VY$TARGET_B = BUF;

   9849  2 000270   000031 471400 0                  LDP1    LOW$
         2 000271   000000 720000 xsym               LXL0    VY_TARGET_COUNT
         2 000272   003140 060400                    CSL     bolr='003'O
         2 000273   000015 000154 0                  BDSC    BUF                      by=0,bit=0,n=108
         2 000274   100000 000010                    BDSC    0,,PR1                   by=0,bit=0,n=*X0

      199     9850    2             CALL GET_NAME_KEY( KEY, LOW$ );

   9850  2 000275   000004 237000 3                  LDAQ    4
         2 000276   001510 757000 0                  STAQ    TWO_KEY_SORT+2
         2 000277   001220 701000 2                  TSX1    GET_NAME_KEY
         2 000300   000000 011000                    NOP     0

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:46   
      200     9851
      201     9852
      202     9853    3             DO WHILE ( JHIGH$  >  ILOW$ );

   9853  2 000301   000033 236000 0                  LDQ     ILOW$
         2 000302   000034 116000 0                  CMPQ    JHIGH$
         2 000303   000414 603000 2                  TRC     s:9882

      203     9854    4                 DO WHILE (JHIGH$ > LOW$ );

   9854  2 000304   000031 236000 0                  LDQ     LOW$
         2 000305   000034 116000 0                  CMPQ    JHIGH$
         2 000306   000327 603000 2                  TRC     EXIT_2

      204     9855    4                     CALL GET_NAME_KEY( KEY_J, JHIGH$ );

   9855  2 000307   000006 237000 3                  LDAQ    6
         2 000310   001510 757000 0                  STAQ    TWO_KEY_SORT+2
         2 000311   001220 701000 2                  TSX1    GET_NAME_KEY
         2 000312   000000 011000                    NOP     0

      205     9856    4                     IF KEY_J > KEY THEN   /* Move JHIGH$ towards ILOW$ */

   9856  2 000313   040000 106400                    CMPC    fill='040'O
         2 000314   000106 002000 0                  ADSC9   KEY                      cn=0,n=1024
         2 000315   001106 002000 0                  ADSC9   KEY_J                    cn=0,n=1024
         2 000316   000327 603000 2                  TRC     EXIT_2

      206     9857    4                         JHIGH$ = PINCRW( JHIGH$, MSIZE );

   9857  2 000317   000024 236000 0                  LDQ     MSIZE
         2 000320   000022 736000                    QLS     18
         2 000321   000034 036000 0                  ADLQ    JHIGH$
         2 000322   000034 756000 0                  STQ     JHIGH$
         2 000323   000324 710000 2                  TRA     s:9859

      207     9858    4                     ELSE GOTO EXIT_2;
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:47   
      208     9859    4                    END;

   9859  2 000324   000031 116000 0                  CMPQ    LOW$
         2 000325   000327 600000 2                  TZE     EXIT_2
         2 000326   000307 603000 2                  TRC     s:9855

   9855  2 000327                       EXIT_2       null
      209     9860    3   EXIT_2:       ;
      210     9861    3                 IF JHIGH$ > ILOW$ THEN

   9861  2 000327   000033 236000 0                  LDQ     ILOW$
         2 000330   000034 116000 0                  CMPQ    JHIGH$
         2 000331   000410 603000 2                  TRC     s:9879

      211     9862    4                 DO;

      212     9863    4                     ILOW$ -> VY$TARGET_B = JHIGH$ -> VY$SOURCE_B;

   9863  2 000332   000034 470400 0                  LDP0    JHIGH$
         2 000333   000000 720000 xsym               LXL0    VY_SOURCE_COUNT
         2 000334   000033 471400 0                  LDP1    ILOW$
         2 000335   000000 721000 xsym               LXL1    VY_TARGET_COUNT
         2 000336   003140 060540                    CSL     bolr='003'O
         2 000337   000000 000010                    BDSC    0,,PR0                   by=0,bit=0,n=*X0
         2 000340   100000 000011                    BDSC    0,,PR1                   by=0,bit=0,n=*X1

      213     9864    4                     ILOW$ = PINCRW( ILOW$, SIZE );

   9864  2 000341   000010 236000 0                  LDQ     SIZE
         2 000342   000022 736000                    QLS     18
         2 000343   000033 036000 0                  ADLQ    ILOW$
         2 000344   000033 756000 0                  STQ     ILOW$

      214     9865    5                     DO WHILE ( ILOW$ < HIGH$ );

   9865  2 000345   000032 116000 0                  CMPQ    HIGH$
         2 000346   000366 603000 2                  TRC     EXIT_3
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:48   

      215     9866    5                         CALL GET_NAME_KEY( KEY_I, ILOW$ );

   9866  2 000347   000002 237000 3                  LDAQ    2
         2 000350   001510 757000 0                  STAQ    TWO_KEY_SORT+2
         2 000351   001220 701000 2                  TSX1    GET_NAME_KEY
         2 000352   000000 011000                    NOP     0

      216     9867    5                         IF KEY_I < KEY THEN /* Move ILOW$ toward JHIGH$ */

   9867  2 000353   040000 106400                    CMPC    fill='040'O
         2 000354   000506 002000 0                  ADSC9   KEY_I                    cn=0,n=1024
         2 000355   000106 002000 0                  ADSC9   KEY                      cn=0,n=1024
         2 000356   000366 603000 2                  TRC     EXIT_3

      217     9868    5                             ILOW$ = PINCRW( ILOW$, SIZE );

   9868  2 000357   000010 236000 0                  LDQ     SIZE
         2 000360   000022 736000                    QLS     18
         2 000361   000033 036000 0                  ADLQ    ILOW$
         2 000362   000033 756000 0                  STQ     ILOW$
         2 000363   000364 710000 2                  TRA     s:9870

      218     9869    5                         ELSE GOTO EXIT_3;
      219     9870    5                        END;

   9870  2 000364   000032 116000 0                  CMPQ    HIGH$
         2 000365   000347 602000 2                  TNC     s:9866

   9866  2 000366                       EXIT_3       null
      220     9871    4   EXIT_3:           ;
      221     9872    4                     IF JHIGH$ > ILOW$ THEN

   9872  2 000366   000033 236000 0                  LDQ     ILOW$
         2 000367   000034 116000 0                  CMPQ    JHIGH$
         2 000370   000405 603000 2                  TRC     s:9877

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:49   
      222     9873    5                     DO;

      223     9874    5                         JHIGH$ -> VY$TARGET_B = ILOW$ -> VY$SOURCE_B;

   9874  2 000371   000033 470400 0                  LDP0    ILOW$
         2 000372   000000 720000 xsym               LXL0    VY_SOURCE_COUNT
         2 000373   000034 471400 0                  LDP1    JHIGH$
         2 000374   000000 721000 xsym               LXL1    VY_TARGET_COUNT
         2 000375   003140 060540                    CSL     bolr='003'O
         2 000376   000000 000010                    BDSC    0,,PR0                   by=0,bit=0,n=*X0
         2 000377   100000 000011                    BDSC    0,,PR1                   by=0,bit=0,n=*X1

      224     9875    5                         JHIGH$ = PINCRW( JHIGH$, MSIZE );

   9875  2 000400   000024 236000 0                  LDQ     MSIZE
         2 000401   000022 736000                    QLS     18
         2 000402   000034 036000 0                  ADLQ    JHIGH$
         2 000403   000034 756000 0                  STQ     JHIGH$

      225     9876    5                        END;

   9876  2 000404   000411 710000 2                  TRA     s:9880

      226     9877    4                     ELSE ILOW$ = JHIGH$;  /* No more passes */

   9877  2 000405   000034 236000 0                  LDQ     JHIGH$
         2 000406   000033 756000 0                  STQ     ILOW$

      227     9878    4                    END;                   /* end if JHIGH$ > ILOW$ then */

   9878  2 000407   000411 710000 2                  TRA     s:9880

      228     9879    3                 ELSE JHIGH$ = ILOW$;      /* No more passes  */

   9879  2 000410   000034 756000 0                  STQ     JHIGH$

      229     9880    3                END;                       /* end do while(JHIGH$ > ILOW$) */
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:50   

   9880  2 000411   000033 116000 0                  CMPQ    ILOW$
         2 000412   000414 600000 2                  TZE     s:9882
         2 000413   000304 603000 2                  TRC     s:9854

      230     9881                                    /* Assign pivot element to the correct position */
      231     9882    2             JHIGH$ -> VY$TARGET_B =  BUF;

   9882  2 000414   000034 470400 0                  LDP0    JHIGH$
         2 000415   000000 720000 xsym               LXL0    VY_TARGET_COUNT
         2 000416   003140 060400                    CSL     bolr='003'O
         2 000417   000015 000154 0                  BDSC    BUF                      by=0,bit=0,n=108
         2 000420   000000 000010                    BDSC    0,,PR0                   by=0,bit=0,n=*X0

      232     9883        /*
      233     9884                                      Put the pointers which delimit the partitions onto
      234     9885                                      the stacks.  Largest partition first.
      235     9886        */
      236     9887    2             HIGH_TO_ILOW = POFFW( HIGH$, ILOW$ );

   9887  2 000421   000033 235000 0                  LDA     ILOW$
         2 000422   000022 771000                    ARL     18
         2 000423   001516 755000 0                  STA     @ITEM$+2
         2 000424   000032 236000 0                  LDQ     HIGH$
         2 000425   000022 772000                    QRL     18
         2 000426   001516 136000 0                  SBLQ    @ITEM$+2
         2 000427   000025 756000 0                  STQ     HIGH_TO_ILOW

      237     9888    2             ILOW_TO_LOW  = POFFW( ILOW$, LOW$  );

   9888  2 000430   000031 235000 0                  LDA     LOW$
         2 000431   000022 771000                    ARL     18
         2 000432   001516 755000 0                  STA     @ITEM$+2
         2 000433   000033 236000 0                  LDQ     ILOW$
         2 000434   000022 772000                    QRL     18
         2 000435   001516 136000 0                  SBLQ    @ITEM$+2
         2 000436   000026 756000 0                  STQ     ILOW_TO_LOW
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:51   

      238     9889    3             IF HIGH_TO_ILOW > ILOW_TO_LOW THEN DO;

   9889  2 000437   000025 116000 0                  CMPQ    HIGH_TO_ILOW
         2 000440   000470 605000 2                  TPL     s:9902

      239     9890    4                 IF HIGH_TO_ILOW > SIZE THEN DO;

   9890  2 000441   000025 236000 0                  LDQ     HIGH_TO_ILOW
         2 000442   000010 116000 0                  CMPQ    SIZE
         2 000443   000454 604400 2                  TMOZ    s:9895

      240     9891    4                     STACK_TOP = STACK_TOP + 1;

   9891  2 000444   000023 054000 0                  AOS     STACK_TOP

      241     9892    4                     STACK_LOW$(STACK_TOP) = PINCRW(ILOW$, SIZE);

   9892  2 000445   000010 236000 0                  LDQ     SIZE
         2 000446   000022 736000                    QLS     18
         2 000447   000033 036000 0                  ADLQ    ILOW$
         2 000450   000023 720000 0                  LXL0    STACK_TOP
         2 000451   000040 756010 0                  STQ     STACK_LOW$,X0

      242     9893    4                     STACK_HIGH$(STACK_TOP) = HIGH$;

   9893  2 000452   000032 236000 0                  LDQ     HIGH$
         2 000453   000063 756010 0                  STQ     STACK_HIGH$,X0

      243     9894    4                    END;

      244     9895    4                 IF ILOW_TO_LOW > SIZE THEN DO;

   9895  2 000454   000026 236000 0                  LDQ     ILOW_TO_LOW
         2 000455   000010 116000 0                  CMPQ    SIZE
         2 000456   000052 604400 2                  TMOZ    s:9802

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:52   
      245     9896    4                     STACK_TOP = STACK_TOP + 1;

   9896  2 000457   000023 054000 0                  AOS     STACK_TOP

      246     9897    4                     STACK_LOW$(STACK_TOP) = LOW$;

   9897  2 000460   000031 236000 0                  LDQ     LOW$
         2 000461   000023 720000 0                  LXL0    STACK_TOP
         2 000462   000040 756010 0                  STQ     STACK_LOW$,X0

      247     9898    4                     STACK_HIGH$(STACK_TOP) = PINCRW( ILOW$, MSIZE );

   9898  2 000463   000024 236000 0                  LDQ     MSIZE
         2 000464   000022 736000                    QLS     18
         2 000465   000033 036000 0                  ADLQ    ILOW$
         2 000466   000063 756010 0                  STQ     STACK_HIGH$,X0

      248     9899    4                    END;

      249     9900    3                END;

   9900  2 000467   000052 710000 2                  TRA     s:9802

      250     9901    3             ELSE DO;

      251     9902    4                 IF ILOW_TO_LOW > SIZE THEN DO;

   9902  2 000470   000010 116000 0                  CMPQ    SIZE
         2 000471   000502 604400 2                  TMOZ    s:9907

      252     9903    4                     STACK_TOP = STACK_TOP + 1;

   9903  2 000472   000023 054000 0                  AOS     STACK_TOP

      253     9904    4                     STACK_LOW$(STACK_TOP) = LOW$;

   9904  2 000473   000031 236000 0                  LDQ     LOW$
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:53   
         2 000474   000023 720000 0                  LXL0    STACK_TOP
         2 000475   000040 756010 0                  STQ     STACK_LOW$,X0

      254     9905    4                     STACK_HIGH$(STACK_TOP) = PINCRW( ILOW$, MSIZE );

   9905  2 000476   000024 236000 0                  LDQ     MSIZE
         2 000477   000022 736000                    QLS     18
         2 000500   000033 036000 0                  ADLQ    ILOW$
         2 000501   000063 756010 0                  STQ     STACK_HIGH$,X0

      255     9906    4                    END;

      256     9907    4                 IF HIGH_TO_ILOW > SIZE THEN DO;

   9907  2 000502   000025 236000 0                  LDQ     HIGH_TO_ILOW
         2 000503   000010 116000 0                  CMPQ    SIZE
         2 000504   000052 604400 2                  TMOZ    s:9802

      257     9908    4                     STACK_TOP = STACK_TOP + 1;

   9908  2 000505   000023 054000 0                  AOS     STACK_TOP

      258     9909    4                     STACK_LOW$(STACK_TOP) = PINCRW( ILOW$, SIZE );

   9909  2 000506   000010 236000 0                  LDQ     SIZE
         2 000507   000022 736000                    QLS     18
         2 000510   000033 036000 0                  ADLQ    ILOW$
         2 000511   000023 720000 0                  LXL0    STACK_TOP
         2 000512   000040 756010 0                  STQ     STACK_LOW$,X0

      259     9910    4                     STACK_HIGH$(STACK_TOP) = HIGH$;

   9910  2 000513   000032 236000 0                  LDQ     HIGH$
         2 000514   000063 756010 0                  STQ     STACK_HIGH$,X0

      260     9911    4                    END;

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:54   
      261     9912    3                END;

      262     9913    2            END;                           /* do forever */

   9913  2 000515   000052 710000 2                  TRA     s:9802

      263     9914        %EJECT;
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:55   
      264     9915              %BANNER(ARG=VYQ$SORT_V ENTRY );

              9923    2   /*******************************************************************************
              9924    2   *                                                                              *
              9925    2   *                          VYQ$SORT_V ENTRY                                       *
              9926    2   *                                                                              *
              9927    2   *******************************************************************************/

      265     9931
      266     9932
      267     9933
      268     9934    1   VYQ$SORT_V :
      269     9935    1         ENTRY ( NAME$, START$, STOP$, SZ, TP, N_D, TYES );

   9935  2 000516   000000 700200 xent  VYQ$SORT_V   TSX0  ! X66_STATIC_N
         2 000517   000000 000007 0                  ZERO    0,7

      270     9936        /*
      271     9937                              Sort by value
      272     9938        */
      273     9939    1         IF START$ = STOP$ THEN RETURN;

   9939  2 000520   000002 470400 0                  LDP0    @START$
         2 000521   000003 471400 0                  LDP1    @STOP$
         2 000522   000000 236100                    LDQ     0,,PR0
         2 000523   100000 116100                    CMPQ    0,,PR1
         2 000524   000527 601000 2                  TNZ     s:9940

   9939  2 000525   000000 221200 0                  LDX1  ! 0
         2 000526   000001 702211                    TSX2  ! 1,X1

      274     9940    1         STACK_LOW$(0) = START$;

   9940  2 000527   000040 756000 0                  STQ     STACK_LOW$

      275     9941    1         STACK_HIGH$(0) = STOP$;

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:56   
   9941  2 000530   100000 236100                    LDQ     0,,PR1
         2 000531   000063 756000 0                  STQ     STACK_HIGH$

      276     9942    1         STACK_TOP = 0;

   9942  2 000532   000023 450000 0                  STZ     STACK_TOP

      277     9943    1         SIZE = SZ;

   9943  2 000533   000004 473400 0                  LDP3    @SZ
         2 000534   300000 235100                    LDA     0,,PR3
         2 000535   000010 755000 0                  STA     SIZE

      278     9944    1         VY_TARGET_COUNT = SIZE * @CHAR_WORD * @BIT_CHAR;

   9944  2 000536   000010 236000 0                  LDQ     SIZE
         2 000537   000044 402007                    MPY     36,DL
         2 000540   000000 756000 xsym               STQ     VY_TARGET_COUNT

      279     9945    1         VY_SOURCE_COUNT = VY_TARGET_COUNT;

   9945  2 000541   000000 756000 xsym               STQ     VY_SOURCE_COUNT

      280     9946    1         IEPS  = 10 * SIZE;

   9946  2 000542   000010 236000 0                  LDQ     SIZE
         2 000543   000012 402007                    MPY     10,DL
         2 000544   000022 756000 0                  STQ     IEPS

      281     9947    1         MSIZE = - SIZE;

   9947  2 000545   000010 335000 0                  LCA     SIZE
         2 000546   000024 755000 0                  STA     MSIZE

      282     9948
      283     9949    2         DO WHILE ( '1'B );                /* Do forever */

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:57   
      284     9950        /*
      285     9951                                      Get pointers which delimit partition from
      286     9952                                                               top of stacks */
      287     9953    2             IF STACK_TOP < 0 THEN RETURN; /* Done sorting  */

   9953  2 000547   000023 235000 0                  LDA     STACK_TOP
         2 000550   000553 605000 2                  TPL     s:9954

   9953  2 000551   000000 221200 0                  LDX1  ! 0
         2 000552   000001 702211                    TSX2  ! 1,X1

      288     9954    2             LOW$ = STACK_LOW$(STACK_TOP);

   9954  2 000553   000040 236005 0                  LDQ     STACK_LOW$,AL
         2 000554   000031 756000 0                  STQ     LOW$

      289     9955    2             HIGH$ = STACK_HIGH$(STACK_TOP);

   9955  2 000555   000023 720000 0                  LXL0    STACK_TOP
         2 000556   000063 236010 0                  LDQ     STACK_HIGH$,X0
         2 000557   000032 756000 0                  STQ     HIGH$

      290     9956    2             STACK_TOP = STACK_TOP - 1;

   9956  2 000560   000001 336007                    LCQ     1,DL
         2 000561   000023 056000 0                  ASQ     STACK_TOP

      291     9957    3             DO WHILE( POFFW(HIGH$, LOW$)  <  IEPS );

   9957  2 000562   000717 710000 2                  TRA     s:9984

      292     9958        /*
      293     9959                                              Use insertion method to sort the partition
      294     9960        */
      295     9961    3                 PARTITION_SIZE = ( POFFW( HIGH$, LOW$ ) + SIZE ) / SIZE;

   9961  2 000563   000031 235000 0                  LDA     LOW$
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:58   
         2 000564   000022 771000                    ARL     18
         2 000565   001516 755000 0                  STA     @ITEM$+2
         2 000566   000032 236000 0                  LDQ     HIGH$
         2 000567   000022 772000                    QRL     18
         2 000570   001516 136000 0                  SBLQ    @ITEM$+2
         2 000571   000010 036000 0                  ADLQ    SIZE
         2 000572   000010 506000 0                  DIV     SIZE
         2 000573   000013 756000 0                  STQ     PARTITION_SIZE

      296     9962    3                 JHIGH$ = PINCRW(HIGH$, MSIZE);

   9962  2 000574   000024 236000 0                  LDQ     MSIZE
         2 000575   000022 736000                    QLS     18
         2 000576   000032 036000 0                  ADLQ    HIGH$
         2 000577   000034 756000 0                  STQ     JHIGH$

      297     9963    4                 DO I = 2 TO PARTITION_SIZE;

   9963  2 000600   000002 235007                    LDA     2,DL
         2 000601   000014 755000 0                  STA     I
         2 000602   000701 710000 2                  TRA     s:9976+3

      298     9964    4                     BUF = JHIGH$ -> VY$TARGET_B;

   9964  2 000603   000034 470400 0                  LDP0    JHIGH$
         2 000604   000000 720000 xsym               LXL0    VY_TARGET_COUNT
         2 000605   003000 060540                    CSL     bolr='003'O
         2 000606   000000 000010                    BDSC    0,,PR0                   by=0,bit=0,n=*X0
         2 000607   000015 000154 0                  BDSC    BUF                      by=0,bit=0,n=108

      299     9965    4                     ILOW$ = PINCRW( JHIGH$, SIZE );

   9965  2 000610   000010 236000 0                  LDQ     SIZE
         2 000611   000022 736000                    QLS     18
         2 000612   000034 036000 0                  ADLQ    JHIGH$
         2 000613   000033 756000 0                  STQ     ILOW$

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:59   
      300     9966    4                     CALL GET_VALUE_KEY( VALUE_KEY1, JHIGH$ );

   9966  2 000614   000001 236000 3                  LDQ     1
         2 000615   001514 756000 0                  STQ     @KEY+1
         2 000616   000010 236000 3                  LDQ     8
         2 000617   001513 756000 0                  STQ     @ITEM$+2
         2 000620   001304 701000 2                  TSX1    GET_VALUE_KEY
         2 000621   000000 011000                    NOP     0

      301     9967    5                     DO WHILE ( ILOW$ <= HIGH$ );

   9967  2 000622   000032 236000 0                  LDQ     HIGH$
         2 000623   000033 116000 0                  CMPQ    ILOW$
         2 000624   000660 602000 2                  TNC     JUMP_OUT_1

      302     9968    5                         CALL GET_VALUE_KEY( VALUE_KEY2, ILOW$ );

   9968  2 000625   000003 236000 3                  LDQ     3
         2 000626   001514 756000 0                  STQ     @KEY+1
         2 000627   000011 236000 3                  LDQ     9
         2 000630   001513 756000 0                  STQ     @ITEM$+2
         2 000631   001304 701000 2                  TSX1    GET_VALUE_KEY
         2 000632   000000 011000                    NOP     0

      303     9969    5                         IF VALUE_KEY2 >= VALUE_KEY1 THEN GOTO JUMP_OUT_1;

   9969  2 000633   000021 236000 0                  LDQ     VALUE_KEY2
         2 000634   000020 116000 0                  CMPQ    VALUE_KEY1
         2 000635   000660 603000 2                  TRC     JUMP_OUT_1

      304     9970    5                         PINCRW(ILOW$, MSIZE) -> VY$TARGET_B = ILOW$ ->VY$SOURCE_B;

   9970  2 000636   000024 236000 0                  LDQ     MSIZE
         2 000637   000044 402007                    MPY     36,DL
         2 000640   000000 116003                    CMPQ    0,DU
         2 000641   000643 605000 2                  TPL     s:9970+5
         2 000642   000044 036003                    ADLQ    36,DU
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:60   
         2 000643   000033 470400 0                  LDP0    ILOW$
         2 000644   000000 720000 xsym               LXL0    VY_SOURCE_COUNT
         2 000645   000000 721000 xsym               LXL1    VY_TARGET_COUNT
         2 000646   003146 060540                    CSL     bolr='003'O
         2 000647   000000 000010                    BDSC    0,,PR0                   by=0,bit=0,n=*X0
         2 000650   000000 000011                    BDSC    0,Q,PR0                  by=0,bit=0,n=*X1

      305     9971    5                         ILOW$ = PINCRW( ILOW$, SIZE );

   9971  2 000651   000010 236000 0                  LDQ     SIZE
         2 000652   000022 736000                    QLS     18
         2 000653   000033 036000 0                  ADLQ    ILOW$
         2 000654   000033 756000 0                  STQ     ILOW$

      306     9972    5                        END;

   9972  2 000655   000032 116000 0                  CMPQ    HIGH$
         2 000656   000625 602000 2                  TNC     s:9968
         2 000657   000625 600000 2                  TZE     s:9968

      307     9973    4   JUMP_OUT_1:
      308     9974    4                     PINCRW(ILOW$, MSIZE) -> VY$TARGET_B  = BUF;

   9974  2 000660   000024 236000 0     JUMP_OUT_1   LDQ     MSIZE
         2 000661   000044 402007                    MPY     36,DL
         2 000662   000000 116003                    CMPQ    0,DU
         2 000663   000665 605000 2                  TPL     JUMP_OUT_1+5
         2 000664   000044 036003                    ADLQ    36,DU
         2 000665   000033 470400 0                  LDP0    ILOW$
         2 000666   000000 720000 xsym               LXL0    VY_TARGET_COUNT
         2 000667   003146 060400                    CSL     bolr='003'O
         2 000670   000015 000154 0                  BDSC    BUF                      by=0,bit=0,n=108
         2 000671   000000 000010                    BDSC    0,Q,PR0                  by=0,bit=0,n=*X0

      309     9975    4                     JHIGH$ = PINCRW( JHIGH$, MSIZE );

   9975  2 000672   000024 236000 0                  LDQ     MSIZE
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:61   
         2 000673   000022 736000                    QLS     18
         2 000674   000034 036000 0                  ADLQ    JHIGH$
         2 000675   000034 756000 0                  STQ     JHIGH$

      310     9976    4                    END;                   /* do i = 2 to partition_size  */

   9976  2 000676   000014 235000 0                  LDA     I
         2 000677   000001 035007                    ADLA    1,DL
         2 000700   000014 755000 0                  STA     I
         2 000701   000013 236000 0                  LDQ     PARTITION_SIZE
         2 000702   000014 116000 0                  CMPQ    I
         2 000703   000603 603000 2                  TRC     s:9964

      311     9977    3                 IF STACK_TOP < 0 THEN RETURN; /* Done with the sort */

   9977  2 000704   000023 235000 0                  LDA     STACK_TOP
         2 000705   000710 605000 2                  TPL     s:9981

   9977  2 000706   000000 221200 0                  LDX1  ! 0
         2 000707   000001 702211                    TSX2  ! 1,X1

      312     9978        /*
      313     9979                                          Get pointers for next partition
      314     9980        */
      315     9981    3                 LOW$ = STACK_LOW$(STACK_TOP);

   9981  2 000710   000040 236005 0                  LDQ     STACK_LOW$,AL
         2 000711   000031 756000 0                  STQ     LOW$

      316     9982    3                 HIGH$ = STACK_HIGH$(STACK_TOP);

   9982  2 000712   000023 720000 0                  LXL0    STACK_TOP
         2 000713   000063 236010 0                  LDQ     STACK_HIGH$,X0
         2 000714   000032 756000 0                  STQ     HIGH$

      317     9983    3                 STACK_TOP = STACK_TOP - 1;

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:62   
   9983  2 000715   000001 336007                    LCQ     1,DL
         2 000716   000023 056000 0                  ASQ     STACK_TOP

      318     9984    3                END;                   /* end do while(poffw(HIGH$,LOW$) < ieps) */

   9984  2 000717   000031 235000 0                  LDA     LOW$
         2 000720   000022 771000                    ARL     18
         2 000721   001516 755000 0                  STA     @ITEM$+2
         2 000722   000032 236000 0                  LDQ     HIGH$
         2 000723   000022 772000                    QRL     18
         2 000724   001516 136000 0                  SBLQ    @ITEM$+2
         2 000725   000563 604000 2                  TMI     s:9961
         2 000726   000022 116000 0                  CMPQ    IEPS
         2 000727   000563 602000 2                  TNC     s:9961

      319     9985        /*
      320     9986                                         Use quick sort method to get next partition(s)*/
      321     9987    2             ILOW$ = LOW$;

   9987  2 000730   000031 236000 0                  LDQ     LOW$
         2 000731   000033 756000 0                  STQ     ILOW$

      322     9988    2             JHIGH$ = HIGH$;

   9988  2 000732   000032 236000 0                  LDQ     HIGH$
         2 000733   000034 756000 0                  STQ     JHIGH$

      323     9989        /*
      324     9990                                          Choose pivot element and switch
      325     9991                                          the low element and the pivot element
      326     9992                                          saving the pivot element in buf
      327     9993        */
      328     9994    2             PIVOT = VY_LINK_UTS / 2 ;

   9994  2 000734   000000 236000 xsym               LDQ     VY_LINK_UTS
         2 000735   000001 772000                    QRL     1
         2 000736   000012 756000 0                  STQ     PIVOT
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:63   

      329     9995    2             PIVOT = MOD ( PIVOT,

   9995  2 000737   001516 755000 0                  STA     @ITEM$+2
         2 000740   000032 236000 0                  LDQ     HIGH$
         2 000741   000022 772000                    QRL     18
         2 000742   001516 136000 0                  SBLQ    @ITEM$+2
         2 000743   000010 506000 0                  DIV     SIZE
         2 000744   000001 036007                    ADLQ    1,DL
         2 000745   001517 756000 0                  STQ     @ITEM$+3
         2 000746   000012 236000 0                  LDQ     PIVOT
         2 000747   001517 506000 0                  DIV     @ITEM$+3
         2 000750   000044 733000                    LRS     36
         2 000751   000010 402000 0                  MPY     SIZE
         2 000752   000012 756000 0                  STQ     PIVOT

      330     9996    2                     (POFFW( HIGH$, LOW$ ) / SIZE + 1 ) ) * SIZE;
      331     9997    2             Q$ = PINCRW( LOW$, PIVOT );

   9997  2 000753   000022 736000                    QLS     18
         2 000754   000031 036000 0                  ADLQ    LOW$
         2 000755   000030 756000 0                  STQ     Q$

      332     9998    2             BUF = Q$ -> VY$SOURCE_B;

   9998  2 000756   000030 470400 0                  LDP0    Q$
         2 000757   000000 720000 xsym               LXL0    VY_SOURCE_COUNT
         2 000760   003000 060540                    CSL     bolr='003'O
         2 000761   000000 000010                    BDSC    0,,PR0                   by=0,bit=0,n=*X0
         2 000762   000015 000154 0                  BDSC    BUF                      by=0,bit=0,n=108

      333     9999    2             Q$ -> VY$TARGET_B = LOW$ -> VY$SOURCE_B;

   9999  2 000763   000031 471400 0                  LDP1    LOW$
         2 000764   000000 721000 xsym               LXL1    VY_TARGET_COUNT
         2 000765   003140 060540                    CSL     bolr='003'O
         2 000766   100000 000010                    BDSC    0,,PR1                   by=0,bit=0,n=*X0
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:64   
         2 000767   000000 000011                    BDSC    0,,PR0                   by=0,bit=0,n=*X1

      334    10000    2             LOW$ -> VY$TARGET_B = BUF;

  10000  2 000770   000031 471400 0                  LDP1    LOW$
         2 000771   000000 720000 xsym               LXL0    VY_TARGET_COUNT
         2 000772   003140 060400                    CSL     bolr='003'O
         2 000773   000015 000154 0                  BDSC    BUF                      by=0,bit=0,n=108
         2 000774   100000 000010                    BDSC    0,,PR1                   by=0,bit=0,n=*X0

      335    10001    2             CALL GET_VALUE_KEY( VALUE_KEY1, LOW$ );

  10001  2 000775   000005 236000 3                  LDQ     5
         2 000776   001514 756000 0                  STQ     @KEY+1
         2 000777   000010 236000 3                  LDQ     8
         2 001000   001513 756000 0                  STQ     @ITEM$+2
         2 001001   001304 701000 2                  TSX1    GET_VALUE_KEY
         2 001002   000000 011000                    NOP     0

      336    10002
      337    10003
      338    10004    3             DO WHILE ( JHIGH$  >  ILOW$ );

  10004  2 001003   000033 236000 0                  LDQ     ILOW$
         2 001004   000034 116000 0                  CMPQ    JHIGH$
         2 001005   001116 603000 2                  TRC     s:10032

      339    10005    4                 DO WHILE ( JHIGH$ > LOW$ );

  10005  2 001006   000031 236000 0                  LDQ     LOW$
         2 001007   000034 116000 0                  CMPQ    JHIGH$
         2 001010   001031 603000 2                  TRC     JUMP_OUT_2

      340    10006    4                     CALL GET_VALUE_KEY( VALUE_KEY2, JHIGH$ );

  10006  2 001011   000001 236000 3                  LDQ     1
         2 001012   001514 756000 0                  STQ     @KEY+1
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:65   
         2 001013   000011 236000 3                  LDQ     9
         2 001014   001513 756000 0                  STQ     @ITEM$+2
         2 001015   001304 701000 2                  TSX1    GET_VALUE_KEY
         2 001016   000000 011000                    NOP     0

      341    10007    4                     IF VALUE_KEY1 >= VALUE_KEY2 THEN GOTO JUMP_OUT_2;

  10007  2 001017   000020 236000 0                  LDQ     VALUE_KEY1
         2 001020   000021 116000 0                  CMPQ    VALUE_KEY2
         2 001021   001031 603000 2                  TRC     JUMP_OUT_2

      342    10008                                                /* Move JHIGH$ towards ILOW$ */
      343    10009    4                     JHIGH$ = PINCRW( JHIGH$, MSIZE );

  10009  2 001022   000024 236000 0                  LDQ     MSIZE
         2 001023   000022 736000                    QLS     18
         2 001024   000034 036000 0                  ADLQ    JHIGH$
         2 001025   000034 756000 0                  STQ     JHIGH$

      344    10010    4                    END;

  10010  2 001026   000031 116000 0                  CMPQ    LOW$
         2 001027   001031 600000 2                  TZE     JUMP_OUT_2
         2 001030   001011 603000 2                  TRC     s:10006

      345    10011    3   JUMP_OUT_2:
      346    10012    3                 IF JHIGH$ > ILOW$ THEN

  10012  2 001031   000033 236000 0     JUMP_OUT_2   LDQ     ILOW$
         2 001032   000034 116000 0                  CMPQ    JHIGH$
         2 001033   001112 603000 2                  TRC     s:10029

      347    10013    4                 DO;

      348    10014    4                     ILOW$ -> VY$TARGET_B = JHIGH$ -> VY$SOURCE_B;

  10014  2 001034   000034 470400 0                  LDP0    JHIGH$
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:66   
         2 001035   000000 720000 xsym               LXL0    VY_SOURCE_COUNT
         2 001036   000033 471400 0                  LDP1    ILOW$
         2 001037   000000 721000 xsym               LXL1    VY_TARGET_COUNT
         2 001040   003140 060540                    CSL     bolr='003'O
         2 001041   000000 000010                    BDSC    0,,PR0                   by=0,bit=0,n=*X0
         2 001042   100000 000011                    BDSC    0,,PR1                   by=0,bit=0,n=*X1

      349    10015    4                     ILOW$ = PINCRW( ILOW$, SIZE );

  10015  2 001043   000010 236000 0                  LDQ     SIZE
         2 001044   000022 736000                    QLS     18
         2 001045   000033 036000 0                  ADLQ    ILOW$
         2 001046   000033 756000 0                  STQ     ILOW$

      350    10016    5                     DO WHILE ( ILOW$ < HIGH$  );

  10016  2 001047   000032 116000 0                  CMPQ    HIGH$
         2 001050   001070 603000 2                  TRC     JUMP_OUT_3

      351    10017    5                         CALL GET_VALUE_KEY( VALUE_KEY2, ILOW$ );

  10017  2 001051   000003 236000 3                  LDQ     3
         2 001052   001514 756000 0                  STQ     @KEY+1
         2 001053   000011 236000 3                  LDQ     9
         2 001054   001513 756000 0                  STQ     @ITEM$+2
         2 001055   001304 701000 2                  TSX1    GET_VALUE_KEY
         2 001056   000000 011000                    NOP     0

      352    10018    5                         IF VALUE_KEY1 <= VALUE_KEY2 THEN GOTO JUMP_OUT_3;

  10018  2 001057   000021 236000 0                  LDQ     VALUE_KEY2
         2 001060   000020 116000 0                  CMPQ    VALUE_KEY1
         2 001061   001070 603000 2                  TRC     JUMP_OUT_3

      353    10019                                                /* Move ILOW$ toward JHIGH$ */
      354    10020    5                         ILOW$ = PINCRW( ILOW$, SIZE );

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:67   
  10020  2 001062   000010 236000 0                  LDQ     SIZE
         2 001063   000022 736000                    QLS     18
         2 001064   000033 036000 0                  ADLQ    ILOW$
         2 001065   000033 756000 0                  STQ     ILOW$

      355    10021    5                        END;

  10021  2 001066   000032 116000 0                  CMPQ    HIGH$
         2 001067   001051 602000 2                  TNC     s:10017

      356    10022    4   JUMP_OUT_3:
      357    10023    5                     IF JHIGH$ > ILOW$ THEN DO;

  10023  2 001070   000033 236000 0     JUMP_OUT_3   LDQ     ILOW$
         2 001071   000034 116000 0                  CMPQ    JHIGH$
         2 001072   001107 603000 2                  TRC     s:10027

      358    10024    5                         JHIGH$ -> VY$TARGET_B = ILOW$ -> VY$SOURCE_B;

  10024  2 001073   000033 470400 0                  LDP0    ILOW$
         2 001074   000000 720000 xsym               LXL0    VY_SOURCE_COUNT
         2 001075   000034 471400 0                  LDP1    JHIGH$
         2 001076   000000 721000 xsym               LXL1    VY_TARGET_COUNT
         2 001077   003140 060540                    CSL     bolr='003'O
         2 001100   000000 000010                    BDSC    0,,PR0                   by=0,bit=0,n=*X0
         2 001101   100000 000011                    BDSC    0,,PR1                   by=0,bit=0,n=*X1

      359    10025    5                         JHIGH$ = PINCRW( JHIGH$, MSIZE );

  10025  2 001102   000024 236000 0                  LDQ     MSIZE
         2 001103   000022 736000                    QLS     18
         2 001104   000034 036000 0                  ADLQ    JHIGH$
         2 001105   000034 756000 0                  STQ     JHIGH$

      360    10026    5                        END;

  10026  2 001106   001113 710000 2                  TRA     s:10030
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:68   

      361    10027    4                     ELSE ILOW$ = JHIGH$;  /* No more passes */

  10027  2 001107   000034 236000 0                  LDQ     JHIGH$
         2 001110   000033 756000 0                  STQ     ILOW$

      362    10028    4                    END;                   /* end if JHIGH$ > ILOW$ then */

  10028  2 001111   001113 710000 2                  TRA     s:10030

      363    10029    3                 ELSE JHIGH$ = ILOW$;      /* No more passes  */

  10029  2 001112   000034 756000 0                  STQ     JHIGH$

      364    10030    3                END;                       /* end do while(JHIGH$ > ILOW$) */

  10030  2 001113   000033 116000 0                  CMPQ    ILOW$
         2 001114   001116 600000 2                  TZE     s:10032
         2 001115   001006 603000 2                  TRC     s:10005

      365    10031                                    /* Assign pivot element to the correct position */
      366    10032    2             JHIGH$ -> VY$TARGET_B =  BUF;

  10032  2 001116   000034 470400 0                  LDP0    JHIGH$
         2 001117   000000 720000 xsym               LXL0    VY_TARGET_COUNT
         2 001120   003140 060400                    CSL     bolr='003'O
         2 001121   000015 000154 0                  BDSC    BUF                      by=0,bit=0,n=108
         2 001122   000000 000010                    BDSC    0,,PR0                   by=0,bit=0,n=*X0

      367    10033        /*
      368    10034                                      Put the pointers which delimit the partitions onto
      369    10035                                      the stacks.  Largest partition first.
      370    10036        */
      371    10037    2             HIGH_TO_ILOW = POFFW( HIGH$, ILOW$ );

  10037  2 001123   000033 235000 0                  LDA     ILOW$
         2 001124   000022 771000                    ARL     18
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:69   
         2 001125   001516 755000 0                  STA     @ITEM$+2
         2 001126   000032 236000 0                  LDQ     HIGH$
         2 001127   000022 772000                    QRL     18
         2 001130   001516 136000 0                  SBLQ    @ITEM$+2
         2 001131   000025 756000 0                  STQ     HIGH_TO_ILOW

      372    10038    2             ILOW_TO_LOW  = POFFW( ILOW$, LOW$  );

  10038  2 001132   000031 235000 0                  LDA     LOW$
         2 001133   000022 771000                    ARL     18
         2 001134   001516 755000 0                  STA     @ITEM$+2
         2 001135   000033 236000 0                  LDQ     ILOW$
         2 001136   000022 772000                    QRL     18
         2 001137   001516 136000 0                  SBLQ    @ITEM$+2
         2 001140   000026 756000 0                  STQ     ILOW_TO_LOW

      373    10039    3             IF HIGH_TO_ILOW > ILOW_TO_LOW THEN DO;

  10039  2 001141   000025 116000 0                  CMPQ    HIGH_TO_ILOW
         2 001142   001172 605000 2                  TPL     s:10052

      374    10040    4                 IF HIGH_TO_ILOW > SIZE THEN DO;

  10040  2 001143   000025 236000 0                  LDQ     HIGH_TO_ILOW
         2 001144   000010 116000 0                  CMPQ    SIZE
         2 001145   001156 604400 2                  TMOZ    s:10045

      375    10041    4                     STACK_TOP = STACK_TOP + 1;

  10041  2 001146   000023 054000 0                  AOS     STACK_TOP

      376    10042    4                     STACK_LOW$(STACK_TOP) = PINCRW(ILOW$, SIZE);

  10042  2 001147   000010 236000 0                  LDQ     SIZE
         2 001150   000022 736000                    QLS     18
         2 001151   000033 036000 0                  ADLQ    ILOW$
         2 001152   000023 720000 0                  LXL0    STACK_TOP
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:70   
         2 001153   000040 756010 0                  STQ     STACK_LOW$,X0

      377    10043    4                     STACK_HIGH$(STACK_TOP) = HIGH$;

  10043  2 001154   000032 236000 0                  LDQ     HIGH$
         2 001155   000063 756010 0                  STQ     STACK_HIGH$,X0

      378    10044    4                    END;

      379    10045    4                 IF ILOW_TO_LOW > SIZE THEN DO;

  10045  2 001156   000026 236000 0                  LDQ     ILOW_TO_LOW
         2 001157   000010 116000 0                  CMPQ    SIZE
         2 001160   000547 604400 2                  TMOZ    s:9953

      380    10046    4                     STACK_TOP = STACK_TOP + 1;

  10046  2 001161   000023 054000 0                  AOS     STACK_TOP

      381    10047    4                     STACK_LOW$(STACK_TOP) = LOW$;

  10047  2 001162   000031 236000 0                  LDQ     LOW$
         2 001163   000023 720000 0                  LXL0    STACK_TOP
         2 001164   000040 756010 0                  STQ     STACK_LOW$,X0

      382    10048    4                     STACK_HIGH$(STACK_TOP) = PINCRW( ILOW$, MSIZE );

  10048  2 001165   000024 236000 0                  LDQ     MSIZE
         2 001166   000022 736000                    QLS     18
         2 001167   000033 036000 0                  ADLQ    ILOW$
         2 001170   000063 756010 0                  STQ     STACK_HIGH$,X0

      383    10049    4                    END;

      384    10050    3                END;

  10050  2 001171   000547 710000 2                  TRA     s:9953
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:71   

      385    10051    3             ELSE DO;

      386    10052    4                 IF ILOW_TO_LOW > SIZE THEN DO;

  10052  2 001172   000010 116000 0                  CMPQ    SIZE
         2 001173   001204 604400 2                  TMOZ    s:10057

      387    10053    4                     STACK_TOP = STACK_TOP + 1;

  10053  2 001174   000023 054000 0                  AOS     STACK_TOP

      388    10054    4                     STACK_LOW$(STACK_TOP) = LOW$;

  10054  2 001175   000031 236000 0                  LDQ     LOW$
         2 001176   000023 720000 0                  LXL0    STACK_TOP
         2 001177   000040 756010 0                  STQ     STACK_LOW$,X0

      389    10055    4                     STACK_HIGH$(STACK_TOP) = PINCRW( ILOW$, MSIZE );

  10055  2 001200   000024 236000 0                  LDQ     MSIZE
         2 001201   000022 736000                    QLS     18
         2 001202   000033 036000 0                  ADLQ    ILOW$
         2 001203   000063 756010 0                  STQ     STACK_HIGH$,X0

      390    10056    4                    END;

      391    10057    4                 IF HIGH_TO_ILOW > SIZE THEN DO;

  10057  2 001204   000025 236000 0                  LDQ     HIGH_TO_ILOW
         2 001205   000010 116000 0                  CMPQ    SIZE
         2 001206   000547 604400 2                  TMOZ    s:9953

      392    10058    4                     STACK_TOP = STACK_TOP + 1;

  10058  2 001207   000023 054000 0                  AOS     STACK_TOP

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:72   
      393    10059    4                     STACK_LOW$(STACK_TOP) = PINCRW( ILOW$, SIZE );

  10059  2 001210   000010 236000 0                  LDQ     SIZE
         2 001211   000022 736000                    QLS     18
         2 001212   000033 036000 0                  ADLQ    ILOW$
         2 001213   000023 720000 0                  LXL0    STACK_TOP
         2 001214   000040 756010 0                  STQ     STACK_LOW$,X0

      394    10060    4                     STACK_HIGH$(STACK_TOP) = HIGH$;

  10060  2 001215   000032 236000 0                  LDQ     HIGH$
         2 001216   000063 756010 0                  STQ     STACK_HIGH$,X0

      395    10061    4                    END;

      396    10062    3                END;

      397    10063    2            END;                           /* do forever */

  10063  2 001217   000547 710000 2                  TRA     s:9953

      398    10064
      399    10065        %EJECT;
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:73   
      400    10066    1   GET_NAME_KEY: PROC( KEY, ITEM$ );

  10066  2 001220   001507 741200 0     GET_NAME_KEY STX1  ! TWO_KEY_SORT+1

      401    10067
      402    10068    2   DCL KEY(0:1)  CHAR(512);
      403    10069    2   DCL ITEM$     PTR;
      404    10070
      405    10071
      406    10072    2         KEY(0) = PINCRW(N$, ITEM$->VY$TMPLT.A(NAME_DISP)) -> B$DNAME.TEXT;

  10072  2 001221   001511 470400 0                  LDP0    @ITEM$
         2 001222   000000 471500                    LDP1    0,,PR0
         2 001223   000011 235000 0                  LDA     NAME_DISP
         2 001224   000001 735000                    ALS     1
         2 001225   000000 100505                    MLR     fill='000'O
         2 001226   100000 000002                    ADSC9   0,A,PR1                  cn=0,n=2
         2 001227   001516 000004 0                  ADSC9   @ITEM$+2                 cn=0,n=4
         2 001230   001516 220000 0                  LDX0    @ITEM$+2
         2 001231   000000 471500                    LDP1    0,,PR0
         2 001232   000000 100505                    MLR     fill='000'O
         2 001233   100000 000002                    ADSC9   0,A,PR1                  cn=0,n=2
         2 001234   001517 000004 0                  ADSC9   @ITEM$+3                 cn=0,n=4
         2 001235   001517 222000 0                  LDX2    @ITEM$+3
         2 001236   000027 471400 0                  LDP1    N$
         2 001237   100000 223112                    LDX3    0,X2,PR1
         2 001240   000000 636010                    EAQ     0,X0
         2 001241   000020 772000                    QRL     16
         2 001242   001510 473400 0                  LDP3    @KEY
         2 001243   040100 100546                    MLR     fill='040'O
         2 001244   100000 400013                    ADSC9   0,Q,PR1                  cn=2,n=*X3
         2 001245   300000 001000                    ADSC9   0,,PR3                   cn=0,n=512

      407    10073    2         IF TWO_KEY_SORT

  10073  2 001246   001506 234000 0                  SZN     TWO_KEY_SORT
         2 001247   001277 605000 2                  TPL     s:10075
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:74   

      408    10074    2         THEN KEY(1) = PINCRW(DNAME$, ITEM$->VY$TMPLT.A(TYES)) -> B$DNAME.TEXT;

  10074  2 001250   000000 474500                    LDP4    0,,PR0
         2 001251   000007 475400 0                  LDP5    @TYES
         2 001252   500000 235100                    LDA     0,,PR5
         2 001253   000001 735000                    ALS     1
         2 001254   000000 100505                    MLR     fill='000'O
         2 001255   400000 000002                    ADSC9   0,A,PR4                  cn=0,n=2
         2 001256   001516 000004 0                  ADSC9   @ITEM$+2                 cn=0,n=4
         2 001257   001516 220000 0                  LDX0    @ITEM$+2
         2 001260   000000 474500                    LDP4    0,,PR0
         2 001261   500000 235100                    LDA     0,,PR5
         2 001262   000001 735000                    ALS     1
         2 001263   000000 100505                    MLR     fill='000'O
         2 001264   400000 000002                    ADSC9   0,A,PR4                  cn=0,n=2
         2 001265   001517 000004 0                  ADSC9   @ITEM$+3                 cn=0,n=4
         2 001266   001517 221000 0                  LDX1    @ITEM$+3
         2 001267   000037 474400 0                  LDP4    DNAME$
         2 001270   400000 222111                    LDX2    0,X1,PR4
         2 001271   000000 635010                    EAA     0,X0
         2 001272   000020 771000                    ARL     16
         2 001273   040100 100545                    MLR     fill='040'O
         2 001274   400000 400012                    ADSC9   0,A,PR4                  cn=2,n=*X2
         2 001275   300200 001000                    ADSC9   128,,PR3                 cn=0,n=512
         2 001276   001302 710000 2                  TRA     s:10079

      409    10075    2         ELSE KEY(1) = ' ';

  10075  2 001277   040100 100400                    MLR     fill='040'O
         2 001300   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 001301   300200 001000                    ADSC9   128,,PR3                 cn=0,n=512

      410    10076
      411    10077
      412    10078
      413    10079    2   END GET_NAME_KEY;
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:75   

  10079  2 001302   001507 221200 0                  LDX1  ! TWO_KEY_SORT+1
         2 001303   000001 702211                    TSX2  ! 1,X1

      414    10080
      415    10081        %EJECT;
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:76   
      416    10082    1   GET_VALUE_KEY: PROC ( KEY, ITEM$ );

  10082  2 001304   001512 741200 0     GET_VALUE_K* STX1  ! @ITEM$+1

      417    10083
      418    10084    2   DCL KEY UBIN;
      419    10085    2   DCL KEY_A(0:1) REDEF KEY UBIN HALF UNAL;
      420    10086    2   DCL ITEM$ PTR;
      421    10087
      422    10088    3         DO CASE( TYPE );

  10088  2 001305   000007 470400 0                  LDP0    @TYES
         2 001306   000000 235100                    LDA     0,,PR0
         2 001307   000011 115007                    CMPA    9,DL
         2 001310   001312 602005 2                  TNC     s:10088+5,AL
         2 001311   001410 710000 2                  TRA     s:10109
         2 001312   001410 710000 2                  TRA     s:10109
         2 001313   001410 710000 2                  TRA     s:10109
         2 001314   001410 710000 2                  TRA     s:10109
         2 001315   001323 710000 2                  TRA     s:10090
         2 001316   001340 710000 2                  TRA     s:10094
         2 001317   001410 710000 2                  TRA     s:10109
         2 001320   001347 710000 2                  TRA     s:10096
         2 001321   001410 710000 2                  TRA     s:10109
         2 001322   001365 710000 2                  TRA     s:10100

      423    10089    3           CASE( %TYPSECT );

      424    10090    3             KEY = ITEM$ -> VY$SC.ADDRESS;

  10090  2 001323   001514 471400 0                  LDP1    @ITEM$
         2 001324   100000 473500                    LDP3    0,,PR1
         2 001325   300000 236100                    LDQ     0,,PR3
         2 001326   777777 376007                    ANQ     -1,DL
         2 001327   001513 474400 0                  LDP4    @KEY
         2 001330   400000 756100                    STQ     0,,PR4

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:77   
      425    10091    3             IF ITEM$ -> VY$SC.ATTR.SEGMENT

  10091  2 001331   100000 473500                    LDP3    0,,PR1
         2 001332   300000 236100                    LDQ     0,,PR3
         2 001333   000040 316003                    CANQ    32,DU
         2 001334   001410 600000 2                  TZE     s:10109

      426    10092    3             THEN KEY_A(0) = ITEM$ -> VY$SC.NODE#;

  10092  2 001335   300002 220100                    LDX0    2,,PR3
         2 001336   400000 740100                    STX0    0,,PR4
         2 001337   001410 710000 2                  TRA     s:10109

      427    10093    3           CASE( %TYPEDEF );

      428    10094    3             KEY = ITEM$ -> VYD$TMPLT.I.OFFSET;

  10094  2 001340   001514 471400 0                  LDP1    @ITEM$
         2 001341   100000 473500                    LDP3    0,,PR1
         2 001342   300000 236100                    LDQ     0,,PR3
         2 001343   777777 376007                    ANQ     -1,DL
         2 001344   001513 474400 0                  LDP4    @KEY
         2 001345   400000 756100                    STQ     0,,PR4
         2 001346   001410 710000 2                  TRA     s:10109

      429    10095    3           CASE( %TYPSDEF );

      430    10096    3             IF ITEM$ -> VYD$TMPLT.I.C

  10096  2 001347   001514 471400 0                  LDP1    @ITEM$
         2 001350   100000 473500                    LDP3    0,,PR1
         2 001351   300001 236100                    LDQ     1,,PR3
         2 001352   400000 316007                    CANQ    -131072,DL
         2 001353   001360 600000 2                  TZE     s:10098

      431    10097    3             THEN KEY = ITEM$ -> VYD$TMPLT.V.VALUE;

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:78   
  10097  2 001354   001513 474400 0                  LDP4    @KEY
         2 001355   300000 235100                    LDA     0,,PR3
         2 001356   400000 755100                    STA     0,,PR4
         2 001357   001410 710000 2                  TRA     s:10109

      432    10098    3             ELSE KEY = ITEM$ -> VYD$TMPLT.I.OFFSET;

  10098  2 001360   300000 236100                    LDQ     0,,PR3
         2 001361   777777 376007                    ANQ     -1,DL
         2 001362   001513 474400 0                  LDP4    @KEY
         2 001363   400000 756100                    STQ     0,,PR4
         2 001364   001410 710000 2                  TRA     s:10109

      433    10099    3           CASE( %TYPSEGDEF );

      434    10100    4             IF ITEM$ -> VYD$TMPLT.I.C THEN DO;

  10100  2 001365   001514 471400 0                  LDP1    @ITEM$
         2 001366   100000 473500                    LDP3    0,,PR1
         2 001367   300001 236100                    LDQ     1,,PR3
         2 001370   400000 316007                    CANQ    -131072,DL
         2 001371   001401 600000 2                  TZE     s:10105

      435    10101    4                 KEY_A(0) = ITEM$ -> VYD$TMPLT.A(1);

  10101  2 001372   300000 720100                    LXL0    0,,PR3
         2 001373   001513 474400 0                  LDP4    @KEY
         2 001374   400000 740100                    STX0    0,,PR4

      436    10102    4                 KEY_A(1) = ITEM$ -> VYD$TMPLT.A(0);

  10102  2 001375   100000 473500                    LDP3    0,,PR1
         2 001376   300000 221100                    LDX1    0,,PR3
         2 001377   400000 441100                    SXL1    0,,PR4

      437    10103    4                END;

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:79   
  10103  2 001400   001410 710000 2                  TRA     s:10109

      438    10104    4             ELSE DO;

      439    10105    4                 KEY_A(0) = ITEM$ -> VYD$TMPLT.SEG.SEGID;

  10105  2 001401   300001 720100                    LXL0    1,,PR3
         2 001402   007777 360003                    ANX0    4095,DU
         2 001403   001513 474400 0                  LDP4    @KEY
         2 001404   400000 740100                    STX0    0,,PR4

      440    10106    4                 KEY_A(1) = ITEM$ -> VYD$TMPLT.I.OFFSET;

  10106  2 001405   100000 473500                    LDP3    0,,PR1
         2 001406   300000 721100                    LXL1    0,,PR3
         2 001407   400000 441100                    SXL1    0,,PR4

      441    10107    4                END;

      442    10108    3           END;

      443    10109    2   END GET_VALUE_KEY;

  10109  2 001410   001512 221200 0                  LDX1  ! @ITEM$+1
         2 001411   000001 702211                    TSX2  ! 1,X1
      444    10110
      445    10111
      446    10112
      447    10113
      448    10114    1   END VYQ$SORT;

PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:80   
--  Include file information  --

   B$OBJECT_C.:E05TOU  is referenced.
   VY_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VY_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VY_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VY_MACRO_C.:E05TOU  is referenced.
   VY_PERR_C.:E05TOU  is referenced.
   VY_SUBS_C.:E05TOU  is referenced.
   VY_INC_NO_C.:E05TOU  is referenced.
   VY_SWITCH_C.:E05TOU  is referenced.
   VY_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VYQ$SORT.
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:81   

 **** Variables and constants ****

  ****  Section 000  Data  VYQ$SORT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

  1511-0-0/w PTR         r     1 @ITEM$                  1514-0-0/w PTR         r     1 @ITEM$
  1510-0-0/w PTR         r     1 @KEY                    1513-0-0/w PTR         r     1 @KEY
     1-0-0/w PTR         r     1 @NAME$                     6-0-0/w PTR         r     1 @N_D
     2-0-0/w PTR         r     1 @START$                    3-0-0/w PTR         r     1 @STOP$
     4-0-0/w PTR         r     1 @SZ                        5-0-0/w PTR         r     1 @TP
     7-0-0/w PTR         r     1 @TYES                     15-0-0/b STRC(108)   r     1 BUF
    37-0-0/w PTR         r     1 DNAME$                    32-0-0/w PTR         r     1 HIGH$
    25-0-0/w SBIN        r     1 HIGH_TO_ILOW              14-0-0/w UBIN        r     1 I
    22-0-0/w UBIN        r     1 IEPS                      33-0-0/w PTR         r     1 ILOW$
    26-0-0/w SBIN        r     1 ILOW_TO_LOW               *0-0-0/w PTR         r     1 ITEM$
    *0-0-0/w PTR         r     1 ITEM$                     34-0-0/w PTR         r     1 JHIGH$
   106-0-0/c CHAR(1024)  r     1 KEY                       *0-0-0/c CHAR(512)   r     1 KEY(0:1)
    *0-0-0/w UBIN        r     1 KEY                       *0-0-0/w UBIN(18)    r     1 KEY_A(0:1)
   506-0-0/c CHAR(1024)  r     1 KEY_I                   1106-0-0/c CHAR(1024)  r     1 KEY_J
    31-0-0/w PTR         r     1 LOW$                      24-0-0/w SBIN        r     1 MSIZE
    27-0-0/w PTR         r     1 N$                        *0-0-0/w PTR         r     1 NAME$
    11-0-0/w UBIN        r     1 NAME_DISP                 *0-0-0/w UBIN        r     1 N_D
    13-0-0/w UBIN        r     1 PARTITION_SIZE            12-0-0/w SBIN        r     1 PIVOT
    30-0-0/w PTR         r     1 Q$                        10-0-0/w SBIN        r     1 SIZE
    63-0-0/w PTR         r     1 STACK_HIGH$(0:18)
    40-0-0/w PTR         r     1 STACK_LOW$(0:18)
    23-0-0/w SBIN        r     1 STACK_TOP                 *0-0-0/w PTR         r     1 START$
    *0-0-0/w PTR         r     1 STOP$                     *0-0-0/w UBIN        r     1 SZ
    *0-0-0/w UBIN        r     1 TP                      1506-0-0/b BIT         r     1 TWO_KEY_SORT
    *0-0-0/w UBIN        r     1 TYES                      *0-0-0/w UBIN        r     1 TYPE
    20-0-0/w UBIN        r     1 VALUE_KEY1                21-0-0/w UBIN        r     1 VALUE_KEY2

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:82   
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 VY_CURR$                   0-0-0/w UBIN        r     1 VY_LINK_UTS
     0-0-0/w UBIN        r     1 VY_SOURCE_COUNT            0-0-0/w UBIN        r     1 VY_TARGET_COUNT

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(18)    r     1 B$DNAME                    0-0-0/w STRC(3672)  r     1 VY$NODE
     0-0-0/w STRC(108)   r     1 VY$SC                      0-0-0/w ABIT        r     1 VY$SOURCE_B
     0-0-0/w ABIT        r     1 VY$TARGET_B                0-0-0/w STRC(72)    r     1 VY$TMPLT
     0-0-0/w STRC(72)    r     1 VYD$TMPLT


   Procedure VYQ$SORT requires 778 words for executable code.
   Procedure VYQ$SORT is declared NOAUTO and requires 848 words of local(STATIC) storage.

    No errors detected in file VYQ$SORT.:E05TSI    .
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:83   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:84   
          MINI XREF LISTING

B$DNAME.COUNT
      9582**DCL      9589--IMP-SIZ 10072>>ASSIGN  10074>>ASSIGN
B$DNAME.TEXT
      9589**DCL     10072>>ASSIGN  10074>>ASSIGN
BUF
      9670**DCL      9813<<ASSIGN   9823>>ASSIGN   9847<<ASSIGN   9849>>ASSIGN   9882>>ASSIGN   9964<<ASSIGN
      9974>>ASSIGN   9998<<ASSIGN  10000>>ASSIGN  10032>>ASSIGN
BUF.A
      9671**DCL      9672--REDEF
DNAME$
      9723**DCL      9792<<ASSIGN  10074>>ASSIGN  10074>>ASSIGN
EXIT_1
      9817**LABEL    9818--GOTO
EXIT_2
      9855**LABEL    9858--GOTO
EXIT_3
      9866**LABEL    9869--GOTO
GET_NAME_KEY
     10066**PROC     9815--CALL     9817--CALL     9850--CALL     9855--CALL     9866--CALL
GET_VALUE_KEY
     10082**PROC     9966--CALL     9968--CALL    10001--CALL    10006--CALL    10017--CALL
HIGH$
      9718**DCL      9804<<ASSIGN   9806>>DOWHILE  9810>>ASSIGN   9811>>ASSIGN   9816>>DOWHILE  9831<<ASSIGN
      9837>>ASSIGN   9844>>ASSIGN   9865>>DOWHILE  9887>>ASSIGN   9893>>ASSIGN   9910>>ASSIGN   9955<<ASSIGN
      9957>>DOWHILE  9961>>ASSIGN   9962>>ASSIGN   9967>>DOWHILE  9982<<ASSIGN   9988>>ASSIGN   9995>>ASSIGN
     10016>>DOWHILE 10037>>ASSIGN  10043>>ASSIGN  10060>>ASSIGN
HIGH_TO_ILOW
      9697**DCL      9887<<ASSIGN   9889>>IF       9890>>IF       9907>>IF      10037<<ASSIGN  10039>>IF
     10040>>IF      10057>>IF
I
      9669**DCL      9812<<DOINDEX  9963<<DOINDEX
IEPS
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:85   
      9678**DCL      9795<<ASSIGN   9806>>DOWHILE  9946<<ASSIGN   9957>>DOWHILE
ILOW$
      9719**DCL      9814<<ASSIGN   9816>>DOWHILE  9817<>CALL     9819>>ASSIGN   9819>>ASSIGN   9820<<ASSIGN
      9820>>ASSIGN   9823>>ASSIGN   9836<<ASSIGN   9853>>DOWHILE  9861>>IF       9863>>ASSIGN   9864<<ASSIGN
      9864>>ASSIGN   9865>>DOWHILE  9866<>CALL     9868<<ASSIGN   9868>>ASSIGN   9872>>IF       9874>>ASSIGN
      9877<<ASSIGN   9879>>ASSIGN   9887>>ASSIGN   9888>>ASSIGN   9892>>ASSIGN   9898>>ASSIGN   9905>>ASSIGN
      9909>>ASSIGN   9965<<ASSIGN   9967>>DOWHILE  9968<>CALL     9970>>ASSIGN   9970>>ASSIGN   9971<<ASSIGN
      9971>>ASSIGN   9974>>ASSIGN   9987<<ASSIGN  10004>>DOWHILE 10012>>IF      10014>>ASSIGN  10015<<ASSIGN
     10015>>ASSIGN  10016>>DOWHILE 10017<>CALL    10020<<ASSIGN  10020>>ASSIGN  10023>>IF      10024>>ASSIGN
     10027<<ASSIGN  10029>>ASSIGN  10037>>ASSIGN  10038>>ASSIGN  10042>>ASSIGN  10048>>ASSIGN  10055>>ASSIGN
     10059>>ASSIGN
ILOW_TO_LOW
      9698**DCL      9888<<ASSIGN   9889>>IF       9895>>IF       9902>>IF      10038<<ASSIGN  10039>>IF
     10045>>IF      10052>>IF
ITEM$ IN PROCEDURE GET_NAME_KEY
     10069**DCL     10066--PROC    10072>>ASSIGN  10072>>ASSIGN  10074>>ASSIGN  10074>>ASSIGN
ITEM$ IN PROCEDURE GET_VALUE_KEY
     10086**DCL     10082--PROC    10090>>ASSIGN  10091>>IF      10092>>ASSIGN  10094>>ASSIGN  10096>>IF
     10097>>ASSIGN  10098>>ASSIGN  10100>>IF      10101>>ASSIGN  10102>>ASSIGN  10105>>ASSIGN  10106>>ASSIGN
JHIGH$
      9720**DCL      9811<<ASSIGN   9813>>ASSIGN   9814>>ASSIGN   9815<>CALL     9824<<ASSIGN   9824>>ASSIGN
      9837<<ASSIGN   9853>>DOWHILE  9854>>DOWHILE  9855<>CALL     9857<<ASSIGN   9857>>ASSIGN   9861>>IF
      9863>>ASSIGN   9872>>IF       9874>>ASSIGN   9875<<ASSIGN   9875>>ASSIGN   9877>>ASSIGN   9879<<ASSIGN
      9882>>ASSIGN   9962<<ASSIGN   9964>>ASSIGN   9965>>ASSIGN   9966<>CALL     9975<<ASSIGN   9975>>ASSIGN
      9988<<ASSIGN  10004>>DOWHILE 10005>>DOWHILE 10006<>CALL    10009<<ASSIGN  10009>>ASSIGN  10012>>IF
     10014>>ASSIGN  10023>>IF      10024>>ASSIGN  10025<<ASSIGN  10025>>ASSIGN  10027>>ASSIGN  10029<<ASSIGN
     10032>>ASSIGN
JUMP_OUT_1
      9974**LABEL    9969--GOTO
JUMP_OUT_2
     10012**LABEL   10007--GOTO
JUMP_OUT_3
     10023**LABEL   10018--GOTO
KEY
      9742**DCL      9815<>CALL     9818>>IF       9850<>CALL     9856>>IF       9867>>IF
KEY IN PROCEDURE GET_NAME_KEY
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:86   
     10068**DCL     10066--PROC    10072<<ASSIGN  10074<<ASSIGN  10075<<ASSIGN
KEY IN PROCEDURE GET_VALUE_KEY
     10084**DCL     10082--PROC    10085--REDEF   10090<<ASSIGN  10094<<ASSIGN  10097<<ASSIGN  10098<<ASSIGN
KEY_A IN PROCEDURE GET_VALUE_KEY
     10085**DCL     10092<<ASSIGN  10101<<ASSIGN  10102<<ASSIGN  10105<<ASSIGN  10106<<ASSIGN
KEY_I
      9743**DCL      9817<>CALL     9818>>IF       9866<>CALL     9867>>IF
KEY_J
      9744**DCL      9855<>CALL     9856>>IF
LOW$
      9717**DCL      9803<<ASSIGN   9806>>DOWHILE  9810>>ASSIGN   9830<<ASSIGN   9836>>ASSIGN   9844>>ASSIGN
      9846>>ASSIGN   9848>>ASSIGN   9849>>ASSIGN   9850<>CALL     9854>>DOWHILE  9888>>ASSIGN   9897>>ASSIGN
      9904>>ASSIGN   9954<<ASSIGN   9957>>DOWHILE  9961>>ASSIGN   9981<<ASSIGN   9987>>ASSIGN   9995>>ASSIGN
      9997>>ASSIGN   9999>>ASSIGN  10000>>ASSIGN  10001<>CALL    10005>>DOWHILE 10038>>ASSIGN  10047>>ASSIGN
     10054>>ASSIGN
MSIZE
      9696**DCL      9796<<ASSIGN   9811>>ASSIGN   9819>>ASSIGN   9823>>ASSIGN   9824>>ASSIGN   9857>>ASSIGN
      9875>>ASSIGN   9898>>ASSIGN   9905>>ASSIGN   9947<<ASSIGN   9962>>ASSIGN   9970>>ASSIGN   9974>>ASSIGN
      9975>>ASSIGN  10009>>ASSIGN  10025>>ASSIGN  10048>>ASSIGN  10055>>ASSIGN
N$
      9715**DCL      9789<<ASSIGN  10072>>ASSIGN  10072>>ASSIGN
NAME$
      9641**DCL        50--PROC     9789>>ASSIGN   9934--ENTRY
NAME_DISP
      9666**DCL      9788<<ASSIGN  10072>>ASSIGN  10072>>ASSIGN
N_D
      9646**DCL        50--PROC     9788>>ASSIGN   9790>>IF       9934--ENTRY
PARTITION_SIZE
      9668**DCL      9810<<ASSIGN   9812>>DOINDEX  9961<<ASSIGN   9963>>DOINDEX
PIVOT
      9667**DCL      9843<<ASSIGN   9844<<ASSIGN   9844>>ASSIGN   9846>>ASSIGN   9994<<ASSIGN   9995<<ASSIGN
      9995>>ASSIGN   9997>>ASSIGN
Q$
      9716**DCL      9846<<ASSIGN   9847>>ASSIGN   9848>>ASSIGN   9997<<ASSIGN   9998>>ASSIGN   9999>>ASSIGN
SIZE
      9665**DCL      9785<<ASSIGN   9786>>ASSIGN   9795>>ASSIGN   9796>>ASSIGN   9810>>ASSIGN   9810>>ASSIGN
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:87   
      9814>>ASSIGN   9820>>ASSIGN   9844>>ASSIGN   9844>>ASSIGN   9864>>ASSIGN   9868>>ASSIGN   9890>>IF
      9892>>ASSIGN   9895>>IF       9902>>IF       9907>>IF       9909>>ASSIGN   9943<<ASSIGN   9944>>ASSIGN
      9946>>ASSIGN   9947>>ASSIGN   9961>>ASSIGN   9961>>ASSIGN   9965>>ASSIGN   9971>>ASSIGN   9995>>ASSIGN
      9995>>ASSIGN  10015>>ASSIGN  10020>>ASSIGN  10040>>IF      10042>>ASSIGN  10045>>IF      10052>>IF
     10057>>IF      10059>>ASSIGN
STACK_HIGH$
      9725**DCL      9783<<ASSIGN   9804>>ASSIGN   9831>>ASSIGN   9893<<ASSIGN   9898<<ASSIGN   9905<<ASSIGN
      9910<<ASSIGN   9941<<ASSIGN   9955>>ASSIGN   9982>>ASSIGN  10043<<ASSIGN  10048<<ASSIGN  10055<<ASSIGN
     10060<<ASSIGN
STACK_LOW$
      9724**DCL      9782<<ASSIGN   9803>>ASSIGN   9830>>ASSIGN   9892<<ASSIGN   9897<<ASSIGN   9904<<ASSIGN
      9909<<ASSIGN   9940<<ASSIGN   9954>>ASSIGN   9981>>ASSIGN  10042<<ASSIGN  10047<<ASSIGN  10054<<ASSIGN
     10059<<ASSIGN
STACK_TOP
      9695**DCL      9784<<ASSIGN   9802>>IF       9803>>ASSIGN   9804>>ASSIGN   9805<<ASSIGN   9805>>ASSIGN
      9826>>IF       9830>>ASSIGN   9831>>ASSIGN   9832<<ASSIGN   9832>>ASSIGN   9891<<ASSIGN   9891>>ASSIGN
      9892>>ASSIGN   9893>>ASSIGN   9896<<ASSIGN   9896>>ASSIGN   9897>>ASSIGN   9898>>ASSIGN   9903<<ASSIGN
      9903>>ASSIGN   9904>>ASSIGN   9905>>ASSIGN   9908<<ASSIGN   9908>>ASSIGN   9909>>ASSIGN   9910>>ASSIGN
      9942<<ASSIGN   9953>>IF       9954>>ASSIGN   9955>>ASSIGN   9956<<ASSIGN   9956>>ASSIGN   9977>>IF
      9981>>ASSIGN   9982>>ASSIGN   9983<<ASSIGN   9983>>ASSIGN  10041<<ASSIGN  10041>>ASSIGN  10042>>ASSIGN
     10043>>ASSIGN  10046<<ASSIGN  10046>>ASSIGN  10047>>ASSIGN  10048>>ASSIGN  10053<<ASSIGN  10053>>ASSIGN
     10054>>ASSIGN  10055>>ASSIGN  10058<<ASSIGN  10058>>ASSIGN  10059>>ASSIGN  10060>>ASSIGN
START$
      9642**DCL        50--PROC     9781>>IF       9782>>ASSIGN   9934--ENTRY    9939>>IF       9940>>ASSIGN
STOP$
      9643**DCL        50--PROC     9781>>IF       9783>>ASSIGN   9934--ENTRY    9939>>IF       9941>>ASSIGN
SZ
      9644**DCL        50--PROC     9785>>ASSIGN   9934--ENTRY    9943>>ASSIGN
TP
      9645**DCL        50--PROC     9934--ENTRY
TWO_KEY_SORT
      9761**DCL      9790<<ASSIGN   9793<<ASSIGN  10073>>IF
TYES
      9647**DCL        50--PROC     9648--REDEF    9790>>IF       9934--ENTRY   10074>>ASSIGN  10074>>ASSIGN
TYPE
      9648**DCL     10088>>DOCASE
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:88   
VALUE_KEY1
      9676**DCL      9966<>CALL     9969>>IF      10001<>CALL    10007>>IF      10018>>IF
VALUE_KEY2
      9677**DCL      9968<>CALL     9969>>IF      10006<>CALL    10007>>IF      10017<>CALL    10018>>IF
VY$NODE.ADDR_START_A
      9317**DCL      9318--REDEF
VY$NODE.ADDR_STOP_A
      9322**DCL      9323--REDEF
VY$NODE.L_PREV_SIZE
      9375**DCL      9386--REDEF
VY$NODE.L_SC_START
      9394**DCL      9399--REDEF
VY$NODE.L_SC_STOP
      9400**DCL      9405--REDEF
VY$NODE.L_SIZE
      9363**DCL      9374--REDEF
VY$NODE.L_START
      9339**DCL      9350--REDEF
VY$NODE.L_START.DN$
      9341**DCL      9792>>ASSIGN
VY$NODE.L_STOP
      9351**DCL      9362--REDEF
VY$NODE.PROMOTE_HEAD
      9406**DCL      9409--REDEF
VY$NODE.PROMOTE_TAIL
      9410**DCL      9413--REDEF
VY$NODE.START_PAGE#_A
      9327**DCL      9328--REDEF
VY$NODE.STOP_PAGE#_A
      9332**DCL      9333--REDEF
VY$SC.ADDRESS
      9453**DCL     10090>>ASSIGN
VY$SC.ATTR.SEGMENT
      9448**DCL     10091>>IF
VY$SC.NODE#
      9456**DCL     10092>>ASSIGN
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:89   
VY$SOURCE_B
      9767**DCL      9819>>ASSIGN   9847>>ASSIGN   9848>>ASSIGN   9863>>ASSIGN   9874>>ASSIGN   9970>>ASSIGN
      9998>>ASSIGN   9999>>ASSIGN  10014>>ASSIGN  10024>>ASSIGN
VY$TARGET_B
      9766**DCL      9813>>ASSIGN   9819<<ASSIGN   9823<<ASSIGN   9848<<ASSIGN   9849<<ASSIGN   9863<<ASSIGN
      9874<<ASSIGN   9882<<ASSIGN   9964>>ASSIGN   9970<<ASSIGN   9974<<ASSIGN   9999<<ASSIGN  10000<<ASSIGN
     10014<<ASSIGN  10024<<ASSIGN  10032<<ASSIGN
VY$TMPLT.A
      9614**DCL      9615--REDEF    9616--REDEF   10072>>ASSIGN  10072>>ASSIGN  10074>>ASSIGN  10074>>ASSIGN
VYD$TMPLT.A
      9509**DCL      9510--REDEF    9511--REDEF    9538--REDEF    9544--REDEF    9547--REDEF   10101>>ASSIGN
     10102>>ASSIGN
VYD$TMPLT.I.A
      9528**DCL      9529--REDEF
VYD$TMPLT.I.C
      9527**DCL     10096>>IF      10100>>IF
VYD$TMPLT.I.CST
      9532**DCL      9533--REDEF
VYD$TMPLT.I.I
      9530**DCL      9531--REDEF
VYD$TMPLT.I.NAME_DISP
      9524**DCL      9525--REDEF
VYD$TMPLT.I.NP
      9534**DCL      9535--REDEF
VYD$TMPLT.I.OFFSET
      9523**DCL     10094>>ASSIGN  10098>>ASSIGN  10106>>ASSIGN
VYD$TMPLT.I.P
      9526**DCL      9527--REDEF
VYD$TMPLT.I.SC#
      9519**DCL      9520--REDEF
VYD$TMPLT.SEG.SEGID
      9543**DCL     10105>>ASSIGN
VYD$TMPLT.V.VALUE
      9545**DCL     10097>>ASSIGN
VY_BIAS.A
      5428**DCL      5428--REDEF
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:90   
VY_CBUF.CHARS_A
      5419**DCL      5419--REDEF
VY_CURR$
      5423**DCL      9792>>ASSIGN
VY_EBUF.CHARS_A
      5720**DCL      5721--REDEF
VY_EFIELD1.CHARS
      5721**DCL      5721--REDEF
VY_EFIELD2.CHARS
      5722**DCL      5722--REDEF
VY_EFIELD3.CHARS
      5723**DCL      5723--REDEF
VY_ERRORS
      5424**DCL      5426--REDEF
VY_ERRORS.CONFLICT_A
      5425**DCL      5426--REDEF
VY_ERRORS.UNSAT_A
      5424**DCL      5425--REDEF
VY_IMAGE_DATA.CPAGE#_A
      5312**DCL      5313--REDEF
VY_IMAGE_DATA.NODE_A$
      5324**DCL      5325--REDEF
VY_IMAGE_DATA.START_A$
      5316**DCL      5317--REDEF
VY_IMAGE_DATA.STOP_A$
      5320**DCL      5321--REDEF
VY_IMAGE_PROC.CPAGE#_A
      5335**DCL      5336--REDEF
VY_IMAGE_PROC.NODE_A$
      5347**DCL      5348--REDEF
VY_IMAGE_PROC.START_A$
      5339**DCL      5340--REDEF
VY_IMAGE_PROC.STOP_A$
      5343**DCL      5344--REDEF
VY_IMAGE_ROS.CPAGE#_A
      5358**DCL      5359--REDEF
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:91   
VY_IMAGE_ROS.NODE_A$
      5370**DCL      5371--REDEF
VY_IMAGE_ROS.START_A$
      5362**DCL      5363--REDEF
VY_IMAGE_ROS.STOP_A$
      5366**DCL      5367--REDEF
VY_LINK_UTS
      5422**DCL      9843>>ASSIGN   9994>>ASSIGN
VY_MAP_HDR.CHARS
      5785**DCL      5786--REDEF    5786--REDEF
VY_MAP_LIT_LO_FPT_WRITE.STATION_
      5114**DCL      5114--REDEF
VY_MAP_LIT_LO_FPT_WRITE.V.DVBYTE.VFC#
      5121**DCL      5121--REDEF
VY_MAP_LO_FPT_WRITE.STATION_
      5083**DCL      5083--REDEF
VY_MAP_LO_FPT_WRITE.V.DVBYTE.VFC#
      5090**DCL      5090--REDEF
VY_MBUF.CHARS
      5784**DCL      5785--REDEF    5785--REDEF
VY_M_VECTOR.F
      5153**DCL      5157--REDEF
VY_M_VECTOR_DP.F
      5188**DCL      5192--REDEF
VY_O.DUPL_ATTCH
      5566**DCL      5570--REDEF
VY_O.MAP_ATTCH
      5554**DCL      5565--REDEF
VY_O.PRIMARY_OPTION
      5548**DCL      5553--REDEF
VY_O.SEV_ATTCH
      5571**DCL      5573--REDEF
VY_OD.DUPL_ATTCH
      5710**DCL      5714--REDEF
VY_OD.MAP_ATTCH
      5698**DCL      5709--REDEF
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:92   
VY_OD.PRIMARY_OPTION
      5692**DCL      5697--REDEF
VY_OD.SEV_ATTCH
      5715**DCL      5717--REDEF
VY_OL_KEY_BUF.FORM0
      5221**DCL      5224--REDEF    5231--REDEF
VY_OU_HEAD.REC_A
      5409**DCL      5410--REDEF
VY_O_KEY_BUF.FORM0
      5198**DCL      5201--REDEF    5208--REDEF
VY_O_KEY_BUF_L.FORM0
      5244**DCL      5247--REDEF    5254--REDEF
VY_PAR_UNWIND
      5779**DCL      5779--REDEF
VY_PASS2_REF.OU.L_START
      5746**DCL      5747--REDEF
VY_PASS2_REF.OU.L_STOP
      5747**DCL      5748--REDEF
VY_PASS2_REF.OU.MAX
      5745**DCL      5746--REDEF
VY_PASS2_REF.OU.SIZE
      5748**DCL      5749--REDEF
VY_PASS2_REF.SAT.COUNT
      5752**DCL      5753--REDEF
VY_PASS2_REF.SAT.ENT_SIZE
      5754**DCL      5755--REDEF
VY_PASS2_REF.SAT.L_START
      5750**DCL      5751--REDEF
VY_PASS2_REF.SAT.L_STOP
      5751**DCL      5752--REDEF
VY_PASS2_REF.SAT.MAX
      5749**DCL      5750--REDEF
VY_PASS2_REF.UNSAT.L_START
      5756**DCL      5757--REDEF
VY_PASS2_REF.UNSAT.L_STOP
      5757**DCL      5758--REDEF
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:93   
VY_PASS2_REF.UNSAT.L_WHERE
      5758**DCL      5759--REDEF
VY_PASS2_REF.UNSAT.MAX
      5755**DCL      5756--REDEF
VY_PASS2_REF.UNSAT.PAGE#
      5760**DCL      5761--REDEF
VY_PASS2_REF.UNSAT.SIZE
      5759**DCL      5760--REDEF
VY_PROGRAM_BIAS.A
      5427**DCL      5427--REDEF
VY_RU_HEAD.DATA_SEGMENT
      5395**DCL      5395--REDEF
VY_RU_HEAD.L
      5391**DCL      5392--REDEF
VY_RU_HEAD.MAP_BITS
      5392**DCL      5394--REDEF
VY_RU_HEAD.PBIT
      5388**DCL      5388--REDEF
VY_RU_HEAD_BUF.DATA_SEGMENT
      5405**DCL      5405--REDEF
VY_RU_HEAD_BUF.L
      5400**DCL      5401--REDEF
VY_RU_HEAD_BUF.MAP_BITS
      5402**DCL      5404--REDEF
VY_RU_HEAD_BUF.PBIT
      5397**DCL      5398--REDEF
VY_R_KEY_BUF.FORM0
      5267**DCL      5271--REDEF    5277--REDEF
VY_SI_KEY_BUF.KEY
      5775**DCL      5775--REDEF
VY_SOURCE_COUNT
      5725**DCL      9767--IMP-SIZ  9769--IMP-SIZ  9787<<ASSIGN   9819>>ASSIGN   9847>>ASSIGN   9848>>ASSIGN
      9863>>ASSIGN   9874>>ASSIGN   9945<<ASSIGN   9970>>ASSIGN   9998>>ASSIGN   9999>>ASSIGN  10014>>ASSIGN
     10024>>ASSIGN
VY_SPC.B$.MINE
      5770**DCL      5771--REDEF
PL6.E3A0      #001=VYQ$SORT File=VYQ$SORT.:E05TSI                                WED 07/30/97 09:01 Page:94   
VY_SPC.B$.NAME
      5767**DCL      5767--REDEF
VY_SPC.B$.SKIP
      5769**DCL      5770--REDEF
VY_SPC.B$.VALUE
      5768**DCL      5769--REDEF
VY_SPC.SEG.NAME
      5762**DCL      5763--REDEF
VY_SPC.SEG.VALUE
      5763**DCL      5764--REDEF
VY_TARGET_COUNT
      5725**DCL      9766--IMP-SIZ  9768--IMP-SIZ  9786<<ASSIGN   9787>>ASSIGN   9813>>ASSIGN   9819>>ASSIGN
      9823>>ASSIGN   9848>>ASSIGN   9849>>ASSIGN   9863>>ASSIGN   9874>>ASSIGN   9882>>ASSIGN   9944<<ASSIGN
      9945>>ASSIGN   9964>>ASSIGN   9970>>ASSIGN   9974>>ASSIGN   9999>>ASSIGN  10000>>ASSIGN  10014>>ASSIGN
     10024>>ASSIGN  10032>>ASSIGN
VY_TSX0_OVERLAY.H
      5734**DCL      5735--REDEF
