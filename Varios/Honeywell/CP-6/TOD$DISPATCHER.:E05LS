VERSION E05

PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:1    
        1        1        /*M* TOD$DISPATCHER    TOLTS DISPATCHER program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*F* NAME:         TOD$DISPATCHER
       12       12             PURPOSE:      Either build or service dispatcher queue entries.
       13       13             DESCRIPTION:  Total On-Line Testing System Dispatcher
       14       14             LAST UPDATE:  03/05/85
       15       15             REFERENCE:    CP-6 Release C01A
       16       16                           Scott Sheppard
       17       17        */
       18       18
       19       19        TOD$DISPATCHER: PROC (REQUEST_TYPE, SERVICE_CODE, QUEUE_ENTRY) ;
       20       20
       21       21        /* Include Files */
       22       22
       23       23           %INCLUDE B$JIT ;
       24      626           %INCLUDE CP_6 ;
       25     6185           %INCLUDE CP_6_SUBS ;
       26     6725           %INCLUDE TOT_TOLTS_M ;
       27     7843           %INCLUDE TOT_RQSTS_E ;
       28     7885           %INCLUDE TO_PERR_C ;
       29     8470           %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:2    
       30     8471        /* Variables */
       31     8472
       32     8473    1      DCL REQUEST_TYPE UBIN(36) ;
       33     8474    1      DCL SERVICE_CODE UBIN(18) ;
       34     8475    1      DCL QUEUE_ENTRY  (0:2) UBIN(36) ;
       35     8476           %IS$ (STCLASS = CONSTANT) ;
       36     8490           %VLP_ERRCODE (FPTN = TOD_ERROR_CODE,
       37     8491                         FCG = 'TO',
       38     8492                         MID = 'D',
       39     8493                         SEV = 0) ;
       40     8538
       41     8539        /* External Variables */
       42     8540
       43     8541    1      DCL 1 TSNUMB CONSTANT SYMDEF DALIGNED,
       44     8542    1            2 *          BIT (36) UNAL INIT ('536246436300'O),
       45     8543    1            2 *          UBIN (36) UNAL INIT (0) ;
       46     8544    1      DCL 1 PSNUMB CONSTANT SYMDEF DALIGNED,
       47     8545    1            2 *          BIT (36) UNAL INIT ('534721236300'O),
       48     8546    1            2 *          UBIN (36) UNAL INIT (0) ;
       49     8547    1      DCL B$JIT$         PTR SYMREF ;
       50     8548           %TOD$QUEUE (STCLASS = "STATIC SYMDEF") ;
       51     8575           %TOF$BAR (STCLASS = SYMREF) ;
       52     8598           %TOQ$DCP (STCLASS = SYMREF) ;
       53     8630           %TOT$ECP (STCLASS = SYMREF) ;
       54     8679    1      DCL TOD$SPA$       PTR STATIC SYMDEF ;
       55     8680    1      DCL TOP$EVENT_ID   UBIN(36) SYMREF ;
       56     8681    1      DCL TOP$STATUS     BIT(72) SYMREF ;
       57     8682           %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:3    
       58     8683        /* External Entry Points */
       59     8684
       60     8685    1      DCL TOL$GET_DECK               ENTRY (7) ALTRET ;
       61     8686    1      DCL TOQ$DEBUG                  ENTRY ;
       62     8687    1      DCL TOG$GCOS_MMES              ENTRY (4) ;
       63     8688    1      DCL TOP$POLTS_IO               ENTRY (4) ;
       64     8689    1      DCL TOT$SOLTS_SNUMB            ENTRY (1) ;
       65     8690    1      DCL TOT$PACT_SNUMB             ENTRY (1) ;
       66     8691    1      DCL TOX$ERROR                  ENTRY (1) ;
       67     8692    1      DCL TOX$SCREECH                ENTRY (1) ;
       68     8693           %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:4    
       69     8694        /*D* NAME:         TOD$DISPATCHER
       70     8695             INTERFACE:    TOD$BUILD_ENTRY
       71     8696                           TOD$SERVICE_ENTRY
       72     8697             INPUT:        REQUEST_TYPE specifies what the dispatcher should
       73     8698                           do, either build a new entry or service the queue.
       74     8699                           SERVICE_CODE specifies what service code is to be
       75     8700                           put into the dispatcher queue entry if one is to
       76     8701                           be built.
       77     8702                           QUEUE_ENTRY is a 3 word entry to be put into the
       78     8703                           dispatcher queue entry if one is to be built.
       79     8704             OUTPUT:       A new dispatcher queue entry or a dispatcher entry
       80     8705                           serviced.
       81     8706             DESCRIPTION:  Using REQUEST_TYPE, one of 2 routines is called to
       82     8707                           either build a new dispatcher queue entry using
       83     8708                           information passed in the call (SERVICE_CODE and
       84     8709                           QUEUE_ENTRY), or to service the next entry in the
       85     8710                           dispatcher queue.
       86     8711        */
       87     8712
       88     8713        /* Code */
       89     8714
       90     8715    2      DO CASE (REQUEST_TYPE) ;
       91     8716    2         CASE (%DRT_BUILD) ;
       92     8717    2            CALL TOD$BUILD_ENTRY ;
       93     8718    2         CASE (%DRT_SERVICE) ;
       94     8719    2            CALL TOD$SERVICE_ENTRY ;
       95     8720    2         CASE (ELSE) ;
       96     8721    2            TOD_ERROR_CODE.ERR# = %E$ILLREQTYP ;
       97     8722    2            CALL TOX$SCREECH (TOD_ERROR_CODE) ;
       98     8723    2      END ;
       99     8724    1      RETURN ;
      100     8725
      101     8726        /*END TOD$DISPATCHER*/
      102     8727        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:5    
      103     8728        /*I* NAME:         TOD$BUILD_ENTRY
      104     8729             INPUT:        Uses SERVICE_CODE and QUEUE_ENTRY.
      105     8730             OUTPUT:       Dispatcher queue has a new entry.
      106     8731             DESCRIPTION:  First, a check is made to make sure the dispatcher
      107     8732                           queue will not overflow.  A maximum of 16
      108     8733                           entries are allowed.
      109     8734
      110     8735                           Then the dispatcher queue entry is built in
      111     8736                           inhibited mode (so it cannot be interrupted),
      112     8737                           inserting SERVICE_CODE and QUEUE_ENTRY into the
      113     8738                           next available queue entry.
      114     8739        */
      115     8740
      116     8741    1   TOD$BUILD_ENTRY: PROC ;
      117     8742
      118     8743        /* Code */
      119     8744
      120     8745    2      IF TOD$QUEUE.ENTRIES > 15
      121     8746    3      THEN DO ;
      122     8747    3              TOD_ERROR_CODE.ERR# = %E$DISPFULL ;
      123     8748    3              CALL TOX$SCREECH (TOD_ERROR_CODE) ;
      124     8749    3           END /* THEN */ ;
      125     8750    3      ELSE DO INHIBIT ;
      126     8751    3              TOD$QUEUE.E.SERV_CODE(TOD$QUEUE.NEXT_SLOT) = SERVICE_CODE ;
      127     8752    3              TOD$QUEUE.E.QENTRY(TOD$QUEUE.NEXT_SLOT) = QUEUE_ENTRY ;
      128     8753    3              TOD$QUEUE.ENTRIES = TOD$QUEUE.ENTRIES + 1 ;
      129     8754    3              IF TOD$QUEUE.NEXT_SLOT = 15
      130     8755    3              THEN TOD$QUEUE.NEXT_SLOT = 0 ;
      131     8756    3              ELSE TOD$QUEUE.NEXT_SLOT = TOD$QUEUE.NEXT_SLOT + 1 ;
      132     8757    3           END /* INHIBIT */ ;
      133     8758    2      RETURN ;
      134     8759
      135     8760    2   END TOD$BUILD_ENTRY ;
      136     8761        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:6    
      137     8762        /*I* NAME:         TOD$SERVICE_ENTRY
      138     8763             INTERFACE:    TOD$ADVANCE_QUEUE
      139     8764                           TOD$INIT_SUBEXEC
      140     8765                           TOD$INTERSLAVE_WRITE
      141     8766                           TOD$POLTS_IO_DONE(called for both POLTS and MOLTS I/O)
      142     8767             INPUT:        None.
      143     8768             OUTPUT:       A dispatcher service complete.
      144     8769             DESCRIPTION:  First, SERVICE_IN_PROGRESS is set to a 1 so that
      145     8770                           if this dispatcher is entered again before it is
      146     8771                           done, TOLTS will quit.  It is an error condition
      147     8772                           if the dispatcher is called recursively.
      148     8773
      149     8774                           If there is nothing to do, (QUEUE_ENTRIES = 0), an
      150     8775                           immediate return is made to the caller.
      151     8776                           Otherwise, based on SERVICE_CODE in the dispatcher
      152     8777                           queue entry, one of the service routines is called.
      153     8778                           All except TOD$INIT_SUBEXEC return here for return to
      154     8779                           the caller.  TOD$INIT_SUBEXEC does a one way
      155     8780                           transfer off to the subexec (and yes, leaving a
      156     8781                           auto frame lying around, which is ok since there will
      157     8782                           only be one).
      158     8783
      159     8784                           Each of the service routines does its service,
      160     8785                           the dispatcher queue pointers are updated, the
      161     8786                           SERVICE_IN_PROGRESS flag reset and return made to
      162     8787                           the main level.
      163     8788        */
      164     8789
      165     8790    1   TOD$SERVICE_ENTRY: PROC ;
      166     8791
      167     8792    2      DCL SERVICE_IN_PROGRESS BIT (1) STATIC INIT (%FALSE) ;
      168     8793           %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:7    
      169     8794        /* Code */
      170     8795
      171     8796    2      IF SERVICE_IN_PROGRESS
      172     8797    3      THEN DO ;
      173     8798    3              TOD_ERROR_CODE.ERR# = %E$DISPBUSY ;
      174     8799    3              CALL TOX$SCREECH (TOD_ERROR_CODE) ;
      175     8800    3           END /* THEN */ ;
      176     8801    3      ELSE DO ;
      177     8802    3              SERVICE_IN_PROGRESS = %TRUE ;
      178     8803    3              IF TOD$QUEUE.ENTRIES = 0
      179     8804    3              THEN /* Do Nothing */ ;
      180     8805    4              ELSE DO ;
      181     8806    5                      DO CASE (TOD$QUEUE.E.SERV_CODE(TOD$QUEUE.CURR_SERVICE));
      182     8807    5                         CASE (%DSC_INIT) ;
      183     8808    5                            SERVICE_IN_PROGRESS = %FALSE ;
      184     8809    5                            CALL TOD$ADVANCE_QUEUE ;
      185     8810    5                            CALL TOD$INIT_SUBEXEC ;
      186     8811    5                         CASE (%DSC_ISC) ;
      187     8812    5                            CALL TOD$INTERSLAVE_WRITE ;
      188     8813    5                         CASE (%DSC_PIO,%DSC_MIO) ;
      189     8814    5                            CALL TOD$POLTS_IO_DONE ;
      190     8815    5                         CASE (ELSE) ;
      191     8816    5                            TOD_ERROR_CODE.ERR# = %E$BADSRVCODE ;
      192     8817    5                            CALL TOX$SCREECH (TOD_ERROR_CODE) ;
      193     8818    5                      END /* CASE */ ;
      194     8819    4                      CALL TOD$ADVANCE_QUEUE ;
      195     8820    4                   END /* ELSE */ ;
      196     8821    3              SERVICE_IN_PROGRESS = %FALSE ;
      197     8822    3           END /* ELSE */ ;
      198     8823    2      RETURN ;
      199     8824
      200     8825        /* END TOD$SERVICE_ENTRY */
      201     8826        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:8    
      202     8827        /*I* NAME:         TOD$INIT_SUBEXEC
      203     8828             INTERFACE:    Transfers to a subexec,
      204     8829                             POLTS
      205     8830                             SOLTS
      206     8831                             COLTS
      207     8832                             MOLTS
      208     8833             INPUT:        Uses TOT$ECP.SUBEXEC.CURRENT
      209     8834             OUTPUT:       None
      210     8835             DESCRIPTION:  Allocates additional memory dynamically for the
      211     8836                           requested subexec and reads in the subexec of the
      212     8837                           T&D Deckfile.  There is a fair amount of kludgin
      213     8838                           around the accomodate the calling sequences
      214     8839                           required to read the subexec off the Deckfile.
      215     8840
      216     8841                           Using the current subexec identifier in
      217     8842                           TOT$ECP.SUBEXEC.CURRENT, the approximate size of the
      218     8843                           subexec is fetched from a table initialized at
      219     8844                           compile time with the reasonable guesses of the
      220     8845                           subexec sizes.  LOAD_ADDRESS is calculated from
      221     8846                           B$JIT.TDP to yield the address where the subexec
      222     8847                           can be loaded at.  M$GDP is called to get more
      223     8848                           memory, and TOF$BAR.FULL and TOF$BAR.CURRENT
      224     8849                           are updated.
      225     8850
      226     8851                           We are now ready to read the subexec in from the
      227     8852                           Deckfile.  DCWLIST is built to contain the number of
      228     8853                           DCWs required to load the subexec.  Also a read
      229     8854                           key is built for the read.  Finally,TOL$GET_DECK
      230     8855                           is called to read in the subexec.  If there is
      231     8856                           anything wrong, it ALTRETURNs with an error code
      232     8857                           in ERROR_CODE.  At the moment, the list of the
      233     8858                           error codes is not available.  If there is a
      234     8859                           problem in this area, too bad.
      235     8860
      236     8861                           Once the subexec is loaded, a pointer is built
      237     8862                           to its Slave Prefix Area for use later.  The pointer
      238     8863                           is TOT$SPA$.
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:9    
      239     8864
      240     8865                           The entry pointer SUBEXEC$ is built to the entry
      241     8866                           point for the subexec.  It is assumed that all
      242     8867                           entry points will be a location 0 of the module,
      243     8868                           i.e., LOAD_ADDRESS plus 72 words to account for
      244     8869                           the Slave Prefix Area.  CALL SUBEXEC$ transfers
      245     8870                            control to the subexec, leaving the auto frame
      246     8871                           for the dispatcher.  It will go away later as
      247     8872                           UNWINDS are done in the simulation of GELBAR.
      248     8873
      249     8874        */
      250     8875        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:10   
      251     8876    2   TOD$INIT_SUBEXEC: PROC ;
      252     8877
      253     8878    3      DCL 1 KEY_VALUE STATIC,
      254     8879    3            2 SIZE  UBIN BYTE UNAL INIT (23),
      255     8880    3            2 VALUE CHAR (23) CALIGNED ;
      256     8881    3      DCL SUBEXEC_SIZE UBIN WORD ALIGNED ;
      257     8882    3      DCL DCWLIST$     PTR ALIGNED ;
      258     8883    3      DCL LOAD_WORDS   UBIN WORD ALIGNED ;
      259     8884    3      DCL SUBEXEC$     EPTR ALIGNED ;
      260     8885
      261     8886        /* Code */
      262     8887
      263     8888    3      TOT$ECP.SUBEXEC.ADDRESS = (B$JIT$ -> B$JIT.TDP - 64) * 1024 ;
      264     8889    3      CALL GET_SUBEXEC_SIZE (SUBEXEC_SIZE) ;
      265     8890    3      CALL GET_MORE_PAGES (SUBEXEC_SIZE, LOAD_WORDS) ;
      266     8891    3      CALL SET_BARS (SUBEXEC_SIZE) ;
      267     8892    3      CALL SETUP_DCW_LIST (SUBEXEC_SIZE, DCWLIST$, LOAD_WORDS) ;
      268     8893    3      CALL GET_SUBEXEC_KEY (KEY_VALUE.VALUE) ;
      269     8894    3      CALL LOAD_SUBEXEC (SUBEXEC_SIZE, KEY_VALUE, DCWLIST$) ALTRET (LOAD_ERROR) ;
      270     8895    3      CALL SAVE_SUBEXEC_DEBUG_INFO ;
      271     8896    3      TOD$SPA$ = PINCRW (IS$, TOT$ECP.SUBEXEC.ADDRESS) ;
      272     8897    3      CALL SET_SUBEXEC$ (SUBEXEC$) ;
      273     8898    3      CALL SUBEXEC$ ;
      274     8899    3      RETURN ;
      275     8900
      276     8901    3   LOAD_ERROR:
      277     8902    3      TOD_ERROR_CODE.ERR# = %E$LOADERR ;
      278     8903    3      CALL TOX$ERROR (TOD_ERROR_CODE) ;
      279     8904
      280     8905        /* END TOD$INIT_SUBEXEC */
      281     8906        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:11   
      282     8907        /*I* NAME:         GET_SUBEXEC_SIZE
      283     8908             PURPOSE:      Returns Subexecutive Size
      284     8909             DESCRIPTION:  This procedure returns the size of the TOLTS subexecutive.
      285     8910        */
      286     8911
      287     8912    3   GET_SUBEXEC_SIZE: PROC (SUBEXEC_SIZE) ;
      288     8913
      289     8914    4      DCL SUBEXEC_SIZE UBIN WORD ALIGNED ;
      290     8915    4      DCL 1 SUBEXEC_SIZES CONSTANT,
      291     8916    4            2 POLTS UBIN(36) INIT (17),
      292     8917    4            2 SOLTS UBIN(36) INIT (39),
      293     8918    4            2 COLTS UBIN(36) INIT (15),
      294     8919    4            2 MOLTS UBIN(36) INIT (15) ;
      295     8920
      296     8921        /* Code */
      297     8922
      298     8923    5      DO CASE (TOT$ECP.SUBEXEC.CURRENT) ;
      299     8924    5         CASE (%POLTS) ;
      300     8925    5            SUBEXEC_SIZE = SUBEXEC_SIZES.POLTS ;
      301     8926    5         CASE (%SOLTS, %PACT, %SLTA) ;
      302     8927    5            SUBEXEC_SIZE = SUBEXEC_SIZES.SOLTS ;
      303     8928    5         CASE (%COLTS) ;
      304     8929    5            SUBEXEC_SIZE = SUBEXEC_SIZES.COLTS ;
      305     8930    5         CASE (%MOLTS) ;
      306     8931    5            SUBEXEC_SIZE = SUBEXEC_SIZES.MOLTS ;
      307     8932    5      END /* CASE */ ;
      308     8933    4      RETURN ;
      309     8934
      310     8935    4   END GET_SUBEXEC_SIZE ;
      311     8936        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:12   
      312     8937        /*I* NAME:         GET_MORE_PAGES
      313     8938             PURPOSE:      Acquires Memory
      314     8939             DESCRIPTION:  This procedure acquires enough additional
      315     8940                           dynamic pages to load the subexecutive.
      316     8941        */
      317     8942
      318     8943    3   GET_MORE_PAGES: PROC (SUBEXEC_SIZE, LOAD_WORDS) ;
      319     8944
      320     8945    4      DCL SUBEXEC_SIZE  UBIN WORD ALIGNED ;
      321     8946    4      DCL LOAD_WORDS    UBIN WORD ALIGNED ;
      322     8947    4      DCL LOAD$         PTR ALIGNED ;
      323     8948    4      DCL 1 LOAD_ REDEF LOAD$ ALIGNED,
      324     8949    4            2 ADDRESS   UBIN HALF UNAL,
      325     8950    4            2 SEGID     UBIN HALF UNAL ;
      326     8951    4      DCL LOAD_WORD     UBIN WORD BASED ALIGNED ;
      327     8952    4      DCL LAST_WORD     UBIN WORD ALIGNED ;
      328     8953           %FPT_GDP (FPTN = GDP_FPT) ;
      329     8967
      330     8968        /* Code */
      331     8969
      332     8970           /* Get the dynamic pages from the operating system. */
      333     8971    4      TOT$ECP.DYNAMIC_PAGE_COUNT = TOT$ECP.DYNAMIC_PAGE_COUNT + SUBEXEC_SIZE ;
      334     8972    4      GDP_FPT.V.PAGES# = SUBEXEC_SIZE ;
      335     8973    4      CALL M$GDP (GDP_FPT) ;
      336     8974
      337     8975           /* Zero the pages for protection. */
      338     8976    4      LOAD_.SEGID = %IS_SEGID ;
      339     8977    4      LAST_WORD = TOT$ECP.SUBEXEC.ADDRESS + (SUBEXEC_SIZE * 1024) - 1 ;
      340     8978    5      DO LOAD_.ADDRESS = TOT$ECP.SUBEXEC.ADDRESS TO LAST_WORD ;
      341     8979    5         LOAD$ -> LOAD_WORD = 0 ;
      342     8980    5      END /* DO */ ;
      343     8981    4      LOAD_WORDS = (SUBEXEC_SIZE * 1024) - %SPA_LGTH ;
      344     8982    4      RETURN ;
      345     8983
      346     8984    4   END GET_MORE_PAGES ;
      347     8985        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:13   
      348     8986        /*I* NAME:         SET_BARS
      349     8987             PURPOSE:      Sets Base Address Registers
      350     8988             DESCRIPTION:  This procedure sets the base address registers
      351     8989                           in conjunction with the subexec size.
      352     8990        */
      353     8991
      354     8992    3   SET_BARS: PROC (SUBEXEC_SIZE) ;
      355     8993
      356     8994    4      DCL SUBEXEC_SIZE UBIN WORD ALIGNED ;
      357     8995
      358     8996        /* Code */
      359     8997
      360     8998    4      TOF$BAR.FULL.BASE = 0 ;
      361     8999    5      DO CASE (TOT$ECP.SUBEXEC.CURRENT) ;
      362     9000    5         CASE (%SOLTS, %PACT, %SLTA) ;
      363     9001    5            TOF$BAR.FULL.SIZE = SUBEXEC_SIZE * 2 ; /* Was '*4', STAR 24397 */
      364     9002    5         CASE (ELSE) ;
      365     9003    5            TOF$BAR.FULL.SIZE = SUBEXEC_SIZE * 2 ;
      366     9004    5      END /* CASE */ ;
      367     9005    4      TOF$BAR.CURRENT = TOF$BAR.FULL ;
      368     9006    4      RETURN ;
      369     9007
      370     9008    4   END SET_BARS ;
      371     9009        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:14   
      372     9010        /*I* NAME:         SETUP_DCW_LIST
      373     9011             PURPOSE:      Sets up a DCW list for the Subexec
      374     9012             DESCRIPTION:  This procedure sets up a dcw list of 4k blocks
      375     9013                           for the TOLTS subexecutive to be loaded.
      376     9014        */
      377     9015
      378     9016    3   SETUP_DCW_LIST: PROC (SUBEXEC_SIZE, DCWLIST$, LOAD_WORDS) ;
      379     9017
      380     9018    4      DCL SUBEXEC_SIZE               UBIN WORD ALIGNED ;
      381     9019    4      DCL DCWLIST$                   PTR ALIGNED ;
      382     9020    4      DCL LOAD_WORDS                 UBIN WORD ALIGNED ;
      383     9021    4      DCL I                          UBIN WORD ALIGNED ;
      384     9022    4      DCL LAST_DCW                   UBIN WORD ALIGNED ;
      385     9023    4      DCL 1 DCWLIST (0:20) STATIC ALIGNED,
      386     9024    4            2 ADDRESS                UBIN (18) UNAL,
      387     9025    4            2 CHAR_ADDRESS           UBIN (3)  UNAL,
      388     9026    4            2 *                      UBIN (1)  UNAL,
      389     9027    4            2 TYPE                   UBIN (2)  UNAL,
      390     9028    4            2 WORD_COUNT             UBIN (12) UNAL ;
      391     9029           %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:15   
      392     9030        /* Code */
      393     9031
      394     9032    4      LAST_DCW = LOAD_WORDS / 4096 ;
      395     9033    4      IF LAST_DCW > 20
      396     9034    5      THEN DO ;
      397     9035    5              TOD_ERROR_CODE.ERR# = %E$BADSIZE ;
      398     9036    5              CALL TOX$ERROR (TOD_ERROR_CODE) ;
      399     9037    5           END /* THEN */ ;
      400     9038    5      ELSE DO ;
      401     9039    5              DCWLIST = '0'B ;
      402     9040    5              DCWLIST.ADDRESS(0) = TOT$ECP.SUBEXEC.ADDRESS ;
      403     9041    5              DCWLIST.TYPE(0) = %IOTP ;
      404     9042    6              DO I = 1 TO LAST_DCW - 1 ;
      405     9043    6                 DCWLIST.ADDRESS(I) = DCWLIST.ADDRESS(I-1) + 4096 ;
      406     9044    6                 DCWLIST.TYPE(I) = %IOTP ;
      407     9045    6              END /* DO */ ;
      408     9046    5              DCWLIST.ADDRESS(LAST_DCW) = DCWLIST.ADDRESS(LAST_DCW - 1) + 4096 ;
      409     9047    5              DCWLIST.TYPE(LAST_DCW) = %IOTD ;
      410     9048    5              DCWLIST.WORD_COUNT(LAST_DCW) = MOD (LOAD_WORDS, 4096) ;
      411     9049    5              DCWLIST$ = ADDR (DCWLIST) ;
      412     9050    5              RETURN ;
      413     9051    5           END /* ELSE */ ;
      414     9052
      415     9053    4   END SETUP_DCW_LIST ;
      416     9054        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:16   
      417     9055        /*I* NAME:         GET_SUBEXEC_KEY
      418     9056             PURPOSE:      Returns Subexecutive Key Value
      419     9057             DESCRIPTION:  This procedure returns the key of the TOLTS
      420     9058                           Subexecutive for the deckfile.
      421     9059        */
      422     9060
      423     9061    3   GET_SUBEXEC_KEY: PROC (DECKFILE_KEY_VALUE) ;
      424     9062
      425     9063    4      DCL DECKFILE_KEY_VALUE CHAR (23) CALIGNED ;
      426     9064    4      DCL 1 SUBEXEC_KEYS CONSTANT,
      427     9065    4            2 POLTS CHAR(23) INIT ('PLT.POLTCM'),
      428     9066    4            2 SOLTS CHAR(23) INIT ('SLT.SOLTCM'),
      429     9067    4            2 COLTS CHAR(23) INIT ('CLT.COLTCM'),
      430     9068    4            2 MOLTS CHAR(23) INIT ('MLT.MOLTCM') ;
      431     9069
      432     9070        /* Code */
      433     9071
      434     9072    5      DO CASE (TOT$ECP.SUBEXEC.CURRENT) ;
      435     9073    5         CASE (%POLTS) ;
      436     9074    5            DECKFILE_KEY_VALUE = SUBEXEC_KEYS.POLTS ;
      437     9075    5         CASE (%SOLTS, %PACT, %SLTA) ;
      438     9076    5            DECKFILE_KEY_VALUE = SUBEXEC_KEYS.SOLTS ;
      439     9077    5         CASE (%COLTS) ;
      440     9078    5            DECKFILE_KEY_VALUE = SUBEXEC_KEYS.COLTS ;
      441     9079    5         CASE (%MOLTS) ;
      442     9080    5            DECKFILE_KEY_VALUE = SUBEXEC_KEYS.MOLTS ;
      443     9081    5      END /* CASE */ ;
      444     9082    4      RETURN ;
      445     9083
      446     9084    4   END GET_SUBEXEC_KEY ;
      447     9085        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:17   
      448     9086        /*I* NAME:         LOAD_SUBEXEC
      449     9087             PURPOSE:      Loads TOLTS Subexec
      450     9088             DESCRIPTION:  This procedure sets up parameters for and calls
      451     9089                           the TOLTS loader utility.
      452     9090        */
      453     9091
      454     9092    3   LOAD_SUBEXEC: PROC (SUBEXEC_SIZE, KEY_VALUE, DCWLIST_PTR) ALTRET ;
      455     9093
      456     9094    4      DCL SUBEXEC_SIZE UBIN WORD ALIGNED ;
      457     9095    4      DCL KEY_VALUE    CHAR (24) CALIGNED ;
      458     9096    4      DCL 1 DCWLIST_PTR ALIGNED,
      459     9097    4            2 ADR      UBIN HALF UNAL,
      460     9098    4            2 *        UBIN HALF UNAL ;
      461     9099    4      DCL 1 CALL_SEQUENCE STATIC,
      462     9100    4            2 DCWLIST_ADR UBIN(18) UNAL,
      463     9101    4            2 STATUS_ADR  UBIN(18) UNAL,
      464     9102    4            2 * UBIN(18) UNAL,
      465     9103    4            2 * UBIN(18) UNAL,
      466     9104    4            2 * UBIN(36) UNAL,
      467     9105    4            2 * UBIN(36) UNAL,
      468     9106    4            2 * UBIN(36) UNAL,
      469     9107    4            2 * UBIN(36) UNAL,
      470     9108    4            2 * UBIN(36) UNAL,
      471     9109    4            2 * UBIN(36) UNAL,
      472     9110    4            2 * UBIN(36) UNAL,
      473     9111    4            2 * UBIN(36) UNAL ;
      474     9112    4      DCL ERROR_CODE UBIN(36) ;
      475     9113    4      DCL LOAD_OFFSET UBIN(18);
      476     9114    4      DCL LOAD_SIZE UBIN(36) ;
      477     9115    4      DCL MAX_LOAD UBIN(18) ;
      478     9116    4      DCL STATUS (0:1) UBIN(36) STATIC ;
      479     9117    4      DCL STATUS$ PTR ALIGNED ;
      480     9118    4      DCL 1 STATUS_PTR REDEF STATUS$ ALIGNED,
      481     9119    4            2 ADR   UBIN HALF UNAL,
      482     9120    4            2 *     UBIN HALF UNAL ;
      483     9121           %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:18   
      484     9122        /* Code */
      485     9123
      486     9124    4      CALL_SEQUENCE = '0'B ;
      487     9125    4      CALL_SEQUENCE.DCWLIST_ADR = DCWLIST_PTR.ADR ;
      488     9126    4      STATUS$ = ADDR(STATUS) ;
      489     9127    4      CALL_SEQUENCE.STATUS_ADR = STATUS_PTR.ADR ;
      490     9128    4      ERROR_CODE = 0 ;
      491     9129    4      LOAD_SIZE = 0 ;
      492     9130    4      STATUS = '0'B ;
      493     9131    4      LOAD_OFFSET = 0 ;
      494     9132    4      MAX_LOAD = (SUBEXEC_SIZE * 1024) + TOT$ECP.SUBEXEC.ADDRESS ;
      495     9133    4      CALL TOL$GET_DECK (KEY_VALUE,
      496     9134    4              LOAD_OFFSET,
      497     9135    4              CALL_SEQUENCE,
      498     9136    4              MAX_LOAD,
      499     9137    4              LOAD_SIZE,
      500     9138    4              ERROR_CODE,
      501     9139    4              TOT$ECP.SUBEXEC.EDIT_NAME) ALTRET (ERROR) ;
      502     9140    4      RETURN ;
      503     9141
      504     9142    4   ERROR:
      505     9143    4      ALTRETURN ;
      506     9144
      507     9145    4   END LOAD_SUBEXEC ;
      508     9146        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:19   
      509     9147        /*I* NAME:         SAVE_SUBEXEC_DEBUG_INFO
      510     9148             AUTHOR:       Scott S. Sheppard
      511     9149             PURPOSE:      Save Subexecutive Attributes for DEBUG
      512     9150             DATA:         TOT$ECP.SUBEXEC.EDIT_NAME - input
      513     9151                           TOT$ECP.SUBEXEC.ADDRESS - input
      514     9152                           KEY_VALUE.VALUE - input (dcl in TOD$INIT_SUBEXEC)
      515     9153                           TOQ$DCP.PF.ENABLED - input
      516     9154                           TOQ$DCP.SE.NAME - output
      517     9155                           TOQ$DCP.SE.ADDRESS - output
      518     9156                           TOQ$DCP.SE.CATALOG - output
      519     9157             DESCRIPTION:  This procedure saves Subexecutive information in
      520     9158                           the Debug Control Parameter.
      521     9159        */
      522     9160
      523     9161    3   SAVE_SUBEXEC_DEBUG_INFO: PROC ;
      524     9162
      525     9163        /* Code */
      526     9164
      527     9165    4      IF TOQ$DCP.PF.ENABLED
      528     9166    5      THEN DO ;
      529     9167    5              TOQ$DCP.SE.EDIT_NAME = TOT$ECP.SUBEXEC.EDIT_NAME ;
      530     9168    5              TOQ$DCP.SE.ADDRESS = TOT$ECP.SUBEXEC.ADDRESS ;
      531     9169    5              TOQ$DCP.SE.CATALOG = SUBSTR (KEY_VALUE.VALUE, 0, 3) ;
      532     9170    5              TOQ$DCP.PF.REASON = %DSC_INIT ;
      533     9171    5              CALL TOQ$DEBUG ;
      534     9172    5           END /* THEN */ ;
      535     9173    4      ELSE /* DEBUG test request didn't kick this Subexecutive off */ ;
      536     9174    4      RETURN ;
      537     9175
      538     9176    4   END SAVE_SUBEXEC_DEBUG_INFO ;
      539     9177        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:20   
      540     9178        /*I* NAME:         SET_SUBEXEC$
      541     9179             PURPOSE:      Sets the Pointer to the Subexec
      542     9180             DESCRIPTION:  This procedure sets the pointer to the TOLTS
      543     9181                           subexecutive that has just been loaded.
      544     9182        */
      545     9183
      546     9184    3   SET_SUBEXEC$: PROC (SUBEXEC_PTR) ;
      547     9185
      548     9186    4      DCL 1 SUBEXEC_PTR ALIGNED,
      549     9187    4            2 ADR     UBIN HALF UNAL,
      550     9188    4            2 SEGID   UBIN HALF UNAL ;
      551     9189
      552     9190        /* Code */
      553     9191
      554     9192    4      SUBEXEC_PTR.ADR = TOT$ECP.SUBEXEC.ADDRESS + %SPA_LGTH ;
      555     9193    4      SUBEXEC_PTR.SEGID = %IS_SEGID ;
      556     9194    5      DO CASE (TOT$ECP.SUBEXEC.CURRENT) ;
      557     9195    5         CASE (%SOLTS, %SLTA) ;
      558     9196    5            CALL TOT$SOLTS_SNUMB (SUBEXEC_PTR) ;
      559     9197    5         CASE (%PACT) ;
      560     9198    5            CALL TOT$PACT_SNUMB (SUBEXEC_PTR) ;
      561     9199    5      END /* CASE */ ;
      562     9200    4      RETURN ;
      563     9201
      564     9202    4   END SET_SUBEXEC$ ;
      565     9203    3   END TOD$INIT_SUBEXEC ;
      566     9204        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:21   
      567     9205        /*I* NAME:         TOD$INTERSLAVE_WRITE
      568     9206             INTERFACE:    TOG$GCOS_MMES
      569     9207             INPUT:        Information in dispatcher queue entry.
      570     9208             OUTPUT:       Interslave Write operation simulated.
      571     9209             DESCRIPTION:  The structure MME is setup to look like a
      572     9210                           MME GEINOS occurred in a GMAP program.  Then
      573     9211                           TOG$GCOS_MMES is called to do an Interslave Write.
      574     9212
      575     9213                           The op code for an Interslave Write is set into
      576     9214                           MME.WD_1, bits 0-5.
      577     9215
      578     9216                           Bits 18-35 of MME.WD_2 are set to the address of
      579     9217                           a DCW word which points to the 3 words of data
      580     9218                           to be written.  (Bits 0-17 of the variable DCW
      581     9219                           contain the address of the data, which is left
      582     9220                           in the dispatcher queue entry.  MME.WD2.ADR contains
      583     9221                           the address of this DCW word.)
      584     9222
      585     9223                           The MME number (MME.INST.NO) is set to 1 for a
      586     9224                           MME GEINOS.  Then TOG$GCOS_MMES is called.  It
      587     9225                           does the Interslave Write, not knowing that it was
      588     9226                           call from TOD$DISPATCHER and not the fault
      589     9227                           handler, TOF$FAULTS.
      590     9228        */
      591     9229        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:22   
      592     9230    2   TOD$INTERSLAVE_WRITE: PROC ;
      593     9231
      594     9232    3      DCL DATA$ PTR ;
      595     9233    3      DCL 1 DATA_PTR REDEF DATA$,
      596     9234    3            2 ADR UBIN (18) UNAL,
      597     9235    3            2 * UBIN (18) UNAL ;
      598     9236    3      DCL 1 DCW STATIC,
      599     9237    3            2 ADR UBIN (18) UNAL,
      600     9238    3            2 * UBIN (18) UNAL ;
      601     9239    3      DCL DCWLIST$ PTR ;
      602     9240    3      DCL 1 DCWLIST_PTR REDEF DCWLIST$,
      603     9241    3            2 ADR UBIN (18) UNAL,
      604     9242    3            2 * UBIN (18) UNAL ;
      605     9243    3      DCL ISC_OPCODE UBIN (36) ;
      606     9244    3      DCL 1 ISC REDEF ISC_OPCODE,
      607     9245    3            2 OPCODE BIT (6) UNAL,
      608     9246    3            2 * UBIN (30) UNAL ;
      609     9247    3      DCL 1 WORD2  ALIGNED,
      610     9248    3            2 *    UBIN (18) UNAL,
      611     9249    3            2 ADR  UBIN (18) UNAL ;
      612     9250    3      DCL WORD2_ REDEF WORD2 UBIN (36) UNAL ;
      613     9251
      614     9252        /* Parameters to pass */
      615     9253
      616     9254           %MME ;
      617     9275           %MREG ;
      618     9297           %MME_INSTR$ ;
      619     9300           %RETURN_DELTA ;
      620     9303           %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:23   
      621     9304        /* Code */
      622     9305
      623     9306    3      ISC.OPCODE = %ISC_WRITE ;
      624     9307    3      DATA$ = ADDR(TOD$QUEUE.E.QENTRY(TOD$QUEUE.CURR_SERVICE)) ;
      625     9308    3      MME.WD_1 = ISC_OPCODE ;
      626     9309    3      DCW.ADR = DATA_PTR.ADR ;
      627     9310    3      DCWLIST$ = ADDR(DCW) ;
      628     9311    3      WORD2_ = MME.WD_2 ;
      629     9312    3      WORD2.ADR = DCWLIST_PTR.ADR ;
      630     9313    3      MME.WD_2 = WORD2_ ;
      631     9314    3      MME.INST.NO = %GEINOS ;
      632     9315    3      CALL TOG$GCOS_MMES(MME,MREG,MME_INSTR$,RETURN_DELTA) ;
      633     9316    3      RETURN ;
      634     9317
      635     9318    3   END TOD$INTERSLAVE_WRITE ;
      636     9319        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:24   
      637     9320        /*I* NAME:         TOD$POLTS_IO_DONE
      638     9321             INTERFACE:    TOP$POLTS_IO
      639     9322             INPUT:        A dispatcher queue entry.
      640     9323             OUTPUT:       TOP$EVENT_ID set.
      641     9324                           TOP$STATUS = 2 words of status from entry
      642     9325             DESCRIPTION:  The SYMDEFed variable TOP$EVENT_ID is
      643     9326                           set to the Event ID stored in the first word of
      644     9327                           the dispatcher queue entry and a special
      645     9328                           entry point in TOP$POLTS is called, TOP$POLTS_IO
      646     9329                           is called.  The Event ID identifies which of 8
      647     9330                           possible no wait I/O operations completed.
      648     9331                           TOP$POLTS_IO takes care of fetching the I/O
      649     9332                           status from the appropriate DCB, returning it to the
      650     9333                           test page and paying Slave Mode POLTS the
      651     9334                           Courtesy Call.
      652     9335
      653     9336                           Note that both POLTS and MOLTS I/O are treated
      654     9337                           the same at this point, and that the same
      655     9338                           completion processing routine is called for both.
      656     9339        */
      657     9340        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:25   
      658     9341    2   TOD$POLTS_IO_DONE: PROC ;
      659     9342
      660     9343    3      DCL DISPATCHER_ENTRY(0:2) UBIN(36) ;
      661     9344    3      DCL 1 Q_ENTRY REDEF DISPATCHER_ENTRY,
      662     9345    3            2 EVENT_ID UBIN(36),
      663     9346    3            2 * UBIN(36),
      664     9347    3            2 * UBIN(36) ;
      665     9348    3      DCL 1 STATUS,
      666     9349    3            2 WD1 UBIN(36),
      667     9350    3            2 WD2 UBIN(36) ;
      668     9351
      669     9352        /* Code */
      670     9353
      671     9354    3      DISPATCHER_ENTRY = TOD$QUEUE.E.QENTRY(TOD$QUEUE.CURR_SERVICE) ;
      672     9355    3      TOP$EVENT_ID = Q_ENTRY.EVENT_ID ;
      673     9356    3      STATUS.WD1 = DISPATCHER_ENTRY(1) ;
      674     9357    3      STATUS.WD2 = DISPATCHER_ENTRY(2) ;
      675     9358    3      TOP$STATUS = STATUS ;
      676     9359    3      CALL TOP$POLTS_IO(,,,) ;
      677     9360    3      RETURN ;
      678     9361
      679     9362    3   END TOD$POLTS_IO_DONE ;
      680     9363        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:26   
      681     9364        /*F*     NAME:     TOD$ADVANCE_QUEUE
      682     9365                 PURPOSE:  Advances the TOLTS Dispatcher Queue to point at the next
      683     9366                           pending queue entry, and decrament the entries counter.
      684     9367        */
      685     9368
      686     9369    2   TOD$ADVANCE_QUEUE: PROC ;
      687     9370
      688     9371        /* Code */
      689     9372
      690     9373    4      DO INHIBIT ;
      691     9374    4         TOD$QUEUE.ENTRIES = TOD$QUEUE.ENTRIES - 1 ;
      692     9375    4         IF TOD$QUEUE.CURR_SERVICE = 15
      693     9376    4         THEN TOD$QUEUE.CURR_SERVICE = 0 ;
      694     9377    4         ELSE TOD$QUEUE.CURR_SERVICE = TOD$QUEUE.CURR_SERVICE + 1 ;
      695     9378    4      END ;
      696     9379    3      RETURN ;
      697     9380
      698     9381    3   END TOD$ADVANCE_QUEUE ;
      699     9382    2   END TOD$SERVICE_ENTRY ;
      700     9383    1   END TOD$DISPATCHER ;

PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:27   
--  Include file information  --

   TO_PERR_C.:E05TOU  is referenced.
   TOT_RQSTS_E.:E05TOU  is referenced.
   TOT_TOLTS_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure TOD$DISPATCHER.

   Procedure TOD$DISPATCHER requires 525 words for executable code.
   Procedure TOD$DISPATCHER requires 38 words of local(AUTO) storage.

    No errors detected in file TOD$DISPATCHER.:E05TSI    .

PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:28   

 Object Unit name= TOD$DISPATCHER                             File name= TOD$DISPATCHER.:E05TOU
 UTS= JUL 30 '97 06:21:46.80 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     33     41  TOD$DISPATCHER
    2   Data  even  none   116    164  TOD$DISPATCHER
    3   Proc  even  none   525   1015  TOD$DISPATCHER
    4  RoData even  none    12     14  TOD$DISPATCHER

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std        3  TOD$DISPATCHER

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    1      2  TSNUMB                             1      4  PSNUMB
    2      1  TOD$QUEUE                          2    104  TOD$SPA$
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:29   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 TOX$SCREECH
         yes           Std       1 TOX$ERROR
 yes     yes           Std       7 TOL$GET_DECK
         yes           Std       0 TOQ$DEBUG
         yes           Std       1 TOT$SOLTS_SNUMB
         yes           Std       1 TOT$PACT_SNUMB
         yes           Std       4 TOG$GCOS_MMES
         yes           Std       4 TOP$POLTS_IO
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$JIT$                                TOF$BAR
     TOQ$DCP                               TOT$ECP                               TOP$EVENT_ID
     TOP$STATUS                            B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:30   


        1        1        /*M* TOD$DISPATCHER    TOLTS DISPATCHER program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*F* NAME:         TOD$DISPATCHER
       12       12             PURPOSE:      Either build or service dispatcher queue entries.
       13       13             DESCRIPTION:  Total On-Line Testing System Dispatcher
       14       14             LAST UPDATE:  03/05/85
       15       15             REFERENCE:    CP-6 Release C01A
       16       16                           Scott Sheppard
       17       17        */
       18       18
       19       19        TOD$DISPATCHER: PROC (REQUEST_TYPE, SERVICE_CODE, QUEUE_ENTRY) ;

     19  3 000000   000000 700200 xent  TOD$DISPATC* TSX0  ! X66_AUTO_3
         3 000001   000046 000003                    ZERO    38,3

       20       20
       21       21        /* Include Files */
       22       22
       23       23           %INCLUDE B$JIT ;
       24      626           %INCLUDE CP_6 ;
       25     6185           %INCLUDE CP_6_SUBS ;
       26     6725           %INCLUDE TOT_TOLTS_M ;
       27     7843           %INCLUDE TOT_RQSTS_E ;
       28     7885           %INCLUDE TO_PERR_C ;
       29     8470           %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:31   
       30     8471        /* Variables */
       31     8472
       32     8473    1      DCL REQUEST_TYPE UBIN(36) ;
       33     8474    1      DCL SERVICE_CODE UBIN(18) ;
       34     8475    1      DCL QUEUE_ENTRY  (0:2) UBIN(36) ;
       35     8476           %IS$ (STCLASS = CONSTANT) ;
       36     8490           %VLP_ERRCODE (FPTN = TOD_ERROR_CODE,
       37     8491                         FCG = 'TO',
       38     8492                         MID = 'D',
       39     8493                         SEV = 0) ;
       40     8538
       41     8539        /* External Variables */
       42     8540
       43     8541    1      DCL 1 TSNUMB CONSTANT SYMDEF DALIGNED,
       44     8542    1            2 *          BIT (36) UNAL INIT ('536246436300'O),
       45     8543    1            2 *          UBIN (36) UNAL INIT (0) ;
       46     8544    1      DCL 1 PSNUMB CONSTANT SYMDEF DALIGNED,
       47     8545    1            2 *          BIT (36) UNAL INIT ('534721236300'O),
       48     8546    1            2 *          UBIN (36) UNAL INIT (0) ;
       49     8547    1      DCL B$JIT$         PTR SYMREF ;
       50     8548           %TOD$QUEUE (STCLASS = "STATIC SYMDEF") ;
       51     8575           %TOF$BAR (STCLASS = SYMREF) ;
       52     8598           %TOQ$DCP (STCLASS = SYMREF) ;
       53     8630           %TOT$ECP (STCLASS = SYMREF) ;
       54     8679    1      DCL TOD$SPA$       PTR STATIC SYMDEF ;
       55     8680    1      DCL TOP$EVENT_ID   UBIN(36) SYMREF ;
       56     8681    1      DCL TOP$STATUS     BIT(72) SYMREF ;
       57     8682           %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:32   
       58     8683        /* External Entry Points */
       59     8684
       60     8685    1      DCL TOL$GET_DECK               ENTRY (7) ALTRET ;
       61     8686    1      DCL TOQ$DEBUG                  ENTRY ;
       62     8687    1      DCL TOG$GCOS_MMES              ENTRY (4) ;
       63     8688    1      DCL TOP$POLTS_IO               ENTRY (4) ;
       64     8689    1      DCL TOT$SOLTS_SNUMB            ENTRY (1) ;
       65     8690    1      DCL TOT$PACT_SNUMB             ENTRY (1) ;
       66     8691    1      DCL TOX$ERROR                  ENTRY (1) ;
       67     8692    1      DCL TOX$SCREECH                ENTRY (1) ;
       68     8693           %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:33   
       69     8694        /*D* NAME:         TOD$DISPATCHER
       70     8695             INTERFACE:    TOD$BUILD_ENTRY
       71     8696                           TOD$SERVICE_ENTRY
       72     8697             INPUT:        REQUEST_TYPE specifies what the dispatcher should
       73     8698                           do, either build a new entry or service the queue.
       74     8699                           SERVICE_CODE specifies what service code is to be
       75     8700                           put into the dispatcher queue entry if one is to
       76     8701                           be built.
       77     8702                           QUEUE_ENTRY is a 3 word entry to be put into the
       78     8703                           dispatcher queue entry if one is to be built.
       79     8704             OUTPUT:       A new dispatcher queue entry or a dispatcher entry
       80     8705                           serviced.
       81     8706             DESCRIPTION:  Using REQUEST_TYPE, one of 2 routines is called to
       82     8707                           either build a new dispatcher queue entry using
       83     8708                           information passed in the call (SERVICE_CODE and
       84     8709                           QUEUE_ENTRY), or to service the next entry in the
       85     8710                           dispatcher queue.
       86     8711        */
       87     8712
       88     8713        /* Code */
       89     8714
       90     8715    2      DO CASE (REQUEST_TYPE) ;

   8715  3 000002   200003 470500                    LDP0    @REQUEST_TYPE,,AUTO
         3 000003   000000 235100                    LDA     0,,PR0
         3 000004   000003 115007                    CMPA    3,DL
         3 000005   000007 602005 3                  TNC     s:8715+5,AL
         3 000006   000020 710000 3                  TRA     s:8721
         3 000007   000020 710000 3                  TRA     s:8721
         3 000010   000012 710000 3                  TRA     s:8717
         3 000011   000015 710000 3                  TRA     s:8719

       91     8716    2         CASE (%DRT_BUILD) ;

       92     8717    2            CALL TOD$BUILD_ENTRY ;

   8717  3 000012   000031 701000 3                  TSX1    TOD$BUILD_ENTRY
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:34   
         3 000013   000000 011000                    NOP     0
         3 000014   000030 710000 3                  TRA     s:8724

       93     8718    2         CASE (%DRT_SERVICE) ;

       94     8719    2            CALL TOD$SERVICE_ENTRY ;

   8719  3 000015   000077 701000 3                  TSX1    TOD$SERVICE_ENTRY
         3 000016   000000 011000                    NOP     0
         3 000017   000030 710000 3                  TRA     s:8724

       95     8720    2         CASE (ELSE) ;

       96     8721    2            TOD_ERROR_CODE.ERR# = %E$ILLREQTYP ;

   8721  3 000020   000000 236000 2                  LDQ     TOD_ERROR_CODE
         3 000021   000000 376000 4                  ANQ     0
         3 000022   000440 276007                    ORQ     288,DL
         3 000023   000000 756000 2                  STQ     TOD_ERROR_CODE

       97     8722    2            CALL TOX$SCREECH (TOD_ERROR_CODE) ;

   8722  3 000024   000001 630400 4                  EPPR0   1
         3 000025   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000026   000000 701000 xent               TSX1    TOX$SCREECH
         3 000027   000000 011000                    NOP     0

       98     8723    2      END ;

       99     8724    1      RETURN ;

   8724  3 000030   000000 702200 xent               TSX2  ! X66_ARET

      100     8725
      101     8726        /*END TOD$DISPATCHER*/
      102     8727        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:35   
      103     8728        /*I* NAME:         TOD$BUILD_ENTRY
      104     8729             INPUT:        Uses SERVICE_CODE and QUEUE_ENTRY.
      105     8730             OUTPUT:       Dispatcher queue has a new entry.
      106     8731             DESCRIPTION:  First, a check is made to make sure the dispatcher
      107     8732                           queue will not overflow.  A maximum of 16
      108     8733                           entries are allowed.
      109     8734
      110     8735                           Then the dispatcher queue entry is built in
      111     8736                           inhibited mode (so it cannot be interrupted),
      112     8737                           inserting SERVICE_CODE and QUEUE_ENTRY into the
      113     8738                           next available queue entry.
      114     8739        */
      115     8740
      116     8741    1   TOD$BUILD_ENTRY: PROC ;

   8741  3 000031   200006 741300       TOD$BUILD_E* STX1  ! @QUEUE_ENTRY+1,,AUTO

      117     8742
      118     8743        /* Code */
      119     8744
      120     8745    2      IF TOD$QUEUE.ENTRIES > 15

   8745  3 000032   000103 235000 2                  LDA     TOD$QUEUE+66
         3 000033   000020 115007                    CMPA    16,DL
         3 000034   000046 602000 3                  TNC     s:8751

      121     8746    3      THEN DO ;

      122     8747    3              TOD_ERROR_CODE.ERR# = %E$DISPFULL ;

   8747  3 000035   000000 236000 2                  LDQ     TOD_ERROR_CODE
         3 000036   000000 376000 4                  ANQ     0
         3 000037   000450 276007                    ORQ     296,DL
         3 000040   000000 756000 2                  STQ     TOD_ERROR_CODE

      123     8748    3              CALL TOX$SCREECH (TOD_ERROR_CODE) ;

PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:36   
   8748  3 000041   000001 630400 4                  EPPR0   1
         3 000042   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000043   000000 701000 xent               TSX1    TOX$SCREECH
         3 000044   000000 011000                    NOP     0

      124     8749    3           END /* THEN */ ;

   8749  3 000045   000075 710000 3                  TRA     s:8758

      125     8750    3      ELSE DO INHIBIT ;

      126     8751    3              TOD$QUEUE.E.SERV_CODE(TOD$QUEUE.NEXT_SLOT) = SERVICE_CODE ;

   8751  3 000046   000101 236200 2                  LDQ   ! TOD$QUEUE+64
         3 000047   000002 736200                    QLS   ! 2
         3 000050   200004 470700                    LDP0  ! @SERVICE_CODE,,AUTO
         3 000051   000000 620206                    EAX0  ! 0,QL
         3 000052   000000 236300                    LDQ   ! 0,,PR0
         3 000053   000022 772200                    QRL   ! 18
         3 000054   000001 756210 2                  STQ   ! TOD$QUEUE,X0

      127     8752    3              TOD$QUEUE.E.QENTRY(TOD$QUEUE.NEXT_SLOT) = QUEUE_ENTRY ;

   8752  3 000055   000101 235200 2                  LDA   ! TOD$QUEUE+64
         3 000056   000004 735200                    ALS   ! 4
         3 000057   200005 471700                    LDP1  ! @QUEUE_ENTRY,,AUTO
         3 000060   000005 100700                    MLR   ! fill='000'O
         3 000061   100000 000014                    ADSC9   0,,PR1                   cn=0,n=12
         3 000062   000002 000014 2                  ADSC9   TOD$QUEUE+1,A            cn=0,n=12

      128     8753    3              TOD$QUEUE.ENTRIES = TOD$QUEUE.ENTRIES + 1 ;

   8753  3 000063   000103 235200 2                  LDA   ! TOD$QUEUE+66
         3 000064   000001 035207                    ADLA  ! 1,DL
         3 000065   000103 755200 2                  STA   ! TOD$QUEUE+66

      129     8754    3              IF TOD$QUEUE.NEXT_SLOT = 15
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:37   

   8754  3 000066   000101 236200 2                  LDQ   ! TOD$QUEUE+64
         3 000067   000017 116207                    CMPQ  ! 15,DL
         3 000070   000073 601200 3                  TNZ   ! s:8756

      130     8755    3              THEN TOD$QUEUE.NEXT_SLOT = 0 ;

   8755  3 000071   000101 450200 2                  STZ   ! TOD$QUEUE+64
         3 000072   000075 710200 3                  TRA   ! s:8758

      131     8756    3              ELSE TOD$QUEUE.NEXT_SLOT = TOD$QUEUE.NEXT_SLOT + 1 ;

   8756  3 000073   000001 036207                    ADLQ  ! 1,DL
         3 000074   000101 756200 2                  STQ   ! TOD$QUEUE+64

      132     8757    3           END /* INHIBIT */ ;

      133     8758    2      RETURN ;

   8758  3 000075   200006 221300                    LDX1  ! @QUEUE_ENTRY+1,,AUTO
         3 000076   000001 702211                    TSX2  ! 1,X1

      134     8759
      135     8760    2   END TOD$BUILD_ENTRY ;
      136     8761        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:38   
      137     8762        /*I* NAME:         TOD$SERVICE_ENTRY
      138     8763             INTERFACE:    TOD$ADVANCE_QUEUE
      139     8764                           TOD$INIT_SUBEXEC
      140     8765                           TOD$INTERSLAVE_WRITE
      141     8766                           TOD$POLTS_IO_DONE(called for both POLTS and MOLTS I/O)
      142     8767             INPUT:        None.
      143     8768             OUTPUT:       A dispatcher service complete.
      144     8769             DESCRIPTION:  First, SERVICE_IN_PROGRESS is set to a 1 so that
      145     8770                           if this dispatcher is entered again before it is
      146     8771                           done, TOLTS will quit.  It is an error condition
      147     8772                           if the dispatcher is called recursively.
      148     8773
      149     8774                           If there is nothing to do, (QUEUE_ENTRIES = 0), an
      150     8775                           immediate return is made to the caller.
      151     8776                           Otherwise, based on SERVICE_CODE in the dispatcher
      152     8777                           queue entry, one of the service routines is called.
      153     8778                           All except TOD$INIT_SUBEXEC return here for return to
      154     8779                           the caller.  TOD$INIT_SUBEXEC does a one way
      155     8780                           transfer off to the subexec (and yes, leaving a
      156     8781                           auto frame lying around, which is ok since there will
      157     8782                           only be one).
      158     8783
      159     8784                           Each of the service routines does its service,
      160     8785                           the dispatcher queue pointers are updated, the
      161     8786                           SERVICE_IN_PROGRESS flag reset and return made to
      162     8787                           the main level.
      163     8788        */
      164     8789
      165     8790    1   TOD$SERVICE_ENTRY: PROC ;

   8790  3 000077   200006 741300       TOD$SERVICE* STX1  ! @QUEUE_ENTRY+1,,AUTO

      166     8791
      167     8792    2      DCL SERVICE_IN_PROGRESS BIT (1) STATIC INIT (%FALSE) ;
      168     8793           %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:39   
      169     8794        /* Code */
      170     8795
      171     8796    2      IF SERVICE_IN_PROGRESS

   8796  3 000100   000105 234000 2                  SZN     SERVICE_IN_PROGRESS
         3 000101   000113 605000 3                  TPL     s:8802

      172     8797    3      THEN DO ;

      173     8798    3              TOD_ERROR_CODE.ERR# = %E$DISPBUSY ;

   8798  3 000102   000000 236000 2                  LDQ     TOD_ERROR_CODE
         3 000103   000000 376000 4                  ANQ     0
         3 000104   000460 276007                    ORQ     304,DL
         3 000105   000000 756000 2                  STQ     TOD_ERROR_CODE

      174     8799    3              CALL TOX$SCREECH (TOD_ERROR_CODE) ;

   8799  3 000106   000001 630400 4                  EPPR0   1
         3 000107   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000110   000000 701000 xent               TSX1    TOX$SCREECH
         3 000111   000000 011000                    NOP     0

      175     8800    3           END /* THEN */ ;

   8800  3 000112   000162 710000 3                  TRA     s:8823

      176     8801    3      ELSE DO ;

      177     8802    3              SERVICE_IN_PROGRESS = %TRUE ;

   8802  3 000113   400000 236003                    LDQ     -131072,DU
         3 000114   000105 756000 2                  STQ     SERVICE_IN_PROGRESS

      178     8803    3              IF TOD$QUEUE.ENTRIES = 0

   8803  3 000115   000103 235000 2                  LDA     TOD$QUEUE+66
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:40   
         3 000116   000161 600000 3                  TZE     s:8821

      179     8804    3              THEN /* Do Nothing */ ;
      180     8805    4              ELSE DO ;

      181     8806    5                      DO CASE (TOD$QUEUE.E.SERV_CODE(TOD$QUEUE.CURR_SERVICE));

   8806  3 000117   000102 235000 2                  LDA     TOD$QUEUE+65
         3 000120   000002 735000                    ALS     2
         3 000121   000001 235005 2                  LDA     TOD$QUEUE,AL
         3 000122   000006 115007                    CMPA    6,DL
         3 000123   000125 602005 3                  TNC     s:8806+6,AL
         3 000124   000147 710000 3                  TRA     s:8816
         3 000125   000147 710000 3                  TRA     s:8816
         3 000126   000133 710000 3                  TRA     s:8808
         3 000127   000141 710000 3                  TRA     s:8812
         3 000130   000144 710000 3                  TRA     s:8814
         3 000131   000147 710000 3                  TRA     s:8816
         3 000132   000144 710000 3                  TRA     s:8814

      182     8807    5                         CASE (%DSC_INIT) ;

      183     8808    5                            SERVICE_IN_PROGRESS = %FALSE ;

   8808  3 000133   000105 450000 2                  STZ     SERVICE_IN_PROGRESS

      184     8809    5                            CALL TOD$ADVANCE_QUEUE ;

   8809  3 000134   001001 701000 3                  TSX1    TOD$ADVANCE_QUEUE
         3 000135   000000 011000                    NOP     0

      185     8810    5                            CALL TOD$INIT_SUBEXEC ;

   8810  3 000136   000164 701000 3                  TSX1    TOD$INIT_SUBEXEC
         3 000137   000000 011000                    NOP     0
         3 000140   000157 710000 3                  TRA     s:8819

PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:41   
      186     8811    5                         CASE (%DSC_ISC) ;

      187     8812    5                            CALL TOD$INTERSLAVE_WRITE ;

   8812  3 000141   000712 701000 3                  TSX1    TOD$INTERSLAVE_WRITE
         3 000142   000000 011000                    NOP     0
         3 000143   000157 710000 3                  TRA     s:8819

      188     8813    5                         CASE (%DSC_PIO,%DSC_MIO) ;

      189     8814    5                            CALL TOD$POLTS_IO_DONE ;

   8814  3 000144   000755 701000 3                  TSX1    TOD$POLTS_IO_DONE
         3 000145   000000 011000                    NOP     0
         3 000146   000157 710000 3                  TRA     s:8819

      190     8815    5                         CASE (ELSE) ;

      191     8816    5                            TOD_ERROR_CODE.ERR# = %E$BADSRVCODE ;

   8816  3 000147   000000 236000 2                  LDQ     TOD_ERROR_CODE
         3 000150   000000 376000 4                  ANQ     0
         3 000151   000470 276007                    ORQ     312,DL
         3 000152   000000 756000 2                  STQ     TOD_ERROR_CODE

      192     8817    5                            CALL TOX$SCREECH (TOD_ERROR_CODE) ;

   8817  3 000153   000001 630400 4                  EPPR0   1
         3 000154   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000155   000000 701000 xent               TSX1    TOX$SCREECH
         3 000156   000000 011000                    NOP     0

      193     8818    5                      END /* CASE */ ;

      194     8819    4                      CALL TOD$ADVANCE_QUEUE ;

   8819  3 000157   001001 701000 3                  TSX1    TOD$ADVANCE_QUEUE
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:42   
         3 000160   000000 011000                    NOP     0

      195     8820    4                   END /* ELSE */ ;

      196     8821    3              SERVICE_IN_PROGRESS = %FALSE ;

   8821  3 000161   000105 450000 2                  STZ     SERVICE_IN_PROGRESS

      197     8822    3           END /* ELSE */ ;

      198     8823    2      RETURN ;

   8823  3 000162   200006 221300                    LDX1  ! @QUEUE_ENTRY+1,,AUTO
         3 000163   000001 702211                    TSX2  ! 1,X1

      199     8824
      200     8825        /* END TOD$SERVICE_ENTRY */
      201     8826        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:43   
      202     8827        /*I* NAME:         TOD$INIT_SUBEXEC
      203     8828             INTERFACE:    Transfers to a subexec,
      204     8829                             POLTS
      205     8830                             SOLTS
      206     8831                             COLTS
      207     8832                             MOLTS
      208     8833             INPUT:        Uses TOT$ECP.SUBEXEC.CURRENT
      209     8834             OUTPUT:       None
      210     8835             DESCRIPTION:  Allocates additional memory dynamically for the
      211     8836                           requested subexec and reads in the subexec of the
      212     8837                           T&D Deckfile.  There is a fair amount of kludgin
      213     8838                           around the accomodate the calling sequences
      214     8839                           required to read the subexec off the Deckfile.
      215     8840
      216     8841                           Using the current subexec identifier in
      217     8842                           TOT$ECP.SUBEXEC.CURRENT, the approximate size of the
      218     8843                           subexec is fetched from a table initialized at
      219     8844                           compile time with the reasonable guesses of the
      220     8845                           subexec sizes.  LOAD_ADDRESS is calculated from
      221     8846                           B$JIT.TDP to yield the address where the subexec
      222     8847                           can be loaded at.  M$GDP is called to get more
      223     8848                           memory, and TOF$BAR.FULL and TOF$BAR.CURRENT
      224     8849                           are updated.
      225     8850
      226     8851                           We are now ready to read the subexec in from the
      227     8852                           Deckfile.  DCWLIST is built to contain the number of
      228     8853                           DCWs required to load the subexec.  Also a read
      229     8854                           key is built for the read.  Finally,TOL$GET_DECK
      230     8855                           is called to read in the subexec.  If there is
      231     8856                           anything wrong, it ALTRETURNs with an error code
      232     8857                           in ERROR_CODE.  At the moment, the list of the
      233     8858                           error codes is not available.  If there is a
      234     8859                           problem in this area, too bad.
      235     8860
      236     8861                           Once the subexec is loaded, a pointer is built
      237     8862                           to its Slave Prefix Area for use later.  The pointer
      238     8863                           is TOT$SPA$.
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:44   
      239     8864
      240     8865                           The entry pointer SUBEXEC$ is built to the entry
      241     8866                           point for the subexec.  It is assumed that all
      242     8867                           entry points will be a location 0 of the module,
      243     8868                           i.e., LOAD_ADDRESS plus 72 words to account for
      244     8869                           the Slave Prefix Area.  CALL SUBEXEC$ transfers
      245     8870                            control to the subexec, leaving the auto frame
      246     8871                           for the dispatcher.  It will go away later as
      247     8872                           UNWINDS are done in the simulation of GELBAR.
      248     8873
      249     8874        */
      250     8875        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:45   
      251     8876    2   TOD$INIT_SUBEXEC: PROC ;

   8876  3 000164   200010 741300       TOD$INIT_SU* STX1  ! @QUEUE_ENTRY+3,,AUTO

      252     8877
      253     8878    3      DCL 1 KEY_VALUE STATIC,
      254     8879    3            2 SIZE  UBIN BYTE UNAL INIT (23),
      255     8880    3            2 VALUE CHAR (23) CALIGNED ;
      256     8881    3      DCL SUBEXEC_SIZE UBIN WORD ALIGNED ;
      257     8882    3      DCL DCWLIST$     PTR ALIGNED ;
      258     8883    3      DCL LOAD_WORDS   UBIN WORD ALIGNED ;
      259     8884    3      DCL SUBEXEC$     EPTR ALIGNED ;
      260     8885
      261     8886        /* Code */
      262     8887
      263     8888    3      TOT$ECP.SUBEXEC.ADDRESS = (B$JIT$ -> B$JIT.TDP - 64) * 1024 ;

   8888  3 000165   000000 470400 xsym               LDP0    B$JIT$
         3 000166   000204 236100                    LDQ     132,,PR0
         3 000167   000010 772000                    QRL     8
         3 000170   000002 376000 4                  ANQ     2
         3 000171   200000 136007                    SBLQ    65536,DL
         3 000172   000010 756000 xsym               STQ     TOT$ECP+8

      264     8889    3      CALL GET_SUBEXEC_SIZE (SUBEXEC_SIZE) ;

   8889  3 000173   200011 631500                    EPPR1   SUBEXEC_SIZE,,AUTO
         3 000174   200017 451500                    STP1    MME+2,,AUTO
         3 000175   000266 701000 3                  TSX1    GET_SUBEXEC_SIZE
         3 000176   000000 011000                    NOP     0

      265     8890    3      CALL GET_MORE_PAGES (SUBEXEC_SIZE, LOAD_WORDS) ;

   8890  3 000177   200013 630500                    EPPR0   LOAD_WORDS,,AUTO
         3 000200   200020 450500                    STP0    @SUBEXEC_PTR+1,,AUTO
         3 000201   200011 631500                    EPPR1   SUBEXEC_SIZE,,AUTO
         3 000202   200017 451500                    STP1    MME+2,,AUTO
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:46   
         3 000203   000323 701000 3                  TSX1    GET_MORE_PAGES
         3 000204   000000 011000                    NOP     0

      266     8891    3      CALL SET_BARS (SUBEXEC_SIZE) ;

   8891  3 000205   200011 630500                    EPPR0   SUBEXEC_SIZE,,AUTO
         3 000206   200017 450500                    STP0    MME+2,,AUTO
         3 000207   000372 701000 3                  TSX1    SET_BARS
         3 000210   000000 011000                    NOP     0

      267     8892    3      CALL SETUP_DCW_LIST (SUBEXEC_SIZE, DCWLIST$, LOAD_WORDS) ;

   8892  3 000211   200013 630500                    EPPR0   LOAD_WORDS,,AUTO
         3 000212   200021 450500                    STP0    @KEY_VALUE+1,,AUTO
         3 000213   200012 631500                    EPPR1   DCWLIST$,,AUTO
         3 000214   200020 451500                    STP1    @SUBEXEC_PTR+1,,AUTO
         3 000215   200011 633500                    EPPR3   SUBEXEC_SIZE,,AUTO
         3 000216   200017 453500                    STP3    MME+2,,AUTO
         3 000217   000421 701000 3                  TSX1    SETUP_DCW_LIST
         3 000220   000000 011000                    NOP     0

      268     8893    3      CALL GET_SUBEXEC_KEY (KEY_VALUE.VALUE) ;

   8893  3 000221   000003 236000 4                  LDQ     3
         3 000222   200017 756100                    STQ     MME+2,,AUTO
         3 000223   000516 701000 3                  TSX1    GET_SUBEXEC_KEY
         3 000224   000000 011000                    NOP     0

      269     8894    3      CALL LOAD_SUBEXEC (SUBEXEC_SIZE, KEY_VALUE, DCWLIST$) ALTRET (LOAD_ERROR) ;

   8894  3 000225   200012 630500                    EPPR0   DCWLIST$,,AUTO
         3 000226   200021 450500                    STP0    @KEY_VALUE+1,,AUTO
         3 000227   000004 236000 4                  LDQ     4
         3 000230   200020 756100                    STQ     @SUBEXEC_PTR+1,,AUTO
         3 000231   200011 631500                    EPPR1   SUBEXEC_SIZE,,AUTO
         3 000232   200017 451500                    STP1    MME+2,,AUTO
         3 000233   000557 701000 3                  TSX1    LOAD_SUBEXEC
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:47   
         3 000234   000255 702000 3                  TSX2    LOAD_ERROR

      270     8895    3      CALL SAVE_SUBEXEC_DEBUG_INFO ;

   8895  3 000235   000634 701000 3                  TSX1    SAVE_SUBEXEC_DEBUG_INFO
         3 000236   000000 011000                    NOP     0

      271     8896    3      TOD$SPA$ = PINCRW (IS$, TOT$ECP.SUBEXEC.ADDRESS) ;

   8896  3 000237   000010 236000 xsym               LDQ     TOT$ECP+8
         3 000240   000022 736000                    QLS     18
         3 000241   000000 036000 1                  ADLQ    FPTN_
         3 000242   000104 756000 2                  STQ     TOD$SPA$

      272     8897    3      CALL SET_SUBEXEC$ (SUBEXEC$) ;

   8897  3 000243   200014 630500                    EPPR0   SUBEXEC$,,AUTO
         3 000244   200017 450500                    STP0    MME+2,,AUTO
         3 000245   000656 701000 3                  TSX1    SET_SUBEXEC$
         3 000246   000000 011000                    NOP     0

      273     8898    3      CALL SUBEXEC$ ;

   8898  3 000247   200014 220100                    LDX0    SUBEXEC$,,AUTO
         3 000250   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000251   000000 701010                    TSX1    0,X0
         3 000252   000000 011000                    NOP     0

      274     8899    3      RETURN ;

   8899  3 000253   200010 221300                    LDX1  ! @QUEUE_ENTRY+3,,AUTO
         3 000254   000001 702211                    TSX2  ! 1,X1

      275     8900
      276     8901    3   LOAD_ERROR:
      277     8902    3      TOD_ERROR_CODE.ERR# = %E$LOADERR ;

PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:48   
   8902  3 000255   000000 236000 2     LOAD_ERROR   LDQ     TOD_ERROR_CODE
         3 000256   000000 376000 4                  ANQ     0
         3 000257   000500 276007                    ORQ     320,DL
         3 000260   000000 756000 2                  STQ     TOD_ERROR_CODE

      278     8903    3      CALL TOX$ERROR (TOD_ERROR_CODE) ;

   8903  3 000261   000001 630400 4                  EPPR0   1
         3 000262   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000263   000000 701000 xent               TSX1    TOX$ERROR
         3 000264   000000 011000                    NOP     0
         3 000265   000710 710000 3                  TRA     s:9203

      279     8904
      280     8905        /* END TOD$INIT_SUBEXEC */
      281     8906        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:49   
      282     8907        /*I* NAME:         GET_SUBEXEC_SIZE
      283     8908             PURPOSE:      Returns Subexecutive Size
      284     8909             DESCRIPTION:  This procedure returns the size of the TOLTS subexecutive.
      285     8910        */
      286     8911
      287     8912    3   GET_SUBEXEC_SIZE: PROC (SUBEXEC_SIZE) ;

   8912  3 000266   200016 741300       GET_SUBEXEC* STX1  ! MME+1,,AUTO

      288     8913
      289     8914    4      DCL SUBEXEC_SIZE UBIN WORD ALIGNED ;
      290     8915    4      DCL 1 SUBEXEC_SIZES CONSTANT,
      291     8916    4            2 POLTS UBIN(36) INIT (17),
      292     8917    4            2 SOLTS UBIN(36) INIT (39),
      293     8918    4            2 COLTS UBIN(36) INIT (15),
      294     8919    4            2 MOLTS UBIN(36) INIT (15) ;
      295     8920
      296     8921        /* Code */
      297     8922
      298     8923    5      DO CASE (TOT$ECP.SUBEXEC.CURRENT) ;

   8923  3 000267   000007 235000 xsym               LDA     TOT$ECP+7
         3 000270   000010 135007                    SBLA    8,DL
         3 000271   000006 115007                    CMPA    6,DL
         3 000272   000274 602005 3                  TNC     s:8923+5,AL
         3 000273   000321 710000 3                  TRA     s:8933
         3 000274   000312 710000 3                  TRA     s:8929
         3 000275   000316 710000 3                  TRA     s:8931
         3 000276   000302 710000 3                  TRA     s:8925
         3 000277   000306 710000 3                  TRA     s:8927
         3 000300   000306 710000 3                  TRA     s:8927
         3 000301   000306 710000 3                  TRA     s:8927

      299     8924    5         CASE (%POLTS) ;

      300     8925    5            SUBEXEC_SIZE = SUBEXEC_SIZES.POLTS ;

PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:50   
   8925  3 000302   200017 470500                    LDP0    @SUBEXEC_SIZE,,AUTO
         3 000303   000006 236000 1                  LDQ     SUBEXEC_SIZES
         3 000304   000000 756100                    STQ     0,,PR0
         3 000305   000321 710000 3                  TRA     s:8933

      301     8926    5         CASE (%SOLTS, %PACT, %SLTA) ;

      302     8927    5            SUBEXEC_SIZE = SUBEXEC_SIZES.SOLTS ;

   8927  3 000306   200017 470500                    LDP0    @SUBEXEC_SIZE,,AUTO
         3 000307   000007 236000 1                  LDQ     SUBEXEC_SIZES+1
         3 000310   000000 756100                    STQ     0,,PR0
         3 000311   000321 710000 3                  TRA     s:8933

      303     8928    5         CASE (%COLTS) ;

      304     8929    5            SUBEXEC_SIZE = SUBEXEC_SIZES.COLTS ;

   8929  3 000312   200017 470500                    LDP0    @SUBEXEC_SIZE,,AUTO
         3 000313   000010 236000 1                  LDQ     SUBEXEC_SIZES+2
         3 000314   000000 756100                    STQ     0,,PR0
         3 000315   000321 710000 3                  TRA     s:8933

      305     8930    5         CASE (%MOLTS) ;

      306     8931    5            SUBEXEC_SIZE = SUBEXEC_SIZES.MOLTS ;

   8931  3 000316   200017 470500                    LDP0    @SUBEXEC_SIZE,,AUTO
         3 000317   000011 236000 1                  LDQ     SUBEXEC_SIZES+3
         3 000320   000000 756100                    STQ     0,,PR0

      307     8932    5      END /* CASE */ ;

      308     8933    4      RETURN ;

   8933  3 000321   200016 221300                    LDX1  ! MME+1,,AUTO
         3 000322   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:51   

      309     8934
      310     8935    4   END GET_SUBEXEC_SIZE ;
      311     8936        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:52   
      312     8937        /*I* NAME:         GET_MORE_PAGES
      313     8938             PURPOSE:      Acquires Memory
      314     8939             DESCRIPTION:  This procedure acquires enough additional
      315     8940                           dynamic pages to load the subexecutive.
      316     8941        */
      317     8942
      318     8943    3   GET_MORE_PAGES: PROC (SUBEXEC_SIZE, LOAD_WORDS) ;

   8943  3 000323   200016 741300       GET_MORE_PA* STX1  ! MME+1,,AUTO

      319     8944
      320     8945    4      DCL SUBEXEC_SIZE  UBIN WORD ALIGNED ;
      321     8946    4      DCL LOAD_WORDS    UBIN WORD ALIGNED ;
      322     8947    4      DCL LOAD$         PTR ALIGNED ;
      323     8948    4      DCL 1 LOAD_ REDEF LOAD$ ALIGNED,
      324     8949    4            2 ADDRESS   UBIN HALF UNAL,
      325     8950    4            2 SEGID     UBIN HALF UNAL ;
      326     8951    4      DCL LOAD_WORD     UBIN WORD BASED ALIGNED ;
      327     8952    4      DCL LAST_WORD     UBIN WORD ALIGNED ;
      328     8953           %FPT_GDP (FPTN = GDP_FPT) ;
      329     8967
      330     8968        /* Code */
      331     8969
      332     8970           /* Get the dynamic pages from the operating system. */
      333     8971    4      TOT$ECP.DYNAMIC_PAGE_COUNT = TOT$ECP.DYNAMIC_PAGE_COUNT + SUBEXEC_SIZE ;

   8971  3 000324   200017 470500                    LDP0    @SUBEXEC_SIZE,,AUTO
         3 000325   000006 236000 xsym               LDQ     TOT$ECP+6
         3 000326   000000 036100                    ADLQ    0,,PR0
         3 000327   000006 756000 xsym               STQ     TOT$ECP+6

      334     8972    4      GDP_FPT.V.PAGES# = SUBEXEC_SIZE ;

   8972  3 000330   000000 235100                    LDA     0,,PR0
         3 000331   000120 755000 2                  STA     GDP_FPT+4

      335     8973    4      CALL M$GDP (GDP_FPT) ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:53   

   8973  3 000332   000114 630400 2                  EPPR0   GDP_FPT
         3 000333   030003 713400                    CLIMB   12291
         3 000334   400400 401760                    pmme    nvectors=2

      336     8974
      337     8975           /* Zero the pages for protection. */
      338     8976    4      LOAD_.SEGID = %IS_SEGID ;

   8976  3 000335   006000 220003                    LDX0    3072,DU
         3 000336   200021 440100                    SXL0    LOAD$,,AUTO

      339     8977    4      LAST_WORD = TOT$ECP.SUBEXEC.ADDRESS + (SUBEXEC_SIZE * 1024) - 1 ;

   8977  3 000337   200017 470500                    LDP0    @SUBEXEC_SIZE,,AUTO
         3 000340   000000 236100                    LDQ     0,,PR0
         3 000341   000012 736000                    QLS     10
         3 000342   000010 036000 xsym               ADLQ    TOT$ECP+8
         3 000343   000001 136007                    SBLQ    1,DL
         3 000344   200022 756100                    STQ     LAST_WORD,,AUTO

      340     8978    5      DO LOAD_.ADDRESS = TOT$ECP.SUBEXEC.ADDRESS TO LAST_WORD ;

   8978  3 000345   000010 721000 xsym               LXL1    TOT$ECP+8
         3 000346   200021 741100                    STX1    LOAD$,,AUTO
         3 000347   000355 710000 3                  TRA     s:8980+3

      341     8979    5         LOAD$ -> LOAD_WORD = 0 ;

   8979  3 000350   200021 470500                    LDP0    LOAD$,,AUTO
         3 000351   000000 450100                    STZ     0,,PR0

      342     8980    5      END /* DO */ ;

   8980  3 000352   200021 220100                    LDX0    LOAD$,,AUTO
         3 000353   000001 621010                    EAX1    1,X0
         3 000354   200021 741100                    STX1    LOAD$,,AUTO
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:54   
         3 000355   200021 236100                    LDQ     LOAD$,,AUTO
         3 000356   000022 772000                    QRL     18
         3 000357   200022 116100                    CMPQ    LAST_WORD,,AUTO
         3 000360   000350 602000 3                  TNC     s:8979
         3 000361   000350 600000 3                  TZE     s:8979

      343     8981    4      LOAD_WORDS = (SUBEXEC_SIZE * 1024) - %SPA_LGTH ;

   8981  3 000362   200017 470500                    LDP0    @SUBEXEC_SIZE,,AUTO
         3 000363   200020 471500                    LDP1    @LOAD_WORDS,,AUTO
         3 000364   000000 235100                    LDA     0,,PR0
         3 000365   000012 735000                    ALS     10
         3 000366   000110 135007                    SBLA    72,DL
         3 000367   100000 755100                    STA     0,,PR1

      344     8982    4      RETURN ;

   8982  3 000370   200016 221300                    LDX1  ! MME+1,,AUTO
         3 000371   000001 702211                    TSX2  ! 1,X1

      345     8983
      346     8984    4   END GET_MORE_PAGES ;
      347     8985        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:55   
      348     8986        /*I* NAME:         SET_BARS
      349     8987             PURPOSE:      Sets Base Address Registers
      350     8988             DESCRIPTION:  This procedure sets the base address registers
      351     8989                           in conjunction with the subexec size.
      352     8990        */
      353     8991
      354     8992    3   SET_BARS: PROC (SUBEXEC_SIZE) ;

   8992  3 000372   200016 741300       SET_BARS     STX1  ! MME+1,,AUTO

      355     8993
      356     8994    4      DCL SUBEXEC_SIZE UBIN WORD ALIGNED ;
      357     8995
      358     8996        /* Code */
      359     8997
      360     8998    4      TOF$BAR.FULL.BASE = 0 ;

   8998  3 000373   000000 236003                    LDQ     0,DU
         3 000374   000000 552010 xsym               STBQ    TOF$BAR,'10'O

      361     8999    5      DO CASE (TOT$ECP.SUBEXEC.CURRENT) ;

   8999  3 000375   000007 235000 xsym               LDA     TOT$ECP+7
         3 000376   000013 135007                    SBLA    11,DL
         3 000377   000003 115007                    CMPA    3,DL
         3 000400   000402 602005 3                  TNC     s:8999+5,AL
         3 000401   000412 710000 3                  TRA     s:9003
         3 000402   000405 710000 3                  TRA     s:9001
         3 000403   000405 710000 3                  TRA     s:9001
         3 000404   000405 710000 3                  TRA     s:9001

      362     9000    5         CASE (%SOLTS, %PACT, %SLTA) ;

      363     9001    5            TOF$BAR.FULL.SIZE = SUBEXEC_SIZE * 2 ; /* Was '*4', STAR 24397 */

   9001  3 000405   200017 470500                    LDP0    @SUBEXEC_SIZE,,AUTO
         3 000406   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:56   
         3 000407   000001 736000                    QLS     1
         3 000410   000000 552004 xsym               STBQ    TOF$BAR,'04'O
         3 000411   000416 710000 3                  TRA     s:9005

      364     9002    5         CASE (ELSE) ;

      365     9003    5            TOF$BAR.FULL.SIZE = SUBEXEC_SIZE * 2 ;

   9003  3 000412   200017 470500                    LDP0    @SUBEXEC_SIZE,,AUTO
         3 000413   000000 236100                    LDQ     0,,PR0
         3 000414   000001 736000                    QLS     1
         3 000415   000000 552004 xsym               STBQ    TOF$BAR,'04'O

      366     9004    5      END /* CASE */ ;

      367     9005    4      TOF$BAR.CURRENT = TOF$BAR.FULL ;

   9005  3 000416   000000 720000 xsym               LXL0    TOF$BAR
         3 000417   000000 740000 xsym               STX0    TOF$BAR

      368     9006    4      RETURN ;

   9006  3 000420   000001 702211                    TSX2  ! 1,X1

      369     9007
      370     9008    4   END SET_BARS ;
      371     9009        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:57   
      372     9010        /*I* NAME:         SETUP_DCW_LIST
      373     9011             PURPOSE:      Sets up a DCW list for the Subexec
      374     9012             DESCRIPTION:  This procedure sets up a dcw list of 4k blocks
      375     9013                           for the TOLTS subexecutive to be loaded.
      376     9014        */
      377     9015
      378     9016    3   SETUP_DCW_LIST: PROC (SUBEXEC_SIZE, DCWLIST$, LOAD_WORDS) ;

   9016  3 000421   200016 741300       SETUP_DCW_L* STX1  ! MME+1,,AUTO

      379     9017
      380     9018    4      DCL SUBEXEC_SIZE               UBIN WORD ALIGNED ;
      381     9019    4      DCL DCWLIST$                   PTR ALIGNED ;
      382     9020    4      DCL LOAD_WORDS                 UBIN WORD ALIGNED ;
      383     9021    4      DCL I                          UBIN WORD ALIGNED ;
      384     9022    4      DCL LAST_DCW                   UBIN WORD ALIGNED ;
      385     9023    4      DCL 1 DCWLIST (0:20) STATIC ALIGNED,
      386     9024    4            2 ADDRESS                UBIN (18) UNAL,
      387     9025    4            2 CHAR_ADDRESS           UBIN (3)  UNAL,
      388     9026    4            2 *                      UBIN (1)  UNAL,
      389     9027    4            2 TYPE                   UBIN (2)  UNAL,
      390     9028    4            2 WORD_COUNT             UBIN (12) UNAL ;
      391     9029           %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:58   
      392     9030        /* Code */
      393     9031
      394     9032    4      LAST_DCW = LOAD_WORDS / 4096 ;

   9032  3 000422   200021 470500                    LDP0    @LOAD_WORDS,,AUTO
         3 000423   000000 236100                    LDQ     0,,PR0
         3 000424   000014 772000                    QRL     12
         3 000425   200023 756100                    STQ     LAST_DCW,,AUTO

      395     9033    4      IF LAST_DCW > 20

   9033  3 000426   000025 116007                    CMPQ    21,DL
         3 000427   000441 602000 3                  TNC     s:9039

      396     9034    5      THEN DO ;

      397     9035    5              TOD_ERROR_CODE.ERR# = %E$BADSIZE ;

   9035  3 000430   000000 236000 2                  LDQ     TOD_ERROR_CODE
         3 000431   000000 376000 4                  ANQ     0
         3 000432   000510 276007                    ORQ     328,DL
         3 000433   000000 756000 2                  STQ     TOD_ERROR_CODE

      398     9036    5              CALL TOX$ERROR (TOD_ERROR_CODE) ;

   9036  3 000434   000001 630400 4                  EPPR0   1
         3 000435   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000436   000000 701000 xent               TSX1    TOX$ERROR
         3 000437   000000 011000                    NOP     0

      399     9037    5           END /* THEN */ ;

   9037  3 000440   000514 710000 3                  TRA     s:9053

      400     9038    5      ELSE DO ;

      401     9039    5              DCWLIST = '0'B ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:59   

   9039  3 000441   000000 100400                    MLR     fill='000'O
         3 000442   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         3 000443   000122 000124 2                  ADSC9   DCWLIST                  cn=0,n=84

      402     9040    5              DCWLIST.ADDRESS(0) = TOT$ECP.SUBEXEC.ADDRESS ;

   9040  3 000444   000010 720000 xsym               LXL0    TOT$ECP+8
         3 000445   000122 740000 2                  STX0    DCWLIST

      403     9041    5              DCWLIST.TYPE(0) = %IOTP ;

   9041  3 000446   000122 236000 2                  LDQ     DCWLIST
         3 000447   000005 376000 4                  ANQ     5
         3 000450   010000 276007                    ORQ     4096,DL
         3 000451   000122 756000 2                  STQ     DCWLIST

      404     9042    6              DO I = 1 TO LAST_DCW - 1 ;

   9042  3 000452   000001 235007                    LDA     1,DL
         3 000453   200022 755100                    STA     I,,AUTO
         3 000454   000470 710000 3                  TRA     s:9045+3

      405     9043    6                 DCWLIST.ADDRESS(I) = DCWLIST.ADDRESS(I-1) + 4096 ;

   9043  3 000455   200022 720100                    LXL0    I,,AUTO
         3 000456   000121 221010 2                  LDX1    GDP_FPT+5,X0
         3 000457   010000 622011                    EAX2    4096,X1
         3 000460   000122 742010 2                  STX2    DCWLIST,X0

      406     9044    6                 DCWLIST.TYPE(I) = %IOTP ;

   9044  3 000461   000122 236010 2                  LDQ     DCWLIST,X0
         3 000462   000005 376000 4                  ANQ     5
         3 000463   010000 276007                    ORQ     4096,DL
         3 000464   000122 756010 2                  STQ     DCWLIST,X0

PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:60   
      407     9045    6              END /* DO */ ;

   9045  3 000465   200022 235100                    LDA     I,,AUTO
         3 000466   000001 035007                    ADLA    1,DL
         3 000467   200022 755100                    STA     I,,AUTO
         3 000470   200022 236100                    LDQ     I,,AUTO
         3 000471   200023 116100                    CMPQ    LAST_DCW,,AUTO
         3 000472   000455 602000 3                  TNC     s:9043

      408     9046    5              DCWLIST.ADDRESS(LAST_DCW) = DCWLIST.ADDRESS(LAST_DCW - 1) + 4096 ;

   9046  3 000473   200023 720100                    LXL0    LAST_DCW,,AUTO
         3 000474   000121 221010 2                  LDX1    GDP_FPT+5,X0
         3 000475   010000 622011                    EAX2    4096,X1
         3 000476   000122 742010 2                  STX2    DCWLIST,X0

      409     9047    5              DCWLIST.TYPE(LAST_DCW) = %IOTD ;

   9047  3 000477   000005 236000 4                  LDQ     5
         3 000500   000122 356010 2                  ANSQ    DCWLIST,X0

      410     9048    5              DCWLIST.WORD_COUNT(LAST_DCW) = MOD (LOAD_WORDS, 4096) ;

   9048  3 000501   200021 470500                    LDP0    @LOAD_WORDS,,AUTO
         3 000502   000000 236100                    LDQ     0,,PR0
         3 000503   007777 376007                    ANQ     4095,DL
         3 000504   000122 676010 2                  ERQ     DCWLIST,X0
         3 000505   007777 376007                    ANQ     4095,DL
         3 000506   000122 656010 2                  ERSQ    DCWLIST,X0

      411     9049    5              DCWLIST$ = ADDR (DCWLIST) ;

   9049  3 000507   000006 236000 4                  LDQ     6
         3 000510   200020 471500                    LDP1    @DCWLIST$,,AUTO
         3 000511   100000 756100                    STQ     0,,PR1

      412     9050    5              RETURN ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:61   

   9050  3 000512   200016 221300                    LDX1  ! MME+1,,AUTO
         3 000513   000001 702211                    TSX2  ! 1,X1

      413     9051    5           END /* ELSE */ ;
      414     9052
      415     9053    4   END SETUP_DCW_LIST ;

   9053  3 000514   200016 221300                    LDX1  ! MME+1,,AUTO
         3 000515   000001 702211                    TSX2  ! 1,X1

      416     9054        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:62   
      417     9055        /*I* NAME:         GET_SUBEXEC_KEY
      418     9056             PURPOSE:      Returns Subexecutive Key Value
      419     9057             DESCRIPTION:  This procedure returns the key of the TOLTS
      420     9058                           Subexecutive for the deckfile.
      421     9059        */
      422     9060
      423     9061    3   GET_SUBEXEC_KEY: PROC (DECKFILE_KEY_VALUE) ;

   9061  3 000516   200016 741300       GET_SUBEXEC* STX1  ! MME+1,,AUTO

      424     9062
      425     9063    4      DCL DECKFILE_KEY_VALUE CHAR (23) CALIGNED ;
      426     9064    4      DCL 1 SUBEXEC_KEYS CONSTANT,
      427     9065    4            2 POLTS CHAR(23) INIT ('PLT.POLTCM'),
      428     9066    4            2 SOLTS CHAR(23) INIT ('SLT.SOLTCM'),
      429     9067    4            2 COLTS CHAR(23) INIT ('CLT.COLTCM'),
      430     9068    4            2 MOLTS CHAR(23) INIT ('MLT.MOLTCM') ;
      431     9069
      432     9070        /* Code */
      433     9071
      434     9072    5      DO CASE (TOT$ECP.SUBEXEC.CURRENT) ;

   9072  3 000517   000007 235000 xsym               LDA     TOT$ECP+7
         3 000520   000010 135007                    SBLA    8,DL
         3 000521   000006 115007                    CMPA    6,DL
         3 000522   000524 602005 3                  TNC     s:9072+5,AL
         3 000523   000555 710000 3                  TRA     s:9082
         3 000524   000544 710000 3                  TRA     s:9078
         3 000525   000551 710000 3                  TRA     s:9080
         3 000526   000532 710000 3                  TRA     s:9074
         3 000527   000537 710000 3                  TRA     s:9076
         3 000530   000537 710000 3                  TRA     s:9076
         3 000531   000537 710000 3                  TRA     s:9076

      435     9073    5         CASE (%POLTS) ;

      436     9074    5            DECKFILE_KEY_VALUE = SUBEXEC_KEYS.POLTS ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:63   

   9074  3 000532   200017 470500                    LDP0    @DECKFILE_KEY_VALUE,,AUTO
         3 000533   040100 100400                    MLR     fill='040'O
         3 000534   000012 000027 1                  ADSC9   SUBEXEC_KEYS             cn=0,n=23
         3 000535   000000 000027                    ADSC9   0,,PR0                   cn=0,n=23
         3 000536   000555 710000 3                  TRA     s:9082

      437     9075    5         CASE (%SOLTS, %PACT, %SLTA) ;

      438     9076    5            DECKFILE_KEY_VALUE = SUBEXEC_KEYS.SOLTS ;

   9076  3 000537   200017 470500                    LDP0    @DECKFILE_KEY_VALUE,,AUTO
         3 000540   040100 100400                    MLR     fill='040'O
         3 000541   000017 600027 1                  ADSC9   SUBEXEC_KEYS+5           cn=3,n=23
         3 000542   000000 000027                    ADSC9   0,,PR0                   cn=0,n=23
         3 000543   000555 710000 3                  TRA     s:9082

      439     9077    5         CASE (%COLTS) ;

      440     9078    5            DECKFILE_KEY_VALUE = SUBEXEC_KEYS.COLTS ;

   9078  3 000544   200017 470500                    LDP0    @DECKFILE_KEY_VALUE,,AUTO
         3 000545   040100 100400                    MLR     fill='040'O
         3 000546   000025 400027 1                  ADSC9   SUBEXEC_KEYS+11          cn=2,n=23
         3 000547   000000 000027                    ADSC9   0,,PR0                   cn=0,n=23
         3 000550   000555 710000 3                  TRA     s:9082

      441     9079    5         CASE (%MOLTS) ;

      442     9080    5            DECKFILE_KEY_VALUE = SUBEXEC_KEYS.MOLTS ;

   9080  3 000551   200017 470500                    LDP0    @DECKFILE_KEY_VALUE,,AUTO
         3 000552   040100 100400                    MLR     fill='040'O
         3 000553   000033 200027 1                  ADSC9   SUBEXEC_KEYS+17          cn=1,n=23
         3 000554   000000 000027                    ADSC9   0,,PR0                   cn=0,n=23

      443     9081    5      END /* CASE */ ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:64   

      444     9082    4      RETURN ;

   9082  3 000555   200016 221300                    LDX1  ! MME+1,,AUTO
         3 000556   000001 702211                    TSX2  ! 1,X1

      445     9083
      446     9084    4   END GET_SUBEXEC_KEY ;
      447     9085        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:65   
      448     9086        /*I* NAME:         LOAD_SUBEXEC
      449     9087             PURPOSE:      Loads TOLTS Subexec
      450     9088             DESCRIPTION:  This procedure sets up parameters for and calls
      451     9089                           the TOLTS loader utility.
      452     9090        */
      453     9091
      454     9092    3   LOAD_SUBEXEC: PROC (SUBEXEC_SIZE, KEY_VALUE, DCWLIST_PTR) ALTRET ;

   9092  3 000557   200016 741300       LOAD_SUBEXEC STX1  ! MME+1,,AUTO

      455     9093
      456     9094    4      DCL SUBEXEC_SIZE UBIN WORD ALIGNED ;
      457     9095    4      DCL KEY_VALUE    CHAR (24) CALIGNED ;
      458     9096    4      DCL 1 DCWLIST_PTR ALIGNED,
      459     9097    4            2 ADR      UBIN HALF UNAL,
      460     9098    4            2 *        UBIN HALF UNAL ;
      461     9099    4      DCL 1 CALL_SEQUENCE STATIC,
      462     9100    4            2 DCWLIST_ADR UBIN(18) UNAL,
      463     9101    4            2 STATUS_ADR  UBIN(18) UNAL,
      464     9102    4            2 * UBIN(18) UNAL,
      465     9103    4            2 * UBIN(18) UNAL,
      466     9104    4            2 * UBIN(36) UNAL,
      467     9105    4            2 * UBIN(36) UNAL,
      468     9106    4            2 * UBIN(36) UNAL,
      469     9107    4            2 * UBIN(36) UNAL,
      470     9108    4            2 * UBIN(36) UNAL,
      471     9109    4            2 * UBIN(36) UNAL,
      472     9110    4            2 * UBIN(36) UNAL,
      473     9111    4            2 * UBIN(36) UNAL ;
      474     9112    4      DCL ERROR_CODE UBIN(36) ;
      475     9113    4      DCL LOAD_OFFSET UBIN(18);
      476     9114    4      DCL LOAD_SIZE UBIN(36) ;
      477     9115    4      DCL MAX_LOAD UBIN(18) ;
      478     9116    4      DCL STATUS (0:1) UBIN(36) STATIC ;
      479     9117    4      DCL STATUS$ PTR ALIGNED ;
      480     9118    4      DCL 1 STATUS_PTR REDEF STATUS$ ALIGNED,
      481     9119    4            2 ADR   UBIN HALF UNAL,
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:66   
      482     9120    4            2 *     UBIN HALF UNAL ;
      483     9121           %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:67   
      484     9122        /* Code */
      485     9123
      486     9124    4      CALL_SEQUENCE = '0'B ;

   9124  3 000560   000000 100400                    MLR     fill='000'O
         3 000561   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         3 000562   000147 000050 2                  ADSC9   CALL_SEQUENCE            cn=0,n=40

      487     9125    4      CALL_SEQUENCE.DCWLIST_ADR = DCWLIST_PTR.ADR ;

   9125  3 000563   200021 470500                    LDP0    @DCWLIST_PTR,,AUTO
         3 000564   000000 220100                    LDX0    0,,PR0
         3 000565   000147 740000 2                  STX0    CALL_SEQUENCE

      488     9126    4      STATUS$ = ADDR(STATUS) ;

   9126  3 000566   000007 236000 4                  LDQ     7
         3 000567   200026 756100                    STQ     STATUS$,,AUTO

      489     9127    4      CALL_SEQUENCE.STATUS_ADR = STATUS_PTR.ADR ;

   9127  3 000570   200026 222100                    LDX2    STATUS$,,AUTO
         3 000571   000147 442000 2                  SXL2    CALL_SEQUENCE

      490     9128    4      ERROR_CODE = 0 ;

   9128  3 000572   200022 450100                    STZ     ERROR_CODE,,AUTO

      491     9129    4      LOAD_SIZE = 0 ;

   9129  3 000573   200024 450100                    STZ     LOAD_SIZE,,AUTO

      492     9130    4      STATUS = '0'B ;

   9130  3 000574   000161 450000 2                  STZ     STATUS
         3 000575   000162 450000 2                  STZ     STATUS+1

PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:68   
      493     9131    4      LOAD_OFFSET = 0 ;

   9131  3 000576   000000 223003                    LDX3    0,DU
         3 000577   200023 743100                    STX3    LOAD_OFFSET,,AUTO

      494     9132    4      MAX_LOAD = (SUBEXEC_SIZE * 1024) + TOT$ECP.SUBEXEC.ADDRESS ;

   9132  3 000600   200017 471500                    LDP1    @SUBEXEC_SIZE,,AUTO
         3 000601   100000 236100                    LDQ     0,,PR1
         3 000602   000012 736000                    QLS     10
         3 000603   000010 036000 xsym               ADLQ    TOT$ECP+8
         3 000604   000000 624006                    EAX4    0,QL
         3 000605   200025 744100                    STX4    MAX_LOAD,,AUTO

      495     9133    4      CALL TOL$GET_DECK (KEY_VALUE,

   9133  3 000606   000010 236000 4                  LDQ     8
         3 000607   200044 756100                    STQ     RETURN_DELTA+7,,AUTO
         3 000610   200022 633500                    EPPR3   ERROR_CODE,,AUTO
         3 000611   200043 453500                    STP3    RETURN_DELTA+6,,AUTO
         3 000612   200024 634500                    EPPR4   LOAD_SIZE,,AUTO
         3 000613   200042 454500                    STP4    RETURN_DELTA+5,,AUTO
         3 000614   200025 635500                    EPPR5   MAX_LOAD,,AUTO
         3 000615   200041 455500                    STP5    RETURN_DELTA+4,,AUTO
         3 000616   000011 236000 4                  LDQ     9
         3 000617   200040 756100                    STQ     RETURN_DELTA+3,,AUTO
         3 000620   200023 636500                    EPPR6   LOAD_OFFSET,,AUTO
         3 000621   200037 456500                    STP6    RETURN_DELTA+2,,AUTO
         3 000622   200020 236100                    LDQ     @KEY_VALUE,,AUTO
         3 000623   200036 756100                    STQ     RETURN_DELTA+1,,AUTO
         3 000624   200036 630500                    EPPR0   RETURN_DELTA+1,,AUTO
         3 000625   000025 631400 xsym               EPPR1   B_VECTNIL+21
         3 000626   000000 701000 xent               TSX1    TOL$GET_DECK
         3 000627   000632 702000 3                  TSX2    ERROR

      496     9134    4              LOAD_OFFSET,
      497     9135    4              CALL_SEQUENCE,
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:69   
      498     9136    4              MAX_LOAD,
      499     9137    4              LOAD_SIZE,
      500     9138    4              ERROR_CODE,
      501     9139    4              TOT$ECP.SUBEXEC.EDIT_NAME) ALTRET (ERROR) ;
      502     9140    4      RETURN ;

   9140  3 000630   200016 221300                    LDX1  ! MME+1,,AUTO
         3 000631   000001 702211                    TSX2  ! 1,X1

      503     9141
      504     9142    4   ERROR:
      505     9143    4      ALTRETURN ;

   9143  3 000632   200016 221300       ERROR        LDX1  ! MME+1,,AUTO
         3 000633   000000 702211                    TSX2  ! 0,X1

      506     9144
      507     9145    4   END LOAD_SUBEXEC ;
      508     9146        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:70   
      509     9147        /*I* NAME:         SAVE_SUBEXEC_DEBUG_INFO
      510     9148             AUTHOR:       Scott S. Sheppard
      511     9149             PURPOSE:      Save Subexecutive Attributes for DEBUG
      512     9150             DATA:         TOT$ECP.SUBEXEC.EDIT_NAME - input
      513     9151                           TOT$ECP.SUBEXEC.ADDRESS - input
      514     9152                           KEY_VALUE.VALUE - input (dcl in TOD$INIT_SUBEXEC)
      515     9153                           TOQ$DCP.PF.ENABLED - input
      516     9154                           TOQ$DCP.SE.NAME - output
      517     9155                           TOQ$DCP.SE.ADDRESS - output
      518     9156                           TOQ$DCP.SE.CATALOG - output
      519     9157             DESCRIPTION:  This procedure saves Subexecutive information in
      520     9158                           the Debug Control Parameter.
      521     9159        */
      522     9160
      523     9161    3   SAVE_SUBEXEC_DEBUG_INFO: PROC ;

   9161  3 000634   200016 741300       SAVE_SUBEXE* STX1  ! MME+1,,AUTO

      524     9162
      525     9163        /* Code */
      526     9164
      527     9165    4      IF TOQ$DCP.PF.ENABLED

   9165  3 000635   000000 234000 xsym               SZN     TOQ$DCP
         3 000636   000654 605000 3                  TPL     s:9174

      528     9166    5      THEN DO ;

      529     9167    5              TOQ$DCP.SE.EDIT_NAME = TOT$ECP.SUBEXEC.EDIT_NAME ;

   9167  3 000637   000011 236000 xsym               LDQ     TOT$ECP+9
         3 000640   000001 756000 xsym               STQ     TOQ$DCP+1

      530     9168    5              TOQ$DCP.SE.ADDRESS = TOT$ECP.SUBEXEC.ADDRESS ;

   9168  3 000641   000010 235000 xsym               LDA     TOT$ECP+8
         3 000642   000003 755000 xsym               STA     TOQ$DCP+3
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:71   

      531     9169    5              TOQ$DCP.SE.CATALOG = SUBSTR (KEY_VALUE.VALUE, 0, 3) ;

   9169  3 000643   000106 236000 2                  LDQ     KEY_VALUE
         3 000644   000011 736000                    QLS     9
         3 000645   000040 276007                    ORQ     32,DL
         3 000646   000002 756000 xsym               STQ     TOQ$DCP+2

      532     9170    5              TOQ$DCP.PF.REASON = %DSC_INIT ;

   9170  3 000647   000001 236003                    LDQ     1,DU
         3 000650   000000 552020 xsym               STBQ    TOQ$DCP,'20'O

      533     9171    5              CALL TOQ$DEBUG ;

   9171  3 000651   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000652   000000 701000 xent               TSX1    TOQ$DEBUG
         3 000653   000000 011000                    NOP     0

      534     9172    5           END /* THEN */ ;

      535     9173    4      ELSE /* DEBUG test request didn't kick this Subexecutive off */ ;
      536     9174    4      RETURN ;

   9174  3 000654   200016 221300                    LDX1  ! MME+1,,AUTO
         3 000655   000001 702211                    TSX2  ! 1,X1

      537     9175
      538     9176    4   END SAVE_SUBEXEC_DEBUG_INFO ;
      539     9177        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:72   
      540     9178        /*I* NAME:         SET_SUBEXEC$
      541     9179             PURPOSE:      Sets the Pointer to the Subexec
      542     9180             DESCRIPTION:  This procedure sets the pointer to the TOLTS
      543     9181                           subexecutive that has just been loaded.
      544     9182        */
      545     9183
      546     9184    3   SET_SUBEXEC$: PROC (SUBEXEC_PTR) ;

   9184  3 000656   200016 741300       SET_SUBEXEC$ STX1  ! MME+1,,AUTO

      547     9185
      548     9186    4      DCL 1 SUBEXEC_PTR ALIGNED,
      549     9187    4            2 ADR     UBIN HALF UNAL,
      550     9188    4            2 SEGID   UBIN HALF UNAL ;
      551     9189
      552     9190        /* Code */
      553     9191
      554     9192    4      SUBEXEC_PTR.ADR = TOT$ECP.SUBEXEC.ADDRESS + %SPA_LGTH ;

   9192  3 000657   000010 720000 xsym               LXL0    TOT$ECP+8
         3 000660   000110 622010                    EAX2    72,X0
         3 000661   200017 470500                    LDP0    @SUBEXEC_PTR,,AUTO
         3 000662   000000 742100                    STX2    0,,PR0

      555     9193    4      SUBEXEC_PTR.SEGID = %IS_SEGID ;

   9193  3 000663   006000 220003                    LDX0    3072,DU
         3 000664   000000 440100                    SXL0    0,,PR0

      556     9194    5      DO CASE (TOT$ECP.SUBEXEC.CURRENT) ;

   9194  3 000665   000007 235000 xsym               LDA     TOT$ECP+7
         3 000666   000013 135007                    SBLA    11,DL
         3 000667   000003 115007                    CMPA    3,DL
         3 000670   000672 602005 3                  TNC     s:9194+5,AL
         3 000671   000706 710000 3                  TRA     s:9200
         3 000672   000675 710000 3                  TRA     s:9196
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:73   
         3 000673   000702 710000 3                  TRA     s:9198
         3 000674   000675 710000 3                  TRA     s:9196

      557     9195    5         CASE (%SOLTS, %SLTA) ;

      558     9196    5            CALL TOT$SOLTS_SNUMB (SUBEXEC_PTR) ;

   9196  3 000675   200017 630500                    EPPR0   @SUBEXEC_PTR,,AUTO
         3 000676   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000677   000000 701000 xent               TSX1    TOT$SOLTS_SNUMB
         3 000700   000000 011000                    NOP     0
         3 000701   000706 710000 3                  TRA     s:9200

      559     9197    5         CASE (%PACT) ;

      560     9198    5            CALL TOT$PACT_SNUMB (SUBEXEC_PTR) ;

   9198  3 000702   200017 630500                    EPPR0   @SUBEXEC_PTR,,AUTO
         3 000703   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000704   000000 701000 xent               TSX1    TOT$PACT_SNUMB
         3 000705   000000 011000                    NOP     0

      561     9199    5      END /* CASE */ ;

      562     9200    4      RETURN ;

   9200  3 000706   200016 221300                    LDX1  ! MME+1,,AUTO
         3 000707   000001 702211                    TSX2  ! 1,X1

      563     9201
      564     9202    4   END SET_SUBEXEC$ ;
      565     9203    3   END TOD$INIT_SUBEXEC ;

   9203  3 000710   200010 221300                    LDX1  ! @QUEUE_ENTRY+3,,AUTO
         3 000711   000001 702211                    TSX2  ! 1,X1

      566     9204        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:74   
      567     9205        /*I* NAME:         TOD$INTERSLAVE_WRITE
      568     9206             INTERFACE:    TOG$GCOS_MMES
      569     9207             INPUT:        Information in dispatcher queue entry.
      570     9208             OUTPUT:       Interslave Write operation simulated.
      571     9209             DESCRIPTION:  The structure MME is setup to look like a
      572     9210                           MME GEINOS occurred in a GMAP program.  Then
      573     9211                           TOG$GCOS_MMES is called to do an Interslave Write.
      574     9212
      575     9213                           The op code for an Interslave Write is set into
      576     9214                           MME.WD_1, bits 0-5.
      577     9215
      578     9216                           Bits 18-35 of MME.WD_2 are set to the address of
      579     9217                           a DCW word which points to the 3 words of data
      580     9218                           to be written.  (Bits 0-17 of the variable DCW
      581     9219                           contain the address of the data, which is left
      582     9220                           in the dispatcher queue entry.  MME.WD2.ADR contains
      583     9221                           the address of this DCW word.)
      584     9222
      585     9223                           The MME number (MME.INST.NO) is set to 1 for a
      586     9224                           MME GEINOS.  Then TOG$GCOS_MMES is called.  It
      587     9225                           does the Interslave Write, not knowing that it was
      588     9226                           call from TOD$DISPATCHER and not the fault
      589     9227                           handler, TOF$FAULTS.
      590     9228        */
      591     9229        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:75   
      592     9230    2   TOD$INTERSLAVE_WRITE: PROC ;

   9230  3 000712   200010 741300       TOD$INTERSL* STX1  ! @QUEUE_ENTRY+3,,AUTO

      593     9231
      594     9232    3      DCL DATA$ PTR ;
      595     9233    3      DCL 1 DATA_PTR REDEF DATA$,
      596     9234    3            2 ADR UBIN (18) UNAL,
      597     9235    3            2 * UBIN (18) UNAL ;
      598     9236    3      DCL 1 DCW STATIC,
      599     9237    3            2 ADR UBIN (18) UNAL,
      600     9238    3            2 * UBIN (18) UNAL ;
      601     9239    3      DCL DCWLIST$ PTR ;
      602     9240    3      DCL 1 DCWLIST_PTR REDEF DCWLIST$,
      603     9241    3            2 ADR UBIN (18) UNAL,
      604     9242    3            2 * UBIN (18) UNAL ;
      605     9243    3      DCL ISC_OPCODE UBIN (36) ;
      606     9244    3      DCL 1 ISC REDEF ISC_OPCODE,
      607     9245    3            2 OPCODE BIT (6) UNAL,
      608     9246    3            2 * UBIN (30) UNAL ;
      609     9247    3      DCL 1 WORD2  ALIGNED,
      610     9248    3            2 *    UBIN (18) UNAL,
      611     9249    3            2 ADR  UBIN (18) UNAL ;
      612     9250    3      DCL WORD2_ REDEF WORD2 UBIN (36) UNAL ;
      613     9251
      614     9252        /* Parameters to pass */
      615     9253
      616     9254           %MME ;
      617     9275           %MREG ;
      618     9297           %MME_INSTR$ ;
      619     9300           %RETURN_DELTA ;
      620     9303           %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:76   
      621     9304        /* Code */
      622     9305
      623     9306    3      ISC.OPCODE = %ISC_WRITE ;

   9306  3 000713   110000 236003                    LDQ     36864,DU
         3 000714   200013 752140                    STCQ    ISC_OPCODE,'40'O,AUTO

      624     9307    3      DATA$ = ADDR(TOD$QUEUE.E.QENTRY(TOD$QUEUE.CURR_SERVICE)) ;

   9307  3 000715   000102 236000 2                  LDQ     TOD$QUEUE+65
         3 000716   000024 736000                    QLS     20
         3 000717   000012 036000 4                  ADLQ    10
         3 000720   200011 756100                    STQ     DATA$,,AUTO

      625     9308    3      MME.WD_1 = ISC_OPCODE ;

   9308  3 000721   200013 235100                    LDA     ISC_OPCODE,,AUTO
         3 000722   200016 755100                    STA     MME+1,,AUTO

      626     9309    3      DCW.ADR = DATA_PTR.ADR ;

   9309  3 000723   200011 220100                    LDX0    DATA$,,AUTO
         3 000724   000163 740000 2                  STX0    DCW

      627     9310    3      DCWLIST$ = ADDR(DCW) ;

   9310  3 000725   000013 236000 4                  LDQ     11
         3 000726   200012 756100                    STQ     DCWLIST$,,AUTO

      628     9311    3      WORD2_ = MME.WD_2 ;

   9311  3 000727   200017 235100                    LDA     @SUBEXEC_PTR,,AUTO
         3 000730   200014 755100                    STA     WORD2,,AUTO

      629     9312    3      WORD2.ADR = DCWLIST_PTR.ADR ;

   9312  3 000731   200012 222100                    LDX2    DCWLIST$,,AUTO
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:77   
         3 000732   200014 442100                    SXL2    WORD2,,AUTO

      630     9313    3      MME.WD_2 = WORD2_ ;

   9313  3 000733   200014 235100                    LDA     WORD2,,AUTO
         3 000734   200017 755100                    STA     @SUBEXEC_PTR,,AUTO

      631     9314    3      MME.INST.NO = %GEINOS ;

   9314  3 000735   000001 223003                    LDX3    1,DU
         3 000736   200015 743100                    STX3    MME,,AUTO

      632     9315    3      CALL TOG$GCOS_MMES(MME,MREG,MME_INSTR$,RETURN_DELTA) ;

   9315  3 000737   200035 630500                    EPPR0   RETURN_DELTA,,AUTO
         3 000740   200041 450500                    STP0    RETURN_DELTA+4,,AUTO
         3 000741   200034 631500                    EPPR1   MME_INSTR$,,AUTO
         3 000742   200040 451500                    STP1    RETURN_DELTA+3,,AUTO
         3 000743   200024 633500                    EPPR3   MREG,,AUTO
         3 000744   200037 453500                    STP3    RETURN_DELTA+2,,AUTO
         3 000745   200015 634500                    EPPR4   MME,,AUTO
         3 000746   200036 454500                    STP4    RETURN_DELTA+1,,AUTO
         3 000747   200036 630500                    EPPR0   RETURN_DELTA+1,,AUTO
         3 000750   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000751   000000 701000 xent               TSX1    TOG$GCOS_MMES
         3 000752   000000 011000                    NOP     0

      633     9316    3      RETURN ;

   9316  3 000753   200010 221300                    LDX1  ! @QUEUE_ENTRY+3,,AUTO
         3 000754   000001 702211                    TSX2  ! 1,X1

      634     9317
      635     9318    3   END TOD$INTERSLAVE_WRITE ;
      636     9319        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:78   
      637     9320        /*I* NAME:         TOD$POLTS_IO_DONE
      638     9321             INTERFACE:    TOP$POLTS_IO
      639     9322             INPUT:        A dispatcher queue entry.
      640     9323             OUTPUT:       TOP$EVENT_ID set.
      641     9324                           TOP$STATUS = 2 words of status from entry
      642     9325             DESCRIPTION:  The SYMDEFed variable TOP$EVENT_ID is
      643     9326                           set to the Event ID stored in the first word of
      644     9327                           the dispatcher queue entry and a special
      645     9328                           entry point in TOP$POLTS is called, TOP$POLTS_IO
      646     9329                           is called.  The Event ID identifies which of 8
      647     9330                           possible no wait I/O operations completed.
      648     9331                           TOP$POLTS_IO takes care of fetching the I/O
      649     9332                           status from the appropriate DCB, returning it to the
      650     9333                           test page and paying Slave Mode POLTS the
      651     9334                           Courtesy Call.
      652     9335
      653     9336                           Note that both POLTS and MOLTS I/O are treated
      654     9337                           the same at this point, and that the same
      655     9338                           completion processing routine is called for both.
      656     9339        */
      657     9340        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:79   
      658     9341    2   TOD$POLTS_IO_DONE: PROC ;

   9341  3 000755   200010 741300       TOD$POLTS_I* STX1  ! @QUEUE_ENTRY+3,,AUTO

      659     9342
      660     9343    3      DCL DISPATCHER_ENTRY(0:2) UBIN(36) ;
      661     9344    3      DCL 1 Q_ENTRY REDEF DISPATCHER_ENTRY,
      662     9345    3            2 EVENT_ID UBIN(36),
      663     9346    3            2 * UBIN(36),
      664     9347    3            2 * UBIN(36) ;
      665     9348    3      DCL 1 STATUS,
      666     9349    3            2 WD1 UBIN(36),
      667     9350    3            2 WD2 UBIN(36) ;
      668     9351
      669     9352        /* Code */
      670     9353
      671     9354    3      DISPATCHER_ENTRY = TOD$QUEUE.E.QENTRY(TOD$QUEUE.CURR_SERVICE) ;

   9354  3 000756   000102 235000 2                  LDA     TOD$QUEUE+65
         3 000757   000004 735000                    ALS     4
         3 000760   000100 100405                    MLR     fill='000'O
         3 000761   000002 000014 2                  ADSC9   TOD$QUEUE+1,A            cn=0,n=12
         3 000762   200011 000014                    ADSC9   DISPATCHER_ENTRY,,AUTO   cn=0,n=12

      672     9355    3      TOP$EVENT_ID = Q_ENTRY.EVENT_ID ;

   9355  3 000763   200011 236100                    LDQ     DISPATCHER_ENTRY,,AUTO
         3 000764   000000 756000 xsym               STQ     TOP$EVENT_ID

      673     9356    3      STATUS.WD1 = DISPATCHER_ENTRY(1) ;

   9356  3 000765   200012 235100                    LDA     DCWLIST$,,AUTO
         3 000766   200014 755100                    STA     STATUS,,AUTO

      674     9357    3      STATUS.WD2 = DISPATCHER_ENTRY(2) ;

   9357  3 000767   200013 235100                    LDA     ISC_OPCODE,,AUTO
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:80   
         3 000770   200015 755100                    STA     MME,,AUTO

      675     9358    3      TOP$STATUS = STATUS ;

   9358  3 000771   200014 237100                    LDAQ    STATUS,,AUTO
         3 000772   000000 755000 xsym               STA     TOP$STATUS
         3 000773   000001 756000 xsym               STQ     TOP$STATUS+1

      676     9359    3      CALL TOP$POLTS_IO(,,,) ;

   9359  3 000774   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000775   000000 701000 xent               TSX1    TOP$POLTS_IO
         3 000776   000000 011000                    NOP     0

      677     9360    3      RETURN ;

   9360  3 000777   200010 221300                    LDX1  ! @QUEUE_ENTRY+3,,AUTO
         3 001000   000001 702211                    TSX2  ! 1,X1

      678     9361
      679     9362    3   END TOD$POLTS_IO_DONE ;
      680     9363        %EJECT ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:81   
      681     9364        /*F*     NAME:     TOD$ADVANCE_QUEUE
      682     9365                 PURPOSE:  Advances the TOLTS Dispatcher Queue to point at the next
      683     9366                           pending queue entry, and decrament the entries counter.
      684     9367        */
      685     9368
      686     9369    2   TOD$ADVANCE_QUEUE: PROC ;

   9369  3 001001   200010 741300       TOD$ADVANCE* STX1  ! @QUEUE_ENTRY+3,,AUTO

      687     9370
      688     9371        /* Code */
      689     9372
      690     9373    4      DO INHIBIT ;

      691     9374    4         TOD$QUEUE.ENTRIES = TOD$QUEUE.ENTRIES - 1 ;

   9374  3 001002   000103 235200 2                  LDA   ! TOD$QUEUE+66
         3 001003   000001 135207                    SBLA  ! 1,DL
         3 001004   000103 755200 2                  STA   ! TOD$QUEUE+66

      692     9375    4         IF TOD$QUEUE.CURR_SERVICE = 15

   9375  3 001005   000102 236200 2                  LDQ   ! TOD$QUEUE+65
         3 001006   000017 116207                    CMPQ  ! 15,DL
         3 001007   001012 601200 3                  TNZ   ! s:9377

      693     9376    4         THEN TOD$QUEUE.CURR_SERVICE = 0 ;

   9376  3 001010   000102 450200 2                  STZ   ! TOD$QUEUE+65
         3 001011   001014 710200 3                  TRA   ! s:9379

      694     9377    4         ELSE TOD$QUEUE.CURR_SERVICE = TOD$QUEUE.CURR_SERVICE + 1 ;

   9377  3 001012   000001 036207                    ADLQ  ! 1,DL
         3 001013   000102 756200 2                  STQ   ! TOD$QUEUE+65

      695     9378    4      END ;
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:82   

      696     9379    3      RETURN ;

   9379  3 001014   000001 702211                    TSX2  ! 1,X1

FPTN_
 Sect OctLoc
   1     000   000000 006000                                                    ....

(unnamed)
 Sect OctLoc
   1     001   ****** ******   536246 436300   000000 000000   534721 236300    ................
   1     005   000000 000000                                                    ....

SUBEXEC_SIZES
 Sect OctLoc
   1     006   000000 000021   000000 000047   000000 000017   000000 000017    .......'........

SUBEXEC_KEYS
 Sect OctLoc
   1     012   120114 124056   120117 114124   103115 040040   040040 040040    PLT.POLTCM
   1     016   040040 040040   040040 040123   114124 056123   117114 124103           SLT.SOLTC
   1     022   115040 040040   040040 040040   040040 040040   040040 103114    M             CL
   1     026   124056 103117   114124 103115   040040 040040   040040 040040    T.COLTCM
   1     032   040040 040040   040115 114124   056115 117114   124103 115040         MLT.MOLTCM
   1     036   040040 040040   040040 040040   040040 040040

TOD_ERROR_CODE
 Sect OctLoc
   2     000   241704 000000                                                    ....

TOD$QUEUE
 Sect OctLoc
   2     001   000000 000000   000000 000000   000000 000000   000000 000000    ................
   2     101*  000000 000000   000000 000000   000000 000000                    ............

SERVICE_IN_PROGRESS
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:83   
 Sect OctLoc
   2     105   0***** ******                                                    ....

KEY_VALUE
 Sect OctLoc
   2     106   027*** ******   ****** ******   ****** ******   ****** ******    ................
   2     112   ****** ******   ****** ******                                    ........

GDP_FPT
 Sect OctLoc
   2     114   000001 777640   000120 006000   000000 177640   000000 006014    .....P..........
   2     120   000000 000000   ****** ******                                    ........

DCWLIST
 Sect OctLoc
   2     122   ****** ******   ****** ******   ****** ******   ****** ******    ................

CALL_SEQUENCE
 Sect OctLoc
   2     147   ****** ******   ****** ******   ****** ******   ****** ******    ................

(unnamed)
 Sect OctLoc
   4     000   777777 400007   000000 006000   001777 776000   000106 206000    .............F..
   4     004   000106 006000   777777 747777   000122 006000   000161 006000    .F.......R...q..
   4     010   000011 006000   000147 006000   000002 006000   000163 006000    .....g.......s..
      697     9380
      698     9381    3   END TOD$ADVANCE_QUEUE ;
      699     9382    2   END TOD$SERVICE_ENTRY ;
      700     9383    1   END TOD$DISPATCHER ;

PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:84   
--  Include file information  --

   TO_PERR_C.:E05TOU  is referenced.
   TOT_RQSTS_E.:E05TOU  is referenced.
   TOT_TOLTS_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure TOD$DISPATCHER.
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:85   

 **** Procedure blocks ****

LB#    Line#s    #stmts #vars Sect# OctLoc  P A C   NP Lvl/name
  0    19-  9383    197    42     3      0  y   y    3   1 TOD$DISPATCHER
  1  8741-  8760     15     0     3     31  y   y    0     2 TOD$BUILD_ENTRY
  2  8790-  9382    171     1     3     77  y   y    0     2 TOD$SERVICE_ENTRY
  3  8876-  9203    115     6     3    164  y   y    0      3 TOD$INIT_SUBEXEC
  4  8912-  8935     12     7     3    266  y   y    1       4 GET_SUBEXEC_SIZE
  5  8943-  8984     11    13     3    323  y   y    2       4 GET_MORE_PAGES
  6  8992-  9008     10     2     3    372  y   y    1       4 SET_BARS
  7  9016-  9053     21    12     3    421  y   y    3       4 SETUP_DCW_LIST
  8  9061-  9084     12     7     3    516  y   y    1       4 GET_SUBEXEC_KEY
  9  9092-  9145     13    18     3    557  y y y    3       4 LOAD_SUBEXEC
 10  9161-  9176     10     0     3    634  y   y    0       4 SAVE_SUBEXEC_DEBUG_INFO
 11  9184-  9202     10     4     3    656  y   y    1       4 SET_SUBEXEC$
 12  9230-  9318     12    22     3    712  y   y    0      3 TOD$INTERSLAVE_WRITE
 13  9341-  9362      8     6     3    755  y   y    0      3 TOD$POLTS_IO_DONE
 14  9369-  9381      8     0     3   1001  y   y    0      3 TOD$ADVANCE_QUEUE
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:86   

    **** Executable statements  ****

  Exec cost Stmt Sec OctLoc Type   LB Label              Exec cost Stmt Sec OctLoc Type   LB Label

              19   3      0 Proc    0                          $$  8715   3      2 DoCase  0
            8716   3     12 Case    0                              8717   3     12 Call    0
            8718   3     15 Case    0                              8719   3     15 Call    0
            8720   3     20 Case    0                              8721   3     20 Assign  0
            8722   3     24 Call    0                              8723   3     30 EndCse  0
            8724   3     30 Return  0                              8741   3     31 Proc    1
            8745   3     32 If      1                              8746   3     35 Do      1
            8747   3     35 Assign  1                              8748   3     41 Call    1
            8749   3     45 EndDo   1                              8750   3     46 DoInhi  1
        $$  8751   3     46 Assign  1                          $$  8752   3     55 Assign  1
            8753   3     63 Assign  1                              8754   3     66 If      1
            8755   3     71 Assign  1                              8756   3     73 Assign  1
            8757   3     75 EndInh  1                              8758   3     75 Return  1
            8790   3     77 Proc    2                              8796   3    100 If      2
            8797   3    102 Do      2                              8798   3    102 Assign  2
            8799   3    106 Call    2                              8800   3    112 EndDo   2
            8801   3    113 Do      2                              8802   3    113 Assign  2
            8803   3    115 If      2                              8805   3    117 Do      2
       $$$  8806   3    117 DoCase  2                              8807   3    133 Case    2
            8808   3    133 Assign  2                              8809   3    134 Call    2
            8810   3    136 Call    2                              8811   3    141 Case    2
            8812   3    141 Call    2                              8813   3    144 Case    2
            8814   3    144 Call    2                              8815   3    147 Case    2
            8816   3    147 Assign  2                              8817   3    153 Call    2
            8818   3    157 EndCse  2                              8819   3    157 Call    2
            8820   3    161 EndDo   2                              8821   3    161 Assign  2
            8822   3    162 EndDo   2                              8823   3    162 Return  2
            8876   3    164 Proc    3                          $$  8888   3    165 Assign  3
            8889   3    173 Call    3                           $  8890   3    177 Call    3
            8891   3    205 Call    3                          $$  8892   3    211 Call    3
            8893   3    221 Call    3                          $$  8894   3    225 Call    3
            8895   3    235 Call    3                              8896   3    237 Assign  3
            8897   3    243 Call    3                              8898   3    247 Call    3
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:87   
            8899   3    253 Return  3                              8902   3    255 Assign  3 LOAD_ERROR
            8903   3    261 Call    3                              8912   3    266 Proc    4
       $$$  8923   3    267 DoCase  4                              8924   3    302 Case    4
         $  8925   3    302 Assign  4                              8926   3    306 Case    4
         $  8927   3    306 Assign  4                              8928   3    312 Case    4
         $  8929   3    312 Assign  4                              8930   3    316 Case    4
            8931   3    316 Assign  4                              8932   3    321 EndCse  4
            8933   3    321 Return  4                              8943   3    323 Proc    5
         $  8971   3    324 Assign  5                              8972   3    330 Assign  5
$$$$$$$$$$  8973   3    332 MonCal  5                              8976   3    335 Assign  5
        $$  8977   3    337 Assign  5                              8978   3    345 DoIndx  5
            8979   3    350 Assign  5                           $  8980   3    352 EndInd  5
        $$  8981   3    362 Assign  5                              8982   3    370 Return  5
            8992   3    372 Proc    6                              8998   3    373 Assign  6
        $$  8999   3    375 DoCase  6                              9000   3    405 Case    6
         $  9001   3    405 Assign  6                              9002   3    412 Case    6
         $  9003   3    412 Assign  6                              9004   3    416 EndCse  6
            9005   3    416 Assign  6                              9006   3    420 Return  6
            9016   3    421 Proc    7                           $  9032   3    422 Assign  7
            9033   3    426 If      7                              9034   3    430 Do      7
            9035   3    430 Assign  7                              9036   3    434 Call    7
            9037   3    440 EndDo   7                              9038   3    441 Do      7
            9039   3    441 Assign  7                              9040   3    444 Assign  7
            9041   3    446 Assign  7                              9042   3    452 DoIndx  7
            9043   3    455 Assign  7                              9044   3    461 Assign  7
            9045   3    465 EndInd  7                              9046   3    473 Assign  7
            9047   3    477 Assign  7                           $  9048   3    501 Assign  7
            9049   3    507 Assign  7                              9050   3    512 Return  7
            9053   3    514 EndPrc  7                              9061   3    516 Proc    8
       $$$  9072   3    517 DoCase  8                              9073   3    532 Case    8
        $$  9074   3    532 Assign  8                              9075   3    537 Case    8
        $$  9076   3    537 Assign  8                              9077   3    544 Case    8
        $$  9078   3    544 Assign  8                              9079   3    551 Case    8
         $  9080   3    551 Assign  8                              9081   3    555 EndCse  8
            9082   3    555 Return  8                              9092   3    557 Proc    9
            9124   3    560 Assign  9                              9125   3    563 Assign  9
            9126   3    566 Assign  9                              9127   3    570 Assign  9
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:88   
            9128   3    572 Assign  9                              9129   3    573 Assign  9
            9130   3    574 Assign  9                              9131   3    576 Assign  9
         $  9132   3    600 Assign  9                      $$$$$$  9133   3    606 Call    9
            9140   3    630 Return  9                              9143   3    632 Altret  9 ERROR
            9161   3    634 Proc   10                              9165   3    635 If     10
            9166   3    637 Do     10                              9167   3    637 Assign 10
            9168   3    641 Assign 10                              9169   3    643 Assign 10
            9170   3    647 Assign 10                              9171   3    651 Call   10
            9172   3    654 EndDo  10                              9174   3    654 Return 10
            9184   3    656 Proc   11                           $  9192   3    657 Assign 11
            9193   3    663 Assign 11                          $$  9194   3    665 DoCase 11
            9195   3    675 Case   11                              9196   3    675 Call   11
            9197   3    702 Case   11                              9198   3    702 Call   11
            9199   3    706 EndCse 11                              9200   3    706 Return 11
            9203   3    710 EndPrc  3                              9230   3    712 Proc   12
            9306   3    713 Assign 12                              9307   3    715 Assign 12
            9308   3    721 Assign 12                              9309   3    723 Assign 12
            9310   3    725 Assign 12                              9311   3    727 Assign 12
            9312   3    731 Assign 12                              9313   3    733 Assign 12
            9314   3    735 Assign 12                        $$$$  9315   3    737 Call   12
            9316   3    753 Return 12                              9341   3    755 Proc   13
         $  9354   3    756 Assign 13                              9355   3    763 Assign 13
            9356   3    765 Assign 13                              9357   3    767 Assign 13
            9358   3    771 Assign 13                              9359   3    774 Call   13
            9360   3    777 Return 13                              9369   3   1001 Proc   14
            9373   3   1002 DoInhi 14                              9374   3   1002 Assign 14
            9375   3   1005 If     14                              9376   3   1010 Assign 14
            9377   3   1012 Assign 14                              9378   3   1014 EndInh 14
            9379   3   1014 Return 14

  **** Statement type totals  ****

    76 Assign    28 Call       1 MonCal     7 If        19 Case      15 Return
     1 Altret     2 DoIndx     6 DoCase     7 Do         2 DoInhi     2 EndInd
     6 EndCse     6 EndDo      2 EndInh    15 Proc       2 EndPrc     2 Labels


PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:89   
 # major stmts=  136 Code/major= 3.86 # stmts=  197 Code/stmt= 2.66  Point total=102.8
 Cost/major stmt=  3.4 Cost/stmt=  2.3 Total cost=    466.3

   0-4  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
   4-6  $$$$$$$$
   6-8  $$$$$$$$
  8-10  $
 10-12
 12-14
 14-16
 16-18
 18-20
 20-22
 22-??
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:90   

 **** Variables and constants ****

  ****  Section 001 RoData TOD$DISPATCHER

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 FPTN_                      0-0-0/w PTR         r     1 IS$

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

    12-0-0/c STRC(828)   r     1 SUBEXEC_KEYS
    12-0-0/c CHAR(23)    r         2 POLTS
    17-3-0/c CHAR(23)    r         2 SOLTS
    25-2-0/c CHAR(23)    r         2 COLTS
    33-1-0/c CHAR(23)    r         2 MOLTS

     6-0-0/w STRC(144)   r     1 SUBEXEC_SIZES
     6-0-0/w UBIN        r         2 POLTS
     7-0-0/w UBIN        r         2 SOLTS
    10-0-0/w UBIN        r         2 COLTS
    11-0-0/w UBIN        r         2 MOLTS


  ****  Section 002  Data  TOD$DISPATCHER

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   105-0-0/b BIT         r     1 SERVICE_IN_PROGRESS      161-0-0/w UBIN        r     1 STATUS(0:1)
   104-0-0/w PTR         r     1 TOD$SPA$

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

   147-0-0/b STRC(360)   r     1 CALL_SEQUENCE
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:91   
   147-0-0/b UBIN(18)    r         2 DCWLIST_ADR
   147-2-0/b UBIN(18)    r         2 STATUS_ADR

   163-0-0/b STRC        r     1 DCW
   163-0-0/b UBIN(18)    r         2 ADR

   122-0-0/w STRC        r     1 DCWLIST(0:20)
   122-0-0/b UBIN(18)    r         2 ADDRESS
   122-2-4/b UBIN(2)     r         2 TYPE
   122-2-6/b UBIN(12)    r         2 WORD_COUNT

   114-0-0/d STRC(216)   r     1 GDP_FPT
   120-0-0/d STRC        r         2 V
   120-0-0/w UBIN        r          3 PAGES#

   106-0-0/c STRC(216)   r     1 KEY_VALUE
   106-1-0/c CHAR(23)    r         2 VALUE

     1-0-0/w STRC(2412)  r     1 TOD$QUEUE
     1-0-0/w STRC(144)   r         2 E(0:15)
     1-0-0/w UBIN        r          3 SERV_CODE
     2-0-0/w STRC(108)   r          3 QENTRY
   101-0-0/w UBIN        r         2 NEXT_SLOT
   102-0-0/w UBIN        r         2 CURR_SERVICE
   103-0-0/w UBIN        r         2 ENTRIES

     0-0-0/w STRC        r     1 TOD_ERROR_CODE
     0-2-1/b UBIN(14)    r         2 ERR#


  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    20-0-0/w PTR         r     1 @DCWLIST$                 21-0-0/w PTR         r     1 @DCWLIST_PTR
    17-0-0/w PTR         r     1 @DECKFILE_KEY_VALUE       20-0-0/w PTR         r     1 @KEY_VALUE
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:92   
    20-0-0/w PTR         r     1 @LOAD_WORDS               21-0-0/w PTR         r     1 @LOAD_WORDS
     5-0-0/w PTR         r     1 @QUEUE_ENTRY               3-0-0/w PTR         r     1 @REQUEST_TYPE
     4-0-0/w PTR         r     1 @SERVICE_CODE             17-0-0/w PTR         r     1 @SUBEXEC_PTR
    17-0-0/w PTR         r     1 @SUBEXEC_SIZE             17-0-0/w PTR         r     1 @SUBEXEC_SIZE
    17-0-0/w PTR         r     1 @SUBEXEC_SIZE             17-0-0/w PTR         r     1 @SUBEXEC_SIZE
    17-0-0/w PTR         r     1 @SUBEXEC_SIZE             11-0-0/w PTR         r     1 DATA$
    12-0-0/w PTR         r     1 DCWLIST$                  *0-0-0/w PTR         r     1 DCWLIST$
    12-0-0/w PTR         r     1 DCWLIST$                  *0-0-0/c CHAR(23)    r     1 DECKFILE_KEY_VALUE
    11-0-0/w UBIN        r     1 DISPATCHER_ENTRY(0:2)
    22-0-0/w UBIN        r     1 ERROR_CODE                22-0-0/w UBIN        r     1 I
    13-0-0/w UBIN        r     1 ISC_OPCODE                *0-0-0/c CHAR(24)    r     1 KEY_VALUE
    23-0-0/w UBIN        r     1 LAST_DCW                  22-0-0/w UBIN        r     1 LAST_WORD
    21-0-0/w PTR         r     1 LOAD$                     23-0-0/w UBIN(18)    r     1 LOAD_OFFSET
    24-0-0/w UBIN        r     1 LOAD_SIZE                 13-0-0/w UBIN        r     1 LOAD_WORDS
    *0-0-0/w UBIN        r     1 LOAD_WORDS                *0-0-0/w UBIN        r     1 LOAD_WORDS
    25-0-0/w UBIN(18)    r     1 MAX_LOAD                  34-0-0/w PTR         r     1 MME_INSTR$
    24-0-0/d STRC(252)   r     1 MREG
    *0-0-0/w UBIN        r     1 QUEUE_ENTRY(0:2)
    *0-0-0/w UBIN        r     1 REQUEST_TYPE              35-0-0/w SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/w UBIN(18)    r     1 SERVICE_CODE              26-0-0/w PTR         r     1 STATUS$
    14-0-0/w EPTR        r     1 SUBEXEC$                  11-0-0/w UBIN        r     1 SUBEXEC_SIZE
    *0-0-0/w UBIN        r     1 SUBEXEC_SIZE              *0-0-0/w UBIN        r     1 SUBEXEC_SIZE
    *0-0-0/w UBIN        r     1 SUBEXEC_SIZE              *0-0-0/w UBIN        r     1 SUBEXEC_SIZE
    *0-0-0/w UBIN        r     1 SUBEXEC_SIZE              14-0-0/w UBIN        r     1 WORD2_

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

    11-0-0/w STRC        r     1 DATA_PTR
    11-0-0/b UBIN(18)    r         2 ADR

    *0-0-0/w STRC        r     1 DCWLIST_PTR
     0-0-0/b UBIN(18)    r         2 ADR

    12-0-0/w STRC        r     1 DCWLIST_PTR
    12-0-0/b UBIN(18)    r         2 ADR

PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:93   
    13-0-0/w STRC        r     1 ISC
    13-0-0/b BIT (6)     r         2 OPCODE

    21-0-0/w STRC        r     1 LOAD_
    21-0-0/b UBIN(18)    r         2 ADDRESS
    21-2-0/b UBIN(18)    r         2 SEGID

    15-0-0/w STRC(252)   r     1 MME
    15-0-0/b STRC        r         2 INST
    15-0-0/b SBIN(18)    r          3 NO
    16-0-0/w UBIN        r         2 WD_1
    17-0-0/w UBIN        r         2 WD_2

    11-0-0/w STRC(108)   r     1 Q_ENTRY
    11-0-0/w UBIN        r         2 EVENT_ID

    14-0-0/w STRC(72)    r     1 STATUS
    14-0-0/w UBIN        r         2 WD1
    15-0-0/w UBIN        r         2 WD2

    26-0-0/w STRC        r     1 STATUS_PTR
    26-0-0/b UBIN(18)    r         2 ADR

    *0-0-0/w STRC        r     1 SUBEXEC_PTR
     0-0-0/b UBIN(18)    r         2 ADR
     0-2-0/b UBIN(18)    r         2 SEGID

    14-0-0/w STRC        r     1 WORD2
    14-2-0/b UBIN(18)    r         2 ADR


  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w UBIN        r     1 TOP$EVENT_ID
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:94   
     0-0-0/b BIT (72)    r     1 TOP$STATUS

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/h STRC(45)    r     1 TOF$BAR
     0-0-0/h STRC(18)    r         2 CURRENT
     0-2-0/h STRC(18)    r         2 FULL
     0-2-0/b UBIN(9)     r          3 BASE
     0-3-0/b UBIN(9)     r          3 SIZE

     0-0-0/w STRC(396)   r     1 TOQ$DCP
     0-0-0/c STRC(18)    r         2 PF
     0-0-0/b BIT         r          3 ENABLED
     0-1-0/c UBIN(9)     r          3 REASON
     1-0-0/w STRC(108)   r         2 SE
     1-0-0/c CHAR(4)     r          3 EDIT_NAME
     2-0-0/c CHAR(3)     r          3 CATALOG
     3-0-0/w UBIN        r          3 ADDRESS

     0-0-0/w STRC(495)   r     1 TOT$ECP
     6-0-0/w UBIN        r         2 DYNAMIC_PAGE_COUNT
     7-0-0/w STRC(216)   r         2 SUBEXEC
     7-0-0/w UBIN        r          3 CURRENT
    10-0-0/w UBIN        r          3 ADDRESS
    11-0-0/c CHAR(4)     r          3 EDIT_NAME


  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 LOAD_WORD

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:95   

     0-0-0/d STRC(8856)  r     1 B$JIT
   204-0-0/h UBIN(18)    r         2 TDP



   Procedure TOD$DISPATCHER requires 525 words for executable code.
   Procedure TOD$DISPATCHER requires 38 words of local(AUTO) storage.

    No errors detected in file TOD$DISPATCHER.:E05TSI    .
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:96   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:97   
          MINI XREF LISTING

B$JIT.CPFLAGS1.SLEAZE
       444**DCL       444--REDEF
B$JIT.ERR.MID
       351**DCL       351--REDEF
B$JIT.JRESPEAK
       512**DCL       513--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
       621**DCL       621--REDEF     622--REDEF
B$JIT.PNR
       525**DCL       525--REDEF
B$JIT.TDP
       510**DCL      8888>>ASSIGN
B$JIT.TSLINE
       619**DCL       620--REDEF
B$JIT$
      8547**DCL       345--IMP-PTR  8888>>ASSIGN
CALL_SEQUENCE IN PROCEDURE LOAD_SUBEXEC
      9099**DCL      9124<<ASSIGN   9133<>CALL
CALL_SEQUENCE.DCWLIST_ADR IN PROCEDURE LOAD_SUBEXEC
      9100**DCL      9125<<ASSIGN
CALL_SEQUENCE.STATUS_ADR IN PROCEDURE LOAD_SUBEXEC
      9101**DCL      9127<<ASSIGN
DATA$ IN PROCEDURE TOD$INTERSLAVE_WRITE
      9232**DCL      9233--REDEF    9307<<ASSIGN
DATA_PTR.ADR IN PROCEDURE TOD$INTERSLAVE_WRITE
      9234**DCL      9309>>ASSIGN
DCW IN PROCEDURE TOD$INTERSLAVE_WRITE
      9236**DCL      9310--ASSIGN
DCW.ADR IN PROCEDURE TOD$INTERSLAVE_WRITE
      9237**DCL      9309<<ASSIGN
DCWLIST IN PROCEDURE SETUP_DCW_LIST
      9023**DCL      9039<<ASSIGN   9049--ASSIGN
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:98   
DCWLIST.ADDRESS IN PROCEDURE SETUP_DCW_LIST
      9024**DCL      9040<<ASSIGN   9043<<ASSIGN   9043>>ASSIGN   9046<<ASSIGN   9046>>ASSIGN
DCWLIST.TYPE IN PROCEDURE SETUP_DCW_LIST
      9027**DCL      9041<<ASSIGN   9044<<ASSIGN   9047<<ASSIGN
DCWLIST.WORD_COUNT IN PROCEDURE SETUP_DCW_LIST
      9028**DCL      9048<<ASSIGN
DCWLIST$ IN PROCEDURE SETUP_DCW_LIST
      9019**DCL      9016--PROC     9049<<ASSIGN
DCWLIST$ IN PROCEDURE TOD$INIT_SUBEXEC
      8882**DCL      8892<>CALL     8894<>CALL
DCWLIST$ IN PROCEDURE TOD$INTERSLAVE_WRITE
      9239**DCL      9240--REDEF    9310<<ASSIGN
DCWLIST_PTR IN PROCEDURE LOAD_SUBEXEC
      9096**DCL      9092--PROC
DCWLIST_PTR.ADR IN PROCEDURE LOAD_SUBEXEC
      9097**DCL      9125>>ASSIGN
DCWLIST_PTR.ADR IN PROCEDURE TOD$INTERSLAVE_WRITE
      9241**DCL      9312>>ASSIGN
DECKFILE_KEY_VALUE IN PROCEDURE GET_SUBEXEC_KEY
      9063**DCL      9061--PROC     9074<<ASSIGN   9076<<ASSIGN   9078<<ASSIGN   9080<<ASSIGN
DISPATCHER_ENTRY IN PROCEDURE TOD$POLTS_IO_DONE
      9343**DCL      9344--REDEF    9354<<ASSIGN   9356>>ASSIGN   9357>>ASSIGN
ERROR IN PROCEDURE LOAD_SUBEXEC
      9143**LABEL    9133--CALLALT
ERROR_CODE IN PROCEDURE LOAD_SUBEXEC
      9112**DCL      9128<<ASSIGN   9133<>CALL
FPTN_
      8485**DCL      8488--REDEF
GDP_FPT IN PROCEDURE GET_MORE_PAGES
      8964**DCL      8973<>CALL
GDP_FPT.V IN PROCEDURE GET_MORE_PAGES
      8964**DCL      8964--DCLINIT
GDP_FPT.V.PAGES# IN PROCEDURE GET_MORE_PAGES
      8965**DCL      8972<<ASSIGN
GET_MORE_PAGES IN PROCEDURE TOD$INIT_SUBEXEC
      8943**PROC     8890--CALL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:99   
GET_SUBEXEC_KEY IN PROCEDURE TOD$INIT_SUBEXEC
      9061**PROC     8893--CALL
GET_SUBEXEC_SIZE IN PROCEDURE TOD$INIT_SUBEXEC
      8912**PROC     8889--CALL
I IN PROCEDURE SETUP_DCW_LIST
      9021**DCL      9042<<DOINDEX  9043>>ASSIGN   9043>>ASSIGN   9044>>ASSIGN
IS$
      8488**DCL      8896>>ASSIGN
ISC.OPCODE IN PROCEDURE TOD$INTERSLAVE_WRITE
      9245**DCL      9306<<ASSIGN
ISC_OPCODE IN PROCEDURE TOD$INTERSLAVE_WRITE
      9243**DCL      9244--REDEF    9308>>ASSIGN
KEY_VALUE IN PROCEDURE LOAD_SUBEXEC
      9095**DCL      9092--PROC     9133<>CALL
KEY_VALUE IN PROCEDURE TOD$INIT_SUBEXEC
      8878**DCL      8894<>CALL
KEY_VALUE.VALUE IN PROCEDURE TOD$INIT_SUBEXEC
      8880**DCL      8893<>CALL     9169>>ASSIGN
LAST_DCW IN PROCEDURE SETUP_DCW_LIST
      9022**DCL      9032<<ASSIGN   9033>>IF       9042>>DOINDEX  9046>>ASSIGN   9046>>ASSIGN   9047>>ASSIGN
      9048>>ASSIGN
LAST_WORD IN PROCEDURE GET_MORE_PAGES
      8952**DCL      8977<<ASSIGN   8978>>DOINDEX
LOAD$ IN PROCEDURE GET_MORE_PAGES
      8947**DCL      8948--REDEF    8979>>ASSIGN
LOAD_.ADDRESS IN PROCEDURE GET_MORE_PAGES
      8949**DCL      8978<<DOINDEX
LOAD_.SEGID IN PROCEDURE GET_MORE_PAGES
      8950**DCL      8976<<ASSIGN
LOAD_ERROR IN PROCEDURE TOD$INIT_SUBEXEC
      8902**LABEL    8894--CALLALT
LOAD_OFFSET IN PROCEDURE LOAD_SUBEXEC
      9113**DCL      9131<<ASSIGN   9133<>CALL
LOAD_SIZE IN PROCEDURE LOAD_SUBEXEC
      9114**DCL      9129<<ASSIGN   9133<>CALL
LOAD_SUBEXEC IN PROCEDURE TOD$INIT_SUBEXEC
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:100  
      9092**PROC     8894--CALL
LOAD_WORD IN PROCEDURE GET_MORE_PAGES
      8951**DCL      8979<<ASSIGN
LOAD_WORDS IN PROCEDURE GET_MORE_PAGES
      8946**DCL      8943--PROC     8981<<ASSIGN
LOAD_WORDS IN PROCEDURE SETUP_DCW_LIST
      9020**DCL      9016--PROC     9032>>ASSIGN   9048>>ASSIGN
LOAD_WORDS IN PROCEDURE TOD$INIT_SUBEXEC
      8883**DCL      8890<>CALL     8892<>CALL
M$GDP
      6149**DCL-ENT  8973--CALL
MAX_LOAD IN PROCEDURE LOAD_SUBEXEC
      9115**DCL      9132<<ASSIGN   9133<>CALL
MME IN PROCEDURE TOD$INTERSLAVE_WRITE
      9263**DCL      9315<>CALL
MME.INST.NO IN PROCEDURE TOD$INTERSLAVE_WRITE
      9266**DCL      9314<<ASSIGN
MME.INSTR IN PROCEDURE TOD$INTERSLAVE_WRITE
      9264**DCL      9265--REDEF
MME.WD_1 IN PROCEDURE TOD$INTERSLAVE_WRITE
      9268**DCL      9308<<ASSIGN
MME.WD_2 IN PROCEDURE TOD$INTERSLAVE_WRITE
      9269**DCL      9311>>ASSIGN   9313<<ASSIGN
MME_INSTR$ IN PROCEDURE TOD$INTERSLAVE_WRITE
      9298**DCL      9315<>CALL
MREG IN PROCEDURE TOD$INTERSLAVE_WRITE
      9284**DCL      9315<>CALL
QUEUE_ENTRY
      8475**DCL        19--PROC     8752>>ASSIGN
Q_ENTRY.EVENT_ID IN PROCEDURE TOD$POLTS_IO_DONE
      9345**DCL      9355>>ASSIGN
REQUEST_TYPE
      8473**DCL        19--PROC     8715>>DOCASE
RETURN_DELTA IN PROCEDURE TOD$INTERSLAVE_WRITE
      9301**DCL      9315<>CALL
SAVE_SUBEXEC_DEBUG_INFO IN PROCEDURE TOD$INIT_SUBEXEC
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:101  
      9161**PROC     8895--CALL
SERVICE_CODE
      8474**DCL        19--PROC     8751>>ASSIGN
SERVICE_IN_PROGRESS IN PROCEDURE TOD$SERVICE_ENTRY
      8792**DCL      8796>>IF       8802<<ASSIGN   8808<<ASSIGN   8821<<ASSIGN
SETUP_DCW_LIST IN PROCEDURE TOD$INIT_SUBEXEC
      9016**PROC     8892--CALL
SET_BARS IN PROCEDURE TOD$INIT_SUBEXEC
      8992**PROC     8891--CALL
SET_SUBEXEC$ IN PROCEDURE TOD$INIT_SUBEXEC
      9184**PROC     8897--CALL
STATUS IN PROCEDURE LOAD_SUBEXEC
      9116**DCL      9126--ASSIGN   9130<<ASSIGN
STATUS IN PROCEDURE TOD$POLTS_IO_DONE
      9348**DCL      9358>>ASSIGN
STATUS.WD1 IN PROCEDURE TOD$POLTS_IO_DONE
      9349**DCL      9356<<ASSIGN
STATUS.WD2 IN PROCEDURE TOD$POLTS_IO_DONE
      9350**DCL      9357<<ASSIGN
STATUS$ IN PROCEDURE LOAD_SUBEXEC
      9117**DCL      9118--REDEF    9126<<ASSIGN
STATUS_PTR.ADR IN PROCEDURE LOAD_SUBEXEC
      9119**DCL      9127>>ASSIGN
SUBEXEC$ IN PROCEDURE TOD$INIT_SUBEXEC
      8884**DCL      8897<>CALL     8898>>CALL
SUBEXEC_KEYS.COLTS IN PROCEDURE GET_SUBEXEC_KEY
      9067**DCL      9078>>ASSIGN
SUBEXEC_KEYS.MOLTS IN PROCEDURE GET_SUBEXEC_KEY
      9068**DCL      9080>>ASSIGN
SUBEXEC_KEYS.POLTS IN PROCEDURE GET_SUBEXEC_KEY
      9065**DCL      9074>>ASSIGN
SUBEXEC_KEYS.SOLTS IN PROCEDURE GET_SUBEXEC_KEY
      9066**DCL      9076>>ASSIGN
SUBEXEC_PTR IN PROCEDURE SET_SUBEXEC$
      9186**DCL      9184--PROC     9196<>CALL     9198<>CALL
SUBEXEC_PTR.ADR IN PROCEDURE SET_SUBEXEC$
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:102  
      9187**DCL      9192<<ASSIGN
SUBEXEC_PTR.SEGID IN PROCEDURE SET_SUBEXEC$
      9188**DCL      9193<<ASSIGN
SUBEXEC_SIZE IN PROCEDURE GET_MORE_PAGES
      8945**DCL      8943--PROC     8971>>ASSIGN   8972>>ASSIGN   8977>>ASSIGN   8981>>ASSIGN
SUBEXEC_SIZE IN PROCEDURE GET_SUBEXEC_SIZE
      8914**DCL      8912--PROC     8925<<ASSIGN   8927<<ASSIGN   8929<<ASSIGN   8931<<ASSIGN
SUBEXEC_SIZE IN PROCEDURE LOAD_SUBEXEC
      9094**DCL      9092--PROC     9132>>ASSIGN
SUBEXEC_SIZE IN PROCEDURE SETUP_DCW_LIST
      9018**DCL      9016--PROC
SUBEXEC_SIZE IN PROCEDURE SET_BARS
      8994**DCL      8992--PROC     9001>>ASSIGN   9003>>ASSIGN
SUBEXEC_SIZE IN PROCEDURE TOD$INIT_SUBEXEC
      8881**DCL      8889<>CALL     8890<>CALL     8891<>CALL     8892<>CALL     8894<>CALL
SUBEXEC_SIZES.COLTS IN PROCEDURE GET_SUBEXEC_SIZE
      8918**DCL      8929>>ASSIGN
SUBEXEC_SIZES.MOLTS IN PROCEDURE GET_SUBEXEC_SIZE
      8919**DCL      8931>>ASSIGN
SUBEXEC_SIZES.POLTS IN PROCEDURE GET_SUBEXEC_SIZE
      8916**DCL      8925>>ASSIGN
SUBEXEC_SIZES.SOLTS IN PROCEDURE GET_SUBEXEC_SIZE
      8917**DCL      8927>>ASSIGN
TOD$ADVANCE_QUEUE IN PROCEDURE TOD$SERVICE_ENTRY
      9369**PROC     8809--CALL     8819--CALL
TOD$BUILD_ENTRY
      8741**PROC     8717--CALL
TOD$INIT_SUBEXEC IN PROCEDURE TOD$SERVICE_ENTRY
      8876**PROC     8810--CALL
TOD$INTERSLAVE_WRITE IN PROCEDURE TOD$SERVICE_ENTRY
      9230**PROC     8812--CALL
TOD$POLTS_IO_DONE IN PROCEDURE TOD$SERVICE_ENTRY
      9341**PROC     8814--CALL
TOD$QUEUE.CURR_SERVICE
      8570**DCL      8806>>DOCASE   9307>>ASSIGN   9354>>ASSIGN   9375>>IF       9376<<ASSIGN   9377<<ASSIGN
      9377>>ASSIGN
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:103  
TOD$QUEUE.E.QENTRY
      8561**DCL      8752<<ASSIGN   9307--ASSIGN   9354>>ASSIGN
TOD$QUEUE.E.SERV_CODE
      8559**DCL      8751<<ASSIGN   8806>>DOCASE
TOD$QUEUE.ENTRIES
      8572**DCL      8745>>IF       8753<<ASSIGN   8753>>ASSIGN   8803>>IF       9374<<ASSIGN   9374>>ASSIGN
TOD$QUEUE.NEXT_SLOT
      8568**DCL      8751>>ASSIGN   8752>>ASSIGN   8754>>IF       8755<<ASSIGN   8756<<ASSIGN   8756>>ASSIGN
TOD$SERVICE_ENTRY
      8790**PROC     8719--CALL
TOD$SPA$
      8679**DCL      8896<<ASSIGN
TOD_ERROR_CODE
      8505**DCL      8722<>CALL     8748<>CALL     8799<>CALL     8817<>CALL     8903<>CALL     9036<>CALL
TOD_ERROR_CODE.ERR#
      8535**DCL      8721<<ASSIGN   8747<<ASSIGN   8798<<ASSIGN   8816<<ASSIGN   8902<<ASSIGN   9035<<ASSIGN
TOF$BAR.CURRENT
      8585**DCL      9005<<ASSIGN
TOF$BAR.FULL
      8590**DCL      9005>>ASSIGN
TOF$BAR.FULL.BASE
      8591**DCL      8998<<ASSIGN
TOF$BAR.FULL.SIZE
      8593**DCL      9001<<ASSIGN   9003<<ASSIGN
TOG$GCOS_MMES
      8687**DCL-ENT  9315--CALL
TOL$GET_DECK
      8685**DCL-ENT  9133--CALL
TOP$EVENT_ID
      8680**DCL      9355<<ASSIGN
TOP$POLTS_IO
      8688**DCL-ENT  9359--CALL
TOP$STATUS
      8681**DCL      9358<<ASSIGN
TOQ$DCP.PF.ENABLED
      8609**DCL      9165>>IF
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:104  
TOQ$DCP.PF.REASON
      8616**DCL      9170<<ASSIGN
TOQ$DCP.SE.ADDRESS
      8620**DCL      9168<<ASSIGN
TOQ$DCP.SE.CATALOG
      8619**DCL      9169<<ASSIGN
TOQ$DCP.SE.EDIT_NAME
      8618**DCL      9167<<ASSIGN
TOQ$DEBUG
      8686**DCL-ENT  9171--CALL
TOT$ECP.DYNAMIC_PAGE_COUNT
      8657**DCL      8971<<ASSIGN   8971>>ASSIGN
TOT$ECP.SUBEXEC.ADDRESS
      8662**DCL      8888<<ASSIGN   8896>>ASSIGN   8977>>ASSIGN   8978>>DOINDEX  9040>>ASSIGN   9132>>ASSIGN
      9168>>ASSIGN   9192>>ASSIGN
TOT$ECP.SUBEXEC.CURRENT
      8660**DCL      8923>>DOCASE   8999>>DOCASE   9072>>DOCASE   9194>>DOCASE
TOT$ECP.SUBEXEC.EDIT_NAME
      8664**DCL      9133<>CALL     9167>>ASSIGN
TOT$ECP.TEST_REQ
      8640**DCL      8642--REDEF
TOT$PACT_SNUMB
      8690**DCL-ENT  9198--CALL
TOT$SOLTS_SNUMB
      8689**DCL-ENT  9196--CALL
TOX$ERROR
      8691**DCL-ENT  8903--CALL     9036--CALL
TOX$SCREECH
      8692**DCL-ENT  8722--CALL     8748--CALL     8799--CALL     8817--CALL
WORD2 IN PROCEDURE TOD$INTERSLAVE_WRITE
      9247**DCL      9250--REDEF
WORD2.ADR IN PROCEDURE TOD$INTERSLAVE_WRITE
      9249**DCL      9312<<ASSIGN
WORD2_ IN PROCEDURE TOD$INTERSLAVE_WRITE
      9250**DCL      9311<<ASSIGN   9313>>ASSIGN
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:105  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:106  
              FULL UREF LISTING

B$JIT
       345**DCL
B$JIT.ACCEPT_FLAGS
       498**DCL
B$JIT.ACCEPT_FLAGS.ANNOUNCE
       498**DCL
B$JIT.ACCEPT_FLAGS.BROADCAST
       498**DCL
B$JIT.ACCEPT_FLAGS.SEND
       498**DCL
B$JIT.ACCESS
       618**DCL
B$JIT.ACCESS.FORMS
       618**DCL
B$JIT.ACCESS.PACKS
       618**DCL
B$JIT.ACCESS.TAPES
       618**DCL
B$JIT.ACCN
       350**DCL
B$JIT.APATTR
       623**DCL
B$JIT.ARECX
       618**DCL
B$JIT.BILL
       498**DCL
B$JIT.BLINDACCTNG
       498**DCL
B$JIT.BUDLIM
       487**DCL
B$JIT.CALCNT
       524**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:107  
B$JIT.CCARS
       438**DCL
B$JIT.CCBUF
       438**DCL
B$JIT.CCDISP
       438**DCL
B$JIT.CHECK_CFU
       520**DCL
B$JIT.CLRES
       617**DCL
B$JIT.CPFLAGS1
       439**DCL
B$JIT.CPFLAGS1.BRK
       443**DCL
B$JIT.CPFLAGS1.BUFFULL
       443**DCL
B$JIT.CPFLAGS1.CFREAD
       443**DCL
B$JIT.CPFLAGS1.DELTA
       444**DCL
B$JIT.CPFLAGS1.DONTRFEXT3
       440**DCL
B$JIT.CPFLAGS1.DRIBBLE
       442**DCL
B$JIT.CPFLAGS1.ECHO
       443**DCL
B$JIT.CPFLAGS1.ECHO_LINK
       440**DCL
B$JIT.CPFLAGS1.EXIT#
       442**DCL
B$JIT.CPFLAGS1.FIRSTCP
       441**DCL
B$JIT.CPFLAGS1.INITIALIZE
       442**DCL
B$JIT.CPFLAGS1.JSTEP
       439**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:108  
B$JIT.CPFLAGS1.KEEPDS
       442**DCL
B$JIT.CPFLAGS1.LASTCP
       441**DCL
B$JIT.CPFLAGS1.LASTCPEXISTS
       441**DCL
B$JIT.CPFLAGS1.LNKPMME
       440**DCL
B$JIT.CPFLAGS1.LOGOFF
       439**DCL
B$JIT.CPFLAGS1.NOTIFY
       442**DCL
B$JIT.CPFLAGS1.PROCACCT
       442**DCL
B$JIT.CPFLAGS1.PROTECT
       443**DCL
B$JIT.CPFLAGS1.RUND
       439**DCL
B$JIT.CPFLAGS1.SCREECH
       443**DCL
B$JIT.CPFLAGS1.SKIPABORT
       442**DCL
B$JIT.CPFLAGS1.SOMENOTIFY
       441**DCL
B$JIT.CPFLAGS1.SSTART
       440**DCL
B$JIT.CPFLAGS1.STARPROC
       441**DCL
B$JIT.CPFLAGS1.STARSACC
       441**DCL
B$JIT.CPFLAGS1.STEPACCT
       443**DCL
B$JIT.CPFLAGS1.STEPLMT
       443**DCL
B$JIT.CPFLAGS1.TESTMODE
       441**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:109  
B$JIT.CPFLAGS1.TRMNATE
       442**DCL
B$JIT.CPFLAGS1.WHEN_INPUT
       440**DCL
B$JIT.CPFLAGS1.YC
       439**DCL
B$JIT.CPFLAGS1.YCGET
       440**DCL
B$JIT.CPFLAGS1.YCPMME
       440**DCL
B$JIT.CSLEV
       505**DCL
B$JIT.CTIME
       523**DCL
B$JIT.CURPNUM
       604**DCL
B$JIT.CURRCORE
       512**DCL
B$JIT.CURSUDO
       619**DCL
B$JIT.CURTMPDP
       519**DCL
B$JIT.DCB$
       518**DCL
B$JIT.DCBNO
       431**DCL
B$JIT.DDLL
       508**DCL
B$JIT.DDUL
       508**DCL
B$JIT.DEFEXP
       518**DCL
B$JIT.DEFPRI
       498**DCL
B$JIT.DLL
       508**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:110  
B$JIT.DO$
       518**DCL
B$JIT.DUL
       508**DCL
B$JIT.ENQS
       623**DCL
B$JIT.ERR
       350**DCL
B$JIT.ERR.CODE
       351**DCL
B$JIT.ERR.FCG
       350**DCL
B$JIT.ERR.MON
       351**DCL
B$JIT.ERR.SEV
       351**DCL
B$JIT.ERR.UMID
       351**DCL
B$JIT.EUP
       510**DCL
B$JIT.EXTUS
       526**DCL
B$JIT.FACCN
       350**DCL
B$JIT.FACNACS
       518**DCL
B$JIT.FACNCM
       520**DCL
B$JIT.FBUC
       510**DCL
B$JIT.FBUL
       510**DCL
B$JIT.FEXT
       518**DCL
B$JIT.FPSN
       431**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:111  
B$JIT.FRS
       546**DCL
B$JIT.GAC
       519**DCL
B$JIT.HIGHPNUM
       604**DCL
B$JIT.HPSN
       518**DCL
B$JIT.IDELTAT
       524**DCL
B$JIT.INSTWORD
       438**DCL
B$JIT.INTER
       617**DCL
B$JIT.INTTIME
       523**DCL
B$JIT.JOBNAME
       499**DCL
B$JIT.JOBUNIT
       439**DCL
B$JIT.JORG
       486**DCL
B$JIT.JPEAK
       512**DCL
B$JIT.JSLEV
       487**DCL
B$JIT.JTMPDPPK
       519**DCL
B$JIT.JUNK
       550**DCL
B$JIT.JUNK2
       604**DCL
B$JIT.LANG
       486**DCL
B$JIT.LBJID
       526**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:112  
B$JIT.LLL
       514**DCL
B$JIT.LNKCNT
       550**DCL
B$JIT.LOCK
       499**DCL
B$JIT.LOGONTIME
       487**DCL
B$JIT.LUL
       514**DCL
B$JIT.MAXCORE
       511**DCL
B$JIT.MAXENQ
       623**DCL
B$JIT.MAXEXP
       518**DCL
B$JIT.MAXPRI
       498**DCL
B$JIT.MAXTMPDP
       519**DCL
B$JIT.MMFLGS
       511**DCL
B$JIT.MMFLGS.FREE_PPGS
       511**DCL
B$JIT.MODE
       345**DCL
B$JIT.MOUNTS
       618**DCL
B$JIT.MRT
       524**DCL
B$JIT.MSGID
       499**DCL
B$JIT.MSGID.PRIMARY
       499**DCL
B$JIT.MSGID.XT
       500**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:113  
B$JIT.NEXTCC
       492**DCL
B$JIT.NODOEVER
       617**DCL
B$JIT.NOLOEVER
       617**DCL
B$JIT.NOPOEVER
       617**DCL
B$JIT.NUTS
       525**DCL
B$JIT.OLTA
       618**DCL
B$JIT.ORIGINATOR_MODE
       617**DCL
B$JIT.ORIGINATOR_PORT
       620**DCL
B$JIT.ORIGINATOR_PORT.FROM_CR.DEVICE
       621**DCL
B$JIT.ORIGINATOR_PORT.FROM_CR.TNAME
       621**DCL
B$JIT.ORIGINATOR_PORT.FROM_GHOST
       621**DCL
B$JIT.ORIGINATOR_PORT.FROM_GHOST.SYSID
       621**DCL
B$JIT.ORIGINATOR_PORT.FROM_INT
       622**DCL
B$JIT.ORIGINATOR_PORT.FROM_INT.SYSID
       622**DCL
B$JIT.ORIGINATOR_PORT.FROM_INT.TSLINE
       622**DCL
B$JIT.OUTPRIO
       431**DCL
B$JIT.PCADS
       514**DCL
B$JIT.PCC
       509**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:114  
B$JIT.PCD
       509**DCL
B$JIT.PCDD
       510**DCL
B$JIT.PCDDS
       513**DCL
B$JIT.PCDS
       509**DCL
B$JIT.PCL
       514**DCL
B$JIT.PCP
       509**DCL
B$JIT.PCROS
       509**DCL
B$JIT.PCV
       514**DCL
B$JIT.PLL
       508**DCL
B$JIT.PMEMTIM
       524**DCL
B$JIT.PMME_COUNT
       622**DCL
B$JIT.PMME_DATA
       622**DCL
B$JIT.PMME_DATA.CPU
       622**DCL
B$JIT.PMME_DATA.I_O
       622**DCL
B$JIT.PMME_DATA.MISC1
       622**DCL
B$JIT.PMME_DATA.MISC2
       623**DCL
B$JIT.PPC
       511**DCL
B$JIT.PPRIV
       406**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:115  
B$JIT.PPRIV.CNTRLC
       406**DCL
B$JIT.PPRIV.CNTRLD
       406**DCL
B$JIT.PPRIV.EFT
       406**DCL
B$JIT.PPRIV.EL
       406**DCL
B$JIT.PPRIV.LABEL
       407**DCL
B$JIT.PPRIV.NETCON
       407**DCL
B$JIT.PPRIV.PADMIN
       408**DCL
B$JIT.PPRIV.PIGC
       407**DCL
B$JIT.PPRIV.PIGD
       407**DCL
B$JIT.PPRIV.PIGETTE
       409**DCL
B$JIT.PPRIV.RATES
       408**DCL
B$JIT.PPRIV.REPLAY
       408**DCL
B$JIT.PPRIV.SPIDERC
       407**DCL
B$JIT.PPRIV.SPIDERD
       407**DCL
B$JIT.PPRIV.SUPER
       407**DCL
B$JIT.PPRIV.SUPERAUTH
       407**DCL
B$JIT.PPRIV.SUPERD
       408**DCL
B$JIT.PPRIV.SUPERFORM
       408**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:116  
B$JIT.PPRIV.SUPERWSN
       408**DCL
B$JIT.PPRIV.SYSCON
       408**DCL
B$JIT.PPRIV.VOLINIT
       408**DCL
B$JIT.PRDPRM
       519**DCL
B$JIT.PRFLAGS
       434**DCL
B$JIT.PRFLAGS.COMMENT
       434**DCL
B$JIT.PRFLAGS.CONTINUED
       434**DCL
B$JIT.PRFLAGS.CORRECT
       435**DCL
B$JIT.PRFLAGS.EXPOUND
       435**DCL
B$JIT.PRFLAGS.LIST
       434**DCL
B$JIT.PRFLAGS.LS
       434**DCL
B$JIT.PRFLAGS.NOSCAN
       435**DCL
B$JIT.PRFLAGS.NSSYNTAX
       434**DCL
B$JIT.PRFLAGS.OU
       434**DCL
B$JIT.PRFLAGS.OUTPUT
       434**DCL
B$JIT.PRFLAGS.POINT
       435**DCL
B$JIT.PRFLAGS.POSITION
       435**DCL
B$JIT.PRFLAGS.SI
       434**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:117  
B$JIT.PRFLAGS.UI
       434**DCL
B$JIT.PRFLAGS.WHEN
       435**DCL
B$JIT.PRIINC
       525**DCL
B$JIT.PRIOB
       523**DCL
B$JIT.PRIOCORE
       511**DCL
B$JIT.PRIOR_CP
       614**DCL
B$JIT.PRIV
       351**DCL
B$JIT.PRIV.ACTIVE
       351**DCL
B$JIT.PRIV.ACTIVE.ASAVE
       353**DCL
B$JIT.PRIV.ACTIVE.CFEP
       354**DCL
B$JIT.PRIV.ACTIVE.CQ
       354**DCL
B$JIT.PRIV.ACTIVE.DISPJOB
       353**DCL
B$JIT.PRIV.ACTIVE.DOMANE
       352**DCL
B$JIT.PRIV.ACTIVE.EXMM
       355**DCL
B$JIT.PRIV.ACTIVE.EXPM
       354**DCL
B$JIT.PRIV.ACTIVE.FMBLK
       351**DCL
B$JIT.PRIV.ACTIVE.FMDIAG
       352**DCL
B$JIT.PRIV.ACTIVE.FMEFT
       351**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:118  
B$JIT.PRIV.ACTIVE.FMREAD
       352**DCL
B$JIT.PRIV.ACTIVE.FMSEC
       352**DCL
B$JIT.PRIV.ACTIVE.GPP
       353**DCL
B$JIT.PRIV.ACTIVE.INTCON
       354**DCL
B$JIT.PRIV.ACTIVE.IOQ
       354**DCL
B$JIT.PRIV.ACTIVE.IOQW
       354**DCL
B$JIT.PRIV.ACTIVE.JIT
       355**DCL
B$JIT.PRIV.ACTIVE.MAXMEM
       355**DCL
B$JIT.PRIV.ACTIVE.MFEP
       354**DCL
B$JIT.PRIV.ACTIVE.MODE
       352**DCL
B$JIT.PRIV.ACTIVE.MSYS
       355**DCL
B$JIT.PRIV.ACTIVE.PM
       354**DCL
B$JIT.PRIV.ACTIVE.SCREECH
       353**DCL
B$JIT.PRIV.ACTIVE.SNAP
       353**DCL
B$JIT.PRIV.ACTIVE.SPCLMM
       355**DCL
B$JIT.PRIV.ACTIVE.SYSACCT
       352**DCL
B$JIT.PRIV.ACTIVE.SYSCON
       353**DCL
B$JIT.PRIV.ACTIVE.SYSLOG
       354**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:119  
B$JIT.PRIV.ACTIVE.TND
       354**DCL
B$JIT.PRIV.AUTH
       391**DCL
B$JIT.PRIV.AUTH.ASAVE
       392**DCL
B$JIT.PRIV.AUTH.CFEP
       393**DCL
B$JIT.PRIV.AUTH.CQ
       393**DCL
B$JIT.PRIV.AUTH.DISPJOB
       392**DCL
B$JIT.PRIV.AUTH.DOMANE
       391**DCL
B$JIT.PRIV.AUTH.EXMM
       394**DCL
B$JIT.PRIV.AUTH.EXPM
       393**DCL
B$JIT.PRIV.AUTH.FMBLK
       391**DCL
B$JIT.PRIV.AUTH.FMDIAG
       391**DCL
B$JIT.PRIV.AUTH.FMEFT
       391**DCL
B$JIT.PRIV.AUTH.FMREAD
       391**DCL
B$JIT.PRIV.AUTH.FMSEC
       391**DCL
B$JIT.PRIV.AUTH.GPP
       393**DCL
B$JIT.PRIV.AUTH.INTCON
       393**DCL
B$JIT.PRIV.AUTH.IOQ
       393**DCL
B$JIT.PRIV.AUTH.IOQW
       393**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:120  
B$JIT.PRIV.AUTH.JIT
       394**DCL
B$JIT.PRIV.AUTH.MAXMEM
       394**DCL
B$JIT.PRIV.AUTH.MFEP
       393**DCL
B$JIT.PRIV.AUTH.MODE
       391**DCL
B$JIT.PRIV.AUTH.MSYS
       394**DCL
B$JIT.PRIV.AUTH.PM
       394**DCL
B$JIT.PRIV.AUTH.SCREECH
       392**DCL
B$JIT.PRIV.AUTH.SNAP
       392**DCL
B$JIT.PRIV.AUTH.SPCLMM
       394**DCL
B$JIT.PRIV.AUTH.SYSACCT
       391**DCL
B$JIT.PRIV.AUTH.SYSCON
       392**DCL
B$JIT.PRIV.AUTH.SYSLOG
       393**DCL
B$JIT.PRIV.AUTH.TND
       394**DCL
B$JIT.PRIV.JOB
       394**DCL
B$JIT.PRIV.JOB.ASAVE
       396**DCL
B$JIT.PRIV.JOB.CFEP
       397**DCL
B$JIT.PRIV.JOB.CQ
       397**DCL
B$JIT.PRIV.JOB.DISPJOB
       396**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:121  
B$JIT.PRIV.JOB.DOMANE
       395**DCL
B$JIT.PRIV.JOB.EXMM
       398**DCL
B$JIT.PRIV.JOB.EXPM
       397**DCL
B$JIT.PRIV.JOB.FMBLK
       395**DCL
B$JIT.PRIV.JOB.FMDIAG
       395**DCL
B$JIT.PRIV.JOB.FMEFT
       394**DCL
B$JIT.PRIV.JOB.FMREAD
       395**DCL
B$JIT.PRIV.JOB.FMSEC
       395**DCL
B$JIT.PRIV.JOB.GPP
       396**DCL
B$JIT.PRIV.JOB.INTCON
       397**DCL
B$JIT.PRIV.JOB.IOQ
       397**DCL
B$JIT.PRIV.JOB.IOQW
       397**DCL
B$JIT.PRIV.JOB.JIT
       398**DCL
B$JIT.PRIV.JOB.MAXMEM
       398**DCL
B$JIT.PRIV.JOB.MFEP
       397**DCL
B$JIT.PRIV.JOB.MODE
       395**DCL
B$JIT.PRIV.JOB.MSYS
       398**DCL
B$JIT.PRIV.JOB.PM
       397**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:122  
B$JIT.PRIV.JOB.SCREECH
       396**DCL
B$JIT.PRIV.JOB.SNAP
       396**DCL
B$JIT.PRIV.JOB.SPCLMM
       398**DCL
B$JIT.PRIV.JOB.SYSACCT
       395**DCL
B$JIT.PRIV.JOB.SYSCON
       396**DCL
B$JIT.PRIV.JOB.SYSLOG
       397**DCL
B$JIT.PRIV.JOB.TND
       398**DCL
B$JIT.PRIV.PRC
       398**DCL
B$JIT.PRIV.PRC.ASAVE
       400**DCL
B$JIT.PRIV.PRC.CFEP
       401**DCL
B$JIT.PRIV.PRC.CQ
       401**DCL
B$JIT.PRIV.PRC.DISPJOB
       400**DCL
B$JIT.PRIV.PRC.DOMANE
       399**DCL
B$JIT.PRIV.PRC.EXMM
       402**DCL
B$JIT.PRIV.PRC.EXPM
       401**DCL
B$JIT.PRIV.PRC.FMBLK
       398**DCL
B$JIT.PRIV.PRC.FMDIAG
       399**DCL
B$JIT.PRIV.PRC.FMEFT
       398**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:123  
B$JIT.PRIV.PRC.FMREAD
       399**DCL
B$JIT.PRIV.PRC.FMSEC
       399**DCL
B$JIT.PRIV.PRC.GPP
       400**DCL
B$JIT.PRIV.PRC.INTCON
       401**DCL
B$JIT.PRIV.PRC.IOQ
       401**DCL
B$JIT.PRIV.PRC.IOQW
       401**DCL
B$JIT.PRIV.PRC.JIT
       402**DCL
B$JIT.PRIV.PRC.MAXMEM
       402**DCL
B$JIT.PRIV.PRC.MFEP
       401**DCL
B$JIT.PRIV.PRC.MODE
       399**DCL
B$JIT.PRIV.PRC.MSYS
       402**DCL
B$JIT.PRIV.PRC.PM
       401**DCL
B$JIT.PRIV.PRC.SCREECH
       400**DCL
B$JIT.PRIV.PRC.SNAP
       400**DCL
B$JIT.PRIV.PRC.SPCLMM
       402**DCL
B$JIT.PRIV.PRC.SYSACCT
       399**DCL
B$JIT.PRIV.PRC.SYSCON
       400**DCL
B$JIT.PRIV.PRC.SYSLOG
       400**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:124  
B$JIT.PRIV.PRC.TND
       401**DCL
B$JIT.PRIV.SAVED
       402**DCL
B$JIT.PRIV.SAVED.ASAVE
       404**DCL
B$JIT.PRIV.SAVED.CFEP
       405**DCL
B$JIT.PRIV.SAVED.CQ
       405**DCL
B$JIT.PRIV.SAVED.DISPJOB
       404**DCL
B$JIT.PRIV.SAVED.DOMANE
       403**DCL
B$JIT.PRIV.SAVED.EXMM
       406**DCL
B$JIT.PRIV.SAVED.EXPM
       405**DCL
B$JIT.PRIV.SAVED.FMBLK
       402**DCL
B$JIT.PRIV.SAVED.FMDIAG
       403**DCL
B$JIT.PRIV.SAVED.FMEFT
       402**DCL
B$JIT.PRIV.SAVED.FMREAD
       403**DCL
B$JIT.PRIV.SAVED.FMSEC
       402**DCL
B$JIT.PRIV.SAVED.GPP
       404**DCL
B$JIT.PRIV.SAVED.INTCON
       405**DCL
B$JIT.PRIV.SAVED.IOQ
       405**DCL
B$JIT.PRIV.SAVED.IOQW
       405**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:125  
B$JIT.PRIV.SAVED.JIT
       405**DCL
B$JIT.PRIV.SAVED.MAXMEM
       406**DCL
B$JIT.PRIV.SAVED.MFEP
       405**DCL
B$JIT.PRIV.SAVED.MODE
       403**DCL
B$JIT.PRIV.SAVED.MSYS
       406**DCL
B$JIT.PRIV.SAVED.PM
       405**DCL
B$JIT.PRIV.SAVED.SCREECH
       404**DCL
B$JIT.PRIV.SAVED.SNAP
       404**DCL
B$JIT.PRIV.SAVED.SPCLMM
       406**DCL
B$JIT.PRIV.SAVED.SYSACCT
       403**DCL
B$JIT.PRIV.SAVED.SYSCON
       404**DCL
B$JIT.PRIV.SAVED.SYSLOG
       404**DCL
B$JIT.PRIV.SAVED.TND
       405**DCL
B$JIT.PROG_ENTRY
       500**DCL
B$JIT.PROMPTS
       499**DCL
B$JIT.PSEUDOPGS
       513**DCL
B$JIT.PSEUDO_COUNT
       614**DCL
B$JIT.PSEUDO_TEXT
       614**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:126  
B$JIT.PSLEV
       487**DCL
B$JIT.PTSIZ
       514**DCL
B$JIT.PUL
       508**DCL
B$JIT.QUAN
       523**DCL
B$JIT.REMCPO
       623**DCL
B$JIT.REMDO
       623**DCL
B$JIT.REMLO
       623**DCL
B$JIT.RERUN
       525**DCL
B$JIT.RESCORE
       619**DCL
B$JIT.RESPEAK
       513**DCL
B$JIT.RNST
       529**DCL
B$JIT.RUNFLAGS
       546**DCL
B$JIT.SAVEDCB$
       520**DCL
B$JIT.SCHTIME
       523**DCL
B$JIT.SINPUTSZ
       499**DCL
B$JIT.SPEAK
       512**DCL
B$JIT.SRESPEAK
       513**DCL
B$JIT.SSLEV
       487**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:127  
B$JIT.STAR
       518**DCL
B$JIT.STAR.DA
       518**DCL
B$JIT.STDLOPGS
       618**DCL
B$JIT.STEPCC
       577**DCL
B$JIT.STEPS
       571**DCL
B$JIT.STEPUNIT
       439**DCL
B$JIT.STIME
       523**DCL
B$JIT.STMPDPPK
       519**DCL
B$JIT.SVLDTF
       591**DCL
B$JIT.SVTUS
       526**DCL
B$JIT.SWITCH
       438**DCL
B$JIT.SYSID
       350**DCL
B$JIT.TMPGAC
       519**DCL
B$JIT.TMPGAC.N
       519**DCL
B$JIT.TMPGAC.TIME
       519**DCL
B$JIT.TPEXT
       524**DCL
B$JIT.TPSVT
       524**DCL
B$JIT.TSLINE.FEX
       619**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:128  
B$JIT.TSLINE.LEV
       620**DCL
B$JIT.TSLINE.PORT
       619**DCL
B$JIT.TSLINE.SPEED
       619**DCL
B$JIT.TSLINE.SUBDEVICE
       620**DCL
B$JIT.TSLINE.SUBSUBDEVICE
       620**DCL
B$JIT.TSLINE.TTYP
       620**DCL
B$JIT.TUEXT
       524**DCL
B$JIT.TUSVT
       524**DCL
B$JIT.UMEMTIM
       524**DCL
B$JIT.UNAME
       350**DCL
B$JIT.USER
       350**DCL
B$JIT.USERWORD
       438**DCL
B$JIT.USRDCB
       499**DCL
B$JIT.USRERR
       486**DCL
B$JIT.USRERR.CODE
       486**DCL
B$JIT.USRERR.FCG
       486**DCL
B$JIT.USRERR.MID
       486**DCL
B$JIT.USRERR.MON
       486**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:129  
B$JIT.USRERR.SEV
       486**DCL
B$JIT.USRIC
       487**DCL
B$JIT.USRRNST
       486**DCL
B$JIT.UTIMER
       525**DCL
B$JIT.VIRTUAL
       515**DCL
B$JIT.VIRTUAL.DCB#
       515**DCL
B$JIT.WOO
       350**DCL
B$JIT.XCONF
       571**DCL
B$JIT.XLIMFLG
       581**DCL
B$JIT.XTIME
       523**DCL
B$JIT.YC0SZ
       487**DCL
B$JIT.YC2SZ
       505**DCL
DATA_PTR IN PROCEDURE TOD$INTERSLAVE_WRITE
      9233**DCL
DCWLIST.CHAR_ADDRESS IN PROCEDURE SETUP_DCW_LIST
      9025**DCL
DCWLIST_PTR IN PROCEDURE TOD$INTERSLAVE_WRITE
      9240**DCL
GDP_FPT.RESULTS_ IN PROCEDURE GET_MORE_PAGES
      8964**DCL
GDP_FPT.V_ IN PROCEDURE GET_MORE_PAGES
      8964**DCL
ISC IN PROCEDURE TOD$INTERSLAVE_WRITE
      9244**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:130  
KEY_VALUE.SIZE IN PROCEDURE TOD$INIT_SUBEXEC
      8879**DCL
LOAD_ IN PROCEDURE GET_MORE_PAGES
      8948**DCL
M$ACCT
      6130**DCL-ENT
M$ACTIVATE
      6133**DCL-ENT
M$ALIB
      6126**DCL-ENT
M$ASUSER
      6128**DCL-ENT
M$ATTACH
      6135**DCL-ENT
M$BADPP
      6153**DCL-ENT
M$CGCTL
      6134**DCL-ENT
M$CGINFO
      6134**DCL-ENT
M$CHECK
      6115**DCL-ENT
M$CHGUNIT
      6173**DCL-ENT
M$CLOSE
      6113**DCL-ENT
M$CLRSTK
      6171**DCL-ENT
M$CMDVAR
      6182**DCL-ENT
M$CONFIG
      6143**DCL-ENT
M$CORRES
      6118**DCL-ENT
M$CPEXIT
      6127**DCL-ENT
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:131  
M$CVM
      6151**DCL-ENT
M$CVOL
      6116**DCL-ENT
M$DCLFLD
      6143**DCL-ENT
M$DEACTIVATE
      6133**DCL-ENT
M$DELREC
      6115**DCL-ENT
M$DEQ
      6180**DCL-ENT
M$DETACH
      6135**DCL-ENT
M$DEVICE
      6117**DCL-ENT
M$DISPLAY
      6180**DCL-ENT
M$DISPRES
      6120**DCL-ENT
M$DLIB
      6126**DCL-ENT
M$DRIBBLE
      6143**DCL-ENT
M$DRTN
      6171**DCL-ENT
M$DSUSER
      6128**DCL-ENT
M$ENQ
      6179**DCL-ENT
M$EOM
      6138**DCL-ENT
M$ERASE
      6144**DCL-ENT
M$ERR
      6125**DCL-ENT
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:132  
M$ERRMSG
      6176**DCL-ENT
M$EVENT
      6168**DCL-ENT
M$EXHUME
      6177**DCL-ENT
M$EXIT
      6125**DCL-ENT
M$EXTEND
      6117**DCL-ENT
M$FDP
      6149**DCL-ENT
M$FDS
      6148**DCL-ENT
M$FEBOOT
      6141**DCL-ENT
M$FECTL
      6142**DCL-ENT
M$FEDUMP
      6141**DCL-ENT
M$FID
      6176**DCL-ENT
M$FINDPROC
      6130**DCL-ENT
M$FSUSER
      6128**DCL-ENT
M$FVP
      6150**DCL-ENT
M$FWCG
      6134**DCL-ENT
M$GBPL
      6154**DCL-ENT
M$GDDL
      6150**DCL-ENT
M$GDS
      6148**DCL-ENT
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:133  
M$GETDCB
      6119**DCL-ENT
M$GETMOUSE
      6159**DCL-ENT
M$GETPM
      6160**DCL-ENT
M$GJOB
      6178**DCL-ENT
M$GLINEATTR
      6138**DCL-ENT
M$GOODPP
      6153**DCL-ENT
M$GPLATEN
      6146**DCL-ENT
M$GPROMPT
      6145**DCL-ENT
M$GTRMATTR
      6139**DCL-ENT
M$GTRMCTL
      6137**DCL-ENT
M$GTRMTAB
      6140**DCL-ENT
M$GVP
      6149**DCL-ENT
M$HELP
      6176**DCL-ENT
M$INT
      6168**DCL-ENT
M$INTRTN
      6129**DCL-ENT
M$IOQ
      6164**DCL-ENT
M$JOBSTATS
      6178**DCL-ENT
M$KEYIN
      6118**DCL-ENT
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:134  
M$LDEV
      6113**DCL-ENT
M$LDTRC
      6126**DCL-ENT
M$LIMIT
      6119**DCL-ENT
M$LINES
      6118**DCL-ENT
M$LINK
      6125**DCL-ENT
M$MADMUCK
      6121**DCL-ENT
M$MAKUSER
      6152**DCL-ENT
M$MBS
      6120**DCL-ENT
M$MDFFLD
      6144**DCL-ENT
M$MERC
      6169**DCL-ENT
M$MERCS
      6170**DCL-ENT
M$MIRROR
      6164**DCL-ENT
M$MONINFO
      6181**DCL-ENT
M$MPL
      6154**DCL-ENT
M$NODEINFO
      6145**DCL-ENT
M$NXTUSR
      6179**DCL-ENT
M$OCMSG
      6177**DCL-ENT
M$OLAY
      6125**DCL-ENT
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:135  
M$OPEN
      6113**DCL-ENT
M$PAS
      6154**DCL-ENT
M$PATHCON
      6177**DCL-ENT
M$PDS
      6148**DCL-ENT
M$PFIL
      6115**DCL-ENT
M$PLATEN
      6139**DCL-ENT
M$PRECORD
      6117**DCL-ENT
M$PROCNAME
      6130**DCL-ENT
M$PROFILE
      6141**DCL-ENT
M$PROMPT
      6137**DCL-ENT
M$RACST
      6121**DCL-ENT
M$RDSYSLOG
      6162**DCL-ENT
M$READ
      6114**DCL-ENT
M$RELDCB
      6119**DCL-ENT
M$RELRES
      6120**DCL-ENT
M$RELSTARF
      6122**DCL-ENT
M$REM
      6122**DCL-ENT
M$RENV
      6169**DCL-ENT
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:136  
M$REQUIRE
      6121**DCL-ENT
M$RETRY
      6170**DCL-ENT
M$RETRYS
      6170**DCL-ENT
M$REW
      6116**DCL-ENT
M$RLSFLD
      6144**DCL-ENT
M$RPRIV
      6172**DCL-ENT
M$RSPP
      6151**DCL-ENT
M$RSWITCH
      6173**DCL-ENT
M$RUE
      6179**DCL-ENT
M$SAD
      6152**DCL-ENT
M$SAVE
      6128**DCL-ENT
M$SCON
      6129**DCL-ENT
M$SCREECH
      6127**DCL-ENT
M$SENV
      6169**DCL-ENT
M$SETFMA
      6113**DCL-ENT
M$SETFP
      6142**DCL-ENT
M$SINPUT
      6140**DCL-ENT
M$SLCFLD
      6145**DCL-ENT
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:137  
M$SMOUSE
      6159**DCL-ENT
M$SMPRT
      6151**DCL-ENT
M$SPRIV
      6172**DCL-ENT
M$SSC
      6152**DCL-ENT
M$SSWITCH
      6172**DCL-ENT
M$STATE
      6181**DCL-ENT
M$STD
      6153**DCL-ENT
M$STIMER
      6167**DCL-ENT
M$STLPP
      6150**DCL-ENT
M$STRAP
      6167**DCL-ENT
M$STRMATTR
      6139**DCL-ENT
M$STRMCTL
      6137**DCL-ENT
M$STRMTAB
      6140**DCL-ENT
M$SYMBIO
      6178**DCL-ENT
M$SYSCON
      6164**DCL-ENT
M$SYSID
      6182**DCL-ENT
M$TDCLOSE
      6163**DCL-ENT
M$TDIO
      6163**DCL-ENT
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:138  
M$TDOPEN
      6162**DCL-ENT
M$TDREQCPU
      6163**DCL-ENT
M$TEMPWROC
      6157**DCL-ENT
M$TIME
      6180**DCL-ENT
M$TRAP
      6167**DCL-ENT
M$TRMISC
      6142**DCL-ENT
M$TRMPRG
      6138**DCL-ENT
M$TRTN
      6171**DCL-ENT
M$TRUNC
      6114**DCL-ENT
M$TTIMER
      6167**DCL-ENT
M$UC
      6137**DCL
M$UMPL
      6154**DCL-ENT
M$UNFID
      6176**DCL-ENT
M$UNLATCH
      6133**DCL-ENT
M$UNSHARE
      6130**DCL-ENT
M$USRFIELD
      6173**DCL-ENT
M$VIRTUAL
      6148**DCL-ENT
M$WAIT
      6171**DCL-ENT
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:139  
M$WEOF
      6116**DCL-ENT
M$WRITE
      6114**DCL-ENT
M$WRSYSLOG
      6162**DCL-ENT
M$XCON
      6168**DCL-ENT
M$XCONRTN
      6129**DCL-ENT
M$XEQTIME
      6181**DCL-ENT
M$XFLUSH
      6122**DCL-ENT
M$XMOUSE
      6159**DCL-ENT
M$XXX
      6125**DCL-ENT
M$YC
      6127**DCL-ENT
MME.INST IN PROCEDURE TOD$INTERSLAVE_WRITE
      9265**DCL
MME.INST.OP IN PROCEDURE TOD$INTERSLAVE_WRITE
      9267**DCL
MME.WD_3 IN PROCEDURE TOD$INTERSLAVE_WRITE
      9270**DCL
MME.WD_4 IN PROCEDURE TOD$INTERSLAVE_WRITE
      9271**DCL
MME.WD_5 IN PROCEDURE TOD$INTERSLAVE_WRITE
      9272**DCL
MME.WD_6 IN PROCEDURE TOD$INTERSLAVE_WRITE
      9273**DCL
MREG.A IN PROCEDURE TOD$INTERSLAVE_WRITE
      9293**DCL
MREG.E IN PROCEDURE TOD$INTERSLAVE_WRITE
      9295**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:140  
MREG.Q IN PROCEDURE TOD$INTERSLAVE_WRITE
      9294**DCL
MREG.X0 IN PROCEDURE TOD$INTERSLAVE_WRITE
      9285**DCL
MREG.X1 IN PROCEDURE TOD$INTERSLAVE_WRITE
      9286**DCL
MREG.X2 IN PROCEDURE TOD$INTERSLAVE_WRITE
      9287**DCL
MREG.X3 IN PROCEDURE TOD$INTERSLAVE_WRITE
      9288**DCL
MREG.X4 IN PROCEDURE TOD$INTERSLAVE_WRITE
      9289**DCL
MREG.X5 IN PROCEDURE TOD$INTERSLAVE_WRITE
      9290**DCL
MREG.X6 IN PROCEDURE TOD$INTERSLAVE_WRITE
      9291**DCL
MREG.X7 IN PROCEDURE TOD$INTERSLAVE_WRITE
      9292**DCL
PSNUMB
      8544**DCL
Q_ENTRY IN PROCEDURE TOD$POLTS_IO_DONE
      9344**DCL
STATUS_PTR IN PROCEDURE LOAD_SUBEXEC
      9118**DCL
SUBEXEC_KEYS IN PROCEDURE GET_SUBEXEC_KEY
      9064**DCL
SUBEXEC_SIZES IN PROCEDURE GET_SUBEXEC_SIZE
      8915**DCL
TOD$DISPATCHER
        19**PROC
TOD$QUEUE
      8557**DCL
TOD$QUEUE.E
      8558**DCL
TOD_ERROR_CODE.FCG
      8521**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:141  
TOD_ERROR_CODE.MID
      8534**DCL
TOD_ERROR_CODE.MON
      8534**DCL
TOD_ERROR_CODE.SEV
      8535**DCL
TOF$BAR
      8584**DCL
TOF$BAR.CURRENT.BASE
      8586**DCL
TOF$BAR.CURRENT.SIZE
      8588**DCL
TOF$BAR.GELBAR_MODE
      8595**DCL
TOQ$DCP
      8607**DCL
TOQ$DCP.BR
      8625**DCL
TOQ$DCP.BR.ADDRESS
      8626**DCL
TOQ$DCP.BR.IC
      8627**DCL
TOQ$DCP.MME
      8628**DCL
TOQ$DCP.PF
      8608**DCL
TOQ$DCP.PF.DEBUG_TOLTS
      8611**DCL
TOQ$DCP.PF.DISP_MMES
      8615**DCL
TOQ$DCP.PF.GELBARRED
      8610**DCL
TOQ$DCP.PF.STOP_AT_SE
      8614**DCL
TOQ$DCP.PF.STOP_ON_GELBARS
      8612**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:142  
TOQ$DCP.PF.STOP_ON_IO
      8613**DCL
TOQ$DCP.SE
      8617**DCL
TOQ$DCP.TP
      8621**DCL
TOQ$DCP.TP.ADDRESS
      8624**DCL
TOQ$DCP.TP.EDIT_NAME
      8623**DCL
TOQ$DCP.TP.GECALL_NAME
      8622**DCL
TOT$ECP
      8639**DCL
TOT$ECP.BOOT_CPU_TYPE
      8676**DCL
TOT$ECP.BREAK_ALLOWED
      8672**DCL
TOT$ECP.BREAK_RECEIVED
      8674**DCL
TOT$ECP.IO
      8643**DCL
TOT$ECP.IO.COUNT
      8646**DCL
TOT$ECP.IO.TYPE
      8644**DCL
TOT$ECP.ISC
      8648**DCL
TOT$ECP.ISC.GERELC_WAIT
      8653**DCL
TOT$ECP.ISC.READ_OUT
      8649**DCL
TOT$ECP.ISC.READ_PENDING
      8655**DCL
TOT$ECP.ISC.WRITE_OUT
      8651**DCL
PL6.E3A0      #001=TOD$DISPATCHER File=TOD$DISPATCHER.:E05TSI                    WED 07/30/97 06:21 Page:143  
TOT$ECP.SUBEXEC
      8659**DCL
TOT$ECP.SUBEXEC.TEST_PAGE_COUNT
      8670**DCL
TOT$ECP.SUBEXEC.WRAPUP$
      8668**DCL
TOT$ECP.SUBEXEC.WRAPUP_TRIED
      8666**DCL
TOT$ECP.TEST_REQ_
      8642**DCL
TSNUMB
      8541**DCL
