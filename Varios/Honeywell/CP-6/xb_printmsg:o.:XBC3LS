

CC.C02    File=xb_printmsg:c.:XBC3TSI                                               Fri Jan  6 1995  Page=1  
        1         1             #include <stdio.h>
        2         2             #include <stdlib.h>
        3         3             #include <string.h>
        4         4             #include <stdarg.h>
        5         5
        6         6             struct   arg_info {
        7         7    1           struct   arg_info    *next;
        8         8    1           int                  arg_pos;
        9         9    1           int                  arg_size;
       10        10    1           int                  format_pos;
       11        11    1           union    val {
       12        12    2              double   dval;
       13        13    2              int      ival;
       14        14    2           } val;
       15        15    1        };
       16        16
       17        17             static   struct   arg_info *head = 0;
       18        18             static   struct   arg_info *last_val = 0;
       19        19             static   int      numargs = 0;
       20        20
       21        21             static   char  *create_printf_msg(char *);
       22        22             static   int   create_arg_list(char **);
       23        23             static   void  cleanup(char *, char *);
       24        24
       25        25             extern   int   printmsg(char *, ...);
       26        26             extern   int   fprintmsg(FILE *, char *, ...);
       27        27             extern   int   sprintmsg(char *, char *, ...);
       28        28
       29        29             /*T***********************************************************/
       30        30             /*T*                                                         */
       31        31             /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
       32        32             /*T*                                                         */
       33        33             /*T***********************************************************/
       34        34
       35        35             /*D*  NAME: printmsg
       36        36                   PROTOTYPE: int printmsg(const char *format, ... );
       37        37                   DESCRIPTION: Writes zero or more items to stdout under format
CC.C02    File=xb_printmsg:c.:XBC3TSI                                               Fri Jan  6 1995  Page=2  
       38        38                                control.  The format is specified like printf
       39        39                                except that % is replaced by %num$, where num is
       40        40                                the argument number used for this format item.
       41        41             */
       42        42
       43        43             int
       44        44             printmsg(char *fmt, ...) {
       45        45    1           va_list  ap;
       46        46    1           char     *newfmt;
       47        47    1           int   i;
       48        48    1           struct   arg_info    *temp;
       49        49    1           char  *newarg_list;
       50        50    1           int   arg_list_size;
       51        51    1           int   result;
       52        52    1
       53        53    1        /*    Ok lets convert the format string and get ready to get the
       54        54    1              argument values.                                              */
       55        55    1
       56        56    1           va_start(ap, fmt);
       57        57    1           newfmt = create_printf_msg(fmt);
       58        58    1
       59        59    1        /*    Now that the format has been changed we need to get the actual
       60        60    1              values of the arguments.  This is really an easy process. We
       61        61    1              just loop through our argument structure, and look for the
       62        62    1              first argument, and get its value.  This continues till
       63        63    1              there be no mo arguments.                                     */
       64        64    1
       65        65    1           for (i=1; i<=numargs; i++) {
       66        66    2              temp = head;
       67        67    2              while ((temp) && (temp->arg_pos != i)) {
       68        68    3                 temp = temp->next;
       69        69    3              }
       70        70    2              if (temp) {
       71        71    3                 if (temp->arg_size == 8) {
       72        72    4                    temp->val.dval = va_arg(ap, double);
       73        73    4                 }
       74        74    3                 else {
CC.C02    File=xb_printmsg:c.:XBC3TSI                                               Fri Jan  6 1995  Page=3  
       75        75    4                    temp->val.ival = va_arg(ap, int);
       76        76    4                 }
       77        77    3              }
       78        78    2           }
       79        79    1
       80        80    1        /*    Now it is time to create the argument list and do the
       81        81    1              actual formatting of the information.                         */
       82        82    1
       83        83    1           arg_list_size = create_arg_list(&newarg_list);
       84        84    1           XBI$PRINT(newfmt, &newarg_list, &arg_list_size, stdout, (char *) 0, &result
                               );
       85        85    1           cleanup(newfmt, newarg_list);
       86        86    1           return result;
       87        87    1        }
       88        88
       89        89             /*T***********************************************************/
       90        90             /*T*                                                         */
       91        91             /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
       92        92             /*T*                                                         */
       93        93             /*T***********************************************************/
       94        94
       95        95             /*D*  NAME: fprintmsg
       96        96                   PROTOTYPE: int fprintmsg(FILE *fp, const char *format, ... );
       97        97                   DESCRIPTION: Writes zero or more items to fp under format
       98        98                                control.  The format is specified like fprintf
       99        99                                except that % is replaced by %num$, where num is
      100       100                                the argument number used for this format item.
      101       101             */
      102       102
      103       103             int
      104       104             fprintmsg(FILE *fp, char *fmt, ...) {
      105       105    1           va_list  ap;
      106       106    1           char     *newfmt;
      107       107    1           int   i;
      108       108    1           struct   arg_info    *temp;
      109       109    1           char  *newarg_list;
      110       110    1           int   arg_list_size;
CC.C02    File=xb_printmsg:c.:XBC3TSI                                               Fri Jan  6 1995  Page=4  
      111       111    1           int   result;
      112       112    1
      113       113    1        /*    Ok lets convert the format string and get ready to get the
      114       114    1              argument values.                                              */
      115       115    1
      116       116    1           va_start(ap, fmt);
      117       117    1           newfmt = create_printf_msg(fmt);
      118       118    1
      119       119    1        /*    Now that the format has been changed we need to get the actual
      120       120    1              values of the arguments.  This is really an easy process. We
      121       121    1              just loop through our argument structure, and look for the
      122       122    1              first argument, and get its value.  This continues till
      123       123    1              there be no mo arguments.                                     */
      124       124    1
      125       125    1           for (i=1; i<=numargs; i++) {
      126       126    2              temp = head;
      127       127    2              while ((temp) && (temp->arg_pos != i)) {
      128       128    3                 temp = temp->next;
      129       129    3              }
      130       130    2              if (temp) {
      131       131    3                 if (temp->arg_size == 8) {
      132       132    4                    temp->val.dval = va_arg(ap, double);
      133       133    4                 }
      134       134    3                 else {
      135       135    4                    temp->val.ival = va_arg(ap, int);
      136       136    4                 }
      137       137    3              }
      138       138    2           }
      139       139    1
      140       140    1        /*    Now it is time to create the argument list and do the
      141       141    1              actual formatting of the information.                         */
      142       142    1
      143       143    1           arg_list_size = create_arg_list(&newarg_list);
      144       144    1           XBI$PRINT(newfmt, &newarg_list, &arg_list_size, fp, (char *) 0, &result);
      145       145    1           cleanup(newfmt, newarg_list);
      146       146    1           return result;
      147       147    1        }
CC.C02    File=xb_printmsg:c.:XBC3TSI                                               Fri Jan  6 1995  Page=5  
      148       148
      149       149             /*T***********************************************************/
      150       150             /*T*                                                         */
      151       151             /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      152       152             /*T*                                                         */
      153       153             /*T***********************************************************/
      154       154
      155       155             /*D*  NAME: sprintmsg
      156       156                   PROTOTYPE: int sprintmsg(char *buf, const char *format, ... );
      157       157                   DESCRIPTION: Writes zero or more items to buf under format
      158       158                                control.  The format is specified like sprintf
      159       159                                except that % is replaced by %num$, where num is
      160       160                                the argument number used for this format item.
      161       161             */
      162       162
      163       163             int
      164       164             sprintmsg(char *buf, char *fmt, ...) {
      165       165    1           va_list  ap;
      166       166    1           char     *newfmt;
      167       167    1           int   i;
      168       168    1           struct   arg_info    *temp;
      169       169    1           char  *newarg_list;
      170       170    1           int   arg_list_size;
      171       171    1           int   result;
      172       172    1
      173       173    1        /*    Ok lets convert the format string and get ready to get the
      174       174    1              argument values.                                              */
      175       175    1
      176       176    1           va_start(ap, fmt);
      177       177    1           newfmt = create_printf_msg(fmt);
      178       178    1
      179       179    1        /*    Now that the format has been changed we need to get the actual
      180       180    1              values of the arguments.  This is really an easy process. We
      181       181    1              just loop through our argument structure, and look for the
      182       182    1              first argument, and get its value.  This continues till
      183       183    1              there be no mo arguments.                                     */
      184       184    1
CC.C02    File=xb_printmsg:c.:XBC3TSI                                               Fri Jan  6 1995  Page=6  
      185       185    1           for (i=1; i<=numargs; i++) {
      186       186    2              temp = head;
      187       187    2              while ((temp) && (temp->arg_pos != i)) {
      188       188    3                 temp = temp->next;
      189       189    3              }
      190       190    2              if (temp) {
      191       191    3                 if (temp->arg_size == 8) {
      192       192    4                    temp->val.dval = va_arg(ap, double);
      193       193    4                 }
      194       194    3                 else {
      195       195    4                    temp->val.ival = va_arg(ap, int);
      196       196    4                 }
      197       197    3              }
      198       198    2           }
      199       199    1
      200       200    1        /*    Now it is time to create the argument list and do the
      201       201    1              actual formatting of the information.                         */
      202       202    1
      203       203    1           arg_list_size = create_arg_list(&newarg_list);
      204       204    1           XBI$PRINT(newfmt, &newarg_list, &arg_list_size, (FILE *) 0, buf, &result);
      205       205    1           cleanup(newfmt, newarg_list);
      206       206    1           return result;
      207       207    1        }
      208       208
      209       209             /*T***********************************************************/
      210       210             /*T*                                                         */
      211       211             /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      212       212             /*T*                                                         */
      213       213             /*T***********************************************************/
      214       214
      215       215             /*D*  NAME: create_printf_msg
      216       216                   PROTOTYPE: char *create_printf_msg(char *oldfmt);
      217       217                   DESCRIPTION: Converts the input format message into an output
      218       218                                format string and generates an argument structure
      219       219                                that contains the position of the argument, and
      220       220                                size of the argument, so that the value can be
      221       221                                easily gotten later.
CC.C02    File=xb_printmsg:c.:XBC3TSI                                               Fri Jan  6 1995  Page=7  
      222       222             */
      223       223
      224       224             static   char *
      225       225             create_printf_msg(char fmt[]) {
      226       226    1           int   fmt_len = strlen(fmt);
      227       227    1           int   fmt_pos = 0;
      228       228    1           int   new_fmt_pos = 0;
      229       229    1           int   numchars = 0;
      230       230    1           char  *percent_pos;
      231       231    1           char  *dollar_pos;
      232       232    1           char  *arg_type;
      233       233    1           static char  *new_fmt;
      234       234    1           struct   arg_info *next_val;
      235       235    1
      236       236    1        /*    Allocate the output string.  It will be at most the length of
      237       237    1              the input string (No format values) so we will allocate this
      238       238    1              much to just be on the safe side.                             */
      239       239    1
      240       240    1           new_fmt = calloc(fmt_len+1, sizeof(char));
      241       241    1           head = 0;
      242       242    1           numargs = 0;
      243       243    1
      244       244    1        /*    Instead of cluttering the loop with a lot of comments I will
      245       245    1              put it here instead.  Basically what is going to happen is
      246       246    1              that we are going to find the first '%' in the string.  As long
      247       247    1              as the next character is not another '%' we continue.  We first
      248       248    1              copy the portion of the string from last position to and
      249       249    1              including the '%'.  We now find the $.  This portion gets
      250       250    1              stripped from the output format. we convert the number
      251       251    1              in between into the argument number.  Now we gotta figure out
      252       252    1              the size of this argument.  We search forward in this string
      253       253    1              for the first actual format character.  If it is one of the
      254       254    1              arguments that is a double (feEgG) the size is 8 otherwise
      255       255    1              it is 4.  Now we just repeat this process until we are done.  */
      256       256    1
      257       257    1           while (percent_pos = memchr(&fmt[fmt_pos], '%', fmt_len - fmt_pos)) {
      258       258    2              if (*(percent_pos+1) != '%') {
CC.C02    File=xb_printmsg:c.:XBC3TSI                                               Fri Jan  6 1995  Page=8  
      259       259    3                 numchars = percent_pos - &fmt[fmt_pos] + 1;
      260       260    3                 memcpy(new_fmt+new_fmt_pos, &fmt[fmt_pos], numchars);
      261       261    3                 new_fmt_pos += numchars;
      262       262    3                 fmt_pos += numchars;
      263       263    3                 dollar_pos = memchr(&fmt[fmt_pos], '$', fmt_len - fmt_pos);
      264       264    3                 next_val = malloc(sizeof(struct arg_info));
      265       265    3                 next_val->next = 0;
      266       266    3                 next_val->format_pos = ++numargs;
      267       267    3                 next_val->arg_pos = atoi(percent_pos+1);
      268       268    3                 arg_type = strpbrk(dollar_pos+1, "diouxXfeEgGcspn");
      269       269    3                 if (arg_type) {
      270       270    4                    switch (*arg_type) {
      271       271    5                       case  'f':
      272       272    5                       case  'e':
      273       273    5                       case  'E':
      274       274    5                       case  'g':
      275       275    5                       case  'G':
      276       276    5                          next_val->arg_size = 8;
      277       277    5                          break;
      278       278    5                       default:
      279       279    5                          next_val->arg_size = 4;
      280       280    5                          break;
      281       281    5                    }
      282       282    4                 }
      283       283    3                 else {
      284       284    4                    next_val->arg_size = 0;
      285       285    4                 }
      286       286    3
      287       287    3        /*    Add the entity to the argument structure chain                */
      288       288    3
      289       289    3                 if (last_val)
      290       290    3                    last_val->next = next_val;
      291       291    3                 last_val = next_val;
      292       292    3                 if (!head)
      293       293    3                    head = next_val;
      294       294    3                 fmt_pos += dollar_pos - &fmt[fmt_pos] + 1;
      295       295    3              }
CC.C02    File=xb_printmsg:c.:XBC3TSI                                               Fri Jan  6 1995  Page=9  
      296       296    2
      297       297    2              else {   /* Format was not found but "%%" was   */
      298       298    3                 numchars = percent_pos - &fmt[fmt_pos] + 2;
      299       299    3                 memcpy(new_fmt+new_fmt_pos, &fmt[fmt_pos], numchars);
      300       300    3                 new_fmt_pos += numchars;
      301       301    3                 fmt_pos += numchars;
      302       302    3              }
      303       303    2           }
      304       304    1
      305       305    1        /*    Copy the last bit of the string to the output and return with
      306       306    1              a job well done.                                              */
      307       307    1
      308       308    1           memcpy(new_fmt+new_fmt_pos, &fmt[fmt_pos], fmt_len - fmt_pos+1);
      309       309    1           return new_fmt;
      310       310    1        }
      311       311
      312       312             /*T***********************************************************/
      313       313             /*T*                                                         */
      314       314             /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      315       315             /*T*                                                         */
      316       316             /*T***********************************************************/
      317       317
      318       318             /*D*  NAME: create_arg_list
      319       319                   PROTOTYPE: int create_arg_list(char **newarg_list);
      320       320                   DESCRIPTION: Creates the new argument list for the printmsg
      321       321                                functions.  It returns the size of the list in
      322       322                                words.
      323       323             */
      324       324
      325       325             static   int
      326       326             create_arg_list(char ** newarg_list) {
      327       327    1           struct   arg_info *temp;
      328       328    1           int      i;
      329       329    1           int      arg_list_pos;
      330       330    1
      331       331    1        /*    Now we gotta copy all the values that were gotten into a
      332       332    1              buffer that will be used to pass into the real printf()
CC.C02    File=xb_printmsg:c.:XBC3TSI                                               Fri Jan  6 1995  Page=10 
      333       333    1              function.  We will allocate 8*(numargs+1) bytes.  All 8
      334       334    1              byte arguments need to be  bounded on a double word.  This
      335       335    1              ends up being offset from front mod 8 != 0.  When this happens
      336       336    1              we need to pad 4 bytes.  Lets get busy (Arsenio Hall).        */
      337       337    1
      338       338    1           *newarg_list = malloc(8 * (numargs + 1));
      339       339    1           arg_list_pos = 0;
      340       340    1           temp = head;
      341       341    1           for (i=1; i<=numargs; i++) {
      342       342    2              if (temp->arg_size == 8) {
      343       343    3                 if ((arg_list_pos % 8) != 0)
      344       344    3                    arg_list_pos += 4;
      345       345    3                 memcpy(*newarg_list+arg_list_pos, &(temp->val.dval), 8);
      346       346    3              }
      347       347    2              else {
      348       348    3                 memcpy(*newarg_list+arg_list_pos, &(temp->val.ival), temp->arg_size);

      349       349    3              }
      350       350    2              arg_list_pos += temp->arg_size;
      351       351    2              temp = temp->next;
      352       352    2           }
      353       353    1           return (arg_list_pos / 4);
      354       354    1        }
      355       355
      356       356             /*T***********************************************************/
      357       357             /*T*                                                         */
      358       358             /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      359       359             /*T*                                                         */
      360       360             /*T***********************************************************/
      361       361
      362       362             /*D*  NAME: cleanup
      363       363                   PROTOTYPE: void cleanup(char *fmt, char *arg_stack);
      364       364                   DESCRIPTION: Frees up all the allocated space used in these
      365       365                                functions.
      366       366             */
      367       367
      368       368             static   void
CC.C02    File=xb_printmsg:c.:XBC3TSI                                               Fri Jan  6 1995  Page=11 
      369       369             cleanup(char *fmt, char *arg_stack) {
      370       370    1           struct arg_info   *temp;
      371       371    1
      372       372    1           free(fmt);
      373       373    1           free(arg_stack);
      374       374    1           while (head) {
      375       375    2              temp = head;
      376       376    2              head = head->next;
      377       377    2              free(temp);
      378       378    2           }
      379       379    1           return;
      380       380    1        }
---  Include file information  ---

   stdio:h.:XBC3TOU. is referenced
   stdlib:h.:XBC3TOU. is referenced
   string:h.:XBC3TOU. is referenced
   stdarg:h.:XBC3TOU. is referenced

No diagnostics were issued in the file xb_printmsg:c.:XBC3TSI
