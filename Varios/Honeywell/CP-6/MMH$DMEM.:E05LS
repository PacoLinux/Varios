VERSION E05

PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:1    
        1        1        /*M* ROUTINES FOR MANAGING THE DYNAMIC DATA SEGMENTS.              */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
        8        8        MMH$SHARE_DS: PROC(EWSQ,SEGID,REQSIZE,ERR,DSACCESS,HEAD,TAIL,COUNT) ALTRET;
        9        9
       10       10        %INCLUDE B_MAGIC_C;
       11      128        %INCLUDE B_LSDATA_C;
       12     3334        %INCLUDE B$SS;
       13     3513        %INCLUDE MM_DATA_R;
       14     4033        %INCLUDE HF_DATA_R;
       15     4076
       16     4077    1   DCL EWSQ UBIN;                     /* Effective wsq - wsq making this request */
       17     4078    1   DCL SEGID UBIN;                         /* Segid of data segment descriptor   */
       18     4079    1   DCL REQSIZE UBIN;                  /* # of words to get or free in segment    */
       19     4080    1   DCL 1 F_WSIZE REDEF REQSIZE,
       20     4081    1            2 FREEFLG BIT(1) UNAL,
       21     4082    1            2 VIRTONLY BIT(1) UNAL,
       22     4083    1            2 * UBIN(15) UNAL,
       23     4084    1            2 WORDS# UBIN(19) UNAL;
       24     4085    1   DCL 1 B_WSIZE REDEF REQSIZE,
       25     4086    1            2 * UBIN(35) UNAL,
       26     4087    1            2 ODD_BIT BIT(1) UNAL;
       27     4088    1   DCL ERR UBIN;                      /* Error code to be returned on altreturn  */
       28     4089    1   DCL DSACCESS UBIN;
       29     4090    1   DCL HEAD UBIN;
       30     4091    1   DCL TAIL UBIN;
       31     4092    1   DCL COUNT UBIN;
       32     4093
       33     4094
       34     4095    1   DCL HFC$ASSOCCLR ENTRY(3);              /* Routine to clear associative mem   */
       35     4096    1   DCL MME$CVM ENTRY(4) ALTRET;
       36     4097    1   DCL MMG$SGVP ENTRY(5) ALTRET;           /* Routine to get seg-relative V.P.   */
       37     4098    1   DCL MMG$SFVP ENTRY(5) ALTRET;           /* Routine to free seg-relative V.P.  */
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:2    
       38     4099    1   DCL MMG$SFVP_NOW ENTRY(5) ALTRET;
              4099            /* Routine to free seg-relative V.P. unconditionally  */
       39     4100    1   DCL MMK$BIGPT ENTRY ALTRET;             /* Expand user PT to 2 pages */
       40     4101    1   DCL SSS$BLOCKM ENTRY;
       41     4102    1   DCL MMA$LOCKBP ENTRY;
       42     4103    1   DCL MMA$UNLOCKBP ENTRY;
       43     4104    1   DCL MMA$GETPSR ENTRY(1);
       44     4105    1   DCL JSN$BLNK1 ENTRY(3);
       45     4106    1   DCL UDN$MAGIC ENTRY;
       46     4107
       47     4108    1   DCL SC_MM24 ENTRY CONV(2,0);
       48     4109    1   DCL SC_MM23 ENTRY CONV(2,0);
       49     4110    1   DCL SC_MM22 ENTRY CONV(2,0);
       50     4111    1   DCL SC_MM43 ENTRY CONV(2,0);
       51     4112    1   DCL SC_MM44 ENTRY CONV(2,0);
       52     4113
       53     4114        /* Internal DATA... */
       54     4115    1   DCL WSIZE UBIN;
       55     4116    1   DCL BSEGX BIT(12);
       56     4117    1   DCL SEGX UBIN;
       57     4118    1   DCL HEADPG UBIN;
       58     4119    1   DCL SHARE_DS BIT(1);
       59     4120    1   DCL ACCESS BIT(36);
       60     4121    1   DCL VPLOW UBIN;
       61     4122    1   DCL DRBASE SBIN;
       62     4123    1   DCL DRBOUND SBIN;
       63     4124    1   DCL NEWTOP SBIN;
       64     4125    1   DCL CURTOP UBIN;
       65     4126    1   DCL ASIZE UBIN;
       66     4127    1   DCL ASIZEP SBIN;                   /* # pgs to move relocated seg's bases     */
       67     4128    1   DCL GAPPGS SBIN;
       68     4129    1   DCL BSIZE SBIN;                         /* # of bytes to actually grow seg.   */
       69     4130    1   DCL DATAHI SBIN;
       70     4131    1   DCL DATALO UBIN;
       71     4132    1   DCL TRUNCFLG BIT(1) ALIGNED;
       72     4133    1   DCL FREEFLG BIT(1) ALIGNED;
       73     4134    1   DCL VIRTONLY BIT(1) ALIGNED;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:3    
       74     4135    1   DCL I SBIN;
       75     4136    1   DCL J SBIN;
       76     4137    1   DCL ELS$ PTR;                           /* Ptr to effective linkage segment   */
       77     4138    1   DCL MAP$ PTR;
       78     4139    1   DCL TEMP1 SBIN;
       79     4140    1   DCL TEMP2 SBIN;
       80     4141    1   DCL TEMP3 SBIN;
       81     4142    1   DCL TEMP4 SBIN;
       82     4143    1   DCL TEMPB BIT(12);
       83     4144    1   DCL PGT$ PTR;
       84     4145    1   DCL PGTX REDEF PGT$ UBIN;
       85     4146    1   DCL START UBIN;
       86     4147    1   DCL END_SEG UBIN;
       87     4148    1   DCL 1 PS_DESC(0:0) BASED(B$MISC$) DALIGNED,
       88     4149    1            2 BOUND UBIN(20) UNAL,
       89     4150    1            2 FLGS BIT(9) UNAL,
       90     4151    1            2 WSR UBIN(3) UNAL,
       91     4152    1            2 TYP UBIN(4) UNAL,
       92     4153    1            2 BASE UBIN UNAL;
       93     4154    1   DCL 1 DESCINIT CONSTANT,
       94     4155    1            2 BOUND UBIN(20) INIT (0) UNAL,
       95     4156    1            2 FLGS BIT(9) INIT ('743'O) UNAL,
       96     4157    1            2 WSR UBIN(3) INIT (%USERWSR) UNAL,
       97     4158    1            2 TYP UBIN(4) INIT(0) UNAL,
       98     4159    1            2 BASE UBIN INIT(AS_BASE%);
       99     4160    1   DCL 1 PSR_DESC DALIGNED,
      100     4161    1            2 BOUND UBIN(20) UNAL,
      101     4162    1            2 FLGS BIT(9) UNAL,
      102     4163    1            2 WSR BIT(3) UNAL,
      103     4164    1            2 TYP UBIN(4) UNAL,
      104     4165    1            2 BASE UBIN UNAL;
      105     4166
      106     4167        %B_MPT (FPTN=B_MPT,STCLASS=SYMREF);
      107     4260    1   DCL B$MISC$ PTR SYMREF;
      108     4261    1   DCL B$LS$ PTR SYMREF;
      109     4262    1   DCL S_NSCPU UBIN SYMREF;
      110     4263    1   DCL B$MPT$ PTR SYMREF READONLY;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:4    
      111     4264    1   DCL B$MASTPT$ PTR SYMREF READONLY;
      112     4265    1   DCL B$PPUT$ PTR SYMREF READONLY;
      113     4266    1   DCL B$WINDOW$ PTR SYMREF READONLY;
      114     4267    1   DCL B$JIT$ PTR SYMREF READONLY;
      115     4268    1   DCL B$WSQ0PT$ PTR SYMREF READONLY;
      116     4269    1   DCL B$IPHYMAP$ PTR SYMREF READONLY;
      117     4270
      118     4271        %INCLUDE M_ERRORS_C;
      119     4335        %INCLUDE B$MAP;                         /* Definition of page table           */
      120     4434        %INCLUDE M$JIT_C;
      121     4954        %INCLUDE B$USER;
      122     5170        %B$USERREFS;
      123     5174        %INCLUDE B_SEGIDS_C;
      124     5713        %INCLUDE HF_LOCK_C;
      125     5727        %INCLUDE S_WSPTD_R;
      126     5743        %INCLUDE UD_EQU_E;
      127     6132        %INCLUDE ES_CNTRL_R;
      128     6144
      129     6145        %SUB MM$PPUT = B$PPUT$->MM$PPUT;
      130     6146
      131     6147        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:5    
      132     6148        /*F*    NAME:   MMH$SHARE_DS
      133     6149                PURPOSE: To allocate a data segment which is to have a shared
      134     6150                        data segment file read into it.
      135     6151                DESCRIPTION: The data segment is allocated in tha same way as
      136     6152                        for a standard call to MMH$GDS, but the pages ac-
      137     6153                        quired are not put on the user's page chain. He is
      138     6154                        still billed for using them, but the head, tail, and
      139     6155                        count are returned to the caller.
      140     6156        */
      141     6157
      142     6158    1        SHARE_DS = %TRUE;
      143     6159    1        HEADPG = 0;
      144     6160    1        GOTO GDS;
      145     6161
      146     6162
      147     6163        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:6    
      148     6164        /*F*    NAME:   MMH$MAP_DS
      149     6165                PURPOSE: To map a user's data segment onto a given page chain,
      150     6166                        for implementing shared data segment files.
      151     6167                DESCRIPTION: Only the virtual space is acquired for the data
      152     6168                        segment in question.  The virtual pages are then
      153     6169                        mapped onto the physical page chain whose head, tail,
      154     6170                        and count are passed by the caller.  Protection on the
      155     6171                        data segment is set to the value passed in "DSACCES",
      156     6172                        which is assumed to be a 36-bit BITBIN(octal descriptor
      157     6173                        protection bits).  This entry may be used to enlarge
      158     6174                        an existing mapped data segment, but the page chain
      159     6175                        passed must be the page chain to be mapped into the
      160     6176                        ENTIRE segment, not just that for the added portion
      161     6177                        of the data segment.                               */
      162     6178    1   MMH$MAP_DS: ENTRY(EWSQ,SEGID,REQSIZE,ERR,DSACCESS,HEAD,TAIL,COUNT) ALTRET;
      163     6179    1        SHARE_DS = %TRUE;
      164     6180    1        HEADPG = HEAD;                     /* Flag to do segment mapping         */
      165     6181    1        GOTO GDS;
      166     6182
      167     6183
      168     6184        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:7    
      169     6185        /*F*    NAME:   MMH$INIT_DS
      170     6186                PURPOSE: To allocate and initialize a user's data segment
      171     6187                        from a given physical page chain, for effecting
      172     6188                        initialized data segments for special shared
      173     6189                        processors. This entry may also be used to enlarge a
      174     6190                        previously initialized data segment, but the page chain
      175     6191                        passed must be that corresponding to the entire data
      176     6192                        segment, not just the added portion.                */
      177     6193    1   MMH$INIT_DS: ENTRY(EWSQ,SEGID,REQSIZE,ERR,DSACCESS,HEAD,TAIL,COUNT) ALTRET;
      178     6194    1        SHARE_DS = %FALSE;
      179     6195    1        HEADPG = HEAD;
      180     6196    1        GOTO GDS;
      181     6197
      182     6198
      183     6199        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:8    
      184     6200        /*F*   NAME:   MMH$GDS                                             */
      185     6201        /*F*   PURPOSE: To acquire space in a dynamic data segment.        */
      186     6202    1   MMH$GDS:ENTRY(EWSQ,SEGID,REQSIZE,ERR,DSACCESS) ALTRET;
      187     6203
      188     6204    1        SHARE_DS = %FALSE;
      189     6205    1        HEADPG = 0;
      190     6206        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:9    
      191     6207        /* If the top bit of wsize is set, then if we can't get the req-   */
      192     6208        /* Uested space due to user or installation page limit, don't get  */
      193     6209        /* Anything at all.                                                */
      194     6210    1   GDS: ;
      195     6211    1        CALL SETUP ALTRET (ERR_OUT);
      196     6212
      197     6213    1        IF ADDR(DSACCESS) = ADDR(NIL)
      198     6214    1        THEN
      199     6215    1             ACCESS = %MM_DSWRITE#;        /* Default access                     */
      200     6216    1        ELSE
      201     6217    1             ACCESS = BINBIT (DSACCESS , 9);
      202     6218    1        IF VIRTONLY
      203     6219    1        THEN
      204     6220    1             ACCESS = ACCESS | %DSEXEC;
      205     6221
      206     6222        /* Allow callers of MMH$MAP_DS to specify total # pgs, rather than
      207     6223           the incremental number when enlarging a mapped data seg.        */
      208     6224    1        IF (SHARE_DS) AND (HEADPG ~= 0) AND (DRBOUND ~= 0)
      209     6225    1        THEN
      210     6226    1             BSIZE = BSIZE - DRBOUND - 1;
      211     6227
      212     6228        /* Check for exceeding maximun descriptor bound of 256k.           */
      213     6229    1        IF (DRBOUND + BSIZE - 1) > %MAX_BOUND
      214     6230    2        THEN DO;
      215     6231    2             TRUNCFLG = %TRUE;
      216     6232    2             ERR = %E$SEGFULL;
      217     6233        /*E*    ERROR:  MMH-E$SEGFULL-0
      218     6234                MESSAGE: You attempted to enlarge a data segment past 256k.
      219     6235                MESSAGE1: You have attempted to exceed the maximum size a
      220     6236                        segment descriptor is capable of framing: 256k words. */
      221     6237    2             IF FREEFLG
      222     6238    2             THEN
      223     6239    2                  ALTRETURN;
      224     6240    2             IF DRBOUND = 0
      225     6241    2             THEN
      226     6242    2                  TEMP1 = -1;
      227     6243    2             ELSE
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:10   
      228     6244    2                  TEMP1 = DRBOUND;
      229     6245    2             BSIZE = %MAX_BOUND - TEMP1;
      230     6246    2           END;
      231     6247
      232     6248    1   AGAIN: ;
      233     6249    1        NEWTOP = DRBASE+DRBOUND+BSIZE;     /* New seg top - hopefully            */
      234     6250
      235     6251        /* If this is a currently empty seg, adjust the "NEWTOP" value
      236     6252           accordingly.  If not, make sure the share mode is staying the same */
      237     6253    1        IF DRBOUND = 0
      238     6254    2        THEN DO;
      239     6255        /* If the segment is being created, then check access specified. */
      240     6256    2             IF NOT ACCESS & %MM_DSREAD#
      241     6257    3             THEN DO;
      242     6258        /*E*    ERROR:  MMH-E$DSPROTBAD-0
      243     6259                MESSAGE: Illegal value specified for data segment descriptor protection.
      244     6260        */
      245     6261    3                  ERR = %E$DSPROTBAD;
      246     6262    3                  ALTRETURN;
      247     6263    3                END;
      248     6264    2             NEWTOP = NEWTOP - 1;
      249     6265    2           END;
      250     6266    2        ELSE DO;
      251     6267    2             TEMPB = ELS$ -> MM$DESC.FLGS(SEGX);
      252     6268    2             IF (TEMPB & %DSSHARED AND NOT SHARE_DS)
      253     6269    2                  OR (NOT (TEMPB & %DSSHARED) AND SHARE_DS)
      254     6270    3             THEN DO;
      255     6271        /*E*    ERROR:  MMH-E$DSMODEBAD-0
      256     6272                MESSAGE: Attempt to change the share mode of an allocated data segment.
      257     6273        */
      258     6274    3                  ERR = %E$DSMODEBAD;
      259     6275    3                  ALTRETURN;
      260     6276    3                END;
      261     6277    2             IF SHARE_DS AND DRBOUND ~= 0
      262     6278    3             THEN DO;
      263     6279                       %FINDMAP (WSQ = EWSQ , P$ = MAP$);
      264     6282    3                  VPLOW = DRBASE/4096;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:11   
      265     6283    3                  IF HW_WSQ0PT THEN
      266     6284    3                       TEMP1=B$IPHYMAP$->MM$IPHY_MAP(MAP$->B$MAP.RPN(VPLOW));
      267     6285    3                  ELSE
      268     6286    3                       TEMP1=MAP$->B$MAP.RPN(VPLOW);
      269     6287    3                  IF TEMP1 ~= HEAD THEN
      270     6288    4                  DO;
      271     6289        /*E*    ERROR: MMH-E$DBLDSMAP
      272     6290                MESSAGE: Attempt to map more than one file per data segment. */
      273     6291    4                       ERR = %E$DBLDSMAP;
      274     6292    4                       ALTRETURN;
      275     6293    4                     END;
      276     6294    3                END;
      277     6295    2           END;
      278     6296
      279     6297    1        ASIZEP = NEWTOP/4096 - ((DRBASE+DRBOUND)/4096);
      280     6298        /* Special case when seg is initially empty and is on a page boundary */
      281     6299        /* Then we must get the starting page too.                            */
      282     6300    1        IF (DRBOUND = 0) AND (MOD(DRBASE,4096) = 0)
      283     6301    1        THEN
      284     6302    1             ASIZEP = ASIZEP + 1;
      285     6303    1        IF (EWSQ = %MONWSQ)
      286     6304    2        THEN DO;
      287     6305    2             TEMP1 = MM_DSMAX (SEGX - %LODATASID);
      288     6306    2             IF (ASIZEP + ((DRBOUND + 4095)/4096) > TEMP1)
      289     6307    3             THEN DO;
      290     6308        /*E*   ERROR:  MMH-E$MONDSFULL-0
      291     6309               MESSAGE: Monitor data segment has grown to its maximum size.  */
      292     6310    3                  ERR = %E$MONDSFULL;
      293     6311    3                  TRUNCFLG = %TRUE;
      294     6312    3                  BSIZE = TEMP1 * 4096 - (DRBOUND + 1);
      295     6313    3                  IF DRBOUND = 0
      296     6314    3                  THEN
      297     6315    3                       BSIZE = BSIZE + 1;
      298     6316    3                  IF BSIZE <= 0
      299     6317    3                  THEN
      300     6318    3                       ALTRETURN;
      301     6319    3                  GOTO AGAIN;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:12   
      302     6320    3                END;
      303     6321    2           END;
      304     6322
      305     6323    1        ASIZE = ASIZEP * 4096;
      306     6324             %GETDBASE (DBASE = TEMP1 , LS$ = ELS$ , SEGID = %DS8SID);
      307     6327             %GETDBOUND (DBOUND = CURTOP , LS$ = ELS$ , SEGID = %DS8SID);
      308     6330    1        CURTOP = CURTOP + TEMP1;           /* Top of high data seg               */
      309     6331
      310     6332        /* Now, compute the wsize of the gap between the end of the current */
      311     6333        /* Segment and the start of the next in pages. This value will nor-*/
      312     6334        /* Mally be zero, except in the case where a user hit his page     */
      313     6335        /* Limit while growing a segment previously, and has now made more */
      314     6336        /* memory avilable by releasing pages elsewhere...                 */
      315     6337        /* Or else if this is a monitor data segment (fixed bases)         */
      316     6338    1        TEMP1 = (DRBASE + DRBOUND - 1)/4096; /* '-1' in case seg is null      */
      317     6339    1        IF BSEGX = %DS8SID
      318     6340    1        THEN
      319     6341    1             TEMP2 = DATAHI/4096;
      320     6342    2        ELSE DO;                           /* Else, get base of nxt seg          */
      321     6343    2             TEMP2 = ELS$ -> MM$DESC.BASE (SEGX + 1);
      322     6344    2             TEMP2 = TEMP2/4096;           /* Pg # of nxt seg's base             */
      323     6345    2           END;
      324     6346    1        GAPPGS = TEMP2 - TEMP1 - 1;
      325     6347
      326     6348        /* Here we check to see if the increase in segment size will
      327     6349        overlap the following segment.  If this is the case we will
      328     6350        have to move all the segments above it.
      329     6351         */
      330     6352    1        IF ASIZEP > GAPPGS
      331     6353    2        THEN DO;                           /* Do if seg will cross into nxt seg  */
      332     6354
      333     6355        /*
      334     6356             If this is a monitor data segment we cannot move things
      335     6357             around so we better altret.
      336     6358         */
      337     6359    2             IF EWSQ = %MONWSQ
      338     6360    3             THEN DO;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:13   
      339     6361                       /*E*   ERROR:  MMH-E$ALLGONE-0
      340     6362                              MESSAGE: All data segment space has been allocated.         */
      341     6363    3                  ERR = %E$ALLGONE;
      342     6364    3                  ALTRETURN;
      343     6365    3                END;
      344     6366
      345     6367    2             IF BSEGX = %DS8SID            /* Test for pushing high seg off      */
      346     6368    2             THEN
      347     6369    2                  TEMP1 = NEWTOP;          /* ...END of data area                */
      348     6370    2             ELSE
      349     6371    2                  TEMP1 = CURTOP + ASIZE - GAPPGS*4096;
      350     6372    2             IF TEMP1 >= DATAHI
      351     6373    3             THEN DO;                      /* If high seg will overflow the      */
      352     6374    3                  IF DATAHI = 1024 * 4096
      353     6375    4                  THEN DO;
      354     6376    4                       CALL MMK$BIGPT;
      355     6377    4                       GOTO SEGFITS;
      356     6378    4                     END;
      357     6379    3                  ERR = %E$ALLGONE;        /* data area then truncate it         */
      358     6380    3                  IF FREEFLG OR SHARE_DS
      359     6381    3                  THEN
      360     6382    3                       ALTRETURN;
      361     6383    3                  TRUNCFLG = %TRUE;        /* And find the max wsize we can      */
      362     6384    3                  BSIZE = DATAHI - CURTOP - 1; /* Safely grow it            */
      363     6385    3                  IF BSIZE <= 0
      364     6386    3                  THEN
      365     6387    3                       ALTRETURN;
      366     6388    3                  IF BSEGX = %DS8SID
      367     6389    3                  THEN
      368     6390    3                       ASIZEP = GAPPGS;
      369     6391    3                  ELSE
      370     6392    3                       ASIZEP = BSIZE/4096;
      371     6393    3                  ASIZE = ASIZEP * 4096;
      372     6394
      373     6395        /* Set bsize = rounded-down to nearest page # of words that can    */
      374     6396        /* Be obtained.                                                    */
      375     6397    3                  BSIZE = ASIZE;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:14   
      376     6398    3                  IF ASIZEP = 0
      377     6399    3                  THEN
      378     6400    3                       ALTRETURN;
      379     6401    3                END;
      380     6402    2   SEGFITS:
      381     6403    2             I = %MAXDATASID + 1;          /* Loop backward from maxdatasid to   */
      382     6404
      383     6405
      384     6406    2             CALL ADJ_PS1;
      385     6407
      386     6408    3   LOOP1:    DO;                           /* Segx+1 to relocate all segments    */
      387     6409    3                  I = I - 1;
      388     6410    3                  IF I <= SEGX
      389     6411    3                  THEN
      390     6412    3                       GOTO ENDLOOP1;
      391     6413    3                  TEMP3 = ELS$ -> MM$DESC.BASE (I);
      392     6414    3                  TEMP1 = TEMP3/4096;      /* Starting pg # of seg               */
      393     6415        /* Relocate the base by the # of pgs. we're gonna move things */
      394     6416    3                  TEMP2 = ASIZE - GAPPGS*4096;
      395     6417
      396     6418
      397     6419    3                  TEMP4 = TEMP2;
      398     6420    3                  CALL ADJ_PS2;
      399     6421
      400     6422    3                  ELS$ -> MM$DESC.BASE (I) = TEMP3 + TEMP2;
      401     6423    3                  J = ELS$ -> MM$DESC.BOUND (I);
      402     6424    3                  J = (J + 4095)/4096;
      403     6425
      404     6426    4   LOOP2:         DO;                      /* #PGS in seg-1 to zero by -1        */
      405     6427    4                       J = J - 1;
      406     6428    4                       IF J < 0 THEN GOTO ENDLOOP2;
      407     6429                                           /* Fix up the page table for each segment  */
      408     6430    4                       TEMP2 = TEMP1 + ASIZEP - GAPPGS + J; /* New page for seg    */
      409     6431    4                       TEMP3 = TEMP1 + J;  /* Old page for seg                   */
      410     6432    4                       MAP$->B$PAGE.WRD(TEMP2) = MAP$->B$PAGE.WRD(TEMP3);
      411     6433    4                       MAP$->B$PAGE.WRD(TEMP3) = BITBIN(MM_FPMC);
      412     6434    4                       GOTO LOOP2;         /* End of backward loop #2            */
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:15   
      413     6435    4   ENDLOOP2:         END;
      414     6436
      415     6437    3                  GOTO LOOP1;              /* End of backward loop # 1           */
      416     6438    3   ENDLOOP1:    END;
      417     6439
      418     6440
      419     6441    2             CALL SPOIL_DR;
      420     6442
      421     6443
      422     6444    2             CALL HFC$ASSOCCLR(EWSQ,%DBDSEGLO,16384); /*MAX Dense PT*/
      423     6445                  %UNLOCK(G=MM_LOCK);
      424     6448    2           END;
      425     6449
      426     6450        /* All segments above the one we want to grow have been moved up.  */
      427     6451        /* Now, adjust the bound of the descriptor for the segment to be   */
      428     6452        /* Grown and get the necessary pages to fill it out.               */
      429     6453    1   SETLS: ;
      430     6454        /* Get page number one past current end of segment */
      431     6455    1        TEMP2 = (MOD(DRBASE,4096) + DRBOUND)/4096 + 1;
      432     6456    1        IF
      433     6457                  %NOTNULL (LS$ = ELS$ , SEGID = BSEGX);
      434     6460    1        THEN ;
      435     6461    2        ELSE DO;                      /* And fix bsize to allow for the bound-*/
      436     6462    2             BSIZE = BSIZE - 1;       /* Ary condition of zero bound =1 byte     */
      437     6463                  %SETNOTNULL (LS$ = ELS$ , SEGID = BSEGX);
      438     6466        /* If seg is null & starts on page boundary, get starting page of seg */
      439     6467    2             IF MOD(DRBASE,4096) = 0
      440     6468    2             THEN
      441     6469    2                  TEMP2 = TEMP2 - 1;
      442     6470    2           END;
      443     6471
      444     6472    1        ELS$ -> MM$DESC.BOUND (SEGX) = DRBOUND + BSIZE;
      445     6473    1        IF SHARE_DS
      446     6474    1        THEN
      447     6475    1             B$JIT.PSEUDOPGS = B$JIT.PSEUDOPGS + ASIZEP;
      448     6476        /* Set segment access if this is the first GET for it.  If it is
      449     6477           to be shared, mark that at this time as well.                   */
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:16   
      450     6478    1        IF (TEMP2 = 0)
      451     6479    2        THEN DO;                           /* Segment is being defined...        */
      452     6480    2             ELS$ -> MM$DESC.FLGS (SEGX) = (ELS$ -> MM$DESC.FLGS (SEGX) & ~%MM_DSWRITE#
              6480                      ) | ACCESS;
      453     6481    2             IF SHARE_DS
      454     6482    2             THEN
      455     6483    2                  ELS$ -> MM$DESC.FLGS (SEGX) = ELS$ -> MM$DESC.FLGS (SEGX) | %DSSHARED
              6483                           ;
      456     6484    2           END;
      457     6485
      458     6486    1        IF VIRTONLY THEN GOTO VIRTONLY_;
      459     6487        /* See if we want to actually allocate some physical pages here,
      460     6488           or just map a pased page chain into the virtual pages... */
      461     6489    1        IF (HEADPG = 0) OR ((HEADPG ~= 0) AND NOT SHARE_DS)
      462     6490    2        THEN DO;                           /* We wanna go gettem...              */
      463     6491    2             CALL MMG$SGVP(EWSQ,SEGID,TEMP2,ASIZEP,ERR) ALTRET(BADGDS);
      464     6492    2             IF ES_CLEARMEM~=0 THEN CALL JSN$BLNK1(ELS$->MM$DESC(SEGX),TEMP2,ASIZEP);
      465     6493                                                /* Zap the pages we got. */
      466     6494        /* If this was a call to MMH$SHARE_DS, then we want to unlink the
      467     6495           allocated pages from the user's page chain, reverse the links,
      468     6496           and pass the resulting head, tail, and count back to the caller. */
      469     6497    2             IF SHARE_DS
      470     6498    3             THEN DO;
      471     6499                       %FINDMAP (WSQ = EWSQ , P$ = MAP$);
      472     6502    3                  VPLOW = (DRBASE/4096) + TEMP2;
      473     6503    3                  IF HW_WSQ0PT THEN
      474     6504    3                       HEAD=B$IPHYMAP$->MM$IPHY_MAP(MAP$->B$MAP.RPN(VPLOW));
      475     6505    3                  ELSE
      476     6506    3                       HEAD = MAP$->B$MAP.RPN(VPLOW);
      477     6507    3                  COUNT = ASIZEP;
      478     6508    3                  B$JIT.PPC = B$JIT.PPC - ASIZEP;
      479     6509
      480     6510    3                  IF EWSQ > 1
      481     6511    3                  THEN
      482     6512    3                       S$CU$->B$U.PCT = B$JIT.PPC;
      483     6513    3                  TEMP1 = HEAD;
      484     6514    4                  DO I = 1 TO ASIZEP;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:17   
      485     6515    4                       MM$PPUT.USER(TEMP1) = '0'B;
      486     6516    4                       MAP$->B$MAP.SCTRL(VPLOW) = %SCCVM;
      487     6517    4                       VPLOW = VPLOW + 1;
      488     6518    4                       TAIL = TEMP1;
      489     6519    5                       IF HW_WSQ0PT THEN DO;
      490     6520    5                            J=MAP$->B$MAP.RPN(VPLOW);
      491     6521    5                            IF J= BITBIN('000000777777'O) THEN EXIT;
              6521                                     /* DONT RUN -1 THRU IPHYMAP */
      492     6522    5                            MM$PPUT.PPNO(TEMP1)=B$IPHYMAP$->MM$IPHY_MAP(J);
      493     6523    5                            TEMP1=B$IPHYMAP$->MM$IPHY_MAP(J);
      494     6524    5                          END;
      495     6525    5                       ELSE DO;
      496     6526    5                            MM$PPUT.PPNO(TEMP1) = MAP$->B$MAP.RPN(VPLOW);
      497     6527    5                            TEMP1 = MAP$->B$MAP.RPN(VPLOW);
      498     6528    5                          END;
      499     6529    4                     END;
      500     6530    3                  MM$PPUT.PPNO (TAIL) = 0;
      501     6531    3                END;
      502     6532    2           END;
      503     6533
      504     6534    1        IF HEADPG ~= 0
      505     6535    2        THEN DO;                           /* Mapping or initialization required */
      506     6536                  %FINDMAP (WSQ = EWSQ , P$ = MAP$);
      507     6539    2             TEMP1 = DRBASE/4096;
      508     6540    2             TEMP2 = NEWTOP/4096;
      509     6541    2             PGT$ = PINCRW(B$WINDOW$,1024);
      510     6542    2             J = COUNT;                    /* For security checking...           */
      511     6543    3             DO I = TEMP1 TO TEMP2;
      512     6544    3                  IF HEADPG = 0
      513     6545    3                  THEN
      514     6546    3                       CALL SC_MM43;
      515     6547        /*S*    SCREECH_CODE:   MMH-S$MM43
      516     6548                TYPE:   SCREECH
      517     6549                MESSAGE: Passed page chain count doesn't agree with actual length. */
      518     6550
      519     6551        /* Do either mapping or data segment initialization... */
      520     6552    3                  IF SHARE_DS
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:18   
      521     6553    4                  THEN DO;
      522     6554    4                       IF NOT (MAP$ -> B$MAP.CTRL (I) & %PGINMEM) THEN
      523     6555    5                       DO CASE(EWSQ);      /* Update correct JIT DS field */
      524     6556    5                       CASE(%CPWSQ);       /* Command processor           */
      525     6557    5                          B$JIT.PCC = B$JIT.PCC + 1;
      526     6558    5                       CASE(%DBWSQ);       /* Debugger                    */
      527     6559    5                          B$JIT.PCDDS = B$JIT.PCDDS + 1;
      528     6560    5                       CASE(%ASLWSQ);      /* Alternate shared library    */
      529     6561    5                          B$JIT.PCADS = B$JIT.PCADS + 1;
      530     6562    5                       CASE(ELSE);         /* User or monitor             */
      531     6563    5                          B$JIT.PCDS = B$JIT.PCDS + 1;
      532     6564    5                       END;
      533     6565    4                       IF HW_WSQ0PT THEN
      534     6566    4                            MAP$->B$MAP.RPN(I) = B$WSQ0PT$->B$MAP.RPN(HEADPG);
      535     6567    4                       ELSE
      536     6568    4                            MAP$->B$MAP.RPN(I) = HEADPG;
      537     6569    4                       MAP$->B$MAP.CTRL(I) = (%PGINMEM | %PGWRITE | %PGIOM);
      538     6570        /* Mark the page as 'CVM-ed' so we will know he doesn't own it.    */
      539     6571    4                       MAP$->B$MAP.SCTRL(I) = %SCCVM;
      540     6572    4                     END;
      541     6573    4                  ELSE DO;
      542     6574    4                       IF HW_WSQ0PT THEN
      543     6575    4                            TEMP3=B$IPHYMAP$->MM$IPHY_MAP(MAP$->B$MAP.RPN(I));
      544     6576    4                       ELSE
      545     6577    4                            TEMP3 = MAP$->B$MAP.RPN(I);
      546     6578    4                       CALL MME$CVM(%MONWSQ,%WINDOWLO,HEADPG,ERR) ALTRET(INIT_ERR);
      547     6579    4                       CALL MME$CVM(%MONWSQ,%WINDOWLO+1,TEMP3,ERR) ALTRET(INIT_ERR);
      548     6580    4                       PGT$->B$PAGE = B$WINDOW$->B$PAGE;
      549     6581    4                     END;
      550     6582    3                  HEADPG = MM$PPUT.PPNO(HEADPG);
      551     6583    3                  J = J - 1;
      552     6584    3                END;
      553     6585
      554     6586    2             IF (J ~= 0) OR (HEADPG ~= 0)
      555     6587    2             THEN
      556     6588    2                  CALL SC_MM43;
      557     6589    2             IF NOT SHARE_DS
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:19   
      558     6590    3             THEN DO;
      559     6591    3                  CALL MME$CVM(%MONWSQ,%WINDOWLO,-1,ERR) ALTRET(INIT_ERR);
      560     6592    3                  CALL MME$CVM(%MONWSQ,%WINDOWLO+1,-1,ERR) ALTRET(INIT_ERR);
      561     6593    3                END;
      562     6594    2           END;
      563     6595
      564     6596    1   VIRTONLY_:;
      565     6597        /* If we're running multiprocessing, then update the slave pg tbls */
      566     6598    1        IF (EWSQ = %MONWSQ) AND (S_NSCPU > 0)
      567     6599    2        THEN DO;
      568     6600    2             TEMP1 = DRBASE/4096 + TEMP2;  /* Starting pg no                  */
      569     6601    2             TEMP3 = TEMP1 + ASIZEP - 1;   /* Ending pg no.                    */
      570     6602    2             PGT$ = B$MASTPT$;
      571     6603    3             DO I = 0 TO S_NSCPU;
      572     6604    4                  DO J = TEMP1 TO TEMP3;
      573     6605    4                       PGT$->B$PAGE.WRD(J) = B$MPT$->B$PAGE.WRD(J);
      574     6606    4                     END;
      575     6607    3                  PGTX = PGTX + 1;
      576     6608    3                END;
      577     6609
      578     6610        /*   Subtract any pages that were reserved for a monitor data
      579     6611             segement from MM_HELD */
      580     6612
      581     6613    2             IF EWSQ = %MONWSQ
      582     6614    3             THEN DO;
      583     6615    3                  CALL MMA$LOCKBP;
      584     6616    3                  MM_HELD = MM_HELD - MINIMUM (ASIZEP,
      585     6617    3                       MAXIMUM(0,MM_RDS(SEGX-%LODATASID)-TEMP2));
      586     6618             /*   TEMP2 is number of pages before this get
      587     6619                  MM_RDS(SEGX-%LODATASID) is pages reserved for this segment
      588     6620                  ASIZEP is the number of pages the were obtained
      589     6621             */
      590     6622    3                  CALL MMA$UNLOCKBP;
      591     6623    3                END;
      592     6624    2           END;
      593     6625
      594     6626    1        IF TRUNCFLG
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:20   
      595     6627    1        THEN
      596     6628    1             ALTRETURN;                    /* We had to truncate desired wsize   */
      597     6629    1        ELSE RETURN;                       /* ...WE didn't                       */
      598     6630
      599     6631        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:21   
      600     6632        /* CVM error while trying to initialize a data segment... */
      601     6633    1   INIT_ERR:;
      602     6634        /*S*    SCREECH_CODE: MMH-S$MM44
      603     6635                TYPE: SCREECH
      604     6636                MESSAGE: CVM failed while trying to initialize a data segment. */
      605     6637    1        CALL SC_MM44;
      606     6638
      607     6639        /* Alternate return handler for MMG$SGVP */
      608     6640    1   BADGDS:
      609     6641        /*   If the error isn't page limit reached or can't get physical   */
      610     6642        /*   page for monitor, then screech.                               */
      611     6643    1        IF (ERR ~= %E$MEMLIMIT) AND (ERR ~= %E$MONPP)
      612     6644    1             AND (ERR ~= %E$BRKCTY)
      613     6645    1        THEN
      614     6646    1             CALL SC_MM22;
      615     6647        /*S*    SCREECH_CODE: MMH-S$MM22                                   */
      616     6648        /*S*     TYPE:SUA              */
      617     6649        /*S*   MESSAGE: Inconsistancy between MMH$GDS and MMG$SGVP.        */
      618     6650
      619     6651        /*   Otherwise, we're going to return: */
      620     6652        /*E*   ERROR:  MMH-E$MEMLIMIT-0
      621     6653               MESSAGE: User- or installation-set memory limit reached.    */
      622     6654        /*   ...OR     */
      623     6655        /*E*   ERROR:  MMH-E$MONPP-0
      624     6656               MESSAGE: Unable currently to allocate physical page to monitor */
      625     6657        /*  .....OR     */
      626     6658        /*E* ERROR: MMH-E$BRKCTY-0
      627     6659             MESSAGE: User hit break or control Y during a memory request */
      628     6660
      629     6661        /* Now, find out just how big the segment did get before we hit limit */
      630     6662    1        IF FREEFLG OR SHARE_DS
      631     6663    2        THEN DO;
      632     6664    2             CALL MMG$SFVP_NOW(EWSQ,SEGID,TEMP2+ASIZEP-1,ASIZEP,TEMP1);
      633     6665    2             ASIZEP = 0;
      634     6666    2           END;
      635     6667    1        BSIZE = DRBOUND + ASIZEP*4096;
      636     6668    1        IF BSIZE = 0
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:22   
      637     6669    2        THEN DO;
      638     6670    2             ELS$ -> MM$DESC.FLGS (SEGX) = ELS$ -> MM$DESC.FLGS (SEGX) & ~(%DSSHARED|%
              6670                      DSNULL);
      639     6671    2             ELS$ -> MM$DESC.BOUND (SEGX) = 0;
      640     6672    2           END;
      641     6673    2        ELSE DO;
      642     6674    2             IF DRBOUND = 0
      643     6675    2             THEN
      644     6676    2                  BSIZE = BSIZE - 1;
      645     6677    2             ELS$ -> MM$DESC.BASE (SEGX) = DRBASE;
      646     6678    2             ELS$ -> MM$DESC.BOUND (SEGX) = BSIZE;
      647     6679    2           END;
      648     6680    1        ALTRETURN;                         /* We had to truncate desired wsize   */
      649     6681
      650     6682
      651     6683        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:23   
      652     6684        /*F*   NAME:   MMH$FDS                                             */
      653     6685        /*F*   PURPOSE: To free space from a previously allocated dynamic  */
      654     6686        /*,*           data segment.                                       */
      655     6687    1   MMH$FDS: ENTRY(EWSQ,SEGID,REQSIZE,ERR) ALTRET;
      656     6688
      657     6689    1        CALL SETUP ALTRET (ERR_OUT);
      658     6690
      659     6691    1        IF BSIZE > DRBOUND + 1
      660     6692    2        THEN DO;                           /* Do if size  > size  of seg         */
      661     6693        /*E*   ERROR:  MMH-E$BIGFREE-0
      662     6694               MESSAGE: Attempt to free more space than is in data segment. */
      663     6695    2             ERR = %E$BIGFREE;
      664     6696    2             IF DRBOUND = 0 THEN ALTRETURN; /* Seg is null                   */
      665     6697    2             TRUNCFLG = %TRUE;             /* Set truncation flag                */
      666     6698    2             BSIZE = DRBOUND + 1;          /* Max size we can actually free      */
      667     6699    2           END;
      668     6700
      669     6701    1        CURTOP = (DRBASE+DRBOUND)/4096;    /* Current top page in seg            */
      670     6702    1        NEWTOP = DRBASE+DRBOUND-BSIZE;     /* New byte addr of top of seg        */
      671     6703        /* Now get # of pages by which to relocate all segs above current one */
      672     6704    1        ASIZEP = CURTOP - NEWTOP/4096;
      673     6705    1        ASIZE = ASIZEP*4096;
      674     6706    1        IF ASIZEP > 0
      675     6707    2        THEN DO;                      /* Prepare to relocate segs to fill in     */
      676     6708                                           /* The hole left by freeing up seg space   */
      677     6709        /*   Get current segment-relative high page number:   */
      678     6710    2             TEMP3 = (MOD(DRBASE,4096) + DRBOUND)/4096;
      679     6711    2             TEMPB = ELS$ -> MM$DESC.FLGS (SEGX);
      680     6712    2             IF NOT (TEMPB & %DSSHARED)
      681     6713    2             THEN
      682     6714    2                  CALL MMG$SFVP(EWSQ,SEGID,TEMP3,ASIZEP,ERR) ALTRET(BADFVP);
      683     6715    3             ELSE DO;
      684     6716                       %FINDMAP (WSQ = EWSQ , P$ = MAP$);
      685     6719    3                  TEMP1 = NEWTOP/4096;
      686     6720    3                  B$JIT.PSEUDOPGS = B$JIT.PSEUDOPGS - ASIZEP;
      687     6721    4                  DO I = 1 TO ASIZEP;
      688     6722    4                       TEMP1 = TEMP1 + 1;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:24   
      689     6723    4                       MAP$->B$PAGE.WRD (TEMP1) = BITBIN(MM_FPMC);
      690     6724    5                       DO CASE(EWSQ);      /* Update correct JIT DS field */
      691     6725    5                       CASE(%CPWSQ);       /* Command processor           */
      692     6726    5                          B$JIT.PCC = B$JIT.PCC - 1;
      693     6727    5                       CASE(%DBWSQ);       /* Debugger                    */
      694     6728    5                          B$JIT.PCDDS = B$JIT.PCDDS - 1;
      695     6729    5                       CASE(%ASLWSQ);      /* Alternate shared library    */
      696     6730    5                          B$JIT.PCADS = B$JIT.PCADS - 1;
      697     6731    5                       CASE(ELSE);         /* User or monitor             */
      698     6732    5                          B$JIT.PCDS = B$JIT.PCDS - 1;
      699     6733    5                       END;
      700     6734    4                     END;
      701     6735    3                END;
      702     6736    2             IF EWSQ ~= %MONWSQ THEN
      703     6737    3             DO;
      704     6738
      705     6739    3                  CALL ADJ_PS1;
      706     6740
      707     6741    4                  DO I = SEGX+1 TO %MAXDATASID;
      708     6742    4                       TEMP2 = ELS$ -> MM$DESC.BASE (I);
      709     6743    4                       TEMP1 = TEMP2/4096; /* Make it page #                   */
      710     6744    4                       TEMP3 = ELS$ -> MM$DESC.BOUND (I);
      711     6745    4                       TEMP3 = (TEMP3 + 4095)/4096 - 1;
      712     6746
      713     6747
      714     6748    4                       TEMP4 = - ASIZE;
      715     6749    4                       CALL ADJ_PS2;
      716     6750
      717     6751    4                       ELS$ -> MM$DESC.BASE (I) = TEMP2 - ASIZE;
      718     6752    5                       DO J = 0 TO TEMP3;  /* Re-map moved segs                 */
      719     6753    5                            TEMP2 = TEMP1 - ASIZEP; /* New vp to which it moved   */
      720     6754
      721     6755        /*S*    SCREECH_CODE: MMH-S$MM23                                   */
      722     6756        /*S*   TYPE:   SCREECH                                             */
      723     6757        /*S*   MESSAGE: Inconsistancy between MMH$FDS and MMG$SFVP.        */
      724     6758    5                            IF MAP$->B$MAP.RPN(TEMP2) ~= MM_FPMC.RPN
      725     6759    5                            THEN
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:25   
      726     6760    5                                 CALL SC_MM23;
      727     6761
      728     6762    5                            MAP$->B$PAGE.WRD(TEMP2) = MAP$->B$PAGE.WRD(TEMP1);
      729     6763    5                            MAP$->B$PAGE.WRD(TEMP1) = BITBIN(MM_FPMC);
      730     6764    5                            TEMP1 = TEMP1 + 1; /* Nxt vp to move to new location  */
      731     6765    5                          END;
      732     6766    4                     END;
      733     6767
      734     6768
      735     6769    3                  CALL SPOIL_DR;
      736     6770
      737     6771
      738     6772    3                  CALL HFC$ASSOCCLR(EWSQ,%DBDSEGLO,16384); /*MAX Dense PT*/
      739     6773                       %UNLOCK (G=MM_LOCK);
      740     6776    3                END;
      741     6777
      742     6778        /* If this is the monitor, and there are slave cpu's, fix up their */
      743     6779        /* page tables too.                                                */
      744     6780    2             ELSE IF S_NSCPU > 0
      745     6781    3                  THEN DO;
      746     6782        /* Get page # of 1st page freed by MMG$SFVP */
      747     6783    3                       TEMP3 = TEMP3 + DRBASE/4096;
      748     6784    3                       TEMP1 = TEMP3 - ASIZEP + 1;
      749     6785    3                       PGT$ = B$MASTPT$;
      750     6786    4                       DO I = 0 TO S_NSCPU;
      751     6787    5                            DO J = TEMP1 TO TEMP3;
      752     6788    5                                 PGT$->B$PAGE.WRD(J) = BITBIN(MM_FPMC);
      753     6789    5                               END;
      754     6790    4                            PGTX = PGTX + 1;
      755     6791    4                          END;
      756     6792    3                     END;
      757     6793    2           END;
      758     6794
      759     6795        /* The segment in question has now been shrunk, and all following  */
      760     6796        /* Segments relocated if the shrinking segment shrank past a page  */
      761     6797        /* Boundary. All that remains is to correct the bound field for the*/
      762     6798        /* Shrunken segment, and to set its descriptor null if thewsize    */
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:26   
      763     6799        /* Went to zero.                                                   */
      764     6800    1        IF BSIZE < DRBOUND
      765     6801    2        THEN DO;                           /* Size  < size  of seg               */
      766     6802    2             ELS$ -> MM$DESC.BOUND (SEGX) = DRBOUND - BSIZE;
      767     6803    2           END;
      768     6804    2        ELSE DO;                      /* Size  = size  of seg (seg now null)     */
      769     6805    2             ELS$ -> MM$DESC.FLGS (SEGX) = (ELS$ -> MM$DESC.FLGS (SEGX) & ~(%DSSHARED|%
              6805                      DSNULL|%DSEXEC))|%MM_DSWRITE#;
      770     6806        /* Reset all of the access and sharability info... */
      771     6807    2             ELS$ -> MM$DESC.BOUND (SEGX) = 0;
      772     6808    2           END;
      773     6809
      774     6810        /*   Add any pages that were reserved for a monitor data
      775     6811             segement TO MM_HELD */
      776     6812
      777     6813    1        IF EWSQ = %MONWSQ
      778     6814    2        THEN DO;
      779     6815    2             CALL MMA$LOCKBP;
      780     6816    2             MM_HELD = MM_HELD + MINIMUM (ASIZEP,
      781     6817    2                  MAXIMUM(0,MM_RDS(SEGX-%LODATASID)-((DRBOUND+4095)/4096-ASIZEP)));
      782     6818             /*   TEMP2 is number of pages before this get
      783     6819                  MM_RDS(SEGX-%LODATASID) is pages reserved for this segment
      784     6820                  ASIZEP is the number of pages the were obtained
      785     6821             */
      786     6822    2             CALL MMA$UNLOCKBP;
      787     6823    2             IF TRUNCFLG
      788     6824
      789     6825    2             THEN ALTRETURN;               /* We had to truncate desired wsize   */
      790     6826    2             ELSE RETURN;                  /* ...WE didn't                       */
      791     6827    2           END;
      792     6828    1        IF TRUNCFLG
      793     6829    1        THEN
      794     6830    1             ALTRETURN;
      795     6831    1        ELSE
      796     6832    1             RETURN;
      797     6833
      798     6834
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:27   
      799     6835        /* Screech if we got the alternate return from MMG$SFVP - it       */
      800     6836        /* Means that we tried to free more pages than are in the seg, and */
      801     6837        /* If all this math is correct, that should never happen.          */
      802     6838    1   BADFVP: IF ERR ~= %E$IOACTIVE THEN CALL SC_MM23;
      803     6839    1        ALTRETURN;
      804     6840
      805     6841        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:28   
      806     6842
      807     6843    1   SETUP: PROC ALTRET;
      808     6844    2        IF (EWSQ = %MONWSQ)
      809     6845    2        THEN
      810     6846    2             CALL SSS$BLOCKM;
      811     6847
      812     6848    2        FREEFLG = F_WSIZE.FREEFLG;
      813     6849    2        VIRTONLY = F_WSIZE.VIRTONLY;
      814     6850    2        WSIZE = F_WSIZE.WORDS#;
      815     6851
      816     6852        /*S*    SCREECH_CODE: MMH-S$MM24                                   */
      817     6853        /*S*   TYPE:   SCREECH                                             */
      818     6854        /*S*   MESSAGE: Illegal data segment  SIZE specification passed to MMH */
      819     6855    2        IF WSIZE > 256*1024
      820     6856    2        THEN
      821     6857    2             CALL SC_MM24;
      822     6858
      823     6859
      824     6860        /* Round request up to a dblwd, cause of NSA problems */
      825     6861    2        IF B_WSIZE.ODD_BIT
      826     6862    2        THEN
      827     6863    2             WSIZE = WSIZE + 1;
      828     6864
      829     6865    2        BSEGX = BINBIT(SEGID,12);
      830     6866    2        SEGX = MOD(SEGID,1024);
      831     6867
      832     6868    2        IF (SEGX <= %HIFIXEDSID) OR (SEGX > %MAXDATASID)
      833     6869    3        THEN DO;
      834     6870        /*E*   ERROR:  MMH-E$BADSEGID-0
      835     6871               MESSAGE: That SEGID is not a valid data segment SEGID.      */
      836     6872    3             ERR = %E$BADSEGID;            /* Bad segid passed to us             */
      837     6873    3             ALTRETURN;
      838     6874    3           END;
      839     6875
      840     6876    2        TRUNCFLG = %FALSE;
      841     6877             %FINDLS (WSQ = EWSQ , P$ = ELS$);
      842     6880    2        DRBASE = ELS$ -> MM$DESC.BASE (SEGX);
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:29   
      843     6881    2        DRBOUND = ELS$ -> MM$DESC.BOUND (SEGX);
      844     6882    2        BSIZE = WSIZE*4;                   /* Size  to add to bound              */
      845     6883    3        DO CASE(EWSQ);                /* Get correct upper bound of data area    */
      846     6884    3        CASE(%CPWSQ);                      /* Command processor                  */
      847     6885    3           DATAHI = %CPDSEGHI + 1;
      848     6886    3           DATALO = %CPDSEGLO;
      849     6887    3        CASE(%DBWSQ);                      /* Debugger                           */
      850     6888    3           DATAHI = %DBDSEGHI + 1;
      851     6889    3           DATALO = %DBDSEGLO;
      852     6890    3        CASE(%ASLWSQ);                     /* Alternate shared library           */
      853     6891    3           DATAHI = %ASLSEGHI + 1;
      854     6892    3           DATALO = %ASLSEGLO;
      855     6893    3        CASE(ELSE);                        /* User or monitor                    */
      856     6894    3           DATAHI = B$JIT.PTSIZ+1;
      857     6895    3           DATALO = %UDSEGLO;
      858     6896    3        END;
      859     6897
      860     6898
      861     6899    2        DATAHI = DATAHI * 4096;            /* Cvrt upper bound to bytes          */
      862     6900    2        DATALO = DATALO * 4096;            /* Cvrt lower bound to bytes          */
      863     6901    2   END SETUP;
      864     6902
      865     6903        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:30   
      866     6904    1   ADJ_PS1: PROC;
      867     6905                  %FINDMAP (WSQ = EWSQ , P$ = MAP$);
      868     6908
      869     6909        /* Call magic so we can get at the safe store frame */
      870     6910    2        CALL UDN$MAGIC;
      871     6911        /* Make a type 0 descriptor framing all of the ASR/PSR */
      872     6912             %LOCK (G=MM_LOCK);
      873     6915    2        B$LS$->B$MLNK.MISC = DESCINIT;
      874     6916    2        CALL MMA$GETPSR(PSR_DESC);
      875     6917    2        B$LS$->B$MLNK.MISC.BOUND = PSR_DESC.BASE - AS_BASE % + PSR_DESC.BOUND;
      876     6918    2   END ADJ_PS1;
      877     6919
      878     6920
      879     6921    1   ADJ_PS2: PROC;
      880     6922        /* Look for any descriptor in the PSR and ASR that this effects */
      881     6923    2        J = B$LS$->B$MLNK.MISC.BOUND / SIZEC(MM$DESC) - 1;
      882     6924    2        START = ELS$->MM$DESC.BASE(I);
      883     6925    2        END_SEG = START + ELS$->MM$DESC.BOUND(I);
      884     6926
      885     6927    2        IF PSR_DESC.FLGS & %DSNULL
      886     6928    2        THEN
      887     6929    3        DO WHILE (J>=0);
      888     6930    3             IF START <= PS_DESC.BASE(J) AND PS_DESC.BASE(J) <= END_SEG AND PS_DESC.WSR
              6930                      (J) = %USERWSR
      889     6931    3             THEN
      890     6932    3                  PS_DESC.BASE(J) = PS_DESC.BASE(J) + TEMP4;
      891     6933    3             J = J - 1;
      892     6934    3           END;
      893     6935    2   END ADJ_PS2;
      894     6936
      895     6937        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:31   
      896     6938    1   SPOIL_DR: PROC;
      897     6939
      898     6940        /* If we are changing something in the user's map spoil all the
      899     6941             descriptor registers */
      900     6942    2        START = ELS$->MM$DESC.BASE (SEGX);
      901     6943    2        PGT$ = ADDR (B_MPT.SS$ -> B$SS.DR0);
      902     6944
      903     6945    3        DO I = 0 TO 7;
      904     6946
      905     6947    3             IF PGT$ -> MM$DESC.TYP(0) = 0 AND PGT$ -> MM$DESC.BASE(0) > START
      906     6948    3                  AND PGT$ -> MM$DESC.BASE(0) >= DATALO
      907     6949    3                  AND PGT$ -> MM$DESC.BASE(0) < DATAHI
      908     6950    3             THEN
      909     6951    3                  PGT$ -> MM$DESC(0) = '0'B;
      910     6952
      911     6953    3             PGT$ = PINCRW (PGT$, SIZEW (MM$DESC(0)));
      912     6954    3           END;
      913     6955    2   END SPOIL_DR;
      914     6956        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:32   
      915     6957
      916     6958        /*F*    NAME:   MMH$SMPRT
      917     6959                PURPOSE: To set memory protection on an entire data segment. */
      918     6960    1   MMH$SMPRT: ENTRY(EWSQ,SEGID,REQSIZE,ERR,DSACCESS) ALTRET;
      919     6961                                                /* NOTE:  REQSIZE is unused.          */
      920     6962    1        SEGX = MOD(SEGID,1024);
      921     6963    1        IF (SEGX <= %HIFIXEDSID) OR (SEGX > %MAXDATASID)
      922     6964    2        THEN DO;
      923     6965    2             ERR = %E$BADSEGID;            /* Bad segid passed to us             */
      924     6966    2   ERR_OUT:
      925     6967    2             ALTRETURN;
      926     6968    2           END;
      927     6969    1        IF (DSACCESS < BITBIN(%MM_DSREAD#)) OR
      928     6970    1             (DSACCESS > BITBIN(%MM_DSWRITE#))
      929     6971    2        THEN DO;
      930     6972    2             ERR = %E$DSPROTBAD;
      931     6973    2             ALTRETURN;
      932     6974    2           END;
      933     6975             %FINDLS (WSQ = EWSQ , P$ = ELS$);
      934     6978    1        ELS$ -> MM$DESC.FLGS (SEGX) = (ELS$ -> MM$DESC.FLGS (SEGX) & ~%MM_DSWRITE#) |
              6978                 BINBIT(DSACCESS,9);
      935     6979    1        RETURN;
      936     6980
      937     6981    1   END MMH$SHARE_DS;

PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:33   
--  Include file information  --

   ES_CNTRL_R.:E05TOU  cannot be made into a system file and is referenced.
   UD_EQU_E.:E05TOU  is referenced.
   S_WSPTD_R.:E05TOU  cannot be made into a system file and is referenced.
   HF_LOCK_C.:E05TOU  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   B$USER.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   M$JIT_C.:E05TOU  cannot be made into a system file and is referenced.
   B$MAP.:E05TOU  cannot be made into a system file and is referenced.
   M_ERRORS_C.:E05TOU  is referenced.
   HF_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   MM_MACRO_M.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   MM$SYSGEN.:E05TOU  is referenced.
   M_INFO_C.:E05TOU  is referenced.
   MM_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$SS.:E05TOU  cannot be made into a system file and is referenced.
   B_MLSMAC_C.:E05TOU  is referenced.
   B_ULSMAC_C.:E05TOU  is referenced.
   B_LSDATA_C.:E05TOU  cannot be made into a system file and is referenced.
   B_MAGIC_C.:E05TOU  is referenced.
      No diagnostics issued in procedure MMH$SHARE_DS.

   Procedure MMH$SHARE_DS requires 1426 words for executable code.
   Procedure MMH$SHARE_DS requires 54 words of local(AUTO) storage.

    No errors detected in file MMH$DMEM.:E05TSI    .

PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:34   

 Object Unit name= MMH$SHARE_DS                               File name= MMH$DMEM.:E05TOU
 UTS= JUL 30 '97 03:21:14.28 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      3      3  MMH$SHARE_DS
    1   Proc  even  none  1426   2622  MMH$SHARE_DS
    2  RoData even  none    17     21  MMH$SHARE_DS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        8  MMH$SHARE_DS
     1      6          yes     yes      Std        8  MMH$MAP_DS
     1     16          yes     yes      Std        8  MMH$INIT_DS
     1     25          yes     yes      Std        5  MMH$GDS
     1   1536          yes     yes      Std        4  MMH$FDS
     1   2546          yes     yes      Std        5  MMH$SMPRT
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:35   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       0 MMK$BIGPT
         yes           Std       3 HFC$ASSOCCLR
         yes           Std       1 HFC$UNLOCK
         yes           Std       0 MMA$UNLOCKBP
         yes           Std       3 JSN$BLNK1
 yes     yes           Std       4 MME$CVM
 yes     yes           Std       5 MMG$SGVP
         yes           Std       0 MMA$LOCKBP
 yes     yes           Std       5 MMG$SFVP_NOW
 yes     yes           Std       5 MMG$SFVP
         yes           Std       0 SSS$BLOCKM
         yes           Std       0 UDN$MAGIC
         yes           Std       1 HFC$LOCK
         yes           Std       1 MMA$GETPSR
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:36   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     SC_MM43                               SC_MM44                               SC_MM23
     SC_MM22                               SC_MM24                               MM_LOCK
r    MM_BYP$                               MM_RDS                                MM_DSMAX
     MM_HELD                               MM_FPMC                          r    MM_PTPTRS$
r    MM_LSPTRS$                            HW_WSQ0PT                             B_MPT
     B$MISC$                               B$LS$                                 S_NSCPU
r    B$MPT$                           r    B$MASTPT$                        r    B$PPUT$
r    B$WINDOW$                        r    B$JIT$                           r    B$WSQ0PT$
r    B$IPHYMAP$                            S$CU$                                 ES_CLEARMEM
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ASLENTSID                             ISSID
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:37   


        1        1        /*M* ROUTINES FOR MANAGING THE DYNAMIC DATA SEGMENTS.              */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
        8        8        MMH$SHARE_DS: PROC(EWSQ,SEGID,REQSIZE,ERR,DSACCESS,HEAD,TAIL,COUNT) ALTRET;

      8  1 000000   000000 700200 xent  MMH$SHARE_DS TSX0  ! X66_AUTO_N
         1 000001   000066 000010                    ZERO    54,8

        9        9
       10       10        %INCLUDE B_MAGIC_C;
       11      128        %INCLUDE B_LSDATA_C;
       12     3334        %INCLUDE B$SS;
       13     3513        %INCLUDE MM_DATA_R;
       14     4033        %INCLUDE HF_DATA_R;
       15     4076
       16     4077    1   DCL EWSQ UBIN;                     /* Effective wsq - wsq making this request */
       17     4078    1   DCL SEGID UBIN;                         /* Segid of data segment descriptor   */
       18     4079    1   DCL REQSIZE UBIN;                  /* # of words to get or free in segment    */
       19     4080    1   DCL 1 F_WSIZE REDEF REQSIZE,
       20     4081    1            2 FREEFLG BIT(1) UNAL,
       21     4082    1            2 VIRTONLY BIT(1) UNAL,
       22     4083    1            2 * UBIN(15) UNAL,
       23     4084    1            2 WORDS# UBIN(19) UNAL;
       24     4085    1   DCL 1 B_WSIZE REDEF REQSIZE,
       25     4086    1            2 * UBIN(35) UNAL,
       26     4087    1            2 ODD_BIT BIT(1) UNAL;
       27     4088    1   DCL ERR UBIN;                      /* Error code to be returned on altreturn  */
       28     4089    1   DCL DSACCESS UBIN;
       29     4090    1   DCL HEAD UBIN;
       30     4091    1   DCL TAIL UBIN;
       31     4092    1   DCL COUNT UBIN;
       32     4093
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:38   
       33     4094
       34     4095    1   DCL HFC$ASSOCCLR ENTRY(3);              /* Routine to clear associative mem   */
       35     4096    1   DCL MME$CVM ENTRY(4) ALTRET;
       36     4097    1   DCL MMG$SGVP ENTRY(5) ALTRET;           /* Routine to get seg-relative V.P.   */
       37     4098    1   DCL MMG$SFVP ENTRY(5) ALTRET;           /* Routine to free seg-relative V.P.  */
       38     4099    1   DCL MMG$SFVP_NOW ENTRY(5) ALTRET;
              4099            /* Routine to free seg-relative V.P. unconditionally  */
       39     4100    1   DCL MMK$BIGPT ENTRY ALTRET;             /* Expand user PT to 2 pages */
       40     4101    1   DCL SSS$BLOCKM ENTRY;
       41     4102    1   DCL MMA$LOCKBP ENTRY;
       42     4103    1   DCL MMA$UNLOCKBP ENTRY;
       43     4104    1   DCL MMA$GETPSR ENTRY(1);
       44     4105    1   DCL JSN$BLNK1 ENTRY(3);
       45     4106    1   DCL UDN$MAGIC ENTRY;
       46     4107
       47     4108    1   DCL SC_MM24 ENTRY CONV(2,0);
       48     4109    1   DCL SC_MM23 ENTRY CONV(2,0);
       49     4110    1   DCL SC_MM22 ENTRY CONV(2,0);
       50     4111    1   DCL SC_MM43 ENTRY CONV(2,0);
       51     4112    1   DCL SC_MM44 ENTRY CONV(2,0);
       52     4113
       53     4114        /* Internal DATA... */
       54     4115    1   DCL WSIZE UBIN;
       55     4116    1   DCL BSEGX BIT(12);
       56     4117    1   DCL SEGX UBIN;
       57     4118    1   DCL HEADPG UBIN;
       58     4119    1   DCL SHARE_DS BIT(1);
       59     4120    1   DCL ACCESS BIT(36);
       60     4121    1   DCL VPLOW UBIN;
       61     4122    1   DCL DRBASE SBIN;
       62     4123    1   DCL DRBOUND SBIN;
       63     4124    1   DCL NEWTOP SBIN;
       64     4125    1   DCL CURTOP UBIN;
       65     4126    1   DCL ASIZE UBIN;
       66     4127    1   DCL ASIZEP SBIN;                   /* # pgs to move relocated seg's bases     */
       67     4128    1   DCL GAPPGS SBIN;
       68     4129    1   DCL BSIZE SBIN;                         /* # of bytes to actually grow seg.   */
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:39   
       69     4130    1   DCL DATAHI SBIN;
       70     4131    1   DCL DATALO UBIN;
       71     4132    1   DCL TRUNCFLG BIT(1) ALIGNED;
       72     4133    1   DCL FREEFLG BIT(1) ALIGNED;
       73     4134    1   DCL VIRTONLY BIT(1) ALIGNED;
       74     4135    1   DCL I SBIN;
       75     4136    1   DCL J SBIN;
       76     4137    1   DCL ELS$ PTR;                           /* Ptr to effective linkage segment   */
       77     4138    1   DCL MAP$ PTR;
       78     4139    1   DCL TEMP1 SBIN;
       79     4140    1   DCL TEMP2 SBIN;
       80     4141    1   DCL TEMP3 SBIN;
       81     4142    1   DCL TEMP4 SBIN;
       82     4143    1   DCL TEMPB BIT(12);
       83     4144    1   DCL PGT$ PTR;
       84     4145    1   DCL PGTX REDEF PGT$ UBIN;
       85     4146    1   DCL START UBIN;
       86     4147    1   DCL END_SEG UBIN;
       87     4148    1   DCL 1 PS_DESC(0:0) BASED(B$MISC$) DALIGNED,
       88     4149    1            2 BOUND UBIN(20) UNAL,
       89     4150    1            2 FLGS BIT(9) UNAL,
       90     4151    1            2 WSR UBIN(3) UNAL,
       91     4152    1            2 TYP UBIN(4) UNAL,
       92     4153    1            2 BASE UBIN UNAL;
       93     4154    1   DCL 1 DESCINIT CONSTANT,
       94     4155    1            2 BOUND UBIN(20) INIT (0) UNAL,
       95     4156    1            2 FLGS BIT(9) INIT ('743'O) UNAL,
       96     4157    1            2 WSR UBIN(3) INIT (%USERWSR) UNAL,
       97     4158    1            2 TYP UBIN(4) INIT(0) UNAL,
       98     4159    1            2 BASE UBIN INIT(AS_BASE%);
       99     4160    1   DCL 1 PSR_DESC DALIGNED,
      100     4161    1            2 BOUND UBIN(20) UNAL,
      101     4162    1            2 FLGS BIT(9) UNAL,
      102     4163    1            2 WSR BIT(3) UNAL,
      103     4164    1            2 TYP UBIN(4) UNAL,
      104     4165    1            2 BASE UBIN UNAL;
      105     4166
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:40   
      106     4167        %B_MPT (FPTN=B_MPT,STCLASS=SYMREF);
      107     4260    1   DCL B$MISC$ PTR SYMREF;
      108     4261    1   DCL B$LS$ PTR SYMREF;
      109     4262    1   DCL S_NSCPU UBIN SYMREF;
      110     4263    1   DCL B$MPT$ PTR SYMREF READONLY;
      111     4264    1   DCL B$MASTPT$ PTR SYMREF READONLY;
      112     4265    1   DCL B$PPUT$ PTR SYMREF READONLY;
      113     4266    1   DCL B$WINDOW$ PTR SYMREF READONLY;
      114     4267    1   DCL B$JIT$ PTR SYMREF READONLY;
      115     4268    1   DCL B$WSQ0PT$ PTR SYMREF READONLY;
      116     4269    1   DCL B$IPHYMAP$ PTR SYMREF READONLY;
      117     4270
      118     4271        %INCLUDE M_ERRORS_C;
      119     4335        %INCLUDE B$MAP;                         /* Definition of page table           */
      120     4434        %INCLUDE M$JIT_C;
      121     4954        %INCLUDE B$USER;
      122     5170        %B$USERREFS;
      123     5174        %INCLUDE B_SEGIDS_C;
      124     5713        %INCLUDE HF_LOCK_C;
      125     5727        %INCLUDE S_WSPTD_R;
      126     5743        %INCLUDE UD_EQU_E;
      127     6132        %INCLUDE ES_CNTRL_R;
      128     6144
      129     6145        %SUB MM$PPUT = B$PPUT$->MM$PPUT;
      130     6146
      131     6147        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:41   
      132     6148        /*F*    NAME:   MMH$SHARE_DS
      133     6149                PURPOSE: To allocate a data segment which is to have a shared
      134     6150                        data segment file read into it.
      135     6151                DESCRIPTION: The data segment is allocated in tha same way as
      136     6152                        for a standard call to MMH$GDS, but the pages ac-
      137     6153                        quired are not put on the user's page chain. He is
      138     6154                        still billed for using them, but the head, tail, and
      139     6155                        count are returned to the caller.
      140     6156        */
      141     6157
      142     6158    1        SHARE_DS = %TRUE;

   6158  1 000002   400000 236003                    LDQ     -131072,DU
         1 000003   200017 756100                    STQ     SHARE_DS,,AUTO

      143     6159    1        HEADPG = 0;

   6159  1 000004   200016 450100                    STZ     HEADPG,,AUTO

      144     6160    1        GOTO GDS;

   6160  1 000005   000031 710000 1                  TRA     GDS

      145     6161
      146     6162
      147     6163        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:42   
      148     6164        /*F*    NAME:   MMH$MAP_DS
      149     6165                PURPOSE: To map a user's data segment onto a given page chain,
      150     6166                        for implementing shared data segment files.
      151     6167                DESCRIPTION: Only the virtual space is acquired for the data
      152     6168                        segment in question.  The virtual pages are then
      153     6169                        mapped onto the physical page chain whose head, tail,
      154     6170                        and count are passed by the caller.  Protection on the
      155     6171                        data segment is set to the value passed in "DSACCES",
      156     6172                        which is assumed to be a 36-bit BITBIN(octal descriptor
      157     6173                        protection bits).  This entry may be used to enlarge
      158     6174                        an existing mapped data segment, but the page chain
      159     6175                        passed must be the page chain to be mapped into the
      160     6176                        ENTIRE segment, not just that for the added portion
      161     6177                        of the data segment.                               */
      162     6178    1   MMH$MAP_DS: ENTRY(EWSQ,SEGID,REQSIZE,ERR,DSACCESS,HEAD,TAIL,COUNT) ALTRET;

   6178  1 000006   000000 700200 xent  MMH$MAP_DS   TSX0  ! X66_AUTO_N
         1 000007   000066 000010                    ZERO    54,8

      163     6179    1        SHARE_DS = %TRUE;

   6179  1 000010   400000 236003                    LDQ     -131072,DU
         1 000011   200017 756100                    STQ     SHARE_DS,,AUTO

      164     6180    1        HEADPG = HEAD;                     /* Flag to do segment mapping         */

   6180  1 000012   200010 470500                    LDP0    @HEAD,,AUTO
         1 000013   000000 235100                    LDA     0,,PR0
         1 000014   200016 755100                    STA     HEADPG,,AUTO

      165     6181    1        GOTO GDS;

   6181  1 000015   000031 710000 1                  TRA     GDS

      166     6182
      167     6183
      168     6184        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:43   
      169     6185        /*F*    NAME:   MMH$INIT_DS
      170     6186                PURPOSE: To allocate and initialize a user's data segment
      171     6187                        from a given physical page chain, for effecting
      172     6188                        initialized data segments for special shared
      173     6189                        processors. This entry may also be used to enlarge a
      174     6190                        previously initialized data segment, but the page chain
      175     6191                        passed must be that corresponding to the entire data
      176     6192                        segment, not just the added portion.                */
      177     6193    1   MMH$INIT_DS: ENTRY(EWSQ,SEGID,REQSIZE,ERR,DSACCESS,HEAD,TAIL,COUNT) ALTRET;

   6193  1 000016   000000 700200 xent  MMH$INIT_DS  TSX0  ! X66_AUTO_N
         1 000017   000066 000010                    ZERO    54,8

      178     6194    1        SHARE_DS = %FALSE;

   6194  1 000020   200017 450100                    STZ     SHARE_DS,,AUTO

      179     6195    1        HEADPG = HEAD;

   6195  1 000021   200010 470500                    LDP0    @HEAD,,AUTO
         1 000022   000000 235100                    LDA     0,,PR0
         1 000023   200016 755100                    STA     HEADPG,,AUTO

      180     6196    1        GOTO GDS;

   6196  1 000024   000031 710000 1                  TRA     GDS

      181     6197
      182     6198
      183     6199        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:44   
      184     6200        /*F*   NAME:   MMH$GDS                                             */
      185     6201        /*F*   PURPOSE: To acquire space in a dynamic data segment.        */
      186     6202    1   MMH$GDS:ENTRY(EWSQ,SEGID,REQSIZE,ERR,DSACCESS) ALTRET;

   6202  1 000025   000000 700200 xent  MMH$GDS      TSX0  ! X66_AUTO_N
         1 000026   000066 000010                    ZERO    54,8

      187     6203
      188     6204    1        SHARE_DS = %FALSE;

   6204  1 000027   200017 450100                    STZ     SHARE_DS,,AUTO

      189     6205    1        HEADPG = 0;

   6205  1 000030   200016 450100                    STZ     HEADPG,,AUTO

   6205  1 000031                       GDS          null
      190     6206        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:45   
      191     6207        /* If the top bit of wsize is set, then if we can't get the req-   */
      192     6208        /* Uested space due to user or installation page limit, don't get  */
      193     6209        /* Anything at all.                                                */
      194     6210    1   GDS: ;
      195     6211    1        CALL SETUP ALTRET (ERR_OUT);

   6211  1 000031   002217 701000 1                  TSX1    SETUP
         1 000032   002563 702000 1                  TSX2    ERR_OUT

      196     6212
      197     6213    1        IF ADDR(DSACCESS) = ADDR(NIL)

   6213  1 000033   200007 236100                    LDQ     @DSACCESS,,AUTO
         1 000034   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000035   000041 601000 1                  TNZ     s:6217

      198     6214    1        THEN
      199     6215    1             ACCESS = %MM_DSWRITE#;        /* Default access                     */

   6215  1 000036   600000 236003                    LDQ     -65536,DU
         1 000037   200020 756100                    STQ     ACCESS,,AUTO
         1 000040   000045 710000 1                  TRA     s:6218

      200     6216    1        ELSE
      201     6217    1             ACCESS = BINBIT (DSACCESS , 9);

   6217  1 000041   200007 470500                    LDP0    @DSACCESS,,AUTO
         1 000042   000000 236100                    LDQ     0,,PR0
         1 000043   000033 736000                    QLS     27
         1 000044   200020 756100                    STQ     ACCESS,,AUTO

      202     6218    1        IF VIRTONLY

   6218  1 000045   200036 234100                    SZN     VIRTONLY,,AUTO
         1 000046   000051 605000 1                  TPL     s:6224

      203     6219    1        THEN
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:46   
      204     6220    1             ACCESS = ACCESS | %DSEXEC;

   6220  1 000047   010000 276003                    ORQ     4096,DU
         1 000050   200020 756100                    STQ     ACCESS,,AUTO

      205     6221
      206     6222        /* Allow callers of MMH$MAP_DS to specify total # pgs, rather than
      207     6223           the incremental number when enlarging a mapped data seg.        */
      208     6224    1        IF (SHARE_DS) AND (HEADPG ~= 0) AND (DRBOUND ~= 0)

   6224  1 000051   200017 234100                    SZN     SHARE_DS,,AUTO
         1 000052   000063 605000 1                  TPL     s:6229
         1 000053   200016 235100                    LDA     HEADPG,,AUTO
         1 000054   000063 600000 1                  TZE     s:6229
         1 000055   200023 235100                    LDA     DRBOUND,,AUTO
         1 000056   000063 600000 1                  TZE     s:6229

      209     6225    1        THEN
      210     6226    1             BSIZE = BSIZE - DRBOUND - 1;

   6226  1 000057   200031 236100                    LDQ     BSIZE,,AUTO
         1 000060   200023 136100                    SBLQ    DRBOUND,,AUTO
         1 000061   000001 136007                    SBLQ    1,DL
         1 000062   200031 756100                    STQ     BSIZE,,AUTO

      211     6227
      212     6228        /* Check for exceeding maximun descriptor bound of 256k.           */
      213     6229    1        IF (DRBOUND + BSIZE - 1) > %MAX_BOUND

   6229  1 000063   200023 236100                    LDQ     DRBOUND,,AUTO
         1 000064   200031 036100                    ADLQ    BSIZE,,AUTO
         1 000065   000004 116003                    CMPQ    4,DU
         1 000066   000110 604400 1                  TMOZ    AGAIN

      214     6230    2        THEN DO;

      215     6231    2             TRUNCFLG = %TRUE;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:47   

   6231  1 000067   400000 236003                    LDQ     -131072,DU
         1 000070   200034 756100                    STQ     TRUNCFLG,,AUTO

      216     6232    2             ERR = %E$SEGFULL;

   6232  1 000071   001166 235007                    LDA     630,DL
         1 000072   200006 470500                    LDP0    @ERR,,AUTO
         1 000073   000000 755100                    STA     0,,PR0

      217     6233        /*E*    ERROR:  MMH-E$SEGFULL-0
      218     6234                MESSAGE: You attempted to enlarge a data segment past 256k.
      219     6235                MESSAGE1: You have attempted to exceed the maximum size a
      220     6236                        segment descriptor is capable of framing: 256k words. */
      221     6237    2             IF FREEFLG

   6237  1 000074   200035 234100                    SZN     FREEFLG,,AUTO
         1 000075   000077 605000 1                  TPL     s:6240

      222     6238    2             THEN
      223     6239    2                  ALTRETURN;

   6239  1 000076   000000 702200 xent               TSX2  ! X66_AALT

      224     6240    2             IF DRBOUND = 0

   6240  1 000077   200023 235100                    LDA     DRBOUND,,AUTO
         1 000100   000104 601000 1                  TNZ     s:6244

      225     6241    2             THEN
      226     6242    2                  TEMP1 = -1;

   6242  1 000101   000001 335007                    LCA     1,DL
         1 000102   200043 755100                    STA     TEMP1,,AUTO
         1 000103   000105 710000 1                  TRA     s:6245

      227     6243    2             ELSE
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:48   
      228     6244    2                  TEMP1 = DRBOUND;

   6244  1 000104   200043 755100                    STA     TEMP1,,AUTO

      229     6245    2             BSIZE = %MAX_BOUND - TEMP1;

   6245  1 000105   000027 675000 xsym               ERA     B_VECTNIL+23
         1 000106   000004 035003                    ADLA    4,DU
         1 000107   200031 755100                    STA     BSIZE,,AUTO

      230     6246    2           END;

   6229  1 000110                       AGAIN        null
      231     6247
      232     6248    1   AGAIN: ;
      233     6249    1        NEWTOP = DRBASE+DRBOUND+BSIZE;     /* New seg top - hopefully            */

   6249  1 000110   200022 236100                    LDQ     DRBASE,,AUTO
         1 000111   200023 036100                    ADLQ    DRBOUND,,AUTO
         1 000112   200031 036100                    ADLQ    BSIZE,,AUTO
         1 000113   200024 756100                    STQ     NEWTOP,,AUTO

      234     6250
      235     6251        /* If this is a currently empty seg, adjust the "NEWTOP" value
      236     6252           accordingly.  If not, make sure the share mode is staying the same */
      237     6253    1        IF DRBOUND = 0

   6253  1 000114   200023 235100                    LDA     DRBOUND,,AUTO
         1 000115   000130 601000 1                  TNZ     s:6267

      238     6254    2        THEN DO;

      239     6255        /* If the segment is being created, then check access specified. */
      240     6256    2             IF NOT ACCESS & %MM_DSREAD#

   6256  1 000116   200020 236100                    LDQ     ACCESS,,AUTO
         1 000117   400000 376003                    ANQ     -131072,DU
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:49   
         1 000120   000125 601000 1                  TNZ     s:6264

      241     6257    3             THEN DO;

      242     6258        /*E*    ERROR:  MMH-E$DSPROTBAD-0
      243     6259                MESSAGE: Illegal value specified for data segment descriptor protection.
      244     6260        */
      245     6261    3                  ERR = %E$DSPROTBAD;

   6261  1 000121   001177 236007                    LDQ     639,DL
         1 000122   200006 470500                    LDP0    @ERR,,AUTO
         1 000123   000000 756100                    STQ     0,,PR0

      246     6262    3                  ALTRETURN;

   6262  1 000124   000000 702200 xent               TSX2  ! X66_AALT

      247     6263    3                END;
      248     6264    2             NEWTOP = NEWTOP - 1;

   6264  1 000125   000001 336007                    LCQ     1,DL
         1 000126   200024 056100                    ASQ     NEWTOP,,AUTO

      249     6265    2           END;

   6265  1 000127   000222 710000 1                  TRA     s:6297

      250     6266    2        ELSE DO;

      251     6267    2             TEMPB = ELS$ -> MM$DESC.FLGS(SEGX);

   6267  1 000130   200015 235100                    LDA     SEGX,,AUTO
         1 000131   000001 735000                    ALS     1
         1 000132   200041 470500                    LDP0    ELS$,,AUTO
         1 000133   000000 236105                    LDQ     0,AL,PR0
         1 000134   000024 736000                    QLS     20
         1 000135   777000 376003                    ANQ     -512,DU
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:50   
         1 000136   200047 756100                    STQ     TEMPB,,AUTO

      252     6268    2             IF (TEMPB & %DSSHARED AND NOT SHARE_DS)

   6268  1 000137   200047 236100                    LDQ     TEMPB,,AUTO
         1 000140   777700 376003                    ANQ     -64,DU
         1 000141   020000 376003                    ANQ     8192,DU
         1 000142   000145 600000 1                  TZE     s:6268+6
         1 000143   200017 234100                    SZN     SHARE_DS,,AUTO
         1 000144   000153 605000 1                  TPL     s:6274
         1 000145   200047 236100                    LDQ     TEMPB,,AUTO
         1 000146   777700 376003                    ANQ     -64,DU
         1 000147   020000 376003                    ANQ     8192,DU
         1 000150   000157 601000 1                  TNZ     s:6277
         1 000151   200017 234100                    SZN     SHARE_DS,,AUTO
         1 000152   000157 605000 1                  TPL     s:6277

      253     6269    2                  OR (NOT (TEMPB & %DSSHARED) AND SHARE_DS)
      254     6270    3             THEN DO;

      255     6271        /*E*    ERROR:  MMH-E$DSMODEBAD-0
      256     6272                MESSAGE: Attempt to change the share mode of an allocated data segment.
      257     6273        */
      258     6274    3                  ERR = %E$DSMODEBAD;

   6274  1 000153   001201 236007                    LDQ     641,DL
         1 000154   200006 471500                    LDP1    @ERR,,AUTO
         1 000155   100000 756100                    STQ     0,,PR1

      259     6275    3                  ALTRETURN;

   6275  1 000156   000000 702200 xent               TSX2  ! X66_AALT

      260     6276    3                END;
      261     6277    2             IF SHARE_DS AND DRBOUND ~= 0

   6277  1 000157   200017 234100                    SZN     SHARE_DS,,AUTO
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:51   
         1 000160   000222 605000 1                  TPL     s:6297
         1 000161   200023 236100                    LDQ     DRBOUND,,AUTO
         1 000162   000222 600000 1                  TZE     s:6297

      262     6278    3             THEN DO;

      263     6279                       %FINDMAP (WSQ = EWSQ , P$ = MAP$);

   6280  1 000163   200003 471500                    LDP1    @EWSQ,,AUTO
         1 000164   100000 720100                    LXL0    0,,PR1
         1 000165   000000 236010 xsym               LDQ     MM_PTPTRS$,X0
         1 000166   200042 756100                    STQ     MAP$,,AUTO

      264     6282    3                  VPLOW = DRBASE/4096;

   6282  1 000167   200022 236100                    LDQ     DRBASE,,AUTO
         1 000170   010000 506007                    DIV     4096,DL
         1 000171   200021 756100                    STQ     VPLOW,,AUTO

      265     6283    3                  IF HW_WSQ0PT THEN

   6283  1 000172   000000 234000 xsym               SZN     HW_WSQ0PT
         1 000173   000205 605000 1                  TPL     s:6286

      266     6284    3                       TEMP1=B$IPHYMAP$->MM$IPHY_MAP(MAP$->B$MAP.RPN(VPLOW));

   6284  1 000174   200042 473500                    LDP3    MAP$,,AUTO
         1 000175   300000 236106                    LDQ     0,QL,PR3
         1 000176   000022 772000                    QRL     18
         1 000177   000001 736000                    QLS     1
         1 000200   000000 474400 xsym               LDP4    B$IPHYMAP$
         1 000201   000100 101506                    MRL     fill='000'O
         1 000202   400000 000002                    ADSC9   0,Q,PR4                  cn=0,n=2
         1 000203   200043 000004                    ADSC9   TEMP1,,AUTO              cn=0,n=4
         1 000204   000211 710000 1                  TRA     s:6287

      267     6285    3                  ELSE
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:52   
      268     6286    3                       TEMP1=MAP$->B$MAP.RPN(VPLOW);

   6286  1 000205   200042 473500                    LDP3    MAP$,,AUTO
         1 000206   300000 236106                    LDQ     0,QL,PR3
         1 000207   000022 772000                    QRL     18
         1 000210   200043 756100                    STQ     TEMP1,,AUTO

      269     6287    3                  IF TEMP1 ~= HEAD THEN

   6287  1 000211   200010 474500                    LDP4    @HEAD,,AUTO
         1 000212   200043 236100                    LDQ     TEMP1,,AUTO
         1 000213   000216 604000 1                  TMI     s:6291
         1 000214   400000 116100                    CMPQ    0,,PR4
         1 000215   000222 600000 1                  TZE     s:6297

      270     6288    4                  DO;

      271     6289        /*E*    ERROR: MMH-E$DBLDSMAP
      272     6290                MESSAGE: Attempt to map more than one file per data segment. */
      273     6291    4                       ERR = %E$DBLDSMAP;

   6291  1 000216   001204 235007                    LDA     644,DL
         1 000217   200006 475500                    LDP5    @ERR,,AUTO
         1 000220   500000 755100                    STA     0,,PR5

      274     6292    4                       ALTRETURN;

   6292  1 000221   000000 702200 xent               TSX2  ! X66_AALT

      275     6293    4                     END;
      276     6294    3                END;
      277     6295    2           END;
      278     6296
      279     6297    1        ASIZEP = NEWTOP/4096 - ((DRBASE+DRBOUND)/4096);

   6297  1 000222   200024 236100                    LDQ     NEWTOP,,AUTO
         1 000223   010000 506007                    DIV     4096,DL
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:53   
         1 000224   200060 756100                    STQ     PSR_DESC+4,,AUTO
         1 000225   200022 236100                    LDQ     DRBASE,,AUTO
         1 000226   200023 036100                    ADLQ    DRBOUND,,AUTO
         1 000227   010000 506007                    DIV     4096,DL
         1 000230   200061 756100                    STQ     PSR_DESC+5,,AUTO
         1 000231   200060 236100                    LDQ     PSR_DESC+4,,AUTO
         1 000232   200061 136100                    SBLQ    PSR_DESC+5,,AUTO
         1 000233   200027 756100                    STQ     ASIZEP,,AUTO

      280     6298        /* Special case when seg is initially empty and is on a page boundary */
      281     6299        /* Then we must get the starting page too.                            */
      282     6300    1        IF (DRBOUND = 0) AND (MOD(DRBASE,4096) = 0)

   6300  1 000234   200023 235100                    LDA     DRBOUND,,AUTO
         1 000235   000244 601000 1                  TNZ     s:6303
         1 000236   200022 236100                    LDQ     DRBASE,,AUTO
         1 000237   010000 506007                    DIV     4096,DL
         1 000240   000044 733000                    LRS     36
         1 000241   000000 116003                    CMPQ    0,DU
         1 000242   000244 601000 1                  TNZ     s:6303

      283     6301    1        THEN
      284     6302    1             ASIZEP = ASIZEP + 1;

   6302  1 000243   200027 054100                    AOS     ASIZEP,,AUTO

      285     6303    1        IF (EWSQ = %MONWSQ)

   6303  1 000244   200003 470500                    LDP0    @EWSQ,,AUTO
         1 000245   000000 235100                    LDA     0,,PR0
         1 000246   000001 115007                    CMPA    1,DL
         1 000247   000303 601000 1                  TNZ     s:6323

      286     6304    2        THEN DO;

      287     6305    2             TEMP1 = MM_DSMAX (SEGX - %LODATASID);

PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:54   
   6305  1 000250   200015 236100                    LDQ     SEGX,,AUTO
         1 000251   000100 101406                    MRL     fill='000'O
         1 000252   777777 000001 xsym               ADSC9   MM_DSMAX-1,Q             cn=0,n=1
         1 000253   200043 000004                    ADSC9   TEMP1,,AUTO              cn=0,n=4

      288     6306    2             IF (ASIZEP + ((DRBOUND + 4095)/4096) > TEMP1)

   6306  1 000254   200023 236100                    LDQ     DRBOUND,,AUTO
         1 000255   007777 036007                    ADLQ    4095,DL
         1 000256   010000 506007                    DIV     4096,DL
         1 000257   200027 036100                    ADLQ    ASIZEP,,AUTO
         1 000260   200043 116100                    CMPQ    TEMP1,,AUTO
         1 000261   000303 604400 1                  TMOZ    s:6323

      289     6307    3             THEN DO;

      290     6308        /*E*   ERROR:  MMH-E$MONDSFULL-0
      291     6309               MESSAGE: Monitor data segment has grown to its maximum size.  */
      292     6310    3                  ERR = %E$MONDSFULL;

   6310  1 000262   001162 235007                    LDA     626,DL
         1 000263   200006 471500                    LDP1    @ERR,,AUTO
         1 000264   100000 755100                    STA     0,,PR1

      293     6311    3                  TRUNCFLG = %TRUE;

   6311  1 000265   400000 236003                    LDQ     -131072,DU
         1 000266   200034 756100                    STQ     TRUNCFLG,,AUTO

      294     6312    3                  BSIZE = TEMP1 * 4096 - (DRBOUND + 1);

   6312  1 000267   200043 336100                    LCQ     TEMP1,,AUTO
         1 000270   000014 736000                    QLS     12
         1 000271   200023 036100                    ADLQ    DRBOUND,,AUTO
         1 000272   000027 676000 xsym               ERQ     B_VECTNIL+23
         1 000273   200031 756100                    STQ     BSIZE,,AUTO

PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:55   
      295     6313    3                  IF DRBOUND = 0

   6313  1 000274   200023 235100                    LDA     DRBOUND,,AUTO
         1 000275   000277 601000 1                  TNZ     s:6316

      296     6314    3                  THEN
      297     6315    3                       BSIZE = BSIZE + 1;

   6315  1 000276   200031 054100                    AOS     BSIZE,,AUTO

      298     6316    3                  IF BSIZE <= 0

   6316  1 000277   200031 236100                    LDQ     BSIZE,,AUTO
         1 000300   000302 605400 1                  TPNZ    s:6319

      299     6317    3                  THEN
      300     6318    3                       ALTRETURN;

   6318  1 000301   000000 702200 xent               TSX2  ! X66_AALT

      301     6319    3                  GOTO AGAIN;

   6319  1 000302   000110 710000 1                  TRA     AGAIN

      302     6320    3                END;
      303     6321    2           END;
      304     6322
      305     6323    1        ASIZE = ASIZEP * 4096;

   6323  1 000303   200027 235100                    LDA     ASIZEP,,AUTO
         1 000304   000014 735000                    ALS     12
         1 000305   200026 755100                    STA     ASIZE,,AUTO

      306     6324             %GETDBASE (DBASE = TEMP1 , LS$ = ELS$ , SEGID = %DS8SID);

   6325  1 000306   200041 471500                    LDP1    ELS$,,AUTO
         1 000307   100027 235100                    LDA     23,,PR1
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:56   
         1 000310   200043 755100                    STA     TEMP1,,AUTO

      307     6327             %GETDBOUND (DBOUND = CURTOP , LS$ = ELS$ , SEGID = %DS8SID);

   6328  1 000311   100026 236100                    LDQ     22,,PR1
         1 000312   000020 772000                    QRL     16
         1 000313   200025 756100                    STQ     CURTOP,,AUTO

      308     6330    1        CURTOP = CURTOP + TEMP1;           /* Top of high data seg               */

   6330  1 000314   200043 036100                    ADLQ    TEMP1,,AUTO
         1 000315   200025 756100                    STQ     CURTOP,,AUTO

      309     6331
      310     6332        /* Now, compute the wsize of the gap between the end of the current */
      311     6333        /* Segment and the start of the next in pages. This value will nor-*/
      312     6334        /* Mally be zero, except in the case where a user hit his page     */
      313     6335        /* Limit while growing a segment previously, and has now made more */
      314     6336        /* memory avilable by releasing pages elsewhere...                 */
      315     6337        /* Or else if this is a monitor data segment (fixed bases)         */
      316     6338    1        TEMP1 = (DRBASE + DRBOUND - 1)/4096; /* '-1' in case seg is null      */

   6338  1 000316   200022 236100                    LDQ     DRBASE,,AUTO
         1 000317   200023 036100                    ADLQ    DRBOUND,,AUTO
         1 000320   000001 136007                    SBLQ    1,DL
         1 000321   010000 506007                    DIV     4096,DL
         1 000322   200043 756100                    STQ     TEMP1,,AUTO

      317     6339    1        IF BSEGX = %DS8SID

   6339  1 000323   200014 236100                    LDQ     BSEGX,,AUTO
         1 000324   777700 376003                    ANQ     -64,DU
         1 000325   601300 116003                    CMPQ    -64832,DU
         1 000326   000333 601000 1                  TNZ     s:6343

      318     6340    1        THEN
      319     6341    1             TEMP2 = DATAHI/4096;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:57   

   6341  1 000327   200032 236100                    LDQ     DATAHI,,AUTO
         1 000330   010000 506007                    DIV     4096,DL
         1 000331   200044 756100                    STQ     TEMP2,,AUTO
         1 000332   000342 710000 1                  TRA     s:6346

      320     6342    2        ELSE DO;                           /* Else, get base of nxt seg          */

      321     6343    2             TEMP2 = ELS$ -> MM$DESC.BASE (SEGX + 1);

   6343  1 000333   200015 235100                    LDA     SEGX,,AUTO
         1 000334   000001 735000                    ALS     1
         1 000335   100003 235105                    LDA     3,AL,PR1
         1 000336   200044 755100                    STA     TEMP2,,AUTO

      322     6344    2             TEMP2 = TEMP2/4096;           /* Pg # of nxt seg's base             */

   6344  1 000337   200044 236100                    LDQ     TEMP2,,AUTO
         1 000340   010000 506007                    DIV     4096,DL
         1 000341   200044 756100                    STQ     TEMP2,,AUTO

      323     6345    2           END;

      324     6346    1        GAPPGS = TEMP2 - TEMP1 - 1;

   6346  1 000342   200043 136100                    SBLQ    TEMP1,,AUTO
         1 000343   000001 136007                    SBLQ    1,DL
         1 000344   200030 756100                    STQ     GAPPGS,,AUTO

      325     6347
      326     6348        /* Here we check to see if the increase in segment size will
      327     6349        overlap the following segment.  If this is the case we will
      328     6350        have to move all the segments above it.
      329     6351         */
      330     6352    1        IF ASIZEP > GAPPGS

   6352  1 000345   200027 116100                    CMPQ    ASIZEP,,AUTO
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:58   
         1 000346   000556 605000 1                  TPL     SETLS

      331     6353    2        THEN DO;                           /* Do if seg will cross into nxt seg  */

      332     6354
      333     6355        /*
      334     6356             If this is a monitor data segment we cannot move things
      335     6357             around so we better altret.
      336     6358         */
      337     6359    2             IF EWSQ = %MONWSQ

   6359  1 000347   000000 235100                    LDA     0,,PR0
         1 000350   000001 115007                    CMPA    1,DL
         1 000351   000356 601000 1                  TNZ     s:6367

      338     6360    3             THEN DO;

      339     6361                       /*E*   ERROR:  MMH-E$ALLGONE-0
      340     6362                              MESSAGE: All data segment space has been allocated.        */
      341     6363    3                  ERR = %E$ALLGONE;

   6363  1 000352   001134 235007                    LDA     604,DL
         1 000353   200006 473500                    LDP3    @ERR,,AUTO
         1 000354   300000 755100                    STA     0,,PR3

      342     6364    3                  ALTRETURN;

   6364  1 000355   000000 702200 xent               TSX2  ! X66_AALT

      343     6365    3                END;
      344     6366
      345     6367    2             IF BSEGX = %DS8SID            /* Test for pushing high seg off      */

   6367  1 000356   200014 236100                    LDQ     BSEGX,,AUTO
         1 000357   777700 376003                    ANQ     -64,DU
         1 000360   601300 116003                    CMPQ    -64832,DU
         1 000361   000365 601000 1                  TNZ     s:6371
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:59   

      346     6368    2             THEN
      347     6369    2                  TEMP1 = NEWTOP;          /* ...END of data area                */

   6369  1 000362   200024 236100                    LDQ     NEWTOP,,AUTO
         1 000363   200043 756100                    STQ     TEMP1,,AUTO
         1 000364   000374 710000 1                  TRA     s:6372

      348     6370    2             ELSE
      349     6371    2                  TEMP1 = CURTOP + ASIZE - GAPPGS*4096;

   6371  1 000365   200025 236100                    LDQ     CURTOP,,AUTO
         1 000366   200026 036100                    ADLQ    ASIZE,,AUTO
         1 000367   200060 756100                    STQ     PSR_DESC+4,,AUTO
         1 000370   200030 336100                    LCQ     GAPPGS,,AUTO
         1 000371   000014 736000                    QLS     12
         1 000372   200060 036100                    ADLQ    PSR_DESC+4,,AUTO
         1 000373   200043 756100                    STQ     TEMP1,,AUTO

      350     6372    2             IF TEMP1 >= DATAHI

   6372  1 000374   200032 116100                    CMPQ    DATAHI,,AUTO
         1 000375   000446 604000 1                  TMI     SEGFITS

      351     6373    3             THEN DO;                      /* If high seg will overflow the      */

      352     6374    3                  IF DATAHI = 1024 * 4096

   6374  1 000376   200032 235100                    LDA     DATAHI,,AUTO
         1 000377   000020 115003                    CMPA    16,DU
         1 000400   000405 601000 1                  TNZ     s:6379

      353     6375    4                  THEN DO;

      354     6376    4                       CALL MMK$BIGPT;

   6376  1 000401   000002 631400 xsym               EPPR1   B_VECTNIL+2
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:60   
         1 000402   000000 701000 xent               TSX1    MMK$BIGPT
         1 000403   000000 011000                    NOP     0

      355     6377    4                       GOTO SEGFITS;

   6377  1 000404   000446 710000 1                  TRA     SEGFITS

      356     6378    4                     END;
      357     6379    3                  ERR = %E$ALLGONE;        /* data area then truncate it         */

   6379  1 000405   001134 235007                    LDA     604,DL
         1 000406   200006 473500                    LDP3    @ERR,,AUTO
         1 000407   300000 755100                    STA     0,,PR3

      358     6380    3                  IF FREEFLG OR SHARE_DS

   6380  1 000410   200035 234100                    SZN     FREEFLG,,AUTO
         1 000411   000414 604000 1                  TMI     s:6382
         1 000412   200017 234100                    SZN     SHARE_DS,,AUTO
         1 000413   000415 605000 1                  TPL     s:6383

      359     6381    3                  THEN
      360     6382    3                       ALTRETURN;

   6382  1 000414   000000 702200 xent               TSX2  ! X66_AALT

      361     6383    3                  TRUNCFLG = %TRUE;        /* And find the max wsize we can      */

   6383  1 000415   400000 236003                    LDQ     -131072,DU
         1 000416   200034 756100                    STQ     TRUNCFLG,,AUTO

      362     6384    3                  BSIZE = DATAHI - CURTOP - 1; /* Safely grow it            */

   6384  1 000417   200032 236100                    LDQ     DATAHI,,AUTO
         1 000420   200025 136100                    SBLQ    CURTOP,,AUTO
         1 000421   000001 136007                    SBLQ    1,DL
         1 000422   200031 756100                    STQ     BSIZE,,AUTO
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:61   

      363     6385    3                  IF BSIZE <= 0

   6385  1 000423   000425 605400 1                  TPNZ    s:6388

      364     6386    3                  THEN
      365     6387    3                       ALTRETURN;

   6387  1 000424   000000 702200 xent               TSX2  ! X66_AALT

      366     6388    3                  IF BSEGX = %DS8SID

   6388  1 000425   200014 236100                    LDQ     BSEGX,,AUTO
         1 000426   777700 376003                    ANQ     -64,DU
         1 000427   601300 116003                    CMPQ    -64832,DU
         1 000430   000434 601000 1                  TNZ     s:6392

      367     6389    3                  THEN
      368     6390    3                       ASIZEP = GAPPGS;

   6390  1 000431   200030 236100                    LDQ     GAPPGS,,AUTO
         1 000432   200027 756100                    STQ     ASIZEP,,AUTO
         1 000433   000437 710000 1                  TRA     s:6393

      369     6391    3                  ELSE
      370     6392    3                       ASIZEP = BSIZE/4096;

   6392  1 000434   200031 236100                    LDQ     BSIZE,,AUTO
         1 000435   010000 506007                    DIV     4096,DL
         1 000436   200027 756100                    STQ     ASIZEP,,AUTO

      371     6393    3                  ASIZE = ASIZEP * 4096;

   6393  1 000437   200027 235100                    LDA     ASIZEP,,AUTO
         1 000440   000014 735000                    ALS     12
         1 000441   200026 755100                    STA     ASIZE,,AUTO

PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:62   
      372     6394
      373     6395        /* Set bsize = rounded-down to nearest page # of words that can    */
      374     6396        /* Be obtained.                                                    */
      375     6397    3                  BSIZE = ASIZE;

   6397  1 000442   200031 755100                    STA     BSIZE,,AUTO

      376     6398    3                  IF ASIZEP = 0

   6398  1 000443   000000 116003                    CMPQ    0,DU
         1 000444   000446 601000 1                  TNZ     SEGFITS

      377     6399    3                  THEN
      378     6400    3                       ALTRETURN;

   6400  1 000445   000000 702200 xent               TSX2  ! X66_AALT

      379     6401    3                END;
      380     6402    2   SEGFITS:
      381     6403    2             I = %MAXDATASID + 1;          /* Loop backward from maxdatasid to   */

   6403  1 000446   000014 235007       SEGFITS      LDA     12,DL
         1 000447   200037 755100                    STA     I,,AUTO

      382     6404
      383     6405
      384     6406    2             CALL ADJ_PS1;

   6406  1 000450   002364 701000 1                  TSX1    ADJ_PS1
         1 000451   000000 011000                    NOP     0

      385     6407
      386     6408    3   LOOP1:    DO;                           /* Segx+1 to relocate all segments    */

   6408  1 000452                       LOOP1        null
      387     6409    3                  I = I - 1;

PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:63   
   6409  1 000452   000001 336007                    LCQ     1,DL
         1 000453   200037 056100                    ASQ     I,,AUTO

      388     6410    3                  IF I <= SEGX

   6410  1 000454   200015 236100                    LDQ     SEGX,,AUTO
         1 000455   000537 604000 1                  TMI     s:6441
         1 000456   200037 116100                    CMPQ    I,,AUTO
         1 000457   000537 605000 1                  TPL     s:6441

      389     6411    3                  THEN
      390     6412    3                       GOTO ENDLOOP1;
      391     6413    3                  TEMP3 = ELS$ -> MM$DESC.BASE (I);

   6413  1 000460   200037 235100                    LDA     I,,AUTO
         1 000461   000001 735000                    ALS     1
         1 000462   200041 470500                    LDP0    ELS$,,AUTO
         1 000463   000001 235105                    LDA     1,AL,PR0
         1 000464   200045 755100                    STA     TEMP3,,AUTO

      392     6414    3                  TEMP1 = TEMP3/4096;      /* Starting pg # of seg               */

   6414  1 000465   200045 236100                    LDQ     TEMP3,,AUTO
         1 000466   010000 506007                    DIV     4096,DL
         1 000467   200043 756100                    STQ     TEMP1,,AUTO

      393     6415        /* Relocate the base by the # of pgs. we're gonna move things */
      394     6416    3                  TEMP2 = ASIZE - GAPPGS*4096;

   6416  1 000470   200030 336100                    LCQ     GAPPGS,,AUTO
         1 000471   000014 736000                    QLS     12
         1 000472   200026 036100                    ADLQ    ASIZE,,AUTO
         1 000473   200044 756100                    STQ     TEMP2,,AUTO

      395     6417
      396     6418
      397     6419    3                  TEMP4 = TEMP2;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:64   

   6419  1 000474   200046 756100                    STQ     TEMP4,,AUTO

      398     6420    3                  CALL ADJ_PS2;

   6420  1 000475   002424 701000 1                  TSX1    ADJ_PS2
         1 000476   000000 011000                    NOP     0

      399     6421
      400     6422    3                  ELS$ -> MM$DESC.BASE (I) = TEMP3 + TEMP2;

   6422  1 000477   200037 235100                    LDA     I,,AUTO
         1 000500   000001 735000                    ALS     1
         1 000501   200045 236100                    LDQ     TEMP3,,AUTO
         1 000502   200044 036100                    ADLQ    TEMP2,,AUTO
         1 000503   200041 470500                    LDP0    ELS$,,AUTO
         1 000504   000001 756105                    STQ     1,AL,PR0

      401     6423    3                  J = ELS$ -> MM$DESC.BOUND (I);

   6423  1 000505   000000 236105                    LDQ     0,AL,PR0
         1 000506   000020 772000                    QRL     16
         1 000507   200040 756100                    STQ     J,,AUTO

      402     6424    3                  J = (J + 4095)/4096;

   6424  1 000510   007777 036007                    ADLQ    4095,DL
         1 000511   010000 506007                    DIV     4096,DL
         1 000512   200040 756100                    STQ     J,,AUTO

      403     6425
      404     6426    4   LOOP2:         DO;                      /* #PGS in seg-1 to zero by -1        */

   6426  1 000513                       LOOP2        null
      405     6427    4                       J = J - 1;

   6427  1 000513   000001 336007                    LCQ     1,DL
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:65   
         1 000514   200040 056100                    ASQ     J,,AUTO

      406     6428    4                       IF J < 0 THEN GOTO ENDLOOP2;

   6428  1 000515   000536 604000 1                  TMI     s:6437

      407     6429                                           /* Fix up the page table for each segment  */
      408     6430    4                       TEMP2 = TEMP1 + ASIZEP - GAPPGS + J; /* New page for seg    */

   6430  1 000516   200043 236100                    LDQ     TEMP1,,AUTO
         1 000517   200027 036100                    ADLQ    ASIZEP,,AUTO
         1 000520   200030 136100                    SBLQ    GAPPGS,,AUTO
         1 000521   200040 036100                    ADLQ    J,,AUTO
         1 000522   200044 756100                    STQ     TEMP2,,AUTO

      409     6431    4                       TEMP3 = TEMP1 + J;  /* Old page for seg                   */

   6431  1 000523   200043 236100                    LDQ     TEMP1,,AUTO
         1 000524   200040 036100                    ADLQ    J,,AUTO
         1 000525   200045 756100                    STQ     TEMP3,,AUTO

      410     6432    4                       MAP$->B$PAGE.WRD(TEMP2) = MAP$->B$PAGE.WRD(TEMP3);

   6432  1 000526   200042 470500                    LDP0    MAP$,,AUTO
         1 000527   200044 720100                    LXL0    TEMP2,,AUTO
         1 000530   000000 235106                    LDA     0,QL,PR0
         1 000531   000000 755110                    STA     0,X0,PR0

      411     6433    4                       MAP$->B$PAGE.WRD(TEMP3) = BITBIN(MM_FPMC);

   6433  1 000532   200045 720100                    LXL0    TEMP3,,AUTO
         1 000533   000000 235000 xsym               LDA     MM_FPMC
         1 000534   000000 755110                    STA     0,X0,PR0

      412     6434    4                       GOTO LOOP2;         /* End of backward loop #2            */

   6434  1 000535   000513 710000 1                  TRA     LOOP2
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:66   

      413     6435    4   ENDLOOP2:         END;
      414     6436
      415     6437    3                  GOTO LOOP1;              /* End of backward loop # 1           */

   6437  1 000536   000452 710000 1                  TRA     LOOP1

      416     6438    3   ENDLOOP1:    END;
      417     6439
      418     6440
      419     6441    2             CALL SPOIL_DR;

   6441  1 000537   002502 701000 1                  TSX1    SPOIL_DR
         1 000540   000000 011000                    NOP     0

      420     6442
      421     6443
      422     6444    2             CALL HFC$ASSOCCLR(EWSQ,%DBDSEGLO,16384); /*MAX Dense PT*/

   6444  1 000541   000002 236000 2                  LDQ     2
         1 000542   200062 756100                    STQ     PSR_DESC+6,,AUTO
         1 000543   000003 236000 2                  LDQ     3
         1 000544   200003 235100                    LDA     @EWSQ,,AUTO
         1 000545   200060 757100                    STAQ    PSR_DESC+4,,AUTO
         1 000546   200060 630500                    EPPR0   PSR_DESC+4,,AUTO
         1 000547   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000550   000000 701000 xent               TSX1    HFC$ASSOCCLR
         1 000551   000000 011000                    NOP     0

      423     6445                  %UNLOCK(G=MM_LOCK);

   6446  1 000552   000004 630400 2                  EPPR0   4
         1 000553   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000554   000000 701000 xent               TSX1    HFC$UNLOCK
         1 000555   000000 011000                    NOP     0

      424     6448    2           END;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:67   

   6441  1 000556                       SETLS        null
      425     6449
      426     6450        /* All segments above the one we want to grow have been moved up.  */
      427     6451        /* Now, adjust the bound of the descriptor for the segment to be   */
      428     6452        /* Grown and get the necessary pages to fill it out.               */
      429     6453    1   SETLS: ;
      430     6454        /* Get page number one past current end of segment */
      431     6455    1        TEMP2 = (MOD(DRBASE,4096) + DRBOUND)/4096 + 1;

   6455  1 000556   200022 236100                    LDQ     DRBASE,,AUTO
         1 000557   010000 506007                    DIV     4096,DL
         1 000560   000044 733000                    LRS     36
         1 000561   200023 036100                    ADLQ    DRBOUND,,AUTO
         1 000562   010000 506007                    DIV     4096,DL
         1 000563   000001 036007                    ADLQ    1,DL
         1 000564   200044 756100                    STQ     TEMP2,,AUTO

      432     6456    1        IF

   6456  1 000565   200014 236100                    LDQ     BSEGX,,AUTO
         1 000566   777700 376003                    ANQ     -64,DU
         1 000567   177700 376003                    ANQ     65472,DU
         1 000570   000030 772000                    QRL     24
         1 000571   000001 736000                    QLS     1
         1 000572   200041 470500                    LDP0    ELS$,,AUTO
         1 000573   000000 236106                    LDQ     0,QL,PR0
         1 000574   000400 316007                    CANQ    256,DL
         1 000575   000617 601000 1                  TNZ     s:6472

      433     6457                  %NOTNULL (LS$ = ELS$ , SEGID = BSEGX);
      434     6460    1        THEN ;
      435     6461    2        ELSE DO;                      /* And fix bsize to allow for the bound-*/

      436     6462    2             BSIZE = BSIZE - 1;       /* Ary condition of zero bound =1 byte     */

   6462  1 000576   000001 336007                    LCQ     1,DL
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:68   
         1 000577   200031 056100                    ASQ     BSIZE,,AUTO

      437     6463                  %SETNOTNULL (LS$ = ELS$ , SEGID = BSEGX);

   6464  1 000600   200014 236100                    LDQ     BSEGX,,AUTO
         1 000601   777700 376003                    ANQ     -64,DU
         1 000602   177700 376003                    ANQ     65472,DU
         1 000603   000030 772000                    QRL     24
         1 000604   000001 736000                    QLS     1
         1 000605   000000 620006                    EAX0    0,QL
         1 000606   000400 236007                    LDQ     256,DL
         1 000607   000000 256110                    ORSQ    0,X0,PR0

      438     6466        /* If seg is null & starts on page boundary, get starting page of seg */
      439     6467    2             IF MOD(DRBASE,4096) = 0

   6467  1 000610   200022 236100                    LDQ     DRBASE,,AUTO
         1 000611   010000 506007                    DIV     4096,DL
         1 000612   000044 733000                    LRS     36
         1 000613   000000 116003                    CMPQ    0,DU
         1 000614   000617 601000 1                  TNZ     s:6472

      440     6468    2             THEN
      441     6469    2                  TEMP2 = TEMP2 - 1;

   6469  1 000615   000001 336007                    LCQ     1,DL
         1 000616   200044 056100                    ASQ     TEMP2,,AUTO

      442     6470    2           END;

      443     6471
      444     6472    1        ELS$ -> MM$DESC.BOUND (SEGX) = DRBOUND + BSIZE;

   6472  1 000617   200015 235100                    LDA     SEGX,,AUTO
         1 000620   000001 735000                    ALS     1
         1 000621   200023 236100                    LDQ     DRBOUND,,AUTO
         1 000622   200031 036100                    ADLQ    BSIZE,,AUTO
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:69   
         1 000623   000020 736000                    QLS     16
         1 000624   000000 676105                    ERQ     0,AL,PR0
         1 000625   000034 376000 xsym               ANQ     B_VECTNIL+28
         1 000626   000000 656105                    ERSQ    0,AL,PR0

      445     6473    1        IF SHARE_DS

   6473  1 000627   200017 234100                    SZN     SHARE_DS,,AUTO
         1 000630   000637 605000 1                  TPL     s:6478

      446     6474    1        THEN
      447     6475    1             B$JIT.PSEUDOPGS = B$JIT.PSEUDOPGS + ASIZEP;

   6475  1 000631   000000 471400 xsym               LDP1    B$JIT$
         1 000632   100212 236100                    LDQ     138,,PR1
         1 000633   777777 376007                    ANQ     -1,DL
         1 000634   200027 036100                    ADLQ    ASIZEP,,AUTO
         1 000635   000000 620006                    EAX0    0,QL
         1 000636   100212 440100                    SXL0    138,,PR1

      448     6476        /* Set segment access if this is the first GET for it.  If it is
      449     6477           to be shared, mark that at this time as well.                   */
      450     6478    1        IF (TEMP2 = 0)

   6478  1 000637   200044 236100                    LDQ     TEMP2,,AUTO
         1 000640   000664 601000 1                  TNZ     s:6486

      451     6479    2        THEN DO;                           /* Segment is being defined...        */

      452     6480    2            ELS$ -> MM$DESC.FLGS (SEGX) = (ELS$ -> MM$DESC.FLGS (SEGX) & ~%MM_DSWRITE#
              6480                      ) | ACCESS;

   6480  1 000641   000000 236105                    LDQ     0,AL,PR0
         1 000642   000024 736000                    QLS     20
         1 000643   777000 376003                    ANQ     -512,DU
         1 000644   177000 376003                    ANQ     65024,DU
         1 000645   200020 276100                    ORQ     ACCESS,,AUTO
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:70   
         1 000646   000024 772000                    QRL     20
         1 000647   000000 676105                    ERQ     0,AL,PR0
         1 000650   177600 376007                    ANQ     65408,DL
         1 000651   000000 656105                    ERSQ    0,AL,PR0

      453     6481    2             IF SHARE_DS

   6481  1 000652   200017 234100                    SZN     SHARE_DS,,AUTO
         1 000653   000664 605000 1                  TPL     s:6486

      454     6482    2             THEN
      455     6483    2                 ELS$ -> MM$DESC.FLGS (SEGX) = ELS$ -> MM$DESC.FLGS (SEGX) | %DSSHARED
              6483                           ;

   6483  1 000654   000000 236105                    LDQ     0,AL,PR0
         1 000655   000024 736000                    QLS     20
         1 000656   777000 376003                    ANQ     -512,DU
         1 000657   020000 276003                    ORQ     8192,DU
         1 000660   000024 772000                    QRL     20
         1 000661   000000 676105                    ERQ     0,AL,PR0
         1 000662   177600 376007                    ANQ     65408,DL
         1 000663   000000 656105                    ERSQ    0,AL,PR0

      456     6484    2           END;

      457     6485
      458     6486    1        IF VIRTONLY THEN GOTO VIRTONLY_;

   6486  1 000664   200036 234100                    SZN     VIRTONLY,,AUTO
         1 000665   001330 604000 1                  TMI     VIRTONLY_

      459     6487        /* See if we want to actually allocate some physical pages here,
      460     6488           or just map a pased page chain into the virtual pages... */
      461     6489    1        IF (HEADPG = 0) OR ((HEADPG ~= 0) AND NOT SHARE_DS)

   6489  1 000666   200016 236100                    LDQ     HEADPG,,AUTO
         1 000667   000673 600000 1                  TZE     s:6491
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:71   
         1 000670   001071 600000 1                  TZE     s:6534
         1 000671   200017 234100                    SZN     SHARE_DS,,AUTO
         1 000672   001071 604000 1                  TMI     s:6534

      462     6490    2        THEN DO;                           /* We wanna go gettem...              */

      463     6491    2             CALL MMG$SGVP(EWSQ,SEGID,TEMP2,ASIZEP,ERR) ALTRET(BADGDS);

   6491  1 000673   200006 236100                    LDQ     @ERR,,AUTO
         1 000674   200064 756100                    STQ     PSR_DESC+8,,AUTO
         1 000675   200027 631500                    EPPR1   ASIZEP,,AUTO
         1 000676   200063 451500                    STP1    PSR_DESC+7,,AUTO
         1 000677   200044 633500                    EPPR3   TEMP2,,AUTO
         1 000700   200062 453500                    STP3    PSR_DESC+6,,AUTO
         1 000701   200004 236100                    LDQ     @SEGID,,AUTO
         1 000702   200003 235100                    LDA     @EWSQ,,AUTO
         1 000703   200060 757100                    STAQ    PSR_DESC+4,,AUTO
         1 000704   200060 630500                    EPPR0   PSR_DESC+4,,AUTO
         1 000705   000023 631400 xsym               EPPR1   B_VECTNIL+19
         1 000706   000000 701000 xent               TSX1    MMG$SGVP
         1 000707   001432 702000 1                  TSX2    BADGDS

      464     6492    2             IF ES_CLEARMEM~=0 THEN CALL JSN$BLNK1(ELS$->MM$DESC(SEGX),TEMP2,ASIZEP);

   6492  1 000710   000000 235000 xsym               LDA     ES_CLEARMEM
         1 000711   000726 600000 1                  TZE     s:6497

   6492  1 000712   200027 630500                    EPPR0   ASIZEP,,AUTO
         1 000713   200062 450500                    STP0    PSR_DESC+6,,AUTO
         1 000714   200044 631500                    EPPR1   TEMP2,,AUTO
         1 000715   200061 451500                    STP1    PSR_DESC+5,,AUTO
         1 000716   200015 236100                    LDQ     SEGX,,AUTO
         1 000717   000023 736000                    QLS     19
         1 000720   200041 036100                    ADLQ    ELS$,,AUTO
         1 000721   200060 756100                    STQ     PSR_DESC+4,,AUTO
         1 000722   200060 630500                    EPPR0   PSR_DESC+4,,AUTO
         1 000723   000021 631400 xsym               EPPR1   B_VECTNIL+17
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:72   
         1 000724   000000 701000 xent               TSX1    JSN$BLNK1
         1 000725   000000 011000                    NOP     0

      465     6493                                                /* Zap the pages we got. */
      466     6494        /* If this was a call to MMH$SHARE_DS, then we want to unlink the
      467     6495           allocated pages from the user's page chain, reverse the links,
      468     6496           and pass the resulting head, tail, and count back to the caller. */
      469     6497    2             IF SHARE_DS

   6497  1 000726   200017 234100                    SZN     SHARE_DS,,AUTO
         1 000727   001071 605000 1                  TPL     s:6534

      470     6498    3             THEN DO;

      471     6499                       %FINDMAP (WSQ = EWSQ , P$ = MAP$);

   6500  1 000730   200003 470500                    LDP0    @EWSQ,,AUTO
         1 000731   000000 720100                    LXL0    0,,PR0
         1 000732   000000 236010 xsym               LDQ     MM_PTPTRS$,X0
         1 000733   200042 756100                    STQ     MAP$,,AUTO

      472     6502    3                  VPLOW = (DRBASE/4096) + TEMP2;

   6502  1 000734   200022 236100                    LDQ     DRBASE,,AUTO
         1 000735   010000 506007                    DIV     4096,DL
         1 000736   200044 036100                    ADLQ    TEMP2,,AUTO
         1 000737   200021 756100                    STQ     VPLOW,,AUTO

      473     6503    3                  IF HW_WSQ0PT THEN

   6503  1 000740   000000 234000 xsym               SZN     HW_WSQ0PT
         1 000741   000754 605000 1                  TPL     s:6506

      474     6504    3                       HEAD=B$IPHYMAP$->MM$IPHY_MAP(MAP$->B$MAP.RPN(VPLOW));

   6504  1 000742   200042 471500                    LDP1    MAP$,,AUTO
         1 000743   100000 236106                    LDQ     0,QL,PR1
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:73   
         1 000744   000022 772000                    QRL     18
         1 000745   000001 736000                    QLS     1
         1 000746   000000 473400 xsym               LDP3    B$IPHYMAP$
         1 000747   200010 474500                    LDP4    @HEAD,,AUTO
         1 000750   000100 101506                    MRL     fill='000'O
         1 000751   300000 000002                    ADSC9   0,Q,PR3                  cn=0,n=2
         1 000752   400000 000004                    ADSC9   0,,PR4                   cn=0,n=4
         1 000753   000761 710000 1                  TRA     s:6507

      475     6505    3                  ELSE
      476     6506    3                       HEAD = MAP$->B$MAP.RPN(VPLOW);

   6506  1 000754   200042 471500                    LDP1    MAP$,,AUTO
         1 000755   100000 236106                    LDQ     0,QL,PR1
         1 000756   000022 772000                    QRL     18
         1 000757   200010 473500                    LDP3    @HEAD,,AUTO
         1 000760   300000 756100                    STQ     0,,PR3

      477     6507    3                  COUNT = ASIZEP;

   6507  1 000761   200027 235100                    LDA     ASIZEP,,AUTO
         1 000762   200012 473500                    LDP3    @COUNT,,AUTO
         1 000763   300000 755100                    STA     0,,PR3

      478     6508    3                  B$JIT.PPC = B$JIT.PPC - ASIZEP;

   6508  1 000764   000000 474400 xsym               LDP4    B$JIT$
         1 000765   400207 236100                    LDQ     135,,PR4
         1 000766   777777 376007                    ANQ     -1,DL
         1 000767   200027 136100                    SBLQ    ASIZEP,,AUTO
         1 000770   000000 620006                    EAX0    0,QL
         1 000771   400207 440100                    SXL0    135,,PR4

      479     6509
      480     6510    3                  IF EWSQ > 1

   6510  1 000772   000000 235100                    LDA     0,,PR0
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:74   
         1 000773   000002 115007                    CMPA    2,DL
         1 000774   000777 602000 1                  TNC     s:6513

      481     6511    3                  THEN
      482     6512    3                       S$CU$->B$U.PCT = B$JIT.PPC;

   6512  1 000775   000000 475400 xsym               LDP5    S$CU$
         1 000776   500010 740100                    STX0    8,,PR5

      483     6513    3                  TEMP1 = HEAD;

   6513  1 000777   200010 475500                    LDP5    @HEAD,,AUTO
         1 001000   500000 235100                    LDA     0,,PR5
         1 001001   200043 755100                    STA     TEMP1,,AUTO

      484     6514    4                  DO I = 1 TO ASIZEP;

   6514  1 001002   000001 236007                    LDQ     1,DL
         1 001003   200037 756100                    STQ     I,,AUTO
         1 001004   001061 710000 1                  TRA     s:6529+1

      485     6515    4                       MM$PPUT.USER(TEMP1) = '0'B;

   6515  1 001005   000000 470400 xsym               LDP0    B$PPUT$
         1 001006   200043 720100                    LXL0    TEMP1,,AUTO
         1 001007   000005 236000 2                  LDQ     5
         1 001010   000000 356110                    ANSQ    0,X0,PR0

      486     6516    4                       MAP$->B$MAP.SCTRL(VPLOW) = %SCCVM;

   6516  1 001011   200042 471500                    LDP1    MAP$,,AUTO
         1 001012   200021 720100                    LXL0    VPLOW,,AUTO
         1 001013   100000 236110                    LDQ     0,X0,PR1
         1 001014   000006 376000 2                  ANQ     6
         1 001015   001000 276007                    ORQ     512,DL
         1 001016   100000 756110                    STQ     0,X0,PR1

PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:75   
      487     6517    4                       VPLOW = VPLOW + 1;

   6517  1 001017   200021 235100                    LDA     VPLOW,,AUTO
         1 001020   000001 035007                    ADLA    1,DL
         1 001021   200021 755100                    STA     VPLOW,,AUTO

      488     6518    4                       TAIL = TEMP1;

   6518  1 001022   200043 236100                    LDQ     TEMP1,,AUTO
         1 001023   200011 473500                    LDP3    @TAIL,,AUTO
         1 001024   300000 756100                    STQ     0,,PR3

      489     6519    5                       IF HW_WSQ0PT THEN DO;

   6519  1 001025   000000 234000 xsym               SZN     HW_WSQ0PT
         1 001026   001051 605000 1                  TPL     s:6526

      490     6520    5                            J=MAP$->B$MAP.RPN(VPLOW);

   6520  1 001027   100000 236105                    LDQ     0,AL,PR1
         1 001030   000022 772000                    QRL     18
         1 001031   200040 756100                    STQ     J,,AUTO

      491     6521    5                            IF J= BITBIN('000000777777'O) THEN EXIT;
              6521                                     /* DONT RUN -1 THRU IPHYMAP */

   6521  1 001032   001035 604000 1                  TMI     s:6522
         1 001033   000002 116000 0                  CMPQ    DESCINIT+2
         1 001034   001050 600000 1                  TZE     s:6524

      492     6522    5                            MM$PPUT.PPNO(TEMP1)=B$IPHYMAP$->MM$IPHY_MAP(J);

   6522  1 001035   200040 235100                    LDA     J,,AUTO
         1 001036   000001 735000                    ALS     1
         1 001037   200043 236100                    LDQ     TEMP1,,AUTO
         1 001040   000002 736000                    QLS     2
         1 001041   000000 474400 xsym               LDP4    B$IPHYMAP$
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:76   
         1 001042   000106 100505                    MLR     fill='000'O
         1 001043   400000 000002                    ADSC9   0,A,PR4                  cn=0,n=2
         1 001044   000000 400002                    ADSC9   0,Q,PR0                  cn=2,n=2

      493     6523    5                            TEMP1=B$IPHYMAP$->MM$IPHY_MAP(J);

   6523  1 001045   000100 101505                    MRL     fill='000'O
         1 001046   400000 000002                    ADSC9   0,A,PR4                  cn=0,n=2
         1 001047   200043 000004                    ADSC9   TEMP1,,AUTO              cn=0,n=4

      494     6524    5                          END;

   6524  1 001050   001060 710000 1                  TRA     s:6529

      495     6525    5                       ELSE DO;

      496     6526    5                            MM$PPUT.PPNO(TEMP1) = MAP$->B$MAP.RPN(VPLOW);

   6526  1 001051   100000 220105                    LDX0    0,AL,PR1
         1 001052   200043 721100                    LXL1    TEMP1,,AUTO
         1 001053   000000 440111                    SXL0    0,X1,PR0

      497     6527    5                            TEMP1 = MAP$->B$MAP.RPN(VPLOW);

   6527  1 001054   200021 720100                    LXL0    VPLOW,,AUTO
         1 001055   100000 236110                    LDQ     0,X0,PR1
         1 001056   000022 772000                    QRL     18
         1 001057   200043 756100                    STQ     TEMP1,,AUTO

      498     6528    5                          END;

      499     6529    4                     END;

   6529  1 001060   200037 054100                    AOS     I,,AUTO
         1 001061   200037 236100                    LDQ     I,,AUTO
         1 001062   200027 116100                    CMPQ    ASIZEP,,AUTO
         1 001063   001005 604400 1                  TMOZ    s:6515
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:77   

      500     6530    3                  MM$PPUT.PPNO (TAIL) = 0;

   6530  1 001064   200011 470500                    LDP0    @TAIL,,AUTO
         1 001065   000000 720100                    LXL0    0,,PR0
         1 001066   000000 221003                    LDX1    0,DU
         1 001067   000000 473400 xsym               LDP3    B$PPUT$
         1 001070   300000 441110                    SXL1    0,X0,PR3

      501     6531    3                END;

      502     6532    2           END;

      503     6533
      504     6534    1        IF HEADPG ~= 0

   6534  1 001071   200016 235100                    LDA     HEADPG,,AUTO
         1 001072   001330 600000 1                  TZE     VIRTONLY_

      505     6535    2        THEN DO;                           /* Mapping or initialization required */

      506     6536                  %FINDMAP (WSQ = EWSQ , P$ = MAP$);

   6537  1 001073   200003 470500                    LDP0    @EWSQ,,AUTO
         1 001074   000000 720100                    LXL0    0,,PR0
         1 001075   000000 236010 xsym               LDQ     MM_PTPTRS$,X0
         1 001076   200042 756100                    STQ     MAP$,,AUTO

      507     6539    2             TEMP1 = DRBASE/4096;

   6539  1 001077   200022 236100                    LDQ     DRBASE,,AUTO
         1 001100   010000 506007                    DIV     4096,DL
         1 001101   200043 756100                    STQ     TEMP1,,AUTO

      508     6540    2             TEMP2 = NEWTOP/4096;

   6540  1 001102   200024 236100                    LDQ     NEWTOP,,AUTO
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:78   
         1 001103   010000 506007                    DIV     4096,DL
         1 001104   200044 756100                    STQ     TEMP2,,AUTO

      509     6541    2             PGT$ = PINCRW(B$WINDOW$,1024);

   6541  1 001105   000000 236000 xsym               LDQ     B$WINDOW$
         1 001106   002000 036003                    ADLQ    1024,DU
         1 001107   200050 756100                    STQ     PGT$,,AUTO

      510     6542    2             J = COUNT;                    /* For security checking...           */

   6542  1 001110   200012 471500                    LDP1    @COUNT,,AUTO
         1 001111   100000 235100                    LDA     0,,PR1
         1 001112   200040 755100                    STA     J,,AUTO

      511     6543    3             DO I = TEMP1 TO TEMP2;

   6543  1 001113   200043 235100                    LDA     TEMP1,,AUTO
         1 001114   200037 755100                    STA     I,,AUTO
         1 001115   001273 710000 1                  TRA     s:6584+1

      512     6544    3                  IF HEADPG = 0

   6544  1 001116   200016 235100                    LDA     HEADPG,,AUTO
         1 001117   001122 601000 1                  TNZ     s:6552

      513     6545    3                  THEN
      514     6546    3                       CALL SC_MM43;

   6546  1 001120   000000 713400 xsym               CLIMB   SC_MM43
         1 001121   000000 600000 xsid               climb   nvectors=         0

      515     6547        /*S*    SCREECH_CODE:   MMH-S$MM43
      516     6548                TYPE:   SCREECH
      517     6549                MESSAGE: Passed page chain count doesn't agree with actual length. */
      518     6550
      519     6551        /* Do either mapping or data segment initialization... */
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:79   
      520     6552    3                  IF SHARE_DS

   6552  1 001122   200017 234100                    SZN     SHARE_DS,,AUTO
         1 001123   001210 605000 1                  TPL     s:6574

      521     6553    4                  THEN DO;

      522     6554    4                       IF NOT (MAP$ -> B$MAP.CTRL (I) & %PGINMEM) THEN

   6554  1 001124   200042 470500                    LDP0    MAP$,,AUTO
         1 001125   200037 720100                    LXL0    I,,AUTO
         1 001126   000000 236110                    LDQ     0,X0,PR0
         1 001127   000036 736000                    QLS     30
         1 001130   400000 376003                    ANQ     -131072,DU
         1 001131   001166 601000 1                  TNZ     s:6565

      523     6555    5                       DO CASE(EWSQ);      /* Update correct JIT DS field */

   6555  1 001132   200003 471500                    LDP1    @EWSQ,,AUTO
         1 001133   100000 235100                    LDA     0,,PR1
         1 001134   000004 135007                    SBLA    4,DL
         1 001135   000003 115007                    CMPA    3,DL
         1 001136   001140 602005 1                  TNC     s:6555+6,AL
         1 001137   001162 710000 1                  TRA     s:6563
         1 001140   001143 710000 1                  TRA     s:6557
         1 001141   001150 710000 1                  TRA     s:6559
         1 001142   001155 710000 1                  TRA     s:6561

      524     6556    5                       CASE(%CPWSQ);       /* Command processor           */

      525     6557    5                          B$JIT.PCC = B$JIT.PCC + 1;

   6557  1 001143   000000 473400 xsym               LDP3    B$JIT$
         1 001144   300202 721100                    LXL1    130,,PR3
         1 001145   000001 622011                    EAX2    1,X1
         1 001146   300202 442100                    SXL2    130,,PR3
         1 001147   001166 710000 1                  TRA     s:6565
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:80   

      526     6558    5                       CASE(%DBWSQ);       /* Debugger                    */

      527     6559    5                          B$JIT.PCDDS = B$JIT.PCDDS + 1;

   6559  1 001150   000000 473400 xsym               LDP3    B$JIT$
         1 001151   300213 721100                    LXL1    139,,PR3
         1 001152   000001 622011                    EAX2    1,X1
         1 001153   300213 442100                    SXL2    139,,PR3
         1 001154   001166 710000 1                  TRA     s:6565

      528     6560    5                       CASE(%ASLWSQ);      /* Alternate shared library    */

      529     6561    5                          B$JIT.PCADS = B$JIT.PCADS + 1;

   6561  1 001155   000000 473400 xsym               LDP3    B$JIT$
         1 001156   300214 221100                    LDX1    140,,PR3
         1 001157   000001 622011                    EAX2    1,X1
         1 001160   300214 742100                    STX2    140,,PR3
         1 001161   001166 710000 1                  TRA     s:6565

      530     6562    5                       CASE(ELSE);         /* User or monitor             */

      531     6563    5                          B$JIT.PCDS = B$JIT.PCDS + 1;

   6563  1 001162   000000 473400 xsym               LDP3    B$JIT$
         1 001163   300202 221100                    LDX1    130,,PR3
         1 001164   000001 622011                    EAX2    1,X1
         1 001165   300202 742100                    STX2    130,,PR3

      532     6564    5                       END;

      533     6565    4                       IF HW_WSQ0PT THEN

   6565  1 001166   000000 234000 xsym               SZN     HW_WSQ0PT
         1 001167   001175 605000 1                  TPL     s:6568

PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:81   
      534     6566    4                            MAP$->B$MAP.RPN(I) = B$WSQ0PT$->B$MAP.RPN(HEADPG);

   6566  1 001170   000000 471400 xsym               LDP1    B$WSQ0PT$
         1 001171   200016 721100                    LXL1    HEADPG,,AUTO
         1 001172   100000 222111                    LDX2    0,X1,PR1
         1 001173   000000 742110                    STX2    0,X0,PR0
         1 001174   001177 710000 1                  TRA     s:6569

      535     6567    4                       ELSE
      536     6568    4                            MAP$->B$MAP.RPN(I) = HEADPG;

   6568  1 001175   200016 721100                    LXL1    HEADPG,,AUTO
         1 001176   000000 741110                    STX1    0,X0,PR0

      537     6569    4                       MAP$->B$MAP.CTRL(I) = (%PGINMEM | %PGWRITE | %PGIOM);

   6569  1 001177   000000 236110                    LDQ     0,X0,PR0
         1 001200   000007 376000 2                  ANQ     7
         1 001201   000064 276007                    ORQ     52,DL
         1 001202   000000 756110                    STQ     0,X0,PR0

      538     6570        /* Mark the page as 'CVM-ed' so we will know he doesn't own it.    */
      539     6571    4                       MAP$->B$MAP.SCTRL(I) = %SCCVM;

   6571  1 001203   000000 236110                    LDQ     0,X0,PR0
         1 001204   000006 376000 2                  ANQ     6
         1 001205   001000 276007                    ORQ     512,DL
         1 001206   000000 756110                    STQ     0,X0,PR0

      540     6572    4                     END;

   6572  1 001207   001263 710000 1                  TRA     s:6582

      541     6573    4                  ELSE DO;

      542     6574    4                       IF HW_WSQ0PT THEN

PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:82   
   6574  1 001210   000000 234000 xsym               SZN     HW_WSQ0PT
         1 001211   001224 605000 1                  TPL     s:6577

      543     6575    4                            TEMP3=B$IPHYMAP$->MM$IPHY_MAP(MAP$->B$MAP.RPN(I));

   6575  1 001212   200042 470500                    LDP0    MAP$,,AUTO
         1 001213   200037 720100                    LXL0    I,,AUTO
         1 001214   000000 236110                    LDQ     0,X0,PR0
         1 001215   000022 772000                    QRL     18
         1 001216   000001 736000                    QLS     1
         1 001217   000000 471400 xsym               LDP1    B$IPHYMAP$
         1 001220   000100 101506                    MRL     fill='000'O
         1 001221   100000 000002                    ADSC9   0,Q,PR1                  cn=0,n=2
         1 001222   200045 000004                    ADSC9   TEMP3,,AUTO              cn=0,n=4
         1 001223   001231 710000 1                  TRA     s:6578

      544     6576    4                       ELSE
      545     6577    4                            TEMP3 = MAP$->B$MAP.RPN(I);

   6577  1 001224   200042 470500                    LDP0    MAP$,,AUTO
         1 001225   200037 720100                    LXL0    I,,AUTO
         1 001226   000000 236110                    LDQ     0,X0,PR0
         1 001227   000022 772000                    QRL     18
         1 001230   200045 756100                    STQ     TEMP3,,AUTO

      546     6578    4                       CALL MME$CVM(%MONWSQ,%WINDOWLO,HEADPG,ERR) ALTRET(INIT_ERR);

   6578  1 001231   200006 236100                    LDQ     @ERR,,AUTO
         1 001232   200063 756100                    STQ     PSR_DESC+7,,AUTO
         1 001233   200016 631500                    EPPR1   HEADPG,,AUTO
         1 001234   200062 451500                    STP1    PSR_DESC+6,,AUTO
         1 001235   000012 237000 2                  LDAQ    10
         1 001236   200060 757100                    STAQ    PSR_DESC+4,,AUTO
         1 001237   200060 630500                    EPPR0   PSR_DESC+4,,AUTO
         1 001240   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 001241   000000 701000 xent               TSX1    MME$CVM
         1 001242   001430 702000 1                  TSX2    INIT_ERR
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:83   

      547     6579    4                       CALL MME$CVM(%MONWSQ,%WINDOWLO+1,TEMP3,ERR) ALTRET(INIT_ERR);

   6579  1 001243   200006 236100                    LDQ     @ERR,,AUTO
         1 001244   200063 756100                    STQ     PSR_DESC+7,,AUTO
         1 001245   200045 630500                    EPPR0   TEMP3,,AUTO
         1 001246   200062 450500                    STP0    PSR_DESC+6,,AUTO
         1 001247   000014 237000 2                  LDAQ    12
         1 001250   200060 757100                    STAQ    PSR_DESC+4,,AUTO
         1 001251   200060 630500                    EPPR0   PSR_DESC+4,,AUTO
         1 001252   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 001253   000000 701000 xent               TSX1    MME$CVM
         1 001254   001430 702000 1                  TSX2    INIT_ERR

      548     6580    4                       PGT$->B$PAGE = B$WINDOW$->B$PAGE;

   6580  1 001255   000000 470400 xsym               LDP0    B$WINDOW$
         1 001256   010000 220003                    LDX0    4096,DU
         1 001257   200050 471500                    LDP1    PGT$,,AUTO
         1 001260   000140 100540                    MLR     fill='000'O
         1 001261   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         1 001262   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0

      549     6581    4                     END;

      550     6582    3                  HEADPG = MM$PPUT.PPNO(HEADPG);

   6582  1 001263   000000 470400 xsym               LDP0    B$PPUT$
         1 001264   200016 720100                    LXL0    HEADPG,,AUTO
         1 001265   000000 236110                    LDQ     0,X0,PR0
         1 001266   777777 376007                    ANQ     -1,DL
         1 001267   200016 756100                    STQ     HEADPG,,AUTO

      551     6583    3                  J = J - 1;

   6583  1 001270   000001 336007                    LCQ     1,DL
         1 001271   200040 056100                    ASQ     J,,AUTO
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:84   

      552     6584    3                END;

   6584  1 001272   200037 054100                    AOS     I,,AUTO
         1 001273   200037 236100                    LDQ     I,,AUTO
         1 001274   200044 116100                    CMPQ    TEMP2,,AUTO
         1 001275   001116 604400 1                  TMOZ    s:6544

      553     6585
      554     6586    2             IF (J ~= 0) OR (HEADPG ~= 0)

   6586  1 001276   200040 235100                    LDA     J,,AUTO
         1 001277   001302 601000 1                  TNZ     s:6588
         1 001300   200016 235100                    LDA     HEADPG,,AUTO
         1 001301   001304 600000 1                  TZE     s:6589

      555     6587    2             THEN
      556     6588    2                  CALL SC_MM43;

   6588  1 001302   000000 713400 xsym               CLIMB   SC_MM43
         1 001303   000000 600000 xsid               climb   nvectors=         0

      557     6589    2             IF NOT SHARE_DS

   6589  1 001304   200017 234100                    SZN     SHARE_DS,,AUTO
         1 001305   001330 604000 1                  TMI     VIRTONLY_

      558     6590    3             THEN DO;

      559     6591    3                  CALL MME$CVM(%MONWSQ,%WINDOWLO,-1,ERR) ALTRET(INIT_ERR);

   6591  1 001306   200006 236100                    LDQ     @ERR,,AUTO
         1 001307   000016 235000 2                  LDA     14
         1 001310   200062 757100                    STAQ    PSR_DESC+6,,AUTO
         1 001311   000012 237000 2                  LDAQ    10
         1 001312   200060 757100                    STAQ    PSR_DESC+4,,AUTO
         1 001313   200060 630500                    EPPR0   PSR_DESC+4,,AUTO
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:85   
         1 001314   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 001315   000000 701000 xent               TSX1    MME$CVM
         1 001316   001430 702000 1                  TSX2    INIT_ERR

      560     6592    3                  CALL MME$CVM(%MONWSQ,%WINDOWLO+1,-1,ERR) ALTRET(INIT_ERR);

   6592  1 001317   200006 236100                    LDQ     @ERR,,AUTO
         1 001320   000016 235000 2                  LDA     14
         1 001321   200062 757100                    STAQ    PSR_DESC+6,,AUTO
         1 001322   000014 237000 2                  LDAQ    12
         1 001323   200060 757100                    STAQ    PSR_DESC+4,,AUTO
         1 001324   200060 630500                    EPPR0   PSR_DESC+4,,AUTO
         1 001325   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 001326   000000 701000 xent               TSX1    MME$CVM
         1 001327   001430 702000 1                  TSX2    INIT_ERR

      561     6593    3                END;

      562     6594    2           END;

   6592  1 001330                       VIRTONLY_    null
      563     6595
      564     6596    1   VIRTONLY_:;
      565     6597        /* If we're running multiprocessing, then update the slave pg tbls */
      566     6598    1        IF (EWSQ = %MONWSQ) AND (S_NSCPU > 0)

   6598  1 001330   200003 470500                    LDP0    @EWSQ,,AUTO
         1 001331   000000 235100                    LDA     0,,PR0
         1 001332   000001 115007                    CMPA    1,DL
         1 001333   001424 601000 1                  TNZ     s:6626
         1 001334   000000 236000 xsym               LDQ     S_NSCPU
         1 001335   001424 600000 1                  TZE     s:6626

      567     6599    2        THEN DO;

      568     6600    2             TEMP1 = DRBASE/4096 + TEMP2;  /* Starting pg no                  */

PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:86   
   6600  1 001336   200022 236100                    LDQ     DRBASE,,AUTO
         1 001337   010000 506007                    DIV     4096,DL
         1 001340   200044 036100                    ADLQ    TEMP2,,AUTO
         1 001341   200043 756100                    STQ     TEMP1,,AUTO

      569     6601    2             TEMP3 = TEMP1 + ASIZEP - 1;   /* Ending pg no.                    */

   6601  1 001342   200027 036100                    ADLQ    ASIZEP,,AUTO
         1 001343   000001 136007                    SBLQ    1,DL
         1 001344   200045 756100                    STQ     TEMP3,,AUTO

      570     6602    2             PGT$ = B$MASTPT$;

   6602  1 001345   000000 236000 xsym               LDQ     B$MASTPT$
         1 001346   200050 756100                    STQ     PGT$,,AUTO

      571     6603    3             DO I = 0 TO S_NSCPU;

   6603  1 001347   200037 450100                    STZ     I,,AUTO
         1 001350   001371 710000 1                  TRA     s:6608+1

      572     6604    4                  DO J = TEMP1 TO TEMP3;

   6604  1 001351   200043 235100                    LDA     TEMP1,,AUTO
         1 001352   200040 755100                    STA     J,,AUTO
         1 001353   001362 710000 1                  TRA     s:6606+1

      573     6605    4                       PGT$->B$PAGE.WRD(J) = B$MPT$->B$PAGE.WRD(J);

   6605  1 001354   000000 470400 xsym               LDP0    B$MPT$
         1 001355   200040 720100                    LXL0    J,,AUTO
         1 001356   200050 471500                    LDP1    PGT$,,AUTO
         1 001357   000000 235110                    LDA     0,X0,PR0
         1 001360   100000 755110                    STA     0,X0,PR1

      574     6606    4                     END;

PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:87   
   6606  1 001361   200040 054100                    AOS     J,,AUTO
         1 001362   200040 236100                    LDQ     J,,AUTO
         1 001363   200045 116100                    CMPQ    TEMP3,,AUTO
         1 001364   001354 604400 1                  TMOZ    s:6605

      575     6607    3                  PGTX = PGTX + 1;

   6607  1 001365   200050 235100                    LDA     PGT$,,AUTO
         1 001366   000001 035007                    ADLA    1,DL
         1 001367   200050 755100                    STA     PGT$,,AUTO

      576     6608    3                END;

   6608  1 001370   200037 054100                    AOS     I,,AUTO
         1 001371   000000 236000 xsym               LDQ     S_NSCPU
         1 001372   001351 604000 1                  TMI     s:6604
         1 001373   200037 116100                    CMPQ    I,,AUTO
         1 001374   001351 605000 1                  TPL     s:6604

      577     6609
      578     6610        /*   Subtract any pages that were reserved for a monitor data
      579     6611             segement from MM_HELD */
      580     6612
      581     6613    2             IF EWSQ = %MONWSQ

   6613  1 001375   200003 470500                    LDP0    @EWSQ,,AUTO
         1 001376   000000 235100                    LDA     0,,PR0
         1 001377   000001 115007                    CMPA    1,DL
         1 001400   001424 601000 1                  TNZ     s:6626

      582     6614    3             THEN DO;

      583     6615    3                  CALL MMA$LOCKBP;

   6615  1 001401   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 001402   000000 701000 xent               TSX1    MMA$LOCKBP
         1 001403   000000 011000                    NOP     0
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:88   

      584     6616    3                  MM_HELD = MM_HELD - MINIMUM (ASIZEP,

   6616  1 001404   200015 720100                    LXL0    SEGX,,AUTO
         1 001405   777774 236010 xsym               LDQ     MM_RDS-4,X0
         1 001406   200044 136100                    SBLQ    TEMP2,,AUTO
         1 001407   000000 116003                    CMPQ    0,DU
         1 001410   001412 605000 1                  TPL     s:6616+6
         1 001411   000000 236003                    LDQ     0,DU
         1 001412   200027 116100                    CMPQ    ASIZEP,,AUTO
         1 001413   001415 604400 1                  TMOZ    s:6616+9
         1 001414   200027 236100                    LDQ     ASIZEP,,AUTO
         1 001415   200060 756100                    STQ     PSR_DESC+4,,AUTO
         1 001416   000000 236000 xsym               LDQ     MM_HELD
         1 001417   200060 136100                    SBLQ    PSR_DESC+4,,AUTO
         1 001420   000000 756000 xsym               STQ     MM_HELD

      585     6617    3                       MAXIMUM(0,MM_RDS(SEGX-%LODATASID)-TEMP2));
      586     6618             /*   TEMP2 is number of pages before this get
      587     6619                  MM_RDS(SEGX-%LODATASID) is pages reserved for this segment
      588     6620                  ASIZEP is the number of pages the were obtained
      589     6621             */
      590     6622    3                  CALL MMA$UNLOCKBP;

   6622  1 001421   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 001422   000000 701000 xent               TSX1    MMA$UNLOCKBP
         1 001423   000000 011000                    NOP     0

      591     6623    3                END;

      592     6624    2           END;

      593     6625
      594     6626    1        IF TRUNCFLG

   6626  1 001424   200034 234100                    SZN     TRUNCFLG,,AUTO
         1 001425   001427 605000 1                  TPL     s:6629
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:89   

      595     6627    1        THEN
      596     6628    1             ALTRETURN;                    /* We had to truncate desired wsize   */

   6628  1 001426   000000 702200 xent               TSX2  ! X66_AALT

      597     6629    1        ELSE RETURN;                       /* ...WE didn't                       */

   6629  1 001427   000000 702200 xent               TSX2  ! X66_ARET

   6626  1 001430                       INIT_ERR     null
      598     6630
      599     6631        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:90   
      600     6632        /* CVM error while trying to initialize a data segment... */
      601     6633    1   INIT_ERR:;
      602     6634        /*S*    SCREECH_CODE: MMH-S$MM44
      603     6635                TYPE: SCREECH
      604     6636                MESSAGE: CVM failed while trying to initialize a data segment. */
      605     6637    1        CALL SC_MM44;

   6637  1 001430   000000 713400 xsym               CLIMB   SC_MM44
         1 001431   000000 600000 xsid               climb   nvectors=         0

      606     6638
      607     6639        /* Alternate return handler for MMG$SGVP */
      608     6640    1   BADGDS:
      609     6641        /*   If the error isn't page limit reached or can't get physical   */
      610     6642        /*   page for monitor, then screech.                               */
      611     6643    1        IF (ERR ~= %E$MEMLIMIT) AND (ERR ~= %E$MONPP)

   6643  1 001432   200006 470500       BADGDS       LDP0    @ERR,,AUTO
         1 001433   000000 235100                    LDA     0,,PR0
         1 001434   001135 115007                    CMPA    605,DL
         1 001435   001444 600000 1                  TZE     s:6662
         1 001436   001161 115007                    CMPA    625,DL
         1 001437   001444 600000 1                  TZE     s:6662
         1 001440   001207 115007                    CMPA    647,DL
         1 001441   001444 600000 1                  TZE     s:6662

      612     6644    1             AND (ERR ~= %E$BRKCTY)
      613     6645    1        THEN
      614     6646    1             CALL SC_MM22;

   6646  1 001442   000000 713400 xsym               CLIMB   SC_MM22
         1 001443   000000 600000 xsid               climb   nvectors=         0

      615     6647        /*S*    SCREECH_CODE: MMH-S$MM22                                   */
      616     6648        /*S*     TYPE:SUA              */
      617     6649        /*S*   MESSAGE: Inconsistancy between MMH$GDS and MMG$SGVP.        */
      618     6650
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:91   
      619     6651        /*   Otherwise, we're going to return: */
      620     6652        /*E*   ERROR:  MMH-E$MEMLIMIT-0
      621     6653               MESSAGE: User- or installation-set memory limit reached.    */
      622     6654        /*   ...OR     */
      623     6655        /*E*   ERROR:  MMH-E$MONPP-0
      624     6656               MESSAGE: Unable currently to allocate physical page to monitor */
      625     6657        /*  .....OR     */
      626     6658        /*E* ERROR: MMH-E$BRKCTY-0
      627     6659             MESSAGE: User hit break or control Y during a memory request */
      628     6660
      629     6661        /* Now, find out just how big the segment did get before we hit limit */
      630     6662    1        IF FREEFLG OR SHARE_DS

   6662  1 001444   200035 234100                    SZN     FREEFLG,,AUTO
         1 001445   001450 604000 1                  TMI     s:6664
         1 001446   200017 234100                    SZN     SHARE_DS,,AUTO
         1 001447   001473 605000 1                  TPL     s:6667

      631     6663    2        THEN DO;

      632     6664    2             CALL MMG$SFVP_NOW(EWSQ,SEGID,TEMP2+ASIZEP-1,ASIZEP,TEMP1);

   6664  1 001450   200044 236100                    LDQ     TEMP2,,AUTO
         1 001451   200027 036100                    ADLQ    ASIZEP,,AUTO
         1 001452   000001 136007                    SBLQ    1,DL
         1 001453   200060 756100                    STQ     PSR_DESC+4,,AUTO
         1 001454   200043 630500                    EPPR0   TEMP1,,AUTO
         1 001455   200065 450500                    STP0    PSR_DESC+9,,AUTO
         1 001456   200027 631500                    EPPR1   ASIZEP,,AUTO
         1 001457   200064 451500                    STP1    PSR_DESC+8,,AUTO
         1 001460   200060 633500                    EPPR3   PSR_DESC+4,,AUTO
         1 001461   200063 453500                    STP3    PSR_DESC+7,,AUTO
         1 001462   200004 236100                    LDQ     @SEGID,,AUTO
         1 001463   200062 756100                    STQ     PSR_DESC+6,,AUTO
         1 001464   200003 236100                    LDQ     @EWSQ,,AUTO
         1 001465   200061 756100                    STQ     PSR_DESC+5,,AUTO
         1 001466   200061 630500                    EPPR0   PSR_DESC+5,,AUTO
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:92   
         1 001467   000023 631400 xsym               EPPR1   B_VECTNIL+19
         1 001470   000000 701000 xent               TSX1    MMG$SFVP_NOW
         1 001471   000000 011000                    NOP     0

      633     6665    2             ASIZEP = 0;

   6665  1 001472   200027 450100                    STZ     ASIZEP,,AUTO

      634     6666    2           END;

      635     6667    1        BSIZE = DRBOUND + ASIZEP*4096;

   6667  1 001473   200027 236100                    LDQ     ASIZEP,,AUTO
         1 001474   000014 736000                    QLS     12
         1 001475   200023 036100                    ADLQ    DRBOUND,,AUTO
         1 001476   200031 756100                    STQ     BSIZE,,AUTO

      636     6668    1        IF BSIZE = 0

   6668  1 001477   001516 601000 1                  TNZ     s:6674

      637     6669    2        THEN DO;

      638     6670    2             ELS$ -> MM$DESC.FLGS (SEGX) = ELS$ -> MM$DESC.FLGS (SEGX) & ~(%DSSHARED|%
              6670                      DSNULL);

   6670  1 001500   200015 235100                    LDA     SEGX,,AUTO
         1 001501   000001 735000                    ALS     1
         1 001502   200041 470500                    LDP0    ELS$,,AUTO
         1 001503   000000 236105                    LDQ     0,AL,PR0
         1 001504   000024 736000                    QLS     20
         1 001505   777000 376003                    ANQ     -512,DU
         1 001506   755000 376003                    ANQ     -9728,DU
         1 001507   000024 772000                    QRL     20
         1 001510   000000 676105                    ERQ     0,AL,PR0
         1 001511   177600 376007                    ANQ     65408,DL
         1 001512   000000 656105                    ERSQ    0,AL,PR0
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:93   

      639     6671    2             ELS$ -> MM$DESC.BOUND (SEGX) = 0;

   6671  1 001513   177777 236007                    LDQ     65535,DL
         1 001514   000000 356105                    ANSQ    0,AL,PR0

      640     6672    2           END;

   6672  1 001515   001535 710000 1                  TRA     s:6680

      641     6673    2        ELSE DO;

      642     6674    2             IF DRBOUND = 0

   6674  1 001516   200023 235100                    LDA     DRBOUND,,AUTO
         1 001517   001522 601000 1                  TNZ     s:6677

      643     6675    2             THEN
      644     6676    2                  BSIZE = BSIZE - 1;

   6676  1 001520   000001 336007                    LCQ     1,DL
         1 001521   200031 056100                    ASQ     BSIZE,,AUTO

      645     6677    2             ELS$ -> MM$DESC.BASE (SEGX) = DRBASE;

   6677  1 001522   200015 236100                    LDQ     SEGX,,AUTO
         1 001523   000001 736000                    QLS     1
         1 001524   200041 470500                    LDP0    ELS$,,AUTO
         1 001525   200022 235100                    LDA     DRBASE,,AUTO
         1 001526   000001 755106                    STA     1,QL,PR0

      646     6678    2             ELS$ -> MM$DESC.BOUND (SEGX) = BSIZE;

   6678  1 001527   000000 620006                    EAX0    0,QL
         1 001530   200031 236100                    LDQ     BSIZE,,AUTO
         1 001531   000020 736000                    QLS     16
         1 001532   000000 676110                    ERQ     0,X0,PR0
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:94   
         1 001533   000034 376000 xsym               ANQ     B_VECTNIL+28
         1 001534   000000 656110                    ERSQ    0,X0,PR0

      647     6679    2           END;

      648     6680    1        ALTRETURN;                         /* We had to truncate desired wsize   */

   6680  1 001535   000000 702200 xent               TSX2  ! X66_AALT

      649     6681
      650     6682
      651     6683        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:95   
      652     6684        /*F*   NAME:   MMH$FDS                                             */
      653     6685        /*F*   PURPOSE: To free space from a previously allocated dynamic  */
      654     6686        /*,*           data segment.                                       */
      655     6687    1   MMH$FDS: ENTRY(EWSQ,SEGID,REQSIZE,ERR) ALTRET;

   6687  1 001536   000000 700200 xent  MMH$FDS      TSX0  ! X66_AUTO_N
         1 001537   000066 000010                    ZERO    54,8

      656     6688
      657     6689    1        CALL SETUP ALTRET (ERR_OUT);

   6689  1 001540   002217 701000 1                  TSX1    SETUP
         1 001541   002563 702000 1                  TSX2    ERR_OUT

      658     6690
      659     6691    1        IF BSIZE > DRBOUND + 1

   6691  1 001542   200023 236100                    LDQ     DRBOUND,,AUTO
         1 001543   000001 036007                    ADLQ    1,DL
         1 001544   200031 116100                    CMPQ    BSIZE,,AUTO
         1 001545   001560 605000 1                  TPL     s:6701

      660     6692    2        THEN DO;                           /* Do if size  > size  of seg         */

      661     6693        /*E*   ERROR:  MMH-E$BIGFREE-0
      662     6694               MESSAGE: Attempt to free more space than is in data segment. */
      663     6695    2             ERR = %E$BIGFREE;

   6695  1 001546   001136 235007                    LDA     606,DL
         1 001547   200006 470500                    LDP0    @ERR,,AUTO
         1 001550   000000 755100                    STA     0,,PR0

      664     6696    2             IF DRBOUND = 0 THEN ALTRETURN; /* Seg is null                   */

   6696  1 001551   200023 235100                    LDA     DRBOUND,,AUTO
         1 001552   001554 601000 1                  TNZ     s:6697

PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:96   
   6696  1 001553   000000 702200 xent               TSX2  ! X66_AALT

      665     6697    2             TRUNCFLG = %TRUE;             /* Set truncation flag                */

   6697  1 001554   400000 236003                    LDQ     -131072,DU
         1 001555   200034 756100                    STQ     TRUNCFLG,,AUTO

      666     6698    2             BSIZE = DRBOUND + 1;          /* Max size we can actually free      */

   6698  1 001556   000001 035007                    ADLA    1,DL
         1 001557   200031 755100                    STA     BSIZE,,AUTO

      667     6699    2           END;

      668     6700
      669     6701    1        CURTOP = (DRBASE+DRBOUND)/4096;    /* Current top page in seg            */

   6701  1 001560   200022 236100                    LDQ     DRBASE,,AUTO
         1 001561   200023 036100                    ADLQ    DRBOUND,,AUTO
         1 001562   010000 506007                    DIV     4096,DL
         1 001563   200025 756100                    STQ     CURTOP,,AUTO

      670     6702    1        NEWTOP = DRBASE+DRBOUND-BSIZE;     /* New byte addr of top of seg        */

   6702  1 001564   200022 236100                    LDQ     DRBASE,,AUTO
         1 001565   200023 036100                    ADLQ    DRBOUND,,AUTO
         1 001566   200031 136100                    SBLQ    BSIZE,,AUTO
         1 001567   200024 756100                    STQ     NEWTOP,,AUTO

      671     6703        /* Now get # of pages by which to relocate all segs above current one */
      672     6704    1        ASIZEP = CURTOP - NEWTOP/4096;

   6704  1 001570   010000 506007                    DIV     4096,DL
         1 001571   200060 756100                    STQ     PSR_DESC+4,,AUTO
         1 001572   200025 236100                    LDQ     CURTOP,,AUTO
         1 001573   200060 136100                    SBLQ    PSR_DESC+4,,AUTO
         1 001574   200027 756100                    STQ     ASIZEP,,AUTO
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:97   

      673     6705    1        ASIZE = ASIZEP*4096;

   6705  1 001575   200027 235100                    LDA     ASIZEP,,AUTO
         1 001576   000014 735000                    ALS     12
         1 001577   200026 755100                    STA     ASIZE,,AUTO

      674     6706    1        IF ASIZEP > 0

   6706  1 001600   000000 116003                    CMPQ    0,DU
         1 001601   002110 604400 1                  TMOZ    s:6800

      675     6707    2        THEN DO;                      /* Prepare to relocate segs to fill in     */

      676     6708                                           /* The hole left by freeing up seg space   */
      677     6709        /*   Get current segment-relative high page number:   */
      678     6710    2             TEMP3 = (MOD(DRBASE,4096) + DRBOUND)/4096;

   6710  1 001602   200022 236100                    LDQ     DRBASE,,AUTO
         1 001603   010000 506007                    DIV     4096,DL
         1 001604   000044 733000                    LRS     36
         1 001605   200023 036100                    ADLQ    DRBOUND,,AUTO
         1 001606   010000 506007                    DIV     4096,DL
         1 001607   200045 756100                    STQ     TEMP3,,AUTO

      679     6711    2             TEMPB = ELS$ -> MM$DESC.FLGS (SEGX);

   6711  1 001610   200015 235100                    LDA     SEGX,,AUTO
         1 001611   000001 735000                    ALS     1
         1 001612   200041 470500                    LDP0    ELS$,,AUTO
         1 001613   000000 236105                    LDQ     0,AL,PR0
         1 001614   000024 736000                    QLS     20
         1 001615   777000 376003                    ANQ     -512,DU
         1 001616   200047 756100                    STQ     TEMPB,,AUTO

      680     6712    2             IF NOT (TEMPB & %DSSHARED)

PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:98   
   6712  1 001617   200047 236100                    LDQ     TEMPB,,AUTO
         1 001620   777700 376003                    ANQ     -64,DU
         1 001621   020000 376003                    ANQ     8192,DU
         1 001622   001641 601000 1                  TNZ     s:6717

      681     6713    2             THEN
      682     6714    2                  CALL MMG$SFVP(EWSQ,SEGID,TEMP3,ASIZEP,ERR) ALTRET(BADFVP);

   6714  1 001623   200006 236100                    LDQ     @ERR,,AUTO
         1 001624   200064 756100                    STQ     PSR_DESC+8,,AUTO
         1 001625   200027 631500                    EPPR1   ASIZEP,,AUTO
         1 001626   200063 451500                    STP1    PSR_DESC+7,,AUTO
         1 001627   200045 633500                    EPPR3   TEMP3,,AUTO
         1 001630   200062 453500                    STP3    PSR_DESC+6,,AUTO
         1 001631   200004 236100                    LDQ     @SEGID,,AUTO
         1 001632   200003 235100                    LDA     @EWSQ,,AUTO
         1 001633   200060 757100                    STAQ    PSR_DESC+4,,AUTO
         1 001634   200060 630500                    EPPR0   PSR_DESC+4,,AUTO
         1 001635   000023 631400 xsym               EPPR1   B_VECTNIL+19
         1 001636   000000 701000 xent               TSX1    MMG$SFVP
         1 001637   002210 702000 1                  TSX2    BADFVP
         1 001640   001726 710000 1                  TRA     s:6736

      683     6715    3             ELSE DO;

      684     6716                       %FINDMAP (WSQ = EWSQ , P$ = MAP$);

   6717  1 001641   200003 471500                    LDP1    @EWSQ,,AUTO
         1 001642   100000 720100                    LXL0    0,,PR1
         1 001643   000000 236010 xsym               LDQ     MM_PTPTRS$,X0
         1 001644   200042 756100                    STQ     MAP$,,AUTO

      685     6719    3                  TEMP1 = NEWTOP/4096;

   6719  1 001645   200024 236100                    LDQ     NEWTOP,,AUTO
         1 001646   010000 506007                    DIV     4096,DL
         1 001647   200043 756100                    STQ     TEMP1,,AUTO
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:99   

      686     6720    3                  B$JIT.PSEUDOPGS = B$JIT.PSEUDOPGS - ASIZEP;

   6720  1 001650   000000 473400 xsym               LDP3    B$JIT$
         1 001651   300212 236100                    LDQ     138,,PR3
         1 001652   777777 376007                    ANQ     -1,DL
         1 001653   200027 136100                    SBLQ    ASIZEP,,AUTO
         1 001654   000000 620006                    EAX0    0,QL
         1 001655   300212 440100                    SXL0    138,,PR3

      687     6721    4                  DO I = 1 TO ASIZEP;

   6721  1 001656   000001 235007                    LDA     1,DL
         1 001657   200037 755100                    STA     I,,AUTO
         1 001660   001723 710000 1                  TRA     s:6734+1

      688     6722    4                       TEMP1 = TEMP1 + 1;

   6722  1 001661   200043 054100                    AOS     TEMP1,,AUTO

      689     6723    4                       MAP$->B$PAGE.WRD (TEMP1) = BITBIN(MM_FPMC);

   6723  1 001662   200042 470500                    LDP0    MAP$,,AUTO
         1 001663   200043 720100                    LXL0    TEMP1,,AUTO
         1 001664   000000 235000 xsym               LDA     MM_FPMC
         1 001665   000000 755110                    STA     0,X0,PR0

      690     6724    5                       DO CASE(EWSQ);      /* Update correct JIT DS field */

   6724  1 001666   200003 471500                    LDP1    @EWSQ,,AUTO
         1 001667   100000 235100                    LDA     0,,PR1
         1 001670   000004 135007                    SBLA    4,DL
         1 001671   000003 115007                    CMPA    3,DL
         1 001672   001674 602005 1                  TNC     s:6724+6,AL
         1 001673   001716 710000 1                  TRA     s:6732
         1 001674   001677 710000 1                  TRA     s:6726
         1 001675   001704 710000 1                  TRA     s:6728
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:100  
         1 001676   001711 710000 1                  TRA     s:6730

      691     6725    5                       CASE(%CPWSQ);       /* Command processor           */

      692     6726    5                          B$JIT.PCC = B$JIT.PCC - 1;

   6726  1 001677   000000 473400 xsym               LDP3    B$JIT$
         1 001700   300202 720100                    LXL0    130,,PR3
         1 001701   777777 621010                    EAX1    -1,X0
         1 001702   300202 441100                    SXL1    130,,PR3
         1 001703   001722 710000 1                  TRA     s:6734

      693     6727    5                       CASE(%DBWSQ);       /* Debugger                    */

      694     6728    5                          B$JIT.PCDDS = B$JIT.PCDDS - 1;

   6728  1 001704   000000 473400 xsym               LDP3    B$JIT$
         1 001705   300213 720100                    LXL0    139,,PR3
         1 001706   777777 621010                    EAX1    -1,X0
         1 001707   300213 441100                    SXL1    139,,PR3
         1 001710   001722 710000 1                  TRA     s:6734

      695     6729    5                       CASE(%ASLWSQ);      /* Alternate shared library    */

      696     6730    5                          B$JIT.PCADS = B$JIT.PCADS - 1;

   6730  1 001711   000000 473400 xsym               LDP3    B$JIT$
         1 001712   300214 220100                    LDX0    140,,PR3
         1 001713   777777 621010                    EAX1    -1,X0
         1 001714   300214 741100                    STX1    140,,PR3
         1 001715   001722 710000 1                  TRA     s:6734

      697     6731    5                       CASE(ELSE);         /* User or monitor             */

      698     6732    5                          B$JIT.PCDS = B$JIT.PCDS - 1;

   6732  1 001716   000000 473400 xsym               LDP3    B$JIT$
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:101  
         1 001717   300202 220100                    LDX0    130,,PR3
         1 001720   777777 621010                    EAX1    -1,X0
         1 001721   300202 741100                    STX1    130,,PR3

      699     6733    5                       END;

      700     6734    4                     END;

   6734  1 001722   200037 054100                    AOS     I,,AUTO
         1 001723   200037 236100                    LDQ     I,,AUTO
         1 001724   200027 116100                    CMPQ    ASIZEP,,AUTO
         1 001725   001661 604400 1                  TMOZ    s:6722

      701     6735    3                END;

      702     6736    2             IF EWSQ ~= %MONWSQ THEN

   6736  1 001726   200003 470500                    LDP0    @EWSQ,,AUTO
         1 001727   000000 235100                    LDA     0,,PR0
         1 001730   000001 115007                    CMPA    1,DL
         1 001731   002050 600000 1                  TZE     s:6780

      703     6737    3             DO;

      704     6738
      705     6739    3                  CALL ADJ_PS1;

   6739  1 001732   002364 701000 1                  TSX1    ADJ_PS1
         1 001733   000000 011000                    NOP     0

      706     6740
      707     6741    4                  DO I = SEGX+1 TO %MAXDATASID;

   6741  1 001734   200015 235100                    LDA     SEGX,,AUTO
         1 001735   000001 035007                    ADLA    1,DL
         1 001736   200037 755100                    STA     I,,AUTO
         1 001737   002025 710000 1                  TRA     s:6766+1
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:102  

      708     6742    4                       TEMP2 = ELS$ -> MM$DESC.BASE (I);

   6742  1 001740   200037 235100                    LDA     I,,AUTO
         1 001741   000001 735000                    ALS     1
         1 001742   200041 470500                    LDP0    ELS$,,AUTO
         1 001743   000001 235105                    LDA     1,AL,PR0
         1 001744   200044 755100                    STA     TEMP2,,AUTO

      709     6743    4                       TEMP1 = TEMP2/4096; /* Make it page #                   */

   6743  1 001745   200044 236100                    LDQ     TEMP2,,AUTO
         1 001746   010000 506007                    DIV     4096,DL
         1 001747   200043 756100                    STQ     TEMP1,,AUTO

      710     6744    4                       TEMP3 = ELS$ -> MM$DESC.BOUND (I);

   6744  1 001750   200037 235100                    LDA     I,,AUTO
         1 001751   000001 735000                    ALS     1
         1 001752   000000 236105                    LDQ     0,AL,PR0
         1 001753   000020 772000                    QRL     16
         1 001754   200045 756100                    STQ     TEMP3,,AUTO

      711     6745    4                       TEMP3 = (TEMP3 + 4095)/4096 - 1;

   6745  1 001755   007777 036007                    ADLQ    4095,DL
         1 001756   010000 506007                    DIV     4096,DL
         1 001757   000001 136007                    SBLQ    1,DL
         1 001760   200045 756100                    STQ     TEMP3,,AUTO

      712     6746
      713     6747
      714     6748    4                       TEMP4 = - ASIZE;

   6748  1 001761   000000 235003                    LDA     0,DU
         1 001762   200026 135100                    SBLA    ASIZE,,AUTO
         1 001763   200046 755100                    STA     TEMP4,,AUTO
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:103  

      715     6749    4                       CALL ADJ_PS2;

   6749  1 001764   002424 701000 1                  TSX1    ADJ_PS2
         1 001765   000000 011000                    NOP     0

      716     6750
      717     6751    4                       ELS$ -> MM$DESC.BASE (I) = TEMP2 - ASIZE;

   6751  1 001766   200037 235100                    LDA     I,,AUTO
         1 001767   000001 735000                    ALS     1
         1 001770   200044 236100                    LDQ     TEMP2,,AUTO
         1 001771   200026 136100                    SBLQ    ASIZE,,AUTO
         1 001772   200041 470500                    LDP0    ELS$,,AUTO
         1 001773   000001 756105                    STQ     1,AL,PR0

      718     6752    5                       DO J = 0 TO TEMP3;  /* Re-map moved segs                 */

   6752  1 001774   200040 450100                    STZ     J,,AUTO
         1 001775   002021 710000 1                  TRA     s:6765+1

      719     6753    5                            TEMP2 = TEMP1 - ASIZEP; /* New vp to which it moved   */

   6753  1 001776   200043 236100                    LDQ     TEMP1,,AUTO
         1 001777   200027 136100                    SBLQ    ASIZEP,,AUTO
         1 002000   200044 756100                    STQ     TEMP2,,AUTO

      720     6754
      721     6755        /*S*    SCREECH_CODE: MMH-S$MM23                                   */
      722     6756        /*S*   TYPE:   SCREECH                                             */
      723     6757        /*S*   MESSAGE: Inconsistancy between MMH$FDS and MMG$SFVP.        */
      724     6758    5                            IF MAP$->B$MAP.RPN(TEMP2) ~= MM_FPMC.RPN

   6758  1 002001   200042 470500                    LDP0    MAP$,,AUTO
         1 002002   000000 220106                    LDX0    0,QL,PR0
         1 002003   000000 100000 xsym               CMPX0   MM_FPMC
         1 002004   002007 600000 1                  TZE     s:6762
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:104  

      725     6759    5                            THEN
      726     6760    5                                 CALL SC_MM23;

   6760  1 002005   000000 713400 xsym               CLIMB   SC_MM23
         1 002006   000000 600000 xsid               climb   nvectors=         0

      727     6761
      728     6762    5                            MAP$->B$PAGE.WRD(TEMP2) = MAP$->B$PAGE.WRD(TEMP1);

   6762  1 002007   200042 470500                    LDP0    MAP$,,AUTO
         1 002010   200043 720100                    LXL0    TEMP1,,AUTO
         1 002011   200044 721100                    LXL1    TEMP2,,AUTO
         1 002012   000000 235110                    LDA     0,X0,PR0
         1 002013   000000 755111                    STA     0,X1,PR0

      729     6763    5                            MAP$->B$PAGE.WRD(TEMP1) = BITBIN(MM_FPMC);

   6763  1 002014   200043 720100                    LXL0    TEMP1,,AUTO
         1 002015   000000 235000 xsym               LDA     MM_FPMC
         1 002016   000000 755110                    STA     0,X0,PR0

      730     6764    5                            TEMP1 = TEMP1 + 1; /* Nxt vp to move to new location  */

   6764  1 002017   200043 054100                    AOS     TEMP1,,AUTO

      731     6765    5                          END;

   6765  1 002020   200040 054100                    AOS     J,,AUTO
         1 002021   200040 236100                    LDQ     J,,AUTO
         1 002022   200045 116100                    CMPQ    TEMP3,,AUTO
         1 002023   001776 604400 1                  TMOZ    s:6753

      732     6766    4                     END;

   6766  1 002024   200037 054100                    AOS     I,,AUTO
         1 002025   200037 235100                    LDA     I,,AUTO
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:105  
         1 002026   000013 115007                    CMPA    11,DL
         1 002027   001740 604400 1                  TMOZ    s:6742

      733     6767
      734     6768
      735     6769    3                  CALL SPOIL_DR;

   6769  1 002030   002502 701000 1                  TSX1    SPOIL_DR
         1 002031   000000 011000                    NOP     0

      736     6770
      737     6771
      738     6772    3                  CALL HFC$ASSOCCLR(EWSQ,%DBDSEGLO,16384); /*MAX Dense PT*/

   6772  1 002032   000002 236000 2                  LDQ     2
         1 002033   200062 756100                    STQ     PSR_DESC+6,,AUTO
         1 002034   000003 236000 2                  LDQ     3
         1 002035   200003 235100                    LDA     @EWSQ,,AUTO
         1 002036   200060 757100                    STAQ    PSR_DESC+4,,AUTO
         1 002037   200060 630500                    EPPR0   PSR_DESC+4,,AUTO
         1 002040   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 002041   000000 701000 xent               TSX1    HFC$ASSOCCLR
         1 002042   000000 011000                    NOP     0

      739     6773                       %UNLOCK (G=MM_LOCK);

   6774  1 002043   000004 630400 2                  EPPR0   4
         1 002044   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 002045   000000 701000 xent               TSX1    HFC$UNLOCK
         1 002046   000000 011000                    NOP     0

      740     6776    3                END;

   6776  1 002047   002110 710000 1                  TRA     s:6800

      741     6777
      742     6778        /* If this is the monitor, and there are slave cpu's, fix up their */
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:106  
      743     6779        /* page tables too.                                                */
      744     6780    2             ELSE IF S_NSCPU > 0

   6780  1 002050   000000 236000 xsym               LDQ     S_NSCPU
         1 002051   002110 600000 1                  TZE     s:6800

      745     6781    3                  THEN DO;

      746     6782        /* Get page # of 1st page freed by MMG$SFVP */
      747     6783    3                       TEMP3 = TEMP3 + DRBASE/4096;

   6783  1 002052   200022 236100                    LDQ     DRBASE,,AUTO
         1 002053   010000 506007                    DIV     4096,DL
         1 002054   200045 036100                    ADLQ    TEMP3,,AUTO
         1 002055   200045 756100                    STQ     TEMP3,,AUTO

      748     6784    3                       TEMP1 = TEMP3 - ASIZEP + 1;

   6784  1 002056   200027 136100                    SBLQ    ASIZEP,,AUTO
         1 002057   000001 036007                    ADLQ    1,DL
         1 002060   200043 756100                    STQ     TEMP1,,AUTO

      749     6785    3                       PGT$ = B$MASTPT$;

   6785  1 002061   000000 236000 xsym               LDQ     B$MASTPT$
         1 002062   200050 756100                    STQ     PGT$,,AUTO

      750     6786    4                       DO I = 0 TO S_NSCPU;

   6786  1 002063   200037 450100                    STZ     I,,AUTO
         1 002064   002104 710000 1                  TRA     s:6791+1

      751     6787    5                            DO J = TEMP1 TO TEMP3;

   6787  1 002065   200043 235100                    LDA     TEMP1,,AUTO
         1 002066   200040 755100                    STA     J,,AUTO
         1 002067   002075 710000 1                  TRA     s:6789+1
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:107  

      752     6788    5                                 PGT$->B$PAGE.WRD(J) = BITBIN(MM_FPMC);

   6788  1 002070   200050 470500                    LDP0    PGT$,,AUTO
         1 002071   200040 720100                    LXL0    J,,AUTO
         1 002072   000000 235000 xsym               LDA     MM_FPMC
         1 002073   000000 755110                    STA     0,X0,PR0

      753     6789    5                               END;

   6789  1 002074   200040 054100                    AOS     J,,AUTO
         1 002075   200040 236100                    LDQ     J,,AUTO
         1 002076   200045 116100                    CMPQ    TEMP3,,AUTO
         1 002077   002070 604400 1                  TMOZ    s:6788

      754     6790    4                            PGTX = PGTX + 1;

   6790  1 002100   200050 235100                    LDA     PGT$,,AUTO
         1 002101   000001 035007                    ADLA    1,DL
         1 002102   200050 755100                    STA     PGT$,,AUTO

      755     6791    4                          END;

   6791  1 002103   200037 054100                    AOS     I,,AUTO
         1 002104   000000 236000 xsym               LDQ     S_NSCPU
         1 002105   002065 604000 1                  TMI     s:6787
         1 002106   200037 116100                    CMPQ    I,,AUTO
         1 002107   002065 605000 1                  TPL     s:6787

      756     6792    3                     END;

      757     6793    2           END;

      758     6794
      759     6795        /* The segment in question has now been shrunk, and all following  */
      760     6796        /* Segments relocated if the shrinking segment shrank past a page  */
      761     6797        /* Boundary. All that remains is to correct the bound field for the*/
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:108  
      762     6798        /* Shrunken segment, and to set its descriptor null if thewsize    */
      763     6799        /* Went to zero.                                                   */
      764     6800    1        IF BSIZE < DRBOUND

   6800  1 002110   200031 236100                    LDQ     BSIZE,,AUTO
         1 002111   200023 116100                    CMPQ    DRBOUND,,AUTO
         1 002112   002125 605000 1                  TPL     s:6805

      765     6801    2        THEN DO;                           /* Size  < size  of seg               */

      766     6802    2             ELS$ -> MM$DESC.BOUND (SEGX) = DRBOUND - BSIZE;

   6802  1 002113   200015 235100                    LDA     SEGX,,AUTO
         1 002114   000001 735000                    ALS     1
         1 002115   200023 236100                    LDQ     DRBOUND,,AUTO
         1 002116   200031 136100                    SBLQ    BSIZE,,AUTO
         1 002117   200041 470500                    LDP0    ELS$,,AUTO
         1 002120   000020 736000                    QLS     16
         1 002121   000000 676105                    ERQ     0,AL,PR0
         1 002122   000034 376000 xsym               ANQ     B_VECTNIL+28
         1 002123   000000 656105                    ERSQ    0,AL,PR0

      767     6803    2           END;

   6803  1 002124   002146 710000 1                  TRA     s:6813

      768     6804    2        ELSE DO;                      /* Size  = size  of seg (seg now null)     */

      769     6805    2            ELS$ -> MM$DESC.FLGS (SEGX) = (ELS$ -> MM$DESC.FLGS (SEGX) & ~(%DSSHARED|%
              6805                      DSNULL|%DSEXEC))|%MM_DSWRITE#;

   6805  1 002125   200015 235100                    LDA     SEGX,,AUTO
         1 002126   000001 735000                    ALS     1
         1 002127   200041 470500                    LDP0    ELS$,,AUTO
         1 002130   000000 236105                    LDQ     0,AL,PR0
         1 002131   000024 736000                    QLS     20
         1 002132   777000 376003                    ANQ     -512,DU
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:109  
         1 002133   745000 376003                    ANQ     -13824,DU
         1 002134   000022 772000                    QRL     18
         1 002135   000000 620006                    EAX0    0,QL
         1 002136   600000 260003                    ORX0    -65536,DU
         1 002137   000000 636010                    EAQ     0,X0
         1 002140   000024 772000                    QRL     20
         1 002141   000000 676105                    ERQ     0,AL,PR0
         1 002142   177600 376007                    ANQ     65408,DL
         1 002143   000000 656105                    ERSQ    0,AL,PR0

      770     6806        /* Reset all of the access and sharability info... */
      771     6807    2             ELS$ -> MM$DESC.BOUND (SEGX) = 0;

   6807  1 002144   177777 236007                    LDQ     65535,DL
         1 002145   000000 356105                    ANSQ    0,AL,PR0

      772     6808    2           END;

      773     6809
      774     6810        /*   Add any pages that were reserved for a monitor data
      775     6811             segement TO MM_HELD */
      776     6812
      777     6813    1        IF EWSQ = %MONWSQ

   6813  1 002146   200003 471500                    LDP1    @EWSQ,,AUTO
         1 002147   100000 235100                    LDA     0,,PR1
         1 002150   000001 115007                    CMPA    1,DL
         1 002151   002204 601000 1                  TNZ     s:6828

      778     6814    2        THEN DO;

      779     6815    2             CALL MMA$LOCKBP;

   6815  1 002152   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 002153   000000 701000 xent               TSX1    MMA$LOCKBP
         1 002154   000000 011000                    NOP     0

PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:110  
      780     6816    2             MM_HELD = MM_HELD + MINIMUM (ASIZEP,

   6816  1 002155   200023 236100                    LDQ     DRBOUND,,AUTO
         1 002156   007777 036007                    ADLQ    4095,DL
         1 002157   010000 506007                    DIV     4096,DL
         1 002160   200027 136100                    SBLQ    ASIZEP,,AUTO
         1 002161   200060 756100                    STQ     PSR_DESC+4,,AUTO
         1 002162   200015 720100                    LXL0    SEGX,,AUTO
         1 002163   777774 236010 xsym               LDQ     MM_RDS-4,X0
         1 002164   200060 136100                    SBLQ    PSR_DESC+4,,AUTO
         1 002165   000000 116003                    CMPQ    0,DU
         1 002166   002170 605000 1                  TPL     s:6816+11
         1 002167   000000 236003                    LDQ     0,DU
         1 002170   200027 116100                    CMPQ    ASIZEP,,AUTO
         1 002171   002173 604400 1                  TMOZ    s:6816+14
         1 002172   200027 236100                    LDQ     ASIZEP,,AUTO
         1 002173   000000 036000 xsym               ADLQ    MM_HELD
         1 002174   000000 756000 xsym               STQ     MM_HELD

      781     6817    2                  MAXIMUM(0,MM_RDS(SEGX-%LODATASID)-((DRBOUND+4095)/4096-ASIZEP)));
      782     6818             /*   TEMP2 is number of pages before this get
      783     6819                  MM_RDS(SEGX-%LODATASID) is pages reserved for this segment
      784     6820                  ASIZEP is the number of pages the were obtained
      785     6821             */
      786     6822    2             CALL MMA$UNLOCKBP;

   6822  1 002175   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 002176   000000 701000 xent               TSX1    MMA$UNLOCKBP
         1 002177   000000 011000                    NOP     0

      787     6823    2             IF TRUNCFLG

   6823  1 002200   200034 234100                    SZN     TRUNCFLG,,AUTO
         1 002201   002203 605000 1                  TPL     s:6826

      788     6824
      789     6825    2             THEN ALTRETURN;               /* We had to truncate desired wsize   */
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:111  

   6825  1 002202   000000 702200 xent               TSX2  ! X66_AALT

      790     6826    2             ELSE RETURN;                  /* ...WE didn't                       */

   6826  1 002203   000000 702200 xent               TSX2  ! X66_ARET

      791     6827    2           END;
      792     6828    1        IF TRUNCFLG

   6828  1 002204   200034 234100                    SZN     TRUNCFLG,,AUTO
         1 002205   002207 605000 1                  TPL     s:6832

      793     6829    1        THEN
      794     6830    1             ALTRETURN;

   6830  1 002206   000000 702200 xent               TSX2  ! X66_AALT

      795     6831    1        ELSE
      796     6832    1             RETURN;

   6832  1 002207   000000 702200 xent               TSX2  ! X66_ARET

      797     6833
      798     6834
      799     6835        /* Screech if we got the alternate return from MMG$SFVP - it       */
      800     6836        /* Means that we tried to free more pages than are in the seg, and */
      801     6837        /* If all this math is correct, that should never happen.          */
      802     6838    1   BADFVP: IF ERR ~= %E$IOACTIVE THEN CALL SC_MM23;

   6838  1 002210   200006 470500       BADFVP       LDP0    @ERR,,AUTO
         1 002211   000000 235100                    LDA     0,,PR0
         1 002212   001160 115007                    CMPA    624,DL
         1 002213   002216 600000 1                  TZE     s:6839

   6838  1 002214   000000 713400 xsym               CLIMB   SC_MM23
         1 002215   000000 600000 xsid               climb   nvectors=         0
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:112  

      803     6839    1        ALTRETURN;

   6839  1 002216   000000 702200 xent               TSX2  ! X66_AALT

      804     6840
      805     6841        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:113  
      806     6842
      807     6843    1   SETUP: PROC ALTRET;

   6843  1 002217   200056 741300       SETUP        STX1  ! PSR_DESC+2,,AUTO

      808     6844    2        IF (EWSQ = %MONWSQ)

   6844  1 002220   200003 470500                    LDP0    @EWSQ,,AUTO
         1 002221   000000 235100                    LDA     0,,PR0
         1 002222   000001 115007                    CMPA    1,DL
         1 002223   002227 601000 1                  TNZ     s:6848

      809     6845    2        THEN
      810     6846    2             CALL SSS$BLOCKM;

   6846  1 002224   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 002225   000000 701000 xent               TSX1    SSS$BLOCKM
         1 002226   000000 011000                    NOP     0

      811     6847
      812     6848    2        FREEFLG = F_WSIZE.FREEFLG;

   6848  1 002227   200005 470500                    LDP0    @REQSIZE,,AUTO
         1 002230   000000 236100                    LDQ     0,,PR0
         1 002231   400000 376003                    ANQ     -131072,DU
         1 002232   200035 756100                    STQ     FREEFLG,,AUTO

      813     6849    2        VIRTONLY = F_WSIZE.VIRTONLY;

   6849  1 002233   000000 236100                    LDQ     0,,PR0
         1 002234   000001 736000                    QLS     1
         1 002235   400000 376003                    ANQ     -131072,DU
         1 002236   200036 756100                    STQ     VIRTONLY,,AUTO

      814     6850    2        WSIZE = F_WSIZE.WORDS#;

   6850  1 002237   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:114  
         1 002240   000017 376000 2                  ANQ     15
         1 002241   200013 756100                    STQ     WSIZE,,AUTO

      815     6851
      816     6852        /*S*    SCREECH_CODE: MMH-S$MM24                                   */
      817     6853        /*S*   TYPE:   SCREECH                                             */
      818     6854        /*S*   MESSAGE: Illegal data segment  SIZE specification passed to MMH */
      819     6855    2        IF WSIZE > 256*1024

   6855  1 002242   000020 116000 2                  CMPQ    16
         1 002243   002246 602000 1                  TNC     s:6861

      820     6856    2        THEN
      821     6857    2             CALL SC_MM24;

   6857  1 002244   000000 713400 xsym               CLIMB   SC_MM24
         1 002245   000000 600000 xsid               climb   nvectors=         0

      822     6858
      823     6859
      824     6860        /* Round request up to a dblwd, cause of NSA problems */
      825     6861    2        IF B_WSIZE.ODD_BIT

   6861  1 002246   200005 470500                    LDP0    @REQSIZE,,AUTO
         1 002247   000000 236100                    LDQ     0,,PR0
         1 002250   000001 316007                    CANQ    1,DL
         1 002251   002255 600000 1                  TZE     s:6865

      826     6862    2        THEN
      827     6863    2             WSIZE = WSIZE + 1;

   6863  1 002252   200013 235100                    LDA     WSIZE,,AUTO
         1 002253   000001 035007                    ADLA    1,DL
         1 002254   200013 755100                    STA     WSIZE,,AUTO

      828     6864
      829     6865    2        BSEGX = BINBIT(SEGID,12);
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:115  

   6865  1 002255   200004 471500                    LDP1    @SEGID,,AUTO
         1 002256   100000 236100                    LDQ     0,,PR1
         1 002257   000030 736000                    QLS     24
         1 002260   200014 756100                    STQ     BSEGX,,AUTO

      830     6866    2        SEGX = MOD(SEGID,1024);

   6866  1 002261   100000 236100                    LDQ     0,,PR1
         1 002262   001777 376007                    ANQ     1023,DL
         1 002263   200015 756100                    STQ     SEGX,,AUTO

      831     6867
      832     6868    2        IF (SEGX <= %HIFIXEDSID) OR (SEGX > %MAXDATASID)

   6868  1 002264   000004 116007                    CMPQ    4,DL
         1 002265   002270 602000 1                  TNC     s:6872
         1 002266   000014 116007                    CMPQ    12,DL
         1 002267   002275 602000 1                  TNC     s:6876

      833     6869    3        THEN DO;

      834     6870        /*E*   ERROR:  MMH-E$BADSEGID-0
      835     6871               MESSAGE: That SEGID is not a valid data segment SEGID.      */
      836     6872    3             ERR = %E$BADSEGID;            /* Bad segid passed to us             */

   6872  1 002270   001132 235007                    LDA     602,DL
         1 002271   200006 473500                    LDP3    @ERR,,AUTO
         1 002272   300000 755100                    STA     0,,PR3

      837     6873    3             ALTRETURN;

   6873  1 002273   200056 221300                    LDX1  ! PSR_DESC+2,,AUTO
         1 002274   000000 702211                    TSX2  ! 0,X1

      838     6874    3           END;
      839     6875
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:116  
      840     6876    2        TRUNCFLG = %FALSE;

   6876  1 002275   200034 450100                    STZ     TRUNCFLG,,AUTO

      841     6877             %FINDLS (WSQ = EWSQ , P$ = ELS$);

   6878  1 002276   200003 473500                    LDP3    @EWSQ,,AUTO
         1 002277   300000 720100                    LXL0    0,,PR3
         1 002300   000000 236010 xsym               LDQ     MM_LSPTRS$,X0
         1 002301   200041 756100                    STQ     ELS$,,AUTO

      842     6880    2        DRBASE = ELS$ -> MM$DESC.BASE (SEGX);

   6880  1 002302   200015 235100                    LDA     SEGX,,AUTO
         1 002303   000001 735000                    ALS     1
         1 002304   200041 474500                    LDP4    ELS$,,AUTO
         1 002305   400001 235105                    LDA     1,AL,PR4
         1 002306   200022 755100                    STA     DRBASE,,AUTO

      843     6881    2        DRBOUND = ELS$ -> MM$DESC.BOUND (SEGX);

   6881  1 002307   200015 235100                    LDA     SEGX,,AUTO
         1 002310   000001 735000                    ALS     1
         1 002311   400000 236105                    LDQ     0,AL,PR4
         1 002312   000020 772000                    QRL     16
         1 002313   200023 756100                    STQ     DRBOUND,,AUTO

      844     6882    2        BSIZE = WSIZE*4;                   /* Size  to add to bound              */

   6882  1 002314   200013 235100                    LDA     WSIZE,,AUTO
         1 002315   000002 735000                    ALS     2
         1 002316   200031 755100                    STA     BSIZE,,AUTO

      845     6883    3        DO CASE(EWSQ);                /* Get correct upper bound of data area    */

   6883  1 002317   300000 235100                    LDA     0,,PR3
         1 002320   000004 135007                    SBLA    4,DL
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:117  
         1 002321   000003 115007                    CMPA    3,DL
         1 002322   002324 602005 1                  TNC     s:6883+5,AL
         1 002323   002346 710000 1                  TRA     s:6894
         1 002324   002327 710000 1                  TRA     s:6885
         1 002325   002334 710000 1                  TRA     s:6888
         1 002326   002341 710000 1                  TRA     s:6891

      846     6884    3        CASE(%CPWSQ);                      /* Command processor                  */

      847     6885    3           DATAHI = %CPDSEGHI + 1;

   6885  1 002327   001050 235007                    LDA     552,DL
         1 002330   200032 755100                    STA     DATAHI,,AUTO

      848     6886    3           DATALO = %CPDSEGLO;

   6886  1 002331   001010 235007                    LDA     520,DL
         1 002332   200033 755100                    STA     DATALO,,AUTO
         1 002333   002355 710000 1                  TRA     s:6899

      849     6887    3        CASE(%DBWSQ);                      /* Debugger                           */

      850     6888    3           DATAHI = %DBDSEGHI + 1;

   6888  1 002334   000610 235007                    LDA     392,DL
         1 002335   200032 755100                    STA     DATAHI,,AUTO

      851     6889    3           DATALO = %DBDSEGLO;

   6889  1 002336   000510 235007                    LDA     328,DL
         1 002337   200033 755100                    STA     DATALO,,AUTO
         1 002340   002355 710000 1                  TRA     s:6899

      852     6890    3        CASE(%ASLWSQ);                     /* Alternate shared library           */

      853     6891    3           DATAHI = %ASLSEGHI + 1;

PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:118  
   6891  1 002341   001010 235007                    LDA     520,DL
         1 002342   200032 755100                    STA     DATAHI,,AUTO

      854     6892    3           DATALO = %ASLSEGLO;

   6892  1 002343   000610 235007                    LDA     392,DL
         1 002344   200033 755100                    STA     DATALO,,AUTO
         1 002345   002355 710000 1                  TRA     s:6899

      855     6893    3        CASE(ELSE);                        /* User or monitor                    */

      856     6894    3           DATAHI = B$JIT.PTSIZ+1;

   6894  1 002346   000000 475400 xsym               LDP5    B$JIT$
         1 002347   500216 236100                    LDQ     142,,PR5
         1 002350   777777 376007                    ANQ     -1,DL
         1 002351   000001 036007                    ADLQ    1,DL
         1 002352   200032 756100                    STQ     DATAHI,,AUTO

      857     6895    3           DATALO = %UDSEGLO;

   6895  1 002353   001130 235007                    LDA     600,DL
         1 002354   200033 755100                    STA     DATALO,,AUTO

      858     6896    3        END;

      859     6897
      860     6898
      861     6899    2        DATAHI = DATAHI * 4096;            /* Cvrt upper bound to bytes          */

   6899  1 002355   200032 236100                    LDQ     DATAHI,,AUTO
         1 002356   000014 736000                    QLS     12
         1 002357   200032 756100                    STQ     DATAHI,,AUTO

      862     6900    2        DATALO = DATALO * 4096;            /* Cvrt lower bound to bytes          */

   6900  1 002360   000014 735000                    ALS     12
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:119  
         1 002361   200033 755100                    STA     DATALO,,AUTO

      863     6901    2   END SETUP;

   6901  1 002362   200056 221300                    LDX1  ! PSR_DESC+2,,AUTO
         1 002363   000001 702211                    TSX2  ! 1,X1

      864     6902
      865     6903        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:120  
      866     6904    1   ADJ_PS1: PROC;

   6904  1 002364   200056 741300       ADJ_PS1      STX1  ! PSR_DESC+2,,AUTO

      867     6905                  %FINDMAP (WSQ = EWSQ , P$ = MAP$);

   6906  1 002365   200003 470500                    LDP0    @EWSQ,,AUTO
         1 002366   000000 720100                    LXL0    0,,PR0
         1 002367   000000 236010 xsym               LDQ     MM_PTPTRS$,X0
         1 002370   200042 756100                    STQ     MAP$,,AUTO

      868     6908
      869     6909        /* Call magic so we can get at the safe store frame */
      870     6910    2        CALL UDN$MAGIC;

   6910  1 002371   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 002372   000000 701000 xent               TSX1    UDN$MAGIC
         1 002373   000000 011000                    NOP     0

      871     6911        /* Make a type 0 descriptor framing all of the ASR/PSR */
      872     6912             %LOCK (G=MM_LOCK);

   6913  1 002374   000004 630400 2                  EPPR0   4
         1 002375   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 002376   000000 701000 xent               TSX1    HFC$LOCK
         1 002377   000000 011000                    NOP     0

      873     6915    2        B$LS$->B$MLNK.MISC = DESCINIT;

   6915  1 002400   000000 237000 0                  LDAQ    DESCINIT
         1 002401   000000 470400 xsym               LDP0    B$LS$
         1 002402   000130 757100                    STAQ    88,,PR0

      874     6916    2        CALL MMA$GETPSR(PSR_DESC);

   6916  1 002403   200054 631500                    EPPR1   PSR_DESC,,AUTO
         1 002404   200060 451500                    STP1    PSR_DESC+4,,AUTO
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:121  
         1 002405   200060 630500                    EPPR0   PSR_DESC+4,,AUTO
         1 002406   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 002407   000000 701000 xent               TSX1    MMA$GETPSR
         1 002410   000000 011000                    NOP     0

      875     6917    2        B$LS$->B$MLNK.MISC.BOUND = PSR_DESC.BASE - AS_BASE % + PSR_DESC.BOUND;

   6917  1 002411   200054 236100                    LDQ     PSR_DESC,,AUTO
         1 002412   000020 772000                    QRL     16
         1 002413   200055 036100                    ADLQ    PSR_DESC+1,,AUTO
         1 002414   000000 470400 xsym               LDP0    B$LS$
         1 002415   157000 136007                    SBLQ    56832,DL
         1 002416   000020 736000                    QLS     16
         1 002417   000130 676100                    ERQ     88,,PR0
         1 002420   000034 376000 xsym               ANQ     B_VECTNIL+28
         1 002421   000130 656100                    ERSQ    88,,PR0

      876     6918    2   END ADJ_PS1;

   6918  1 002422   200056 221300                    LDX1  ! PSR_DESC+2,,AUTO
         1 002423   000001 702211                    TSX2  ! 1,X1

      877     6919
      878     6920
      879     6921    1   ADJ_PS2: PROC;

   6921  1 002424   200056 741300       ADJ_PS2      STX1  ! PSR_DESC+2,,AUTO

      880     6922        /* Look for any descriptor in the PSR and ASR that this effects */
      881     6923    2        J = B$LS$->B$MLNK.MISC.BOUND / SIZEC(MM$DESC) - 1;

   6923  1 002425   000000 470400 xsym               LDP0    B$LS$
         1 002426   000130 236100                    LDQ     88,,PR0
         1 002427   000020 772000                    QRL     16
         1 002430   000003 772000                    QRL     3
         1 002431   000001 136007                    SBLQ    1,DL
         1 002432   200040 756100                    STQ     J,,AUTO
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:122  

      882     6924    2        START = ELS$->MM$DESC.BASE(I);

   6924  1 002433   200037 235100                    LDA     I,,AUTO
         1 002434   000001 735000                    ALS     1
         1 002435   200041 471500                    LDP1    ELS$,,AUTO
         1 002436   100001 235105                    LDA     1,AL,PR1
         1 002437   200051 755100                    STA     START,,AUTO

      883     6925    2        END_SEG = START + ELS$->MM$DESC.BOUND(I);

   6925  1 002440   200037 235100                    LDA     I,,AUTO
         1 002441   000001 735000                    ALS     1
         1 002442   100000 236105                    LDQ     0,AL,PR1
         1 002443   000020 772000                    QRL     16
         1 002444   200051 036100                    ADLQ    START,,AUTO
         1 002445   200052 756100                    STQ     END_SEG,,AUTO

      884     6926
      885     6927    2        IF PSR_DESC.FLGS & %DSNULL

   6927  1 002446   200054 236100                    LDQ     PSR_DESC,,AUTO
         1 002447   000024 736000                    QLS     20
         1 002450   777000 376003                    ANQ     -512,DU
         1 002451   002000 376003                    ANQ     1024,DU
         1 002452   002500 600000 1                  TZE     s:6935

      886     6928    2        THEN
      887     6929    3        DO WHILE (J>=0);

   6929  1 002453   200040 236100                    LDQ     J,,AUTO
         1 002454   002500 604000 1                  TMI     s:6935

      888     6930    3            IF START <= PS_DESC.BASE(J) AND PS_DESC.BASE(J) <= END_SEG AND PS_DESC.WSR
              6930                      (J) = %USERWSR

   6930  1 002455   200040 235100                    LDA     J,,AUTO
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:123  
         1 002456   000001 735000                    ALS     1
         1 002457   000000 470400 xsym               LDP0    B$MISC$
         1 002460   000001 236105                    LDQ     1,AL,PR0
         1 002461   200051 116100                    CMPQ    START,,AUTO
         1 002462   002475 602000 1                  TNC     s:6933
         1 002463   200052 236100                    LDQ     END_SEG,,AUTO
         1 002464   000001 116105                    CMPQ    1,AL,PR0
         1 002465   002475 602000 1                  TNC     s:6933
         1 002466   000000 236105                    LDQ     0,AL,PR0
         1 002467   000160 376007                    ANQ     112,DL
         1 002470   000160 116007                    CMPQ    112,DL
         1 002471   002475 601000 1                  TNZ     s:6933

      889     6931    3             THEN
      890     6932    3                  PS_DESC.BASE(J) = PS_DESC.BASE(J) + TEMP4;

   6932  1 002472   000001 236105                    LDQ     1,AL,PR0
         1 002473   200046 036100                    ADLQ    TEMP4,,AUTO
         1 002474   000001 756105                    STQ     1,AL,PR0

      891     6933    3             J = J - 1;

   6933  1 002475   000001 336007                    LCQ     1,DL
         1 002476   200040 056100                    ASQ     J,,AUTO

      892     6934    3           END;

   6934  1 002477   002455 605000 1                  TPL     s:6930

      893     6935    2   END ADJ_PS2;

   6935  1 002500   200056 221300                    LDX1  ! PSR_DESC+2,,AUTO
         1 002501   000001 702211                    TSX2  ! 1,X1

      894     6936
      895     6937        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:124  
      896     6938    1   SPOIL_DR: PROC;

   6938  1 002502   200056 741300       SPOIL_DR     STX1  ! PSR_DESC+2,,AUTO

      897     6939
      898     6940        /* If we are changing something in the user's map spoil all the
      899     6941             descriptor registers */
      900     6942    2        START = ELS$->MM$DESC.BASE (SEGX);

   6942  1 002503   200015 235100                    LDA     SEGX,,AUTO
         1 002504   000001 735000                    ALS     1
         1 002505   200041 470500                    LDP0    ELS$,,AUTO
         1 002506   000001 235105                    LDA     1,AL,PR0
         1 002507   200051 755100                    STA     START,,AUTO

      901     6943    2        PGT$ = ADDR (B_MPT.SS$ -> B$SS.DR0);

   6943  1 002510   000000 236000 xsym               LDQ     B_MPT
         1 002511   000030 036003                    ADLQ    24,DU
         1 002512   200050 756100                    STQ     PGT$,,AUTO

      902     6944
      903     6945    3        DO I = 0 TO 7;

   6945  1 002513   200037 450100                    STZ     I,,AUTO

      904     6946
      905     6947    3             IF PGT$ -> MM$DESC.TYP(0) = 0 AND PGT$ -> MM$DESC.BASE(0) > START

   6947  1 002514   200050 470500                    LDP0    PGT$,,AUTO
         1 002515   000000 236100                    LDQ     0,,PR0
         1 002516   000017 316007                    CANQ    15,DL
         1 002517   002535 601000 1                  TNZ     s:6953
         1 002520   200051 236100                    LDQ     START,,AUTO
         1 002521   002535 604000 1                  TMI     s:6953
         1 002522   000001 116100                    CMPQ    1,,PR0
         1 002523   002535 605000 1                  TPL     s:6953
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:125  
         1 002524   000001 236100                    LDQ     1,,PR0
         1 002525   002535 604000 1                  TMI     s:6953
         1 002526   200033 116100                    CMPQ    DATALO,,AUTO
         1 002527   002535 602000 1                  TNC     s:6953
         1 002530   200032 116100                    CMPQ    DATAHI,,AUTO
         1 002531   002535 605000 1                  TPL     s:6953

      906     6948    3                  AND PGT$ -> MM$DESC.BASE(0) >= DATALO
      907     6949    3                  AND PGT$ -> MM$DESC.BASE(0) < DATAHI
      908     6950    3             THEN
      909     6951    3                  PGT$ -> MM$DESC(0) = '0'B;

   6951  1 002532   000000 235003                    LDA     0,DU
         1 002533   000000 236003                    LDQ     0,DU
         1 002534   000000 757100                    STAQ    0,,PR0

      910     6952
      911     6953    3             PGT$ = PINCRW (PGT$, SIZEW (MM$DESC(0)));

   6953  1 002535   200050 236100                    LDQ     PGT$,,AUTO
         1 002536   000002 036003                    ADLQ    2,DU
         1 002537   200050 756100                    STQ     PGT$,,AUTO

      912     6954    3           END;

   6954  1 002540   200037 054100                    AOS     I,,AUTO
         1 002541   200037 235100                    LDA     I,,AUTO
         1 002542   000007 115007                    CMPA    7,DL
         1 002543   002514 604400 1                  TMOZ    s:6947

      913     6955    2   END SPOIL_DR;

   6955  1 002544   200056 221300                    LDX1  ! PSR_DESC+2,,AUTO
         1 002545   000001 702211                    TSX2  ! 1,X1

      914     6956        %EJECT;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:126  
      915     6957
      916     6958        /*F*    NAME:   MMH$SMPRT
      917     6959                PURPOSE: To set memory protection on an entire data segment. */
      918     6960    1   MMH$SMPRT: ENTRY(EWSQ,SEGID,REQSIZE,ERR,DSACCESS) ALTRET;

   6960  1 002546   000000 700200 xent  MMH$SMPRT    TSX0  ! X66_AUTO_N
         1 002547   000066 000010                    ZERO    54,8

      919     6961                                                /* NOTE:  REQSIZE is unused.          */
      920     6962    1        SEGX = MOD(SEGID,1024);

   6962  1 002550   200004 470500                    LDP0    @SEGID,,AUTO
         1 002551   000000 236100                    LDQ     0,,PR0
         1 002552   001777 376007                    ANQ     1023,DL
         1 002553   200015 756100                    STQ     SEGX,,AUTO

      921     6963    1        IF (SEGX <= %HIFIXEDSID) OR (SEGX > %MAXDATASID)

   6963  1 002554   000004 116007                    CMPQ    4,DL
         1 002555   002560 602000 1                  TNC     s:6965
         1 002556   000014 116007                    CMPQ    12,DL
         1 002557   002564 602000 1                  TNC     s:6969

      922     6964    2        THEN DO;

      923     6965    2             ERR = %E$BADSEGID;            /* Bad segid passed to us             */

   6965  1 002560   001132 235007                    LDA     602,DL
         1 002561   200006 471500                    LDP1    @ERR,,AUTO
         1 002562   100000 755100                    STA     0,,PR1

      924     6966    2   ERR_OUT:
      925     6967    2             ALTRETURN;

   6967  1 002563   000000 702200 xent  ERR_OUT      TSX2  ! X66_AALT

      926     6968    2           END;
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:127  
      927     6969    1        IF (DSACCESS < BITBIN(%MM_DSREAD#)) OR

   6969  1 002564   200007 471500                    LDP1    @DSACCESS,,AUTO
         1 002565   100000 235100                    LDA     0,,PR1
         1 002566   000400 115007                    CMPA    256,DL
         1 002567   002572 602000 1                  TNC     s:6972
         1 002570   000601 115007                    CMPA    385,DL
         1 002571   002576 602000 1                  TNC     s:6976

      928     6970    1             (DSACCESS > BITBIN(%MM_DSWRITE#))
      929     6971    2        THEN DO;

      930     6972    2             ERR = %E$DSPROTBAD;

   6972  1 002572   001177 235007                    LDA     639,DL
         1 002573   200006 473500                    LDP3    @ERR,,AUTO
         1 002574   300000 755100                    STA     0,,PR3

      931     6973    2             ALTRETURN;

   6973  1 002575   000000 702200 xent               TSX2  ! X66_AALT

      932     6974    2           END;
      933     6975             %FINDLS (WSQ = EWSQ , P$ = ELS$);

   6976  1 002576   200003 473500                    LDP3    @EWSQ,,AUTO
         1 002577   300000 720100                    LXL0    0,,PR3
         1 002600   000000 236010 xsym               LDQ     MM_LSPTRS$,X0
         1 002601   200041 756100                    STQ     ELS$,,AUTO

      934     6978    1        ELS$ -> MM$DESC.FLGS (SEGX) = (ELS$ -> MM$DESC.FLGS (SEGX) & ~%MM_DSWRITE#) |
              6978                 BINBIT(DSACCESS,9);

   6978  1 002602   200015 235100                    LDA     SEGX,,AUTO
         1 002603   000001 735000                    ALS     1
         1 002604   100000 236100                    LDQ     0,,PR1
         1 002605   000033 736000                    QLS     27
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:128  
         1 002606   200041 474500                    LDP4    ELS$,,AUTO
         1 002607   200060 756100                    STQ     PSR_DESC+4,,AUTO
         1 002610   400000 236105                    LDQ     0,AL,PR4
         1 002611   000024 736000                    QLS     20
         1 002612   777000 376003                    ANQ     -512,DU
         1 002613   177000 376003                    ANQ     65024,DU
         1 002614   200060 276100                    ORQ     PSR_DESC+4,,AUTO
         1 002615   000024 772000                    QRL     20
         1 002616   400000 676105                    ERQ     0,AL,PR4
         1 002617   177600 376007                    ANQ     65408,DL
         1 002620   400000 656105                    ERSQ    0,AL,PR4

      935     6979    1        RETURN;

   6979  1 002621   000000 702200 xent               TSX2  ! X66_ARET

DESCINIT
 Sect OctLoc
   0     000   000000 170760   000000 157000                                    ..x...o.

(unnamed)
 Sect OctLoc
   0     002   000000 777777                                                    ....

(unnamed)
 Sect OctLoc
   2     000   000000 000510   000000 040000   000001 006000   000000 006000    ...... .........
   2     004   000000 006000   757777 777777   777777 000377   777777 777700    ................
   2     010   000000 000063   000000 000064   000003 006000   000010 006000    ...3...4........
   2     014   000003 006000   000011 006000   000027 006000   000001 777777    ................
   2     020   000001 000001                                                    ....
      936     6980
      937     6981    1   END MMH$SHARE_DS;

PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:129  
--  Include file information  --

   ES_CNTRL_R.:E05TOU  cannot be made into a system file and is referenced.
   UD_EQU_E.:E05TOU  is referenced.
   S_WSPTD_R.:E05TOU  cannot be made into a system file and is referenced.
   HF_LOCK_C.:E05TOU  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   B$USER.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   M$JIT_C.:E05TOU  cannot be made into a system file and is referenced.
   B$MAP.:E05TOU  cannot be made into a system file and is referenced.
   M_ERRORS_C.:E05TOU  is referenced.
   HF_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   MM_MACRO_M.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   MM$SYSGEN.:E05TOU  is referenced.
   M_INFO_C.:E05TOU  is referenced.
   MM_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$SS.:E05TOU  cannot be made into a system file and is referenced.
   B_MLSMAC_C.:E05TOU  is referenced.
   B_ULSMAC_C.:E05TOU  is referenced.
   B_LSDATA_C.:E05TOU  cannot be made into a system file and is referenced.
   B_MAGIC_C.:E05TOU  is referenced.
      No diagnostics issued in procedure MMH$SHARE_DS.
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:130  

 **** Variables and constants ****

  ****  Section 000 RoData MMH$SHARE_DS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(72)    r     1 DESCINIT

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    12-0-0/w PTR         r     1 @COUNT                     7-0-0/w PTR         r     1 @DSACCESS
     6-0-0/w PTR         r     1 @ERR                       3-0-0/w PTR         r     1 @EWSQ
    10-0-0/w PTR         r     1 @HEAD                      5-0-0/w PTR         r     1 @REQSIZE
     4-0-0/w PTR         r     1 @SEGID                    11-0-0/w PTR         r     1 @TAIL
    20-0-0/b BIT         r     1 ACCESS                    26-0-0/w UBIN        r     1 ASIZE
    27-0-0/w SBIN        r     1 ASIZEP                    14-0-0/b BIT (12)    r     1 BSEGX
    31-0-0/w SBIN        r     1 BSIZE                     *0-0-0/w STRC        r     1 B_WSIZE
    *0-0-0/w UBIN        r     1 COUNT                     25-0-0/w UBIN        r     1 CURTOP
    32-0-0/w SBIN        r     1 DATAHI                    33-0-0/w UBIN        r     1 DATALO
    22-0-0/w SBIN        r     1 DRBASE                    23-0-0/w SBIN        r     1 DRBOUND
    *0-0-0/w UBIN        r     1 DSACCESS                  41-0-0/w PTR         r     1 ELS$
    52-0-0/w UBIN        r     1 END_SEG                   *0-0-0/w UBIN        r     1 ERR
    *0-0-0/w UBIN        r     1 EWSQ                      35-0-0/w BIT         r     1 FREEFLG
    *0-0-0/w STRC        r     1 F_WSIZE                   30-0-0/w SBIN        r     1 GAPPGS
    *0-0-0/w UBIN        r     1 HEAD                      16-0-0/w UBIN        r     1 HEADPG
    37-0-0/w SBIN        r     1 I                         40-0-0/w SBIN        r     1 J
    42-0-0/w PTR         r     1 MAP$                      24-0-0/w SBIN        r     1 NEWTOP
    50-0-0/w PTR         r     1 PGT$                      50-0-0/w UBIN        r     1 PGTX
    54-0-0/d STRC(72)    r     1 PSR_DESC                  *0-0-0/w UBIN        r     1 REQSIZE
    *0-0-0/w UBIN        r     1 SEGID                     15-0-0/w UBIN        r     1 SEGX
    17-0-0/b BIT         r     1 SHARE_DS                  51-0-0/w UBIN        r     1 START
    *0-0-0/w UBIN        r     1 TAIL                      43-0-0/w SBIN        r     1 TEMP1
    44-0-0/w SBIN        r     1 TEMP2                     45-0-0/w SBIN        r     1 TEMP3
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:131  
    46-0-0/w SBIN        r     1 TEMP4                     47-0-0/b BIT (12)    r     1 TEMPB
    34-0-0/w BIT         r     1 TRUNCFLG                  36-0-0/w BIT         r     1 VIRTONLY
    21-0-0/w UBIN        r     1 VPLOW                     13-0-0/w UBIN        r     1 WSIZE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$IPHYMAP$                 0-0-0/w PTR         r     1 B$JIT$
     0-0-0/w PTR         r     1 B$LS$                      0-0-0/w PTR         r     1 B$MASTPT$
     0-0-0/w PTR         r     1 B$MISC$                    0-0-0/w PTR         r     1 B$MPT$
     0-0-0/w PTR         r     1 B$PPUT$                    0-0-0/w PTR         r     1 B$WINDOW$
     0-0-0/w PTR         r     1 B$WSQ0PT$                  0-0-0/d STRC(432)   r     1 B_MPT
     0-0-0/w UBIN        r     1 ES_CLEARMEM                0-0-0/w BIT         r     1 HW_WSQ0PT
     0-0-0/w PTR         r     1 MM_BYP$
     0-0-0/b UBIN(9)     r     1 MM_DSMAX(0:7)
     0-0-0/b STRC        r     1 MM_FPMC                    0-0-0/w UBIN        r     1 MM_HELD
     0-0-0/d BIT (72)    r     1 MM_LOCK
     0-0-0/w PTR         r     1 MM_LSPTRS$(0:8)
     0-0-0/w PTR         r     1 MM_PTPTRS$(0:16)
     0-0-0/w SBIN        r     1 MM_RDS(0:7)                0-0-0/w PTR         r     1 S$CU$
     0-0-0/w UBIN        r     1 S_NSCPU

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/w STRC        r     1 B$MAP(0:1023)
     0-0-0/d STRC(10368) r     1 B$MLNK                     0-0-0/w STRC(36864) r     1 B$PAGE
     0-0-0/d STRC(2304)  r     1 B$SS                       0-0-0/d STRC(576)   r     1 B$U
     0-0-0/d STRC(72)    r     1 MM$DESC(0:0)
     0-0-0/h UBIN(18)    r     1 MM$IPHY_MAP(0:0)
     0-0-0/w STRC        r     1 MM$PPUT(0:0)
     0-0-0/d STRC(72)    r     1 PS_DESC(0:0)

PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:132  

   Procedure MMH$SHARE_DS requires 1426 words for executable code.
   Procedure MMH$SHARE_DS requires 54 words of local(AUTO) storage.

    No errors detected in file MMH$DMEM.:E05TSI    .
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:133  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:134  
          MINI XREF LISTING

ACCESS
      4120**DCL      6215<<ASSIGN   6217<<ASSIGN   6220<<ASSIGN   6220>>ASSIGN   6256>>IF       6480>>ASSIGN
ADJ_PS1
      6904**PROC     6406--CALL     6739--CALL
ADJ_PS2
      6921**PROC     6420--CALL     6749--CALL
AGAIN
      6229**LABEL    6319--GOTO
ASIZE
      4126**DCL      6323<<ASSIGN   6371>>ASSIGN   6393<<ASSIGN   6397>>ASSIGN   6416>>ASSIGN   6705<<ASSIGN
      6748>>ASSIGN   6751>>ASSIGN
ASIZEP
      4127**DCL      6297<<ASSIGN   6302<<ASSIGN   6302>>ASSIGN   6306>>IF       6323>>ASSIGN   6352>>IF
      6390<<ASSIGN   6392<<ASSIGN   6393>>ASSIGN   6398>>IF       6430>>ASSIGN   6475>>ASSIGN   6491<>CALL
      6492<>CALL     6507>>ASSIGN   6508>>ASSIGN   6514>>DOINDEX  6601>>ASSIGN   6616>>ASSIGN   6664>>CALL
      6664<>CALL     6665<<ASSIGN   6667>>ASSIGN   6704<<ASSIGN   6705>>ASSIGN   6706>>IF       6714<>CALL
      6720>>ASSIGN   6721>>DOINDEX  6753>>ASSIGN   6784>>ASSIGN   6816>>ASSIGN   6816>>ASSIGN
B$DO.ECCINFO
      5105**DCL      5106--REDEF
B$IPHYMAP$
      4269**DCL      6284>>ASSIGN   6504>>ASSIGN   6522>>ASSIGN   6523>>ASSIGN   6575>>ASSIGN
B$JIT.ERR.MID
      4762**DCL      4762--REDEF
B$JIT.JRESPEAK
      4852**DCL      4853--REDEF
B$JIT.PCADS
      4854**DCL      6561<<ASSIGN   6561>>ASSIGN   6730<<ASSIGN   6730>>ASSIGN
B$JIT.PCC
      4849**DCL      6557<<ASSIGN   6557>>ASSIGN   6726<<ASSIGN   6726>>ASSIGN
B$JIT.PCDDS
      4853**DCL      6559<<ASSIGN   6559>>ASSIGN   6728<<ASSIGN   6728>>ASSIGN
B$JIT.PCDS
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:135  
      4849**DCL      6563<<ASSIGN   6563>>ASSIGN   6732<<ASSIGN   6732>>ASSIGN
B$JIT.PPC
      4851**DCL      6508<<ASSIGN   6508>>ASSIGN   6512>>ASSIGN
B$JIT.PSEUDOPGS
      4853**DCL      6475<<ASSIGN   6475>>ASSIGN   6720<<ASSIGN   6720>>ASSIGN
B$JIT.PTSIZ
      4854**DCL      6894>>ASSIGN
B$JIT$
      4267**DCL      4756--IMP-PTR  6475>>ASSIGN   6475>>ASSIGN   6508>>ASSIGN   6508>>ASSIGN   6512>>ASSIGN
      6557>>ASSIGN   6557>>ASSIGN   6559>>ASSIGN   6559>>ASSIGN   6561>>ASSIGN   6561>>ASSIGN   6563>>ASSIGN
      6563>>ASSIGN   6720>>ASSIGN   6720>>ASSIGN   6726>>ASSIGN   6726>>ASSIGN   6728>>ASSIGN   6728>>ASSIGN
      6730>>ASSIGN   6730>>ASSIGN   6732>>ASSIGN   6732>>ASSIGN   6894>>ASSIGN
B$LS$
      4261**DCL      6915>>ASSIGN   6917>>ASSIGN   6923>>ASSIGN
B$MAP.CTRL
      4381**DCL      6554>>IF       6569<<ASSIGN
B$MAP.RPN
      4377**DCL      6284>>ASSIGN   6286>>ASSIGN   6504>>ASSIGN   6506>>ASSIGN   6520>>ASSIGN   6526>>ASSIGN
      6527>>ASSIGN   6566<<ASSIGN   6566>>ASSIGN   6568<<ASSIGN   6575>>ASSIGN   6577>>ASSIGN   6758>>IF
B$MAP.SCTRL
      4378**DCL      4379--REDEF    6516<<ASSIGN   6571<<ASSIGN
B$MASTPT$
      4264**DCL      6602>>ASSIGN   6785>>ASSIGN
B$MISC$
      4260**DCL      4148--IMP-PTR  6930>>IF       6930>>IF       6930>>IF       6932>>ASSIGN   6932>>ASSIGN
B$MLNK.MISC
      2502**DCL      6915<<ASSIGN
B$MLNK.MISC.BOUND
      2503**DCL      6917<<ASSIGN   6923>>ASSIGN
B$MPT$
      4263**DCL      6605>>ASSIGN
B$PAGE
      4427**DCL      6580<<ASSIGN   6580>>ASSIGN
B$PAGE.WRD
      4428**DCL      6432<<ASSIGN   6432>>ASSIGN   6433<<ASSIGN   6605<<ASSIGN   6605>>ASSIGN   6723<<ASSIGN
      6762<<ASSIGN   6762>>ASSIGN   6763<<ASSIGN   6788<<ASSIGN
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:136  
B$PPUT$
      4265**DCL      6515>>ASSIGN   6522>>ASSIGN   6526>>ASSIGN   6530>>ASSIGN   6582>>ASSIGN
B$SS.DR0
      3436**DCL      6943--ASSIGN
B$SS.RVA
      3386**DCL      3387--REDEF
B$U.MISC
      5084**DCL      5085--REDEF
B$U.PCT
      5068**DCL      6512<<ASSIGN
B$USER.MISC
      5160**DCL      5161--REDEF
B$WINDOW$
      4266**DCL      6541>>ASSIGN   6580>>ASSIGN
B$WSQ0PT$
      4268**DCL      6566>>ASSIGN
BADFVP
      6838**LABEL    6714--CALLALT
BADGDS
      6643**LABEL    6491--CALLALT
BSEGX
      4116**DCL      6339>>IF       6367>>IF       6388>>IF       6456>>IF       6464>>ASSIGN   6865<<ASSIGN
BSIZE
      4129**DCL      6226<<ASSIGN   6226>>ASSIGN   6229>>IF       6245<<ASSIGN   6249>>ASSIGN   6312<<ASSIGN
      6315<<ASSIGN   6315>>ASSIGN   6316>>IF       6384<<ASSIGN   6385>>IF       6392>>ASSIGN   6397<<ASSIGN
      6462<<ASSIGN   6462>>ASSIGN   6472>>ASSIGN   6667<<ASSIGN   6668>>IF       6676<<ASSIGN   6676>>ASSIGN
      6678>>ASSIGN   6691>>IF       6698<<ASSIGN   6702>>ASSIGN   6800>>IF       6802>>ASSIGN   6882<<ASSIGN
B_MPT.AS
      4203**DCL      4206--REDEF
B_MPT.ASDESC
      4235**DCL      4239--REDEF
B_MPT.ECCB
      4218**DCL      4221--REDEF
B_MPT.ECCBDESC
      4253**DCL      4257--REDEF
B_MPT.LS
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:137  
      4198**DCL      4201--REDEF
B_MPT.LSDESC
      4229**DCL      4233--REDEF
B_MPT.PS
      4208**DCL      4211--REDEF
B_MPT.PSDESC
      4241**DCL      4245--REDEF
B_MPT.SS
      4193**DCL      4196--REDEF
B_MPT.SS$
      4196**DCL      6943>>ASSIGN
B_MPT.SSDESC
      4223**DCL      4227--REDEF
B_MPT.TCB
      4213**DCL      4216--REDEF
B_MPT.TCBDESC
      4247**DCL      4251--REDEF
B_WSIZE.ODD_BIT
      4087**DCL      6861>>IF
COUNT
      4092**DCL         8--PROC     6178--ENTRY    6193--ENTRY    6507<<ASSIGN   6542>>ASSIGN
CURTOP
      4125**DCL      6328<<ASSIGN   6330<<ASSIGN   6330>>ASSIGN   6371>>ASSIGN   6384>>ASSIGN   6701<<ASSIGN
      6704>>ASSIGN
DATAHI
      4130**DCL      6341>>ASSIGN   6372>>IF       6374>>IF       6384>>ASSIGN   6885<<ASSIGN   6888<<ASSIGN
      6891<<ASSIGN   6894<<ASSIGN   6899<<ASSIGN   6899>>ASSIGN   6947>>IF
DATALO
      4131**DCL      6886<<ASSIGN   6889<<ASSIGN   6892<<ASSIGN   6895<<ASSIGN   6900<<ASSIGN   6900>>ASSIGN
      6947>>IF
DESCINIT
      4154**DCL      6915>>ASSIGN
DRBASE
      4122**DCL      6249>>ASSIGN   6282>>ASSIGN   6297>>ASSIGN   6300>>IF       6338>>ASSIGN   6455>>ASSIGN
      6467>>IF       6502>>ASSIGN   6539>>ASSIGN   6600>>ASSIGN   6677>>ASSIGN   6701>>ASSIGN   6702>>ASSIGN
      6710>>ASSIGN   6783>>ASSIGN   6880<<ASSIGN
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:138  
DRBOUND
      4123**DCL      6224>>IF       6226>>ASSIGN   6229>>IF       6240>>IF       6244>>ASSIGN   6249>>ASSIGN
      6253>>IF       6277>>IF       6297>>ASSIGN   6300>>IF       6306>>IF       6312>>ASSIGN   6313>>IF
      6338>>ASSIGN   6455>>ASSIGN   6472>>ASSIGN   6667>>ASSIGN   6674>>IF       6691>>IF       6696>>IF
      6698>>ASSIGN   6701>>ASSIGN   6702>>ASSIGN   6710>>ASSIGN   6800>>IF       6802>>ASSIGN   6816>>ASSIGN
      6881<<ASSIGN
DSACCESS
      4089**DCL         8--PROC     6178--ENTRY    6193--ENTRY    6202--ENTRY    6213--IF       6217>>ASSIGN
      6960--ENTRY    6969>>IF       6969>>IF       6978>>ASSIGN
ELS$
      4137**DCL      6267>>ASSIGN   6325>>ASSIGN   6328>>ASSIGN   6343>>ASSIGN   6413>>ASSIGN   6422>>ASSIGN
      6423>>ASSIGN   6456>>IF       6464>>ASSIGN   6472>>ASSIGN   6480>>ASSIGN   6480>>ASSIGN   6483>>ASSIGN
      6483>>ASSIGN   6492>>CALL     6670>>ASSIGN   6670>>ASSIGN   6671>>ASSIGN   6677>>ASSIGN   6678>>ASSIGN
      6711>>ASSIGN   6742>>ASSIGN   6744>>ASSIGN   6751>>ASSIGN   6802>>ASSIGN   6805>>ASSIGN   6805>>ASSIGN
      6807>>ASSIGN   6878<<ASSIGN   6880>>ASSIGN   6881>>ASSIGN   6924>>ASSIGN   6925>>ASSIGN   6942>>ASSIGN
      6976<<ASSIGN   6978>>ASSIGN   6978>>ASSIGN
ENDLOOP1
      6438**LABEL    6412--GOTO
ENDLOOP2
      6435**LABEL    6428--GOTO
END_SEG
      4147**DCL      6925<<ASSIGN   6930>>IF
ERR
      4088**DCL         8--PROC     6178--ENTRY    6193--ENTRY    6202--ENTRY    6232<<ASSIGN   6261<<ASSIGN
      6274<<ASSIGN   6291<<ASSIGN   6310<<ASSIGN   6363<<ASSIGN   6379<<ASSIGN   6491<>CALL     6578<>CALL
      6579<>CALL     6591<>CALL     6592<>CALL     6643>>IF       6643>>IF       6643>>IF       6687--ENTRY
      6695<<ASSIGN   6714<>CALL     6838>>IF       6872<<ASSIGN   6960--ENTRY    6965<<ASSIGN   6972<<ASSIGN
ERR_OUT
      6967**LABEL    6211--CALLALT  6689--CALLALT
ES_CLEARMEM
      6142**DCL      6492>>IF
EWSQ
      4077**DCL         8--PROC     6178--ENTRY    6193--ENTRY    6202--ENTRY    6280>>ASSIGN   6303>>IF
      6359>>IF       6444<>CALL     6491<>CALL     6500>>ASSIGN   6510>>IF       6537>>ASSIGN   6555>>DOCASE
      6598>>IF       6613>>IF       6664<>CALL     6687--ENTRY    6714<>CALL     6717>>ASSIGN   6724>>DOCASE
      6736>>IF       6772<>CALL     6813>>IF       6844>>IF       6878>>ASSIGN   6883>>DOCASE   6906>>ASSIGN
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:139  
      6960--ENTRY    6976>>ASSIGN
FREEFLG
      4133**DCL      6237>>IF       6380>>IF       6662>>IF       6848<<ASSIGN
F_WSIZE.FREEFLG
      4081**DCL      6848>>ASSIGN
F_WSIZE.VIRTONLY
      4082**DCL      6849>>ASSIGN
F_WSIZE.WORDS#
      4084**DCL      6850>>ASSIGN
GAPPGS
      4128**DCL      6346<<ASSIGN   6352>>IF       6371>>ASSIGN   6390>>ASSIGN   6416>>ASSIGN   6430>>ASSIGN
GDS
      6205**LABEL    6160--GOTO     6181--GOTO     6196--GOTO
HEAD
      4090**DCL         8--PROC     6178--ENTRY    6180>>ASSIGN   6193--ENTRY    6195>>ASSIGN   6287>>IF
      6504<<ASSIGN   6506<<ASSIGN   6513>>ASSIGN
HEADPG
      4118**DCL      6159<<ASSIGN   6180<<ASSIGN   6195<<ASSIGN   6205<<ASSIGN   6224>>IF       6489>>IF
      6489>>IF       6534>>IF       6544>>IF       6566>>ASSIGN   6568>>ASSIGN   6578<>CALL     6582<<ASSIGN
      6582>>ASSIGN   6586>>IF
HFC$ASSOCCLR
      4095**DCL-ENT  6444--CALL     6772--CALL
HFC$LOCK
      5726**DCL-ENT  6913--CALL
HFC$UNLOCK
      5726**DCL-ENT  6446--CALL     6774--CALL
HW_WSQ0PT
      4071**DCL      6283>>IF       6503>>IF       6519>>IF       6565>>IF       6574>>IF
I
      4135**DCL      6403<<ASSIGN   6409<<ASSIGN   6409>>ASSIGN   6410>>IF       6413>>ASSIGN   6422>>ASSIGN
      6423>>ASSIGN   6514<<DOINDEX  6543<<DOINDEX  6554>>IF       6566>>ASSIGN   6568>>ASSIGN   6569>>ASSIGN
      6571>>ASSIGN   6575>>ASSIGN   6577>>ASSIGN   6603<<DOINDEX  6721<<DOINDEX  6741<<DOINDEX  6742>>ASSIGN
      6744>>ASSIGN   6751>>ASSIGN   6786<<DOINDEX  6924>>ASSIGN   6925>>ASSIGN   6945<<DOINDEX
INIT_ERR
      6626**LABEL    6578--CALLALT  6579--CALLALT  6591--CALLALT  6592--CALLALT
J
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:140  
      4136**DCL      6423<<ASSIGN   6424<<ASSIGN   6424>>ASSIGN   6427<<ASSIGN   6427>>ASSIGN   6428>>IF
      6430>>ASSIGN   6431>>ASSIGN   6520<<ASSIGN   6521>>IF       6522>>ASSIGN   6523>>ASSIGN   6542<<ASSIGN
      6583<<ASSIGN   6583>>ASSIGN   6586>>IF       6604<<DOINDEX  6605>>ASSIGN   6605>>ASSIGN   6752<<DOINDEX
      6787<<DOINDEX  6788>>ASSIGN   6923<<ASSIGN   6929>>DOWHILE  6930>>IF       6930>>IF       6930>>IF
      6932>>ASSIGN   6932>>ASSIGN   6933<<ASSIGN   6933>>ASSIGN
JSN$BLNK1
      4105**DCL-ENT  6492--CALL
LOOP1
      6408**LABEL    6437--GOTO
LOOP2
      6426**LABEL    6434--GOTO
MAP$
      4138**DCL      6280<<ASSIGN   6284>>ASSIGN   6286>>ASSIGN   6432>>ASSIGN   6432>>ASSIGN   6433>>ASSIGN
      6500<<ASSIGN   6504>>ASSIGN   6506>>ASSIGN   6516>>ASSIGN   6520>>ASSIGN   6526>>ASSIGN   6527>>ASSIGN
      6537<<ASSIGN   6554>>IF       6566>>ASSIGN   6568>>ASSIGN   6569>>ASSIGN   6571>>ASSIGN   6575>>ASSIGN
      6577>>ASSIGN   6717<<ASSIGN   6723>>ASSIGN   6758>>IF       6762>>ASSIGN   6762>>ASSIGN   6763>>ASSIGN
      6906<<ASSIGN
MM$DESC
      3984**DCL      6492<>CALL     6923--ASSIGN   6951<<ASSIGN   6953--ASSIGN
MM$DESC.BASE
      3986**DCL      6325>>ASSIGN   6343>>ASSIGN   6413>>ASSIGN   6422<<ASSIGN   6677<<ASSIGN   6742>>ASSIGN
      6751<<ASSIGN   6880>>ASSIGN   6924>>ASSIGN   6942>>ASSIGN   6947>>IF       6947>>IF       6947>>IF
MM$DESC.BOUND
      3984**DCL      3985--REDEF    6328>>ASSIGN   6423>>ASSIGN   6472<<ASSIGN   6671<<ASSIGN   6678<<ASSIGN
      6744>>ASSIGN   6802<<ASSIGN   6807<<ASSIGN   6881>>ASSIGN   6925>>ASSIGN
MM$DESC.FLGS
      3985**DCL      3985--REDEF    6267>>ASSIGN   6480<<ASSIGN   6480>>ASSIGN   6483<<ASSIGN   6483>>ASSIGN
      6670<<ASSIGN   6670>>ASSIGN   6711>>ASSIGN   6805<<ASSIGN   6805>>ASSIGN   6978<<ASSIGN   6978>>ASSIGN
MM$DESC.FLGS1.NOTEMPTY
      3985**DCL      6456>>IF       6464<<ASSIGN
MM$DESC.TYP
      3986**DCL      6947>>IF
MM$IPHY_MAP
      4432**DCL      6284>>ASSIGN   6504>>ASSIGN   6522>>ASSIGN   6523>>ASSIGN   6575>>ASSIGN
MM$PPUT.PPNO
      3973**DCL      6522<<ASSIGN   6526<<ASSIGN   6530<<ASSIGN   6582>>ASSIGN
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:141  
MM$PPUT.USER
      3972**DCL      6515<<ASSIGN
MM$PPUT.USER#
      3973**DCL      3973--REDEF
MMA$GETPSR
      4104**DCL-ENT  6916--CALL
MMA$LOCKBP
      4102**DCL-ENT  6615--CALL     6815--CALL
MMA$UNLOCKBP
      4103**DCL-ENT  6622--CALL     6822--CALL
MME$CVM
      4096**DCL-ENT  6578--CALL     6579--CALL     6591--CALL     6592--CALL
MMG$SFVP
      4098**DCL-ENT  6714--CALL
MMG$SFVP_NOW
      4099**DCL-ENT  6664--CALL
MMG$SGVP
      4097**DCL-ENT  6491--CALL
MMK$BIGPT
      4100**DCL-ENT  6376--CALL
MM_BYP$
      3904**DCL      3904--IMP-PTR
MM_DSMAX
      3907**DCL      6305>>ASSIGN
MM_FPMC
      3910**DCL      6433>>ASSIGN   6723>>ASSIGN   6763>>ASSIGN   6788>>ASSIGN
MM_FPMC.RPN
      3910**DCL      6758>>IF
MM_HELD
      3907**DCL      6616<<ASSIGN   6616>>ASSIGN   6816<<ASSIGN   6816>>ASSIGN
MM_LOCK
      3901**DCL      6446<>CALL     6774<>CALL     6913<>CALL
MM_LSPTRS$
      3984**DCL      6878>>ASSIGN   6976>>ASSIGN
MM_PTPTRS$
      3984**DCL      6280>>ASSIGN   6500>>ASSIGN   6537>>ASSIGN   6717>>ASSIGN   6906>>ASSIGN
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:142  
MM_RDS
      3907**DCL      6616>>ASSIGN   6816>>ASSIGN
NEWTOP
      4124**DCL      6249<<ASSIGN   6264<<ASSIGN   6264>>ASSIGN   6297>>ASSIGN   6369>>ASSIGN   6540>>ASSIGN
      6702<<ASSIGN   6704>>ASSIGN   6719>>ASSIGN
PGT$
      4144**DCL      4145--REDEF    6541<<ASSIGN   6580>>ASSIGN   6602<<ASSIGN   6605>>ASSIGN   6785<<ASSIGN
      6788>>ASSIGN   6943<<ASSIGN   6947>>IF       6947>>IF       6947>>IF       6947>>IF       6951>>ASSIGN
      6953<<ASSIGN   6953>>ASSIGN
PGTX
      4145**DCL      6607<<ASSIGN   6607>>ASSIGN   6790<<ASSIGN   6790>>ASSIGN
PSR_DESC
      4160**DCL      6916<>CALL
PSR_DESC.BASE
      4165**DCL      6917>>ASSIGN
PSR_DESC.BOUND
      4161**DCL      6917>>ASSIGN
PSR_DESC.FLGS
      4162**DCL      6927>>IF
PS_DESC.BASE
      4153**DCL      6930>>IF       6930>>IF       6932<<ASSIGN   6932>>ASSIGN
PS_DESC.WSR
      4151**DCL      6930>>IF
REQSIZE
      4079**DCL         8--PROC     4080--REDEF    4085--REDEF    6178--ENTRY    6193--ENTRY    6202--ENTRY
      6687--ENTRY    6960--ENTRY
S$CU$
      5171**DCL      6512>>ASSIGN
SC_MM22
      4110**DCL-ENT  6646--CALL
SC_MM23
      4109**DCL-ENT  6760--CALL     6838--CALL
SC_MM24
      4108**DCL-ENT  6857--CALL
SC_MM43
      4111**DCL-ENT  6546--CALL     6588--CALL
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:143  
SC_MM44
      4112**DCL-ENT  6637--CALL
SEGFITS
      6403**LABEL    6377--GOTO
SEGID
      4078**DCL         8--PROC     6178--ENTRY    6193--ENTRY    6202--ENTRY    6491<>CALL     6664<>CALL
      6687--ENTRY    6714<>CALL     6865>>ASSIGN   6866>>ASSIGN   6960--ENTRY    6962>>ASSIGN
SEGX
      4117**DCL      6267>>ASSIGN   6305>>ASSIGN   6343>>ASSIGN   6410>>IF       6472>>ASSIGN   6480>>ASSIGN
      6480>>ASSIGN   6483>>ASSIGN   6483>>ASSIGN   6492>>CALL     6616>>ASSIGN   6670>>ASSIGN   6670>>ASSIGN
      6671>>ASSIGN   6677>>ASSIGN   6678>>ASSIGN   6711>>ASSIGN   6741>>DOINDEX  6802>>ASSIGN   6805>>ASSIGN
      6805>>ASSIGN   6807>>ASSIGN   6816>>ASSIGN   6866<<ASSIGN   6868>>IF       6868>>IF       6880>>ASSIGN
      6881>>ASSIGN   6942>>ASSIGN   6962<<ASSIGN   6963>>IF       6963>>IF       6978>>ASSIGN   6978>>ASSIGN
SETUP
      6843**PROC     6211--CALL     6689--CALL
SHARE_DS
      4119**DCL      6158<<ASSIGN   6179<<ASSIGN   6194<<ASSIGN   6204<<ASSIGN   6224>>IF       6268>>IF
      6268>>IF       6277>>IF       6380>>IF       6473>>IF       6481>>IF       6489>>IF       6497>>IF
      6552>>IF       6589>>IF       6662>>IF
SPOIL_DR
      6938**PROC     6441--CALL     6769--CALL
SSS$BLOCKM
      4101**DCL-ENT  6846--CALL
START
      4146**DCL      6924<<ASSIGN   6925>>ASSIGN   6930>>IF       6942<<ASSIGN   6947>>IF
S_NSCPU
      4262**DCL      6598>>IF       6603>>DOINDEX  6780>>IF       6786>>DOINDEX
TAIL
      4091**DCL         8--PROC     6178--ENTRY    6193--ENTRY    6518<<ASSIGN   6530>>ASSIGN
TEMP1
      4139**DCL      6242<<ASSIGN   6244<<ASSIGN   6245>>ASSIGN   6284<<ASSIGN   6286<<ASSIGN   6287>>IF
      6305<<ASSIGN   6306>>IF       6312>>ASSIGN   6325<<ASSIGN   6330>>ASSIGN   6338<<ASSIGN   6346>>ASSIGN
      6369<<ASSIGN   6371<<ASSIGN   6372>>IF       6414<<ASSIGN   6430>>ASSIGN   6431>>ASSIGN   6513<<ASSIGN
      6515>>ASSIGN   6518>>ASSIGN   6522>>ASSIGN   6523<<ASSIGN   6526>>ASSIGN   6527<<ASSIGN   6539<<ASSIGN
      6543>>DOINDEX  6600<<ASSIGN   6601>>ASSIGN   6604>>DOINDEX  6664<>CALL     6719<<ASSIGN   6722<<ASSIGN
      6722>>ASSIGN   6723>>ASSIGN   6743<<ASSIGN   6753>>ASSIGN   6762>>ASSIGN   6763>>ASSIGN   6764<<ASSIGN
PL6.E3A0      #001=MMH$SHARE_DS File=MMH$DMEM.:E05TSI                            WED 07/30/97 03:21 Page:144  
      6764>>ASSIGN   6784<<ASSIGN   6787>>DOINDEX
TEMP2
      4140**DCL      6341<<ASSIGN   6343<<ASSIGN   6344<<ASSIGN   6344>>ASSIGN   6346>>ASSIGN   6416<<ASSIGN
      6419>>ASSIGN   6422>>ASSIGN   6430<<ASSIGN   6432>>ASSIGN   6455<<ASSIGN   6469<<ASSIGN   6469>>ASSIGN
      6478>>IF       6491<>CALL     6492<>CALL     6502>>ASSIGN   6540<<ASSIGN   6543>>DOINDEX  6600>>ASSIGN
      6616>>ASSIGN   6664>>CALL     6742<<ASSIGN   6743>>ASSIGN   6751>>ASSIGN   6753<<ASSIGN   6758>>IF
      6762>>ASSIGN
TEMP3
      4141**DCL      6413<<ASSIGN   6414>>ASSIGN   6422>>ASSIGN   6431<<ASSIGN   6432>>ASSIGN   6433>>ASSIGN
      6575<<ASSIGN   6577<<ASSIGN   6579<>CALL     6601<<ASSIGN   6604>>DOINDEX  6710<<ASSIGN   6714<>CALL
      6744<<ASSIGN   6745<<ASSIGN   6745>>ASSIGN   6752>>DOINDEX  6783<<ASSIGN   6783>>ASSIGN   6784>>ASSIGN
      6787>>DOINDEX
TEMP4
      4142**DCL      6419<<ASSIGN   6748<<ASSIGN   6932>>ASSIGN
TEMPB
      4143**DCL      6267<<ASSIGN   6268>>IF       6268>>IF       6711<<ASSIGN   6712>>IF
TRUNCFLG
      4132**DCL      6231<<ASSIGN   6311<<ASSIGN   6383<<ASSIGN   6626>>IF       6697<<ASSIGN   6823>>IF
      6828>>IF       6876<<ASSIGN
UDN$MAGIC
      4106**DCL-ENT  6910--CALL
VIRTONLY
      4134**DCL      6218>>IF       6486>>IF       6849<<ASSIGN
VIRTONLY_
      6592**LABEL    6486--GOTO
VPLOW
      4121**DCL      6282<<ASSIGN   6284>>ASSIGN   6286>>ASSIGN   6502<<ASSIGN   6504>>ASSIGN   6506>>ASSIGN
      6516>>ASSIGN   6517<<ASSIGN   6517>>ASSIGN   6520>>ASSIGN   6526>>ASSIGN   6527>>ASSIGN
WSIZE
      4115**DCL      6850<<ASSIGN   6855>>IF       6863<<ASSIGN   6863>>ASSIGN   6882>>ASSIGN
