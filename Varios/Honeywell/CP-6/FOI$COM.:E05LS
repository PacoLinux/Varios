VERSION E05

PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:1    
        1        1        /*M* FOI$COM  Common routines for INSYM and OUTSYM ghosts */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=6,IND=0,IDT=2,SDI=2,CTI=0,ENU=0,AND,DCI=4,CSU=2,ECU=4,THI=0,DTI=0,STI=1
                 7        ,IAD=0,PRB */
        8        8        /**/
        9        9        /*P* NAME:         FOI$COM
       10       10             PURPOSE:      To contain certain routines common to OUTSYM,
       11       11                           INSYM, and other processors.
       12       12             DESCRIPTION:  See the *F* commentary
       13       13        */
       14       14        FOI$COM: PROC (SEGCB,BUF$,XSIZ,PARM4) ALTRET;
       15       15        /**/
       16       16
       17       17
       18       18
       19       19        /**/
       20       20        /*  INCLUDES  */
       21       21        /**/
       22       22        %INCLUDE CP_6;
       23      103        %INCLUDE FOO_MAC_C;
       24      851        %INCLUDE B_SEGIDS_C;
       25     1390        %INCLUDE J_ERRORS_C;
       26     1477        %INCLUDE IR_DATA_M;
       27     1641        %INCLUDE UE_ERRORS_C;
       28     1659
       29     1660
       30     1661
       31     1662        /**/
       32     1663        /* PARAMETERS */
       33     1664        /**/
       34     1665        %FO_SCB  (FPTN=SEGCB,STCLASS="");
       35     1695    1   DCL BUF$ PTR;
       36     1696    1   DCL 1 SCRFCG REDEF BUF$,
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:2    
       37     1697    1         2 F BIT(12) UNAL,
       38     1698    1         2 * BIT(24) UNAL;
       39     1699    1   DCL XSIZ UBIN;
       40     1700    1   DCL 1 SCRMID REDEF XSIZ,
       41     1701    1         2 M BIT(06) UNAL,
       42     1702    1         2 * BIT(30) UNAL;
       43     1703    1   DCL PARM4 UBIN;
       44     1704
       45     1705
       46     1706
       47     1707        /**/
       48     1708        /* BASED STRUCTURES */
       49     1709        /**/
       50     1710    1   DCL B$$PTR PTR BASED ALIGNED;
       51     1711    1   DCL 1 B$FRAME BASED ALIGNED,
       52     1712    1         2 LNK$ PTR UNAL,
       53     1713    1         2 SIZE UBIN WORD UNAL;
       54     1714    1   DCL B$$WORD UBIN BASED ALIGNED;
       55     1715        %B$TCB;
       56     1718        %B$ALT;
       57     1726    1   DCL B$$CHAR8 CHAR(8) BASED CALIGNED;
       58     1727        %RV_DFNAME (NAME=RV$DFNAME,STCLASS=BASED);
       59     1731
       60     1732
       61     1733
       62     1734        /**/
       63     1735        /* AUTO */
       64     1736        /**/
       65     1737    1   DCL SEGN UBIN WORD;
       66     1738    1   DCL I UBIN WORD;
       67     1739    1   DCL P$ PTR;
       68     1740    1   DCL PP$ PTR;
       69     1741    1   DCL PSIZE SBIN WORD;
       70     1742    1   DCL OFFSET SBIN WORD;
       71     1743    1   DCL ALLOSIZE UBIN WORD;
       72     1744    1   DCL GSIZE UBIN;
       73     1745    1   DCL SLEEPER UBIN;
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:3    
       74     1746    1   DCL GO UBIN;
       75     1747
       76     1748
       77     1749
       78     1750        /**/
       79     1751        /* STATIC */
       80     1752        /**/
       81     1753        %VLP_NAME (FPTN=MYNAME,NAME='12345678',STCLASS=STATIC);
       82     1780        %RV_DFNAME (NAME=RV_DFNAME,STCLASS=STATIC);
       83     1784    1   DCL JITERR BIT(36) STATIC DALIGNED;
       84     1785        %VLP_SCODE         (FPTN = SNAPCODE,
       85     1786                 STCLASS   = STATIC,
       86     1787                 SEV       = SEV_SNAP,
       87     1788                 MON       = NO,
       88     1789                 CFUS      = YES,
       89     1790                 CUSR      = YES,
       90     1791                 SPBUF     = YES,
       91     1792                 FMBUF     = YES,
       92     1793                 ROSEG     = YES,
       93     1794                 ISEG      = YES,
       94     1795                 DDSEG     = YES,
       95     1796                 DBSEG     = YES,
       96     1797                 ASLSEG    = YES,
       97     1798                 CPSEG     = YES,
       98     1799                 LDCTS     = YES,
       99     1800                 CWSPT     = YES,
      100     1801                 CGDATA    = YES,
      101     1802                 CURCG     = YES);
      102     1863        %VLP_SCREECH      (FPTN = SCREECHCODE,
      103     1864                 STCLASS   = STATIC,
      104     1865                 SEV       = SEV_SCREECH,
      105     1866                 MON       = NO,
      106     1867                 LRM       = NO,
      107     1868                 ASAVE     = NO,
      108     1869                 ENQ       = NO,
      109     1870                 DS5       = NO,
      110     1871                 DS6       = NO,
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:4    
      111     1872                 DS7       = NO,
      112     1873                 PPUT      = NO,
      113     1874                 PMDATA    = NO,
      114     1875                 MPROC     = NO,
      115     1876                 ALLUSR    = NO);
      116     1946
      117     1947
      118     1948
      119     1949        /**/
      120     1950        /* REFS */
      121     1951        /**/
      122     1952    1   DCL B$TCB$ PTR SYMREF;
      123     1953
      124     1954
      125     1955
      126     1956        /**/
      127     1957        /* CONSTANT */
      128     1958        /**/
      129     1959    1   DCL SEGIDS(0:8) BIT(36) CONSTANT INIT('0'O*2,%DS2SID,
      130     1960    1       %DS3SID,%DS4SID,%DS5SID,%DS6SID,%DS7SID,%DS8SID);
      131     1961        %VLP_ACCT (FPTN=SYSACCT,ACCT=':SYS',STCLASS=CONSTANT);
      132     1974
      133     1975
      134     1976
      135     1977        /**/
      136     1978        /* PMME FPTS */
      137     1979        /**/
      138     1980        %FPT_GDS (FPTN=GDS,STCLASS=STATIC,FREE=YES,SEGSIZE=0,RESULTS=GDSVEC);
      139     1996        %VLP_VECTOR (FPTN=GDSVEC,STCLASS=STATIC);
      140     2011        %FPT_FDS (FPTN=FDS,STCLASS=STATIC,RESULTS=GDSVEC);
      141     2026        %FPT_JOBSTATS      (FPTN=REMAPIT,
      142     2027                 ORDER     = REMAP,
      143     2028                 STCLASS   = STATIC);
      144     2048        %FPT_SCREECH                           (FPTN=SCREECH,
      145     2049                 JERR      = JITERR,
      146     2050                 SCODE     = SCREECHCODE,
      147     2051                 STCLASS   = CONSTANT);
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:5    
      148     2065        %FPT_SCREECH                           (FPTN=SNAP,
      149     2066                 JERR      = JITERR,
      150     2067                 SCREECHID = RV_DFNAME,
      151     2068                 SCODE     = SNAPCODE,
      152     2069                 STCLASS   = CONSTANT);
      153     2083        %FPT_WAIT                              (FPTN=SLEEP10,
      154     2084                 UNITS     = 10,
      155     2085                 STCLASS   = CONSTANT);
      156     2099        %FPT_LDTRC                            (FPTN=LDTRC,
      157     2100                 NAME      = MYNAME,
      158     2101                 ACCT      = SYSACCT,
      159     2102                 STCLASS   = CONSTANT);
      160     2120        %FPT_XCON                             (FPTN=ZAPXCON,
      161     2121                 UENTRY    = NIL,
      162     2122                 STCLASS   = CONSTANT);
      163     2136
      164     2137
      165     2138
      166     2139        /**/
      167     2140        /* SUBS */
      168     2141        /**/
      169     2142        %SUB B$ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE;
      170     2143        %EJECT;
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:6    
      171     2144        /**/
      172     2145        /*F* NAME:         FOI$SNAP
      173     2146             PURPOSE:      To take SNAP dumps for system ghosts
      174     2147             CALL:         FOI$SNAP (SCODE,FCG,MID[,DFNAME])
      175     2148             DESCRIPTION:  The parameters are the same as for FOI$CRASH,
      176     2149                           except for the optional DFNAME, which is an
      177     2150                           RV_DFNAME into which is returned the name of
      178     2151                           the dumpfile to be created.
      179     2152
      180     2153                           A SNAP dump is produced.  If the system dump
      181     2154                           area is busy, we will wait & try again
      182     2155                           periodically for up to 60 seconds, and then
      183     2156                           ALTRET. */
      184     2157    1   FOI$SNAP: ENTRY (SEGCB,BUF$,XSIZ,PARM4) ALTRET;
      185     2158        /**/
      186     2159    1         CALL SNAPPER ALTRET(ALTRT);
      187     2160    1         RETURN;
      188     2161        /**/
      189     2162    1   SNAPPER: PROC ALTRET;
      190     2163        /**/
      191     2164    2   DCL RENV UBIN;
      192     2165    2   DCL RTNAME UBIN;
      193     2166        /**/
      194     2167    2         RTNAME=1;
      195     2168    2         GOTO DOIT;
      196     2169        /**/
      197     2170    2   SNAPPER1: ENTRY ALTRET; /* Doesn't try to return df name */
      198     2171        /**/
      199     2172    2         RTNAME=0;
      200     2173    2   DOIT: ;
      201     2174    2         JITERR=B$TCB$->B$TCB.ALT$->B$ALT.ERR;
      202     2175    2         RENV=0;
      203     2176    2         CALL M$SENV ALTRET(NOSENV);
      204     2177    2         RENV=1;
      205     2178    2   NOSENV:;
      206     2179    2         SLEEPER=0;
      207     2180    2   SNAP: ;
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:7    
      208     2181    2         SNAPCODE.CODE#=ADDR(SEGCB)->B$$WORD;
      209     2182    2         SNAPCODE.FCG# =SCRFCG.F;
      210     2183    2         SNAPCODE.MID# =SCRMID.M;
      211     2184    2         CALL M$SCREECH (SNAP) ALTRET(SNAPALT);
      212     2185    2         IF ADDR(PARM4) ~= ADDR(NIL) THEN
      213     2186    2          IF RTNAME ~= 0 THEN
      214     2187    2           ADDR(PARM4)->RV$DFNAME=RV_DFNAME;
      215     2188    2         IF RENV ~= 0 THEN CALL M$RENV;
      216     2189    2         RETURN;
      217     2190    2   SNAPALT:;
      218     2191    2         IF B$ERRCODE ~= %E$DFBUSY THEN GOTO ALTOUT;
      219     2192    2         SLEEPER=SLEEPER+1;
      220     2193    2         IF SLEEPER > 6 THEN
      221     2194    3           DO;
      222     2195    3   ALTOUT: ;
      223     2196    3           IF RENV ~= 0 THEN CALL M$RENV;
      224     2197    3           ALTRETURN;
      225     2198    3           END;
      226     2199    2         CALL M$WAIT (SLEEP10) ALTRET(SNAP);
      227     2200    2         GOTO SNAP;
      228     2201    2   END SNAPPER;
      229     2202        /**/
      230     2203        /*F* NAME:         FOI$CRASH
      231     2204             PURPOSE:      To initiate SCREECHes for system ghosts
      232     2205             CALL:         FOI$CRASH (SCODE,FCG,MID)
      233     2206             DESCRIPTION:  SCODE is the screech code; FCG and MID together
      234     2207                           form the identification of the caller and are
      235     2208                           placed in the M$SCREECH FPT.
      236     2209
      237     2210                           A full recovery is initiated.  If the operator
      238     2211                           uses XDELTA to say 'GO', then we cause the
      239     2212                           SCREECH again. */
      240     2213    1   FOI$CRASH: ENTRY (SEGCB,BUF$,XSIZ) ALTRET; /* !!Doesn't ALTRET!! */
      241     2214        /**/
      242     2215    1         GO=0;
      243     2216    1         GOTO CRASH;
      244     2217        /**/
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:8    
      245     2218        /*F* NAME:         FOI$CRASHGO
      246     2219             PURPOSE:      To initiate SCREECHes for system ghosts
      247     2220             CALL:         FOI$CRASHGO (SCODE,FCG,MID)
      248     2221             DESCRIPTION:  Same as FOI$CRASH except RETURNs if the operator
      249     2222                           says G to XDELTA. */
      250     2223    1   FOI$CRASHGO: ENTRY (SEGCB,BUF$,XSIZ) ALTRET; /* !!Doesn't ALTRET!! */
      251     2224        /**/
      252     2225    1         GO=1;
      253     2226    1   CRASH:;
      254     2227                                /* SAVE OLD JIT.ERR CODE */
      255     2228    1         JITERR=B$TCB$->B$TCB.ALT$->B$ALT.ERR;
      256     2229    1         SCREECHCODE.CODE#=ADDR(SEGCB)->B$$WORD;
      257     2230    1         SCREECHCODE.FCG# =SCRFCG.F;
      258     2231    1         SCREECHCODE.MID# =SCRMID.M;
      259     2232    1   SCR:  ;
      260     2233    1         CALL M$SCREECH (SCREECH);
      261     2234    1         IF GO = 0 THEN GOTO SCR;
      262     2235    1         RETURN;
      263     2236        /**/
      264     2237        /*F* NAME:         FOI$LDTRC
      265     2238             PURPOSE:      To SNAP and LDTRC for a system ghost
      266     2239             CALL:         FOI$LDTRC (SCODE,FCG,MID,NAME)
      267     2240             DESCRIPTION:  The parameters are the same as for FOI$CRASH,
      268     2241                           plus NAME which is the 8-character (blank-
      269     2242                           padded if necessary out to 8) name of the
      270     2243                           RU to LDTRC to (i.e. the name of the ghost).
      271     2244
      272     2245                           If SCODE is in fact passed, then
      273     2246                           a SNAP dump is produced as for FOI$SNAP.  In any
      274     2247                           case we then LDTRC to the correct RU. */
      275     2248    1   FOI$LDTRC: ENTRY (SEGCB,BUF$,XSIZ,PARM4) ALTRET; /* !!Doesn't ALTRET!! */
      276     2249        /**/
      277     2250    1         IF ADDR(SEGCB) ~= ADDR(NIL) THEN
      278     2251    1          CALL SNAPPER1;
      279     2252    1         CALL INDEX (I,' ',ADDR(PARM4)->B$$CHAR8);
      280     2253    1         MYNAME.L#=I;
      281     2254    1         MYNAME.NAME#=ADDR(PARM4)->B$$CHAR8;
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:9    
      282     2255    1         CALL M$XCON (ZAPXCON);
      283     2256    1         CALL M$LDTRC (LDTRC);
      284     2257        %EJECT;
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:10   
      285     2258        /**/
      286     2259        /*F* NAME:         FOI$GBLK
      287     2260             PURPOSE:      To allocate a block of memory from a dynamic
      288     2261                           data segment.
      289     2262             CALL:         FOI$GBLK (SEGCB,BUF$,SIZE)
      290     2263             DESCRIPTION:  SEGCB is the segment control block built by
      291     2264                           the macro FO_SCB.  This control block must
      292     2265                           be inited by the macro, and is used by this
      293     2266                           routine.
      294     2267                           BUF$ is the returned pointer to the buffer,
      295     2268                           ADDR(NIL) if none.  SIZE is the desired block
      296     2269                           size in words.
      297     2270        */
      298     2271    1   FOI$GBLK: ENTRY (SEGCB,BUF$,XSIZ) ALTRET;
      299     2272        /**/
      300     2273    1         GSIZE=XSIZ;
      301     2274    1         GOTO GBUF;
      302     2275        /**/
      303     2276        /*F* NAME:         FOI$GBUF
      304     2277             PURPOSE:      To allocate a frame from a data segment
      305     2278             DESCRIPTION:  Same as FOI$GBLK but the desired size is
      306     2279                           SEGCB.SIZ.
      307     2280        */
      308     2281    1   FOI$GBUF: ENTRY (SEGCB,BUF$) ALTRET;
      309     2282        /**/
      310     2283                                      /* Get the size of the new frame. */
      311     2284    1         GSIZE=SEGCB.SIZ;
      312     2285    1   GBUF: ;
      313     2286                                      /* Get the data segment number from
      314     2287                                         which we will get the frame. */
      315     2288    1         SEGN=SEGCB.SEGN;
      316     2289                                      /* If none of the requested segment has
      317     2290                                         already been allocated for other frames
      318     2291                                         set ALLOWSIZE equal to the size of
      319     2292                                         frame * the number of frames.  Init
      320     2293                                         the size of the frame we are about to
      321     2294                                         aquire.  And set the free head and
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:11   
      322     2295                                         free tail pointers to the beginning
      323     2296                                         of the data segment. */
      324     2297    1         IF SEGCB.ALLOSIZE = 0 THEN
      325     2298    2           DO;
      326     2299                                /* FIRST TIME THRU */
      327     2300    2           SEGCB.ALLOSIZE=((SEGCB.PGCNT*1024)/SEGCB.SIZ)*SEGCB.SIZ;
      328     2301    2           IF SEGN < 2 THEN CALL M$XXX;
      329     2302    2           SEGCB.SEGSIZE=0;
      330     2303    2           SEGCB.FTL$=ADDR(NIL);
      331     2304    2           SEGCB.FHD$=ADDR(NIL);
      332     2305                                      /* If we dont come to an even boundary
      333     2306                                         and there is a perfect fit, add a
      334     2307                                         frame.  Otherwise there is an excess,
      335     2308                                         decrease the size by 1 frame. */
      336     2309    2           IF MOD(SEGCB.ALLOSIZE,2) ~= 0 THEN
      337     2310    3             DO;
      338     2311    3             IF SEGCB.ALLOSIZE = SEGCB.SIZ THEN
      339     2312    3              SEGCB.ALLOSIZE=SEGCB.ALLOSIZE+SEGCB.SIZ;
      340     2313    3             ELSE SEGCB.ALLOSIZE=SEGCB.ALLOSIZE-SEGCB.SIZ;
      341     2314    3             END;
      342     2315    2           END;
      343     2316    1   GET:  ;
      344     2317    1         PP$=ADDR(SEGCB.FHD$);
      345     2318    1         BUF$=SEGCB.FHD$;
      346     2319                                      /* Do while we have free frames. */
      347     2320    2           DO WHILE (BUF$ ~= ADDR(NIL));
      348     2321                                      /* If the size of the free frame is
      349     2322                                         exactly equal to the size of the
      350     2323                                         frame we need, then splice the free
      351     2324                                         frame from the free frame chain. */
      352     2325    2           IF BUF$->B$FRAME.SIZE = GSIZE THEN
      353     2326    3             DO;
      354     2327    3             PP$->B$$PTR=BUF$->B$FRAME.LNK$;
      355     2328    3             IF BUF$->B$FRAME.LNK$ = ADDR(NIL) THEN
      356     2329    3              IF PP$ = ADDR(SEGCB.FHD$) THEN
      357     2330    3               SEGCB.FTL$=ADDR(NIL);
      358     2331    3              ELSE
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:12   
      359     2332    3               SEGCB.FTL$=PP$;
      360     2333    3             RETURN;
      361     2334    3             END;
      362     2335    2           ELSE
      363     2336                                      /* Else, if there's more space in this
      364     2337                                         frame than we need, incr the pointer
      365     2338                                         to the beginning of the free block
      366     2339                                         by the length we need (thus shrinking
      367     2340                                         the free frame).  BUF$ now points to
      368     2341                                         the beginning of the aquired frame,
      369     2342                                         and P$ points to the beginning of the
      370     2343                                         current free block. */
      371     2344    2            IF BUF$->B$FRAME.SIZE >= GSIZE+SIZEW(B$FRAME) THEN
      372     2345    3              DO;
      373     2346    3              P$=PINCRW(BUF$,GSIZE);
      374     2347    3              P$->B$FRAME.LNK$=BUF$->B$FRAME.LNK$;
      375     2348    3              P$->B$FRAME.SIZE=BUF$->B$FRAME.SIZE-GSIZE;
      376     2349    3              PP$->B$$PTR=P$;
      377     2350    3              IF SEGCB.FTL$=BUF$ THEN
      378     2351    3               SEGCB.FTL$=P$;
      379     2352    3              RETURN;
      380     2353    3              END;
      381     2354                                      /* Reference the next free frame. */
      382     2355    2           PP$=ADDR(BUF$->B$FRAME.LNK$);
      383     2356    2           BUF$=BUF$->B$FRAME.LNK$;
      384     2357    2           END;
      385     2358                                      /* We only come down here if we need to
      386     2359                                         get more space. */
      387     2360    1         GDSVEC.W2.SEGID#=SEGIDS(SEGN);
      388     2361    1         GDS.V.SEGSIZE#=SEGCB.ALLOSIZE;
      389     2362    1         CALL M$GDS(GDS) ALTRET(NOGOT);
      390     2363    1         IF SEGCB.JPMME THEN
      391     2364    2           DO;
      392     2365    2           REMAPIT.V.STATSEG#=SEGCB.JSSEG;
      393     2366    2           REMAPIT.BUF_=GDSVEC;
      394     2367    2           CALL M$JOBSTATS (REMAPIT) ALTRET(NOGOT1);
      395     2368    2           END;
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:13   
      396     2369    1         SEGCB.SEG$=GDSVEC.PTR$;
      397     2370                                      /* Set BUF$ to the beginning of the area
      398     2371                                         just aquired.  SEGSIZE is the total
      399     2372                                         space currently aquired in the data
      400     2373                                         segment.  Set the free head pointer
      401     2374                                         and the free tail pointer to the
      402     2375                                         beginning of the space just aquired.
      403     2376                                         The area just aquired is the only
      404     2377                                         frame currently in the free chain,
      405     2378                                         and it's size is equal to our request
      406     2379                                         from M$GDS. */
      407     2380    1         BUF$=PINCRW(SEGCB.SEG$,SEGCB.SEGSIZE);
      408     2381    1         SEGCB.SEGSIZE=SEGCB.SEGSIZE+SEGCB.ALLOSIZE;
      409     2382    1         SEGCB.FHD$=BUF$;
      410     2383    1         SEGCB.FTL$=BUF$;
      411     2384    1         BUF$->B$FRAME.LNK$=ADDR(NIL);
      412     2385    1         BUF$->B$FRAME.SIZE=SEGCB.ALLOSIZE;
      413     2386    1         GOTO GET;
      414     2387                                /* COME HERE WHEN CANNOT MAP.  REL SPACE */
      415     2388    1   NOGOT1:;
      416     2389    1         GDSVEC.W2.SEGID#=SEGIDS(SEGN);
      417     2390    1         GDS.V.SEGSIZE#=SEGCB.ALLOSIZE;
      418     2391    1         CALL M$FDS (FDS);
      419     2392    1   ALTRT:;
      420     2393    1   NOGOT:
      421     2394    1         ALTRETURN;
      422     2395        %EJECT;
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:14   
      423     2396        /**/
      424     2397        /*F* NAME:         FOI$RBLK
      425     2398             PURPOSE:      To release a block of memory from a segment
      426     2399             DESCRIPTION:  Releases a block obtained by FOI$GBLK.
      427     2400        */
      428     2401    1   FOI$RBLK: ENTRY (SEGCB,BUF$,XSIZ) ALTRET; /* !!Doesn't ALTRET!! */
      429     2402        /**/
      430     2403    1         GSIZE=XSIZ;
      431     2404    1         GOTO RBUF;
      432     2405        /**/
      433     2406        /*F* NAME:         FOI$RBUF
      434     2407
      435     2408             PURPOSE:      To release a frame in a dynamic data segment
      436     2409
      437     2410             DESCRIPTION:  See *F* for FOI$GBUF first.
      438     2411                           FOI$RBUF maintains a chain of free frames.  Each
      439     2412                           free frame may contain more than one allocation
      440     2413                           frame (buddy system), and consists of a pointer
      441     2414                           to the next in the chain, and a count of the
      442     2415                           number of words contained within it.
      443     2416
      444     2417                           The free chain is in order by address, that is,
      445     2418                           the link in a free chain element always points
      446     2419                           to an element at a higher address.  When an
      447     2420                           allocation frame is released (a call to FOI$RBUF),
      448     2421                           the free chain is searched until the deallocated
      449     2422                           frame can be inserted at the correct spot.  This
      450     2423                           means one of: insert it as a new free element con-
      451     2424                           taining one frame, expand an extant free element
      452     2425                           by one in the lowcore direction, or expand an ex-
      453     2426                           tant free element in the highcore direction.  In
      454     2427                           the last case, a check is made to see if we now
      455     2428                           have two adjacent free elements, in which case
      456     2429                           they are coalesced.
      457     2430
      458     2431                           Space is released from the segment when a release
      459     2432                           causes the tail of the free chain to satisfy two
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:15   
      460     2433                           conditions: it is above a certain size, and it
      461     2434                           frames the end of the data segment.
      462     2435
      463     2436                           If the frame being released is illegal (i.e.
      464     2437                           points to an area already released, or points to
      465     2438                           an illegal position) we just call M$XXX. */
      466     2439    1   FOI$RBUF: ENTRY (SEGCB,BUF$) ALTRET; /* !!Doesn't ALTRET!! */
      467     2440        /**/
      468     2441                                      /* Get the size of the frame we are
      469     2442                                         about to release. */
      470     2443    1         GSIZE=SEGCB.SIZ;
      471     2444    1   RBUF: ;
      472     2445                                      /* Get the specific segment in which the
      473     2446                                         frame resides.  Get the address of the
      474     2447                                         head of the free frame chain.  Get
      475     2448                                         the head of the free frame chain. */
      476     2449    1         SEGN=SEGCB.SEGN;
      477     2450    1         PP$=ADDR(SEGCB.FHD$);
      478     2451    1         P$=SEGCB.FHD$;
      479     2452                                      /* Do while there are frames on the free
      480     2453                                         chain. */
      481     2454    2           DO WHILE (P$ ~= ADDR(NIL));
      482     2455                                      /* find the difference between the current
      483     2456                                         free frame and the frame we are about
      484     2457                                         to set free.  Then get the size of the
      485     2458                                         current free frame. */
      486     2459    2           OFFSET=POFFW(BUF$,P$);
      487     2460    2           PSIZE=P$->B$FRAME.SIZE;
      488     2461    2           IF OFFSET = -GSIZE THEN
      489     2462    3             DO;             /* REL BLK LIES JUST ON LOCORE SIDE OF THIS ONE */
      490     2463                                      /* Expand the current free frame to
      491     2464                                         include the release frame.  Note:
      492     2465                                         we should never have the adjacent
      493     2466                                         free frame problem when we expand
      494     2467                                         backward (as we do when we expand
      495     2468                                         forward) because we start at FHD.
      496     2469                                         Therefore, all adjacent free frames
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:16   
      497     2470                                         should be taken care of going forward. */
      498     2471    3             BUF$->B$FRAME.LNK$=P$->B$FRAME.LNK$;
      499     2472    3             BUF$->B$FRAME.SIZE=P$->B$FRAME.SIZE+GSIZE;
      500     2473    3             PP$->B$FRAME.LNK$=BUF$;
      501     2474    3             IF SEGCB.FTL$ ~= P$ THEN RETURN;
      502     2475    3             SEGCB.FTL$=BUF$;
      503     2476                                      /* Adjust the free pointer to include
      504     2477                                         the release frame in the current free
      505     2478                                         frame. */
      506     2479    3             P$=BUF$;
      507     2480    3             GOTO RELPMME;
      508     2481    3             END;
      509     2482    2           ELSE
      510     2483    3             DO;
      511     2484                                      /* If the offset of the release frame
      512     2485                                         from the current free frame is equal
      513     2486                                         to the size of the current frame,
      514     2487                                         expand the current free frame. */
      515     2488    3             IF OFFSET = PSIZE THEN
      516     2489    4               DO;          /* REL BLK LIES JUST ON HICORE SIDE THIS ONE    */
      517     2490    4               P$->B$FRAME.SIZE=P$->B$FRAME.SIZE+GSIZE;
      518     2491                                      /* Did we just expand the last free frame?
      519     2492                                         If not, proceed. */
      520     2493    4               IF P$->B$FRAME.LNK$ ~= ADDR(NIL) THEN
      521     2494    5                 DO;
      522     2495                                      /* After absorbing the release frame, see
      523     2496                                         if the frame next to it is a free frame.
      524     2497                                         If it is, it must also be absorbed. */
      525     2498    5                 IF PINCRW(P$,PSIZE+GSIZE) = P$->B$FRAME.LNK$ THEN
      526     2499    6                   DO;
      527     2500                                /* ATTACH TWO ADJACENT ELEMENTS OF FREE
      528     2501                                   CHAIN */
      529     2502    6                   P$->B$FRAME.SIZE=P$->B$FRAME.SIZE+P$->B$FRAME.LNK$->B$FRAME.SIZE;
      530     2503    6                   P$->B$FRAME.LNK$=P$->B$FRAME.LNK$->B$FRAME.LNK$;
      531     2504    6                   IF P$->B$FRAME.LNK$ = ADDR(NIL) THEN SEGCB.FTL$=P$;
      532     2505    6                   END;
      533     2506    5                 END;
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:17   
      534     2507                                      /* If we are currently pointing to the
      535     2508                                         free tail, then... */
      536     2509    4               IF SEGCB.FTL$=P$ THEN
      537     2510    5                 DO;
      538     2511    5   RELPMME:
      539     2512                                      /* Get the size of the current free frame. */
      540     2513
      541     2514    5                 PSIZE=P$->B$FRAME.SIZE;
      542     2515    5                 IF PSIZE < SEGCB.ALLOSIZE THEN RETURN;
      543     2516                                      /* Get the difference between the beginning
      544     2517                                         of this data segment and the beginning
      545     2518                                         of the current free frame.  Add the
      546     2519                                         size of the free frame.  If we are
      547     2520                                         dealing with the absolute last frame
      548     2521                                         in the segment, then FDS. */
      549     2522    5                 I=PSIZE+POFFW(P$,SEGCB.SEG$);
      550     2523    5                 IF I = SEGCB.SEGSIZE THEN
      551     2524    6                   DO;
      552     2525                                /* ONLY RELEASE FROM TAIL OF FREE CHAIN,
      553     2526                                   AND THEN ONLY WHEN THE TAIL ELEMENT
      554     2527                                   FRAMES THE LAST WORDS IN THE SEGMENT */
      555     2528    6                   GDSVEC.W2.SEGID#=SEGIDS(SEGN);
      556     2529    6                   IF MOD (PSIZE,2) ~= 0 THEN RETURN;
      557     2530    6                   FDS.V.SEGSIZE#=PSIZE;
      558     2531    6                   CALL M$FDS (FDS);
      559     2532    6                   IF P$ = SEGCB.FHD$ THEN
      560     2533    7                     DO;
      561     2534    7                     SEGCB.FHD$=ADDR(NIL);
      562     2535    7                     SEGCB.FTL$=ADDR(NIL);
      563     2536    7                     END;
      564     2537    6                   ELSE
      565     2538    7                     DO;
      566     2539    7                     PP$->B$FRAME.LNK$=ADDR(NIL);
      567     2540    7                     SEGCB.FTL$=PP$;
      568     2541    7                     END;
      569     2542    6                   SEGCB.SEGSIZE=SEGCB.SEGSIZE-PSIZE;
      570     2543    6                   IF SEGCB.JPMME THEN
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:18   
      571     2544    7                     DO;
      572     2545    7                     REMAPIT.V.STATSEG#=SEGCB.JSSEG;
      573     2546    7                     REMAPIT.BUF_=GDSVEC;
      574     2547    7                     CALL M$JOBSTATS (REMAPIT);
      575     2548    7                     END; /* End I = SEGCB.SEGSIZE */
      576     2549    6                   END;      /* End SEGCG.FTL$ = P$   */
      577     2550    5                 END;           /* End P$->B$FRAME.LNK$ = ADDR (NIL) */
      578     2551    4               RETURN;
      579     2552    4               END;           /* End OFFSET = PSIZE */
      580     2553    3             ELSE
      581     2554    4               DO;
      582     2555                                      /* Release frame is much higher (in core)
      583     2556                                         than our current frame, get next free
      584     2557                                         frame and try again. */
      585     2558    4               IF OFFSET > 0 THEN
      586     2559    5                 DO;
      587     2560    5                 PP$=P$;
      588     2561    5                 P$=P$->B$FRAME.LNK$;
      589     2562    5                 END;
      590     2563    4               ELSE
      591     2564    5                 DO;
      592     2565                                      /* Here there is no free frame on either
      593     2566                                         side of the release frame.  Splice it
      594     2567                                         into the free chain. */
      595     2568    5                 BUF$->B$FRAME.LNK$=P$;
      596     2569    5                 BUF$->B$FRAME.SIZE=GSIZE;
      597     2570    5                 PP$->B$FRAME.LNK$=BUF$;
      598     2571    5                 RETURN;
      599     2572    5                 END;
      600     2573    4               END;
      601     2574    3             END;           /* End ELSE */
      602     2575    2           END;                /* End DO WHILE */
      603     2576                                                /**/
      604     2577                                      /* Only come down here if there no
      605     2578                                         current free frames. */
      606     2579    1         IF PP$ ~= ADDR(SEGCB.FHD$) THEN
      607     2580    2           DO;
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:19   
      608     2581    2           IF PP$ ~= SEGCB.FTL$ THEN CALL M$XXX;
      609     2582    2           END;
      610     2583    1         SEGCB.FTL$=BUF$;
      611     2584    1         BUF$->B$FRAME.SIZE=GSIZE;
      612     2585    1         BUF$->B$FRAME.LNK$=ADDR(NIL);
      613     2586    1         PP$->B$FRAME.LNK$=BUF$;
      614     2587    1         P$=BUF$;
      615     2588    1         GOTO RELPMME;
      616     2589    1   END FOI$COM;

PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:20   
--  Include file information  --

   UE_ERRORS_C.:E05TOU  is referenced.
   IR_DATA_M.:E05TOU  is referenced.
   J_ERRORS_C.:E05TOU  is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   FOO_MAC_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FOI$COM.

   Procedure FOI$COM requires 494 words for executable code.
   Procedure FOI$COM requires 24 words of local(AUTO) storage.

    No errors detected in file FOI$COM.:E05TSI    .

PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:21   

 Object Unit name= FOI$COM                                    File name= FOI$COM.:E05TOU
 UTS= JUL 29 '97 17:08:40.12 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    64    100  FOI$COM
    2  RoData even  UTS     52     64  FOI$COM
    3   Proc  even  none   494    756  FOI$COM
    4  RoData even  none     1      1  FOI$COM

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        4  FOI$COM
     3      3          yes     yes      Std        4  FOI$SNAP
     3    117          yes     yes      Std        3  FOI$CRASH
     3    123          yes     yes      Std        3  FOI$CRASHGO
     3    156          yes     yes      Std        4  FOI$LDTRC
     3    207          yes     yes      Std        3  FOI$GBLK
     3    215          yes     yes      Std        2  FOI$GBUF
     3    456          yes     yes      Std        3  FOI$RBLK
     3    464          yes     yes      Std        2  FOI$RBUF
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:22   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_4
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:23   


        1        1        /*M* FOI$COM  Common routines for INSYM and OUTSYM ghosts */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7       /*X* DMC,PLM=6,IND=0,IDT=2,SDI=2,CTI=0,ENU=0,AND,DCI=4,CSU=2,ECU=4,THI=0,DTI=0,STI=1
                 7        ,IAD=0,PRB */
        8        8        /**/
        9        9        /*P* NAME:         FOI$COM
       10       10             PURPOSE:      To contain certain routines common to OUTSYM,
       11       11                           INSYM, and other processors.
       12       12             DESCRIPTION:  See the *F* commentary
       13       13        */
       14       14        FOI$COM: PROC (SEGCB,BUF$,XSIZ,PARM4) ALTRET;

     14  3 000000   000000 700200 xent  FOI$COM      TSX0  ! X66_AUTO_4
         3 000001   000030 000004                    ZERO    24,4
         3 000002   000005 710000 3                  TRA     s:2159

       15       15        /**/
       16       16
       17       17
       18       18
       19       19        /**/
       20       20        /*  INCLUDES  */
       21       21        /**/
       22       22        %INCLUDE CP_6;
       23      103        %INCLUDE FOO_MAC_C;
       24      851        %INCLUDE B_SEGIDS_C;
       25     1390        %INCLUDE J_ERRORS_C;
       26     1477        %INCLUDE IR_DATA_M;
       27     1641        %INCLUDE UE_ERRORS_C;
       28     1659
       29     1660
       30     1661
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:24   
       31     1662        /**/
       32     1663        /* PARAMETERS */
       33     1664        /**/
       34     1665        %FO_SCB  (FPTN=SEGCB,STCLASS="");
       35     1695    1   DCL BUF$ PTR;
       36     1696    1   DCL 1 SCRFCG REDEF BUF$,
       37     1697    1         2 F BIT(12) UNAL,
       38     1698    1         2 * BIT(24) UNAL;
       39     1699    1   DCL XSIZ UBIN;
       40     1700    1   DCL 1 SCRMID REDEF XSIZ,
       41     1701    1         2 M BIT(06) UNAL,
       42     1702    1         2 * BIT(30) UNAL;
       43     1703    1   DCL PARM4 UBIN;
       44     1704
       45     1705
       46     1706
       47     1707        /**/
       48     1708        /* BASED STRUCTURES */
       49     1709        /**/
       50     1710    1   DCL B$$PTR PTR BASED ALIGNED;
       51     1711    1   DCL 1 B$FRAME BASED ALIGNED,
       52     1712    1         2 LNK$ PTR UNAL,
       53     1713    1         2 SIZE UBIN WORD UNAL;
       54     1714    1   DCL B$$WORD UBIN BASED ALIGNED;
       55     1715        %B$TCB;
       56     1718        %B$ALT;
       57     1726    1   DCL B$$CHAR8 CHAR(8) BASED CALIGNED;
       58     1727        %RV_DFNAME (NAME=RV$DFNAME,STCLASS=BASED);
       59     1731
       60     1732
       61     1733
       62     1734        /**/
       63     1735        /* AUTO */
       64     1736        /**/
       65     1737    1   DCL SEGN UBIN WORD;
       66     1738    1   DCL I UBIN WORD;
       67     1739    1   DCL P$ PTR;
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:25   
       68     1740    1   DCL PP$ PTR;
       69     1741    1   DCL PSIZE SBIN WORD;
       70     1742    1   DCL OFFSET SBIN WORD;
       71     1743    1   DCL ALLOSIZE UBIN WORD;
       72     1744    1   DCL GSIZE UBIN;
       73     1745    1   DCL SLEEPER UBIN;
       74     1746    1   DCL GO UBIN;
       75     1747
       76     1748
       77     1749
       78     1750        /**/
       79     1751        /* STATIC */
       80     1752        /**/
       81     1753        %VLP_NAME (FPTN=MYNAME,NAME='12345678',STCLASS=STATIC);
       82     1780        %RV_DFNAME (NAME=RV_DFNAME,STCLASS=STATIC);
       83     1784    1   DCL JITERR BIT(36) STATIC DALIGNED;
       84     1785        %VLP_SCODE         (FPTN = SNAPCODE,
       85     1786                 STCLASS   = STATIC,
       86     1787                 SEV       = SEV_SNAP,
       87     1788                 MON       = NO,
       88     1789                 CFUS      = YES,
       89     1790                 CUSR      = YES,
       90     1791                 SPBUF     = YES,
       91     1792                 FMBUF     = YES,
       92     1793                 ROSEG     = YES,
       93     1794                 ISEG      = YES,
       94     1795                 DDSEG     = YES,
       95     1796                 DBSEG     = YES,
       96     1797                 ASLSEG    = YES,
       97     1798                 CPSEG     = YES,
       98     1799                 LDCTS     = YES,
       99     1800                 CWSPT     = YES,
      100     1801                 CGDATA    = YES,
      101     1802                 CURCG     = YES);
      102     1863        %VLP_SCREECH      (FPTN = SCREECHCODE,
      103     1864                 STCLASS   = STATIC,
      104     1865                 SEV       = SEV_SCREECH,
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:26   
      105     1866                 MON       = NO,
      106     1867                 LRM       = NO,
      107     1868                 ASAVE     = NO,
      108     1869                 ENQ       = NO,
      109     1870                 DS5       = NO,
      110     1871                 DS6       = NO,
      111     1872                 DS7       = NO,
      112     1873                 PPUT      = NO,
      113     1874                 PMDATA    = NO,
      114     1875                 MPROC     = NO,
      115     1876                 ALLUSR    = NO);
      116     1946
      117     1947
      118     1948
      119     1949        /**/
      120     1950        /* REFS */
      121     1951        /**/
      122     1952    1   DCL B$TCB$ PTR SYMREF;
      123     1953
      124     1954
      125     1955
      126     1956        /**/
      127     1957        /* CONSTANT */
      128     1958        /**/
      129     1959    1   DCL SEGIDS(0:8) BIT(36) CONSTANT INIT('0'O*2,%DS2SID,
      130     1960    1       %DS3SID,%DS4SID,%DS5SID,%DS6SID,%DS7SID,%DS8SID);
      131     1961        %VLP_ACCT (FPTN=SYSACCT,ACCT=':SYS',STCLASS=CONSTANT);
      132     1974
      133     1975
      134     1976
      135     1977        /**/
      136     1978        /* PMME FPTS */
      137     1979        /**/
      138     1980        %FPT_GDS (FPTN=GDS,STCLASS=STATIC,FREE=YES,SEGSIZE=0,RESULTS=GDSVEC);
      139     1996        %VLP_VECTOR (FPTN=GDSVEC,STCLASS=STATIC);
      140     2011        %FPT_FDS (FPTN=FDS,STCLASS=STATIC,RESULTS=GDSVEC);
      141     2026        %FPT_JOBSTATS      (FPTN=REMAPIT,
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:27   
      142     2027                 ORDER     = REMAP,
      143     2028                 STCLASS   = STATIC);
      144     2048        %FPT_SCREECH                           (FPTN=SCREECH,
      145     2049                 JERR      = JITERR,
      146     2050                 SCODE     = SCREECHCODE,
      147     2051                 STCLASS   = CONSTANT);
      148     2065        %FPT_SCREECH                           (FPTN=SNAP,
      149     2066                 JERR      = JITERR,
      150     2067                 SCREECHID = RV_DFNAME,
      151     2068                 SCODE     = SNAPCODE,
      152     2069                 STCLASS   = CONSTANT);
      153     2083        %FPT_WAIT                              (FPTN=SLEEP10,
      154     2084                 UNITS     = 10,
      155     2085                 STCLASS   = CONSTANT);
      156     2099        %FPT_LDTRC                            (FPTN=LDTRC,
      157     2100                 NAME      = MYNAME,
      158     2101                 ACCT      = SYSACCT,
      159     2102                 STCLASS   = CONSTANT);
      160     2120        %FPT_XCON                             (FPTN=ZAPXCON,
      161     2121                 UENTRY    = NIL,
      162     2122                 STCLASS   = CONSTANT);
      163     2136
      164     2137
      165     2138
      166     2139        /**/
      167     2140        /* SUBS */
      168     2141        /**/
      169     2142        %SUB B$ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE;
      170     2143        %EJECT;
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:28   
      171     2144        /**/
      172     2145        /*F* NAME:         FOI$SNAP
      173     2146             PURPOSE:      To take SNAP dumps for system ghosts
      174     2147             CALL:         FOI$SNAP (SCODE,FCG,MID[,DFNAME])
      175     2148             DESCRIPTION:  The parameters are the same as for FOI$CRASH,
      176     2149                           except for the optional DFNAME, which is an
      177     2150                           RV_DFNAME into which is returned the name of
      178     2151                           the dumpfile to be created.
      179     2152
      180     2153                           A SNAP dump is produced.  If the system dump
      181     2154                           area is busy, we will wait & try again
      182     2155                           periodically for up to 60 seconds, and then
      183     2156                           ALTRET. */
      184     2157    1   FOI$SNAP: ENTRY (SEGCB,BUF$,XSIZ,PARM4) ALTRET;

   2157  3 000003   000000 700200 xent  FOI$SNAP     TSX0  ! X66_AUTO_4
         3 000004   000030 000004                    ZERO    24,4

      185     2158        /**/
      186     2159    1         CALL SNAPPER ALTRET(ALTRT);

   2159  3 000005   000010 701000 3                  TSX1    SNAPPER
         3 000006   000455 702000 3                  TSX2    ALTRT

      187     2160    1         RETURN;

   2160  3 000007   000000 702200 xent               TSX2  ! X66_ARET

      188     2161        /**/
      189     2162    1   SNAPPER: PROC ALTRET;

   2162  3 000010   200022 741300       SNAPPER      STX1  ! GO+2,,AUTO

      190     2163        /**/
      191     2164    2   DCL RENV UBIN;
      192     2165    2   DCL RTNAME UBIN;
      193     2166        /**/
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:29   
      194     2167    2         RTNAME=1;

   2167  3 000011   000001 235007                    LDA     1,DL
         3 000012   200024 755100                    STA     RTNAME,,AUTO

      195     2168    2         GOTO DOIT;

   2168  3 000013   000016 710000 3                  TRA     DOIT

      196     2169        /**/
      197     2170    2   SNAPPER1: ENTRY ALTRET; /* Doesn't try to return df name */

   2170  3 000014   200022 741300       SNAPPER1     STX1  ! GO+2,,AUTO

      198     2171        /**/
      199     2172    2         RTNAME=0;

   2172  3 000015   200024 450100                    STZ     RTNAME,,AUTO

   2172  3 000016                       DOIT         null
      200     2173    2   DOIT: ;
      201     2174    2         JITERR=B$TCB$->B$TCB.ALT$->B$ALT.ERR;

   2174  3 000016   000000 470400 xsym               LDP0    B$TCB$
         3 000017   000000 471500                    LDP1    0,,PR0
         3 000020   100102 236100                    LDQ     66,,PR1
         3 000021   000010 756000 1                  STQ     JITERR

      202     2175    2         RENV=0;

   2175  3 000022   200023 450100                    STZ     RENV,,AUTO

      203     2176    2         CALL M$SENV ALTRET(NOSENV);

   2176  3 000023   410011 713400                    CLIMB   alt,+4105
         3 000024   000000 401760                    pmme    nvectors=0
         3 000025   000030 702000 3                  TSX2    NOSENV
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:30   

      204     2177    2         RENV=1;

   2177  3 000026   000001 235007                    LDA     1,DL
         3 000027   200023 755100                    STA     RENV,,AUTO

   2177  3 000030                       NOSENV       null
      205     2178    2   NOSENV:;
      206     2179    2         SLEEPER=0;

   2179  3 000030   200017 450100                    STZ     SLEEPER,,AUTO

   2179  3 000031                       SNAP         null
      207     2180    2   SNAP: ;
      208     2181    2         SNAPCODE.CODE#=ADDR(SEGCB)->B$$WORD;

   2181  3 000031   200003 470500                    LDP0    @SEGCB,,AUTO
         3 000032   000000 236100                    LDQ     0,,PR0
         3 000033   000003 736000                    QLS     3
         3 000034   000012 676000 1                  ERQ     SNAPCODE
         3 000035   377770 376007                    ANQ     131064,DL
         3 000036   000012 656000 1                  ERSQ    SNAPCODE

      209     2182    2         SNAPCODE.FCG# =SCRFCG.F;

   2182  3 000037   200004 471500                    LDP1    @BUF$,,AUTO
         3 000040   100000 236100                    LDQ     0,,PR1
         3 000041   000012 752060 1                  STCQ    SNAPCODE,'60'O

      210     2183    2         SNAPCODE.MID# =SCRMID.M;

   2183  3 000042   200005 473500                    LDP3    @XSIZ,,AUTO
         3 000043   300000 236100                    LDQ     0,,PR3
         3 000044   000014 772000                    QRL     12
         3 000045   000012 752010 1                  STCQ    SNAPCODE,'10'O

      211     2184    2         CALL M$SCREECH (SNAP) ALTRET(SNAPALT);
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:31   

   2184  3 000046   000022 630400 2                  EPPR0   SNAP
         3 000047   400013 713400                    CLIMB   alt,+11
         3 000050   401000 401760                    pmme    nvectors=3
         3 000051   000071 702000 3                  TSX2    SNAPALT

      212     2185    2         IF ADDR(PARM4) ~= ADDR(NIL) THEN

   2185  3 000052   200006 236100                    LDQ     @PARM4,,AUTO
         3 000053   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000054   000063 600000 3                  TZE     s:2188

      213     2186    2          IF RTNAME ~= 0 THEN

   2186  3 000055   200024 235100                    LDA     RTNAME,,AUTO
         3 000056   000063 600000 3                  TZE     s:2188

      214     2187    2           ADDR(PARM4)->RV$DFNAME=RV_DFNAME;

   2187  3 000057   200006 470500                    LDP0    @PARM4,,AUTO
         3 000060   000100 100400                    MLR     fill='000'O
         3 000061   000004 000013 1                  ADSC9   RV_DFNAME                cn=0,n=11
         3 000062   000000 000013                    ADSC9   0,,PR0                   cn=0,n=11

      215     2188    2         IF RENV ~= 0 THEN CALL M$RENV;

   2188  3 000063   200023 235100                    LDA     RENV,,AUTO
         3 000064   000067 600000 3                  TZE     s:2189

   2188  3 000065   010016 713400                    CLIMB   4110
         3 000066   000000 401760                    pmme    nvectors=0

      216     2189    2         RETURN;

   2189  3 000067   200022 221300                    LDX1  ! GO+2,,AUTO
         3 000070   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:32   
   2188  3 000071                       SNAPALT      null
      217     2190    2   SNAPALT:;
      218     2191    2         IF B$ERRCODE ~= %E$DFBUSY THEN GOTO ALTOUT;

   2191  3 000071   000000 470400 xsym               LDP0    B$TCB$
         3 000072   000000 471500                    LDP1    0,,PR0
         3 000073   100102 236100                    LDQ     66,,PR1
         3 000074   377770 376007                    ANQ     131064,DL
         3 000075   004420 116007                    CMPQ    2320,DL
         3 000076   000104 601000 3                  TNZ     ALTOUT

      219     2192    2         SLEEPER=SLEEPER+1;

   2192  3 000077   200017 235100                    LDA     SLEEPER,,AUTO
         3 000100   000001 035007                    ADLA    1,DL
         3 000101   200017 755100                    STA     SLEEPER,,AUTO

      220     2193    2         IF SLEEPER > 6 THEN

   2193  3 000102   000007 115007                    CMPA    7,DL
         3 000103   000112 602000 3                  TNC     s:2199

      221     2194    3           DO;

   2194  3 000104                       ALTOUT       null
      222     2195    3   ALTOUT: ;
      223     2196    3           IF RENV ~= 0 THEN CALL M$RENV;

   2196  3 000104   200023 235100                    LDA     RENV,,AUTO
         3 000105   000110 600000 3                  TZE     s:2197

   2196  3 000106   010016 713400                    CLIMB   4110
         3 000107   000000 401760                    pmme    nvectors=0

      224     2197    3           ALTRETURN;

   2197  3 000110   200022 221300                    LDX1  ! GO+2,,AUTO
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:33   
         3 000111   000000 702211                    TSX2  ! 0,X1

      225     2198    3           END;
      226     2199    2         CALL M$WAIT (SLEEP10) ALTRET(SNAP);

   2199  3 000112   000030 630400 2                  EPPR0   SLEEP10
         3 000113   420006 713400                    CLIMB   alt,+8198
         3 000114   400400 401760                    pmme    nvectors=2
         3 000115   000031 702000 3                  TSX2    SNAP

      227     2200    2         GOTO SNAP;

   2200  3 000116   000031 710000 3                  TRA     SNAP

      228     2201    2   END SNAPPER;
      229     2202        /**/
      230     2203        /*F* NAME:         FOI$CRASH
      231     2204             PURPOSE:      To initiate SCREECHes for system ghosts
      232     2205             CALL:         FOI$CRASH (SCODE,FCG,MID)
      233     2206             DESCRIPTION:  SCODE is the screech code; FCG and MID together
      234     2207                           form the identification of the caller and are
      235     2208                           placed in the M$SCREECH FPT.
      236     2209
      237     2210                           A full recovery is initiated.  If the operator
      238     2211                           uses XDELTA to say 'GO', then we cause the
      239     2212                           SCREECH again. */
      240     2213    1   FOI$CRASH: ENTRY (SEGCB,BUF$,XSIZ) ALTRET; /* !!Doesn't ALTRET!! */

   2213  3 000117   000000 700200 xent  FOI$CRASH    TSX0  ! X66_AUTO_4
         3 000120   000030 000004                    ZERO    24,4

      241     2214        /**/
      242     2215    1         GO=0;

   2215  3 000121   200020 450100                    STZ     GO,,AUTO

      243     2216    1         GOTO CRASH;
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:34   

   2216  3 000122   000127 710000 3                  TRA     CRASH

      244     2217        /**/
      245     2218        /*F* NAME:         FOI$CRASHGO
      246     2219             PURPOSE:      To initiate SCREECHes for system ghosts
      247     2220             CALL:         FOI$CRASHGO (SCODE,FCG,MID)
      248     2221             DESCRIPTION:  Same as FOI$CRASH except RETURNs if the operator
      249     2222                           says G to XDELTA. */
      250     2223    1   FOI$CRASHGO: ENTRY (SEGCB,BUF$,XSIZ) ALTRET; /* !!Doesn't ALTRET!! */

   2223  3 000123   000000 700200 xent  FOI$CRASHGO  TSX0  ! X66_AUTO_4
         3 000124   000030 000004                    ZERO    24,4

      251     2224        /**/
      252     2225    1         GO=1;

   2225  3 000125   000001 235007                    LDA     1,DL
         3 000126   200020 755100                    STA     GO,,AUTO

   2225  3 000127                       CRASH        null
      253     2226    1   CRASH:;
      254     2227                                /* SAVE OLD JIT.ERR CODE */
      255     2228    1         JITERR=B$TCB$->B$TCB.ALT$->B$ALT.ERR;

   2228  3 000127   000000 470400 xsym               LDP0    B$TCB$
         3 000130   000000 471500                    LDP1    0,,PR0
         3 000131   100102 236100                    LDQ     66,,PR1
         3 000132   000010 756000 1                  STQ     JITERR

      256     2229    1         SCREECHCODE.CODE#=ADDR(SEGCB)->B$$WORD;

   2229  3 000133   200003 471500                    LDP1    @SEGCB,,AUTO
         3 000134   100000 236100                    LDQ     0,,PR1
         3 000135   000003 736000                    QLS     3
         3 000136   000014 676000 1                  ERQ     SCREECHCODE
         3 000137   377770 376007                    ANQ     131064,DL
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:35   
         3 000140   000014 656000 1                  ERSQ    SCREECHCODE

      257     2230    1         SCREECHCODE.FCG# =SCRFCG.F;

   2230  3 000141   200004 473500                    LDP3    @BUF$,,AUTO
         3 000142   300000 236100                    LDQ     0,,PR3
         3 000143   000014 752060 1                  STCQ    SCREECHCODE,'60'O

      258     2231    1         SCREECHCODE.MID# =SCRMID.M;

   2231  3 000144   200005 474500                    LDP4    @XSIZ,,AUTO
         3 000145   400000 236100                    LDQ     0,,PR4
         3 000146   000014 772000                    QRL     12
         3 000147   000014 752010 1                  STCQ    SCREECHCODE,'10'O

   2231  3 000150                       SCR          null
      259     2232    1   SCR:  ;
      260     2233    1         CALL M$SCREECH (SCREECH);

   2233  3 000150   000014 630400 2                  EPPR0   SCREECH
         3 000151   000013 713400                    CLIMB   11
         3 000152   401000 401760                    pmme    nvectors=3

      261     2234    1         IF GO = 0 THEN GOTO SCR;

   2234  3 000153   200020 235100                    LDA     GO,,AUTO
         3 000154   000150 600000 3                  TZE     SCR

      262     2235    1         RETURN;

   2235  3 000155   000000 702200 xent               TSX2  ! X66_ARET

      263     2236        /**/
      264     2237        /*F* NAME:         FOI$LDTRC
      265     2238             PURPOSE:      To SNAP and LDTRC for a system ghost
      266     2239             CALL:         FOI$LDTRC (SCODE,FCG,MID,NAME)
      267     2240             DESCRIPTION:  The parameters are the same as for FOI$CRASH,
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:36   
      268     2241                           plus NAME which is the 8-character (blank-
      269     2242                           padded if necessary out to 8) name of the
      270     2243                           RU to LDTRC to (i.e. the name of the ghost).
      271     2244
      272     2245                           If SCODE is in fact passed, then
      273     2246                           a SNAP dump is produced as for FOI$SNAP.  In any
      274     2247                           case we then LDTRC to the correct RU. */
      275     2248    1   FOI$LDTRC: ENTRY (SEGCB,BUF$,XSIZ,PARM4) ALTRET; /* !!Doesn't ALTRET!! */

   2248  3 000156   000000 700200 xent  FOI$LDTRC    TSX0  ! X66_AUTO_4
         3 000157   000030 000004                    ZERO    24,4

      276     2249        /**/
      277     2250    1         IF ADDR(SEGCB) ~= ADDR(NIL) THEN

   2250  3 000160   200003 236100                    LDQ     @SEGCB,,AUTO
         3 000161   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000162   000165 600000 3                  TZE     s:2252

      278     2251    1          CALL SNAPPER1;

   2251  3 000163   000014 701000 3                  TSX1    SNAPPER1
         3 000164   000000 011000                    NOP     0

      279     2252    1         CALL INDEX (I,' ',ADDR(PARM4)->B$$CHAR8);

   2252  3 000165   200006 470500                    LDP0    @PARM4,,AUTO
         3 000166   000000 124500                    SCM     mask='000'O
         3 000167   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         3 000170   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         3 000171   200010 000100                    ARG     I,,AUTO

      280     2253    1         MYNAME.L#=I;

   2253  3 000172   200010 236100                    LDQ     I,,AUTO
         3 000173   000033 736000                    QLS     27
         3 000174   000000 552040 1                  STBQ    MYNAME,'40'O
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:37   

      281     2254    1         MYNAME.NAME#=ADDR(PARM4)->B$$CHAR8;

   2254  3 000175   040000 100500                    MLR     fill='040'O
         3 000176   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         3 000177   000000 200010 1                  ADSC9   MYNAME                   cn=1,n=8

      282     2255    1         CALL M$XCON (ZAPXCON);

   2255  3 000200   000056 630400 2                  EPPR0   ZAPXCON
         3 000201   010003 713400                    CLIMB   4099
         3 000202   400400 401760                    pmme    nvectors=2

      283     2256    1         CALL M$LDTRC (LDTRC);

   2256  3 000203   000036 630400 2                  EPPR0   LDTRC
         3 000204   000006 713400                    CLIMB   6
         3 000205   403000 401760                    pmme    nvectors=7
         3 000206   000211 710000 3                  TRA     s:2273

      284     2257        %EJECT;
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:38   
      285     2258        /**/
      286     2259        /*F* NAME:         FOI$GBLK
      287     2260             PURPOSE:      To allocate a block of memory from a dynamic
      288     2261                           data segment.
      289     2262             CALL:         FOI$GBLK (SEGCB,BUF$,SIZE)
      290     2263             DESCRIPTION:  SEGCB is the segment control block built by
      291     2264                           the macro FO_SCB.  This control block must
      292     2265                           be inited by the macro, and is used by this
      293     2266                           routine.
      294     2267                           BUF$ is the returned pointer to the buffer,
      295     2268                           ADDR(NIL) if none.  SIZE is the desired block
      296     2269                           size in words.
      297     2270        */
      298     2271    1   FOI$GBLK: ENTRY (SEGCB,BUF$,XSIZ) ALTRET;

   2271  3 000207   000000 700200 xent  FOI$GBLK     TSX0  ! X66_AUTO_4
         3 000210   000030 000004                    ZERO    24,4

      299     2272        /**/
      300     2273    1         GSIZE=XSIZ;

   2273  3 000211   200005 470500                    LDP0    @XSIZ,,AUTO
         3 000212   000000 235100                    LDA     0,,PR0
         3 000213   200016 755100                    STA     GSIZE,,AUTO

      301     2274    1         GOTO GBUF;

   2274  3 000214   000222 710000 3                  TRA     GBUF

      302     2275        /**/
      303     2276        /*F* NAME:         FOI$GBUF
      304     2277             PURPOSE:      To allocate a frame from a data segment
      305     2278             DESCRIPTION:  Same as FOI$GBLK but the desired size is
      306     2279                           SEGCB.SIZ.
      307     2280        */
      308     2281    1   FOI$GBUF: ENTRY (SEGCB,BUF$) ALTRET;

PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:39   
   2281  3 000215   000000 700200 xent  FOI$GBUF     TSX0  ! X66_AUTO_4
         3 000216   000030 000004                    ZERO    24,4

      309     2282        /**/
      310     2283                                      /* Get the size of the new frame. */
      311     2284    1         GSIZE=SEGCB.SIZ;

   2284  3 000217   200003 470500                    LDP0    @SEGCB,,AUTO
         3 000220   000000 235100                    LDA     0,,PR0
         3 000221   200016 755100                    STA     GSIZE,,AUTO

   2284  3 000222                       GBUF         null
      312     2285    1   GBUF: ;
      313     2286                                      /* Get the data segment number from
      314     2287                                         which we will get the frame. */
      315     2288    1         SEGN=SEGCB.SEGN;

   2288  3 000222   200003 470500                    LDP0    @SEGCB,,AUTO
         3 000223   000001 236100                    LDQ     1,,PR0
         3 000224   777777 376007                    ANQ     -1,DL
         3 000225   200007 756100                    STQ     SEGN,,AUTO

      316     2289                                      /* If none of the requested segment has
      317     2290                                         already been allocated for other frames
      318     2291                                         set ALLOWSIZE equal to the size of
      319     2292                                         frame * the number of frames.  Init
      320     2293                                         the size of the frame we are about to
      321     2294                                         aquire.  And set the free head and
      322     2295                                         free tail pointers to the beginning
      323     2296                                         of the data segment. */
      324     2297    1         IF SEGCB.ALLOSIZE = 0 THEN

   2297  3 000226   000002 235100                    LDA     2,,PR0
         3 000227   000267 601000 3                  TNZ     GET

      325     2298    2           DO;

PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:40   
      326     2299                                /* FIRST TIME THRU */
      327     2300    2           SEGCB.ALLOSIZE=((SEGCB.PGCNT*1024)/SEGCB.SIZ)*SEGCB.SIZ;

   2300  3 000230   000001 236100                    LDQ     1,,PR0
         3 000231   000010 772000                    QRL     8
         3 000232   000000 376000 4                  ANQ     0
         3 000233   000000 235100                    LDA     0,,PR0
         3 000234   000237 605000 3                  TPL     s:2300+7
         3 000235   000000 236003                    LDQ     0,DU
         3 000236   000240 710000 3                  TRA     s:2300+8
         3 000237   000000 506100                    DIV     0,,PR0
         3 000240   000000 402100                    MPY     0,,PR0
         3 000241   000002 756100                    STQ     2,,PR0

      328     2301    2           IF SEGN < 2 THEN CALL M$XXX;

   2301  3 000242   200007 235100                    LDA     SEGN,,AUTO
         3 000243   000002 115007                    CMPA    2,DL
         3 000244   000247 603000 3                  TRC     s:2302

   2301  3 000245   000003 713400                    CLIMB   3
         3 000246   000000 401760                    pmme    nvectors=0

      329     2302    2           SEGCB.SEGSIZE=0;

   2302  3 000247   200003 470500                    LDP0    @SEGCB,,AUTO
         3 000250   000005 450100                    STZ     5,,PR0

      330     2303    2           SEGCB.FTL$=ADDR(NIL);

   2303  3 000251   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000252   000007 756100                    STQ     7,,PR0

      331     2304    2           SEGCB.FHD$=ADDR(NIL);

   2304  3 000253   000006 756100                    STQ     6,,PR0

PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:41   
      332     2305                                      /* If we dont come to an even boundary
      333     2306                                         and there is a perfect fit, add a
      334     2307                                         frame.  Otherwise there is an excess,
      335     2308                                         decrease the size by 1 frame. */
      336     2309    2           IF MOD(SEGCB.ALLOSIZE,2) ~= 0 THEN

   2309  3 000254   000002 236100                    LDQ     2,,PR0
         3 000255   000001 376007                    ANQ     1,DL
         3 000256   000267 600000 3                  TZE     GET

      337     2310    3             DO;

      338     2311    3             IF SEGCB.ALLOSIZE = SEGCB.SIZ THEN

   2311  3 000257   000002 236100                    LDQ     2,,PR0
         3 000260   000000 116100                    CMPQ    0,,PR0
         3 000261   000265 601000 3                  TNZ     s:2313

      339     2312    3              SEGCB.ALLOSIZE=SEGCB.ALLOSIZE+SEGCB.SIZ;

   2312  3 000262   000000 036100                    ADLQ    0,,PR0
         3 000263   000002 756100                    STQ     2,,PR0
         3 000264   000267 710000 3                  TRA     GET

      340     2313    3             ELSE SEGCB.ALLOSIZE=SEGCB.ALLOSIZE-SEGCB.SIZ;

   2313  3 000265   000000 136100                    SBLQ    0,,PR0
         3 000266   000002 756100                    STQ     2,,PR0

      341     2314    3             END;

      342     2315    2           END;

   2313  3 000267                       GET          null
      343     2316    1   GET:  ;
      344     2317    1         PP$=ADDR(SEGCB.FHD$);

PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:42   
   2317  3 000267   200003 236100                    LDQ     @SEGCB,,AUTO
         3 000270   000006 036003                    ADLQ    6,DU
         3 000271   200012 756100                    STQ     PP$,,AUTO

      345     2318    1         BUF$=SEGCB.FHD$;

   2318  3 000272   200003 470500                    LDP0    @SEGCB,,AUTO
         3 000273   000006 236100                    LDQ     6,,PR0
         3 000274   200004 471500                    LDP1    @BUF$,,AUTO
         3 000275   100000 756100                    STQ     0,,PR1

      346     2319                                      /* Do while we have free frames. */
      347     2320    2           DO WHILE (BUF$ ~= ADDR(NIL));

   2320  3 000276   000362 710000 3                  TRA     s:2357

      348     2321                                      /* If the size of the free frame is
      349     2322                                         exactly equal to the size of the
      350     2323                                         frame we need, then splice the free
      351     2324                                         frame from the free frame chain. */
      352     2325    2           IF BUF$->B$FRAME.SIZE = GSIZE THEN

   2325  3 000277   200004 470500                    LDP0    @BUF$,,AUTO
         3 000300   000000 471500                    LDP1    0,,PR0
         3 000301   100001 236100                    LDQ     1,,PR1
         3 000302   200016 116100                    CMPQ    GSIZE,,AUTO
         3 000303   000327 601000 3                  TNZ     s:2344

      353     2326    3             DO;

      354     2327    3             PP$->B$$PTR=BUF$->B$FRAME.LNK$;

   2327  3 000304   100000 236100                    LDQ     0,,PR1
         3 000305   200012 473500                    LDP3    PP$,,AUTO
         3 000306   300000 756100                    STQ     0,,PR3

      355     2328    3             IF BUF$->B$FRAME.LNK$ = ADDR(NIL) THEN
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:43   

   2328  3 000307   000000 471500                    LDP1    0,,PR0
         3 000310   100000 236100                    LDQ     0,,PR1
         3 000311   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000312   000326 601000 3                  TNZ     s:2333

      356     2329    3              IF PP$ = ADDR(SEGCB.FHD$) THEN

   2329  3 000313   200003 236100                    LDQ     @SEGCB,,AUTO
         3 000314   000006 036003                    ADLQ    6,DU
         3 000315   200012 116100                    CMPQ    PP$,,AUTO
         3 000316   000323 601000 3                  TNZ     s:2332

      357     2330    3               SEGCB.FTL$=ADDR(NIL);

   2330  3 000317   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000320   200003 474500                    LDP4    @SEGCB,,AUTO
         3 000321   400007 756100                    STQ     7,,PR4
         3 000322   000326 710000 3                  TRA     s:2333

      358     2331    3              ELSE
      359     2332    3               SEGCB.FTL$=PP$;

   2332  3 000323   200012 236100                    LDQ     PP$,,AUTO
         3 000324   200003 474500                    LDP4    @SEGCB,,AUTO
         3 000325   400007 756100                    STQ     7,,PR4

      360     2333    3             RETURN;

   2333  3 000326   000000 702200 xent               TSX2  ! X66_ARET

      361     2334    3             END;
      362     2335    2           ELSE
      363     2336                                      /* Else, if there's more space in this
      364     2337                                         frame than we need, incr the pointer
      365     2338                                         to the beginning of the free block
      366     2339                                         by the length we need (thus shrinking
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:44   
      367     2340                                         the free frame).  BUF$ now points to
      368     2341                                         the beginning of the aquired frame,
      369     2342                                         and P$ points to the beginning of the
      370     2343                                         current free block. */
      371     2344    2            IF BUF$->B$FRAME.SIZE >= GSIZE+SIZEW(B$FRAME) THEN

   2344  3 000327   200016 236100                    LDQ     GSIZE,,AUTO
         3 000330   000002 036007                    ADLQ    2,DL
         3 000331   100001 116100                    CMPQ    1,,PR1
         3 000332   000334 600000 3                  TZE     s:2346
         3 000333   000357 603000 3                  TRC     s:2355

      372     2345    3              DO;

      373     2346    3              P$=PINCRW(BUF$,GSIZE);

   2346  3 000334   200016 720100                    LXL0    GSIZE,,AUTO
         3 000335   100000 633510                    EPPR3   0,X0,PR1
         3 000336   200011 453500                    STP3    P$,,AUTO

      374     2347    3              P$->B$FRAME.LNK$=BUF$->B$FRAME.LNK$;

   2347  3 000337   100000 236100                    LDQ     0,,PR1
         3 000340   300000 756100                    STQ     0,,PR3

      375     2348    3              P$->B$FRAME.SIZE=BUF$->B$FRAME.SIZE-GSIZE;

   2348  3 000341   000000 471500                    LDP1    0,,PR0
         3 000342   100001 236100                    LDQ     1,,PR1
         3 000343   200016 136100                    SBLQ    GSIZE,,AUTO
         3 000344   300001 756100                    STQ     1,,PR3

      376     2349    3              PP$->B$$PTR=P$;

   2349  3 000345   200011 236100                    LDQ     P$,,AUTO
         3 000346   200012 471500                    LDP1    PP$,,AUTO
         3 000347   100000 756100                    STQ     0,,PR1
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:45   

      377     2350    3              IF SEGCB.FTL$=BUF$ THEN

   2350  3 000350   200003 474500                    LDP4    @SEGCB,,AUTO
         3 000351   400007 236100                    LDQ     7,,PR4
         3 000352   000000 116100                    CMPQ    0,,PR0
         3 000353   000356 601000 3                  TNZ     s:2352

      378     2351    3               SEGCB.FTL$=P$;

   2351  3 000354   200011 236100                    LDQ     P$,,AUTO
         3 000355   400007 756100                    STQ     7,,PR4

      379     2352    3              RETURN;

   2352  3 000356   000000 702200 xent               TSX2  ! X66_ARET

      380     2353    3              END;
      381     2354                                      /* Reference the next free frame. */
      382     2355    2           PP$=ADDR(BUF$->B$FRAME.LNK$);

   2355  3 000357   200012 451500                    STP1    PP$,,AUTO

      383     2356    2           BUF$=BUF$->B$FRAME.LNK$;

   2356  3 000360   100000 236100                    LDQ     0,,PR1
         3 000361   000000 756100                    STQ     0,,PR0

      384     2357    2           END;

   2357  3 000362   200004 470500                    LDP0    @BUF$,,AUTO
         3 000363   000000 236100                    LDQ     0,,PR0
         3 000364   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000365   000277 601000 3                  TNZ     s:2325

      385     2358                                      /* We only come down here if we need to
      386     2359                                         get more space. */
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:46   
      387     2360    1         GDSVEC.W2.SEGID#=SEGIDS(SEGN);

   2360  3 000366   200007 720100                    LXL0    SEGN,,AUTO
         3 000367   000000 236010 2                  LDQ     SEGIDS,X0
         3 000370   000030 772000                    QRL     24
         3 000371   000025 752003 1                  STCQ    GDSVEC+1,'03'O

      388     2361    1         GDS.V.SEGSIZE#=SEGCB.ALLOSIZE;

   2361  3 000372   200003 471500                    LDP1    @SEGCB,,AUTO
         3 000373   100002 721100                    LXL1    2,,PR1
         3 000374   000022 441000 1                  SXL1    GDS+4

      389     2362    1         CALL M$GDS(GDS) ALTRET(NOGOT);

   2362  3 000375   000016 630400 1                  EPPR0   GDS
         3 000376   430001 713400                    CLIMB   alt,gds
         3 000377   400400 401760                    pmme    nvectors=2
         3 000400   000455 702000 3                  TSX2    ALTRT

      390     2363    1         IF SEGCB.JPMME THEN

   2363  3 000401   200003 470500                    LDP0    @SEGCB,,AUTO
         3 000402   000003 234100                    SZN     3,,PR0
         3 000403   000415 605000 3                  TPL     s:2369

      391     2364    2           DO;

      392     2365    2           REMAPIT.V.STATSEG#=SEGCB.JSSEG;

   2365  3 000404   000003 236100                    LDQ     3,,PR0
         3 000405   000031 376000 xsym               ANQ     B_VECTNIL+25
         3 000406   000066 756000 1                  STQ     REMAPIT+26

      393     2366    2           REMAPIT.BUF_=GDSVEC;

   2366  3 000407   000024 237000 1                  LDAQ    GDSVEC
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:47   
         3 000410   000036 757000 1                  STAQ    REMAPIT+2

      394     2367    2           CALL M$JOBSTATS (REMAPIT) ALTRET(NOGOT1);

   2367  3 000411   000034 630400 1                  EPPR0   REMAPIT
         3 000412   570001 713400                    CLIMB   alt,+61441
         3 000413   405400 401760                    pmme    nvectors=12
         3 000414   000443 702000 3                  TSX2    NOGOT1

      395     2368    2           END;

      396     2369    1         SEGCB.SEG$=GDSVEC.PTR$;

   2369  3 000415   000025 236000 1                  LDQ     GDSVEC+1
         3 000416   200003 470500                    LDP0    @SEGCB,,AUTO
         3 000417   000004 756100                    STQ     4,,PR0

      397     2370                                      /* Set BUF$ to the beginning of the area
      398     2371                                         just aquired.  SEGSIZE is the total
      399     2372                                         space currently aquired in the data
      400     2373                                         segment.  Set the free head pointer
      401     2374                                         and the free tail pointer to the
      402     2375                                         beginning of the space just aquired.
      403     2376                                         The area just aquired is the only
      404     2377                                         frame currently in the free chain,
      405     2378                                         and it's size is equal to our request
      406     2379                                         from M$GDS. */
      407     2380    1         BUF$=PINCRW(SEGCB.SEG$,SEGCB.SEGSIZE);

   2380  3 000420   000005 720100                    LXL0    5,,PR0
         3 000421   000004 471500                    LDP1    4,,PR0
         3 000422   100000 633510                    EPPR3   0,X0,PR1
         3 000423   200004 474500                    LDP4    @BUF$,,AUTO
         3 000424   400000 453500                    STP3    0,,PR4

      408     2381    1         SEGCB.SEGSIZE=SEGCB.SEGSIZE+SEGCB.ALLOSIZE;

PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:48   
   2381  3 000425   000005 236100                    LDQ     5,,PR0
         3 000426   000002 036100                    ADLQ    2,,PR0
         3 000427   000005 756100                    STQ     5,,PR0

      409     2382    1         SEGCB.FHD$=BUF$;

   2382  3 000430   400000 236100                    LDQ     0,,PR4
         3 000431   000006 756100                    STQ     6,,PR0

      410     2383    1         SEGCB.FTL$=BUF$;

   2383  3 000432   400000 236100                    LDQ     0,,PR4
         3 000433   000007 756100                    STQ     7,,PR0

      411     2384    1         BUF$->B$FRAME.LNK$=ADDR(NIL);

   2384  3 000434   400000 471500                    LDP1    0,,PR4
         3 000435   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000436   100000 756100                    STQ     0,,PR1

      412     2385    1         BUF$->B$FRAME.SIZE=SEGCB.ALLOSIZE;

   2385  3 000437   400000 471500                    LDP1    0,,PR4
         3 000440   000002 235100                    LDA     2,,PR0
         3 000441   100001 755100                    STA     1,,PR1

      413     2386    1         GOTO GET;

   2386  3 000442   000267 710000 3                  TRA     GET

   2385  3 000443                       NOGOT1       null
      414     2387                                /* COME HERE WHEN CANNOT MAP.  REL SPACE */
      415     2388    1   NOGOT1:;
      416     2389    1         GDSVEC.W2.SEGID#=SEGIDS(SEGN);

   2389  3 000443   200007 720100                    LXL0    SEGN,,AUTO
         3 000444   000000 236010 2                  LDQ     SEGIDS,X0
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:49   
         3 000445   000030 772000                    QRL     24
         3 000446   000025 752003 1                  STCQ    GDSVEC+1,'03'O

      417     2390    1         GDS.V.SEGSIZE#=SEGCB.ALLOSIZE;

   2390  3 000447   200003 470500                    LDP0    @SEGCB,,AUTO
         3 000450   000002 721100                    LXL1    2,,PR0
         3 000451   000022 441000 1                  SXL1    GDS+4

      418     2391    1         CALL M$FDS (FDS);

   2391  3 000452   000026 630400 1                  EPPR0   FDS
         3 000453   030002 713400                    CLIMB   fds
         3 000454   400400 401760                    pmme    nvectors=2

   2390  3 000455                       ALTRT        null
      419     2392    1   ALTRT:;
      420     2393    1   NOGOT:
      421     2394    1         ALTRETURN;

   2394  3 000455   000000 702200 xent  NOGOT        TSX2  ! X66_AALT

      422     2395        %EJECT;
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:50   
      423     2396        /**/
      424     2397        /*F* NAME:         FOI$RBLK
      425     2398             PURPOSE:      To release a block of memory from a segment
      426     2399             DESCRIPTION:  Releases a block obtained by FOI$GBLK.
      427     2400        */
      428     2401    1   FOI$RBLK: ENTRY (SEGCB,BUF$,XSIZ) ALTRET; /* !!Doesn't ALTRET!! */

   2401  3 000456   000000 700200 xent  FOI$RBLK     TSX0  ! X66_AUTO_4
         3 000457   000030 000004                    ZERO    24,4

      429     2402        /**/
      430     2403    1         GSIZE=XSIZ;

   2403  3 000460   200005 470500                    LDP0    @XSIZ,,AUTO
         3 000461   000000 235100                    LDA     0,,PR0
         3 000462   200016 755100                    STA     GSIZE,,AUTO

      431     2404    1         GOTO RBUF;

   2404  3 000463   000471 710000 3                  TRA     RBUF

      432     2405        /**/
      433     2406        /*F* NAME:         FOI$RBUF
      434     2407
      435     2408             PURPOSE:      To release a frame in a dynamic data segment
      436     2409
      437     2410             DESCRIPTION:  See *F* for FOI$GBUF first.
      438     2411                           FOI$RBUF maintains a chain of free frames.  Each
      439     2412                           free frame may contain more than one allocation
      440     2413                           frame (buddy system), and consists of a pointer
      441     2414                           to the next in the chain, and a count of the
      442     2415                           number of words contained within it.
      443     2416
      444     2417                           The free chain is in order by address, that is,
      445     2418                           the link in a free chain element always points
      446     2419                           to an element at a higher address.  When an
      447     2420                           allocation frame is released (a call to FOI$RBUF),
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:51   
      448     2421                           the free chain is searched until the deallocated
      449     2422                           frame can be inserted at the correct spot.  This
      450     2423                           means one of: insert it as a new free element con-
      451     2424                           taining one frame, expand an extant free element
      452     2425                           by one in the lowcore direction, or expand an ex-
      453     2426                           tant free element in the highcore direction.  In
      454     2427                           the last case, a check is made to see if we now
      455     2428                           have two adjacent free elements, in which case
      456     2429                           they are coalesced.
      457     2430
      458     2431                           Space is released from the segment when a release
      459     2432                           causes the tail of the free chain to satisfy two
      460     2433                           conditions: it is above a certain size, and it
      461     2434                           frames the end of the data segment.
      462     2435
      463     2436                           If the frame being released is illegal (i.e.
      464     2437                           points to an area already released, or points to
      465     2438                           an illegal position) we just call M$XXX. */
      466     2439    1   FOI$RBUF: ENTRY (SEGCB,BUF$) ALTRET; /* !!Doesn't ALTRET!! */

   2439  3 000464   000000 700200 xent  FOI$RBUF     TSX0  ! X66_AUTO_4
         3 000465   000030 000004                    ZERO    24,4

      467     2440        /**/
      468     2441                                      /* Get the size of the frame we are
      469     2442                                         about to release. */
      470     2443    1         GSIZE=SEGCB.SIZ;

   2443  3 000466   200003 470500                    LDP0    @SEGCB,,AUTO
         3 000467   000000 235100                    LDA     0,,PR0
         3 000470   200016 755100                    STA     GSIZE,,AUTO

   2443  3 000471                       RBUF         null
      471     2444    1   RBUF: ;
      472     2445                                      /* Get the specific segment in which the
      473     2446                                         frame resides.  Get the address of the
      474     2447                                         head of the free frame chain.  Get
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:52   
      475     2448                                         the head of the free frame chain. */
      476     2449    1         SEGN=SEGCB.SEGN;

   2449  3 000471   200003 470500                    LDP0    @SEGCB,,AUTO
         3 000472   000001 236100                    LDQ     1,,PR0
         3 000473   777777 376007                    ANQ     -1,DL
         3 000474   200007 756100                    STQ     SEGN,,AUTO

      477     2450    1         PP$=ADDR(SEGCB.FHD$);

   2450  3 000475   200003 236100                    LDQ     @SEGCB,,AUTO
         3 000476   000006 036003                    ADLQ    6,DU
         3 000477   200012 756100                    STQ     PP$,,AUTO

      478     2451    1         P$=SEGCB.FHD$;

   2451  3 000500   000006 236100                    LDQ     6,,PR0
         3 000501   200011 756100                    STQ     P$,,AUTO

      479     2452                                      /* Do while there are frames on the free
      480     2453                                         chain. */
      481     2454    2           DO WHILE (P$ ~= ADDR(NIL));

   2454  3 000502   000722 710000 3                  TRA     s:2575

      482     2455                                      /* find the difference between the current
      483     2456                                         free frame and the frame we are about
      484     2457                                         to set free.  Then get the size of the
      485     2458                                         current free frame. */
      486     2459    2           OFFSET=POFFW(BUF$,P$);

   2459  3 000503   200011 235100                    LDA     P$,,AUTO
         3 000504   000022 771000                    ARL     18
         3 000505   200026 755100                    STA     RTNAME+2,,AUTO
         3 000506   200004 470500                    LDP0    @BUF$,,AUTO
         3 000507   000000 236100                    LDQ     0,,PR0
         3 000510   000022 772000                    QRL     18
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:53   
         3 000511   200026 136100                    SBLQ    RTNAME+2,,AUTO
         3 000512   200014 756100                    STQ     OFFSET,,AUTO

      487     2460    2           PSIZE=P$->B$FRAME.SIZE;

   2460  3 000513   200011 471500                    LDP1    P$,,AUTO
         3 000514   100001 235100                    LDA     1,,PR1
         3 000515   200013 755100                    STA     PSIZE,,AUTO

      488     2461    2           IF OFFSET = -GSIZE THEN

   2461  3 000516   000000 236003                    LDQ     0,DU
         3 000517   200016 136100                    SBLQ    GSIZE,,AUTO
         3 000520   200014 116100                    CMPQ    OFFSET,,AUTO
         3 000521   000546 601000 3                  TNZ     s:2488

      489     2462    3             DO;             /* REL BLK LIES JUST ON LOCORE SIDE OF THIS ONE */

      490     2463                                      /* Expand the current free frame to
      491     2464                                         include the release frame.  Note:
      492     2465                                         we should never have the adjacent
      493     2466                                         free frame problem when we expand
      494     2467                                         backward (as we do when we expand
      495     2468                                         forward) because we start at FHD.
      496     2469                                         Therefore, all adjacent free frames
      497     2470                                         should be taken care of going forward. */
      498     2471    3             BUF$->B$FRAME.LNK$=P$->B$FRAME.LNK$;

   2471  3 000522   000000 473500                    LDP3    0,,PR0
         3 000523   100000 236100                    LDQ     0,,PR1
         3 000524   300000 756100                    STQ     0,,PR3

      499     2472    3             BUF$->B$FRAME.SIZE=P$->B$FRAME.SIZE+GSIZE;

   2472  3 000525   000000 473500                    LDP3    0,,PR0
         3 000526   100001 236100                    LDQ     1,,PR1
         3 000527   200016 036100                    ADLQ    GSIZE,,AUTO
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:54   
         3 000530   300001 756100                    STQ     1,,PR3

      500     2473    3             PP$->B$FRAME.LNK$=BUF$;

   2473  3 000531   000000 236100                    LDQ     0,,PR0
         3 000532   200012 473500                    LDP3    PP$,,AUTO
         3 000533   300000 756100                    STQ     0,,PR3

      501     2474    3             IF SEGCB.FTL$ ~= P$ THEN RETURN;

   2474  3 000534   200003 474500                    LDP4    @SEGCB,,AUTO
         3 000535   400007 236100                    LDQ     7,,PR4
         3 000536   200011 116100                    CMPQ    P$,,AUTO
         3 000537   000541 600000 3                  TZE     s:2475

   2474  3 000540   000000 702200 xent               TSX2  ! X66_ARET

      502     2475    3             SEGCB.FTL$=BUF$;

   2475  3 000541   000000 236100                    LDQ     0,,PR0
         3 000542   400007 756100                    STQ     7,,PR4

      503     2476                                      /* Adjust the free pointer to include
      504     2477                                         the release frame in the current free
      505     2478                                         frame. */
      506     2479    3             P$=BUF$;

   2479  3 000543   000000 236100                    LDQ     0,,PR0
         3 000544   200011 756100                    STQ     P$,,AUTO

      507     2480    3             GOTO RELPMME;

   2480  3 000545   000604 710000 3                  TRA     RELPMME

      508     2481    3             END;
      509     2482    2           ELSE
      510     2483    3             DO;
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:55   

      511     2484                                      /* If the offset of the release frame
      512     2485                                         from the current free frame is equal
      513     2486                                         to the size of the current frame,
      514     2487                                         expand the current free frame. */
      515     2488    3             IF OFFSET = PSIZE THEN

   2488  3 000546   200014 236100                    LDQ     OFFSET,,AUTO
         3 000547   200013 116100                    CMPQ    PSIZE,,AUTO
         3 000550   000701 601000 3                  TNZ     s:2558

      516     2489    4               DO;          /* REL BLK LIES JUST ON HICORE SIDE THIS ONE    */

      517     2490    4               P$->B$FRAME.SIZE=P$->B$FRAME.SIZE+GSIZE;

   2490  3 000551   100001 236100                    LDQ     1,,PR1
         3 000552   200016 036100                    ADLQ    GSIZE,,AUTO
         3 000553   100001 756100                    STQ     1,,PR1

      518     2491                                      /* Did we just expand the last free frame?
      519     2492                                         If not, proceed. */
      520     2493    4               IF P$->B$FRAME.LNK$ ~= ADDR(NIL) THEN

   2493  3 000554   100000 236100                    LDQ     0,,PR1
         3 000555   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000556   000600 600000 3                  TZE     s:2509

      521     2494    5                 DO;

      522     2495                                      /* After absorbing the release frame, see
      523     2496                                         if the frame next to it is a free frame.
      524     2497                                         If it is, it must also be absorbed. */
      525     2498    5                 IF PINCRW(P$,PSIZE+GSIZE) = P$->B$FRAME.LNK$ THEN

   2498  3 000557   200013 236100                    LDQ     PSIZE,,AUTO
         3 000560   200016 036100                    ADLQ    GSIZE,,AUTO
         3 000561   000022 736000                    QLS     18
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:56   
         3 000562   200011 036100                    ADLQ    P$,,AUTO
         3 000563   100000 116100                    CMPQ    0,,PR1
         3 000564   000600 601000 3                  TNZ     s:2509

      526     2499    6                   DO;

      527     2500                                /* ATTACH TWO ADJACENT ELEMENTS OF FREE
      528     2501                                   CHAIN */
      529     2502    6                   P$->B$FRAME.SIZE=P$->B$FRAME.SIZE+P$->B$FRAME.LNK$->B$FRAME.SIZE;

   2502  3 000565   100000 473500                    LDP3    0,,PR1
         3 000566   100001 236100                    LDQ     1,,PR1
         3 000567   300001 036100                    ADLQ    1,,PR3
         3 000570   100001 756100                    STQ     1,,PR1

      530     2503    6                   P$->B$FRAME.LNK$=P$->B$FRAME.LNK$->B$FRAME.LNK$;

   2503  3 000571   300000 236100                    LDQ     0,,PR3
         3 000572   100000 756100                    STQ     0,,PR1

      531     2504    6                   IF P$->B$FRAME.LNK$ = ADDR(NIL) THEN SEGCB.FTL$=P$;

   2504  3 000573   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000574   000600 601000 3                  TNZ     s:2509

   2504  3 000575   200011 236100                    LDQ     P$,,AUTO
         3 000576   200003 473500                    LDP3    @SEGCB,,AUTO
         3 000577   300007 756100                    STQ     7,,PR3

      532     2505    6                   END;

      533     2506    5                 END;

      534     2507                                      /* If we are currently pointing to the
      535     2508                                         free tail, then... */
      536     2509    4               IF SEGCB.FTL$=P$ THEN

PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:57   
   2509  3 000600   200003 473500                    LDP3    @SEGCB,,AUTO
         3 000601   300007 236100                    LDQ     7,,PR3
         3 000602   200011 116100                    CMPQ    P$,,AUTO
         3 000603   000700 601000 3                  TNZ     s:2551

      537     2510    5                 DO;

      538     2511    5   RELPMME:
      539     2512                                      /* Get the size of the current free frame. */
      540     2513
      541     2514    5                 PSIZE=P$->B$FRAME.SIZE;

   2514  3 000604   200011 470500       RELPMME      LDP0    P$,,AUTO
         3 000605   000001 235100                    LDA     1,,PR0
         3 000606   200013 755100                    STA     PSIZE,,AUTO

      542     2515    5                 IF PSIZE < SEGCB.ALLOSIZE THEN RETURN;

   2515  3 000607   200003 471500                    LDP1    @SEGCB,,AUTO
         3 000610   200013 236100                    LDQ     PSIZE,,AUTO
         3 000611   000614 604000 3                  TMI     s:2515+5
         3 000612   100002 116100                    CMPQ    2,,PR1
         3 000613   000615 603000 3                  TRC     s:2522

   2515  3 000614   000000 702200 xent               TSX2  ! X66_ARET

      543     2516                                      /* Get the difference between the beginning
      544     2517                                         of this data segment and the beginning
      545     2518                                         of the current free frame.  Add the
      546     2519                                         size of the free frame.  If we are
      547     2520                                         dealing with the absolute last frame
      548     2521                                         in the segment, then FDS. */
      549     2522    5                 I=PSIZE+POFFW(P$,SEGCB.SEG$);

   2522  3 000615   100004 236100                    LDQ     4,,PR1
         3 000616   000022 772000                    QRL     18
         3 000617   200026 756100                    STQ     RTNAME+2,,AUTO
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:58   
         3 000620   200011 236100                    LDQ     P$,,AUTO
         3 000621   000022 772000                    QRL     18
         3 000622   200026 136100                    SBLQ    RTNAME+2,,AUTO
         3 000623   200013 036100                    ADLQ    PSIZE,,AUTO
         3 000624   200010 756100                    STQ     I,,AUTO

      550     2523    5                 IF I = SEGCB.SEGSIZE THEN

   2523  3 000625   100005 116100                    CMPQ    5,,PR1
         3 000626   000700 601000 3                  TNZ     s:2551

      551     2524    6                   DO;

      552     2525                                /* ONLY RELEASE FROM TAIL OF FREE CHAIN,
      553     2526                                   AND THEN ONLY WHEN THE TAIL ELEMENT
      554     2527                                   FRAMES THE LAST WORDS IN THE SEGMENT */
      555     2528    6                   GDSVEC.W2.SEGID#=SEGIDS(SEGN);

   2528  3 000627   200007 720100                    LXL0    SEGN,,AUTO
         3 000630   000000 236010 2                  LDQ     SEGIDS,X0
         3 000631   000030 772000                    QRL     24
         3 000632   000025 752003 1                  STCQ    GDSVEC+1,'03'O

      556     2529    6                   IF MOD (PSIZE,2) ~= 0 THEN RETURN;

   2529  3 000633   200013 236100                    LDQ     PSIZE,,AUTO
         3 000634   000002 506007                    DIV     2,DL
         3 000635   000044 733000                    LRS     36
         3 000636   000000 116003                    CMPQ    0,DU
         3 000637   000641 600000 3                  TZE     s:2530

   2529  3 000640   000000 702200 xent               TSX2  ! X66_ARET

      557     2530    6                   FDS.V.SEGSIZE#=PSIZE;

   2530  3 000641   200013 721100                    LXL1    PSIZE,,AUTO
         3 000642   000032 441000 1                  SXL1    FDS+4
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:59   

      558     2531    6                   CALL M$FDS (FDS);

   2531  3 000643   000026 630400 1                  EPPR0   FDS
         3 000644   030002 713400                    CLIMB   fds
         3 000645   400400 401760                    pmme    nvectors=2

      559     2532    6                   IF P$ = SEGCB.FHD$ THEN

   2532  3 000646   200003 470500                    LDP0    @SEGCB,,AUTO
         3 000647   200011 236100                    LDQ     P$,,AUTO
         3 000650   000006 116100                    CMPQ    6,,PR0
         3 000651   000656 601000 3                  TNZ     s:2539

      560     2533    7                     DO;

      561     2534    7                     SEGCB.FHD$=ADDR(NIL);

   2534  3 000652   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000653   000006 756100                    STQ     6,,PR0

      562     2535    7                     SEGCB.FTL$=ADDR(NIL);

   2535  3 000654   000007 756100                    STQ     7,,PR0

      563     2536    7                     END;

   2536  3 000655   000663 710000 3                  TRA     s:2542

      564     2537    6                   ELSE
      565     2538    7                     DO;

      566     2539    7                     PP$->B$FRAME.LNK$=ADDR(NIL);

   2539  3 000656   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000657   200012 471500                    LDP1    PP$,,AUTO
         3 000660   100000 756100                    STQ     0,,PR1
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:60   

      567     2540    7                     SEGCB.FTL$=PP$;

   2540  3 000661   200012 236100                    LDQ     PP$,,AUTO
         3 000662   000007 756100                    STQ     7,,PR0

      568     2541    7                     END;

      569     2542    6                   SEGCB.SEGSIZE=SEGCB.SEGSIZE-PSIZE;

   2542  3 000663   000005 236100                    LDQ     5,,PR0
         3 000664   200013 136100                    SBLQ    PSIZE,,AUTO
         3 000665   000005 756100                    STQ     5,,PR0

      570     2543    6                   IF SEGCB.JPMME THEN

   2543  3 000666   000003 234100                    SZN     3,,PR0
         3 000667   000700 605000 3                  TPL     s:2551

      571     2544    7                     DO;

      572     2545    7                     REMAPIT.V.STATSEG#=SEGCB.JSSEG;

   2545  3 000670   000003 236100                    LDQ     3,,PR0
         3 000671   000031 376000 xsym               ANQ     B_VECTNIL+25
         3 000672   000066 756000 1                  STQ     REMAPIT+26

      573     2546    7                     REMAPIT.BUF_=GDSVEC;

   2546  3 000673   000024 237000 1                  LDAQ    GDSVEC
         3 000674   000036 757000 1                  STAQ    REMAPIT+2

      574     2547    7                     CALL M$JOBSTATS (REMAPIT);

   2547  3 000675   000034 630400 1                  EPPR0   REMAPIT
         3 000676   170001 713400                    CLIMB   61441
         3 000677   405400 401760                    pmme    nvectors=12
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:61   

      575     2548    7                     END; /* End I = SEGCB.SEGSIZE */

      576     2549    6                   END;      /* End SEGCG.FTL$ = P$   */

      577     2550    5                 END;           /* End P$->B$FRAME.LNK$ = ADDR (NIL) */

      578     2551    4               RETURN;

   2551  3 000700   000000 702200 xent               TSX2  ! X66_ARET

      579     2552    4               END;           /* End OFFSET = PSIZE */
      580     2553    3             ELSE
      581     2554    4               DO;

      582     2555                                      /* Release frame is much higher (in core)
      583     2556                                         than our current frame, get next free
      584     2557                                         frame and try again. */
      585     2558    4               IF OFFSET > 0 THEN

   2558  3 000701   000000 116003                    CMPQ    0,DU
         3 000702   000710 604400 3                  TMOZ    s:2568

      586     2559    5                 DO;

      587     2560    5                 PP$=P$;

   2560  3 000703   200011 236100                    LDQ     P$,,AUTO
         3 000704   200012 756100                    STQ     PP$,,AUTO

      588     2561    5                 P$=P$->B$FRAME.LNK$;

   2561  3 000705   100000 236100                    LDQ     0,,PR1
         3 000706   200011 756100                    STQ     P$,,AUTO

      589     2562    5                 END;

PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:62   
   2562  3 000707   000722 710000 3                  TRA     s:2575

      590     2563    4               ELSE
      591     2564    5                 DO;

      592     2565                                      /* Here there is no free frame on either
      593     2566                                         side of the release frame.  Splice it
      594     2567                                         into the free chain. */
      595     2568    5                 BUF$->B$FRAME.LNK$=P$;

   2568  3 000710   000000 473500                    LDP3    0,,PR0
         3 000711   200011 236100                    LDQ     P$,,AUTO
         3 000712   300000 756100                    STQ     0,,PR3

      596     2569    5                 BUF$->B$FRAME.SIZE=GSIZE;

   2569  3 000713   000000 473500                    LDP3    0,,PR0
         3 000714   200016 235100                    LDA     GSIZE,,AUTO
         3 000715   300001 755100                    STA     1,,PR3

      597     2570    5                 PP$->B$FRAME.LNK$=BUF$;

   2570  3 000716   000000 236100                    LDQ     0,,PR0
         3 000717   200012 473500                    LDP3    PP$,,AUTO
         3 000720   300000 756100                    STQ     0,,PR3

      598     2571    5                 RETURN;

   2571  3 000721   000000 702200 xent               TSX2  ! X66_ARET

      599     2572    5                 END;
      600     2573    4               END;
      601     2574    3             END;           /* End ELSE */
      602     2575    2           END;                /* End DO WHILE */

   2575  3 000722   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000723   000503 601000 3                  TNZ     s:2459
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:63   

      603     2576                                                /**/
      604     2577                                      /* Only come down here if there no
      605     2578                                         current free frames. */
      606     2579    1         IF PP$ ~= ADDR(SEGCB.FHD$) THEN

   2579  3 000724   200003 236100                    LDQ     @SEGCB,,AUTO
         3 000725   000006 036003                    ADLQ    6,DU
         3 000726   200012 116100                    CMPQ    PP$,,AUTO
         3 000727   000736 600000 3                  TZE     s:2583

      607     2580    2           DO;

      608     2581    2           IF PP$ ~= SEGCB.FTL$ THEN CALL M$XXX;

   2581  3 000730   200003 470500                    LDP0    @SEGCB,,AUTO
         3 000731   200012 236100                    LDQ     PP$,,AUTO
         3 000732   000007 116100                    CMPQ    7,,PR0
         3 000733   000736 600000 3                  TZE     s:2583

   2581  3 000734   000003 713400                    CLIMB   3
         3 000735   000000 401760                    pmme    nvectors=0

      609     2582    2           END;

      610     2583    1         SEGCB.FTL$=BUF$;

   2583  3 000736   200004 470500                    LDP0    @BUF$,,AUTO
         3 000737   000000 236100                    LDQ     0,,PR0
         3 000740   200003 471500                    LDP1    @SEGCB,,AUTO
         3 000741   100007 756100                    STQ     7,,PR1

      611     2584    1         BUF$->B$FRAME.SIZE=GSIZE;

   2584  3 000742   000000 473500                    LDP3    0,,PR0
         3 000743   200016 235100                    LDA     GSIZE,,AUTO
         3 000744   300001 755100                    STA     1,,PR3
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:64   

      612     2585    1         BUF$->B$FRAME.LNK$=ADDR(NIL);

   2585  3 000745   000000 473500                    LDP3    0,,PR0
         3 000746   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000747   300000 756100                    STQ     0,,PR3

      613     2586    1         PP$->B$FRAME.LNK$=BUF$;

   2586  3 000750   000000 236100                    LDQ     0,,PR0
         3 000751   200012 473500                    LDP3    PP$,,AUTO
         3 000752   300000 756100                    STQ     0,,PR3

      614     2587    1         P$=BUF$;

   2587  3 000753   000000 236100                    LDQ     0,,PR0
         3 000754   200011 756100                    STQ     P$,,AUTO

      615     2588    1         GOTO RELPMME;

   2588  3 000755   000604 710000 3                  TRA     RELPMME
      616     2589    1   END FOI$COM;

PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:65   
--  Include file information  --

   UE_ERRORS_C.:E05TOU  is referenced.
   IR_DATA_M.:E05TOU  is referenced.
   J_ERRORS_C.:E05TOU  is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   FOO_MAC_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FOI$COM.
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:66   

 **** Variables and constants ****

  ****  Section 001  Data  FOI$COM

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    26-0-0/d STRC(216)   r     1 FDS                       16-0-0/d STRC(216)   r     1 GDS
    24-0-0/d STRC(72)    r     1 GDSVEC                    10-0-0/d BIT         r     1 JITERR
     0-0-0/c STRC(81)    r     1 MYNAME                    34-0-0/d STRC(1296)  r     1 REMAPIT
     4-0-0/d STRC(99)    r     1 RV_DFNAME                 14-0-0/d STRC(72)    r     1 SCREECHCODE
    12-0-0/d STRC(72)    r     1 SNAPCODE

  ****  Section 002 RoData FOI$COM

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    36-0-0/d STRC(576)   r     1 LDTRC                     14-0-0/d STRC(216)   r     1 SCREECH
     0-0-0/b BIT         r     1 SEGIDS(0:8)               30-0-0/d STRC(216)   r     1 SLEEP10
    22-0-0/d STRC(216)   r     1 SNAP                      11-0-0/c STRC(72)    r     1 SYSACCT
    56-0-0/d STRC(216)   r     1 ZAPXCON

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @BUF$                      6-0-0/w PTR         r     1 @PARM4
     3-0-0/w PTR         r     1 @SEGCB                     5-0-0/w PTR         r     1 @XSIZ
    *0-0-0/w PTR         r     1 BUF$                      20-0-0/w UBIN        r     1 GO
    16-0-0/w UBIN        r     1 GSIZE                     10-0-0/w UBIN        r     1 I
    14-0-0/w SBIN        r     1 OFFSET                    11-0-0/w PTR         r     1 P$
    *0-0-0/w UBIN        r     1 PARM4                     12-0-0/w PTR         r     1 PP$
    13-0-0/w SBIN        r     1 PSIZE                     23-0-0/w UBIN        r     1 RENV
    24-0-0/w UBIN        r     1 RTNAME                    *0-0-0/w STRC        r     1 SCRFCG
    *0-0-0/w STRC        r     1 SCRMID                    *0-0-0/w STRC(288)   r     1 SEGCB
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:67   
     7-0-0/w UBIN        r     1 SEGN                      17-0-0/w UBIN        r     1 SLEEPER
    *0-0-0/w UBIN        r     1 XSIZ

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(8)     r     1 B$$CHAR8                   0-0-0/w PTR         r     1 B$$PTR
     0-0-0/w UBIN        r     1 B$$WORD                    0-0-0/w STRC(2448)  r     1 B$ALT
     0-0-0/w STRC(72)    r     1 B$FRAME                    0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/d STRC(99)    r     1 RV$DFNAME


   Procedure FOI$COM requires 494 words for executable code.
   Procedure FOI$COM requires 24 words of local(AUTO) storage.

    No errors detected in file FOI$COM.:E05TSI    .
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:68   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:69   
          MINI XREF LISTING

ALTOUT IN PROCEDURE SNAPPER
      2194**LABEL    2191--GOTO
ALTRT
      2390**LABEL    2159--CALLALT
B$$CHAR8
      1726**DCL      2252>>CALLBLT  2254>>ASSIGN
B$$PTR
      1710**DCL      2327<<ASSIGN   2349<<ASSIGN
B$$WORD
      1714**DCL      2181>>ASSIGN   2229>>ASSIGN
B$ALT.CODE
      1720**DCL      1720--REDEF    1721--REDEF    1721--REDEF
B$ALT.ERR
      1721**DCL      2174>>ASSIGN   2228>>ASSIGN
B$ALT.ERR.CODE
      1722**DCL      2191>>IF
B$ALT.ERR.ERR#
      1722**DCL      1722--REDEF
B$ALT.EVID
      1721**DCL      1721--REDEF    1721--REDEF
B$FRAME
      1711**DCL      2344--IF
B$FRAME.LNK$
      1712**DCL      2327>>ASSIGN   2328>>IF       2347<<ASSIGN   2347>>ASSIGN   2355--ASSIGN   2356>>ASSIGN
      2384<<ASSIGN   2471<<ASSIGN   2471>>ASSIGN   2473<<ASSIGN   2493>>IF       2498>>IF       2502>>ASSIGN
      2503<<ASSIGN   2503>>ASSIGN   2503>>ASSIGN   2504>>IF       2539<<ASSIGN   2561>>ASSIGN   2568<<ASSIGN
      2570<<ASSIGN   2585<<ASSIGN   2586<<ASSIGN
B$FRAME.SIZE
      1713**DCL      2325>>IF       2344>>IF       2348<<ASSIGN   2348>>ASSIGN   2385<<ASSIGN   2460>>ASSIGN
      2472<<ASSIGN   2472>>ASSIGN   2490<<ASSIGN   2490>>ASSIGN   2502<<ASSIGN   2502>>ASSIGN   2502>>ASSIGN
      2514>>ASSIGN   2569<<ASSIGN   2584<<ASSIGN
B$TCB.ALT$
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:70   
      1716**DCL      2174>>ASSIGN   2191>>IF       2228>>ASSIGN
B$TCB$
      1952**DCL      2174>>ASSIGN   2191>>IF       2228>>ASSIGN
BUF$
      1695**DCL        14--PROC     1696--REDEF    2157--ENTRY    2213--ENTRY    2223--ENTRY    2248--ENTRY
      2271--ENTRY    2281--ENTRY    2318<<ASSIGN   2320>>DOWHILE  2325>>IF       2327>>ASSIGN   2328>>IF
      2344>>IF       2346>>ASSIGN   2347>>ASSIGN   2348>>ASSIGN   2350>>IF       2355>>ASSIGN   2356<<ASSIGN
      2356>>ASSIGN   2380<<ASSIGN   2382>>ASSIGN   2383>>ASSIGN   2384>>ASSIGN   2385>>ASSIGN   2401--ENTRY
      2439--ENTRY    2459>>ASSIGN   2471>>ASSIGN   2472>>ASSIGN   2473>>ASSIGN   2475>>ASSIGN   2479>>ASSIGN
      2568>>ASSIGN   2569>>ASSIGN   2570>>ASSIGN   2583>>ASSIGN   2584>>ASSIGN   2585>>ASSIGN   2586>>ASSIGN
      2587>>ASSIGN
CRASH
      2225**LABEL    2216--GOTO
DOIT IN PROCEDURE SNAPPER
      2172**LABEL    2168--GOTO
FDS
      2022**DCL      2391<>CALL     2531<>CALL
FDS.V
      2022**DCL      2022--DCLINIT
FDS.V.SEGSIZE#
      2024**DCL      2530<<ASSIGN
GBUF
      2284**LABEL    2274--GOTO
GDS
      1991**DCL      2362<>CALL
GDS.V
      1991**DCL      1991--DCLINIT
GDS.V.SEGSIZE#
      1994**DCL      2361<<ASSIGN   2390<<ASSIGN
GDSVEC
      2007**DCL      1991--DCLINIT  2022--DCLINIT  2366>>ASSIGN   2546>>ASSIGN
GDSVEC.PTR$
      2009**DCL      2369>>ASSIGN
GDSVEC.W2
      2008**DCL      2009--REDEF
GDSVEC.W2.SEGID#
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:71   
      2009**DCL      2360<<ASSIGN   2389<<ASSIGN   2528<<ASSIGN
GET
      2313**LABEL    2386--GOTO
GO
      1746**DCL      2215<<ASSIGN   2225<<ASSIGN   2234>>IF
GSIZE
      1744**DCL      2273<<ASSIGN   2284<<ASSIGN   2325>>IF       2344>>IF       2346>>ASSIGN   2348>>ASSIGN
      2403<<ASSIGN   2443<<ASSIGN   2461>>IF       2472>>ASSIGN   2490>>ASSIGN   2498>>IF       2569>>ASSIGN
      2584>>ASSIGN
I
      1738**DCL      2252<<CALLBLT  2253>>ASSIGN   2522<<ASSIGN   2523>>IF
JITERR
      1784**DCL      2062--DCLINIT  2080--DCLINIT  2174<<ASSIGN   2228<<ASSIGN
LDTRC
      2115**DCL      2256<>CALL
LDTRC.V
      2117**DCL      2117--DCLINIT
M$FDS
        66**DCL-ENT  2391--CALL     2531--CALL
M$GDS
        66**DCL-ENT  2362--CALL
M$JOBSTATS
        96**DCL-ENT  2367--CALL     2547--CALL
M$LDTRC
        44**DCL-ENT  2256--CALL
M$RENV
        87**DCL-ENT  2188--CALL     2196--CALL
M$SCREECH
        45**DCL-ENT  2184--CALL     2233--CALL
M$SENV
        87**DCL-ENT  2176--CALL
M$WAIT
        89**DCL-ENT  2199--CALL
M$XCON
        86**DCL-ENT  2255--CALL
M$XXX
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:72   
        43**DCL-ENT  2301--CALL     2581--CALL
MYNAME
      1778**DCL      2115--DCLINIT
MYNAME.L#
      1778**DCL      2253<<ASSIGN
MYNAME.NAME#
      1778**DCL      2254<<ASSIGN
NOGOT
      2394**LABEL    2362--CALLALT
NOGOT1
      2385**LABEL    2367--CALLALT
NOSENV IN PROCEDURE SNAPPER
      2177**LABEL    2176--CALLALT
OFFSET
      1742**DCL      2459<<ASSIGN   2461>>IF       2488>>IF       2558>>IF
P$
      1739**DCL      2346<<ASSIGN   2347>>ASSIGN   2348>>ASSIGN   2349>>ASSIGN   2351>>ASSIGN   2451<<ASSIGN
      2454>>DOWHILE  2459>>ASSIGN   2460>>ASSIGN   2471>>ASSIGN   2472>>ASSIGN   2474>>IF       2479<<ASSIGN
      2490>>ASSIGN   2490>>ASSIGN   2493>>IF       2498>>IF       2498>>IF       2502>>ASSIGN   2502>>ASSIGN
      2502>>ASSIGN   2503>>ASSIGN   2503>>ASSIGN   2504>>IF       2504>>ASSIGN   2509>>IF       2514>>ASSIGN
      2522>>ASSIGN   2532>>IF       2560>>ASSIGN   2561<<ASSIGN   2561>>ASSIGN   2568>>ASSIGN   2587<<ASSIGN
PARM4
      1703**DCL        14--PROC     2157--ENTRY    2185--IF       2187--ASSIGN   2248--ENTRY    2252--CALLBLT
      2254--ASSIGN
PP$
      1740**DCL      2317<<ASSIGN   2327>>ASSIGN   2329>>IF       2332>>ASSIGN   2349>>ASSIGN   2355<<ASSIGN
      2450<<ASSIGN   2473>>ASSIGN   2539>>ASSIGN   2540>>ASSIGN   2560<<ASSIGN   2570>>ASSIGN   2579>>IF
      2581>>IF       2586>>ASSIGN
PSIZE
      1741**DCL      2460<<ASSIGN   2488>>IF       2498>>IF       2514<<ASSIGN   2515>>IF       2522>>ASSIGN
      2529>>IF       2530>>ASSIGN   2542>>ASSIGN
RBUF
      2443**LABEL    2404--GOTO
RELPMME
      2514**LABEL    2480--GOTO     2588--GOTO
REMAPIT
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:73   
      2039**DCL      2367<>CALL     2547<>CALL
REMAPIT.BUF_
      2039**DCL      2366<<ASSIGN   2546<<ASSIGN
REMAPIT.V
      2043**DCL      2039--DCLINIT
REMAPIT.V.STATSEG#
      2043**DCL      2365<<ASSIGN   2545<<ASSIGN
RENV IN PROCEDURE SNAPPER
      2164**DCL      2175<<ASSIGN   2177<<ASSIGN   2188>>IF       2196>>IF
RTNAME IN PROCEDURE SNAPPER
      2165**DCL      2167<<ASSIGN   2172<<ASSIGN   2186>>IF
RV$DFNAME
      1728**DCL      2187<<ASSIGN
RV$DFNAME.MONID
      1728**DCL      1728--REDEF
RV_DFNAME
      1781**DCL      2081--DCLINIT  2187>>ASSIGN
RV_DFNAME.MONID
      1781**DCL      1781--REDEF
SCR
      2231**LABEL    2234--GOTO
SCREECH
      2062**DCL      2233<>CALL
SCREECHCODE
      1899**DCL      2062--DCLINIT
SCREECHCODE.CODE#
      1925**DCL      2229<<ASSIGN
SCREECHCODE.FCG#
      1912**DCL      2230<<ASSIGN
SCREECHCODE.MID#
      1925**DCL      2231<<ASSIGN
SCRFCG.F
      1697**DCL      2182>>ASSIGN   2230>>ASSIGN
SCRMID.M
      1701**DCL      2183>>ASSIGN   2231>>ASSIGN
SEGCB
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:74   
      1678**DCL        14--PROC     2157--ENTRY    2181--ASSIGN   2213--ENTRY    2223--ENTRY    2229--ASSIGN
      2248--ENTRY    2250--IF       2271--ENTRY    2281--ENTRY    2401--ENTRY    2439--ENTRY
SEGCB.ALLOSIZE
      1685**DCL      2297>>IF       2300<<ASSIGN   2309>>IF       2311>>IF       2312<<ASSIGN   2312>>ASSIGN
      2313<<ASSIGN   2313>>ASSIGN   2361>>ASSIGN   2381>>ASSIGN   2385>>ASSIGN   2390>>ASSIGN   2515>>IF
SEGCB.FHD$
      1692**DCL      2304<<ASSIGN   2317--ASSIGN   2318>>ASSIGN   2329--IF       2382<<ASSIGN   2450--ASSIGN
      2451>>ASSIGN   2532>>IF       2534<<ASSIGN   2579--IF
SEGCB.FTL$
      1693**DCL      2303<<ASSIGN   2330<<ASSIGN   2332<<ASSIGN   2350>>IF       2351<<ASSIGN   2383<<ASSIGN
      2474>>IF       2475<<ASSIGN   2504<<ASSIGN   2509>>IF       2535<<ASSIGN   2540<<ASSIGN   2581>>IF
      2583<<ASSIGN
SEGCB.JPMME
      1686**DCL      2363>>IF       2543>>IF
SEGCB.JSSEG
      1688**DCL      2365>>ASSIGN   2545>>ASSIGN
SEGCB.PGCNT
      1681**DCL      2300>>ASSIGN
SEGCB.SEG$
      1690**DCL      2369<<ASSIGN   2380>>ASSIGN   2522>>ASSIGN
SEGCB.SEGN
      1683**DCL      2288>>ASSIGN   2449>>ASSIGN
SEGCB.SEGSIZE
      1691**DCL      2302<<ASSIGN   2380>>ASSIGN   2381<<ASSIGN   2381>>ASSIGN   2523>>IF       2542<<ASSIGN
      2542>>ASSIGN
SEGCB.SIZ
      1679**DCL      2284>>ASSIGN   2300>>ASSIGN   2300>>ASSIGN   2311>>IF       2312>>ASSIGN   2313>>ASSIGN
      2443>>ASSIGN
SEGIDS
      1959**DCL      2360>>ASSIGN   2389>>ASSIGN   2528>>ASSIGN
SEGN
      1737**DCL      2288<<ASSIGN   2301>>IF       2360>>ASSIGN   2389>>ASSIGN   2449<<ASSIGN   2528>>ASSIGN
SLEEP10
      2096**DCL      2199<>CALL
SLEEP10.V
      2097**DCL      2096--DCLINIT
PL6.E3A0      #001=FOI$COM File=FOI$COM.:E05TSI                                  TUE 07/29/97 17:08 Page:75   
SLEEPER
      1745**DCL      2179<<ASSIGN   2192<<ASSIGN   2192>>ASSIGN   2193>>IF
SNAP
      2080**DCL      2184<>CALL
SNAP IN PROCEDURE SNAPPER
      2179**LABEL    2199--CALLALT  2200--GOTO
SNAPALT IN PROCEDURE SNAPPER
      2188**LABEL    2184--CALLALT
SNAPCODE
      1817**DCL      2080--DCLINIT
SNAPCODE.CODE#
      1843**DCL      2181<<ASSIGN
SNAPCODE.FCG#
      1830**DCL      2182<<ASSIGN
SNAPCODE.MID#
      1843**DCL      2183<<ASSIGN
SNAPPER
      2162**PROC     2159--CALL
SNAPPER1 IN PROCEDURE SNAPPER
      2170**ENTRY    2251--CALL
SYSACCT
      1972**DCL      2115--DCLINIT
XSIZ
      1699**DCL        14--PROC     1700--REDEF    2157--ENTRY    2213--ENTRY    2223--ENTRY    2248--ENTRY
      2271--ENTRY    2273>>ASSIGN   2401--ENTRY    2403>>ASSIGN
ZAPXCON
      2133**DCL      2255<>CALL
ZAPXCON.V
      2134**DCL      2133--DCLINIT
