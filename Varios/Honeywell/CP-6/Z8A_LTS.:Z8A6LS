

09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6      /* INCLUDE FILE "LTS" */
    7
    8      DCL   LTS$    EXT PTR;
    9      DCL   LONG_ITEM$ REDEF LTS$ PTR ;
   10
   11      %EQU MAX#_DIMS        = 49;
   12      %EQU MAX_SEG#         = 99;
   13      %EQU MAX_FIXED_SEG#   = 49;
   14
   15      DCL 1 LTS_   EXT ALIGNED,
   16          2 TOP    PTR INIT (ADDR(NIL)),
   17          2 FIRST  PTR,        /* FIRST ITEM IN PAGE  */
   18          2 BOTTOM SBIN WORD INIT(0),  /* NEXT AVAILABLE      */
   19          2 FLOOR  SBIN WORD INIT(0),  /* LAST WORD IN PAGE   */
   20          2 SIZE   SBIN WORD INIT(0);  /* SIZE IN #PAGES      */
   21
   22      DCL 1 LTS     BASED (LTS$) ALIGNED,
   23          2 ID      UBIN (18) UNAL, /* IDENTIFICATION CODE */
   24          2 N       UBIN (18) UNAL; /* LENGTH OF THIS ITEM */
   25
   26      DCL 1 ARGLIST BASED (LTS$) ALIGNED,
   27          2 ID      UBIN HALF UNAL, /* Identification code   */
   28          2 N       UBIN HALF UNAL, /* Size of item in words */
   29          2 ARG$    (0:%(PAGE_SIZE-2)) PTR ,  /* Ptr to args           */
   30          2 ARGS  REDEF ARG$ CHAR(%((PAGE_SIZE-1)*4));
   31
   32      DCL 1 DIMS    BASED (LTS$) ALIGNED,
   33            2 ID      UBIN (18) UNAL, /* IDENTIFICATION CODE      */
   34            2 N       UBIN (18) UNAL, /* LENGTH OF THIS ITEM      */
   35            2 DN2     PTR,            /* "DEPENDING ON" DATANAME2 */
   36            2 D       (0:%MAX#_DIMS), /* UP TO 49 DIMENSIONS      */
   37              3 SPAN    UBIN (36) UNAL, /* LENGTH OF ONE ELEMENT    */
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          2    
   38              3 DIM     UBIN (36) UNAL, /* K-TH DIMENSION           */
   39              3 INDEX$  PTR,            /* K-TH INDEXES LIST OF INDEX ITEMS */
   40            2 OD      REDEF D,          /* Occurs Depending dims */
   41              3 INT1  SBIN WORD,        /* Occurs int1 to int2 times */
   42              3 INT2  SBIN WORD,        /* */
   43              3 TOTAL_SPAN SBIN WORD,
   44              3 *     (0:%(MAX#_DIMS-1)),
   45                4 *   SBIN WORD,
   46                4 *   SBIN WORD,
   47                4 *   SBIN WORD;
   48
   49
   50      DCL 1 LCNST   ALIGNED BASED(LTS$),
   51          2 ID      UBIN HALF UNAL, /* Identification code */
   52          2 N       UBIN HALF UNAL,
   53          2 CONST   CHAR(%((PAGE_SIZE-1)*4)),
   54          2 CONSTW  REDEF CONST,
   55           3 VAL    (0:%(PAGE_SIZE-2)) SBIN,
   56          2 DESC_LIST REDEF CONST,
   57           3 ARG_COUNT      SBIN HALF UNAL,
   58           3 DESC_COUNT     SBIN HALF UNAL,
   59           3 DESCRIPTOR     (0:%(PAGE_SIZE-3)),
   60            4 DESC_WORD               UNAL,
   61              5 TYPE               UBIN HALF UNAL,
   62              5 F                  BIT(1) UNAL,
   63              5 EXTENDED           BIT(1) UNAL,
   64              5 ARRAYED            BIT(1) UNAL,
   65              5 STRUCT             BIT(1) UNAL,
   66              5 VIRTUAL            BIT(1) UNAL,
   67              5 ADSC               UNAL,
   68                6 LENGTH           SBIN(13) UNAL,
   69                6 LENGTH_OFFSET REDEF LENGTH SBIN(13) UNAL,
   70              5 NDSC REDEF  ADSC,
   71                6 *                BIT(1) UNAL,
   72                6 SCALE_FACTOR     SBIN(6) UNAL,
   73                6 LENGTH           SBIN(6) UNAL,
   74            4 SIZE_WORD REDEF DESC_WORD SBIN WORD;
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          3    
   75
   76      DCL 1 LONG    ALIGNED BASED(LTS$),
   77          2 ID      UBIN HALF UNAL, /* IDENTIFICATION CODE  */
   78          2 *       UBIN HALF UNAL,
   79          2 LENGTH  UBIN WORD UNAL; /* LENGTH OF ITEM       */
   80
   81      DCL 1 LTSS    ALIGNED BASED,
   82          2 ID      UBIN (18) UNAL, /* IDENTIFICATION CODE */
   83          2 *       UBIN (18) UNAL,
   84          2 DIMS$            PTR,   /* POINTER TO DIMS ITEM */
   85          2 NEL$             PTR,   /* POINTER TO NEL  ITEM */
   86          2 LONG$            PTR,   /* POINTER TO LONG ITEM */
   87          2 DEPENDING_SIZE$  PTR,   /* Pointer to Depending size item */
   88          2 KEY$             PTR,   /* POINTER TO KEY  ITEM */
   89          2 FILE_LTS$        PTR,   /* Pointer to FILE_LTS item */
   90          2 REPORT_ENTRY$    PTR,   /* Pointer to REPORT entry LTS item */
   91    *     2 DML_REC$         REDEF REPORT_ENTRY$ PTR, /* DML_REC item */
   92    *     2 CD_LTS$          REDEF REPORT_ENTRY$ PTR, /* CD_LTS item */
   93    *     2 BASE_LTS$        PTR,   /* Pointer to BASE_LTS item */
   94    *     2 INIT_LTS$        PTR;   /* Pointer to INIT_LTS item */
   95
   96      DCL 1 PRIME   ALIGNED BASED(LTS$),
   97          2 ID      UBIN HALF UNAL, /* IDENTIFICATION CODE  */
   98          2 *       UBIN HALF UNAL,
   99          2 TRIAD   PTR,            /* POINTER TO TRIAD REG. CONTAINS */
  100          2 LAST    PTR,            /* POINTER TO PREVIOUS PRIME ITEM */
  101          2 NEXT    PTR;            /* POINTER TO NEXT PRIME ITEM FOR REG */
  102
  103      DCL 1 REF     ALIGNED BASED(LTS$),
  104            2 * UBIN HALF UNAL,
  105            2 B,
  106              3 *        BIT(16) UNAL,
  107              3 WORD_    BIT(1) UNAL,
  108              3 CONST    BIT(1) UNAL,
  109            %DESCRIPTOR(LVL=2);
  110            2 SSOP_TAG$ PTR,           /* Points to triad holding tag */
  111            2 NEXT REDEF SSOP_TAG$ PTR,/* Pooling mechanism           */
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          4    
  112
  113            2 SIZ_TAG$ PTR,            /* Points to triad holding tag */
  114            2 LAST REDEF SIZ_TAG$ PTR, /* Pooling mechanism           */
  115
  116            2 PR_TAG$ PTR,             /* Points to triad holding tag */
  117            2 ST$     PTR;             /* Points to Symbol Table item */
  118
  119      DCL 1 EVALUATE ALIGNED BASED(LTS$),
  120          2 ID       UBIN (18) UNAL,  /* identification code     */
  121          2 N        UBIN (18) UNAL,  /* Length of this item     */
  122          2 SORT     (0:%PAGE_SIZE), /* Maximum limit           */
  123          3 COUNT    SBIN (36) UNAL,  /* Number of duplicate GOs */
  124          3 COND$    PTR UNAL ;       /* Pointer to GO item      */
  125
  126      DCL 1 NEL     ALIGNED BASED(LTS$),
  127          2 ID      UBIN (18) UNAL, /* IDENTIFICATION CODE  */
  128          2 *       UBIN (18) UNAL,
  129          2 DESC    UNAL,
  130          %DESCRIPTOR(LVL=3);
  131          2 MOP$    PTR,            /* PTR TO CONST OF MICRO OP */
  132          2 DNT$    PTR;            /* PTR TO LEXEME, ORIG PIC STR */
  133
  134      DCL 1 INDEXES          ALIGNED BASED,
  135            2 ID             UBIN (18) UNAL,
  136            2 *              UBIN (18) UNAL,
  137            2 INDEX_ST$      PTR,
  138            2 LINK           PTR;
  139
  140      DCL 1 RENAMES      ALIGNED BASED(LTS$),
  141          2 ID           UBIN (18) UNAL, /* Identification code */
  142          2 *            UBIN (18) UNAL,
  143          2 START_ST$    PTR,            /* Ptr to starting item's ST entry */
  144          2 END_ST$      PTR;            /* Ptr to ending item's ST entry */
  145
  146      DCL 1 DEPENDING_SIZE         ALIGNED BASED (LTS$),
  147            2 ID             UBIN (18) UNAL,
  148            2 MIN_SIZE       UBIN (18) UNAL,
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          5    
  149            2 SIZE$          PTR UNAL,
  150            2 DIMS$          PTR UNAL;
  151
  152      DCL 1 KEY              ALIGNED BASED (LTS$),
  153           2 ID              UBIN HALF UNAL,
  154           2 *               UBIN HALF UNAL,
  155           2 B               ALIGNED,
  156            3 ASCENDING      BOOLEAN,
  157            3 USED           BOOLEAN,
  158            3 *              BIT (34) UNAL,
  159           2 KEY$            PTR,
  160           2 LINK            PTR;
  161
  162
  163        DCL 1 REPORT_LTS         BASED (LTS$)  ALIGNED,
  164              2 ID               UBIN  HALF    UNAL,
  165              2 *                UBIN  HALF    UNAL,
  166              2 ST$              PTR,      /* To st item of <report name> */
  167              2 FILE$            PTR,      /* To st item of <file name> */
  168              2 ATTR             BIT (36),
  169              2 B    REDEF  ATTR,
  170                3 CODE_ON             BIT (1),
  171                3 CONTROL_FINAL       BIT (1),
  172                3 PAGE_LIMIT_ON       BIT (1),
  173                3 HEADING_ON          BIT (1),
  174                3 FIRST_DETAIL_ON     BIT (1),
  175                3 LAST_DETAIL_ON      BIT (1),
  176                3 FOOTING_ON          BIT (1),
  177                3 GLOBAL              BIT (1),
  178                3 REFERENCED          BIT (1),
  179                3 INITIATED           BIT (1),
  180                3 *                   BIT (8),
  181                3 CODE_NUMBER         UBIN HALF UNAL,
  182              2 CODE             CHAR (2),
  183              2 CONTROL$         PTR,
  184              2 CONTROL_FINAL$   PTR,
  185              2 CONTROL_ERROR$   PTR,
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          6    
  186              2 GENERAL_SUBTOTAL$ PTR,
  187              2 PAGE_LIMIT       SBIN WORD,
  188              2 HEADING          SBIN WORD,
  189              2 FIRST_DETAIL     SBIN WORD,
  190              2 LAST_DETAIL      SBIN WORD,
  191              2 FOOTING          SBIN WORD,
  192              2 RECORD_LENGTH    SBIN WORD,
  193              2 PAGE_COUNTER$    PTR,      /* Point to page counter st item */
  194              2 LINE_COUNTER$    PTR,      /* Point to line counter st item */
  195              2 SUM_LTS$         PTR,      /* To first of SUM_LTS item */
  196              2 RWCT$            PTR,       /* To run time control table */
  197              2 REPORT_HEADING$          PTR,
  198              2 PAGE_HEADING$            PTR,
  199              2 CONTROL_HEADING_FINAL$   PTR,
  200              2 CONTROL_HEADING$         PTR,
  201              2 DETAIL$                  PTR,
  202              2 CONTROL_FOOTING$         PTR,
  203              2 CONTROL_FOOTING_FINAL$   PTR,
  204              2 PAGE_FOOTING$            PTR,
  205              2 REPORT_FOOTING$          PTR,
  206              2 BUFFER_ST$               PTR,
  207              2 CTR_LVL_COUNTER$         PTR,
  208              2 COL_NO#                  SBIN WORD,
  209              2 NO_CTR_ITEM              SBIN WORD,
  210              2 AFTER_ADVANCE$           PTR,
  211              2 DETAIL_NO               SBIN WORD,
  212              2 BODY_NO                 SBIN WORD,
  213              2 LINK                     PTR,
  214              2 INIT_CHAIN$              PTR;
  215
  216       DCL 1 REPORT_01_LTS     BASED (LTS$)  ALIGNED,
  217             2 ID                    UBIN HALF UNAL,
  218             2 ATTR                  UBIN HALF UNAL,
  219             2 B  REDEF ATTR,
  220               3 LINE_PRESENTED      BOOLEAN,
  221               3 CONTROL_ERROR       BOOLEAN,
  222               3 NEXT_GROUP_PRESENTED BOOLEAN,
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          7    
  223               3 ELEMENTARY          BOOLEAN,
  224               3 GROUP_INDICATE      BOOLEAN,
  225               3 *                   BIT(13),
  226             2 LINE_TYPE             UBIN WORD,
  227             2 LINE_NO#              SBIN WORD,
  228             2 ST$                   PTR,
  229             2 QLT$                  PTR,
  230             2 USE_CHAIN$   REDEF  QLT$  PTR,
  231             2 PREV                  PTR,
  232             2 NEXT                  PTR,
  233             2 LINK                  PTR,
  234             2 GROUP_TYPE            UBIN WORD,
  235             2 NEXT_GROUP_TYPE       UBIN WORD,
  236             2 NEXT_GROUP_NO#        SBIN WORD,
  237             2 TOTAL_LINES           SBIN WORD,
  238             2 CONTROL_LTS$          PTR,
  239             2 REPORT_LTS$           PTR,
  240             2 SPECIAL_SUBTOTAL$     PTR,
  241             2 FIRST_LINE            UNAL,
  242               3 TYPE                UBIN WORD,
  243               3 NO#                 SBIN WORD,
  244               3 LTS$                PTR,
  245             2 RWCT$                 PTR,
  246             2 GROUP_INDICATOR$      PTR;
  247
  248
  249       DCL 1 REPORT_ELEM_LTS             BASED (LTS$) ALIGNED,
  250             2 ID                        UBIN HALF UNAL,
  251             2 ATTR                      UBIN HALF UNAL,
  252             2 B   REDEF  ATTR,
  253               3 LINE_PRESENTED          BOOLEAN,
  254               3 COLUMN_PRESENTED        BOOLEAN,
  255               3 SOURCE_PRESENTED        BOOLEAN,
  256               3 SUM_PRESENTED           BOOLEAN,
  257               3 GROUP_INDICATE          BOOLEAN,
  258               3 PRINTABLE               BOOLEAN,
  259               3 *                       BIT(12),
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          8    
  260             2 LINE_TYPE                 UBIN WORD,
  261             2 LINE_NO#                  SBIN WORD,
  262             2 ST$                       PTR,
  263             2 QLT$                      PTR,
  264             2 PREV                      PTR,
  265             2 NEXT                      PTR,
  266             2 COLUMN_NO#                SBIN WORD,
  267             2 SPAN                      SBIN WORD,
  268             2 SOURCE_ETT$               PTR,
  269             2 SUM_LTS$                  PTR,
  270             2 VALUE_ETT$                PTR;
  271
  272
  273       DCL 1 REPORT_GRP_LTS              BASED (LTS$) ALIGNED,
  274             2 ID                        UBIN HALF UNAL,
  275             2 ATTR                      UBIN HALF UNAL,
  276             2 B   REDEF  ATTR,
  277               3 LINE_PRESENTED          BOOLEAN,
  278               3 *                       BIT(17),
  279             2 LINE_TYPE                 UBIN WORD,
  280             2 LINE_NO#                  SBIN WORD,
  281             2 ST$                       PTR,
  282             2 QLT$                      PTR,
  283             2 PREV                      PTR,
  284             2 NEXT                      PTR;
  285
  286
  287         DCL 1 CONTROL_NAME_LTS          BASED (LTS$) ALIGNED,
  288               2 ID                      UBIN HALF UNAL,
  289               2 ATTR                    UBIN HALF UNAL,
  290               2 B REDEF ATTR,
  291                 3 CLASS_EDITED          BOOLEAN,
  292                 3 *   (0 : 13)          BOOLEAN,
  293                 3 CLASS                 UBIN (3) UNAL,
  294               2 ST$                     PTR,
  295               2 CONTROL_HEADING$        PTR,
  296               2 CONTROL_FOOTING$        PTR,
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          9    
  297               2 SUM_RESET$              PTR,
  298               2 SUM_SUBTOTAL$           PTR,
  299               2 SUM_CLEAR$              PTR,
  300               2 LEVEL                   SBIN WORD,
  301               2 LINK                    PTR,
  302               2 TEMP$                   PTR,
  303               2 SHADOW$                 PTR,
  304               2 ST_FIELD$               PTR,
  305               2 TEMP_FIELD$             PTR,
  306               2 SHADOW_FIELD$           PTR,
  307               2 START_OFFSET            SBIN WORD;
  308
  309
  310         DCL 1 SUM_LTS     BASED (LTS$)  ALIGNED,
  311                 2 ID            UBIN HALF UNAL,
  312                 2 ATTR          UBIN HALF UNAL,
  313                 2 B REDEF ATTR,
  314                   3 RESETED     BOOLEAN,
  315                   3 *           BIT (17),
  316                 2 EDIT_ST$      PTR,
  317                 2 EDIT_ST_ILL$  PTR,
  318                 2 SUM_ST$       PTR,
  319                 2 SUM_ST_ILL$   PTR,
  320                 2 REPORT_LTS$   PTR,
  321                 2 REPORT_01_LTS$ PTR;
  322
  323         DCL 1 SEGMENT_LTS       BASED (LTS$) ALIGNED,
  324               2 ID              UBIN HALF UNAL,
  325               2 ATTR            UBIN HALF UNAL,
  326               2 B  REDEF ATTR,
  327                 3 FIXED_PERMANENT   BOOLEAN,
  328                 3 FIXED_OVERLAY     BOOLEAN,
  329                 3 INDEPENDENT       BOOLEAN,
  330                 3 *                 BIT(15),
  331               2 SECTION_ST$        PTR,
  332               2 SEGMENT_NO#         SBIN WORD,
  333               2 NEXT_SECTION$       PTR,
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          10   
  334               2 ALTER_RESET$        PTR,
  335               2 NEXT                PTR,  /* link sections with same id */
  336               2 LINK                PTR,
  337               2 SUB_LABEL$          PTR,
  338               2 LINE                SBIN WORD,
  339               2 COLUMN              SBIN WORD;
  340
  341         DCL 1 ALTER_LTS             ALIGNED BASED,
  342               2 ID                  UBIN (18) UNAL,
  343               2 *                   UBIN (18) UNAL,
  344               2 LABEL$              PTR,
  345               2 SEG_NO#             SBIN WORD,
  346               2 NEXT                PTR;
  347
  348
  349         DCL 1 CD_LTS                BASED (LTS$) ALIGNED,
  350               2 ID                  UBIN HALF UNAL,
  351               2 ATTR                UBIN HALF UNAL,
  352               2 B   REDEF ATTR,
  353                 3 INITIAL           BOOLEAN,
  354                 3 *                 BIT (17),
  355               2 BUFFER              UBIN WORD,
  356               2 D   REDEF BUFFER,
  357                 3 LEN               UBIN HALF UNAL,
  358                 3 OCCURS            UBIN HALF UNAL,
  359               2 CD_ST$              PTR,
  360               2 WORK_ST$            PTR,
  361               2 BUFFER_ST$          PTR,
  362               2 BUFFER_LENGTH       SBIN WORD,
  363               2 LX_CD_TYPE          UBIN WORD,
  364               2 LINK                PTR;
  365
  366         DCL 1 ARRAY_PRESET_LTS      BASED (LTS$) ALIGNED,
  367               2 ID                  UBIN HALF UNAL,
  368               2 *                   UBIN HALF UNAL,
  369               2 CONSTANT$           PTR,
  370               2 STRING$             PTR,
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          11   
  371               2 BITS_LEFT           SBIN WORD,
  372               2 LAST_OFFSET         SBIN WORD;
  373
  374        DCL 1 BASE_LTS               BASED(LTS$) ALIGNED,
  375              2 ID                   UBIN HALF UNAL,
  376              2 *                    UBIN HALF UNAL,
  377              2 ST$                  PTR, /* to the based variable */
  378              2 POINTER$             PTR, /* to the base pointer   */
  379              2 SEQ#                 SBIN WORD,
  380              2 REDEFINE$            PTR, /* to redefine subj or obj */
  381              2 NEXT                 PTR, /* to next BASE_LTS      */
  382              2 LINK                 PTR,
  383              2 ARGP$            PTR;
  384
  385         DCL 1 FILE_LTS        BASED (LTS$) ALIGNED,
  386              2 ID              UBIN HALF UNAL,
  387              2 DEVICE_TYPE     UBIN HALF UNAL,
  388              2 ST$             PTR,             /* Ptr to FD ST item */
  389              2 FAB$            PTR,             /* Ptr to FAB ST  */
  390              2 FIB$      REDEF FAB$      PTR,   /* Ptr to FIB ST  */
  391              2 FILE_LTS_CHAIN$ PTR,             /* Linked list chain of FILE_LTS items */
  392              2 ASSIGN$         PTR,             /* List of DNTs */
  393              2 NO_OF_AREAS     SBIN WORD,       /* No of areas  */
  394
  395              2 ORGANIZATION    SBIN WORD,       /* Codes:
  396                                                         %SEQUENTIAL
  397                                                         %RELATIVE
  398                                                         %INDEXED
  399                                                         %KEYED     */
  400
  401              2 PAD_CHAR$       PTR,             /* to CONST, or Data name */
  402              2 RECORD_DELIM   SBIN,             /* To DNT */
  403
  404              2 ACCESS_MODE     SBIN WORD,       /* Codes:
  405                                                         %SEQUENTIAL_ACCESS
  406                                                         %RANDOM_ACCESS
  407                                                         %DYNAMIC_ACCESS   */
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          12   
  408
  409              2 FILE_STATUS$    PTR,             /* Ptr to ST */
  410              2 FILE_STATUS2$   PTR,             /* Ptr to 2nd File status */
  411
  412              2 RELATIVE_KEY$   PTR,             /* Ptr to ST */
  413              2 RECORD_KEY$     PTR,             /* Ptr to ST */
  414              2 ALT_RECORD_KEY$ PTR,             /* Ptr to list of keys */
  415
  416              2 ATTR            BIT(36),
  417              2 B               REDEF ATTR,
  418                3 MULTIPLE_FILE_TAPE   BOOLEAN,
  419                3 OPTIONAL_FILE        BOOLEAN,
  420                3 PROCESS_AREA         BOOLEAN,
  421                3 BSN                  BOOLEAN,
  422                3 FLR                  BOOLEAN,
  423                3 VLR                  BOOLEAN,
  424                3 SSF                  BOOLEAN,
  425                3 UNBANNERED           BOOLEAN,
  426                3 SPANNED              BOOLEAN,
  427                3 EXTERNAL             BOOLEAN,
  428                3 GLOBAL               BOOLEAN,
  429                3 DUPLICATES           BOOLEAN,
  430                3 LABEL_OMITTED        BOOLEAN,
  431                3 LABEL_STANDARD       BOOLEAN,
  432                3 BEGIN_TAPE_LABEL     BOOLEAN,
  433                3 BEGIN_FILE_LABEL     BOOLEAN,
  434                3 END_TAPE_LABEL       BOOLEAN,
  435                3 END_FILE_LABEL       BOOLEAN,
  436                3 RECORD_CONTAINS      BOOLEAN,
  437                3 BLOCK_CONTAINS       BOOLEAN,
  438                3 SAME_RECORD          BOOLEAN,
  439                3 SAME_AREA            BOOLEAN,
  440                3 RECORDS_NOT_CHARS    BOOLEAN,
  441                3 RECORD_FORMAT_2      BOOLEAN,
  442                3 EBCDIC               BOOLEAN,
  443                3 EBCDIC_CODE_SET      BOOLEAN,
  444                3 NON_TYA_RECORDS      BOOLEAN,
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          13   
  445                3 SAME_SORT_AREA       BOOLEAN,
  446                3 MERGE_STATEMENT      BOOLEAN,
  447                3 REPORT_CODE          BOOLEAN,
  448                3 NOT_FAST_SEQUENTIAL  BOOLEAN,
  449                3 IMPLIED_PRINTER      BOOLEAN,   /* Used in GCOS  */
  450                3 BLOCK                BOOLEAN,
  451                3 * (0:2)              BOOLEAN,
  452
  453              2 NOMINAL_KEY$    PTR,             /* Ptr to ST */ /*N* Not sure */
  454
  455              2 BLOCK_CONTAINS  ALIGNED,
  456                3 INT_1         SBIN WORD,
  457                3 INT_2         SBIN WORD,
  458                                                 /* BLOCK CONTAINS   <INT-1> TO <INT-2>
  459                                                                   | <INT-1> TO <INT-2> VARYING...
  460                                                                   | <INT-2>.
  461
  462                                                      When INT-2 not specified, INT-1 is zero.      */
  463
  464              2 RECORD_CONTAINS ALIGNED,
  465                3 INT_1         SBIN WORD,       /* INT-1 to INT-2 characters */
  466                3 INT_2         SBIN WORD,
  467                3 DEPENDING$    PTR,             /* Ptr to ST for depending on */
  468
  469              2 LABEL_RECORDS$ PTR,            /* Ptr to ST for datanames */
  470
  471              2 FILE_ID$        PTR,             /* Ptr to ST for file-id */
  472              2 RETENTION$      PTR,             /* Ptr to ST */
  473              2 CATALOG$       PTR,             /* Ptr to list of ST's */
  474              2 DATA_RECORD$    PTR,             /* Ptr to list of ST's */
  475
  476              2 LINAGE          ALIGNED,
  477                3 NO_OF_LINES$  PTR,             /* Ptr to ST */
  478                3 FOOTING$      PTR,             /* Ptr to ST */
  479                3 TOP$          PTR,             /* Ptr to ST */
  480                3 BOTTOM$       PTR,             /* Ptr to ST */
  481
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          14   
  482              2 CODE_SET$       PTR,             /* Alphabet ST item */
  483              2 REPORT$         PTR,             /* List of ST (%RD) */
  484              2 POSITION        SBIN WORD,       /* File position */
  485              2 SAME_RECORD,
  486                3 HEAD$         PTR,
  487                3 LINK          PTR,
  488              2 SAME_AREA,
  489                3 HEAD$         PTR,
  490                3 LINK          PTR,
  491              2 MULT_TAPE,
  492                3 HEAD$         PTR,
  493                3 LINK          PTR,
  494              2 RERUN_NUM       SBIN, /* every # records rerun */
  495              2 DCB_DNT$        PTR,  /* DCB if other than file name */ /*#34313*/
  496              2 USE_PROC_LABEL$ PTR,  /* Ptr to LABEL created for use    */
  497              2 USE_PROC_LABEL_EPTR REDEF USE_PROC_LABEL$ EPTR,
  498              2 LENGTH_READ$    PTR,  /* To the ST item in FAB returned by lib */
  499              2 LINAGE_COUNTER$ PTR, /* To ST for LINAGE-COUNTER */
  500              2 RECORD_COUNT    UBIN,   /* Count of records descriptions */
  501              2 LABEL_EXIT$     PTR;    /* User Label Procedures */
  502
  503
  504
  505         DCL 1 LTS_PTR_ARRAY             BASED (LTS$) ALIGNED,
  506               2 ID                 UBIN HALF UNAL,
  507               2 N                  UBIN HALF UNAL,
  508               2 LINK               PTR,
  509               2 P$                 (0:%(PAGE_SIZE-1)) PTR;
  510
  511         DCL 1 PROC_SUPP            BASED (LTS$) ALIGNED,
  512               2 ID                 UBIN HALF UNAL,
  513               2 N                  UBIN HALF UNAL,
  514               2 CURRENCY_SIGN      CHAR (1) UNAL,
  515               2 LOW_VALUE          CHAR (1) UNAL,
  516               2 HIGH_VALUE         CHAR (1) UNAL,
  517               2 COLL_SEQ_PRESENT   BOOLEAN,
  518    *          2 EXIT_PROG_IN_DECL  BOOLEAN,
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          15   
  519    *          2 *                  BIT (7) UNAL,
  520               2 COLLATING_SEQ$     PTR,
  521               2 INIT_PROC$         PTR,
  522               2 DISPLAY_SIGN_POS   SBIN,
  523               2 DISPLAY_SIGN_TYPE  SBIN,
  524               2 COMP_4_SIGN_POS    SBIN,
  525               2 COMP_DEFAULT       SBIN,
  526               2 ESC_LIST$          PTR,
  527               2 HEAD$              PTR,
  528               2 TAIL$              PTR,
  529               2 OPT_CONST$         PTR,   /* To Option bit const - PH4 */
  530               2 SEG_ARRAY$         PTR,   /* Created for every procedure */
  531               2 CD_LIST$           PTR,
  532               2 SEG_LIMIT          SBIN WORD,
  533               2 SEG_ID_ARRAY$      PTR,   /* Created for main procedure */
  534               2 REF_COUNT          UBIN,
  535               2 IO_RESTORE_CHAIN$  PTR,
  536               2 USE_CHAIN$         PTR,
  537               2 PARA_STATS$        PTR,
  538               2 P2_SAVE$           PTR,
  539               2 USE_INPUT_LABEL$   PTR,
  540               2 USE_INPUT_LABEL_EPTR REDEF USE_INPUT_LABEL$ EPTR,
  541               2 USE_OUTPUT_LABEL$  PTR,
  542               2 USE_OUTPUT_LABEL_EPTR REDEF USE_OUTPUT_LABEL$ EPTR,
  543               2 USE_IO_LABEL$      PTR,
  544               2 USE_IO_LABEL_EPTR REDEF USE_IO_LABEL$ EPTR,
  545               2 USE_EXTEND_LABEL$  PTR,
  546               2 USE_EXTEND_LABEL_EPTR REDEF USE_EXTEND_LABEL$ EPTR;
  547
  548
  549
  550          DCL 1 DML_REC       BASED (LTS$) ALIGNED,
  551                2 ID          UBIN HALF UNAL,
  552                2 *           UBIN HALF UNAL,
  553                2 RECORD_INFO,
  554                  3 LOCATION_MODE_CALC        BIT(1)  UNAL,
  555                  3 RECORD_PARTIAL_DESCRIBED  BIT(1)  UNAL,
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          16   
  556                  3 STORE_NOT_PERMITTED       BIT(1)  UNAL,
  557                  3 MODIFY_ONLY_ONLY          BIT(1)  UNAL,
  558                  3 ALL_CALC_FIELDS_PRESENT   BIT(1)  UNAL,
  559                  3 ERASE_ALL_NOT_PERMITTED   BIT(1)  UNAL,
  560                  3 ERASE_NOT_PERMITTED       BIT(1)  UNAL,
  561
  562                2 SET_INFO,
  563                  3 SET_ORDER_TEMP            BIT(1)  UNAL,
  564                  3 OWNER_REC_NOT_PRESENT     BIT(1)  UNAL,
  565                  3 MEMBERSHIP                BIT(2)  UNAL,
  566                  3 MODIFY_ONLY_NOT_PERMITTED BIT(1)  UNAL,
  567
  568                2 REALM_INFO,
  569                  3 TEMP_AREA                 BIT(1)  UNAL,
  570
  571                2 REALM_RELATIONSHIP           BIT(1)  UNAL,
  572                2 SET_RELATIONSHIP            BIT(1)  UNAL,
  573                2 KEY_RELATIONSHIP            BIT(1)  UNAL,
  574                2 * (0:19)                    BIT(1)  UNAL,
  575
  576                2 REALM_NAME                  UBIN WORD,
  577                2 SET_NAME                    UBIN WORD,
  578                2 KEY_NAME                    UBIN WORD,
  579                2 EXTEND$                     PTR;
  580
  581
  582          DCL   1   USE  ALIGNED BASED(LTS$),
  583                  2   ID             UBIN HALF UNAL,
  584                  2   TYPE           UBIN HALF UNAL, /* IO, DML, RW, ... */
  585                  2   PROC_CHAIN$    PTR,
  586                  2   PROC_LABEL$    PTR,
  587                  2   PROC_NO_LABEL$ REDEF PROC_LABEL$ EPTR,
  588                  2   LINK$          PTR,  /* Linked from the PROC_ item */
  589                  2   TO$            PTR,         /* FAB, USE_BLOCK, ... */
  590                  2   ILS_LIST       DALIGNED,
  591                   3  *              (0: %(LENGTH_OF_LX_ITEM - 1)) PTR ALIGNED,
  592                  2   INIT_LABEL_BASE$ PTR,
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          17   
  593                  2   TO1$           PTR,  /* Temp PTR for use in USE proc */
  594                  2   LINE           UBIN HALF HALIGNED,  /* Line number of token USE */
  595                  2   COLUMN         UBIN HALF HALIGNED;  /* Column number of token USE */
  596
  597          DCL 1 USE_SUPP  ALIGNED BASED(LTS$),
  598                  2 ID        UBIN HALF HALIGNED,
  599                  2 *         UBIN HALF HALIGNED,
  600                  2 FILE_LTS$ PTR,
  601                  2 PROC_LABEL$ PTR,
  602                  2 PROC_LABEL_EPTR REDEF PROC_LABEL$ EPTR,
  603                  2 TO$       PTR,
  604                  2 USE$      PTR,
  605                  2 INIT_LABEL_BASE$ PTR,
  606                  2 LINK$     PTR;
  607
  608          DCL 1 RVA_LTS       BASED(LTS$) ALIGNED,
  609                  2 ID        UBIN HALF UNAL,
  610                  2 *         UBIN HALF UNAL,
  611                  2 ST$       PTR,
  612                  2 LINK$     PTR,
  613                  2 OFFSET    UBIN HALF UNAL,
  614                  2 VERB      UBIN(7)   UNAL,
  615                  2 VERBS     REDEF VERB,
  616                      3 GET       BOOLEAN,
  617                      3 MODIFY    BOOLEAN,
  618                      3 STORE     BOOLEAN,
  619                      3 ERASE_    BOOLEAN,
  620                      3 CONNECT   BOOLEAN,
  621                      3 DISCONNECT BOOLEAN,
  622                      3 FIND      BOOLEAN,
  623                  2 *         UBIN(11) UNAL;
  624
  625       DCL  1 OPEN_LTS          BASED( LTS$ ) ALIGNED,
  626              2 ID              UBIN HALF UNAL,
  627              2 OPEN_TYPE       UBIN HALF UNAL,
  628              2 ARG$            PTR,
  629              2 INFO_BLOCK$     PTR,
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          18   
  630              2 FILE_LTS$       PTR,
  631              2 CONST_PARM      UBIN UNAL,
  632              2 LINK            PTR;
  633
  634       DCL 1  IO_RESTORE_CHAIN  BASED (LTS$) ALIGNED,
  635            2 ID                UBIN HALF UNAL,
  636            2 N                 UBIN HALF UNAL,
  637            2 RESTORE$          PTR, /* BASE triad */
  638            2 TO$               PTR, /* BASE or OFF triad */
  639            2 BASE$             PTR, /* BASE triad */
  640            2 NEXT$             PTR;
  641
  642      /* ALT_KEY INFO */
  643      %EQU NO_WORDS_PER_ALT_KEY = 2;
  644      %EQU MIN_ALT_KEY_SIZE     = 2;
  645      %EQU MAX#_ALT_KEYS       = 50;
  646
  647         DCL 1 ALT_KEY       BASED (LTS$) ALIGNED,
  648               2 ID          UBIN HALF UNAL,
  649               2 N           UBIN HALF UNAL,
  650               2 NUM_KEYS_MINUS_1   SBIN,
  651               2 P           (0:%(MAX#_ALT_KEYS - 1)) ALIGNED,
  652                 3 UNIQUE    BIT (1) ALIGNED,
  653                 3 P$        PTR;
  654
  655      DCL 1  COPY_FILE     BASED (LTS$) ALIGNED,
  656            2 ID           UBIN HALF HALIGNED,
  657            2 *            UBIN HALF HALIGNED,
  658            2 ESN          UBIN,
  659            2 CAT_FILE     CHAR(196),
  660            2 NEXT$        PTR;
  661
  662    * DCL 1 BT             BASED (LTS$) ALIGNED,
  663    *     2 ID             UBIN HALF UNAL, /* IDENTIFICATION CODE */
  664    *     2 *              UBIN HALF UNAL,
  665    *     2 ST$            PTR,
  666    *     2 LOP$           PTR,
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          19   
  667    *     2 ROP$           PTR;
  668    *
  669    *  DCL 1 INIT_LTS    BASED (LTS$) ALIGNED,
  670    *      2 ID          UBIN HALF HALIGNED,
  671    *      2 FILL        CHAR (1),
  672    *      2 FILLER      BOOLEAN,
  673    *      2 MFILLABLE   BOOLEAN,
  674    *      2 GROUP       BOOLEAN,
  675    *      2 BCD         BOOLEAN,
  676    *      2 POINTER     BOOLEAN,
  677    *      2 *           BIT (4),
  678    *      2 BASE$       PTR,
  679    *      2 OFF         SBIN,
  680    *      2 SON$        PTR,
  681    *      2 NEXT$       PTR,
  682    *      2 LENGTH      UBIN,
  683    *      2 SPAN        UBIN,
  684    *      2 DIMS        UBIN,
  685    *      2 SUBSCR$     PTR,
  686    *      2 INDEX$      PTR;
  687      %MACRO RESERVE_LTS (ITEM=%DIMS,POINTER=LTS$) ;
  688
  689             DO ;
  690               %IF     ITEM = %LTSS;
  691                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(LTSS)');
  692               %ELSEIF ITEM = %PRIME;
  693                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(PRIME)');
  694               %ELSEIF ITEM = %LONG;
  695                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(LONG)');
  696               %ELSEIF ITEM = %REF;
  697                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(REF)');
  698               %ELSEIF ITEM = %KEY;
  699                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(KEY)');
  700               %ELSEIF ITEM = %NEL;
  701                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(NEL)');
  702               %ELSEIF ITEM = %INDEXES;
  703                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(INDEXES)');
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          20   
  704               %ELSEIF ITEM = %DML_REC;
  705                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(DML_REC)');
  706               %ELSEIF ITEM = %RENAMES;
  707                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(RENAMES)');
  708               %ELSEIF ITEM = %DEPENDING_SIZE;
  709                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(DEPENDING_SIZE)');
  710               %ELSEIF ITEM = %FILE_LTS;
  711                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(FILE_LTS)');
  712               %ELSEIF ITEM = %REPORT_LTS;
  713                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(REPORT_LTS)');
  714               %ELSEIF ITEM = %REPORT_01_LTS;
  715                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(REPORT_01_LTS)');
  716               %ELSEIF ITEM = %REPORT_ELEM_LTS;
  717                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(REPORT_ELEM_LTS)');
  718               %ELSEIF ITEM = %REPORT_GRP_LTS;
  719                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(REPORT_GRP_LTS)');
  720               %ELSEIF ITEM = %CONTROL_NAME_LTS;
  721                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(CONTROL_NAME_LTS)');
  722               %ELSEIF ITEM = %SUM_LTS;
  723                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(SUM_LTS)');
  724               %ELSEIF ITEM = %SEGMENT_LTS;
  725                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(SEGMENT_LTS)');
  726               %ELSEIF ITEM = %ALTER_LTS;
  727                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(ALTER_LTS)');
  728    *          %ELSEIF ITEM = %BASE_LTS;
  729    *              %LSET @LTS_SIZE = CHARTEXT('SIZEW(BASE_LTS)');
  730               %ELSEIF ITEM = %CD_LTS;
  731                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(CD_LTS)');
  732               %ELSEIF ITEM = %ARRAY_PRESET_LTS;
  733                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(ARRAY_PRESET_LTS)');
  734               %ELSEIF ITEM = %OPEN_LTS;
  735                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(OPEN_LTS)');
  736               %ELSEIF ITEM = %PROC_SUPP;
  737                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(PROC_SUPP)');
  738    *          %ELSEIF ITEM = %COPY_FILE;
  739    *              %LSET @LTS_SIZE = CHARTEXT('SIZEW(INIT_LTS)');
  740               %ELSEIF ITEM = %USE_LTS;
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          21   
  741                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(USE)');
  742               %ELSEIF ITEM = %RVA;
  743                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(RVA_LTS)');
  744               %ELSEIF ITEM = %IO_RESTORE_CHAIN;
  745                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(IO_RESTORE_CHAIN)');
  746               %ELSEIF ITEM = %USE_SUPP;
  747                   %LSET @LTS_SIZE = CHARTEXT('SIZEW(USE_SUPP)');
  748    *          %ELSEIF ITEM = %BT;
  749    *              %LSET @LTS_SIZE = CHARTEXT('SIZEW(BT)');
  750    *          %ELSEIF ITEM = %INIT_LTS;
  751    *              %LSET @LTS_SIZE = CHARTEXT('SIZEW(INIT_LTS)');
  752               %ELSEIF ITEM = %DIMS
  753                    OR ITEM = %LCNST
  754                    OR ITEM = %ARGLIST
  755                    OR ITEM = %EVALUATE
  756                    OR ITEM = %ALT_KEY
  757                    OR ITEM = %LTS_PTR_ARRAY;
  758                   /* ITERATION must be set before invoking RESERVE_LTS */
  759                   %LSET @LTS_SIZE = CHARTEXT('ITERATION');
  760               %ELSE;
  761                   %ERROR ('**** ITEM must be set to a known LTS reference', 4);
  762                   %LSET @LTS_SIZE = CHARTEXT('ITERATION');
  763               %ENDIF;
  764
  765               IF LTS_.BOTTOM + %@LTS_SIZE >= LTS_.FLOOR THEN
  766                 CALL Z8AR$RESERVER (ADDR(LTS_));
  767               POINTER = PINCRW (LTS_.FIRST, LTS_.BOTTOM);
  768               LTS_.BOTTOM = LTS_.BOTTOM + %@LTS_SIZE;
  769               POINTER -> LTS.ID = ITEM;
  770
  771               %IF @LTS_SIZE = CHARTEXT('ITERATION');
  772                  POINTER -> LTS.N = ITERATION;
  773               %ENDIF;
  774
  775             END ;
  776
  777      %MEND ;
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          22   
  778
  779      %MACRO TOP_LTS (POINTER = LTS$) ;
  780
  781             DO ;
  782               POINTER = LTS_.TOP ;
  783             END ;
  784
  785      %MEND ;
  786
  787      %MACRO STEP_LTS (POINTER = LTS$) ;
  788
  789             DO ;
  790               ITERATION = LTS_STEP (POINTER->LTS.ID-%FIRST_LTS) ;
  791               IF ITERATION = 0
  792               THEN ITERATION = POINTER->LTS.N ;
  793               POINTER = PINCRW (POINTER, ITERATION) ;
  794               IF POINTER = PINCRW (LTS_.FIRST, LTS_.BOTTOM)
  795               THEN POINTER = ADDR(NIL) ;
  796               ELSE
  797               IF POINTER->LTS.ID = %CONTINUE
  798               THEN POINTER = POINTER -> CONT.NEXT;
  799             END ;
  800
  801      %MEND ;
  802
  803
  804         %MACRO NEW_PROC_SUPP (@POINTER = LTS$,
  805                               @CURRENCY_SIGN = "'$'",
  806                               @LOW_VALUE = "BITASC('000'O)",
  807                               @HIGH_VALUE = "BITASC('177'O)",
  808                               @COLL_SEQ_PRESENT = FALSE,
  809                               @DISPLAY_SIGN_POS = %SIGN_POS_TRAILING,
  810                               @DISPLAY_SIGN_TYPE = %SIGN_TYPE_OVERPUNCH,
  811                               @COMP_4_SIGN_POS = %SIGN_POS_TRAILING,
  812                               @COMP_DEFAULT = %RSV_WRD_COMP,
  813                               @COLLATING_SEQ$ = "ADDR(NIL)",
  814                               @INIT_PROC$ = "ADDR(NIL)",
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          23   
  815                               @HEAD$     = "ADDR(NIL)",
  816                               @TAIL$     = "ADDR(NIL)",
  817                               @OPT_CONST$= "ADDR(NIL)",
  818                               @SEG_ARRAY$= "ADDR(NIL)",
  819                               @SEG_LIMIT = "%MAX_FIXED_SEG# + 1",
  820                               @SEG_ID_ARRAY$ = "ADDR(NIL)",
  821                               @REF_COUNT = 0,
  822                               @IO_RESTORE_CHAIN$ = "ADDR(NIL)",
  823                               @USE_CHAIN$        = "ADDR(NIL)",
  824                               @USE_INPUT_LABEL$  = "ENTADDR(NIL)",
  825                               @USE_OUTPUT_LABEL$ = "ENTADDR(NIL)",
  826                               @USE_IO_LABEL$     = "ENTADDR(NIL)",
  827                               @USE_EXTEND_LABEL$ = "ENTADDR(NIL)",
  828                               @ESC_LIST$ = "ADDR(NIL)");
  829           DO;
  830             %RESERVE_LTS (POINTER = @POINTER, ITEM = %PROC_SUPP);
  831
  832             @POINTER -> PROC_SUPP.CURRENCY_SIGN  = @CURRENCY_SIGN;
  833             @POINTER -> PROC_SUPP.COLLATING_SEQ$ = @COLLATING_SEQ$;
  834             @POINTER -> PROC_SUPP.INIT_PROC$     = @INIT_PROC$;
  835             @POINTER -> PROC_SUPP.HEAD$          = @HEAD$;
  836             @POINTER -> PROC_SUPP.TAIL$          = @TAIL$;
  837             @POINTER -> PROC_SUPP.SEG_LIMIT      = @SEG_LIMIT;
  838             @POINTER -> PROC_SUPP.ESC_LIST$      = @ESC_LIST$;
  839             @POINTER -> PROC_SUPP.LOW_VALUE      = @LOW_VALUE;
  840             @POINTER -> PROC_SUPP.HIGH_VALUE     = @HIGH_VALUE;
  841             @POINTER -> PROC_SUPP.COLL_SEQ_PRESENT = @COLL_SEQ_PRESENT;
  842             @POINTER -> PROC_SUPP.DISPLAY_SIGN_POS = @DISPLAY_SIGN_POS;
  843             @POINTER -> PROC_SUPP.REF_COUNT      = @REF_COUNT;
  844             @POINTER -> PROC_SUPP.IO_RESTORE_CHAIN$ = @IO_RESTORE_CHAIN$;
  845             @POINTER -> PROC_SUPP.USE_CHAIN$     = @USE_CHAIN$;
  846             %IF TEXTCHAR(@USE_INPUT_LABEL$) = 'ENTADDR(NIL)';
  847             @POINTER -> PROC_SUPP.USE_INPUT_LABEL_EPTR = ENTADDR(NIL);
  848             %ELSE;
  849             @POINTER -> PROC_SUPP.USE_INPUT_LABEL$ = @USE_INPUT_LABEL$;
  850             %ENDIF;
  851             %IF TEXTCHAR(@USE_OUTPUT_LABEL$) = 'ENTADDR(NIL)';
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          24   
  852             @POINTER -> PROC_SUPP.USE_OUTPUT_LABEL_EPTR = ENTADDR(NIL);
  853             %ELSE;
  854             @POINTER -> PROC_SUPP.USE_OUTPUT_LABEL$ = @USE_OUTPUT_LABEL$;
  855             %ENDIF;
  856             %IF TEXTCHAR(@USE_IO_LABEL$) = 'ENTADDR(NIL)';
  857             @POINTER -> PROC_SUPP.USE_IO_LABEL_EPTR = ENTADDR(NIL);
  858             %ELSE;
  859             @POINTER -> PROC_SUPP.USE_IO_LABEL$        = @USE_IO_LABEL$;
  860             %ENDIF;
  861             %IF TEXTCHAR(@USE_EXTEND_LABEL$) = 'ENTADDR(NIL)';
  862             @POINTER -> PROC_SUPP.USE_EXTEND_LABEL_EPTR = ENTADDR(NIL);
  863             %ELSE;
  864             @POINTER -> PROC_SUPP.USE_EXTEND_LABEL$ = @USE_EXTEND_LABEL$;
  865             %ENDIF;
  866             @POINTER -> PROC_SUPP.DISPLAY_SIGN_TYPE = @DISPLAY_SIGN_TYPE;
  867             @POINTER -> PROC_SUPP.COMP_4_SIGN_POS = @COMP_4_SIGN_POS;
  868             @POINTER -> PROC_SUPP.COMP_DEFAULT   = @COMP_DEFAULT;
  869             @POINTER -> PROC_SUPP.SEG_ARRAY$     = @SEG_ARRAY$;
  870             @POINTER -> PROC_SUPP.SEG_ID_ARRAY$  = @SEG_ID_ARRAY$;
  871             @POINTER -> PROC_SUPP.P2_SAVE$       = ADDR(NIL);
  872             @POINTER -> PROC_SUPP.PARA_STATS$    = ADDR(NIL);
  873           END;
  874
  875         %MEND;
  876
  877
  878         %MACRO NEW_NEL (@POINTER = LTS$,
  879                         @MOP$    = "ADDR(NIL)",
  880                         @DNT$    = "ADDR(NIL)",
  881                         @DESC    = '0'B);
  882
  883             DO;
  884               %RESERVE_LTS (ITEM     = %NEL,
  885                             POINTER  = @POINTER);
  886
  887               @POINTER -> NEL.MOP$   = @MOP$;
  888               @POINTER -> NEL.DNT$   = @DNT$;
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          25   
  889               @POINTER -> NEL.DESC   = @DESC;
  890             END;
  891
  892         %MEND;
  893
  894
  895         %MACRO NEW_LTSS (@POINTER = LTS$,
  896                          @DIMS$   = "ADDR(NIL)",
  897                          @LONG$   = "ADDR(NIL)",
  898    *                     @BASE_LTS$ = "ADDR(NIL)",
  899                          @NEL$    = "ADDR(NIL)",
  900                          @DEPENDING_SIZE$ = "ADDR(NIL)",
  901                          @FILE_LTS$ = "ADDR(NIL)",
  902    *                     @INIT_LTS$ = "ADDR(NIL)",
  903    *                     @CD_LTS$ = ,
  904    *                     @DML_REC$ = ,
  905                          @REPORT_ENTRY$ = "ADDR(NIL)",
  906                          @KEY$    = "ADDR(NIL)");
  907
  908             DO;
  909               %RESERVE_LTS (ITEM     = %LTSS,
  910                             POINTER  = @POINTER);
  911
  912               @POINTER -> LTSS.DIMS$ = @DIMS$;
  913               @POINTER -> LTSS.LONG$ = @LONG$;
  914               @POINTER -> LTSS.NEL$  = @NEL$;
  915               @POINTER -> LTSS.DEPENDING_SIZE$ = @DEPENDING_SIZE$;
  916               @POINTER -> LTSS.KEY$  = @KEY$;
  917               @POINTER -> LTSS.BASE_LTS$  = @BASE_LTS$;
  918               @POINTER -> LTSS.FILE_LTS$ = @FILE_LTS$;
  919    *          @POINTER -> LTSS.INIT_LTS$ = @INIT_LTS$;
  920    *          %IF (TEXTCHAR (@CD_LTS$) ~= '');
  921    *          @POINTER -> LTSS.CD_LTS$ = @CD_LTS$;
  922    *          %ELSEIF (TEXTCHAR (@DML_REC$) ~= '');
  923    *          @POINTER -> LTSS.DML_REC$ = @DML_REC$;
  924    *          %ELSE;
  925               @POINTER -> LTSS.REPORT_ENTRY$ = @REPORT_ENTRY$;
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          26   
  926    *          %ENDIF;
  927             END;
  928
  929         %MEND;
  930
  931         %MACRO NEW_LONG (@POINTER = LTS$,
  932                          @LENGTH  = );
  933
  934             DO;
  935               %RESERVE_LTS (ITEM    = %LONG,
  936                             POINTER = @POINTER);
  937
  938               @POINTER -> LONG.LENGTH = @LENGTH;
  939             END;
  940
  941    *    %MEND;
  942    *
  943    *    %MACRO NEW_COPY_FILE (@POINTER = LTS$,
  944    *                          @ESN     = ,
  945    *                          @CAT_FILE =  );
  946    *
  947    *        DO;
  948    *          %RESERVE_LTS (ITEM = %COPY_FILE,
  949    *                        POINTER = @POINTER);
  950    *
  951    *          @POINTER ->COPY_FILE.ESN = @ESN;
  952    *          @POINTER ->COPY_FILE.CAT_FILE = @CAT_FILE;
  953    *          @POINTER ->COPY_FILE.NEXT = COMCOM.COPY_PTR$;
  954    *          COMCOM.COPY_PTR$ = @POINTER;
  955    *        END;
  956    *    %MEND;
  957    *
  958    *    %MACRO NEW_INIT_LTS (@POINTER     = LTS$,
  959    *                         @FILL        = "%BITASC ('000'O)",
  960    *                         @FILLER      = FALSE,
  961    *                         @MFILLABLE   = FALSE,
  962    *                         @GROUP       = FALSE,
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          27   
  963    *                         @BCD         = FALSE,
  964    *                         @PTR         = FALSE,
  965    *                         @BASE$ = "ADDR(NIL)",
  966    *                         @OFF         = 0,
  967    *                         @SON$        = "ADDR(NIL)",
  968    *                         @NEXT$       = "ADDR(NIL)",
  969    *                         @LENGTH      = 0,
  970    *                         @SPAN        = 0,
  971    *                         @DIMS        = 0,
  972    *                         @SUBSCR$     = "ADDR(NIL)",
  973    *                         @INDEX$      = "ADDR(NIL)");
  974    *        DO;
  975    *          %RESERVE_LTS (ITEM     = %INIT_LTS,
  976    *                        POINTER  = @POINTER);
  977    *          @POINTER -> INIT_LTS.FILL = @FILL;
  978    *          @POINTER -> INIT_LTS.FILLER = @FILLER;
  979    *          @POINTER -> INIT_LTS.MFILLABLE = @MFILLABLE;
  980    *          @POINTER -> INIT_LTS.GROUP = @GROUP;
  981    *          @POINTER -> INIT_LTS.BCD = @BCD;
  982    *          @POINTER -> INIT_LTS.POINTER = @PTR;
  983    *          @POINTER -> INIT_LTS.BASE$ = @BASE$;
  984    *          @POINTER -> INIT_LTS.OFF = @OFF;
  985    *          @POINTER -> INIT_LTS.SON$ = @SON$;
  986    *          @POINTER -> INIT_LTS.NEXT$ = @NEXT$;
  987    *          @POINTER -> INIT_LTS.LENGTH = @LENGTH;
  988    *          @POINTER -> INIT_LTS.SPAN = @SPAN;
  989    *          @POINTER -> INIT_LTS.DIMS = @DIMS;
  990    *          @POINTER -> INIT_LTS.SUBSCR$ = @SUBSCR$;
  991    *          @POINTER -> INIT_LTS.INDEX$ = @INDEX$;
  992    *        END;
  993         %MEND;
  994
  995         %MACRO NEW_DIMS (@POINTER = LTS$,
  996                          @SIZE    = "%MIN_DIM_SIZE + %NO_WORDS_PER_DIM",
  997                          @DN2$    = "ADDR(NIL)");
  998
  999             DO;
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          28   
 1000               ITERATION = @SIZE;
 1001               %RESERVE_LTS (ITEM    = %DIMS,
 1002                             POINTER = @POINTER);
 1003
 1004               @POINTER -> DIMS.DN2  = @DN2$;
 1005             END;
 1006
 1007         %MEND;
 1008
 1009         %MACRO NEW_REF (@POINTER = LTS$ );
 1010             DO;
 1011               IF HEAD_REF$ = ADDR(NIL) THEN
 1012                 %RESERVE_LTS(ITEM = %REF,
 1013                              POINTER = @POINTER );
 1014               ELSE
 1015                 %REMOVE_FROM_SL_LIST(PTR = @POINTER,
 1016                                      ITEM = REF,
 1017                                      HEAD = HEAD_REF$ );
 1018
 1019               NUMBER_OF_REFS = NUMBER_OF_REFS + 1;
 1020             END;
 1021          %MEND;
 1022
 1023
 1024         %MACRO NEW_PRIME (@POINTER = LTS$ );
 1025             DO;
 1026               IF HEAD_PRIMES$ = ADDR(NIL) THEN
 1027                 %RESERVE_LTS(ITEM=%PRIME,POINTER=@POINTER);
 1028               ELSE
 1029                 %REMOVE_FROM_SL_LIST(PTR=@POINTER,ITEM=PRIME,
 1030                                      HEAD=HEAD_PRIMES$);
 1031
 1032               NUMBER_OF_PRIMES = NUMBER_OF_PRIMES + 1;
 1033             END;
 1034         %MEND;
 1035
 1036
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          29   
 1037
 1038         %MACRO FILL_DIMS (@DIMS$ = LTS$,
 1039                           @SS#   = 0,
 1040                           @INDEX$= "ADDR(NIL)",
 1041                           @SPAN  = 0,
 1042                           @DIM   = 0);
 1043
 1044             DO;
 1045               @DIMS$ -> DIMS.D.INDEX$(@SS#) = @INDEX$;
 1046               @DIMS$ -> DIMS.D.SPAN  (@SS#) = @SPAN;
 1047               @DIMS$ -> DIMS.D.DIM   (@SS#) = @DIM;
 1048             END;
 1049
 1050         %MEND;
 1051
 1052
 1053         %MACRO NEW_RENAMES (@POINTER = LTS$,
 1054                             @START$  = ,
 1055                             @END$    = );
 1056
 1057             DO;
 1058               %RESERVE_LTS (ITEM    = %RENAMES,
 1059                             POINTER = @POINTER);
 1060
 1061               @POINTER -> RENAMES.START_ST$ = @START$;
 1062               @POINTER -> RENAMES.END_ST$   = @END$;
 1063             END;
 1064
 1065         %MEND;
 1066
 1067
 1068         %MACRO NEW_INDEXES (@POINTER = LTS$,
 1069                             @INDEX_ST$ = ST$,
 1070                             @LINK      = "ADDR(NIL)");
 1071
 1072             DO;
 1073               %RESERVE_LTS (ITEM    = %INDEXES,
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          30   
 1074                             POINTER = @POINTER);
 1075
 1076               @POINTER -> INDEXES.INDEX_ST$ = @INDEX_ST$;
 1077               @POINTER -> INDEXES.LINK      = @LINK;
 1078             END;
 1079
 1080         %MEND;
 1081
 1082
 1083
 1084
 1085         %MACRO NEW_DEPENDING_SIZE (@POINTER = LTS$,
 1086                                    @SIZE    = 0,
 1087                                    @DIMS$   = "ADDR(NIL)",
 1088                                    @SIZE$   = "ADDR(NIL)");
 1089
 1090             DO;
 1091               %RESERVE_LTS (ITEM     = %DEPENDING_SIZE,
 1092                             POINTER  = @POINTER);
 1093
 1094               @POINTER -> DEPENDING_SIZE.SIZE$ = @SIZE$;
 1095               @POINTER -> DEPENDING_SIZE.MIN_SIZE = @SIZE;
 1096               @POINTER -> DEPENDING_SIZE.DIMS$ = @DIMS$;
 1097             END;
 1098
 1099         %MEND;
 1100
 1101
 1102         %MACRO NEW_KEY (@POINTER = LTS$,
 1103                         @ASCENDING = TRUE,
 1104                         @USED    = FALSE,
 1105                         @KEY$    = "ADDR(NIL)",
 1106                         @LINK    = "ADDR(NIL)");
 1107
 1108             DO;
 1109               %RESERVE_LTS (ITEM    = %KEY,
 1110                             POINTER = @POINTER);
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          31   
 1111
 1112               @POINTER -> KEY.B      = FALSE;
 1113               @POINTER -> KEY.B.ASCENDING = @ASCENDING;
 1114               @POINTER -> KEY.B.USED = @USED;
 1115               @POINTER -> KEY.KEY$  = @KEY$;
 1116               @POINTER -> KEY.LINK  = @LINK;
 1117             END;
 1118
 1119         %MEND;
 1120
 1121
 1122
 1123         %MACRO NEW_ARGLIST (@POINTER = LTS$, @NUM_OF_ARGS = 1);
 1124
 1125             DO;
 1126               ITERATION = @NUM_OF_ARGS + 1;
 1127               %RESERVE_LTS (ITEM = %ARGLIST, POINTER = @POINTER);
 1128             END;
 1129
 1130         %MEND;
 1131
 1132
 1133         %MACRO NEW_LCNST (@POINTER = LTS$,
 1134                           @SIZE    = 1,
 1135                           @CONST   = ' ');
 1136
 1137             DO;
 1138               ITERATION = @SIZE;
 1139               %RESERVE_LTS (ITEM = %LCNST,
 1140                             POINTER = @POINTER);
 1141
 1142               SUBSTR (@POINTER -> LCNST.CONST, 0, (@SIZE - 1) * 4) = @CONST;
 1143             END;
 1144
 1145         %MEND;
 1146
 1147
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          32   
 1148         %MACRO NEW_FILE_LTS (@POINTER           = LTS$,
 1149                               @ST$               = "ADDR(NIL)",
 1150                               @FAB$              = "ADDR(NIL)",
 1151                               @FILE_LTS_CHAIN$   = "ADDR(NIL)",
 1152                               @ASSIGN$           = "ADDR(NIL)",
 1153                               @NO_OF_AREAS       = "-1",
 1154                               @ORGANIZATION      = %NOT_SPECIFIED,
 1155                               @PAD_CHAR$         = "ADDR(NIL)",
 1156                               @RECORD_DELIM     = %NOT_SPECIFIED,
 1157                               @ACCESS_MODE       = %NOT_SPECIFIED,
 1158                               @FILE_STATUS$      = "ADDR(NIL)",
 1159                               @FILE_STATUS2$     = "ADDR(NIL)",
 1160                               @RELATIVE_KEY$     = "ADDR(NIL)",
 1161                               @RECORD_KEY$       = "ADDR(NIL)",
 1162                               @ALT_RECORD_KEY$   = "ADDR(NIL)",
 1163                               @ATTR              = FALSE,
 1164                               @MULTIPLE_FILE_TAPE= ,
 1165                               @OPTIONAL          = ,
 1166                               @PROCESS_AREA      = ,
 1167                               @BSN               = ,
 1168                               @FLR               = ,
 1169                               @VLR               = ,
 1170                               @SSF               = ,
 1171                               @UNBANNERED        = ,
 1172                               @SPANNED           = ,
 1173                               @EXTERNAL          = ,
 1174                               @GLOBAL            = ,
 1175                               @DUPLICATES        = ,
 1176                               @LABEL_OMITTED     = ,
 1177                               @LABEL_STANDARD    = ,
 1178                               @BEGIN_TAPE_LABEL  = ,
 1179                               @BEGIN_FILE_LABEL  = ,
 1180                               @END_TAPE_LABEL    = ,
 1181                               @END_FILE_LABEL    = ,
 1182                               @RECORD_CONTAINS   = ,
 1183                               @RECORDS_NOT_CHARS = ,
 1184                               @RECORD_FORMAT_2   = ,
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          33   
 1185                               @EBCDIC            = ,
 1186                               @EBCDIC_CODE_SET   = ,
 1187                               @NON_TYA_RECORDS   = ,
 1188                               @BLOCK_CONTAINS    = ,
 1189                               @SAME_RECORD       = ,
 1190                               @SAME_AREA         = ,
 1191                               @NOMINAL_KEY$      = "ADDR(NIL)",
 1192                               @BLOCK_INT_1       = 1,
 1193                               @BLOCK_INT_2       = 1,
 1194                               @RECORD_INT_1      = 0,
 1195                               @RECORD_INT_2      = 0,
 1196                               @DEPENDING$        = "ADDR(NIL)",
 1197                               @LABEL_RECORDS$    = "ADDR(NIL)",
 1198                               @FILE_ID$          = "ADDR(NIL)",
 1199                               @RETENTION$        = "ADDR(NIL)",
 1200                               @CATALOG$         = "ADDR(NIL)",
 1201                               @DATA_RECORD$      = "ADDR(NIL)",
 1202                               @NO_OF_LINES$      = "ADDR(NIL)",
 1203                               @FOOTING$          = "ADDR(NIL)",
 1204                               @TOP$              = "ADDR(NIL)",
 1205                               @BOTTOM$           = "ADDR(NIL)",
 1206                               @CODE_SET$         = "ADDR(NIL)",
 1207                               @REPORT$           = "ADDR(NIL)",
 1208                               @POSITION          = 0,
 1209                               @SAME_RECORD_HEAD$ = "ADDR(NIL)",
 1210                               @SAME_RECORD_LINK  = "ADDR(NIL)",
 1211                               @SAME_AREA_HEAD$   = "ADDR(NIL)",
 1212                               @SAME_AREA_LINK    = "ADDR(NIL)",
 1213                               @MULT_TAPE_HEAD$   = "ADDR(NIL)",
 1214                               @MULT_TAPE_LINK    = "ADDR(NIL)",
 1215                               @RERUN_NUM         = 0,
 1216                               @DCB_DNT$          = "ADDR(NIL)",    /*#34313*/
 1217                               @USE_PROC_LABEL$   = "ENTADDR(NIL)",
 1218                               @LENGTH_READ$      = "ADDR(NIL)",
 1219                               @LINAGE_COUNTER$   = "ADDR(NIL)",
 1220                               @RECORD_COUNT      = 0,
 1221                               @LABEL_EXIT$       = "ADDR(NIL)");
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          34   
 1222           DO;
 1223             %RESERVE_LTS (ITEM     = %FILE_LTS,
 1224                           POINTER  = @POINTER);
 1225
 1226             @POINTER -> FILE_LTS.ID                   = %FILE_LTS;
 1227             @POINTER -> FILE_LTS.ST$                  = @ST$ ;
 1228             @POINTER -> FILE_LTS.FAB$                 = @FAB$;
 1229             @POINTER -> FILE_LTS.FILE_LTS_CHAIN$      = @FILE_LTS_CHAIN$;
 1230             @POINTER -> FILE_LTS.ASSIGN$              = @ASSIGN$;
 1231             @POINTER -> FILE_LTS.NO_OF_AREAS          = @NO_OF_AREAS;
 1232             @POINTER -> FILE_LTS.ORGANIZATION         = @ORGANIZATION;
 1233             @POINTER -> FILE_LTS.PAD_CHAR$            = @PAD_CHAR$;
 1234             @POINTER -> FILE_LTS.RECORD_DELIM        = @RECORD_DELIM;
 1235             @POINTER -> FILE_LTS.ACCESS_MODE          = @ACCESS_MODE;
 1236             @POINTER -> FILE_LTS.FILE_STATUS$         = @FILE_STATUS$;
 1237             @POINTER -> FILE_LTS.FILE_STATUS2$        = @FILE_STATUS2$;
 1238             @POINTER -> FILE_LTS.RELATIVE_KEY$        = @RELATIVE_KEY$;
 1239             @POINTER -> FILE_LTS.RECORD_KEY$          = @RECORD_KEY$;
 1240             @POINTER -> FILE_LTS.ALT_RECORD_KEY$      = @ALT_RECORD_KEY$;
 1241             @POINTER -> FILE_LTS.ATTR                 = @ATTR;
 1242             @POINTER -> FILE_LTS.NOMINAL_KEY$         = @NOMINAL_KEY$;
 1243             @POINTER -> FILE_LTS.BLOCK_CONTAINS.INT_1 = @BLOCK_INT_1;
 1244             @POINTER -> FILE_LTS.BLOCK_CONTAINS.INT_2 = @BLOCK_INT_2;
 1245             @POINTER -> FILE_LTS.RECORD_CONTAINS.INT_1= @RECORD_INT_1;
 1246             @POINTER -> FILE_LTS.RECORD_CONTAINS.INT_2= @RECORD_INT_2;
 1247             @POINTER -> FILE_LTS.RECORD_CONTAINS.DEPENDING$ = @DEPENDING$;
 1248             @POINTER -> FILE_LTS.LABEL_RECORDS$       = @LABEL_RECORDS$;
 1249             @POINTER -> FILE_LTS.FILE_ID$             = @FILE_ID$;
 1250             @POINTER -> FILE_LTS.RETENTION$           = @RETENTION$;
 1251             @POINTER -> FILE_LTS.CATALOG$            = @CATALOG$    ;
 1252             @POINTER -> FILE_LTS.DATA_RECORD$         = @DATA_RECORD$;
 1253             @POINTER -> FILE_LTS.LINAGE.NO_OF_LINES$  = @NO_OF_LINES$;
 1254             @POINTER -> FILE_LTS.LINAGE.TOP$          = @TOP$;
 1255             @POINTER -> FILE_LTS.LINAGE.BOTTOM$       = @BOTTOM$;
 1256             @POINTER -> FILE_LTS.LINAGE.FOOTING$      = @FOOTING$;
 1257             @POINTER -> FILE_LTS.CODE_SET$            = @CODE_SET$;
 1258             @POINTER -> FILE_LTS.REPORT$              = @REPORT$;
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          35   
 1259             @POINTER -> FILE_LTS.POSITION             = @POSITION;
 1260             @POINTER -> FILE_LTS.SAME_RECORD.HEAD$    = @SAME_RECORD_HEAD$;
 1261             @POINTER -> FILE_LTS.SAME_RECORD.LINK     = @SAME_RECORD_LINK;
 1262             @POINTER -> FILE_LTS.SAME_AREA.HEAD$      = @SAME_AREA_HEAD$;
 1263             @POINTER -> FILE_LTS.SAME_AREA.LINK       = @SAME_AREA_LINK;
 1264             @POINTER -> FILE_LTS.MULT_TAPE.HEAD$      = @MULT_TAPE_HEAD$;
 1265             @POINTER -> FILE_LTS.MULT_TAPE.LINK       = @MULT_TAPE_LINK;
 1266             @POINTER -> FILE_LTS.RERUN_NUM            = @RERUN_NUM;
 1267             @POINTER -> FILE_LTS.DCB_DNT$             = @DCB_DNT$; /*#34313*/
 1268             %IF TEXTCHAR(@USE_PROC_LABEL$) = 'ENTADDR(NIL)';
 1269             @POINTER -> FILE_LTS.USE_PROC_LABEL_EPTR = ENTADDR(NIL);
 1270             %ELSE;
 1271             @POINTER -> FILE_LTS.USE_PROC_LABEL$      = @USE_PROC_LABEL$;
 1272             %ENDIF;
 1273             @POINTER -> FILE_LTS.LENGTH_READ$         = @LENGTH_READ$;
 1274             @POINTER -> FILE_LTS.LINAGE_COUNTER$      = @LINAGE_COUNTER$;
 1275             @POINTER -> FILE_LTS.RECORD_COUNT         = @RECORD_COUNT;
 1276             @POINTER -> FILE_LTS.B.MERGE_STATEMENT    = %FALSE;
 1277             @POINTER -> FILE_LTS.LABEL_EXIT$          = @LABEL_EXIT$;
 1278
 1279             %IF (TEXTCHAR(@MULTIPLE_FILE_TAPE) ~= '');
 1280               @POINTER -> FILE_LTS.B.MULTIPLE_FILE_TAPE = @MULTIPLE_FILE_TAPE;
 1281             %ENDIF;
 1282             %IF (TEXTCHAR(@OPTIONAL) ~= '');
 1283               @POINTER -> FILE_LTS.B.OPTIONAL_FILE = @OPTIONAL;
 1284             %ENDIF;
 1285             %IF (TEXTCHAR(@PROCESS_AREA) ~= '');
 1286               @POINTER -> FILE_LTS.B.PROCESS_AREA = @PROCESS_AREA;
 1287             %ENDIF;
 1288             %IF (TEXTCHAR(@BSN) ~= '');
 1289               @POINTER -> FILE_LTS.B.BSN = @BSN;
 1290             %ENDIF;
 1291             %IF (TEXTCHAR(@FLR) ~= '');
 1292               @POINTER -> FILE_LTS.B.FLR = @FLR;
 1293             %ENDIF;
 1294             %IF (TEXTCHAR(@VLR) ~= '');
 1295               @POINTER -> FILE_LTS.B.VLR = @VLR;
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          36   
 1296             %ENDIF;
 1297             %IF (TEXTCHAR(@SSF) ~= '');
 1298               @POINTER -> FILE_LTS.B.SSF = @SSF;
 1299             %ENDIF;
 1300             %IF (TEXTCHAR(@UNBANNERED) ~= '');
 1301               @POINTER -> FILE_LTS.B.UNBANNERED = @UNBANNERED;
 1302             %ENDIF;
 1303             %IF (TEXTCHAR(@SPANNED) ~= '');
 1304               @POINTER -> FILE_LTS.B.SPANNED = @SPANNED;
 1305             %ENDIF;
 1306             %IF (TEXTCHAR(@EXTERNAL) ~= '');
 1307               @POINTER -> FILE_LTS.B.EXTERNAL = @EXTERNAL;
 1308             %ENDIF;
 1309             %IF (TEXTCHAR(@GLOBAL) ~= '');
 1310               @POINTER -> FILE_LTS.B.GLOBAL = @GLOBAL;
 1311             %ENDIF;
 1312             %IF (TEXTCHAR(@DUPLICATES) ~= '');
 1313               @POINTER -> FILE_LTS.B.DUPLICATES = @DUPLICATES;
 1314             %ENDIF;
 1315             %IF (TEXTCHAR(@LABEL_OMITTED) ~= '');
 1316               @POINTER -> FILE_LTS.B.LABEL_OMITTED = @LABEL_OMITTED;
 1317             %ENDIF;
 1318             %IF (TEXTCHAR(@LABEL_STANDARD) ~= '');
 1319               @POINTER -> FILE_LTS.B.LABEL_STANDARD = @LABEL_STANDARD;
 1320             %ENDIF;
 1321             %IF (TEXTCHAR(@BEGIN_TAPE_LABEL) ~= '');
 1322               @POINTER -> FILE_LTS.B.BEGIN_TAPE_LABEL = @BEGIN_TAPE_LABEL;
 1323             %ENDIF;
 1324             %IF (TEXTCHAR(@BEGIN_FILE_LABEL) ~= '');
 1325               @POINTER -> FILE_LTS.B.BEGIN_FILE_LABEL = @BEGIN_FILE_LABEL;
 1326             %ENDIF;
 1327             %IF (TEXTCHAR(@END_TAPE_LABEL) ~= '');
 1328               @POINTER -> FILE_LTS.B.END_TAPE_LABEL = @END_TAPE_LABEL;
 1329             %ENDIF;
 1330             %IF (TEXTCHAR(@END_FILE_LABEL) ~= '');
 1331               @POINTER -> FILE_LTS.B.END_FILE_LABEL = @END_FILE_LABEL;
 1332             %ENDIF;
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          37   
 1333             %IF (TEXTCHAR(@RECORDS_NOT_CHARS) ~= '');
 1334               @POINTER -> FILE_LTS.B.RECORDS_NOT_CHARS = @RECORDS_NOT_CHARS;
 1335             %ENDIF;
 1336             %IF (TEXTCHAR(@RECORD_FORMAT_2) ~= '');
 1337               @POINTER -> FILE_LTS.B.RECORD_FORMAT_2 = @RECORD_FORMAT_2;
 1338             %ENDIF;
 1339             %IF (TEXTCHAR(@EBCDIC) ~= '');
 1340               @POINTER -> FILE_LTS.B.EBCDIC = @EBCDIC;
 1341             %ENDIF;
 1342             %IF (TEXTCHAR(@EBCDIC_CODE_SET) ~= '');
 1343               @POINTER -> FILE_LTS.B.EBCDIC_CODE_SET = @EBCDIC_CODE_SET;
 1344             %ENDIF;
 1345             %IF (TEXTCHAR(@NON_TYA_RECORDS) ~= '');
 1346               @POINTER -> FILE_LTS.B.NON_TYA_RECORDS = @NON_TYA_RECORDS;
 1347             %ENDIF;
 1348             %IF (TEXTCHAR(@RECORD_CONTAINS) ~= '');
 1349               @POINTER -> FILE_LTS.B.RECORD_CONTAINS = @RECORD_CONTAINS;
 1350             %ENDIF;
 1351             %IF (TEXTCHAR(@BLOCK_CONTAINS) ~= '');
 1352               @POINTER -> FILE_LTS.B.BLOCK_CONTAINS = @BLOCK_CONTAINS;
 1353             %ENDIF;
 1354             %IF (TEXTCHAR(@SAME_RECORD) ~= '');
 1355               @POINTER -> FILE_LTS.B.SAME_RECORD = @SAME_RECORD;
 1356             %ENDIF;
 1357             %IF (TEXTCHAR(@SAME_AREA) ~= '');
 1358               @POINTER -> FILE_LTS.B.SAME_AREA = @SAME_AREA;
 1359             %ENDIF;
 1360
 1361           END;
 1362
 1363         %MEND;
 1364         %EJECT;

09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          38   
 1365
 1366
 1367       %MACRO NEW_REPORT_LTS  (@POINTER           = LTS$,
 1368                               @ST$               = "ADDR(NIL)",
 1369                               @FILE$             = "ADDR(NIL)",
 1370                               @ATTR              = FALSE,
 1371                               @CONTROL$          = "ADDR(NIL)",
 1372                               @CONTROL_FINAL$    = "ADDR(NIL)",
 1373                               @CONTROL_ERROR$    = "ADDR(NIL)",
 1374                               @GENERAL_SUBTOTAL$ = "ADDR(NIL)",
 1375                               @PAGE_LIMIT        = 0,
 1376                               @HEADING           = 0,
 1377                               @FIRST_DETAIL      = 0,
 1378                               @LAST_DETAIL       = 0,
 1379                               @FOOTING           = 0,
 1380                               @RECORD_LENGTH     = 0,
 1381                               @COL_NO#           = 0,
 1382                               @NO_CTR_ITEM       = 0,
 1383                               @DETAIL_NO         = 0,
 1384                               @BODY_NO           = 0,
 1385                               @AFTER_ADVANCE$    = "ADDR(NIL)",
 1386                               @PAGE_COUNTER$     = "ADDR(NIL)",
 1387                               @LINE_COUNTER$     = "ADDR(NIL)",
 1388                               @SUM_LTS$          = "ADDR(NIL)",
 1389                               @RWCT$             = "ADDR(NIL)",
 1390                               @PAGE_HEADING$     = "ADDR(NIL)",
 1391                               @REPORT_HEADING$   = "ADDR(NIL)",
 1392                               @REPORT_FOOTING$   = "ADDR(NIL)",
 1393                               @PAGE_FOOTING$     = "ADDR(NIL)",
 1394                               @DEATIL$           = "ADDR(NIL)",
 1395                               @CONTROL_FOOTING$  = "ADDR(NIL)",
 1396                               @CONTROL_HEADING$  = "ADDR(NIL)",
 1397                               @CONTROL_HEADING_FINAL$  = "ADDR(NIL)",
 1398                               @CONTROL_FOOTING_FINAL$  = "ADDR(NIL)",
 1399                               @BUFFER_ST$        = "ADDR(NIL)",
 1400                               @CTR_LVL_COUNTER$  = "ADDR(NIL)",
 1401                               @INIT_CHAIN$       = "ADDR(NIL)",
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          39   
 1402                               @LINK              = "ADDR(NIL)");
 1403
 1404         DO;
 1405           %RESERVE_LTS (ITEM    = %REPORT_LTS,
 1406                         POINTER = @POINTER);
 1407
 1408           @POINTER -> REPORT_LTS.ID            = %REPORT_LTS;
 1409           @POINTER -> REPORT_LTS.ST$           = @ST$;
 1410           @POINTER -> REPORT_LTS.FILE$         = @FILE$;
 1411           @POINTER -> REPORT_LTS.ATTR          = @ATTR;
 1412           @POINTER -> REPORT_LTS.CONTROL$      = @CONTROL$;
 1413           @POINTER -> REPORT_LTS.CONTROL_FINAL$   = @CONTROL_FINAL$;
 1414           @POINTER -> REPORT_LTS.CONTROL_ERROR$   = @CONTROL_ERROR$;
 1415           @POINTER -> REPORT_LTS.GENERAL_SUBTOTAL$ = @GENERAL_SUBTOTAL$;
 1416           @POINTER -> REPORT_LTS.CTR_LVL_COUNTER$ = @CTR_LVL_COUNTER$;
 1417           @POINTER -> REPORT_LTS.PAGE_LIMIT    = @PAGE_LIMIT;
 1418           @POINTER -> REPORT_LTS.HEADING       = @HEADING;
 1419           @POINTER -> REPORT_LTS.FIRST_DETAIL  = @FIRST_DETAIL;
 1420           @POINTER -> REPORT_LTS.LAST_DETAIL   = @LAST_DETAIL;
 1421           @POINTER -> REPORT_LTS.FOOTING       = @FOOTING;
 1422           @POINTER -> REPORT_LTS.RECORD_LENGTH = @RECORD_LENGTH;
 1423           @POINTER -> REPORT_LTS.NO_CTR_ITEM   = @NO_CTR_ITEM;
 1424           @POINTER -> REPORT_LTS.DETAIL_NO     = @DETAIL_NO;
 1425           @POINTER -> REPORT_LTS.BODY_NO       = @BODY_NO;
 1426           @POINTER -> REPORT_LTS.PAGE_COUNTER$ = @PAGE_COUNTER$;
 1427           @POINTER -> REPORT_LTS.LINE_COUNTER$ = @LINE_COUNTER$;
 1428           @POINTER -> REPORT_LTS.BUFFER_ST$    = @BUFFER_ST$;
 1429           @POINTER -> REPORT_LTS.COL_NO#       = @COL_NO#;
 1430           @POINTER -> REPORT_LTS.INIT_CHAIN$   = @INIT_CHAIN$;
 1431           @POINTER -> REPORT_LTS.SUM_LTS$      = @SUM_LTS$;
 1432           @POINTER -> REPORT_LTS.RWCT$         = @RWCT$;
 1433           @POINTER -> REPORT_LTS.PAGE_HEADING$  = @PAGE_HEADING$;
 1434           @POINTER -> REPORT_LTS.PAGE_FOOTING$  = @PAGE_FOOTING$;
 1435           @POINTER -> REPORT_LTS.REPORT_HEADING$ = @REPORT_HEADING$;
 1436           @POINTER -> REPORT_LTS.REPORT_FOOTING$ = @REPORT_FOOTING$;
 1437           @POINTER -> REPORT_LTS.DETAIL$         = @DEATIL$;
 1438           @POINTER -> REPORT_LTS.CONTROL_HEADING$ = @CONTROL_HEADING$;
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          40   
 1439           @POINTER -> REPORT_LTS.CONTROL_FOOTING$ = @CONTROL_FOOTING$;
 1440           @POINTER -> REPORT_LTS.CONTROL_FOOTING_FINAL$ = @CONTROL_FOOTING_FINAL$;
 1441           @POINTER -> REPORT_LTS.CONTROL_HEADING_FINAL$ = @CONTROL_HEADING_FINAL$;
 1442           @POINTER -> REPORT_LTS.AFTER_ADVANCE$  = @AFTER_ADVANCE$;
 1443           @POINTER -> REPORT_LTS.LINK            = @LINK;
 1444
 1445         END;
 1446
 1447       %MEND;
 1448       %EJECT;

09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          41   
 1449
 1450
 1451       %MACRO NEW_REPORT_01_LTS (@POINTER          = LTS$,
 1452                                 @ST$              = "ADDR(NIL)",
 1453                                 @QLT$             = "ADDR(NIL)",
 1454                                 @NEXT             = "ADDR(NIL)",
 1455                                 @PREV             = "ADDR(NIL)",
 1456                                 @LINK             = "ADDR(NIL)",
 1457                                 @RWCT$            = "ADDR(NIL)",
 1458                                 @GROUP_INDICATOR$ = "ADDR(NIL)",
 1459                                 @CONTROL_LTS$     = "ADDR(NIL)",
 1460                                 @REPORT_LTS$      = "ADDR(NIL)",
 1461                                 @SPECIAL_SUBTOTAL$ = "ADDR(NIL)",
 1462                                 @FIRST_LINE_LTS$  = "ADDR(NIL)",
 1463                                 @FIRST_LINE_TYPE  = 0,
 1464                                 @FIRST_LINE_NO#   = 0,
 1465                                 @GROUP_TYPE       = 0,
 1466                                 @LINE_TYPE        = 0,
 1467                                 @NEXT_GROUP_TYPE  = 0,
 1468                                 @NEXT_GROUP_NO#   = 0,
 1469                                 @LINE_NO#         = 0,
 1470                                 @LINE_PRESENTED  = '0'B,
 1471                                 @NEXT_GROUP_PRESENTED  = '0'B,
 1472                                 @TOTAL_LINES      = 0,
 1473                                 @ATTR             = 0 );
 1474
 1475         DO;
 1476           %RESERVE_LTS (ITEM    = %REPORT_01_LTS,
 1477                         POINTER = @POINTER);
 1478
 1479           @POINTER -> REPORT_01_LTS.ID              = %REPORT_01_LTS;
 1480           @POINTER -> REPORT_01_LTS.ST$             = @ST$;
 1481           @POINTER -> REPORT_01_LTS.QLT$            = @QLT$;
 1482           @POINTER -> REPORT_01_LTS.NEXT            = @NEXT;
 1483           @POINTER -> REPORT_01_LTS.PREV            = @PREV;
 1484           @POINTER -> REPORT_01_LTS.LINK            = @LINK;
 1485           @POINTER -> REPORT_01_LTS.RWCT$           = @RWCT$;
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          42   
 1486           @POINTER -> REPORT_01_LTS.GROUP_INDICATOR$ = @GROUP_INDICATOR$;
 1487           @POINTER -> REPORT_01_LTS.CONTROL_LTS$    = @CONTROL_LTS$;
 1488           @POINTER -> REPORT_01_LTS.GROUP_TYPE      = @GROUP_TYPE;
 1489           @POINTER -> REPORT_01_LTS.REPORT_LTS$     = @REPORT_LTS$;
 1490           @POINTER -> REPORT_01_LTS.SPECIAL_SUBTOTAL$ = @SPECIAL_SUBTOTAL$;
 1491           @POINTER -> REPORT_01_LTS.FIRST_LINE.TYPE = @FIRST_LINE_TYPE;
 1492           @POINTER -> REPORT_01_LTS.FIRST_LINE.LTS$ = @FIRST_LINE_LTS$;
 1493           @POINTER -> REPORT_01_LTS.FIRST_LINE.NO#  = @FIRST_LINE_NO#;
 1494           @POINTER -> REPORT_01_LTS.LINE_TYPE       = @LINE_TYPE;
 1495           @POINTER -> REPORT_01_LTS.NEXT_GROUP_TYPE = @NEXT_GROUP_TYPE;
 1496           @POINTER -> REPORT_01_LTS.NEXT_GROUP_NO#  = @NEXT_GROUP_NO#;
 1497           @POINTER -> REPORT_01_LTS.LINE_NO#        = @LINE_NO#;
 1498           @POINTER -> REPORT_01_LTS.TOTAL_LINES     = @TOTAL_LINES;
 1499           @POINTER -> REPORT_01_LTS.ATTR            = @ATTR;
 1500           @POINTER -> REPORT_01_LTS.B.LINE_PRESENTED = @LINE_PRESENTED;
 1501           @POINTER -> REPORT_01_LTS.B.NEXT_GROUP_PRESENTED = @NEXT_GROUP_PRESENTED;
 1502         END;
 1503       %MEND;
 1504
 1505
 1506
 1507
 1508       %MACRO NEW_REPORT_ELEM_LTS (@POINTER          = LTS$,
 1509                                   @ST$              = "ADDR(NIL)",
 1510                                   @QLT$             = "ADDR(NIL)",
 1511                                   @NEXT             = "ADDR(NIL)",
 1512                                   @PREV             = "ADDR(NIL)",
 1513                                   @SOURCE_ETT$      = "ADDR(NIL)",
 1514                                   @VALUE_ETT$       = "ADDR(NIL)",
 1515                                   @SUM_LTS$         = "ADDR(NIL)",
 1516                                   @LINE_TYPE        = 0,
 1517                                   @SPAN             = 0,
 1518                                   @LINE_NO#         = 0,
 1519                                   @COLUMN_NO#       = 0,
 1520                                   @LINE_PRESENTED   = '0'B,
 1521                                   @COLUMN_PRESENTED = '0'B,
 1522                                   @GROUP_INDICATE   = '0'B,
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          43   
 1523                                   @SUM_PRESENTED    = '0'B,
 1524                                   @SOURCE_PRESENTED = '0'B,
 1525                                   @PRINTABLE        = '0'B,
 1526                                   @ATTR             = 0 );
 1527
 1528         DO;
 1529           %RESERVE_LTS (ITEM    = %REPORT_ELEM_LTS,
 1530                         POINTER = @POINTER);
 1531
 1532           @POINTER -> REPORT_ELEM_LTS.ID              = %REPORT_ELEM_LTS;
 1533           @POINTER -> REPORT_ELEM_LTS.ST$             = @ST$;
 1534           @POINTER -> REPORT_ELEM_LTS.QLT$            = @QLT$;
 1535           @POINTER -> REPORT_ELEM_LTS.NEXT            = @NEXT;
 1536           @POINTER -> REPORT_ELEM_LTS.PREV            = @PREV;
 1537           @POINTER -> REPORT_ELEM_LTS.SOURCE_ETT$     = @SOURCE_ETT$;
 1538           @POINTER -> REPORT_ELEM_LTS.VALUE_ETT$      = @VALUE_ETT$;
 1539           @POINTER -> REPORT_ELEM_LTS.SUM_LTS$        = @SUM_LTS$;
 1540           @POINTER -> REPORT_ELEM_LTS.LINE_TYPE       = @LINE_TYPE;
 1541           @POINTER -> REPORT_ELEM_LTS.SPAN            = @SPAN;
 1542           @POINTER -> REPORT_ELEM_LTS.COLUMN_NO#      = @COLUMN_NO#;
 1543           @POINTER -> REPORT_ELEM_LTS.LINE_NO#        = @LINE_NO#;
 1544           @POINTER -> REPORT_ELEM_LTS.ATTR            = @ATTR;
 1545           @POINTER -> REPORT_ELEM_LTS.B.COLUMN_PRESENTED = @COLUMN_PRESENTED;
 1546           @POINTER -> REPORT_ELEM_LTS.B.LINE_PRESENTED = @LINE_PRESENTED;
 1547           @POINTER -> REPORT_ELEM_LTS.B.GROUP_INDICATE = @GROUP_INDICATE;
 1548           @POINTER -> REPORT_ELEM_LTS.B.SUM_PRESENTED = @SUM_PRESENTED;
 1549           @POINTER -> REPORT_ELEM_LTS.B.SOURCE_PRESENTED = @SOURCE_PRESENTED;
 1550           @POINTER -> REPORT_ELEM_LTS.B.PRINTABLE     = @PRINTABLE;
 1551         END;
 1552       %MEND;
 1553
 1554
 1555
 1556
 1557       %MACRO NEW_REPORT_GRP_LTS  (@POINTER          = LTS$,
 1558                                   @ST$              = "ADDR(NIL)",
 1559                                   @QLT$             = "ADDR(NIL)",
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          44   
 1560                                   @NEXT             = "ADDR(NIL)",
 1561                                   @PREV             = "ADDR(NIL)",
 1562                                   @LINE_TYPE        = 0,
 1563                                   @LINE_NO#         = 0,
 1564                                   @LINE_PRESENTED  = '0'B,
 1565                                   @ATTR             = 0 );
 1566
 1567         DO;
 1568           %RESERVE_LTS (ITEM    = %REPORT_GRP_LTS,
 1569                         POINTER = @POINTER);
 1570
 1571           @POINTER -> REPORT_GRP_LTS.ID              = %REPORT_GRP_LTS;
 1572           @POINTER -> REPORT_GRP_LTS.ST$             = @ST$;
 1573           @POINTER -> REPORT_GRP_LTS.QLT$            = @QLT$;
 1574           @POINTER -> REPORT_GRP_LTS.NEXT            = @NEXT;
 1575           @POINTER -> REPORT_GRP_LTS.PREV            = @PREV;
 1576           @POINTER -> REPORT_GRP_LTS.LINE_TYPE       = @LINE_TYPE;
 1577           @POINTER -> REPORT_GRP_LTS.LINE_NO#        = @LINE_NO#;
 1578           @POINTER -> REPORT_GRP_LTS.ATTR            = @ATTR;
 1579           @POINTER -> REPORT_GRP_LTS.B.LINE_PRESENTED = @LINE_PRESENTED;
 1580         END;
 1581       %MEND;
 1582
 1583       %MACRO REPORT_ENTRIES;
 1584           %REPORT_LTS,                    /*#25795*/
 1585           %REPORT_01_LTS,
 1586           %REPORT_GRP_LTS,
 1587           %REPORT_ELEM_LTS
 1588       %MEND;
 1589
 1590
 1591       %MACRO  NEW_CONTROL_NAME_LTS   (@POINTER          = LTS$,
 1592                                       @ST$              = "ADDR(NIL)",
 1593                                       @ST_FIELD$        = "ADDR(NIL)",
 1594                                       @TEMP_FIELD$      = "ADDR(NIL)",
 1595                                       @SHADOW_FIELD$    = "ADDR(NIL)",
 1596                                       @CONTROL_HEADING$ = "ADDR(NIL)",
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          45   
 1597                                       @CONTROL_FOOTING$ = "ADDR(NIL)",
 1598                                       @SUM_RESET$       = "ADDR(NIL)",
 1599                                       @SUM_SUBTOTAL$    = "ADDR(NIL)",
 1600                                       @SUM_CLEAR$       = "ADDR(NIL)",
 1601                                       @TEMP$            = "ADDR(NIL)",
 1602                                       @SHADOW$          = "ADDR(NIL)",
 1603                                       @LEVEL            = 0,
 1604                                       @START_OFFSET     = 0,
 1605                                       @ATTR             = 0,
 1606                                       @LINK             = "ADDR(NIL)");
 1607
 1608
 1609         DO;
 1610           %RESERVE_LTS (ITEM  = %CONTROL_NAME_LTS,
 1611                         POINTER = @POINTER);
 1612           @POINTER -> CONTROL_NAME_LTS.ID             = %CONTROL_NAME_LTS;
 1613           @POINTER -> CONTROL_NAME_LTS.ST$            = @ST$;
 1614           @POINTER -> CONTROL_NAME_LTS.ST_FIELD$      = @ST_FIELD$;
 1615           @POINTER -> CONTROL_NAME_LTS.TEMP_FIELD$    = @TEMP_FIELD$;
 1616           @POINTER -> CONTROL_NAME_LTS.SHADOW_FIELD$  = @SHADOW_FIELD$;
 1617           @POINTER -> CONTROL_NAME_LTS.CONTROL_HEADING$ = @CONTROL_HEADING$;
 1618           @POINTER -> CONTROL_NAME_LTS.CONTROL_FOOTING$ = @CONTROL_FOOTING$;
 1619           @POINTER -> CONTROL_NAME_LTS.SUM_RESET$     = @SUM_RESET$;
 1620           @POINTER -> CONTROL_NAME_LTS.SUM_SUBTOTAL$  = @SUM_SUBTOTAL$;
 1621           @POINTER -> CONTROL_NAME_LTS.SUM_CLEAR$     = @SUM_CLEAR$;
 1622           @POINTER -> CONTROL_NAME_LTS.TEMP$          = @TEMP$;
 1623           @POINTER -> CONTROL_NAME_LTS.SHADOW$        = @SHADOW$;
 1624           @POINTER -> CONTROL_NAME_LTS.LEVEL          = @LEVEL;
 1625           @POINTER -> CONTROL_NAME_LTS.START_OFFSET   = @START_OFFSET;
 1626           @POINTER -> CONTROL_NAME_LTS.ATTR           = @ATTR;
 1627           @POINTER -> CONTROL_NAME_LTS.LINK           = @LINK;
 1628        END;
 1629       %MEND;
 1630
 1631       %MACRO NEW_SUM_LTS (@POINTER = LTS$,
 1632                           @EDIT_ST$ = "ADDR(NIL)",
 1633                           @SUM_ST$ = "ADDR(NIL)",
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          46   
 1634                           @SUM_ST_ILL$ = "ADDR(NIL)",
 1635                           @REPORT_LTS$ = "ADDR(NIL)",
 1636                           @REPORT_01_LTS$ = "ADDR(NIL)",
 1637                           @ATTR     = 0,
 1638                           @EDIT_ST_ILL$ = "ADDR(NIL)");
 1639
 1640         DO;
 1641           %RESERVE_LTS (ITEM = %SUM_LTS,
 1642                         POINTER = @POINTER);
 1643           @POINTER -> SUM_LTS.ID          = %SUM_LTS;
 1644           @POINTER -> SUM_LTS.EDIT_ST$     = @EDIT_ST$;
 1645           @POINTER -> SUM_LTS.REPORT_LTS$ = @REPORT_LTS$;
 1646           @POINTER -> SUM_LTS.REPORT_01_LTS$ = @REPORT_01_LTS$;
 1647           @POINTER -> SUM_LTS.SUM_ST_ILL$ = @SUM_ST_ILL$;
 1648           @POINTER -> SUM_LTS.ATTR        = @ATTR;
 1649           @POINTER -> SUM_LTS.EDIT_ST_ILL$ = @EDIT_ST_ILL$;
 1650         END;
 1651       %MEND;
 1652
 1653       %MACRO NEW_SEGMENT_LTS (@POINTER = LTS$,
 1654                               @ATTR     = 0,
 1655                               @FIXED_PERMANENT = '0'B,
 1656                               @FIXED_OVERLAY   = '0'B,
 1657                               @INDEPENDENT     = '0'B,
 1658                               @SECTION_ST$     = "ADDR(NIL)",
 1659                               @SEGMENT_NO#     = 0,
 1660                               @NEXT_SECTION$   = "ADDR(NIL)",
 1661                               @ALTER_RESET$    = "ADDR(NIL)",
 1662                               @SUB_LABEL$      = "ADDR(NIL)",
 1663                               @NEXT            = "ADDR(NIL)",
 1664                               @LINK            = "ADDR(NIL)");
 1665
 1666         DO;
 1667           %RESERVE_LTS (ITEM = %SEGMENT_LTS,
 1668                         POINTER = @POINTER);
 1669
 1670           @POINTER -> SEGMENT_LTS.ID = %SEGMENT_LTS;
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          47   
 1671           @POINTER -> SEGMENT_LTS.ATTR = @ATTR;
 1672           @POINTER -> SEGMENT_LTS.B.FIXED_PERMANENT = @FIXED_PERMANENT;
 1673           @POINTER -> SEGMENT_LTS.B.FIXED_OVERLAY   = @FIXED_OVERLAY;
 1674           @POINTER -> SEGMENT_LTS.B.INDEPENDENT     = @INDEPENDENT;
 1675           @POINTER -> SEGMENT_LTS.SECTION_ST$       = @SECTION_ST$;
 1676           @POINTER -> SEGMENT_LTS.SEGMENT_NO#       = @SEGMENT_NO#;
 1677           @POINTER -> SEGMENT_LTS.NEXT_SECTION$     = @NEXT_SECTION$;
 1678           @POINTER -> SEGMENT_LTS.ALTER_RESET$      = @ALTER_RESET$;
 1679           @POINTER -> SEGMENT_LTS.SUB_LABEL$      = @SUB_LABEL$;
 1680           @POINTER -> SEGMENT_LTS.NEXT              = @NEXT;
 1681           @POINTER -> SEGMENT_LTS.LINK              = @LINK;
 1682
 1683         END;
 1684       %MEND;
 1685
 1686       %MACRO NEW_ALTER_LTS (@POINTER = LTS$,
 1687                             @SEG_NO# = 0,
 1688                             @LABEL$  = "ADDR(NIL)",
 1689                             @NEXT    = "ADDR(NIL)");
 1690         DO;
 1691           %RESERVE_LTS (ITEM = %ALTER_LTS,
 1692                         POINTER = @POINTER);
 1693
 1694           @POINTER -> ALTER_LTS.ID       = %ALTER_LTS;
 1695           @POINTER -> ALTER_LTS.SEG_NO#  = @SEG_NO#;
 1696           @POINTER -> ALTER_LTS.LABEL$   = @LABEL$;
 1697           @POINTER -> ALTER_LTS.NEXT     = @NEXT;
 1698         END;
 1699       %MEND;
 1700
 1701       %MACRO NEW_ARRAY_PRESET_LTS (@POINTER = LTS$,
 1702                                    @CONSTANT$ = "ADDR(NIL)",
 1703                                    @STRING$    = "ADDR(NIL)",
 1704                                    @LAST_OFFSET = 0,
 1705                                    @BITS_LEFT  = 0);
 1706         DO;
 1707             %RESERVE_LTS (ITEM    = %ARRAY_PRESET_LTS,
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          48   
 1708                           POINTER = @POINTER);
 1709
 1710             @POINTER -> ARRAY_PRESET_LTS.ID = %ARRAY_PRESET_LTS;
 1711             @POINTER -> ARRAY_PRESET_LTS.CONSTANT$ = @CONSTANT$;
 1712             @POINTER -> ARRAY_PRESET_LTS.STRING$ = @STRING$;
 1713             @POINTER -> ARRAY_PRESET_LTS.LAST_OFFSET = @LAST_OFFSET;
 1714             @POINTER -> ARRAY_PRESET_LTS.BITS_LEFT = @BITS_LEFT;
 1715         END;
 1716       %MEND;
 1717
 1718       %MACRO NEW_BASE_LTS (@POINTER = LTS$,
 1719                            @ST$ = "ADDR(NIL)",
 1720                            @POINTER$    = "ADDR(NIL)",
 1721                            @REDEFINE$    = "ADDR(NIL)",
 1722                            @SEQ# = 0,
 1723                            @ARGP$ = "ADDR(NIL)",
 1724                            @LINK = "ADDR(NIL)",
 1725                            @NEXT = "ADDR(NIL)");
 1726         DO;
 1727             %RESERVE_LTS (ITEM    = %BASE_LTS,
 1728                           POINTER = @POINTER);
 1729
 1730             @POINTER -> BASE_LTS.ID = %BASE_LTS;
 1731             @POINTER -> BASE_LTS.POINTER$ = @POINTER$;
 1732             @POINTER -> BASE_LTS.NEXT = @NEXT;
 1733             @POINTER -> BASE_LTS.LINK = @LINK;
 1734             @POINTER -> BASE_LTS.REDEFINE$ = @REDEFINE$;
 1735             @POINTER -> BASE_LTS.ARGP$ = @ARGP$;
 1736             @POINTER -> BASE_LTS.SEQ# = @SEQ#;
 1737             @POINTER -> BASE_LTS.ST$ = @ST$;
 1738         END;
 1739       %MEND;
 1740
 1741       %MACRO NEW_CD_LTS (@POINTER = ,
 1742                          @LX_CD_TYPE    = %LX_CD_INPUT,
 1743                          @CD_ST$        = "ADDR(NIL)",
 1744                          @LINK          = "ADDR(NIL)",
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          49   
 1745                          @WORK_ST$      = "ADDR(NIL)",
 1746                          @BUFFER_ST$    = "ADDR(NIL)",
 1747                          @BUFFER_LENGTH = 84,
 1748                          @ATTR          = 0,
 1749                          @OCCURS        = 0,
 1750                          @INITIAL       = '0'B);
 1751         DO;
 1752             %RESERVE_LTS (ITEM = %CD_LTS,
 1753                           POINTER = @POINTER);
 1754
 1755           @POINTER -> CD_LTS.ID         = %CD_LTS;
 1756           @POINTER -> CD_LTS.CD_ST$     = @CD_ST$;
 1757           @POINTER -> CD_LTS.WORK_ST$   = @WORK_ST$;
 1758           @POINTER -> CD_LTS.BUFFER_ST$ = @BUFFER_ST$;
 1759           @POINTER -> CD_LTS.LX_CD_TYPE = @LX_CD_TYPE;
 1760           @POINTER -> CD_LTS.BUFFER_LENGTH = @BUFFER_LENGTH;
 1761           @POINTER -> CD_LTS.ATTR          = @ATTR;
 1762           @POINTER -> CD_LTS.B.INITIAL     = @INITIAL;
 1763           @POINTER -> CD_LTS.LINK          = @LINK;
 1764           @POINTER -> CD_LTS.D.LEN         = @BUFFER_LENGTH - 4;
 1765           @POINTER -> CD_LTS.D.OCCURS      = @OCCURS;
 1766
 1767         END;
 1768       %MEND;
 1769       %EJECT;

09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          50   
 1770
 1771         %MACRO NEW_LTS_PTR_ARRAY (@POINTER = LTS$,
 1772                              @SIZE    = %MIN_LTS_PTR_ARRAY_SIZE,
 1773                              @LINK    = "ADDR(NIL)");
 1774
 1775           DO;
 1776             ITERATION = @SIZE;
 1777             %RESERVE_LTS (ITEM     = %LTS_PTR_ARRAY,
 1778                           POINTER  = @POINTER);
 1779             @POINTER -> LTS_PTR_ARRAY.LINK = @LINK;
 1780           END;
 1781         %MEND;
 1782
 1783
 1784         %MACRO NEW_ALT_KEY (@POINTER = LTS$,
 1785                             @#KEYS   = 1);
 1786
 1787             DO;
 1788               ITERATION = (@#KEYS * %NO_WORDS_PER_ALT_KEY) + %MIN_ALT_KEY_SIZE;
 1789               %RESERVE_LTS (ITEM     = %ALT_KEY,
 1790                             POINTER  = @POINTER);
 1791               @POINTER -> ALT_KEY.NUM_KEYS_MINUS_1 = @#KEYS - 1;
 1792             END;
 1793         %MEND;
 1794
 1795
 1796          %MACRO NEW_DML_REC (@POINTER  = LTS$,
 1797                              @INFO =    ,
 1798                              @EXTEND$  = "ADDR(NIL)");
 1799
 1800              DO;
 1801                  %RESERVE_LTS(POINTER = @POINTER, ITEM = %DML_REC);
 1802                  @POINTER -> DML_REC.RECORD_INFO = @INFO;
 1803                  @POINTER -> DML_REC.EXTEND$ = @EXTEND$;
 1804              END;
 1805
 1806          %MEND;
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          51   
 1807
 1808          %MACRO NEW_USE_LTS ( @POINTER     = LTS$,
 1809                               @TYPE        = %USE_TYPE_UNKNOWN,
 1810                               @PROC_CHAIN$ = "ADDR(NIL)",
 1811                               @PROC_LABEL$ = "ENTADDR(NIL)",
 1812                               @LINK$       = "ADDR(NIL)",
 1813                               @TO$         = "ADDR(NIL)",
 1814                               @TO1$        = "ADDR(NIL)",
 1815                               @LINE        = 0,
 1816                               @COLUMN      = 0,
 1817                               @INIT_LABEL_BASE$ = "ADDR(NIL)");
 1818
 1819              DO;
 1820                  %RESERVE_LTS(POINTER = @POINTER, ITEM = %USE_LTS);
 1821                  @POINTER -> USE.PROC_CHAIN$ = @PROC_CHAIN$;
 1822                  %IF TEXTCHAR(@PROC_LABEL$) = 'ENTADDR(NIL)';
 1823                  @POINTER -> USE.PROC_NO_LABEL$ = ENTADDR(NIL);
 1824                  %ELSE;
 1825                  @POINTER -> USE.PROC_LABEL$ = @PROC_LABEL$;
 1826                  %ENDIF;
 1827                  @POINTER -> USE.LINK$       = @LINK$;
 1828                  @POINTER -> USE.TO$         = @TO$  ;
 1829                  @POINTER -> USE.TYPE        = @TYPE ;
 1830                  ADDR(@POINTER -> USE.ILS_LIST) -> ILS_LIST.HEAD$ = ADDR(NIL) ;
 1831                  ADDR(@POINTER -> USE.ILS_LIST) -> ILS_LIST.TAIL$ = ADDR(NIL) ;
 1832                  ADDR(@POINTER -> USE.ILS_LIST) -> ILS_LIST.LINK  = ADDR(NIL) ;
 1833                  @POINTER -> USE.TO1$        = @TO1$ ;
 1834                  @POINTER -> USE.INIT_LABEL_BASE$        = @INIT_LABEL_BASE$ ;
 1835                  @POINTER -> USE.LINE        = @LINE;
 1836                  @POINTER -> USE.COLUMN      = @COLUMN;
 1837              END;
 1838
 1839          %MEND;
 1840
 1841          %MACRO NEW_USE_SUPP (@POINTER = LTS$,
 1842                               @FILE_LTS$ = "ADDR(NIL)",
 1843                               @PROC_LABEL$ = "ENTADDR(NIL)",
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          52   
 1844                               @TO$ = "ADDR(NIL)",
 1845                               @USE$ = "ADDR(NIL)",
 1846                               @INIT_LABEL_BASE$ = "ADDR(NIL)",
 1847                               @LINK$ = "ADDR(NIL)");
 1848
 1849              DO;
 1850                  %RESERVE_LTS (POINTER=@POINTER, ITEM = %USE_SUPP);
 1851                  @POINTER -> USE_SUPP.FILE_LTS$   = @FILE_LTS$;
 1852                  %IF TEXTCHAR(@PROC_LABEL$) = 'ENTADDR(NIL)';
 1853                  @POINTER -> USE_SUPP.PROC_LABEL_EPTR = ENTADDR(NIL);
 1854                  %ELSE;
 1855                  @POINTER -> USE_SUPP.PROC_LABEL$ = @PROC_LABEL$;
 1856                  %ENDIF;
 1857                  @POINTER -> USE_SUPP.TO$         = @TO$;
 1858                  @POINTER -> USE_SUPP.USE$        = @USE$;
 1859                  @POINTER -> USE_SUPP.INIT_LABEL_BASE$        = @INIT_LABEL_BASE$;
 1860                  @POINTER -> USE_SUPP.LINK$       = @LINK$;
 1861              END;
 1862
 1863          %MEND;
 1864
 1865          %MACRO NEW_EXT_DML (@POINTER = LTS$,
 1866                              @EXTEND$ = "ADDR(NIL)");
 1867
 1868              DO;
 1869                  %RESERVE_LTS(POINTER = @POINTER, ITEM = %DML_REC);
 1870                  @POINTER -> DML_REC.EXTEND$ = @EXTEND$;
 1871              END;
 1872
 1873          %MEND;
 1874
 1875          %MACRO NEW_RVA_LTS( @ST$ =  ,
 1876                              @POINTER = LTS$,
 1877                              @OFFSET =  0,
 1878                              @VERB = 0 );
 1879
 1880              %RESERVE_LTS( ITEM = %RVA, POINTER = @POINTER);
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          53   
 1881              @POINTER -> RVA_LTS.ST$ = @ST$;
 1882              @POINTER -> RVA_LTS.LINK$ = O1COM.RVA_LINK$;
 1883              O1COM.RVA_LINK$ = @POINTER;
 1884              @POINTER -> RVA_LTS.VERB = @VERB;
 1885              @POINTER -> RVA_LTS.OFFSET = @OFFSET;
 1886
 1887          %MEND;
 1888      %MACRO GET_RVA_LTS(@ST$ = ,
 1889                         @POINTER = ,
 1890                         @LTS$ = );
 1891          DO WHILE @POINTER ~= ADDR(NIL);
 1892              IF @ST$ = @POINTER -> RVA_LTS.ST$    THEN
 1893                DO;
 1894                  @LTS$ = @POINTER;
 1895                  @POINTER = ADDR(NIL);
 1896                END;
 1897              ELSE
 1898                  @POINTER = @POINTER -> RVA_LTS.LINK$;
 1899          END;
 1900      %MEND;
 1901
 1902      %MACRO NEW_OPEN_LTS( @ARG$ = ,
 1903                           @FILE_LTS$ = ,
 1904                           @CONST_PARM = ,
 1905                           @OPEN_TYPE = ,
 1906                           @INFO_BLOCK$ = ,
 1907                           @POINTER = LTS$);
 1908      DO;
 1909        %RESERVE_LTS( ITEM = %OPEN_LTS, POINTER = @POINTER );
 1910
 1911        @POINTER -> OPEN_LTS.CONST_PARM = @CONST_PARM;
 1912        @POINTER -> OPEN_LTS.OPEN_TYPE = @OPEN_TYPE;
 1913        @POINTER -> OPEN_LTS.ARG$ = @ARG$;
 1914        @POINTER -> OPEN_LTS.INFO_BLOCK$ = @INFO_BLOCK$;
 1915        @POINTER -> OPEN_LTS.FILE_LTS$ = @FILE_LTS$;
 1916        @POINTER -> OPEN_LTS.LINK = O1COM.OPEN_LTS$;
 1917
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          54   
 1918        O1COM.OPEN_LTS$ = @POINTER;
 1919
 1920      END;
 1921      %MEND;
 1922
 1923      %MACRO NEW_IO_RESTORE_CHAIN (@POINTER = LTS$,
 1924                                   @RESTORE = "ADDR(NIL)",
 1925                                   @TO      = "ADDR(NIL)",
 1926                                   @BASE    = "ADDR(NIL)",
 1927                                   @NEXT    = "ADDR(NIL)") ;
 1928         DO;
 1929           %RESERVE_LTS (ITEM    = %IO_RESTORE_CHAIN,
 1930                         POINTER = @POINTER);
 1931           @POINTER -> IO_RESTORE_CHAIN.NEXT$    = @NEXT;
 1932           @POINTER -> IO_RESTORE_CHAIN.RESTORE$ = @RESTORE;
 1933           @POINTER -> IO_RESTORE_CHAIN.TO$      = @TO;
 1934           @POINTER -> IO_RESTORE_CHAIN.BASE$    = @BASE;
 1935         END;
 1936      %MEND;
 1937
 1938      %EQU NO_OF_LTS_ITEMS = %LAST_LTS - %FIRST_LTS + 1;
 1939
 1940      /* INFO FOR DIMS ITEM */
 1941      %EQU MIN_DIM_SIZE = 5 ;
 1942      %EQU NO_WORDS_PER_DIM = 3 ;
 1943
 1944      /* Info for LTS_PTR_ARRAY */
 1945      %EQU MIN_LTS_PTR_ARRAY_SIZE = 3;
 1946
 1947      %MACRO FIND_LAST_DIM(POINTER=LTS$, VARIABLE=LAST_DIM) ;
 1948             DO ;
 1949               VARIABLE = (POINTER->LTS.N - %MIN_DIM_SIZE) / %NO_WORDS_PER_DIM ;
 1950             END ;
 1951      %MEND ;
 1952
 1953      /* INFO FOR EVALUATE ITEM */
 1954      %EQU MIN_EVAL_SIZE = 1 ;
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          55   
 1955      %EQU WORDS_PER_EVAL_VAR = 4 ;
 1956
 1957      DCL   LTS_STEP (0:%(NO_OF_LTS_ITEMS - 1 )) UBIN
 1958      %IF INITIALIZE;
 1959            CONSTANT SYMDEF
 1960            INIT (
 1961    *        SIZEW(INIT_LTS)
 1962    *       ,SIZEW(BT)
 1963    *       ,SIZEW(USE_SUPP)
 1964            ,SIZEW(COPY_FILE)
 1965            ,SIZEW(BASE_LTS)
 1966            ,SIZEW(IO_RESTORE_CHAIN)
 1967            ,SIZEW(ARRAY_PRESET_LTS)
 1968            ,SIZEW(OPEN_LTS)
 1969            ,SIZEW(CD_LTS)
 1970            ,SIZEW(ALTER_LTS)
 1971            ,SIZEW(SEGMENT_LTS)
 1972            ,SIZEW(RVA_LTS)
 1973            ,SIZEW(SUM_LTS)
 1974            ,SIZEW(CONTROL_NAME_LTS)
 1975            ,SIZEW(USE)
 1976            ,SIZEW(REPORT_01_LTS)
 1977            ,SIZEW(REPORT_ELEM_LTS)
 1978            ,SIZEW(REPORT_GRP_LTS)
 1979            ,0 /* DIMS  */
 1980            ,SIZEW(LTSS) /* LTSS  */
 1981            ,0 /* LCNST */
 1982            ,SIZEW(PRIME) /* PRIME */
 1983            ,SIZEW(LONG) /* LONG  */
 1984            ,SIZEW(REF) /* REF    */
 1985            ,0 /* ARGLIST */
 1986            ,0 /* EVALUATE */
 1987            ,SIZEW(KEY) /* Key    */
 1988            ,SIZEW(NEL) /* NEL ITEM */
 1989            ,SIZEW(INDEXES) /* INDEXES */
 1990            ,SIZEW(RENAMES) /* RENAMES  */
 1991            ,SIZEW(DEPENDING_SIZE) /* DEPENDING_SIZE */
09:12 AUG 09 '97 Z8A_LTS.:Z8A6SI/Z8A_LTS.:Z8A6TUI                          56   
 1992            ,SIZEW(FILE_LTS) /* FILE_LTS */
 1993            ,0 /* LTS_PTR_ARRAY */
 1994            ,0 /* ALT_KEY */
 1995            ,SIZEW(PROC_SUPP) /* Proc_supp */
 1996            ,SIZEW(DML_REC)
 1997            ,SIZEW(REPORT_LTS)
 1998            ,0                 /* To be DEFERED_ACTION_LTS */
 1999             )
 2000      %ELSE;
 2001            SYMREF READONLY
 2002      %ENDIF ;
 2003           ;
 2004
 2005
 2006      /* Equates for verifying assign values between Z8EN & Z9EN */
 2007      %EQU ASSIGN_PRINTER = 0;
 2008      %EQU ASSIGN_INPUT   = 1;
 2009      %EQU ASSIGN_OUTPUT  = 2;
 2010      %EQU ASSIGN_DISK    = 3;
 2011
 2012      /* Equates for USE.TYPE */
 2013      %EQU USE_TYPE_UNKNOWN   = 0 ;
 2014      %EQU USE_TYPE_INPUT     = 1 ;
 2015      %EQU USE_TYPE_OUTPUT    = 2 ;
 2016      %EQU USE_TYPE_EXTEND    = 3 ;
 2017      %EQU USE_TYPE_IO        = 4 ;
 2018      %EQU USE_TYPE_FILE      = 5 ;
 2019      %EQU USE_TYPE_REPORTING = 6 ;
 2020      %EQU USE_TYPE_DML       = 7 ;
 2021      %EQU USE_TYPE_NIL       = 8 ;
 2022      %EJECT;


