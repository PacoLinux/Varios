

CC.C03    File=zbe$cs_partit:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=1  
        1         1             /* $Header: cs_partit.c,v 1.3 87/03/10 10:57:08 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /* Functions to partition the huge set of EM-instructions. */
        7         7
        8         8             #include "em_mnem:h"
        9         9             #include "em_pseu:h"
       10        10             #include "em_reg:h"
       11        11             #include "em_spec:h"
       12        12             #include "types:h"
       13        13             #include "aux:h"
       14        14             #include "debug:h"
       15        15             #include "global:h"
       16        16             #include "cs:h"
       17        17             #include "cs_stack:h"
       18        18
       19        19             #define XXX  (-1)
       20        20             #define ARGW 0
       21        21             #define WS   1
       22        22             #define PS   2
       23        23             #define FEF  3
       24        24             #define FIF  4
       25        25             #define CVT  5
       26        26
       27        27             #define ANY  0
       28        28             #define PTR  1
       29        29             #define FLT  2
       30        30
       31        31             STATIC struct {
       32        32    1            byte i_group;   /* Group of instruction. */
       33        33    1            byte i_op1;    /* Indication of size of operand of unary operator. */
       34        34    1               /* Idem for 1st operand of binary operator. */
       35        35    1            byte i_op2;    /* Idem for 2nd operand of binary operator. */
       36        36    1            byte i_av;     /* Idem for result of operators. */
CC.C03    File=zbe$cs_partit:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=2  
       37        37    1            byte i_regtype;   /* ANY, PTR, FLT. */
       38        38    1        } info[] = {
       39        39    1            XXX,     XXX,  XXX,  XXX,  XXX,
       40        40    1        /* aar */ TERNAIR_OP, XXX,  XXX,  PS,   PTR,
       41        41    1        /* adf */ BINAIR_OP,  ARGW, ARGW, ARGW, FLT,
       42        42    1        /* adi */ BINAIR_OP,  ARGW, ARGW, ARGW, ANY,
       43        43    1        /* adp */ EXPENSIVE_LOAD,   XXX,  XXX,  XXX,  PTR,
       44        44    1        /* ads */ BINAIR_OP,  PS,   ARGW, PS,   PTR,
       45        45    1        /* adu */ BINAIR_OP,  ARGW, ARGW, ARGW, ANY,
       46        46    1        /* and */ BINAIR_OP,  ARGW, ARGW, ARGW, ANY,
       47        47    1        /* asp */ FIDDLE_STACK,  XXX,  XXX,  XXX,  XXX,
       48        48    1        /* ass */ FIDDLE_STACK,  XXX,  XXX,  XXX,  XXX,
       49        49    1        /* beq */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
       50        50    1        /* bge */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
       51        51    1        /* bgt */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
       52        52    1        /* ble */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
       53        53    1        /* blm */ HOPELESS,   XXX,  XXX,  XXX,  XXX,
       54        54    1        /* bls */ HOPELESS,   XXX,  XXX,  XXX,  XXX,
       55        55    1        /* blt */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
       56        56    1        /* bne */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
       57        57    1        /* bra */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
       58        58    1        /* cai */ SIDE_EFFECTS,  XXX,  XXX,  XXX,  XXX,
       59        59    1        /* cal */ SIDE_EFFECTS,  XXX,  XXX,  XXX,  XXX,
       60        60    1        /* cff */ TERNAIR_OP, XXX,  XXX,  CVT,  FLT,
       61        61    1        /* cfi */ TERNAIR_OP, XXX,  XXX,  CVT,  ANY,
       62        62    1        /* cfu */ TERNAIR_OP, XXX,  XXX,  CVT,  ANY,
       63        63    1        /* cif */ TERNAIR_OP, XXX,  XXX,  CVT,  FLT,
       64        64    1        /* cii */ TERNAIR_OP, XXX,  XXX,  CVT,  ANY,
       65        65    1        /* ciu */ TERNAIR_OP, XXX,  XXX,  CVT,  ANY,
       66        66    1        /* cmf */ BINAIR_OP,  ARGW, ARGW, WS,   ANY,
       67        67    1        /* cmi */ BINAIR_OP,  ARGW, ARGW, WS,   ANY,
       68        68    1        /* cmp */ BINAIR_OP,  PS,   PS,   WS,   ANY,
       69        69    1        /* cms */ BINAIR_OP,  ARGW, ARGW, WS,   ANY,
       70        70    1        /* cmu */ BINAIR_OP,  ARGW, ARGW, WS,   ANY,
       71        71    1        /* com */ UNAIR_OP,   ARGW, XXX,  ARGW, ANY,
       72        72    1        /* csa */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
       73        73    1        /* csb */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
CC.C03    File=zbe$cs_partit:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=3  
       74        74    1        /* cuf */ TERNAIR_OP, XXX,  XXX,  CVT,  FLT,
       75        75    1        /* cui */ TERNAIR_OP, XXX,  XXX,  CVT,  ANY,
       76        76    1        /* cuu */ TERNAIR_OP, XXX,  XXX,  CVT,  ANY,
       77        77    1        /* dch */ UNAIR_OP,   PS,   XXX,  PS,   PTR,
       78        78    1        /* dec */ UNAIR_OP,   WS,   XXX,  WS,   ANY,
       79        79    1        /* dee */ KILL_ENTITY,   XXX,  XXX,  XXX,  XXX,
       80        80    1        /* del */ KILL_ENTITY,   XXX,  XXX,  XXX,  XXX,
       81        81    1        /* dup */ FIDDLE_STACK,  XXX,  XXX,  XXX,  XXX,
       82        82    1        /* dus */ FIDDLE_STACK,  XXX,  XXX,  XXX,  XXX,
       83        83    1        /* dvf */ BINAIR_OP,  ARGW, ARGW, ARGW, FLT,
       84        84    1        /* dvi */ BINAIR_OP,  ARGW, ARGW, ARGW, ANY,
       85        85    1        /* dvu */ BINAIR_OP,  ARGW, ARGW, ARGW, ANY,
       86        86    1        /* exg */ FIDDLE_STACK,  XXX,  XXX,  XXX,  XXX,
       87        87    1        /* fef */ UNAIR_OP,   ARGW, XXX,  FEF,  XXX,
       88        88    1        /* fif */ BINAIR_OP,  ARGW, ARGW, FIF,  XXX,
       89        89    1        /* fil */ IGNORE,     XXX,  XXX,  XXX,  XXX,
       90        90    1        /* gto */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
       91        91    1        /* inc */ UNAIR_OP,   WS,   XXX,  WS,   ANY,
       92        92    1        /* ine */ KILL_ENTITY,   XXX,  XXX,  XXX,  XXX,
       93        93    1        /* inl */ KILL_ENTITY,   XXX,  XXX,  XXX,  XXX,
       94        94    1        /* inn */ BINAIR_OP,  ARGW, WS,   WS,   ANY,
       95        95    1        /* ior */ BINAIR_OP,  ARGW, ARGW, ARGW, ANY,
       96        96    1        /* lae */ SIMPLE_LOAD,   XXX,  XXX,  XXX,  XXX,
       97        97    1        /* lal */ SIMPLE_LOAD,   XXX,  XXX,  XXX,  XXX,
       98        98    1        /* lar */ LOAD_ARRAY, XXX,  XXX,  XXX,  ANY,
       99        99    1        /* ldc */ SIMPLE_LOAD,   XXX,  XXX,  XXX,  XXX,
      100       100    1        /* lde */ SIMPLE_LOAD,   XXX,  XXX,  XXX,  XXX,
      101       101    1        /* ldf */ EXPENSIVE_LOAD,   XXX,  XXX,  XXX,  ANY,
      102       102    1        /* ldl */ SIMPLE_LOAD,   XXX,  XXX,  XXX,  XXX,
      103       103    1        /* lfr */ FIDDLE_STACK,  XXX,  XXX,  XXX,  XXX,
      104       104    1        /* lil */ SIMPLE_LOAD,   XXX,  XXX,  XXX,  XXX,
      105       105    1        /* lim */ SIMPLE_LOAD,   XXX,  XXX,  XXX,  XXX,
      106       106    1        /* lin */ IGNORE,     XXX,  XXX,  XXX,  XXX,
      107       107    1        /* lni */ IGNORE,     XXX,  XXX,  XXX,  XXX,
      108       108    1        /* loc */ SIMPLE_LOAD,   XXX,  XXX,  XXX,  XXX,
      109       109    1        /* loe */ SIMPLE_LOAD,   XXX,  XXX,  XXX,  XXX,
      110       110    1        /* lof */ EXPENSIVE_LOAD,   XXX,  XXX,  XXX,  ANY,
CC.C03    File=zbe$cs_partit:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=4  
      111       111    1        /* loi */ EXPENSIVE_LOAD,   XXX,  XXX,  XXX,  ANY,
      112       112    1        /* lol */ SIMPLE_LOAD,   XXX,  XXX,  XXX,  XXX,
      113       113    1        /* lor */ SIMPLE_LOAD,   XXX,  XXX,  XXX,  XXX,
      114       114    1        /* los */ FIDDLE_STACK,  XXX,  XXX,  XXX,  XXX,
      115       115    1        /* lpb */ UNAIR_OP,   PS,   XXX,  PS,   PTR,
      116       116    1        /* lpi */ SIMPLE_LOAD,   XXX,  XXX,  XXX,  XXX,
      117       117    1        /* lxa */ EXPENSIVE_LOAD,   XXX,  XXX,  XXX,  PTR,
      118       118    1        /* lxl */ EXPENSIVE_LOAD,   XXX,  XXX,  XXX,  PTR,
      119       119    1        /* mlf */ BINAIR_OP,  ARGW, ARGW, ARGW, FLT,
      120       120    1        /* mli */ BINAIR_OP,  ARGW, ARGW, ARGW, ANY,
      121       121    1        /* mlu */ BINAIR_OP,  ARGW, ARGW, ARGW, ANY,
      122       122    1        /* mon */ HOPELESS,   XXX,  XXX,  XXX,  XXX,
      123       123    1        /* ngf */ UNAIR_OP,   ARGW, XXX,  ARGW, FLT,
      124       124    1        /* ngi */ UNAIR_OP,   ARGW, XXX,  ARGW, ANY,
      125       125    1        /* nop */ IGNORE,     XXX,  XXX,  XXX,  XXX,
      126       126    1        /* rck */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
      127       127    1        /* ret */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
      128       128    1        /* rmi */ BINAIR_OP,  ARGW, ARGW, ARGW, ANY,
      129       129    1        /* rmu */ BINAIR_OP,  ARGW, ARGW, ARGW, ANY,
      130       130    1        /* rol */ BINAIR_OP,  ARGW, WS,   ARGW, ANY,
      131       131    1        /* ror */ BINAIR_OP,  ARGW, WS,   ARGW, ANY,
      132       132    1        /* rtt */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
      133       133    1        /* sar */ STORE_ARRAY,   XXX,  XXX,  XXX,  XXX,
      134       134    1        /* sbf */ BINAIR_OP,  ARGW, ARGW, ARGW, FLT,
      135       135    1        /* sbi */ BINAIR_OP,  ARGW, ARGW, ARGW, ANY,
      136       136    1        /* sbs */ BINAIR_OP,  PS,   PS,   ARGW, ANY,
      137       137    1        /* sbu */ BINAIR_OP,  ARGW, ARGW, ARGW, ANY,
      138       138    1        /* sde */ STORE_DIRECT,  XXX,  XXX,  XXX,  XXX,
      139       139    1        /* sdf */ STORE_INDIR,   XXX,  XXX,  XXX,  XXX,
      140       140    1        /* sdl */ STORE_DIRECT,  XXX,  XXX,  XXX,  XXX,
      141       141    1        /* set */ UNAIR_OP,   WS,   XXX,  ARGW, ANY,
      142       142    1        /* sig */ FIDDLE_STACK,  XXX,  XXX,  XXX,  XXX,
      143       143    1        /* sil */ STORE_INDIR,   XXX,  XXX,  XXX,  XXX,
      144       144    1        /* sim */ STORE_DIRECT,  XXX,  XXX,  XXX,  XXX,
      145       145    1        /* sli */ BINAIR_OP,  ARGW, WS,   ARGW, ANY,
      146       146    1        /* slu */ BINAIR_OP,  ARGW, WS,   ARGW, ANY,
      147       147    1        /* sri */ BINAIR_OP,  ARGW, WS,   ARGW, ANY,
CC.C03    File=zbe$cs_partit:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=5  
      148       148    1        /* sru */ BINAIR_OP,  ARGW, WS,   ARGW, ANY,
      149       149    1        /* ste */ STORE_DIRECT,  XXX,  XXX,  XXX,  XXX,
      150       150    1        /* stf */ STORE_INDIR,   XXX,  XXX,  XXX,  XXX,
      151       151    1        /* sti */ STORE_INDIR,   XXX,  XXX,  XXX,  XXX,
      152       152    1        /* stl */ STORE_DIRECT,  XXX,  XXX,  XXX,  XXX,
      153       153    1        /* str */ HOPELESS,   XXX,  XXX,  XXX,  XXX,
      154       154    1        /* sts */ HOPELESS,   XXX,  XXX,  XXX,  XXX,
      155       155    1        /* teq */ UNAIR_OP,   WS,   XXX,  WS,   ANY,
      156       156    1        /* tge */ UNAIR_OP,   WS,   XXX,  WS,   ANY,
      157       157    1        /* tgt */ UNAIR_OP,   WS,   XXX,  WS,   ANY,
      158       158    1        /* tle */ UNAIR_OP,   WS,   XXX,  WS,   ANY,
      159       159    1        /* tlt */ UNAIR_OP,   WS,   XXX,  WS,   ANY,
      160       160    1        /* tne */ UNAIR_OP,   WS,   XXX,  WS,   ANY,
      161       161    1        /* trp */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
      162       162    1        /* xor */ BINAIR_OP,  ARGW, ARGW, ARGW, ANY,
      163       163    1        /* zeq */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
      164       164    1        /* zer */ SIMPLE_LOAD,   XXX,  XXX,  XXX,  XXX,
      165       165    1        /* zge */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
      166       166    1        /* zgt */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
      167       167    1        /* zle */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
      168       168    1        /* zlt */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
      169       169    1        /* zne */ BBLOCK_END, XXX,  XXX,  XXX,  XXX,
      170       170    1        /* zre */ KILL_ENTITY,   XXX,  XXX,  XXX,  XXX,
      171       171    1        /* zrf */ SIMPLE_LOAD,   XXX,  XXX,  XXX,  XXX,
      172       172    1        /* zrl */ KILL_ENTITY,   XXX,  XXX,  XXX,  XXX
      173       173    1        };
      174       174
      175       175             #define GROUP(n)   (info[n].i_group)
      176       176             #define OP1SIZE(l) (info[INSTR(l)].i_op1)
      177       177             #define OP2SIZE(l) (info[INSTR(l)].i_op2)
      178       178             #define AVSIZE(l)  (info[INSTR(l)].i_av)
      179       179             #define REGTYPE(n) (info[n].i_regtype)
      180       180
      181       181             int instrgroup(lnp)
      182       182              line_p lnp;
      183       183             {
      184       184    1         if (INSTR(lnp) == op_lor && SHORT(lnp) == 1) {
CC.C03    File=zbe$cs_partit:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=6  
      185       185    2            /* We can't do anything with the stackpointer. */
      186       186    2            return FIDDLE_STACK;
      187       187    2         }
      188       188    1         if (INSTR(lnp) < sp_fmnem || INSTR(lnp) > sp_lmnem) {
      189       189    2            VI((short) INSTR(lnp));
      190       190    2            return IGNORE;
      191       191    2         }
      192       192    1         return GROUP(INSTR(lnp));
      193       193    1        }
      194       194
      195       195             bool stack_group(instr)
      196       196              int instr;
      197       197             {
      198       198    1         /* Is this an instruction that only does something to the top of
      199       199    1          * the stack?
      200       200    1          */
      201       201    1         switch (GROUP(instr)) {
      202       202    2            case SIMPLE_LOAD:
      203       203    2            case EXPENSIVE_LOAD:
      204       204    2            case LOAD_ARRAY:
      205       205    2            case UNAIR_OP:
      206       206    2            case BINAIR_OP:
      207       207    2            case TERNAIR_OP:
      208       208    2               return TRUE;
      209       209    2            default:
      210       210    2               return FALSE;
      211       211    2         }
      212       212    1        }
      213       213
      214       214             STATIC offset argw(lnp)
      215       215              line_p lnp;
      216       216             {
      217       217    1         /* Some EM-instructions have their argument either on the same line,
      218       218    1          * or on top of the stack. We give up when the argument is on top of
      219       219    1          * the stack.
      220       220    1          */
      221       221    1         struct token dummy;
CC.C03    File=zbe$cs_partit:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=7  
      222       222    1
      223       223    1         if (TYPE(lnp) != OPNO) {
      224       224    2            return off_set(lnp);
      225       225    2         } else {
      226       226    2            Pop(&dummy, (offset) ws);
      227       227    2            return UNKNOWN_SIZE;
      228       228    2         }
      229       229    1        }
      230       230
      231       231             offset op11size(lnp)
      232       232              line_p lnp;
      233       233             {
      234       234    1         /* Returns the size of the first argument of
      235       235    1          * the unary operator in lnp.
      236       236    1          */
      237       237    1
      238       238    1         switch (OP1SIZE(lnp)) {
      239       239    2            case ARGW:
      240       240    2               return argw(lnp);
      241       241    2            case WS:
      242       242    2               return ws;
      243       243    2            case PS:
      244       244    2               return ps;
      245       245    2            default:
      246       246    2               assert(FALSE);
      247       247    2         }
      248       248    1         /* NOTREACHED */
      249       249    1        }
      250       250
      251       251             offset op12size(lnp)
      252       252              line_p lnp;
      253       253             {
      254       254    1         /* Same for first of binary. */
      255       255    1
      256       256    1         switch (OP1SIZE(lnp)) {
      257       257    2            case ARGW:
      258       258    2               return argw(lnp);
CC.C03    File=zbe$cs_partit:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=8  
      259       259    2            case PS:
      260       260    2               return ps;
      261       261    2            default:
      262       262    2               assert(FALSE);
      263       263    2         }
      264       264    1         /* NOTREACHED */
      265       265    1        }
      266       266
      267       267             offset op22size(lnp)
      268       268              line_p lnp;
      269       269             {
      270       270    1         switch (OP2SIZE(lnp)) {
      271       271    2            case ARGW:
      272       272    2               return argw(lnp);
      273       273    2            case WS:
      274       274    2               return ws;
      275       275    2            case PS:
      276       276    2               return ps;
      277       277    2            default:
      278       278    2               assert(FALSE);
      279       279    2         }
      280       280    1         /* NOTREACHED */
      281       281    1        }
      282       282
      283       283             /* Ternary operators are op_aar and conversions between types and/or sizes. */

      284       284
      285       285             offset op13size(lnp)
      286       286              line_p lnp;
      287       287             {
      288       288    1         /* When the instruction is a conversion, the size of the first
      289       289    1          * operand is the value of the second operand.
      290       290    1          * We only handle the most likely case, namely that the second operand
      291       291    1          * was pushed by a loc-instruction.
      292       292    1          */
      293       293    1         if (INSTR(lnp) == op_aar) return ps;
      294       294    1
CC.C03    File=zbe$cs_partit:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=9  
      295       295    1         if (lnp->l_prev != (line_p) 0 &&
      296       296    1             lnp->l_prev->l_prev != (line_p) 0 &&
      297       297    1             INSTR(lnp->l_prev->l_prev) == op_loc
      298       298    1            )
      299       299    1            return off_set(lnp->l_prev->l_prev);
      300       300    1         else
      301       301    1            return UNKNOWN_SIZE;
      302       302    1        }
      303       303
      304       304             offset op23size(lnp)
      305       305              line_p lnp;
      306       306             {
      307       307    1         if (INSTR(lnp) == op_aar)
      308       308    1            return argw(lnp);
      309       309    1         else
      310       310    1            return ws;
      311       311    1        }
      312       312
      313       313             offset op33size(lnp)
      314       314              line_p lnp;
      315       315             {
      316       316    1         if (INSTR(lnp) == op_aar)
      317       317    1            return ps;
      318       318    1         else
      319       319    1            return ws;
      320       320    1        }
      321       321
      322       322             offset avsize(lnp)
      323       323              line_p lnp;
      324       324             {
      325       325    1         /* Returns the size of the result of the instruction in lnp.
      326       326    1          * If the instruction is a conversion this size is given on the stack.
      327       327    1          * We only handle the case that this value was pushed by a loc.
      328       328    1          */
      329       329    1         offset size;
      330       330    1
      331       331    1         switch (AVSIZE(lnp)) {
CC.C03    File=zbe$cs_partit:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=10 
      332       332    2            case ARGW:
      333       333    2               return argw(lnp);
      334       334    2            case WS:
      335       335    2               return ws;
      336       336    2            case PS:
      337       337    2               return ps;
      338       338    2            case FEF:
      339       339    2               if ((size = argw(lnp)) != UNKNOWN_SIZE)
      340       340    2                  return size + ws;
      341       341    2               else
      342       342    2                  return UNKNOWN_SIZE;
      343       343    2            case FIF:
      344       344    2               if ((size = argw(lnp)) != UNKNOWN_SIZE)
      345       345    2                  return size + size;
      346       346    2               else
      347       347    2                  return UNKNOWN_SIZE;
      348       348    2            case CVT:
      349       349    2               if (lnp->l_prev != (line_p) 0 &&
      350       350    2                   INSTR(lnp->l_prev) == op_loc
      351       351    2                  )
      352       352    2                  return off_set(lnp->l_prev);
      353       353    2               else
      354       354    2                  return UNKNOWN_SIZE;
      355       355    2            default:
      356       356    2               assert(FALSE);
      357       357    2               break;
      358       358    2         }
      359       359    1         /* NOTREACHED */
      360       360    1        }
      361       361
      362       362             int regtype(instr)
      363       363              byte instr;
      364       364             {
      365       365    1         switch (REGTYPE(instr & BMASK)) {
      366       366    2            case ANY:
      367       367    2               return reg_any;
      368       368    2            case PTR:
CC.C03    File=zbe$cs_partit:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=11 
      369       369    2               return reg_pointer;
      370       370    2            case FLT:
      371       371    2               return reg_float;
      372       372    2            default:
      373       373    2               assert(FALSE);
      374       374    2         }
      375       375    1         /* NOTREACHED */
      376       376    1        }
      377       377
---  Include file information  ---

   em_mnem:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   em_reg:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$cs:h.:ZBC3TOU. is referenced
   zbe$cs_stack:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$cs_partit:c.:ZBC3TSI
