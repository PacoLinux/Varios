

CC.C03    File=zbe$ra_allocl:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=1  
        1         1             /* $Header: ra_allocl.c,v 1.3 87/03/10 11:21:36 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  R E G I S T E R   A L L O C A T I O N
        7         7              *
        8         8              *  R A _ A L L O C L I S T . C
        9         9              */
       10        10
       11        11             #include "types:h"
       12        12             #include "debug:h"
       13        13             #include "def:h"
       14        14             #include "global:h"
       15        15             #include "lset:h"
       16        16             #include "cset:h"
       17        17             #include "aux:h"
       18        18             #include "alloc:h"
       19        19             #include "map:h"
       20        20             #include "em_mnem:h"
       21        21             #include "em_spec:h"
       22        22             #include "em_pseu:h"
       23        23             #include "em_reg:h"
       24        24             #include "ra:h"
       25        25             #include "ra_aux:h"
       26        26             #include "ra_items:h"
       27        27             #include "ra_allocl:h"
       28        28             #include "ra_interv:h"
       29        29
       30        30             STATIC count_usage(p,item,nrloops,sloopcnt,dloopcnt)
       31        31              proc_p p;
"zbe$ra_allocl:c.:ZBC3TSI", line 31: (warning) identifier "p" is not used
       32        32              item_p item;
       33        33              short  nrloops, sloopcnt[], dloopcnt[];
       34        34             {
       35        35    1         /* Determine how many times the item is used in every loop.
CC.C03    File=zbe$ra_allocl:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=2  
       36        36    1          * We maintain a 'static' count and a 'dynamic' count. The dynamic
       37        37    1          * count estimates the number of times the item is used during
       38        38    1          * execution, i.e. it gives a higher mark to items used inside
       39        39    1          * a loop.
       40        40    1          */
       41        41    1
       42        42    1         lset loops;
       43        43    1         loop_p l;
       44        44    1         int i;
       45        45    1         short lev;
       46        46    1         Lindex ui,li;
       47        47    1         time_p u;
       48        48    1
       49        49    1         for (i = 0; i <= nrloops; i++) {
       50        50    2            sloopcnt[i] = 0;
       51        51    2            dloopcnt[i] = 0;
       52        52    2         }
       53        53    1         for (ui = Lfirst(item->it_usage); ui != (Lindex) 0;
       54        54    1                       ui = Lnext(ui,item->it_usage)) {
       55        55    2            u = (time_p) Lelem(ui);
       56        56    2            loops = u->t_bblock->b_loops;
       57        57    2            lev = Lnrelems(loops);
       58        58    2            /* set of loops in which this usage of item occurs */
       59        59    2            for (li = Lfirst(loops); li != (Lindex) 0; li=Lnext(li,loops)) {
       60        60    3               l = (loop_p) Lelem(li);
       61        61    3               sloopcnt[l->lp_id]++;
       62        62    3               dloopcnt[l->lp_id] +=
       63        63    3                  (IS_FIRM(u->t_bblock) ? loop_scale(lev) : 1);
       64        64    3            }
       65        65    2         }
       66        66    1        }
       67        67
       68        68
       69        69
       70        70             STATIC alloc_p cons_alloc(item,timespan,stat_usecount,
       71        71                      dyn_usecount,inits,wholeproc,isloop,iswholeproc)
       72        72              item_p item;
CC.C03    File=zbe$ra_allocl:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=3  
       73        73              interv_p timespan;
       74        74              short stat_usecount,dyn_usecount;
       75        75              lset inits;
       76        76              alloc_p wholeproc;
       77        77              bool isloop,iswholeproc;
       78        78             {
       79        79    1         alloc_p x;
       80        80    1
       81        81    1         x = newalloc();
       82        82    1         x->al_id = ++alloc_id;
       83        83    1         x->al_item = item;
       84        84    1         x->al_timespan = timespan;
       85        85    1         x->al_susecount = stat_usecount;
       86        86    1         x->al_dusecount = dyn_usecount;
       87        87    1         x->al_inits = inits;
       88        88    1         x->al_wholeproc = wholeproc;
       89        89    1         x->al_isloop = isloop;
       90        90    1         x->al_iswholeproc = iswholeproc;
       91        91    1          x->al_mates = (alloc_p) 0;
       92        92    1         return x;
       93        93    1        }
       94        94
       95        95
       96        96             STATIC insert_alloc(alloc,list_p)
       97        97              alloc_p alloc, *list_p;
       98        98             {
       99        99    1         alloc->al_next = *list_p;
      100       100    1         *list_p = alloc;
      101       101    1        }
      102       102
      103       103
      104       104
      105       105             #define MUST_INIT(i,b)   (i->it_type!=LOCALVAR ||contains(b->B_BEGIN,i->it_liv
                               es))
      106       106             #define MUST_UPDATE(i,b) (i->it_type==LOCALVAR &&contains(b->B_BEGIN,i->it_liv
                               es))
      107       107
CC.C03    File=zbe$ra_allocl:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=4  
      108       108             STATIC lset loop_inits(lp,item,header)
      109       109              loop_p lp;
"zbe$ra_allocl:c.:ZBC3TSI", line 109: (warning) identifier "lp" is not used
      110       110              item_p item;
      111       111              bblock_p header;
      112       112             {
      113       113    1         /* Build the set of entry points to loop lp where item
      114       114    1          * must be initialized
      115       115    1          */
      116       116    1
      117       117    1         lset s = Lempty_set();
      118       118    1         if (header != (bblock_p) 0 && MUST_INIT(item,header)) {
      119       119    2            Ladd(header,&s);
      120       120    2         }
      121       121    1         return s;
      122       122    1        }
      123       123
      124       124
      125       125
      126       126             #define IN_LOOP(b) (Lnrelems(b->b_loops) > 0)
      127       127
      128       128             STATIC bblock_p init_point(item)
      129       129              item_p item;
      130       130             {
      131       131    1         /* Find the most appropriate point to initialize any register
      132       132    1          * containing the item. We want to do the initialization as
      133       133    1          * late as possible, to allow other items to be put in the
      134       134    1          * same register, before this initialization. Yet, as we want
      135       135    1          * to do the initialization only once, it must be done in a
      136       136    1          * basic block that is a dominator of all points where the
      137       137    1          * item is used (ultimately in the first block of the procedure).
      138       138    1          * This basic block should not be part of loop.
      139       139    1          */
      140       140    1
      141       141    1         bblock_p b,dom = 0;
      142       142    1         Lindex ti;
      143       143    1         time_p t;
CC.C03    File=zbe$ra_allocl:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=5  
      144       144    1
      145       145    1         for (ti = Lfirst(item->it_usage); ti != (Lindex) 0;
      146       146    1                     ti = Lnext(ti,item->it_usage)) {
      147       147    2            t = (time_p) Lelem(ti);
      148       148    2            b = t->t_bblock;
      149       149    2            dom = (dom == (bblock_p) 0 ? b : common_dom(dom,b));
      150       150    2         }
      151       151    1         while (IN_LOOP(dom)) {
      152       152    2            /* Find a dominator of dom (possibly
      153       153    2             * dom itself) that is outside any loop.
      154       154    2             */
      155       155    2            dom = dom->b_idom;
      156       156    2         }
      157       157    1         return dom;
      158       158    1        }
      159       159
      160       160
      161       161             STATIC add_blocks(b,s,span)
      162       162              bblock_p b;
      163       163              cset *s;
      164       164              interv_p *span;
      165       165             {
      166       166    1         Lindex pi;
      167       167    1
      168       168    1         if (!Cis_elem(b->b_id,*s)) {
      169       169    2            Cadd(b->b_id,s);
      170       170    2            add_interval(b->B_BEGIN,b->B_END,span);
      171       171    2            for (pi = Lfirst(b->b_pred); pi != (Lindex) 0;
      172       172    2                  pi = Lnext(pi,b->b_pred)) {
      173       173    3               add_blocks((bblock_p) Lelem(pi),s,span);
      174       174    3            }
      175       175    2         }
      176       176    1        }
      177       177
      178       178
      179       179
      180       180             STATIC whole_lifetime(item,ini_out,span_out)
CC.C03    File=zbe$ra_allocl:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=6  
      181       181              item_p item;
      182       182              bblock_p *ini_out;
      183       183              interv_p *span_out;
      184       184             {
      185       185    1         /* Find the initialization point and the time_span of the item, if
      186       186    1          * we put the item in a register during all its uses.
      187       187    1          */
      188       188    1
      189       189    1         bblock_p b, ini = init_point(item);
      190       190    1         cset s = Cempty_set(blength);
      191       191    1         Lindex ti;
      192       192    1         time_p t;
      193       193    1         interv_p span = (interv_p) 0;
      194       194    1
      195       195    1         for (ti = Lfirst(item->it_usage); ti != (Lindex) 0;
      196       196    1                     ti = Lnext(ti,item->it_usage)) {
      197       197    2            t = (time_p) Lelem(ti);
      198       198    2            b = t->t_bblock;
      199       199    2            add_blocks(b,&s,&span);
      200       200    2         }
      201       201    1         if (!Cis_elem(ini->b_id,s)) {
      202       202    2            add_interval(ini->B_BEGIN,ini->B_END,&span);
      203       203    2         }
      204       204    1         Cdeleteset(s);
      205       205    1         *ini_out = ini;
      206       206    1         *span_out = span;
      207       207    1        }
      208       208
      209       209
      210       210
      211       211
      212       212             STATIC lset proc_inits(p,item,ini)
      213       213              proc_p p;
"zbe$ra_allocl:c.:ZBC3TSI", line 213: (warning) identifier "p" is not used
      214       214              item_p item;
      215       215              bblock_p ini;
      216       216             {
CC.C03    File=zbe$ra_allocl:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=7  
      217       217    1         lset s = Lempty_set();
      218       218    1
      219       219    1         if (item->it_type != LOCALVAR || item->i_t.it_off >= 0) {
      220       220    2            /* only local variables need not be initialized */
      221       221    2            Ladd(ini, &s);
      222       222    2         }
      223       223    1         return s;
      224       224    1        }
      225       225
      226       226
      227       227             STATIC bool updates_needed(lp,item)
      228       228              loop_p lp;
      229       229              item_p item;
      230       230             {
      231       231    1         /* See if the value of item is live after the loop has
      232       232    1          * been exited, i.e. must the item be updated after the loop?
      233       233    1          */
      234       234    1
      235       235    1         Lindex bi,si;
      236       236    1         bool ra_in_block();
      237       237    1         bblock_p b,s;
      238       238    1
      239       239    1         for (bi = Lfirst(lp->LP_BLOCKS); bi != (Lindex) 0;
      240       240    1                     bi = Lnext(bi,lp->LP_BLOCKS)) {
      241       241    2            b = (bblock_p) Lelem(bi);
      242       242    2            for (si = Lfirst(b->b_succ); si != (Lindex) 0;
      243       243    2                     si = Lnext(si,b->b_succ)) {
      244       244    3               s = (bblock_p) Lelem(si);
      245       245    3               if (!Lis_elem(s,lp->LP_BLOCKS) && (MUST_UPDATE(item,s) ||
      246       246    3                   ra_in_block(item->i_t.it_off, s)) ) {
      247       247    4                  return TRUE;
      248       248    4               }
      249       249    3            }
      250       250    2         }
      251       251    1         return FALSE;
      252       252    1        }
      253       253
CC.C03    File=zbe$ra_allocl:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=8  
      254       254
      255       255
      256       256             STATIC short countuses(usage,b)
      257       257              lset usage;
      258       258              bblock_p b;
      259       259             {
      260       260    1         short cnt = 0;
      261       261    1         Lindex ti;
      262       262    1         time_p t;
      263       263    1
      264       264    1         for (ti = Lfirst(usage); ti != (Lindex) 0; ti = Lnext(ti,usage)) {
      265       265    2            t = (time_p) Lelem(ti);
      266       266    2            if (t->t_bblock == b) cnt++;
      267       267    2         }
      268       268    1         return cnt;
      269       269    1        }
      270       270
      271       271
      272       272
      273       273             STATIC allocs_of_item(p,item,loops,sloopcnt,dloopcnt,alloc_list_p)
      274       274              proc_p p;
      275       275              item_p item;
      276       276              lset loops;
      277       277              short *sloopcnt,*dloopcnt; /* dynamic arrays */
      278       278              alloc_p *alloc_list_p;
      279       279             {
      280       280    1         register Lindex li;
      281       281    1         loop_p lp;
      282       282    1         bblock_p header,ini;
      283       283    1         short susecount,dusecount;
      284       284    1         interv_p lt;
      285       285    1         alloc_p wholeproc;
      286       286    1
      287       287    1         /* The whole procedure may be used as timespan.
      288       288    1            The dynamic usecount of a procedure is taken to be the same
      289       289    1            as its static usecount; this number is not very important, as
      290       290    1            time-optimziation chooses loops first.
CC.C03    File=zbe$ra_allocl:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=9  
      291       291    1          */
      292       292    1         whole_lifetime(item,&ini,&lt);
      293       293    1         wholeproc = cons_alloc(item,lt,Lnrelems(item->it_usage),
      294       294    1                      Lnrelems(item->it_usage), proc_inits(p,item,ini),
      295       295    1                      (alloc_p) 0,FALSE,TRUE);
      296       296    1         insert_alloc(wholeproc, alloc_list_p);
      297       297    1         for (li = Lfirst(loops); li != (Lindex) 0; li = Lnext(li,loops)) {
      298       298    2            lp = (loop_p) Lelem(li);
      299       299    2            if (sloopcnt[lp->lp_id] != 0 && !updates_needed(lp,item)) {
      300       300    3               /* Item is used within loop, so consider loop
      301       301    3                * as a timespan during which item may be put in
      302       302    3                * a register.
      303       303    3                */
      304       304    3               if ((header = lp->LP_HEADER) == (bblock_p) 0 &&
      305       305    3                  MUST_INIT(item,lp->lp_entry)) continue;
      306       306    3               lt = loop_lifetime(lp);
      307       307    3               susecount = sloopcnt[lp->lp_id];
      308       308    3               dusecount = dloopcnt[lp->lp_id];
      309       309    3               if (MUST_INIT(item,lp->lp_entry)) {
      310       310    4                      /* include header block in timespan */
      311       311    4                      add_interval(header->B_BEGIN,header->B_END,&lt);
      312       312    4                      susecount += countuses(item->it_usage,header);
      313       313    4               } else {
      314       314    4                  header = (bblock_p) 0;
      315       315    4               }
      316       316    3               insert_alloc(cons_alloc(item,lt,susecount,dusecount,
      317       317    3                       loop_inits(lp,item,header),wholeproc,
      318       318    3                       TRUE,FALSE),
      319       319    3                       alloc_list_p);
      320       320    3            }
      321       321    2         }
      322       322    1        }
      323       323
      324       324
      325       325
      326       326             alloc_p build_alloc_list(p,nrloops,itemlist)
      327       327              proc_p p;
CC.C03    File=zbe$ra_allocl:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=10 
      328       328              short nrloops;
      329       329              item_p itemlist;
      330       330             {
      331       331    1         short *sloopcnt,*dloopcnt; /* dynamic arrays */
      332       332    1         register item_p item;
      333       333    1         alloc_p alloc_list = (alloc_p) 0;
      334       334    1
      335       335    1         sloopcnt = (short *) newtable(nrloops);
      336       336    1         dloopcnt = (short *) newtable(nrloops);
      337       337    1         for (item = itemlist; item != (item_p) 0; item = item->it_next) {
      338       338    2            count_usage(p,item,nrloops,sloopcnt,dloopcnt);
      339       339    2            allocs_of_item(p,item,p->p_loops,sloopcnt,dloopcnt,
      340       340    2                  &alloc_list);
      341       341    2         }
      342       342    1         oldtable(sloopcnt,nrloops);
      343       343    1         oldtable(dloopcnt,nrloops);
      344       344    1         return alloc_list;
      345       345    1        }
      346       346
      347       347
      348       348
      349       349             build_rivals_graph(alloclist)
      350       350              alloc_p alloclist;
      351       351             {
      352       352    1         /* See which allocations in the list are rivals of each other,
      353       353    1          * i.e. there is some point of time, falling in both
      354       354    1          * timespans, at which the items of both allocations are live.
      355       355    1          * Allocations with the same item (but different timespans) are
      356       356    1          * not considered to be rivals.
      357       357    1          * We use an auxiliary data structure "busy" for each allocation,
      358       358    1          * indicating when the item is live during the timespan of the
      359       359    1          * allocation.
      360       360    1          */
      361       361    1
      362       362    1         register alloc_p alloc,x;
      363       363    1
      364       364    1         for (alloc = alloclist; alloc != (alloc_p) 0; alloc = alloc->al_next) {
CC.C03    File=zbe$ra_allocl:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=11 
      365       365    2            alloc->al_rivals = Cempty_set(alloc_id);
      366       366    2         }
      367       367    1         for (alloc = alloclist; alloc != (alloc_p) 0; alloc = alloc->al_next) {
      368       368    2            alloc->al_busy =
      369       369    2               (alloc->al_item->it_type == LOCALVAR ?
      370       370    2               intersect(alloc->al_timespan,alloc->al_item->it_lives) :
      371       371    2               copy_timespan(alloc->al_timespan));
      372       372    2            for (x = alloclist; x != alloc; x = x->al_next) {
      373       373    3               if (x->al_item != alloc->al_item &&
      374       374    3                   not_disjoint(alloc->al_busy,x->al_busy)) {
      375       375    4                  Cadd(x->al_id,&alloc->al_rivals);
      376       376    4                  Cadd(alloc->al_id,&x->al_rivals);
      377       377    4                  if (alloc->al_regtype == x->al_regtype) {
      378       378    5                     alloc->al_cntrivals++;
      379       379    5                     x->al_cntrivals++;
      380       380    5                  }
      381       381    4               }
      382       382    3            }
      383       383    2         }
      384       384    1        }
      385       385
      386       386             /*i*
      387       387                   name: ra_in_block
      388       388                   purpose: This routine checks to se if the passed local addess
      389       389                   appears in the passed block. If it does, do not change the
      390       390                   appearances of it in the previous looping structure to
      391       391                   register variables (different local adresses...).
      392       392             */
      393       393             ra_in_block (int loc_offset,bblock_p b)
      394       394             {
"zbe$ra_allocl:c.:ZBC3TSI", line 394: (warning) function ra_in_block called before prototype definition
      395       395    1        line_p l;
      396       396    1
      397       397    1              for (l=b->b_start; l != (line_p) 0; l = l->l_next) {
      398       398    2                switch (INSTR(l)) {
      399       399    3                  case op_stl:
      400       400    3                  case op_lol:
CC.C03    File=zbe$ra_allocl:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=12 
      401       401    3                    if ( loc_offset == l->l_a.la_offset ) return TRUE;
      402       402    3                }
      403       403    2              }   /* end of the for loop on instructions in the block. */
      404       404    1              return FALSE;
      405       405    1        }     /* end of the function ra_in_block. */
---  Include file information  ---

   zbe$types:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$def:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$cset:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$map:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   em_reg:h.:ZBC3TOU. is referenced
   zbe$ra:h.:ZBC3TOU. is referenced
   zbe$ra_aux:h.:ZBC3TOU. is referenced
   zbe$ra_items:h.:ZBC3TOU. is referenced
   zbe$ra_allocl:h.:ZBC3TOU. is referenced
   zbe$ra_interv:h.:ZBC3TOU. is referenced

4 warnings were detected in the file zbe$ra_allocl:c.:ZBC3TSI
