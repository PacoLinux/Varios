
PL6.E3A0      #001=VMEMSCRUB File=xb_valloc:6.:XBC3TSI                           FRI 01/06/95 11:19 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        vmemscrub : proc;
        7        7
        8        8        %include CP_6;
        9     5568        %include CP_6_SUBS;
       10     6108        %include xb_vheap_i6;
       11     6181        %include xb_heap_i6;
       12     6256
       13     6257        %HEAP_VIRT_SYMREF;
       14     6277
       15     6278    1   dcl   Tail_p   ptr;
       16     6279    1   dcl   p        ptr;
       17     6280    1   dcl   i        sbin;
       18     6281    1   dcl   nbytes   sbin;
       19     6282
       20     6283    1   dcl   XBI$VMALLOC       entry(2);
       21     6284
       22     6285    1   IF (XBI$VIRT_Allocation_Heap.Initialized ~= '1'B) then
       23     6286    1      RETURN;
       24     6287    2   DO INHIBIT;
       25     6288    2      p = XBI$VIRT_ASINFO$->ASINFO.ASPTR$(0);
       26     6289    2      p->Head.Flags = '0'B;
       27     6290    2      p->Head.Flags.Stamp = 88;
       28     6291    2      p->Head.size   = 1024 * 256;
       29     6292    2      Tail_p = PINCRW (p, p->Head.Size - SIZEW (tail));
       30     6293    2      Tail_p->Tail.Up_Link = p;
       31     6294    2      XBI$VIRT_AV = p;
       32     6295    2      p->Head.Right_Link = p;
       33     6296    2      p->Head.Left_Link  = p;
       34     6297    2   END;
       35     6298
       36     6299    2   do i = 1 to XBI$VIRT_ASINFO$->ASINFO.CURSEGS-1;
       37     6300    3      DO INHIBIT;
PL6.E3A0      #001=VMEMSCRUB File=xb_valloc:6.:XBC3TSI                           FRI 01/06/95 11:19 Page:2    
       38     6301    3         p = XBI$VIRT_ASINFO$->ASINFO.ASPTR$(I);
       39     6302    3         p->Head.Flags = '0'B;
       40     6303    3         p->Head.Flags.Stamp = 88;
       41     6304    3         p->Head.size   = 1024 * 256;
       42     6305    3         Tail_p = PINCRW (p, p->Head.Size - SIZEW (tail));
       43     6306    3         Tail_p->Tail.Up_Link = p;
       44     6307    3         XBI$VIRT_Last_AV = PINCRW (Tail_p, SIZEW (tail));
       45     6308    3         p->Head.Left_Link = XBI$VIRT_AV;
       46     6309    3         p->Head.Right_Link = XBI$VIRT_AV->Head.Right_Link;
       47     6310    3         p->Head.Right_Link->Head.Left_Link = p;
       48     6311    3         XBI$VIRT_AV->Head.Right_Link = p;
       49     6312    3      END;
       50     6313    2   END;
       51     6314
       52     6315        /* Put the info about the argument pointers back on the virtual heap*/
       53     6316
       54     6317    1   nbytes = (XBI$VIRT_ASINFO$->ASINFO.MAXSEGS + 2) * 4;
       55     6318    1   call XBI$VMALLOC (nbytes, p);
       56     6319    1   p->ASINFO.MAXSEGS = XBI$VIRT_ASINFO$->ASINFO.MAXSEGS;
       57     6320    1   p->ASINFO.CURSEGS = XBI$VIRT_ASINFO$->ASINFO.CURSEGS;
       58     6321    2   do i = 0 to XBI$VIRT_ASINFO$->ASINFO.CURSEGS-1;
       59     6322    2      p->ASINFO.ASPTR$(I) = XBI$VIRT_ASINFO$->ASINFO.ASPTR$(I);
       60     6323    2   end;
       61     6324    1   XBI$VIRT_ASINFO$ = p;
       62     6325    1   end vmemscrub;
       63     6326        %EOD;

PL6.E3A0      #001=VMEMSCRUB File=xb_valloc:6.:XBC3TSI                           FRI 01/06/95 11:19 Page:3    
--  Include file information  --

   xb_heap_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_vheap_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMEMSCRUB.

   Procedure VMEMSCRUB requires 113 words for executable code.
   Procedure VMEMSCRUB requires 10 words of local(AUTO) storage.

PL6.E3A0      #001=VMEMSCRUB File=xb_valloc:6.:XBC3TSI                           FRI 01/06/95 11:19 Page:4    
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VMEMSCRUB File=xb_valloc:6.:XBC3TSI                           FRI 01/06/95 11:19 Page:5    
          MINI XREF LISTING

ASINFO.ASPTR$
      6176**DCL      6288>>ASSIGN   6301>>ASSIGN   6322<<ASSIGN   6322>>ASSIGN
ASINFO.CURSEGS
      6175**DCL      6299>>DOINDEX  6320<<ASSIGN   6320>>ASSIGN   6321>>DOINDEX
ASINFO.MAXSEGS
      6174**DCL      6317>>ASSIGN   6319<<ASSIGN   6319>>ASSIGN
HEAD.FLAGS
      6238**DCL      6289<<ASSIGN   6302<<ASSIGN
HEAD.FLAGS.STAMP
      6245**DCL      6290<<ASSIGN   6303<<ASSIGN
HEAD.LEFT_LINK
      6235**DCL      6296<<ASSIGN   6308<<ASSIGN   6310<<ASSIGN
HEAD.RIGHT_LINK
      6236**DCL      6295<<ASSIGN   6309<<ASSIGN   6309>>ASSIGN   6310>>ASSIGN   6311<<ASSIGN
HEAD.SIZE
      6237**DCL      6291<<ASSIGN   6292>>ASSIGN   6304<<ASSIGN   6305>>ASSIGN
I
      6280**DCL      6299<<DOINDEX  6301>>ASSIGN   6321<<DOINDEX  6322>>ASSIGN   6322>>ASSIGN
NBYTES
      6281**DCL      6317<<ASSIGN   6318<>CALL
P
      6279**DCL      6288<<ASSIGN   6289>>ASSIGN   6290>>ASSIGN   6291>>ASSIGN   6292>>ASSIGN   6292>>ASSIGN
      6293>>ASSIGN   6294>>ASSIGN   6295>>ASSIGN   6295>>ASSIGN   6296>>ASSIGN   6296>>ASSIGN   6301<<ASSIGN
      6302>>ASSIGN   6303>>ASSIGN   6304>>ASSIGN   6305>>ASSIGN   6305>>ASSIGN   6306>>ASSIGN   6308>>ASSIGN
      6309>>ASSIGN   6310>>ASSIGN   6310>>ASSIGN   6311>>ASSIGN   6318<>CALL     6319>>ASSIGN   6320>>ASSIGN
      6322>>ASSIGN   6324>>ASSIGN
TAIL
      6247**DCL      6292--ASSIGN   6305--ASSIGN   6307--ASSIGN
TAIL.UP_LINK
      6248**DCL      6293<<ASSIGN   6306<<ASSIGN
TAIL_P
      6278**DCL      6292<<ASSIGN   6293>>ASSIGN   6305<<ASSIGN   6306>>ASSIGN   6307>>ASSIGN
PL6.E3A0      #001=VMEMSCRUB File=xb_valloc:6.:XBC3TSI                           FRI 01/06/95 11:19 Page:6    
XBI$VIRT_ALLOCATION_HEAP.HEAP_.BASE$
      6271**DCL      6272--REDEF
XBI$VIRT_ALLOCATION_HEAP.INITIALIZED
      6275**DCL      6285>>IF
XBI$VIRT_ASINFO$
      6263**DCL      6288>>ASSIGN   6299>>DOINDEX  6301>>ASSIGN   6317>>ASSIGN   6319>>ASSIGN   6320>>ASSIGN
      6321>>DOINDEX  6322>>ASSIGN   6324<<ASSIGN
XBI$VIRT_AV
      6264**DCL      6294<<ASSIGN   6308>>ASSIGN   6309>>ASSIGN   6311>>ASSIGN
XBI$VIRT_LAST_ASPTR$
      6259**DCL      6260--REDEF
XBI$VIRT_LAST_AV
      6266**DCL      6307<<ASSIGN
XBI$VMALLOC
      6283**DCL-ENT  6318--CALL

PL6.E3A0      #002=VMEMINIT File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:19 Page:7    
       64        1        /*T***********************************************************/
       65        2        /*T*                                                         */
       66        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
       67        4        /*T*                                                         */
       68        5        /*T***********************************************************/
       69        6        vmeminit :  proc (vspace_p, vcase_p, vbacking_p);
       70        7
       71        8    1   dcl   vspace_p   sbin;
       72        9    1   dcl   vcase_p    sbin;
       73       10    1   dcl   vbacking_p sbin;
       74       11
       75       12        %include   CP_6;
       76     5572        %include   CP_6_SUBS;
       77     6112        %include   B_SEGIDS_C;
       78     6651        %include   B_ERRORS_C;
       79     7777        %include   xb_vheap_i6;
       80     7850        %include   xb_heap_i6;
       81     7925        %include   xb_error_numbers_i6;
       82     7972
       83     7973        %FPT_OPEN(    FPTN     =  XBI_VF_OPEN_CONST,
       84     7974                      NAME     =  XBI_VF_NAME,
       85     7975                      ORG      =  KEYED,
       86     7976                      DISP     =  SCRATCH,
       87     7977                      ACS      =  DIRECT,
       88     7978                      ASN      =  FILE,
       89     7979                      FUN      =  CREATE,
       90     7980                      DCB      =  XB$VIRTUAL,
       91     7981                      SCRUB    =  YES,
       92     7982                      VIRTUAL  =  XBI_VIRTUAL_CONST,
       93     7983                      STCLASS  =  CONSTANT);
       94     8092
       95     8093        %FPT_OPEN(    FPTN     =  XBI_VF_OPEN,
       96     8094                      STCLASS  =  "");
       97     8203
       98     8204        %FPT_GDDL(    FPTN     =  XBI_VF_GDDL_CONST,
       99     8205                      STCLASS  =  CONSTANT);
      100     8218
PL6.E3A0      #002=VMEMINIT File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:19 Page:8    
      101     8219        %FPT_GDDL(    FPTN     =  XBI_VF_GDDL,
      102     8220                      RESULTS  =  XBI_GDDL,
      103     8221                      STCLASS  =  "");
      104     8234
      105     8235
      106     8236        %VLP_VIRTUAL( FPTN     =  XBI_VIRTUAL_CONST,
      107     8237                      INITIALIZE= NO,
      108     8238                      PHYSICAL =  50,
      109     8239                      SEGNUM   =  VS1,
      110     8240                      SEGSIZE  =  1048576,
      111     8241                      STCLASS  =  CONSTANT);
      112     8261
      113     8262        %VLP_VIRTUAL( FPTN     =  XBI_VIRTUAL,
      114     8263                      STCLASS  =  "");
      115     8283
      116     8284        %VLP_NAME(    FPTN     =  XBI_VF_NAME,
      117     8285                      NAME     =  '*tmpC:vf',
      118     8286                      STCLASS  =  CONSTANT);
      119     8313
      120     8314        %VLP_GDDL(    FPTN     =  XBI_GDDL,
      121     8315                      STCLASS  ="");
      122     8329
      123     8330           %VLP_ERRCODE (FPTN=XB$ERR$VIRTUAL_ALREADY_OPEN, STCLASS="CONSTANT SYMDEF",
      124     8331                         FCG='XB', MID='I', ERR#="E$VIRTUAL_ALREADY_OPEN", SEV=7);
      125     8376           %VLP_ERRCODE (FPTN=XB$ERR$VIRTUAL_BAD_PERCENT, STCLASS="CONSTANT SYMDEF",
      126     8377                         FCG='XB', MID='I', ERR#="E$VIRTUAL_BAD_PERCENT", SEV=7);
      127     8422           %VLP_ERRCODE (FPTN=XB$ERR$VIRTUAL_BAD_CASE, STCLASS="CONSTANT SYMDEF",
      128     8423                         FCG='XB', MID='I', ERR#="E$VIRTUAL_BAD_CASE", SEV=7);
      129     8468
      130     8469        %HEAP_VIRT_SYMDEF;
      131     8489
      132     8490    1   dcl  XB$VIRTUAL        dcb;
      133     8491    1   dcl  Tail_p            ptr;
      134     8492    1   dcl  nbytes            sbin;
      135     8493    1   dcl  string            char(80)    based;
      136     8494    1   dcl  vspace            sbin;
      137     8495    1   dcl  vspace_as_ptr     REDEF    vspace   PTR;
PL6.E3A0      #002=VMEMINIT File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:19 Page:9    
      138     8496    1   dcl  vbacking          sbin;
      139     8497    1   dcl  vbacking_as_ptr   REDEF    vbacking PTR;
      140     8498    1   dcl  vcase             sbin;
      141     8499    1   dcl  vcase_as_ptr      REDEF    vcase    PTR;
      142     8500
      143     8501    1   dcl   XBI_SET_ERRNO              ENTRY(1);
      144     8502    1   dcl   XB_RETURN_ORDINAL_RESULT   ENTRY(1);
      145     8503    1   dcl   XBI$VFRAME                 ENTRY(3);
      146     8504    1   dcl   XBI$VMALLOC                ENTRY(2);
      147     8505
      148     8506    1        vspace_as_ptr = ADDR (vspace_p);
      149     8507    1        vbacking_as_ptr = ADDR (vbacking_p);
      150     8508    1        vcase_as_ptr = ADDR (vcase_p);
      151     8509    2        if (XBI$VIRT_Allocation_Heap.Initialized = '1'B) then do;
      152     8510           /*E* ERROR: XBI-E$VIRTUAL_ALREADY_OPEN-C
      153     8511                MESSAGE: The virtual memory heap has already been opened.  This
      154     8512           one has been ignored.
      155     8513           */
      156     8514    2           CALL XBI_SET_ERRNO (XB$ERR$VIRTUAL_ALREADY_OPEN);
      157     8515    2           CALL XB_RETURN_ORDINAL_RESULT (1);
      158     8516    2        end;
      159     8517
      160     8518    1        XBI_VF_OPEN       =  XBI_VF_OPEN_CONST;
      161     8519    1        XBI_VIRTUAL       =  XBI_VIRTUAL_CONST;
      162     8520    1        XBI_VF_OPEN.VIRTUAL_ = vector(XBI_VIRTUAL);
      163     8521
      164     8522    2        DO CASE (vcase);
      165     8523    2           case (1);
      166     8524    2              XBI_VIRTUAL.PHYSICAL# = vbacking;
      167     8525
      168     8526    2           case (2, 3);
      169     8527    2              XBI_VF_GDDL = XBI_VF_GDDL_CONST;
      170     8528    2              XBI_VF_GDDL.RESULTS_ = VECTOR (XBI_GDDL);
      171     8529    2              CALL M$GDDL (XBI_VF_GDDL) ALTRET (error);
      172     8530    2              if (vcase = 2) then
      173     8531    2                 XBI_VIRTUAL.PHYSICAL# = XBI_GDDL.AVAIL_PGS# + vbacking;
      174     8532    3              else do;
PL6.E3A0      #002=VMEMINIT File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:19 Page:10   
      175     8533    4                 if ((vbacking <= 0) or (vbacking >100)) then do;
      176     8534                 /*E* ERROR: XBI-E$VIRTUAL_BAD_PERCENT-C
      177     8535                      MESSAGE: A bad percentage value has been passed to vmeminit.
      178     8536                 The acceptable values are between the values of 0 and 100.
      179     8537                 */
      180     8538    4                    CALL XBI_SET_ERRNO (XB$ERR$VIRTUAL_BAD_PERCENT);
      181     8539    4                    CALL XB_RETURN_ORDINAL_RESULT (2);
      182     8540    4                 end;
      183     8541    3                 XBI_VIRTUAL.PHYSICAL# = (XBI_GDDL.AVAIL_PGS# * vbacking) / 100;
      184     8542    3              end;
      185     8543
      186     8544    2           case (else);
      187     8545              /*E* ERROR: XBI-E$VIRTUAL_BAD_CASE-C
      188     8546                   MESSAGE: A bad case value has been passed to vmeminit.  The
      189     8547              acceptable values are 1, 2, and 3.
      190     8548              */
      191     8549    2              CALL XBI_SET_ERRNO (XB$ERR$VIRTUAL_BAD_CASE);
      192     8550    2              CALL XB_RETURN_ORDINAL_RESULT (3);
      193     8551    2        end; /* case statement */
      194     8552    1        if (XBI_VIRTUAL.PHYSICAL# < 3) then
      195     8553    1           XBI_VIRTUAL.PHYSICAL# = 3;
      196     8554
      197     8555    1        XBI_VIRTUAL.SEGSIZE# = ((vspace + 255) / 256) * 256 * 1024;
      198     8556
      199     8557    1        CALL M$OPEN(XBI_VF_OPEN) altret (error);
      200     8558
      201     8559    1        XBI$VIRT_Allocation_Heap.Initialized = '1'B;
      202     8560    1        XBI$VIRT_Allocation_Heap.Heap_.Base$ = XBI_VIRTUAL.PTR$;
      203     8561    1        XBI$VIRT_Allocation_Heap.Heap_.Size# = (vspace + 255) / 256;
      204     8562
      205     8563        /* Now it is time to initialize the free list for the virual data
      206     8564           segment.                                                         */
      207     8565
      208     8566    1        CALL XBI$VFRAME (XBI$VIRT_Allocation_Heap.Heap_.Base$->string,
      209     8567    1                         XBI$VIRT_ASCUR, XBI$VIRT_AV);
      210     8568    1        XBI$VIRT_LAST_ASPTR$ = XBI$VIRT_AV;
      211     8569    1        XBI$VIRT_ASCUR = XBI$VIRT_ASCUR + 1;
PL6.E3A0      #002=VMEMINIT File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:19 Page:11   
      212     8570    1        XBI$VIRT_First_AV = XBI$VIRT_AV;
      213     8571    1        XBI$VIRT_AV->Head.Left_Link = XBI$VIRT_AV;
      214     8572    1        XBI$VIRT_AV->Head.Right_Link = XBI$VIRT_AV;
      215     8573    1        XBI$VIRT_AV->Head.Size       = 256 * 1024;
      216     8574
      217     8575    1        Tail_p = PINCRW (XBI$VIRT_AV, XBI$VIRT_AV->Head.Size - SIZEW (Tail));
      218     8576    1        Tail_p->Tail.Up_Link = XBI$VIRT_AV;
      219     8577
      220     8578    1        XBI$VIRT_Last_AV     = PINCRW (Tail_P, SIZEW (Tail));
      221     8579
      222     8580        /* Initialize the area in virtual memory that contains the info about
      223     8581           the AS pointers that have been allocated.  Used for quick reclaim
      224     8582           of virtual memory                                                */
      225     8583
      226     8584    1        nbytes = ((vspace + 255) / 256 + 2) * 4;
      227     8585    1        CALL XBI$VMALLOC (nbytes, XBI$VIRT_ASINFO$);
      228     8586    1        if (XBI$VIRT_ASINFO$ = addr(NIL)) then goto error;
      229     8587    1        XBI$VIRT_ASINFO$->ASINFO.MAXSEGS = XBI$VIRT_Allocation_Heap.Heap_.Size#;
      230     8588    1        XBI$VIRT_ASINFO$->ASINFO.CURSEGS = XBI$VIRT_ASCUR;
      231     8589    1        XBI$VIRT_ASINFO$->ASINFO.ASPTR$(XBI$VIRT_ASCUR-1) = XBI$VIRT_LAST_ASPTR$;
      232     8590
      233     8591    1        CALL XB_RETURN_ORDINAL_RESULT (0);
      234     8592
      235     8593    1   error:
      236     8594    1        CALL XBI_SET_ERRNO;
      237     8595    1        CALL XB_RETURN_ORDINAL_RESULT (4);
      238     8596
      239     8597    1   end vmeminit;
      240     8598        %EOD;

PL6.E3A0      #002=VMEMINIT File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:19 Page:12   
--  Include file information  --

   xb_error_numbers_i6.:XBC3TOU  is referenced.
   xb_heap_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_vheap_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIB_E04  is referenced.
   B_SEGIDS_C.:LIB_E04  is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMEMINIT.

   Procedure VMEMINIT requires 180 words for executable code.
   Procedure VMEMINIT requires 92 words of local(AUTO) storage.

PL6.E3A0      #002=VMEMINIT File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:19 Page:13   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VMEMINIT File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:19 Page:14   
          MINI XREF LISTING

ASINFO.ASPTR$
      7845**DCL      8589<<ASSIGN
ASINFO.CURSEGS
      7844**DCL      8588<<ASSIGN
ASINFO.MAXSEGS
      7843**DCL      8587<<ASSIGN
ERROR
      8594**LABEL    8529--CALLALT  8557--CALLALT  8586--GOTO
HEAD.LEFT_LINK
      7904**DCL      8571<<ASSIGN
HEAD.RIGHT_LINK
      7905**DCL      8572<<ASSIGN
HEAD.SIZE
      7906**DCL      8573<<ASSIGN   8575>>ASSIGN
M$GDDL
      5537**DCL-ENT  8529--CALL
M$OPEN
      5500**DCL-ENT  8557--CALL
NBYTES
      8492**DCL      8584<<ASSIGN   8585<>CALL
STRING
      8493**DCL      8566<>CALL
TAIL
      7916**DCL      8575--ASSIGN   8578--ASSIGN
TAIL.UP_LINK
      7917**DCL      8576<<ASSIGN
TAIL_P
      8491**DCL      8575<<ASSIGN   8576>>ASSIGN   8578>>ASSIGN
VBACKING
      8496**DCL      8497--REDEF    8524>>ASSIGN   8531>>ASSIGN   8533>>IF       8533>>IF       8541>>ASSIGN
VBACKING_AS_PTR
      8497**DCL      8507<<ASSIGN
PL6.E3A0      #002=VMEMINIT File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:19 Page:15   
VBACKING_P
        10**DCL         6--PROC     8507--ASSIGN
VCASE
      8498**DCL      8499--REDEF    8522>>DOCASE   8530>>IF
VCASE_AS_PTR
      8499**DCL      8508<<ASSIGN
VCASE_P
         9**DCL         6--PROC     8508--ASSIGN
VSPACE
      8494**DCL      8495--REDEF    8555>>ASSIGN   8561>>ASSIGN   8584>>ASSIGN
VSPACE_AS_PTR
      8495**DCL      8506<<ASSIGN
VSPACE_P
         8**DCL         6--PROC     8506--ASSIGN
XB$ERR$VIRTUAL_ALREADY_OPEN
      8343**DCL      8514<>CALL
XB$ERR$VIRTUAL_BAD_CASE
      8435**DCL      8549<>CALL
XB$ERR$VIRTUAL_BAD_PERCENT
      8389**DCL      8538<>CALL
XBI$VFRAME
      8503**DCL-ENT  8566--CALL
XBI$VIRT_ALLOCATION_HEAP.HEAP_.BASE$
      8483**DCL      8484--REDEF    8560<<ASSIGN   8566>>CALL
XBI$VIRT_ALLOCATION_HEAP.HEAP_.SIZE#
      8481**DCL      8561<<ASSIGN   8587>>ASSIGN
XBI$VIRT_ALLOCATION_HEAP.INITIALIZED
      8487**DCL      8509>>IF       8559<<ASSIGN
XBI$VIRT_ASCUR
      8470**DCL      8566<>CALL     8569<<ASSIGN   8569>>ASSIGN   8588>>ASSIGN   8589>>ASSIGN
XBI$VIRT_ASINFO$
      8475**DCL      8585<>CALL     8586>>IF       8587>>ASSIGN   8588>>ASSIGN   8589>>ASSIGN
XBI$VIRT_AV
      8476**DCL      8566<>CALL     8568>>ASSIGN   8570>>ASSIGN   8571>>ASSIGN   8571>>ASSIGN   8572>>ASSIGN
      8572>>ASSIGN   8573>>ASSIGN   8575>>ASSIGN   8575>>ASSIGN   8576>>ASSIGN
XBI$VIRT_FIRST_AV
PL6.E3A0      #002=VMEMINIT File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:19 Page:16   
      8477**DCL      8570<<ASSIGN
XBI$VIRT_LAST_ASPTR$
      8471**DCL      8472--REDEF    8568<<ASSIGN   8589>>ASSIGN
XBI$VIRT_LAST_AV
      8478**DCL      8578<<ASSIGN
XBI$VMALLOC
      8504**DCL-ENT  8585--CALL
XBI_GDDL
      8326**DCL      8528--ASSIGN
XBI_GDDL.AVAIL_PGS#
      8327**DCL      8531>>ASSIGN   8541>>ASSIGN
XBI_SET_ERRNO
      8501**DCL-ENT  8514--CALL     8538--CALL     8549--CALL     8594--CALL
XBI_VF_GDDL
      8232**DCL      8527<<ASSIGN   8529<>CALL
XBI_VF_GDDL.RESULTS_
      8232**DCL      8528<<ASSIGN
XBI_VF_GDDL_CONST
      8216**DCL      8527>>ASSIGN
XBI_VF_NAME
      8311**DCL      8049--DCLINIT
XBI_VF_OPEN
      8159**DCL      8518<<ASSIGN   8557<>CALL
XBI_VF_OPEN.ACSVEH_
      8161**DCL      8162--REDEF
XBI_VF_OPEN.ALTKEYS_
      8167**DCL      8168--REDEF    8168--REDEF
XBI_VF_OPEN.HDR_
      8166**DCL      8167--REDEF
XBI_VF_OPEN.TAB_
      8165**DCL      8166--REDEF
XBI_VF_OPEN.UHL_
      8159**DCL      8160--REDEF    8160--REDEF
XBI_VF_OPEN.V.FSN#
      8199**DCL      8199--REDEF    8199--REDEF
XBI_VF_OPEN.VIRTUAL_
PL6.E3A0      #002=VMEMINIT File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:19 Page:17   
      8160**DCL      8520<<ASSIGN
XBI_VF_OPEN.WSN_
      8165**DCL      8165--REDEF
XBI_VF_OPEN_CONST
      8048**DCL      8518>>ASSIGN
XBI_VF_OPEN_CONST.ACSVEH_
      8050**DCL      8051--REDEF
XBI_VF_OPEN_CONST.ALTKEYS_
      8056**DCL      8057--REDEF    8057--REDEF
XBI_VF_OPEN_CONST.HDR_
      8055**DCL      8056--REDEF
XBI_VF_OPEN_CONST.TAB_
      8054**DCL      8055--REDEF
XBI_VF_OPEN_CONST.UHL_
      8048**DCL      8049--REDEF    8049--REDEF
XBI_VF_OPEN_CONST.V
      8057**DCL      8048--DCLINIT
XBI_VF_OPEN_CONST.V.FSN#
      8088**DCL      8088--REDEF    8088--REDEF
XBI_VF_OPEN_CONST.WSN_
      8054**DCL      8054--REDEF
XBI_VIRTUAL
      8274**DCL      8519<<ASSIGN   8520--ASSIGN
XBI_VIRTUAL.PHYSICAL#
      8277**DCL      8524<<ASSIGN   8531<<ASSIGN   8541<<ASSIGN   8552>>IF       8553<<ASSIGN
XBI_VIRTUAL.PTR$
      8278**DCL      8560>>ASSIGN
XBI_VIRTUAL.SEGSIZE#
      8276**DCL      8555<<ASSIGN
XBI_VIRTUAL_CONST
      8252**DCL      8049--DCLINIT  8519>>ASSIGN
XB_RETURN_ORDINAL_RESULT
      8502**DCL-ENT  8515--CALL     8539--CALL     8550--CALL     8591--CALL     8595--CALL

PL6.E3A0      #003=VREALLOC File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:20 Page:18   
      241        1        /*T***********************************************************/
      242        2        /*T*                                                         */
      243        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      244        4        /*T*                                                         */
      245        5        /*T***********************************************************/
      246        6
      247        7
      248        8        vrealloc: PROC (old_ptr_P, size_in_chars_P);
      249        9           /*I*  NAME: vrealloc
      250       10                 PROTOTYPE: void *vrealloc (void *ptr, size_t size)
      251       11                 DESCRIPTION: vrealloc can be used to adjust the size of a block
      252       12              previously allocated by vmalloc or vcalloc.  ptr locates the block to
      253       13              be modified and size specifies the new size for it.  vrealloc will
      254       14              return a pointer.  The pointer returned may or may not have the same
      255       15              value as ptr.
      256       16                 There are a couple of special cases.  If ptr is nil, vrealloc works
      257       17              like vmalloc, returning a pointer to a block of size bytes.
      258       18                 If size is zero, any storage located by ptr will be vfreed and a null
      259       19              pointer will be returned.
      260       20                 If the storage requested cannot be allocated, a null pointer will be
      261       21              returned.
      262       22           */
      263       23
      264       24           %INCLUDE xb_vheap_i6;
      265       97        %include   xb_heap_i6;
      266      172
      267      173    1      DCL old_ptr_P              PTR;
      268      174    1      DCL size_in_chars_P        UBIN;
      269      175
      270      176    1      DCL old_ptr                PTR;
      271      177    1      DCL 1 old_ptr_exposed REDEF old_ptr,
      272      178    1         2  word_offset          UBIN (24) UNAL,
      273      179    1         2  segid                UBIN (12) UNAL;
      274      180    1      DCL size_in_chars_as_ptr   PTR;
      275      181    1      DCL size_in_chars REDEF size_in_chars_as_ptr UBIN;
      276      182
      277      183    1      DCL needed_words           UBIN; /* minimum size of block returned */
PL6.E3A0      #003=VREALLOC File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:20 Page:19   
      278      184    1      DCL space_to_vfree          UBIN; /* space that can be vfreed */
      279      185    1      DCL space_needed           UBIN; /* additional words needed */
      280      186    1      DCL p                      PTR;  /* pointer to Head of block */
      281      187    1      DCL Tail_p                 PTR;  /* pointer to Tail of block */
      282      188    1      DCL Next_p                 PTR;  /* pointer to Head of next block */
      283      189    1      DCL bytes_to_move          UBIN;
      284      190    1      DCL old_data               CHAR (bytes_to_move) BASED (old_ptr);
      285      191    1      DCL new_data               CHAR (bytes_to_move) BASED (new_ptr);
      286      192    1      DCL new_ptr                PTR;
      287      193
      288      194    1      DCL XBI$VMALLOC             ENTRY (2);
      289      195    1      DCL XBI$VFREE               ENTRY (1);
      290      196    1      DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      291      197
      292      198           %EQU epsilon = 4;    /* minimum data size of vfreed block in words */
      293      199           %HEAP_VIRT_SYMREF;
      294      219
      295      220    1      vfree_space: PROC;
      296      221              /* This procedure is called when we know there is enough
      297      222                 "extra" space in the block to make it worthwhile
      298      223                 chopping off some space at the end to create a new
      299      224                 block that can be added to the vfree list.
      300      225              */
      301      226
      302      227    2      DCL Next_Tail              PTR;  /* pointer to Tail of next block */
      303      228
      304      229    3         DO INHIBIT;
      305      230    3            p -> Head.Size = needed_words;
      306      231    3            Tail_p = PINCRW (p, needed_words - SIZEW (Tail));
      307      232    3            Tail_p -> Tail.Up_Link = p;
      308      233                 /* make the remaining space look like an allocated block and get
      309      234                    XBI$VFREE to put it back into the vfree list. */
      310      235    3            Next_p = PINCRW (p, needed_words);
      311      236    3            Next_p -> Head.Size = space_to_vfree;
      312      237    3            Next_p -> Head.Flags       = '0'B;
      313      238    3            Next_p -> Head.Flags.Tag   = '1'B;
      314      239    3            Next_p -> Head.Flags.Stamp = 88;
PL6.E3A0      #003=VREALLOC File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:20 Page:20   
      315      240    3            Next_p -> Head.Right_Link = ADDR(NIL);
      316      241    3            Next_p -> Head.Left_Link = ADDR(NIL);
      317      242    3            Next_Tail = PINCRW (Next_p, space_to_vfree - SIZEW (Tail));
      318      243    3            Next_Tail -> Tail.Up_Link = Next_p;
      319      244    3         END /* INHIBIT */;
      320      245    2         CALL XBI$VFREE (PINCRW (Next_p, SIZEW (Head)));
      321      246    2      END vfree_space;
      322      247
      323      248    1      old_ptr = ADDR (old_ptr_P);
      324      249    1      size_in_chars_as_ptr = ADDR (size_in_chars_P);
      325      250
      326      251           /* CASE 1: A size of zero was specified */
      327      252
      328      253    2      IF size_in_chars = 0 THEN DO;
      329      254    2         IF old_ptr ~= ADDR(NIL) THEN CALL XBI$VFREE (old_ptr);
      330      255    2         CALL XB_RETURN_ORDINAL_RESULT (ADDR (NIL));
      331      256    2         RETURN;
      332      257    2      END;
      333      258
      334      259           /* CASE 2: old_ptr is null so just do an vmalloc */
      335      260
      336      261    2      IF old_ptr = ADDR(NIL) THEN DO;
      337      262    2         CALL XBI$VMALLOC (size_in_chars, new_ptr);
      338      263    2         CALL XB_RETURN_ORDINAL_RESULT (new_ptr);
      339      264    2         RETURN;
      340      265    2      END;
      341      266
      342      267           /* CASE 3: old_ptr doesn't point into the arg stack return null. */
      343      268
      344      269    1      IF (old_ptr_exposed.segid < %XBI$VIRT_MIN_AS) OR
      345      270    2         (old_ptr_exposed.segid > XBI$LAST_ASPTR$_exposed.segid) THEN DO;
      346      271    2         CALL XB_RETURN_ORDINAL_RESULT (ADDR(NIL));
      347      272    2         RETURN;
      348      273    2      END;
      349      274
      350      275    1      needed_words = ((size_in_chars + 3) / 4) + SIZEW(Head) + SIZEW(Tail);
      351      276    1      IF MOD(needed_words, 2) = 1 THEN needed_words = needed_words + 1;
PL6.E3A0      #003=VREALLOC File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:20 Page:21   
      352      277
      353      278    1      p = PINCRW (old_ptr, -SIZEW(Head));
      354      279
      355      280           /* CASE 3.1: something's funny if the Stamp field doesn't contain
      356      281                        the magic value
      357      282           */
      358      283
      359      284    2      IF p -> Head.Flags.Stamp ~= 88 THEN DO;
      360      285    2         CALL XB_RETURN_ORDINAL_RESULT (ADDR(NIL));
      361      286    2         RETURN;
      362      287    2      END;
      363      288
      364      289
      365      290           /* CASE 4: The user is asking for a smaller block */
      366      291
      367      292    2      IF needed_words <= p->Head.Size THEN DO;
      368      293    2         space_to_vfree = p->Head.Size - needed_words;
      369      294    3         IF space_to_vfree >= (SIZEW(Head) + SIZEW(Tail) + %epsilon) THEN DO;
      370      295                 /* It's worth splitting the block in two */
      371      296    3            CALL vfree_space;
      372      297    3         END;
      373      298    2         CALL XB_RETURN_ORDINAL_RESULT (old_ptr);
      374      299    2         RETURN;
      375      300    2      END;
      376      301
      377      302           /* User wants a larger block */
      378      303
      379      304    1      space_needed = needed_words - p->Head.Size;
      380      305    1      Next_P = PINCRW (p, p->Head.Size);
      381      306
      382      307           /* CASE 5: Use vmalloc to get a new block, copy the data to the new block
      383      308                      and then vfree the old block.
      384      309           */
      385      310
      386      311    1      IF Next_p = XBI$VIRT_Last_AV OR Next_P->Head.Flags.Tag OR
      387      312    2            (Next_p->Head.Size < space_needed) THEN DO;
      388      313    2         CALL XBI$VMALLOC (size_in_chars, new_ptr);
PL6.E3A0      #003=VREALLOC File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:20 Page:22   
      389      314    3         IF new_ptr ~= ADDR(NIL) THEN DO;
      390      315    3            bytes_to_move = (p->Head.Size - SIZEW(Head) - SIZEW(Tail)) * 4;
      391      316    3            new_data = old_data;
      392      317    3            CALL XBI$VFREE (old_ptr);
      393      318    3         END;
      394      319    2         CALL XB_RETURN_ORDINAL_RESULT (new_ptr);
      395      320    2         RETURN;
      396      321    2      END;
      397      322
      398      323           /* The next contiguous block is vfree and has enough space
      399      324              so we'll combine it with the current block
      400      325           */
      401      326
      402      327    2      DO INHIBIT;
      403      328    2         Next_p -> Head.Left_Link -> Head.Right_Link = Next_P -> Head.Right_Link;
      404      329    2         Next_p -> Head.Right_Link -> Head.Left_Link = Next_P -> Head.Left_Link;
      405      330    2         XBI$VIRT_AV = Next_p -> Head.Left_Link;
      406      331              /* vfree list may be exhausted */
      407      332    2         IF XBI$VIRT_AV = Next_p THEN XBI$VIRT_AV = ADDR(NIL);
      408      333    2         space_to_vfree = Next_p -> Head.Size - space_needed;
      409      334
      410      335           /* CASE 6: All the space in the block is needed */
      411      336
      412      337    3         IF space_to_vfree < (SIZEW(Head) + SIZEW(Tail) + %epsilon) THEN DO;
      413      338    3            p -> Head.Size = p -> Head.Size + Next_p -> Head.Size;
      414      339    3            Tail_p = PINCRW (p, p->Head.Size - SIZEW(Tail));
      415      340    3            Tail_p -> Tail.Up_Link = p;
      416      341    3            CALL XB_RETURN_ORDINAL_RESULT (old_ptr);
      417      342    3            RETURN;
      418      343    3         END;
      419      344    2      END /* INHIBIT */;
      420      345
      421      346           /* CASE 7: Too much extra space in the block. */
      422      347
      423      348    1      CALL vfree_space;
      424      349    1      CALL XB_RETURN_ORDINAL_RESULT (old_ptr);
      425      350    1   END vrealloc;
PL6.E3A0      #003=VREALLOC File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:20 Page:23   
      426      351        %EOD;

PL6.E3A0      #003=VREALLOC File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:20 Page:24   
--  Include file information  --

   xb_heap_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_vheap_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VREALLOC.

   Procedure VREALLOC requires 247 words for executable code.
   Procedure VREALLOC requires 20 words of local(AUTO) storage.

PL6.E3A0      #003=VREALLOC File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:20 Page:25   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=VREALLOC File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:20 Page:26   
          MINI XREF LISTING

BYTES_TO_MOVE
       189**DCL       190--IMP-SIZ   191--IMP-SIZ   315<<ASSIGN    316>>ASSIGN    316>>ASSIGN
HEAD
       150**DCL       245--CALL      275--ASSIGN    278--ASSIGN    294--IF        315--ASSIGN    337--IF
HEAD.FLAGS
       154**DCL       237<<ASSIGN
HEAD.FLAGS.STAMP
       161**DCL       239<<ASSIGN    284>>IF
HEAD.FLAGS.TAG
       155**DCL       238<<ASSIGN    311>>IF
HEAD.LEFT_LINK
       151**DCL       241<<ASSIGN    328>>ASSIGN    329<<ASSIGN    329>>ASSIGN    330>>ASSIGN
HEAD.RIGHT_LINK
       152**DCL       240<<ASSIGN    328<<ASSIGN    328>>ASSIGN    329>>ASSIGN
HEAD.SIZE
       153**DCL       230<<ASSIGN    236<<ASSIGN    292>>IF        293>>ASSIGN    304>>ASSIGN    305>>ASSIGN
       311>>IF        315>>ASSIGN    333>>ASSIGN    338<<ASSIGN    338>>ASSIGN    338>>ASSIGN    339>>ASSIGN
NEEDED_WORDS
       183**DCL       230>>ASSIGN    231>>ASSIGN    235>>ASSIGN    275<<ASSIGN    276>>IF        276<<ASSIGN
       276>>ASSIGN    292>>IF        293>>ASSIGN    304>>ASSIGN
NEW_DATA
       191**DCL       316<<ASSIGN
NEW_PTR
       192**DCL       191--IMP-PTR   262<>CALL      263<>CALL      313<>CALL      314>>IF        316>>ASSIGN
       319<>CALL
NEXT_P
       188**DCL       235<<ASSIGN    236>>ASSIGN    237>>ASSIGN    238>>ASSIGN    239>>ASSIGN    240>>ASSIGN
       241>>ASSIGN    242>>ASSIGN    243>>ASSIGN    245>>CALL      305<<ASSIGN    311>>IF        311>>IF
       311>>IF        328>>ASSIGN    328>>ASSIGN    329>>ASSIGN    329>>ASSIGN    330>>ASSIGN    332>>IF
       333>>ASSIGN    338>>ASSIGN
NEXT_TAIL IN PROCEDURE VFREE_SPACE
       227**DCL       242<<ASSIGN    243>>ASSIGN
PL6.E3A0      #003=VREALLOC File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:20 Page:27   
OLD_DATA
       190**DCL       316>>ASSIGN
OLD_PTR
       176**DCL       177--REDEF     190--IMP-PTR   248<<ASSIGN    254>>IF        254<>CALL      261>>IF
       278>>ASSIGN    298<>CALL      316>>ASSIGN    317<>CALL      341<>CALL      349<>CALL
OLD_PTR_EXPOSED.SEGID
       179**DCL       269>>IF        269>>IF
OLD_PTR_P
       173**DCL         8--PROC      248--ASSIGN
P
       186**DCL       230>>ASSIGN    231>>ASSIGN    232>>ASSIGN    235>>ASSIGN    278<<ASSIGN    284>>IF
       292>>IF        293>>ASSIGN    304>>ASSIGN    305>>ASSIGN    305>>ASSIGN    315>>ASSIGN    338>>ASSIGN
       338>>ASSIGN    339>>ASSIGN    339>>ASSIGN    340>>ASSIGN
SIZE_IN_CHARS
       181**DCL       253>>IF        262<>CALL      275>>ASSIGN    313<>CALL
SIZE_IN_CHARS_AS_PTR
       180**DCL       181--REDEF     249<<ASSIGN
SIZE_IN_CHARS_P
       174**DCL         8--PROC      249--ASSIGN
SPACE_NEEDED
       185**DCL       304<<ASSIGN    311>>IF        333>>ASSIGN
SPACE_TO_VFREE
       184**DCL       236>>ASSIGN    242>>ASSIGN    293<<ASSIGN    294>>IF        333<<ASSIGN    337>>IF
TAIL
       163**DCL       231--ASSIGN    242--ASSIGN    275--ASSIGN    294--IF        315--ASSIGN    337--IF
       339--ASSIGN
TAIL.UP_LINK
       164**DCL       232<<ASSIGN    243<<ASSIGN    340<<ASSIGN
TAIL_P
       187**DCL       231<<ASSIGN    232>>ASSIGN    339<<ASSIGN    340>>ASSIGN
VFREE_SPACE
       220**PROC      296--CALL      348--CALL
XBI$LAST_ASPTR$_EXPOSED.SEGID
       204**DCL       269>>IF
XBI$VFREE
       195**DCL-ENT   245--CALL      254--CALL      317--CALL
PL6.E3A0      #003=VREALLOC File=xb_valloc:6.:XBC3TSI                            FRI 01/06/95 11:20 Page:28   
XBI$VIRT_ALLOCATION_HEAP.HEAP_.BASE$
       213**DCL       214--REDEF
XBI$VIRT_AV
       206**DCL       330<<ASSIGN    332>>IF        332<<ASSIGN
XBI$VIRT_LAST_ASPTR$
       201**DCL       202--REDEF
XBI$VIRT_LAST_AV
       208**DCL       311>>IF
XBI$VMALLOC
       194**DCL-ENT   262--CALL      313--CALL
XB_RETURN_ORDINAL_RESULT
       196**DCL-ENT   255--CALL      263--CALL      271--CALL      285--CALL      298--CALL      319--CALL
       341--CALL      349--CALL

PL6.E3A0      #004=VCALLOC File=xb_valloc:6.:XBC3TSI                             FRI 01/06/95 11:20 Page:29   
      427        1        /*T***********************************************************/
      428        2        /*T*                                                         */
      429        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      430        4        /*T*                                                         */
      431        5        /*T***********************************************************/
      432        6
      433        7        vcalloc: PROC (nmemb_P, size_in_chars_P);
      434        8           /*D*  NAME: vcalloc
      435        9                 PROTOTYPE: void *vcalloc (size_t nmemb, size_t size);
      436       10                 DESCRIPTION: allocates space for nmemb items of size bytes and
      437       11              returns a pointer to the allocated space.  The allocated space is
      438       12              set to all zero bits.  If the space cannot be allocated, a null
      439       13              pointer is returned.
      440       14           */
      441       15
      442       16    1      DCL nmemb_P                UBIN;
      443       17    1      DCL size_in_chars_P        UBIN;
      444       18
      445       19    1      DCL nmemb_as_ptr           PTR;
      446       20    1      DCL nmemb REDEF nmemb_as_ptr UBIN;
      447       21    1      DCL size_in_chars_as_ptr   PTR;
      448       22    1      DCL size_in_chars REDEF size_in_chars_as_ptr UBIN;
      449       23
      450       24    1      DCL total_space_in_chars   UBIN;
      451       25    1      DCL result           PTR;
      452       26    1      DCL 1 struct_for_zeroing BASED (result),
      453       27    1         2  data           CHAR (total_space_in_chars);
      454       28
      455       29    1      DCL xb_return_ordinal_result     ENTRY (1);
      456       30    1      DCL xbi$vmalloc                   ENTRY (2);
      457       31
      458       32    1      nmemb_as_ptr = ADDR (nmemb_P); /* gross hack! */
      459       33    1      size_in_chars_as_ptr = ADDR(size_in_chars_P); /* gross hack! */
      460       34
      461       35    1      total_space_in_chars = nmemb * size_in_chars;
      462       36
      463       37           /* if they don't want any space, give them a null pointer */
PL6.E3A0      #004=VCALLOC File=xb_valloc:6.:XBC3TSI                             FRI 01/06/95 11:20 Page:30   
      464       38    1      if total_space_in_chars = 0 then CALL xb_return_ordinal_result (ADDR(NIL));
      465       39
      466       40    1      CALL xbi$vmalloc (total_space_in_chars, result);
      467       41    1      if result ~= ADDR(NIL) then
      468       42    1         struct_for_zeroing = '0'B;
      469       43    1      CALL xb_return_ordinal_result (result);
      470       44    1   END vcalloc;
      471       45        %EOD;

PL6.E3A0      #004=VCALLOC File=xb_valloc:6.:XBC3TSI                             FRI 01/06/95 11:20 Page:31   
      No diagnostics issued in procedure VCALLOC.

   Procedure VCALLOC requires 42 words for executable code.
   Procedure VCALLOC requires 12 words of local(AUTO) storage.

PL6.E3A0      #004=VCALLOC File=xb_valloc:6.:XBC3TSI                             FRI 01/06/95 11:20 Page:32   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=VCALLOC File=xb_valloc:6.:XBC3TSI                             FRI 01/06/95 11:20 Page:33   
          MINI XREF LISTING

NMEMB
        20**DCL        35>>ASSIGN
NMEMB_AS_PTR
        19**DCL        20--REDEF      32<<ASSIGN
NMEMB_P
        16**DCL         7--PROC       32--ASSIGN
RESULT
        25**DCL        26--IMP-PTR    40<>CALL       41>>IF         42>>ASSIGN     43<>CALL
SIZE_IN_CHARS
        22**DCL        35>>ASSIGN
SIZE_IN_CHARS_AS_PTR
        21**DCL        22--REDEF      33<<ASSIGN
SIZE_IN_CHARS_P
        17**DCL         7--PROC       33--ASSIGN
STRUCT_FOR_ZEROING
        26**DCL        42<<ASSIGN
TOTAL_SPACE_IN_CHARS
        24**DCL        27--IMP-SIZ    35<<ASSIGN     38>>IF         40<>CALL       42>>ASSIGN
XBI$VMALLOC
        30**DCL-ENT    40--CALL
XB_RETURN_ORDINAL_RESULT
        29**DCL-ENT    38--CALL       43--CALL

PL6.E3A0      #005=VMALLOC File=xb_valloc:6.:XBC3TSI                             FRI 01/06/95 11:20 Page:34   
      472        1        /*T***********************************************************/
      473        2        /*T*                                                         */
      474        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      475        4        /*T*                                                         */
      476        5        /*T***********************************************************/
      477        6
      478        7        vmalloc: PROC (size_in_chars_P);
      479        8           /*D*  NAME: vmalloc
      480        9                 PROTOTYPE: void *vmalloc (size_t size);
      481       10                 DESCRIPTION: allocates space of size bytes and returns a pointer to
      482       11              the allocated space.  If size is zero or the requested space cannot be
      483       12              allocated, a null pointer is returned.
      484       13           */
      485       14
      486       15    1      DCL size_in_chars_P        UBIN;
      487       16
      488       17    1      DCL size_in_chars_as_ptr   PTR;
      489       18    1      DCL size_in_chars REDEF size_in_chars_as_ptr UBIN;
      490       19    1      DCL result           PTR;
      491       20
      492       21    1      DCL xb_return_ordinal_result     ENTRY (1);
      493       22    1      DCL xbi$vmalloc                   ENTRY (2);
      494       23
      495       24    1      size_in_chars_as_ptr = ADDR(size_in_chars_P); /* gross hack! */
      496       25
      497       26    1      if size_in_chars = 0 then CALL xb_return_ordinal_result (ADDR(NIL));
      498       27
      499       28    1      CALL xbi$vmalloc (size_in_chars, result);
      500       29    1      CALL xb_return_ordinal_result (result);
      501       30    1   END vmalloc;
      502       31        %EOD;

PL6.E3A0      #005=VMALLOC File=xb_valloc:6.:XBC3TSI                             FRI 01/06/95 11:20 Page:35   
      No diagnostics issued in procedure VMALLOC.

   Procedure VMALLOC requires 29 words for executable code.
   Procedure VMALLOC requires 8 words of local(AUTO) storage.

PL6.E3A0      #005=VMALLOC File=xb_valloc:6.:XBC3TSI                             FRI 01/06/95 11:20 Page:36   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=VMALLOC File=xb_valloc:6.:XBC3TSI                             FRI 01/06/95 11:20 Page:37   
          MINI XREF LISTING

RESULT
        19**DCL        28<>CALL       29<>CALL
SIZE_IN_CHARS
        18**DCL        26>>IF         28<>CALL
SIZE_IN_CHARS_AS_PTR
        17**DCL        18--REDEF      24<<ASSIGN
SIZE_IN_CHARS_P
        15**DCL         7--PROC       24--ASSIGN
XBI$VMALLOC
        22**DCL-ENT    28--CALL
XB_RETURN_ORDINAL_RESULT
        21**DCL-ENT    26--CALL       29--CALL

PL6.E3A0      #006=VFREE File=xb_valloc:6.:XBC3TSI                               FRI 01/06/95 11:20 Page:38   
      503        1        /*T***********************************************************/
      504        2        /*T*                                                         */
      505        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      506        4        /*T*                                                         */
      507        5        /*T***********************************************************/
      508        6
      509        7        vfree: PROC (arg$);
      510        8           /*D*  NAME: vfree
      511        9                 PROTOTYPE: void vfree (void *ptr);
      512       10                 DESCRIPTION: vfrees storage previously allocated by vmalloc, vcalloc
      513       11              or vrealloc.  If ptr is null or does not point into the heap, the
      514       12              request is ignored.
      515       13           */
      516       14
      517       15    1      DCL arg$             PTR;
      518       16
      519       17    1      DCL xbi$vfree         ENTRY (1);
      520       18
      521       19    1      CALL xbi$vfree (ADDR(arg$));
      522       20    1   END vfree;

PL6.E3A0      #006=VFREE File=xb_valloc:6.:XBC3TSI                               FRI 01/06/95 11:20 Page:39   
      No diagnostics issued in procedure VFREE.

   Procedure VFREE requires 11 words for executable code.
   Procedure VFREE requires 6 words of local(AUTO) storage.

    No errors detected in file xb_valloc:6.:XBC3TSI    .

PL6.E3A0      #006=VFREE File=xb_valloc:6.:XBC3TSI                               FRI 01/06/95 11:20 Page:40   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=VFREE File=xb_valloc:6.:XBC3TSI                               FRI 01/06/95 11:20 Page:41   
          MINI XREF LISTING

ARG$
        15**DCL         7--PROC       19--CALL
XBI$VFREE
        17**DCL-ENT    19--CALL
