

CC.C03    File=zbl$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              *
        5         5              */
        6         6
        7         7             /*
        8         8              *  L L G E N
        9         9              *
       10        10              *  An Extended LL(1) Parser Generator
       11        11              *
       12        12              *  Author : Ceriel J.H. Jacobs
       13        13              */
       14        14
       15        15             /*
       16        16              * main.c
       17        17              * Contains main program, and some error message routines
       18        18              */
       19        19
       20        20             # include "types:h"
       21        21             # include "io:h"
       22        22             # include "extern:h"
       23        23             # include "sets:h"
       24        24             # include "assert:h"
       25        25
       26        26             # ifndef NORCSID
       27        27             static string rcsid6 = "$Header: main.c,v 2.5 87/03/10 01:15:30 ceriel Exp $";

       28        28             # endif
       29        29
       30        30             /* In this file the following routines are defined: */
       31        31             extern int   main();
       32        32             STATIC    readgrammar();
       33        33             STATIC    doparse();
       34        34             extern    error();
       35        35             extern    fatal();
CC.C03    File=zbl$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=2  
       36        36             extern    comfatal();
       37        37             extern    copyfile();
       38        38             extern    install();
       39        39             # ifndef NDEBUG
       40        40             extern    badassertion();
       41        41             # endif not NDEBUG
       42        42
       43        43             main(argc,argv) register string   argv[]; {
       44        44    1         register string arg;
       45        45    1         string libpath();
       46        46    1        int  gram_files = 0;
       47        47    1        string *filelist;
       48        48    1
       49        49    1         /* Initialize */
       50        50    1
       51        51    1         assval = 0400;
       52        52    1         /* read options */
       53        53    1
       54        54    1          filelist = argv;
       55        55    1          while (argc > 1)  {
       56        56    2             arg = argv[1];
       57        57    2             if (*arg == '-')
       58        58    2                while(*++arg)    {
       59        59    3                switch( *arg )   {
       60        60    4                 case 'v':
       61        61    4                 case 'V':
       62        62    4                  verbose++;
       63        63    4                  continue;
       64        64    4        # ifndef NDEBUG
       65        65    4                 case 'd':
       66        66    4                 case 'D':
       67        67    4                  debug++;
       68        68    4                  continue;
       69        69    4        # endif not NDEBUG
       70        70    4                 case 'r':
       71        71    4                 case 'R':
       72        72    4                  if (rec_file) {
CC.C03    File=zbl$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=3  
       73        73    5                     fprintf(stderr,"duplicate -r flag\n");
       74        74    5                     exit(1);
       75        75    5                  }
       76        76    4                  rec_file = arg + 1;
       77        77    4                  while(*++arg);
       78        78    4                  arg--;
       79        79    4                  break;
       80        80    4                 case 'i':
       81        81    4                 case 'I':
       82        82    4                  if (incl_file) {
       83        83    5                     fprintf(stderr,"duplicate -i flag\n");
       84        84    5                     exit(1);
       85        85    5                  }
       86        86    4                  incl_file = arg + 1;
       87        87    4                   if (!*incl_file) {
       88        88    5                      incl_file = *(++argv + 1);
       89        89    5                      argc--;
       90        90    5                      arg = "\0\0";
       91        91    5                   }
       92        92    4                  while(*++arg);
       93        93    4                  arg--;
       94        94    4                  break;
       95        95    4          case 'h':
       96        96    4          case 'H':
       97        97    4             if (f_hfile)   {
       98        98    5                fprintf(stderr,"Duplicate -h option\n");
       99        99    5                exit(1);
      100       100    5             }
      101       101    4             f_hfile = arg + 1;
      102       102    4             if (!*f_hfile) {
      103       103    5                f_hfile = *(++argv + 1);
      104       104    5                argc--;
      105       105    5                arg = "\0\0";
      106       106    5             }
      107       107    4             while(*(arg+1)) arg++;
      108       108    4             break;
      109       109    4          case 'e':
CC.C03    File=zbl$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=4  
      110       110    4          case 'E':
      111       111    4             if (f_rfile)   {
      112       112    5                fprintf(stderr,"Duplicate -e option\n");
      113       113    5                exit(1);
      114       114    5             }
      115       115    4             f_rfile = arg + 1;
      116       116    4             if (!*f_rfile) {
      117       117    5                f_rfile = *(++argv + 1);
      118       118    5                argc--;
      119       119    5                arg = "\0\0";
      120       120    5             }
      121       121    4             while(*(arg+1)) arg++;
      122       122    4             break;
      123       123    4          case 'l':
      124       124    4          case 'L':
      125       125    4             if (f_out)   {
      126       126    5                fprintf(stderr,"Duplicate -l option\n");
      127       127    5                exit(1);
      128       128    5             }
      129       129    4             f_out = arg + 1;
      130       130    4             if (!*f_out) {
      131       131    5                f_out = *(++argv + 1);
      132       132    5                argc--;
      133       133    5                 arg = "\0\0";
      134       134    5             }
      135       135    4             while(*(arg+1)) arg++;
      136       136    4             break;
      137       137    4          case 'a':
      138       138    4          case 'A':
      139       139    4             if (f_aacct)   {
      140       140    5                fprintf(stderr,"Duplicate -a option\n");
      141       141    5                exit(1);
      142       142    5             }
      143       143    4             f_aacct = arg + 1;
      144       144    4             if (!*f_aacct) {
      145       145    5                f_aacct = *(++argv + 1);
      146       146    5                argc--;
CC.C03    File=zbl$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=5  
      147       147    5                arg = "\0\0";
      148       148    5             }
      149       149    4             if (strlen(f_aacct)>17)  {
      150       150    5                fprintf(stderr,"-a option account specifier too long!");
      151       151    5                exit(1);
      152       152    5             }
      153       153    4             while(*(arg+1)) arg++;
      154       154    4             break;
      155       155    4                 case 'x':
      156       156    4                 case 'X':
      157       157    4                  ntneeded = 1;
      158       158    4                  ntprint = 1;
      159       159    4                  continue;
      160       160    4                 default:
      161       161    4                  fprintf(stderr,"illegal option : %c\n",*arg);
      162       162    4                  exit(1);
      163       163    4             }  /** of: switch( *arg ) **/
      164       164    3             }  /** of: if (*arg == '-' ) while ( *++arg )   **/
      165       165    2             else filelist[gram_files++] = arg;
      166       166    2             argv++;
      167       167    2             argc--;
      168       168    2          }             /** of: while (argc > 1) { **/
      169       169    1         /*
      170       170    1          * Now check wether the sets should include nonterminals
      171       171    1          */
      172       172    1         if (verbose == 2) ntneeded = 1;
      173       173    1         /*
      174       174    1          * Initialise
      175       175    1          */
      176       176    1          if(!f_hfile) f_hfile = HFILE;
      177       177    1          if(!f_rfile) f_rfile = RFILE;
      178       178    1          if(!f_out) f_out = OUTFILE;
      179       179    1         if (!rec_file) {
      180       180    2            rec_file = libpath("llgen$rec:h");
      181       181    2         }
      182       182    1         if (!incl_file) {
      183       183    2            incl_file = libpath("llgen$incl:h");
CC.C03    File=zbl$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=6  
      184       184    2         }
      185       185    1         if ((fact = fopen(f_temp,"wb")) == NULL) {
      186       186    2            fputs("Cannot create temporary\n",stderr);
      187       187    2            exit(1);
      188       188    2         }
      189       189    1         a_init();
      190       190    1         readgrammar(gram_files,filelist);
      191       191    1         setinit(ntneeded);
      192       192    1         maxnt = &nonterms[nnonterms];
      193       193    1         maxt = &tokens[ntokens];
      194       194    1         fclose(fact);
      195       195    1         /*
      196       196    1          * Now, the grammar is read. Do some computations
      197       197    1          */
      198       198    1         co_reach();    /* Check for undefined and unreachable */
      199       199    1         if (nerrors) comfatal();
      200       200    1         do_compute();
      201       201    1         conflchecks();
      202       202    1         if (nerrors) comfatal();
      203       203    1         if (argc == 0) {
      204       204    2            fputs("No code generation for input from standard input\n",
      205       205    2                  stderr);
      206       206    2         }
      207       207    1         else  gencode(gram_files);
      208       208    1         UNLINK(f_temp);
      209       209    1         UNLINK(f_pars);
      210       210    1         exit(0);
      211       211    1        }
      212       212
      213       213             STATIC
      214       214             readgrammar(argc,argv) char *argv[]; {
      215       215    1         /*
      216       216    1          * Do just what the name suggests : read the grammar
      217       217    1          */
      218       218    1         register p_file   p;
      219       219    1         p_mem    alloc();
      220       220    1
CC.C03    File=zbl$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=7  
      221       221    1         linecount = 0;
      222       222    1         f_input = "no filename";
      223       223    1         /*
      224       224    1          * Build the file structure
      225       225    1          */
      226       226    1         files = p = (p_file) alloc((unsigned) (argc+2) * sizeof(t_file));
      227       227    1         if (argc == 0) {
      228       228    2            finput = stdin;
      229       229    2            f_input = "standard input";
      230       230    2            doparse(p++);
      231       231    2         } else {
      232       232    2            while (argc--) {
      233       233    3               if ((finput = fopen(f_input=argv[0],"r")) == NULL) {
      234       234    4                  fatal(0,e_noopen,f_input);
      235       235    4               }
      236       236    3               doparse(p++);
      237       237    3               argv++;
      238       238    3               fclose(finput);
      239       239    3            }
      240       240    2         }
      241       241    1         maxfiles = p;
      242       242    1         if (! lexical) lexical = "yylex";
      243       243    1         /*
      244       244    1          * There must be a start symbol!
      245       245    1          */
      246       246    1         if (start == 0) {
      247       247    2            fatal(linecount,"Missing %%start");
      248       248    2         }
      249       249    1         if (nerrors) comfatal();
      250       250    1        }
      251       251
      252       252             STATIC
      253       253             doparse(p) register p_file p; {
      254       254    1
      255       255    1         linecount = 0;
      256       256    1         p->f_name = f_input;
      257       257    1         p->f_firsts = 0;
CC.C03    File=zbl$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=8  
      258       258    1         pfile = p;
      259       259    1         sorder = 0;
      260       260    1         porder = 0;
      261       261    1         LLparse();
      262       262    1         p->f_list = sorder;
      263       263    1        }
      264       264
      265       265             /* VARARGS1 */
      266       266             error(lineno,s,t,u) string  s,t,u; {
      267       267    1         /*
      268       268    1          * Just an error message
      269       269    1          */
      270       270    1
      271       271    1         ++nerrors;
      272       272    1         if (!lineno) lineno = 1;
      273       273    1         fprintf(stderr,"\"%s\", line %d : ",f_input, lineno);
      274       274    1         fprintf(stderr,s,t,u);
      275       275    1         fputs("\n",stderr);
      276       276    1        }
      277       277
      278       278             /* VARARGS1 */
      279       279             fatal(lineno,s,t,u) string  s,t,u; {
      280       280    1         /*
      281       281    1          * Fatal error
      282       282    1          */
      283       283    1         error(lineno,s,t,u);
      284       284    1         comfatal();
      285       285    1        }
      286       286
      287       287             comfatal() {
      288       288    1         /*
      289       289    1          * Some common code for exit on errors
      290       290    1          */
      291       291    1         if (fact != NULL) {
      292       292    2            fclose(fact);
      293       293    2            UNLINK(f_temp);
      294       294    2         }
CC.C03    File=zbl$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=9  
      295       295    1         if (fpars != NULL) fclose(fpars);
      296       296    1         UNLINK(f_pars);
      297       297    1         exit(1);
      298       298    1        }
      299       299
      300       300             copyfile(file) string file; {
      301       301    1         /*
      302       302    1          * Copies a file indicated by the parameter to filedescriptor fpars.
      303       303    1          */
      304       304    1         register int   c;
      305       305    1         register FILE  *f;
      306       306    1
      307       307    1         if ((f = fopen(file,"r")) == NULL) {
      308       308    2            fatal(0,"Cannot open libraryfile, call an expert");
      309       309    2         }
      310       310    1         while ((c = getc(f)) != EOF) putc(c,fpars);
      311       311    1         fclose(f);
      312       312    1        }
      313       313
      314       314             install(target, source) string target, source; {
      315       315    1         /*
      316       316    1          * Copy the temporary file generated from source to target
      317       317    1          * if allowed (which means that the target must be generated
      318       318    1          * by LLgen from the source, or that the target is not present
      319       319    1          */
      320       320    1         register int   c1, c2;
      321       321    1         register FILE  *f1, *f2;
      322       322    1         int      cnt;
      323       323    1
      324       324    1         /*
      325       325    1          * First open temporary, generated for source
      326       326    1          */
      327       327    1         if ((f1 = fopen(f_pars,"r")) == NULL) {
      328       328    2            fatal(0,e_noopen,f_pars);
      329       329    2         }
      330       330    1         /*
      331       331    1          * Now open target for reading
CC.C03    File=zbl$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=10 
      332       332    1          */
      333       333    1         if ((f2 = fopen(target,"r")) == NULL) {
      334       334    2            fclose(f1);
      335       335    2            RENAME(f_pars, target);
      336       336    2            return;
      337       337    2         }
      338       338    1         /*
      339       339    1          * Compute length of LLgen identification string. The target must
      340       340    1          * start with that!
      341       341    1          */
      342       342    1         cnt = strlen(LLgenid) + strlen(source) - 2;
      343       343    1         /*
      344       344    1          * Now compare the target with the temporary
      345       345    1          */
      346       346    1         do {
      347       347    2            c1 = getc(f1);
      348       348    2            c2 = getc(f2);
      349       349    2            if (cnt >= 0) cnt--;
      350       350    2         } while (c1 == c2 && c1 != EOF);
      351       351    1         fclose(f1);
      352       352    1         fclose(f2);
      353       353    1         /*
      354       354    1          * Here, if c1 != c2 the target must be recreated
      355       355    1          */
      356       356    1         if (c1 != c2) {
      357       357    2            if (cnt >= 0) {
      358       358    3               fatal(0,"%s : not a file generated by LLgen",target);
      359       359    3            }
      360       360    2            RENAME(f_pars,target);
      361       361    2         }
      362       362    1        }
      363       363
      364       364             #ifndef NDEBUG
      365       365             badassertion(asstr,file,line) char *asstr, *file; {
      366       366    1
      367       367    1         fprintf(stderr,"Assertion \"%s\" failed %s(%d)\n",asstr,file,line);
      368       368    1         if (fact != NULL) fclose(fact);
CC.C03    File=zbl$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=11 
      369       369    1         if (fpars != NULL) fclose(fpars);
      370       370    1         abort();
      371       371    1        }
      372       372             #endif
      373       373
---  Include file information  ---

   zbl$types:h.:ZBC3TOU. is referenced
   zbl$io:h.:ZBC3TOU. is referenced
   stdio:h.:LIB_E05. is referenced
   zbl$extern:h.:ZBC3TOU. is referenced
   zbl$sets:h.:ZBC3TOU. is referenced
   zbl$assert:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbl$main:c.:ZBC3TSI
