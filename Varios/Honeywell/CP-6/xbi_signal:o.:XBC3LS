
PL6.E3A0      #001=XBI$DEFAULT_SIGNAL_HANDLER File=xbi_signal:6.:XBC3TSI         FRI 01/06/95 11:38 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        XBI$DEFAULT_SIGNAL_HANDLER: PROC;
        7        7
        8        8        /*F* NAME: XBI$DEFAULT_SIGNAL_HANDLER
        9        9           PURPOSE: To provide a default exception handler for the case
       10       10              where the PASCAL user has not supplied his own.
       11       11              XBI$DEFAULT_SIGNAL_HANDLER has the task of reporting the error,
       12       12              and wrapping up execution of the program.
       13       13        */
       14       14        /*D* NAME: XBI$DEFAULT_SIGNAL_HANDLER
       15       15           CALL: from XBI$RERAISE_EXCEPTION only, not to be taken externally!
       16       16           INTERFACE: XBI_CLOSE_DCBS, XB$GET_LAST_ERROR_MESSAGE, XBI$WRITE_MESSAGE
       17       17           INPUT: all exception information in standard environment
       18       18           OUTPUT: none
       19       19           SCRATCH: all
       20       20           DESCRIPTION:  based on the information in the standard environment
       21       21              pertaining to the exception raised, XBI$DEFAULT_SIGNAL_HANDLER
       22       22              tries to produce as much meaningful explanation as possible.
       23       23              It then calls XBI_CLOSE_DCBS to close all open dcbs, and exits
       24       24              with an M$ERR to signify abnormal termination.
       25       25        */
       26       26
       27       27        %INCLUDE CP_6;
       28     5587        %INCLUDE NK_VFC_C;
       29     5661        %INCLUDE xb_signal_i6;
       30     5723        %INCLUDE xb_string_support_i6;
       31     5759
       32     5760
       33     5761    1   DCL M$DO                DCB;
       34     5762        %FPT_ALIB(STCLASS=AUTO);
       35     5779        %FPT_ALIB (FPTN=FPT$ALIB, STCLASS=CONSTANT);
       36     5796        %VLP_NAME (STCLASS=CONSTANT, NAME='DELTA', FPTN=DELTA);
       37     5823
PL6.E3A0      #001=XBI$DEFAULT_SIGNAL_HANDLER File=xbi_signal:6.:XBC3TSI         FRI 01/06/95 11:38 Page:2    
       38     5824    1   DCL DIGITS (0:5) UBIN (3) UNAL BASED;
       39     5825
       40     5826
       41     5827    1   DCL COMMAND         CHAR(15);
       42     5828    1   DCL I                SBIN WORD;
       43     5829    1   DCL EXCEPTION#       SBIN WORD;
       44     5830        %EQU TEMPSTR_SIZE = 384;
       45     5831        %STRING_VARIABLE (NAME=TEMPSTR, MAXIMUM_LENGTH=%TEMPSTR_SIZE);
       46     5836
       47     5837    1   DCL XB$GET_LAST_ERROR_MESSAGE ENTRY(2);
       48     5838    1   DCL XBI_CLOSE_DCBS                ENTRY(0);
       49     5839    1   DCL XBI$WRITE_MESSAGE             ENTRY(3);
       50     5840    1   DCL XBI$DISABLE_XCON              ENTRY;
       51     5841
       52     5842    1      CALL XBI$DISABLE_XCON;
       53     5843    1      CALL XBI_CLOSE_DCBS;          /* to force any remaining output */
       54     5844    1      FPT_ALIB = FPT$ALIB;
       55     5845    1      FPT_ALIB.V_ = VECTOR (FPT_ALIB.V);
       56     5846    1      FPT_ALIB.CMD_ = VECTOR(COMMAND);
       57     5847    1      FPT_ALIB.LIBNAME_ = VECTOR(DELTA);
       58     5848    1      FPT_ALIB.REPLY_ = VECTOR (NIL);
       59     5849    1      FPT_ALIB.V.RETRN# = '1'B;
       60     5850           /*
       61     5851              Set length of output buffer to maximum, will always be blank
       62     5852              padded, and XBI$WRITE_MESSAGE will trim off trailing blanks.
       63     5853           */
       64     5854    1      TEMPSTR.SIZE = %TEMPSTR_SIZE;
       65     5855    1      TEMPSTR.STRING = '**** C run-time error';
       66     5856    1      CALL XBI$WRITE_MESSAGE(DCBNUM(M$DO), TEMPSTR, 5 /* offset */);
       67     5857    1      TEMPSTR.STRING = ' ';
       68     5858    1      CALL CONCAT (TEMPSTR.STRING, '**** Exceptional condition "',
       69     5859    1                   SUBSTR(XB$ENV.EXCEPTION_NAME.STRING,0,XB$ENV.EXCEPTION_NAME.SIZE),
              5859                            '" occurred');
       70     5860    1      CALL XBI$WRITE_MESSAGE(DCBNUM(M$DO), TEMPSTR, 5 /* offset */);
       71     5861    2      IF XB$ENV.EXCEPTION_LOCATION ~= 0 THEN DO;
       72     5862    2         TEMPSTR.STRING = '     at location';
       73     5863    2         CALL XBI$WRITE_MESSAGE(DCBNUM(M$DO), TEMPSTR, 0 /* offset */);
PL6.E3A0      #001=XBI$DEFAULT_SIGNAL_HANDLER File=xbi_signal:6.:XBC3TSI         FRI 01/06/95 11:38 Page:3    
       74     5864    2         COMMAND = 'M ';
       75     5865    2         CALL BINCHAR (SUBSTR(COMMAND, 2, 6), XB$ENV.EXCEPTION_LOCATION);
       76     5866    2         FPT_ALIB.V.DLIB# = '0'B;
       77     5867    2         CALL M$ALIB (FPT_ALIB) ALTRET (TRY_AGAIN); TRY_AGAIN:
       78     5868    2      END;
       79     5869
       80     5870    1      CALL XB$GET_LAST_ERROR_MESSAGE (TEMPSTR, %TEMPSTR_SIZE);
       81     5871    1      CALL XBI$WRITE_MESSAGE (DCBNUM(M$DO), TEMPSTR, 5 /* offset */);
       82     5872
       83     5873    1      TEMPSTR.SIZE = %TEMPSTR_SIZE;
       84     5874    1      TEMPSTR.STRING = '     Traceback follows:';
       85     5875    1      CALL XBI$WRITE_MESSAGE (DCBNUM(M$DO), TEMPSTR, 0 /* offset */);
       86     5876    1      COMMAND = 'PLUGH';
       87     5877    1      FPT_ALIB.V.DLIB# = '1'B;
       88     5878    1      CALL M$ALIB (FPT_ALIB) ALTRET (NO_ALIB);
       89     5879
       90     5880    1     NO_ALIB:
       91     5881    1      CALL M$ERR;
       92     5882    1   END XBI$DEFAULT_SIGNAL_HANDLER;
       93     5883        %EOD;

PL6.E3A0      #001=XBI$DEFAULT_SIGNAL_HANDLER File=xbi_signal:6.:XBC3TSI         FRI 01/06/95 11:38 Page:4    
--  Include file information  --

   xb_string_support_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_signal_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   NK_VFC_C.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI$DEFAULT_SIGNAL_HANDLER.

   Procedure XBI$DEFAULT_SIGNAL_HANDLER requires 156 words for executable code.
   Procedure XBI$DEFAULT_SIGNAL_HANDLER requires 122 words of local(AUTO) storage.

PL6.E3A0      #001=XBI$DEFAULT_SIGNAL_HANDLER File=xbi_signal:6.:XBC3TSI         FRI 01/06/95 11:38 Page:5    
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=XBI$DEFAULT_SIGNAL_HANDLER File=xbi_signal:6.:XBC3TSI         FRI 01/06/95 11:38 Page:6    
          MINI XREF LISTING

COMMAND
      5827**DCL      5846--ASSIGN   5864<<ASSIGN   5865<<CALLBLT  5876<<ASSIGN
DELTA
      5821**DCL      5847--ASSIGN
FPT$ALIB
      5790**DCL      5844>>ASSIGN
FPT$ALIB.V
      5791**DCL      5791--DCLINIT
FPT_ALIB
      5773**DCL      5844<<ASSIGN   5867<>CALL     5878<>CALL
FPT_ALIB.CMD_
      5773**DCL      5846<<ASSIGN
FPT_ALIB.LIBNAME_
      5773**DCL      5847<<ASSIGN
FPT_ALIB.REPLY_
      5774**DCL      5848<<ASSIGN
FPT_ALIB.V
      5774**DCL      5845--ASSIGN
FPT_ALIB.V.DLIB#
      5775**DCL      5866<<ASSIGN   5877<<ASSIGN
FPT_ALIB.V.RETRN#
      5774**DCL      5849<<ASSIGN
FPT_ALIB.V_
      5774**DCL      5845<<ASSIGN
M$ALIB
      5528**DCL-ENT  5867--CALL     5878--CALL
M$DO
      5761**DCL      5856<>CALL     5860<>CALL     5863<>CALL     5871<>CALL     5875<>CALL
M$ERR
      5527**DCL-ENT  5881--CALL
NO_ALIB
      5881**LABEL    5878--CALLALT
PL6.E3A0      #001=XBI$DEFAULT_SIGNAL_HANDLER File=xbi_signal:6.:XBC3TSI         FRI 01/06/95 11:38 Page:7    
SIGVEC.SV_HANDLER
      5719**DCL      5720--REDEF
TEMPSTR
      5832**DCL      5856<>CALL     5860<>CALL     5863<>CALL     5870<>CALL     5871<>CALL     5875<>CALL
TEMPSTR.SIZE
      5833**DCL      5854<<ASSIGN   5873<<ASSIGN
TEMPSTR.STRING
      5834**DCL      5855<<ASSIGN   5857<<ASSIGN   5858<<CALLBLT  5862<<ASSIGN   5874<<ASSIGN
TRY_AGAIN
      5868**LABEL    5867--CALLALT
XB$ENV.EXCEPTION_LOCATION
      5703**DCL      5861>>IF       5865>>CALLBLT
XB$ENV.EXCEPTION_NAME.SIZE
      5694**DCL      5858>>CALLBLT
XB$ENV.EXCEPTION_NAME.STRING
      5695**DCL      5858>>CALLBLT
XB$GET_LAST_ERROR_MESSAGE
      5837**DCL-ENT  5870--CALL
XBI$DISABLE_XCON
      5840**DCL-ENT  5842--CALL
XBI$WRITE_MESSAGE
      5839**DCL-ENT  5856--CALL     5860--CALL     5863--CALL     5871--CALL     5875--CALL
XBI_CLOSE_DCBS
      5838**DCL-ENT  5843--CALL

PL6.E3A0      #002=XBI$RAISE_SIGNAL File=xbi_signal:6.:XBC3TSI                   FRI 01/06/95 11:39 Page:8    
       94        1        /*T***********************************************************/
       95        2        /*T*                                                         */
       96        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
       97        4        /*T*                                                         */
       98        5        /*T***********************************************************/
       99        6
      100        7        XBI$RAISE_SIGNAL: PROC;
      101        8           /*I*  NAME: XBI$RAISE_SIGNAL
      102        9                 CALL: CALL XBI$RAISE_SIGNAL;
      103       10                 INPUT: XB$ENV structure initialized to raise a signal.
      104       11                 PURPOSE: Decides how a signal should be handled, usually by calling
      105       12                    a user supplied signal handler or the default signal handler.
      106       13           */
      107       14           %INCLUDE xb_signal_i6;
      108       76           %INCLUDE CP_6;
      109     5636
      110     5637    1      DCL HANDLER                      EPTR;
      111     5638    1      DCL sig                          UBIN;
      112     5639    1      DCL old_mask_val                 BIT(36);
      113     5640
      114     5641    1      DCL XBI$DEFAULT_SIGNAL_HANDLER   ENTRY;
      115     5642    1      DCL XBI$CALL_USER_HANDLER        ENTRY (2);
      116     5643    1      DCL XBI$DISABLE_XCON             ENTRY;
      117     5644
      118     5645    2   DO INHIBIT;
      119     5646    2      sig = XB$ENV.CURRENT_SIGNAL;
      120     5647    3      IF (XB$ENV.SIGNAL_MASK(sig-1)) THEN DO;
      121     5648    3         XB$ENV.SIGNAL_WAIT(sig-1) = '1'B;
      122     5649    3         RETURN;
      123     5650    3      END;
      124     5651    2      old_mask_val = XB$ENV.SIGNAL_MASK;
      125     5652    3      IF (XB$ENV.SIGNAL_SV_FLAGS(sig) = %SV_RESETHAND) THEN DO;
      126     5653    3         XB$ENV.SIGNAL_MASK(sig-1) = '1'B;
      127     5654    3      END;
      128     5655    2      XB$ENV.SIGNAL_MASK = XB$ENV.SIGNAL_MASK | XB$ENV.SIGNAL_SV_MASK(sig);
      129     5656    2      XB$ENV.SIGNAL_RETURN_RESULT (XB$ENV.CURRENT_SIGNAL) = SIG_DFL;
      130     5657    2      HANDLER = XB$ENV.SIGNAL_HANDLER (XB$ENV.CURRENT_SIGNAL);
PL6.E3A0      #002=XBI$RAISE_SIGNAL File=xbi_signal:6.:XBC3TSI                   FRI 01/06/95 11:39 Page:9    
      131     5658    3      IF HANDLER ~= ENTADDR(NIL) THEN DO;
      132     5659        /*    Reset the signal handler unless the flags say otherwise       */
      133     5660    4         IF (XB$ENV.SIGNAL_SV_FLAGS(sig) = %SV_RESETHAND) THEN DO;
      134     5661    5            IF (XB$ENV.CURRENT_SIGNAL = %SIGINT) THEN DO;
      135     5662    5               XB$ENV.SIGNAL_HANDLER(XB$ENV.CURRENT_SIGNAL) =
      136     5663    5                  ENTADDR(NIL);
      137     5664    5            END;
      138     5665    4            ELSE IF (XB$ENV.CURRENT_SIGNAL = %SIGTERM) OR
      139     5666    5                    (XB$ENV.CURRENT_SIGNAL = %SIGHUP) THEN DO;
      140     5667    5               XB$ENV.SIGNAL_HANDLER(XB$ENV.CURRENT_SIGNAL) =
      141     5668    5                  ENTADDR(NIL);
      142     5669    5               CALL XBI$DISABLE_XCON;
      143     5670    5            END;
      144     5671    5            ELSE DO;
      145     5672    5               XB$ENV.SIGNAL_HANDLER(XB$ENV.CURRENT_SIGNAL) =
      146     5673    5                  ENTADDR(XBI$DEFAULT_SIGNAL_HANDLER);
      147     5674    5            END;
      148     5675    4         END;
      149     5676    3         IF HANDLER = ENTADDR(XBI$DEFAULT_SIGNAL_HANDLER) THEN
      150     5677    3            CALL XBI$DEFAULT_SIGNAL_HANDLER;
      151     5678    3         ELSE
      152     5679    3            CALL XBI$CALL_USER_HANDLER (HANDLER, XB$ENV.CURRENT_SIGNAL);
      153     5680    3      END;
      154     5681    2      ELSE
      155     5682
      156     5683              /* user wants to ignore the signal */
      157     5684
      158     5685    3         DO CASE (XB$ENV.CURRENT_SIGNAL);
      159     5686    3            CASE (%SIGABRT, %SIGTERM, %SIGINT, %SIGHUP, %SIGALRM, %SIGUSR1, %SIGUSR2);
      160     5687    3               XB$ENV.SIGNAL_MASK = old_mask_val;
      161     5688    3               RETURN;
      162     5689    3            CASE (%SIGFPE);
      163     5690                    /* it shouldn't be possible to get here. */
      164     5691    3               CALL M$XXX;
      165     5692    3            CASE (ELSE);
      166     5693                    /* we don't let the user ignore this one */
      167     5694    3               CALL XBI$DEFAULT_SIGNAL_HANDLER;
PL6.E3A0      #002=XBI$RAISE_SIGNAL File=xbi_signal:6.:XBC3TSI                   FRI 01/06/95 11:39 Page:10   
      168     5695    3         END;
      169     5696    2      XB$ENV.CURRENT_SIGNAL = %SIGNONE;
      170     5697    2      XB$ENV.SIGNAL_MASK = old_mask_val;
      171     5698    2   END; /* end inhibit */
      172     5699    1   END XBI$RAISE_SIGNAL;
      173     5700        %EOD;

PL6.E3A0      #002=XBI$RAISE_SIGNAL File=xbi_signal:6.:XBC3TSI                   FRI 01/06/95 11:39 Page:11   
--  Include file information  --

   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   xb_signal_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI$RAISE_SIGNAL.

   Procedure XBI$RAISE_SIGNAL requires 99 words for executable code.
   Procedure XBI$RAISE_SIGNAL requires 8 words of local(AUTO) storage.

PL6.E3A0      #002=XBI$RAISE_SIGNAL File=xbi_signal:6.:XBC3TSI                   FRI 01/06/95 11:39 Page:12   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=XBI$RAISE_SIGNAL File=xbi_signal:6.:XBC3TSI                   FRI 01/06/95 11:39 Page:13   
          MINI XREF LISTING

HANDLER
      5637**DCL      5657<<ASSIGN   5658>>IF       5676>>IF       5679<>CALL
M$XXX
      5576**DCL-ENT  5691--CALL
OLD_MASK_VAL
      5639**DCL      5651<<ASSIGN   5687>>ASSIGN   5697>>ASSIGN
SIG
      5638**DCL      5646<<ASSIGN   5647>>IF       5648>>ASSIGN   5652>>IF       5653>>ASSIGN   5655>>ASSIGN
      5660>>IF
SIGVEC.SV_HANDLER
        72**DCL        73--REDEF
XB$ENV.CURRENT_SIGNAL
        45**DCL      5646>>ASSIGN   5656>>ASSIGN   5657>>ASSIGN   5661>>IF       5662>>ASSIGN   5665>>IF
      5665>>IF       5667>>ASSIGN   5672>>ASSIGN   5679<>CALL     5685>>DOCASE   5696<<ASSIGN
XB$ENV.SIGNAL_HANDLER
        57**DCL      5657>>ASSIGN   5662<<ASSIGN   5667<<ASSIGN   5672<<ASSIGN
XB$ENV.SIGNAL_MASK
        61**DCL      5647>>IF       5651>>ASSIGN   5653<<ASSIGN   5655<<ASSIGN   5655>>ASSIGN   5687<<ASSIGN
      5697<<ASSIGN
XB$ENV.SIGNAL_RETURN_RESULT
        58**DCL      5656<<ASSIGN
XB$ENV.SIGNAL_SV_FLAGS
        60**DCL      5652>>IF       5660>>IF
XB$ENV.SIGNAL_SV_MASK
        59**DCL      5655>>ASSIGN
XB$ENV.SIGNAL_WAIT
        62**DCL      5648<<ASSIGN
XBI$CALL_USER_HANDLER
      5642**DCL-ENT  5679--CALL
XBI$DEFAULT_SIGNAL_HANDLER
      5641**DCL-ENT  5672--ASSIGN   5676--IF       5677--CALL     5694--CALL
XBI$DISABLE_XCON
PL6.E3A0      #002=XBI$RAISE_SIGNAL File=xbi_signal:6.:XBC3TSI                   FRI 01/06/95 11:39 Page:14   
      5643**DCL-ENT  5669--CALL

PL6.E3A0      #003=XBI$INT_HANDLER File=xbi_signal:6.:XBC3TSI                    FRI 01/06/95 11:39 Page:15   
      174        1        /*T***********************************************************/
      175        2        /*T*                                                         */
      176        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      177        4        /*T*                                                         */
      178        5        /*T***********************************************************/
      179        6
      180        7        XBI$INT_HANDLER: PROC ASYNC;
      181        8           /*I*  NAME: XBI$INT_HANDLER
      182        9                 PURPOSE: Async routine to catch break key interrupts.  Enabled
      183       10                    only if the program called the signal routine to define a
      184       11                    SIGINT handler.
      185       12           */
      186       13
      187       14           %INCLUDE CP_6;
      188     5574           %INCLUDE xb_signal_i6;
      189     5636           %INCLUDE xb_string_support_i6;
      190     5672           %INCLUDE xb_errors_i6;
      191     5743
      192     5744           %FPT_TRMPRG (STCLASS=CONSTANT, RSTBRK=YES);
      193     5773
      194     5774           %STRING_CONSTANT (NAME=Break_Key_Hit, VALUE="'Break Key Hit'");
      195     5779
      196     5780    1      DCL XBI$RAISE_SIGNAL       ENTRY;
      197     5781
      198     5782        %FPT_CLRSTK (FPTN=XBI$CLRSTK, STCLASS=SYMREF);
      199     5796
      200     5797    2   DO INHIBIT;
      201     5798    2      XBI$CLRSTK.V.FRAMES# = XBI$CLRSTK.V.FRAMES# + 1;
      202     5799    2      XBI$CLRSTK.V_ = VECTOR (XBI$CLRSTK.V);
      203     5800
      204     5801    3      CALL M$TRMPRG (FPT_TRMPRG) WHENALTRETURN DO; END;
      205     5802
      206     5803    2      XB$ENV.CURRENT_SIGNAL = %SIGINT;
      207     5804    2      XB$ENV.EXCEPTION_NAME.SIZE = Break_Key_Hit.SIZE;
      208     5805    2      XB$ENV.EXCEPTION_NAME.STRING = Break_Key_Hit.STRING;
      209     5806    2      XB$ENV.ERROR_CODE = ERR$BREAK_KEY_HIT;
      210     5807    2      XB$ENV.DCB_NUMBER = 0;
PL6.E3A0      #003=XBI$INT_HANDLER File=xbi_signal:6.:XBC3TSI                    FRI 01/06/95 11:39 Page:16   
      211     5808    2      XB$ENV.EXCEPTION_LOCATION = 0;
      212     5809    2      CALL XBI$RAISE_SIGNAL;
      213     5810    2      XBI$CLRSTK.V.FRAMES# = XBI$CLRSTK.V.FRAMES# - 1;
      214     5811    2      XBI$CLRSTK.V_ = VECTOR (XBI$CLRSTK.V);
      215     5812    2   END; /* end inhibit */
      216     5813    1   END XBI$INT_HANDLER;
      217     5814        %EOD;

PL6.E3A0      #003=XBI$INT_HANDLER File=xbi_signal:6.:XBC3TSI                    FRI 01/06/95 11:39 Page:17   
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_string_support_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_signal_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI$INT_HANDLER.

   Procedure XBI$INT_HANDLER requires 33 words for executable code.
   Procedure XBI$INT_HANDLER requires 4 words of local(AUTO) storage.

PL6.E3A0      #003=XBI$INT_HANDLER File=xbi_signal:6.:XBC3TSI                    FRI 01/06/95 11:39 Page:18   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=XBI$INT_HANDLER File=xbi_signal:6.:XBC3TSI                    FRI 01/06/95 11:39 Page:19   
          MINI XREF LISTING

BREAK_KEY_HIT.SIZE
      5776**DCL      5804>>ASSIGN
BREAK_KEY_HIT.STRING
      5777**DCL      5805>>ASSIGN
FPT_TRMPRG
      5760**DCL      5801<>CALL
FPT_TRMPRG.V
      5767**DCL      5762--DCLINIT
FPT_TRMPRG.V.CTLFLG.RSTBRK#
      5768**DCL      5769--REDEF
M$TRMPRG
      5527**DCL-ENT  5801--CALL
SIGVEC.SV_HANDLER
      5632**DCL      5633--REDEF
XB$ENV.CURRENT_SIGNAL
      5605**DCL      5803<<ASSIGN
XB$ENV.DCB_NUMBER
      5615**DCL      5807<<ASSIGN
XB$ENV.ERROR_CODE
      5609**DCL      5806<<ASSIGN
XB$ENV.EXCEPTION_LOCATION
      5616**DCL      5808<<ASSIGN
XB$ENV.EXCEPTION_NAME.SIZE
      5607**DCL      5804<<ASSIGN
XB$ENV.EXCEPTION_NAME.STRING
      5608**DCL      5805<<ASSIGN
XB$ERR$BREAK_KEY_HIT
      5736**DCL      5806>>ASSIGN
XBI$CLRSTK.V
      5793**DCL      5799--ASSIGN   5811--ASSIGN
XBI$CLRSTK.V.FRAMES#
      5793**DCL      5798<<ASSIGN   5798>>ASSIGN   5810<<ASSIGN   5810>>ASSIGN
PL6.E3A0      #003=XBI$INT_HANDLER File=xbi_signal:6.:XBC3TSI                    FRI 01/06/95 11:39 Page:20   
XBI$CLRSTK.V_
      5793**DCL      5799<<ASSIGN   5811<<ASSIGN
XBI$RAISE_SIGNAL
      5780**DCL-ENT  5809--CALL

PL6.E3A0      #004=XBI$XCON_HANDLER File=xbi_signal:6.:XBC3TSI                   FRI 01/06/95 11:39 Page:21   
      218        1        /*T***********************************************************/
      219        2        /*T*                                                         */
      220        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      221        4        /*T*                                                         */
      222        5        /*T***********************************************************/
      223        6
      224        7        XBI$XCON_HANDLER: PROC ASYNC;
      225        8           /*I*  NAME: XBI$XCON_HANDLER
      226        9                 PURPOSE: Async exit control handler.  Exit control is enabled only
      227       10                    if the user called the signal routine to define a SIGTERM
      228       11                    handler.
      229       12           */
      230       13
      231       14           %INCLUDE CP_6;
      232     5574           %INCLUDE xb_signal_i6;
      233     5636           %INCLUDE xb_string_support_i6;
      234     5672           %INCLUDE xb_errors_i6;
      235     5743           %INCLUDE B$JIT_C;
      236     6057
      237     6058           %STRING_CONSTANT (NAME=Exit_Control_Entered, VALUE="'Exit Control Entered'");
      238     6063           %STRING_CONSTANT (NAME=Hangup_Occurred, VALUE="'Hangup Occurred'");
      239     6068
      240     6069    1   DCL XBI$RAISE_SIGNAL ENTRY;
      241     6070
      242     6071        %B$TCB;
      243     6074        %B$EXCFR;
      244     6092        %B$XCON;
      245     6102
      246     6103    1   DCL   B$JIT$      PTR   SYMREF;
      247     6104    1   DCL   B$TCB$      PTR   SYMREF;
      248     6105
      249     6106    1   DCL   P$          PTR;
      250     6107        %FPT_CLRSTK (FPTN=XBI$CLRSTK, STCLASS=SYMREF);
      251     6121
      252     6122        /*    Increment the count of stack frames                           */
      253     6123
      254     6124    2   DO INHIBIT;
PL6.E3A0      #004=XBI$XCON_HANDLER File=xbi_signal:6.:XBC3TSI                   FRI 01/06/95 11:39 Page:22   
      255     6125    2      XBI$CLRSTK.V.FRAMES# = XBI$CLRSTK.V.FRAMES# + 1;
      256     6126    2      XBI$CLRSTK.V_ = VECTOR (XBI$CLRSTK.V);
      257     6127    2   END;
      258     6128
      259     6129        /*    Check to see if this is a SIGTERM or a SIGHUP and raise the
      260     6130              appropriate signal                                            */
      261     6131
      262     6132    1   IF (B$TCB$ = ADDR(NIL)) THEN
      263     6133    1      GOTO treat_as_sigterm;
      264     6134    1   P$ = B$TCB$->B$TCB.STK$;
      265     6135        /** IF (P$ = ADDR(NIL)) OR (P$->B$EXCFR.ECC ~= %ECC_XCON#) THEN *****/
      266     6136    1   IF (P$ = ADDR(NIL)) THEN
      267     6137    1      GOTO treat_as_sigterm;
      268     6138    2   IF (P$->B$XCON.RNST.HANGUP) THEN DO;
      269     6139    3      DO INHIBIT;
      270     6140    3         XB$ENV.CURRENT_SIGNAL = %SIGHUP;
      271     6141    3         XB$ENV.EXCEPTION_NAME.SIZE = Hangup_Occurred.SIZE;
      272     6142    3         XB$ENV.EXCEPTION_NAME.STRING = Hangup_Occurred.STRING;
      273     6143    3         XB$ENV.ERROR_CODE = ERR$EXIT_CONTROL;
      274     6144    3         XB$ENV.DCB_NUMBER = 0;
      275     6145    3         XB$ENV.EXCEPTION_LOCATION = 0;
      276     6146    3         CALL XBI$RAISE_SIGNAL;
      277     6147    3      END; /* end inhibit */
      278     6148    2      GOTO end_function;
      279     6149    2   END;  /* Is it a hangup?? */
      280     6150
      281     6151    1   treat_as_sigterm:
      282     6152
      283     6153    2   DO INHIBIT;
      284     6154    2      XB$ENV.CURRENT_SIGNAL = %SIGTERM;
      285     6155    2      XB$ENV.EXCEPTION_NAME.SIZE = Exit_Control_Entered.SIZE;
      286     6156    2      XB$ENV.EXCEPTION_NAME.STRING = Exit_Control_Entered.STRING;
      287     6157    2      XB$ENV.ERROR_CODE = ERR$EXIT_CONTROL;
      288     6158    2      XB$ENV.DCB_NUMBER = 0;
      289     6159    2      XB$ENV.EXCEPTION_LOCATION = 0;
      290     6160    2      CALL XBI$RAISE_SIGNAL;
      291     6161    2      XBI$CLRSTK.V.FRAMES# = XBI$CLRSTK.V.FRAMES# - 1;
PL6.E3A0      #004=XBI$XCON_HANDLER File=xbi_signal:6.:XBC3TSI                   FRI 01/06/95 11:39 Page:23   
      292     6162    2      XBI$CLRSTK.V_ = VECTOR (XBI$CLRSTK.V);
      293     6163    2   END; /* end inhibit */
      294     6164    1   end_function:
      295     6165    1   END XBI$XCON_HANDLER;
      296     6166        %EOD;

PL6.E3A0      #004=XBI$XCON_HANDLER File=xbi_signal:6.:XBC3TSI                   FRI 01/06/95 11:39 Page:24   
--  Include file information  --

   B$JIT_C.:LIB_E04  is referenced.
   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_string_support_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_signal_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI$XCON_HANDLER.

   Procedure XBI$XCON_HANDLER requires 56 words for executable code.
   Procedure XBI$XCON_HANDLER requires 4 words of local(AUTO) storage.

PL6.E3A0      #004=XBI$XCON_HANDLER File=xbi_signal:6.:XBC3TSI                   FRI 01/06/95 11:39 Page:25   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=XBI$XCON_HANDLER File=xbi_signal:6.:XBC3TSI                   FRI 01/06/95 11:39 Page:26   
          MINI XREF LISTING

B$EXCFR.ASL
      6075**DCL      6075--REDEF
B$EXCFR.ERR.ERR#
      6089**DCL      6089--REDEF
B$EXCFR.EVID
      6088**DCL      6088--REDEF    6089--REDEF
B$EXCFR.IR
      6076**DCL      6076--REDEF
B$EXCFR.PREVSZ
      6075**DCL      6075--REDEF
B$EXCFR.SUBC
      6087**DCL      6087--REDEF    6088--REDEF    6088--REDEF
B$TCB.STK$
      6072**DCL      6134>>ASSIGN
B$TCB$
      6104**DCL      6132>>IF       6134>>ASSIGN
B$XCON.ERR.ERR#
      6099**DCL      6099--REDEF
B$XCON.LIMIT.MEM
      6097**DCL      6097--REDEF
B$XCON.RNST.HANGUP
      6094**DCL      6138>>IF
END_FUNCTION
      6165**LABEL    6148--GOTO
EXIT_CONTROL_ENTERED.SIZE
      6060**DCL      6155>>ASSIGN
EXIT_CONTROL_ENTERED.STRING
      6061**DCL      6156>>ASSIGN
HANGUP_OCCURRED.SIZE
      6065**DCL      6141>>ASSIGN
HANGUP_OCCURRED.STRING
      6066**DCL      6142>>ASSIGN
PL6.E3A0      #004=XBI$XCON_HANDLER File=xbi_signal:6.:XBC3TSI                   FRI 01/06/95 11:39 Page:27   
P$
      6106**DCL      6134<<ASSIGN   6136>>IF       6138>>IF
SIGVEC.SV_HANDLER
      5632**DCL      5633--REDEF
TREAT_AS_SIGTERM
      6153**LABEL    6133--GOTO     6137--GOTO
XB$ENV.CURRENT_SIGNAL
      5605**DCL      6140<<ASSIGN   6154<<ASSIGN
XB$ENV.DCB_NUMBER
      5615**DCL      6144<<ASSIGN   6158<<ASSIGN
XB$ENV.ERROR_CODE
      5609**DCL      6143<<ASSIGN   6157<<ASSIGN
XB$ENV.EXCEPTION_LOCATION
      5616**DCL      6145<<ASSIGN   6159<<ASSIGN
XB$ENV.EXCEPTION_NAME.SIZE
      5607**DCL      6141<<ASSIGN   6155<<ASSIGN
XB$ENV.EXCEPTION_NAME.STRING
      5608**DCL      6142<<ASSIGN   6156<<ASSIGN
XB$ERR$EXIT_CONTROL
      5737**DCL      6143>>ASSIGN   6157>>ASSIGN
XBI$CLRSTK.V
      6118**DCL      6126--ASSIGN   6162--ASSIGN
XBI$CLRSTK.V.FRAMES#
      6118**DCL      6125<<ASSIGN   6125>>ASSIGN   6161<<ASSIGN   6161>>ASSIGN
XBI$CLRSTK.V_
      6118**DCL      6126<<ASSIGN   6162<<ASSIGN
XBI$RAISE_SIGNAL
      6069**DCL-ENT  6146--CALL     6160--CALL

PL6.E3A0      #005=XBI$ENABLE_XCON File=xbi_signal:6.:XBC3TSI                    FRI 01/06/95 11:39 Page:28   
      297        1        /*T***********************************************************/
      298        2        /*T*                                                         */
      299        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      300        4        /*T*                                                         */
      301        5        /*T***********************************************************/
      302        6
      303        7        XBI$ENABLE_XCON: PROC;
      304        8           /*I*  NAME: XBI$ENABLE_XCON
      305        9                 CALL: CALL XBI$ENABLE_XCON;
      306       10                 PURPOSE: Sets up exit control.  Called only if the user has
      307       11                    called the signal routine to set up a handler for SIGTERM
      308       12                    signals.
      309       13           */
      310       14
      311       15           %INCLUDE CP_6;
      312     5575
      313     5576           %FPT_XCON (FPTN=XCON_ENABLE, STCLASS=CONSTANT,UENTRY=XBI$XCON_HANDLER);
      314     5590           %FPT_XCON (FPTN=XCON_DISABLE, STCLASS=CONSTANT,UENTRY=NIL);
      315     5604
      316     5605    1      DCL XBI$XCON_HANDLER          ENTRY ASYNC;
      317     5606
      318     5607    2      CALL M$XCON (XCON_ENABLE) WHENALTRETURN DO; END;
      319     5608    1      RETURN;
      320     5609
      321     5610    1   XBI$DISABLE_XCON: ENTRY;
      322     5611
      323     5612    2      CALL M$XCON (XCON_DISABLE) WHENALTRETURN DO; END;
      324     5613    1   END XBI$ENABLE_XCON;
      325     5614        %EOD;

PL6.E3A0      #005=XBI$ENABLE_XCON File=xbi_signal:6.:XBC3TSI                    FRI 01/06/95 11:39 Page:29   
--  Include file information  --

   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI$ENABLE_XCON.

   Procedure XBI$ENABLE_XCON requires 16 words for executable code.
   Procedure XBI$ENABLE_XCON requires 4 words of local(AUTO) storage.

PL6.E3A0      #005=XBI$ENABLE_XCON File=xbi_signal:6.:XBC3TSI                    FRI 01/06/95 11:39 Page:30   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=XBI$ENABLE_XCON File=xbi_signal:6.:XBC3TSI                    FRI 01/06/95 11:39 Page:31   
          MINI XREF LISTING

M$XCON
      5558**DCL-ENT  5607--CALL     5612--CALL
XBI$XCON_HANDLER
      5605**DCL-ENT  5588--DCLINIT
XCON_DISABLE
      5601**DCL      5612<>CALL
XCON_DISABLE.V
      5602**DCL      5601--DCLINIT
XCON_ENABLE
      5587**DCL      5607<>CALL
XCON_ENABLE.V
      5588**DCL      5587--DCLINIT

PL6.E3A0      #006=XBI$ENABLE_INT File=xbi_signal:6.:XBC3TSI                     FRI 01/06/95 11:39 Page:32   
      326        1        /*T***********************************************************/
      327        2        /*T*                                                         */
      328        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      329        4        /*T*                                                         */
      330        5        /*T***********************************************************/
      331        6
      332        7        XBI$ENABLE_INT: PROC;
      333        8           /*I*  NAME: XBI$ENABLE_INT
      334        9                 CALL: CALL XBI$ENABLE_INT;
      335       10                 PURPOSE: Sets up int (break) control.  Called only if the user has
      336       11                    called the signal routine to set up a handler for SIGINT
      337       12                    signals.
      338       13           */
      339       14
      340       15           %INCLUDE CP_6;
      341     5575
      342     5576           %FPT_INT (FPTN=INT_ENABLE, STCLASS=CONSTANT,UENTRY=XBI$INT_HANDLER);
      343     5590           %FPT_INT (FPTN=INT_DISABLE, STCLASS=CONSTANT,UENTRY=NIL);
      344     5604
      345     5605    1      DCL XBI$INT_HANDLER          ENTRY ASYNC;
      346     5606
      347     5607    2      CALL M$INT (INT_ENABLE) WHENALTRETURN DO; END;
      348     5608    1      RETURN;
      349     5609
      350     5610    1   XBI$DISABLE_INT: ENTRY;
      351     5611
      352     5612    2      CALL M$INT (INT_DISABLE) WHENALTRETURN DO; END;
      353     5613    1   END XBI$ENABLE_INT;

PL6.E3A0      #006=XBI$ENABLE_INT File=xbi_signal:6.:XBC3TSI                     FRI 01/06/95 11:39 Page:33   
--  Include file information  --

   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI$ENABLE_INT.

   Procedure XBI$ENABLE_INT requires 16 words for executable code.
   Procedure XBI$ENABLE_INT requires 4 words of local(AUTO) storage.

    No errors detected in file xbi_signal:6.:XBC3TSI    .

PL6.E3A0      #006=XBI$ENABLE_INT File=xbi_signal:6.:XBC3TSI                     FRI 01/06/95 11:39 Page:34   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=XBI$ENABLE_INT File=xbi_signal:6.:XBC3TSI                     FRI 01/06/95 11:39 Page:35   
          MINI XREF LISTING

INT_DISABLE
      5601**DCL      5612<>CALL
INT_DISABLE.V
      5601**DCL      5601--DCLINIT
INT_ENABLE
      5587**DCL      5607<>CALL
INT_ENABLE.V
      5587**DCL      5587--DCLINIT
M$INT
      5558**DCL-ENT  5607--CALL     5612--CALL
XBI$INT_HANDLER
      5605**DCL-ENT  5587--DCLINIT
