

14:12 JUL 28 '97 B_LSDATA_C.:E05SI                                         1    
    1      /*M* Values used to initialize the linkage segment descriptors.    */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* MCL=25,CLM=40,CRM=78,CRT=5,PLM=8                              */
    8      /**/
    9      /*  The files M_INFO_C and B$JIT must be included in order to use
   10          the items defined in this module.                              */
   11      %INCLUDE B_ULSMAC_C;
   12      %INCLUDE B_MLSMAC_C;
   13      %B_MLS (FPTN=B$MLNK,STCLASS=BASED);
   14      %B_USRULS (FPTN=B$ULNK,STCLASS=BASED);
   15      /**/
   16      /* Some useful constants... */
   17      %EQU   PAGE_BOUND = 4095;
   18      %EQU   PAGE2_BOUND = 8191;
   19      %EQU   BYTES# = 4096;
   20      /* The following items are a kluge resulting from the fact that the
   21         preprocessor cannot do SIZEV or SIZEC operations.  Whenever the
   22         corresponding data structures are changed, these values should
   23         be re-verified.                                                 */
   24      %EQU   JIT_SIZEC = 984;                 /* SIZEC(B$JIT)                     */
   25      %EQU   PIA_SIZEC = 64;                  /* PIA is 16 words long             */
   26      %EQU   ULS_SIZEC = 288;                 /* SIZEC(B$ULNK)                    */
   27      %EQU   MLS_SIZEC = %(ULS_SIZEC*4);      /* SIZEC(B$MLNK)                    */
   28      %EQU   SDS_SIZEC = 64;                  /* Spcl descriptor storage area     */
   29      %EQU   SSS_SIZEC = 2368;                /* Safe store stack = 592 words     */
   30      %EQU   MTCB_SIZEC = 680;                /* Monitor TCB is 170 words         */
   31      %EQU   ECCB_SIZEC = 24;                 /* ECCB's are 6 words               */
   32      %EQU   ECCB_DISPC = 80;                 /* ECCB's start at ROSEG + 20       */
   33      %EQU   PIA_DISPC = 48;                  /* User PIA is ISR words 12-27      */
   34      %EQU   CPPIA_DISPC = 16;                /* CP's PIA starts at ROSEG+4       */
   35      /**/
   36      /************* Linkage Segment Bases and Bounds ***************/
   37      %SUB   JIT_BASE ="%(JITPG*BYTES#)";
14:12 JUL 28 '97 B_LSDATA_C.:E05SI                                         2    
   38      %SUB   JIT_BOUND ="SIZEV(B$JIT)";
   39      %SUB   HJIT_BASE = "%(HJITPG*BYTES#)";
   40      %SUB   HJIT_BOUND = %PAGE_BOUND;
   41      %SUB   MHJIT_BOUND = %PAGE2_BOUND;      /* Mon HJIT is 2 pages              */
   42      %SUB   SBUF1_BASE ="%(SBUF1PG*BYTES#)";
   43      %SUB   SBUF2_BASE ="%(SBUF2PG*BYTES#)";
   44      %SUB   FMS_BASE ="%(FMSEGLO*BYTES#)";
   45      %SUB   FMS_BOUND ="%((FMSEGHI-FMSEGLO+1)*BYTES# - 1)";
   46      %SUB  TGR_BASE = "%(TIGRLO*BYTES#)";
   47      %SUB  TGR_BOUND = "%((TIGRHI-TIGRLO+1)*BYTES#-1)";
   48      %SUB   ROS_BASE ="%(ROSEGLO*BYTES#)";
   49      %SUB   ROS_BOUND ="%((ROSEGHI-ROSEGLO+1)*BYTES# - 1)";
   50      %SUB   MST_BASE ="%(SEGTBL*BYTES#)";
   51      %SUB   MST_BOUND ="%((SEGTBL-SEGTBL+1)*BYTES# - 1)";
   52      %SUB   WND_BASE ="%(WINDOWLO*BYTES#)";
   53      %SUB   WND_BOUND ="%((WINDOWHI-WINDOWLO+1)*BYTES# - 1)";
   54      %SUB   REAL_BASE ="%(REALLO*BYTES#)";
   55      %SUB   REAL_BOUND ="%((REALHI-REALLO+1)*BYTES# - 1)";
   56      %SUB   IMX_BASE ="%(IMXLO*BYTES#)";
   57      %SUB   IMX_BOUND ="%((IMXHI-IMXLO+1)*BYTES# - 1)";
   58      %SUB   IS_BASE ="%(ISEGLO*BYTES#)";
   59      %SUB   IS_BOUND ="%((ISEGHI-ISEGLO+1)*BYTES# - 1)";
   60      %SUB   PIA_BASE ="%(ISEGLO*BYTES# + PIA_DISPC)";
   61      %SUB   CPPIA_BASE ="%(ROSEGLO*BYTES# + CPPIA_DISPC)";
   62      %SUB   PIA_BOUND ="%(PIA_SIZEC - 1)";
   63      %SUB   DS_BASE ="%(UDSEGLO*BYTES#)";    /* User/mon data seg base           */
   64      %SUB   DDS_BASE ="%(DBDSEGLO*BYTES#)";  /* Debugger data seg base           */
   65      %SUB   ADS_BASE ="%(ASLSEGLO*BYTES#)";  /* ASL data seg base                */
   66      %SUB   CDS_BASE ="%(CPDSEGLO*BYTES#)";  /* CP data seg base                 */
   67      %SUB   MDS1_BASE ="%(CFULO*BYTES#)";    /* Mon DS1 = CFU's                  */
   68      %SUB   MDS2_BASE ="%(ASAVELO*BYTES#)";  /* Mon DS2 = AUTOSAVE tbls.         */
   69      %SUB   MDS3_BASE ="%(ENQLO*BYTES#)";    /* Mon DS3 = ENQ/DEQ tbls.          */
   70      %SUB   MDS4_BASE ="%(DS4LO*BYTES#)";    /* Mon DS4 = Unassigned             */
   71      %SUB   MDS5_BASE ="%(DS5LO*BYTES#)";    /* Mon DS5 = Unassigned             */
   72      %SUB   MDS6_BASE ="%(DS6LO*BYTES#)";    /* Mon DS6 = Unassigned             */
   73      %SUB   MDS7_BASE ="%(DS7LO*BYTES#)";    /* Mon DS7 = Unassigned             */
   74      %SUB   MDS8_BASE ="%(LDCTLO*BYTES#)";   /* Mon DS8 = LDCT's                 */
14:12 JUL 28 '97 B_LSDATA_C.:E05SI                                         3    
   75      %SUB   LDCT_BOUND ="%((LDCTHI-LDCTLO+1)*BYTES# - 1)";
   76      %SUB   MLS_BASE ="%(HJITPG*BYTES#)";    /* Mon LS is 1st thing in HJIT      */
   77      %SUB   MLS_BOUND ="SIZEV(B$MLNK)";
   78      %SUB   ULS_BASE ="%(HJITPG*BYTES#)";
   79      %SUB   DLS_BASE ="%(HJITPG*BYTES# + ULS_SIZEC)";
   80      %SUB   ALS_BASE ="%(HJITPG*BYTES# + ULS_SIZEC*2)";
   81      %SUB   CLS_BASE ="%(HJITPG*BYTES# + ULS_SIZEC*3)";
   82      %SUB   LS_BOUND ="SIZEV(B$ULNK)";       /* Bound for user, DB, ASL, CP LS   */
   83      %SUB   SDS_BASE ="%(HJITPG*BYTES# + MLS_SIZEC)";
   84      %SUB   SDS_BOUND ="%(SDS_SIZEC - 1)";
   85      %SUB   SSS_BASE ="%(HJITPG*BYTES# + MLS_SIZEC + SDS_SIZEC)";
   86      %SUB   SSS_BOUND ="%(SSS_SIZEC - 1)";
   87      %SUB   MON_SSS_BOUND ="%(SSS_SIZEC + PAGE_BOUND)";
   88      %SUB   AS_BASE ="%(HJITPG*BYTES# + MLS_SIZEC + SDS_SIZEC + SSS_SIZEC)";
   89      %SUB   MON_AS_BASE ="%(HJITPG*BYTES# + MLS_SIZEC + SDS_SIZEC + SSS_SIZEC + BYTES#)";
   90      %SUB   AS_BOUND ="%(BYTES# - (MLS_SIZEC + SDS_SIZEC + SSS_SIZEC + 1))";
   91      %SUB   PT_BASE ="%(PGTBLLO*BYTES#)";
   92      %SUB   UPT_BOUND = %PAGE_BOUND;
   93      %SUB   USPT_BOUND ="%((PGTBLHI-PGTBLLO+1)*BYTES# - 1)";
   94      %SUB   MPT_BOUND ="%((PGTBLHI-PGTBLLO+1)*BYTES# - 1)";
   95      %SUB   CGPT_BASE ="%(CGPGTBLLO*BYTES#)";
   96      %SUB   CGPT_BOUND ="%((PGTBLHI-CGPGTBLLO)*BYTES# - 1)";
   97      %SUB   CGCTXT_BASE ="%(CGCTXTLO*BYTES#)";
   98      %SUB   TSTK_BASE ="%(JITPG*BYTES# + JIT_SIZEC)";
   99      %SUB   UTSTK_BOUND ="%(PAGE2_BOUND - JIT_SIZEC)";
  100      %SUB   MTSTK_BOUND ="%(PAGE2_BOUND - (JIT_SIZEC + MTCB_SIZEC))";
  101      %SUB   MTCB_BASE ="%((JITPG+2)*BYTES# - MTCB_SIZEC)";
  102      %SUB   MTCB_BOUND ="%(MTCB_SIZEC - 1)";
  103      %SUB   ECCB_BASE ="%(JITPG*BYTES#)";    /* Mon ECCB is 1st 5 wds of mon JIT */
  104      %SUB UECCB_BASE ="%(ROSEGLO*BYTES# + ECCB_DISPC)"; /* User ECCB             */
  105      %SUB   AECCB_BASE ="%(ROSEGLO*BYTES# + ECCB_DISPC + ECCB_SIZEC)";
  106      %SUB   DECCB_BASE ="%(ROSEGLO*BYTES# + ECCB_DISPC + ECCB_SIZEC*2)";
  107      %SUB   CECCB_BASE ="%(ROSEGLO*BYTES# + ECCB_DISPC + ECCB_SIZEC*3)";
  108      %SUB   ECCB_BOUND ="%(ECCB_SIZEC - 1)";
  109      %SUB   VPT_BASE ="%(VS1PGTBL*BYTES#)";
  110      %SUB   VPT_BOUND ="%((VS2PGTBL-VS1PGTBL)*3*BYTES# - 1)";
  111      %SUB   MOUSE_BASE ="%(MOUSELO*BYTES#)";
14:12 JUL 28 '97 B_LSDATA_C.:E05SI                                         4    
  112      %SUB   MOUSE_BOUND ="%((MOUSEHI-MOUSELO)*BYTES# - 1)";
  113      %SUB   MASTERPT_BASE ="%(MASTERPTPG*BYTES#)";
  114      %SUB   SLV1PT_BASE ="%(SLV1PTPG*BYTES#)";
  115      %SUB   SLV2PT_BASE ="%(SLV2PTPG*BYTES#)";
  116      %SUB   SLV3PT_BASE ="%(SLV3PTPG*BYTES#)";
  117      %SUB   SLV4PT_BASE ="%(SLV4PTPG*BYTES#)";
  118      %SUB   SLV5PT_BASE ="%(SLV5PTPG*BYTES#)";
  119      %SUB   SLV6PT_BASE ="%(SLV6PTPG*BYTES#)";
  120      %SUB   SLV7PT_BASE ="%(SLV7PTPG*BYTES#)";
  121      %SUB   MASTERHJIT_BASE ="%(MASTERHJITPG*BYTES#)";
  122      %SUB   SLV1HJIT_BASE ="%(SLV1HJITPG*BYTES#)";
  123      %SUB   SLV2HJIT_BASE ="%(SLV2HJITPG*BYTES#)";
  124      %SUB   SLV3HJIT_BASE ="%(SLV3HJITPG*BYTES#)";
  125      %SUB   SLV4HJIT_BASE ="%(SLV4HJITPG*BYTES#)";
  126      %SUB   SLV5HJIT_BASE ="%(SLV5HJITPG*BYTES#)";
  127      %SUB   SLV6HJIT_BASE ="%(SLV6HJITPG*BYTES#)";
  128      %SUB   SLV7HJIT_BASE ="%(SLV7HJITPG*BYTES#)";
  129      %SUB   FIRMWR_BASE ="%(FIRMWREPG*BYTES#)";
  130      %SUB   FIRMWR_BOUND ="%((FIRMWREHI-FIRMWREPG)*BYTES# - 1)";
  131      %SUB   WS3LS_BOUND = 1023;         /* Spcl. version of mon LS for DELTA     */
  132      %SUB   WS3LS_BASE = 4096;               /* Spcl. mon LS with write allowed  */
  133      %SUB   WS3LSNW_BASE ="%(4096 + 1023 + 1)";
  134      %SUB   CWSQBOUND = "%(4096 * 256 - 1)";
  135      %SUB   CWSQBASE0 = "%(0)";
  136      %SUB   CWSQBASE1 = "%(4096 * 256)";
  137      %SUB   CWSQBASE2 = "%(4096 * 512)";
  138      %SUB   CWSQBASE3 = "%(4096 * 768)";
  139      %SUB   XLAT_BOUND ="%(6 * BYTES# - 9)";
  140      %SUB   UXLAT_BASE ="%(UXLATLO * BYTES# + 8)";
  141      %SUB   XLATNORMAL_BASE ="%(XLATNORMAL * BYTES# + 8)";
  142      %SUB   XLATALTERNATE_BASE ="%(XLATALTERNATE * BYTES# + 8)";
  143      %SUB   DVTTBL_BOUND = "%(4 * BYTES# - 9)";
  144      %SUB   DVTTBL_BASE ="%(DVTTBL * BYTES# + 8)";

