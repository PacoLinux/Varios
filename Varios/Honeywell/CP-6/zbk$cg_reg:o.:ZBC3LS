

CC.C03    File=zbk$cg_reg:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             #include <assert.h>
        2         2             #include "em_mnem.h"
        3         3             #include "cg_tree.h"
        4         4             #include "cg_inst.h"
        5         5             #include "cg_funs.h"
        6         6             #define NREGS 27
        7         7
        8         8             #ifdef _CP6_
        9         9             #define max(x,y) ((x>y)?x:y)
       10        10             #endif
       11        11
       12        12                    void zbk_reset_reg_alloc (void);
       13        13                    int  zbk_allocate_reg    (unsigned long);
       14        14                    int  zbk_allocate_regn   (int);
       15        15                    void zbk_release_regn    (int);
       16        16                    void zbk_release_adr_xp  (ADR);
       17        17                    void zbk_declare_mlrx_reg(ADR);
       18        18                    void zbk_reload_mlrx_reg (void);
       19        19                    void zbk_declare_lfr_reg (EXPR, int);
       20        20                    void zbk_tempify_lfr_reg (void);
       21        21                    int  zbk_Areg_useable    (void);
       22        22                    int  zbk_is_holding_reg  (unsigned long, EXPR);
       23        23                    void zbk_hold_reg        (int, EXPR);
       24        24                    void zbk_spoil_hold_var  (EXPR);
       25        25                    void zbk_spoil_hold_all  (void);
       26        26
       27        27             #define REGSTAT_FREE    0
       28        28             #define REGSTAT_HOLDING 1  /* extra info used: .sym & .ofs == variable sym & o
                               fs */
       29        29             #define REGSTAT_MLRX    2  /* extra info used: mlrx_reg/temp/node */
       30        30             #define REGSTAT_LFR     3  /* extra info used: lfr_reg/temp */
       31        31             #define REGSTAT_REGVAR  4  /* extra info used: .sym & .ofs == variable sym & o
                               fs */
       32        32             #define REGSTAT_BUSY    5
       33        33             #define REGSTAT_BUSYH   6  /* extra info used: .sym & .ofs == variable sym & o
                               fs */
       34        34
CC.C03    File=zbk$cg_reg:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       35        35             extern int inst_store_reg[];
       36        36             extern int inst_load_reg[];
       37        37             extern int temp_size_reg[];
       38        38
       39        39             struct {
       40        40    1           int   status;
       41        41    1           char *sym;
       42        42    1           long  ofs;
       43        43    1        } reg_tbl[NREGS];
       44        44
       45        45             /* REMOVE "allocation_prec" from cg_inst.c */
       46        46             int allocation_prec[] = {
       47        47    1            0, 0, 0, 0, 0, 6, 9, 0,
       48        48    1           12,12,12,12,12,12,12,12,
       49        49    1            3, 3, 3, 3, 3, 3, 3, 3,
       50        50    1            3, 3, 6
       51        51    1        };
       52        52
       53        53             static int  mlrx_reg  = 0;
       54        54             static ADR  mlrx_temp = 0;
       55        55             static EXPR mlrx_node = 0;
       56        56                    int  lfr_reg   = 0;
       57        57                    ADR  lfr_temp  = 0;
       58        58                    EXPR lfr_node  = 0;
       59        59
       60        60             void zbk_reset_reg_alloc (void)
       61        61             {
       62        62    1           int i;
       63        63    1           for (i=0; i<NREGS; i++)
       64        64    1              reg_tbl[i].status  = REGSTAT_FREE;
       65        65    1
       66        66    1           mlrx_reg  = 0;
       67        67    1           mlrx_temp = 0;
       68        68    1           mlrx_node = 0;
       69        69    1           lfr_reg   = 0;
       70        70    1           lfr_temp  = 0;
       71        71    1           lfr_node  = 0;
CC.C03    File=zbk$cg_reg:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       72        72    1        }
       73        73
       74        74             static accept_prot_reg = 1;
       75        75
       76        76             int zbk_allocate_reg (unsigned long regbits)
       77        77             {
       78        78    1           int reg=0, best_reg=0, prec, best_prec=0;
       79        79    1           unsigned long b=1L;
       80        80    1
       81        81    1           reg_tbl[REG_F ].status =
       82        82    1           reg_tbl[REG_DF].status =
       83        83    1           reg_tbl[REG_AQ].status = max (reg_tbl[REG_A].status, reg_tbl[REG_Q].status)
                               ;
       84        84    1
       85        85    1           while (b <= regbits) {
       86        86    2              if (b & regbits) {
       87        87    3                 prec = allocation_prec[reg];
       88        88    3                 switch (reg_tbl[reg].status) {
       89        89    4                 case REGSTAT_BUSYH:
       90        90    4                 case REGSTAT_BUSY:
       91        91    4                 case REGSTAT_REGVAR:  break;
       92        92    4                 case REGSTAT_LFR:
       93        93    4                 case REGSTAT_MLRX:    if (!accept_prot_reg) break;
       94        94    4                                       prec --;
       95        95    4                 case REGSTAT_HOLDING: prec --;
       96        96    4                 case REGSTAT_FREE:    if (prec>best_prec) {
       97        97    5                                          best_prec = prec;
       98        98    5                                          best_reg  = reg;
       99        99    5                                       }
      100       100    4                 }
      101       101    3              }
      102       102    2
      103       103    2              b <<= 1;
      104       104    2              reg ++;
      105       105    2           }
      106       106    1
      107       107    1           if (best_reg>0) return (zbk_allocate_regn (best_reg));
CC.C03    File=zbk$cg_reg:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      108       108    1           zbk_fatal ("Out of regs", 0);
      109       109    1        }
      110       110
      111       111             int zbk_allocate_regn (int reg)
      112       112             {
      113       113    1           reg_tbl[REG_F ].status =
      114       114    1           reg_tbl[REG_DF].status =
      115       115    1           reg_tbl[REG_AQ].status = max (reg_tbl[REG_A].status, reg_tbl[REG_Q].status)
                               ;
      116       116    1
      117       117    1           if (reg_tbl[reg].status == REGSTAT_MLRX) {
      118       118    2              assert (reg == mlrx_reg);
      119       119    2              mlrx_temp = zbk_make_adr_temp (temp_size_reg[reg]);
      120       120    2              instruc (inst_store_reg[reg], RA, reg, mlrx_temp);
      121       121    2              zbk_release_regn (reg);
      122       122    2           }
      123       123    1
      124       124    1           if (reg_tbl[reg].status == REGSTAT_LFR)
      125       125    1              zbk_tempify_lfr_reg ();
      126       126    1
      127       127    1           if (reg_tbl[reg].status > REGSTAT_HOLDING)
      128       128    1              zbk_fatal ("Cannot allocate reg number %d", reg);
      129       129    1
      130       130    1           reg_tbl[reg].status = REGSTAT_BUSY;
      131       131    1           if (reg>=REG_F) reg_tbl[REG_A ].status =
      132       132    1                           reg_tbl[REG_Q ].status =
      133       133    1                           reg_tbl[REG_F ].status =
      134       134    1                           reg_tbl[REG_DF].status =
      135       135    1                           reg_tbl[REG_AQ].status = REGSTAT_BUSY;
      136       136    1           return (reg);
      137       137    1        }
      138       138
      139       139             void zbk_release_regn (int reg)
      140       140             {
      141       141    1           if (reg_tbl[reg].status != REGSTAT_BUSYH)
      142       142    1              reg_tbl[reg].status = REGSTAT_FREE;
      143       143    1           else
CC.C03    File=zbk$cg_reg:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      144       144    1              reg_tbl[reg].status = REGSTAT_HOLDING;
      145       145    1
      146       146    1           if (reg>=REG_F) reg_tbl[REG_A ].status =
      147       147    1                           reg_tbl[REG_Q ].status =
      148       148    1                           reg_tbl[REG_F ].status =
      149       149    1                           reg_tbl[REG_DF].status =
      150       150    1                           reg_tbl[REG_AQ].status = REGSTAT_FREE;
      151       151    1        }
      152       152
      153       153             void zbk_release_adr_xp (ADR adr)
      154       154             {
      155       155    1           int xr = adr->xr;
      156       156    1           if (xr) {
      157       157    2              if (xr>=TAG_A) zbk_release_regn (adr->xr);
      158       158    2              else           zbk_release_regn (adr->xr-TAG_AU+TAG_A);
      159       159    2           }
      160       160    1
      161       161    1           if (adr->pr) zbk_release_regn (adr->pr);
      162       162    1        }
      163       163
      164       164             void zbk_declare_mlrx_reg (ADR node)
      165       165             {
      166       166    1           int reg = node->xr;
      167       167    1           mlrx_reg  = 0;
      168       168    1           mlrx_temp = 0;
      169       169    1           mlrx_node = 0;
      170       170    1           if (reg == 0) return;
      171       171    1           if (reg_tbl[reg].status != REGSTAT_BUSY) return;
      172       172    1
      173       173    1           assert ((1L<<reg) & IREGS);
      174       174    1           reg_tbl[reg].status = REGSTAT_MLRX;
      175       175    1           mlrx_reg  = reg;
      176       176    1           mlrx_temp = 0;
      177       177    1           mlrx_node = node;
      178       178    1        }
      179       179
      180       180             void zbk_reload_mlrx_reg (void)
CC.C03    File=zbk$cg_reg:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=6  
      181       181             {
      182       182    1           int new_reg;
      183       183    1
      184       184    1           if (!mlrx_temp) return;
      185       185    1
      186       186    1           accept_prot_reg = 0;
      187       187    1           new_reg = zbk_allocate_reg (IREGS);  /* !!!But don't protect!!! */
      188       188    1           accept_prot_reg = 1;
      189       189    1
      190       190    1           instruc (inst_load_reg[new_reg], RA, new_reg, mlrx_temp);
      191       191    1           (mlrx_node)->xr = new_reg;
      192       192    1        }
      193       193
      194       194             void zbk_declare_lfr_reg (EXPR lfr, int reg)
      195       195             {
      196       196    1           assert (reg_tbl[reg].status == REGSTAT_BUSY);
      197       197    1           reg_tbl[reg].status = REGSTAT_LFR;
      198       198    1           if (reg>=REG_F) reg_tbl[REG_A ].status =
      199       199    1                           reg_tbl[REG_Q ].status =
      200       200    1                           reg_tbl[REG_F ].status =
      201       201    1                           reg_tbl[REG_DF].status =
      202       202    1                           reg_tbl[REG_AQ].status = REGSTAT_LFR;
      203       203    1           lfr_reg = reg;
      204       204    1           lfr_temp = 0;
      205       205    1           lfr_node = lfr;
      206       206    1
      207       207    1           lfr->opcode = op_reg;
      208       208    1           lfr->reg = reg;
      209       209    1        }
      210       210
      211       211             void zbk_tempify_lfr_reg (void)
      212       212             {
      213       213    1        int len;
      214       214    1
      215       215    1           if (!lfr_reg) goto Kill;
      216       216    1           len = temp_size_reg[lfr_reg];
      217       217    1           lfr_temp = zbk_make_adr_temp (len);
CC.C03    File=zbk$cg_reg:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=7  
      218       218    1           zbk_harden_temp();
      219       219    1           instruc (inst_store_reg[lfr_reg], RA, lfr_reg, lfr_temp);
      220       220    1           zbk_release_regn (lfr_reg);
      221       221    1           lfr_reg = 0;
      222       222    1
      223       223    1           lfr_node->opcode = (len==4)? op_lol:op_ldl;
      224       224    1           lfr_node->argval = lfr_temp->argval;
      225       225    1           lfr_node->pr     = lfr_temp->pr;
      226       226    1
      227       227    1        Kill:
      228       228    1           zbk_reset_reg_alloc ();
      229       229    1        }
      230       230
      231       231             int zbk_Areg_useable (void)
      232       232             {
      233       233    1           switch (reg_tbl[REG_A].status) {
      234       234    2           case REGSTAT_FREE:    return 1;
      235       235    2           case REGSTAT_HOLDING: reg_tbl[REG_A].status = REGSTAT_FREE; return 1;
      236       236    2           }
      237       237    1           return 0;
      238       238    1        }
      239       239
      240       240             int zbk_is_holding_reg (unsigned long regset, EXPR node)
      241       241             {
      242       242    1           int reg;
      243       243    1           for (reg=0; reg<NREGS; reg++) {
      244       244    2              if (((1L<<reg) & regset) ==0) continue;
      245       245    2              if (reg_tbl[reg].status != REGSTAT_HOLDING) continue;
      246       246    2              if (reg_tbl[reg].ofs != node->argval) continue;
      247       247    2              if (!reg_tbl[reg].sym && !node->argstr) goto found;
      248       248    2              if ( reg_tbl[reg].sym &&  node->argstr
      249       249    2                 && 0==strcmp(reg_tbl[reg].sym, node->argstr)) goto found;
      250       250    2           }
      251       251    1           return 0;
      252       252    1
      253       253    1        found:
      254       254    1           reg_tbl[reg].status = REGSTAT_BUSYH;
CC.C03    File=zbk$cg_reg:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=8  
      255       255    1           return (reg);
      256       256    1        }
      257       257
      258       258             void zbk_hold_reg (int reg, EXPR node)
      259       259             {
      260       260    1           reg_tbl[reg].status = REGSTAT_BUSYH; /* back to HOLDING when released */
      261       261    1           reg_tbl[reg].sym = node->argstr;
      262       262    1           reg_tbl[reg].ofs = node->argval;
      263       263    1        }
      264       264
      265       265             void zbk_spoil_hold_var (EXPR node)
      266       266             {
      267       267    1           int i;
      268       268    1
      269       269    1           for (i=0; i<NREGS; i++) {
      270       270    2              if (reg_tbl[i].status == REGSTAT_HOLDING) {
      271       271    3                 if ( reg_tbl[i].ofs !=  node->argval) continue;
      272       272    3                 if (!reg_tbl[i].sym && !node->argstr) goto found;
      273       273    3                 if (!reg_tbl[i].sym &&  node->argstr) continue;
      274       274    3                 if ( reg_tbl[i].sym && !node->argstr) continue;
      275       275    3                 if ( 0!=strcmp(reg_tbl[i].sym,node->argstr)) continue;
      276       276    3              found:
      277       277    3                 reg_tbl[i].status = REGSTAT_FREE;
      278       278    3                 reg_tbl[i].sym = 0;
      279       279    3                 reg_tbl[i].ofs = 0;
      280       280    3              }
      281       281    2           }
      282       282    1        }
      283       283
      284       284             void zbk_spoil_hold_all (void)
      285       285             {
      286       286    1           int i;
      287       287    1
      288       288    1           for (i=0; i<NREGS; i++) {
      289       289    2              if (reg_tbl[i].status == REGSTAT_HOLDING) {
      290       290    3                 reg_tbl[i].status = REGSTAT_FREE;
      291       291    3                 reg_tbl[i].sym = 0;
CC.C03    File=zbk$cg_reg:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=9  
      292       292    3                 reg_tbl[i].ofs = 0;
      293       293    3              }
      294       294    2           }
      295       295    1        }
      296       296
---  Include file information  ---

   assert:h.:LIBRARY. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   zbk$cg_tree:h.:ZBC3TOU. is referenced
   zbk$cg_inst:h.:ZBC3TOU. is referenced
   zbk$cg_funs:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbk$cg_reg:c.:ZBC3TSI
