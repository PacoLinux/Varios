/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
RUMSCRUB:  PROC MAIN;
%INCLUDE B$JIT;
%INCLUDE VX_MACRO_C;
%INCLUDE B$OBJECT_C;
%LIST;
%VX$SC;
%PLIST;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE B_ERRORS_C;
%B$EXCFR;
%B$ALT;
%B$TCB;
DCL B$TCB$ PTR SYMREF;
%VLP_ERRCODE(FPTN=ERR,STCLASS=STATIC SYMDEF);
DCL RU1 DCB;
DCL M$LO DCB;
 
%F$DCB;
%LIST;
%B$HEAD (NAME=B$HEAD1,STCLASS=STATIC);
%B$DNAME;
%B$RUBIRTH (NAME=B$RUBIRTH1,STCLASS=STATIC);
%B$RUBIRTH (NAME=B$RUBIRTH2,STCLASS=STATIC);
DCL 1 B$RUBIRTHKEY STATIC ALIGNED,
      2 L UBIN BYTE INIT(5) UNAL,
      2 C CHAR(5) UNAL INIT('BIRTH');
%B$RUHEADKEY;
%B$RUKEY;
%B$RUMKEY (NAME=B$RUMKEY1,STCLASS=STATIC);
%B$RUMKEY (NAME=B$RUMKEY2,STCLASS=STATIC);
%B$RECORDSUBS;
%PLIST;
%FPT_OPEN(FPTN=OPENRU,
         STCLASS=STATIC,
         FUN=UPDATE,
         EXIST=OLDFILE,
         ACS=SEQUEN,
         SHARE=ALL,
         DCB=RU1,
         NAME=VLP_NAME,
         ACCT=VLP_ACCT,
         ASN=FILE);
%VLP_NAME(FPTN=VLP_NAME);
%VLP_ACCT(FPTN=VLP_ACCT);
%FPT_READ     (FPTN = READ_RU_HEAD1,
              DCB = RU1,
              BUF = B$HEAD1,
              KEY = B$RUHEADKEY,
              KEYS = YES);
%FPT_READ     (FPTN = READ_RU_BIRTH1,
              DCB = RU1,
              BUF = B$RUBIRTH1,
              KEY = B$RUBIRTHKEY,
              KEYS = YES);
 
%FPT_WRITE     (FPTN = WRITE_RU_BIRTH1,
              DCB = RU1,
              BUF = B$RUBIRTH1,
              KEY = B$RUBIRTHKEY);
 
%FPT_WRITE(FPTN=WRITE_LO,BUF=OUTPUT,DCB=M$LO);
%FPT_DELREC(FPTN=DRUMLIST,DCB=RU1,KEY=B$RUMKEY1,LKEY=B$RUMKEY2);
DCL B$JIT$ PTR SYMREF;
DCL I UBIN WORD ALIGNED;
DCL J UBIN WORD ALIGNED;
DCL OUTPUT CHAR (80) STATIC;
DCL 1 ACCOUNT CALIGNED STATIC,
   2 COUNT UBIN BYTE INIT (8) UNAL,
   2 TEXT CHAR (8) UNAL;
DCL 1 NAME CALIGNED STATIC,
   2 COUNT UBIN BYTE INIT (31) UNAL,
   2 TEXT CHAR (31) UNAL;
DCL MAXVALUE BIT(36) STATIC INIT('111111111111111111111111111111111111'B);
DCL MAXVAL REDEF MAXVALUE UBIN;
DCL MXVALUE BIT(18) STATIC UNAL INIT('111111111111111111'B);
DCL MXVAL REDEF MXVALUE UBIN HALF UNAL;
DCL XUR$ERRMSG ENTRY (7) ALTRET;
 
%EJECT;
CALL INDEX (I, ' ', B$JIT.CCBUF);
DO WHILE ((I < 80 AND SUBSTR (B$JIT.CCBUF, I, 1) = ' '));
   I = I + 1;
   END;
 
J = I;
 
DO UNTIL (SUBSTR (B$JIT.CCBUF, J, 1) = ' ' OR
          SUBSTR (B$JIT.CCBUF, J, 1) = '.') ;
   J = J + 1;
   END;
 
VLP_NAME.NAME#=SUBSTR (B$JIT.CCBUF, I, J - I);
VLP_NAME.L# = J-I;
 
IF SUBSTR (B$JIT.CCBUF, J, 1) = '.'
THEN DO;
 
   J = J + 1;
   I = J;
   DO WHILE (SUBSTR (B$JIT.CCBUF, I, 1) ~= ' ' );
      I = I + 1;
      END;
   VLP_ACCT.ACCT#=SUBSTR (B$JIT.CCBUF, J, I);
   END;
ELSE DO;
   VLP_ACCT.ACCT# =B$JIT$->B$JIT.ACCN;
END;
        CALL M$OPEN(OPENRU) ALTRET(NORU);
 
        B$RUMKEY1.TYPE = %TYPRUM;
        B$RUMKEY1.UTS = 0;
        B$RUMKEY1.SEQ = 0;
        B$RUMKEY1.NODE = 0;
 
        B$RUMKEY2.TYPE = %TYPRUM;
        B$RUMKEY2.UTS = MAXVAL;
        B$RUMKEY2.SEQ = MXVAL;
        B$RUMKEY2.NODE = MXVAL;
        CALL M$DELREC(DRUMLIST) ALTRET(NODEL);
        CALL M$READ (READ_RU_BIRTH1) ALTRET (NOREAD);
        IF B$RUBIRTH1.COUNT = 0
        THEN GOTO NORUM;
        B$RUBIRTH1.COUNT = 0;
        B$RUBIRTH1.RUMED_UTS = 0;
        CALL M$WRITE (WRITE_RU_BIRTH1) ALTRET (NORUM);
        OUTPUT = '*** NORMAL EXIT';
FINISH: ;
        CALL M$WRITE(WRITE_LO);
        RETURN;
NOREAD: ;
        OUTPUT = '***ERROR READING RU ';
        GOTO ERROR;
NORU:  ;
        OUTPUT='**ERROR OPENING RU';
        GOTO ERROR;
NODEL:  ;
        OUTPUT='*** ERROR DELETING RUMLIST';
        GOTO ERROR;
NORUM:  ;
        OUTPUT = '*** RUM COUNT = 0';
        GOTO ERROR;
ERROR:  ;
        CALL XUR$ERRMSG(B$TCB$->B$TCB.ALT$->B$ALT.ERR);
        CALL M$WRITE(WRITE_LO);
        RETURN;
%EJECT;
READ:   PROC(DCB#,BUF$,BOUND,REC#,SIZE,FID#,EOF) ALTRET;
 
%FPT_READ  (FPTN=READ_RU_RECORD,
            DCB=RU1,
            KEY=B$RUKEY,
            KEYS=YES);
 
DCL BOUND     UBIN;
DCL DCB#      UBIN;                     /*  INPUT PARAMETERS                  */
DCL FID#      UBIN;
 
DCL BUF$       PTR;                     /*  INPUT AND OUTPUT                  */
DCL REC#      UBIN;
 
DCL VFC       CHAR(1);                  /* OUTPUT PARAMETERS                  */
DCL SIZE      UBIN;
DCL EOF       BIT(1) ALIGNED;
 
DCL VFC_CHAR      CHAR(1) BASED;
DCL DCB$ PTR;
 
%EJECT;
 
        READ_RU_RECORD.BUF_.BOUND = BOUND;
        READ_RU_RECORD.BUF_.BUF$ = BUF$;
        READ_RU_RECORD.V.DCB# = DCB#;
        DCB$ = DCBADDR(DCB#);
        REC# = REC# + 1;
        CALL M$READ (READ_RU_RECORD) ALTRET (READ_ERR);
        SIZE = DCB$->F$DCB.ARS#;
        RETURN;
 
READ_ERR: IF (B$TCB$->B$TCB.ALT$->B$EXCFR.ERR.CODE = %E$EOF)
        THEN DO;
           EOF = '1'B;
           RETURN;
           END;
        ELSE ALTRETURN;
 
END READ;
END RUMSCRUB;
