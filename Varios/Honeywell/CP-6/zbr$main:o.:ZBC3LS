

CC.C03    File=zbr$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=1  
        1         1             #include "zbr$root_interface:h"
        2         2             #include <stdio:h>
        3         3             #include <alloc:h>
        4         4             #include <valloc:h>
        5         5             #include <errno.h>
        6         6
        7         7             extern struct p_node COMMAND;                    /* Built by Partrge */
        8         8             int user_parse();
        9         9
       10        10             struct p_pcb pcb = {0, &COMMAND, 0, 0, user_parse, 0, 1, 0, 0,
       11        11    1                            0, 0, 0, 0, 0, '"', '\000', '"', '\000', 0, 1 };
       12        12             #define BC     0
       13        13             #define DCB_LS 1
       14        14             #define DCB_OU 1
       15        15             #define DCB_UI 1
       16        16             #define DMAP   1
       17        17             #define LO     1
       18        18             #define LS     1
       19        19             #define NSTD   1
       20        20             #define OU     1
       21        21             #define PMAP   1
       22        22             #define SCHEMA 1
       23        23             #define SO     0
       24        24             #define SRCH   1
       25        25             #define SRCH_FIL 1
       26        26             #define SRCH_SIZ 1
       27        27             #define UI     1
       28        28             #define UREF   0
       29        29             #define WARN   0
       30        30             #define XREF   0
       31        31
       32        32             struct xux_legal_options legal_options = INIT_XUX_LEGAL_OPTIONS;
       33        33
       34        34             struct xux_std_options  std_options;
       35        35
       36        36             struct xux_srch_list    zb_srch_list = INIT_XUX_SRCH_LIST;
       37        37
CC.C03    File=zbr$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=2  
       38        38
       39        39             #define BC_UNIT        0
       40        40             #define LEGAL_OPTIONS  &legal_options
       41        41             #define STD_OPTIONS    &std_options
       42        42             #define SRCH_LIST      &zb_srch_list
       43        43             #define USER_ROUTINE   user_parse
       44        44             #define USER_NODES     &COMMAND
       45        45             #define DCB1 4
       46        46             #define DCB2 0
       47        47
       48        48             struct xux_param xux_parameter = INIT_XUX_PARAM;
       49        49             struct arguments base_arg = {(struct clist *)0, (struct dlist *)0, 0}, *root_a
                               rg = &base_arg;
       50        50
       51        51             /* data shared by user_parse() and main() */
       52        52
       53        53             unsigned int pp_only = 0;
       54        54             unsigned int any_option = 0;                     /* options in command line */

       55        55             unsigned int vbacking = 80;
       56        56             unsigned int warn_lev = 0;
       57        57
       58        58             extern   char *st_alloc();
       59        59             void     zb_listing_output_ls();
       60        60             extern   int Mvmalloc;
       61        61             extern   int zb_numwarns;
       62        62
       63        63             int user_parse(node)
       64        64               struct parse_out **node;
       65        65             {
       66        66    1        /*
       67        67    1         * A node is an option in the command line, for instance,
       68        68    1         *    ANSI is a node, NOPT is a node as well; DEFINE
       69        69    1         *    is a node with subblks which are options of DEFINE.
       70        70    1         */
       71        71    1
       72        72    1        #define     cast_mynode   ((struct parse_sym *) mynode)
CC.C03    File=zbr$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=3  
       73        73    1
       74        74    1          int CrossType;
       75        75    1          unsigned int len;
       76        76    1          struct parse_out *mynode;
       77        77    1          static char dname[80] = "";                    /* DEFINEd identifer name */
       78        78    1          static char buf[80]   = "";
       79        79    1          static unsigned int alignment = 0;             /* CROSS option */
       80        80    1          static unsigned int size = 0;                  /* CROSS option */
       81        81    1          struct dlist *def;
       82        82    1          struct clist *cross;
       83        83    1          struct dlist *h_dlist = (struct dlist *)0;
       84        84    1          struct clist *h_clist = (struct clist *)0;
       85        85    1        #define new_dlist()  ((struct dlist *) st_alloc((char **)&h_dlist, sizeof(stru
                               ct dlist), 20))
       86        86    1        #define new_clist()  ((struct clist *) st_alloc((char **)&h_clist, sizeof(stru
                               ct clist), 20))
       87        87    1          int Ndefine = 0;                               /* UnDefined */
       88        88    1          int i;
       89        89    1
       90        90    1          Mvmalloc = 0;                                  /* using alloc instaed of val
                               loc */
       91        91    1          for (i = 0 ; i < (*node)->nsublks ; i++ ) {
       92        92    2              mynode = (*node)->sublk[i];
       93        93    2
       94        94    2              switch   (mynode->code)   {
       95        95    3
       96        96    3              default:
       97        97    3                    break;
       98        98    3              case ANSI:
       99        99    3                    (root_arg->options)['A'] = 1;        /* ANSI option */
      100       100    3                    break;
      101       101    3              case CNAME:                                /* DEFINE(name) or NDEFINE(na
                               me) */
      102       102    3                    len = (cast_mynode->text)[0] - '\0';
      103       103    3                    strncpy(buf, cast_mynode->text+1, len);
      104       104    3                    buf[len] = '\0';
      105       105    3                    def = new_dlist();
CC.C03    File=zbr$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=4  
      106       106    3                    strcpy(def->dname=Malloc(strlen(buf)+1), buf);
      107       107    3                    def->type = Ndefine;
      108       108    3                    def->buf = (char *)0;
      109       109    3                    def->next = root_arg->DefineList;
      110       110    3                    root_arg->DefineList = def;
      111       111    3                    break;
      112       112    3              case DNAME1:                               /* DEFINE(name=text) */
      113       113    3                    len = (cast_mynode->text)[0] - '\0';
      114       114    3                    strncpy(buf,cast_mynode->text+1,len);
      115       115    3                    buf[len] = '\0';
      116       116    3                    def = new_dlist();
      117       117    3                    strcpy(def->dname=Malloc(strlen(dname)+1), dname);
      118       118    3                    strcpy(def->buf=Malloc(strlen(buf)+1), buf);
      119       119    3                    def->type = 0;                       /* Define */
      120       120    3                    def->next = root_arg->DefineList;
      121       121    3                    root_arg->DefineList = def;
      122       122    3                    break;
      123       123    3              case L:
      124       124    3                    (root_arg->options)['t'] = 1;        /* print symbol table w/long
                               form */
      125       125    3                    break;
      126       126    3              case S:
      127       127    3                    (root_arg->options)['f'] = 1;        /* dump symbol table w/short
                               form */
      128       128    3                    break;
      129       129    3              case DATAFLOW:
      130       130    3                    (root_arg->options)['d'] = 1;        /* procedure compile time xre
                               f */
      131       131    3                    break;
      132       132    3              case HASH:
      133       133    3                    (root_arg->options)['h'] = 1;        /* print hash statistics */
      134       134    3                    break;
      135       135    3              case MEMORY:
      136       136    3                    (root_arg->options)['m'] = 1;        /* print memory alloc statist
                               ics */
      137       137    3                    break;
      138       138    3              case NUNIVERSAL:
CC.C03    File=zbr$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=5  
      139       139    3                    (root_arg->options)['u'] = 1;        /* unstack L_UNIVERSAL */
      140       140    3                    break;
      141       141    3              case EXPRESSIONS:
      142       142    3                    (root_arg->options)['x'] = 1;        /* dump expressions */
      143       143    3                    break;
      144       144    3              case Short:
      145       145    3                    CrossType = Short;
      146       146    3                    break;
      147       147    3              case Word:
      148       148    3                    CrossType = Word;
      149       149    3                    break;
      150       150    3              case Int:
      151       151    3                    CrossType = Int;
      152       152    3                    break;
      153       153    3              case Long:
      154       154    3                    CrossType = Long;
      155       155    3                    break;
      156       156    3              case Float:
      157       157    3                    CrossType = Float;
      158       158    3                    break;
      159       159    3              case Double:
      160       160    3                    CrossType = Double;
      161       161    3                    break;
      162       162    3              case Pointer:
      163       163    3                    CrossType = Pointer;
      164       164    3                    break;
      165       165    3              case Struct:
      166       166    3                    CrossType = Struct;
      167       167    3                    break;
      168       168    3              case Union:
      169       169    3                    CrossType = Union;
      170       170    3                    break;
      171       171    3              case Right:
      172       172    3                    (root_arg->options)['r'] = 1;
      173       173    3                    break;
      174       174    3              case Left:
      175       175    3                    break;
CC.C03    File=zbr$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=6  
      176       176    3              case ALIGN:
      177       177    3                    len = (cast_mynode->text)[0] - '\0';
      178       178    3                    /* the first byte of TEXTC is number of characters
      179       179    3                       in string 'text.
      180       180    3                    */
      181       181    3                    strncpy(buf, cast_mynode->text+1, len);
      182       182    3                    buf[len] = '\0';
      183       183    3                    alignment = strtoul(buf, (char **) 0, 10);
      184       184    3                    switch (CrossType) {
      185       185    4                       case Struct :
      186       186    4                             if (alignment) {
      187       187    5                                   cross = new_clist();
      188       188    5                                   cross->type = Struct;
      189       189    5                                   cross->align = alignment;
      190       190    5                                   cross->size = 0;
      191       191    5                                   cross->next = root_arg->CrossList;
      192       192    5                                   root_arg->CrossList = cross;
      193       193    5                             }
      194       194    4                             break;
      195       195    4                       case Union :
      196       196    4                             if (alignment) {
      197       197    5                                   cross = new_clist();
      198       198    5                                   cross->type = Union;
      199       199    5                                   cross->align = alignment;
      200       200    5                                   cross->size = 0;
      201       201    5                                   cross->next = root_arg->CrossList;
      202       202    5                                   root_arg->CrossList = cross;
      203       203    5                             }
      204       204    4                             break;
      205       205    4                    }
      206       206    3                    break;
      207       207    3             case SIZE:
      208       208    3                   len = (cast_mynode->text)[0] - '\0';
      209       209    3                   strncpy(buf, cast_mynode->text+1, len);
      210       210    3                   buf[len] = '\0';
      211       211    3                   size = strtoul(buf, (char **)0, 10);
      212       212    3                   cross = new_clist();
CC.C03    File=zbr$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=7  
      213       213    3                   switch (CrossType) {
      214       214    4                      case Short:
      215       215    4                            cross->type = Short;
      216       216    4                            break;
      217       217    4                      case Word:
      218       218    4                            cross->type = Word;
      219       219    4                            break;
      220       220    4                      case Int:
      221       221    4                            cross->type = Int;
      222       222    4                            break;
      223       223    4                      case Long:
      224       224    4                            cross->type = Long;
      225       225    4                            break;
      226       226    4                      case Float:
      227       227    4                            cross->type = Float;
      228       228    4                            break;
      229       229    4                      case Double:
      230       230    4                            cross->type = Double;
      231       231    4                            break;
      232       232    4                      case Pointer:
      233       233    4                            cross->type = Pointer;
      234       234    4                            break;
      235       235    4                      default:
      236       236    4                            printf("Oops! CrossType = %d\n", CrossType);
      237       237    4                            break;
      238       238    4                   }                                     /* switch */
      239       239    3                   cross->size = size;
      240       240    3                   cross->align = alignment;
      241       241    3                   cross->next = root_arg->CrossList;
      242       242    3                   root_arg->CrossList = cross;
      243       243    3                   break;
      244       244    3             case IDLEN:
      245       245    3                   len = (cast_mynode->text)[0] - '\0';
      246       246    3                   strncpy(buf, cast_mynode->text+1, len);
      247       247    3                   buf[len] = '\0';
      248       248    3                   root_arg->idfsize = strtoul(buf, (char **)0, 10);
      249       249    3                   break;
CC.C03    File=zbr$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=8  
      250       250    3             case KR:
      251       251    3                   (root_arg->options)['R'] = 1;         /* restrict K & R version */
      252       252    3                   break;
      253       253    3             case UNIXSRCH:
      254       254    3                   (root_arg->options)['X'] = 1;
      255       255    3                   break;
      256       256    3             case NLNDIRECT:
      257       257    3                   (root_arg->options)['P'] = 1;         /* preprocess only, w/o line
                               directives */
      258       258    3                   pp_only = 1;
      259       259    3                   break;
      260       260    3             case DNAME:
      261       261    3                   len = (cast_mynode->text)[0] - '\0';
      262       262    3                   strncpy(dname, cast_mynode->text+1, len);
      263       263    3                   dname[len] = '\0';
      264       264    3                   break;
      265       265    3             case NDEFINE:
      266       266    3                   Ndefine = 1;
      267       267    3                   break;
      268       268    3             case PREPROCESS:
      269       269    3                   pp_only = 1;
      270       270    3                   break;
      271       271    3             case DEFINE:
      272       272    3                   Ndefine = 0;
      273       273    3                   break;
      274       274    3             case OUGENQ:
      275       275    3                   (root_arg->options)['4'] = 1;         /* -Q in OUGEN */
      276       276    3                   break;
      277       277    3             case INSTRUCTIONS:
      278       278    3                   (root_arg->options)['0'] = 1;         /* -A in OUGEN */
      279       279    3                   break;
      280       280    3             case DELETED:
      281       281    3                   (root_arg->options)['1'] = 1;         /* -D in OUGEN */
      282       282    3                   break;
      283       283    3             case PLY:
      284       284    3                   len = (cast_mynode->text)[0] - '\0';
      285       285    3                   strncpy(buf, cast_mynode->text+1, len);
CC.C03    File=zbr$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=9  
      286       286    3                   buf[len] = '\0';
      287       287    3                   root_arg->cgply = strtoul(buf, (char **)0, 10);
      288       288    3                   break;
      289       289    3             case WEIGHT:
      290       290    3                   len = (cast_mynode->text)[0] - '\0';
      291       291    3                   strncpy(buf, cast_mynode->text+1, len);
      292       292    3                   buf[len] = '\0';
      293       293    3                   root_arg->cgweight = strtoul(buf, (char **)0, 10);
      294       294    3                   break;
      295       295    3             case TEMP:
      296       296    3                   root_arg->temp_file = 1;
      297       297    3                   break;
      298       298    3             case NWARN:
      299       299    3                   (root_arg->options)['w'] = 1;         /* No warnings */
      300       300    3                   break;
      301       301    3             case WARN_OPT:
      302       302    3                    if (mynode->nsublks) {
      303       303    4                       mynode = mynode->sublk[0];
      304       304    4                       len = (cast_mynode->text)[0] - '\0';
      305       305    4                       strncpy(buf, cast_mynode->text+1, len);
      306       306    4                       buf[len] = '\0';
      307       307    4                       warn_lev = strtoul(buf, (char **)0, 10);
      308       308    4                       if (!warn_lev) warn_lev = 0;
      309       309    4                    }
      310       310    3                    break;
      311       311    3             case VBACKING:
      312       312    3                   len = (cast_mynode->text)[0] - '\0';
      313       313    3                   strncpy(buf, cast_mynode->text+1, len);
      314       314    3                   buf[len] = '\0';
      315       315    3                   vbacking = strtoul(buf, (char **)0, 10);
      316       316    3                   if (!vbacking) vbacking = 80;
      317       317    3                   break;
      318       318    3             case LU:
      319       319    3                   root_arg->opt_lu = 1;
      320       320    3                   break;
      321       321    3             case NLU:
      322       322    3                   root_arg->opt_lu = 0;
CC.C03    File=zbr$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=10 
      323       323    3                   break;
      324       324    3             case OPTUI:
      325       325    3                   root_arg->opt_ui = 1;
      326       326    3                   break;
      327       327    3             case SFS:
      328       328    3                   len = (cast_mynode->text)[0] - '\0';
      329       329    3                   strncpy(buf, cast_mynode->text+1, len);
      330       330    3                   buf[len] = '\0';
      331       331    3                   strcpy(root_arg->sfs=Malloc(strlen(buf)+1), buf);
      332       332    3                   break;
      333       333    3             case SYMBOLLENGTH:
      334       334    3                   len = (cast_mynode->text)[0] - '\0';
      335       335    3                   strncpy(buf, cast_mynode->text+1, len);
      336       336    3                   buf[len] = '\0';
      337       337    3                   root_arg->symbol_length = strtoul(buf, (char **)0, 10);
      338       338    3                   break;
      339       339    3             case ENTRYLENGTH:
      340       340    3                   len = (cast_mynode->text)[0] - '\0';
      341       341    3                   strncpy(buf, cast_mynode->text+1, len);
      342       342    3                   buf[len] = '\0';
      343       343    3                   root_arg->entry_length = strtoul(buf, (char **)0, 10);
      344       344    3                   break;
      345       345    3             case WRITEABLE:
      346       346    3                   root_arg->str_write = 1;
      347       347    3                   break;
      348       348    3             case READONLY:
      349       349    3                   root_arg->str_read  = 1;
      350       350    3                   break;
      351       351    3             case BUILTINS:
      352       352    3                   len = setup_builtin_flags(mynode);
      353       353    3                   if (len == 0)
      354       354    3                      root_arg->bi_on.bi_flags = -1;
      355       355    3                   else root_arg->bi_on.bi_flags = len;
      356       356    3                   break;
      357       357    3             case NOBUILTINS:
      358       358    3                   len = setup_builtin_flags(mynode);
      359       359    3                   if (len == 0)
CC.C03    File=zbr$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=11 
      360       360    3                      root_arg->bi_off.bi_flags = -1;
      361       361    3                   else root_arg->bi_off.bi_flags = len;
      362       362    3                   break;
      363       363    3             case OPTIMIZE:
      364       364    3                   len = setup_builtin_flags(mynode);
      365       365    3                   if (len == 0)
      366       366    3                      root_arg->opt_on.op_flags = -1;
      367       367    3                   else root_arg->opt_on.op_flags = len;
      368       368    3                   break;
      369       369    3             case NOOPTIMIZE:
      370       370    3                   len = setup_builtin_flags(mynode);
      371       371    3                   if (len == 0)
      372       372    3                      root_arg->opt_off.op_flags = -1;
      373       373    3                   else root_arg->opt_off.op_flags = len;
      374       374    3                   break;
      375       375    3             case CHSIGNED:
      376       376    3                   root_arg->chsigned = 1;
      377       377    3                   break;
      378       378    3             case CHUNSIGNED:
      379       379    3                   root_arg->chsigned = 0;
      380       380    3                   break;
      381       381    3             }
      382       382    2          }                                              /*  end of for loop */
      383       383    1          return 1;
      384       384    1        }
      385       385
      386       386             #define option(x) ((std_options.x)? 'y' : 'n')
      387       387
      388       388             char *srch_table[MAXINCL] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      389       389             int srch_pos = 1;                                /* the first element is reser
                               ved for WorkingDir */
      390       390
      391       391             #define call_break(status) set_break_vars("%s\n", &status, (char **)0,\
      392       391                     (char **)0, (int *)0, (char **)0, (int *)0, (int *)0)
      393       393             char *after_cpp   = "Finishing preprocessor..";
      394       394             char *after_cem   = "Finishing semantics.....";
      395       395             char *after_opt   = "Finishing optimizer.....";
CC.C03    File=zbr$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=12 
      396       396             char *after_cg    = "Finishing codegen.......";
      397       397             char *after_ougen = "Finishing ougen.........";
      398       398
      399       399             main(argc, argv)
      400       400               char *argv[];
"zbr$main:c.:ZBC3TSI", line 400: (warning) identifier "argc" is not used
      401       401             {
      402       402    1        int i;
      403       403    1        extern cpp_main();
      404       404    1        extern cem_main();
      405       405    1        extern char *GetFileName();
      406       406    1
      407       407    1
      408       408    1        if (!XUX_COMMON_OPTIONS(&xux_parameter)) {
      409       409    2           if (xux_parameter.error && 0 != xux_parameter.error_code.err)  {
      410       410    3              XBI_SET_ERRNO(&xux_parameter.error_code);
      411       411    3              exit(errno);
      412       412    3              }
      413       413    2           else exit(4);
      414       414    2           }
      415       415    1          Mvmalloc = 1;                                  /* using valloc */
      416       416    1          vmeminit(4096, 3, vbacking);
      417       417    1          for (i = 0; i<zb_srch_list.num ; i++ )  {
      418       418    2             char buf[80];
      419       419    2             int  ins = 0;
      420       420    2             int  j;
      421       421    2             buf[0] = 0;
      422       422    2             if (zb_srch_list.acct_list[i].sn_wsn[4] > ' ')   {
      423       423    3                j = 4;
      424       424    3                strcpy(buf,"DP#"), ins = 3;
      425       425    3                do {
      426       426    4                   buf[ins++] = zb_srch_list.acct_list[i].sn_wsn[j++];
      427       427    4                   }
      428       428    3                while ( j < 10  &&  zb_srch_list.acct_list[i].sn_wsn[j] != ' ');
      429       429    3                buf[ins++] = '/', buf[ins] = 0;
      430       430    3                }
      431       431    2             if (zb_srch_list.acct_list[i].filename[0])  {
CC.C03    File=zbr$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=13 
      432       432    3                zb_srch_list.acct_list[i].filename[ zb_srch_list.acct_list[i].filename
                               [0]+1 ] = 0;
      433       433    3                strcat(buf,&zb_srch_list.acct_list[i].filename[1]);
      434       434    3                ins += zb_srch_list.acct_list[i].filename[0];
      435       435    3                }
      436       436    2             buf[ins++] = '.', j=0;
      437       437    2             while (zb_srch_list.acct_list[i].acct[j] != ' ' && j<8)
      438       438    2                buf[ins++] = zb_srch_list.acct_list[i].acct[j++];
      439       439    2             buf[ins++] = '.', j = 0;
      440       440    2             while (zb_srch_list.acct_list[i].pass[j] != ' ' && j<8)
      441       441    2                buf[ins++] = zb_srch_list.acct_list[i].pass[j++];
      442       442    2
      443       443    2             buf[ins] = 0;
      444       444    2             srch_table[srch_pos] = Malloc(strlen(buf) + 1);
      445       445    2             strcpy(srch_table[srch_pos++], buf);
      446       446    2
      447       447    2          }
      448       448    1
      449       449    1          if (root_arg->opt_on.op_flags == -1)
      450       450    1             root_arg->opt_on.op_flags ^= root_arg->opt_off.op_flags & root_arg->opt_o
                               n.op_flags;
      451       451    1          if (root_arg->opt_off.op_flags == -1)
      452       452    1             root_arg->opt_off.op_flags ^= root_arg->opt_on.op_flags & root_arg->opt_o
                               ff.op_flags;
      453       453    1
      454       454    1          if (root_arg->opt_off.b.op_peephole)
      455       455    1             (root_arg->options)['n'] = 1;
      456       456    1          if (root_arg->opt_off.b.op_registers)
      457       457    1             (root_arg->options)['2'] = 1;
      458       458    1          else (root_arg->options)['3'] = 1;
      459       459    1
      460       460    1          if (root_arg->opt_on.b.op_global)
      461       461    1             root_arg->global_opt = 1;
      462       462    1          if (root_arg->opt_on.b.op_inline)
      463       463    1             root_arg->inline     = 1;
      464       464    1          if (root_arg->opt_on.b.op_subexpr)
      465       465    1             root_arg->subexpr    = 1;
CC.C03    File=zbr$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=14 
      466       466    1          if (root_arg->opt_on.b.op_strength)
      467       467    1             root_arg->strength   = 1;
      468       468    1          if (root_arg->opt_on.b.op_loopbranch)
      469       469    1             ;
      470       470    1          if (root_arg->opt_on.b.op_constprop)
      471       471    1             ;
      472       472    1
      473       473    1         root_arg->prog_name = argv[0];
      474       474    1         for (i=1; i<MAXINCL; i++)
      475       475    1                  (root_arg->srch_table)[i] = srch_table[i];
      476       476    1         root_arg->zb_LS_flag               = std_options.ls;
      477       477    1         root_arg->update_input             = (root_arg->opt_ui) ? 1 : std_options.ui;

      478       478    1         (root_arg->list_options).dmap      = std_options.dmap;
      479       479    1         (root_arg->list_options).mdmap     = std_options.mdmap;
      480       480    1         (root_arg->list_options).lo.code   = std_options.lo.code;
      481       481    1         (root_arg->list_options).lo.data   = std_options.lo.data;
      482       482    1         (root_arg->list_options).pmap.full = std_options.pmap.full;
      483       483    1         (root_arg->list_options).pmap.mini = std_options.pmap.mini;
      484       484    1
      485       485    1
      486       486    1
      487       487    1         if (pp_only) {
      488       488    2            cpp_main(root_arg);
      489       489    2            call_break(after_cpp);
      490       490    2            if (root_arg->zb_LS_flag) zb_listing_output_ls();
      491       491    2         }
      492       492    1         else {
      493       493    2            cem_main(root_arg);
      494       494    2            call_break(after_cem);
      495       495    2            if (!root_arg->err_occurred &&
      496       496    2                std_options.ou)                          /* check OU option */
      497       497    2            {
      498       498    3                vmemscrub();
      499       499    3                if (root_arg->global_opt || root_arg->inline || root_arg->subexpr || r
                               oot_arg->strength) {
      500       500    4                    opt_main(root_arg);
CC.C03    File=zbr$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=15 
      501       501    4                    vmemscrub();
      502       502    4                    ego_main(root_arg);
      503       503    4                }
      504       504    3                else
      505       505    3                    opt_main(root_arg);
      506       506    3                call_break(after_opt);
      507       507    3
      508       508    3                vmemscrub();
      509       509    3                if (root_arg->zb_LS_flag) zb_listing_output_ls();
      510       510    3                cgen_main(root_arg);
      511       511    3                call_break(after_cg);
      512       512    3
      513       513    3            }
      514       514    2            else if (root_arg->zb_LS_flag) zb_listing_output_ls();
      515       515    2         }
      516       516    1         exit( (root_arg->err_occurred) ? 6 : ((zb_numwarns) ? warn_lev : 0));
      517       517    1        }
      518       518
      519       519
      520       520             /*    zbr$dummy   -  This function is only in here because we need to
      521       521                                  get the definition of Z_SYS_FTAB included in
      522       522                                  the root node.  This function is and should not
      523       523                                  be called by anything.                         */
      524       524
      525       525             zbr_dummy() {
      526       526    1           zb_listing_start_listing();
      527       527    1        }
      528       528
      529       529
      530       530
      531       531             /*F*    NAME:       setup_builtin_flags
      532       532                     PURPOSE:    To scan the sub-nodes of this particular
      533       533                                 partrge node and returns bit flags for the
      534       534                                 builtin functions selected.
      535       535             */
      536       536
      537       537             int
CC.C03    File=zbr$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=16 
      538       538             setup_builtin_flags(mynode)
      539       539               struct   parse_out   *mynode;
      540       540             {
      541       541    1          int      nfuns = mynode->nsublks;
      542       542    1          int      i;
      543       543    1          struct   parse_out   *n;
      544       544    1          union    {
      545       545    2             unsigned v;
      546       546    2             struct BuiltIns b;
      547       547    2             }     rv;
      548       548    1
      549       549    1          rv.v = 0;
      550       550    1          for (i=0 ; i < nfuns ; )   {
      551       551    2             n = mynode->sublk[i++];
      552       552    2             rv.v |= 1 << (35 - n->code);
      553       553    2             }
      554       554    1          return rv.v;
      555       555    1        }
---  Include file information  ---

   zbr$root_interface:h.:ZBC3TOU. is referenced
   xu_cp6_c:h.:LIB_E05. is referenced
   xu_macro_c:h.:LIB_E05. is referenced
   xux$interface_m:h.:LIB_E05. is referenced
   stdio:h.:LIB_E05. is referenced
   alloc:h.:ZBC3TOU. is referenced
   valloc:h.:LIB_E05. is referenced
   errno:h.:LIB_E05. is referenced

1 warning was detected in the file zbr$main:c.:ZBC3TSI
