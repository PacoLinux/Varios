/*********************************************************************
*
*      ELF51                 Provide WILMA specific functions for SHREW
*                            [Specially Handled Reports for Errorlog
*                            Watching], using Log File #51.
*/
       ELF51:                          PROC
           (F#,PTR$,EL_RECORD_BUF);
/****************************************************************
 *                                                              *
 *  Copyright (c) Pennsylvania State University Libraries 1986  *
 *                                                              *
 ****************************************************************/
/**
 *                 PARAMETER DECLARATIONS
 **/
DCL    F#                              UBIN   WORD;
DCL    PTR$                            PTR;
/**/
%INCLUDE EL$TABLES.:LIBRARY;
/**/
%LIST;
%EL$HDR            (NAME=EL_RECORD_BUF,
                    STCLASS=PARAM,
                    HDRONLY=NO);
%PLIST;
/**
 *                 SHREW REQUIREMENTS
 **/
%INCLUDE SHREW_C600;
/**/
%INCLUDE SHREW_C6;
/**/
DCL    ELF00                           ENTRY (3);
DCL    ELF_FORMAT                      ENTRY (21);
/**
 *                 WILMA REQUIREMENTS
 **/
%INCLUDE SHREW_C651;
/**/
%LIST;
%WILMA_ELF         (NAME=B$MICOM,NAME2=B$MICOM2,STCLASS="BASED(ENTRY$)");
%PLIST;
/**
 *                 GLOBAL SYMREF REQUIREMENTS
 **/
DCL    DATA (0:260)                    SYMREF
                                       CHAR   (100);
DCL  1 VECTORC                         SYMREF    ALIGNED,
       2 COUNT                         UBIN   WORD,
       2 VECTOR_ (0:260)               VECTOR;
DCL    ELF_TIME                        CHAR   (11)           SYMREF;
DCL    TYPE_51                         SBIN                 SYMREF;
/**
 *                 SYSTEM SOFTWARE REQUIREMENTS
 **/
/**/
%INCLUDE SYSLIB_C61;
/**
 *                 LOCAL VARIABLE DECLARATIONS
 **/
DCL    TEMP                            CHAR   (50);
DCL    YN (0:1)                        CONSTANT
                                       CHAR(1)
                                       INIT('N','Y');
DCL  1 ELF51_TBL                       CONSTANT  SYMDEF      ALIGNED,
       2 MAX#                          UBIN   WORD           UNAL
                                       INIT(28),
       2 TBL (0:27),
         3 TYPE                        UBIN   BYTE           UNAL
                   INIT(  %ELF$WILMA_C, %ELF$WILMA_CQ,
                          %ELF$WILMA_CL, %ELF$WILMA_CP,
                          %ELF$WILMA_CF, %ELF$WILMA_C1, %ELF$WILMA_C2,
                          %ELF$WILMA_D, %ELF$WILMA_DF, %ELF$WILMA_DT,
                          %ELF$WILMA_F1, %ELF$WILMA_F2, %ELF$WILMA_F3,
                          %ELF$WILMA_F4, %ELF$WILMA_F5, %ELF$WILMA_F6,
                          %ELF$WILMA_F7, %ELF$WILMA_F8, %ELF$WILMA_F9,
                          %ELF$WILMA_FA,
                          %ELF$WILMA_Q, %ELF$WILMA_Q1, %ELF$WILMA_Q2,
                          %ELF$WILMA_PW, %ELF$WILMA_PE, %ELF$WILMA_PC,
                          %ELF$WILMA_LOG_ON, %ELF$WILMA_LOG_OFF),
       3 TEXT                          CHAR   (23)         UNAL
                   INIT(  'C/Class Selection',
                          'CQ/from Busy Queue',
                          'CL/Line-to-Line',
                          'CP/Line-to-Port',
                          'CF/Console Initiated',
                          'C1/Primary Symb. Name',
                          'C2/Secondary Symb. Name',
                          'D/Interface Initiated',
                          'DF/Console Forced',
                          'DT/No Data-Timeout',
                          'F1/Unavailable Class',
                          'F2/After Busy Wait',
                          'F3/Unauthorized Class',
                          'F4/Unassigned Class',
                          'F5/Wrong Speed on Class',
                          'F6/Disc during CIP',
                          'F7/Selection? Timeout',
                          'F8/Queue Full',
                          'F9/Matrix Failure',
                          'FA/Switch Full',
                          'Q/Normal',
                          'Q1/Primary Symb. Name',
                          'Q2/Secondary Symb. Name',
                          'PW/Warm Start',
                          'PE/Warm Start w/ Errors',
                          'PC/Cold Start',
                          'LON/Logging On',
                          'LOFF/Logging Off'),
           3 COUNT                     UBIN   WORD
                   INIT(  LENGTHC('C/Class Selection'),
                          LENGTHC('CQ/from Busy Queue'),
                          LENGTHC('CL/Line-to-Line'),
                          LENGTHC('CP/Line-to-Port'),
                          LENGTHC('CF/Console Initiated'),
                          LENGTHC('C1/Primary Symb. Name'),
                          LENGTHC('C2/Secondary Symb. Name'),
                          LENGTHC('D/Interface Initiated'),
                          LENGTHC('DF/Console Forced'),
                          LENGTHC('DT/No Data-Timeout'),
                          LENGTHC('F1/Unavailable Class'),
                          LENGTHC('F2/After Busy Wait'),
                          LENGTHC('F3/Unauthorized Class'),
                          LENGTHC('F4/Unassigned Class'),
                          LENGTHC('F5/Wrong Speed on Class'),
                          LENGTHC('F6/Disc during CIP'),
                          LENGTHC('F7/Selection? Timeout'),
                          LENGTHC('F8/Queue Full'),
                          LENGTHC('F9/Matrix Failure'),
                          LENGTHC('FA/Switch Full'),
                          LENGTHC('Q/Normal'),
                          LENGTHC('Q1/Primary Symb. Name'),
                          LENGTHC('Q2/Secondary Symb. Name'),
                          LENGTHC('PW/Warm Start'),
                          LENGTHC('PE/Warm Start w/ Errors'),
                          LENGTHC('PC/Cold Start'),
                          LENGTHC('LON/Logging On'),
                          LENGTHC('LOFF/Logging Off'));
DCL    I                               SBIN   WORD;
DCL    J                               SBIN   WORD;
DCL    K                               SBIN   WORD;
DCL    SPACES                          STATIC
                                       CHAR   (1)
                                       INIT(' ');
DCL    INFO_SIZE                       SBIN   WORD;
DCL    ENTRY$                          PTR;
DCL    TEXTBUFFER                      BASED (TB$)
                                       CHAR (I);
DCL    TB$                             PTR;
DCL    RAWHDR1                         CONSTANT
                                       CHAR   (0)
                                       INIT('ATIME   MESSAGE');
DCL    RAWHDR2                         CONSTANT
                                       CHAR   (0)
       INIT('A-----  ----------------------------------------------');
DCL  1 SELECTION                       STATIC,
       2 TEXT                          CHAR   (5),
       2 DATA
         REDEF                         TEXT,
         3 TYPE                        CHAR   (1),
         3 NUMBER                      CHAR   (4),
       2 WILDCARDED                    BIT    (1),
       2 FOR_CLAUSE                    BIT    (1);
/**
 *                 PARSING AND WILDCARDING HANDLERS
 **/
%INCLUDE XU_MACRO_C;
%INCLUDE XUW_MACRO_C;
/**/
%PARSE$OUT         (STCLASS="BASED(PTR$)");
%PARSE$SYM         (STCLASS=BASED);
/**/
%XUW_WILDCARD;
DCL    X$WILDCMP                       ENTRY  (1)      ALTRET;
/**
 *                 FORMATTING SERVICE REQUIREMENTS
 **/
%INCLUDE XU_FORMAT_C;
/**/
%F_FDS             (NAME=FDS,
                    STCLASS=SYMREF);
/**/
DCL    RAW_LOG                         CONSTANT
                                       CHAR   (0)
                                   INIT('%VA%5MA%S%2P  %2A%3( %5A%)');
DCL    RAW_LOG_ONOFF                   CONSTANT
                                       CHAR   (0)
                             INIT('%VA%5MA%2P  %<>A,%<>A  LCS id=%<>A');
DCL    HEADER_X                        CONSTANT
                                       CHAR   (0)
                                       INIT('%VA-----  %N(-%)');
%EJECT;
/*********************************************************************
*
*      ELF51                           Actual procedure begins here
*/
/**/
              /****************************
               *     BEGIN PROCEDURE      *
               ****************************/
/**/
/**
 *  F# actions:    0 - Return ADDR(type name table) in PTR$.
 *                 1 - Return ADDR(VECTORC table) in PTR$ with
 *                            VECTORC table loaded for RAW report
 *                            headings.
 *                 2 - Return ADDR(VECTORC table) in PTR$ with
 *                            VECTORC table loaded for RAW report
 *                            data. EL_RECORD_BUF provides data.
 *                 3 - Return ADDR(VECTORC table) in PTR$ with
 *                            VECTORC table loaded for DETAIL report
 *                            data. EL_RECORD_BUF provides data.
 *                 4 - Return ADDR(TYPE_51) in PTR$ with TYPE_51
 *                            being the syntax node which describes
 *                            the TYPE command for log #51.
 *                 5 - Initialize FOR clause selection criteria by
 *                            the blank-delimited string passed
 *                            as PTR$->OUT$BLK.SUBLK$(0)->OUT$SYM.
 *                            When PTR$=ADDR(NIL), reset selection
 *                            criteria to accept anything.
 *                 6 - Return ADDR(NIL) in PTR$ when record passed
 *                            as SL_RECORD_BUF doesn't fit criteria
 *                            selected in last call with F#=5.
 *                            Otherwise return ADDR(SL_RECORD_BUF)
                              in PTR$.
 */
           VECTORC.COUNT = 0;
           IF ADDR(EL_RECORD_BUF)~=ADDR(NIL)
                   THEN DO;
                   INFO_SIZE = EL_RECORD_BUF.SIZE - 5;
                   ENTRY$ = ADDR(EL_RECORD_BUF.INFO(0));
                   END;
FUNCTION:  DO CASE(F#);
       CASE(0);              PTR$ = ADDR(ELF51_TBL);
                             RETURN;
       CASE(1);              PTR$ = ADDR(VECTORC);
                             VECTORC.COUNT = 2;
                             VECTORC.VECTOR_(0) = VECTOR(RAWHDR1);
                             VECTORC.VECTOR_(1) = VECTOR(RAWHDR2);
                             RETURN;
       CASE(2);              PTR$ = ADDR(VECTORC);
                             /* Load up information */
           RAW_RPT:          DO CASE(EL_RECORD_BUF.TYPE);
           CASE(%ELF$WILMA_C, %ELF$WILMA_CQ, %ELF$WILMA_CL,
                %ELF$WILMA_CP, %ELF$WILMA_CF, %ELF$WILMA_C1,
                %ELF$WILMA_C2, %ELF$WILMA_D, %ELF$WILMA_DF,
                %ELF$WILMA_DT, %ELF$WILMA_F1, %ELF$WILMA_F2,
                %ELF$WILMA_F3, %ELF$WILMA_F4, %ELF$WILMA_F5,
                %ELF$WILMA_F6, %ELF$WILMA_F7, %ELF$WILMA_F8,
                %ELF$WILMA_F9, %ELF$WILMA_FA, %ELF$WILMA_Q,
                %ELF$WILMA_Q1, %ELF$WILMA_Q2, %ELF$WILMA_PW,
                %ELF$WILMA_PE, %ELF$WILMA_PC);
                   CALL      ELF_FORMAT (VECTOR(RAW_LOG),
                                       VECTOR(ELF_TIME),
                                       VECTOR(B$MICOM.RR),
                                       VECTOR(B$MICOM.FLD(0)),
                                       VECTOR(B$MICOM.FLD(1)),
                                       VECTOR(B$MICOM.FLD(2)));
           CASE(%ELF$WILMA_LOG_ON, %ELF$WILMA_LOG_OFF);
                   CALL      ELF_FORMAT (VECTOR(RAW_LOG_ONOFF),
                                       VECTOR(ELF_TIME),
                                       VECTOR(B$MICOM2.ACCOUNT),
                                       VECTOR(B$MICOM2.UNAME),
                                       VECTOR(B$MICOM2.LCSID));
           CASE(ELSE);
                   CALL      ELF00 (F#,PTR$,EL_RECORD_BUF);
                             END RAW_RPT;
                             RETURN;
       CASE(3);              PTR$ = ADDR(VECTORC);
                             /*Load up table of entries, based on
                               EL_RECORD_BUF.TYPE value */
                             DATA(0) = 'ATIME  ';
                             VECTORC.COUNT = 1;
                             VECTORC.VECTOR_(0) = VECTOR(DATA(0));
                             I = 70;
                             CALL      ELF_FORMAT (VECTOR(HEADER_X),
                                                 VECTOR(I));
       DETAIL_RPT: DO CASE(EL_RECORD_BUF.TYPE);
           CASE(%ELF$WILMA_C, %ELF$WILMA_CQ, %ELF$WILMA_CL,
                %ELF$WILMA_CP, %ELF$WILMA_CF, %ELF$WILMA_C1,
                %ELF$WILMA_C2, %ELF$WILMA_D, %ELF$WILMA_DF,
                %ELF$WILMA_DT, %ELF$WILMA_F1, %ELF$WILMA_F2,
                %ELF$WILMA_F3, %ELF$WILMA_F4, %ELF$WILMA_F5,
                %ELF$WILMA_F6, %ELF$WILMA_F7, %ELF$WILMA_F8,
                %ELF$WILMA_F9, %ELF$WILMA_FA, %ELF$WILMA_Q,
                %ELF$WILMA_Q1, %ELF$WILMA_Q2, %ELF$WILMA_PW,
                %ELF$WILMA_PE, %ELF$WILMA_PC);
                   CALL      ELF_FORMAT (VECTOR(RAW_LOG),
                                       VECTOR(ELF_TIME),
                                       VECTOR(B$MICOM.RR),
                                       VECTOR(B$MICOM.FLD(0)),
                                       VECTOR(B$MICOM.FLD(1)),
                                       VECTOR(B$MICOM.FLD(1)));
           CASE(%ELF$WILMA_LOG_ON, %ELF$WILMA_LOG_OFF);
                   CALL      ELF_FORMAT (VECTOR(RAW_LOG_ONOFF),
                                       VECTOR(ELF_TIME),
                                       VECTOR(B$MICOM2.ACCOUNT),
                                       VECTOR(B$MICOM2.UNAME),
                                       VECTOR(B$MICOM2.LCSID));
           CASE(ELSE);
                   CALL      ELF00 (F#,PTR$,EL_RECORD_BUF);
                   END DETAIL_RPT;
                             RETURN;
       CASE(4);              PTR$ = ADDR(TYPE_51);
                             RETURN;
       CASE(5);
                   IF PTR$=ADDR(NIL)   /* Reset selection criteria */
                             THEN DO;
                             SELECTION.FOR_CLAUSE = '0'B;
                             RETURN;
                             END;
                   SELECTION.FOR_CLAUSE = '1'B;
                   SELECTION.WILDCARDED = '0'B;
                   SELECTION.DATA.TYPE = SUBSTR(OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT,0,1);
               SO: DO;
                   DO I = 1 TO OUT$BLK.SUBLK$(0)->OUT$SYM.COUNT-1;
                     IF SUBSTR(OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT,I,1) > '9'
                        | SUBSTR(OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT,I,1) < '0'
                             THEN DO;
                             IF SUBSTR(OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT,I,1)~='?'
                                       THEN DO;
                                       SELECTION.FOR_CLAUSE='0'B;
                                       RETURN;
                                       END;
                             SELECTION.DATA.NUMBER =
                                       SUBSTR(OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT,1);
                             SELECTION.WILDCARDED = '1'B;
                             EXIT SO;
                             END;
                   END;
                   CALL CHARBIN(I,SUBSTR(OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT,1));
                   CALL BINCHAR(SELECTION.DATA.NUMBER,I);
                   END SO;
                   DO SELECT(SELECTION.DATA.TYPE);
           SELECT('L','P','C');        /* Ok.. */
           SELECT('?');      SELECTION.WILDCARDED = '1'B;
           SELECT(ELSE);     SELECTION.FOR_CLAUSE = '0'B;
                             RETURN;
                   END;
                   IF SELECTION.WILDCARDED
                             THEN DO;
                             DO I=LENGTHC(SELECTION.TEXT)-1 DOWNTO 0;
                                 IF SUBSTR(SELECTION.TEXT,I,1)~=' '
                                       THEN EXIT;
                             END;
                             XUW_WILDCARD.PATTERN_ =
                                 VECTOR(SUBSTR(SELECTION.TEXT,0,I+1));
                             END;
       CASE(6);    PTR$ = ADDR(EL_RECORD_BUF);
                   IF ~SELECTION.FOR_CLAUSE            THEN RETURN;
                   IF ~SELECTION.WILDCARDED
                             THEN DO;
                             IF B$MICOM.FLD(0) = SELECTION.TEXT
                                                       THEN RETURN;
                             IF B$MICOM.FLD(1) = SELECTION.TEXT
                                                       THEN RETURN;
                             IF B$MICOM.FLD(2) = SELECTION.TEXT
                                                       THEN RETURN;
                             PTR$ = ADDR(NIL);
                             RETURN;
                             END;
                   XUW_WILDCARD.INPUT_ = VECTOR(B$MICOM.FLD(0));
                   CALL X$WILDCMP (XUW_WILDCARD)  WHENRETURN DO;
                                                  RETURN;
                                                  END;
                   XUW_WILDCARD.INPUT_ = VECTOR(B$MICOM.FLD(1));
                   CALL X$WILDCMP (XUW_WILDCARD)  WHENRETURN DO;
                                                  RETURN;
                                                  END;
                   XUW_WILDCARD.INPUT_ = VECTOR(B$MICOM.FLD(2));
                   CALL X$WILDCMP (XUW_WILDCARD)  WHENRETURN DO;
                                                  RETURN;
                                                  END;
                   PTR$ = ADDR(NIL);
                   RETURN;
       CASE(ELSE);           CALL      ELF00 (F#,PTR$,EL_RECORD_BUF);
                             RETURN;
           END FUNCTION;
/**/
       END ELF51;
