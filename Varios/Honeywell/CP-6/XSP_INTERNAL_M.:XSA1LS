

10:40 OCT 01 '97 XSP_INTERNAL_M.:XSA1SI                                    1    
    1      /*M* XSP_INTERNAL_M     Internal macros for the ISO Presentation layer. */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DDA */
    8      /*F*    NAME:   XSP$PCTX
    9              DESCRIPTION:
   10                  This is the connection context block for an ISO Presentation
   11                  connection.  When Presentation is part of the CP-6 or LCP-6
   12                  monitor, these are aquired from TIGR-initialized or BOBCAT-
   13                  initialized data space as needed for new incoming connect
   14                  requests.  They are released on disconnect.  When Presentation
   15                  is part of the user application, these are in static data owned
   16                  by the XSP library.
   17      */
   18      %MACRO XSP$PCTX( NAME=XSP$PCTX, LVL=1, LAST=";", STCLASS=BASED);
   19      %LSET L6 = BITBIN( MODE_FEP);
   20      %LSET LISTDIR = '0'B;
   21      %LSET LISTEXP = '1'B;
   22      %LSET LISTCOM = '0'B;
   23      %LSET LISTSUB = '1'B;
   24      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
   25      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
   26          %LSET INIT = CHARTEXT( ' INIT');
   27          %LSET ENIT = CHARTEXT( '');
   28      %ELSE;
   29          %LSET INIT = CHARTEXT( '/*');
   30          %LSET ENIT = CHARTEXT( '*/');
   31      %ENDIF;
   32      %IF LENGTHC( 'NAME') = 0;
   33          %LSET LVL = LVL-1;
   34      %ELSE;
   35          %IF LVL = 1;
   36              DCL 1 NAME STCLASS,
   37          %ELSE;
10:40 OCT 01 '97 XSP_INTERNAL_M.:XSA1SI                                    2    
   38              %LVL NAME,
   39          %ENDIF;
   40      %ENDIF;
   41      %LSET LVL1 = LVL+1;
   42      %LSET LVL2 = LVL1+1;
   43      %IF MODE_FEP;
   44          %LSET LONG = CHARTEXT( '(32)');
   45          %LSET HALF = CHARTEXT( 'WORD');
   46      %ELSE;
   47          %LSET LONG = CHARTEXT( 'WORD');
   48          %LSET HALF = CHARTEXT( 'HALF');
   49      %ENDIF;
   50
   51          /*  NAME:   STATE
   52                  This is the current state of the Presentation connection.
   53                  Permitted values are any of XSP_PST_?.                      */
   54          %LVL1 %CHARTEXT( 'STATE') UBIN BYTE %INIT( %XSP_PST_00)%ENIT CALIGNED,
   55
   56          /*  NAME:   HISTX
   57                  This is the index of the last entry in the history buffer for
   58                  this Presentation connection.  See HIST below.              */
   59          %LVL1 %CHARTEXT( 'HISTX') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
   60
   61          /*  NAME:   FU
   62                  This bit vector specifies which Presentation functional units
   63                  are being negotiated or have been decided upon for this
   64                  connection.                                                 */
   65          %LVL1 %CHARTEXT( 'FU'),
   66              %LVL2 %CHARTEXT( 'CR') BIT(1) %INIT( %FALSE)%ENIT UNAL,
   67              %LVL2 %CHARTEXT( 'CM') BIT(1) %INIT( %FALSE)%ENIT UNAL,
   68              %LVL2 %CHARTEXT( '*') BIT( %(7-L6)) %INIT( '0'B)%ENIT UNAL,
   69
   70          /*  NAME:   FLAGS
   71                  Any Presentation protocol-required flags for each connection
   72                  go here.                                                    */
   73          %LVL1 %CHARTEXT( 'FLAGS'),
   74      %IF NOT MODE_FEP;
10:40 OCT 01 '97 XSP_INTERNAL_M.:XSA1SI                                    3    
   75              %LVL2 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
   76      %ENDIF;
   77              %LVL2 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
   78              %LVL2 %CHARTEXT( 'AIP') BIT(1) %INIT( %FALSE)%ENIT UNAL,
   79              %LVL2 %CHARTEXT( 'CR') BIT(1) %INIT( %FALSE)%ENIT UNAL,
   80              %LVL2 %CHARTEXT( 'RL') BIT(1) %INIT( %FALSE)%ENIT UNAL,
   81              %LVL2 %CHARTEXT( 'AEP') BIT(1) %INIT( %FALSE)%ENIT UNAL,
   82              %LVL2 %CHARTEXT( 'MULTCTX') BIT(1) %INIT( %FALSE)%ENIT UNAL,
   83
   84          /*  NAME:   ABORTING
   85                  This flag is set if the connection is being aborted.        */
   86          %LVL1 %CHARTEXT( 'ABORTING') BIT(1) %INIT( '0'B)%ENIT UNAL,
   87
   88          /*  NAME:   MODE
   89                  This flag is set if this connection is a server endpoint, else
   90                  it is a client endpoint.                                    */
   91          %LVL1 %CHARTEXT( 'MODE') BIT(1) %INIT( '0'B)%ENIT UNAL,
   92
   93          /*  NAME:   PEERPCID
   94                  The PCID of the other endpoint of this Presentation connection,
   95                  if known, otherwise zero.  See PCID below.                  */
   96          %LVL1 %CHARTEXT( 'PEERPCID') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
   97
   98          /*  NAME:   PCID
   99                  An index into XSP$PCTX$ identifying this Presentation connection
  100                  context block.  This is how Presentation internally refers to
  101                  the various connections extant.                             */
  102          %LVL1 %CHARTEXT( 'PCID') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  103
  104          /*  NAME:   DFLCTXTID
  105                  An integer identifying the default context.  The value of the
  106                  integer is the index into the connection's context map.     */
  107          %LVL1 %CHARTEXT( 'DFLCTXTID') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  108
  109          /*  NAME:   ACID
  110                  An integer reserved for application use identifying the
  111                  connection involved with this request or response.          */
10:40 OCT 01 '97 XSP_INTERNAL_M.:XSA1SI                                    4    
  112          %LVL1 %CHARTEXT( 'ACID') UBIN %LONG %INIT( 0)%ENIT ALIGNED,
  113
  114          /*  NAME:   CURDCSMASK
  115                  This is a mask identifying the entries in the internal table
  116                  that comprise the current 'defined context set' for this
  117                  connection.                                                 */
  118          %LVL1 %CHARTEXT( 'CURDCSMASK') BIT(36) %INIT( '0'B)%ENIT ALIGNED,
  119
  120          /*  NAME:   CURDCSBITS
  121                  A REDEF of CURDCSMASK for ease of coding.                   */
  122          %LVL1 %CHARTEXT( 'CURDCSBITS(0:35)') REDEF CURDCSMASK BIT(1) UNAL,
  123
  124          /*  NAME:   INIDCSMASK
  125                  This is a mask identifying the entries in the internal table
  126                  that comprise the initial 'defined context set' when the
  127                  connection was first initialized.                           */
  128          %LVL1 %CHARTEXT( 'INIDCSMASK') BIT(36) %INIT( '0'B)%ENIT ALIGNED,
  129
  130          /*  NAME:   INIDCSBITS
  131                  A REDEF of INIDCSMASK for ease of coding.                   */
  132          %LVL1 %CHARTEXT( 'INIDCSBITS(0:35)') REDEF INIDCSMASK BIT(1) UNAL,
  133
  134          /*  NAME:   ACTDCSMASK
  135                  This is a mask identifying the entries in the internal table
  136                  that comprise the 'inter-activity defined context set'.     */
  137          %LVL1 %CHARTEXT( 'ACTDCSMASK') BIT(36) %INIT( '0'B)%ENIT ALIGNED,
  138
  139          /*  NAME:   ACTDCSBITS
  140                  A REDEF of ACTDCSMASK for ease of coding.                   */
  141          %LVL1 %CHARTEXT( 'ACTDCSBITS(0:35)') REDEF ACTDCSMASK BIT(1) UNAL,
  142
  143          /*  NAME:   SPIHDX
  144                  This is a pointer to the first XSP$SPITBL for this Presentation
  145                  connection, if any, otherwise NULL.  The SPITBLs contain a
  146                  correspondence between sync point serial numbers and the
  147                  contents of the defined context set at that point in time.  */
  148          %LVL1 %CHARTEXT( 'SPIHDX') UBIN %HALF %INIT( %NULL)%ENIT CALIGNED,
10:40 OCT 01 '97 XSP_INTERNAL_M.:XSA1SI                                    5    
  149
  150          /*  NAME:   SPITLX
  151                  This is a pointer to the last XSP$SPITBL for this Presentation
  152                  connection, if any, otherwise NULL.  The SPITBLs contain a
  153                  correspondence between sync point serial numbers and the
  154                  contents of the defined context set at that point in time.  */
  155          %LVL1 %CHARTEXT( 'SPITLX') UBIN %HALF %INIT( %NULL)%ENIT CALIGNED,
  156
  157          /*  NAME:   ENTRY$
  158                  The address of a procedure within the application to field
  159                  incoming Presentation messages.                             */
  160          %LVL1 %CHARTEXT( 'ENTRY$') EPTR %INIT( ENTADDR( NIL))%ENIT ALIGNED,
  161
  162          /*  NAME:   SUR
  163                  The Session User Requirements field indicates which Session
  164                  functional units are proposed by the calling user.          */
  165          %LVL1 %CHARTEXT( 'SUR'),
  166              %LVL2 %CHARTEXT( '*') BIT(5) %INIT( '00000'B)%ENIT UNAL,
  167              %LVL2 %CHARTEXT( 'TD') BIT(1) %INIT( '0'B)%ENIT UNAL,
  168              %LVL2 %CHARTEXT( 'EXCEP') BIT(1) %INIT( '0'B)%ENIT UNAL,
  169              %LVL2 %CHARTEXT( 'CD') BIT(1) %INIT( '0'B)%ENIT UNAL,
  170              %LVL2 %CHARTEXT( 'NR') BIT(1) %INIT( '0'B)%ENIT UNAL,
  171              %LVL2 %CHARTEXT( 'ACT') BIT(1) %INIT( '0'B)%ENIT UNAL,
  172              %LVL2 %CHARTEXT( 'RESYN') BIT(1) %INIT( '0'B)%ENIT UNAL,
  173              %LVL2 %CHARTEXT( 'MA') BIT(1) %INIT( '0'B)%ENIT UNAL,
  174              %LVL2 %CHARTEXT( 'SY') BIT(1) %INIT( '0'B)%ENIT UNAL,
  175              %LVL2 %CHARTEXT( 'EX') BIT(1) %INIT( '0'B)%ENIT UNAL,
  176              %LVL2 %CHARTEXT( 'FD') BIT(1) %INIT( '0'B)%ENIT UNAL,
  177              %LVL2 %CHARTEXT( 'HD') BIT(1) %INIT( '0'B)%ENIT UNAL,
  178      %IF NOT MODE_FEP;
  179              %LVL2 %CHARTEXT( '*') BIT(2) %INIT( '00'B)%ENIT UNAL,
  180      %ENDIF;
  181
  182          /*  NAME:   HIST
  183                  The history buffer for this connection.  The buffer is maintained
  184                  by XSP$MACHINE, which updates it each time the state machine is
  185                  called.                                                     */
10:40 OCT 01 '97 XSP_INTERNAL_M.:XSA1SI                                    6    
  186          %LVL1 %CHARTEXT( 'HISTZ(0:7)') UBIN %HALF %INIT( 0*8)%ENIT CALIGNED,
  187          %LVL1 %CHARTEXT( 'HIST(0:7)') REDEF HISTZ,
  188              %LVL2 %CHARTEXT( 'EVENT') UBIN BYTE CALIGNED,
  189              %LVL2 %CHARTEXT( 'NXTST') UBIN BYTE CALIGNED,
  190
  191          /*  NAME:   CTXTMAPX
  192                  This indicates the location of the Presentation context map for
  193                  this connection.                                            */
  194          %LVL1 %CHARTEXT( 'CTXTMAPX') UBIN %HALF %INIT( %NULL)%ENIT CALIGNED LAST
  195
  196      %MEND;
  197      /*F*    NAME:   XSP$QVEC
  198              DESCRIPTION: XSP$QVEC generates a structure describing a byte-string
  199                  buffer by its length and address.  It is similar to the VECTOR
  200                  construct of PL6, but is more efficient since the length is
  201                  right-justified in a full word.
  202                  The "down" side is, only byte resolution.
  203      */
  204      %MACRO XSP$QVEC(
  205                      NAME=XSP$QVEC, LVL=1, LAST=";", STCLASS=BASED,
  206                      PTR$=NIL,
  207                      SIZE=0);
  208      %LSET LISTDIR = '0'B;
  209      %LSET LISTEXP = '1'B;
  210      %LSET LISTCOM = '0'B;
  211      %LSET LISTSUB = '1'B;
  212      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  213      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  214          %LSET INIT = CHARTEXT( ' INIT');
  215          %LSET ENIT = CHARTEXT( '');
  216      %ELSE;
  217          %LSET INIT = CHARTEXT( '/*');
  218          %LSET ENIT = CHARTEXT( '*/');
  219      %ENDIF;
  220      %IF LENGTHC( 'NAME') = 0;
  221          %LSET LVL = LVL-1;
  222      %ELSE;
10:40 OCT 01 '97 XSP_INTERNAL_M.:XSA1SI                                    7    
  223          %IF LVL = 1;
  224              DCL 1 NAME STCLASS DALIGNED,
  225          %ELSE;
  226              %LVL NAME DALIGNED,
  227          %ENDIF;
  228      %ENDIF;
  229      %LSET LVL1 = LVL+1;
  230      %LSET LVL2 = LVL1+1;
  231      %IF MODE_FEP;
  232          %LSET LONG = CHARTEXT( '(32)');
  233          %LSET HALF = CHARTEXT( 'WORD');
  234      %ELSE;
  235          %LSET LONG = CHARTEXT( 'WORD');
  236          %LSET HALF = CHARTEXT( 'HALF');
  237      %ENDIF;
  238
  239          %LVL1 %CHARTEXT( 'PTR$') PTR %INIT( ADDR( PTR$))%ENIT CALIGNED,
  240          %LVL1 %CHARTEXT( 'SIZE') SBIN %LONG %INIT( SIZE)%ENIT LAST
  241      %MEND;
  242      /*F*    NAME:   XSP$VBLK
  243              DESCRIPTION:
  244                  This macro is used to generate a structure that is used to pass
  245                  parameters to various procedures within the Presentation layer.
  246                  It carries all the status information for a particular outgoing
  247                  or incoming Presentation message, and is thus somewhat like
  248                  K$RWPARM.
  249      */
  250      %MACRO XSP$VBLK( NAME=XSP$VBLK, LVL=1, LAST=";", STCLASS=BASED);
  251      %LSET LISTDIR = '0'B;
  252      %LSET LISTEXP = '1'B;
  253      %LSET LISTCOM = '0'B;
  254      %LSET LISTSUB = '1'B;
  255      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  256      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  257          %LSET INIT = CHARTEXT( ' INIT');
  258          %LSET ENIT = CHARTEXT( '');
  259      %ELSE;
10:40 OCT 01 '97 XSP_INTERNAL_M.:XSA1SI                                    8    
  260          %LSET INIT = CHARTEXT( '/*');
  261          %LSET ENIT = CHARTEXT( '*/');
  262      %ENDIF;
  263      %IF LENGTHC( 'NAME') = 0;
  264          %LSET LVL = LVL-1;
  265      %ELSE;
  266          %IF LVL = 1;
  267              DCL 1 NAME STCLASS,
  268          %ELSE;
  269              %LVL NAME,
  270          %ENDIF;
  271      %ENDIF;
  272      %LSET LVL1 = LVL+1;
  273      %LSET LVL2 = LVL1+1;
  274
  275          /*  NAME:   CTX$
  276                  A pointer to the connection context block for the connection
  277                  this message is associated with.                            */
  278          %LVL1 %CHARTEXT( 'CTX$') PTR %INIT( ADDR( NIL))%ENIT,
  279
  280          /*  NAME:   FPT$
  281                  A pointer to the Presentation FPT associated with this incoming
  282                  or outgoing message.                                        */
  283          %LVL1 %CHARTEXT( 'FPT$') PTR %INIT( ADDR( NIL))%ENIT ALIGNED,
  284
  285          /*  NAME:   PDU
  286                  A QVEC framing the Presentation PDU associated with this
  287                  incoming or outgoing message.                               */
  288          %XSP$QVEC( NAME=PDU, LVL=%LVL1, LAST=",", STCLASS=STCLASS);
  289
  290          /*  NAME:   DATA
  291                  A QVEC framing the User Data after it has been encoded by
  292                  Presentation using the requested context(s).                */
  293          %XSP$QVEC( NAME=DATA, LVL=%LVL1, LAST=",", STCLASS=STCLASS);
  294
  295          %LVL1 %CHARTEXT( '*(0:1)') UBIN BYTE %INIT( 0, 0)%ENIT CALIGNED,
  296
10:40 OCT 01 '97 XSP_INTERNAL_M.:XSA1SI                                    9    
  297          /*  NAME:   PPDUERR
  298                  Set nonzero if there was an error decoding this PPDU.       */
  299          %LVL1 %CHARTEXT( 'PPDUERR') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  300
  301          /*  NAME:   EVENT
  302                  The event number corresponding to this message.             */
  303          %LVL1 %CHARTEXT( 'EVENT') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  304
  305          /*  NAME:   DEFMASK
  306                  This is a mask identifying the entries in the internal table
  307                  corresponding to the contexts proposed for definition in this
  308                  request.                                                    */
  309          %LVL1 %CHARTEXT( 'DEFMASK') BIT(36) %INIT( '0'B)%ENIT ALIGNED,
  310
  311          /*  NAME:   DEFBITS
  312                  A REDEF of DEFMASK for ease of coding.                      */
  313          %LVL1 %CHARTEXT( 'DEFBITS(0:35)') REDEF DEFMASK BIT(1) UNAL,
  314
  315          /*  NAME:   DELMASK
  316                  This is a mask identifying the entries in the internal table
  317                  corresponding to the contexts proposed for deletion in this
  318                  request.                                                    */
  319          %LVL1 %CHARTEXT( 'DELMASK') BIT(36) %INIT( '0'B)%ENIT ALIGNED,
  320
  321          /*  NAME:   DELBITS
  322                  A REDEF of DELMASK for ease of coding.                      */
  323          %LVL1 %CHARTEXT( 'DELBITS(0:35)') REDEF DELMASK BIT(1) UNAL,
  324
  325          /*  NAME:   DATMASK
  326                  This is a mask identifying the entries in the internal table
  327                  corresponding to the contexts present in the User Data field
  328                  of this request.                                            */
  329          %LVL1 %CHARTEXT( 'DATMASK') BIT(36) %INIT( '0'B)%ENIT ALIGNED,
  330
  331          /*  NAME:   DATBITS
  332                  A REDEF of DATMASK for ease of coding.                      */
  333          %LVL1 %CHARTEXT( 'DATBITS(0:35)') REDEF DATMASK BIT(1) UNAL,
10:40 OCT 01 '97 XSP_INTERNAL_M.:XSA1SI                                    10   
  334
  335          /*  NAME:   SPIMASK
  336                  This is a mask identifying the entries in the internal table
  337                  corresponding to the contexts associated with the sync point
  338                  identifier of this request, if any.                         */
  339          %LVL1 %CHARTEXT( 'SPIMASK') BIT(36) %INIT( '0'B)%ENIT ALIGNED,
  340
  341          /*  NAME:   SPIBITS
  342                  A REDEF of SPIMASK for ease of coding.                      */
  343          %LVL1 %CHARTEXT( 'SPIBITS(0:35)') REDEF SPIMASK BIT(1) UNAL;
  344
  345      %MEND;
  346      /*F*    NAME:   XSP$SPI
  347              DESCRIPTION:
  348                  This structure is one item on a linked list of one or more items
  349                  associated with a particular Presentation connection context.
  350                  This structure contains an array of pairs of information, sync
  351                  point identification and current defined context set at that time.
  352      */
  353      %MACRO XSP$SPI( NAME=XSP$SPI, LVL=1, LAST=";", STCLASS=BASED,
  354                      MAXIDX=%XSP_MAX_SPIIDX);
  355      %LSET LISTDIR = '0'B;
  356      %LSET LISTEXP = '1'B;
  357      %LSET LISTCOM = '0'B;
  358      %LSET LISTSUB = '1'B;
  359      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  360      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  361          %LSET INIT = CHARTEXT( ' INIT');
  362          %LSET ENIT = CHARTEXT( '');
  363      %ELSE;
  364          %LSET INIT = CHARTEXT( '/*');
  365          %LSET ENIT = CHARTEXT( '*/');
  366      %ENDIF;
  367      %IF LENGTHC( 'NAME') = 0;
  368          %LSET LVL = LVL-1;
  369      %ELSE;
  370          %IF LVL = 1;
10:40 OCT 01 '97 XSP_INTERNAL_M.:XSA1SI                                    11   
  371              DCL 1 NAME STCLASS,
  372          %ELSE;
  373              %LVL NAME,
  374          %ENDIF;
  375      %ENDIF;
  376      %LSET LVL1 = LVL+1;
  377      %LSET LVL2 = LVL1+1;
  378      %IF MODE_FEP;
  379          %LSET LONG = CHARTEXT( '(32)');
  380          %LSET HALF = CHARTEXT( 'WORD');
  381      %ELSE;
  382          %LSET LONG = CHARTEXT( 'WORD');
  383          %LSET HALF = CHARTEXT( 'HALF');
  384      %ENDIF;
  385
  386          /*  NAME:   FLNKX
  387                  Forward link to the next XSP$SPI, if any, else NULL.        */
  388          %LVL1 %CHARTEXT( 'FLNKX') UBIN %HALF %INIT( %NULL)%ENIT CALIGNED,
  389
  390          /*  NAME:   BLNKX
  391                  Backward link to the previous XSP$SPI, if any, else NULL.   */
  392          %LVL1 %CHARTEXT( 'BLNKX') UBIN %HALF %INIT( %NULL)%ENIT CALIGNED,
  393
  394          /*  NAME:   INSIDX
  395                  The index into TBL of the next entry available for insertion.
  396                  If greater than MAXIDX, this SPI table is full and another one
  397                  must be allocated or linked-to, as the case may be.         */
  398          %LVL1 %CHARTEXT( 'INSIDX') UBIN BYTE %INIT( 0)%ENIT UNAL,
  399
  400          /*  NAME:   REMIDX
  401                  The index into TBL of the next entry to be removed.  If greater
  402                  than MAXIDX, this SPI table is empty and can be released.  Note
  403                  that REMIDX must always be less than or equal to INSIDX.    */
  404          %LVL1 %CHARTEXT( 'REMIDX') UBIN BYTE %INIT( 0)%ENIT UNAL,
  405
  406          /*  NAME:   MAXIDX
  407                  This is the maximum possible index into TBL.  This field must be
10:40 OCT 01 '97 XSP_INTERNAL_M.:XSA1SI                                    12   
  408                  set when the structure is allocated.                        */
  409          %LVL1 %CHARTEXT( 'MAXIDX') UBIN BYTE %INIT( MAXIDX)%ENIT UNAL,
  410
  411          /*  NAME:   TBL
  412                  This is the table of sync point identifier / defined context set
  413                  pairs.  (I believe that) Every time the sync point id is advanced
  414                  within the Presentation layer, the current defined context set
  415                  is remembered here.  When an Activity has completed the pairs
  416                  corresponding to that activity can be deleted.              */
  417          %LVL1 %CHARTEXT( %CONCAT( 'TBL(0:', BINCHAR( MAXIDX), ')')),
  418              %LVL2 %CHARTEXT( 'SPI') UBIN %LONG,
  419              %LVL2 %CHARTEXT( 'DCS') UBIN %LONG;
  420
  421      %MEND;
  422      /*F*    NAME:   XSP$CTXTMAP
  423
  424              XSP$CTXTMAP is a structure associated with each Presentation
  425              connection that holds information about the contexts in use on that
  426              connection.  The entries in the map correspond 1-to-1 with the bits
  427              in the various bitmasks in PCTX and VBLK.
  428      */
  429      %MACRO XSP$CTXTMAP(
  430                      NAME=XSP$CTXTMAP, LVL=1, LAST=";", STCLASS=BASED);
  431      %LSET LISTDIR = '0'B;
  432      %LSET LISTEXP = '1'B;
  433      %LSET LISTCOM = '0'B;
  434      %LSET LISTSUB = '1'B;
  435      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  436      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  437          %LSET INIT = CHARTEXT( ' INIT');
  438          %LSET ENIT = CHARTEXT( '');
  439      %ELSE;
  440          %LSET INIT = CHARTEXT( '/*');
  441          %LSET ENIT = CHARTEXT( '*/');
  442      %ENDIF;
  443      %IF LENGTHC( 'NAME') = 0;
  444          %LSET LVL = LVL-1;
10:40 OCT 01 '97 XSP_INTERNAL_M.:XSA1SI                                    13   
  445      %ELSE;
  446          %IF LVL = 1;
  447              DCL 1 NAME(0:0) STCLASS ALIGNED,
  448          %ELSE;
  449              %LVL NAME(0:0) ALIGNED,
  450          %ENDIF;
  451      %ENDIF;
  452      %LSET LVL1 = LVL+1;
  453      %LSET LVL2 = LVL1+1;
  454      %IF MODE_FEP;
  455          %LSET LONG = CHARTEXT( '(32)');
  456          %LSET HALF = CHARTEXT( 'WORD');
  457      %ELSE;
  458          %LSET LONG = CHARTEXT( 'WORD');
  459          %LSET HALF = CHARTEXT( 'HALF');
  460      %ENDIF;
  461
  462          %LVL1 %CHARTEXT( 'PEERCTXTID') UBIN %LONG %INIT( 0)%ENIT ALIGNED,
  463          %LVL1 %CHARTEXT( 'ABSCTXTID') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  464          %LVL1 %CHARTEXT( 'TFRCTXTID') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  465      %IF NOT MODE_FEP;
  466          %LVL1 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
  467      %ENDIF;
  468          %LVL1 %CHARTEXT( 'REASON') UBIN(4) %INIT( 0)%ENIT UNAL,
  469          %LVL1 %CHARTEXT( 'RESULT') UBIN(4) %INIT( 0)%ENIT UNAL,
  470          %LVL1 %CHARTEXT( 'STATE') UBIN BYTE %INIT( %XSP_CMAP_UNUSED)%ENIT CALIGNED LAST
  471
  472      %MEND;
  473
  474      %MACRO ENCDECMACS;
  475
  476      /*F*    NAME:   ITEM
  477
  478              ITEM defines one 'item' of the 'itemlist'.  As a PPDU is being encoded
  479              or decoded, the itemlist contains an item for each piece of the PPDU.
  480      */
  481      %MACRO ITEM( NAME=ITEM, LVL=1, LAST=";", STCLASS=BASED);
10:40 OCT 01 '97 XSP_INTERNAL_M.:XSA1SI                                    14   
  482      %IF LENGTHC( 'NAME') = 0;
  483          %LSET LVL = LVL - 1;
  484      %ELSE;
  485          %IF LVL = 1;
  486              DCL 1 NAME STCLASS ALIGNED,
  487          %ELSE;
  488              %LVL NAME ALIGNED,
  489          %ENDIF;
  490      %ENDIF;
  491      %LSET LVL1 = LVL + 1;
  492      %LSET LVL2 = LVL1 + 1;
  493
  494          %LVL1 %CHARTEXT( 'Z') UBIN WORD ALIGNED,
  495          %LVL1 %CHARTEXT( 'X') REDEF %CHARTEXT( 'Z'),
  496              %LVL2 %CHARTEXT( 'LEN') UBIN(18) CALIGNED,
  497              %LVL2 %CHARTEXT( 'OPT') UBIN(1) UNAL,
  498              %LVL2 %CHARTEXT( 'TAG') UBIN(8) UNAL,
  499              %LVL2 %CHARTEXT( 'IMP') UBIN(1) UNAL,
  500              %LVL2 %CHARTEXT( 'TYP') UBIN(5) UNAL,
  501              %LVL2 %CHARTEXT( 'LVL') UBIN(3) UNAL,
  502          %LVL1 %CHARTEXT( 'U') UBIN WORD ALIGNED,
  503          %LVL1 %CHARTEXT( 'S') REDEF %CHARTEXT( 'U') SBIN WORD ALIGNED,
  504          %LVL1 %CHARTEXT( 'P') REDEF %CHARTEXT( 'U') PTR CALIGNED,
  505          %LVL1 %CHARTEXT( 'B') REDEF %CHARTEXT( 'U') BIT(36) ALIGNED LAST
  506      %MEND;
  507
  508      /*F*    NAME:   LOAD
  509
  510              The LOAD macro is used in XSP$ENCODE to add another item to the
  511              itemlist as a PPDU is being encoded.
  512      */
  513      %MACRO LOAD(
  514              LEN=0,
  515              IMP( NO=0, YES=1, N=0, Y=1)=0,
  516              CON( NO=0, YES=32, N=0, Y=32)=0,
  517              TAG( A0=64, A1=65,
  518                   C0=128, C1=129, C2=130, C3=131, C4=132,
10:40 OCT 01 '97 XSP_INTERNAL_M.:XSA1SI                                    15   
  519                   C5=133, C6=134, C7=135, C8=136, C9=137,
  520                   C10=138)=,
  521              TYP( NONE=0,
  522                   BOOL=1, INTG=2, BITSTR=3, OCTETSTR=4,
  523                   NULL=5,
  524                   OBJID=6, OBJDSCR=7, EXTRN=8,
  525                   CHOICE=13,
  526                   SEQOF=14, SETOF=15,
  527                   SEQ=16, SET=17,
  528                   NUMSTR=18, PRNTSTR=19, TELSTR=20, VIDSTR=21, IA5STR=22,
  529                   UTCTIM=23, GENTIM=24,
  530                   GRFSTR=25, VISSTR=26, ISO646STR=26, GENSTR=27)=,
  531              LVL=,
  532              VAL="0",
  533              OPT( NO=0, YES=1, N=0, Y=1)=0,
  534              SCANNING=0);
  535      %LSET TLVL = TEXTCHAR(LVL);
  536      %ERROR( LENGTHC( TLVL) = 0, 'LVL must be specified');
  537      %LSET L1 = SUBSTR( TLVL, 0, 1);
  538      %IF L1 >= '0' AND L1 <= '9';
  539          %ERROR( LVL > 7, 'LVL too deep');
  540      %ENDIF;
  541      %LSET XLVL = CHARTEXT( TLVL);
  542      %LSET XCON = CON;
  543      %IF LENGTHC( TEXTCHAR(TYP)) = 0;
  544          %IF LENGTHC( TEXTCHAR(TAG)) = 0;
  545              %ERROR( '1'B, 'TAG or TYP must be specified');
  546              %LSET XTAG = 0;
  547          %ELSE;
  548              %LSET XTAG = TAG;
  549          %ENDIF;
  550          %LSET XTYP = 0;
  551      %ELSE;
  552          %LSET XTYP = TYP;
  553          %IF LENGTHC( TEXTCHAR(TAG)) = 0;
  554              %IF     %XTYP = %XSP_TYP_SEQOF;
  555                  %LSET XTAG = 48;
10:40 OCT 01 '97 XSP_INTERNAL_M.:XSA1SI                                    16   
  556              %ELSEIF %XTYP = %XSP_TYP_SETOF;
  557                  %LSET XTAG = 49;
  558              %ELSE;
  559                  %LSET XTAG = TYP;
  560              %ENDIF;
  561          %ELSE;
  562              %LSET XTAG = TAG;
  563          %ENDIF;
  564      %ENDIF;
  565          DO;
  566      %LSET TVAL = TEXTCHAR(VAL);
  567      %LSET TLEN = TEXTCHAR(LEN);
  568      %IF TVAL = '0';
  569          %LSET XVAL = 0;
  570      %ELSE;
  571          %LSET XVAL = CHARTEXT( %TVAL);
  572      %ENDIF;
  573      /* Figure out length of item */
  574      %IF %TLEN ~= '0';
  575          %LSET XLEN = CHARTEXT( CONCAT( '(', %TLEN, ')'));
  576      %ELSE;
  577          %LSET XLEN = 0;
  578      %ENDIF;
  579      /* Stash the item value word */
  580      %IF     %XTYP = %XSP_TYP_INTG;  /* signed integer */
  581          %IF TLEN = '0';
  582              %LSET XLEN = 4;
  583          %ENDIF;
  584          %IF SCANNING = 1;
  585              ITEMLIST.P( XSP_ITEMCNT) = %CHARTEXT( CONCAT( 'ADDR(', %TVAL, ')'));
  586          %ELSE;
  587              ITEMLIST.S( XSP_ITEMCNT) = %XVAL;
  588          %ENDIF;
  589      %ELSEIF %XTYP = %XSP_TYP_BITSTR OR %XTYP = %XSP_TYP_BOOL;/* bitstring,boolean */
  590          %IF SCANNING = 1;
  591              ITEMLIST.P( XSP_ITEMCNT) = %CHARTEXT( CONCAT( 'ADDR(', %TVAL, ')'));
  592          %ELSE;
10:40 OCT 01 '97 XSP_INTERNAL_M.:XSA1SI                                    17   
  593              ITEMLIST.B( XSP_ITEMCNT) = %XVAL;
  594          %ENDIF;
  595      %ELSEIF %XTYP = %XSP_TYP_UTCTIM OR %XTYP = %XSP_TYP_GENTIM;  /* timestamp */
  596          %IF TLEN = '0';
  597              %LSET XLEN = 20;
  598          %ENDIF;
  599          %IF SCANNING = 1;
  600              ITEMLIST.P( XSP_ITEMCNT) = %CHARTEXT( CONCAT( 'ADDR(', %TVAL, ')'));
  601          %ELSE;
  602              ITEMLIST.U( XSP_ITEMCNT) = %XVAL;
  603          %ENDIF;
  604      %ELSEIF %XTYP = %XSP_TYP_OBJID OR %XTYP = %XSP_TYP_OBJDSCR;  /* object */
  605          %LSET XLEN = CHARTEXT( CONCAT( %TVAL, '->CTXT.LEN'));
  606          ITEMLIST.P( XSP_ITEMCNT) = %CHARTEXT( CONCAT( 'ADDR(', %TVAL, '->CTXT.TXT')));
  607      %ELSEIF %XTYP = %XSP_TYP_NONE OR %XTYP = %XSP_TYP_NULL;
  608      %ELSEIF %XTYP = %XSP_TYP_SEQ OR %XTYP = %XSP_TYP_SEQOF;
  609          %LSET XCON = 32;
  610      %ELSEIF %XTYP = %XSP_TYP_SET OR %XTYP = %XSP_TYP_SETOF;
  611          %LSET XCON = 32;
  612      %ELSEIF %XTYP = %XSP_TYP_CHOICE;  /* not supposed to see this */
  613          %ERROR( '1'B, 'TYP=CHOICE is invalid');
  614      %ELSE;  /* everything else looks like pointer to text */
  615          %ERROR( TLEN = '0', 'LEN must be specified for this text string');
  616          ITEMLIST.P( XSP_ITEMCNT) = %CHARTEXT( CONCAT( 'ADDR(', %TVAL, ')'));
  617      %ENDIF;
  618      /* Stash the item descriptor word */
  619          ITEMLIST.Z( XSP_ITEMCNT) = %XLVL + %XTYP*8 + IMP*256 + (%XCON+%XTAG)*512 + OPT*131072 + %XLEN*262144;
  620      /* Increment itemlist index */
  621      %IF SCANNING = 0;
  622          XSP_ITEMCNT = XSP_ITEMCNT + 1;
  623      %ENDIF;
  624          END;
  625      %MEND;
  626
  627      /*F*    NAME:   SCAN
  628
  629              The SCAN macro is used in XSP$DECODE to scan another item of the
10:40 OCT 01 '97 XSP_INTERNAL_M.:XSA1SI                                    18   
  630              itemlist as a PPDU is being decoded.
  631      */
  632      %MACRO SCAN(
  633              LEN=0,
  634              IMP( NO=0, YES=1, N=0, Y=1)=0,
  635              CON( NO=0, YES=32, N=0, Y=32)=0,
  636              TAG( A0=64, A1=65,
  637                   C0=128, C1=129, C2=130, C3=131, C4=132,
  638                   C5=133, C6=134, C7=135, C8=136, C9=137,
  639                   C10=138)=,
  640              TYP( NONE=0,
  641                   BOOL=1, INTG=2, BITSTR=3, OCTETSTR=4,
  642                   NULL=5,
  643                   OBJID=6, OBJDSCR=7, EXTRN=8,
  644                   CHOICE=13,
  645                   SEQOF=14, SETOF=15,
  646                   SEQ=16, SET=17,
  647                   NUMSTR=18, PRNTSTR=19, TELSTR=20, VIDSTR=21, IA5STR=22,
  648                   UTCTIM=23, GENTIM=24,
  649                   GRFSTR=25, VISSTR=26, ISO646STR=26, GENSTR=27)=,
  650              LVL=,
  651              VAL="0",
  652              OPT( NO=0, YES=1, N=0, Y=1)=0,
  653              SCANNING=0);
  654          DO;
  655          %LOAD( LEN=LEN, IMP=IMP, CON=CON, TAG=TAG, TYP=TYP, LVL=LVL, VAL=VAL, OPT=OPT, SCANNING=1);
  656          CALL SCAN ALTRET( SCANERR);
  657          END;
  658      %MEND;
  659
  660      %MEND;  /* end of ENCDECMACS macro */

