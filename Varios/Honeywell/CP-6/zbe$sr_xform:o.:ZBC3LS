

CC.C03    File=zbe$sr_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=1  
        1         1             /* $Header: sr_xform.c,v 1.3 87/03/10 11:45:07 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /* S T R E N G T H   R E D U C T I O N
        7         7              *
        8         8              * S R _ X F O R M . C
        9         9              *
       10        10              */
       11        11
       12        12
       13        13
       14        14             #include <stdio:h>
       15        15             #include "types:h"
       16        16             #include "sr:h"
       17        17             #include "debug:h"
       18        18             #include "global:h"
       19        19             #include "alloc:h"
       20        20             #include "def:h"
       21        21             #include "get:h"
       22        22             #include "sr_aux:h"
       23        23             #include "lset:h"
       24        24             #include "aux:h"
       25        25             #include "em_mnem:h"
       26        26             #include "em_pseu:h"
       27        27             #include "em_spec:h"
       28        28             #include "sr_xform:h"
       29        29
       30        30             /* Transformations on EM texts */
       31        31
       32        32             line_p move_pointer(tmp,dir)
       33        33              offset tmp;
       34        34              int    dir;
       35        35             {
       36        36    1         /* Generate EM code to load/store a pointer variable
CC.C03    File=zbe$sr_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=2  
       37        37    1          * onto/from the stack, depending on dir(ection).
       38        38    1          * We accept all kinds of pointer sizes.
       39        39    1          */
       40        40    1
       41        41    1         line_p l;
       42        42    1
       43        43    1         l = int_line(tmp);
       44        44    1         if (ps == ws) {
       45        45    2            /* pointer fits in a word */
       46        46    2            l->l_instr = (dir == LOAD ? op_lol : op_stl);
       47        47    2         } else {
       48        48    2            if (ps == 2 * ws) {
       49        49    3               /* pointer fits in a double word */
       50        50    3               l->l_instr = (dir == LOAD ? op_ldl : op_sdl);
       51        51    3            } else {
       52        52    3               /* very large pointer size, generate code:
       53        53    3                * LAL tmp ; LOI/STI ps */
       54        54    3               l->l_instr = op_lal;
       55        55    3               l->l_next = newline(OPSHORT);
       56        56    3               SHORT(l->l_next) = ps;
       57        57    3               l->l_next->l_instr =
       58        58    3                  (dir == LOAD ? op_loi : op_sti);
       59        59    3               PREV(l->l_next) = l;
       60        60    3            }
       61        61    2         }
       62        62    1         return l;
       63        63    1        }
       64        64
       65        65
       66        66
       67        67             /* make_header */
       68        68
       69        69             STATIC copy_loops(b1,b2,except)
       70        70              bblock_p b1,b2;
       71        71              loop_p except;
       72        72             {
       73        73    1         /* Copy the loopset of b2 to b1, except for 'except' */
CC.C03    File=zbe$sr_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=3  
       74        74    1
       75        75    1         Lindex i;
       76        76    1         loop_p lp;
       77        77    1         for (i = Lfirst(b2->b_loops); i != (Lindex) 0;
       78        78    1              i = Lnext(i,b2->b_loops)) {
       79        79    2            lp = (loop_p) Lelem(i);
       80        80    2            if (lp != except) {
       81        81    3               Ladd(lp,&b1->b_loops);
       82        82    3            }
       83        83    2         }
       84        84    1        }
       85        85
       86        86
       87        87             STATIC lab_id label(b)
       88        88              bblock_p b;
       89        89             {
       90        90    1         /* Find the label at the head of block b. If there is
       91        91    1          * no such label yet, create one.
       92        92    1          */
       93        93    1
       94        94    1         line_p l;
       95        95    1
       96        96    1         assert (b->b_start != (line_p) 0);
       97        97    1         if (INSTR(b->b_start) == op_lab) return INSTRLAB(b->b_start);
       98        98    1         /* The block has no label yet. */
       99        99    1         l = newline(OPINSTRLAB);
      100       100    1         INSTRLAB(l) = freshlabel();
      101       101    1         DLINK(l,b->b_start); /* doubly link them */
      102       102    1         return INSTRLAB(l);
      103       103    1        }
      104       104
      105       105
      106       106             STATIC adjust_jump(newtarg,oldtarg,c)
      107       107              bblock_p newtarg,oldtarg,c;
      108       108             {
      109       109    1         /* If the last instruction of c is a jump to the
      110       110    1          * old target, then change it into a jump to the
CC.C03    File=zbe$sr_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=4  
      111       111    1          * start of the new target.
      112       112    1          */
      113       113    1
      114       114    1         line_p l;
      115       115    1
      116       116    1         if (INSTR(oldtarg->b_start) == op_lab) {
      117       117    2            /* If old target has no label, it cannot be jumped to */
      118       118    2            l = last_instr(c);
      119       119    2            assert(l != (line_p) 0);
      120       120    2            if (TYPE(l) == OPINSTRLAB &&
      121       121    2                INSTRLAB(l) == INSTRLAB(oldtarg->b_start)) {
      122       122    3              if (newtarg->b_start == (line_p) 0) {
      123       123    4                 newtarg->b_start = oldtarg->b_start; }
      124       124    3               INSTRLAB(l) = label(newtarg);
      125       125    3            }
      126       126    2         }
      127       127    1        }
      128       128
      129       129
      130       130             make_header(lp)
      131       131              loop_p lp;
      132       132             {
      133       133    1         /* Make sure that the loop has a header block, i.e. a block
      134       134    1          * has the loop entry block as its only successor and
      135       135    1          * that dominates the loop entry block.
      136       136    1          * If there is no header yet, create one.
      137       137    1          */
      138       138    1
      139       139    1         bblock_p b,c,entry_p;
      140       140    1         Lindex i,next;
      141       141    1
      142       142    1         if (lp->LP_HEADER != (bblock_p) 0) return;
      143       143    1         OUTTRACE("creating a new header block",0);
      144       144    1         /* The loop has no header yet. The main problem is to
      145       145    1          * keep all relations (SUCC, PRED, NEXT, IDOM, LOOPS)
      146       146    1          * up to date.
      147       147    1          */
CC.C03    File=zbe$sr_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=5  
      148       148    1         b = freshblock(); /* new block with new b_id */
      149       149    1         entry_p = lp->lp_entry;
      150       150    1
      151       151    1         /* update succ/pred. Also take care that any jump from outside
      152       152    1          * the loop to the entry block now goes to b.
      153       153    1          */
      154       154    1
      155       155    1         for (i = Lfirst(entry_p->b_pred); i != (Lindex) 0; i = next ) {
      156       156    2            next = Lnext(i,entry_p->b_pred);
      157       157    2            c = (bblock_p) Lelem(i);
      158       158    2            /* c is a predecessor of the entry block */
      159       159    2            if (!Lis_elem(c,lp->LP_BLOCKS)) {
      160       160    3               /* c is outside the loop */
      161       161    3               Lremove(c,&entry_p->b_pred);
      162       162    3               Lremove(entry_p,&c->b_succ);
      163       163    3               Ladd(b,&c->b_succ);
      164       164    3          adjust_jump(b,entry_p,c);
      165       165    3            }
      166       166    2         }
      167       167    1         Ladd(b,&entry_p->b_pred);
      168       168    1         b->b_succ = Lempty_set();
      169       169    1         b->b_pred = Lempty_set();
      170       170    1         Ladd(entry_p,&b->b_succ);
      171       171    1         if (curproc->p_start == entry_p) {
      172       172    2            /* entry was the first block of curproc */
      173       173    2            curproc->p_start = b;
      174       174    2         } else {
      175       175    2            /* find block before entry block */
      176       176    2            for (c = curproc->p_start; c->b_next != entry_p; c = c->b_next);
      177       177    2            c->b_next = b;
      178       178    2            Ladd(c,&b->b_pred);
      179       179    2         }
      180       180    1         b->b_next = entry_p;
      181       181    1         copy_loops(b,entry_p,lp);
      182       182    1         b->b_idom = entry_p->b_idom;
      183       183    1         entry_p->b_idom = b;
      184       184    1         lp->LP_HEADER = b;
CC.C03    File=zbe$sr_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=6  
      185       185    1        }
      186       186
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$sr:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$def:h.:ZBC3TOU. is referenced
   zbe$get:h.:ZBC3TOU. is referenced
   zbe$sr_aux:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   zbe$sr_xform:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$sr_xform:c.:ZBC3TSI
