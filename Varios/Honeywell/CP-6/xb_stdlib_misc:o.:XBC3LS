
PL6.E3A0      #001=GETENV File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:21 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6
        7        7        getenv: PROC (name);
        8        8
        9        9        /*D* PROTOTYPE:   char *getenv (const char *name);
       10       10             DESCRIPTION: returns the string which is the "value" of the arguement
       11       11                          name. If there is no such name then a null pointer is
       12       12                          returned. In CP-6 we are using command variables.
       13       13             RAP Oct 13, 1988
       14       14        */
       15       15
       16       16        %INCLUDE CP_6;
       17     5576
       18     5577    1   DCL name CHAR(name_length);
       19     5578    1   DCL name_length SBIN;
       20     5579
       21     5580    1   DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
       22     5581    1   DCL XBI$STRLEN                ENTRY (2);
       23     5582
       24     5583        %VLP_NAME (STCLASS=AUTO,LEN=31,FPTN=command_name);
       25     5610        %VLP_NAME (STCLASS=STATIC,LEN=512,FPTN=command_value);
       26     5637        %FPT_CMDVAR (STCLASS=CONSTANT,FUN=FETCH,FPTN=constant_cmdvar,
       27     5638           VALUE=command_value);
       28     5655        %FPT_CMDVAR (STCLASS=AUTO,FPTN=auto_cmdvar);
       29     5672
       30     5673    1   CALL XBI$STRLEN (name, name_length);
       31     5674    1   IF (name_length=0) OR (name_length>31) THEN
       32     5675    1      CALL XB_RETURN_ORDINAL_RESULT(ADDR(NIL));
       33     5676    1   command_name.l# = name_length;
       34     5677    1   SUBSTR(command_name.name#,0,name_length) = SUBSTR(name,0,name_length);
       35     5678    1   auto_cmdvar = constant_cmdvar;
       36     5679    1   auto_cmdvar.v_ = VECTOR(auto_cmdvar.v);
       37     5680    1   auto_cmdvar.name_ = VECTOR(command_name);
PL6.E3A0      #001=GETENV File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:21 Page:2    
       38     5681    1   CALL M$CMDVAR (auto_cmdvar)
       39     5682    2   WHENRETURN DO;
       40     5683    2      SUBSTR(command_value.name#,command_value.l#,1) = BINASC(0);
       41     5684    2      CALL XB_RETURN_ORDINAL_RESULT(ADDR(command_value.name#));
       42     5685    2      END;
       43     5686    2   WHENALTRETURN DO;
       44     5687    2      CALL XB_RETURN_ORDINAL_RESULT(ADDR(NIL));
       45     5688    2      END;
       46     5689
       47     5690    1   END getenv;
       48     5691        %EOD;

PL6.E3A0      #001=GETENV File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:21 Page:3    
--  Include file information  --

   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure GETENV.

   Procedure GETENV requires 70 words for executable code.
   Procedure GETENV requires 30 words of local(AUTO) storage.

PL6.E3A0      #001=GETENV File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:21 Page:4    
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=GETENV File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:21 Page:5    
          MINI XREF LISTING

AUTO_CMDVAR
      5666**DCL      5678<<ASSIGN   5681<>CALL
AUTO_CMDVAR.NAME_
      5666**DCL      5680<<ASSIGN
AUTO_CMDVAR.V
      5668**DCL      5679--ASSIGN
AUTO_CMDVAR.V_
      5666**DCL      5679<<ASSIGN
COMMAND_NAME
      5608**DCL      5680--ASSIGN
COMMAND_NAME.L#
      5608**DCL      5676<<ASSIGN
COMMAND_NAME.NAME#
      5608**DCL      5677<<ASSIGN
COMMAND_VALUE
      5635**DCL      5650--DCLINIT
COMMAND_VALUE.L#
      5635**DCL      5683>>ASSIGN
COMMAND_VALUE.NAME#
      5635**DCL      5683<<ASSIGN   5684--CALL
CONSTANT_CMDVAR
      5649**DCL      5678>>ASSIGN
CONSTANT_CMDVAR.V
      5651**DCL      5649--DCLINIT
M$CMDVAR
      5573**DCL-ENT  5681--CALL
NAME
      5577**DCL         7--PROC     5673<>CALL     5677>>ASSIGN
NAME_LENGTH
      5578**DCL      5577--IMP-SIZ  5673>>CALL     5673<>CALL     5674>>IF       5674>>IF       5676>>ASSIGN
      5677>>ASSIGN   5677>>ASSIGN   5677>>ASSIGN
XBI$STRLEN
PL6.E3A0      #001=GETENV File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:21 Page:6    
      5581**DCL-ENT  5673--CALL
XB_RETURN_ORDINAL_RESULT
      5580**DCL-ENT  5675--CALL     5684--CALL     5687--CALL

PL6.E3A0      #002=LSENV File=xb_stdlib_misc:6.:XBC3TSI                          FRI 01/06/95 11:22 Page:7    
       49        1        /*T***********************************************************/
       50        2        /*T*                                                         */
       51        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
       52        4        /*T*                                                         */
       53        5        /*T***********************************************************/
       54        6
       55        7        lsenv: PROC (name);
       56        8
       57        9        /*D* PROTOTYPE:   char *lsenv (const char *name);
       58       10             DESCRIPTION: returns the cmd variable that is after the argument
       59       11                          passed in. If there is no variable after this one,
       60       12                          then a null pointer is returned.  To get the first
       61       13                          variable a string of zero length is used.
       62       14             WGE Nov 30, 1989
       63       15        */
       64       16
       65       17        %INCLUDE CP_6;
       66     5577
       67     5578    1   DCL name CHAR(name_length);
       68     5579    1   DCL name_length SBIN;
       69     5580
       70     5581    1   DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
       71     5582    1   DCL XBI$STRLEN                ENTRY (2);
       72     5583
       73     5584        %VLP_NAME (STCLASS=AUTO,LEN=31,FPTN=command_name);
       74     5611        %VLP_NAME (STCLASS=STATIC,LEN=31,FPTN=command_value);
       75     5638        %FPT_CMDVAR (STCLASS=CONSTANT,FUN=LIST,FPTN=constant_cmdvar,
       76     5639           VALUE=command_value);
       77     5656        %FPT_CMDVAR (STCLASS=AUTO,FPTN=auto_cmdvar);
       78     5673
       79     5674    1   CALL XBI$STRLEN (name, name_length);
       80     5675    1   IF (name_length>31) THEN
       81     5676    1      CALL XB_RETURN_ORDINAL_RESULT(ADDR(NIL));
       82     5677    2   IF (name_length=0) THEN DO;
       83     5678    2      command_name.l# = 1;
       84     5679    2      SUBSTR (command_name.name#,0,1) = 'A';
       85     5680    2   END;
PL6.E3A0      #002=LSENV File=xb_stdlib_misc:6.:XBC3TSI                          FRI 01/06/95 11:22 Page:8    
       86     5681    2   ELSE DO;
       87     5682    2      command_name.l# = name_length;
       88     5683    2      SUBSTR(command_name.name#,0,name_length) = SUBSTR(name,0,name_length);
       89     5684    2   END;
       90     5685    1   auto_cmdvar = constant_cmdvar;
       91     5686    1   auto_cmdvar.v_ = VECTOR(auto_cmdvar.v);
       92     5687    1   auto_cmdvar.name_ = VECTOR(command_name);
       93     5688    1   CALL M$CMDVAR (auto_cmdvar)
       94     5689    2   WHENRETURN DO;
       95     5690    2      SUBSTR(command_value.name#,command_value.l#,1) = BINASC(0);
       96     5691    2      CALL XB_RETURN_ORDINAL_RESULT(ADDR(command_value.name#));
       97     5692    2      END;
       98     5693    2   WHENALTRETURN DO;
       99     5694    2      CALL XB_RETURN_ORDINAL_RESULT(ADDR(NIL));
      100     5695    2      END;
      101     5696
      102     5697    1   END lsenv;
      103     5698        %EOD;

PL6.E3A0      #002=LSENV File=xb_stdlib_misc:6.:XBC3TSI                          FRI 01/06/95 11:22 Page:9    
--  Include file information  --

   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure LSENV.

   Procedure LSENV requires 77 words for executable code.
   Procedure LSENV requires 30 words of local(AUTO) storage.

PL6.E3A0      #002=LSENV File=xb_stdlib_misc:6.:XBC3TSI                          FRI 01/06/95 11:22 Page:10   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=LSENV File=xb_stdlib_misc:6.:XBC3TSI                          FRI 01/06/95 11:22 Page:11   
          MINI XREF LISTING

AUTO_CMDVAR
      5667**DCL      5685<<ASSIGN   5688<>CALL
AUTO_CMDVAR.NAME_
      5667**DCL      5687<<ASSIGN
AUTO_CMDVAR.V
      5669**DCL      5686--ASSIGN
AUTO_CMDVAR.V_
      5667**DCL      5686<<ASSIGN
COMMAND_NAME
      5609**DCL      5687--ASSIGN
COMMAND_NAME.L#
      5609**DCL      5678<<ASSIGN   5682<<ASSIGN
COMMAND_NAME.NAME#
      5609**DCL      5679<<ASSIGN   5683<<ASSIGN
COMMAND_VALUE
      5636**DCL      5651--DCLINIT
COMMAND_VALUE.L#
      5636**DCL      5690>>ASSIGN
COMMAND_VALUE.NAME#
      5636**DCL      5690<<ASSIGN   5691--CALL
CONSTANT_CMDVAR
      5650**DCL      5685>>ASSIGN
CONSTANT_CMDVAR.V
      5652**DCL      5650--DCLINIT
M$CMDVAR
      5574**DCL-ENT  5688--CALL
NAME
      5578**DCL         7--PROC     5674<>CALL     5683>>ASSIGN
NAME_LENGTH
      5579**DCL      5578--IMP-SIZ  5674>>CALL     5674<>CALL     5675>>IF       5677>>IF       5682>>ASSIGN
      5683>>ASSIGN   5683>>ASSIGN   5683>>ASSIGN
XBI$STRLEN
PL6.E3A0      #002=LSENV File=xb_stdlib_misc:6.:XBC3TSI                          FRI 01/06/95 11:22 Page:12   
      5582**DCL-ENT  5674--CALL
XB_RETURN_ORDINAL_RESULT
      5581**DCL-ENT  5676--CALL     5691--CALL     5694--CALL

PL6.E3A0      #003=PUTENV File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:13   
      104        1        /*T***********************************************************/
      105        2        /*T*                                                         */
      106        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      107        4        /*T*                                                         */
      108        5        /*T***********************************************************/
      109        6
      110        7        putenv: PROC (string);
      111        8
      112        9        /*D* PROTOTYPE:   int   putenv (char *string);
      113       10             DESCRIPTION: The putenv() function takes a string of the form
      114       11                          "name=value" and makes an environment variable
      115       12                          name equal to value by either altering an existing
      116       13                          variable or creating a new one.
      117       14
      118       15                          The putenv function returns 0 on successful
      119       16                          completion otherwise the function returns -1.
      120       17
      121       18              WGE   September 7, 1990
      122       19        */
      123       20
      124       21        %INCLUDE CP_6;
      125     5581
      126     5582        /*    Parameter declarations  */
      127     5583
      128     5584    1   DCL string CHAR(string_len);
      129     5585
      130     5586        /*    Function declarations   */
      131     5587
      132     5588    1   DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      133     5589    1   DCL XBI$STRLEN                ENTRY (2);
      134     5590
      135     5591        /*    Local declarations      */
      136     5592
      137     5593    1   DCL   string_len        SBIN;
      138     5594    1   DCL   equal_pos         SBIN;
      139     5595
      140     5596        /*    Monitor declarations    */
PL6.E3A0      #003=PUTENV File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:14   
      141     5597
      142     5598        %VLP_NAME (FPTN=com_name, STCLASS=AUTO, LEN=31);
      143     5625        %VLP_NAME (FPTN=com_value, STCLASS=STATIC, LEN=512);
      144     5652        %FPT_CMDVAR (FPTN=const_cmdvar, STCLASS=CONSTANT, FUN=STORE);
      145     5669        %FPT_CMDVAR (FPTN=auto_cmdvar, STCLASS=AUTO);
      146     5686
      147     5687        /*    Usual kludge to get parameters and lengths of arguments       */
      148     5688
      149     5689    1      CALL XBI$STRLEN (string, string_len);
      150     5690    2      IF (string_len = 0) THEN DO;
      151     5691    2         GOTO error_return;
      152     5692    2      END;
      153     5693
      154     5694        /*    Time to find the position of the "=" and mark it so we can
      155     5695              split the argument into name and value.                       */
      156     5696
      157     5697    1      CALL INDEX (equal_pos, '=', SUBSTR(string, 0, string_len));
      158     5698    2      IF (equal_pos >= string_len) THEN DO;
      159     5699    2         GOTO error_return;
      160     5700    2      END;
      161     5701    1      com_name.l# = equal_pos;
      162     5702    1      SUBSTR(com_name.name#,0,equal_pos) = SUBSTR(string,0,equal_pos);
      163     5703    1      com_value.l# = string_len - equal_pos - 1;
      164     5704    1      SUBSTR(com_value.name#,0,com_value.l#) = SUBSTR(string,equal_pos+1,com_value.l#);
      165     5705    1      auto_cmdvar = const_cmdvar;
      166     5706    1      auto_cmdvar.v_ = VECTOR(auto_cmdvar.v);
      167     5707    1      auto_cmdvar.name_ = VECTOR(com_name);
      168     5708    1      auto_cmdvar.value_ = VECTOR(com_value);
      169     5709    2      CALL M$CMDVAR (auto_cmdvar) WHENALTRETURN DO;
      170     5710    2         GOTO error_return;
      171     5711    2      END;
      172     5712
      173     5713        /*    Th Th Th That's all folks for completion                      */
      174     5714
      175     5715    1      CALL XB_RETURN_ORDINAL_RESULT(0);
      176     5716
      177     5717    1   error_return:
PL6.E3A0      #003=PUTENV File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:15   
      178     5718    1      CALL XB_RETURN_ORDINAL_RESULT(-1);
      179     5719
      180     5720    1   END putenv;
      181     5721        %EOD;

PL6.E3A0      #003=PUTENV File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:16   
--  Include file information  --

   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure PUTENV.

   Procedure PUTENV requires 74 words for executable code.
   Procedure PUTENV requires 30 words of local(AUTO) storage.

PL6.E3A0      #003=PUTENV File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:17   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=PUTENV File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:18   
          MINI XREF LISTING

AUTO_CMDVAR
      5680**DCL      5705<<ASSIGN   5709<>CALL
AUTO_CMDVAR.NAME_
      5680**DCL      5707<<ASSIGN
AUTO_CMDVAR.V
      5682**DCL      5706--ASSIGN
AUTO_CMDVAR.VALUE_
      5680**DCL      5708<<ASSIGN
AUTO_CMDVAR.V_
      5680**DCL      5706<<ASSIGN
COM_NAME
      5623**DCL      5707--ASSIGN
COM_NAME.L#
      5623**DCL      5701<<ASSIGN
COM_NAME.NAME#
      5623**DCL      5702<<ASSIGN
COM_VALUE
      5650**DCL      5708--ASSIGN
COM_VALUE.L#
      5650**DCL      5703<<ASSIGN   5704>>ASSIGN   5704>>ASSIGN
COM_VALUE.NAME#
      5650**DCL      5704<<ASSIGN
CONST_CMDVAR
      5663**DCL      5705>>ASSIGN
CONST_CMDVAR.V
      5665**DCL      5663--DCLINIT
EQUAL_POS
      5594**DCL      5697<<CALLBLT  5698>>IF       5701>>ASSIGN   5702>>ASSIGN   5702>>ASSIGN   5703>>ASSIGN
      5704>>ASSIGN
ERROR_RETURN
      5718**LABEL    5691--GOTO     5699--GOTO     5710--GOTO
M$CMDVAR
PL6.E3A0      #003=PUTENV File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:19   
      5578**DCL-ENT  5709--CALL
STRING
      5584**DCL         7--PROC     5689<>CALL     5697>>CALLBLT  5702>>ASSIGN   5704>>ASSIGN
STRING_LEN
      5593**DCL      5584--IMP-SIZ  5689>>CALL     5689<>CALL     5690>>IF       5697>>CALLBLT  5697>>CALLBLT
      5698>>IF       5702>>ASSIGN   5703>>ASSIGN   5704>>ASSIGN
XBI$STRLEN
      5589**DCL-ENT  5689--CALL
XB_RETURN_ORDINAL_RESULT
      5588**DCL-ENT  5715--CALL     5718--CALL

PL6.E3A0      #004=SYSTEM File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:20   
      182        1        /*T***********************************************************/
      183        2        /*T*                                                         */
      184        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      185        4        /*T*                                                         */
      186        5        /*T***********************************************************/
      187        6
      188        7        system: PROC (command);
      189        8        /*D* PROTOTYPE:   int system(char *command)
      190        9             DESCRIPTION: system passes the string argument to IBEX for
      191       10                          processing and returns 0 if it is OK or the
      192       11                          error code if there is an ALTRET;
      193       12             RAP Nov 8, 1988
      194       13        */
      195       14
      196       15        %INCLUDE CP_6;
      197     5575    1   DCL B$TCB$ PTR SYMREF;
      198     5576        %B$TCB;
      199     5579        %B$ALT;
      200     5587
      201     5588    1   DCL XBI_SET_ERRNO ENTRY(1);
      202     5589    1   DCL XB_RETURN_ORDINAL_RESULT ENTRY(1);
      203     5590    1   DCL XBI$STRLEN               ENTRY(2);
      204     5591
      205     5592        %FPT_YC (FPTN=YC_CONSTANT,STCLASS=CONSTANT,ECHO=NO,LINK=YES,NOERR=YES);
      206     5609        %FPT_YC (FPTN=YC_AUTO,STCLASS=AUTO);
      207     5626
      208     5627    1   DCL command CHAR(command_size);
      209     5628    1   DCL command_size UBIN;
      210     5629
      211     5630    2   IF ADDR(command) = ADDR(NIL) THEN DO;
      212     5631           /* tell the user that there is a command processor */
      213     5632    2      CALL XB_RETURN_ORDINAL_RESULT (1);
      214     5633    2      RETURN;
      215     5634    2   END;
      216     5635
      217     5636    1   YC_AUTO = YC_CONSTANT;
      218     5637    1   YC_AUTO.V_ = VECTOR(YC_AUTO.V);
PL6.E3A0      #004=SYSTEM File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:21   
      219     5638
      220     5639    1   CALL XBI$STRLEN (command, command_size);
      221     5640    1   IF command_size = 0 THEN
      222     5641    1      YC_AUTO.CMD_ = VECTOR(NIL);
      223     5642    1   ELSE
      224     5643    1      YC_AUTO.CMD_ = VECTOR(SUBSTR(command,0,command_size));
      225     5644
      226     5645    1   CALL M$YC(YC_AUTO)
      227     5646    2   WHENRETURN DO;
      228     5647    2      CALL XB_RETURN_ORDINAL_RESULT(0);
      229     5648    2      END;
      230     5649    2   WHENALTRETURN DO;
      231     5650    2      CALL XBI_SET_ERRNO;
      232     5651    2      CALL XB_RETURN_ORDINAL_RESULT(B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR#);
      233     5652    2      END;
      234     5653
      235     5654    1   END system;
      236     5655        %EOD;

PL6.E3A0      #004=SYSTEM File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:22   
--  Include file information  --

   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure SYSTEM.

   Procedure SYSTEM requires 58 words for executable code.
   Procedure SYSTEM requires 16 words of local(AUTO) storage.

PL6.E3A0      #004=SYSTEM File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:23   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=SYSTEM File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:24   
          MINI XREF LISTING

B$ALT.CODE
      5581**DCL      5581--REDEF    5582--REDEF    5582--REDEF
B$ALT.ERR.ERR#
      5583**DCL      5583--REDEF    5651<>CALL
B$ALT.EVID
      5582**DCL      5582--REDEF    5582--REDEF
B$TCB.ALT$
      5577**DCL      5651>>CALL
B$TCB$
      5575**DCL      5651>>CALL
COMMAND
      5627**DCL         7--PROC     5630--IF       5639<>CALL     5643--ASSIGN
COMMAND_SIZE
      5628**DCL      5627--IMP-SIZ  5639>>CALL     5639<>CALL     5640>>IF       5643>>ASSIGN   5643>>ASSIGN
M$YC
      5517**DCL-ENT  5645--CALL
XBI$STRLEN
      5590**DCL-ENT  5639--CALL
XBI_SET_ERRNO
      5588**DCL-ENT  5650--CALL
XB_RETURN_ORDINAL_RESULT
      5589**DCL-ENT  5632--CALL     5647--CALL     5651--CALL
YC_AUTO
      5622**DCL      5636<<ASSIGN   5645<>CALL
YC_AUTO.CMD_
      5622**DCL      5641<<ASSIGN   5643<<ASSIGN
YC_AUTO.V
      5623**DCL      5637--ASSIGN
YC_AUTO.V_
      5622**DCL      5637<<ASSIGN
YC_CONSTANT
      5605**DCL      5636>>ASSIGN
PL6.E3A0      #004=SYSTEM File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:25   
YC_CONSTANT.V
      5606**DCL      5605--DCLINIT

PL6.E3A0      #005=ACCESS File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:26   
      237        1        /*T***********************************************************/
      238        2        /*T*                                                         */
      239        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      240        4        /*T*                                                         */
      241        5        /*T***********************************************************/
      242        6
      243        7        access : PROC (path, mode_p);
      244        8
      245        9        /*D* NAME: access
      246       10             PROTOTYPE:   int  access(char *path, int mode);
      247       11             DESCRIPTION: The access function checks to see if the user has
      248       12                          mode access to the file pointed to by path.
      249       13
      250       14                          If any of the accesses can be granted, then 0 is
      251       15                          returned otherwise, a value of -1 is returned and
      252       16                          errno is set to indicate the error.
      253       17
      254       18              WGE September  4, 1990
      255       19        */
      256       20
      257       21        %INCLUDE CP_6;
      258     5581        %INCLUDE CP_6_SUBS;
      259     6121        %INCLUDE xb_error_numbers_i6;
      260     6168
      261     6169
      262     6170        /*    Parameter declarations  */
      263     6171
      264     6172    1   DCL   path           CHAR(path_len);
      265     6173    1   DCL   mode_p         SBIN;
      266     6174    1   DCL   1 mode   aligned,
      267     6175    1           2   *     BIT(33) UNAL,
      268     6176    1           2   R_OK# BIT(1)  UNAL,
      269     6177    1           2   W_OK# BIT(1)  UNAL,
      270     6178    1           2   X_OK# BIT(1)  UNAL;
      271     6179    1   DCL   mode_as_ptr    REDEF    mode   PTR;
      272     6180
      273     6181        /*    Function declarations   */
PL6.E3A0      #005=ACCESS File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:27   
      274     6182
      275     6183    1   DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      276     6184    1   DCL XBI$STRLEN                ENTRY (2);
      277     6185    1   DCL XBI_SET_ERRNO             ENTRY (1);
      278     6186
      279     6187        /*    Local declarations      */
      280     6188
      281     6189    1   DCL   path_len       SBIN;
      282     6190    1   DCL   ret_val        SBIN;
      283     6191    1   DCL   dcb_number     UBIN;
      284     6192    1   DCL   dcb$           ptr;
      285     6193
      286     6194        /*    Monitor declarations    */
      287     6195
      288     6196        %FPT_FID (FPTN=CONST_FPT_FID, STCLASS=CONSTANT);
      289     6219        %FPT_FID (FPTN=FPT_PATHFID, STCLASS=AUTO);
      290     6242        %FPT_OPEN   (FPTN=constant_open, TEST=YES, STCLASS=CONSTANT);
      291     6351        %FPT_OPEN   (FPTN=auto_open, STCLASS=AUTO);
      292     6460        %FPT_GETDCB (FPTN=constant_getdcb, STCLASS=CONSTANT);
      293     6475        %FPT_GETDCB (FPTN=auto_getdcb, STCLASS=AUTO);
      294     6490        %FPT_RELDCB (FPTN=constant_reldcb, STCLASS=CONSTANT);
      295     6504        %FPT_RELDCB (FPTN=auto_reldcb, STCLASS=AUTO);
      296     6518
      297     6519        %VLP_NAME (FPTN=VLP_PATHNAME, LEN=31, STCLASS=AUTO);
      298     6546        %VLP_ACCT (FPTN=VLP_PATHACCT, STCLASS=AUTO);
      299     6559        %VLP_PASS (FPTN=VLP_PATHPASS, STCLASS=AUTO);
      300     6572        %VLP_WSN (FPTN=VLP_PATHWSN, STCLASS=AUTO);
      301     6585        %VLP_SN (FPTN=VLP_PATHSN, STCLASS=AUTO);
      302     6598        %VLR_FID (FPTN=VLR_PATHFID, STCLASS=AUTO);
      303     6617
      304     6618        %F$DCB(BASED="BASED(dcb$)");
      305     6675
      306     6676        /*    Declarations of possible errors that can occur                */
      307     6677
      308     6678        %VLP_ERRCODE(FPTN=XB$ERR$ENOENT,
      309     6679                     FCG='XB', MID='I', ERR#="ENOENT", SEV=7);
      310     6724
PL6.E3A0      #005=ACCESS File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:28   
      311     6725        %VLP_ERRCODE(FPTN=XB$ERR$EACCES, STCLASS="CONSTANT SYMDEF",
      312     6726                     FCG='XB', MID='I', ERR#="EACCES", SEV=7);
      313     6771
      314     6772        /*    Usual kludge to get parameters and get length of arguments    */
      315     6773
      316     6774    1      mode_as_ptr = ADDR(mode_p);
      317     6775    1      CALL XBI$STRLEN(path, path_len);
      318     6776    1      ret_val = 0;
      319     6777
      320     6778        /*    Time to do an M$FID on the path  name                         */
      321     6779
      322     6780    2      IF path_len = 0 THEN DO;
      323     6781    2         CALL XBI_SET_ERRNO (XB$ERR$ENOENT);
      324     6782    2         CALL XB_RETURN_ORDINAL_RESULT (-1);
      325     6783    2      END;
      326     6784    1      VLP_PATHNAME.L#= path_len;
      327     6785    1      SUBSTR(VLP_PATHNAME.NAME#,0,path_len) = SUBSTR(path,0,path_len);
      328     6786
      329     6787        /* get a DCB to use */
      330     6788
      331     6789    1      auto_getdcb = constant_getdcb;
      332     6790    1      auto_getdcb.v_ = VECTOR(auto_getdcb.v);
      333     6791    1      auto_getdcb.dcbnum_ = VECTOR(dcb_number);
      334     6792    1      CALL M$GETDCB (auto_getdcb)
      335     6793    2      WHENALTRETURN DO;   /* failed to get a DCB .. give user an error */
      336     6794    2         CALL XB_RETURN_ORDINAL_RESULT(-1);
      337     6795    2      END;
      338     6796
      339     6797    1      auto_open = constant_open;
      340     6798    1      auto_open.v_ = VECTOR(auto_open.v);
      341     6799    1      FPT_PATHFID        = CONST_FPT_FID;
      342     6800    1      FPT_PATHFID.V_     = VECTOR(FPT_PATHFID.V);
      343     6801    1      FPT_PATHFID.NAME_  = VECTOR(VLP_PATHNAME);
      344     6802    1      FPT_PATHFID.ACCT_  = VECTOR(VLP_PATHACCT);
      345     6803    1      FPT_PATHFID.PASS_  = VECTOR(VLP_PATHPASS);
      346     6804    1      FPT_PATHFID.ASN_   = VECTOR(auto_open.V.ASN#);
      347     6805    1      FPT_PATHFID.RES_   = VECTOR(auto_open.V.RES#);
PL6.E3A0      #005=ACCESS File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:29   
      348     6806    1      FPT_PATHFID.SN_    = VECTOR(VLP_PATHSN);
      349     6807    1      FPT_PATHFID.WSN_   = VECTOR(VLP_PATHWSN);
      350     6808    1      FPT_PATHFID.TEXTFID_ = VECTOR(path);
      351     6809    1      FPT_PATHFID.RESULTS_ = VECTOR(VLR_PATHFID);
      352     6810    1      VLR_PATHFID = '0'B;
      353     6811    2      CALL M$FID (FPT_PATHFID) whenaltreturn do;
      354     6812    2         ret_val = -1;
      355     6813    2         goto return_cleanup;
      356     6814    2      end;
      357     6815
      358     6816        /*    Now that the files has been M$FIDed it is time to do a test
      359     6817              open to see if the requested access is attainable for the
      360     6818              file.                                                         */
      361     6819
      362     6820    1      auto_open.ACCT_ = VECTOR(VLP_PATHACCT);
      363     6821    1      auto_open.NAME_ = VECTOR(VLP_PATHNAME);
      364     6822    1      auto_open.PASS_ = VECTOR(VLP_PATHPASS);
      365     6823    1      auto_open.SN_   = VECTOR(VLP_PATHSN);
      366     6824    1      auto_open.WSN_  = VECTOR(VLP_PATHWSN);
      367     6825    1      auto_open.v.dcb# = dcb_number;
      368     6826
      369     6827    2      CALL M$OPEN (auto_open) WHENALTRETURN DO;
      370     6828    2         ret_val = -1;
      371     6829    2         CALL XBI_SET_ERRNO (XB$ERR$ENOENT);
      372     6830    2         GOTO return_cleanup;
      373     6831    2      END;
      374     6832    1      dcb$ = DCBADDR(dcb_number);
      375     6833
      376     6834        /*    Now actually check its access information                     */
      377     6835
      378     6836    1      IF NOT ((mode.W_OK# AND F$DCB.FFLG.WNEW#) OR
      379     6837    1              (mode.R_OK# AND F$DCB.FFLG.READ#) OR
      380     6838    1              (mode.X_OK# AND (F$DCB.FFLG.EXEC# OR F$DCB.FFLG.READ# OR F$DCB.FFLG.WNEW#
              6838                       )) OR
      381     6839    2              (NOT(mode.X_OK# OR mode.R_OK# OR mode.W_OK#))) THEN DO;
      382     6840    2            ret_val = -1;
      383     6841        /*E* ERROR: XBI-EACCES-C
PL6.E3A0      #005=ACCESS File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:30   
      384     6842             MESSAGE: Access is denied to the requested file.
      385     6843        */
      386     6844    2            CALL XBI_SET_ERRNO (XB$ERR$EACCES);
      387     6845    2      END;
      388     6846
      389     6847
      390     6848    1   return_cleanup:
      391     6849    1      auto_reldcb = constant_reldcb;
      392     6850    1      auto_reldcb.v_ = VECTOR (auto_reldcb.v);
      393     6851    1      auto_reldcb.v.dcb# = dcb_number;
      394     6852    2      CALL M$RELDCB (auto_reldcb) WHENALTRETURN DO; END;
      395     6853
      396     6854        /* Th Th Th That's all folks, for completion                        */
      397     6855
      398     6856    1      CALL XB_RETURN_ORDINAL_RESULT(ret_val);
      399     6857    1   END access;
      400     6858        %EOD;

PL6.E3A0      #005=ACCESS File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:31   
--  Include file information  --

   xb_error_numbers_i6.:XBC3TOU  is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure ACCESS.

   Procedure ACCESS requires 227 words for executable code.
   Procedure ACCESS requires 134 words of local(AUTO) storage.

PL6.E3A0      #005=ACCESS File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:32   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=ACCESS File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:33   
          MINI XREF LISTING

AUTO_GETDCB
      6486**DCL      6789<<ASSIGN   6792<>CALL
AUTO_GETDCB.DCBNUM_
      6486**DCL      6791<<ASSIGN
AUTO_GETDCB.V
      6487**DCL      6790--ASSIGN
AUTO_GETDCB.V_
      6486**DCL      6790<<ASSIGN
AUTO_OPEN
      6416**DCL      6797<<ASSIGN   6827<>CALL
AUTO_OPEN.ACCT_
      6420**DCL      6820<<ASSIGN
AUTO_OPEN.ACSVEH_
      6418**DCL      6419--REDEF
AUTO_OPEN.ALTKEYS_
      6424**DCL      6425--REDEF    6425--REDEF
AUTO_OPEN.HDR_
      6423**DCL      6424--REDEF
AUTO_OPEN.NAME_
      6417**DCL      6821<<ASSIGN
AUTO_OPEN.PASS_
      6418**DCL      6822<<ASSIGN
AUTO_OPEN.SN_
      6416**DCL      6823<<ASSIGN
AUTO_OPEN.TAB_
      6422**DCL      6423--REDEF
AUTO_OPEN.UHL_
      6416**DCL      6417--REDEF    6417--REDEF
AUTO_OPEN.V
      6425**DCL      6798--ASSIGN
AUTO_OPEN.V.ASN#
      6435**DCL      6804--ASSIGN
PL6.E3A0      #005=ACCESS File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:34   
AUTO_OPEN.V.DCB#
      6425**DCL      6825<<ASSIGN
AUTO_OPEN.V.FSN#
      6456**DCL      6456--REDEF    6456--REDEF
AUTO_OPEN.V.RES#
      6440**DCL      6805--ASSIGN
AUTO_OPEN.V_
      6416**DCL      6798<<ASSIGN
AUTO_OPEN.WSN_
      6422**DCL      6422--REDEF    6824<<ASSIGN
AUTO_RELDCB
      6515**DCL      6849<<ASSIGN   6852<>CALL
AUTO_RELDCB.V
      6515**DCL      6850--ASSIGN
AUTO_RELDCB.V.DCB#
      6515**DCL      6851<<ASSIGN
AUTO_RELDCB.V_
      6515**DCL      6850<<ASSIGN
CONSTANT_GETDCB
      6471**DCL      6789>>ASSIGN
CONSTANT_GETDCB.V
      6472**DCL      6471--DCLINIT
CONSTANT_OPEN
      6307**DCL      6797>>ASSIGN
CONSTANT_OPEN.ACSVEH_
      6309**DCL      6310--REDEF
CONSTANT_OPEN.ALTKEYS_
      6315**DCL      6316--REDEF    6316--REDEF
CONSTANT_OPEN.HDR_
      6314**DCL      6315--REDEF
CONSTANT_OPEN.TAB_
      6313**DCL      6314--REDEF
CONSTANT_OPEN.UHL_
      6307**DCL      6308--REDEF    6308--REDEF
CONSTANT_OPEN.V
      6316**DCL      6307--DCLINIT
PL6.E3A0      #005=ACCESS File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:35   
CONSTANT_OPEN.V.FSN#
      6347**DCL      6347--REDEF    6347--REDEF
CONSTANT_OPEN.WSN_
      6313**DCL      6313--REDEF
CONSTANT_RELDCB
      6501**DCL      6849>>ASSIGN
CONSTANT_RELDCB.V
      6501**DCL      6501--DCLINIT
CONST_FPT_FID
      6207**DCL      6799>>ASSIGN
CONST_FPT_FID.V
      6211**DCL      6207--DCLINIT
DCB$
      6192**DCL      6619--IMP-PTR  6832<<ASSIGN   6836>>IF       6836>>IF       6836>>IF       6836>>IF
      6836>>IF
DCB_NUMBER
      6191**DCL      6791--ASSIGN   6825>>ASSIGN   6832--ASSIGN   6851>>ASSIGN
F$DCB.ACTPOS
      6651**DCL      6651--REDEF
F$DCB.ARS#
      6625**DCL      6625--REDEF
F$DCB.ATTR
      6644**DCL      6645--REDEF
F$DCB.BORROW
      6659**DCL      6659--REDEF    6659--REDEF    6659--REDEF
F$DCB.DCBNAME.L
      6673**DCL      6673--IMP-SIZ
F$DCB.EOMCHAR#
      6629**DCL      6629--REDEF
F$DCB.FFLG.EXEC#
      6631**DCL      6836>>IF
F$DCB.FFLG.READ#
      6630**DCL      6836>>IF       6836>>IF
F$DCB.FFLG.WNEW#
      6630**DCL      6836>>IF       6836>>IF
F$DCB.FLDID
PL6.E3A0      #005=ACCESS File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:36   
      6654**DCL      6654--REDEF
F$DCB.FORM$
      6648**DCL      6648--REDEF
F$DCB.FSECT
      6664**DCL      6664--REDEF
F$DCB.FSN#
      6641**DCL      6641--REDEF    6641--REDEF    6642--REDEF
F$DCB.HEADER$
      6647**DCL      6647--REDEF
F$DCB.IXTNSIZE#
      6645**DCL      6645--REDEF
F$DCB.LASTSTA$
      6634**DCL      6634--REDEF
F$DCB.LVL
      6660**DCL      6660--REDEF
F$DCB.NAME#.C
      6635**DCL      6635--REDEF
F$DCB.NOEOF
      6657**DCL      6657--REDEF
F$DCB.NRECS#
      6646**DCL      6646--REDEF
F$DCB.NRECX
      6665**DCL      6665--REDEF
F$DCB.OHDR
      6657**DCL      6657--REDEF
F$DCB.ORG#
      6640**DCL      6640--REDEF
F$DCB.PRECNO
      6663**DCL      6663--REDEF
F$DCB.RCSZ
      6669**DCL      6669--REDEF
F$DCB.RES#
      6636**DCL      6636--REDEF
F$DCB.SETX
      6648**DCL      6648--REDEF
F$DCB.TAB$
PL6.E3A0      #005=ACCESS File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:37   
      6648**DCL      6648--REDEF
F$DCB.TDA
      6662**DCL      6663--REDEF
F$DCB.WSN#
      6636**DCL      6636--REDEF
FPT_PATHFID
      6230**DCL      6799<<ASSIGN   6811<>CALL
FPT_PATHFID.ACCT_
      6231**DCL      6802<<ASSIGN
FPT_PATHFID.ASN_
      6233**DCL      6804<<ASSIGN
FPT_PATHFID.NAME_
      6231**DCL      6801<<ASSIGN
FPT_PATHFID.PASS_
      6231**DCL      6803<<ASSIGN
FPT_PATHFID.RESULTS_
      6233**DCL      6809<<ASSIGN
FPT_PATHFID.RES_
      6233**DCL      6805<<ASSIGN
FPT_PATHFID.SN_
      6232**DCL      6806<<ASSIGN
FPT_PATHFID.TEXTFID_
      6230**DCL      6808<<ASSIGN
FPT_PATHFID.V
      6234**DCL      6800--ASSIGN
FPT_PATHFID.V_
      6230**DCL      6800<<ASSIGN
FPT_PATHFID.WSN_
      6232**DCL      6807<<ASSIGN
M$FID
      5572**DCL-ENT  6811--CALL
M$GETDCB
      5515**DCL-ENT  6792--CALL
M$OPEN
      5509**DCL-ENT  6827--CALL
M$RELDCB
PL6.E3A0      #005=ACCESS File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:38   
      5515**DCL-ENT  6852--CALL
MODE
      6174**DCL      6179--REDEF
MODE.R_OK#
      6176**DCL      6836>>IF       6836>>IF
MODE.W_OK#
      6177**DCL      6836>>IF       6836>>IF
MODE.X_OK#
      6178**DCL      6836>>IF       6836>>IF
MODE_AS_PTR
      6179**DCL      6774<<ASSIGN
MODE_P
      6173**DCL         7--PROC     6774--ASSIGN
PATH
      6172**DCL         7--PROC     6775<>CALL     6785>>ASSIGN   6808--ASSIGN
PATH_LEN
      6189**DCL      6172--IMP-SIZ  6775>>CALL     6775<>CALL     6780>>IF       6784>>ASSIGN   6785>>ASSIGN
      6785>>ASSIGN   6785>>ASSIGN   6808>>ASSIGN
RETURN_CLEANUP
      6849**LABEL    6813--GOTO     6830--GOTO
RET_VAL
      6190**DCL      6776<<ASSIGN   6812<<ASSIGN   6828<<ASSIGN   6840<<ASSIGN   6856<>CALL
VLP_PATHACCT
      6557**DCL      6802--ASSIGN   6820--ASSIGN
VLP_PATHNAME
      6544**DCL      6801--ASSIGN   6821--ASSIGN
VLP_PATHNAME.L#
      6544**DCL      6784<<ASSIGN
VLP_PATHNAME.NAME#
      6544**DCL      6785<<ASSIGN
VLP_PATHPASS
      6570**DCL      6803--ASSIGN   6822--ASSIGN
VLP_PATHSN
      6596**DCL      6806--ASSIGN   6823--ASSIGN
VLP_PATHWSN
      6583**DCL      6807--ASSIGN   6824--ASSIGN
PL6.E3A0      #005=ACCESS File=xb_stdlib_misc:6.:XBC3TSI                         FRI 01/06/95 11:22 Page:39   
VLR_PATHFID
      6609**DCL      6809--ASSIGN   6810<<ASSIGN
XB$ERR$EACCES
      6738**DCL      6844<>CALL
XB$ERR$ENOENT
      6691**DCL      6781<>CALL     6829<>CALL
XBI$STRLEN
      6184**DCL-ENT  6775--CALL
XBI_SET_ERRNO
      6185**DCL-ENT  6781--CALL     6829--CALL     6844--CALL
XB_RETURN_ORDINAL_RESULT
      6183**DCL-ENT  6782--CALL     6794--CALL     6856--CALL

PL6.E3A0      #006=CHDIR File=xb_stdlib_misc:6.:XBC3TSI                          FRI 01/06/95 11:22 Page:40   
      401        1        /*T***********************************************************/
      402        2        /*T*                                                         */
      403        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      404        4        /*T*                                                         */
      405        5        /*T***********************************************************/
      406        6
      407        7        chdir : PROC (path);
      408        8
      409        9        /*D* NAME: chdir
      410       10             PROTOTYPE:   int  chdir(char *path);
      411       11             DESCRIPTION: The chdir function changes the default accoutn to
      412       12                          the account pointed to by path.  Upon successful
      413       13                          completion the function returns the value of 0.
      414       14                          Otherwise, a value of -1 is returned and errno is
      415       15                          set to indicate the error.
      416       16
      417       17              WGE August 30, 1990
      418       18        */
      419       19
      420       20        %INCLUDE CP_6;
      421     5580        %INCLUDE CP_6_SUBS;
      422     6120        %INCLUDE B$JIT;
      423     6723        %INCLUDE xb_error_numbers_i6;
      424     6770
      425     6771    1   DCL   B$JIT$      PTR   SYMREF;
      426     6772
      427     6773        /*    Parameter declarations  */
      428     6774
      429     6775    1   DCL   path           CHAR(path_len);
      430     6776
      431     6777        /*    Function declarations   */
      432     6778
      433     6779    1   DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      434     6780    1   DCL XBI$STRLEN                ENTRY (2);
      435     6781    1   DCL XBI_SET_ERRNO             ENTRY (1);
      436     6782
      437     6783        /*    Local declarations      */
PL6.E3A0      #006=CHDIR File=xb_stdlib_misc:6.:XBC3TSI                          FRI 01/06/95 11:22 Page:41   
      438     6784
      439     6785    1   DCL   path_len       SBIN;
      440     6786
      441     6787        /*    Monitor declarations    */
      442     6788
      443     6789        %VLP_ACCT(FPTN=ACCT_NAME, STCLASS=AUTO);
      444     6802        %FPT_SETFMA(FPTN=FPT_SETFMA_CONST, STCLASS=CONSTANT);
      445     6815        %FPT_SETFMA(FPTN=FPT_SETFMA, STCLASS=AUTO);
      446     6828
      447     6829        /*    Declarations of possible errors that can occur                */
      448     6830
      449     6831        %VLP_ERRCODE(FPTN=XB$ERR$ENAMETOOLONG, STCLASS="CONSTANT SYMDEF",
      450     6832                     FCG='XB', MID='I', ERR#="ENAMETOOLONG", SEV=7);
      451     6877
      452     6878        %VLP_ERRCODE(FPTN=XB$ERR$ENOENT, STCLASS="CONSTANT SYMDEF",
      453     6879                     FCG='XB', MID='I', ERR#="ENOENT", SEV=7);
      454     6924
      455     6925        /*    Usual kludge to get parameters and get length of arguments    */
      456     6926
      457     6927    1      CALL XBI$STRLEN(path, path_len);
      458     6928
      459     6929        /*    This function I think should be very forgiven and should work
      460     6930              if the '.' character is there or not, but if the length of
      461     6931              the path is too long we must return in error.                 */
      462     6932
      463     6933    1      IF (path_len > 8) AND (path_len ~= 9 AND SUBSTR(path,0,1) ~= '.')
      464     6934    2      THEN DO;
      465     6935        /*E* ERROR: XBI-ENAMETOOLONG-C
      466     6936             MESSAGE: The path name is too long to be a valid account.
      467     6937        */
      468     6938
      469     6939    2         CALL XBI_SET_ERRNO (XB$ERR$ENAMETOOLONG);
      470     6940    2         CALL XB_RETURN_ORDINAL_RESULT(-1);
      471     6941    2      END;
      472     6942
      473     6943    2      IF (SUBSTR(path,0,1) = '.') THEN DO;
      474     6944    2         SUBSTR(ACCT_NAME.ACCT#,0,8) = SUBSTR(path,1,path_len-1);
PL6.E3A0      #006=CHDIR File=xb_stdlib_misc:6.:XBC3TSI                          FRI 01/06/95 11:22 Page:42   
      475     6945    2      END;
      476     6946    2      ELSE DO;
      477     6947    2         SUBSTR(ACCT_NAME.ACCT#,0,8) = SUBSTR(path,0,path_len);
      478     6948    2      END;
      479     6949
      480     6950        /*    Set up the monitor call to do the actual work                 */
      481     6951
      482     6952    1      FPT_SETFMA = FPT_SETFMA_CONST;
      483     6953    1      FPT_SETFMA.ACCT_ = VECTOR(ACCT_NAME);
      484     6954    1      FPT_SETFMA.PSN_ =  VECTOR(B$JIT.FPSN);
      485     6955    1      CALL M$SETFMA(FPT_SETFMA)
      486     6956    2      WHENALTRETURN DO;
      487     6957        /*E* ERROR: XBI-ENOENT-C
      488     6958             MESSAGE: The named account does not exist.
      489     6959        */
      490     6960
      491     6961    2         CALL XBI_SET_ERRNO (XB$ERR$ENOENT);
      492     6962    2         CALL XB_RETURN_ORDINAL_RESULT(-1);
      493     6963    2      END;
      494     6964
      495     6965        /* Th Th Th That's all folks, for successful completion             */
      496     6966
      497     6967    1      CALL XB_RETURN_ORDINAL_RESULT(0);
      498     6968    1   END chdir;

PL6.E3A0      #006=CHDIR File=xb_stdlib_misc:6.:XBC3TSI                          FRI 01/06/95 11:22 Page:43   
--  Include file information  --

   xb_error_numbers_i6.:XBC3TOU  is referenced.
   B$JIT_C.:LIB_E04  is referenced.
   B$JIT.:LIB_E04  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure CHDIR.

   Procedure CHDIR requires 73 words for executable code.
   Procedure CHDIR requires 14 words of local(AUTO) storage.

    No errors detected in file xb_stdlib_misc:6.:XBC3TSI    .

PL6.E3A0      #006=CHDIR File=xb_stdlib_misc:6.:XBC3TSI                          FRI 01/06/95 11:22 Page:44   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=CHDIR File=xb_stdlib_misc:6.:XBC3TSI                          FRI 01/06/95 11:22 Page:45   
          MINI XREF LISTING

ACCT_NAME
      6800**DCL      6953--ASSIGN
ACCT_NAME.ACCT#
      6800**DCL      6944<<ASSIGN   6947<<ASSIGN
B$JIT.CPFLAGS1.SLEAZE
      6541**DCL      6541--REDEF
B$JIT.ERR.MID
      6448**DCL      6448--REDEF
B$JIT.FPSN
      6528**DCL      6954--ASSIGN
B$JIT.JRESPEAK
      6609**DCL      6610--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
      6718**DCL      6718--REDEF    6719--REDEF
B$JIT.PNR
      6622**DCL      6622--REDEF
B$JIT.TSLINE
      6716**DCL      6717--REDEF
B$JIT$
      6771**DCL      6442--IMP-PTR  6954>>ASSIGN
FPT_SETFMA
      6826**DCL      6952<<ASSIGN   6955<>CALL
FPT_SETFMA.ACCT_
      6826**DCL      6953<<ASSIGN
FPT_SETFMA.PSN_
      6826**DCL      6954<<ASSIGN
FPT_SETFMA_CONST
      6813**DCL      6952>>ASSIGN
M$SETFMA
      5508**DCL-ENT  6955--CALL
PATH
      6775**DCL         7--PROC     6927<>CALL     6933>>IF       6943>>IF       6944>>ASSIGN   6947>>ASSIGN
PL6.E3A0      #006=CHDIR File=xb_stdlib_misc:6.:XBC3TSI                          FRI 01/06/95 11:22 Page:46   
PATH_LEN
      6785**DCL      6775--IMP-SIZ  6927>>CALL     6927<>CALL     6933>>IF       6933>>IF       6933>>IF
      6943>>IF       6944>>ASSIGN   6944>>ASSIGN   6947>>ASSIGN   6947>>ASSIGN
XB$ERR$ENAMETOOLONG
      6844**DCL      6939<>CALL
XB$ERR$ENOENT
      6891**DCL      6961<>CALL
XBI$STRLEN
      6780**DCL-ENT  6927--CALL
XBI_SET_ERRNO
      6781**DCL-ENT  6939--CALL     6961--CALL
XB_RETURN_ORDINAL_RESULT
      6779**DCL-ENT  6940--CALL     6962--CALL     6967--CALL
