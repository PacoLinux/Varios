

14:56 JUL 28 '97 KV_GLB_M.:E05SI                                           1    
    1      /*M* KV_GLB_M VDH Global macros */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*F* NAME:  KV$CMPOTP - Complete Output.
    8      VDH should do whatever is necessary to complete
    9      any partial output processing, such a completing a pending
   10      positioning request.
   11
   12      The KV$CMPOTP macro is typically used just before the VDH-user truncates
   13      its last output buffer.  Usage of this macro does not cause
   14      truncation of the output buffer.
   15
   16      This macro is needed only for devices that have some concept
   17      of line/column positioning.  For example, interactive display
   18      devices and line printers would need it, but card punches would
   19      not.
   20
   21      .brn 3
   22      Format:
   23
   24      KV$CMPOTP;
   25       */
   26      %MACRO KV$CMPOTP;
   27      %LSET LISTSUB = '1'B;
   28      %LSET LISTDIR='0'B;
   29      %LSET LISTMAC='1'B;
   30      %LSET LISTEXP='1'B;
   31      /* !C! */
   32              IF %KV_VDI.OTPCNDPND THEN DO;
   33                 CALL KVV$VDI(KV_VDH_EVT_CMPOTP);
   34                 END;                         /* END IF                             */
   35      /* ! ! */
   36      %MEND;
   37      /*F* NAME:  KV$TRNINP - Translate Input.
14:56 JUL 28 '97 KV_GLB_M.:E05SI                                           2    
   38      KV$TRNINP translates the contents of a user-provided buffer
   39      into another user-provided buffer, using the VDH translate
   40      table specified by the user.  The translation is done according
   41      to the input translation rules.  The translation table
   42      specified must be simple, i.e., the translation must occur
   43      completely within the primary table and not invoke any input functions.
   44
   45      The following declarations must be present:
   46
   47      .fif
   48         %INCLUDE KV$GLB;
   49         %INCLUDE KV$INT;
   50         %KV$TRNTBL;
   51         DCL Y$CHR CHAR(256) BASED;
   52      .fin
   53
   54      The following may be specified as parameters when KV$TRNINP is
   55      invoked:
   56       */
   57      %MACRO KV$TRNINP (INPBFR = , OTPBFR = , TRNTBL$ = );
   58      /*K* INPBFR = VALUE-CHAR(n).  Describes the input
   59      buffer to be translated.
   60      */
   61      /*K* OTPBFR = VALUE-CHAR(n).  Describes the output
   62      buffer to be translated.
   63      */
   64      /*K* TRNTBL$ = PTR.  Points to a KV$TRNTBL translate table header.
   65      */
   66      %LSET LISTSUB = '1'B;
   67      %LSET LISTDIR = '0'B;
   68      %LSET LISTMAC = '1'B;
   69      %LSET LISTEXP = '1'B;
   70      /* !C! */
   71      CALL XLATE(OTPBFR, TRNTBL$->KV$TRNTBL.INPTRN1$->Y$CHR, INPBFR);
   72      /* ! ! */
   73      %MEND;
   74      /*F* NAME:  KV$RQSOTP - Control Output.
14:56 JUL 28 '97 KV_GLB_M.:E05SI                                           3    
   75      The KV$RQSOTP macro is used to control the requesting of output.
   76
   77      Controlling the flow of output through the handler is the joint
   78      responsibility of VDH and the VDH-user.  The VDH-user establishes
   79      the approximate level of accumulation at which it intends to block
   80      further output by setting the KV$VDH_INT.RCVFLWCTRMAXCRD parameter
   81      (the BLOCK value) when the connection is created.
   82
   83      VDH then asks for BLOCK characters of output to be sent from the
   84      other end (the host, for example).  The other end is then required
   85      by the protocol to send no more than BLOCK characters of output,
   86      followed by an indication that it is waiting for permission to send
   87      more.  To prevent unneeded blocking, however, VDH will request more
   88      output whenever it has received 25% of the BLOCK value, asking for
   89      an additional amount equal to the amount it has received since its
   90      last request.  This permits output that is slower than the device
   91      to flow smoothly, without interruption.  For slower devices, the
   92      output will begin to build up in the VDH-user's buffers.
   93      The VDH-user must detect this condition and invoke the KV$RQSOTP macro
   94      with RQSOTP=NO when the build-up reaches the BLOCK value.  VDH reacts
   95      by curtailing any further requests for output.  Since the other end
   96      could at that time have permission to send as much as BLOCK
   97      characters, the VDH-user should be prepared to accept that much more.
   98      If the device is connected to more than one other end-point, each one
   99      could otherwise send BLOCK characters, so VDH sends a message to each
  100      one requesting that no more output be sent.  Depending on the speed
  101      of those connections, that may or may not succeed in limiting the
  102      additional output to BLOCK characters.
  103
  104      Having stopped the output flow via KV$RQSOTP (RQSOTP=NO), the VDH-user
  105      then waits for the output build-up to drop to some lower value
  106      (preferably a NETCON UNBLOCK parameter), and then requests the
  107      resumption of output flow by invoking KV$RQSOTP with RQSOTP=YES.
  108      VDH then sends a message to each other end-point permitting BLOCK
  109      characters of output to be sent.
  110
  111      Format of Reference:
14:56 JUL 28 '97 KV_GLB_M.:E05SI                                           4    
  112
  113        KV$RQSOTP (RQSOTP = YES);    Request more output
  114
  115        -- OR --
  116
  117        KV$RQSOTP (RQSOTP = NO);     Wind down the flow of output
  118      */
  119      %MACRO KV$RQSOTP(RQSOTP(YES = '1'B, NO = '0'B, ANY) = );
  120      %LSET LISTSUB = '1'B;
  121      %LSET LISTDIR='0'B;
  122      %LSET LISTMAC='1'B;
  123      %LSET LISTEXP='1'B;
  124      /* !C! */
  125      %IF RQSOTP = '0'B;
  126              IF %KV_VDI.%CHARTEXT('RQSOTP') THEN DO;
  127                 %KV_VDI.%CHARTEXT('RQSOTP') = '0'B;
  128                 IF %KV_VDI.SSNCNT>1
  129                 THEN CALL KVV$VDI (KV_VDH_EVT_RQSOTP);
  130                 END;
  131      %ELSE;
  132              IF NOT %KV_VDI.%CHARTEXT('RQSOTP ') THEN DO;
  133                 %KV_VDI.%CHARTEXT('RQSOTP') = '1'B;
  134                 CALL KVV$VDI(KV_VDH_EVT_RQSOTP);
  135                 END;                         /* END IF                             */
  136      /* ! ! */
  137      %ENDIF;
  138      %MEND;
  139      /*F* NAME:  Code-generating Macros
  140
  141      The following code-generating macros are available for VDH-users:
  142
  143      .fif
  144      KV$USRENT - User entry macro
  145      KV$USREXT - User exit macro
  146      KV$CMPOTP - Complete output macro
  147      KV$RQSOTP - Control output macro
  148      .fin
14:56 JUL 28 '97 KV_GLB_M.:E05SI                                           5    
  149      */
  150      /*F* NAME:  KV$USRENT - User Entry.
  151      The KV$USRENT macro is used by VDH-users at an interrupt to:
  152
  153      .inl 4
  154      .unl 4
  155      o   determine whether the requested processing can be performed now or
  156      if it needs to be deferred, and
  157
  158      .unl 4
  159      o   set up context for entering VDH.
  160      .inl 0
  161
  162      The VDH-user must take precautions if re-entry of VDH is possible.
  163      In general, these precautions are necessary whenever the VDH-user
  164      is not called through KV$USRPRM.USRSBR$ or wants to operate for a
  165      different session (in other words, whenever KV$PTR$ does not match
  166      what the VDH-user needs).  In that case (e.g., on receiving control
  167      at an interrupt) the VDH-user invokes the KV$USRENT macro to save the
  168      current context and later invokes the KV$USREXT macro after
  169      processing is complete to restore the previous context.
  170      ..::IX "re-entrancy, VDH"
  171
  172      When starting a new instance of VDI, invoking KV$USRENT/KV$USREXT
  173      with VDI$=ADDR(NIL) saves/restores KV$PTR$.
  174
  175      .brn 6
  176      Format:
  177      .spf
  178      }KV$USRENT (VDI$ = vdi-pointer,
  179      }           DFR$ = deferred-execution-label,
  180      }           SCHRSN = KV#SCHRSN_DFRn,
  181      }           STT = stats-buffer);
  182
  183      .inl 4
  184      .unl 4
  185      vdi-pointer is a pointer pointing at the KV$VDI structure.
14:56 JUL 28 '97 KV_GLB_M.:E05SI                                           6    
  186      For a new instance of VDI (to be created by calling KVV$INT with
  187      KV$VDH_INT), VDI$ = "ADDR(NIL)" should be specified, both here and on the
  188      corresponding KV$USREXT.  In this situation, the VDH-user will never be
  189      deferred, but any required context saving will be performed.
  190
  191      .unl 4
  192      deferred-execution-label is a label to go to if VDH is being
  193      interrupted.
  194
  195      .unl 4
  196      KV#SCHRSN_DFRn (where n is 0 to 3) signifies the reason for
  197      (deferred) scheduling.  This value will be passed to the user
  198      on the KV$USR_EVT/KV#USR_EVT_ID_SCH call later.  This mechanism
  199      is only used if VDH is being interrupted, in which case
  200      the DFR$ label will receive control.
  201
  202      .unl 4
  203      stats-buffer is optional and specifies a perhaps more direct way of
  204      expressing VDI$->KV$VDI.USRPRM$->KV$USRPRM.STT$->KV$STT, which is the
  205      default.
  206      .inl 0
  207
  208      The KV@USRENT structure must be included in the invoking
  209      procedure's AUTO, by coding:
  210
  211      %KV@USRENT;
  212
  213      KV@USRENT provides storage in AUTO for saved parameters.
  214      ..::IX "KV@USRENT"
  215      */
  216      %MACRO KV$USRENT(VDI$ = , DFR$ = , SCHRSN = , STT =);
  217      %LSET LISTSUB = '1'B;
  218      %LSET LISTDIR='0'B;
  219      %LSET LISTMAC='1'B;
  220      %LSET LISTEXP='1'B;
  221      /* !C! */
  222      %IF TEXTCHAR(VDI$) = 'ADDR(NIL)';
14:56 JUL 28 '97 KV_GLB_M.:E05SI                                           7    
  223                 KV@USRENT.SVDPTR$ = KV$PTR$;
  224      %ELSE;
  225         %IF LENGTHC(TEXTCHAR(STT))=0;
  226         %LSET $STT = CHARTEXT(CONCAT(TEXTCHAR(VDI$),'->KV$VDI.USRPRM$->KV$USRPRM.STT$->KV$STT'));
  227         %ELSE;
  228         %LSET $STT = CHARTEXT(TEXTCHAR(STT));
  229         %ENDIF;
  230              %$STT.USRENTCNT = %$STT.USRENTCNT + 1;
  231              IF NOT VDI$->KV$VDI.BSY THEN DO;
  232                 VDI$->KV$VDI.BSY = '1'B;
  233                 KV@USRENT.SVDPTR$ = KV$PTR$;
  234                 KV$PTR$ = VDI$->KV$VDI.ASNINPPTR$;
  235                 END;                         /* ELSE IF ~BSY                       */
  236              ELSE DO;
  237                 VDI$->KV$VDI.DFR.USR(SCHRSN) = '1'B;
  238              %$STT.USRENTDFRCNT = %$STT.USRENTDFRCNT + 1;
  239                 GOTO DFR$;
  240                 END;                         /* END IF                             */
  241      %ENDIF;
  242      /* ! ! */
  243      %MEND;
  244      /*F* NAME:  KV$USREXT - User Exit.
  245      The KV$USREXT macro is used by the VDH-user when exiting after processing
  246      an interrupt.  This macro should only be executed if the
  247      KV$USRENT macro executed without taking the DFR$ (defer
  248      jump) exit.
  249
  250      .brn 3
  251      Format:
  252      .spf
  253         KV$USREXT (VDI$ = vdi-pointer);
  254
  255      .inl 4
  256      .unl 4
  257      vdi-pointer is a pointer pointing at the KV$VDI structure,
  258      which was originally returned in KV$VDH_INT.VDI$.
  259      Normally, the VDI$ keyword is omitted, which causes VDH to find
14:56 JUL 28 '97 KV_GLB_M.:E05SI                                           8    
  260      the KV$VDI context automatically.
  261      However, if VDH was entered to create a new instance of VDI (call to KVV$INT),
  262      VDI$ = "ADDR(NIL)" should be specified, whether or not the call was successful.
  263      This will prevent further use of the instance until it is completely
  264      connected, by causing any KV$USRENT requests to be deferred until that time.
  265      .inl 0
  266      */
  267      %MACRO KV$USREXT (VDI$ = );
  268      %LSET LISTSUB = '1'B;
  269      %LSET LISTDIR='0'B;
  270      %LSET LISTMAC='1'B;
  271      %LSET LISTEXP='1'B;
  272      /* !C! */
  273      %IF TEXTCHAR(VDI$) ~= 'ADDR(NIL)';
  274              %KV_VDI.BSY = '0'B;
  275      %ENDIF;
  276              KV$PTR$ = KV@USRENT.SVDPTR$;
  277      /* ! ! */
  278      %MEND;
  279      /*F* NAME:  User Parameter Block Macros
  280
  281      Every VDH-user must invoke user parameter block macros.  These macros
  282      include:
  283
  284      .fif
  285      KV$USRPRM_INT - Pre-processor variables
  286      KV$SETPRMPREPRC - Pre-processing Set-parameters
  287      KV$SETPRMPSTPRC - Post-processing Set-parameters
  288      KV$STREVTENB - Structure events
  289      KV$USRPRM - VDH user parameters
  290      .fin
  291      */
  292      /*F* NAME:  KV$USRPRM_INT - Pre-processor Variables
  293      The KV$USRPRM_INT macro is used to initialize the pre-processor
  294      variables used for initialization in KV$USRPRM.
  295      This macro must be invoked before invoking the KV$USRPRM,
  296      KV$SETPRMPREPRC, KV$SETPRMPSTPRC, or KV$STRENTENB macros to
14:56 JUL 28 '97 KV_GLB_M.:E05SI                                           9    
  297      build a static or constant structure.
  298
  299      */
  300      %MACRO KV$USRPRM_INT;
  301      %LSET LISTDIR = '0'B;
  302      %LSET LISTCOM = '0'B;
  303      %SET SETPRMPREPRC0 = %CONCAT('00000000'X, '00000000'X);
  304      %SET SETPRMPREPRC1 = SETPRMPREPRC0;
  305      %SET SETPRMPREPRC2 = SETPRMPREPRC0;
  306      %SET SETPRMPREPRC3 = SETPRMPREPRC0;
  307      %SET SETPRMPSTPRC0 = %CONCAT('00000000'X, '00000000'X);
  308      %SET SETPRMPSTPRC1 = SETPRMPSTPRC0;
  309      %SET SETPRMPSTPRC2 = SETPRMPSTPRC0;
  310      %SET SETPRMPSTPRC3 = SETPRMPSTPRC0;
  311      %SET STREVTENB0 = %CONCAT('00000000'X, '00000000'X);
  312      %SET STREVTENB1 = STREVTENB0;
  313      %MEND;
  314      /*F* NAME:  KV$SETPRMPREPRC - Pre-processing Set-parameters
  315      The KV$SETPRMPREPRC macro is used to initialize the set-parameter
  316      pre-processing enable
  317      bits in KV$USRPRM.
  318
  319      Format of invocation:
  320
  321      %KV$SETPRMPREPRC (PRMID=parameter-id);
  322
  323      .inl 4
  324      .unl 4
  325      parameter-id definitions are of the form:  KV_PRMID_name.
  326      For the definition of parameter items, structures, or arrays, see
  327      KV_PRMTBL_D.:LIBRARY which uses EQUate identifiers from
  328      KV_PRMID_E.:LIBRARY.  See the KV$VDH_SETPRM for a discussion of
  329      KV_PRMTBL_D.
  330      .inl 0
  331      */
  332      %MACRO KV$SETPRMPREPRC(PRMID = );
  333      %LSET LISTDIR = '0'B;
14:56 JUL 28 '97 KV_GLB_M.:E05SI                                           10   
  334      %LSET LISTCOM = '0'B;
  335      %IF PRMID < 64;
  336      %SET SETPRMPREPRC0 = CONCAT(SUBBIT(SETPRMPREPRC0, 0, PRMID), '1'B, SUBBIT(SETPRMPREPRC0, PRMID+1));
  337      %ELSEIF PRMID < 128;
  338      %SET SETPRMPREPRC1 = CONCAT(SUBBIT(SETPRMPREPRC1, 0, PRMID-64), '1'B, SUBBIT(SETPRMPREPRC1, PRMID-63));
  339      %ELSEIF PRMID < 192;
  340      %SET SETPRMPREPRC2 = CONCAT(SUBBIT(SETPRMPREPRC2, 0, PRMID-128), '1'B, SUBBIT(SETPRMPREPRC2, PRMID-127));
  341      %ELSE;
  342      %SET SETPRMPREPRC3 = CONCAT(SUBBIT(SETPRMPREPRC3, 0, PRMID-192), '1'B, SUBBIT(SETPRMPREPRC3, PRMID-191));
  343      %ENDIF;
  344      %MEND;
  345      /*F* NAME:  KV$SETPRMPSTPRC - Post-processing Set-parameters
  346      The KV$SETPRMPSTPRC macro is used to initialize the set-parameter
  347      post-processing enable
  348      bits in KV$USRPRM.
  349
  350      Format of invocation:
  351
  352      %KV$SETPRMPSTPRC (PRMID=parameter-id);
  353
  354      .inl 4
  355      .unl 4
  356      parameter-id definitions are of the form:  KV_PRMID_name.
  357      For the definition of parameter items, structures, or arrays, see
  358      KV_PRMTBL_D.:LIBRARY which uses EQUate identifiers from
  359      KV_PRMID_E.:LIBRARY.  See the KV$VDH_SETPRM for a discussion of
  360      KV_PRMTBL_D.
  361      .inl 0
  362      */
  363      %MACRO KV$SETPRMPSTPRC(PRMID = );
  364      %LSET LISTDIR = '0'B;
  365      %LSET LISTCOM = '0'B;
  366      %IF PRMID < 64;
  367      %SET SETPRMPSTPRC0 = CONCAT(SUBBIT(SETPRMPSTPRC0, 0, PRMID), '1'B, SUBBIT(SETPRMPSTPRC0, PRMID+1));
  368      %ELSEIF PRMID < 128;
  369      %SET SETPRMPSTPRC1 = CONCAT(SUBBIT(SETPRMPSTPRC1, 0, PRMID-64), '1'B, SUBBIT(SETPRMPSTPRC1, PRMID-63));
  370      %ELSEIF PRMID < 192;
14:56 JUL 28 '97 KV_GLB_M.:E05SI                                           11   
  371      %SET SETPRMPSTPRC2 = CONCAT(SUBBIT(SETPRMPSTPRC2, 0, PRMID-128), '1'B, SUBBIT(SETPRMPSTPRC2, PRMID-127));
  372      %ELSE;
  373      %SET SETPRMPSTPRC3 = CONCAT(SUBBIT(SETPRMPSTPRC3, 0, PRMID-192), '1'B, SUBBIT(SETPRMPSTPRC3, PRMID-191));
  374      %ENDIF;
  375      %MEND;
  376      /*F* NAME:  KV$STREVTENB - Structure Events
  377      The KV$STREVTENB macro is used to initialize the structure event enable
  378      bits in KV$USRPRM.
  379
  380      Format of invocation:
  381
  382      %KV$STREVTENB (STRTYP=structure-type);
  383
  384      .inl 4
  385      .unl 4
  386      structure-type definitions are of the form:  KV_STRTYP_name.
  387      See KV$VDH_GETBFR for a list of structure types.
  388      .inl 0
  389      */
  390      %MACRO KV$STREVTENB(STRTYP = );
  391      %LSET LISTDIR = '0'B;
  392      %LSET LISTCOM = '0'B;
  393      %SET STREVTENB0 = CONCAT(SUBBIT(STREVTENB0, 0, STRTYP), '1'B, SUBBIT(STREVTENB0, STRTYP+1));
  394      %MEND;

