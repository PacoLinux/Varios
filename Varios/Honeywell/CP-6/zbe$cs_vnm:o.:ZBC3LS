

CC.C03    File=zbe$cs_vnm:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             /* $Header: cs_vnm.c,v 1.3 87/03/10 11:01:02 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6
        7         7             /* V A L U E N U M B E R I N G   M E T H O D */
        8         8
        9         9             #include "em_mnem:h"
       10        10             #include "types:h"
       11        11             #include "global:h"
       12        12             #include "debug:h"
       13        13             #include "aux:h"
       14        14             #include "cs:h"
       15        15             #include "cs_alloc:h"
       16        16             #include "cs_aux:h"
       17        17             #include "cs_entity:h"
       18        18             #include "cs_avail:h"
       19        19             #include "cs_stack:h"
       20        20             #include "cs_kill:h"
       21        21             #include "cs_partit:h"
       22        22             #include "cs_getent:h"
       23        23
       24        24             STATIC push_entity(enp, lfirst)
       25        25              entity_p enp;
       26        26              line_p lfirst;
       27        27             {
       28        28    1         /* Build token and Push it. */
       29        29    1
       30        30    1         struct token tk;
       31        31    1
       32        32    1         tk.tk_vn = enp->en_vn;
       33        33    1         tk.tk_size = enp->en_size;
       34        34    1         tk.tk_lfirst = lfirst;
       35        35    1         Push(&tk);
       36        36    1        }
CC.C03    File=zbe$cs_vnm:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       37        37
       38        38             STATIC put_expensive_load(bp, lnp, lfirst, enp)
       39        39              bblock_p bp;
       40        40              line_p lnp, lfirst;
       41        41              entity_p enp;
       42        42             {
       43        43    1         struct avail av;
       44        44    1         occur_p  ocp;
       45        45    1
       46        46    1         av.av_instr = INSTR(lnp);
       47        47    1         av.av_size = enp->en_size;
       48        48    1         av.av_operand = enp->en_vn;
       49        49    1
       50        50    1         ocp = newoccur(lfirst, lnp, bp);
       51        51    1
       52        52    1         av_enter(&av, ocp, EXPENSIVE_LOAD);
       53        53    1        }
       54        54
       55        55             STATIC put_aar(bp, lnp, lfirst, enp)
       56        56              bblock_p bp;
       57        57              line_p lnp, lfirst;
       58        58              entity_p enp;
       59        59             {
       60        60    1         /* Enp points to an ENARRELEM. We do as if its address was computed. */
       61        61    1
       62        62    1         struct avail av;
       63        63    1         occur_p  ocp;
       64        64    1
       65        65    1         assert(enp->en_kind == ENARRELEM);
       66        66    1         av.av_instr = op_aar;
       67        67    1         av.av_size = ps;
       68        68    1         av.av_ofirst = enp->en_arbase;
       69        69    1         av.av_osecond = enp->en_index;
       70        70    1         av.av_othird = enp->en_adesc;
       71        71    1
       72        72    1         ocp = newoccur(lfirst, lnp, bp);
       73        73    1
CC.C03    File=zbe$cs_vnm:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       74        74    1         av_enter(&av, ocp, TERNAIR_OP);
       75        75    1        }
       76        76
       77        77             STATIC push_avail(avp, lfirst)
       78        78              avail_p avp;
       79        79              line_p lfirst;
       80        80             {
       81        81    1         struct token tk;
       82        82    1
       83        83    1         tk.tk_vn = avp->av_result;
       84        84    1         tk.tk_size = avp->av_size;
       85        85    1         tk.tk_lfirst = lfirst;
       86        86    1         Push(&tk);
       87        87    1        }
       88        88
       89        89             STATIC push_unair_op(bp, lnp, tkp1)
       90        90              bblock_p bp;
       91        91              line_p lnp;
       92        92              token_p tkp1;
       93        93             {
       94        94    1         struct avail av;
       95        95    1         occur_p  ocp;
       96        96    1
       97        97    1         av.av_instr = INSTR(lnp);
       98        98    1         av.av_size = avsize(lnp);
       99        99    1         av.av_operand = tkp1->tk_vn;
      100       100    1
      101       101    1         ocp = newoccur(tkp1->tk_lfirst, lnp, bp);
      102       102    1
      103       103    1         push_avail(av_enter(&av, ocp, UNAIR_OP), tkp1->tk_lfirst);
      104       104    1        }
      105       105
      106       106             STATIC push_binair_op(bp, lnp, tkp1, tkp2)
      107       107              bblock_p bp;
      108       108              line_p lnp;
      109       109              token_p tkp1, tkp2;
      110       110             {
CC.C03    File=zbe$cs_vnm:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      111       111    1         struct avail av;
      112       112    1         occur_p  ocp;
      113       113    1
      114       114    1         av.av_instr = INSTR(lnp);
      115       115    1         av.av_size = avsize(lnp);
      116       116    1         av.av_oleft = tkp1->tk_vn;
      117       117    1         av.av_oright = tkp2->tk_vn;
      118       118    1
      119       119    1         ocp = newoccur(tkp1->tk_lfirst, lnp, bp);
      120       120    1
      121       121    1         push_avail(av_enter(&av, ocp, BINAIR_OP), tkp1->tk_lfirst);
      122       122    1        }
      123       123
      124       124             STATIC push_ternair_op(bp, lnp, tkp1, tkp2, tkp3)
      125       125              bblock_p bp;
      126       126              line_p lnp;
      127       127              token_p tkp1, tkp2, tkp3;
      128       128             {
      129       129    1         struct avail av;
      130       130    1         occur_p  ocp;
      131       131    1
      132       132    1         av.av_instr = INSTR(lnp);
      133       133    1         av.av_size = avsize(lnp);
      134       134    1         av.av_ofirst = tkp1->tk_vn;
      135       135    1         av.av_osecond = tkp2->tk_vn;
      136       136    1         av.av_othird = tkp3->tk_vn;
      137       137    1
      138       138    1         ocp = newoccur(tkp1->tk_lfirst, lnp, bp);
      139       139    1
      140       140    1         push_avail(av_enter(&av, ocp, TERNAIR_OP), tkp1->tk_lfirst);
      141       141    1        }
      142       142
      143       143             STATIC fiddle_stack(lnp)
      144       144              line_p lnp;
      145       145             {
      146       146    1         /* The instruction in lnp does something to the valuenumber-stack. */
      147       147    1
CC.C03    File=zbe$cs_vnm:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      148       148    1         struct token dummy;
      149       149    1         offset size;
      150       150    1
      151       151    1         /* Partly initialize dummy. */
      152       152    1         dummy.tk_lfirst = lnp;
      153       153    1
      154       154    1         switch (INSTR(lnp)) {
      155       155    2            default:
      156       156    2               assert(FALSE);
      157       157    2               break;
      158       158    2            case op_lor:
      159       159    2               dummy.tk_vn = newvalnum(); dummy.tk_size = ps;
      160       160    2               Push(&dummy);
      161       161    2               break;
      162       162    2            case op_asp:
      163       163    2               if ((size = off_set(lnp)) > 0) {
      164       164    3                  Pop(&dummy, size);
      165       165    3               } else {
      166       166    3                  dummy.tk_vn = newvalnum();
      167       167    3                  dummy.tk_size = size;
      168       168    3                  Push(&dummy);
      169       169    3               }
      170       170    2               break;
      171       171    2            case op_dup:
      172       172    2               Dup(lnp);
      173       173    2               break;
      174       174    2            case op_ass:
      175       175    2            case op_dus:
      176       176    2            case op_exg:
      177       177    2            case op_los:
      178       178    2               /* Don't waste effort. */
      179       179    2               clr_stack();
      180       180    2               break;
      181       181    2            case op_sig:
      182       182    2               Pop(&dummy, (offset) ps);
      183       183    2               break;
      184       184    2            case op_lfr:
CC.C03    File=zbe$cs_vnm:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=6  
      185       185    2               dummy.tk_vn = newvalnum();
      186       186    2               dummy.tk_size = off_set(lnp);
      187       187    2               Push(&dummy);
      188       188    2               break;
      189       189    2         }
      190       190    1        }
      191       191
      192       192             STATIC proc_p find_proc(vn)
      193       193              valnum vn;
      194       194             {
      195       195    1         /* Find the procedure-identifier with valuenumber vn. */
      196       196    1
      197       197    1         entity_p enp;
      198       198    1
      199       199    1         enp = find_entity(vn);
      200       200    1
      201       201    1         if (enp != (entity_p) 0 && enp->en_kind == ENPROC)
      202       202    1            return enp->en_pro;
      203       203    1
      204       204    1         return (proc_p) 0;
      205       205    1        }
      206       206
      207       207             STATIC side_effects(lnp)
      208       208              line_p lnp;
      209       209             {
      210       210    1         /* Lnp contains a cai or cal instruction. We try to find the callee
      211       211    1          * and see what side-effects it has.
      212       212    1          */
      213       213    1         struct token tk;
      214       214    1         proc_p pp;
      215       215    1
      216       216    1         if (INSTR(lnp) == op_cai) {
      217       217    2            Pop(&tk, (offset) ps);
      218       218    2            pp = find_proc(tk.tk_vn);
      219       219    2         } else {
      220       220    2            assert(INSTR(lnp) == op_cal);
      221       221    2            pp = PROC(lnp);
CC.C03    File=zbe$cs_vnm:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=7  
      222       222    2         }
      223       223    1         if (pp != (proc_p) 0) {
      224       224    2            kill_call(pp);
      225       225    2         } else {
      226       226    2            kill_much();
      227       227    2         }
      228       228    1        }
      229       229
      230       230             hopeless(instr)
      231       231              int instr;
      232       232             {
      233       233    1         /* The effect of `instr' is too difficult to
      234       234    1          * compute. We assume worst case behaviour.
      235       235    1          */
      236       236    1         switch (instr) {
      237       237    2            default:
      238       238    2               assert(FALSE);
      239       239    2               break;
      240       240    2            case op_mon:
      241       241    2            case op_str:
      242       242    2               /* We can't even trust "static" entities. */
      243       243    2               kill_all();
      244       244    2               clr_stack();
      245       245    2               break;
      246       246    2            case op_blm:
      247       247    2            case op_bls:
      248       248    2            case op_sts:
      249       249    2               kill_much();
      250       250    2               clr_stack();
      251       251    2               break;
      252       252    2         }
      253       253    1        }
      254       254
      255       255             vnm(bp)
      256       256              bblock_p bp;
      257       257             {
      258       258    1         register line_p lnp;
CC.C03    File=zbe$cs_vnm:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=8  
      259       259    1         register entity_p rep;
      260       260    1         line_p lfirst;
      261       261    1         struct token tk, tk1, tk2, tk3;
      262       262    1
      263       263    1         for (lnp = bp->b_start; lnp != (line_p) 0; lnp = lnp->l_next) {
      264       264    2
      265       265    2            rep = getentity(lnp, &lfirst);
      266       266    2            switch (instrgroup(lnp)) {
      267       267    3               case SIMPLE_LOAD:
      268       268    3                  push_entity(rep, lfirst);
      269       269    3                  break;
      270       270    3               case LOAD_ARRAY:
      271       271    3                  put_aar(bp, lnp, lfirst, rep);
      272       272    3                  /* Fall through ... */
      273       273    3               case EXPENSIVE_LOAD:
      274       274    3                  push_entity(rep, lfirst);
      275       275    3                  put_expensive_load(bp, lnp, lfirst, rep);
      276       276    3                  break;
      277       277    3               case STORE_DIRECT:
      278       278    3                  kill_direct(rep);
      279       279    3                  Pop(&tk, rep->en_size);
      280       280    3                  rep->en_vn = tk.tk_vn;
      281       281    3                  break;
      282       282    3               case STORE_ARRAY:
      283       283    3                  put_aar(bp, lnp, lfirst, rep);
      284       284    3                  /* Fall through ... */
      285       285    3               case STORE_INDIR:
      286       286    3                  kill_indir(rep);
      287       287    3                  Pop(&tk, rep->en_size);
      288       288    3                  rep->en_vn = tk.tk_vn;
      289       289    3                  break;
      290       290    3               case UNAIR_OP:
      291       291    3                  Pop(&tk1, op11size(lnp));
      292       292    3                  push_unair_op(bp, lnp, &tk1);
      293       293    3                  break;
      294       294    3               case BINAIR_OP:
      295       295    3                  Pop(&tk2, op22size(lnp));
CC.C03    File=zbe$cs_vnm:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=9  
      296       296    3                  Pop(&tk1, op12size(lnp));
      297       297    3                  push_binair_op(bp, lnp, &tk1, &tk2);
      298       298    3                  break;
      299       299    3               case TERNAIR_OP:
      300       300    3                  Pop(&tk3, op33size(lnp));
      301       301    3                  Pop(&tk2, op23size(lnp));
      302       302    3                  Pop(&tk1, op13size(lnp));
      303       303    3                  push_ternair_op(bp, lnp, &tk1, &tk2, &tk3);
      304       304    3                  break;
      305       305    3               case KILL_ENTITY:
      306       306    3                  kill_direct(rep);
      307       307    3                  break;
      308       308    3               case SIDE_EFFECTS:
      309       309    3                  side_effects(lnp);
      310       310    3        /*    We want to pop off the top 2 entities on the stack because it
      311       311    3              contains the loc numargs instruction on it.  This instruction
      312       312    3              disappears after the call statement.  The other argument is the
      313       313    3              location of the return argument.                              */
      314       314    3
      315       315    3                  Pop_top_of_stack(&tk1);
      316       316    3                  break;
      317       317    3               case FIDDLE_STACK:
      318       318    3                  fiddle_stack(lnp);
      319       319    3                  break;
      320       320    3               case IGNORE:
      321       321    3                  break;
      322       322    3               case HOPELESS:
      323       323    3                  hopeless(INSTR(lnp));
      324       324    3                  break;
      325       325    3               case BBLOCK_END:
      326       326    3                  break;
      327       327    3               default:
      328       328    3                  assert(FALSE);
      329       329    3                  break;
      330       330    3            }
      331       331    2         }
      332       332    1        }
CC.C03    File=zbe$cs_vnm:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=10 
      333       333
---  Include file information  ---

   em_mnem:h.:ZBC3TOU. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$cs:h.:ZBC3TOU. is referenced
   zbe$cs_alloc:h.:ZBC3TOU. is referenced
   zbe$cs_aux:h.:ZBC3TOU. is referenced
   zbe$cs_entity:h.:ZBC3TOU. is referenced
   zbe$cs_avail:h.:ZBC3TOU. is referenced
   zbe$cs_stack:h.:ZBC3TOU. is referenced
   zbe$cs_kill:h.:ZBC3TOU. is referenced
   zbe$cs_partit:h.:ZBC3TOU. is referenced
   zbe$cs_getent:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$cs_vnm:c.:ZBC3TSI
