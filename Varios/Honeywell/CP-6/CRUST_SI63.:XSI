/*M* RUCMPR - CoMPaRe two Run Units and see what has changed. */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=3,CTI=3,SDI=3,MCL=10,CSI=0,ECI=0 */
                                   /*
                                        Author: D.R Calkins, LADC
                                        Date: 7/89
                                                                  */
CHANGE: PROC(SI_TABLE,UI_TABLE,CH_TABLE);
 
%INCLUDE CP_6;
%INCLUDE CRUST_C61;
 
%TABLE (FPTN=SI_TABLE,STCLASS=PARAM);
%TABLE (FPTN=UI_TABLE,STCLASS=PARAM);
%CHANGES (FPTN=CH_TABLE,STCLASS=PARAM);
 
DCL SI  SBIN;
DCL UI  SBIN;
DCL BOTH BIT(1);
DCL UI_NODE SBIN;
DCL SI_NODE SBIN;
DCL DELTA SBIN;
 
DCL TABLE_ VECTOR SYMREF;
DCL ERROR_PLACE REMEMBER SYMREF;
 
DCL CHAR20 CHAR(20) BASED;
 
     TABLE_ = VECTOR(CH_TABLE);
     SI = 0;
     UI = 0;
     CH_TABLE.COUNT = 0;
     BOTH = '0'B;
     UI_NODE = 0;
     SI_NODE = 0;
 
     DO WHILE ((SI < SI_TABLE.COUNT) AND
        (UI < UI_TABLE.COUNT)) ;
        IF (SI_NODE < UI_NODE) THEN GOTO MOVE_SI;
        IF (SI_NODE > UI_NODE) THEN GOTO MOVE_UI;
        CALL COMPARE_NAME (UI,SI) ALTRET(DIF_NAME);
        CALL COMPARE_TYPE(UI,SI) ALTRET(DIF_TYPE);
        CALL COMPARE_SIZE(UI,SI)
        WHENALTRETURN DO;
TYPE:      REMEMBER TYPE IN ERROR_PLACE;
           CH_TABLE.INFO.NODE(CH_TABLE.COUNT) = UI_NODE;
           CH_TABLE.INFO.UI(CH_TABLE.COUNT) = UI;
           CH_TABLE.INFO.SI(CH_TABLE.COUNT) = SI;
           CH_TABLE.COUNT = CH_TABLE.COUNT + 1;
           END;
        UI = UI + 1;
        SI = SI + 1;
        GOTO LOOPEND;
 
MOVE_SI: REMEMBER MOVE_SI IN ERROR_PLACE;
        CH_TABLE.INFO.NODE(CH_TABLE.COUNT) = SI_NODE;
        CH_TABLE.INFO.UI(CH_TABLE.COUNT) = -1;
        CH_TABLE.INFO.SI(CH_TABLE.COUNT) = SI;
        CH_TABLE.COUNT = CH_TABLE.COUNT + 1;
        SI = SI + 1;
        GOTO LOOPEND;
MOVE_UI: REMEMBER MOVE_UI IN ERROR_PLACE;
        CH_TABLE.INFO.NODE(CH_TABLE.COUNT) = UI_NODE;
        CH_TABLE.INFO.UI(CH_TABLE.COUNT) = UI;
        CH_TABLE.INFO.SI(CH_TABLE.COUNT) = -1;
        CH_TABLE.COUNT = CH_TABLE.COUNT + 1;
        UI = UI + 1;
        GOTO LOOPEND;
 
DIF_TYPE:;                              /* The names match but not the types */
        IF (SI_TABLE.PROCEDURE.SC_TYPE(SI) = 'RODATA  ')
        THEN IF (SI_TABLE.PROCEDURE.NAME(SI) =
              SI_TABLE.PROCEDURE.NAME(SI+1))
           THEN GOTO MOVE_SI;
           ELSE GOTO MOVE_UI;
        ELSE GOTO MOVE_UI;
 
DIF_NAME:;                    /* The names don't match      OH NO !!!!!!! */
 
        DO DELTA = 0 TO 100;            /* Look UP and Down for a match */
           CALL COMPARE_NAME(UI,SI-DELTA) WHENRETURN DO;
              GOTO MOVE_UI;
              END;
 
           CALL COMPARE_NAME(UI,SI+DELTA) WHENRETURN DO;
              GOTO MOVE_SI;
              END;
 
           CALL COMPARE_NAME(UI-DELTA,SI) WHENRETURN DO;
              GOTO MOVE_SI;
              END;
 
           CALL COMPARE_NAME(UI+DELTA,SI) WHENRETURN DO;
              GOTO MOVE_UI;
              END;
 
           END ;                        /* DO DELTA */
        BOTH = '1'B;
        GOTO MOVE_UI;
LOOPEND:;
        IF (BOTH) THEN DO;
           BOTH = '0'B;
           GOTO MOVE_SI;
           END;
        IF (ADDR(UI_TABLE.PROCEDURE.NAME(UI))->CHAR20 =
           UI_TABLE.NODE.NAME(UI_NODE+1))
        THEN UI_NODE = UI_NODE + 1;
        IF (ADDR(SI_TABLE.PROCEDURE.NAME(SI))->CHAR20 =
           SI_TABLE.NODE.NAME(SI_NODE+1))
        THEN SI_NODE = SI_NODE + 1;
        END;                       /* While Tables have something in them */
 
/*  Flush the Remaining table into the ch_table */
     IF (UI = UI_TABLE.COUNT) AND
        (SI < SI_TABLE.COUNT) THEN GOTO MOVE_SI;
 
     IF (UI < UI_TABLE.COUNT) AND
        (SI = SI_TABLE.COUNT) THEN GOTO MOVE_UI;
 
     RETURN;
 
 
 
/*  MISCELLANEOUS  soubroutines */
 
COMPARE_NAME: PROC(UI,SI) ALTRET;
 
DCL UI SBIN PARAM;
DCL SI SBIN PARAM;
 
     IF (UI < 0) OR (SI < 0) THEN ALTRETURN;
     IF (SI_TABLE.PROCEDURE.NAME(SI) ~=
        UI_TABLE.PROCEDURE.NAME(UI))
        OR (SI_NODE ~= UI_NODE)
     THEN ALTRETURN;
 
     RETURN;
END;
 
COMPARE_TYPE: PROC(UI,SI) ALTRET;
 
DCL UI SBIN PARAM;
DCL SI SBIN PARAM;
 
     IF (UI < 0) OR (SI < 0) THEN ALTRETURN;
     IF (SI_TABLE.PROCEDURE.SC_TYPE(SI) ~=
        UI_TABLE.PROCEDURE.SC_TYPE(UI))
     THEN ALTRETURN;
 
     RETURN;
END;
 
COMPARE_SIZE: PROC(UI,SI) ALTRET;
 
DCL UI SBIN PARAM;
DCL SI SBIN PARAM;
 
     IF (UI < 0) OR (SI < 0) THEN ALTRETURN;
     IF (SI_TABLE.PROCEDURE.SIZE(SI) ~=
        UI_TABLE.PROCEDURE.SIZE(UI))
     THEN ALTRETURN;
 
     RETURN;
END;
END;
