VERSION E05

PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:1    
        1        1        /*M* PHA$ERS  Service handler for performance monitor PMMEs                   */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*P* NAME:     PHA$ERS
        8        8             PURPOSE:  Service handler for all performance monitor PMMEs.             */
        9        9
       10       10        /*X* CLM=77,CRM=80,CRT=1,PLM=3,CTI=1,THI=2                                    */
       11       11        PHA$ERS: PROC;
       12       12        %INCLUDE UD_EQU_E;
       13      401        %INCLUDE CP_6_SUBS;
       14      941        %INCLUDE PH_ERROR;
       15      976        %INCLUDE P_ERRORS_C;
       16      988        %INCLUDE P_PMDAT_R;
       17     1296        %INCLUDE MM_DATA_R;
       18     1816        %INCLUDE M_ERRORS_C;
       19     1880        %INCLUDE F_ERRORS_C;
       20     2120        %INCLUDE B_SEGIDS_C;
       21     2659        %INCLUDE SS_SCHED_C;
       22     2892        %INCLUDE SS_SCHED_R;
       23     2935        %INCLUDE FM_CACHE_R;
       24     2947        %INCLUDE S_GJOB_R;
       25     3046        %INCLUDE P$CP6V_C;
       26     3051        %INCLUDE B$JIT;
       27     3654        %INCLUDE B$MAP;
       28     3753        %INCLUDE B$P;
       29     3837        %INCLUDE B$USER;
       30     4053        %B$USERREFS;
       31     4057        %INCLUDE HF_LOCK_C;
       32     4071        %INCLUDE HF_DATA_R;
       33     4114        %INCLUDE XUD_UTS_M;
       34     4196        %XUD$UTS_ENTRIES;
       35     4228        %EJECT;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:2    
       36     4229    1   DCL MM_CGQD$ PTR SYMREF READONLY;
       37     4230        %MM$CGQD (STCLASS="BASED(MM_CGQD$)");
       38     4289    1   DCL B$JIT$ PTR SYMREF;
       39     4290    1   DCL B$MOUSE$ PTR SYMREF;
       40     4291    1   DCL B$PS0$ PTR SYMREF;
       41     4292    1   DCL B$PS1$ PTR SYMREF;
       42     4293    1   DCL B$MPT$ PTR SYMREF;                       /* pointer to monitor page table */
       43     4294    1   DCL KI_MXFE UBIN WORD SYMREF;                 /* Number of FEPs in the system */
       44     4295    1   DCL S_CUN UBIN WORD SYMREF;                 /* My user number - test for FROG */
       45     4296    1   DCL B_MUAIS UBIN WORD SYMREF;                  /* Max users allowed in system */
       46     4297    1   DCL B_PATCHI UBIN SYMREF;
       47     4298    1   DCL SSR$REG ENTRY(3) ALTRET;                     /* Used to REG a sleep event */
       48     4299    1   DCL SSS$MILLI ENTRY(1);                             /* Current time in millis */
       49     4300    1   DCL SC_PHA212 ENTRY CONV (2,0);                    /* Screech 212 - CVM error */
       50     4301    1   DCL SC_PHA213 ENTRY CONV (2,0);                   /* Screech 213 - RSPP error */
       51     4302    1   DCL SC_PHA216 ENTRY CONV (2,0);         /* Screech 216 - MOUSE space exceeded */
       52     4303    1   DCL MMD$STLPP ENTRY(2) ALTRET;                    /* To steal a physical page */
       53     4304    1   DCL MMD$RSPP ENTRY(2) ALTRET;                      /* To return a stolen page */
       54     4305    1   DCL MME$CVM ENTRY(4) ALTRET;                     /* To map pages onto monitor */
       55     4306    1   DCL HFF$DSIZ ENTRY(2);                   /* Get size of parameter stack entry */
       56     4307    1   DCL PMC$FIXDEV ENTRY;                          /* Clean up DCTs' PM locations */
       57     4308    1   DCL SSS$CURTIME ENTRY (1);                          /* Get current clock time */
       58     4309    1   DCL SSS$BLOCK ENTRY;                            /* Force user onto master CPU */
       59     4310    1   DCL SSS$CACHEBP ENTRY;                                        /* bypass cache */
       60     4311    1   DCL SSS$CACHE ENTRY;                                       /* re-enable cache */
       61     4312    1   DCL HFC$CACHECLR ENTRY;                                        /* clear cache */
       62     4313    1   DCL P$ PTR;                                                    /* Scratch PTR */
       63     4314    1   DCL Q$ PTR;
       64     4315    1   DCL I SBIN;                                                        /* Counter */
       65     4316    1   DCL J UBIN;                                                        /* Counter */
       66     4317    1   DCL K UBIN;                                                        /* Counter */
       67     4318    1   DCL TIME UBIN WORD;                                           /* The time now */
       68     4319    1   DCL MONITOR_TIME UBIN WORD;                         /* The monitor's time now */
       69     4320    1   DCL UPPER_BOUND SBIN WORD;                 /* Upper bound of data to transfer */
       70     4321    1   DCL TOO_SMALL BIT(36);                    /* Flag indicating buffer too small */
       71     4322    1   DCL 1 WORDX (0:0) BASED ALIGNED,           /* Structure for user's PMDAT area */
       72     4323    1         2 HW1_ SBIN HALF UNAL,
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:3    
       73     4324    1         2 HW2_ SBIN HALF UNAL;
       74     4325    1   DCL PTR_ PTR BASED;                    /* Based pointer for P$TABLE indirects */
       75     4326    1   DCL BLOQ_LEN UBIN WORD;                     /* # of bytes in BLOQ to be moved */
       76     4327    1   DCL BLOQ CHAR(BLOQ_LEN) BASED;         /* template for fast move to $PS0 area */
       77     4328    1   DCL ENTRY_NUM UBIN WORD;                           /* Entry number in P$TABLE */
       78     4329    1   DCL OFFSET SBIN WORD;                            /* Offset into user's buffer */
       79     4330    1   DCL HEADER_OFFSET UBIN WORD;              /* Offset to PMDAT's header in $PS0 */
       80     4331    1   DCL ENTRY_COUNT UBIN WORD;                   /* # of entries actually present */
       81     4332    1   DCL WORDS SBIN WORD;                        /* # of words in PMDAT table item */
       82     4333    1   DCL ENTRIES SBIN WORD;                   /* # of entries in this P$TABLE slot */
       83     4334    1   DCL IMAGE_SIZE SBIN WORD;                   /* Temp for arrayed-pointer hooks */
       84     4335    1   DCL UD_MAXTAB (0:%MAX_FCG#) SBIN WORD UNAL SYMREF;           /* Max FPT codes */
       85     4336    1   DCL S_PNO UBIN WORD SYMREF;                                     /* CPU number */
       86     4337    1   DCL 1 PATCH BASED ALIGNED,
       87     4338    1         2 NEXT UBIN(18) UNAL,
       88     4339    1         2 * UBIN(36) UNAL,
       89     4340    1         2 SIZE UBIN(18) UNAL;
       90     4341
       91     4342    1   DCL B$SEGTBL$ PTR SYMREF READONLY;
       92     4343    1   DCL 1 SEGTBL ALIGNED BASED (B$SEGTBL$),
       93     4344    1         2 * UBIN,
       94     4345    1         2 NODES (0:0) ALIGNED,
       95     4346    1           3 WOFF UBIN(16) HALIGNED,
       96     4347    1           3 WSIZ UBIN(16) HALIGNED;
       97     4348    1   DCL SEGP$ PTR;
       98     4349    1   DCL 1 SEGPT (0:0) ALIGNED BASED (SEGP$),
       99     4350    1         2 RPN UBIN(18) UNAL,
      100     4351    1         2 * BIT (18) UNAL;
      101     4352
      102     4353        %SUB NULL_PAGE=-1 /* Reset CVM */;
      103     4354        %SUB FOREVER="/* forever */ WHILE ('1'B)";
      104     4355        %SUB B$MPT=B$MPT$->B$MAP;
      105     4356        %P_ERROR;
      106     4365        %FPT$SMOUSE_V;
      107     4368        %MOUSE_REF;
      108     4383    1   DCL MY_ERROR BIT(36) CONSTANT INIT ('201001000000'O);
      109     4384        %EJECT;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:4    
      110     4385        /*I*  NAME:    ACQUIRE
      111     4386              PURPOSE: Acquire update access to performance monitoring
      112     4387                       tables.
      113     4388              CALL:    CALL ACQUIRE (gate_name, user_count_var);
      114     4389              OUTPUT:  Returns with gate locked and value of associated user
      115     4390                       count stored in variable I.  The user count is accessed
      116     4391                       after a call to SSS$CACHEBP to ensure that the value is
      117     4392                       up-to-date.
      118     4393              DESCRIPTION:   ACQUIRE %LOCKs the indicated gate and then calls
      119     4394                       SSS$CACHEBP so that the indicated user-count will be accessed
      120     4395                       via a cache-bypass read.  If the user count is non-negative, all
      121     4396                       is well - ACQUIRE returns to the caller with the gate %LOCKed
      122     4397                       (and interrupts disabled).  If the user count is negative,
      123     4398                       someone is starting up or shutting down the performance monitor
      124     4399                       function - ACQUIRE %UNLOCKs the gate, calls SSR$REG to put the
      125     4400                       user to sleep for one second, and then repeats the whole process
      126     4401                       until the user count goes non-negative.  The routine that called
      127     4402                       ACQUIRE must %UNLOCK the gate when exclusive access to the data
      128     4403                       is no longer required (and in any case, before returning to the
      129     4404                       user!!).                                                       */
      130     4405
      131     4406    1   ACQUIRE: PROC (GATE, USER_COUNT);
      132     4407
      133     4408    2   DCL GATE UBIN WORD;                          /* Gate for access to USER_COUNT */
      134     4409    2   DCL USER_COUNT SBIN WORD;               /* # of users accessing perf. mon. fn */
      135     4410
      136     4411    3      DO FOREVER;
      137     4412
      138     4413              %LOCK (G#=GATE);
      139     4416
      140     4417    3         CALL SSS$CACHEBP;
      141     4418
      142     4419    3         I = USER_COUNT;
      143     4420
      144     4421    3         CALL SSS$CACHE;
      145     4422
      146     4423    3         IF I >= 0
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:5    
      147     4424    3           THEN
      148     4425    3            RETURN;
      149     4426              %UNLOCK (G#=GATE);
      150     4429
      151     4430    3         CALL SSR$REG (%SS_SL, , 1);                       /* sleep for 1 second */
      152     4431
      153     4432    3         END /* DO FOREVER */;
      154     4433
      155     4434    2   END ACQUIRE;
      156     4435        %EJECT;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:6    
      157     4436        /*I*  NAME:    TEST_BUFFER
      158     4437              PURPOSE: Ensures that user's buffer is big enough for PM data
      159     4438              CALL:    CALL TEST_BUFFER(parameter_stack_number,
      160     4439                             required_size, avail_size);
      161     4440
      162     4441              DESCRIPTION:   TEST_BUFFER is called by the various "get performance
      163     4442                    monitor data" routines to ensure that the user passed us a
      164     4443                    big enough data buffer.  The caller should indicate which vector
      165     4444                    is to be checked (usually PS0) and the number of words that
      166     4445                    are necessary for storing all of the indicated data.  TEST_BUFFER
      167     4446                    will call HFF$DSIZE to determine the actual size of the buffer;
      168     4447                    if it's less than what is actually required, a flag will be
      169     4448                    set indicating that the user should receive a zero-severity
      170     4449                    ALTRET upon return from the PMME, and the caller is passed the
      171     4450                    actual size of the user's buffer.  TEST_BUFFER will also call
      172     4451                    SSS$BLOCK to ensure that the remainder of this M$GETxxx service
      173     4452                    gets run on the master CPU (to avoid certain strange data-
      174     4453                    messup problems even when everything is gated).                   */
      175     4454
      176     4455    1   TEST_BUFFER: PROC (PARAMETER_NUMBER, NEEDED_SIZE, AVAIL_SIZE);
      177     4456
      178     4457    2   DCL PARAMETER_NUMBER UBIN WORD;
      179     4458    2   DCL NEEDED_SIZE UBIN WORD;
      180     4459    2   DCL AVAIL_SIZE UBIN WORD;
      181     4460
      182     4461    2      CALL HFF$DSIZ (PARAMETER_NUMBER, AVAIL_SIZE);
      183     4462
      184     4463    2      AVAIL_SIZE = AVAIL_SIZE / 4;
      185     4464
      186     4465    2      IF AVAIL_SIZE < NEEDED_SIZE
      187     4466    2        THEN
      188     4467    2         TOO_SMALL = %YES#;
      189     4468
      190     4469    3        ELSE DO;
      191     4470
      192     4471    3         TOO_SMALL = %NO#;
      193     4472    3         AVAIL_SIZE = NEEDED_SIZE;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:7    
      194     4473    3         END;
      195     4474
      196     4475    2      CALL SSS$BLOCK;                              /* Force user onto master CPU */
      197     4476
      198     4477    2      RETURN;
      199     4478
      200     4479    2   END TEST_BUFFER;
      201     4480        %EJECT;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:8    
      202     4481    1   PHA$SMOUSE: ENTRY;
      203     4482        /*F* NAME:     PHA$SMOUSE
      204     4483             PURPOSE:  Set up data pages for PMME monitoring.
      205     4484                                                                              */
      206     4485        /*D* NAME:     PHA$SMOUSE
      207     4486             CALL:     Call PHA$SMOUSE;
      208     4487             INTERFACE: MMD$STLPP, MMD$RSPP, MME$CVM.
      209     4488             ENVIRONMENT:  Extended performance monitor authorization is required.
      210     4489             INPUT:    None to speak of
      211     4490             OUTPUT:   Pmme monitoring tables initialized.
      212     4491             DESCRIPTION: Routine is called to steal and initialize the data
      213     4492                       area used for PMME monitoring.
      214     4493                                                                              */
      215     4494
      216     4495    1      CALL ACQUIRE (PH_MOUSE_LOCK, PH_MOUSE_USERS);
      217     4496
      218     4497    1      IF I > 0
      219     4498    2        THEN DO;
      220     4499
      221     4500              %UNLOCK (G#=PH_MOUSE_LOCK);
      222     4503              %P_ERR (CODE=%E$CANT_START);
      223     4511        /*E*  ERROR:   PHA-E$CANT_START-E
      224     4512        MESSAGE0: I can't start that feature - it's already started!
      225     4513        MESSAGE1: The special performance monitoring feature that you requested
      226     4514                  was already in effect.  If you wish to re-initialize the feature,
      227     4515                  you must STOP it and then START it again.
      228     4516        */
      229     4517    2         END;
      230     4518
      231     4519    1      PH_MOUSE_USERS = -1;
      232     4520
      233     4521           %UNLOCK (G#=PH_MOUSE_LOCK);
      234     4524
      235     4525    1      PH_MOUSE_USER_NUMBER = B$PS0$ -> FPT$SMOUSE_V.SYSID;
      236     4526
      237     4527    2      DO I = 0 TO PH_MOUSE_PAGES;
      238     4528
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:9    
      239     4529    2         CALL MMD$STLPP(PH_MUS_PAGES(I), %MONWSQ)
      240     4530    2          ALTRET(NO_MOUSE_PAGE);
      241     4531
      242     4532    2         CALL MME$CVM(%MONWSQ, %MOUSELO + I, PH_MUS_PAGES(I), ERROR)
      243     4533    2          ALTRET(CVM_ERROR);
      244     4534
      245     4535    2         END;
      246     4536
      247     4537    2      DO I = 0 TO 1024 * PH_MOUSE_PAGES + 1023;
      248     4538    2         B$MOUSE$ -> WORD_(I) = 0;
      249     4539    2         END;
      250     4540
      251     4541    1      PH_CPU_MOUSED = %NO#;
      252     4542
      253     4543    1      PH_CPU_MOUSED(S_PNO) = %YES#;
      254     4544
      255     4545    1      I = POFFW(ADDR(PH_MOUSE_TBL.PMME), ADDR(PH_MOUSE_TBL));
      256     4546
      257     4547    2      DO J = 0 TO %MAX_FCG#;
      258     4548
      259     4549    2         PH_MOUSE_TBL.FCG.OFFSET(J) = I;
      260     4550    2         PH_MOUSE_TBL.FCG.MAX_FPT(J) = UD_MAXTAB(J);
      261     4551
      262     4552    2         IF J = %FCG_FM1# OR J = %FCG_FM2#
      263     4553    3           THEN DO;
      264     4554
      265     4555    3            I = I + (UD_MAXTAB(J) + 1) * (MAX_ASN + 1) *
      266     4556    3             SIZEW(PH_MOUSE_ENTRY);
      267     4557    3            PH_MOUSE_TBL.FCG.BREAKDOWN(J) = '1'B;
      268     4558    3            END;
      269     4559
      270     4560    2           ELSE
      271     4561    2            I = I + (UD_MAXTAB(J) + 1) * SIZEW(PH_MOUSE_ENTRY);
      272     4562
      273     4563    2         END;
      274     4564
      275     4565    1      PH_MOUSE_TBL.TABLE_SIZE = I;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:10   
      276     4566    1      PH_MOUSE_TBL.FCGS = %MAX_FCG#;
      277     4567
      278     4568    1      IF I >= 1024 * (PH_MOUSE_PAGES + 1)
      279     4569    1        THEN CALL SC_PHA216;
      280     4570
      281     4571        /*S*  SCREECH_CODE:  PHA-S$SC216
      282     4572              TYPE:          SCREECH
      283     4573              MESSAGE:    MOUSE tables exceed available space.
      284     4574              DESCRIPTION: The space required for the MOUSE data exceeds the
      285     4575                          space available in the stolen pages.  Recompile the PH
      286     4576                          modules with a higher stolen-page limit.
      287     4577        */
      288     4578
      289     4579    1      PH_MOUSE_USERS = 1;
      290     4580
      291     4581    1      RETURN;
      292     4582
      293     4583    1   NO_MOUSE_PAGE:
      294     4584
      295     4585    2      DO J = 0 TO I - 1;
      296     4586
      297     4587    2         CALL MME$CVM(%MONWSQ, %MOUSELO + J, NULL_PAGE, ERROR)
      298     4588    2          ALTRET(CVM_ERROR);
      299     4589
      300     4590    2         CALL MMD$RSPP(PH_MUS_PAGES(J), %MONWSQ)
      301     4591    2          ALTRET(PAGES_TRAMPLED);
      302     4592
      303     4593    2         PH_MUS_PAGES(J) = 0;
      304     4594
      305     4595    2         END;
      306     4596
      307     4597    1      PH_MOUSE_USERS = 0;
      308     4598
      309     4599           %P_ERR(CODE=%E$ALLSTOLEN);
      310     4607        /*E*  ERROR:   PHA-E$ALLSTOLEN
      311     4608        MESSAGE0: No stealable pages are available.
      312     4609        MESSAGE1: I couldn't steal enough memory to start up the Performance
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:11   
      313     4610                  Monitor function that you requested.  Please try again later.
      314     4611        */
      315     4612
      316     4613        %EJECT;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:12   
      317     4614    1   PHA$XMOUSE: ENTRY;
      318     4615        /*F* NAME:     PHA$XMOUSE
      319     4616             PURPOSE:  Return data pages for PMME monitoring.
      320     4617                                                                              */
      321     4618        /*D* NAME:     PHA$XMOUSE
      322     4619             CALL:     Call PHA$XMOUSE;
      323     4620             INTERFACE: MMD$RSPP, MME$CVM.
      324     4621             ENVIRONMENT:  Extended performance monitor authorization is required.
      325     4622             INPUT:    None to speak of
      326     4623             OUTPUT:   Pmme monitoring tables returned to system.
      327     4624             DESCRIPTION: Routine is called to return to the system the data
      328     4625                       area used for PMME monitoring.
      329     4626                                                                              */
      330     4627
      331     4628    1      CALL ACQUIRE (PH_MOUSE_LOCK, PH_MOUSE_USERS);
      332     4629
      333     4630    1      IF PH_MOUSE_USERS = 0
      334     4631    2        THEN DO;
      335     4632
      336     4633              %UNLOCK (G#=PH_MOUSE_LOCK);
      337     4636              %P_ERR (CODE=%E$CANT_STOP);
      338     4644        /*E*  ERROR:   PHA-E$CANT_STOP-E
      339     4645        MESSAGE0: I can't stop that feature - it's not running!
      340     4646        MESSAGE1: The special performance monitoring feature that you asked me to
      341     4647                  stop was not active - therefore, there is nothing for me to stop!
      342     4648        */
      343     4649    2         END;
      344     4650
      345     4651    1      PH_MOUSE_USERS = -1;
      346     4652
      347     4653           %UNLOCK (G#=PH_MOUSE_LOCK);
      348     4656
      349     4657    2      DO I = 0 TO PH_MOUSE_PAGES;
      350     4658
      351     4659    2         CALL MME$CVM(%MONWSQ, %MOUSELO + I, NULL_PAGE, ERROR)
      352     4660    2          ALTRET (CVM_ERROR);
      353     4661
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:13   
      354     4662    2         CALL MMD$RSPP(PH_MUS_PAGES(I), %MONWSQ)
      355     4663    2          ALTRET(PAGES_TRAMPLED);
      356     4664
      357     4665    2         PH_MUS_PAGES(I) = 0;
      358     4666
      359     4667    2         END;
      360     4668
      361     4669    1      PH_MOUSE_USERS = 0;
      362     4670
      363     4671    1      RETURN;
      364     4672
      365     4673        %EJECT;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:14   
      366     4674    1   PHA$GETMOUSE: ENTRY;
      367     4675        /*F* NAME:     PHA$GETMOUSE
      368     4676             PURPOSE:  Copy the MOUSE data area into a buffer pointed
      369     4677                       to by the 0th element of the user's parameter
      370     4678                       stack.
      371     4679                                                                              */
      372     4680        /*D* NAME:     PHA$GETMOUSE
      373     4681             CALL:     Call PHA$GETMOUSE;
      374     4682             INTERFACE: HFD$LOCK, HFD$UNLOCK, HFC$BYPASS
      375     4683             ENVIRONMENT:  Needs regular performance monitor FAUTH.
      376     4684             OUTPUT:   The user's buffer contains a copy of the MOUSE
      377     4685                       data area, if it exists.
      378     4686             DESCRIPTION:  This entry point is called in response to an
      379     4687                       M$GETMOUSE PMME request.  It will copy the PMME
      380     4688                       monitoring data segment into a buffer indicated by
      381     4689                       the RESULTS vector in the user's M$GETMOUSE FPT.  If
      382     4690                       the buffer isn't large enough, the altreturn from the
      383     4691                       PMME will be taken with an error code of PHA-E$LD and
      384     4692                       a zero severity level.
      385     4693                                                                                      */
      386     4694
      387     4695    1      CALL TEST_BUFFER(0, 1024 * (PH_MOUSE_PAGES + 1),
      388     4696    1       UPPER_BOUND);
      389     4697
      390     4698    1      CALL ACQUIRE (PH_MOUSE_LOCK, PH_MOUSE_USERS);
      391     4699
      392     4700    2      IF I = 0 THEN DO;
      393     4701              %UNLOCK (G#=PH_MOUSE_LOCK);
      394     4704              %P_ERR(CODE=%E$NOMOUSE);
      395     4712    2         END;
      396     4713
      397     4714        /*E*  ERROR:   PHA-E$NOMOUSE-C
      398     4715        MESSAGE0: Sorry - MoUsE isn't running.
      399     4716        MESSAGE1: I can't honor your M$GETMOUSE service request - MoUsE isn't
      400     4717                  running at the moment.
      401     4718        */
      402     4719
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:15   
      403     4720    1      BLOQ_LEN = UPPER_BOUND * 4;
      404     4721
      405     4722    1      B$PS0$ -> BLOQ = B$MOUSE$ -> BLOQ;
      406     4723
      407     4724           %UNLOCK (G#=PH_MOUSE_LOCK);
      408     4727
      409     4728    1      IF TOO_SMALL THEN
      410     4729              %P_ERR(CODE=%E$LD);
      411     4737        /*E*  ERROR:   PHA-E$LD-E
      412     4738        MESSAGE0: Lost data.
      413     4739        MESSAGE1: The buffer that you supplied wasn't large enough to hold all
      414     4740                  of the performance monitoring data available.  Partial data
      415     4741                  may have been transferred to your buffer anyhow.
      416     4742        */
      417     4743
      418     4744    1      RETURN;
      419     4745        %EJECT;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:16   
      420     4746    1   PHA$GETPM: ENTRY;
      421     4747        /*F*  NAME:    PHA$GETPM
      422     4748              PURPOSE: Copies the various performance monitoring data pointed to
      423     4749                    by entries in the P$TABLE table to a buffer passed by the user
      424     4750                    as the 0th parameter in his M$GETPM PMME.                         */
      425     4751
      426     4752        /*D*  NAME:    PHA$GETPM
      427     4753              INTERFACE:  HFF$DSIZE
      428     4754              CALL:    CALL PHA$GETPM
      429     4755              ENVIRONMENT:   FAUTH needed - Performance Monitor.
      430     4756              OUTPUT:     Part or all of available performance monitor data copied
      431     4757                       to user's buffer.
      432     4758              DESCRIPTION:   Called to copy the performance monitoring data from
      433     4759                       its various homes in the monitor data segment to a buffer
      434     4760                       provided by the user.  If the buffer is too small, we'll
      435     4761                       copy as much of the data as possible and return an error
      436     4762                       (PHA-E$LD) to the user's ALTRET address.
      437     4763                                                                                      */
      438     4764
      439     4765    1      CALL TEST_BUFFER(0, 128*1024, UPPER_BOUND);
      440     4766
      441     4767    1      TOO_SMALL = '0'B;
      442     4768
      443     4769    1      OFFSET = 0;
      444     4770    1      ENTRY_NUM = 0;
      445     4771
      446     4772    1      CALL PMC$FIXDEV;                           /* Clean up the DCT table stuff */
      447     4773
      448     4774    1      CALL SSS$CURTIME(P_NOW);
      449     4775
      450     4776           %LOCK (G#=P_GATE);
      451     4779
      452     4780    1      CALL HFC$CACHECLR;                   /* clear cache for following accesses */
      453     4781
      454     4782    2      DO I = 0 TO S_NSCPU;
      455     4783                                                            /* Update CPU-time values */
      456     4784    2         P_S_UXEQTIME(I)=S_UXEQTIME(I)+S_UXUSEC(I)/10000;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:17   
      457     4785    2         P_S_USRVTIME(I)=S_USRVTIME(I)+S_USUSEC(I)/10000;
      458     4786    2         P_S_MXEQTIME(I)=S_MXEQTIME(I)+S_MXUSEC(I)/10000;
      459     4787    2         P_S_MIDLTIME(I)=S_MIDLTIME(I)+S_MIDUSEC(I)/10000;
      460     4788    2         P_S_MIDLWIO(I)=S_MIDLWIO(I)+S_MIIUSEC(I)/10000;
      461     4789    2         P_S_MIDLWRES(I)=S_MIDLWRES(I)+S_MIRUSEC(I)/10000;
      462     4790    2         P_S_MIDLWRESIO(I)=S_MIDLWRESIO(I)+S_MIIRUSEC(I)/10000;
      463     4791
      464     4792                                                /* Figure out how much time was spent */
      465     4793                                                  /* in "not running" - this includes */
      466     4794                                                 /* crash/recovery time, XDELTA time, */
      467     4795                                                     /* CPU stopped by operator, etc. */
      468     4796
      469     4797    2         CALL XUD$UTS_DIFF (P_STOPTIME(I), P_NOW, P_STARTUP);
      470     4798    2         P_STOPTIME(I) = P_STOPTIME(I) - P_S_UXEQTIME(I) - P_S_USRVTIME(I) -
      471     4799    2          P_S_MXEQTIME(I) - P_S_MIDLTIME(I) - P_S_MIDLWIO(I) - P_S_MIDLWRES(I) -
      472     4800    2          P_S_MIDLWRESIO(I);
      473     4801
      474     4802    2         IF P_STOPTIME(I) < 0
      475     4803    2           THEN P_STOPTIME(I) = 0;
      476     4804
      477     4805    2         END;
      478     4806
      479     4807           %UNLOCK (G#=P_GATE);
      480     4810
      481     4811           %LOCK (G#=MM_LOCK);
      482     4814
      483     4815    1      P_AVAIL_MEM = MM_FPPC + MM_AUTO + MM_CGQD.FPPC + FMC_CACHEPGCNT;
      484     4816
      485     4817    1      P_RESOURCE.PAGES.IOCC = MM_IOCC;
      486     4818    1      P_RESOURCE.PAGES.IOCM =                FMC_CACHEPGCNT;/*IOCM SHOULD BE IOCU*/
      487     4819    1      P_RESOURCE.PAGES.SPPC = MM_SPPC;
      488     4820    1      P_RESOURCE.PAGES.BPPC = MM_BPPC;
      489     4821    1      P_RESOURCE.PAGES.SUSPECTS = MM_SUSPECTS;
      490     4822    1      P_RESOURCE.PAGES.IN_TEST = MM_IN_TEST;
      491     4823    1      P_RESOURCE.PAGES.FPPC = MM_FPPC + MM_CGQD.FPPC;
      492     4824        /*  MM_GAPSZ is included in MM_PCORE when both SCUs are active.
      493     4825            If one of the SCUs is released MM_GAPSZ is not included in
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:18   
      494     4826            MM_PCORE.  Therefore do not subtract MM_GAPSZ from MM_PCORE
      495     4827            when a SCU is released.
      496     4828        */
      497     4829    1      P_RESOURCE.PAGES.PCORE = MM_PCORE;
      498     4830    1      IF H_RPM_FLG THEN
      499     4831    1         IF (H_DPS8000_SCU_INFO.SCU_STATUS.REL_BIT(0) = '0'B) AND
      500     4832    1          (H_DPS8000_SCU_INFO.SCU_STATUS.REL_BIT(1) = '0'B) THEN
      501     4833    1            P_RESOURCE.PAGES.PCORE = P_RESOURCE.PAGES.PCORE - MM_GAPSZ;
      502     4834    1      P_RESOURCE.PAGES.RSVP = MM_RSVP;
      503     4835    1      P_RESOURCE.PAGES.HELD = MM_HELD;
      504     4836    1      P_RESOURCE.PAGES.NCQPGS = MM_NCQPGS;
      505     4837    1      P_RESOURCE.PAGES.AARDSIZE = MM_AARD;
      506     4838    1      P_RESOURCE.PAGES.XDELTASIZE = MM_XDEL;
      507     4839    1      P_RESOURCE.PAGES.AUTOAVAIL = MM_AUTO;
      508     4840    1      P_RESOURCE.PAGES.AUTOINUSE = MM_AUTOINUSE;
      509     4841    1      P_RESOURCE.PAGES.SHAREDSAVAIL = MM_SHAREDS;
      510     4842    1      P_RESOURCE.PAGES.SHAREDSUSE = MM_SHAREDSUSE;
      511     4843    1      P_RESOURCE.PAGES.CGQPGS = MM_CGQD.UPPC;
      512     4844
      513     4845    1      P_RESOURCE.PAGES.GHOSTSIZE = 0;
      514     4846    2      DO I = 1 TO S_MING;
      515     4847    2         IF B$USRT$ -> B$USER.US(I) ~= %SS_SNULL
      516     4848    2           THEN
      517     4849    2            P_RESOURCE.PAGES.GHOSTSIZE = P_RESOURCE.PAGES.GHOSTSIZE +
      518     4850    2             B$USRT$ -> B$USER.PCT(I);
      519     4851    2         END;
      520     4852
      521     4853    1      P_RESOURCE.PAGES.USERSIZE = 0;
      522     4854    2      DO I = S_MING+1 TO B_MUAIS;
      523     4855    2         IF B$USRT$ -> B$USER.US(I) ~= %SS_SNULL
      524     4856    2           THEN
      525     4857    2            P_RESOURCE.PAGES.USERSIZE = P_RESOURCE.PAGES.USERSIZE +
      526     4858    2             B$USRT$ -> B$USER.PCT(I);
      527     4859    2         END;
      528     4860
      529     4861    1      P_RESOURCE.PAGES.CONTEXT =
      530     4862    1       S_NSCPU * 6 +                                    /* 6 PAGES PER SLAVE CPU */
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:19   
      531     4863    1       5 +                                             /* 5 PAGES FOR MASTER CPU */
      532     4864    1       3 +                            /* 3 PAGES FOR WSQ 4, 5, AND 6 PAGE TABLES */
      533     4865        /*          COUNTED IN AARDSIZE <- FIRST 4 REAL PAGES FOR I/O MAILBOXES, ETC. */
      534     4866    1       -6 +                                                      /* FUDGE FACTOR */
      535     4867    1       (MM_NCWSQ+3)/4;                        /* PAGE TABLE PAGES FOR COMM WSQ'S */
      536     4868    2      DO I = %CGPGTBLLO TO %PGTBLHI;                           /* CG PAGE TABLES */
      537     4869    2         IF B$MPT.RPN(I) ~= MM_FPMC.RPN
      538     4870    2           THEN
      539     4871    2            P_RESOURCE.PAGES.CONTEXT = P_RESOURCE.PAGES.CONTEXT + 1;
      540     4872    2         END;
      541     4873    1      P_RESOURCE.PAGES.CONTEXT = P_RESOURCE.PAGES.CONTEXT +
      542     4874    1       (MM_PCORE + 1023 ) / 1024;                                   /* PPUT SIZE */
      543     4875
      544     4876    1      P_RESOURCE.PAGES.MONSIZE = ((PINCRW(ADDR(B_PATCHI),-2)->PATCH.NEXT
      545     4877    1       + PINCRW(ADDR(B_PATCHI),-2)->PATCH.SIZE) + 1023) / 1024;
      546     4878
      547     4879        /* Now we have the monitor root size. Next add in the monitor overlays,
      548     4880        except TIGR (B$ROGERS), VOLINIT (B$BJERKE), and
      549     4881        WRAPUP (B$ANDERSON, which is TIGR part 2), of course.      */
      550     4882
      551     4883    2      DO J = 0 TO 3;
      552     4884    2         SEGP$ = PINCRW (B$SEGTBL$ , SEGTBL.NODES.WOFF (J));
      553     4885    2         I = SEGTBL.NODES.WSIZ (J) - 1;
      554     4886    3         DO UNTIL (I < 0);
      555     4887    3            IF SEGPT.RPN(I)~=MM_FPMC.RPN
      556     4888    3              THEN
      557     4889    3               P_RESOURCE.PAGES.MONSIZE =
      558     4890    3                P_RESOURCE.PAGES.MONSIZE + 1;
      559     4891    3            I = I - 1;
      560     4892    3            END;
      561     4893    2         END;
      562     4894
      563     4895    1      P_RESOURCE.PAGES.MONDSSIZE = 0;
      564     4896    2      DO I = %UDSEGLO TO %LDCTHI;
      565     4897    2         IF B$MPT.RPN(I) ~= MM_FPMC.RPN
      566     4898    2           THEN
      567     4899    2            P_RESOURCE.PAGES.MONDSSIZE = P_RESOURCE.PAGES.MONDSSIZE + 1;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:20   
      568     4900    2         END;
      569     4901
      570     4902    1      P_RESOURCE.PAGES.TIGRSIZE = 0;
      571     4903    2      DO I = %TIGRLO TO %TIGRHI;
      572     4904    2         IF B$MPT.RPN(I) ~= MM_FPMC.RPN
      573     4905    2           THEN
      574     4906    2            P_RESOURCE.PAGES.TIGRSIZE = P_RESOURCE.PAGES.TIGRSIZE + 1;
      575     4907    2         END;
      576     4908
      577     4909    1      P_RESOURCE.PAGES.RPROCSIZE = 0;
      578     4910    1      P_RESOURCE.PAGES.PROCSIZE = 0;
      579     4911    1      P_RESOURCE.PAGES.SHAREDSIZE = 0;
      580     4912
      581     4913    2      DO I = 1 TO P_MAXPROCS;
      582     4914
      583     4915    2         WORDS = B$P$ -> B$P.PPC (I) + (B$P$ -> B$P.DSZ (I) + 1023) /1024;
      584     4916    2         Q$ = ADDR (B$P$ -> B$P.DSDATA (I));
      585     4917    3         DO K = 0 TO 5;
      586     4918    3            WORDS = WORDS + (Q$ -> B$PROCDS.DSSIZE (K) +1023) / 1024;
      587     4919    3            END;
      588     4920
      589     4921    2         IF B$P$->B$P.NAME.TEXT(I) = 'LOGON'
      590     4922    2          OR B$P$->B$P.NAME.TEXT(I) = 'IBEX'
      591     4923    2          OR B$P$->B$P.NAME.TEXT(I) = 'DELTA'
      592     4924    2          OR B$P$->B$P.NAME.TEXT(I) = ':SHARED_SYSTEM'
      593     4925    2          OR B$P$->B$P.NAME.TEXT(I) = ':SHARED_SPECIAL'
      594     4926    2           THEN
      595     4927    2            P_RESOURCE.PAGES.RPROCSIZE =
      596     4928    2             P_RESOURCE.PAGES.RPROCSIZE + WORDS;
      597     4929    2           ELSE
      598     4930    2            P_RESOURCE.PAGES.PROCSIZE =
      599     4931    2             P_RESOURCE.PAGES.PROCSIZE + WORDS;
      600     4932
      601     4933    2         END;
      602     4934
      603     4935           %UNLOCK (G#=MM_LOCK);
      604     4938
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:21   
      605     4939    2      DO WHILE (P$TABLE.ADDR$(ENTRY_NUM) ~= ADDR(NIL));
      606     4940
      607     4941    2         P$ = P$TABLE.ADDR$(ENTRY_NUM);
      608     4942
      609     4943    3         DO I = 1 TO P$TABLE.INDIRECT(ENTRY_NUM);
      610     4944    3            P$ = P$ -> PTR_;
      611     4945    3            END;
      612     4946
      613     4947    2         WORDS = P$TABLE.WORDS(ENTRY_NUM);
      614     4948
      615     4949    2         IMAGE_SIZE = P$TABLE.IMAGE_SIZE(ENTRY_NUM);
      616     4950
      617     4951    2         IF P$TABLE.ENTRIES$(ENTRY_NUM) = ADDR(NIL)
      618     4952    2           THEN ENTRIES = P$TABLE.ENTRIES(ENTRY_NUM);
      619     4953    2           ELSE ENTRIES = P$TABLE.ENTRIES$(ENTRY_NUM) -> WORD_(0);
      620     4954
      621     4955    2         IF UPPER_BOUND <= OFFSET + 4 THEN
      622     4956
      623     4957    2            TOO_SMALL = '1'B;
      624     4958
      625     4959    3           ELSE DO;
      626     4960
      627     4961    3            HEADER_OFFSET = OFFSET;
      628     4962
      629     4963    3            ENTRY_COUNT = 0;
      630     4964
      631     4965    3            OFFSET = OFFSET + 2;
      632     4966
      633     4967    3            IF UPPER_BOUND <= OFFSET + 2 + WORDS * ENTRIES
      634     4968    4              THEN DO;
      635     4969
      636     4970    4               TOO_SMALL = '1'B;
      637     4971    4               ENTRIES = (UPPER_BOUND - OFFSET - 3) / WORDS;
      638     4972    4               END;
      639     4973
      640     4974    4            DO K = 0 TO ENTRIES - 1;
      641     4975
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:22   
      642     4976    4               IF IMAGE_SIZE = 0
      643     4977    4                 THEN Q$ = PINCRW(P$, K * WORDS);
      644     4978    4                 ELSE Q$ = PINCRW(P$, K * IMAGE_SIZE) -> PTR_;
      645     4979
      646     4980    4               IF Q$ ~= ADDR(NIL)
      647     4981    5                 THEN DO;
      648     4982
      649     4983    5                  BLOQ_LEN = (WORDS * 4);
      650     4984
      651     4985    5                  PINCRW(B$PS0$, OFFSET) -> BLOQ = Q$ -> BLOQ;
      652     4986
      653     4987    5                  OFFSET = OFFSET + WORDS;
      654     4988
      655     4989    5                  ENTRY_COUNT = ENTRY_COUNT + 1;
      656     4990
      657     4991    5                  END;
      658     4992
      659     4993    4               END;
      660     4994
      661     4995    3            END;
      662     4996
      663     4997    2         B$PS0$ -> WORD_(HEADER_OFFSET) = ENTRY_NUM;
      664     4998    2         B$PS0$ -> WORDX.HW1_(HEADER_OFFSET + 1) = ENTRY_COUNT;
      665     4999    2         B$PS0$ -> WORDX.HW2_(HEADER_OFFSET + 1) = WORDS;
      666     5000
      667     5001    2         ENTRY_NUM = ENTRY_NUM + 1;
      668     5002
      669     5003    2         END;
      670     5004
      671     5005    1      IF OFFSET > 0
      672     5006    1        THEN
      673     5007    1         B$PS0$ -> WORD_(OFFSET) = -1;
      674     5008
      675     5009    1      IF TOO_SMALL
      676     5010    1        THEN
      677     5011              %P_ERR    (CODE=%E$LD);
      678     5019    1      RETURN;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:23   
      679     5020        %EJECT;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:24   
      680     5021    1   CVM_ERROR:
      681     5022           %P_PASS_ERR;
      682     5025    1      CALL SC_PHA212;
      683     5026
      684     5027        /*S*  SCREECH_CODE:  PHA-S$SC212
      685     5028              TYPE:          SCREECH
      686     5029                 MESSAGE:  Unexpected ALTRET by MME$CVM                               */
      687     5030
      688     5031    1   PAGES_TRAMPLED:
      689     5032
      690     5033    1      CALL SC_PHA213;
      691     5034
      692     5035        /*S*  SCREECH_CODE:  PHA-S$SC213
      693     5036              TYPE:          SCREECH
      694     5037                 MESSAGE:  Unexpected ALTRET by MMD$RSPP                              */
      695     5038
      696     5039    1   END PHA$ERS;

PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:25   
--  Include file information  --

   XUD_UTS_M.:E05TOU  is referenced.
   HF_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   HF_LOCK_C.:E05TOU  cannot be made into a system file and is referenced.
   B$USER.:E05TOU  cannot be made into a system file and is referenced.
   B$P.:E05TOU  cannot be made into a system file and is referenced.
   B$MAP.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   P$CP6V_C.:E05TOU  is referenced.
   JG_GHOSTS_C.:E05TOU  is referenced.
   S_GJOB_R.:E05TOU  cannot be made into a system file and is referenced.
   FM_CACHE_R.:E05TOU  cannot be made into a system file and is referenced.
   SS_CNTRLD_R.:E05TOU  cannot be made into a system file and is referenced.
   SS_CNTRL_R.:E05TOU  cannot be made into a system file and is referenced.
   SS_SCHED_R.:E05TOU  cannot be made into a system file and is referenced.
   SS_SCHED_C.:E05TOU  is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   F_ERRORS_C.:E05TOU  is referenced.
   M_ERRORS_C.:E05TOU  is referenced.
   MM_MACRO_M.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   MM$SYSGEN.:E05TOU  is referenced.
   M_INFO_C.:E05TOU  is referenced.
   MM_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   P_PMDAT_C.:E05TOU  is referenced.
   P_PMDAT_R.:E05TOU  cannot be made into a system file and is referenced.
   P_ERRORS_C.:E05TOU  is referenced.
   PH_ERROR.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   UD_EQU_E.:E05TOU  is referenced.
      No diagnostics issued in procedure PHA$ERS.

   Procedure PHA$ERS requires 892 words for executable code.
   Procedure PHA$ERS requires 32 words of local(AUTO) storage.
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:26   

    No errors detected in file PHA$ERS.:E05TSI    .

PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:27   

 Object Unit name= PHA$ERS                                    File name= PHA$ERS.:E05TOU
 UTS= JUL 30 '97 04:23:07.52 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS     14     16  PHA$ERS
    1   Proc  even  none   892   1574  PHA$ERS
    2  RoData even  none    16     20  PHA$ERS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        0  PHA$ERS
     1     76                  yes      Std        0  PHA$SMOUSE
     1    362                  yes      Std        0  PHA$XMOUSE
     1    460                  yes      Std        0  PHA$GETMOUSE
     1    555                  yes      Std        0  PHA$GETPM
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:28   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 HFC$UNLOCK
 yes     yes           Std       4 MME$CVM
 yes     yes           Std       2 MMD$RSPP
         yes           Std       0 UDB$PMMEXIT
         yes           Std       1 HFC$LOCK
 yes     yes           Std       2 MMD$STLPP
         yes           Std       0 HFC$CACHECLR
         yes           Std       0 PMC$FIXDEV
         yes           Std       1 SSS$CURTIME
 yes     yes           Std       3 XUD$UTS_DIFF
         yes           Std       0 SSS$CACHEBP
 yes     yes           Std       3 SSR$REG
         yes           Std       0 SSS$CACHE
         yes           Std       2 HFF$DSIZ
         yes           Std       0 SSS$BLOCK
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:29   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     SC_PHA216                             SC_PHA213                             SC_PHA212
     P_RESOURCE$                           P$TABLE                               P_STARTUP
     P_S_UXEQTIME                          P_S_USRVTIME                          P_S_MXEQTIME
     P_S_MIDLTIME                          P_S_MIDLWIO                           P_S_MIDLWRES
     P_S_MIDLWRESIO                        P_UPTIME                              P_STOPTIME
     P_NOW                                 P_GATE                                P_NSCPU
     P_AVAIL_MEM                           PH_MOUSE_USERS                        PH_MUS_PAGES
     PH_MOUSE_LOCK                         PH_CPU_MOUSED                         PH_MOUSE_USER_NUMBER
     MM_LOCK                               MM_FPPC                               MM_SPPC
     MM_BPPC                               MM_SUSPECTS                           MM_IN_TEST
     MM_IOCC                               MM_AUTO                               MM_AUTOINUSE
     MM_SHAREDS                            MM_SHAREDSUSE                    r    MM_BYP$
     MM_PCORE                              MM_GAPSZ                              MM_RSVP
     MM_HELD                               MM_AARD                               MM_XDEL
     MM_NCWSQ                              MM_NCQPGS                             MM_FPMC
     MM_CGQD                               S_NSCPU                               S_UXEQTIME
     S_USRVTIME                            S_MXUSEC                              S_MIDUSEC
     S_MIIUSEC                             S_MIRUSEC                             S_MIIRUSEC
     S_UXUSEC                              S_USUSEC                              S_MXEQTIME
     S_MIDLTIME                            S_MIDLWIO                             S_MIDLWRES
     S_MIDLWRESIO                          FMC_CACHEPGCNT                        FMC_CACHEPGCNT$
     S_MING                                P_MAXPROCS                            B$P$
     B$USRT$                               H_RPM_FLG                             H_DPS8000_SCU_INFO
r    MM_CGQD$                              B$JIT$                                B$MOUSE$
     B$PS0$                                B$MPT$                                B_MUAIS
     B_PATCHI                              UD_MAXTAB                             S_PNO
r    B$SEGTBL$                             B_VECTNIL
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:30   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ASLENTSID                             ISSID
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:31   


        1        1        /*M* PHA$ERS  Service handler for performance monitor PMMEs                   */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*P* NAME:     PHA$ERS
        8        8             PURPOSE:  Service handler for all performance monitor PMMEs.             */
        9        9
       10       10        /*X* CLM=77,CRM=80,CRT=1,PLM=3,CTI=1,THI=2                                    */
       11       11        PHA$ERS: PROC;

     11  1 000000   000000 700200 xent  PHA$ERS      TSX0  ! X66_AUTO_0
         1 000001   000040 000000                    ZERO    32,0
         1 000002   000075 710000 1                  TRA     s:4477+2

       12       12        %INCLUDE UD_EQU_E;
       13      401        %INCLUDE CP_6_SUBS;
       14      941        %INCLUDE PH_ERROR;
       15      976        %INCLUDE P_ERRORS_C;
       16      988        %INCLUDE P_PMDAT_R;
       17     1296        %INCLUDE MM_DATA_R;
       18     1816        %INCLUDE M_ERRORS_C;
       19     1880        %INCLUDE F_ERRORS_C;
       20     2120        %INCLUDE B_SEGIDS_C;
       21     2659        %INCLUDE SS_SCHED_C;
       22     2892        %INCLUDE SS_SCHED_R;
       23     2935        %INCLUDE FM_CACHE_R;
       24     2947        %INCLUDE S_GJOB_R;
       25     3046        %INCLUDE P$CP6V_C;
       26     3051        %INCLUDE B$JIT;
       27     3654        %INCLUDE B$MAP;
       28     3753        %INCLUDE B$P;
       29     3837        %INCLUDE B$USER;
       30     4053        %B$USERREFS;
       31     4057        %INCLUDE HF_LOCK_C;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:32   
       32     4071        %INCLUDE HF_DATA_R;
       33     4114        %INCLUDE XUD_UTS_M;
       34     4196        %XUD$UTS_ENTRIES;
       35     4228        %EJECT;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:33   
       36     4229    1   DCL MM_CGQD$ PTR SYMREF READONLY;
       37     4230        %MM$CGQD (STCLASS="BASED(MM_CGQD$)");
       38     4289    1   DCL B$JIT$ PTR SYMREF;
       39     4290    1   DCL B$MOUSE$ PTR SYMREF;
       40     4291    1   DCL B$PS0$ PTR SYMREF;
       41     4292    1   DCL B$PS1$ PTR SYMREF;
       42     4293    1   DCL B$MPT$ PTR SYMREF;                       /* pointer to monitor page table */
       43     4294    1   DCL KI_MXFE UBIN WORD SYMREF;                 /* Number of FEPs in the system */
       44     4295    1   DCL S_CUN UBIN WORD SYMREF;                 /* My user number - test for FROG */
       45     4296    1   DCL B_MUAIS UBIN WORD SYMREF;                  /* Max users allowed in system */
       46     4297    1   DCL B_PATCHI UBIN SYMREF;
       47     4298    1   DCL SSR$REG ENTRY(3) ALTRET;                     /* Used to REG a sleep event */
       48     4299    1   DCL SSS$MILLI ENTRY(1);                             /* Current time in millis */
       49     4300    1   DCL SC_PHA212 ENTRY CONV (2,0);                    /* Screech 212 - CVM error */
       50     4301    1   DCL SC_PHA213 ENTRY CONV (2,0);                   /* Screech 213 - RSPP error */
       51     4302    1   DCL SC_PHA216 ENTRY CONV (2,0);         /* Screech 216 - MOUSE space exceeded */
       52     4303    1   DCL MMD$STLPP ENTRY(2) ALTRET;                    /* To steal a physical page */
       53     4304    1   DCL MMD$RSPP ENTRY(2) ALTRET;                      /* To return a stolen page */
       54     4305    1   DCL MME$CVM ENTRY(4) ALTRET;                     /* To map pages onto monitor */
       55     4306    1   DCL HFF$DSIZ ENTRY(2);                   /* Get size of parameter stack entry */
       56     4307    1   DCL PMC$FIXDEV ENTRY;                          /* Clean up DCTs' PM locations */
       57     4308    1   DCL SSS$CURTIME ENTRY (1);                          /* Get current clock time */
       58     4309    1   DCL SSS$BLOCK ENTRY;                            /* Force user onto master CPU */
       59     4310    1   DCL SSS$CACHEBP ENTRY;                                        /* bypass cache */
       60     4311    1   DCL SSS$CACHE ENTRY;                                       /* re-enable cache */
       61     4312    1   DCL HFC$CACHECLR ENTRY;                                        /* clear cache */
       62     4313    1   DCL P$ PTR;                                                    /* Scratch PTR */
       63     4314    1   DCL Q$ PTR;
       64     4315    1   DCL I SBIN;                                                        /* Counter */
       65     4316    1   DCL J UBIN;                                                        /* Counter */
       66     4317    1   DCL K UBIN;                                                        /* Counter */
       67     4318    1   DCL TIME UBIN WORD;                                           /* The time now */
       68     4319    1   DCL MONITOR_TIME UBIN WORD;                         /* The monitor's time now */
       69     4320    1   DCL UPPER_BOUND SBIN WORD;                 /* Upper bound of data to transfer */
       70     4321    1   DCL TOO_SMALL BIT(36);                    /* Flag indicating buffer too small */
       71     4322    1   DCL 1 WORDX (0:0) BASED ALIGNED,           /* Structure for user's PMDAT area */
       72     4323    1         2 HW1_ SBIN HALF UNAL,
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:34   
       73     4324    1         2 HW2_ SBIN HALF UNAL;
       74     4325    1   DCL PTR_ PTR BASED;                    /* Based pointer for P$TABLE indirects */
       75     4326    1   DCL BLOQ_LEN UBIN WORD;                     /* # of bytes in BLOQ to be moved */
       76     4327    1   DCL BLOQ CHAR(BLOQ_LEN) BASED;         /* template for fast move to $PS0 area */
       77     4328    1   DCL ENTRY_NUM UBIN WORD;                           /* Entry number in P$TABLE */
       78     4329    1   DCL OFFSET SBIN WORD;                            /* Offset into user's buffer */
       79     4330    1   DCL HEADER_OFFSET UBIN WORD;              /* Offset to PMDAT's header in $PS0 */
       80     4331    1   DCL ENTRY_COUNT UBIN WORD;                   /* # of entries actually present */
       81     4332    1   DCL WORDS SBIN WORD;                        /* # of words in PMDAT table item */
       82     4333    1   DCL ENTRIES SBIN WORD;                   /* # of entries in this P$TABLE slot */
       83     4334    1   DCL IMAGE_SIZE SBIN WORD;                   /* Temp for arrayed-pointer hooks */
       84     4335    1   DCL UD_MAXTAB (0:%MAX_FCG#) SBIN WORD UNAL SYMREF;           /* Max FPT codes */
       85     4336    1   DCL S_PNO UBIN WORD SYMREF;                                     /* CPU number */
       86     4337    1   DCL 1 PATCH BASED ALIGNED,
       87     4338    1         2 NEXT UBIN(18) UNAL,
       88     4339    1         2 * UBIN(36) UNAL,
       89     4340    1         2 SIZE UBIN(18) UNAL;
       90     4341
       91     4342    1   DCL B$SEGTBL$ PTR SYMREF READONLY;
       92     4343    1   DCL 1 SEGTBL ALIGNED BASED (B$SEGTBL$),
       93     4344    1         2 * UBIN,
       94     4345    1         2 NODES (0:0) ALIGNED,
       95     4346    1           3 WOFF UBIN(16) HALIGNED,
       96     4347    1           3 WSIZ UBIN(16) HALIGNED;
       97     4348    1   DCL SEGP$ PTR;
       98     4349    1   DCL 1 SEGPT (0:0) ALIGNED BASED (SEGP$),
       99     4350    1         2 RPN UBIN(18) UNAL,
      100     4351    1         2 * BIT (18) UNAL;
      101     4352
      102     4353        %SUB NULL_PAGE=-1 /* Reset CVM */;
      103     4354        %SUB FOREVER="/* forever */ WHILE ('1'B)";
      104     4355        %SUB B$MPT=B$MPT$->B$MAP;
      105     4356        %P_ERROR;
      106     4365        %FPT$SMOUSE_V;
      107     4368        %MOUSE_REF;
      108     4383    1   DCL MY_ERROR BIT(36) CONSTANT INIT ('201001000000'O);
      109     4384        %EJECT;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:35   
      110     4385        /*I*  NAME:    ACQUIRE
      111     4386              PURPOSE: Acquire update access to performance monitoring
      112     4387                       tables.
      113     4388              CALL:    CALL ACQUIRE (gate_name, user_count_var);
      114     4389              OUTPUT:  Returns with gate locked and value of associated user
      115     4390                       count stored in variable I.  The user count is accessed
      116     4391                       after a call to SSS$CACHEBP to ensure that the value is
      117     4392                       up-to-date.
      118     4393              DESCRIPTION:   ACQUIRE %LOCKs the indicated gate and then calls
      119     4394                       SSS$CACHEBP so that the indicated user-count will be accessed
      120     4395                       via a cache-bypass read.  If the user count is non-negative, all
      121     4396                       is well - ACQUIRE returns to the caller with the gate %LOCKed
      122     4397                       (and interrupts disabled).  If the user count is negative,
      123     4398                       someone is starting up or shutting down the performance monitor
      124     4399                       function - ACQUIRE %UNLOCKs the gate, calls SSR$REG to put the
      125     4400                       user to sleep for one second, and then repeats the whole process
      126     4401                       until the user count goes non-negative.  The routine that called
      127     4402                       ACQUIRE must %UNLOCK the gate when exclusive access to the data
      128     4403                       is no longer required (and in any case, before returning to the
      129     4404                       user!!).                                                       */
      130     4405
      131     4406    1   ACQUIRE: PROC (GATE, USER_COUNT);

   4406  1 000003   200026 741300       ACQUIRE      STX1  ! ERROR+1,,AUTO

      132     4407
      133     4408    2   DCL GATE UBIN WORD;                          /* Gate for access to USER_COUNT */
      134     4409    2   DCL USER_COUNT SBIN WORD;               /* # of users accessing perf. mon. fn */
      135     4410
      136     4411    3      DO FOREVER;

      137     4412
      138     4413              %LOCK (G#=GATE);

   4414  1 000004   200027 630500                    EPPR0   @GATE,,AUTO
         1 000005   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000006   000000 701000 xent               TSX1    HFC$LOCK
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:36   
         1 000007   000000 011000                    NOP     0

      139     4416
      140     4417    3         CALL SSS$CACHEBP;

   4417  1 000010   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000011   000000 701000 xent               TSX1    SSS$CACHEBP
         1 000012   000000 011000                    NOP     0

      141     4418
      142     4419    3         I = USER_COUNT;

   4419  1 000013   200030 470500                    LDP0    @USER_COUNT,,AUTO
         1 000014   000000 235100                    LDA     0,,PR0
         1 000015   200005 755100                    STA     I,,AUTO

      143     4420
      144     4421    3         CALL SSS$CACHE;

   4421  1 000016   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000017   000000 701000 xent               TSX1    SSS$CACHE
         1 000020   000000 011000                    NOP     0

      145     4422
      146     4423    3         IF I >= 0

   4423  1 000021   200005 235100                    LDA     I,,AUTO
         1 000022   000025 604000 1                  TMI     s:4427

      147     4424    3           THEN
      148     4425    3            RETURN;

   4425  1 000023   200026 221300                    LDX1  ! ERROR+1,,AUTO
         1 000024   000001 702211                    TSX2  ! 1,X1

      149     4426              %UNLOCK (G#=GATE);

PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:37   
   4427  1 000025   200027 630500                    EPPR0   @GATE,,AUTO
         1 000026   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000027   000000 701000 xent               TSX1    HFC$UNLOCK
         1 000030   000000 011000                    NOP     0

      150     4429
      151     4430    3         CALL SSR$REG (%SS_SL, , 1);                       /* sleep for 1 second */

   4430  1 000031   000001 236000 2                  LDQ     1
         1 000032   200034 756100                    STQ     @AVAIL_SIZE+3,,AUTO
         1 000033   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000034   000002 235000 2                  LDA     2
         1 000035   200032 757100                    STAQ    @AVAIL_SIZE+1,,AUTO
         1 000036   200032 630500                    EPPR0   @AVAIL_SIZE+1,,AUTO
         1 000037   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000040   000000 701000 xent               TSX1    SSR$REG
         1 000041   000000 011000                    NOP     0

      152     4431
      153     4432    3         END /* DO FOREVER */;

   4432  1 000042   000004 710000 1                  TRA     s:4414

      154     4433
      155     4434    2   END ACQUIRE;
      156     4435        %EJECT;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:38   
      157     4436        /*I*  NAME:    TEST_BUFFER
      158     4437              PURPOSE: Ensures that user's buffer is big enough for PM data
      159     4438              CALL:    CALL TEST_BUFFER(parameter_stack_number,
      160     4439                             required_size, avail_size);
      161     4440
      162     4441              DESCRIPTION:   TEST_BUFFER is called by the various "get performance
      163     4442                    monitor data" routines to ensure that the user passed us a
      164     4443                    big enough data buffer.  The caller should indicate which vector
      165     4444                    is to be checked (usually PS0) and the number of words that
      166     4445                    are necessary for storing all of the indicated data.  TEST_BUFFER
      167     4446                    will call HFF$DSIZE to determine the actual size of the buffer;
      168     4447                    if it's less than what is actually required, a flag will be
      169     4448                    set indicating that the user should receive a zero-severity
      170     4449                    ALTRET upon return from the PMME, and the caller is passed the
      171     4450                    actual size of the user's buffer.  TEST_BUFFER will also call
      172     4451                    SSS$BLOCK to ensure that the remainder of this M$GETxxx service
      173     4452                    gets run on the master CPU (to avoid certain strange data-
      174     4453                    messup problems even when everything is gated).                   */
      175     4454
      176     4455    1   TEST_BUFFER: PROC (PARAMETER_NUMBER, NEEDED_SIZE, AVAIL_SIZE);

   4455  1 000043   200026 741300       TEST_BUFFER  STX1  ! ERROR+1,,AUTO

      177     4456
      178     4457    2   DCL PARAMETER_NUMBER UBIN WORD;
      179     4458    2   DCL NEEDED_SIZE UBIN WORD;
      180     4459    2   DCL AVAIL_SIZE UBIN WORD;
      181     4460
      182     4461    2      CALL HFF$DSIZ (PARAMETER_NUMBER, AVAIL_SIZE);

   4461  1 000044   200031 236100                    LDQ     @AVAIL_SIZE,,AUTO
         1 000045   200027 235100                    LDA     @PARAMETER_NUMBER,,AUTO
         1 000046   200032 757100                    STAQ    @AVAIL_SIZE+1,,AUTO
         1 000047   200032 630500                    EPPR0   @AVAIL_SIZE+1,,AUTO
         1 000050   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000051   000000 701000 xent               TSX1    HFF$DSIZ
         1 000052   000000 011000                    NOP     0
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:39   

      183     4462
      184     4463    2      AVAIL_SIZE = AVAIL_SIZE / 4;

   4463  1 000053   200031 470500                    LDP0    @AVAIL_SIZE,,AUTO
         1 000054   000000 236100                    LDQ     0,,PR0
         1 000055   000002 772000                    QRL     2
         1 000056   000000 756100                    STQ     0,,PR0

      185     4464
      186     4465    2      IF AVAIL_SIZE < NEEDED_SIZE

   4465  1 000057   200030 471500                    LDP1    @NEEDED_SIZE,,AUTO
         1 000060   100000 116100                    CMPQ    0,,PR1
         1 000061   000065 603000 1                  TRC     s:4471

      187     4466    2        THEN
      188     4467    2         TOO_SMALL = %YES#;

   4467  1 000062   400000 236003                    LDQ     -131072,DU
         1 000063   200013 756100                    STQ     TOO_SMALL,,AUTO
         1 000064   000070 710000 1                  TRA     s:4475

      189     4468
      190     4469    3        ELSE DO;

      191     4470
      192     4471    3         TOO_SMALL = %NO#;

   4471  1 000065   200013 450100                    STZ     TOO_SMALL,,AUTO

      193     4472    3         AVAIL_SIZE = NEEDED_SIZE;

   4472  1 000066   100000 235100                    LDA     0,,PR1
         1 000067   000000 755100                    STA     0,,PR0

      194     4473    3         END;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:40   

      195     4474
      196     4475    2      CALL SSS$BLOCK;                              /* Force user onto master CPU */

   4475  1 000070   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000071   000000 701000 xent               TSX1    SSS$BLOCK
         1 000072   000000 011000                    NOP     0

      197     4476
      198     4477    2      RETURN;

   4477  1 000073   200026 221300                    LDX1  ! ERROR+1,,AUTO
         1 000074   000001 702211                    TSX2  ! 1,X1
         1 000075   000100 710000 1                  TRA     s:4495

      199     4478
      200     4479    2   END TEST_BUFFER;
      201     4480        %EJECT;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:41   
      202     4481    1   PHA$SMOUSE: ENTRY;

   4481  1 000076   000000 700200 xent  PHA$SMOUSE   TSX0  ! X66_AUTO_0
         1 000077   000040 000000                    ZERO    32,0

      203     4482        /*F* NAME:     PHA$SMOUSE
      204     4483             PURPOSE:  Set up data pages for PMME monitoring.
      205     4484                                                                              */
      206     4485        /*D* NAME:     PHA$SMOUSE
      207     4486             CALL:     Call PHA$SMOUSE;
      208     4487             INTERFACE: MMD$STLPP, MMD$RSPP, MME$CVM.
      209     4488             ENVIRONMENT:  Extended performance monitor authorization is required.
      210     4489             INPUT:    None to speak of
      211     4490             OUTPUT:   Pmme monitoring tables initialized.
      212     4491             DESCRIPTION: Routine is called to steal and initialize the data
      213     4492                       area used for PMME monitoring.
      214     4493                                                                              */
      215     4494
      216     4495    1      CALL ACQUIRE (PH_MOUSE_LOCK, PH_MOUSE_USERS);

   4495  1 000100   000003 236000 2                  LDQ     3
         1 000101   200030 756100                    STQ     @PARAMETER_NUMBER+1,,AUTO
         1 000102   000004 236000 2                  LDQ     4
         1 000103   200027 756100                    STQ     ERROR+2,,AUTO
         1 000104   000003 701000 1                  TSX1    ACQUIRE
         1 000105   000000 011000                    NOP     0

      217     4496
      218     4497    1      IF I > 0

   4497  1 000106   200005 235100                    LDA     I,,AUTO
         1 000107   000127 604400 1                  TMOZ    s:4519

      219     4498    2        THEN DO;

      220     4499
      221     4500              %UNLOCK (G#=PH_MOUSE_LOCK);
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:42   

   4501  1 000110   000004 630400 2                  EPPR0   4
         1 000111   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000112   000000 701000 xent               TSX1    HFC$UNLOCK
         1 000113   000000 011000                    NOP     0

      222     4503              %P_ERR (CODE=%E$CANT_START);

   4505  1 000114   000000 236000 0                  LDQ     MY_ERROR
         1 000115   200025 756100                    STQ     ERROR,,AUTO

   4506  1 000116   000005 376000 2                  ANQ     5
         1 000117   016730 276007                    ORQ     7640,DL
         1 000120   200025 756100                    STQ     ERROR,,AUTO

   4507  1 000121   200025 236100                    LDQ     ERROR,,AUTO
         1 000122   000000 470400 xsym               LDP0    B$JIT$
         1 000123   000012 756100                    STQ     10,,PR0

   4508  1 000124   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000125   000000 701000 xent               TSX1    UDB$PMMEXIT
         1 000126   000000 011000                    NOP     0

      223     4511        /*E*  ERROR:   PHA-E$CANT_START-E
      224     4512        MESSAGE0: I can't start that feature - it's already started!
      225     4513        MESSAGE1: The special performance monitoring feature that you requested
      226     4514                  was already in effect.  If you wish to re-initialize the feature,
      227     4515                  you must STOP it and then START it again.
      228     4516        */
      229     4517    2         END;

      230     4518
      231     4519    1      PH_MOUSE_USERS = -1;

   4519  1 000127   000001 335007                    LCA     1,DL
         1 000130   000000 755000 xsym               STA     PH_MOUSE_USERS

PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:43   
      232     4520
      233     4521           %UNLOCK (G#=PH_MOUSE_LOCK);

   4522  1 000131   000004 630400 2                  EPPR0   4
         1 000132   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000133   000000 701000 xent               TSX1    HFC$UNLOCK
         1 000134   000000 011000                    NOP     0

      234     4524
      235     4525    1      PH_MOUSE_USER_NUMBER = B$PS0$ -> FPT$SMOUSE_V.SYSID;

   4525  1 000135   000000 470400 xsym               LDP0    B$PS0$
         1 000136   000000 235100                    LDA     0,,PR0
         1 000137   000000 755000 xsym               STA     PH_MOUSE_USER_NUMBER

      236     4526
      237     4527    2      DO I = 0 TO PH_MOUSE_PAGES;

   4527  1 000140   200005 450100                    STZ     I,,AUTO

      238     4528
      239     4529    2         CALL MMD$STLPP(PH_MUS_PAGES(I), %MONWSQ)

   4529  1 000141   000001 236000 2                  LDQ     1
         1 000142   200033 756100                    STQ     @AVAIL_SIZE+2,,AUTO
         1 000143   200005 720100                    LXL0    I,,AUTO
         1 000144   000000 630410 xsym               EPPR0   PH_MUS_PAGES,X0
         1 000145   200032 450500                    STP0    @AVAIL_SIZE+1,,AUTO
         1 000146   200032 630500                    EPPR0   @AVAIL_SIZE+1,,AUTO
         1 000147   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000150   000000 701000 xent               TSX1    MMD$STLPP
         1 000151   000302 702000 1                  TSX2    NO_MOUSE_PAGE

      240     4530    2          ALTRET(NO_MOUSE_PAGE);
      241     4531
      242     4532    2         CALL MME$CVM(%MONWSQ, %MOUSELO + I, PH_MUS_PAGES(I), ERROR)

PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:44   
   4532  1 000152   200005 235100                    LDA     I,,AUTO
         1 000153   000540 035007                    ADLA    352,DL
         1 000154   200032 755100                    STA     @AVAIL_SIZE+1,,AUTO
         1 000155   200025 630500                    EPPR0   ERROR,,AUTO
         1 000156   200037 450500                    STP0    @AVAIL_SIZE+6,,AUTO
         1 000157   200005 720100                    LXL0    I,,AUTO
         1 000160   000000 631410 xsym               EPPR1   PH_MUS_PAGES,X0
         1 000161   200036 451500                    STP1    @AVAIL_SIZE+5,,AUTO
         1 000162   200032 633500                    EPPR3   @AVAIL_SIZE+1,,AUTO
         1 000163   200035 453500                    STP3    @AVAIL_SIZE+4,,AUTO
         1 000164   000001 236000 2                  LDQ     1
         1 000165   200034 756100                    STQ     @AVAIL_SIZE+3,,AUTO
         1 000166   200034 630500                    EPPR0   @AVAIL_SIZE+3,,AUTO
         1 000167   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000170   000000 701000 xent               TSX1    MME$CVM
         1 000171   001564 702000 1                  TSX2    CVM_ERROR

      243     4533    2          ALTRET(CVM_ERROR);
      244     4534
      245     4535    2         END;

   4535  1 000172   200005 054100                    AOS     I,,AUTO
         1 000173   000141 604400 1                  TMOZ    s:4529

      246     4536
      247     4537    2      DO I = 0 TO 1024 * PH_MOUSE_PAGES + 1023;

   4537  1 000174   200005 450100                    STZ     I,,AUTO
         1 000175   000202 710000 1                  TRA     s:4539+1

      248     4538    2         B$MOUSE$ -> WORD_(I) = 0;

   4538  1 000176   000000 470400 xsym               LDP0    B$MOUSE$
         1 000177   200005 720100                    LXL0    I,,AUTO
         1 000200   000000 450110                    STZ     0,X0,PR0

      249     4539    2         END;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:45   

   4539  1 000201   200005 054100                    AOS     I,,AUTO
         1 000202   200005 235100                    LDA     I,,AUTO
         1 000203   001777 115007                    CMPA    1023,DL
         1 000204   000176 604400 1                  TMOZ    s:4538

      250     4540
      251     4541    1      PH_CPU_MOUSED = %NO#;

   4541  1 000205   000000 100400                    MLR     fill='000'O
         1 000206   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000207   000000 000020 xsym               ADSC9   PH_CPU_MOUSED            cn=0,n=16

      252     4542
      253     4543    1      PH_CPU_MOUSED(S_PNO) = %YES#;

   4543  1 000210   400000 236003                    LDQ     -131072,DU
         1 000211   000000 720000 xsym               LXL0    S_PNO
         1 000212   000000 756010 xsym               STQ     PH_CPU_MOUSED,X0

      254     4544
      255     4545    1      I = POFFW(ADDR(PH_MOUSE_TBL.PMME), ADDR(PH_MOUSE_TBL));

   4545  1 000213   000000 236000 xsym               LDQ     B$MOUSE$
         1 000214   000022 772000                    QRL     18
         1 000215   200032 756100                    STQ     @AVAIL_SIZE+1,,AUTO
         1 000216   000000 236000 xsym               LDQ     B$MOUSE$
         1 000217   000041 036003                    ADLQ    33,DU
         1 000220   000022 772000                    QRL     18
         1 000221   200032 136100                    SBLQ    @AVAIL_SIZE+1,,AUTO
         1 000222   200005 756100                    STQ     I,,AUTO

      256     4546
      257     4547    2      DO J = 0 TO %MAX_FCG#;

   4547  1 000223   200006 450100                    STZ     J,,AUTO

PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:46   
      258     4548
      259     4549    2         PH_MOUSE_TBL.FCG.OFFSET(J) = I;

   4549  1 000224   200005 720100                    LXL0    I,,AUTO
         1 000225   000000 470400 xsym               LDP0    B$MOUSE$
         1 000226   200006 721100                    LXL1    J,,AUTO
         1 000227   000002 740111                    STX0    2,X1,PR0

      260     4550    2         PH_MOUSE_TBL.FCG.MAX_FPT(J) = UD_MAXTAB(J);

   4550  1 000230   000000 470400 xsym               LDP0    B$MOUSE$
         1 000231   000000 236011 xsym               LDQ     UD_MAXTAB,X1
         1 000232   000002 676111                    ERQ     2,X1,PR0
         1 000233   377777 376007                    ANQ     131071,DL
         1 000234   000002 656111                    ERSQ    2,X1,PR0

      261     4551
      262     4552    2         IF J = %FCG_FM1# OR J = %FCG_FM2#

   4552  1 000235   200006 235100                    LDA     J,,AUTO
         1 000236   000004 115007                    CMPA    4,DL
         1 000237   000242 600000 1                  TZE     s:4555
         1 000240   000005 115007                    CMPA    5,DL
         1 000241   000253 601000 1                  TNZ     s:4561

      263     4553    3           THEN DO;

      264     4554
      265     4555    3            I = I + (UD_MAXTAB(J) + 1) * (MAX_ASN + 1) *

   4555  1 000242   000000 236011 xsym               LDQ     UD_MAXTAB,X1
         1 000243   000030 402007                    MPY     24,DL
         1 000244   200005 036100                    ADLQ    I,,AUTO
         1 000245   000030 036007                    ADLQ    24,DL
         1 000246   200005 756100                    STQ     I,,AUTO

      266     4556    3             SIZEW(PH_MOUSE_ENTRY);
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:47   
      267     4557    3            PH_MOUSE_TBL.FCG.BREAKDOWN(J) = '1'B;

   4557  1 000247   000000 470400 xsym               LDP0    B$MOUSE$
         1 000250   400000 236007                    LDQ     -131072,DL
         1 000251   000002 256111                    ORSQ    2,X1,PR0

      268     4558    3            END;

   4558  1 000252   000260 710000 1                  TRA     s:4563

      269     4559
      270     4560    2           ELSE
      271     4561    2            I = I + (UD_MAXTAB(J) + 1) * SIZEW(PH_MOUSE_ENTRY);

   4561  1 000253   000000 236011 xsym               LDQ     UD_MAXTAB,X1
         1 000254   000003 402007                    MPY     3,DL
         1 000255   200005 036100                    ADLQ    I,,AUTO
         1 000256   000003 036007                    ADLQ    3,DL
         1 000257   200005 756100                    STQ     I,,AUTO

      272     4562
      273     4563    2         END;

   4563  1 000260   200006 235100                    LDA     J,,AUTO
         1 000261   000001 035007                    ADLA    1,DL
         1 000262   200006 755100                    STA     J,,AUTO
         1 000263   000020 115007                    CMPA    16,DL
         1 000264   000224 602000 1                  TNC     s:4549

      274     4564
      275     4565    1      PH_MOUSE_TBL.TABLE_SIZE = I;

   4565  1 000265   200005 236100                    LDQ     I,,AUTO
         1 000266   000000 470400 xsym               LDP0    B$MOUSE$
         1 000267   000000 756100                    STQ     0,,PR0

      276     4566    1      PH_MOUSE_TBL.FCGS = %MAX_FCG#;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:48   

   4566  1 000270   000017 235007                    LDA     15,DL
         1 000271   000000 470400 xsym               LDP0    B$MOUSE$
         1 000272   000001 755100                    STA     1,,PR0

      277     4567
      278     4568    1      IF I >= 1024 * (PH_MOUSE_PAGES + 1)

   4568  1 000273   002000 116007                    CMPQ    1024,DL
         1 000274   000277 604000 1                  TMI     s:4579

      279     4569    1        THEN CALL SC_PHA216;

   4569  1 000275   000000 713400 xsym               CLIMB   SC_PHA216
         1 000276   000000 600000 xsid               climb   nvectors=         0

      280     4570
      281     4571        /*S*  SCREECH_CODE:  PHA-S$SC216
      282     4572              TYPE:          SCREECH
      283     4573              MESSAGE:    MOUSE tables exceed available space.
      284     4574              DESCRIPTION: The space required for the MOUSE data exceeds the
      285     4575                          space available in the stolen pages.  Recompile the PH
      286     4576                          modules with a higher stolen-page limit.
      287     4577        */
      288     4578
      289     4579    1      PH_MOUSE_USERS = 1;

   4579  1 000277   000001 235007                    LDA     1,DL
         1 000300   000000 755000 xsym               STA     PH_MOUSE_USERS

      290     4580
      291     4581    1      RETURN;

   4581  1 000301   000000 702200 xent               TSX2  ! X66_ARET

      292     4582
      293     4583    1   NO_MOUSE_PAGE:
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:49   
      294     4584
      295     4585    2      DO J = 0 TO I - 1;

   4585  1 000302   200006 450100       NO_MOUSE_PA* STZ     J,,AUTO
         1 000303   000341 710000 1                  TRA     s:4595+3

      296     4586
      297     4587    2         CALL MME$CVM(%MONWSQ, %MOUSELO + J, NULL_PAGE, ERROR)

   4587  1 000304   200006 235100                    LDA     J,,AUTO
         1 000305   000540 035007                    ADLA    352,DL
         1 000306   200032 755100                    STA     @AVAIL_SIZE+1,,AUTO
         1 000307   200025 630500                    EPPR0   ERROR,,AUTO
         1 000310   200037 450500                    STP0    @AVAIL_SIZE+6,,AUTO
         1 000311   000006 236000 2                  LDQ     6
         1 000312   200036 756100                    STQ     @AVAIL_SIZE+5,,AUTO
         1 000313   200032 631500                    EPPR1   @AVAIL_SIZE+1,,AUTO
         1 000314   200035 451500                    STP1    @AVAIL_SIZE+4,,AUTO
         1 000315   000001 236000 2                  LDQ     1
         1 000316   200034 756100                    STQ     @AVAIL_SIZE+3,,AUTO
         1 000317   200034 630500                    EPPR0   @AVAIL_SIZE+3,,AUTO
         1 000320   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000321   000000 701000 xent               TSX1    MME$CVM
         1 000322   001564 702000 1                  TSX2    CVM_ERROR

      298     4588    2          ALTRET(CVM_ERROR);
      299     4589
      300     4590    2         CALL MMD$RSPP(PH_MUS_PAGES(J), %MONWSQ)

   4590  1 000323   000001 236000 2                  LDQ     1
         1 000324   200033 756100                    STQ     @AVAIL_SIZE+2,,AUTO
         1 000325   200006 720100                    LXL0    J,,AUTO
         1 000326   000000 630410 xsym               EPPR0   PH_MUS_PAGES,X0
         1 000327   200032 450500                    STP0    @AVAIL_SIZE+1,,AUTO
         1 000330   200032 630500                    EPPR0   @AVAIL_SIZE+1,,AUTO
         1 000331   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000332   000000 701000 xent               TSX1    MMD$RSPP
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:50   
         1 000333   001571 702000 1                  TSX2    PAGES_TRAMPLED

      301     4591    2          ALTRET(PAGES_TRAMPLED);
      302     4592
      303     4593    2         PH_MUS_PAGES(J) = 0;

   4593  1 000334   200006 720100                    LXL0    J,,AUTO
         1 000335   000000 450010 xsym               STZ     PH_MUS_PAGES,X0

      304     4594
      305     4595    2         END;

   4595  1 000336   200006 235100                    LDA     J,,AUTO
         1 000337   000001 035007                    ADLA    1,DL
         1 000340   200006 755100                    STA     J,,AUTO
         1 000341   200006 236100                    LDQ     J,,AUTO
         1 000342   000345 604000 1                  TMI     s:4597
         1 000343   200005 116100                    CMPQ    I,,AUTO
         1 000344   000304 604000 1                  TMI     s:4587

      306     4596
      307     4597    1      PH_MOUSE_USERS = 0;

   4597  1 000345   000000 450000 xsym               STZ     PH_MOUSE_USERS

      308     4598
      309     4599           %P_ERR(CODE=%E$ALLSTOLEN);

   4601  1 000346   000000 236000 0                  LDQ     MY_ERROR
         1 000347   200025 756100                    STQ     ERROR,,AUTO

   4602  1 000350   000005 376000 2                  ANQ     5
         1 000351   011450 276007                    ORQ     4904,DL
         1 000352   200025 756100                    STQ     ERROR,,AUTO

   4603  1 000353   200025 236100                    LDQ     ERROR,,AUTO
         1 000354   000000 470400 xsym               LDP0    B$JIT$
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:51   
         1 000355   000012 756100                    STQ     10,,PR0

   4604  1 000356   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000357   000000 701000 xent               TSX1    UDB$PMMEXIT
         1 000360   000000 011000                    NOP     0

   4605  1 000361   000364 710000 1                  TRA     s:4628

      310     4607        /*E*  ERROR:   PHA-E$ALLSTOLEN
      311     4608        MESSAGE0: No stealable pages are available.
      312     4609        MESSAGE1: I couldn't steal enough memory to start up the Performance
      313     4610                  Monitor function that you requested.  Please try again later.
      314     4611        */
      315     4612
      316     4613        %EJECT;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:52   
      317     4614    1   PHA$XMOUSE: ENTRY;

   4614  1 000362   000000 700200 xent  PHA$XMOUSE   TSX0  ! X66_AUTO_0
         1 000363   000040 000000                    ZERO    32,0

      318     4615        /*F* NAME:     PHA$XMOUSE
      319     4616             PURPOSE:  Return data pages for PMME monitoring.
      320     4617                                                                              */
      321     4618        /*D* NAME:     PHA$XMOUSE
      322     4619             CALL:     Call PHA$XMOUSE;
      323     4620             INTERFACE: MMD$RSPP, MME$CVM.
      324     4621             ENVIRONMENT:  Extended performance monitor authorization is required.
      325     4622             INPUT:    None to speak of
      326     4623             OUTPUT:   Pmme monitoring tables returned to system.
      327     4624             DESCRIPTION: Routine is called to return to the system the data
      328     4625                       area used for PMME monitoring.
      329     4626                                                                              */
      330     4627
      331     4628    1      CALL ACQUIRE (PH_MOUSE_LOCK, PH_MOUSE_USERS);

   4628  1 000364   000003 236000 2                  LDQ     3
         1 000365   200030 756100                    STQ     @PARAMETER_NUMBER+1,,AUTO
         1 000366   000004 236000 2                  LDQ     4
         1 000367   200027 756100                    STQ     ERROR+2,,AUTO
         1 000370   000003 701000 1                  TSX1    ACQUIRE
         1 000371   000000 011000                    NOP     0

      332     4629
      333     4630    1      IF PH_MOUSE_USERS = 0

   4630  1 000372   000000 235000 xsym               LDA     PH_MOUSE_USERS
         1 000373   000413 601000 1                  TNZ     s:4651

      334     4631    2        THEN DO;

      335     4632
      336     4633              %UNLOCK (G#=PH_MOUSE_LOCK);
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:53   

   4634  1 000374   000004 630400 2                  EPPR0   4
         1 000375   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000376   000000 701000 xent               TSX1    HFC$UNLOCK
         1 000377   000000 011000                    NOP     0

      337     4636              %P_ERR (CODE=%E$CANT_STOP);

   4638  1 000400   000000 236000 0                  LDQ     MY_ERROR
         1 000401   200025 756100                    STQ     ERROR,,AUTO

   4639  1 000402   000005 376000 2                  ANQ     5
         1 000403   016740 276007                    ORQ     7648,DL
         1 000404   200025 756100                    STQ     ERROR,,AUTO

   4640  1 000405   200025 236100                    LDQ     ERROR,,AUTO
         1 000406   000000 470400 xsym               LDP0    B$JIT$
         1 000407   000012 756100                    STQ     10,,PR0

   4641  1 000410   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000411   000000 701000 xent               TSX1    UDB$PMMEXIT
         1 000412   000000 011000                    NOP     0

      338     4644        /*E*  ERROR:   PHA-E$CANT_STOP-E
      339     4645        MESSAGE0: I can't stop that feature - it's not running!
      340     4646        MESSAGE1: The special performance monitoring feature that you asked me to
      341     4647                  stop was not active - therefore, there is nothing for me to stop!
      342     4648        */
      343     4649    2         END;

      344     4650
      345     4651    1      PH_MOUSE_USERS = -1;

   4651  1 000413   000001 335007                    LCA     1,DL
         1 000414   000000 755000 xsym               STA     PH_MOUSE_USERS

      346     4652
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:54   
      347     4653           %UNLOCK (G#=PH_MOUSE_LOCK);

   4654  1 000415   000004 630400 2                  EPPR0   4
         1 000416   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000417   000000 701000 xent               TSX1    HFC$UNLOCK
         1 000420   000000 011000                    NOP     0

      348     4656
      349     4657    2      DO I = 0 TO PH_MOUSE_PAGES;

   4657  1 000421   200005 450100                    STZ     I,,AUTO

      350     4658
      351     4659    2         CALL MME$CVM(%MONWSQ, %MOUSELO + I, NULL_PAGE, ERROR)

   4659  1 000422   200005 235100                    LDA     I,,AUTO
         1 000423   000540 035007                    ADLA    352,DL
         1 000424   200032 755100                    STA     @AVAIL_SIZE+1,,AUTO
         1 000425   200025 630500                    EPPR0   ERROR,,AUTO
         1 000426   200037 450500                    STP0    @AVAIL_SIZE+6,,AUTO
         1 000427   000006 236000 2                  LDQ     6
         1 000430   200036 756100                    STQ     @AVAIL_SIZE+5,,AUTO
         1 000431   200032 631500                    EPPR1   @AVAIL_SIZE+1,,AUTO
         1 000432   200035 451500                    STP1    @AVAIL_SIZE+4,,AUTO
         1 000433   000001 236000 2                  LDQ     1
         1 000434   200034 756100                    STQ     @AVAIL_SIZE+3,,AUTO
         1 000435   200034 630500                    EPPR0   @AVAIL_SIZE+3,,AUTO
         1 000436   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000437   000000 701000 xent               TSX1    MME$CVM
         1 000440   001564 702000 1                  TSX2    CVM_ERROR

      352     4660    2          ALTRET (CVM_ERROR);
      353     4661
      354     4662    2         CALL MMD$RSPP(PH_MUS_PAGES(I), %MONWSQ)

   4662  1 000441   000001 236000 2                  LDQ     1
         1 000442   200033 756100                    STQ     @AVAIL_SIZE+2,,AUTO
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:55   
         1 000443   200005 720100                    LXL0    I,,AUTO
         1 000444   000000 630410 xsym               EPPR0   PH_MUS_PAGES,X0
         1 000445   200032 450500                    STP0    @AVAIL_SIZE+1,,AUTO
         1 000446   200032 630500                    EPPR0   @AVAIL_SIZE+1,,AUTO
         1 000447   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000450   000000 701000 xent               TSX1    MMD$RSPP
         1 000451   001571 702000 1                  TSX2    PAGES_TRAMPLED

      355     4663    2          ALTRET(PAGES_TRAMPLED);
      356     4664
      357     4665    2         PH_MUS_PAGES(I) = 0;

   4665  1 000452   200005 720100                    LXL0    I,,AUTO
         1 000453   000000 450010 xsym               STZ     PH_MUS_PAGES,X0

      358     4666
      359     4667    2         END;

   4667  1 000454   200005 054100                    AOS     I,,AUTO
         1 000455   000422 604400 1                  TMOZ    s:4659

      360     4668
      361     4669    1      PH_MOUSE_USERS = 0;

   4669  1 000456   000000 450000 xsym               STZ     PH_MOUSE_USERS

      362     4670
      363     4671    1      RETURN;

   4671  1 000457   000000 702200 xent               TSX2  ! X66_ARET

      364     4672
      365     4673        %EJECT;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:56   
      366     4674    1   PHA$GETMOUSE: ENTRY;

   4674  1 000460   000000 700200 xent  PHA$GETMOUSE TSX0  ! X66_AUTO_0
         1 000461   000040 000000                    ZERO    32,0

      367     4675        /*F* NAME:     PHA$GETMOUSE
      368     4676             PURPOSE:  Copy the MOUSE data area into a buffer pointed
      369     4677                       to by the 0th element of the user's parameter
      370     4678                       stack.
      371     4679                                                                              */
      372     4680        /*D* NAME:     PHA$GETMOUSE
      373     4681             CALL:     Call PHA$GETMOUSE;
      374     4682             INTERFACE: HFD$LOCK, HFD$UNLOCK, HFC$BYPASS
      375     4683             ENVIRONMENT:  Needs regular performance monitor FAUTH.
      376     4684             OUTPUT:   The user's buffer contains a copy of the MOUSE
      377     4685                       data area, if it exists.
      378     4686             DESCRIPTION:  This entry point is called in response to an
      379     4687                       M$GETMOUSE PMME request.  It will copy the PMME
      380     4688                       monitoring data segment into a buffer indicated by
      381     4689                       the RESULTS vector in the user's M$GETMOUSE FPT.  If
      382     4690                       the buffer isn't large enough, the altreturn from the
      383     4691                       PMME will be taken with an error code of PHA-E$LD and
      384     4692                       a zero severity level.
      385     4693                                                                                      */
      386     4694
      387     4695    1      CALL TEST_BUFFER(0, 1024 * (PH_MOUSE_PAGES + 1),

   4695  1 000462   200012 630500                    EPPR0   UPPER_BOUND,,AUTO
         1 000463   200031 450500                    STP0    @NEEDED_SIZE+1,,AUTO
         1 000464   000010 236000 2                  LDQ     8
         1 000465   200030 756100                    STQ     @PARAMETER_NUMBER+1,,AUTO
         1 000466   000011 236000 2                  LDQ     9
         1 000467   200027 756100                    STQ     ERROR+2,,AUTO
         1 000470   000043 701000 1                  TSX1    TEST_BUFFER
         1 000471   000000 011000                    NOP     0

      388     4696    1       UPPER_BOUND);
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:57   
      389     4697
      390     4698    1      CALL ACQUIRE (PH_MOUSE_LOCK, PH_MOUSE_USERS);

   4698  1 000472   000003 236000 2                  LDQ     3
         1 000473   200030 756100                    STQ     @PARAMETER_NUMBER+1,,AUTO
         1 000474   000004 236000 2                  LDQ     4
         1 000475   200027 756100                    STQ     ERROR+2,,AUTO
         1 000476   000003 701000 1                  TSX1    ACQUIRE
         1 000477   000000 011000                    NOP     0

      391     4699
      392     4700    2      IF I = 0 THEN DO;

   4700  1 000500   200005 235100                    LDA     I,,AUTO
         1 000501   000521 601000 1                  TNZ     s:4720

      393     4701              %UNLOCK (G#=PH_MOUSE_LOCK);

   4702  1 000502   000004 630400 2                  EPPR0   4
         1 000503   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000504   000000 701000 xent               TSX1    HFC$UNLOCK
         1 000505   000000 011000                    NOP     0

      394     4704              %P_ERR(CODE=%E$NOMOUSE);

   4706  1 000506   000000 236000 0                  LDQ     MY_ERROR
         1 000507   200025 756100                    STQ     ERROR,,AUTO

   4707  1 000510   000005 376000 2                  ANQ     5
         1 000511   016670 276007                    ORQ     7608,DL
         1 000512   200025 756100                    STQ     ERROR,,AUTO

   4708  1 000513   200025 236100                    LDQ     ERROR,,AUTO
         1 000514   000000 470400 xsym               LDP0    B$JIT$
         1 000515   000012 756100                    STQ     10,,PR0

   4709  1 000516   000002 631400 xsym               EPPR1   B_VECTNIL+2
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:58   
         1 000517   000000 701000 xent               TSX1    UDB$PMMEXIT
         1 000520   000000 011000                    NOP     0

      395     4712    2         END;

      396     4713
      397     4714        /*E*  ERROR:   PHA-E$NOMOUSE-C
      398     4715        MESSAGE0: Sorry - MoUsE isn't running.
      399     4716        MESSAGE1: I can't honor your M$GETMOUSE service request - MoUsE isn't
      400     4717                  running at the moment.
      401     4718        */
      402     4719
      403     4720    1      BLOQ_LEN = UPPER_BOUND * 4;

   4720  1 000521   200012 235100                    LDA     UPPER_BOUND,,AUTO
         1 000522   000002 735000                    ALS     2
         1 000523   200014 755100                    STA     BLOQ_LEN,,AUTO

      404     4721
      405     4722    1      B$PS0$ -> BLOQ = B$MOUSE$ -> BLOQ;

   4722  1 000524   000000 470400 xsym               LDP0    B$MOUSE$
         1 000525   000000 620005                    EAX0    0,AL
         1 000526   000000 471400 xsym               LDP1    B$PS0$
         1 000527   200014 721100                    LXL1    BLOQ_LEN,,AUTO
         1 000530   040140 100540                    MLR     fill='040'O
         1 000531   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         1 000532   100000 000011                    ADSC9   0,,PR1                   cn=0,n=*X1

      406     4723
      407     4724           %UNLOCK (G#=PH_MOUSE_LOCK);

   4725  1 000533   000004 630400 2                  EPPR0   4
         1 000534   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000535   000000 701000 xent               TSX1    HFC$UNLOCK
         1 000536   000000 011000                    NOP     0

PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:59   
      408     4727
      409     4728    1      IF TOO_SMALL THEN

   4728  1 000537   200013 235100                    LDA     TOO_SMALL,,AUTO
         1 000540   000554 600000 1                  TZE     s:4744

      410     4729              %P_ERR(CODE=%E$LD);

   4731  1 000541   000000 236000 0                  LDQ     MY_ERROR
         1 000542   200025 756100                    STQ     ERROR,,AUTO

   4732  1 000543   000005 376000 2                  ANQ     5
         1 000544   000070 276007                    ORQ     56,DL
         1 000545   200025 756100                    STQ     ERROR,,AUTO

   4733  1 000546   200025 236100                    LDQ     ERROR,,AUTO
         1 000547   000000 470400 xsym               LDP0    B$JIT$
         1 000550   000012 756100                    STQ     10,,PR0

   4734  1 000551   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000552   000000 701000 xent               TSX1    UDB$PMMEXIT
         1 000553   000000 011000                    NOP     0

      411     4737        /*E*  ERROR:   PHA-E$LD-E
      412     4738        MESSAGE0: Lost data.
      413     4739        MESSAGE1: The buffer that you supplied wasn't large enough to hold all
      414     4740                  of the performance monitoring data available.  Partial data
      415     4741                  may have been transferred to your buffer anyhow.
      416     4742        */
      417     4743
      418     4744    1      RETURN;

   4744  1 000554   000000 702200 xent               TSX2  ! X66_ARET

      419     4745        %EJECT;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:60   
      420     4746    1   PHA$GETPM: ENTRY;

   4746  1 000555   000000 700200 xent  PHA$GETPM    TSX0  ! X66_AUTO_0
         1 000556   000040 000000                    ZERO    32,0

      421     4747        /*F*  NAME:    PHA$GETPM
      422     4748              PURPOSE: Copies the various performance monitoring data pointed to
      423     4749                    by entries in the P$TABLE table to a buffer passed by the user
      424     4750                    as the 0th parameter in his M$GETPM PMME.                         */
      425     4751
      426     4752        /*D*  NAME:    PHA$GETPM
      427     4753              INTERFACE:  HFF$DSIZE
      428     4754              CALL:    CALL PHA$GETPM
      429     4755              ENVIRONMENT:   FAUTH needed - Performance Monitor.
      430     4756              OUTPUT:     Part or all of available performance monitor data copied
      431     4757                       to user's buffer.
      432     4758              DESCRIPTION:   Called to copy the performance monitoring data from
      433     4759                       its various homes in the monitor data segment to a buffer
      434     4760                       provided by the user.  If the buffer is too small, we'll
      435     4761                       copy as much of the data as possible and return an error
      436     4762                       (PHA-E$LD) to the user's ALTRET address.
      437     4763                                                                                      */
      438     4764
      439     4765    1      CALL TEST_BUFFER(0, 128*1024, UPPER_BOUND);

   4765  1 000557   200012 630500                    EPPR0   UPPER_BOUND,,AUTO
         1 000560   200031 450500                    STP0    @NEEDED_SIZE+1,,AUTO
         1 000561   000013 236000 2                  LDQ     11
         1 000562   200030 756100                    STQ     @PARAMETER_NUMBER+1,,AUTO
         1 000563   000011 236000 2                  LDQ     9
         1 000564   200027 756100                    STQ     ERROR+2,,AUTO
         1 000565   000043 701000 1                  TSX1    TEST_BUFFER
         1 000566   000000 011000                    NOP     0

      440     4766
      441     4767    1      TOO_SMALL = '0'B;

PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:61   
   4767  1 000567   200013 450100                    STZ     TOO_SMALL,,AUTO

      442     4768
      443     4769    1      OFFSET = 0;

   4769  1 000570   200016 450100                    STZ     OFFSET,,AUTO

      444     4770    1      ENTRY_NUM = 0;

   4770  1 000571   200015 450100                    STZ     ENTRY_NUM,,AUTO

      445     4771
      446     4772    1      CALL PMC$FIXDEV;                           /* Clean up the DCT table stuff */

   4772  1 000572   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000573   000000 701000 xent               TSX1    PMC$FIXDEV
         1 000574   000000 011000                    NOP     0

      447     4773
      448     4774    1      CALL SSS$CURTIME(P_NOW);

   4774  1 000575   000014 630400 2                  EPPR0   12
         1 000576   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000577   000000 701000 xent               TSX1    SSS$CURTIME
         1 000600   000000 011000                    NOP     0

      449     4775
      450     4776           %LOCK (G#=P_GATE);

   4777  1 000601   000015 630400 2                  EPPR0   13
         1 000602   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000603   000000 701000 xent               TSX1    HFC$LOCK
         1 000604   000000 011000                    NOP     0

      451     4779
      452     4780    1      CALL HFC$CACHECLR;                   /* clear cache for following accesses */

PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:62   
   4780  1 000605   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000606   000000 701000 xent               TSX1    HFC$CACHECLR
         1 000607   000000 011000                    NOP     0

      453     4781
      454     4782    2      DO I = 0 TO S_NSCPU;

   4782  1 000610   200005 450100                    STZ     I,,AUTO
         1 000611   000676 710000 1                  TRA     s:4805+1

      455     4783                                                            /* Update CPU-time values */
      456     4784    2         P_S_UXEQTIME(I)=S_UXEQTIME(I)+S_UXUSEC(I)/10000;

   4784  1 000612   200005 720100                    LXL0    I,,AUTO
         1 000613   000000 236010 xsym               LDQ     S_UXUSEC,X0
         1 000614   023420 506007                    DIV     10000,DL
         1 000615   000000 036010 xsym               ADLQ    S_UXEQTIME,X0
         1 000616   000000 756010 xsym               STQ     P_S_UXEQTIME,X0

      457     4785    2         P_S_USRVTIME(I)=S_USRVTIME(I)+S_USUSEC(I)/10000;

   4785  1 000617   000000 236010 xsym               LDQ     S_USUSEC,X0
         1 000620   023420 506007                    DIV     10000,DL
         1 000621   000000 036010 xsym               ADLQ    S_USRVTIME,X0
         1 000622   000000 756010 xsym               STQ     P_S_USRVTIME,X0

      458     4786    2         P_S_MXEQTIME(I)=S_MXEQTIME(I)+S_MXUSEC(I)/10000;

   4786  1 000623   000000 236010 xsym               LDQ     S_MXUSEC,X0
         1 000624   023420 506007                    DIV     10000,DL
         1 000625   000000 036010 xsym               ADLQ    S_MXEQTIME,X0
         1 000626   000000 756010 xsym               STQ     P_S_MXEQTIME,X0

      459     4787    2         P_S_MIDLTIME(I)=S_MIDLTIME(I)+S_MIDUSEC(I)/10000;

   4787  1 000627   000000 236010 xsym               LDQ     S_MIDUSEC,X0
         1 000630   023420 506007                    DIV     10000,DL
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:63   
         1 000631   000000 036010 xsym               ADLQ    S_MIDLTIME,X0
         1 000632   000000 756010 xsym               STQ     P_S_MIDLTIME,X0

      460     4788    2         P_S_MIDLWIO(I)=S_MIDLWIO(I)+S_MIIUSEC(I)/10000;

   4788  1 000633   000000 236010 xsym               LDQ     S_MIIUSEC,X0
         1 000634   023420 506007                    DIV     10000,DL
         1 000635   000000 036010 xsym               ADLQ    S_MIDLWIO,X0
         1 000636   000000 756010 xsym               STQ     P_S_MIDLWIO,X0

      461     4789    2         P_S_MIDLWRES(I)=S_MIDLWRES(I)+S_MIRUSEC(I)/10000;

   4789  1 000637   000000 236010 xsym               LDQ     S_MIRUSEC,X0
         1 000640   023420 506007                    DIV     10000,DL
         1 000641   000000 036010 xsym               ADLQ    S_MIDLWRES,X0
         1 000642   000000 756010 xsym               STQ     P_S_MIDLWRES,X0

      462     4790    2         P_S_MIDLWRESIO(I)=S_MIDLWRESIO(I)+S_MIIRUSEC(I)/10000;

   4790  1 000643   000000 236010 xsym               LDQ     S_MIIRUSEC,X0
         1 000644   023420 506007                    DIV     10000,DL
         1 000645   000000 036010 xsym               ADLQ    S_MIDLWRESIO,X0
         1 000646   000000 756010 xsym               STQ     P_S_MIDLWRESIO,X0

      463     4791
      464     4792                                                /* Figure out how much time was spent */
      465     4793                                                  /* in "not running" - this includes */
      466     4794                                                 /* crash/recovery time, XDELTA time, */
      467     4795                                                     /* CPU stopped by operator, etc. */
      468     4796
      469     4797    2         CALL XUD$UTS_DIFF (P_STOPTIME(I), P_NOW, P_STARTUP);

   4797  1 000647   000016 236000 2                  LDQ     14
         1 000650   200034 756100                    STQ     @AVAIL_SIZE+3,,AUTO
         1 000651   000014 236000 2                  LDQ     12
         1 000652   200033 756100                    STQ     @AVAIL_SIZE+2,,AUTO
         1 000653   000000 630410 xsym               EPPR0   P_STOPTIME,X0
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:64   
         1 000654   200032 450500                    STP0    @AVAIL_SIZE+1,,AUTO
         1 000655   200032 630500                    EPPR0   @AVAIL_SIZE+1,,AUTO
         1 000656   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000657   000000 701000 xent               TSX1    XUD$UTS_DIFF
         1 000660   000000 011000                    NOP     0

      470     4798    2         P_STOPTIME(I) = P_STOPTIME(I) - P_S_UXEQTIME(I) - P_S_USRVTIME(I) -

   4798  1 000661   200005 720100                    LXL0    I,,AUTO
         1 000662   000000 236010 xsym               LDQ     P_STOPTIME,X0
         1 000663   000000 136010 xsym               SBLQ    P_S_UXEQTIME,X0
         1 000664   000000 136010 xsym               SBLQ    P_S_USRVTIME,X0
         1 000665   000000 136010 xsym               SBLQ    P_S_MXEQTIME,X0
         1 000666   000000 136010 xsym               SBLQ    P_S_MIDLTIME,X0
         1 000667   000000 136010 xsym               SBLQ    P_S_MIDLWIO,X0
         1 000670   000000 136010 xsym               SBLQ    P_S_MIDLWRES,X0
         1 000671   000000 136010 xsym               SBLQ    P_S_MIDLWRESIO,X0
         1 000672   000000 756010 xsym               STQ     P_STOPTIME,X0

      471     4799    2          P_S_MXEQTIME(I) - P_S_MIDLTIME(I) - P_S_MIDLWIO(I) - P_S_MIDLWRES(I) -
      472     4800    2          P_S_MIDLWRESIO(I);
      473     4801
      474     4802    2         IF P_STOPTIME(I) < 0

   4802  1 000673   000675 605000 1                  TPL     s:4805

      475     4803    2           THEN P_STOPTIME(I) = 0;

   4803  1 000674   000000 450010 xsym               STZ     P_STOPTIME,X0

      476     4804
      477     4805    2         END;

   4805  1 000675   200005 054100                    AOS     I,,AUTO
         1 000676   000000 236000 xsym               LDQ     S_NSCPU
         1 000677   000612 604000 1                  TMI     s:4784
         1 000700   200005 116100                    CMPQ    I,,AUTO
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:65   
         1 000701   000612 605000 1                  TPL     s:4784

      478     4806
      479     4807           %UNLOCK (G#=P_GATE);

   4808  1 000702   000015 630400 2                  EPPR0   13
         1 000703   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000704   000000 701000 xent               TSX1    HFC$UNLOCK
         1 000705   000000 011000                    NOP     0

      480     4810
      481     4811           %LOCK (G#=MM_LOCK);

   4812  1 000706   000017 630400 2                  EPPR0   15
         1 000707   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000710   000000 701000 xent               TSX1    HFC$LOCK
         1 000711   000000 011000                    NOP     0

      482     4814
      483     4815    1      P_AVAIL_MEM = MM_FPPC + MM_AUTO + MM_CGQD.FPPC + FMC_CACHEPGCNT;

   4815  1 000712   000000 236000 xsym               LDQ     MM_FPPC
         1 000713   000000 036000 xsym               ADLQ    MM_AUTO
         1 000714   000000 036000 xsym               ADLQ    MM_CGQD
         1 000715   000000 036000 xsym               ADLQ    FMC_CACHEPGCNT
         1 000716   000000 756000 xsym               STQ     P_AVAIL_MEM

      484     4816
      485     4817    1      P_RESOURCE.PAGES.IOCC = MM_IOCC;

   4817  1 000717   000000 470400 xsym               LDP0    P_RESOURCE$
         1 000720   000000 235000 xsym               LDA     MM_IOCC
         1 000721   000000 755100                    STA     0,,PR0

      486     4818    1      P_RESOURCE.PAGES.IOCM =                FMC_CACHEPGCNT;/*IOCM SHOULD BE IOCU*/

   4818  1 000722   000000 470400 xsym               LDP0    P_RESOURCE$
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:66   
         1 000723   000000 235000 xsym               LDA     FMC_CACHEPGCNT
         1 000724   000001 755100                    STA     1,,PR0

      487     4819    1      P_RESOURCE.PAGES.SPPC = MM_SPPC;

   4819  1 000725   000000 236000 xsym               LDQ     MM_SPPC
         1 000726   000002 756100                    STQ     2,,PR0

      488     4820    1      P_RESOURCE.PAGES.BPPC = MM_BPPC;

   4820  1 000727   000000 235000 xsym               LDA     MM_BPPC
         1 000730   000003 755100                    STA     3,,PR0

      489     4821    1      P_RESOURCE.PAGES.SUSPECTS = MM_SUSPECTS;

   4821  1 000731   000000 235000 xsym               LDA     MM_SUSPECTS
         1 000732   000004 755100                    STA     4,,PR0

      490     4822    1      P_RESOURCE.PAGES.IN_TEST = MM_IN_TEST;

   4822  1 000733   000000 235000 xsym               LDA     MM_IN_TEST
         1 000734   000005 755100                    STA     5,,PR0

      491     4823    1      P_RESOURCE.PAGES.FPPC = MM_FPPC + MM_CGQD.FPPC;

   4823  1 000735   000000 236000 xsym               LDQ     MM_FPPC
         1 000736   000000 036000 xsym               ADLQ    MM_CGQD
         1 000737   000006 756100                    STQ     6,,PR0

      492     4824        /*  MM_GAPSZ is included in MM_PCORE when both SCUs are active.
      493     4825            If one of the SCUs is released MM_GAPSZ is not included in
      494     4826            MM_PCORE.  Therefore do not subtract MM_GAPSZ from MM_PCORE
      495     4827            when a SCU is released.
      496     4828        */
      497     4829    1      P_RESOURCE.PAGES.PCORE = MM_PCORE;

   4829  1 000740   000000 235000 xsym               LDA     MM_PCORE
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:67   
         1 000741   000007 755100                    STA     7,,PR0

      498     4830    1      IF H_RPM_FLG THEN

   4830  1 000742   000000 234000 xsym               SZN     H_RPM_FLG
         1 000743   000755 605000 1                  TPL     s:4834

      499     4831    1         IF (H_DPS8000_SCU_INFO.SCU_STATUS.REL_BIT(0) = '0'B) AND

   4831  1 000744   000001 236000 xsym               LDQ     H_DPS8000_SCU_INFO+1
         1 000745   200000 316007                    CANQ    65536,DL
         1 000746   000755 601000 1                  TNZ     s:4834
         1 000747   000003 236000 xsym               LDQ     H_DPS8000_SCU_INFO+3
         1 000750   200000 316007                    CANQ    65536,DL
         1 000751   000755 601000 1                  TNZ     s:4834

      500     4832    1          (H_DPS8000_SCU_INFO.SCU_STATUS.REL_BIT(1) = '0'B) THEN
      501     4833    1            P_RESOURCE.PAGES.PCORE = P_RESOURCE.PAGES.PCORE - MM_GAPSZ;

   4833  1 000752   000007 236100                    LDQ     7,,PR0
         1 000753   000000 136000 xsym               SBLQ    MM_GAPSZ
         1 000754   000007 756100                    STQ     7,,PR0

      502     4834    1      P_RESOURCE.PAGES.RSVP = MM_RSVP;

   4834  1 000755   000000 236000 xsym               LDQ     MM_RSVP
         1 000756   000011 756100                    STQ     9,,PR0

      503     4835    1      P_RESOURCE.PAGES.HELD = MM_HELD;

   4835  1 000757   000000 235000 xsym               LDA     MM_HELD
         1 000760   000012 755100                    STA     10,,PR0

      504     4836    1      P_RESOURCE.PAGES.NCQPGS = MM_NCQPGS;

   4836  1 000761   000000 235000 xsym               LDA     MM_NCQPGS
         1 000762   000014 755100                    STA     12,,PR0
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:68   

      505     4837    1      P_RESOURCE.PAGES.AARDSIZE = MM_AARD;

   4837  1 000763   000000 235000 xsym               LDA     MM_AARD
         1 000764   000015 755100                    STA     13,,PR0

      506     4838    1      P_RESOURCE.PAGES.XDELTASIZE = MM_XDEL;

   4838  1 000765   000000 235000 xsym               LDA     MM_XDEL
         1 000766   000016 755100                    STA     14,,PR0

      507     4839    1      P_RESOURCE.PAGES.AUTOAVAIL = MM_AUTO;

   4839  1 000767   000000 235000 xsym               LDA     MM_AUTO
         1 000770   000022 755100                    STA     18,,PR0

      508     4840    1      P_RESOURCE.PAGES.AUTOINUSE = MM_AUTOINUSE;

   4840  1 000771   000000 235000 xsym               LDA     MM_AUTOINUSE
         1 000772   000023 755100                    STA     19,,PR0

      509     4841    1      P_RESOURCE.PAGES.SHAREDSAVAIL = MM_SHAREDS;

   4841  1 000773   000000 235000 xsym               LDA     MM_SHAREDS
         1 000774   000024 755100                    STA     20,,PR0

      510     4842    1      P_RESOURCE.PAGES.SHAREDSUSE = MM_SHAREDSUSE;

   4842  1 000775   000000 235000 xsym               LDA     MM_SHAREDSUSE
         1 000776   000025 755100                    STA     21,,PR0

      511     4843    1      P_RESOURCE.PAGES.CGQPGS = MM_CGQD.UPPC;

   4843  1 000777   000001 235000 xsym               LDA     MM_CGQD+1
         1 001000   000031 755100                    STA     25,,PR0

      512     4844
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:69   
      513     4845    1      P_RESOURCE.PAGES.GHOSTSIZE = 0;

   4845  1 001001   000017 450100                    STZ     15,,PR0

      514     4846    2      DO I = 1 TO S_MING;

   4846  1 001002   000001 235007                    LDA     1,DL
         1 001003   200005 755100                    STA     I,,AUTO
         1 001004   001022 710000 1                  TRA     s:4851+1

      515     4847    2         IF B$USRT$ -> B$USER.US(I) ~= %SS_SNULL

   4847  1 001005   200005 235100                    LDA     I,,AUTO
         1 001006   000004 735000                    ALS     4
         1 001007   000000 470400 xsym               LDP0    B$USRT$
         1 001010   000011 236105                    LDQ     9,AL,PR0
         1 001011   770000 376003                    ANQ     -4096,DU
         1 001012   300000 116003                    CMPQ    98304,DU
         1 001013   001021 600000 1                  TZE     s:4851

      516     4848    2           THEN
      517     4849    2            P_RESOURCE.PAGES.GHOSTSIZE = P_RESOURCE.PAGES.GHOSTSIZE +

   4849  1 001014   000000 471400 xsym               LDP1    P_RESOURCE$
         1 001015   000010 236105                    LDQ     8,AL,PR0
         1 001016   000022 772000                    QRL     18
         1 001017   100017 036100                    ADLQ    15,,PR1
         1 001020   100017 756100                    STQ     15,,PR1

      518     4850    2             B$USRT$ -> B$USER.PCT(I);
      519     4851    2         END;

   4851  1 001021   200005 054100                    AOS     I,,AUTO
         1 001022   000000 236000 xsym               LDQ     S_MING
         1 001023   001005 604000 1                  TMI     s:4847
         1 001024   200005 116100                    CMPQ    I,,AUTO
         1 001025   001005 605000 1                  TPL     s:4847
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:70   

      520     4852
      521     4853    1      P_RESOURCE.PAGES.USERSIZE = 0;

   4853  1 001026   000000 470400 xsym               LDP0    P_RESOURCE$
         1 001027   000026 450100                    STZ     22,,PR0

      522     4854    2      DO I = S_MING+1 TO B_MUAIS;

   4854  1 001030   000001 036007                    ADLQ    1,DL
         1 001031   200005 756100                    STQ     I,,AUTO
         1 001032   001050 710000 1                  TRA     s:4859+1

      523     4855    2         IF B$USRT$ -> B$USER.US(I) ~= %SS_SNULL

   4855  1 001033   200005 235100                    LDA     I,,AUTO
         1 001034   000004 735000                    ALS     4
         1 001035   000000 470400 xsym               LDP0    B$USRT$
         1 001036   000011 236105                    LDQ     9,AL,PR0
         1 001037   770000 376003                    ANQ     -4096,DU
         1 001040   300000 116003                    CMPQ    98304,DU
         1 001041   001047 600000 1                  TZE     s:4859

      524     4856    2           THEN
      525     4857    2            P_RESOURCE.PAGES.USERSIZE = P_RESOURCE.PAGES.USERSIZE +

   4857  1 001042   000000 471400 xsym               LDP1    P_RESOURCE$
         1 001043   000010 236105                    LDQ     8,AL,PR0
         1 001044   000022 772000                    QRL     18
         1 001045   100026 036100                    ADLQ    22,,PR1
         1 001046   100026 756100                    STQ     22,,PR1

      526     4858    2             B$USRT$ -> B$USER.PCT(I);
      527     4859    2         END;

   4859  1 001047   200005 054100                    AOS     I,,AUTO
         1 001050   000000 236000 xsym               LDQ     B_MUAIS
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:71   
         1 001051   001033 604000 1                  TMI     s:4855
         1 001052   200005 116100                    CMPQ    I,,AUTO
         1 001053   001033 605000 1                  TPL     s:4855

      528     4860
      529     4861    1      P_RESOURCE.PAGES.CONTEXT =

   4861  1 001054   000000 236000 xsym               LDQ     MM_NCWSQ
         1 001055   000003 036007                    ADLQ    3,DL
         1 001056   000004 506007                    DIV     4,DL
         1 001057   200032 756100                    STQ     @AVAIL_SIZE+1,,AUTO
         1 001060   000000 236000 xsym               LDQ     S_NSCPU
         1 001061   000006 402007                    MPY     6,DL
         1 001062   200032 036100                    ADLQ    @AVAIL_SIZE+1,,AUTO
         1 001063   000002 036007                    ADLQ    2,DL
         1 001064   000000 470400 xsym               LDP0    P_RESOURCE$
         1 001065   000027 756100                    STQ     23,,PR0

      530     4862    1       S_NSCPU * 6 +                                    /* 6 PAGES PER SLAVE CPU */
      531     4863    1       5 +                                             /* 5 PAGES FOR MASTER CPU */
      532     4864    1       3 +                            /* 3 PAGES FOR WSQ 4, 5, AND 6 PAGE TABLES */
      533     4865        /*          COUNTED IN AARDSIZE <- FIRST 4 REAL PAGES FOR I/O MAILBOXES, ETC. */
      534     4866    1       -6 +                                                      /* FUDGE FACTOR */
      535     4867    1       (MM_NCWSQ+3)/4;                        /* PAGE TABLE PAGES FOR COMM WSQ'S */
      536     4868    2      DO I = %CGPGTBLLO TO %PGTBLHI;                           /* CG PAGE TABLES */

   4868  1 001066   000001 235007                    LDA     1,DL
         1 001067   200005 755100                    STA     I,,AUTO

      537     4869    2         IF B$MPT.RPN(I) ~= MM_FPMC.RPN

   4869  1 001070   000000 470400 xsym               LDP0    B$MPT$
         1 001071   200005 720100                    LXL0    I,,AUTO
         1 001072   000000 221110                    LDX1    0,X0,PR0
         1 001073   000000 101000 xsym               CMPX1   MM_FPMC
         1 001074   001077 600000 1                  TZE     s:4872

PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:72   
      538     4870    2           THEN
      539     4871    2            P_RESOURCE.PAGES.CONTEXT = P_RESOURCE.PAGES.CONTEXT + 1;

   4871  1 001075   000000 471400 xsym               LDP1    P_RESOURCE$
         1 001076   100027 054100                    AOS     23,,PR1

      540     4872    2         END;

   4872  1 001077   200005 054100                    AOS     I,,AUTO
         1 001100   200005 235100                    LDA     I,,AUTO
         1 001101   000012 115007                    CMPA    10,DL
         1 001102   001070 604400 1                  TMOZ    s:4869

      541     4873    1      P_RESOURCE.PAGES.CONTEXT = P_RESOURCE.PAGES.CONTEXT +

   4873  1 001103   000000 236000 xsym               LDQ     MM_PCORE
         1 001104   001777 036007                    ADLQ    1023,DL
         1 001105   002000 506007                    DIV     1024,DL
         1 001106   000000 471400 xsym               LDP1    P_RESOURCE$
         1 001107   100027 036100                    ADLQ    23,,PR1
         1 001110   100027 756100                    STQ     23,,PR1

      542     4874    1       (MM_PCORE + 1023 ) / 1024;                                   /* PPUT SIZE */
      543     4875
      544     4876    1      P_RESOURCE.PAGES.MONSIZE = ((PINCRW(ADDR(B_PATCHI),-2)->PATCH.NEXT

   4876  1 001111   777777 236000 xsym               LDQ     B_PATCHI-1
         1 001112   777777 376007                    ANQ     -1,DL
         1 001113   200032 756100                    STQ     @AVAIL_SIZE+1,,AUTO
         1 001114   777776 236000 xsym               LDQ     B_PATCHI-2
         1 001115   000022 772000                    QRL     18
         1 001116   200032 036100                    ADLQ    @AVAIL_SIZE+1,,AUTO
         1 001117   001777 036007                    ADLQ    1023,DL
         1 001120   000012 772000                    QRL     10
         1 001121   100030 756100                    STQ     24,,PR1

      545     4877    1       + PINCRW(ADDR(B_PATCHI),-2)->PATCH.SIZE) + 1023) / 1024;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:73   
      546     4878
      547     4879        /* Now we have the monitor root size. Next add in the monitor overlays,
      548     4880        except TIGR (B$ROGERS), VOLINIT (B$BJERKE), and
      549     4881        WRAPUP (B$ANDERSON, which is TIGR part 2), of course.      */
      550     4882
      551     4883    2      DO J = 0 TO 3;

   4883  1 001122   200006 450100                    STZ     J,,AUTO

      552     4884    2         SEGP$ = PINCRW (B$SEGTBL$ , SEGTBL.NODES.WOFF (J));

   4884  1 001123   000000 470400 xsym               LDP0    B$SEGTBL$
         1 001124   200006 720100                    LXL0    J,,AUTO
         1 001125   000001 236110                    LDQ     1,X0,PR0
         1 001126   000024 772000                    QRL     20
         1 001127   000022 736000                    QLS     18
         1 001130   000000 036000 xsym               ADLQ    B$SEGTBL$
         1 001131   200024 756100                    STQ     SEGP$,,AUTO

      553     4885    2         I = SEGTBL.NODES.WSIZ (J) - 1;

   4885  1 001132   000001 236110                    LDQ     1,X0,PR0
         1 001133   000002 772000                    QRL     2
         1 001134   177777 376007                    ANQ     65535,DL
         1 001135   000001 136007                    SBLQ    1,DL
         1 001136   200005 756100                    STQ     I,,AUTO

      554     4886    3         DO UNTIL (I < 0);

      555     4887    3            IF SEGPT.RPN(I)~=MM_FPMC.RPN

   4887  1 001137   200024 470500                    LDP0    SEGP$,,AUTO
         1 001140   200005 720100                    LXL0    I,,AUTO
         1 001141   000000 221110                    LDX1    0,X0,PR0
         1 001142   000000 101000 xsym               CMPX1   MM_FPMC
         1 001143   001146 600000 1                  TZE     s:4891

PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:74   
      556     4888    3              THEN
      557     4889    3               P_RESOURCE.PAGES.MONSIZE =

   4889  1 001144   000000 471400 xsym               LDP1    P_RESOURCE$
         1 001145   100030 054100                    AOS     24,,PR1

      558     4890    3                P_RESOURCE.PAGES.MONSIZE + 1;
      559     4891    3            I = I - 1;

   4891  1 001146   000001 336007                    LCQ     1,DL
         1 001147   200005 056100                    ASQ     I,,AUTO

      560     4892    3            END;

   4892  1 001150   001137 605000 1                  TPL     s:4887

      561     4893    2         END;

   4893  1 001151   200006 235100                    LDA     J,,AUTO
         1 001152   000001 035007                    ADLA    1,DL
         1 001153   200006 755100                    STA     J,,AUTO
         1 001154   000004 115007                    CMPA    4,DL
         1 001155   001123 602000 1                  TNC     s:4884

      562     4894
      563     4895    1      P_RESOURCE.PAGES.MONDSSIZE = 0;

   4895  1 001156   000000 471400 xsym               LDP1    P_RESOURCE$
         1 001157   100020 450100                    STZ     16,,PR1

      564     4896    2      DO I = %UDSEGLO TO %LDCTHI;

   4896  1 001160   001130 235007                    LDA     600,DL
         1 001161   200005 755100                    STA     I,,AUTO

      565     4897    2         IF B$MPT.RPN(I) ~= MM_FPMC.RPN

PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:75   
   4897  1 001162   000000 470400 xsym               LDP0    B$MPT$
         1 001163   200005 720100                    LXL0    I,,AUTO
         1 001164   000000 221110                    LDX1    0,X0,PR0
         1 001165   000000 101000 xsym               CMPX1   MM_FPMC
         1 001166   001171 600000 1                  TZE     s:4900

      566     4898    2           THEN
      567     4899    2            P_RESOURCE.PAGES.MONDSSIZE = P_RESOURCE.PAGES.MONDSSIZE + 1;

   4899  1 001167   000000 471400 xsym               LDP1    P_RESOURCE$
         1 001170   100020 054100                    AOS     16,,PR1

      568     4900    2         END;

   4900  1 001171   200005 054100                    AOS     I,,AUTO
         1 001172   200005 235100                    LDA     I,,AUTO
         1 001173   001777 115007                    CMPA    1023,DL
         1 001174   001162 604400 1                  TMOZ    s:4897

      569     4901
      570     4902    1      P_RESOURCE.PAGES.TIGRSIZE = 0;

   4902  1 001175   000000 471400 xsym               LDP1    P_RESOURCE$
         1 001176   100021 450100                    STZ     17,,PR1

      571     4903    2      DO I = %TIGRLO TO %TIGRHI;

   4903  1 001177   000610 236007                    LDQ     392,DL
         1 001200   200005 756100                    STQ     I,,AUTO

      572     4904    2         IF B$MPT.RPN(I) ~= MM_FPMC.RPN

   4904  1 001201   000000 470400 xsym               LDP0    B$MPT$
         1 001202   200005 720100                    LXL0    I,,AUTO
         1 001203   000000 221110                    LDX1    0,X0,PR0
         1 001204   000000 101000 xsym               CMPX1   MM_FPMC
         1 001205   001210 600000 1                  TZE     s:4907
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:76   

      573     4905    2           THEN
      574     4906    2            P_RESOURCE.PAGES.TIGRSIZE = P_RESOURCE.PAGES.TIGRSIZE + 1;

   4906  1 001206   000000 471400 xsym               LDP1    P_RESOURCE$
         1 001207   100021 054100                    AOS     17,,PR1

      575     4907    2         END;

   4907  1 001210   200005 054100                    AOS     I,,AUTO
         1 001211   200005 235100                    LDA     I,,AUTO
         1 001212   001007 115007                    CMPA    519,DL
         1 001213   001201 604400 1                  TMOZ    s:4904

      576     4908
      577     4909    1      P_RESOURCE.PAGES.RPROCSIZE = 0;

   4909  1 001214   000000 471400 xsym               LDP1    P_RESOURCE$
         1 001215   100032 450100                    STZ     26,,PR1

      578     4910    1      P_RESOURCE.PAGES.PROCSIZE = 0;

   4910  1 001216   100033 450100                    STZ     27,,PR1

      579     4911    1      P_RESOURCE.PAGES.SHAREDSIZE = 0;

   4911  1 001217   100034 450100                    STZ     28,,PR1

      580     4912
      581     4913    2      DO I = 1 TO P_MAXPROCS;

   4913  1 001220   000001 236007                    LDQ     1,DL
         1 001221   200005 756100                    STQ     I,,AUTO
         1 001222   001330 710000 1                  TRA     s:4933+1

      582     4914
      583     4915    2         WORDS = B$P$ -> B$P.PPC (I) + (B$P$ -> B$P.DSZ (I) + 1023) /1024;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:77   

   4915  1 001223   200005 236100                    LDQ     I,,AUTO
         1 001224   000042 402007                    MPY     34,DL
         1 001225   000000 470400 xsym               LDP0    B$P$
         1 001226   000024 236106                    LDQ     20,QL,PR0
         1 001227   777777 376007                    ANQ     -1,DL
         1 001230   001777 036007                    ADLQ    1023,DL
         1 001231   000012 772000                    QRL     10
         1 001232   200032 756100                    STQ     @AVAIL_SIZE+1,,AUTO
         1 001233   200005 236100                    LDQ     I,,AUTO
         1 001234   000042 402007                    MPY     34,DL
         1 001235   000000 620006                    EAX0    0,QL
         1 001236   200032 236100                    LDQ     @AVAIL_SIZE+1,,AUTO
         1 001237   000003 036110                    ADLQ    3,X0,PR0
         1 001240   200021 756100                    STQ     WORDS,,AUTO

      584     4916    2         Q$ = ADDR (B$P$ -> B$P.DSDATA (I));

   4916  1 001241   200005 236100                    LDQ     I,,AUTO
         1 001242   000042 402003                    MPY     34,DU
         1 001243   000011 036003                    ADLQ    9,DU
         1 001244   000000 036000 xsym               ADLQ    B$P$
         1 001245   200004 756100                    STQ     Q$,,AUTO

      585     4917    3         DO K = 0 TO 5;

   4917  1 001246   200007 450100                    STZ     K,,AUTO

      586     4918    3            WORDS = WORDS + (Q$ -> B$PROCDS.DSSIZE (K) +1023) / 1024;

   4918  1 001247   200007 235100                    LDA     K,,AUTO
         1 001250   000001 735000                    ALS     1
         1 001251   200004 470500                    LDP0    Q$,,AUTO
         1 001252   000100 101505                    MRL     fill='000'O
         1 001253   000003 000002                    ADSC9   3,A,PR0                  cn=0,n=2
         1 001254   200032 000004                    ADSC9   @AVAIL_SIZE+1,,AUTO      cn=0,n=4
         1 001255   200032 236100                    LDQ     @AVAIL_SIZE+1,,AUTO
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:78   
         1 001256   001777 036007                    ADLQ    1023,DL
         1 001257   000012 772000                    QRL     10
         1 001260   200021 036100                    ADLQ    WORDS,,AUTO
         1 001261   200021 756100                    STQ     WORDS,,AUTO

      587     4919    3            END;

   4919  1 001262   200007 235100                    LDA     K,,AUTO
         1 001263   000001 035007                    ADLA    1,DL
         1 001264   200007 755100                    STA     K,,AUTO
         1 001265   000006 115007                    CMPA    6,DL
         1 001266   001247 602000 1                  TNC     s:4918

      588     4920
      589     4921    2         IF B$P$->B$P.NAME.TEXT(I) = 'LOGON'

   4921  1 001267   200005 236100                    LDQ     I,,AUTO
         1 001270   000210 402007                    MPY     136,DL
         1 001271   000000 471400 xsym               LDP1    B$P$
         1 001272   040000 106506                    CMPC    fill='040'O
         1 001273   100032 200037                    ADSC9   26,Q,PR1                 cn=1,n=31
         1 001274   000001 000005 0                  ADSC9   MY_ERROR+1               cn=0,n=5
         1 001275   001316 600000 1                  TZE     s:4927
         1 001276   040000 106506                    CMPC    fill='040'O
         1 001277   100032 200037                    ADSC9   26,Q,PR1                 cn=1,n=31
         1 001300   000003 000004 0                  ADSC9   MY_ERROR+3               cn=0,n=4
         1 001301   001316 600000 1                  TZE     s:4927
         1 001302   040000 106506                    CMPC    fill='040'O
         1 001303   100032 200037                    ADSC9   26,Q,PR1                 cn=1,n=31
         1 001304   000004 000005 0                  ADSC9   MY_ERROR+4               cn=0,n=5
         1 001305   001316 600000 1                  TZE     s:4927
         1 001306   040000 106506                    CMPC    fill='040'O
         1 001307   100032 200037                    ADSC9   26,Q,PR1                 cn=1,n=31
         1 001310   000006 000016 0                  ADSC9   MY_ERROR+6               cn=0,n=14
         1 001311   001316 600000 1                  TZE     s:4927
         1 001312   040000 106506                    CMPC    fill='040'O
         1 001313   100032 200037                    ADSC9   26,Q,PR1                 cn=1,n=31
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:79   
         1 001314   000012 000017 0                  ADSC9   MY_ERROR+10              cn=0,n=15
         1 001315   001323 601000 1                  TNZ     s:4930

      590     4922    2          OR B$P$->B$P.NAME.TEXT(I) = 'IBEX'
      591     4923    2          OR B$P$->B$P.NAME.TEXT(I) = 'DELTA'
      592     4924    2          OR B$P$->B$P.NAME.TEXT(I) = ':SHARED_SYSTEM'
      593     4925    2          OR B$P$->B$P.NAME.TEXT(I) = ':SHARED_SPECIAL'
      594     4926    2           THEN
      595     4927    2            P_RESOURCE.PAGES.RPROCSIZE =

   4927  1 001316   000000 473400 xsym               LDP3    P_RESOURCE$
         1 001317   300032 236100                    LDQ     26,,PR3
         1 001320   200021 036100                    ADLQ    WORDS,,AUTO
         1 001321   300032 756100                    STQ     26,,PR3
         1 001322   001327 710000 1                  TRA     s:4933

      596     4928    2             P_RESOURCE.PAGES.RPROCSIZE + WORDS;
      597     4929    2           ELSE
      598     4930    2            P_RESOURCE.PAGES.PROCSIZE =

   4930  1 001323   000000 473400 xsym               LDP3    P_RESOURCE$
         1 001324   300033 236100                    LDQ     27,,PR3
         1 001325   200021 036100                    ADLQ    WORDS,,AUTO
         1 001326   300033 756100                    STQ     27,,PR3

      599     4931    2             P_RESOURCE.PAGES.PROCSIZE + WORDS;
      600     4932
      601     4933    2         END;

   4933  1 001327   200005 054100                    AOS     I,,AUTO
         1 001330   000000 236000 xsym               LDQ     P_MAXPROCS
         1 001331   001223 604000 1                  TMI     s:4915
         1 001332   200005 116100                    CMPQ    I,,AUTO
         1 001333   001223 605000 1                  TPL     s:4915

      602     4934
      603     4935           %UNLOCK (G#=MM_LOCK);
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:80   

   4936  1 001334   000017 630400 2                  EPPR0   15
         1 001335   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001336   000000 701000 xent               TSX1    HFC$UNLOCK
         1 001337   000000 011000                    NOP     0

      604     4938
      605     4939    2      DO WHILE (P$TABLE.ADDR$(ENTRY_NUM) ~= ADDR(NIL));

   4939  1 001340   001534 710000 1                  TRA     s:5003

      606     4940
      607     4941    2         P$ = P$TABLE.ADDR$(ENTRY_NUM);

   4941  1 001341   200015 236100                    LDQ     ENTRY_NUM,,AUTO
         1 001342   000003 402007                    MPY     3,DL
         1 001343   000000 236006 xsym               LDQ     P$TABLE,QL
         1 001344   200003 756100                    STQ     P$,,AUTO

      608     4942
      609     4943    3         DO I = 1 TO P$TABLE.INDIRECT(ENTRY_NUM);

   4943  1 001345   000001 235007                    LDA     1,DL
         1 001346   200005 755100                    STA     I,,AUTO
         1 001347   001354 710000 1                  TRA     s:4945+1

      610     4944    3            P$ = P$ -> PTR_;

   4944  1 001350   200003 470500                    LDP0    P$,,AUTO
         1 001351   000000 236100                    LDQ     0,,PR0
         1 001352   200003 756100                    STQ     P$,,AUTO

      611     4945    3            END;

   4945  1 001353   200005 054100                    AOS     I,,AUTO
         1 001354   200015 236100                    LDQ     ENTRY_NUM,,AUTO
         1 001355   000003 402007                    MPY     3,DL
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:81   
         1 001356   000002 236006 xsym               LDQ     P$TABLE+2,QL
         1 001357   000011 772000                    QRL     9
         1 001360   000777 376007                    ANQ     511,DL
         1 001361   200005 116100                    CMPQ    I,,AUTO
         1 001362   001350 605000 1                  TPL     s:4944

      612     4946
      613     4947    2         WORDS = P$TABLE.WORDS(ENTRY_NUM);

   4947  1 001363   200015 236100                    LDQ     ENTRY_NUM,,AUTO
         1 001364   000003 402007                    MPY     3,DL
         1 001365   000002 236006 xsym               LDQ     P$TABLE+2,QL
         1 001366   000022 772000                    QRL     18
         1 001367   000777 376007                    ANQ     511,DL
         1 001370   200021 756100                    STQ     WORDS,,AUTO

      614     4948
      615     4949    2         IMAGE_SIZE = P$TABLE.IMAGE_SIZE(ENTRY_NUM);

   4949  1 001371   200015 236100                    LDQ     ENTRY_NUM,,AUTO
         1 001372   000003 402007                    MPY     3,DL
         1 001373   000002 236006 xsym               LDQ     P$TABLE+2,QL
         1 001374   000777 376007                    ANQ     511,DL
         1 001375   200023 756100                    STQ     IMAGE_SIZE,,AUTO

      616     4950
      617     4951    2         IF P$TABLE.ENTRIES$(ENTRY_NUM) = ADDR(NIL)

   4951  1 001376   200015 236100                    LDQ     ENTRY_NUM,,AUTO
         1 001377   000003 402007                    MPY     3,DL
         1 001400   000001 236006 xsym               LDQ     P$TABLE+1,QL
         1 001401   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001402   001411 601000 1                  TNZ     s:4953

      618     4952    2           THEN ENTRIES = P$TABLE.ENTRIES(ENTRY_NUM);

   4952  1 001403   200015 236100                    LDQ     ENTRY_NUM,,AUTO
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:82   
         1 001404   000003 402007                    MPY     3,DL
         1 001405   000002 236006 xsym               LDQ     P$TABLE+2,QL
         1 001406   000033 772000                    QRL     27
         1 001407   200022 756100                    STQ     ENTRIES,,AUTO
         1 001410   001416 710000 1                  TRA     s:4955

      619     4953    2           ELSE ENTRIES = P$TABLE.ENTRIES$(ENTRY_NUM) -> WORD_(0);

   4953  1 001411   200015 236100                    LDQ     ENTRY_NUM,,AUTO
         1 001412   000003 402007                    MPY     3,DL
         1 001413   000001 470406 xsym               LDP0    P$TABLE+1,QL
         1 001414   000000 235100                    LDA     0,,PR0
         1 001415   200022 755100                    STA     ENTRIES,,AUTO

      620     4954
      621     4955    2         IF UPPER_BOUND <= OFFSET + 4 THEN

   4955  1 001416   200016 236100                    LDQ     OFFSET,,AUTO
         1 001417   000004 036007                    ADLQ    4,DL
         1 001420   200012 116100                    CMPQ    UPPER_BOUND,,AUTO
         1 001421   001425 604000 1                  TMI     s:4961

      622     4956
      623     4957    2            TOO_SMALL = '1'B;

   4957  1 001422   400000 236003                    LDQ     -131072,DU
         1 001423   200013 756100                    STQ     TOO_SMALL,,AUTO
         1 001424   001520 710000 1                  TRA     s:4997

      624     4958
      625     4959    3           ELSE DO;

      626     4960
      627     4961    3            HEADER_OFFSET = OFFSET;

   4961  1 001425   200016 235100                    LDA     OFFSET,,AUTO
         1 001426   200017 755100                    STA     HEADER_OFFSET,,AUTO
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:83   

      628     4962
      629     4963    3            ENTRY_COUNT = 0;

   4963  1 001427   200020 450100                    STZ     ENTRY_COUNT,,AUTO

      630     4964
      631     4965    3            OFFSET = OFFSET + 2;

   4965  1 001430   000002 236007                    LDQ     2,DL
         1 001431   200016 056100                    ASQ     OFFSET,,AUTO

      632     4966
      633     4967    3            IF UPPER_BOUND <= OFFSET + 2 + WORDS * ENTRIES

   4967  1 001432   200021 236100                    LDQ     WORDS,,AUTO
         1 001433   200022 402100                    MPY     ENTRIES,,AUTO
         1 001434   200016 036100                    ADLQ    OFFSET,,AUTO
         1 001435   000002 036007                    ADLQ    2,DL
         1 001436   200012 116100                    CMPQ    UPPER_BOUND,,AUTO
         1 001437   001447 604000 1                  TMI     s:4974

      634     4968    4              THEN DO;

      635     4969
      636     4970    4               TOO_SMALL = '1'B;

   4970  1 001440   400000 236003                    LDQ     -131072,DU
         1 001441   200013 756100                    STQ     TOO_SMALL,,AUTO

      637     4971    4               ENTRIES = (UPPER_BOUND - OFFSET - 3) / WORDS;

   4971  1 001442   200012 236100                    LDQ     UPPER_BOUND,,AUTO
         1 001443   200016 136100                    SBLQ    OFFSET,,AUTO
         1 001444   000003 136007                    SBLQ    3,DL
         1 001445   200021 506100                    DIV     WORDS,,AUTO
         1 001446   200022 756100                    STQ     ENTRIES,,AUTO
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:84   

      638     4972    4               END;

      639     4973
      640     4974    4            DO K = 0 TO ENTRIES - 1;

   4974  1 001447   200007 450100                    STZ     K,,AUTO
         1 001450   001514 710000 1                  TRA     s:4993+3

      641     4975
      642     4976    4               IF IMAGE_SIZE = 0

   4976  1 001451   200023 235100                    LDA     IMAGE_SIZE,,AUTO
         1 001452   001461 601000 1                  TNZ     s:4978

      643     4977    4                 THEN Q$ = PINCRW(P$, K * WORDS);

   4977  1 001453   200007 236100                    LDQ     K,,AUTO
         1 001454   200021 402100                    MPY     WORDS,,AUTO
         1 001455   000022 736000                    QLS     18
         1 001456   200003 036100                    ADLQ    P$,,AUTO
         1 001457   200004 756100                    STQ     Q$,,AUTO
         1 001460   001466 710000 1                  TRA     s:4980

      644     4978    4                 ELSE Q$ = PINCRW(P$, K * IMAGE_SIZE) -> PTR_;

   4978  1 001461   200007 236100                    LDQ     K,,AUTO
         1 001462   200023 402100                    MPY     IMAGE_SIZE,,AUTO
         1 001463   200003 470500                    LDP0    P$,,AUTO
         1 001464   000000 236106                    LDQ     0,QL,PR0
         1 001465   200004 756100                    STQ     Q$,,AUTO

      645     4979
      646     4980    4               IF Q$ ~= ADDR(NIL)

   4980  1 001466   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001467   001511 600000 1                  TZE     s:4993
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:85   

      647     4981    5                 THEN DO;

      648     4982
      649     4983    5                  BLOQ_LEN = (WORDS * 4);

   4983  1 001470   200021 235100                    LDA     WORDS,,AUTO
         1 001471   000002 735000                    ALS     2
         1 001472   200014 755100                    STA     BLOQ_LEN,,AUTO

      650     4984
      651     4985    5                  PINCRW(B$PS0$, OFFSET) -> BLOQ = Q$ -> BLOQ;

   4985  1 001473   200016 235100                    LDA     OFFSET,,AUTO
         1 001474   000002 735000                    ALS     2
         1 001475   200004 470500                    LDP0    Q$,,AUTO
         1 001476   200014 720100                    LXL0    BLOQ_LEN,,AUTO
         1 001477   000000 471400 xsym               LDP1    B$PS0$
         1 001500   040145 100540                    MLR     fill='040'O
         1 001501   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         1 001502   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=*X0

      652     4986
      653     4987    5                  OFFSET = OFFSET + WORDS;

   4987  1 001503   200016 236100                    LDQ     OFFSET,,AUTO
         1 001504   200021 036100                    ADLQ    WORDS,,AUTO
         1 001505   200016 756100                    STQ     OFFSET,,AUTO

      654     4988
      655     4989    5                  ENTRY_COUNT = ENTRY_COUNT + 1;

   4989  1 001506   200020 235100                    LDA     ENTRY_COUNT,,AUTO
         1 001507   000001 035007                    ADLA    1,DL
         1 001510   200020 755100                    STA     ENTRY_COUNT,,AUTO

      656     4990
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:86   
      657     4991    5                  END;

      658     4992
      659     4993    4               END;

   4993  1 001511   200007 235100                    LDA     K,,AUTO
         1 001512   000001 035007                    ADLA    1,DL
         1 001513   200007 755100                    STA     K,,AUTO
         1 001514   200007 236100                    LDQ     K,,AUTO
         1 001515   001520 604000 1                  TMI     s:4997
         1 001516   200022 116100                    CMPQ    ENTRIES,,AUTO
         1 001517   001451 604000 1                  TMI     s:4976

      660     4994
      661     4995    3            END;

      662     4996
      663     4997    2         B$PS0$ -> WORD_(HEADER_OFFSET) = ENTRY_NUM;

   4997  1 001520   200015 235100                    LDA     ENTRY_NUM,,AUTO
         1 001521   000000 470400 xsym               LDP0    B$PS0$
         1 001522   200017 720100                    LXL0    HEADER_OFFSET,,AUTO
         1 001523   000000 755110                    STA     0,X0,PR0

      664     4998    2         B$PS0$ -> WORDX.HW1_(HEADER_OFFSET + 1) = ENTRY_COUNT;

   4998  1 001524   200020 721100                    LXL1    ENTRY_COUNT,,AUTO
         1 001525   000000 470400 xsym               LDP0    B$PS0$
         1 001526   000001 741110                    STX1    1,X0,PR0

      665     4999    2         B$PS0$ -> WORDX.HW2_(HEADER_OFFSET + 1) = WORDS;

   4999  1 001527   200021 722100                    LXL2    WORDS,,AUTO
         1 001530   000000 470400 xsym               LDP0    B$PS0$
         1 001531   000001 442110                    SXL2    1,X0,PR0

      666     5000
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:87   
      667     5001    2         ENTRY_NUM = ENTRY_NUM + 1;

   5001  1 001532   000001 035007                    ADLA    1,DL
         1 001533   200015 755100                    STA     ENTRY_NUM,,AUTO

      668     5002
      669     5003    2         END;

   5003  1 001534   200015 236100                    LDQ     ENTRY_NUM,,AUTO
         1 001535   000003 402007                    MPY     3,DL
         1 001536   000000 236006 xsym               LDQ     P$TABLE,QL
         1 001537   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001540   001341 601000 1                  TNZ     s:4941

      670     5004
      671     5005    1      IF OFFSET > 0

   5005  1 001541   200016 235100                    LDA     OFFSET,,AUTO
         1 001542   001546 604400 1                  TMOZ    s:5009

      672     5006    1        THEN
      673     5007    1         B$PS0$ -> WORD_(OFFSET) = -1;

   5007  1 001543   000001 336007                    LCQ     1,DL
         1 001544   000000 470400 xsym               LDP0    B$PS0$
         1 001545   000000 756105                    STQ     0,AL,PR0

      674     5008
      675     5009    1      IF TOO_SMALL

   5009  1 001546   200013 235100                    LDA     TOO_SMALL,,AUTO
         1 001547   001563 600000 1                  TZE     s:5019

      676     5010    1        THEN
      677     5011              %P_ERR    (CODE=%E$LD);

   5013  1 001550   000000 236000 0                  LDQ     MY_ERROR
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:88   
         1 001551   200025 756100                    STQ     ERROR,,AUTO

   5014  1 001552   000005 376000 2                  ANQ     5
         1 001553   000070 276007                    ORQ     56,DL
         1 001554   200025 756100                    STQ     ERROR,,AUTO

   5015  1 001555   200025 236100                    LDQ     ERROR,,AUTO
         1 001556   000000 470400 xsym               LDP0    B$JIT$
         1 001557   000012 756100                    STQ     10,,PR0

   5016  1 001560   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 001561   000000 701000 xent               TSX1    UDB$PMMEXIT
         1 001562   000000 011000                    NOP     0

      678     5019    1      RETURN;

   5019  1 001563   000000 702200 xent               TSX2  ! X66_ARET

      679     5020        %EJECT;
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:89   
      680     5021    1   CVM_ERROR:
      681     5022           %P_PASS_ERR;

   5023  1 001564   200025 236100       CVM_ERROR    LDQ     ERROR,,AUTO
         1 001565   000000 470400 xsym               LDP0    B$JIT$
         1 001566   000012 756100                    STQ     10,,PR0

      682     5025    1      CALL SC_PHA212;

   5025  1 001567   000000 713400 xsym               CLIMB   SC_PHA212
         1 001570   000000 600000 xsid               climb   nvectors=         0

      683     5026
      684     5027        /*S*  SCREECH_CODE:  PHA-S$SC212
      685     5028              TYPE:          SCREECH
      686     5029                 MESSAGE:  Unexpected ALTRET by MME$CVM                               */
      687     5030
      688     5031    1   PAGES_TRAMPLED:
      689     5032
      690     5033    1      CALL SC_PHA213;

   5033  1 001571   000000 713400 xsym  PAGES_TRAMP* CLIMB   SC_PHA213
         1 001572   000000 600000 xsid               climb   nvectors=         0

      691     5034
      692     5035        /*S*  SCREECH_CODE:  PHA-S$SC213
      693     5036              TYPE:          SCREECH
      694     5037                 MESSAGE:  Unexpected ALTRET by MMD$RSPP                              */
      695     5038
      696     5039    1   END PHA$ERS;

   5039  1 001573   000000 702200 xent               TSX2  ! X66_ARET

MY_ERROR
 Sect OctLoc
   0     000   201001 000000                                                    ....

PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:90   
(unnamed)
 Sect OctLoc
   0     001   114117 107117   116040 040040   111102 105130   104105 114124    LOGON   IBEXDELT
   0     005   101040 040040   072123 110101   122105 104137   123131 123124    A   :SHARED_SYST
   0     011   105115 040040   072123 110101   122105 104137   123120 105103    EM  :SHARED_SPEC
   0     015   111101 114040                                                    IAL

(unnamed)
 Sect OctLoc
   2     000   000000 000031   000003 006000   000000 006000   000000 006000    ................
   2     004   000000 006000   777777 400007   000027 006000   000000 002000    ................
   2     010   000007 006000   000002 006000   000000 400000   000012 006000    ................
   2     014   000000 006000   000000 006000   000000 006000   000000 006000    ................

PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:91   
--  Include file information  --

   XUD_UTS_M.:E05TOU  is referenced.
   HF_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   HF_LOCK_C.:E05TOU  cannot be made into a system file and is referenced.
   B$USER.:E05TOU  cannot be made into a system file and is referenced.
   B$P.:E05TOU  cannot be made into a system file and is referenced.
   B$MAP.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   P$CP6V_C.:E05TOU  is referenced.
   JG_GHOSTS_C.:E05TOU  is referenced.
   S_GJOB_R.:E05TOU  cannot be made into a system file and is referenced.
   FM_CACHE_R.:E05TOU  cannot be made into a system file and is referenced.
   SS_CNTRLD_R.:E05TOU  cannot be made into a system file and is referenced.
   SS_CNTRL_R.:E05TOU  cannot be made into a system file and is referenced.
   SS_SCHED_R.:E05TOU  cannot be made into a system file and is referenced.
   SS_SCHED_C.:E05TOU  is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   F_ERRORS_C.:E05TOU  is referenced.
   M_ERRORS_C.:E05TOU  is referenced.
   MM_MACRO_M.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   MM$SYSGEN.:E05TOU  is referenced.
   M_INFO_C.:E05TOU  is referenced.
   MM_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   P_PMDAT_C.:E05TOU  is referenced.
   P_PMDAT_R.:E05TOU  cannot be made into a system file and is referenced.
   P_ERRORS_C.:E05TOU  is referenced.
   PH_ERROR.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   UD_EQU_E.:E05TOU  is referenced.
      No diagnostics issued in procedure PHA$ERS.
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:92   

 **** Variables and constants ****

  ****  Section 000 RoData PHA$ERS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT         r     1 MY_ERROR

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    31-0-0/w PTR         r     1 @AVAIL_SIZE               27-0-0/w PTR         r     1 @GATE
    30-0-0/w PTR         r     1 @NEEDED_SIZE              27-0-0/w PTR         r     1 @PARAMETER_NUMBER
    30-0-0/w PTR         r     1 @USER_COUNT               *0-0-0/w UBIN        r     1 AVAIL_SIZE
    14-0-0/w UBIN        r     1 BLOQ_LEN                  22-0-0/w SBIN        r     1 ENTRIES
    20-0-0/w UBIN        r     1 ENTRY_COUNT               15-0-0/w UBIN        r     1 ENTRY_NUM
    25-0-0/b STRC        r     1 ERROR                     *0-0-0/w UBIN        r     1 GATE
    17-0-0/w UBIN        r     1 HEADER_OFFSET              5-0-0/w SBIN        r     1 I
    23-0-0/w SBIN        r     1 IMAGE_SIZE                 6-0-0/w UBIN        r     1 J
     7-0-0/w UBIN        r     1 K                         *0-0-0/w UBIN        r     1 NEEDED_SIZE
    16-0-0/w SBIN        r     1 OFFSET                     3-0-0/w PTR         r     1 P$
    *0-0-0/w UBIN        r     1 PARAMETER_NUMBER           4-0-0/w PTR         r     1 Q$
    24-0-0/w PTR         r     1 SEGP$                     13-0-0/b BIT         r     1 TOO_SMALL
    12-0-0/w SBIN        r     1 UPPER_BOUND               *0-0-0/w SBIN        r     1 USER_COUNT
    21-0-0/w SBIN        r     1 WORDS

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$MOUSE$
     0-0-0/w PTR         r     1 B$MPT$                     0-0-0/w PTR         r     1 B$P$
     0-0-0/w PTR         r     1 B$PS0$                     0-0-0/w PTR         r     1 B$SEGTBL$
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:93   
     0-0-0/w PTR         r     1 B$USRT$                    0-0-0/w UBIN        r     1 B_MUAIS
     0-0-0/w UBIN        r     1 B_PATCHI                   0-0-0/w SBIN        r     1 FMC_CACHEPGCNT
     0-0-0/w PTR         r     1 FMC_CACHEPGCNT$
     0-0-0/w STRC(72)    r     1 H_DPS8000_SCU_INFO(0:1)
     0-0-0/w BIT         r     1 H_RPM_FLG                  0-0-0/w UBIN        r     1 MM_AARD
     0-0-0/w SBIN        r     1 MM_AUTO                    0-0-0/w SBIN        r     1 MM_AUTOINUSE
     0-0-0/w SBIN        r     1 MM_BPPC                    0-0-0/w PTR         r     1 MM_BYP$
     0-0-0/w STRC(288)   r     1 MM_CGQD                    0-0-0/w PTR         r     1 MM_CGQD$
     0-0-0/b STRC        r     1 MM_FPMC                    0-0-0/w SBIN        r     1 MM_FPPC
     0-0-0/w SBIN        r     1 MM_GAPSZ                   0-0-0/w UBIN        r     1 MM_HELD
     0-0-0/w SBIN        r     1 MM_IN_TEST                 0-0-0/w SBIN        r     1 MM_IOCC
     0-0-0/d BIT (72)    r     1 MM_LOCK                    0-0-0/w SBIN        r     1 MM_NCQPGS
     0-0-0/w SBIN        r     1 MM_NCWSQ                   0-0-0/w SBIN        r     1 MM_PCORE
     0-0-0/w SBIN        r     1 MM_RSVP                    0-0-0/w SBIN        r     1 MM_SHAREDS
     0-0-0/w SBIN        r     1 MM_SHAREDSUSE              0-0-0/w SBIN        r     1 MM_SPPC
     0-0-0/w SBIN        r     1 MM_SUSPECTS                0-0-0/w UBIN        r     1 MM_XDEL
     0-0-0/w STRC(108)   r     1 P$TABLE(0:0)
     0-0-0/w BIT         r     1 PH_CPU_MOUSED(0:3)
     0-0-0/b BIT (72)    r     1 PH_MOUSE_LOCK              0-0-0/w SBIN        r     1 PH_MOUSE_USERS
     0-0-0/w UBIN        r     1 PH_MOUSE_USER_NUMBER
     0-0-0/w UBIN        r     1 PH_MUS_PAGES(0:0)
     0-0-0/w UBIN        r     1 P_AVAIL_MEM                0-0-0/w SBIN        r     1 P_GATE
     0-0-0/w UBIN        r     1 P_MAXPROCS                 0-0-0/w UBIN        r     1 P_NOW
     0-0-0/w PTR         r     1 P_RESOURCE$                0-0-0/w SBIN        r     1 P_STARTUP
     0-0-0/w SBIN        r     1 P_STOPTIME(0:7)
     0-0-0/w UBIN        r     1 P_S_MIDLTIME(0:7)
     0-0-0/w UBIN        r     1 P_S_MIDLWIO(0:7)
     0-0-0/w UBIN        r     1 P_S_MIDLWRES(0:7)
     0-0-0/w UBIN        r     1 P_S_MIDLWRESIO(0:7)
     0-0-0/w UBIN        r     1 P_S_MXEQTIME(0:7)
     0-0-0/w UBIN        r     1 P_S_USRVTIME(0:7)
     0-0-0/w UBIN        r     1 P_S_UXEQTIME(0:7)
     0-0-0/w SBIN        r     1 S_MIDLTIME(0:7)
     0-0-0/w SBIN        r     1 S_MIDLWIO(0:7)
     0-0-0/w SBIN        r     1 S_MIDLWRES(0:7)
     0-0-0/w SBIN        r     1 S_MIDLWRESIO(0:7)
     0-0-0/w SBIN        r     1 S_MIDUSEC(0:7)
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:94   
     0-0-0/w SBIN        r     1 S_MIIRUSEC(0:7)
     0-0-0/w SBIN        r     1 S_MIIUSEC(0:7)
     0-0-0/w UBIN        r     1 S_MING
     0-0-0/w SBIN        r     1 S_MIRUSEC(0:7)
     0-0-0/w SBIN        r     1 S_MXEQTIME(0:7)
     0-0-0/w SBIN        r     1 S_MXUSEC(0:7)
     0-0-0/w UBIN        r     1 S_NSCPU                    0-0-0/w UBIN        r     1 S_PNO
     0-0-0/w SBIN        r     1 S_USRVTIME(0:7)
     0-0-0/w SBIN        r     1 S_USUSEC(0:7)
     0-0-0/w SBIN        r     1 S_UXEQTIME(0:7)
     0-0-0/w SBIN        r     1 S_UXUSEC(0:7)
     0-0-0/b SBIN        r     1 UD_MAXTAB(0:15)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/w STRC        r     1 B$MAP(0:1023)
     0-0-0/d STRC(1224)  r     1 B$P(0:0)                   0-0-0/w STRC(270)   r     1 B$PROCDS
     0-0-0/w STRC(576)   r     1 B$USER(0:0)                0-0-0/c ACHR        r     1 BLOQ
     0-0-0/w STRC        r     1 FPT$SMOUSE_V               0-0-0/w STRC(72)    r     1 PATCH
     0-0-0/w STRC(108)   r     1 PH_MOUSE_ENTRY             0-0-0/w STRC(1296)  r     1 PH_MOUSE_TBL
     0-0-0/w PTR         r     1 PTR_                       0-0-0/w STRC(2268)  r     1 P_RESOURCE
     0-0-0/w STRC        r     1 SEGPT(0:0)                 0-0-0/w STRC(72)    r     1 SEGTBL
     0-0-0/w STRC        r     1 WORDX(0:0)                 0-0-0/w SBIN        r     1 WORD_(0:0)


   Procedure PHA$ERS requires 892 words for executable code.
   Procedure PHA$ERS requires 32 words of local(AUTO) storage.

    No errors detected in file PHA$ERS.:E05TSI    .
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:95   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:96   
          MINI XREF LISTING

ACQUIRE
      4406**PROC     4495--CALL     4628--CALL     4698--CALL
AVAIL_SIZE IN PROCEDURE TEST_BUFFER
      4459**DCL      4455--PROC     4461<>CALL     4463<<ASSIGN   4463>>ASSIGN   4465>>IF       4472<<ASSIGN
B$DO.ECCINFO
      3988**DCL      3989--REDEF
B$JIT.CPFLAGS1.SLEAZE
      3472**DCL      3472--REDEF
B$JIT.ERR
      3378**DCL      4507<<ASSIGN   4603<<ASSIGN   4640<<ASSIGN   4708<<ASSIGN   4733<<ASSIGN   5015<<ASSIGN
      5023<<ASSIGN
B$JIT.ERR.MID
      3379**DCL      3379--REDEF
B$JIT.JRESPEAK
      3540**DCL      3541--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
      3649**DCL      3649--REDEF    3650--REDEF
B$JIT.PNR
      3553**DCL      3553--REDEF
B$JIT.TSLINE
      3647**DCL      3648--REDEF
B$JIT$
      4289**DCL      3373--IMP-PTR  4507>>ASSIGN   4603>>ASSIGN   4640>>ASSIGN   4708>>ASSIGN   4733>>ASSIGN
      5015>>ASSIGN   5023>>ASSIGN
B$MAP.RPN
      3696**DCL      4869>>IF       4897>>IF       4904>>IF
B$MAP.SCTRL
      3697**DCL      3698--REDEF
B$MOUSE$
      4290**DCL      4369--IMP-PTR  4538>>ASSIGN   4545>>ASSIGN   4545>>ASSIGN   4549>>ASSIGN   4550>>ASSIGN
      4557>>ASSIGN   4565>>ASSIGN   4566>>ASSIGN   4722>>ASSIGN
B$MPT$
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:97   
      4293**DCL      4869>>IF       4897>>IF       4904>>IF
B$P.DSDATA
      3771**DCL      4916--ASSIGN
B$P.DSZ
      3777**DCL      4915>>ASSIGN
B$P.NAME.TEXT
      3787**DCL      4921>>IF       4921>>IF       4921>>IF       4921>>IF       4921>>IF
B$P.PPC
      3765**DCL      4915>>ASSIGN
B$P$
      3815**DCL      4915>>ASSIGN   4915>>ASSIGN   4916>>ASSIGN   4921>>IF       4921>>IF       4921>>IF
      4921>>IF       4921>>IF
B$PROCDS.DSSIZE
      3803**DCL      4918>>ASSIGN
B$PS0$
      4291**DCL      4525>>ASSIGN   4722>>ASSIGN   4985>>ASSIGN   4997>>ASSIGN   4998>>ASSIGN   4999>>ASSIGN
      5007>>ASSIGN
B$SEGTBL$
      4342**DCL      4343--IMP-PTR  4884>>ASSIGN   4884>>ASSIGN   4885>>ASSIGN
B$U.MISC
      3967**DCL      3968--REDEF
B$USER.MISC
      4043**DCL      4044--REDEF
B$USER.PCT
      4027**DCL      4849>>ASSIGN   4857>>ASSIGN
B$USER.US
      4030**DCL      4847>>IF       4855>>IF
B$USRT$
      4055**DCL      4847>>IF       4849>>ASSIGN   4855>>IF       4857>>ASSIGN
BLOQ
      4327**DCL      4722<<ASSIGN   4722>>ASSIGN   4985<<ASSIGN   4985>>ASSIGN
BLOQ_LEN
      4326**DCL      4327--IMP-SIZ  4720<<ASSIGN   4722>>ASSIGN   4722>>ASSIGN   4983<<ASSIGN   4985>>ASSIGN
      4985>>ASSIGN
B_MUAIS
      4296**DCL      4854>>DOINDEX
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:98   
B_PATCHI
      4297**DCL      4876--ASSIGN   4876--ASSIGN
CVM_ERROR
      5023**LABEL    4532--CALLALT  4587--CALLALT  4659--CALLALT
ENTRIES
      4333**DCL      4952<<ASSIGN   4953<<ASSIGN   4967>>IF       4971<<ASSIGN   4974>>DOINDEX
ENTRY_COUNT
      4331**DCL      4963<<ASSIGN   4989<<ASSIGN   4989>>ASSIGN   4998>>ASSIGN
ENTRY_NUM
      4328**DCL      4770<<ASSIGN   4939>>DOWHILE  4941>>ASSIGN   4943>>DOINDEX  4947>>ASSIGN   4949>>ASSIGN
      4951>>IF       4952>>ASSIGN   4953>>ASSIGN   4997>>ASSIGN   5001<<ASSIGN   5001>>ASSIGN
ERROR
      4358**DCL      4505<<ASSIGN   4507>>ASSIGN   4532<>CALL     4587<>CALL     4601<<ASSIGN   4603>>ASSIGN
      4638<<ASSIGN   4640>>ASSIGN   4659<>CALL     4706<<ASSIGN   4708>>ASSIGN   4731<<ASSIGN   4733>>ASSIGN
      5013<<ASSIGN   5015>>ASSIGN   5023>>ASSIGN
ERROR.TYPE
      4362**DCL      4506<<ASSIGN   4602<<ASSIGN   4639<<ASSIGN   4707<<ASSIGN   4732<<ASSIGN   5014<<ASSIGN
FMC_CACHEPGCNT
      2944**DCL      4815>>ASSIGN   4818>>ASSIGN
FMC_CACHEPGCNT$
      2944**DCL      2944--IMP-PTR  2944--REDEF
FPT$SMOUSE_V.SYSID
      4366**DCL      4525>>ASSIGN
GATE IN PROCEDURE ACQUIRE
      4408**DCL      4406--PROC     4414<>CALL     4427<>CALL
HEADER_OFFSET
      4330**DCL      4961<<ASSIGN   4997>>ASSIGN   4998>>ASSIGN   4999>>ASSIGN
HFC$CACHECLR
      4312**DCL-ENT  4780--CALL
HFC$LOCK
      4070**DCL-ENT  4414--CALL     4777--CALL     4812--CALL
HFC$UNLOCK
      4070**DCL-ENT  4427--CALL     4501--CALL     4522--CALL     4634--CALL     4654--CALL     4702--CALL
      4725--CALL     4808--CALL     4936--CALL
HFF$DSIZ
      4306**DCL-ENT  4461--CALL
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:99   
H_DPS8000_SCU_INFO.SCU_STATUS.REL_BIT
      4103**DCL      4831>>IF       4831>>IF
H_RPM_FLG
      4083**DCL      4830>>IF
I
      4315**DCL      4419<<ASSIGN   4423>>IF       4497>>IF       4527<<DOINDEX  4529>>CALL     4532>>CALL
      4532>>CALL     4537<<DOINDEX  4538>>ASSIGN   4545<<ASSIGN   4549>>ASSIGN   4555<<ASSIGN   4555>>ASSIGN
      4561<<ASSIGN   4561>>ASSIGN   4565>>ASSIGN   4568>>IF       4585>>DOINDEX  4657<<DOINDEX  4659>>CALL
      4662>>CALL     4665>>ASSIGN   4700>>IF       4782<<DOINDEX  4784>>ASSIGN   4784>>ASSIGN   4784>>ASSIGN
      4785>>ASSIGN   4785>>ASSIGN   4785>>ASSIGN   4786>>ASSIGN   4786>>ASSIGN   4786>>ASSIGN   4787>>ASSIGN
      4787>>ASSIGN   4787>>ASSIGN   4788>>ASSIGN   4788>>ASSIGN   4788>>ASSIGN   4789>>ASSIGN   4789>>ASSIGN
      4789>>ASSIGN   4790>>ASSIGN   4790>>ASSIGN   4790>>ASSIGN   4797>>CALL     4798>>ASSIGN   4798>>ASSIGN
      4798>>ASSIGN   4798>>ASSIGN   4798>>ASSIGN   4798>>ASSIGN   4798>>ASSIGN   4798>>ASSIGN   4798>>ASSIGN
      4802>>IF       4803>>ASSIGN   4846<<DOINDEX  4847>>IF       4849>>ASSIGN   4854<<DOINDEX  4855>>IF
      4857>>ASSIGN   4868<<DOINDEX  4869>>IF       4885<<ASSIGN   4886>>DOUNTIL  4887>>IF       4891<<ASSIGN
      4891>>ASSIGN   4896<<DOINDEX  4897>>IF       4903<<DOINDEX  4904>>IF       4913<<DOINDEX  4915>>ASSIGN
      4915>>ASSIGN   4916>>ASSIGN   4921>>IF       4921>>IF       4921>>IF       4921>>IF       4921>>IF
      4943<<DOINDEX
IMAGE_SIZE
      4334**DCL      4949<<ASSIGN   4976>>IF       4978>>ASSIGN
J
      4316**DCL      4547<<DOINDEX  4549>>ASSIGN   4550>>ASSIGN   4550>>ASSIGN   4552>>IF       4552>>IF
      4555>>ASSIGN   4557>>ASSIGN   4561>>ASSIGN   4585<<DOINDEX  4587>>CALL     4590>>CALL     4593>>ASSIGN
      4883<<DOINDEX  4884>>ASSIGN   4885>>ASSIGN
K
      4317**DCL      4917<<DOINDEX  4918>>ASSIGN   4974<<DOINDEX  4977>>ASSIGN   4978>>ASSIGN
MM$DESC.BOUND
      1767**DCL      1768--REDEF
MM$DESC.FLGS
      1768**DCL      1768--REDEF
MM$PPUT.USER#
      1756**DCL      1756--REDEF
MMD$RSPP
      4304**DCL-ENT  4590--CALL     4662--CALL
MMD$STLPP
      4303**DCL-ENT  4529--CALL
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:100  
MME$CVM
      4305**DCL-ENT  4532--CALL     4587--CALL     4659--CALL
MM_AARD
      1691**DCL      4837>>ASSIGN
MM_AUTO
      1686**DCL      4815>>ASSIGN   4839>>ASSIGN
MM_AUTOINUSE
      1686**DCL      4840>>ASSIGN
MM_BPPC
      1686**DCL      4820>>ASSIGN
MM_BYP$
      1687**DCL      1687--IMP-PTR
MM_CGQD.FPPC
      1709**DCL      4815>>ASSIGN   4823>>ASSIGN
MM_CGQD.UPPC
      1718**DCL      4843>>ASSIGN
MM_CGQD$
      4229**DCL      4243--IMP-PTR
MM_FPMC.RPN
      1693**DCL      4869>>IF       4887>>IF       4897>>IF       4904>>IF
MM_FPPC
      1684**DCL      4815>>ASSIGN   4823>>ASSIGN
MM_GAPSZ
      1689**DCL      4833>>ASSIGN
MM_HELD
      1690**DCL      4835>>ASSIGN
MM_IN_TEST
      1686**DCL      4822>>ASSIGN
MM_IOCC
      1686**DCL      4817>>ASSIGN
MM_LOCK
      1684**DCL      4812<>CALL     4936<>CALL
MM_NCQPGS
      1692**DCL      4836>>ASSIGN
MM_NCWSQ
      1692**DCL      4861>>ASSIGN
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:101  
MM_PCORE
      1689**DCL      4829>>ASSIGN   4873>>ASSIGN
MM_RSVP
      1690**DCL      4834>>ASSIGN
MM_SHAREDS
      1687**DCL      4841>>ASSIGN
MM_SHAREDSUSE
      1687**DCL      4842>>ASSIGN
MM_SPPC
      1685**DCL      4819>>ASSIGN
MM_SUSPECTS
      1686**DCL      4821>>ASSIGN
MM_XDEL
      1691**DCL      4838>>ASSIGN
MY_ERROR
      4383**DCL      4505>>ASSIGN   4601>>ASSIGN   4638>>ASSIGN   4706>>ASSIGN   4731>>ASSIGN   5013>>ASSIGN
NEEDED_SIZE IN PROCEDURE TEST_BUFFER
      4458**DCL      4455--PROC     4465>>IF       4472>>ASSIGN
NO_MOUSE_PAGE
      4585**LABEL    4529--CALLALT
OFFSET
      4329**DCL      4769<<ASSIGN   4955>>IF       4961>>ASSIGN   4965<<ASSIGN   4965>>ASSIGN   4967>>IF
      4971>>ASSIGN   4985>>ASSIGN   4987<<ASSIGN   4987>>ASSIGN   5005>>IF       5007>>ASSIGN
P$
      4313**DCL      4941<<ASSIGN   4944<<ASSIGN   4944>>ASSIGN   4977>>ASSIGN   4978>>ASSIGN
P$TABLE.ADDR$
      1240**DCL      4939>>DOWHILE  4941>>ASSIGN
P$TABLE.ENTRIES
      1242**DCL      4952>>ASSIGN
P$TABLE.ENTRIES$
      1241**DCL      4951>>IF       4953>>ASSIGN
P$TABLE.IMAGE_SIZE
      1245**DCL      4949>>ASSIGN
P$TABLE.INDIRECT
      1244**DCL      4943>>DOINDEX
P$TABLE.WORDS
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:102  
      1243**DCL      4947>>ASSIGN
PAGES_TRAMPLED
      5033**LABEL    4590--CALLALT  4662--CALLALT
PARAMETER_NUMBER IN PROCEDURE TEST_BUFFER
      4457**DCL      4455--PROC     4461<>CALL
PATCH.NEXT
      4338**DCL      4876>>ASSIGN
PATCH.SIZE
      4340**DCL      4876>>ASSIGN
PH_CPU_MOUSED
      1294**DCL      4541<<ASSIGN   4543<<ASSIGN
PH_MOUSE_ENTRY
      1286**DCL      4555--ASSIGN   4561--ASSIGN
PH_MOUSE_LOCK
      1293**DCL      4495<>CALL     4501<>CALL     4522<>CALL     4628<>CALL     4634<>CALL     4654<>CALL
      4698<>CALL     4702<>CALL     4725<>CALL
PH_MOUSE_TBL
      4369**DCL      4545--ASSIGN
PH_MOUSE_TBL.FCG.BREAKDOWN
      4375**DCL      4557<<ASSIGN
PH_MOUSE_TBL.FCG.MAX_FPT
      4376**DCL      4550<<ASSIGN
PH_MOUSE_TBL.FCG.OFFSET
      4374**DCL      4549<<ASSIGN
PH_MOUSE_TBL.FCGS
      4372**DCL      4566<<ASSIGN
PH_MOUSE_TBL.PMME
      4378**DCL      4545--ASSIGN
PH_MOUSE_TBL.TABLE_SIZE
      4371**DCL      4565<<ASSIGN
PH_MOUSE_USERS
      1283**DCL      4495<>CALL     4519<<ASSIGN   4579<<ASSIGN   4597<<ASSIGN   4628<>CALL     4630>>IF
      4651<<ASSIGN   4669<<ASSIGN   4698<>CALL
PH_MOUSE_USER_NUMBER
      1295**DCL      4525<<ASSIGN
PH_MUS_PAGES
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:103  
      1285**DCL      4529<>CALL     4532<>CALL     4590<>CALL     4593<<ASSIGN   4662<>CALL     4665<<ASSIGN
PMC$FIXDEV
      4307**DCL-ENT  4772--CALL
PTR_
      4325**DCL      4944>>ASSIGN   4978>>ASSIGN
P_AVAIL_MEM
      1278**DCL      4815<<ASSIGN
P_GATE
      1275**DCL      4777<>CALL     4808<>CALL
P_MAXPROCS
      3809**DCL      4913>>DOINDEX
P_NOW
      1274**DCL      4774<>CALL     4797<>CALL
P_NSCPU
      1276**DCL      1277--REDEF
P_RESOURCE.PAGES.AARDSIZE
      1132**DCL      4837<<ASSIGN
P_RESOURCE.PAGES.AUTOAVAIL
      1137**DCL      4839<<ASSIGN
P_RESOURCE.PAGES.AUTOINUSE
      1138**DCL      4840<<ASSIGN
P_RESOURCE.PAGES.BPPC
      1122**DCL      4820<<ASSIGN
P_RESOURCE.PAGES.CGQPGS
      1144**DCL      4843<<ASSIGN
P_RESOURCE.PAGES.CONTEXT
      1142**DCL      4861<<ASSIGN   4871<<ASSIGN   4871>>ASSIGN   4873<<ASSIGN   4873>>ASSIGN
P_RESOURCE.PAGES.FPPC
      1125**DCL      4823<<ASSIGN
P_RESOURCE.PAGES.GHOSTSIZE
      1134**DCL      4845<<ASSIGN   4849<<ASSIGN   4849>>ASSIGN
P_RESOURCE.PAGES.HELD
      1129**DCL      4835<<ASSIGN
P_RESOURCE.PAGES.IN_TEST
      1124**DCL      4822<<ASSIGN
P_RESOURCE.PAGES.IOCC
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:104  
      1119**DCL      4817<<ASSIGN
P_RESOURCE.PAGES.IOCM
      1120**DCL      4818<<ASSIGN
P_RESOURCE.PAGES.MONDSSIZE
      1135**DCL      4895<<ASSIGN   4899<<ASSIGN   4899>>ASSIGN
P_RESOURCE.PAGES.MONSIZE
      1143**DCL      4876<<ASSIGN   4889<<ASSIGN   4889>>ASSIGN
P_RESOURCE.PAGES.NCQPGS
      1131**DCL      4836<<ASSIGN
P_RESOURCE.PAGES.PCORE
      1126**DCL      4829<<ASSIGN   4833<<ASSIGN   4833>>ASSIGN
P_RESOURCE.PAGES.PROCSIZE
      1146**DCL      4910<<ASSIGN   4930<<ASSIGN   4930>>ASSIGN
P_RESOURCE.PAGES.RPROCSIZE
      1145**DCL      4909<<ASSIGN   4927<<ASSIGN   4927>>ASSIGN
P_RESOURCE.PAGES.RSVP
      1128**DCL      4834<<ASSIGN
P_RESOURCE.PAGES.SHAREDSAVAIL
      1139**DCL      4841<<ASSIGN
P_RESOURCE.PAGES.SHAREDSIZE
      1147**DCL      4911<<ASSIGN
P_RESOURCE.PAGES.SHAREDSUSE
      1140**DCL      4842<<ASSIGN
P_RESOURCE.PAGES.SPPC
      1121**DCL      4819<<ASSIGN
P_RESOURCE.PAGES.SUSPECTS
      1123**DCL      4821<<ASSIGN
P_RESOURCE.PAGES.TIGRSIZE
      1136**DCL      4902<<ASSIGN   4906<<ASSIGN   4906>>ASSIGN
P_RESOURCE.PAGES.USERSIZE
      1141**DCL      4853<<ASSIGN   4857<<ASSIGN   4857>>ASSIGN
P_RESOURCE.PAGES.XDELTASIZE
      1133**DCL      4838<<ASSIGN
P_RESOURCE.RES
      1149**DCL      1216--REDEF
P_RESOURCE$
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:105  
      1229**DCL      1117--IMP-PTR  4817>>ASSIGN   4818>>ASSIGN   4819>>ASSIGN   4820>>ASSIGN   4821>>ASSIGN
      4822>>ASSIGN   4823>>ASSIGN   4829>>ASSIGN   4833>>ASSIGN   4833>>ASSIGN   4834>>ASSIGN   4835>>ASSIGN
      4836>>ASSIGN   4837>>ASSIGN   4838>>ASSIGN   4839>>ASSIGN   4840>>ASSIGN   4841>>ASSIGN   4842>>ASSIGN
      4843>>ASSIGN   4845>>ASSIGN   4849>>ASSIGN   4849>>ASSIGN   4853>>ASSIGN   4857>>ASSIGN   4857>>ASSIGN
      4861>>ASSIGN   4871>>ASSIGN   4871>>ASSIGN   4873>>ASSIGN   4873>>ASSIGN   4876>>ASSIGN   4889>>ASSIGN
      4889>>ASSIGN   4895>>ASSIGN   4899>>ASSIGN   4899>>ASSIGN   4902>>ASSIGN   4906>>ASSIGN   4906>>ASSIGN
      4909>>ASSIGN   4910>>ASSIGN   4911>>ASSIGN   4927>>ASSIGN   4927>>ASSIGN   4930>>ASSIGN   4930>>ASSIGN
P_STARTUP
      1252**DCL      4797<>CALL
P_STOPTIME
      1273**DCL      4797<>CALL     4798<<ASSIGN   4798>>ASSIGN   4802>>IF       4803<<ASSIGN
P_S_MIDLTIME
      1260**DCL      4787<<ASSIGN   4798>>ASSIGN
P_S_MIDLWIO
      1261**DCL      4788<<ASSIGN   4798>>ASSIGN
P_S_MIDLWRES
      1262**DCL      4789<<ASSIGN   4798>>ASSIGN
P_S_MIDLWRESIO
      1263**DCL      4790<<ASSIGN   4798>>ASSIGN
P_S_MXEQTIME
      1259**DCL      4786<<ASSIGN   4798>>ASSIGN
P_S_USRVTIME
      1258**DCL      4785<<ASSIGN   4798>>ASSIGN
P_S_UXEQTIME
      1257**DCL      4784<<ASSIGN   4798>>ASSIGN
P_UPTIME
      1265**DCL      1266--REDEF
Q$
      4314**DCL      4916<<ASSIGN   4918>>ASSIGN   4977<<ASSIGN   4978<<ASSIGN   4980>>IF       4985>>ASSIGN
SC_PHA212
      4300**DCL-ENT  5025--CALL
SC_PHA213
      4301**DCL-ENT  5033--CALL
SC_PHA216
      4302**DCL-ENT  4569--CALL
SEGP$
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:106  
      4348**DCL      4349--IMP-PTR  4884<<ASSIGN   4887>>IF
SEGPT.RPN
      4350**DCL      4887>>IF
SEGTBL.NODES.WOFF
      4346**DCL      4884>>ASSIGN
SEGTBL.NODES.WSIZ
      4347**DCL      4885>>ASSIGN
SSR$REG
      4298**DCL-ENT  4430--CALL
SSS$BLOCK
      4309**DCL-ENT  4475--CALL
SSS$CACHE
      4311**DCL-ENT  4421--CALL
SSS$CACHEBP
      4310**DCL-ENT  4417--CALL
SSS$CURTIME
      4308**DCL-ENT  4774--CALL
S_MIDLTIME
      2928**DCL      4787>>ASSIGN
S_MIDLWIO
      2928**DCL      4788>>ASSIGN
S_MIDLWRES
      2928**DCL      4789>>ASSIGN
S_MIDLWRESIO
      2929**DCL      4790>>ASSIGN
S_MIDUSEC
      2926**DCL      4787>>ASSIGN
S_MIIRUSEC
      2927**DCL      4790>>ASSIGN
S_MIIUSEC
      2926**DCL      4788>>ASSIGN
S_MING
      3045**DCL      4846>>DOINDEX  4854>>DOINDEX
S_MIRUSEC
      2927**DCL      4789>>ASSIGN
S_MXEQTIME
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:107  
      2928**DCL      4786>>ASSIGN
S_MXUSEC
      2926**DCL      4786>>ASSIGN
S_NSCPU
      2922**DCL      4782>>DOINDEX  4861>>ASSIGN
S_PNO
      4336**DCL      4543>>ASSIGN
S_USRVTIME
      2926**DCL      4785>>ASSIGN
S_USUSEC
      2927**DCL      4785>>ASSIGN
S_UXEQTIME
      2925**DCL      4784>>ASSIGN
S_UXUSEC
      2927**DCL      4784>>ASSIGN
TEST_BUFFER
      4455**PROC     4695--CALL     4765--CALL
TOO_SMALL
      4321**DCL      4467<<ASSIGN   4471<<ASSIGN   4728>>IF       4767<<ASSIGN   4957<<ASSIGN   4970<<ASSIGN
      5009>>IF
UDB$PMMEXIT
      4357**DCL-ENT  4508--CALL     4604--CALL     4641--CALL     4709--CALL     4734--CALL     5016--CALL
UD_MAXTAB
      4335**DCL      4550>>ASSIGN   4555>>ASSIGN   4561>>ASSIGN
UPPER_BOUND
      4320**DCL      4695<>CALL     4720>>ASSIGN   4765<>CALL     4955>>IF       4967>>IF       4971>>ASSIGN
USER_COUNT IN PROCEDURE ACQUIRE
      4409**DCL      4406--PROC     4419>>ASSIGN
WORDS
      4332**DCL      4915<<ASSIGN   4918<<ASSIGN   4918>>ASSIGN   4927>>ASSIGN   4930>>ASSIGN   4947<<ASSIGN
      4967>>IF       4971>>ASSIGN   4977>>ASSIGN   4983>>ASSIGN   4987>>ASSIGN   4999>>ASSIGN
WORDX.HW1_
      4323**DCL      4998<<ASSIGN
WORDX.HW2_
      4324**DCL      4999<<ASSIGN
WORD_
PL6.E3A0      #001=PHA$ERS File=PHA$ERS.:E05TSI                                  WED 07/30/97 04:23 Page:108  
      1284**DCL      4538<<ASSIGN   4953>>ASSIGN   4997<<ASSIGN   5007<<ASSIGN
XUD$UTS_DIFF
      4197**DCL-ENT  4797--CALL
