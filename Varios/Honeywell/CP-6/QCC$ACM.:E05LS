VERSION E05

CALF.D00   OU Name=QCC$ACM                 File=QCC$ACM.:E05TSI                 WED JUL 30 '97 05:02 Page:2
                                     1  *M*  QCC$ACM:  Alphanumeric compare.
                                     2  *T***********************************************************
                                     3  *T*                                                         *
                                     4  *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
                                     5  *T*                                                         *
                                     6  *T***********************************************************
                                     7  *
                                     8  *********************************************************************
                                     9  *                                                                   *
                                    10  *             A L P H A N U M E R I C     C O M P A R E             *
                                    11  *                                                                   *
                                    12  *********************************************************************
                                    13  *P*  NAME:         QCC$ACM
                                    14  *P*  PURPOSE:      Compare alphanumeric items.
                                    15  *P*  DESCRIPTION:  This routine makes use of the CIP to compare
                                    16  *P*                alphanumeric strings.  A value is returned
                                    17  *P*                indicating the result of the comparison.
                                    18        LISTINC
                                    19        INCLUDE   QCC_ASMEQU_E
                                     1+ *M*  QCC_ASMEQU_E:  Common EQUates for assembly routines.
                                     2+ *T***********************************************************
                                     3+ *T*                                                         *
                                     4+ *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
                                     5+ *T*                                                         *
                                     6+ *T***********************************************************
         00000000                    7+ ZERO              EQU 0
         00000001                    8+ ONE               EQU 1
         00000002                    9+ TWO               EQU 2
         00000000                   10+ CIP_DESC_STRUC    EQU 0
         00000000                   11+ SOURCE_DESC       EQU 0
         00000006                   12+ SOURCE_PTR        EQU 6
         00000002                   13+ TARGET_DESC       EQU 2
         00000008                   14+ TARGET_PTR        EQU 8
         00000004                   15+ AUX_DESC          EQU 4
         0000000A                   16+ AUX_PTR           EQU 10
         0000000C                   17+ SOURCE_LEN        EQU 12
CALF.D00   OU Name=QCC$ACM                 File=QCC$ACM.:E05TSI                 WED JUL 30 '97 05:02 Page:3
         0000000D                   18+ TARGET_LEN        EQU 13
         0000000E                   19+ AUX_LEN           EQU 14
         0000000C                   20+ ARG_LEN           EQU SOURCE_LEN
         0000000D                   21+ ARG_LIST_LEN      EQU TARGET_LEN
         0000000C                   22+ SOURCE_SHIFT_CNT  EQU SOURCE_LEN
         0000000D                   23+ TARGET_SHIFT_CNT  EQU TARGET_LEN
         0000000E                   24+ AUX_SHIFT_CNT     EQU AUX_LEN
         0000000E                   25+ MOP_LEN           EQU AUX_LEN
         0000000F                   26+ SOURCE_DEC        EQU 15
         00000010                   27+ TARGET_DEC        EQU 16
         00000011                   28+ AUX_DEC           EQU 17
         0000000F                   29+ SOURCE_INX        EQU SOURCE_DEC
         00000010                   30+ TARGET_INX        EQU TARGET_DEC
         00000011                   31+ AUX_INX           EQU AUX_DEC
         00000011                   32+ RESULT_DEC        EQU AUX_DEC
         00000012                   33+ ELEM_LEN          EQU 18
         00000013                   34+ ELEM_LIST_LEN     EQU 19
         00000014                   35+ INT_RESULT_LEN    EQU 20
         00000015                   36+ PIC_STRING_DEC    EQU 21
         00000014                   37+ SRCH_RESULT_NUM   EQU INT_RESULT_LEN
         00000015                   38+ SRCH_RESULT_DISP  EQU PIC_STRING_DEC
         00000014                   39+ VRFY_RESULT_DISP  EQU INT_RESULT_LEN
         00000016                   40+ SIZE_ERROR        EQU 22
         00000016                   41+ FILL              EQU SIZE_ERROR
         00000017                   42+ ROUND             EQU 23
         00000017                   43+ COMP_RESULT       EQU ROUND
         00000017                   44+ TARGET_SIZE       EQU ROUND
                                    20        OUNAME    QCC$ACM
                                    21        ENTDEF    QCC$ACM
                                    22  *D*  NAME:         QCC$ACM
                                    23  *D*  CALL:         CALL QCC$ACM ( cip-desc-struc )
                                    24  *D*  PARAMETERS:   cip-desc-structure contains:
                                    25  *D*                 1. source descriptor
                                    26  *D*                 2. target descriptor
                                    27  *D*                 3. source length
                                    28  *D*                 4. target length
CALF.D00   OU Name=QCC$ACM                 File=QCC$ACM.:E05TSI                 WED JUL 30 '97 05:02 Page:4
                                    29  *D*                 5. source index
                                    30  *D*                 6. target index
                                    31  *D*                 7. fill
                                    32  *D*  INTERFACE:
                                    33  *D*  ENVIRONMENT:  Called by the interpreter on behalf of an FPL
                                    34  *D*                routine; may be called by any language which
                                    35  *D*                which adheres to the standard calling sequence.
                                    36  *D*  INPUT:        cip-desc-struc
                                    37  *D*  OUTPUT:       Result of comparison is returned in cip-desc-struc
                                    38  *D*  SCRATCH:
                                    39  *D*  DESCRIPTION:  This routine provides the caller with the ability
                                    40  *D*                to compare strings of unlimited size.  Since the
                                    41  *D*                CIP can only handle lengths of 255 bytes, this
                                    42  *D*                routine loops to complete the task.  R4 holds the
                                    43  *D*                length of the source comparison string, and R5
                                    44  *D*                contains (in the left half) the length of the
                                    45  *D*                target comparison string.  R1 and R2 are index
                                    46  *D*                registers used to tell the CIP the starting
                                    47  *D*                offsets in the source and target for each ACM.
                                    48  *D*                The caller The caller must specify address
                                    49  *D*                syllables of INDEXED if R1 and R2 are to be used
                                    50  *D*                by the CIP (otherwise these registers are ignored)
                                      ::.
                                    51  *D*                If the source and target lengths are < 255, it
                                    52  *D*                makes no difference if the AS is INDEXED or simply
                                    53  *D*                the default.  If the source and target lenghts are
                                    54  *D*                > 255, then the AS must say INDEXED or the CIP wil
                                      ::l
                                    55  *D*                always operate on the same 255 bytes.  R1 and R2
                                    56  *D*                are updated each time we pass through the loop.
                                    57  *
         000000(0)                  58             SECT      PROC,ZERO
         000000(0)                  59  QCC$ACM    ALIGN     WORD
                                    60  *
 00000   BCC3 0000                  61             LDB,B3    CIP_DESC_STRUC,B3
 00002   E843 000C                  62             LDR,R6    SOURCE_LEN,B3      /* GET LEN OF 1ST OPR */
CALF.D00   OU Name=QCC$ACM                 File=QCC$ACM.:E05TSI                 WED JUL 30 '97 05:02 Page:5
 00004   F843 000D                  63             LDR,R7    TARGET_LEN,B3       /* GET LEN OF 2ST OPR */
 00006   D843 0016                  64             LDR,R5    FILL,B3             /* GET FILL CHARACTER */
 00008   D570 FF00                  65             AND,R5    ='FF00'X            /* AND OUT ANY GARBAGE */
 0000A   9843 000F                  66             LDR,R1    SOURCE_INX,B3       /* INIT 1ST OPR INX REG */
 0000C   A843 0010                  67             LDR,R2    TARGET_INX,B3        /* INIT 2ND OPR INX REG */
 0000E   000C                       68             LRDB          /* LOAD REMOTE BASE DESCRIPTOR REGISTER */
         00000F(0)                  69  LOOP       ALIGN     WORD
                                    70  *
 0000F   E970 00FF                  71             CMR,R6    =255           /* CHECK IF LESS THAN MAX */
 00011   0301 0004                  72             BG        OPR0_LARGE,PREL /* REM LEN OF 1ST OPR > 255 */
                                    73  *
                                    74  * HERE -> (R6) <= 255
                                    75  *
 00013   C856                       76             LDR,R4    R6             /* SET 1ST OPR LEN FOR THIS PASS*
                                      ::/
 00014   83C0 0003                  77             JMP       CHECK_OPR1,PREL /* GO CHECK 2ND OPR LEN */
                                    78  *
         000016(0)                  79  OPR0_LARGE ALIGN     WORD           /* (R6)=LEN OF 1ST OPR > 255 */
                                    80  *
 00016   C870 00FF                  81             LDR,R4    =255
                                    82  *
                                    83  *
         000018(0)                  84  CHECK_OPR1 ALIGN     WORD           /* CHECK REM LEN OF 2ND OPR */
                                    85  *
 00018   F970 00FF                  86             CMR,R7    =255           /* (R7) : 255 ? */
 0001A   0300 000020(0)             87             BG        OPR1_LARGE     /* (R7)=LEN OF 2ND OPR > 255 */
                                    88  *
                                    89  * HERE -> (R7) <= 255
                                    90  *
 0001D   DA57                       91             ADD,R5    R7           /* R5(0:7)=FILL,R5(8:15)=COUNT */
 0001E   83C0 0003                  92             JMP       DO_OPERATION,PREL /* GO DO COMPARE */
                                    93  *
         000020(0)                  94  OPR1_LARGE ALIGN     WORD
                                    95  *
 00020   DA70 00FF                  96             ADD,R5    =255      /* R5(0:7)=FILL,R5(8:15)=COUNT=255 */
                                    97  *
CALF.D00   OU Name=QCC$ACM                 File=QCC$ACM.:E05TSI                 WED JUL 30 '97 05:02 Page:6
                                    98  *
                                    99  *
         000022(0)                 100  DO_OPERATION ALIGN   WORD
                                   101  *
 00022   0022 0000 0010            102             ACM       REMOTE(ZERO),REMOTE(ONE) /* DO (PARTIAL) COMP */
                                   103  *
 00025   9A54                      104             ADD,R1    R4        /* UPDATE INDEX REG FOR 1ST OPR */
 00026   E254                      105             SUB,R6    R4        /* UPDATE REM LENGTH FOR 1ST OPR */
 00027   B855                      106             LDR,R3    R5        /* GET A COPY OF R5 */
 00028   D570 FF00                 107             AND,R5    ='FF00'X  /* LEAVE ONLY FILL INFO IN R5 */
 0002A   B570 00FF                 108             AND,R3    ='FF'X    /* STRIP FILL INFO FROM R3 */
 0002C   AA53                      109             ADD,R2    R3        /* UPDATE INDEX REG FOR 2ND OPR */
 0002D   F253                      110             SUB,R7    R3        /* UPDATE REM LENGTH FOR 1ST OPR */
                                   111  *
                                   112  * NOW CHECK THE RESULT OF CIP/ACM COMPARISON
                                   113  *
 0002E   6301 000D                 114             CBG       GREATER,PREL   /* 1ST OPR > 2ND OPR */
 00030   7301 0010                 115             CBL       LESS,PREL      /* 1ST OPR < 2ND OPR */
                                   116  *
                                   117  *
                                   118  * HERE -> (PARTIAL) STRINGS ARE EQUAL; CHECK IF ANY LENGTH REMAINS
                                   119  * FOR EITHER STRING
                                   120  *
                                   121  *
 00032   6981 FFDC                 122             BNEZ,R6   LOOP,PREL /* 1ST OPR REMAINING LEN ~= 0 */
 00034   7981 FFDA                 123             BNEZ,R7   LOOP,PREL /* 2ND OPR REMAINING LEN ~= 0 */
                                   124  *
                                   125  *
                                   126  * HERE -> STRINGS ARE EQUAL
                                   127  *
 00036   3C02                      128             LDV,R3    =2
 00037   BF43 0017                 129             STR,R3    COMP_RESULT,B3       /* COMP_RESULT <- 2 */
                                   130             INCLUDE   QCC_ASMRET_C       /* INCLUDE FOR NORMAL RET */
                                     1+ *M*  QCC_ASMRET_C:  Common normal RETURN code for assembly routines.
                                     2+ *T***********************************************************
                                     3+ *T*                                                         *
CALF.D00   OU Name=QCC$ACM                 File=QCC$ACM.:E05TSI                 WED JUL 30 '97 05:02 Page:7
                                     4+ *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
                                     5+ *T*                                                         *
                                     6+ *T***********************************************************
 00039   437F                        7+            CSYNC
 0003A   C3C6 0001                   8+            LNJ,B4    1,B6                     /* RETURN(NORMAL) */
                                   131  *
         00003C(0)                 132  GREATER    ALIGN     WORD      /* 1ST OPR > 2ND OPR */
                                   133  *
 0003C   8743 0017                 134             CL        COMP_RESULT,B3       /* COMP_RESULT <- 0 */
                                   135             INCLUDE   QCC_ASMRET_C       /* INCLUDE FOR NORMAL RET */
                                     1+ *M*  QCC_ASMRET_C:  Common normal RETURN code for assembly routines.
                                     2+ *T***********************************************************
                                     3+ *T*                                                         *
                                     4+ *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
                                     5+ *T*                                                         *
                                     6+ *T***********************************************************
 0003E   437F                        7+            CSYNC
 0003F   C3C6 0001                   8+            LNJ,B4    1,B6                     /* RETURN(NORMAL) */
                                   136  *
         000041(0)                 137  LESS       ALIGN     WORD      /* 1ST OPR < 2ND OPR */
                                   138  *
 00041   3C01                      139             LDV,R3    =1
 00042   BF43 0017                 140             STR,R3    COMP_RESULT,B3       /* COMP_RESULT <- 1 */
                                   141             INCLUDE   QCC_ASMRET_C       /* INCLUDE FOR NORMAL RET */
                                     1+ *M*  QCC_ASMRET_C:  Common normal RETURN code for assembly routines.
                                     2+ *T***********************************************************
                                     3+ *T*                                                         *
                                     4+ *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
                                     5+ *T*                                                         *
                                     6+ *T***********************************************************
 00044   437F                        7+            CSYNC
 00045   C3C6 0001                   8+            LNJ,B4    1,B6                     /* RETURN(NORMAL) */
                                   142             END
      No Errors in this assembly.
