

10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       1    
    1      /*M* macro(s) for directory services. */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X*DMR,PLM=5,IND=3,CTI=2,SDI=5,MCL=10,CSI=1,DTI=2,DCI=3,ECI=0,AND */
    8
    9
   10      %EQU XSD_FNC_READ = 1;   /* read specified name or names from the directory*/
   11      %EQU XSD_FNC_SEARCH = 2;                /* search directory using specified*/
   12      %EQU XSD_FNC_MODIFY = 3;                /* modify directory*/
   13      %EQU XSD_FNC_MAX = 3;
   14
   15      %EQU XSD_SUBC_READ = 1;
   16      %EQU XSD_SUBC_COMPARE = 2;
   17      %EQU XSD_SUBC_ABANDON = 3;
   18
   19      %EQU XSD_SUBC_LIST = 4;
   20      %EQU XSD_SUBC_SEARCH = 5;
   21
   22      %EQU XSD_SUBC_ADD_ENTRY = 6;
   23      %EQU XSD_SUBC_REMOVE_ENTRY = 7;
   24      %EQU XSD_SUBC_MODIFY_ENTRY = 8;
   25      %EQU XSD_SUBC_MAX = 8;
   26
   27      %EQU XSD_MODE_NAME = 1;
   28      /* data points to a single o/r name */
   29      %EQU XSD_MODE_ATTR = 2;
   30      /* vector(0) points to o/r name, the next n-1 vectors are redefed
   31         to be a ubin(36) which is the attribute type from XSD_SUBS_C in the
   32         form XSD_AT_?.  The second word of the vector is redefed to be a pointer
   33         to a texth string that is the attribute value */
   34      %EQU XSD_MODE_LIST = 3;
   35      /* vector(0) frames a distribution list.
   36      */
   37
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       2    
   38      /* XSD_SERVICE - MACRO is used to interface to the directory user agent
   39           portion of directory services.  */
   40
   41      %MACRO XSD_SERVICE(NAME=XSD_SERVICE,
   42                          FNC = 0,
   43                          SUBC = 0,
   44                          MODE = 0,
   45                          ATTR# = 0,
   46                          BINDFROM = NIL,
   47                          BINDTO = NIL,
   48                          DIBENTRY= NIL,
   49                          RESULT = NIL,
   50                          UENTADDR = NIL,
   51                          LOCALOKAY(YES='1'B,NO='0'B)='0'B,
   52                          UPDATELOCAL(YES='1'B,NO='0'B)='0'B,
   53                          CHAINOKAY(YES='1'B,NO='0'B)='0'B,
   54                          REFERRAL(YES='1'B,NO='0'B)='0'B,
   55                          ALIAS(YES='1'B,NO='0'B)='1'B,
   56                          LVL= 1,
   57                          ALGN = WALIGNED,
   58                          LAST = ";",
   59                          STCLASS="BASED");
   60
   61
   62       %LSET LISTDIR='0'B;
   63       %LSET LISTEXP='1'B;
   64       %LSET LISTCOM='0'B;
   65       %LSET LISTSUB='1'B;
   66       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   67       %IF (SUBSTR(STR,0,6)='STATIC') OR
   68       (SUBSTR(STR,0,8)='CONSTANT') OR
   69       (SUBSTR(STR,0,3)='EXT');
   70       %LSET INIT=CHARTEXT('INIT');
   71       %LSET ENIT=CHARTEXT('');
   72       %ELSE;
   73       %LSET INIT=CHARTEXT('/*');
   74       %LSET ENIT=CHARTEXT('*/');
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       3    
   75       %ENDIF;
   76
   77      %IF ATTR# > 0;
   78        %LSET NUMVECS = ATTR#-1;
   79      %ELSE;
   80        %LSET NUMVECS = 0;
   81      %ENDIF;
   82
   83      %IF LVL=1;
   84      DCL 1 NAME STCLASS ALGN,
   85      %ELSE;
   86           %(LVL) NAME ALGN,
   87      %ENDIF;
   88
   89           %(LVL+1) %CHARTEXT('FNC') UBIN BYTE CALIGNED %INIT(FNC)%ENIT,
   90           /*K*  indicates which function the dua is to perform.  Equates
   91                 in the form XSD_FNC_?
   92           */
   93           %(LVL+1) %CHARTEXT('SUBC') UBIN BYTE CALIGNED %INIT(SUBC)%ENIT,
   94           /*K*  indicates which subfunction the dua is to perform.
   95                 Equates are in the form XSD_SUBC_?.
   96           */
   97           %(LVL+1) %CHARTEXT('MODE') UBIN BYTE CALIGNED %INIT(MODE)%ENIT,
   98           /*K*  Specifies how the dua is to parse the data vectors
   99                 Equates are in the form XSD_MODE_?.
  100           */
  101           %(LVL+1) * UBIN(9) UNAL %INIT(0)%ENIT,
  102           /*K*  Slacker
  103           */
  104           %(LVL+1) EVENTID UBIN WORD ALIGNED %INIT(0)%ENIT,
  105           /*K*   user specified, hopefully unique, number which is specified
  106                 on the request to the dua and returned by the dua to the user
  107                 when the request has been satisfied.
  108           */
  109           %(LVL+1) FLAGS ALIGNED,
  110              %(LVL+2) %CHARTEXT('LOCALOKAY') BIT(1) %INIT(LOCALOKAY)%ENIT,
  111           /*K* FLAGS.LOCALOKAY - BIT(1) indicates to the dua that a local copy
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       4    
  112                 of the address will suffice. default is no
  113           */
  114              %(LVL+2) %CHARTEXT('UPDATELOCAL') BIT(1) %INIT(UPDATELOCAL)%ENIT,
  115           /*K* FLAGS.UPDATELOCAL - BIT(1) indicates to the dua that, upon successful
  116                 retrieval of an address from a remote server, the local directory
  117                 is to be updated with the new information.
  118           */
  119              %(LVL+2) %CHARTEXT('CHAINOKAY') BIT(1) %INIT(CHAINOKAY)%ENIT,
  120           /*K* FLAGS.CHAINOKAY - BIT(1) indicates, on reads and searches to remote
  121                servers, that the dsa may connect to another dsa to retreive the
  122                requested information.
  123           */
  124              %(LVL+2) %CHARTEXT('REFERRAL') BIT(1) %INIT(REFERRAL)%ENIT,
  125           /*K* FLAGS.REFERRAL - BIT(1)
  126                on call to the directory, indicates that if the dsa is unable
  127                to resolve the address the address of another dsa which
  128                might have more information is returned instead.  */
  129
  130              %(LVL+2) %CHARTEXT('ALIAS') BIT(1) %INIT(ALIAS)%ENIT,
  131           /*K* FLAGS.ALIAS - BIT(1)
  132                 on user's call to the DUA indicates that it is okay for the
  133                 DSA to dereference an alias entry to resolve the address.
  134                 On DUA's call to the user indicates that it was necessary for
  135                 the DSA to dereference and alias to resolve the address.
  136           */
  137              %(LVL+2) %CHARTEXT('PROCESSED') BIT(1) %INIT('0'B)%ENIT,
  138           /* used internally by the DUA to indicate that this service request
  139              has been sent to the DSA and is awaiting a response */
  140              %(LVL+2) * BIT(30) %INIT('0'B)%ENIT,
  141
  142           %VLP_ERRCODE(FPTN=ERRCODE,STCLASS=STCLASS,LVL=2,LAST=",");
  143           %(LVL+1) ERRCODEW REDEF ERRCODE UBIN WORD ALIGNED,
  144           %(LVL+1) ERRCODES REDEF ERRCODE SBIN WORD ALIGNED,
  145           /*K*  ERRCODE - UBIN WORD error. 0 if request succeeded.
  146           */
  147
  148           %(LVL+1) DIBENTRY$ PTR %INIT(ADDR(DIBENTRY))%ENIT,
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       5    
  149           /* DIBENTRY$ - PTR
  150              points to a TEXTC string which is to be used a key to write
  151              the results of the query to the DSA into the local dib.
  152           */
  153           %(LVL+1) %CHARTEXT('ATTR#') UBIN WORD %INIT(%NUMVECS)%ENIT,
  154           /*K*  ATTR# - UBIN WORD number of data vectors specified by the user.
  155           */
  156
  157           %(LVL+1) RESULT_ VECTOR %INIT(VECTOR(RESULT))%ENIT,
  158           /*K*  RESULT_ - ARRAY VECTOR frames user data.  Data is parsed as
  159                 specified by the mode byte above.
  160           */
  161           %(LVL+1) UENTADDR$ EPTR %INIT(ENTADDR(UENTADDR))%ENIT,
  162           /*K* UENTADDR$ - EPTR
  163                address of user procedure
  164           */
  165           %(LVL+1) SERVICEX REDEF UENTADDR$,
  166              %(LVL+2) NXTX UBIN HALF HALIGNED,
  167              %(LVL+2) PRVX UBIN HALF HALIGNED,
  168           %(LVL+1) SERVICEXS REDEF UENTADDR$,
  169              %(LVL+2) NXTXS SBIN HALF HALIGNED,
  170              %(LVL+2) PRVXS SBIN HALF HALIGNED,
  171
  172           %(LVL+1) BINDFROM$ PTR %INIT(ADDR(BINDFROM))%ENIT,
  173           /*K* BINDFROM$ - PTR points to a textc string that describes the CP6
  174                this user wants to be known as when binding to a remote server.
  175                The default is NIL
  176            */
  177           %(LVL+1) BINDTO$ PTR %INIT(ADDR(BINDTO))%ENIT,
  178           /*K* BINDTO$ - PTR pointer to a textc string that describes the CP6 name
  179                of the DSA to which the user wants to bind.   The default is NIL.
  180           */
  181           %(LVL+1) ATTRIBUTE(0:%NUMVECS) ALIGNED,
  182           /*K* ATTRIBUTE - array of attributes to be used as search criteria.*/
  183
  184              %(LVL+2) TYPE UBIN WORD,
  185           /*K* ATTRIBUTE.TYPE - ubin word.  type of attribute specified.
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       6    
  186                 from XSD_SUBS_C.*/
  187
  188              %(LVL+2) VALUE$ PTR LAST
  189           /*K* ATTRIBUTE.VALUE$ - PTR to a texth string framing the value of the
  190                attribute */
  191
  192      %MEND;
  193
  194      %EJECT;

10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       7    
  195      /* XSD_ATTRIBUTE - MACRO
  196           internal macro used to generate the attribute type table.
  197           contains elements of the attribute_syntax table,as well */
  198
  199      %MACRO XSD_ATTRIBUTE(NAME=XSD_ATTRIBUTE,
  200                          EQUAL(YES='1'B,NO='0'B) = ,
  201                          SUBSTRING(YES='1'B,NO='0'B) = ,
  202                          ORDER (YES='1'B,NO='0'B) = ,
  203                          RANGE (YES='1'B,NO='0'B) = ,
  204                          LOWER = ,
  205                          UPPER = ,
  206                          VALUED(SINGLE=1,MULTI=2,NONE=0)=0,
  207                          ATYPE(
  208                                    OC = %XSD_AT_OBJECTCLASS,
  209                                    AON = %XSD_AT_ALIASOBJNAME ,
  210                                    KI = %XSD_AT_KNOWINFO  ,
  211                                    CN = %XSD_AT_COMMONNAME  ,
  212                                    SN = %XSD_AT_SURNAME  ,
  213                                    SERIAL = %XSD_AT_SERIAL#  ,
  214                                    COUNTRY = %XSD_AT_COUNTRYNAME ,
  215                                    LN = %XSD_AT_LOCALITYNAME ,
  216                                    STATE = %XSD_AT_STATENAME  ,
  217                                    SA = %XSD_AT_STREETADDR  ,
  218                                    ON = %XSD_AT_ORGNAME   ,
  219                                    OUN = %XSD_AT_ORGUNITNAME ,
  220                                    TITLE = %XSD_AT_TITLE   ,
  221                                    DESC = %XSD_AT_DESC   ,
  222                                    SG = %XSD_AT_SEARCHGUIDE ,
  223                                    BC = %XSD_AT_BUSINESSCAT ,
  224                                    PA = %XSD_AT_POSTALADDR  ,
  225                                    PC = %XSD_AT_POSTALCODE  ,
  226                                    POBOX = %XSD_AT_POBOX   ,
  227                                    PDON = %XSD_AT_PDON    ,
  228                                    TELE = %XSD_AT_TELEPHONE#  ,
  229                                    TELEX = %XSD_AT_TELEX#   ,
  230                                    TTT = %XSD_AT_TELTEXTERMID ,
  231                                    FTP = %XSD_AT_FAXTELEPHONE#,
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       8    
  232                                    X121 = %XSD_AT_X121ADDR  ,
  233                                    INTISDN = %XSD_AT_INTISDN#  ,
  234                                    REGADDR = %XSD_AT_REGADDR   ,
  235                                    DESTIND = %XSD_AT_DESTIND   ,
  236                                    PDM = %XSD_AT_PDM     ,
  237                                    PRESADDR = %XSD_AT_PRESADDR  ,
  238                                    SAC = %XSD_AT_SAC     ,
  239                                    MEMBER = %XSD_AT_MEMBER   ,
  240                                    OWNER = %XSD_AT_OWNER   ,
  241                                    RO = %XSD_AT_ROLEOCCUPANT ,
  242                                    SEEALSO = %XSD_AT_SEEALSO   ,
  243                                    UP = %XSD_AT_USERPASS  ,
  244                                    UC = %XSD_AT_USERCERT  ,
  245                                    CAC = %XSD_AT_CACERT    ,
  246                                    ARL = %XSD_AT_ARL       ,
  247                                    CRL = %XSD_AT_CRL       ,
  248                                    CC = %XSD_AT_CROSSCERT)=0,
  249                          ASYNTAX(
  250                             UNDEFINED = %XSD_AS_UNDEFINED,
  251                             DNS = %XSD_AS_DNS ,
  252                             OIS = %XSD_AS_OIS ,
  253                             CESS = %XSD_AS_CESS ,
  254                             CISS = %XSD_AS_CISS ,
  255                             PSS = %XSD_AS_PSS ,
  256                             NSS = %XSD_AS_NSS ,
  257                             CILS = %XSD_AS_CILS,
  258                             BS = %XSD_AS_BS ,
  259                             IS = %XSD_AS_IS ,
  260                             OSS = %XSD_AS_OSS,
  261                             UTCS = %XSD_AS_UTCS,
  262                             TNS = %XSD_AS_TNS,ANY )=,
  263                          ANY(YES=1,NO=0) = ,
  264                          BOOLEAN(YES=1,NO=0) = ,
  265                          INT(YES=1,NO=0) = ,
  266                          OCTETSTRING(YES=1,NO=0) = ,
  267                          NUMERICSTRING(YES=1,NO=0) = ,
  268                          PRINTABLESTRING(YES=1,NO=0) = ,
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       9    
  269                          T61STRING(YES=1,NO=0) = ,
  270                          UTCTIME(YES=1,NO=0) = ,
  271                          NONPRIM(YES=1,NO=0) = ,
  272                          ALGN = WALIGNED,
  273                          LAST = ";",
  274                          LVL=1,
  275                          STCLASS="BASED");
  276
  277
  278       %LSET LISTDIR='0'B;
  279       %LSET LISTEXP='1'B;
  280       %LSET LISTCOM='0'B;
  281       %LSET LISTSUB='1'B;
  282       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  283       %IF (SUBSTR(STR,0,6)='STATIC') OR
  284       (SUBSTR(STR,0,8)='CONSTANT') OR
  285       (SUBSTR(STR,0,3)='EXT');
  286       %LSET INIT=CHARTEXT('INIT');
  287       %LSET ENIT=CHARTEXT('');
  288       %ELSE;
  289       %LSET INIT=CHARTEXT('/*');
  290       %LSET ENIT=CHARTEXT('*/');
  291       %ENDIF;
  292
  293
  294
  295      %IF LVL=1;
  296      DCL 1 NAME STCLASS ALGN,
  297      %ELSE;
  298           %(LVL) NAME ALGN,
  299      %ENDIF;
  300
  301      %IF VALUED=1;
  302      %LSET SINGLE='1'B;
  303      %ELSEIF VALUED=2;
  304      %LSET SINGLE='0'B;
  305      %ELSE;
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       10   
  306      %LSET SINGLE='0'B;
  307      %ENDIF;
  308
  309        %IF %LENGTHC(TEXTCHAR(EQUAL)) > 0;
  310           %LSET EQUA = EQUAL;
  311        %ELSE;
  312           %LSET EQUA = '0'B;
  313        %ENDIF;
  314        %IF %LENGTHC(TEXTCHAR(SUBSTRING)) > 0;
  315           %LSET SUBS = SUBSTRING;
  316        %ELSE;
  317           %LSET SUBS = '0'B;
  318        %ENDIF;
  319        %IF %LENGTHC(TEXTCHAR(ORDER)) > 0;
  320           %LSET ORDE = ORDER;
  321        %ELSE;
  322           %LSET ORDE = '0'B;
  323        %ENDIF;
  324        %IF %LENGTHC(TEXTCHAR(RANGE)) > 0;
  325           %LSET RANG = RANGE;
  326        %ELSE;
  327           %LSET RANG = '0'B;
  328        %ENDIF;
  329        %IF %LENGTHC(TEXTCHAR(LOWER)) > 0;
  330           %LSET LOWE = LOWER;
  331        %ELSE;
  332           %LSET LOWE = 0;
  333        %ENDIF;
  334        %IF %LENGTHC(TEXTCHAR(UPPER)) > 0;
  335           %LSET UPPE = UPPER;
  336        %ELSE;
  337           %LSET UPPE = 0;
  338        %ENDIF;
  339        %IF %LENGTHC(TEXTCHAR(ANY)) > 0;
  340           %LSET AN = ANY;
  341        %ELSE;
  342           %LSET AN = 0;
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       11   
  343        %ENDIF;
  344        %IF %LENGTHC(TEXTCHAR(BOOLEAN)) > 0;
  345           %LSET BOOL = BOOLEAN;
  346        %ELSE;
  347           %LSET BOOL = 0;
  348        %ENDIF;
  349        %IF %LENGTHC(TEXTCHAR(INT)) > 0;
  350           %LSET IN = INT;
  351        %ELSE;
  352           %LSET IN = 0;
  353        %ENDIF;
  354        %IF %LENGTHC(TEXTCHAR(OCTETSTRING)) > 0;
  355           %LSET OCTE = OCTETSTRING;
  356        %ELSE;
  357           %LSET OCTE = 0;
  358        %ENDIF;
  359        %IF %LENGTHC(TEXTCHAR(NUMERICSTRING)) > 0;
  360           %LSET NUME = NUMERICSTRING;
  361        %ELSE;
  362           %LSET NUME = 0;
  363        %ENDIF;
  364        %IF %LENGTHC(TEXTCHAR(PRINTABLESTRING)) > 0;
  365           %LSET PRIN = PRINTABLESTRING;
  366        %ELSE;
  367           %LSET PRIN = 0;
  368        %ENDIF;
  369        %IF %LENGTHC(TEXTCHAR(T61STRING)) > 0;
  370           %LSET T61S = T61STRING;
  371        %ELSE;
  372           %LSET T61S = 0;
  373        %ENDIF;
  374        %IF %LENGTHC(TEXTCHAR(UTCTIME)) > 0;
  375           %LSET UTCT = UTCTIME
  376        %ELSE;
  377           %LSET UTCT = 0;
  378        %ENDIF;
  379
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       12   
  380      %IF LENGTHC(TEXTCHAR(ASYNTAX))>0;
  381      %LSET AS = ASYNTAX;
  382      %IF %AS = %XSD_AS_CESS;
  383        %LSET T61S = 1;
  384        %LSET PRIN = 1;
  385        %LSET EQUA = '1'B;
  386        %LSET SUBS = '1'B;
  387      %ELSEIF %AS = %XSD_AS_CISS;
  388        %LSET PRIN = 1;
  389        %LSET T61S = 1;
  390        %LSET EQUA = '1'B;
  391        %LSET SUBS = '1'B;
  392      %ELSEIF %AS = %XSD_AS_PSS;
  393        %LSET PRIN = 1;
  394        %LSET EQUA = '1'B;
  395        %LSET SUBS = '1'B;
  396      %ELSEIF %AS = %XSD_AS_NSS;
  397        %LSET NUMB = 1;
  398        %LSET EQUA = '1'B;
  399        %LSET SUBS = '1'B;
  400      %ELSEIF %AS = %XSD_AS_CILS;
  401        %LSET T61S = 1;
  402        %LSET PRIN = 1;
  403        %LSET EQUA = '1'B;
  404        %LSET SUBS = '1'B;
  405      %ELSEIF %AS = %XSD_AS_BS;
  406        %LSET BOOL = 1;
  407        %LSET EQUA = '1'B;
  408      %ELSEIF %AS = %XSD_AS_IS;
  409        %LSET INTE = 1;
  410        %LSET EQUA = '1'B;
  411        %LSET ORDE = '1'B;
  412      %ELSEIF %AS = %XSD_AS_OSS;
  413        %LSET OSTR = 1;
  414        %LSET EQUA = '1'B;
  415        %LSET SUBS = '1'B;
  416        %LSET ORDE = '1'B;
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       13   
  417      %ELSEIF %AS = %XSD_AS_UTCS;
  418        %LSET UTCT = 1;
  419        %LSET EQUA = '1'B;
  420        %LSET ORDE = '1'B;
  421      %ELSEIF %AS = %XSD_AS_TNS;
  422        %LSET PRIN = 1;
  423        %LSET LOWE = 1;
  424        %LSET UPPE = %XSD_UB_TELEPHONE#;
  425        %LSET EQUA = '1'B;
  426        %LSET SUBS = '1'B;
  427      %ENDIF;
  428      %ELSE;
  429        %LSET AS=0;
  430      %ENDIF;
  431
  432      %IF %AN+%BOOL+%T61S+%PRIN+%NUME+%IN+%OCTE+%UTCT > 1;
  433        %IF %LENGTHC(TEXTCHAR(ASYNTAX)) = 0;
  434           %LSET NONP = '1'B;
  435        %ELSE;
  436           %LSET NONP = '0'B;
  437        %ENDIF;
  438      %ELSE;
  439        %LSET NONP = '0'B;
  440      %ENDIF;
  441
  442      %IF (SUBSTR(STR,0,5)='BASED');
  443      %LSET TNAME = ' ';
  444      %LSET TNAMESZ = 255;
  445      %ELSE;
  446      %LSET TNAME = TEXTCHAR(NAME);
  447      %LSET TNAMESZ = LENGTHC(%TNAME);
  448      %ENDIF;
  449
  450      /* TYPE - ubin byte
  451        last digit of the osi defined object identifier which uniquely ids the
  452        type of attributes to be used for parsing and semantics checking on a
  453        particular object defined in IS 9594-6
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       14   
  454      */
  455        %(LVL+1) %CHARTEXT('ATYPE') UBIN %INIT(ATYPE)%ENIT,
  456
  457      /* SYNTAX - ubin byte
  458        last digit of osi defined object identifier which uniquely ids the type of
  459        syntax to be associated with an object. Defined in IS 9495-6.
  460      */
  461
  462        %(LVL+1) %CHARTEXT('ASYNTAX') UBIN ALIGNED %INIT(%AS)%ENIT,
  463
  464      /*
  465          ATTRSYNTAX -
  466                 bit(36) bitarray to indicate which asn.1 types are
  467                 legal for this attribute.  Uses the Universal tags numbers
  468                 as an index(iso 8525).  Except for ANY which doens't have
  469                 an assigned tag #.
  470      */
  471
  472        %(LVL+1) ATTRSYNTAX WALIGNED,
  473           %(LVL+2) %CHARTEXT('ANY') UBIN(1) UNAL %INIT(%AN)%ENIT,
  474           %(LVL+2) %CHARTEXT('BOOLEAN') UBIN(1) UNAL %INIT(%BOOL)%ENIT,
  475           %(LVL+2) %CHARTEXT('INTEGER') UBIN(1) UNAL %INIT(%IN)%ENIT,
  476           %(LVL+2) *  UBIN(1) UNAL %INIT(0)%ENIT,
  477           %(LVL+2) OSTRING UBIN(1) UNAL %INIT(%OCTE)%ENIT,
  478           %(LVL+2) * BIT(12) %INIT('0'B*0)%ENIT,
  479           %(LVL+2) NSTRING UBIN(1) UNAL %INIT(%NUME)%ENIT,
  480           %(LVL+2) PSTRING UBIN(1) UNAL %INIT(%PRIN)%ENIT,
  481           %(LVL+2) %CHARTEXT('T61STRING') UBIN(1) UNAL %INIT(%T61S)%ENIT,
  482           %(LVL+2) * BIT(3) %INIT('0'B*0)%ENIT,
  483           %(LVL+2) %CHARTEXT('UTCTIME') UBIN(1) UNAL %INIT(%UTCT)%ENIT,
  484           %(LVL+2) * BIT(12) %INIT('0'B*0)%ENIT,
  485
  486        %(LVL+1) ATTRSYNTAXW REDEF ATTRSYNTAX UBIN(36) WALIGNED,
  487
  488      /*
  489           matchesfor - indicates what the attribute value defined by this
  490           attribute type should be matched for.
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       15   
  491      */
  492
  493        %(LVL+1) MATCHESFOR WALIGNED,
  494           %(LVL+2) EQUALITY BIT(1) %INIT(%EQUA)%ENIT,
  495           %(LVL+2) %CHARTEXT('SUBSTRING') BIT(1) %INIT(%SUBS)%ENIT,
  496           %(LVL+2) ORDERING BIT(1) %INIT(%ORDE)%ENIT,
  497           %(LVL+2) *        BIT(33) %INIT('0'B)%ENIT,
  498
  499      /*
  500           singlevalue - indicates that an attribute of this type will have
  501                    only one value per entry.
  502           range - indicates that both the lower and the upper bound are valid
  503                    if range is false, only the lower bound value is used
  504           nonprim - the attribute syntax associated with this attr type is a non
  505                    primative asn1 data type nor is it one of the defined attr
  506                    syntaxed defined for the directory.
  507                    This includes the following:
  508                          searchGuide
  509                          postalAddress
  510                          telexNumber
  511                          teletexTerminalidentifier
  512                          facsimilTelephoneNumber
  513                          registeredAddress
  514                          preferredDeliveryMethod
  515                          presentationAddress
  516
  517
  518
  519      */
  520
  521        %(LVL+1) FLAGS WALIGNED,
  522           %(LVL+2) SINGLEVALUE BIT(1) %INIT(%SINGLE)%ENIT,
  523           %(LVL+2) %CHARTEXT('RANGE')  BIT(1) %INIT(%RANG)%ENIT,
  524           %(LVL+2) %CHARTEXT('NONPRIM') BIT(1) %INIT(%NONP)%ENIT,
  525           %(LVL+2) *           BIT(33) %INIT('0'B)%ENIT,
  526
  527        %(LVL+1) LOWERBOUND SBIN WORD ALIGNED %INIT(%LOWE)%ENIT,
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       16   
  528        %(LVL+1) UPPERBOUND SBIN WORD ALIGNED %INIT(%UPPE)%ENIT,
  529        %(LVL+1) *(0:1) UBIN %INIT(0*0)%ENIT,
  530        %(LVL+1) ATTRNAMEC ALIGNED,
  531           %(LVL+2) L UBIN BYTE UNAL %INIT(%TNAMESZ)%ENIT,
  532           %(LVL+2) T CHAR(%TNAMESZ) CALIGNED %INIT(%TNAME)%ENIT LAST
  533
  534      %MEND;
  535
  536
  537
  538      /*
  539              object-class macro-
  540                    macro to associate attributes with object classes
  541      */
  542
  543      %EJECT;

10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       17   
  544
  545      %MACRO XSD_OBJECT(NAME=XSD_OBJECT,
  546                          OBJECTCLASS
  547                             (TOP =     %XSD_OC_TOP         ,
  548                             ALIAS =    %XSD_OC_ALIAS       ,
  549                             COUNTRY =  %XSD_OC_COUNTRY     ,
  550                             LOCALITY = %XSD_OC_LOCALITY    ,
  551                             ORG =      %XSD_OC_ORG         ,
  552                             ORGUNIT =  %XSD_OC_ORGUNIT     ,
  553                             PERSON =   %XSD_OC_PERSON      ,
  554                             ORGPERSON =%XSD_OC_ORGPERSON   ,
  555                             ORGROLE =  %XSD_OC_ORGROLE     ,
  556                             GROUPOFNAMES=%XSD_OC_GROUPONAMES ,
  557                             RESPERSON =%XSD_OC_RESPERSON   ,
  558                             APPLCPROC =%XSD_OC_APPLCPROC   ,
  559                             APPLCENTITY=%XSD_OC_APPLCENTITY ,
  560                             DSA =       %XSD_OC_DSA         ,
  561                             DEVICE =    %XSD_OC_DEVICE      ,
  562                             STRONGAUTH= %XSD_OC_STRONGAUTH  ,
  563                             CERTAUTH =  %XSD_OC_CERTAUTH )=0,
  564                          SUBCLASS=-1,
  565                          ALGN = WALIGNED,
  566                          LAST = ";",
  567                          LVL=1,
  568                          STCLASS="BASED");
  569
  570
  571       %LSET LISTDIR='0'B;
  572       %LSET LISTEXP='1'B;
  573       %LSET LISTCOM='0'B;
  574       %LSET LISTSUB='1'B;
  575       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  576       %IF (SUBSTR(STR,0,6)='STATIC') OR
  577       (SUBSTR(STR,0,8)='CONSTANT') OR
  578       (SUBSTR(STR,0,3)='EXT');
  579       %LSET INIT=CHARTEXT('INIT');
  580       %LSET ENIT=CHARTEXT('');
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       18   
  581       %ELSE;
  582       %LSET INIT=CHARTEXT('/*');
  583       %LSET ENIT=CHARTEXT('*/');
  584       %ENDIF;
  585
  586
  587
  588
  589
  590
  591      %LSET OC = OBJECTCLASS;
  592      %LSET MUST = '0'B;
  593      %LSET MAY = '0'B;
  594      %LSET SC = 0;
  595
  596      %IF %OC =  %XSD_OC_COUNTRY;
  597        %LSET SC = %XSD_OC_TOP;
  598        %LSET MUST = %XSD_COUNTRY;
  599        %LSET MAY = %XSD_DESC|%XSD_SG;
  600      %ELSEIF %OC = %XSD_OC_LOCALITY;
  601        %LSET SC = %XSD_OC_TOP;
  602        %LSET MAY = %XSD_DESC|%XSD_LN|%XSD_STATE|%XSD_SG|%XSD_SEEALSO|%XSD_SA;
  603      %ELSEIF %OC = %XSD_OC_ORG;
  604        %LSET SC = %XSD_OC_TOP;
  605        %LSET MUST = %XSD_OUN;
  606        %LSET MAY = %XSD_AS_ORGSET|%XSD_DESC|%XSD_BC|%XSD_SEEALSO|%XSD_SG|%XSD_UP;
  607      %ELSEIF %OC = %XSD_OC_ORGUNIT;
  608        %LSET SC = %XSD_OC_TOP;
  609        %LSET MUST = %XSD_OUN;
  610        %LSET MAY = %XSD_AS_ORGSET|%XSD_DESC|%XSD_BC|%XSD_SEEALSO|%XSD_SG|%XSD_UP;
  611      %ELSEIF %OC = %XSD_OC_PERSON;
  612        %LSET SC = %XSD_OC_TOP;
  613        %LSET MUST = %XSD_CN|%XSD_SN;
  614        %LSET MAY  = %XSD_DESC|%XSD_SEEALSO|%XSD_TELE|%XSD_UP;
  615      %ELSEIF %OC = %XSD_OC_ORGPERSON;
  616        %LSET SC = %XSD_OC_PERSON;
  617        %LSET MUST = %XSD_CN|%XSD_SN;         /* from person */
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       19   
  618        %LSET MAY = %XSD_AS_LOCALESET|%XSD_OUN|%XSD_AS_POSTALSET|%XSD_AS_TELECOMMSET|%XSD_TITLE;
  619      %ELSEIF %OC = %XSD_OC_ORGROLE;
  620        %LSET SC = %XSD_OC_TOP;
  621        %LSET MUST = %XSD_CN;
  622        %LSET MAY = %XSD_DESC|%XSD_OUN|%XSD_PDM|%XSD_RO|%XSD_SEEALSO|%XSD_AS_LOCALESET|%XSD_AS_POSTALSET|%XSD_AS_TELECOMMSET;
  623      %ELSEIF %OC = %XSD_OC_GROUPONAMES;
  624        %LSET SC = %XSD_OC_TOP;
  625        %LSET MUST = %XSD_CN|%XSD_MEMBER;
  626        %LSET MAY = %XSD_DESC|%XSD_ON|%XSD_OUN|%XSD_OWNER|%XSD_SEEALSO|%XSD_BC;
  627      %ELSEIF %OC = %XSD_OC_RESPERSON;
  628        %LSET SC = %XSD_OC_PERSON;
  629        %LSET MUST = %XSD_LN;
  630        %LSET MUST = %MUST|%XSD_CN|%XSD_SN;   /* from person */
  631        %LSET MAY = %XSD_PDM|%XSD_BC|%XSD_AS_LOCALESET|%XSD_AS_POSTALSET|%XSD_AS_TELECOMMSET;
  632      %ELSEIF %OC = %XSD_OC_APPLCPROC;
  633        %LSET SC = %XSD_OC_TOP;
  634        %LSET MUST = %XSD_CN;
  635        %LSET MAY = %XSD_DESC|%XSD_LN|%XSD_OUN|%XSD_SEEALSO;
  636      %ELSEIF %OC = %XSD_OC_APPLCENTITY;
  637        %LSET SC = %XSD_OC_TOP;
  638        %LSET MUST = %XSD_CN|%XSD_PRESADDR;
  639        %LSET MAY = %XSD_DESC|%XSD_LN|%XSD_ON|%XSD_OUN|%XSD_SEEALSO|%XSD_SAC;
  640      %ELSEIF %OC = %XSD_OC_DSA;
  641        %LSET SC = %XSD_OC_APPLCENTITY;
  642        %LSET MUST = %XSD_CN|%XSD_PRESADDR;   /* from applcentity */
  643        %LSET MAY = %XSD_KI;
  644      %ELSEIF %OC = %XSD_OC_DEVICE;
  645        %LSET SC = %XSD_OC_TOP;
  646        %LSET MUST = %XSD_SEEALSO|%XSD_SERIAL|%XSD_CN|%XSD_DESC|%XSD_LN|%XSD_ON|%XSD_OUN|%XSD_OWNER;
  647      %ELSEIF %OC = %XSD_OC_STRONGAUTH;
  648        %LSET SC = %XSD_OC_TOP;
  649        %LSET MUST = %XSD_UC;
  650      %ELSEIF %OC = %XSD_OC_CERTAUTH;
  651        %LSET SC = %XSD_OC_TOP;
  652        %LSET MUST = %XSD_CAC|%XSD_CRL|%XSD_ARL;
  653        %LSET MAY = %XSD_CC;
  654      %ENDIF;
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       20   
  655
  656
  657      %IF LVL=1;
  658      DCL 1 NAME STCLASS ALGN,
  659      %ELSE;
  660           %(LVL)
  661           NAME ALGN,
  662      %ENDIF;
  663
  664      /*
  665           denotes which object classes this object is a subclass of.
  666           subcl is an index into the object class table. a subclass
  667           of -1 indicates the top.  values are XSD_OC_?
  668      */
  669             %(LVL+1) SUBCLASSOF SBIN BYTE CALIGNED %INIT(%SC)%ENIT,
  670             %(LVL+1) * UBIN(27) UNAL %INIT(0)%ENIT,
  671             %(LVL+1) * UBIN(36) UNAL %INIT(0)%ENIT,
  672      /*
  673           mustcontain -
  674                 bit array(72) indicates which attribute types this object
  675                 must contain.  Indexed by XSD_AT_?
  676      */
  677
  678             %(LVL+1) MUSTCB BIT(72) %INIT(%MUST)%ENIT,
  679             %(LVL+1) MUSTCONTAIN REDEF MUSTCB,
  680             %(LVL+2) %CHARTEXT('OBJECTCLASS') BIT(1),
  681             %(LVL+2) ALIASOBJNAME BIT(1),
  682             %(LVL+2) KNOWINFO   BIT(1),
  683             %(LVL+2) COMMONNAME   BIT(1),
  684             %(LVL+2) SURNAME   BIT(1),
  685             %(LVL+2) SERIAL#   BIT(1),
  686             %(LVL+2) COUNTRYNAME  BIT(1),
  687             %(LVL+2) LOCALITYNAME BIT(1),
  688             %(LVL+2) STATENAME   BIT(1),
  689             %(LVL+2) STREETADDR   BIT(1),
  690             %(LVL+2) ORGNAME    BIT(1),
  691             %(LVL+2) ORGUNITNAME  BIT(1),
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       21   
  692             %(LVL+2) TITLE    BIT(1),
  693             %(LVL+2) DESC    BIT(1),
  694             %(LVL+2) SEARCHGUIDE  BIT(1),
  695             %(LVL+2) BUSINESSCAT  BIT(1),
  696             %(LVL+2) POSTALADDR   BIT(1),
  697             %(LVL+2) POSTALCODE   BIT(1),
  698             %(LVL+2) POBOX    BIT(1),
  699             %(LVL+2) PDON     BIT(1),
  700             %(LVL+2) TELEPHONE#   BIT(1),
  701             %(LVL+2) TELEX#    BIT(1),
  702             %(LVL+2) TELTEXTERMID BIT(1),
  703             %(LVL+2) FAXTELEPHONE# BIT(1),
  704             %(LVL+2) X121ADDR   BIT(1),
  705             %(LVL+2) INTISDN#   BIT(1),
  706             %(LVL+2) REGADDR    BIT(1),
  707             %(LVL+2) DESTIND    BIT(1),
  708             %(LVL+2) PDM      BIT(1),
  709             %(LVL+2) PRESADDR   BIT(1),
  710             %(LVL+2) SAC      BIT(1),
  711             %(LVL+2) MEMBER    BIT(1),
  712             %(LVL+2) OWNER    BIT(1),
  713             %(LVL+2) ROLEOCCUPANT BIT(1),
  714             %(LVL+2) SEEALSO    BIT(1),
  715             %(LVL+2) USERPASS   BIT(1),
  716             %(LVL+2) USERCERT   BIT(1),
  717             %(LVL+2) CACERT     BIT(1),
  718             %(LVL+2) ARL        BIT(1),
  719             %(LVL+2) CRL        BIT(1),
  720             %(LVL+2) CROSSCERT  BIT(1),
  721             %(LVL+2) * BIT(31),
  722
  723             %(LVL+1) MUSTCONTB(0:71) REDEF MUSTCB BIT(1),
  724             %(LVL+1) MUSTCONTW(0:1) REDEF MUSTCB UBIN,
  725
  726             %(LVL+1) * UBIN %INIT(0)%ENIT,
  727
  728
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       22   
  729      /*
  730              MAYCONTAIN -
  731                 bit array (72) indicates which attribute types an object
  732                 may contain.  values are XSD_AT_?
  733      */
  734
  735             %(LVL+1) MAYCB BIT(72) %INIT(%MAY)%ENIT,
  736             %(LVL+1) MAYCONTAIN REDEF MAYCB,
  737             %(LVL+2) %CHARTEXT('OBJECTCLASS') BIT(1),
  738             %(LVL+2) ALIASOBJNAME BIT(1),
  739             %(LVL+2) KNOWINFO   BIT(1),
  740             %(LVL+2) COMMONNAME   BIT(1),
  741             %(LVL+2) SURNAME   BIT(1),
  742             %(LVL+2) SERIAL#   BIT(1),
  743             %(LVL+2) COUNTRYNAME  BIT(1),
  744             %(LVL+2) LOCALITYNAME BIT(1),
  745             %(LVL+2) STATENAME   BIT(1),
  746             %(LVL+2) STREETADDR   BIT(1),
  747             %(LVL+2) ORGNAME    BIT(1),
  748             %(LVL+2) ORGUNITNAME  BIT(1),
  749             %(LVL+2) TITLE    BIT(1),
  750             %(LVL+2) DESC    BIT(1),
  751             %(LVL+2) SEARCHGUIDE  BIT(1),
  752             %(LVL+2) BUSINESSCAT  BIT(1),
  753             %(LVL+2) POSTALADDR   BIT(1),
  754             %(LVL+2) POSTALCODE   BIT(1),
  755             %(LVL+2) POBOX    BIT(1),
  756             %(LVL+2) PDON     BIT(1),
  757             %(LVL+2) TELEPHONE#   BIT(1),
  758             %(LVL+2) TELEX#    BIT(1),
  759             %(LVL+2) TELTEXTERMID BIT(1),
  760             %(LVL+2) FAXTELEPHONE# BIT(1),
  761             %(LVL+2) X121ADDR   BIT(1),
  762             %(LVL+2) INTISDN#   BIT(1),
  763             %(LVL+2) REGADDR    BIT(1),
  764             %(LVL+2) DESTIND    BIT(1),
  765             %(LVL+2) PDM      BIT(1),
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       23   
  766             %(LVL+2) PRESADDR   BIT(1),
  767             %(LVL+2) SAC      BIT(1),
  768             %(LVL+2) MEMBER    BIT(1),
  769             %(LVL+2) OWNER    BIT(1),
  770             %(LVL+2) ROLEOCCUPANT BIT(1),
  771             %(LVL+2) SEEALSO    BIT(1),
  772             %(LVL+2) USERPASS   BIT(1),
  773             %(LVL+2) USERCERT   BIT(1),
  774             %(LVL+2) CACERT     BIT(1),
  775             %(LVL+2) ARL        BIT(1),
  776             %(LVL+2) CRL        BIT(1),
  777             %(LVL+2) CROSSCERT  BIT(1),
  778             %(LVL+2) * BIT(31),
  779
  780             %(LVL+1) MAYCONTB(0:71) REDEF MAYCB BIT(1),
  781             %(LVL+1) MAYCONTW(0:1) REDEF MAYCB UBIN,
  782
  783             %(LVL+1) * UBIN %INIT(0)%ENIT LAST
  784
  785      %MEND;
  786
  787      /*
  788           XSD_DIBKEY -
  789                 Describes the irel key for :DIB.
  790      */
  791
  792
  793      %EJECT;

10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       24   
  794
  795      %MACRO XSD_DIBKEY(NAME=XSD_DIBKEY,
  796                          ALGN = WALIGNED,
  797                          LAST = ";",
  798                          LVL=1,
  799                          STCLASS="BASED");
  800
  801
  802       %LSET LISTDIR='0'B;
  803       %LSET LISTEXP='1'B;
  804       %LSET LISTCOM='0'B;
  805       %LSET LISTSUB='1'B;
  806       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  807       %IF (SUBSTR(STR,0,6)='STATIC') OR
  808       (SUBSTR(STR,0,8)='CONSTANT') OR
  809       (SUBSTR(STR,0,3)='EXT');
  810       %LSET INIT=CHARTEXT('INIT');
  811       %LSET ENIT=CHARTEXT('');
  812       %ELSE;
  813       %LSET INIT=CHARTEXT('/*');
  814       %LSET ENIT=CHARTEXT('*/');
  815       %ENDIF;
  816
  817      %IF LVL=1;
  818      DCL 1 NAME STCLASS ALGN,
  819      %ELSE;
  820           %(LVL) NAME ALGN,
  821      %ENDIF;
  822            %(LVL+1) OBJECTCLASS  UBIN(%XSD_UB_OBJECTCLASS) UNAL %INIT(0)%ENIT,
  823            %(LVL+1) ALIASOBJNAME UBIN(%XSD_UB_OBJECTCLASS) UNAL %INIT(0)%ENIT,
  824            %(LVL+1) KNOWINFO     UBIN(%XSD_UB_KNOWINFO)   UNAL  %INIT(0)%ENIT,
  825            %(LVL+1) COMMONNAME   CALIGNED CHAR(%XSD_UB_COMMONNAME) %INIT(' ')%ENIT,
  826            %(LVL+1) SURNAME      CALIGNED CHAR(%XSD_UB_SURNAME) %INIT(' ')%ENIT,
  827            %(LVL+1) SERIAL#      CALIGNED CHAR(%XSD_UB_SERIAL# ) %INIT(' ')%ENIT,
  828            %(LVL+1) COUNTRYNAME  CALIGNED CHAR(%XSD_UB_COUNTRYNAME) %INIT(' ')%ENIT,
  829            %(LVL+1) LOCALITYNAME CALIGNED CHAR(%XSD_UB_LOCALITYNAME ) %INIT(' ')%ENIT,
  830            %(LVL+1) STATENAME    CALIGNED CHAR(%XSD_UB_STATENAME) %INIT(' ')%ENIT,
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       25   
  831            %(LVL+1) STREETADDR   CALIGNED CHAR(%XSD_UB_STREETADDR) %INIT(' ')%ENIT,
  832            %(LVL+1) ORGNAME      CALIGNED CHAR(%XSD_UB_ORGNAME) %INIT(' ')%ENIT,
  833            %(LVL+1) ORGUNITNAME  CALIGNED CHAR(%XSD_UB_ORGUNITNAME) %INIT(' ')%ENIT,
  834            %(LVL+1) TITLE        CALIGNED CHAR(%XSD_UB_TITLE) %INIT(' ')%ENIT,
  835            %(LVL+1) BUSINESSCAT  CALIGNED CHAR(%XSD_UB_BUSINESSCAT) %INIT(' ')%ENIT,
  836            %(LVL+1) DIBUNIQUE    CALIGNED CHAR(%XSD_DIBKEY_LEN) %INIT(' ')%ENIT LAST
  837      %MEND;
  838
  839      %EJECT;

10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       26   
  840
  841      /* XSD_DIBBUFFER -
  842                 buffer for the dib record beyond what is defined in the key.
  843                 values not in the key definition are non-distinguished values.
  844      */
  845      %MACRO XSD_DIBBUF(NAME=XSD_DIBBUF,
  846                          ALGN = WALIGNED,
  847                          LAST = ";",
  848                          LVL=1,
  849                          SIZE = 1,
  850                          STCLASS="BASED");
  851
  852
  853       %LSET LISTDIR='0'B;
  854       %LSET LISTEXP='1'B;
  855       %LSET LISTCOM='0'B;
  856       %LSET LISTSUB='1'B;
  857       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  858       %IF (SUBSTR(STR,0,6)='STATIC') OR
  859       (SUBSTR(STR,0,8)='CONSTANT') OR
  860       (SUBSTR(STR,0,3)='EXT');
  861       %LSET INIT=CHARTEXT('INIT');
  862       %LSET ENIT=CHARTEXT('');
  863       %ELSE;
  864       %LSET INIT=CHARTEXT('/*');
  865       %LSET ENIT=CHARTEXT('*/');
  866       %ENDIF;
  867
  868      %IF LVL=1;
  869      DCL 1 NAME STCLASS ALGN,
  870      %ELSE;
  871           %(LVL) NAME ALGN,
  872      %ENDIF;
  873
  874
  875
  876      %XSD_DIBKEY(NAME=KEY,STCLASS=STCLASS,LVL=2,LAST=",");
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       27   
  877
  878         %(LVL+1) ATTRIBUTE ALIGNED,
  879           %(LVL+2) TYPE UBIN BYTE UNAL %INIT(0)%ENIT,
  880           %(LVL+2) FLAGS,
  881              %(LVL+3) DV BIT(1) %INIT('0'B)%ENIT,
  882              %(LVL+3) %CHARTEXT('LAST') BIT(1) %INIT('0'B)%ENIT,
  883              %(LVL+3) * BIT(7) %INIT('1'B)%ENIT,
  884           %(LVL+2) %CHARTEXT('SIZE') UBIN(18) UNAL %INIT(SIZE)%ENIT,
  885           %(LVL+2) TEXT CHAR(SIZE) UNAL %INIT(' ')%ENIT LAST
  886
  887      %MEND;
  888
  889      %EJECT;

10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       28   
  890      /*
  891        macro to do lists of distinguished names and object identifiers
  892      */
  893      %MACRO VLIST(NAME=VLIST,L=1,LVL=1,LAST=";",STCLASS=BASED,ALGN=CALIGNED);
  894       %LSET LISTDIR='0'B;
  895       %LSET LISTEXP='1'B;
  896       %LSET LISTCOM='0'B;
  897       %LSET LISTSUB='1'B;
  898       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  899       %IF (SUBSTR(STR,0,6)='STATIC') OR
  900       (SUBSTR(STR,0,8)='CONSTANT') OR
  901       (SUBSTR(STR,0,3)='EXT');
  902       %LSET INIT=CHARTEXT('INIT');
  903       %LSET ENIT=CHARTEXT('');
  904       %ELSE;
  905       %LSET INIT=CHARTEXT('/*');
  906       %LSET ENIT=CHARTEXT('*/');
  907       %ENDIF;
  908
  909      %IF LVL=1;
  910      DCL 1 NAME STCLASS ALGN,
  911      %ELSE;
  912           %(LVL) NAME ALGN,
  913      %ENDIF;
  914        %(LVL+1) LENGTH UBIN(18) UNAL %INIT(L)%ENIT,
  915        /*  total length of entry */
  916        %(LVL+1) %CHARTEXT('ATTR#') UBIN(9) UNAL %INIT(ATTR#)%ENIT,
  917        /* number of attr type/attr values pairs if syntax is distinguished name.
  918           otherwise is the number of object ids.*/
  919        %(LVL+1) * UBIN(9) UNAL %INIT(0)%ENIT,
  920      %LSET NXTLVL = %(LVL+1);
  921
  922        %TEXTC(NAME=TXT,LVL=%NXTLVL,STCLASS=STCLASS);
  923      %MEND;
  924
  925      %EJECT;

10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       29   
  926
  927      %MACRO XSD_TEXTC(NAME=TEXTC,LEN=,LVL=1,LAST=";",STCLASS=BASED,ALGN=CALIGNED,
  928                       TEXT=);
  929       %LSET LISTDIR='0'B;
  930       %LSET LISTEXP='1'B;
  931       %LSET LISTCOM='0'B;
  932       %LSET LISTSUB='1'B;
  933       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  934       %IF (SUBSTR(STR,0,6)='STATIC') OR
  935       (SUBSTR(STR,0,8)='CONSTANT') OR
  936       (SUBSTR(STR,0,3)='EXT');
  937       %LSET INIT=CHARTEXT('INIT');
  938       %LSET ENIT=CHARTEXT('');
  939       %ELSE;
  940       %LSET INIT=CHARTEXT('/*');
  941       %LSET ENIT=CHARTEXT('*/');
  942       %ENDIF;
  943
  944      %IF LVL=1;
  945      DCL 1 NAME STCLASS ALGN,
  946      %ELSE;
  947           %(LVL) NAME ALGN,
  948      %ENDIF;
  949      %IF LENGTHC(TEXTCHAR(LEN)) = 0;
  950        %IF LENGTHC(TEXTCHAR(TEXT)) = 0;
  951           %LSET L = 1;
  952           %LSET T = ' ';
  953        %ELSE;
  954           %LSET T = TEXTCHAR(TEXT);
  955           %LSET L = LENGTHC(%T);
  956        %ENDIF;
  957      %ELSE;
  958        %IF LENGTHC(TEXTCHAR(TEXT)) = 0;
  959           %LSET T = ' ';
  960           %LSET L = LEN;
  961        %ELSE;
  962           %LSET T = TEXTCHAR(TEXT);
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       30   
  963           %LSET L = LEN;
  964        %ENDIF;
  965      %ENDIF;
  966             %(LVL+1) %CHARTEXT('L') UBIN(9) UNAL %INIT(%L)%ENIT,
  967             %(LVL+1) %CHARTEXT('T') CHAR(%L) %INIT(%T)%ENIT CALIGNED LAST
  968      %MEND;
  969
  970      %MACRO XSD_TEXTH(NAME=TEXTH,LEN=,LVL=1,LAST=";",STCLASS=BASED,ALGN=CALIGNED,
  971                       TEXT=);
  972       %LSET LISTDIR='0'B;
  973       %LSET LISTEXP='1'B;
  974       %LSET LISTCOM='0'B;
  975       %LSET LISTSUB='1'B;
  976       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  977       %IF (SUBSTR(STR,0,6)='STATIC') OR
  978       (SUBSTR(STR,0,8)='CONSTANT') OR
  979       (SUBSTR(STR,0,3)='EXT');
  980       %LSET INIT=CHARTEXT('INIT');
  981       %LSET ENIT=CHARTEXT('');
  982       %ELSE;
  983       %LSET INIT=CHARTEXT('/*');
  984       %LSET ENIT=CHARTEXT('*/');
  985       %ENDIF;
  986
  987      %IF LVL=1;
  988      DCL 1 NAME STCLASS ALGN,
  989      %ELSE;
  990           %(LVL) NAME ALGN,
  991      %ENDIF;
  992      %IF LENGTHC(TEXTCHAR(LEN)) = 0;
  993        %IF LENGTHC(TEXTCHAR(TEXT)) = 0;
  994           %LSET L = 1;
  995           %LSET T = ' ';
  996        %ELSE;
  997           %LSET T = TEXTCHAR(TEXT);
  998           %LSET L = LENGTHC(%T);
  999        %ENDIF;
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       31   
 1000      %ELSE;
 1001        %IF LENGTHC(TEXTCHAR(TEXT)) = 0;
 1002           %LSET T = ' ';
 1003           %LSET L = LEN;
 1004        %ELSE;
 1005           %LSET T = TEXTCHAR(TEXT);
 1006           %LSET L = LEN;
 1007        %ENDIF;
 1008      %ENDIF;
 1009             %(LVL+1) %CHARTEXT('L') UBIN(18) UNAL %INIT(%L)%ENIT,
 1010             %(LVL+1) %CHARTEXT('T') CHAR(%L) %INIT(%T)%ENIT CALIGNED LAST
 1011      %MEND;
 1012
 1013      %MACRO XSD_BIND(NAME=XSD$BIND,LVL=1,LAST=";",STCLASS=BASED,ALGN=CALIGNED);
 1014       %LSET LISTDIR='0'B;
 1015       %LSET LISTEXP='1'B;
 1016       %LSET LISTCOM='0'B;
 1017       %LSET LISTSUB='1'B;
 1018       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1019       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1020       (SUBSTR(STR,0,8)='CONSTANT') OR
 1021       (SUBSTR(STR,0,3)='EXT');
 1022       %LSET INIT=CHARTEXT('INIT');
 1023       %LSET ENIT=CHARTEXT('');
 1024       %ELSE;
 1025       %LSET INIT=CHARTEXT('/*');
 1026       %LSET ENIT=CHARTEXT('*/');
 1027       %ENDIF;
 1028
 1029      %IF LVL=1;
 1030      DCL 1 NAME STCLASS ALGN,
 1031      %ELSE;
 1032           %(LVL) NAME ALGN,
 1033      %ENDIF;
 1034      %LSET NXTLVL = %(LVL+1);
 1035      %XSD_TEXTC(NAME=COMMONNAME,LEN=%XSD_UB_COMMONNAME,LVL=2,LAST=",");
 1036      %XSD_TEXTC(NAME=PRES,LEN=%XSD_UB_PRESADDR,LVL=2,LAST=",");
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       32   
 1037      %XSD_TEXTC(NAME=SESS,LEN=%XSD_UB_PRESADDR,LVL=2,LAST=",");
 1038      %XSD_TEXTC(NAME=TRAN,LEN=%XSD_UB_PRESADDR,LVL=2,LAST=",");
 1039      %XSD_TEXTC(NAME=NSAP,LEN=%XSD_UB_PRESADDR,LVL=2,LAST=";");
 1040      %MEND;
 1041
 1042
 1043      %MACRO XSD_CONTEXT(NAME=XSD$CONTEXT,LVL=1,LAST=";",STCLASS=BASED,ALGN=CALIGNED);
 1044       %LSET LISTDIR='0'B;
 1045       %LSET LISTEXP='1'B;
 1046       %LSET LISTCOM='0'B;
 1047       %LSET LISTSUB='1'B;
 1048       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1049       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1050       (SUBSTR(STR,0,8)='CONSTANT') OR
 1051       (SUBSTR(STR,0,3)='EXT');
 1052       %LSET INIT=CHARTEXT('INIT');
 1053       %LSET ENIT=CHARTEXT('');
 1054       %ELSE;
 1055       %LSET INIT=CHARTEXT('/*');
 1056       %LSET ENIT=CHARTEXT('*/');
 1057       %ENDIF;
 1058
 1059      %IF LVL=1;
 1060      DCL 1 NAME STCLASS ALGN,
 1061      %ELSE;
 1062           %(LVL) NAME ALGN,
 1063      %ENDIF;
 1064      %LSET NXTLVL = %(LVL+1);
 1065
 1066           %NXTLVL NEXTXS SBIN HALF HALIGNED %INIT(-1)%ENIT,
 1067             %NXTLVL NEXTX REDEF NEXTXS UBIN HALF HALIGNED,
 1068           /* buffer management index to next context */
 1069
 1070             %NXTLVL PRIORXS SBIN HALF HALIGNED %INIT(-1)%ENIT,
 1071             %NXTLVL PRIORX REDEF PRIORXS UBIN HALF HALIGNED,
 1072           /* buffer management index to previous context */
 1073
10:40 OCT 01 '97 XSD_MACRO_M.:XSA1SI                                       33   
 1074             %NXTLVL SERVICEXS SBIN HALF HALIGNED %INIT(-1)%ENIT,
 1075             %NXTLVL SERVICEX REDEF SERVICEXS UBIN HALF HALIGNED,
 1076           /* buffer management index to list of services.
 1077              in the case of a DUA this is the list of services waiting responses
 1078              or waiting to be sent to the DSA.  In the case of the DSA this
 1079              is the list of services currently being worked on */
 1080
 1081             %NXTLVL BINDTOXS SBIN HALF HALIGNED %INIT(-1)%ENIT,
 1082             %NXTLVL BINDTOX REDEF BINDTOXS UBIN HALF HALIGNED,
 1083           /* buffer management index to the an XSD$BIND structure describing
 1084              the client or server to which this conection is currently bound*/
 1085
 1086             %NXTLVL BINDFROMXS SBIN HALF HALIGNED %INIT(-1)%ENIT,
 1087             %NXTLVL BINDFROMX REDEF BINDFROMXS UBIN HALF HALIGNED,
 1088           /* index to an XSD$BIND structure which describes what address
 1089              this application used to bind to the remote */
 1090
 1091             %NXTLVL BUFXS SBIN HALF HALIGNED %INIT(-1)%ENIT,
 1092             %NXTLVL BUFX REDEF BUFXS UBIN HALF HALIGNED,
 1093            /* buffer used to read and write irel records */
 1094
 1095             %NXTLVL STATE UBIN WORD ALIGNED %INIT(%XSD_ST_NONE)%ENIT,
 1096           /* current state of the connection XSD_ST_? in XSD_SUBS_C*/
 1097
 1098             %NXTLVL UENTADDR$ EPTR ALIGNED %INIT(ENTADDR(NIL))%ENIT,
 1099           /* entry address specified by the user */
 1100
 1101             %NXTLVL FLAGS ALIGNED,
 1102             %(NXTLVL+1) DSA BIT(1) %INIT('0'B)%ENIT,
 1103                 /* indicates connection is to a DSA.  Only relevent is you are
 1104                    are a DSA too. */
 1105
 1106             %(NXTLVL+1) * BIT(35) %INIT('0'B) %ENIT,
 1107             %NXTLVL * UBIN WORD %INIT(0)%ENIT LAST
 1108      %MEND;

