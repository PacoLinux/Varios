VERSION A06

PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:1    
        1        1        /*M* Z8HR$CODE_GENERATOR - Root module for COBOL8x Code Generator */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*P*
        8        8             NAME: Z8HR$CODE_GENERATOR
        9        9             PURPOSE:
       10       10                  Drives the Code Generator via ILS and ILL tables.
       11       11             DESCRIPTION:
       12       12                  Steps through the ILS list, handling all CCOSU items
       13       13                  (compute common sub-expressions), by placing appropriate
       14       14                  counts into triads.  Once all counts are properly assigned,
       15       15                  control goes to Z8HI$BURST to tree-walk the ILL (internal
       16       16                  language list).
       17       17             REFERENCE:
       18       18                  Z8HI$BURST
       19       19                  DN15 - Global Optimization
       20       20                  Z8HD$DOCUMENT
       21       21                  Z8AD$DOCUMENT
       22       22        */
       23       23        /*F*
       24       24             NAME: Z8HR$CODE_GENERATOR
       25       25             PURPOSE:
       26       26                  Drives the code Generator via ILS and ILL tables.
       27       27             DESCRIPTION:
       28       28                  See *P* comment in Z8HR$CODE_GENERATOR.
       29       29        */
       30       30        /*D*
       31       31             NAME: Z8HR$CODE_GENERATOR
       32       32             CALL:
       33       33                  Z8HR$CODE_GENERATOR
       34       34             INTERFACE:
       35       35                  Z8HI$BURST
       36       36                  Z8HU$WALK
       37       37                  Z8HG$SAVE
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:2    
       38       38             ENVIRONMENT:
       39       39                  None.
       40       40             INPUT:
       41       41                  ILS and ILL tables
       42       42                  COMCOM
       43       43                  LTS TABLE
       44       44             OUTPUT:
       45       45                  None.
       46       46             SCRATCH:
       47       47                  P$     - Scratch pointer.
       48       48             DESCRIPTION:
       49       49                  Set up counts of common sub-expressions, then call Z8HI$BURST
       50       50                  to tree-walk, evaluate, and generate code bursts for ILL
       51       51                  entries.
       52       52        */
       53       53        Z8HR$CODE_GENERATOR:PROC NOAUTO;
       54       54
       55       55    1        DCL Z8HI$BURST ENTRY(2);
       56       56    1        DCL Z8HU$WALK ENTRY(1);
       57       57    1        DCL Z8HG$SAVE ENTRY(1) ALTRET;
       58       58    1        DCL Z8HG$FREE_REGISTER ENTRY(1);
       59       59    1        DCL Z8HP$PC_PEPD_INIT ENTRY;
       60       60    1        DCL Z9HP$PC_DEP_INIT ENTRY;
       61       61
       62       62             %EQU PHASE = 4;
       63       63             %INCLUDE Z8A_DEFC;
       64      131             %INCLUDE Z8A_SUPP_MAC;
       65     2531             %INCLUDE Z8A_COMCOM;
       66     3181             %INCLUDE Z8A_ILL;
       67     3874             %INCLUDE Z8A_ETT;
       68     4175             %INCLUDE Z8A_ST;
       69     7834             %INCLUDE Z8H_DEP;
       70     7941             %INCLUDE Z8H_RAT;
       71     8032             %INCLUDE Z9A_FLAGS;
       72     8046             %INCLUDE Z8H_CODE;
       73     8176             %INCLUDE Z8A_LTS;
       74    10253             %INCLUDE Z8A_ILS;
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:3    
       75    10362             %INCLUDE Z8H_SUPPORT;
       76    10810             %INCLUDE Z8H_EXT;
       77    10861
       78    10862    1        DCL P$ PTR;
       79    10863
       80    10864
       81    10865             %EQU SUBS            = 1;
       82    10866             %EQU ARITH           = 2;
       83    10867             %EQU ARITH_SUBS      = 3;
       84    10868             %EQU EVAL_SUBS       = 5;
       85    10869             %EQU EVAL_ARITH      = 6;
       86    10870             %EQU EVAL_ARITH_SUBS = 7;
       87    10871
       88    10872
       89    10873        %EJECT;
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:4    
       90    10874             /*V*
       91    10875                                 INIT_PEPD
       92    10876
       93    10877                 Call the modules that contain the initialization for the
       94    10878                 PEPD and DEP tables.  Compiler runtime initialization is
       95    10879                 necessary because the PCA creates assignment statements
       96    10880                 to initialize the PEPD and DEP, instead of init attributes
       97    10881                 on the table declaration.   This simplifies the PCA, and
       98    10882                 allows changes and additions to the pseudo-code without
       99    10883                 requiring recompilation of this module.
      100    10884
      101    10885                 Compile time initialization is hard to do for two reasons.
      102    10886                 The first is that there are more than one pseudo-code
      103    10887                 modules.  Each module contributes to the PEPD and DEP,
      104    10888                 so it's hard for the PCA to create an INIT without info
      105    10889                 from the other modules.    The second problem is that
      106    10890                 the actual ETT and ILL id values are unknown at pseudo-code
      107    10891                 assembly time.  An INIT might work if the items appeared
      108    10892                 in the pseudo-code in numerical order.  A possible
      109    10893                 kludge is to have a post PCA program that converts
      110    10894                 PCA output from all the pseudo-code modules into a single
      111    10895                 PL6 source file with a constant pepd using an
      112    10896                 INIT attribute.
      113    10897
      114    10898
      115    10899               */
      116    10900
      117    10901
      118    10902    1         CALL Z9HP$PC_DEP_INIT;
      119    10903    1         CALL Z8HP$PC_PEPD_INIT;
      120    10904        %EJECT;
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:5    
      121    10905        /*V*
      122    10906                                 INIT
      123    10907
      124    10908             - Initialize all ETT items.
      125    10909             - Assign required registers dedicated.
      126    10910
      127    10911        */
      128    10912             %TOP_ETT;
      129    10917
      130    10918    2        DO WHILE ETT$ ~= ADDR(NIL);
      131    10919    2          ETT$ -> ETT.COUNT = 0;
      132    10920    2          ETT$ -> ETT.STATE     = %UNEVAL_T;
      133    10921    2          ETT$ -> ETT.B     = '0'O;
      134    10922    2          ETT$ -> ETT.REF$  = ADDR(NIL);
      135    10923
      136    10924               %STEP_ETT;
      137    10934    2        END;
      138    10935
      139    10936
      140    10937    1        CURRENT_BLOCK$ = COMCOM.SEGMENT$(%PROC);
      141    10938
      142    10939    1        ROOT_PROC_BLOCK$ = COMCOM.SEGMENT$(%PROC);
      143    10940
      144    10941    1        CURRENT_SCOPE$ = COMCOM.FIRST_PROC$;
      145    10942
      146    10943    1        CALL Z8HI$BURST(COMCOM.SEGMENT$(%PROC),DEP.RDEP);
      147    10944
      148    10945        %EJECT;
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:6    
      149    10946    1        ILS$ = COMCOM.FIRST_ILS;
      150    10947
      151    10948    2        DO WHILE(ILS$ ~= ADDR(NIL));
      152    10949    2          ILL$ = ILS$ -> ILS.ILL$;
      153    10950
      154    10951    2          IF ILL$ ~= ADDR(NIL) THEN
      155    10952    3            DO;
      156    10953    4              DO WHILE(ILL$ -> ILL.ID = %CCOSU);
      157    10954    4                P$ = ILL$ -> CCOSU.EVEX;
      158    10955
      159    10956    4                IF ILL$ -> CCOSU.B.VAL_FREEZE THEN
      160    10957    4                  CALL Z8HI$BURST(ILL$,DEP.IDEP);
      161    10958    4                ELSE
      162    10959    5                  DO CASE(ILL$ -> CCOSU.GEN.CODE);
      163    10960    5                    CASE(%SUBS,%ARITH);
      164    10961    5                      P$ -> ETT.COUNT = ILL$ -> CCOSU.CNTE;
      165    10962    5                    CASE(%ARITH_SUBS,%EVAL_ARITH_SUBS);
      166    10963    5                      P$ -> ETT.COUNT = ILL$ -> CCOSU.CNTE;
      167    10964    5                      CALL Z8HU$WALK(P$);
      168    10965
      169    10966    5                      IF ILL$ -> CCOSU.B.GOOD_FOREVER THEN
      170    10967    6                        DO;
      171    10968    6                          CALL Z8HG$SAVE(P$);
      172    10969
      173    10970    6                          IF P$ -> ETT.REF$ -> REF.ST$ -> ST.ID = %TEMP THEN
      174    10971    6                            P$ -> ETT.REF$ -> REF.ST$ -> TEMP.B.NOT_REUSABLE = TRUE;
      175    10972    6                        END;
      176    10973
      177    10974
      178    10975    5                    CASE(%EVAL_SUBS);
      179    10976    5                      P$ -> ETT.COUNT = ILL$ -> CCOSU.CNTE;
      180    10977    5                      CALL Z8HU$WALK(P$);
      181    10978
      182    10979    5                      IF ILL$ -> CCOSU.B.GOOD_FOREVER THEN
      183    10980    6                        DO;
      184    10981    6                          CALL Z8HG$SAVE(P$);
      185    10982
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:7    
      186    10983    6                          IF P$ -> ETT.REF$ -> REF.ST$ -> ST.ID = %TEMP THEN
      187    10984    6                            P$ -> ETT.REF$ -> REF.ST$ -> TEMP.B.NOT_REUSABLE = TRUE;
      188    10985    6                        END;
      189    10986
      190    10987    5                    CASE(%EVAL_ARITH);
      191    10988    5                      P$ -> ETT.COUNT = ILL$ -> CCOSU.CNTE;
      192    10989    5                      CALL Z8HU$WALK(P$);
      193    10990
      194    10991    5                      IF ILL$ -> CCOSU.B.GOOD_FOREVER THEN
      195    10992    6                        DO;
      196    10993    6                          CALL Z8HG$SAVE(P$);
      197    10994    6                          IF P$ -> ETT.REF$ -> REF.ST$ -> ST.ID = %TEMP THEN
      198    10995    6                            P$ -> ETT.REF$ -> REF.ST$ -> TEMP.B.NOT_REUSABLE = TRUE;
      199    10996    6                          CALL Z8HG$FREE_REGISTER(%IND);
      200    10997    6                        END;
      201    10998    5                      ELSE
      202    10999    6                        DO CASE(P$ -> ETT.ID);
      203    11000                                /* If this is a comparison triad we
      204    11001                                   must make sure it is storage contained
      205    11002                                   because we can't be sure that the indicator
      206    11003                                   register won't be violated before the
      207    11004                                   information in it is used.  */
      208    11005    6                          CASE(
      209    11006                                    %SET_OF_COMPARISONS;
      210    11011    6                                                  );
      211    11012    6                            CALL Z8HG$SAVE(P$);
      212    11013    6                            CALL Z8HG$FREE_REGISTER(%IND);
      213    11014    6                        END; /* CASE */
      214    11015    5                    CASE(ELSE);
      215    11016    5                  END /* Case */;
      216    11017
      217    11018    4                ILL$ = ILL$ -> CCOSU.ILL$;
      218    11019    4              END;
      219    11020
      220    11021    3              CALL Z8HI$BURST(ILL$, PEPD(ILL$ -> ILL.ID));
      221    11022    3            END;
      222    11023
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:8    
      223    11024    2          ILS$ = ILS$ -> ILS.NEXT;
      224    11025    2        END;
      225    11026
      226    11027    2        DO WHILE (ROOT_PROC_BLOCK$ ~= ADDR(NIL));
      227    11028
      228    11029    2          COMCOM.SEGMENT$(ROOT_PROC_BLOCK$ -> SEGMENT.COUNT) = ROOT_PROC_BLOCK$;
      229    11030    2          ROOT_PROC_BLOCK$ = ROOT_PROC_BLOCK$ -> SEGMENT.NEXT;
      230    11031
      231    11032    2        END;
      232    11033
      233    11034
      234    11035         /*  Temporarily assign the COMCOM.SEGMENTC to 1, will be removed
      235    11036             after the segmentation is implemented on CP6. */
      236    11037           %IF CP6;
      237    11038
      238    11039    1        COMCOM.SEGMENTC = 1;
      239    11040
      240    11041           %ENDIF;
      241    11042
      242    11043    1   END Z8HR$CODE_GENERATOR;

PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:9    
--  Include file information  --

   Z8H_EXT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_SUPPORT.:Z8A6TOU  is referenced.
   Z8A_ILS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_CODE.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_DEP.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ILL.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HR$CODE_GENERATOR.

   Procedure Z8HR$CODE_GENERATOR requires 325 words for executable code.
   Procedure Z8HR$CODE_GENERATOR is declared NOAUTO and requires 34 words of local(STATIC) storage.

    No errors detected in file Z8HR.:Z8A6TSI    .

PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:10   

 Object Unit name= Z8HR$CODE_GENERATOR                        File name= Z8HR.:Z8A6TOU
 UTS= AUG 09 '97 13:22:29.40 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none    34     42  Z8HR$CODE_GENERATOR
    1  LblCom even  none     1      1  ITERATION
    2  LblCom even  none     1      1  ILL$
    3  LblCom even  none     5      5  ILL_
    4  LblCom even  none     1      1  ETT$
    5  LblCom even  none     1      1  HEAD_ETT$
    6  LblCom even  none   512   1000  ETT_BUCKETS
    7  LblCom even  none     5      5  ETT_
    8  LblCom even  none     1      1  ST$
    9  LblCom even  none     5      5  ST_
   10  LblCom even  none    48     60  DEP
   11  LblCom even  none   112    160  RAT
   12  LblCom even  none     1      1  CURRENT_BLOCK$
   13  LblCom even  none     1      1  ROOT_PROC_BLOCK$
   14  LblCom even  none     1      1  LTS$
   15  LblCom even  none     5      5  LTS_
   16  LblCom even  none     1      1  ILS$
   17  LblCom even  none     5      5  ILS_
   18  LblCom even  none     1      1  NUMBER_OF_PRIMES
   19  LblCom even  none     1      1  NUMBER_OF_TEMPS
   20  LblCom even  none     1      1  NUMBER_OF_REFS
   21  LblCom even  none     1      1  GENERATING_PTRS
   22  LblCom even  none     1      1  USE_PROC_RETURN
   23  LblCom even  none     1      1  CURRENT_SCOPE$
   24  LblCom even  none     1      1  HEAD_REF$
   25  LblCom even  none     1      1  HEAD_TEMP$
   26  LblCom even  none     1      1  CONST$
   27  LblCom even  none     1      1  HEAD_PRIMES$
   28  LblCom even  none     1      1  CUR_LOOP_LEVEL
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:11   
   29  LblCom even  none     2      2  PEPD
   30   Proc  even  none   325    505  Z8HR$CODE_GENERATOR
   31  RoData even  none    11     13  Z8HR$CODE_GENERATOR

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    30      0   yes            yes      Std        0  Z8HR$CODE_GENERATOR

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 Z9HP$PC_DEP_INIT
         yes           Std       1 Z8HU$WALK
         yes           Std       0 Z8HP$PC_PEPD_INIT
         yes           Std       2 Z8HI$BURST
 yes     yes           Std       1 Z8HG$SAVE
         yes           Std       1 Z8HG$FREE_REGISTER

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     COMCOM                           r    ILL_STEP                         r    LTS_STEP
r    ILS_STEP_TABLE

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:12   


        1        1        /*M* Z8HR$CODE_GENERATOR - Root module for COBOL8x Code Generator */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*P*
        8        8             NAME: Z8HR$CODE_GENERATOR
        9        9             PURPOSE:
       10       10                  Drives the Code Generator via ILS and ILL tables.
       11       11             DESCRIPTION:
       12       12                  Steps through the ILS list, handling all CCOSU items
       13       13                  (compute common sub-expressions), by placing appropriate
       14       14                  counts into triads.  Once all counts are properly assigned,
       15       15                  control goes to Z8HI$BURST to tree-walk the ILL (internal
       16       16                  language list).
       17       17             REFERENCE:
       18       18                  Z8HI$BURST
       19       19                  DN15 - Global Optimization
       20       20                  Z8HD$DOCUMENT
       21       21                  Z8AD$DOCUMENT
       22       22        */
       23       23        /*F*
       24       24             NAME: Z8HR$CODE_GENERATOR
       25       25             PURPOSE:
       26       26                  Drives the code Generator via ILS and ILL tables.
       27       27             DESCRIPTION:
       28       28                  See *P* comment in Z8HR$CODE_GENERATOR.
       29       29        */
       30       30        /*D*
       31       31             NAME: Z8HR$CODE_GENERATOR
       32       32             CALL:
       33       33                  Z8HR$CODE_GENERATOR
       34       34             INTERFACE:
       35       35                  Z8HI$BURST
       36       36                  Z8HU$WALK
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:13   
       37       37                  Z8HG$SAVE
       38       38             ENVIRONMENT:
       39       39                  None.
       40       40             INPUT:
       41       41                  ILS and ILL tables
       42       42                  COMCOM
       43       43                  LTS TABLE
       44       44             OUTPUT:
       45       45                  None.
       46       46             SCRATCH:
       47       47                  P$     - Scratch pointer.
       48       48             DESCRIPTION:
       49       49                  Set up counts of common sub-expressions, then call Z8HI$BURST
       50       50                  to tree-walk, evaluate, and generate code bursts for ILL
       51       51                  entries.
       52       52        */
       53       53        Z8HR$CODE_GENERATOR:PROC NOAUTO;

     53 30 000000   000000 741200 0     Z8HR$CODE_G* STX1  ! 0

       54       54
       55       55    1        DCL Z8HI$BURST ENTRY(2);
       56       56    1        DCL Z8HU$WALK ENTRY(1);
       57       57    1        DCL Z8HG$SAVE ENTRY(1) ALTRET;
       58       58    1        DCL Z8HG$FREE_REGISTER ENTRY(1);
       59       59    1        DCL Z8HP$PC_PEPD_INIT ENTRY;
       60       60    1        DCL Z9HP$PC_DEP_INIT ENTRY;
       61       61
       62       62             %EQU PHASE = 4;
       63       63             %INCLUDE Z8A_DEFC;
       64      131             %INCLUDE Z8A_SUPP_MAC;
       65     2531             %INCLUDE Z8A_COMCOM;
       66     3181             %INCLUDE Z8A_ILL;
       67     3874             %INCLUDE Z8A_ETT;
       68     4175             %INCLUDE Z8A_ST;
       69     7834             %INCLUDE Z8H_DEP;
       70     7941             %INCLUDE Z8H_RAT;
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:14   
       71     8032             %INCLUDE Z9A_FLAGS;
       72     8046             %INCLUDE Z8H_CODE;
       73     8176             %INCLUDE Z8A_LTS;
       74    10253             %INCLUDE Z8A_ILS;
       75    10362             %INCLUDE Z8H_SUPPORT;
       76    10810             %INCLUDE Z8H_EXT;
       77    10861
       78    10862    1        DCL P$ PTR;
       79    10863
       80    10864
       81    10865             %EQU SUBS            = 1;
       82    10866             %EQU ARITH           = 2;
       83    10867             %EQU ARITH_SUBS      = 3;
       84    10868             %EQU EVAL_SUBS       = 5;
       85    10869             %EQU EVAL_ARITH      = 6;
       86    10870             %EQU EVAL_ARITH_SUBS = 7;
       87    10871
       88    10872
       89    10873        %EJECT;
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:15   
       90    10874             /*V*
       91    10875                                 INIT_PEPD
       92    10876
       93    10877                 Call the modules that contain the initialization for the
       94    10878                 PEPD and DEP tables.  Compiler runtime initialization is
       95    10879                 necessary because the PCA creates assignment statements
       96    10880                 to initialize the PEPD and DEP, instead of init attributes
       97    10881                 on the table declaration.   This simplifies the PCA, and
       98    10882                 allows changes and additions to the pseudo-code without
       99    10883                 requiring recompilation of this module.
      100    10884
      101    10885                 Compile time initialization is hard to do for two reasons.
      102    10886                 The first is that there are more than one pseudo-code
      103    10887                 modules.  Each module contributes to the PEPD and DEP,
      104    10888                 so it's hard for the PCA to create an INIT without info
      105    10889                 from the other modules.    The second problem is that
      106    10890                 the actual ETT and ILL id values are unknown at pseudo-code
      107    10891                 assembly time.  An INIT might work if the items appeared
      108    10892                 in the pseudo-code in numerical order.  A possible
      109    10893                 kludge is to have a post PCA program that converts
      110    10894                 PCA output from all the pseudo-code modules into a single
      111    10895                 PL6 source file with a constant pepd using an
      112    10896                 INIT attribute.
      113    10897
      114    10898
      115    10899               */
      116    10900
      117    10901
      118    10902    1         CALL Z9HP$PC_DEP_INIT;

  10902 30 000001   000000 631400 31                 EPPR1   0
        30 000002   000000 701000 xent               TSX1    Z9HP$PC_DEP_INIT
        30 000003   000000 011000                    NOP     0

      119    10903    1         CALL Z8HP$PC_PEPD_INIT;

  10903 30 000004   000000 631400 31                 EPPR1   0
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:16   
        30 000005   000000 701000 xent               TSX1    Z8HP$PC_PEPD_INIT
        30 000006   000000 011000                    NOP     0

      120    10904        %EJECT;
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:17   
      121    10905        /*V*
      122    10906                                 INIT
      123    10907
      124    10908             - Initialize all ETT items.
      125    10909             - Assign required registers dedicated.
      126    10910
      127    10911        */
      128    10912             %TOP_ETT;

  10914 30 000007   000000 236000 7                  LDQ     ETT_
        30 000010   000000 756000 4                  STQ     ETT$

      129    10917
      130    10918    2        DO WHILE ETT$ ~= ADDR(NIL);

  10918 30 000011   000043 710000 30                 TRA     s:10934

      131    10919    2          ETT$ -> ETT.COUNT = 0;

  10919 30 000012   000000 220003                    LDX0    0,DU
        30 000013   000000 470400 4                  LDP0    ETT$
        30 000014   000000 440100                    SXL0    0,,PR0

      132    10920    2          ETT$ -> ETT.STATE     = %UNEVAL_T;

  10920 30 000015   000000 470400 4                  LDP0    ETT$
        30 000016   000004 740100                    STX0    4,,PR0

      133    10921    2          ETT$ -> ETT.B     = '0'O;

  10921 30 000017   000000 221003                    LDX1    0,DU
        30 000020   000004 441100                    SXL1    4,,PR0

      134    10922    2          ETT$ -> ETT.REF$  = ADDR(NIL);

  10922 30 000021   000001 236000 31                 LDQ     1
        30 000022   000003 756100                    STQ     3,,PR0
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:18   

      135    10923
      136    10924               %STEP_ETT;

  10926 30 000023   000000 236000 4                  LDQ     ETT$
        30 000024   000005 036003                    ADLQ    5,DU
        30 000025   000000 756000 4                  STQ     ETT$

  10927 30 000026   000002 236000 7                  LDQ     ETT_+2
        30 000027   000022 736000                    QLS     18
        30 000030   000001 036000 7                  ADLQ    ETT_+1
        30 000031   000000 116000 4                  CMPQ    ETT$
        30 000032   000036 601000 30                 TNZ     s:10930

  10928 30 000033   000001 236000 31                 LDQ     1
        30 000034   000000 756000 4                  STQ     ETT$
        30 000035   000043 710000 30                 TRA     s:10934

  10930 30 000036   000000 470400 4                  LDP0    ETT$
        30 000037   000000 222100                    LDX2    0,,PR0
        30 000040   000043 601000 30                 TNZ     s:10934

  10931 30 000041   000001 236100                    LDQ     1,,PR0
        30 000042   000000 756000 4                  STQ     ETT$

      137    10934    2        END;

  10934 30 000043   000000 236000 4                  LDQ     ETT$
        30 000044   000001 116000 31                 CMPQ    1
        30 000045   000012 601000 30                 TNZ     s:10919

      138    10935
      139    10936
      140    10937    1        CURRENT_BLOCK$ = COMCOM.SEGMENT$(%PROC);

  10937 30 000046   000150 236000 xsym               LDQ     COMCOM+104
        30 000047   000000 756000 12                 STQ     CURRENT_BLOCK$
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:19   

      141    10938
      142    10939    1        ROOT_PROC_BLOCK$ = COMCOM.SEGMENT$(%PROC);

  10939 30 000050   000000 756000 13                 STQ     ROOT_PROC_BLOCK$

      143    10940
      144    10941    1        CURRENT_SCOPE$ = COMCOM.FIRST_PROC$;

  10941 30 000051   000136 236000 xsym               LDQ     COMCOM+94
        30 000052   000000 756000 23                 STQ     CURRENT_SCOPE$

      145    10942
      146    10943    1        CALL Z8HI$BURST(COMCOM.SEGMENT$(%PROC),DEP.RDEP);

  10943 30 000053   000003 630400 31                 EPPR0   3
        30 000054   000002 631400 31                 EPPR1   2
        30 000055   000000 701000 xent               TSX1    Z8HI$BURST
        30 000056   000000 011000                    NOP     0

      147    10944
      148    10945        %EJECT;
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:20   
      149    10946    1        ILS$ = COMCOM.FIRST_ILS;

  10946 30 000057   000010 236000 xsym               LDQ     COMCOM+8
        30 000060   000000 756000 16                 STQ     ILS$

      150    10947
      151    10948    2        DO WHILE(ILS$ ~= ADDR(NIL));

  10948 30 000061   000464 710000 30                 TRA     s:11025

      152    10949    2          ILL$ = ILS$ -> ILS.ILL$;

  10949 30 000062   000000 470400 16                 LDP0    ILS$
        30 000063   000003 236100                    LDQ     3,,PR0
        30 000064   000000 756000 2                  STQ     ILL$

      153    10950
      154    10951    2          IF ILL$ ~= ADDR(NIL) THEN

  10951 30 000065   000001 116000 31                 CMPQ    1
        30 000066   000461 600000 30                 TZE     s:11024

      155    10952    3            DO;

      156    10953    4              DO WHILE(ILL$ -> ILL.ID = %CCOSU);

  10953 30 000067   000000 471400 2                  LDP1    ILL$
        30 000070   100000 220100                    LDX0    0,,PR1
        30 000071   000342 100003                    CMPX0   226,DU
        30 000072   000447 601000 30                 TNZ     s:11021

      157    10954    4                P$ = ILL$ -> CCOSU.EVEX;

  10954 30 000073   000000 470400 2                  LDP0    ILL$
        30 000074   000004 236100                    LDQ     4,,PR0
        30 000075   000037 756000 0                  STQ     P$

PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:21   
      158    10955
      159    10956    4                IF ILL$ -> CCOSU.B.VAL_FREEZE THEN

  10956 30 000076   000002 236100                    LDQ     2,,PR0
        30 000077   010000 316003                    CANQ    4096,DU
        30 000100   000106 600000 30                 TZE     s:10959

      160    10957    4                  CALL Z8HI$BURST(ILL$,DEP.IDEP);

  10957 30 000101   000005 630400 31                 EPPR0   5
        30 000102   000002 631400 31                 EPPR1   2
        30 000103   000000 701000 xent               TSX1    Z8HI$BURST
        30 000104   000000 011000                    NOP     0
        30 000105   000440 710000 30                 TRA     s:11018

      161    10958    4                ELSE
      162    10959    5                  DO CASE(ILL$ -> CCOSU.GEN.CODE);

  10959 30 000106   000002 720100                    LXL0    2,,PR0
        30 000107   000017 360003                    ANX0    15,DU
        30 000110   000010 100003                    CMPX0   8,DU
        30 000111   000113 602010 30                 TNC     s:10959+5,X0
        30 000112   000440 710000 30                 TRA     s:11018
        30 000113   000440 710000 30                 TRA     s:11018
        30 000114   000123 710000 30                 TRA     s:10961
        30 000115   000123 710000 30                 TRA     s:10961
        30 000116   000127 710000 30                 TRA     s:10963
        30 000117   000440 710000 30                 TRA     s:11018
        30 000120   000157 710000 30                 TRA     s:10976
        30 000121   000207 710000 30                 TRA     s:10988
        30 000122   000127 710000 30                 TRA     s:10963

      163    10960    5                    CASE(%SUBS,%ARITH);

      164    10961    5                      P$ -> ETT.COUNT = ILL$ -> CCOSU.CNTE;

  10961 30 000123   000000 721100                    LXL1    0,,PR0
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:22   
        30 000124   000037 471400 0                  LDP1    P$
        30 000125   100000 441100                    SXL1    0,,PR1
        30 000126   000440 710000 30                 TRA     s:11018

      165    10962    5                    CASE(%ARITH_SUBS,%EVAL_ARITH_SUBS);

      166    10963    5                      P$ -> ETT.COUNT = ILL$ -> CCOSU.CNTE;

  10963 30 000127   000000 721100                    LXL1    0,,PR0
        30 000130   000037 471400 0                  LDP1    P$
        30 000131   100000 441100                    SXL1    0,,PR1

      167    10964    5                      CALL Z8HU$WALK(P$);

  10964 30 000132   000010 630400 31                 EPPR0   8
        30 000133   000007 631400 31                 EPPR1   7
        30 000134   000000 701000 xent               TSX1    Z8HU$WALK
        30 000135   000000 011000                    NOP     0

      168    10965
      169    10966    5                      IF ILL$ -> CCOSU.B.GOOD_FOREVER THEN

  10966 30 000136   000000 470400 2                  LDP0    ILL$
        30 000137   000002 236100                    LDQ     2,,PR0
        30 000140   020000 316003                    CANQ    8192,DU
        30 000141   000440 600000 30                 TZE     s:11018

      170    10967    6                        DO;

      171    10968    6                          CALL Z8HG$SAVE(P$);

  10968 30 000142   000010 630400 31                 EPPR0   8
        30 000143   000007 631400 31                 EPPR1   7
        30 000144   000000 701000 xent               TSX1    Z8HG$SAVE
        30 000145   000000 011000                    NOP     0

      172    10969
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:23   
      173    10970    6                          IF P$ -> ETT.REF$ -> REF.ST$ -> ST.ID = %TEMP THEN

  10970 30 000146   000037 470400 0                  LDP0    P$
        30 000147   000003 471500                    LDP1    3,,PR0
        30 000150   100005 473500                    LDP3    5,,PR1
        30 000151   300000 220100                    LDX0    0,,PR3
        30 000152   000760 100003                    CMPX0   496,DU
        30 000153   000440 601000 30                 TNZ     s:11018

      174    10971    6                            P$ -> ETT.REF$ -> REF.ST$ -> TEMP.B.NOT_REUSABLE = TRUE;

  10971 30 000154   400000 236003                    LDQ     -131072,DU
        30 000155   300003 256100                    ORSQ    3,,PR3

      175    10972    6                        END;

  10972 30 000156   000440 710000 30                 TRA     s:11018

      176    10973
      177    10974
      178    10975    5                    CASE(%EVAL_SUBS);

      179    10976    5                      P$ -> ETT.COUNT = ILL$ -> CCOSU.CNTE;

  10976 30 000157   000000 721100                    LXL1    0,,PR0
        30 000160   000037 471400 0                  LDP1    P$
        30 000161   100000 441100                    SXL1    0,,PR1

      180    10977    5                      CALL Z8HU$WALK(P$);

  10977 30 000162   000010 630400 31                 EPPR0   8
        30 000163   000007 631400 31                 EPPR1   7
        30 000164   000000 701000 xent               TSX1    Z8HU$WALK
        30 000165   000000 011000                    NOP     0

      181    10978
      182    10979    5                      IF ILL$ -> CCOSU.B.GOOD_FOREVER THEN
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:24   

  10979 30 000166   000000 470400 2                  LDP0    ILL$
        30 000167   000002 236100                    LDQ     2,,PR0
        30 000170   020000 316003                    CANQ    8192,DU
        30 000171   000440 600000 30                 TZE     s:11018

      183    10980    6                        DO;

      184    10981    6                          CALL Z8HG$SAVE(P$);

  10981 30 000172   000010 630400 31                 EPPR0   8
        30 000173   000007 631400 31                 EPPR1   7
        30 000174   000000 701000 xent               TSX1    Z8HG$SAVE
        30 000175   000000 011000                    NOP     0

      185    10982
      186    10983    6                          IF P$ -> ETT.REF$ -> REF.ST$ -> ST.ID = %TEMP THEN

  10983 30 000176   000037 470400 0                  LDP0    P$
        30 000177   000003 471500                    LDP1    3,,PR0
        30 000200   100005 473500                    LDP3    5,,PR1
        30 000201   300000 220100                    LDX0    0,,PR3
        30 000202   000760 100003                    CMPX0   496,DU
        30 000203   000440 601000 30                 TNZ     s:11018

      187    10984    6                            P$ -> ETT.REF$ -> REF.ST$ -> TEMP.B.NOT_REUSABLE = TRUE;

  10984 30 000204   400000 236003                    LDQ     -131072,DU
        30 000205   300003 256100                    ORSQ    3,,PR3

      188    10985    6                        END;

  10985 30 000206   000440 710000 30                 TRA     s:11018

      189    10986
      190    10987    5                    CASE(%EVAL_ARITH);

PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:25   
      191    10988    5                      P$ -> ETT.COUNT = ILL$ -> CCOSU.CNTE;

  10988 30 000207   000000 721100                    LXL1    0,,PR0
        30 000210   000037 471400 0                  LDP1    P$
        30 000211   100000 441100                    SXL1    0,,PR1

      192    10989    5                      CALL Z8HU$WALK(P$);

  10989 30 000212   000010 630400 31                 EPPR0   8
        30 000213   000007 631400 31                 EPPR1   7
        30 000214   000000 701000 xent               TSX1    Z8HU$WALK
        30 000215   000000 011000                    NOP     0

      193    10990
      194    10991    5                      IF ILL$ -> CCOSU.B.GOOD_FOREVER THEN

  10991 30 000216   000000 470400 2                  LDP0    ILL$
        30 000217   000002 236100                    LDQ     2,,PR0
        30 000220   020000 316003                    CANQ    8192,DU
        30 000221   000243 600000 30                 TZE     s:10999

      195    10992    6                        DO;

      196    10993    6                          CALL Z8HG$SAVE(P$);

  10993 30 000222   000010 630400 31                 EPPR0   8
        30 000223   000007 631400 31                 EPPR1   7
        30 000224   000000 701000 xent               TSX1    Z8HG$SAVE
        30 000225   000000 011000                    NOP     0

      197    10994    6                          IF P$ -> ETT.REF$ -> REF.ST$ -> ST.ID = %TEMP THEN

  10994 30 000226   000037 470400 0                  LDP0    P$
        30 000227   000003 471500                    LDP1    3,,PR0
        30 000230   100005 473500                    LDP3    5,,PR1
        30 000231   300000 220100                    LDX0    0,,PR3
        30 000232   000760 100003                    CMPX0   496,DU
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:26   
        30 000233   000236 601000 30                 TNZ     s:10996

      198    10995    6                            P$ -> ETT.REF$ -> REF.ST$ -> TEMP.B.NOT_REUSABLE = TRUE;

  10995 30 000234   400000 236003                    LDQ     -131072,DU
        30 000235   300003 256100                    ORSQ    3,,PR3

      199    10996    6                          CALL Z8HG$FREE_REGISTER(%IND);

  10996 30 000236   000012 630400 31                 EPPR0   10
        30 000237   000007 631400 31                 EPPR1   7
        30 000240   000000 701000 xent               TSX1    Z8HG$FREE_REGISTER
        30 000241   000000 011000                    NOP     0

      200    10997    6                        END;

  10997 30 000242   000440 710000 30                 TRA     s:11018

      201    10998    5                      ELSE
      202    10999    6                        DO CASE(P$ -> ETT.ID);

  10999 30 000243   000037 471400 0                  LDP1    P$
        30 000244   100000 236100                    LDQ     0,,PR1
        30 000245   000022 772000                    QRL     18
        30 000246   000025 136007                    SBLQ    21,DL
        30 000247   000155 116007                    CMPQ    109,DL
        30 000250   000252 602006 30                 TNC     s:10999+7,QL
        30 000251   000440 710000 30                 TRA     s:11018
        30 000252   000427 710000 30                 TRA     s:11012
        30 000253   000437 710000 30                 TRA     s:11014
        30 000254   000437 710000 30                 TRA     s:11014
        30 000255   000437 710000 30                 TRA     s:11014
        30 000256   000427 710000 30                 TRA     s:11012
        30 000257   000427 710000 30                 TRA     s:11012
        30 000260   000427 710000 30                 TRA     s:11012
        30 000261   000437 710000 30                 TRA     s:11014
        30 000262   000437 710000 30                 TRA     s:11014
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:27   
        30 000263   000437 710000 30                 TRA     s:11014
        30 000264   000437 710000 30                 TRA     s:11014
        30 000265   000437 710000 30                 TRA     s:11014
        30 000266   000437 710000 30                 TRA     s:11014
        30 000267   000437 710000 30                 TRA     s:11014
        30 000270   000437 710000 30                 TRA     s:11014
        30 000271   000437 710000 30                 TRA     s:11014
        30 000272   000437 710000 30                 TRA     s:11014
        30 000273   000437 710000 30                 TRA     s:11014
        30 000274   000437 710000 30                 TRA     s:11014
        30 000275   000437 710000 30                 TRA     s:11014
        30 000276   000437 710000 30                 TRA     s:11014
        30 000277   000437 710000 30                 TRA     s:11014
        30 000300   000437 710000 30                 TRA     s:11014
        30 000301   000437 710000 30                 TRA     s:11014
        30 000302   000437 710000 30                 TRA     s:11014
        30 000303   000437 710000 30                 TRA     s:11014
        30 000304   000437 710000 30                 TRA     s:11014
        30 000305   000437 710000 30                 TRA     s:11014
        30 000306   000437 710000 30                 TRA     s:11014
        30 000307   000437 710000 30                 TRA     s:11014
        30 000310   000437 710000 30                 TRA     s:11014
        30 000311   000437 710000 30                 TRA     s:11014
        30 000312   000437 710000 30                 TRA     s:11014
        30 000313   000437 710000 30                 TRA     s:11014
        30 000314   000437 710000 30                 TRA     s:11014
        30 000315   000437 710000 30                 TRA     s:11014
        30 000316   000437 710000 30                 TRA     s:11014
        30 000317   000437 710000 30                 TRA     s:11014
        30 000320   000437 710000 30                 TRA     s:11014
        30 000321   000437 710000 30                 TRA     s:11014
        30 000322   000437 710000 30                 TRA     s:11014
        30 000323   000437 710000 30                 TRA     s:11014
        30 000324   000437 710000 30                 TRA     s:11014
        30 000325   000437 710000 30                 TRA     s:11014
        30 000326   000437 710000 30                 TRA     s:11014
        30 000327   000437 710000 30                 TRA     s:11014
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:28   
        30 000330   000437 710000 30                 TRA     s:11014
        30 000331   000437 710000 30                 TRA     s:11014
        30 000332   000437 710000 30                 TRA     s:11014
        30 000333   000427 710000 30                 TRA     s:11012
        30 000334   000427 710000 30                 TRA     s:11012
        30 000335   000427 710000 30                 TRA     s:11012
        30 000336   000427 710000 30                 TRA     s:11012
        30 000337   000427 710000 30                 TRA     s:11012
        30 000340   000427 710000 30                 TRA     s:11012
        30 000341   000437 710000 30                 TRA     s:11014
        30 000342   000437 710000 30                 TRA     s:11014
        30 000343   000427 710000 30                 TRA     s:11012
        30 000344   000437 710000 30                 TRA     s:11014
        30 000345   000437 710000 30                 TRA     s:11014
        30 000346   000427 710000 30                 TRA     s:11012
        30 000347   000437 710000 30                 TRA     s:11014
        30 000350   000427 710000 30                 TRA     s:11012
        30 000351   000437 710000 30                 TRA     s:11014
        30 000352   000437 710000 30                 TRA     s:11014
        30 000353   000437 710000 30                 TRA     s:11014
        30 000354   000437 710000 30                 TRA     s:11014
        30 000355   000437 710000 30                 TRA     s:11014
        30 000356   000437 710000 30                 TRA     s:11014
        30 000357   000437 710000 30                 TRA     s:11014
        30 000360   000437 710000 30                 TRA     s:11014
        30 000361   000437 710000 30                 TRA     s:11014
        30 000362   000437 710000 30                 TRA     s:11014
        30 000363   000437 710000 30                 TRA     s:11014
        30 000364   000437 710000 30                 TRA     s:11014
        30 000365   000437 710000 30                 TRA     s:11014
        30 000366   000437 710000 30                 TRA     s:11014
        30 000367   000437 710000 30                 TRA     s:11014
        30 000370   000437 710000 30                 TRA     s:11014
        30 000371   000437 710000 30                 TRA     s:11014
        30 000372   000437 710000 30                 TRA     s:11014
        30 000373   000437 710000 30                 TRA     s:11014
        30 000374   000437 710000 30                 TRA     s:11014
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:29   
        30 000375   000437 710000 30                 TRA     s:11014
        30 000376   000437 710000 30                 TRA     s:11014
        30 000377   000437 710000 30                 TRA     s:11014
        30 000400   000437 710000 30                 TRA     s:11014
        30 000401   000437 710000 30                 TRA     s:11014
        30 000402   000437 710000 30                 TRA     s:11014
        30 000403   000437 710000 30                 TRA     s:11014
        30 000404   000437 710000 30                 TRA     s:11014
        30 000405   000427 710000 30                 TRA     s:11012
        30 000406   000437 710000 30                 TRA     s:11014
        30 000407   000437 710000 30                 TRA     s:11014
        30 000410   000437 710000 30                 TRA     s:11014
        30 000411   000437 710000 30                 TRA     s:11014
        30 000412   000437 710000 30                 TRA     s:11014
        30 000413   000437 710000 30                 TRA     s:11014
        30 000414   000437 710000 30                 TRA     s:11014
        30 000415   000427 710000 30                 TRA     s:11012
        30 000416   000437 710000 30                 TRA     s:11014
        30 000417   000437 710000 30                 TRA     s:11014
        30 000420   000437 710000 30                 TRA     s:11014
        30 000421   000437 710000 30                 TRA     s:11014
        30 000422   000437 710000 30                 TRA     s:11014
        30 000423   000437 710000 30                 TRA     s:11014
        30 000424   000427 710000 30                 TRA     s:11012
        30 000425   000437 710000 30                 TRA     s:11014
        30 000426   000427 710000 30                 TRA     s:11012

      203    11000                                /* If this is a comparison triad we
      204    11001                                   must make sure it is storage contained
      205    11002                                   because we can't be sure that the indicator
      206    11003                                   register won't be violated before the
      207    11004                                   information in it is used.  */
      208    11005    6                          CASE(

      209    11006                                    %SET_OF_COMPARISONS;
      210    11011    6                                                  );
      211    11012    6                            CALL Z8HG$SAVE(P$);
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:30   

  11012 30 000427   000010 630400 31                 EPPR0   8
        30 000430   000007 631400 31                 EPPR1   7
        30 000431   000000 701000 xent               TSX1    Z8HG$SAVE
        30 000432   000000 011000                    NOP     0

      212    11013    6                            CALL Z8HG$FREE_REGISTER(%IND);

  11013 30 000433   000012 630400 31                 EPPR0   10
        30 000434   000007 631400 31                 EPPR1   7
        30 000435   000000 701000 xent               TSX1    Z8HG$FREE_REGISTER
        30 000436   000000 011000                    NOP     0

      213    11014    6                        END; /* CASE */

  11014 30 000437   000440 710000 30                 TRA     s:11018

      214    11015    5                    CASE(ELSE);

      215    11016    5                  END /* Case */;

      216    11017
      217    11018    4                ILL$ = ILL$ -> CCOSU.ILL$;

  11018 30 000440   000000 470400 2                  LDP0    ILL$
        30 000441   000003 236100                    LDQ     3,,PR0
        30 000442   000000 756000 2                  STQ     ILL$

      218    11019    4              END;

  11019 30 000443   000000 470400 2                  LDP0    ILL$
        30 000444   000000 220100                    LDX0    0,,PR0
        30 000445   000342 100003                    CMPX0   226,DU
        30 000446   000073 600000 30                 TZE     s:10954

      219    11020
      220    11021    3              CALL Z8HI$BURST(ILL$, PEPD(ILL$ -> ILL.ID));
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:31   

  11021 30 000447   000000 470400 2                  LDP0    ILL$
        30 000450   000000 220100                    LDX0    0,,PR0
        30 000451   000000 631410 29                 EPPR1   PEPD,X0
        30 000452   000041 451400 0                  STP1    P$+2
        30 000453   000005 236000 31                 LDQ     5
        30 000454   000040 756000 0                  STQ     P$+1
        30 000455   000040 630400 0                  EPPR0   P$+1
        30 000456   000002 631400 31                 EPPR1   2
        30 000457   000000 701000 xent               TSX1    Z8HI$BURST
        30 000460   000000 011000                    NOP     0

      221    11022    3            END;

      222    11023
      223    11024    2          ILS$ = ILS$ -> ILS.NEXT;

  11024 30 000461   000000 470400 16                 LDP0    ILS$
        30 000462   000002 236100                    LDQ     2,,PR0
        30 000463   000000 756000 16                 STQ     ILS$

      224    11025    2        END;

  11025 30 000464   000001 116000 31                 CMPQ    1
        30 000465   000062 601000 30                 TNZ     s:10949

      225    11026
      226    11027    2        DO WHILE (ROOT_PROC_BLOCK$ ~= ADDR(NIL));

  11027 30 000466   000476 710000 30                 TRA     s:11032

      227    11028
      228    11029    2          COMCOM.SEGMENT$(ROOT_PROC_BLOCK$ -> SEGMENT.COUNT) = ROOT_PROC_BLOCK$;

  11029 30 000467   000000 470400 13                 LDP0    ROOT_PROC_BLOCK$
        30 000470   000000 720100                    LXL0    0,,PR0
        30 000471   000777 360003                    ANX0    511,DU
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:32   
        30 000472   000000 236000 13                 LDQ     ROOT_PROC_BLOCK$
        30 000473   000150 756010 xsym               STQ     COMCOM+104,X0

      229    11030    2          ROOT_PROC_BLOCK$ = ROOT_PROC_BLOCK$ -> SEGMENT.NEXT;

  11030 30 000474   000010 236100                    LDQ     8,,PR0
        30 000475   000000 756000 13                 STQ     ROOT_PROC_BLOCK$

      230    11031
      231    11032    2        END;

  11032 30 000476   000000 236000 13                 LDQ     ROOT_PROC_BLOCK$
        30 000477   000001 116000 31                 CMPQ    1
        30 000500   000467 601000 30                 TNZ     s:11029

      232    11033
      233    11034
      234    11035         /*  Temporarily assign the COMCOM.SEGMENTC to 1, will be removed
      235    11036             after the segmentation is implemented on CP6. */
      236    11037           %IF CP6;
      237    11038
      238    11039    1        COMCOM.SEGMENTC = 1;

  11039 30 000501   000001 235007                    LDA     1,DL
        30 000502   000314 755000 xsym               STA     COMCOM+204

      239    11040
      240    11041           %ENDIF;
      241    11042
      242    11043    1   END Z8HR$CODE_GENERATOR;

  11043 30 000503   000000 221200 0                  LDX1  ! 0
        30 000504   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:33   
--  Include file information  --

   Z8H_EXT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_SUPPORT.:Z8A6TOU  is referenced.
   Z8A_ILS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_CODE.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_DEP.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ILL.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HR$CODE_GENERATOR.
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:34   

 **** Variables and constants ****

  ****  Section 000  Data  Z8HR$CODE_GENERATOR

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/b BIT               1 AORQ                      34-0-0/b BIT               1 DEFER
     7-0-0/w STRC(180)         1 DEFER_BUFFER(0:3)
    33-0-0/w SBIN              1 DEFER_BUFFER_IDX           5-0-0/b STRC              1 INST_WORD
     3-0-0/w UBIN              1 LAST_FREED                 2-0-0/w UBIN              1 LAST_USED
     6-0-0/b STRC              1 MOD_KEY                   35-0-0/w PTR               1 OLD_CURRENT_BLOCK$
    37-0-0/w PTR         r     1 P$                         1-0-0/w UBIN              1 REGID
    36-0-0/w SBIN              1 SEG_NO#

  ****  Section 001 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 002 LblCom ILL$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ILL$

  ****  Section 003 LblCom ILL_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ILL_

  ****  Section 004 LblCom ETT$
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:35   

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ETT$

  ****  Section 005 LblCom HEAD_ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_ETT$

  ****  Section 006 LblCom ETT_BUCKETS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 ETT_BUCKETS(0:511)

  ****  Section 007 LblCom ETT_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 ETT_

  ****  Section 008 LblCom ST$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ST$

  ****  Section 009 LblCom ST_

  ****  Scalars and arrays  ****
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:36   
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ST_

  ****  Section 010 LblCom DEP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b STRC(1728)  r     1 DEP

  ****  Section 011 LblCom RAT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)         1 RAT(0:27)

  ****  Section 012 LblCom CURRENT_BLOCK$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 CURRENT_BLOCK$

  ****  Section 013 LblCom ROOT_PROC_BLOCK$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ROOT_PROC_BLOCK$

  ****  Section 014 LblCom LTS$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:37   
     0-0-0/w PTR               1 LONG_ITEM$                 0-0-0/w PTR         r     1 LTS$

  ****  Section 015 LblCom LTS_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 LTS_

  ****  Section 016 LblCom ILS$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ILS$

  ****  Section 017 LblCom ILS_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ILS_

  ****  Section 018 LblCom NUMBER_OF_PRIMES

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 NUMBER_OF_PRIMES

  ****  Section 019 LblCom NUMBER_OF_TEMPS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 NUMBER_OF_TEMPS

PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:38   
  ****  Section 020 LblCom NUMBER_OF_REFS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 NUMBER_OF_REFS

  ****  Section 021 LblCom GENERATING_PTRS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT               1 GENERATING_PTRS

  ****  Section 022 LblCom USE_PROC_RETURN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 USE_PROC_RETURN

  ****  Section 023 LblCom CURRENT_SCOPE$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 CURRENT_SCOPE$

  ****  Section 024 LblCom HEAD_REF$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_REF$

  ****  Section 025 LblCom HEAD_TEMP$

PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:39   
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_TEMP$

  ****  Section 026 LblCom CONST$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 CONST$

  ****  Section 027 LblCom HEAD_PRIMES$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_PRIMES$

  ****  Section 028 LblCom CUR_LOOP_LEVEL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 CUR_LOOP_LEVEL

  ****  Section 029 LblCom PEPD

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 PEPD(0:1)

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:40   

     0-0-0/d STRC(13248) r     1 COMCOM                     0-0-0/w UBIN              1 ILL_STEP(0:144)
     0-0-0/w UBIN              1 ILS_STEP_TABLE(0:2)
     0-0-0/w UBIN              1 LTS_STEP(0:37)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(108)         1 ACCEPT_DISPLAY             0-0-0/w STRC(396)         1 ALPHABET
     0-0-0/w STRC(144)         1 ALTER_LTS                  0-0-0/w STRC(3672)        1 ALT_KEY
     0-0-0/w STRC(36864)       1 ARGLIST                    0-0-0/w STRC(396)         1 ARRAY
     0-0-0/w STRC(180)         1 ARRAY_PRESET_LTS           0-0-0/w STRC(288)         1 BASE_LTS
     0-0-0/w STRC(108)         1 BINARY_ILL                 0-0-0/w STRC(396)         1 BLOCK
     0-0-0/w STRC(144)         1 BRANCH_ILL                 0-0-0/w STRC(144)         1 BT
     0-0-0/w STRC(216)   r     1 CCOSU                      0-0-0/w STRC(396)         1 CD
     0-0-0/w STRC(288)         1 CD_LTS                     0-0-0/w CHAR(4096)        1 CHARS
     0-0-0/w STRC(396)         1 CLASS                      0-0-0/w STRC(108)         1 CODED_MOVE
     0-0-0/w STRC(396)         1 CONDITION                  0-0-0/w STRC(396)         1 CONST
     0-0-0/w STRC(72)    r     1 CONT                       0-0-0/w STRC(540)         1 CONTROL_NAME_LTS
     0-0-0/w STRC(1872)        1 COPY_FILE                  0-0-0/w STRC(396)         1 DB
     0-0-0/w STRC(396)         1 DCB_                       0-0-0/w STRC(144)         1 DEFLB
     0-0-0/w STRC(108)         1 DEPENDING_SIZE             0-0-0/w STRC(5472)        1 DIMS
     0-0-0/w STRC(396)         1 DML_ITEM                   0-0-0/w STRC(216)         1 DML_REC
     0-0-0/w STRC(144)         1 DOEND                      0-0-0/w STRC(396)         1 DO_N
     0-0-0/w STRC(180)         1 DV4I                       0-0-0/w STRC(180)         1 ENTRY_ILL
     0-0-0/w STRC(180)   r     1 ETT                        0-0-0/w STRC(108)         1 EVALU
     0-0-0/w STRC(73836)       1 EVALUATE                   0-0-0/w STRC(396)         1 FD
     0-0-0/w STRC(1692)        1 FILE_LTS                   0-0-0/w STRC(144)         1 GO
     0-0-0/w STRC(180)   r     1 ILL                        0-0-0/w STRC              1 ILL_NO_OPS
     0-0-0/w STRC(180)   r     1 ILS                        0-0-0/w STRC(108)         1 INDEXES
     0-0-0/w STRC(360)         1 INIT_LTS                   0-0-0/w STRC(396)         1 INTDEF
     0-0-0/w STRC(180)         1 IO_RESTORE_CHAIN           0-0-0/w STRC(144)         1 KEY
     0-0-0/w STRC(396)         1 LABEL                      0-0-0/w STRC(36864)       1 LCNST
     0-0-0/w STRC(108)         1 LINOI                      0-0-0/w STRC(72)          1 LONG
     0-0-0/w STRC              1 LTS                        0-0-0/w STRC(360)         1 LTSS
PL6.E3A0      #001=Z8HR$CODE_GENERATOR File=Z8HR.:Z8A6TSI                        SAT 08/09/97 13:22 Page:41   
     0-0-0/w STRC(36936)       1 LTS_PTR_ARRAY              0-0-0/w STRC(72)          1 MFILL
     0-0-0/w STRC(396)         1 MNEMONIC                   0-0-0/w STRC(180)         1 MULTI_GO
     0-0-0/w STRC(180)         1 MVEAL                      0-0-0/w STRC(108)         1 MVFIL
     0-0-0/w STRC(72)          1 MVIIS                      0-0-0/w STRC(144)         1 NEL
     0-0-0/w STRC(216)         1 OPEN_LTS                   0-0-0/w STRC(144)         1 OPN
     0-0-0/w STRC(180)         1 OS_CALL                    0-0-0/w STRC(36864)       1 PAGE
     0-0-0/w STRC(396)         1 PARA                       0-0-0/w STRC(216)         1 PFORM
     0-0-0/w STRC(144)         1 PINC                       0-0-0/w STRC(144)         1 PREOFF
     0-0-0/w STRC(108)         1 PRESET                     0-0-0/w STRC(144)         1 PRIME
     0-0-0/w STRC(396)         1 PROC_                      0-0-0/w STRC(396)         1 PROC_DEF
     0-0-0/w STRC(900)         1 PROC_SUPP                  0-0-0/w STRC(144)         1 P_A_PRESET
     0-0-0/w STRC(144)         1 P_P_PRESET                 0-0-0/w STRC(396)         1 RD
     0-0-0/w STRC(216)   r     1 REF                        0-0-0/w STRC(144)         1 REMEM
     0-0-0/w STRC(108)         1 RENAMES                    0-0-0/w STRC(720)         1 REPORT_01_LTS
     0-0-0/w STRC(432)         1 REPORT_ELEM_LTS            0-0-0/w STRC(252)         1 REPORT_GRP_LTS
     0-0-0/w STRC(1332)        1 REPORT_LTS                 0-0-0/w STRC(144)         1 RVA_LTS
     0-0-0/w STRC(396)         1 SCALAR                     0-0-0/w STRC(144)         1 SCOPE
     0-0-0/w STRC(396)         1 SD                         0-0-0/w STRC(216)         1 SEARCH_
     0-0-0/w STRC(396)         1 SECTION                    0-0-0/w STRC(396)   r     1 SEGMENT
     0-0-0/w STRC(360)         1 SEGMENT_LTS                0-0-0/w STRC(396)   r     1 ST
     0-0-0/w STRC(72)          1 STP2                       0-0-0/w STRC(252)         1 SUM_LTS
     0-0-0/w STRC(396)         1 SWITCH                     0-0-0/w STRC(396)         1 SYMBOLIC_CHAR
     0-0-0/w STRC(396)         1 SYMDEF_                    0-0-0/w STRC(396)         1 SYMREF_
     0-0-0/w STRC(396)   r     1 TEMP                       0-0-0/w STRC(144)         1 TRINARY_ILL
     0-0-0/w STRC(72)          1 UNARY_ILL                  0-0-0/d STRC(612)         1 USE
     0-0-0/w STRC(216)         1 USER_CALL                  0-0-0/w STRC(252)         1 USE_SUPP
     0-0-0/w STRC(108)         1 VAL                        0-0-0/w STRC(108)         1 VAL_END
     0-0-0/w STRC(396)         1 VARIABLE                   0-0-0/w STRC(72)          1 WHEN


   Procedure Z8HR$CODE_GENERATOR requires 325 words for executable code.
   Procedure Z8HR$CODE_GENERATOR is declared NOAUTO and requires 34 words of local(STATIC) storage.

    No errors detected in file Z8HR.:Z8A6TSI    .
