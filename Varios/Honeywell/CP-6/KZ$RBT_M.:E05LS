

15:01 JUL 28 '97 KZ$RBT_M.:E05SI                                           1    
    1      /*M*   Macro Definitions For RBT                                   */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X*           */
    8      /*P*  NAME:  KZ$RBT_M
    9            PURPOSE:  Contains data structure and EQU Macros for
   10                   RBT processes, both HASP and 3780/2780.
   11                                                                         */
   12
   13
   14      /*D*      NAME:     GS$SDEVCTX
   15                PURPOSE:  GS$SDEVCTX defines the structure of an RBT
   16                          device context block.
   17                                                                         */
   18
   19
   20      %MACRO KZ$SDVCTX (NAME=KZ$SDVCTX,LAST=";",STCLASS=BASED);
   21
   22      %LSET LISTDIR='0'B;
   23      %LSET LISTEXP='1'B;
   24      %LSET LISTCOM='0'B;
   25      %LSET LISTSUB='1'B;
   26      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   27      %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
   28      %LSET INIT=CHARTEXT('INIT');
   29      %LSET EINIT=CHARTEXT('');
   30      %ELSE;
   31      %LSET INIT=CHARTEXT('/*');
   32      %LSET EINIT=CHARTEXT('*/');
   33      %ENDIF;
   34
   35      DCL 1 NAME STCLASS ALIGNED,
   36            2 LNK$ PTR %INIT(ADDR(NIL))%EINIT,
   37      /*K*
15:01 JUL 28 '97 KZ$RBT_M.:E05SI                                           2    
   38                LNK$ is a pointer to the next device context
   39                block in the chain of context blocks for a given line
   40      */
   41            %B$TERMINAL_ID (FPTN=LCLENDPNTID,LVL=2,LAST=",");
   42      /*K*
   43                MGR_PATH contains the L6 kernel path id
   44                for the device manager path.
   45      */
   46            2 STATE  UBIN BYTE CALIGNED %INIT(0)%EINIT,
   47      /*K*
   48                State indicates the state of the device
   49                with respect to activity expected for its manager.
   50                Permitted values are
   51      */
   52            2 * UBIN BYTE %INIT(0)%EINIT CALIGNED,
   53            2 VDI$ PTR %INIT(ADDR(NIL))%EINIT CALIGNED,
   54      /*K*
   55                  VDI$ is a pointer to the KV$VDI context block for this
   56                  device established by KVV$INT.
   57                                                                         */
   58            2 LIN$  PTR %INIT(ADDR(NIL))%EINIT CALIGNED,
   59      /*K*
   60                LIN$ is a pointer to the line context block
   61                for the line to which this device is attached.
   62      */
   63            2  OTPHD$ PTR CALIGNED %INIT(ADDR(NIL))%EINIT,
   64      /*K*
   65               OTPHD$ is a pointer to the head of the output queue for
   66               this device.  It is always null for an input-only
   67               device.
   68      */
   69            2  OTPTL$ PTR CALIGNED %INIT(ADDR(NIL))%EINIT,
   70      /*K*
   71               OTPTL$ is a pointer to the last entry on the output queue
   72               for this device.
   73      */
   74            2 DFRHD$ PTR CALIGNED %INIT(ADDR(NIL))%EINIT,
15:01 JUL 28 '97 KZ$RBT_M.:E05SI                                           3    
   75      /*K*
   76              DFRHD$ is a pointer to the head of a queue of input and output
   77              blocks to be released later.
   78      */
   79            2 DFRTL$ PTR CALIGNED %INIT(ADDR(NIL))%EINIT,
   80      /*K*
   81              DFRTL$ is a pointer to the tail of the defer queue.
   82      */
   83            2 OTPBYTES UBIN(%(18-BITBIN(MODE_FEP)*2)) %INIT(0)%EINIT CALIGNED,
   84      /*K*
   85               OTPBYTES contains the number of data bytes in the output
   86               queue for this device.
   87      */
   88            2 BRKHD$ PTR CALIGNED %INIT(ADDR(NIL))%EINIT,
   89      /*K*
   90              BRKHD$ points to the beginning of a chain of record fragments
   91              for 2780s/3780s that break records between blocks.  The first
   92              item on the list, pointed to by BRKHD$, will have been the
   93              last record (fragment) in some previous block.  There will
   94              most likely be only one record fragment on the chain; however,
   95              it's possible that a very long record has been broken up into
   96              several blocks by the remote end.  CP-6 never sends such
   97              broken records...it only accepts them.
   98      */
   99            2 BRKTL$ PTR CALIGNED %INIT(ADDR(NIL))%EINIT,
  100      /*K*
  101              BRKTL$ points to the end of a chain of record fragments for
  102              2780s/3780s that break records between blocks.
  103      */
  104            2 BRKBYTES UBIN(%(18-BITBIN(MODE_FEP)*2)) %INIT(0)%EINIT CALIGNED,
  105      /*K*
  106              BRKBYTES is the count of the number of bytes contained in the
  107              BRK (broken record) queue.
  108      */
  109            2 BLKRECS UBIN(%(18-BITBIN(MODE_FEP)*2)) %INIT(0)%EINIT CALIGNED,
  110      /*K*
  111               BLKRECS contains the number of records that can be output in
15:01 JUL 28 '97 KZ$RBT_M.:E05SI                                           4    
  112               the current block.  It is counted down as records are placed
  113               in the block.
  114      */
  115            2 FLAGS  UNAL,
  116      /*K*
  117               Flags is a set of control flags indicating the
  118               state of certain conditions pertaining to control of
  119               the stream.
  120      */
  121            %IF NOT (MODE_FEP);
  122              3 * BIT(1) UNAL %INIT('0'B)%EINIT,
  123            %ENDIF;
  124              3 SUSPEND_IN BIT(1) UNAL %INIT('0'B)%EINIT,
  125      /*K*
  126               SUSPEND_IN is set to indicate that the line
  127               protocol to stop further incoming traffic for this
  128               device should be effected.  (Example: Hasp susbit
  129               should be reset.)
  130      */
  131              3 SUSPEND_OUT BIT(1) UNAL %INIT('0'B)%EINIT,
  132      /*K*
  133                SUSPEND_OUT is set to indicate that the line
  134               protocol to temporarily stop outgoing traffic for
  135               this device has been effected.
  136      */
  137              3 PTS_IN BIT(1) UNAL %INIT('0'B)%EINIT,
  138      /*K*
  139               PTS_IN is set to indicate that the line protocol
  140               to establish an incoming stream for this device
  141               has been effected.
  142      */
  143              3 PTS_OUT BIT(1) UNAL %INIT('0'B)%EINIT,
  144      /*K*
  145               PTS_OUT is set to indicate that the line protocol to
  146               establish an outgoing stream for this device
  147               has been effected.
  148      */
15:01 JUL 28 '97 KZ$RBT_M.:E05SI                                           5    
  149              3 FLUSHING BIT(1) UNAL %INIT('0'B)%EINIT,
  150      /*K*
  151               Flushing is set to indicate that records from
  152               the host are to be discarded.
  153      */
  154              3 DONE BIT(1) UNAL %INIT('0'B)%EINIT,
  155      /*K*
  156               DONE is set if VDH has given us an Exit Event and there is
  157               not an output operation in progress.  DONE will be noticed
  158               next time an output block is released.
  159      */
  160              3 BINARY_OK BIT(1) UNAL %INIT('0'B)%EINIT,
  161      /*K*
  162               BINARY_OK is set to indicate that binary
  163               records are permissable on this stream.  It applies
  164               only to card streams.
  165      */
  166              3 BRKRQD BIT(1) UNAL %INIT('0'B)%EINIT,
  167      /*K*
  168             BRKRQD is set to indicate that an Attention event should be
  169             reported to VDH when a Close is received for this device.
  170      */
  171            %IF NOT (MODE_FEP);
  172              3 * BIT(1) UNAL,
  173            %ENDIF;
  174              3 EVFU_LOADED BIT(1) %INIT('0'B)%EINIT UNAL,
  175      /*K*
  176                When on, KV_PRMID_VFUs are ignored.  Turned on after initial
  177                VFU load & off when a KV_PRMID_PAGLNG is received.
  178      */
  179              3 FIRST BIT(1) %INIT('0'B)%EINIT UNAL,
  180      /*K*
  181                Indicates this is the first block of input for this device.
  182      */
  183              3 OTPBSY BIT(1) UNAL %INIT('0'B)%EINIT,
  184      /*K*
  185               OTPBSY is set to indicate output being done on this device.
15:01 JUL 28 '97 KZ$RBT_M.:E05SI                                           6    
  186      */
  187              3 THROTL BIT(1) %INIT('0'B) %EINIT UNAL,
  188      /*K*
  189               Set when accumulated output bytes have exceeded the output
  190               throttling threshold and VDH has been requested to stop
  191               sending output data.
  192                                                                         */
  193            2 DSC UNAL,
  194              3 INT BIT(1) %INIT('0'B)%EINIT UNAL,
  195      /*K*
  196               Received disconnect event from CLM and attempted to enter VDH
  197               to report disconnect                                      */
  198
  199              3 TOLD_VDH BIT(1) %INIT('0'B)%EINIT UNAL,
  200      /*K*
  201               Called VDH with VDH_DSC.                                  */
  202
  203              3 VDH_FINAL BIT(1) %INIT('0'B)%EINIT UNAL,
  204      /*K*
  205               Received RLSVDI event from VDH                           */
  206
  207              3 DEV_FINAL BIT(1) %INIT('0'B)%EINIT UNAL,
  208      /*K*
  209               Received RLSVDI event from VDH and there is no more output
  210               for the device.                                          */
  211            2 DFR,
  212            %IF NOT (MODE_FEP);
  213              3 * BIT(1) UNAL,
  214            %ENDIF;
  215
  216              3 DSCI BIT(1) %INIT('0'B) %EINIT UNAL,
  217              3 EOFREC BIT(1) %INIT('0'B)%EINIT UNAL,
  218              3 * BIT(6) %INIT('0'B)%EINIT UNAL,
  219            2 * UBIN BYTE UNAL %INIT(0)%EINIT,
  220            2 LASTSCBX UBIN(%(18-BITBIN(MODE_FEP)*2)) %INIT(0)%EINIT CALIGNED,
  221      /*K*
  222                LASTSCBX is the index to the SCB of the string currently
15:01 JUL 28 '97 KZ$RBT_M.:E05SI                                           7    
  223                being built by VDH for HASP type device.
  224      */
  225            2 LASTRCBX UBIN(%(18-BITBIN(MODE_FEP)*2)) %INIT(0)%EINIT CALIGNED,
  226      /*K*
  227                LASTRCBX is the index to the RCB of the string currently
  228                being built by VDH for HASP type device.
  229      */
  230            2 MGR_TYPE UBIN BYTE CALIGNED %INIT(0)%EINIT,
  231            %IF MODE_FEP;
  232            2 MGR_TYPE_B REDEF MGR_TYPE BIT(8),
  233            %ENDIF;
  234      /*K*
  235               MGR_TYPE indicates the type of device manager
  236               supporting this device.  Values are %KZ_S_DM...
  237      */
  238            2 ACCESS_METHOD UBIN BYTE CALIGNED %INIT(2)%EINIT,
  239      /*K*
  240               ACCESS_METHOD indicates the access method in effect
  241               for this device.  Its values are %KZ_S_ACS...
  242      */
  243            2 SUSBIT_MASK BIT(%(18-BITBIN(MODE_FEP)*2))  %INIT('0'B)%EINIT,
  244      /*K*
  245               SUSBIT_MASK is a single bit mask selecting the
  246               susbit position for a hasp device.
  247      */
  248            2 RCB_CODE BIT(%(9-BITBIN(MODE_FEP))) UNAL %INIT('0'B)%EINIT,
  249      /*K*
  250               RCB_CODE is the RCB code for a hasp device.
  251      */
  252            2 * UBIN BYTE %INIT(0)%EINIT UNAL,
  253
  254
  255            2 RECORD_BYTES UBIN(%(18-BITBIN(MODE_FEP)*2)) %INIT(80)%EINIT CALIGNED,
  256      /*K*
  257               RECORD_BYTES is the maximum number of bytes
  258               permitted per record for the device.  It is also
  259               the size to which records are padded, if required.
15:01 JUL 28 '97 KZ$RBT_M.:E05SI                                           8    
  260      */
  261            2 HOST_RECORDS_IN UBIN(%(36-BITBIN(MODE_FEP)*4)) %INIT(0)%EINIT CALIGNED,
  262      /*K*
  263               HOST_RECORDS_IN is the number of records
  264               input to the host for this stream.
  265      */
  266            2 HOST_RECORDS_OUT UBIN(%(36-BITBIN(MODE_FEP)*4)) %INIT(0)%EINIT CALIGNED,
  267      /*K*
  268               HOST_RECORDS_OUT is the number of records
  269               output from the host for this stream.
  270      */
  271            2 LINE_RECORDS_IN UBIN(%(36-BITBIN(MODE_FEP)*4)) %INIT(0)%EINIT CALIGNED,
  272      /*K*
  273               LINE_RECORDS_IN is a count of the number of records
  274               input from the line for this stream.
  275      */
  276            2 LINE_RECORDS_OUT UBIN(%(36-BITBIN(MODE_FEP)*4)) %INIT(0)%EINIT CALIGNED,
  277      /*K*
  278               LINE_RECORDS_OUT is a count of the number of records
  279               output to the line for this stream..
  280      */
  281            2 HOST_BYTES_IN UBIN(%(36-BITBIN(MODE_FEP)*4)) %INIT(0)%EINIT CALIGNED,
  282      /*K*
  283               HOST_BYTES_IN is the number of bytes
  284               input to the host for this stream.
  285      */
  286            2 HOST_BYTES_OUT UBIN(%(36-BITBIN(MODE_FEP)*4)) %INIT(0)%EINIT CALIGNED,
  287      /*K*
  288               HOST_BYTES_OUT is the number of bytes
  289               output from the host for this stream.
  290      */
  291            2 LINE_BYTES_IN UBIN(%(36-BITBIN(MODE_FEP)*4)) %INIT(0)%EINIT CALIGNED,
  292      /*K*
  293               LINE_BYTES_IN is a counter of the number of bytes
  294               input from the line for this stream.
  295      */
  296            2 LINE_BYTES_OUT UBIN(%(36-BITBIN(MODE_FEP)*4)) %INIT(0)%EINIT CALIGNED,
15:01 JUL 28 '97 KZ$RBT_M.:E05SI                                           9    
  297      /*K*
  298               LINE_BYTES_OUT is a counter of the number of bytes
  299               output to the line for this stream.
  300      */
  301            2 MESSAGES_TO_HOST UBIN(%(36-BITBIN(MODE_FEP)*4)) %INIT(0)%EINIT CALIGNED,
  302      /*K*
  303               MESSAGES_TO_HOST is a counter of the number of messages
  304               sent to the host for this stream.
  305      */
  306            2 MESSAGES_FROM_HOST UBIN(%(36-BITBIN(MODE_FEP)*4)) %INIT(0)%EINIT CALIGNED LAST
  307      /*K*
  308               MESSAGES_FROM_HOST is a counter of the number of messages
  309               received from the host for this stream.
  310      */
  311      %MEND;
  312      /*D*       NAME:     KZ$HASPBLK
  313                PURPOSE:  KZ$HASPBLK defines the structure of a HASP
  314                          block.                                         */
  315
  316
  317      %MACRO KZ$HASPBLK (NAME=KZ$HASPBLK,LAST=";",STCLASS=BASED);
  318      %LSET LISTDIR='0'B;
  319      %LSET LISTEXP='1'B;
  320      %LSET LISTCOM='0'B;
  321      %LSET LISTSUB='1'B;
  322      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  323      %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
  324      %LSET INIT=CHARTEXT('INIT');
  325      %LSET EINIT=CHARTEXT('');
  326      %ELSE;
  327      %LSET INIT=CHARTEXT('/*');
  328      %LSET EINIT=CHARTEXT('*/');
  329      %ENDIF;
  330
  331      DCL 1 NAME STCLASS ALIGNED,
  332
  333            2 BCB CALIGNED,
15:01 JUL 28 '97 KZ$RBT_M.:E05SI                                           10   
  334              3 * BIT(1) UNAL,                /* Always on                          */
  335              3 CTL UBIN(3) UNAL,             /* 0 = Normal block, 1 = bypass BCB
  336                                                     checks, 2 = set BCB            */
  337              3 CNT UBIN(4) UNAL,             /* Modulo 16 block sequence count     */
  338            2 FCS CALIGNED,
  339              3 * BIT(1) UNAL,                /* Always on                          */
  340              3 WAB BIT(1) UNAL,              /* Suspend all stream transmission    */
  341              3 * BIT(2) UNAL,                /* RFU                                */
  342              3 SUS1 BIT(4) UNAL,             /* Input suspend bits                 */
  343              3 * BIT(1) UNAL,                /* Always on                          */
  344              3 RMTOC BIT(1) UNAL,            /* Remote console suspend bit         */
  345              3 * BIT(2) UNAL,                /* RFU                                */
  346              3 SUS2 BIT(4) UNAL,             /* Input suspend bits                 */
  347            2 FLG CALIGNED,
  348              3 RCB BIT(8) UNAL,              /* Record control byte                */
  349              3 SRCB BIT(8) UNAL,             /* Subrecord control byte             */
  350            2 TXT(0:0) UBIN BYTE CALIGNED;
  351      %MEND;
  352
  353      /*D*  NAME: KZ$HASPRCB                                             */
  354
  355
  356      %MACRO KZ$HASPRCB (NAME=KZ$HASPRCB,LAST=";",STCLASS=BASED);
  357      %LSET LISTDIR='0'B;
  358      %LSET LISTEXP='1'B;
  359      %LSET LISTCOM='0'B;
  360      %LSET LISTSUB='1'B;
  361      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  362      %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
  363      %LSET INIT=CHARTEXT('INIT');
  364      %LSET EINIT=CHARTEXT('');
  365      %ELSE;
  366      %LSET INIT=CHARTEXT('/*');
  367      %LSET EINIT=CHARTEXT('*/');
  368      %ENDIF;
  369
  370      DCL 1 NAME(0:511) STCLASS CALIGNED,
15:01 JUL 28 '97 KZ$RBT_M.:E05SI                                           11   
  371            2 NOT_END BIT(1) UNAL,
  372            2 CNTRL UBIN(3) UNAL,
  373            2 NOT_CNTRL BIT(4) UNAL;
  374      %MEND;
  375
  376
  377
  378      %MACRO KZ$HASPSCB (NAME=KZ$HASPSCB,STCLASS=BASED);
  379      %LSET LISTDIR='0'B;
  380      %LSET LISTEXP='1'B;
  381      %LSET LISTCOM='0'B;
  382      %LSET LISTSUB='1'B;
  383      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  384      %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
  385      %LSET INIT=CHARTEXT('INIT');
  386      %LSET EINIT=CHARTEXT('');
  387      %ELSE;
  388      %LSET INIT=CHARTEXT('/*');
  389      %LSET EINIT=CHARTEXT('*/');
  390      %ENDIF;
  391
  392      DCL 1 NAME(0:511) STCLASS CALIGNED,
  393            2 NOT_END BIT(1) UNAL,
  394            2 I,
  395              3 NOT_IDENT BIT(1) UNAL,
  396              3 NOT_BLANK BIT(1) UNAL,
  397              3 IDENT_CT UBIN(5) UNAL,
  398            2 NI REDEF I,
  399              3 NOT_IDENT BIT(1) UNAL,
  400              3 NIDENT_CT UBIN(6) UNAL;
  401      %MEND;
  402
  403      %MACRO KZ$HASPSRCB (NAME=KZ$HASPSRCB,STCLASS=BASED);
  404      %LSET LISTDIR='0'B;
  405      %LSET LISTEXP='1'B;
  406      %LSET LISTCOM='0'B;
  407      %LSET LISTSUB='1'B;
15:01 JUL 28 '97 KZ$RBT_M.:E05SI                                           12   
  408      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  409      %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
  410      %LSET INIT=CHARTEXT('INIT');
  411      %LSET EINIT=CHARTEXT('');
  412      %ELSE;
  413      %LSET INIT=CHARTEXT('/*');
  414      %LSET EINIT=CHARTEXT('*/');
  415      %ENDIF;
  416
  417      DCL 1 NAME STCLASS CALIGNED,
  418            2 * BIT(1) UNAL,
  419            2 VFC_TYPE UBIN(3) UNAL,
  420            2 V REDEF VFC_TYPE,
  421              3 * BIT(2) UNAL,
  422              3 BIN BIT(1) UNAL,
  423            2 SKIP_TO UBIN(4) UNAL,
  424            2 S REDEF SKIP_TO,
  425              3 * BIT(2) UNAL,
  426              3 UPSP_CT UBIN(2) UNAL;
  427      %MEND;
  428
  429      %MACRO KZ$RBTVFC_E;
  430
  431      %EQU KZ#HASPVFC_SPA = 0;
  432      %EQU KZ#HASPVFC_SKA = 1;
  433      %EQU KZ#HASPVFC_SPB = 2;
  434      %EQU KZ#HASPVFC_SKB = 3;
  435
  436      %EQU KZ#RBTVFC_SK1 = 'C1'X;             /* 3780 Skip to track 1               */
  437      %EQU KZ#RBTVFC_SUP = 'D4'X;             /*      Space Surpress                */
  438      %EQU KZ#RBTVFC_SP1 = '61'X;             /*      Single Space                  */
  439      %EQU KZ#RBTVFC_SP2 = 'E2'X;             /*      Space 2                       */
  440      %EQU KZ#RBTVFC_SP3 = 'E3'X;             /*      Space 3                       */
  441      %MEND;
  442      /*D*  NAME: KZ$RBTERR
  443            PURPOSE:
  444               To provide a structure for the VALUE array portion of the
15:01 JUL 28 '97 KZ$RBT_M.:E05SI                                           13   
  445               M$WRSYSLOG FPT for use by RBT procedures.
  446                                                                        */
  447
  448      %MACRO KZ$RBTERR (NAME=KZ$RBTERR,STCLASS=BASED);
  449
  450      %LSET LISTDIR='0'B;
  451      %LSET LISTEXP='1'B;
  452      %LSET LISTCOM='0'B;
  453      %LSET LISTSUB='1'B;
  454      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  455      %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
  456      %LSET INIT=CHARTEXT('INIT');
  457      %LSET EINIT=CHARTEXT('');
  458      %ELSE;
  459      %LSET INIT=CHARTEXT('/*');
  460      %LSET EINIT=CHARTEXT('*/');
  461      %ENDIF;
  462
  463      DCL 1 NAME STCLASS ALIGNED,
  464            2 LCTX$ PTR,
  465            2 DVCTX$ REDEF LCTX$ PTR,
  466            2 SNDFCS BIT(16),
  467            2 VAL1 REDEF SNDFCS UBIN,
  468            2 RCB BIT(8) UNAL,
  469            2 SRCB BIT(8) UNAL;
  470      %MEND;
  471      /*D* NAME: KZ$SYNCSTAT
  472           PURPOSE: To define a structure for the statistics buffer used
  473                  by HASP and 3780/2780 protocol handlers.               */
  474
  475
  476
  477
  478      %MACRO KZ$SYNCSTAT (NAME=KZ$SYNCSTAT,LVL=1,LAST=";",STCLASS=BASED);
  479
  480
  481      %LSET LISTDIR='0'B;
15:01 JUL 28 '97 KZ$RBT_M.:E05SI                                           14   
  482      %LSET LISTEXP='1'B;
  483      %LSET LISTCOM='0'B;
  484      %LSET LISTSUB='1'B;
  485      %LSET LVL1 = LVL + 1;
  486      %IF MODE_FEP;
  487      %LSET WORDSIZE = 32;
  488      %ELSE;
  489      %LSET WORDSIZE = 36;
  490      %ENDIF;
  491      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  492      %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
  493      %LSET INIT=CHARTEXT('INIT');
  494      %LSET EINIT=CHARTEXT('');
  495      %ELSE;
  496      %LSET INIT=CHARTEXT('/*');
  497      %LSET EINIT=CHARTEXT('*/');
  498      %ENDIF;
  499
  500      %IF LVL=1;
  501      DCL 1 NAME STCLASS ALIGNED,
  502      %ELSE;
  503              %LVL NAME ALIGNED,
  504      %ENDIF;
  505
  506
  507                %KZ$BSCSTT (LVL=2,STCLASS=STCLASS,LAST=",");
  508
  509              %LVL1 ACTSTR UBIN(%WORDSIZE) %INIT(0)%EINIT,
  510
  511                  /*B* ACTIVE_STREAMS is the current number of active
  512                     synchronous streams.                                           */
  513
  514
  515                %LVL1 PTHTICS  UBIN(%WORDSIZE) %INIT(0)%EINIT LAST
  516
  517                  /*B* TOTAL_CPU_TICKS is the total number of CPU ticks
  518                     ascribed to synchronous path activity.
15:01 JUL 28 '97 KZ$RBT_M.:E05SI                                           15   
  519                     The time for any path is added to the total
  520                     only when the path terminates.                      */
  521
  522      %MEND;
  523
  524      /*P*  NAME: KZ$RBT_E
  525            PURPOSE:
  526                  To provide EQU values for Synchronous communications processes */
  527
  528      %MACRO KZ$RBT_E;
  529      %EQU KZ_S_SINIT# =  0;                  /* Device manager is initializing     */
  530      %EQU KZ_S_SLOGON# = 1;                  /* CP6 host logon has been requested  */
  531      %EQU KZ_S_SCONNECTED# = 2;              /*  Device is connected               */
  532      %EQU KZ_S_SAWAITING_PTS# = 3;       /* Output device is
  533                        awaiting permission to send from remote terminal
  534                        or input device is awaiting open from host       */
  535      %EQU KZ_S_SOPEN# = 4;                 /*  Permission to send / open
  536                        to host has been established                     */
  537      %EQU KZ_S_SAWAITING_CLOSE# = 5;       /* An input stream has
  538                         reported an end of file to the host, but has not
  539                         yet received a close request.                   */
  540      %EQU KZ_S_SDISCONNECT# = 6;            /* Disconnection has been
  541                        requested.                                       */
  542      %EQU KZ_S_SCLS_AWAITING_PTS# = 7;      /*  Output device is awaiting permission
  543                        awaiting permission to send from remote terminal,
  544                        and host has requested that it be closed.       */
  545      %EQU KZ_S_DMINPUT# = 1;                 /*  Input device manager              */
  546      %EQU KZ_S_DMOUTPUT# = 2;                /*  Output device manager             */
  547      %EQU KZ_S_DMCONSOLE# = 3;               /*  Console device manager            */
  548      %EQU KZ_S_ACSCARD# = 0;                 /*  For card-image data               */
  549      %EQU KZ_S_ACSPRINT# = 1;                /*  For print-image data              */
  550      %EQU KZ_S_REQUEST_TO_SEND# =  1;
  551      %EQU KZ_S_PERMISSION_TO_SEND# = 2;
  552      %EQU KZ_S_NO_PERMISSION_TO_SEND# = 3;
  553      %EQU KZ_S_TRANSMISSION_COMPLETE# = 4;
  554      %EQU KZ_S_READY_TO_RECEIVE = 5;
  555      %EQU KZ_S_BLOCK_SEQUENCE_ERROR# = 6;
15:01 JUL 28 '97 KZ$RBT_M.:E05SI                                           16   
  556      %EQU KZ_S_GENERAL_CONTROL# = 7;
  557      %MEND;
  558

