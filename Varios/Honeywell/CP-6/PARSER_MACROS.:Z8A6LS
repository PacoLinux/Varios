

09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6
    7      %INCLUDE PARSER_STATS;
    8
    9             /* Data necessary for the parse */
   10
   11      %PARSE_SYMREFS;
   12
   13
   14      DCL PSI    SBIN HALF;    /* PARSE STACK INDX */
   15      DCL NT     SBIN HALF;    /* Current non_terminal just reduced */
   16      DCL ACTION SBIN HALF;    /* Action to be performed - shift or reduce */
   17      DCL INDX   SBIN HALF;    /* temporary index into arrays */
   18
   19      %IF NOT LOCALLY_LEAST_COST_RECOVERY;
   20      DCL PANIC_MODE_IN_PROGRESS BIT(1) ALIGNED STATIC INIT('0'B);
   21      %ENDIF;
   22      %EJECT;

09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     2    
   23
   24
   25      %MACRO RECOVERY;
   26
   27      /* Any of three recovery algorithms may be used:
   28
   29               QUIT_RECOVERY
   30               PANIC_RECOVERY
   31               LOCALLY_LEAST_COST_CORRECTION
   32
   33      */
   34
   35
   36      DO;
   37
   38        ERR_RECOVERY_IN_PROGRESS = '1'B;
   39        PARSE_ERROR_COUNT = PARSE_ERROR_COUNT + 1;
   40
   41        %IF LOCALLY_LEAST_COST_RECOVERY;
   42          %RESTORE_IED_STATE;
   43          CALL LOCALLY_LEAST_COST_CORRECTION;
   44        %ELSEIF TERM_ERROR_SYM = 0;
   45          %QUIT_RECOVERY;
   46        %ELSE;
   47          %PANIC_RECOVERY;
   48        %ENDIF;
   49
   50        ERR_RECOVERY_IN_PROGRESS = '0'B;
   51
   52      END;
   53
   54      %MEND;
   55      %EJECT;

09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     3    
   56      %MACRO PARSE_STACK_OVERFLOW;
   57
   58             /* The parse stack has overflowed, so abort the compilation.
   59             */
   60
   61      DO;
   62      %RESET_ERROR_LOC(L="LA_STK.LINE(LA_GET)",C="LA_STK.COLUMN(LA_GET)");
   63        CALL ERROR (%E$PARSE_STACK_OVERFLOW_ERROR);
   64        %TERMINATE;
   65      END;
   66
   67      %MEND;
   68      %EJECT;

09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     4    
   69      %MACRO SEMANTIC_TOKEN_STACK_OVERFLOW;
   70
   71             /* The semantic token stack has overflowed, so abort
   72                the compilation.
   73             */
   74
   75      DO;
   76      %RESET_ERROR_LOC(L="LA_STK.LINE(LA_GET)",C="LA_STK.COLUMN(LA_GET)");
   77        CALL ERROR (%E$SEMANTIC_TOKEN_STACK_OVERFLW);
   78        %TERMINATE;
   79        RETURN;
   80      END;
   81
   82      %MEND;
   83      %EJECT;

09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     5    
   84      %MACRO  RED_STACK_OVERFLOW;
   85
   86             /* The reduction stack for semantic calls has overflowed,
   87                so abort the compilation.
   88             */
   89
   90      DO;
   91      %RESET_ERROR_LOC(L="LA_STK.LINE(LA_GET)",C="LA_STK.COLUMN(LA_GET)");
   92        CALL ERROR(%E$RED_STACK_OVERFLOW_ERROR);
   93        %TERMINATE;
   94      END;
   95
   96      %MEND;
   97      %EJECT;

09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     6    
   98      %MACRO SAVE_IED_STATE;
   99
  100             /* Our error correction scheme requires that we detect errors
  101                immediately;  that is, before we do any reductions.
  102                Unfortunately, it is a property of LALR parsers that
  103                some reductions may be performed upon  encountering an
  104                error symbol, before recognizing the error.  Therefore, we
  105                must save the state of the parser at any reduction and stack
  106                all semantic calls until the next shift has been performed,
  107                which means the next token has been accepted.
  108             */
  109
  110        DO;
  111          IF NOT IED_FLAG THEN
  112            DO;
  113              ALT_PARSE_STACK_IDX = PARSE_STACK_IDX;
  114              PARSE_STACK_IDX_IN_CHARS = PARSE_STACK_IDX * 4 + 4;
  115              ADDR(ALT_PARSE_STACK) -> PARSE_STACK_USED
  116                  = ADDR(PARSE_STACK) -> PARSE_STACK_USED;
  117              ALT_LX_TOP          = LX_TOP;
  118              IED_FLAG            = '1'B;
  119            END;
  120        END;
  121
  122      %MEND;
  123      %EJECT;

09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     7    
  124      %MACRO RESTORE_IED_STATE;
  125
  126      /* Restore the parse state to that before
  127         the last lookahead was done;  This represents
  128         the immediiate error detection state.
  129      */
  130
  131      DO;
  132        IF IED_FLAG THEN
  133          DO;
  134            PARSE_STACK_IDX  = ALT_PARSE_STACK_IDX;
  135            PARSE_STACK_IDX_IN_CHARS = ALT_PARSE_STACK_IDX * 4 + 4;
  136            ADDR(PARSE_STACK) -> PARSE_STACK_USED
  137                  = ADDR(ALT_PARSE_STACK) -> PARSE_STACK_USED;
  138            LX_TOP           = ALT_LX_TOP;
  139            STATE            = PARSE_STACK(PARSE_STACK_IDX);
  140            IED_FLAG         = '0'B;
  141            RED_STACK_TOP    = 0;
  142          END;
  143      END;
  144      %MEND;
  145      %EJECT;

09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     8    
  146      %MACRO PUSH_SEMANTIC_ACTION;
  147
  148             /* Do to the immediate error detection problem, we need to
  149                save all semantic actions until a shift is about to be done,
  150                signaling that no error has been encountered.
  151             */
  152
  153      DO;
  154        IF RED_STACK_TOP < %RED_STACK_MAX - 2 THEN
  155          DO;
  156            RED_STACK(RED_STACK_TOP)     = ACTION;
  157            RED_STACK(RED_STACK_TOP + 1) = LX_TOP;
  158            RED_STACK_TOP                = RED_STACK_TOP + 2;
  159          END;
  160        ELSE
  161          DO;
  162            %AT_LEAST_ONE_TOKEN;
  163            %RED_STACK_OVERFLOW;
  164          END;
  165      END;
  166
  167      %MEND;
  168      %EJECT;

09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     9    
  169      %MACRO CLEAR_SEMANTIC_ACTIONS;
  170
  171             /* We are about to do a shift and know that no error has
  172                occurred;  therefore, do all semantic actions which have
  173                been accumulated.
  174             */
  175
  176      DO;
  177        ALT_LX_TOP    = LX_TOP;
  178        RED_STACK_TOP = RED_STACK_TOP - 2;
  179        DO INDX = 0 TO RED_STACK_TOP  BY 2;
  180          LX_TOP    = RED_STACK(INDX + 1);
  181          REDUCTION = RED_STACK(INDX);
  182          IF PRODR.POPSTACK(REDUCTION) = 0 THEN
  183            DO;
  184              LX_TOP = LX_TOP + 1;
  185              %CREATE_EMPTY_TERMINAL_ON_LX_STK;
  186              IF PRODR.SEMANTIC(REDUCTION) > 0 THEN
  187                DO;
  188                  LX_TOP = LX_TOP - 1;
  189                  %CALL_SEMANTICS(A="BINBIT(PRODR.SEMANTIC(REDUCTION),36)");
  190                END;
  191            END;
  192          ELSE
  193            IF PRODR.SEMANTIC(REDUCTION) > 0 THEN
  194              DO;
  195                %CALL_SEMANTICS(A="BINBIT(PRODR.SEMANTIC(REDUCTION),36)");
  196              END;
  197        END;
  198        RED_STACK_TOP  = 0;
  199        LX_TOP         = ALT_LX_TOP;
  200        IED_FLAG       = '0'B;
  201      END;
  202
  203      %MEND;
  204      %EJECT;

09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     10   
  205      %MACRO AT_LEAST_ONE_TOKEN;
  206
  207             /* Make sure at least one token is available to
  208                 a shift operation.
  209             */
  210
  211        DO;
  212          %IF LOCALLY_LEAST_COST_RECOVERY;
  213            IF LA_CNT < 1 THEN  /* NEED TOKENS */
  214              IF CORRECTION.LEN = 0 AND CORRECTION.INDX = 0 THEN
  215                DO;
  216                  %CALL_SCANNER;
  217                  LA_PUT = LA_STK.LINK(LA_PUT);
  218                  LA_CNT = 1;
  219                END;
  220              ELSE
  221                IF CORRECTION.LEN > 0 THEN  /* NEED TO INSERT AN ERROR TOKEN */
  222                  DO;
  223                    %CREATE_DUMMY_TOKEN;
  224                    CORRECTION.LEN   = CORRECTION.LEN - 1;
  225                    CORRECTION.INDX  = CORRECTION.INDX + 1;
  226                    LA_GET           = LA_PUT;
  227                    LA_CNT           = 1;
  228                  END;
  229                ELSE
  230                  DO;  /* HAVE EXHAUSTED ALL ERROR CORRECTION */
  231                    CORRECTION.INDX  = 0;
  232                    LA_CNT           = ERR_LA_CNT;
  233                    LA_PUT           = ERR_LA_PUT;
  234                    LA_GET           = ERR_LA_GET;
  235                  END;
  236
  237          %ELSE;
  238
  239            IF LA_CNT < 1 THEN  /* NEED TOKENS */
  240              IF NOT PANIC_MODE_IN_PROGRESS THEN
  241                DO;
09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     11   
  242                  %CALL_SCANNER;
  243                  LA_PUT = LA_STK.LINK(LA_PUT);
  244                  LA_CNT = 1;
  245                END;
  246              ELSE
  247                DO;  /* GET VALID SYMBOL FOR PANIC SHIFT */
  248                  LA_CNT = ERR_LA_CNT;
  249                  LA_PUT = ERR_LA_PUT;
  250                  LA_GET = ERR_LA_GET;
  251                  DO WHILE ACTION_ROW.CHECK(ACTION_COL.BASE(STATE) + LA_STK.SYMBOL(LA_GET)) ~= STATE;
  252                    IF LA_STK.SYMBOL(LA_GET) = %TERM_EOF_SYM THEN
  253                      DO;
  254                        %RESET_ERROR_LOC(L="LA_STK.LINE(LA_GET)",C="LA_STK.COLUMN(LA_GET)");
  255                        CALL ERROR(%E$UNEXP_EOF_DURING_RECOVERY);
  256                        %TERMINATE;
  257                      END;
  258                    LA_CNT = LA_CNT - 1;
  259                    LA_GET = LA_STK.LINK(LA_GET);
  260                    IF LA_CNT < 1 THEN
  261                      DO;
  262                        %CALL_SCANNER;
  263                        LA_PUT = LA_STK.LINK(LA_PUT);
  264                        LA_CNT = 1;
  265                      END;
  266                  END;
  267                  PANIC_MODE_IN_PROGRESS = '0'B;
  268                  %RESET_ERROR_LOC(L="LA_STK.LINE(LA_GET)",C="LA_STK.COLUMN(LA_GET)");
  269                  CALL ERROR (%E$PARSING_RESUMED);
  270                END;
  271
  272            %ENDIF;
  273
  274        END;
  275
  276      %MEND;
  277      %EJECT;

09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     12   
  278      %MACRO QUIT_RECOVERY;
  279
  280      DO;
  281
  282        %RESET_ERROR_LOC(L="LA_STK.LINE(LA_GET)",C="LA_STK.COLUMN(LA_GET)");
  283        CALL ERROR(%E$PARSE_ERROR);
  284        %TERMINATE;
  285
  286      END;
  287
  288      %MEND;
  289      %EJECT;

09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     13   
  290      %MACRO PANIC_RECOVERY;
  291      DO;
  292
  293        %RESET_ERROR_LOC(L="LA_STK.LINE(LA_GET)",C="LA_STK.COLUMN(LA_GET)");
  294        CALL ERROR(%E$PARSE_ERROR);
  295
  296
  297        PSI = PARSE_STACK_IDX + 1;
  298        DO UNTIL (ACTION_ROW.CHECK(INDX) = PARSE_STACK(PSI))  OR (PSI = 0);
  299
  300          PSI  = PSI - 1;
  301          INDX = ACTION_COL.BASE (PARSE_STACK(PSI)) + %TERM_ERROR_SYM;
  302
  303        END;
  304
  305        IF ACTION_ROW.CHECK(INDX) = PARSE_STACK(PSI) THEN
  306          DO;
  307             /* INSERT THE =ERROR= TOKEN */
  308            IF PSI = %PARSE_STACK_MAX THEN
  309              %PARSE_STACK_OVERFLOW;
  310            ELSE
  311              DO;
  312                PARSE_STACK_IDX         = PSI ;
  313                STATE                   = PARSE_STACK(PARSE_STACK_IDX);
  314                LX_TOP                  = PARSE_STACK_IDX ;
  315                ERR_LA_CNT              = LA_CNT;
  316                ERR_LA_PUT              = LA_PUT;
  317                ERR_LA_GET              = LA_GET;
  318                PANIC_MODE_IN_PROGRESS  = '1'B;
  319                /* CREATE ERROR TOKEN */
  320                LA_STK.SYMBOL(LA_PUT)   = %TERM_ERROR_SYM;
  321                LA_STK.DNTPTR(LA_PUT)   = ADDR(NIL);
  322                LA_STK.SYMPTR(LA_PUT)   = ADDR(NIL);
  323                LA_STK.LINE (LA_PUT)    = ERRLINE;
  324                LA_STK.COLUMN(LA_PUT)   = ERRCOL;
  325                LA_CNT                  = 1;
  326                LA_GET                  = LA_PUT;
09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     14   
  327                LA_PUT                  = LA_STK.LINK(LA_PUT);
  328              END;
  329          END;
  330        ELSE
  331          DO;
  332        %RESET_ERROR_LOC(L="LA_STK.LINE(LA_GET)",C="LA_STK.COLUMN(LA_GET)");
  333            CALL ERROR(%E$UNEXP_EOF_DURING_RECOVERY);
  334            %TERMINATE;
  335          END;
  336
  337      END;
  338      %MEND;
  339      %EJECT;

09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     15   
  340      %MACRO GET_ACTION_ITEM;
  341
  342             /* Get the next action from the action table.  This will be
  343                either a shift, reduce, or an error.
  344             */
  345
  346        IF ACTION_COL.BASE(STATE) = 0 THEN
  347          DO;
  348            %IF PARSING_STATS;
  349            %INC_ACTION_COL_STATS(I=STATE);
  350            %ENDIF;
  351            ACTION = ACTION_COL.DEFAULT(STATE);
  352          END;
  353        ELSE
  354          DO;
  355            %AT_LEAST_ONE_TOKEN;
  356            INDX = ACTION_COL.BASE(STATE) + LA_STK.SYMBOL(LA_GET);
  357            IF ACTION_ROW.CHECK(INDX) = STATE THEN
  358              DO;
  359                %IF PARSING_STATS;
  360                %INC_ACTION_ROW_STATS(I=INDX);
  361                %ENDIF;
  362                ACTION = ACTION_ROW.NEXT(INDX);
  363                IF ACTION = 0 THEN
  364                  DO;
  365                    %IF LOCALLY_LEAST_COST_RECOVERY;
  366                      %CLEAR_SEMANTIC_ACTIONS;
  367                    %ENDIF;
  368                    %DUMP_PARSER_STATS;
  369                    %LAST_SHIFTED_LOC(L="LA_STK.LINE(LA_GET)",C="LA_STK.COLUMN(LA_GET)");
  370                    RETURN;
  371                  END;
  372              END;
  373            ELSE
  374              DO;
  375                %IF PARSING_STATS;
  376                %INC_ACTION_COL_STATS(I=STATE);
09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     16   
  377                %ENDIF;
  378                ACTION = ACTION_COL.DEFAULT(STATE);
  379              END;
  380          END;
  381
  382      %MEND;
  383      %EJECT;

09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     17   
  384      %MACRO SHIFT;
  385
  386             /* Shift the symbol and go to the next state.
  387                The symbol is always a terminal, and it is placed on the token
  388                stack (LX_STK) for reference by a semantics action ala Dave
  389                Ward's parser.
  390             */
  391
  392          DO;
  393            %IF LOCALLY_LEAST_COST_RECOVERY;
  394              %CLEAR_SEMANTIC_ACTIONS;
  395            %ENDIF;
  396            %AT_LEAST_ONE_TOKEN;
  397            IF LX_TOP = %LX_MAX THEN
  398              %SEMANTIC_TOKEN_STACK_OVERFLOW;
  399            LX_TOP         = LX_TOP + 1;
  400            LX_STK(LX_TOP) = LA_STK(LA_GET);
  401            LX_STK.LINK(LX_TOP) = ADDR(NIL);
  402            %LAST_SHIFTED_LOC(L="LA_STK.LINE(LA_GET)",C="LA_STK.COLUMN(LA_GET)");
  403            IF PARSE_STACK_IDX = %PARSE_STACK_MAX THEN
  404              %PARSE_STACK_OVERFLOW;
  405            ELSE
  406              DO;
  407                LA_CNT         = LA_CNT -1 ;
  408                LA_GET         = LA_STK.LINK(LA_GET);
  409                STATE                         = ACTION;
  410                PARSE_STACK_IDX               = PARSE_STACK_IDX + 1;
  411                PARSE_STACK(PARSE_STACK_IDX)  = STATE;
  412              END;
  413          END;
  414
  415      %MEND;
  416      %EJECT;

09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     18   
  417      %MACRO REDUCE;
  418
  419             /* Reduce the symbols and states on the stack by the appropriate
  420                production, after calling any required semantic routine.
  421                The token stack (LX_STK) is left with one dummy token to
  422                represent the non_terminal that was just reduced.  This non_terminal
  423                and the state on the stack after the reduction are used to
  424                index into the GOTO table to obtain the next state.
  425             */
  426
  427            DO;
  428              ACTION          = - ACTION;
  429              %IF LOCALLY_LEAST_COST_RECOVERY;
  430                %SAVE_IED_STATE;
  431              %ENDIF;
  432              %IF LOCALLY_LEAST_COST_RECOVERY;
  433                %PUSH_SEMANTIC_ACTION;
  434              %ELSE;
  435                IF PRODR.POPSTACK(ACTION) = 0 THEN
  436                  DO;
  437                    LX_TOP = LX_TOP + 1;
  438                    %CREATE_EMPTY_TERMINAL_ON_LX_STK;
  439                    LX_TOP = LX_TOP - 1;
  440                  END;
  441                IF PRODR.SEMANTIC(ACTION) > 0 THEN
  442                  DO;
  443                    REDUCTION = ACTION;
  444                    %CALL_SEMANTICS(A="BINBIT(PRODR.SEMANTIC(REDUCTION),36)");
  445                  END;
  446              %ENDIF;
  447              %IF PARSING_STATS;
  448                %INC_PRODR_STATS(I=ACTION);
  449              %ENDIF;
  450              PARSE_STACK_IDX = PARSE_STACK_IDX - PRODR.POPSTACK(ACTION);
  451              LX_TOP          = PARSE_STACK_IDX + 1;
  452
  453              /* Get new state */
09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     19   
  454
  455              NT = PRODR.GOAL(ACTION);
  456              IF GOTO_COL.BASE(NT) = 0 THEN
  457                DO;
  458                  %IF PARSING_STATS;
  459                  %INC_GOTO_COL_STATS(I=NT);
  460                  %ENDIF;
  461                  STATE = GOTO_COL.DEFAULT(NT);
  462                END;
  463              ELSE
  464                DO;
  465                  INDX = GOTO_COL.BASE(NT) + PARSE_STACK(PARSE_STACK_IDX);
  466                  IF GOTO_ROW.CHECK(INDX) = NT THEN
  467                    DO;
  468                      %IF PARSING_STATS;
  469                      %INC_GOTO_ROW_STATS(I=INDX);
  470                      %ENDIF;
  471                      STATE = GOTO_ROW.NEXT (INDX);
  472                    END;
  473                  ELSE
  474                    DO;
  475                      %IF PARSING_STATS;
  476                      %INC_GOTO_COL_STATS(I=NT);
  477                      %ENDIF;
  478                      STATE = GOTO_COL.DEFAULT(NT);
  479                    END;
  480                END;
  481
  482              /* Push state on stack */
  483
  484              IF PARSE_STACK_IDX = %PARSE_STACK_MAX THEN
  485                DO;
  486                  %AT_LEAST_ONE_TOKEN;
  487                  %PARSE_STACK_OVERFLOW;
  488                END;
  489              ELSE
  490                DO;
09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     20   
  491                  PARSE_STACK_IDX               = PARSE_STACK_IDX + 1;
  492                  PARSE_STACK(PARSE_STACK_IDX)  = STATE;
  493                END;
  494            END;
  495
  496      %MEND;
  497      %EJECT;

09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     21   
  498
  499
  500
  501
  502             /* Initialize circular list of lookahead tokens for fast
  503                 additions and retrieval. */
  504
  505      %MACRO INITIAL_INITIALIZATION;
  506        DO INDX = 0 TO %LA_MAX - 1;
  507          LA_STK.LINK(INDX) = INDX + 1;
  508        END;
  509        LA_STK.LINK(%LA_MAX) = 0;
  510      %MEND;
  511
  512      %MACRO RESTART_INITIALIZATION;
  513        %IF LOCALLY_LEAST_COST_RECOVERY;
  514          RED_STACK_TOP = 0;
  515          IED_FLAG = '0'B;
  516        %ENDIF;
  517
  518        PARSE_STACK_IDX = 0;
  519        STATE = 1;
  520        LX_TOP          = 0;
  521        PARSE_STACK(PARSE_STACK_IDX)  = STATE;
  522      %MEND;
  523      %EJECT;

09:10 AUG 09 '97 PARSER_MACROS.:Z8A6SI                                     22   
  524      %MACRO PARSE_LOOP;
  525      DO WHILE '1'B;
  526
  527        %GET_ACTION_ITEM;
  528
  529
  530        IF ACTION < 0 THEN
  531          %REDUCE;
  532        ELSE
  533          IF ACTION > 0 THEN
  534            %SHIFT;
  535          ELSE    /* Error occurred */
  536            %RECOVERY;
  537
  538      END;  /* While */
  539
  540
  541        /* The above loop should never fall thru;  it terminates in the
  542             shift action when the next state is zero.
  543        */
  544      %MEND;

