

09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6      LOCALLY_LEAST_COST_CORRECTION : PROC;
    7
    8      %ERROR_COST_SYMREFS;
    9      %ERROR_PATH_SYMREFS;
   10      %TSTRING_SYMREFS;
   11
   12      %MACRO CORR_BODY;
   13            2 DEL_LEN    SBIN WORD,
   14            2 DEL_COST   SBIN WORD,
   15            2 INS_TO_SYM SBIN WORD,
   16            2 INSRT_LEN  SBIN WORD,
   17            2 INSRT_COST SBIN WORD,
   18            2 INSRT (0:%INSRT_LEN_MAX) SBIN HALF HALIGNED;
   19      %MEND;
   20
   21
   22      DCL 1 LC,
   23            %CORR_BODY;
   24
   25      DCL 1 LR,
   26            %CORR_BODY;
   27
   28      DCL LARGE_DELETION BIT(1);
   29      DCL ACCUM_DEL_LEN SBIN WORD;
   30      DCL ACCUM_DEL_COST SBIN WORD;
   31      DCL ACCUM_INS_TO_SYM SBIN WORD;
   32
   33
   34      %MACRO TRIAL_PARSE_STACK_OVERFLOW;
   35
   36             /* The parse stack has overflowed, so abort the compilation.
   37             */
09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       2    
   38
   39      DO;
   40        %RESET_ERROR_LOC;
   41        CALL ERROR (%E$PARSE_STACK_OVERFLOW_ERROR);
   42        %TERMINATE;
   43      END;
   44
   45      %MEND;
   46
   47
   48      %ERRORPROC;  /* Instantiate the error procedure */
   49
   50
   51      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       3    
   52      CREATE_LARGE_DELETION: PROC;
   53
   54      /* Skip a number of lookahead tokens in the list in
   55         order to make room for more.   We still have not
   56         found a viable correction.
   57         KEEP ONLY THE FIRST SYMBOL WHICH IS THE ORIGINAL ERROR SYMBOL
   58         FOR ERROR MESSAGE TEXT AND LOCATION.
   59      */
   60
   61      DCL OLA_GET SBIN WORD;
   62      DCL OLINK SBIN WORD;
   63
   64      OLA_GET = LA_GET;
   65
   66      DO WHILE LA_STK.LINK(LA_STK.LINK(LA_GET)) ~= LA_PUT;
   67
   68        LA_GET = LA_STK.LINK(LA_GET);
   69
   70      END;
   71
   72      OLINK                = LA_STK.LINK(LA_GET);
   73      LA_STK(LA_GET)       = LA_STK(OLA_GET);
   74      LA_STK.LINK(LA_GET)  = OLINK;
   75      ACCUM_INS_TO_SYM     = LA_STK.LINK(LA_GET);
   76      LR.INS_TO_SYM        = ACCUM_INS_TO_SYM;
   77      ACCUM_DEL_LEN        = 2;
   78      ACCUM_DEL_COST       = DEL_COST(LA_STK.SYMBOL(LA_GET));
   79      LR.DEL_COST          = ACCUM_DEL_COST;
   80      LR.DEL_LEN           = ACCUM_DEL_LEN;
   81      LA_CNT               = 2;
   82
   83      LARGE_DELETION       = '1'B;
   84
   85
   86      END;
   87
   88      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       4    
   89
   90      ABORT_CORRECTION : PROC;
   91
   92
   93      /* ABORT THE CORRECTION DUE TO SOME LIMITATION -- PROBABLY SPACE */
   94
   95      %RESET_ERROR_LOC;
   96      CALL ERROR (%E$CORRECTION_FAILURE);
   97      %TERMINATE;
   98
   99
  100      END ABORT_CORRECTION;
  101      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       5    
  102      CALC_CORRECTION : PROC (LRC);
  103
  104      /* Expand the least cost string of symbols to their
  105         least cost terminal equivalent
  106      */
  107
  108      DCL 1 LRC ALIGNED,
  109            %CORR_BODY;
  110
  111      DCL I SBIN WORD;
  112      DCL J SBIN WORD;
  113
  114      CORRECTION.LEN  = 0;
  115      CORRECTION.INDX = 0;
  116
  117      DO I = 0 TO LRC.INSRT_LEN - 1;
  118        DO J = LCS.INDX(LRC.INSRT(I)) TO
  119                  LCS.INDX(LRC.INSRT(I)) + LCS.LEN(LRC.INSRT(I)) - 1;
  120
  121          IF CORRECTION.LEN < %INSRT_LEN_MAX THEN
  122            DO;
  123              CORRECTION.SYM(CORRECTION.LEN) = LCS_ELEM(J);
  124              CORRECTION.LEN = CORRECTION.LEN + 1;
  125            END;
  126
  127        END;
  128      END;
  129
  130
  131      END CALC_CORRECTION;
  132      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       6    
  133      GIVE_CORRECTION_MESSAGE : PROC;
  134
  135
  136
  137      DCL DEL_CHAR_OVERFLOW    SBIN WORD;
  138      DCL 1 DEL,
  139            2 TEXT,
  140              3 LENGTH SBIN WORD,
  141              3 NAME CHAR(%DI_CHAR_LEN_MAX);
  142
  143      DCL INS_CHAR_OVERFLOW    SBIN WORD;
  144      DCL 1 INS,
  145            2 TEXT,
  146              3 LENGTH SBIN WORD,
  147              3 NAME CHAR(%DI_CHAR_LEN_MAX);
  148      DCL 1 BEF,
  149            2 TEXT,
  150              3 LENGTH SBIN WORD,
  151              3 NAME CHAR(%DI_CHAR_LEN_MAX);
  152
  153      DCL DEL_DNT$             PTR;  /* TO DELETION STRING */
  154      DCL INS_DNT$             PTR;  /* TO INSERTION STRING */
  155      DCL INS_BEF_DNT$         PTR;  /* TO INSERTION BEFORE SYMBOL STRING */
  156
  157
  158
  159
  160
  161      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       7    
  162      PACK_TERM : PROC ( DI,       /* IN GIVE_CORRECTION_MESSAGE */
  163                         DI_CHAR_OVERFLOW,
  164                         PT_LEN,
  165                         PT_PTR);
  166
  167      DCL 1 DI ALIGNED,
  168            2 TEXT,
  169              3 LENGTH SBIN WORD,
  170                3 NAME CHAR(%DI_CHAR_LEN_MAX);
  171
  172      DCL DI_CHAR_OVERFLOW   SBIN WORD;
  173      DCL PT_LEN             SBIN WORD;
  174      DCL PT_PTR             PTR;
  175      DCL PT_CHAR            CHAR(PT_LEN) UNAL BASED(PT_PTR);
  176
  177
  178      IF (DI.TEXT.LENGTH < %DI_CHAR_LEN_MAX) AND (DI.TEXT.LENGTH > 0) THEN
  179        DO;
  180          SUBSTR(DI.TEXT.NAME, DI.TEXT.LENGTH, 1) = ' ';
  181          DI.TEXT.LENGTH = DI.TEXT.LENGTH + 1;
  182        END;
  183
  184      IF %DI_CHAR_LEN_MAX - DI.TEXT.LENGTH >= PT_LEN THEN
  185        DO;
  186          SUBSTR (DI.TEXT.NAME, DI.TEXT.LENGTH) = PT_CHAR;
  187          DI.TEXT.LENGTH = DI.TEXT.LENGTH + PT_LEN;
  188        END;
  189      ELSE
  190        IF DI_CHAR_OVERFLOW > 0 THEN
  191          DO;
  192            SUBSTR(DI.TEXT.NAME, DI_CHAR_OVERFLOW) = PT_CHAR;
  193            DI.TEXT.LENGTH = MINIMUM(DI_CHAR_OVERFLOW + PT_LEN,
  194                                 %DI_CHAR_LEN_MAX);
  195          END;
  196        ELSE
  197          DO;
  198            SUBSTR(DI.TEXT.NAME, %DI_CHAR_LEN_MAX/2 - 2) = '... ';
09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       8    
  199            DI_CHAR_OVERFLOW = %DI_CHAR_LEN_MAX/2 + 2;
  200            SUBSTR(DI.TEXT.NAME, DI_CHAR_OVERFLOW) = PT_CHAR;
  201            DI.TEXT.LENGTH = MINIMUM(DI_CHAR_OVERFLOW + PT_LEN,
  202                                  %DI_CHAR_LEN_MAX);
  203          END;
  204
  205      END PACK_TERM;
  206
  207
  208
  209      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       9    
  210      CREATE_DEL_DNT : PROC;   /* IN GIVE_CORRECTION_MESSAGE */
  211
  212      /* Create DNT items for the deletion.
  213      */
  214
  215      DCL CONT_STR CHAR(4) STATIC INIT('... ');
  216
  217      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       10   
  218      PACK_DEL_TERM : PROC;  /* IN CREATE_DEL_DNT */
  219
  220
  221      IF LA_STK.DNTPTR(LA_GET) = ADDR(NIL) THEN
  222        CALL PACK_TERM(DEL,
  223                       DEL_CHAR_OVERFLOW,
  224                       BINBIT(TERM_STRING.LEN(LA_STK.SYMBOL(LA_GET)), 36),
  225                       ADDR(SUBSTR(TSTRING_SPACE,TERM_STRING.INDX(LA_STK.SYMBOL(LA_GET)))));
  226      ELSE
  227              CALL PACK_TERM ( DEL,
  228                                DEL_CHAR_OVERFLOW,
  229                                BINBIT(LA_STK.DNTPTR(LA_GET) -> DNT.TEXT.LENGTH,36),
  230                                ADDR(LA_STK.DNTPTR(LA_GET) -> DNT.TEXT.NAME));
  231
  232
  233      END PACK_DEL_TERM;
  234
  235
  236      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       11   
  237           /* MAIN BODY OF CREATE_DEL_DNT */
  238      DEL_DNT$           = ADDR(NIL);
  239      DEL.TEXT.LENGTH    = 0;
  240      DEL_CHAR_OVERFLOW  = 0;
  241
  242      IF LC.DEL_LEN > 0 THEN
  243        DO;
  244          IF LARGE_DELETION THEN
  245            DO;
  246              CALL PACK_DEL_TERM;
  247              CALL PACK_TERM ( DEL,
  248                               DEL_CHAR_OVERFLOW,
  249                               LENGTHC(CONT_STR),
  250                               ADDR(CONT_STR));
  251              DEL_CHAR_OVERFLOW = DEL.TEXT.LENGTH;
  252              LA_GET     = LA_STK.LINK(LA_GET);
  253              LA_CNT     = LA_CNT - 1;
  254              LC.DEL_LEN = LC.DEL_LEN - 1;
  255            END;
  256          DO WHILE LC.DEL_LEN > 0;
  257            CALL PACK_DEL_TERM;
  258            LA_GET     = LA_STK.LINK(LA_GET);
  259            LA_CNT     = LA_CNT - 1;
  260            LC.DEL_LEN = LC.DEL_LEN - 1;
  261          END;
  262
  263          IF DEL.TEXT.LENGTH > 0 THEN
  264            DO;
  265               DEL_DNT$ = ADDR(DEL);
  266            END;
  267        END;
  268
  269      END CREATE_DEL_DNT;
  270
  271
  272      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       12   
  273      CREATE_INS_DNT : PROC;   /* IN GIVE_CORRECTION_MESSAGE */
  274
  275      /* Create INS items for the insertion.
  276      */
  277
  278      DCL I SBIN WORD;
  279
  280      INS_DNT$           = ADDR(NIL);
  281      INS_BEF_DNT$       = ADDR(NIL);
  282      INS.TEXT.LENGTH       = 0;
  283      INS_CHAR_OVERFLOW  = 0;
  284
  285      IF CORRECTION.LEN > 0 THEN
  286        DO;
  287          DO I = 0 TO CORRECTION.LEN - 1;
  288            CALL PACK_TERM (INS,
  289                            INS_CHAR_OVERFLOW,
  290                            BINBIT(TERM_STRING.LEN(CORRECTION.SYM(I)),36),
  291                            ADDR(SUBSTR(TSTRING_SPACE,TERM_STRING.INDX(CORRECTION.SYM(I)))));
  292          END;
  293
  294          IF INS.TEXT.LENGTH > 0 THEN
  295            DO;
  296               INS_DNT$ = ADDR(INS);
  297            END;
  298          IF LA_STK.DNTPTR(LA_GET) = ADDR(NIL) THEN
  299            DO;
  300              BEF.TEXT.LENGTH = MINIMUM(TERM_STRING.LEN(LA_STK.SYMBOL(LA_GET)),%DI_CHAR_LEN_MAX);
  301              BEF.TEXT.NAME = SUBSTR(TSTRING_SPACE,TERM_STRING.INDX(LA_STK.SYMBOL(LA_GET)));
  302               INS_BEF_DNT$ = ADDR(BEF);
  303            END;
  304          ELSE
  305            DO;
  306              BEF.TEXT.LENGTH = MINIMUM(LA_STK.DNTPTR(LA_GET) -> DNT.TEXT.LENGTH,
  307                                        %DI_CHAR_LEN_MAX);
  308              BEF.TEXT.NAME = LA_STK.DNTPTR(LA_GET) -> DNT.TEXT.NAME;
  309              INS_BEF_DNT$ = ADDR(BEF);
09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       13   
  310            END;
  311
  312        END;
  313
  314      END CREATE_INS_DNT;
  315
  316      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       14   
  317      /* MAIN BODY OF GIVE_CORRECTION_MESSAGE */
  318
  319      %RESET_ERROR_LOC;
  320
  321      CALL CALC_CORRECTION (LC);
  322      CALL CREATE_DEL_DNT;
  323      CALL CREATE_INS_DNT;
  324
  325      IF DEL_DNT$ = ADDR(NIL) THEN
  326        CALL ERROR (%E$SYNTAX_INS, INS_DNT$, INS_BEF_DNT$);
  327      ELSE
  328        IF INS_DNT$=ADDR(NIL) THEN
  329          CALL ERROR (%E$SYNTAX_DEL, DEL_DNT$);
  330        ELSE
  331          CALL ERROR (%E$SYNTAX_REP, DEL_DNT$, INS_DNT$);
  332
  333      IF CORRECTION.LEN > 0 THEN
  334        DO;
  335          ERR_LA_GET = LA_GET;
  336          ERR_LA_PUT = LA_PUT;
  337          ERR_LA_CNT = LA_CNT;
  338          LA_CNT     = 0;
  339          LA_GET     = LA_PUT;
  340        END;
  341
  342      END GIVE_CORRECTION_MESSAGE;
  343      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       15   
  344      %IF TRIAL_PARSE_LENGTH > 0;
  345      CHECK_CONTEXT: PROC;
  346
  347      DCL PS(0:%PARSE_STACK_MAX) SBIN WORD;
  348      DCL PS_IDX SBIN WORD;
  349      DCL PSTATE SBIN WORD;
  350
  351      DCL INDX SBIN WORD;
  352      DCL ACTION SBIN WORD;
  353      DCL NT SBIN WORD;
  354
  355      %PARSE_SYMREFS;
  356
  357
  358      GET_CONTEXT : PROC;
  359
  360        DO WHILE (LR.DEL_LEN > LA_CNT - %TRIAL_PARSE_LENGTH);
  361          %CALL_SCANNER;
  362          LA_PUT = LA_STK.LINK(LA_PUT);
  363          IF LA_CNT > %LA_MAX THEN
  364            CALL ABORT_CORRECTION;
  365          LA_CNT = LA_CNT + 1;
  366        END;
  367
  368      END GET_CONTEXT;
  369
  370
  371      SAVE_STATE : PROC;
  372
  373        PS               = PARSE_STACK;
  374        PS_IDX           = PARSE_STACK_IDX;
  375        PSTATE           = STATE;
  376        ERR_LA_GET       = LA_GET;
  377        ERR_LA_PUT       = LA_PUT;
  378        ERR_LA_CNT       = LA_CNT;
  379
  380      END SAVE_STATE;
09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       16   
  381
  382
  383      RESTORE_STATE : PROC;
  384
  385        LA_CNT           = ERR_LA_CNT;
  386        LA_GET           = ERR_LA_GET;
  387        LA_PUT           = ERR_LA_PUT;
  388        PARSE_STACK      = PS;
  389        PARSE_STACK_IDX  = PS_IDX;
  390        STATE            = PSTATE;
  391        CORRECTION.LEN   = 0;
  392        CORRECTION.INDX  = 0;
  393
  394      END RESTORE_STATE;
  395
  396
  397      BUILD_LOOKAHEAD : PROC;
  398
  399      DCL I SBIN WORD;
  400      DCL J SBIN WORD;
  401
  402        CALL CALC_CORRECTION (LR);
  403
  404        IF CORRECTION.LEN > 0 THEN
  405          DO;
  406            LA_CNT = 0;
  407            LA_GET = LA_PUT;
  408          END;
  409        ELSE
  410          DO;
  411            LA_CNT = ERR_LA_CNT - LR.DEL_LEN;
  412            LA_GET = LR.INS_TO_SYM;
  413          END;
  414
  415      END BUILD_LOOKAHEAD;
  416
  417
09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       17   
  418      TRIAL_PARSE : PROC;
  419
  420      DO WHILE '1'B;
  421
  422        IF ACTION_COL.BASE(STATE) = 0 THEN
  423          ACTION = ACTION_COL.DEFAULT(STATE);
  424        ELSE
  425          DO;
  426            IF LA_CNT < 1 THEN
  427              IF CORRECTION.LEN = 0 AND CORRECTION.INDX = 0 THEN
  428                GOTO CORRECT_PARSE;
  429              ELSE
  430                IF CORRECTION.LEN > 0 THEN
  431                  DO;
  432                    LA_GET = LA_PUT;
  433                    LA_CNT = 1;
  434                    LA_STK.SYMBOL(LA_GET) = CORRECTION.SYM(CORRECTION.INDX);
  435                    CORRECTION.LEN        = CORRECTION.LEN - 1;
  436                    CORRECTION.INDX       = CORRECTION.INDX + 1;
  437                  END;
  438                ELSE
  439                  DO;
  440                    CORRECTION.INDX = 0;
  441                    LA_CNT = ERR_LA_CNT - LR.DEL_LEN;
  442                    LA_GET = LR.INS_TO_SYM;
  443                  END;
  444            INDX = ACTION_COL.BASE(STATE) + LA_STK.SYMBOL(LA_GET);
  445            IF ACTION_ROW.CHECK(INDX) = STATE THEN
  446              DO;
  447                ACTION = ACTION_ROW.NEXT(INDX);
  448                IF ACTION = 0 THEN
  449                  GOTO CORRECT_PARSE;
  450              END;
  451             ELSE
  452               ACTION = ACTION_COL.DEFAULT(STATE);
  453          END;
  454
09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       18   
  455            IF ACTION > 0 THEN
  456              DO;  /* SHIFT */
  457                LA_CNT = LA_CNT - 1;
  458                LA_GET = LA_STK.LINK(LA_GET);
  459                IF PARSE_STACK_IDX >= %PARSE_STACK_MAX THEN
  460                  %TRIAL_PARSE_STACK_OVERFLOW;
  461                ELSE
  462                  DO;
  463                    STATE                        = ACTION;
  464                    PARSE_STACK_IDX              = PARSE_STACK_IDX + 1;
  465                    PARSE_STACK(PARSE_STACK_IDX) = STATE;
  466                  END;
  467              END;
  468            ELSE
  469              IF ACTION < 0 THEN
  470                DO;
  471                  ACTION           = - ACTION;
  472                  PARSE_STACK_IDX  = PARSE_STACK_IDX - PRODR.POPSTACK(ACTION);
  473                  NT               = PRODR.GOAL(ACTION);
  474                  IF GOTO_COL.BASE(NT) = 0 THEN
  475                    STATE = GOTO_COL.DEFAULT(NT);
  476                  ELSE
  477                    DO;
  478                      INDX = GOTO_COL.BASE(NT) + PARSE_STACK(PARSE_STACK_IDX);
  479                      IF GOTO_ROW.CHECK(INDX) = NT THEN
  480                        STATE = GOTO_ROW.NEXT(INDX);
  481                      ELSE
  482                        STATE = GOTO_COL.DEFAULT(NT);
  483                    END;
  484                  PARSE_STACK_IDX              = PARSE_STACK_IDX + 1;
  485                  PARSE_STACK(PARSE_STACK_IDX) = STATE;
  486                END;
  487              ELSE
  488                GOTO BAD_PARSE;
  489
  490      END;
  491
09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       19   
  492      BAD_PARSE:
  493          LR.INSRT_COST = LR.INSRT_COST * 2;
  494
  495      CORRECT_PARSE:
  496
  497      END TRIAL_PARSE;
  498
  499
  500      CALL GET_CONTEXT;
  501      CALL SAVE_STATE;
  502      CALL BUILD_LOOKAHEAD;
  503      CALL TRIAL_PARSE;
  504      CALL RESTORE_STATE;
  505
  506      END CHECK_CONTEXT;
  507      %ENDIF;
  508      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       20   
  509      LR_INSERT : PROC;
  510
  511
  512      DCL I          SBIN WORD;
  513      DCL J          SBIN WORD;
  514      DCL K          SBIN WORD;  /* Current parse stack being considered */
  515      DCL I2         SBIN WORD;
  516      DCL H          UBIN WORD;
  517      DCL L          UBIN WORD;
  518      DCL M          UBIN WORD;
  519
  520      DCL LOWBASIS   SBIN WORD;
  521      DCL HIGHBASIS  SBIN WORD;
  522
  523      DCL MINITEM    SBIN WORD;
  524      DCL MINCOST    SBIN WORD;
  525      DCL MINPOS     SBIN WORD;
  526      DCL MINLCPINDX SBIN WORD;
  527      DCL MINPATH    SBIN WORD;
  528
  529      DCL LCP_ELEM_RET SBIN WORD;
  530
  531      DCL TRYCOST    SBIN WORD;
  532      DCL ACCUM_COST SBIN WORD;
  533
  534      /* THE NEXT DATA STRUCTURE IS A PL6 TWO DIMENSIONAL ARRAY */
  535
  536      DCL CURRSTAGE$ PTR;
  537      DCL NEXTSTAGE$ PTR;
  538
  539      DCL STAGE1$(0:%NR_BASIS_MAX) PTR;
  540      DCL STAGE2$(0:%NR_BASIS_MAX) PTR;
  541
  542      DCL 1 LCC BASED,
  543            2 COST SBIN HALF HALIGNED,
  544            2 LEN  SBIN HALF HALIGNED,
  545            2 STR(0:%INSRT_LEN_MAX) SBIN HALF HALIGNED;
09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       21   
  546
  547      DCL LCC_SPACE(0:%((INSRT_LEN_MAX/2 + 2)*(NR_BASIS_MAX*2 + 2))) SBIN WORD;
  548
  549      DCL CURRSTAGE(0:%NR_BASIS_MAX) PTR BASED(CURRSTAGE$);
  550      DCL NEXTSTAGE(0:%NR_BASIS_MAX) PTR BASED(NEXTSTAGE$);
  551
  552      /* END OF TWO DIMENSIONAL ARRAY */
  553
  554      DCL PRED_ITEM        SBIN WORD;
  555      DCL PRED_CLOSURE     BIT(1);
  556      DCL WORTHCONTINUING  BIT(1);
  557
  558      DCL CURRLOWBASIS     SBIN WORD;
  559      DCL CURRHIGHBASIS    SBIN WORD;
  560      DCL ITM              SBIN WORD;
  561      DCL NEXTLOWBASIS     SBIN WORD;
  562      DCL NEXTHIGHBASIS    SBIN WORD;
  563      DCL NEXTITEM         SBIN WORD;
  564      DCL P                SBIN WORD;
  565      DCL PE               SBIN WORD;
  566      DCL PATH_COST        SBIN WORD;
  567      DCL PELEM            UBIN HALF;
  568
  569
  570      %MACRO BASIS_ITEM_LIMITS(S=0, LOWB=LOWBASIS, HIGHB = HIGHBASIS);
  571
  572        DO;
  573          LOWB  = STATE_ITEM.CLOSURE(S-1) + 1;
  574          HIGHB = STATE_ITEM.BASIS(S);
  575        END;
  576
  577      %MEND;
  578
  579
  580      %MACRO BINSRCH_LCP(NTS=0);
  581
  582        DO;
09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       22   
  583          H            = LCP_UBOUND(LA_STK.SYMBOL(LR.INS_TO_SYM));
  584          L            = LCP_UBOUND(LA_STK.SYMBOL(LR.INS_TO_SYM) - 1) + 1;
  585          LCP_ELEM_RET = -1;
  586
  587          DO WHILE H >= L;
  588
  589            M = (L+H) / 2;
  590            IF NTS = LCP.NT(M) THEN
  591              DO;
  592                LCP_ELEM_RET = M;
  593                H = L - 1;
  594              END;
  595            ELSE
  596              IF NTS < LCP.NT(M) THEN
  597                H = M - 1;
  598              ELSE
  599                L = M + 1;
  600
  601          END; /* WHILE */
  602        END;
  603
  604      %MEND;
  605
  606
  607      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       23   
  608      INITSTAGES : PROC;  /* IN LR_INSERT */
  609
  610      /* INITIALIZE BOTH TWO DIMENSIONAL ARRAYS */
  611
  612      DCL I SBIN WORD;
  613
  614      DO I = 0 TO %NR_BASIS_MAX;
  615
  616        STAGE1$(I) = ADDR(LCC_SPACE(SIZEW(LCC)*I));
  617        STAGE2$(I) = ADDR(LCC_SPACE(SIZEW(LCC)*(I + 1 + %NR_BASIS_MAX)));
  618
  619      END;  /* DO */
  620
  621      CURRSTAGE$ = ADDR(STAGE1$);
  622      NEXTSTAGE$ = ADDR(STAGE2$);
  623      CALL NEWSTAGE;
  624      CALL NEWSTAGE;
  625
  626      END INITSTAGES;
  627
  628      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       24   
  629      NEWSTAGE : PROC;  /* IN LR_INSERT */
  630
  631      /* SWAP TWO DIMENSIONAL ARRAYS FOR LOOKING AT NEXT STACK LEVEL */
  632      DCL I SBIN WORD;
  633      DCL TPTR PTR;
  634
  635      TPTR = NEXTSTAGE$;
  636      NEXTSTAGE$ = CURRSTAGE$;
  637      CURRSTAGE$ = TPTR;
  638
  639      DO I = 0 TO %NR_BASIS_MAX ;
  640
  641        NEXTSTAGE(I) -> LCC.COST = %INFINITE_COST;
  642        NEXTSTAGE(I) -> LCC.LEN = 0;
  643
  644      END;  /* DO */
  645
  646      END NEWSTAGE;
  647
  648
  649      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       25   
  650      FINDPRED : PROC (PREVSTATE, SUCCSTATE, ITM);  /* IN LR_INSERT */
  651
  652      /* FIND THE PREDECESSOR OF THE CURRENT ITEM */
  653
  654      DCL PREVSTATE SBIN WORD;
  655      DCL SUCCSTATE SBIN WORD;
  656      DCL ITM       SBIN WORD;
  657
  658      DCL I         SBIN WORD;
  659
  660      I = STATE_ITEM.CLOSURE(PREVSTATE -1) + 1;
  661
  662      DO WHILE (ITEM.SUCC_STATE(I) ~= SUCCSTATE)
  663            OR (ITEM.SUCC_ITEM(I) ~= ITM);
  664        I = I + 1;
  665      END;
  666
  667      PRED_ITEM = I;
  668      PRED_CLOSURE = I > STATE_ITEM.BASIS(PREVSTATE);
  669
  670      END FINDPRED;
  671
  672
  673
  674
  675      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       26   
  676      /* MAIN BODY OF LR_INSERT */
  677
  678      CALL INITSTAGES;
  679
  680      K = PARSE_STACK_IDX;
  681
  682      LR.INSRT_COST = %INFINITE_COST;
  683      LR.INSRT_LEN = 0;
  684
  685      %BASIS_ITEM_LIMITS(S="PARSE_STACK(PARSE_STACK_IDX)",
  686               LOWB=LOWBASIS,HIGHB=HIGHBASIS);
  687      MINCOST = %INFINITE_COST;
  688
  689      DO I = LOWBASIS TO HIGHBASIS;
  690
  691
  692        /* LCC(K,I) = S(B(I)) */
  693
  694        CURRSTAGE(I-LOWBASIS) -> LCC.LEN = ITEM.LEN(I);
  695        I2       = 0;
  696        TRYCOST  = 0;
  697        CURRSTAGE(I-LOWBASIS) -> LCC.COST = 0;
  698
  699        DO J = ITEM.INDX(I) TO ITEM.INDX(I) + ITEM.LEN(I) -1;
  700
  701          %BINSRCH_LCP(NTS = "PATH_ELEM(J)");
  702
  703          IF LCP_ELEM_RET >= 0 THEN
  704            DO;
  705              TRYCOST = CURRSTAGE(I-LOWBASIS) -> LCC.COST + LCP.COST(LCP_ELEM_RET);
  706              IF TRYCOST < MINCOST THEN
  707                DO;
  708                  MINITEM    = I;
  709                  MINPOS     = J;
  710                  MINCOST    = TRYCOST;
  711                  MINLCPINDX = LCP_ELEM_RET;
  712                END;
09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       27   
  713            END;
  714
  715          CURRSTAGE(I-LOWBASIS) -> LCC.COST = CURRSTAGE(I-LOWBASIS) ->
  716                    LCC.COST + LCS.COST(PATH_ELEM(J));
  717          CURRSTAGE(I-LOWBASIS) -> LCC.STR(I2) = PATH_ELEM(J);
  718
  719          I2 = I2 + 1;
  720        END;  /* DO J */
  721
  722      END;  /* DO I */
  723
  724      /* SET UP THE INITIAL VALUE OF THE INSERT STRING */
  725
  726      IF MINCOST < %INFINITE_COST THEN
  727        DO;
  728          LR.INSRT_COST = MINCOST;
  729          LR.INSRT_LEN  = 0;
  730
  731          DO J = ITEM.INDX(MINITEM) TO MINPOS - 1;
  732
  733            LR.INSRT(LR.INSRT_LEN) = PATH_ELEM(J);
  734            LR.INSRT_LEN           = LR.INSRT_LEN + 1;
  735
  736          END;
  737
  738          /* INSERT E(B(I), A) */
  739
  740          IF LR.INSRT_LEN + LCP.LEN(MINLCPINDX) > %INSRT_LEN_MAX THEN
  741            CALL ABORT_CORRECTION;
  742
  743          DO J = LCP.INDX(MINLCPINDX) TO
  744                     LCP.INDX(MINLCPINDX) + LCP.LEN(MINLCPINDX) - 1;
  745
  746            LR.INSRT(LR.INSRT_LEN) = LCP_ELEM(J);
  747            LR.INSRT_LEN           = LR.INSRT_LEN + 1;
  748
  749          END;
09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       28   
  750        END;
  751
  752      WORTHCONTINUING = K > 0;
  753
  754      DO WHILE WORTHCONTINUING;
  755
  756        WORTHCONTINUING = '0'B;
  757
  758        %BASIS_ITEM_LIMITS( S="PARSE_STACK(K)",
  759                            LOWB = CURRLOWBASIS,
  760                            HIGHB = CURRHIGHBASIS);
  761
  762        DO ITM = 0 TO CURRHIGHBASIS - CURRLOWBASIS;
  763
  764          IF CURRSTAGE(ITM) -> LCC.COST < LR.INSRT_COST THEN
  765            DO;
  766              WORTHCONTINUING = '1'B;
  767
  768              CALL FINDPRED (PARSE_STACK(K-1),
  769                             PARSE_STACK(K),
  770                             ITM);
  771
  772              %BASIS_ITEM_LIMITS(S="PARSE_STACK(K-1)",
  773                            LOWB = NEXTLOWBASIS,
  774                            HIGHB = NEXTHIGHBASIS);
  775
  776              IF PRED_CLOSURE THEN
  777                DO;
  778
  779                  DO NEXTITEM = 0 TO NEXTHIGHBASIS - NEXTLOWBASIS;
  780
  781                    /* CALC S(LP(S(K-1), PRED_ITEM, NEXTITEM) */
  782
  783                    P = ITEM.INDX(PRED_ITEM) + NEXTITEM;
  784
  785                    IF PATH.INDX(P) < 0 THEN
  786                      PATH_COST = %INFINITE_COST;
09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       29   
  787                    ELSE
  788                      DO;
  789                        PATH_COST = 0;
  790                        DO PE = PATH.INDX(P) TO PATH.INDX(P) + PATH.LEN(P) - 1;
  791                          PATH_COST = PATH_COST + LCS.COST(PATH_ELEM(PE));
  792                        END;
  793                      END;
  794                    IF CURRSTAGE(ITM) -> LCC.COST + PATH_COST
  795                        < NEXTSTAGE(NEXTITEM) -> LCC.COST THEN
  796                      DO;
  797                        NEXTSTAGE(NEXTITEM) -> LCC = CURRSTAGE(ITM) -> LCC;
  798
  799                        DO PE = PATH.INDX(P) TO PATH.INDX(P) + PATH.LEN(P) - 1;
  800                          IF NEXTSTAGE(NEXTITEM) -> LCC.LEN >= %INSRT_LEN_MAX THEN
  801                            CALL ABORT_CORRECTION;
  802                          NEXTSTAGE(NEXTITEM) -> LCC.STR(NEXTSTAGE(NEXTITEM) -> LCC.LEN)
  803                                 = PATH_ELEM(PE);
  804                          NEXTSTAGE(NEXTITEM) -> LCC.LEN
  805                                   = NEXTSTAGE(NEXTITEM) -> LCC.LEN + 1;
  806                        END;  /* DO */
  807
  808                        NEXTSTAGE(NEXTITEM) -> LCC.COST = CURRSTAGE(ITM) -> LCC.COST + PATH_COST;
  809                      END;  /* IF */
  810                  END;  /* DO NEXTITEM */
  811
  812                  /* CALC E(LP(S(K-1),PRED_ITEM), A) */
  813
  814                  IF CURRSTAGE(ITM) -> LCC.COST < LR.INSRT_COST THEN
  815                    DO;
  816                      MINCOST = %INFINITE_COST;
  817
  818                      DO P = ITEM.INDX(PRED_ITEM)
  819                              TO ITEM.INDX(PRED_ITEM)
  820                                   + ITEM.LEN(PRED_ITEM) -1;
  821
  822                        TRYCOST    = 0;
  823                        ACCUM_COST = 0;
09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       30   
  824                        IF PATH.INDX(P) >= 0 THEN
  825                        DO PE = PATH.INDX(P) TO PATH.INDX(P) + PATH.LEN(P) -1;
  826                          PELEM = PATH_ELEM(PE);
  827                          %BINSRCH_LCP(NTS=PELEM);
  828
  829                          IF LCP_ELEM_RET >= 0 THEN
  830                            DO;
  831                              TRYCOST = ACCUM_COST + LCP.COST(LCP_ELEM_RET);
  832                              IF TRYCOST < MINCOST THEN
  833                                DO;
  834                                  MINPATH     = P;
  835                                  MINPOS      = PE;
  836                                  MINCOST     = TRYCOST;
  837                                  MINLCPINDX  = LCP_ELEM_RET;
  838                                END;
  839                            END;
  840                          ACCUM_COST = ACCUM_COST + LCS.COST(PATH_ELEM(PE));
  841                        END;
  842                       END;
  843                      IF MINCOST + CURRSTAGE(ITM) -> LCC.COST < LR.INSRT_COST THEN
  844                        DO;
  845                         /* UPDATE INSERT */
  846                          LR.INSRT_LEN        = CURRSTAGE(ITM) -> LCC.LEN;
  847                          LR.INSRT            = CURRSTAGE(ITM) -> LCC.STR;
  848                          LR.INSRT_COST       = MINCOST + CURRSTAGE(ITM) -> LCC.COST;
  849
  850                          DO PE = PATH.INDX(MINPATH) TO MINPOS - 1;
  851                            IF LR.INSRT_LEN >= %INSRT_LEN_MAX THEN
  852                              CALL ABORT_CORRECTION;
  853                            LR.INSRT(LR.INSRT_LEN) = PATH_ELEM(PE);
  854                            LR.INSRT_LEN           = LR.INSRT_LEN + 1;
  855                          END;
  856                          IF LR.INSRT_LEN + LCP.LEN(MINLCPINDX) > %INSRT_LEN_MAX THEN
  857                            CALL ABORT_CORRECTION;
  858
  859                          DO I = LCP.INDX(MINLCPINDX) TO
  860                                    LCP.INDX(MINLCPINDX) + LCP.LEN(MINLCPINDX) - 1;
09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       31   
  861
  862                            LR.INSRT(LR.INSRT_LEN) = LCP_ELEM(I);
  863                            LR.INSRT_LEN           = LR.INSRT_LEN + 1;
  864                          END;  /* DO */
  865                        END; /* IF */
  866                   END; /* IF */
  867
  868                END; /* IF */
  869              ELSE
  870                /* BASIS ITEM */
  871                IF CURRSTAGE(ITM) -> LCC.COST < NEXTSTAGE(PRED_ITEM - NEXTLOWBASIS) -> LCC.COST THEN
  872                   NEXTSTAGE(PRED_ITEM - NEXTLOWBASIS) -> LCC = CURRSTAGE(ITM) -> LCC;
  873            END;
  874        END;
  875
  876        IF K <= 1 THEN
  877          WORTHCONTINUING = '0'B;
  878
  879        IF WORTHCONTINUING THEN
  880          DO;
  881            K = K - 1;
  882            CALL NEWSTAGE;
  883          END;
  884
  885      END; /* WHILE */
  886
  887
  888      END LR_INSERT;
  889      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       32   
  890
  891
  892
  893      /* MAIN BODY OF LOCALLY_LEAST_COST_CORRECTION */
  894
  895      LR.INSRT_LEN     = 0;
  896      LR.INSRT_COST    = %INFINITE_COST;
  897      ACCUM_DEL_LEN    = 0;
  898      ACCUM_DEL_COST   = 0;
  899      LR.DEL_LEN       = ACCUM_DEL_LEN;
  900      LR.DEL_COST      = ACCUM_DEL_COST;
  901
  902      LARGE_DELETION   = '0'B;
  903
  904      ACCUM_INS_TO_SYM = LA_GET;
  905      LR.INS_TO_SYM    = ACCUM_INS_TO_SYM;
  906
  907
  908      DO UNTIL (LR.INSRT_COST < %INFINITE_COST);
  909
  910        CALL LR_INSERT;
  911
  912        IF LR.INSRT_COST >= %INFINITE_COST THEN
  913          DO;
  914            ACCUM_DEL_LEN = ACCUM_DEL_LEN + 1;
  915               LR.DEL_LEN = ACCUM_DEL_LEN;
  916            IF LR.DEL_LEN >= %LA_MAX THEN
  917              CALL CREATE_LARGE_DELETION;
  918            ACCUM_DEL_COST = ACCUM_DEL_COST + DEL_COST(LA_STK.SYMBOL(ACCUM_INS_TO_SYM));
  919            LR.DEL_COST = ACCUM_DEL_COST;
  920            IF LR.DEL_COST >= %INFINITE_COST THEN
  921              CALL ABORT_CORRECTION;
  922            IF LR.DEL_LEN >= LA_CNT THEN
  923              DO;
  924                %CALL_SCANNER;
  925                LA_PUT = LA_STK.LINK(LA_PUT);
  926                LA_CNT = LA_CNT + 1;
09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       33   
  927              END;
  928            ACCUM_INS_TO_SYM = LA_STK.LINK(ACCUM_INS_TO_SYM);
  929            LR.INS_TO_SYM    = ACCUM_INS_TO_SYM;
  930          END;
  931      END;
  932
  933      %IF TRIAL_PARSE_LENGTH > 0;
  934      CALL CHECK_CONTEXT;
  935      %ENDIF;
  936      LC = LR;
  937
  938      ACCUM_DEL_COST = ACCUM_DEL_COST + DEL_COST(LA_STK.SYMBOL(ACCUM_INS_TO_SYM));
  939      LR.DEL_COST    = ACCUM_DEL_COST;
  940
  941      DO WHILE ((ACCUM_DEL_COST < LC.DEL_COST + LC.INSRT_COST)
  942             AND (ACCUM_DEL_LEN < %LA_MAX-1));
  943
  944        /* ENSURE ONE MORE SYMBOL */
  945
  946
  947        ACCUM_DEL_LEN = ACCUM_DEL_LEN + 1;
  948        LR.DEL_LEN    = ACCUM_DEL_LEN;
  949        IF LR.DEL_LEN >= LA_CNT THEN
  950          DO;
  951            %CALL_SCANNER;
  952            LA_PUT = LA_STK.LINK(LA_PUT);
  953            LA_CNT = LA_CNT + 1;
  954          END;
  955
  956
  957        ACCUM_INS_TO_SYM = LA_STK.LINK(ACCUM_INS_TO_SYM);
  958        LR.INS_TO_SYM    = ACCUM_INS_TO_SYM;
  959
  960
  961            CALL LR_INSERT;
  962
  963            %IF TRIAL_PARSE_LENGTH > 0;
09:23 AUG 09 '97 Z8P_PARS_EC.:Z8A6SI                                       34   
  964            IF LR.INSRT_COST + LR.DEL_COST < LC.DEL_COST + LC.INSRT_COST THEN
  965              CALL CHECK_CONTEXT;
  966            %ENDIF;
  967            IF LR.INSRT_COST + LR.DEL_COST < LC.DEL_COST + LC.INSRT_COST THEN
  968                LC = LR;
  969
  970        ACCUM_DEL_COST = ACCUM_DEL_COST + DEL_COST(LA_STK.SYMBOL(ACCUM_INS_TO_SYM));
  971        LR.DEL_COST    = ACCUM_DEL_COST;
  972
  973      END;  /* DO WHILE */
  974
  975      CALL GIVE_CORRECTION_MESSAGE;
  976
  977
  978      END LOCALLY_LEAST_COST_CORRECTION;

