VERSION A06

PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:1    
        1        1        /*M* Z8AD$DOCUMENT --   All encompassing COBOL85 documentation        */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        Z8AD$DOCUMENT:PROC NOAUTO;
        8        8
        9        9        /*P*
       10       10               NAME: Z8AD$DOCUMENT
       11       11        DESCRIPTION: Describes coding and documentation methods for the COBOL85
       12       12                     implementation, as well as other information that concerns
       13       13                     the product as a whole.
       14       14             AUTHOR: John E. Heath
       15       15        MODIFIED BY: John E. Heath            9/27/83
       16       16                     Charles F. LaCasse      11/13/85
       17       17
       18       18        */
       19       19
       20       20        /*F*
       21       21
       22       22               NAME: GENERAL_CODING_CONVENTIONS
       23       23        DESCRIPTION: In order for us all to write maintainable, efficient, PL6
       24       24                     programs, we all have to abide by certain rules that we, as
       25       25                     a unit, have the authority to define.  These rules must reflect
       26       26                     our collective thoughts on what properties a readable,
       27       27                     (underline that) and at the same time efficient, program
       28       28                     possesses.  Our major concern is that the majority of a
       29       29                     product's life cycle is spent in maintenance
       30       30                     (approx. 60%).  We should do our best to ease that burden.
       31       31
       32       32                         The following describes various rules that
       33       33                     essentially all of the COBOL85 project members abide by.
       34       34                     It is hoped that any new members will recognize and respect
       35       35                     their purpose as well.
       36       36        */
       37       37        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:2    
       38       38        /*F*
       39       39
       40       40               NAME: MODULE_NAMING_CONVENTIONS
       41       41          REFERENCE: Design note #18
       42       42         DESCRIPTION:
       43       43
       44       44                INTRODUCTION
       45       45                ============
       46       46
       47       47                The  following naming conventions  are based on  CP-6 and GCOS8
       48       48                conventions.  GCOS8  module names are 4 characters  (eg, KK97 is a module
       49       49                in  the  Cobol-74  Analyzer  phase);  CP-6  modules  are 3 characters in
       50       50                length,  the  first  character  is  "X"  for library modules and "Z" for
       51       51                compiler  modules,  and  the  second  character  usually  indicates  the
       52       52                language (eg, 6=PL/6, A=APL). CP-6 entry names are of the form XYZ$name.
       53       53
       54       54
       55       55                COBOL85 CONVENTIONS
       56       56                ====================
       57       57
       58       58                Compiler system independent modules names will be of the form:
       59       59                    Z8xy
       60       60                    where "x" indicates the phase:
       61       61                    A  Executive
       62       62                    B  Options Processor
       63       63                    C  Copy/Replace and Formatter
       64       64                    D  DD/ED/ID
       65       65                    E  PD
       66       66                    F  Flow Analysis, Storage Allocation
       67       67                    G  Global Optimizer
       68       68                    H  Highly Optimized Code Generator
       69       69                    I  Annotator
       70       70                    J  Table Dumper
       71       71        */
       72       72        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:3    
       73       73        /*
       74       74                Compiler system dependent module names will be of the form:
       75       75                    Z9xy_CP6 (for CP-6 version on GCOS8),
       76       76                    Z9xy     (for CP-6 version on CP-6),
       77       77                    Z9xy_GCOS (for GCOS8 version on CP-6),
       78       78
       79       79                Compiler system independent entry names will be of the form:
       80       80                    Z8xy$name
       81       81
       82       82                Compiler system dependent entry names will be of the form:
       83       83                    Z9xy$name,
       84       84
       85       85                Library modules will follow a similar theme:
       86       86                    X8xy
       87       87                    X9xy_CP6, X9xy_GCOS
       88       88                    X8xy$name
       89       89                    X9xy$name
       90       90
       91       91                The actual  file names for the  source and object decks  for the modules
       92       92                will vary  from system to system.   For example, on CP-6,  a source file
       93       93                for module  Z8GO would be Z8GO_SI,  an object file would  be Z8GO; on
       94       94                GCOS8, the names would be /SRC/Z8GO and /OBJ/Z8GO .
       95       95
       96       96                Include files will follow the conventions:
       97       97                    XXX_YYYYYYYY  (maximum of 8 Y's)
       98       98                    where XXX indicates the phase:
       99       99                        Z8A for Executive or globally used includes,
      100      100                        Z8E for Phase 1 includes,
      101      101                        Z8F for Phase 2 includes,
      102      102                        Z8G for Phase 3 includes,
      103      103                        Z8H for Phase 4 includes,
      104      104                        Z8I for Phase 5 includes,
      105      105                        Z8J for Table Dumper includes,
      106      106                        X8? for include files used by the library,
      107      107                    and YYYYYYYY indicates the contents.
      108      108        */
      109      109        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:4    
      110      110        /*
      111      111
      112      112                EXAMPLES
      113      113                ========
      114      114
      115      115
      116      116                The Lexical Analyzer Module:
      117      117                Module: Z8EL
      118      118                Entry: Z8EL$LEX
      119      119
      120      120
      121      121                The Table Dumper Names Include File:
      122      122                Z8A_NAMES
      123      123
      124      124        */
      125      125        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:5    
      126      126        /*F*
      127      127
      128      128               NAME: PRE-PROCESSOR_FACILITY
      129      129          REFERENCE: PL6 DRAFT, APPENDIX C.
      130      130        DESCRIPTION: PL6 provides a means by which the programmer can equate
      131      131                     constant values of any valid PL6 data type to symbolic names.
      132      132                     PL6 makes 1 pass over the source to replace these symbolic
      133      133                     names with the corresponding constants before the actual
      134      134                     compilation process begins.
      135      135                         The difference in readability between the symbolic
      136      136                     name and the constant itself is irrefutably in the favor
      137      137                     of the pre-processor variable.  Furthermore, if any of these
      138      138                     constants change during the life-time of the product,
      139      139                     it is relatively simple to change the one line where the
      140      140                     pre-processor variable is defined, rather than to try to seek out
      141      141                     and change each occurence of the constant preserving the
      142      142                     integrity of identical constants used in an unrelated
      143      143                     context.
      144      144
      145      145
      146      146         Pre-processor Macros --
      147      147
      148      148                         We are told that in our environment, memory is of little
      149      149                     concern.  It is for this reason that we can justify expanding
      150      150                     "execution critical" code groups in-line rather introduce
      151      151                     the expense of CALL overhead.  The "rule" here is that this
      152      152                     feature must be used with discretion.  Never overuse a feature
      153      153                     to the point that the logic becomes obscure.
      154      154
      155      155
      156      156          Include Files --
      157      157
      158      158                         Data declarations that are common between 2 or more modules
      159      159                     should be broken out and placed in pre-processor
      160      160                     Include Files.  This reduces file editing time, and also
      161      161                     protects the programmer from himself.
      162      162
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:6    
      163      163
      164      164          General --
      165      165
      166      166                         The pre-processor command %EJECT should be used to separate
      167      167                     distinct code groups.  All PROC statements except
      168      168                     for the first one should be preceded by this command.
      169      169
      170      170        */
      171      171        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:7    
      172      172        /*
      173      173
      174      174               NAME: DECLARATION_OF_VARIABLES
      175      175          REFERENCE: SPEEDY_PL6 DOCUMENT
      176      176        DESCRIPTION:
      177      177
      178      178          Structure Declaration --
      179      179
      180      180                         In order that we supply the PL6 Compiler with as much
      181      181                     alignment information as possible, follow this rule when
      182      182                     declaring structures:  The "01" level of the structure should
      183      183                     be given the attribute of ALIGNED*, then all of the subordinate
      184      184                     levels can possess any alignment attribute neccessary
      185      185                     for the application.  Refer to the "SPEEDY_PL6" document,
      186      186                     procedure ALIGNMENT for examples.
      187      187
      188      188                   * ALIGNED is the default in PL6, except for BASED and
      189      189                     parameter data items.
      190      190
      191      191
      192      192          Static .vs. Auto --
      193      193
      194      194                     On CP6, it is to the user's advantage to declare
      195      195                     variables as being static when the application does
      196      196                     not require them to be automatic.  The reason for this
      197      197                     is to accomodate the powerful WHEN debugger command
      198      198                     that requires variables to be static.
      199      199
      200      200                     On Multics, it is to the user's advantage to declare
      201      201                     variables as being automatic.  Access of automatic data
      202      202                     is faster than static under Multics.
      203      203        */
      204      204        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:8    
      205      205        /*F*
      206      206
      207      207               NAME: STATEMENT_FORMAT
      208      208          REFERENCE: "PL6 Course" Literature, Gary Ford, A.S.U.
      209      209        DESCRIPTION:     All of our programs will eventually appear to work, but
      210      210                     if the names and symbols that make up our programs are splashed
      211      211                     all over the page, God help the poor slob that has to pick
      212      212                     them up 5 years down the road and understand them.  We need
      213      213                     to agree on some consistant way of formatting our programs
      214      214                     so that just about anybody can follow the logic flow and
      215      215                     recognize the functional code groups.
      216      216
      217      217
      218      218          Control structure indentation --
      219      219
      220      220                     A control structure is a means of describing the flow
      221      221                     of control in a program, which means the temporal order of
      222      222                     the performance of the operations and manipulations on data.
      223      223                     Such structures are necessary because the physical order
      224      224                     of the statements in a program do not completely specify the
      225      225                     temporal order of their execution.
      226      226
      227      227                     There are three major classes of control structures in PL6:
      228      228                     sequencing, alteration, and iteration.  There
      229      229                     are a variety of control structures within each class.
      230      230        */
      231      231        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:9    
      232      232        /*
      233      233
      234      234        SEQUENCING::
      235      235
      236      236             A sequencing control structure provides a mechanism for causing
      237      237             statements to be executed in the order in which they appear in
      238      238             the program.
      239      239
      240      240             Usually this is an implicit control structure, in that no words or
      241      241             symbols appear in the program to specify sequencing.  However,
      242      242             there are situations in PL6 where a single statement is allowed,
      243      243             but a group of statements is desired.  Such a group can be specified
      244      244             by preceding it with the DO statement, and following it with the
      245      245             END statement:
      246      246
      247      247               DO;
      248      248                 <statement1>;
      249      249                 <statement2>;
      250      250                     .
      251      251                     .
      252      252                 <statementn>;
      253      253               END;
      254      254
      255      255             The statements in the group are to be executed in the order that
      256      256             they appear, but the compiler considers the group to be a single
      257      257             statement.  Such a group is called a DO group, or a compound statement.
      258      258        */
      259      259        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:10   
      260      260        /*
      261      261
      262      262        ALTERNATION:
      263      263
      264      264             Conditional --
      265      265
      266      266               IF <expression> THEN
      267      267                 <statement>;
      268      268
      269      269             Double Alternative --
      270      270
      271      271               IF <expression> THEN
      272      272                 <statement1>;
      273      273               ELSE
      274      274                 <statement2>;
      275      275
      276      276             Multiple Alternative --
      277      277
      278      278               DO CASE(<expression>);
      279      279                 CASE(<constant list>);
      280      280                   <statement list>;
      281      281                 CASE(<constant list>);
      282      282                   <statement list>);
      283      283                        .
      284      284                        .
      285      285                        .
      286      286                 CASE(<constant list>);
      287      287                   <statement list>;
      288      288               END;
      289      289        */
      290      290        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:11   
      291      291        /*
      292      292        ITERATION:
      293      293
      294      294             Top-testing loop --
      295      295
      296      296               DO WHILE(<expression>);
      297      297                 <statement1>;
      298      298                 <statement2>;
      299      299                      .
      300      300                      .
      301      301                      .
      302      302                 <statementn>;
      303      303               END;
      304      304
      305      305             Bottom-testing loop --
      306      306
      307      307               DO UNTIL(<expression>);
      308      308                 <statement1>;
      309      309                 <statement2>;
      310      310                      .
      311      311                      .
      312      312                      .
      313      313                 <statementn>;
      314      314               END;
      315      315
      316      316             Counter-controlled loop --
      317      317
      318      318               DO <identifier> = <expression1> TO <expression2> [BY <expression3>];
      319      319                 <statement1>;
      320      320                 <statement2>;
      321      321                      .
      322      322                      .
      323      323                      .
      324      324                 <statement3>;
      325      325               END;
      326      326
      327      327               DO <identifier> = <expression1> DOWNTO <expression2> [BY <expression3>];
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:12   
      328      328                 <statement1>;
      329      329                 <statement2>;
      330      330                      .
      331      331                      .
      332      332                      .
      333      333                 <statement3>;
      334      334               END;
      335      335        */
      336      336        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:13   
      337      337        /*
      338      338             It is important to realize the proven advantage of indenting
      339      339             individual control structures to emphasize their relationship to
      340      340             other control structures.  Below is an example of how indentation
      341      341             of control structures improves the readability of program flow.
      342      342
      343      343
      344      344
      345      345             IF <expression> THEN
      346      346               DO WHILE(<expression>);
      347      347                 IF <expression> THEN
      348      348                   <statement>;
      349      349                 ELSE
      350      350                   <statement>;
      351      351               END;
      352      352             ELSE
      353      353               DO <expression> = <expression> TO <expression>;
      354      354                 IF <expression> THEN
      355      355                   DO CASE(<expression>);
      356      356                     CASE(<constant list>);
      357      357                       <statement list>;
      358      358                     CASE(<constant list list>);
      359      359                       <statement list>;
      360      360                   END;
      361      361               END;
      362      362
      363      363
      364      364
      365      365        NOTE: Indentations by two are recommended, due to limited screen width.
      366      366
      367      367        */
      368      368        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:14   
      369      369        /*F*
      370      370
      371      371               NAME: CALLS_WITH_ALTRETURN
      372      372        DESCRIPTION:     One of the clumsiest, unstructured constructs in PL6
      373      373                     is the ALTRET clause of the CALL statement.  Heavy use of this
      374      374                     "feature" is not recommended, however, many of the calls
      375      375                     to CP6 Monitor Services routines require specification of
      376      376                     ALTRET for error exits.  To make the structure of these
      377      377                     calls more acceptable, the following construct is suggested:
      378      378
      379      379
      380      380             CALL M$program(FPTN)
      381      381               WHENRETURN
      382      382                 DO;
      383      383                   <statements>
      384      384                 END;
      385      385               WHENALTRETURN
      386      386                 DO;
      387      387                   <statements>
      388      388                 END;
      389      389
      390      390
      391      391
      392      392
      393      393        */
      394      394        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:15   
      395      395        /*F*
      396      396
      397      397               NAME: SUB_PROCEDURES
      398      398        DESCRIPTION:     Just a few words about internal .vs. external
      399      399                     procedures.  The overhead involved during an external CALL
      400      400                     is generally more expensive than a CALL to an internal
      401      401                     procedure, especially if the number of passed parameters
      402      402                     is high.  I don't want to imply that, as a rule, internal
      403      403                     should be used over external.  The reason is that PL6
      404      404                     does not allow direct recursion of internal procedures.
      405      405                     This can start a devastating snowball effect if it becomes
      406      406                     a requirement that an internal procedure suddenly become recursive.
      407      407                     That procedure, and any internal procedures that it may
      408      408                     call must also become external, and so on.
      409      409
      410      410        */
      411      411        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:16   
      412      412        /*F*
      413      413
      414      414               NAME: EXTRACT
      415      415          REFERENCE: "Listing Commentary Standards" AF #91E-0
      416      416        DESCRIPTION: All of the COBOL85 maintenance documentation will be
      417      417                     created and maintained as commentary within the modules that
      418      418                     compose the Compiler.  Each phase will have one module
      419      419                     that will contain nothing but commentary.  A tool in
      420      420                     the CP-6 X account called EXTRACT will yank all of
      421      421                     these comments into a single data base that can then be
      422      422                     inspected by all project members.
      423      423
      424      424
      425      425                     It should be mentioned that this document in no way is
      426      426                     intended to be a comprehensive explanation of EXTRACT.  It
      427      427                     is intended for reference of the COBOL85 project members,
      428      428                     and describes solely the features pertinant to the
      429      429                     documentation of the COBOL85 implementation.
      430      430
      431      431        */
      432      432        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:17   
      433      433        /*F*
      434      434
      435      435               NAME: COMMENT_FORMATION
      436      436          REFERENCE: "Listing Commentary Standards" AF #91E-0
      437      437        DESCRIPTION: The format for an EXTRACTable comment is::
      438      438
      439      439           <comment start><comment type><text><comment end>
      440      440
      441      441        Note:
      442      442              The <comment start> in PL6 is "slash star", the <comment end>
      443      443              "star slash."  From now on, when it is necessary to place a
      444      444              comment within a comment (as in this document), <comment start>
      445      445              will be specified as "/ *" and <comment end> "* /" (we don't
      446      446              want PL6 to mistake our comments as PL6 source).
      447      447
      448      448
      449      449           SUMMARY OF PERTINANT COMMENT TYPES --
      450      450
      451      451          M*   One-line module definition
      452      452          T*   Copyright notice
      453      453          P*   Overview of module
      454      454          F*   Overview of major code group or module
      455      455          V*   Functional code group technical overview
      456      456          D*   Detail of ENTRY point or PROCedure
      457      457          I*   Detail of internal subroutine
      458      458          E*   Error code and message
      459      459          B*   Data item description
      460      460          N*   Need code for deferred feature
      461      461        */
      462      462        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:18   
      463      463        /*
      464      464            RULES FOR USING COMMENT TYPES --
      465      465
      466      466
      467      467        Type M*   A one line description of each module.  It must be the first
      468      468                  line within each module.  Only one M* should appear per
      469      469                  module (file).  The format is:
      470      470
      471      471                        M* name description
      472      472
      473      473                  note: The description is optional if it is superfluous.
      474      474
      475      475        Type T*  This is for the copyright notice, and should appear immediately
      476      476                 following the M* comment type.  A standard copyright notice
      477      477                 exists in account .C80C80 that you can MERGE into your files
      478      478                 using the CP6 EDIT command MERGE as follows:
      479      479
      480      480                     MERGE COPYRIGHT.C80C80,1-5 INTO RECEIVING_FILE,start,incr
      481      481
      482      482                 where:
      483      483
      484      484                 start -  is the lowest key of starting range.
      485      485                 incr   - is the increment for target range.
      486      486
      487      487        Type P*  Preamble report to a module or file.  This preamble should
      488      488                 describe the purpose of the module.  The keywords are:
      489      489
      490      490                    NAME: The first string encountered should be this keyword.
      491      491                          Although EXTRACT doesn't enforce its presence, we should
      492      492                          supply it for clarity.  This module name will be used for
      493      493                          sorting the report.
      494      494
      495      495                 PURPOSE: A brief, concise explanation of the function performed.
      496      496                          No nitty gritty details should be supplied here.
      497      497
      498      498        Type F*  Overview report of major code group (eg: Phase 3).  The
      499      499                 Cobol85 project uses this report type only in documentation
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:19   
      500      500                 modules (eg: Z8AD, Z8GD, Z8ID, Z9ID).  This report includes
      501      501                 purpose, method, references, significant features or
      502      502                 limitations of the code.  The keywords for this report are::
      503      503
      504      504                        NAME: Module or funtion name. This keyword is required
      505      505                              for type F comments.
      506      506
      507      507                     PURPOSE: Same as for P*, however, if there exists a P* comment
      508      508                              right before this F*, it need not be supplied again.
      509      509
      510      510                 DESCRIPTION: The details of how the PURPOSE is accomplished.
      511      511
      512      512                   REFERENCE: Manuals, specifications, or a cross-reference
      513      513                              to other items within our COBOL85 EXTRACT
      514      514                              data base (reference USING_EXTRACT).
      515      515
      516      516        Type V*  Functional code group technical overview.  No keywords are
      517      517                 recognized.  Should be used to describe 2-15 lines of code at a
      518      518                 time.  The first word of the comment is taken as the
      519      519                 name, so provide a one word "heading", or maybe a couple of
      520      520                 words separated by underscores.  This name is the only hint
      521      521                 that a user will have as to what the comment contains when they
      522      522                 are perusing through the EXTRACT data base.
      523      523
      524      524        Type D*  These are the detail reports, and are required for every entry
      525      525                 point (not internal subroutines) with the following exception.
      526      526                 If a routine contains more than one entry point, but the details
      527      527                 are almost identical, only one detail report is needed, and
      528      528                 the keyword ENTRY: is used to define the multiple entry points.
      529      529                 EXTRACT will duplicate the D* report with each  entry in
      530      530                 sorted order.  The D* comments should appear at point of entry.
      531      531                 They include the information necessary for the user to know
      532      532                 how to use the routine, and what to expect of it in the way
      533      533                 of usage, interfaces, input, output, etc.  See keywords.  At
      534      534                 the actual point of entry, repeat the ENTRY: and the keyword
      535      535                 and paragraph that makes the ENTRY different from the D* comments
      536      536                 to be repeated.  EXTRACT can then duplicate the full D*
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:20   
      537      537                 comments and substitute the information that makes it unique.
      538      538                 The keywords are:
      539      539
      540      540                        NAME: Same as for P* and F*.  We should enforce the
      541      541                              presence of this keyword.
      542      542
      543      543                       ENTRY: Used for sorting.  Needed only if multiple entries
      544      544                              require the same detail report.
      545      545
      546      546                        CALL: Calling sequence for this routine, i.e., how is
      547      547                              this routine called.
      548      548
      549      549                   INTERFACE: Which routines does this routine call?
      550      550
      551      551                       INPUT: Data accessed to perform function.
      552      552
      553      553                      OUTPUT: Data altered and intended as the result of this
      554      554                              operation/routine.
      555      555
      556      556                     SCRATCH: Data altered, but not intended as results (side effect).
      557      557
      558      558                 DESCRIPTION: What does it actually do and how.
      559      559
      560      560
      561      561        Type I*  Internal subroutines can be documented like the D* comment
      562      562                 type; the keywords are the same.
      563      563
      564      564        Type E*  The error code report.  It must include all error messages visible
      565      565                 to the outside world.  The keywords are:
      566      566
      567      567                       ERROR: Name that is the same as the corresponding pre-processor
      568      568                              %EQU in include file Z8A_ERR_NUMS.
      569      569
      570      570                     MESSAGE: The error message text.  Should be at least close
      571      571                              to what will actually appear to the user.
      572      572
      573      573                 DESCRIPTION: Why the error was issued.
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:21   
      574      574
      575      575        Type B*  This is the data definition report.  It should be placed before
      576      576                 the definition of major data items used, both intra-module
      577      577                 data, and especially inter-module communication data.
      578      578                 There are no keywords recognized in this report, the comment
      579      579                 name will be the first non-blank string encountered.
      580      580
      581      581        Type N*  This is where code is to be added to implement features that are
      582      582                 being postponed for future iterations of the compiler.  Because
      583      583                 of the staging of the compiler, known features are postponed, but
      584      584                 it might be easier to flag where they should be implemented
      585      585                 in the module rather than figuring it out later.  The format is:
      586      586
      587      587                           N* keyword description
      588      588
      589      589
      590      590
      591      591               There are things that one must be aware of when using these
      592      592             comments.
      593      593
      594      594
      595      595             1. EXTRACT will usually associate some name to the comment.  The
      596      596                method that it uses varies with the comment type as follows:
      597      597
      598      598                        M*,P*  - Not needed
      599      599                        F*,I*  - Keyword (NAME:) required
      600      600                        D*     - Keyword (NAME:) optional.  If absent, previous
      601      601                                 D* name is used, or none
      602      602                        V*,B*  - First word of comment
      603      603                        E*     - Keyword (ERROR:) required
      604      604                        N*     - Not extracted at all
      605      605
      606      606
      607      607             2.  EXTRACT does not enforce any capitalization policy beyond
      608      608                 the fact that all keywords must be in upper case; however, in
      609      609                 order that anyone can cross reference our EXTRACT data base
      610      610                 (regardless of upper/lower case capability), we should always
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:22   
      611      611                 make keywords and comment names upper case.  The body of all
      612      612                 comments should be upper/lower case.
      613      613
      614      614             3.  Lines will be EXTRACTed without leading or trailing blanks,
      615      615                 leading-asterisks, or comment definition characters with the following
      616      616                 exceptions:
      617      617
      618      618                   a).  Leading character stripping stops at the position of the
      619      619                        first non-blank or non-* of the packet (usually NAME:).
      620      620
      621      621             ***   b).  Leading * and blank stripping is suppressed following a
      622      622                        line ending in a double full colon (::).  Comment definition
      623      623                        is always stripped.
      624      624
      625      625        */
      626      626        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:23   
      627      627        /*F*
      628      628
      629      629               NAME: EXTRACT_COMMANDS
      630      630          REFERENCE: File HELP:EXTRACT: in the CP-6 X account.
      631      631        DESCRIPTION::
      632      632
      633      633            Commands understood by EXTRACT --
      634      634
      635      635
      636      636             DA[TA_BASE]                 Opens a data base
      637      637             EX[TRACT]                   Extracts comments from source
      638      638             XL[IST]                     Extracts comments from source by listfile
      639      639             OU[TPUT]                    Changes output destination
      640      640             RE[PORT]                    Displays entries in the data base
      641      641             WH[AT]                      Lists names of entries in the data base
      642      642             DE[LETE]                    Deletes entries from the data base
      643      643             DF[IL]                      Deletes entire data base
      644      644             HE[LP]                      Reports help information
      645      645             DO[CUMENT]                  Creates P, F, D document
      646      646             QU[IT]                      Exits EXTRACT
      647      647             E[ND]                       Exits EXTRACT
      648      648             X                           Exits EXTRACT
      649      649
      650      650
      651      651        <*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*>
      652      652
      653      653        DATA_BASE name[.account]
      654      654
      655      655             Name must be less than 27 characters.  If account is not specified,
      656      656             the current account is assumed.
      657      657
      658      658        EXTRACT fid[.account]   (fid is a COBOL85 "SI" file)
      659      659
      660      660             EXTRACTs from the source file onto the data base.
      661      661
      662      662        XLIST fid[.account]
      663      663
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:24   
      664      664             EXTRACTs comments from all files listed (one per line) in fid.
      665      665
      666      666        OUTPUT fid
      667      667
      668      668             Directs subsequent EXTRACT output to fid. Works only for REPORT,
      669      669             WHAT, and DELETE.
      670      670
      671      671        REPORT options
      672      672        WHAT options
      673      673        DELETE options
      674      674
      675      675             options -- separated by commas, only one of each.
      676      676
      677      677             TYPE list  (where list selects what comment types are to be
      678      678                         reported, e.g. TYPE MFDI)
      679      679
      680      680                        possible types:  V, M, P, F, D, I, E, B.
      681      681
      682      682             LINE [[start]-end]  selects source file numbers, start <= end <= 999999.
      683      683                                 end = start if absent.
      684      684
      685      685             MODULE name   selects by module source file name
      686      686
      687      687             NAME name     selects by comment name
      688      688
      689      689        A "?" may appear as a suffix for name or module to specify a prefix.
      690      690
      691      691             DF     Deletes the current data base (there are no safeguards).
      692      692
      693      693             DOCUMENT FID1,FID2     Uses FID1 to create FID2.
      694      694
      695      695                    FID1 is a file containing 3 lines.
      696      696                    FID2 will be the result (used in an IFI TEXT command).
      697      697                    For example, to create a Phase 3 document; first
      698      698                    create a data base containing the Phase 3 comments,
      699      699                    then create an FID1 as follows:
      700      700                         SECTION=3
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:25   
      701      701                         HEADING=Ye Olde Global Optimizer
      702      702                         ?
      703      703                    then exit EXTRACT, and use TEXT to print the
      704      704                    document: TEXT O3DOCUMENT, where O3DOCUMENT
      705      705                    contains the following TEXT commands:
      706      706                         .pd 66,79  (or 40,99 for our printer)
      707      707                         .vm 2,2,1,1
      708      708                         .ifi FID2
      709      709                    Note that there are a couple of problems with
      710      710                    the DOCUMENT command: (1) comment lines are
      711      711                    not aligned as they were in the original source
      712      712                    file, and (2) non-standard keywords are not
      713      713                    recognized (eg: AUTHOR:).
      714      714
      715      715        */
      716      716        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:26   
      717      717        /*F*
      718      718
      719      719               NAME: USING_EXTRACT
      720      720        DESCRIPTION: In order to EXTRACT comments from all "_SI" files in the .C80C80
      721      721                     account, and create (or augment) the .C80C80 EXTRACT data
      722      722                     base COBOL85_EXTRACT.C80C80, use this command::
      723      723
      724      724                           !XEQ EXTRACT.C80C80
      725      725
      726      726                     To EXTRACT comments from just your own "_SI" files, XEQ this file
      727      727                     after changing Z?H?_SI to reflect your phase (Z?I?_SI for
      728      728                     the Annotator, Z?E?_SI for phase 1), and "GEN" to your
      729      729                     phase prefix (ANN for Annotator, LEX for phase 1).
      730      730
      731      731
      732      732        !L (C=0) Z?H?_SI OVER *ALL_SI    "list all SIs into temp file"
      733      733        !E *ALL_SI                       "delete extraneous info"
      734      734        C *ALL_SI                        "make file keyed file"
      735      735        TY99999                          "locate end-of-file"
      736      736        ^                                "locate last line of file"
      737      737        DE                               "delete xxx files listed message"
      738      738        END                              "exit edit"
      739      739        !EXTRACT.X                       "extract comments from all those files"
      740      740        DATA_BASE GEN_EXTRACT
      741      741        XLIST *ALL_SI
      742      742        END
      743      743
      744      744
      745      745
      746      746                     Once the data base has been created, we can go under EXTRACT
      747      747                     by typing:
      748      748
      749      749                          !EXTRACT.X
      750      750
      751      751                     EXTRACT will prompt you with an asterisk and a bleep.
      752      752
      753      753                     Before we can do much of anything under EXTRACT, we must first
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:27   
      754      754                     define the data base that it is to use:
      755      755
      756      756                          *DATA_BASE GEN_EXTRACT
      757      757
      758      758                     For this example, we will use the existing
      759      759                     Generator data base GEN_EXTRACT.
      760      760
      761      761                     In order to find out what is on the data base, we can issue
      762      762                     the WHAT command, that will produce the following results:
      763      763
      764      764
      765      765
      766      766
      767      767          Module Name                    Line# T Comment Name.
      768      768          Z8HC_SI                            1 M
      769      769          Z8HC_SI                            7 P
      770      770          Z8HC_SI                          192 V CVRQ
      771      771          Z8HC_SI                          229 V LINOI
      772      772          Z8HC_SI                          116 V MPI
      773      773          Z8HC_SI                          154 V MVAN
      774      774          Z8HC_SI                           69 V SIZ
      775      775          Z8HC_SI                           73 V SSOP
      776      776          Z8HC_SI                           14 F Z8HC$SPECIAL_CASES
      777      777          Z8HC_SI                          247 I Z8HC$SPECIAL_CASES BUFFER_TOP_SSOPS
      778      778          Z8HD_SI                            1 M
      779      779          Z8HD_SI                           10 P
      780      780          Z8HD_SI                          143 F FORMAT_OF_GENERATOR_INPUT
      781      781          Z8HD_SI                          229 F FORMAT_OF_GENERATOR_INPUT_CONT
      782      782          Z8HD_SI                           45 F METHOD
      783      783          Z8HD_SI                           17 F PURPOSE
      784      784          Z8HI_SI                            1 M
      785      785          Z8HI_SI                            9 P
      786      786          Z8HI_SI                          950 V ADD
      787      787          Z8HI_SI                          931 V AND
      788      788          Z8HI_SI                          306 V ASSIGN
      789      789          Z8HI_SI                          449 V BURST
      790      790          Z8HI_SI                          822 V CASE
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:28   
      791      791          Z8HI_SI                          833 V DEFER
      792      792          Z8HI_SI                          726 V DSTATE
      793      793          Z8HI_SI                          164 V INITIALIZE
      794      794          Z8HI_SI                          196 V LOOP
      795      795          Z8HI_SI                          663 V MAPT
      796      796          Z8HI_SI                          897 V MOVE
      797      797          Z8HI_SI                          917 V MOVIND
      798      798          Z8HI_SI                          874 V PSEUDO-CODE_UTILITIES
      799      799          Z8HI_SI                          478 V REF
      800      800          Z8HI_SI                         1010 V SELECT
      801      801          Z8HI_SI                          175 V SET_IDEAL_REGISTER
      802      802          Z8HI_SI                          963 V SHIFTL
      803      803          Z8HI_SI                          971 V SHIFTR
      804      804          Z8HI_SI                          209 V SUPPORT_ACTIONS
      805      805          Z8HI_SI                          854 V WRAPUP
      806      806          Z8HI_SI                           16 D Z8HI$BURST
      807      807          Z8HI_SI                         1278 I Z8HI$BURST PICK_REGISTER
      808      808          Z8HI_SI                         1816 D Z8HI$BURST Z8HI$CHECK
      809      809          Z9AU_SI                            1 M
      810      810          Z9AU_SI                           18 P
      811      811          Z9AU_SI                           55 D Z8HO NEGOFF
      812      812          Z9AU_SI                           22 D Z8HO POSOFF
      813      813          Z8HP_SI                            1 M
      814      814          Z8HP_SI                            9 P
      815      815          Z8HP_SI                         2236 V ADEP
      816      816          Z8HP_SI                          224 V TRIAD
      817      817          Z8HP_SI                         2465 B Z8HP PCOM
      818      818          Z8HP_SI                           51 B Z8HP PEPD
      819      819          Z8HR_SI                            1 M
      820      820          Z8HR_SI                            8 P
      821      821          Z8HR_SI                           58 V ESCAPE
      822      822          Z8HR_SI                           44 V INIT
      823      823          Z8HR_SI                           14 F Z8HR$CODE_GENERATOR
      824      824
      825      825
      826      826
      827      827
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:29   
      828      828             The following lines are the result of this command:
      829      829
      830      830                *REPORT TYPE P
      831      831
      832      832
      833      833
      834      834          Module Name                    Line# T Comment Name.
      835      835          Z8HC_SI                            7 P
      836      836        NAME: Z8HC$SPECIAL_CASES
      837      837        PURPOSE: To provide special case functions that cannot otherwise
      838      838              be performed by existing pseudo-code directives.
      839      839
      840      840          Z8HD_SI                           10 P
      841      841        NAME: Z8HD$DOCUMENT
      842      842        PURPOSE: Explains the major portions of the Code Generator:
      843      843              Register Management, System Dependent code bursts, etc.
      844      844
      845      845          Z8HI_SI                            9 P
      846      846        NAME: Z8HI$BURST
      847      847        PURPOSE: To interpret PSEUDO-CODE.
      848      848
      849      849
      850      850          Z9AU_SI                           18 P
      851      851        NAME: Z9AU
      852      852        PURPOSE: Add or subtract various units from a descriptor.
      853      853          Z8HP_SI                            9 P
      854      854        NAME: Z8HP
      855      855        PURPOSE: Provides directive data for each unique triad.  This
      856      856                 data is interpreted by routine Z8HI$BURST.
      857      857          Z8HR_SI                            8 P
      858      858        NAME: Z8HR$CODE_GENERATOR
      859      859        PURPOSE: Controls the Code Generator. Does initialization, and steps
      860      860              through the major internal tables.
      861      861
      862      862
      863      863
      864      864
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:30   
      865      865
      866      866             The best learning tool is for each member to create a data base of
      867      867             his/her/its own, and start REporting entries within that data
      868      868             base to see what the user will eventually be working with.  If things
      869      869             don't look so hot, experiment with different comment formation
      870      870             schemes until it does look hot.
      871      871        */
      872      872        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:31   
      873      873        /*F*
      874      874
      875      875               NAME: EXTRACT_EXAMPLES
      876      876        DESCRIPTION: Now that we know the EXTRACT comment types, we can address
      877      877                     how to put them all to work so that the information appears
      878      878                     in the right places in the data base.  For example, if someone
      879      879                     REports all the type P* comments for a given phase, they
      880      880                     don't expect to find an explanation of how bits drop into
      881      881                     the "bit bucket", instead, they expect merely to be notified
      882      882                     of the overall purpose of each module.  Therefore, each module
      883      883                     must have one, short P* comment.
      884      884
      885      885
      886      886                     In order that we may create a complete and useful data base,
      887      887                     we must supply specific information under mandatory comment
      888      888                     reports.
      889      889
      890      890                     Use this comment sequence in your PL6 programs:
      891      891
      892      892
      893      893        / *M* MODULE NAME   Very short description                       * /
      894      894        / *T**************************************************************
      895      895          *T*                                                            *
      896      896          *T* Copyright, (c) Bull HN Information Systems, Inc., 1993     *
      897      897          *T*                                                            *
      898      898          *T************************************************************** /
      899      899        / *P*
      900      900               NAME: module name
      901      901            PURPOSE: One or two sentences describing the module's purpose
      902      902        * /
      903      903
      904      904        / *D*
      905      905               NAME: module name
      906      906               CALL: CALL Z8HI$BURST(=VAR1,VAR2=);
      907      907              INPUT: VAR1
      908      908                       What is this thing you just passed?
      909      909             OUTPUT: VAR2
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:32   
      910      910                       What is this thing that you're going to return?
      911      911               DATA: What data do you use here?
      912      912            SCRATCH: What data do you destroy as a side effect?
      913      913          REFERENCE: Can I find any information on this elsewhere?
      914      914        DESCRIPTION: All of the details.
      915      915
      916      916         * /
      917      917        Z8HI$BURST:PROC(VAR1,VAR2);
      918      918
      919      919
      920      920             .
      921      921             .
      922      922             %INCLUDE FILE1;
      923      923             %INCLUDE FILE2;
      924      924             .
      925      925             .
      926      926
      927      927        / *B*
      928      928             PEPD -- A pseudo-code entry point descriptor word that describes
      929      929                     the pseudo-code module and offset within that module where
      930      930                     interpretation is to begin.
      931      931        * /
      932      932
      933      933             .
      934      934             .
      935      935
      936      936             IC = PINCRW(PSEUDO_CODE_MODULE(DESCRIPTOR.MODULE),DESCRIPTOR.OFFSET);
      937      937
      938      938             .
      939      939             .
      940      940
      941      941        / *V*
      942      942             LOOP -- This begins the interpretation loop.  The only way out of
      943      943                     the loop is via a QUIT directive (action %QUIT).
      944      944        * /
      945      945        LOOP:
      946      946             DO WHILE('1'B);
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:33   
      947      947               PC = IC -> BASED_DOUBLEWORD;
      948      948               .
      949      949               .
      950      950               .
      951      951
      952      952               DO CASE(VAR3);
      953      953               .
      954      954               .
      955      955               CASE(%ASSIGN);
      956      956
      957      957        / *F*
      958      958
      959      959               NAME: ASSIGN
      960      960            PURPOSE: Drives register management from the Pseudo-code level.
      961      961        DESCRIPTION: Details, details, details.
      962      962
      963      963        * /
      964      964        END Z8HI$BURST;
      965      965
      966      966
      967      967
      968      968        */
      969      969    1   END Z8AD$DOCUMENT;
      970      970        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:34   

PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:35   
      No diagnostics issued in procedure Z8AD$DOCUMENT.

   No code generated for procedure Z8AD$DOCUMENT .
   Procedure Z8AD$DOCUMENT is declared NOAUTO and requires 2 words of local(STATIC) storage.

    No errors detected in file Z8AD.:Z8A6TSI    .

PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:36   

 Object Unit name= Z8AD$DOCUMENT                              File name= Z8AD.:Z8A6TOU
 UTS= AUG 09 '97 10:41:44.08 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none     2      2  Z8AD$DOCUMENT
    1   Proc  even  none     0      0  Z8AD$DOCUMENT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes     ~proc       0  Z8AD$DOCUMENT
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:37   

        1        1        /*M* Z8AD$DOCUMENT --   All encompassing COBOL85 documentation        */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        Z8AD$DOCUMENT:PROC NOAUTO;
        8        8
        9        9        /*P*
       10       10               NAME: Z8AD$DOCUMENT
       11       11        DESCRIPTION: Describes coding and documentation methods for the COBOL85
       12       12                     implementation, as well as other information that concerns
       13       13                     the product as a whole.
       14       14             AUTHOR: John E. Heath
       15       15        MODIFIED BY: John E. Heath            9/27/83
       16       16                     Charles F. LaCasse      11/13/85
       17       17
       18       18        */
       19       19
       20       20        /*F*
       21       21
       22       22               NAME: GENERAL_CODING_CONVENTIONS
       23       23        DESCRIPTION: In order for us all to write maintainable, efficient, PL6
       24       24                     programs, we all have to abide by certain rules that we, as
       25       25                     a unit, have the authority to define.  These rules must reflect
       26       26                     our collective thoughts on what properties a readable,
       27       27                     (underline that) and at the same time efficient, program
       28       28                     possesses.  Our major concern is that the majority of a
       29       29                     product's life cycle is spent in maintenance
       30       30                     (approx. 60%).  We should do our best to ease that burden.
       31       31
       32       32                         The following describes various rules that
       33       33                     essentially all of the COBOL85 project members abide by.
       34       34                     It is hoped that any new members will recognize and respect
       35       35                     their purpose as well.
       36       36        */
       37       37        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:38   
       38       38        /*F*
       39       39
       40       40               NAME: MODULE_NAMING_CONVENTIONS
       41       41          REFERENCE: Design note #18
       42       42         DESCRIPTION:
       43       43
       44       44                INTRODUCTION
       45       45                ============
       46       46
       47       47                The  following naming conventions  are based on  CP-6 and GCOS8
       48       48                conventions.  GCOS8  module names are 4 characters  (eg, KK97 is a module
       49       49                in  the  Cobol-74  Analyzer  phase);  CP-6  modules  are 3 characters in
       50       50                length,  the  first  character  is  "X"  for library modules and "Z" for
       51       51                compiler  modules,  and  the  second  character  usually  indicates  the
       52       52                language (eg, 6=PL/6, A=APL). CP-6 entry names are of the form XYZ$name.
       53       53
       54       54
       55       55                COBOL85 CONVENTIONS
       56       56                ====================
       57       57
       58       58                Compiler system independent modules names will be of the form:
       59       59                    Z8xy
       60       60                    where "x" indicates the phase:
       61       61                    A  Executive
       62       62                    B  Options Processor
       63       63                    C  Copy/Replace and Formatter
       64       64                    D  DD/ED/ID
       65       65                    E  PD
       66       66                    F  Flow Analysis, Storage Allocation
       67       67                    G  Global Optimizer
       68       68                    H  Highly Optimized Code Generator
       69       69                    I  Annotator
       70       70                    J  Table Dumper
       71       71        */
       72       72        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:39   
       73       73        /*
       74       74                Compiler system dependent module names will be of the form:
       75       75                    Z9xy_CP6 (for CP-6 version on GCOS8),
       76       76                    Z9xy     (for CP-6 version on CP-6),
       77       77                    Z9xy_GCOS (for GCOS8 version on CP-6),
       78       78
       79       79                Compiler system independent entry names will be of the form:
       80       80                    Z8xy$name
       81       81
       82       82                Compiler system dependent entry names will be of the form:
       83       83                    Z9xy$name,
       84       84
       85       85                Library modules will follow a similar theme:
       86       86                    X8xy
       87       87                    X9xy_CP6, X9xy_GCOS
       88       88                    X8xy$name
       89       89                    X9xy$name
       90       90
       91       91                The actual  file names for the  source and object decks  for the modules
       92       92                will vary  from system to system.   For example, on CP-6,  a source file
       93       93                for module  Z8GO would be Z8GO_SI,  an object file would  be Z8GO; on
       94       94                GCOS8, the names would be /SRC/Z8GO and /OBJ/Z8GO .
       95       95
       96       96                Include files will follow the conventions:
       97       97                    XXX_YYYYYYYY  (maximum of 8 Y's)
       98       98                    where XXX indicates the phase:
       99       99                        Z8A for Executive or globally used includes,
      100      100                        Z8E for Phase 1 includes,
      101      101                        Z8F for Phase 2 includes,
      102      102                        Z8G for Phase 3 includes,
      103      103                        Z8H for Phase 4 includes,
      104      104                        Z8I for Phase 5 includes,
      105      105                        Z8J for Table Dumper includes,
      106      106                        X8? for include files used by the library,
      107      107                    and YYYYYYYY indicates the contents.
      108      108        */
      109      109        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:40   
      110      110        /*
      111      111
      112      112                EXAMPLES
      113      113                ========
      114      114
      115      115
      116      116                The Lexical Analyzer Module:
      117      117                Module: Z8EL
      118      118                Entry: Z8EL$LEX
      119      119
      120      120
      121      121                The Table Dumper Names Include File:
      122      122                Z8A_NAMES
      123      123
      124      124        */
      125      125        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:41   
      126      126        /*F*
      127      127
      128      128               NAME: PRE-PROCESSOR_FACILITY
      129      129          REFERENCE: PL6 DRAFT, APPENDIX C.
      130      130        DESCRIPTION: PL6 provides a means by which the programmer can equate
      131      131                     constant values of any valid PL6 data type to symbolic names.
      132      132                     PL6 makes 1 pass over the source to replace these symbolic
      133      133                     names with the corresponding constants before the actual
      134      134                     compilation process begins.
      135      135                         The difference in readability between the symbolic
      136      136                     name and the constant itself is irrefutably in the favor
      137      137                     of the pre-processor variable.  Furthermore, if any of these
      138      138                     constants change during the life-time of the product,
      139      139                     it is relatively simple to change the one line where the
      140      140                     pre-processor variable is defined, rather than to try to seek out
      141      141                     and change each occurence of the constant preserving the
      142      142                     integrity of identical constants used in an unrelated
      143      143                     context.
      144      144
      145      145
      146      146         Pre-processor Macros --
      147      147
      148      148                         We are told that in our environment, memory is of little
      149      149                     concern.  It is for this reason that we can justify expanding
      150      150                     "execution critical" code groups in-line rather introduce
      151      151                     the expense of CALL overhead.  The "rule" here is that this
      152      152                     feature must be used with discretion.  Never overuse a feature
      153      153                     to the point that the logic becomes obscure.
      154      154
      155      155
      156      156          Include Files --
      157      157
      158      158                         Data declarations that are common between 2 or more modules
      159      159                     should be broken out and placed in pre-processor
      160      160                     Include Files.  This reduces file editing time, and also
      161      161                     protects the programmer from himself.
      162      162
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:42   
      163      163
      164      164          General --
      165      165
      166      166                         The pre-processor command %EJECT should be used to separate
      167      167                     distinct code groups.  All PROC statements except
      168      168                     for the first one should be preceded by this command.
      169      169
      170      170        */
      171      171        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:43   
      172      172        /*
      173      173
      174      174               NAME: DECLARATION_OF_VARIABLES
      175      175          REFERENCE: SPEEDY_PL6 DOCUMENT
      176      176        DESCRIPTION:
      177      177
      178      178          Structure Declaration --
      179      179
      180      180                         In order that we supply the PL6 Compiler with as much
      181      181                     alignment information as possible, follow this rule when
      182      182                     declaring structures:  The "01" level of the structure should
      183      183                     be given the attribute of ALIGNED*, then all of the subordinate
      184      184                     levels can possess any alignment attribute neccessary
      185      185                     for the application.  Refer to the "SPEEDY_PL6" document,
      186      186                     procedure ALIGNMENT for examples.
      187      187
      188      188                   * ALIGNED is the default in PL6, except for BASED and
      189      189                     parameter data items.
      190      190
      191      191
      192      192          Static .vs. Auto --
      193      193
      194      194                     On CP6, it is to the user's advantage to declare
      195      195                     variables as being static when the application does
      196      196                     not require them to be automatic.  The reason for this
      197      197                     is to accomodate the powerful WHEN debugger command
      198      198                     that requires variables to be static.
      199      199
      200      200                     On Multics, it is to the user's advantage to declare
      201      201                     variables as being automatic.  Access of automatic data
      202      202                     is faster than static under Multics.
      203      203        */
      204      204        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:44   
      205      205        /*F*
      206      206
      207      207               NAME: STATEMENT_FORMAT
      208      208          REFERENCE: "PL6 Course" Literature, Gary Ford, A.S.U.
      209      209        DESCRIPTION:     All of our programs will eventually appear to work, but
      210      210                     if the names and symbols that make up our programs are splashed
      211      211                     all over the page, God help the poor slob that has to pick
      212      212                     them up 5 years down the road and understand them.  We need
      213      213                     to agree on some consistant way of formatting our programs
      214      214                     so that just about anybody can follow the logic flow and
      215      215                     recognize the functional code groups.
      216      216
      217      217
      218      218          Control structure indentation --
      219      219
      220      220                     A control structure is a means of describing the flow
      221      221                     of control in a program, which means the temporal order of
      222      222                     the performance of the operations and manipulations on data.
      223      223                     Such structures are necessary because the physical order
      224      224                     of the statements in a program do not completely specify the
      225      225                     temporal order of their execution.
      226      226
      227      227                     There are three major classes of control structures in PL6:
      228      228                     sequencing, alteration, and iteration.  There
      229      229                     are a variety of control structures within each class.
      230      230        */
      231      231        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:45   
      232      232        /*
      233      233
      234      234        SEQUENCING::
      235      235
      236      236             A sequencing control structure provides a mechanism for causing
      237      237             statements to be executed in the order in which they appear in
      238      238             the program.
      239      239
      240      240             Usually this is an implicit control structure, in that no words or
      241      241             symbols appear in the program to specify sequencing.  However,
      242      242             there are situations in PL6 where a single statement is allowed,
      243      243             but a group of statements is desired.  Such a group can be specified
      244      244             by preceding it with the DO statement, and following it with the
      245      245             END statement:
      246      246
      247      247               DO;
      248      248                 <statement1>;
      249      249                 <statement2>;
      250      250                     .
      251      251                     .
      252      252                 <statementn>;
      253      253               END;
      254      254
      255      255             The statements in the group are to be executed in the order that
      256      256             they appear, but the compiler considers the group to be a single
      257      257             statement.  Such a group is called a DO group, or a compound statement.
      258      258        */
      259      259        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:46   
      260      260        /*
      261      261
      262      262        ALTERNATION:
      263      263
      264      264             Conditional --
      265      265
      266      266               IF <expression> THEN
      267      267                 <statement>;
      268      268
      269      269             Double Alternative --
      270      270
      271      271               IF <expression> THEN
      272      272                 <statement1>;
      273      273               ELSE
      274      274                 <statement2>;
      275      275
      276      276             Multiple Alternative --
      277      277
      278      278               DO CASE(<expression>);
      279      279                 CASE(<constant list>);
      280      280                   <statement list>;
      281      281                 CASE(<constant list>);
      282      282                   <statement list>);
      283      283                        .
      284      284                        .
      285      285                        .
      286      286                 CASE(<constant list>);
      287      287                   <statement list>;
      288      288               END;
      289      289        */
      290      290        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:47   
      291      291        /*
      292      292        ITERATION:
      293      293
      294      294             Top-testing loop --
      295      295
      296      296               DO WHILE(<expression>);
      297      297                 <statement1>;
      298      298                 <statement2>;
      299      299                      .
      300      300                      .
      301      301                      .
      302      302                 <statementn>;
      303      303               END;
      304      304
      305      305             Bottom-testing loop --
      306      306
      307      307               DO UNTIL(<expression>);
      308      308                 <statement1>;
      309      309                 <statement2>;
      310      310                      .
      311      311                      .
      312      312                      .
      313      313                 <statementn>;
      314      314               END;
      315      315
      316      316             Counter-controlled loop --
      317      317
      318      318               DO <identifier> = <expression1> TO <expression2> [BY <expression3>];
      319      319                 <statement1>;
      320      320                 <statement2>;
      321      321                      .
      322      322                      .
      323      323                      .
      324      324                 <statement3>;
      325      325               END;
      326      326
      327      327               DO <identifier> = <expression1> DOWNTO <expression2> [BY <expression3>];
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:48   
      328      328                 <statement1>;
      329      329                 <statement2>;
      330      330                      .
      331      331                      .
      332      332                      .
      333      333                 <statement3>;
      334      334               END;
      335      335        */
      336      336        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:49   
      337      337        /*
      338      338             It is important to realize the proven advantage of indenting
      339      339             individual control structures to emphasize their relationship to
      340      340             other control structures.  Below is an example of how indentation
      341      341             of control structures improves the readability of program flow.
      342      342
      343      343
      344      344
      345      345             IF <expression> THEN
      346      346               DO WHILE(<expression>);
      347      347                 IF <expression> THEN
      348      348                   <statement>;
      349      349                 ELSE
      350      350                   <statement>;
      351      351               END;
      352      352             ELSE
      353      353               DO <expression> = <expression> TO <expression>;
      354      354                 IF <expression> THEN
      355      355                   DO CASE(<expression>);
      356      356                     CASE(<constant list>);
      357      357                       <statement list>;
      358      358                     CASE(<constant list list>);
      359      359                       <statement list>;
      360      360                   END;
      361      361               END;
      362      362
      363      363
      364      364
      365      365        NOTE: Indentations by two are recommended, due to limited screen width.
      366      366
      367      367        */
      368      368        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:50   
      369      369        /*F*
      370      370
      371      371               NAME: CALLS_WITH_ALTRETURN
      372      372        DESCRIPTION:     One of the clumsiest, unstructured constructs in PL6
      373      373                     is the ALTRET clause of the CALL statement.  Heavy use of this
      374      374                     "feature" is not recommended, however, many of the calls
      375      375                     to CP6 Monitor Services routines require specification of
      376      376                     ALTRET for error exits.  To make the structure of these
      377      377                     calls more acceptable, the following construct is suggested:
      378      378
      379      379
      380      380             CALL M$program(FPTN)
      381      381               WHENRETURN
      382      382                 DO;
      383      383                   <statements>
      384      384                 END;
      385      385               WHENALTRETURN
      386      386                 DO;
      387      387                   <statements>
      388      388                 END;
      389      389
      390      390
      391      391
      392      392
      393      393        */
      394      394        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:51   
      395      395        /*F*
      396      396
      397      397               NAME: SUB_PROCEDURES
      398      398        DESCRIPTION:     Just a few words about internal .vs. external
      399      399                     procedures.  The overhead involved during an external CALL
      400      400                     is generally more expensive than a CALL to an internal
      401      401                     procedure, especially if the number of passed parameters
      402      402                     is high.  I don't want to imply that, as a rule, internal
      403      403                     should be used over external.  The reason is that PL6
      404      404                     does not allow direct recursion of internal procedures.
      405      405                     This can start a devastating snowball effect if it becomes
      406      406                     a requirement that an internal procedure suddenly become recursive.
      407      407                     That procedure, and any internal procedures that it may
      408      408                     call must also become external, and so on.
      409      409
      410      410        */
      411      411        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:52   
      412      412        /*F*
      413      413
      414      414               NAME: EXTRACT
      415      415          REFERENCE: "Listing Commentary Standards" AF #91E-0
      416      416        DESCRIPTION: All of the COBOL85 maintenance documentation will be
      417      417                     created and maintained as commentary within the modules that
      418      418                     compose the Compiler.  Each phase will have one module
      419      419                     that will contain nothing but commentary.  A tool in
      420      420                     the CP-6 X account called EXTRACT will yank all of
      421      421                     these comments into a single data base that can then be
      422      422                     inspected by all project members.
      423      423
      424      424
      425      425                     It should be mentioned that this document in no way is
      426      426                     intended to be a comprehensive explanation of EXTRACT.  It
      427      427                     is intended for reference of the COBOL85 project members,
      428      428                     and describes solely the features pertinant to the
      429      429                     documentation of the COBOL85 implementation.
      430      430
      431      431        */
      432      432        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:53   
      433      433        /*F*
      434      434
      435      435               NAME: COMMENT_FORMATION
      436      436          REFERENCE: "Listing Commentary Standards" AF #91E-0
      437      437        DESCRIPTION: The format for an EXTRACTable comment is::
      438      438
      439      439           <comment start><comment type><text><comment end>
      440      440
      441      441        Note:
      442      442              The <comment start> in PL6 is "slash star", the <comment end>
      443      443              "star slash."  From now on, when it is necessary to place a
      444      444              comment within a comment (as in this document), <comment start>
      445      445              will be specified as "/ *" and <comment end> "* /" (we don't
      446      446              want PL6 to mistake our comments as PL6 source).
      447      447
      448      448
      449      449           SUMMARY OF PERTINANT COMMENT TYPES --
      450      450
      451      451          M*   One-line module definition
      452      452          T*   Copyright notice
      453      453          P*   Overview of module
      454      454          F*   Overview of major code group or module
      455      455          V*   Functional code group technical overview
      456      456          D*   Detail of ENTRY point or PROCedure
      457      457          I*   Detail of internal subroutine
      458      458          E*   Error code and message
      459      459          B*   Data item description
      460      460          N*   Need code for deferred feature
      461      461        */
      462      462        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:54   
      463      463        /*
      464      464            RULES FOR USING COMMENT TYPES --
      465      465
      466      466
      467      467        Type M*   A one line description of each module.  It must be the first
      468      468                  line within each module.  Only one M* should appear per
      469      469                  module (file).  The format is:
      470      470
      471      471                        M* name description
      472      472
      473      473                  note: The description is optional if it is superfluous.
      474      474
      475      475        Type T*  This is for the copyright notice, and should appear immediately
      476      476                 following the M* comment type.  A standard copyright notice
      477      477                 exists in account .C80C80 that you can MERGE into your files
      478      478                 using the CP6 EDIT command MERGE as follows:
      479      479
      480      480                     MERGE COPYRIGHT.C80C80,1-5 INTO RECEIVING_FILE,start,incr
      481      481
      482      482                 where:
      483      483
      484      484                 start -  is the lowest key of starting range.
      485      485                 incr   - is the increment for target range.
      486      486
      487      487        Type P*  Preamble report to a module or file.  This preamble should
      488      488                 describe the purpose of the module.  The keywords are:
      489      489
      490      490                    NAME: The first string encountered should be this keyword.
      491      491                          Although EXTRACT doesn't enforce its presence, we should
      492      492                          supply it for clarity.  This module name will be used for
      493      493                          sorting the report.
      494      494
      495      495                 PURPOSE: A brief, concise explanation of the function performed.
      496      496                          No nitty gritty details should be supplied here.
      497      497
      498      498        Type F*  Overview report of major code group (eg: Phase 3).  The
      499      499                 Cobol85 project uses this report type only in documentation
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:55   
      500      500                 modules (eg: Z8AD, Z8GD, Z8ID, Z9ID).  This report includes
      501      501                 purpose, method, references, significant features or
      502      502                 limitations of the code.  The keywords for this report are::
      503      503
      504      504                        NAME: Module or funtion name. This keyword is required
      505      505                              for type F comments.
      506      506
      507      507                     PURPOSE: Same as for P*, however, if there exists a P* comment
      508      508                              right before this F*, it need not be supplied again.
      509      509
      510      510                 DESCRIPTION: The details of how the PURPOSE is accomplished.
      511      511
      512      512                   REFERENCE: Manuals, specifications, or a cross-reference
      513      513                              to other items within our COBOL85 EXTRACT
      514      514                              data base (reference USING_EXTRACT).
      515      515
      516      516        Type V*  Functional code group technical overview.  No keywords are
      517      517                 recognized.  Should be used to describe 2-15 lines of code at a
      518      518                 time.  The first word of the comment is taken as the
      519      519                 name, so provide a one word "heading", or maybe a couple of
      520      520                 words separated by underscores.  This name is the only hint
      521      521                 that a user will have as to what the comment contains when they
      522      522                 are perusing through the EXTRACT data base.
      523      523
      524      524        Type D*  These are the detail reports, and are required for every entry
      525      525                 point (not internal subroutines) with the following exception.
      526      526                 If a routine contains more than one entry point, but the details
      527      527                 are almost identical, only one detail report is needed, and
      528      528                 the keyword ENTRY: is used to define the multiple entry points.
      529      529                 EXTRACT will duplicate the D* report with each  entry in
      530      530                 sorted order.  The D* comments should appear at point of entry.
      531      531                 They include the information necessary for the user to know
      532      532                 how to use the routine, and what to expect of it in the way
      533      533                 of usage, interfaces, input, output, etc.  See keywords.  At
      534      534                 the actual point of entry, repeat the ENTRY: and the keyword
      535      535                 and paragraph that makes the ENTRY different from the D* comments
      536      536                 to be repeated.  EXTRACT can then duplicate the full D*
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:56   
      537      537                 comments and substitute the information that makes it unique.
      538      538                 The keywords are:
      539      539
      540      540                        NAME: Same as for P* and F*.  We should enforce the
      541      541                              presence of this keyword.
      542      542
      543      543                       ENTRY: Used for sorting.  Needed only if multiple entries
      544      544                              require the same detail report.
      545      545
      546      546                        CALL: Calling sequence for this routine, i.e., how is
      547      547                              this routine called.
      548      548
      549      549                   INTERFACE: Which routines does this routine call?
      550      550
      551      551                       INPUT: Data accessed to perform function.
      552      552
      553      553                      OUTPUT: Data altered and intended as the result of this
      554      554                              operation/routine.
      555      555
      556      556                     SCRATCH: Data altered, but not intended as results (side effect).
      557      557
      558      558                 DESCRIPTION: What does it actually do and how.
      559      559
      560      560
      561      561        Type I*  Internal subroutines can be documented like the D* comment
      562      562                 type; the keywords are the same.
      563      563
      564      564        Type E*  The error code report.  It must include all error messages visible
      565      565                 to the outside world.  The keywords are:
      566      566
      567      567                       ERROR: Name that is the same as the corresponding pre-processor
      568      568                              %EQU in include file Z8A_ERR_NUMS.
      569      569
      570      570                     MESSAGE: The error message text.  Should be at least close
      571      571                              to what will actually appear to the user.
      572      572
      573      573                 DESCRIPTION: Why the error was issued.
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:57   
      574      574
      575      575        Type B*  This is the data definition report.  It should be placed before
      576      576                 the definition of major data items used, both intra-module
      577      577                 data, and especially inter-module communication data.
      578      578                 There are no keywords recognized in this report, the comment
      579      579                 name will be the first non-blank string encountered.
      580      580
      581      581        Type N*  This is where code is to be added to implement features that are
      582      582                 being postponed for future iterations of the compiler.  Because
      583      583                 of the staging of the compiler, known features are postponed, but
      584      584                 it might be easier to flag where they should be implemented
      585      585                 in the module rather than figuring it out later.  The format is:
      586      586
      587      587                           N* keyword description
      588      588
      589      589
      590      590
      591      591               There are things that one must be aware of when using these
      592      592             comments.
      593      593
      594      594
      595      595             1. EXTRACT will usually associate some name to the comment.  The
      596      596                method that it uses varies with the comment type as follows:
      597      597
      598      598                        M*,P*  - Not needed
      599      599                        F*,I*  - Keyword (NAME:) required
      600      600                        D*     - Keyword (NAME:) optional.  If absent, previous
      601      601                                 D* name is used, or none
      602      602                        V*,B*  - First word of comment
      603      603                        E*     - Keyword (ERROR:) required
      604      604                        N*     - Not extracted at all
      605      605
      606      606
      607      607             2.  EXTRACT does not enforce any capitalization policy beyond
      608      608                 the fact that all keywords must be in upper case; however, in
      609      609                 order that anyone can cross reference our EXTRACT data base
      610      610                 (regardless of upper/lower case capability), we should always
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:58   
      611      611                 make keywords and comment names upper case.  The body of all
      612      612                 comments should be upper/lower case.
      613      613
      614      614             3.  Lines will be EXTRACTed without leading or trailing blanks,
      615      615                 leading-asterisks, or comment definition characters with the following
      616      616                 exceptions:
      617      617
      618      618                   a).  Leading character stripping stops at the position of the
      619      619                        first non-blank or non-* of the packet (usually NAME:).
      620      620
      621      621             ***   b).  Leading * and blank stripping is suppressed following a
      622      622                        line ending in a double full colon (::).  Comment definition
      623      623                        is always stripped.
      624      624
      625      625        */
      626      626        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:59   
      627      627        /*F*
      628      628
      629      629               NAME: EXTRACT_COMMANDS
      630      630          REFERENCE: File HELP:EXTRACT: in the CP-6 X account.
      631      631        DESCRIPTION::
      632      632
      633      633            Commands understood by EXTRACT --
      634      634
      635      635
      636      636             DA[TA_BASE]                 Opens a data base
      637      637             EX[TRACT]                   Extracts comments from source
      638      638             XL[IST]                     Extracts comments from source by listfile
      639      639             OU[TPUT]                    Changes output destination
      640      640             RE[PORT]                    Displays entries in the data base
      641      641             WH[AT]                      Lists names of entries in the data base
      642      642             DE[LETE]                    Deletes entries from the data base
      643      643             DF[IL]                      Deletes entire data base
      644      644             HE[LP]                      Reports help information
      645      645             DO[CUMENT]                  Creates P, F, D document
      646      646             QU[IT]                      Exits EXTRACT
      647      647             E[ND]                       Exits EXTRACT
      648      648             X                           Exits EXTRACT
      649      649
      650      650
      651      651        <*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*><*>
      652      652
      653      653        DATA_BASE name[.account]
      654      654
      655      655             Name must be less than 27 characters.  If account is not specified,
      656      656             the current account is assumed.
      657      657
      658      658        EXTRACT fid[.account]   (fid is a COBOL85 "SI" file)
      659      659
      660      660             EXTRACTs from the source file onto the data base.
      661      661
      662      662        XLIST fid[.account]
      663      663
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:60   
      664      664             EXTRACTs comments from all files listed (one per line) in fid.
      665      665
      666      666        OUTPUT fid
      667      667
      668      668             Directs subsequent EXTRACT output to fid. Works only for REPORT,
      669      669             WHAT, and DELETE.
      670      670
      671      671        REPORT options
      672      672        WHAT options
      673      673        DELETE options
      674      674
      675      675             options -- separated by commas, only one of each.
      676      676
      677      677             TYPE list  (where list selects what comment types are to be
      678      678                         reported, e.g. TYPE MFDI)
      679      679
      680      680                        possible types:  V, M, P, F, D, I, E, B.
      681      681
      682      682             LINE [[start]-end]  selects source file numbers, start <= end <= 999999.
      683      683                                 end = start if absent.
      684      684
      685      685             MODULE name   selects by module source file name
      686      686
      687      687             NAME name     selects by comment name
      688      688
      689      689        A "?" may appear as a suffix for name or module to specify a prefix.
      690      690
      691      691             DF     Deletes the current data base (there are no safeguards).
      692      692
      693      693             DOCUMENT FID1,FID2     Uses FID1 to create FID2.
      694      694
      695      695                    FID1 is a file containing 3 lines.
      696      696                    FID2 will be the result (used in an IFI TEXT command).
      697      697                    For example, to create a Phase 3 document; first
      698      698                    create a data base containing the Phase 3 comments,
      699      699                    then create an FID1 as follows:
      700      700                         SECTION=3
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:61   
      701      701                         HEADING=Ye Olde Global Optimizer
      702      702                         ?
      703      703                    then exit EXTRACT, and use TEXT to print the
      704      704                    document: TEXT O3DOCUMENT, where O3DOCUMENT
      705      705                    contains the following TEXT commands:
      706      706                         .pd 66,79  (or 40,99 for our printer)
      707      707                         .vm 2,2,1,1
      708      708                         .ifi FID2
      709      709                    Note that there are a couple of problems with
      710      710                    the DOCUMENT command: (1) comment lines are
      711      711                    not aligned as they were in the original source
      712      712                    file, and (2) non-standard keywords are not
      713      713                    recognized (eg: AUTHOR:).
      714      714
      715      715        */
      716      716        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:62   
      717      717        /*F*
      718      718
      719      719               NAME: USING_EXTRACT
      720      720        DESCRIPTION: In order to EXTRACT comments from all "_SI" files in the .C80C80
      721      721                     account, and create (or augment) the .C80C80 EXTRACT data
      722      722                     base COBOL85_EXTRACT.C80C80, use this command::
      723      723
      724      724                           !XEQ EXTRACT.C80C80
      725      725
      726      726                     To EXTRACT comments from just your own "_SI" files, XEQ this file
      727      727                     after changing Z?H?_SI to reflect your phase (Z?I?_SI for
      728      728                     the Annotator, Z?E?_SI for phase 1), and "GEN" to your
      729      729                     phase prefix (ANN for Annotator, LEX for phase 1).
      730      730
      731      731
      732      732        !L (C=0) Z?H?_SI OVER *ALL_SI    "list all SIs into temp file"
      733      733        !E *ALL_SI                       "delete extraneous info"
      734      734        C *ALL_SI                        "make file keyed file"
      735      735        TY99999                          "locate end-of-file"
      736      736        ^                                "locate last line of file"
      737      737        DE                               "delete xxx files listed message"
      738      738        END                              "exit edit"
      739      739        !EXTRACT.X                       "extract comments from all those files"
      740      740        DATA_BASE GEN_EXTRACT
      741      741        XLIST *ALL_SI
      742      742        END
      743      743
      744      744
      745      745
      746      746                     Once the data base has been created, we can go under EXTRACT
      747      747                     by typing:
      748      748
      749      749                          !EXTRACT.X
      750      750
      751      751                     EXTRACT will prompt you with an asterisk and a bleep.
      752      752
      753      753                     Before we can do much of anything under EXTRACT, we must first
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:63   
      754      754                     define the data base that it is to use:
      755      755
      756      756                          *DATA_BASE GEN_EXTRACT
      757      757
      758      758                     For this example, we will use the existing
      759      759                     Generator data base GEN_EXTRACT.
      760      760
      761      761                     In order to find out what is on the data base, we can issue
      762      762                     the WHAT command, that will produce the following results:
      763      763
      764      764
      765      765
      766      766
      767      767          Module Name                    Line# T Comment Name.
      768      768          Z8HC_SI                            1 M
      769      769          Z8HC_SI                            7 P
      770      770          Z8HC_SI                          192 V CVRQ
      771      771          Z8HC_SI                          229 V LINOI
      772      772          Z8HC_SI                          116 V MPI
      773      773          Z8HC_SI                          154 V MVAN
      774      774          Z8HC_SI                           69 V SIZ
      775      775          Z8HC_SI                           73 V SSOP
      776      776          Z8HC_SI                           14 F Z8HC$SPECIAL_CASES
      777      777          Z8HC_SI                          247 I Z8HC$SPECIAL_CASES BUFFER_TOP_SSOPS
      778      778          Z8HD_SI                            1 M
      779      779          Z8HD_SI                           10 P
      780      780          Z8HD_SI                          143 F FORMAT_OF_GENERATOR_INPUT
      781      781          Z8HD_SI                          229 F FORMAT_OF_GENERATOR_INPUT_CONT
      782      782          Z8HD_SI                           45 F METHOD
      783      783          Z8HD_SI                           17 F PURPOSE
      784      784          Z8HI_SI                            1 M
      785      785          Z8HI_SI                            9 P
      786      786          Z8HI_SI                          950 V ADD
      787      787          Z8HI_SI                          931 V AND
      788      788          Z8HI_SI                          306 V ASSIGN
      789      789          Z8HI_SI                          449 V BURST
      790      790          Z8HI_SI                          822 V CASE
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:64   
      791      791          Z8HI_SI                          833 V DEFER
      792      792          Z8HI_SI                          726 V DSTATE
      793      793          Z8HI_SI                          164 V INITIALIZE
      794      794          Z8HI_SI                          196 V LOOP
      795      795          Z8HI_SI                          663 V MAPT
      796      796          Z8HI_SI                          897 V MOVE
      797      797          Z8HI_SI                          917 V MOVIND
      798      798          Z8HI_SI                          874 V PSEUDO-CODE_UTILITIES
      799      799          Z8HI_SI                          478 V REF
      800      800          Z8HI_SI                         1010 V SELECT
      801      801          Z8HI_SI                          175 V SET_IDEAL_REGISTER
      802      802          Z8HI_SI                          963 V SHIFTL
      803      803          Z8HI_SI                          971 V SHIFTR
      804      804          Z8HI_SI                          209 V SUPPORT_ACTIONS
      805      805          Z8HI_SI                          854 V WRAPUP
      806      806          Z8HI_SI                           16 D Z8HI$BURST
      807      807          Z8HI_SI                         1278 I Z8HI$BURST PICK_REGISTER
      808      808          Z8HI_SI                         1816 D Z8HI$BURST Z8HI$CHECK
      809      809          Z9AU_SI                            1 M
      810      810          Z9AU_SI                           18 P
      811      811          Z9AU_SI                           55 D Z8HO NEGOFF
      812      812          Z9AU_SI                           22 D Z8HO POSOFF
      813      813          Z8HP_SI                            1 M
      814      814          Z8HP_SI                            9 P
      815      815          Z8HP_SI                         2236 V ADEP
      816      816          Z8HP_SI                          224 V TRIAD
      817      817          Z8HP_SI                         2465 B Z8HP PCOM
      818      818          Z8HP_SI                           51 B Z8HP PEPD
      819      819          Z8HR_SI                            1 M
      820      820          Z8HR_SI                            8 P
      821      821          Z8HR_SI                           58 V ESCAPE
      822      822          Z8HR_SI                           44 V INIT
      823      823          Z8HR_SI                           14 F Z8HR$CODE_GENERATOR
      824      824
      825      825
      826      826
      827      827
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:65   
      828      828             The following lines are the result of this command:
      829      829
      830      830                *REPORT TYPE P
      831      831
      832      832
      833      833
      834      834          Module Name                    Line# T Comment Name.
      835      835          Z8HC_SI                            7 P
      836      836        NAME: Z8HC$SPECIAL_CASES
      837      837        PURPOSE: To provide special case functions that cannot otherwise
      838      838              be performed by existing pseudo-code directives.
      839      839
      840      840          Z8HD_SI                           10 P
      841      841        NAME: Z8HD$DOCUMENT
      842      842        PURPOSE: Explains the major portions of the Code Generator:
      843      843              Register Management, System Dependent code bursts, etc.
      844      844
      845      845          Z8HI_SI                            9 P
      846      846        NAME: Z8HI$BURST
      847      847        PURPOSE: To interpret PSEUDO-CODE.
      848      848
      849      849
      850      850          Z9AU_SI                           18 P
      851      851        NAME: Z9AU
      852      852        PURPOSE: Add or subtract various units from a descriptor.
      853      853          Z8HP_SI                            9 P
      854      854        NAME: Z8HP
      855      855        PURPOSE: Provides directive data for each unique triad.  This
      856      856                 data is interpreted by routine Z8HI$BURST.
      857      857          Z8HR_SI                            8 P
      858      858        NAME: Z8HR$CODE_GENERATOR
      859      859        PURPOSE: Controls the Code Generator. Does initialization, and steps
      860      860              through the major internal tables.
      861      861
      862      862
      863      863
      864      864
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:66   
      865      865
      866      866             The best learning tool is for each member to create a data base of
      867      867             his/her/its own, and start REporting entries within that data
      868      868             base to see what the user will eventually be working with.  If things
      869      869             don't look so hot, experiment with different comment formation
      870      870             schemes until it does look hot.
      871      871        */
      872      872        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:67   
      873      873        /*F*
      874      874
      875      875               NAME: EXTRACT_EXAMPLES
      876      876        DESCRIPTION: Now that we know the EXTRACT comment types, we can address
      877      877                     how to put them all to work so that the information appears
      878      878                     in the right places in the data base.  For example, if someone
      879      879                     REports all the type P* comments for a given phase, they
      880      880                     don't expect to find an explanation of how bits drop into
      881      881                     the "bit bucket", instead, they expect merely to be notified
      882      882                     of the overall purpose of each module.  Therefore, each module
      883      883                     must have one, short P* comment.
      884      884
      885      885
      886      886                     In order that we may create a complete and useful data base,
      887      887                     we must supply specific information under mandatory comment
      888      888                     reports.
      889      889
      890      890                     Use this comment sequence in your PL6 programs:
      891      891
      892      892
      893      893        / *M* MODULE NAME   Very short description                       * /
      894      894        / *T**************************************************************
      895      895          *T*                                                            *
      896      896          *T* Copyright, (c) Bull HN Information Systems, Inc., 1993     *
      897      897          *T*                                                            *
      898      898          *T************************************************************** /
      899      899        / *P*
      900      900               NAME: module name
      901      901            PURPOSE: One or two sentences describing the module's purpose
      902      902        * /
      903      903
      904      904        / *D*
      905      905               NAME: module name
      906      906               CALL: CALL Z8HI$BURST(=VAR1,VAR2=);
      907      907              INPUT: VAR1
      908      908                       What is this thing you just passed?
      909      909             OUTPUT: VAR2
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:68   
      910      910                       What is this thing that you're going to return?
      911      911               DATA: What data do you use here?
      912      912            SCRATCH: What data do you destroy as a side effect?
      913      913          REFERENCE: Can I find any information on this elsewhere?
      914      914        DESCRIPTION: All of the details.
      915      915
      916      916         * /
      917      917        Z8HI$BURST:PROC(VAR1,VAR2);
      918      918
      919      919
      920      920             .
      921      921             .
      922      922             %INCLUDE FILE1;
      923      923             %INCLUDE FILE2;
      924      924             .
      925      925             .
      926      926
      927      927        / *B*
      928      928             PEPD -- A pseudo-code entry point descriptor word that describes
      929      929                     the pseudo-code module and offset within that module where
      930      930                     interpretation is to begin.
      931      931        * /
      932      932
      933      933             .
      934      934             .
      935      935
      936      936             IC = PINCRW(PSEUDO_CODE_MODULE(DESCRIPTOR.MODULE),DESCRIPTOR.OFFSET);
      937      937
      938      938             .
      939      939             .
      940      940
      941      941        / *V*
      942      942             LOOP -- This begins the interpretation loop.  The only way out of
      943      943                     the loop is via a QUIT directive (action %QUIT).
      944      944        * /
      945      945        LOOP:
      946      946             DO WHILE('1'B);
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:69   
      947      947               PC = IC -> BASED_DOUBLEWORD;
      948      948               .
      949      949               .
      950      950               .
      951      951
      952      952               DO CASE(VAR3);
      953      953               .
      954      954               .
      955      955               CASE(%ASSIGN);
      956      956
      957      957        / *F*
      958      958
      959      959               NAME: ASSIGN
      960      960            PURPOSE: Drives register management from the Pseudo-code level.
      961      961        DESCRIPTION: Details, details, details.
      962      962
      963      963        * /
      964      964        END Z8HI$BURST;
      965      965
      966      966
      967      967
      968      968        */
      969      969    1   END Z8AD$DOCUMENT;
      970      970        %EJECT;
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:70   

PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:71   
      No diagnostics issued in procedure Z8AD$DOCUMENT.
PL6.E3A0      #001=Z8AD$DOCUMENT File=Z8AD.:Z8A6TSI                              SAT 08/09/97 10:41 Page:72   

 **** Variables and constants ****


   No code generated for procedure Z8AD$DOCUMENT .
   Procedure Z8AD$DOCUMENT is declared NOAUTO and requires 2 words of local(STATIC) storage.

    No errors detected in file Z8AD.:Z8A6TSI    .
