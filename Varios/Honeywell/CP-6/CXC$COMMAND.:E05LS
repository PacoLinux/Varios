VERSION E05

PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:1    
        1        1        /*M*  CXC$COMMAND    Parse and process common command-processor commands */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*P*  NAME:    CXC$GETCMD
        8        8              PURPOSE: Top level driver for those command-processor commands which
        9        9                       are available through the CPSL (command processor shared
       10       10                       library).
       11       11        */
       12       12
       13       13        CXC$COMMAND: PROC (XUG_GETCMD, CPSL_COMMAND_PARAMETERS) ALTRET;
       14       14
       15       15        /*F*  NAME:    CXC$COMMAND
       16       16              FUNCTION: Acts as a parse driver / routine driver for the SET, RESET,
       17       17                       ADJUST, LDEV, PRINT, and ERASE commands.
       18       18        */
       19       19
       20       20        /*D*  NAME:    CXC$COMMAND
       21       21              CALL:    CALL CXC$COMMAND (getcmd_structure, work_DCB_number)
       22       22                          ALTRET (error_in_command);
       23       23              INPUT:   "getcmd_structure" is an XUG_GETCMD structure (from XU_MACRO_C)
       24       24                       which specifies (at least the first line of) an IBEX command
       25       25                       (SET, RESET, ADJUST, LDEV, PRINT, or ERASE), plus any other
       26       26                       information and parameters necessary to successfully define the
       27       27                       parsing environment (e.g., input and output DCB numbers).
       28       28
       29       29                       "work_DCB_number" is a UBIN WORD containing a DCB number;  the
       30       30                       indicated DCB will be used to read/write/delete records in the
       31       31                       *A file.  The indicated DCB should be closed on entry to
       32       32                       CXC$COMMAND (and will be forced closed on entry, if open), and
       33       33                       will be left closed on exit.
       34       34              OUTPUT:  If the indicated IBEX command was correct as supplied,
       35       35                       CXC$COMMAND will return normally after executing the command.
       36       36                       If any error has occurred during the parsing or executing of
       37       37                       the command, CXC$COMMAND will altreturn;  the cause of the error
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:2    
       38       38                       will be reflected in the error field in the XUG_GETCMD
       39       39                       structure.
       40       40              DESCRIPTION: This routine drives the parsing and execution of commands
       41       41                       which are common to all command processors (e.g. IBEX and TPCP).
       42       42                       It calls CXG$GETCMD to parse the command, and then calls the
       43       43                       appropriate CXB$whatever service routine (e.g. CXB$SET), which
       44       44                       executes the command.
       45       45              ENVIRONMENT: This routine lives in the command processor shared library
       46       46                       (CPSL) and must adhere to the restrictions placed on command
       47       47                       processors, debuggers, ASLs, etc. (no static data).
       48       48        */
       49       49
       50       50        %INCLUDE B$JIT;
       51      340        %INCLUDE CP_6;
       52      421        %INCLUDE CP_6_SUBS;
       53      961        %INCLUDE CX_MACROS_M;
       54     1012        %INCLUDE CX_SUBS_C;
       55     1025        %INCLUDE CX_ISUBS_C;
       56     1377        %INCLUDE XU_MACRO_C;
       57     4483        %INCLUDE XU_SUBS_C;
       58     4575        %EJECT;
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:3    
       59     4576        %XUG_GETCMD   (NAME=XUG_GETCMD, STCLASS=PARAM);
       60     4914        %CPSL_COMMAND_PARAMETERS (NAME=CPSL_COMMAND_PARAMETERS, STCLASS=PARAM);
       61     4932
       62     4933        %FPT_CLOSE (FPTN=FPT_CLOSE_CONSTANT, STCLASS=CONSTANT);
       63     4975        %FPT_CLOSE (FPTN=FPT_CLOSE_AUTO, STCLASS=AUTO);
       64     5017
       65     5018        %B$TCB (STCLASS="BASED(B$TCB$)");
       66     5021        %B$ALT;
       67     5029        %F$DCB;
       68     5086        %PARSE$OUT (NAME=OUT$BLK, STCLASS=BASED);
       69     5131        %P_PCB (STCLASS=BASED);
       70     5330
       71     5331    1   DCL B$JIT$ PTR SYMREF READONLY;
       72     5332    1   DCL B$TCB$ PTR SYMREF READONLY;
       73     5333    1   DCL CPSL_NODES BIT (36) SYMREF READONLY;
       74     5334    1   DCL USER_SUCCESS_FAIL_ROUTINE$$ EPTR;
       75     5335
       76     5336    1   DCL CXB$ADJUST ENTRY (2);
       77     5337    1   DCL CXB$ERASE ENTRY (2);
       78     5338    1   DCL CXB$HOLD ENTRY (2);
       79     5339    1   DCL CXB$LDEV ENTRY (2);
       80     5340    1   DCL CXB$PRINT ENTRY (2);
       81     5341    1   DCL CXB$RESET ENTRY (2);
       82     5342    1   DCL CXB$SET ENTRY (2);
       83     5343    1   DCL CXF$TERMINAL ENTRY (2);
       84     5344    1   DCL CXB$UNHOLD ENTRY (2);
       85     5345
       86     5346        %INCLUDE CXG_ENTRY;
       87     5358
       88     5359    1   DCL CX_NODES5_D ENTRY CONV (5);      /* Force LINK to UNSAT-search the nodes */
       89     5360        %EJECT;
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:4    
       90     5361    1      USER_SUCCESS_FAIL_ROUTINE$$ = XUG_GETCMD.SFROUTINE$;
       91     5362    1      XUG_GETCMD.SFROUTINE$ = ENTADDR(NIL);
       92     5363    1      XUG_GETCMD.NODES$ = ADDR(CPSL_NODES);
       93     5364
       94     5365    1      CPSL_COMMAND_PARAMETERS.ERRCODE = '0'B;
       95     5366    1      CPSL_COMMAND_PARAMETERS.ERR_CPOS = 0;
       96     5367    1      CPSL_COMMAND_PARAMETERS.ERR_DCB# = DCBNUM(NIL);
       97     5368    1      CPSL_COMMAND_PARAMETERS.FLAGS.REPORTED_TO_USER = %NO#;
       98     5369
       99     5370    1      CALL CLOSE_WORK_DCB ALTRET (RESTORE_AND_ALTRETURN);
      100     5371
      101     5372    1      XUG_GETCMD.PASS = %BLANK_PASS#;
      102     5373
      103     5374    1      CALL CXG$GETCMD (XUG_GETCMD) ALTRET (PARSE_ERROR);
      104     5375
      105     5376    1      IF CPSL_COMMAND_PARAMETERS.FLAGS.ECHO = %ECHO_IT
      106     5377    2        THEN DO;
      107     5378
      108     5379    2         CPSL_COMMAND_PARAMETERS.FLAGS.ECHO = %DONT_ECHO;
      109     5380    2         XUG_GETCMD.DCB_PARAM# = XUG_GETCMD.OUTDCB# ;
      110     5381
      111     5382    2         CALL CXG$ECHO (XUG_GETCMD);
      112     5383
      113     5384    2         END;
      114     5385
      115     5386    1      IF XUG_GETCMD.OUT$->OUT$BLK.TEMP
      116     5387    1        THEN
      117     5388    1         XUG_GETCMD.OUT$ = XUG_GETCMD.OUT$ -> OUT$BLK.SUBLK$(1) ;
      118     5389
      119     5390    2      DO CASE (XUG_GETCMD.OUT$ -> OUT$BLK.CODE);
      120     5391
      121     5392    2        CASE (SETCMND);
      122     5393
      123     5394    2         CALL CXB$SET (XUG_GETCMD, CPSL_COMMAND_PARAMETERS);
      124     5395
      125     5396    2        CASE (RESETCMND);
      126     5397
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:5    
      127     5398    2         CALL CXB$RESET (XUG_GETCMD, CPSL_COMMAND_PARAMETERS);
      128     5399
      129     5400    2        CASE (ADJUSTCMND);
      130     5401
      131     5402    2         CALL CXB$ADJUST (XUG_GETCMD, CPSL_COMMAND_PARAMETERS);
      132     5403
      133     5404    2        CASE (LDEVCMND);
      134     5405
      135     5406    2         CALL CXB$LDEV (XUG_GETCMD, CPSL_COMMAND_PARAMETERS);
      136     5407
      137     5408    2        CASE (ERASECMND);
      138     5409
      139     5410    2         CALL CXB$ERASE (XUG_GETCMD, CPSL_COMMAND_PARAMETERS);
      140     5411
      141     5412    2        CASE (HOLDCMND);
      142     5413
      143     5414    2         CALL CXB$HOLD (XUG_GETCMD, CPSL_COMMAND_PARAMETERS);
      144     5415
      145     5416    2        CASE (PRINTCMND);
      146     5417
      147     5418    2         CALL CXB$PRINT (XUG_GETCMD, CPSL_COMMAND_PARAMETERS);
      148     5419
      149     5420    2        CASE (TERMINALCMND);
      150     5421
      151     5422    2         CALL CXF$TERMINAL (XUG_GETCMD, CPSL_COMMAND_PARAMETERS);
      152     5423
      153     5424    2        CASE (UNHOLDCMND);
      154     5425
      155     5426    2         CALL CXB$UNHOLD (XUG_GETCMD, CPSL_COMMAND_PARAMETERS);
      156     5427
      157     5428    2        CASE (ELSE);
      158     5429
      159     5430        /*N* do something to put in an error condition here */
      160     5431
      161     5432    2        END;
      162     5433
      163     5434    1      CALL CLOSE_WORK_DCB ALTRET (RESTORE_AND_ALTRETURN);
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:6    
      164     5435
      165     5436    1      XUG_GETCMD.SFROUTINE$ = USER_SUCCESS_FAIL_ROUTINE$$;
      166     5437
      167     5438    1      IF CPSL_COMMAND_PARAMETERS.ERRCODE ~= '0'B
      168     5439    1        THEN
      169     5440    1         ALTRETURN;
      170     5441    1        ELSE
      171     5442    1         RETURN;
      172     5443
      173     5444    1   PARSE_ERROR:
      174     5445
      175     5446    1      CPSL_COMMAND_PARAMETERS.ERRCODE = XUG_GETCMD.ERR#;
      176     5447    1      CPSL_COMMAND_PARAMETERS.ERR_CPOS = XUG_GETCMD.PCB$ -> P_PCB.HI_CHAR;
      177     5448
      178     5449    1   RESTORE_AND_ALTRETURN:
      179     5450
      180     5451    1      XUG_GETCMD.SFROUTINE$ = USER_SUCCESS_FAIL_ROUTINE$$;
      181     5452    1      ALTRETURN;
      182     5453
      183     5454        %EJECT;
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:7    
      184     5455    1   CLOSE_WORK_DCB: PROC ALTRET;
      185     5456
      186     5457    2      IF CPSL_COMMAND_PARAMETERS.WORK_DCB# ~= DCBNUM(NIL)
      187     5458    2        THEN
      188     5459    2         IF DCBADDR(CPSL_COMMAND_PARAMETERS.WORK_DCB#) -> F$DCB.FCD#
      189     5460    3           THEN DO;
      190     5461
      191     5462    3            FPT_CLOSE_AUTO = FPT_CLOSE_CONSTANT;
      192     5463    3            FPT_CLOSE_AUTO.V_ = VECTOR (FPT_CLOSE_AUTO.V);
      193     5464    3            FPT_CLOSE_AUTO.V.DCB# = CPSL_COMMAND_PARAMETERS.WORK_DCB#;
      194     5465
      195     5466    3            CALL M$CLOSE (FPT_CLOSE_AUTO)
      196     5467    4              WHENALTRETURN DO;
      197     5468
      198     5469    4               CPSL_COMMAND_PARAMETERS.ERRCODE = B$TCB.ALT$ -> B$ALT.ERR;
      199     5470    4               CPSL_COMMAND_PARAMETERS.ERR_DCB# = B$TCB.ALT$ -> B$ALT.DCB#;
      200     5471
      201     5472    4               ALTRETURN;
      202     5473
      203     5474    4               END;
      204     5475
      205     5476    3            END;
      206     5477
      207     5478    2      RETURN;
      208     5479
      209     5480    2   END CLOSE_WORK_DCB;
      210     5481
      211     5482    1   END CXC$COMMAND;

PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:8    
--  Include file information  --

   CXG_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   XU_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CX_ISUBS_C.:E05TOU  is referenced.
   CX_SUBS_C.:E05TOU  is referenced.
   CX_MACROS_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CXC$COMMAND.

   Procedure CXC$COMMAND requires 165 words for executable code.
   Procedure CXC$COMMAND requires 42 words of local(AUTO) storage.

    No errors detected in file CXC$COMMAND.:E05TSI    .

PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:9    

 Object Unit name= CXC$COMMAND                                File name= CXC$COMMAND.:E05TOU
 UTS= JUL 29 '97 12:21:15.08 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     30     36  CXC$COMMAND
    2   Proc  even  none   165    245  CXC$COMMAND
    3  RoData even  none     5      5  CXC$COMMAND

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        2  CXC$COMMAND
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:10   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 CX_NODES5_D
 yes     yes           Std       1 CXG$GETCMD
 yes     yes           Std       1 CXG$ECHO
         yes           Std       2 CXB$SET
         yes           Std       2 CXB$RESET
         yes           Std       2 CXB$LDEV
         yes           Std       2 CXB$HOLD
         yes           Std       2 CXB$ADJUST
         yes           Std       2 CXB$PRINT
         yes           Std       2 CXB$UNHOLD
         yes           Std       2 CXB$ERASE
         yes           Std       2 CXF$TERMINAL
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    B$JIT$                           r    B$TCB$
r    CPSL_NODES                            B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:11   


        1        1        /*M*  CXC$COMMAND    Parse and process common command-processor commands */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*P*  NAME:    CXC$GETCMD
        8        8              PURPOSE: Top level driver for those command-processor commands which
        9        9                       are available through the CPSL (command processor shared
       10       10                       library).
       11       11        */
       12       12
       13       13        CXC$COMMAND: PROC (XUG_GETCMD, CPSL_COMMAND_PARAMETERS) ALTRET;

     13  2 000000   000000 700200 xent  CXC$COMMAND  TSX0  ! X66_AUTO_2
         2 000001   000052 000002                    ZERO    42,2

       14       14
       15       15        /*F*  NAME:    CXC$COMMAND
       16       16              FUNCTION: Acts as a parse driver / routine driver for the SET, RESET,
       17       17                       ADJUST, LDEV, PRINT, and ERASE commands.
       18       18        */
       19       19
       20       20        /*D*  NAME:    CXC$COMMAND
       21       21              CALL:    CALL CXC$COMMAND (getcmd_structure, work_DCB_number)
       22       22                          ALTRET (error_in_command);
       23       23              INPUT:   "getcmd_structure" is an XUG_GETCMD structure (from XU_MACRO_C)
       24       24                       which specifies (at least the first line of) an IBEX command
       25       25                       (SET, RESET, ADJUST, LDEV, PRINT, or ERASE), plus any other
       26       26                       information and parameters necessary to successfully define the
       27       27                       parsing environment (e.g., input and output DCB numbers).
       28       28
       29       29                       "work_DCB_number" is a UBIN WORD containing a DCB number;  the
       30       30                       indicated DCB will be used to read/write/delete records in the
       31       31                       *A file.  The indicated DCB should be closed on entry to
       32       32                       CXC$COMMAND (and will be forced closed on entry, if open), and
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:12   
       33       33                       will be left closed on exit.
       34       34              OUTPUT:  If the indicated IBEX command was correct as supplied,
       35       35                       CXC$COMMAND will return normally after executing the command.
       36       36                       If any error has occurred during the parsing or executing of
       37       37                       the command, CXC$COMMAND will altreturn;  the cause of the error
       38       38                       will be reflected in the error field in the XUG_GETCMD
       39       39                       structure.
       40       40              DESCRIPTION: This routine drives the parsing and execution of commands
       41       41                       which are common to all command processors (e.g. IBEX and TPCP).
       42       42                       It calls CXG$GETCMD to parse the command, and then calls the
       43       43                       appropriate CXB$whatever service routine (e.g. CXB$SET), which
       44       44                       executes the command.
       45       45              ENVIRONMENT: This routine lives in the command processor shared library
       46       46                       (CPSL) and must adhere to the restrictions placed on command
       47       47                       processors, debuggers, ASLs, etc. (no static data).
       48       48        */
       49       49
       50       50        %INCLUDE B$JIT;
       51      340        %INCLUDE CP_6;
       52      421        %INCLUDE CP_6_SUBS;
       53      961        %INCLUDE CX_MACROS_M;
       54     1012        %INCLUDE CX_SUBS_C;
       55     1025        %INCLUDE CX_ISUBS_C;
       56     1377        %INCLUDE XU_MACRO_C;
       57     4483        %INCLUDE XU_SUBS_C;
       58     4575        %EJECT;
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:13   
       59     4576        %XUG_GETCMD   (NAME=XUG_GETCMD, STCLASS=PARAM);
       60     4914        %CPSL_COMMAND_PARAMETERS (NAME=CPSL_COMMAND_PARAMETERS, STCLASS=PARAM);
       61     4932
       62     4933        %FPT_CLOSE (FPTN=FPT_CLOSE_CONSTANT, STCLASS=CONSTANT);
       63     4975        %FPT_CLOSE (FPTN=FPT_CLOSE_AUTO, STCLASS=AUTO);
       64     5017
       65     5018        %B$TCB (STCLASS="BASED(B$TCB$)");
       66     5021        %B$ALT;
       67     5029        %F$DCB;
       68     5086        %PARSE$OUT (NAME=OUT$BLK, STCLASS=BASED);
       69     5131        %P_PCB (STCLASS=BASED);
       70     5330
       71     5331    1   DCL B$JIT$ PTR SYMREF READONLY;
       72     5332    1   DCL B$TCB$ PTR SYMREF READONLY;
       73     5333    1   DCL CPSL_NODES BIT (36) SYMREF READONLY;
       74     5334    1   DCL USER_SUCCESS_FAIL_ROUTINE$$ EPTR;
       75     5335
       76     5336    1   DCL CXB$ADJUST ENTRY (2);
       77     5337    1   DCL CXB$ERASE ENTRY (2);
       78     5338    1   DCL CXB$HOLD ENTRY (2);
       79     5339    1   DCL CXB$LDEV ENTRY (2);
       80     5340    1   DCL CXB$PRINT ENTRY (2);
       81     5341    1   DCL CXB$RESET ENTRY (2);
       82     5342    1   DCL CXB$SET ENTRY (2);
       83     5343    1   DCL CXF$TERMINAL ENTRY (2);
       84     5344    1   DCL CXB$UNHOLD ENTRY (2);
       85     5345
       86     5346        %INCLUDE CXG_ENTRY;
       87     5358
       88     5359    1   DCL CX_NODES5_D ENTRY CONV (5);      /* Force LINK to UNSAT-search the nodes */
       89     5360        %EJECT;
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:14   
       90     5361    1      USER_SUCCESS_FAIL_ROUTINE$$ = XUG_GETCMD.SFROUTINE$;

   5361  2 000002   200003 470500                    LDP0    @XUG_GETCMD,,AUTO
         2 000003   000033 236100                    LDQ     27,,PR0
         2 000004   200044 756100                    STQ     USER_SUCCESS_FAIL_ROUTINE$$,,AUTO

       91     5362    1      XUG_GETCMD.SFROUTINE$ = ENTADDR(NIL);

   5362  2 000005   000002 236000 xsym               LDQ     B_VECTNIL+2
         2 000006   000033 756100                    STQ     27,,PR0

       92     5363    1      XUG_GETCMD.NODES$ = ADDR(CPSL_NODES);

   5363  2 000007   000000 236000 3                  LDQ     0
         2 000010   000000 756100                    STQ     0,,PR0

       93     5364
       94     5365    1      CPSL_COMMAND_PARAMETERS.ERRCODE = '0'B;

   5365  2 000011   200004 471500                    LDP1    @CPSL_COMMAND_PARAMETERS,,AUTO
         2 000012   100002 450100                    STZ     2,,PR1

       95     5366    1      CPSL_COMMAND_PARAMETERS.ERR_CPOS = 0;

   5366  2 000013   100003 450100                    STZ     3,,PR1

       96     5367    1      CPSL_COMMAND_PARAMETERS.ERR_DCB# = DCBNUM(NIL);

   5367  2 000014   100004 450100                    STZ     4,,PR1

       97     5368    1      CPSL_COMMAND_PARAMETERS.FLAGS.REPORTED_TO_USER = %NO#;

   5368  2 000015   000001 236000 3                  LDQ     1
         2 000016   100001 356100                    ANSQ    1,,PR1

       98     5369
       99     5370    1      CALL CLOSE_WORK_DCB ALTRET (RESTORE_AND_ALTRETURN);
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:15   

   5370  2 000017   000177 701000 2                  TSX1    CLOSE_WORK_DCB
         2 000020   000173 702000 2                  TSX2    RESTORE_AND_ALTRETURN

      100     5371
      101     5372    1      XUG_GETCMD.PASS = %BLANK_PASS#;

   5372  2 000021   200003 470500                    LDP0    @XUG_GETCMD,,AUTO
         2 000022   000007 236100                    LDQ     7,,PR0
         2 000023   000002 376000 3                  ANQ     2
         2 000024   000040 276003                    ORQ     32,DU
         2 000025   000007 756100                    STQ     7,,PR0

      102     5373
      103     5374    1      CALL CXG$GETCMD (XUG_GETCMD) ALTRET (PARSE_ERROR);

   5374  2 000026   200003 630500                    EPPR0   @XUG_GETCMD,,AUTO
         2 000027   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000030   000000 701000 xent               TSX1    CXG$GETCMD
         2 000031   000164 702000 2                  TSX2    PARSE_ERROR

      104     5375
      105     5376    1      IF CPSL_COMMAND_PARAMETERS.FLAGS.ECHO = %ECHO_IT

   5376  2 000032   200004 470500                    LDP0    @CPSL_COMMAND_PARAMETERS,,AUTO
         2 000033   000001 236100                    LDQ     1,,PR0
         2 000034   000777 376007                    ANQ     511,DL
         2 000035   000002 116007                    CMPQ    2,DL
         2 000036   000050 601000 2                  TNZ     s:5386

      106     5377    2        THEN DO;

      107     5378
      108     5379    2         CPSL_COMMAND_PARAMETERS.FLAGS.ECHO = %DONT_ECHO;

   5379  2 000037   000000 236003                    LDQ     0,DU
         2 000040   000001 552104                    STBQ    1,'04'O,PR0
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:16   

      109     5380    2         XUG_GETCMD.DCB_PARAM# = XUG_GETCMD.OUTDCB# ;

   5380  2 000041   200003 471500                    LDP1    @XUG_GETCMD,,AUTO
         2 000042   100013 235100                    LDA     11,,PR1
         2 000043   100014 755100                    STA     12,,PR1

      110     5381
      111     5382    2         CALL CXG$ECHO (XUG_GETCMD);

   5382  2 000044   200003 630500                    EPPR0   @XUG_GETCMD,,AUTO
         2 000045   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000046   000000 701000 xent               TSX1    CXG$ECHO
         2 000047   000000 011000                    NOP     0

      112     5383
      113     5384    2         END;

      114     5385
      115     5386    1      IF XUG_GETCMD.OUT$->OUT$BLK.TEMP

   5386  2 000050   200003 470500                    LDP0    @XUG_GETCMD,,AUTO
         2 000051   000001 471500                    LDP1    1,,PR0
         2 000052   100000 234100                    SZN     0,,PR1
         2 000053   000056 605000 2                  TPL     s:5390

      116     5387    1        THEN
      117     5388    1         XUG_GETCMD.OUT$ = XUG_GETCMD.OUT$ -> OUT$BLK.SUBLK$(1) ;

   5388  2 000054   100004 236100                    LDQ     4,,PR1
         2 000055   000001 756100                    STQ     1,,PR0

      118     5389
      119     5390    2      DO CASE (XUG_GETCMD.OUT$ -> OUT$BLK.CODE);

   5390  2 000056   000001 471500                    LDP1    1,,PR0
         2 000057   100000 720100                    LXL0    0,,PR1
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:17   
         2 000060   000012 100003                    CMPX0   10,DU
         2 000061   000063 602010 2                  TNC     s:5390+5,X0
         2 000062   000152 710000 2                  TRA     s:5434
         2 000063   000152 710000 2                  TRA     s:5434
         2 000064   000107 710000 2                  TRA     s:5402
         2 000065   000121 710000 2                  TRA     s:5410
         2 000066   000114 710000 2                  TRA     s:5406
         2 000067   000133 710000 2                  TRA     s:5418
         2 000070   000102 710000 2                  TRA     s:5398
         2 000071   000075 710000 2                  TRA     s:5394
         2 000072   000140 710000 2                  TRA     s:5422
         2 000073   000126 710000 2                  TRA     s:5414
         2 000074   000145 710000 2                  TRA     s:5426

      120     5391
      121     5392    2        CASE (SETCMND);

      122     5393
      123     5394    2         CALL CXB$SET (XUG_GETCMD, CPSL_COMMAND_PARAMETERS);

   5394  2 000075   200003 630500                    EPPR0   @XUG_GETCMD,,AUTO
         2 000076   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000077   000000 701000 xent               TSX1    CXB$SET
         2 000100   000000 011000                    NOP     0
         2 000101   000152 710000 2                  TRA     s:5434

      124     5395
      125     5396    2        CASE (RESETCMND);

      126     5397
      127     5398    2         CALL CXB$RESET (XUG_GETCMD, CPSL_COMMAND_PARAMETERS);

   5398  2 000102   200003 630500                    EPPR0   @XUG_GETCMD,,AUTO
         2 000103   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000104   000000 701000 xent               TSX1    CXB$RESET
         2 000105   000000 011000                    NOP     0
         2 000106   000152 710000 2                  TRA     s:5434
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:18   

      128     5399
      129     5400    2        CASE (ADJUSTCMND);

      130     5401
      131     5402    2         CALL CXB$ADJUST (XUG_GETCMD, CPSL_COMMAND_PARAMETERS);

   5402  2 000107   200003 630500                    EPPR0   @XUG_GETCMD,,AUTO
         2 000110   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000111   000000 701000 xent               TSX1    CXB$ADJUST
         2 000112   000000 011000                    NOP     0
         2 000113   000152 710000 2                  TRA     s:5434

      132     5403
      133     5404    2        CASE (LDEVCMND);

      134     5405
      135     5406    2         CALL CXB$LDEV (XUG_GETCMD, CPSL_COMMAND_PARAMETERS);

   5406  2 000114   200003 630500                    EPPR0   @XUG_GETCMD,,AUTO
         2 000115   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000116   000000 701000 xent               TSX1    CXB$LDEV
         2 000117   000000 011000                    NOP     0
         2 000120   000152 710000 2                  TRA     s:5434

      136     5407
      137     5408    2        CASE (ERASECMND);

      138     5409
      139     5410    2         CALL CXB$ERASE (XUG_GETCMD, CPSL_COMMAND_PARAMETERS);

   5410  2 000121   200003 630500                    EPPR0   @XUG_GETCMD,,AUTO
         2 000122   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000123   000000 701000 xent               TSX1    CXB$ERASE
         2 000124   000000 011000                    NOP     0
         2 000125   000152 710000 2                  TRA     s:5434

PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:19   
      140     5411
      141     5412    2        CASE (HOLDCMND);

      142     5413
      143     5414    2         CALL CXB$HOLD (XUG_GETCMD, CPSL_COMMAND_PARAMETERS);

   5414  2 000126   200003 630500                    EPPR0   @XUG_GETCMD,,AUTO
         2 000127   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000130   000000 701000 xent               TSX1    CXB$HOLD
         2 000131   000000 011000                    NOP     0
         2 000132   000152 710000 2                  TRA     s:5434

      144     5415
      145     5416    2        CASE (PRINTCMND);

      146     5417
      147     5418    2         CALL CXB$PRINT (XUG_GETCMD, CPSL_COMMAND_PARAMETERS);

   5418  2 000133   200003 630500                    EPPR0   @XUG_GETCMD,,AUTO
         2 000134   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000135   000000 701000 xent               TSX1    CXB$PRINT
         2 000136   000000 011000                    NOP     0
         2 000137   000152 710000 2                  TRA     s:5434

      148     5419
      149     5420    2        CASE (TERMINALCMND);

      150     5421
      151     5422    2         CALL CXF$TERMINAL (XUG_GETCMD, CPSL_COMMAND_PARAMETERS);

   5422  2 000140   200003 630500                    EPPR0   @XUG_GETCMD,,AUTO
         2 000141   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000142   000000 701000 xent               TSX1    CXF$TERMINAL
         2 000143   000000 011000                    NOP     0
         2 000144   000152 710000 2                  TRA     s:5434

      152     5423
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:20   
      153     5424    2        CASE (UNHOLDCMND);

      154     5425
      155     5426    2         CALL CXB$UNHOLD (XUG_GETCMD, CPSL_COMMAND_PARAMETERS);

   5426  2 000145   200003 630500                    EPPR0   @XUG_GETCMD,,AUTO
         2 000146   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000147   000000 701000 xent               TSX1    CXB$UNHOLD
         2 000150   000000 011000                    NOP     0
         2 000151   000152 710000 2                  TRA     s:5434

      156     5427
      157     5428    2        CASE (ELSE);

      158     5429
      159     5430        /*N* do something to put in an error condition here */
      160     5431
      161     5432    2        END;

      162     5433
      163     5434    1      CALL CLOSE_WORK_DCB ALTRET (RESTORE_AND_ALTRETURN);

   5434  2 000152   000177 701000 2                  TSX1    CLOSE_WORK_DCB
         2 000153   000173 702000 2                  TSX2    RESTORE_AND_ALTRETURN

      164     5435
      165     5436    1      XUG_GETCMD.SFROUTINE$ = USER_SUCCESS_FAIL_ROUTINE$$;

   5436  2 000154   200044 236100                    LDQ     USER_SUCCESS_FAIL_ROUTINE$$,,AUTO
         2 000155   200003 470500                    LDP0    @XUG_GETCMD,,AUTO
         2 000156   000033 756100                    STQ     27,,PR0

      166     5437
      167     5438    1      IF CPSL_COMMAND_PARAMETERS.ERRCODE ~= '0'B

   5438  2 000157   200004 471500                    LDP1    @CPSL_COMMAND_PARAMETERS,,AUTO
         2 000160   100002 235100                    LDA     2,,PR1
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:21   
         2 000161   000163 600000 2                  TZE     s:5442

      168     5439    1        THEN
      169     5440    1         ALTRETURN;

   5440  2 000162   000000 702200 xent               TSX2  ! X66_AALT

      170     5441    1        ELSE
      171     5442    1         RETURN;

   5442  2 000163   000000 702200 xent               TSX2  ! X66_ARET

      172     5443
      173     5444    1   PARSE_ERROR:
      174     5445
      175     5446    1      CPSL_COMMAND_PARAMETERS.ERRCODE = XUG_GETCMD.ERR#;

   5446  2 000164   200003 470500       PARSE_ERROR  LDP0    @XUG_GETCMD,,AUTO
         2 000165   000001 236100                    LDQ     1,,PR0
         2 000166   200004 471500                    LDP1    @CPSL_COMMAND_PARAMETERS,,AUTO
         2 000167   100002 756100                    STQ     2,,PR1

      176     5447    1      CPSL_COMMAND_PARAMETERS.ERR_CPOS = XUG_GETCMD.PCB$ -> P_PCB.HI_CHAR;

   5447  2 000170   000003 473500                    LDP3    3,,PR0
         2 000171   300012 235100                    LDA     10,,PR3
         2 000172   100003 755100                    STA     3,,PR1

      177     5448
      178     5449    1   RESTORE_AND_ALTRETURN:
      179     5450
      180     5451    1      XUG_GETCMD.SFROUTINE$ = USER_SUCCESS_FAIL_ROUTINE$$;

   5451  2 000173   200044 236100       RESTORE_AND* LDQ     USER_SUCCESS_FAIL_ROUTINE$$,,AUTO
         2 000174   200003 470500                    LDP0    @XUG_GETCMD,,AUTO
         2 000175   000033 756100                    STQ     27,,PR0

PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:22   
      181     5452    1      ALTRETURN;

   5452  2 000176   000000 702200 xent               TSX2  ! X66_AALT

      182     5453
      183     5454        %EJECT;
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:23   
      184     5455    1   CLOSE_WORK_DCB: PROC ALTRET;

   5455  2 000177   200046 741300       CLOSE_WORK_* STX1  ! USER_SUCCESS_FAIL_ROUTINE$$+2,,AUTO

      185     5456
      186     5457    2      IF CPSL_COMMAND_PARAMETERS.WORK_DCB# ~= DCBNUM(NIL)

   5457  2 000200   200004 470500                    LDP0    @CPSL_COMMAND_PARAMETERS,,AUTO
         2 000201   000000 235100                    LDA     0,,PR0
         2 000202   000243 600000 2                  TZE     s:5478

      187     5458    2        THEN
      188     5459    2         IF DCBADDR(CPSL_COMMAND_PARAMETERS.WORK_DCB#) -> F$DCB.FCD#

   5459  2 000203   000003 471400 3                  LDP1    3
         2 000204   100000 473500                    LDP3    0,,PR1
         2 000205   000000 720100                    LXL0    0,,PR0
         2 000206   300000 474510                    LDP4    0,X0,PR3
         2 000207   400031 236100                    LDQ     25,,PR4
         2 000210   020000 316007                    CANQ    8192,DL
         2 000211   000243 600000 2                  TZE     s:5478

      189     5460    3           THEN DO;

      190     5461
      191     5462    3            FPT_CLOSE_AUTO = FPT_CLOSE_CONSTANT;

   5462  2 000212   000100 100400                    MLR     fill='000'O
         2 000213   000000 000170 1                  ADSC9   FPT_CLOSE_CONSTANT       cn=0,n=120
         2 000214   200006 000170                    ADSC9   FPT_CLOSE_AUTO,,AUTO     cn=0,n=120

      192     5463    3            FPT_CLOSE_AUTO.V_ = VECTOR (FPT_CLOSE_AUTO.V);

   5463  2 000215   000004 235000 3                  LDA     4
         2 000216   200050 452500                    STP2    USER_SUCCESS_FAIL_ROUTINE$$+4,,AUTO
         2 000217   200050 236100                    LDQ     USER_SUCCESS_FAIL_ROUTINE$$+4,,AUTO
         2 000220   000040 036003                    ADLQ    32,DU
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:24   
         2 000221   200006 757100                    STAQ    FPT_CLOSE_AUTO,,AUTO

      193     5464    3            FPT_CLOSE_AUTO.V.DCB# = CPSL_COMMAND_PARAMETERS.WORK_DCB#;

   5464  2 000222   000000 720100                    LXL0    0,,PR0
         2 000223   200040 740100                    STX0    FPT_CLOSE_AUTO+26,,AUTO

      194     5465
      195     5466    3            CALL M$CLOSE (FPT_CLOSE_AUTO)

   5466  2 000224   200006 630500                    EPPR0   FPT_CLOSE_AUTO,,AUTO
         2 000225   450001 713400                    CLIMB   alt,close
         2 000226   406000 401760                    pmme    nvectors=13
         2 000227   000231 702000 2                  TSX2    s:5469
         2 000230   000243 710000 2                  TRA     s:5478

      196     5467    4              WHENALTRETURN DO;

      197     5468
      198     5469    4               CPSL_COMMAND_PARAMETERS.ERRCODE = B$TCB.ALT$ -> B$ALT.ERR;

   5469  2 000231   000000 470400 xsym               LDP0    B$TCB$
         2 000232   000000 471500                    LDP1    0,,PR0
         2 000233   100102 236100                    LDQ     66,,PR1
         2 000234   200004 473500                    LDP3    @CPSL_COMMAND_PARAMETERS,,AUTO
         2 000235   300002 756100                    STQ     2,,PR3

      199     5470    4               CPSL_COMMAND_PARAMETERS.ERR_DCB# = B$TCB.ALT$ -> B$ALT.DCB#;

   5470  2 000236   000000 471500                    LDP1    0,,PR0
         2 000237   100101 235100                    LDA     65,,PR1
         2 000240   300004 755100                    STA     4,,PR3

      200     5471
      201     5472    4               ALTRETURN;

   5472  2 000241   200046 221300                    LDX1  ! USER_SUCCESS_FAIL_ROUTINE$$+2,,AUTO
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:25   
         2 000242   000000 702211                    TSX2  ! 0,X1

      202     5473
      203     5474    4               END;
      204     5475
      205     5476    3            END;

      206     5477
      207     5478    2      RETURN;

   5478  2 000243   200046 221300                    LDX1  ! USER_SUCCESS_FAIL_ROUTINE$$+2,,AUTO
         2 000244   000001 702211                    TSX2  ! 1,X1
      208     5479
      209     5480    2   END CLOSE_WORK_DCB;
      210     5481
      211     5482    1   END CXC$COMMAND;

PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:26   
--  Include file information  --

   CXG_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   XU_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CX_ISUBS_C.:E05TOU  is referenced.
   CX_SUBS_C.:E05TOU  is referenced.
   CX_MACROS_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CXC$COMMAND.
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:27   

 **** Variables and constants ****

  ****  Section 001 RoData CXC$COMMAND

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(1080)  r     1 FPT_CLOSE_CONSTANT

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @CPSL_COMMAND_PARAMETERS
     3-0-0/w PTR         r     1 @XUG_GETCMD
    *0-0-0/w STRC(180)   r     1 CPSL_COMMAND_PARAMETERS
     6-0-0/d STRC(1080)  r     1 FPT_CLOSE_AUTO
    44-0-0/w EPTR        r     1 USER_SUCCESS_FAIL_ROUTINE$$
    *0-0-0/d STRC(1512)  r     1 XUG_GETCMD

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/b BIT         r     1 CPSL_NODES

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0/w STRC(144)   r     1 OUT$BLK
     0-0-0/w STRC(504)   r     1 P_PCB
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:28   


   Procedure CXC$COMMAND requires 165 words for executable code.
   Procedure CXC$COMMAND requires 42 words of local(AUTO) storage.

    No errors detected in file CXC$COMMAND.:E05TSI    .
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:29   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:30   
          MINI XREF LISTING

B$ALT.CODE
      5023**DCL      5023--REDEF    5024--REDEF    5024--REDEF
B$ALT.DCB#
      5024**DCL      5470>>ASSIGN
B$ALT.ERR
      5024**DCL      5469>>ASSIGN
B$ALT.ERR.ERR#
      5025**DCL      5025--REDEF
B$ALT.EVID
      5024**DCL      5024--REDEF    5024--REDEF
B$JIT.CPFLAGS1.SLEAZE
       158**DCL       158--REDEF
B$JIT.ERR.MID
        65**DCL        65--REDEF
B$JIT.JRESPEAK
       226**DCL       227--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
       335**DCL       335--REDEF     336--REDEF
B$JIT.PNR
       239**DCL       239--REDEF
B$JIT.TSLINE
       333**DCL       334--REDEF
B$JIT$
      5331**DCL        59--IMP-PTR
B$TCB.ALT$
      5019**DCL      5469>>ASSIGN   5470>>ASSIGN
B$TCB$
      5332**DCL      5019--IMP-PTR  5469>>ASSIGN   5470>>ASSIGN
CLOSE_WORK_DCB
      5455**PROC     5370--CALL     5434--CALL
CPSL_COMMAND_PARAMETERS
      4915**DCL        13--PROC     5394<>CALL     5398<>CALL     5402<>CALL     5406<>CALL     5410<>CALL
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:31   
      5414<>CALL     5418<>CALL     5422<>CALL     5426<>CALL
CPSL_COMMAND_PARAMETERS.ERRCODE
      4923**DCL      5365<<ASSIGN   5438>>IF       5446<<ASSIGN   5469<<ASSIGN
CPSL_COMMAND_PARAMETERS.ERR_CPOS
      4929**DCL      5366<<ASSIGN   5447<<ASSIGN
CPSL_COMMAND_PARAMETERS.ERR_DCB#
      4930**DCL      5367<<ASSIGN   5470<<ASSIGN
CPSL_COMMAND_PARAMETERS.FLAGS.ECHO
      4922**DCL      5376>>IF       5379<<ASSIGN
CPSL_COMMAND_PARAMETERS.FLAGS.REPORTED_TO_USER
      4920**DCL      5368<<ASSIGN
CPSL_COMMAND_PARAMETERS.WORK_DCB#
      4916**DCL      5457>>IF       5459--IF       5464>>ASSIGN
CPSL_NODES
      5333**DCL      5363--ASSIGN
CXB$ADJUST
      5336**DCL-ENT  5402--CALL
CXB$ERASE
      5337**DCL-ENT  5410--CALL
CXB$HOLD
      5338**DCL-ENT  5414--CALL
CXB$LDEV
      5339**DCL-ENT  5406--CALL
CXB$PRINT
      5340**DCL-ENT  5418--CALL
CXB$RESET
      5341**DCL-ENT  5398--CALL
CXB$SET
      5342**DCL-ENT  5394--CALL
CXB$UNHOLD
      5344**DCL-ENT  5426--CALL
CXF$TERMINAL
      5343**DCL-ENT  5422--CALL
CXG$ECHO
      5353**DCL-ENT  5382--CALL
CXG$GETCMD
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:32   
      5353**DCL-ENT  5374--CALL
F$DCB.ACTPOS
      5062**DCL      5062--REDEF
F$DCB.ARS#
      5036**DCL      5036--REDEF
F$DCB.ATTR
      5055**DCL      5056--REDEF
F$DCB.BORROW
      5070**DCL      5070--REDEF    5070--REDEF    5070--REDEF
F$DCB.DCBNAME.L
      5084**DCL      5084--IMP-SIZ
F$DCB.EOMCHAR#
      5040**DCL      5040--REDEF
F$DCB.FCD#
      5049**DCL      5459>>IF
F$DCB.FLDID
      5065**DCL      5065--REDEF
F$DCB.FORM$
      5059**DCL      5059--REDEF
F$DCB.FSECT
      5075**DCL      5075--REDEF
F$DCB.FSN#
      5052**DCL      5052--REDEF    5052--REDEF    5053--REDEF
F$DCB.HEADER$
      5058**DCL      5058--REDEF
F$DCB.IXTNSIZE#
      5056**DCL      5056--REDEF
F$DCB.LASTSTA$
      5045**DCL      5045--REDEF
F$DCB.LVL
      5071**DCL      5071--REDEF
F$DCB.NAME#.C
      5046**DCL      5046--REDEF
F$DCB.NOEOF
      5068**DCL      5068--REDEF
F$DCB.NRECS#
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:33   
      5057**DCL      5057--REDEF
F$DCB.NRECX
      5076**DCL      5076--REDEF
F$DCB.OHDR
      5068**DCL      5068--REDEF
F$DCB.ORG#
      5051**DCL      5051--REDEF
F$DCB.PRECNO
      5074**DCL      5074--REDEF
F$DCB.RCSZ
      5080**DCL      5080--REDEF
F$DCB.RES#
      5047**DCL      5047--REDEF
F$DCB.SETX
      5059**DCL      5059--REDEF
F$DCB.TAB$
      5059**DCL      5059--REDEF
F$DCB.TDA
      5073**DCL      5074--REDEF
F$DCB.WSN#
      5047**DCL      5047--REDEF
FPT_CLOSE_AUTO
      4998**DCL      5462<<ASSIGN   5466<>CALL
FPT_CLOSE_AUTO.SN_
      4998**DCL      4998--REDEF
FPT_CLOSE_AUTO.UTL_
      4999**DCL      4999--REDEF
FPT_CLOSE_AUTO.V
      5003**DCL      5463--ASSIGN
FPT_CLOSE_AUTO.V.DCB#
      5004**DCL      5464<<ASSIGN
FPT_CLOSE_AUTO.V.EXPIRE#
      5013**DCL      5013--REDEF
FPT_CLOSE_AUTO.V.TYPE#
      5011**DCL      5011--REDEF
FPT_CLOSE_AUTO.V.XTNSIZE#
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:34   
      5008**DCL      5008--REDEF    5010--REDEF
FPT_CLOSE_AUTO.V_
      4998**DCL      5463<<ASSIGN
FPT_CLOSE_CONSTANT
      4956**DCL      5462>>ASSIGN
FPT_CLOSE_CONSTANT.SN_
      4956**DCL      4956--REDEF
FPT_CLOSE_CONSTANT.UTL_
      4957**DCL      4957--REDEF
FPT_CLOSE_CONSTANT.V
      4961**DCL      4956--DCLINIT
FPT_CLOSE_CONSTANT.V.EXPIRE#
      4971**DCL      4971--REDEF
FPT_CLOSE_CONSTANT.V.TYPE#
      4969**DCL      4969--REDEF
FPT_CLOSE_CONSTANT.V.XTNSIZE#
      4966**DCL      4966--REDEF    4968--REDEF
M$CLOSE
       349**DCL-ENT  5466--CALL
OUT$BLK.CODE
      5100**DCL      5390>>DOCASE
OUT$BLK.SUBLK$
      5125**DCL      5388>>ASSIGN
OUT$BLK.TEMP
      5093**DCL      5386>>IF
PARSE_ERROR
      5446**LABEL    5374--CALLALT
P_PCB.HI_CHAR
      5300**DCL      5447>>ASSIGN
RESTORE_AND_ALTRETURN
      5451**LABEL    5370--CALLALT  5434--CALLALT
USER_SUCCESS_FAIL_ROUTINE$$
      5334**DCL      5361<<ASSIGN   5436>>ASSIGN   5451>>ASSIGN
XUG_GETCMD
      4589**DCL        13--PROC     5374<>CALL     5382<>CALL     5394<>CALL     5398<>CALL     5402<>CALL
      5406<>CALL     5410<>CALL     5414<>CALL     5418<>CALL     5422<>CALL     5426<>CALL
PL6.E3A0      #001=CXC$COMMAND File=CXC$COMMAND.:E05TSI                          TUE 07/29/97 12:21 Page:35   
XUG_GETCMD.DCB_PARAM#
      4769**DCL      5380<<ASSIGN
XUG_GETCMD.ERR#
      4600**DCL      5446>>ASSIGN
XUG_GETCMD.NODES$
      4590**DCL      5363<<ASSIGN
XUG_GETCMD.OUT$
      4594**DCL      4600--REDEF    5386>>IF       5388<<ASSIGN   5388>>ASSIGN   5390>>DOCASE
XUG_GETCMD.OUTDCB#
      4765**DCL      5380>>ASSIGN
XUG_GETCMD.PASS
      4719**DCL      5372<<ASSIGN
XUG_GETCMD.PCB$
      4614**DCL      5447>>ASSIGN
XUG_GETCMD.SFROUTINE$
      4839**DCL      5361>>ASSIGN   5362<<ASSIGN   5436<<ASSIGN   5451<<ASSIGN
