VERSION E05

PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:1    
        1        1        /*M* TOF$FAULTS    TOLTS FAULT HANDLER program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P* NAME:         TOF$FAULTS
       12       12             PURPOSE:      Handles all faults for TOLTS.
       13       13             DESCRIPTION:  1.  Use of M$TRAP makes CP6 pass all faults in
       14       14                               TOLTS to TOF$FAULTS.
       15       15                           2.  Legitimate faults to be handled are either
       16       16                               MME faults from subexecutives requesting
       17       17                               service of TOLTS or Test Page faults
       18       18                               occurring under GELBAR.  All other faults
       19       19                               cause TOLTS to abort.
       20       20             LAST UPDATE:  07/12/85 (C01D integration)
       21       21        */
       22       22        %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:2    
       23       23        /*F* NAME:         TOF$FAULTS
       24       24             PURPOSE:      Handles all faults for TOLTS.
       25       25             DESCRIPTION:  Procedure Nesting Hierarchy
       26       26
       27       27             TOF$FAULTS: procedure ASYNC
       28       28                TOF$RESET_GELBAR_TIMER: procedure
       29       29                TOF$SBAR_INSTR: procedure
       30       30                   TOF$CALC_ADDR: procedure (ADDRESS)
       31       31                TOF$SAVE_HISTORY_REGS: procedure
       32       32                TOF$TEST_PAGE_FAULT: procedure
       33       33                TOF$SAVE_GELBAR_REGS: procedure
       34       34                   TOF$UPDATE_GELBAR_SPA: procedure
       35       35                   TOF$GET_GELBAR_FTYPE: procedure (F_TYPE)
       36       36                   TOF$GET_GELBAR_FVECTOR: procedure
       37       37                TOF$GET_MME_DATA: procedure
       38       38                TOF$GET_EXCEPTION_CODE: procedure (ECC,SUB_CODE)
       39       39                TOF$MME_HANDLER: procedure
       40       40                   TOF$SERVICE_OUTSTANDING_IO: procedure (MME_NUMBER)
       41       41                   TOF$SELECT_GCOS_MME: procedure (MME_NUMBER)
       42       42                   TOF$SELECT_TND_MME: procedure (MME_NUMBER)
       43       43                   TOF$RET_MME_DATA: procedure
       44       44                   TOF$FIX_RET_IC: procedure
       45       45
       46       46             REFERENCE:    CP-6 Release C0K0
       47       47                           Curt Andes / Scott Sheppard
       48       48        */
       49       49        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:3    
       50       50        /*D* NAME:         TOF$FAULTS
       51       51             CALL:         None; entered asynchronously by CP6 operating
       52       52                           System whenever a fault occurs.
       53       53             INPUT:        A safestore frame on the TCB, described by B$EXCFR.
       54       54             DESCRIPTION:  Trap control on all faults occurring within TOLTS
       55       55                           is established by calling M$TRAP.
       56       56                           at TOLTS initialization time.  GELBAR timer runout
       57       57                           faults will also be directed to TOF$FAULTS.
       58       58                           This is established when a MME GELBAR is invoked
       59       59                           and M$STIMER is called to time out the execution
       60       60                           of a test page.
       61       61
       62       62                           Therefore, TOF$FAULTS will be entered under the
       63       63                           following conditions:
       64       64
       65       65                           a. A MME fault caused by a subexecutive requesting
       66       66                              a Master Mode type service of TOLTS.
       67       67                           b. A fault (of any type) caused by a test page
       68       68                              running under GELBAR and the control of a
       69       69                              subexecutive.
       70       70                           c. An IPR fault caused by SOLTS executing a SBAR
       71       71                              instruction which is illegal in the NSA
       72       72                              environment.
       73       73                           d. A legitimate fault occurred in TOLTS and the
       74       74                              program must be terminated.
       75       75
       76       76                           The action taken by TOF$FAULTS in each of the cases
       77       77                           is:
       78       78
       79       79                           a. The appropriate MME service routine is
       80       80                              called, the requested service performed and
       81       81                              the results returned to the requesting
       82       82                              subexecutive.
       83       83                           b. The fault is unconditionally returned to
       84       84                              a fault handler in the subexecutive to process
       85       85                              it on behalf of the test page.
       86       86                           c. The SBAR instruction is simulated for SOLTS.
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:4    
       87       87                           d. TOLTS terminates.
       88       88
       89       89                           On entry, condition c above is checked for.
       90       90                           TOF$SBAR_INSTR is called always to
       91       91                           check for this condition and handle it.  It returns
       92       92                           to the mainline if the fault was not caused by a
       93       93                           SBAR instruction; otherwise, the instruction is
       94       94                           simulated and return is made directly to the
       95       95                           instruction following the SBAR.
       96       96
       97       97                           Next condition b above is checked for.
       98       98                           The flag TOF$BAR.GELBAR_MODE is set if a
       99       99                           test page was running in GELBAR mode, and the fault
      100      100                           should be returned to the subexec for processing.
      101      101                           If this is the case, TOF$TEST_PAGE_FAULT
      102      102                           is called to return the fault to the subexecutive.
      103      103
      104      104                           If neither of the above 2 conditions exist,
      105      105                           the fault type is determined, and the appropriate
      106      106                           serivce or termination routine called.  The fault
      107      107                           codes are extracted from the TCB frame, and either
      108      108                           TOF$MME_HANDLER or TOX$SCREECH called.
      109      109
      110      110                           In most cases, TOF$MME_HANDLER will call the
      111      111                           appropriate MME service routine, and then return
      112      112                           to the subexecutive.
      113      113        */
      114      114        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:5    
      115      115        TOF$FAULTS: PROC ASYNC;
      116      116
      117      117        /* Include Files */
      118      118
      119      119           %INCLUDE CP_6;
      120     5678           %INCLUDE CP_6_SUBS;
      121     6218           %INCLUDE TOT_TOLTS_M ;
      122     7336           %INCLUDE TOT_RQSTS_E ;
      123     7378           %INCLUDE TO_PERR_C ;
      124     7963
      125     7964        /* Fault Frames */
      126     7965
      127     7966           %B$EXCFR;
      128     7984           %B$FLT;
      129     8036           %B$HR_DPSE;
      130     8040           %B$HR_ELS1;
      131     8043           %B$HR_L66;
      132     8047           %B$TCB (STCLASS = "BASED (B$TCB$)") ;
      133     8050           %SUB_EXC;
      134     8097
      135     8098        /* External Entry Points */
      136     8099
      137     8100    1      DCL TOC$COLTS           ENTRY (4);
      138     8101    1      DCL TOD$DISPATCHER      ENTRY (3);
      139     8102    1      DCL TOG$GCOS_MMES       ENTRY (4);
      140     8103    1      DCL TOM$MOLTS           ENTRY (4);
      141     8104    1      DCL TOO$TOLTS_MMES      ENTRY (4);
      142     8105    1      DCL TOP$POLTS           ENTRY (4);
      143     8106    1      DCL TOQ$DEBUG           ENTRY ;
      144     8107    1      DCL TOS$SOLTS           ENTRY (4);
      145     8108    1      DCL TOX$ERROR           ENTRY (1) ;
      146     8109    1      DCL TOX$SCREECH         ENTRY (1) ;
      147     8110    1      DCL TOF_TRTN            ENTRY (1) ;
      148     8111           %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:6    
      149     8112        /* External Variables */
      150     8113
      151     8114    1      DCL B$TCB$                     PTR SYMREF ALIGNED ;
      152     8115    1      DCL TOD$SPA$                   PTR SYMREF ALIGNED ;
      153     8116           %TOF$BAR (STCLASS = "STATIC SYMDEF") ;
      154     8139    1      DCL TOF$GELBAR_ADDRESS_REGS    (0:7) PTR SYMREF ALIGNED ;
      155     8140    1      DCL TOF$GELBAR_EIS_REGS        (0:7) UBIN WORD SYMREF ALIGNED ;
      156     8141    1      DCL 1 TOF$GELBAR_INDICATORS SYMREF ALIGNED,
      157     8142    1            2 *                      UBIN HALF UNAL,
      158     8143    1            2 I,
      159     8144    1              3 *                    UBIN (12) UNAL,
      160     8145    1              3 EIS_INTERRUPT        UBIN (1) UNAL,
      161     8146    1              3 *                    UBIN(5) UNAL;
      162     8147    1      DCL TOF$GELBAR_FAULT_VECTOR    UBIN WORD STATIC SYMDEF ALIGNED ;
      163     8148           %MME (FPTN    = TOF$GELBAR_REGISTERS,
      164     8149                 STCLASS = SYMREF) ;
      165     8170    1      DCL TOF$SFR_RV                 REMEMBER SYMREF DALIGNED;
      166     8171           %TOQ$DCP (STCLASS = SYMREF) ;
      167     8203           %TOT$ECP (STCLASS = SYMREF) ;
      168     8252           %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:7    
      169     8253        /* Variables */
      170     8254
      171     8255           %MME ;
      172     8276           %MREG ;
      173     8298           %TOD$SPA (STCLASS = "BASED (TOD$SPA$)") ;
      174     8350           %MME_INSTR$ ;
      175     8353    1      DCL 1 MME_INSTR REDEF MME_INSTR$,
      176     8354    1            2 ADR    UBIN (18) UNAL,
      177     8355    1            2 SEGID  UBIN (18) UNAL;
      178     8356           %RETURN_DELTA ;
      179     8359    1      DCL ECC                        UBIN HALF HALIGNED ;
      180     8360    1      DCL GELBAR_TIME_USED           UBIN WORD ALIGNED ;
      181     8361    1      DCL IC_IN_GELBAR               UBIN HALF HALIGNED ;
      182     8362    1      DCL MME_IR                     BIT (18) HALIGNED ;
      183     8363    1      DCL REQUEST_TYPE               UBIN WORD ALIGNED ;
      184     8364    1      DCL SUB_CODE                   UBIN HALF HALIGNED ;
      185     8365           %VLP_ERRCODE (FPTN = TOF_ERROR_CODE,
      186     8366                         FCG  = 'TO',
      187     8367                         MID  = 'F',
      188     8368                         SEV  = 0) ;
      189     8413           %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:8    
      190     8414        /*I* NAME:         TOF$FAULTS, detailed info on main loop.
      191     8415             DESCRIPTION:  TOF$SBAR_INSTR IS always called to check to see if
      192     8416                           the  fault  was  caused  by  a SBAR instruction in
      193     8417                           SOLTS.   If it  was, the  instruction is simulated
      194     8418                           and  a  return  made  directly  to  SOLTS from the
      195     8419                           subroutine.   If TOF$BAR.GELBAR_MODE is  set, it means
      196     8420                           that the  fault was caused by  a test page running
      197     8421                           under  GELBAR.   TOF$TEST_PAGE_FAULT  is called to
      198     8422                           return the fault to  the subexecutive for the test
      199     8423                           page.   Otherwise,  the  Exception  Condition Code
      200     8424                           (ECC)  and its  Subcode are  fetched from the last
      201     8425                           frame  on  the  Task  Control  Block  (TCB) by the
      202     8426                           subroutine TOF$GET_EXCEPTION_CODE.  If ECC = 6 and
      203     8427                           SUB_CODE=0,  then  the  fault  is a programmed MME
      204     8428                           fault.   (Derail  and  Fault  Tag  faults are also
      205     8429                           programmed  faults, making  the check  on SUB_CODE
      206     8430                           necessary.)  TOF$MME_HANDLER  is called to process
      207     8431                           the  MME.   All  MME  Service Routines will return
      208     8432                           control to the MME Handler following completion of
      209     8433                           the MME service.  The MME Handler will then return
      210     8434                           the results and control to the requesting subexec.
      211     8435                           The  2 exceptions to  this are MME  GELBAR and MME
      212     8436                           GEENDC.    Each  of  these   use  the  PL6  UNWIND
      213     8437                           construct to transfer out of the MME Handler in an
      214     8438                           orderly  manner  (i.e.,  don't  leave stack frames
      215     8439                           lying   around).   For  all   other  fault  codes,
      216     8440                           TOX$SCREECH  is  called  to  print  out the system
      217     8441                           error message
      218     8442        */
      219     8443        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:9    
      220     8444        /* Code */
      221     8445
      222     8446    1      IF TOF$BAR.GELBAR_MODE
      223     8447    2      THEN DO ;
      224     8448    2              CALL TOF$RESET_GELBAR_TIMER;
      225     8449    2              CALL TOF$SBAR_INSTR;
      226     8450    2              CALL TOF$SAVE_HISTORY_REGS ;
      227     8451    2              CALL TOF$GET_EXCEPTION_CODE (ECC,SUB_CODE);
      228     8452    2              CALL TOF$TEST_PAGE_FAULT ;
      229     8453    2           END /* THEN */ ;
      230     8454    2      ELSE DO;
      231     8455    2              CALL TOF$SBAR_INSTR;
      232     8456    2              CALL TOF$GET_EXCEPTION_CODE (ECC,SUB_CODE);
      233     8457    3              DO CASE (ECC);
      234     8458    3                 CASE (%ECC_PROG#) ;
      235     8459    3                    IF SUB_CODE = %SC_MME#
      236     8460    3                    THEN CALL TOF$MME_HANDLER;
      237     8461    3                    ELSE CALL TOX$SCREECH (B$TCB$->B$TCB.STK$->B$EXCFR.ERR) ;
      238     8462    3                 CASE (%ECC_PMME#) ;
      239     8463    3                    TOF_ERROR_CODE.ERR# = %E$UNEXMONFLT ;
      240     8464    3                    CALL TOX$ERROR (TOF_ERROR_CODE) ;
      241     8465    3                 CASE (ELSE);
      242     8466    3                    CALL TOX$SCREECH (B$TCB$ -> B$TCB.STK$ -> B$EXCFR.ERR) ;
      243     8467    3              END /* CASE */ ;
      244     8468    2           END /* ELSE */ ;
      245     8469
      246     8470        /* END TOF$FAULTS */
      247     8471        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:10   
      248     8472        /*I* NAME:         TOF$RESET_GELBAR_TIMER
      249     8473             INPUT:        None.
      250     8474             OUTPUT:       Timer timeout canceled.
      251     8475             DESCRIPTION:  M$TTIMER is called to cancel the timer on the test
      252     8476                           pages's execution which was started when MME GELBAR
      253     8477                           was invoked for the page.  All parameters are
      254     8478                           compiled into the FPT.
      255     8479
      256     8480                           GELBAR_TIME_USED is calculated using word 18
      257     8481                           of the Slave Prefix Area and a value returned in
      258     8482                           the M$TTIMER FPT.  This is used later to update
      259     8483                           the SPA.
      260     8484        */
      261     8485
      262     8486    1   TOF$RESET_GELBAR_TIMER: PROC;
      263     8487
      264     8488    2      DCL TIME_REMAINING UBIN(36) STATIC;
      265     8489           %FPT_TTIMER (FPTN = TTIMER_FPT,
      266     8490                        UTYPE = TUN,
      267     8491                        UNITS = TIME_REMAINING,
      268     8492                        CANCEL = YES);
      269     8507
      270     8508        /* Code */
      271     8509
      272     8510    2      IF TOT$ECP.SUBEXEC.CURRENT = %SOLTS | TOT$ECP.SUBEXEC.CURRENT = %PACT
      273     8511    2      THEN /* Do not reset timer for SOLTS or PACT */ ;
      274     8512    3      ELSE DO ;
      275     8513    3              CALL M$TTIMER (TTIMER_FPT) ;
      276     8514    3              GELBAR_TIME_USED = (TOD$SPA.WD18_ / 64) - TIME_REMAINING;
      277     8515    3           END /* ELSE */ ;
      278     8516    2      RETURN;
      279     8517
      280     8518    2   END TOF$RESET_GELBAR_TIMER;
      281     8519        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:11   
      282     8520        /*I* NAME:         TOF$SBAR_INSTR
      283     8521             INTERFACE:    TOF$CALC_ADDR
      284     8522             INPUT:        None
      285     8523             OUTPUT:       Returns the value of the simulated BAR to the
      286     8524                           effective address of the SBAR instruction.
      287     8525             DESCRIPTION:  Simulates the operation of the Store BAR (SBAR)
      288     8526                           instruction for SOLTS.  The SBAR instruction is
      289     8527                           illegal in NSA mode, but is used by Slave Mode
      290     8528                           SOLTS.  It is simulated in order to preserve a Slave
      291     8529                           Mode SOLTS that is common across all L66
      292     8530                           operating systems.
      293     8531
      294     8532                           The op codes of the even-odd pair in the TCB
      295     8533                           frame are checked to see if one of them is a SBAR
      296     8534                           instruction, op code = '550'O.  If neither is,
      297     8535                           a return is made to the mainline code of the Fault
      298     8536                           Handler.
      299     8537
      300     8538                           If one instruction is a SBAR, then TOF$CALC_ADDR
      301     8539                           is called to calculate the effective address
      302     8540                           of the instruction, taking into account bits
      303     8541                           0-17 of the instruction and the address register
      304     8542                           modification tag in bits 30-35.  TOF$CALC_ADDR
      305     8543                           returns an address relative to the ISR at the time
      306     8544                           of the fault.  The base address of shrunken ISR
      307     8545                           (relative to the normal ISR base) is added to
      308     8546                           ADDRESS so that it is an absolute address relative
      309     8547                           to the normal ISR.  This address is then used to
      310     8548                           return the value of TOF$BAR.CURRENT to SOLTS.
      311     8549                           TOF$BAR.CURRENT is a pseudo Base Address Register
      312     8550                           maintained by TOLTS for use in simulating GELBAR.
      313     8551        */
      314     8552        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:12   
      315     8553    1   TOF$SBAR_INSTR: PROC;
      316     8554
      317     8555    2      DCL ADDRESS UBIN (18);
      318     8556    2      DCL INSTR$ PTR ALIGNED;
      319     8557    2      DCL 1 INSTRP REDEF INSTR$ ALIGNED,
      320     8558    2            2 ADR UBIN (18) UNAL,
      321     8559    2            2 SEGID UBIN (18) UNAL;
      322     8560    2      DCL 1 INSTR BASED (INSTR$) ALIGNED,
      323     8561    2            2 ADR UBIN(18) UNAL,
      324     8562    2            2 OP_CODE BIT(9) UNAL,
      325     8563    2            2 * UBIN(3) UNAL,
      326     8564    2            2 TM_TAG BIT(2) UNAL,
      327     8565    2            2 TD_TAG BIT(4) UNAL;
      328     8566    2      DCL 1 SBAR_LOCATION BASED ALIGNED,
      329     8567    2            2 BASE UBIN(9) UNAL,
      330     8568    2            2 SIZE UBIN(9) UNAL,
      331     8569    2            2 * UBIN (18) UNAL;
      332     8570    2      DCL SBAR$ PTR;
      333     8571    2      DCL 1 SBAR_PTR REDEF SBAR$,
      334     8572    2            2 ADR UBIN(18) UNAL,
      335     8573    2            2 SEGID UBIN(18) UNAL;
      336     8574           %FPT_TRTN (FPTN = TRTN_FPT);
      337     8591           %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:13   
      338     8592        /* Code */
      339     8593
      340     8594    2      INSTRP.ADR = B$TCB.STK$ -> B$EXCFR.IC + TOF$BAR.CURRENT.BASE * 512;
      341     8595    2      INSTRP.SEGID = %IS_SEGID ;
      342     8596    2      IF INSTR$ -> INSTR.OP_CODE ~= '550'O
      343     8597    2      THEN RETURN ;
      344     8598    3      ELSE DO;
      345     8599    3              CALL TOF$CALC_ADDR(ADDRESS);
      346     8600    3              ADDRESS = ADDRESS + TOF$BAR.CURRENT.BASE * 512;
      347     8601    3              SBAR_PTR.ADR = ADDRESS;
      348     8602    3              SBAR_PTR.SEGID = %IS_SEGID ;
      349     8603    3              SBAR$ -> SBAR_LOCATION.BASE = TOF$BAR.CURRENT.BASE;
      350     8604    3              SBAR$ -> SBAR_LOCATION.SIZE = TOF$BAR.CURRENT.SIZE;
      351     8605    3              TRTN_FPT.REGS_ = VECTOR(NIL);
      352     8606    3              TRTN_FPT.V.IC# = B$TCB.STK$ -> B$EXCFR.IC + 1;
      353     8607    3   SBAR_TO_GELBAR:
      354     8608    3              CALL M$TRTN(TRTN_FPT) ;
      355     8609    3           END /* ELSE */ ;
      356     8610
      357     8611        /* END TOF$SBAR_INSTR */
      358     8612        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:14   
      359     8613        /*I* NAME:    TOF$CALC_ADDR
      360     8614             DESCRIPTION:
      361     8615        CALCULATES EFFECTIVE OPERAND ADDRESS FOR SBAR INSTRUCTION, ALLOWING
      362     8616        A LIMITED NUMBER OF ADDRESS MODIFICATIONS.  SEE CODE BELOW FOR
      363     8617        WHAT IS CURRENTLY ALLOWED.
      364     8618        */
      365     8619
      366     8620    2   TOF$CALC_ADDR: PROC (ADDRESS);
      367     8621
      368     8622    3      DCL ADDRESS UBIN(18);
      369     8623    3      DCL INDEX_REG UBIN(18);
      370     8624    3      DCL 1 REG,
      371     8625    3            2 UPPER UBIN(18) UNAL,
      372     8626    3            2 LOWER UBIN(18) UNAL;
      373     8627    3      DCL REG_ REDEF REG UBIN(36);
      374     8628
      375     8629        /* Code */
      376     8630
      377     8631    3      IF INSTR.TM_TAG = '00'B
      378     8632    4      THEN DO ;
      379     8633    4              ADDRESS = INSTR.ADR ;
      380     8634    5              DO SELECT (INSTR.TD_TAG) ;
      381     8635    5                 SELECT ('0000'B) ;
      382     8636    5                 INDEX_REG = 0;
      383     8637    5                 SELECT ('1000'B) ;
      384     8638    5                 INDEX_REG = B$TCB.STK$ -> B$EXCFR.REGS.XREG(0);
      385     8639    5                 SELECT ('1001'B) ;
      386     8640    5                 INDEX_REG = B$TCB.STK$ -> B$EXCFR.REGS.XREG(1);
      387     8641    5                 SELECT ('1010'B) ;
      388     8642    5                 INDEX_REG = B$TCB.STK$ -> B$EXCFR.REGS.XREG(2);
      389     8643    5                 SELECT ('1011'B) ;
      390     8644    5                 INDEX_REG = B$TCB.STK$ -> B$EXCFR.REGS.XREG(3);
      391     8645    5                 SELECT ('1100'B) ;
      392     8646    5                 INDEX_REG = B$TCB.STK$ -> B$EXCFR.REGS.XREG(4);
      393     8647                         %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:15   
      394     8648    5                 SELECT ('1101'B) ;
      395     8649    5                 INDEX_REG = B$TCB.STK$ -> B$EXCFR.REGS.XREG(5);
      396     8650    5                 SELECT ('1110'B) ;
      397     8651    5                 INDEX_REG = B$TCB.STK$ -> B$EXCFR.REGS.XREG(6);
      398     8652    5                 SELECT ('1111'B) ;
      399     8653    5                 INDEX_REG = B$TCB.STK$ -> B$EXCFR.REGS.XREG(7);
      400     8654    5                 SELECT ('0001'B) ;
      401     8655    5                 REG_ = B$TCB.STK$ -> B$EXCFR.REGS.A;
      402     8656    5                 INDEX_REG = REG.UPPER;
      403     8657    5                 SELECT ('0101'B) ;
      404     8658    5                 REG_ = B$TCB.STK$ -> B$EXCFR.REGS.A;
      405     8659    5                 INDEX_REG = REG.LOWER;
      406     8660    5                 SELECT ('0010'B) ;
      407     8661    5                 REG_ = B$TCB.STK$ -> B$EXCFR.REGS.Q;
      408     8662    5                 INDEX_REG = REG.UPPER;
      409     8663    5                 SELECT ('0110'B) ;
      410     8664    5                 REG_ = B$TCB.STK$ -> B$EXCFR.REGS.Q;
      411     8665    5                 INDEX_REG = REG.LOWER;
      412     8666    5                 SELECT (ELSE) ;
      413     8667    5              TOF_ERROR_CODE.ERR# = %E$BADTAG ;
      414     8668    5              CALL TOX$ERROR (TOF_ERROR_CODE) ;
      415     8669    5              END /* SELECT */ ;
      416     8670    4      ADDRESS = ADDRESS + INDEX_REG;
      417     8671    4      RETURN;
      418     8672    4           END /* THEN */ ;
      419     8673    4      ELSE DO ;
      420     8674    4              TOF_ERROR_CODE.ERR# = %E$BADMODTYP ;
      421     8675    4              CALL TOX$ERROR (TOF_ERROR_CODE) ;
      422     8676    4           END /* ELSE */ ;
      423     8677
      424     8678    3   END TOF$CALC_ADDR;
      425     8679    2   END TOF$SBAR_INSTR;
      426     8680        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:16   
      427     8681        /*I*  NAME:        TOF$SAVE_HISTREGS
      428     8682              PURPOSE:     Saves History Registers
      429     8683              DATA:        SPA.WD22 - address for register storage
      430     8684              DESCRIPTION: This procedure saves the history registers from
      431     8685                           the TCB for the fault.
      432     8686        */
      433     8687
      434     8688    1   TOF$SAVE_HISTORY_REGS: PROC ;
      435     8689
      436     8690    2      DCL J             UBIN WORD ALIGNED ;
      437     8691    2      DCL HR_BUF$       PTR ALIGNED ;
      438     8692    2      DCL 1 HR_BUF_ REDEF HR_BUF$ ALIGNED,
      439     8693    2            2 ADDR#  UBIN (18) UNAL,
      440     8694    2            2 SEGID# UBIN (18) UNAL;
      441     8695    2      DCL 1 HR_BUF BASED (HR_BUF$) ALIGNED,
      442     8696    2            2 WD0     (0:7) BIT (36),
      443     8697    2            2 MODEREG BIT (36) UNAL,
      444     8698    2            2 WD9     (0:4) BIT (36) UNAL,
      445     8699    2            2 FLTREG  (0:1) BIT (36) UNAL,
      446     8700    2            2 WD16    (0:63) BIT (36) UNAL,
      447     8701    2            2 DPSE_REGS,
      448     8702    2              3 CU_HR    (0:63) BIT (72) UNAL,
      449     8703    2              3 OUDU_HR  (0:63) BIT (72) UNAL,
      450     8704    2              3 VU_HR    (0:63) BIT (72) UNAL,
      451     8705    2            2 L66_REGS REDEF DPSE_REGS,
      452     8706    2              3 CU_HR    (0:15) BIT (72) UNAL,
      453     8707    2              3 OU_HR    (0:15) BIT (72) UNAL,
      454     8708    2              3 DU_HR    (0:15) BIT (72) UNAL,
      455     8709    2              3 WD176    (0:143) BIT (72) UNAL,
      456     8710    2            2 ELS1_REGS REDEF DPSE_REGS,
      457     8711    2              3 CUOU_HR  (0:15) BIT (72) UNAL,
      458     8712    2              3 WD112    (0:175) BIT (72) UNAL;
      459     8713           %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:17   
      460     8714        /* Code */
      461     8715
      462     8716    2      IF B$TCB.STK$ -> B$FLT.P# > 0 /* size of history register data */
      463     8717    3      THEN DO ;
      464     8718    3              IF (TOT$ECP.SUBEXEC.CURRENT = %SOLTS) OR (TOT$ECP.SUBEXEC.CURRENT = %PACT
              8718                       )
      465     8719    3              THEN HR_BUF_.ADDR# = TOD$SPA.WD22.HREG_BUF_ - 1 /* see STAR #18144 */;
      466     8720    3              ELSE HR_BUF_.ADDR# = TOD$SPA.WD22.HREG_BUF_ ;
      467     8721    3              HR_BUF_.SEGID# = %IS_SEGID ;
      468     8722    3              HR_BUF.FLTREG(0) = B$TCB.STK$ -> B$FLT.FLTREG;
      469     8723    3              HR_BUF.FLTREG(1) = '0'B;
      470     8724    4              DO CASE (B$TCB.STK$ -> B$FLT.CPU_TYPE) ;
      471     8725    4                 CASE (%L66#);
      472     8726    5                    DO J = 0 TO 15;
      473     8727    5                       HR_BUF.L66_REGS.CU_HR(J) =
      474     8728    5                               B$TCB.STK$ -> B$HR_L66.CU_HR(J);
      475     8729    5                       HR_BUF.L66_REGS.OU_HR(J) =
      476     8730    5                               B$TCB.STK$ -> B$HR_L66.OU_HR(J);
      477     8731    5                       HR_BUF.L66_REGS.DU_HR(J) =
      478     8732    5                               B$TCB.STK$ -> B$HR_L66.DU_HR(J);
      479     8733    5                    END;
      480     8734                         %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:18   
      481     8735    4                 CASE (%DPSE#);
      482     8736    5                    DO J = 0 TO 63;
      483     8737    5                       HR_BUF.DPSE_REGS.CU_HR(J) =
      484     8738    5                               B$TCB.STK$ -> B$HR_DPSE.CU_HR(J);
      485     8739    5                    END;
      486     8740    4                    IF TOD$SPA.WD22.HREG_BUF_SIZE > 208
      487     8741    5                    THEN DO;
      488     8742    6                            DO J = 0 TO 63;
      489     8743    6                               HR_BUF.DPSE_REGS.OUDU_HR(J) =
      490     8744    6                                       B$TCB.STK$ -> B$HR_DPSE.OUDU_HR(J);
      491     8745    6                               HR_BUF.DPSE_REGS.VU_HR(J) =
      492     8746    6                                       B$TCB.STK$ -> B$HR_DPSE.VU1_HR(J);
      493     8747    6                            END;
      494     8748    5                         END;
      495     8749    4                    ELSE /* Buffer not large enough for other REGS */ ;
      496     8750    4                 CASE (%ELS1#);
      497     8751    5                    DO J = 0 TO 15;
      498     8752    5                       HR_BUF.ELS1_REGS.CUOU_HR(J) =
      499     8753    5                               B$TCB.STK$ -> B$HR_ELS1.HR(J);
      500     8754    5                    END;
      501     8755    4              END /* CASE */ ;
      502     8756    3           END /* THEN */ ;
      503     8757    2      ELSE /* Do not save the History Registers */ ;
      504     8758    2      RETURN ;
      505     8759
      506     8760    2   END TOF$SAVE_HISTORY_REGS ;
      507     8761        %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:19   
      508     8762        /*I* NAME:         TOF$TEST_PAGE_FAULT
      509     8763             INTERFACE:    TOF$GET_MME_DATA
      510     8764                           TOF$SOLTS
      511     8765                           TOF$GET_EXCEPTION_CODE
      512     8766                           TOF$SAVE_GELBAR_REGS
      513     8767                           TOF$RESET_GELBAR_TIMER
      514     8768                           TOF$UPDATE_GELBAR_SPA
      515     8769                           TOF$GET_GELBAR_FVECTOR
      516     8770                           'UNWIND TO TOF$SFR_RV'
      517     8771             INPUT:        None explicitly.
      518     8772                           Fault information passed via TCB frame.
      519     8773             OUTPUT:       TOF$BAR.CURRENT updated.
      520     8774                           Slave Prefix Area for subexec updated.
      521     8775                           TOF$BAR.GELBAR_MODE RESET TO false
      522     8776             DESCRIPTION:  TOF$BAR.GELBAR_MODE is reset to 0 so that the next
      523     8777                           fault that occurs will be handled by the TOLTS
      524     8778                           Fault Handler and not passed back to the subexec.
      525     8779                           This flag is set when the subexec does a MME
      526     8780                           GELBAR (actually in TOG$GCOS_MMES).
      527     8781
      528     8782                           The above mentioned routines are called in order
      529     8783                           to fetch pertinent information from the TCB
      530     8784                           frame and update the Slave Prefix Area for the
      531     8785                           subexec so that it thinks it is working in a GCOS
      532     8786                           environment.  (See the individual routines for
      533     8787                           what each does exactly.  The names of the routines
      534     8788                           sufficiently describe enought detail for this
      535     8789                           level of explaination.)
      536     8790
      537     8791                           Once the SPA has been updated, M$CLRSTK is called
      538     8792                           to pop the last frame off the TCB (all the
      539     8793                           information has already been retrieved from it).
      540     8794                           An UNWIND TO TOF$SFR_RV transfers control to the
      541     8795                           BMAP subroutine which in turn will transfer control
      542     8796                           to the subexec's fault handler, which will
      543     8797                           then process the fault for the test page.
      544     8798
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:20   
      545     8799                           The reason M$CLRSTK is used to pop the TCB frame is
      546     8800                           that control must be returned to the subexec with
      547     8801                           the full (and not the shrunken ISR) in effect.
      548     8802                           CP6 is set up so that when a fault occurs within
      549     8803                           a shrunken ISR, the user's Fault Handler will be
      550     8804                           entered with full ISR in effect.   The full ISR
      551     8805                           must also be in effect when transfer is made to the
      552     8806                           subexec.  (The use of M$TRTN at this point
      553     8807                           would restore the shrunken ISR environment
      554     8808                           when transferring to the subexec.)
      555     8809
      556     8810                           The UNWIND statement pops the auto frame pointer
      557     8811                           (PR2) back to the auto frame for TOLTS and transfers
      558     8812                           to the subroutine TOF$SUBEXEC_FLT_RET which
      559     8813                           restores the register environment and transfers
      560     8814                           to the subexec.  The unwind variable used to do
      561     8815                           this, TOF$SFR_RV is built by a BMAP routine
      562     8816                           TOF$REMEMBER_SFR at TOLTS initialization time.
      563     8817                           The UNWIND is necessary in order to pop all the
      564     8818                           automatic frames that should not be left around,
      565     8819                           specifically the one for TOF$FAULTS.  The
      566     8820                           BMAP routine is necessary to restore the register
      567     8821                           environment for the subexec.
      568     8822
      569     8823                           Thus future developers/modifiers of TOLTS should
      570     8824                           be aware of the initimate relationship
      571     8825                           between TOLTS and the CP6 fault handling
      572     8826                           mechanism.  No other CP6 user is closely tied to
      573     8827                           CP6; because of this, there will be future
      574     8828                           problems.
      575     8829        */
      576     8830        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:21   
      577     8831    1   TOF$TEST_PAGE_FAULT: PROC;
      578     8832
      579     8833        /* Code */
      580     8834
      581     8835    2      TOF$BAR.GELBAR_MODE = %FALSE ;
      582     8836    2      CALL TOF$GET_MME_DATA;
      583     8837    2      TOF$BAR.CURRENT = TOF$BAR.FULL;
      584     8838    2      CALL TOF$SAVE_GELBAR_REGS;
      585     8839    2      CALL TOF$UPDATE_GELBAR_SPA;
      586     8840    2      CALL M$CLRSTK;
      587     8841    2      CALL TOF$GET_GELBAR_FVECTOR;
      588     8842    2      UNWIND TO TOF$SFR_RV;
      589     8843
      590     8844        /* END TOF$TEST_PAGE_FAULT */
      591     8845        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:22   
      592     8846        /*I* NAME:         SAVE_GELBAR_REGISTERS
      593     8847             INPUT:        None.
      594     8848             OUTPUT:       TOF$GELBAR_REGISTERS
      595     8849                           TOF$GELBAR_INDICATORS
      596     8850                           TOF$GELBAR_ADDRESS_REGS
      597     8851                           TOF$GELBAR_EIS_REGS
      598     8852             DESCRIPTION:  Fetches the above 3 sets of registers and the
      599     8853                           Indicator Register from the current TCB frame
      600     8854                           and saves them.  They will be restored prior to
      601     8855                           returning to the subexec.  This save (and the
      602     8856                           subsequent restore) is necessary because M$TRTN
      603     8857                           cannot be used to restore the environment and
      604     8858                           return to the subexec.
      605     8859
      606     8860                           The register complement that is saved and restored
      607     8861                           may have to be changed when SOLTS is modified to
      608     8862                           do online NSA testing.
      609     8863        */
      610     8864
      611     8865    2   TOF$SAVE_GELBAR_REGS: PROC;
      612     8866
      613     8867        /* Code */
      614     8868
      615     8869    3      TOF$GELBAR_REGISTERS = MREG;
      616     8870    3      TOF$GELBAR_INDICATORS.I = B$TCB.STK$ -> B$EXCFR.IR;
      617     8871    3      TOF$GELBAR_ADDRESS_REGS = B$TCB.STK$ -> B$EXCFR.PRS;
      618     8872    3      TOF$GELBAR_EIS_REGS = B$TCB.STK$ -> B$EXCFR.EIS;
      619     8873    3      RETURN;
      620     8874
      621     8875    3   END TOF$SAVE_GELBAR_REGS;
      622     8876        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:23   
      623     8877        /*I* NAME:         TOF$UPDATE_GELBAR_SPA
      624     8878             INTERFACE:    TOF$GET_GELBAR_FTYPE
      625     8879             INPUT:        None.
      626     8880             OUTPUT:       Update words 17,18 and 25 in Slave Prefix Area.
      627     8881             DESCRIPTION:  Word 17 of the Slave Prefix Area is updated to
      628     8882                           show how much time is remaining of the original
      629     8883                           GELBAR timeout interval specified when MME GELBAR
      630     8884                           was invoked.  (GELBAR_TIME_USED calculated in
      631     8885                           TOF$RESET_GELBAR_TIMER is used here.)
      632     8886
      633     8887                           Now the IC of the fault under GELBAR must be
      634     8888                           doctored up because of the funny way CP6 handles
      635     8889                           a fault IC in the TCB.  If bit 30 of the Indicator
      636     8890                           Register is set, indicating that an EIS instruction
      637     8891                           has been interrupted, CP6 leaves the IC returned
      638     8892                           from the hardware alone (on the assumption that
      639     8893                           the instruction's execution will be resumed).
      640     8894                           However, in most cases (when bit 30 is reset),
      641     8895                           CP6 will decrement the IC returned by the hardware
      642     8896                           by one so that it will reflect the true IC of the
      643     8897                           fault instead of IC+1 as in GCOS.  This routine
      644     8898                           must at this point figure out which of the 2
      645     8899                           conditions exist and fix up the IC returned in
      646     8900                           word 18 of the SPA so that the subexec thinks it is
      647     8901                           operating in a GCOS environment.
      648     8902
      649     8903                           Therefore, if bit 30 (EIS interrupt bit) is set,
      650     8904                           the IC from the TCB frame is returned as is; if
      651     8905                           bit 30 is reset, IC+1 is returned in word 18.
      652     8906                           (Note: IC_IN_GELBAR is set in TOF$GET_MME_DATA.)
      653     8907
      654     8908                           The Indicator Register from the TCB frame is stored
      655     8909                           into word 18.
      656     8910
      657     8911                           The fault bit (bit 19) in word 25 is set if the
      658     8912                           GELBAR was broken by a fault, and reset if GELBAR
      659     8913                           was broken by an I/O interrupt.  So here
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:24   
      660     8914                           comes one of the big kludges in TOLTS for SOLTS.
      661     8915
      662     8916                           Slave Mode SOLTS (CSLT or PROC) only checks the
      663     8917                           Interslave Communication Queue (via a MME GEINOS
      664     8918                           for an ISC READ) when GELBAR has been broken by
      665     8919                           an I/O interrupt, i.e., bit 19 in word 25 of the
      666     8920                           SPA reset.  It does not periodically check the
      667     8921                           ISC queue as do the other subexecs.
      668     8922
      669     8923                           Since in CP6 user programs don't see I/O
      670     8924                           interrupts, there would conceivably be no way to
      671     8925                           pass Interslave Communications to SOLTS.  So a
      672     8926                           special Derail instruction has been inserted into
      673     8927                           SOLTS (PROE) which is interpreted by the
      674     8928                           TOLTS Fault Handler to be a nop; but it does return
      675     8929                           to CSLT/PROC with the fault bit reset so it
      676     8930                           thinks an I/O interrupt occurred.  Then CSLT/PROC
      677     8931                           checks the Interslave queue.  In this way, I/O
      678     8932                           interrupts are simulated for Slave Mode SOLTS.
      679     8933
      680     8934                           What happens exactly is a DRL .070707 instruction
      681     8935                           is inserted into PROE in a place which is
      682     8936                           periodically used.  The DRL instruction executes,
      683     8937                           breaking GELBAR and transferring control to
      684     8938                           TOF$FAULTS.  This subroutine checks the fault
      685     8939                           instruction for the DRL opcode and .070707 in the
      686     8940                           address field.  If these 2 conditions exist, an I/O
      687     8941                           interrupt is simulated for SOLTS.  Bit 19 in
      688     8942                           word 25 of the SPA is reset, and control passed back
      689     8943                           to CSLT/PROC.
      690     8944
      691     8945                           If this condition does not exist, bit 19 is set.
      692     8946
      693     8947                           Finally, TOF$GET_GELBAR_FTYPE is called to
      694     8948                           generate the 6 bit GCOS fault code from the ECC
      695     8949                           and SUB_CODE from the TCB frame.  The GCOS code is
      696     8950                           returned in bits 30-35 of word 25.
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:25   
      697     8951
      698     8952                           Refer to the GCOS Reference Manual, DD19 for a
      699     8953                           complete description of MME GELBAR.
      700     8954        */
      701     8955
      702     8956    2   TOF$UPDATE_GELBAR_SPA: PROC;
      703     8957
      704     8958    3      DCL F_TYPE UBIN (6);
      705     8959
      706     8960        /* Code */
      707     8961
      708     8962    3      GELBAR_TIME_USED = GELBAR_TIME_USED * 64;
      709     8963    3      TOD$SPA.WD17 = TOD$SPA.WD17 - GELBAR_TIME_USED;
      710     8964    3      IF TOF$GELBAR_INDICATORS.I.EIS_INTERRUPT = 1
      711     8965    3      THEN TOD$SPA.WD18.IC = IC_IN_GELBAR;
      712     8966    3      ELSE TOD$SPA.WD18.IC = IC_IN_GELBAR + 1;
      713     8967    3      TOD$SPA.WD18.IR = MME_IR;
      714     8968    3      IF (MME.INST.NO = BITBIN('070707'O) & MME.INST.OP= '002007'O)
      715     8969    3      THEN TOD$SPA.WD25.FAULT = '0'B;
      716     8970    3      ELSE TOD$SPA.WD25.FAULT = '1'B;
      717     8971    3      CALL TOF$GET_GELBAR_FTYPE (F_TYPE);
      718     8972    3      TOD$SPA.WD25.FAULT_TYPE = F_TYPE;
      719     8973    3      RETURN;
      720     8974
      721     8975        /* END TOF$UPDATE_GELBAR_SPA */
      722     8976        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:26   
      723     8977        /*I* NAME:    TOF$GET_GELBAR_FTYPE
      724     8978             DESCRIPTION:
      725     8979        USES "ECC" AND "SUB_CODE" FETCHED FROM EXCEPTION STACK FRAME
      726     8980        (BY TOF$GET_EXCEPTION_CODE) TO GENERATE THE 6 BIT GCOS FAULT_TYPE
      727     8981        CODE FOR WORD 25 IN SLAVE PREFIX AREA.
      728     8982        SEE TOF$GET_EXCEPTION_CODE FOR DEFINITIONS OF ECC AND SUB_CODE.
      729     8983        */
      730     8984
      731     8985    3   TOF$GET_GELBAR_FTYPE: PROC (F_TYPE);
      732     8986
      733     8987    4      DCL F_TYPE UBIN (6);
      734     8988
      735     8989        /* Code */
      736     8990
      737     8991    5      DO CASE (ECC);
      738     8992    5         CASE (%ECC_ARITH#);
      739     8993    6            DO CASE (SUB_CODE);
      740     8994    6               CASE (%SC_OVRF#);
      741     8995    6                  F_TYPE = %OVERFLOW_FT ;
      742     8996    6               CASE (%SC_DVCHK#);
      743     8997    6                  F_TYPE = %DIVIDE_CHECK_FT ;
      744     8998    6               CASE (ELSE);
      745     8999    6                  TOF_ERROR_CODE.ERR# = %E$BADSUBCODE ;
      746     9000    6                  CALL TOX$ERROR (TOF_ERROR_CODE) ;
      747     9001    6            END;
      748     9002    5         CASE (%ECC_PROG#);
      749     9003    6            DO CASE (SUB_CODE);
      750     9004    6               CASE (%SC_MME#);
      751     9005    6                  F_TYPE = %MME_FT ;
      752     9006    6               CASE (%SC_DRAIL#);
      753     9007    6                  F_TYPE = %DERAIL_FT ;
      754     9008    6               CASE (%SC_FLTAG#);
      755     9009    6                  F_TYPE = %FAULT_TAG_FT ;
      756     9010    6               CASE (ELSE);
      757     9011    6                  TOF_ERROR_CODE.ERR# = %E$BADSUBCODE ;
      758     9012    6                  CALL TOX$ERROR (TOF_ERROR_CODE) ;
      759     9013    6            END;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:27   
      760     9014    5         CASE (%ECC_ERROR#);
      761     9015    6            DO CASE (SUB_CODE);
      762     9016    6               CASE (%SC_MEMORY#);
      763     9017    6                  F_TYPE = %MEMORY_FT ;
      764     9018    6               CASE (%SC_CMMD#);
      765     9019    6                  F_TYPE = %COMMAND_FT ;
      766     9020    6               CASE (%SC_LOCKUP#);
      767     9021    6                  F_TYPE = %LOCKUP_FT ;
      768     9022    6               CASE (%SC_IPR#);
      769     9023    6                  F_TYPE = %IPR_FT ;
      770     9024    6               CASE (%SC_PRTY#);
      771     9025    6                  F_TYPE = %PARITY_FT ;
      772     9026    6               CASE (%SC_OPNC#);
      773     9027    6                  F_TYPE = %ONC_FT ;
      774     9028    6               CASE (ELSE);
      775     9029    6                  TOF_ERROR_CODE.ERR# = %E$BADSUBCODE ;
      776     9030    6                  CALL TOX$ERROR (TOF_ERROR_CODE) ;
      777     9031    6            END;
      778     9032    5         CASE (%ECC_TIMER#);
      779     9033    5            F_TYPE = %TIMER_RUNOUT_FT ;
      780     9034    5         CASE (ELSE);
      781     9035    5            TOF_ERROR_CODE.ERR# = %E$BADECC ;
      782     9036    5            CALL TOX$ERROR (TOF_ERROR_CODE) ;
      783     9037    5      END;
      784     9038    4      RETURN;
      785     9039
      786     9040    4   END TOF$GET_GELBAR_FTYPE;
      787     9041    3   END TOF$UPDATE_GELBAR_SPA;
      788     9042        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:28   
      789     9043        /*I* NAME:         TOF$GET_GELBAR_FVECTOR
      790     9044             OUTPUT:       TOF$GELBAR_FAULT_VECTOR
      791     9045             DESCRIPTION:  Fetches from word 19 of the SPA the
      792     9046                           transfer vector into the subexec's fault handler
      793     9047                           for GELBAR faults.  If none exist, it quits.
      794     9048        */
      795     9049
      796     9050    2   TOF$GET_GELBAR_FVECTOR: PROC;
      797     9051
      798     9052    3      TOF$GELBAR_FAULT_VECTOR = TOD$SPA.WD19;
      799     9053    3      IF TOF$GELBAR_FAULT_VECTOR = 0
      800     9054    4      THEN DO ;
      801     9055    4              TOF_ERROR_CODE.ERR# = %E$NOGLBVEC ;
      802     9056    4              CALL TOX$SCREECH (TOF_ERROR_CODE) ;
      803     9057    4           END /* THEN */ ;
      804     9058    3      ELSE RETURN ;
      805     9059
      806     9060    3   END TOF$GET_GELBAR_FVECTOR;
      807     9061    2   END TOF$TEST_PAGE_FAULT ;
      808     9062        %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:29   
      809     9063        /*I* NAME:         TOF$GET_MME_DATA
      810     9064             INPUT:        None.
      811     9065             OUTPUT:       IC_IN_GELBAR
      812     9066                           MME_INSTR$
      813     9067                           MME
      814     9068                           MREG
      815     9069                           MME_IR
      816     9070             DESCRIPTION:  Fetches the above registers from the current
      817     9071                           TCB frame and fetches 7 words from the subexec,
      818     9072                           starting with the MME instruction, and the next 6
      819     9073                           words.
      820     9074                           MME_INSTR$ will always represent the address of the
      821     9075                           MME instruction relative to the full ISR.
      822     9076        */
      823     9077
      824     9078    1   TOF$GET_MME_DATA: PROC;
      825     9079
      826     9080    2      DCL MME_GMAP_DATA (0:6) UBIN (36) BASED ALIGNED;
      827     9081
      828     9082        /* Code */
      829     9083
      830     9084    2      IC_IN_GELBAR = B$TCB.STK$ -> B$EXCFR.IC;
      831     9085    2      MME_INSTR.ADR = B$TCB.STK$ -> B$EXCFR.IC;
      832     9086    2      IF TOF$BAR.CURRENT.BASE = 0
      833     9087    2      THEN /* Do Nothing --- Fault in FULL ISR */ ;
      834     9088    2      ELSE MME_INSTR.ADR = MME_INSTR.ADR + TOF$BAR.CURRENT.BASE * 512;
      835     9089    2      MME_INSTR.SEGID = %IS_SEGID;
      836     9090    2      MME = MME_INSTR$ -> MME_GMAP_DATA;
      837     9091    2      MREG = B$TCB.STK$ -> B$EXCFR.REGS;
      838     9092    2      MME_IR = B$TCB.STK$ -> B$EXCFR.IR;
      839     9093    2      RETURN;
      840     9094
      841     9095    2   END TOF$GET_MME_DATA;
      842     9096        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:30   
      843     9097        /*I* NAME:         TOF$GET_EXCEPTION_CODE
      844     9098             INPUT:        None.
      845     9099             OUTPUT:       ECC contains Exception Condition Code from TCB.
      846     9100                           SUB_CODE contains sub code for the ECC.
      847     9101             DESCRIPTION:  Fetches the above 2 fields from the current TCB
      848     9102                           frame using B$EXCFR based structure.
      849     9103
      850     9104                           ECC = B$TCB.STK$ -> B$EXCFR.ECC;
      851     9105
      852     9106                           SUB_CODE = B$TCB.STK$ -> B$EXCFR.SUBC;
      853     9107        */
      854     9108
      855     9109    1   TOF$GET_EXCEPTION_CODE: PROC (ECC,SUB_CODE);
      856     9110
      857     9111    2      DCL ECC       UBIN HALF HALIGNED ;
      858     9112    2      DCL SUB_CODE  UBIN HALF HALIGNED ;
      859     9113
      860     9114        /* Code */
      861     9115
      862     9116    2      ECC = B$TCB.STK$ -> B$EXCFR.ECC;
      863     9117    2      SUB_CODE = B$TCB.STK$ -> B$EXCFR.SUBC;
      864     9118    2      RETURN;
      865     9119
      866     9120    2   END TOF$GET_EXCEPTION_CODE;
      867     9121        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:31   
      868     9122        /*I* NAME:         TOF$MME_HANDLER
      869     9123             INTERFACE:    TOG$GET_MME_DATA
      870     9124                           TOD$DISPATCHER
      871     9125                           TOO$TOLTS_MMES
      872     9126                           TOG$GCOS_MMES
      873     9127                           TOC$COLTS
      874     9128                           TOP$POLTS
      875     9129                           TOS$SOLTS
      876     9130                           TOF$RET_MME_DATA
      877     9131                           TOF$FIX_RET_IC
      878     9132                           TOF$6XAUTO
      879     9133             INPUT:        Current TCB frame.
      880     9134             OUTPUT:       Too numerous to delineate here.
      881     9135             DESCRIPTION:  The MME Handler decodes the MME number from a
      882     9136                           requesting subexec and calls the appropriate
      883     9137                           MME Service Routine to perform the requested
      884     9138                           service.  It then returns to the subexec, with the
      885     9139                           service performed.
      886     9140
      887     9141                           TOF$GET_MME_DATA fetches MME relevant data from the
      888     9142                           TCB frame and the subexec for use so that
      889     9143                           everyone writing a MME Service Routine does not need
      890     9144                           to go into the TCB or fetch things from the subexec.
      891     9145                           The following structures are returned:
      892     9146
      893     9147                             MME--7 words of data starting at MME instruction
      894     9148                             MREG--the registers at time of the MME
      895     9149                             MME_INSTR$--pointer to the MME instrucion
      896     9150
      897     9151                           The TOLTS dispatcher, TOD$DISPATCHER is called
      898     9152                           to service anything outstanding in the TOLTS
      899     9153                           dispatch queue.  Since the MME Handler is periodically
      900     9154                           entered by subexecs doing MME's, this technique
      901     9155                           assures periodic service of the TOLTS queue.
      902     9156                           In normal circumstances, the subexecs have their own
      903     9157                           internal dispatchers which periodically check for
      904     9158                           things to do, and if there is nothing, put themselves
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:32   
      905     9159                           to sleep.  So in effect, the timing mechanism of
      906     9160                           the subexecs is used to put TOLTS to sleep if
      907     9161                           there is nothing to be done.
      908     9162
      909     9163                           TOD$DISPATCHER is called on every MME except when
      910     9164                           the MME is MME GEENDC. Because of the present
      911     9165                           design, a remember variable used in the
      912     9166                           implementation of Courtesy Call, TOG$CC_RETURN,
      913     9167                           is not recursive.  Therefore, the dispatcher queue
      914     9168                           cannot be serviced if a MME GEENDC service is being
      915     9169                           requested because this request indicates that a
      916     9170                           Courtesy Call is in progress.  A dispatcher
      917     9171                           service for an Interslave Communication will
      918     9172                           initiate another Courtesy Call on completion,
      919     9173                           thus clobberring the remember variable which is
      920     9174                           set for the first Courtesy Call.  We get around
      921     9175                           this recursion problem by not calling the dispatcher
      922     9176                           if a Courtesy Call is in progress.
      923     9177
      924     9178                           On return from the dispatcher, the MME number (bits
      925     9179                           0-17 in the MME instruction) is examined and one
      926     9180                           of several MME Service Routines is called.
      927     9181                           The MME Service Routines are grouped into several
      928     9182                           separate external PL6 procedures.  The interface
      929     9183                           to each is the same.  Each Service Routine is
      930     9184                           passed the registers at the time of the MME, the
      931     9185                           MME instruction and the first 6 words following it,
      932     9186                           a pointer to the MME instruction and RETURN_DELTA.
      933     9187                           Each MME Service Routine must use the
      934     9188                           MME number to decide which MME needs to be serviced.
      935     9189
      936     9190                           Parameters passed from the subexec are either in
      937     9191                           MREG or MME.  These 2 structures are
      938     9192                           restored prior to returning to the subexec, so
      939     9193                           that return information can be returned through
      940     9194                           them.  If this is not sufficient,  MME_INSTR$
      941     9195                           allows access to the subexec's memory.
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:33   
      942     9196                           RETURN_DELTA is returned to the MME Handler, and
      943     9197                           indicates how many instructions past the MME
      944     9198                           instruction control should be returned to.
      945     9199
      946     9200                           In general, standard GCOS and TOLTS defined MME's
      947     9201                           are serviced by TOG$GCOS_MMES and
      948     9202                           TOO$TOLTS_MMES.  Each of the subexecs
      949     9203                           have their own MME Service Routine for their
      950     9204                           unique MME's.
      951     9205
      952     9206                           All MME Service Routines return here when complete
      953     9207                           except for MME GELBAR and MME GEENDC.  On
      954     9208                           return, data is set up to be returned to the subexec
      955     9209                           via registers and the 6 words following the MME.
      956     9210                           The return IC is calculated using RETURN_DELTA and
      957     9211                           the address of the MME instruction.
      958     9212
      959     9213                           Finally, TOF$6XAUTO is called, which in turn
      960     9214                           calls the CP6 system subroutine 6XAUTO which
      961     9215                           pops the current auto frame and updates the
      962     9216                           pointer to the current auto frame in word 0 of
      963     9217                           the auto segment.  This is necessary because
      964     9218                           asynchronous PL6 procedures call 6ASYNC
      965     9219                           to establish a new auto frame.  6ASYNC
      966     9220                           first re-establishes PR2 from a current copy
      967     9221                           stored in word 0 of the auto segment.  However,
      968     9222                           M$TRTN does not update this to reflect an auto frame
      969     9223                           being popped off.  So in essence, the auto
      970     9224                           frame keeps growing forever.  By calling 6XAUTO
      971     9225                           ourselves, we both pop the current auto frame and
      972     9226                           update word 0 of the auto segment.
      973     9227
      974     9228                           This special routine may be taken out when LADC
      975     9229                           fixes up M$TRTN.
      976     9230
      977     9231                           M$TRTN is called to pop the current TCB
      978     9232                           frame, restore the environment at the time of
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:34   
      979     9233                           the MME and return to the subexec.  The ALTRET
      980     9234                           from M$TRTN (should it occur) will cause a
      981     9235                           Lock Up fault by branching to itself since
      982     9236                           there is no auto frame at this point and we cannot
      983     9237                           handle the ALTRET.
      984     9238        */
      985     9239
      986     9240    1   TOF$MME_HANDLER: PROC;
      987     9241
      988     9242           %FPT_TRTN (FPTN = TRTN_FPT);
      989     9259
      990     9260        /* Code */
      991     9261
      992     9262    2      CALL TOF$GET_MME_DATA;
      993     9263    2      CALL TOF$SERVICE_OUTSTANDING_IO (MME.INST.NO) ;
      994     9264    2      IF TOQ$DCP.PF.DISP_MMES
      995     9265    3      THEN DO ;
      996     9266    3              TOQ$DCP.PF.REASON = %MME_FT ;
      997     9267    3              TOQ$DCP.MME = MME.INST.NO ;
      998     9268    3              CALL TOQ$DEBUG ;
      999     9269    3           END /* THEN */ ;
     1000     9270    2      ELSE /* Display of MMES not requested. */ ;
     1001     9271    2      IF MME.INST.NO >  0
     1002     9272    2      THEN CALL TOF$SELECT_GCOS_MME (MME.INST.NO) ;
     1003     9273    2      ELSE CALL TOF$SELECT_TND_MME (MME.INST.NO) ;
     1004     9274    2      CALL TOF$RET_MME_DATA;
     1005     9275    2      CALL TOF$FIX_RET_IC;
     1006     9276    2      CALL TOF_TRTN (TRTN_FPT);
     1007     9277
     1008     9278        /* END TOF$MME_HANDLER */
     1009     9279        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:35   
     1010     9280        /*I* NAME:         TOF$SERVICE_OUTSTANDING_IO
     1011     9281             PURPOSE:      Complete any outstanding I/O's
     1012     9282             DESCRIPTION: This procedure calls the DISPATCHER so that
     1013     9283                          any outstanding i/o's can be serviced.
     1014     9284        */
     1015     9285
     1016     9286    2   TOF$SERVICE_OUTSTANDING_IO: PROC (MME_NUMBER) ;
     1017     9287
     1018     9288    3      DCL MME_NUMBER  SBIN HALF HALIGNED ;
     1019     9289
     1020     9290        /* Code */
     1021     9291
     1022     9292    3      IF MME_NUMBER = %GEENDC
     1023     9293    3      THEN /* Don't call DISPATCHER if servicing a MME GEENDC */ ;
     1024     9294    4      ELSE DO;
     1025     9295    4              REQUEST_TYPE = %DRT_SERVICE;
     1026     9296    4              CALL TOD$DISPATCHER(REQUEST_TYPE,,);
     1027     9297    4           END;
     1028     9298    3      RETURN ;
     1029     9299
     1030     9300    3   END TOF$SERVICE_OUTSTANDING_IO ;
     1031     9301        %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:36   
     1032     9302        /*I* NAME:        TOF$SELECT_GCOS_MME
     1033     9303             PURPOSE:     Selects positive MME number
     1034     9304             DESCRIPTION: This procedure determines which routine to call
     1035     9305                          for a GCOS (positive) MME number.
     1036     9306        */
     1037     9307
     1038     9308    2   TOF$SELECT_GCOS_MME: PROC (MME_NUMBER) ;
     1039     9309
     1040     9310    3      DCL MME_NUMBER  SBIN HALF HALIGNED ;
     1041     9311
     1042     9312        /* Code */
     1043     9313
     1044     9314    4      DO CASE (MME_NUMBER);
     1045     9315    4         CASE (%GECALL, %GEMORE, %GEMREL, %GERELC,
     1046     9316    4              %GEROAD, %GESNAP, %GETIME, %GEWAKE) ;
     1047     9317    4            CALL TOO$TOLTS_MMES (MME,MREG,MME_INSTR$,RETURN_DELTA);
     1048     9318    4         CASE (%GEENDC, %GEINOS, %GELBAR) ;
     1049     9319    4            CALL TOG$GCOS_MMES (MME,MREG,MME_INSTR$,RETURN_DELTA);
     1050     9320    4         CASE (%GEROUT);
     1051     9321    4            CALL TOC$COLTS (MME,MREG,MME_INSTR$,RETURN_DELTA);
     1052     9322    4         CASE (%GEFINI, %GMODES, %GMODER) ;
     1053     9323    4            TOF_ERROR_CODE.ERR# = %E$ILLMME ;
     1054     9324    4            CALL TOX$ERROR (TOF_ERROR_CODE) ;
     1055     9325    4         CASE (ELSE);
     1056     9326    4            TOF_ERROR_CODE.ERR# = %E$INVMME ;
     1057     9327    4            CALL TOX$ERROR (TOF_ERROR_CODE) ;
     1058     9328    4      END /* CASE */ ;
     1059     9329    3      RETURN ;
     1060     9330
     1061     9331    3   END TOF$SELECT_GCOS_MME ;
     1062     9332        %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:37   
     1063     9333        /*I* NAME:        TOF$SELECT_TND_MME
     1064     9334             PURPOSE:     Selects negative MME number
     1065     9335             DESCRIPTION: This procedure determines which routine to call
     1066     9336                          for a TND (negative) MME number.
     1067     9337        */
     1068     9338
     1069     9339    2   TOF$SELECT_TND_MME: PROC (MME_NUMBER) ;
     1070     9340
     1071     9341    3      DCL MME_NUMBER  SBIN HALF HALIGNED ;
     1072     9342
     1073     9343        /* Code */
     1074     9344
     1075     9345    4      DO CASE (-MME_NUMBER);
     1076     9346    4         CASE (%ABSTIM, %ACCWRT, %CONTML, %DISPRT,
     1077     9347    4              %GEPROC, %PROCTM, %READIO, %SETPR2,
     1078     9348    4              %SETPRT, %SETTYP, %TADIOD, %TERMIN,
     1079     9349    4              %TOLDIS, %TOLGON, %TOLTIN, %TRACIO) ;
     1080     9350    4            CALL TOO$TOLTS_MMES (MME,MREG,MME_INSTR$,RETURN_DELTA);
     1081     9351    4         CASE (%CLEARQ);
     1082     9352    4            CALL TOG$GCOS_MMES (MME,MREG,MME_INSTR$,RETURN_DELTA);
     1083     9353    4         CASE (%ALCMCA, %ALLOCR, %ASGPAT, %CHANTM, %DEALCP, %EXPDEV,
     1084     9354    4                    %GETCSC, %GETLIN, %HUNGTM, %IOCONS,
     1085     9355    4                    %IPCWDT, %LPWDT, %LODIMG, %LODVFC,
     1086     9356    4                    %PACMAN, %POINIT, %PRTRAN, %RELEAS, %RELLNK,
     1087     9357    4                    %RLSMPC, %RLSPAT, %SCTCMP,
     1088     9358    4                    %TESTIO, %UNSPEC, %WRDUMP) ;
     1089     9359    4            CALL TOP$POLTS (MME,MREG,MME_INSTR$,RETURN_DELTA);
     1090     9360    4         CASE (%COMWD, %CPUASG, %CPUREL, %HISREG, %RETCPU, %RETRY,
     1091     9361    4                    %SCUASG, %SCUREL, %TAKCPU) ;
     1092     9362    4            CALL TOS$SOLTS (MME,MREG,MME_INSTR$,RETURN_DELTA);
     1093     9363    4         CASE (%CATADT, %DATADT, %FREEZE, %UNFREZ) ;
     1094     9364    4            CALL TOM$MOLTS (MME,MREG,MME_INSTR$,RETURN_DELTA);
     1095     9365    4         CASE (%COINIT, %FEPTYP, %LOGFEP) ;
     1096     9366    4            CALL TOC$COLTS (MME,MREG,MME_INSTR$,RETURN_DELTA);
     1097     9367                 %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:38   
     1098     9368    4         CASE (%ALLCOFF, %DECUSG, %ECLLOG,
     1099     9369    4                    %FEPIO, %FEPMBX, %FEPNUM, %FNDSCT, %FPINIT,
     1100     9370    4                    %GETRLP, %GETSEG, %GIVSEG, %HYPMOD, %NEWLIN,
     1101     9371    4                    %PUNOFF, %QUESYS, %RELCMP, %RELMEM, %RSCRRD, %RSIQDT,
     1102     9372    4                    %SESIAT, %SESSDA, %SESTRM, %SETPUN,
     1103     9373    4                    %SUSCMP, %SYNDRM, %SYSLNK,
     1104     9374    4                    %TYPTID, %WRKACT, %WRKINQ, %WRKSRT, %WRKTRM) ;
     1105     9375    4            TOF_ERROR_CODE.ERR# = %E$ILLMME ;
     1106     9376    4            CALL TOX$ERROR (TOF_ERROR_CODE) ;
     1107     9377    4         CASE (ELSE);
     1108     9378    4            TOF_ERROR_CODE.ERR# = %E$INVMME ;
     1109     9379    4            CALL TOX$ERROR (TOF_ERROR_CODE) ;
     1110     9380    4      END /* CASE */ ;
     1111     9381    3      RETURN ;
     1112     9382
     1113     9383    3   END TOF$SELECT_TND_MME ;
     1114     9384        %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:39   
     1115     9385        /*I* NAME:    TOF$RET_MME_DATA
     1116     9386             DESCRIPTION:
     1117     9387        RETURNS DATA FROM STRUCTURES MREG AND MME TO EXCEPTION STACK FRAME.
     1118     9388        AND GMAP PROGRAM.  M$TRTN AUTOMATICALLY RETURNS DATA TO STACK
     1119     9389        FRAME.  THIS ROUTINE RETURNS 6 WORDS TO THE LOCATIONS
     1120     9390        IMMEDIATELY FOLLOWING THE MME INSTRUCTION.
     1121     9391        */
     1122     9392
     1123     9393    2   TOF$RET_MME_DATA: PROC;
     1124     9394
     1125     9395    3      DCL MME_GMAP_DATA (0:6) UBIN (36) BASED ALIGNED;
     1126     9396
     1127     9397        /* Code */
     1128     9398
     1129     9399    3      TRTN_FPT.REGS_ = VECTOR (MREG);
     1130     9400    3      MME_INSTR$ -> MME_GMAP_DATA = MME;
     1131     9401    3      RETURN;
     1132     9402
     1133     9403    3   END TOF$RET_MME_DATA;
     1134     9404        %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:40   
     1135     9405        /*I* NAME:    TOF$FIX_RET_IC
     1136     9406             DESCRIPTION:
     1137     9407        FOLLOWING MME SERVICE, USES RETURN_DELTA TO FIX UP IC TO RETURN TO.
     1138     9408        RETURN_DELTA IS NUMBER OF INSTRUCTIONS PAST MME INSTRUCTION TO
     1139     9409        RETURN TO.  IT MAY BE POSITIVE OR NEGATIVE.  RETURN IC IS
     1140     9410        CALCULATED BY ADDING RETURN DELTA TO MME INSTRUCTION IC.  RETURN
     1141     9411        IC    IS STORED IN FPT.  CALL TO M$TRTN RETURNS IT TO EXCEPTION
     1142     9412        STACK; CONTROL GOES TO RETURN IC WHEN STACK FRAME IS POPPED.
     1143     9413        */
     1144     9414
     1145     9415    2   TOF$FIX_RET_IC: PROC;
     1146     9416
     1147     9417    3      TRTN_FPT.V.IC# = MME_INSTR.ADR + RETURN_DELTA;
     1148     9418    3      RETURN;
     1149     9419
     1150     9420    3   END TOF$FIX_RET_IC;
     1151     9421    2   END TOF$MME_HANDLER ;
     1152     9422    1   END TOF$FAULTS ;

PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:41   
--  Include file information  --

   TO_PERR_C.:E05TOU  is referenced.
   TOT_RQSTS_E.:E05TOU  is referenced.
   TOT_TOLTS_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure TOF$FAULTS.

   Procedure TOF$FAULTS requires 1151 words for executable code.
   Procedure TOF$FAULTS requires 38 words of local(AUTO) storage.

    No errors detected in file TOF$FAULTS.:E05TSI    .

PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:42   

 Object Unit name= TOF$FAULTS                                 File name= TOF$FAULTS.:E05TOU
 UTS= JUL 30 '97 06:23:08.52 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    28     34  TOF$FAULTS
    2   Proc  even  none  1151   2177  TOF$FAULTS
    3  RoData even  none     7      7  TOF$FAULTS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes     Async       0  TOF$FAULTS

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    1      0  TOF$BAR                            1      2  TOF$GELBAR_FAULT_VECTOR
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:43   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 TOX$SCREECH
         yes           Std       1 TOX$ERROR
         yes           Std       0 TOQ$DEBUG
         yes           Std       1 TOF_TRTN
         yes           Std       3 TOD$DISPATCHER
         yes           Std       4 TOO$TOLTS_MMES
         yes           Std       4 TOG$GCOS_MMES
         yes           Std       4 TOC$COLTS
         yes           Std       4 TOM$MOLTS
         yes           Std       4 TOP$POLTS
         yes           Std       4 TOS$SOLTS
                       nStd      0 X66_AAUTO
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AAUNWIND
                       nStd      0 X66_AARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                TOD$SPA$
     TOF$GELBAR_ADDRESS_REGS               TOF$GELBAR_EIS_REGS                   TOF$GELBAR_INDICATORS
     TOF$GELBAR_REGISTERS                  TOF$SFR_RV                            TOQ$DCP
     TOT$ECP                               B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:44   


        1        1        /*M* TOF$FAULTS    TOLTS FAULT HANDLER program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P* NAME:         TOF$FAULTS
       12       12             PURPOSE:      Handles all faults for TOLTS.
       13       13             DESCRIPTION:  1.  Use of M$TRAP makes CP6 pass all faults in
       14       14                               TOLTS to TOF$FAULTS.
       15       15                           2.  Legitimate faults to be handled are either
       16       16                               MME faults from subexecutives requesting
       17       17                               service of TOLTS or Test Page faults
       18       18                               occurring under GELBAR.  All other faults
       19       19                               cause TOLTS to abort.
       20       20             LAST UPDATE:  07/12/85 (C01D integration)
       21       21        */
       22       22        %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:45   
       23       23        /*F* NAME:         TOF$FAULTS
       24       24             PURPOSE:      Handles all faults for TOLTS.
       25       25             DESCRIPTION:  Procedure Nesting Hierarchy
       26       26
       27       27             TOF$FAULTS: procedure ASYNC
       28       28                TOF$RESET_GELBAR_TIMER: procedure
       29       29                TOF$SBAR_INSTR: procedure
       30       30                   TOF$CALC_ADDR: procedure (ADDRESS)
       31       31                TOF$SAVE_HISTORY_REGS: procedure
       32       32                TOF$TEST_PAGE_FAULT: procedure
       33       33                TOF$SAVE_GELBAR_REGS: procedure
       34       34                   TOF$UPDATE_GELBAR_SPA: procedure
       35       35                   TOF$GET_GELBAR_FTYPE: procedure (F_TYPE)
       36       36                   TOF$GET_GELBAR_FVECTOR: procedure
       37       37                TOF$GET_MME_DATA: procedure
       38       38                TOF$GET_EXCEPTION_CODE: procedure (ECC,SUB_CODE)
       39       39                TOF$MME_HANDLER: procedure
       40       40                   TOF$SERVICE_OUTSTANDING_IO: procedure (MME_NUMBER)
       41       41                   TOF$SELECT_GCOS_MME: procedure (MME_NUMBER)
       42       42                   TOF$SELECT_TND_MME: procedure (MME_NUMBER)
       43       43                   TOF$RET_MME_DATA: procedure
       44       44                   TOF$FIX_RET_IC: procedure
       45       45
       46       46             REFERENCE:    CP-6 Release C0K0
       47       47                           Curt Andes / Scott Sheppard
       48       48        */
       49       49        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:46   
       50       50        /*D* NAME:         TOF$FAULTS
       51       51             CALL:         None; entered asynchronously by CP6 operating
       52       52                           System whenever a fault occurs.
       53       53             INPUT:        A safestore frame on the TCB, described by B$EXCFR.
       54       54             DESCRIPTION:  Trap control on all faults occurring within TOLTS
       55       55                           is established by calling M$TRAP.
       56       56                           at TOLTS initialization time.  GELBAR timer runout
       57       57                           faults will also be directed to TOF$FAULTS.
       58       58                           This is established when a MME GELBAR is invoked
       59       59                           and M$STIMER is called to time out the execution
       60       60                           of a test page.
       61       61
       62       62                           Therefore, TOF$FAULTS will be entered under the
       63       63                           following conditions:
       64       64
       65       65                           a. A MME fault caused by a subexecutive requesting
       66       66                              a Master Mode type service of TOLTS.
       67       67                           b. A fault (of any type) caused by a test page
       68       68                              running under GELBAR and the control of a
       69       69                              subexecutive.
       70       70                           c. An IPR fault caused by SOLTS executing a SBAR
       71       71                              instruction which is illegal in the NSA
       72       72                              environment.
       73       73                           d. A legitimate fault occurred in TOLTS and the
       74       74                              program must be terminated.
       75       75
       76       76                           The action taken by TOF$FAULTS in each of the cases
       77       77                           is:
       78       78
       79       79                           a. The appropriate MME service routine is
       80       80                              called, the requested service performed and
       81       81                              the results returned to the requesting
       82       82                              subexecutive.
       83       83                           b. The fault is unconditionally returned to
       84       84                              a fault handler in the subexecutive to process
       85       85                              it on behalf of the test page.
       86       86                           c. The SBAR instruction is simulated for SOLTS.
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:47   
       87       87                           d. TOLTS terminates.
       88       88
       89       89                           On entry, condition c above is checked for.
       90       90                           TOF$SBAR_INSTR is called always to
       91       91                           check for this condition and handle it.  It returns
       92       92                           to the mainline if the fault was not caused by a
       93       93                           SBAR instruction; otherwise, the instruction is
       94       94                           simulated and return is made directly to the
       95       95                           instruction following the SBAR.
       96       96
       97       97                           Next condition b above is checked for.
       98       98                           The flag TOF$BAR.GELBAR_MODE is set if a
       99       99                           test page was running in GELBAR mode, and the fault
      100      100                           should be returned to the subexec for processing.
      101      101                           If this is the case, TOF$TEST_PAGE_FAULT
      102      102                           is called to return the fault to the subexecutive.
      103      103
      104      104                           If neither of the above 2 conditions exist,
      105      105                           the fault type is determined, and the appropriate
      106      106                           serivce or termination routine called.  The fault
      107      107                           codes are extracted from the TCB frame, and either
      108      108                           TOF$MME_HANDLER or TOX$SCREECH called.
      109      109
      110      110                           In most cases, TOF$MME_HANDLER will call the
      111      111                           appropriate MME service routine, and then return
      112      112                           to the subexecutive.
      113      113        */
      114      114        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:48   
      115      115        TOF$FAULTS: PROC ASYNC;

    115  2 000000   000000 700200 xent  TOF$FAULTS   TSX0  ! X66_AAUTO
         2 000001   000046 000000                    ZERO    38,0

      116      116
      117      117        /* Include Files */
      118      118
      119      119           %INCLUDE CP_6;
      120     5678           %INCLUDE CP_6_SUBS;
      121     6218           %INCLUDE TOT_TOLTS_M ;
      122     7336           %INCLUDE TOT_RQSTS_E ;
      123     7378           %INCLUDE TO_PERR_C ;
      124     7963
      125     7964        /* Fault Frames */
      126     7965
      127     7966           %B$EXCFR;
      128     7984           %B$FLT;
      129     8036           %B$HR_DPSE;
      130     8040           %B$HR_ELS1;
      131     8043           %B$HR_L66;
      132     8047           %B$TCB (STCLASS = "BASED (B$TCB$)") ;
      133     8050           %SUB_EXC;
      134     8097
      135     8098        /* External Entry Points */
      136     8099
      137     8100    1      DCL TOC$COLTS           ENTRY (4);
      138     8101    1      DCL TOD$DISPATCHER      ENTRY (3);
      139     8102    1      DCL TOG$GCOS_MMES       ENTRY (4);
      140     8103    1      DCL TOM$MOLTS           ENTRY (4);
      141     8104    1      DCL TOO$TOLTS_MMES      ENTRY (4);
      142     8105    1      DCL TOP$POLTS           ENTRY (4);
      143     8106    1      DCL TOQ$DEBUG           ENTRY ;
      144     8107    1      DCL TOS$SOLTS           ENTRY (4);
      145     8108    1      DCL TOX$ERROR           ENTRY (1) ;
      146     8109    1      DCL TOX$SCREECH         ENTRY (1) ;
      147     8110    1      DCL TOF_TRTN            ENTRY (1) ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:49   
      148     8111           %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:50   
      149     8112        /* External Variables */
      150     8113
      151     8114    1      DCL B$TCB$                     PTR SYMREF ALIGNED ;
      152     8115    1      DCL TOD$SPA$                   PTR SYMREF ALIGNED ;
      153     8116           %TOF$BAR (STCLASS = "STATIC SYMDEF") ;
      154     8139    1      DCL TOF$GELBAR_ADDRESS_REGS    (0:7) PTR SYMREF ALIGNED ;
      155     8140    1      DCL TOF$GELBAR_EIS_REGS        (0:7) UBIN WORD SYMREF ALIGNED ;
      156     8141    1      DCL 1 TOF$GELBAR_INDICATORS SYMREF ALIGNED,
      157     8142    1            2 *                      UBIN HALF UNAL,
      158     8143    1            2 I,
      159     8144    1              3 *                    UBIN (12) UNAL,
      160     8145    1              3 EIS_INTERRUPT        UBIN (1) UNAL,
      161     8146    1              3 *                    UBIN(5) UNAL;
      162     8147    1      DCL TOF$GELBAR_FAULT_VECTOR    UBIN WORD STATIC SYMDEF ALIGNED ;
      163     8148           %MME (FPTN    = TOF$GELBAR_REGISTERS,
      164     8149                 STCLASS = SYMREF) ;
      165     8170    1      DCL TOF$SFR_RV                 REMEMBER SYMREF DALIGNED;
      166     8171           %TOQ$DCP (STCLASS = SYMREF) ;
      167     8203           %TOT$ECP (STCLASS = SYMREF) ;
      168     8252           %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:51   
      169     8253        /* Variables */
      170     8254
      171     8255           %MME ;
      172     8276           %MREG ;
      173     8298           %TOD$SPA (STCLASS = "BASED (TOD$SPA$)") ;
      174     8350           %MME_INSTR$ ;
      175     8353    1      DCL 1 MME_INSTR REDEF MME_INSTR$,
      176     8354    1            2 ADR    UBIN (18) UNAL,
      177     8355    1            2 SEGID  UBIN (18) UNAL;
      178     8356           %RETURN_DELTA ;
      179     8359    1      DCL ECC                        UBIN HALF HALIGNED ;
      180     8360    1      DCL GELBAR_TIME_USED           UBIN WORD ALIGNED ;
      181     8361    1      DCL IC_IN_GELBAR               UBIN HALF HALIGNED ;
      182     8362    1      DCL MME_IR                     BIT (18) HALIGNED ;
      183     8363    1      DCL REQUEST_TYPE               UBIN WORD ALIGNED ;
      184     8364    1      DCL SUB_CODE                   UBIN HALF HALIGNED ;
      185     8365           %VLP_ERRCODE (FPTN = TOF_ERROR_CODE,
      186     8366                         FCG  = 'TO',
      187     8367                         MID  = 'F',
      188     8368                         SEV  = 0) ;
      189     8413           %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:52   
      190     8414        /*I* NAME:         TOF$FAULTS, detailed info on main loop.
      191     8415             DESCRIPTION:  TOF$SBAR_INSTR IS always called to check to see if
      192     8416                           the  fault  was  caused  by  a SBAR instruction in
      193     8417                           SOLTS.   If it  was, the  instruction is simulated
      194     8418                           and  a  return  made  directly  to  SOLTS from the
      195     8419                           subroutine.   If TOF$BAR.GELBAR_MODE is  set, it means
      196     8420                           that the  fault was caused by  a test page running
      197     8421                           under  GELBAR.   TOF$TEST_PAGE_FAULT  is called to
      198     8422                           return the fault to  the subexecutive for the test
      199     8423                           page.   Otherwise,  the  Exception  Condition Code
      200     8424                           (ECC)  and its  Subcode are  fetched from the last
      201     8425                           frame  on  the  Task  Control  Block  (TCB) by the
      202     8426                           subroutine TOF$GET_EXCEPTION_CODE.  If ECC = 6 and
      203     8427                           SUB_CODE=0,  then  the  fault  is a programmed MME
      204     8428                           fault.   (Derail  and  Fault  Tag  faults are also
      205     8429                           programmed  faults, making  the check  on SUB_CODE
      206     8430                           necessary.)  TOF$MME_HANDLER  is called to process
      207     8431                           the  MME.   All  MME  Service Routines will return
      208     8432                           control to the MME Handler following completion of
      209     8433                           the MME service.  The MME Handler will then return
      210     8434                           the results and control to the requesting subexec.
      211     8435                           The  2 exceptions to  this are MME  GELBAR and MME
      212     8436                           GEENDC.    Each  of  these   use  the  PL6  UNWIND
      213     8437                           construct to transfer out of the MME Handler in an
      214     8438                           orderly  manner  (i.e.,  don't  leave stack frames
      215     8439                           lying   around).   For  all   other  fault  codes,
      216     8440                           TOX$SCREECH  is  called  to  print  out the system
      217     8441                           error message
      218     8442        */
      219     8443        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:53   
      220     8444        /* Code */
      221     8445
      222     8446    1      IF TOF$BAR.GELBAR_MODE

   8446  2 000002   000001 234000 1                  SZN     TOF$BAR+1
         2 000003   000023 605000 2                  TPL     s:8455

      223     8447    2      THEN DO ;

      224     8448    2              CALL TOF$RESET_GELBAR_TIMER;

   8448  2 000004   000104 701000 2                  TSX1    TOF$RESET_GELBAR_TIMER
         2 000005   000000 011000                    NOP     0

      225     8449    2              CALL TOF$SBAR_INSTR;

   8449  2 000006   000135 701000 2                  TSX1    TOF$SBAR_INSTR
         2 000007   000000 011000                    NOP     0

      226     8450    2              CALL TOF$SAVE_HISTORY_REGS ;

   8450  2 000010   000523 701000 2                  TSX1    TOF$SAVE_HISTORY_REGS
         2 000011   000000 011000                    NOP     0

      227     8451    2              CALL TOF$GET_EXCEPTION_CODE (ECC,SUB_CODE);

   8451  2 000012   200031 630500                    EPPR0   SUB_CODE,,AUTO
         2 000013   200034 450500                    STP0    @ECC+1,,AUTO
         2 000014   200024 631500                    EPPR1   ECC,,AUTO
         2 000015   200033 451500                    STP1    SUB_CODE+2,,AUTO
         2 000016   001330 701000 2                  TSX1    TOF$GET_EXCEPTION_CODE
         2 000017   000000 011000                    NOP     0

      228     8452    2              CALL TOF$TEST_PAGE_FAULT ;

   8452  2 000020   000730 701000 2                  TSX1    TOF$TEST_PAGE_FAULT
         2 000021   000000 011000                    NOP     0
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:54   

      229     8453    2           END /* THEN */ ;

   8453  2 000022   000103 710000 2                  TRA     s:8468

      230     8454    2      ELSE DO;

      231     8455    2              CALL TOF$SBAR_INSTR;

   8455  2 000023   000135 701000 2                  TSX1    TOF$SBAR_INSTR
         2 000024   000000 011000                    NOP     0

      232     8456    2              CALL TOF$GET_EXCEPTION_CODE (ECC,SUB_CODE);

   8456  2 000025   200031 630500                    EPPR0   SUB_CODE,,AUTO
         2 000026   200034 450500                    STP0    @ECC+1,,AUTO
         2 000027   200024 631500                    EPPR1   ECC,,AUTO
         2 000030   200033 451500                    STP1    SUB_CODE+2,,AUTO
         2 000031   001330 701000 2                  TSX1    TOF$GET_EXCEPTION_CODE
         2 000032   000000 011000                    NOP     0

      233     8457    3              DO CASE (ECC);

   8457  2 000033   200024 235100                    LDA     ECC,,AUTO
         2 000034   000022 771000                    ARL     18
         2 000035   000004 135007                    SBLA    4,DL
         2 000036   000003 115007                    CMPA    3,DL
         2 000037   000041 602005 2                  TNC     s:8457+6,AL
         2 000040   000073 710000 2                  TRA     s:8466
         2 000041   000062 710000 2                  TRA     s:8463
         2 000042   000073 710000 2                  TRA     s:8466
         2 000043   000044 710000 2                  TRA     s:8459

      234     8458    3                 CASE (%ECC_PROG#) ;

      235     8459    3                    IF SUB_CODE = %SC_MME#

PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:55   
   8459  2 000044   200031 220100                    LDX0    SUB_CODE,,AUTO
         2 000045   000051 601000 2                  TNZ     s:8461

      236     8460    3                    THEN CALL TOF$MME_HANDLER;

   8460  2 000046   001347 701000 2                  TSX1    TOF$MME_HANDLER
         2 000047   000000 011000                    NOP     0
         2 000050   000103 710000 2                  TRA     s:8468

      237     8461    3                    ELSE CALL TOX$SCREECH (B$TCB$->B$TCB.STK$->B$EXCFR.ERR) ;

   8461  2 000051   000000 470400 xsym               LDP0    B$TCB$
         2 000052   000001 471500                    LDP1    1,,PR0
         2 000053   100102 633500                    EPPR3   66,,PR1
         2 000054   200042 453500                    STP3    REG+1,,AUTO
         2 000055   200042 630500                    EPPR0   REG+1,,AUTO
         2 000056   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000057   000000 701000 xent               TSX1    TOX$SCREECH
         2 000060   000000 011000                    NOP     0
         2 000061   000103 710000 2                  TRA     s:8468

      238     8462    3                 CASE (%ECC_PMME#) ;

      239     8463    3                    TOF_ERROR_CODE.ERR# = %E$UNEXMONFLT ;

   8463  2 000062   000003 236000 1                  LDQ     TOF_ERROR_CODE
         2 000063   000000 376000 3                  ANQ     0
         2 000064   001160 276007                    ORQ     624,DL
         2 000065   000003 756000 1                  STQ     TOF_ERROR_CODE

      240     8464    3                    CALL TOX$ERROR (TOF_ERROR_CODE) ;

   8464  2 000066   000001 630400 3                  EPPR0   1
         2 000067   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000070   000000 701000 xent               TSX1    TOX$ERROR
         2 000071   000000 011000                    NOP     0
         2 000072   000103 710000 2                  TRA     s:8468
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:56   

      241     8465    3                 CASE (ELSE);

      242     8466    3                    CALL TOX$SCREECH (B$TCB$ -> B$TCB.STK$ -> B$EXCFR.ERR) ;

   8466  2 000073   000000 470400 xsym               LDP0    B$TCB$
         2 000074   000001 471500                    LDP1    1,,PR0
         2 000075   100102 633500                    EPPR3   66,,PR1
         2 000076   200042 453500                    STP3    REG+1,,AUTO
         2 000077   200042 630500                    EPPR0   REG+1,,AUTO
         2 000100   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000101   000000 701000 xent               TSX1    TOX$SCREECH
         2 000102   000000 011000                    NOP     0

      243     8467    3              END /* CASE */ ;

      244     8468    2           END /* ELSE */ ;

   8468  2 000103   002176 710000 2                  TRA     s:9422

      245     8469
      246     8470        /* END TOF$FAULTS */
      247     8471        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:57   
      248     8472        /*I* NAME:         TOF$RESET_GELBAR_TIMER
      249     8473             INPUT:        None.
      250     8474             OUTPUT:       Timer timeout canceled.
      251     8475             DESCRIPTION:  M$TTIMER is called to cancel the timer on the test
      252     8476                           pages's execution which was started when MME GELBAR
      253     8477                           was invoked for the page.  All parameters are
      254     8478                           compiled into the FPT.
      255     8479
      256     8480                           GELBAR_TIME_USED is calculated using word 18
      257     8481                           of the Slave Prefix Area and a value returned in
      258     8482                           the M$TTIMER FPT.  This is used later to update
      259     8483                           the SPA.
      260     8484        */
      261     8485
      262     8486    1   TOF$RESET_GELBAR_TIMER: PROC;

   8486  2 000104   200032 741300       TOF$RESET_G* STX1  ! SUB_CODE+1,,AUTO

      263     8487
      264     8488    2      DCL TIME_REMAINING UBIN(36) STATIC;
      265     8489           %FPT_TTIMER (FPTN = TTIMER_FPT,
      266     8490                        UTYPE = TUN,
      267     8491                        UNITS = TIME_REMAINING,
      268     8492                        CANCEL = YES);
      269     8507
      270     8508        /* Code */
      271     8509
      272     8510    2      IF TOT$ECP.SUBEXEC.CURRENT = %SOLTS | TOT$ECP.SUBEXEC.CURRENT = %PACT

   8510  2 000105   400000 220003                    LDX0    -131072,DU
         2 000106   000007 235000 xsym               LDA     TOT$ECP+7
         2 000107   000013 115007                    CMPA    11,DL
         2 000110   000112 600000 2                  TZE     s:8510+5
         2 000111   000000 220003                    LDX0    0,DU
         2 000112   400000 222003                    LDX2    -131072,DU
         2 000113   000014 115007                    CMPA    12,DL
         2 000114   000116 600000 2                  TZE     s:8510+9
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:58   
         2 000115   000000 222003                    LDX2    0,DU
         2 000116   000000 636012                    EAQ     0,X2
         2 000117   200042 756100                    STQ     REG+1,,AUTO
         2 000120   000000 636010                    EAQ     0,X0
         2 000121   200042 276100                    ORQ     REG+1,,AUTO
         2 000122   000133 601000 2                  TNZ     s:8516

      273     8511    2      THEN /* Do not reset timer for SOLTS or PACT */ ;
      274     8512    3      ELSE DO ;

      275     8513    3              CALL M$TTIMER (TTIMER_FPT) ;

   8513  2 000123   000006 630400 1                  EPPR0   TTIMER_FPT
         2 000124   010006 713400                    CLIMB   4102
         2 000125   400400 401760                    pmme    nvectors=2

      276     8514    3              GELBAR_TIME_USED = (TOD$SPA.WD18_ / 64) - TIME_REMAINING;

   8514  2 000126   000000 470400 xsym               LDP0    TOD$SPA$
         2 000127   000022 236100                    LDQ     18,,PR0
         2 000130   000006 772000                    QRL     6
         2 000131   000004 136000 1                  SBLQ    TIME_REMAINING
         2 000132   200025 756100                    STQ     GELBAR_TIME_USED,,AUTO

      277     8515    3           END /* ELSE */ ;

      278     8516    2      RETURN;

   8516  2 000133   200032 221300                    LDX1  ! SUB_CODE+1,,AUTO
         2 000134   000001 702211                    TSX2  ! 1,X1

      279     8517
      280     8518    2   END TOF$RESET_GELBAR_TIMER;
      281     8519        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:59   
      282     8520        /*I* NAME:         TOF$SBAR_INSTR
      283     8521             INTERFACE:    TOF$CALC_ADDR
      284     8522             INPUT:        None
      285     8523             OUTPUT:       Returns the value of the simulated BAR to the
      286     8524                           effective address of the SBAR instruction.
      287     8525             DESCRIPTION:  Simulates the operation of the Store BAR (SBAR)
      288     8526                           instruction for SOLTS.  The SBAR instruction is
      289     8527                           illegal in NSA mode, but is used by Slave Mode
      290     8528                           SOLTS.  It is simulated in order to preserve a Slave
      291     8529                           Mode SOLTS that is common across all L66
      292     8530                           operating systems.
      293     8531
      294     8532                           The op codes of the even-odd pair in the TCB
      295     8533                           frame are checked to see if one of them is a SBAR
      296     8534                           instruction, op code = '550'O.  If neither is,
      297     8535                           a return is made to the mainline code of the Fault
      298     8536                           Handler.
      299     8537
      300     8538                           If one instruction is a SBAR, then TOF$CALC_ADDR
      301     8539                           is called to calculate the effective address
      302     8540                           of the instruction, taking into account bits
      303     8541                           0-17 of the instruction and the address register
      304     8542                           modification tag in bits 30-35.  TOF$CALC_ADDR
      305     8543                           returns an address relative to the ISR at the time
      306     8544                           of the fault.  The base address of shrunken ISR
      307     8545                           (relative to the normal ISR base) is added to
      308     8546                           ADDRESS so that it is an absolute address relative
      309     8547                           to the normal ISR.  This address is then used to
      310     8548                           return the value of TOF$BAR.CURRENT to SOLTS.
      311     8549                           TOF$BAR.CURRENT is a pseudo Base Address Register
      312     8550                           maintained by TOLTS for use in simulating GELBAR.
      313     8551        */
      314     8552        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:60   
      315     8553    1   TOF$SBAR_INSTR: PROC;

   8553  2 000135   200032 741300       TOF$SBAR_IN* STX1  ! SUB_CODE+1,,AUTO

      316     8554
      317     8555    2      DCL ADDRESS UBIN (18);
      318     8556    2      DCL INSTR$ PTR ALIGNED;
      319     8557    2      DCL 1 INSTRP REDEF INSTR$ ALIGNED,
      320     8558    2            2 ADR UBIN (18) UNAL,
      321     8559    2            2 SEGID UBIN (18) UNAL;
      322     8560    2      DCL 1 INSTR BASED (INSTR$) ALIGNED,
      323     8561    2            2 ADR UBIN(18) UNAL,
      324     8562    2            2 OP_CODE BIT(9) UNAL,
      325     8563    2            2 * UBIN(3) UNAL,
      326     8564    2            2 TM_TAG BIT(2) UNAL,
      327     8565    2            2 TD_TAG BIT(4) UNAL;
      328     8566    2      DCL 1 SBAR_LOCATION BASED ALIGNED,
      329     8567    2            2 BASE UBIN(9) UNAL,
      330     8568    2            2 SIZE UBIN(9) UNAL,
      331     8569    2            2 * UBIN (18) UNAL;
      332     8570    2      DCL SBAR$ PTR;
      333     8571    2      DCL 1 SBAR_PTR REDEF SBAR$,
      334     8572    2            2 ADR UBIN(18) UNAL,
      335     8573    2            2 SEGID UBIN(18) UNAL;
      336     8574           %FPT_TRTN (FPTN = TRTN_FPT);
      337     8591           %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:61   
      338     8592        /* Code */
      339     8593
      340     8594    2      INSTRP.ADR = B$TCB.STK$ -> B$EXCFR.IC + TOF$BAR.CURRENT.BASE * 512;

   8594  2 000136   000000 470400 xsym               LDP0    B$TCB$
         2 000137   000001 471500                    LDP1    1,,PR0
         2 000140   100004 236100                    LDQ     4,,PR1
         2 000141   000022 772000                    QRL     18
         2 000142   200042 756100                    STQ     REG+1,,AUTO
         2 000143   000000 236000 1                  LDQ     TOF$BAR
         2 000144   000022 772000                    QRL     18
         2 000145   777000 376007                    ANQ     -512,DL
         2 000146   200042 036100                    ADLQ    REG+1,,AUTO
         2 000147   000000 620006                    EAX0    0,QL
         2 000150   200034 740100                    STX0    INSTR$,,AUTO

      341     8595    2      INSTRP.SEGID = %IS_SEGID ;

   8595  2 000151   006000 222003                    LDX2    3072,DU
         2 000152   200034 442100                    SXL2    INSTR$,,AUTO

      342     8596    2      IF INSTR$ -> INSTR.OP_CODE ~= '550'O

   8596  2 000153   200034 471500                    LDP1    INSTR$,,AUTO
         2 000154   100000 236100                    LDQ     0,,PR1
         2 000155   777000 376007                    ANQ     -512,DL
         2 000156   550000 116007                    CMPQ    -77824,DL
         2 000157   000161 600000 2                  TZE     s:8599

      343     8597    2      THEN RETURN ;

   8597  2 000160   000001 702211                    TSX2  ! 1,X1

      344     8598    3      ELSE DO;

      345     8599    3              CALL TOF$CALC_ADDR(ADDRESS);

PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:62   
   8599  2 000161   200033 633500                    EPPR3   ADDRESS,,AUTO
         2 000162   200037 453500                    STP3    @MME_NUMBER+2,,AUTO
         2 000163   000221 701000 2                  TSX1    TOF$CALC_ADDR
         2 000164   000000 011000                    NOP     0

      346     8600    3              ADDRESS = ADDRESS + TOF$BAR.CURRENT.BASE * 512;

   8600  2 000165   200033 235100                    LDA     ADDRESS,,AUTO
         2 000166   000022 771000                    ARL     18
         2 000167   200042 755100                    STA     REG+1,,AUTO
         2 000170   000000 236000 1                  LDQ     TOF$BAR
         2 000171   000022 772000                    QRL     18
         2 000172   777000 376007                    ANQ     -512,DL
         2 000173   200042 036100                    ADLQ    REG+1,,AUTO
         2 000174   000000 620006                    EAX0    0,QL
         2 000175   200033 740100                    STX0    ADDRESS,,AUTO

      347     8601    3              SBAR_PTR.ADR = ADDRESS;

   8601  2 000176   200035 740100                    STX0    SBAR$,,AUTO

      348     8602    3              SBAR_PTR.SEGID = %IS_SEGID ;

   8602  2 000177   006000 221003                    LDX1    3072,DU
         2 000200   200035 441100                    SXL1    SBAR$,,AUTO

      349     8603    3              SBAR$ -> SBAR_LOCATION.BASE = TOF$BAR.CURRENT.BASE;

   8603  2 000201   200035 470500                    LDP0    SBAR$,,AUTO
         2 000202   000000 236000 1                  LDQ     TOF$BAR
         2 000203   000000 552140                    STBQ    0,'40'O,PR0

      350     8604    3              SBAR$ -> SBAR_LOCATION.SIZE = TOF$BAR.CURRENT.SIZE;

   8604  2 000204   000000 236000 1                  LDQ     TOF$BAR
         2 000205   000000 552120                    STBQ    0,'20'O,PR0

PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:63   
      351     8605    3              TRTN_FPT.REGS_ = VECTOR(NIL);

   8605  2 000206   000002 237000 3                  LDAQ    2
         2 000207   000014 757000 1                  STAQ    TRTN_FPT

      352     8606    3              TRTN_FPT.V.IC# = B$TCB.STK$ -> B$EXCFR.IC + 1;

   8606  2 000210   000000 471400 xsym               LDP1    B$TCB$
         2 000211   100001 473500                    LDP3    1,,PR1
         2 000212   300004 222100                    LDX2    4,,PR3
         2 000213   000001 623012                    EAX3    1,X2
         2 000214   000022 743000 1                  STX3    TRTN_FPT+6

      353     8607    3   SBAR_TO_GELBAR:
      354     8608    3              CALL M$TRTN(TRTN_FPT) ;

   8608  2 000215   000014 630400 1     SBAR_TO_GEL* EPPR0   TRTN_FPT
         2 000216   010012 713400                    CLIMB   4106
         2 000217   401000 401760                    pmme    nvectors=3

      355     8609    3           END /* ELSE */ ;

   8609  2 000220   000521 710000 2                  TRA     s:8679

      356     8610
      357     8611        /* END TOF$SBAR_INSTR */
      358     8612        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:64   
      359     8613        /*I* NAME:    TOF$CALC_ADDR
      360     8614             DESCRIPTION:
      361     8615        CALCULATES EFFECTIVE OPERAND ADDRESS FOR SBAR INSTRUCTION, ALLOWING
      362     8616        A LIMITED NUMBER OF ADDRESS MODIFICATIONS.  SEE CODE BELOW FOR
      363     8617        WHAT IS CURRENTLY ALLOWED.
      364     8618        */
      365     8619
      366     8620    2   TOF$CALC_ADDR: PROC (ADDRESS);

   8620  2 000221   200036 741300       TOF$CALC_AD* STX1  ! @MME_NUMBER+1,,AUTO

      367     8621
      368     8622    3      DCL ADDRESS UBIN(18);
      369     8623    3      DCL INDEX_REG UBIN(18);
      370     8624    3      DCL 1 REG,
      371     8625    3            2 UPPER UBIN(18) UNAL,
      372     8626    3            2 LOWER UBIN(18) UNAL;
      373     8627    3      DCL REG_ REDEF REG UBIN(36);
      374     8628
      375     8629        /* Code */
      376     8630
      377     8631    3      IF INSTR.TM_TAG = '00'B

   8631  2 000222   200034 470500                    LDP0    INSTR$,,AUTO
         2 000223   000000 236100                    LDQ     0,,PR0
         2 000224   000060 316007                    CANQ    48,DL
         2 000225   000507 601000 2                  TNZ     s:8674

      378     8632    4      THEN DO ;

      379     8633    4              ADDRESS = INSTR.ADR ;

   8633  2 000226   000000 220100                    LDX0    0,,PR0
         2 000227   200037 471500                    LDP1    @ADDRESS,,AUTO
         2 000230   100000 740100                    STX0    0,,PR1

      380     8634    5              DO SELECT (INSTR.TD_TAG) ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:65   

   8634  2 000231   000000 236100                    LDQ     0,,PR0
         2 000232   000017 376007                    ANQ     15,DL
         2 000233   000012 116007                    CMPQ    10,DL
         2 000234   000300 602000 2                  TNC     s:8634+39
         2 000235   000000 236100                    LDQ     0,,PR0
         2 000236   000017 376007                    ANQ     15,DL
         2 000237   000012 116007                    CMPQ    10,DL
         2 000240   000372 600000 2                  TZE     s:8642
         2 000241   000000 236100                    LDQ     0,,PR0
         2 000242   000017 376007                    ANQ     15,DL
         2 000243   000014 116007                    CMPQ    12,DL
         2 000244   000273 602000 2                  TNC     s:8634+34
         2 000245   000000 236100                    LDQ     0,,PR0
         2 000246   000017 376007                    ANQ     15,DL
         2 000247   000014 116007                    CMPQ    12,DL
         2 000250   000404 600000 2                  TZE     s:8646
         2 000251   000000 236100                    LDQ     0,,PR0
         2 000252   000017 376007                    ANQ     15,DL
         2 000253   000016 116007                    CMPQ    14,DL
         2 000254   000266 602000 2                  TNC     s:8634+29
         2 000255   000000 236100                    LDQ     0,,PR0
         2 000256   000017 376007                    ANQ     15,DL
         2 000257   000016 116007                    CMPQ    14,DL
         2 000260   000416 600000 2                  TZE     s:8651
         2 000261   000000 236100                    LDQ     0,,PR0
         2 000262   000017 376007                    ANQ     15,DL
         2 000263   000017 116007                    CMPQ    15,DL
         2 000264   000464 601000 2                  TNZ     s:8667
         2 000265   000423 710000 2                  TRA     s:8653
         2 000266   000000 236100                    LDQ     0,,PR0
         2 000267   000017 376007                    ANQ     15,DL
         2 000270   000015 116007                    CMPQ    13,DL
         2 000271   000464 601000 2                  TNZ     s:8667
         2 000272   000411 710000 2                  TRA     s:8649
         2 000273   000000 236100                    LDQ     0,,PR0
         2 000274   000017 376007                    ANQ     15,DL
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:66   
         2 000275   000013 116007                    CMPQ    11,DL
         2 000276   000464 601000 2                  TNZ     s:8667
         2 000277   000377 710000 2                  TRA     s:8644
         2 000300   000000 236100                    LDQ     0,,PR0
         2 000301   000017 376007                    ANQ     15,DL
         2 000302   000005 116007                    CMPQ    5,DL
         2 000303   000332 602000 2                  TNC     s:8634+65
         2 000304   000000 236100                    LDQ     0,,PR0
         2 000305   000017 376007                    ANQ     15,DL
         2 000306   000005 116007                    CMPQ    5,DL
         2 000307   000437 600000 2                  TZE     s:8658
         2 000310   000000 236100                    LDQ     0,,PR0
         2 000311   000017 376007                    ANQ     15,DL
         2 000312   000010 116007                    CMPQ    8,DL
         2 000313   000325 602000 2                  TNC     s:8634+60
         2 000314   000000 236100                    LDQ     0,,PR0
         2 000315   000017 376007                    ANQ     15,DL
         2 000316   000010 116007                    CMPQ    8,DL
         2 000317   000360 600000 2                  TZE     s:8638
         2 000320   000000 236100                    LDQ     0,,PR0
         2 000321   000017 376007                    ANQ     15,DL
         2 000322   000011 116007                    CMPQ    9,DL
         2 000323   000464 601000 2                  TNZ     s:8667
         2 000324   000365 710000 2                  TRA     s:8640
         2 000325   000000 236100                    LDQ     0,,PR0
         2 000326   000017 376007                    ANQ     15,DL
         2 000327   000006 116007                    CMPQ    6,DL
         2 000330   000464 601000 2                  TNZ     s:8667
         2 000331   000455 710000 2                  TRA     s:8664
         2 000332   000000 236100                    LDQ     0,,PR0
         2 000333   000017 376007                    ANQ     15,DL
         2 000334   000001 116007                    CMPQ    1,DL
         2 000335   000347 602000 2                  TNC     s:8634+78
         2 000336   000000 236100                    LDQ     0,,PR0
         2 000337   000017 376007                    ANQ     15,DL
         2 000340   000001 116007                    CMPQ    1,DL
         2 000341   000430 600000 2                  TZE     s:8655
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:67   
         2 000342   000000 236100                    LDQ     0,,PR0
         2 000343   000017 376007                    ANQ     15,DL
         2 000344   000002 116007                    CMPQ    2,DL
         2 000345   000464 601000 2                  TNZ     s:8667
         2 000346   000446 710000 2                  TRA     s:8661
         2 000347   000000 236100                    LDQ     0,,PR0
         2 000350   000017 376007                    ANQ     15,DL
         2 000351   000000 116003                    CMPQ    0,DU
         2 000352   000355 602000 2                  TNC     s:8636
         2 000353   000355 600000 2                  TZE     s:8636
         2 000354   000464 710000 2                  TRA     s:8667

      381     8635    5                 SELECT ('0000'B) ;

      382     8636    5                 INDEX_REG = 0;

   8636  2 000355   000000 221003                    LDX1    0,DU
         2 000356   200040 741100                    STX1    INDEX_REG,,AUTO
         2 000357   000474 710000 2                  TRA     s:8670

      383     8637    5                 SELECT ('1000'B) ;

      384     8638    5                 INDEX_REG = B$TCB.STK$ -> B$EXCFR.REGS.XREG(0);

   8638  2 000360   000000 473400 xsym               LDP3    B$TCB$
         2 000361   300001 474500                    LDP4    1,,PR3
         2 000362   400050 221100                    LDX1    40,,PR4
         2 000363   200040 741100                    STX1    INDEX_REG,,AUTO
         2 000364   000474 710000 2                  TRA     s:8670

      385     8639    5                 SELECT ('1001'B) ;

      386     8640    5                 INDEX_REG = B$TCB.STK$ -> B$EXCFR.REGS.XREG(1);

   8640  2 000365   000000 473400 xsym               LDP3    B$TCB$
         2 000366   300001 474500                    LDP4    1,,PR3
         2 000367   400050 721100                    LXL1    40,,PR4
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:68   
         2 000370   200040 741100                    STX1    INDEX_REG,,AUTO
         2 000371   000474 710000 2                  TRA     s:8670

      387     8641    5                 SELECT ('1010'B) ;

      388     8642    5                 INDEX_REG = B$TCB.STK$ -> B$EXCFR.REGS.XREG(2);

   8642  2 000372   000000 473400 xsym               LDP3    B$TCB$
         2 000373   300001 474500                    LDP4    1,,PR3
         2 000374   400051 221100                    LDX1    41,,PR4
         2 000375   200040 741100                    STX1    INDEX_REG,,AUTO
         2 000376   000474 710000 2                  TRA     s:8670

      389     8643    5                 SELECT ('1011'B) ;

      390     8644    5                 INDEX_REG = B$TCB.STK$ -> B$EXCFR.REGS.XREG(3);

   8644  2 000377   000000 473400 xsym               LDP3    B$TCB$
         2 000400   300001 474500                    LDP4    1,,PR3
         2 000401   400051 721100                    LXL1    41,,PR4
         2 000402   200040 741100                    STX1    INDEX_REG,,AUTO
         2 000403   000474 710000 2                  TRA     s:8670

      391     8645    5                 SELECT ('1100'B) ;

      392     8646    5                 INDEX_REG = B$TCB.STK$ -> B$EXCFR.REGS.XREG(4);

   8646  2 000404   000000 473400 xsym               LDP3    B$TCB$
         2 000405   300001 474500                    LDP4    1,,PR3
         2 000406   400052 221100                    LDX1    42,,PR4
         2 000407   200040 741100                    STX1    INDEX_REG,,AUTO
         2 000410   000474 710000 2                  TRA     s:8670

      393     8647                         %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:69   
      394     8648    5                 SELECT ('1101'B) ;

      395     8649    5                 INDEX_REG = B$TCB.STK$ -> B$EXCFR.REGS.XREG(5);

   8649  2 000411   000000 473400 xsym               LDP3    B$TCB$
         2 000412   300001 474500                    LDP4    1,,PR3
         2 000413   400052 721100                    LXL1    42,,PR4
         2 000414   200040 741100                    STX1    INDEX_REG,,AUTO
         2 000415   000474 710000 2                  TRA     s:8670

      396     8650    5                 SELECT ('1110'B) ;

      397     8651    5                 INDEX_REG = B$TCB.STK$ -> B$EXCFR.REGS.XREG(6);

   8651  2 000416   000000 473400 xsym               LDP3    B$TCB$
         2 000417   300001 474500                    LDP4    1,,PR3
         2 000420   400053 221100                    LDX1    43,,PR4
         2 000421   200040 741100                    STX1    INDEX_REG,,AUTO
         2 000422   000474 710000 2                  TRA     s:8670

      398     8652    5                 SELECT ('1111'B) ;

      399     8653    5                 INDEX_REG = B$TCB.STK$ -> B$EXCFR.REGS.XREG(7);

   8653  2 000423   000000 473400 xsym               LDP3    B$TCB$
         2 000424   300001 474500                    LDP4    1,,PR3
         2 000425   400053 721100                    LXL1    43,,PR4
         2 000426   200040 741100                    STX1    INDEX_REG,,AUTO
         2 000427   000474 710000 2                  TRA     s:8670

      400     8654    5                 SELECT ('0001'B) ;

      401     8655    5                 REG_ = B$TCB.STK$ -> B$EXCFR.REGS.A;

   8655  2 000430   000000 473400 xsym               LDP3    B$TCB$
         2 000431   300001 474500                    LDP4    1,,PR3
         2 000432   400054 235100                    LDA     44,,PR4
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:70   
         2 000433   200041 755100                    STA     REG,,AUTO

      402     8656    5                 INDEX_REG = REG.UPPER;

   8656  2 000434   200041 221100                    LDX1    REG,,AUTO
         2 000435   200040 741100                    STX1    INDEX_REG,,AUTO
         2 000436   000474 710000 2                  TRA     s:8670

      403     8657    5                 SELECT ('0101'B) ;

      404     8658    5                 REG_ = B$TCB.STK$ -> B$EXCFR.REGS.A;

   8658  2 000437   000000 473400 xsym               LDP3    B$TCB$
         2 000440   300001 474500                    LDP4    1,,PR3
         2 000441   400054 235100                    LDA     44,,PR4
         2 000442   200041 755100                    STA     REG,,AUTO

      405     8659    5                 INDEX_REG = REG.LOWER;

   8659  2 000443   200041 721100                    LXL1    REG,,AUTO
         2 000444   200040 741100                    STX1    INDEX_REG,,AUTO
         2 000445   000474 710000 2                  TRA     s:8670

      406     8660    5                 SELECT ('0010'B) ;

      407     8661    5                 REG_ = B$TCB.STK$ -> B$EXCFR.REGS.Q;

   8661  2 000446   000000 473400 xsym               LDP3    B$TCB$
         2 000447   300001 474500                    LDP4    1,,PR3
         2 000450   400055 235100                    LDA     45,,PR4
         2 000451   200041 755100                    STA     REG,,AUTO

      408     8662    5                 INDEX_REG = REG.UPPER;

   8662  2 000452   200041 221100                    LDX1    REG,,AUTO
         2 000453   200040 741100                    STX1    INDEX_REG,,AUTO
         2 000454   000474 710000 2                  TRA     s:8670
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:71   

      409     8663    5                 SELECT ('0110'B) ;

      410     8664    5                 REG_ = B$TCB.STK$ -> B$EXCFR.REGS.Q;

   8664  2 000455   000000 473400 xsym               LDP3    B$TCB$
         2 000456   300001 474500                    LDP4    1,,PR3
         2 000457   400055 235100                    LDA     45,,PR4
         2 000460   200041 755100                    STA     REG,,AUTO

      411     8665    5                 INDEX_REG = REG.LOWER;

   8665  2 000461   200041 721100                    LXL1    REG,,AUTO
         2 000462   200040 741100                    STX1    INDEX_REG,,AUTO
         2 000463   000474 710000 2                  TRA     s:8670

      412     8666    5                 SELECT (ELSE) ;

      413     8667    5              TOF_ERROR_CODE.ERR# = %E$BADTAG ;

   8667  2 000464   000003 236000 1                  LDQ     TOF_ERROR_CODE
         2 000465   000000 376000 3                  ANQ     0
         2 000466   001170 276007                    ORQ     632,DL
         2 000467   000003 756000 1                  STQ     TOF_ERROR_CODE

      414     8668    5              CALL TOX$ERROR (TOF_ERROR_CODE) ;

   8668  2 000470   000001 630400 3                  EPPR0   1
         2 000471   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000472   000000 701000 xent               TSX1    TOX$ERROR
         2 000473   000000 011000                    NOP     0

      415     8669    5              END /* SELECT */ ;

      416     8670    4      ADDRESS = ADDRESS + INDEX_REG;

   8670  2 000474   200040 235100                    LDA     INDEX_REG,,AUTO
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:72   
         2 000475   000022 771000                    ARL     18
         2 000476   200042 755100                    STA     REG+1,,AUTO
         2 000477   200037 470500                    LDP0    @ADDRESS,,AUTO
         2 000500   000000 236100                    LDQ     0,,PR0
         2 000501   000022 772000                    QRL     18
         2 000502   200042 036100                    ADLQ    REG+1,,AUTO
         2 000503   000000 620006                    EAX0    0,QL
         2 000504   000000 740100                    STX0    0,,PR0

      417     8671    4      RETURN;

   8671  2 000505   200036 221300                    LDX1  ! @MME_NUMBER+1,,AUTO
         2 000506   000001 702211                    TSX2  ! 1,X1

      418     8672    4           END /* THEN */ ;
      419     8673    4      ELSE DO ;

      420     8674    4              TOF_ERROR_CODE.ERR# = %E$BADMODTYP ;

   8674  2 000507   000003 236000 1                  LDQ     TOF_ERROR_CODE
         2 000510   000000 376000 3                  ANQ     0
         2 000511   001200 276007                    ORQ     640,DL
         2 000512   000003 756000 1                  STQ     TOF_ERROR_CODE

      421     8675    4              CALL TOX$ERROR (TOF_ERROR_CODE) ;

   8675  2 000513   000001 630400 3                  EPPR0   1
         2 000514   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000515   000000 701000 xent               TSX1    TOX$ERROR
         2 000516   000000 011000                    NOP     0

      422     8676    4           END /* ELSE */ ;

      423     8677
      424     8678    3   END TOF$CALC_ADDR;

   8678  2 000517   200036 221300                    LDX1  ! @MME_NUMBER+1,,AUTO
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:73   
         2 000520   000001 702211                    TSX2  ! 1,X1

      425     8679    2   END TOF$SBAR_INSTR;

   8679  2 000521   200032 221300                    LDX1  ! SUB_CODE+1,,AUTO
         2 000522   000001 702211                    TSX2  ! 1,X1

      426     8680        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:74   
      427     8681        /*I*  NAME:        TOF$SAVE_HISTREGS
      428     8682              PURPOSE:     Saves History Registers
      429     8683              DATA:        SPA.WD22 - address for register storage
      430     8684              DESCRIPTION: This procedure saves the history registers from
      431     8685                           the TCB for the fault.
      432     8686        */
      433     8687
      434     8688    1   TOF$SAVE_HISTORY_REGS: PROC ;

   8688  2 000523   200032 741300       TOF$SAVE_HI* STX1  ! SUB_CODE+1,,AUTO

      435     8689
      436     8690    2      DCL J             UBIN WORD ALIGNED ;
      437     8691    2      DCL HR_BUF$       PTR ALIGNED ;
      438     8692    2      DCL 1 HR_BUF_ REDEF HR_BUF$ ALIGNED,
      439     8693    2            2 ADDR#  UBIN (18) UNAL,
      440     8694    2            2 SEGID# UBIN (18) UNAL;
      441     8695    2      DCL 1 HR_BUF BASED (HR_BUF$) ALIGNED,
      442     8696    2            2 WD0     (0:7) BIT (36),
      443     8697    2            2 MODEREG BIT (36) UNAL,
      444     8698    2            2 WD9     (0:4) BIT (36) UNAL,
      445     8699    2            2 FLTREG  (0:1) BIT (36) UNAL,
      446     8700    2            2 WD16    (0:63) BIT (36) UNAL,
      447     8701    2            2 DPSE_REGS,
      448     8702    2              3 CU_HR    (0:63) BIT (72) UNAL,
      449     8703    2              3 OUDU_HR  (0:63) BIT (72) UNAL,
      450     8704    2              3 VU_HR    (0:63) BIT (72) UNAL,
      451     8705    2            2 L66_REGS REDEF DPSE_REGS,
      452     8706    2              3 CU_HR    (0:15) BIT (72) UNAL,
      453     8707    2              3 OU_HR    (0:15) BIT (72) UNAL,
      454     8708    2              3 DU_HR    (0:15) BIT (72) UNAL,
      455     8709    2              3 WD176    (0:143) BIT (72) UNAL,
      456     8710    2            2 ELS1_REGS REDEF DPSE_REGS,
      457     8711    2              3 CUOU_HR  (0:15) BIT (72) UNAL,
      458     8712    2              3 WD112    (0:175) BIT (72) UNAL;
      459     8713           %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:75   
      460     8714        /* Code */
      461     8715
      462     8716    2      IF B$TCB.STK$ -> B$FLT.P# > 0 /* size of history register data */

   8716  2 000524   000000 470400 xsym               LDP0    B$TCB$
         2 000525   000001 471500                    LDP1    1,,PR0
         2 000526   100103 235100                    LDA     67,,PR1
         2 000527   000726 600000 2                  TZE     s:8758

      463     8717    3      THEN DO ;

      464     8718    3             IF (TOT$ECP.SUBEXEC.CURRENT = %SOLTS) OR (TOT$ECP.SUBEXEC.CURRENT = %PACT
              8718                       )

   8718  2 000530   000007 236000 xsym               LDQ     TOT$ECP+7
         2 000531   000013 116007                    CMPQ    11,DL
         2 000532   000535 600000 2                  TZE     s:8719
         2 000533   000014 116007                    CMPQ    12,DL
         2 000534   000542 601000 2                  TNZ     s:8720

      465     8719    3              THEN HR_BUF_.ADDR# = TOD$SPA.WD22.HREG_BUF_ - 1 /* see STAR #18144 */;

   8719  2 000535   000000 473400 xsym               LDP3    TOD$SPA$
         2 000536   300026 220100                    LDX0    22,,PR3
         2 000537   777777 622010                    EAX2    -1,X0
         2 000540   200034 742100                    STX2    HR_BUF$,,AUTO
         2 000541   000545 710000 2                  TRA     s:8721

      466     8720    3              ELSE HR_BUF_.ADDR# = TOD$SPA.WD22.HREG_BUF_ ;

   8720  2 000542   000000 473400 xsym               LDP3    TOD$SPA$
         2 000543   300026 220100                    LDX0    22,,PR3
         2 000544   200034 740100                    STX0    HR_BUF$,,AUTO

      467     8721    3              HR_BUF_.SEGID# = %IS_SEGID ;

   8721  2 000545   006000 222003                    LDX2    3072,DU
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:76   
         2 000546   200034 442100                    SXL2    HR_BUF$,,AUTO

      468     8722    3              HR_BUF.FLTREG(0) = B$TCB.STK$ -> B$FLT.FLTREG;

   8722  2 000547   100101 236100                    LDQ     65,,PR1
         2 000550   200034 474500                    LDP4    HR_BUF$,,AUTO
         2 000551   400016 756100                    STQ     14,,PR4

      469     8723    3              HR_BUF.FLTREG(1) = '0'B;

   8723  2 000552   400017 450100                    STZ     15,,PR4

      470     8724    4              DO CASE (B$TCB.STK$ -> B$FLT.CPU_TYPE) ;

   8724  2 000553   000001 471500                    LDP1    1,,PR0
         2 000554   100100 220100                    LDX0    64,,PR1
         2 000555   000017 360003                    ANX0    15,DU
         2 000556   000003 100003                    CMPX0   3,DU
         2 000557   000561 602010 2                  TNC     s:8724+6,X0
         2 000560   000726 710000 2                  TRA     s:8758
         2 000561   000564 710000 2                  TRA     s:8726
         2 000562   000626 710000 2                  TRA     s:8736
         2 000563   000705 710000 2                  TRA     s:8751

      471     8725    4                 CASE (%L66#);

      472     8726    5                    DO J = 0 TO 15;

   8726  2 000564   200033 450100                    STZ     J,,AUTO

      473     8727    5                       HR_BUF.L66_REGS.CU_HR(J) =

   8727  2 000565   200033 235100                    LDA     J,,AUTO
         2 000566   000001 735000                    ALS     1
         2 000567   000000 470400 xsym               LDP0    B$TCB$
         2 000570   000001 471500                    LDP1    1,,PR0
         2 000571   200033 236100                    LDQ     J,,AUTO
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:77   
         2 000572   000003 736000                    QLS     3
         2 000573   000002 735000                    ALS     2
         2 000574   200034 473500                    LDP3    HR_BUF$,,AUTO
         2 000575   000105 100506                    MLR     fill='000'O
         2 000576   100104 000010                    ADSC9   68,Q,PR1                 cn=0,n=8
         2 000577   300120 000010                    ADSC9   80,A,PR3                 cn=0,n=8

      474     8728    5                               B$TCB.STK$ -> B$HR_L66.CU_HR(J);
      475     8729    5                       HR_BUF.L66_REGS.OU_HR(J) =

   8729  2 000600   200033 235100                    LDA     J,,AUTO
         2 000601   000001 735000                    ALS     1
         2 000602   000000 470400 xsym               LDP0    B$TCB$
         2 000603   000001 471500                    LDP1    1,,PR0
         2 000604   000002 735000                    ALS     2
         2 000605   000105 100506                    MLR     fill='000'O
         2 000606   100144 000010                    ADSC9   100,Q,PR1                cn=0,n=8
         2 000607   300160 000010                    ADSC9   112,A,PR3                cn=0,n=8

      476     8730    5                               B$TCB.STK$ -> B$HR_L66.OU_HR(J);
      477     8731    5                       HR_BUF.L66_REGS.DU_HR(J) =

   8731  2 000610   200033 235100                    LDA     J,,AUTO
         2 000611   000001 735000                    ALS     1
         2 000612   000000 470400 xsym               LDP0    B$TCB$
         2 000613   000001 471500                    LDP1    1,,PR0
         2 000614   000002 735000                    ALS     2
         2 000615   000105 100506                    MLR     fill='000'O
         2 000616   100244 000010                    ADSC9   164,Q,PR1                cn=0,n=8
         2 000617   300220 000010                    ADSC9   144,A,PR3                cn=0,n=8

      478     8732    5                               B$TCB.STK$ -> B$HR_L66.DU_HR(J);
      479     8733    5                    END;

   8733  2 000620   200033 235100                    LDA     J,,AUTO
         2 000621   000001 035007                    ADLA    1,DL
         2 000622   200033 755100                    STA     J,,AUTO
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:78   
         2 000623   000020 115007                    CMPA    16,DL
         2 000624   000565 602000 2                  TNC     s:8727
         2 000625   000726 710000 2                  TRA     s:8758

      480     8734                         %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:79   
      481     8735    4                 CASE (%DPSE#);

      482     8736    5                    DO J = 0 TO 63;

   8736  2 000626   200033 450100                    STZ     J,,AUTO

      483     8737    5                       HR_BUF.DPSE_REGS.CU_HR(J) =

   8737  2 000627   200033 235100                    LDA     J,,AUTO
         2 000630   000001 735000                    ALS     1
         2 000631   000000 470400 xsym               LDP0    B$TCB$
         2 000632   000001 471500                    LDP1    1,,PR0
         2 000633   200033 236100                    LDQ     J,,AUTO
         2 000634   000003 736000                    QLS     3
         2 000635   000002 735000                    ALS     2
         2 000636   200034 473500                    LDP3    HR_BUF$,,AUTO
         2 000637   000105 100506                    MLR     fill='000'O
         2 000640   100104 000010                    ADSC9   68,Q,PR1                 cn=0,n=8
         2 000641   300120 000010                    ADSC9   80,A,PR3                 cn=0,n=8

      484     8738    5                               B$TCB.STK$ -> B$HR_DPSE.CU_HR(J);
      485     8739    5                    END;

   8739  2 000642   200033 235100                    LDA     J,,AUTO
         2 000643   000001 035007                    ADLA    1,DL
         2 000644   200033 755100                    STA     J,,AUTO
         2 000645   000100 115007                    CMPA    64,DL
         2 000646   000627 602000 2                  TNC     s:8737

      486     8740    4                    IF TOD$SPA.WD22.HREG_BUF_SIZE > 208

   8740  2 000647   000000 470400 xsym               LDP0    TOD$SPA$
         2 000650   000026 720100                    LXL0    22,,PR0
         2 000651   000321 100003                    CMPX0   209,DU
         2 000652   000726 602000 2                  TNC     s:8758

      487     8741    5                    THEN DO;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:80   

      488     8742    6                            DO J = 0 TO 63;

   8742  2 000653   200033 450100                    STZ     J,,AUTO

      489     8743    6                               HR_BUF.DPSE_REGS.OUDU_HR(J) =

   8743  2 000654   200033 235100                    LDA     J,,AUTO
         2 000655   000001 735000                    ALS     1
         2 000656   000000 470400 xsym               LDP0    B$TCB$
         2 000657   000001 471500                    LDP1    1,,PR0
         2 000660   200033 236100                    LDQ     J,,AUTO
         2 000661   000003 736000                    QLS     3
         2 000662   000002 735000                    ALS     2
         2 000663   200034 473500                    LDP3    HR_BUF$,,AUTO
         2 000664   000105 100506                    MLR     fill='000'O
         2 000665   100304 000010                    ADSC9   196,Q,PR1                cn=0,n=8
         2 000666   300320 000010                    ADSC9   208,A,PR3                cn=0,n=8

      490     8744    6                                       B$TCB.STK$ -> B$HR_DPSE.OUDU_HR(J);
      491     8745    6                               HR_BUF.DPSE_REGS.VU_HR(J) =

   8745  2 000667   200033 235100                    LDA     J,,AUTO
         2 000670   000001 735000                    ALS     1
         2 000671   000000 470400 xsym               LDP0    B$TCB$
         2 000672   000001 471500                    LDP1    1,,PR0
         2 000673   000002 735000                    ALS     2
         2 000674   000105 100506                    MLR     fill='000'O
         2 000675   100504 000010                    ADSC9   324,Q,PR1                cn=0,n=8
         2 000676   300520 000010                    ADSC9   336,A,PR3                cn=0,n=8

      492     8746    6                                       B$TCB.STK$ -> B$HR_DPSE.VU1_HR(J);
      493     8747    6                            END;

   8747  2 000677   200033 235100                    LDA     J,,AUTO
         2 000700   000001 035007                    ADLA    1,DL
         2 000701   200033 755100                    STA     J,,AUTO
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:81   
         2 000702   000100 115007                    CMPA    64,DL
         2 000703   000654 602000 2                  TNC     s:8743

      494     8748    5                         END;

   8748  2 000704   000726 710000 2                  TRA     s:8758

      495     8749    4                    ELSE /* Buffer not large enough for other REGS */ ;
      496     8750    4                 CASE (%ELS1#);

      497     8751    5                    DO J = 0 TO 15;

   8751  2 000705   200033 450100                    STZ     J,,AUTO

      498     8752    5                       HR_BUF.ELS1_REGS.CUOU_HR(J) =

   8752  2 000706   200033 235100                    LDA     J,,AUTO
         2 000707   000001 735000                    ALS     1
         2 000710   000000 470400 xsym               LDP0    B$TCB$
         2 000711   000001 471500                    LDP1    1,,PR0
         2 000712   200033 236100                    LDQ     J,,AUTO
         2 000713   000003 736000                    QLS     3
         2 000714   000002 735000                    ALS     2
         2 000715   200034 473500                    LDP3    HR_BUF$,,AUTO
         2 000716   000105 100506                    MLR     fill='000'O
         2 000717   100104 000010                    ADSC9   68,Q,PR1                 cn=0,n=8
         2 000720   300120 000010                    ADSC9   80,A,PR3                 cn=0,n=8

      499     8753    5                               B$TCB.STK$ -> B$HR_ELS1.HR(J);
      500     8754    5                    END;

   8754  2 000721   200033 235100                    LDA     J,,AUTO
         2 000722   000001 035007                    ADLA    1,DL
         2 000723   200033 755100                    STA     J,,AUTO
         2 000724   000020 115007                    CMPA    16,DL
         2 000725   000706 602000 2                  TNC     s:8752

PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:82   
      501     8755    4              END /* CASE */ ;

      502     8756    3           END /* THEN */ ;

      503     8757    2      ELSE /* Do not save the History Registers */ ;
      504     8758    2      RETURN ;

   8758  2 000726   200032 221300                    LDX1  ! SUB_CODE+1,,AUTO
         2 000727   000001 702211                    TSX2  ! 1,X1

      505     8759
      506     8760    2   END TOF$SAVE_HISTORY_REGS ;
      507     8761        %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:83   
      508     8762        /*I* NAME:         TOF$TEST_PAGE_FAULT
      509     8763             INTERFACE:    TOF$GET_MME_DATA
      510     8764                           TOF$SOLTS
      511     8765                           TOF$GET_EXCEPTION_CODE
      512     8766                           TOF$SAVE_GELBAR_REGS
      513     8767                           TOF$RESET_GELBAR_TIMER
      514     8768                           TOF$UPDATE_GELBAR_SPA
      515     8769                           TOF$GET_GELBAR_FVECTOR
      516     8770                           'UNWIND TO TOF$SFR_RV'
      517     8771             INPUT:        None explicitly.
      518     8772                           Fault information passed via TCB frame.
      519     8773             OUTPUT:       TOF$BAR.CURRENT updated.
      520     8774                           Slave Prefix Area for subexec updated.
      521     8775                           TOF$BAR.GELBAR_MODE RESET TO false
      522     8776             DESCRIPTION:  TOF$BAR.GELBAR_MODE is reset to 0 so that the next
      523     8777                           fault that occurs will be handled by the TOLTS
      524     8778                           Fault Handler and not passed back to the subexec.
      525     8779                           This flag is set when the subexec does a MME
      526     8780                           GELBAR (actually in TOG$GCOS_MMES).
      527     8781
      528     8782                           The above mentioned routines are called in order
      529     8783                           to fetch pertinent information from the TCB
      530     8784                           frame and update the Slave Prefix Area for the
      531     8785                           subexec so that it thinks it is working in a GCOS
      532     8786                           environment.  (See the individual routines for
      533     8787                           what each does exactly.  The names of the routines
      534     8788                           sufficiently describe enought detail for this
      535     8789                           level of explaination.)
      536     8790
      537     8791                           Once the SPA has been updated, M$CLRSTK is called
      538     8792                           to pop the last frame off the TCB (all the
      539     8793                           information has already been retrieved from it).
      540     8794                           An UNWIND TO TOF$SFR_RV transfers control to the
      541     8795                           BMAP subroutine which in turn will transfer control
      542     8796                           to the subexec's fault handler, which will
      543     8797                           then process the fault for the test page.
      544     8798
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:84   
      545     8799                           The reason M$CLRSTK is used to pop the TCB frame is
      546     8800                           that control must be returned to the subexec with
      547     8801                           the full (and not the shrunken ISR) in effect.
      548     8802                           CP6 is set up so that when a fault occurs within
      549     8803                           a shrunken ISR, the user's Fault Handler will be
      550     8804                           entered with full ISR in effect.   The full ISR
      551     8805                           must also be in effect when transfer is made to the
      552     8806                           subexec.  (The use of M$TRTN at this point
      553     8807                           would restore the shrunken ISR environment
      554     8808                           when transferring to the subexec.)
      555     8809
      556     8810                           The UNWIND statement pops the auto frame pointer
      557     8811                           (PR2) back to the auto frame for TOLTS and transfers
      558     8812                           to the subroutine TOF$SUBEXEC_FLT_RET which
      559     8813                           restores the register environment and transfers
      560     8814                           to the subexec.  The unwind variable used to do
      561     8815                           this, TOF$SFR_RV is built by a BMAP routine
      562     8816                           TOF$REMEMBER_SFR at TOLTS initialization time.
      563     8817                           The UNWIND is necessary in order to pop all the
      564     8818                           automatic frames that should not be left around,
      565     8819                           specifically the one for TOF$FAULTS.  The
      566     8820                           BMAP routine is necessary to restore the register
      567     8821                           environment for the subexec.
      568     8822
      569     8823                           Thus future developers/modifiers of TOLTS should
      570     8824                           be aware of the initimate relationship
      571     8825                           between TOLTS and the CP6 fault handling
      572     8826                           mechanism.  No other CP6 user is closely tied to
      573     8827                           CP6; because of this, there will be future
      574     8828                           problems.
      575     8829        */
      576     8830        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:85   
      577     8831    1   TOF$TEST_PAGE_FAULT: PROC;

   8831  2 000730   200032 741300       TOF$TEST_PA* STX1  ! SUB_CODE+1,,AUTO

      578     8832
      579     8833        /* Code */
      580     8834
      581     8835    2      TOF$BAR.GELBAR_MODE = %FALSE ;

   8835  2 000731   000031 236000 xsym               LDQ     B_VECTNIL+25
         2 000732   000001 356000 1                  ANSQ    TOF$BAR+1

      582     8836    2      CALL TOF$GET_MME_DATA;

   8836  2 000733   001270 701000 2                  TSX1    TOF$GET_MME_DATA
         2 000734   000000 011000                    NOP     0

      583     8837    2      TOF$BAR.CURRENT = TOF$BAR.FULL;

   8837  2 000735   000000 720000 1                  LXL0    TOF$BAR
         2 000736   000000 740000 1                  STX0    TOF$BAR

      584     8838    2      CALL TOF$SAVE_GELBAR_REGS;

   8838  2 000737   000752 701000 2                  TSX1    TOF$SAVE_GELBAR_REGS
         2 000740   000000 011000                    NOP     0

      585     8839    2      CALL TOF$UPDATE_GELBAR_SPA;

   8839  2 000741   000772 701000 2                  TSX1    TOF$UPDATE_GELBAR_SPA
         2 000742   000000 011000                    NOP     0

      586     8840    2      CALL M$CLRSTK;

   8840  2 000743   010013 713400                    CLIMB   4107
         2 000744   000000 401760                    pmme    nvectors=0

PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:86   
      587     8841    2      CALL TOF$GET_GELBAR_FVECTOR;

   8841  2 000745   001247 701000 2                  TSX1    TOF$GET_GELBAR_FVECTOR
         2 000746   000000 011000                    NOP     0

      588     8842    2      UNWIND TO TOF$SFR_RV;

   8842  2 000747   000000 237200 xsym               LDAQ  ! TOF$SFR_RV
         2 000750   000000 700200 xent               TSX0  ! X66_AAUNWIND
         2 000751   000000 000200                    ZERO    0,128

      589     8843
      590     8844        /* END TOF$TEST_PAGE_FAULT */
      591     8845        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:87   
      592     8846        /*I* NAME:         SAVE_GELBAR_REGISTERS
      593     8847             INPUT:        None.
      594     8848             OUTPUT:       TOF$GELBAR_REGISTERS
      595     8849                           TOF$GELBAR_INDICATORS
      596     8850                           TOF$GELBAR_ADDRESS_REGS
      597     8851                           TOF$GELBAR_EIS_REGS
      598     8852             DESCRIPTION:  Fetches the above 3 sets of registers and the
      599     8853                           Indicator Register from the current TCB frame
      600     8854                           and saves them.  They will be restored prior to
      601     8855                           returning to the subexec.  This save (and the
      602     8856                           subsequent restore) is necessary because M$TRTN
      603     8857                           cannot be used to restore the environment and
      604     8858                           return to the subexec.
      605     8859
      606     8860                           The register complement that is saved and restored
      607     8861                           may have to be changed when SOLTS is modified to
      608     8862                           do online NSA testing.
      609     8863        */
      610     8864
      611     8865    2   TOF$SAVE_GELBAR_REGS: PROC;

   8865  2 000752   200034 741300       TOF$SAVE_GE* STX1  ! HR_BUF$,,AUTO

      612     8866
      613     8867        /* Code */
      614     8868
      615     8869    3      TOF$GELBAR_REGISTERS = MREG;

   8869  2 000753   000000 100500                    MLR     fill='000'O
         2 000754   200012 000034                    ADSC9   MREG,,AUTO               cn=0,n=28
         2 000755   000000 000034 xsym               ADSC9   TOF$GELBAR_REGISTERS     cn=0,n=28

      616     8870    3      TOF$GELBAR_INDICATORS.I = B$TCB.STK$ -> B$EXCFR.IR;

   8870  2 000756   000000 470400 xsym               LDP0    B$TCB$
         2 000757   000001 471500                    LDP1    1,,PR0
         2 000760   100004 720100                    LXL0    4,,PR1
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:88   
         2 000761   000000 440000 xsym               SXL0    TOF$GELBAR_INDICATORS

      617     8871    3      TOF$GELBAR_ADDRESS_REGS = B$TCB.STK$ -> B$EXCFR.PRS;

   8871  2 000762   000000 100500                    MLR     fill='000'O
         2 000763   100020 000040                    ADSC9   16,,PR1                  cn=0,n=32
         2 000764   000000 000040 xsym               ADSC9   TOF$GELBAR_ADDRESS_REGS  cn=0,n=32

      618     8872    3      TOF$GELBAR_EIS_REGS = B$TCB.STK$ -> B$EXCFR.EIS;

   8872  2 000765   000001 471500                    LDP1    1,,PR0
         2 000766   000000 100500                    MLR     fill='000'O
         2 000767   100060 000040                    ADSC9   48,,PR1                  cn=0,n=32
         2 000770   000000 000040 xsym               ADSC9   TOF$GELBAR_EIS_REGS      cn=0,n=32

      619     8873    3      RETURN;

   8873  2 000771   000001 702211                    TSX2  ! 1,X1

      620     8874
      621     8875    3   END TOF$SAVE_GELBAR_REGS;
      622     8876        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:89   
      623     8877        /*I* NAME:         TOF$UPDATE_GELBAR_SPA
      624     8878             INTERFACE:    TOF$GET_GELBAR_FTYPE
      625     8879             INPUT:        None.
      626     8880             OUTPUT:       Update words 17,18 and 25 in Slave Prefix Area.
      627     8881             DESCRIPTION:  Word 17 of the Slave Prefix Area is updated to
      628     8882                           show how much time is remaining of the original
      629     8883                           GELBAR timeout interval specified when MME GELBAR
      630     8884                           was invoked.  (GELBAR_TIME_USED calculated in
      631     8885                           TOF$RESET_GELBAR_TIMER is used here.)
      632     8886
      633     8887                           Now the IC of the fault under GELBAR must be
      634     8888                           doctored up because of the funny way CP6 handles
      635     8889                           a fault IC in the TCB.  If bit 30 of the Indicator
      636     8890                           Register is set, indicating that an EIS instruction
      637     8891                           has been interrupted, CP6 leaves the IC returned
      638     8892                           from the hardware alone (on the assumption that
      639     8893                           the instruction's execution will be resumed).
      640     8894                           However, in most cases (when bit 30 is reset),
      641     8895                           CP6 will decrement the IC returned by the hardware
      642     8896                           by one so that it will reflect the true IC of the
      643     8897                           fault instead of IC+1 as in GCOS.  This routine
      644     8898                           must at this point figure out which of the 2
      645     8899                           conditions exist and fix up the IC returned in
      646     8900                           word 18 of the SPA so that the subexec thinks it is
      647     8901                           operating in a GCOS environment.
      648     8902
      649     8903                           Therefore, if bit 30 (EIS interrupt bit) is set,
      650     8904                           the IC from the TCB frame is returned as is; if
      651     8905                           bit 30 is reset, IC+1 is returned in word 18.
      652     8906                           (Note: IC_IN_GELBAR is set in TOF$GET_MME_DATA.)
      653     8907
      654     8908                           The Indicator Register from the TCB frame is stored
      655     8909                           into word 18.
      656     8910
      657     8911                           The fault bit (bit 19) in word 25 is set if the
      658     8912                           GELBAR was broken by a fault, and reset if GELBAR
      659     8913                           was broken by an I/O interrupt.  So here
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:90   
      660     8914                           comes one of the big kludges in TOLTS for SOLTS.
      661     8915
      662     8916                           Slave Mode SOLTS (CSLT or PROC) only checks the
      663     8917                           Interslave Communication Queue (via a MME GEINOS
      664     8918                           for an ISC READ) when GELBAR has been broken by
      665     8919                           an I/O interrupt, i.e., bit 19 in word 25 of the
      666     8920                           SPA reset.  It does not periodically check the
      667     8921                           ISC queue as do the other subexecs.
      668     8922
      669     8923                           Since in CP6 user programs don't see I/O
      670     8924                           interrupts, there would conceivably be no way to
      671     8925                           pass Interslave Communications to SOLTS.  So a
      672     8926                           special Derail instruction has been inserted into
      673     8927                           SOLTS (PROE) which is interpreted by the
      674     8928                           TOLTS Fault Handler to be a nop; but it does return
      675     8929                           to CSLT/PROC with the fault bit reset so it
      676     8930                           thinks an I/O interrupt occurred.  Then CSLT/PROC
      677     8931                           checks the Interslave queue.  In this way, I/O
      678     8932                           interrupts are simulated for Slave Mode SOLTS.
      679     8933
      680     8934                           What happens exactly is a DRL .070707 instruction
      681     8935                           is inserted into PROE in a place which is
      682     8936                           periodically used.  The DRL instruction executes,
      683     8937                           breaking GELBAR and transferring control to
      684     8938                           TOF$FAULTS.  This subroutine checks the fault
      685     8939                           instruction for the DRL opcode and .070707 in the
      686     8940                           address field.  If these 2 conditions exist, an I/O
      687     8941                           interrupt is simulated for SOLTS.  Bit 19 in
      688     8942                           word 25 of the SPA is reset, and control passed back
      689     8943                           to CSLT/PROC.
      690     8944
      691     8945                           If this condition does not exist, bit 19 is set.
      692     8946
      693     8947                           Finally, TOF$GET_GELBAR_FTYPE is called to
      694     8948                           generate the 6 bit GCOS fault code from the ECC
      695     8949                           and SUB_CODE from the TCB frame.  The GCOS code is
      696     8950                           returned in bits 30-35 of word 25.
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:91   
      697     8951
      698     8952                           Refer to the GCOS Reference Manual, DD19 for a
      699     8953                           complete description of MME GELBAR.
      700     8954        */
      701     8955
      702     8956    2   TOF$UPDATE_GELBAR_SPA: PROC;

   8956  2 000772   200034 741300       TOF$UPDATE_* STX1  ! HR_BUF$,,AUTO

      703     8957
      704     8958    3      DCL F_TYPE UBIN (6);
      705     8959
      706     8960        /* Code */
      707     8961
      708     8962    3      GELBAR_TIME_USED = GELBAR_TIME_USED * 64;

   8962  2 000773   200025 235100                    LDA     GELBAR_TIME_USED,,AUTO
         2 000774   000006 735000                    ALS     6
         2 000775   200025 755100                    STA     GELBAR_TIME_USED,,AUTO

      709     8963    3      TOD$SPA.WD17 = TOD$SPA.WD17 - GELBAR_TIME_USED;

   8963  2 000776   000000 470400 xsym               LDP0    TOD$SPA$
         2 000777   000021 236100                    LDQ     17,,PR0
         2 001000   200025 136100                    SBLQ    GELBAR_TIME_USED,,AUTO
         2 001001   000021 756100                    STQ     17,,PR0

      710     8964    3      IF TOF$GELBAR_INDICATORS.I.EIS_INTERRUPT = 1

   8964  2 001002   000000 236000 xsym               LDQ     TOF$GELBAR_INDICATORS
         2 001003   000040 376007                    ANQ     32,DL
         2 001004   000040 116007                    CMPQ    32,DL
         2 001005   001011 601000 2                  TNZ     s:8966

      711     8965    3      THEN TOD$SPA.WD18.IC = IC_IN_GELBAR;

   8965  2 001006   200026 220100                    LDX0    IC_IN_GELBAR,,AUTO
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:92   
         2 001007   000022 740100                    STX0    18,,PR0
         2 001010   001014 710000 2                  TRA     s:8967

      712     8966    3      ELSE TOD$SPA.WD18.IC = IC_IN_GELBAR + 1;

   8966  2 001011   200026 220100                    LDX0    IC_IN_GELBAR,,AUTO
         2 001012   000001 621010                    EAX1    1,X0
         2 001013   000022 741100                    STX1    18,,PR0

      713     8967    3      TOD$SPA.WD18.IR = MME_IR;

   8967  2 001014   200027 221100                    LDX1    MME_IR,,AUTO
         2 001015   000022 441100                    SXL1    18,,PR0

      714     8968    3      IF (MME.INST.NO = BITBIN('070707'O) & MME.INST.OP= '002007'O)

   8968  2 001016   400000 222003                    LDX2    -131072,DU
         2 001017   200003 223100                    LDX3    MME,,AUTO
         2 001020   070707 103003                    CMPX3   29127,DU
         2 001021   001023 600000 2                  TZE     s:8968+5
         2 001022   000000 222003                    LDX2    0,DU
         2 001023   400000 224003                    LDX4    -131072,DU
         2 001024   200003 725100                    LXL5    MME,,AUTO
         2 001025   002007 105003                    CMPX5   1031,DU
         2 001026   001030 600000 2                  TZE     s:8968+10
         2 001027   000000 224003                    LDX4    0,DU
         2 001030   000000 636014                    EAQ     0,X4
         2 001031   200042 756100                    STQ     REG+1,,AUTO
         2 001032   000000 636012                    EAQ     0,X2
         2 001033   200042 376100                    ANQ     REG+1,,AUTO
         2 001034   001040 600000 2                  TZE     s:8970

      715     8969    3      THEN TOD$SPA.WD25.FAULT = '0'B;

   8969  2 001035   000004 236000 3                  LDQ     4
         2 001036   000031 356100                    ANSQ    25,,PR0
         2 001037   001042 710000 2                  TRA     s:8971
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:93   

      716     8970    3      ELSE TOD$SPA.WD25.FAULT = '1'B;

   8970  2 001040   200000 236007                    LDQ     65536,DL
         2 001041   000031 256100                    ORSQ    25,,PR0

      717     8971    3      CALL TOF$GET_GELBAR_FTYPE (F_TYPE);

   8971  2 001042   200035 631500                    EPPR1   F_TYPE,,AUTO
         2 001043   200037 451500                    STP1    @ADDRESS,,AUTO
         2 001044   001054 701000 2                  TSX1    TOF$GET_GELBAR_FTYPE
         2 001045   000000 011000                    NOP     0

      718     8972    3      TOD$SPA.WD25.FAULT_TYPE = F_TYPE;

   8972  2 001046   000000 470400 xsym               LDP0    TOD$SPA$
         2 001047   200035 236100                    LDQ     F_TYPE,,AUTO
         2 001050   000036 772000                    QRL     30
         2 001051   000031 752101                    STCQ    25,'01'O,PR0

      719     8973    3      RETURN;

   8973  2 001052   200034 221300                    LDX1  ! HR_BUF$,,AUTO
         2 001053   000001 702211                    TSX2  ! 1,X1

      720     8974
      721     8975        /* END TOF$UPDATE_GELBAR_SPA */
      722     8976        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:94   
      723     8977        /*I* NAME:    TOF$GET_GELBAR_FTYPE
      724     8978             DESCRIPTION:
      725     8979        USES "ECC" AND "SUB_CODE" FETCHED FROM EXCEPTION STACK FRAME
      726     8980        (BY TOF$GET_EXCEPTION_CODE) TO GENERATE THE 6 BIT GCOS FAULT_TYPE
      727     8981        CODE FOR WORD 25 IN SLAVE PREFIX AREA.
      728     8982        SEE TOF$GET_EXCEPTION_CODE FOR DEFINITIONS OF ECC AND SUB_CODE.
      729     8983        */
      730     8984
      731     8985    3   TOF$GET_GELBAR_FTYPE: PROC (F_TYPE);

   8985  2 001054   200036 741300       TOF$GET_GEL* STX1  ! @MME_NUMBER+1,,AUTO

      732     8986
      733     8987    4      DCL F_TYPE UBIN (6);
      734     8988
      735     8989        /* Code */
      736     8990
      737     8991    5      DO CASE (ECC);

   8991  2 001055   200024 220100                    LDX0    ECC,,AUTO
         2 001056   000010 100003                    CMPX0   8,DU
         2 001057   001061 602010 2                  TNC     s:8991+4,X0
         2 001060   001235 710000 2                  TRA     s:9035
         2 001061   001231 710000 2                  TRA     s:9033
         2 001062   001235 710000 2                  TRA     s:9035
         2 001063   001235 710000 2                  TRA     s:9035
         2 001064   001235 710000 2                  TRA     s:9035
         2 001065   001235 710000 2                  TRA     s:9035
         2 001066   001071 710000 2                  TRA     s:8993
         2 001067   001120 710000 2                  TRA     s:9003
         2 001070   001153 710000 2                  TRA     s:9015

      738     8992    5         CASE (%ECC_ARITH#);

      739     8993    6            DO CASE (SUB_CODE);

   8993  2 001071   200031 222100                    LDX2    SUB_CODE,,AUTO
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:95   
         2 001072   000002 102003                    CMPX2   2,DU
         2 001073   001075 602012 2                  TNC     s:8993+4,X2
         2 001074   001107 710000 2                  TRA     s:8999
         2 001075   001077 710000 2                  TRA     s:8995
         2 001076   001103 710000 2                  TRA     s:8997

      740     8994    6               CASE (%SC_OVRF#);

      741     8995    6                  F_TYPE = %OVERFLOW_FT ;

   8995  2 001077   100000 236003                    LDQ     32768,DU
         2 001100   200037 470500                    LDP0    @F_TYPE,,AUTO
         2 001101   000000 756100                    STQ     0,,PR0
         2 001102   001245 710000 2                  TRA     s:9038

      742     8996    6               CASE (%SC_DVCHK#);

      743     8997    6                  F_TYPE = %DIVIDE_CHECK_FT ;

   8997  2 001103   110000 236003                    LDQ     36864,DU
         2 001104   200037 470500                    LDP0    @F_TYPE,,AUTO
         2 001105   000000 756100                    STQ     0,,PR0
         2 001106   001245 710000 2                  TRA     s:9038

      744     8998    6               CASE (ELSE);

      745     8999    6                  TOF_ERROR_CODE.ERR# = %E$BADSUBCODE ;

   8999  2 001107   000003 236000 1                  LDQ     TOF_ERROR_CODE
         2 001110   000000 376000 3                  ANQ     0
         2 001111   001210 276007                    ORQ     648,DL
         2 001112   000003 756000 1                  STQ     TOF_ERROR_CODE

      746     9000    6                  CALL TOX$ERROR (TOF_ERROR_CODE) ;

   9000  2 001113   000001 630400 3                  EPPR0   1
         2 001114   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:96   
         2 001115   000000 701000 xent               TSX1    TOX$ERROR
         2 001116   000000 011000                    NOP     0

      747     9001    6            END;

   9001  2 001117   001245 710000 2                  TRA     s:9038

      748     9002    5         CASE (%ECC_PROG#);

      749     9003    6            DO CASE (SUB_CODE);

   9003  2 001120   200031 222100                    LDX2    SUB_CODE,,AUTO
         2 001121   000003 102003                    CMPX2   3,DU
         2 001122   001124 602012 2                  TNC     s:9003+4,X2
         2 001123   001142 710000 2                  TRA     s:9011
         2 001124   001127 710000 2                  TRA     s:9005
         2 001125   001132 710000 2                  TRA     s:9007
         2 001126   001136 710000 2                  TRA     s:9009

      750     9004    6               CASE (%SC_MME#);

      751     9005    6                  F_TYPE = %MME_FT ;

   9005  2 001127   200037 470500                    LDP0    @F_TYPE,,AUTO
         2 001130   000000 450100                    STZ     0,,PR0
         2 001131   001245 710000 2                  TRA     s:9038

      752     9006    6               CASE (%SC_DRAIL#);

      753     9007    6                  F_TYPE = %DERAIL_FT ;

   9007  2 001132   040000 236003                    LDQ     16384,DU
         2 001133   200037 470500                    LDP0    @F_TYPE,,AUTO
         2 001134   000000 756100                    STQ     0,,PR0
         2 001135   001245 710000 2                  TRA     s:9038

      754     9008    6               CASE (%SC_FLTAG#);
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:97   

      755     9009    6                  F_TYPE = %FAULT_TAG_FT ;

   9009  2 001136   020000 236003                    LDQ     8192,DU
         2 001137   200037 470500                    LDP0    @F_TYPE,,AUTO
         2 001140   000000 756100                    STQ     0,,PR0
         2 001141   001245 710000 2                  TRA     s:9038

      756     9010    6               CASE (ELSE);

      757     9011    6                  TOF_ERROR_CODE.ERR# = %E$BADSUBCODE ;

   9011  2 001142   000003 236000 1                  LDQ     TOF_ERROR_CODE
         2 001143   000000 376000 3                  ANQ     0
         2 001144   001210 276007                    ORQ     648,DL
         2 001145   000003 756000 1                  STQ     TOF_ERROR_CODE

      758     9012    6                  CALL TOX$ERROR (TOF_ERROR_CODE) ;

   9012  2 001146   000001 630400 3                  EPPR0   1
         2 001147   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001150   000000 701000 xent               TSX1    TOX$ERROR
         2 001151   000000 011000                    NOP     0

      759     9013    6            END;

   9013  2 001152   001245 710000 2                  TRA     s:9038

      760     9014    5         CASE (%ECC_ERROR#);

      761     9015    6            DO CASE (SUB_CODE);

   9015  2 001153   200031 222100                    LDX2    SUB_CODE,,AUTO
         2 001154   000011 102003                    CMPX2   9,DU
         2 001155   001157 602012 2                  TNC     s:9015+4,X2
         2 001156   001220 710000 2                  TRA     s:9029
         2 001157   001170 710000 2                  TRA     s:9017
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:98   
         2 001160   001174 710000 2                  TRA     s:9019
         2 001161   001200 710000 2                  TRA     s:9021
         2 001162   001204 710000 2                  TRA     s:9023
         2 001163   001220 710000 2                  TRA     s:9029
         2 001164   001220 710000 2                  TRA     s:9029
         2 001165   001220 710000 2                  TRA     s:9029
         2 001166   001210 710000 2                  TRA     s:9025
         2 001167   001214 710000 2                  TRA     s:9027

      762     9016    6               CASE (%SC_MEMORY#);

      763     9017    6                  F_TYPE = %MEMORY_FT ;

   9017  2 001170   010000 236003                    LDQ     4096,DU
         2 001171   200037 470500                    LDP0    @F_TYPE,,AUTO
         2 001172   000000 756100                    STQ     0,,PR0
         2 001173   001245 710000 2                  TRA     s:9038

      764     9018    6               CASE (%SC_CMMD#);

      765     9019    6                  F_TYPE = %COMMAND_FT ;

   9019  2 001174   030000 236003                    LDQ     12288,DU
         2 001175   200037 470500                    LDP0    @F_TYPE,,AUTO
         2 001176   000000 756100                    STQ     0,,PR0
         2 001177   001245 710000 2                  TRA     s:9038

      766     9020    6               CASE (%SC_LOCKUP#);

      767     9021    6                  F_TYPE = %LOCKUP_FT ;

   9021  2 001200   050000 236003                    LDQ     20480,DU
         2 001201   200037 470500                    LDP0    @F_TYPE,,AUTO
         2 001202   000000 756100                    STQ     0,,PR0
         2 001203   001245 710000 2                  TRA     s:9038

      768     9022    6               CASE (%SC_IPR#);
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:99   

      769     9023    6                  F_TYPE = %IPR_FT ;

   9023  2 001204   060000 236003                    LDQ     24576,DU
         2 001205   200037 470500                    LDP0    @F_TYPE,,AUTO
         2 001206   000000 756100                    STQ     0,,PR0
         2 001207   001245 710000 2                  TRA     s:9038

      770     9024    6               CASE (%SC_PRTY#);

      771     9025    6                  F_TYPE = %PARITY_FT ;

   9025  2 001210   130000 236003                    LDQ     45056,DU
         2 001211   200037 470500                    LDP0    @F_TYPE,,AUTO
         2 001212   000000 756100                    STQ     0,,PR0
         2 001213   001245 710000 2                  TRA     s:9038

      772     9026    6               CASE (%SC_OPNC#);

      773     9027    6                  F_TYPE = %ONC_FT ;

   9027  2 001214   070000 236003                    LDQ     28672,DU
         2 001215   200037 470500                    LDP0    @F_TYPE,,AUTO
         2 001216   000000 756100                    STQ     0,,PR0
         2 001217   001245 710000 2                  TRA     s:9038

      774     9028    6               CASE (ELSE);

      775     9029    6                  TOF_ERROR_CODE.ERR# = %E$BADSUBCODE ;

   9029  2 001220   000003 236000 1                  LDQ     TOF_ERROR_CODE
         2 001221   000000 376000 3                  ANQ     0
         2 001222   001210 276007                    ORQ     648,DL
         2 001223   000003 756000 1                  STQ     TOF_ERROR_CODE

      776     9030    6                  CALL TOX$ERROR (TOF_ERROR_CODE) ;

PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:100  
   9030  2 001224   000001 630400 3                  EPPR0   1
         2 001225   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001226   000000 701000 xent               TSX1    TOX$ERROR
         2 001227   000000 011000                    NOP     0

      777     9031    6            END;

   9031  2 001230   001245 710000 2                  TRA     s:9038

      778     9032    5         CASE (%ECC_TIMER#);

      779     9033    5            F_TYPE = %TIMER_RUNOUT_FT ;

   9033  2 001231   120000 236003                    LDQ     40960,DU
         2 001232   200037 470500                    LDP0    @F_TYPE,,AUTO
         2 001233   000000 756100                    STQ     0,,PR0
         2 001234   001245 710000 2                  TRA     s:9038

      780     9034    5         CASE (ELSE);

      781     9035    5            TOF_ERROR_CODE.ERR# = %E$BADECC ;

   9035  2 001235   000003 236000 1                  LDQ     TOF_ERROR_CODE
         2 001236   000000 376000 3                  ANQ     0
         2 001237   001220 276007                    ORQ     656,DL
         2 001240   000003 756000 1                  STQ     TOF_ERROR_CODE

      782     9036    5            CALL TOX$ERROR (TOF_ERROR_CODE) ;

   9036  2 001241   000001 630400 3                  EPPR0   1
         2 001242   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001243   000000 701000 xent               TSX1    TOX$ERROR
         2 001244   000000 011000                    NOP     0

      783     9037    5      END;

      784     9038    4      RETURN;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:101  

   9038  2 001245   200036 221300                    LDX1  ! @MME_NUMBER+1,,AUTO
         2 001246   000001 702211                    TSX2  ! 1,X1

      785     9039
      786     9040    4   END TOF$GET_GELBAR_FTYPE;
      787     9041    3   END TOF$UPDATE_GELBAR_SPA;
      788     9042        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:102  
      789     9043        /*I* NAME:         TOF$GET_GELBAR_FVECTOR
      790     9044             OUTPUT:       TOF$GELBAR_FAULT_VECTOR
      791     9045             DESCRIPTION:  Fetches from word 19 of the SPA the
      792     9046                           transfer vector into the subexec's fault handler
      793     9047                           for GELBAR faults.  If none exist, it quits.
      794     9048        */
      795     9049
      796     9050    2   TOF$GET_GELBAR_FVECTOR: PROC;

   9050  2 001247   200034 741300       TOF$GET_GEL* STX1  ! HR_BUF$,,AUTO

      797     9051
      798     9052    3      TOF$GELBAR_FAULT_VECTOR = TOD$SPA.WD19;

   9052  2 001250   000000 470400 xsym               LDP0    TOD$SPA$
         2 001251   000023 235100                    LDA     19,,PR0
         2 001252   000002 755000 1                  STA     TOF$GELBAR_FAULT_VECTOR

      799     9053    3      IF TOF$GELBAR_FAULT_VECTOR = 0

   9053  2 001253   001265 601000 2                  TNZ     s:9058

      800     9054    4      THEN DO ;

      801     9055    4              TOF_ERROR_CODE.ERR# = %E$NOGLBVEC ;

   9055  2 001254   000003 236000 1                  LDQ     TOF_ERROR_CODE
         2 001255   000000 376000 3                  ANQ     0
         2 001256   001230 276007                    ORQ     664,DL
         2 001257   000003 756000 1                  STQ     TOF_ERROR_CODE

      802     9056    4              CALL TOX$SCREECH (TOF_ERROR_CODE) ;

   9056  2 001260   000001 630400 3                  EPPR0   1
         2 001261   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001262   000000 701000 xent               TSX1    TOX$SCREECH
         2 001263   000000 011000                    NOP     0
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:103  

      803     9057    4           END /* THEN */ ;

   9057  2 001264   001266 710000 2                  TRA     s:9060

      804     9058    3      ELSE RETURN ;

   9058  2 001265   000001 702211                    TSX2  ! 1,X1

      805     9059
      806     9060    3   END TOF$GET_GELBAR_FVECTOR;

   9060  2 001266   200034 221300                    LDX1  ! HR_BUF$,,AUTO
         2 001267   000001 702211                    TSX2  ! 1,X1

      807     9061    2   END TOF$TEST_PAGE_FAULT ;
      808     9062        %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:104  
      809     9063        /*I* NAME:         TOF$GET_MME_DATA
      810     9064             INPUT:        None.
      811     9065             OUTPUT:       IC_IN_GELBAR
      812     9066                           MME_INSTR$
      813     9067                           MME
      814     9068                           MREG
      815     9069                           MME_IR
      816     9070             DESCRIPTION:  Fetches the above registers from the current
      817     9071                           TCB frame and fetches 7 words from the subexec,
      818     9072                           starting with the MME instruction, and the next 6
      819     9073                           words.
      820     9074                           MME_INSTR$ will always represent the address of the
      821     9075                           MME instruction relative to the full ISR.
      822     9076        */
      823     9077
      824     9078    1   TOF$GET_MME_DATA: PROC;

   9078  2 001270   200034 741300       TOF$GET_MME* STX1  ! HR_BUF$,,AUTO

      825     9079
      826     9080    2      DCL MME_GMAP_DATA (0:6) UBIN (36) BASED ALIGNED;
      827     9081
      828     9082        /* Code */
      829     9083
      830     9084    2      IC_IN_GELBAR = B$TCB.STK$ -> B$EXCFR.IC;

   9084  2 001271   000000 470400 xsym               LDP0    B$TCB$
         2 001272   000001 471500                    LDP1    1,,PR0
         2 001273   100004 220100                    LDX0    4,,PR1
         2 001274   200026 740100                    STX0    IC_IN_GELBAR,,AUTO

      831     9085    2      MME_INSTR.ADR = B$TCB.STK$ -> B$EXCFR.IC;

   9085  2 001275   200022 740100                    STX0    MME_INSTR$,,AUTO

      832     9086    2      IF TOF$BAR.CURRENT.BASE = 0

PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:105  
   9086  2 001276   000000 236000 1                  LDQ     TOF$BAR
         2 001277   777000 316003                    CANQ    -512,DU
         2 001300   001312 600000 2                  TZE     s:9089

      833     9087    2      THEN /* Do Nothing --- Fault in FULL ISR */ ;
      834     9088    2      ELSE MME_INSTR.ADR = MME_INSTR.ADR + TOF$BAR.CURRENT.BASE * 512;

   9088  2 001301   200022 235100                    LDA     MME_INSTR$,,AUTO
         2 001302   000022 771000                    ARL     18
         2 001303   200042 755100                    STA     REG+1,,AUTO
         2 001304   000000 236000 1                  LDQ     TOF$BAR
         2 001305   000022 772000                    QRL     18
         2 001306   777000 376007                    ANQ     -512,DL
         2 001307   200042 036100                    ADLQ    REG+1,,AUTO
         2 001310   000000 622006                    EAX2    0,QL
         2 001311   200022 742100                    STX2    MME_INSTR$,,AUTO

      835     9089    2      MME_INSTR.SEGID = %IS_SEGID;

   9089  2 001312   006000 222003                    LDX2    3072,DU
         2 001313   200022 442100                    SXL2    MME_INSTR$,,AUTO

      836     9090    2      MME = MME_INSTR$ -> MME_GMAP_DATA;

   9090  2 001314   200022 471500                    LDP1    MME_INSTR$,,AUTO
         2 001315   000100 100500                    MLR     fill='000'O
         2 001316   100000 000034                    ADSC9   0,,PR1                   cn=0,n=28
         2 001317   200003 000034                    ADSC9   MME,,AUTO                cn=0,n=28

      837     9091    2      MREG = B$TCB.STK$ -> B$EXCFR.REGS;

   9091  2 001320   000001 473500                    LDP3    1,,PR0
         2 001321   000100 100500                    MLR     fill='000'O
         2 001322   300050 000034                    ADSC9   40,,PR3                  cn=0,n=28
         2 001323   200012 000034                    ADSC9   MREG,,AUTO               cn=0,n=28

      838     9092    2      MME_IR = B$TCB.STK$ -> B$EXCFR.IR;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:106  

   9092  2 001324   000001 473500                    LDP3    1,,PR0
         2 001325   300004 723100                    LXL3    4,,PR3
         2 001326   200027 743100                    STX3    MME_IR,,AUTO

      839     9093    2      RETURN;

   9093  2 001327   000001 702211                    TSX2  ! 1,X1

      840     9094
      841     9095    2   END TOF$GET_MME_DATA;
      842     9096        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:107  
      843     9097        /*I* NAME:         TOF$GET_EXCEPTION_CODE
      844     9098             INPUT:        None.
      845     9099             OUTPUT:       ECC contains Exception Condition Code from TCB.
      846     9100                           SUB_CODE contains sub code for the ECC.
      847     9101             DESCRIPTION:  Fetches the above 2 fields from the current TCB
      848     9102                           frame using B$EXCFR based structure.
      849     9103
      850     9104                           ECC = B$TCB.STK$ -> B$EXCFR.ECC;
      851     9105
      852     9106                           SUB_CODE = B$TCB.STK$ -> B$EXCFR.SUBC;
      853     9107        */
      854     9108
      855     9109    1   TOF$GET_EXCEPTION_CODE: PROC (ECC,SUB_CODE);

   9109  2 001330   200032 741300       TOF$GET_EXC* STX1  ! SUB_CODE+1,,AUTO

      856     9110
      857     9111    2      DCL ECC       UBIN HALF HALIGNED ;
      858     9112    2      DCL SUB_CODE  UBIN HALF HALIGNED ;
      859     9113
      860     9114        /* Code */
      861     9115
      862     9116    2      ECC = B$TCB.STK$ -> B$EXCFR.ECC;

   9116  2 001331   000000 470400 xsym               LDP0    B$TCB$
         2 001332   000001 471500                    LDP1    1,,PR0
         2 001333   200033 473500                    LDP3    @ECC,,AUTO
         2 001334   000100 100500                    MLR     fill='000'O
         2 001335   100000 400002                    ADSC9   0,,PR1                   cn=2,n=2
         2 001336   300000 000002                    ADSC9   0,,PR3                   cn=0,n=2

      863     9117    2      SUB_CODE = B$TCB.STK$ -> B$EXCFR.SUBC;

   9117  2 001337   000000 470400 xsym               LDP0    B$TCB$
         2 001340   000001 471500                    LDP1    1,,PR0
         2 001341   200034 474500                    LDP4    @SUB_CODE,,AUTO
         2 001342   000100 100500                    MLR     fill='000'O
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:108  
         2 001343   100100 400002                    ADSC9   64,,PR1                  cn=2,n=2
         2 001344   400000 000002                    ADSC9   0,,PR4                   cn=0,n=2

      864     9118    2      RETURN;

   9118  2 001345   200032 221300                    LDX1  ! SUB_CODE+1,,AUTO
         2 001346   000001 702211                    TSX2  ! 1,X1

      865     9119
      866     9120    2   END TOF$GET_EXCEPTION_CODE;
      867     9121        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:109  
      868     9122        /*I* NAME:         TOF$MME_HANDLER
      869     9123             INTERFACE:    TOG$GET_MME_DATA
      870     9124                           TOD$DISPATCHER
      871     9125                           TOO$TOLTS_MMES
      872     9126                           TOG$GCOS_MMES
      873     9127                           TOC$COLTS
      874     9128                           TOP$POLTS
      875     9129                           TOS$SOLTS
      876     9130                           TOF$RET_MME_DATA
      877     9131                           TOF$FIX_RET_IC
      878     9132                           TOF$6XAUTO
      879     9133             INPUT:        Current TCB frame.
      880     9134             OUTPUT:       Too numerous to delineate here.
      881     9135             DESCRIPTION:  The MME Handler decodes the MME number from a
      882     9136                           requesting subexec and calls the appropriate
      883     9137                           MME Service Routine to perform the requested
      884     9138                           service.  It then returns to the subexec, with the
      885     9139                           service performed.
      886     9140
      887     9141                           TOF$GET_MME_DATA fetches MME relevant data from the
      888     9142                           TCB frame and the subexec for use so that
      889     9143                           everyone writing a MME Service Routine does not need
      890     9144                           to go into the TCB or fetch things from the subexec.
      891     9145                           The following structures are returned:
      892     9146
      893     9147                             MME--7 words of data starting at MME instruction
      894     9148                             MREG--the registers at time of the MME
      895     9149                             MME_INSTR$--pointer to the MME instrucion
      896     9150
      897     9151                           The TOLTS dispatcher, TOD$DISPATCHER is called
      898     9152                           to service anything outstanding in the TOLTS
      899     9153                           dispatch queue.  Since the MME Handler is periodically
      900     9154                           entered by subexecs doing MME's, this technique
      901     9155                           assures periodic service of the TOLTS queue.
      902     9156                           In normal circumstances, the subexecs have their own
      903     9157                           internal dispatchers which periodically check for
      904     9158                           things to do, and if there is nothing, put themselves
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:110  
      905     9159                           to sleep.  So in effect, the timing mechanism of
      906     9160                           the subexecs is used to put TOLTS to sleep if
      907     9161                           there is nothing to be done.
      908     9162
      909     9163                           TOD$DISPATCHER is called on every MME except when
      910     9164                           the MME is MME GEENDC. Because of the present
      911     9165                           design, a remember variable used in the
      912     9166                           implementation of Courtesy Call, TOG$CC_RETURN,
      913     9167                           is not recursive.  Therefore, the dispatcher queue
      914     9168                           cannot be serviced if a MME GEENDC service is being
      915     9169                           requested because this request indicates that a
      916     9170                           Courtesy Call is in progress.  A dispatcher
      917     9171                           service for an Interslave Communication will
      918     9172                           initiate another Courtesy Call on completion,
      919     9173                           thus clobberring the remember variable which is
      920     9174                           set for the first Courtesy Call.  We get around
      921     9175                           this recursion problem by not calling the dispatcher
      922     9176                           if a Courtesy Call is in progress.
      923     9177
      924     9178                           On return from the dispatcher, the MME number (bits
      925     9179                           0-17 in the MME instruction) is examined and one
      926     9180                           of several MME Service Routines is called.
      927     9181                           The MME Service Routines are grouped into several
      928     9182                           separate external PL6 procedures.  The interface
      929     9183                           to each is the same.  Each Service Routine is
      930     9184                           passed the registers at the time of the MME, the
      931     9185                           MME instruction and the first 6 words following it,
      932     9186                           a pointer to the MME instruction and RETURN_DELTA.
      933     9187                           Each MME Service Routine must use the
      934     9188                           MME number to decide which MME needs to be serviced.
      935     9189
      936     9190                           Parameters passed from the subexec are either in
      937     9191                           MREG or MME.  These 2 structures are
      938     9192                           restored prior to returning to the subexec, so
      939     9193                           that return information can be returned through
      940     9194                           them.  If this is not sufficient,  MME_INSTR$
      941     9195                           allows access to the subexec's memory.
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:111  
      942     9196                           RETURN_DELTA is returned to the MME Handler, and
      943     9197                           indicates how many instructions past the MME
      944     9198                           instruction control should be returned to.
      945     9199
      946     9200                           In general, standard GCOS and TOLTS defined MME's
      947     9201                           are serviced by TOG$GCOS_MMES and
      948     9202                           TOO$TOLTS_MMES.  Each of the subexecs
      949     9203                           have their own MME Service Routine for their
      950     9204                           unique MME's.
      951     9205
      952     9206                           All MME Service Routines return here when complete
      953     9207                           except for MME GELBAR and MME GEENDC.  On
      954     9208                           return, data is set up to be returned to the subexec
      955     9209                           via registers and the 6 words following the MME.
      956     9210                           The return IC is calculated using RETURN_DELTA and
      957     9211                           the address of the MME instruction.
      958     9212
      959     9213                           Finally, TOF$6XAUTO is called, which in turn
      960     9214                           calls the CP6 system subroutine 6XAUTO which
      961     9215                           pops the current auto frame and updates the
      962     9216                           pointer to the current auto frame in word 0 of
      963     9217                           the auto segment.  This is necessary because
      964     9218                           asynchronous PL6 procedures call 6ASYNC
      965     9219                           to establish a new auto frame.  6ASYNC
      966     9220                           first re-establishes PR2 from a current copy
      967     9221                           stored in word 0 of the auto segment.  However,
      968     9222                           M$TRTN does not update this to reflect an auto frame
      969     9223                           being popped off.  So in essence, the auto
      970     9224                           frame keeps growing forever.  By calling 6XAUTO
      971     9225                           ourselves, we both pop the current auto frame and
      972     9226                           update word 0 of the auto segment.
      973     9227
      974     9228                           This special routine may be taken out when LADC
      975     9229                           fixes up M$TRTN.
      976     9230
      977     9231                           M$TRTN is called to pop the current TCB
      978     9232                           frame, restore the environment at the time of
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:112  
      979     9233                           the MME and return to the subexec.  The ALTRET
      980     9234                           from M$TRTN (should it occur) will cause a
      981     9235                           Lock Up fault by branching to itself since
      982     9236                           there is no auto frame at this point and we cannot
      983     9237                           handle the ALTRET.
      984     9238        */
      985     9239
      986     9240    1   TOF$MME_HANDLER: PROC;

   9240  2 001347   200032 741300       TOF$MME_HAN* STX1  ! SUB_CODE+1,,AUTO

      987     9241
      988     9242           %FPT_TRTN (FPTN = TRTN_FPT);
      989     9259
      990     9260        /* Code */
      991     9261
      992     9262    2      CALL TOF$GET_MME_DATA;

   9262  2 001350   001270 701000 2                  TSX1    TOF$GET_MME_DATA
         2 001351   000000 011000                    NOP     0

      993     9263    2      CALL TOF$SERVICE_OUTSTANDING_IO (MME.INST.NO) ;

   9263  2 001352   200003 630500                    EPPR0   MME,,AUTO
         2 001353   200035 450500                    STP0    F_TYPE,,AUTO
         2 001354   001415 701000 2                  TSX1    TOF$SERVICE_OUTSTANDING_IO
         2 001355   000000 011000                    NOP     0

      994     9264    2      IF TOQ$DCP.PF.DISP_MMES

   9264  2 001356   000000 236000 xsym               LDQ     TOQ$DCP
         2 001357   004000 316003                    CANQ    2048,DU
         2 001360   001371 600000 2                  TZE     s:9271

      995     9265    3      THEN DO ;

      996     9266    3              TOQ$DCP.PF.REASON = %MME_FT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:113  

   9266  2 001361   000000 236003                    LDQ     0,DU
         2 001362   000000 552020 xsym               STBQ    TOQ$DCP,'20'O

      997     9267    3              TOQ$DCP.MME = MME.INST.NO ;

   9267  2 001363   200003 235100                    LDA     MME,,AUTO
         2 001364   000022 731000                    ARS     18
         2 001365   000012 755000 xsym               STA     TOQ$DCP+10

      998     9268    3              CALL TOQ$DEBUG ;

   9268  2 001366   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001367   000000 701000 xent               TSX1    TOQ$DEBUG
         2 001370   000000 011000                    NOP     0

      999     9269    3           END /* THEN */ ;

     1000     9270    2      ELSE /* Display of MMES not requested. */ ;
     1001     9271    2      IF MME.INST.NO >  0

   9271  2 001371   200003 220100                    LDX0    MME,,AUTO
         2 001372   001400 604400 2                  TMOZ    s:9273

     1002     9272    2      THEN CALL TOF$SELECT_GCOS_MME (MME.INST.NO) ;

   9272  2 001373   200003 630500                    EPPR0   MME,,AUTO
         2 001374   200035 450500                    STP0    F_TYPE,,AUTO
         2 001375   001440 701000 2                  TSX1    TOF$SELECT_GCOS_MME
         2 001376   000000 011000                    NOP     0
         2 001377   001404 710000 2                  TRA     s:9274

     1003     9273    2      ELSE CALL TOF$SELECT_TND_MME (MME.INST.NO) ;

   9273  2 001400   200003 630500                    EPPR0   MME,,AUTO
         2 001401   200035 450500                    STP0    F_TYPE,,AUTO
         2 001402   001621 701000 2                  TSX1    TOF$SELECT_TND_MME
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:114  
         2 001403   000000 011000                    NOP     0

     1004     9274    2      CALL TOF$RET_MME_DATA;

   9274  2 001404   002146 701000 2                  TSX1    TOF$RET_MME_DATA
         2 001405   000000 011000                    NOP     0

     1005     9275    2      CALL TOF$FIX_RET_IC;

   9275  2 001406   002162 701000 2                  TSX1    TOF$FIX_RET_IC
         2 001407   000000 011000                    NOP     0

     1006     9276    2      CALL TOF_TRTN (TRTN_FPT);

   9276  2 001410   000005 630400 3                  EPPR0   5
         2 001411   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001412   000000 701000 xent               TSX1    TOF_TRTN
         2 001413   000000 011000                    NOP     0
         2 001414   002174 710000 2                  TRA     s:9421

     1007     9277
     1008     9278        /* END TOF$MME_HANDLER */
     1009     9279        %EJECT;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:115  
     1010     9280        /*I* NAME:         TOF$SERVICE_OUTSTANDING_IO
     1011     9281             PURPOSE:      Complete any outstanding I/O's
     1012     9282             DESCRIPTION: This procedure calls the DISPATCHER so that
     1013     9283                          any outstanding i/o's can be serviced.
     1014     9284        */
     1015     9285
     1016     9286    2   TOF$SERVICE_OUTSTANDING_IO: PROC (MME_NUMBER) ;

   9286  2 001415   200034 741300       TOF$SERVICE* STX1  ! @SUB_CODE,,AUTO

     1017     9287
     1018     9288    3      DCL MME_NUMBER  SBIN HALF HALIGNED ;
     1019     9289
     1020     9290        /* Code */
     1021     9291
     1022     9292    3      IF MME_NUMBER = %GEENDC

   9292  2 001416   200035 470500                    LDP0    @MME_NUMBER,,AUTO
         2 001417   000100 100500                    MLR     fill='000'O
         2 001420   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         2 001421   200042 000004                    ADSC9   REG+1,,AUTO              cn=0,n=4
         2 001422   200042 236100                    LDQ     REG+1,,AUTO
         2 001423   000022 732000                    QRS     18
         2 001424   000016 116007                    CMPQ    14,DL
         2 001425   001436 600000 2                  TZE     s:9298

     1023     9293    3      THEN /* Don't call DISPATCHER if servicing a MME GEENDC */ ;
     1024     9294    4      ELSE DO;

     1025     9295    4              REQUEST_TYPE = %DRT_SERVICE;

   9295  2 001426   000002 235007                    LDA     2,DL
         2 001427   200030 755100                    STA     REQUEST_TYPE,,AUTO

     1026     9296    4              CALL TOD$DISPATCHER(REQUEST_TYPE,,);

   9296  2 001430   200030 631500                    EPPR1   REQUEST_TYPE,,AUTO
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:116  
         2 001431   200042 451500                    STP1    REG+1,,AUTO
         2 001432   200042 630500                    EPPR0   REG+1,,AUTO
         2 001433   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001434   000000 701000 xent               TSX1    TOD$DISPATCHER
         2 001435   000000 011000                    NOP     0

     1027     9297    4           END;

     1028     9298    3      RETURN ;

   9298  2 001436   200034 221300                    LDX1  ! @SUB_CODE,,AUTO
         2 001437   000001 702211                    TSX2  ! 1,X1

     1029     9299
     1030     9300    3   END TOF$SERVICE_OUTSTANDING_IO ;
     1031     9301        %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:117  
     1032     9302        /*I* NAME:        TOF$SELECT_GCOS_MME
     1033     9303             PURPOSE:     Selects positive MME number
     1034     9304             DESCRIPTION: This procedure determines which routine to call
     1035     9305                          for a GCOS (positive) MME number.
     1036     9306        */
     1037     9307
     1038     9308    2   TOF$SELECT_GCOS_MME: PROC (MME_NUMBER) ;

   9308  2 001440   200034 741300       TOF$SELECT_* STX1  ! @SUB_CODE,,AUTO

     1039     9309
     1040     9310    3      DCL MME_NUMBER  SBIN HALF HALIGNED ;
     1041     9311
     1042     9312        /* Code */
     1043     9313
     1044     9314    4      DO CASE (MME_NUMBER);

   9314  2 001441   200035 470500                    LDP0    @MME_NUMBER,,AUTO
         2 001442   000100 100500                    MLR     fill='000'O
         2 001443   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         2 001444   200042 000004                    ADSC9   REG+1,,AUTO              cn=0,n=4
         2 001445   200042 236100                    LDQ     REG+1,,AUTO
         2 001446   000022 732000                    QRS     18
         2 001447   000055 116007                    CMPQ    45,DL
         2 001450   001452 602006 2                  TNC     s:9314+9,QL
         2 001451   001607 710000 2                  TRA     s:9326
         2 001452   001607 710000 2                  TRA     s:9326
         2 001453   001544 710000 2                  TRA     s:9319
         2 001454   001527 710000 2                  TRA     s:9317
         2 001455   001607 710000 2                  TRA     s:9326
         2 001456   001607 710000 2                  TRA     s:9326
         2 001457   001527 710000 2                  TRA     s:9317
         2 001460   001607 710000 2                  TRA     s:9326
         2 001461   001576 710000 2                  TRA     s:9323
         2 001462   001607 710000 2                  TRA     s:9326
         2 001463   001527 710000 2                  TRA     s:9317
         2 001464   001607 710000 2                  TRA     s:9326
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:118  
         2 001465   001607 710000 2                  TRA     s:9326
         2 001466   001607 710000 2                  TRA     s:9326
         2 001467   001607 710000 2                  TRA     s:9326
         2 001470   001544 710000 2                  TRA     s:9319
         2 001471   001527 710000 2                  TRA     s:9317
         2 001472   001607 710000 2                  TRA     s:9326
         2 001473   001527 710000 2                  TRA     s:9317
         2 001474   001527 710000 2                  TRA     s:9317
         2 001475   001607 710000 2                  TRA     s:9326
         2 001476   001607 710000 2                  TRA     s:9326
         2 001477   001527 710000 2                  TRA     s:9317
         2 001500   001607 710000 2                  TRA     s:9326
         2 001501   001607 710000 2                  TRA     s:9326
         2 001502   001561 710000 2                  TRA     s:9321
         2 001503   001607 710000 2                  TRA     s:9326
         2 001504   001607 710000 2                  TRA     s:9326
         2 001505   001607 710000 2                  TRA     s:9326
         2 001506   001527 710000 2                  TRA     s:9317
         2 001507   001607 710000 2                  TRA     s:9326
         2 001510   001607 710000 2                  TRA     s:9326
         2 001511   001544 710000 2                  TRA     s:9319
         2 001512   001607 710000 2                  TRA     s:9326
         2 001513   001607 710000 2                  TRA     s:9326
         2 001514   001607 710000 2                  TRA     s:9326
         2 001515   001607 710000 2                  TRA     s:9326
         2 001516   001607 710000 2                  TRA     s:9326
         2 001517   001607 710000 2                  TRA     s:9326
         2 001520   001607 710000 2                  TRA     s:9326
         2 001521   001607 710000 2                  TRA     s:9326
         2 001522   001607 710000 2                  TRA     s:9326
         2 001523   001607 710000 2                  TRA     s:9326
         2 001524   001607 710000 2                  TRA     s:9326
         2 001525   001576 710000 2                  TRA     s:9323
         2 001526   001576 710000 2                  TRA     s:9323

     1045     9315    4         CASE (%GECALL, %GEMORE, %GEMREL, %GERELC,

PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:119  
     1046     9316    4              %GEROAD, %GESNAP, %GETIME, %GEWAKE) ;
     1047     9317    4            CALL TOO$TOLTS_MMES (MME,MREG,MME_INSTR$,RETURN_DELTA);

   9317  2 001527   200023 631500                    EPPR1   RETURN_DELTA,,AUTO
         2 001530   200045 451500                    STP1    REG+4,,AUTO
         2 001531   200022 633500                    EPPR3   MME_INSTR$,,AUTO
         2 001532   200044 453500                    STP3    REG+3,,AUTO
         2 001533   200012 634500                    EPPR4   MREG,,AUTO
         2 001534   200043 454500                    STP4    REG+2,,AUTO
         2 001535   200003 635500                    EPPR5   MME,,AUTO
         2 001536   200042 455500                    STP5    REG+1,,AUTO
         2 001537   200042 630500                    EPPR0   REG+1,,AUTO
         2 001540   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 001541   000000 701000 xent               TSX1    TOO$TOLTS_MMES
         2 001542   000000 011000                    NOP     0
         2 001543   001617 710000 2                  TRA     s:9329

     1048     9318    4         CASE (%GEENDC, %GEINOS, %GELBAR) ;

     1049     9319    4            CALL TOG$GCOS_MMES (MME,MREG,MME_INSTR$,RETURN_DELTA);

   9319  2 001544   200023 631500                    EPPR1   RETURN_DELTA,,AUTO
         2 001545   200045 451500                    STP1    REG+4,,AUTO
         2 001546   200022 633500                    EPPR3   MME_INSTR$,,AUTO
         2 001547   200044 453500                    STP3    REG+3,,AUTO
         2 001550   200012 634500                    EPPR4   MREG,,AUTO
         2 001551   200043 454500                    STP4    REG+2,,AUTO
         2 001552   200003 635500                    EPPR5   MME,,AUTO
         2 001553   200042 455500                    STP5    REG+1,,AUTO
         2 001554   200042 630500                    EPPR0   REG+1,,AUTO
         2 001555   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 001556   000000 701000 xent               TSX1    TOG$GCOS_MMES
         2 001557   000000 011000                    NOP     0
         2 001560   001617 710000 2                  TRA     s:9329

     1050     9320    4         CASE (%GEROUT);

PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:120  
     1051     9321    4            CALL TOC$COLTS (MME,MREG,MME_INSTR$,RETURN_DELTA);

   9321  2 001561   200023 631500                    EPPR1   RETURN_DELTA,,AUTO
         2 001562   200045 451500                    STP1    REG+4,,AUTO
         2 001563   200022 633500                    EPPR3   MME_INSTR$,,AUTO
         2 001564   200044 453500                    STP3    REG+3,,AUTO
         2 001565   200012 634500                    EPPR4   MREG,,AUTO
         2 001566   200043 454500                    STP4    REG+2,,AUTO
         2 001567   200003 635500                    EPPR5   MME,,AUTO
         2 001570   200042 455500                    STP5    REG+1,,AUTO
         2 001571   200042 630500                    EPPR0   REG+1,,AUTO
         2 001572   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 001573   000000 701000 xent               TSX1    TOC$COLTS
         2 001574   000000 011000                    NOP     0
         2 001575   001617 710000 2                  TRA     s:9329

     1052     9322    4         CASE (%GEFINI, %GMODES, %GMODER) ;

     1053     9323    4            TOF_ERROR_CODE.ERR# = %E$ILLMME ;

   9323  2 001576   000003 236000 1                  LDQ     TOF_ERROR_CODE
         2 001577   000000 376000 3                  ANQ     0
         2 001600   001250 276007                    ORQ     680,DL
         2 001601   000003 756000 1                  STQ     TOF_ERROR_CODE

     1054     9324    4            CALL TOX$ERROR (TOF_ERROR_CODE) ;

   9324  2 001602   000001 630400 3                  EPPR0   1
         2 001603   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001604   000000 701000 xent               TSX1    TOX$ERROR
         2 001605   000000 011000                    NOP     0
         2 001606   001617 710000 2                  TRA     s:9329

     1055     9325    4         CASE (ELSE);

     1056     9326    4            TOF_ERROR_CODE.ERR# = %E$INVMME ;

PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:121  
   9326  2 001607   000003 236000 1                  LDQ     TOF_ERROR_CODE
         2 001610   000000 376000 3                  ANQ     0
         2 001611   001240 276007                    ORQ     672,DL
         2 001612   000003 756000 1                  STQ     TOF_ERROR_CODE

     1057     9327    4            CALL TOX$ERROR (TOF_ERROR_CODE) ;

   9327  2 001613   000001 630400 3                  EPPR0   1
         2 001614   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001615   000000 701000 xent               TSX1    TOX$ERROR
         2 001616   000000 011000                    NOP     0

     1058     9328    4      END /* CASE */ ;

     1059     9329    3      RETURN ;

   9329  2 001617   200034 221300                    LDX1  ! @SUB_CODE,,AUTO
         2 001620   000001 702211                    TSX2  ! 1,X1

     1060     9330
     1061     9331    3   END TOF$SELECT_GCOS_MME ;
     1062     9332        %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:122  
     1063     9333        /*I* NAME:        TOF$SELECT_TND_MME
     1064     9334             PURPOSE:     Selects negative MME number
     1065     9335             DESCRIPTION: This procedure determines which routine to call
     1066     9336                          for a TND (negative) MME number.
     1067     9337        */
     1068     9338
     1069     9339    2   TOF$SELECT_TND_MME: PROC (MME_NUMBER) ;

   9339  2 001621   200034 741300       TOF$SELECT_* STX1  ! @SUB_CODE,,AUTO

     1070     9340
     1071     9341    3      DCL MME_NUMBER  SBIN HALF HALIGNED ;
     1072     9342
     1073     9343        /* Code */
     1074     9344
     1075     9345    4      DO CASE (-MME_NUMBER);

   9345  2 001622   200035 470500                    LDP0    @MME_NUMBER,,AUTO
         2 001623   000100 100500                    MLR     fill='000'O
         2 001624   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         2 001625   200042 000004                    ADSC9   REG+1,,AUTO              cn=0,n=4
         2 001626   200042 236100                    LDQ     REG+1,,AUTO
         2 001627   000022 732000                    QRS     18
         2 001630   000027 676000 xsym               ERQ     B_VECTNIL+23
         2 001631   000001 036007                    ADLQ    1,DL
         2 001632   000150 116007                    CMPQ    104,DL
         2 001633   001635 602006 2                  TNC     s:9345+11,QL
         2 001634   002134 710000 2                  TRA     s:9378
         2 001635   002134 710000 2                  TRA     s:9378
         2 001636   002005 710000 2                  TRA     s:9350
         2 001637   002005 710000 2                  TRA     s:9350
         2 001640   002123 710000 2                  TRA     s:9375
         2 001641   002037 710000 2                  TRA     s:9359
         2 001642   002037 710000 2                  TRA     s:9359
         2 001643   002037 710000 2                  TRA     s:9359
         2 001644   002022 710000 2                  TRA     s:9352
         2 001645   002005 710000 2                  TRA     s:9350
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:123  
         2 001646   002037 710000 2                  TRA     s:9359
         2 001647   002123 710000 2                  TRA     s:9375
         2 001650   002005 710000 2                  TRA     s:9350
         2 001651   002037 710000 2                  TRA     s:9359
         2 001652   002005 710000 2                  TRA     s:9350
         2 001653   002037 710000 2                  TRA     s:9359
         2 001654   002037 710000 2                  TRA     s:9359
         2 001655   002037 710000 2                  TRA     s:9359
         2 001656   002037 710000 2                  TRA     s:9359
         2 001657   002037 710000 2                  TRA     s:9359
         2 001660   002037 710000 2                  TRA     s:9359
         2 001661   002037 710000 2                  TRA     s:9359
         2 001662   002005 710000 2                  TRA     s:9350
         2 001663   002037 710000 2                  TRA     s:9359
         2 001664   002123 710000 2                  TRA     s:9375
         2 001665   002005 710000 2                  TRA     s:9350
         2 001666   002037 710000 2                  TRA     s:9359
         2 001667   002037 710000 2                  TRA     s:9359
         2 001670   002134 710000 2                  TRA     s:9378
         2 001671   002037 710000 2                  TRA     s:9359
         2 001672   002037 710000 2                  TRA     s:9359
         2 001673   002005 710000 2                  TRA     s:9350
         2 001674   002005 710000 2                  TRA     s:9350
         2 001675   002123 710000 2                  TRA     s:9375
         2 001676   002005 710000 2                  TRA     s:9350
         2 001677   002005 710000 2                  TRA     s:9350
         2 001700   002005 710000 2                  TRA     s:9350
         2 001701   002037 710000 2                  TRA     s:9359
         2 001702   002005 710000 2                  TRA     s:9350
         2 001703   002005 710000 2                  TRA     s:9350
         2 001704   002005 710000 2                  TRA     s:9350
         2 001705   002005 710000 2                  TRA     s:9350
         2 001706   002037 710000 2                  TRA     s:9359
         2 001707   002037 710000 2                  TRA     s:9359
         2 001710   002054 710000 2                  TRA     s:9362
         2 001711   002054 710000 2                  TRA     s:9362
         2 001712   002054 710000 2                  TRA     s:9362
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:124  
         2 001713   002054 710000 2                  TRA     s:9362
         2 001714   002054 710000 2                  TRA     s:9362
         2 001715   002123 710000 2                  TRA     s:9375
         2 001716   002123 710000 2                  TRA     s:9375
         2 001717   002071 710000 2                  TRA     s:9364
         2 001720   002071 710000 2                  TRA     s:9364
         2 001721   002037 710000 2                  TRA     s:9359
         2 001722   002071 710000 2                  TRA     s:9364
         2 001723   002071 710000 2                  TRA     s:9364
         2 001724   002037 710000 2                  TRA     s:9359
         2 001725   002037 710000 2                  TRA     s:9359
         2 001726   002123 710000 2                  TRA     s:9375
         2 001727   002123 710000 2                  TRA     s:9375
         2 001730   002106 710000 2                  TRA     s:9366
         2 001731   002123 710000 2                  TRA     s:9375
         2 001732   002106 710000 2                  TRA     s:9366
         2 001733   002106 710000 2                  TRA     s:9366
         2 001734   002123 710000 2                  TRA     s:9375
         2 001735   002123 710000 2                  TRA     s:9375
         2 001736   002123 710000 2                  TRA     s:9375
         2 001737   002123 710000 2                  TRA     s:9375
         2 001740   002123 710000 2                  TRA     s:9375
         2 001741   002123 710000 2                  TRA     s:9375
         2 001742   002123 710000 2                  TRA     s:9375
         2 001743   002123 710000 2                  TRA     s:9375
         2 001744   002123 710000 2                  TRA     s:9375
         2 001745   002123 710000 2                  TRA     s:9375
         2 001746   002123 710000 2                  TRA     s:9375
         2 001747   002123 710000 2                  TRA     s:9375
         2 001750   002123 710000 2                  TRA     s:9375
         2 001751   002123 710000 2                  TRA     s:9375
         2 001752   002054 710000 2                  TRA     s:9362
         2 001753   002054 710000 2                  TRA     s:9362
         2 001754   002123 710000 2                  TRA     s:9375
         2 001755   002123 710000 2                  TRA     s:9375
         2 001756   002123 710000 2                  TRA     s:9375
         2 001757   002123 710000 2                  TRA     s:9375
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:125  
         2 001760   002123 710000 2                  TRA     s:9375
         2 001761   002123 710000 2                  TRA     s:9375
         2 001762   002123 710000 2                  TRA     s:9375
         2 001763   002123 710000 2                  TRA     s:9375
         2 001764   002037 710000 2                  TRA     s:9359
         2 001765   002134 710000 2                  TRA     s:9378
         2 001766   002134 710000 2                  TRA     s:9378
         2 001767   002134 710000 2                  TRA     s:9378
         2 001770   002134 710000 2                  TRA     s:9378
         2 001771   002134 710000 2                  TRA     s:9378
         2 001772   002134 710000 2                  TRA     s:9378
         2 001773   002134 710000 2                  TRA     s:9378
         2 001774   002134 710000 2                  TRA     s:9378
         2 001775   002134 710000 2                  TRA     s:9378
         2 001776   002054 710000 2                  TRA     s:9362
         2 001777   002054 710000 2                  TRA     s:9362
         2 002000   002134 710000 2                  TRA     s:9378
         2 002001   002134 710000 2                  TRA     s:9378
         2 002002   002134 710000 2                  TRA     s:9378
         2 002003   002134 710000 2                  TRA     s:9378
         2 002004   002037 710000 2                  TRA     s:9359

     1076     9346    4         CASE (%ABSTIM, %ACCWRT, %CONTML, %DISPRT,

     1077     9347    4              %GEPROC, %PROCTM, %READIO, %SETPR2,
     1078     9348    4              %SETPRT, %SETTYP, %TADIOD, %TERMIN,
     1079     9349    4              %TOLDIS, %TOLGON, %TOLTIN, %TRACIO) ;
     1080     9350    4            CALL TOO$TOLTS_MMES (MME,MREG,MME_INSTR$,RETURN_DELTA);

   9350  2 002005   200023 631500                    EPPR1   RETURN_DELTA,,AUTO
         2 002006   200045 451500                    STP1    REG+4,,AUTO
         2 002007   200022 633500                    EPPR3   MME_INSTR$,,AUTO
         2 002010   200044 453500                    STP3    REG+3,,AUTO
         2 002011   200012 634500                    EPPR4   MREG,,AUTO
         2 002012   200043 454500                    STP4    REG+2,,AUTO
         2 002013   200003 635500                    EPPR5   MME,,AUTO
         2 002014   200042 455500                    STP5    REG+1,,AUTO
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:126  
         2 002015   200042 630500                    EPPR0   REG+1,,AUTO
         2 002016   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 002017   000000 701000 xent               TSX1    TOO$TOLTS_MMES
         2 002020   000000 011000                    NOP     0
         2 002021   002144 710000 2                  TRA     s:9381

     1081     9351    4         CASE (%CLEARQ);

     1082     9352    4            CALL TOG$GCOS_MMES (MME,MREG,MME_INSTR$,RETURN_DELTA);

   9352  2 002022   200023 631500                    EPPR1   RETURN_DELTA,,AUTO
         2 002023   200045 451500                    STP1    REG+4,,AUTO
         2 002024   200022 633500                    EPPR3   MME_INSTR$,,AUTO
         2 002025   200044 453500                    STP3    REG+3,,AUTO
         2 002026   200012 634500                    EPPR4   MREG,,AUTO
         2 002027   200043 454500                    STP4    REG+2,,AUTO
         2 002030   200003 635500                    EPPR5   MME,,AUTO
         2 002031   200042 455500                    STP5    REG+1,,AUTO
         2 002032   200042 630500                    EPPR0   REG+1,,AUTO
         2 002033   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 002034   000000 701000 xent               TSX1    TOG$GCOS_MMES
         2 002035   000000 011000                    NOP     0
         2 002036   002144 710000 2                  TRA     s:9381

     1083     9353    4         CASE (%ALCMCA, %ALLOCR, %ASGPAT, %CHANTM, %DEALCP, %EXPDEV,

     1084     9354    4                    %GETCSC, %GETLIN, %HUNGTM, %IOCONS,
     1085     9355    4                    %IPCWDT, %LPWDT, %LODIMG, %LODVFC,
     1086     9356    4                    %PACMAN, %POINIT, %PRTRAN, %RELEAS, %RELLNK,
     1087     9357    4                    %RLSMPC, %RLSPAT, %SCTCMP,
     1088     9358    4                    %TESTIO, %UNSPEC, %WRDUMP) ;
     1089     9359    4            CALL TOP$POLTS (MME,MREG,MME_INSTR$,RETURN_DELTA);

   9359  2 002037   200023 631500                    EPPR1   RETURN_DELTA,,AUTO
         2 002040   200045 451500                    STP1    REG+4,,AUTO
         2 002041   200022 633500                    EPPR3   MME_INSTR$,,AUTO
         2 002042   200044 453500                    STP3    REG+3,,AUTO
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:127  
         2 002043   200012 634500                    EPPR4   MREG,,AUTO
         2 002044   200043 454500                    STP4    REG+2,,AUTO
         2 002045   200003 635500                    EPPR5   MME,,AUTO
         2 002046   200042 455500                    STP5    REG+1,,AUTO
         2 002047   200042 630500                    EPPR0   REG+1,,AUTO
         2 002050   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 002051   000000 701000 xent               TSX1    TOP$POLTS
         2 002052   000000 011000                    NOP     0
         2 002053   002144 710000 2                  TRA     s:9381

     1090     9360    4         CASE (%COMWD, %CPUASG, %CPUREL, %HISREG, %RETCPU, %RETRY,

     1091     9361    4                    %SCUASG, %SCUREL, %TAKCPU) ;
     1092     9362    4            CALL TOS$SOLTS (MME,MREG,MME_INSTR$,RETURN_DELTA);

   9362  2 002054   200023 631500                    EPPR1   RETURN_DELTA,,AUTO
         2 002055   200045 451500                    STP1    REG+4,,AUTO
         2 002056   200022 633500                    EPPR3   MME_INSTR$,,AUTO
         2 002057   200044 453500                    STP3    REG+3,,AUTO
         2 002060   200012 634500                    EPPR4   MREG,,AUTO
         2 002061   200043 454500                    STP4    REG+2,,AUTO
         2 002062   200003 635500                    EPPR5   MME,,AUTO
         2 002063   200042 455500                    STP5    REG+1,,AUTO
         2 002064   200042 630500                    EPPR0   REG+1,,AUTO
         2 002065   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 002066   000000 701000 xent               TSX1    TOS$SOLTS
         2 002067   000000 011000                    NOP     0
         2 002070   002144 710000 2                  TRA     s:9381

     1093     9363    4         CASE (%CATADT, %DATADT, %FREEZE, %UNFREZ) ;

     1094     9364    4            CALL TOM$MOLTS (MME,MREG,MME_INSTR$,RETURN_DELTA);

   9364  2 002071   200023 631500                    EPPR1   RETURN_DELTA,,AUTO
         2 002072   200045 451500                    STP1    REG+4,,AUTO
         2 002073   200022 633500                    EPPR3   MME_INSTR$,,AUTO
         2 002074   200044 453500                    STP3    REG+3,,AUTO
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:128  
         2 002075   200012 634500                    EPPR4   MREG,,AUTO
         2 002076   200043 454500                    STP4    REG+2,,AUTO
         2 002077   200003 635500                    EPPR5   MME,,AUTO
         2 002100   200042 455500                    STP5    REG+1,,AUTO
         2 002101   200042 630500                    EPPR0   REG+1,,AUTO
         2 002102   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 002103   000000 701000 xent               TSX1    TOM$MOLTS
         2 002104   000000 011000                    NOP     0
         2 002105   002144 710000 2                  TRA     s:9381

     1095     9365    4         CASE (%COINIT, %FEPTYP, %LOGFEP) ;

     1096     9366    4            CALL TOC$COLTS (MME,MREG,MME_INSTR$,RETURN_DELTA);

   9366  2 002106   200023 631500                    EPPR1   RETURN_DELTA,,AUTO
         2 002107   200045 451500                    STP1    REG+4,,AUTO
         2 002110   200022 633500                    EPPR3   MME_INSTR$,,AUTO
         2 002111   200044 453500                    STP3    REG+3,,AUTO
         2 002112   200012 634500                    EPPR4   MREG,,AUTO
         2 002113   200043 454500                    STP4    REG+2,,AUTO
         2 002114   200003 635500                    EPPR5   MME,,AUTO
         2 002115   200042 455500                    STP5    REG+1,,AUTO
         2 002116   200042 630500                    EPPR0   REG+1,,AUTO
         2 002117   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 002120   000000 701000 xent               TSX1    TOC$COLTS
         2 002121   000000 011000                    NOP     0
         2 002122   002144 710000 2                  TRA     s:9381

     1097     9367                 %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:129  
     1098     9368    4         CASE (%ALLCOFF, %DECUSG, %ECLLOG,

     1099     9369    4                    %FEPIO, %FEPMBX, %FEPNUM, %FNDSCT, %FPINIT,
     1100     9370    4                    %GETRLP, %GETSEG, %GIVSEG, %HYPMOD, %NEWLIN,
     1101     9371    4                    %PUNOFF, %QUESYS, %RELCMP, %RELMEM, %RSCRRD, %RSIQDT,
     1102     9372    4                    %SESIAT, %SESSDA, %SESTRM, %SETPUN,
     1103     9373    4                    %SUSCMP, %SYNDRM, %SYSLNK,
     1104     9374    4                    %TYPTID, %WRKACT, %WRKINQ, %WRKSRT, %WRKTRM) ;
     1105     9375    4            TOF_ERROR_CODE.ERR# = %E$ILLMME ;

   9375  2 002123   000003 236000 1                  LDQ     TOF_ERROR_CODE
         2 002124   000000 376000 3                  ANQ     0
         2 002125   001250 276007                    ORQ     680,DL
         2 002126   000003 756000 1                  STQ     TOF_ERROR_CODE

     1106     9376    4            CALL TOX$ERROR (TOF_ERROR_CODE) ;

   9376  2 002127   000001 630400 3                  EPPR0   1
         2 002130   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002131   000000 701000 xent               TSX1    TOX$ERROR
         2 002132   000000 011000                    NOP     0
         2 002133   002144 710000 2                  TRA     s:9381

     1107     9377    4         CASE (ELSE);

     1108     9378    4            TOF_ERROR_CODE.ERR# = %E$INVMME ;

   9378  2 002134   000003 236000 1                  LDQ     TOF_ERROR_CODE
         2 002135   000000 376000 3                  ANQ     0
         2 002136   001240 276007                    ORQ     672,DL
         2 002137   000003 756000 1                  STQ     TOF_ERROR_CODE

     1109     9379    4            CALL TOX$ERROR (TOF_ERROR_CODE) ;

   9379  2 002140   000001 630400 3                  EPPR0   1
         2 002141   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002142   000000 701000 xent               TSX1    TOX$ERROR
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:130  
         2 002143   000000 011000                    NOP     0

     1110     9380    4      END /* CASE */ ;

     1111     9381    3      RETURN ;

   9381  2 002144   200034 221300                    LDX1  ! @SUB_CODE,,AUTO
         2 002145   000001 702211                    TSX2  ! 1,X1

     1112     9382
     1113     9383    3   END TOF$SELECT_TND_MME ;
     1114     9384        %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:131  
     1115     9385        /*I* NAME:    TOF$RET_MME_DATA
     1116     9386             DESCRIPTION:
     1117     9387        RETURNS DATA FROM STRUCTURES MREG AND MME TO EXCEPTION STACK FRAME.
     1118     9388        AND GMAP PROGRAM.  M$TRTN AUTOMATICALLY RETURNS DATA TO STACK
     1119     9389        FRAME.  THIS ROUTINE RETURNS 6 WORDS TO THE LOCATIONS
     1120     9390        IMMEDIATELY FOLLOWING THE MME INSTRUCTION.
     1121     9391        */
     1122     9392
     1123     9393    2   TOF$RET_MME_DATA: PROC;

   9393  2 002146   200034 741300       TOF$RET_MME* STX1  ! @SUB_CODE,,AUTO

     1124     9394
     1125     9395    3      DCL MME_GMAP_DATA (0:6) UBIN (36) BASED ALIGNED;
     1126     9396
     1127     9397        /* Code */
     1128     9398
     1129     9399    3      TRTN_FPT.REGS_ = VECTOR (MREG);

   9399  2 002147   000006 235000 3                  LDA     6
         2 002150   200042 452500                    STP2    REG+1,,AUTO
         2 002151   200042 236100                    LDQ     REG+1,,AUTO
         2 002152   000012 036003                    ADLQ    10,DU
         2 002153   000024 757000 1                  STAQ    TRTN_FPT

     1130     9400    3      MME_INSTR$ -> MME_GMAP_DATA = MME;

   9400  2 002154   200022 470500                    LDP0    MME_INSTR$,,AUTO
         2 002155   000100 100500                    MLR     fill='000'O
         2 002156   200003 000034                    ADSC9   MME,,AUTO                cn=0,n=28
         2 002157   000000 000034                    ADSC9   0,,PR0                   cn=0,n=28

     1131     9401    3      RETURN;

   9401  2 002160   200034 221300                    LDX1  ! @SUB_CODE,,AUTO
         2 002161   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:132  
     1132     9402
     1133     9403    3   END TOF$RET_MME_DATA;
     1134     9404        %EJECT ;
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:133  
     1135     9405        /*I* NAME:    TOF$FIX_RET_IC
     1136     9406             DESCRIPTION:
     1137     9407        FOLLOWING MME SERVICE, USES RETURN_DELTA TO FIX UP IC TO RETURN TO.
     1138     9408        RETURN_DELTA IS NUMBER OF INSTRUCTIONS PAST MME INSTRUCTION TO
     1139     9409        RETURN TO.  IT MAY BE POSITIVE OR NEGATIVE.  RETURN IC IS
     1140     9410        CALCULATED BY ADDING RETURN DELTA TO MME INSTRUCTION IC.  RETURN
     1141     9411        IC    IS STORED IN FPT.  CALL TO M$TRTN RETURNS IT TO EXCEPTION
     1142     9412        STACK; CONTROL GOES TO RETURN IC WHEN STACK FRAME IS POPPED.
     1143     9413        */
     1144     9414
     1145     9415    2   TOF$FIX_RET_IC: PROC;

   9415  2 002162   200034 741300       TOF$FIX_RET* STX1  ! @SUB_CODE,,AUTO

     1146     9416
     1147     9417    3      TRTN_FPT.V.IC# = MME_INSTR.ADR + RETURN_DELTA;

   9417  2 002163   200023 235100                    LDA     RETURN_DELTA,,AUTO
         2 002164   000022 731000                    ARS     18
         2 002165   200042 755100                    STA     REG+1,,AUTO
         2 002166   200022 236100                    LDQ     MME_INSTR$,,AUTO
         2 002167   000022 772000                    QRL     18
         2 002170   200042 036100                    ADLQ    REG+1,,AUTO
         2 002171   000000 620006                    EAX0    0,QL
         2 002172   000032 740000 1                  STX0    TRTN_FPT+6

     1148     9418    3      RETURN;

   9418  2 002173   000001 702211                    TSX2  ! 1,X1

     1149     9419
     1150     9420    3   END TOF$FIX_RET_IC;
     1151     9421    2   END TOF$MME_HANDLER ;

   9421  2 002174   200032 221300                    LDX1  ! SUB_CODE+1,,AUTO
         2 002175   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:134  
     1152     9422    1   END TOF$FAULTS ;

   9422  2 002176   000000 702200 xent               TSX2  ! X66_AARET

TOF$BAR
 Sect OctLoc
   1     000   000000 000000   0***** ******                                    ........

TOF_ERROR_CODE
 Sect OctLoc
   1     003   241706 000000                                                    ....

TTIMER_FPT
 Sect OctLoc
   1     006   000001 777640   000012 006000   000000 777640   000004 006000    ................
   1     012   400000 000000   ****** ******                                    ........

TRTN_FPT
 Sect OctLoc
   1     014   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     020   000001 777640   000022 006000   000000 000000   000000 000000    ................

TRTN_FPT
 Sect OctLoc
   1     024   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     030   000001 777640   000032 006000   000000 000000   000000 000000    ................

(unnamed)
 Sect OctLoc
   3     000   777777 400007   000003 006000   000000 177640   000000 006014    ................
   3     004   777777 577777   000024 006000   000007 777640                    ............

PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:135  
--  Include file information  --

   TO_PERR_C.:E05TOU  is referenced.
   TOT_RQSTS_E.:E05TOU  is referenced.
   TOT_TOLTS_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure TOF$FAULTS.
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:136  

 **** Procedure blocks ****

LB#    Line#s    #stmts #vars Sect# OctLoc  P A C   NP Lvl/name
  0   115-  9422    297    83     2      0  y   y    0   1 TOF$FAULTS
  1  8486-  8518      7     3     2    104  y   y    0     2 TOF$RESET_GELBAR_TIMER
  2  8553-  8679     63    21     2    135  y   y    0     2 TOF$SBAR_INSTR
  3  8620-  8678     46     7     2    221  y   y    1      3 TOF$CALC_ADDR
  4  8688-  8760     34    17     2    523  y   y    0     2 TOF$SAVE_HISTORY_REGS
  5  8831-  9061     86     0     2    730  y   y    0     2 TOF$TEST_PAGE_FAULT
  6  8865-  8875      6     0     2    752  y   y    0      3 TOF$SAVE_GELBAR_REGS
  7  8956-  9041     62     1     2    772  y   y    0      3 TOF$UPDATE_GELBAR_SPA
  8  8985-  9040     49     2     2   1054  y   y    1       4 TOF$GET_GELBAR_FTYPE
  9  9050-  9060      9     0     2   1247  y   y    0      3 TOF$GET_GELBAR_FVECTOR
 10  9078-  9095     10     1     2   1270  y   y    0     2 TOF$GET_MME_DATA
 11  9109-  9120      4     4     2   1330  y   y    2     2 TOF$GET_EXCEPTION_CODE
 12  9240-  9421     68     4     2   1347  y   y    0     2 TOF$MME_HANDLER
 13  9286-  9300      7     2     2   1415  y   y    1      3 TOF$SERVICE_OUTSTANDING_IO
 14  9308-  9331     16     2     2   1440  y   y    1      3 TOF$SELECT_GCOS_MME
 15  9339-  9383     22     2     2   1621  y   y    1      3 TOF$SELECT_TND_MME
 16  9393-  9403      4     1     2   2146  y   y    0      3 TOF$RET_MME_DATA
 17  9415-  9420      3     0     2   2162  y   y    0      3 TOF$FIX_RET_IC
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:137  

    **** Executable statements  ****

  Exec cost Stmt Sec OctLoc Type   LB Label              Exec cost Stmt Sec OctLoc Type   LB Label

             115   2      0 Proc    0                              8446   2      2 If      0
            8447   2      4 Do      0                              8448   2      4 Call    0
            8449   2      6 Call    0                              8450   2     10 Call    0
         $  8451   2     12 Call    0                              8452   2     20 Call    0
            8453   2     22 EndDo   0                              8454   2     23 Do      0
            8455   2     23 Call    0                           $  8456   2     25 Call    0
        $$  8457   2     33 DoCase  0                              8458   2     44 Case    0
            8459   2     44 If      0                              8460   2     46 Call    0
      $$$$  8461   2     51 Call    0                              8462   2     62 Case    0
            8463   2     62 Assign  0                              8464   2     66 Call    0
            8465   2     73 Case    0                         $$$  8466   2     73 Call    0
            8467   2    103 EndCse  0                              8468   2    103 EndDo   0
            8486   2    104 Proc    1                         $$$  8510   2    105 If      1
            8512   2    123 Do      1                  $$$$$$$$$$  8513   2    123 MonCal  1
         $  8514   2    126 Assign  1                              8515   2    133 EndDo   1
            8516   2    133 Return  1                              8553   2    135 Proc    2
      $$$$  8594   2    136 Assign  2                              8595   2    151 Assign  2
         $  8596   2    153 If      2                              8597   2    160 Return  2
            8598   2    161 Do      2                              8599   2    161 Call    2
        $$  8600   2    165 Assign  2                              8601   2    176 Assign  2
            8602   2    177 Assign  2                              8603   2    201 Assign  2
            8604   2    204 Assign  2                              8605   2    206 Assign  2
        $$  8606   2    210 Assign  2                  $$$$$$$$$$  8608   2    215 MonCal  2 SBAR_TO_GELBAR
            8609   2    220 EndDo   2                              8620   2    221 Proc    3
         $  8631   2    222 If      3                              8632   2    226 Do      3
            8633   2    226 Assign  3                  $$$$$$$$$$  8634   2    231 Do Sel  3
            8635   2    355 Select  3                              8636   2    355 Assign  3
            8637   2    360 Select  3                          $$  8638   2    360 Assign  3
            8639   2    365 Select  3                          $$  8640   2    365 Assign  3
            8641   2    372 Select  3                          $$  8642   2    372 Assign  3
            8643   2    377 Select  3                          $$  8644   2    377 Assign  3
            8645   2    404 Select  3                          $$  8646   2    404 Assign  3
            8648   2    411 Select  3                          $$  8649   2    411 Assign  3
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:138  
            8650   2    416 Select  3                          $$  8651   2    416 Assign  3
            8652   2    423 Select  3                          $$  8653   2    423 Assign  3
            8654   2    430 Select  3                          $$  8655   2    430 Assign  3
            8656   2    434 Assign  3                              8657   2    437 Select  3
        $$  8658   2    437 Assign  3                              8659   2    443 Assign  3
            8660   2    446 Select  3                          $$  8661   2    446 Assign  3
            8662   2    452 Assign  3                              8663   2    455 Select  3
        $$  8664   2    455 Assign  3                              8665   2    461 Assign  3
            8666   2    464 Select  3                              8667   2    464 Assign  3
            8668   2    470 Call    3                              8669   2    474 EndSel  3
       $$$  8670   2    474 Assign  3                              8671   2    505 Return  3
            8673   2    507 Do      3                              8674   2    507 Assign  3
            8675   2    513 Call    3                              8676   2    517 EndDo   3
            8678   2    517 EndPrc  3                              8679   2    521 EndPrc  2
            8688   2    523 Proc    4                          $$  8716   2    524 If      4
            8717   2    530 Do      4                              8718   2    530 If      4
         $  8719   2    535 Assign  4                              8720   2    542 Assign  4
            8721   2    545 Assign  4                              8722   2    547 Assign  4
            8723   2    552 Assign  4                         $$$  8724   2    553 DoCase  4
            8725   2    564 Case    4                              8726   2    564 DoIndx  4
    $$$$$$  8727   2    565 Assign  4                        $$$$  8729   2    600 Assign  4
      $$$$  8731   2    610 Assign  4                           $  8733   2    620 EndInd  4
            8735   2    626 Case    4                              8736   2    626 DoIndx  4
    $$$$$$  8737   2    627 Assign  4                              8739   2    642 EndInd  4
         $  8740   2    647 If      4                              8741   2    653 Do      4
            8742   2    653 DoIndx  4                      $$$$$$  8743   2    654 Assign  4
      $$$$  8745   2    667 Assign  4                              8747   2    677 EndInd  4
            8748   2    704 EndDo   4                              8750   2    705 Case    4
            8751   2    705 DoIndx  4                      $$$$$$  8752   2    706 Assign  4
            8754   2    721 EndInd  4                              8755   2    726 EndCse  4
            8756   2    726 EndDo   4                              8758   2    726 Return  4
            8831   2    730 Proc    5                              8835   2    731 Assign  5
            8836   2    733 Call    5                              8837   2    735 Assign  5
            8838   2    737 Call    5                              8839   2    741 Call    5
    $$$$$$  8840   2    743 MonCal  5                              8841   2    745 Call    5
            8842   2    747 Unwind  5                              8865   2    752 Proc    6
            8869   2    753 Assign  6                          $$  8870   2    756 Assign  6
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:139  
            8871   2    762 Assign  6                           $  8872   2    765 Assign  6
            8873   2    771 Return  6                              8956   2    772 Proc    7
            8962   2    773 Assign  7                           $  8963   2    776 Assign  7
            8964   2   1002 If      7                              8965   2   1006 Assign  7
            8966   2   1011 Assign  7                              8967   2   1014 Assign  7
       $$$  8968   2   1016 If      7                              8969   2   1035 Assign  7
            8970   2   1040 Assign  7                              8971   2   1042 Call    7
         $  8972   2   1046 Assign  7                              8973   2   1052 Return  7
            8985   2   1054 Proc    8                         $$$  8991   2   1055 DoCase  8
            8992   2   1071 Case    8                           $  8993   2   1071 DoCase  8
            8994   2   1077 Case    8                           $  8995   2   1077 Assign  8
            8996   2   1103 Case    8                           $  8997   2   1103 Assign  8
            8998   2   1107 Case    8                              8999   2   1107 Assign  8
            9000   2   1113 Call    8                              9001   2   1117 EndCse  8
            9002   2   1120 Case    8                           $  9003   2   1120 DoCase  8
            9004   2   1127 Case    8                           $  9005   2   1127 Assign  8
            9006   2   1132 Case    8                           $  9007   2   1132 Assign  8
            9008   2   1136 Case    8                           $  9009   2   1136 Assign  8
            9010   2   1142 Case    8                              9011   2   1142 Assign  8
            9012   2   1146 Call    8                              9013   2   1152 EndCse  8
            9014   2   1153 Case    8                        $$$$  9015   2   1153 DoCase  8
            9016   2   1170 Case    8                           $  9017   2   1170 Assign  8
            9018   2   1174 Case    8                           $  9019   2   1174 Assign  8
            9020   2   1200 Case    8                           $  9021   2   1200 Assign  8
            9022   2   1204 Case    8                           $  9023   2   1204 Assign  8
            9024   2   1210 Case    8                           $  9025   2   1210 Assign  8
            9026   2   1214 Case    8                           $  9027   2   1214 Assign  8
            9028   2   1220 Case    8                              9029   2   1220 Assign  8
            9030   2   1224 Call    8                              9031   2   1230 EndCse  8
            9032   2   1231 Case    8                           $  9033   2   1231 Assign  8
            9034   2   1235 Case    8                              9035   2   1235 Assign  8
            9036   2   1241 Call    8                              9037   2   1245 EndCse  8
            9038   2   1245 Return  8                              9050   2   1247 Proc    9
            9052   2   1250 Assign  9                              9053   2   1253 If      9
            9054   2   1254 Do      9                              9055   2   1254 Assign  9
            9056   2   1260 Call    9                              9057   2   1264 EndDo   9
            9058   2   1265 Return  9                              9060   2   1266 EndPrc  9
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:140  
            9078   2   1270 Proc   10                          $$  9084   2   1271 Assign 10
            9085   2   1275 Assign 10                              9086   2   1276 If     10
        $$  9088   2   1301 Assign 10                              9089   2   1312 Assign 10
         $  9090   2   1314 Assign 10                           $  9091   2   1320 Assign 10
            9092   2   1324 Assign 10                              9093   2   1327 Return 10
            9109   2   1330 Proc   11                        $$$$  9116   2   1331 Assign 11
      $$$$  9117   2   1337 Assign 11                              9118   2   1345 Return 11
            9240   2   1347 Proc   12                              9262   2   1350 Call   12
            9263   2   1352 Call   12                              9264   2   1356 If     12
            9265   2   1361 Do     12                              9266   2   1361 Assign 12
            9267   2   1363 Assign 12                              9268   2   1366 Call   12
            9269   2   1371 EndDo  12                              9271   2   1371 If     12
         $  9272   2   1373 Call   12                              9273   2   1400 Call   12
            9274   2   1404 Call   12                              9275   2   1406 Call   12
            9276   2   1410 Call   12                              9286   2   1415 Proc   13
       $$$  9292   2   1416 If     13                              9294   2   1426 Do     13
            9295   2   1426 Assign 13                           $  9296   2   1430 Call   13
            9297   2   1436 EndDo  13                              9298   2   1436 Return 13
            9308   2   1440 Proc   14                  $$$$$$$$$$  9314   2   1441 DoCase 14
            9315   2   1527 Case   14                        $$$$  9317   2   1527 Call   14
            9318   2   1544 Case   14                        $$$$  9319   2   1544 Call   14
            9320   2   1561 Case   14                        $$$$  9321   2   1561 Call   14
            9322   2   1576 Case   14                              9323   2   1576 Assign 14
            9324   2   1602 Call   14                              9325   2   1607 Case   14
            9326   2   1607 Assign 14                              9327   2   1613 Call   14
            9328   2   1617 EndCse 14                              9329   2   1617 Return 14
            9339   2   1621 Proc   15                  $$$$$$$$$$  9345   2   1622 DoCase 15
            9346   2   2005 Case   15                        $$$$  9350   2   2005 Call   15
            9351   2   2022 Case   15                        $$$$  9352   2   2022 Call   15
            9353   2   2037 Case   15                        $$$$  9359   2   2037 Call   15
            9360   2   2054 Case   15                        $$$$  9362   2   2054 Call   15
            9363   2   2071 Case   15                        $$$$  9364   2   2071 Call   15
            9365   2   2106 Case   15                        $$$$  9366   2   2106 Call   15
            9368   2   2123 Case   15                              9375   2   2123 Assign 15
            9376   2   2127 Call   15                              9377   2   2134 Case   15
            9378   2   2134 Assign 15                              9379   2   2140 Call   15
            9380   2   2144 EndCse 15                              9381   2   2144 Return 15
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:141  
            9393   2   2146 Proc   16                              9399   2   2147 Assign 16
         $  9400   2   2154 Assign 16                              9401   2   2160 Return 16
            9415   2   2162 Proc   17                           $  9417   2   2163 Assign 17
            9418   2   2173 Return 17                              9421   2   2174 EndPrc 12
            9422   2   2176 EndPrc  0

  **** Statement type totals  ****

    95 Assign    46 Call       3 MonCal    15 If        38 Case      15 Return
     1 Unwind     1 Do Sel     1 EndSel    14 Select     4 DoIndx     8 DoCase
    11 Do         4 EndInd     8 EndCse    10 EndDo     18 Proc       5 EndPrc
     1 Labels

 # major stmts=  203 Code/major= 5.66 # stmts=  297 Code/stmt= 3.87  Point total=103.3
 Cost/major stmt=  5.5 Cost/stmt=  3.7 Total cost=   1118.0

   0-4  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
   4-6  $$$$$$$$$$$$$
   6-8  $$$$$$$$
  8-10  $$$
 10-12  $$$$$$$
 12-14
 14-16  $$
 16-18
 18-20
 20-22
 22-??  $$
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:142  

 **** Variables and constants ****

  ****  Section 001  Data  TOF$FAULTS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w UBIN        r     1 TIME_REMAINING
     2-0-0/w UBIN        r     1 TOF$GELBAR_FAULT_VECTOR

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/h STRC(45)    r     1 TOF$BAR
     0-0-0/h STRC(18)    r         2 CURRENT
     0-0-0/b UBIN(9)     r          3 BASE
     0-1-0/b UBIN(9)     r          3 SIZE
     0-2-0/h STRC(18)    r         2 FULL
     1-0-0/c BIT         r         2 GELBAR_MODE

     3-0-0/w STRC        r     1 TOF_ERROR_CODE
     3-2-1/b UBIN(14)    r         2 ERR#

    14-0-0/d STRC(288)   r     1 TRTN_FPT
    14-0-0/b BIT (72)    r         2 REGS_
    22-0-0/d STRC(72)    r         2 V
    22-0-0/b UBIN(18)    r          3 IC#

    24-0-0/d STRC(288)   r     1 TRTN_FPT
    24-0-0/b BIT (72)    r         2 REGS_
    32-0-0/d STRC(72)    r         2 V
    32-0-0/b UBIN(18)    r          3 IC#

     6-0-0/d STRC(216)   r     1 TTIMER_FPT
    12-0-0/d STRC        r         2 V


PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:143  
  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    37-0-0/w PTR         r     1 @ADDRESS                  33-0-0/w PTR         r     1 @ECC
    37-0-0/w PTR         r     1 @F_TYPE                   35-0-0/w PTR         r     1 @MME_NUMBER
    35-0-0/w PTR         r     1 @MME_NUMBER               35-0-0/w PTR         r     1 @MME_NUMBER
    34-0-0/w PTR         r     1 @SUB_CODE                 33-0-0/w UBIN(18)    r     1 ADDRESS
    *0-0-0/w UBIN(18)    r     1 ADDRESS                   24-0-0/h UBIN(18)    r     1 ECC
    *0-0-0/h UBIN(18)    r     1 ECC                       35-0-0/w UBIN(6)     r     1 F_TYPE
    *0-0-0/w UBIN(6)     r     1 F_TYPE                    25-0-0/w UBIN        r     1 GELBAR_TIME_USED
    34-0-0/w PTR         r     1 HR_BUF$                   26-0-0/h UBIN(18)    r     1 IC_IN_GELBAR
    40-0-0/w UBIN(18)    r     1 INDEX_REG                 34-0-0/w PTR         r     1 INSTR$
    33-0-0/w UBIN        r     1 J                         22-0-0/w PTR         r     1 MME_INSTR$
    27-0-0/h BIT (18)    r     1 MME_IR                    *0-0-0/h SBIN(18)    r     1 MME_NUMBER
    *0-0-0/h SBIN(18)    r     1 MME_NUMBER                *0-0-0/h SBIN(18)    r     1 MME_NUMBER
    12-0-0/d STRC(252)   r     1 MREG                      41-0-0/w UBIN        r     1 REG_
    30-0-0/w UBIN        r     1 REQUEST_TYPE              23-0-0/w SBIN(18)    r     1 RETURN_DELTA
    35-0-0/w PTR         r     1 SBAR$                     31-0-0/h UBIN(18)    r     1 SUB_CODE
    *0-0-0/h UBIN(18)    r     1 SUB_CODE

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

    34-0-0/w STRC        r     1 HR_BUF_
    34-0-0/b UBIN(18)    r         2 ADDR#
    34-2-0/b UBIN(18)    r         2 SEGID#

    34-0-0/w STRC        r     1 INSTRP
    34-0-0/b UBIN(18)    r         2 ADR
    34-2-0/b UBIN(18)    r         2 SEGID

     3-0-0/w STRC(252)   r     1 MME
     3-0-0/b STRC        r         2 INST
     3-0-0/b SBIN(18)    r          3 NO
     3-2-0/b BIT (18)    r          3 OP
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:144  

    22-0-0/w STRC        r     1 MME_INSTR
    22-0-0/b UBIN(18)    r         2 ADR
    22-2-0/b UBIN(18)    r         2 SEGID

    41-0-0/b STRC        r     1 REG
    41-0-0/b UBIN(18)    r         2 UPPER
    41-2-0/b UBIN(18)    r         2 LOWER

    35-0-0/w STRC        r     1 SBAR_PTR
    35-0-0/b UBIN(18)    r         2 ADR
    35-2-0/b UBIN(18)    r         2 SEGID


  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w PTR         r     1 TOD$SPA$
     0-0-0/w PTR         r     1 TOF$GELBAR_ADDRESS_REGS(0:7)
     0-0-0/w UBIN        r     1 TOF$GELBAR_EIS_REGS(0:7)
     0-0-0/w STRC(252)   r     1 TOF$GELBAR_REGISTERS       0-0-0/d REMB        r     1 TOF$SFR_RV

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 TOF$GELBAR_INDICATORS
     0-2-0/b STRC(18)    r         2 I
     0-3-3/b UBIN        r          3 EIS_INTERRUPT

     0-0-0/w STRC(396)   r     1 TOQ$DCP
     0-0-0/c STRC(18)    r         2 PF
     0-0-6/b BIT         r          3 DISP_MMES
     0-1-0/c UBIN(9)     r          3 REASON
    12-0-0/w SBIN        r         2 MME

PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:145  
     0-0-0/w STRC(495)   r     1 TOT$ECP
     7-0-0/w STRC(216)   r         2 SUBEXEC
     7-0-0/w UBIN        r          3 CURRENT


  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 MME_GMAP_DATA(0:6)
     0-0-0/w UBIN        r     1 MME_GMAP_DATA(0:6)

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$EXCFR
     0-2-0/b UBIN(18)    r         2 ECC
     4-0-0/b UBIN(18)    r         2 IC
     4-2-0/b BIT (18)    r         2 IR
    20-0-0/w PTR         r         2 PRS(0:7)
    50-0-0/w STRC(252)   r         2 REGS
    50-0-0/b UBIN(18)    r          3 XREG(0:7)
    54-0-0/w UBIN        r          3 A
    55-0-0/w UBIN        r          3 Q
    60-0-0/b UBIN        r         2 EIS(0:7)
   100-2-0/b UBIN(18)    r         2 SUBC
   102-0-0/b STRC        r         2 ERR

     0-0-0/w STRC(7056)  r     1 B$FLT
   100-1-5/b UBIN(4)     r         2 CPU_TYPE
   101-0-0/b STRC        r         2 FLTREG
   103-0-0/w UBIN        r         2 P#

     0-0-0/w STRC(20880) r     1 B$HR_DPSE
   104-0-0/b BIT (72)    r         2 CU_HR(0:63)
   304-0-0/b BIT (72)    r         2 OUDU_HR(0:63)
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:146  
   504-0-0/b BIT (72)    r         2 VU1_HR(0:63)

     0-0-0/w STRC(3600)  r     1 B$HR_ELS1
   104-0-0/b BIT (72)    r         2 HR(0:15)

     0-0-0/w STRC(7056)  r     1 B$HR_L66
   104-0-0/b BIT (72)    r         2 CU_HR(0:15)
   144-0-0/b BIT (72)    r         2 OU_HR(0:15)
   244-0-0/b BIT (72)    r         2 DU_HR(0:15)

     0-0-0/w STRC(144)   r     1 B$TCB
     1-0-0/w PTR         r         2 STK$

     0-0-0/w STRC(16704) r     1 HR_BUF
    16-0-0/b BIT         r         2 FLTREG(0:1)
   120-0-0/b STRC(13824) r         2 DPSE_REGS
   120-0-0/b BIT (72)    r          3 CU_HR(0:63)
   320-0-0/b BIT (72)    r          3 OUDU_HR(0:63)
   520-0-0/b BIT (72)    r          3 VU_HR(0:63)
   120-0-0/b STRC(13824) r         2 L66_REGS
   120-0-0/b BIT (72)    r          3 CU_HR(0:15)
   160-0-0/b BIT (72)    r          3 OU_HR(0:15)
   220-0-0/b BIT (72)    r          3 DU_HR(0:15)
   120-0-0/b STRC(13824) r         2 ELS1_REGS
   120-0-0/b BIT (72)    r          3 CUOU_HR(0:15)

     0-0-0/w STRC        r     1 INSTR
     0-0-0/b UBIN(18)    r         2 ADR
     0-2-0/b BIT (9)     r         2 OP_CODE
     0-3-3/b BIT (2)     r         2 TM_TAG
     0-3-5/b BIT (4)     r         2 TD_TAG

     0-0-0/w STRC        r     1 SBAR_LOCATION
     0-0-0/b UBIN(9)     r         2 BASE
     0-1-0/b UBIN(9)     r         2 SIZE

     0-0-0/w STRC(2592)  r     1 TOD$SPA
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:147  
    21-0-0/w UBIN        r         2 WD17
    22-0-0/w STRC        r         2 WD18
    22-0-0/b UBIN(18)    r          3 IC
    22-2-0/b BIT (18)    r          3 IR
    22-0-0/w UBIN        r         2 WD18_
    23-0-0/w UBIN        r         2 WD19
    26-0-0/w STRC        r         2 WD22
    26-0-0/b UBIN(18)    r          3 HREG_BUF_
    26-2-0/b UBIN(18)    r          3 HREG_BUF_SIZE
    31-0-0/w STRC        r         2 WD25
    31-2-1/b BIT         r          3 FAULT
    31-3-3/b UBIN(6)     r          3 FAULT_TYPE



   Procedure TOF$FAULTS requires 1151 words for executable code.
   Procedure TOF$FAULTS requires 38 words of local(AUTO) storage.

    No errors detected in file TOF$FAULTS.:E05TSI    .
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:148  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:149  
          MINI XREF LISTING

ADDRESS IN PROCEDURE TOF$CALC_ADDR
      8622**DCL      8620--PROC     8633<<ASSIGN   8670<<ASSIGN   8670>>ASSIGN
ADDRESS IN PROCEDURE TOF$SBAR_INSTR
      8555**DCL      8599<>CALL     8600<<ASSIGN   8600>>ASSIGN   8601>>ASSIGN
B$EXCFR.ASL
      7967**DCL      7967--REDEF
B$EXCFR.ECC
      7967**DCL      9116>>ASSIGN
B$EXCFR.EIS
      7979**DCL      8872>>ASSIGN
B$EXCFR.ERR
      7981**DCL      8461<>CALL     8466<>CALL
B$EXCFR.ERR.ERR#
      7981**DCL      7981--REDEF
B$EXCFR.EVID
      7980**DCL      7980--REDEF    7981--REDEF
B$EXCFR.IC
      7968**DCL      8594>>ASSIGN   8606>>ASSIGN   9084>>ASSIGN   9085>>ASSIGN
B$EXCFR.IR
      7968**DCL      7968--REDEF    8870>>ASSIGN   9092>>ASSIGN
B$EXCFR.PREVSZ
      7967**DCL      7967--REDEF
B$EXCFR.PRS
      7978**DCL      8871>>ASSIGN
B$EXCFR.REGS
      7978**DCL      9091>>ASSIGN
B$EXCFR.REGS.A
      7978**DCL      8655>>ASSIGN   8658>>ASSIGN
B$EXCFR.REGS.Q
      7978**DCL      8661>>ASSIGN   8664>>ASSIGN
B$EXCFR.REGS.XREG
      7978**DCL      8638>>ASSIGN   8640>>ASSIGN   8642>>ASSIGN   8644>>ASSIGN   8646>>ASSIGN   8649>>ASSIGN
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:150  
      8651>>ASSIGN   8653>>ASSIGN
B$EXCFR.SUBC
      7979**DCL      7979--REDEF    7980--REDEF    7980--REDEF    9117>>ASSIGN
B$FLT.CPU_TYPE
      7990**DCL      8724>>DOCASE
B$FLT.ERR.ERR#
      7994**DCL      7995--REDEF
B$FLT.FLTREG
      7990**DCL      8722>>ASSIGN
B$FLT.P#
      7999**DCL      8716>>IF
B$HR_DPSE.CU_HR
      8037**DCL      8737>>ASSIGN
B$HR_DPSE.OUDU_HR
      8037**DCL      8743>>ASSIGN
B$HR_DPSE.VU1_HR
      8037**DCL      8745>>ASSIGN
B$HR_ELS1.HR
      8041**DCL      8752>>ASSIGN
B$HR_L66.CU_HR
      8044**DCL      8727>>ASSIGN
B$HR_L66.DU_HR
      8044**DCL      8731>>ASSIGN
B$HR_L66.OU_HR
      8044**DCL      8729>>ASSIGN
B$TCB.STK$
      8048**DCL      8461>>CALL     8466>>CALL     8594>>ASSIGN   8606>>ASSIGN   8638>>ASSIGN   8640>>ASSIGN
      8642>>ASSIGN   8644>>ASSIGN   8646>>ASSIGN   8649>>ASSIGN   8651>>ASSIGN   8653>>ASSIGN   8655>>ASSIGN
      8658>>ASSIGN   8661>>ASSIGN   8664>>ASSIGN   8716>>IF       8722>>ASSIGN   8724>>DOCASE   8727>>ASSIGN
      8729>>ASSIGN   8731>>ASSIGN   8737>>ASSIGN   8743>>ASSIGN   8745>>ASSIGN   8752>>ASSIGN   8870>>ASSIGN
      8871>>ASSIGN   8872>>ASSIGN   9084>>ASSIGN   9085>>ASSIGN   9091>>ASSIGN   9092>>ASSIGN   9116>>ASSIGN
      9117>>ASSIGN
B$TCB$
      8114**DCL      8048--IMP-PTR  8461>>CALL     8466>>CALL     8594>>ASSIGN   8606>>ASSIGN   8638>>ASSIGN
      8640>>ASSIGN   8642>>ASSIGN   8644>>ASSIGN   8646>>ASSIGN   8649>>ASSIGN   8651>>ASSIGN   8653>>ASSIGN
      8655>>ASSIGN   8658>>ASSIGN   8661>>ASSIGN   8664>>ASSIGN   8716>>IF       8722>>ASSIGN   8724>>DOCASE
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:151  
      8727>>ASSIGN   8729>>ASSIGN   8731>>ASSIGN   8737>>ASSIGN   8743>>ASSIGN   8745>>ASSIGN   8752>>ASSIGN
      8870>>ASSIGN   8871>>ASSIGN   8872>>ASSIGN   9084>>ASSIGN   9085>>ASSIGN   9091>>ASSIGN   9092>>ASSIGN
      9116>>ASSIGN   9117>>ASSIGN
ECC
      8359**DCL      8451<>CALL     8456<>CALL     8457>>DOCASE   8991>>DOCASE
ECC IN PROCEDURE TOF$GET_EXCEPTION_CODE
      9111**DCL      9109--PROC     9116<<ASSIGN
F_TYPE IN PROCEDURE TOF$GET_GELBAR_FTYPE
      8987**DCL      8985--PROC     8995<<ASSIGN   8997<<ASSIGN   9005<<ASSIGN   9007<<ASSIGN   9009<<ASSIGN
      9017<<ASSIGN   9019<<ASSIGN   9021<<ASSIGN   9023<<ASSIGN   9025<<ASSIGN   9027<<ASSIGN   9033<<ASSIGN
F_TYPE IN PROCEDURE TOF$UPDATE_GELBAR_SPA
      8958**DCL      8971<>CALL     8972>>ASSIGN
GELBAR_TIME_USED
      8360**DCL      8514<<ASSIGN   8962<<ASSIGN   8962>>ASSIGN   8963>>ASSIGN
HR_BUF.DPSE_REGS IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8701**DCL      8705--REDEF    8710--REDEF
HR_BUF.DPSE_REGS.CU_HR IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8702**DCL      8737<<ASSIGN
HR_BUF.DPSE_REGS.OUDU_HR IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8703**DCL      8743<<ASSIGN
HR_BUF.DPSE_REGS.VU_HR IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8704**DCL      8745<<ASSIGN
HR_BUF.ELS1_REGS.CUOU_HR IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8711**DCL      8752<<ASSIGN
HR_BUF.FLTREG IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8699**DCL      8722<<ASSIGN   8723<<ASSIGN
HR_BUF.L66_REGS.CU_HR IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8706**DCL      8727<<ASSIGN
HR_BUF.L66_REGS.DU_HR IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8708**DCL      8731<<ASSIGN
HR_BUF.L66_REGS.OU_HR IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8707**DCL      8729<<ASSIGN
HR_BUF$ IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8691**DCL      8692--REDEF    8695--IMP-PTR  8722>>ASSIGN   8723>>ASSIGN   8727>>ASSIGN   8729>>ASSIGN
      8731>>ASSIGN   8737>>ASSIGN   8743>>ASSIGN   8745>>ASSIGN   8752>>ASSIGN
HR_BUF_.ADDR# IN PROCEDURE TOF$SAVE_HISTORY_REGS
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:152  
      8693**DCL      8719<<ASSIGN   8720<<ASSIGN
HR_BUF_.SEGID# IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8694**DCL      8721<<ASSIGN
IC_IN_GELBAR
      8361**DCL      8965>>ASSIGN   8966>>ASSIGN   9084<<ASSIGN
INDEX_REG IN PROCEDURE TOF$CALC_ADDR
      8623**DCL      8636<<ASSIGN   8638<<ASSIGN   8640<<ASSIGN   8642<<ASSIGN   8644<<ASSIGN   8646<<ASSIGN
      8649<<ASSIGN   8651<<ASSIGN   8653<<ASSIGN   8656<<ASSIGN   8659<<ASSIGN   8662<<ASSIGN   8665<<ASSIGN
      8670>>ASSIGN
INSTR.ADR IN PROCEDURE TOF$SBAR_INSTR
      8561**DCL      8633>>ASSIGN
INSTR.OP_CODE IN PROCEDURE TOF$SBAR_INSTR
      8562**DCL      8596>>IF
INSTR.TD_TAG IN PROCEDURE TOF$SBAR_INSTR
      8565**DCL      8634>>DOSELCT
INSTR.TM_TAG IN PROCEDURE TOF$SBAR_INSTR
      8564**DCL      8631>>IF
INSTR$ IN PROCEDURE TOF$SBAR_INSTR
      8556**DCL      8557--REDEF    8560--IMP-PTR  8596>>IF       8631>>IF       8633>>ASSIGN   8634>>DOSELCT
INSTRP.ADR IN PROCEDURE TOF$SBAR_INSTR
      8558**DCL      8594<<ASSIGN
INSTRP.SEGID IN PROCEDURE TOF$SBAR_INSTR
      8559**DCL      8595<<ASSIGN
J IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8690**DCL      8726<<DOINDEX  8727>>ASSIGN   8727>>ASSIGN   8729>>ASSIGN   8729>>ASSIGN   8731>>ASSIGN
      8731>>ASSIGN   8736<<DOINDEX  8737>>ASSIGN   8737>>ASSIGN   8742<<DOINDEX  8743>>ASSIGN   8743>>ASSIGN
      8745>>ASSIGN   8745>>ASSIGN   8751<<DOINDEX  8752>>ASSIGN   8752>>ASSIGN
M$CLRSTK
      5664**DCL-ENT  8840--CALL
M$TRTN
      5664**DCL-ENT  8608--CALL
M$TTIMER
      5660**DCL-ENT  8513--CALL
MME
      8264**DCL      9090<<ASSIGN   9317<>CALL     9319<>CALL     9321<>CALL     9350<>CALL     9352<>CALL
      9359<>CALL     9362<>CALL     9364<>CALL     9366<>CALL     9400>>ASSIGN
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:153  
MME.INST.NO
      8267**DCL      8968>>IF       9263<>CALL     9267>>ASSIGN   9271>>IF       9272<>CALL     9273<>CALL
MME.INST.OP
      8268**DCL      8968>>IF
MME.INSTR
      8265**DCL      8266--REDEF
MME_GMAP_DATA IN PROCEDURE TOF$GET_MME_DATA
      9080**DCL      9090>>ASSIGN
MME_GMAP_DATA IN PROCEDURE TOF$RET_MME_DATA
      9395**DCL      9400<<ASSIGN
MME_INSTR.ADR
      8354**DCL      9085<<ASSIGN   9088<<ASSIGN   9088>>ASSIGN   9417>>ASSIGN
MME_INSTR.SEGID
      8355**DCL      9089<<ASSIGN
MME_INSTR$
      8351**DCL      8353--REDEF    9090>>ASSIGN   9317<>CALL     9319<>CALL     9321<>CALL     9350<>CALL
      9352<>CALL     9359<>CALL     9362<>CALL     9364<>CALL     9366<>CALL     9400>>ASSIGN
MME_IR
      8362**DCL      8967>>ASSIGN   9092<<ASSIGN
MME_NUMBER IN PROCEDURE TOF$SELECT_GCOS_MME
      9310**DCL      9308--PROC     9314>>DOCASE
MME_NUMBER IN PROCEDURE TOF$SELECT_TND_MME
      9341**DCL      9339--PROC     9345>>DOCASE
MME_NUMBER IN PROCEDURE TOF$SERVICE_OUTSTANDING_IO
      9288**DCL      9286--PROC     9292>>IF
MREG
      8285**DCL      8869>>ASSIGN   9091<<ASSIGN   9317<>CALL     9319<>CALL     9321<>CALL     9350<>CALL
      9352<>CALL     9359<>CALL     9362<>CALL     9364<>CALL     9366<>CALL     9399--ASSIGN
REG IN PROCEDURE TOF$CALC_ADDR
      8624**DCL      8627--REDEF
REG.LOWER IN PROCEDURE TOF$CALC_ADDR
      8626**DCL      8659>>ASSIGN   8665>>ASSIGN
REG.UPPER IN PROCEDURE TOF$CALC_ADDR
      8625**DCL      8656>>ASSIGN   8662>>ASSIGN
REG_ IN PROCEDURE TOF$CALC_ADDR
      8627**DCL      8655<<ASSIGN   8658<<ASSIGN   8661<<ASSIGN   8664<<ASSIGN
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:154  
REQUEST_TYPE
      8363**DCL      9295<<ASSIGN   9296<>CALL
RETURN_DELTA
      8357**DCL      9317<>CALL     9319<>CALL     9321<>CALL     9350<>CALL     9352<>CALL     9359<>CALL
      9362<>CALL     9364<>CALL     9366<>CALL     9417>>ASSIGN
SBAR$ IN PROCEDURE TOF$SBAR_INSTR
      8570**DCL      8571--REDEF    8603>>ASSIGN   8604>>ASSIGN
SBAR_LOCATION.BASE IN PROCEDURE TOF$SBAR_INSTR
      8567**DCL      8603<<ASSIGN
SBAR_LOCATION.SIZE IN PROCEDURE TOF$SBAR_INSTR
      8568**DCL      8604<<ASSIGN
SBAR_PTR.ADR IN PROCEDURE TOF$SBAR_INSTR
      8572**DCL      8601<<ASSIGN
SBAR_PTR.SEGID IN PROCEDURE TOF$SBAR_INSTR
      8573**DCL      8602<<ASSIGN
SUB_CODE
      8364**DCL      8451<>CALL     8456<>CALL     8459>>IF       8993>>DOCASE   9003>>DOCASE   9015>>DOCASE
SUB_CODE IN PROCEDURE TOF$GET_EXCEPTION_CODE
      9112**DCL      9109--PROC     9117<<ASSIGN
TIME_REMAINING IN PROCEDURE TOF$RESET_GELBAR_TIMER
      8488**DCL      8503--DCLINIT  8514>>ASSIGN
TOC$COLTS
      8100**DCL-ENT  9321--CALL     9366--CALL
TOD$DISPATCHER
      8101**DCL-ENT  9296--CALL
TOD$SPA.WD11
      8309**DCL      8312--REDEF
TOD$SPA.WD17
      8318**DCL      8963<<ASSIGN   8963>>ASSIGN
TOD$SPA.WD18
      8319**DCL      8322--REDEF
TOD$SPA.WD18.IC
      8320**DCL      8965<<ASSIGN   8966<<ASSIGN
TOD$SPA.WD18.IR
      8321**DCL      8967<<ASSIGN
TOD$SPA.WD18_
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:155  
      8322**DCL      8514>>ASSIGN
TOD$SPA.WD19
      8323**DCL      9052>>ASSIGN
TOD$SPA.WD22.HREG_BUF_
      8327**DCL      8328--REDEF    8719>>ASSIGN   8720>>ASSIGN
TOD$SPA.WD22.HREG_BUF_SIZE
      8331**DCL      8740>>IF
TOD$SPA.WD25.FAULT
      8339**DCL      8969<<ASSIGN   8970<<ASSIGN
TOD$SPA.WD25.FAULT_TYPE
      8347**DCL      8972<<ASSIGN
TOD$SPA$
      8115**DCL      8307--IMP-PTR  8514>>ASSIGN   8719>>ASSIGN   8720>>ASSIGN   8740>>IF       8963>>ASSIGN
      8963>>ASSIGN   8965>>ASSIGN   8966>>ASSIGN   8967>>ASSIGN   8969>>ASSIGN   8970>>ASSIGN   8972>>ASSIGN
      9052>>ASSIGN
TOF$BAR.CURRENT
      8126**DCL      8837<<ASSIGN
TOF$BAR.CURRENT.BASE
      8127**DCL      8594>>ASSIGN   8600>>ASSIGN   8603>>ASSIGN   9086>>IF       9088>>ASSIGN
TOF$BAR.CURRENT.SIZE
      8129**DCL      8604>>ASSIGN
TOF$BAR.FULL
      8131**DCL      8837>>ASSIGN
TOF$BAR.GELBAR_MODE
      8136**DCL      8446>>IF       8835<<ASSIGN
TOF$CALC_ADDR IN PROCEDURE TOF$SBAR_INSTR
      8620**PROC     8599--CALL
TOF$FIX_RET_IC IN PROCEDURE TOF$MME_HANDLER
      9415**PROC     9275--CALL
TOF$GELBAR_ADDRESS_REGS
      8139**DCL      8871<<ASSIGN
TOF$GELBAR_EIS_REGS
      8140**DCL      8872<<ASSIGN
TOF$GELBAR_FAULT_VECTOR
      8147**DCL      9052<<ASSIGN   9053>>IF
TOF$GELBAR_INDICATORS.I
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:156  
      8143**DCL      8870<<ASSIGN
TOF$GELBAR_INDICATORS.I.EIS_INTERRUPT
      8145**DCL      8964>>IF
TOF$GELBAR_REGISTERS
      8158**DCL      8869<<ASSIGN
TOF$GELBAR_REGISTERS.INSTR
      8159**DCL      8160--REDEF
TOF$GET_EXCEPTION_CODE
      9109**PROC     8451--CALL     8456--CALL
TOF$GET_GELBAR_FTYPE IN PROCEDURE TOF$UPDATE_GELBAR_SPA
      8985**PROC     8971--CALL
TOF$GET_GELBAR_FVECTOR IN PROCEDURE TOF$TEST_PAGE_FAULT
      9050**PROC     8841--CALL
TOF$GET_MME_DATA
      9078**PROC     8836--CALL     9262--CALL
TOF$MME_HANDLER
      9240**PROC     8460--CALL
TOF$RESET_GELBAR_TIMER
      8486**PROC     8448--CALL
TOF$RET_MME_DATA IN PROCEDURE TOF$MME_HANDLER
      9393**PROC     9274--CALL
TOF$SAVE_GELBAR_REGS IN PROCEDURE TOF$TEST_PAGE_FAULT
      8865**PROC     8838--CALL
TOF$SAVE_HISTORY_REGS
      8688**PROC     8450--CALL
TOF$SBAR_INSTR
      8553**PROC     8449--CALL     8455--CALL
TOF$SELECT_GCOS_MME IN PROCEDURE TOF$MME_HANDLER
      9308**PROC     9272--CALL
TOF$SELECT_TND_MME IN PROCEDURE TOF$MME_HANDLER
      9339**PROC     9273--CALL
TOF$SERVICE_OUTSTANDING_IO IN PROCEDURE TOF$MME_HANDLER
      9286**PROC     9263--CALL
TOF$SFR_RV
      8170**DCL      8842>>UNWIND
TOF$TEST_PAGE_FAULT
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:157  
      8831**PROC     8452--CALL
TOF$UPDATE_GELBAR_SPA IN PROCEDURE TOF$TEST_PAGE_FAULT
      8956**PROC     8839--CALL
TOF_ERROR_CODE
      8380**DCL      8464<>CALL     8668<>CALL     8675<>CALL     9000<>CALL     9012<>CALL     9030<>CALL
      9036<>CALL     9056<>CALL     9324<>CALL     9327<>CALL     9376<>CALL     9379<>CALL
TOF_ERROR_CODE.ERR#
      8410**DCL      8463<<ASSIGN   8667<<ASSIGN   8674<<ASSIGN   8999<<ASSIGN   9011<<ASSIGN   9029<<ASSIGN
      9035<<ASSIGN   9055<<ASSIGN   9323<<ASSIGN   9326<<ASSIGN   9375<<ASSIGN   9378<<ASSIGN
TOF_TRTN
      8110**DCL-ENT  9276--CALL
TOG$GCOS_MMES
      8102**DCL-ENT  9319--CALL     9352--CALL
TOM$MOLTS
      8103**DCL-ENT  9364--CALL
TOO$TOLTS_MMES
      8104**DCL-ENT  9317--CALL     9350--CALL
TOP$POLTS
      8105**DCL-ENT  9359--CALL
TOQ$DCP.MME
      8201**DCL      9267<<ASSIGN
TOQ$DCP.PF.DISP_MMES
      8188**DCL      9264>>IF
TOQ$DCP.PF.REASON
      8189**DCL      9266<<ASSIGN
TOQ$DEBUG
      8106**DCL-ENT  9268--CALL
TOS$SOLTS
      8107**DCL-ENT  9362--CALL
TOT$ECP.SUBEXEC.CURRENT
      8233**DCL      8510>>IF       8510>>IF       8718>>IF       8718>>IF
TOT$ECP.TEST_REQ
      8213**DCL      8215--REDEF
TOX$ERROR
      8108**DCL-ENT  8464--CALL     8668--CALL     8675--CALL     9000--CALL     9012--CALL     9030--CALL
      9036--CALL     9324--CALL     9327--CALL     9376--CALL     9379--CALL
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:158  
TOX$SCREECH
      8109**DCL-ENT  8461--CALL     8466--CALL     9056--CALL
TRTN_FPT IN PROCEDURE TOF$MME_HANDLER
      9253**DCL      9276<>CALL
TRTN_FPT.REGS_ IN PROCEDURE TOF$MME_HANDLER
      9253**DCL      9399<<ASSIGN
TRTN_FPT.V IN PROCEDURE TOF$MME_HANDLER
      9254**DCL      9254--DCLINIT
TRTN_FPT.V.IC# IN PROCEDURE TOF$MME_HANDLER
      9254**DCL      9417<<ASSIGN
TRTN_FPT.V.IR# IN PROCEDURE TOF$MME_HANDLER
      9254**DCL      9255--REDEF
TRTN_FPT IN PROCEDURE TOF$SBAR_INSTR
      8585**DCL      8608<>CALL
TRTN_FPT.REGS_ IN PROCEDURE TOF$SBAR_INSTR
      8585**DCL      8605<<ASSIGN
TRTN_FPT.V IN PROCEDURE TOF$SBAR_INSTR
      8586**DCL      8586--DCLINIT
TRTN_FPT.V.IC# IN PROCEDURE TOF$SBAR_INSTR
      8586**DCL      8606<<ASSIGN
TRTN_FPT.V.IR# IN PROCEDURE TOF$SBAR_INSTR
      8586**DCL      8587--REDEF
TTIMER_FPT IN PROCEDURE TOF$RESET_GELBAR_TIMER
      8503**DCL      8513<>CALL
TTIMER_FPT.V IN PROCEDURE TOF$RESET_GELBAR_TIMER
      8504**DCL      8503--DCLINIT
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:159  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:160  
              FULL UREF LISTING

B$EXCFR
      7967**DCL
B$EXCFR.ALTEMPTY
      7967**DCL
B$EXCFR.ASLIC
      7967**DCL
B$EXCFR.ASR
      7973**DCL
B$EXCFR.ASR.BASE
      7974**DCL
B$EXCFR.ASR.BOUND
      7973**DCL
B$EXCFR.ASR.FLAGS
      7973**DCL
B$EXCFR.ASR.FLAGS.BOUND
      7974**DCL
B$EXCFR.ASR.FLAGS.CACHE
      7974**DCL
B$EXCFR.ASR.FLAGS.EXU
      7974**DCL
B$EXCFR.ASR.FLAGS.MON
      7974**DCL
B$EXCFR.ASR.FLAGS.PRIV
      7974**DCL
B$EXCFR.ASR.FLAGS.READ
      7973**DCL
B$EXCFR.ASR.FLAGS.SAVE
      7973**DCL
B$EXCFR.ASR.FLAGS.SEGMENT
      7974**DCL
B$EXCFR.ASR.FLAGS.WRITE
      7973**DCL
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:161  
B$EXCFR.ASR.TYPE
      7974**DCL
B$EXCFR.ASR.WSR
      7974**DCL
B$EXCFR.BRKCNT
      7981**DCL
B$EXCFR.CODE
      7980**DCL
B$EXCFR.CP#
      7970**DCL
B$EXCFR.DCB#
      7980**DCL
B$EXCFR.DRS
      7978**DCL
B$EXCFR.DSAR
      7971**DCL
B$EXCFR.ERR.CODE
      7981**DCL
B$EXCFR.ERR.FCG
      7981**DCL
B$EXCFR.ERR.MID
      7981**DCL
B$EXCFR.ERR.MON
      7981**DCL
B$EXCFR.ERR.SEV
      7982**DCL
B$EXCFR.EVSC
      7979**DCL
B$EXCFR.EWSQ#
      7971**DCL
B$EXCFR.FCODE
      7970**DCL
B$EXCFR.FI
      7970**DCL
B$EXCFR.FPT
      7980**DCL
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:162  
B$EXCFR.FPT.FCG
      7980**DCL
B$EXCFR.FPT.PMME
      7980**DCL
B$EXCFR.INST
      7968**DCL
B$EXCFR.INST.EVEN
      7968**DCL
B$EXCFR.INST.ODD
      7968**DCL
B$EXCFR.IRBIT
      7968**DCL
B$EXCFR.IRBIT.CARRY
      7969**DCL
B$EXCFR.IRBIT.EXOF
      7969**DCL
B$EXCFR.IRBIT.EXUF
      7969**DCL
B$EXCFR.IRBIT.EXUFM
      7970**DCL
B$EXCFR.IRBIT.HEX
      7970**DCL
B$EXCFR.IRBIT.MIR
      7969**DCL
B$EXCFR.IRBIT.MM
      7969**DCL
B$EXCFR.IRBIT.NEG
      7968**DCL
B$EXCFR.IRBIT.OF
      7969**DCL
B$EXCFR.IRBIT.OFM
      7969**DCL
B$EXCFR.IRBIT.PE
      7969**DCL
B$EXCFR.IRBIT.PM
      7969**DCL
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:163  
B$EXCFR.IRBIT.TR
      7969**DCL
B$EXCFR.IRBIT.TRC
      7969**DCL
B$EXCFR.IRBIT.ZERO
      7968**DCL
B$EXCFR.ISR
      7971**DCL
B$EXCFR.ISR.BASE
      7973**DCL
B$EXCFR.ISR.BOUND
      7971**DCL
B$EXCFR.ISR.FLAGS
      7971**DCL
B$EXCFR.ISR.FLAGS.BOUND
      7972**DCL
B$EXCFR.ISR.FLAGS.CACHE
      7972**DCL
B$EXCFR.ISR.FLAGS.EXU
      7972**DCL
B$EXCFR.ISR.FLAGS.MON
      7972**DCL
B$EXCFR.ISR.FLAGS.PRIV
      7972**DCL
B$EXCFR.ISR.FLAGS.READ
      7972**DCL
B$EXCFR.ISR.FLAGS.SAVE
      7972**DCL
B$EXCFR.ISR.FLAGS.SEGMENT
      7972**DCL
B$EXCFR.ISR.FLAGS.WRITE
      7972**DCL
B$EXCFR.ISR.TYPE
      7973**DCL
B$EXCFR.ISR.WSR
      7973**DCL
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:164  
B$EXCFR.IS_SEGID
      7971**DCL
B$EXCFR.LSR
      7975**DCL
B$EXCFR.LSR.BASE
      7976**DCL
B$EXCFR.LSR.BOUND
      7975**DCL
B$EXCFR.LSR.FLAGS
      7975**DCL
B$EXCFR.LSR.FLAGS.BOUND
      7976**DCL
B$EXCFR.LSR.FLAGS.CACHE
      7975**DCL
B$EXCFR.LSR.FLAGS.EXU
      7975**DCL
B$EXCFR.LSR.FLAGS.MON
      7975**DCL
B$EXCFR.LSR.FLAGS.PRIV
      7975**DCL
B$EXCFR.LSR.FLAGS.READ
      7975**DCL
B$EXCFR.LSR.FLAGS.SAVE
      7975**DCL
B$EXCFR.LSR.FLAGS.SEGMENT
      7976**DCL
B$EXCFR.LSR.FLAGS.WRITE
      7975**DCL
B$EXCFR.LSR.TYPE
      7976**DCL
B$EXCFR.LSR.WSR
      7976**DCL
B$EXCFR.P#
      7982**DCL
B$EXCFR.PSR
      7976**DCL
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:165  
B$EXCFR.PSR.BASE
      7978**DCL
B$EXCFR.PSR.BOUND
      7976**DCL
B$EXCFR.PSR.FLAGS
      7976**DCL
B$EXCFR.PSR.FLAGS.BOUND
      7977**DCL
B$EXCFR.PSR.FLAGS.CACHE
      7977**DCL
B$EXCFR.PSR.FLAGS.EXU
      7977**DCL
B$EXCFR.PSR.FLAGS.MON
      7977**DCL
B$EXCFR.PSR.FLAGS.PRIV
      7977**DCL
B$EXCFR.PSR.FLAGS.READ
      7976**DCL
B$EXCFR.PSR.FLAGS.SAVE
      7977**DCL
B$EXCFR.PSR.FLAGS.SEGMENT
      7977**DCL
B$EXCFR.PSR.FLAGS.WRITE
      7977**DCL
B$EXCFR.PSR.TYPE
      7978**DCL
B$EXCFR.PSR.WSR
      7977**DCL
B$EXCFR.REGS.E
      7979**DCL
B$EXCFR.RVA
      7971**DCL
B$EXCFR.SCR
      7971**DCL
B$EXCFR.SSF
      7970**DCL
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:166  
B$EXCFR.U1
      7979**DCL
B$FLT
      7985**DCL
B$FLT.BRANCH_MODE
      7990**DCL
B$FLT.CU_HR
      7999**DCL
B$FLT.DU_HR
      7999**DCL
B$FLT.ERR
      7994**DCL
B$FLT.ERR.CODE
      7995**DCL
B$FLT.ERR.FCG
      7994**DCL
B$FLT.ERR.MID
      7994**DCL
B$FLT.ERR.MON
      7994**DCL
B$FLT.ERR.SEV
      7995**DCL
B$FLT.FLTREG.CMD_SLAVE
      7991**DCL
B$FLT.FLTREG.CON_PORT_A
      7992**DCL
B$FLT.FLTREG.CON_PORT_B
      7992**DCL
B$FLT.FLTREG.CON_PORT_C
      7992**DCL
B$FLT.FLTREG.CON_PORT_D
      7992**DCL
B$FLT.FLTREG.CSH_DIR_PRTY
      7993**DCL
B$FLT.FLTREG.CSH_IA_STORE
      7994**DCL
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:167  
B$FLT.FLTREG.CSH_PRTY_BLK_LD
      7994**DCL
B$FLT.FLTREG.CSH_STORE_PRTY
      7993**DCL
B$FLT.FLTREG.IA_PORT_A
      7993**DCL
B$FLT.FLTREG.IA_PORT_B
      7993**DCL
B$FLT.FLTREG.IA_PORT_C
      7993**DCL
B$FLT.FLTREG.IA_PORT_D
      7993**DCL
B$FLT.FLTREG.IPR_ADDR
      7990**DCL
B$FLT.FLTREG.IPR_EIS
      7991**DCL
B$FLT.FLTREG.IPR_OPC
      7990**DCL
B$FLT.FLTREG.IPR_OTHER
      7991**DCL
B$FLT.FLTREG.ONC_PROC_ERR_1
      7992**DCL
B$FLT.FLTREG.ONC_PROC_ERR_2
      7992**DCL
B$FLT.FLTREG.PRTY_LOWER
      7991**DCL
B$FLT.FLTREG.PRTY_UPPER
      7991**DCL
B$FLT.FLTREG.STR_BND
      7991**DCL
B$FLT.FLTREG.STR_NEA
      7991**DCL
B$FLT.OU_HR
      7999**DCL
B$FLT.PORT#
      7990**DCL
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:168  
B$FLT.SSFRAME
      7987**DCL
B$FLT.SSFRAME.ECC
      7987**DCL
B$FLT.SSFRAME.FCODE
      7987**DCL
B$FLT.SSFRAME.YES
      7987**DCL
B$FLT.SUBC
      7990**DCL
B$FLT.VU_HR
      7999**DCL
B$HR_DPSE
      8037**DCL
B$HR_DPSE.FLTFRAME
      8037**DCL
B$HR_DPSE.VU2_HR
      8037**DCL
B$HR_ELS1
      8041**DCL
B$HR_ELS1.FLTFRAME
      8041**DCL
B$HR_L66
      8044**DCL
B$HR_L66.FLTFRAME
      8044**DCL
B$HR_L66.VU_HR
      8044**DCL
B$TCB
      8048**DCL
B$TCB.ALT$
      8048**DCL
B$TCB.CURRSZ
      8048**DCL
B$TCB.TCBAVSZ
      8048**DCL
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:169  
HR_BUF IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8695**DCL
HR_BUF.ELS1_REGS IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8710**DCL
HR_BUF.ELS1_REGS.WD112 IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8712**DCL
HR_BUF.L66_REGS IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8705**DCL
HR_BUF.L66_REGS.WD176 IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8709**DCL
HR_BUF.MODEREG IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8697**DCL
HR_BUF.WD0 IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8696**DCL
HR_BUF.WD16 IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8700**DCL
HR_BUF.WD9 IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8698**DCL
HR_BUF_ IN PROCEDURE TOF$SAVE_HISTORY_REGS
      8692**DCL
INSTR IN PROCEDURE TOF$SBAR_INSTR
      8560**DCL
INSTRP IN PROCEDURE TOF$SBAR_INSTR
      8557**DCL
M$ACCT
      5623**DCL-ENT
M$ACTIVATE
      5626**DCL-ENT
M$ALIB
      5619**DCL-ENT
M$ASUSER
      5621**DCL-ENT
M$ATTACH
      5628**DCL-ENT
M$BADPP
      5646**DCL-ENT
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:170  
M$CGCTL
      5627**DCL-ENT
M$CGINFO
      5627**DCL-ENT
M$CHECK
      5608**DCL-ENT
M$CHGUNIT
      5666**DCL-ENT
M$CLOSE
      5606**DCL-ENT
M$CMDVAR
      5675**DCL-ENT
M$CONFIG
      5636**DCL-ENT
M$CORRES
      5611**DCL-ENT
M$CPEXIT
      5620**DCL-ENT
M$CVM
      5644**DCL-ENT
M$CVOL
      5609**DCL-ENT
M$DCLFLD
      5636**DCL-ENT
M$DEACTIVATE
      5626**DCL-ENT
M$DELREC
      5608**DCL-ENT
M$DEQ
      5673**DCL-ENT
M$DETACH
      5628**DCL-ENT
M$DEVICE
      5610**DCL-ENT
M$DISPLAY
      5673**DCL-ENT
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:171  
M$DISPRES
      5613**DCL-ENT
M$DLIB
      5619**DCL-ENT
M$DRIBBLE
      5636**DCL-ENT
M$DRTN
      5664**DCL-ENT
M$DSUSER
      5621**DCL-ENT
M$ENQ
      5672**DCL-ENT
M$EOM
      5631**DCL-ENT
M$ERASE
      5637**DCL-ENT
M$ERR
      5618**DCL-ENT
M$ERRMSG
      5669**DCL-ENT
M$EVENT
      5661**DCL-ENT
M$EXHUME
      5670**DCL-ENT
M$EXIT
      5618**DCL-ENT
M$EXTEND
      5610**DCL-ENT
M$FDP
      5642**DCL-ENT
M$FDS
      5641**DCL-ENT
M$FEBOOT
      5634**DCL-ENT
M$FECTL
      5635**DCL-ENT
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:172  
M$FEDUMP
      5634**DCL-ENT
M$FID
      5669**DCL-ENT
M$FINDPROC
      5623**DCL-ENT
M$FSUSER
      5621**DCL-ENT
M$FVP
      5643**DCL-ENT
M$FWCG
      5627**DCL-ENT
M$GBPL
      5647**DCL-ENT
M$GDDL
      5643**DCL-ENT
M$GDP
      5642**DCL-ENT
M$GDS
      5641**DCL-ENT
M$GETDCB
      5612**DCL-ENT
M$GETMOUSE
      5652**DCL-ENT
M$GETPM
      5653**DCL-ENT
M$GJOB
      5671**DCL-ENT
M$GLINEATTR
      5631**DCL-ENT
M$GOODPP
      5646**DCL-ENT
M$GPLATEN
      5639**DCL-ENT
M$GPROMPT
      5638**DCL-ENT
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:173  
M$GTRMATTR
      5632**DCL-ENT
M$GTRMCTL
      5630**DCL-ENT
M$GTRMTAB
      5633**DCL-ENT
M$GVP
      5642**DCL-ENT
M$HELP
      5669**DCL-ENT
M$INT
      5661**DCL-ENT
M$INTRTN
      5622**DCL-ENT
M$IOQ
      5657**DCL-ENT
M$JOBSTATS
      5671**DCL-ENT
M$KEYIN
      5611**DCL-ENT
M$LDEV
      5606**DCL-ENT
M$LDTRC
      5619**DCL-ENT
M$LIMIT
      5612**DCL-ENT
M$LINES
      5611**DCL-ENT
M$LINK
      5618**DCL-ENT
M$MADMUCK
      5614**DCL-ENT
M$MAKUSER
      5645**DCL-ENT
M$MBS
      5613**DCL-ENT
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:174  
M$MDFFLD
      5637**DCL-ENT
M$MERC
      5662**DCL-ENT
M$MERCS
      5663**DCL-ENT
M$MIRROR
      5657**DCL-ENT
M$MONINFO
      5674**DCL-ENT
M$MPL
      5647**DCL-ENT
M$NODEINFO
      5638**DCL-ENT
M$NXTUSR
      5672**DCL-ENT
M$OCMSG
      5670**DCL-ENT
M$OLAY
      5618**DCL-ENT
M$OPEN
      5606**DCL-ENT
M$PAS
      5647**DCL-ENT
M$PATHCON
      5670**DCL-ENT
M$PDS
      5641**DCL-ENT
M$PFIL
      5608**DCL-ENT
M$PLATEN
      5632**DCL-ENT
M$PRECORD
      5610**DCL-ENT
M$PROCNAME
      5623**DCL-ENT
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:175  
M$PROFILE
      5634**DCL-ENT
M$PROMPT
      5630**DCL-ENT
M$RACST
      5614**DCL-ENT
M$RDSYSLOG
      5655**DCL-ENT
M$READ
      5607**DCL-ENT
M$RELDCB
      5612**DCL-ENT
M$RELRES
      5613**DCL-ENT
M$RELSTARF
      5615**DCL-ENT
M$REM
      5615**DCL-ENT
M$RENV
      5662**DCL-ENT
M$REQUIRE
      5614**DCL-ENT
M$RETRY
      5663**DCL-ENT
M$RETRYS
      5663**DCL-ENT
M$REW
      5609**DCL-ENT
M$RLSFLD
      5637**DCL-ENT
M$RPRIV
      5665**DCL-ENT
M$RSPP
      5644**DCL-ENT
M$RSWITCH
      5666**DCL-ENT
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:176  
M$RUE
      5672**DCL-ENT
M$SAD
      5645**DCL-ENT
M$SAVE
      5621**DCL-ENT
M$SCON
      5622**DCL-ENT
M$SCREECH
      5620**DCL-ENT
M$SENV
      5662**DCL-ENT
M$SETFMA
      5606**DCL-ENT
M$SETFP
      5635**DCL-ENT
M$SINPUT
      5633**DCL-ENT
M$SLCFLD
      5638**DCL-ENT
M$SMOUSE
      5652**DCL-ENT
M$SMPRT
      5644**DCL-ENT
M$SPRIV
      5665**DCL-ENT
M$SSC
      5645**DCL-ENT
M$SSWITCH
      5665**DCL-ENT
M$STATE
      5674**DCL-ENT
M$STD
      5646**DCL-ENT
M$STIMER
      5660**DCL-ENT
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:177  
M$STLPP
      5643**DCL-ENT
M$STRAP
      5660**DCL-ENT
M$STRMATTR
      5632**DCL-ENT
M$STRMCTL
      5630**DCL-ENT
M$STRMTAB
      5633**DCL-ENT
M$SYMBIO
      5671**DCL-ENT
M$SYSCON
      5657**DCL-ENT
M$SYSID
      5675**DCL-ENT
M$TDCLOSE
      5656**DCL-ENT
M$TDIO
      5656**DCL-ENT
M$TDOPEN
      5655**DCL-ENT
M$TDREQCPU
      5656**DCL-ENT
M$TEMPWROC
      5650**DCL-ENT
M$TIME
      5673**DCL-ENT
M$TRAP
      5660**DCL-ENT
M$TRMISC
      5635**DCL-ENT
M$TRMPRG
      5631**DCL-ENT
M$TRUNC
      5607**DCL-ENT
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:178  
M$UC
      5630**DCL
M$UMPL
      5647**DCL-ENT
M$UNFID
      5669**DCL-ENT
M$UNLATCH
      5626**DCL-ENT
M$UNSHARE
      5623**DCL-ENT
M$USRFIELD
      5666**DCL-ENT
M$VIRTUAL
      5641**DCL-ENT
M$WAIT
      5664**DCL-ENT
M$WEOF
      5609**DCL-ENT
M$WRITE
      5607**DCL-ENT
M$WRSYSLOG
      5655**DCL-ENT
M$XCON
      5661**DCL-ENT
M$XCONRTN
      5622**DCL-ENT
M$XEQTIME
      5674**DCL-ENT
M$XFLUSH
      5615**DCL-ENT
M$XMOUSE
      5652**DCL-ENT
M$XXX
      5618**DCL-ENT
M$YC
      5620**DCL-ENT
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:179  
MME.INST
      8266**DCL
MME.WD_1
      8269**DCL
MME.WD_2
      8270**DCL
MME.WD_3
      8271**DCL
MME.WD_4
      8272**DCL
MME.WD_5
      8273**DCL
MME.WD_6
      8274**DCL
MME_INSTR
      8353**DCL
MREG.A
      8294**DCL
MREG.E
      8296**DCL
MREG.Q
      8295**DCL
MREG.X0
      8286**DCL
MREG.X1
      8287**DCL
MREG.X2
      8288**DCL
MREG.X3
      8289**DCL
MREG.X4
      8290**DCL
MREG.X5
      8291**DCL
MREG.X6
      8292**DCL
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:180  
MREG.X7
      8293**DCL
SBAR_LOCATION IN PROCEDURE TOF$SBAR_INSTR
      8566**DCL
SBAR_PTR IN PROCEDURE TOF$SBAR_INSTR
      8571**DCL
SBAR_TO_GELBAR IN PROCEDURE TOF$SBAR_INSTR
      8608**LABEL
TOD$SPA
      8307**DCL
TOD$SPA.WD0_10
      8308**DCL
TOD$SPA.WD11.IC
      8310**DCL
TOD$SPA.WD11.RC
      8311**DCL
TOD$SPA.WD11_
      8312**DCL
TOD$SPA.WD12
      8313**DCL
TOD$SPA.WD13
      8314**DCL
TOD$SPA.WD14
      8315**DCL
TOD$SPA.WD15
      8316**DCL
TOD$SPA.WD16
      8317**DCL
TOD$SPA.WD20
      8324**DCL
TOD$SPA.WD21
      8325**DCL
TOD$SPA.WD22
      8326**DCL
TOD$SPA.WD22.HREG_BUF
      8328**DCL
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:181  
TOD$SPA.WD22.HREG_BUF.ADDR#
      8329**DCL
TOD$SPA.WD22.HREG_BUF.RETRY_FLAG
      8330**DCL
TOD$SPA.WD23
      8332**DCL
TOD$SPA.WD24
      8333**DCL
TOD$SPA.WD25
      8334**DCL
TOD$SPA.WD25.BAR
      8335**DCL
TOD$SPA.WD25.BAR.BASE
      8336**DCL
TOD$SPA.WD25.BAR.BOUNDS
      8337**DCL
TOD$SPA.WD25.DIVIDE
      8346**DCL
TOD$SPA.WD25.EXP_OVERFLOW
      8342**DCL
TOD$SPA.WD25.EXP_UNDERFLOW
      8343**DCL
TOD$SPA.WD25.IPR
      8344**DCL
TOD$SPA.WD25.OVERFLOW
      8341**DCL
TOD$SPA.WD26_71
      8348**DCL
TOF$BAR
      8125**DCL
TOF$BAR.FULL.BASE
      8132**DCL
TOF$BAR.FULL.SIZE
      8134**DCL
TOF$FAULTS
       115**PROC
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:182  
TOF$GELBAR_INDICATORS
      8141**DCL
TOF$GELBAR_REGISTERS.INST
      8160**DCL
TOF$GELBAR_REGISTERS.INST.NO
      8161**DCL
TOF$GELBAR_REGISTERS.INST.OP
      8162**DCL
TOF$GELBAR_REGISTERS.WD_1
      8163**DCL
TOF$GELBAR_REGISTERS.WD_2
      8164**DCL
TOF$GELBAR_REGISTERS.WD_3
      8165**DCL
TOF$GELBAR_REGISTERS.WD_4
      8166**DCL
TOF$GELBAR_REGISTERS.WD_5
      8167**DCL
TOF$GELBAR_REGISTERS.WD_6
      8168**DCL
TOF_ERROR_CODE.FCG
      8396**DCL
TOF_ERROR_CODE.MID
      8409**DCL
TOF_ERROR_CODE.MON
      8409**DCL
TOF_ERROR_CODE.SEV
      8410**DCL
TOQ$DCP
      8180**DCL
TOQ$DCP.BR
      8198**DCL
TOQ$DCP.BR.ADDRESS
      8199**DCL
TOQ$DCP.BR.IC
      8200**DCL
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:183  
TOQ$DCP.PF
      8181**DCL
TOQ$DCP.PF.DEBUG_TOLTS
      8184**DCL
TOQ$DCP.PF.ENABLED
      8182**DCL
TOQ$DCP.PF.GELBARRED
      8183**DCL
TOQ$DCP.PF.STOP_AT_SE
      8187**DCL
TOQ$DCP.PF.STOP_ON_GELBARS
      8185**DCL
TOQ$DCP.PF.STOP_ON_IO
      8186**DCL
TOQ$DCP.SE
      8190**DCL
TOQ$DCP.SE.ADDRESS
      8193**DCL
TOQ$DCP.SE.CATALOG
      8192**DCL
TOQ$DCP.SE.EDIT_NAME
      8191**DCL
TOQ$DCP.TP
      8194**DCL
TOQ$DCP.TP.ADDRESS
      8197**DCL
TOQ$DCP.TP.EDIT_NAME
      8196**DCL
TOQ$DCP.TP.GECALL_NAME
      8195**DCL
TOT$ECP
      8212**DCL
TOT$ECP.BOOT_CPU_TYPE
      8249**DCL
TOT$ECP.BREAK_ALLOWED
      8245**DCL
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:184  
TOT$ECP.BREAK_RECEIVED
      8247**DCL
TOT$ECP.DYNAMIC_PAGE_COUNT
      8230**DCL
TOT$ECP.IO
      8216**DCL
TOT$ECP.IO.COUNT
      8219**DCL
TOT$ECP.IO.TYPE
      8217**DCL
TOT$ECP.ISC
      8221**DCL
TOT$ECP.ISC.GERELC_WAIT
      8226**DCL
TOT$ECP.ISC.READ_OUT
      8222**DCL
TOT$ECP.ISC.READ_PENDING
      8228**DCL
TOT$ECP.ISC.WRITE_OUT
      8224**DCL
TOT$ECP.SUBEXEC
      8232**DCL
TOT$ECP.SUBEXEC.ADDRESS
      8235**DCL
TOT$ECP.SUBEXEC.EDIT_NAME
      8237**DCL
TOT$ECP.SUBEXEC.TEST_PAGE_COUNT
      8243**DCL
TOT$ECP.SUBEXEC.WRAPUP$
      8241**DCL
TOT$ECP.SUBEXEC.WRAPUP_TRIED
      8239**DCL
TOT$ECP.TEST_REQ_
      8215**DCL
TRTN_FPT.DRS_ IN PROCEDURE TOF$MME_HANDLER
      9253**DCL
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:185  
TRTN_FPT.V.IRBIT# IN PROCEDURE TOF$MME_HANDLER
      9255**DCL
TRTN_FPT.V.IRBIT#.CARRY IN PROCEDURE TOF$MME_HANDLER
      9255**DCL
TRTN_FPT.V.IRBIT#.EXOF IN PROCEDURE TOF$MME_HANDLER
      9255**DCL
TRTN_FPT.V.IRBIT#.EXUF IN PROCEDURE TOF$MME_HANDLER
      9255**DCL
TRTN_FPT.V.IRBIT#.EXUFM IN PROCEDURE TOF$MME_HANDLER
      9256**DCL
TRTN_FPT.V.IRBIT#.HEX IN PROCEDURE TOF$MME_HANDLER
      9256**DCL
TRTN_FPT.V.IRBIT#.MIR IN PROCEDURE TOF$MME_HANDLER
      9256**DCL
TRTN_FPT.V.IRBIT#.MM IN PROCEDURE TOF$MME_HANDLER
      9256**DCL
TRTN_FPT.V.IRBIT#.NEG IN PROCEDURE TOF$MME_HANDLER
      9255**DCL
TRTN_FPT.V.IRBIT#.OF IN PROCEDURE TOF$MME_HANDLER
      9255**DCL
TRTN_FPT.V.IRBIT#.OFM IN PROCEDURE TOF$MME_HANDLER
      9255**DCL
TRTN_FPT.V.IRBIT#.PE IN PROCEDURE TOF$MME_HANDLER
      9256**DCL
TRTN_FPT.V.IRBIT#.PM IN PROCEDURE TOF$MME_HANDLER
      9256**DCL
TRTN_FPT.V.IRBIT#.TR IN PROCEDURE TOF$MME_HANDLER
      9256**DCL
TRTN_FPT.V.IRBIT#.TRC IN PROCEDURE TOF$MME_HANDLER
      9256**DCL
TRTN_FPT.V.IRBIT#.ZERO IN PROCEDURE TOF$MME_HANDLER
      9255**DCL
TRTN_FPT.V.SETIR# IN PROCEDURE TOF$MME_HANDLER
      9256**DCL
TRTN_FPT.V_ IN PROCEDURE TOF$MME_HANDLER
      9253**DCL
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:186  
TRTN_FPT.DRS_ IN PROCEDURE TOF$SBAR_INSTR
      8585**DCL
TRTN_FPT.V.IRBIT# IN PROCEDURE TOF$SBAR_INSTR
      8587**DCL
TRTN_FPT.V.IRBIT#.CARRY IN PROCEDURE TOF$SBAR_INSTR
      8587**DCL
TRTN_FPT.V.IRBIT#.EXOF IN PROCEDURE TOF$SBAR_INSTR
      8587**DCL
TRTN_FPT.V.IRBIT#.EXUF IN PROCEDURE TOF$SBAR_INSTR
      8587**DCL
TRTN_FPT.V.IRBIT#.EXUFM IN PROCEDURE TOF$SBAR_INSTR
      8588**DCL
TRTN_FPT.V.IRBIT#.HEX IN PROCEDURE TOF$SBAR_INSTR
      8588**DCL
TRTN_FPT.V.IRBIT#.MIR IN PROCEDURE TOF$SBAR_INSTR
      8588**DCL
TRTN_FPT.V.IRBIT#.MM IN PROCEDURE TOF$SBAR_INSTR
      8588**DCL
TRTN_FPT.V.IRBIT#.NEG IN PROCEDURE TOF$SBAR_INSTR
      8587**DCL
TRTN_FPT.V.IRBIT#.OF IN PROCEDURE TOF$SBAR_INSTR
      8587**DCL
TRTN_FPT.V.IRBIT#.OFM IN PROCEDURE TOF$SBAR_INSTR
      8587**DCL
TRTN_FPT.V.IRBIT#.PE IN PROCEDURE TOF$SBAR_INSTR
      8588**DCL
TRTN_FPT.V.IRBIT#.PM IN PROCEDURE TOF$SBAR_INSTR
      8588**DCL
TRTN_FPT.V.IRBIT#.TR IN PROCEDURE TOF$SBAR_INSTR
      8588**DCL
TRTN_FPT.V.IRBIT#.TRC IN PROCEDURE TOF$SBAR_INSTR
      8588**DCL
TRTN_FPT.V.IRBIT#.ZERO IN PROCEDURE TOF$SBAR_INSTR
      8587**DCL
TRTN_FPT.V.SETIR# IN PROCEDURE TOF$SBAR_INSTR
      8588**DCL
PL6.E3A0      #001=TOF$FAULTS File=TOF$FAULTS.:E05TSI                            WED 07/30/97 06:23 Page:187  
TRTN_FPT.V_ IN PROCEDURE TOF$SBAR_INSTR
      8585**DCL
TTIMER_FPT.UNITS_ IN PROCEDURE TOF$RESET_GELBAR_TIMER
      8503**DCL
TTIMER_FPT.V.CANCEL# IN PROCEDURE TOF$RESET_GELBAR_TIMER
      8504**DCL
TTIMER_FPT.V.UTYPE# IN PROCEDURE TOF$RESET_GELBAR_TIMER
      8504**DCL
TTIMER_FPT.V_ IN PROCEDURE TOF$RESET_GELBAR_TIMER
      8503**DCL
