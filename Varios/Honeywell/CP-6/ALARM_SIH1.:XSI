.*M*
HELP file for ALARM.X
.*T*
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
.*A*                                             
 
ALARM - Provides library of alarm clock services.
 
.*B*
PL6 Usage: !LINK specifying ALARM.X as an UNSAT library.
C Usage: As above, but also include ALARMOU.X among the object units
being linked to build the application.
 
There must be an alarm server (typically ALARMD.X) running at the time
an application makes an alarm request.
.*B*
The ALARM library contains two C functions and two PL6 procs that
provide an alarm clock capability to application programs.  The C
functions are alarm() and alarmclock(); the corresponding PL6 procs are
ALARM$WAIT and ALARM$CLOCK.  alarm() and ALARM$WAIT ask the ALARMD
server to notify the application when some number of seconds of wall
time have elapsed.  alarmclock() and ALARM$CLOCK ask the ALARMD server
to notify the application when a particular UTS value is reached by the
CP-6 system's clock.
.*B*
Only one alarm request can be pending for an application.  If a request
is made while an earlier request is still pending, the time remaining on
the earlier request is returned and the new request replaces the earlier
one.
.*K* alarm
Prototype:  unsigned alarm( unsigned seconds );
 
alarm() asks the ALARMD server to notify the application when 'seconds'
seconds of wall time have elapsed.  The result is zero unless the
application has an earlier alarm request still pending, in which case
the earlier request is replaced and the result is the number of seconds
remaining on the earlier request.
 
alarm() is intended to match the operation of the UN*X alarm() function.
 
The signal SIGALRM is raised when notification arrives from the
ALARMD server.  Applications can take various kinds of action when a
signal is raised; see !HELP (CC) signal for more information.
.*K* alarmclock
Prototype:  unsigned alarmclock( time_t uts );
 
alarmclock() asks the ALARMD server to notify the application when the
CP-6 system's clock has reached or exceeded the UTS value 'uts'.  The
result is zero unless the application has an earlier alarm request still
pending, in which case the earlier request is replaced and the result is
the number of UTS units remaining on the earlier request.
 
The signal SIGALRM is raised when notification arrives from the
ALARMD server.  Applications can take various kinds of action when a
signal is raised; see !HELP (CC) signal for more information.
.*K* ALARM$WAIT
Prototype:  ALARM$WAIT( seconds, previous_seconds_remaining );
 
The previous_seconds_remaining argument is optional.
 
ALARM$WAIT asks the ALARMD server to notify the application when
'seconds' seconds of wall time have elapsed.  The result is zero unless
the application has an earlier alarm request still pending, in which
case the earlier request is replaced and the result is the number of
seconds remaining on the earlier request.
.*K* ALARM$CLOCK
Prototype:  ALARM$CLOCK( uts, previous_uts_remaining );
 
The previous_uts_remaining argument is optional.
 
ALARM$CLOCK asks the ALARMD server to notify the application when the
CP-6 system's clock has reached or exceeded the UTS value 'uts'.  The
result is zero unless the application has an earlier alarm request still
pending, in which case the earlier request is replaced and the result is
the number of UTS units remaining on the earlier request.
.*K* ALARM$INIT
Prototype:  ALARM$INIT( handler_eptr, event_id );
 
Both arguments are optional.
 
The library entry ALARM$INIT is provided for either C or PL6
applications that need control over exceptional conditions.  The two
optional arguments to ALARM$INIT specify (1) how exceptional conditions
are to be handled, and (2) what event id should be used for ALARMD server
notification.  C programmers should note that both arguments must be
passed by address.
.*B*
If handler_eptr is specified and is ENTADDR(NIL), the application wants
control over exceptional conditions.  The library stores the address of
the library proc to handle ALARMD events in handler_eptr.  The
application *must* call this proc when it receives an ALARMD event, the
latter identified by the event_id argument.
 
If handler_eptr is specified and is not ENTADDR(NIL), the application
defers control to the library, but expects to be called at the given
address when the library receives a non-ALARMD event.
 
If handler_eptr is not specified, the application defers control to the
library for all events.  The library aborts if any non-ALARMD event
is received.
.*B*
The choices for event_id are independent of the choices for
handler_eptr.
 
If event_id is specified and zero, the library stores the default event
id into event_id and uses the default.
 
If event_id is specified and nonzero, the library uses event_id as
the event id, replacing the default.
 
If event_id is not specified, the library uses the default event id.
.*K* OWNER
Mark Geisert, LADC
.*K* XINDEX
ALARM.X
.*R*
AID=PROGRAMMING
.*K* XINDEX_ABSTRACT
TOOL=ALARM
.*R*
Provides library of alarm clock services.
.*K* CHANGES
07/31/92 MAG
.*R*
ALARMOU split out from ALARM.
.*B*
07/17/92 MAG
Made PL6 usage work.  Corrected ALARM_CRU and usage instructions.
03/16/92 Installed in LADC X account.
