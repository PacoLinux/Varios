/*M* FORTSORT_SI61 - PL-6 subroutines for FORTSORT.X program */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
OPENTWO:  PROC;
/*
      Program by Steve Bergeon to open and close unit F$2.
      This required by ORDER_FORTRAN to obtain proper FORTRAN
      open of the output unit with reguard to command line.
*/
      DCL F$2 DCB;
     %INCLUDE CP_6;
      %FPT_OPEN (DCB=F$2,ORG=KEYED);
      %FPT_CLOSE (DCB=F$2,DISP=SAVE);
START:
      CALL M$OPEN (FPT_OPEN);
      CALL M$CLOSE (FPT_CLOSE);
      END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
FIND$FNB:  PROC (STRING, STRING_LEN, NONBLANK_LOC);
/*
       FIND$FNB finds the first non-blank in a string; FIND$LNB finds the
       last non-blank.  STRING is any character string; STRING_LEN must be the
       length (in bytes) of STRING.  NONBLANK_LOC returns the location of
       the first (or last) non-blank character; the first character is denoted
       by one (1), and the last by the value of STRING_LEN.  If the input
       string is all blanks, NONBLANK_LOC returns zero (0).
 
       Andrew E. Birner, 9 May '84
*/
       DCL STRING CHAR(STRING_LEN);
       DCL STRING_LEN SBIN WORD;
       DCL NONBLANK_LOC SBIN WORD;
 
       DCL 1 TABLE$$ CONSTANT ALIGNED,
             2 BYTES (0:511) UBIN BYTE CALIGNED INIT (1*32,0,1*479);
 
       DCL CHARLOC SBIN WORD STATIC;
       DCL TABLEVAL SBIN WORD STATIC;
%EJECT;
START:
       CALL SEARCH (CHARLOC, TABLEVAL, TABLE$$, STRING)
        WHENRETURN DO;
         NONBLANK_LOC = CHARLOC + 1;
        END; WHENALTRETURN DO;
         NONBLANK_LOC = 0;
       END;
 
       RETURN;
 
FIND$LNB:  ENTRY (STRING, STRING_LEN, NONBLANK_LOC);
 
       CALL SEARCHR (CHARLOC, TABLEVAL, TABLE$$, STRING)
        WHENRETURN DO;
         NONBLANK_LOC = CHARLOC + 1;
        END; WHENALTRETURN DO;
         NONBLANK_LOC = 0;
       END;
 
       RETURN;
 
END    FIND$FNB;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
OPENNEXT:  PROC (UNIT,REF_NAME, NXT_NAME, ERR_FLAG);
/*
      OPENNEXT: This routine takes in a file name, in REF_NAME,
        and opens the next non-busy file FUN=UPDATE, SHARE=IN;
        the name of the file so opened is returned in NXT_NAME.
        The file whose name is passed in need not exist; the search
        for non-busy files begins with the next file in the current
        File Management Account.
 
        UNIT:   Specifies the DCB to which the file is to be opened;
          can be an integer representing a FORTRAN unit number,
          a text DCB name, or a COBOL-style FD name.
 
        ERR_FLAG: This optional parameter is used to return
          error codes to the user as follows:
 
            -1 => Bad fid, missing parameter, or error on
                  the M$OPEN call; M$ERR, or M$MERC if monitor error
                  w/ALTRET, if ERR_FLAG not specified on call.
 
             0 => Everything worked; no action if ERR_FLAG
                  not present.
 
            +1 => End of user's file directory encountered;
                  NXT_NAME set to all '*' whether ERR_FLAG
                  specified or not.
 
      Author:   Andrew E. Birner, 11 Aug,'81
                Scientific Computer Services
                Zenith Radio Corporation
 
      Modified -- 27 June, '84, by A. E. Birner
                Added a test open preceding the real open, to fix a problem
                associated with star # 19368.
*/
%EJECT;
      DCL UNIT CHAR(31);
      DCL REF_NAME CHAR(31);
      DCL NXT_NAME CHAR(31);
      DCL ERR_FLAG SBIN WORD;
 
      DCL FIND$DCB ENTRY(3);
      DCL DCBNUMB UBIN WORD;
 
      %INCLUDE CP_6;
      %INCLUDE B_ERRORS_C;
      %INCLUDE CP_6_SUBS;
 
      %B$TCB (STCLASS="BASED(B$TCB$)");
      DCL B$TCB$ PTR SYMREF;
      %B$ALT;
 
      %F$DCB (DCBN=F$FNF,BASED="BASED(F$FNF$)");
      DCL F$FNF$ PTR STATIC;
 
      %FPT_OPEN (FPTN=OPN_NEXT, SHARE=IN);
      %FPT_OPEN (FPTN=GET_NEXT, STCLASS=STATIC, ASN=FILE, SHARE=NONE,
                NXTF=YES, FUN=UPDATE, TEST=YES);
      %VLP_NAME (FPTN=RNAME, STCLASS=STATIC, LEN=31);
 
      %FPT_FID (STCLASS=STATIC, ASN=FASN, NAME=RNAME);
      DCL FASN UBIN BYTE STATIC;
 
      DCL SP_LOC UBIN WORD;
 
%EJECT;
START:
      IF ADDR(REF_NAME) = ADDR(NIL) | ADDR(NXT_NAME) = ADDR(NIL) |
         ADDR(UNIT) = ADDR(NIL) THEN
BLOW_OUT:
        DO;
          IF ADDR(ERR_FLAG) ~= ADDR(NIL) THEN
            DO;
              ERR_FLAG = -1;
              RETURN;
            END;
          ELSE
            CALL M$ERR;
        END;
 
      CALL INDEX1(SP_LOC,' ',REF_NAME);
      RNAME.L# = SP_LOC;
 
      FPT_FID.TEXTFID_ = VECTOR(REF_NAME);
      CALL M$FID(FPT_FID) ALTRET (ERR_LOC);
      IF FASN ~= %FILE# THEN
        GOTO BLOW_OUT;
 
      CALL FIND$DCB (UNIT,DCBNUMB);
      OPN_NEXT.V.DCB# = DCBNUMB;
      GET_NEXT.V.DCB# = DCBNUMB;
      GET_NEXT.NAME_ = VECTOR (RNAME);
 
TRY_NEXT:
      CALL M$OPEN (GET_NEXT) ALTRET (ERR_LOC);
      CALL M$OPEN (OPN_NEXT) ALTRET (ERR_LOC);
 
      F$FNF$ = DCBADDR(DCBNUMB);
      NXT_NAME = ' '; /* Blank out NXT_NAME. */
      SUBSTR(NXT_NAME,0,F$FNF.NAME#.L) = SUBSTR(F$FNF.NAME#.C,0,
                                                F$FNF.NAME#.L);
      IF ADDR(ERR_FLAG) ~= ADDR(NIL) THEN
        ERR_FLAG = 0;
      RETURN;
 
%EJECT;
ERR_LOC:
      IF B$TCB.ALT$ -> B$ALT.ERR.ERR# = %E$FILEBUSY THEN
        DO;
          GET_NEXT.NAME_ = VECTOR(NIL);
          GOTO TRY_NEXT;
        END;
 
      IF B$TCB.ALT$ -> B$ALT.ERR.ERR# = %E$FDEOF THEN
        DO;     /* End of file directory in this account */
          IF ADDR(ERR_FLAG) ~= ADDR(NIL) THEN
            ERR_FLAG = 1;
          NXT_NAME = '*******************************';
          RETURN;
        END;
 
      IF ADDR(ERR_FLAG) ~= ADDR(NIL) THEN
        DO;
          ERR_FLAG = -1;
          RETURN;
        END;
      CALL M$MERC;
      CALL M$ERR;
 
END OPENNEXT;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************
*                                                     *
*                      C H K D C B                    *
*                                                     *
*******************************************************
*                                                     *
*          THIS PROGRAM CHECKS THE DCB TABLE FOR      *
*      DCB NUMBER 'NUM', IF THAT IS NOT A VALID       *
*      POSITION IN THE TABLE, CHKDCB RETURNS WITH     *
*      STRLEN = -1, IF THERE IS NO DCB IN THAT        *
*      POSITION IN THE TABLE, CHKDCB RETURNS WITH     *
*      STRLEN = 0, IF THE DCB EXISTS, STR RECIEVES    *
*      THE NAME OF THE DCB AND STRLEN RECIEVES THE    *
*      LENGTH OF THE NAME.                            *
*                                                     *
*******************************************************
*                                                     *
*           PROGRAM BY: STEPHEN C. BERGEON            *
*                       SCIENTIFIC COMPUTING SERVICES *
*                       ZENITH RADIO CORPORATION      *
*                       1000 MILWAUKEE AVE.           *
*                       GLENVIEW IL.  60025           *
*                                                     *
******************************************************/
CHKDCB$:PROC (NUM,STR,STRLEN) NOAUTO;
 
/* DECLARE PARAMETERS */
 
       DCL NUM SBIN WORD;
       DCL STR CHAR(STRLEN);
       DCL STRLEN SBIN WORD;
 
/* GET THE POINTER TO THE READ ONLY SEGMENT */
 
       DCL B$ROS$ PTR SYMREF;
 
/* DECLARE MAP FOR START OF READ ONLY SEGMENT */
 
       %INCLUDE B$ROSEG;
 
/* LETS INCLUDE A BASED DCB DEFINITION */
 
     %INCLUDE CP_6;
       %F$DCB (DCBN=F$DCB);
 
/* LETS GET DOWN TO BUSINESS */
 
START:
 
         /*  Does NUM lie within the table?  */
 
       IF NUM < 0 | NUM > B$ROS$->B$ROSEG.NUMDCBS THEN DO;
         STRLEN = -1;
         RETURN;
       END;
 
         /*  Does the specified DCB exist?  */
 
       IF B$ROS$->B$ROSEG.DCBPTR$->B$RODCB$(NUM) = ADDR(NIL) THEN DO;
         STRLEN = 0;
         RETURN;
       END;
 
         /*  Return the text name of the specified DCB.  */
 
       STRLEN = B$ROS$->B$ROSEG.DCBPTR$->B$RODCB$(NUM)->F$DCB.DCBNAME.L;
       STR = B$ROS$->B$ROSEG.DCBPTR$->B$RODCB$(NUM)->F$DCB.DCBNAME.N;
       RETURN;
 
END    CHKDCB$;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/**************************************************************\
*                                                              *
*                       F I N D $ D C B                        *
*                                                              *
****************************************************************
*                                                              *
*          THIS ROUTINE SEARCHES THE DCB TABLE FOR THE NUMBER  *
*      OF THE SUPPLIED DCB. THE SUPPLIED DCB MAY BE IN TEXT    *
*      FORMAT, IT MAY BE A FORTRAN UNIT NUMBER, OR IT MAY BE   *
*      A DCB NUMBER IN THE LEFTMOST HALFWORD PASSED; THIS LAST *
*      IS THE FORMAT COBOL USES WHEN PASSING AN FD NAME VIA    *
*      AN 'ENTER PL-6' TYPE CALL.                              *
*                                                              *
*      If a DCB name or Fortran Unit Number is passed,         *
*      this routine will attempt to create the DCB if it does  *
*      not exist.  If the third argument, BUILD, is provided,  *
*      it will serve as a flag indicating whether (.TRUE.) or  *
*      not (.FALSE.) to create the DCB if it does not exist.   *
*      If a DCB number is passed, under no circumstances will  *
*      FIND$DCB attempt to build a DCB.                        *
*                                                              *
****************************************************************
*                                                              *
*              PROGRAM BY:     STEPHEN C. BERGEON              *
*                              SCIENTIFIC COMPUTING SERVICES   *
*                              ZENITH RADIO CORPORATION        *
*                              GLENVIEW IL.  60025             *
*                                                              *
*              <* MODIFIED 30 JUL,'81 -- A. E. BIRNER *>       *
*              <* MODIFIED 25 SEP,'81 -- A. E. BIRNER *>       *
*              <* RENAMED  17 MAY,'84 -- A. E. BIRNER *>       *
*                  (Getput junk eliminated)                    *
*                                                              *
\**************************************************************/
%EJECT;
FIND$DCB: PROC (UNIT, DCB_NUM, BUILD);
 
       %INCLUDE CP_6;
 
       %FPT_GETDCB(DCBNAME=DCBNAME,DCBNUM=NUM,MERGE=YES);
       %VLP_NAME(FPTN=DCBNAME);
 
       DCL 1 UNIT,                /* DECLARE PARAMETERS */
             2 FORT SBIN WORD,
             2 COBOL REDEF FORT,
               3 DCB_NUM UBIN HALF UNAL,
               3 * UBIN HALF UNAL,
             2 FILLER CHAR(28);
       DCL TEXTUNIT REDEF UNIT CHAR(32);
       DCL DCB_NUM SBIN WORD;
       DCL BUILD BIT(1) UNAL;
 
       DCL GIVEN_NAME CHAR(32);   /* LOCAL VARIABLES */
       DCL GIVEN_LENGTH SBIN WORD;
       DCL 1 GIVEN_LENGTH_REMAP REDEF GIVEN_LENGTH,
           2 * UBIN(27) UNAL,
           2 SIZE UBIN BYTE UNAL;
       DCL TABLE_NAME CHAR(32);
       DCL TABLE_LENGTH SBIN WORD;
       DCL A_CHAR CHAR(1);
       DCL NUM SBIN WORD STATIC;
       DCL TRY_TO_GET BIT(1);
 
       DCL NUMTONAM ENTRY(3);
       DCL CHKDCB$ ENTRY(3);
 
%EJECT;
START:
         /* Set flag for attempted build */
 
       IF  ADDR(BUILD) ~= ADDR(NIL)  THEN
         TRY_TO_GET = BUILD;
       ELSE
         TRY_TO_GET = '1'B;
 
       IF  UNIT.FORT > 0 & UNIT.FORT <= 262143  THEN
         DO;
           CALL NUMTONAM(UNIT.FORT,GIVEN_NAME,GIVEN_LENGTH);
           CALL INSERT(GIVEN_NAME,GIVEN_LENGTH,1,' ');
           GOTO FINDIT;
         END;
       ELSE
         DO;
           NUM = UNIT.COBOL.DCB_NUM;
           IF  NUM > 0 & NUM < 512  THEN
             DO;     /* CHECK TO SEE IF THIS IS REALLY A DCB NUMBER */
               CALL CHKDCB$(NUM,TABLE_NAME,TABLE_LENGTH);
               IF  TABLE_LENGTH > 0  THEN
                 DCB_NUM = NUM;
               ELSE
                 DCB_NUM = -1;
               RETURN;
             END;
         END;
 
       NUM = 0;                /* LOOK FOR '0'O OR ' 'C */
       DO WHILE (NUM < 31);
         IF SUBSTR(TEXTUNIT,NUM,1) = ' '  OR
          ASCBIN(SUBSTR(TEXTUNIT,NUM,1)) = 0 THEN GOTO MOVEIT;
         NUM = NUM + 1;
       END;
 
MOVEIT:
       GIVEN_LENGTH = NUM;     /* NAME IS THIS LENGTH */
       GIVEN_NAME = SUBSTR(TEXTUNIT,0,GIVEN_LENGTH);
%EJECT;
FINDIT:
       NUM = 1;
TOP:
       CALL CHKDCB$(NUM,TABLE_NAME,TABLE_LENGTH);
       IF TABLE_LENGTH = 0 THEN        /* Empty table position */
         DO;
           NUM = NUM + 1;
           GOTO TOP;
         END;
 
       IF  TABLE_LENGTH < 0 THEN DO;   /* Beyond end of table; DCB not found */
         IF  TRY_TO_GET  THEN DO;
           DCBNAME.NAME# = GIVEN_NAME;
           DCBNAME.L# = GIVEN_LENGTH_REMAP.SIZE;
           CALL M$GETDCB(FPT_GETDCB) WHENRETURN DO;
             DCB_NUM = NUM;
            END; WHENALTRETURN DO;
             DCB_NUM = -2;
           END;
          END; ELSE DO;
           DCB_NUM = -1;
         END;
         RETURN;
       END;
                                                 /* Check for a name match */
       IF  GIVEN_LENGTH = TABLE_LENGTH &
         SUBSTR(GIVEN_NAME,0,GIVEN_LENGTH) = SUBSTR(TABLE_NAME,0,TABLE_LENGTH)
        THEN DO;
         DCB_NUM = NUM;
         RETURN;
       END;
 
       NUM = NUM + 1;
       GOTO TOP;
 
END    FIND$DCB;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
NUMTONAM:  PROC (UNITNUM, NAME, LEN);
/*
       NUMTONAM takes in an INTEGER unit number (ala FORTRAN)
       and returns a text DCB name of the form 'F$nnn...', where
       'nnn...' is the text representation of the unit number
       passed.  (UNITNUM = 13 results in NAME = 'F$13 ', LEN = 4.)
       If UNITNUM is not a valid FORTRAN unit number, LEN returns
       zero (0).
 
       Andrew E. Birner, 13 Jan, '83
*/
       DCL UNITNUM SBIN;
       DCL NAME CHAR(32);
       DCL LEN SBIN;
 
       DCL I UBIN;
       DCL J UBIN;
 
START:
       IF UNITNUM <= 0 THEN DO;
         LEN = 0;
         RETURN;
       END;
 
       J = UNITNUM;
       I = UNITNUM/10;
       LEN = 1;
       DO WHILE I ~= 0;
         I = I/10;
         LEN = LEN + 1;
       END;
 
       CALL BINCHAR (SUBSTR(NAME,2,LEN), J);
       SUBSTR (NAME,0,2) = 'F$';
       LEN = LEN + 2;
 
       RETURN;
 
END    NUMTONAM;
