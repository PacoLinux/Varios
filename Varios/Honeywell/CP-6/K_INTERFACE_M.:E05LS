

15:03 JUL 28 '97 K_INTERFACE_M.:E05SI                                      1    
    1      /*M* K_INTERFACE_M - Macros and EQUs for passing parameters in the OSI layers */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /*X* MEC,MOC,EXM=20,CLM=30,CRM=80    */
    9
   10      /*P* NAME: K_INTERFACE_M
   11
   12      The file K_INTERFACE_M contains the EQUs and MACROs that are
   13      used by the CP-6 communications modules that are dealing with
   14      OSI connections.
   15
   16      */
   17
   18
   19      /*F* NAME: K_Tfunction_equ
   20
   21      The following EQUs, from file K_INTERFACE_M, are used to reference FUNCTION when
   22      passing parameters between the session and the transport layers
   23      when the connection is an OSI connection:
   24
   25      .fif
   26      } K_TCONNECT_REQ/IND     21
   27      } K_TCONNECT_RSP/CFM     22
   28      } K_TDATA_REQ/IND        23
   29      } K_TEXPD_DATA_REQ/IND   24
   30      } K_TDISCONNECT_REQ/IND  25
   31      } K_TCREDIT              26   (not part of OSI protocol)
   32      } K_TFLOW_STOP           27   (not part of OSI protocol)
   33      } K_TFLOW_START          28   (not part of OSI protocol)
   34      */
   35
   36      /* Thses are standard OSI.
   37      */
15:03 JUL 28 '97 K_INTERFACE_M.:E05SI                                      2    
   38      %EQU K_TCONNECT_REQ = 21;
   39      %EQU K_TCONNECT_IND = 21;
   40
   41      %EQU K_TCONNECT_RSP = 22;
   42      %EQU K_TCONNECT_CFM = 22;
   43
   44      %EQU K_TDATA = 23;
   45      %EQU K_TDATA_REQ = 23;
   46      %EQU K_TDATA_IND = 23;
   47
   48      %EQU K_TEXPD_DATA = 24;
   49      %EQU K_TEXPD_DATA_REQ = 24;
   50      %EQU K_TEXPD_DATA_IND = 24;
   51
   52      %EQU K_TDISCONNECT = 25;
   53      %EQU K_TDISCONNECT_REQ = 25;
   54      %EQU K_TDISCONNECT_IND = 25;
   55
   56      /* Thses are not standard OSI.
   57      */
   58      %EQU K_TCREDIT = 26;
   59      %EQU K_TCREDIT_ACK = 26;
   60
   61      %EQU K_TFLOW_STOP = 27;
   62      %EQU K_TFLOW_START = 28;
   63
   64      /* These are non-standard services that were implemented for MAP.
   65      There does not appear to be a need for the same functions in
   66      the CP-6 implementation.
   67
   68      %EQU K_TINIT_REQ = 8;
   69      %EQU K_TINIT_RESP = 9;
   70      %EQU K_TSTAT_REQ = 10;
   71      %EQU K_TSTAT_RESP = 11;
   72      %EQU K_TFINISH_REQ = 12;
   73      %EQU K_TFINISH_RESP = 13;
   74      %EQU K_TSDATA = 15;
15:03 JUL 28 '97 K_INTERFACE_M.:E05SI                                      3    
   75
   76      */
   77
   78
   79      /*F* NAME: K_Nfunction_equ
   80
   81      The following EQUs, from file K_INTERFACE_M, are used to reference FUNCTION when
   82      passing parameters between the transport and the network layers
   83      when the connection is an OSI connection:
   84
   85      .fif
   86      } K_NCONNECT_REQ/IND     31
   87      } K_NCONNECT_RSP/CFM     32
   88      } K_NDATA_REQ/IND        33
   89      } K_NEXPD_DATA_REQ/IND   34
   90      } K_NRESET_REQ/IND       35
   91      } K_NDISCONNECT_REQ/IND  36
   92      .fin
   93      */
   94
   95      /* This is the only one needed for connection-less mode:
   96      */
   97      %EQU K_NCONNECT_REQ = 31;
   98      %EQU K_NCONNECT_IND = 31;
   99
  100      %EQU K_NCONNECT_RSP = 32;
  101      %EQU K_NCONNECT_CFM = 32;
  102
  103      %EQU K_NDATA = 33;
  104      %EQU K_NDATA_REQ = 33;
  105      %EQU K_NDATA_IND = 33;
  106
  107      %EQU K_NEXPD_DATA_REQ = 34;
  108      %EQU K_NEXPD_DATA_IND = 34;
  109
  110      %EQU K_NRESET_REQ = 35;
  111      %EQU K_NRESET_IND = 35;
15:03 JUL 28 '97 K_INTERFACE_M.:E05SI                                      4    
  112
  113      %EQU K_NDISCONNECT_REQ = 36;
  114      %EQU K_NDISCONNECT_IND = 36;
  115
  116
  117
  118
  119      /*F* NAME: K$FPT_CONNECT_OSI
  120
  121      The K$FPT_CONNECT_OSI macro generates the structure that is used to
  122      pass parameters from the ISO session layer to the transport layer
  123      on the host.  The address of this FPT is to be in K$RWPARM.FPT$
  124      when the K$RWPARM.FUNCTION is %K_TCONNECT_REQ or %K_TCONNECT_RSP.
  125
  126      When the function is K_TCONNECT_REQUEST, the entire contents of the
  127      FPT are stored in the transport context block that is allocated for
  128      the connection in KI$TCTX.SSN.  Similarly, KI$TCTX.SSN is built in the
  129      transport context on receipt of a transport connect request.  On calls
  130      from the transport layer to the session layer the address of KI$TCTX
  131      is available in K$RWPARM.TCTX$, so session has access to KI$TCTX.SSN.
  132
  133      When the function is K_TCONNECT_RSP, only the following fields in
  134      the FPT are meaningful:
  135      }        TR_FLAGS.TRACE
  136      }        SCID
  137
  138      K$FPT_CONNECT_OSI contains the following:
  139      */
  140
  141      %MACRO K$FPT_CONNECT_OSI (NAME=K$FPT_CONNECT_OSI,
  142                       STCLASS=BASED,
  143                       LAST=";",
  144                       LVL=1,
  145                       ALGN=ALIGNED,
  146                       ADRTYP(X121=1,FEP=2,LACS=3,NONE=0)=0,
  147                       FULL(YES=1,NO=0,ANY)=1,
  148                       CLASS=4,
15:03 JUL 28 '97 K_INTERFACE_M.:E05SI                                      5    
  149                       TRACE(YES='1'B,NO='0'B,ANY)='0'B,
  150                       CLNS(YES='1'B,NO='0'B,ANY)='1'B,
  151                       OSI(YES='1'B,NO='0'B,ANY)='1'B,
  152                       EXPEDITED(YES='1'B,NO='0'B,ANY)='1'B,
  153                       EXTENDED(YES='1'B,NO='0'B,ANY)='1'B,
  154                       CLASS_2_FLOW(YES='1'B,NO='0'B,ANY)='0'B,
  155                       CHKSUM(YES='1'B,NO='0'B,ANY)='1'B,
  156                       TPDUSIZE=0,
  157                       WINDOWSZ=0,
  158                       TIMER1=0,
  159                       TIMER2=0,
  160                       QOS=0,
  161                       SCID=0);
  162
  163      %LSET LISTDIR='0'B;
  164      %LSET LISTEXP='1'B;
  165      %LSET LISTCOM='0'B;
  166      %LSET LISTSUB='1'B;
  167      %LSET L6=BITBIN(MODE_FEP);
  168      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  169      %IF (SUBSTR(STR,0,6)='STATIC') OR
  170      (SUBSTR(STR,0,8)='CONSTANT') OR
  171      (SUBSTR(STR,0,3)='EXT');
  172      %LSET INIT=CHARTEXT(' INIT');
  173      %LSET ENIT=CHARTEXT(' ');
  174      %ELSE;
  175      %LSET INIT=CHARTEXT('/*');
  176      %LSET ENIT=CHARTEXT('*/');
  177      %ENDIF;
  178      %IF LVL=1 ;
  179      DCL 1 NAME STCLASS ALGN,
  180      %ELSE;
  181             %(LVL) NAME ALGN,
  182      %ENDIF;
  183      %LSET SAP_LVL=LVL+1;
  184
  185                %(LVL+1) %CHARTEXT('RFU0') UBIN(%(18-L6*2)) CALIGNED %INIT(0)%ENIT,
15:03 JUL 28 '97 K_INTERFACE_M.:E05SI                                      6    
  186                %(LVL+1) %CHARTEXT('RFU1') UBIN(%(18-L6*2)) CALIGNED %INIT(0)%ENIT,
  187                %(LVL+1) %CHARTEXT('RFU2') UBIN(%(18-L6*2)) CALIGNED %INIT(0)%ENIT,
  188                %(LVL+1) %CHARTEXT('RFU3') UBIN(%(18-L6*2)) CALIGNED %INIT(0)%ENIT,
  189                %(LVL+1) %CHARTEXT('TPDUSIZE') UBIN(%(18-L6*2)) CALIGNED %INIT(TPDUSIZE)%ENIT,
  190                %(LVL+1) %CHARTEXT('TPDUSZ_PARM') REDEF %CHARTEXT('TPDUSIZE') UBIN(%(18-L6*2)) CALIGNED,
  191                          /*N* TPDUSIZE - UBIN BYTE.
  192                          Specifies the desired TPDU size.
  193                          This must be a power of two value.  Valid range for
  194                          Class 0 is 128 to 2048.  For all other classes the
  195                          valid range is 128 to 8192.
  196                          */
  197                %(LVL+1) %CHARTEXT('WINDOWSZ') UBIN(%(18-L6*2)) CALIGNED %INIT(WINDOWSZ)%ENIT,
  198                          /*N* WINDOWSZ - UBIN BYTE.
  199                          Specifies the number of buffers this connection
  200                          may have in use at any one time.
  201                          */
  202                %(LVL+1) %CHARTEXT('TIMER1') UBIN(%(18-L6*2)) CALIGNED %INIT(TIMER1)%ENIT,
  203                          /*N* TIMER1 - UBIN BYTE.
  204                          Specifies the maximum time allowed to complete
  205                          a TCONNECT_REQ.
  206                          */
  207                %(LVL+1) %CHARTEXT('TIMER2') UBIN(%(18-L6*2)) CALIGNED %INIT(WINDOWSZ)%ENIT,
  208                          /*N* TIMER2 - UBIN BYTE.
  209                          Specifies the maximum time that may expire between
  210                          sending a TPDU_ER and initiating transport release
  211                          procedures.
  212                          */
  213                %(LVL+1) %CHARTEXT('QOS') UBIN BYTE CALIGNED %INIT(QOS)%ENIT,
  214                          /*N* QOS - UBIN BYTE.
  215                          Contains a value that reflects the requested
  216                          Quality of Service.  This value is remembered
  217                          in K$TCTX.SSN.QOS so it is available to Network.
  218                          */
  219                %(LVL+1) %CHARTEXT('CLASS') UBIN BYTE CALIGNED %INIT(CLASS)%ENIT,
  220                          /*K* CLASS - UBIN BYTE.
  221                          Contains a value to indicate the requested
  222                          transport class for this OSI Session connection.
15:03 JUL 28 '97 K_INTERFACE_M.:E05SI                                      7    
  223                          Permissable values are 0, 2 and 4.
  224                          The default is 4.
  225                          */
  226                %(LVL+1) TR_FLAGS,
  227                  %(LVL+2) HOST_REF UBIN BYTE CALIGNED %INIT(0)%ENIT,
  228                          /*K* TR_FLAGS - BIT ARRAY.
  229                          The following TR_FLAGS flags may be set by
  230                          specifying flag=YES|NO.
  231                          */
  232      %IF NOT(MODE_FEP);
  233                  %(LVL+2) * BIT(1) UNAL %INIT('0'B)%ENIT,
  234      %ENDIF;
  235                  %(LVL+2) * BIT(1) UNAL %INIT('0'B)%ENIT,
  236                  %(LVL+2) %CHARTEXT('TRACE') BIT(1) UNAL %INIT(TRACE)%ENIT,
  237                          /*K* TR_FLAGS.TRACE - BIT(1).
  238                          If set, indicates that the trace option is to be
  239                          enabled of the local fep for this transport connection.
  240                          The default is NO.
  241                          */
  242                  %(LVL+2) %CHARTEXT('CLNS') BIT(1) UNAL %INIT(CLNS)%ENIT,
  243                          /*K* TR_FLAGS.CLNS - BIT(1).
  244                          If set, indicates that the ConnectionLess mode Network
  245                          Service is to be used for this connection.  If reset,
  246                          the connection oriented network service is to be used.
  247                          The default is YES.  This option is ignored when
  248                          the requested CLASS is 0, in which case connection
  249                          oriented network service is assumed.
  250                          */
  251                  %(LVL+2) %CHARTEXT('OSI') BIT(1) UNAL %INIT(OSI)%ENIT,
  252                          /*N* TR_FLAGS.OSI - BIT(1).
  253                          If set, indicates that this is to be an OSI
  254                          Session Connection.
  255                          The default is YES.
  256                          */
  257                  %(LVL+2) %CHARTEXT('CLASS_2_FLOW') BIT(1) UNAL %INIT(CLASS_2_FLOW)%ENIT,
  258                          /*K* TR_FLAGS.CLASS_2_FLOW - BIT(1).
  259                          If set, indicates that explicit flow control
15:03 JUL 28 '97 K_INTERFACE_M.:E05SI                                      8    
  260                          is to be used for this Class 2 connection.
  261                          The default is NO.
  262                          This bit has no meaning for other than Class 2.
  263                          */
  264                  %(LVL+2) %CHARTEXT('EXTENDED') BIT(1) UNAL %INIT(EXTENDED)%ENIT,
  265                          /*K* TR_FLAGS.EXTENDED - BIT(1).
  266                          Set if the use of extended formats is to be used
  267                          on this connection.
  268                          The default is YES.
  269                          Valid only when the selected class is 2 or 4.
  270                          */
  271                  %(LVL+2) %CHARTEXT('EXPEDITED') BIT(1) UNAL %INIT(EXPEDITED)%ENIT,
  272                          /*K* TR_FLAGS.EXPEDITED - BIT(1).
  273                          Set if the use of expedited data is to be allowed
  274                          on this connection.
  275                          The default is YES.
  276                          This option is ignored if the selected class is 0.
  277                          If used with Class 2, the CLASS_2_FLOW option must
  278                          also be selected.
  279                          */
  280      %IF FULL=0;
  281                  %(LVL+2) %CHARTEXT('CHKSUM') BIT(1) UNAL %INIT(CHKSUM)%ENIT;
  282      %ELSE;
  283                  %(LVL+2) %CHARTEXT('CHKSUM') BIT(1) UNAL %INIT(CHKSUM)%ENIT,
  284                          /*K* TR_FLAGS.CHKSUM - BIT(1).
  285                          Set if the use of the transport checksum parameter
  286                          is to be used on this transport connection.
  287                          The default is YES.
  288                          Valid only when the selected class is 4.
  289                          */
  290                %(LVL+1) %CHARTEXT('SCID') SBIN(%(36-L6*4)) %INIT(SCID)%ENIT,
  291                          /*K* SCID - SBIN WORD.
  292                          Contains a value to be remembered in K$TCTX.SSN.SCID.
  293                          */
  294                %K$TSAP (NAME=SRC_TSAP,LVL=SAP_LVL,LAST=",",STCLASS=STCLASS);
  295                          /*K* SRC_TSAP - Structure.
  296                          Specifies the TSAP portion of the source
15:03 JUL 28 '97 K_INTERFACE_M.:E05SI                                      9    
  297                          network address.  This TSAP is maintained
  298                          in K$TCTX.SSN.SRC_TSAP so that session may refer
  299                          to it later when called by transport.
  300
  301                          See the K$TSAP macro in file K_ADDRESS_M.
  302                          */
  303                %K$TSAP (NAME=DST_TSAP,LVL=SAP_LVL,LAST=",",STCLASS=CTCLASS);
  304                          /*K* DST_TSAP - Structure.
  305                          Specifies the TSAP portion of the destination
  306                          network address.  This TSAP is maintained
  307                          in K$TCTX.SSN.DST_TSAP so that session may refer
  308                          to it later when called by transport.
  309
  310                          See the K$TSAP macro in file K_ADDRESS_M.
  311                          */
  312                %K$NSAP (FPTN=SRC_NSAP,LVL=SAP_LVL,ADRTYP=ADRTYP,STCLASS=STCLASS,LAST=",");
  313                          /*K* SRC_NSAP - Structure.
  314                          Specifies the NSAP portion of the source
  315                          network address.  This NSAP is maintained
  316                          in K$TCTX.SSN.SRC_NSAP.  K$RWPARM.SRC_ADDR$ is then
  317                          set to the address of K$TCTX.SSN.SRC_NSAP prior to
  318                          calls to network.
  319
  320                          See the K$NSAP macro in file K_ADDRESS_M.
  321                          */
  322                %K$NSAP (FPTN=DST_NSAP,LVL=SAP_LVL,ADRTYP=ADRTYP,STCLASS=STCLASS,LAST=LAST);
  323                          /*K* DST_NSAP - Structure.
  324                          Specifies the NSAP portion of the destination
  325                          network address.  This NSAP is maintained
  326                          in K$TCTX.SSN.DST_NSAP.  K$RWPARM.DST_ADDR$ is then
  327                          set to the address of K$TCTX.SSN.DST_NSAP prior to
  328                          calls to network.
  329
  330                          See the K$NSAP macro in file K_ADDRESS_M.
  331                          */
  332      %ENDIF;
  333      %MEND;
15:03 JUL 28 '97 K_INTERFACE_M.:E05SI                                      10   
  334
  335
  336
  337
  338      %EQU KI_TRFLGS_CLASS0 = '000057'O; /*clns cl2_flow exped extnd chksum are illegal */
  339      %EQU KI_TRFLGS_CLASS2 = '000001'O; /*chksum is illegal                        */
  340      %EQU KI_TRFLGS_CLASS4 = '000010'O; /*cl2_flow is illegal                      */
  341      %EQU KI_TRFLGS_CP6 = '000700'O; /*mask of CP-6 options - * * trace            */
  342
  343
  344
  345      /*F* NAME: K$FPT_TERM_OSI
  346
  347      The K$FPT_TERM_OSI macro generates the structure that is used to
  348      pass parameters between the OSI session routines in the host.
  349
  350      */
  351
  352      %MACRO K$FPT_TERM_OSI (NAME=K$FPT_TERM_OSI,STCLASS=BASED,
  353                       REASON=0);
  354
  355       %LSET LISTDIR='0'B;
  356       %LSET LISTEXP='1'B;
  357       %LSET LISTCOM='0'B;
  358       %LSET LISTSUB='1'B;
  359       %LSET L6=BITBIN(MODE_FEP);
  360       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  361       %IF (SUBSTR(STR,0,6)='STATIC') OR
  362       (SUBSTR(STR,0,8)='CONSTANT') OR
  363       (SUBSTR(STR,0,3)='EXT');
  364       %LSET INIT=CHARTEXT(' INIT');
  365       %LSET ENIT=CHARTEXT(' ');
  366       %ELSE;
  367       %LSET INIT=CHARTEXT('/*');
  368       %LSET ENIT=CHARTEXT('*/');
  369       %ENDIF;
  370
15:03 JUL 28 '97 K_INTERFACE_M.:E05SI                                      11   
  371      DCL 1 NAME STCLASS ALIGNED,
  372            2 %CHARTEXT('REASON') UBIN(%(36-L6*4)) %INIT(REASON)%ENIT,
  373                          /*K* REASON - UBIN WORD.
  374                          Contains a code for the reason the disconnect
  375                          is being requested.
  376
  377                          See REASON_equ in file K_TRANSPORT_E.   ????
  378                          */
  379                %K$TSAP (NAME=SRC_TSAP,LVL=2,LAST=",");
  380                          /*K* SRC_TSAP - Structure.
  381                          Specifies the TSAP portion of the source
  382                          network address.
  383
  384                          See the K$TSAP macro in file K_ADDRESS_M.
  385                          */
  386                %K$TSAP (NAME=DST_TSAP,LVL=2,LAST=",");
  387                          /*K* DST_TSAP - Structure.
  388                          Specifies the TSAP portion of the destination
  389                          network address.
  390
  391                          See the K$TSAP macro in file K_ADDRESS_M.
  392                          */
  393                %K$NSAP (FPTN=SRC_NSAP,LVL=2,LAST=",");
  394                          /*K* SRC_NSAP - Structure.
  395                          Specifies the NSAP portion of the source
  396                          network address.
  397
  398                          See the K$NSAP macro in file K_ADDRESS_M.
  399                          */
  400                %K$NSAP (FPTN=DST_NSAP,LVL=2,LAST=";");
  401                          /*K* DST_NSAP - Structure.
  402                          Specifies the NSAP portion of the destination
  403                          network address.
  404
  405                          See the K$NSAP macro in file K_ADDRESS_M.
  406                          */
  407      %MEND;
15:03 JUL 28 '97 K_INTERFACE_M.:E05SI                                      12   
  408

