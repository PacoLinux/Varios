/*M* cdraw$alloc:h  -- dynamic memory management     */
 
#ifndef __CDRAW_ALLOC__
#define __CDRAW_ALLOC__
 
struct  alloc_struct   {
  struct alloc_struct *next;
  };
 
 
struct  alloc_descriptor  {
  struct   alloc_struct   *as_head;    /* Available entries        */
  int                      as_nallocs; /* number of malloc's done  */
  int                      as_crash;   /* crash if no memory avail */
  int                      as_inuse;   /* current blocks in use    */
  int                      as_maxuse;  /* maximum use count        */
  int                      as_asize;   /* malloc size              */
  int                      as_anum;    /* number of blocks mallocd */
  int                      as_step;    /* step to next block       */
  };
 
/* Initialize with:                                                */
 
#define INIT_alloc_descriptor(INCR, type, crash)   \
  {0,                  /* as_head    */\
   0,                  /* as_nallocs */\
   crash,              /* as_crash   */\
   0,                  /* as_inuse   */\
   0,                  /* as_maxuse  */\
   INCR*sizeof(type),  /* as_asize   */\
   INCR,               /* as_anum    */\
   sizeof(type)/sizeof(struct alloc_struct) \
  }
 
void *Allocator  ProToType( (struct alloc_descriptor *) );
void *Free ProToType( (struct alloc_descriptor *, void *) );
char *AllocString ProToType( (int, char *) );
 
 
#ifndef ALLOC_TEXT
#define ALLOC_TEXT 1024
#endif
 
#endif
