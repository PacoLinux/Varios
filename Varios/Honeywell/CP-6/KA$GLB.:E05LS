

14:44 JUL 28 '97 KA$GLB.:E05SI                                             1    
    1      /*M* KA$GLB Async handler based structure definitions */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /* Async handler context block definition */
    9
   10      %MACRO KA$CTX(NAME = KA$CTX, LVL = 1, LAST = ";", STCLASS = BASED);
   11      %LSET LISTDIR = '0'B;
   12      %LSET LISTEXP = '1'B;
   13      %LSET LISTCOM = '0'B;
   14      %LSET LISTSUB = '1'B;
   15      %LSET STC = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
   16      %LSET STC = BITBIN(STC = 'STA' OR STC = 'CON' OR STC = 'EXT');
   17      %IF STC = 1;
   18      %LSET INIT = CHARTEXT(' INIT');
   19      %LSET ENIT = CHARTEXT('');
   20      %ELSE;
   21      %LSET INIT = CHARTEXT('/*');
   22      %LSET ENIT = CHARTEXT('*/');
   23      %ENDIF;
   24      %LSET FEP = BITBIN(MODE_FEP);
   25      %LSET KA_DBLBYTALG = CHARTEXT(SUBSTR('HALIGNED', FEP));
   26      %LSET KA_FILBIT = CONCAT(BINCHAR(LVL+1), ' * BIT(1)', SUBSTR('INIT(''0''B)', 10-10*STC), ', ');
   27      %LSET KA_FILBIT = CHARTEXT(SUBSTR(KA_FILBIT, FEP*LENGTHC(KA_FILBIT)));
   28      %IF LVL = 1;
   29      DCL 1 NAME %KA_DBLBYTALG STCLASS,
   30      %ELSE;
   31      %(LVL) NAME,
   32      %ENDIF;
   33      %IF TEXTCHAR(STCLASS) = 'BASED' AND TEXTCHAR(NAME) = 'KA$CTX';
   34      %EQU KA_CTX = CHARTEXT('KV$PTR.VDI$->KV$VDI.USRCTX$->KA$CTX');
   35      %ENDIF;
   36
   37      /* Pointer to the virtual device interface context block (KV$VDI). */
14:44 JUL 28 '97 KA$GLB.:E05SI                                             2    
   38
   39            %(LVL+1) VDI$ PTR %KA_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
   40
   41      /* Output buffer head pointer */
   42
   43            %(LVL+1) OTPBFRHED$ PTR %KA_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
   44
   45      /* Output buffer: pointer to next buffer to IOLD */
   46
   47            %(LVL+1) OTPBFRNXTLOD$ PTR %KA_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
   48
   49      /* Output buffer tail pointer */
   50
   51            %(LVL+1) OTPBFRTAL$ PTR %KA_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
   52
   53      /* Input interrupt count */
   54
   55            %(LVL+1) INPINTCNT UBIN(%(36-4*BITBIN(MODE_FEP)))  %KA_DBLBYTALG %INIT(0)%ENIT,
   56
   57      /* Input: range on last IO (input range) */
   58
   59            %(LVL+1) INPRNG UBIN(%(18-2*BITBIN(MODE_FEP))) %KA_DBLBYTALG %INIT(0)%ENIT,
   60
   61      /* Output buffer byte count.  Total number of bytes consumed */
   62      /* by output buffers for this user, including buffer over-head. */
   63
   64            %(LVL+1) OTPBFRBYTCNT UBIN(%(18-2*BITBIN(MODE_FEP))) %KA_DBLBYTALG %INIT(0)%ENIT,
   65
   66      /* Output character count until halt for device flow control. */
   67
   68            %(LVL+1) OTPCHRCNTUTLHLT SBIN(%(18-2*BITBIN(MODE_FEP))) %KA_DBLBYTALG %INIT(0)%ENIT,
   69
   70      /* UTS of last clearing of INPCHRSNCUTS.  Used to switch in and out of */
   71      /* polled mode, and to distinguish real function keys from their composite */
   72      /* characters typed individually. */
   73
   74            %(LVL+1) LSTUTS UBIN(%(18-2*BITBIN(MODE_FEP))) %KA_DBLBYTALG %INIT(0)%ENIT,
14:44 JUL 28 '97 KA$GLB.:E05SI                                             3    
   75
   76      /* Output interrupt count */
   77
   78            %(LVL+1) OTPINTCNT UBIN(%(36-4*BITBIN(MODE_FEP)))  %KA_DBLBYTALG %INIT(0)%ENIT,
   79
   80      /* KV$VDH_DAT structure.  This structure is inserted into KA$CTX */
   81      /* for efficiency reasons; if it wasn't here, we would have to */
   82      /* initialize it for (almost) every input character, since */
   83      /* it describes the ASYNC input buffer which is usually processed */
   84      /* at the character level. */
   85
   86      %LSET NXTLVL = LVL+1;
   87      %KV$VDH_DAT (NAME=VDH_DAT, CNTFNCCHRS=YES, LVL=NXTLVL, STCLASS=STCLASS, LAST=",");
   88
   89      /* Input characters since UTS.  See UTS. */
   90
   91            %(LVL+1) INPCHRSNCUTS UBIN(%(18-2*BITBIN(MODE_FEP))) %KA_DBLBYTALG %INIT(0)%ENIT,
   92            %(LVL+1) * UBIN(%(18-2*BITBIN(MODE_FEP))) %KA_DBLBYTALG %INIT(0)%ENIT,
   93
   94      /* Polling chain link.  Link to another polled line's KA$CTX. */
   95
   96            %(LVL+1) POLLNK$ PTR %KA_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
   97
   98      /* Output halt flags; indexed by KA#HLTOTP_USRX (for */
   99      /* user halts such as ESC-H) or */
  100      /* KA#HLTOTP_DVCX (for device flow control halts). */
  101
  102      %KA_FILBIT
  103            %(LVL+1) HLTOTP,
  104      %LSET HLTOTPSIZ = 2;
  105              %(LVL+2) BITT(0:%(HLTOTPSIZ-1)) BIT(1) %INIT('0'B*0)%ENIT,
  106            %(LVL+1) HLTOTP_ALL REDEF HLTOTP BIT(%HLTOTPSIZ) UNAL,
  107
  108      /* Previous output buffer data exceeded (or equalled) small */
  109      /* buffer size. */
  110
  111            %(LVL+1) PRVOTPBFRDATEXCSML BIT(1) %INIT('0'B)%ENIT,
14:44 JUL 28 '97 KA$GLB.:E05SI                                             4    
  112
  113      /* Drop DTR (data-set-ready) pending.  We're dropped DTR, and */
  114      /* the clock has been set to time it.  It may have gone off. */
  115
  116            %(LVL+1) DRPDTRPND BIT(1) %INIT('0'B)%ENIT,
  117      /* A one minute clock has been set to log errors for this line */
  118      /* and/or to reset the counter for disconnect on errors */
  119      /* sEE KA_LINERRLOGLMT and KA_LINERRDSCLMT */
  120
  121            %(LVL+1) ERRCLKSET BIT(1) %INIT('0'B)%ENIT,
  122
  123            %(LVL+1) * BIT(3) %INIT('0'B)%ENIT,
  124      %KA_FILBIT
  125            %(LVL+1) LCTSTT,
  126
  127      /* Polled.  Input interrupts only for disconnect. */
  128
  129              %(LVL+2) PLD BIT(1) %INIT('0'B)%ENIT,
  130              %(LVL+2) * BIT(7) %INIT('0'B)%ENIT,
  131
  132      /* Halt output on next output buffer acquired. */
  133      /* Indexed like KA$CTX.HLTOTP_BIT. */
  134
  135      %KA_FILBIT
  136            %(LVL+1) HLTOTPNXTBFR,
  137              %(LVL+2) BITT(0:%(HLTOTPSIZ-1)) BIT(1) %INIT('0'B*0)%ENIT,
  138            %(LVL+1) HLTOTPNXTBFR_ALL REDEF HLTOTPNXTBFR BIT(%HLTOTPSIZ) UNAL,
  139
  140      /* ESC-H typed during input with no output. */
  141
  142            %(LVL+1) REDHLT BIT(1) %INIT('0'B)%ENIT,
  143
  144      /* Output data has been lost */
  145
  146            %(LVL+1) OTPDATLST BIT(1) %INIT('0'B)%ENIT,
  147
  148      /* Set device tabs. */
14:44 JUL 28 '97 KA$GLB.:E05SI                                             5    
  149
  150            %(LVL+1) SETDVCTAB BIT(1) %INIT('0'B)%ENIT,
  151
  152      /* Delete-output-pending.  Means we haven't seen the output interrupt
  153         for the buffers the MLCP had when we ASNRQSed a DLTOTP.  Prevents
  154         us from IOLDing any new buffers (like the one with the _ in it)
  155         until the MLCP isn't busy with the DLTOTP any more, because the
  156         status-scan takes a backseat to deferred interrupts in the MLCP. */
  157
  158            %(LVL+1) DLTOTPPND BIT(1) UNAL %INIT('0'B)%ENIT,
  159
  160      /* Asynchronous output halt; set if the comm line controller was */
  161      /* asynchronously told to halt, via the KA#ASNRQSHLTOTP/KAO$ASNRQSHLTOTP */
  162      /* mechanism. */
  163
  164            %(LVL+1) ASNHLTOTP BIT(1) %INIT('0'B)%ENIT,
  165
  166      /* RCV BFR growth pending.  The receive CCP was found waiting for a CCB,
  167         so instead of just reIOLDing the just-completed buffer half, a new,
  168         bigger buffer was allocated, using the just-completed buffer half to save
  169         its address and size, and its halves were IOLDed.  When the other half
  170         of the original buffer is completed, this flag will be reset, and the
  171         old buffer released.                                       */
  172
  173            %(LVL+1) BFRGRWPND BIT(1) %INIT('0'B)%ENIT,
  174
  175      %KA_FILBIT
  176            %(LVL+1) * BIT(8) %INIT('0'B)%ENIT,
  177
  178      /* Line error count.  Number of line errors */
  179      /* (parity and framing errors, and CLA over-runs) in */
  180      /* approximately the last minute.  */
  181      /* See KA_LINERRDSCLMT and KA_LINERRLOGLMT. */
  182
  183            %(LVL+1) LINERRCNT UBIN BYTE CALIGNED %INIT(0)%ENIT,
  184            %(LVL+1) *(0:2) BIT(8) %INIT('0'B*0)%ENIT LAST
  185      %MEND;
14:44 JUL 28 '97 KA$GLB.:E05SI                                             6    
  186      %EJECT;

14:44 JUL 28 '97 KA$GLB.:E05SI                                             7    
  187
  188      /* ASYNC HANDLER INPUT BUFFER ITEM DEFINITIONS. */
  189
  190      %MACRO KA$INPBFR(NAME = KA$INPBFR, LVL = 1, LAST = ";", STCLASS = BASED);
  191      %LSET LISTDIR = '0'B;
  192      %LSET LISTEXP = '1'B;
  193      %LSET LISTCOM = '0'B;
  194      %LSET LISTSUB = '1'B;
  195      %LSET STC = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  196      %LSET STC = BITBIN(STC = 'STA' OR STC = 'CON' OR STC = 'EXT');
  197      %IF STC = 1;
  198      %LSET INIT = CHARTEXT(' INIT');
  199      %LSET ENIT = CHARTEXT('');
  200      %ELSE;
  201      %LSET INIT = CHARTEXT('/*');
  202      %LSET ENIT = CHARTEXT('*/');
  203      %ENDIF;
  204      %LSET FEP = BITBIN(MODE_FEP);
  205      %LSET KA_DBLBYTALG = CHARTEXT(SUBSTR('HALIGNED', FEP));
  206      %LSET KA_FILBIT = CONCAT(BINCHAR(LVL+1), ' * BIT(1)', SUBSTR('INIT(''0''B)', 10-10*STC), ', ');
  207      %LSET KA_FILBIT = CHARTEXT(SUBSTR(KA_FILBIT, FEP*LENGTHC(KA_FILBIT)));
  208      %IF LVL = 1;
  209      DCL 1 NAME %KA_DBLBYTALG STCLASS,
  210      %ELSE;
  211      %(LVL) NAME,
  212      %ENDIF;
  213
  214      /* CHARACTERS IN THE INPUT BUFFER. */
  215
  216            %(LVL+1) CHR(0:0) UBIN BYTE CALIGNED %INIT(0*0)%ENIT LAST
  217      %MEND;
  218      %EJECT;

14:44 JUL 28 '97 KA$GLB.:E05SI                                             8    
  219
  220      /* ASYNC HANDLER OUTPUT BUFFER ITEM DEFINITIONS. */
  221
  222      %MACRO KA$OTPBFR(NAME = KA$OTPBFR, LVL = 1, LAST = ";", STCLASS = BASED);
  223      %LSET LISTDIR = '0'B;
  224      %LSET LISTEXP = '1'B;
  225      %LSET LISTCOM = '0'B;
  226      %LSET LISTSUB = '1'B;
  227      %LSET STC = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  228      %LSET STC = BITBIN(STC = 'STA' OR STC = 'CON' OR STC = 'EXT');
  229      %IF STC = 1;
  230      %LSET INIT = CHARTEXT(' INIT');
  231      %LSET ENIT = CHARTEXT('');
  232      %ELSE;
  233      %LSET INIT = CHARTEXT('/*');
  234      %LSET ENIT = CHARTEXT('*/');
  235      %ENDIF;
  236      %LSET FEP = BITBIN(MODE_FEP);
  237      %LSET KA_DBLBYTALG = CHARTEXT(SUBSTR('HALIGNED', FEP));
  238      %LSET KA_FILBIT = CONCAT(BINCHAR(LVL+1), ' * BIT(1)', SUBSTR('INIT(''0''B)', 10-10*STC), ', ');
  239      %LSET KA_FILBIT = CHARTEXT(SUBSTR(KA_FILBIT, FEP*LENGTHC(KA_FILBIT)));
  240      %IF LVL = 1;
  241      DCL 1 NAME %KA_DBLBYTALG STCLASS,
  242      %ELSE;
  243      %(LVL) NAME,
  244      %ENDIF;
  245
  246      /* LINK TO THE NEXT OUTPUT BUFFER IN THE CHAIN. */
  247
  248            %(LVL+1) LNK$ PTR %KA_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
  249
  250      /* OUTPUT HALT FLAGS; INDEXED LIKE KA$CTX.HLTOTP.BIT. */
  251      /* ANY BITS SET INDICATE WE SHOULD HALT OUTPUT SYNCHRONOUSLY WHEN THE */
  252      /* OUTPUT BUFFER IOLD ROUTINES ENCOUNTER THIS BUFFER. */
  253
  254      %KA_FILBIT
  255            %(LVL+1) HLTOTP,
14:44 JUL 28 '97 KA$GLB.:E05SI                                             9    
  256              %(LVL+2) BITT(0:%(KA#HLTOTP_HI_X-KA#HLTOTP_LOWX)) BIT(1) %INIT('0'B*0)%ENIT,
  257            %(LVL+1) HLTOTP_ALL REDEF HLTOTP BIT(%(KA#HLTOTP_HI_X-KA#HLTOTP_LOWX+1)) UNAL,
  258
  259      /* Byte size (of whole buffer), expressed as a base-2 log. */
  260
  261            %(LVL+1) BYTSIZLOG2 UBIN(4) UNAL %INIT(0)%ENIT,
  262
  263      /* BYTE COUNT (NUMBER OF DATA CHARACTERS IN THE BUFFER). */
  264
  265            %(LVL+1) BYTCNT UBIN(%(11-BITBIN(MODE_FEP))) UNAL %INIT(0)%ENIT,
  266
  267      /* NUMBER OF MARKERS (THEY ARE STORED AT THE BOTTOM OF THE BUFFER,
  268         IN REVERSE ORDER).  */
  269
  270      %KA_FILBIT
  271            %(LVL+1) NMBMRK UBIN(6) UNAL %INIT(0)%ENIT,
  272
  273      /*
  274         CRTCNF_IN_BFR. Flag to say CRTCNF is in this output buffer.
  275         If this buffer gets deleted, we will have to put this info
  276         in the next buffer.
  277      */
  278            %(LVL+1) CRTCNF_IN_BFR BIT(1) UNAL %INIT('0'B)%ENIT,
  279      /* CHARACTERS IN THE OUTPUT BUFFERS. */
  280
  281            %(LVL+1) CHR(0:0) UBIN BYTE CALIGNED %INIT(0*0)%ENIT LAST
  282
  283      %MEND;
  284      /**/
  285      /* ASYNC HANDLER BUFFER CONTROL (OUTPUT) STRING STRUCTURE. */
  286      /* This structure is used with the GAO$BFRCTRSTR routine. */
  287      /**/
  288      /**/
  289      %MACRO KA$BFRCTRSTR(FPTN=KA$BFRCTRSTR,LAST=";",STCLASS=BASED,
  290      FNC (CRTCNF=0,INHPRG=1,RPTCHR=2) = 2);
  291      %LSET LISTDIR='0'B;
  292      %LSET LISTEXP='1'B;
14:44 JUL 28 '97 KA$GLB.:E05SI                                             10   
  293      %LSET LISTCOM='0'B;
  294      %LSET LISTSUB='1'B;
  295      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  296      %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
  297      %LSET INIT=CHARTEXT(' INIT');
  298      %LSET ENIT=CHARTEXT('');
  299      %ELSE;
  300      %LSET INIT=CHARTEXT('/*');
  301      %LSET ENIT=CHARTEXT('*/');
  302      %ENDIF;
  303      DCL 1 FPTN STCLASS ALIGNED,
  304      /**/
  305            2 TXTSIZ   UBIN BYTE CALIGNED %INIT(0)%ENIT ,
  306      /* Text size (in bytes). */
  307      /**/
  308      %IF FNC=0 ;
  309            2 CRTCNF ,
  310              3 TXT1 UBIN BYTE CALIGNED %INIT(%KA#OTPCTRSTRCHR_BGN)%ENIT,
  311              3 TXT2 UBIN BYTE CALIGNED %INIT(%KA#OTPCTRSTRCHR_CRTCNF)%ENIT,
  312              3 PRT UBIN(3) UNAL %INIT(0)%ENIT,
  313              3 DC1DC3FLWCTR BIT(1) UNAL %INIT('0'B)%ENIT,
  314              3 LINSPD UBIN(4) UNAL %INIT(0)%ENIT,
  315              3 * UBIN BYTE CALIGNED %INIT(0)%ENIT,
  316            2 TXT(0:3) REDEF CRTCNF UBIN BYTE CALIGNED LAST
  317      %ELSEIF FNC=1 ;
  318      %LSET INIT_INHPRG = %KA#OTPCTRSTRCHR_INHPRG /     64;
  319            2 INHPRG,
  320              3 TXT1 UBIN BYTE CALIGNED %INIT(%KA#OTPCTRSTRCHR_BGN)%ENIT,
  321              3 XC0  UBIN(2) UNAL %INIT(%INIT_INHPRG)%ENIT,
  322              3 X3F  UBIN(6) UNAL %INIT(0)%ENIT,
  323              3 * UBIN BYTE CALIGNED %INIT(0)%ENIT,
  324              3 * UBIN BYTE CALIGNED %INIT(0)%ENIT,
  325            2 TXT(0:3) REDEF INHPRG UBIN BYTE CALIGNED LAST
  326      %ELSEIF FNC = 2;
  327            2 TXT(0:3) UBIN BYTE CALIGNED %INIT(0*0)%ENIT LAST
  328      /**/
  329      %ENDIF;
14:44 JUL 28 '97 KA$GLB.:E05SI                                             11   
  330      %MEND;
  331
  332
  333      /*F*
  334      NAME: KAC$CLCERRCHK
  335      PURPOSE: CHECK FOR ERRORS ON COMMUNICATIONS LINE CONTROLLER IO.               */
  336      /*                                                                            */
  337      /*                                                                            */
  338      /* THE STATUS BITS ARE:                                                       */
  339      /*                                                                            */
  340      /*               8000  RFU                                                    */
  341      /*K* INTCPU    - 4000  INTERRUPT MAIN MEMORY PROGRAM                          */
  342      /*K* DATSRVERR - 2000  DATA SERVICE ERROR                                     */
  343      /*K* CCBSTTCMP - 1000  CCB STATUS COMPLETE                                    */
  344      /*K* CCBSRVERR -  800  CCB SERVICE ERROR                                      */
  345      /*K* PRG1      -  400  FOR PROGRAMMING USE                                    */
  346      /*K* PRG2      -  200  FOR PROGRAMMING USE                                    */
  347      /*                100  RFU                                                    */
  348      /*                 80  RFU                                                    */
  349      /*K* DATCHKERR -   40  DATA CHECK ERROR                                       */
  350      /*K* CCBNNZRNG -   20  CCB NON-ZERO RANGE RESIDUE                             */
  351      /*K* STTCHN    -   10  DATASET OR COMMUNICATIONS-PAC STATUS CHANGE            */
  352      /*K* CRCMMRERR -    8  CORRECTED MEMORY ERROR                                 */
  353      /*K* INVMMRADR -    4  INVALID MEMORY ADDRESS                                 */
  354      /*K* BUSPRTERR -    2  MEGABUS PARITY ERROR                                   */
  355      /*K* UN_CRCMMRERR - 1  UNCORRECTED MEMORY ERROR                               */
  356      /*                                                                            */
  357      %MACRO KAC$CLCERRCHK(CCBSTT='0'X,
  358             INTCPU (YES='4000'X, NO='0'X) = '0'X,
  359             DATSRVERR (YES='2000'X, NO='0'X) = '0'X,
  360             CCBSTTCMP (YES='1000'X, NO='0'X) = '0'X,
  361             CCBSRVERR (YES='0800'X, NO='0'X) = '0'X,
  362             PRG1 (YES='0400'X, NO='0'X) = '0'X,
  363             PRG2 (YES='0200'X, NO='0'X) = '0'X,
  364             DATCHKERR (YES='0040'X, NO='0'X) = '0'X,
  365             CCBNNZRNG (YES='0020'X, NO='0'X) = '0'X,
  366             STTCHN (YES='0010'X, NO='0'X) = '0'X,
14:44 JUL 28 '97 KA$GLB.:E05SI                                             12   
  367             CRCMMRERR (YES='0008'X, NO='0'X) = '0'X,
  368             INVMMRADR (YES='0004'X, NO='0'X) = '0'X,
  369             BUSPRTERR (YES='0002'X, NO='0'X) = '0'X,
  370             UN_CRCMMRERR (YES='0001'X, NO='0'X) = '0'X);
  371      %LSET LISTSUB = '1'B;
  372      %SET MASK = INTCPU | DATSRVERR | CCBSTTCMP | CCBSRVERR | PRG1 |
  373                  PRG2 | DATCHKERR | CCBNNZRNG | STTCHN | CRCMMRERR |
  374                  INVMMRADR | BUSPRTERR | UN_CRCMMRERR;
  375              IF (CCBSTT & %MASK) THEN DO;
  376      /*                                                                            */
  377      /* WE HAVE AN ERROR CONDITION INDICATED.                                      */
  378      /* LOG THE ERROR.                                                             */
  379      /*                                                                            */
  380                 CALL KHD$ERRLOG_SETTERMID_CHN (FPT_WRSYSLOG_IO_ERR, %KH_CHN);
  381                 END;
  382      %MEND;

