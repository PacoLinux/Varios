VERSION E05

PL6.E3A0      #001=CPX$SORT File=CPX$SUBR.:E05TSI                                TUE 07/29/97 12:10 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6
        7        7        /*M*    CPX$SUBR        support subroutines for IBEX                          */
        8        8        /*X*    AND,DMC,IPC,IND=3,CTI=6,ECU=3,DCI=3,DTI=3                             */
        9        9        /*P*    NAME: CPX$DECBIN
       10       10                PURPOSE: To convert strings of DECIMAL digits to binary with checks   */
       11       11        /******************************************************************************/
       12       12        /*P*    NAME: CPX$SORT
       13       13                PURPOSE: To sort series of SBIN WORD numbers in ASCENDING order       */
       14       14        CPX$SORT: PROC (ARRAY,SIZE);
       15       15    1   DCL SIZE UBIN WORD;
       16       16    1   DCL ARRAY (0:0) SBIN WORD;
       17       17    1   DCL TEMP UBIN WORD AUTO;
       18       18    1   DCL JMAX UBIN WORD AUTO;
       19       19    1   DCL I UBIN WORD AUTO;
       20       20    1   DCL J UBIN WORD AUTO;
       21       21        /**/
       22       22    1           I = SIZE-1;
       23       23    1   LOOP:   JMAX = 0;
       24       24    2           DO J = 0 TO I;
       25       25    2              IF ARRAY (J) > ARRAY(J+1)
       26       26    2              THEN
       27       27    3                 DO; /* exchange */
       28       28    3                    TEMP = ARRAY(J+1);
       29       29    3                    ARRAY(J+1) = ARRAY(J);
       30       30    3                    ARRAY(J) = TEMP;
       31       31    3                    JMAX = J;
       32       32    3                 END;
       33       33    2           END;
       34       34    1           I = JMAX;
       35       35    1           IF I > 0
       36       36    1           THEN
       37       37    1              GOTO LOOP;
PL6.E3A0      #001=CPX$SORT File=CPX$SUBR.:E05TSI                                TUE 07/29/97 12:10 Page:2    
       38       38    1           ELSE
       39       39    1              RETURN;
       40       40    1   END CPX$SORT;
       41       41        %EOD;

PL6.E3A0      #001=CPX$SORT File=CPX$SUBR.:E05TSI                                TUE 07/29/97 12:10 Page:3    
      No diagnostics issued in procedure CPX$SORT.

   Procedure CPX$SORT requires 30 words for executable code.
   Procedure CPX$SORT requires 10 words of local(AUTO) storage.

PL6.E3A0      #001=CPX$SORT File=CPX$SUBR.:E05TSI                                TUE 07/29/97 12:10 Page:4    

 Object Unit name= CPX$SORT                                   File name= CPX$SUBR.:E05TOU
 UTS= JUL 29 '97 12:10:21.64 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    30     36  CPX$SORT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        2  CPX$SORT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
PL6.E3A0      #001=CPX$SORT File=CPX$SUBR.:E05TSI                                TUE 07/29/97 12:10 Page:5    


        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6
        7        7        /*M*    CPX$SUBR        support subroutines for IBEX                          */
        8        8        /*X*    AND,DMC,IPC,IND=3,CTI=6,ECU=3,DCI=3,DTI=3                             */
        9        9        /*P*    NAME: CPX$DECBIN
       10       10                PURPOSE: To convert strings of DECIMAL digits to binary with checks   */
       11       11        /******************************************************************************/
       12       12        /*P*    NAME: CPX$SORT
       13       13                PURPOSE: To sort series of SBIN WORD numbers in ASCENDING order       */
       14       14        CPX$SORT: PROC (ARRAY,SIZE);

     14  0 000000   000000 700200 xent  CPX$SORT     TSX0  ! X66_AUTO_2
         0 000001   000012 000002                    ZERO    10,2

       15       15    1   DCL SIZE UBIN WORD;
       16       16    1   DCL ARRAY (0:0) SBIN WORD;
       17       17    1   DCL TEMP UBIN WORD AUTO;
       18       18    1   DCL JMAX UBIN WORD AUTO;
       19       19    1   DCL I UBIN WORD AUTO;
       20       20    1   DCL J UBIN WORD AUTO;
       21       21        /**/
       22       22    1           I = SIZE-1;

     22  0 000002   200004 470500                    LDP0    @SIZE,,AUTO
         0 000003   000000 235100                    LDA     0,,PR0
         0 000004   000001 135007                    SBLA    1,DL
         0 000005   200007 755100                    STA     I,,AUTO

       23       23    1   LOOP:   JMAX = 0;

     23  0 000006   200006 450100       LOOP         STZ     JMAX,,AUTO

PL6.E3A0      #001=CPX$SORT File=CPX$SUBR.:E05TSI                                TUE 07/29/97 12:10 Page:6    
       24       24    2           DO J = 0 TO I;

     24  0 000007   200010 450100                    STZ     J,,AUTO
         0 000010   000027 710000 0                  TRA     s:33+3

       25       25    2              IF ARRAY (J) > ARRAY(J+1)

     25  0 000011   200003 470500                    LDP0    @ARRAY,,AUTO
         0 000012   200010 720100                    LXL0    J,,AUTO
         0 000013   000000 236110                    LDQ     0,X0,PR0
         0 000014   000001 116110                    CMPQ    1,X0,PR0
         0 000015   000024 604400 0                  TMOZ    s:33

       26       26    2              THEN
       27       27    3                 DO; /* exchange */

       28       28    3                    TEMP = ARRAY(J+1);

     28  0 000016   000001 235110                    LDA     1,X0,PR0
         0 000017   200005 755100                    STA     TEMP,,AUTO

       29       29    3                    ARRAY(J+1) = ARRAY(J);

     29  0 000020   000001 756110                    STQ     1,X0,PR0

       30       30    3                    ARRAY(J) = TEMP;

     30  0 000021   000000 755110                    STA     0,X0,PR0

       31       31    3                    JMAX = J;

     31  0 000022   200010 236100                    LDQ     J,,AUTO
         0 000023   200006 756100                    STQ     JMAX,,AUTO

       32       32    3                 END;

       33       33    2           END;
PL6.E3A0      #001=CPX$SORT File=CPX$SUBR.:E05TSI                                TUE 07/29/97 12:10 Page:7    

     33  0 000024   200010 235100                    LDA     J,,AUTO
         0 000025   000001 035007                    ADLA    1,DL
         0 000026   200010 755100                    STA     J,,AUTO
         0 000027   200007 236100                    LDQ     I,,AUTO
         0 000030   200010 116100                    CMPQ    J,,AUTO
         0 000031   000011 603000 0                  TRC     s:25

       34       34    1           I = JMAX;

     34  0 000032   200006 235100                    LDA     JMAX,,AUTO
         0 000033   200007 755100                    STA     I,,AUTO

       35       35    1           IF I > 0

     35  0 000034   000006 601000 0                  TNZ     LOOP

       36       36    1           THEN
       37       37    1              GOTO LOOP;
       38       38    1           ELSE
       39       39    1              RETURN;

     39  0 000035   000000 702200 xent               TSX2  ! X66_ARET
       40       40    1   END CPX$SORT;
       41       41        %EOD;

PL6.E3A0      #001=CPX$SORT File=CPX$SUBR.:E05TSI                                TUE 07/29/97 12:10 Page:8    
      No diagnostics issued in procedure CPX$SORT.
PL6.E3A0      #001=CPX$SORT File=CPX$SUBR.:E05TSI                                TUE 07/29/97 12:10 Page:9    

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @ARRAY                     4-0-0/w PTR         r     1 @SIZE
    *0-0-0/w SBIN        r     1 ARRAY(0:0)                 7-0-0/w UBIN        r     1 I
    10-0-0/w UBIN        r     1 J                          6-0-0/w UBIN        r     1 JMAX
    *0-0-0/w UBIN        r     1 SIZE                       5-0-0/w UBIN        r     1 TEMP


   Procedure CPX$SORT requires 30 words for executable code.
   Procedure CPX$SORT requires 10 words of local(AUTO) storage.
PL6.E3A0      #001=CPX$SORT File=CPX$SUBR.:E05TSI                                TUE 07/29/97 12:10 Page:10   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=CPX$SORT File=CPX$SUBR.:E05TSI                                TUE 07/29/97 12:10 Page:11   
          MINI XREF LISTING

ARRAY
        16**DCL        14--PROC       25>>IF         25>>IF         28>>ASSIGN     29<<ASSIGN     29>>ASSIGN
        30<<ASSIGN
I
        19**DCL        22<<ASSIGN     24>>DOINDEX    34<<ASSIGN     35>>IF
J
        20**DCL        24<<DOINDEX    25>>IF         25>>IF         28>>ASSIGN     29>>ASSIGN     29>>ASSIGN
        30>>ASSIGN     31>>ASSIGN
JMAX
        18**DCL        23<<ASSIGN     31<<ASSIGN     34>>ASSIGN
LOOP
        23**LABEL      37--GOTO
SIZE
        15**DCL        14--PROC       22>>ASSIGN
TEMP
        17**DCL        28<<ASSIGN     30>>ASSIGN

PL6.E3A0      #002=CPX$CONTEXT_ERR_UNWIND File=CPX$SUBR.:E05TSI                  TUE 07/29/97 12:10 Page:12   
       42        1        /*T***********************************************************/
       43        2        /*T*                                                         */
       44        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       45        4        /*T*                                                         */
       46        5        /*T***********************************************************/
       47        6        /*X*    AND,DMC,IPC,IND=3,CTI=6,ECU=3,DCI=3,DTI=3                             */
       48        7        /*P*    NAME: CPX$CONTEXT_ERR_UNWIND                                          */
       49        8        /*      PURPOSE: Due to a context error we need to UNWIND to a safe location. */
       50        9        /******************************************************************************/
       51       10        CPX$CONTEXT_ERR_UNWIND: PROC (P_PARAM);
       52       11        /***** include files *****/
       53       12          %INCLUDE CP_MACROS_C;
       54      764          %INCLUDE XU_MACRO_C;
       55     3870          %INCLUDE CP_SUBS_C;
       56     4787        /**/
       57     4788        /***** fpts *****/
       58     4789          %PARSE$PARAM (NAME=P_PARAM);
       59     4870          %U$PARAM (NAME=U$PARAM,STCLASS="BASED(P_PARAM.USER$)");
       60     4886        /**/
       61     4887        /***** Based structures *****/
       62     4888    1   DCL REMEM$VAR REMEMBER BASED;
       63     4889        /**/
       64     4890    1           IF U$PARAM.REMEM_CONTEXT_ERR$ ~= ADDR(NIL)
       65     4891    1           THEN
       66     4892    1              UNWIND TO U$PARAM.REMEM_CONTEXT_ERR$ -> REMEM$VAR;
       67     4893
       68     4894    1           RETURN;
       69     4895
       70     4896    1   END CPX$CONTEXT_ERR_UNWIND;

PL6.E3A0      #002=CPX$CONTEXT_ERR_UNWIND File=CPX$SUBR.:E05TSI                  TUE 07/29/97 12:10 Page:13   
--  Include file information  --

   CP_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure CPX$CONTEXT_ERR_UNWIND.

   Procedure CPX$CONTEXT_ERR_UNWIND requires 12 words for executable code.
   Procedure CPX$CONTEXT_ERR_UNWIND requires 4 words of local(AUTO) storage.

    No errors detected in file CPX$SUBR.:E05TSI    .

PL6.E3A0      #002=CPX$CONTEXT_ERR_UNWIND File=CPX$SUBR.:E05TSI                  TUE 07/29/97 12:10 Page:14   

 Object Unit name= CPX$CONTEXT_ERR_UNWIND                     File name= CPX$SUBR.:E05TOU
 UTS= JUL 29 '97 12:10:26.88 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    12     14  CPX$CONTEXT_ERR_UNWIND

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        1  CPX$CONTEXT_ERR_UNWIND

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AUNWIND
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #002=CPX$CONTEXT_ERR_UNWIND File=CPX$SUBR.:E05TSI                  TUE 07/29/97 12:10 Page:15   


       42        1        /*T***********************************************************/
       43        2        /*T*                                                         */
       44        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       45        4        /*T*                                                         */
       46        5        /*T***********************************************************/
       47        6        /*X*    AND,DMC,IPC,IND=3,CTI=6,ECU=3,DCI=3,DTI=3                             */
       48        7        /*P*    NAME: CPX$CONTEXT_ERR_UNWIND                                          */
       49        8        /*      PURPOSE: Due to a context error we need to UNWIND to a safe location. */
       50        9        /******************************************************************************/
       51       10        CPX$CONTEXT_ERR_UNWIND: PROC (P_PARAM);

     10  0 000000   000000 700200 xent  CPX$CONTEXT* TSX0  ! X66_AUTO_1
         0 000001   000004 000001                    ZERO    4,1

       52       11        /***** include files *****/
       53       12          %INCLUDE CP_MACROS_C;
       54      764          %INCLUDE XU_MACRO_C;
       55     3870          %INCLUDE CP_SUBS_C;
       56     4787        /**/
       57     4788        /***** fpts *****/
       58     4789          %PARSE$PARAM (NAME=P_PARAM);
       59     4870          %U$PARAM (NAME=U$PARAM,STCLASS="BASED(P_PARAM.USER$)");
       60     4886        /**/
       61     4887        /***** Based structures *****/
       62     4888    1   DCL REMEM$VAR REMEMBER BASED;
       63     4889        /**/
       64     4890    1           IF U$PARAM.REMEM_CONTEXT_ERR$ ~= ADDR(NIL)

   4890  0 000002   200003 470500                    LDP0    @P_PARAM,,AUTO
         0 000003   000006 471500                    LDP1    6,,PR0
         0 000004   100017 236100                    LDQ     15,,PR1
         0 000005   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000006   000013 600000 0                  TZE     s:4894

       65     4891    1           THEN
       66     4892    1              UNWIND TO U$PARAM.REMEM_CONTEXT_ERR$ -> REMEM$VAR;
PL6.E3A0      #002=CPX$CONTEXT_ERR_UNWIND File=CPX$SUBR.:E05TSI                  TUE 07/29/97 12:10 Page:16   

   4892  0 000007   100017 473500                    LDP3    15,,PR1
         0 000010   300000 237300                    LDAQ  ! 0,,PR3
         0 000011   000000 700200 xent               TSX0  ! X66_AUNWIND
         0 000012   000000 000200                    ZERO    0,128

       67     4893
       68     4894    1           RETURN;

   4894  0 000013   000000 702200 xent               TSX2  ! X66_ARET
       69     4895
       70     4896    1   END CPX$CONTEXT_ERR_UNWIND;

PL6.E3A0      #002=CPX$CONTEXT_ERR_UNWIND File=CPX$SUBR.:E05TSI                  TUE 07/29/97 12:10 Page:17   
--  Include file information  --

   CP_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure CPX$CONTEXT_ERR_UNWIND.
PL6.E3A0      #002=CPX$CONTEXT_ERR_UNWIND File=CPX$SUBR.:E05TSI                  TUE 07/29/97 12:10 Page:18   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @P_PARAM                  *0-0-0/w STRC(270)   r     1 P_PARAM

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d REMB        r     1 REMEM$VAR                  0-0-0/w STRC(576)   r     1 U$PARAM


   Procedure CPX$CONTEXT_ERR_UNWIND requires 12 words for executable code.
   Procedure CPX$CONTEXT_ERR_UNWIND requires 4 words of local(AUTO) storage.

    No errors detected in file CPX$SUBR.:E05TSI    .
PL6.E3A0      #002=CPX$CONTEXT_ERR_UNWIND File=CPX$SUBR.:E05TSI                  TUE 07/29/97 12:10 Page:19   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=CPX$CONTEXT_ERR_UNWIND File=CPX$SUBR.:E05TSI                  TUE 07/29/97 12:10 Page:20   
          MINI XREF LISTING

P_PARAM
      4808**DCL        10--PROC
P_PARAM.USER$
      4856**DCL      4871--IMP-PTR  4890>>IF       4892>>UNWIND
REMEM$VAR
      4888**DCL      4892>>UNWIND
U$PARAM.REMEM_CONTEXT_ERR$
      4884**DCL      4890>>IF       4892>>UNWIND
