.*M*
HELP file for: PRELINK.X
.*T*
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
.*A*                                                                           
PRELINK is a program which can be used to compress ("prelink") multiple object
units, producing a file which contains a single object unit.
.*B*
For further information on PRELINK, enter one of the following commands:
 
   !HELP (PRELINK.X) OVERVIEW
   !HELP (PRELINK.X) BACKGROUND
   !HELP (PRELINK.X) INVOCATION
   !HELP (PRELINK.X) LIBRARIES
   !HELP (PRELINK.X) OBJECT_UNITS
   !HELP (PRELINK.X) STRUCTURING
   !HELP (PRELINK.X) CHANGES
   !HELP (PRELINK.X) OWNER
 
For a complete description of PRELINK, enter the command:
 
   !LISTHELP.X PRELINK.X
.*K* XINDEX_ABSTRACT
TOOL=PRELINK
.*R*
A tool to make LEMUR-maintained libraries more efficient and compact.
.*K* XINDEX
PRELINK.X
.*R*
AID=PROGRAMMING
.*R*
AID=SYSTEM_PROGRAMMING
.*R*
AID=INTEGRATION
.*R*
LINKING
.*R*
.*K* OWNER
Pat Becker, LADC
.*K* CHANGES Changes changes
3/7/86 - Enhanced PRELINK to properly honor the "initialize memory to
zero" flag in input control sections (star #28554).  A side effect of this
change is that PRELINK now creates its output control sections entirely
"on demand";  it no longer automatically creates code / data / read-only
data sections on the assumption that they will be necessary.  This may
slightly reduce the amount of linker table space needed when linking
certain prelinked object unit files.
 
.*B*
10/16/84 - Fixed bug which could cause the use of external names longer than
31 characters (star 21075);  this would cause the linker to become acutely
ill.  Performance improvement:  external names will now be written into the
destination object unit only when they are actually used;  this cuts down on
the size of the external-names records, as the names of input-file control
sections will no longer be included in the output OU.
 
.*B*
4/30/84 - Fixed error handler to properly report error code and DCB.
.*K* BACKGROUND
A LEMUR library is a keyed file which contains one or more object units, plus a
set of "cross reference" records which identify the particular object unit
which contains each subroutine or entry point (entry definition, or "ENTDEF").
Each library contains quite a few records for each object unit;  for example, a
library consisting of 50 object units may contain over 1500 records.  When a
user requests (via the UNSAT option) that a particular LEMUR library be
searched for subroutines that the user's program needs, it is necessary for
LINK to read the library's cross-reference records, select the appropriate
object units, and then read and process each individual object unit (just as if
these object units were included in a file which was being directly !LINKed
into the run unit).
.*B*
Using LEMUR libraries (or any file or files containing object units) becomes a
slow and painful process whenever it is necessary to load a large number of
individual object units.  For example... a library of graphics subroutines may
contain several hundred individual object units, of which 100 or more may be
necessary for even the simplest graphics application.  Due to the structure of
CP-6 object units, there is a certain amount of overhead involved in loading
any object unit, regardless of its size;  it may (for example) require only 20%
more time and disk reads to load a 2k-word subroutine than is required to load
a 1k-word subroutine.  When it is necessary to load several dozen very small
subroutines, this overhead adds up very quickly, and the linking operation can
become painfully slow.
 
It is possible, in principle, to reduce the overhead somewhat by guaranteeing
that the linker performs the minimum amount of work needed for each object
unit.  Two tricks which can be used are:  (1) build the object-unit file or
LEMUR library without debug schema,  and (2) !COPY the object-unit file over
itself with the option (SPARE=1), thus guaranteeing that the file is
constructed in the most efficiently-accessible form.  These tricks can help
somewhat, but do nothing to resolve the underlying inefficiency of a
heavily-populated library.
.*K* OVERVIEW
The prelinker is a program which creates a new object unit, containing all of
the code, constants, data, and common blocks from a set of smaller object
units.  The prelinker combines the code from all input OUs into a single
control section, combines all static data, all constants, and consolidates
SYMREFs, ENTREFs, and so forth.  The resulting object unit is built with *big*
buffers, minimizing the number of records in the OU and thus the number of
M$READs that the linker must issue when loading the OU.  All entry definitions,
SYMDEFs, common blocks, etc. are placed in the output object unit with their
essential characteristics (name, type, size, calling sequence, initialized
data, etc.) intact;  their control section numbers and offsets are adjusted as
appropriate.
 
Note that this prelinking process is *very* different from the common practice
of using PCL or LEMUR to copy multiple OUs into a single file.  Combining
multiple object units in a single PCL-built file will reduce the number of
file-opening and -closing operations that the linker must perform, but will not
reduce the number of records that the linker must read from the file.
.*K* INVOCATION
The prelinker is accessed via the standard CP-6 processor invocation command:
 
   !PRELINK.X input_OU (ON|OVER) output_OU [, listing_destination]
 
The prelinker has no options.  All object units in the "input_OU" file are read
and combined into a single object unit, which is written to the file
"output_OU".  A list of the OUs processed, and a summary of the prelinking
results, is written to the "listing_destination" file or device.
 
WARNING - do *not* attempt to prelink several different input_OUs "INTO" a
single output_OU.  When generating a new object unit, the prelinker places its
output in a single "subroutine" whose name is the same as the output_OU file;
the names of the object units in the input_OU file are ignored.  Therefore, if
you prelink two different input_OUs into the same output_OU file, the second
object unit built by the prelinker will logically replace the first one.
.*K* LIBRARIES
Once you have prelinked a set of object units together, they will be treated as
a single larger object unit.  If the linker determines that a prelinked OU
contains a subroutine needed by the user, then the entire prelinked OU will be
loaded into the user's run unit.  Thus, it makes sense to prelink together
those routines which are always accessed as a unit, and to leave rarely-used
subroutines in the library as individual, non-prelinked object units.
 
The output of the prelinker is *not* a LEMUR library - it is an ordinary object
unit.  If you wish to prelink an entire LEMUR library into a single monolithic
package, you should first prelink the library onto a temporary file, and then
use LEMUR to copy this temporary file into a new LEMUR library.
 
The prelinker totally ignores debug schema and PLOVER (link-time patching)
records in the input object units.  Prelinked routines can be debugged under
DELTA at the GMAP-instruction level, if necessary.
.*K* OBJECT_UNITS
The prelinker can be used on normal object-unit files, as well as on object
units which are to be included in a LEMUR library.  This can be useful if you
have a set of subroutines which are rarely modified, and which are frequently
linked as a group into an existing application.  It may also be useful if
you are linking an extremely large program, and are running into problems
when the linker's dynamic memory area fills up.
.*K* STRUCTURING
When designing the prelinking layout of an object unit library, there are two
desirable goals which may tend to conflict:
 
1) Reduce to a minimum the amount of time (and the number of disk accesses)
   needed to load the set of subroutines needed by a user's program;
 
2) Keep the final memory size of each user's program to a minimum.
 
These two goals can be in conflict because of the "all or nothing"
characteristic of prelinked object units - each prelinked OU is included in a
run unit if *any* routine in the OU is needed by the program.
.*B*
There are thus two extremes to which one can go when setting up a prelinked
library:
 
a) Don't prelink anything.  Each subroutine will be included, or not
   included, as an individual;  no unnecessary subroutines will be loaded.
 
b) Prelink everything into one OU.  Every routine will be loaded if any
   routine is needed.
 
Approach (a) clearly minimizes memory usage.  If the average program using the
library needs a large fraction of the routines in the library, this approach
will tend to have the worst time and disk-access performance.  Approach (b)
maximizes memory usage;  it is time-efficient if most or all of the library is
needed by the average program, and may be less time-efficient than approach (a)
if the average program needs only a few library routines.
 
Clearly, a middle ground between these two approaches is probably most
appropriate for the majority of LEMUR-library applications.  The exact grouping
of routines (and thus the time/space tradeoff) must be determined for each
individual application, and may require a certain amount of fumbling around
through a series of "cut and try" approximations.
.*B*
I suggest the following set of steps:
 
1) Start out with a complete set of object units which must be placed
   into the library.
 
2) Select the "kernel" of the library - that set of subroutines which are
   used by most or all of the programs which will be accessing the library.
   Include in this kernel set (a) those routines called directly by the
   user, (b) any routines called by those in (a), and so forth - make the
   kernel as self-contained as possible.
 
3) Use PCL to COPY the kernel set of object units into a single temporary
   file.
 
4) Prelink the temporary file from step (3) into a file *KERNEL.
 
5) Use LEMUR to copy the *KERNEL file into a new (empty) LEMUR library.
.*B*
6) Select an "optional group" - a set of routines not included in the
   kernel, which are used by a reasonable fraction of the programs
   accessing the library.  Include any non-kernel routines which are
   not called directly by the user, but which are called by other
   routines in the optional group.
 
7) Repeat steps 3 through 5, prelinking the optional group and using LEMUR
   to copy the prelinked OU into the LEMUR library.  It may be useful
   to use a file name which describes the contents of the optional group
   (e.g., "*3D_GRAPHICS_PACKAGE" or "*HIDDEN_SURFACE_ELIMINATOR");  in
   any case, be sure to use a different name for each prelinked OU.
 
8) Repeat steps 6 and 7, selecting additional groups of optional routines,
   until you have prelinked the entire library, or have run out of
   reasonable ways to collect subroutines into meaningful groups.
.*B*
9) Use LEMUR to copy into the library any remaining routines which have
   not been prelinked.  Use the "(NODEBUG)" option, if your original
   object units contain any debug schema (unless, of course, you really
   need the schema and are willing to pay the price in additional CPU
   and disk-access overhead).
 
10) Use PCL to COPY the LEMUR library over itself (or to a new, final
    destination) with the option "(SPARE=1)".  This will compact the
    data and key layout of the file, and will ensure that the linker can
    read the library most efficiently.
 
If any routines in the library must be changed, or any new routines added, then
you should GO BACK TO STEP (1) AND START OVER!!  I strongly recommend against
replacing routines in LEMUR libraries - doing so can leave "trash" records in
the library, increasing the complexity of the key structure and slowing down
the linker.
.*B*
The process of "breaking up" a large LEMUR library into several sets of
interrelated subroutines can be partially automated, by making use of the
CP-6 linker's MAP option.  If you link a program which uses a LEMUR library,
and specify the MAP option, then the linker will produce a list of all
of the control sections which were loaded into the resulting run unit.
Each subroutine loaded from a LEMUR library will have at least one control
section, identified with its name.  The CP-6 editor can be used to extract
such a list of control section names, and convert it into a list of PCL or
LEMUR commands which can extract, combine, and/or delete the object units
from the LEMUR library.
.*X*
.*X*
