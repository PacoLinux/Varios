

12:27 AUG 20 '97 zb6$tables:h.:ZBC3TSI                                     1    
    1      /*D*
    2            NAME: ou$tables:h
    3            PURPOSE: This include file contains the structures and things
    4            that are needed in the building of constant, symbol and label
    5            tables.
    6      */
    7      /*    Hash tables used for searching/building label and symbol tables.
    8      */
    9      #define  SECTION_TYPE   1
   10      #define  ENTREF_TYPE   2
   11      #define  SYMREF_TYPE   3
   12      #define  CONS_TYPE     4
   13      #define  SEGID_TYPE    5
   14      #define  SEGREF_TYPE   6
   15      #define  FREF_TYPE    15
   16      /*    type of call for external o.u. record generation. */
   17      #define  STD_CALL  0
   18
   19      /* defs for storage class names... */
   20      #define GLOBAL_STATIC_STORAGE   1
   21      #define LOCAL_STATIC_STORAGE    2
   22      #define AUTO_STORAGE            3
   23      #define GLOBAL_STORAGE          4
   24
   25      #define  TXT_USE    0
   26      #define  CON_USE    1
   27      #define  ROM_USE    2
   28      #define  BSS_USE    3
   29
   30      #define  DEFED   1
   31      #define  REFED   2
   32
   33      #define  SYMREF   1
   34      #define  ENTREF   2
   35
   36      /*    The following are data defs for the types of data used in
   37            C programs..  */
12:27 AUG 20 '97 zb6$tables:h.:ZBC3TSI                                     2    
   38      #define POINTER_DATA_TYPE  13
   39      #define SBIN_DATA_TYPE      1
   40      #define SFLT_DATA_TYPE      3
   41      #define DFLT_DATA_TYPE      4
   42      #define CHAR_DATA_TYPE     21
   43      #define UBIN_DATA_TYPE     24
   44      #define STRUCTURE_DATA_TYPE     17
   45      #define LABEL_DATA_TYPE     15
   46      #define ENTRY_DATA_TYPE     16
   47
   48      /*    defines for debug execution stmt types. */
   49      #define CALL_STMT   2; /* CALL STMT  TYPE. */
   50
   51      /*    defs for defining the types of labels that we are using. */
   52      #define GLOBAL_STATIC_LBL   1
   53      #define LOCAL_LBL           2
   54      #define SYM_DEF_LBL         3
   55      #define SYM_REF_LBL         4
   56
   57
   58      extern int *label_hash[];
   59      extern int *symbol_hash[];
   60      extern int  c;  /* current character that is being evaluated. */
   61      extern FILE *infile;
   62      extern FILE *oufile;
   63      extern int oudcbnum;
   64      extern int *oudcbptr;
   65      extern int stmt_count;
   66
   67      /*    the following are type defs for symbol tables. */
   68      typedef struct sub_lbl_tbl *sub_lbl_tbl_p ;
   69      typedef struct line_tbl *line_tbl_p ;
   70      typedef struct sym_debug_tbl *sym_debug_tbl_p ;
   71      typedef struct sym_tbl *sym_tbl_p ;
   72      typedef struct constants *constants_p ;
   73      typedef struct forward_refs *forward_refs_p ;
   74      typedef struct labels *labels_p ;
12:27 AUG 20 '97 zb6$tables:h.:ZBC3TSI                                     3    
   75      typedef struct static_funcs *static_funcs_p ;
   76
   77      struct labels {
   78            labels_p next ;
   79            labels_p previous ;
   80            labels_p next_lbl_entry ;
   81            int offset ;
   82            int reloc_section ;
   83            int reloc_type ;
   84            int reloc_directive ;
   85            int lbl_type ;
   86            int ou_set_flag ;
   87            int hash_value ;
   88            int def_use;
   89            int deleted;
   90            double float_cons;
   91            int have_cons;
   92            forward_refs_p ref_thread ;
   93            unsigned defed  :1 ;
   94            unsigned refed  :1 ;
   95            char  lname[20] ;
   96            } ;
   97
   98
   99      struct forward_refs {
  100            forward_refs_p next ;
  101            int offset;
  102            int reloc_section;
  103            int reloc_type ;
  104            int reloc_directive ;
  105            };
  106
  107
  108      struct constants {
  109            constants_p next;
  110            int reloc_type ;
  111            int reloc_section ;
12:27 AUG 20 '97 zb6$tables:h.:ZBC3TSI                                     4    
  112            int reloc_directive ;
  113            int addr_offset ;
  114            int mode ;
  115            union  {
  116              int int_val;
  117              float real_val;
  118              double double_val;} uval;
  119            } ;
  120
  121
  122      /*    symbol table stuff..   */
  123      struct sym_tbl {
  124            sym_tbl_p next;
  125            sym_tbl_p previous ;
  126            sym_tbl_p next_sym_entry;
  127            int ou_set_flag; /* signals if ou entry for name is built.
  128                    mostly for symrefs and symrefs which are build multi times
  129                    multi function file compilations. Once for each function. */
  130            int hash_value ;
  131            int sym_class;
  132            int sym_type;
  133            int storage_class;
  134            int offset;
  135            int addr_type;
  136            int reloc_section;
  137            int reloc_type;
  138            int no_params;
  139            int no_param_words;
  140            int arg_checking ;
  141            int glo_static_flag ;
  142            int size_of_locals ;
  143            int def_use;
  144            int deleted;
  145            sym_debug_tbl_p debug;     /* link to debug info structure. */
  146            char name[40];
  147            char struct_name[40];
  148            };
12:27 AUG 20 '97 zb6$tables:h.:ZBC3TSI                                     5    
  149
  150      /*    debug infor structure */
  151      struct sym_debug_tbl {
  152            int line_no;
  153            int stmt_no;
  154            int level_no;
  155            int addr_type;
  156            int data_type;
  157            int size_bytes;
  158            int ele_size;
  159            int addr_byte;
  160            int starting_bit;
  161            int alignment;
  162            int array_rec_count;
  163            int array_rank ;
  164            int array_size;
  165            int array_info[20];
  166            };
  167      extern int *dfloat_ptr ;
  168      extern int *int_ptr ;
  169      extern int *hex_ptr ;
  170      extern int *string_ptr ;
  171      extern static_funcs_p static_p;
  172      extern int first_func_flag;
  173      extern char progname[];
  174
  175      /*    structure for line number table info for building debug
  176            schema.
  177      */
  178      struct line_tbl {
  179            line_tbl_p next;
  180            int line_no;
  181            int stmt_no;
  182            int label_flag;
  183            int stmt_type;
  184            sub_lbl_tbl_p sub_lbl_tbl_ptr;
  185            int addr_offset;
12:27 AUG 20 '97 zb6$tables:h.:ZBC3TSI                                     6    
  186            int section_no;
  187            int lbl_name_offset; } ;
  188
  189      struct sub_lbl_tbl {
  190            sub_lbl_tbl_p next;
  191            int sub_stmt_no;
  192            int lbl_name_offset;
  193            int stmt_type ; } ;
  194
  195      struct static_funcs {
  196            static_funcs_p next;
  197            int hash;
  198            union n_f {
  199              char name[40];
  200              unsigned int_name[8]; } name_field;
  201               } ;
  202
  203
  204      extern int next_log_blk_num[];
  205      extern int blk_count ;
  206      extern labels_p first_lbl_tbl_ptr;
  207      extern labels_p lbl_tbl_ptr;
  208      extern line_tbl_p line_tbl_ptr;
  209      extern sym_tbl_p sym_tbl_ptr;
  210      extern sym_tbl_p first_sym_tbl_ptr;
  211
  212      extern struct reloc_struct reloc[];

