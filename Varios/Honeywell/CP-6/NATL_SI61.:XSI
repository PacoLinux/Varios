/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
NATL: PROC MAIN;
 
      DCL LM_BUFFER                    CHAR(1)   STATIC;
      DCL M$LM                         DCB;
 
      DCL ME_BUFFER                    CHAR(80)  STATIC;
      DCL M$ME                         DCB;
 
      DCL ONE_PAGE                     CHAR(4096) STATIC;
 
      DCL PREFIX                       CHAR(0)   CONSTANT INIT ('?');
 
      DCL CU_FMT                       CHAR(0)   CONSTANT INIT
         ('Current language byte is ''%1A''');
 
      DCL SE_FMT                       CHAR(0)   CONSTANT INIT
         ('Syntax error in command line.');
 
      DCL NJ_FMT                       CHAR(0)   CONSTANT INIT
         ('You don''t have JIT priv, please run from :SYS');
 
      DCL NL_FMT                       CHAR(0)   CONSTANT INIT
         ('That language is not in the translation table.');
 
      DCL RE_FMT                       CHAR(0)   CONSTANT INIT
         ('Unexpected error while reading translation table.');
 
      DCL UE_FMT                       CHAR(0)   CONSTANT INIT
         ('Unexpected error while updating translation table.');
 
      DCL WE_FMT                       CHAR(0)   CONSTANT INIT
         ('You do not have the required privilege to update the translation table.');
 
      DCL NATL_                        BIT(36)   SYMREF;
      DCL B$JIT$                       PTR       SYMREF;
      DCL B$TCB$                       PTR       SYMREF;
 
      DCL X$PARSE                      ENTRY(1)  ALTRET;
 
      %INCLUDE CP_6;
      %INCLUDE CP_6_SUBS;
      %INCLUDE B_ERRORS_C;
      %INCLUDE B$JIT;
      %INCLUDE XU_MACRO_C;
      %INCLUDE XUF_ENTRY;
      %INCLUDE XU_FORMAT_C;
      %INCLUDE NATL_C61;
 
      %B$TCB;
      %B$ALT;
 
      %F_FDS (BUF=ME_BUFFER,
              DCB=M$ME);
 
      %P_PCB (R=NATL_,
              W=ONE_PAGE,
              WSZ=1024);
 
      %PARSE$OUT (STCLASS=BASED);
      %PARSE$SYM (STCLASS=BASED);
 
      %VLP_NAME (FPTN=LM_KEY,
                 LEN=32);
 
      %FPT_CLOSE (FPTN=LM_CLOSE,
                  DCB=M$LM);
 
      %FPT_OPEN (FPTN=LM_OPEN,
                 FUN=UPDATE,
                 DCB=M$LM);
 
      %FPT_READ (FPTN=LM_READ,
                 BUF=LM_BUFFER,
                 KEY=LM_KEY,
                 KEYS=YES,
                 DCB=M$LM);
 
      %FPT_WRITE (FPTN=LM_WRITE,
                  BUF=LM_BUFFER,
                  KEY=LM_KEY,
                  DCB=M$LM);
 
      %FPT_EXIT (FPTN=EXIT_ERROR,
                 STEPCC=4);
/*
**
**    Set up parse, and then parse ccbuf.
*/
      P_PCB.TEXT$ = ADDR(B$JIT.CCBUF);
      P_PCB.NCHARS = B$JIT.CCARS;
 
      CALL X$PARSE (P_PCB) ALTRET (ERR);
/*
**
**    If nothing on command line.
*/
      IF P_PCB.OUT$->OUT$BLK.NSUBLKS = 1 THEN
         DO;
            CALL X$WRITE (F_FDS, VECTOR(CU_FMT), VECTOR(B$JIT.LANG));
            CALL M$EXIT;
            END;
/*
**
**    What should we do?
*/
      IF P_PCB.OUT$->OUT$BLK.SUBLK$(1)->OUT$BLK.CODE = %CHAR1# THEN
         DO;
            IF P_PCB.OUT$->OUT$BLK.SUBLK$(1)->OUT$BLK.NSUBLKS = 1 THEN
/*
**
**             Just change B$JIT.LANG.
*/
               DO;
                  IF NOT (B$JIT.PRIV.ACTIVE & %PR_JIT#) THEN
                     DO;
                        CALL X$WRITE (F_FDS, VECTOR(NJ_FMT));
                        CALL M$EXIT (EXIT_ERROR);
                        END;
                  B$JIT.LANG = P_PCB.OUT$->OUT$BLK.SUBLK$(1)->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT;
                  END;
            ELSE
/*
**
**             Update translation table.
*/
               DO;
                  CALL CONCAT (LM_KEY.NAME#, PREFIX, P_PCB.OUT$->OUT$BLK.SUBLK$(1)->OUT$BLK.SUBLK$(1)->OUT$SYM.TEXT);
                  LM_KEY.L# = P_PCB.OUT$->OUT$BLK.SUBLK$(1)->OUT$BLK.SUBLK$(1)->OUT$SYM.COUNT + 1;
                  LM_BUFFER = P_PCB.OUT$->OUT$BLK.SUBLK$(1)->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT;
                  CALL M$CLOSE (LM_CLOSE) ALTRET (UE_ERR);
                  CALL M$OPEN (LM_OPEN) ALTRET (UE_ERR);
                  CALL M$WRITE (LM_WRITE) ALTRET (UE_ERR);
                  DO WHILE ('0'B);
UE_ERR:              CALL X$WRITE (F_FDS, VECTOR(UE_FMT));
                     CALL M$EXIT (EXIT_ERROR);
                     END;
                  END;
            END;
      ELSE
/*
**
**       Do translation, then change B$JIT.LANG.
*/
         DO;
            IF NOT (B$JIT.PRIV.ACTIVE & %PR_JIT#) THEN
               DO;
                  CALL X$WRITE (F_FDS, VECTOR(NJ_FMT));
                  CALL M$EXIT (EXIT_ERROR);
                  END;
            CALL CONCAT (LM_KEY.NAME#, PREFIX, P_PCB.OUT$->OUT$BLK.SUBLK$(1)->OUT$SYM.TEXT);
            LM_KEY.L# = P_PCB.OUT$->OUT$BLK.SUBLK$(1)->OUT$SYM.COUNT + 1;
            CALL M$READ (LM_READ)
               WHENALTRETURN DO;
                  IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# = %E$NOKEY THEN
                     DO;
                        CALL X$WRITE (F_FDS, VECTOR(NL_FMT));
                        CALL M$EXIT (EXIT_ERROR);
                        END;
                  ELSE;
                     DO;
                        CALL X$WRITE (F_FDS, VECTOR(RE_FMT));
                        CALL M$EXIT (EXIT_ERROR);
                        END;
                  END;
            B$JIT.LANG = LM_BUFFER;
            END;
/*
**
**    Done.
*/
      CALL M$EXIT;
/*
**
**    X$PARSE Altrets.
*/
ERR:  CALL X$WRITE (F_FDS, VECTOR(SE_FMT));
      CALL M$EXIT (EXIT_ERROR);
 
END NATL;
