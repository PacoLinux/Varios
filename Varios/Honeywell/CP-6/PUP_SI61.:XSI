/*M* PUP - PATCH UTILITY PROGRAM */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*P*    NAME: PUP
*/
PUP: PROC MAIN;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE B_ERRORS_C;
%F$DCB;
/**/
DCL M$SI DCB;
DCL M$IN DCB;
DCL M$LO DCB;
DCL F$UO DCB;
DCL XSA$OPEN ENTRY(2) ALTRET;
DCL XSA$CLOSE ENTRY(2) ALTRET;
DCL XSA$READ ENTRY(2) ALTRET;
DCL XSA$WRITE ENTRY(2) ALTRET;
DCL XSA$PFIL ENTRY(2) ALTRET;
DCL XSA$PRECORD ENTRY(2) ALTRET;
DCL X$PARSE ENTRY(1) ALTRET;
DCL SUB$UTS ENTRY(4);
DCL PMGRUNT ENTRY(7) ALTRET;
DCL FIND$STAR ENTRY(1) ALTRET;
DCL INT_PROC ENTRY ASYNC;
%MACRO WRITEUO;
     CALL M$WRITE(WRITEUO) WHENALTRETURN DO;
        END;
%MEND;
DCL B$TCB$ PTR SYMREF;
%B$TCB(STCLASS="BASED(B$TCB$)");
%B$ALT;
DCL B$JIT$ PTR SYMREF;
%INCLUDE B$JIT;
%INCLUDE XS_MACRO_C;
%INCLUDE XU_MACRO_C;
 
%INCLUDE ZL_MACRO_C;
 
DCL PARSE_WORK               CHAR(1024) STATIC;
DCL BLOCK UBIN;
%P_PCB(T=INPUT,
         R=COMMAND,
         W=PARSE_WORK,
         WSZ=256,
         N#=256);                       /* PARSE CONTOL BLOCK                 */
%PARSE$SYM(NAME=OUTSYM,
         STCLASS=BASED);                /* FOR SYMBOLS AND DELIM STRINGS      */
%PARSE$OUT(NAME=OUTBLK,
         STCLASS=BASED);                /* FOR OUTPUT BLOCKS                  */
 
%SUB QUIT# = 1;
%SUB END# = 2;
%SUB DEL# = 3;
%SUB REM# = 5;
%SUB LIS# = 6;
%SUB INS# = 4;
%SUB STD# = 7;
%SUB PAT# = 8;
%SUB PLOVER# = 12;
%SUB SHORT# = 13;
%SUB NSHORT# = 14;
/**/
DCL I SBIN STATIC;
DCL J SBIN STATIC;
DCL U SBIN STATIC;
DCL Y SBIN STATIC;
DCL K SBIN STATIC;
DCL L SBIN STATIC;
DCL M SBIN STATIC;
DCL M$SI$ PTR STATIC;
DCL SKIPPING SBIN STATIC;
DCL SINRECS UBIN STATIC;
/**/
DCL BLOK(0:10) CHAR(60) STATIC;
DCL COMMAND UBIN SYMREF;
DCL INPUT CHAR(256) STATIC SYMDEF;
DCL SIBUF CHAR(256) STATIC;
DCL NULL_BUF CHAR(80) STATIC;
DCL LOBUF CHAR(256) STATIC;
DCL SIARS SBIN STATIC;
DCL SIBUF$ PTR CONSTANT INIT(ADDR(SIBUF));
DCL BASEDBUF CHAR(SIARS)BASED(SIBUF$);
DCL UTSTD CHAR(60);
DCL PATCHFID CHAR(60);
DCL DATE CHAR(8) STATIC;
DCL TIME CHAR(11) STATIC;
DCL TUTS CHAR(60);
DCL UTS CHAR(60);
DCL RUMUTS CHAR(60);
DCL RUMPROC CHAR(30);
DCL OUTPUT CHAR(257) STATIC SYMDEF;
DCL VERS CHAR(6);
DCL NRECS CHAR(6);
DCL NEWSTAR CHAR(10);
DCL STAR CHAR(10);
DCL PROCC CHAR(31);
DCL PROCNAME CHAR(31);
DCL TEMPNAME CHAR(31);
DCL OUNAME CHAR(31);
DCL OLDSTAR CHAR(10);
DCL LASTSTAR CHAR(10);
DCL LOCAL BIT(1) STATIC SYMDEF INIT('0'B);
DCL DEL_FLAG BIT(1);
DCL REM_FLAG BIT(1);
DCL SHORT_FLAG BIT(1);
DCL STAR_ONLY BIT(1);
DCL BBLOCK CHAR(4096) STATIC ;
DCL KLOCK CHAR(1024) STATIC ;
%FPT_WRITE (FPTN=WRITEUO, DCB=F$UO,BUF=UOBUF,STCLASS="STATIC SYMDEF");
%XSA_PARAM(FPTN=XSA$PARAM,BBUF=BBLOCK,KBUF=KLOCK,STCLASS=STATIC );
%FPT_INT (UENTRY=INT_PROC);
DCL UOBUF CHAR(256) STATIC SYMDEF;
%FPT_TIME(FPTN=DELETETIME,DATE=DATE,TIME=TIME,DEST=LOCAL);
%FPT_READ(DCB=M$SI,STCLASS=STATIC,BUF=SIBUF,FPTN=READSI);
%FPT_WRITE(DCB=M$SI,STCLASS=STATIC,BUF=NULL_BUF,REWRITE=YES,FPTN=WRITESI);
%FPT_READ(FPTN=READIN,BUF=INPUT,DCB=M$IN,STCLASS=STATIC SYMDEF);
%FPT_DELREC(FPTN=DELRECSI,DCB=M$SI,STCLASS=STATIC);
%FPT_PFIL(FPTN=PFILSI,BOF=YES,DCB=M$SI);
%FPT_PRECORD(FPTN=PRECORDSI,N=-2,DCB=M$SI);
%FPT_WRITE(FPTN=WRITELO,DCB=M$LO,STCLASS=STATIC,BUF=LOBUF);
%FPT_OPEN(FPTN=OPENSI,DCB=M$SI,FUN=UPDATE,ORG=CONSEC,ASN=FILE,
  WSN=VLP_WSN,
  SN=VLP_SN,
  NAME=VLP_NAME,
  ACCT=VLP_ACCT,
  PASS=VLP_PASS);
%FPT_CLOSE(FPTN=CLOSESI,DCB=M$SI,STCLASS=STATIC,DISP=SAVE);
 
 
%FPT_FID(FPTN=FPT_FID,
         STCLASS=STATIC,
         ACCT=VLP_ACCT,
         ASN=FID_ASN,
         NAME=VLP_NAME,
         PASS=VLP_PASS,
         RES=FID_RES,
         RESULTS=VLR_FID,
         SN=VLP_SN,
         TEXTFID=FID,
         WSN=VLP_WSN);
 
 
%VLP_WSN(FPTN=VLP_WSN);
%VLP_SN(FPTN=VLP_SN);
%VLR_FID(FPTN=VLR_FID);
%VLP_PASS(FPTN=VLP_PASS);
%VLP_NAME(FPTN=VLP_NAME);
%VLP_ACCT(FPTN=VLP_ACCT);
DCL FID_RES CHAR(4) STATIC;
DCL FID_ASN UBIN(9) STATIC ALIGNED;
DCL FID CHAR(60) STATIC;
DCL 1 CTABLE CALIGNED STATIC SYMDEF,
      2 C (0:5000) CHAR(80) CALIGNED INIT(' ');
DCL CTABLESIZE UBIN STATIC INIT(0);
DCL STABLESIZE UBIN SYMREF;
DCL CIX UBIN;
 
/**/
%EJECT;
        CALL M$INT(FPT_INT);
        CALL M$TIME(DELETETIME);
        UTSTD=' ';
        FID=' ';
        PATCHFID=' ';
        CALL INDEX (I, ' ', B$JIT.CCBUF);
        DO WHILE ((I < 80 AND SUBSTR (B$JIT.CCBUF, I, 1) = ' '));
           I = I + 1;
           END;
 
        IF (I < 80)
        THEN DO;
        CALL INDEX (K, ',', B$JIT.CCBUF);
        IF (K < 80)
        THEN DO;
        J = K;
        PATCHFID = SUBSTR(B$JIT.CCBUF,I,J-I);
        DO UNTIL (SUBSTR (B$JIT.CCBUF, J, 1) = ' ');
           J = J + 1;
           END;
        K=K+1;
        UTSTD = SUBSTR(B$JIT.CCBUF,K,J-K);
        END;
        ELSE DO;
        CALL INDEX (K, ' ', B$JIT.CCBUF);
        PATCHFID = SUBSTR(B$JIT.CCBUF,I,K-I);
        END;
        IF PATCHFID ~= ' ' THEN DO;
        FID = PATCHFID;
        CALL M$FID(FPT_FID);
        CALL XSA$OPEN(OPENSI,XSA$PARAM) ALTRET(BADOPEN);
        END;
        END;
        SHORT_FLAG='0'B;
        M$SI$=DCBADDR(DCBNUM(M$SI));
 
OVER1:  DO WHILE('1'B);
 
           LOCAL = '0'B;
           DEL_FLAG = '0'B;
           REM_FLAG = '0'B;
           STAR_ONLY = '0'B;
           CALL READIN ALTRET(OVER2);;
           IF DCBADDR(DCBNUM(M$IN))->F$DCB.ARS# = 0 THEN GOTO OVER1;
OVER2:;
 
           P_PCB.NCHARS=DCBADDR(DCBNUM(M$IN))->F$DCB.ARS#;
           CALL X$PARSE(P_PCB) ALTRET(SYNTAX0);
           BLOCK=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.CODE;
 
           DO CASE(BLOCK);
 
 
            CASE(QUIT#,END#);
 
              RETURN;
 
            CASE(SHORT#);
 
        IF M$SI$->F$DCB.ASN# ~= %FILE# THEN DO;
              LOBUF='No patch file specified';
              CALL M$WRITE(WRITELO);
              GOTO OVER1;
              END;
              SHORT_FLAG = '1'B;
              CALL LOAD;
 
            CASE(NSHORT#);
 
              SHORT_FLAG = '0'B;
              CTABLESIZE=0;
 
            CASE(STD#);
 
              UTSTD=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.TEXT;
              STABLESIZE=0;
 
            CASE(PAT#);
 
              FID=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.TEXT;
              PATCHFID=FID;
              CALL M$FID(FPT_FID);
              CALL XSA$OPEN(OPENSI,XSA$PARAM) ALTRET(PATERR);
              DO WHILE ('0'B);
PATERR:;
              IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# = %E$DCBOPEN THEN DO;
              CALL XSA$CLOSE(CLOSESI,XSA$PARAM);
              CALL XSA$OPEN(OPENSI,XSA$PARAM) ALTRET(BADOPEN);
              END;
              ELSE GOTO BADOPEN;
              END;
 
            CASE(LIS#);
           IF P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.NSUBLKS>0 THEN GOTO DONTASK;
              IF CTABLESIZE ~= 0 THEN SHORT_FLAG = '1'B;
ASK:;
              UOBUF = 'Enter product (or M:MON for XDEL patches.)';
              %WRITEUO;
              CALL READIN ALTRET(OVER2);;
              IF DCBADDR(DCBNUM(M$IN))->F$DCB.ARS#=0 THEN DO;
              UOBUF = 'Tell me the product - or Q to quit list.';
              %WRITEUO;
              GOTO ASK;
              END;
              ELSE PROCNAME=INPUT;
              IF SUBSTR(INPUT,0,2)='Q ' THEN GOTO OVER1;
              UOBUF = 'Enter ouname (if plover) or CR';
              %WRITEUO;
              CALL READIN ALTRET(OVER2);;
              IF DCBADDR(DCBNUM(M$IN))->F$DCB.ARS#=0 THEN OUNAME=' ';
              ELSE OUNAME=INPUT;
              UOBUF = 'Enter version or CR';
              %WRITEUO;
              CALL READIN ALTRET(OVER2);;
              IF DCBADDR(DCBNUM(M$IN))->F$DCB.ARS#=0 THEN VERS=' ';
              ELSE VERS=INPUT;
              IF VERS = ' ' AND OUNAME ~= ' ' THEN DO;
              UOBUF = 'OUNAME must have a version.';
              %WRITEUO;
              GOTO OVER1;
              END;
              UOBUF = 'Enter star# or CR';
              %WRITEUO;
              CALL READIN ALTRET(OVER2);;
              IF DCBADDR(DCBNUM(M$IN))->F$DCB.ARS#=0 THEN STAR=' ';
              ELSE CALL CONCAT(STAR,'#',SUBSTR(INPUT,0,9));
              IF OUNAME~=' ' THEN DO;
              CALL SEARCH_PLOVERS(PROCNAME,OUNAME,VERS,STAR) ALTRET(OVER1);
              GOTO OVER1;
              END;
              ELSE DO;
              CALL SEARCH_RUMS_MON(PROCNAME,VERS,STAR) ALTRET(OVER1);
              IF SINRECS>0 THEN GOTO OVER1;
              IF SINRECS=0 AND PROCNAME~='M:MON' THEN DO;
              CALL SEARCH_PLOVERS(PROCNAME,OUNAME,VERS,STAR) ALTRET(OVER1);
              END;
              END;
 
            CASE(DEL#,REM#);
              DEL_FLAG = '1'B;
              IF BLOCK=REM# THEN REM_FLAG = '1'B; ELSE REM_FLAG='0'B;
              SHORT_FLAG = '0'B;
ASKDEL:;
              UOBUF = 'Enter product (or M:MON for XDEL patches.)';
              %WRITEUO;
              CALL READIN ALTRET(OVER2);;
              IF DCBADDR(DCBNUM(M$IN))->F$DCB.ARS#=0 THEN DO;
              UOBUF = 'Tell me the product - or Q to quit delete.';
              %WRITEUO;
              GOTO ASKDEL;
              END;
              ELSE PROCNAME=INPUT;
              IF SUBSTR(INPUT,0,2)='Q ' THEN GOTO OVER1;
              UOBUF = 'Enter ouname (if plover) - CR will delete patch(es) from all OUs';
              %WRITEUO;
              CALL READIN ALTRET(OVER2);;
              IF DCBADDR(DCBNUM(M$IN))->F$DCB.ARS#=0 THEN OUNAME=' ';
              ELSE OUNAME=INPUT;
              UOBUF = 'Enter version - CR will delete patch(es) from all versions';
              %WRITEUO;
              CALL READIN ALTRET(OVER2);;
              IF DCBADDR(DCBNUM(M$IN))->F$DCB.ARS#=0 THEN VERS=' ';
              ELSE VERS=INPUT;
              IF VERS = ' ' AND OUNAME ~= ' ' THEN DO;
              UOBUF = 'OUNAME must have a version.';
              %WRITEUO;
              GOTO OVER1;
              END;
              UOBUF = 'Enter star# - CR will delete all found';
              %WRITEUO;
              CALL READIN ALTRET(OVER2);;
              IF DCBADDR(DCBNUM(M$IN))->F$DCB.ARS#=0 THEN STAR=' ';
              ELSE CALL CONCAT(STAR,'#',SUBSTR(INPUT,0,9));
              IF STAR=' ' THEN DO;
              UOBUF='Delete all patches for this product - Yes or No?';
              %WRITEUO;
              CALL READIN ALTRET(OVER2);;
              IF SUBSTR(INPUT,0,3)~='YES ' THEN GOTO OVER1;
              END;
              IF OUNAME~=' ' THEN DO;
              CALL SEARCH_PLOVERS(PROCNAME,OUNAME,VERS,STAR) ALTRET(OVER1);
              IF SINRECS>0 THEN CALL CLEANUP('P');
              GOTO OVER1;
              END;
              ELSE DO;
              CALL SEARCH_RUMS_MON(PROCNAME,VERS,STAR) ALTRET(OVER1);
              IF SINRECS>0 THEN DO;CALL CLEANUP('R');GOTO OVER1;END;
              IF SINRECS=0 AND PROCNAME~='M:MON' THEN DO;
              CALL SEARCH_PLOVERS(PROCNAME,OUNAME,VERS,STAR) ALTRET(OVER1);
              IF SINRECS>0 THEN CALL CLEANUP('P');
              END;
              END;
 
 
            CASE(INS#);
ASKPROD:;
              UOBUF = 'Enter product (or M:MON for XDEL patch.)';
              %WRITEUO;
              CALL READIN ALTRET(OVER2);;
              IF DCBADDR(DCBNUM(M$IN))->F$DCB.ARS#=0 THEN DO;
              UOBUF = 'Tell me the product - or Q to quit.';
              %WRITEUO;
              GOTO ASKPROD;
              END;
              ELSE PROCNAME=INPUT;
              IF SUBSTR(INPUT,0,2)='Q ' THEN GOTO OVER1;
              UOBUF = 'Enter ouname (if plover)';
              %WRITEUO;
              CALL READIN ALTRET(OVER2);;
              IF DCBADDR(DCBNUM(M$IN))->F$DCB.ARS#=0 THEN OUNAME=' ';
              ELSE OUNAME=INPUT;
ASKVERS:;
              UOBUF = 'Enter version';
              %WRITEUO;
              CALL READIN ALTRET(OVER2);;
              IF DCBADDR(DCBNUM(M$IN))->F$DCB.ARS#=0 THEN DO;
              UOBUF = 'Tell me the version - or Q to quit.';
              %WRITEUO;
              GOTO ASKVERS;
              END;
              ELSE VERS=INPUT;
              IF SUBSTR(INPUT,0,2)='Q ' THEN GOTO OVER1;
ASKSTAR:;
              UOBUF = 'Enter star#';
              %WRITEUO;
              CALL READIN ALTRET(OVER2);;
              IF DCBADDR(DCBNUM(M$IN))->F$DCB.ARS#=0 THEN DO;
              UOBUF = 'Tell me the star - or Q to quit.';
              %WRITEUO;
              GOTO ASKSTAR;
              END;
              ELSE STAR=INPUT;
              IF SUBSTR(INPUT,0,2)='Q ' THEN GOTO OVER1;
              CALL XSA$CLOSE(CLOSESI,XSA$PARAM) ALTRET(GOON);
GOON:;
              IF UTSTD=' ' THEN UTSTD = ':UTS_STD.SUPPORT';
ASKTEMP:;
              UOBUF = 'Enter template file for pmerge to use';
              %WRITEUO;
              CALL READIN ALTRET(OVER2);;
              IF DCBADDR(DCBNUM(M$IN))->F$DCB.ARS#=0 THEN DO;
              UOBUF = 'Tell me the template - or Q to quit.';
              %WRITEUO;
              GOTO ASKTEMP;
              END;
              ELSE TEMPNAME=INPUT;
              IF SUBSTR(INPUT,0,2)='Q ' THEN GOTO OVER1;
              CALL PMGRUNT(PROCNAME,OUNAME,VERS,STAR,PATCHFID,UTSTD,TEMPNAME) ALTRET(BADINS);
 
        DO WHILE('0'B);
BADINS:;
              LOBUF='PMERGE failed to insert patch.';
              CALL M$WRITE(WRITELO);
              END;
              CALL M$FID(FPT_FID);
              CALL XSA$OPEN(OPENSI,XSA$PARAM) ALTRET(SIERR);
              DO WHILE ('0'B);
SIERR:;
              IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# = %E$DCBOPEN THEN DO;
              CALL XSA$CLOSE(CLOSESI,XSA$PARAM);
              CALL XSA$OPEN(OPENSI,XSA$PARAM) ALTRET(BADOPEN);
              END;
              ELSE GOTO BADOPEN;
              END;
 
            CASE(ELSE);
 
            END;
 
 
           END;
 
DONTASK:;
              STAR=' ';
              OUNAME=' ';
              VERS=' ';
              DEL_FLAG='0'B;
              IF CTABLESIZE ~= 0 THEN SHORT_FLAG = '1'B;
              IF SUBSTR(P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.TEXT,0,1)='#' THEN DO;
              INPUT =  P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.TEXT;
              GOTO SYNTAX0;
              END;
              IF P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.NSUBLKS>1 THEN DO;
              PROCNAME=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.TEXT;
              OUNAME=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(1)->OUTSYM.TEXT;
              CALL SEARCH_PLOVERS(PROCNAME,OUNAME,VERS,STAR) ALTRET(OVER1);
               GOTO OVER1;
              END;
              ELSE DO;
              PROCNAME=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.TEXT;
              CALL SEARCH_RUMS_MON(PROCNAME,VERS,STAR) ALTRET(OVER1);
              IF SINRECS=0 AND SUBSTR(PROCNAME,0,5)~='M:MON' THEN
              CALL SEARCH_PLOVERS(PROCNAME,OUNAME,VERS,STAR) ALTRET(OVER1);
               GOTO OVER1;
              END;
 
SYNTAX0:;
        IF SUBSTR(INPUT,0,1)='#' THEN DO;
        DEL_FLAG='0'B;
        IF CTABLESIZE ~= 0 THEN SHORT_FLAG = '1'B;
        STAR=INPUT;
        CALL CONCAT(INPUT,'          ',STAR);
        CALL FIND$STAR(STAR) ALTRET(SYNTAX1);
        CALL SEARCH_ALL(STAR) ALTRET(OVER1);
         GOTO OVER1;
        END;
SYNTAX1:;
        LOBUF = 'syntax error';
        CALL M$WRITE(WRITELO);
        GOTO OVER1;
 
 
BADOPEN:;
        CALL CONCAT(LOBUF,'Unable to open ',FID);
        CALL M$WRITE(WRITELO);
        GOTO OVER1;
 
READIN: PROC ALTRET;
 
        IF LOCAL THEN DO;LOCAL='0'B;ALTRETURN;END;
        INPUT=' ';
        CALL M$READ(READIN) WHENALTRETURN DO;ALTRETURN;END;
        IF LOCAL THEN DO;LOCAL='0'B;ALTRETURN;END;
        RETURN;
        END;
 
%EJECT;
SEARCH_RUMS_MON: PROC(PROCNAME#,VERS#,STAR#) ALTRET;
DCL PROCNAME CHAR(31);
DCL PROCNAME# CHAR(31);
DCL VERS CHAR(6);
DCL VERS# CHAR(6);
DCL STAR CHAR(10);
DCL STAR# CHAR(10);
DCL OUNAME CHAR(31);
        CIX=0;
        TUTS=VERS#;
        STAR=STAR#;
        VERS=VERS#;
        PROCNAME=PROCNAME#;
        SINRECS=0;
        IF P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.NSUBLKS>0 THEN CALL GET_SEARCH_KEYS;
        IF UTSTD=' ' THEN UTSTD = ':UTS_STD.SUPPORT';
        IF TUTS~=' ' AND PROCNAME ~= 'M:MON' THEN DO;
        CALL SUB$UTS(UTSTD,PROCNAME,TUTS,'0'B);
        IF SUBSTR(TUTS,7,1)=' ' AND PROCNAME ~= 'M:MON' THEN DO;
        CALL CONCAT(LOBUF,'Version not found in ',UTSTD);
        CALL M$WRITE(WRITELO);
        GOTO SIEOF;
        END;
        END;
        IF STAR~=' ' THEN DO;
        INPUT=' ';
        SUBSTR(INPUT,70,10)=STAR;
        CALL FIND$STAR(STAR) ALTRET(SIEOF);
        END;
        M$SI$=DCBADDR(DCBNUM(M$SI));
 
        DO WHILE('1'B);
        CALL READSI ALTRET(SIEOF);
        IF SUBSTR(SIBUF,0,4)='RUM ' THEN GOTO RUM;
        IF PROCNAME = 'M:MON' AND SUBSTR(SIBUF,0,4) = '!XDE' THEN GOTO MON;
        END;   /*   DO WHILE   */
%EJECT;
RUM:;
        LASTSTAR=' ';
        IF SUBSTR(SIBUF,0,4)~='RUM ' THEN DO;CALL READSI ALTRET(SIEOF);GOTO RUM;END;
        CALL INDEX1(I,',',SUBSTR(SIBUF,4));
        IF PROCNAME~=SUBSTR(SIBUF,4,I) THEN DO;CALL READSI ALTRET(SIEOF);GOTO RUM;END;
        P_PCB.NCHARS=SIARS;
        INPUT=SIBUF;
        CALL X$PARSE(P_PCB) ALTRET(SYNTAX);
 
        RUMPROC=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.TEXT;
        RUMUTS=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(1)->OUTSYM.TEXT;
        IF TUTS~=' ' THEN IF TUTS~=RUMUTS THEN GOTO SKIPSTAR;
        LOBUF=SIBUF;
        CALL READSI ALTRET(SIEOF);
 
 
        DO WHILE SUBSTR(SIBUF,0,3) ~= 'RUM' OR SUBSTR(SIBUF,0,1)~='!';
 
 
NEXTSTAR:;
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) ALTRET(RUM);
        IF STAR ~= ' ' AND NEWSTAR ~= STAR THEN GOTO SKIPSTAR;
        IF SUBSTR(LOBUF,0,3) = 'RUM' THEN CALL M$WRITE(WRITELO);
        IF LASTSTAR ~= NEWSTAR THEN DO;
        LASTSTAR=NEWSTAR;
        SINRECS=SINRECS+1;
        END;
        IF DEL_FLAG THEN DO;
        SUBSTR(NULL_BUF,0,14)='" ***DELETED***';
        SUBSTR(NULL_BUF,14,50)=' ';
        SUBSTR(NULL_BUF,55,4)=VERS;
        SUBSTR(NULL_BUF,59,15)=DATE;
        SUBSTR(NULL_BUF,74,6)=SUBSTR(SIBUF,74,6);
        IF NOT REM_FLAG THEN CALL M$WRITE(WRITESI);
        ELSE CALL M$DELREC(DELRECSI);
        OLDSTAR=NEWSTAR;
        LOBUF=SIBUF;
        CALL M$WRITE(WRITELO);
        SIBUF = ' ';
        CALL XSA$READ(READSI,XSA$PARAM)ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) ALTRET(RUMCARD);
        DO WHILE OLDSTAR=NEWSTAR;
        CALL M$DELREC(DELRECSI);
        LOBUF=SIBUF;
        CALL M$WRITE(WRITELO);
        SIBUF = ' ';
        CALL XSA$READ(READSI,XSA$PARAM)ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) ALTRET(RUMCARD);
        END;
        GOTO NEXTSTAR;
        END;
        LOBUF = SIBUF;
        IF SHORT_FLAG AND SUBSTR(SIBUF,0,1) ~= '"' THEN DO;
        OLDSTAR=NEWSTAR;
        CALL M$WRITE(WRITELO);
        DO WHILE OLDSTAR=NEWSTAR;
        CALL READSI ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) ALTRET(RUMCARD);
        END;
        LOBUF=' ';
        CALL M$WRITE(WRITELO);
        GOTO NEXTSTAR;
        END;
        CALL M$WRITE(WRITELO);
SKIPSTAR:;
        CALL READSI ALTRET(SIEOF);
 
        END;   /***NEXTSTAR***/
 
 
        IF TUTS=' ' THEN GOTO RUM; ELSE GOTO SIEOF;
 
        DO WHILE('0'B);
 
RUMCARD:;
        LOBUF=' ';
        CALL M$WRITE(WRITELO);
        GOTO RUM;
        END;
%EJECT;
 
MON:;
        IF TUTS~=' ' THEN DO;
        J=4;
        DO WHILE(SUBSTR(SIBUF,J,1)~='"');
           J=J+1;
           IF J>SIARS THEN DO;
           LOBUF = 'Wrong version';
           CALL M$WRITE(WRITELO);
           GOTO SIEOF;
           END;
           END;
        CALL INDEX1(I,' ',SUBSTR(SIBUF,J));
        IF VERS~=SUBSTR(SIBUF,J+1,I-1) THEN DO;
        LOBUF = 'Wrong version';
        CALL M$WRITE(WRITELO);
        GOTO SIEOF;
        END;
        END;
        LOBUF=SIBUF;
        SIBUF = ' ';
 
 
        DO WHILE SUBSTR(SIBUF,0,1) ~= '!';
MONN:;
        CALL READSI ALTRET(SIEOF);
        IF SUBSTR(SIBUF,0,1) = '!' THEN GOTO SIEOF;
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) ALTRET(MONN);
 
 
NEXTPATCH:;
        IF SUBSTR(SIBUF,0,1) = '!' THEN GOTO SIEOF;
 
 
        IF STAR = ' ' THEN DO;     /* DO ALL STARS */
        IF LASTSTAR ~= NEWSTAR THEN DO;
        LASTSTAR=NEWSTAR;
        SINRECS=SINRECS+1;
        END;
        END;
        ELSE DO;        /* DO STAR ONLY */
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) ALTRET(NEXTPATCH);
 
        DO WHILE NEWSTAR ~= STAR;
        CALL READSI ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) ALTRET(MONN);
        END;
        END;    /*  DO STAR ONLY  */
 
        IF SUBSTR(LOBUF,0,5)='!XDEL' THEN CALL M$WRITE(WRITELO);
        LOBUF = SIBUF;
        IF DEL_FLAG THEN DO;
        SUBSTR(NULL_BUF,0,14)='" ***DELETED***';
        SUBSTR(NULL_BUF,14,50)=' ';
        SUBSTR(NULL_BUF,55,4)=VERS;
        SUBSTR(NULL_BUF,59,15)=DATE;
        SUBSTR(NULL_BUF,74,6)=SUBSTR(SIBUF,74,6);
        IF NOT REM_FLAG THEN CALL M$WRITE(WRITESI);
        ELSE CALL M$DELREC(DELRECSI);
        OLDSTAR=NEWSTAR;
        LOBUF=SIBUF;
        CALL M$WRITE(WRITELO);
        SIBUF = ' ';
        CALL XSA$READ(READSI,XSA$PARAM)ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) ALTRET(NEXTPATCH);
        DO WHILE OLDSTAR=NEWSTAR;
        CALL M$DELREC(DELRECSI);
        LOBUF=SIBUF;
        CALL M$WRITE(WRITELO);
        SIBUF = ' ';
        CALL XSA$READ(READSI,XSA$PARAM)ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) ALTRET(NEXTPATCH);
        END;
        GOTO NEXTPATCH;
        END;    /*  IF DEL_FLAG  */
 
        IF SHORT_FLAG AND SUBSTR(SIBUF,0,1) ~= '"' THEN DO;
        OLDSTAR=NEWSTAR;
        CALL M$WRITE(WRITELO);
        DO WHILE OLDSTAR=NEWSTAR;
        CALL READSI ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) ALTRET(NEXTPATCH);
        END;
        LOBUF=' ';
        CALL M$WRITE(WRITELO);
        GOTO NEXTPATCH;
        END;    /*  IF SHORT  */
 
        ELSE CALL M$WRITE(WRITELO);
 
        END;        /* DO WHILE ~= ! */
 
 
        GOTO SIEOF;
%EJECT;
 
SYNTAX:;
        CALL CONCAT(LOBUF,'Syntax error parsing ',PATCHFID);
        CALL M$WRITE(WRITELO);
 
SIEOF:;
        IF M$SI$->F$DCB.ASN# ~= %FILE# THEN ALTRETURN;
        IF LOCAL THEN ALTRETURN;
        CALL XSA$CLOSE(CLOSESI,XSA$PARAM);
        IF SINRECS=0 AND VERS~=' ' OR SINRECS=0 AND PROCNAME='M:MON' THEN DO;
        LOBUF = 'No patches found.';
        CALL M$WRITE(WRITELO);
        LOBUF = ' ';
        CALL M$WRITE(WRITELO);
         ALTRETURN;
        END;
        ELSE DO;
        IF SINRECS=0 AND VERS=' ' AND PROCNAME ~= 'M:MON' THEN RETURN;
        CALL BINCHAR(NRECS,SINRECS);
        DO WHILE SUBSTR(NRECS,0,1) = '0';
           NRECS = SUBSTR(NRECS,1);
           END;
        IF DEL_FLAG THEN
        CALL CONCAT( LOBUF,'Number of patches deleted = ',NRECS);
        ELSE
        CALL CONCAT( LOBUF,'Number of patches listed = ',NRECS);
        CALL M$WRITE(WRITELO);
        END;
        RETURN;
 
%EJECT;
GET_SEARCH_KEYS: PROC ALTRET;
        TUTS=' ';
        SINRECS=0;
        CALL INDEX1(I,'-',PROCNAME#);
        IF I < 31 THEN PROCNAME=SUBSTR(PROCNAME#,0,I);
        ELSE DO;
        CALL INDEX1(K,'#',PROCNAME#);
        IF K < 31 THEN PROCNAME=SUBSTR(PROCNAME#,0,K);
        ELSE DO;
        CALL INDEX1(K,' ',PROCNAME#);
        PROCNAME=SUBSTR(PROCNAME#,0,K);
        END;
        END;
 
/*****      GOT PROCNAME CHECK FOR VERSION TO DO     ******/
 
        IF I < 31 THEN DO;
        J=I+1;
        CALL INDEX1(I,'#',SUBSTR(PROCNAME#,J));
        IF I < 31 THEN DO;
        VERS = SUBSTR(PROCNAME#,J,I);
        TUTS=VERS;
        END;
        ELSE DO;
        CALL INDEX1(I,' ',SUBSTR(PROCNAME#,J));
        IF I < 31 THEN DO;
        VERS = SUBSTR(PROCNAME#,J,I);
        TUTS=VERS;
        END;
        END;
        END;
/*****      CHECK FOR STAR      ******/
 
        CALL INDEX1(I,'#',PROCNAME#);
        IF I < 31 THEN DO;
           CALL INDEX1(J,' ',SUBSTR(PROCNAME#,I));
           STAR = SUBSTR(PROCNAME#,I,J);
           END;
         ELSE STAR = ' ';
        RETURN;
 
END;
END SEARCH_RUMS_MON;
%EJECT;
SEARCH_PLOVERS: PROC(PROCNAME,OUNAME,VERS,STAR#) ALTRET;
DCL PROCNAME CHAR(31);
DCL VERS CHAR(6);
DCL STAR CHAR(10);
DCL STAR# CHAR(10);
DCL OUNAME CHAR(31);
DCL JUNK CHAR(31);
DCL TEMP CHAR(60);
        CIX=0;
        SINRECS=0;
        TUTS=VERS;
        STAR=STAR#;
        IF P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.NSUBLKS>0 THEN CALL GET_SEARCH_KEYS;
        IF UTSTD=' ' THEN UTSTD = ':UTS_STD.SUPPORT';
        IF TUTS~=' ' THEN DO;
        IF OUNAME~=' ' THEN DO;
        CALL INDEX1(I,' ',OUNAME);
        CALL CONCAT(TUTS,SUBSTR(OUNAME,0,I),',UTS=',VERS);
        CALL SUB$UTS(UTSTD,PROCNAME,TUTS,'0'B);
        END;
           IF TUTS=UTS THEN DO;
        CALL CONCAT(LOBUF,'Version not found in ',UTSTD);
        CALL M$WRITE(WRITELO);
        GOTO SIEOF;
        END;
        END;
        IF STAR~=' ' THEN DO;
        INPUT=' ';
        SUBSTR(INPUT,70,10)=STAR;
        CALL FIND$STAR(STAR) ALTRET(NOSTAR);
        END;
           DO WHILE('0'B);
 
NOSTAR:;
            STAR=' ';
              END;
NEXTSI:
        CALL READSI ALTRET(SIEOF);
        IF SUBSTR(SIBUF,0,6)~='PLOVER' THEN GOTO NEXTSI;
NEXTPROC:;
        LASTSTAR=' ';
        P_PCB.NCHARS=SIARS;
        INPUT=SIBUF;
        CALL X$PARSE(P_PCB) ALTRET(SYNTAX);
        RUMPROC=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.TEXT;
        RUMUTS=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(1)->OUTSYM.TEXT;
        IF PROCNAME~=RUMPROC THEN GOTO NEXTSI;
 
        IF TUTS~=' ' THEN DO;
        I=0;
        CALL INDEX(I,',',RUMUTS,I+1);
        IF I<SIZEC(RUMUTS)-1 THEN; ELSE GOTO NEXTSI;
        IF SUBSTR(RUMUTS,I+1,4) = 'UTS='
        THEN
        CALL CONCAT(TEMP,SUBSTR(RUMUTS,0,I+1),SUBSTR(RUMUTS,I+5,SIZEC(RUMUTS)-I-5));
        ELSE
        GOTO NEXTSI;
        IF OUNAME=' ' THEN DO;
        CALL INDEX(I,',',TUTS);
        CALL INDEX(J,',',TEMP);
        IF SUBSTR(TUTS,I+1,8) ~= SUBSTR(TEMP,J+1,8) THEN GOTO NEXTSI;
        END;
        ELSE
        IF TUTS~=TEMP THEN GOTO NEXTSI;
        END;   /*   IF TUTS  ~=   */
        ELSE DO;
        I=0;
        CALL INDEX(I,',',RUMUTS,I+1);
        IF OUNAME~=' ' THEN IF OUNAME~=SUBSTR(RUMUTS,0,I) THEN GOTO NEXTSI;
        END;   /*   ELSE DO   */
 
        LOBUF=SIBUF;
        CALL READSI ALTRET(SIEOF);
 
        DO WHILE SUBSTR(SIBUF,0,6) ~= 'PLOVER' OR SUBSTR(SIBUF,0,1)~='!';
NEXTSTAR:;
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) ALTRET(PLOVERCARD);
        IF STAR ~= ' ' THEN DO;
        IF NEWSTAR ~= STAR THEN DO WHILE NEWSTAR ~= STAR;
        CALL READSI ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) ALTRET(PLOVERCARD);
        END;
        END;   /*   DO WHILE ~= PLOVER   */
        IF SUBSTR(LOBUF,0,6) = 'PLOVER' THEN CALL M$WRITE(WRITELO);
 
        IF LASTSTAR ~= NEWSTAR THEN DO;
        LASTSTAR=NEWSTAR;
        SINRECS=SINRECS+1;
        END;
 
        IF DEL_FLAG THEN DO;
        SUBSTR(NULL_BUF,0,14)='" ***DELETED***';
        SUBSTR(NULL_BUF,14,50)=' ';
        SUBSTR(NULL_BUF,64,10)=VERS;
        SUBSTR(NULL_BUF,55,4)=VERS;
        SUBSTR(NULL_BUF,59,15)=DATE;
        SUBSTR(NULL_BUF,74,6)=SUBSTR(SIBUF,74,6);
        IF NOT REM_FLAG THEN CALL M$WRITE(WRITESI);
        ELSE CALL M$DELREC(DELRECSI);
        OLDSTAR=NEWSTAR;
        LOBUF=SIBUF;
        CALL M$WRITE(WRITELO);
        SIBUF = ' ';
        CALL XSA$READ(READSI,XSA$PARAM)ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) ALTRET(PLOVERCARD);
        DO WHILE OLDSTAR=NEWSTAR;
        CALL M$DELREC(DELRECSI);
        LOBUF=SIBUF;
        CALL M$WRITE(WRITELO);
        SIBUF = ' ';
        CALL XSA$READ(READSI,XSA$PARAM)ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) ALTRET(PLOVERCARD);
        END;
        GOTO NEXTSTAR;
        END;   /*   IF DEL_FLAG   */
        LOBUF = SIBUF;
 
        IF SHORT_FLAG AND SUBSTR(SIBUF,0,1) ~= '"' THEN DO;
        CALL M$WRITE(WRITELO);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) ALTRET(PLOVERCARD);
        OLDSTAR=NEWSTAR;
        DO WHILE OLDSTAR=NEWSTAR;
        CALL READSI ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) ALTRET(PLOVERCARD);
        END;
        LOBUF=' ';
        CALL M$WRITE(WRITELO);
        END;   /*   IF SHORT_FLAG   */
        ELSE DO;
        CALL M$WRITE(WRITELO);
        SIBUF=' ';
        CALL READSI ALTRET(SIEOF);
        END;
        END;   /*   DO WHILE SIBUF ~= PLOVER   */
        IF SUBSTR(SIBUF,0,1)='!' THEN GOTO SIEOF;
 
        ELSE GOTO NEXTPROC;
 
        DO WHILE('0'B);
 
PLOVERCARD:;
        IF SUBSTR(SIBUF,0,1)='!' THEN GOTO SIEOF;
        LOBUF=' ';
        CALL M$WRITE(WRITELO);
        GOTO NEXTPROC;
        END;
%EJECT;
SYNTAX:;
        CALL CONCAT(LOBUF,'Syntax error parsing ',PATCHFID);
        CALL M$WRITE(WRITELO);
 
SIEOF:;
        CALL XSA$CLOSE(CLOSESI,XSA$PARAM);
        IF SINRECS=0 THEN DO;
        LOBUF = 'No patches found.';
        CALL M$WRITE(WRITELO);
        END;
        ELSE DO;
        CALL BINCHAR(NRECS,SINRECS);
        DO WHILE SUBSTR(NRECS,0,1) = '0';
           NRECS = SUBSTR(NRECS,1);
           END;
        IF DEL_FLAG THEN
        CALL CONCAT( LOBUF,'Number of patches deleted = ',NRECS);
        ELSE
        CALL CONCAT( LOBUF,'Number of patches listed = ',NRECS);
        CALL M$WRITE(WRITELO);
        END;
        RETURN;
 
 
GET_SEARCH_KEYS: PROC ALTRET;
        JUNK=OUNAME;
        TUTS=' ';
        UTS=' ';
        VERS=' ';
        OUNAME=' ';
        IF JUNK~=' ' THEN DO;
        I=0;
        CALL INDEX1(I,'-',JUNK);
        IF I < 31 THEN OUNAME=SUBSTR(JUNK,0,I);
        ELSE DO;
        CALL INDEX1(K,'#',JUNK);
        IF K < 31 THEN OUNAME=SUBSTR(JUNK,0,K);
        ELSE DO;
        CALL INDEX1(K,' ',JUNK);
        OUNAME=SUBSTR(JUNK,0,K);
        END;
        END;
        IF I < 31 THEN DO;
        J=I+1;
        CALL INDEX1(K,'#',SUBSTR(JUNK,J))
        WHENRETURN DO;
        VERS = SUBSTR(JUNK,J,K);
        CALL CONCAT(TUTS,SUBSTR(JUNK,0,I),',UTS=',VERS);
        END;
        WHENALTRETURN DO;
        CALL INDEX1(K,' ',SUBSTR(JUNK,J))
        WHENRETURN DO;
        VERS = SUBSTR(JUNK,J,K);
        CALL CONCAT(TUTS,SUBSTR(JUNK,0,I),',UTS=',VERS);
        END;
        END;
        END;
        END;
        ELSE DO;
        JUNK=PROCNAME;
        PROCNAME=' ';
        CALL INDEX1(I,'-',JUNK);
        IF I < 31 THEN PROCNAME=SUBSTR(JUNK,0,I);
        ELSE DO;
        CALL INDEX1(K,'#',JUNK);
        IF K < 31 THEN PROCNAME=SUBSTR(JUNK,0,K);
        ELSE DO;
        CALL INDEX1(K,' ',JUNK);
        PROCNAME=SUBSTR(JUNK,0,K);
        END;
        END;
        IF I < 31 THEN DO;
        J=I+1;
        CALL INDEX1(I,'#',SUBSTR(JUNK,J));
        IF I < 31 THEN DO;
        VERS = SUBSTR(JUNK,J,I);
        TUTS=VERS;
        END;
        ELSE DO;
        CALL INDEX1(I,' ',SUBSTR(JUNK,J));
        IF I < 31 THEN DO;
        VERS = SUBSTR(JUNK,J,I);
        TUTS=VERS;
        END;
        END;
        END;
        END;
        J=0;
        CALL INDEX1(I,'#',JUNK)
        WHENRETURN DO;
           CALL INDEX1(J,' ',JUNK);
           STAR = SUBSTR(JUNK,I,J);
           END;
        WHENALTRETURN DO;
        CALL INDEX1(I,'#',PROCNAME)
        WHENRETURN DO;
           CALL INDEX1(J,' ',SUBSTR(PROCNAME,I));
           STAR = SUBSTR(PROCNAME,I,J);
           END;
        WHENALTRETURN DO;
           STAR = ' ';
           END;
           END;
        RETURN;
 
END GET_SEARCH_KEYS;
END SEARCH_PLOVERS;
%EJECT;
SEARCH_ALL: PROC(STAR) ALTRET;
DCL STAR CHAR(10);
        CIX=0;
        SINRECS=0;
        DO WHILE('1'B);
LISTSTAR:;
        CALL READSI ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) WHENALTRETURN DO; LOBUF=INPUT;GOTO LISTSTAR;END;
 
        DO WHILE NEWSTAR ~= STAR;
NEXT:;
        CALL READSI ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) WHENALTRETURN DO; LOBUF=INPUT;GOTO LISTSTAR;END;
        END;   /*   DO WHILE NEWSTAR ~= STAR   */
        SINRECS=SINRECS+1;
        IF SUBSTR(LOBUF,0,3)='RUM' OR SUBSTR(LOBUF,0,6)='PLOVER' OR SUBSTR(LOBUF,0,1)='!' THEN
        CALL M$WRITE(WRITELO);
 
        DO WHILE NEWSTAR = STAR;
        IF DEL_FLAG THEN DO;
        SUBSTR(NULL_BUF,0,14)='" ***DELETED***';
        SUBSTR(NULL_BUF,14,50)=' ';
        SUBSTR(NULL_BUF,55,4)=VERS;
        SUBSTR(NULL_BUF,59,15)=DATE;
        SUBSTR(NULL_BUF,74,6)=SUBSTR(SIBUF,74,6);
        IF NOT REM_FLAG THEN CALL M$WRITE(WRITESI);
        ELSE CALL M$DELREC(DELRECSI);
        OLDSTAR=NEWSTAR;
        LOBUF=SIBUF;
        CALL M$WRITE(WRITELO);
        SIBUF = ' ';
        CALL XSA$READ(READSI,XSA$PARAM)ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) WHENALTRETURN DO;
        LOBUF=' '; CALL M$WRITE(WRITELO); LOBUF=INPUT;GOTO NEXT;END;
        DO WHILE OLDSTAR=NEWSTAR;
        LOBUF=SIBUF;
        CALL M$DELREC(DELRECSI);
        LOBUF=SIBUF;
        CALL M$WRITE(WRITELO);
        SIBUF = ' ';
        CALL XSA$READ(READSI,XSA$PARAM)ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) WHENALTRETURN DO;
        LOBUF=' '; CALL M$WRITE(WRITELO); LOBUF=INPUT;GOTO NEXT;END;
        END;
        LOBUF=' ';
        CALL M$WRITE(WRITELO);
        GOTO LISTSTAR;
        END;   /*   IF DEL_FLAG   */
 
        LOBUF = SIBUF;
        IF SHORT_FLAG AND SUBSTR(SIBUF,0,1) ~= '"' THEN DO;
        OLDSTAR=NEWSTAR;
        CALL M$WRITE(WRITELO);
        LOBUF=' ';
        CALL M$WRITE(WRITELO);
        DO WHILE OLDSTAR=NEWSTAR;
        CALL READSI ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) WHENALTRETURN DO;
        LOBUF=' '; CALL M$WRITE(WRITELO); LOBUF=INPUT;GOTO NEXT;END;
        END;
        LOBUF=' ';
        CALL M$WRITE(WRITELO);
        GOTO LISTSTAR;
        END;   /*   IF SHORT_FLAG   */
 
        CALL M$WRITE(WRITELO);
        CALL READSI ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) WHENALTRETURN DO; LOBUF=INPUT;GOTO LISTSTAR;END;
        END;   /*   DO WHILE NEWSTAR = STAR   */
        END;   /*   DO WHILE ('1'B)   */
%EJECT;
SIEOF:;
        IF LOCAL THEN ALTRETURN;
        CALL XSA$CLOSE(CLOSESI,XSA$PARAM);
        IF SINRECS=0 THEN DO;
        LOBUF = 'No patches found.';
        CALL M$WRITE(WRITELO);
        LOBUF = ' ';
        CALL M$WRITE(WRITELO);
         ALTRETURN;
        END;
        ELSE DO;
        CALL BINCHAR(NRECS,SINRECS);
        DO WHILE SUBSTR(NRECS,0,1) = '0';
           NRECS = SUBSTR(NRECS,1);
           END;
        IF DEL_FLAG THEN
        CALL CONCAT( LOBUF,'Number of patches deleted = ',NRECS);
        ELSE
        CALL CONCAT( LOBUF,'Number of patches listed = ',NRECS);
        CALL M$WRITE(WRITELO);
        END;
        RETURN;
END SEARCH_ALL;
%EJECT;
CLEANUP: PROC(TYPE) ALTRET;
DCL TYPE CHAR(1);
        SINRECS=0;
        I=0;
        IF BLOCK ~= REM# THEN RETURN;
        CALL INDEX(I,'INCR',PATCHFID);
        IF I > 59 THEN RETURN;
        IF TYPE = 'R' THEN
        CALL CONCAT( LOBUF,'Looking for unused RUM cards.');
        ELSE
        CALL CONCAT( LOBUF,'Looking for unused PLOVER cards.');
        CALL M$WRITE(WRITELO);
NEXTSI:
        SIBUF = ' ';
        CALL XSA$READ(READSI,XSA$PARAM)ALTRET(SIEOF);
        SIARS=M$SI$->F$DCB.ARS#;
        IF SUBSTR(SIBUF,0,7)~='!PLOVER' AND TYPE = 'P' THEN GOTO NEXTSI;
        IF SUBSTR(SIBUF,0,4)~='!RUM' AND TYPE = 'R' THEN GOTO NEXTSI;
        SIBUF=' ';
        CALL XSA$READ(READSI,XSA$PARAM)ALTRET(SIEOF);
        INPUT=SIBUF;
        DO WHILE SUBSTR(SIBUF,0,1) ~= '!';
        SIBUF=' ';
        CALL XSA$READ(READSI,XSA$PARAM)ALTRET(SIEOF);
        IF SUBSTR(SIBUF,0,3) = 'RUM' AND SUBSTR(INPUT,0,3) = 'RUM'
        OR SUBSTR(SIBUF,0,6) = 'PLOVER' AND SUBSTR(INPUT,0,6) = 'PLOVER' THEN DO;
        SINRECS=SINRECS+1;
        CALL XSA$PRECORD(PRECORDSI,XSA$PARAM);
        CALL XSA$READ(READSI,XSA$PARAM)ALTRET(SIEOF);
        CALL M$DELREC(DELRECSI);
        LOBUF=SIBUF;
        INPUT=' ';
        CALL M$WRITE(WRITELO);
        END;
        ELSE INPUT=SIBUF;
        END;
        CALL XSA$PRECORD(PRECORDSI,XSA$PARAM);
        CALL XSA$READ(READSI,XSA$PARAM)ALTRET(SIEOF);
        IF SUBSTR(SIBUF,0,3) = 'RUM'
        OR SUBSTR(SIBUF,0,6) = 'PLOVER' THEN DO;
 
        SINRECS=SINRECS+1;
        CALL M$DELREC(DELRECSI);
        LOBUF=SIBUF;
        CALL M$WRITE(WRITELO);
        END;
 
SIEOF:;
        IF LOCAL THEN ALTRETURN;
        CALL XSA$CLOSE(CLOSESI,XSA$PARAM);
        IF SINRECS=0 THEN;
        ELSE DO;
        CALL BINCHAR(NRECS,SINRECS);
        DO WHILE SUBSTR(NRECS,0,1) = '0';
           NRECS = SUBSTR(NRECS,1);
           END;
        IF TYPE = 'R' THEN
        CALL CONCAT( LOBUF,'Number of RUM cards deleted = ',NRECS);
        ELSE
        CALL CONCAT( LOBUF,'Number of PLOVER cards deleted = ',NRECS);
        CALL M$WRITE(WRITELO);
        END;
        RETURN;
END CLEANUP;
%EJECT;
LOAD: PROC ALTRET;
        CIX=0;
 
        DO WHILE('1'B);
LOADPATCH:;
        SIBUF=' ';
        CALL XSA$READ(READSI,XSA$PARAM)ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) WHENALTRETURN DO;CALL LOADCTABLE;GOTO LOADPATCH;END;
NEXTPATCH:;
        SINRECS=SINRECS+1;
        DO WHILE NEWSTAR = NEWSTAR;
        INPUT = SIBUF;
        IF SHORT_FLAG AND SUBSTR(SIBUF,0,1) ~= '"' THEN DO;
        OLDSTAR=NEWSTAR;
        CALL LOADCTABLE;
        DO WHILE OLDSTAR=NEWSTAR;
 
        SIBUF = ' ';
        CALL XSA$READ(READSI,XSA$PARAM)ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) WHENALTRETURN DO;CALL LOADCTABLE;GOTO LOADPATCH;END;
        END;
        GOTO NEXTPATCH;
        END;
        CALL LOADCTABLE;
        SIBUF=' ';
        CALL XSA$READ(READSI,XSA$PARAM)ALTRET(SIEOF);
        INPUT=SIBUF;
        CALL FIND$STAR(NEWSTAR) WHENALTRETURN DO;CALL LOADCTABLE;GOTO LOADPATCH;END;
        END;
        END;
 
/*****/
SIEOF:;
        CALL XSA$CLOSE(CLOSESI,XSA$PARAM);
        RETURN;
LOADCTABLE: PROC;
 
           CTABLE.C(CIX)=INPUT;
           CIX=CIX+1;
 
DONE:   ;
        CTABLESIZE=CIX;
        RETURN;
 
END;
END LOAD;
NEXTCARD: PROC ALTRET;
 
           SIARS=80;
           SIBUF=CTABLE.C(CIX);
           CIX=CIX+1;
 
DONE:   ;
        IF CTABLESIZE<CIX THEN ALTRETURN;
        RETURN;
 
END NEXTCARD;
 
READSI: PROC ALTRET;
 
        IF M$SI$->F$DCB.ASN# ~= %FILE# THEN DO;
              LOBUF='No patch file specified';
              CALL M$WRITE(WRITELO);
              ALTRETURN;
              END;
        IF LOCAL THEN ALTRETURN;
        SIBUF = ' ';
        IF SHORT_FLAG THEN CALL NEXTCARD WHENALTRETURN DO;ALTRETURN;END;
        ELSE DO;
        CALL XSA$READ(READSI,XSA$PARAM) WHENALTRETURN DO;
        IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# ~= %E$EOF THEN DO;
              CALL CONCAT(LOBUF,'Error reading patch file',PATCHFID);
              CALL M$WRITE(WRITELO);
              END;
              ALTRETURN;
        END;
        SIARS=M$SI$->F$DCB.ARS#;
        END;
        RETURN;
END READSI;
END PUP;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
INT_PROC: PROC ASYNC;
%MACRO WRITEUO;
     CALL M$WRITE(WRITEUO) WHENALTRETURN DO;
        END;
%MEND;
DCL UOBUF CHAR(256) SYMREF;
%INCLUDE CP_6;
%FPT_WRITE(FPTN=WRITEUO,STCLASS=SYMREF);
 
DCL LOCAL BIT(1) SYMREF;
     LOCAL='1'B;
     UOBUF='OK - I give up - what now?';
     %WRITEUO;
     RETURN;
END INT_PROC;
