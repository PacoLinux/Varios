VERSION E05

PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:1    
        1        1        /*M* TOB$BREAK_HANDLER     TOLTS BREAK HANDLER program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*F* NAME:         TOB$BREAK_HANDLER
       12       12             PURPOSE:      Asynchronous Condition Handler for taking control
       13       13                           when the "break" key at the terminal is hit.
       14       14             DESCRIPTION:  "Break control" for TOLTS is established at TOLTS
       15       15                           initialization time by calling M$INT.  Thereafter,
       16       16                           control is transferred here whenever the break
       17       17                           key on the terminal is hit.
       18       18
       19       19                           "Break" is the equivalent of the "request" key
       20       20                           on a GCOS operator's console.  It signifies
       21       21                           that the user desires to communicate with TOLTS.
       22       22
       23       23                           The Break Handler reads the next test request in
       24       24                           from the terminal by calling the TOT$NEXT_TEST_REQ
       25       25                           entry point in TOT$TOLTS.  This entry point
       26       26                           gets the next test request and puts in the
       27       27                           dispatcher queue.  See TOT$ROOT documentation for
       28       28                           further detail.
       29       29             REFERENCE:    CP-6 Release C00A
       30       30        */
       31       31        %EJECT;
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:2    
       32       32        /*D* NAME:         TOB$BREAK_HANDLER
       33       33             CALL:         None - entered asynchronously
       34       34             INTERFACE:    TOT$NEXT_TEST_REQ
       35       35                           TOT$CONSOLE_OUT
       36       36                           M$TRMPRG Monitor Service
       37       37             INPUT:        TOT$ECP.ISC.READ_PENDING
       38       38             OUTPUT:       No external data accessed.
       39       39             DESCRIPTION:  Calls an entry point in TOT$TOLTS to read in the
       40       40                           new test request and place  it in the dispatcher
       41       41                           queue or completes console out.
       42       42             LAST UPDATE:  04/18/83
       43       43        */
       44       44
       45       45        TOB$BREAK_HANDLER: PROC ASYNC;
       46       46
       47       47           %INCLUDE CP_6;
       48     5606           %INCLUDE TOT_TOLTS_M ;
       49     6724
       50     6725           %TOT$ECP (STCLASS = SYMREF) ;
       51     6774           %FPT_TRMPRG (RSTBRK = YES);
       52     6803
       53     6804    1      DCL TOT$NEXT_TEST_REQ ENTRY ;
       54     6805    1      DCL TOT$PROMPT_OUT    ENTRY ;
       55     6806
       56     6807        /* Code */
       57     6808
       58     6809    1      CALL M$TRMPRG (FPT_TRMPRG);
       59     6810    1      IF TOT$ECP.ISC.READ_PENDING
       60     6811    1      THEN CALL TOT$PROMPT_OUT ;
       61     6812    1      ELSE CALL TOT$NEXT_TEST_REQ ;
       62     6813
       63     6814    1   END TOB$BREAK_HANDLER ;

PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:3    
--  Include file information  --

   TOT_TOLTS_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure TOB$BREAK_HANDLER.

   Procedure TOB$BREAK_HANDLER requires 16 words for executable code.
   Procedure TOB$BREAK_HANDLER requires 4 words of local(AUTO) storage.

    No errors detected in file TOB$BREAK_HANDLER.:E05TSI    .

PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:4    

 Object Unit name= TOB$BREAK_HANDLER                          File name= TOB$BREAK_HANDLER.:E05TOU
 UTS= JUL 30 '97 06:20:54.20 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none     8     10  TOB$BREAK_HANDLER
    2   Proc  even  none    16     20  TOB$BREAK_HANDLER

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes     Async       0  TOB$BREAK_HANDLER

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 TOT$PROMPT_OUT
         yes           Std       0 TOT$NEXT_TEST_REQ
                       nStd      0 X66_AAUTO
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  TOT$ECP                               B_VECTNIL
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:5    

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:6    


        1        1        /*M* TOB$BREAK_HANDLER     TOLTS BREAK HANDLER program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*F* NAME:         TOB$BREAK_HANDLER
       12       12             PURPOSE:      Asynchronous Condition Handler for taking control
       13       13                           when the "break" key at the terminal is hit.
       14       14             DESCRIPTION:  "Break control" for TOLTS is established at TOLTS
       15       15                           initialization time by calling M$INT.  Thereafter,
       16       16                           control is transferred here whenever the break
       17       17                           key on the terminal is hit.
       18       18
       19       19                           "Break" is the equivalent of the "request" key
       20       20                           on a GCOS operator's console.  It signifies
       21       21                           that the user desires to communicate with TOLTS.
       22       22
       23       23                           The Break Handler reads the next test request in
       24       24                           from the terminal by calling the TOT$NEXT_TEST_REQ
       25       25                           entry point in TOT$TOLTS.  This entry point
       26       26                           gets the next test request and puts in the
       27       27                           dispatcher queue.  See TOT$ROOT documentation for
       28       28                           further detail.
       29       29             REFERENCE:    CP-6 Release C00A
       30       30        */
       31       31        %EJECT;
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:7    
       32       32        /*D* NAME:         TOB$BREAK_HANDLER
       33       33             CALL:         None - entered asynchronously
       34       34             INTERFACE:    TOT$NEXT_TEST_REQ
       35       35                           TOT$CONSOLE_OUT
       36       36                           M$TRMPRG Monitor Service
       37       37             INPUT:        TOT$ECP.ISC.READ_PENDING
       38       38             OUTPUT:       No external data accessed.
       39       39             DESCRIPTION:  Calls an entry point in TOT$TOLTS to read in the
       40       40                           new test request and place  it in the dispatcher
       41       41                           queue or completes console out.
       42       42             LAST UPDATE:  04/18/83
       43       43        */
       44       44
       45       45        TOB$BREAK_HANDLER: PROC ASYNC;

     45  2 000000   000000 700200 xent  TOB$BREAK_H* TSX0  ! X66_AAUTO
         2 000001   000004 000000                    ZERO    4,0

       46       46
       47       47           %INCLUDE CP_6;
       48     5606           %INCLUDE TOT_TOLTS_M ;
       49     6724
       50     6725           %TOT$ECP (STCLASS = SYMREF) ;
       51     6774           %FPT_TRMPRG (RSTBRK = YES);
       52     6803
       53     6804    1      DCL TOT$NEXT_TEST_REQ ENTRY ;
       54     6805    1      DCL TOT$PROMPT_OUT    ENTRY ;
       55     6806
       56     6807        /* Code */
       57     6808
       58     6809    1      CALL M$TRMPRG (FPT_TRMPRG);

   6809  2 000002   000000 630400 1                  EPPR0   FPT_TRMPRG
         2 000003   160004 713400                    CLIMB   57348
         2 000004   400400 401760                    pmme    nvectors=2

       59     6810    1      IF TOT$ECP.ISC.READ_PENDING
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:8    

   6810  2 000005   000005 236000 xsym               LDQ     TOT$ECP+5
         2 000006   040000 316003                    CANQ    16384,DU
         2 000007   000014 600000 2                  TZE     s:6812

       60     6811    1      THEN CALL TOT$PROMPT_OUT ;

   6811  2 000010   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000011   000000 701000 xent               TSX1    TOT$PROMPT_OUT
         2 000012   000000 011000                    NOP     0
         2 000013   000017 710000 2                  TRA     s:6814

       61     6812    1      ELSE CALL TOT$NEXT_TEST_REQ ;

   6812  2 000014   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000015   000000 701000 xent               TSX1    TOT$NEXT_TEST_REQ
         2 000016   000000 011000                    NOP     0

       62     6813
       63     6814    1   END TOB$BREAK_HANDLER ;

   6814  2 000017   000000 702200 xent               TSX2  ! X66_AARET

FPT_TRMPRG
 Sect OctLoc
   1     000   000003 777640   000004 006000   000000 177640   000000 006014    ................
   1     004   000000 000000   000000 000000   004000 000000   000000 000000    ................

PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:9    
--  Include file information  --

   TOT_TOLTS_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure TOB$BREAK_HANDLER.
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:10   

 **** Procedure blocks ****

LB#    Line#s    #stmts #vars Sect# OctLoc  P A C   NP Lvl/name
  0    45-  6814      6     6     2      0  y   y    0   1 TOB$BREAK_HANDLER
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:11   

    **** Executable statements  ****

  Exec cost Stmt Sec OctLoc Type   LB Label              Exec cost Stmt Sec OctLoc Type   LB Label

              45   2      0 Proc    0                  $$$$$$$$$$  6809   2      2 MonCal  0
            6810   2      5 If      0                              6811   2     10 Call    0
            6812   2     14 Call    0                              6814   2     17 EndPrc  0


  **** Statement type totals  ****

     2 Call       1 MonCal     1 If         1 Proc       1 EndPrc

 # major stmts=    4 Code/major= 4.00 # stmts=    6 Code/stmt= 2.66  Point total= 91.6
 Cost/major stmt=  7.7 Cost/stmt=  5.1 Total cost=     31.0

   0-4  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
   4-6
   6-8
  8-10
 10-12
 12-14
 14-16
 16-18
 18-20
 20-22
 22-??  $$$$$$$$$$$$$$$$
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:12   

 **** Variables and constants ****

  ****  Section 001  Data  TOB$BREAK_HANDLER

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(288)   r     1 FPT_TRMPRG
     4-0-0/d STRC(144)   r         2 V


  ****  SYMREF variables  ****

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(495)   r     1 TOT$ECP
     5-0-0/c STRC(4)     r         2 ISC
     5-0-3/b BIT         r          3 READ_PENDING


  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$UC


   Procedure TOB$BREAK_HANDLER requires 16 words for executable code.
   Procedure TOB$BREAK_HANDLER requires 4 words of local(AUTO) storage.

    No errors detected in file TOB$BREAK_HANDLER.:E05TSI    .
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:13   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:14   
          MINI XREF LISTING

FPT_TRMPRG
      6790**DCL      6809<>CALL
FPT_TRMPRG.V
      6797**DCL      6792--DCLINIT
FPT_TRMPRG.V.CTLFLG.RSTBRK#
      6798**DCL      6799--REDEF
M$TRMPRG
      5559**DCL-ENT  6809--CALL
TOT$ECP.ISC.READ_PENDING
      6750**DCL      6810>>IF
TOT$ECP.TEST_REQ
      6735**DCL      6737--REDEF
TOT$NEXT_TEST_REQ
      6804**DCL-ENT  6812--CALL
TOT$PROMPT_OUT
      6805**DCL-ENT  6811--CALL
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:15   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:16   
              FULL UREF LISTING

FPT_TRMPRG.STATION_
      6794**DCL
FPT_TRMPRG.V.CTLFLG
      6797**DCL
FPT_TRMPRG.V.CTLFLG.ABORTREAD#
      6798**DCL
FPT_TRMPRG.V.CTLFLG.CURSORHERE#
      6798**DCL
FPT_TRMPRG.V.CTLFLG.PURGEINPUT#
      6799**DCL
FPT_TRMPRG.V.CTLFLG.PURGEOUTPUT#
      6800**DCL
FPT_TRMPRG.V.CTLFLG.RESETBREAK
      6799**DCL
FPT_TRMPRG.V.DCB#
      6797**DCL
FPT_TRMPRG.V_
      6792**DCL
M$ACCT
      5551**DCL-ENT
M$ACTIVATE
      5554**DCL-ENT
M$ALIB
      5547**DCL-ENT
M$ASUSER
      5549**DCL-ENT
M$ATTACH
      5556**DCL-ENT
M$BADPP
      5574**DCL-ENT
M$CGCTL
      5555**DCL-ENT
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:17   
M$CGINFO
      5555**DCL-ENT
M$CHECK
      5536**DCL-ENT
M$CHGUNIT
      5594**DCL-ENT
M$CLOSE
      5534**DCL-ENT
M$CLRSTK
      5592**DCL-ENT
M$CMDVAR
      5603**DCL-ENT
M$CONFIG
      5564**DCL-ENT
M$CORRES
      5539**DCL-ENT
M$CPEXIT
      5548**DCL-ENT
M$CVM
      5572**DCL-ENT
M$CVOL
      5537**DCL-ENT
M$DCLFLD
      5564**DCL-ENT
M$DEACTIVATE
      5554**DCL-ENT
M$DELREC
      5536**DCL-ENT
M$DEQ
      5601**DCL-ENT
M$DETACH
      5556**DCL-ENT
M$DEVICE
      5538**DCL-ENT
M$DISPLAY
      5601**DCL-ENT
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:18   
M$DISPRES
      5541**DCL-ENT
M$DLIB
      5547**DCL-ENT
M$DRIBBLE
      5564**DCL-ENT
M$DRTN
      5592**DCL-ENT
M$DSUSER
      5549**DCL-ENT
M$ENQ
      5600**DCL-ENT
M$EOM
      5559**DCL-ENT
M$ERASE
      5565**DCL-ENT
M$ERR
      5546**DCL-ENT
M$ERRMSG
      5597**DCL-ENT
M$EVENT
      5589**DCL-ENT
M$EXHUME
      5598**DCL-ENT
M$EXIT
      5546**DCL-ENT
M$EXTEND
      5538**DCL-ENT
M$FDP
      5570**DCL-ENT
M$FDS
      5569**DCL-ENT
M$FEBOOT
      5562**DCL-ENT
M$FECTL
      5563**DCL-ENT
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:19   
M$FEDUMP
      5562**DCL-ENT
M$FID
      5597**DCL-ENT
M$FINDPROC
      5551**DCL-ENT
M$FSUSER
      5549**DCL-ENT
M$FVP
      5571**DCL-ENT
M$FWCG
      5555**DCL-ENT
M$GBPL
      5575**DCL-ENT
M$GDDL
      5571**DCL-ENT
M$GDP
      5570**DCL-ENT
M$GDS
      5569**DCL-ENT
M$GETDCB
      5540**DCL-ENT
M$GETMOUSE
      5580**DCL-ENT
M$GETPM
      5581**DCL-ENT
M$GJOB
      5599**DCL-ENT
M$GLINEATTR
      5559**DCL-ENT
M$GOODPP
      5574**DCL-ENT
M$GPLATEN
      5567**DCL-ENT
M$GPROMPT
      5566**DCL-ENT
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:20   
M$GTRMATTR
      5560**DCL-ENT
M$GTRMCTL
      5558**DCL-ENT
M$GTRMTAB
      5561**DCL-ENT
M$GVP
      5570**DCL-ENT
M$HELP
      5597**DCL-ENT
M$INT
      5589**DCL-ENT
M$INTRTN
      5550**DCL-ENT
M$IOQ
      5585**DCL-ENT
M$JOBSTATS
      5599**DCL-ENT
M$KEYIN
      5539**DCL-ENT
M$LDEV
      5534**DCL-ENT
M$LDTRC
      5547**DCL-ENT
M$LIMIT
      5540**DCL-ENT
M$LINES
      5539**DCL-ENT
M$LINK
      5546**DCL-ENT
M$MADMUCK
      5542**DCL-ENT
M$MAKUSER
      5573**DCL-ENT
M$MBS
      5541**DCL-ENT
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:21   
M$MDFFLD
      5565**DCL-ENT
M$MERC
      5590**DCL-ENT
M$MERCS
      5591**DCL-ENT
M$MIRROR
      5585**DCL-ENT
M$MONINFO
      5602**DCL-ENT
M$MPL
      5575**DCL-ENT
M$NODEINFO
      5566**DCL-ENT
M$NXTUSR
      5600**DCL-ENT
M$OCMSG
      5598**DCL-ENT
M$OLAY
      5546**DCL-ENT
M$OPEN
      5534**DCL-ENT
M$PAS
      5575**DCL-ENT
M$PATHCON
      5598**DCL-ENT
M$PDS
      5569**DCL-ENT
M$PFIL
      5536**DCL-ENT
M$PLATEN
      5560**DCL-ENT
M$PRECORD
      5538**DCL-ENT
M$PROCNAME
      5551**DCL-ENT
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:22   
M$PROFILE
      5562**DCL-ENT
M$PROMPT
      5558**DCL-ENT
M$RACST
      5542**DCL-ENT
M$RDSYSLOG
      5583**DCL-ENT
M$READ
      5535**DCL-ENT
M$RELDCB
      5540**DCL-ENT
M$RELRES
      5541**DCL-ENT
M$RELSTARF
      5543**DCL-ENT
M$REM
      5543**DCL-ENT
M$RENV
      5590**DCL-ENT
M$REQUIRE
      5542**DCL-ENT
M$RETRY
      5591**DCL-ENT
M$RETRYS
      5591**DCL-ENT
M$REW
      5537**DCL-ENT
M$RLSFLD
      5565**DCL-ENT
M$RPRIV
      5593**DCL-ENT
M$RSPP
      5572**DCL-ENT
M$RSWITCH
      5594**DCL-ENT
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:23   
M$RUE
      5600**DCL-ENT
M$SAD
      5573**DCL-ENT
M$SAVE
      5549**DCL-ENT
M$SCON
      5550**DCL-ENT
M$SCREECH
      5548**DCL-ENT
M$SENV
      5590**DCL-ENT
M$SETFMA
      5534**DCL-ENT
M$SETFP
      5563**DCL-ENT
M$SINPUT
      5561**DCL-ENT
M$SLCFLD
      5566**DCL-ENT
M$SMOUSE
      5580**DCL-ENT
M$SMPRT
      5572**DCL-ENT
M$SPRIV
      5593**DCL-ENT
M$SSC
      5573**DCL-ENT
M$SSWITCH
      5593**DCL-ENT
M$STATE
      5602**DCL-ENT
M$STD
      5574**DCL-ENT
M$STIMER
      5588**DCL-ENT
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:24   
M$STLPP
      5571**DCL-ENT
M$STRAP
      5588**DCL-ENT
M$STRMATTR
      5560**DCL-ENT
M$STRMCTL
      5558**DCL-ENT
M$STRMTAB
      5561**DCL-ENT
M$SYMBIO
      5599**DCL-ENT
M$SYSCON
      5585**DCL-ENT
M$SYSID
      5603**DCL-ENT
M$TDCLOSE
      5584**DCL-ENT
M$TDIO
      5584**DCL-ENT
M$TDOPEN
      5583**DCL-ENT
M$TDREQCPU
      5584**DCL-ENT
M$TEMPWROC
      5578**DCL-ENT
M$TIME
      5601**DCL-ENT
M$TRAP
      5588**DCL-ENT
M$TRMISC
      5563**DCL-ENT
M$TRTN
      5592**DCL-ENT
M$TRUNC
      5535**DCL-ENT
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:25   
M$TTIMER
      5588**DCL-ENT
M$UC
      5558**DCL
M$UMPL
      5575**DCL-ENT
M$UNFID
      5597**DCL-ENT
M$UNLATCH
      5554**DCL-ENT
M$UNSHARE
      5551**DCL-ENT
M$USRFIELD
      5594**DCL-ENT
M$VIRTUAL
      5569**DCL-ENT
M$WAIT
      5592**DCL-ENT
M$WEOF
      5537**DCL-ENT
M$WRITE
      5535**DCL-ENT
M$WRSYSLOG
      5583**DCL-ENT
M$XCON
      5589**DCL-ENT
M$XCONRTN
      5550**DCL-ENT
M$XEQTIME
      5602**DCL-ENT
M$XFLUSH
      5543**DCL-ENT
M$XMOUSE
      5580**DCL-ENT
M$XXX
      5546**DCL-ENT
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:26   
M$YC
      5548**DCL-ENT
TOB$BREAK_HANDLER
        45**PROC
TOT$ECP
      6734**DCL
TOT$ECP.BOOT_CPU_TYPE
      6771**DCL
TOT$ECP.BREAK_ALLOWED
      6767**DCL
TOT$ECP.BREAK_RECEIVED
      6769**DCL
TOT$ECP.DYNAMIC_PAGE_COUNT
      6752**DCL
TOT$ECP.IO
      6738**DCL
TOT$ECP.IO.COUNT
      6741**DCL
TOT$ECP.IO.TYPE
      6739**DCL
TOT$ECP.ISC
      6743**DCL
TOT$ECP.ISC.GERELC_WAIT
      6748**DCL
TOT$ECP.ISC.READ_OUT
      6744**DCL
TOT$ECP.ISC.WRITE_OUT
      6746**DCL
TOT$ECP.SUBEXEC
      6754**DCL
TOT$ECP.SUBEXEC.ADDRESS
      6757**DCL
TOT$ECP.SUBEXEC.CURRENT
      6755**DCL
TOT$ECP.SUBEXEC.EDIT_NAME
      6759**DCL
PL6.E3A0      #001=TOB$BREAK_HANDLER File=TOB$BREAK_HANDLER.:E05TSI              WED 07/30/97 06:20 Page:27   
TOT$ECP.SUBEXEC.TEST_PAGE_COUNT
      6765**DCL
TOT$ECP.SUBEXEC.WRAPUP$
      6763**DCL
TOT$ECP.SUBEXEC.WRAPUP_TRIED
      6761**DCL
TOT$ECP.TEST_REQ_
      6737**DCL
