.*M*
HELP file for: SOLVENT.X
.*T*
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
.*X*                                             
N.B. this help file is TUNA-compatible (NOW!).
.*A*
SOLVENT is a program for removing files from UNIX(*) tar tapes.
.*B*
SOLVENT syntax is:
 
   !SOLVENT.X tarfile [TO fid] [(options)] where
   tarfile  - is the input file in tar format, either an FT or
              a disk fid is usable here.
   fid      - is an output fid into which the name (only) is merged
   options  -
     AUTORENAME=n -> infers automatic renaming of input files to $ddddddd,
                      starting at n.  Default: AUTORENAME=1.
     KEEPNL       -> says keep the newline characters (LF).
     LIST         -> perform LIST of TAR tape only.
     ND           -> strip directory (path)
     NL=n        ->  specify "newline" character.  Default 12, meaning LF.
     NONL        -> don't search for "newlines".  Useful for transferring
                    binary files.
     STD=STD_NAM  -> A standard file used to determine what input
                     files are to be read in.
 
----------
.*R*
(*) UNIX is a trademark of AT&T Bell Labs
 
.*B*
SOLVENT will extract all the files saved in the tar file, naming them as they
were saved, with each '/' replaced by a '$', each '.' replaced with an ':', and
each '=' replaced by a '-'.
 
See HELP (SOLVENT.X) OPTIONS for more detailed option information.
 
BE CAREFUL -- SOLVENT will not check that the path name it is converting is
less than 31 characters, if an invalid file name is generated it will ask for a
replacement name on M$ME.
.*B*
 
Example:
   !SOLVENT ROGUE_TAR
    directory tmp/rogue/.
    file tmp/rogue/READ_ME.
    file tmp/rogue/spell.c.
   processing terminated
 
SOLVENT has created files called:
   tmp:rogue:READ_ME, and tmp:rogue:spell_c
 
.*B*
   !SOLVENT FT#TAR TO LT#9999.FOO (ND)
    directory ./bar
    file ./bar/garbage.c
    file ./bar/garbage.h
   processing terminated
 
SOLVENT has created files called:
 
   LT#9999/garbage_c.FOO and LT#9999/garbage_h.FOO
 
(Note that the ./bar/ directory information was removed before the name was
merged into the output fid specification)
 
.*K* OPTIONS
The options available in SOLVENT are:
   AUTORENAME     KEEPNL     LIST     ND     NL     NONL     STD
   For a detailed description see topic 'OPTION optionname', or type ??
 
.*B* AUTORENAME
AUTORENAME [ = n]
   When a file cannot be created because the name contains invalid characters,
or is too long presence of this option will cause SOLVENT to name the file
`$ddddddd' where `ddddddd' is a seven digit file sequence number starting at
`n'.  The default value for `n' is 1.
 
.*B* KEEPNL
KEEPNL
   This option causes SOLVENT to retain the NewLine character on each line
written to an output file.  Typically for a UN*X file this would be a LineFeed
character.
 
.*B* LIST
LIST
   The LIST option causes SOLVENT to list the names of the files, with no
further processing.
 
.*B* ND
ND
   The ND option indicates that file names are to have the directory portion
stripped before creating the file.  The file name will consist of all
characters following the last `/' in the name (or the entire name if no `/' is
present).
 
.*B* NL
NL = n
   The NL option allows you to specify what character in the files being
processed represents the NewLine (end of record) mark.  The value (`n') must be
specified in decimal.  The default value if this option is not present is 12
(ASCII LF).
 
.*B* NONL
NONL
   The NONL option causes SOLVENT to process each file as a single (binary)
record.  This is useful only when you are transfering binary data files where
you do not wish to have them broken at positions where an ASCII LF occurs.
.*B* STD
STD = STD_NAM
   The STD option causes SOLVENT to use STD_NAM as a standard file to determine
what input files are to be created.  The standard file contains any valid
wildcarded string (one per line).  If the current file matches any of these
strings processing occurs on that file.  This is useful when you only what
files from one directory of a tar tape.  files from one directory of a tar
tape.  The format for the standard file is the input file name with a "?" being
the wildcard character.  For example if you want all the files ending in .c in
the /usr/junk directory the standard line would look like:  /usr/junk/?.c
 
.*K* OWNER
 Submitted to the X account by
 
 John Stewart
 Carleton University
 Language Support Group
 
 Written by
 
 Nick Briggs @XEROX Palo Alto Research Centre.
.*K* CHANGES
900808
.*R*
Fixed problem of SOLVENT only working on a blocknig factor of 20. Now it will
work on any blocking factor less than or equal to 20.
.*B*
900123
.*R*
Fixed a problem with the STD= option also using M$LO, it now uses M$STDFID.
.*R*
890731
.*R*
Updated HELP file, DCB#4 (M$LO) now can be used for listing output.
.*R*
890523
.*R*
Added the option STD to allow a STD file to determine what files are to be read
off of the tar tape.
.*R*
880420
.*R*
Allowed a tar format of TAR_CONTROL.LINKFLAG to contain either a binasc(0) or
binasc('0').
 
Also converted a filename character '+' to '`'.
.*R*
870219
.*R*
Submitted to LADC X account.
.*K* XINDEX
SOLVENT.X
.*R*
AID=SUPPORT
.*R*
AID=UTILITY
.*R*
TAPES
.*R*
UNIX
.*K* XINDEX_ABSTRACT
TOOL=SOLVENT.X
.*R*
A program for removing files from UNIX(*) tar tapes.
.*B*  TAPE_FORMAT
The following documentation was stolen from GNU-tar:
 
 *.all
 *..::L2 "The Standard Format"
 *.brf
.*R*
A tar tape or file contains a series of records.  Each record contains
RECORDSIZE bytes.  Although this format may be thought of as being on magnetic
tape, other media are often used.
 
Each file archived is represented by a header record which describes the file,
followed by zero or more records which give the contents of the file.  At the
end of the archive file there may be a record filled with binary zeros as an
end-of-file marker.  A reasonable system should write a record of zeros at the
end, but must not assume that such a record exists when reading an archive.
 
The records may be blocked for physical I/O operations.  Each block of N
records (where N is set by the '-b' option to tar) is written with a single
write() operation.  On magnetic tapes, the result of such a write is a single
tape record.  When writing an archive, the last block of records should be
written at the full size, with records after the zero record containing all
zeroes.  When reading an archive, a reasonable system should properly handle an
archive whose last block is shorter than the rest, or which contains garbage
records after a zero record.
 
The header record is defined in C as follows:
 
.*X*
.FIF
.*R*
 *.fif
/*
 * Standard Archive Format - Standard TAR - USTAR
 */
#define  RECORDSIZE  512
#define  NAMSIZ      100
#define  TUNMLEN      32
#define  TGNMLEN      32
 
union record {
    char        charptr[RECORDSIZE];
    struct header {
        char    name[NAMSIZ];
        char    mode[8];
        char    uid[8];
        char    gid[8];
        char    size[12];
        char    mtime[12];
        char    chksum[8];
        char    linkflag;
        char    linkname[NAMSIZ];
        char    magic[8];
        char    uname[TUNMLEN];
        char    gname[TGNMLEN];
        char    devmajor[8];
        char    devminor[8];
    } header;
};
 
/* The checksum field is filled with this while the checksum is computed. */
#define    CHKBLANKS    "        "        /* 8 blanks, no null */
 
/* The magic field is filled with this if uname and gname are valid. */
#define    TMAGIC    "ustar  "        /* 7 chars and a null */
 
/* The magic field is filled with this if this is a GNU format dump entry */
#define    GNUMAGIC  "GNUtar "        /* 7 chars and a null */
 
/* The linkflag defines the type of file */
#define  LF_OLDNORMAL '\e0'       /* Normal disk file, Unix compatible */
#define  LF_NORMAL    '0'        /* Normal disk file */
#define  LF_LINK      '1'        /* Link to previously dumped file */
#define  LF_SYMLINK   '2'        /* Symbolic link */
#define  LF_CHR       '3'        /* Character special file */
#define  LF_BLK       '4'        /* Block special file */
#define  LF_DIR       '5'        /* Directory */
#define  LF_FIFO      '6'        /* FIFO special file */
#define  LF_CONTIG    '7'        /* Contiguous file */
 
/* Further link types may be defined later. */
 
/* Bits used in the mode field - values in octal */
#define  TSUID    04000        /* Set UID on execution */
#define  TSGID    02000        /* Set GID on execution */
#define  TSVTX    01000        /* Save text (sticky bit) */
 
/* File permissions */
#define  TUREAD   00400        /* read by owner */
#define  TUWRITE  00200        /* write by owner */
#define  TUEXEC   00100        /* execute/search by owner */
#define  TGREAD   00040        /* read by group */
#define  TGWRITE  00020        /* write by group */
#define  TGEXEC   00010        /* execute/search by group */
#define  TOREAD   00004        /* read by other */
#define  TOWRITE  00002        /* write by other */
#define  TOEXEC   00001        /* execute/search by other */
 *.fin
.*X*
.FIN
.*R*
 
All characters in header records are represented by using 8-bit characters in
the local variant of ASCII.  Each field within the structure is contiguous;
that is, there is no padding used within the structure.  Each character on the
archive medium is stored contiguously.
 
Bytes representing the contents of files (after the header record of each file)
are not translated in any way and are not constrained to represent characters
in any character set.  The tar format does not distinguish text files from
binary files, and no translation of file contents is performed.
 
The name, linkname, magic, uname, and gname are null-terminated character
strings.  All other fileds are zero-filled octal numbers in ASCII.  Each
numeric field of width w contains w-2 digits, a space, and a null, except size,
and mtime, which do not contain the trailing null.
 
The name field is the pathname of the file, with directory names (if any)
preceding the file name, separated by slashes.
 
The mode field provides nine bits specifying file permissions and three bits to
specify the Set UID, Set GID, and Save Text ("stick") modes.  Values for these
bits are defined above.  When special permissions are required to create a file
with a given mode, and the user restoring files from the archive does not hold
such permissions, the mode bit(s) specifying those special permissions are
ignored.  Modes which are not supported by the operating system restoring files
from the archive will be ignored.  Unsupported modes should be faked up when
creating or updating an archive; e.g. the group permission could be copied from
the other permission.
 
The uid and gid fields are the numeric user and group ID of the file owners,
respectively.  If the operating system does not support numeric user or group
IDs, these fields should be ignored.
 
The size field is the size of the file in bytes; linked files are archived with
this field specified as zero.  See section Extraction Options; in particular
the '-G' option.
 
The mtime field is the modification time of the file at the time it was
archived.  It is the ASCII representation of the octal value of the last time
the file was modified, represented as an integer number of seconds since
January 1, 1970, 00:00 Coordinated Universal Time.
 
The chksum field is the ASCII representation of the octal value of the simple
sum of all bytes in the header record.  Each 8-bit byte in the header is added
to an unsigned integer, initialized to zero, the precision of which shall be no
less than seventeen bits.  When calculating the checksum, the chksum field is
treated as if it were all blanks.
 
The typeflag field specifies the type of file archived.  If a particular
implementation does not recognize or permit the specified type, the file will
be extracted as if it were a regular file.  As this action occurs, tar issues a
warning to the standard error.
 
These represent a regular file.  In order to be compatible with older versions
of tar, a typeflag value of LF_OLDNORMAL should be silently recognized as a
regular file.  New archives should be created using LF_NORMAL.  Also, for
backward compatibility, tar treats a regular file whose name ends with a slash
as a directory.
 
This represents a file linked to another file, of any type, previously
archived.  Such files are identified in Unix by each file having the same
device and inode number.  The linked-to name is specified in the linkname field
with a trailing null.
 
This represents a symbolic link to another file.  The linked-to name is
specified in the linkname field with a trailing null.
 
These represent character special files and block special files respectively.
In this case the devmajor and devminor fields will contain the major and minor
device numbers respectively.  Operating systems may map the device
specifications to their own local specification, or may ignore the entry.
 
This specifies a directory or sub-directory.  The directory name in the name
field should end with a slash.  On systems where disk allocation is performed
on a directory basis the size field will contain the maximum number of bytes
(which may be rounded to the nearest disk block allocation unit) which the
directory may hold.  A size field of zero indicates no such limiting.  Systems
which do not support limiting in this manner should ignore the size field.
 
This specifies a FIFO special file.  Note that the archiving of a FIFO file
archives the existence of this file and not its contents.
 
This specifies a contiguous file, which is the same as a normal file except
that, in operating systems which support it, all its space is allocated
contiguously on the disk.  Operating systems which do not allow contiguous
allocation should silently treat this type as a normal file.
 
These are reserved for custom implementations.  Some of these are used in the
GNU modified format, as described below.
 
Other values are reserved for specification in future revisions of the P1003
standard, and should not be used by any tar program.
 
The magic field indicates that this archive was output in the P1003 archive
format.  If this field contains TMAGIC, the uname and gname fields will contain
the ASCII representation of the owner and group of the file respectively.  If
found, the user and group ID represented by these names will be used rather
than the values within the uid and gid fields.
 
 *..::L2 "GNU Extensions to the Archive Format"
 *.brf
.*R*
The GNU format uses additional file types to describe new types of files in an
archive.  These are listed below.
 
This represents a directory and a list of files created by the '-G' option.
The size field gives the total size of the associated list of files.  Each
filename is preceded by either a 'Y' (the file should be in this archive) or an
'N' (The file is a directory, or is not stored in the archive).  Each filename
is terminated by a null.  There is an additional null after the last filename.
 
This represents a file continued from another volume of a multi-volume archive
created with the '-M' option.  The original type of the file is not given here.
The size field gives the maximum size of this piece of the file (assuming the
volume does not end before the file is written out).  The offset field gives
the offset from the beginning of the file where this part of the file begins.
Thus size plus offset should equal the original size of the file.
 
This file type is used to mark the volume header that was given with the '-V'
option when the archive was created.  The name field contains the name given
after the '-V' option.  The size field is zero.  Only the first file in each
volume of an archive should have this type.
 
 
You may have trouble reading a GNU format archive on a non-GNU system if the
options '-G', '-M' or '-V' were used when writing the archive.
