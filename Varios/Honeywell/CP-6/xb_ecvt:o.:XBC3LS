

CC.C02    File=xb_ecvt:c.:XBC3TSI                                                   Fri Jan  6 1995  Page=1  
        1         1             /*T***********************************************************/
        2         2             /*T*                                                         */
        3         3             /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
        4         4             /*T*                                                         */
        5         5             /*T***********************************************************/
        6         6
        7         7             /*D* NAME: ecvt
        8         8                  PROTOTYPE:   char *ecvt(double value, int ndigit, int *decpt, int *sign);

        9         9                  DESCRIPTION: The ecvt function converts value into a null-
       10        10                               terminated string of ndigit digits and returns a
       11        11                               pointer to the string.  The high order digit is
       12        12                               non-zero unless the value is zero.  The low order
       13        13                               digit is rounded.  The position of the decimal
       14        14                               point is set to decpt.  If the sign of the result
       15        15                               is negative so is sign otherwise it is non-zero.
       16        16
       17        17                   WGE September  21, 1990
       18        18             */
       19        19
       20        20             char  *
       21        21             ecvt(double value, int ndigit, int * decpt, int *sign) {
       22        22    1           static char  buf[64];
       23        23    1           int   exponent;
       24        24    1           int   precision = 20;   /* Makes "not nice numbers" */
       25        25    1           int   temp;
       26        26    1           int   minus_temp;
       27        27    1
       28        28    1           XPN_7DTOLS(&value, buf, &precision, &temp, &exponent);
       29        29    1
       30        30    1           *decpt = precision + exponent;
       31        31    1
       32        32    1           minus_temp = -temp;
       33        33    1           XPN_5PREPARE_FOR_FIXED_FMT(buf, &temp, &minus_temp, &ndigit);
       34        34    1
       35        35    1           buf[ndigit+1] = '\0';
       36        36    1
CC.C02    File=xb_ecvt:c.:XBC3TSI                                                   Fri Jan  6 1995  Page=2  
       37        37    1           if (value > 0) {
       38        38    2              *sign = 0;
       39        39    2           }
       40        40    1           else {
       41        41    2              *sign = -1;
       42        42    2           }
       43        43    1
       44        44    1           return &buf[1];
       45        45    1        }
       46        46
       47        47             /*T***********************************************************/
       48        48             /*T*                                                         */
       49        49             /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
       50        50             /*T*                                                         */
       51        51             /*T***********************************************************/
       52        52
       53        53             /*D* NAME: fcvt
       54        54                  PROTOTYPE:   char *fcvt(double value, int ndigit, int *decpt, int *sign);

       55        55                  DESCRIPTION: The ecvt function converts value into a null-
       56        56                               terminated string of ndigit digits and returns a
       57        57                               pointer to the string.  The high order digit is
       58        58                               non-zero unless the value is zero.  The low order
       59        59                               digit is rounded like printf %f format.
       60        60                               The position of the decimal point is set to decpt.
       61        61                               If the sign of the result is negative so is the
       62        62                               sign otherwise it is non-zero.
       63        63
       64        64                   WGE September  21, 1990
       65        65             */
       66        66
       67        67             char *
       68        68             fcvt(double value, int ndigit, int * decpt, int *sign) {
       69        69    1           static char  buf[64];
       70        70    1           int   exponent;
       71        71    1           int   precision = 20;   /* Makes "not nice numbers" */
       72        72    1           int   temp;
CC.C02    File=xb_ecvt:c.:XBC3TSI                                                   Fri Jan  6 1995  Page=3  
       73        73    1
       74        74    1           XPN_7DTOLS(&value, buf, &precision, &temp, &exponent);
       75        75    1
       76        76    1           *decpt = precision + exponent;
       77        77    1
       78        78    1           XPN_5PREPARE_FOR_FIXED_FMT(buf, &temp, &exponent, &ndigit);
       79        79    1
       80        80    1           buf[*decpt+ndigit+1] = '\0';
       81        81    1
       82        82    1           if (value > 0) {
       83        83    2              *sign = 0;
       84        84    2           }
       85        85    1           else {
       86        86    2              *sign = -1;
       87        87    2           }
       88        88    1
       89        89    1           return &buf[1];
       90        90    1        }
       91        91
       92        92             /*T***********************************************************/
       93        93             /*T*                                                         */
       94        94             /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
       95        95             /*T*                                                         */
       96        96             /*T***********************************************************/
       97        97
       98        98             /*D* NAME: gcvt
       99        99                  PROTOTYPE:   char *gcvt(double value, int ndigit, char *buf);
      100       100                  DESCRIPTION: The gcvt function converts value into a null-
      101       101                               terminated string of ndigit digits into buf and
      102       102                               returns the string buf.  The high order digit is
      103       103                               non-zero unless the value is zero.  The low order
      104       104                               digit is rounded by using printf %f format unless
      105       105                               this is not possible otherwise it does a %e format.
      106       106
      107       107                   WGE September  21, 1990
      108       108             */
      109       109
CC.C02    File=xb_ecvt:c.:XBC3TSI                                                   Fri Jan  6 1995  Page=4  
      110       110             char  *
      111       111             gcvt(double value, int ndigit, char *buf) {
      112       112    1           char  tempbuf[64];
      113       113    1           char  tbuf[128];
      114       114    1           int   tbuf_len = 128;
      115       115    1           int   exponent;
      116       116    1           int   precision = 20;   /* Makes "not nice numbers" */
      117       117    1           int   digits;
      118       118    1           int   exponent_to_print;
      119       119    1           int   exponent_dig;
      120       120    1           int   buf_len;
      121       121    1           int   sign_mode = 0;
      122       122    1           int   precision_after_dec;
      123       123    1           int   old_fract_pos;
      124       124    1           int   fract_pos;
      125       125    1           int   first_non_blank;
      126       126    1
      127       127    1           XPN_7DTOLS(&value, tempbuf, &precision, &digits, &exponent);
      128       128    1
      129       129    1           exponent_to_print = exponent + digits - 1;
      130       130    1
      131       131    1        /*    We need to check to see if the number can be printed in fixed
      132       132    1              format.  if so we do it (this is the preferred way)           */
      133       133    1
      134       134    1           if ((exponent_to_print < -4) || (exponent_to_print > ndigit)) {
      135       135    2              XPN_5PREPARE_FOR_EXP_FMT(tempbuf, &digits, &exponent, &ndigit);
      136       136    2              if ((exponent_to_print > 99) || (exponent_to_print < -99))
      137       137    2                 exponent_dig = 3;
      138       138    2              else
      139       139    2                 exponent_dig = 2;
      140       140    2              buf_len = ndigit + 5 + exponent_dig;
      141       141    2              if (buf_len > 60)
      142       142    2                 buf_len = 60;
      143       143    2              XPN_7ERJE1(tbuf, &buf_len, tempbuf, &digits, &exponent,
      144       144    2                         &sign_mode, &exponent_dig);
      145       145    2
      146       146    2        /*    Now that conversion is finished strip of all trailing 0's     */
CC.C02    File=xb_ecvt:c.:XBC3TSI                                                   Fri Jan  6 1995  Page=5  
      147       147    2
      148       148    2
      149       149    2              old_fract_pos = fract_pos = buf_len - exponent_dig - 2 - 1;
      150       150    2              while (tbuf[fract_pos] == '0') {
      151       151    3                 tbuf[fract_pos--] = '\0';
      152       152    3              }
      153       153    2              if (old_fract_pos != fract_pos) {
      154       154    3                 memcpy(&tbuf[fract_pos+1], &tbuf[old_fract_pos+1], buf_len -  old_fra
                               ct_pos-1);
      155       155    3                 buf_len = buf_len - (old_fract_pos - fract_pos);
      156       156    3              }
      157       157    2              tbuf[buf_len] = '\0';
      158       158    2           }
      159       159    1           else {
      160       160    2              precision_after_dec = ndigit - (digits + exponent);
      161       161    2              XPN_5PREPARE_FOR_FIXED_FMT(tempbuf,&digits,&exponent,&precision_after_de
                               c);
      162       162    2              XPN_7FLJ(tbuf, &tbuf_len, tempbuf, &digits, &exponent,
      163       163    2                       &sign_mode, &buf_len);
      164       164    2
      165       165    2        /*    Time to strip off all the trailing zeros                      */
      166       166    2
      167       167    2              while (tbuf[buf_len-1] == '0')
      168       168    2                 tbuf[--buf_len] = '\0';
      169       169    2              if (tbuf[buf_len-1] == '.')
      170       170    2                 tbuf[--buf_len] = '\0';
      171       171    2              tbuf[buf_len] = '\0';
      172       172    2           }
      173       173    1
      174       174    1        /*    Copy the result into the output buffer and return but first
      175       175    1              remove all possible leading blanks                            */
      176       176    1
      177       177    1           first_non_blank = 0;
      178       178    1           while (tbuf[first_non_blank] == ' ')
      179       179    1              first_non_blank++;
      180       180    1           memcpy(buf, &tbuf[first_non_blank], buf_len+1-first_non_blank);
      181       181    1           return buf;
CC.C02    File=xb_ecvt:c.:XBC3TSI                                                   Fri Jan  6 1995  Page=6  
      182       182    1        }

No diagnostics were issued in the file xb_ecvt:c.:XBC3TSI
