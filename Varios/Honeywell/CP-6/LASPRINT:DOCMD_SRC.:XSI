DO$CMD:  Proc (Command_text, Optional_length, Optional_ErrCode)
         Materialize ($PR1 in Desc$);
/*
       DO$CMD passes a command to M$YC with Link=Yes; thus, this will do Ibex
         commands or M$Link functions.  For M$Link simulation, all command line
         DCB assigments will take place.
       DO$CMD may be called with one or two arguments; if the second argument
         is missing, we will assume that the calling routine has passed an
         argument descriptor via $PR1 (e.g. a Fortran CHARACTER variable).
       Andrew E. Birner, 27 Feb, '86
       Modified:         20 Oct, '86   Remove leading '!'; use I:GET_ARG_LEN
       Modified:         06 Oct, '87   Use Get_Arg_Len from :LIB.LIB
                                       Return errcode as Integer function
                                       Return errcode as optional Arg#3
                                       Check passed length if Arg#2=0.
*/
/*
**       Arguments:
*/
       Dcl Command_text Char (Command_text_length);
       Dcl Optional_length SBin Word Aligned;
       Dcl Optional_ErrCode Bit (36) Aligned;
       Dcl Command_text_length UBin Word;
       Dcl Desc$ Ptr;
/*
**       Monitor Entry Declarations and include files:
*/
%CP6$Ents;
/*
         TCB pointer, with TCB and related macro invocations . . .
*/
       DCL B$TCB$ PTR SYMREF;
       %B$TCB (STCLASS="BASED (B$TCB$)");
       %B$ALT;
       %B$EXCFR;
       %B$NWIO;
       %SUB_EXC;
/*
         Some useful SUBs . . .
*/
       %EQU ALTRET_ERR  = CHARTEXT ('B$TCB.ALT$->B$ALT.ERR');
       %EQU ALTRET_ERR# = CHARTEXT ('B$TCB.ALT$->B$ALT.ERR.ERR#');
       %EQU ALTRET_DCB# = CHARTEXT ('B$TCB.ALT$->B$ALT.DCB#');
 
       DCL B$JIT$ PTR SYMREF;
%INCLUDE B$JIT;
/*
**       Monitor Fpts
*/
       %Fpt_YC (Fptn=Pass_Command_to_Ibex,
                Echo=No,
                Link=Yes,
                NoErr=No,
                ReParse=No);
/*
**       Temp storage and utility routines:
*/
       Dcl  TempVec  Vector;
       Dcl  Dummy_ErrCode  Bit (36) Aligned;
       Dcl  Get_Arg_Len  Entry (4)  AltRet;
       Dcl  Fortran_Int_Func_Return  Entry (1);
%Eject;
Start:;
/*
**       Figure out the command length
*/
       If  Addr (Optional_length) = Addr (Nil)  then Do;
         Call  Get_Arg_Len  (Desc$, 1, Command_text_length)  WhenAltReturn Do;
           Call  M$XXX;
           Return;
         End;
        End; Else Do;
         If  Optional_length = 0  then Do;
           Call  Get_Arg_Len  (Desc$, 1, Command_text_length)  WhenAltReturn Do;
             Call  M$XXX;
             Return;
           End;
          End; Else Do;
           Command_text_length = Optional_length;
         End;
       End;
/*
**       Point the YC Fpt at the passed command; if the command starts with a
**         '!', though, ignore it.
*/
       If  SubStr (Command_text, 0, 1) = '!'  then Do;
         If  Command_Text_Length > 1  then Do;
           TempVec = Vector (Command_text);
           VBase (TempVec) = PincrC (VBase (TempVec), 1);
           VBound (TempVec) = VBound (TempVec) - 1;
           Pass_Command_to_Ibex.Cmd_ = TempVec;
          End; Else Do;
           Pass_Command_to_Ibex.Cmd_ = Vector (Nil);
         End;
        End; Else Do;
         Pass_Command_to_Ibex.Cmd_ = Vector (Command_text);
       End;
/*
**       Call M$YC, passing in our command; we have to deal with any
**         errors that come back, because any processor can return an
**         error code by specifying one on the M$Exit/Err/XXX call.
*/
       Call  M$YC  (Pass_Command_to_Ibex)  WhenReturn Do;
         Dummy_ErrCode = BinBit (0, 36);
        End; WhenAltReturn Do;
         Dummy_ErrCode = %AltRet_Err;
       End;
       If  Addr (Optional_ErrCode) ~= Addr (Nil)  then Do;
         Optional_ErrCode = Dummy_ErrCode;
       End;
       Call  Fortran_Int_Func_Return  (Dummy_ErrCode);
       Call  M$XXX; /* We should never get back here, of course . . . */
End    Do$Cmd;
