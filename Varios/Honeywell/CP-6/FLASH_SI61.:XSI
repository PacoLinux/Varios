/*M* FLASH_SI61 - PL6 SUBROUTINES FOR FLASH.X */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=3,CTI=3,SDI=3,MCL=10,CSI=0,ECI=0 */
 
 
%SET LISTSUB='1'B;
 
 
ERRPRINT: PROC (ERRCODE, UNIT);
/*
       ERRPRINT looks up and prints (on M$DO) a standard CP-6
       error message given a CP-6 error code (e.g. FORTRAN iostat
       value).  If a unit is passed in, as integer unit number
       or text DCB name, the corresponding DCB is used for name,
       account, etc., substitutions in the error message.
 
       Andrew E. Birner, 2 Dec,'82
*/
/********************************************************************
*                                                                   *
* This program  is a gratuitous contribution and  is offered as is. *
* Zenith  makes  no  representations  or  warranties  of  any kind, *
* express  or  implied,  relating  to  freedom  from  infringement, *
* accuracy,  error-freedom  or   performance,  and  shall  have  no *
* liability  or responsibility  to users  for damages  of any kind, *
* including special, indirect or consequential damages, arising out *
* of  or resulting  from use,  modification or  reproduction of the *
* program.                                                          *
*                                                                   *
* No  warranty  is  made  by  the  contributor  as to the accuracy, *
* maintenance, and functioning of the program and related material. *
* No  responsibility is  assumed by  the contributor  in connection *
* therewith.                                                        *
*                                                                   *
********************************************************************/
DCL ERRCODE UBIN WORD;
DCL UNIT CHAR(4);
 
DCL M$DO DCB;
       %CP6$ENTS;
 
DCL FIND$DCB ENTRY(3);                  /* FROM :LIB.LIB */
DCL DCB_NUMB SBIN WORD;
 
       %FPT_ERRMSG (OUTDCB1=M$DO, RESULTS=VLR_ERRMSG);
       %VLR_ERRMSG;
DCL BUFFR CHAR(960);
%Eject;
START:;
     IF ADDR(UNIT) ~= ADDR(NIL) THEN DO;
        CALL FIND$DCB (UNIT, DCB_NUMB, '0'B);
        If DCB_Numb > 0 then Do;
           Fpt_ErrMsg.V.DCB# = DCB_Numb;
           End; Else Do;
           Fpt_ErrMSg.V.DCB# = 0;
           End;
        END; ELSE DO;
        FPT_ERRMSG.V.DCB# = 0;
        END;
 
     FPT_ERRMSG.BUF_ = VECTOR(BUFFR);
     FPT_ERRMSG.CODE_ = VECTOR(ERRCODE);
 
     Call M$ErrMsg (Fpt_ErrMsg) WhenAltReturn Do; End;
 
     Return;
 
END    ERRPRINT;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
FIND$DCB: PROC (UNIT, DCB_NUM, BUILD);
/**************************************************************\
*                                                              *
*                       F I N D $ D C B                        *
*                                                              *
****************************************************************
*                                                              *
*          THIS ROUTINE SEARCHES THE DCB TABLE FOR THE NUMBER  *
*      OF THE SUPPLIED DCB. THE SUPPLIED DCB MAY BE IN TEXT    *
*      FORMAT, IT MAY BE A FORTRAN UNIT NUMBER, OR IT MAY BE   *
*      A DCB NUMBER IN THE LEFTMOST HALFWORD PASSED; THIS LAST *
*      IS THE FORMAT COBOL USES WHEN PASSING AN FD NAME VIA    *
*      AN 'ENTER PL-6' TYPE CALL.                              *
*                                                              *
*      If a DCB name or Fortran Unit Number is passed,         *
*      this routine will attempt to create the DCB if it does  *
*      not exist.  If the third argument, BUILD, is provided,  *
*      it will serve as a flag indicating whether (.TRUE.) or  *
*      not (.FALSE.) to create the DCB if it does not exist.   *
*      If a DCB number is passed, under no circumstances will  *
*      FIND$DCB attempt to build a DCB.                        *
*                                                              *
****************************************************************
*                                                              *
*              PROGRAM BY:     STEPHEN C. BERGEON              *
*                              SCIENTIFIC COMPUTING SERVICES   *
*                              ZENITH RADIO CORPORATION        *
*                              GLENVIEW IL.  60025             *
*                                                              *
*              <* MODIFIED 30 JUL,'81 -- A. E. BIRNER *>       *
*              <* MODIFIED 25 SEP,'81 -- A. E. BIRNER *>       *
*              <* RENAMED  17 MAY,'84 -- A. E. BIRNER *>       *
*                  (Getput junk eliminated)                    *
*                                                              *
\**************************************************************/
/********************************************************************
*                                                                   *
* This program  is a gratuitous contribution and  is offered as is. *
* Zenith  makes  no  representations  or  warranties  of  any kind, *
* express  or  implied,  relating  to  freedom  from  infringement, *
* accuracy,  error-freedom  or   performance,  and  shall  have  no *
* liability  or responsibility  to users  for damages  of any kind, *
* including special, indirect or consequential damages, arising out *
* of  or resulting  from use,  modification or  reproduction of the *
* program.                                                          *
*                                                                   *
* No  warranty  is  made  by  the  contributor  as to the accuracy, *
* maintenance, and functioning of the program and related material. *
* No  responsibility is  assumed by  the contributor  in connection *
* therewith.                                                        *
*                                                                   *
********************************************************************/
%EJECT;
 
       %INCLUDE CP_6;
 
       %FPT_GETDCB(DCBNAME=DCBNAME,DCBNUM=NUM,MERGE=YES);
       %VLP_NAME(FPTN=DCBNAME);
 
DCL 1 UNIT,                             /* DECLARE PARAMETERS */
       2 FORT SBIN WORD,
       2 COBOL REDEF FORT,
          3 DCB_NUM UBIN HALF UNAL,
          3 * UBIN HALF UNAL,
       2 FILLER CHAR(28);
DCL TEXTUNIT REDEF UNIT CHAR(32);
DCL DCB_NUM SBIN WORD;
DCL BUILD BIT(1) UNAL;
 
DCL GIVEN_NAME CHAR(32);                /* LOCAL VARIABLES */
DCL GIVEN_LENGTH SBIN WORD;
DCL 1 GIVEN_LENGTH_REMAP REDEF GIVEN_LENGTH,
       2 * UBIN(27) UNAL,
       2 SIZE UBIN BYTE UNAL;
DCL TABLE_NAME CHAR(32);
DCL TABLE_LENGTH SBIN WORD;
DCL A_CHAR CHAR(1);
DCL NUM SBIN WORD STATIC;
DCL TRY_TO_GET BIT(1);
 
DCL NUMTONAM ENTRY(3);
DCL CHKDCB$ ENTRY(3);
 
%EJECT;
START:
         /* Set flag for attempted build */
 
     IF ADDR(BUILD) ~= ADDR(NIL) THEN
        TRY_TO_GET = BUILD;
     ELSE
        TRY_TO_GET = '1'B;
 
     IF UNIT.FORT > 0 & UNIT.FORT <= 262143 THEN
     DO;
        CALL NUMTONAM(UNIT.FORT,GIVEN_NAME,GIVEN_LENGTH);
        CALL INSERT(GIVEN_NAME,GIVEN_LENGTH,1,' ');
        GOTO FINDIT;
        END;
     ELSE
     DO;
        NUM = UNIT.COBOL.DCB_NUM;
        IF NUM > 0 & NUM < 512 THEN
        DO;                   /* CHECK TO SEE IF THIS IS REALLY A DCB NUMBER */
           CALL CHKDCB$(NUM,TABLE_NAME,TABLE_LENGTH);
           IF TABLE_LENGTH > 0 THEN
              DCB_NUM = NUM;
           ELSE
              DCB_NUM = -1;
           RETURN;
           END;
        END;
 
     NUM = 0;                           /* LOOK FOR '0'O OR ' 'C */
     DO WHILE (NUM < 31);
        IF SUBSTR(TEXTUNIT,NUM,1) = ' '  OR
           ASCBIN(SUBSTR(TEXTUNIT,NUM,1)) = 0 THEN GOTO MOVEIT;
        NUM = NUM + 1;
        END;
 
MOVEIT:
     GIVEN_LENGTH = NUM;                /* NAME IS THIS LENGTH */
     GIVEN_NAME = SUBSTR(TEXTUNIT,0,GIVEN_LENGTH);
%EJECT;
FINDIT:
     NUM = 1;
TOP:
     CALL CHKDCB$(NUM,TABLE_NAME,TABLE_LENGTH);
     IF TABLE_LENGTH = 0 THEN           /* Empty table position */
     DO;
        NUM = NUM + 1;
        GOTO TOP;
        END;
 
     IF TABLE_LENGTH < 0 THEN DO;       /* Beyond end of table; DCB not found */
        IF TRY_TO_GET THEN DO;
           DCBNAME.NAME# = GIVEN_NAME;
           DCBNAME.L# = GIVEN_LENGTH_REMAP.SIZE;
           CALL M$GETDCB(FPT_GETDCB) WHENRETURN DO;
              DCB_NUM = NUM;
              END; WHENALTRETURN DO;
              DCB_NUM = -2;
              END;
           END; ELSE DO;
           DCB_NUM = -1;
           END;
        RETURN;
        END;
                                        /* Check for a name match */
     IF  GIVEN_LENGTH = TABLE_LENGTH &
        SUBSTR(GIVEN_NAME,0,GIVEN_LENGTH) = SUBSTR(TABLE_NAME,0,TABLE_LENGTH)
     THEN DO;
        DCB_NUM = NUM;
        RETURN;
        END;
 
     NUM = NUM + 1;
     GOTO TOP;
 
END    FIND$DCB;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
CHKDCB$:PROC (NUM,STR,STRLEN) NOAUTO;
/******************************************************
*                                                     *
*                      C H K D C B                    *
*                                                     *
*******************************************************
*                                                     *
*          THIS PROGRAM CHECKS THE DCB TABLE FOR      *
*      DCB NUMBER 'NUM', IF THAT IS NOT A VALID       *
*      POSITION IN THE TABLE, CHKDCB RETURNS WITH     *
*      STRLEN = -1, IF THERE IS NO DCB IN THAT        *
*      POSITION IN THE TABLE, CHKDCB RETURNS WITH     *
*      STRLEN = 0, IF THE DCB EXISTS, STR RECIEVES    *
*      THE NAME OF THE DCB AND STRLEN RECIEVES THE    *
*      LENGTH OF THE NAME.                            *
*                                                     *
*******************************************************
*                                                     *
*           PROGRAM BY: STEPHEN C. BERGEON            *
*                       SCIENTIFIC COMPUTING SERVICES *
*                       ZENITH RADIO CORPORATION      *
*                       1000 MILWAUKEE AVE.           *
*                       GLENVIEW IL.  60025           *
*                                                     *
******************************************************/
/********************************************************************
*                                                                   *
* This program  is a gratuitous contribution and  is offered as is. *
* Zenith  makes  no  representations  or  warranties  of  any kind, *
* express  or  implied,  relating  to  freedom  from  infringement, *
* accuracy,  error-freedom  or   performance,  and  shall  have  no *
* liability  or responsibility  to users  for damages  of any kind, *
* including special, indirect or consequential damages, arising out *
* of  or resulting  from use,  modification or  reproduction of the *
* program.                                                          *
*                                                                   *
* No  warranty  is  made  by  the  contributor  as to the accuracy, *
* maintenance, and functioning of the program and related material. *
* No  responsibility is  assumed by  the contributor  in connection *
* therewith.                                                        *
*                                                                   *
********************************************************************/
 
/* DECLARE PARAMETERS */
 
DCL NUM SBIN WORD;
DCL STR CHAR(STRLEN);
DCL STRLEN SBIN WORD;
 
/* GET THE POINTER TO THE READ ONLY SEGMENT */
 
DCL B$ROS$ PTR SYMREF;
 
/* DECLARE MAP FOR START OF READ ONLY SEGMENT */
 
       %INCLUDE B$ROSEG;
 
/* LETS INCLUDE A BASED DCB DEFINITION */
 
       %F$DCB (DCBN=F$DCB);
 
/* LETS GET DOWN TO BUSINESS */
 
START:
 
         /*  Does NUM lie within the table?  */
 
     IF NUM < 0 | NUM > B$ROS$->B$ROSEG.NUMDCBS THEN DO;
        STRLEN = -1;
        RETURN;
        END;
 
         /*  Does the specified DCB exist?  */
 
     IF B$ROS$->B$ROSEG.DCBPTR$->B$RODCB$(NUM) = ADDR(NIL) THEN DO;
        STRLEN = 0;
        RETURN;
        END;
 
         /*  Return the text name of the specified DCB.  */
 
     STRLEN = B$ROS$->B$ROSEG.DCBPTR$->B$RODCB$(NUM)->F$DCB.DCBNAME.L;
     STR = B$ROS$->B$ROSEG.DCBPTR$->B$RODCB$(NUM)->F$DCB.DCBNAME.N;
     RETURN;
 
END    CHKDCB$;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
NUMTONAM: PROC (UNITNUM, NAME, LEN);
/*
       NUMTONAM takes in an INTEGER unit number (ala FORTRAN)
       and returns a text DCB name of the form 'F$nnn...', where
       'nnn...' is the text representation of the unit number
       passed.  (UNITNUM = 13 results in NAME = 'F$13 ', LEN = 4.)
       If UNITNUM is not a valid FORTRAN unit number, LEN returns
       zero (0).
 
       Andrew E. Birner, 13 Jan, '83
*/
/********************************************************************
*                                                                   *
* This program  is a gratuitous contribution and  is offered as is. *
* Zenith  makes  no  representations  or  warranties  of  any kind, *
* express  or  implied,  relating  to  freedom  from  infringement, *
* accuracy,  error-freedom  or   performance,  and  shall  have  no *
* liability  or responsibility  to users  for damages  of any kind, *
* including special, indirect or consequential damages, arising out *
* of  or resulting  from use,  modification or  reproduction of the *
* program.                                                          *
*                                                                   *
* No  warranty  is  made  by  the  contributor  as to the accuracy, *
* maintenance, and functioning of the program and related material. *
* No  responsibility is  assumed by  the contributor  in connection *
* therewith.                                                        *
*                                                                   *
********************************************************************/
DCL UNITNUM SBIN;
DCL NAME CHAR(32);
DCL LEN SBIN;
 
DCL I UBIN;
DCL J UBIN;
 
START:;
     IF UNITNUM <= 0 THEN DO;
        LEN = 0;
        RETURN;
        END;
 
     J = UNITNUM;
     I = UNITNUM/10;
     LEN = 1;
     DO WHILE I ~= 0;
        I = I/10;
        LEN = LEN + 1;
        END;
 
     CALL BINCHAR (SUBSTR(NAME,2,LEN), J);
     SUBSTR (NAME,0,2) = 'F$';
     LEN = LEN + 2;
     RETURN;
 
END    NUMTONAM;
