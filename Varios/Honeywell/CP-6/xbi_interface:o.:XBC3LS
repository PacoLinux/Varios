

CC.C02    File=xbi_interface:c.:XBC3TSI                                             Fri Jan  6 1995  Page=1  
        1         1             /*T***********************************************************/
        2         2             /*T*                                                         */
        3         3             /*T* COPYRIGHT, (C) HONEYWELL BULL INC., 1988                */
        4         4             /*T*                                                         */
        5         5             /*T***********************************************************/
        6         6             /* we don't want errno, stdin, stdout, stderr to be referenced! */
        7         7             #define __errno
        8         8             #define __standard_files
        9         9
       10        10             #include <stdio.h>
       11        11             #include <stdlib.h>
       12        12             #include <signal.h>
       13        13             #include <string.h>
       14        14             #include <locale.h>
       15        15             #include <limits.h>
       16        16             #include <time.h>
       17        17
       18        18             /* define the runtime library equivalents of the global variables */
       19        19
       20        20             extern long *ERRNO_P;
       21        21             extern FILE *STDIN_P, *STDOUT_P, *STDERR_P;
       22        22
       23        23             void XBI$FPUTS (value, stream, result)
       24        24                /*I*  NAME: XBI$FPUTS
       25        25                      PURPOSE: PL6 callable entry to fputs
       26        26                */
       27        27
       28        28                char *value;
       29        29                FILE *stream;
       30        30                int *result;
       31        31             {
       32        32    1           *result = fputs (value, stream);
       33        33    1        }
       34        34
       35        35             void XBI$STRTOL (str, strend, base, result)
       36        36                /*I*  NAME: XBI$STRTOL
       37        37                      PURPOSE: PL6 callable entry to strtol.
CC.C02    File=xbi_interface:c.:XBC3TSI                                             Fri Jan  6 1995  Page=2  
       38        38                */
       39        39
       40        40                unsigned *base;
       41        41                long *result;
       42        42                char *str, **strend;
       43        43             {
       44        44    1           *result = strtol (str, strend, *base);
       45        45    1        }
       46        46
       47        47             void XBI$STRTOUL (str, strend, base, result)
       48        48                /*I*  NAME: XBI$STRTOUL
       49        49                      PURPOSE: PL6 callable entry to strtoul.
       50        50                */
       51        51
       52        52                unsigned *base;
       53        53                long *result;
       54        54                char *str, **strend;
       55        55             {
       56        56    1           *result = strtoul (str, strend, *base);
       57        57    1        }
       58        58
       59        59             int puts (s)
       60        60                /*D*  NAME: puts
       61        61                      PROTOTYPE: int puts (const char *s, FILE *stream);
       62        62                      DESCRIPTION: Writes the string s and a newline char to stdout.
       63        63                         If successful, zero
       64        64                         is returned.  If unsuccessful a nonzero value is returned.
       65        65                         Many programs seem to assume that the value EOF is returned in
       66        66                         case of an error so EOF is used as the "nonzero value".
       67        67                */
       68        68
       69        69                char *s;
       70        70             {
       71        71    1           if (fputs (s, STDOUT_P) == EOF) return EOF;
       72        72    1           return fputc ('\n', STDOUT_P);
       73        73    1        }
       74        74
CC.C02    File=xbi_interface:c.:XBC3TSI                                             Fri Jan  6 1995  Page=3  
       75        75             void abort ()
       76        76                /*D*  NAME: abort
       77        77                      PROTOTYPE: void abort (void);
       78        78                      PURPOSE: Raises a SIGABRT signal.
       79        79                */
       80        80
       81        81             {
       82        82    1           raise (SIGABRT);
       83        83    1        }
       84        84
       85        85             void perror (s)
       86        86                /*D*  NAME: perror
       87        87                      PROTOTYPE: void perror (const char *s);
       88        88                      PURPOSE: Writes user supplied string s and text associated with
       89        89                         the current value of errno.
       90        90                */
       91        91
       92        92                char *s;
       93        93             {
       94        94    1           static const char  perror_format1[] = "%s: ";
       95        95    1           static const char  perror_format2[] = "%s\n";
       96        96    1
       97        97    1           if (s != NULL) fprintf (STDERR_P, perror_format1, s);
       98        98    1           fprintf (STDERR_P, perror_format2, strerror (*ERRNO_P));
       99        99    1        }
      100       100
      101       101
      102       102             void
      103       103             _assert (const char *filename, int line_number, const char *exp)
      104       104             {
      105       105    1           static const char assert_format[]= "Assertion failed in file %s, line %d: %
                               s\n";
      106       106    1
      107       107    1           (void)fprintf(STDERR_P, assert_format, filename, line_number, exp);
      108       108    1           abort ( );
      109       109    1        }
      110       110
CC.C02    File=xbi_interface:c.:XBC3TSI                                             Fri Jan  6 1995  Page=4  
      111       111             #pragma  LIST  EJECT
CC.C02    File=xbi_interface:c.:XBC3TSI                                             Fri Jan  6 1995  Page=5  
      112       112
      113       113             /*F* NAME: tmpnam
      114       114                  PROTOTYPE:   char *tmpnam (char *buff);
      115       115                  DESCRIPTION: generates a unique filename that currently does not
      116       116                               exist in the file directory. If buff is null then a
      117       117                               pointer is returned to the new filename string. This
      118       118                               string will be modified by subsequent calls to this
      119       119                               routine. If buff is not null it must point to an array
      120       120                               of not less than L_tmpnam characters (defined in stdio)
      121       121                               and tmpnam will copy the new filename into buff and
      122       122                               return a pointer to it. If tmpnam fails then a null
      123       123                               pointer is returned.
      124       124                   WGE April 25, 1990
      125       125             */
      126       126             char *
      127       127             tmpnam(char *buff) {
      128       128    1           static char mybuf[L_tmpnam];
      129       129    1           static int  cur_file = 0;
      130       130    1
      131       131    1           mybuf[0] = '\0';
      132       132    1           if(CREATE_TMPFILE("*tmpC_", (char *) 0, 9999, &cur_file, mybuf)) {
      133       133    2              if (buff) {
      134       134    3                 *buff = '\0';
      135       135    3              }
      136       136    2              return((char *) 0);
      137       137    2           }
      138       138    1           else {
      139       139    2              if (buff) {
      140       140    3                 memcpy(buff, mybuf, L_tmpnam);
      141       141    3                 return(buff);
      142       142    3              }
      143       143    2              else
      144       144    2                 return(mybuf);
      145       145    2           }
      146       146    1        }
      147       147
---  Include file information  ---
CC.C02    File=xbi_interface:c.:XBC3TSI                                             Fri Jan  6 1995  Page=6  

   stdio:h.:XBC3TOU. is referenced
   stdlib:h.:XBC3TOU. is referenced
   signal:h.:XBC3TOU. is referenced
   string:h.:XBC3TOU. is referenced
   locale:h.:XBC3TOU. is referenced
   limits:h.:XBC3TOU. is referenced
   time:h.:XBC3TOU. is referenced

No diagnostics were issued in the file xbi_interface:c.:XBC3TSI
