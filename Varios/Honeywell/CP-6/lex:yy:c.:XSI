#define FLEX_COMPRESSED
/* A lexical scanner generated by flex */
 
/* scanner skeleton version:
 * $Header: flex.skel,v 2.0 89/06/20 15:49:46 vern Locked $
 */
 
#include <stdio.h>
 
#define FLEX_SCANNER
 
/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
 
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) /* size of input buffer */
#endif
 
/* returned upon end-of-file */
#define YY_END_TOK 0
 
/* copy whatever the last rule matched to the standard output */
 
#define ECHO fputs( yytext, yyout )
 
/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#define YY_INPUT(buf,result,max_size) \
  if ((result = fread (buf, (size_t) 1, (size_t)max_size, yyin)) <0) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );
#define YY_NULL 0
#define yyterminate() return ( YY_NULL )
 
/* report a fatal error */
#define YY_FATAL_ERROR(msg) \
	{ \
	fputs( msg, stderr ); \
	putc( '\n', stderr ); \
	exit( 1 ); \
	}
 
/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1
 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *
 
/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
 
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE goto new_file
 
/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#ifdef __STDC__
#define YY_DECL int yylex( void )
#else
#define YY_DECL int yylex()
#endif
 
/* code executed at the end of each rule */
#define YY_BREAK break;
 
#define YY_END_OF_BUFFER_CHAR 0
 
/* done after the current pattern has been matched and before the
 * corresponding action - sets up yytext
 */
#define YY_DO_BEFORE_ACTION \
	yytext = yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;
 
/* returns the length of the matched text */
#define yyleng (yy_cp - yy_bp)
 
#define EOB_ACT_RESTART_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
 
/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	{ \
	*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
	yy_c_buf_p = yy_cp = yy_bp + n; \
	YY_DO_BEFORE_ACTION; /* set up yytext again */ \
	}
 
#define unput(c) yyunput( c, yy_bp )
 
#define YY_USER_ACTION
 
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
char *yytext;
register char *yy_cp, *yy_bp;
 
#ifndef __STDC__
#define const
#endif
 
# line 1 "zbn$scan:l.:ZBC1SI"
#define INITIAL 0
# line 2 "zbn$scan:l.:ZBC1SI"
/*
 * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
 * See the copyright notice in the ACK home directory, in the file "Copyright".
 */
#ifndef NORCSID
static char rcsid2[]= "$Header: scan.l,v 0.4 87/03/12 08:23:08 ceriel Exp $";
#endif

char *mystrcpy();
int   myatoi();

int lineno=1;
extern char *filename;
# line 17 "zbn$scan:l.:ZBC1SI"
#define YY_END_OF_BUFFER 33
typedef int yy_state_type;
static const short int yy_acclist[83] =
    {   0,
       30,   30,   33,   31,   32,   30,   31,   32,   29,   32,
       14,   31,   32,   31,   32,   31,   32,   31,   32,   31,
       32,   31,   32,   24,   31,   32,   24,   31,   32,   31,
       32,    6,   31,   32,   16,   31,   32,    8,   31,   32,
       25,   31,   32,   25,   31,   32,   31,   32,   15,   31,
       32,   31,   32,   30,    5,   27,   21,   22,   26,   23,
       26,   11,    1,   24,   28,   12,    7,    4,    9,   13,
       25,   25,   10,   26,   24,   20,   17,   19,   18,    3,
       25,    2
    } ;

static const short int yy_accept[70] =
    {   0,
        1,    2,    3,    4,    6,    9,   11,   14,   16,   18,
       20,   22,   24,   27,   30,   32,   35,   38,   41,   44,
       47,   49,   52,   54,   55,   56,   56,   57,   58,   59,
       60,   62,   63,   64,   65,   66,   66,   66,   66,   66,
       67,   68,   69,   70,   71,   72,   73,   74,   74,   74,
       74,   75,   76,   77,   78,   79,   80,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   83,   83,   83
    } ;

static const char yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,    1,    1,
        1,   10,    1,    1,    1,    1,   11,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,    1,   15,
       16,   17,    1,    1,   18,   18,   18,   18,   18,   18,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
        1,    1,    1,    1,   19,    1,   20,   21,   22,   20,

       23,   21,   24,   24,   25,   24,   24,   26,   24,   27,
       28,   24,   24,   29,   24,   24,   24,   24,   30,   31,
       24,   24,    1,   32,    1,   33,    1
    } ;

static const char yy_meta[34] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    1,    1,    1,    1,    3,    4,    3,
        3,    3,    3,    4,    4,    4,    4,    4,    4,    4,
        4,    1,    1
    } ;

static const short int yy_base[78] =
    {   0,
        0,  123,  128,  130,  125,  130,  110,  120,   22,   24,
      115,  113,   26,   28,   22,   30,  106,   37,    0,   43,
       89,  130,   46,  118,  130,  114,  130,   51,   53,    0,
        0,  130,  130,   55,  130,    0,   96,   41,   89,  130,
      130,  130,  130,  130,    0,   61,  130,   73,   75,   85,
        0,    0,  130,  130,  130,  130,    0,   76,   69,   71,
       47,   55,   79,   81,   86,  130,   87,  130,   94,   96,
       98,  100,  102,   47,  104,  108,  112
    } ;

static const short int yy_def[78] =
    {   0,
       68,    1,   68,   68,   68,   68,   68,   69,   68,   70,
       68,   68,   68,   68,   68,   68,   68,   68,   71,   72,
       68,   68,   68,   68,   68,   69,   68,   68,   68,   73,
       73,   68,   68,   68,   68,   74,   68,   68,   68,   68,
       68,   68,   68,   68,   71,   75,   68,   68,   68,   68,
       73,   74,   68,   68,   68,   68,   71,   68,   68,   76,
       68,   76,   77,   68,   77,   68,   77,    0,   68,   68,
       68,   68,   68,   68,   68,   68,   68
    } ;

static const short int yy_nxt[164] =
    {   0,
        4,    5,    6,    7,    8,    4,    9,   10,   11,    4,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   22,   28,   28,   29,   29,   34,   34,   34,
       34,   30,   30,   37,   40,   41,   35,   48,   35,   52,
       38,   39,   43,   44,   45,   45,   36,   49,   49,   63,
       45,   45,   28,   28,   29,   29,   34,   34,   54,   64,
       55,   50,   45,   45,   48,   63,   58,   58,   45,   45,
       60,   66,   48,   67,   49,   49,   49,   49,   66,   66,
       67,   67,   49,   49,   26,   61,   26,   26,   31,   31,

       45,   45,   46,   46,   51,   51,   57,   57,   62,   59,
       62,   62,   65,   65,   65,   65,   56,   53,   27,   24,
       47,   42,   33,   32,   27,   25,   24,   68,   23,    3,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68
    } ;

static const short int yy_chk[164] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    9,    9,   10,   10,   13,   13,   14,
       14,   10,   10,   15,   16,   16,   13,   23,   14,   74,
       15,   15,   18,   18,   20,   20,   13,   23,   23,   62,
       20,   20,   28,   28,   29,   29,   34,   34,   38,   61,
       38,   23,   46,   46,   48,   60,   49,   58,   46,   46,
       58,   63,   64,   63,   48,   48,   49,   49,   65,   67,
       65,   67,   64,   64,   69,   59,   69,   69,   70,   70,

       71,   71,   72,   72,   73,   73,   75,   75,   76,   50,
       76,   76,   77,   77,   77,   77,   39,   37,   26,   24,
       21,   17,   12,   11,    8,    7,    5,    3,    2,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68
    } ;

yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
char *yy_full_match;
int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
 
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
static char *yy_c_buf_p;	/* points to current character in buffer */
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */
 
/* true when we've seen an EOF for the current input file */
static int yy_eof_has_been_seen;
 
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
 
/* yy_ch_buf has to be 2 characters longer than YY_BUF_SIZE because we need
 * to put in 2 end-of-buffer characters (this is explained where it is
 * done) at the end of yy_ch_buf
 */
static char yy_ch_buf[YY_BUF_SIZE + 2];
 
/* yy_hold_char holds the character lost when yytext is formed */
static char yy_hold_char;
 
static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;
 
#ifdef __STDC__
static yy_state_type yy_get_previous_state( void );
static int yy_get_next_buffer( void );
static void yyunput( int c, char *buf_ptr );
static int input( void );
static void yyrestart( FILE *input_file );
#else
static yy_state_type yy_get_previous_state();
static int yy_get_next_buffer();
static void yyunput();
static int input();
static void yyrestart();
#endif
 
YY_DECL
    {
    register yy_state_type yy_current_state;
    register int yy_act;
 

 
    if ( yy_init )
	{
	if ( ! yy_start )
	    yy_start = 1;	/* first start state */
 
	if ( ! yyin )
	    yyin = stdin;
 
	if ( ! yyout )
	    yyout = stdout;
 
new_file:
	/* this is where we enter upon encountering an end-of-file and
	 * yywrap() indicating that we should continue processing
	 */
 
	/* we put in the '\n' and start reading from [1] so that an
	 * initial match-at-newline will be true.
	 */
 
	yy_ch_buf[0] = '\n';
	yy_n_chars = 1;
 
	/* we always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
 
	yy_eof_has_been_seen = 0;
 
	yytext = yy_c_buf_p = &yy_ch_buf[1];
	yy_hold_char = *yy_c_buf_p;
	yy_init = 0;
	}
 
    while ( 1 )		/* loops until end-of-file is reached */
	{
	yy_cp = yy_c_buf_p;
 
	/* support of yytext */
	*yy_cp = yy_hold_char;
 
	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;
 
	yy_current_state = yy_start;
	if ( yy_bp[-1] == '\n' )
	    ++yy_current_state;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;
	do
	    {
	    register char yy_c = yy_ec[*yy_cp];
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 69 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    *yy_state_ptr++ = yy_current_state;
	    ++yy_cp;
	    }
	while ( yy_current_state != 68 );
 
	/* bogus while loop to let YY_BACK_TRACK, EOB_ACT_LAST_MATCH,
	 * and EOF actions branch here without introducing an optimizer-
	 * daunting goto
	 */
	while ( 1 )
	    {
	    yy_current_state = *--yy_state_ptr;
	    yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backtracking */
	    for ( ; ; ) /* until we find what rule we matched */
		{
		if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
		    {
		    yy_act = yy_acclist[yy_lp];
			{
			yy_full_match = yy_cp;
			break;
			}
		    }
		--yy_cp;
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
		}
 
	    YY_DO_BEFORE_ACTION;
	    YY_USER_ACTION;
 
#ifdef FLEX_DEBUG
	    fprintf( stderr, "--accepting rule #%d (\"%s\")\n",
		     yy_act, yytext );
#endif
 
do_action:	/* this label is used only to access EOF actions */
	    switch ( yy_act )
		{
case 1:
# line 18 "zbn$scan:l.:ZBC1SI"
{ char c;
                          c = input(); if (c=='\n') lineno++;
                          do {
                                while (c!='*') {
                                        c = input();
             if (c=='\n') lineno++;
          }
                                c = input();
          if (c=='\n') lineno++;
                          } while (c!='/');
                        }
	YY_BREAK
case 2:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 29 "zbn$scan:l.:ZBC1SI"
{
         int ind,ind2;
         for (ind=0; yytext[ind] < '0' || yytext[ind]>'9'; ind++)
          ;
         lineno=atoi(&yytext[ind])-1;
         for(;yytext[ind]!='"';ind++)
          ;
         for(ind2=ind+1;yytext[ind2]!='"';ind2++)
          ;
         yytext[ind2]=0;
         if (strcmp(yytext+ind+1,filename)!=0)
          filename=mystrcpy(yytext+ind+1);
       }
	YY_BREAK
case 3:
# line 42 "zbn$scan:l.:ZBC1SI"
{ if (!emhere || (yylval.yy_int=mlookup(yytext))==0)
          REJECT;
         return(EMMNEM);
       }
	YY_BREAK
case 4:
# line 47 "zbn$scan:l.:ZBC1SI"
return(CMPEQ);
	YY_BREAK
case 5:
# line 48 "zbn$scan:l.:ZBC1SI"
return(CMPNE);
	YY_BREAK
case 6:
# line 49 "zbn$scan:l.:ZBC1SI"
return(CMPLT);
	YY_BREAK
case 7:
# line 50 "zbn$scan:l.:ZBC1SI"
return(CMPLE);
	YY_BREAK
case 8:
# line 51 "zbn$scan:l.:ZBC1SI"
return(CMPGT);
	YY_BREAK
case 9:
# line 52 "zbn$scan:l.:ZBC1SI"
return(CMPGE);
	YY_BREAK
case 10:
# line 53 "zbn$scan:l.:ZBC1SI"
return(OR2);
	YY_BREAK
case 11:
# line 54 "zbn$scan:l.:ZBC1SI"
return(AND2);
	YY_BREAK
case 12:
# line 55 "zbn$scan:l.:ZBC1SI"
return(LSHIFT);
	YY_BREAK
case 13:
# line 56 "zbn$scan:l.:ZBC1SI"
return(RSHIFT);
	YY_BREAK
case 14:
# line 57 "zbn$scan:l.:ZBC1SI"
return(NOT);
	YY_BREAK
case 15:
# line 58 "zbn$scan:l.:ZBC1SI"
return(COMP); 
	YY_BREAK
case 16:
# line 59 "zbn$scan:l.:ZBC1SI"
return('=');
	YY_BREAK
case 17:
# line 60 "zbn$scan:l.:ZBC1SI"
{ yylval.yy_int = AD_RO; return(ADORNACCESS);  }
	YY_BREAK
case 18:
# line 61 "zbn$scan:l.:ZBC1SI"
{ yylval.yy_int = AD_WO; return(ADORNACCESS);  }
	YY_BREAK
case 19:
# line 62 "zbn$scan:l.:ZBC1SI"
{ yylval.yy_int = AD_RW; return(ADORNACCESS);  }
	YY_BREAK
case 20:
# line 63 "zbn$scan:l.:ZBC1SI"
{ yylval.yy_int = AD_CC; return(ADORNCC);  }
	YY_BREAK
case 21:
# line 64 "zbn$scan:l.:ZBC1SI"
{ yylval.yy_int = atoi(yytext+1); return(DOLLAR); }
	YY_BREAK
case 22:
# line 65 "zbn$scan:l.:ZBC1SI"
{ yylval.yy_int = atoi(yytext+1); return(PERCENT); }
	YY_BREAK
case 23:
# line 66 "zbn$scan:l.:ZBC1SI"
{ yylval.yy_int = yytext[1]-'a'; return(ALLREG); }
	YY_BREAK
case 24:
# line 67 "zbn$scan:l.:ZBC1SI"
{ yylval.yy_int = myatoi(yytext); return(NUMBER); }
	YY_BREAK
case 25:
# line 68 "zbn$scan:l.:ZBC1SI"
{ register symbol *sy_p;
               if ((sy_p=lookup(yytext,symkeyw,justlooking))!=0)
           return(sy_p->sy_value.syv_keywno); 
         yylval.yy_str = mystrcpy(yytext); return(IDENT);
       }
	YY_BREAK
case 26:
# line 73 "zbn$scan:l.:ZBC1SI"
{ yylval.yy_str = mystrcpy(yytext+1);
          return(PERC_IDENT);
        }
	YY_BREAK
case 27:
# line 76 "zbn$scan:l.:ZBC1SI"
{ yytext[yyleng-1]=0;
         yylval.yy_str = mystrcpy(yytext+1);
         return(STRING);
       }
	YY_BREAK
case 28:
# line 80 "zbn$scan:l.:ZBC1SI"
{ yytext[2]=0;
         yylval.yy_str = mystrcpy(yytext);
         return(STRING);
       }
	YY_BREAK
case 29:
# line 84 "zbn$scan:l.:ZBC1SI"
{ lineno++; }
	YY_BREAK
case 30:
# line 85 "zbn$scan:l.:ZBC1SI"
;
	YY_BREAK
case 31:
# line 86 "zbn$scan:l.:ZBC1SI"
return(yytext[0]);
	YY_BREAK
case 32:
# line 87 "zbn$scan:l.:ZBC1SI"
ECHO;
	YY_BREAK
		case YY_STATE_EOF(INITIAL):
		    yyterminate();
 
		case YY_END_OF_BUFFER:
		    /* undo the effects of YY_DO_BEFORE_ACTION */
		    *yy_cp = yy_hold_char;
 
		    yytext = yy_bp;
 
		    switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
			    {
			    if ( yywrap() )
				{
				/* note: because we've taken care in
				 * yy_get_next_buffer() to have set up yytext,
				 * we can now set up yy_c_buf_p so that if some
				 * total hoser (like flex itself) wants
				 * to call the scanner after we return the
				 * YY_NULL, it'll still work - another YY_NULL
				 * will get returned.
				 */
				yy_c_buf_p = yytext;
 
				yy_act = YY_STATE_EOF((yy_start - 1) / 2);
				goto do_action;
				}
 
			    else
				YY_NEW_FILE;
			    }
			    break;
 
			case EOB_ACT_RESTART_SCAN:
			    yy_c_buf_p = yytext;
			    yy_hold_char = *yy_c_buf_p;
			    break;
 
			case EOB_ACT_LAST_MATCH:
			    yy_c_buf_p = &yy_ch_buf[yy_n_chars];
 
			    yy_current_state = yy_get_previous_state();
 
			    yy_cp = yy_c_buf_p;
			    yy_bp = yytext;
			    continue; /* go to "YY_DO_BEFORE_ACTION" */
			}
		    break;
 
		default:
		    printf( "action # %d\n", yy_act );
		    YY_FATAL_ERROR( "fatal flex scanner internal error" );
		}
 
	    break; /* exit bogus while loop */
	    }
	}
    }
 
 
/* yy_get_next_buffer - try to read in new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH -
 *     EOB_ACT_RESTART_SCAN - restart the scanner
 *     EOB_ACT_END_OF_FILE - end of file
 */
 
static int yy_get_next_buffer()
 
    {
    register char *dest = yy_ch_buf;
    register char *source = yytext - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;
 
    if ( yy_c_buf_p != &yy_ch_buf[yy_n_chars + 1] )
	{
	YY_FATAL_ERROR( "NULL in input" );
	/*NOTREACHED*/
	}
 
    /* try to read more data */
 
    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yytext;
 
    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);
 
    if ( yy_eof_has_been_seen )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;
 
    else
	{
	int num_to_read = YY_BUF_SIZE - number_to_move - 1;
 
	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;
 
	/* read in more data */
	YY_INPUT( (&yy_ch_buf[number_to_move]), yy_n_chars, num_to_read );
	}
 
    if ( yy_n_chars == 0 )
	{
	if ( number_to_move == 1 )
	    ret_val = EOB_ACT_END_OF_FILE;
	else
	    ret_val = EOB_ACT_LAST_MATCH;
 
	yy_eof_has_been_seen = 1;
	}
 
    else
	ret_val = EOB_ACT_RESTART_SCAN;
 
    yy_n_chars += number_to_move;
    yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
 
    /* yytext begins at the second character in
     * yy_ch_buf; the first character is the one which
     * preceded it before reading in the latest buffer;
     * it needs to be kept around in case it's a
     * newline, so yy_get_previous_state() will have
     * with '^' rules active
     */
 
    yytext = &yy_ch_buf[1];
 
    return ( ret_val );
    }
 
 
/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */
 
static yy_state_type yy_get_previous_state()
 
    {
    register yy_state_type yy_current_state;
    register char *yy_cp;
 
    register char *yy_bp = yytext;

    yy_current_state = yy_start;
    if ( yy_bp[-1] == '\n' )
	++yy_current_state;
    yy_state_ptr = yy_state_buf;
    *yy_state_ptr++ = yy_current_state;
 
    for ( yy_cp = yytext; yy_cp < yy_c_buf_p; ++yy_cp )
	{
	register char yy_c = yy_ec[*yy_cp];
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 69 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	*yy_state_ptr++ = yy_current_state;
	}
 
    return ( yy_current_state );
    }
 
 
#ifdef __STDC__
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
 
    {
    register char *yy_cp = yy_c_buf_p;
 
    *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
 
    if ( yy_cp < yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register char *dest = &yy_ch_buf[YY_BUF_SIZE + 2];
	register char *source = &yy_ch_buf[number_to_move];
 
	while ( source > yy_ch_buf )
	    *--dest = *--source;
 
	yy_cp += dest - source;
	yy_bp += dest - source;
 
	if ( yy_cp < yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}
 
    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';
 
    *--yy_cp = c;
 
    YY_DO_BEFORE_ACTION; /* set up yytext again */
    }
 
 
static int input()
 
    {
    int c;
    char *yy_cp = yy_c_buf_p;
 
    *yy_cp = yy_hold_char;
 
    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{ /* need more input */
	yytext = yy_c_buf_p;
	++yy_c_buf_p;
 
	switch ( yy_get_next_buffer() )
	    {
	    /* this code, unfortunately, is somewhat redundant with
	     * that above
	     */
	    case EOB_ACT_END_OF_FILE:
		{
		if ( yywrap() )
		    {
		    yy_c_buf_p = yytext;
		    return ( EOF );
		    }
 
		yy_ch_buf[0] = '\n';
		yy_n_chars = 1;
		yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
		yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
		yy_eof_has_been_seen = 0;
		yytext = yy_c_buf_p = &yy_ch_buf[1];
		yy_hold_char = *yy_c_buf_p;
 
		return ( input() );
		}
		break;
 
	    case EOB_ACT_RESTART_SCAN:
		yy_c_buf_p = yytext;
		break;
 
	    case EOB_ACT_LAST_MATCH:
		YY_FATAL_ERROR( "unexpected last match in input()" );
	    }
	}
 
    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;
 
    return ( c );
    }
 
 
#ifdef __STDC__
static void yyrestart( FILE *input_file )
#else
static void yyrestart( input_file )
FILE *input_file;
#endif
 
    {
    if ( yyin != stdin )
	fclose( yyin );
 
    yyin = input_file;
    yy_init = 1;
    }
 
# line 87 "zbn$scan:l.:ZBC1SI"

int skipping=0;

#undef yywrap
yywrap() {

 if (skipping)
    fatal("EOF reached during error recovery");
 return(1);
}

skipupto(tok,str) char *str; {
 register i; 

 skipping=1; 
 while (yylex()!=tok)
    ;
 for(i=strlen(str); i>0; i--)
    unput(str[i-1]);
 skipping=0; 
}

