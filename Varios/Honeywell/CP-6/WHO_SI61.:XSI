/*M* WHO */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* CRT=5,PLM=3,AND,NTB */
WHO:
   PROC MAIN NOAUTO;
                                        /* */
%INCLUDE CP_6;
%INCLUDE B$JIT;
                                        /* */
%INCLUDE B$USER;
%INCLUDE SS_SCHED_C;
DCL USRT$ PTR;
DCL M$LO   DCB;
DCL B$JT$   BIT( 36) STATIC ALIGNED INIT(
     '000000006001'O);
DCL B$JIT$   REDEF B$JT$ PTR;
%S_STATE (FPTN=STATES);
DCL   MODES( 0: 4) CHAR( 1) CONSTANT INIT(
     '?', 'b', 'g', ' ', 't');
DCL CHAR8   CHAR( 8) BASED UNAL;
DCL LINE2   CHAR( 71) STATIC INIT( ' ') ALIGNED;
DCL 1 LINE REDEF LINE2 ALIGNED,
      2 ACCN CHAR( 8) UNAL,
      2 X1 CHAR( 1) UNAL,
      2 SYSID CHAR( 5) UNAL,
      2 MODE CHAR( 1) UNAL,
      2 X2 CHAR( 1) UNAL,
      2 STATE CHAR( 4) UNAL,
      2 X3 CHAR( 1) UNAL,
      2 PCT CHAR( 3) UNAL,
      2 X4 CHAR( 2) UNAL,
      2 CCBUF CHAR( 45) UNAL;
DCL L$   PTR CONSTANT INIT( ADDR( LINE));
DCL 1 DISP STATIC,
      2 LEFT CHAR( 35) UNAL,
      2 * CHAR( 1) INIT( '|') UNAL,
      2 RIGHT CHAR( 35) UNAL;
DCL LR   BIT( 1) UNAL;
DCL TEMP   SBIN WORD;
DCL I   SBIN WORD;
DCL JIT$   PTR;
DCL CHR   CHAR( 1) UNAL;
DCL ID   SBIN;
DCL K   SBIN;
DCL KBUF   CHAR( K) BASED UNAL;
DCL FLAG   SBIN;
DCL W   SBIN;
DCL W$   PTR;
DCL SELF   SBIN;
DCL 1 MASK,
      2 * BIT( 1) UNAL,
      2 BATCH BIT( 1) UNAL,
      2 GHOST BIT( 1) UNAL,
      2 INT BIT( 1) UNAL,
      2 TP BIT( 1) UNAL;
DCL   BMASK( 0: 4) REDEF MASK BIT( 1) UNAL;
DCL L   SBIN;
DCL LBUF   CHAR( L) BASED UNAL;
DCL THING   CHAR( 8) STATIC INIT( ' ') UNAL;
DCL R   SBIN;
%SUB TRUE="'1'B";
%SUB FALSE="'0'B";
%SUB BUZZCOUNT = 3;
%SUB EXCHCOUNT = 16;
DCL   BUZZ( 0: 2) CHAR( 8) CONSTANT INIT(
     'S       ', 'START   ', 'RUN     ') ALIGNED;
DCL   EXCH( 0: 15) CHAR( 8) CONSTANT INIT(
     'C       ', 'L       ', 'COPY    ', 'E       ',
     'DEL     ', 'DELETE  ', 'LYNX    ', 'LOAD    ',
     'B       ', 'BUILD   ', 'MAP     ', 'BACKUP  ',
     'STOW    ', 'FETCH   ', 'UNSTOW  ', 'e       ') ALIGNED;
DCL   REALRU( 0: 15) CHAR( 8) CONSTANT INIT(
     'PCL     ', 'PCL     ', 'PCL     ', 'EDIT    ',
     'PCL     ', 'PCL     ', 'LINK    ', 'LINK    ',
     'EDIT    ', 'EDIT    ', 'LINK    ', 'EFT     ',
     'EFT     ', 'EFT     ', 'EFT     ', 'EDIT    ') ALIGNED;
DCL BUF   CHAR( 120) STATIC UNAL;
DCL   BUFC( 0: 119) REDEF BUF UBIN( 9) UNAL;
%SUB LPAREN = 40;
%SUB DOT = 46;
%SUB BLANK = 32;
%B$TCB;
%B$ALT;
DCL B$TCB$ PTR SYMREF;
%VLP_ERRCODE (FPTN=ERRCODE);
%FPT_ERRMSG (CODE=ERRCODE,
             BUF=BUF,
             OUTDCB1=M$LO);
%VLR_MONINFO;
%VLR_MONPTRS;
%FPT_MONINFO  (FPTN=MONINFO@,
               MONINFO=VLR_MONINFO,
               MONPTRS=VLR_MONPTRS);
%FPT_PRIV  (FPTN=PRIV@,
            AUTH=YES);
DCL DAM$INIT   ENTRY(0) ALTRET;
DCL DAM$MAP   ENTRY(5) ALTRET;
DCL DA_MAPERR BIT(36) SYMREF;
%FPT_WRITE  (FPTN=WRITE@,
             DCB=M$LO,
             BUF=DISP,
             WAIT=YES);
                                        /* */
                                        /* */
   MASK = '11111'B;
   BUF = B$JIT$ -> B$JIT.CCBUF;
   ID = 0;
   CALL INDEX1( I, '(', BUF) ALTRET( DEFAULT);
   DO L = I+1 TO LENGTHC( BUF) - 1;
      CHR = BINASC( BUFC( L));
      IF CHR = 'B' THEN
         MASK.BATCH = FALSE;
      IF CHR = 'G' THEN
         MASK.GHOST = FALSE;
      IF CHR = 'I' OR CHR = 'O' THEN
         MASK.INT = FALSE;
      IF CHR = 'T' THEN
         MASK.TP = FALSE;
      DO WHILE( BUFC( L) >= ASCBIN( '0') AND BUFC( L) <= ASCBIN( '9'));
         ID = ID*10 + BUFC( L)-ASCBIN( '0');
         L = L + 1;
      END;
   END;
   GOTO BEGIN;
DEFAULT:
   MASK = '10101'B;
BEGIN:
   LR = FALSE;
   LINE.X4 = 'k ';
   DISP.RIGHT = ' ';
   IF ID > 0 THEN
      MASK = '00000'B;
   PRIV@.V.PRIV# = %PR_SPCLMM#;
   CALL M$SPRIV( PRIV@ ) ALTRET( NOPRIV0 );
   DO WHILE ( '0'B );
NOPRIV0:
      PRIV@.V.PRIV# = %PR_EXMM#;
      CALL M$SPRIV( PRIV@ ) ALTRET( NOPRIV1 );
   END;
NOPRIV1:
   CALL M$MONINFO( MONINFO@) ALTRET( NOMON);
   CALL DAM$INIT ALTRET( NOMAP);
   CALL DAM$MAP( VLR_MONPTRS.B$USRT$, USRT$) ALTRET( NOMAP);
   SELF = B$JIT$ -> B$JIT.SYSID;
   DO I = 1 TO VLR_MONINFO.MUAIS#;
      CALL DAM$MAP( B$JIT$, JIT$, -I, 7) ALTRET( NEXT);
      K = JIT$ -> B$JIT.SYSID;
      IF ID > 0 THEN
         IF ID ~= K THEN
            GOTO NEXT;
      TEMP = JIT$ -> B$JIT.MODE;
      IF BMASK( TEMP) THEN
         GOTO NEXT;
      CALL BINCHAR( LINE.SYSID, K);
      LINE.MODE = MODES( TEMP);
      IF K = SELF THEN
         LINE.ACCN = '[SELF]';
      ELSE
         LINE.ACCN = JIT$ -> B$JIT.ACCN;
      TEMP = K;
      K = 0;
      IF TEMP < 10000 THEN
      DO;
         K = K + 1;
         IF TEMP < 1000 THEN
         DO;
            K = K + 1;
            IF TEMP < 100 THEN
            DO;
               K = K + 1;
               IF TEMP < 10 THEN
                  K = K + 1;
            END;
         END;
      END;
      IF K > 0 THEN
         ADDR( LINE.SYSID) -> KBUF = ' ';
      LINE.STATE = STATES( USRT$ -> B$USER.US( I));
      TEMP = USRT$ -> B$USER.PCT( I);
      CALL BINCHAR( LINE.PCT, TEMP);
      K = 0;
      IF TEMP < 100 THEN
      DO;
         K = K + 1;
         IF TEMP < 10 THEN
            K = K + 1;
      END;
      IF K > 0 THEN
         ADDR( LINE.PCT) -> KBUF = ' ';
      IF %CP_JSTEP# & (JIT$ -> B$JIT.CPFLAGS1) THEN
      DO;
         LINE.CCBUF = ' ';
         GOTO HAVERU;
      END;
      FLAG = 0;
      W = 0;
      BUF = JIT$ -> B$JIT.CCBUF;
NEXTWORD:
      L = 0;
      DO WHILE((W<120) AND (BUFC(W)=BLANK));
         W = W + 1;
      END;
      W$ = PINCRC( ADDR( BUF), W);
      DO WHILE((W<120) AND (BUFC(W)>BLANK) AND
        (BUFC(W)~=DOT) AND (BUFC(W)~=LPAREN));
         L = L + 1;
         W = W + 1;
      END;
      IF L <= 8 THEN
      DO;
         ADDR( THING) -> CHAR8 = W$ -> LBUF;
         IF FLAG = 0 THEN
         DO R = 0 TO BUZZCOUNT - 1;
            IF THING = BUZZ( R) THEN
            DO;
               FLAG = FLAG + 1;
               GOTO NEXTWORD;
            END;
         END;
         DO R = 0 TO EXCHCOUNT - 1;
            IF THING = EXCH( R) THEN
            DO;
               LINE.CCBUF = REALRU( R);
               GOTO HAVERU;
            END;
         END;
      END;
      LINE.CCBUF = W$ -> LBUF;
      CALL INDEX1( R, ',', LINE.CCBUF) ALTRET( HAVERU);
      LINE.CCBUF = 'LOGON';
HAVERU:
      CALL INDEX1( R, ' ', LINE.ACCN) ALTRET( GO);
      THING = ' ';
      CALL INSERT( THING, 8-R, R, LINE.ACCN);
      LINE.ACCN = THING;
GO:
      K = 35;
      IF LR THEN
      DO;
         DISP.RIGHT = L$ -> KBUF;
         CALL M$WRITE( WRITE@);
         DISP.RIGHT = ' ';
         LR = FALSE;
      END;
      ELSE
      DO;
         DISP.LEFT = L$ -> KBUF;
         LR = TRUE;
      END;
NEXT:
   END;
   IF LR THEN
      CALL M$WRITE( WRITE@);
      DO WHILE ( '0'B );
NOMON:
         FPT_ERRMSG.V.DCB# = B$TCB$ -> B$TCB.ALT$ -> B$ALT.DCB#;
         ERRCODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
         GOTO ERRM;
NOMAP:
         FPT_ERRMSG.V.DCB# = 0;
         ERRCODE = DA_MAPERR;
ERRM:
         ERRCODE.SEV = 0;
         CALL M$ERRMSG( FPT_ERRMSG );
      END;
   CALL M$EXIT;
END WHO;
