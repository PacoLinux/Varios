.*M*
HELP file for: COPYPGM
.*T*
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
.*X*                                                                           
.PDW 70
.HBB
|Page %PageNo%|CP-6 COPYPGM  A00  80-03-27|Page %PageNo%|
 
.HBE
.ALC
THE COPY PROGRAM (COPYPGM)
 
User's Guide
 
 
.ALB
Purpose:
 
.*A*
    The Copy Program is a general-purpose utility which copies
records, portions of records, or constant information from one
file to another.  Records may be accepted or rejected for
inclusion in the output file based on Boolean criteria supplied
by the user.  The output file may be keyed with EDIT keys, the
keys from the input file, or a key constructed from the contents
of either the input or output record.  Indexed files may also be
created or read.
 
.*B*
    "Fields" in the input file are identified by the user via the
USE command, which refers to a COBOL COPY file containing the
data structure definition or a PL-6 %INCLUDE file which contains
the structure DCL.  If no USE is in effect, each "field" is one
byte wide and may be thought of as a column number or byte offset
from the beginning of the record.
 
    The COPYPGM may be run in batch or on-line.  It is not
an interactive processor such as PCL; that is, most commands are
collected and stored until the END command is entered, at which
point file copying begins.  If an error is detected in the syntax of
the input commands, an error message is printed and the job step is
either errored or aborted when running in batch.  When running on-line,
error recovery is taken depending on the nature of the error and the
command involved.  Some errors require retyping the entire command,
while others require only a partial command retype.  Errors after
file copying has begun are always fatal.
 
    The COPYPGM is not designed to replace PCL for file-to-file
copying.  PCL has a far more extensive set of options and is
superior in error handling.  However, the COPYPGM does some
things that PCL cannot do:
 
    (a)  Field select.  The COPYPGM can select fields from the
data record for copying.  Fields may also be rearranged or
duplicated in the output records.
 
    (b)  Constant copy.  The COPYPGM can insert constant
information in each record at the same location; thus it can
serve as a re-formatter for such things as optical scanner tapes,
or it can be used as a crude but quick report generator.
 
    (c)  Record select.  The COPYPGM can be told to accept only
the records from the input file which pass a series of tests on
the contents of their fields or keys.
 
    (d)  Key creation.  The COPYPGM can create an output file
which has EDIT keys, or it can use the keys from the input file,
as PCL can; but it can also create the key from information
contained in the input or output record.  It also can create
indexed files.
 
 
.*B*
I/O Characteristics:
 
    The COPYPGM uses six DCBs for input and output, four of which
may be implicitly SET by the user when the COPYPGM is invoked:
 
    !COPYPGM.X [M$EI][,M$SI][ {TO|ON|OVER|INTO} [M$EO][,M$LO]]
 
 
    Commands are read via M$SI (DCB #2).  This DCB may be assigned
to any file or device, restricted only by the limits of the operating
system.  Commands need not be all the same length, but individual
records in the command file cannot exceed 256 characters each.
 
    M$LO (DCB #4) is used to print a copy of the commands as they are
read, unless M$LO and M$SI are the same device.  M$LO may also be
assigned to any file or device.
 
    Diagnostics are printed via M$DO, which may also be assigned
to any file or device.  If M$LO is not the same device as M$DO,
diagnostics are written through M$LO, too.
 
    A salutation is printed via M$ME when the COPYPGM is invoked,
regardless of mode.  The greeting indicates the current revision
level.
 
    The input file for copying is read via M$EI (DCB #1), which may be
set by the user.  The file may be on any device.
Only the file name, account (if necessary), and password (if
present) need be specified for M$EI.  The file is opened IN for
sequential shared access by the COPYPGM.  It is not necessary to
specify KEYED or INDEXED for the input file; this information will
be provided to the COPYPGM by the monitor.  However, if the user has
specified the key for use in the Copy Program as a selection
criterion or for use in creating a keyed or indexed output file
and the input file is not keyed (or indexed), the COPYPGM will
produce a diagnostic.  Input read via M$EI may be of fixed or
variable length.  Records which are shorter than the highest
field referenced in the commands will be expanded to the right
with blanks.
 
    Random and
IDS files cannot be read by the COPYPGM.
 
    The output file is written via M$EO (DCB #3), which may be
set by the user.  The file may be any device which accepts
output.  File characteristics may be provided by the user with
the exception of FUN, ACCESS, and ORG which will be supplied by
the COPYPGM.  The input and output files may be assigned to the
same disk file provided that
the output command
does not request copying INTO the output file.
 
    Output records may not exceed 29127 bytes in length.
 
    I/O error handling is minimal; however, certain errors are
detected and handled in a logical manner, such as end-of-reel,
end-of-file, duplicate key on output, etc.  Other errors will be
reported to the user and the copy will be aborted unless the
user has specified SAVE as one of the COPYPGM commands.
 
 
.*B*
Command Syntax:
 
    Commands are read via M$SI in either mode of
operation.  They may be of variable length, but may not exceed
256 characters per record or 2048 characters per command.  If
built by EDIT, the commands cannot contain the new line character.
 
    The keyword which begins a command (COPY, INPUT, etc.) may be
preceded by a colon (:) in either mode of operation, if desired.
This is for compatibility with CP-V COPYPGM syntax.  However,
continuation lines may not have a colon as a leading character.
Comments may be entered on commands anywhere a blank is allowed
by enclosing them in double quotes ("like this").  Blank lines
are permitted anywhere; a line consisting of just a comment is
treated as a blank line.
 
    Each command begins with an operation code of alphabetic
characters.  The op-code may be specified in upper or lower case.
The COPYPGM currently recognizes COPY, KEY, IF or INCLUDE, INPUT,
OUTPUT, SAVE, USE, ORG, and END or X or GO as op-codes, each of
which is described later.  The operation code must be the first
non-blank item of the command image, but may be optionally
preceded by a colon (:).  At least one blank must follow the
operation code when operands are to be specified.
 
.*B*
    Following the operation code and blank(s) is a series of one
or more operands separated by commas, except SAVE and END commands
which have no operands.  Following is a descriptive glossary
of operand terms:
 
 
    field - a field specification consists of either an integer
(field or byte) part, a fraction (bit) part, or both.  For example
 
        10
        .9675
        1.3
 
The integer part of a field specification refers to the field
number (if a USE is in effect) or to a column number or offset.
The choice of column number or offset is dependent upon the current
value of ORG (see the ORG command).  The fractional part refers to
a bit number or offset from the beginning of the field, again
dependent upon the setting of ORG.  The integer part may not
exceed 29127 and the fraction part may not exceed 262143, after
adjusting for ORG.  9*fraction+integer may not exceed 262144.
 
    start - a start specification is formatted exactly like a
field.  The integer part, however, specifies a column number or
offset from the beginning of the field, dependent on the current
value of ORG.  The fractional part refers to a bit number or
offset from the sum of the field and the start integer.  The same
range restrictions apply to start as in field.  Also, 9*(field
integer + start integer) + field fraction + start fraction must
not exceed 262144.
 
    count - a count specification is formatted exactly like a
field.  However, the integer part always refers to a byte or
character count, and the fraction part always refers to a bit
count.  9*fraction+integer may not exceed 262143, and it cannot
be zero.  The sum of field and start and 9*fraction+integer may
not exceed 262144.
 
    relation - a relation operator is one of the following:
 
        =  - equal to
        <> or >< or # - not equal to
        <  - less than
        <= or =< - less than or equal to
        >  - greater than
        >= or => - greater than or equal to
 
    value - a value is a constant, in one of four formats:
 
    A quoted literal is specified by enclosing it in single
quotes.  E.g., 'This is a quoted literal'.  Any ASCII character
may appear within the quote pairs.  A single quote is specified
as two consecutive quotes ('') within the enclosing quotes.
Quoted literals may not exceed 29127 bytes in length.
 
    An octal literal is specified by a string of octal digits
(0-7) enclosed in single quotes and immediately followed by the
letter "O".  E.g., '1234567'O.  Octal literals may contain up
to 63 octal digits.
 
    A bit literal is specified by a string of bits (0's and 1's)
enclosed in single quotes and immediately followed by the letter
"B".  E.g., '10101'B.  Bit literals may contain up to 63 bits.
 
    An unquoted literal consists of a string of consecutive
alphanumeric characters (upper and lower case) up to 63 characters
long.  Unquoted literals may not contain spaces, nor may they begin
with the letters "REC", "KEY", "AS", or their lower-case equivalents.
 
    No field, start, count, relation, or value may be split between
two command lines.
 
    Continuation is specified by terminating a line with a semicolon
(;).  The continuation lines may not have a colon as their leading
character.  As many continuation lines may be specified as necessary,
up to the limit of 2048 significant characters (leading blanks on
all lines are significant).
 
    Comments may be specified anywhere a blank is allowed, but
must be enclosed in double quotes ("comment").
 
.BRP
.ALC
.*B*
The Commands
 
.ALB
    The COPYPGM recognizes COPY, IF or INCLUDE, END or X or GO, ORG, SAVE,
INPUT, OUTPUT, KEY, and USE as commands.  Because an understanding
of ORG is necessary to the explanation of other commands, it will be
described first.
 
 
ORG:
 
    Command syntax:
 
        ORG origin
 
    "origin" is one of 0.0, 0.1, 1.0, or 1.1.  The ORG command
declares whether the integer and fraction specifications in fields
and starts are to be interpreted as column (or bit) numbers or as
offsets.  Simply stated, the current ORG value is subtracted from
the field or start specification to translate it into a byte/bit
offset.  Thus, an ORG of 0.0 means that a field specification of
17.25 is a 17-byte, 25-bit offset from the beginning of the
record; that is, the bytes and bits are numbered from zero to n.
An ORG of 1.1 means that bytes and bits are numbered from one to
n.
 
    ORG may be specified at any time and is effective for all
commands which follow; it is not retroactive.  Note that specifying
a byte or bit of zero when the corresponding ORG field is one is
an "origin conflict".
 
    If a USE is in effect, the integer part of ORG is not applied
to the integer part of field specifications.  In this case the
integer part of field specifications is used to access the field
table created by the USE command.  However, ORG is still applied
to the fraction part of fields and to both parts of start specifications.
ORG is never applied to counts.
 
    The default ORG is 1.0, meaning columns are numbered from one
to n and bits are numbered from zero to n.
 
 
USE:
 
    Command syntax:
 
        USE fid
 
    The USE command directs the COPYPGM to access the file defined
by "fid" to determine the lengths and bounds of the fields in the
input records.  "fid" must refer to a COBOL COPY file or a PL-6 %INCLUDE
file describing a single DCL structure.  The COPYPGM will access
the file and build a field table for the specified structure and
produce a field table listing via M$LO for future reference.  The
encoded field table is also written to the file COPYPGM_FTBLS in
account X.  When a future USE command is encountered,
COPYPGM consults COPYPGM_FTBLS.X to determine if this
structure has been produced before.  If an exact match is found
and the date in COPYPGM_FTBLS is not earlier than the corresponding
file in public storage, the version in COPYPGM_FTBLS is fetched;
otherwise, a new or replacement structure entry is made.
 
    When a USE is in effect, the integer part of the current ORG
is effectively forced to one; that is, fields are numbered from
one to n.
 
    The command USE NO resets the use mode and returns ORG to its
previous state.  USE NO is the default setting.
 
    <<<THE USE COMMAND IS NOT CURRENTLY IMPLEMENTED.>>>
 
 
COPY:
 
    Command syntax:
 
        COPY spec[,spec]...
 
    The COPY command specifies what is to be copied to the output
record and in what order it is to be copied.  "spec" may be one
of the following:
 
        field
        field/count
        field/start/count
        field1-field2
        KEY
        KEY/count
        KEY/start/count
        REC
        REC/count
        REC/start/count
        ASIS
        ASIS/start
        quoted literal
        octal literal
        bit literal
        unquoted literal
 
    "field" refers to the entry in the field table or to a column
number or offset, as described earlier.  If no "count" or "start"
specifications are present, the default is taken from the field
table (if USE is in effect) or nine bits.  Note that
a field specification of "integer.fraction" when USE is in effect
will copy "fraction" bits from the bytes following the end of the
field.
 
    "start" and "count" may be used to bracket the field by telling
COPYPGM to begin copying at "start" (the beginning of the field if
omitted) for "count" bytes and bits.
 
    "field1-field2" specifies a range of fields to be copied.  In
this particular format, fractional (bit) parts are not allowed.  This is
a shorthand way of saying "field1, field1+1, field1+2, ..., field2".
.*B*
If a USE is not in effect, this is a very inefficient way to copy
multiple adjacent columns of data.  The format "field/count" is
much faster and should be used instead.  "field2" must exceed "field1".
 
    "KEY" refers to the input file's key or index value, which may
be of varying length.  If KEY is specified, the input file must be
keyed or indexed.  "start" and "count" are processed exactly as in
a field specification; "start" is subject to ORG adjustments.  No
count specification may exceed 255 bytes, nor may start+count
exceed 256.
 
    "REC" refers to an eight-digit decimal (ASCII) counter of
input records kept by COPYPGM.  It is advanced by one for each
record read, regardless of whether the input record is copied to the output
record or not.  "start" and "count" are processed exactly as in
a field specification; "start" is subject to ORG adjustments.  No
count specification may exceed eight bytes, nor may start+count
exceed nine.
 
    "ASIS" means copy the input record "as is", which may result
in variable-length output records.  If "start" is specified, it is
subject to ORG adjustments.  "ASIS/start" means copy from "start"
through the end of the record; if the record is shorter than
"start" columns, nothing is copied, but a zero-length output record may be
created if the INCLUDE criteria are met.  "start" may not exceed
29127 bytes.
 
    The literals are copied into the output record at the current
insertion point.
 
    At least one COPY command is required in all COPYPGM runs.
 
    The COPY command generates a table of operations to be
performed during execution; hence, it is a "stored" command.  Two
words of storage are required for each operand, and "field1-field2"
requires 2*(field2-field1)+2 words.  Storage is acquired in 1024
word blocks.  Also, one byte of storage is required for each literal
byte or fraction thereof.  Duplicate strings or substrings of
previously-used strings are deleted.
 
    COPY will misalign data if you tell it to, since fields are
copied at the bit level.  "COPY '1'B,1/10", for example, offsets the
ten characters copied by one bit.  This may or may not be desirable
to the particular application.  Use care when copying fractions of
bytes.  Note also that a record which does not end on a byte boundary
will be padded on the right with up to eight garbage bits with
unpredictable contents, since a write command must specify an
integral number of bytes.
 
 
.*B*
INCLUDE or IF:
 
    Command syntax:
 
        INCLUDE Boolean   -or-   IF Boolean
 
    "INCLUDE" and "IF" are synonymous.  The IF command specifies
the criteria for including records in the output file.  If no IF
commands are encountered, all records from the input file are
copied to the output file.
 
    "Boolean" is a Boolean expression built from the following
primitives:
 
        field relation value [relation value]...
        REC relation value [relation value]...
        KEY relation value [relation value]...
 
"field", "relation", and "value" are all described earlier.
"REC" refers to the 8-digit decimal (ASCII) input record counter
mentioned earlier, and "KEY" refers to the input record's key or
index.  If "KEY" is used, the input file must be keyed or indexed.
The contents of "field" are compared with "value"; if "relation"
is true, this test has succeeded and control passes to the next
test, if any.  If "relation" is false, the next "relation value"
(if any) is tested; otherwise, the test fails and the record is
rejected.  In other words, the command
 
        IF 4=ABC=DEF>HIJ
 
will succeed if field 4 contains "ABC" or "DEF" or if it is
greater than "HIJ"; otherwise, the record is rejected.
 
    Compound conditions can be built by connecting primitives
with AND (or &) or OR (or |):
 
        IF 4=ABC AND 10<HQK
 
will succeed if field 4 contains "ABC" and field 10 is less than
"HQK".  If ANDs and ORs are mixed on the same command, the ANDs
are evaluated before the ORs:
 
        IF 4=ABC AND 10<HQK OR 16='HI ' AND 25='THERE'
 
succeeds if field 4 contains "ABC" and field 10 is less than
"HQK"; it also succeeds if field 16 contains "HI " and field 25
contains "THERE".
 
    The order of evaluation may be altered by the inclusion of
parentheses:
 
        IF 4=ABC AND (10<HQK OR 16='HI ') AND 25='THERE'
 
In this case the test succeeds only if both the outer two conditions
are satisfied and one of the inner two conditions is satisfied.
 
    CAUTION:  The CP-6 parser is used to decode IF commands.  Its
speed slows geometrically with the levels of parentheses, usually
by a factor of four for each level.  During experiments, five
levels of parentheses took about fifteen minutes of time to parse.
It is therefore recommended that nesting of parentheses be limited
to two or three levels.
 
    There is no NOT operator, since this function can be performed
by expression rearrangement and complementation of relations.
 
    Note that it is the length of the literal, not the length of
the field which determines the length of the comparison.  The
literal may be shorter or longer than the field; it is neither
padded nor truncated.  Thus, to check a field for being blank,
you must specify as many blanks as the field is wide.
 
    When "REC" is used in an IF statement, comparison to "value"
is handled slightly differently than for "KEY" or "field":  The
"value" is right-justified during the comparison instead of the
usual left-justification.  This permits COPYPGM to provide
sample selection; e.g., to select all even-numbered records, say
IF REC=0=2=4=6=8.  It has the disadvantage of doing some unusual
things when leading zeros aren't specified.  For example, IF REC>10
will copy records 11-99, but it skips 100-110, 200-210, etc.  In
this case the leading zeros must be specified to get the desired
results.
 
    IF commands are optional.  More than one may be supplied, if
desired; in this case, the connective AND is assumed to join the
condition from the last command to the first condition on the next
command.  Optionally, the user may specify AND or OR as the first
primitive after the IF op-code:
 
        IF 1=ABC
        IF AND 2=CDE
 
is equivalent to
 
        IF 1=ABC
        IF 2=CDE
 
which is equivalent to
 
        IF 1=ABC AND 2=CDE
 
    IF commands, like COPY commands, are stored in encoded form
for later execution.  Three words of storage are required for
each relation operator specified; storage is acquired in 1024
word blocks.  Also, n bytes of storage are required for each
literal specified, where n is the length of the literal in bytes
or fraction thereof.  Literals which are substrings or duplicates
of previously-used literals are deleted from the literal pool.
Storage for literals is also acquired in 1024 word blocks.
 
    Use caution when specifying IF conditions with relations
other than equality.  For example, to select records with field
5 having values between "AAA" and "BBB" inclusive you must say
 
        IF 5>=AAA AND 5<=BBB
 
If you say instead
 
        IF 5>=AAA<=BBB
 
all records will be selected since every record passes one of the
two conditions and the (implied) connector is "OR".
 
    Similarly, to include records if field 5 is less than "AAA" or
greater than "ZZZ" you must say
 
        IF 5<AAA>ZZZ
 
because
 
        IF 5<AAA AND 5>ZZZ
 
is contradictory; no field can be both less than "AAA" and greater
than "ZZZ" at the same time.
 
    The sum total of all copied fields may not exceed 29127 bytes.
"ASIS" counts for zero bytes during command decoding, but the actual
record length is computed on a record-by-record basis during execution.
 
 
.*B*
KEY:
 
    Command syntax:
 
        KEY option
 
    The KEY command directs the COPYPGM to create a keyed or
indexed file and tells it the source of the keys.  This command
is optional unless the
output file is being extended and it is keyed or indexed.  KEY
is a stored command, like COPY and IF, but it is validated as
soon as it is encountered.  If a conflict is detected (e.g.,
trying to write keys into an existing consecutive file), a
diagnostic is issued and the KEY command is ignored.  If multiple
KEY commands are encountered, only the last is effective.
 
    "option" refers to one of the following:
 
        EDIT
        EDIT,base
        EDIT,base,incr
        IN
        IN/start/count
        OUT/start/count
        INDEX/start/count
 
    The EDIT option directs the COPYPGM to create EDIT keys.  If
"base" is not specified, it is assumed to be 1.000.  If "incr" is
not specified, it is assumed to be 1.000.  "base" may range from
0.000 through 99999.999; "incr" may range from 0.001 through 99999.999.
If the maximum edit key (99999.999) is exceeded during execution,
COPYPGM aborts.
 
    IN directs COPYPGM to create the output keys using the input
keys.  The input file must be keyed or indexed in this case.
 
    IN/start/count directs COPYPGM to create the output key by
selecting "count" characters from the input record beginning at
"start".  Note that this is quite different from KEY IN.  "start" is
subject to ORG adjustments.
 
    OUT/start/count directs COPYPGM to create the keys from the
contents of the assembled output record, beginning at "start" for
"count" characters.  "start" is subject to ORG adjustments.
 
    INDEX/start/count directs COPYPGM to created an indexed file
from the contents of the assembled output record, beginning at
"start" for "count" characters.  "start" is subject to ORG adjustments.
 
    In all cases, "start" may not exceed 29127 bytes and "count" may not
exceed 255 bytes.  Additionally, "start" plus "count" may not exceed
29128.
 
    Keyed or indexed files may be created out of sequence; however,
this is not especially efficient and should not be used in place of
SORT to re-order a file.
 
 
.*B*
INPUT:
 
    Command syntax:
 
        INPUT fid
 
    The INPUT command selects the input file or device.  It may be
any assignment except NO or a device which cannot be read, such as
LP.  Random and IDS files cannot be used for input.
 
    INPUT is executed as soon as it is encountered; that is, the
file or device is opened so that KEY checking can be performed.
This may require the mounting of a dismountable resource, such as
a tape.  Multiple INPUT commands are allowed, in which case only
the last is effective.
 
    If no INPUT command is encountered, a SET command must have been
previously issued for M$EI.
 
 
.*B*
OUTPUT:
 
    Command syntax:
 
        OUTPUT [how] fid
 
    The OUTPUT command selects the output file or device.  It may
be any assignment except a device which cannot be written, such
as CR.  NO is allowed; in this case only record counts are
produced by COPYPGM.
 
    "how" indicates the mode of the open:  "TO" or "ON" means
create a new file if a file of the same name doesn't exist.  "OVER"
means create a new file regardless of the existence of a file with
the same name.  "INTO" extends consecutive files and inserts records into
keyed and indexed files.  If "INTO" is specified, the KEY specification
must match the file's organization (i.e., keys for keyed files,
KEY INDEX for indexed files, and omitted for consecutive files).
If "how" is not specified, "TO" is assumed.
 
    OUTPUT is executed as soon as it is encountered; that is, the
file or device is opened so that KEY checking may be performed.
This may require the mounting of a dismountable resource, such as
a tape.  Multiple OUTPUT commands are allowed, in which case only
the last is effective.
 
    If no OUTPUT command is encountered, a SET command must have been
previously issued for M$EO.
 
 
.*B*
SAVE:
 
    Command syntax:
 
        SAVE
 
    SAVE directs COPYPGM to save the output file even if an I/O
error occurs.  It is useful for keeping the good portion of data
read from a tape which contains a bad block.  SAVE is ignored
if an operational error occurs, such as EDIT key exceeded.
 
    SAVE should be specified only once.
 
 
.*B*
END:
 
    Command syntax:
 
        END  -or-  X  -or-  GO
 
    The END command (or one of its synonyms) must be the last
command in the input stream.  At this point the input and output
files are opened (if they aren't already open), key validation is
completed, output record sizes are computed, input and output
record buffers are acquired, and copying commences.  If a command
ambiguity is detected at this point, the job is aborted, if running
in batch and a diagnostic is produced.  END is ignored when
running on-line.  Typical errors include KEY conflicts, missing
input files, and no COPY commands.
 
    If all the required conditions are met, COPYPGM reports the
computed size of the output record and begins copying and selecting.
Any errors which occur after copying has begun are always fatal.
During the copy process, the user may hit the BREAK key to get a
progress report; COPYPGM will display the number of input and
output records produced thus far.  This is useful to check the
validity of IF command processing.
 
    When the copying process is complete, the total input and
output record counts are displayed and control returns to IBEX.
.BRP
.*B*
.ALC
Command Syntax Summary
 
.ALL
.FIF
o   [:]C[OPY] spec[,spec]...
 
    spec is one of
        field[[/start]/count]
        KEY[[/start]/count]
        REC[[/start]/count]
        ASIS[/start]
        'literal'
        'octal'O
        'bits'B
        literal
 
o   [:]END or [:]X or [:]G[O]
 
o   [:]INP[UT] fid
 
o   [:]I[NCLUDE] [AND|OR] Boolean  or  [:]I[F] [AND|OR] Boolean
 
    Boolean is made up from the primitives
        field relation value [relation value]...
        REC relation value [relation value]...
        KEY relation value [relation value]...
 
    Primitives may be combined with
        AND or &
        OR or |
 
    Parentheses may be used to change the order of evaluation.
 
o   [:]KEY option
 
    option is one of
        IN[/start/count]
        OUT/start/count
        INDEX/start/count
        EDIT[,begin[,incr]]
 
o   [:]OUT[PUT] [how] fid
 
    how is one of
        TO or ON
        OVER
        INTO
 
o   [:]O[RG] origin
 
    origin may be
        0.0
        0.1
        1.0
        1.1
 
o   [:]S[AVE]
 
o   [:]U[SE] fid
 
.*X*
.*R*
.*K* OWNER
Bruce Beaumont, NSS/CP-6, LADC
.*K* XINDEX
COPYPGM.X
.*R*
AID=UTILITY
.*R*
FILE_MANIPULATION
.*R*
.*K* XINDEX_ABSTRACT
TOOL=COPYPGM
.*R*
Copies records, portions of records, or constant information from one file
to another.  Records may be accepted or rejected for inclusion in the
output file based on Boolean criteria supplied by the user.
.*K* CHANGES Changes changes
850619 SCB
.*R*
Fixed star 16007 by making recommended updates in that star; labelled tape
handling works again.  Fixed star 16618 by correcting value of
.res# for output devices; redirection to output devices works again.
.*B*
04/11/83 (B01) Fixed bug which caused garbage keys to be created if
         key field came from the input record and COPY commands did
         not read enough of the record to include all the key bytes.
