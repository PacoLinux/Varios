
PL6.E3A0      #001=FEOF File=xb_io_misc:6.:XBC3TSI                               FRI 01/06/95 11:28 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        feof: PROC (F);
        7        7           /*D* NAME: feof
        8        8                PROTOTYPE: int feof (FILE *stream)
        9        9                DESCRIPTION: tests the end-of-file indicator for the stream pointed
       10       10                 to by stream.
       11       11           */
       12       12
       13       13           %INCLUDE xb_stdio_i6;
       14      256
       15      257           %File_Header (Name=F, Stclass=" ");
       16      369
       17      370    1      DCL XB_RETURN_ORDINAL_RESULT     ENTRY (1);
       18      371
       19      372    1      CALL XB_RETURN_ORDINAL_RESULT (BITBIN (F.is_eof));
       20      373    1   END feof;
       21      374        %EOD;

PL6.E3A0      #001=FEOF File=xb_io_misc:6.:XBC3TSI                               FRI 01/06/95 11:28 Page:2    
--  Include file information  --

   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FEOF.

   Procedure FEOF requires 14 words for executable code.
   Procedure FEOF requires 6 words of local(AUTO) storage.

PL6.E3A0      #001=FEOF File=xb_io_misc:6.:XBC3TSI                               FRI 01/06/95 11:28 Page:3    
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=FEOF File=xb_io_misc:6.:XBC3TSI                               FRI 01/06/95 11:28 Page:4    
          MINI XREF LISTING

F
       258**DCL         6--PROC
F.FPT_READ.V.DVBYTE.REREAD#
       320**DCL       321--REDEF
F.FPT_READ.V.INDX#
       313**DCL       314--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       358**DCL       359--REDEF
F.IS_EOF
       260**DCL       372<>CALL
XB_RETURN_ORDINAL_RESULT
       370**DCL-ENT   372--CALL

PL6.E3A0      #002=FERROR File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:5    
       22        1        /*T***********************************************************/
       23        2        /*T*                                                         */
       24        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
       25        4        /*T*                                                         */
       26        5        /*T***********************************************************/
       27        6
       28        7        ferror: PROC (F);
       29        8           /*D* NAME: ferror
       30        9                PROTOTYPE: int ferror (FILE *stream)
       31       10                DESCRIPTION: tests the error indicator for the stream pointed
       32       11                 to by stream.
       33       12           */
       34       13
       35       14           %INCLUDE xb_stdio_i6;
       36      257
       37      258           %File_Header (Name=F, Stclass=" ");
       38      370
       39      371    1      DCL XB_RETURN_ORDINAL_RESULT     ENTRY (1);
       40      372
       41      373    1      CALL XB_RETURN_ORDINAL_RESULT (BITBIN (F.is_error));
       42      374    1   END ferror;
       43      375        %EOD;

PL6.E3A0      #002=FERROR File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:6    
--  Include file information  --

   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FERROR.

   Procedure FERROR requires 14 words for executable code.
   Procedure FERROR requires 6 words of local(AUTO) storage.

PL6.E3A0      #002=FERROR File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:7    
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=FERROR File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:8    
          MINI XREF LISTING

F
       259**DCL         7--PROC
F.FPT_READ.V.DVBYTE.REREAD#
       321**DCL       322--REDEF
F.FPT_READ.V.INDX#
       314**DCL       315--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       359**DCL       360--REDEF
F.IS_ERROR
       266**DCL       373<>CALL
XB_RETURN_ORDINAL_RESULT
       371**DCL-ENT   373--CALL

PL6.E3A0      #003=CLEARERR File=xb_io_misc:6.:XBC3TSI                           FRI 01/06/95 11:28 Page:9    
       44        1        /*T***********************************************************/
       45        2        /*T*                                                         */
       46        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
       47        4        /*T*                                                         */
       48        5        /*T***********************************************************/
       49        6
       50        7        clearerr: PROC (F);
       51        8           /*D*  NAME: clearerr
       52        9                 PROTOTYPE: void clearerr (FILE *stream);
       53       10                 DESCRIPTION: clears the error and eof flags for stream.
       54       11           */
       55       12
       56       13           %INCLUDE xb_stdio_i6;
       57      256           %File_Header (Name=F, Stclass=" ");
       58      368
       59      369    1      F.is_error = '0'B;
       60      370    1      F.is_eof = '0'B;
       61      371    1   END clearerr;
       62      372        %EOD;

PL6.E3A0      #003=CLEARERR File=xb_io_misc:6.:XBC3TSI                           FRI 01/06/95 11:28 Page:10   
--  Include file information  --

   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure CLEARERR.

   Procedure CLEARERR requires 8 words for executable code.
   Procedure CLEARERR requires 4 words of local(AUTO) storage.

PL6.E3A0      #003=CLEARERR File=xb_io_misc:6.:XBC3TSI                           FRI 01/06/95 11:28 Page:11   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=CLEARERR File=xb_io_misc:6.:XBC3TSI                           FRI 01/06/95 11:28 Page:12   
          MINI XREF LISTING

F
       257**DCL         7--PROC
F.FPT_READ.V.DVBYTE.REREAD#
       319**DCL       320--REDEF
F.FPT_READ.V.INDX#
       312**DCL       313--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       357**DCL       358--REDEF
F.IS_EOF
       259**DCL       370<<ASSIGN
F.IS_ERROR
       264**DCL       369<<ASSIGN

PL6.E3A0      #004=UNGETC File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:13   
       63        1        /*T***********************************************************/
       64        2        /*T*                                                         */
       65        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
       66        4        /*T*                                                         */
       67        5        /*T***********************************************************/
       68        6
       69        7        ungetc: PROC (P_char_to_unget, F);
       70        8           /*D* NAME: ungetc
       71        9                PROTOTYPE: int ungetc (int c, FILE *stream);
       72       10                DESCRIPTION: pushes the character c back on to the input stream so
       73       11                   that the next char read will be c.  If sucessful, c is returned,
       74       12                   otherwise EOF is returned.
       75       13           */
       76       14
       77       15           %INCLUDE xb_stdio_i6;
       78      258           %INCLUDE xb_errors_i6;
       79      329
       80      330    1      DCL P_char_to_unget        SBIN;
       81      331
       82      332           %File_Header (Name=F);
       83      444
       84      445    1      DCL char_to_unget_as_ptr   PTR;
       85      446    1      DCL char_to_unget REDEF char_to_unget_as_ptr SBIN;
       86      447
       87      448    1      DCL XB_RETURN_ORDINAL_RESULT ENTRY (1);
       88      449    1      DCL XBI$COMPLETE_OPEN      ENTRY (1) ALTRET;
       89      450    1      DCL XB_IO_ERROR            ENTRY;
       90      451    1      DCL XBI_SET_STREAM_ERRNO   ENTRY(2);
       91      452
       92      453    1      char_to_unget_as_ptr = ADDR(P_char_to_unget);
       93      454
       94      455    2      IF (F.auxio$ ~= ADDR(NIL)) THEN DO;
       95      456    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$AUXIO_FILE_POINTER);
       96      457    2         CALL XB_IO_ERROR;
       97      458    2      END;
       98      459
       99      460    1      IF F.is_partly_open THEN CALL XBI$COMPLETE_OPEN (F) ALTRET (return_eof);
PL6.E3A0      #004=UNGETC File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:14   
      100      461
      101      462    1      IF char_to_unget = %EOF THEN GOTO return_eof;
      102      463
      103      464    1      F.saved_char = char_to_unget;
      104      465    1      F.is_saved_char = '1'B;
      105      466    1      F.is_eof = '0'B;
      106      467    1      CALL XB_RETURN_ORDINAL_RESULT (char_to_unget);
      107      468    1      RETURN;
      108      469
      109      470    1   return_eof:
      110      471    1      CALL XB_RETURN_ORDINAL_RESULT (%EOF);
      111      472    1   END ungetc;
      112      473        %EOD;

PL6.E3A0      #004=UNGETC File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:15   
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure UNGETC.

   Procedure UNGETC requires 47 words for executable code.
   Procedure UNGETC requires 8 words of local(AUTO) storage.

PL6.E3A0      #004=UNGETC File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:16   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=UNGETC File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:17   
          MINI XREF LISTING

CHAR_TO_UNGET
       446**DCL       462>>IF        464>>ASSIGN    467<>CALL
CHAR_TO_UNGET_AS_PTR
       445**DCL       446--REDEF     453<<ASSIGN
F
       333**DCL         7--PROC      456<>CALL      460<>CALL
F.AUXIO$
       365**DCL       455>>IF
F.FPT_READ.V.DVBYTE.REREAD#
       395**DCL       396--REDEF
F.FPT_READ.V.INDX#
       388**DCL       389--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       433**DCL       434--REDEF
F.IS_EOF
       335**DCL       466<<ASSIGN
F.IS_PARTLY_OPEN
       345**DCL       460>>IF
F.IS_SAVED_CHAR
       336**DCL       465<<ASSIGN
F.SAVED_CHAR
       351**DCL       464<<ASSIGN
P_CHAR_TO_UNGET
       330**DCL         7--PROC      453--ASSIGN
RETURN_EOF
       471**LABEL     460--CALLALT   462--GOTO
XB$ERR$AUXIO_FILE_POINTER
       325**DCL       456<>CALL
XBI$COMPLETE_OPEN
       449**DCL-ENT   460--CALL
XBI_SET_STREAM_ERRNO
       451**DCL-ENT   456--CALL
PL6.E3A0      #004=UNGETC File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:18   
XB_IO_ERROR
       450**DCL-ENT   457--CALL
XB_RETURN_ORDINAL_RESULT
       448**DCL-ENT   467--CALL      471--CALL

PL6.E3A0      #005=REMOVE File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:19   
      113        1        /*T***********************************************************/
      114        2        /*T*                                                         */
      115        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      116        4        /*T*                                                         */
      117        5        /*T***********************************************************/
      118        6
      119        7        remove: PROC (filename);
      120        8
      121        9        /*D* NAME: remove
      122       10             PROTOTYPE:   int remove (char *filename);
      123       11             DESCRIPTION: deletes the named file. The value returned is zero
      124       12                          if the operation succeeds and non-zero if it fails.
      125       13             RAP Oct 12, 1988
      126       14        */
      127       15
      128       16        %INCLUDE CP_6;
      129     5576
      130     5577    1   DCL filename CHAR(filename_length);
      131     5578    1   DCL filename_length SBIN;
      132     5579
      133     5580    1   DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      134     5581    1   DCL  XBI$STRLEN entry(2);
      135     5582    1   DCL  XBI_SET_ERRNO entry(1);
      136     5583
      137     5584    1   DCL dcb_number UBIN WORD;
      138     5585        %VLP_NAME (STCLASS=AUTO,LEN=31);
      139     5612        %FPT_GETDCB (STCLASS=CONSTANT,FPTN=constant_getdcb);
      140     5627        %FPT_GETDCB (STCLASS=AUTO,FPTN=auto_getdcb);
      141     5642        %FPT_RELDCB (STCLASS=CONSTANT,FPTN=constant_reldcb);
      142     5656        %FPT_RELDCB (STCLASS=AUTO,FPTN=auto_reldcb);
      143     5670        %FPT_OPEN (STCLASS=CONSTANT,ASN=FILE,FUN=IN,DELETE=YES,FPTN=constant_open);
      144     5779        %FPT_OPEN (STCLASS=AUTO,FPTN=auto_open);
      145     5888           %FPT_FID (FPTN=FPT_FID, STCLASS=CONSTANT);
      146     5911           %FPT_FID (FPTN=FPT@FID, STCLASS=AUTO);
      147     5934           %VLP_NAME (FPTN=VLP@NAME, LEN=31, STCLASS=AUTO);
      148     5961           %VLP_ACCT (FPTN=VLP@ACCT, STCLASS=AUTO);
      149     5974           %VLP_PASS (FPTN=VLP@PASS, STCLASS=AUTO);
PL6.E3A0      #005=REMOVE File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:20   
      150     5987           %VLP_WSN (FPTN=VLP@WSN, STCLASS=AUTO);
      151     6000           %VLP_SN (FPTN=VLP@SN, STCLASS=AUTO);
      152     6013
      153     6014           %VLR_FID (FPTN=VLR@FID, STCLASS=AUTO);
      154     6033
      155     6034        /*D* NAME: unlink
      156     6035             PROTOTYPE:   int unlink (char *filename);
      157     6036             DESCRIPTION: deletes the named file. The value returned is zero
      158     6037                          if the operation succeeds and non-zero if it fails.
      159     6038             WGE SEP 10, 1990
      160     6039        */
      161     6040
      162     6041    1   unlink:  entry (filename);
      163     6042
      164     6043    1   call  XBI$STRLEN (filename, filename_length);
      165     6044    1   IF filename_length=0 THEN CALL XB_RETURN_ORDINAL_RESULT(0);
      166     6045    1   VLP_NAME.L# = filename_length;
      167     6046    1   SUBSTR(VLP_NAME.NAME#,0,filename_length) = SUBSTR(filename,0,filename_length);
      168     6047    1   auto_getdcb = constant_getdcb;
      169     6048    1   auto_getdcb.v_ = VECTOR(auto_getdcb.v);
      170     6049    1   auto_getdcb.dcbnum_ = VECTOR(dcb_number);
      171     6050    1   CALL M$GETDCB (auto_getdcb)
      172     6051    2   WHENALTRETURN DO;
      173     6052    2     CALL XBI_SET_ERRNO;
      174     6053    2      CALL XB_RETURN_ORDINAL_RESULT(-1);
      175     6054    2      END;
      176     6055    1   auto_open = constant_open;
      177     6056    1   auto_open.v_ = VECTOR(auto_open.v);
      178     6057    1      FPT@FID           = FPT_FID;
      179     6058    1      FPT@FID.V_        = VECTOR(FPT@FID.V);
      180     6059    1      FPT@FID.NAME_     = VECTOR(VLP@NAME);
      181     6060    1      FPT@FID.ACCT_     = VECTOR(VLP@ACCT);
      182     6061    1      FPT@FID.PASS_     = VECTOR(VLP@PASS);
      183     6062    1      FPT@FID.ASN_      = VECTOR(auto_open.V.ASN#);
      184     6063    1      FPT@FID.RES_      = VECTOR(auto_open.V.RES#);
      185     6064    1      FPT@FID.SN_       = VECTOR(VLP@SN);
      186     6065    1      FPT@FID.WSN_      = VECTOR(VLP@WSN);
PL6.E3A0      #005=REMOVE File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:21   
      187     6066    1      FPT@FID.TEXTFID_  = VECTOR(filename);
      188     6067    1      FPT@FID.RESULTS_  = VECTOR(VLR@FID);
      189     6068    1      VLR@FID = '0'B;
      190     6069    2      CALL M$FID (FPT@FID) whenaltreturn do;
      191     6070    2        call XBI_SET_ERRNO;
      192     6071    2        call XB_RETURN_ORDINAL_RESULT(-1);
      193     6072    2        end;
      194     6073
      195     6074    1      auto_open.ACCT_ = VECTOR(VLP@ACCT);
      196     6075    1      auto_open.NAME_ = VECTOR(VLP@NAME);
      197     6076    1      auto_open.PASS_ = VECTOR(VLP@PASS);
      198     6077    1      auto_open.SN_ = VECTOR(VLP@SN);
      199     6078    1      auto_open.WSN_ = VECTOR(VLP@WSN);
      200     6079    1   auto_open.v.dcb# = dcb_number;
      201     6080    1   CALL M$OPEN (auto_open) ALTRET(error_exit);    /* actually a delete request */
      202     6081    1   auto_reldcb = constant_reldcb;
      203     6082    1   auto_reldcb.v_ = VECTOR(auto_reldcb.v);
      204     6083    1   auto_reldcb.v.dcb# = dcb_number;
      205     6084    2   CALL M$RELDCB (auto_reldcb) WHENALTRETURN DO; END;
      206     6085    1   CALL XB_RETURN_ORDINAL_RESULT(0);
      207     6086
      208     6087    1   error_exit:
      209     6088    1   auto_reldcb = constant_reldcb;
      210     6089    1   auto_reldcb.v_ = VECTOR(auto_reldcb.v);
      211     6090    1   auto_reldcb.v.dcb# = dcb_number;
      212     6091    2   CALL M$RELDCB (auto_reldcb) whenaltreturn do; ; end;
      213     6092    1   CALL XBI_SET_ERRNO;
      214     6093    1   CALL XB_RETURN_ORDINAL_RESULT(-1);
      215     6094
      216     6095    1   END remove;
      217     6096        %EOD;

PL6.E3A0      #005=REMOVE File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:22   
--  Include file information  --

   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure REMOVE.

   Procedure REMOVE requires 201 words for executable code.
   Procedure REMOVE requires 138 words of local(AUTO) storage.

PL6.E3A0      #005=REMOVE File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:23   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=REMOVE File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:24   
          MINI XREF LISTING

AUTO_GETDCB
      5638**DCL      6047<<ASSIGN   6050<>CALL
AUTO_GETDCB.DCBNUM_
      5638**DCL      6049<<ASSIGN
AUTO_GETDCB.V
      5639**DCL      6048--ASSIGN
AUTO_GETDCB.V_
      5638**DCL      6048<<ASSIGN
AUTO_OPEN
      5844**DCL      6055<<ASSIGN   6080<>CALL
AUTO_OPEN.ACCT_
      5848**DCL      6074<<ASSIGN
AUTO_OPEN.ACSVEH_
      5846**DCL      5847--REDEF
AUTO_OPEN.ALTKEYS_
      5852**DCL      5853--REDEF    5853--REDEF
AUTO_OPEN.HDR_
      5851**DCL      5852--REDEF
AUTO_OPEN.NAME_
      5845**DCL      6075<<ASSIGN
AUTO_OPEN.PASS_
      5846**DCL      6076<<ASSIGN
AUTO_OPEN.SN_
      5844**DCL      6077<<ASSIGN
AUTO_OPEN.TAB_
      5850**DCL      5851--REDEF
AUTO_OPEN.UHL_
      5844**DCL      5845--REDEF    5845--REDEF
AUTO_OPEN.V
      5853**DCL      6056--ASSIGN
AUTO_OPEN.V.ASN#
      5863**DCL      6062--ASSIGN
PL6.E3A0      #005=REMOVE File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:25   
AUTO_OPEN.V.DCB#
      5853**DCL      6079<<ASSIGN
AUTO_OPEN.V.FSN#
      5884**DCL      5884--REDEF    5884--REDEF
AUTO_OPEN.V.RES#
      5868**DCL      6063--ASSIGN
AUTO_OPEN.V_
      5844**DCL      6056<<ASSIGN
AUTO_OPEN.WSN_
      5850**DCL      5850--REDEF    6078<<ASSIGN
AUTO_RELDCB
      5667**DCL      6081<<ASSIGN   6084<>CALL     6088<<ASSIGN   6091<>CALL
AUTO_RELDCB.V
      5667**DCL      6082--ASSIGN   6089--ASSIGN
AUTO_RELDCB.V.DCB#
      5667**DCL      6083<<ASSIGN   6090<<ASSIGN
AUTO_RELDCB.V_
      5667**DCL      6082<<ASSIGN   6089<<ASSIGN
CONSTANT_GETDCB
      5623**DCL      6047>>ASSIGN
CONSTANT_GETDCB.V
      5624**DCL      5623--DCLINIT
CONSTANT_OPEN
      5735**DCL      6055>>ASSIGN
CONSTANT_OPEN.ACSVEH_
      5737**DCL      5738--REDEF
CONSTANT_OPEN.ALTKEYS_
      5743**DCL      5744--REDEF    5744--REDEF
CONSTANT_OPEN.HDR_
      5742**DCL      5743--REDEF
CONSTANT_OPEN.TAB_
      5741**DCL      5742--REDEF
CONSTANT_OPEN.UHL_
      5735**DCL      5736--REDEF    5736--REDEF
CONSTANT_OPEN.V
      5744**DCL      5735--DCLINIT
PL6.E3A0      #005=REMOVE File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:26   
CONSTANT_OPEN.V.FSN#
      5775**DCL      5775--REDEF    5775--REDEF
CONSTANT_OPEN.WSN_
      5741**DCL      5741--REDEF
CONSTANT_RELDCB
      5653**DCL      6081>>ASSIGN   6088>>ASSIGN
CONSTANT_RELDCB.V
      5653**DCL      5653--DCLINIT
DCB_NUMBER
      5584**DCL      6049--ASSIGN   6079>>ASSIGN   6083>>ASSIGN   6090>>ASSIGN
ERROR_EXIT
      6088**LABEL    6080--CALLALT
FILENAME
      5577**DCL         7--PROC     6041--ENTRY    6043<>CALL     6046>>ASSIGN   6066--ASSIGN
FILENAME_LENGTH
      5578**DCL      5577--IMP-SIZ  6043>>CALL     6043<>CALL     6044>>IF       6045>>ASSIGN   6046>>ASSIGN
      6046>>ASSIGN   6046>>ASSIGN   6066>>ASSIGN
FPT@FID
      5922**DCL      6057<<ASSIGN   6069<>CALL
FPT@FID.ACCT_
      5923**DCL      6060<<ASSIGN
FPT@FID.ASN_
      5925**DCL      6062<<ASSIGN
FPT@FID.NAME_
      5923**DCL      6059<<ASSIGN
FPT@FID.PASS_
      5923**DCL      6061<<ASSIGN
FPT@FID.RESULTS_
      5925**DCL      6067<<ASSIGN
FPT@FID.RES_
      5925**DCL      6063<<ASSIGN
FPT@FID.SN_
      5924**DCL      6064<<ASSIGN
FPT@FID.TEXTFID_
      5922**DCL      6066<<ASSIGN
FPT@FID.V
PL6.E3A0      #005=REMOVE File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:27   
      5926**DCL      6058--ASSIGN
FPT@FID.V_
      5922**DCL      6058<<ASSIGN
FPT@FID.WSN_
      5924**DCL      6065<<ASSIGN
FPT_FID
      5899**DCL      6057>>ASSIGN
FPT_FID.V
      5903**DCL      5899--DCLINIT
M$FID
      5567**DCL-ENT  6069--CALL
M$GETDCB
      5510**DCL-ENT  6050--CALL
M$OPEN
      5504**DCL-ENT  6080--CALL
M$RELDCB
      5510**DCL-ENT  6084--CALL     6091--CALL
VLP@ACCT
      5972**DCL      6060--ASSIGN   6074--ASSIGN
VLP@NAME
      5959**DCL      6059--ASSIGN   6075--ASSIGN
VLP@PASS
      5985**DCL      6061--ASSIGN   6076--ASSIGN
VLP@SN
      6011**DCL      6064--ASSIGN   6077--ASSIGN
VLP@WSN
      5998**DCL      6065--ASSIGN   6078--ASSIGN
VLP_NAME.L#
      5610**DCL      6045<<ASSIGN
VLP_NAME.NAME#
      5610**DCL      6046<<ASSIGN
VLR@FID
      6025**DCL      6067--ASSIGN   6068<<ASSIGN
XBI$STRLEN
      5581**DCL-ENT  6043--CALL
XBI_SET_ERRNO
PL6.E3A0      #005=REMOVE File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:28   
      5582**DCL-ENT  6052--CALL     6070--CALL     6092--CALL
XB_RETURN_ORDINAL_RESULT
      5580**DCL-ENT  6044--CALL     6053--CALL     6071--CALL     6085--CALL     6093--CALL

PL6.E3A0      #006=RENAME File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:29   
      218        1        /*T***********************************************************/
      219        2        /*T*                                                         */
      220        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      221        4        /*T*                                                         */
      222        5        /*T***********************************************************/
      223        6
      224        7        rename: PROC (oldname,newname);
      225        8
      226        9        /*D* NAME: rename
      227       10             PROTOTYPE:   int rename (char *oldname, *newname);
      228       11             DESCRIPTION: changes the file called oldname to newname. The value
      229       12                          returned is zero if the operation succeeds and non-zero
      230       13                          if it fails.
      231       14             RAP Oct 12, 1988
      232       15        */
      233       16
      234       17        %INCLUDE CP_6;
      235     5577
      236     5578    1   DCL oldname CHAR(oldname_length);
      237     5579    1   DCL oldname_length SBIN;
      238     5580    1   DCL newname CHAR(newname_length);
      239     5581    1   DCL newname_length SBIN;
      240     5582
      241     5583    1   DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      242     5584    1   DCL  XBI$STRLEN            entry(2);
      243     5585
      244     5586    1   DCL dcb_number UBIN WORD;
      245     5587        %FPT_FID (FPTN=CONST_FPT_FID, STCLASS=CONSTANT);
      246     5610        %FPT_FID (FPTN=FPT_OLDFID, STCLASS=AUTO);
      247     5633        %FPT_FID (FPTN=FPT_NEWFID, STCLASS=AUTO);
      248     5656
      249     5657        %VLP_NAME (FPTN=VLP_OLDNAME, LEN=31, STCLASS=AUTO);
      250     5684        %VLP_ACCT (FPTN=VLP_OLDACCT, STCLASS=AUTO);
      251     5697        %VLP_PASS (FPTN=VLP_OLDPASS, STCLASS=AUTO);
      252     5710        %VLP_WSN (FPTN=VLP_OLDWSN, STCLASS=AUTO);
      253     5723        %VLP_SN (FPTN=VLP_OLDSN, STCLASS=AUTO);
      254     5736        %VLR_FID (FPTN=VLR_OLDFID, STCLASS=AUTO);
PL6.E3A0      #006=RENAME File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:30   
      255     5755
      256     5756        %VLP_NAME (FPTN=VLP_NEWNAME, LEN=31, STCLASS=AUTO);
      257     5783        %VLP_ACCT (FPTN=VLP_NEWACCT, STCLASS=AUTO);
      258     5796        %VLP_PASS (FPTN=VLP_NEWPASS, STCLASS=AUTO);
      259     5809        %VLP_WSN (FPTN=VLP_NEWWSN, STCLASS=AUTO);
      260     5822        %VLP_SN (FPTN=VLP_NEWSN, STCLASS=AUTO);
      261     5835        %VLR_FID (FPTN=VLR_NEWFID, STCLASS=AUTO);
      262     5854
      263     5855        %FPT_GETDCB (STCLASS=CONSTANT,FPTN=constant_getdcb);
      264     5870        %FPT_GETDCB (STCLASS=AUTO,FPTN=auto_getdcb);
      265     5885        %FPT_RELDCB (STCLASS=CONSTANT,FPTN=constant_reldcb);
      266     5899        %FPT_RELDCB (STCLASS=AUTO,FPTN=auto_reldcb);
      267     5913        %FPT_OPEN (STCLASS=CONSTANT,ASN=FILE,FUN=UPDATE,FPTN=constant_open);
      268     6022        %FPT_OPEN (STCLASS=AUTO,FPTN=auto_open);
      269     6131        %FPT_CLOSE (STCLASS=CONSTANT,CHGATT=YES,DISP=SAVE,FPTN=constant_close);
      270     6173        %FPT_CLOSE (STCLASS=AUTO,FPTN=auto_close);
      271     6215
      272     6216        /* build the oldname */
      273     6217
      274     6218    1   call  XBI$STRLEN (oldname, oldname_length);
      275     6219    1   VLP_OLDNAME.L#= oldname_length;
      276     6220    1   IF VLP_OLDNAME.L#=0 THEN CALL XB_RETURN_ORDINAL_RESULT(-1);
      277     6221    1   SUBSTR(VLP_OLDNAME.NAME#,0,VLP_OLDNAME.L#) = SUBSTR(oldname,0,VLP_OLDNAME.L#);
      278     6222
      279     6223        /* build the newname */
      280     6224
      281     6225    1   call  XBI$STRLEN (newname, newname_length);
      282     6226    1   VLP_NEWNAME.L#= newname_length;
      283     6227    1   IF VLP_NEWNAME.L#=0 THEN CALL XB_RETURN_ORDINAL_RESULT(-1);
      284     6228    1   SUBSTR(VLP_NEWNAME.NAME#,0,VLP_NEWNAME.L#) = SUBSTR(newname,0,VLP_NEWNAME.L#);
      285     6229
      286     6230        /* get a DCB to use */
      287     6231
      288     6232    1   auto_getdcb = constant_getdcb;
      289     6233    1   auto_getdcb.v_ = VECTOR(auto_getdcb.v);
      290     6234    1   auto_getdcb.dcbnum_ = VECTOR(dcb_number);
      291     6235    1   CALL M$GETDCB (auto_getdcb)
PL6.E3A0      #006=RENAME File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:31   
      292     6236    2   WHENALTRETURN DO;     /* failed to get a DCB .. give user an error */
      293     6237    2      CALL XB_RETURN_ORDINAL_RESULT(-1);
      294     6238    2      END;
      295     6239
      296     6240        /*    M$FID noth the input and output file names */
      297     6241
      298     6242    1   auto_open = constant_open;
      299     6243    1   auto_open.v_ = VECTOR(auto_open.v);
      300     6244    1   FPT_OLDFID        = CONST_FPT_FID;
      301     6245    1   FPT_OLDFID.V_     = VECTOR(FPT_OLDFID.V);
      302     6246    1   FPT_OLDFID.NAME_  = VECTOR(VLP_OLDNAME);
      303     6247    1   FPT_OLDFID.ACCT_  = VECTOR(VLP_OLDACCT);
      304     6248    1   FPT_OLDFID.PASS_  = VECTOR(VLP_OLDPASS);
      305     6249    1   FPT_OLDFID.ASN_   = VECTOR(auto_open.V.ASN#);
      306     6250    1   FPT_OLDFID.RES_   = VECTOR(auto_open.V.RES#);
      307     6251    1   FPT_OLDFID.SN_    = VECTOR(VLP_OLDSN);
      308     6252    1   FPT_OLDFID.WSN_   = VECTOR(VLP_OLDWSN);
      309     6253    1   FPT_OLDFID.TEXTFID_ = VECTOR(oldname);
      310     6254    1   FPT_OLDFID.RESULTS_ = VECTOR(VLR_OLDFID);
      311     6255    1   VLR_OLDFID = '0'B;
      312     6256    2   CALL M$FID (FPT_OLDFID) whenaltreturn do;
      313     6257    2         CALL XB_RETURN_ORDINAL_RESULT(-1);
      314     6258    2   end;
      315     6259
      316     6260    1   auto_close = constant_close;
      317     6261    1   auto_close.v_ = VECTOR(auto_close.v);
      318     6262    1   FPT_NEWFID        = CONST_FPT_FID;
      319     6263    1   FPT_NEWFID.V_     = VECTOR(FPT_NEWFID.V);
      320     6264    1   FPT_NEWFID.NAME_  = VECTOR(VLP_NEWNAME);
      321     6265    1   FPT_NEWFID.ACCT_  = VECTOR(VLP_NEWACCT);
      322     6266    1   FPT_NEWFID.PASS_  = VECTOR(VLP_NEWPASS);
      323     6267    1   FPT_NEWFID.ASN_   = VECTOR(auto_open.V.ASN#); /* Close dont have one*/
      324     6268    1   FPT_NEWFID.RES_   = VECTOR(auto_open.V.RES#); /* Close dont have one*/
      325     6269    1   FPT_NEWFID.SN_    = VECTOR(VLP_NEWSN);
      326     6270    1   FPT_NEWFID.WSN_   = VECTOR(VLP_NEWWSN);
      327     6271    1   FPT_NEWFID.TEXTFID_ = VECTOR(newname);
      328     6272    1   FPT_NEWFID.RESULTS_ = VECTOR(VLR_NEWFID);
PL6.E3A0      #006=RENAME File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:32   
      329     6273    1   VLR_NEWFID = '0'B;
      330     6274    2   CALL M$FID (FPT_NEWFID) whenaltreturn do;
      331     6275    2         CALL XB_RETURN_ORDINAL_RESULT(-1);
      332     6276    2   end;
      333     6277
      334     6278        /*    Make sure if an account was specified on the NEWNAME that it
      335     6279              is the same as the OLDNAME's account                          */
      336     6280
      337     6281    1   IF (SUBSTR(VLP_NEWACCT.ACCT#, 0) ~= SUBSTR(VLP_OLDACCT.ACCT#, 0)) THEN
      338     6282    1      CALL XB_RETURN_ORDINAL_RESULT(-1);
      339     6283
      340     6284        /* build the OPEN FPT */
      341     6285
      342     6286    1   auto_open.ACCT_ = VECTOR(VLP_OLDACCT);
      343     6287    1   auto_open.NAME_ = VECTOR(VLP_OLDNAME);
      344     6288    1   auto_open.PASS_ = VECTOR(VLP_OLDPASS);
      345     6289    1   auto_open.SN_   = VECTOR(VLP_OLDSN);
      346     6290    1   auto_open.WSN_  = VECTOR(VLP_OLDWSN);
      347     6291    1   auto_open.v.dcb# = dcb_number;
      348     6292    1   auto_open.name_ = VECTOR(VLP_OLDNAME);
      349     6293
      350     6294    1   CALL M$OPEN (auto_open) ALTRET(error_exit); /* open existing file */
      351     6295
      352     6296        /* build the CLOSE FPT */
      353     6297
      354     6298    1   auto_close.ACCT_ = VECTOR(VLP_NEWACCT);
      355     6299    1   auto_close.NAME_ = VECTOR(VLP_NEWNAME);
      356     6300    1   auto_close.PASS_ = VECTOR(VLP_NEWPASS);
      357     6301    1   auto_close.SN_   = VECTOR(VLP_NEWSN);
      358     6302    1   auto_close.v.dcb# = dcb_number;
      359     6303    1   auto_close.name_ = VECTOR(VLP_NEWNAME);
      360     6304    1   CALL M$CLOSE (auto_close) ALTRET(error_exit); /* close it re-naming */
      361     6305
      362     6306        /* build the RELDCB FPT */
      363     6307
      364     6308    1   auto_reldcb = constant_reldcb;
      365     6309    1   auto_reldcb.v_ = VECTOR(auto_reldcb.v);
PL6.E3A0      #006=RENAME File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:33   
      366     6310    1   auto_reldcb.v.dcb# = dcb_number;
      367     6311    2   CALL M$RELDCB (auto_reldcb) WHENALTRETURN DO; END;
      368     6312
      369     6313        /* when I get here everything is great */
      370     6314
      371     6315    1   CALL XB_RETURN_ORDINAL_RESULT(0);
      372     6316
      373     6317    1   error_exit:
      374     6318
      375     6319        /* give back the DCB even on an error */
      376     6320
      377     6321    1   auto_reldcb = constant_reldcb;
      378     6322    1   auto_reldcb.v_ = VECTOR(auto_reldcb.v);
      379     6323    1   auto_reldcb.v.dcb# = dcb_number;
      380     6324    2   CALL M$RELDCB (auto_reldcb) WHENALTRETURN DO; END;
      381     6325
      382     6326        /* tell caller something went very wrong */
      383     6327
      384     6328    1   CALL XB_RETURN_ORDINAL_RESULT(-1);
      385     6329
      386     6330    1   END rename;
      387     6331        %EOD;

PL6.E3A0      #006=RENAME File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:34   
--  Include file information  --

   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure RENAME.

   Procedure RENAME requires 339 words for executable code.
   Procedure RENAME requires 214 words of local(AUTO) storage.

PL6.E3A0      #006=RENAME File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:35   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=RENAME File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:36   
          MINI XREF LISTING

AUTO_CLOSE
      6196**DCL      6260<<ASSIGN   6304<>CALL
AUTO_CLOSE.ACCT_
      6200**DCL      6298<<ASSIGN
AUTO_CLOSE.NAME_
      6197**DCL      6299<<ASSIGN   6303<<ASSIGN
AUTO_CLOSE.PASS_
      6198**DCL      6300<<ASSIGN
AUTO_CLOSE.SN_
      6196**DCL      6196--REDEF    6301<<ASSIGN
AUTO_CLOSE.UTL_
      6197**DCL      6197--REDEF
AUTO_CLOSE.V
      6201**DCL      6261--ASSIGN
AUTO_CLOSE.V.DCB#
      6202**DCL      6302<<ASSIGN
AUTO_CLOSE.V.EXPIRE#
      6211**DCL      6211--REDEF
AUTO_CLOSE.V.TYPE#
      6209**DCL      6209--REDEF
AUTO_CLOSE.V.XTNSIZE#
      6206**DCL      6206--REDEF    6208--REDEF
AUTO_CLOSE.V_
      6196**DCL      6261<<ASSIGN
AUTO_GETDCB
      5881**DCL      6232<<ASSIGN   6235<>CALL
AUTO_GETDCB.DCBNUM_
      5881**DCL      6234<<ASSIGN
AUTO_GETDCB.V
      5882**DCL      6233--ASSIGN
AUTO_GETDCB.V_
      5881**DCL      6233<<ASSIGN
PL6.E3A0      #006=RENAME File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:37   
AUTO_OPEN
      6087**DCL      6242<<ASSIGN   6294<>CALL
AUTO_OPEN.ACCT_
      6091**DCL      6286<<ASSIGN
AUTO_OPEN.ACSVEH_
      6089**DCL      6090--REDEF
AUTO_OPEN.ALTKEYS_
      6095**DCL      6096--REDEF    6096--REDEF
AUTO_OPEN.HDR_
      6094**DCL      6095--REDEF
AUTO_OPEN.NAME_
      6088**DCL      6287<<ASSIGN   6292<<ASSIGN
AUTO_OPEN.PASS_
      6089**DCL      6288<<ASSIGN
AUTO_OPEN.SN_
      6087**DCL      6289<<ASSIGN
AUTO_OPEN.TAB_
      6093**DCL      6094--REDEF
AUTO_OPEN.UHL_
      6087**DCL      6088--REDEF    6088--REDEF
AUTO_OPEN.V
      6096**DCL      6243--ASSIGN
AUTO_OPEN.V.ASN#
      6106**DCL      6249--ASSIGN   6267--ASSIGN
AUTO_OPEN.V.DCB#
      6096**DCL      6291<<ASSIGN
AUTO_OPEN.V.FSN#
      6127**DCL      6127--REDEF    6127--REDEF
AUTO_OPEN.V.RES#
      6111**DCL      6250--ASSIGN   6268--ASSIGN
AUTO_OPEN.V_
      6087**DCL      6243<<ASSIGN
AUTO_OPEN.WSN_
      6093**DCL      6093--REDEF    6290<<ASSIGN
AUTO_RELDCB
      5910**DCL      6308<<ASSIGN   6311<>CALL     6321<<ASSIGN   6324<>CALL
PL6.E3A0      #006=RENAME File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:38   
AUTO_RELDCB.V
      5910**DCL      6309--ASSIGN   6322--ASSIGN
AUTO_RELDCB.V.DCB#
      5910**DCL      6310<<ASSIGN   6323<<ASSIGN
AUTO_RELDCB.V_
      5910**DCL      6309<<ASSIGN   6322<<ASSIGN
CONSTANT_CLOSE
      6154**DCL      6260>>ASSIGN
CONSTANT_CLOSE.SN_
      6154**DCL      6154--REDEF
CONSTANT_CLOSE.UTL_
      6155**DCL      6155--REDEF
CONSTANT_CLOSE.V
      6159**DCL      6154--DCLINIT
CONSTANT_CLOSE.V.EXPIRE#
      6169**DCL      6169--REDEF
CONSTANT_CLOSE.V.TYPE#
      6167**DCL      6167--REDEF
CONSTANT_CLOSE.V.XTNSIZE#
      6164**DCL      6164--REDEF    6166--REDEF
CONSTANT_GETDCB
      5866**DCL      6232>>ASSIGN
CONSTANT_GETDCB.V
      5867**DCL      5866--DCLINIT
CONSTANT_OPEN
      5978**DCL      6242>>ASSIGN
CONSTANT_OPEN.ACSVEH_
      5980**DCL      5981--REDEF
CONSTANT_OPEN.ALTKEYS_
      5986**DCL      5987--REDEF    5987--REDEF
CONSTANT_OPEN.HDR_
      5985**DCL      5986--REDEF
CONSTANT_OPEN.TAB_
      5984**DCL      5985--REDEF
CONSTANT_OPEN.UHL_
      5978**DCL      5979--REDEF    5979--REDEF
PL6.E3A0      #006=RENAME File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:39   
CONSTANT_OPEN.V
      5987**DCL      5978--DCLINIT
CONSTANT_OPEN.V.FSN#
      6018**DCL      6018--REDEF    6018--REDEF
CONSTANT_OPEN.WSN_
      5984**DCL      5984--REDEF
CONSTANT_RELDCB
      5896**DCL      6308>>ASSIGN   6321>>ASSIGN
CONSTANT_RELDCB.V
      5896**DCL      5896--DCLINIT
CONST_FPT_FID
      5598**DCL      6244>>ASSIGN   6262>>ASSIGN
CONST_FPT_FID.V
      5602**DCL      5598--DCLINIT
DCB_NUMBER
      5586**DCL      6234--ASSIGN   6291>>ASSIGN   6302>>ASSIGN   6310>>ASSIGN   6323>>ASSIGN
ERROR_EXIT
      6321**LABEL    6294--CALLALT  6304--CALLALT
FPT_NEWFID
      5644**DCL      6262<<ASSIGN   6274<>CALL
FPT_NEWFID.ACCT_
      5645**DCL      6265<<ASSIGN
FPT_NEWFID.ASN_
      5647**DCL      6267<<ASSIGN
FPT_NEWFID.NAME_
      5645**DCL      6264<<ASSIGN
FPT_NEWFID.PASS_
      5645**DCL      6266<<ASSIGN
FPT_NEWFID.RESULTS_
      5647**DCL      6272<<ASSIGN
FPT_NEWFID.RES_
      5647**DCL      6268<<ASSIGN
FPT_NEWFID.SN_
      5646**DCL      6269<<ASSIGN
FPT_NEWFID.TEXTFID_
      5644**DCL      6271<<ASSIGN
PL6.E3A0      #006=RENAME File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:40   
FPT_NEWFID.V
      5648**DCL      6263--ASSIGN
FPT_NEWFID.V_
      5644**DCL      6263<<ASSIGN
FPT_NEWFID.WSN_
      5646**DCL      6270<<ASSIGN
FPT_OLDFID
      5621**DCL      6244<<ASSIGN   6256<>CALL
FPT_OLDFID.ACCT_
      5622**DCL      6247<<ASSIGN
FPT_OLDFID.ASN_
      5624**DCL      6249<<ASSIGN
FPT_OLDFID.NAME_
      5622**DCL      6246<<ASSIGN
FPT_OLDFID.PASS_
      5622**DCL      6248<<ASSIGN
FPT_OLDFID.RESULTS_
      5624**DCL      6254<<ASSIGN
FPT_OLDFID.RES_
      5624**DCL      6250<<ASSIGN
FPT_OLDFID.SN_
      5623**DCL      6251<<ASSIGN
FPT_OLDFID.TEXTFID_
      5621**DCL      6253<<ASSIGN
FPT_OLDFID.V
      5625**DCL      6245--ASSIGN
FPT_OLDFID.V_
      5621**DCL      6245<<ASSIGN
FPT_OLDFID.WSN_
      5623**DCL      6252<<ASSIGN
M$CLOSE
      5505**DCL-ENT  6304--CALL
M$FID
      5568**DCL-ENT  6256--CALL     6274--CALL
M$GETDCB
      5511**DCL-ENT  6235--CALL
PL6.E3A0      #006=RENAME File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:41   
M$OPEN
      5505**DCL-ENT  6294--CALL
M$RELDCB
      5511**DCL-ENT  6311--CALL     6324--CALL
NEWNAME
      5580**DCL         7--PROC     6225<>CALL     6228>>ASSIGN   6271--ASSIGN
NEWNAME_LENGTH
      5581**DCL      5580--IMP-SIZ  6225>>CALL     6225<>CALL     6226>>ASSIGN   6228>>ASSIGN   6271>>ASSIGN
OLDNAME
      5578**DCL         7--PROC     6218<>CALL     6221>>ASSIGN   6253--ASSIGN
OLDNAME_LENGTH
      5579**DCL      5578--IMP-SIZ  6218>>CALL     6218<>CALL     6219>>ASSIGN   6221>>ASSIGN   6253>>ASSIGN
VLP_NEWACCT
      5794**DCL      6265--ASSIGN   6298--ASSIGN
VLP_NEWACCT.ACCT#
      5794**DCL      6281>>IF
VLP_NEWNAME
      5781**DCL      6264--ASSIGN   6299--ASSIGN   6303--ASSIGN
VLP_NEWNAME.L#
      5781**DCL      6226<<ASSIGN   6227>>IF       6228>>ASSIGN   6228>>ASSIGN
VLP_NEWNAME.NAME#
      5781**DCL      6228<<ASSIGN
VLP_NEWPASS
      5807**DCL      6266--ASSIGN   6300--ASSIGN
VLP_NEWSN
      5833**DCL      6269--ASSIGN   6301--ASSIGN
VLP_NEWWSN
      5820**DCL      6270--ASSIGN
VLP_OLDACCT
      5695**DCL      6247--ASSIGN   6286--ASSIGN
VLP_OLDACCT.ACCT#
      5695**DCL      6281>>IF
VLP_OLDNAME
      5682**DCL      6246--ASSIGN   6287--ASSIGN   6292--ASSIGN
VLP_OLDNAME.L#
      5682**DCL      6219<<ASSIGN   6220>>IF       6221>>ASSIGN   6221>>ASSIGN
PL6.E3A0      #006=RENAME File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:42   
VLP_OLDNAME.NAME#
      5682**DCL      6221<<ASSIGN
VLP_OLDPASS
      5708**DCL      6248--ASSIGN   6288--ASSIGN
VLP_OLDSN
      5734**DCL      6251--ASSIGN   6289--ASSIGN
VLP_OLDWSN
      5721**DCL      6252--ASSIGN   6290--ASSIGN
VLR_NEWFID
      5846**DCL      6272--ASSIGN   6273<<ASSIGN
VLR_OLDFID
      5747**DCL      6254--ASSIGN   6255<<ASSIGN
XBI$STRLEN
      5584**DCL-ENT  6218--CALL     6225--CALL
XB_RETURN_ORDINAL_RESULT
      5583**DCL-ENT  6220--CALL     6227--CALL     6237--CALL     6257--CALL     6275--CALL     6282--CALL
      6315--CALL     6328--CALL

PL6.E3A0      #007=SETBUF File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:29 Page:43   
      388        1        /*T***********************************************************/
      389        2        /*T*                                                         */
      390        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      391        4        /*T*                                                         */
      392        5        /*T***********************************************************/
      393        6
      394        7        setbuf: PROC (F, S);
      395        8           /*D*  NAME: setbuf
      396        9                 PROTOTYPE: void setbuf (FILE *stream, char *buf);
      397       10                 DESCRIPTION: If buf is NULL this is equivalent to the call
      398       11                          setvbuf (stream, buf, _IONBF, BUFSIZE);
      399       12                    otherwise it is equivalent to
      400       13                          setvbuf (stream, NULL, _IOFBF, BUFSIZE);
      401       14           */
      402       15
      403       16           %INCLUDE xb_stdio_i6;
      404      259           %INCLUDE xb_errors_i6;
      405      330
      406      331           %File_Header (Name=F, Stclass=" ");
      407      443           %Buffer;
      408      446    1      DCL S                CHAR (1);
      409      447
      410      448    1      DCL XBI_SET_STREAM_ERRNO      ENTRY (2);
      411      449    1      DCL XB_IO_ERROR               ENTRY;
      412      450    1      DCL XBI$TRY_UNBUFFERED        ENTRY (1);
      413      451
      414      452    2      IF (F.auxio$ ~= ADDR(NIL)) THEN DO;
      415      453    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$AUXIO_FILE_POINTER);
      416      454    2         CALL XB_IO_ERROR;
      417      455    2      END;
      418      456
      419      457    2      IF ~F.is_open OR ~F.is_partly_open THEN DO;
      420      458    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$BAD_CALL_TO_SETBUF);
      421      459    2         RETURN;
      422      460    2      END;
      423      461
      424      462    2      IF ADDR(S) = ADDR(NIL) THEN DO;
PL6.E3A0      #007=SETBUF File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:29 Page:44   
      425      463    2         CALL XBI$TRY_UNBUFFERED (F);
      426      464    3         IF F.xsa$ ~= ADDR(NIL) THEN DO;
      427      465    3            F.cancel_xsa = '1'B;
      428      466    3         END;
      429      467    2      END;
      430      468    2      ELSE DO;
      431      469    2         F.buffer$ = ADDR(S);
      432      470    2         F.buffer_size = %BUFSIZ;
      433      471    2         IF F.is_text THEN
      434      472                 /* save space for a trailing newline */
      435      473    2            F.fpt_read.buf_ = VECTOR (SUBSTR (buffer, 0, F.buffer_size-1));
      436      474    2         ELSE
      437      475    2            F.fpt_read.buf_ = VECTOR (SUBSTR (buffer, 0, F.buffer_size));
      438      476    2      END;
      439      477    1   END setbuf;
      440      478        %EOD;

PL6.E3A0      #007=SETBUF File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:29 Page:45   
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure SETBUF.

   Procedure SETBUF requires 73 words for executable code.
   Procedure SETBUF requires 8 words of local(AUTO) storage.

PL6.E3A0      #007=SETBUF File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:29 Page:46   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=SETBUF File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:29 Page:47   
          MINI XREF LISTING

BUFFER
       444**DCL       473--ASSIGN    475--ASSIGN
F
       332**DCL         7--PROC      453<>CALL      458<>CALL      463<>CALL
F.AUXIO$
       364**DCL       452>>IF
F.BUFFER$
       356**DCL       444--IMP-PTR   469<<ASSIGN    473>>ASSIGN    475>>ASSIGN
F.BUFFER_SIZE
       357**DCL       444--IMP-SIZ   470<<ASSIGN    473>>ASSIGN    473>>ASSIGN    475>>ASSIGN    475>>ASSIGN
F.CANCEL_XSA
       345**DCL       465<<ASSIGN
F.FPT_READ.BUF_
       374**DCL       473<<ASSIGN    475<<ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
       394**DCL       395--REDEF
F.FPT_READ.V.INDX#
       387**DCL       388--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       432**DCL       433--REDEF
F.IS_OPEN
       340**DCL       457>>IF
F.IS_PARTLY_OPEN
       344**DCL       457>>IF
F.IS_TEXT
       333**DCL       471>>IF
F.XSA$
       358**DCL       464>>IF
S
       446**DCL         7--PROC      462--IF        469--ASSIGN
XB$ERR$AUXIO_FILE_POINTER
       326**DCL       453<>CALL
PL6.E3A0      #007=SETBUF File=xb_io_misc:6.:XBC3TSI                             FRI 01/06/95 11:29 Page:48   
XB$ERR$BAD_CALL_TO_SETBUF
       320**DCL       458<>CALL
XBI$TRY_UNBUFFERED
       450**DCL-ENT   463--CALL
XBI_SET_STREAM_ERRNO
       448**DCL-ENT   453--CALL      458--CALL
XB_IO_ERROR
       449**DCL-ENT   454--CALL

PL6.E3A0      #008=SETVBUF File=xb_io_misc:6.:XBC3TSI                            FRI 01/06/95 11:29 Page:49   
      441        1        /*T***********************************************************/
      442        2        /*T*                                                         */
      443        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      444        4        /*T*                                                         */
      445        5        /*T***********************************************************/
      446        6
      447        7        setvbuf: PROC (F, S, mode_P, size_P) ;
      448        8           /*D*  NAME: setvbuf
      449        9                 PROTOTYPE: int setvbuf (FILE *stream, char *buf, int mode,
      450       10                                         size_t size);
      451       11                 DESCRIPTION: Specifies a buffering mode for a stream and the size
      452       12                    and origin of the buffer (user supplied or program allocated).
      453       13                    Returns zero on success or nonzero on failure.
      454       14           */
      455       15
      456       16           %INCLUDE xb_stdio_i6;
      457      259           %INCLUDE xb_errors_i6;
      458      330
      459      331           %File_Header (Name=F, Stclass=" ");
      460      443           %Buffer;
      461      446    1      DCL S                         CHAR (1);
      462      447    1      DCL mode_P                    SBIN;
      463      448    1      DCL size_P                    SBIN;
      464      449
      465      450    1      DCL mode                      SBIN;
      466      451    1      DCL mode_as_ptr REDEF mode    PTR;
      467      452    1      DCL size                      SBIN;
      468      453    1      DCL size_as_ptr REDEF size    PTR;
      469      454    1      DCL size_to_allocate          SBIN;
      470      455
      471      456    1      DCL XBI_MALLOC                ENTRY (2);
      472      457    1      DCL XBI$PROTECT_POINTER       ENTRY (1);
      473      458    1      DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      474      459    1      DCL XBI_SET_STREAM_ERRNO      ENTRY (2);
      475      460    1      DCL XBI$TRY_UNBUFFERED        ENTRY (1);
      476      461    1      DCL XB_IO_ERROR            ENTRY;
      477      462    1      DCL XBI$COMPLETE_OPEN ENTRY(1) ALTRET;
PL6.E3A0      #008=SETVBUF File=xb_io_misc:6.:XBC3TSI                            FRI 01/06/95 11:29 Page:50   
      478      463
      479      464    1      mode_as_ptr = ADDR (mode_P);
      480      465    1      size_as_ptr = ADDR (size_P);
      481      466
      482      467    2      IF (F.auxio$ ~= ADDR(NIL)) THEN DO;
      483      468    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$AUXIO_FILE_POINTER);
      484      469    2         CALL XB_IO_ERROR;
      485      470    2      END;
      486      471
      487      472    1      IF (NOT F.is_open) OR (NOT F.is_partly_open) OR
      488      473    1         (size < 0) OR
      489      474    1         (NOT ((mode = %setvbuf_IONBF) OR (mode = %setvbuf_IOFBF) OR
      490      475    1               (mode = %setvbuf_IOLBF)))
      491      476    2      THEN DO;
      492      477    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$BAD_CALL_TO_SETBUF);
      493      478    2         CALL XB_RETURN_ORDINAL_RESULT (1);
      494      479    2      END;
      495      480
      496      481    1      IF mode = %setvbuf_IONBF THEN CALL XBI$TRY_UNBUFFERED (F);
      497      482
      498      483    1      IF mode ~= %setvbuf_IOFBF AND F.xsa$ ~= ADDR(NIL) THEN
      499      484    1         F.cancel_xsa = '1'B;
      500      485
      501      486    1      IF ADDR(S) = ADDR(NIL) OR
      502      487    1         (F.is_text AND size < 2) OR
      503      488    1         (NOT F.is_text AND size < 1)
      504      489    2      THEN DO;
      505      490    2         size_to_allocate = size;
      506      491    2         IF (F.is_text AND size < 2) THEN size_to_allocate = %BUFSIZ;
      507      492    2         IF (NOT F.is_text AND size < 1) THEN size_to_allocate = %BUFSIZ;
      508      493    2         CALL XBI_MALLOC (size_to_allocate, F.buffer$);
      509      494    2         IF F.buffer$ = ADDR(NIL) THEN
      510      495    2            CALL XB_RETURN_ORDINAL_RESULT (1); /* out of memory */
      511      496    2         CALL XBI$PROTECT_POINTER (F.buffer$);
      512      497    2         F.buffer_size = size_to_allocate;
      513      498    2         F.has_auto_buffer = '1'B;
      514      499    2      END; ELSE DO;
PL6.E3A0      #008=SETVBUF File=xb_io_misc:6.:XBC3TSI                            FRI 01/06/95 11:29 Page:51   
      515      500    2         F.buffer$ = ADDR(S);
      516      501    2         F.buffer_size = size;
      517      502    2      END;
      518      503    1      IF F.is_text THEN
      519      504              /* save space for a trailing newline */
      520      505    1         F.fpt_read.buf_ = VECTOR (SUBSTR (buffer, 0, F.buffer_size-1));
      521      506    1      ELSE
      522      507    1         F.fpt_read.buf_ = VECTOR (SUBSTR (buffer, 0, F.buffer_size));
      523      508    1      CALL XB_RETURN_ORDINAL_RESULT (0); /* return zero */
      524      509    1   END setvbuf;

PL6.E3A0      #008=SETVBUF File=xb_io_misc:6.:XBC3TSI                            FRI 01/06/95 11:29 Page:52   
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure SETVBUF.

   Procedure SETVBUF requires 149 words for executable code.
   Procedure SETVBUF requires 12 words of local(AUTO) storage.

    No errors detected in file xb_io_misc:6.:XBC3TSI    .

PL6.E3A0      #008=SETVBUF File=xb_io_misc:6.:XBC3TSI                            FRI 01/06/95 11:29 Page:53   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=SETVBUF File=xb_io_misc:6.:XBC3TSI                            FRI 01/06/95 11:29 Page:54   
          MINI XREF LISTING

BUFFER
       444**DCL       505--ASSIGN    507--ASSIGN
F
       332**DCL         7--PROC      468<>CALL      477<>CALL      481<>CALL
F.AUXIO$
       364**DCL       467>>IF
F.BUFFER$
       356**DCL       444--IMP-PTR   493<>CALL      494>>IF        496<>CALL      500<<ASSIGN    505>>ASSIGN
       507>>ASSIGN
F.BUFFER_SIZE
       357**DCL       444--IMP-SIZ   497<<ASSIGN    501<<ASSIGN    505>>ASSIGN    505>>ASSIGN    507>>ASSIGN
       507>>ASSIGN
F.CANCEL_XSA
       345**DCL       484<<ASSIGN
F.FPT_READ.BUF_
       374**DCL       505<<ASSIGN    507<<ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
       394**DCL       395--REDEF
F.FPT_READ.V.INDX#
       387**DCL       388--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       432**DCL       433--REDEF
F.HAS_AUTO_BUFFER
       341**DCL       498<<ASSIGN
F.IS_OPEN
       340**DCL       472>>IF
F.IS_PARTLY_OPEN
       344**DCL       472>>IF
F.IS_TEXT
       333**DCL       486>>IF        486>>IF        491>>IF        492>>IF        503>>IF
F.XSA$
       358**DCL       483>>IF
PL6.E3A0      #008=SETVBUF File=xb_io_misc:6.:XBC3TSI                            FRI 01/06/95 11:29 Page:55   
MODE
       450**DCL       451--REDEF     472>>IF        472>>IF        472>>IF        481>>IF        483>>IF
MODE_AS_PTR
       451**DCL       464<<ASSIGN
MODE_P
       447**DCL         7--PROC      464--ASSIGN
S
       446**DCL         7--PROC      486--IF        500--ASSIGN
SIZE
       452**DCL       453--REDEF     472>>IF        486>>IF        486>>IF        490>>ASSIGN    491>>IF
       492>>IF        501>>ASSIGN
SIZE_AS_PTR
       453**DCL       465<<ASSIGN
SIZE_P
       448**DCL         7--PROC      465--ASSIGN
SIZE_TO_ALLOCATE
       454**DCL       490<<ASSIGN    491<<ASSIGN    492<<ASSIGN    493<>CALL      497>>ASSIGN
XB$ERR$AUXIO_FILE_POINTER
       326**DCL       468<>CALL
XB$ERR$BAD_CALL_TO_SETBUF
       320**DCL       477<>CALL
XBI$PROTECT_POINTER
       457**DCL-ENT   496--CALL
XBI$TRY_UNBUFFERED
       460**DCL-ENT   481--CALL
XBI_MALLOC
       456**DCL-ENT   493--CALL
XBI_SET_STREAM_ERRNO
       459**DCL-ENT   468--CALL      477--CALL
XB_IO_ERROR
       461**DCL-ENT   469--CALL
XB_RETURN_ORDINAL_RESULT
       458**DCL-ENT   478--CALL      495--CALL      508--CALL
