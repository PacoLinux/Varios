VERSION E05

PL6.E3A0      #001=CXC$GETDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:22 Page:1    
        1        1        /*M* CXC$GETDCB, CXC$RELDCB, CXC$GETSEG, CXC$RELSEG, CXC$SCREECH, CXC$RFEXT */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*  DMC,DFC   */
        8        8        /**********************************************************************/
        9        9        /*F*   NAME:   CXC$GETDCB
       10       10               PURPOSE: To obtain a specified dcb
       11       11               DESCRIPTION: CXC$GETDCB gets a dcb specified by the passed parameters
       12       12        */
       13       13        /*D*   NAME:   CXC$GETDCB
       14       14               CALL:   CALL CXC$GETDCB(dcbname,dcb#);
       15       15               INTERFACE:
       16       16               INPUT: DCBNAME - name of dcb to be obtained
       17       17                       DCB# - number of dcb to be associated with the named dcb or 0
       18       18               OUTPUT: DCB# - dcb number
       19       19               DESCRIPTION: The specified dcb is obtained using the M$GETDCB pmme
       20       20                       and associated with the specified dcb pointer entry.
       21       21                       In the case of IBEX and IBEX1, special dcb numbers 5 and 6 are
       22       22                       reserved by the system for IBEX'S use and should always be
       23       23                       obtainable. A request for standard dcbs may be made by
       24       24                       specifying a dcb name and a dcb number of 0.
       25       25                       If 0 is specified, the dcb number associated with the obtained
       26       26                       dcb is returned to the calling procedure.
       27       27        ***********************************************************************/
       28       28        CXC$GETDCB: PROC(DCBNAME,DCB#) ;
       29       29                   %INCLUDE CP_6;
       30      110                   %INCLUDE CP_6_SUBS;
       31      650                   %INCLUDE B$JIT;
       32      940                   %INCLUDE XU_MACRO_C;
       33     4046                   %INCLUDE B_MACROS_C;
       34     4157                   %INCLUDE CX_DATA_R;
       35     5091                   %INCLUDE F_ERRORS_C;
       36     5331        /***** fpts *****/
       37     5332        %FPT_GETDCB(FPTN = FPT_GETDCB,STCLASS = AUTO);
PL6.E3A0      #001=CXC$GETDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:22 Page:2    
       38     5347        /***** parameters *****/
       39     5348        %TEXTC (NAME = DCBNAME,STCLASS = " ");
       40     5353    1   DCL     DCB#     UBIN  WORD;
       41     5354        /***** Based structures *****/
       42     5355        %B$TCB (STCLASS="BASED(B$TCB$)");
       43     5358        %B$ALT;
       44     5366        /**/
       45     5367    1           FPT_GETDCB = CPSL_CFPT_GETDCB;
       46     5368    1           FPT_GETDCB.V_ = VECTOR(FPT_GETDCB.V);
       47     5369    1           FPT_GETDCB.V.DCB# = DCB#;
       48     5370    1           FPT_GETDCB.V.MERGE# = %YES#;
       49     5371    1           FPT_GETDCB.DCBNUM_ = VECTOR(DCB#);
       50     5372
       51     5373    1           FPT_GETDCB.DCBNAME_ = VECTOR(DCBNAME);
       52     5374    1           B$JIT.USRERR = %NO# ;
       53     5375    1           CALL M$GETDCB(FPT_GETDCB) ALTRET(E_GETDCB);
       54     5376    1           RETURN;
       55     5377    1   E_GETDCB:
       56     5378        /*
       57     5379           **** CONSIDER AS ERROR IF WE DON'T ALREADY HAVE THE DCB
       58     5380        */
       59     5381    1           IF B$TCB.ALT$ -> B$ALT.ERR.CODE ~= %E$DCBHERE
       60     5382    1              THEN   /* Don't already have the dcb */
       61     5383    1                 B$JIT.USRERR = B$TCB.ALT$ -> B$ALT.ERR;
       62     5384    1           RETURN;
       63     5385    1   END CXC$GETDCB;
       64     5386                   %EOD;

PL6.E3A0      #001=CXC$GETDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:22 Page:3    
--  Include file information  --

   F_ERRORS_C.:E05TOU  is referenced.
   CX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CXC$GETDCB.

   Procedure CXC$GETDCB requires 46 words for executable code.
   Procedure CXC$GETDCB requires 16 words of local(AUTO) storage.

PL6.E3A0      #001=CXC$GETDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:22 Page:4    

 Object Unit name= CXC$GETDCB                                 File name= CXC$SUBR.:E05TOU
 UTS= JUL 29 '97 12:22:26.52 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    46     56  CXC$GETDCB
    2  RoData even  none     1      1  CXC$GETDCB

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        2  CXC$GETDCB

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  CPSL_CFPT_GETDCB                 r    B$JIT$
r    B$TCB$
PL6.E3A0      #001=CXC$GETDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:22 Page:5    


        1        1        /*M* CXC$GETDCB, CXC$RELDCB, CXC$GETSEG, CXC$RELSEG, CXC$SCREECH, CXC$RFEXT */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*  DMC,DFC   */
        8        8        /**********************************************************************/
        9        9        /*F*   NAME:   CXC$GETDCB
       10       10               PURPOSE: To obtain a specified dcb
       11       11               DESCRIPTION: CXC$GETDCB gets a dcb specified by the passed parameters
       12       12        */
       13       13        /*D*   NAME:   CXC$GETDCB
       14       14               CALL:   CALL CXC$GETDCB(dcbname,dcb#);
       15       15               INTERFACE:
       16       16               INPUT: DCBNAME - name of dcb to be obtained
       17       17                       DCB# - number of dcb to be associated with the named dcb or 0
       18       18               OUTPUT: DCB# - dcb number
       19       19               DESCRIPTION: The specified dcb is obtained using the M$GETDCB pmme
       20       20                       and associated with the specified dcb pointer entry.
       21       21                       In the case of IBEX and IBEX1, special dcb numbers 5 and 6 are
       22       22                       reserved by the system for IBEX'S use and should always be
       23       23                       obtainable. A request for standard dcbs may be made by
       24       24                       specifying a dcb name and a dcb number of 0.
       25       25                       If 0 is specified, the dcb number associated with the obtained
       26       26                       dcb is returned to the calling procedure.
       27       27        ***********************************************************************/
       28       28        CXC$GETDCB: PROC(DCBNAME,DCB#) ;

     28  1 000000   000000 700200 xent  CXC$GETDCB   TSX0  ! X66_AUTO_2
         1 000001   000020 000002                    ZERO    16,2

       29       29                   %INCLUDE CP_6;
       30      110                   %INCLUDE CP_6_SUBS;
       31      650                   %INCLUDE B$JIT;
       32      940                   %INCLUDE XU_MACRO_C;
PL6.E3A0      #001=CXC$GETDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:22 Page:6    
       33     4046                   %INCLUDE B_MACROS_C;
       34     4157                   %INCLUDE CX_DATA_R;
       35     5091                   %INCLUDE F_ERRORS_C;
       36     5331        /***** fpts *****/
       37     5332        %FPT_GETDCB(FPTN = FPT_GETDCB,STCLASS = AUTO);
       38     5347        /***** parameters *****/
       39     5348        %TEXTC (NAME = DCBNAME,STCLASS = " ");
       40     5353    1   DCL     DCB#     UBIN  WORD;
       41     5354        /***** Based structures *****/
       42     5355        %B$TCB (STCLASS="BASED(B$TCB$)");
       43     5358        %B$ALT;
       44     5366        /**/
       45     5367    1           FPT_GETDCB = CPSL_CFPT_GETDCB;

   5367  1 000002   000100 100400                    MLR     fill='000'O
         1 000003   000000 000040 xsym               ADSC9   CPSL_CFPT_GETDCB         cn=0,n=32
         1 000004   200006 000040                    ADSC9   FPT_GETDCB,,AUTO         cn=0,n=32

       46     5368    1           FPT_GETDCB.V_ = VECTOR(FPT_GETDCB.V);

   5368  1 000005   000000 235000 2                  LDA     0
         1 000006   200016 452500                    STP2    FPT_GETDCB+8,,AUTO
         1 000007   200016 236100                    LDQ     FPT_GETDCB+8,,AUTO
         1 000010   000014 036003                    ADLQ    12,DU
         1 000011   200006 757100                    STAQ    FPT_GETDCB,,AUTO

       47     5369    1           FPT_GETDCB.V.DCB# = DCB#;

   5369  1 000012   200004 470500                    LDP0    @DCB#,,AUTO
         1 000013   000000 720100                    LXL0    0,,PR0
         1 000014   200014 740100                    STX0    FPT_GETDCB+6,,AUTO

       48     5370    1           FPT_GETDCB.V.MERGE# = %YES#;

   5370  1 000015   400000 236007                    LDQ     -131072,DL
         1 000016   200014 256100                    ORSQ    FPT_GETDCB+6,,AUTO

PL6.E3A0      #001=CXC$GETDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:22 Page:7    
       49     5371    1           FPT_GETDCB.DCBNUM_ = VECTOR(DCB#);

   5371  1 000017   777640 235007                    LDA     -96,DL
         1 000020   200004 236100                    LDQ     @DCB#,,AUTO
         1 000021   200012 757100                    STAQ    FPT_GETDCB+4,,AUTO

       50     5372
       51     5373    1           FPT_GETDCB.DCBNAME_ = VECTOR(DCBNAME);

   5373  1 000022   200003 471500                    LDP1    @DCBNAME,,AUTO
         1 000023   000100 101500                    MRL     fill='000'O
         1 000024   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         1 000025   200016 000002                    ADSC9   FPT_GETDCB+8,,AUTO       cn=0,n=2
         1 000026   200016 221100                    LDX1    FPT_GETDCB+8,,AUTO
         1 000027   000001 622011                    EAX2    1,X1
         1 000030   000000 635012                    EAA     0,X2
         1 000031   000002 771000                    ARL     2
         1 000032   000140 135007                    SBLA    96,DL
         1 000033   200003 236100                    LDQ     @DCBNAME,,AUTO
         1 000034   200010 757100                    STAQ    FPT_GETDCB+2,,AUTO

       52     5374    1           B$JIT.USRERR = %NO# ;

   5374  1 000035   000000 473400 xsym               LDP3    B$JIT$
         1 000036   300144 450100                    STZ     100,,PR3

       53     5375    1           CALL M$GETDCB(FPT_GETDCB) ALTRET(E_GETDCB);

   5375  1 000037   200006 630500                    EPPR0   FPT_GETDCB,,AUTO
         1 000040   460002 713400                    CLIMB   alt,+24578
         1 000041   401000 401760                    pmme    nvectors=3
         1 000042   000044 702000 1                  TSX2    E_GETDCB

       54     5376    1           RETURN;

   5376  1 000043   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #001=CXC$GETDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:22 Page:8    
       55     5377    1   E_GETDCB:
       56     5378        /*
       57     5379           **** CONSIDER AS ERROR IF WE DON'T ALREADY HAVE THE DCB
       58     5380        */
       59     5381    1           IF B$TCB.ALT$ -> B$ALT.ERR.CODE ~= %E$DCBHERE

   5381  1 000044   000000 470400 xsym  E_GETDCB     LDP0    B$TCB$
         1 000045   000000 471500                    LDP1    0,,PR0
         1 000046   100102 236100                    LDQ     66,,PR1
         1 000047   377770 376007                    ANQ     131064,DL
         1 000050   001470 116007                    CMPQ    824,DL
         1 000051   000055 600000 1                  TZE     s:5384

       60     5382    1              THEN   /* Don't already have the dcb */
       61     5383    1                 B$JIT.USRERR = B$TCB.ALT$ -> B$ALT.ERR;

   5383  1 000052   100102 236100                    LDQ     66,,PR1
         1 000053   000000 473400 xsym               LDP3    B$JIT$
         1 000054   300144 756100                    STQ     100,,PR3

       62     5384    1           RETURN;

   5384  1 000055   000000 702200 xent               TSX2  ! X66_ARET
       63     5385    1   END CXC$GETDCB;
       64     5386                   %EOD;

PL6.E3A0      #001=CXC$GETDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:22 Page:9    
--  Include file information  --

   F_ERRORS_C.:E05TOU  is referenced.
   CX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CXC$GETDCB.
PL6.E3A0      #001=CXC$GETDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:22 Page:10   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @DCB#                      3-0-0/w PTR         r     1 @DCBNAME
    *0-0-0/w UBIN        r     1 DCB#                      *0-0-0/c ASTR(9)     r     1 DCBNAME
     6-0-0/d STRC(288)   r     1 FPT_GETDCB

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/d STRC(288)   r     1 CPSL_CFPT_GETDCB

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/w STRC(144)   r     1 B$TCB


   Procedure CXC$GETDCB requires 46 words for executable code.
   Procedure CXC$GETDCB requires 16 words of local(AUTO) storage.
PL6.E3A0      #001=CXC$GETDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:22 Page:11   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=CXC$GETDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:22 Page:12   
          MINI XREF LISTING

B$ALT.CODE
      5360**DCL      5360--REDEF    5361--REDEF    5361--REDEF
B$ALT.ERR
      5361**DCL      5383>>ASSIGN
B$ALT.ERR.CODE
      5362**DCL      5381>>IF
B$ALT.ERR.ERR#
      5362**DCL      5362--REDEF
B$ALT.EVID
      5361**DCL      5361--REDEF    5361--REDEF
B$JIT.CPFLAGS1.SLEAZE
       758**DCL       758--REDEF
B$JIT.ERR.MID
       665**DCL       665--REDEF
B$JIT.JRESPEAK
       826**DCL       827--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
       935**DCL       935--REDEF     936--REDEF
B$JIT.PNR
       839**DCL       839--REDEF
B$JIT.TSLINE
       933**DCL       934--REDEF
B$JIT.USRERR
       800**DCL      5374<<ASSIGN   5383<<ASSIGN
B$JIT$
      5058**DCL       659--IMP-PTR  5374>>ASSIGN   5383>>ASSIGN
B$TCB.ALT$
      5356**DCL      5381>>IF       5383>>ASSIGN
B$TCB$
      5059**DCL      5356--IMP-PTR  5381>>IF       5383>>ASSIGN
CPSL_CAMR_REC.ACSVEH_
      4346**DCL      4347--REDEF
PL6.E3A0      #001=CXC$GETDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:22 Page:13   
CPSL_CAMR_REC.ALTKEYS_
      4352**DCL      4353--REDEF    4353--REDEF
CPSL_CAMR_REC.HDR_
      4351**DCL      4352--REDEF
CPSL_CAMR_REC.TAB_
      4350**DCL      4351--REDEF
CPSL_CAMR_REC.UHL_
      4344**DCL      4345--REDEF    4345--REDEF
CPSL_CAMR_REC.V.FSN#
      4384**DCL      4384--REDEF    4384--REDEF
CPSL_CAMR_REC.WSN_
      4350**DCL      4350--REDEF
CPSL_CFPT_CLOSE.SN_
      4411**DCL      4411--REDEF
CPSL_CFPT_CLOSE.UTL_
      4412**DCL      4412--REDEF
CPSL_CFPT_CLOSE.V.EXPIRE#
      4426**DCL      4426--REDEF
CPSL_CFPT_CLOSE.V.TYPE#
      4424**DCL      4424--REDEF
CPSL_CFPT_CLOSE.V.XTNSIZE#
      4421**DCL      4421--REDEF    4423--REDEF
CPSL_CFPT_GETDCB
      4530**DCL      5367>>ASSIGN
CPSL_CFPT_OPEN.ACSVEH_
      4237**DCL      4238--REDEF
CPSL_CFPT_OPEN.ALTKEYS_
      4243**DCL      4244--REDEF    4244--REDEF
CPSL_CFPT_OPEN.HDR_
      4242**DCL      4243--REDEF
CPSL_CFPT_OPEN.TAB_
      4241**DCL      4242--REDEF
CPSL_CFPT_OPEN.UHL_
      4235**DCL      4236--REDEF    4236--REDEF
CPSL_CFPT_OPEN.V.FSN#
      4275**DCL      4275--REDEF    4275--REDEF
PL6.E3A0      #001=CXC$GETDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:22 Page:14   
CPSL_CFPT_OPEN.WSN_
      4241**DCL      4241--REDEF
CPSL_CFPT_READ.STATION_
      4450**DCL      4451--REDEF
CPSL_CFPT_READ.V.DVBYTE.REREAD#
      4462**DCL      4462--REDEF
CPSL_CFPT_READ.V.INDX#
      4460**DCL      4460--REDEF
CPSL_CFPT_WRITE.STATION_
      4488**DCL      4488--REDEF
CPSL_CFPT_WRITE.V.DVBYTE.VFC#
      4495**DCL      4495--REDEF
CPSL_CVLP_TRMCTL.BREAKCOUNT
      4879**DCL      4880--REDEF
CPSL_CVLP_WINDOW.FWINDOW#
      4975**DCL      4975--REDEF    4976--REDEF
DCB#
      5353**DCL        28--PROC     5369>>ASSIGN   5371--ASSIGN
DCBNAME
      5349**DCL        28--PROC     5373--ASSIGN
DCBNAME.SIZ
      5350**DCL      5351--IMP-SIZ  5373>>ASSIGN
E_GETDCB
      5381**LABEL    5375--CALLALT
FPT_GETDCB
      5343**DCL      5367<<ASSIGN   5375<>CALL
FPT_GETDCB.DCBNAME_
      5343**DCL      5373<<ASSIGN
FPT_GETDCB.DCBNUM_
      5343**DCL      5371<<ASSIGN
FPT_GETDCB.V
      5344**DCL      5368--ASSIGN
FPT_GETDCB.V.DCB#
      5344**DCL      5369<<ASSIGN
FPT_GETDCB.V.MERGE#
      5344**DCL      5370<<ASSIGN
PL6.E3A0      #001=CXC$GETDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:22 Page:15   
FPT_GETDCB.V_
      5343**DCL      5368<<ASSIGN
M$GETDCB
        44**DCL-ENT  5375--CALL

PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:16   
       65        1        /*T***********************************************************/
       66        2        /*T*                                                         */
       67        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       68        4        /*T*                                                         */
       69        5        /*T***********************************************************/
       70        6        /**********************************************************************/
       71        7        /*F*   NAME:   CXC$RELDCB
       72        8               PURPOSE: To release a specified dcb(s)
       73        9               DESCRIPTION: CXC$RELDCB releases the specified dcb(s)
       74       10        */
       75       11        /*D*   NAME:   CXC$RELDCB
       76       12               CALL: CALL CXC$RELDCB(dcb#1,dcb#2,dcb#3)
       77       13               INTERFACE: M$RELDCB
       78       14               INPUT:  dcb#1,dcb#2,dcb#3 - number of dcbs to be released
       79       15               OUTPUT: none
       80       16               DESCRIPTION: The specified dcb(s) which are obtained by CPSL,
       81       17                       are closed if open and then released via
       82       18                       the M$RELDCB pmme.
       83       19        */
       84       20        /**********************************************************************/
       85       21        CXC$RELDCB: PROC(DCB#1,DCB#2,DCB#3);
       86       22                   %INCLUDE B_MACROS_C;
       87      133                   %INCLUDE CP_6;
       88      214                   %INCLUDE CP_6_SUBS;
       89      754                   %INCLUDE CX_MACROS_M;
       90      805                   %INCLUDE XU_MACRO_C;
       91     3911                   %INCLUDE CX_DATA_R;
       92     4845        /***** based structures *****/
       93     4846        %F$DCB;
       94     4903        /***** fpts *****/
       95     4904        %FPT_RELDCB(FPTN = FPT_RELDCB,STCLASS = AUTO);
       96     4918        %FPT_CLOSE (FPTN = FPT_CLOSE,STCLASS = AUTO);
       97     4960        /***** parameters *****/
       98     4961    1   DCL     DCB#1    UBIN  WORD;
       99     4962    1   DCL     DCB#2    UBIN  WORD;
      100     4963    1   DCL     DCB#3    UBIN  WORD;
      101     4964        /**/
PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:17   
      102     4965    1           FPT_RELDCB = CPSL_CFPT_RELDCB;
      103     4966    1           FPT_CLOSE = CPSL_CFPT_CLOSE ;
      104     4967    1           FPT_CLOSE.V_ = VECTOR(FPT_CLOSE.V) ;
      105     4968    1           FPT_CLOSE.V.DISP# = %SAVE# ;
      106     4969    1           FPT_RELDCB.V_ = VECTOR(FPT_RELDCB.V);
      107     4970        /*
      108     4971             ***** If the dcb is currently open, close it...
      109     4972        */
      110     4973    1           IF ADDR(DCB#1) ~= ADDR(NIL) THEN
      111     4974    1             IF DCBADDR(DCB#1) ~= DCBADDR(DCBNUM(NIL)) THEN
      112     4975    2              DO;
      113     4976    2                 IF DCBADDR(DCB#1) -> F$DCB.FCD# = %NO#
      114     4977    2                 THEN /* dcb is already closed */
      115     4978    2                    GOTO E_CLOSE1;
      116     4979    2                 FPT_CLOSE.V.DCB# = DCB#1; /*CLOSE DCB*/
      117     4980    2                 CALL M$CLOSE(FPT_CLOSE) ALTRET(E_CLOSE1);
      118     4981    2   E_CLOSE1:
      119     4982    2                 FPT_RELDCB.V.DCB# = DCB#1; /*RELEASE DCB1*/
      120     4983    2                 CALL M$RELDCB(FPT_RELDCB) ALTRET(E_RELDCB1);
      121     4984    2   E_RELDCB1:
      122     4985    2              END;
      123     4986    1           IF ADDR(DCB#2) ~= ADDR(NIL) THEN
      124     4987    1             IF DCBADDR(DCB#2) ~= DCBADDR(DCBNUM(NIL)) THEN
      125     4988    2              DO;
      126     4989    2                 IF DCBADDR(DCB#2) -> F$DCB.FCD# = %NO#
      127     4990    2                 THEN /* dcb is already closed */
      128     4991    2                    GOTO E_CLOSE2;
      129     4992    2                 FPT_CLOSE.V.DCB# = DCB#2;
      130     4993    2                 CALL M$CLOSE(FPT_CLOSE) ALTRET(E_CLOSE2);
      131     4994    2   E_CLOSE2:
      132     4995    2                 FPT_RELDCB.V.DCB# = DCB#2;
      133     4996    2                 CALL M$RELDCB(FPT_RELDCB) ALTRET(E_RELDCB2);
      134     4997    2   E_RELDCB2:
      135     4998    2              END;
      136     4999    1           IF ADDR(DCB#3) ~= ADDR(NIL) THEN
      137     5000    1             IF DCBADDR(DCB#3) ~= DCBADDR(DCBNUM(NIL)) THEN
      138     5001    2              DO;
PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:18   
      139     5002    2                 IF DCBADDR(DCB#3) -> F$DCB.FCD# = %NO#
      140     5003    2                 THEN /* dcb is already closed */
      141     5004    2                    GOTO E_CLOSE3;
      142     5005    2                 FPT_CLOSE.V.DCB# = DCB#3;
      143     5006    2                 CALL M$CLOSE(FPT_CLOSE) ALTRET(E_CLOSE3);
      144     5007    2   E_CLOSE3:
      145     5008    2                 FPT_RELDCB.V.DCB# = DCB#3;
      146     5009    2                 CALL M$RELDCB(FPT_RELDCB) ALTRET(E_RELDCB3);
      147     5010    2   E_RELDCB3:
      148     5011    2              END;
      149     5012    1           RETURN;
      150     5013    1   END CXC$RELDCB;
      151     5014                   %EOD;

PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:19   
--  Include file information  --

   CX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CX_MACROS_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CXC$RELDCB.

   Procedure CXC$RELDCB requires 99 words for executable code.
   Procedure CXC$RELDCB requires 42 words of local(AUTO) storage.

PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:20   

 Object Unit name= CXC$RELDCB                                 File name= CXC$SUBR.:E05TOU
 UTS= JUL 29 '97 12:23:20.56 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    99    143  CXC$RELDCB
    2  RoData even  none     3      3  CXC$RELDCB

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        3  CXC$RELDCB

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  CPSL_CFPT_CLOSE                       CPSL_CFPT_RELDCB
     B_VECTNIL
PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:21   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ROSID
PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:22   


       65        1        /*T***********************************************************/
       66        2        /*T*                                                         */
       67        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       68        4        /*T*                                                         */
       69        5        /*T***********************************************************/
       70        6        /**********************************************************************/
       71        7        /*F*   NAME:   CXC$RELDCB
       72        8               PURPOSE: To release a specified dcb(s)
       73        9               DESCRIPTION: CXC$RELDCB releases the specified dcb(s)
       74       10        */
       75       11        /*D*   NAME:   CXC$RELDCB
       76       12               CALL: CALL CXC$RELDCB(dcb#1,dcb#2,dcb#3)
       77       13               INTERFACE: M$RELDCB
       78       14               INPUT:  dcb#1,dcb#2,dcb#3 - number of dcbs to be released
       79       15               OUTPUT: none
       80       16               DESCRIPTION: The specified dcb(s) which are obtained by CPSL,
       81       17                       are closed if open and then released via
       82       18                       the M$RELDCB pmme.
       83       19        */
       84       20        /**********************************************************************/
       85       21        CXC$RELDCB: PROC(DCB#1,DCB#2,DCB#3);

     21  1 000000   000000 700200 xent  CXC$RELDCB   TSX0  ! X66_AUTO_3
         1 000001   000052 000003                    ZERO    42,3

       86       22                   %INCLUDE B_MACROS_C;
       87      133                   %INCLUDE CP_6;
       88      214                   %INCLUDE CP_6_SUBS;
       89      754                   %INCLUDE CX_MACROS_M;
       90      805                   %INCLUDE XU_MACRO_C;
       91     3911                   %INCLUDE CX_DATA_R;
       92     4845        /***** based structures *****/
       93     4846        %F$DCB;
       94     4903        /***** fpts *****/
       95     4904        %FPT_RELDCB(FPTN = FPT_RELDCB,STCLASS = AUTO);
       96     4918        %FPT_CLOSE (FPTN = FPT_CLOSE,STCLASS = AUTO);
PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:23   
       97     4960        /***** parameters *****/
       98     4961    1   DCL     DCB#1    UBIN  WORD;
       99     4962    1   DCL     DCB#2    UBIN  WORD;
      100     4963    1   DCL     DCB#3    UBIN  WORD;
      101     4964        /**/
      102     4965    1           FPT_RELDCB = CPSL_CFPT_RELDCB;

   4965  1 000002   000100 100400                    MLR     fill='000'O
         1 000003   000000 000020 xsym               ADSC9   CPSL_CFPT_RELDCB         cn=0,n=16
         1 000004   200006 000020                    ADSC9   FPT_RELDCB,,AUTO         cn=0,n=16

      103     4966    1           FPT_CLOSE = CPSL_CFPT_CLOSE ;

   4966  1 000005   000100 100400                    MLR     fill='000'O
         1 000006   000000 000170 xsym               ADSC9   CPSL_CFPT_CLOSE          cn=0,n=120
         1 000007   200012 000170                    ADSC9   FPT_CLOSE,,AUTO          cn=0,n=120

      104     4967    1           FPT_CLOSE.V_ = VECTOR(FPT_CLOSE.V) ;

   4967  1 000010   000000 235000 2                  LDA     0
         1 000011   200050 452500                    STP2    FPT_CLOSE+30,,AUTO
         1 000012   200050 236100                    LDQ     FPT_CLOSE+30,,AUTO
         1 000013   000044 036003                    ADLQ    36,DU
         1 000014   200012 757100                    STAQ    FPT_CLOSE,,AUTO

      105     4968    1           FPT_CLOSE.V.DISP# = %SAVE# ;

   4968  1 000015   000002 236007                    LDQ     2,DL
         1 000016   200044 552104                    STBQ    FPT_CLOSE+26,'04'O,AUTO

      106     4969    1           FPT_RELDCB.V_ = VECTOR(FPT_RELDCB.V);

   4969  1 000017   000001 235000 2                  LDA     1
         1 000020   200050 452500                    STP2    FPT_CLOSE+30,,AUTO
         1 000021   200050 236100                    LDQ     FPT_CLOSE+30,,AUTO
         1 000022   000010 036003                    ADLQ    8,DU
         1 000023   200006 757100                    STAQ    FPT_RELDCB,,AUTO
PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:24   

      107     4970        /*
      108     4971             ***** If the dcb is currently open, close it...
      109     4972        */
      110     4973    1           IF ADDR(DCB#1) ~= ADDR(NIL) THEN

   4973  1 000024   200003 236100                    LDQ     @DCB#1,,AUTO
         1 000025   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000026   000056 600000 1                  TZE     E_RELDCB1

      111     4974    1             IF DCBADDR(DCB#1) ~= DCBADDR(DCBNUM(NIL)) THEN

   4974  1 000027   000002 470400 2                  LDP0    2
         1 000030   000000 471500                    LDP1    0,,PR0
         1 000031   200003 473500                    LDP3    @DCB#1,,AUTO
         1 000032   300000 720100                    LXL0    0,,PR3
         1 000033   100000 236110                    LDQ     0,X0,PR1
         1 000034   100000 116100                    CMPQ    0,,PR1
         1 000035   000056 600000 1                  TZE     E_RELDCB1

      112     4975    2              DO;

      113     4976    2                 IF DCBADDR(DCB#1) -> F$DCB.FCD# = %NO#

   4976  1 000036   100000 474510                    LDP4    0,X0,PR1
         1 000037   400031 236100                    LDQ     25,,PR4
         1 000040   020000 316007                    CANQ    8192,DL
         1 000041   000047 600000 1                  TZE     E_CLOSE1

      114     4977    2                 THEN /* dcb is already closed */
      115     4978    2                    GOTO E_CLOSE1;
      116     4979    2                 FPT_CLOSE.V.DCB# = DCB#1; /*CLOSE DCB*/

   4979  1 000042   200044 740100                    STX0    FPT_CLOSE+26,,AUTO

      117     4980    2                 CALL M$CLOSE(FPT_CLOSE) ALTRET(E_CLOSE1);

PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:25   
   4980  1 000043   200012 630500                    EPPR0   FPT_CLOSE,,AUTO
         1 000044   450001 713400                    CLIMB   alt,close
         1 000045   406000 401760                    pmme    nvectors=13
         1 000046   000047 702000 1                  TSX2    E_CLOSE1

      118     4981    2   E_CLOSE1:
      119     4982    2                 FPT_RELDCB.V.DCB# = DCB#1; /*RELEASE DCB1*/

   4982  1 000047   200003 470500       E_CLOSE1     LDP0    @DCB#1,,AUTO
         1 000050   000000 720100                    LXL0    0,,PR0
         1 000051   200010 740100                    STX0    FPT_RELDCB+2,,AUTO

      120     4983    2                 CALL M$RELDCB(FPT_RELDCB) ALTRET(E_RELDCB1);

   4983  1 000052   200006 630500                    EPPR0   FPT_RELDCB,,AUTO
         1 000053   460003 713400                    CLIMB   alt,+24579
         1 000054   400000 401760                    pmme    nvectors=1
         1 000055   000056 702000 1                  TSX2    E_RELDCB1

      121     4984    2   E_RELDCB1:
      122     4985    2              END;

   4985  1 000056                       E_RELDCB1    null
      123     4986    1           IF ADDR(DCB#2) ~= ADDR(NIL) THEN

   4986  1 000056   200004 236100                    LDQ     @DCB#2,,AUTO
         1 000057   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000060   000110 600000 1                  TZE     E_RELDCB2

      124     4987    1             IF DCBADDR(DCB#2) ~= DCBADDR(DCBNUM(NIL)) THEN

   4987  1 000061   000002 470400 2                  LDP0    2
         1 000062   000000 471500                    LDP1    0,,PR0
         1 000063   200004 473500                    LDP3    @DCB#2,,AUTO
         1 000064   300000 720100                    LXL0    0,,PR3
         1 000065   100000 236110                    LDQ     0,X0,PR1
         1 000066   100000 116100                    CMPQ    0,,PR1
PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:26   
         1 000067   000110 600000 1                  TZE     E_RELDCB2

      125     4988    2              DO;

      126     4989    2                 IF DCBADDR(DCB#2) -> F$DCB.FCD# = %NO#

   4989  1 000070   100000 474510                    LDP4    0,X0,PR1
         1 000071   400031 236100                    LDQ     25,,PR4
         1 000072   020000 316007                    CANQ    8192,DL
         1 000073   000101 600000 1                  TZE     E_CLOSE2

      127     4990    2                 THEN /* dcb is already closed */
      128     4991    2                    GOTO E_CLOSE2;
      129     4992    2                 FPT_CLOSE.V.DCB# = DCB#2;

   4992  1 000074   200044 740100                    STX0    FPT_CLOSE+26,,AUTO

      130     4993    2                 CALL M$CLOSE(FPT_CLOSE) ALTRET(E_CLOSE2);

   4993  1 000075   200012 630500                    EPPR0   FPT_CLOSE,,AUTO
         1 000076   450001 713400                    CLIMB   alt,close
         1 000077   406000 401760                    pmme    nvectors=13
         1 000100   000101 702000 1                  TSX2    E_CLOSE2

      131     4994    2   E_CLOSE2:
      132     4995    2                 FPT_RELDCB.V.DCB# = DCB#2;

   4995  1 000101   200004 470500       E_CLOSE2     LDP0    @DCB#2,,AUTO
         1 000102   000000 720100                    LXL0    0,,PR0
         1 000103   200010 740100                    STX0    FPT_RELDCB+2,,AUTO

      133     4996    2                 CALL M$RELDCB(FPT_RELDCB) ALTRET(E_RELDCB2);

   4996  1 000104   200006 630500                    EPPR0   FPT_RELDCB,,AUTO
         1 000105   460003 713400                    CLIMB   alt,+24579
         1 000106   400000 401760                    pmme    nvectors=1
         1 000107   000110 702000 1                  TSX2    E_RELDCB2
PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:27   

      134     4997    2   E_RELDCB2:
      135     4998    2              END;

   4998  1 000110                       E_RELDCB2    null
      136     4999    1           IF ADDR(DCB#3) ~= ADDR(NIL) THEN

   4999  1 000110   200005 236100                    LDQ     @DCB#3,,AUTO
         1 000111   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000112   000142 600000 1                  TZE     E_RELDCB3

      137     5000    1             IF DCBADDR(DCB#3) ~= DCBADDR(DCBNUM(NIL)) THEN

   5000  1 000113   000002 470400 2                  LDP0    2
         1 000114   000000 471500                    LDP1    0,,PR0
         1 000115   200005 473500                    LDP3    @DCB#3,,AUTO
         1 000116   300000 720100                    LXL0    0,,PR3
         1 000117   100000 236110                    LDQ     0,X0,PR1
         1 000120   100000 116100                    CMPQ    0,,PR1
         1 000121   000142 600000 1                  TZE     E_RELDCB3

      138     5001    2              DO;

      139     5002    2                 IF DCBADDR(DCB#3) -> F$DCB.FCD# = %NO#

   5002  1 000122   100000 474510                    LDP4    0,X0,PR1
         1 000123   400031 236100                    LDQ     25,,PR4
         1 000124   020000 316007                    CANQ    8192,DL
         1 000125   000133 600000 1                  TZE     E_CLOSE3

      140     5003    2                 THEN /* dcb is already closed */
      141     5004    2                    GOTO E_CLOSE3;
      142     5005    2                 FPT_CLOSE.V.DCB# = DCB#3;

   5005  1 000126   200044 740100                    STX0    FPT_CLOSE+26,,AUTO

      143     5006    2                 CALL M$CLOSE(FPT_CLOSE) ALTRET(E_CLOSE3);
PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:28   

   5006  1 000127   200012 630500                    EPPR0   FPT_CLOSE,,AUTO
         1 000130   450001 713400                    CLIMB   alt,close
         1 000131   406000 401760                    pmme    nvectors=13
         1 000132   000133 702000 1                  TSX2    E_CLOSE3

      144     5007    2   E_CLOSE3:
      145     5008    2                 FPT_RELDCB.V.DCB# = DCB#3;

   5008  1 000133   200005 470500       E_CLOSE3     LDP0    @DCB#3,,AUTO
         1 000134   000000 720100                    LXL0    0,,PR0
         1 000135   200010 740100                    STX0    FPT_RELDCB+2,,AUTO

      146     5009    2                 CALL M$RELDCB(FPT_RELDCB) ALTRET(E_RELDCB3);

   5009  1 000136   200006 630500                    EPPR0   FPT_RELDCB,,AUTO
         1 000137   460003 713400                    CLIMB   alt,+24579
         1 000140   400000 401760                    pmme    nvectors=1
         1 000141   000142 702000 1                  TSX2    E_RELDCB3

      147     5010    2   E_RELDCB3:
      148     5011    2              END;

   5011  1 000142                       E_RELDCB3    null
      149     5012    1           RETURN;

   5012  1 000142   000000 702200 xent               TSX2  ! X66_ARET
      150     5013    1   END CXC$RELDCB;
      151     5014                   %EOD;

PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:29   
--  Include file information  --

   CX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CX_MACROS_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CXC$RELDCB.
PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:30   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @DCB#1                     4-0-0/w PTR         r     1 @DCB#2
     5-0-0/w PTR         r     1 @DCB#3                    *0-0-0/w UBIN        r     1 DCB#1
    *0-0-0/w UBIN        r     1 DCB#2                     *0-0-0/w UBIN        r     1 DCB#3
    12-0-0/d STRC(1080)  r     1 FPT_CLOSE                  6-0-0/d STRC(144)   r     1 FPT_RELDCB

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(1080)  r     1 CPSL_CFPT_CLOSE            0-0-0/d STRC(144)   r     1 CPSL_CFPT_RELDCB

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d ASTR(3528)  r     1 F$DCB


   Procedure CXC$RELDCB requires 99 words for executable code.
   Procedure CXC$RELDCB requires 42 words of local(AUTO) storage.
PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:31   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:32   
          MINI XREF LISTING

CPSL_CAMR_REC.ACSVEH_
      4100**DCL      4101--REDEF
CPSL_CAMR_REC.ALTKEYS_
      4106**DCL      4107--REDEF    4107--REDEF
CPSL_CAMR_REC.HDR_
      4105**DCL      4106--REDEF
CPSL_CAMR_REC.TAB_
      4104**DCL      4105--REDEF
CPSL_CAMR_REC.UHL_
      4098**DCL      4099--REDEF    4099--REDEF
CPSL_CAMR_REC.V.FSN#
      4138**DCL      4138--REDEF    4138--REDEF
CPSL_CAMR_REC.WSN_
      4104**DCL      4104--REDEF
CPSL_CFPT_CLOSE
      4165**DCL      4966>>ASSIGN
CPSL_CFPT_CLOSE.SN_
      4165**DCL      4165--REDEF
CPSL_CFPT_CLOSE.UTL_
      4166**DCL      4166--REDEF
CPSL_CFPT_CLOSE.V.EXPIRE#
      4180**DCL      4180--REDEF
CPSL_CFPT_CLOSE.V.TYPE#
      4178**DCL      4178--REDEF
CPSL_CFPT_CLOSE.V.XTNSIZE#
      4175**DCL      4175--REDEF    4177--REDEF
CPSL_CFPT_OPEN.ACSVEH_
      3991**DCL      3992--REDEF
CPSL_CFPT_OPEN.ALTKEYS_
      3997**DCL      3998--REDEF    3998--REDEF
CPSL_CFPT_OPEN.HDR_
      3996**DCL      3997--REDEF
PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:33   
CPSL_CFPT_OPEN.TAB_
      3995**DCL      3996--REDEF
CPSL_CFPT_OPEN.UHL_
      3989**DCL      3990--REDEF    3990--REDEF
CPSL_CFPT_OPEN.V.FSN#
      4029**DCL      4029--REDEF    4029--REDEF
CPSL_CFPT_OPEN.WSN_
      3995**DCL      3995--REDEF
CPSL_CFPT_READ.STATION_
      4204**DCL      4205--REDEF
CPSL_CFPT_READ.V.DVBYTE.REREAD#
      4216**DCL      4216--REDEF
CPSL_CFPT_READ.V.INDX#
      4214**DCL      4214--REDEF
CPSL_CFPT_RELDCB
      4299**DCL      4965>>ASSIGN
CPSL_CFPT_WRITE.STATION_
      4242**DCL      4242--REDEF
CPSL_CFPT_WRITE.V.DVBYTE.VFC#
      4249**DCL      4249--REDEF
CPSL_CVLP_TRMCTL.BREAKCOUNT
      4633**DCL      4634--REDEF
CPSL_CVLP_WINDOW.FWINDOW#
      4729**DCL      4729--REDEF    4730--REDEF
DCB#1
      4961**DCL        21--PROC     4973--IF       4974--IF       4976--IF       4979>>ASSIGN   4982>>ASSIGN
DCB#2
      4962**DCL        21--PROC     4986--IF       4987--IF       4989--IF       4992>>ASSIGN   4995>>ASSIGN
DCB#3
      4963**DCL        21--PROC     4999--IF       5000--IF       5002--IF       5005>>ASSIGN   5008>>ASSIGN
E_CLOSE1
      4982**LABEL    4978--GOTO     4980--CALLALT
E_CLOSE2
      4995**LABEL    4991--GOTO     4993--CALLALT
E_CLOSE3
      5008**LABEL    5004--GOTO     5006--CALLALT
PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:34   
E_RELDCB1
      4985**LABEL    4983--CALLALT
E_RELDCB2
      4998**LABEL    4996--CALLALT
E_RELDCB3
      5011**LABEL    5009--CALLALT
F$DCB.ACTPOS
      4879**DCL      4879--REDEF
F$DCB.ARS#
      4853**DCL      4853--REDEF
F$DCB.ATTR
      4872**DCL      4873--REDEF
F$DCB.BORROW
      4887**DCL      4887--REDEF    4887--REDEF    4887--REDEF
F$DCB.DCBNAME.L
      4901**DCL      4901--IMP-SIZ
F$DCB.EOMCHAR#
      4857**DCL      4857--REDEF
F$DCB.FCD#
      4866**DCL      4976>>IF       4989>>IF       5002>>IF
F$DCB.FLDID
      4882**DCL      4882--REDEF
F$DCB.FORM$
      4876**DCL      4876--REDEF
F$DCB.FSECT
      4892**DCL      4892--REDEF
F$DCB.FSN#
      4869**DCL      4869--REDEF    4869--REDEF    4870--REDEF
F$DCB.HEADER$
      4875**DCL      4875--REDEF
F$DCB.IXTNSIZE#
      4873**DCL      4873--REDEF
F$DCB.LASTSTA$
      4862**DCL      4862--REDEF
F$DCB.LVL
      4888**DCL      4888--REDEF
PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:35   
F$DCB.NAME#.C
      4863**DCL      4863--REDEF
F$DCB.NOEOF
      4885**DCL      4885--REDEF
F$DCB.NRECS#
      4874**DCL      4874--REDEF
F$DCB.NRECX
      4893**DCL      4893--REDEF
F$DCB.OHDR
      4885**DCL      4885--REDEF
F$DCB.ORG#
      4868**DCL      4868--REDEF
F$DCB.PRECNO
      4891**DCL      4891--REDEF
F$DCB.RCSZ
      4897**DCL      4897--REDEF
F$DCB.RES#
      4864**DCL      4864--REDEF
F$DCB.SETX
      4876**DCL      4876--REDEF
F$DCB.TAB$
      4876**DCL      4876--REDEF
F$DCB.TDA
      4890**DCL      4891--REDEF
F$DCB.WSN#
      4864**DCL      4864--REDEF
FPT_CLOSE
      4941**DCL      4966<<ASSIGN   4980<>CALL     4993<>CALL     5006<>CALL
FPT_CLOSE.SN_
      4941**DCL      4941--REDEF
FPT_CLOSE.UTL_
      4942**DCL      4942--REDEF
FPT_CLOSE.V
      4946**DCL      4967--ASSIGN
FPT_CLOSE.V.DCB#
      4947**DCL      4979<<ASSIGN   4992<<ASSIGN   5005<<ASSIGN
PL6.E3A0      #002=CXC$RELDCB File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:23 Page:36   
FPT_CLOSE.V.DISP#
      4950**DCL      4968<<ASSIGN
FPT_CLOSE.V.EXPIRE#
      4956**DCL      4956--REDEF
FPT_CLOSE.V.TYPE#
      4954**DCL      4954--REDEF
FPT_CLOSE.V.XTNSIZE#
      4951**DCL      4951--REDEF    4953--REDEF
FPT_CLOSE.V_
      4941**DCL      4967<<ASSIGN
FPT_RELDCB
      4915**DCL      4965<<ASSIGN   4983<>CALL     4996<>CALL     5009<>CALL
FPT_RELDCB.V
      4915**DCL      4969--ASSIGN
FPT_RELDCB.V.DCB#
      4915**DCL      4982<<ASSIGN   4995<<ASSIGN   5008<<ASSIGN
FPT_RELDCB.V_
      4915**DCL      4969<<ASSIGN
M$CLOSE
       142**DCL-ENT  4980--CALL     4993--CALL     5006--CALL
M$RELDCB
       148**DCL-ENT  4983--CALL     4996--CALL     5009--CALL

PL6.E3A0      #003=CXC$GETSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:24 Page:37   
      152        1        /*T***********************************************************/
      153        2        /*T*                                                         */
      154        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      155        4        /*T*                                                         */
      156        5        /*T***********************************************************/
      157        6        /**********************************************************************/
      158        7        /*F*   NAME:   CXC$GETSEG
      159        8               PURPOSE: Get a data segment
      160        9               DESCRIPTION: CXC$GETSEG gets a specified data segment
      161       10        */
      162       11        /*D*   NAME:   CXC$GETSEG
      163       12               CALL:   CALL CXC$GETSEG(seg$,segsize)
      164       13               INTERFACE:
      165       14               INPUT:  seg$ - segment to be obtained
      166       15                       segsize - number of words in data segment
      167       16               OUTPUT: segment obtained
      168       17               DESCRIPTION: The specified segment is acquired. If the segment
      169       18                       can't be acquired, B$JIT.USRERR is set and RETURN to the
      170       19                       calling routine. If the segment size is not specified, a default
      171       20                       size of 1024 words is assumed.
      172       21        */
      173       22        /***********************************************************************/
      174       23        CXC$GETSEG: PROC(SEG$,SEGSIZE) ;
      175       24                   %INCLUDE B_MACROS_C;
      176      135                   %INCLUDE CP_6;
      177      216                   %INCLUDE B$JIT;
      178      506                   %INCLUDE XU_MACRO_C;
      179     3612                   %INCLUDE CX_DATA_R;
      180     4546        /***** fpts *****/
      181     4547        %FPT_GDS(FPTN = FPT_GDS,STCLASS = AUTO);
      182     4563        %VLP_VECTOR(FPTN = GDS_RESULTS,STCLASS = AUTO);
      183     4578        /***** parameters *****/
      184     4579    1   DCL 1 SEG$ PTR;                         /*SEGMENT*/
      185     4580    1   DCL SEGSIZE SBIN WORD;                  /*SEGMENT SIZE*/
      186     4581        /***** Based structures *****/
      187     4582        %B$TCB (STCLASS="BASED(B$TCB$)");
      188     4585        %B$ALT;
PL6.E3A0      #003=CXC$GETSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:24 Page:38   
      189     4593        /**/
      190     4594    1           FPT_GDS = CPSL_CFPT_GDS;
      191     4595    1           FPT_GDS.V_ = VECTOR(FPT_GDS.V);
      192     4596    1           IF (ADDR(SEGSIZE) ~= ADDR(NIL)) THEN   /*WAS SIZE SPEC'D*/
      193     4597    1              FPT_GDS.V.SEGSIZE# = SEGSIZE;
      194     4598    1           ELSE
      195     4599    1              FPT_GDS.V.SEGSIZE# = 1024; /*SET DEFAULT*/
      196     4600    1           FPT_GDS.RESULTS_ = VECTOR(GDS_RESULTS);
      197     4601    1           GDS_RESULTS.PTR$ = SEG$;
      198     4602    1           B$JIT.USRERR = '0'B ;
      199     4603    1           CALL M$GDS(FPT_GDS) ALTRET(E_GDS);
      200     4604    1           RETURN;
      201     4605    1   E_GDS:
      202     4606    1           B$JIT.USRERR = B$TCB.ALT$ -> B$ALT.ERR;
      203     4607    1           RETURN;
      204     4608    1   END CXC$GETSEG;
      205     4609                   %EOD;

PL6.E3A0      #003=CXC$GETSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:24 Page:39   
--  Include file information  --

   CX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CXC$GETSEG.

   Procedure CXC$GETSEG requires 40 words for executable code.
   Procedure CXC$GETSEG requires 16 words of local(AUTO) storage.

PL6.E3A0      #003=CXC$GETSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:24 Page:40   

 Object Unit name= CXC$GETSEG                                 File name= CXC$SUBR.:E05TOU
 UTS= JUL 29 '97 12:24:13.68 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    40     50  CXC$GETSEG
    2  RoData even  none     1      1  CXC$GETSEG

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        2  CXC$GETSEG

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  CPSL_CFPT_GDS                    r    B$JIT$
r    B$TCB$                                B_VECTNIL
PL6.E3A0      #003=CXC$GETSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:24 Page:41   


      152        1        /*T***********************************************************/
      153        2        /*T*                                                         */
      154        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      155        4        /*T*                                                         */
      156        5        /*T***********************************************************/
      157        6        /**********************************************************************/
      158        7        /*F*   NAME:   CXC$GETSEG
      159        8               PURPOSE: Get a data segment
      160        9               DESCRIPTION: CXC$GETSEG gets a specified data segment
      161       10        */
      162       11        /*D*   NAME:   CXC$GETSEG
      163       12               CALL:   CALL CXC$GETSEG(seg$,segsize)
      164       13               INTERFACE:
      165       14               INPUT:  seg$ - segment to be obtained
      166       15                       segsize - number of words in data segment
      167       16               OUTPUT: segment obtained
      168       17               DESCRIPTION: The specified segment is acquired. If the segment
      169       18                       can't be acquired, B$JIT.USRERR is set and RETURN to the
      170       19                       calling routine. If the segment size is not specified, a default
      171       20                       size of 1024 words is assumed.
      172       21        */
      173       22        /***********************************************************************/
      174       23        CXC$GETSEG: PROC(SEG$,SEGSIZE) ;

     23  1 000000   000000 700200 xent  CXC$GETSEG   TSX0  ! X66_AUTO_2
         1 000001   000020 000002                    ZERO    16,2

      175       24                   %INCLUDE B_MACROS_C;
      176      135                   %INCLUDE CP_6;
      177      216                   %INCLUDE B$JIT;
      178      506                   %INCLUDE XU_MACRO_C;
      179     3612                   %INCLUDE CX_DATA_R;
      180     4546        /***** fpts *****/
      181     4547        %FPT_GDS(FPTN = FPT_GDS,STCLASS = AUTO);
      182     4563        %VLP_VECTOR(FPTN = GDS_RESULTS,STCLASS = AUTO);
      183     4578        /***** parameters *****/
PL6.E3A0      #003=CXC$GETSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:24 Page:42   
      184     4579    1   DCL 1 SEG$ PTR;                         /*SEGMENT*/
      185     4580    1   DCL SEGSIZE SBIN WORD;                  /*SEGMENT SIZE*/
      186     4581        /***** Based structures *****/
      187     4582        %B$TCB (STCLASS="BASED(B$TCB$)");
      188     4585        %B$ALT;
      189     4593        /**/
      190     4594    1           FPT_GDS = CPSL_CFPT_GDS;

   4594  1 000002   000100 100400                    MLR     fill='000'O
         1 000003   000000 000030 xsym               ADSC9   CPSL_CFPT_GDS            cn=0,n=24
         1 000004   200006 000030                    ADSC9   FPT_GDS,,AUTO            cn=0,n=24

      191     4595    1           FPT_GDS.V_ = VECTOR(FPT_GDS.V);

   4595  1 000005   000000 235000 2                  LDA     0
         1 000006   200016 452500                    STP2    GDS_RESULTS+2,,AUTO
         1 000007   200016 236100                    LDQ     GDS_RESULTS+2,,AUTO
         1 000010   000012 036003                    ADLQ    10,DU
         1 000011   200006 757100                    STAQ    FPT_GDS,,AUTO

      192     4596    1           IF (ADDR(SEGSIZE) ~= ADDR(NIL)) THEN   /*WAS SIZE SPEC'D*/

   4596  1 000012   200004 236100                    LDQ     @SEGSIZE,,AUTO
         1 000013   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000014   000021 600000 1                  TZE     s:4599

      193     4597    1              FPT_GDS.V.SEGSIZE# = SEGSIZE;

   4597  1 000015   200004 470500                    LDP0    @SEGSIZE,,AUTO
         1 000016   000000 720100                    LXL0    0,,PR0
         1 000017   200012 440100                    SXL0    FPT_GDS+4,,AUTO
         1 000020   000023 710000 1                  TRA     s:4600

      194     4598    1           ELSE
      195     4599    1              FPT_GDS.V.SEGSIZE# = 1024; /*SET DEFAULT*/

   4599  1 000021   002000 220003                    LDX0    1024,DU
PL6.E3A0      #003=CXC$GETSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:24 Page:43   
         1 000022   200012 440100                    SXL0    FPT_GDS+4,,AUTO

      196     4600    1           FPT_GDS.RESULTS_ = VECTOR(GDS_RESULTS);

   4600  1 000023   000000 235000 2                  LDA     0
         1 000024   200016 452500                    STP2    GDS_RESULTS+2,,AUTO
         1 000025   200016 236100                    LDQ     GDS_RESULTS+2,,AUTO
         1 000026   000014 036003                    ADLQ    12,DU
         1 000027   200010 757100                    STAQ    FPT_GDS+2,,AUTO

      197     4601    1           GDS_RESULTS.PTR$ = SEG$;

   4601  1 000030   200003 470500                    LDP0    @SEG$,,AUTO
         1 000031   000000 236100                    LDQ     0,,PR0
         1 000032   200015 756100                    STQ     GDS_RESULTS+1,,AUTO

      198     4602    1           B$JIT.USRERR = '0'B ;

   4602  1 000033   000000 471400 xsym               LDP1    B$JIT$
         1 000034   100144 450100                    STZ     100,,PR1

      199     4603    1           CALL M$GDS(FPT_GDS) ALTRET(E_GDS);

   4603  1 000035   200006 630500                    EPPR0   FPT_GDS,,AUTO
         1 000036   430001 713400                    CLIMB   alt,gds
         1 000037   400400 401760                    pmme    nvectors=2
         1 000040   000042 702000 1                  TSX2    E_GDS

      200     4604    1           RETURN;

   4604  1 000041   000000 702200 xent               TSX2  ! X66_ARET

      201     4605    1   E_GDS:
      202     4606    1           B$JIT.USRERR = B$TCB.ALT$ -> B$ALT.ERR;

   4606  1 000042   000000 470400 xsym  E_GDS        LDP0    B$TCB$
         1 000043   000000 471500                    LDP1    0,,PR0
PL6.E3A0      #003=CXC$GETSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:24 Page:44   
         1 000044   100102 236100                    LDQ     66,,PR1
         1 000045   000000 473400 xsym               LDP3    B$JIT$
         1 000046   300144 756100                    STQ     100,,PR3

      203     4607    1           RETURN;

   4607  1 000047   000000 702200 xent               TSX2  ! X66_ARET
      204     4608    1   END CXC$GETSEG;
      205     4609                   %EOD;

PL6.E3A0      #003=CXC$GETSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:24 Page:45   
--  Include file information  --

   CX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CXC$GETSEG.
PL6.E3A0      #003=CXC$GETSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:24 Page:46   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @SEG$                      4-0-0/w PTR         r     1 @SEGSIZE
     6-0-0/d STRC(216)   r     1 FPT_GDS                   14-0-0/d STRC(72)    r     1 GDS_RESULTS
    *0-0-0/w PTR         r     1 SEG$                      *0-0-0/w SBIN        r     1 SEGSIZE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/d STRC(216)   r     1 CPSL_CFPT_GDS

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/w STRC(144)   r     1 B$TCB


   Procedure CXC$GETSEG requires 40 words for executable code.
   Procedure CXC$GETSEG requires 16 words of local(AUTO) storage.
PL6.E3A0      #003=CXC$GETSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:24 Page:47   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=CXC$GETSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:24 Page:48   
          MINI XREF LISTING

B$ALT.CODE
      4587**DCL      4587--REDEF    4588--REDEF    4588--REDEF
B$ALT.ERR
      4588**DCL      4606>>ASSIGN
B$ALT.ERR.ERR#
      4589**DCL      4589--REDEF
B$ALT.EVID
      4588**DCL      4588--REDEF    4588--REDEF
B$JIT.CPFLAGS1.SLEAZE
       324**DCL       324--REDEF
B$JIT.ERR.MID
       231**DCL       231--REDEF
B$JIT.JRESPEAK
       392**DCL       393--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
       501**DCL       501--REDEF     502--REDEF
B$JIT.PNR
       405**DCL       405--REDEF
B$JIT.TSLINE
       499**DCL       500--REDEF
B$JIT.USRERR
       366**DCL      4602<<ASSIGN   4606<<ASSIGN
B$JIT$
      4513**DCL       225--IMP-PTR  4602>>ASSIGN   4606>>ASSIGN
B$TCB.ALT$
      4583**DCL      4606>>ASSIGN
B$TCB$
      4514**DCL      4583--IMP-PTR  4606>>ASSIGN
CPSL_CAMR_REC.ACSVEH_
      3801**DCL      3802--REDEF
CPSL_CAMR_REC.ALTKEYS_
      3807**DCL      3808--REDEF    3808--REDEF
PL6.E3A0      #003=CXC$GETSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:24 Page:49   
CPSL_CAMR_REC.HDR_
      3806**DCL      3807--REDEF
CPSL_CAMR_REC.TAB_
      3805**DCL      3806--REDEF
CPSL_CAMR_REC.UHL_
      3799**DCL      3800--REDEF    3800--REDEF
CPSL_CAMR_REC.V.FSN#
      3839**DCL      3839--REDEF    3839--REDEF
CPSL_CAMR_REC.WSN_
      3805**DCL      3805--REDEF
CPSL_CFPT_CLOSE.SN_
      3866**DCL      3866--REDEF
CPSL_CFPT_CLOSE.UTL_
      3867**DCL      3867--REDEF
CPSL_CFPT_CLOSE.V.EXPIRE#
      3881**DCL      3881--REDEF
CPSL_CFPT_CLOSE.V.TYPE#
      3879**DCL      3879--REDEF
CPSL_CFPT_CLOSE.V.XTNSIZE#
      3876**DCL      3876--REDEF    3878--REDEF
CPSL_CFPT_GDS
      4014**DCL      4594>>ASSIGN
CPSL_CFPT_OPEN.ACSVEH_
      3692**DCL      3693--REDEF
CPSL_CFPT_OPEN.ALTKEYS_
      3698**DCL      3699--REDEF    3699--REDEF
CPSL_CFPT_OPEN.HDR_
      3697**DCL      3698--REDEF
CPSL_CFPT_OPEN.TAB_
      3696**DCL      3697--REDEF
CPSL_CFPT_OPEN.UHL_
      3690**DCL      3691--REDEF    3691--REDEF
CPSL_CFPT_OPEN.V.FSN#
      3730**DCL      3730--REDEF    3730--REDEF
CPSL_CFPT_OPEN.WSN_
      3696**DCL      3696--REDEF
PL6.E3A0      #003=CXC$GETSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:24 Page:50   
CPSL_CFPT_READ.STATION_
      3905**DCL      3906--REDEF
CPSL_CFPT_READ.V.DVBYTE.REREAD#
      3917**DCL      3917--REDEF
CPSL_CFPT_READ.V.INDX#
      3915**DCL      3915--REDEF
CPSL_CFPT_WRITE.STATION_
      3943**DCL      3943--REDEF
CPSL_CFPT_WRITE.V.DVBYTE.VFC#
      3950**DCL      3950--REDEF
CPSL_CVLP_TRMCTL.BREAKCOUNT
      4334**DCL      4335--REDEF
CPSL_CVLP_WINDOW.FWINDOW#
      4430**DCL      4430--REDEF    4431--REDEF
E_GDS
      4606**LABEL    4603--CALLALT
FPT_GDS
      4558**DCL      4594<<ASSIGN   4603<>CALL
FPT_GDS.RESULTS_
      4558**DCL      4600<<ASSIGN
FPT_GDS.V
      4558**DCL      4595--ASSIGN
FPT_GDS.V.SEGSIZE#
      4561**DCL      4597<<ASSIGN   4599<<ASSIGN
FPT_GDS.V_
      4558**DCL      4595<<ASSIGN
GDS_RESULTS
      4574**DCL      4600--ASSIGN
GDS_RESULTS.PTR$
      4576**DCL      4601<<ASSIGN
GDS_RESULTS.W2
      4575**DCL      4576--REDEF
M$GDS
       179**DCL-ENT  4603--CALL
SEG$
      4579**DCL        23--PROC     4601>>ASSIGN
PL6.E3A0      #003=CXC$GETSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:24 Page:51   
SEGSIZE
      4580**DCL        23--PROC     4596--IF       4597>>ASSIGN

PL6.E3A0      #004=CXC$RELSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:25 Page:52   
      206        1        /*T***********************************************************/
      207        2        /*T*                                                         */
      208        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      209        4        /*T*                                                         */
      210        5        /*T***********************************************************/
      211        6        /**********************************************************************/
      212        7        /*F*   NAME:   CXC$RELSEG
      213        8               PURPOSE: Release a data segment
      214        9               DESCRIPTION: CXC$RELSEG releases a specified data segment
      215       10        */
      216       11        /*D*   NAME:   CXC$RELSEG
      217       12               CALL:   CALL CXC$RELSEG(seg$)
      218       13               INTERFACE:
      219       14               INPUT:  seg$ - segment to be released
      220       15               OUTPUT: segment released
      221       16               DESCRIPTION: The specified data segment is released.
      222       17        */
      223       18        /**********************************************************************/
      224       19        CXC$RELSEG: PROC(SEG$);
      225       20                   %INCLUDE CP_6;
      226      101                   %INCLUDE XU_MACRO_C;
      227     3207                   %INCLUDE CX_DATA_R;
      228     4141        /***** fpts *****/
      229     4142        %FPT_FDS(FPTN = FPT_FDS,STCLASS = AUTO);
      230     4157        %VLP_VECTOR (FPTN = FDS_RESULTS,STCLASS = AUTO);
      231     4172        /***** parameters *****/
      232     4173    1   DCL 1 SEG$ PTR;                         /*SEGMENT POINTER*/
      233     4174        /**/
      234     4175    1           FPT_FDS = CPSL_CFPT_FDS;
      235     4176    1           FPT_FDS.V_ = VECTOR(FPT_FDS.V);
      236     4177    1           FPT_FDS.V.SEGSIZE# = 1024;
      237     4178    1           FPT_FDS.RESULTS_ = VECTOR(FDS_RESULTS);
      238     4179    1           FDS_RESULTS.PTR$ = SEG$;
      239     4180    1           CALL M$FDS (FPT_FDS);
      240     4181        /*
      241     4182             ***** When M$FDS is called it returns the size
      242     4183                   of the remaining data segment (if any) in
PL6.E3A0      #004=CXC$RELSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:25 Page:53   
      243     4184                   the results field. If any words remain then
      244     4185                   call M$FDS once again to release the remainder ...
      245     4186        */
      246     4187    1           IF FDS_RESULTS.W1.VSIZE# ~= 0
      247     4188    1              THEN   /* Still something around */
      248     4189    2                 DO;
      249     4190    2                    FPT_FDS.V.SEGSIZE# = (FDS_RESULTS.W1.VSIZE#+1)/4;
      250     4191    2                    CALL M$FDS (FPT_FDS);
      251     4192    2                 END;
      252     4193    1           RETURN;
      253     4194    1   END CXC$RELSEG;
      254     4195        %EOD ;

PL6.E3A0      #004=CXC$RELSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:25 Page:54   
--  Include file information  --

   CX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CXC$RELSEG.

   Procedure CXC$RELSEG requires 36 words for executable code.
   Procedure CXC$RELSEG requires 14 words of local(AUTO) storage.

PL6.E3A0      #004=CXC$RELSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:25 Page:55   

 Object Unit name= CXC$RELSEG                                 File name= CXC$SUBR.:E05TOU
 UTS= JUL 29 '97 12:25:05.08 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    36     44  CXC$RELSEG
    2  RoData even  none     1      1  CXC$RELSEG

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        1  CXC$RELSEG

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  CPSL_CFPT_FDS                         B_VECTNIL
PL6.E3A0      #004=CXC$RELSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:25 Page:56   


      206        1        /*T***********************************************************/
      207        2        /*T*                                                         */
      208        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      209        4        /*T*                                                         */
      210        5        /*T***********************************************************/
      211        6        /**********************************************************************/
      212        7        /*F*   NAME:   CXC$RELSEG
      213        8               PURPOSE: Release a data segment
      214        9               DESCRIPTION: CXC$RELSEG releases a specified data segment
      215       10        */
      216       11        /*D*   NAME:   CXC$RELSEG
      217       12               CALL:   CALL CXC$RELSEG(seg$)
      218       13               INTERFACE:
      219       14               INPUT:  seg$ - segment to be released
      220       15               OUTPUT: segment released
      221       16               DESCRIPTION: The specified data segment is released.
      222       17        */
      223       18        /**********************************************************************/
      224       19        CXC$RELSEG: PROC(SEG$);

     19  1 000000   000000 700200 xent  CXC$RELSEG   TSX0  ! X66_AUTO_1
         1 000001   000016 000001                    ZERO    14,1

      225       20                   %INCLUDE CP_6;
      226      101                   %INCLUDE XU_MACRO_C;
      227     3207                   %INCLUDE CX_DATA_R;
      228     4141        /***** fpts *****/
      229     4142        %FPT_FDS(FPTN = FPT_FDS,STCLASS = AUTO);
      230     4157        %VLP_VECTOR (FPTN = FDS_RESULTS,STCLASS = AUTO);
      231     4172        /***** parameters *****/
      232     4173    1   DCL 1 SEG$ PTR;                         /*SEGMENT POINTER*/
      233     4174        /**/
      234     4175    1           FPT_FDS = CPSL_CFPT_FDS;

   4175  1 000002   000100 100400                    MLR     fill='000'O
         1 000003   000000 000030 xsym               ADSC9   CPSL_CFPT_FDS            cn=0,n=24
PL6.E3A0      #004=CXC$RELSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:25 Page:57   
         1 000004   200004 000030                    ADSC9   FPT_FDS,,AUTO            cn=0,n=24

      235     4176    1           FPT_FDS.V_ = VECTOR(FPT_FDS.V);

   4176  1 000005   000000 235000 2                  LDA     0
         1 000006   200014 452500                    STP2    FDS_RESULTS+2,,AUTO
         1 000007   200014 236100                    LDQ     FDS_RESULTS+2,,AUTO
         1 000010   000010 036003                    ADLQ    8,DU
         1 000011   200004 757100                    STAQ    FPT_FDS,,AUTO

      236     4177    1           FPT_FDS.V.SEGSIZE# = 1024;

   4177  1 000012   002000 220003                    LDX0    1024,DU
         1 000013   200010 440100                    SXL0    FPT_FDS+4,,AUTO

      237     4178    1           FPT_FDS.RESULTS_ = VECTOR(FDS_RESULTS);

   4178  1 000014   000000 235000 2                  LDA     0
         1 000015   200014 452500                    STP2    FDS_RESULTS+2,,AUTO
         1 000016   200014 236100                    LDQ     FDS_RESULTS+2,,AUTO
         1 000017   000012 036003                    ADLQ    10,DU
         1 000020   200006 757100                    STAQ    FPT_FDS+2,,AUTO

      238     4179    1           FDS_RESULTS.PTR$ = SEG$;

   4179  1 000021   200003 470500                    LDP0    @SEG$,,AUTO
         1 000022   000000 236100                    LDQ     0,,PR0
         1 000023   200013 756100                    STQ     FDS_RESULTS+1,,AUTO

      239     4180    1           CALL M$FDS (FPT_FDS);

   4180  1 000024   200004 630500                    EPPR0   FPT_FDS,,AUTO
         1 000025   030002 713400                    CLIMB   fds
         1 000026   400400 401760                    pmme    nvectors=2

      240     4181        /*
      241     4182             ***** When M$FDS is called it returns the size
PL6.E3A0      #004=CXC$RELSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:25 Page:58   
      242     4183                   of the remaining data segment (if any) in
      243     4184                   the results field. If any words remain then
      244     4185                   call M$FDS once again to release the remainder ...
      245     4186        */
      246     4187    1           IF FDS_RESULTS.W1.VSIZE# ~= 0

   4187  1 000027   200012 236100                    LDQ     FDS_RESULTS,,AUTO
         1 000030   000034 316000 xsym               CANQ    B_VECTNIL+28
         1 000031   000043 600000 1                  TZE     s:4193

      247     4188    1              THEN   /* Still something around */
      248     4189    2                 DO;

      249     4190    2                    FPT_FDS.V.SEGSIZE# = (FDS_RESULTS.W1.VSIZE#+1)/4;

   4190  1 000032   200012 236100                    LDQ     FDS_RESULTS,,AUTO
         1 000033   000020 772000                    QRL     16
         1 000034   000001 036007                    ADLQ    1,DL
         1 000035   000002 772000                    QRL     2
         1 000036   000000 620006                    EAX0    0,QL
         1 000037   200010 440100                    SXL0    FPT_FDS+4,,AUTO

      250     4191    2                    CALL M$FDS (FPT_FDS);

   4191  1 000040   200004 630500                    EPPR0   FPT_FDS,,AUTO
         1 000041   030002 713400                    CLIMB   fds
         1 000042   400400 401760                    pmme    nvectors=2

      251     4192    2                 END;

      252     4193    1           RETURN;

   4193  1 000043   000000 702200 xent               TSX2  ! X66_ARET
      253     4194    1   END CXC$RELSEG;
      254     4195        %EOD ;

PL6.E3A0      #004=CXC$RELSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:25 Page:59   
--  Include file information  --

   CX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CXC$RELSEG.
PL6.E3A0      #004=CXC$RELSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:25 Page:60   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @SEG$                     12-0-0/d STRC(72)    r     1 FDS_RESULTS
     4-0-0/d STRC(216)   r     1 FPT_FDS                   *0-0-0/w PTR         r     1 SEG$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 CPSL_CFPT_FDS


   Procedure CXC$RELSEG requires 36 words for executable code.
   Procedure CXC$RELSEG requires 14 words of local(AUTO) storage.
PL6.E3A0      #004=CXC$RELSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:25 Page:61   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=CXC$RELSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:25 Page:62   
          MINI XREF LISTING

CPSL_CAMR_REC.ACSVEH_
      3396**DCL      3397--REDEF
CPSL_CAMR_REC.ALTKEYS_
      3402**DCL      3403--REDEF    3403--REDEF
CPSL_CAMR_REC.HDR_
      3401**DCL      3402--REDEF
CPSL_CAMR_REC.TAB_
      3400**DCL      3401--REDEF
CPSL_CAMR_REC.UHL_
      3394**DCL      3395--REDEF    3395--REDEF
CPSL_CAMR_REC.V.FSN#
      3434**DCL      3434--REDEF    3434--REDEF
CPSL_CAMR_REC.WSN_
      3400**DCL      3400--REDEF
CPSL_CFPT_CLOSE.SN_
      3461**DCL      3461--REDEF
CPSL_CFPT_CLOSE.UTL_
      3462**DCL      3462--REDEF
CPSL_CFPT_CLOSE.V.EXPIRE#
      3476**DCL      3476--REDEF
CPSL_CFPT_CLOSE.V.TYPE#
      3474**DCL      3474--REDEF
CPSL_CFPT_CLOSE.V.XTNSIZE#
      3471**DCL      3471--REDEF    3473--REDEF
CPSL_CFPT_FDS
      3625**DCL      4175>>ASSIGN
CPSL_CFPT_OPEN.ACSVEH_
      3287**DCL      3288--REDEF
CPSL_CFPT_OPEN.ALTKEYS_
      3293**DCL      3294--REDEF    3294--REDEF
CPSL_CFPT_OPEN.HDR_
      3292**DCL      3293--REDEF
PL6.E3A0      #004=CXC$RELSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:25 Page:63   
CPSL_CFPT_OPEN.TAB_
      3291**DCL      3292--REDEF
CPSL_CFPT_OPEN.UHL_
      3285**DCL      3286--REDEF    3286--REDEF
CPSL_CFPT_OPEN.V.FSN#
      3325**DCL      3325--REDEF    3325--REDEF
CPSL_CFPT_OPEN.WSN_
      3291**DCL      3291--REDEF
CPSL_CFPT_READ.STATION_
      3500**DCL      3501--REDEF
CPSL_CFPT_READ.V.DVBYTE.REREAD#
      3512**DCL      3512--REDEF
CPSL_CFPT_READ.V.INDX#
      3510**DCL      3510--REDEF
CPSL_CFPT_WRITE.STATION_
      3538**DCL      3538--REDEF
CPSL_CFPT_WRITE.V.DVBYTE.VFC#
      3545**DCL      3545--REDEF
CPSL_CVLP_TRMCTL.BREAKCOUNT
      3929**DCL      3930--REDEF
CPSL_CVLP_WINDOW.FWINDOW#
      4025**DCL      4025--REDEF    4026--REDEF
FDS_RESULTS
      4168**DCL      4178--ASSIGN
FDS_RESULTS.PTR$
      4170**DCL      4179<<ASSIGN
FDS_RESULTS.W1.VSIZE#
      4168**DCL      4187>>IF       4190>>ASSIGN
FDS_RESULTS.W2
      4169**DCL      4170--REDEF
FPT_FDS
      4153**DCL      4175<<ASSIGN   4180<>CALL     4191<>CALL
FPT_FDS.RESULTS_
      4153**DCL      4178<<ASSIGN
FPT_FDS.V
      4153**DCL      4176--ASSIGN
PL6.E3A0      #004=CXC$RELSEG File=CXC$SUBR.:E05TSI                              TUE 07/29/97 12:25 Page:64   
FPT_FDS.V.SEGSIZE#
      4155**DCL      4177<<ASSIGN   4190<<ASSIGN
FPT_FDS.V_
      4153**DCL      4176<<ASSIGN
M$FDS
        64**DCL-ENT  4180--CALL     4191--CALL
SEG$
      4173**DCL        19--PROC     4179>>ASSIGN

PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:65   
      255        1        /*T***********************************************************/
      256        2        /*T*                                                         */
      257        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      258        4        /*T*                                                         */
      259        5        /*T***********************************************************/
      260        6        %EJECT ;
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:66   
      261        7        /*X*  DMC,DFC   */
      262        8        /*F*    NAME:    CXC$SCREECH
      263        9                PURPOSE:    To effect orderly cleanup when an unexpected CPSL condition
      264       10                         occurs.
      265       11        */
      266       12        CXC$SCREECH: PROC(SCREECH,MID);
      267       13        /**/
      268       14                %INCLUDE CP_6;
      269       95                %INCLUDE CP_6_SUBS;
      270      635                %INCLUDE CX_SUBS_C;
      271      648                %INCLUDE CX_SCODE_C;
      272      656                %INCLUDE B$JIT;
      273      946                %INCLUDE XU_MACRO_C;
      274     4052                %INCLUDE CX_MACROS_M;
      275     4103                %INCLUDE NK_VFC_C;
      276     4177                %INCLUDE CX_DATA_R;
      277     5111        /**/
      278     5112    1   DCL     SCREECH  UBIN  WORD;
      279     5113    1   DCL 1 MID UNAL,
      280     5114    1         2 * BIT(3) UNAL,
      281     5115    1         2 MID BIT(6) UNAL ;
      282     5116    1   DCL     M$DO   DCB;
      283     5117    1   DCL     ERR_BUF CHAR(120);
      284     5118        /**/
      285     5119        /**/
      286     5120        %B$ALT;
      287     5128        %B$TCB (STCLASS="BASED(B$TCB$)");
      288     5131        %VLP_ERRCODE (FPTN=ERR_CODE, STCLASS=AUTO);
      289     5176        %FPT_ERRMSG (FPTN=FPT_ERRMSG,STCLASS=AUTO);
      290     5203        %VLR_ERRMSG (FPTN=VLR_ERRMSG,STCLASS=AUTO);
      291     5225        %FPT_SCREECH (FPTN=FPT_SCREECH,STCLASS=AUTO);
      292     5239        %VLP_SCODE (FPTN=SC_CXABORT,STCLASS=CONSTANT SYMDEF,FCG=CP,MID=C,MON='0'B,
      293     5240               CODE=%S$CXABORT,ROSEG='1'B,CPSEG='1'B,CUSR='1'B,
      294     5241               CFUS='1'B,ENQ='1'B,LRM='1'B);
      295     5302        %FPT_CPEXIT (FPTN=FPT_CPEXIT,STCLASS=AUTO);
      296     5328        %EJECT;
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:67   
      297     5329    1     IF B$TCB.ALT$ ~= ADDR(NIL)
      298     5330    1        THEN   /* Current error available */
      299     5331    1           B$JIT.USRERR = B$TCB.ALT$ -> B$ALT.ERR;
      300     5332        /*
      301     5333             ***** Write the screech message...
      302     5334        */
      303     5335    1     ERR_CODE.FCG = '0330'O ;  /* FCG='CX' */
      304     5336    1     ERR_CODE.MID = MID.MID ;
      305     5337    1     ERR_CODE.ERR# = SCREECH;
      306     5338    1     ERR_CODE.MON = '0'B;
      307     5339    1     ERR_CODE.SEV = 7;
      308     5340        /*
      309     5341             ***** Init FPT_ERRMSG
      310     5342        */
      311     5343    1     FPT_ERRMSG = CPSL_CFPT_ERRMSG;
      312     5344    1     FPT_ERRMSG.V_ = VECTOR(FPT_ERRMSG.V);
      313     5345    1     FPT_ERRMSG.BUF_ = VECTOR(ERR_BUF);
      314     5346    1     FPT_ERRMSG.CODE_ = VECTOR(ERR_CODE);
      315     5347    1     FPT_ERRMSG.RESULTS_ = VECTOR(VLR_ERRMSG);
      316     5348    1     FPT_ERRMSG.V.INCLCODE# = %YES#;
      317     5349    1     FPT_ERRMSG.V.VFC# = %VFC_TRANSITION1;
      318     5350    1     IF B$JIT.MODE = %M_BATCH#
      319     5351
      320     5352    1        THEN
      321     5353    1           FPT_ERRMSG.V.OUTDCB1# = DCBNUM(M$DO);
      322     5354
      323     5355    1        ELSE
      324     5356    1           FPT_ERRMSG.V.OUTDCB1# = CPSL_M$UC_NUM;
      325     5357    1     CALL M$ERRMSG (FPT_ERRMSG) ALTRET(IGNORE1);
      326     5358    1   IGNORE1: ; /* ignore the altret */
      327     5359        /*
      328     5360             ***** Write B$JIT.USRERR
      329     5361        */
      330     5362    1     IF B$JIT.USRERR ~= '0'B
      331     5363
      332     5364    1        THEN
      333     5365    2           DO;
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:68   
      334     5366    2              FPT_ERRMSG.CODE_ = VECTOR(B$JIT.USRERR);
      335     5367    2              CALL M$ERRMSG (FPT_ERRMSG) ALTRET(IGNORE2);
      336     5368    2           END;
      337     5369    1   IGNORE2: ; /* ignore the altret */
      338     5370        /*
      339     5371             ***** If the user has not screeched before, screech then log
      340     5372                   him off. BYE is put in CCBUFF and the CPSL returns to the
      341     5373                   command processor.  This way 'OFF' is output to the oc
      342     5374                   and an accounting record generated.
      343     5375                   If user has screeched before, just log  him off with
      344     5376                   the assumption that 'OFF' has been printed to the oc and
      345     5377                   an accounting record has been generated.
      346     5378        */
      347     5379    1     IF B$JIT.CPFLAGS1 & %CP_SCREECH#
      348     5380
      349     5381    1        THEN
      350     5382    1           GOTO E_BYE;
      351     5383
      352     5384    1        ELSE
      353     5385    2           DO; /* run down the user */
      354     5386    2              FPT_SCREECH = CPSL_CFPT_SCREECH;
      355     5387    2              FPT_SCREECH.SCODE_ = VECTOR(SC_CXABORT);
      356     5388    2              FPT_SCREECH.JERR_ = VECTOR(ERR_CODE);
      357     5389    2              CALL M$SCREECH (FPT_SCREECH) ALTRET(E_M$SCREECH);
      358     5390        /*S*    SCREECH_CODE: CXC-S$CXABORT
      359     5391                TYPE: SNAP
      360     5392                MESSAGE: Command Processor abort
      361     5393                REMARKS: The reason for this snap is contained in JIT.ERR
      362     5394        */
      363     5395    2   E_M$SCREECH: ;
      364     5396    2              B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1 | %CP_SCREECH#;
      365     5397    2              B$JIT.CCBUF = 'BYE' ;
      366     5398    2              B$JIT.CCARS = 3 ;
      367     5399    2              B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1 | %CP_BUFFULL# ;
      368     5400    2              RETURN ;
      369     5401    2           END;
      370     5402    1   E_BYE:
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:69   
      371     5403    1     FPT_CPEXIT = CPSL_CFPT_CPEXIT;
      372     5404    1     FPT_CPEXIT.V_ = VECTOR(FPT_CPEXIT.V);
      373     5405    1     CALL M$CPEXIT (FPT_CPEXIT) ALTRET(E_CPEXIT);
      374     5406    1   E_CPEXIT: ;
      375     5407        /*
      376     5408             ***** Use M$CPEXIT to log the user off if CXA$BYE
      377     5409                   comes back to haunt us. May be necessary to
      378     5410                   do a M$SCREECH to recovery if this pmme fails...
      379     5411        */
      380     5412    1   END     CXC$SCREECH;
      381     5413                   %EOD;

PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:70   
--  Include file information  --

   CX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   NK_VFC_C.:E05TOU  is referenced.
   CX_MACROS_M.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CX_SCODE_C.:E05TOU  is referenced.
   CX_SUBS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CXC$SCREECH.

   Procedure CXC$SCREECH requires 122 words for executable code.
   Procedure CXC$SCREECH requires 88 words of local(AUTO) storage.

PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:71   

 Object Unit name= CXC$SCREECH                                File name= CXC$SUBR.:E05TOU
 UTS= JUL 29 '97 12:25:48.20 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$DO
    2  RoData even  UTS      4      4  CXC$SCREECH
    3   Proc  even  none   122    172  CXC$SCREECH
    4  RoData even  none     6      6  CXC$SCREECH

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std        2  CXC$SCREECH

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    2      0  SC_CXABORT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:72   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  CPSL_CFPT_ERRMSG                      CPSL_CFPT_CPEXIT
     CPSL_CFPT_SCREECH                r    B$JIT$                           r    B$TCB$
     CPSL_M$UC_NUM                         M$DO                                  B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:73   


      255        1        /*T***********************************************************/
      256        2        /*T*                                                         */
      257        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      258        4        /*T*                                                         */
      259        5        /*T***********************************************************/
      260        6        %EJECT ;
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:74   
      261        7        /*X*  DMC,DFC   */
      262        8        /*F*    NAME:    CXC$SCREECH
      263        9                PURPOSE:    To effect orderly cleanup when an unexpected CPSL condition
      264       10                         occurs.
      265       11        */
      266       12        CXC$SCREECH: PROC(SCREECH,MID);

     12  3 000000   000000 700200 xent  CXC$SCREECH  TSX0  ! X66_AUTO_2
         3 000001   000130 000002                    ZERO    88,2

      267       13        /**/
      268       14                %INCLUDE CP_6;
      269       95                %INCLUDE CP_6_SUBS;
      270      635                %INCLUDE CX_SUBS_C;
      271      648                %INCLUDE CX_SCODE_C;
      272      656                %INCLUDE B$JIT;
      273      946                %INCLUDE XU_MACRO_C;
      274     4052                %INCLUDE CX_MACROS_M;
      275     4103                %INCLUDE NK_VFC_C;
      276     4177                %INCLUDE CX_DATA_R;
      277     5111        /**/
      278     5112    1   DCL     SCREECH  UBIN  WORD;
      279     5113    1   DCL 1 MID UNAL,
      280     5114    1         2 * BIT(3) UNAL,
      281     5115    1         2 MID BIT(6) UNAL ;
      282     5116    1   DCL     M$DO   DCB;
      283     5117    1   DCL     ERR_BUF CHAR(120);
      284     5118        /**/
      285     5119        /**/
      286     5120        %B$ALT;
      287     5128        %B$TCB (STCLASS="BASED(B$TCB$)");
      288     5131        %VLP_ERRCODE (FPTN=ERR_CODE, STCLASS=AUTO);
      289     5176        %FPT_ERRMSG (FPTN=FPT_ERRMSG,STCLASS=AUTO);
      290     5203        %VLR_ERRMSG (FPTN=VLR_ERRMSG,STCLASS=AUTO);
      291     5225        %FPT_SCREECH (FPTN=FPT_SCREECH,STCLASS=AUTO);
      292     5239        %VLP_SCODE (FPTN=SC_CXABORT,STCLASS=CONSTANT SYMDEF,FCG=CP,MID=C,MON='0'B,
      293     5240               CODE=%S$CXABORT,ROSEG='1'B,CPSEG='1'B,CUSR='1'B,
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:75   
      294     5241               CFUS='1'B,ENQ='1'B,LRM='1'B);
      295     5302        %FPT_CPEXIT (FPTN=FPT_CPEXIT,STCLASS=AUTO);
      296     5328        %EJECT;
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:76   
      297     5329    1     IF B$TCB.ALT$ ~= ADDR(NIL)

   5329  3 000002   000000 470400 xsym               LDP0    B$TCB$
         3 000003   000000 236100                    LDQ     0,,PR0
         3 000004   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000005   000012 600000 3                  TZE     s:5335

      298     5330    1        THEN   /* Current error available */
      299     5331    1           B$JIT.USRERR = B$TCB.ALT$ -> B$ALT.ERR;

   5331  3 000006   000000 471500                    LDP1    0,,PR0
         3 000007   100102 236100                    LDQ     66,,PR1
         3 000010   000000 473400 xsym               LDP3    B$JIT$
         3 000011   300144 756100                    STQ     100,,PR3

      300     5332        /*
      301     5333             ***** Write the screech message...
      302     5334        */
      303     5335    1     ERR_CODE.FCG = '0330'O ;  /* FCG='CX' */

   5335  3 000012   033000 236003                    LDQ     13824,DU
         3 000013   200043 752160                    STCQ    ERR_CODE,'60'O,AUTO

      304     5336    1     ERR_CODE.MID = MID.MID ;

   5336  3 000014   200004 471500                    LDP1    @MID,,AUTO
         3 000015   003100 060500                    CSL     bolr='003'O
         3 000016   100000 030006                    BDSC    0,,PR1                   by=0,bit=3,n=6
         3 000017   200043 230006                    BDSC    ERR_CODE,,AUTO           by=1,bit=3,n=6

      305     5337    1     ERR_CODE.ERR# = SCREECH;

   5337  3 000020   200003 473500                    LDP3    @SCREECH,,AUTO
         3 000021   300000 236100                    LDQ     0,,PR3
         3 000022   000003 736000                    QLS     3
         3 000023   200043 676100                    ERQ     ERR_CODE,,AUTO
         3 000024   377770 376007                    ANQ     131064,DL
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:77   
         3 000025   200043 656100                    ERSQ    ERR_CODE,,AUTO

      306     5338    1     ERR_CODE.MON = '0'B;

   5338  3 000026   000000 236000 4                  LDQ     0
         3 000027   200043 356100                    ANSQ    ERR_CODE,,AUTO

      307     5339    1     ERR_CODE.SEV = 7;

   5339  3 000030   000007 236007                    LDQ     7,DL
         3 000031   200043 256100                    ORSQ    ERR_CODE,,AUTO

      308     5340        /*
      309     5341             ***** Init FPT_ERRMSG
      310     5342        */
      311     5343    1     FPT_ERRMSG = CPSL_CFPT_ERRMSG;

   5343  3 000032   000100 100400                    MLR     fill='000'O
         3 000033   000000 000150 xsym               ADSC9   CPSL_CFPT_ERRMSG         cn=0,n=104
         3 000034   200044 000150                    ADSC9   FPT_ERRMSG,,AUTO         cn=0,n=104

      312     5344    1     FPT_ERRMSG.V_ = VECTOR(FPT_ERRMSG.V);

   5344  3 000035   000001 235000 4                  LDA     1
         3 000036   200126 452500                    STP2    FPT_CPEXIT+14,,AUTO
         3 000037   200126 236100                    LDQ     FPT_CPEXIT+14,,AUTO
         3 000040   000072 036003                    ADLQ    58,DU
         3 000041   200044 757100                    STAQ    FPT_ERRMSG,,AUTO

      313     5345    1     FPT_ERRMSG.BUF_ = VECTOR(ERR_BUF);

   5345  3 000042   000002 235000 4                  LDA     2
         3 000043   200126 452500                    STP2    FPT_CPEXIT+14,,AUTO
         3 000044   200126 236100                    LDQ     FPT_CPEXIT+14,,AUTO
         3 000045   000005 036003                    ADLQ    5,DU
         3 000046   200050 757100                    STAQ    FPT_ERRMSG+4,,AUTO

PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:78   
      314     5346    1     FPT_ERRMSG.CODE_ = VECTOR(ERR_CODE);

   5346  3 000047   777640 235007                    LDA     -96,DL
         3 000050   200126 452500                    STP2    FPT_CPEXIT+14,,AUTO
         3 000051   200126 236100                    LDQ     FPT_CPEXIT+14,,AUTO
         3 000052   000043 036003                    ADLQ    35,DU
         3 000053   200046 757100                    STAQ    FPT_ERRMSG+2,,AUTO

      315     5347    1     FPT_ERRMSG.RESULTS_ = VECTOR(VLR_ERRMSG);

   5347  3 000054   000001 235000 4                  LDA     1
         3 000055   200126 452500                    STP2    FPT_CPEXIT+14,,AUTO
         3 000056   200126 236100                    LDQ     FPT_CPEXIT+14,,AUTO
         3 000057   000076 036003                    ADLQ    62,DU
         3 000060   200066 757100                    STAQ    FPT_ERRMSG+18,,AUTO

      316     5348    1     FPT_ERRMSG.V.INCLCODE# = %YES#;

   5348  3 000061   004000 236003                    LDQ     2048,DU
         3 000062   200074 256100                    ORSQ    FPT_ERRMSG+24,,AUTO

      317     5349    1     FPT_ERRMSG.V.VFC# = %VFC_TRANSITION1;

   5349  3 000063   000037 236007                    LDQ     31,DL
         3 000064   200073 552104                    STBQ    FPT_ERRMSG+23,'04'O,AUTO

      318     5350    1     IF B$JIT.MODE = %M_BATCH#

   5350  3 000065   000000 474400 xsym               LDP4    B$JIT$
         3 000066   400000 236100                    LDQ     0,,PR4
         3 000067   740000 376003                    ANQ     -16384,DU
         3 000070   040000 116003                    CMPQ    16384,DU
         3 000071   000076 601000 3                  TNZ     s:5356

      319     5351
      320     5352    1        THEN
      321     5353    1           FPT_ERRMSG.V.OUTDCB1# = DCBNUM(M$DO);
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:79   

   5353  3 000072   000000 236007 xsym               LDQ     M$DO,DL
         3 000073   000000 620006                    EAX0    0,QL
         3 000074   200072 440100                    SXL0    FPT_ERRMSG+22,,AUTO
         3 000075   000100 710000 3                  TRA     s:5357

      322     5354
      323     5355    1        ELSE
      324     5356    1           FPT_ERRMSG.V.OUTDCB1# = CPSL_M$UC_NUM;

   5356  3 000076   000000 720000 xsym               LXL0    CPSL_M$UC_NUM
         3 000077   200072 440100                    SXL0    FPT_ERRMSG+22,,AUTO

      325     5357    1     CALL M$ERRMSG (FPT_ERRMSG) ALTRET(IGNORE1);

   5357  3 000100   200044 630500                    EPPR0   FPT_ERRMSG,,AUTO
         3 000101   420000 713400                    CLIMB   alt,+8192
         3 000102   405000 401760                    pmme    nvectors=11
         3 000103   000104 702000 3                  TSX2    IGNORE1

   5350  3 000104                       IGNORE1      null
      326     5358    1   IGNORE1: ; /* ignore the altret */
      327     5359        /*
      328     5360             ***** Write B$JIT.USRERR
      329     5361        */
      330     5362    1     IF B$JIT.USRERR ~= '0'B

   5362  3 000104   000000 470400 xsym               LDP0    B$JIT$
         3 000105   000144 235100                    LDA     100,,PR0
         3 000106   000117 600000 3                  TZE     IGNORE2

      331     5363
      332     5364    1        THEN
      333     5365    2           DO;

      334     5366    2              FPT_ERRMSG.CODE_ = VECTOR(B$JIT.USRERR);

PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:80   
   5366  3 000107   777640 235007                    LDA     -96,DL
         3 000110   000000 236000 xsym               LDQ     B$JIT$
         3 000111   000144 036003                    ADLQ    100,DU
         3 000112   200046 757100                    STAQ    FPT_ERRMSG+2,,AUTO

      335     5367    2              CALL M$ERRMSG (FPT_ERRMSG) ALTRET(IGNORE2);

   5367  3 000113   200044 630500                    EPPR0   FPT_ERRMSG,,AUTO
         3 000114   420000 713400                    CLIMB   alt,+8192
         3 000115   405000 401760                    pmme    nvectors=11
         3 000116   000117 702000 3                  TSX2    IGNORE2

      336     5368    2           END;

   5362  3 000117                       IGNORE2      null
      337     5369    1   IGNORE2: ; /* ignore the altret */
      338     5370        /*
      339     5371             ***** If the user has not screeched before, screech then log
      340     5372                   him off. BYE is put in CCBUFF and the CPSL returns to the
      341     5373                   command processor.  This way 'OFF' is output to the oc
      342     5374                   and an accounting record generated.
      343     5375                   If user has screeched before, just log  him off with
      344     5376                   the assumption that 'OFF' has been printed to the oc and
      345     5377                   an accounting record has been generated.
      346     5378        */
      347     5379    1     IF B$JIT.CPFLAGS1 & %CP_SCREECH#

   5379  3 000117   000000 470400 xsym               LDP0    B$JIT$
         3 000120   000143 236100                    LDQ     99,,PR0
         3 000121   000004 376000 xsym               ANQ     B_VECTNIL+4
         3 000122   000155 601000 3                  TNZ     E_BYE

      348     5380
      349     5381    1        THEN
      350     5382    1           GOTO E_BYE;
      351     5383
      352     5384    1        ELSE
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:81   
      353     5385    2           DO; /* run down the user */

      354     5386    2              FPT_SCREECH = CPSL_CFPT_SCREECH;

   5386  3 000123   000100 100400                    MLR     fill='000'O
         3 000124   000000 000030 xsym               ADSC9   CPSL_CFPT_SCREECH        cn=0,n=24
         3 000125   200102 000030                    ADSC9   FPT_SCREECH,,AUTO        cn=0,n=24

      355     5387    2              FPT_SCREECH.SCODE_ = VECTOR(SC_CXABORT);

   5387  3 000126   000004 237000 4                  LDAQ    4
         3 000127   200102 757100                    STAQ    FPT_SCREECH,,AUTO

      356     5388    2              FPT_SCREECH.JERR_ = VECTOR(ERR_CODE);

   5388  3 000130   777640 235007                    LDA     -96,DL
         3 000131   200126 452500                    STP2    FPT_CPEXIT+14,,AUTO
         3 000132   200126 236100                    LDQ     FPT_CPEXIT+14,,AUTO
         3 000133   000043 036003                    ADLQ    35,DU
         3 000134   200104 757100                    STAQ    FPT_SCREECH+2,,AUTO

      357     5389    2              CALL M$SCREECH (FPT_SCREECH) ALTRET(E_M$SCREECH);

   5389  3 000135   200102 630500                    EPPR0   FPT_SCREECH,,AUTO
         3 000136   400013 713400                    CLIMB   alt,+11
         3 000137   401000 401760                    pmme    nvectors=3
         3 000140   000141 702000 3                  TSX2    E_M$SCREECH

   5388  3 000141                       E_M$SCREECH  null
      358     5390        /*S*    SCREECH_CODE: CXC-S$CXABORT
      359     5391                TYPE: SNAP
      360     5392                MESSAGE: Command Processor abort
      361     5393                REMARKS: The reason for this snap is contained in JIT.ERR
      362     5394        */
      363     5395    2   E_M$SCREECH: ;
      364     5396    2              B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1 | %CP_SCREECH#;

PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:82   
   5396  3 000141   000000 470400 xsym               LDP0    B$JIT$
         3 000142   000143 236100                    LDQ     99,,PR0
         3 000143   000004 276000 xsym               ORQ     B_VECTNIL+4
         3 000144   000143 756100                    STQ     99,,PR0

      365     5397    2              B$JIT.CCBUF = 'BYE' ;

   5397  3 000145   040100 100400                    MLR     fill='040'O
         3 000146   000002 000003 2                  ADSC9   SC_CXABORT+2             cn=0,n=3
         3 000147   000033 000400                    ADSC9   27,,PR0                  cn=0,n=256

      366     5398    2              B$JIT.CCARS = 3 ;

   5398  3 000150   000003 220003                    LDX0    3,DU
         3 000151   000032 740100                    STX0    26,,PR0

      367     5399    2              B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1 | %CP_BUFFULL# ;

   5399  3 000152   000003 276000 2                  ORQ     SC_CXABORT+3
         3 000153   000143 756100                    STQ     99,,PR0

      368     5400    2              RETURN ;

   5400  3 000154   000000 702200 xent               TSX2  ! X66_ARET

      369     5401    2           END;
      370     5402    1   E_BYE:
      371     5403    1     FPT_CPEXIT = CPSL_CFPT_CPEXIT;

   5403  3 000155   000100 100400       E_BYE        MLR     fill='000'O
         3 000156   000000 000070 xsym               ADSC9   CPSL_CFPT_CPEXIT         cn=0,n=56
         3 000157   200110 000070                    ADSC9   FPT_CPEXIT,,AUTO         cn=0,n=56

      372     5404    1     FPT_CPEXIT.V_ = VECTOR(FPT_CPEXIT.V);

   5404  3 000160   000004 235000 4                  LDA     4
         3 000161   200126 452500                    STP2    FPT_CPEXIT+14,,AUTO
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:83   
         3 000162   200126 236100                    LDQ     FPT_CPEXIT+14,,AUTO
         3 000163   000124 036003                    ADLQ    84,DU
         3 000164   200122 757100                    STAQ    FPT_CPEXIT+10,,AUTO

      373     5405    1     CALL M$CPEXIT (FPT_CPEXIT) ALTRET(E_CPEXIT);

   5405  3 000165   200110 630500                    EPPR0   FPT_CPEXIT,,AUTO
         3 000166   400012 713400                    CLIMB   alt,+10
         3 000167   402400 401760                    pmme    nvectors=6
         3 000170   000171 702000 3                  TSX2    E_CPEXIT

   5404  3 000171                       E_CPEXIT     null
      374     5406    1   E_CPEXIT: ;
      375     5407        /*
      376     5408             ***** Use M$CPEXIT to log the user off if CXA$BYE
      377     5409                   comes back to haunt us. May be necessary to
      378     5410                   do a M$SCREECH to recovery if this pmme fails...
      379     5411        */
      380     5412    1   END     CXC$SCREECH;

   5412  3 000171   000000 702200 xent               TSX2  ! X66_ARET
      381     5413                   %EOD;

PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:84   
--  Include file information  --

   CX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   NK_VFC_C.:E05TOU  is referenced.
   CX_MACROS_M.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CX_SCODE_C.:E05TOU  is referenced.
   CX_SUBS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CXC$SCREECH.
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:85   

 **** Variables and constants ****

  ****  Section 002 RoData CXC$SCREECH

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(72)    r     1 SC_CXABORT

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @MID                       3-0-0/w PTR         r     1 @SCREECH
     5-0-0/c CHAR(120)   r     1 ERR_BUF                   43-0-0/w STRC        r     1 ERR_CODE
   110-0-0/d STRC(504)   r     1 FPT_CPEXIT                44-0-0/d STRC(936)   r     1 FPT_ERRMSG
   102-0-0/d STRC(216)   r     1 FPT_SCREECH               *0-0-0/b STRC(9)     r     1 MID
    *0-0-0/w UBIN        r     1 SCREECH                   76-0-0/d STRC(144)   r     1 VLR_ERRMSG

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/d STRC(504)   r     1 CPSL_CFPT_CPEXIT           0-0-0/d STRC(936)   r     1 CPSL_CFPT_ERRMSG
     0-0-0/d STRC(216)   r     1 CPSL_CFPT_SCREECH          0-0-0/w UBIN        r     1 CPSL_M$UC_NUM

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0N  NULL        r     1 M$DO

PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:86   

   Procedure CXC$SCREECH requires 122 words for executable code.
   Procedure CXC$SCREECH requires 88 words of local(AUTO) storage.
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:87   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:88   
          MINI XREF LISTING

B$ALT.CODE
      5122**DCL      5122--REDEF    5123--REDEF    5123--REDEF
B$ALT.ERR
      5123**DCL      5331>>ASSIGN
B$ALT.ERR.ERR#
      5124**DCL      5124--REDEF
B$ALT.EVID
      5123**DCL      5123--REDEF    5123--REDEF
B$JIT.CCARS
       758**DCL      5398<<ASSIGN
B$JIT.CCBUF
       758**DCL      5397<<ASSIGN
B$JIT.CPFLAGS1
       759**DCL      5379>>IF       5396<<ASSIGN   5396>>ASSIGN   5399<<ASSIGN   5399>>ASSIGN
B$JIT.CPFLAGS1.SLEAZE
       764**DCL       764--REDEF
B$JIT.ERR.MID
       671**DCL       671--REDEF
B$JIT.JRESPEAK
       832**DCL       833--REDEF
B$JIT.MODE
       665**DCL      5350>>IF
B$JIT.ORIGINATOR_PORT.FROM_CR
       941**DCL       941--REDEF     942--REDEF
B$JIT.PNR
       845**DCL       845--REDEF
B$JIT.TSLINE
       939**DCL       940--REDEF
B$JIT.USRERR
       806**DCL      5331<<ASSIGN   5362>>IF       5366--ASSIGN
B$JIT$
      5078**DCL       665--IMP-PTR  5331>>ASSIGN   5350>>IF       5362>>IF       5366>>ASSIGN   5379>>IF
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:89   
      5396>>ASSIGN   5396>>ASSIGN   5397>>ASSIGN   5398>>ASSIGN   5399>>ASSIGN   5399>>ASSIGN
B$TCB.ALT$
      5129**DCL      5329>>IF       5331>>ASSIGN
B$TCB$
      5079**DCL      5129--IMP-PTR  5329>>IF       5331>>ASSIGN
CPSL_CAMR_REC.ACSVEH_
      4366**DCL      4367--REDEF
CPSL_CAMR_REC.ALTKEYS_
      4372**DCL      4373--REDEF    4373--REDEF
CPSL_CAMR_REC.HDR_
      4371**DCL      4372--REDEF
CPSL_CAMR_REC.TAB_
      4370**DCL      4371--REDEF
CPSL_CAMR_REC.UHL_
      4364**DCL      4365--REDEF    4365--REDEF
CPSL_CAMR_REC.V.FSN#
      4404**DCL      4404--REDEF    4404--REDEF
CPSL_CAMR_REC.WSN_
      4370**DCL      4370--REDEF
CPSL_CFPT_CLOSE.SN_
      4431**DCL      4431--REDEF
CPSL_CFPT_CLOSE.UTL_
      4432**DCL      4432--REDEF
CPSL_CFPT_CLOSE.V.EXPIRE#
      4446**DCL      4446--REDEF
CPSL_CFPT_CLOSE.V.TYPE#
      4444**DCL      4444--REDEF
CPSL_CFPT_CLOSE.V.XTNSIZE#
      4441**DCL      4441--REDEF    4443--REDEF
CPSL_CFPT_CPEXIT
      4707**DCL      5403>>ASSIGN
CPSL_CFPT_ERRMSG
      4678**DCL      5343>>ASSIGN
CPSL_CFPT_OPEN.ACSVEH_
      4257**DCL      4258--REDEF
CPSL_CFPT_OPEN.ALTKEYS_
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:90   
      4263**DCL      4264--REDEF    4264--REDEF
CPSL_CFPT_OPEN.HDR_
      4262**DCL      4263--REDEF
CPSL_CFPT_OPEN.TAB_
      4261**DCL      4262--REDEF
CPSL_CFPT_OPEN.UHL_
      4255**DCL      4256--REDEF    4256--REDEF
CPSL_CFPT_OPEN.V.FSN#
      4295**DCL      4295--REDEF    4295--REDEF
CPSL_CFPT_OPEN.WSN_
      4261**DCL      4261--REDEF
CPSL_CFPT_READ.STATION_
      4470**DCL      4471--REDEF
CPSL_CFPT_READ.V.DVBYTE.REREAD#
      4482**DCL      4482--REDEF
CPSL_CFPT_READ.V.INDX#
      4480**DCL      4480--REDEF
CPSL_CFPT_SCREECH
      4731**DCL      5386>>ASSIGN
CPSL_CFPT_WRITE.STATION_
      4508**DCL      4508--REDEF
CPSL_CFPT_WRITE.V.DVBYTE.VFC#
      4515**DCL      4515--REDEF
CPSL_CVLP_TRMCTL.BREAKCOUNT
      4899**DCL      4900--REDEF
CPSL_CVLP_WINDOW.FWINDOW#
      4995**DCL      4995--REDEF    4996--REDEF
CPSL_M$UC_NUM
      5082**DCL      5356>>ASSIGN
ERR_BUF
      5117**DCL      5345--ASSIGN
ERR_CODE
      5143**DCL      5346--ASSIGN   5388--ASSIGN
ERR_CODE.ERR#
      5173**DCL      5337<<ASSIGN
ERR_CODE.FCG
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:91   
      5159**DCL      5335<<ASSIGN
ERR_CODE.MID
      5172**DCL      5336<<ASSIGN
ERR_CODE.MON
      5172**DCL      5338<<ASSIGN
ERR_CODE.SEV
      5173**DCL      5339<<ASSIGN
E_BYE
      5403**LABEL    5382--GOTO
E_CPEXIT
      5404**LABEL    5405--CALLALT
E_M$SCREECH
      5388**LABEL    5389--CALLALT
FPT_CPEXIT
      5315**DCL      5403<<ASSIGN   5405<>CALL
FPT_CPEXIT.V
      5318**DCL      5404--ASSIGN
FPT_CPEXIT.V_
      5318**DCL      5404<<ASSIGN
FPT_ERRMSG
      5187**DCL      5343<<ASSIGN   5357<>CALL     5367<>CALL
FPT_ERRMSG.BUF_
      5187**DCL      5345<<ASSIGN
FPT_ERRMSG.CODE_
      5187**DCL      5346<<ASSIGN   5366<<ASSIGN
FPT_ERRMSG.RESULTS_
      5190**DCL      5347<<ASSIGN
FPT_ERRMSG.V
      5191**DCL      5344--ASSIGN
FPT_ERRMSG.V.INCLCODE#
      5196**DCL      5348<<ASSIGN
FPT_ERRMSG.V.OUTDCB1#
      5192**DCL      5353<<ASSIGN   5356<<ASSIGN
FPT_ERRMSG.V.VFC#
      5193**DCL      5349<<ASSIGN
FPT_ERRMSG.V_
PL6.E3A0      #005=CXC$SCREECH File=CXC$SUBR.:E05TSI                             TUE 07/29/97 12:25 Page:92   
      5187**DCL      5344<<ASSIGN
FPT_SCREECH
      5236**DCL      5386<<ASSIGN   5389<>CALL
FPT_SCREECH.JERR_
      5236**DCL      5388<<ASSIGN
FPT_SCREECH.SCODE_
      5236**DCL      5387<<ASSIGN
IGNORE1
      5350**LABEL    5357--CALLALT
IGNORE2
      5362**LABEL    5367--CALLALT
M$CPEXIT
        37**DCL-ENT  5405--CALL
M$DO
      5116**DCL      5353>>ASSIGN
M$ERRMSG
        86**DCL-ENT  5357--CALL     5367--CALL
M$SCREECH
        37**DCL-ENT  5389--CALL
MID
      5113**DCL        12--PROC
MID.MID
      5115**DCL      5336>>ASSIGN
SCREECH
      5112**DCL        12--PROC     5337>>ASSIGN
SC_CXABORT
      5256**DCL      5387--ASSIGN
VLR_ERRMSG
      5214**DCL      5347--ASSIGN

PL6.E3A0      #006=CXC$RFEXT File=CXC$SUBR.:E05TSI                               TUE 07/29/97 12:26 Page:93   
      382        1        /*T***********************************************************/
      383        2        /*T*                                                         */
      384        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      385        4        /*T*                                                         */
      386        5        /*T***********************************************************/
      387        6        /*F*   NAME:   CXC$RFEXT
      388        7               PURPOSE: Resets file extension bit for specified op label
      389        8               DESCRIPTION: The file extension bit corresponding to the specified
      390        9                       op label is reset if the op label being processed is a
      391       10                       system op label.
      392       11        */
      393       12        /*D*   NAME:   CXC$RFEXT
      394       13               CALL:   CALL CXC$RFEXT(DCB$)
      395       14               INTERFACE:
      396       15               INPUT:  DCB$ - pointer to dcb
      397       16                       F_OPLBL - op label name table
      398       17               OUTPUT: B$JIT.FEXT - file extension bit reset if op label
      399       18                       encountered
      400       19               DESCRIPTION: The file extension bit corresponding to the op label
      401       20                       is reset in the JIT if the op label being processed
      402       21                       is a system op label, i.e m$yy, where yy is found in the
      403       22                       system op label table.
      404       23        */
      405       24        /***********************************************************************/
      406       25        CXC$RFEXT: PROC(DCB$);
      407       26                   %INCLUDE CP_6;
      408      107                   %INCLUDE B_MACROS_C;
      409      218                   %INCLUDE B$JIT;
      410      508                   %INCLUDE CP_6_SUBS;
      411     1048                   %INCLUDE FM_OPLBL_R;
      412     1062                   %TEXTC (NAME=TEXTC,STCLASS=BASED);
      413     1067    1   DCL I UBIN(36) ALIGNED;                 /*Temp. Location for indexes*/
      414     1068    1   DCL DCB$ PTR;                           /*Ptr to dcb name*/
      415     1069    1   DCL B$JIT$ PTR SYMREF;
      416     1070    1   DCL 1 DCBNAME CALIGNED BASED (DCB$),
      417     1071    1         2 LEN UBIN BYTE CALIGNED,         /*Length of name (ignored)*/
      418     1072    1         2 PREFIX CHAR(2) CALIGNED,        /*name prefix - 'M$' */
PL6.E3A0      #006=CXC$RFEXT File=CXC$SUBR.:E05TSI                               TUE 07/29/97 12:26 Page:94   
      419     1073    1         2 SUFFIX CHAR(2) CALIGNED;        /*name suffix - after M$ */
      420     1074        /**/
      421     1075    1     IF (DCBNAME.PREFIX = 'M$')   /* must be a system dcb */
      422     1076    2       THEN DO;
      423     1077    3         DO I = F_NUMOPS DOWNTO 1; /* look for DCB in op label table */
      424     1078    3           IF (DCBNAME.SUFFIX=F_OPLBL(I))
      425     1079    4             THEN DO;
      426     1080    4               B$JIT.FEXT(I)=%NO#;  /* found! reset file extension bit */
      427     1081    4             END;
      428     1082    3         END; /* DO I = */
      429     1083    2       END; /* DCBNAME.PREFIX = 'M$' */
      430     1084        /**/
      431     1085    1     RETURN;
      432     1086    1   END CXC$RFEXT;

PL6.E3A0      #006=CXC$RFEXT File=CXC$SUBR.:E05TSI                               TUE 07/29/97 12:26 Page:95   
--  Include file information  --

   FM_OPLBL_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CXC$RFEXT.

   Procedure CXC$RFEXT requires 28 words for executable code.
   Procedure CXC$RFEXT requires 6 words of local(AUTO) storage.

    No errors detected in file CXC$SUBR.:E05TSI    .

PL6.E3A0      #006=CXC$RFEXT File=CXC$SUBR.:E05TSI                               TUE 07/29/97 12:26 Page:96   

 Object Unit name= CXC$RFEXT                                  File name= CXC$SUBR.:E05TOU
 UTS= JUL 29 '97 12:26:42.96 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS      1      1  CXC$RFEXT
    2   Proc  even  none    28     34  CXC$RFEXT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        1  CXC$RFEXT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    F_OPLBL                               B$JIT$
     B_VECTNIL
PL6.E3A0      #006=CXC$RFEXT File=CXC$SUBR.:E05TSI                               TUE 07/29/97 12:26 Page:97   


      382        1        /*T***********************************************************/
      383        2        /*T*                                                         */
      384        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      385        4        /*T*                                                         */
      386        5        /*T***********************************************************/
      387        6        /*F*   NAME:   CXC$RFEXT
      388        7               PURPOSE: Resets file extension bit for specified op label
      389        8               DESCRIPTION: The file extension bit corresponding to the specified
      390        9                       op label is reset if the op label being processed is a
      391       10                       system op label.
      392       11        */
      393       12        /*D*   NAME:   CXC$RFEXT
      394       13               CALL:   CALL CXC$RFEXT(DCB$)
      395       14               INTERFACE:
      396       15               INPUT:  DCB$ - pointer to dcb
      397       16                       F_OPLBL - op label name table
      398       17               OUTPUT: B$JIT.FEXT - file extension bit reset if op label
      399       18                       encountered
      400       19               DESCRIPTION: The file extension bit corresponding to the op label
      401       20                       is reset in the JIT if the op label being processed
      402       21                       is a system op label, i.e m$yy, where yy is found in the
      403       22                       system op label table.
      404       23        */
      405       24        /***********************************************************************/
      406       25        CXC$RFEXT: PROC(DCB$);

     25  2 000000   000000 700200 xent  CXC$RFEXT    TSX0  ! X66_AUTO_1
         2 000001   000006 000001                    ZERO    6,1

      407       26                   %INCLUDE CP_6;
      408      107                   %INCLUDE B_MACROS_C;
      409      218                   %INCLUDE B$JIT;
      410      508                   %INCLUDE CP_6_SUBS;
      411     1048                   %INCLUDE FM_OPLBL_R;
      412     1062                   %TEXTC (NAME=TEXTC,STCLASS=BASED);
      413     1067    1   DCL I UBIN(36) ALIGNED;                 /*Temp. Location for indexes*/
PL6.E3A0      #006=CXC$RFEXT File=CXC$SUBR.:E05TSI                               TUE 07/29/97 12:26 Page:98   
      414     1068    1   DCL DCB$ PTR;                           /*Ptr to dcb name*/
      415     1069    1   DCL B$JIT$ PTR SYMREF;
      416     1070    1   DCL 1 DCBNAME CALIGNED BASED (DCB$),
      417     1071    1         2 LEN UBIN BYTE CALIGNED,         /*Length of name (ignored)*/
      418     1072    1         2 PREFIX CHAR(2) CALIGNED,        /*name prefix - 'M$' */
      419     1073    1         2 SUFFIX CHAR(2) CALIGNED;        /*name suffix - after M$ */
      420     1074        /**/
      421     1075    1     IF (DCBNAME.PREFIX = 'M$')   /* must be a system dcb */

   1075  2 000002   200003 470500                    LDP0    @DCB$,,AUTO
         2 000003   000000 471500                    LDP1    0,,PR0
         2 000004   040000 106500                    CMPC    fill='040'O
         2 000005   100000 200002                    ADSC9   0,,PR1                   cn=1,n=2
         2 000006   000000 000002 1                  ADSC9   0                        cn=0,n=2
         2 000007   000033 601000 2                  TNZ     s:1085

      422     1076    2       THEN DO;

      423     1077    3         DO I = F_NUMOPS DOWNTO 1; /* look for DCB in op label table */

   1077  2 000010   000020 235007                    LDA     16,DL
         2 000011   200004 755100                    STA     I,,AUTO

      424     1078    3           IF (DCBNAME.SUFFIX=F_OPLBL(I))

   1078  2 000012   200003 470500                    LDP0    @DCB$,,AUTO
         2 000013   000000 471500                    LDP1    0,,PR0
         2 000014   200004 235100                    LDA     I,,AUTO
         2 000015   000001 735000                    ALS     1
         2 000016   040005 106500                    CMPC    fill='040'O
         2 000017   100000 600002                    ADSC9   0,,PR1                   cn=3,n=2
         2 000020   000000 000002 xsym               ADSC9   F_OPLBL,A                cn=0,n=2
         2 000021   000027 601000 2                  TNZ     s:1082

      425     1079    4             THEN DO;

      426     1080    4               B$JIT.FEXT(I)=%NO#;  /* found! reset file extension bit */
PL6.E3A0      #006=CXC$RFEXT File=CXC$SUBR.:E05TSI                               TUE 07/29/97 12:26 Page:99   

   1080  2 000022   000000 473400 xsym               LDP3    B$JIT$
         2 000023   200004 236100                    LDQ     I,,AUTO
         2 000024   003106 060400                    CSL     bolr='003'O
         2 000025   000002 000001 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=1
         2 000026   300220 000001                    BDSC    144,Q,PR3                by=0,bit=0,n=1

      427     1081    4             END;

      428     1082    3         END; /* DO I = */

   1082  2 000027   200004 236100                    LDQ     I,,AUTO
         2 000030   000001 136007                    SBLQ    1,DL
         2 000031   200004 756100                    STQ     I,,AUTO
         2 000032   000012 601000 2                  TNZ     s:1078

      429     1083    2       END; /* DCBNAME.PREFIX = 'M$' */

      430     1084        /**/
      431     1085    1     RETURN;

   1085  2 000033   000000 702200 xent               TSX2  ! X66_ARET
      432     1086    1   END CXC$RFEXT;

PL6.E3A0      #006=CXC$RFEXT File=CXC$SUBR.:E05TSI                               TUE 07/29/97 12:26 Page:100  
--  Include file information  --

   FM_OPLBL_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CXC$RFEXT.
PL6.E3A0      #006=CXC$RFEXT File=CXC$SUBR.:E05TSI                               TUE 07/29/97 12:26 Page:101  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @DCB$                     *0-0-0/w PTR         r     1 DCB$
     4-0-0/w UBIN        r     1 I

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/c CHAR(2)     r     1 F_OPLBL(0:8191)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/c STRC(45)    r     1 DCBNAME
     0-0-0/c ASTR(9)     r     1 TEXTC


   Procedure CXC$RFEXT requires 28 words for executable code.
   Procedure CXC$RFEXT requires 6 words of local(AUTO) storage.

    No errors detected in file CXC$SUBR.:E05TSI    .
PL6.E3A0      #006=CXC$RFEXT File=CXC$SUBR.:E05TSI                               TUE 07/29/97 12:26 Page:102  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=CXC$RFEXT File=CXC$SUBR.:E05TSI                               TUE 07/29/97 12:26 Page:103  
          MINI XREF LISTING

B$JIT.CPFLAGS1.SLEAZE
       326**DCL       326--REDEF
B$JIT.ERR.MID
       233**DCL       233--REDEF
B$JIT.FEXT
       400**DCL      1080<<ASSIGN
B$JIT.JRESPEAK
       394**DCL       395--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
       503**DCL       503--REDEF     504--REDEF
B$JIT.PNR
       407**DCL       407--REDEF
B$JIT.TSLINE
       501**DCL       502--REDEF
B$JIT$
      1069**DCL       227--IMP-PTR  1080>>ASSIGN
DCB$
      1068**DCL        25--PROC     1070--IMP-PTR  1075>>IF       1078>>IF
DCBNAME.PREFIX
      1072**DCL      1075>>IF
DCBNAME.SUFFIX
      1073**DCL      1078>>IF
F_OPLBL
      1057**DCL      1078>>IF
I
      1067**DCL      1077<<DOINDEX  1078>>IF       1080>>ASSIGN
TEXTC.SIZ
      1064**DCL      1065--IMP-SIZ
