VERSION E05

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:1    
        1        1        /*M* GUD$MCL_HAND  LCP-6 Monitor Services Decoder                 */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ENU=0,ECU=0     */
        8        8
        9        9        GUD$MCL_HAND: PROC(G$TSA) ALTRET;
       10       10
       11       11        %INCLUDE G_JIT_M;
       12      276        %INCLUDE G_HJIT_M;
       13      421        %INCLUDE GH_SCHD_M;
       14      565 S      %INCLUDE GH_LCP6_M;
       15      566 S      %INCLUDE GJ_LCP6_M;
       16      567 S      %INCLUDE GU_LCP6_M;
       17      568        %INCLUDE G_ROS_M;
       18      650        %INCLUDE GH_GATE_M;
       19      691        %INCLUDE GU_MACROS_M;
       20      850
       21      851                                                /* Input parameters                   */
       22      852        %G$TSA (STCLASS= );
       23     1240
       24     1241
       25     1242
       26     1243                                                /* AUTO Storage                       */
       27     1244    1   DCL GUD$PTR$ PTR;
       28     1245    1   DCL GUD$ECCB$ PTR;
       29     1246    1   DCL LAST_MCL SBIN;
       30     1247    1   DCL NUM_VECT SBIN;
       31     1248    1   DCL HAND$ EPTR;
       32     1249    1   DCL ASDT_MCL$ PTR;
       33     1250    1   DCL FPT$ PTR;
       34     1251    1   DCL T$ PTR;
       35     1252    1   DCL I SBIN;
       36     1253    1   DCL ASDT_USR_INDX SBIN;
       37     1254    1   DCL ASDT_MCL_INDX SBIN;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:2    
       38     1255    1   DCL LAST_SEG_BYTE UBIN(32);
       39     1256    1   DCL LAST_FPT_BYTE UBIN(32);
       40     1257    1   DCL LPARS_USED SBIN;
       41     1258    1   DCL BPARS_USED SBIN;
       42     1259    1   DCL PARAM_DESC_USED SBIN;
       43     1260    1   DCL USR_VBASE UBIN(32);
       44     1261    1   DCL USR_OFFSET SBIN(32);
       45     1262    1   DCL MCL_OFFSET SBIN(32);
       46     1263    1   DCL BLOCK_INDEX SBIN;
       47     1264        %GUD$VECTOR (FPTN=GUD@VECTOR,STCLASS=AUTO);
       48     1268
       49     1269                                                /* Parameters for the MCL handler     */
       50     1270        %GUD_HAND_PARAMS (FPTN=GUD_PARAMS,STCLASS=AUTO);
       51     1346
       52     1347                                                /* Parameters for GUE$ENVTCB          */
       53     1348        %GUE_ENVTCB_PARAMS (FPTN=ENVTCB_PARAMS,STCLASS=AUTO);
       54     1473
       55     1474
       56     1475
       57     1476                                                /* Internal data                      */
       58     1477        %GUD_VECT_INFO (FPTN=GUD_FPT,
       59     1478                        STCLASS=CONSTANT,
       60     1479                        MAND=YES,
       61     1480                        LVL=1,
       62     1481                        LAST=YES);
       63     1501
       64     1502        %G$SEGDESC (FPTN=G_NULL_DESC,
       65     1503                    STCLASS=CONSTANT,
       66     1504                    RP=G_R_MON#,
       67     1505                    WP=G_R_MON#);
       68     1527
       69     1528                                                /* External data                      */
       70     1529
       71     1530    1   DCL GUD_MAXFCG SBIN SYMREF;
       72     1531
       73     1532    1   DCL 1 GUD_MCL_TABLE SYMREF WALIGNED,
       74     1533    1         2 INDEX_(0:0) PTR;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:3    
       75     1534
       76     1535    1   DCL G$ROS$ PTR SYMREF READONLY;
       77     1536    1   DCL G$ASDT_USR$ PTR SYMREF READONLY;
       78     1537    1   DCL G$ASDT_MCL$ PTR SYMREF READONLY;
       79     1538    1   DCL G$MHJIT$ PTR SYMREF READONLY;
       80     1539    1   DCL G$UHJIT$ PTR SYMREF READONLY;
       81     1540
       82     1541    1   DCL G_KEEP_USER(0:63) BIT(1) UNAL SYMREF;
       83     1542        %GATE (FPTN=GM_MEATLOCK,STCLASS=SYMREF);
       84     1561    1   DCL GH_LEV_SCHD UBIN SYMREF;
       85     1562
       86     1563                                                /* Based Structures                   */
       87     1564        %GUD_FCG_INFO (FPTN=FCG$INFO,STCLASS=BASED,LVL=1,LAST=YES);
       88     1596
       89     1597
       90     1598        %GUD_FCG_INFO (FPTN=FCG$INFO_WITH_HAND,STCLASS=BASED,LVL=1,LAST=YES,HAND=ANY);
       91     1630
       92     1631
       93     1632        %GUD_MCL_INFO (FPTN=MCL$INFO,STCLASS=BASED,LVL=1,LAST=YES);
       94     1665
       95     1666
       96     1667        %GUD_MCL_INFO (FPTN=MCL$INFO_WITH_HAND,STCLASS=BASED,LVL=1,LAST=YES,HAND=ANY);
       97     1700
       98     1701
       99     1702
      100     1703        %GUD_VECT_INFO (FPTN=VECT$INFO,LVL=1,STCLASS=BASED,LAST=YES);
      101     1723
      102     1724        %GUD$VECTOR (FPTN=G$VECTOR,STCLASS=BASED);
      103     1728
      104     1729    1   DCL 1 G$CPTR BASED WALIGNED,
      105     1730    1         2 C BIT(1) UNAL,
      106     1731    1         2 MBZ UBIN(11) UNAL,
      107     1732    1         2 ADDRS UBIN(20) UNAL;
      108     1733
      109     1734    1   DCL 1 ASDT(0:30) BASED WALIGNED,
      110     1735           %G$SEGDESC (FPTN=DESC,LVL=2,LAST=YES);
      111     1757
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:4    
      112     1758
      113     1759        %G$SEGDESC;
      114     1781
      115     1782        %G$JIT;
      116     2196        %G$ROS;
      117     2240        %G$ECCB;
      118     2316        %G$USER (FPTN=G$U);
      119     2327        %G$MHJIT (STCLASS="BASED(G$MHJIT$)");
      120     9201        %G$UHJIT (STCLASS="BASED(G$UHJIT$)");
      121    12175
      122    12176    1   DCL ALT_SPEC SBIN WORD BASED;
      123    12177    1   DCL DCB# UBIN BYTE WALIGNED BASED;
      124    12178
      125    12179
      126    12180                                                /* External Procedures                */
      127    12181
      128    12182    1   DCL GUD$ASD ENTRY(1);
      129    12183    1   DCL GUE$ENVTCB ENTRY(1) ALTRET;
      130    12184    1   DCL GJU$GET_DB ENTRY ALTRET;
      131    12185    1   DCL GHQ$MCLEND ENTRY ALTRET;
      132    12186    1   DCL GHR$SRV ENTRY;
      133    12187    1   DCL GHH$LEV ENTRY(1);
      134    12188    1   DCL SCREECH ENTRY(1);
      135    12189
      136    12190
      137    12191                                                /* EQUs                               */
      138    12192        %G$JIT_E;
      139    12254 S      %INCLUDE G_LCP6_E;
      140    12255        %INCLUDE GH_SCHD_E;
      141    12351        %INCLUDE GM_VIRTUAL_E;
      142    12561        %GJ_MCL_E;
      143    12570
      144    12571        %SUB G$JIT = G$ROS$->G$ROS.JIT$->G$JIT;
      145    12572
      146    12573
      147    12574        %EJECT;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:5    
      148    12575
      149    12576        %INCLUDE UD_ERRORS_C;
      150    12618        %INCLUDE UD_SCODE_C;
      151    12630
      152    12631        %VLP_ERRCODE (FPTN=EBADCODE,ERR#=%E$BADCODE,SEV=G_SEV_ERROR#,
      153    12632                            STCLASS=CONSTANT,FCG=GU,MID=D,MON='1'B);
      154    12678        %VLP_ERRCODE (FPTN=EBADFPT,ERR#=%E$BADFPT,SEV=G_SEV_ERROR#,
      155    12679                            STCLASS=CONSTANT,FCG=GU,MID=D,MON='1'B);
      156    12725        %VLP_ERRCODE (FPTN=ENOFPT,ERR#=%E$NOFPT,SEV=G_SEV_ERROR#,
      157    12726                            STCLASS=CONSTANT,FCG=GU,MID=D,MON='1'B);
      158    12772        %VLP_ERRCODE (FPTN=EBADVECT,ERR#=%E$BADVECT0,SEV=G_SEV_ERROR#,
      159    12773                            STCLASS=CONSTANT,FCG=GU,MID=D,MON='1'B);
      160    12819        %VLP_ERRCODE (FPTN=EBADSEGSPAN,ERR#=%E$BADSEGSPAN,SEV=G_SEV_ERROR#,
      161    12820                            STCLASS=CONSTANT,FCG=GU,MID=D,MON='1'B);
      162    12866        %VLP_ERRCODE (FPTN=ENOTAUTH,ERR#=%E$NOTAUTH,SEV=G_SEV_ERROR#,
      163    12867                            STCLASS=CONSTANT,FCG=GU,MID=D,MON='1'B);
      164    12913
      165    12914        %VLP_SCODE (FPTN=GUD_SCODE1,ERR#=%S$MCL_TABLE,SEV=6,
      166    12915                    STCLASS=CONSTANT,FCG=GU,MID=D,MON='1'B);
      167    12976        %EJECT;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:6    
      168    12977
      169    12978        /*F* NAME:   GUD$MCLENT
      170    12979             PURPOSE: To decode the user's MCL parameters and call the
      171    12980                      appropriate LCP-6 MCL handler.
      172    12981                      To provide for normal and error return to the user
      173    12982                      following MCL processing.
      174    12983        */
      175    12984
      176    12985        /*D* NAME:  GUD$MCL_ENT
      177    12986
      178    12987             INPUT:  G$TSA.  The Trap Save Area containing the MCL trap environment.
      179    12988
      180    12989             CALL:   CALL GUD$MCLENT(G$TSA);
      181    12990
      182    12991                     GUD$MCLENT is called only by GHT$TRAP in the mon entry segment.
      183    12992
      184    12993                     GUD$MCLENT will take the normal return if the trap handler
      185    12994                     is to simply RTT through the MCL TSA for normal return to the
      186    12995                     user, alternate return to the user or entry to the user's
      187    12996                     trap handler.  If the ALTRET routine or user's trap handler
      188    12997                     is to be entered, P$ in the TSA will have been set to the
      189    12998                     address of the user's handler and the TSA will have been
      190    12999                     moved to the user's TCB.
      191    13000
      192    13001                     GUD$MCLENT will take the alternate return with TSA.I.TRAP#
      193    13002                     set to indicate special processing to GHT$TRAP.
      194    13003                     TRAP# will be set to zero if the trap handler is to load
      195    13004                     a full environment (for M$TRTN) prior to returning to the
      196    13005                     user.
      197    13006
      198    13007                     TRAP# set non-zero will indicate that the debugger is to
      199    13008                     be entered when the MCL decoder altrets to the trap handler.
      200    13009                     See G_LCP6_E and/or GHB$TRAP1 for the meaning of the value
      201    13010                     that will have been put in TRAP#.
      202    13011
      203    13012
      204    13013        */
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:7    
      205    13014
      206    13015
      207    13016
      208    13017        %EJECT;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:8    
      209    13018    1   GUD$MCLENT: ENTRY(G$TSA) ALTRET;
      210    13019
      211    13020        /* We begin by locating the FPT information in the MCL Tables
      212    13021           for the monitor service request specified via R3.
      213    13022        */
      214    13023    1      GUD_PARAMS.MCL = BINBIT(G$TSA.R3,16);
      215    13024    1      GUD_PARAMS.ALT_SPEC = G$TSA.P$->ALT_SPEC;
      216    13025
      217    13026        /*   If the user is debugging a check is made to determine if
      218    13027             this is an MCL which should go to the debugger first.  These
      219    13028             MCLs all belong to the GJ functional code group.
      220    13029        */
      221    13030    1      IF (GUD_PARAMS.MCL.C.FCG = %G_FCG_J#)
      222    13031    2      THEN DO;
      223    13032    2           I = %G_FPRG_EXIT# + GUD_PARAMS.MCL.C.MCL;
      224    13033
      225    13034    2           IF GUD_PARAMS.MCL.CODE = %G_MCL_SCREECH#
      226    13035    3           THEN DO;
      227    13036    3                IF G$JIT.PRIV.ACTIVE.SCREECH OR G$JIT.PRIV.ACTIVE.SNAP
      228    13037    3                THEN GOTO DELTAGO;
      229    13038    4                ELSE DO;
      230    13039    4                     GUD_PARAMS.ERR = ENOTAUTH;
      231    13040    4                     GOTO MCL_ERR;
      232    13041    4                     END;
      233    13042    3                END;
      234    13043
      235    13044    3           ELSE DO;
      236    13045    3                IF (G$JIT.DB# ~= 0 OR G_KEEP_USER(I))
      237    13046    3                  AND G$UHJIT.DMN.ID = %G_DMN_USR_SVC#
      238    13047    3                  AND (G$TSA.I.TRAP# = 64 - %G_MCL#)
      239    13048    3                  AND (GUD_PARAMS.MCL.CODE ~= %G_MCL_CPEXIT#)
      240    13049    4                THEN DO;
      241    13050    4   DELTAGO:          ;
      242    13051    4                     G$TSA.I.TRAP# = I;
      243    13052    4                     ALTRETURN;
      244    13053    4                     END;
      245    13054    3                END;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:9    
      246    13055    2           END;
      247    13056
      248    13057
      249    13058    1      CALL GHR$SRV;
      250    13059    1      G$TSA.Z.IS = 0;
      251    13060    1      G$JIT.CALCNT = G$JIT.CALCNT+1;
      252    13061
      253    13062    1      IF (GUD_PARAMS.MCL.C.FCG > GUD_MAXFCG) OR (GUD_PARAMS.MCL.C.FCG = 0)
      254    13063    2      THEN DO;
      255    13064    2   BAD_CODE: ;
      256    13065    2           GUD_PARAMS.ERR =EBADCODE;
      257    13066    2           GOTO MCL_ERR;
      258    13067
      259    13068    2           END;
      260    13069        /*E*   ERROR:   GUD-E$BADCODE-E
      261    13070               MESSAGE:  LCP-6 System does not provide that monitor service.
      262    13071        */
      263    13072
      264    13073    1      GUD$PTR$ = GUD_MCL_TABLE.INDEX_(GUD_PARAMS.MCL.C.FCG);
      265    13074
      266    13075    1      IF GUD_PARAMS.MCL.CODE > GUD$PTR$->FCG$INFO.C
      267    13076    1      THEN GOTO BAD_CODE;
      268    13077
      269    13078    1      LAST_MCL = GUD$PTR$->FCG$INFO.C;
      270    13079
      271    13080    1      IF GUD$PTR$->FCG$INFO.FCG_TYP = 1
      272    13081    2      THEN DO;
      273    13082    2           HAND$ = GUD$PTR$->FCG$INFO_WITH_HAND.HAND;
      274    13083    2           GUD$PTR$ = PINCRW(GUD$PTR$,SIZEW(FCG$INFO_WITH_HAND));
      275    13084    2           END;
      276    13085
      277    13086    2      ELSE DO;
      278    13087    2           HAND$ = ENTADDR(NIL);
      279    13088    2           GUD$PTR$ = PINCRW(GUD$PTR$,SIZEW(FCG$INFO));
      280    13089    2           END;
      281    13090
      282    13091    2      DO WHILE (GUD_PARAMS.MCL.CODE ~= GUD$PTR$->MCL$INFO.C);
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:10   
      283    13092    2           IF GUD$PTR$->MCL$INFO.C = LAST_MCL
      284    13093    2           THEN GOTO BAD_CODE;
      285    13094    3           ELSE DO;
      286    13095    3                IF HAND$ ~= ENTADDR(NIL)
      287    13096    3                THEN GUD$PTR$ = PINCRW(GUD$PTR$,SIZEW(MCL$INFO)
      288    13097    3                       + (GUD$PTR$->MCL$INFO.V * SIZEW(VECT$INFO) ));
      289    13098
      290    13099    3                ELSE GUD$PTR$ = PINCRW(GUD$PTR$,SIZEW(MCL$INFO_WITH_HAND)
      291    13100    3                       + (GUD$PTR$->MCL$INFO.V * SIZEW(VECT$INFO) ));
      292    13101    3                END;
      293    13102    2           END/* do while */;
      294    13103
      295    13104        %EJECT;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:11   
      296    13105
      297    13106        /* Now that we have found the right entry in the MCL Tables
      298    13107           we pull out the info we need from the MCL_INFO word and
      299    13108           adjust the pointer to point to the first VECTOR word.
      300    13109        */
      301    13110    1      NUM_VECT = GUD$PTR$->MCL$INFO.V;
      302    13111    1      IF NUM_VECT > 16
      303    13112    2      THEN DO;
      304    13113    2           CALL SCREECH(GUD_SCODE1);
      305    13114    2           END;
      306    13115        /*S*   SCREECH_CODE: GUD-S$MCL_TABLE
      307    13116               TYPE:  SUA
      308    13117               MESSAGE: Internal error in GUD_MCL_TABLE
      309    13118               REMARKS: The number of FPT parameters specified via the
      310    13119                        V option of the GUD_MCL_INFO macro is greater than
      311    13120                        the maximum allowed (16).
      312    13121        */
      313    13122    1      IF HAND$ = ENTADDR(NIL)
      314    13123    2      THEN DO;
      315    13124    2           HAND$ = GUD$PTR$->MCL$INFO_WITH_HAND.HAND;
      316    13125    2           GUD$PTR$ = PINCRW(GUD$PTR$,SIZEW(MCL$INFO_WITH_HAND));
      317    13126    2           END;
      318    13127    1      ELSE GUD$PTR$ = PINCRW(GUD$PTR$,SIZEW(MCL$INFO));
      319    13128
      320    13129
      321    13130        /* Zero out ERR and move the address of the TSA to the handler parameter.
      322    13131        */
      323    13132    1      G$JIT.ERR = '0'B;
      324    13133    1      GUD_PARAMS.ERR='0'B;
      325    13134    1      GUD_PARAMS.TSA$ = ADDR(G$TSA);
      326    13135
      327    13136
      328    13137        /* If the handler doesn't want parameters, call him now.
      329    13138        */
      330    13139    1      IF NUM_VECT = 0
      331    13140    1      THEN GOTO CALL_HANDLER;
      332    13141
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:12   
      333    13142        /* Make sure we can access the FPT before we try to decode it.
      334    13143        */
      335    13144    2      ELSE DO/* do if NUM_VECT ~= 0 */;
      336    13145    2           IF GUD_PARAMS.MCL.V# ~= 0
      337    13146    3           THEN DO;
      338    13147    3                GUD@VECTOR.BASE$ = G$TSA.B3$;
      339    13148    3                GUD@VECTOR.BND = (GUD_PARAMS.MCL.V# * 6) -1;
      340    13149    3                FPT$ = ADDR(GUD@VECTOR);
      341    13150    3                T$ = GUD$PTR$;
      342    13151    3                GUD$PTR$ = ADDR(GUD_FPT);
      343    13152
      344    13153    3                CALL CHECK_USR_MEM
      345    13154    4                WHENRETURN DO;
      346    13155    4                     FPT$ = G$TSA.B3$;
      347    13156    4                     GUD$PTR$ = T$;
      348    13157    4                     END;
      349    13158
      350    13159    4                WHENALTRETURN DO;
      351    13160    4                     GUD_PARAMS.ERR = EBADFPT;
      352    13161    4                     GOTO MCL_ERR;
      353    13162    4                     END;
      354    13163    3                END;
      355    13164
      356    13165        /*E* ERROR: GUD-E$BADFPT-E
      357    13166             MESSAGE: Your address of your FPT is bad.
      358    13167        */
      359    13168
      360    13169
      361    13170        /* If the user did not supply an FPT, but none of the parameters
      362    13171           are required anyway, call the handler passing an array of nil ptrs.
      363    13172        */
      364    13173    2           ELSE FPT$ = ADDR(NIL);
      365    13174
      366    13175    2           IF FPT$ = ADDR(NIL)
      367    13176    3           THEN DO;
      368    13177    4                DO I=0 TO NUM_VECT-1;
      369    13178    4                     IF GUD$PTR$->VECT$INFO.MAND=1
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:13   
      370    13179    5                     THEN DO;
      371    13180    5                          GUD_PARAMS.ERR = ENOFPT;
      372    13181    5                          GOTO MCL_ERR;
      373    13182    5                          END;
      374    13183
      375    13184        /*E* ERROR: GUD-E$NOFPT-E
      376    13185             MESSAGE: That monitor service requires an FPT.
      377    13186        */
      378    13187
      379    13188    5                     ELSE DO;
      380    13189    5                          GUD$PTR$ = PINCRW(GUD$PTR$,SIZEW(VECT$INFO));
      381    13190    5                          GUD_PARAMS.PTRS_ARRAY(I) = ADDR(NIL);
      382    13191    5                          GUD_PARAMS.BND_ARRAY(I) = 0; /* ??                     */
      383    13192    5                          END;
      384    13193    4                     END/* do I = 0 to NUM_VECT */;
      385    13194
      386    13195    3                GOTO CALL_HANDLER;
      387    13196    3                END/* do if FPT$ is nil */;
      388    13197
      389    13198
      390    13199        /* Where an FPT was specified on the monitor service request, we
      391    13200           must validate the vectors and build descriptors for ASDT_MCL.
      392    13201        */
      393    13202    3           ELSE DO/* if FPT$ not nil */;
      394    13203
      395    13204        /* Initialize internal pointers and counters
      396    13205        */
      397    13206    3                ASDT_MCL$ = G$ASDT_MCL$;
      398    13207    3                LPARS_USED = 0;
      399    13208    3                BPARS_USED = 0;
      400    13209    3                PARAM_DESC_USED=0;
      401    13210
      402    13211        /* For each parameter we do the following:
      403    13212        */
      404    13213    4                DO I=0 TO NUM_VECT-1;
      405    13214    4                     IF I=8
      406    13215    5                     THEN DO;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:14   
      407    13216    5                          ASDT_MCL$ = ADDR(GUD_PARAMS.DESC);
      408    13217    5                          PARAM_DESC_USED=0;
      409    13218    5                          END;
      410    13219    4                     ELSE ;
      411    13220
      412    13221
      413    13222        /*  We ALTRET to the user if the vector is nil and the parameter
      414    13223            is manditory.
      415    13224        */
      416    13225    4                     IF I+1 > GUD_PARAMS.MCL.V# THEN GOTO CHECK_MAND;
      417    13226
      418    13227    4                     IF FPT$->G$VECTOR.CBASE = '0'B
      419    13228    5                     THEN DO;
      420    13229    5   CHECK_MAND:            ;
      421    13230    5                          IF GUD$PTR$->VECT$INFO.MAND = 1
      422    13231    5                          THEN CALL SET_BAD_VECT ALTRET(MCL_ERR);
      423    13232    6                          ELSE DO;
      424    13233    6                               GUD_PARAMS.PTRS_ARRAY(I) = ADDR(NIL);
      425    13234    6                               GUD_PARAMS.BND_ARRAY(I) = 0;
      426    13235    6                               PARAM_DESC_USED = PARAM_DESC_USED +1;
      427    13236    6                               END;
      428    13237    5                          END/* DO for nil FPT vector */;
      429    13238
      430    13239        /*   The vector is checked to make sure we have access to the data
      431    13240             framed by the vector and the size is adequate.
      432    13241        */
      433    13242    5                     ELSE DO;
      434    13243    5                          CALL CHECK_USR_MEM ALTRET(MCL_ERR);
      435    13244
      436    13245        /*   If mapping parameters 9 through 16, the internal pointers and
      437    13246             counters are set to store a descriptor in GUD_PARAMS for the
      438    13247             handler.
      439    13248        */
      440    13249    5                          IF I > 7
      441    13250    6                          THEN DO;
      442    13251    6                               ASDT_MCL_INDX = PARAM_DESC_USED;
      443    13252    6                               PARAM_DESC_USED = PARAM_DESC_USED+1;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:15   
      444    13253
      445    13254    6                               GUD_PARAMS.PTRS_ARRAY(I) = ADDR(NIL);
      446    13255    6                               END;
      447    13256
      448    13257
      449    13258        /*  If the table indicates that the parameter is little, but we have
      450    13259            already used all the available descriptor slots for little parameters,
      451    13260            we will attempt to map the user's parameter in one of the BPARs.
      452    13261        */
      453    13262    6                          ELSE DO;
      454    13263    6                               IF GUD$PTR$->VECT$INFO.TYP = 0
      455    13264    7                               THEN DO;
      456    13265    7                                    IF LPARS_USED = 6
      457    13266    7                                    THEN GOTO USE_BPARS;
      458    13267
      459    13268        /*  Otherwise, we build an index into the ASDT_MCL for the next
      460    13269            available little parameter descriptor.
      461    13270        */
      462    13271    7                                    ASDT_MCL_INDX = LPARS_USED +%GM_LPAR1#;
      463    13272    7                                    LPARS_USED = LPARS_USED+1;
      464    13273
      465    13274        /*  We initialize the internal pointer to the virtual address of the
      466    13275            segment we have just selected to use for this parameter.
      467    13276        */
      468    13277    7                                    GUD_PARAMS.PTRS_UBIN(I) = (ASDT_MCL_INDX ) * (1024
             13277                                             * 4);
      469    13278    7                                    END/* do if little parameter*/;
      470    13279
      471    13280        /*  If mapping one of the first 7 parameters, and we are out of ASDT_MCL slots
      472    13281            it is an error with the table as defined by the %FPT and %VECT macros.
      473    13282            We ignore this system error, and ALTRET to the user.
      474    13283        */
      475    13284    7                               ELSE DO;
      476    13285    7   USE_BPARS:                       ;
      477    13286    7                                    IF BPARS_USED = 2
      478    13287    7                                    THEN CALL SET_BAD_VECT ALTRET(MCL_ERR);
      479    13288
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:16   
      480    13289    7                                    ASDT_MCL_INDX = BPARS_USED +%GM_BPAR1#;
      481    13290    7                                    BPARS_USED = BPARS_USED+1;
      482    13291
      483    13292    7                                    GUD_PARAMS.PTRS_UBIN(I) = (ASDT_MCL_INDX -15) * (
             13292                                             1024 * 64);
      484    13293    7                                    END/* do if big parameter*/;
      485    13294    6                               END/* do if not 7 through 16 */;
      486    13295
      487    13296
      488    13297        /*  We also compute the difference between the virtual base address
      489    13298            of that segment and the address of the first word of that parameter.
      490    13299            BLOCK_INDEX is then set to indicate this offset in number of 256
      491    13300            word blocks.
      492    13301        */
      493    13302    5                          USR_OFFSET = FPT$->G$VECTOR.CBASE.ADDRS - USR_VBASE;
      494    13303    5                          BLOCK_INDEX = USR_OFFSET / 256;
      495    13304
      496    13305        /*   Next, we copy the descriptor from the user base level ASDT into
      497    13306             the ASDT we are to use for this interrupt level MCL processing.
      498    13307        */
      499    13308                               %LOCK (G=GM_MEATLOCK);
      500    13315
      501    13316    5                          ASDT_MCL$->ASDT.DESC(ASDT_MCL_INDX) =
      502    13317    5                            G$ASDT_USR$->ASDT.DESC(ASDT_USR_INDX);
      503    13318
      504    13319        /*  The base address of the copied segment descriptor is now adjusted
      505    13320            by the BLOCK_INDEX computed above.
      506    13321        */
      507    13322    5                          IF (I <= 7)
      508    13323    6                          THEN DO;
      509    13324    6                               ASDT_MCL$->ASDT.DESC.BASE(ASDT_MCL_INDX) =
      510    13325    6                                 G$ASDT_USR$->ASDT.DESC.BASE(ASDT_USR_INDX) +
             13325                                          BLOCK_INDEX;
      511    13326    6                               END;
      512    13327
      513    13328    6                          ELSE DO;
      514    13329    6                               ASDT_MCL$->ASDT.DESC.BASE(ASDT_MCL_INDX) = BLOCK_INDEX;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:17   
      515    13330    6                               GUD_PARAMS.ASDT_USR_INDX(ASDT_MCL_INDX) = ASDT_USR_INDX;
      516    13331    6                               END;
      517    13332
      518    13333                               %UNLOCK (G=GM_MEATLOCK);
      519    13340
      520    13341        /*  The offset from the base of this segment is then computed and
      521    13342            added to the virtual address we have stowed away in our internal
      522    13343            pointer.
      523    13344        */
      524    13345    5                          MCL_OFFSET = USR_OFFSET - (256 * BLOCK_INDEX);
      525    13346    5                          GUD_PARAMS.PTRS_UBIN(I) = GUD_PARAMS.PTRS_UBIN(I) +
             13346                                   MCL_OFFSET;
      526    13347
      527    13348        /*   If the user passed a CPTR, pass a CPTR to the MCL handler.
      528    13349        */
      529    13350    5                          T$ = ADDR(GUD_PARAMS.PTRS_UBIN(I));
      530    13351    5                          T$->G$CPTR.C = FPT$->G$VECTOR.CBASE.C;
      531    13352
      532    13353        /*   The size of this segment we are creating is set to the number
      533    13354             of 256 word block encompassed by the user specified byte size.
      534    13355        */
      535    13356    5                          LAST_SEG_BYTE = FPT$->G$VECTOR.BND
      536    13357    5                            + BITBIN(FPT$->G$VECTOR.CBASE.C);
      537    13358
      538    13359    5                          ASDT_MCL$->ASDT.DESC.SIZE(ASDT_MCL_INDX)
      539    13360    5                            = ( (LAST_SEG_BYTE /2) + MCL_OFFSET) / 256;
      540    13361
      541    13362        /*  The byte size as specified in the user FPT is stowed away in the
      542    13363            MCL handler's internal sizes table.
      543    13364        */
      544    13365    5                          GUD_PARAMS.BND_ARRAY(I) = FPT$->G$VECTOR.BND;
      545    13366
      546    13367    5                          END/* DO if Vector not null*/;
      547    13368
      548    13369        /*  The munging of this vector is complete, so the pointer to
      549    13370            the data within the MCL table is bumped to point to the next one
      550    13371            and the pointer to the FPT vectors is also bumped.
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:18   
      551    13372        */
      552    13373
      553    13374    4                     GUD$PTR$ = PINCRW(GUD$PTR$,SIZEW(VECT$INFO));
      554    13375    4                     FPT$ = PINCRW(FPT$,SIZEW(G$VECTOR));
      555    13376    4                     END/* DO I =0 to NUM_VECT-1 */;
      556    13377
      557    13378        /*  ASV$ in the Interrupt Save Area is set to the address of ASDT_MCL,
      558    13379            and the descriptors in ASDT_MCL are activated.
      559    13380        */
      560    13381    3   CALL_HANDLER: ;
      561    13382    3                CALL GUD$ASD(G$ASDT_MCL$->ASDT);
      562    13383
      563    13384    3                CALL HAND$(GUD_PARAMS);
      564    13385    3                END/* do if FPT$ not nil*/;
      565    13386
      566    13387    2           END/* do if NUM_VECT ~= 0*/;
      567    13388
      568    13389        /*  If returning from the memory management MCL handler, the ASDT_MCL
      569    13390            descriptors are reloaded.
      570    13391            This shouldn't be necessary, but . . . see star 26460.
      571    13392        */
      572    13393    1      IF GUD_PARAMS.MCL.C.FCG ~= %G_FCG_M#
      573    13394    1      THEN GOTO MCL_EXIT;
      574    13395
      575    13396        %EJECT;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:19   
      576    13397
      577    13398        /*  Since GUD$ASD has not been called, we are still mapped with
      578    13399            ASDT_USR.  The GUD$ASD routine is called to set ISA.ASV$ to
      579    13400            the address of ASDT_MCL and activate the ASDT_MCL descriptors.
      580    13401        */
      581    13402    1   MCL_ERR: ;
      582    13403    1      CALL GUD$ASD(G$ASDT_MCL$->ASDT);
      583    13404    1      GOTO MCL_EXIT;
      584    13405
      585    13406        %EJECT;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:20   
      586    13407
      587    13408    1   MCL_EXIT: ;
      588    13409
      589    13410        /*  If BACKP$ is set, simply point the Program Counter in the TSA
      590    13411            back to the MCL instruction and exit.
      591    13412        */
      592    13413    1      IF (G$JIT.JUNK.BACKP$)
      593    13414    2      THEN DO;
      594    13415    2           G$JIT.JUNK.BACKP$ = '0'B;
      595    13416    2           G$TSA.P = G$TSA.P -1;
      596    13417    2           GOTO MCL_END;
      597    13418    2           END;
      598    13419
      599    13420        /*  If there was no error, simply bump P$ past the ALTRET
      600    13421            specification and return to the trap handler.
      601    13422        */
      602    13423    1      IF GUD_PARAMS.ERR.ERR# = 0
      603    13424    2      THEN DO;
      604    13425    2   IGNORE_ERR: ;
      605    13426    2           G$TSA.P = G$TSA.P +1;
      606    13427    2           END/* DO if no error */;
      607    13428
      608    13429        /*   Check the error code for E$ALTRET, which is an internal error
      609    13430             code used to signal an ALTRET to the trap handler.  If this
      610    13431             code is set, the MCL handler must have the full TSA set as
      611    13432             required to return to the user properly.
      612    13433        */
      613    13434    2      ELSE DO;
      614    13435    2           IF GUD_PARAMS.ERR.ERR# ~= %E$ALTRET
      615    13436    3           THEN DO;
      616    13437
      617    13438        /*  If there is no ALTRET specified and the severity of the error
      618    13439            is zero, treat it as if there were no error; i.e. return to
      619    13440            the user.
      620    13441        */
      621    13442    3                IF GUD_PARAMS.ALT_SPEC = 0
      622    13443    4                THEN DO;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:21   
      623    13444    4                     IF GUD_PARAMS.ERR.SEV = 0
      624    13445    4                     THEN GOTO IGNORE_ERR;
      625    13446
      626    13447        /*  When there is no ALTRET specified and the severity of the error
      627    13448            is non-zero, the user's MCL Trap Routine (if any) will be entered.
      628    13449            If no ALTRET and no trap handler the error conditions are reported
      629    13450            in the JIT and the TRAP# in the TSA is set to XCON.  Return to
      630    13451            the trap handler will cause an associated debugger to be entered.
      631    13452            GJS$ABORTM will be entered via GHB$TRAP1 if there is no debugger
      632    13453            or if the user says 'GOTRAP'.
      633    13454        */
      634    13455    5                     ELSE DO;
      635    13456    5                          IF G$UHJIT.DMN.ID = %G_DMN_DB_SVC#
      636    13457    5                          THEN GUD$ECCB$ = G$ROS$->G$ROS.DB_ECCB$;
      637    13458    5                          ELSE GUD$ECCB$ = G$ROS$->G$ROS.U_ECCB$;
      638    13459
      639    13460    5                          IF GUD$ECCB$->G$ECCB.TRAP$ = ENTADDR(NIL)
      640    13461    5                            OR GUD$ECCB$->G$ECCB.FLTFLGS(%G_MCL#) ='0'B
      641    13462    6                          THEN DO;
      642    13463    6                               IF (G$JIT.DB# ~= 0) THEN GOTO ENTER_FD;
      643    13464    6   TCB_FULL:                   ;
      644    13465    6                               G$JIT.ERR = GUD_PARAMS.ERR;
      645    13466    6                               G$JIT.RNST = (G$JIT.RNST | %G_RS_ABRT#);
      646    13467    6                               G$TSA.P$ = PINCRW(G$TSA.P$,-1);
      647    13468    6                               G$TSA.I.TRAP# = %G_FPRG_XCON#;
      648    13469    6                               GOTO MAP_AND_ALT;
      649    13470    6                               END;
      650    13471
      651    13472    5   ENTER_FD:              ;
      652    13473    5                          ENVTCB_PARAMS.ECC = %G_TRAP#;
      653    13474    5                          IF G$JIT.DB# = 0
      654    13475    5                          THEN ENVTCB_PARAMS.P$$ = GUD$ECCB$->G$ECCB.TRAP$;
      655    13476    5                          ELSE ENVTCB_PARAMS.P$ = PINCRW(G$TSA.P$,-1);
      656    13477    5                          ENVTCB_PARAMS.ECINFO.TRAP = G$TSA.I;
      657    13478    5                          ENVTCB_PARAMS.ECINFO.TRAP.TRAP# = %G_MCL#;
      658    13479    5                          G$TSA.I.TRAP# = %G_FPRG_MCLTRAP#;
      659    13480    5                          END;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:22   
      660    13481    4                     END;
      661    13482
      662    13483        /*  Of course, if there is an ALTRET routine specified, thats
      663    13484            the place to return to now.
      664    13485        */
      665    13486    4                ELSE DO /* if there is an ALTRET */;
      666    13487    4                     IF G$UHJIT.DMN.ID = %G_DMN_DB_SVC#
      667    13488    5                     THEN DO;
      668    13489    5                          G$JIT.FD_P$ = G$TSA.P$;
      669    13490    5                          G$JIT.FD_ALTERR = GUD_PARAMS.ERR;
      670    13491    5                          G$TSA.P$ = PINCRW(G$TSA.P$,GUD_PARAMS.ALT_SPEC);
      671    13492    5                          GOTO MCL_END;
      672    13493    5                          END;
      673    13494
      674    13495    4                     ENVTCB_PARAMS.ECC= %G_ALT#;
      675    13496    4                     ENVTCB_PARAMS.P$ = PINCRW(G$TSA.P$,GUD_PARAMS.ALT_SPEC);
      676    13497    4                     ENVTCB_PARAMS.ECINFO.MCL_CODE = BINBIT(G$TSA.R3,16);
      677    13498    4                     END/* DO if ALTRET specified*/;
      678    13499
      679    13500        /*   Reset P$ in the TSA to point to the faulty MCL.
      680    13501        */
      681    13502    3                G$TSA.P$ = PINCRW(G$TSA.P$,-1);
      682    13503
      683    13504        /*  Set up the information to be moved to the user's TCB
      684    13505        */
      685    13506    3                ENVTCB_PARAMS.ENV$ = ADDR(G$TSA);
      686    13507    3                ENVTCB_PARAMS.TCB$ = ADDR(NIL);
      687    13508    3                ENVTCB_PARAMS.ENVTYPE = %GUE_ENVTCB_TSA#;
      688    13509    3                IF (GUD_PARAMS.MCL.C.FCG = %G_FCG_F#)
      689    13510    3                  AND (GUD_PARAMS.ERR.ERR# ~= %E$BADVECT0)
      690    13511    3                  AND (GUD_PARAMS.PTRS.PAR1$ ~= ADDR(NIL) )
      691    13512    3                THEN ENVTCB_PARAMS.ECINFO.EVID = GUD_PARAMS.PTRS.PAR1$->DCB#;
      692    13513    3                ELSE ENVTCB_PARAMS.ECINFO.EVID = 0;
      693    13514    3                ENVTCB_PARAMS.ECINFO.ERR = GUD_PARAMS.ERR;
      694    13515    3                ENVTCB_PARAMS.ECINFO.P# = 0;
      695    13516    3                ENVTCB_PARAMS.MOREINFO$ = ADDR(NIL);
      696    13517
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:23   
      697    13518    3                CALL GUE$ENVTCB(ENVTCB_PARAMS) ALTRET(TCB_FULL);
      698    13519
      699    13520    3                IF G$TSA.I.TRAP# = %G_FPRG_MCLTRAP#
      700    13521    3                THEN GOTO MAP_AND_ALT;
      701    13522
      702    13523    3                IF G$TSA.ISA.REGS.M1.J
      703    13524    4                THEN DO;
      704    13525    4                     G$TSA.I.TRAP# = %G_TRACE#;
      705    13526    4                     GOTO MAP_AND_ALT;
      706    13527    4                     END;
      707    13528    3                END/* DO if error ~ ALTRET*/;
      708    13529
      709    13530    2           END/* DO if error ~ zero*/;
      710    13531
      711    13532        /*   If the ALIBFD bit has been set in the user table, call
      712    13533             the GUD$GET_DB routine to associate the debugger or
      713    13534             simply reset the TRAP# field in the TSA to %G_HOST_INT#.
      714    13535             The ISA area of the TSA for this MCL is modified so that
      715    13536             the trap handler will have a valid full TSA.  The user's
      716    13537             ASDT is then re-activated and an ALTRET to the trap handler
      717    13538             will cause the user's debugger to be entered.
      718    13539        */
      719    13540    1   MCL_END: ;
      720    13541    1      IF (G$MHJIT.CU$->G$U.ASYNCH & %U_ALIBFD)
      721    13542    1        AND (G$UHJIT.DMN.ID=%G_DMN_USR_SVC#  OR    G$JIT.JUNK.RTNFID)
      722    13543    2      THEN DO;
      723    13544    2           CALL GJU$GET_DB;
      724    13545    2           IF G$UHJIT.DMN.ID~=%G_DMN_USR_SVC# THEN EXIT;
      725    13546    2           G$TSA.ISA.ASV$ = G$UHJIT.ISA_USR.ASV$;
      726    13547    2           G$TSA.ISA.ISM1 = G$UHJIT.ISA_USR.ISM1;
      727    13548    2           G$TSA.ISA.ISM2 = G$UHJIT.ISA_USR.ISM2;
      728    13549    2   MAP_AND_ALT: ;
      729    13550    2           CALL GUD$ASD(G$ASDT_USR$->ASDT);
      730    13551    2           ALTRETURN;
      731    13552    2           END;
      732    13553
      733    13554        /*  Check for quantum end and async abort conditions.
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:24   
      734    13555            If we are to abort this user, GHQ$QEND will set TSA.TRAP# to XCON.
      735    13556        */
      736    13557    1      G$TSA.I.TRAP# = 0;
      737    13558    1      IF NOT(G$JIT.JUNK.STEP)
      738    13559    2      THEN DO;
      739    13560    2   TSTQEND: CALL GHQ$MCLEND
      740    13561
      741    13562    3           WHENALTRETURN DO;
      742    13563    3   QEND:        CALL GHH$LEV (GH_LEV_SCHD); /* Trigger Scheduler to park         */
      743    13564    3                GOTO TSTQEND;              /* Test again after park              */
      744    13565    3                END;
      745    13566    2           END/*not step*/;
      746    13567
      747    13568        /*  Now, switch the ASV$ back and re-activate the descriptors in ASDT_USR.
      748    13569        */
      749    13570    1      CALL GUD$ASD(G$ASDT_USR$->ASDT);
      750    13571
      751    13572        /*   If this is the special return ALTRET to the trap handler to
      752    13573             cause a full environment to be loaded from the TSA.  Otherwise
      753    13574             simply RETURN to cause the trap handler to RTT.
      754    13575        */
      755    13576    1      IF (GUD_PARAMS.ERR.ERR# = %E$ALTRET) OR (G$TSA.I.TRAP# ~= 0)
      756    13577    1      THEN ALTRETURN;
      757    13578    1      ELSE RETURN;
      758    13579
      759    13580        %EJECT;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:25   
      760    13581        /*I* NAME: CHECK_USR_MEM
      761    13582
      762    13583             PURPOSE: To verify that the monitor can access the FPT and
      763    13584                      then data framed by each vector within the FPT.
      764    13585
      765    13586             CALL:  CALL CHECK_USR_MEM(INFO$) ALTRET(label)
      766    13587
      767    13588             INPUT: GUD$PTR$ = address of the specific GUD_VECT_INFO
      768    13589                    FPT$ = address of the vector to be checked.
      769    13590
      770    13591             OUTPUT: ASDT_USR_INDX = index into the user ASDT for the vector
      771    13592                     USR_VBASE = word address of the base of the segment
      772    13593                                 specified by USR_VBASE
      773    13594        */
      774    13595    1   CHECK_USR_MEM: PROC ALTRET;
      775    13596
      776    13597        /* ALTRET if the pointer isn't reasonable.
      777    13598        */
      778    13599    2      IF FPT$->G$VECTOR.CBASE.MBZ ~= 0
      779    13600    2      THEN GOTO BAD_VECT;
      780    13601
      781    13602        /*  We will also ALTRET if the MCL handler expects a word boundry
      782    13603            and the user has passed a CPTR for the parameter.
      783    13604        */
      784    13605    2      IF GUD$PTR$->VECT$INFO.ALIGN = 0
      785    13606    2        AND FPT$->G$VECTOR.CBASE.C ='1'B
      786    13607    2      THEN GOTO BAD_VECT;
      787    13608
      788    13609        /*  And if the byte size specified in the vector is less than that
      789    13610            specified as the minimum size in the %VECT macro, we ALTRET.
      790    13611        */
      791    13612    2      IF GUD$PTR$->VECT$INFO.BND > FPT$->G$VECTOR.BND
      792    13613    2      THEN GOTO BAD_VECT;
      793    13614
      794    13615        /*  If the table indicates that the parameter is little, but the user
      795    13616            is trying to pass us a big one, it is an error.
      796    13617        */
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:26   
      797    13618    2      IF (GUD$PTR$->VECT$INFO.TYP = 0)
      798    13619    2        AND (FPT$->G$VECTOR.BND > (1024 * 4) )
      799    13620    2      THEN GOTO BAD_VECT;
      800    13621
      801    13622        /*  Now, based on the address the user has specified in this vector,
      802    13623            we set up an index into the user's base level ASDT and compute
      803    13624            the virtual base address of that segment.
      804    13625        */
      805    13626    2      IF FPT$->G$VECTOR.CBASE.ADDRS >= %GM_SEG0100_BASE
      806    13627    3      THEN DO;
      807    13628    3           ASDT_USR_INDX = (FPT$->G$VECTOR.CBASE.ADDRS / (1024 * 64)) +15;
      808    13629    3           USR_VBASE = (ASDT_USR_INDX -15) * (1024 * 64);
      809    13630    3           END;
      810    13631    3      ELSE DO;
      811    13632    3           ASDT_USR_INDX = FPT$->G$VECTOR.CBASE.ADDRS / (1024 * 4);
      812    13633    3           USR_VBASE = (ASDT_USR_INDX) * (1024 * 4);
      813    13634    3           END;
      814    13635
      815    13636        /* Verify that the access is adequate.
      816    13637        */
      817    13638    2      IF G$ASDT_USR$->ASDT.DESC.V(ASDT_USR_INDX)  = '0'B
      818    13639    2      THEN GOTO BAD_VECT;
      819    13640
      820    13641        /*N* The following BITBINs can go away if PL-6 is updated to not
      821    13642             generate the call to X6B_BCM.
      822    13643        */
      823    13644    2      IF GUD$PTR$->VECT$INFO.WRT = 1
      824    13645    3      THEN DO;
      825    13646    3           IF BITBIN(G$ASDT_USR$->ASDT.DESC.WP(ASDT_USR_INDX)) > BITBIN(G$TSA.S.RING)
      826    13647    3           THEN GOTO BAD_VECT;
      827    13648    3           END;
      828    13649    3      ELSE DO;
      829    13650    3           IF BITBIN(G$ASDT_USR$->ASDT.DESC.RP(ASDT_USR_INDX)) > BITBIN(G$TSA.S.RING)
      830    13651    3           THEN GOTO BAD_VECT;
      831    13652    3           END;
      832    13653
      833    13654        /* Make sure that the vector frames data within one single segment.
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:27   
      834    13655        */
      835    13656    2      LAST_FPT_BYTE = FPT$->G$VECTOR.CBASE.ADDRS
      836    13657    2        + (FPT$->G$VECTOR.BND + 1) /2;
      837    13658
      838    13659    2      LAST_SEG_BYTE = USR_VBASE
      839    13660    2        + ( (G$ASDT_USR$->ASDT.DESC.SIZE(ASDT_USR_INDX)+1) * 256);
      840    13661
      841    13662    2      IF LAST_FPT_BYTE > LAST_SEG_BYTE
      842    13663    3      THEN DO;
      843    13664    3           GUD_PARAMS.ERR = EBADSEGSPAN;
      844    13665    3           ALTRETURN;
      845    13666    3           END;
      846    13667
      847    13668        /*E*   ERROR:   GUD-E$BADSEGSPAN-E
      848    13669               MESSAGE:  FPT vector spans a segment.
      849    13670               DESCRIPTION:  Could be an FEPLINK problem.
      850    13671        */
      851    13672    2      RETURN;
      852    13673
      853    13674    2   SET_BAD_VECT: ENTRY ALTRET;
      854    13675    2   BAD_VECT: ;
      855    13676    2      GUD_PARAMS.ERR = EBADVECT;
      856    13677    2      GUD_PARAMS.ERR.ERR# = GUD_PARAMS.ERR.ERR# +I;
      857    13678    2      ALTRETURN;
      858    13679
      859    13680    2   END CHECK_USR_MEM;
      860    13681    1   END GUD$MCL_HAND;
      861    13682        %EOD;

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:28   
--  Include file information  --

   UD_SCODE_C.:E05TOU  is referenced.
   UD_ERRORS_C.:E05TOU  is referenced.
   GM_VIRTUAL_E.:E05TOU  is referenced.
   GH_SCHD_E.:E05TOU  is referenced.
   GU_MACROS_M.:E05TOU  is referenced.
   GH_GATE_M.:E05TOU  cannot be made into a system file and is referenced.
   G_ROS_M.:E05TOU  is referenced.
   GH_SCHD_M.:E05TOU  is referenced.
   G_HJIT_M.:E05TOU  is referenced.
   G_JIT_M.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GUD$MCL_HAND.

   Procedure GUD$MCL_HAND requires 1342 words for executable code.
   Procedure GUD$MCL_HAND requires 140 words of local(AUTO) storage.

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:29   

 Object Unit name= GUD$MCL_HAND                               File name= GUD$MCL_HAND.:E05TOU
 UTS= JUL 29 '97 22:14:21.44 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0  RoData even  UTS     19     13  GUD$MCL_HAND
    1   Proc  even  none  1342    53E  GUD$MCL_HAND
    2  RoData even  none     8      8  GUD$MCL_HAND

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        1  GUD$MCL_HAND
     1      7          yes     yes      Std        1  GUD$MCLENT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 GHR$SRV
         yes           Std       1 SCREECH
 yes     yes           Std       1 GHH$UNLOCK
 yes     yes           Std       1 GHH$LOCK
         yes           Std       1 GUD$ASD
 yes     yes           Std       1 GUE$ENVTCB
         yes           Std       1 GHH$LEV
 yes     yes           Std       0 GJU$GET_DB
 yes     yes           Std       0 GHQ$MCLEND
                       nStd      0 X6A_AUTO_1
                       nStd      0 X6A_AALT
                       nStd      0 X6A_ARET
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:30   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     GUD_MAXFCG                            GUD_MCL_TABLE                    r    G$ROS$
r    G$ASDT_USR$                      r    G$ASDT_MCL$                      r    G$MHJIT$
r    G$UHJIT$                              G_KEEP_USER                           GM_MEATLOCK
     GH_LEV_SCHD                      r    G$ROS$
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:31   


        1        1        /*M* GUD$MCL_HAND  LCP-6 Monitor Services Decoder                 */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ENU=0,ECU=0     */
        8        8
        9        9        GUD$MCL_HAND: PROC(G$TSA) ALTRET;

      9   1 000000  D380 0000 0000  xent GUD$MCL_HAND    LNJ,B5   X6A_AUTO_1
          1 000003       008C 0001                       DC       140,1
          1 000005  0F81 0006                            B        s:13023,PREL

       10       10
       11       11        %INCLUDE G_JIT_M;
       12      276        %INCLUDE G_HJIT_M;
       13      421        %INCLUDE GH_SCHD_M;
       14      565 S      %INCLUDE GH_LCP6_M;
       15      566 S      %INCLUDE GJ_LCP6_M;
       16      567 S      %INCLUDE GU_LCP6_M;
       17      568        %INCLUDE G_ROS_M;
       18      650        %INCLUDE GH_GATE_M;
       19      691        %INCLUDE GU_MACROS_M;
       20      850
       21      851                                                /* Input parameters                   */
       22      852        %G$TSA (STCLASS= );
       23     1240
       24     1241
       25     1242
       26     1243                                                /* AUTO Storage                       */
       27     1244    1   DCL GUD$PTR$ PTR;
       28     1245    1   DCL GUD$ECCB$ PTR;
       29     1246    1   DCL LAST_MCL SBIN;
       30     1247    1   DCL NUM_VECT SBIN;
       31     1248    1   DCL HAND$ EPTR;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:32   
       32     1249    1   DCL ASDT_MCL$ PTR;
       33     1250    1   DCL FPT$ PTR;
       34     1251    1   DCL T$ PTR;
       35     1252    1   DCL I SBIN;
       36     1253    1   DCL ASDT_USR_INDX SBIN;
       37     1254    1   DCL ASDT_MCL_INDX SBIN;
       38     1255    1   DCL LAST_SEG_BYTE UBIN(32);
       39     1256    1   DCL LAST_FPT_BYTE UBIN(32);
       40     1257    1   DCL LPARS_USED SBIN;
       41     1258    1   DCL BPARS_USED SBIN;
       42     1259    1   DCL PARAM_DESC_USED SBIN;
       43     1260    1   DCL USR_VBASE UBIN(32);
       44     1261    1   DCL USR_OFFSET SBIN(32);
       45     1262    1   DCL MCL_OFFSET SBIN(32);
       46     1263    1   DCL BLOCK_INDEX SBIN;
       47     1264        %GUD$VECTOR (FPTN=GUD@VECTOR,STCLASS=AUTO);
       48     1268
       49     1269                                                /* Parameters for the MCL handler     */
       50     1270        %GUD_HAND_PARAMS (FPTN=GUD_PARAMS,STCLASS=AUTO);
       51     1346
       52     1347                                                /* Parameters for GUE$ENVTCB          */
       53     1348        %GUE_ENVTCB_PARAMS (FPTN=ENVTCB_PARAMS,STCLASS=AUTO);
       54     1473
       55     1474
       56     1475
       57     1476                                                /* Internal data                      */
       58     1477        %GUD_VECT_INFO (FPTN=GUD_FPT,
       59     1478                        STCLASS=CONSTANT,
       60     1479                        MAND=YES,
       61     1480                        LVL=1,
       62     1481                        LAST=YES);
       63     1501
       64     1502        %G$SEGDESC (FPTN=G_NULL_DESC,
       65     1503                    STCLASS=CONSTANT,
       66     1504                    RP=G_R_MON#,
       67     1505                    WP=G_R_MON#);
       68     1527
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:33   
       69     1528                                                /* External data                      */
       70     1529
       71     1530    1   DCL GUD_MAXFCG SBIN SYMREF;
       72     1531
       73     1532    1   DCL 1 GUD_MCL_TABLE SYMREF WALIGNED,
       74     1533    1         2 INDEX_(0:0) PTR;
       75     1534
       76     1535    1   DCL G$ROS$ PTR SYMREF READONLY;
       77     1536    1   DCL G$ASDT_USR$ PTR SYMREF READONLY;
       78     1537    1   DCL G$ASDT_MCL$ PTR SYMREF READONLY;
       79     1538    1   DCL G$MHJIT$ PTR SYMREF READONLY;
       80     1539    1   DCL G$UHJIT$ PTR SYMREF READONLY;
       81     1540
       82     1541    1   DCL G_KEEP_USER(0:63) BIT(1) UNAL SYMREF;
       83     1542        %GATE (FPTN=GM_MEATLOCK,STCLASS=SYMREF);
       84     1561    1   DCL GH_LEV_SCHD UBIN SYMREF;
       85     1562
       86     1563                                                /* Based Structures                   */
       87     1564        %GUD_FCG_INFO (FPTN=FCG$INFO,STCLASS=BASED,LVL=1,LAST=YES);
       88     1596
       89     1597
       90     1598        %GUD_FCG_INFO (FPTN=FCG$INFO_WITH_HAND,STCLASS=BASED,LVL=1,LAST=YES,HAND=ANY);
       91     1630
       92     1631
       93     1632        %GUD_MCL_INFO (FPTN=MCL$INFO,STCLASS=BASED,LVL=1,LAST=YES);
       94     1665
       95     1666
       96     1667        %GUD_MCL_INFO (FPTN=MCL$INFO_WITH_HAND,STCLASS=BASED,LVL=1,LAST=YES,HAND=ANY);
       97     1700
       98     1701
       99     1702
      100     1703        %GUD_VECT_INFO (FPTN=VECT$INFO,LVL=1,STCLASS=BASED,LAST=YES);
      101     1723
      102     1724        %GUD$VECTOR (FPTN=G$VECTOR,STCLASS=BASED);
      103     1728
      104     1729    1   DCL 1 G$CPTR BASED WALIGNED,
      105     1730    1         2 C BIT(1) UNAL,
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:34   
      106     1731    1         2 MBZ UBIN(11) UNAL,
      107     1732    1         2 ADDRS UBIN(20) UNAL;
      108     1733
      109     1734    1   DCL 1 ASDT(0:30) BASED WALIGNED,
      110     1735           %G$SEGDESC (FPTN=DESC,LVL=2,LAST=YES);
      111     1757
      112     1758
      113     1759        %G$SEGDESC;
      114     1781
      115     1782        %G$JIT;
      116     2196        %G$ROS;
      117     2240        %G$ECCB;
      118     2316        %G$USER (FPTN=G$U);
      119     2327        %G$MHJIT (STCLASS="BASED(G$MHJIT$)");
      120     9201        %G$UHJIT (STCLASS="BASED(G$UHJIT$)");
      121    12175
      122    12176    1   DCL ALT_SPEC SBIN WORD BASED;
      123    12177    1   DCL DCB# UBIN BYTE WALIGNED BASED;
      124    12178
      125    12179
      126    12180                                                /* External Procedures                */
      127    12181
      128    12182    1   DCL GUD$ASD ENTRY(1);
      129    12183    1   DCL GUE$ENVTCB ENTRY(1) ALTRET;
      130    12184    1   DCL GJU$GET_DB ENTRY ALTRET;
      131    12185    1   DCL GHQ$MCLEND ENTRY ALTRET;
      132    12186    1   DCL GHR$SRV ENTRY;
      133    12187    1   DCL GHH$LEV ENTRY(1);
      134    12188    1   DCL SCREECH ENTRY(1);
      135    12189
      136    12190
      137    12191                                                /* EQUs                               */
      138    12192        %G$JIT_E;
      139    12254 S      %INCLUDE G_LCP6_E;
      140    12255        %INCLUDE GH_SCHD_E;
      141    12351        %INCLUDE GM_VIRTUAL_E;
      142    12561        %GJ_MCL_E;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:35   
      143    12570
      144    12571        %SUB G$JIT = G$ROS$->G$ROS.JIT$->G$JIT;
      145    12572
      146    12573
      147    12574        %EJECT;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:36   
      148    12575
      149    12576        %INCLUDE UD_ERRORS_C;
      150    12618        %INCLUDE UD_SCODE_C;
      151    12630
      152    12631        %VLP_ERRCODE (FPTN=EBADCODE,ERR#=%E$BADCODE,SEV=G_SEV_ERROR#,
      153    12632                            STCLASS=CONSTANT,FCG=GU,MID=D,MON='1'B);
      154    12678        %VLP_ERRCODE (FPTN=EBADFPT,ERR#=%E$BADFPT,SEV=G_SEV_ERROR#,
      155    12679                            STCLASS=CONSTANT,FCG=GU,MID=D,MON='1'B);
      156    12725        %VLP_ERRCODE (FPTN=ENOFPT,ERR#=%E$NOFPT,SEV=G_SEV_ERROR#,
      157    12726                            STCLASS=CONSTANT,FCG=GU,MID=D,MON='1'B);
      158    12772        %VLP_ERRCODE (FPTN=EBADVECT,ERR#=%E$BADVECT0,SEV=G_SEV_ERROR#,
      159    12773                            STCLASS=CONSTANT,FCG=GU,MID=D,MON='1'B);
      160    12819        %VLP_ERRCODE (FPTN=EBADSEGSPAN,ERR#=%E$BADSEGSPAN,SEV=G_SEV_ERROR#,
      161    12820                            STCLASS=CONSTANT,FCG=GU,MID=D,MON='1'B);
      162    12866        %VLP_ERRCODE (FPTN=ENOTAUTH,ERR#=%E$NOTAUTH,SEV=G_SEV_ERROR#,
      163    12867                            STCLASS=CONSTANT,FCG=GU,MID=D,MON='1'B);
      164    12913
      165    12914        %VLP_SCODE (FPTN=GUD_SCODE1,ERR#=%S$MCL_TABLE,SEV=6,
      166    12915                    STCLASS=CONSTANT,FCG=GU,MID=D,MON='1'B);
      167    12976        %EJECT;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:37   
      168    12977
      169    12978        /*F* NAME:   GUD$MCLENT
      170    12979             PURPOSE: To decode the user's MCL parameters and call the
      171    12980                      appropriate LCP-6 MCL handler.
      172    12981                      To provide for normal and error return to the user
      173    12982                      following MCL processing.
      174    12983        */
      175    12984
      176    12985        /*D* NAME:  GUD$MCL_ENT
      177    12986
      178    12987             INPUT:  G$TSA.  The Trap Save Area containing the MCL trap environment.
      179    12988
      180    12989             CALL:   CALL GUD$MCLENT(G$TSA);
      181    12990
      182    12991                     GUD$MCLENT is called only by GHT$TRAP in the mon entry segment.
      183    12992
      184    12993                     GUD$MCLENT will take the normal return if the trap handler
      185    12994                     is to simply RTT through the MCL TSA for normal return to the
      186    12995                     user, alternate return to the user or entry to the user's
      187    12996                     trap handler.  If the ALTRET routine or user's trap handler
      188    12997                     is to be entered, P$ in the TSA will have been set to the
      189    12998                     address of the user's handler and the TSA will have been
      190    12999                     moved to the user's TCB.
      191    13000
      192    13001                     GUD$MCLENT will take the alternate return with TSA.I.TRAP#
      193    13002                     set to indicate special processing to GHT$TRAP.
      194    13003                     TRAP# will be set to zero if the trap handler is to load
      195    13004                     a full environment (for M$TRTN) prior to returning to the
      196    13005                     user.
      197    13006
      198    13007                     TRAP# set non-zero will indicate that the debugger is to
      199    13008                     be entered when the MCL decoder altrets to the trap handler.
      200    13009                     See G_LCP6_E and/or GHB$TRAP1 for the meaning of the value
      201    13010                     that will have been put in TRAP#.
      202    13011
      203    13012
      204    13013        */
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:38   
      205    13014
      206    13015
      207    13016
      208    13017        %EJECT;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:39   
      209    13018    1   GUD$MCLENT: ENTRY(G$TSA) ALTRET;

  13018   1 000007  D380 0000 0000  xent GUD$MCLENT      LNJ,B5   X6A_AUTO_1
          1 00000A       008C 0001                       DC       140,1

      210    13019
      211    13020        /* We begin by locating the FPT information in the MCL Tables
      212    13021           for the monitor service request specified via R3.
      213    13022        */
      214    13023    1      GUD_PARAMS.MCL = BINBIT(G$TSA.R3,16);

  13023   1 00000C  ECC7 0004                            LDB,B6   @G$TSA,AUTO
          1 00000E  E846 0003                            LDR,R6   3,B6
          1 000010  EF47 0028                            STR,R6   GUD_PARAMS,AUTO

      215    13024    1      GUD_PARAMS.ALT_SPEC = G$TSA.P$->ALT_SPEC;

  13024   1 000012  DCC6 0008                            LDB,B5   8,B6
          1 000014  D805                                 LDR,R5   ,B5
          1 000015  DF47 002D                            STR,R5   GUD_PARAMS+5,AUTO

      216    13025
      217    13026        /*   If the user is debugging a check is made to determine if
      218    13027             this is an MCL which should go to the debugger first.  These
      219    13028             MCLs all belong to the GJ functional code group.
      220    13029        */
      221    13030    1      IF (GUD_PARAMS.MCL.C.FCG = %G_FCG_J#)

  13030   1 000017  C847 0028                            LDR,R4   GUD_PARAMS,AUTO
          1 000019  4046                                 SOR,R4   6
          1 00001A  C570 000F                            AND,R4   15,IMO
          1 00001C  4D02                                 CMV,R4   2
          1 00001D  0981 004A                            BNE      s:13058,PREL

      222    13031    2      THEN DO;

      223    13032    2           I = %G_FPRG_EXIT# + GUD_PARAMS.MCL.C.MCL;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:40   

  13032   1 00001F  B847 0028                            LDR,R3   GUD_PARAMS,AUTO
          1 000021  B570 003F                            AND,R3   63,IMO
          1 000023  3E2F                                 ADV,R3   47
          1 000024  BF47 0014                            STR,R3   I,AUTO

      224    13033
      225    13034    2           IF GUD_PARAMS.MCL.CODE = %G_MCL_SCREECH#

  13034   1 000026  A847 0028                            LDR,R2   GUD_PARAMS,AUTO
          1 000028  A570 03FF                            AND,R2   1023,IMO
          1 00002A  A970 0085                            CMR,R2   133,IMO
          1 00002C  0981 0017                            BNE      s:13045,PREL

      226    13035    3           THEN DO;

      227    13036    3                IF G$JIT.PRIV.ACTIVE.SCREECH OR G$JIT.PRIV.ACTIVE.SNAP

  13036   1 00002E  DC80 0000 0000  xsym                 LDB,B5   G$ROS$
          1 000031  CCC5 0002                            LDB,B4   2,B5
          1 000033  82C4 008E                            LB,'0010'X        142,B4
          1 000035       0010
          1 000036  0501 002C                            BBT      s:13049,PREL
          1 000038  82C4 008E                            LB,'0020'X        142,B4
          1 00003A       0020
          1 00003B  0501 0027                            BBT      s:13049,PREL

      228    13037    3                THEN GOTO DELTAGO;
      229    13038    4                ELSE DO;

      230    13039    4                     GUD_PARAMS.ERR = ENOTAUTH;

  13039   1 00003D  8C80 0000 000E  00                   LDI      ENOTAUTH
          1 000040  8D47 002B                            SDI      GUD_PARAMS+3,AUTO

      231    13040    4                     GOTO MCL_ERR;

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:41   
  13040   1 000042  0F81 0298                            B        s:13393,PREL

      232    13041    4                     END;
      233    13042    3                END;
      234    13043
      235    13044    3           ELSE DO;

      236    13045    3                IF (G$JIT.DB# ~= 0 OR G_KEEP_USER(I))

  13045   1 000044  DC80 0000 0000  xsym                 LDB,B5   G$ROS$
          1 000047  CCC5 0002                            LDB,B4   2,B5
          1 000049  92C4 008D                            LLH,R1   141,B4
          1 00004B  1981 0006                            BNEZ,R1  s:13045+14,PREL
          1 00004D  82B0 0000 0000  xsym                 LB       G_KEEP_USER,R3
          1 000050  0581 0017                            BBF      s:13058,PREL
          1 000052  BC80 0000 0000  xsym                 LDB,B3   G$UHJIT$
          1 000055  E843 007E                            LDR,R6   126,B3
          1 000057  6D03                                 CMV,R6   3
          1 000058  0981 000F                            BNE      s:13058,PREL
          1 00005A  E2C6 0002                            LLH,R6   2,B6
          1 00005C  6D3F                                 CMV,R6   63
          1 00005D  0981 000A                            BNE      s:13058,PREL
          1 00005F  A970 0086                            CMR,R2   134,IMO
          1 000061  0901 0006                            BE       s:13058,PREL

      237    13046    3                  AND G$UHJIT.DMN.ID = %G_DMN_USR_SVC#
      238    13047    3                  AND (G$TSA.I.TRAP# = 64 - %G_MCL#)
      239    13048    3                  AND (GUD_PARAMS.MCL.CODE ~= %G_MCL_CPEXIT#)
      240    13049    4                THEN DO;

  13048   1                              DELTAGO         null
      241    13050    4   DELTAGO:          ;
      242    13051    4                     G$TSA.I.TRAP# = I;

  13051   1 000063  B7C6 0002            DELTAGO         STH,R3   2,B6

      243    13052    4                     ALTRETURN;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:42   

  13052   1 000065  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      244    13053    4                     END;
      245    13054    3                END;
      246    13055    2           END;
      247    13056
      248    13057
      249    13058    1      CALL GHR$SRV;

  13058   1 000068  CBF0 0000                            LAB,B4   0,IMO
          1 00006A  E380 0000 0000  xent                 LNJ,B6   GHR$SRV
          1 00006D       0001                            DC       s:13059,PREL

      250    13059    1      G$TSA.Z.IS = 0;

  13059   1 00006E  ECC7 0004                            LDB,B6   @G$TSA,AUTO
          1 000070  8846 0005                            LBF,'000F'X       5,B6
          1 000072       000F

      251    13060    1      G$JIT.CALCNT = G$JIT.CALCNT+1;

  13060   1 000073  DC80 0000 0000  xsym                 LDB,B5   G$ROS$
          1 000076  CCC5 0002                            LDB,B4   2,B5
          1 000078  8AC4 0036                            INC      54,B4

      252    13061
      253    13062    1      IF (GUD_PARAMS.MCL.C.FCG > GUD_MAXFCG) OR (GUD_PARAMS.MCL.C.FCG = 0)

  13062   1 00007A  E847 0028                            LDR,R6   GUD_PARAMS,AUTO
          1 00007C  6046                                 SOR,R6   6
          1 00007D  E570 000F                            AND,R6   15,IMO
          1 00007F  E900 0000 0000  xsym                 CMR,R6   GUD_MAXFCG
          1 000082  0A01 0006                            BAG      s:13063,PREL
          1 000084  82C7 0028                            LB,'03C0'X        GUD_PARAMS,AUTO
          1 000086       03C0
          1 000087  0501 0008                            BBT      s:13073,PREL
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:43   

      254    13063    2      THEN DO;

      255    13064    2   BAD_CODE: ;

  13064   1                              BAD_CODE        null
      256    13065    2           GUD_PARAMS.ERR =EBADCODE;

  13065   1 000089  8C80 0000 0004  00   BAD_CODE        LDI      EBADCODE
          1 00008C  8D47 002B                            SDI      GUD_PARAMS+3,AUTO

      257    13066    2           GOTO MCL_ERR;

  13066   1 00008E  0F81 024C                            B        s:13393,PREL

      258    13067
      259    13068    2           END;
      260    13069        /*E*   ERROR:   GUD-E$BADCODE-E
      261    13070               MESSAGE:  LCP-6 System does not provide that monitor service.
      262    13071        */
      263    13072
      264    13073    1      GUD$PTR$ = GUD_MCL_TABLE.INDEX_(GUD_PARAMS.MCL.C.FCG);

  13073   1 000090  B856                                 LDR,R3   R6
          1 000091  CCB0 0000 0000  xsym                 LDB,B4   GUD_MCL_TABLE,R3
          1 000094  CFC7 0006                            STB,B4   GUD$PTR$,AUTO

      265    13074
      266    13075    1      IF GUD_PARAMS.MCL.CODE > GUD$PTR$->FCG$INFO.C

  13075   1 000096  D847 0028                            LDR,R5   GUD_PARAMS,AUTO
          1 000098  D570 03FF                            AND,R5   1023,IMO
          1 00009A  C804                                 LDR,R4   ,B4
          1 00009B  C570 03FF                            AND,R4   1023,IMO
          1 00009D  D954                                 CMR,R5   R4
          1 00009E  0A6B                                 BAG      s:13063,SPREL

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:44   
      267    13076    1      THEN GOTO BAD_CODE;
      268    13077
      269    13078    1      LAST_MCL = GUD$PTR$->FCG$INFO.C;

  13078   1 00009F  CF47 000A                            STR,R4   LAST_MCL,AUTO

      270    13079
      271    13080    1      IF GUD$PTR$->FCG$INFO.FCG_TYP = 1

  13080   1 0000A1  A804                                 LDR,R2   ,B4
          1 0000A2  204F                                 SOR,R2   15
          1 0000A3  2D01                                 CMV,R2   1
          1 0000A4  0981 000B                            BNE      s:13087,PREL

      272    13081    2      THEN DO;

      273    13082    2           HAND$ = GUD$PTR$->FCG$INFO_WITH_HAND.HAND;

  13082   1 0000A6  BCC4 0001                            LDB,B3   1,B4
          1 0000A8  BFC7 000C                            STB,B3   HAND$,AUTO

      274    13083    2           GUD$PTR$ = PINCRW(GUD$PTR$,SIZEW(FCG$INFO_WITH_HAND));

  13083   1 0000AA  ABC4 0003                            LAB,B2   3,B4
          1 0000AC  AFC7 0006                            STB,B2   GUD$PTR$,AUTO

      275    13084    2           END;

  13084   1 0000AE  0F81 000A                            B        s:13091,PREL

      276    13085
      277    13086    2      ELSE DO;

      278    13087    2           HAND$ = ENTADDR(NIL);

  13087   1 0000B0  BC80 0000 0000  02                   LDB,B3   0
          1 0000B3  BFC7 000C                            STB,B3   HAND$,AUTO
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:45   

      279    13088    2           GUD$PTR$ = PINCRW(GUD$PTR$,SIZEW(FCG$INFO));

  13088   1 0000B5  ABC4 0001                            LAB,B2   1,B4
          1 0000B7  AFC7 0006                            STB,B2   GUD$PTR$,AUTO

      280    13089    2           END;

      281    13090
      282    13091    2      DO WHILE (GUD_PARAMS.MCL.CODE ~= GUD$PTR$->MCL$INFO.C);

  13091   1 0000B9  9802                                 LDR,R1   ,B2
          1 0000BA  9570 03FF                            AND,R1   1023,IMO
          1 0000BC  D951                                 CMR,R5   R1
          1 0000BD  0901 0029                            BE       s:13110,PREL

      283    13092    2           IF GUD$PTR$->MCL$INFO.C = LAST_MCL

  13092   1 0000BF  ECC7 0006                            LDB,B6   GUD$PTR$,AUTO
          1 0000C1  E806                                 LDR,R6   ,B6
          1 0000C2  E570 03FF                            AND,R6   1023,IMO
          1 0000C4  E947 000A                            CMR,R6   LAST_MCL,AUTO
          1 0000C6  0943                                 BE       s:13063,SPREL

      284    13093    2           THEN GOTO BAD_CODE;
      285    13094    3           ELSE DO;

      286    13095    3                IF HAND$ ~= ENTADDR(NIL)

  13095   1 0000C7  DCC7 000C                            LDB,B5   HAND$,AUTO
          1 0000C9  DD80 0000 0000  02                   CMB,B5   0
          1 0000CC  0901 000A                            BE       s:13099,PREL

      287    13096    3                THEN GUD$PTR$ = PINCRW(GUD$PTR$,SIZEW(MCL$INFO)

  13096   1 0000CE  B806                                 LDR,R3   ,B6
          1 0000CF  306A                                 SAR,R3   10
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:46   
          1 0000D0  3001                                 SOL,R3   1
          1 0000D1  3E01                                 ADV,R3   1
          1 0000D2  CBB6                                 LAB,B4   ,B6,R3
          1 0000D3  CFC7 0006                            STB,B4   GUD$PTR$,AUTO
          1 0000D5  0F81 0008                            B        s:13102,PREL

      288    13097    3                       + (GUD$PTR$->MCL$INFO.V * SIZEW(VECT$INFO) ));
      289    13098
      290    13099    3                ELSE GUD$PTR$ = PINCRW(GUD$PTR$,SIZEW(MCL$INFO_WITH_HAND)

  13099   1 0000D7  B806                                 LDR,R3   ,B6
          1 0000D8  306A                                 SAR,R3   10
          1 0000D9  3001                                 SOL,R3   1
          1 0000DA  3E03                                 ADV,R3   3
          1 0000DB  CBB6                                 LAB,B4   ,B6,R3
          1 0000DC  CFC7 0006                            STB,B4   GUD$PTR$,AUTO

      291    13100    3                       + (GUD$PTR$->MCL$INFO.V * SIZEW(VECT$INFO) ));
      292    13101    3                END;

      293    13102    2           END/* do while */;

  13102   1 0000DE  E847 0028                            LDR,R6   GUD_PARAMS,AUTO
          1 0000E0  E570 03FF                            AND,R6   1023,IMO
          1 0000E2  D804                                 LDR,R5   ,B4
          1 0000E3  D570 03FF                            AND,R5   1023,IMO
          1 0000E5  E955                                 CMR,R6   R5
          1 0000E6  09D9                                 BNE      s:13092,SPREL

      294    13103
      295    13104        %EJECT;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:47   
      296    13105
      297    13106        /* Now that we have found the right entry in the MCL Tables
      298    13107           we pull out the info we need from the MCL_INFO word and
      299    13108           adjust the pointer to point to the first VECTOR word.
      300    13109        */
      301    13110    1      NUM_VECT = GUD$PTR$->MCL$INFO.V;

  13110   1 0000E7  ECC7 0006                            LDB,B6   GUD$PTR$,AUTO
          1 0000E9  E806                                 LDR,R6   ,B6
          1 0000EA  606A                                 SAR,R6   10
          1 0000EB  EF47 000B                            STR,R6   NUM_VECT,AUTO

      302    13111    1      IF NUM_VECT > 16

  13111   1 0000ED  6D10                                 CMV,R6   16
          1 0000EE  0A81 000A                            BALE     s:13122,PREL

      303    13112    2      THEN DO;

      304    13113    2           CALL SCREECH(GUD_SCODE1);

  13113   1 0000F0  BB80 0000 0002  02                   LAB,B3   +2
          1 0000F3  CBF0 0100                            LAB,B4   256,IMO
          1 0000F5  E380 0000 0000  xent                 LNJ,B6   SCREECH
          1 0000F8       0001                            DC       s:13122,PREL

      305    13114    2           END;

      306    13115        /*S*   SCREECH_CODE: GUD-S$MCL_TABLE
      307    13116               TYPE:  SUA
      308    13117               MESSAGE: Internal error in GUD_MCL_TABLE
      309    13118               REMARKS: The number of FPT parameters specified via the
      310    13119                        V option of the GUD_MCL_INFO macro is greater than
      311    13120                        the maximum allowed (16).
      312    13121        */
      313    13122    1      IF HAND$ = ENTADDR(NIL)

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:48   
  13122   1 0000F9  ECC7 000C                            LDB,B6   HAND$,AUTO
          1 0000FB  ED80 0000 0000  02                   CMB,B6   0
          1 0000FE  0981 000D                            BNE      s:13127,PREL

      314    13123    2      THEN DO;

      315    13124    2           HAND$ = GUD$PTR$->MCL$INFO_WITH_HAND.HAND;

  13124   1 000100  DCC7 0006                            LDB,B5   GUD$PTR$,AUTO
          1 000102  CCC5 0001                            LDB,B4   1,B5
          1 000104  CFC7 000C                            STB,B4   HAND$,AUTO

      316    13125    2           GUD$PTR$ = PINCRW(GUD$PTR$,SIZEW(MCL$INFO_WITH_HAND));

  13125   1 000106  EBC5 0003                            LAB,B6   3,B5
          1 000108  EFC7 0006                            STB,B6   GUD$PTR$,AUTO

      317    13126    2           END;

  13126   1 00010A  0F81 0007                            B        s:13132,PREL

      318    13127    1      ELSE GUD$PTR$ = PINCRW(GUD$PTR$,SIZEW(MCL$INFO));

  13127   1 00010C  DCC7 0006                            LDB,B5   GUD$PTR$,AUTO
          1 00010E  CBC5 0001                            LAB,B4   1,B5
          1 000110  CFC7 0006                            STB,B4   GUD$PTR$,AUTO

      319    13128
      320    13129
      321    13130        /* Zero out ERR and move the address of the TSA to the handler parameter.
      322    13131        */
      323    13132    1      G$JIT.ERR = '0'B;

  13132   1 000112  EC80 0000 0000  xsym                 LDB,B6   G$ROS$
          1 000115  DCC6 0002                            LDB,B5   2,B6
          1 000117  8745 003C                            CL       60,B5
          1 000119  8745 003D                            CL       61,B5
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:49   

      324    13133    1      GUD_PARAMS.ERR='0'B;

  13133   1 00011B  8747 002B                            CL       GUD_PARAMS+3,AUTO
          1 00011D  8747 002C                            CL       GUD_PARAMS+4,AUTO

      325    13134    1      GUD_PARAMS.TSA$ = ADDR(G$TSA);

  13134   1 00011F  DCC7 0004                            LDB,B5   @G$TSA,AUTO
          1 000121  DFC7 0029                            STB,B5   GUD_PARAMS+1,AUTO

      326    13135
      327    13136
      328    13137        /* If the handler doesn't want parameters, call him now.
      329    13138        */
      330    13139    1      IF NUM_VECT = 0

  13139   1 000123  E847 000B                            LDR,R6   NUM_VECT,AUTO
          1 000125  6901 0198                            BEZ,R6   s:13360,PREL

      331    13140    1      THEN GOTO CALL_HANDLER;
      332    13141
      333    13142        /* Make sure we can access the FPT before we try to decode it.
      334    13143        */
      335    13144    2      ELSE DO/* do if NUM_VECT ~= 0 */;

      336    13145    2           IF GUD_PARAMS.MCL.V# ~= 0

  13145   1 000127  82C7 0028                            LB,'FC00'X        GUD_PARAMS,AUTO
  13145   1 000129       FC00
          1 00012A  0581 0031                            BBF      s:13173,PREL

      337    13146    3           THEN DO;

      338    13147    3                GUD@VECTOR.BASE$ = G$TSA.B3$;

  13147   1 00012C  CCC5 000A                            LDB,B4   10,B5
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:50   
          1 00012E  CFC7 0026                            STB,B4   GUD@VECTOR+1,AUTO

      339    13148    3                GUD@VECTOR.BND = (GUD_PARAMS.MCL.V# * 6) -1;

  13148   1 000130  D847 0028                            LDR,R5   GUD_PARAMS,AUTO
          1 000132  504A                                 SOR,R5   10
          1 000133  5F06                                 MLV,R5   6
          1 000134  5EFF                                 ADV,R5   -1
          1 000135  DF47 0025                            STR,R5   GUD@VECTOR,AUTO

      340    13149    3                FPT$ = ADDR(GUD@VECTOR);

  13149   1 000137  BBC7 0025                            LAB,B3   GUD@VECTOR,AUTO
          1 000139  BFC7 0010                            STB,B3   FPT$,AUTO

      341    13150    3                T$ = GUD$PTR$;

  13150   1 00013B  ACC7 0006                            LDB,B2   GUD$PTR$,AUTO
          1 00013D  AFC7 0012                            STB,B2   T$,AUTO

      342    13151    3                GUD$PTR$ = ADDR(GUD_FPT);

  13151   1 00013F  9B80 0000 0000  00                   LAB,B1   GUD_FPT
          1 000142  9FC7 0006                            STB,B1   GUD$PTR$,AUTO

      343    13152
      344    13153    3                CALL CHECK_USR_MEM

  13153   1 000144  E3C0 033B                            LNJ,B6   s:0,PREL
          1 000146       000D                            DC       s:13160,PREL

      345    13154    4                WHENRETURN DO;

      346    13155    4                     FPT$ = G$TSA.B3$;

  13155   1 000147  ECC7 0004                            LDB,B6   @G$TSA,AUTO
          1 000149  DCC6 000A                            LDB,B5   10,B6
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:51   
          1 00014B  DFC7 0010                            STB,B5   FPT$,AUTO

      347    13156    4                     GUD$PTR$ = T$;

  13156   1 00014D  CCC7 0012                            LDB,B4   T$,AUTO
          1 00014F  CFC7 0006                            STB,B4   GUD$PTR$,AUTO

      348    13157    4                     END;

  13157   1 000151  0F81 0008                            B        s:13163,PREL

      349    13158
      350    13159    4                WHENALTRETURN DO;

      351    13160    4                     GUD_PARAMS.ERR = EBADFPT;

  13160   1 000153  8C80 0000 0006  00                   LDI      EBADFPT
          1 000156  8D47 002B                            SDI      GUD_PARAMS+3,AUTO

      352    13161    4                     GOTO MCL_ERR;

  13161   1 000158  0F81 0182                            B        s:13393,PREL

      353    13162    4                     END;
      354    13163    3                END;

  13163   1 00015A  0F81 0006                            B        s:13175,PREL

      355    13164
      356    13165        /*E* ERROR: GUD-E$BADFPT-E
      357    13166             MESSAGE: Your address of your FPT is bad.
      358    13167        */
      359    13168
      360    13169
      361    13170        /* If the user did not supply an FPT, but none of the parameters
      362    13171           are required anyway, call the handler passing an array of nil ptrs.
      363    13172        */
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:52   
      364    13173    2           ELSE FPT$ = ADDR(NIL);

  13173   1 00015C  CB80 0000 0000                       LAB,B4   0
          1 00015F  CFC7 0010                            STB,B4   FPT$,AUTO

      365    13174
      366    13175    2           IF FPT$ = ADDR(NIL)

  13175   1 000161  8DC7 0010                            CMN      FPT$,AUTO
          1 000163  0981 002B                            BNE      s:13206,PREL

      367    13176    3           THEN DO;

      368    13177    4                DO I=0 TO NUM_VECT-1;

  13177   1 000165  8747 0014                            CL       I,AUTO
          1 000167  0F81 0020                            B        s:13193+2,PREL

      369    13178    4                     IF GUD$PTR$->VECT$INFO.MAND=1

  13178   1 000169  ECC7 0006                            LDB,B6   GUD$PTR$,AUTO
          1 00016B  E806                                 LDR,R6   ,B6
          1 00016C  604F                                 SOR,R6   15
          1 00016D  6D01                                 CMV,R6   1
          1 00016E  0981 0008                            BNE      s:13189,PREL

      370    13179    5                     THEN DO;

      371    13180    5                          GUD_PARAMS.ERR = ENOFPT;

  13180   1 000170  8C80 0000 0008  00                   LDI      ENOFPT
          1 000173  8D47 002B                            SDI      GUD_PARAMS+3,AUTO

      372    13181    5                          GOTO MCL_ERR;

  13181   1 000175  0F81 0165                            B        s:13393,PREL

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:53   
      373    13182    5                          END;
      374    13183
      375    13184        /*E* ERROR: GUD-E$NOFPT-E
      376    13185             MESSAGE: That monitor service requires an FPT.
      377    13186        */
      378    13187
      379    13188    5                     ELSE DO;

      380    13189    5                          GUD$PTR$ = PINCRW(GUD$PTR$,SIZEW(VECT$INFO));

  13189   1 000177  DBC6 0002                            LAB,B5   2,B6
          1 000179  DFC7 0006                            STB,B5   GUD$PTR$,AUTO

      381    13190    5                          GUD_PARAMS.PTRS_ARRAY(I) = ADDR(NIL);

  13190   1 00017B  EB80 0000 0000                       LAB,B6   0
          1 00017E  B847 0014                            LDR,R3   I,AUTO
          1 000180  3E17                                 ADV,R3   23
          1 000181  EFB7                                 STB,B6   ,AUTO,R3

      382    13191    5                          GUD_PARAMS.BND_ARRAY(I) = 0; /* ??                     */

  13191   1 000182  A847 0014                            LDR,R2   I,AUTO
          1 000184  2E4E                                 ADV,R2   78
          1 000185  8727                                 CL       ,AUTO,R2

      383    13192    5                          END;

      384    13193    4                     END/* do I = 0 to NUM_VECT */;

  13193   1 000186  8AC7 0014                            INC      I,AUTO
          1 000188  E847 0014                            LDR,R6   I,AUTO
          1 00018A  E947 000B                            CMR,R6   NUM_VECT,AUTO
          1 00018C  085D                                 BAL      s:13178,SPREL

      385    13194
      386    13195    3                GOTO CALL_HANDLER;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:54   

  13195   1 00018D  0F81 0130                            B        s:13360,PREL

      387    13196    3                END/* do if FPT$ is nil */;
      388    13197
      389    13198
      390    13199        /* Where an FPT was specified on the monitor service request, we
      391    13200           must validate the vectors and build descriptors for ASDT_MCL.
      392    13201        */
      393    13202    3           ELSE DO/* if FPT$ not nil */;

      394    13203
      395    13204        /* Initialize internal pointers and counters
      396    13205        */
      397    13206    3                ASDT_MCL$ = G$ASDT_MCL$;

  13206   1 00018F  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_MCL$
          1 000192  EFC7 000E                            STB,B6   ASDT_MCL$,AUTO

      398    13207    3                LPARS_USED = 0;

  13207   1 000194  8747 001B                            CL       LPARS_USED,AUTO

      399    13208    3                BPARS_USED = 0;

  13208   1 000196  8747 001C                            CL       BPARS_USED,AUTO

      400    13209    3                PARAM_DESC_USED=0;

  13209   1 000198  8747 001D                            CL       PARAM_DESC_USED,AUTO

      401    13210
      402    13211        /* For each parameter we do the following:
      403    13212        */
      404    13213    4                DO I=0 TO NUM_VECT-1;

  13213   1 00019A  8747 0014                            CL       I,AUTO
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:55   
          1 00019C  0F81 011B                            B        s:13376+2,PREL

      405    13214    4                     IF I=8

  13214   1 00019E  E847 0014                            LDR,R6   I,AUTO
          1 0001A0  6D08                                 CMV,R6   8
          1 0001A1  0981 0007                            BNE      s:13225,PREL

      406    13215    5                     THEN DO;

      407    13216    5                          ASDT_MCL$ = ADDR(GUD_PARAMS.DESC);

  13216   1 0001A3  EBC7 005E                            LAB,B6   GUD_PARAMS+54,AUTO
          1 0001A5  EFC7 000E                            STB,B6   ASDT_MCL$,AUTO

      408    13217    5                          PARAM_DESC_USED=0;

  13217   1 0001A7  8747 001D                            CL       PARAM_DESC_USED,AUTO

      409    13218    5                          END;

      410    13219    4                     ELSE ;
      411    13220
      412    13221
      413    13222        /*  We ALTRET to the user if the vector is nil and the parameter
      414    13223            is manditory.
      415    13224        */
      416    13225    4                     IF I+1 > GUD_PARAMS.MCL.V# THEN GOTO CHECK_MAND;

  13225   1 0001A9  D847 0028                            LDR,R5   GUD_PARAMS,AUTO
          1 0001AB  504A                                 SOR,R5   10
          1 0001AC  D956                                 CMR,R5   R6
          1 0001AD  0A81 000E                            BALE     s:13228,PREL

      417    13226
      418    13227    4                     IF FPT$->G$VECTOR.CBASE = '0'B

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:56   
  13227   1 0001AF  ECC7 0010                            LDB,B6   FPT$,AUTO
          1 0001B1  DB80 0000 0000  02                   LAB,B5   0
          1 0001B4  5C01                                 LDV,R5   1
          1 0001B5  0022                                 ACM      ;
          1 0001B6       4406 0001                                ALPHANUM(1,B6,,4,FILL),;
          1 0001B8       4005 0000                                ALPHANUM(0,B5,,R5,FILL)
          1 0001BA  5301 001A                            CBNE     s:13243,PREL

      419    13228    5                     THEN DO;

  13217   1                              CHECK_MAND      null
      420    13229    5   CHECK_MAND:            ;
      421    13230    5                          IF GUD$PTR$->VECT$INFO.MAND = 1

  13230   1 0001BC  ECC7 0006            CHECK_MAND      LDB,B6   GUD$PTR$,AUTO
          1 0001BE  D806                                 LDR,R5   ,B6
          1 0001BF  504F                                 SOR,R5   15
          1 0001C0  5D01                                 CMV,R5   1
          1 0001C1  0981 0006                            BNE      s:13233,PREL

      422    13231    5                          THEN CALL SET_BAD_VECT ALTRET(MCL_ERR);

  13231   1 0001C3  E3C0 0366                            LNJ,B6   s:0,PREL
          1 0001C5       0116                            DC       s:13393,PREL
          1 0001C6  0F81 00E3                            B        s:13374,PREL

      423    13232    6                          ELSE DO;

      424    13233    6                               GUD_PARAMS.PTRS_ARRAY(I) = ADDR(NIL);

  13233   1 0001C8  DB80 0000 0000                       LAB,B5   0
          1 0001CB  B856                                 LDR,R3   R6
          1 0001CC  3E17                                 ADV,R3   23
          1 0001CD  DFB7                                 STB,B5   ,AUTO,R3

      425    13234    6                               GUD_PARAMS.BND_ARRAY(I) = 0;

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:57   
  13234   1 0001CE  A856                                 LDR,R2   R6
          1 0001CF  2E4E                                 ADV,R2   78
          1 0001D0  8727                                 CL       ,AUTO,R2

      426    13235    6                               PARAM_DESC_USED = PARAM_DESC_USED +1;

  13235   1 0001D1  8AC7 001D                            INC      PARAM_DESC_USED,AUTO

      427    13236    6                               END;

      428    13237    5                          END/* DO for nil FPT vector */;

  13237   1 0001D3  0F81 00D6                            B        s:13374,PREL

      429    13238
      430    13239        /*   The vector is checked to make sure we have access to the data
      431    13240             framed by the vector and the size is adequate.
      432    13241        */
      433    13242    5                     ELSE DO;

      434    13243    5                          CALL CHECK_USR_MEM ALTRET(MCL_ERR);

  13243   1 0001D5  E3C0 02AA                            LNJ,B6   s:0,PREL
          1 0001D7       0104                            DC       s:13393,PREL

      435    13244
      436    13245        /*   If mapping parameters 9 through 16, the internal pointers and
      437    13246             counters are set to store a descriptor in GUD_PARAMS for the
      438    13247             handler.
      439    13248        */
      440    13249    5                          IF I > 7

  13249   1 0001D8  E847 0014                            LDR,R6   I,AUTO
          1 0001DA  6D07                                 CMV,R6   7
          1 0001DB  0A81 000F                            BALE     s:13263,PREL

      441    13250    6                          THEN DO;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:58   

      442    13251    6                               ASDT_MCL_INDX = PARAM_DESC_USED;

  13251   1 0001DD  D847 001D                            LDR,R5   PARAM_DESC_USED,AUTO
          1 0001DF  DF47 0016                            STR,R5   ASDT_MCL_INDX,AUTO

      443    13252    6                               PARAM_DESC_USED = PARAM_DESC_USED+1;

  13252   1 0001E1  8AC7 001D                            INC      PARAM_DESC_USED,AUTO

      444    13253
      445    13254    6                               GUD_PARAMS.PTRS_ARRAY(I) = ADDR(NIL);

  13254   1 0001E3  EB80 0000 0000                       LAB,B6   0
          1 0001E6  B856                                 LDR,R3   R6
          1 0001E7  3E17                                 ADV,R3   23
          1 0001E8  EFB7                                 STB,B6   ,AUTO,R3

      446    13255    6                               END;

  13255   1 0001E9  0F81 0032                            B        s:13302,PREL

      447    13256
      448    13257
      449    13258        /*  If the table indicates that the parameter is little, but we have
      450    13259            already used all the available descriptor slots for little parameters,
      451    13260            we will attempt to map the user's parameter in one of the BPARs.
      452    13261        */
      453    13262    6                          ELSE DO;

      454    13263    6                               IF GUD$PTR$->VECT$INFO.TYP = 0

  13263   1 0001EB  ECC7 0006                            LDB,B6   GUD$PTR$,AUTO
          1 0001ED  8286                                 LB,'2000'X        ,B6
          1 0001EE       2000
          1 0001EF  0501 0014                            BBT      s:13284,PREL

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:59   
      455    13264    7                               THEN DO;

      456    13265    7                                    IF LPARS_USED = 6

  13265   1 0001F1  D847 001B                            LDR,R5   LPARS_USED,AUTO
          1 0001F3  5D06                                 CMV,R5   6
          1 0001F4  0901 000F                            BE       s:13284,PREL

      457    13266    7                                    THEN GOTO USE_BPARS;
      458    13267
      459    13268        /*  Otherwise, we build an index into the ASDT_MCL for the next
      460    13269            available little parameter descriptor.
      461    13270        */
      462    13271    7                                    ASDT_MCL_INDX = LPARS_USED +%GM_LPAR1#;

  13271   1 0001F6  5E0A                                 ADV,R5   10
          1 0001F7  DF47 0016                            STR,R5   ASDT_MCL_INDX,AUTO

      463    13272    7                                    LPARS_USED = LPARS_USED+1;

  13272   1 0001F9  8AC7 001B                            INC      LPARS_USED,AUTO

      464    13273
      465    13274        /*  We initialize the internal pointer to the virtual address of the
      466    13275            segment we have just selected to use for this parameter.
      467    13276        */
      468    13277    7                                    GUD_PARAMS.PTRS_UBIN(I) = (ASDT_MCL_INDX ) * (1024
             13277                                             * 4);

  13277   1 0001FB  E855                                 LDR,R6   R5
          1 0001FC  70F0                                 DAR,R7   16
          1 0001FD  708C                                 DOL,R7   12
          1 0001FE  B847 0014                            LDR,R3   I,AUTO
          1 000200  3E17                                 ADV,R3   23
          1 000201  8D37                                 SDI      ,AUTO,R3

      469    13278    7                                    END/* do if little parameter*/;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:60   

  13278   1 000202  0F81 0019                            B        s:13302,PREL

      470    13279
      471    13280        /*  If mapping one of the first 7 parameters, and we are out of ASDT_MCL slots
      472    13281            it is an error with the table as defined by the %FPT and %VECT macros.
      473    13282            We ignore this system error, and ALTRET to the user.
      474    13283        */
      475    13284    7                               ELSE DO;

  13277   1                              USE_BPARS       null
      476    13285    7   USE_BPARS:                       ;
      477    13286    7                                    IF BPARS_USED = 2

  13286   1 000204  D847 001C            USE_BPARS       LDR,R5   BPARS_USED,AUTO
          1 000206  5D02                                 CMV,R5   2
          1 000207  0981 0004                            BNE      s:13289,PREL

      478    13287    7                                    THEN CALL SET_BAD_VECT ALTRET(MCL_ERR);

  13287   1 000209  E3C0 0320                            LNJ,B6   s:0,PREL
          1 00020B       00D0                            DC       s:13393,PREL

      479    13288
      480    13289    7                                    ASDT_MCL_INDX = BPARS_USED +%GM_BPAR1#;

  13289   1 00020C  E847 001C                            LDR,R6   BPARS_USED,AUTO
          1 00020E  6E15                                 ADV,R6   21
          1 00020F  EF47 0016                            STR,R6   ASDT_MCL_INDX,AUTO

      481    13290    7                                    BPARS_USED = BPARS_USED+1;

  13290   1 000211  8AC7 001C                            INC      BPARS_USED,AUTO

      482    13291
      483    13292    7                                    GUD_PARAMS.PTRS_UBIN(I) = (ASDT_MCL_INDX -15) * (
             13292                                             1024 * 64);
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:61   

  13292   1 000213  70F0                                 DAR,R7   16
          1 000214  7090                                 DOL,R7   16
          1 000215  8470 FFF1 0000                       AID      -983040,IMO
          1 000218  B847 0014                            LDR,R3   I,AUTO
          1 00021A  3E17                                 ADV,R3   23
          1 00021B  8D37                                 SDI      ,AUTO,R3

      484    13293    7                                    END/* do if big parameter*/;

      485    13294    6                               END/* do if not 7 through 16 */;

      486    13295
      487    13296
      488    13297        /*  We also compute the difference between the virtual base address
      489    13298            of that segment and the address of the first word of that parameter.
      490    13299            BLOCK_INDEX is then set to indicate this offset in number of 256
      491    13300            word blocks.
      492    13301        */
      493    13302    5                          USR_OFFSET = FPT$->G$VECTOR.CBASE.ADDRS - USR_VBASE;

  13302   1 00021C  ECC7 0010                            LDB,B6   FPT$,AUTO
          1 00021E  8CC6 0001                            LDI      1,B6
          1 000220  E570 000F                            AND,R6   15,IMO
          1 000222  84C7 001E                            SID      USR_VBASE,AUTO
          1 000224  8D47 0020                            SDI      USR_OFFSET,AUTO

      494    13303    5                          BLOCK_INDEX = USR_OFFSET / 256;

  13303   1 000226  82D7                                 LB,'00FF'X        R7
  13303   1 000227       00FF
          1 000228  70E8                                 DAR,R7   8
          1 000229  6881 0006                            BGEZ,R6  s:13303+10,PREL
          1 00022B  0581 0004                            BBF      s:13303+10,PREL
          1 00022D  8470 0000 0001                       AID      1,IMO
          1 000230  E857                                 LDR,R6   R7
          1 000231  EF47 0024                            STR,R6   BLOCK_INDEX,AUTO
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:62   

      495    13304
      496    13305        /*   Next, we copy the descriptor from the user base level ASDT into
      497    13306             the ASDT we are to use for this interrupt level MCL processing.
      498    13307        */
      499    13308                               %LOCK (G=GM_MEATLOCK);

  13313   1 000233  BB80 0000 0004  02                   LAB,B3   +4
          1 000236  CBF0 0100                            LAB,B4   256,IMO
          1 000238  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          1 00023B       0001                            DC       s:13316,PREL

      500    13315
      501    13316    5                          ASDT_MCL$->ASDT.DESC(ASDT_MCL_INDX) =

  13316   1 00023C  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_USR$
          1 00023F  B847 0015                            LDR,R3   ASDT_USR_INDX,AUTO
          1 000241  8CB6                                 LDI      ,B6,R3
          1 000242  DCC7 000E                            LDB,B5   ASDT_MCL$,AUTO
          1 000244  A847 0016                            LDR,R2   ASDT_MCL_INDX,AUTO
          1 000246  8D25                                 SDI      ,B5,R2

      502    13317    5                            G$ASDT_USR$->ASDT.DESC(ASDT_USR_INDX);
      503    13318
      504    13319        /*  The base address of the copied segment descriptor is now adjusted
      505    13320            by the BLOCK_INDEX computed above.
      506    13321        */
      507    13322    5                          IF (I <= 7)

  13322   1 000247  D847 0014                            LDR,R5   I,AUTO
          1 000249  5D07                                 CMV,R5   7
          1 00024A  0A01 000C                            BAG      s:13329,PREL

      508    13323    6                          THEN DO;

      509    13324    6                               ASDT_MCL$->ASDT.DESC.BASE(ASDT_MCL_INDX) =

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:63   
  13324   1 00024C  3001                                 SOL,R3   1
          1 00024D  C836                                 LDR,R4   ,B6,R3
          1 00024E  C570 7FFF                            AND,R4   32767,IMO
          1 000250  CA47 0024                            ADD,R4   BLOCK_INDEX,AUTO
          1 000252  2001                                 SOL,R2   1
          1 000253  CAA5                                 SRM,R4,'7FFF'X    ,B5,R2
          1 000254       7FFF

      510    13325    6                                 G$ASDT_USR$->ASDT.DESC.BASE(ASDT_USR_INDX) +
             13325                                          BLOCK_INDEX;
      511    13326    6                               END;

  13326   1 000255  0F81 000A                            B        s:13338,PREL

      512    13327
      513    13328    6                          ELSE DO;

      514    13329    6                               ASDT_MCL$->ASDT.DESC.BASE(ASDT_MCL_INDX) = BLOCK_INDEX;

  13329   1 000257  C847 0024                            LDR,R4   BLOCK_INDEX,AUTO
          1 000259  2001                                 SOL,R2   1
          1 00025A  CAA5                                 SRM,R4,'7FFF'X    ,B5,R2
          1 00025B       7FFF

      515    13330    6                              GUD_PARAMS.ASDT_USR_INDX(ASDT_MCL_INDX) = ASDT_USR_INDX;

  13330   1 00025C  9847 0016                            LDR,R1   ASDT_MCL_INDX,AUTO
          1 00025E  1E6E                                 ADV,R1   110
          1 00025F  BF17                                 STR,R3   ,AUTO,R1

      516    13331    6                               END;

      517    13332
      518    13333                               %UNLOCK (G=GM_MEATLOCK);

  13338   1 000260  BB80 0000 0004  02                   LAB,B3   +4
          1 000263  CBF0 0100                            LAB,B4   256,IMO
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:64   
          1 000265  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          1 000268       0001                            DC       s:13345,PREL

      519    13340
      520    13341        /*  The offset from the base of this segment is then computed and
      521    13342            added to the virtual address we have stowed away in our internal
      522    13343            pointer.
      523    13344        */
      524    13345    5                          MCL_OFFSET = USR_OFFSET - (256 * BLOCK_INDEX);

  13345   1 000269  E847 0024                            LDR,R6   BLOCK_INDEX,AUTO
          1 00026B  70F0                                 DAR,R7   16
          1 00026C  7088                                 DOL,R7   8
          1 00026D  8656                                 CPL      R6
          1 00026E  8657                                 CPL      R7
          1 00026F  8470 0000 0001                       AID      1,IMO
          1 000272  8447 0020                            AID      USR_OFFSET,AUTO
          1 000274  8D47 0022                            SDI      MCL_OFFSET,AUTO

      525    13346    5                          GUD_PARAMS.PTRS_UBIN(I) = GUD_PARAMS.PTRS_UBIN(I) +
             13346                                   MCL_OFFSET;

  13346   1 000276  B847 0014                            LDR,R3   I,AUTO
          1 000278  3E17                                 ADV,R3   23
          1 000279  8CB7                                 LDI      ,AUTO,R3
          1 00027A  8447 0022                            AID      MCL_OFFSET,AUTO
          1 00027C  8D37                                 SDI      ,AUTO,R3

      526    13347
      527    13348        /*   If the user passed a CPTR, pass a CPTR to the MCL handler.
      528    13349        */
      529    13350    5                          T$ = ADDR(GUD_PARAMS.PTRS_UBIN(I));

  13350   1 00027D  3001                                 SOL,R3   1
          1 00027E  EBB7                                 LAB,B6   ,AUTO,R3
          1 00027F  EFC7 0012                            STB,B6   T$,AUTO

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:65   
      530    13351    5                          T$->G$CPTR.C = FPT$->G$VECTOR.CBASE.C;

  13351   1 000281  DCC7 0010                            LDB,B5   FPT$,AUTO
          1 000283  E845 0001                            LDR,R6   1,B5
          1 000285  EA86                                 SRM,R6,'8000'X    ,B6
          1 000286       8000

      531    13352
      532    13353        /*   The size of this segment we are creating is set to the number
      533    13354             of 256 word block encompassed by the user specified byte size.
      534    13355        */
      535    13356    5                          LAST_SEG_BYTE = FPT$->G$VECTOR.BND

  13356   1 000287  E845 0001                            LDR,R6   1,B5
          1 000289  604F                                 SOR,R6   15
          1 00028A  EA05                                 ADD,R6   ,B5
          1 00028B  F856                                 LDR,R7   R6
          1 00028C  6C00                                 LDV,R6   0
          1 00028D  8D47 0017                            SDI      LAST_SEG_BYTE,AUTO

      536    13357    5                            + BITBIN(FPT$->G$VECTOR.CBASE.C);
      537    13358
      538    13359    5                          ASDT_MCL$->ASDT.DESC.SIZE(ASDT_MCL_INDX)

  13359   1 00028F  70C1                                 DOR,R7   1
          1 000290  8447 0022                            AID      MCL_OFFSET,AUTO
          1 000292  82D7                                 LB,'00FF'X        R7
          1 000293       00FF
          1 000294  70E8                                 DAR,R7   8
          1 000295  6881 0006                            BGEZ,R6  s:13359+13,PREL
          1 000297  0581 0004                            BBF      s:13359+13,PREL
          1 000299  8470 0000 0001                       AID      1,IMO
          1 00029C  E857                                 LDR,R6   R7
          1 00029D  CCC7 000E                            LDB,B4   ASDT_MCL$,AUTO
          1 00029F  A847 0016                            LDR,R2   ASDT_MCL_INDX,AUTO
          1 0002A1  2001                                 SOL,R2   1
          1 0002A2  2E01                                 ADV,R2   1
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:66   
          1 0002A3  EAA4                                 SRM,R6,'01FF'X    ,B4,R2
          1 0002A4       01FF

      539    13360    5                            = ( (LAST_SEG_BYTE /2) + MCL_OFFSET) / 256;
      540    13361
      541    13362        /*  The byte size as specified in the user FPT is stowed away in the
      542    13363            MCL handler's internal sizes table.
      543    13364        */
      544    13365    5                          GUD_PARAMS.BND_ARRAY(I) = FPT$->G$VECTOR.BND;

  13365   1 0002A5  9847 0014                            LDR,R1   I,AUTO
          1 0002A7  1E4E                                 ADV,R1   78
          1 0002A8  E805                                 LDR,R6   ,B5
          1 0002A9  EF17                                 STR,R6   ,AUTO,R1

      545    13366
      546    13367    5                          END/* DO if Vector not null*/;

      547    13368
      548    13369        /*  The munging of this vector is complete, so the pointer to
      549    13370            the data within the MCL table is bumped to point to the next one
      550    13371            and the pointer to the FPT vectors is also bumped.
      551    13372        */
      552    13373
      553    13374    4                     GUD$PTR$ = PINCRW(GUD$PTR$,SIZEW(VECT$INFO));

  13374   1 0002AA  ECC7 0006                            LDB,B6   GUD$PTR$,AUTO
          1 0002AC  DBC6 0002                            LAB,B5   2,B6
          1 0002AE  DFC7 0006                            STB,B5   GUD$PTR$,AUTO

      554    13375    4                     FPT$ = PINCRW(FPT$,SIZEW(G$VECTOR));

  13375   1 0002B0  ECC7 0010                            LDB,B6   FPT$,AUTO
          1 0002B2  CBC6 0003                            LAB,B4   3,B6
          1 0002B4  CFC7 0010                            STB,B4   FPT$,AUTO

      555    13376    4                     END/* DO I =0 to NUM_VECT-1 */;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:67   

  13376   1 0002B6  8AC7 0014                            INC      I,AUTO
          1 0002B8  E847 0014                            LDR,R6   I,AUTO
          1 0002BA  E947 000B                            CMR,R6   NUM_VECT,AUTO
          1 0002BC  0801 FEE1                            BAL      s:13214,PREL

  13360   1                              CALL_HANDLER    null
      556    13377
      557    13378        /*  ASV$ in the Interrupt Save Area is set to the address of ASDT_MCL,
      558    13379            and the descriptors in ASDT_MCL are activated.
      559    13380        */
      560    13381    3   CALL_HANDLER: ;
      561    13382    3                CALL GUD$ASD(G$ASDT_MCL$->ASDT);

  13382   1 0002BE  BB80 0000 0000  xsym CALL_HANDLER    LAB,B3   G$ASDT_MCL$
          1 0002C1  CBF0 0100                            LAB,B4   256,IMO
          1 0002C3  E380 0000 0000  xent                 LNJ,B6   GUD$ASD
          1 0002C6       0001                            DC       s:13384,PREL

      562    13383
      563    13384    3                CALL HAND$(GUD_PARAMS);

  13384   1 0002C7  EBC7 0028                            LAB,B6   GUD_PARAMS,AUTO
          1 0002C9  EFC7 008A                            STB,B6   ENVTCB_PARAMS+18,AUTO
          1 0002CB  BBC7 008A                            LAB,B3   ENVTCB_PARAMS+18,AUTO
          1 0002CD  9CC7 000C                            LDB,B1   HAND$,AUTO
          1 0002CF  CBF0 0100                            LAB,B4   256,IMO
          1 0002D1  E381                                 LNJ,B6   ,B1
          1 0002D2       0001                            DC       s:13393,PREL

      564    13385    3                END/* do if FPT$ not nil*/;

      565    13386
      566    13387    2           END/* do if NUM_VECT ~= 0*/;

      567    13388
      568    13389        /*  If returning from the memory management MCL handler, the ASDT_MCL
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:68   
      569    13390            descriptors are reloaded.
      570    13391            This shouldn't be necessary, but . . . see star 26460.
      571    13392        */
      572    13393    1      IF GUD_PARAMS.MCL.C.FCG ~= %G_FCG_M#

  13393   1 0002D3  E847 0028                            LDR,R6   GUD_PARAMS,AUTO
          1 0002D5  6046                                 SOR,R6   6
          1 0002D6  E570 000F                            AND,R6   15,IMO
          1 0002D8  6D04                                 CMV,R6   4
          1 0002D9  0981 000C                            BNE      s:13393,PREL

  13393   1                              MCL_ERR         null
      573    13394    1      THEN GOTO MCL_EXIT;
      574    13395
      575    13396        %EJECT;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:69   
      576    13397
      577    13398        /*  Since GUD$ASD has not been called, we are still mapped with
      578    13399            ASDT_USR.  The GUD$ASD routine is called to set ISA.ASV$ to
      579    13400            the address of ASDT_MCL and activate the ASDT_MCL descriptors.
      580    13401        */
      581    13402    1   MCL_ERR: ;
      582    13403    1      CALL GUD$ASD(G$ASDT_MCL$->ASDT);

  13403   1 0002DB  BB80 0000 0000  xsym MCL_ERR         LAB,B3   G$ASDT_MCL$
          1 0002DE  CBF0 0100                            LAB,B4   256,IMO
          1 0002E0  E380 0000 0000  xent                 LNJ,B6   GUD$ASD
          1 0002E3       0001                            DC       s:13404,PREL

      583    13404    1      GOTO MCL_EXIT;

  13404   1 0002E4  0F81 0001                            B        s:13393,PREL

  13393   1                              MCL_EXIT        null
      584    13405
      585    13406        %EJECT;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:70   
      586    13407
      587    13408    1   MCL_EXIT: ;
      588    13409
      589    13410        /*  If BACKP$ is set, simply point the Program Counter in the TSA
      590    13411            back to the MCL instruction and exit.
      591    13412        */
      592    13413    1      IF (G$JIT.JUNK.BACKP$)

  13413   1 0002E6  EC80 0000 0000  xsym MCL_EXIT        LDB,B6   G$ROS$
          1 0002E9  DCC6 0002                            LDB,B5   2,B6
          1 0002EB  82C5 0098                            LB,'0100'X        152,B5
          1 0002ED       0100
          1 0002EE  0581 000F                            BBF      s:13423,PREL

      593    13414    2      THEN DO;

      594    13415    2           G$JIT.JUNK.BACKP$ = '0'B;

  13415   1 0002F0  8845 0098                            LBF,'0100'X       152,B5
  13415   1 0002F2       0100

      595    13416    2           G$TSA.P = G$TSA.P -1;

  13416   1 0002F3  DCC7 0004                            LDB,B5   @G$TSA,AUTO
          1 0002F5  8CC5 0008                            LDI      8,B5
          1 0002F7  8470 FFFF FFFF                       AID      -1,IMO
          1 0002FA  8D45 0008                            SDI      8,B5

      596    13417    2           GOTO MCL_END;

  13417   1 0002FC  0F81 0102                            B        s:13518,PREL

      597    13418    2           END;
      598    13419
      599    13420        /*  If there was no error, simply bump P$ past the ALTRET
      600    13421            specification and return to the trap handler.
      601    13422        */
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:71   
      602    13423    1      IF GUD_PARAMS.ERR.ERR# = 0

  13423   1 0002FE  82C7 002C                            LB,'FFF8'X        GUD_PARAMS+4,AUTO
  13423   1 000300       FFF8
          1 000301  0501 0009                            BBT      s:13435,PREL

      603    13424    2      THEN DO;

  13417   1                              IGNORE_ERR      null
      604    13425    2   IGNORE_ERR: ;
      605    13426    2           G$TSA.P = G$TSA.P +1;

  13426   1 000303  ECC7 0004            IGNORE_ERR      LDB,B6   @G$TSA,AUTO
          1 000305  8AC6 0009                            INC      9,B6
          1 000307  8EC6 0008                            CAD      8,B6

      606    13427    2           END/* DO if no error */;

  13427   1 000309  0F81 00F5                            B        s:13518,PREL

      607    13428
      608    13429        /*   Check the error code for E$ALTRET, which is an internal error
      609    13430             code used to signal an ALTRET to the trap handler.  If this
      610    13431             code is set, the MCL handler must have the full TSA set as
      611    13432             required to return to the user properly.
      612    13433        */
      613    13434    2      ELSE DO;

      614    13435    2           IF GUD_PARAMS.ERR.ERR# ~= %E$ALTRET

  13435   1 00030B  E847 002C                            LDR,R6   GUD_PARAMS+4,AUTO
          1 00030D  6043                                 SOR,R6   3
          1 00030E  E970 0192                            CMR,R6   402,IMO
          1 000310  0901 00EE                            BE       s:13518,PREL

      615    13436    3           THEN DO;

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:72   
      616    13437
      617    13438        /*  If there is no ALTRET specified and the severity of the error
      618    13439            is zero, treat it as if there were no error; i.e. return to
      619    13440            the user.
      620    13441        */
      621    13442    3                IF GUD_PARAMS.ALT_SPEC = 0

  13442   1 000312  D847 002D                            LDR,R5   GUD_PARAMS+5,AUTO
          1 000314  5981 006A                            BNEZ,R5  s:13487,PREL

      622    13443    4                THEN DO;

      623    13444    4                     IF GUD_PARAMS.ERR.SEV = 0

  13444   1 000316  82C7 002C                            LB,'0007'X        GUD_PARAMS+4,AUTO
  13444   1 000318       0007
          1 000319  05EA                                 BBF      s:13424,SPREL

      624    13445    4                     THEN GOTO IGNORE_ERR;
      625    13446
      626    13447        /*  When there is no ALTRET specified and the severity of the error
      627    13448            is non-zero, the user's MCL Trap Routine (if any) will be entered.
      628    13449            If no ALTRET and no trap handler the error conditions are reported
      629    13450            in the JIT and the TRAP# in the TSA is set to XCON.  Return to
      630    13451            the trap handler will cause an associated debugger to be entered.
      631    13452            GJS$ABORTM will be entered via GHB$TRAP1 if there is no debugger
      632    13453            or if the user says 'GOTRAP'.
      633    13454        */
      634    13455    5                     ELSE DO;

      635    13456    5                          IF G$UHJIT.DMN.ID = %G_DMN_DB_SVC#

  13456   1 00031A  CC80 0000 0000  xsym                 LDB,B4   G$UHJIT$
          1 00031D  C844 007E                            LDR,R4   126,B4
          1 00031F  4D01                                 CMV,R4   1
          1 000320  0981 0007                            BNE      s:13458,PREL

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:73   
      636    13457    5                          THEN GUD$ECCB$ = G$ROS$->G$ROS.DB_ECCB$;

  13457   1 000322  BCC6 000E                            LDB,B3   14,B6
          1 000324  BFC7 0008                            STB,B3   GUD$ECCB$,AUTO
          1 000326  0F81 0005                            B        s:13460,PREL

      637    13458    5                          ELSE GUD$ECCB$ = G$ROS$->G$ROS.U_ECCB$;

  13458   1 000328  BCC6 000C                            LDB,B3   12,B6
          1 00032A  BFC7 0008                            STB,B3   GUD$ECCB$,AUTO

      638    13459
      639    13460    5                          IF GUD$ECCB$->G$ECCB.TRAP$ = ENTADDR(NIL)

  13460   1 00032C  ACC3 0006                            LDB,B2   6,B3
          1 00032E  AD80 0000 0000  02                   CMB,B2   0
          1 000331  0901 0006                            BE       s:13463,PREL
          1 000333  82C3 000B                            LB,'4000'X        11,B3
          1 000335       4000
          1 000336  0501 0023                            BBT      s:13468,PREL

      640    13461    5                            OR GUD$ECCB$->G$ECCB.FLTFLGS(%G_MCL#) ='0'B
      641    13462    6                          THEN DO;

      642    13463    6                               IF (G$JIT.DB# ~= 0) THEN GOTO ENTER_FD;

  13463   1 000338  B2C5 008D                            LLH,R3   141,B5
          1 00033A  3981 001F                            BNEZ,R3  s:13468,PREL

  13463   1                              TCB_FULL        null
      643    13464    6   TCB_FULL:                   ;
      644    13465    6                               G$JIT.ERR = GUD_PARAMS.ERR;

  13465   1 00033C  EC80 0000 0000  xsym TCB_FULL        LDB,B6   G$ROS$
          1 00033F  DCC6 0002                            LDB,B5   2,B6
          1 000341  8CC7 002B                            LDI      GUD_PARAMS+3,AUTO
          1 000343  8D45 003C                            SDI      60,B5
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:74   

      645    13466    6                               G$JIT.RNST = (G$JIT.RNST | %G_RS_ABRT#);

  13466   1 000345  DCC6 0002                            LDB,B5   2,B6
          1 000347  D845 0096                            LDR,R5   150,B5
          1 000349  D470 0008                            OR,R5    8,IMO
          1 00034B  DF45 0096                            STR,R5   150,B5

      646    13467    6                               G$TSA.P$ = PINCRW(G$TSA.P$,-1);

  13467   1 00034D  DCC7 0004                            LDB,B5   @G$TSA,AUTO
          1 00034F  CCC5 0008                            LDB,B4   8,B5
          1 000351  BBC4 FFFF                            LAB,B3   -1,B4
          1 000353  BFC5 0008                            STB,B3   8,B5

      647    13468    6                               G$TSA.I.TRAP# = %G_FPRG_XCON#;

  13468   1 000355  6C3A                                 LDV,R6   58
          1 000356  E7C5 0002                            STH,R6   2,B5

      648    13469    6                               GOTO MAP_AND_ALT;

  13469   1 000358  0F81 00DF                            B        s:13548,PREL

  13468   1                              ENTER_FD        null
      649    13470    6                               END;
      650    13471
      651    13472    5   ENTER_FD:              ;
      652    13473    5                          ENVTCB_PARAMS.ECC = %G_TRAP#;

  13473   1 00035A  3C03                 ENTER_FD        LDV,R3   3
          1 00035B  BF47 007A                            STR,R3   ENVTCB_PARAMS+2,AUTO

      653    13474    5                          IF G$JIT.DB# = 0

  13474   1 00035D  DCC6 0002                            LDB,B5   2,B6
          1 00035F  A2C5 008D                            LLH,R2   141,B5
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:75   
          1 000361  2981 0007                            BNEZ,R2  s:13476,PREL

      654    13475    5                          THEN ENVTCB_PARAMS.P$$ = GUD$ECCB$->G$ECCB.TRAP$;

  13475   1 000363  ACC3 0006                            LDB,B2   6,B3
          1 000365  AFC7 0078                            STB,B2   ENVTCB_PARAMS,AUTO
          1 000367  0F81 0009                            B        s:13477,PREL

      655    13476    5                          ELSE ENVTCB_PARAMS.P$ = PINCRW(G$TSA.P$,-1);

  13476   1 000369  ACC7 0004                            LDB,B2   @G$TSA,AUTO
          1 00036B  9CC2 0008                            LDB,B1   8,B2
          1 00036D  EBC1 FFFF                            LAB,B6   -1,B1
          1 00036F  EFC7 0078                            STB,B6   ENVTCB_PARAMS,AUTO

      656    13477    5                          ENVTCB_PARAMS.ECINFO.TRAP = G$TSA.I;

  13477   1 000371  ECC7 0004                            LDB,B6   @G$TSA,AUTO
          1 000373  A846 0002                            LDR,R2   2,B6
          1 000375  AF47 007B                            STR,R2   ENVTCB_PARAMS+3,AUTO

      657    13478    5                          ENVTCB_PARAMS.ECINFO.TRAP.TRAP# = %G_MCL#;

  13478   1 000377  1C01                                 LDV,R1   1
          1 000378  97C7 007B                            STH,R1   ENVTCB_PARAMS+3,AUTO

      658    13479    5                          G$TSA.I.TRAP# = %G_FPRG_MCLTRAP#;

  13479   1 00037A  2C3B                                 LDV,R2   59
          1 00037B  A7C6 0002                            STH,R2   2,B6

      659    13480    5                          END;

      660    13481    4                     END;

  13481   1 00037D  0F81 002C                            B        s:13502,PREL

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:76   
      661    13482
      662    13483        /*  Of course, if there is an ALTRET routine specified, thats
      663    13484            the place to return to now.
      664    13485        */
      665    13486    4                ELSE DO /* if there is an ALTRET */;

      666    13487    4                     IF G$UHJIT.DMN.ID = %G_DMN_DB_SVC#

  13487   1 00037F  CC80 0000 0000  xsym                 LDB,B4   G$UHJIT$
          1 000382  C844 007E                            LDR,R4   126,B4
          1 000384  4D01                                 CMV,R4   1
          1 000385  0981 0015                            BNE      s:13495,PREL

      667    13488    5                     THEN DO;

      668    13489    5                          G$JIT.FD_P$ = G$TSA.P$;

  13489   1 000387  BCC7 0004                            LDB,B3   @G$TSA,AUTO
          1 000389  ACC3 0008                            LDB,B2   8,B3
          1 00038B  AFC5 0066                            STB,B2   102,B5

      669    13490    5                          G$JIT.FD_ALTERR = GUD_PARAMS.ERR;

  13490   1 00038D  DCC6 0002                            LDB,B5   2,B6
          1 00038F  8CC7 002B                            LDI      GUD_PARAMS+3,AUTO
          1 000391  8D45 00B4                            SDI      180,B5

      670    13491    5                          G$TSA.P$ = PINCRW(G$TSA.P$,GUD_PARAMS.ALT_SPEC);

  13491   1 000393  DCC3 0008                            LDB,B5   8,B3
          1 000395  B855                                 LDR,R3   R5
          1 000396  ABB5                                 LAB,B2   ,B5,R3
          1 000397  AFC3 0008                            STB,B2   8,B3

      671    13492    5                          GOTO MCL_END;

  13492   1 000399  0F81 0065                            B        s:13518,PREL
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:77   

      672    13493    5                          END;
      673    13494
      674    13495    4                     ENVTCB_PARAMS.ECC= %G_ALT#;

  13495   1 00039B  3C63                                 LDV,R3   99
          1 00039C  BF47 007A                            STR,R3   ENVTCB_PARAMS+2,AUTO

      675    13496    4                     ENVTCB_PARAMS.P$ = PINCRW(G$TSA.P$,GUD_PARAMS.ALT_SPEC);

  13496   1 00039E  DCC7 0004                            LDB,B5   @G$TSA,AUTO
          1 0003A0  BCC5 0008                            LDB,B3   8,B5
          1 0003A2  A855                                 LDR,R2   R5
          1 0003A3  ABA3                                 LAB,B2   ,B3,R2
          1 0003A4  AFC7 0078                            STB,B2   ENVTCB_PARAMS,AUTO

      676    13497    4                     ENVTCB_PARAMS.ECINFO.MCL_CODE = BINBIT(G$TSA.R3,16);

  13497   1 0003A6  9845 0003                            LDR,R1   3,B5
          1 0003A8  9F47 007B                            STR,R1   ENVTCB_PARAMS+3,AUTO

      677    13498    4                     END/* DO if ALTRET specified*/;

      678    13499
      679    13500        /*   Reset P$ in the TSA to point to the faulty MCL.
      680    13501        */
      681    13502    3                G$TSA.P$ = PINCRW(G$TSA.P$,-1);

  13502   1 0003AA  ECC7 0004                            LDB,B6   @G$TSA,AUTO
          1 0003AC  DCC6 0008                            LDB,B5   8,B6
          1 0003AE  BBC5 FFFF                            LAB,B3   -1,B5
          1 0003B0  BFC6 0008                            STB,B3   8,B6

      682    13503
      683    13504        /*  Set up the information to be moved to the user's TCB
      684    13505        */
      685    13506    3                ENVTCB_PARAMS.ENV$ = ADDR(G$TSA);
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:78   

  13506   1 0003B2  EFC7 0083                            STB,B6   ENVTCB_PARAMS+11,AUTO

      686    13507    3                ENVTCB_PARAMS.TCB$ = ADDR(NIL);

  13507   1 0003B4  DB80 0000 0000                       LAB,B5   0
          1 0003B7  DFC7 0085                            STB,B5   ENVTCB_PARAMS+13,AUTO

      687    13508    3                ENVTCB_PARAMS.ENVTYPE = %GUE_ENVTCB_TSA#;

  13508   1 0003B9  8747 0082                            CL       ENVTCB_PARAMS+10,AUTO

      688    13509    3                IF (GUD_PARAMS.MCL.C.FCG = %G_FCG_F#)

  13509   1 0003BB  E847 0028                            LDR,R6   GUD_PARAMS,AUTO
          1 0003BD  6046                                 SOR,R6   6
          1 0003BE  E570 000F                            AND,R6   15,IMO
          1 0003C0  6D05                                 CMV,R6   5
          1 0003C1  0981 0013                            BNE      s:13513,PREL
          1 0003C3  D847 002C                            LDR,R5   GUD_PARAMS+4,AUTO
          1 0003C5  5043                                 SOR,R5   3
          1 0003C6  D970 01A4                            CMR,R5   420,IMO
          1 0003C8  0901 000C                            BE       s:13513,PREL
          1 0003CA  8DC7 002E                            CMN      GUD_PARAMS+6,AUTO
          1 0003CC  0901 0008                            BE       s:13513,PREL

      689    13510    3                  AND (GUD_PARAMS.ERR.ERR# ~= %E$BADVECT0)
      690    13511    3                  AND (GUD_PARAMS.PTRS.PAR1$ ~= ADDR(NIL) )
      691    13512    3                THEN ENVTCB_PARAMS.ECINFO.EVID = GUD_PARAMS.PTRS.PAR1$->DCB#;

  13512   1 0003CE  BCC7 002E                            LDB,B3   GUD_PARAMS+6,AUTO
          1 0003D0  C283                                 LLH,R4   ,B3
          1 0003D1  CF47 007C                            STR,R4   ENVTCB_PARAMS+4,AUTO
          1 0003D3  0F81 0003                            B        s:13514,PREL

      692    13513    3                ELSE ENVTCB_PARAMS.ECINFO.EVID = 0;

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:79   
  13513   1 0003D5  8747 007C                            CL       ENVTCB_PARAMS+4,AUTO

      693    13514    3                ENVTCB_PARAMS.ECINFO.ERR = GUD_PARAMS.ERR;

  13514   1 0003D7  8CC7 002B                            LDI      GUD_PARAMS+3,AUTO
          1 0003D9  8D47 007D                            SDI      ENVTCB_PARAMS+5,AUTO

      694    13515    3                ENVTCB_PARAMS.ECINFO.P# = 0;

  13515   1 0003DB  8747 007F                            CL       ENVTCB_PARAMS+7,AUTO

      695    13516    3                ENVTCB_PARAMS.MOREINFO$ = ADDR(NIL);

  13516   1 0003DD  BB80 0000 0000                       LAB,B3   0
          1 0003E0  BFC7 0080                            STB,B3   ENVTCB_PARAMS+8,AUTO

      696    13517
      697    13518    3                CALL GUE$ENVTCB(ENVTCB_PARAMS) ALTRET(TCB_FULL);

  13518   1 0003E2  ABC7 0078                            LAB,B2   ENVTCB_PARAMS,AUTO
          1 0003E4  AFC7 008A                            STB,B2   ENVTCB_PARAMS+18,AUTO
          1 0003E6  BBC7 008A                            LAB,B3   ENVTCB_PARAMS+18,AUTO
          1 0003E8  CBF0 0100                            LAB,B4   256,IMO
          1 0003EA  E380 0000 0000  xent                 LNJ,B6   GUE$ENVTCB
          1 0003ED       FF4F                            DC       s:13463,PREL

      698    13519
      699    13520    3                IF G$TSA.I.TRAP# = %G_FPRG_MCLTRAP#

  13520   1 0003EE  ECC7 0004                            LDB,B6   @G$TSA,AUTO
          1 0003F0  E2C6 0002                            LLH,R6   2,B6
          1 0003F2  6D3B                                 CMV,R6   59
          1 0003F3  0901 0044                            BE       s:13548,PREL

      700    13521    3                THEN GOTO MAP_AND_ALT;
      701    13522
      702    13523    3                IF G$TSA.ISA.REGS.M1.J
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:80   

  13523   1 0003F5  82C6 002E                            LB,'0080'X        46,B6
  13523   1 0003F7       0080
          1 0003F8  0581 0006                            BBF      s:13518,PREL

      703    13524    4                THEN DO;

      704    13525    4                     G$TSA.I.TRAP# = %G_TRACE#;

  13525   1 0003FA  5C02                                 LDV,R5   2
          1 0003FB  D7C6 0002                            STH,R5   2,B6

      705    13526    4                     GOTO MAP_AND_ALT;

  13526   1 0003FD  0F81 003A                            B        s:13548,PREL

  13518   1                              MCL_END         null
      706    13527    4                     END;
      707    13528    3                END/* DO if error ~ ALTRET*/;
      708    13529
      709    13530    2           END/* DO if error ~ zero*/;
      710    13531
      711    13532        /*   If the ALIBFD bit has been set in the user table, call
      712    13533             the GUD$GET_DB routine to associate the debugger or
      713    13534             simply reset the TRAP# field in the TSA to %G_HOST_INT#.
      714    13535             The ISA area of the TSA for this MCL is modified so that
      715    13536             the trap handler will have a valid full TSA.  The user's
      716    13537             ASDT is then re-activated and an ALTRET to the trap handler
      717    13538             will cause the user's debugger to be entered.
      718    13539        */
      719    13540    1   MCL_END: ;
      720    13541    1      IF (G$MHJIT.CU$->G$U.ASYNCH & %U_ALIBFD)

  13541   1 0003FF  EC80 0000 0000  xsym MCL_END         LDB,B6   G$MHJIT$
          1 000402  DCC6 0352                            LDB,B5   850,B6
          1 000404  E845 0001                            LDR,R6   1,B5
          1 000406  E570 0800                            AND,R6   2048,IMO
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:81   
          1 000408  6901 003B                            BEZ,R6   s:13557,PREL
          1 00040A  CC80 0000 0000  xsym                 LDB,B4   G$UHJIT$
          1 00040D  E844 007E                            LDR,R6   126,B4
          1 00040F  6D03                                 CMV,R6   3
          1 000410  0901 000B                            BE       s:13544,PREL
          1 000412  BC80 0000 0000  xsym                 LDB,B3   G$ROS$
          1 000415  ACC3 0002                            LDB,B2   2,B3
          1 000417  82C2 0098                            LB,'0040'X        152,B2
          1 000419       0040
          1 00041A  0581 0029                            BBF      s:13557,PREL

      721    13542    1        AND (G$UHJIT.DMN.ID=%G_DMN_USR_SVC#  OR    G$JIT.JUNK.RTNFID)
      722    13543    2      THEN DO;

      723    13544    2           CALL GJU$GET_DB;

  13544   1 00041C  CBF0 0000                            LAB,B4   0,IMO
          1 00041E  E380 0000 0000  xent                 LNJ,B6   GJU$GET_DB
          1 000421       0001                            DC       s:13545,PREL

      724    13545    2           IF G$UHJIT.DMN.ID~=%G_DMN_USR_SVC# THEN EXIT;

  13545   1 000422  EC80 0000 0000  xsym                 LDB,B6   G$UHJIT$
          1 000425  E846 007E                            LDR,R6   126,B6
          1 000427  6D03                                 CMV,R6   3
          1 000428  0981 001B                            BNE      s:13557,PREL

      725    13546    2           G$TSA.ISA.ASV$ = G$UHJIT.ISA_USR.ASV$;

  13546   1 00042A  DCC6 007C                            LDB,B5   124,B6
          1 00042C  CCC7 0004                            LDB,B4   @G$TSA,AUTO
          1 00042E  DFC4 000D                            STB,B5   13,B4

      726    13547    2           G$TSA.ISA.ISM1 = G$UHJIT.ISA_USR.ISM1;

  13547   1 000430  E846 0082                            LDR,R6   130,B6
          1 000432  EF44 0013                            STR,R6   19,B4
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:82   

      727    13548    2           G$TSA.ISA.ISM2 = G$UHJIT.ISA_USR.ISM2;

  13548   1 000434  D846 0083                            LDR,R5   131,B6
          1 000436  DF44 0014                            STR,R5   20,B4

  13548   1                              MAP_AND_ALT     null
      728    13549    2   MAP_AND_ALT: ;
      729    13550    2           CALL GUD$ASD(G$ASDT_USR$->ASDT);

  13550   1 000438  BB80 0000 0000  xsym MAP_AND_ALT     LAB,B3   G$ASDT_USR$
          1 00043B  CBF0 0100                            LAB,B4   256,IMO
          1 00043D  E380 0000 0000  xent                 LNJ,B6   GUD$ASD
          1 000440       0001                            DC       s:13551,PREL

      730    13551    2           ALTRETURN;

  13551   1 000441  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      731    13552    2           END;
      732    13553
      733    13554        /*  Check for quantum end and async abort conditions.
      734    13555            If we are to abort this user, GHQ$QEND will set TSA.TRAP# to XCON.
      735    13556        */
      736    13557    1      G$TSA.I.TRAP# = 0;

  13557   1 000444  ECC7 0004                            LDB,B6   @G$TSA,AUTO
          1 000446  87C6 0002                            CLH      2,B6

      737    13558    1      IF NOT(G$JIT.JUNK.STEP)

  13558   1 000448  DC80 0000 0000  xsym                 LDB,B5   G$ROS$
          1 00044B  CCC5 0002                            LDB,B4   2,B5
          1 00044D  82C4 0098                            LB,'0010'X        152,B4
          1 00044F       0010
          1 000450  0501 0013                            BBT      s:13570,PREL

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:83   
      738    13559    2      THEN DO;

      739    13560    2   TSTQEND: CALL GHQ$MCLEND

  13560   1 000452  CBF0 0000            TSTQEND         LAB,B4   0,IMO
          1 000454  E380 0000 0000  xent                 LNJ,B6   GHQ$MCLEND
          1 000457       0003                            DC       s:13562,PREL
          1 000458  0F81 000B                            B        s:13570,PREL

      740    13561
      741    13562    3           WHENALTRETURN DO;

      742    13563    3   QEND:        CALL GHH$LEV (GH_LEV_SCHD); /* Trigger Scheduler to park         */

  13563   1 00045A  BB80 0000 0006  02   QEND            LAB,B3   +6
          1 00045D  CBF0 0100                            LAB,B4   256,IMO
          1 00045F  E380 0000 0000  xent                 LNJ,B6   GHH$LEV
          1 000462       0001                            DC       s:13564,PREL

      743    13564    3                GOTO TSTQEND;              /* Test again after park              */

  13564   1 000463  0FEF                                 B        s:13559,SPREL

      744    13565    3                END;
      745    13566    2           END/*not step*/;

      746    13567
      747    13568        /*  Now, switch the ASV$ back and re-activate the descriptors in ASDT_USR.
      748    13569        */
      749    13570    1      CALL GUD$ASD(G$ASDT_USR$->ASDT);

  13570   1 000464  BB80 0000 0000  xsym                 LAB,B3   G$ASDT_USR$
          1 000467  CBF0 0100                            LAB,B4   256,IMO
          1 000469  E380 0000 0000  xent                 LNJ,B6   GUD$ASD
          1 00046C       0001                            DC       s:13576,PREL

      750    13571
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:84   
      751    13572        /*   If this is the special return ALTRET to the trap handler to
      752    13573             cause a full environment to be loaded from the TSA.  Otherwise
      753    13574             simply RETURN to cause the trap handler to RTT.
      754    13575        */
      755    13576    1      IF (GUD_PARAMS.ERR.ERR# = %E$ALTRET) OR (G$TSA.I.TRAP# ~= 0)

  13576   1 00046D  E847 002C                            LDR,R6   GUD_PARAMS+4,AUTO
          1 00046F  6043                                 SOR,R6   3
          1 000470  E970 0192                            CMR,R6   402,IMO
          1 000472  0901 0007                            BE       s:13577,PREL
          1 000474  ECC7 0004                            LDB,B6   @G$TSA,AUTO
          1 000476  D2C6 0002                            LLH,R5   2,B6
          1 000478  5901 0004                            BEZ,R5   s:13578,PREL

      756    13577    1      THEN ALTRETURN;

  13577   1 00047A  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      757    13578    1      ELSE RETURN;

  13578   1 00047D  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      758    13579
      759    13580        %EJECT;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:85   
      760    13581        /*I* NAME: CHECK_USR_MEM
      761    13582
      762    13583             PURPOSE: To verify that the monitor can access the FPT and
      763    13584                      then data framed by each vector within the FPT.
      764    13585
      765    13586             CALL:  CALL CHECK_USR_MEM(INFO$) ALTRET(label)
      766    13587
      767    13588             INPUT: GUD$PTR$ = address of the specific GUD_VECT_INFO
      768    13589                    FPT$ = address of the vector to be checked.
      769    13590
      770    13591             OUTPUT: ASDT_USR_INDX = index into the user ASDT for the vector
      771    13592                     USR_VBASE = word address of the base of the segment
      772    13593                                 specified by USR_VBASE
      773    13594        */
      774    13595    1   CHECK_USR_MEM: PROC ALTRET;

  13595   1 000480  EFC7 0088            CHECK_USR_MEM   STB,B6   ENVTCB_PARAMS+16,AUTO

      775    13596
      776    13597        /* ALTRET if the pointer isn't reasonable.
      777    13598        */
      778    13599    2      IF FPT$->G$VECTOR.CBASE.MBZ ~= 0

  13599   1 000482  DCC7 0010                            LDB,B5   FPT$,AUTO
          1 000484  82C5 0001                            LB,'7FF0'X        1,B5
          1 000486       7FF0
          1 000487  0501 00A4                            BBT      s:13662,PREL

      779    13600    2      THEN GOTO BAD_VECT;
      780    13601
      781    13602        /*  We will also ALTRET if the MCL handler expects a word boundry
      782    13603            and the user has passed a CPTR for the parameter.
      783    13604        */
      784    13605    2      IF GUD$PTR$->VECT$INFO.ALIGN = 0

  13605   1 000489  CCC7 0006                            LDB,B4   GUD$PTR$,AUTO
          1 00048B  8284                                 LB,'1000'X        ,B4
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:86   
          1 00048C       1000
          1 00048D  0501 0005                            BBT      s:13612,PREL
          1 00048F  89C5 0001                            CMZ      1,B5
          1 000491  0801 009A                            BAL      s:13662,PREL

      785    13606    2        AND FPT$->G$VECTOR.CBASE.C ='1'B
      786    13607    2      THEN GOTO BAD_VECT;
      787    13608
      788    13609        /*  And if the byte size specified in the vector is less than that
      789    13610            specified as the minimum size in the %VECT macro, we ALTRET.
      790    13611        */
      791    13612    2      IF GUD$PTR$->VECT$INFO.BND > FPT$->G$VECTOR.BND

  13612   1 000493  E844 0001                            LDR,R6   1,B4
          1 000495  E905                                 CMR,R6   ,B5
          1 000496  0301 0095                            BG       s:13662,PREL

      792    13613    2      THEN GOTO BAD_VECT;
      793    13614
      794    13615        /*  If the table indicates that the parameter is little, but the user
      795    13616            is trying to pass us a big one, it is an error.
      796    13617        */
      797    13618    2      IF (GUD$PTR$->VECT$INFO.TYP = 0)

  13618   1 000498  8284                                 LB,'2000'X        ,B4
  13618   1 000499       2000
          1 00049A  0501 0006                            BBT      s:13626,PREL
          1 00049C  D805                                 LDR,R5   ,B5
          1 00049D  D970 1000                            CMR,R5   4096,IMO
          1 00049F  0301 008C                            BG       s:13662,PREL

      798    13619    2        AND (FPT$->G$VECTOR.BND > (1024 * 4) )
      799    13620    2      THEN GOTO BAD_VECT;
      800    13621
      801    13622        /*  Now, based on the address the user has specified in this vector,
      802    13623            we set up an index into the user's base level ASDT and compute
      803    13624            the virtual base address of that segment.
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:87   
      804    13625        */
      805    13626    2      IF FPT$->G$VECTOR.CBASE.ADDRS >= %GM_SEG0100_BASE

  13626   1 0004A1  8CC5 0001                            LDI      1,B5
          1 0004A3  E570 000F                            AND,R6   15,IMO
          1 0004A5  84F0 0001 0000                       SID      65536,IMO
          1 0004A8  0681 0015                            BCF      s:13632,PREL

      806    13627    3      THEN DO;

      807    13628    3           ASDT_USR_INDX = (FPT$->G$VECTOR.CBASE.ADDRS / (1024 * 64)) +15;

  13628   1 0004AA  8CC5 0001                            LDI      1,B5
          1 0004AC  E570 000F                            AND,R6   15,IMO
          1 0004AE  70D0                                 DOR,R7   16
          1 0004AF  8470 0000 000F                       AID      15,IMO
          1 0004B2  E857                                 LDR,R6   R7
          1 0004B3  EF47 0015                            STR,R6   ASDT_USR_INDX,AUTO

      808    13629    3           USR_VBASE = (ASDT_USR_INDX -15) * (1024 * 64);

  13629   1 0004B5  70F0                                 DAR,R7   16
          1 0004B6  7090                                 DOL,R7   16
          1 0004B7  8470 FFF1 0000                       AID      -983040,IMO
          1 0004BA  8D47 001E                            SDI      USR_VBASE,AUTO

      809    13630    3           END;

  13630   1 0004BC  0F81 000D                            B        s:13638,PREL

      810    13631    3      ELSE DO;

      811    13632    3           ASDT_USR_INDX = FPT$->G$VECTOR.CBASE.ADDRS / (1024 * 4);

  13632   1 0004BE  8CC5 0001                            LDI      1,B5
          1 0004C0  E570 000F                            AND,R6   15,IMO
          1 0004C2  70CC                                 DOR,R7   12
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:88   
          1 0004C3  E857                                 LDR,R6   R7
          1 0004C4  EF47 0015                            STR,R6   ASDT_USR_INDX,AUTO

      812    13633    3           USR_VBASE = (ASDT_USR_INDX) * (1024 * 4);

  13633   1 0004C6  70F0                                 DAR,R7   16
          1 0004C7  708C                                 DOL,R7   12
          1 0004C8  8D47 001E                            SDI      USR_VBASE,AUTO

      813    13634    3           END;

      814    13635
      815    13636        /* Verify that the access is adequate.
      816    13637        */
      817    13638    2      IF G$ASDT_USR$->ASDT.DESC.V(ASDT_USR_INDX)  = '0'B

  13638   1 0004CA  BC80 0000 0000  xsym                 LDB,B3   G$ASDT_USR$
          1 0004CD  B847 0015                            LDR,R3   ASDT_USR_INDX,AUTO
          1 0004CF  3001                                 SOL,R3   1
          1 0004D0  89B3                                 CMZ      ,B3,R3
          1 0004D1  0881 005A                            BAGE     s:13662,PREL

      818    13639    2      THEN GOTO BAD_VECT;
      819    13640
      820    13641        /*N* The following BITBINs can go away if PL-6 is updated to not
      821    13642             generate the call to X6B_BCM.
      822    13643        */
      823    13644    2      IF GUD$PTR$->VECT$INFO.WRT = 1

  13644   1 0004D3  D804                                 LDR,R5   ,B4
          1 0004D4  504E                                 SOR,R5   14
          1 0004D5  D570 0001                            AND,R5   1,IMO
          1 0004D7  5D01                                 CMV,R5   1
          1 0004D8  0981 0012                            BNE      s:13650,PREL

      824    13645    3      THEN DO;

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:89   
      825    13646    3           IF BITBIN(G$ASDT_USR$->ASDT.DESC.WP(ASDT_USR_INDX)) > BITBIN(G$TSA.S.RING)

  13646   1 0004DA  3E01                                 ADV,R3   1
          1 0004DB  C833                                 LDR,R4   ,B3,R3
          1 0004DC  404C                                 SOR,R4   12
          1 0004DD  C570 0003                            AND,R4   3,IMO
          1 0004DF  ACC7 0004                            LDB,B2   @G$TSA,AUTO
          1 0004E1  A842 000C                            LDR,R2   12,B2
          1 0004E3  204D                                 SOR,R2   13
          1 0004E4  A570 0003                            AND,R2   3,IMO
          1 0004E6  C952                                 CMR,R4   R2
          1 0004E7  0301 0044                            BG       s:13662,PREL

      826    13647    3           THEN GOTO BAD_VECT;
      827    13648    3           END;

  13648   1 0004E9  0F81 000E                            B        s:13656,PREL

      828    13649    3      ELSE DO;

      829    13650    3           IF BITBIN(G$ASDT_USR$->ASDT.DESC.RP(ASDT_USR_INDX)) > BITBIN(G$TSA.S.RING)

  13650   1 0004EB  3E01                                 ADV,R3   1
          1 0004EC  C833                                 LDR,R4   ,B3,R3
          1 0004ED  404E                                 SOR,R4   14
          1 0004EE  ACC7 0004                            LDB,B2   @G$TSA,AUTO
          1 0004F0  A842 000C                            LDR,R2   12,B2
          1 0004F2  204D                                 SOR,R2   13
          1 0004F3  A570 0003                            AND,R2   3,IMO
          1 0004F5  C952                                 CMR,R4   R2
          1 0004F6  0301 0035                            BG       s:13662,PREL

      830    13651    3           THEN GOTO BAD_VECT;
      831    13652    3           END;

      832    13653
      833    13654        /* Make sure that the vector frames data within one single segment.
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:90   
      834    13655        */
      835    13656    2      LAST_FPT_BYTE = FPT$->G$VECTOR.CBASE.ADDRS

  13656   1 0004F8  C805                                 LDR,R4   ,B5
          1 0004F9  4E01                                 ADV,R4   1
          1 0004FA  4041                                 SOR,R4   1
          1 0004FB  8CC5 0001                            LDI      1,B5
          1 0004FD  E570 000F                            AND,R6   15,IMO
          1 0004FF  8D47 008A                            SDI      ENVTCB_PARAMS+18,AUTO
          1 000501  F854                                 LDR,R7   R4
          1 000502  6C00                                 LDV,R6   0
          1 000503  8447 008A                            AID      ENVTCB_PARAMS+18,AUTO
          1 000505  8D47 0019                            SDI      LAST_FPT_BYTE,AUTO

      836    13657    2        + (FPT$->G$VECTOR.BND + 1) /2;
      837    13658
      838    13659    2      LAST_SEG_BYTE = USR_VBASE

  13659   1 000507  F833                                 LDR,R7   ,B3,R3
          1 000508  F570 01FF                            AND,R7   511,IMO
          1 00050A  6C00                                 LDV,R6   0
          1 00050B  7088                                 DOL,R7   8
          1 00050C  8447 001E                            AID      USR_VBASE,AUTO
          1 00050E  8470 0000 0100                       AID      256,IMO
          1 000511  8D47 0017                            SDI      LAST_SEG_BYTE,AUTO

      839    13660    2        + ( (G$ASDT_USR$->ASDT.DESC.SIZE(ASDT_USR_INDX)+1) * 256);
      840    13661
      841    13662    2      IF LAST_FPT_BYTE > LAST_SEG_BYTE

  13662   1 000513  8CC7 0019                            LDI      LAST_FPT_BYTE,AUTO
          1 000515  84C7 0017                            SID      LAST_SEG_BYTE,AUTO
          1 000517  0681 000E                            BCF      s:13672,PREL
          1 000519  6981 0003                            BNEZ,R6  s:13664,PREL
          1 00051B  7901 000A                            BEZ,R7   s:13672,PREL

      842    13663    3      THEN DO;
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:91   

      843    13664    3           GUD_PARAMS.ERR = EBADSEGSPAN;

  13664   1 00051D  8C80 0000 000C  00                   LDI      EBADSEGSPAN
          1 000520  8D47 002B                            SDI      GUD_PARAMS+3,AUTO

      844    13665    3           ALTRETURN;

  13665   1 000522  ECC7 0088                            LDB,B6   ENVTCB_PARAMS+16,AUTO
          1 000524  A806                                 LDR,R2   ,B6
          1 000525  C3A6                                 LNJ,B4   ,B6,R2

      845    13666    3           END;
      846    13667
      847    13668        /*E*   ERROR:   GUD-E$BADSEGSPAN-E
      848    13669               MESSAGE:  FPT vector spans a segment.
      849    13670               DESCRIPTION:  Could be an FEPLINK problem.
      850    13671        */
      851    13672    2      RETURN;

  13672   1 000526  ECC7 0088                            LDB,B6   ENVTCB_PARAMS+16,AUTO
          1 000528  C3C6 0001                            LNJ,B4   1,B6

      852    13673
      853    13674    2   SET_BAD_VECT: ENTRY ALTRET;

  13674   1 00052A  EFC7 0088            SET_BAD_VECT    STB,B6   ENVTCB_PARAMS+16,AUTO

  13662   1                              BAD_VECT        null
      854    13675    2   BAD_VECT: ;
      855    13676    2      GUD_PARAMS.ERR = EBADVECT;

  13676   1 00052C  8C80 0000 000A  00   BAD_VECT        LDI      EBADVECT
          1 00052F  8D47 002B                            SDI      GUD_PARAMS+3,AUTO

      856    13677    2      GUD_PARAMS.ERR.ERR# = GUD_PARAMS.ERR.ERR# +I;

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:92   
  13677   1 000531  D847 002C                            LDR,R5   GUD_PARAMS+4,AUTO
          1 000533  5043                                 SOR,R5   3
          1 000534  DA47 0014                            ADD,R5   I,AUTO
          1 000536  5003                                 SOL,R5   3
          1 000537  DAC7 002C                            SRM,R5,'FFF8'X    GUD_PARAMS+4,AUTO
          1 000539       FFF8

      857    13678    2      ALTRETURN;

  13678   1 00053A  ECC7 0088                            LDB,B6   ENVTCB_PARAMS+16,AUTO
          1 00053C  B806                                 LDR,R3   ,B6
          1 00053D  C3B6                                 LNJ,B4   ,B6,R3
      858    13679
      859    13680    2   END CHECK_USR_MEM;
      860    13681    1   END GUD$MCL_HAND;
      861    13682        %EOD;

PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:93   
--  Include file information  --

   UD_SCODE_C.:E05TOU  is referenced.
   UD_ERRORS_C.:E05TOU  is referenced.
   GM_VIRTUAL_E.:E05TOU  is referenced.
   GH_SCHD_E.:E05TOU  is referenced.
   GU_MACROS_M.:E05TOU  is referenced.
   GH_GATE_M.:E05TOU  cannot be made into a system file and is referenced.
   G_ROS_M.:E05TOU  is referenced.
   GH_SCHD_M.:E05TOU  is referenced.
   G_HJIT_M.:E05TOU  is referenced.
   G_JIT_M.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GUD$MCL_HAND.
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:94   

 **** Variables and constants ****

  ****  Section 000 RoData GUD$MCL_HAND

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w STRC(32)    r     1 EBADCODE                   6-0-0/w STRC(32)    r     1 EBADFPT
     C-0-0/w STRC(32)    r     1 EBADSEGSPAN                A-0-0/w STRC(32)    r     1 EBADVECT
     8-0-0/w STRC(32)    r     1 ENOFPT                     E-0-0/w STRC(32)    r     1 ENOTAUTH
     0-0-0/w STRC(32)    r     1 GUD_FPT                   10-0-0/w STRC(48)    r     1 GUD_SCODE1

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @G$TSA                     E-0-0/w PTR         r     1 ASDT_MCL$
    16-0-0/w SBIN(16)    r     1 ASDT_MCL_INDX             15-0-0/w SBIN(16)    r     1 ASDT_USR_INDX
    24-0-0/w SBIN(16)    r     1 BLOCK_INDEX               1C-0-0/w SBIN(16)    r     1 BPARS_USED
    78-0-0/w STRC(240)   r     1 ENVTCB_PARAMS             10-0-0/w PTR         r     1 FPT$
    *0-0-0/w STRC(928)   r     1 G$TSA                      8-0-0/w PTR         r     1 GUD$ECCB$
     6-0-0/w PTR         r     1 GUD$PTR$                  25-0-0/w STRC(48)    r     1 GUD@VECTOR
    28-0-0/w STRC(1280)  r     1 GUD_PARAMS                 C-0-0/w EPTR        r     1 HAND$
    14-0-0/w SBIN(16)    r     1 I                         19-0-0/w UBIN(32)    r     1 LAST_FPT_BYTE
     A-0-0/w SBIN(16)    r     1 LAST_MCL                  17-0-0/w UBIN(32)    r     1 LAST_SEG_BYTE
    1B-0-0/w SBIN(16)    r     1 LPARS_USED                22-0-0/w SBIN(32)    r     1 MCL_OFFSET
     B-0-0/w SBIN(16)    r     1 NUM_VECT                  1D-0-0/w SBIN(16)    r     1 PARAM_DESC_USED
    12-0-0/w PTR         r     1 T$                        20-0-0/w SBIN(32)    r     1 USR_OFFSET
    1E-0-0/w UBIN(32)    r     1 USR_VBASE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 G$ASDT_MCL$                0-0-0/w PTR         r     1 G$ASDT_USR$
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:95   
     0-0-0/w PTR         r     1 G$MHJIT$                   0-0-0/w PTR         r     1 G$ROS$
     0-0-0/w PTR         r     1 G$UHJIT$                   0-0-0/w UBIN(16)    r     1 GH_LEV_SCHD
     0-0-0/w STRC(48)    r     1 GM_MEATLOCK                0-0-0/w SBIN(16)    r     1 GUD_MAXFCG
     0-0-0/w STRC(32)    r     1 GUD_MCL_TABLE
     0-0-0/b BIT         r     1 G_KEEP_USER(0:63)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN(16)    r     1 ALT_SPEC                   0-0-0/w STRC(32)    r     1 ASDT(0:30)
     0-0-0/w UBIN(8)     r     1 DCB#                       0-0-0/w STRC(16)    r     1 FCG$INFO
     0-0-0/w STRC(48)    r     1 FCG$INFO_WITH_HAND         0-0-0/w STRC(32)    r     1 G$CPTR
     0-0-0/w STRC(224)   r     1 G$ECCB                     0-0-0/w STRC(5616)  r     1 G$JIT
     0-0-0/w STRC(27232) r     1 G$MHJIT                    0-0-0/w STRC(928)   r     1 G$ROS
     0-0-0/w STRC(384)   r     1 G$U                        0-0-0/w STRC(6480)  r     1 G$UHJIT
     0-0-0/w STRC(48)    r     1 G$VECTOR                   0-0-0/w STRC(16)    r     1 MCL$INFO
     0-0-0/w STRC(48)    r     1 MCL$INFO_WITH_HAND         0-0-0/w STRC(32)    r     1 VECT$INFO


   Procedure GUD$MCL_HAND requires 1342 words for executable code.
   Procedure GUD$MCL_HAND requires 140 words of local(AUTO) storage.
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:96   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:97   
          MINI XREF LISTING

ALT_SPEC
     12176**DCL     13024>>ASSIGN
ASDT
      1734**DCL     13382<>CALL    13403<>CALL    13550<>CALL    13570<>CALL
ASDT.DESC
      1751**DCL     13316<<ASSIGN  13316>>ASSIGN
ASDT.DESC.BASE
      1753**DCL     13324<<ASSIGN  13324>>ASSIGN  13329<<ASSIGN
ASDT.DESC.RP
      1753**DCL     13650>>IF
ASDT.DESC.SIZE
      1755**DCL     13359<<ASSIGN  13659>>ASSIGN
ASDT.DESC.V
      1753**DCL     13638>>IF
ASDT.DESC.WP
      1754**DCL     13646>>IF
ASDT_MCL$
      1249**DCL     13206<<ASSIGN  13216<<ASSIGN  13316>>ASSIGN  13324>>ASSIGN  13329>>ASSIGN  13359>>ASSIGN
ASDT_MCL_INDX
      1254**DCL     13251<<ASSIGN  13271<<ASSIGN  13277>>ASSIGN  13289<<ASSIGN  13292>>ASSIGN  13316>>ASSIGN
     13324>>ASSIGN  13329>>ASSIGN  13330>>ASSIGN  13359>>ASSIGN
ASDT_USR_INDX
      1253**DCL     13316>>ASSIGN  13324>>ASSIGN  13330>>ASSIGN  13628<<ASSIGN  13629>>ASSIGN  13632<<ASSIGN
     13633>>ASSIGN  13638>>IF      13646>>IF      13650>>IF      13659>>ASSIGN
BAD_CODE
     13064**LABEL   13076--GOTO    13093--GOTO
BAD_VECT IN PROCEDURE CHECK_USR_MEM
     13662**LABEL   13600--GOTO    13607--GOTO    13613--GOTO    13620--GOTO    13639--GOTO    13647--GOTO
     13651--GOTO
BLOCK_INDEX
      1263**DCL     13303<<ASSIGN  13324>>ASSIGN  13329>>ASSIGN  13345>>ASSIGN
BPARS_USED
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:98   
      1258**DCL     13208<<ASSIGN  13286>>IF      13289>>ASSIGN  13290<<ASSIGN  13290>>ASSIGN
CALL_HANDLER
     13360**LABEL   13140--GOTO    13195--GOTO
CHECK_MAND
     13217**LABEL   13225--GOTO
CHECK_USR_MEM
     13595**PROC    13153--CALL    13243--CALL
DCB#
     12177**DCL     13512>>ASSIGN
DELTAGO
     13048**LABEL   13037--GOTO
EBADCODE
     12646**DCL     13065>>ASSIGN
EBADFPT
     12693**DCL     13160>>ASSIGN
EBADSEGSPAN
     12834**DCL     13664>>ASSIGN
EBADVECT
     12787**DCL     13676>>ASSIGN
ENOFPT
     12740**DCL     13180>>ASSIGN
ENOTAUTH
     12881**DCL     13039>>ASSIGN
ENTER_FD
     13468**LABEL   13463--GOTO
ENVTCB_PARAMS
      1349**DCL     13518<>CALL
ENVTCB_PARAMS.ECC
      1349**DCL     13473<<ASSIGN  13495<<ASSIGN
ENVTCB_PARAMS.ECINFO.ERR
      1435**DCL     13514<<ASSIGN
ENVTCB_PARAMS.ECINFO.EVID
      1392**DCL      1410--REDEF    1418--REDEF    1418--REDEF   13512<<ASSIGN  13513<<ASSIGN
ENVTCB_PARAMS.ECINFO.MCL_CODE
      1369**DCL     13497<<ASSIGN
ENVTCB_PARAMS.ECINFO.P#
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:99   
      1465**DCL     13515<<ASSIGN
ENVTCB_PARAMS.ECINFO.SUBC
      1369**DCL      1369--REDEF    1387--REDEF    1391--REDEF    1391--REDEF
ENVTCB_PARAMS.ECINFO.TRAP
      1391**DCL     13477<<ASSIGN
ENVTCB_PARAMS.ECINFO.TRAP.TRAP#
      1391**DCL     13478<<ASSIGN
ENVTCB_PARAMS.ENV$
      1467**DCL     13506<<ASSIGN
ENVTCB_PARAMS.ENVTYPE
      1467**DCL     13508<<ASSIGN
ENVTCB_PARAMS.MOREINFO$
      1467**DCL     13516<<ASSIGN
ENVTCB_PARAMS.P$
      1349**DCL     13476<<ASSIGN  13496<<ASSIGN
ENVTCB_PARAMS.P$$
      1349**DCL      1349--REDEF   13475<<ASSIGN
ENVTCB_PARAMS.TCB$
      1467**DCL     13507<<ASSIGN
FCG$INFO
      1584**DCL     13088--ASSIGN
FCG$INFO.C
      1590**DCL     13075>>IF      13078>>ASSIGN
FCG$INFO.FCG_TYP
      1588**DCL     13080>>IF
FCG$INFO_WITH_HAND
      1618**DCL     13083--ASSIGN
FCG$INFO_WITH_HAND.HAND
      1626**DCL     13082>>ASSIGN
FPT$
      1250**DCL     13149<<ASSIGN  13155<<ASSIGN  13173<<ASSIGN  13175>>IF      13227>>IF      13302>>ASSIGN
     13351>>ASSIGN  13356>>ASSIGN  13356>>ASSIGN  13365>>ASSIGN  13375<<ASSIGN  13375>>ASSIGN  13599>>IF
     13605>>IF      13612>>IF      13618>>IF      13626>>IF      13628>>ASSIGN  13632>>ASSIGN  13656>>ASSIGN
     13656>>ASSIGN
G$ASDT_MCL$
      1537**DCL     13206>>ASSIGN  13382>>CALL    13403>>CALL
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:100  
G$ASDT_USR$
      1536**DCL     13316>>ASSIGN  13324>>ASSIGN  13550>>CALL    13570>>CALL    13638>>IF      13646>>IF
     13650>>IF      13659>>ASSIGN
G$CPTR.C
      1730**DCL     13351<<ASSIGN
G$ECCB.FLTFLG
      2283**DCL      2314--REDEF
G$ECCB.FLTFLGS
      2314**DCL     13460>>IF
G$ECCB.TRAP$
      2261**DCL     13460>>IF      13475>>ASSIGN
G$JIT.CALCNT
      1864**DCL     13060<<ASSIGN  13060>>ASSIGN
G$JIT.DB#
      1977**DCL     13045>>IF      13463>>IF      13474>>IF
G$JIT.ERR
      1884**DCL     13132<<ASSIGN  13465<<ASSIGN
G$JIT.ERRLOG
      2126**DCL      2129--REDEF
G$JIT.FD_ALTERR
      2153**DCL     13490<<ASSIGN
G$JIT.FD_P$
      1963**DCL     13489<<ASSIGN
G$JIT.JSUNIT
      1865**DCL      1866--REDEF
G$JIT.JUNK.BACKP$
      2118**DCL     13413>>IF      13415<<ASSIGN
G$JIT.JUNK.RTNFID
      2123**DCL     13541>>IF
G$JIT.JUNK.STEP
      2124**DCL     13558>>IF
G$JIT.MCLS
      1864**DCL      1864--REDEF
G$JIT.PRIV.ACTIVE.SCREECH
      2000**DCL     13036>>IF
G$JIT.PRIV.ACTIVE.SNAP
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:101  
      2000**DCL     13036>>IF
G$JIT.RNST
      2096**DCL     13466<<ASSIGN  13466>>ASSIGN
G$JIT.TMRZ
      2133**DCL      2134--REDEF
G$JIT.USER_EXTIME
      1857**DCL      1858--REDEF
G$JIT.USER_MEMTIME
      1860**DCL      1860--REDEF
G$JIT.USER_SVTIME
      1859**DCL      1859--REDEF
G$MHJIT.CU$
      8672**DCL     13541>>IF
G$MHJIT.INTCON.HHJIT
      8806**DCL      8806--REDEF
G$MHJIT.INTCON.P$$
      8779**DCL      8779--REDEF
G$MHJIT.ISA_BIGFOOT.P$$
      5724**DCL      5724--REDEF
G$MHJIT.ISA_DBINH.P$$
      6938**DCL      6938--REDEF
G$MHJIT.ISA_IDLE.P$$
      3819**DCL      3819--REDEF
G$MHJIT.ISA_LVL10.P$$
      7241**DCL      7241--REDEF
G$MHJIT.ISA_LVL11.P$$
      7544**DCL      7544--REDEF
G$MHJIT.ISA_LVL12.P$$
      7847**DCL      7847--REDEF
G$MHJIT.ISA_LVL5.P$$
      6027**DCL      6027--REDEF
G$MHJIT.ISA_OV.P$$
      5421**DCL      5421--REDEF
G$MHJIT.ISA_PFS.P$$
      5092**DCL      5092--REDEF
G$MHJIT.ISA_RT_CLOCK.P$$
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:102  
      8454**DCL      8454--REDEF
G$MHJIT.ISA_SATYR_RCV.P$$
      6331**DCL      6331--REDEF
G$MHJIT.ISA_SATYR_TRN.P$$
      6635**DCL      6635--REDEF
G$MHJIT.ISA_SCHD.P$$
      8150**DCL      8150--REDEF
G$MHJIT.ISA_WDOG.P$$
      5200**DCL      5200--REDEF
G$MHJIT.TSA_DB.ISA.P$$
      4422**DCL      4422--REDEF
G$MHJIT.TSA_DB.P$$
      4293**DCL      4293--REDEF    4294--REDEF
G$MHJIT.TSA_HND.ISA.P$$
      9000**DCL      9000--REDEF
G$MHJIT.TSA_HND.P$$
      8871**DCL      8871--REDEF    8872--REDEF
G$MHJIT.TSA_MON.ISA.P$$
      4034**DCL      4034--REDEF
G$MHJIT.TSA_MON.P$$
      3905**DCL      3905--REDEF    3906--REDEF
G$MHJIT.TSA_OV.ISA.P$$
      4810**DCL      4810--REDEF
G$MHJIT.TSA_OV.P$$
      4681**DCL      4681--REDEF    4682--REDEF
G$MHJIT$
      1538**DCL      2344--IMP-PTR 13541>>IF
G$ROS.AUTO_DS$
      2219**DCL      2220--REDEF
G$ROS.AUTO_T$
      2220**DCL      2220--REDEF
G$ROS.DB_ECCB$
      2217**DCL     13457>>ASSIGN
G$ROS.JIT$
      2215**DCL     13036>>IF      13036>>IF      13045>>IF      13060>>ASSIGN  13060>>ASSIGN  13132>>ASSIGN
     13413>>IF      13415>>ASSIGN  13463>>IF      13465>>ASSIGN  13466>>ASSIGN  13466>>ASSIGN  13474>>IF
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:103  
     13489>>ASSIGN  13490>>ASSIGN  13541>>IF      13558>>IF
G$ROS.U_ECCB$
      2217**DCL     13458>>ASSIGN
G$ROS$
      1535**DCL     13036>>IF      13036>>IF      13045>>IF      13060>>ASSIGN  13060>>ASSIGN  13132>>ASSIGN
     13413>>IF      13415>>ASSIGN  13457>>ASSIGN  13458>>ASSIGN  13463>>IF      13465>>ASSIGN  13466>>ASSIGN
     13466>>ASSIGN  13474>>IF      13489>>ASSIGN  13490>>ASSIGN  13541>>IF      13558>>IF
G$TSA
       879**DCL         9--PROC    13018--ENTRY   13134--ASSIGN  13506--ASSIGN
G$TSA.B3$
       912**DCL     13147>>ASSIGN  13155>>ASSIGN
G$TSA.I
       901**DCL     13477>>ASSIGN
G$TSA.I.TRAP#
       903**DCL     13045>>IF      13051<<ASSIGN  13468<<ASSIGN  13479<<ASSIGN  13520>>IF      13525<<ASSIGN
     13557<<ASSIGN  13576>>IF
G$TSA.ISA.ASV$
       967**DCL     13546<<ASSIGN
G$TSA.ISA.ISM1
      1007**DCL     13547<<ASSIGN
G$TSA.ISA.ISM2
      1032**DCL     13548<<ASSIGN
G$TSA.ISA.P$$
      1040**DCL      1040--REDEF
G$TSA.ISA.REGS.M1.J
      1134**DCL     13523>>IF
G$TSA.P
       912**DCL     13416<<ASSIGN  13416>>ASSIGN  13426<<ASSIGN  13426>>ASSIGN
G$TSA.P$
       911**DCL     13024>>ASSIGN  13467<<ASSIGN  13467>>ASSIGN  13476>>ASSIGN  13489>>ASSIGN  13491<<ASSIGN
     13491>>ASSIGN  13496>>ASSIGN  13502<<ASSIGN  13502>>ASSIGN
G$TSA.P$$
       911**DCL       911--REDEF     912--REDEF
G$TSA.R3
       908**DCL     13023>>ASSIGN  13497>>ASSIGN
G$TSA.S.RING
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:104  
       933**DCL     13646>>IF      13650>>IF
G$TSA.Z.IS
       910**DCL     13059<<ASSIGN
G$U.ASYNCH
      2322**DCL     13541>>IF
G$U.MISC
      2322**DCL      2322--REDEF
G$UHJIT.DMN.ID
     10936**DCL     13045>>IF      13456>>IF      13487>>IF      13541>>IF      13545>>IF
G$UHJIT.ISA_USR
     10641**DCL     10936--REDEF
G$UHJIT.ISA_USR.ASV$
     10643**DCL     13546>>ASSIGN
G$UHJIT.ISA_USR.ISM1
     10683**DCL     13547>>ASSIGN
G$UHJIT.ISA_USR.ISM2
     10708**DCL     13548>>ASSIGN
G$UHJIT.ISA_USR.P$$
     10716**DCL     10716--REDEF
G$UHJIT.TSA_CP.ISA.P$$
     11923**DCL     11923--REDEF
G$UHJIT.TSA_CP.P$$
     11794**DCL     11794--REDEF   11795--REDEF
G$UHJIT.TSA_DB.ISA.P$$
     11535**DCL     11535--REDEF
G$UHJIT.TSA_DB.P$$
     11406**DCL     11406--REDEF   11407--REDEF
G$UHJIT.TSA_RTT.P$$
     12169**DCL     12169--REDEF   12170--REDEF
G$UHJIT.TSA_USR.ISA.P$$
     11125**DCL     11125--REDEF
G$UHJIT.TSA_USR.P$$
     10996**DCL     10996--REDEF   10997--REDEF
G$UHJIT$
      1539**DCL      9218--IMP-PTR 13045>>IF      13456>>IF      13487>>IF      13541>>IF      13545>>IF
     13546>>ASSIGN  13547>>ASSIGN  13548>>ASSIGN
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:105  
G$VECTOR
      1725**DCL     13375--ASSIGN
G$VECTOR.BASE$
      1725**DCL      1725--REDEF    1725--REDEF
G$VECTOR.BND
      1725**DCL     13356>>ASSIGN  13365>>ASSIGN  13612>>IF      13618>>IF      13656>>ASSIGN
G$VECTOR.CBASE
      1725**DCL     13227>>IF
G$VECTOR.CBASE.ADDRS
      1725**DCL     13302>>ASSIGN  13626>>IF      13628>>ASSIGN  13632>>ASSIGN  13656>>ASSIGN
G$VECTOR.CBASE.C
      1725**DCL     13351>>ASSIGN  13356>>ASSIGN  13605>>IF
G$VECTOR.CBASE.MBZ
      1725**DCL     13599>>IF
GHH$LEV
     12187**DCL-ENT 13563--CALL
GHH$LOCK
       690**DCL-ENT 13313--CALL
GHH$UNLOCK
       690**DCL-ENT 13338--CALL
GHQ$MCLEND
     12185**DCL-ENT 13560--CALL
GHR$SRV
     12186**DCL-ENT 13058--CALL
GH_LEV_SCHD
      1561**DCL     13563<>CALL
GJU$GET_DB
     12184**DCL-ENT 13544--CALL
GM_MEATLOCK
      1554**DCL     13313<>CALL    13338<>CALL
GUD$ASD
     12182**DCL-ENT 13382--CALL    13403--CALL    13550--CALL    13570--CALL
GUD$ECCB$
      1245**DCL     13457<<ASSIGN  13458<<ASSIGN  13460>>IF      13460>>IF      13475>>ASSIGN
GUD$PTR$
      1244**DCL     13073<<ASSIGN  13075>>IF      13078>>ASSIGN  13080>>IF      13082>>ASSIGN  13083<<ASSIGN
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:106  
     13083>>ASSIGN  13088<<ASSIGN  13088>>ASSIGN  13091>>DOWHILE 13092>>IF      13096<<ASSIGN  13096>>ASSIGN
     13096>>ASSIGN  13099<<ASSIGN  13099>>ASSIGN  13099>>ASSIGN  13110>>ASSIGN  13124>>ASSIGN  13125<<ASSIGN
     13125>>ASSIGN  13127<<ASSIGN  13127>>ASSIGN  13150>>ASSIGN  13151<<ASSIGN  13156<<ASSIGN  13178>>IF
     13189<<ASSIGN  13189>>ASSIGN  13230>>IF      13263>>IF      13374<<ASSIGN  13374>>ASSIGN  13605>>IF
     13612>>IF      13618>>IF      13644>>IF
GUD@VECTOR
      1265**DCL     13149--ASSIGN
GUD@VECTOR.BASE$
      1265**DCL      1265--REDEF    1265--REDEF   13147<<ASSIGN
GUD@VECTOR.BND
      1265**DCL     13148<<ASSIGN
GUD_FPT
      1493**DCL     13151--ASSIGN
GUD_MAXFCG
      1530**DCL     13062>>IF
GUD_MCL_TABLE.INDEX_
      1533**DCL     13073>>ASSIGN
GUD_PARAMS
      1271**DCL     13384<>CALL
GUD_PARAMS.ALT_SPEC
      1327**DCL     13024<<ASSIGN  13442>>IF      13491>>ASSIGN  13496>>ASSIGN
GUD_PARAMS.ASDT_USR_INDX
      1334**DCL     13330<<ASSIGN
GUD_PARAMS.BND
      1331**DCL      1332--REDEF
GUD_PARAMS.BND_ARRAY
      1332**DCL     13191<<ASSIGN  13234<<ASSIGN  13365<<ASSIGN
GUD_PARAMS.DESC
      1333**DCL      1334--REDEF   13216--ASSIGN
GUD_PARAMS.ERR
      1297**DCL     13039<<ASSIGN  13065<<ASSIGN  13133<<ASSIGN  13160<<ASSIGN  13180<<ASSIGN  13465>>ASSIGN
     13490>>ASSIGN  13514>>ASSIGN  13664<<ASSIGN  13676<<ASSIGN
GUD_PARAMS.ERR.ERR#
      1324**DCL     13423>>IF      13435>>IF      13509>>IF      13576>>IF      13677<<ASSIGN  13677>>ASSIGN
GUD_PARAMS.ERR.SEV
      1325**DCL     13444>>IF
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:107  
GUD_PARAMS.MCL
      1276**DCL     13023<<ASSIGN
GUD_PARAMS.MCL.C.FCG
      1278**DCL     13030>>IF      13062>>IF      13062>>IF      13073>>ASSIGN  13393>>IF      13509>>IF
GUD_PARAMS.MCL.C.MCL
      1278**DCL     13032>>ASSIGN
GUD_PARAMS.MCL.CODE
      1278**DCL      1278--REDEF   13034>>IF      13045>>IF      13075>>IF      13091>>DOWHILE
GUD_PARAMS.MCL.V#
      1278**DCL     13145>>IF      13148>>ASSIGN  13225>>IF
GUD_PARAMS.PTRS
      1327**DCL      1328--REDEF    1330--REDEF    1330--REDEF    1330--REDEF
GUD_PARAMS.PTRS.PAR1$
      1327**DCL     13509>>IF      13512>>ASSIGN
GUD_PARAMS.PTRS_ARRAY
      1330**DCL     13190<<ASSIGN  13233<<ASSIGN  13254<<ASSIGN
GUD_PARAMS.PTRS_UBIN
      1330**DCL     13277<<ASSIGN  13292<<ASSIGN  13346<<ASSIGN  13346>>ASSIGN  13350--ASSIGN
GUD_PARAMS.TSA$
      1280**DCL     13134<<ASSIGN
GUD_SCODE1
     12942**DCL     13113<>CALL
GUE$ENVTCB
     12183**DCL-ENT 13518--CALL
G_KEEP_USER
      1541**DCL     13045>>IF
HAND$
      1248**DCL     13082<<ASSIGN  13087<<ASSIGN  13095>>IF      13122>>IF      13124<<ASSIGN  13384>>CALL
I
      1252**DCL     13032<<ASSIGN  13045>>IF      13051>>ASSIGN  13177<<DOINDEX 13190>>ASSIGN  13191>>ASSIGN
     13213<<DOINDEX 13214>>IF      13225>>IF      13233>>ASSIGN  13234>>ASSIGN  13249>>IF      13254>>ASSIGN
     13277>>ASSIGN  13292>>ASSIGN  13322>>IF      13346>>ASSIGN  13346>>ASSIGN  13350>>ASSIGN  13365>>ASSIGN
     13677>>ASSIGN
IGNORE_ERR
     13417**LABEL   13445--GOTO
LAST_FPT_BYTE
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:108  
      1256**DCL     13656<<ASSIGN  13662>>IF
LAST_MCL
      1246**DCL     13078<<ASSIGN  13092>>IF
LAST_SEG_BYTE
      1255**DCL     13356<<ASSIGN  13359>>ASSIGN  13659<<ASSIGN  13662>>IF
LPARS_USED
      1257**DCL     13207<<ASSIGN  13265>>IF      13271>>ASSIGN  13272<<ASSIGN  13272>>ASSIGN
MAP_AND_ALT
     13548**LABEL   13469--GOTO    13521--GOTO    13526--GOTO
MCL$INFO
      1650**DCL     13096--ASSIGN  13127--ASSIGN
MCL$INFO.C
      1652**DCL     13091>>DOWHILE 13092>>IF
MCL$INFO.V
      1650**DCL     13096>>ASSIGN  13099>>ASSIGN  13110>>ASSIGN
MCL$INFO_WITH_HAND
      1685**DCL     13099--ASSIGN  13125--ASSIGN
MCL$INFO_WITH_HAND.HAND
      1689**DCL     13124>>ASSIGN
MCL_END
     13518**LABEL   13417--GOTO    13492--GOTO
MCL_ERR
     13393**LABEL   13040--GOTO    13066--GOTO    13161--GOTO    13181--GOTO    13231--CALLALT 13243--CALLALT
     13287--CALLALT
MCL_EXIT
     13393**LABEL   13394--GOTO    13404--GOTO
MCL_OFFSET
      1262**DCL     13345<<ASSIGN  13346>>ASSIGN  13359>>ASSIGN
NUM_VECT
      1247**DCL     13110<<ASSIGN  13111>>IF      13139>>IF      13177>>DOINDEX 13213>>DOINDEX
PARAM_DESC_USED
      1259**DCL     13209<<ASSIGN  13217<<ASSIGN  13235<<ASSIGN  13235>>ASSIGN  13251>>ASSIGN  13252<<ASSIGN
     13252>>ASSIGN
SCREECH
     12188**DCL-ENT 13113--CALL
SET_BAD_VECT IN PROCEDURE CHECK_USR_MEM
PL6.E3A0      #001=GUD$MCL_HAND File=GUD$MCL_HAND.:E05TSI                        TUE 07/29/97 22:14 Page:109  
     13674**ENTRY   13231--CALL    13287--CALL
T$
      1251**DCL     13150<<ASSIGN  13156>>ASSIGN  13350<<ASSIGN  13351>>ASSIGN
TCB_FULL
     13463**LABEL   13518--CALLALT
TSTQEND
     13560**LABEL   13564--GOTO
USE_BPARS
     13277**LABEL   13266--GOTO
USR_OFFSET
      1261**DCL     13302<<ASSIGN  13303>>ASSIGN  13345>>ASSIGN
USR_VBASE
      1260**DCL     13302>>ASSIGN  13629<<ASSIGN  13633<<ASSIGN  13659>>ASSIGN
VECT$INFO
      1715**DCL     13096--ASSIGN  13099--ASSIGN  13189--ASSIGN  13374--ASSIGN
VECT$INFO.ALIGN
      1716**DCL     13605>>IF
VECT$INFO.BND
      1717**DCL     13612>>IF
VECT$INFO.MAND
      1715**DCL     13178>>IF      13230>>IF
VECT$INFO.TYP
      1716**DCL     13263>>IF      13618>>IF
VECT$INFO.WRT
      1715**DCL     13644>>IF

PL6.E3A0      #002=GUD$MAPPER File=GUD$MCL_HAND.:E05TSI                          TUE 07/29/97 22:18 Page:110  
      862        1        /*T***********************************************************/
      863        2        /*T*                                                         */
      864        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      865        4        /*T*                                                         */
      866        5        /*T***********************************************************/
      867        6        /*P* NAME:   GUD$MAPPER
      868        7
      869        8             INPUT: GUD_HAND_PARAMS.ASDT_MCL_INDX
      870        9                         = An index into ASDT_MCL indicating where the
      871       10                           descriptor is to be mapped.
      872       11
      873       12                    GUD_HAND_PARAMS.USR_PARAM_INDX
      874       13                         = An index into GUD_HAND_PARAMS.DESCS indicating which
      875       14                           descriptor is to be mapped.
      876       15
      877       16
      878       17             OUTPUT: A mapped descriptor.
      879       18
      880       19                     GUD_HAND_PARAMS.PTRn$ updated to address the user parameter
      881       20                     through the descriptor that is mapped.
      882       21
      883       22             DESCRIPTION:
      884       23
      885       24        */
      886       25        GUD$MAPPER: PROC(P);
      887       26
      888       27        %INCLUDE GH_GATE_M;
      889       68        %INCLUDE GU_MACROS_M;
      890      227 S      %INCLUDE GH_LCP6_M;
      891      228 S      %INCLUDE GU_LCP6_M;
      892      229
      893      230                                                /* Input Parameter                    */
      894      231        %GUD_HAND_PARAMS (FPTN=P);
      895      307
      896      308                                                /* AUTO Storage                       */
      897      309    1   DCL G$BASE$ UBIN(32);
      898      310
PL6.E3A0      #002=GUD$MAPPER File=GUD$MCL_HAND.:E05TSI                          TUE 07/29/97 22:18 Page:111  
      899      311                                                /* BASED Structures                   */
      900      312        %G$ASDT (FPTN=G$ASDT_MCL,
      901      313                    STCLASS="BASED(G$ASDT_MCL$)");
      902      342
      903      343        %G$ASDT (FPTN=G$ASDT_USR,
      904      344                    STCLASS="BASED(G$ASDT_USR$)");
      905      373
      906      374                                                /* External Data                      */
      907      375    1   DCL G$ASDT_MCL$ PTR SYMREF READONLY;
      908      376    1   DCL G$ASDT_USR$ PTR SYMREF READONLY;
      909      377
      910      378    1   DCL G$SEG$(0:30) UBIN(32) SYMREF;
      911      379
      912      380        %GATE (FPTN=GM_MEATLOCK,STCLASS=SYMREF);
      913      399
      914      400                                                /* External Procedures                */
      915      401    1   DCL GHH$ASD ENTRY(2);
      916      402
      917      403        %EJECT;
PL6.E3A0      #002=GUD$MAPPER File=GUD$MCL_HAND.:E05TSI                          TUE 07/29/97 22:18 Page:112  
      918      404        /*   Lock the Memory Management gate while modifying UHJIT.ASDT_MCL
      919      405        */
      920      406                %LOCK (G=GM_MEATLOCK);
      921      413
      922      414        /*   Move the skeleton descriptor built by GUD$MCLENT to ASDT_MCL.
      923      415        */
      924      416    1      G$ASDT_MCL.DESC(P.ASDT_MCL_INDX) =
      925      417    1        P.DESCS(P.USR_PARAM_INDX);
      926      418
      927      419        /*   Bump the base by the first page currently assigned to the
      928      420             user's segment that contains that parameter.
      929      421        */
      930      422    1      G$ASDT_MCL.DESC.BASE(P.ASDT_MCL_INDX) =
      931      423    1        G$ASDT_MCL.DESC.BASE(P.ASDT_MCL_INDX)
      932      424    1        + G$ASDT_USR.DESC.BASE(P.ASDT_USR_INDX(P.USR_PARAM_INDX) );
      933      425
      934      426           %UNLOCK (G=GM_MEATLOCK);
      935      433
      936      434        /*   Get the address of the base of the segment we want to map.
      937      435        */
      938      436    1      G$BASE$ = G$SEG$(P.ASDT_MCL_INDX);
      939      437    1      CALL GHH$ASD(G$BASE$,G$ASDT_MCL.DESC(P.ASDT_MCL_INDX));
      940      438
      941      439        /*   Now update the pointer by the base address of the segment
      942      440             that we just mapped.
      943      441        */
      944      442    1      P.PTRS_UBIN(P.USR_PARAM_INDX+8) = P.PTRS_UBIN(P.USR_PARAM_INDX+8)
      945      443    1        + G$BASE$;
      946      444
      947      445
      948      446    1   END GUD$MAPPER;
      949      447        %EOD;

PL6.E3A0      #002=GUD$MAPPER File=GUD$MCL_HAND.:E05TSI                          TUE 07/29/97 22:18 Page:113  
--  Include file information  --

   GU_MACROS_M.:E05TOU  is referenced.
   GH_GATE_M.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is never referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GUD$MAPPER.

   Procedure GUD$MAPPER requires 105 words for executable code.
   Procedure GUD$MAPPER requires 12 words of local(AUTO) storage.

PL6.E3A0      #002=GUD$MAPPER File=GUD$MCL_HAND.:E05TSI                          TUE 07/29/97 22:18 Page:114  

 Object Unit name= GUD$MAPPER                                 File name= GUD$MCL_HAND.:E05TOU
 UTS= JUL 29 '97 22:18:01.08 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Proc  even  none   105     69  GUD$MAPPER
    1  RoData even  none     2      2  GUD$MAPPER

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        1  GUD$MAPPER

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 GHH$LOCK
 yes     yes           Std       1 GHH$UNLOCK
         yes           Std       2 GHH$ASD
                       nStd      0 X6A_AUTO_1
                       nStd      0 X6A_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    G$ASDT_MCL$                      r    G$ASDT_USR$                           G$SEG$
     GM_MEATLOCK                      r    G$ROS$
PL6.E3A0      #002=GUD$MAPPER File=GUD$MCL_HAND.:E05TSI                          TUE 07/29/97 22:18 Page:115  


      862        1        /*T***********************************************************/
      863        2        /*T*                                                         */
      864        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      865        4        /*T*                                                         */
      866        5        /*T***********************************************************/
      867        6        /*P* NAME:   GUD$MAPPER
      868        7
      869        8             INPUT: GUD_HAND_PARAMS.ASDT_MCL_INDX
      870        9                         = An index into ASDT_MCL indicating where the
      871       10                           descriptor is to be mapped.
      872       11
      873       12                    GUD_HAND_PARAMS.USR_PARAM_INDX
      874       13                         = An index into GUD_HAND_PARAMS.DESCS indicating which
      875       14                           descriptor is to be mapped.
      876       15
      877       16
      878       17             OUTPUT: A mapped descriptor.
      879       18
      880       19                     GUD_HAND_PARAMS.PTRn$ updated to address the user parameter
      881       20                     through the descriptor that is mapped.
      882       21
      883       22             DESCRIPTION:
      884       23
      885       24        */
      886       25        GUD$MAPPER: PROC(P);

     25   0 000000  D380 0000 0000  xent GUD$MAPPER      LNJ,B5   X6A_AUTO_1
          0 000003       000C 0001                       DC       12,1

      887       26
      888       27        %INCLUDE GH_GATE_M;
      889       68        %INCLUDE GU_MACROS_M;
      890      227 S      %INCLUDE GH_LCP6_M;
      891      228 S      %INCLUDE GU_LCP6_M;
      892      229
      893      230                                                /* Input Parameter                    */
PL6.E3A0      #002=GUD$MAPPER File=GUD$MCL_HAND.:E05TSI                          TUE 07/29/97 22:18 Page:116  
      894      231        %GUD_HAND_PARAMS (FPTN=P);
      895      307
      896      308                                                /* AUTO Storage                       */
      897      309    1   DCL G$BASE$ UBIN(32);
      898      310
      899      311                                                /* BASED Structures                   */
      900      312        %G$ASDT (FPTN=G$ASDT_MCL,
      901      313                    STCLASS="BASED(G$ASDT_MCL$)");
      902      342
      903      343        %G$ASDT (FPTN=G$ASDT_USR,
      904      344                    STCLASS="BASED(G$ASDT_USR$)");
      905      373
      906      374                                                /* External Data                      */
      907      375    1   DCL G$ASDT_MCL$ PTR SYMREF READONLY;
      908      376    1   DCL G$ASDT_USR$ PTR SYMREF READONLY;
      909      377
      910      378    1   DCL G$SEG$(0:30) UBIN(32) SYMREF;
      911      379
      912      380        %GATE (FPTN=GM_MEATLOCK,STCLASS=SYMREF);
      913      399
      914      400                                                /* External Procedures                */
      915      401    1   DCL GHH$ASD ENTRY(2);
      916      402
      917      403        %EJECT;
PL6.E3A0      #002=GUD$MAPPER File=GUD$MCL_HAND.:E05TSI                          TUE 07/29/97 22:18 Page:117  
      918      404        /*   Lock the Memory Management gate while modifying UHJIT.ASDT_MCL
      919      405        */
      920      406                %LOCK (G=GM_MEATLOCK);

    411   0 000005  BB80 0000 0000  01                   LAB,B3   0
          0 000008  CBF0 0100                            LAB,B4   256,IMO
          0 00000A  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          0 00000D       0001                            DC       s:416,PREL

      921      413
      922      414        /*   Move the skeleton descriptor built by GUD$MCLENT to ASDT_MCL.
      923      415        */
      924      416    1      G$ASDT_MCL.DESC(P.ASDT_MCL_INDX) =

    416   0 00000E  ECC7 0004                            LDB,B6   @P,AUTO
          0 000010  B846 004E                            LDR,R3   78,B6
          0 000012  A846 004F                            LDR,R2   79,B6
          0 000014  2E1B                                 ADV,R2   27
          0 000015  8CA6                                 LDI      ,B6,R2
          0 000016  DC80 0000 0000  xsym                 LDB,B5   G$ASDT_MCL$
          0 000019  8D35                                 SDI      ,B5,R3

      925      417    1        P.DESCS(P.USR_PARAM_INDX);
      926      418
      927      419        /*   Bump the base by the first page currently assigned to the
      928      420             user's segment that contains that parameter.
      929      421        */
      930      422    1      G$ASDT_MCL.DESC.BASE(P.ASDT_MCL_INDX) =

    422   0 00001A  B846 004E                            LDR,R3   78,B6
          0 00001C  A846 004F                            LDR,R2   79,B6
          0 00001E  2E46                                 ADV,R2   70
          0 00001F  9826                                 LDR,R1   ,B6,R2
          0 000020  BF47 0008                            STR,R3   G$BASE$+2,AUTO
          0 000022  3001                                 SOL,R3   1
          0 000023  E835                                 LDR,R6   ,B5,R3
          0 000024  E570 7FFF                            AND,R6   32767,IMO
PL6.E3A0      #002=GUD$MAPPER File=GUD$MCL_HAND.:E05TSI                          TUE 07/29/97 22:18 Page:118  
          0 000026  CC80 0000 0000  xsym                 LDB,B4   G$ASDT_USR$
          0 000029  1001                                 SOL,R1   1
          0 00002A  D814                                 LDR,R5   ,B4,R1
          0 00002B  D570 7FFF                            AND,R5   32767,IMO
          0 00002D  EA55                                 ADD,R6   R5
          0 00002E  B847 0008                            LDR,R3   G$BASE$+2,AUTO
          0 000030  3001                                 SOL,R3   1
          0 000031  EAB5                                 SRM,R6,'7FFF'X    ,B5,R3
          0 000032       7FFF

      931      423    1        G$ASDT_MCL.DESC.BASE(P.ASDT_MCL_INDX)
      932      424    1        + G$ASDT_USR.DESC.BASE(P.ASDT_USR_INDX(P.USR_PARAM_INDX) );
      933      425
      934      426           %UNLOCK (G=GM_MEATLOCK);

    431   0 000033  BB80 0000 0000  01                   LAB,B3   0
          0 000036  CBF0 0100                            LAB,B4   256,IMO
          0 000038  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          0 00003B       0001                            DC       s:436,PREL

      935      433
      936      434        /*   Get the address of the base of the segment we want to map.
      937      435        */
      938      436    1      G$BASE$ = G$SEG$(P.ASDT_MCL_INDX);

    436   0 00003C  ECC7 0004                            LDB,B6   @P,AUTO
          0 00003E  B846 004E                            LDR,R3   78,B6
          0 000040  8CB0 0000 0000  xsym                 LDI      G$SEG$,R3
          0 000043  8D47 0006                            SDI      G$BASE$,AUTO

      939      437    1      CALL GHH$ASD(G$BASE$,G$ASDT_MCL.DESC(P.ASDT_MCL_INDX));

    437   0 000045  DC80 0000 0000  xsym                 LDB,B5   G$ASDT_MCL$
          0 000048  3001                                 SOL,R3   1
          0 000049  CBB5                                 LAB,B4   ,B5,R3
          0 00004A  CFC7 000A                            STB,B4   G$BASE$+4,AUTO
          0 00004C  BBC7 0006                            LAB,B3   G$BASE$,AUTO
PL6.E3A0      #002=GUD$MAPPER File=GUD$MCL_HAND.:E05TSI                          TUE 07/29/97 22:18 Page:119  
          0 00004E  BFC7 0008                            STB,B3   G$BASE$+2,AUTO
          0 000050  BBC7 0008                            LAB,B3   G$BASE$+2,AUTO
          0 000052  CBF0 0200                            LAB,B4   512,IMO
          0 000054  E380 0000 0000  xent                 LNJ,B6   GHH$ASD
          0 000057       0001                            DC       s:442,PREL

      940      438
      941      439        /*   Now update the pointer by the base address of the segment
      942      440             that we just mapped.
      943      441        */
      944      442    1      P.PTRS_UBIN(P.USR_PARAM_INDX+8) = P.PTRS_UBIN(P.USR_PARAM_INDX+8)

    442   0 000058  ECC7 0004                            LDB,B6   @P,AUTO
          0 00005A  B846 004F                            LDR,R3   79,B6
          0 00005C  BF47 0008                            STR,R3   G$BASE$+2,AUTO
          0 00005E  3E0B                                 ADV,R3   11
          0 00005F  8CB6                                 LDI      ,B6,R3
          0 000060  8447 0006                            AID      G$BASE$,AUTO
          0 000062  B847 0008                            LDR,R3   G$BASE$+2,AUTO
          0 000064  3E0B                                 ADV,R3   11
          0 000065  8D36                                 SDI      ,B6,R3

      945      443    1        + G$BASE$;
      946      444
      947      445
      948      446    1   END GUD$MAPPER;

    446   0 000066  C380 0000 0000  xent                 LNJ,B4   X6A_ARET
      949      447        %EOD;

PL6.E3A0      #002=GUD$MAPPER File=GUD$MCL_HAND.:E05TSI                          TUE 07/29/97 22:18 Page:120  
--  Include file information  --

   GU_MACROS_M.:E05TOU  is referenced.
   GH_GATE_M.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is never referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GUD$MAPPER.
PL6.E3A0      #002=GUD$MAPPER File=GUD$MCL_HAND.:E05TSI                          TUE 07/29/97 22:18 Page:121  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @P                         6-0-0/w UBIN(32)    r     1 G$BASE$
    *0-0-0/w STRC(1280)  r     1 P

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 G$ASDT_MCL$                0-0-0/w PTR         r     1 G$ASDT_USR$
     0-0-0/w UBIN(32)    r     1 G$SEG$(0:30)               0-0-0/w STRC(48)    r     1 GM_MEATLOCK

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(32)    r     1 G$ASDT_MCL(0:30)
     0-0-0/w STRC(32)    r     1 G$ASDT_USR(0:30)


   Procedure GUD$MAPPER requires 105 words for executable code.
   Procedure GUD$MAPPER requires 12 words of local(AUTO) storage.
PL6.E3A0      #002=GUD$MAPPER File=GUD$MCL_HAND.:E05TSI                          TUE 07/29/97 22:18 Page:122  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=GUD$MAPPER File=GUD$MCL_HAND.:E05TSI                          TUE 07/29/97 22:18 Page:123  
          MINI XREF LISTING

G$ASDT_MCL.DESC
       335**DCL       416<<ASSIGN    437<>CALL
G$ASDT_MCL.DESC.BASE
       337**DCL       422<<ASSIGN    422>>ASSIGN
G$ASDT_MCL$
       375**DCL       318--IMP-PTR   416>>ASSIGN    422>>ASSIGN    422>>ASSIGN    437>>CALL
G$ASDT_USR.DESC.BASE
       368**DCL       422>>ASSIGN
G$ASDT_USR$
       376**DCL       349--IMP-PTR   422>>ASSIGN
G$BASE$
       309**DCL       436<<ASSIGN    437<>CALL      442>>ASSIGN
G$SEG$
       378**DCL       436>>ASSIGN
GHH$ASD
       401**DCL-ENT   437--CALL
GHH$LOCK
        67**DCL-ENT   411--CALL
GHH$UNLOCK
        67**DCL-ENT   431--CALL
GM_MEATLOCK
       392**DCL       411<>CALL      431<>CALL
P
       232**DCL        25--PROC
P.ASDT_MCL_INDX
       295**DCL       416>>ASSIGN    422>>ASSIGN    422>>ASSIGN    436>>ASSIGN    437>>CALL
P.ASDT_USR_INDX
       295**DCL       422>>ASSIGN
P.BND
       292**DCL       293--REDEF
P.DESC
       294**DCL       295--REDEF
PL6.E3A0      #002=GUD$MAPPER File=GUD$MCL_HAND.:E05TSI                          TUE 07/29/97 22:18 Page:124  
P.DESCS
       295**DCL       416>>ASSIGN
P.MCL.CODE
       239**DCL       239--REDEF
P.PTRS
       288**DCL       289--REDEF     291--REDEF     291--REDEF     291--REDEF
P.PTRS_UBIN
       291**DCL       442<<ASSIGN    442>>ASSIGN
P.USR_PARAM_INDX
       295**DCL       416>>ASSIGN    422>>ASSIGN    442>>ASSIGN    442>>ASSIGN

PL6.E3A0      #003=GUD$CHKWP File=GUD$MCL_HAND.:E05TSI                           TUE 07/29/97 22:18 Page:125  
      950        1        /*T***********************************************************/
      951        2        /*T*                                                         */
      952        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      953        4        /*T*                                                         */
      954        5        /*T***********************************************************/
      955        6        /*P* NAME:   GUD$CHKWP
      956        7
      957        8             INPUT: GUD_HAND_PARAMS.ASDT_MCL_INDX
      958        9                         = An index into ASDT_MCL indicating which
      959       10                           descriptor is to be checked.
      960       11
      961       12                    GUD_HAND_PARAMS.TSA$
      962       13                         = The address of the TSA containing the enviroment of
      963       14                           the domain making the service request.
      964       15
      965       16             DESCRIPTION:
      966       17                  If the Ring number in the Write Protection bits of the
      967       18                  descriptor is less than that of the domain making the
      968       19                  monitor service request, GUD$CHKWP will ALTRET.
      969       20
      970       21        */
      971       22        GUD$CHKWP: PROC(P) ALTRET;
      972       23
      973       24        %INCLUDE GU_MACROS_M;
      974      183 S      %INCLUDE GH_LCP6_M;
      975      184 S      %INCLUDE GU_LCP6_M;
      976      185
      977      186                                                /* Input Parameter                    */
      978      187        %GUD_HAND_PARAMS (FPTN=P);
      979      263
      980      264                                                /* BASED Structures                   */
      981      265    1   DCL 1 ASDT(0:30) BASED WALIGNED,
      982      266           %G$SEGDESC (FPTN=DESC,LVL=2,LAST=YES);
      983      288
      984      289        %G$TSA (FPTN=G$TSA, STCLASS="BASED(P.TSA$)");
      985      677
      986      678                                                /* External Data                      */
PL6.E3A0      #003=GUD$CHKWP File=GUD$MCL_HAND.:E05TSI                           TUE 07/29/97 22:18 Page:126  
      987      679    1   DCL G$ASDT_MCL$ PTR SYMREF READONLY;
      988      680
      989      681        %EJECT;
PL6.E3A0      #003=GUD$CHKWP File=GUD$MCL_HAND.:E05TSI                           TUE 07/29/97 22:18 Page:127  
      990      682        /*N* The following BITBINs can go away if PL-6 is updated to not
      991      683             generate the call to X6B_BCM.
      992      684        */
      993      685    1      IF BITBIN(G$ASDT_MCL$->ASDT.DESC.WP(P.ASDT_MCL_INDX)) > BITBIN(G$TSA.S.RING)
      994      686    1      THEN ALTRETURN;
      995      687    1      ELSE RETURN;
      996      688
      997      689    1   END GUD$CHKWP;

PL6.E3A0      #003=GUD$CHKWP File=GUD$MCL_HAND.:E05TSI                           TUE 07/29/97 22:18 Page:128  
--  Include file information  --

   GU_MACROS_M.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is never referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GUD$CHKWP.

   Procedure GUD$CHKWP requires 34 words for executable code.
   Procedure GUD$CHKWP requires 6 words of local(AUTO) storage.

    No errors detected in file GUD$MCL_HAND.:E05TSI    .

PL6.E3A0      #003=GUD$CHKWP File=GUD$MCL_HAND.:E05TSI                           TUE 07/29/97 22:18 Page:129  

 Object Unit name= GUD$CHKWP                                  File name= GUD$MCL_HAND.:E05TOU
 UTS= JUL 29 '97 22:18:14.64 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Proc  even  none    34     22  GUD$CHKWP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        1  GUD$CHKWP

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X6A_AUTO_1
                       nStd      0 X6A_AALT
                       nStd      0 X6A_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    G$ASDT_MCL$                      r    G$ROS$
PL6.E3A0      #003=GUD$CHKWP File=GUD$MCL_HAND.:E05TSI                           TUE 07/29/97 22:18 Page:130  


      950        1        /*T***********************************************************/
      951        2        /*T*                                                         */
      952        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      953        4        /*T*                                                         */
      954        5        /*T***********************************************************/
      955        6        /*P* NAME:   GUD$CHKWP
      956        7
      957        8             INPUT: GUD_HAND_PARAMS.ASDT_MCL_INDX
      958        9                         = An index into ASDT_MCL indicating which
      959       10                           descriptor is to be checked.
      960       11
      961       12                    GUD_HAND_PARAMS.TSA$
      962       13                         = The address of the TSA containing the enviroment of
      963       14                           the domain making the service request.
      964       15
      965       16             DESCRIPTION:
      966       17                  If the Ring number in the Write Protection bits of the
      967       18                  descriptor is less than that of the domain making the
      968       19                  monitor service request, GUD$CHKWP will ALTRET.
      969       20
      970       21        */
      971       22        GUD$CHKWP: PROC(P) ALTRET;

     22   0 000000  D380 0000 0000  xent GUD$CHKWP       LNJ,B5   X6A_AUTO_1
          0 000003       0006 0001                       DC       6,1

      972       23
      973       24        %INCLUDE GU_MACROS_M;
      974      183 S      %INCLUDE GH_LCP6_M;
      975      184 S      %INCLUDE GU_LCP6_M;
      976      185
      977      186                                                /* Input Parameter                    */
      978      187        %GUD_HAND_PARAMS (FPTN=P);
      979      263
      980      264                                                /* BASED Structures                   */
      981      265    1   DCL 1 ASDT(0:30) BASED WALIGNED,
PL6.E3A0      #003=GUD$CHKWP File=GUD$MCL_HAND.:E05TSI                           TUE 07/29/97 22:18 Page:131  
      982      266           %G$SEGDESC (FPTN=DESC,LVL=2,LAST=YES);
      983      288
      984      289        %G$TSA (FPTN=G$TSA, STCLASS="BASED(P.TSA$)");
      985      677
      986      678                                                /* External Data                      */
      987      679    1   DCL G$ASDT_MCL$ PTR SYMREF READONLY;
      988      680
      989      681        %EJECT;
PL6.E3A0      #003=GUD$CHKWP File=GUD$MCL_HAND.:E05TSI                           TUE 07/29/97 22:18 Page:132  
      990      682        /*N* The following BITBINs can go away if PL-6 is updated to not
      991      683             generate the call to X6B_BCM.
      992      684        */
      993      685    1      IF BITBIN(G$ASDT_MCL$->ASDT.DESC.WP(P.ASDT_MCL_INDX)) > BITBIN(G$TSA.S.RING)

    685   0 000005  ECC7 0004                            LDB,B6   @P,AUTO
          0 000007  B846 004E                            LDR,R3   78,B6
          0 000009  DC80 0000 0000  xsym                 LDB,B5   G$ASDT_MCL$
          0 00000C  3001                                 SOL,R3   1
          0 00000D  3E01                                 ADV,R3   1
          0 00000E  E835                                 LDR,R6   ,B5,R3
          0 00000F  604C                                 SOR,R6   12
          0 000010  E570 0003                            AND,R6   3,IMO
          0 000012  CCC6 0001                            LDB,B4   1,B6
          0 000014  D844 000C                            LDR,R5   12,B4
          0 000016  504D                                 SOR,R5   13
          0 000017  D570 0003                            AND,R5   3,IMO
          0 000019  E955                                 CMR,R6   R5
          0 00001A  0381 0004                            BLE      s:687,PREL

      994      686    1      THEN ALTRETURN;

    686   0 00001C  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      995      687    1      ELSE RETURN;

    687   0 00001F  C380 0000 0000  xent                 LNJ,B4   X6A_ARET
      996      688
      997      689    1   END GUD$CHKWP;

PL6.E3A0      #003=GUD$CHKWP File=GUD$MCL_HAND.:E05TSI                           TUE 07/29/97 22:18 Page:133  
--  Include file information  --

   GU_MACROS_M.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is never referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GUD$CHKWP.
PL6.E3A0      #003=GUD$CHKWP File=GUD$MCL_HAND.:E05TSI                           TUE 07/29/97 22:18 Page:134  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @P                        *0-0-0/w STRC(1280)  r     1 P

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 G$ASDT_MCL$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(32)    r     1 ASDT(0:30)                 0-0-0/w STRC(928)   r     1 G$TSA


   Procedure GUD$CHKWP requires 34 words for executable code.
   Procedure GUD$CHKWP requires 6 words of local(AUTO) storage.

    No errors detected in file GUD$MCL_HAND.:E05TSI    .
PL6.E3A0      #003=GUD$CHKWP File=GUD$MCL_HAND.:E05TSI                           TUE 07/29/97 22:18 Page:135  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=GUD$CHKWP File=GUD$MCL_HAND.:E05TSI                           TUE 07/29/97 22:18 Page:136  
          MINI XREF LISTING

ASDT.DESC.WP
       285**DCL       685>>IF
G$ASDT_MCL$
       679**DCL       685>>IF
G$TSA.ISA.P$$
       477**DCL       477--REDEF
G$TSA.P$$
       348**DCL       348--REDEF     349--REDEF
G$TSA.S.RING
       370**DCL       685>>IF
P
       188**DCL        22--PROC
P.ASDT_MCL_INDX
       251**DCL       685>>IF
P.BND
       248**DCL       249--REDEF
P.DESC
       250**DCL       251--REDEF
P.MCL.CODE
       195**DCL       195--REDEF
P.PTRS
       244**DCL       245--REDEF     247--REDEF     247--REDEF     247--REDEF
P.TSA$
       197**DCL       316--IMP-PTR   685>>IF
