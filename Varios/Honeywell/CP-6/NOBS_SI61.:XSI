/*M* NOBS - Process backspaces in TEXT files to be CP-6 compatable */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
                                   /*
                                        Author: J.L.Joseph, LADC
                                        Date: 7/82
                                                                  */
%SET LISTSUB='1'B;
 
NOBS: PROC MAIN;
 
                                   /*
                                        Locally needed %SUBs
                                                                  */
%SUB TRUE#='1'B /*TRUE#*/;
%SUB FALSE#='0'B /*FALSE#*/;
 
                                   /*
                                        INCLUDEs here
                                                                  */
     %INCLUDE CP_6;
     %INCLUDE CP_6_SUBS;
 
                                   /*
                                        DCBs defined here
                                                                  */
DCL M$SI DCB;
DCL M$OO DCB;
DCL M$DO DCB;
 
                                   /*
                                        EXTERNALs
                                                                  */
DCL B$JIT$ PTR SYMREF;
DCL B$TCB$ PTR SYMREF;
                                   /*
                                        CONSTANT definitions here
                                                                  */
 
 
                                   /*
                                        Local STATIC storage
                                                                  */
DCL BUF1 CHAR(256) STATIC INIT(' ');
DCL BUF1U CHAR(256) STATIC INIT(' ');
DCL BUF2 CHAR(256) STATIC INIT(' ');
DCL BUF1ARS UBIN WORD STATIC;
DCL BUF2ARS UBIN WORD STATIC;
DCL END_OF_FILE BIT(1) ALIGNED STATIC INIT(FALSE#);
 
DCL 1 BS_STRING STATIC CALIGNED,
         2 * UBIN BYTE CALIGNED INIT(8);
DCL BS_ REDEF BS_STRING CHAR(1) CALIGNED;
 
DCL I SBIN WORD STATIC ALIGNED INIT(0);
DCL J SBIN WORD STATIC ALIGNED INIT(0);
DCL K SBIN WORD STATIC ALIGNED INIT(0);
 
DCL WHEREBS SBIN WORD STATIC ALIGNED INIT(0);
DCL LAST_PL SBIN WORD STATIC ALIGNED INIT(0);
DCL PLACE_ SBIN WORD STATIC ALIGNED INIT(0);
DCL CHAR_SAVE CHAR(1) STATIC CALIGNED;
 
DCL BUF_(0:9) CHAR(256) STATIC CALIGNED;
 
DCL 1 BS_USCORE STATIC CALIGNED,
         2 BS_ UBIN BYTE CALIGNED INIT(8),
         2 SCORE_ CHAR(1) CALIGNED INIT('_');
DCL BS_USCOREC REDEF BS_USCORE CHAR(2);
 
DCL 1 USCORE_BS STATIC CALIGNED,
         2 SCORE_ CHAR(1) CALIGNED INIT('_'),
         2 BS_ UBIN BYTE CALIGNED INIT(8);
DCL USCORE_BSC REDEF USCORE_BS CHAR(2);
 
DCL M$SI$ PTR STATIC;
DCL M$OO$ PTR STATIC;
 
DCL 1 OO_KEY STATIC,
         2 * UBIN BYTE CALIGNED INIT(3),
         2 KEY_ UBIN(27) CALIGNED INIT(0);
 
DCL MY_ERROR_BUF CHAR(255) STATIC CALIGNED;
 
DCL FPARAM_BUF(0:1025) SBIN STATIC ALIGNED;
 
                                   /*
                                        I/O FPTs here
                                                                  */
 
     %FPT_ERRMSG    (FPTN=ERROR_PRINT,
                         BUF=MY_ERROR_BUF,
                         DCB=M$SI,
                         OUTDCB1=M$DO,
                         CODE=NIL);
 
     %FPT_OPEN      (FPTN=OPEN_SI_IN,
                         FPARAM=FPARAM_BUF,
                         DCB=M$SI);
 
     %FPT_OPEN      (FPTN=OPEN_OO_OUT,
                         DCB=M$OO,
                         FUN=CREATE,
                         EXIST=NEWFILE,
                         ASN=FILE,
                         ACS=DIRECT,
                         IFPARAM=FPARAM_BUF,
                         ORG=KEYED);
 
     %FPT_READ      (FPTN=READ_BUF1,
                         DCB=M$SI,
                         BUF=BUF1,
                         WAIT=YES);
 
     %FPT_WRITE     (FPTN=WRITE_OO_BUF2,
                         DCB=M$OO,
                         BUF=BUF2,
                         ONEWKEY=YES,
                         KEY=OO_KEY,
                         WAIT=YES);
 
     %FPT_CLOSE     (FPTN=CLOSE_SI_REL,
                         DISP=RELEASE,
                         DCB=M$SI);
 
     %FPT_CLOSE     (FPTN=CLOSE_OO_SAVE,
                         DISP=SAVE,
                         DCB=M$OO);
 
 
                                   /*
                                        BASED definitions
                                                                  */
     %F$DCB;
 
     %B$TCB;
 
     %B$ALT;
 
%SUB B$ALT=B$TCB$->B$TCB.ALT$->B$ALT;
 
%EJECT;
 
/* ************************************************************
   ***                                                      ***
   ***  Begin   N O B S   main program                      ***
   ***                                                      ***
   ************************************************************ */
 
     M$SI$ = DCBADDR(DCBNUM(M$SI));
     M$OO$ = DCBADDR(DCBNUM(M$OO));
 
     OPEN_OO_OUT.NAME_ = VECTOR(M$SI$->F$DCB.NAME#);
 
     CALL M$OPEN (OPEN_SI_IN) ALTRET (MXXX);
 
     CALL M$OPEN (OPEN_OO_OUT) ALTRET (MXXX);
 
 
     DO WHILE (TRUE#);
 
          BUF1 = ' ';
          CALL M$READ (READ_BUF1) ALTRET (MUST_BE_EOF);
 
          BUF1ARS = M$SI$->F$DCB.ARS#;
 
          BUF2 = BUF1;
          BUF2ARS = BUF1ARS;
 
          IF SUBSTR(BUF1,0,1) = '.'
          THEN
               GOTO JUST_WRITE;
 
          CALL INDEX (WHEREBS, BS_, BUF1) ALTRET (JUST_WRITE);
 
          DO I = 0 TO 9;
               BUF_(I) = ' ';
             END;                       /* DO I = 0 TO 9 */
 
          PLACE_ = 0;
          LAST_PL = 0;
          DO I = 0 TO BUF1ARS - 1;
 
               IF SUBSTR(BUF1,I,1) ~= BS_
               THEN
               DO;
                    DO J = 0 TO 9;
                         IF SUBSTR(BUF_(J),PLACE_,1) = ' '
                         THEN
                         DO;
                              CALL INSERT (BUF_(J), PLACE_, 1,
                                   SUBSTR(BUF1,I,1));
                              PLACE_ = PLACE_ + 1;
                              IF PLACE_ > LAST_PL
                              THEN
                                   LAST_PL = PLACE_ ;
                              GOTO INSERT_DONE;
                            END;        /* DO IF OKAY TO STUFF */
                       END;             /* DO J = 0 TO 9 */
INSERT_DONE:        ;
                  END;                  /* DO IF NOT BS_ */
               ELSE                     /* IF CURRENT CHAR IS BS_ */
               DO;
                    PLACE_ = PLACE_ - 1;
                    IF PLACE_ < 0
                    THEN
                         PLACE_ = 0;
                  END;                  /* DO IF BS_ */
             END;                       /* DO I = 0 TO BUF1ARS - 1 */
 
GOT_LAST: ;
 
          BUF2 = ' ';
          BUF2ARS = 0;
 
          DO K = 0 TO LAST_PL;
               CALL INSERT (BUF2, BUF2ARS, 1, SUBSTR(BUF_(0),K,1));
               BUF2ARS = BUF2ARS + 1;
               DO I = 1 TO 9;
                    IF SUBSTR(BUF_(I),K,1) ~= ' '
                    THEN
                    DO;
                         CALL INSERT (BUF2, BUF2ARS, 1, BS_);
                         BUF2ARS = BUF2ARS + 1;
                         CALL INSERT (BUF2, BUF2ARS, 1,
                              SUBSTR(BUF_(I),K,1));
                         BUF2ARS = BUF2ARS + 1;
                       END;             /* DO IF NON-BLANK */
                  END;                  /* DO I = 1 TO 9 */
             END;                       /* DO K = 0 TO PLACE_ */
 
          BUF2ARS = BUF2ARS + 1;
 
          DO WHILE (SUBSTR(BUF2,BUF2ARS,1) = ' ');
               BUF2ARS = BUF2ARS - 1;
             END;                       /* DO WHILE SPACES */
 
          BUF2ARS = BUF2ARS + 1;
 
          WHEREBS = 0;
          LAST_PL = 0;
          DO WHILE (TRUE#);
               CALL INDEX (J, BS_USCOREC, BUF2, LAST_PL)
                    ALTRET (ALL_DONE);
               WHEREBS = WHEREBS + 1;
               IF WHEREBS > SIZEC(BUF2)
               THEN
               DO;
                    LAST_PL = J + 1;
                    WHEREBS = 0;
                  END;                  /* DO IF LOOPING */
               IF J > 0
               THEN
               DO;
                    CHAR_SAVE = SUBSTR(BUF2,J-1,1);
                    CALL INSERT (BUF2, J-1, 2, USCORE_BSC);
                    CALL INSERT (BUF2, J+1, 1, CHAR_SAVE);
                  END;
               ELSE
               DO;
                    BUF1 = BUF2;
                    BUF2 = SUBSTR(BUF1,1,BUF2ARS-1);
                    BUF2ARS = BUF2ARS - 1;
                  END;
             END;                       /* DO WHILE MORE */
ALL_DONE: ;
 
JUST_WRITE: ;
          OO_KEY.KEY_ = OO_KEY.KEY_ + 1000;
 
          IF BUF2ARS = 0
          THEN DO;
               BUF2=' ';
               BUF2ARS=1;
             END;
          WRITE_OO_BUF2.BUF_.BOUND = BUF2ARS - 1;
 
          CALL M$WRITE (WRITE_OO_BUF2) ALTRET (MXXX);
 
        END;                            /* DO WHILE TRUE# */
 
MXXX: ;
     ERROR_PRINT.CODE_ = VECTOR(B$ALT.ERR);
 
     CALL M$ERRMSG (ERROR_PRINT) ALTRET (HMMM);
 
HMMM: ;
 
     CALL M$XXX;
 
MUST_BE_EOF: ;
 
 
     CALL M$CLOSE (CLOSE_OO_SAVE) ALTRET (MXXX);
 
     CALL M$CLOSE (CLOSE_SI_REL) ALTRET (MXXX);
 
     CALL M$EXIT;
 
END NOBS;
