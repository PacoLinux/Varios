/*M*      main:c  --  main driver for MDS extended status decoder */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/*F*    NAME: MODEST_SIc01    (main:c)
        PURPOSE: main driver for the MODEST program
 
        ORIGINAL AUTHOR:  Arthur Tai, SDO, Phoenix (BULL HN)
        ENHANCEMENTS:  Jordan Boucher, LADC
        DATE:  August 7, 1989
      UPDATES:  JTB 9/1/89
*/
 
/*
**********************************************************************
*/
 
 
#include <stdio.h>
#include <ctype.h>
 
#include "MODEST_Cc09"         /* "defines:h" */
 
/* VARIABLES */
char ext_status[MAXBYTES];          /* IPI Status */
char byte_number;
char input_char, bits0to3, bits4to7, nibble3, nibble4;
int index, position, cmd_opt, max_byte;
int quitting, error, result;
 
/* EXTERNAL VARIABLES */
extern char op_code_array[88][50];
extern char menu_options[7][50] ;
extern char input_prompt[3][50] ;
extern char echo_input_msg[3][50] ;
extern struct message ;

/* FUNCTIONS */
drive_end_status (int);
cmd_end_status (char,char,char,char);
int ascii_to_dig ();
int check_skip_octet ();
rev_info ();
 
 
main()
{
  quitting = FALSE;
  error = FALSE;
 
  while (!quitting && !error)   {
    init_shit ();
    display_menu ();
    get_cmd_option ();
    switch (cmd_opt)  {
      case CMD_HELP:
        break;
      case CMD_IPI_EXT_ST:
      case CMD_RESP_PACK:
      case CMD_PARAM_ID:
        result = get_extended_status ();
        if (result == OK)   {
          result = decode_the_thing ();
          if (result >= FATAL)
            error = TRUE;
        }
        else if (result >= FATAL)
          error = TRUE;
        break;
      case CMD_REV_INFO:
        rev_info ();
        break;
      default:
        quitting = 1;
    }  /*end switch*/
  }  /*end while*/
  blow_this_pop_stand ();
}  /* end of main */
 
/*
----------------------------------------------------------------------
*/
 
  init_shit ()
  {
    cmd_opt = -1;
    input_char = bits0to3 = bits4to7 = nibble3 = nibble4 = '0';
                                    /* clear Extended Status buffer */
     for (index = 0; index < MAXBYTES; index++)
       ext_status[index] = 0;
  return;
  }   /* end  init_shit */
 
/*
----------------------------------------------------------------------
*/
 
  display_menu ()
  {
    printf("\n\n\n");
    for (index = 0; index < 9; index++)   {
      printf("               %s", menu_options[index]);
      if ( index < 8 )
        printf ("\n");
    }
    /* fflush(stdout); */
  return;
  }  /*end display_menu () */
 
/*
----------------------------------------------------------------------
*/
 
  get_cmd_option ()
  {
    char junk;
 
    while (cmd_opt < 0)   {
      input_char = getchar();
 
      while  ((junk = getchar()) != '\n')
        input_char = junk;
 
      switch(input_char)  {
        case '1':
          cmd_opt = 1;
          byte_number = '0';
          break;
        case '2':
          cmd_opt = 2;
          byte_number = '0';
          break;
        case '3':
          cmd_opt = 3;
          byte_number = '9';
          break;
        case '4':
          cmd_opt = 4;
          break;
        case '5':
        case 'Q':
        case 'q':
        case 'X':
        case 'x':
        case 'E':
        case 'e':
          cmd_opt = 5;
          quitting = 1;
          break;
        case 'H':
        case 'h':
        case '?':
          cmd_opt = 0;
          help_the_dumbshit (H_MENU);
          break;
        default:
          try_again_butthead ();
          break;
      }   /* end switch(input_char) */
    }  /*end while*/
 
  return;
  }   /* end get_cmd_option () */
 
/*
----------------------------------------------------------------------
*/
  try_again_butthead ()
  {
    printf("\n  What the? (1 to 5) -");
    /* fflush(stdout); */
    return;
  }
 
/*
----------------------------------------------------------------------
*/
  help_the_dumbshit (where_at)
    int where_at;
  {
    switch(where_at)   {
      case H_MENU:
        printf("\nEnter 1, 2, 3, 4, 5, Q, X, E.  That's simple enough.\n");
        break;
      case H_ONE:
        printf("\n\n");
        printf("Enter the IPC-IPI extended status in HEX two bytes at a\n");
        printf("time, seperated by spaces, commas, or semicolons.\n");
        printf("Eg.  01 02 03 04 05,06,07,08;09;10;11 12,13;14\n");
        printf("This option takes bytes 0 to 35 of the extended status \n");
        printf("and breaks the entire thing down in one shot.\n\n");
        break;
      case H_TWO:
        printf("\n\n");
        printf("Enter CM-3 response packet data in HEX.\n");
        printf("This breaks down the response packet information, along\n");
        printf("with bytes 3 to 35 of the extended status.\n\n");
        break;
      case H_THREE:
        printf("\n\n");
        printf("This command option will break down parameters and the \n");
        printf("octets that go along with them.  Bytes 9 to 35.\n\n");
        break;
      case H_FOUR:
      case H_FIVE:
      default:
        printf("\n I'm too confused to help you at this point!! \n");
    }  /*end switch*/
  return;
  }  /*end help_the_dumbshit ()*/
 
/*
----------------------------------------------------------------------
*/
 
  blow_this_pop_stand ()
  {
    printf("MODEST has nothing more to say!\n");
  return;
  }
 
/*
----------------------------------------------------------------------
*/
 
 
/* Get extended status from the Console, and save them in the status buffer */
/* The extended status are ASCII code format.                               */
/* The status are input by byte and the status bytes are seperated by a ';' */
/* space, or ','.                                                           */
 
int get_extended_status ()
{
 
  printf("\n\n   %s\n   #",input_prompt[cmd_opt-1]);
  /* fflush(stdout); */
 
  for (index=position=0; index < MAXBYTES ; )   {
    input_char = getchar();
 
    if (isxdigit(input_char))   {
      bits0to3 = bits4to7;
      bits4to7 = input_char;
    }
    else if ((input_char == ' ') ||
             (input_char == ',') ||
             (input_char == ';') )  {
      ext_status[index++] = bits0to3;
      ext_status[index++] = bits4to7;
      bits4to7 = bits0to3 = '0';
    }
    else if (input_char == '\n')  {
      ext_status[index++] = bits0to3;
      ext_status[index++] = bits4to7;
      printf("   &");
      input_char = getchar();
      if (input_char == '\n')   {
        max_byte = index;
        return (OK);
      }
      else if (input_char == '$')  {
        input_char = getchar();            /* get rid of CR */
        max_byte = index;;
        return (OK);
      }
      else if (isxdigit(input_char))  {
        bits4to7 = input_char;
        bits0to3 = '0';
      }
      else  {
        printf("ILLEGAL character -- %c -- redo \n",input_char);
        index = position = 0;        /* start from beginning */
        while ((input_char = getchar ()) != '\n') ;  /* 86 the CR */
        printf("\n   %s AGAIN!\n", input_prompt[cmd_opt-1]);
      }
    }  /*end else if*/
    else if (input_char == '$' )  {
      ext_status[index++] = bits0to3;
      ext_status[index++] = bits4to7;
      bits4to7 = bits0to3 = '0';
      while ((input_char = getchar ()) != '\n') ;  /* 86 the CR */
      max_byte = index;
      return (OK);
    }
    else if (input_char == '?')  {
      help_the_dumbshit (cmd_opt);
      index = position = 0;       /* start over */
      while ((input_char = getchar ()) != '\n') ;  /* 86 the CR */
      printf("\n   %s FROM START.\n", input_prompt[cmd_opt-1]);
    }
    else  {
      printf("ILLEGAL character -- %c -- redo \n",input_char);
      index = position = 0;        /* start from beginning */
      while ((input_char = getchar ()) != '\n') ;  /* 86 the CR */
      printf("\n   %s AGAIN!\n", input_prompt[cmd_opt-1]);
    }  /* clear the input buffer */
 
  }   /* end of FOR loop -- all the input data has been stored  */
return (OK);
}   /* end get_extended_status ()*/

/*
----------------------------------------------------------------------
*/
 
/* Decoding the IPC-IPI Extended Status, Response Packet Data, and          */
/* Parameters' data.                                                        */
 
int decode_the_thing ()
  {
    int resp_flag, cmd;
 
    resp_flag = 0;
    ext_status[max_byte]='\0';
    printf ("\n %s%s\n\n\n", echo_input_msg[cmd_opt-1],ext_status);
    position = 0;
 
  while ( position < max_byte )   {
    bits0to3 = ext_status[position++];
    bits4to7 = ext_status[position++];
 
    if ((byte_number == '0') && (cmd_opt == 2))   {
      position = response_pack (ext_status,max_byte,position);
      byte_number = '2';
    }
    else  {
       switch (byte_number)   {
         case BYTE_0:
           if (bits0to3 == '0')   {
             if (bits4to7 == '1')
               printf ("Path Component = CM-3 \n");
             else if (bits4to7 == '4')
               printf ("Path Component = IPC-IPI \n");
             else if ((bits4to7 == '2') || (bits4to7 == '3'))
               printf ("Path Component = Device \n");
             else
               printf ("PC = %c  -- Unknown Path Component\n",bits4to7);
           }
           else
             printf ("PC = %c  -- Unknown Path Component\n",bits4to7);
           break;
         case BYTE_1:
           printf ("Reference number       = %c%c\n",bits0to3,bits4to7);
           break;
         case BYTE_2:
           printf ("IMX Transaction number = %c%c\n",bits0to3,bits4to7);
           break;
         case BYTE_3:
           cmd = ascii_to_decimal(bits0to3,bits4to7);
           if (cmd < 86)
             printf ("Operation Code = %s\n",op_code_array[cmd]);
           else if (cmd >= 86)
             printf ("%s = %c%c\n",op_code_array[cmd],bits0to3,bits4to7);
           break;
         case BYTE_4:
           if (cmd == 87)
             printf ("Async Interrupt -- %c%c Ignored\n",bits0to3,bits4to7);
           else
             printf ("Cmd Modifiers  = %c      Op Modifier = %c\n",bits0to3,bits4to7);
           break;
         case BYTE_5:
           if (cmd_opt == 2)
             printf ("Slave number   = %c%c\n",bits0to3,bits4to7);
           else
             printf ("CM number      = %c%c\n",bits0to3,bits4to7);
           break;
         case BYTE_6:
           if (cmd_opt == 2)   {
             if (((bits0to3 == 'F') || (bits0to3 == 'f')) && (bits0to3 == bits4to7))
               printf ("Async Interrupt form Facility = %c%c\n",bits0to3,bits4to7);
             else
               printf ("Facility number= %c%c\n",bits0to3,bits4to7);
           }
           else
             printf ("Device number  = %c%c\n",bits0to3,bits4to7);
           break;
 
         case BYTE_7:
           if ((cmd_opt == 2) && (( nibble3 = ext_status[1] ) == '4'))
             resp_flag = 04;
 
           if ( position + 2 <= max_byte)   {
             nibble3 = ext_status[position++];
             nibble4 = ext_status[position++];
             ++byte_number;
             printf ("IPI Status     = %c%c%c\n",bits0to3,bits4to7,nibble4);
             decode_ipi_status (bits0to3,bits4to7,nibble4);
 
             if (resp_flag == 04)
               printf ("Indicates a XNP packet = %c\n",nibble3);
             else  {
 
               printf ("Status Type    = %c",nibble3);
 
               /* The nibble3 is the upper 4 bits of the 8th byte. */
               switch (nibble3)   {
                 case STATUS_TYPE_1:
                   printf ("  -- Standard Command Completion Response\n");
                   break;
 
                 case STATUS_TYPE_3:
                   printf ("  -- Extended Command Completion Response\n");
                   break;
 
                 case STATUS_TYPE_4:
                   printf ("  -- Asynchronous Completion Response\n");
                   break;
 
                 case STATUS_TYPE_5:
                   printf ("  -- Transfer Notification\n");
                   break;
                 default:
                   printf ("   ** No such code **\n");
                   break;
               }  /*end switch*/
             }  /*end else*/
           }  /*end if*/
           else
             printf ("Partial IPI Status = %c%c\n",bits0to3,bits4to7);
           break;
 
         case BYTE_9:
           if ((cmd_opt == 2) && (resp_flag == 04))   {
             master_slave_status (ext_status,max_byte,position);
             return (OK);
           }
           printf ("Parm Length  = %c%c\n",bits0to3,bits4to7);
           byte_number = 'A' - 1;
           break;
 
         case BYTE_10:
           nibble3 = bits0to3;
           nibble4 = bits4to7;
           result = id_decoder ();
           if (result != OK)
             return (result);
           break;
       }  /*end switch*/
     }  /*end else*/
 
     byte_number++;
   }  /*end while*/
return (OK);
}  /*end decode_the_thing () */
 
/*
----------------------------------------------------------------------
*/
 
/*  Decoding Parameter ID.  */
 
  int id_decoder ()
  {
    int count;
 
    count = 0;
 
    if (nibble3 == '3')   {
      position = decode_3x (nibble3,nibble4,ext_status,index,position);
      position = check_end_80 (index,position,count,ext_status);
      check_more_data ();
    }
    else if ((nibble3 != '1') && (nibble3 != '2'))   {
      printf("Illegal Parameter ID = %c%c\n",nibble3,nibble4);
      return (ILLEGAL);
    }
    else   {
      printf ("\n  The following associated substatus is for the");
      if (nibble3 == '1')
        printf (" Controller.\n");
      else
        printf (" Driver.\n");
 
      printf ("Parameter ID = %c%c -- ",nibble3,nibble4);
      switch (nibble4)  {
        case PARAM_ID_X2:
          printf (" Defect Management\n");
          position = decode_x2 (ext_status,index,position);
          break;
        case PARAM_ID_X3:
          printf (" Message/Microcode exception\n");
          position = decode_x3 (ext_status,index,position);
          break;
        case PARAM_ID_X4:
          printf (" Intervention Required\n");
          position = decode_x4 (ext_status,index,position);
          break;
        case PARAM_ID_X5:
          printf (" Alternate Port Exception\n");
          position = decode_x5 (ext_status,index,position);
          break;
        case PARAM_ID_X6:
          printf (" Machine Exception\n");
          position = decode_x6 (ext_status,index,position,cmd_opt);
          count = 80;                         /* flag */
          break;
        case PARAM_ID_X7:
          printf (" Command Exception\n");
          position = decode_x7 (ext_status,index,position);
          break;
        case PARAM_ID_X8:
          printf (" Command Aborted\n");
          position = decode_x8 (ext_status,index,position);
          break;
        case PARAM_ID_X9:
          printf (" Conditional Success\n");
          position = decode_x9 (ext_status,index,position,cmd_opt);
          count = 80;                         /* flag */
          break;
        case PARAM_ID_XA:
        case PARAM_ID_Xa:
          printf (" Incomplete\n");
          position = decode_xA (ext_status,index,position);
          break;
        default:
          printf ("*** No such Parm ID ***\n");
      }  /*end switch*/
 
      position = check_end_80 (index,position,count,ext_status);
 
    }          /* end of else if for checking parameter */
    return (check_more_data ());
 
  }  /* end id_decoder () */
 
/*
----------------------------------------------------------------------
*/
 
                             /* Does it have the Second Parameter ? */
  int check_more_data ()
  {
    int count, continue_next;
 
    if ((cmd_opt == 2) && ((bits0to3 = ext_status[1]) == 02)
                       && ((position + 2) <= index))  {
      master_slave_status (ext_status,index,position);
      return (GOTO_BEGIN);   /* NO error, just want to get back all the way */
    }
    if ((count == 80) && (cmd_opt == 1))   {
      for (count = 0;((position + 2) < index ) && (count < 6) ;count++)  {
        bits0to3 = ext_status[position++];
        bits4to7 = ext_status[position++];
/*         nibble3 = ext_status[position++];*/
/*         nibble4 = ext_status[position++];*/
 
/* code = 80 or 00 -- no means */
/* code = 09 00  -- dummy bytes */
 
        if (((bits0to3 == '0') && (bits4to7 == '9')))
          if ( (position + 10) <= index )
            position = position + 10;
          else
            position = index;
        else
          if (((bits0to3 == '8') && (bits4to7 == '0')) ||
              ((bits0to3 == '0') && (bits4to7 == '0')))
            continue_next = FALSE;
          else
            switch (count)  {
              case '0'-'0':
                driver_st_err_code(bits0to3,bits4to7);
                break;
 
              case '1'-'0':
              case '2'-'0':
              case '3'-'0':
              case '4'-'0':
                drive_frus_code(bits0to3,bits4to7);
                break;
 
              case '5'-'0':
                drive_faults_code(bits0to3,bits4to7);
/* printf("\n more parameter go through here. %c%c J = %d ,  I = %d\n",bits0to3,bits4to7,position,index);*/
                break;
            }  /* end of switch loop */
 
            while (continue_next)  {
              count = 0;
              byte_number = '8';
              return (OK);
            }  /*end while*/
 
    }  /*end for*/
  }  /*end if*/
  return (GOTO_BEGIN);    /* NO error, just want to go back all the way */
 
  }  /*end check_more_data () */        /* goto begin; */
 
/*
----------------------------------------------------------------------
*/
 
 
rev_info()
 
{
  printf("\n\n");
  printf ("              ");
  printf ("...................................................\n");
  printf ("              ");
  printf (":  MODEST.X    (MOdular Disk Extend STatus tool)  :\n");
  printf ("              ");
  printf (":  IPC-IPI Status Interpretation Program for MDS  :\n");
  printf ("              ");
  printf (":  Rev: B.000                   Date: 08-21-1989  :\n");
  printf ("              ");
  printf (":.................................................:\n");
  printf("\n\n\n");
}
