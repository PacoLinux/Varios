/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*                   Written By: Ben Faul @LADC                     */
/**** PILOT **** PILOT **** PILOT **** PILOT **** PILOT ****1
 
  The following procedures in this file contain system commands.
 
***** PILOT **** PILOT **** PILOT **** PILOT **** PILOT ****/
COMPILE: PROC(WHERE,MODE) ALTRET;
/*A* COMPILE: Compiles some or all functions */
DCL WHERE UBIN;                         /* current stack pointer              */
DCL MODE BIT(1);                        /* mode, 0=check only, 1=execute      */
        WHERE=WHERE+1;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
CLEAR:  PROC(WHERE,MODE) ALTRET;
/*A* CLEAR: Clear some or all functions from symbol table */
DCL WHERE UBIN;                         /* current stack pointer              */
DCL MODE BIT(1);                        /* mode, 0=check only, 1=execute      */
        WHERE=WHERE+1;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
LOAD:   PROC(MODE,CHARN,SIZE,START) ALTRET;
/*A* LOAD: Load a file into workspace */
DCL MODE BIT(1);                        /* mode, 0=check only, 1=execute      */
DCL CHARN CHAR(SIZE);
DCL SIZE UBIN;
DCL X UBIN;
DCL Y UBIN;
DCL CHARX CHAR(Y) BASED;
DCL BUFFER CHAR(256) STATIC;
DCL FTX_RPTERR ENTRY;
DCL LEX_INPUT ENTRY(5) ALTRET;
DCL ERROR ENTRY(4);
DCL START UBIN;
DCL TYPE CHAR(1);
DCL ZERO UBIN;
DCL TRUE BIT(1);
%INCLUDE CP_6;
%F$DCB;
%INCLUDE PILOT_C2;
%FPT_WRITE(FPTN=READ,DCB=M$SAVE_FILE,BUF=BUFFER);
%FPT_FID(FPTN=FPT_FID,
NAME=VLP_NAME,
ACCT=VLP_ACCT,
WSN=VLP_WSN,
PASS=VLP_PASS,
SN=VLP_SN,
ASN=FID_ASN,
RES=FID_RES,
RESULTS=VLR_FID,
TEXTFID=FID_TEXT);
%VLP_NAME;
%VLP_ACCT;
%VLP_PASS;
%VLP_SN;
%VLR_FID;
%VLP_WSN;
DCL FID_TEXT CHAR(60) STATIC;
DCL FID_RES CHAR(4) STATIC;
DCL FID_ASN UBIN(9) STATIC ALIGNED;
DCL M$SAVE_FILE DCB;
%FPT_OPEN(FPTN=OPEN_SAVE,
DCB=M$SAVE_FILE,
ASN=FILE,
CTG=YES,
SHARE=ALL,
FUN=IN,
ORG=CONSEC,
ACS=SEQUEN,
ACCT=VLP_ACCT,
NAME=VLP_NAME,
SN=VLP_SN,
PASS=VLP_PASS);
%FPT_CLOSE(FPTN=CLOSE,DCB=M$SAVE_FILE,DISP=SAVE);
DCL STRING(0:25) CHAR(1) STATIC INIT('A','B','C','D','E','F','G',
'H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z');
 
        ZERO=0;
        TRUE='1'B;
        TYPE=' ';
        START=START+1;
        X=START;
        IF
          SUBSTR(CHARN,X,1)~='''' THEN DO;
           CALL ERROR('LOAD WHAT?',' ',11,1);
           ALTRETURN;
           END;
        DO Y=X+1 TO SIZE;
           IF SUBSTR(CHARN,Y,1)='''' THEN DO;
              FID_TEXT=SUBSTR(CHARN,X+1,Y-X-1);
              CALL M$FID(FPT_FID)
              WHENALTRETURN DO;
                 CALL FTX_RPTERR;
                 ALTRETURN;
                 END;
              IF MODE='0'B THEN RETURN;
              CALL M$CLOSE(CLOSE); /* make sure the dcb is closed before we use it */
              CALL M$OPEN(OPEN_SAVE)
              WHENALTRETURN DO;
                 CALL FTX_RPTERR;
                 ALTRETURN;
                 END;
              START=Y;
              DO X=0 TO 999999;
                 BUFFER=' ';
                 CALL M$READ(READ)
                 WHENALTRETURN DO;
                    CALL M$CLOSE(CLOSE);
                    RETURN;
                    END;
                 SIZE=DCBADDR(DCBNUM(M$SAVE_FILE))->F$DCB.ARS#;
                 ERROR_BIT='0'B;
                 CALL LEX_INPUT(TRUE,ZERO,BUFFER,SIZE,TYPE);
                 END;
              END;
           END;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
SAVE:   PROC(MODE,CHARN,SIZE,START) ALTRET;
/*A* SAVE: Save workspace to file */
DCL MODE BIT(1);                        /* mode, 0=check only, 1=execute      */
DCL CHARN CHAR(SIZE);
DCL SIZE UBIN;
DCL X UBIN;
DCL Y UBIN;
DCL CHARX CHAR(Y) BASED;
DCL FTX_RPTERR ENTRY;
DCL ERROR ENTRY(4);
DCL COMPRESS ENTRY(2);
DCL START UBIN;
DCL 1 KEY_AREA STATIC,
      2 * UBIN BYTE CALIGNED INIT(3),
      2 RECNO UBIN(27) CALIGNED;
%INCLUDE CP_6;
%INCLUDE PILOT_C2;
%FPT_WRITE(FPTN=WRITE,DCB=M$SAVE_FILE,BUF=OUTPUT,KEY=KEY_AREA);
%FPT_FID(FPTN=FPT_FID,
NAME=VLP_NAME,
ACCT=VLP_ACCT,
WSN=VLP_WSN,
PASS=VLP_PASS,
SN=VLP_SN,
ASN=FID_ASN,
RES=FID_RES,
RESULTS=VLR_FID,
TEXTFID=FID_TEXT);
%VLP_NAME;
%VLP_ACCT;
%VLP_PASS;
%VLP_SN;
%VLR_FID;
%VLP_WSN;
DCL FID_TEXT CHAR(60) STATIC;
DCL FID_RES CHAR(4) STATIC;
DCL FID_ASN UBIN(9) STATIC ALIGNED;
DCL M$SAVE_FILE DCB;
%FPT_OPEN(FPTN=OPEN_SAVE,
DCB=M$SAVE_FILE,
ASN=FILE,
CTG=YES,
FUN=CREATE,
EXIST=ERROR,
ORG=KEYED,
ACS=DIRECT,
ACCT=VLP_ACCT,
NAME=VLP_NAME,
SN=VLP_SN,
PASS=VLP_PASS);
%FPT_CLOSE(FPTN=CLOSE,DCB=M$SAVE_FILE,DISP=SAVE);
DCL STRING(0:25) CHAR(1) STATIC INIT('A','B','C','D','E','F','G',
'H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z');
 
        START=START+1;
        X=START;
        IF
          SUBSTR(CHARN,X,1)~='''' THEN DO;
           CALL ERROR('SAVE WHAT?',' ',11,1);
           ALTRETURN;
           END;
        DO Y=X+1 TO SIZE;
           IF SUBSTR(CHARN,Y,1)='''' THEN DO;
              FID_TEXT=SUBSTR(CHARN,X+1,Y-X-1);
              CALL M$FID(FPT_FID)
              WHENALTRETURN DO;
                 CALL FTX_RPTERR;
                 ALTRETURN;
                 END;
              IF MODE='0'B THEN RETURN;
              CALL M$OPEN(OPEN_SAVE)
              WHENALTRETURN DO;
                 CALL FTX_RPTERR;
                 ALTRETURN;
                 END;
              START=Y;
              DO X=0 TO 25;
                 IF SYMBOL_TABLE.TEXT(X)=' ' THEN GOTO NEXT;
                 KEY_AREA.RECNO=(X+1)*1000;
                 CALL CONCAT(OUTPUT,'=',STRING(X),SUBSTR(SYMBOL_TABLE.TEXT(X),0,244));
                 Y=255;
                 CALL COMPRESS(OUTPUT,Y);
                 Y=Y+1;
                 WRITE.BUF_=VECTOR(ADDR(OUTPUT)->CHARX);
                 CALL M$WRITE(WRITE)
                 WHENALTRETURN DO;
                    CALL FTX_RPTERR;
                    CALL M$CLOSE(CLOSE);
                    ALTRETURN;
                    END;
                 END;
              CALL M$CLOSE(CLOSE);
              RETURN;
              END;
NEXT:      END;
        CALL M$CLOSE(CLOSE);
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
DEBUG:  PROC ALTRET;
/*A* DEBUG: Enter debug mode of operation */
%INCLUDE CP_6;
%FPT_CLOSE(FPTN=RELEASE,DISP=RELEASE,DCB=M$SAVE_FILE);
%FPT_OPEN(FPTN=OPENUP,DCB=M$SAVE_FILE);
%VLP_NAME(FPTN=VLP_NAME,NAME='*PILOT_EDIT_FILE');
%VLP_ACCT(FPTN=VLP_ACCT,ACCT=':SYS');
%VLP_NAME(FPTN=EDIT,NAME='EDIT');
%FPT_LINK(FPTN=LINK_EDIT,NAME=EDIT,ACCT=VLP_ACCT,CMD=COMMAND);
%FPT_CLOSE(FPTN=CLOSE,DISP=SAVE,DCB=M$SAVE_FILE);
DCL COMMAND CHAR(120) STATIC INIT('EDIT   *PILOT_EDIT_FILE ');
DCL M$SAVE_FILE DCB;
DCL TYPE CHAR(1);
DCL ZERO UBIN;
DCL SIZE UBIN;
DCL TEST BIT(1);
DCL CHARN CHAR(25);
DCL SAVE ENTRY(4) ALTRET;
DCL LOAD ENTRY(4) ALTRET;
DCL FTX_RPTERR ENTRY;
DCL COMPRESS ENTRY(2);
 
        TYPE=' ';
        SIZE=25;
        ZERO=5;
        TEST='1'B;
        CHARN='''SAVE'' ''*PILOT_EDIT_FILE''';
        CALL COMPRESS(CHARN,SIZE);
        CALL SAVE(TEST,CHARN,SIZE,ZERO);
        CALL M$LINK(LINK_EDIT)          /* edit the debug file                */
        WHENALTRETURN DO;
           CALL FTX_RPTERR;
           ALTRETURN;
           END;
        ZERO=5;
        CHARN='''LOAD''''*PILOT_EDIT_FILE''';
        CALL LOAD(TEST,CHARN,SIZE,ZERO);
        CALL M$OPEN(OPENUP); /* get ready to delete */
        CALL M$CLOSE(RELEASE);
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
QUIT:   PROC(MODE,CHARN,SIZE,I) ALTRET;
/*A* QUIT: Stop execution, return control to host */
DCL CHARN CHAR(SIZE);
DCL SIZE UBIN;
DCL I UBIN;
DCL MODE BIT(1);                        /* mode, 0=check only, 1=execute      */
%INCLUDE CP_6;
        IF MODE THEN DO;                /* clean up, then exit                */
                                        /* cleanup code goes here             */
           CALL M$EXIT;                 /* stop                               */
           END;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
STIMER: PROC(CHARN,SIZE,START);
/*A* STIMER: Set interrupt timer */
 
%INCLUDE CP_6;
%FPT_STIMER(FPTN=SET_TIMER,UENTRY=INTERVAL,UTYPE=SEC);
%FPT_TTIMER(FPTN=RESET_TIMER,CANCEL=YES); /* cancel running interval, if any  */
%FPT_INT(FPTN=TIMER,UENTRY=INTERVAL);
 
DCL START UBIN;
DCL CHARN CHAR(SIZE);
DCL SIZE UBIN;
 
DCL X UBIN;
DCL Y UBIN;
DCL UNIT_COUNT UBIN;
 
DCL ERROR ENTRY(4);
DCL INTERVAL ENTRY ASYNC;               /* interval control entry             */
%INCLUDE PILOT_C2;
 
        CALL M$TTIMER(RESET_TIMER);     /* cancel old interval, if any        */
 
        START=START+1;
        IF START>=SIZE THEN RETURN;
        X=START;
        IF
          SUBSTR(CHARN,X,1)~='''' THEN DO;
           CALL ERROR('SET INTERVAL TO WHAT?',' ',21,1);
           RETURN;
           END;
        DO Y=X+1 TO SIZE;
           IF SUBSTR(CHARN,Y,1)='''' THEN DO;
              CALL CHARBIN(UNIT_COUNT,SUBSTR(CHARN,X+1,Y-X-1));
              IF UNIT_COUNT=0 THEN RETURN;
              SET_TIMER.V.UNITS# = UNIT_COUNT;
              CALL M$INT(TIMER);
              CALL M$STIMER(SET_TIMER);
              END;
           END;
        START=Y;
 
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
TTIMER: PROC(CHARN,SIZE,START);
/*A* TTIMER: Test interval timer, or cancel */
 
DCL CHARN CHAR(SIZE);
DCL SIZE UBIN;
DCL START UBIN;
DCL UNITS UBIN STATIC;
DCL I UBIN;
 
DCL ERROR ENTRY(4);
 
%INCLUDE CP_6;
%FPT_TTIMER(FPTN=TEST_TIMER,UNITS=UNITS,UTYPE=SEC);
%FPT_TTIMER(FPTN=CANCEL,CANCEL=YES);
%INCLUDE PILOT_C2;
 
        START=START+1;
        IF SIZE<=START THEN CALL M$TTIMER(CANCEL); /* cancel old time         */
        ELSE DO;
           START=START+1;
           IF SUBSTR(CHARN,START,1)~='#' THEN DO;
              CALL ERROR('CANT USE AS A VARIABLE: ',SUBSTR(CHARN,START,1),24,1);
              RETURN;
              END;
           START=START+1;
           DO I=0 TO 25;
              IF USERS(I)=SUBSTR(CHARN,START,1) THEN DO;
                 CALL M$TTIMER(TEST_TIMER);
                 IF I=0 THEN ACCUMULATOR=UNITS;
                 ELSE SYMBOL_TABLE.NUM(I)=UNITS;
                 RETURN;
                 END;
              END;
           END;
 
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
INTERVAL: PROC ASYNC;
/*A* INTERVAL: Do V function after receiving control */
 
DCL LEX_INPUT ENTRY(5) ALTRET;
DCL ERROR ENTRY(4);
 
DCL TRUE BIT(1) STATIC INIT('1'B);
DCL ZERO UBIN STATIC INIT(0);
DCL SIZE UBIN STATIC INIT(255);
DCL TYPE CHAR(1) STATIC INIT(' ');
 
%INCLUDE PILOT_C2;
 
        CALL LEX_INPUT(TRUE,ZERO,SYMBOL_TABLE.TEXT(21),SIZE,TYPE)
        WHENALTRETURN DO;
           CALL ERROR('STIMER VARIABLE "V" CONTAINS AN ERROR',' ',36);
           END;
 
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
PARSE_INPUT: PROC;
/*A* PARSE_INPUT: Read from user, then execute */
DCL LEX_INPUT ENTRY(5) ALTRET;
DCL PARSE_B ENTRY(4) ALTRET;
DCL FTX_RPTERR ENTRY;
DCL TF BIT(1);
DCL E_EXTENT UBIN;
DCL SIZE UBIN;
DCL TYPE CHAR(1);
 
%INCLUDE CP_6;
%F$DCB;
%FPT_READ(FPTN=READ,BUF=INPUT,DCB=M$SI);
%FPT_PROMPT(FPTN=NEW_PROMPT,PROMPT=NEW);
%FPT_PROMPT(FPTN=OLD_PROMPT,PROMPT=OLD);
DCL NEW CHAR(7) STATIC INIT('input: ');
DCL OLD CHAR(1) STATIC INIT('}');
%INCLUDE PILOT_C2;
 
        CALL M$PROMPT(NEW_PROMPT);
        INPUT=' ';
        CALL M$READ(READ)
        WHENALTRETURN DO;
           CALL FTX_RPTERR;
           RETURN;
           END;
        CALL M$PROMPT(OLD_PROMPT);
        SIZE=DCBADDR(DCBNUM(M$SI))->F$DCB.ARS#;
        TF='1'B;
        E_EXTENT=0;
        TYPE=' ';
        CALL LEX_INPUT(TF,E_EXTENT,INPUT,SIZE,TYPE);
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
PARSE_OUTPUT: PROC(CHARN,SIZE,I);
/*A* PARSE_OUTPUT: Print information to user */
DCL ERROR ENTRY(4);
DCL CHARN CHAR(SIZE);
DCL SIZE UBIN;
DCL I UBIN;
DCL JUNK CHAR(6);
DCL BUFFER CHAR(256);
DCL K UBIN;
DCL J UBIN;
DCL O_TEXT BIT(1) STATIC INIT('1'B);    /* default, print                     */
DCL O_DIGIT BIT(1) STATIC INIT('1'B);   /* default, print                     */
%INCLUDE PILOT_C2;
        I=I+1;
        IF SUBSTR(CHARN,I,1)='''' THEN DO; /* output literal string           */
           I=I+1;
           J=I;
           DO WHILE(SUBSTR(CHARN,I,1)~='''' AND I<255);
              I=I+1;
              END;
           CALL ERROR(SUBSTR(CHARN,J,I-J),' ',I-J,1);
           ERROR_BIT='0'B;
           RETURN;
           END;
        ELSE DO;
           IF SUBSTR(CHARN,I,1)='#' THEN O_TEXT='0'B; /* only want number     */
           ELSE IF SUBSTR(CHARN,I,1)='=' THEN O_DIGIT='0'B; /* only want text */
           ERROR_BIT='0'B;              /* dont blow away yet                 */
           IF ~O_DIGIT THEN I=I+1;
           ELSE IF ~O_TEXT THEN I=I+1;
           DO J=0 TO 25;
              IF SUBSTR(CHARN,I,1)=USERS(J) THEN GOTO PROCESS;
              END;
           END;
        CALL ERROR('OUTPUT VARIABLES MUST BE A-Z ONLY',' ',33,1);
        RETURN;
PROCESS: K=J;
        CALL CONCAT(BUFFER,USERS(J),' Text = ',SYMBOL_TABLE.TEXT(J));
        DO J=255 DOWNTO 1;
           IF SUBSTR(BUFFER,J,1)~=' ' THEN DO;
              IF O_TEXT AND
                SYMBOL_TABLE.TEXT(K)~=' ' THEN CALL ERROR(BUFFER,' ',J+1,1);
              ERROR_BIT='0'B;
              IF K~=0 THEN CALL BINCHAR(JUNK,SYMBOL_TABLE.NUM(K));
              ELSE CALL BINCHAR(JUNK,ACCUMULATOR); /* accumulator not in symbol table */
              CALL CONCAT(BUFFER,USERS(K),' Value = ',JUNK);
              IF O_DIGIT THEN CALL ERROR(BUFFER,' ',16,1);
              ERROR_BIT='0'B;
              RETURN;
              END;
           END;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
PARSE_READ: PROC(MODE,CHARN,SIZE,I);
/*A* PARSE_READ: Read a data value, put in variable */
DCL MODE BIT(1);
DCL CHARN CHAR(SIZE);
DCL SIZE UBIN;
DCL I UBIN;
%INCLUDE CP_6;
%FPT_READ(FPTN=READ_SI,BUF=INPUT,DCB=M$SI);
%FPT_PROMPT(FPTN=NEW_PROMPT,PROMPT=NEW_BUF);
%FPT_PROMPT(FPTN=OLD_PROMPT,PROMPT=OLD_BUF);
DCL NEW_BUF CHAR(4) STATIC;
DCL OLD_BUF CHAR(1) STATIC INIT('}');
DCL J UBIN;
%F$DCB;
%INCLUDE PILOT_C2;
DCL ERROR ENTRY(4);
DCL FTX_RPTERR ENTRY;
        IF ~MODE THEN RETURN;
        I=I+1;
        IF SUBSTR(CHARN,I,1)~='#' THEN DO;
           CALL ERROR('Was expecting: #, intead got: ',SUBSTR(CHARN,I,1),30,1);
           RETURN;
           END;
        DO J=0 TO 25;
           IF SUBSTR(CHARN,I,1)=USERS(J) THEN DO;
              CALL CONCAT(NEW_BUF,USERS(J),' = ');
              CALL M$PROMPT(NEW_PROMPT);
              CALL M$READ(READ_SI)
              WHENALTRETURN DO;
                 CALL FTX_RPTERR;
                 RETURN;
                 END;
              CALL M$PROMPT(OLD_PROMPT);
              CALL CHARBIN(SYMBOL_TABLE.NUM(J),
                SUBSTR(INPUT,0,DCBADDR(DCBNUM(M$SI))->F$DCB.ARS#));
              IF J=0 THEN ACCUMULATOR=SYMBOL_TABLE.NUM(0);
              I=I+1;
              RETURN;
              END;
           END;
        CALL ERROR('WAS EXPECTING A-Z, NOT: ',SUBSTR(CHARN,I,1),24,1);
        RETURN;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
PARSE_BOX: PROC;
/*A* PARSE_BOX: Outline drawing surface */
%INCLUDE PILOT_C2;
DCL GMOVA2 ENTRY(2);
DCL GLINA2 ENTRY(2);
 
        IF ~GRAPHICS_MODE THEN RETURN;
 
        CALL GMOVA2(0,0);
        CALL GLINA2(MAX_LENGTH,0);
        CALL GLINA2(MAX_LENGTH,MAX_LENGTH);
        CALL GLINA2(0,MAX_LENGTH);
        CALL GLINA2(0,0);
 
        CALL GMOVA2(CURRENT(0),CURRENT(1));
 
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
PARSE_PIXELS: PROC(CHARN,SIZE,J);
/*A* PARSE_PIXELS: Modify size of drawing surface */
DCL CHARN CHAR(SIZE);
DCL SIZE UBIN;
DCL J UBIN;
DCL K UBIN;
DCL ERROR ENTRY(4);
%INCLUDE PILOT_C2;
DCL GCLRSEG ENTRY;
DCL GDELSRF ENTRY(1);
DCL GTRMSRF ENTRY(1);
DCL GTERM ENTRY;
 
        IF GRAPHICS_MODE THEN DO;       /* deselect, then change              */
           CALL GCLRSEG;
           CALL GDELSRF(1);
           CALL GTRMSRF(1);
           CALL GTERM;
           CALL ERROR('GRAPHICS DESELECTED',' ',19,1);
           ERROR_BIT='0'B;
           END;
        J=J+1;
        IF SUBSTR(CHARN,J,1)<='9' AND SUBSTR(CHARN,J,1)>='0' THEN DO;
           DO K=J TO SIZE;
              IF SUBSTR(CHARN,K,1)>'9' OR SUBSTR(CHARN,K,1)<'0' THEN GOTO DONE;
              END;
DONE:      CALL CHARBIN(MAX_LENGTH,SUBSTR(CHARN,J,K-J));
           J=K;
           CURRENT(0) =MAX_LENGTH/2;
           CURRENT(1) =MAX_LENGTH/2;
           RETURN;
           END;
        CALL ERROR('PIXEL CHANGE MUST BE INTEGER',' ',28,1);
END;
