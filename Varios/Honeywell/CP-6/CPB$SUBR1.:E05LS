VERSION E05

PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:1    
        1        1        /*M* CPB$OPENCS, CPB$BLDIMAGE, CPB$WILDCMPR, CPB$CHKFORT */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*   DMC,DFC   */
        8        8        /*P*   NAME:   CPB$SUBR1
        9        9               PURPOSE: Selection of routined called for purposes of performing
       10       10                       a variety of functions.
       11       11               DESCRIPTION: See the function or routine preambles for the individual
       12       12                       subroutines.
       13       13        */
       14       14                   %EJECT;
PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:2    
       15       15        /*********************************************************************/
       16       16        /*F*   NAME:   CPB$OPENCS
       17       17               PURPOSE: The M$IBEX dcb is opened for command stream reading.
       18       18               DESCRIPTION: The M$IBEX dcb is opened to the command stream for
       19       19                       reading commands if a user is not in interactive mode.
       20       20               REFERENCE:
       21       21        */
       22       22        /*D*   NAME:   CPB$OPENCS
       23       23               CALL:   CALL CPB$OPENCS
       24       24               INPUT:  CPFLAGS1.CP_YC - interactive mode check
       25       25               OUTPUT: M$IBEX opened to command stream
       26       26               DESCRIPTION: A check is made to determine whether M$IBEX is
       27       27                       currently being used for reading commands(not in
       28       28                       interactive mode). If it is, M$IBEX is reopened to the
       29       29                       command stream.
       30       30        */
       31       31        /**********************************************************************/
       32       32        CPB$OPENCS: PROC;
       33       33                   %INCLUDE B$JIT;
       34      323                   %INCLUDE B_MACROS_C;
       35      434                   %INCLUDE CP_6;
       36      515                   %INCLUDE CP_6_SUBS;
       37     1055                   %INCLUDE XU_MACRO_C;
       38     4161                   %INCLUDE CP_MACROS_C;
       39     4913                   %INCLUDE CP_SUBS_C;
       40     5830                   %INCLUDE CP_PERR_C;
       41     6168                   %INCLUDE CP_DATA_R;
       42     8731          /***** Based structures *****/
       43     8732        %B$TCB (STCLASS="BASED(B$TCB$)");
       44     8735        %B$EXCFR;
       45     8753          /***** Fpts *****/
       46     8754        %FPT_OPEN(FPTN=FPT_OPEN,STCLASS=AUTO);
       47     8863          /***** External routines *****/
       48     8864    1   DCL CPC$SCREECH ENTRY(2);
       49     8865        /*E*    ERROR: CPB-E$SUAOPN-A
       50     8866               MESSAGE: IBEX ABORT: Unable to open M$IBEX to command stream;JIT.ERR follows.
       51     8867        */
PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:3    
       52     8868        %EJECT;
PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:4    
       53     8869        /*
       54     8870             ***** If entered via CONTROL-Y then IBEX will use M$UC.
       55     8871                   If the mode is TP then IBEX cannot read the comgroup
       56     8872                   and any commands must be in B$JIT.CCBUF. In either
       57     8873                   case do not open M$IBEX to the command stream ...
       58     8874        */
       59     8875    1     IF B$JIT.CPFLAGS1.YC
       60     8876    1       AND (NOT B$JIT.CPFLAGS1.YCGET OR B$JIT.NEXTCC = %CC_FROMUC#)
       61     8877    1     OR B$JIT.MODE = %M_TP#
       62     8878
       63     8879    1        THEN
       64     8880    1           RETURN;
       65     8881    1     FPT_OPEN=CFPT_OPEN;
       66     8882    1     FPT_OPEN.V_=VECTOR(FPT_OPEN.V);
       67     8883    1     FPT_OPEN.V.ASN#=%DEVICE#;
       68     8884    1     FPT_OPEN.V.FUN#=%IN#;
       69     8885    1     FPT_OPEN.V.ORG#=%CONSEC#;
       70     8886    1     FPT_OPEN.V.ACS#=%SEQUEN#;
       71     8887    1     FPT_OPEN.V.DCB#=M$IBEX_NUM;
       72     8888    1     FPT_OPEN.V.RES#='CR';
       73     8889    1     FPT_OPEN.WSN_=VECTOR(ERASE);
       74     8890    1     CALL M$OPEN(FPT_OPEN) ALTRET(E_OPEN);
       75     8891    1     RETURN;
       76     8892    1   E_OPEN:
       77     8893    1     B$JIT.USRERR = B$TCB.ALT$ -> B$EXCFR.ERR;
       78     8894    1     CALL CPC$SCREECH (E$SUAOPN,CPB$IBEXMID);
       79     8895    1   END CPB$OPENCS;
       80     8896        %EOD;

PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:5    
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_PERR_C.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPB$OPENCS.

   Procedure CPB$OPENCS requires 56 words for executable code.
   Procedure CPB$OPENCS requires 64 words of local(AUTO) storage.

PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:6    

 Object Unit name= CPB$OPENCS                                 File name= CPB$SUBR1.:E05TOU
 UTS= JUL 29 '97 11:22:03.40 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS      1      1  CPB$OPENCS
    2   Proc  even  none    56     70  CPB$OPENCS
    3  RoData even  none     7      7  CPB$OPENCS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        0  CPB$OPENCS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 CPC$SCREECH
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  CFPT_OPEN                        r    B$JIT$
r    B$TCB$                                M$IBEX_NUM                            B_VECTNIL
PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:7    

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:8    


        1        1        /*M* CPB$OPENCS, CPB$BLDIMAGE, CPB$WILDCMPR, CPB$CHKFORT */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*   DMC,DFC   */
        8        8        /*P*   NAME:   CPB$SUBR1
        9        9               PURPOSE: Selection of routined called for purposes of performing
       10       10                       a variety of functions.
       11       11               DESCRIPTION: See the function or routine preambles for the individual
       12       12                       subroutines.
       13       13        */
       14       14                   %EJECT;
PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:9    
       15       15        /*********************************************************************/
       16       16        /*F*   NAME:   CPB$OPENCS
       17       17               PURPOSE: The M$IBEX dcb is opened for command stream reading.
       18       18               DESCRIPTION: The M$IBEX dcb is opened to the command stream for
       19       19                       reading commands if a user is not in interactive mode.
       20       20               REFERENCE:
       21       21        */
       22       22        /*D*   NAME:   CPB$OPENCS
       23       23               CALL:   CALL CPB$OPENCS
       24       24               INPUT:  CPFLAGS1.CP_YC - interactive mode check
       25       25               OUTPUT: M$IBEX opened to command stream
       26       26               DESCRIPTION: A check is made to determine whether M$IBEX is
       27       27                       currently being used for reading commands(not in
       28       28                       interactive mode). If it is, M$IBEX is reopened to the
       29       29                       command stream.
       30       30        */
       31       31        /**********************************************************************/
       32       32        CPB$OPENCS: PROC;

     32  2 000000   000000 700200 xent  CPB$OPENCS   TSX0  ! X66_AUTO_0
         2 000001   000100 000000                    ZERO    64,0

       33       33                   %INCLUDE B$JIT;
       34      323                   %INCLUDE B_MACROS_C;
       35      434                   %INCLUDE CP_6;
       36      515                   %INCLUDE CP_6_SUBS;
       37     1055                   %INCLUDE XU_MACRO_C;
       38     4161                   %INCLUDE CP_MACROS_C;
       39     4913                   %INCLUDE CP_SUBS_C;
       40     5830                   %INCLUDE CP_PERR_C;
       41     6168                   %INCLUDE CP_DATA_R;
       42     8731          /***** Based structures *****/
       43     8732        %B$TCB (STCLASS="BASED(B$TCB$)");
       44     8735        %B$EXCFR;
       45     8753          /***** Fpts *****/
       46     8754        %FPT_OPEN(FPTN=FPT_OPEN,STCLASS=AUTO);
       47     8863          /***** External routines *****/
PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:10   
       48     8864    1   DCL CPC$SCREECH ENTRY(2);
       49     8865        /*E*    ERROR: CPB-E$SUAOPN-A
       50     8866              MESSAGE: IBEX ABORT: Unable to open M$IBEX to command stream;JIT.ERR follows.
       51     8867        */
       52     8868        %EJECT;
PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:11   
       53     8869        /*
       54     8870             ***** If entered via CONTROL-Y then IBEX will use M$UC.
       55     8871                   If the mode is TP then IBEX cannot read the comgroup
       56     8872                   and any commands must be in B$JIT.CCBUF. In either
       57     8873                   case do not open M$IBEX to the command stream ...
       58     8874        */
       59     8875    1     IF B$JIT.CPFLAGS1.YC

   8875  2 000002   000000 470400 xsym               LDP0    B$JIT$
         2 000003   000143 236100                    LDQ     99,,PR0
         2 000004   040000 316003                    CANQ    16384,DU
         2 000005   000014 600000 2                  TZE     s:8875+10
         2 000006   000143 430100                    FSZN    99,,PR0
         2 000007   000020 605000 2                  TPL     s:8880
         2 000010   000151 236100                    LDQ     105,,PR0
         2 000011   000777 376003                    ANQ     511,DU
         2 000012   000003 116003                    CMPQ    3,DU
         2 000013   000020 600000 2                  TZE     s:8880
         2 000014   000000 236100                    LDQ     0,,PR0
         2 000015   740000 376003                    ANQ     -16384,DU
         2 000016   200000 116003                    CMPQ    65536,DU
         2 000017   000021 601000 2                  TNZ     s:8881

       60     8876    1       AND (NOT B$JIT.CPFLAGS1.YCGET OR B$JIT.NEXTCC = %CC_FROMUC#)
       61     8877    1     OR B$JIT.MODE = %M_TP#
       62     8878
       63     8879    1        THEN
       64     8880    1           RETURN;

   8880  2 000020   000000 702200 xent               TSX2  ! X66_ARET

       65     8881    1     FPT_OPEN=CFPT_OPEN;

   8881  2 000021   000100 100400                    MLR     fill='000'O
         2 000022   000000 000350 xsym               ADSC9   CFPT_OPEN                cn=0,n=232
         2 000023   200004 000350                    ADSC9   FPT_OPEN,,AUTO           cn=0,n=232

PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:12   
       66     8882    1     FPT_OPEN.V_=VECTOR(FPT_OPEN.V);

   8882  2 000024   000000 235000 3                  LDA     0
         2 000025   200076 452500                    STP2    FPT_OPEN+58,,AUTO
         2 000026   200076 236100                    LDQ     FPT_OPEN+58,,AUTO
         2 000027   000050 036003                    ADLQ    40,DU
         2 000030   200004 757100                    STAQ    FPT_OPEN,,AUTO

       67     8883    1     FPT_OPEN.V.ASN#=%DEVICE#;

   8883  2 000031   000003 236007                    LDQ     3,DL
         2 000032   200051 552104                    STBQ    FPT_OPEN+37,'04'O,AUTO

       68     8884    1     FPT_OPEN.V.FUN#=%IN#;

   8884  2 000033   002000 236007                    LDQ     1024,DL
         2 000034   200051 552110                    STBQ    FPT_OPEN+37,'10'O,AUTO

       69     8885    1     FPT_OPEN.V.ORG#=%CONSEC#;

   8885  2 000035   001000 236007                    LDQ     512,DL
         2 000036   200052 552110                    STBQ    FPT_OPEN+38,'10'O,AUTO

       70     8886    1     FPT_OPEN.V.ACS#=%SEQUEN#;

   8886  2 000037   000001 236007                    LDQ     1,DL
         2 000040   200052 552104                    STBQ    FPT_OPEN+38,'04'O,AUTO

       71     8887    1     FPT_OPEN.V.DCB#=M$IBEX_NUM;

   8887  2 000041   000000 720000 xsym               LXL0    M$IBEX_NUM
         2 000042   200050 740100                    STX0    FPT_OPEN+36,,AUTO

       72     8888    1     FPT_OPEN.V.RES#='CR';

   8888  2 000043   000000 236000 1                  LDQ     0
         2 000044   777777 376003                    ANQ     -1,DU
PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:13   
         2 000045   040040 276007                    ORQ     16416,DL
         2 000046   200054 756100                    STQ     FPT_OPEN+40,,AUTO

       73     8889    1     FPT_OPEN.WSN_=VECTOR(ERASE);

   8889  2 000047   000002 237000 3                  LDAQ    2
         2 000050   200036 757100                    STAQ    FPT_OPEN+26,,AUTO

       74     8890    1     CALL M$OPEN(FPT_OPEN) ALTRET(E_OPEN);

   8890  2 000051   200004 630500                    EPPR0   FPT_OPEN,,AUTO
         2 000052   450000 713400                    CLIMB   alt,open
         2 000053   410400 401760                    pmme    nvectors=18
         2 000054   000056 702000 2                  TSX2    E_OPEN

       75     8891    1     RETURN;

   8891  2 000055   000000 702200 xent               TSX2  ! X66_ARET

       76     8892    1   E_OPEN:
       77     8893    1     B$JIT.USRERR = B$TCB.ALT$ -> B$EXCFR.ERR;

   8893  2 000056   000000 470400 xsym  E_OPEN       LDP0    B$TCB$
         2 000057   000000 471500                    LDP1    0,,PR0
         2 000060   100102 236100                    LDQ     66,,PR1
         2 000061   000000 473400 xsym               LDP3    B$JIT$
         2 000062   300144 756100                    STQ     100,,PR3

       78     8894    1     CALL CPC$SCREECH (E$SUAOPN,CPB$IBEXMID);

   8894  2 000063   000005 630400 3                  EPPR0   5
         2 000064   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000065   000000 701000 xent               TSX1    CPC$SCREECH
         2 000066   000000 011000                    NOP     0

       79     8895    1   END CPB$OPENCS;

PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:14   
   8895  2 000067   000000 702200 xent               TSX2  ! X66_ARET
       80     8896        %EOD;

PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:15   
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_PERR_C.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPB$OPENCS.
PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:16   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/d STRC(2088)  r     1 FPT_OPEN

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/d STRC(2088)  r     1 CFPT_OPEN                  0-0-0/w UBIN        r     1 M$IBEX_NUM

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$EXCFR                    0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/w STRC(144)   r     1 B$TCB


   Procedure CPB$OPENCS requires 56 words for executable code.
   Procedure CPB$OPENCS requires 64 words of local(AUTO) storage.
PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:17   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:18   
          MINI XREF LISTING

B$EXCFR.ASL
      8736**DCL      8736--REDEF
B$EXCFR.ERR
      8750**DCL      8893>>ASSIGN
B$EXCFR.ERR.ERR#
      8750**DCL      8750--REDEF
B$EXCFR.EVID
      8749**DCL      8749--REDEF    8750--REDEF
B$EXCFR.IR
      8737**DCL      8737--REDEF
B$EXCFR.PREVSZ
      8736**DCL      8736--REDEF
B$EXCFR.SUBC
      8748**DCL      8748--REDEF    8749--REDEF    8749--REDEF
B$JIT.CPFLAGS1.SLEAZE
       141**DCL       141--REDEF
B$JIT.CPFLAGS1.YC
       136**DCL      8875>>IF
B$JIT.CPFLAGS1.YCGET
       137**DCL      8875>>IF
B$JIT.ERR.MID
        48**DCL        48--REDEF
B$JIT.JRESPEAK
       209**DCL       210--REDEF
B$JIT.MODE
        42**DCL      8875>>IF
B$JIT.NEXTCC
       189**DCL      8875>>IF
B$JIT.ORIGINATOR_PORT.FROM_CR
       318**DCL       318--REDEF     319--REDEF
B$JIT.PNR
       222**DCL       222--REDEF
PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:19   
B$JIT.TSLINE
       316**DCL       317--REDEF
B$JIT.USRERR
       183**DCL      8893<<ASSIGN
B$JIT$
      8664**DCL        42--IMP-PTR  8875>>IF       8875>>IF       8875>>IF       8875>>IF       8893>>ASSIGN
B$TCB.ALT$
      8733**DCL      8893>>ASSIGN
B$TCB$
      8666**DCL      8733--IMP-PTR  8893>>ASSIGN
CAMR_REC.ACSVEH_
      7703**DCL      7704--REDEF
CAMR_REC.ALTKEYS_
      7709**DCL      7710--REDEF    7710--REDEF
CAMR_REC.HDR_
      7708**DCL      7709--REDEF
CAMR_REC.TAB_
      7707**DCL      7708--REDEF
CAMR_REC.UHL_
      7701**DCL      7702--REDEF    7702--REDEF
CAMR_REC.V.FSN#
      7741**DCL      7741--REDEF    7741--REDEF
CAMR_REC.WSN_
      7707**DCL      7707--REDEF
CFPT_CLOSE.SN_
      6545**DCL      6545--REDEF
CFPT_CLOSE.UTL_
      6546**DCL      6546--REDEF
CFPT_CLOSE.V.EXPIRE#
      6560**DCL      6560--REDEF
CFPT_CLOSE.V.TYPE#
      6558**DCL      6558--REDEF
CFPT_CLOSE.V.XTNSIZE#
      6555**DCL      6555--REDEF    6557--REDEF
CFPT_OPEN
      6478**DCL      8881>>ASSIGN
PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:20   
CFPT_OPEN.ACSVEH_
      6480**DCL      6481--REDEF
CFPT_OPEN.ALTKEYS_
      6486**DCL      6487--REDEF    6487--REDEF
CFPT_OPEN.HDR_
      6485**DCL      6486--REDEF
CFPT_OPEN.TAB_
      6484**DCL      6485--REDEF
CFPT_OPEN.UHL_
      6478**DCL      6479--REDEF    6479--REDEF
CFPT_OPEN.V.FSN#
      6518**DCL      6518--REDEF    6518--REDEF
CFPT_OPEN.WSN_
      6484**DCL      6484--REDEF
CFPT_READ.STATION_
      6584**DCL      6585--REDEF
CFPT_READ.V.DVBYTE.REREAD#
      6596**DCL      6596--REDEF
CFPT_READ.V.INDX#
      6594**DCL      6594--REDEF
CFPT_READUC.STATION_
      6954**DCL      6955--REDEF
CFPT_READUC.V.DVBYTE.REREAD#
      6966**DCL      6966--REDEF
CFPT_READUC.V.INDX#
      6964**DCL      6964--REDEF
CFPT_TRTN.V.IR#
      7190**DCL      7191--REDEF
CFPT_WRITE.STATION_
      6622**DCL      6622--REDEF
CFPT_WRITE.V.DVBYTE.VFC#
      6629**DCL      6629--REDEF
CFPT_WRITEUC.STATION_
      6922**DCL      6922--REDEF
CFPT_WRITEUC.V.DVBYTE.VFC#
      6929**DCL      6929--REDEF
PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:21   
CFPT_XXX.V.STEPCC#
      7902**DCL      7902--REDEF
CGETCMD.OUT$
      7923**DCL      7929--REDEF
CPC$SCREECH
      8864**DCL-ENT  8894--CALL
CVLP_TRMCTL.BREAKCOUNT
      7514**DCL      7515--REDEF
CVLP_WINDOW.FWINDOW#
      7610**DCL      7610--REDEF    7611--REDEF
E_OPEN
      8893**LABEL    8890--CALLALT
FPT_OPEN
      8819**DCL      8881<<ASSIGN   8890<>CALL
FPT_OPEN.ACSVEH_
      8821**DCL      8822--REDEF
FPT_OPEN.ALTKEYS_
      8827**DCL      8828--REDEF    8828--REDEF
FPT_OPEN.HDR_
      8826**DCL      8827--REDEF
FPT_OPEN.TAB_
      8825**DCL      8826--REDEF
FPT_OPEN.UHL_
      8819**DCL      8820--REDEF    8820--REDEF
FPT_OPEN.V
      8828**DCL      8882--ASSIGN
FPT_OPEN.V.ACS#
      8839**DCL      8886<<ASSIGN
FPT_OPEN.V.ASN#
      8838**DCL      8883<<ASSIGN
FPT_OPEN.V.DCB#
      8828**DCL      8887<<ASSIGN
FPT_OPEN.V.FSN#
      8859**DCL      8859--REDEF    8859--REDEF
FPT_OPEN.V.FUN#
      8838**DCL      8884<<ASSIGN
PL6.E3A0      #001=CPB$OPENCS File=CPB$SUBR1.:E05TSI                             TUE 07/29/97 11:22 Page:22   
FPT_OPEN.V.ORG#
      8839**DCL      8885<<ASSIGN
FPT_OPEN.V.RES#
      8843**DCL      8888<<ASSIGN
FPT_OPEN.V_
      8819**DCL      8882<<ASSIGN
FPT_OPEN.WSN_
      8825**DCL      8825--REDEF    8889<<ASSIGN
M$IBEX_NUM
      8669**DCL      8887>>ASSIGN
M$OPEN
       443**DCL-ENT  8890--CALL

PL6.E3A0      #002=CPB$WILDCMPR File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:23   
       81        1        /*T***********************************************************/
       82        2        /*T*                                                         */
       83        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       84        4        /*T*                                                         */
       85        5        /*T***********************************************************/
       86        6        /**********************************************************************/
       87        7        /*F*   NAME:   CPB$WILDCMPR
       88        8               PURPOSE: To see if a string matches a wildcarded string.
       89        9               DESCRIPTION: If the character string matches the wildcarded
       90       10                       string, or there is no wildcarded string, RETURN, else
       91       11                       ALTRETURN.
       92       12        */
       93       13        /*D*   NAME:   CPB$WILDCMPR
       94       14               CALL:   CALL CPB$WILDCMPR(str_textc, wild_textc) ALTRET (unequal);
       95       15               INTERFACE: none.
       96       16               INPUT:  STR_TEXTC - a textc string of the string to match.
       97       17                       WILD_TEXTC - the wildcarded textc string to match.
       98       18               OUTPUT: none.
       99       19               DESCRIPTION: The specified character string is checked to see
      100       20                       if it matches the wildcarded string - ('?' matched).
      101       21                       If so return, else altreturn.
      102       22        */
      103       23        /****************************************************************************/
      104       24        CPB$WILDCMPR: PROC(SRC_STR,WILD_STR) ALTRET;
      105       25                   %INCLUDE B_MACROS_C;
      106      136
      107      137        %TEXTC (NAME=SRC_STR, STCLASS=);
      108      142        %TEXTC (NAME=WILD_STR, STCLASS=);
      109      147
      110      148    1   DCL SRCL SBIN;
      111      149    1   DCL WILDL SBIN;
      112      150    1   DCL SRC$ PTR;
      113      151    1   DCL WILD$ PTR;
      114      152    1   DCL SRC CHAR(SRCL) BASED (SRC$);
      115      153    1   DCL WILD CHAR(WILDL) BASED (WILD$);
      116      154
      117      155    1   DCL QI SBIN;
PL6.E3A0      #002=CPB$WILDCMPR File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:24   
      118      156    1   DCL SI SBIN;
      119      157    1   DCL WL SBIN;
      120      158
      121      159    1     IF ADDR(WILD_STR) = ADDR(NIL) THEN RETURN;  /* MATCH */
      122      160    1     SRCL = SRC_STR.SIZ;
      123      161    1     WILDL = WILD_STR.SIZ;
      124      162    1     SRC$ = ADDR (SRC_STR.TEXT);
      125      163    1     WILD$ = ADDR (WILD_STR.TEXT);
      126      164
      127      165    1     CALL INDEX (QI, '?', WILD);
      128      166    1     IF (QI>0) AND (SUBSTR(SRC,0,QI) ~= SUBSTR(WILD,0,QI)) THEN GOTO FAIL;
      129      167    1     SI = QI;
      130      168    2     DO WHILE (QI < WILDL);
      131      169    2       QI = QI+1;  /* SKIP OVER TO '?' */
      132      170    2       IF QI = WILDL THEN RETURN;  /* '?' IN LAST POSITION */
      133      171    2       CALL INDEX (WL, '?', SUBSTR (WILD, QI));
      134      172    2       IF (WL > 0)
      135      173    3         THEN DO;
      136      174    3           CALL INDEX (SI, SUBSTR (WILD,QI,WL), SRC, SI) ALTRET (FAIL);
      137      175    3           SI = SI+WL;
      138      176    3           QI = QI+WL;
      139      177    3         END;
      140      178    2     END; /* DO WHILE (QI < WILDL); */
      141      179    1     IF (SI ~= SRCL) THEN GOTO FAIL;
      142      180    1     RETURN;
      143      181
      144      182    1   FAIL:
      145      183    1     ALTRETURN;
      146      184
      147      185    1   END CPB$WILDCMPR;
      148      186        %EOD;

PL6.E3A0      #002=CPB$WILDCMPR File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:25   
--  Include file information  --

   B_MACROS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure CPB$WILDCMPR.

   Procedure CPB$WILDCMPR requires 79 words for executable code.
   Procedure CPB$WILDCMPR requires 12 words of local(AUTO) storage.

PL6.E3A0      #002=CPB$WILDCMPR File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:26   

 Object Unit name= CPB$WILDCMPR                               File name= CPB$SUBR1.:E05TOU
 UTS= JUL 29 '97 11:22:28.76 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    79    117  CPB$WILDCMPR
    1  RoData even  none     1      1  CPB$WILDCMPR

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        2  CPB$WILDCMPR

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_INDEX
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #002=CPB$WILDCMPR File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:27   


       81        1        /*T***********************************************************/
       82        2        /*T*                                                         */
       83        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       84        4        /*T*                                                         */
       85        5        /*T***********************************************************/
       86        6        /**********************************************************************/
       87        7        /*F*   NAME:   CPB$WILDCMPR
       88        8               PURPOSE: To see if a string matches a wildcarded string.
       89        9               DESCRIPTION: If the character string matches the wildcarded
       90       10                       string, or there is no wildcarded string, RETURN, else
       91       11                       ALTRETURN.
       92       12        */
       93       13        /*D*   NAME:   CPB$WILDCMPR
       94       14               CALL:   CALL CPB$WILDCMPR(str_textc, wild_textc) ALTRET (unequal);
       95       15               INTERFACE: none.
       96       16               INPUT:  STR_TEXTC - a textc string of the string to match.
       97       17                       WILD_TEXTC - the wildcarded textc string to match.
       98       18               OUTPUT: none.
       99       19               DESCRIPTION: The specified character string is checked to see
      100       20                       if it matches the wildcarded string - ('?' matched).
      101       21                       If so return, else altreturn.
      102       22        */
      103       23        /****************************************************************************/
      104       24        CPB$WILDCMPR: PROC(SRC_STR,WILD_STR) ALTRET;

     24  0 000000   000000 700200 xent  CPB$WILDCMPR TSX0  ! X66_AUTO_2
         0 000001   000014 000002                    ZERO    12,2

      105       25                   %INCLUDE B_MACROS_C;
      106      136
      107      137        %TEXTC (NAME=SRC_STR, STCLASS=);
      108      142        %TEXTC (NAME=WILD_STR, STCLASS=);
      109      147
      110      148    1   DCL SRCL SBIN;
      111      149    1   DCL WILDL SBIN;
      112      150    1   DCL SRC$ PTR;
PL6.E3A0      #002=CPB$WILDCMPR File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:28   
      113      151    1   DCL WILD$ PTR;
      114      152    1   DCL SRC CHAR(SRCL) BASED (SRC$);
      115      153    1   DCL WILD CHAR(WILDL) BASED (WILD$);
      116      154
      117      155    1   DCL QI SBIN;
      118      156    1   DCL SI SBIN;
      119      157    1   DCL WL SBIN;
      120      158
      121      159    1     IF ADDR(WILD_STR) = ADDR(NIL) THEN RETURN;  /* MATCH */

    159  0 000002   200004 236100                    LDQ     @WILD_STR,,AUTO
         0 000003   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000004   000006 601000 0                  TNZ     s:160

    159  0 000005   000000 702200 xent               TSX2  ! X66_ARET

      122      160    1     SRCL = SRC_STR.SIZ;

    160  0 000006   200003 470500                    LDP0    @SRC_STR,,AUTO
         0 000007   000100 101500                    MRL     fill='000'O
         0 000010   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         0 000011   200005 000004                    ADSC9   SRCL,,AUTO               cn=0,n=4

      123      161    1     WILDL = WILD_STR.SIZ;

    161  0 000012   200004 471500                    LDP1    @WILD_STR,,AUTO
         0 000013   000100 101500                    MRL     fill='000'O
         0 000014   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         0 000015   200006 000004                    ADSC9   WILDL,,AUTO              cn=0,n=4

      124      162    1     SRC$ = ADDR (SRC_STR.TEXT);

    162  0 000016   200003 236100                    LDQ     @SRC_STR,,AUTO
         0 000017   200000 036007                    ADLQ    65536,DL
         0 000020   200007 756100                    STQ     SRC$,,AUTO

      125      163    1     WILD$ = ADDR (WILD_STR.TEXT);
PL6.E3A0      #002=CPB$WILDCMPR File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:29   

    163  0 000021   200004 236100                    LDQ     @WILD_STR,,AUTO
         0 000022   200000 036007                    ADLQ    65536,DL
         0 000023   200010 756100                    STQ     WILD$,,AUTO

      126      164
      127      165    1     CALL INDEX (QI, '?', WILD);

    165  0 000024   200010 473500                    LDP3    WILD$,,AUTO
         0 000025   200006 720100                    LXL0    WILDL,,AUTO
         0 000026   000000 124540                    SCM     mask='000'O
         0 000027   300000 000010                    ADSC9   0,,PR3                   cn=0,n=*X0
         0 000030   000000 000001 1                  ADSC9   0                        cn=0,n=1
         0 000031   200011 000100                    ARG     QI,,AUTO

      128      166    1     IF (QI>0) AND (SUBSTR(SRC,0,QI) ~= SUBSTR(WILD,0,QI)) THEN GOTO FAIL;

    166  0 000032   200011 235100                    LDA     QI,,AUTO
         0 000033   000043 604400 0                  TMOZ    s:167
         0 000034   200007 474500                    LDP4    SRC$,,AUTO
         0 000035   000000 621005                    EAX1    0,AL
         0 000036   200011 722100                    LXL2    QI,,AUTO
         0 000037   040140 106540                    CMPC    fill='040'O
         0 000040   400000 000011                    ADSC9   0,,PR4                   cn=0,n=*X1
         0 000041   300000 000012                    ADSC9   0,,PR3                   cn=0,n=*X2
         0 000042   000116 601000 0                  TNZ     FAIL

      129      167    1     SI = QI;

    167  0 000043   200011 235100                    LDA     QI,,AUTO
         0 000044   200012 755100                    STA     SI,,AUTO

      130      168    2     DO WHILE (QI < WILDL);

    168  0 000045   200011 236100                    LDQ     QI,,AUTO
         0 000046   200006 116100                    CMPQ    WILDL,,AUTO
         0 000047   000112 605000 0                  TPL     s:179
PL6.E3A0      #002=CPB$WILDCMPR File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:30   

      131      169    2       QI = QI+1;  /* SKIP OVER TO '?' */

    169  0 000050   200011 054100                    AOS     QI,,AUTO

      132      170    2       IF QI = WILDL THEN RETURN;  /* '?' IN LAST POSITION */

    170  0 000051   200011 236100                    LDQ     QI,,AUTO
         0 000052   200006 116100                    CMPQ    WILDL,,AUTO
         0 000053   000055 601000 0                  TNZ     s:171

    170  0 000054   000000 702200 xent               TSX2  ! X66_ARET

      133      171    2       CALL INDEX (WL, '?', SUBSTR (WILD, QI));

    171  0 000055   200006 236100                    LDQ     WILDL,,AUTO
         0 000056   200011 136100                    SBLQ    QI,,AUTO
         0 000057   200010 470500                    LDP0    WILD$,,AUTO
         0 000060   000000 620006                    EAX0    0,QL
         0 000061   200011 235100                    LDA     QI,,AUTO
         0 000062   000000 124545                    SCM     mask='000'O
         0 000063   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=*X0
         0 000064   000000 000001 1                  ADSC9   0                        cn=0,n=1
         0 000065   200013 000100                    ARG     WL,,AUTO

      134      172    2       IF (WL > 0)

    172  0 000066   200013 236100                    LDQ     WL,,AUTO
         0 000067   000107 604400 0                  TMOZ    s:178

      135      173    3         THEN DO;

      136      174    3           CALL INDEX (SI, SUBSTR (WILD,QI,WL), SRC, SI) ALTRET (FAIL);

    174  0 000070   200012 631500                    EPPR1   SI,,AUTO
         0 000071   000000 633500                    EPPR3   0,,PR0
         0 000072   300000 500505                    A9BD    0,AL,PR3
PL6.E3A0      #002=CPB$WILDCMPR File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:31   
         0 000073   000000 623006                    EAX3    0,QL
         0 000074   200007 470500                    LDP0    SRC$,,AUTO
         0 000075   200005 720100                    LXL0    SRCL,,AUTO
         0 000076   200012 236100                    LDQ     SI,,AUTO
         0 000077   000000 701000 xent               TSX1    X66_INDEX
         0 000100   000116 710000 0                  TRA     FAIL

      137      175    3           SI = SI+WL;

    175  0 000101   200012 236100                    LDQ     SI,,AUTO
         0 000102   200013 036100                    ADLQ    WL,,AUTO
         0 000103   200012 756100                    STQ     SI,,AUTO

      138      176    3           QI = QI+WL;

    176  0 000104   200011 236100                    LDQ     QI,,AUTO
         0 000105   200013 036100                    ADLQ    WL,,AUTO
         0 000106   200011 756100                    STQ     QI,,AUTO

      139      177    3         END;

      140      178    2     END; /* DO WHILE (QI < WILDL); */

    178  0 000107   200011 236100                    LDQ     QI,,AUTO
         0 000110   200006 116100                    CMPQ    WILDL,,AUTO
         0 000111   000050 604000 0                  TMI     s:169

      141      179    1     IF (SI ~= SRCL) THEN GOTO FAIL;

    179  0 000112   200012 236100                    LDQ     SI,,AUTO
         0 000113   200005 116100                    CMPQ    SRCL,,AUTO
         0 000114   000116 601000 0                  TNZ     FAIL

      142      180    1     RETURN;

    180  0 000115   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #002=CPB$WILDCMPR File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:32   
      143      181
      144      182    1   FAIL:
      145      183    1     ALTRETURN;

    183  0 000116   000000 702200 xent  FAIL         TSX2  ! X66_AALT
      146      184
      147      185    1   END CPB$WILDCMPR;
      148      186        %EOD;

PL6.E3A0      #002=CPB$WILDCMPR File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:33   
--  Include file information  --

   B_MACROS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure CPB$WILDCMPR.
PL6.E3A0      #002=CPB$WILDCMPR File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:34   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @SRC_STR                   4-0-0/w PTR         r     1 @WILD_STR
    11-0-0/w SBIN        r     1 QI                        12-0-0/w SBIN        r     1 SI
     7-0-0/w PTR         r     1 SRC$                       5-0-0/w SBIN        r     1 SRCL
    *0-0-0/c ASTR(9)     r     1 SRC_STR                   10-0-0/w PTR         r     1 WILD$
     6-0-0/w SBIN        r     1 WILDL                     *0-0-0/c ASTR(9)     r     1 WILD_STR
    13-0-0/w SBIN        r     1 WL

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c ACHR        r     1 SRC                        0-0-0/c ACHR        r     1 WILD


   Procedure CPB$WILDCMPR requires 79 words for executable code.
   Procedure CPB$WILDCMPR requires 12 words of local(AUTO) storage.
PL6.E3A0      #002=CPB$WILDCMPR File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:35   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=CPB$WILDCMPR File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:36   
          MINI XREF LISTING

FAIL
       183**LABEL     166--GOTO      174--CALLALT   179--GOTO
QI
       155**DCL       165<<CALLBLT   166>>IF        166>>IF        166>>IF        167>>ASSIGN    168>>DOWHILE
       169<<ASSIGN    169>>ASSIGN    170>>IF        171>>CALLBLT   174>>CALLBLT   176<<ASSIGN    176>>ASSIGN
SI
       156**DCL       167<<ASSIGN    174<<CALLBLT   174>>CALLBLT   175<<ASSIGN    175>>ASSIGN    179>>IF
SRC
       152**DCL       166>>IF        174>>CALLBLT
SRC$
       150**DCL       152--IMP-PTR   162<<ASSIGN    166>>IF        174>>CALLBLT
SRCL
       148**DCL       152--IMP-SIZ   160<<ASSIGN    166>>IF        174>>CALLBLT   179>>IF
SRC_STR
       138**DCL        24--PROC
SRC_STR.SIZ
       139**DCL       140--IMP-SIZ   160>>ASSIGN
SRC_STR.TEXT
       140**DCL       162--ASSIGN
WILD
       153**DCL       165>>CALLBLT   166>>IF        171>>CALLBLT   174>>CALLBLT
WILD$
       151**DCL       153--IMP-PTR   163<<ASSIGN    165>>CALLBLT   166>>IF        171>>CALLBLT   174>>CALLBLT
WILDL
       149**DCL       153--IMP-SIZ   161<<ASSIGN    165>>CALLBLT   166>>IF        168>>DOWHILE   170>>IF
       171>>CALLBLT   174>>CALLBLT
WILD_STR
       143**DCL        24--PROC      159--IF
WILD_STR.SIZ
       144**DCL       145--IMP-SIZ   161>>ASSIGN
WILD_STR.TEXT
       145**DCL       163--ASSIGN
PL6.E3A0      #002=CPB$WILDCMPR File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:37   
WL
       157**DCL       171<<CALLBLT   172>>IF        174>>CALLBLT   175>>ASSIGN    176>>ASSIGN

PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:38   
      149        1        /*T***********************************************************/
      150        2        /*T*                                                         */
      151        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      152        4        /*T*                                                         */
      153        5        /*T***********************************************************/
      154        6        /**********************************************************************/
      155        7        /*F*   NAME:   CPB$BLDIMAGE
      156        8               PURPOSE: Build a print image by appending specified text to a
      157        9                       specified buffer.
      158       10               DESCRIPTION: The character string is inserted into the specified buffer
      159       11                       at the specified offset. Buffer contents are printed whenever
      160       12                       the buffer size is exceeded(mode dependent).
      161       13        */
      162       14        /*D*   NAME:   CPB$BLDIMAGE
      163       15               CALL:   CALL CPB$BLDIMAGE(buff$,cdest$,string$,len,tab1)
      164       16               INTERFACE: CPE$LISTOUT - output buffer contents when size exceeded
      165       17               INPUT:  BUFF$ - ptr to outbuff buffer(beginning)
      166       18                       CDEST$ - ptr to current string destination
      167       19                       STRING$ - ptr to string to be substituted
      168       20                       LEN  - string length
      169       21                       TAB1 - tab setting
      170       22               OUTPUT: CDSET$ - ptr set to next destination
      171       23                       character string into buffer
      172       24               DESCRIPTION: The specified character string is inserted into the
      173       25                       specified buffer.    The destination pointer is bumped
      174       26                       to reflect the next store location. If insertion of
      175       27                       the character string should cause buffer overflow, the
      176       28                       buffer is printed and the character string placed into the next
      177       29                       image. The maximum number of characters per line is 80 except for
      178       30                       batch which is set at 120. Tabbing is performed if specified.
      179       31        */
      180       32        /****************************************************************************/
      181       33        CPB$BLDIMAGE: PROC(BUFF$,CDEST$,STRING$,LEN,TAB1) ALTRET;
      182       34                   %INCLUDE CP_6;
      183      115                   %INCLUDE B$JIT;
      184      405                   %INCLUDE B_MACROS_C;
      185      516                   %INCLUDE XU_MACRO_C;
PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:39   
      186     3622                   %INCLUDE CP_DATA_R;
      187     6185                   %INCLUDE CP_MACROS_C;
      188     6937    1   DCL BUFF$ PTR;                                   /*Ptr to output buffer*/
      189     6938    1   DCL CDEST$ PTR;                       /*Ptr to cur. String destination*/
      190     6939    1   DCL NDEST$ PTR;                        /*Ptr to next string DEST.*/
      191     6940    1   DCL STRING$ PTR;                      /*Ptr to input string*/
      192     6941    1   DCL LEN UBIN(36);                     /*String length*/
      193     6942    1   DCL TAB1 UBIN;                                   /*Tab setting*/
      194     6943    1   DCL OFFSET UBIN(9);
      195     6944    1   DCL 1 VARY$STRNG BASED CHAR(LEN);
      196     6945    1   DCL 1 CHAR$120 CHAR(120) BASED;
      197     6946    1   DCL CPE$LISTOUT ENTRY(1) ALTRET;
      198     6947          /***** Based structures *****/
      199     6948        %B$TCB (STCLASS="BASED(B$TCB$)");
      200     6951        %B$EXCFR;
      201     6969        %SEG$2;
      202     7029          /***** Fpts *****/
      203     7030        %FPT_WRITE (FPTN=FPT$WRITE,STCLASS=BASED);
      204     7061        /*
      205     7062          ****  Utilize TAB1 only upon initial entry for creating an image
      206     7063        */
      207     7064    1     IF ((BUFF$=CDEST$) AND (ADDR(TAB1)~=ADDR(NIL)))
      208     7065    1        THEN
      209     7066    1           CDEST$=PINCRC(BUFF$,TAB1);
      210     7067        /*
      211     7068           ****    Perform buffer overflow check before adding string
      212     7069        */
      213     7070    1     NDEST$=PINCRC(CDEST$,LEN);
      214     7071    1     OFFSET=POFFC(NDEST$,BUFF$);
      215     7072    1     IF (((B$JIT.MODE = %M_BATCH#) AND (OFFSET > 119)) OR
      216     7073    1          ((B$JIT.MODE ~= %M_BATCH#) AND (OFFSET > 79)))
      217     7074    1        THEN
      218     7075    2           DO;
      219     7076    2              SEG$2.FPT_WRITE$->FPT$WRITE.BUF_.BUF$=BUFF$;
      220     7077    2              SEG$2.FPT_WRITE$->FPT$WRITE.BUF_.BOUND=POFFC(CDEST$,BUFF$)-1;
      221     7078    2              CALL CPE$LISTOUT(SEG$2.FPT_WRITE$) ALTRET(CPB$BLDIMAGE50);
      222     7079        /*               **** Reinit ptr to ist char. In buffer */
PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:40   
      223     7080    2              CDEST$=BUFF$;
      224     7081    2              IF ADDR(TAB1) ~= ADDR(NIL)
      225     7082    2                 THEN
      226     7083    2                    CDEST$=PINCRC(BUFF$,TAB1);
      227     7084    2              NDEST$=PINCRC(CDEST$,LEN);
      228     7085    2           END;
      229     7086        /*         **** Passed the test so insert text   */
      230     7087    1     IF (BUFF$=CDEST$) OR ((ADDR(TAB1)~=ADDR(NIL)) AND
      231     7088    1          (CDEST$=PINCRC(BUFF$,TAB1)))
      232     7089    1        THEN /*Blank out buffer*/
      233     7090    1           BUFF$->CHAR$120=' ';
      234     7091    1     CALL INSERT(CDEST$->VARY$STRNG,0,LEN,STRING$->VARY$STRNG);
      235     7092        /*         **** Set ptr to new destination for next string */
      236     7093    1     CDEST$=NDEST$;
      237     7094    1     RETURN;
      238     7095    1   CPB$BLDIMAGE50:;
      239     7096    1     B$JIT.USRERR = B$TCB.ALT$ -> B$EXCFR.ERR;
      240     7097    1     ALTRETURN;
      241     7098    1   END CPB$BLDIMAGE;
      242     7099                   %EOD;

PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:41   
--  Include file information  --

   CP_MACROS_C.:E05TOU  is referenced.
   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPB$BLDIMAGE.

   Procedure CPB$BLDIMAGE requires 126 words for executable code.
   Procedure CPB$BLDIMAGE requires 12 words of local(AUTO) storage.

PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:42   

 Object Unit name= CPB$BLDIMAGE                               File name= CPB$SUBR1.:E05TOU
 UTS= JUL 29 '97 11:22:31.40 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none   126    176  CPB$BLDIMAGE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        5  CPB$BLDIMAGE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 CPE$LISTOUT
                       nStd      0 X66_AUTO_5
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    SEG2$                            r    B$JIT$
r    B$TCB$                                B_VECTNIL
PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:43   


      149        1        /*T***********************************************************/
      150        2        /*T*                                                         */
      151        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      152        4        /*T*                                                         */
      153        5        /*T***********************************************************/
      154        6        /**********************************************************************/
      155        7        /*F*   NAME:   CPB$BLDIMAGE
      156        8               PURPOSE: Build a print image by appending specified text to a
      157        9                       specified buffer.
      158       10               DESCRIPTION: The character string is inserted into the specified buffer
      159       11                       at the specified offset. Buffer contents are printed whenever
      160       12                       the buffer size is exceeded(mode dependent).
      161       13        */
      162       14        /*D*   NAME:   CPB$BLDIMAGE
      163       15               CALL:   CALL CPB$BLDIMAGE(buff$,cdest$,string$,len,tab1)
      164       16               INTERFACE: CPE$LISTOUT - output buffer contents when size exceeded
      165       17               INPUT:  BUFF$ - ptr to outbuff buffer(beginning)
      166       18                       CDEST$ - ptr to current string destination
      167       19                       STRING$ - ptr to string to be substituted
      168       20                       LEN  - string length
      169       21                       TAB1 - tab setting
      170       22               OUTPUT: CDSET$ - ptr set to next destination
      171       23                       character string into buffer
      172       24               DESCRIPTION: The specified character string is inserted into the
      173       25                       specified buffer.    The destination pointer is bumped
      174       26                       to reflect the next store location. If insertion of
      175       27                       the character string should cause buffer overflow, the
      176       28                       buffer is printed and the character string placed into the next
      177       29                       image. The maximum number of characters per line is 80 except for
      178       30                       batch which is set at 120. Tabbing is performed if specified.
      179       31        */
      180       32        /****************************************************************************/
      181       33        CPB$BLDIMAGE: PROC(BUFF$,CDEST$,STRING$,LEN,TAB1) ALTRET;

     33  1 000000   000000 700200 xent  CPB$BLDIMAGE TSX0  ! X66_AUTO_5
         1 000001   000014 000005                    ZERO    12,5
PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:44   

      182       34                   %INCLUDE CP_6;
      183      115                   %INCLUDE B$JIT;
      184      405                   %INCLUDE B_MACROS_C;
      185      516                   %INCLUDE XU_MACRO_C;
      186     3622                   %INCLUDE CP_DATA_R;
      187     6185                   %INCLUDE CP_MACROS_C;
      188     6937    1   DCL BUFF$ PTR;                                   /*Ptr to output buffer*/
      189     6938    1   DCL CDEST$ PTR;                       /*Ptr to cur. String destination*/
      190     6939    1   DCL NDEST$ PTR;                        /*Ptr to next string DEST.*/
      191     6940    1   DCL STRING$ PTR;                      /*Ptr to input string*/
      192     6941    1   DCL LEN UBIN(36);                     /*String length*/
      193     6942    1   DCL TAB1 UBIN;                                   /*Tab setting*/
      194     6943    1   DCL OFFSET UBIN(9);
      195     6944    1   DCL 1 VARY$STRNG BASED CHAR(LEN);
      196     6945    1   DCL 1 CHAR$120 CHAR(120) BASED;
      197     6946    1   DCL CPE$LISTOUT ENTRY(1) ALTRET;
      198     6947          /***** Based structures *****/
      199     6948        %B$TCB (STCLASS="BASED(B$TCB$)");
      200     6951        %B$EXCFR;
      201     6969        %SEG$2;
      202     7029          /***** Fpts *****/
      203     7030        %FPT_WRITE (FPTN=FPT$WRITE,STCLASS=BASED);
      204     7061        /*
      205     7062          ****  Utilize TAB1 only upon initial entry for creating an image
      206     7063        */
      207     7064    1     IF ((BUFF$=CDEST$) AND (ADDR(TAB1)~=ADDR(NIL)))

   7064  1 000002   200003 470500                    LDP0    @BUFF$,,AUTO
         1 000003   200004 471500                    LDP1    @CDEST$,,AUTO
         1 000004   000000 236100                    LDQ     0,,PR0
         1 000005   100000 116100                    CMPQ    0,,PR1
         1 000006   000020 601000 1                  TNZ     s:7070
         1 000007   200007 236100                    LDQ     @TAB1,,AUTO
         1 000010   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000011   000020 600000 1                  TZE     s:7070

PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:45   
      208     7065    1        THEN
      209     7066    1           CDEST$=PINCRC(BUFF$,TAB1);

   7066  1 000012   200007 473500                    LDP3    @TAB1,,AUTO
         1 000013   300000 236100                    LDQ     0,,PR3
         1 000014   000000 474500                    LDP4    0,,PR0
         1 000015   000011 402007                    MPY     9,DL
         1 000016   400000 503506                    ABD     0,QL,PR4
         1 000017   100000 454500                    STP4    0,,PR1

      210     7067        /*
      211     7068           ****    Perform buffer overflow check before adding string
      212     7069        */
      213     7070    1     NDEST$=PINCRC(CDEST$,LEN);

   7070  1 000020   200006 473500                    LDP3    @LEN,,AUTO
         1 000021   300000 236100                    LDQ     0,,PR3
         1 000022   100000 474500                    LDP4    0,,PR1
         1 000023   000011 402007                    MPY     9,DL
         1 000024   400000 503506                    ABD     0,QL,PR4
         1 000025   200010 454500                    STP4    NDEST$,,AUTO

      214     7071    1     OFFSET=POFFC(NDEST$,BUFF$);

   7071  1 000026   000000 236100                    LDQ     0,,PR0
         1 000027   000020 772000                    QRL     16
         1 000030   200012 756100                    STQ     OFFSET+1,,AUTO
         1 000031   200010 236100                    LDQ     NDEST$,,AUTO
         1 000032   000020 772000                    QRL     16
         1 000033   200012 136100                    SBLQ    OFFSET+1,,AUTO
         1 000034   000033 736000                    QLS     27
         1 000035   200011 756100                    STQ     OFFSET,,AUTO

      215     7072    1     IF (((B$JIT.MODE = %M_BATCH#) AND (OFFSET > 119)) OR

   7072  1 000036   000000 475400 xsym               LDP5    B$JIT$
         1 000037   500000 236100                    LDQ     0,,PR5
PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:46   
         1 000040   740000 376003                    ANQ     -16384,DU
         1 000041   040000 116003                    CMPQ    16384,DU
         1 000042   000047 601000 1                  TNZ     s:7072+9
         1 000043   200011 236100                    LDQ     OFFSET,,AUTO
         1 000044   777000 376003                    ANQ     -512,DU
         1 000045   170000 116003                    CMPQ    61440,DU
         1 000046   000057 603000 1                  TRC     s:7076
         1 000047   500000 236100                    LDQ     0,,PR5
         1 000050   740000 376003                    ANQ     -16384,DU
         1 000051   040000 116003                    CMPQ    16384,DU
         1 000052   000131 600000 1                  TZE     s:7087
         1 000053   200011 236100                    LDQ     OFFSET,,AUTO
         1 000054   777000 376003                    ANQ     -512,DU
         1 000055   120000 116003                    CMPQ    40960,DU
         1 000056   000131 602000 1                  TNC     s:7087

      216     7073    1          ((B$JIT.MODE ~= %M_BATCH#) AND (OFFSET > 79)))
      217     7074    1        THEN
      218     7075    2           DO;

      219     7076    2              SEG$2.FPT_WRITE$->FPT$WRITE.BUF_.BUF$=BUFF$;

   7076  1 000057   000000 476400 xsym               LDP6    SEG2$
         1 000060   600165 477500                    LDP7    117,,PR6
         1 000061   000000 236100                    LDQ     0,,PR0
         1 000062   700005 756100                    STQ     5,,PR7

      220     7077    2              SEG$2.FPT_WRITE$->FPT$WRITE.BUF_.BOUND=POFFC(CDEST$,BUFF$)-1;

   7077  1 000063   600165 477500                    LDP7    117,,PR6
         1 000064   000000 236100                    LDQ     0,,PR0
         1 000065   000020 772000                    QRL     16
         1 000066   200012 756100                    STQ     OFFSET+1,,AUTO
         1 000067   100000 236100                    LDQ     0,,PR1
         1 000070   000020 772000                    QRL     16
         1 000071   200012 136100                    SBLQ    OFFSET+1,,AUTO
         1 000072   000001 136007                    SBLQ    1,DL
PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:47   
         1 000073   000020 736000                    QLS     16
         1 000074   700004 676100                    ERQ     4,,PR7
         1 000075   000034 376000 xsym               ANQ     B_VECTNIL+28
         1 000076   700004 656100                    ERSQ    4,,PR7

      221     7078    2              CALL CPE$LISTOUT(SEG$2.FPT_WRITE$) ALTRET(CPB$BLDIMAGE50);

   7078  1 000077   000000 236000 xsym               LDQ     SEG2$
         1 000100   000165 036003                    ADLQ    117,DU
         1 000101   200012 756100                    STQ     OFFSET+1,,AUTO
         1 000102   200012 630500                    EPPR0   OFFSET+1,,AUTO
         1 000103   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000104   000000 701000 xent               TSX1    CPE$LISTOUT
         1 000105   000170 702000 1                  TSX2    CPB$BLDIMAGE50

      222     7079        /*               **** Reinit ptr to ist char. In buffer */
      223     7080    2              CDEST$=BUFF$;

   7080  1 000106   200003 470500                    LDP0    @BUFF$,,AUTO
         1 000107   000000 236100                    LDQ     0,,PR0
         1 000110   200004 471500                    LDP1    @CDEST$,,AUTO
         1 000111   100000 756100                    STQ     0,,PR1

      224     7081    2              IF ADDR(TAB1) ~= ADDR(NIL)

   7081  1 000112   200007 236100                    LDQ     @TAB1,,AUTO
         1 000113   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000114   000123 600000 1                  TZE     s:7084

      225     7082    2                 THEN
      226     7083    2                    CDEST$=PINCRC(BUFF$,TAB1);

   7083  1 000115   200007 473500                    LDP3    @TAB1,,AUTO
         1 000116   300000 236100                    LDQ     0,,PR3
         1 000117   000000 474500                    LDP4    0,,PR0
         1 000120   000011 402007                    MPY     9,DL
         1 000121   400000 503506                    ABD     0,QL,PR4
PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:48   
         1 000122   100000 454500                    STP4    0,,PR1

      227     7084    2              NDEST$=PINCRC(CDEST$,LEN);

   7084  1 000123   200006 473500                    LDP3    @LEN,,AUTO
         1 000124   300000 236100                    LDQ     0,,PR3
         1 000125   100000 474500                    LDP4    0,,PR1
         1 000126   000011 402007                    MPY     9,DL
         1 000127   400000 503506                    ABD     0,QL,PR4
         1 000130   200010 454500                    STP4    NDEST$,,AUTO

      228     7085    2           END;

      229     7086        /*         **** Passed the test so insert text   */
      230     7087    1     IF (BUFF$=CDEST$) OR ((ADDR(TAB1)~=ADDR(NIL)) AND

   7087  1 000131   000000 236100                    LDQ     0,,PR0
         1 000132   100000 116100                    CMPQ    0,,PR1
         1 000133   000150 600000 1                  TZE     s:7090
         1 000134   200007 236100                    LDQ     @TAB1,,AUTO
         1 000135   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000136   000154 600000 1                  TZE     s:7091
         1 000137   200007 475500                    LDP5    @TAB1,,AUTO
         1 000140   500000 236100                    LDQ     0,,PR5
         1 000141   000000 476500                    LDP6    0,,PR0
         1 000142   000011 402007                    MPY     9,DL
         1 000143   600000 503506                    ABD     0,QL,PR6
         1 000144   200012 456500                    STP6    OFFSET+1,,AUTO
         1 000145   200012 236100                    LDQ     OFFSET+1,,AUTO
         1 000146   100000 116100                    CMPQ    0,,PR1
         1 000147   000154 601000 1                  TNZ     s:7091

      231     7088    1          (CDEST$=PINCRC(BUFF$,TAB1)))
      232     7089    1        THEN /*Blank out buffer*/
      233     7090    1           BUFF$->CHAR$120=' ';

   7090  1 000150   000000 475500                    LDP5    0,,PR0
PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:49   
         1 000151   040100 100400                    MLR     fill='040'O
         1 000152   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         1 000153   500000 000170                    ADSC9   0,,PR5                   cn=0,n=120

      234     7091    1     CALL INSERT(CDEST$->VARY$STRNG,0,LEN,STRING$->VARY$STRNG);

   7091  1 000154   100000 475500                    LDP5    0,,PR1
         1 000155   300000 720100                    LXL0    0,,PR3
         1 000156   200005 476500                    LDP6    @STRING$,,AUTO
         1 000157   600000 477500                    LDP7    0,,PR6
         1 000160   200012 740100                    STX0    OFFSET+1,,AUTO
         1 000161   200012 221100                    LDX1    OFFSET+1,,AUTO
         1 000162   040140 100540                    MLR     fill='040'O
         1 000163   700000 000011                    ADSC9   0,,PR7                   cn=0,n=*X1
         1 000164   500000 000010                    ADSC9   0,,PR5                   cn=0,n=*X0

      235     7092        /*         **** Set ptr to new destination for next string */
      236     7093    1     CDEST$=NDEST$;

   7093  1 000165   200010 236100                    LDQ     NDEST$,,AUTO
         1 000166   100000 756100                    STQ     0,,PR1

      237     7094    1     RETURN;

   7094  1 000167   000000 702200 xent               TSX2  ! X66_ARET

   7093  1 000170                       CPB$BLDIMAG* null
      238     7095    1   CPB$BLDIMAGE50:;
      239     7096    1     B$JIT.USRERR = B$TCB.ALT$ -> B$EXCFR.ERR;

   7096  1 000170   000000 470400 xsym               LDP0    B$TCB$
         1 000171   000000 471500                    LDP1    0,,PR0
         1 000172   100102 236100                    LDQ     66,,PR1
         1 000173   000000 473400 xsym               LDP3    B$JIT$
         1 000174   300144 756100                    STQ     100,,PR3

      240     7097    1     ALTRETURN;
PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:50   

   7097  1 000175   000000 702200 xent               TSX2  ! X66_AALT
      241     7098    1   END CPB$BLDIMAGE;
      242     7099                   %EOD;

PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:51   
--  Include file information  --

   CP_MACROS_C.:E05TOU  is referenced.
   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPB$BLDIMAGE.
PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:52   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @BUFF$                     4-0-0/w PTR         r     1 @CDEST$
     6-0-0/w PTR         r     1 @LEN                       5-0-0/w PTR         r     1 @STRING$
     7-0-0/w PTR         r     1 @TAB1                     *0-0-0/w PTR         r     1 BUFF$
    *0-0-0/w PTR         r     1 CDEST$                    *0-0-0/w UBIN        r     1 LEN
    10-0-0/w PTR         r     1 NDEST$                    11-0-0/w UBIN(9)     r     1 OFFSET
    *0-0-0/w PTR         r     1 STRING$                   *0-0-0/w UBIN        r     1 TAB1

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/w PTR         r     1 SEG2$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$EXCFR                    0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0/c CHAR(120)   r     1 CHAR$120
     0-0-0/d STRC(432)   r     1 FPT$WRITE                  0-0-0/w STRC(6264)  r     1 SEG$2
     0-0-0/c ACHR        r     1 VARY$STRNG


   Procedure CPB$BLDIMAGE requires 126 words for executable code.
   Procedure CPB$BLDIMAGE requires 12 words of local(AUTO) storage.
PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:53   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:54   
          MINI XREF LISTING

B$EXCFR.ASL
      6952**DCL      6952--REDEF
B$EXCFR.ERR
      6966**DCL      7096>>ASSIGN
B$EXCFR.ERR.ERR#
      6966**DCL      6966--REDEF
B$EXCFR.EVID
      6965**DCL      6965--REDEF    6966--REDEF
B$EXCFR.IR
      6953**DCL      6953--REDEF
B$EXCFR.PREVSZ
      6952**DCL      6952--REDEF
B$EXCFR.SUBC
      6964**DCL      6964--REDEF    6965--REDEF    6965--REDEF
B$JIT.CPFLAGS1.SLEAZE
       223**DCL       223--REDEF
B$JIT.ERR.MID
       130**DCL       130--REDEF
B$JIT.JRESPEAK
       291**DCL       292--REDEF
B$JIT.MODE
       124**DCL      7072>>IF       7072>>IF
B$JIT.ORIGINATOR_PORT.FROM_CR
       400**DCL       400--REDEF     401--REDEF
B$JIT.PNR
       304**DCL       304--REDEF
B$JIT.TSLINE
       398**DCL       399--REDEF
B$JIT.USRERR
       265**DCL      7096<<ASSIGN
B$JIT$
      6118**DCL       124--IMP-PTR  7072>>IF       7072>>IF       7096>>ASSIGN
PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:55   
B$TCB.ALT$
      6949**DCL      7096>>ASSIGN
B$TCB$
      6120**DCL      6949--IMP-PTR  7096>>ASSIGN
BUFF$
      6937**DCL        33--PROC     7064>>IF       7066>>ASSIGN   7071>>ASSIGN   7076>>ASSIGN   7077>>ASSIGN
      7080>>ASSIGN   7083>>ASSIGN   7087>>IF       7087>>IF       7090>>ASSIGN
CAMR_REC.ACSVEH_
      5157**DCL      5158--REDEF
CAMR_REC.ALTKEYS_
      5163**DCL      5164--REDEF    5164--REDEF
CAMR_REC.HDR_
      5162**DCL      5163--REDEF
CAMR_REC.TAB_
      5161**DCL      5162--REDEF
CAMR_REC.UHL_
      5155**DCL      5156--REDEF    5156--REDEF
CAMR_REC.V.FSN#
      5195**DCL      5195--REDEF    5195--REDEF
CAMR_REC.WSN_
      5161**DCL      5161--REDEF
CDEST$
      6938**DCL        33--PROC     7064>>IF       7066<<ASSIGN   7070>>ASSIGN   7077>>ASSIGN   7080<<ASSIGN
      7083<<ASSIGN   7084>>ASSIGN   7087>>IF       7087>>IF       7091>>CALLBLT  7093<<ASSIGN
CFPT_CLOSE.SN_
      3999**DCL      3999--REDEF
CFPT_CLOSE.UTL_
      4000**DCL      4000--REDEF
CFPT_CLOSE.V.EXPIRE#
      4014**DCL      4014--REDEF
CFPT_CLOSE.V.TYPE#
      4012**DCL      4012--REDEF
CFPT_CLOSE.V.XTNSIZE#
      4009**DCL      4009--REDEF    4011--REDEF
CFPT_OPEN.ACSVEH_
      3934**DCL      3935--REDEF
PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:56   
CFPT_OPEN.ALTKEYS_
      3940**DCL      3941--REDEF    3941--REDEF
CFPT_OPEN.HDR_
      3939**DCL      3940--REDEF
CFPT_OPEN.TAB_
      3938**DCL      3939--REDEF
CFPT_OPEN.UHL_
      3932**DCL      3933--REDEF    3933--REDEF
CFPT_OPEN.V.FSN#
      3972**DCL      3972--REDEF    3972--REDEF
CFPT_OPEN.WSN_
      3938**DCL      3938--REDEF
CFPT_READ.STATION_
      4038**DCL      4039--REDEF
CFPT_READ.V.DVBYTE.REREAD#
      4050**DCL      4050--REDEF
CFPT_READ.V.INDX#
      4048**DCL      4048--REDEF
CFPT_READUC.STATION_
      4408**DCL      4409--REDEF
CFPT_READUC.V.DVBYTE.REREAD#
      4420**DCL      4420--REDEF
CFPT_READUC.V.INDX#
      4418**DCL      4418--REDEF
CFPT_TRTN.V.IR#
      4644**DCL      4645--REDEF
CFPT_WRITE.STATION_
      4076**DCL      4076--REDEF
CFPT_WRITE.V.DVBYTE.VFC#
      4083**DCL      4083--REDEF
CFPT_WRITEUC.STATION_
      4376**DCL      4376--REDEF
CFPT_WRITEUC.V.DVBYTE.VFC#
      4383**DCL      4383--REDEF
CFPT_XXX.V.STEPCC#
      5356**DCL      5356--REDEF
PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:57   
CGETCMD.OUT$
      5377**DCL      5383--REDEF
CHAR$120
      6945**DCL      7090<<ASSIGN
CPB$BLDIMAGE50
      7093**LABEL    7078--CALLALT
CPE$LISTOUT
      6946**DCL-ENT  7078--CALL
CVLP_TRMCTL.BREAKCOUNT
      4968**DCL      4969--REDEF
CVLP_WINDOW.FWINDOW#
      5064**DCL      5064--REDEF    5065--REDEF
FPT$WRITE.BUF_.BOUND
      7047**DCL      7077<<ASSIGN
FPT$WRITE.BUF_.BUF$
      7049**DCL      7076<<ASSIGN
FPT$WRITE.STATION_
      7049**DCL      7049--REDEF
FPT$WRITE.V.DVBYTE.VFC#
      7056**DCL      7056--REDEF
LEN
      6941**DCL        33--PROC     6944--IMP-SIZ  7070>>ASSIGN   7084>>ASSIGN   7091>>CALLBLT  7091>>CALLBLT
      7091>>CALLBLT
NDEST$
      6939**DCL      7070<<ASSIGN   7071>>ASSIGN   7084<<ASSIGN   7093>>ASSIGN
OFFSET
      6943**DCL      7071<<ASSIGN   7072>>IF       7072>>IF
SEG$2.FPT_WRITE$
      7010**DCL      7076>>ASSIGN   7077>>ASSIGN   7078<>CALL
SEG2$
      6111**DCL      6970--IMP-PTR  7076>>ASSIGN   7077>>ASSIGN   7078>>CALL
STRING$
      6940**DCL        33--PROC     7091>>CALLBLT
TAB1
      6942**DCL        33--PROC     7064--IF       7066>>ASSIGN   7081--IF       7083>>ASSIGN   7087--IF
      7087>>IF
PL6.E3A0      #003=CPB$BLDIMAGE File=CPB$SUBR1.:E05TSI                           TUE 07/29/97 11:22 Page:58   
VARY$STRNG
      6944**DCL      7091<<CALLBLT  7091>>CALLBLT

PL6.E3A0      #004=CPB$CHKFORT File=CPB$SUBR1.:E05TSI                            TUE 07/29/97 11:22 Page:59   
      243        1        /*T***********************************************************/
      244        2        /*T*                                                         */
      245        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      246        4        /*T*                                                         */
      247        5        /*T***********************************************************/
      248        6        /**********************************************************************/
      249        7        /*F*   NAME:   CPB$CHKFORT
      250        8               PURPOSE: Determine if the dcb name is a FORTRAN type and convert
      251        9               DESCRIPTION: If the dcb name consists of all numbers, precede
      252       10                       numbers with a F$.
      253       11        */
      254       12        /*D*   NAME:   CPB$CHKFORT
      255       13               CALL:   CALL CPB$CHKFORT(DCB$)
      256       14               INTERFACE:
      257       15               INPUT:  DCB$ - ptr to dcb name
      258       16               OUTPUT: DCB$ - ptr modified to include preceding F$ if fort. type
      259       17               DESCRIPTION: If the dcb name is all numbers, the dcb name
      260       18                       in the parse control block is preceded with a F$. DCB$ is
      261       19                       decremented by two and the character count incremented by
      262       20                       two. The pointer to the dcb name in the parse control block
      263       21                       is clobbered to make room for increased dcb name size.
      264       22        */
      265       23        /**********************************************************************/
      266       24        CPB$CHKFORT: PROC(DCB$);
      267       25                   %INCLUDE B_MACROS_C;
      268      136    1   DCL DCB$ PTR;                                    /*Ptr to dcb name*/
      269      137    1   DCL  I SBIN;                                     /*Index*/
      270      138    1   DCL J UBIN;                                      /*Temp. Storage*/
      271      139    1   DCL 1 DCBNAME BASED UNAL,
      272      140    1          2 SIZ UBIN(9) UNAL,
      273      141    1          2 TEXT(0:0) CHAR(1);
      274      142        /**/
      275      143        /**/
      276      144        /*
      277      145          ****     Determine if dcb name consists of all numbers
      278      146        */
      279      147    1     I=DCB$->DCBNAME.SIZ-1;
PL6.E3A0      #004=CPB$CHKFORT File=CPB$SUBR1.:E05TSI                            TUE 07/29/97 11:22 Page:60   
      280      148    2     DO WHILE (I >= 0);
      281      149    2        IF (DCB$->DCBNAME.TEXT(I) >= '0' AND
      282      150    2             DCB$->DCBNAME.TEXT(I) <= '9')
      283      151    2           THEN
      284      152    2              I=I-1;
      285      153
      286      154    2           ELSE
      287      155    2              RETURN;
      288      156    2     END;
      289      157        /*
      290      158          ****     Precede with a F$
      291      159        */
      292      160    1     J=DCB$->DCBNAME.SIZ;                  /*Pick up size*/
      293      161    1     DCB$=PINCRC(DCB$,-2);                 /*Make room for F$*/
      294      162    1     DCB$->DCBNAME.SIZ=J+2;
      295      163    1     DCB$->DCBNAME.TEXT(0) = 'F';
      296      164    1     DCB$->DCBNAME.TEXT(1) = '$';
      297      165    1     RETURN;
      298      166    1   END CPB$CHKFORT;
      299      167        %EOD ;

PL6.E3A0      #004=CPB$CHKFORT File=CPB$SUBR1.:E05TSI                            TUE 07/29/97 11:22 Page:61   
--  Include file information  --

   B_MACROS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure CPB$CHKFORT.

   Procedure CPB$CHKFORT requires 50 words for executable code.
   Procedure CPB$CHKFORT requires 8 words of local(AUTO) storage.

PL6.E3A0      #004=CPB$CHKFORT File=CPB$SUBR1.:E05TSI                            TUE 07/29/97 11:22 Page:62   

 Object Unit name= CPB$CHKFORT                                File name= CPB$SUBR1.:E05TOU
 UTS= JUL 29 '97 11:22:53.84 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    50     62  CPB$CHKFORT
    1  RoData even  none     5      5  CPB$CHKFORT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        1  CPB$CHKFORT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET
PL6.E3A0      #004=CPB$CHKFORT File=CPB$SUBR1.:E05TSI                            TUE 07/29/97 11:22 Page:63   


      243        1        /*T***********************************************************/
      244        2        /*T*                                                         */
      245        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      246        4        /*T*                                                         */
      247        5        /*T***********************************************************/
      248        6        /**********************************************************************/
      249        7        /*F*   NAME:   CPB$CHKFORT
      250        8               PURPOSE: Determine if the dcb name is a FORTRAN type and convert
      251        9               DESCRIPTION: If the dcb name consists of all numbers, precede
      252       10                       numbers with a F$.
      253       11        */
      254       12        /*D*   NAME:   CPB$CHKFORT
      255       13               CALL:   CALL CPB$CHKFORT(DCB$)
      256       14               INTERFACE:
      257       15               INPUT:  DCB$ - ptr to dcb name
      258       16               OUTPUT: DCB$ - ptr modified to include preceding F$ if fort. type
      259       17               DESCRIPTION: If the dcb name is all numbers, the dcb name
      260       18                       in the parse control block is preceded with a F$. DCB$ is
      261       19                       decremented by two and the character count incremented by
      262       20                       two. The pointer to the dcb name in the parse control block
      263       21                       is clobbered to make room for increased dcb name size.
      264       22        */
      265       23        /**********************************************************************/
      266       24        CPB$CHKFORT: PROC(DCB$);

     24  0 000000   000000 700200 xent  CPB$CHKFORT  TSX0  ! X66_AUTO_1
         0 000001   000010 000001                    ZERO    8,1

      267       25                   %INCLUDE B_MACROS_C;
      268      136    1   DCL DCB$ PTR;                                    /*Ptr to dcb name*/
      269      137    1   DCL  I SBIN;                                     /*Index*/
      270      138    1   DCL J UBIN;                                      /*Temp. Storage*/
      271      139    1   DCL 1 DCBNAME BASED UNAL,
      272      140    1          2 SIZ UBIN(9) UNAL,
      273      141    1          2 TEXT(0:0) CHAR(1);
      274      142        /**/
PL6.E3A0      #004=CPB$CHKFORT File=CPB$SUBR1.:E05TSI                            TUE 07/29/97 11:22 Page:64   
      275      143        /**/
      276      144        /*
      277      145          ****     Determine if dcb name consists of all numbers
      278      146        */
      279      147    1     I=DCB$->DCBNAME.SIZ-1;

    147  0 000002   200003 470500                    LDP0    @DCB$,,AUTO
         0 000003   000000 471500                    LDP1    0,,PR0
         0 000004   000100 101500                    MRL     fill='000'O
         0 000005   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         0 000006   200006 000004                    ADSC9   J+1,,AUTO                cn=0,n=4
         0 000007   200006 236100                    LDQ     J+1,,AUTO
         0 000010   000001 136007                    SBLQ    1,DL
         0 000011   200004 756100                    STQ     I,,AUTO

      280      148    2     DO WHILE (I >= 0);

    148  0 000012   000033 604000 0                  TMI     s:160

      281      149    2        IF (DCB$->DCBNAME.TEXT(I) >= '0' AND

    149  0 000013   200003 470500                    LDP0    @DCB$,,AUTO
         0 000014   000000 471500                    LDP1    0,,PR0
         0 000015   200004 235100                    LDA     I,,AUTO
         0 000016   040000 106505                    CMPC    fill='040'O
         0 000017   100000 200001                    ADSC9   0,A,PR1                  cn=1,n=1
         0 000020   000000 000001 1                  ADSC9   0                        cn=0,n=1
         0 000021   000031 602000 0                  TNC     s:155
         0 000022   040105 106400                    CMPC    fill='040'O
         0 000023   000001 000001 1                  ADSC9   1                        cn=0,n=1
         0 000024   100000 200001                    ADSC9   0,A,PR1                  cn=1,n=1
         0 000025   000031 602000 0                  TNC     s:155

      282      150    2             DCB$->DCBNAME.TEXT(I) <= '9')
      283      151    2           THEN
      284      152    2              I=I-1;

PL6.E3A0      #004=CPB$CHKFORT File=CPB$SUBR1.:E05TSI                            TUE 07/29/97 11:22 Page:65   
    152  0 000026   000001 336007                    LCQ     1,DL
         0 000027   200004 056100                    ASQ     I,,AUTO
         0 000030   000032 710000 0                  TRA     s:156

      285      153
      286      154    2           ELSE
      287      155    2              RETURN;

    155  0 000031   000000 702200 xent               TSX2  ! X66_ARET

      288      156    2     END;

    156  0 000032   000013 605000 0                  TPL     s:149

      289      157        /*
      290      158          ****     Precede with a F$
      291      159        */
      292      160    1     J=DCB$->DCBNAME.SIZ;                  /*Pick up size*/

    160  0 000033   000000 471500                    LDP1    0,,PR0
         0 000034   000100 101500                    MRL     fill='000'O
         0 000035   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         0 000036   200005 000004                    ADSC9   J,,AUTO                  cn=0,n=4

      293      161    1     DCB$=PINCRC(DCB$,-2);                 /*Make room for F$*/

    161  0 000037   000000 236100                    LDQ     0,,PR0
         0 000040   000002 036000 1                  ADLQ    2
         0 000041   000000 756100                    STQ     0,,PR0

      294      162    1     DCB$->DCBNAME.SIZ=J+2;

    162  0 000042   000000 471500                    LDP1    0,,PR0
         0 000043   200005 236100                    LDQ     J,,AUTO
         0 000044   000002 036007                    ADLQ    2,DL
         0 000045   200006 756100                    STQ     J+1,,AUTO
         0 000046   000100 101500                    MRL     fill='000'O
PL6.E3A0      #004=CPB$CHKFORT File=CPB$SUBR1.:E05TSI                            TUE 07/29/97 11:22 Page:66   
         0 000047   200006 000004                    ADSC9   J+1,,AUTO                cn=0,n=4
         0 000050   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

      295      163    1     DCB$->DCBNAME.TEXT(0) = 'F';

    163  0 000051   000000 471500                    LDP1    0,,PR0
         0 000052   040100 100400                    MLR     fill='040'O
         0 000053   000003 000001 1                  ADSC9   3                        cn=0,n=1
         0 000054   100000 200001                    ADSC9   0,,PR1                   cn=1,n=1

      296      164    1     DCB$->DCBNAME.TEXT(1) = '$';

    164  0 000055   000000 471500                    LDP1    0,,PR0
         0 000056   040100 100400                    MLR     fill='040'O
         0 000057   000004 000001 1                  ADSC9   4                        cn=0,n=1
         0 000060   100000 400001                    ADSC9   0,,PR1                   cn=2,n=1

      297      165    1     RETURN;

    165  0 000061   000000 702200 xent               TSX2  ! X66_ARET
      298      166    1   END CPB$CHKFORT;
      299      167        %EOD ;

PL6.E3A0      #004=CPB$CHKFORT File=CPB$SUBR1.:E05TSI                            TUE 07/29/97 11:22 Page:67   
--  Include file information  --

   B_MACROS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure CPB$CHKFORT.
PL6.E3A0      #004=CPB$CHKFORT File=CPB$SUBR1.:E05TSI                            TUE 07/29/97 11:22 Page:68   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @DCB$                     *0-0-0/w PTR         r     1 DCB$
     4-0-0/w SBIN        r     1 I                          5-0-0/w UBIN        r     1 J

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(18)    r     1 DCBNAME


   Procedure CPB$CHKFORT requires 50 words for executable code.
   Procedure CPB$CHKFORT requires 8 words of local(AUTO) storage.
PL6.E3A0      #004=CPB$CHKFORT File=CPB$SUBR1.:E05TSI                            TUE 07/29/97 11:22 Page:69   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=CPB$CHKFORT File=CPB$SUBR1.:E05TSI                            TUE 07/29/97 11:22 Page:70   
          MINI XREF LISTING

DCB$
       136**DCL        24--PROC      147>>ASSIGN    149>>IF        149>>IF        160>>ASSIGN    161<<ASSIGN
       161>>ASSIGN    162>>ASSIGN    163>>ASSIGN    164>>ASSIGN
DCBNAME.SIZ
       140**DCL       147>>ASSIGN    160>>ASSIGN    162<<ASSIGN
DCBNAME.TEXT
       141**DCL       149>>IF        149>>IF        163<<ASSIGN    164<<ASSIGN
I
       137**DCL       147<<ASSIGN    148>>DOWHILE   149>>IF        149>>IF        152<<ASSIGN    152>>ASSIGN
J
       138**DCL       160<<ASSIGN    162>>ASSIGN

PL6.E3A0      #005=CPB$FIND_UCNN File=CPB$SUBR1.:E05TSI                          TUE 07/29/97 11:22 Page:71   
      300        1        /*M* Locate the UCnn stream for the PLATEN cmd */
      301        2        /*T***********************************************************/
      302        3        /*T*                                                         */
      303        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      304        5        /*T*                                                         */
      305        6        /*T***********************************************************/
      306        7        /*X*  DMC,DFC   */
      307        8        /*P*   NAME:   CPB$FIND_UCNN
      308        9               PURPOSE: To locate a stream that has the RES=UCnn.
      309       10               DESCRIPTION: CPB$FIND_UCNN looks though the table of DCBs
      310       11                      to locate a DCB with RES=UCnn.  CPB$FIND_UCNN will
      311       12                      return the DCB# of the dcb found, otherwise it will
      312       13                      altreturn to the calling routine.
      313       14               REFERENCE: Programmers Reference Manual
      314       15        */
      315       16        /**********************************************************************/
      316       17        CPB$FIND_UCNN:
      317       18          PROC(STRM, DCB#) ALTRET ;
      318       19              %INCLUDE CP_6 ;
      319      100              %INCLUDE B$ROSEG ;
      320      163              %INCLUDE B$JIT ;
      321      453              %INCLUDE CP_PERR_C ;
      322      791              %INCLUDE CP_MACROS_C ;
      323     1543              %INCLUDE XU_MACRO_C ;
      324     4649              %INCLUDE CP_DATA_R ;
      325     7212        /*
      326     7213          *** Parameters
      327     7214        */
      328     7215    1   DCL STRM CHAR(2) ;
      329     7216    1   DCL DCB# UBIN WORD ;
      330     7217        /*
      331     7218          *** Auto
      332     7219        */
      333     7220    1   DCL I UBIN WORD ;
      334     7221    1   DCL RES CHAR(4) ;
      335     7222        /*
      336     7223          *** Symrefs
PL6.E3A0      #005=CPB$FIND_UCNN File=CPB$SUBR1.:E05TSI                          TUE 07/29/97 11:22 Page:72   
      337     7224        */
      338     7225        %F$DCB ;
      339     7282        %SEG$2 (NAME=SEG$2) ;
      340     7342        /*
      341     7343          *** Entries
      342     7344        */
      343     7345    1   DCL CXP$POSTERR ENTRY(5) ;
      344     7346        /*
      345     7347          *** Error codes
      346     7348        */
      347     7349        %VLP_ERRCODE (FPTN=E_NOSUCHSTRM,FCG=CP,MID=B,ERR#=E$NOSUCHSTRM,STCLASS=CONSTANT);
      348     7394        /**/
      349     7395    1         CALL CONCAT(RES, 'UC', STRM) ;
      350     7396    2         DO I=1 TO B$ROS$->B$ROSEG.NUMDCBS ;
      351     7397    2             IF DCBADDR(I)~=ADDR(NIL)
      352     7398    2               THEN
      353     7399    2                 IF DCBADDR(I)->F$DCB.FCD# AND DCBADDR(I)->F$DCB.RES#=RES
      354     7400    2                   THEN
      355     7401    3                     DO ;
      356     7402    3                       DCB# = I ;
      357     7403    3                       RETURN ;
      358     7404    3                     END ; /* Then Do */
      359     7405    2         END ; /* Do I */
      360     7406        /**/
      361     7407    1     CALL CXP$POSTERR(ADDR(SEG$2.ERRBUF),511,E_NOSUCHSTRM) ;
      362     7408    1         ALTRETURN ;
      363     7409
      364     7410        /*E*    ERROR: CPB-E$NOSUCHSTRM-C
      365     7411                MESSAGE: No such stream defined.
      366     7412        */
      367     7413    1   END   CPB$FIND_UCNN ;

PL6.E3A0      #005=CPB$FIND_UCNN File=CPB$SUBR1.:E05TSI                          TUE 07/29/97 11:22 Page:73   
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   CP_PERR_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$ROSEG.:E05TOU  cannot be made into a system file and is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPB$FIND_UCNN.

   Procedure CPB$FIND_UCNN requires 48 words for executable code.
   Procedure CPB$FIND_UCNN requires 12 words of local(AUTO) storage.

    No errors detected in file CPB$SUBR1.:E05TSI    .

PL6.E3A0      #005=CPB$FIND_UCNN File=CPB$SUBR1.:E05TSI                          TUE 07/29/97 11:22 Page:74   

 Object Unit name= CPB$FIND_UCNN                              File name= CPB$SUBR1.:E05TOU
 UTS= JUL 29 '97 11:22:55.92 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS      2      2  CPB$FIND_UCNN
    2   Proc  even  none    48     60  CPB$FIND_UCNN
    3  RoData even  none     4      4  CPB$FIND_UCNN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        2  CPB$FIND_UCNN

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       5 CXP$POSTERR
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #005=CPB$FIND_UCNN File=CPB$SUBR1.:E05TSI                          TUE 07/29/97 11:22 Page:75   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    SEG2$                            r    B$JIT$
r    B$ROS$                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ROSID                                 ISSID
PL6.E3A0      #005=CPB$FIND_UCNN File=CPB$SUBR1.:E05TSI                          TUE 07/29/97 11:22 Page:76   


      300        1        /*M* Locate the UCnn stream for the PLATEN cmd */
      301        2        /*T***********************************************************/
      302        3        /*T*                                                         */
      303        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      304        5        /*T*                                                         */
      305        6        /*T***********************************************************/
      306        7        /*X*  DMC,DFC   */
      307        8        /*P*   NAME:   CPB$FIND_UCNN
      308        9               PURPOSE: To locate a stream that has the RES=UCnn.
      309       10               DESCRIPTION: CPB$FIND_UCNN looks though the table of DCBs
      310       11                      to locate a DCB with RES=UCnn.  CPB$FIND_UCNN will
      311       12                      return the DCB# of the dcb found, otherwise it will
      312       13                      altreturn to the calling routine.
      313       14               REFERENCE: Programmers Reference Manual
      314       15        */
      315       16        /**********************************************************************/
      316       17        CPB$FIND_UCNN:
      317       18          PROC(STRM, DCB#) ALTRET ;

     18  2 000000   000000 700200 xent  CPB$FIND_UC* TSX0  ! X66_AUTO_2
         2 000001   000014 000002                    ZERO    12,2

      318       19              %INCLUDE CP_6 ;
      319      100              %INCLUDE B$ROSEG ;
      320      163              %INCLUDE B$JIT ;
      321      453              %INCLUDE CP_PERR_C ;
      322      791              %INCLUDE CP_MACROS_C ;
      323     1543              %INCLUDE XU_MACRO_C ;
      324     4649              %INCLUDE CP_DATA_R ;
      325     7212        /*
      326     7213          *** Parameters
      327     7214        */
      328     7215    1   DCL STRM CHAR(2) ;
      329     7216    1   DCL DCB# UBIN WORD ;
      330     7217        /*
      331     7218          *** Auto
PL6.E3A0      #005=CPB$FIND_UCNN File=CPB$SUBR1.:E05TSI                          TUE 07/29/97 11:22 Page:77   
      332     7219        */
      333     7220    1   DCL I UBIN WORD ;
      334     7221    1   DCL RES CHAR(4) ;
      335     7222        /*
      336     7223          *** Symrefs
      337     7224        */
      338     7225        %F$DCB ;
      339     7282        %SEG$2 (NAME=SEG$2) ;
      340     7342        /*
      341     7343          *** Entries
      342     7344        */
      343     7345    1   DCL CXP$POSTERR ENTRY(5) ;
      344     7346        /*
      345     7347          *** Error codes
      346     7348        */
      347     7349        %VLP_ERRCODE (FPTN=E_NOSUCHSTRM,FCG=CP,MID=B,ERR#=E$NOSUCHSTRM,STCLASS=CONSTANT);
      348     7394        /**/
      349     7395    1         CALL CONCAT(RES, 'UC', STRM) ;

   7395  2 000002   000001 220000 1                  LDX0    E_NOSUCHSTRM+1
         2 000003   200006 740100                    STX0    RES,,AUTO
         2 000004   200003 470500                    LDP0    @STRM,,AUTO
         2 000005   040100 100500                    MLR     fill='040'O
         2 000006   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         2 000007   200006 400002                    ADSC9   RES,,AUTO                cn=2,n=2

      350     7396    2         DO I=1 TO B$ROS$->B$ROSEG.NUMDCBS ;

   7396  2 000010   000001 235007                    LDA     1,DL
         2 000011   200005 755100                    STA     I,,AUTO
         2 000012   000037 710000 2                  TRA     s:7405+3

      351     7397    2             IF DCBADDR(I)~=ADDR(NIL)

   7397  2 000013   000000 470400 3                  LDP0    0
         2 000014   000000 471500                    LDP1    0,,PR0
         2 000015   200005 720100                    LXL0    I,,AUTO
PL6.E3A0      #005=CPB$FIND_UCNN File=CPB$SUBR1.:E05TSI                          TUE 07/29/97 11:22 Page:78   
         2 000016   100000 236110                    LDQ     0,X0,PR1
         2 000017   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000020   000034 600000 2                  TZE     s:7405

      352     7398    2               THEN
      353     7399    2                 IF DCBADDR(I)->F$DCB.FCD# AND DCBADDR(I)->F$DCB.RES#=RES

   7399  2 000021   100000 473510                    LDP3    0,X0,PR1
         2 000022   300031 236100                    LDQ     25,,PR3
         2 000023   020000 316007                    CANQ    8192,DL
         2 000024   000034 600000 2                  TZE     s:7405
         2 000025   300026 236100                    LDQ     22,,PR3
         2 000026   200006 116100                    CMPQ    RES,,AUTO
         2 000027   000034 601000 2                  TNZ     s:7405

      354     7400    2                   THEN
      355     7401    3                     DO ;

      356     7402    3                       DCB# = I ;

   7402  2 000030   200004 474500                    LDP4    @DCB#,,AUTO
         2 000031   200005 235100                    LDA     I,,AUTO
         2 000032   400000 755100                    STA     0,,PR4

      357     7403    3                       RETURN ;

   7403  2 000033   000000 702200 xent               TSX2  ! X66_ARET

      358     7404    3                     END ; /* Then Do */
      359     7405    2         END ; /* Do I */

   7405  2 000034   200005 235100                    LDA     I,,AUTO
         2 000035   000001 035007                    ADLA    1,DL
         2 000036   200005 755100                    STA     I,,AUTO
         2 000037   000000 470400 xsym               LDP0    B$ROS$
         2 000040   000002 236100                    LDQ     2,,PR0
         2 000041   000022 772000                    QRL     18
PL6.E3A0      #005=CPB$FIND_UCNN File=CPB$SUBR1.:E05TSI                          TUE 07/29/97 11:22 Page:79   
         2 000042   200005 116100                    CMPQ    I,,AUTO
         2 000043   000013 603000 2                  TRC     s:7397

      360     7406        /**/
      361     7407    1     CALL CXP$POSTERR(ADDR(SEG$2.ERRBUF),511,E_NOSUCHSTRM) ;

   7407  2 000044   000000 236000 xsym               LDQ     SEG2$
         2 000045   000003 036003                    ADLQ    3,DU
         2 000046   200010 756100                    STQ     RES+2,,AUTO
         2 000047   000002 237000 3                  LDAQ    2
         2 000050   200012 757100                    STAQ    RES+4,,AUTO
         2 000051   200010 631500                    EPPR1   RES+2,,AUTO
         2 000052   200011 451500                    STP1    RES+3,,AUTO
         2 000053   200011 630500                    EPPR0   RES+3,,AUTO
         2 000054   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000055   000000 701000 xent               TSX1    CXP$POSTERR
         2 000056   000000 011000                    NOP     0

      362     7408    1         ALTRETURN ;

   7408  2 000057   000000 702200 xent               TSX2  ! X66_AALT
      363     7409
      364     7410        /*E*    ERROR: CPB-E$NOSUCHSTRM-C
      365     7411                MESSAGE: No such stream defined.
      366     7412        */
      367     7413    1   END   CPB$FIND_UCNN ;

PL6.E3A0      #005=CPB$FIND_UCNN File=CPB$SUBR1.:E05TSI                          TUE 07/29/97 11:22 Page:80   
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   CP_PERR_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$ROSEG.:E05TOU  cannot be made into a system file and is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPB$FIND_UCNN.
PL6.E3A0      #005=CPB$FIND_UCNN File=CPB$SUBR1.:E05TSI                          TUE 07/29/97 11:22 Page:81   

 **** Variables and constants ****

  ****  Section 001 RoData CPB$FIND_UCNN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 E_NOSUCHSTRM

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @DCB#                      3-0-0/w PTR         r     1 @STRM
    *0-0-0/w UBIN        r     1 DCB#                       5-0-0/w UBIN        r     1 I
     6-0-0/c CHAR(4)     r     1 RES                       *0-0-0/c CHAR(2)     r     1 STRM

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$ROS$
     0-0-0/w PTR         r     1 SEG2$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(3024)  r     1 B$ROSEG                    0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0/w STRC(6264)  r     1 SEG$2


   Procedure CPB$FIND_UCNN requires 48 words for executable code.
PL6.E3A0      #005=CPB$FIND_UCNN File=CPB$SUBR1.:E05TSI                          TUE 07/29/97 11:22 Page:82   
   Procedure CPB$FIND_UCNN requires 12 words of local(AUTO) storage.

    No errors detected in file CPB$SUBR1.:E05TSI    .
PL6.E3A0      #005=CPB$FIND_UCNN File=CPB$SUBR1.:E05TSI                          TUE 07/29/97 11:22 Page:83   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=CPB$FIND_UCNN File=CPB$SUBR1.:E05TSI                          TUE 07/29/97 11:22 Page:84   
          MINI XREF LISTING

B$JIT.CPFLAGS1.SLEAZE
       271**DCL       271--REDEF
B$JIT.ERR.MID
       178**DCL       178--REDEF
B$JIT.JRESPEAK
       339**DCL       340--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
       448**DCL       448--REDEF     449--REDEF
B$JIT.PNR
       352**DCL       352--REDEF
B$JIT.TSLINE
       446**DCL       447--REDEF
B$JIT$
      7145**DCL       172--IMP-PTR
B$ROS$
      7146**DCL      7396>>DOINDEX
B$ROSEG.NUMDCBS
       113**DCL      7396>>DOINDEX
CAMR_REC.ACSVEH_
      6184**DCL      6185--REDEF
CAMR_REC.ALTKEYS_
      6190**DCL      6191--REDEF    6191--REDEF
CAMR_REC.HDR_
      6189**DCL      6190--REDEF
CAMR_REC.TAB_
      6188**DCL      6189--REDEF
CAMR_REC.UHL_
      6182**DCL      6183--REDEF    6183--REDEF
CAMR_REC.V.FSN#
      6222**DCL      6222--REDEF    6222--REDEF
CAMR_REC.WSN_
      6188**DCL      6188--REDEF
PL6.E3A0      #005=CPB$FIND_UCNN File=CPB$SUBR1.:E05TSI                          TUE 07/29/97 11:22 Page:85   
CFPT_CLOSE.SN_
      5026**DCL      5026--REDEF
CFPT_CLOSE.UTL_
      5027**DCL      5027--REDEF
CFPT_CLOSE.V.EXPIRE#
      5041**DCL      5041--REDEF
CFPT_CLOSE.V.TYPE#
      5039**DCL      5039--REDEF
CFPT_CLOSE.V.XTNSIZE#
      5036**DCL      5036--REDEF    5038--REDEF
CFPT_OPEN.ACSVEH_
      4961**DCL      4962--REDEF
CFPT_OPEN.ALTKEYS_
      4967**DCL      4968--REDEF    4968--REDEF
CFPT_OPEN.HDR_
      4966**DCL      4967--REDEF
CFPT_OPEN.TAB_
      4965**DCL      4966--REDEF
CFPT_OPEN.UHL_
      4959**DCL      4960--REDEF    4960--REDEF
CFPT_OPEN.V.FSN#
      4999**DCL      4999--REDEF    4999--REDEF
CFPT_OPEN.WSN_
      4965**DCL      4965--REDEF
CFPT_READ.STATION_
      5065**DCL      5066--REDEF
CFPT_READ.V.DVBYTE.REREAD#
      5077**DCL      5077--REDEF
CFPT_READ.V.INDX#
      5075**DCL      5075--REDEF
CFPT_READUC.STATION_
      5435**DCL      5436--REDEF
CFPT_READUC.V.DVBYTE.REREAD#
      5447**DCL      5447--REDEF
CFPT_READUC.V.INDX#
      5445**DCL      5445--REDEF
PL6.E3A0      #005=CPB$FIND_UCNN File=CPB$SUBR1.:E05TSI                          TUE 07/29/97 11:22 Page:86   
CFPT_TRTN.V.IR#
      5671**DCL      5672--REDEF
CFPT_WRITE.STATION_
      5103**DCL      5103--REDEF
CFPT_WRITE.V.DVBYTE.VFC#
      5110**DCL      5110--REDEF
CFPT_WRITEUC.STATION_
      5403**DCL      5403--REDEF
CFPT_WRITEUC.V.DVBYTE.VFC#
      5410**DCL      5410--REDEF
CFPT_XXX.V.STEPCC#
      6383**DCL      6383--REDEF
CGETCMD.OUT$
      6404**DCL      6410--REDEF
CVLP_TRMCTL.BREAKCOUNT
      5995**DCL      5996--REDEF
CVLP_WINDOW.FWINDOW#
      6091**DCL      6091--REDEF    6092--REDEF
CXP$POSTERR
      7345**DCL-ENT  7407--CALL
DCB#
      7216**DCL        17--PROC     7402<<ASSIGN
E_NOSUCHSTRM
      7361**DCL      7407<>CALL
F$DCB.ACTPOS
      7258**DCL      7258--REDEF
F$DCB.ARS#
      7232**DCL      7232--REDEF
F$DCB.ATTR
      7251**DCL      7252--REDEF
F$DCB.BORROW
      7266**DCL      7266--REDEF    7266--REDEF    7266--REDEF
F$DCB.DCBNAME.L
      7280**DCL      7280--IMP-SIZ
F$DCB.EOMCHAR#
      7236**DCL      7236--REDEF
PL6.E3A0      #005=CPB$FIND_UCNN File=CPB$SUBR1.:E05TSI                          TUE 07/29/97 11:22 Page:87   
F$DCB.FCD#
      7245**DCL      7399>>IF
F$DCB.FLDID
      7261**DCL      7261--REDEF
F$DCB.FORM$
      7255**DCL      7255--REDEF
F$DCB.FSECT
      7271**DCL      7271--REDEF
F$DCB.FSN#
      7248**DCL      7248--REDEF    7248--REDEF    7249--REDEF
F$DCB.HEADER$
      7254**DCL      7254--REDEF
F$DCB.IXTNSIZE#
      7252**DCL      7252--REDEF
F$DCB.LASTSTA$
      7241**DCL      7241--REDEF
F$DCB.LVL
      7267**DCL      7267--REDEF
F$DCB.NAME#.C
      7242**DCL      7242--REDEF
F$DCB.NOEOF
      7264**DCL      7264--REDEF
F$DCB.NRECS#
      7253**DCL      7253--REDEF
F$DCB.NRECX
      7272**DCL      7272--REDEF
F$DCB.OHDR
      7264**DCL      7264--REDEF
F$DCB.ORG#
      7247**DCL      7247--REDEF
F$DCB.PRECNO
      7270**DCL      7270--REDEF
F$DCB.RCSZ
      7276**DCL      7276--REDEF
F$DCB.RES#
      7243**DCL      7243--REDEF    7399>>IF
PL6.E3A0      #005=CPB$FIND_UCNN File=CPB$SUBR1.:E05TSI                          TUE 07/29/97 11:22 Page:88   
F$DCB.SETX
      7255**DCL      7255--REDEF
F$DCB.TAB$
      7255**DCL      7255--REDEF
F$DCB.TDA
      7269**DCL      7270--REDEF
F$DCB.WSN#
      7243**DCL      7243--REDEF
I
      7220**DCL      7396<<DOINDEX  7397--IF       7399--IF       7399--IF       7402>>ASSIGN
RES
      7221**DCL      7395<<CALLBLT  7399>>IF
SEG$2.ERRBUF
      7308**DCL      7407--CALL
SEG2$
      7138**DCL      7283--IMP-PTR  7407>>CALL
STRM
      7215**DCL        17--PROC     7395>>CALLBLT
