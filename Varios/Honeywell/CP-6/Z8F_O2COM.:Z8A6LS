

09:21 AUG 09 '97 Z8F_O2COM.:Z8A6SI                                         1    
    1      /*M* Z8F_O2COM -- Phase 2 Common Variables */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /*B*
    9          NEXT_AVAILABLE$ -- Used as pointer to storage location counter for the
   10                             last data block to be referenced.
   11      */
   12
   13      DCL 1 O2COM      ALIGNED EXT,
   14            2 POPS_SA    SBIN WORD,   /* SA field of "01" or "FD" */
   15            2 PFORM_LIST$  PTR , /* Ptr used for PFORM linked list      */
   16            2 LAST_LBL$   PTR , /* Ptr to ILS for last referenced label */
   17            2 SECTION$    PTR   /* Ptr to ST entry for SECTION name */
   18                          INIT(ADDR(NIL)), /* Not in any section yet */
   19            2 LINE_NO$    PTR , /* Ptr to ILS item above LINOI item for line numbers */
   20            2 SEGMENT_NO     UBIN ,
   21            2 NEXT_AVAILABLE$ PTR INIT(ADDR(NIL)),
   22            2 DO_LEVEL       SBIN WORD INIT(0), /* Running DO level */
   23            2 DO_BEGIN       PTR INIT(ADDR(NIL)), /* Current Mother DO */
   24            2 CALL_ID        BIT (1) ALIGNED INIT ('0'B),
   25            2 WORK_STOR_BLKNUM UBIN INIT (1),
   26            2 LAST       PTR ;
   27
   28      /*V*
   29          NEXT_ILS -- Find the next entry in the ILS chain, in order of
   30                      ILS.NEXT linkages.
   31      */
   32
   33      %MACRO NEXT_ILS (POINTER = ILS$) ;
   34             DO ; /* Next ILS entry in the ILS chain */
   35               POINTER = POINTER->ILS.NEXT ;
   36             END ;
   37      %MEND ;
09:21 AUG 09 '97 Z8F_O2COM.:Z8A6SI                                         2    
   38
   39      /*V*
   40          NEXT_NON_LINOI -- Find the next entry in the ILS chain for which an ILL
   41                            entry exists and for which that entry is not a LINOI.
   42      */
   43
   44      %MACRO NEXT_NON_LINOI (POINTER = ILS$) ;
   45             DO UNTIL (POINTER->ILS.ILL$ ~= ADDR (NIL) AND
   46                       POINTER->ILS.ILL$->ILL.ID ~= %LINOI) ;
   47      %NEXT_ILS (POINTER = POINTER) ;
   48             END ;
   49      %MEND ;
   50
   51      /*V*
   52          NEXT_NON_SUPPORT -- Find the next entry in the ILS chain for which an ILL
   53                              entry exists and for which it is not LINOI, PREOFF,
   54                              PRESET, or PTR_SET.
   55      */
   56
   57      %MACRO NEXT_NON_SUPPORT (POINTER = ILS$) ;
   58             DO UNTIL (POINTER->ILS.ILL$ ~= ADDR (NIL) AND
   59                       POINTER->ILS.ILL$->ILL.ID ~= %PTR_SET AND
   60                       POINTER->ILS.ILL$->ILL.ID ~= %PRESET AND
   61                       POINTER->ILS.ILL$->ILL.ID ~= %P_A_PRESET AND
   62                       POINTER->ILS.ILL$->ILL.ID ~= %P_P_PRESET AND
   63                       POINTER->ILS.ILL$->ILL.ID ~= %PREOFF AND
   64                       POINTER->ILS.ILL$->ILL.ID ~= %LINOI) ;
   65      %NEXT_ILS (POINTER = POINTER) ;
   66             END ;
   67      %MEND ;
   68
   69      /*V*
   70          FIND_LINE_NO - Using the ILS item passed in search the ILS until an
   71                         item is found with a LINOI below it.  This item is then
   72                         used by the procedure to call an error message.
   73      */
   74
09:21 AUG 09 '97 Z8F_O2COM.:Z8A6SI                                         3    
   75      %MACRO FIND_LINE_NO (@START_ITEM$=ILS$) ;
   76             DO ;
   77               O2COM.LINE_NO$ = @START_ITEM$ ;
   78
   79               DO WHILE O2COM.LINE_NO$->ILS.ILL$->ILL.ID ~= %LINOI ;
   80
   81                 DO UNTIL O2COM.LINE_NO$->ILS.ILL$ ~= ADDR(NIL) ;
   82                   %NEXT_ILS (POINTER=O2COM.LINE_NO$) ;
   83                 END ;
   84
   85               END ;
   86
   87               COMCOM.CURRENT.LINE = O2COM.LINE_NO$->ILS.ILL$->LINOI.PREV_LINE ;
   88               COMCOM.CURRENT.COLUMN = O2COM.LINE_NO$->ILS.ILL$->LINOI.PREV_COL ;
   89             END ;
   90      %MEND ;
   91
   92      %MACRO INCREMENT_STORAGE_CNT (@ITEM$=POINTER$) ;
   93             DO ;
   94               @ITEM$->ST.SA = COMCOM.BLOCK$->BLOCK.SIZE ;
   95               COMCOM.BLOCK$->BLOCK.SIZE = COMCOM.BLOCK$->BLOCK.SIZE + 1 ;
   96
   97      /*N*
   98      ESC_CHECK - Need to check ESC to make sure that storage allocation does
   99                  does not cross a ESC triad.
  100      */
  101
  102             END ;
  103      %MEND ;
  104
  105      %IF PHASE = 2;
  106          %EQU BYTES_PER_WORD = 4 ;
  107          %EQU DIGITS_PER_BYTE = 2 ;
  108      %ENDIF;
  109      %EJECT;


