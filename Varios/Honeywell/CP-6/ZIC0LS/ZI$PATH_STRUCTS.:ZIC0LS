FRI. SEP 05 '97 11:18:29.00  FILE=ZI$PATH_STRUCTS

%MACRO PATH_DESC (STRUCT=PATH_LIST,STCLASS=" ",EPTR=EPTR);
DCL 1 STRUCT (0:0) STCLASS ALIGNED,
      2 REC_NO UBIN(18) UNAL,           /* Index of record to be retrieved.   */
      2 SET_NO UBIN(18) UNAL,           /* Index of set to use in the FIND.   */
      2 OWN_NEXT BIT(1) UNAL,           /* 0 - Use FIND NEXT.                 */
                                        /* 1 - Use FIND OWNER.                */
      2 GET_IND BIT(1) UNAL,       /* 0 - Don't get this record occurrence.*/
                                        /* 1 - Get this record occurrence.    */
      2 FIND_ATTEMPTED BIT(1) UNAL, /* This bit tells if a FIND has
                                      been attempted on this record */
                                        /* 0 - No FIND has been made.         */
                                        /* 1 - At least one has been made.    */
      2 REPEAT_IND BIT(1) UNAL, /* Tells Constraint routine to:
                                   0 - OK to use this record.
                                   1 - don't use this record in constraint
                                       checks; it has already appeared
                                       in the Path list.              */
      2 BRANCH_EXHAUSTED BIT(1) UNAL,/* 0 - Not all occurrences of this
                                            branch have been retrieved.
                                        1 - All records have been retrieved
                                            for this branch.          */
      2 DISPLAY_IND BIT(1) UNAL,/* 1 - This record contains a display item,
                                    0 - This record doesn't contain one. */
      2 FIND_FIRST  BIT(1) UNAL,/* If there's a lambda structure due
                                    to multiple members on a set, then
                                    have to know whether to find 1st
                                    or current on member record in
                                    order to keep current of set
                                    positioned where we want it.

                                    1 - Find 1st this iteration
                                    0 - Find current, then next
                                        this iteration             */
      2 INIT_EPTR       EPTR, /* EPTR to routine to initialize field
                                 for absent record in retrieval.      */
      2 CONVERT_EPTR    EPTR, /* EPTR to routine to convert data for
                                 the constraint routine (only called
                                 for present records).                */
      2 CONSTRAINT_EPTR EPTR;  /* EPTR to routine to check constraints
                                  for this record. */
%MEND;

FILE=ZI$PATH_STRUCTS               STRUCT
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I-----------------I-----------------I-----------------I-----------------I
                                 0!REC_NO                             !SET_NO                             !W
                                  I-----------------I-----------------I-----------------I-----------------I
                    OWN_NEXT     1!@!. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .!
                                  I-----------------I-----------------I-----------------I-----------------I
                    GET_IND      1!.!@!. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .!
                                  I-----------------I-----------------I-----------------I-----------------I
                    FIND_ATTEM   1!. .!@!. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .!
                                  I-----------------I-----------------I-----------------I-----------------I
                    REPEAT_IND   1!. . .!@!. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .!
                                  I-----------------I-----------------I-----------------I-----------------I
                    BRANCH_EXH   1!. . . .!@!. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .!
                                  I-----------------I-----------------I-----------------I-----------------I
                    DISPLAY_IN   1!. . . . .!@!. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .!
                                  I-----------------I-----------------I-----------------I-----------------I
                    FIND_FIRST   1!. . . . . .!@!. . . . . . . . . . . . . . . . . . . . . . . . . . . . .!
                                  I-----------------I-----------------I-----------------I-----------------I
                                 2!INIT_EPTR                                                              !
                                  I-----------------I-----------------I-----------------I-----------------I
                                 3!CONVERT_EPTR                                                           !
                                  I-----------------I-----------------I-----------------I-----------------I
                                 4!CONSTRAINT_EPTR                                                        !
                                  I-----------------I-----------------I-----------------I-----------------I

%MACRO DISPLAY_DESC (STRUCT=DISPLAY_LIST,STCLASS=);
DCL 1 STRUCT (0:0) STCLASS ALIGNED,
      2 IND,
/*B* IND This substructure contains record use indicators */
        3 CONSTRAINT UBIN BYTE UNAL,
/*B* CONSTRAINT is 1 if the item is used in a constraint, 0 otherwise */
        3 DISPLAY UBIN BYTE UNAL,
/*B* DISPLAY  is 1 if the item is used in the display list, 0 otherwise */
      2 REC_NO UBIN HALF UNAL;
/*B* REC_NO is the NAM1 index for the records used in the display. REC_NO[0] contains the number of records in the list. */
%MEND;

FILE=ZI$PATH_STRUCTS               STRUCT
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I-----------------I-----------------I-----------------I-----------------I
IND                              0!CONSTRAINT       !DISPLAY          !. . . . . . . . . . . . . . . . . .!B
                                  I-----------------I-----------------I-----------------I-----------------I
                                 0!. . . . . . . . . . . . . . . . . .!REC_NO                             !
                                  I-----------------I-----------------I-----------------I-----------------I

%MACRO CANDIDATE_DESC (STRUCT=CANDIDATE_LIST,STCLASS=);
DCL 1 STRUCT(0:0) STCLASS ALIGNED,
      2 REC_NO UBIN HALF UNAL,
/*B* REC_NO is the NAM1 index to the record that is a candidate for port
optimization using the following key. REC_NO[0] contains the number
of elements in this structure. */
      2 KEY_NO UBIN HALF UNAL;
/*B* KEY_NO is the NAM1 index to keyname that may be used for port
retrieval method optimization. KEY_NO=0 implies CALC access. KEY_NO[0]
contains the index to the candidate selected by Topology for
optimization or equals zero if no such optimization is to take place */
%MEND;

FILE=ZI$PATH_STRUCTS               STRUCT
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I-----------------I-----------------I-----------------I-----------------I
                                 0!REC_NO                             !KEY_NO                             !W
                                  I-----------------I-----------------I-----------------I-----------------I

%MACRO VIA_DESC (STRUCT=VIA_LIST,STCLASS=);
DCL STRUCT(0:0) UBIN STCLASS ALIGNED;
  /*B* NAM1 index to set used in a VIA list.  The first element is a
       count of the number of following elements in the list           */
%MEND;
%EQU SERIAL_ACCESS = 1;
%EQU DIRECT_ACCESS = 2;
%EQU KEYED_ACCESS=3;
%EQU CALC_ACCESS = 4;
%MACRO ACCESS_DESC (STRUCT=ACCESS_LIST,STCLASS=);
DCL 1 STRUCT STCLASS ALIGNED,
      2 PORT UBIN HALF UNAL,
/*B* PORT if non-zero is the NAM1 index to the Port record */
      2 PORT_KEY UBIN HALF UNAL,
/*B* PORT_KEY for keyed retrieval is the NAM1 index of the keyname */
      2 PORT_TYPE UBIN HALF UNAL,
/*B* PORT_TYPE  is the type of port */
      2 PORT_IDX UBIN HALF UNAL,
/*B* PORT_IDX is the current index into the array of port instances */
      2 PORT_NUM UBIN HALF UNAL,
/*B* PORT_NUM is the number of port instances */
      2 *        UBIN HALF UNAL,
      2 DIRECT(0:1) UBIN,
/*B* DIRECT is an array of DB_KEYs to be used for DIRECT port retrieval */
      2 SERIAL(0:0) REDEF DIRECT,
/*B* SERIAL is a 2-tuple array of db_key ranges to be used for SERIAL
port retrieval */
        3 FIRST UBIN,
/*B* SERIAL.FIRST is the lower-bound DB_KEY */
        3 LAST UBIN,
/*B* SERIAL.LAST is the upper-bound DB_KEY */
      2 KEYED(0:0) REDEF DIRECT,
/*B* KEYED is a 2-tuple array of EPTRs to routines used in KEYED and
CALC retrieval */
        3 MOVE EPTR,
/*B* KEYED.MOVE is an EPTR to a routine that moves key information
     into the UWA prior to a FIND. If the routine ALTRETURNs, this
     means that this routine is exhausted and PORT_IDX should be
     incremented. */
        3 CHECK EPTR;
/*B* KEYED.CHECK is an EPTR to a routine that checks whether or not
     a specified key is in the range defined for this port instance.
     KEYED.CHECK = ENTADDR(NIL) means that DB_STATUS must be 0 (i.e. an
     exact match with the key moved in by KEYED.MOVE[]). If KEYED
     .CHECK returns, then the key is in range. If it ALTRETURNs,
     then the key is out of range; this routine is exhausted and
     PORT_IDX should be incremented. */
%MEND;

FILE=ZI$PATH_STRUCTS               STRUCT
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I-----------------I-----------------I-----------------I-----------------I
                                 0!PORT                               !PORT_KEY                           !W
                                  I-----------------I-----------------I-----------------I-----------------I
                                 1!PORT_TYPE                          !PORT_IDX                           !
                                  I-----------------I-----------------I-----------------I-----------------I
                                 2!PORT_NUM                           !*                                  !
                                  I-----------------I-----------------I-----------------I-----------------I
                                 3!DIRECT                                                                 !
                                  I-----------------I-----------------I-----------------I-----------------I
                                 4!DIRECT                                                                 !
                                  I-----------------I-----------------I-----------------I-----------------I
SERIAL                           3!FIRST                                                                  !W
                                  I-----------------I-----------------I-----------------I-----------------I
SERIAL                           4!LAST                                                                   !
                                  I-----------------I-----------------I-----------------I-----------------I
KEYED                            3!MOVE                                                                   !W
                                  I-----------------I-----------------I-----------------I-----------------I
KEYED                            4!CHECK                                                                  !
                                  I-----------------I-----------------I-----------------I-----------------I

%MACRO TOPOLOGY_OPTIONS_DESC (STRUCT=TOPOLOGY_OPTIONS,STCLASS=" ");
DCL 1 STRUCT STCLASS ALIGNED,
      2 WARNING_CODE UBIN(36) UNAL,
      2 PORTFLAG BIT(1) UNAL,
      2 PRINT_IND BIT(1) UNAL;
%MEND;

FILE=ZI$PATH_STRUCTS               STRUCT
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I-----------------I-----------------I-----------------I-----------------I
                                 0!WARNING_CODE                                                           !W
                                  I-----------------I-----------------I-----------------I-----------------I
                    PORTFLAG     1!@!. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .!
                                  I-----------------I-----------------I-----------------I-----------------I
                    PRINT_IND    1!.!@!# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #!
                                  I-----------------I-----------------I-----------------I-----------------I

%MACRO AREA_LIST_DESC (STRUCT=AREA_LIST,STCLASS=);
DCL 1 STRUCT (0:0) STCLASS ALIGNED,
      2 AREA_IDX UBIN WORD UNAL,
/* This is the NAM1 index for each area to be READYed. */
      2 ENCRYPT_SEED UBIN WORD UNAL;
/* ENCRYPT_SEED is the encryption seed for the area. */
%MEND;

FILE=ZI$PATH_STRUCTS               STRUCT
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I-----------------I-----------------I-----------------I-----------------I
                                 0!AREA_IDX                                                               !W
                                  I-----------------I-----------------I-----------------I-----------------I
                                 1!ENCRYPT_SEED                                                           !
                                  I-----------------I-----------------I-----------------I-----------------I


11:18 SEP 05 '97 ZI$PATH_STRUCTS.:ZIC0TOU
     1 - /*M*          PATH_STRUCTS          RETRIEVAL PATH INCLUDE FILE.*/
     2 - /*T***********************************************************/
     3 - /*T*                                                         */
     4 - /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     5 - /*T*                                                         */
     6 - /*T***********************************************************/
     7 - /*P*
     8 -      NAME: PATH_STRUCTS
     9 -      PURPOSE: This include file contains all structures needed by
    10 -       the IDP driver and RETRIEVE routines for parameters.
    11 - */
    12 - /********************************************************************/
    13 - %MACRO PATH_DESC (STRUCT=PATH_LIST,STCLASS=" ",EPTR=EPTR);
    14 - DCL 1 STRUCT (0:0) STCLASS ALIGNED,
    15 -       2 REC_NO UBIN(18) UNAL,           /* Index of record to be retrieved.   */
    16 -       2 SET_NO UBIN(18) UNAL,           /* Index of set to use in the FIND.   */
    17 -       2 OWN_NEXT BIT(1) UNAL,           /* 0 - Use FIND NEXT.                 */
    18 -                                         /* 1 - Use FIND OWNER.                */
    19 -       2 GET_IND BIT(1) UNAL,       /* 0 - Don't get this record occurrence.*/
    20 -                                         /* 1 - Get this record occurrence.    */
    21 -       2 FIND_ATTEMPTED BIT(1) UNAL, /* This bit tells if a FIND has
    22 -                                       been attempted on this record */
    23 -                                         /* 0 - No FIND has been made.         */
    24 -                                         /* 1 - At least one has been made.    */
    25 -       2 REPEAT_IND BIT(1) UNAL, /* Tells Constraint routine to:
    26 -                                    0 - OK to use this record.
    27 -                                    1 - don't use this record in constraint
    28 -                                        checks; it has already appeared
    29 -                                        in the Path list.              */
    30 -       2 BRANCH_EXHAUSTED BIT(1) UNAL,/* 0 - Not all occurrences of this
    31 -                                             branch have been retrieved.
    32 -                                         1 - All records have been retrieved
    33 -                                             for this branch.          */
    34 -       2 DISPLAY_IND BIT(1) UNAL,/* 1 - This record contains a display item,
    35 -                                     0 - This record doesn't contain one. */
    36 -       2 FIND_FIRST  BIT(1) UNAL,/* If there's a lambda structure due
    37 -                                     to multiple members on a set, then
    38 -                                     have to know whether to find 1st
    39 -                                     or current on member record in
    40 -                                     order to keep current of set
    41 -                                     positioned where we want it.
    42 -  
    43 -                                     1 - Find 1st this iteration
    44 -                                     0 - Find current, then next
    45 -                                         this iteration             */
    46 -       2 INIT_EPTR       EPTR, /* EPTR to routine to initialize field
    47 -                                  for absent record in retrieval.      */
    48 -       2 CONVERT_EPTR    EPTR, /* EPTR to routine to convert data for
    49 -                                  the constraint routine (only called
    50 -                                  for present records).                */
    51 -       2 CONSTRAINT_EPTR EPTR;  /* EPTR to routine to check constraints
    52 -                                   for this record. */
    53 - %MEND;
    54 - %MACRO DISPLAY_DESC (STRUCT=DISPLAY_LIST,STCLASS=);
    55 - DCL 1 STRUCT (0:0) STCLASS ALIGNED,
    56 -       2 IND,
    57 - /*B* IND This substructure contains record use indicators */
    58 -         3 CONSTRAINT UBIN BYTE UNAL,
    59 - /*B* CONSTRAINT is 1 if the item is used in a constraint, 0 otherwise */
    60 -         3 DISPLAY UBIN BYTE UNAL,
    61 - /*B* DISPLAY  is 1 if the item is used in the display list, 0 otherwise */
    62 -       2 REC_NO UBIN HALF UNAL;
    63 - /*B* REC_NO is the NAM1 index for the records used in the display. REC_NO[0] contains the number of r
ecords in the list. */
    64 - %MEND;
    65 - %MACRO CANDIDATE_DESC (STRUCT=CANDIDATE_LIST,STCLASS=);
    66 - DCL 1 STRUCT(0:0) STCLASS ALIGNED,
    67 -       2 REC_NO UBIN HALF UNAL,
    68 - /*B* REC_NO is the NAM1 index to the record that is a candidate for port
    69 - optimization using the following key. REC_NO[0] contains the number
    70 - of elements in this structure. */
    71 -       2 KEY_NO UBIN HALF UNAL;
    72 - /*B* KEY_NO is the NAM1 index to keyname that may be used for port
    73 - retrieval method optimization. KEY_NO=0 implies CALC access. KEY_NO[0]
    74 - contains the index to the candidate selected by Topology for
    75 - optimization or equals zero if no such optimization is to take place */
    76 - %MEND;
    77 - %MACRO VIA_DESC (STRUCT=VIA_LIST,STCLASS=);
    78 - DCL STRUCT(0:0) UBIN STCLASS ALIGNED;
    79 -   /*B* NAM1 index to set used in a VIA list.  The first element is a
    80 -        count of the number of following elements in the list           */
    81 - %MEND;
    82 - %EQU SERIAL_ACCESS = 1;
    83 - %EQU DIRECT_ACCESS = 2;
    84 - %EQU KEYED_ACCESS=3;
    85 - %EQU CALC_ACCESS = 4;
    86 - %MACRO ACCESS_DESC (STRUCT=ACCESS_LIST,STCLASS=);
    87 - DCL 1 STRUCT STCLASS ALIGNED,
    88 -       2 PORT UBIN HALF UNAL,
    89 - /*B* PORT if non-zero is the NAM1 index to the Port record */
    90 -       2 PORT_KEY UBIN HALF UNAL,
    91 - /*B* PORT_KEY for keyed retrieval is the NAM1 index of the keyname */
    92 -       2 PORT_TYPE UBIN HALF UNAL,
    93 - /*B* PORT_TYPE  is the type of port */
    94 -       2 PORT_IDX UBIN HALF UNAL,
    95 - /*B* PORT_IDX is the current index into the array of port instances */
    96 -       2 PORT_NUM UBIN HALF UNAL,
    97 - /*B* PORT_NUM is the number of port instances */
    98 -       2 *        UBIN HALF UNAL,
    99 -       2 DIRECT(0:1) UBIN,
   100 - /*B* DIRECT is an array of DB_KEYs to be used for DIRECT port retrieval */
   101 -       2 SERIAL(0:0) REDEF DIRECT,
   102 - /*B* SERIAL is a 2-tuple array of db_key ranges to be used for SERIAL
   103 - port retrieval */
   104 -         3 FIRST UBIN,
   105 - /*B* SERIAL.FIRST is the lower-bound DB_KEY */
   106 -         3 LAST UBIN,
   107 - /*B* SERIAL.LAST is the upper-bound DB_KEY */
   108 -       2 KEYED(0:0) REDEF DIRECT,
   109 - /*B* KEYED is a 2-tuple array of EPTRs to routines used in KEYED and
   110 - CALC retrieval */
   111 -         3 MOVE EPTR,
   112 - /*B* KEYED.MOVE is an EPTR to a routine that moves key information
   113 -      into the UWA prior to a FIND. If the routine ALTRETURNs, this
   114 -      means that this routine is exhausted and PORT_IDX should be
   115 -      incremented. */
   116 -         3 CHECK EPTR;
   117 - /*B* KEYED.CHECK is an EPTR to a routine that checks whether or not
   118 -      a specified key is in the range defined for this port instance.
   119 -      KEYED.CHECK = ENTADDR(NIL) means that DB_STATUS must be 0 (i.e. an
   120 -      exact match with the key moved in by KEYED.MOVE[]). If KEYED
   121 -      .CHECK returns, then the key is in range. If it ALTRETURNs,
   122 -      then the key is out of range; this routine is exhausted and
   123 -      PORT_IDX should be incremented. */
   124 - %MEND;
   125 - %MACRO TOPOLOGY_OPTIONS_DESC (STRUCT=TOPOLOGY_OPTIONS,STCLASS=" ");
   126 - DCL 1 STRUCT STCLASS ALIGNED,
   127 -       2 WARNING_CODE UBIN(36) UNAL,
   128 -       2 PORTFLAG BIT(1) UNAL,
   129 -       2 PRINT_IND BIT(1) UNAL;
   130 - %MEND;
   131 - %MACRO AREA_LIST_DESC (STRUCT=AREA_LIST,STCLASS=);
   132 - DCL 1 STRUCT (0:0) STCLASS ALIGNED,
   133 -       2 AREA_IDX UBIN WORD UNAL,
   134 - /* This is the NAM1 index for each area to be READYed. */
   135 -       2 ENCRYPT_SEED UBIN WORD UNAL;
   136 - /* ENCRYPT_SEED is the encryption seed for the area. */
   137 - %MEND;
