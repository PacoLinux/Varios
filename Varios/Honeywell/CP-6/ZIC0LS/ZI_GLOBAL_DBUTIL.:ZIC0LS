FRI. SEP 05 '97 11:23:12.00  FILE=ZI_GLOBAL_DBUTIL

%MACRO SYS_FUNC (STCLASS=SYMREF);
%LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
%IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
%LSET INIT=CHARTEXT('INIT');
%ELSE;
%LSET INIT=CHARTEXT('/*');
%ENDIF;
DCL BLKLSF SBIN WORD STCLASS;           /* FOR SELECT BLKL SIZE IF TAPE I/O   */
DCL KEYLSF UBIN WORD STCLASS;           /* FOR INDEX AREAS, KEY LENGTH        */
DCL KEYXSF UBIN WORD STCLASS;           /* FOR INDEX AREAS; KEY LOCATION      */
DCL DCBSF UBIN(18) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* DCBSF = DCB NUMBER FOR MONITOR SERVICE CALLS*/
DCL ORGSF UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;  /*D* ORGSF = ORG OF FILE USED FOR MONITOR SERVICE CALLS*/
DCL KEYSF BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED; /*D* KEYSF = BIT TELLING IF A A KEY WAS PASSED FOR READ OR WRITE*/
DCL 1  KEYVSF STCLASS ALIGNED,  /*D* KEYVSF = KEY VALUE PASSED FOR A READ OR WRITE*/
      2 LEN UBIN(9) UNAL,
      2 WD_ONE CHAR(4) %INIT(' ')%CHARTEXT('/**/') UNAL,
      2 IDSKEY REDEF WD_ONE UBIN(36) UNAL,
      2 REST CHAR(250) %INIT(' ')%CHARTEXT('/**/') UNAL;
DCL INDXKEYSF REDEF  KEYVSF CHAR(255) ALIGNED;

FILE=ZI_GLOBAL_DBUTIL              KEYVSF
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I-----------------I-----------------I-----------------I-----------------I
                                 0!LEN              !WD_ONE                                               !W
                                  I-----------------I-----------------I-----------------I-----------------I
                                 1!                 !. . . . . . . . . . . . . . . . . . . . . . . . . . .!
                                  I-----------------I-----------------I-----------------I-----------------I
                                 0!. . . . . . . . .!IDSKEY                                               !
                                  I-----------------I-----------------I-----------------I-----------------I
                                 1!                 !REST                                                 !
                                  I-----------------I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                 2!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                 3!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                 4!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                 5!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                 6!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                 7!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                10!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                11!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                12!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                13!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                14!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                15!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                16!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                17!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I

FILE=ZI_GLOBAL_DBUTIL              KEYVSF
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                20!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                21!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                22!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                23!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                24!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                25!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                26!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                27!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                30!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                31!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                32!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                33!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                34!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                35!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                36!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                37!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                40!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                41!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I

FILE=ZI_GLOBAL_DBUTIL              KEYVSF
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                42!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                43!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                44!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                45!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                46!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                47!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                50!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                51!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                52!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                53!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                54!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                55!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                56!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                57!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                60!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                61!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                62!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                63!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I

FILE=ZI_GLOBAL_DBUTIL              KEYVSF
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                64!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                65!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                66!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                67!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                70!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                71!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                72!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                73!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                74!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                75!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                76!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I-----------------I
                                77!                                                     !# # # # # # # # #!
                                  I-----------------I-----------------I-----------------I-----------------I

DCL INDXKEYSF REDEF  KEYVSF CHAR(255) ALIGNED;
DCL ACSSF UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* ACSSF = TELLS HOW U WILL ACCESS THE DEVICE/FILWE FOR MONITOR SERVICE*/
DCL NOTIMESF BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED; /*D* NOTIMESF = BIT TELLING IF WE WANT TIME STAMP ON THE WRITE*/
DCL FUNSF UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* FUNSF= HOW THE FILE IS OPEN,IE.. IN#,CREATE#,UPDATE */
DCL ASNSF UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* ASNSF = TYPE OF DEVICE WE ARE  READING ,OR WRITING TO*/
DCL TESTSF BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED; /*D* TESTSF = IS  FILE OPEN IN TEST MODE?*/
DCL XTENSIZESF UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* XTENSIZE = INITIAL SIZE THAT FILE WILL BE*/
DCL DISPSF UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D*DISPSF = IS FILE TO BE CATALOGUED  ON THE OPEN?*/
DCL WAITSF BIT(1) STCLASS %INIT('1'B)%CHARTEXT('/**/') ALIGNED; /*D* WAITSF = READ & WRITE WITH WAit I_O*/
DCL VFCSF BIT(1) STCLASS %INIT('1'B)%CHARTEXT('/**/') UNAL; /*D* VFCSF = VERTICAL  FORMAT CONTROL*/
DCL FULLSF BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/') UNAL; /*D* FULLSF = WRITE 1024 WDS OR 1023 WDS*/
DCL BKUPSF BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/') UNAL; /*D* FULLSF = WRITE 1024 WDS OR 1023 WDS*/
DCL BUFLNSF UBIN(36)  STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* BUFLNSF = BUFFER LENGHT TO BE WRITTEN OUT*/
DCL BUFSF BIT(72) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED; /*D* BUFSF = VECTOR TO BUFFER TO BE WRITTEN OTU*/
DCL SOURCESF UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;  /*D* SOURCESF = FOR TIME  WHERE IS SOURCE FROM?*/
DCL DESTSF UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* DESTSF = WHAT TYPE OF FORMAT FOR DESTINATION OF TIME*/
DCL DATESF BIT(72) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED; /*D* DATESF = VECTOR OF WHERE DATE WILL BE RETURNED*/
DCL TIMESF BIT(72) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED; /*D* TIMESF = VECTOR OF WHERE TIME WILL BE RETURN*/
DCL UTSSF BIT(72) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED; /*D* UTSSF = VECTOR OF WHERE UTS STAMP WILL BE RETURNED*/
DCL DAYSF BIT(72) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED; /*D* DAYSF = VECTOR OF WHERE DAY WILL BE RETURNED*/
DCL TSTAMPSF BIT(72) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED;  /*D* TSTAMPSF = VECTOR OF WHERE TSTAMP WILL BE RETURNED*/
DCL ENCRP_SEEDSF BIT(36) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED; /*D* ENCRP_SEEDSF = ENCRTPTION SEED FOR READ OR WRITE OF A FILE*/
DCL ENCRP_SEED_RD REDEF ENCRP_SEEDSF UBIN(36) ;
DCL 1 ERRCODESF STCLASS ALIGNED,  /*D* ERRCODESF = ERROR CODE*/
      2 FN_CODE BIT(18) %INIT('011010001001010101'B)%CHARTEXT('/**/') UNAL,
      2 FLAG BIT(1) %INIT('0'B)%CHARTEXT('/**/') UNAL,
      2 ERR# UBIN(14) %INIT(0)%CHARTEXT('/**/') UNAL,
      2 SEV#  BIT(3) %INIT('0'B)%CHARTEXT('/**/') UNAL;

FILE=ZI_GLOBAL_DBUTIL              ERRCODESF
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I-----------------I-----------------I-----------------I-----------------I
                    FLAG         0!FN_CODE                            !@!ERR#                       !SEV# !W
                                  I-----------------I-----------------I-----------------I-----------------I

DCL 1 ERRCODE_RDEF REDEF ERRCODESF UBIN(36);
DCL 1 MSGCODE UBIN(36) STCLASS;
DCL 1 MONITOR_ERR REDEF MSGCODE,
      2 FN_CODE UBIN(18) UNAL,
      2 * BIT(1) UNAL,
      2 ERR# UBIN(14) UNAL,
      2 * BIT(3) UNAL;

FILE=ZI_GLOBAL_DBUTIL              MONITOR_ERR
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I-----------------I-----------------I-----------------I-----------------I
                                 0!FN_CODE                            !*!ERR#                       !*    !B
                                  I-----------------I-----------------I-----------------I-----------------I

DCL INCL_ERR BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/');
DCL 1 ERR_INSERT (0:2) STCLASS ALIGNED, /*D* ERR_INSERT = USED WITH M$ERRMSG*/
      2 CNT UBIN(9) %INIT(0*0)%CHARTEXT('/**/') UNAL,
      2 TEXT CHAR(30) %INIT(' '*0)%CHARTEXT('/**/') UNAL;

FILE=ZI_GLOBAL_DBUTIL              ERR_INSERT
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I-----------------I-----------------I-----------------I-----------------I
                                 0!CNT              !TEXT                                                 !W
                                  I-----------------I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                 1!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                 2!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                 3!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                 4!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                 5!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
                                 6!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I-----------------I
                                 7!                                                     !# # # # # # # # #!
                                  I-----------------I-----------------I-----------------I-----------------I
                                   ARRAY:   '3'O ENTRIES TOTAL.
                                  I-----------------I-----------------I-----------------I-----------------I

DCL 1 FIDSF_RD (0:29) CHAR(1) STCLASS %INIT(' '*30)%CHARTEXT('/**/')  UNAL;
DCL 1 FIDSF REDEF FIDSF_RD CHAR(30) UNAL;
DCL ACNT (0:9) CHAR(8) STCLASS %INIT(' '*0)%CHARTEXT('/**/') ALIGNED;
DCL EXISTSF UBIN(2) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
DCL SHARESF UBIN(2) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
DCL DCBNMSF BIT(72) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED;
DCL KEYRSF     BIT(1)  STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED;
DCL NO_KEYSF BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/') UNAL;
DCL REASGNSF BIT(1) STCLASS %INIT('1'B)%CHARTEXT('/**/') UNAL;
DCL CARRY_ATTRIBUTESF BIT(1) STCLASS %INIT('1'B)%CHARTEXT('/**/') UNAL;
DCL SUBMESSF BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/') UNAL;
DCL SPKY_OPNSF BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/') UNAL;
DCL POSSF  UBIN(9) STCLASS %INIT(0)%CHARTEXT('/**/') UNAL;
DCL ERRFLGSF UBIN(9) STCLASS %INIT(3)%CHARTEXT('/**/') UNAL;
DCL MERGESF BIT(1)  STCLASS %INIT('0'B)%CHARTEXT('/**/') UNAL;
DCL FSA_FLAG BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/') UNAL;
DCL RELGSF BIT(1)  STCLASS %INIT('0'B)%CHARTEXT('/**/') UNAL;
DCL UNUSED   BIT(9) STCLASS %INIT('0'B)%CHARTEXT('/**/') UNAL;
DCL 1 HELPCODE STCLASS ALIGNED,  /*D* ERRCODESF = ERROR CODE*/
      2 FN_CODE BIT(18) %INIT('011010001001001000'B)%CHARTEXT('/**/') UNAL,
      2 FLAG BIT(1) %INIT('0'B)%CHARTEXT('/**/') UNAL,
      2 ERR# UBIN(14) %INIT(0)%CHARTEXT('/**/') UNAL,
      2 SEV#  BIT(3) %INIT('0'B)%CHARTEXT('/**/') UNAL;

FILE=ZI_GLOBAL_DBUTIL              HELPCODE
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I-----------------I-----------------I-----------------I-----------------I
                    FLAG         0!FN_CODE                            !@!ERR#                       !SEV# !W
                                  I-----------------I-----------------I-----------------I-----------------I

DCL 1 HELPCODE_RDEF REDEF HELPCODE UBIN(36);
DCL COUNTSF SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D*NUMBER OF RECS TO SKIP IN PRECORD*/
DCL EVENTSF REDEF COUNTSF SBIN WORD;    /* No wait I/O event number           */
DCL INDEXSF    UBIN WORD STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
DCL GAP     BIT(36) STCLASS %INIT('0'B*0)%CHARTEXT('/**/') ALIGNED;
DCL 1   PSNSF      STCLASS  ALIGNED,
      2 VOL#     UBIN BYTE   UNAL %INIT(0)%CHARTEXT('/**/') ,
      2 NUM#     UBIN BYTE   UNAL,
      2 SN#      CHAR(6)     UNAL;

FILE=ZI_GLOBAL_DBUTIL              PSNSF
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I-----------------I-----------------I-----------------I-----------------I
                                 0!VOL#             !NUM#             !SN#                                !W
                                  I-----------------I-----------------I - - - - - - - - I - - - - - - - - I
                                 1!                                                                       !
                                  I-----------------I-----------------I-----------------I-----------------I

DCL ACNTSF CHAR(8) STCLASS %INIT(' ')%CHARTEXT('/**/') ALIGNED;
DCL KEY_SHADWSF UBIN WORD STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
%MEND;
%MACRO MISC_DCLS (STCLASS=SYMREF);
%LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
%IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
%LSET INIT=CHARTEXT('INIT');
%ELSE;
%LSET INIT=CHARTEXT('/*');
%ENDIF;
DCL REC$ PTR STCLASS; /*D* REC$ = PTR TO A DATA RECORD IN A DATA PAGE*/
DCL RB UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/')  ALIGNED; /*D*RB  = BEGINNING RANGE  ON DIRECTIVE*/
DCL RE UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D*RE = ENDING RANGE ON DIRECTIVE*/
DCL IE UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D*IE = ENDING RANGE FOR INVENTROY MANIPULATION*/
DCL IB UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D*IB = BEGINNING RANGE FOR INVENTORY MAIPULATION*/
DCL CNT SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D*  CNT = COUNTER*/
DCL ICNT SBIN(36)  STCLASS %INIT(-1)%CHARTEXT('/**/') ALIGNED; /*D* ICNT = INDEX TO INIT_RG*/
DCL RCNT SBIN(36) STCLASS %INIT(-1)%CHARTEXT('/**/') ALIGNED; /*D* RCNT = INDEX TO RECORD RANGE ON THE PRINT DIRECTIVE*/
DCL SCNT SBIN(36) STCLASS %INIT(-1)%CHARTEXT('/**/') ALIGNED;
DCL FIRST_SET SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
DCL RETCNT SBIN(36) STCLASS %INIT(-1)%CHARTEXT('/**/') ALIGNED;
DCL DMPCNT SBIN(36) STCLASS %INIT(-1)%CHARTEXT('/**/') ALIGNED;
DCL KCNT SBIN(36) STCLASS %INIT(-1)%CHARTEXT('/**/') ALIGNED;  /*D* KCNT = INDEX TO KEY RANGE FOR PRINT DIRECTIVE*/
DCL ACNT_IDX SBIN(36) STCLASS %INIT(-1)%CHARTEXT('/**/') ALIGNED; /*D* ACNT_IDX =INDEX FOR AN ACCOUNT LIST  ON THE DIRECTIVES*/
DCL I SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* I = DO VARIBLE*/
DCL J SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* J = DO VARIBLE*/
DCL K SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* K = DO VARIBLE*/
DCL X SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D*  X = DO VARIBLE*/
DCL STEPCC SBIN STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
DCL I_O_BUF$ PTR STCLASS;     /* I_O_BUF$ points to i/o buffs (ZIU$GETDYN)    */
DCL I_O_BUF (0:0) BASED(I_O_BUF$) CHAR(4096) ALIGNED; /*D* I_O_BUF = BUFFER USED FOR SETTING UP DATA PAGES*/
DCL OUT_INDX SBIN(36) STCLASS ALIGNED; /*D* OUT_INDX = INDEX FOR I_O_BUF*/
DCL I_O_SIZE SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*I_O_SIZE = size to be written out*/
DCL 1 REC_FRMT BASED(REC$),  /*D* REC_FRMT= LAYOUT FORMAT OF A DATA RECORD*/
      2 STAT UBIN(6) UNAL,
      2 TYPE UBIN(12) UNAL,
      2 LNGHT UBIN(18) UNAL,
      2 DATA CHAR(REC_DATA_LN) UNAL;
DCL REC_DATA_LN UBIN(36) STCLASS ALIGNED;

FILE=ZI_GLOBAL_DBUTIL              REC_FRMT
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I-----------------I-----------------I-----------------I-----------------I
                                 0!STAT       !TYPE                   !LNGHT                              !C
                                  I-----------------I-----------------I-----------------I-----------------I
                                 1!DATA             !. . . . . . . . . . . . . . . . . . . . . . . . . . .!
                                  I-----------------I-----------------I-----------------I-----------------I

DCL REC_DATA_LN UBIN(36) STCLASS ALIGNED;
DCL M$LO DCB;  /*D* M$LO = IS THE DCB WRITTEN THROUGH TO USER*/
DCL B$TCB$ PTR SYMREF;  /*D* B$TCB$ = PTR USED TO GET TO THER TCB STACK FRAME*/
DCL B$ROS$ PTR SYMREF; /*D* B$ROS$ = PTR USED TO GET TO THE READ ONLY SEGMENT*/
DCL B$JIT$ PTR SYMREF;
DCL 1 KEYFID STCLASS ALIGNED,
      2 NM,
        3 CNT UBIN(9) UNAL,
        3 TEXT CHAR(30) UNAL,
      2 DCB# UBIN(18) ALIGNED;

FILE=ZI_GLOBAL_DBUTIL              KEYFID
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I-----------------I-----------------I-----------------I-----------------I
NM                               0!CNT              !TEXT                                                 !C
                                  I-----------------I - - - - - - - - I - - - - - - - - I - - - - - - - - I
NM                               1!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
NM                               2!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
NM                               3!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
NM                               4!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
NM                               5!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I
NM                               6!                                                                       !
                                  I - - - - - - - - I - - - - - - - - I - - - - - - - - I-----------------I
NM                               7!                                                     !. . . . . . . . .!
                                  I-----------------I-----------------I-----------------I-----------------I
                                10!DCB#                               !# # # # # # # # # # # # # # # # # #!
                                  I-----------------I-----------------I-----------------I-----------------I

DCL I_O_KEY UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
DCL RESTART  BIT(72)    STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED;
DCL BREAK_FLAG SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
DCL ICHKSUM    UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
DCL ICHKSUM_BIT REDEF ICHKSUM BIT(36) ALIGNED;
DCL ITMCNT     SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
DCL GAP1 (0:4) UBIN(36) STCLASS %INIT(0*0)%CHARTEXT('/**/') ALIGNED;
%MEND;
%MACRO PAREC(STCLASS=SYMREF);
DCL 1  PA_REC  BASED(REC$)  CALIGNED,
      2 *  UBIN(6)  UNAL,
      2 TYPE  UBIN(12)  UNAL,
      2 SIZE  UBIN(18)  UNAL,
      2 NOT_LOWEST_LEVEL BIT(1) UNAL,
      2 HIGHEST_KEY BIT(1) UNAL,
      2 FIRST_IN_LEVEL BIT(1) UNAL,
      2 LAST_IN_LEVEL BIT(1) UNAL,
      2 LOWEST_KEY BIT(1) UNAL,
      2 *  BIT(1) UNAL,                 /* UNUSED FLAG                        */
      2 ENTRIES  UBIN(12)  UNAL,
      2 AVAIL  UBIN(18)  UNAL;
DCL 1  PA_ENTRY  BASED(ENTRY$)  UNAL,

FILE=ZI_GLOBAL_DBUTIL              PA_REC
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I-----------------I-----------------I-----------------I-----------------I
                                 0!*          !TYPE                   !SIZE                               !C
                                  I-----------------I-----------------I-----------------I-----------------I
                    NOT_LOWEST   1!@!. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .!
                                  I-----------------I-----------------I-----------------I-----------------I
                    HIGHEST_KE   1!.!@!. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .!
                                  I-----------------I-----------------I-----------------I-----------------I
                    FIRST_IN_L   1!. .!@!. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .!
                                  I-----------------I-----------------I-----------------I-----------------I
                    LAST_IN_LE   1!. . .!@!. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .!
                                  I-----------------I-----------------I-----------------I-----------------I
                    LOWEST_KEY   1!. . . .!@!*!ENTRIES                !AVAIL                              !
                                  I-----------------I-----------------I-----------------I-----------------I

DCL 1  PA_ENTRY  BASED(ENTRY$)  UNAL,
      2 C  UBIN(1)  UNAL,
      2 *  UBIN(5)  UNAL,
      2 TYPE  UBIN(12)  UNAL,
      2 PTRS  CHAR(PTR_LEN)  UNAL;

FILE=ZI_GLOBAL_DBUTIL              PA_ENTRY
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I-----------------I-----------------I-----------------I-----------------I
                                 0!C!*        !TYPE                   !PTRS             !. . . . . . . . .!C
                                  I-----------------I-----------------I-----------------I-----------------I

DCL 1  PA_GROUP  BASED(GROUP$)  UNAL,
      2 NO_GROUPS  UBIN  HALF  UNAL,
      2 TYPE  UBIN(18)  UNAL,
      2 PTRS  CHAR(PTR_LEN)  UNAL;

FILE=ZI_GLOBAL_DBUTIL              PA_GROUP
LEVEL 2   LEVEL 3   LEVEL 4        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
                                  I-----------------I-----------------I-----------------I-----------------I
                                 0!NO_GROUPS                          !TYPE                               !C
                                  I-----------------I-----------------I-----------------I-----------------I
                                 1!PTRS             !. . . . . . . . . . . . . . . . . . . . . . . . . . .!
                                  I-----------------I-----------------I-----------------I-----------------I

DCL  ENTRY$  PTR  STCLASS;
DCL  GROUP$  PTR  STCLASS;
DCL  PTR_LEN  SBIN  STCLASS ALIGNED;
DCL  KEY_LEN  SBIN  STCLASS ALIGNED;
%MEND;

11:23 SEP 05 '97 ZI_GLOBAL_DBUTIL.:ZIC0TOU
     1 - /*T***********************************************************/
     2 - /*T*                                                         */
     3 - /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     4 - /*T*                                                         */
     5 - /*T***********************************************************/
     6 - %MACRO SYS_FUNC (STCLASS=SYMREF);
     7 - %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
     8 - %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
     9 - %LSET INIT=CHARTEXT('INIT');
    10 - %ELSE;
    11 - %LSET INIT=CHARTEXT('/*');
    12 - %ENDIF;
    13 - DCL BLKLSF SBIN WORD STCLASS;           /* FOR SELECT BLKL SIZE IF TAPE I/O   */
    14 - DCL KEYLSF UBIN WORD STCLASS;           /* FOR INDEX AREAS, KEY LENGTH        */
    15 - DCL KEYXSF UBIN WORD STCLASS;           /* FOR INDEX AREAS; KEY LOCATION      */
    16 - DCL DCBSF UBIN(18) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* DCBSF = DCB NUMBER FOR MONITOR SER
VICE CALLS*/
    17 - DCL ORGSF UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;  /*D* ORGSF = ORG OF FILE USED FOR MONI
TOR SERVICE CALLS*/
    18 - DCL KEYSF BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED; /*D* KEYSF = BIT TELLING IF A A KEY WA
S PASSED FOR READ OR WRITE*/
    19 - DCL 1  KEYVSF STCLASS ALIGNED,  /*D* KEYVSF = KEY VALUE PASSED FOR A READ OR WRITE*/
    20 -       2 LEN UBIN(9) UNAL,
    21 -       2 WD_ONE CHAR(4) %INIT(' ')%CHARTEXT('/**/') UNAL,
    22 -       2 IDSKEY REDEF WD_ONE UBIN(36) UNAL,
    23 -       2 REST CHAR(250) %INIT(' ')%CHARTEXT('/**/') UNAL;
    24 - DCL INDXKEYSF REDEF  KEYVSF CHAR(255) ALIGNED;
    25 - DCL ACSSF UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* ACSSF = TELLS HOW U WILL ACCESS TH
E DEVICE/FILWE FOR MONITOR SERVICE*/
    26 - DCL NOTIMESF BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED; /*D* NOTIMESF = BIT TELLING IF WE W
ANT TIME STAMP ON THE WRITE*/
    27 - DCL FUNSF UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* FUNSF= HOW THE FILE IS OPEN,IE.. I
N#,CREATE#,UPDATE */
    28 - DCL ASNSF UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* ASNSF = TYPE OF DEVICE WE ARE  REA
DING ,OR WRITING TO*/
    29 - DCL TESTSF BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED; /*D* TESTSF = IS  FILE OPEN IN TEST M
ODE?*/
    30 - DCL XTENSIZESF UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* XTENSIZE = INITIAL SIZE THAT 
FILE WILL BE*/
    31 - DCL DISPSF UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D*DISPSF = IS FILE TO BE CATALOGUED 
 ON THE OPEN?*/
    32 - DCL WAITSF BIT(1) STCLASS %INIT('1'B)%CHARTEXT('/**/') ALIGNED; /*D* WAITSF = READ & WRITE WITH WAit 
I_O*/
    33 - DCL VFCSF BIT(1) STCLASS %INIT('1'B)%CHARTEXT('/**/') UNAL; /*D* VFCSF = VERTICAL  FORMAT CONTROL*/
    34 - DCL FULLSF BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/') UNAL; /*D* FULLSF = WRITE 1024 WDS OR 1023 WDS
*/
    35 - DCL BKUPSF BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/') UNAL; /*D* FULLSF = WRITE 1024 WDS OR 1023 WDS
*/
    36 - DCL BUFLNSF UBIN(36)  STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* BUFLNSF = BUFFER LENGHT TO BE W
RITTEN OUT*/
    37 - DCL BUFSF BIT(72) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED; /*D* BUFSF = VECTOR TO BUFFER TO BE W
RITTEN OTU*/
    38 - DCL SOURCESF UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;  /*D* SOURCESF = FOR TIME  WHERE IS 
SOURCE FROM?*/
    39 - DCL DESTSF UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* DESTSF = WHAT TYPE OF FORMAT FOR 
DESTINATION OF TIME*/
    40 - DCL DATESF BIT(72) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED; /*D* DATESF = VECTOR OF WHERE DATE W
ILL BE RETURNED*/
    41 - DCL TIMESF BIT(72) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED; /*D* TIMESF = VECTOR OF WHERE TIME W
ILL BE RETURN*/
    42 - DCL UTSSF BIT(72) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED; /*D* UTSSF = VECTOR OF WHERE UTS STAM
P WILL BE RETURNED*/
    43 - DCL DAYSF BIT(72) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED; /*D* DAYSF = VECTOR OF WHERE DAY WILL
 BE RETURNED*/
    44 - DCL TSTAMPSF BIT(72) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED;  /*D* TSTAMPSF = VECTOR OF WHERE T
STAMP WILL BE RETURNED*/
    45 - DCL ENCRP_SEEDSF BIT(36) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED; /*D* ENCRP_SEEDSF = ENCRTPTION
 SEED FOR READ OR WRITE OF A FILE*/
    46 - DCL ENCRP_SEED_RD REDEF ENCRP_SEEDSF UBIN(36) ;
    47 - DCL 1 ERRCODESF STCLASS ALIGNED,  /*D* ERRCODESF = ERROR CODE*/
    48 -       2 FN_CODE BIT(18) %INIT('011010001001010101'B)%CHARTEXT('/**/') UNAL,
    49 -       2 FLAG BIT(1) %INIT('0'B)%CHARTEXT('/**/') UNAL,
    50 -       2 ERR# UBIN(14) %INIT(0)%CHARTEXT('/**/') UNAL,
    51 -       2 SEV#  BIT(3) %INIT('0'B)%CHARTEXT('/**/') UNAL;
    52 - DCL 1 ERRCODE_RDEF REDEF ERRCODESF UBIN(36);
    53 - DCL 1 MSGCODE UBIN(36) STCLASS;
    54 - DCL 1 MONITOR_ERR REDEF MSGCODE,
    55 -       2 FN_CODE UBIN(18) UNAL,
    56 -       2 * BIT(1) UNAL,
    57 -       2 ERR# UBIN(14) UNAL,
    58 -       2 * BIT(3) UNAL;
    59 - DCL INCL_ERR BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/');
    60 - DCL 1 ERR_INSERT (0:2) STCLASS ALIGNED, /*D* ERR_INSERT = USED WITH M$ERRMSG*/
    61 -       2 CNT UBIN(9) %INIT(0*0)%CHARTEXT('/**/') UNAL,
    62 -       2 TEXT CHAR(30) %INIT(' '*0)%CHARTEXT('/**/') UNAL;
    63 - DCL 1 FIDSF_RD (0:29) CHAR(1) STCLASS %INIT(' '*30)%CHARTEXT('/**/')  UNAL;
    64 - DCL 1 FIDSF REDEF FIDSF_RD CHAR(30) UNAL;
    65 - DCL ACNT (0:9) CHAR(8) STCLASS %INIT(' '*0)%CHARTEXT('/**/') ALIGNED;
    66 - DCL EXISTSF UBIN(2) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
    67 - DCL SHARESF UBIN(2) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
    68 - DCL DCBNMSF BIT(72) STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED;
    69 - DCL KEYRSF     BIT(1)  STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED;
    70 - DCL NO_KEYSF BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/') UNAL;
    71 - DCL REASGNSF BIT(1) STCLASS %INIT('1'B)%CHARTEXT('/**/') UNAL;
    72 - DCL CARRY_ATTRIBUTESF BIT(1) STCLASS %INIT('1'B)%CHARTEXT('/**/') UNAL;
    73 - DCL SUBMESSF BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/') UNAL;
    74 - DCL SPKY_OPNSF BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/') UNAL;
    75 - DCL POSSF  UBIN(9) STCLASS %INIT(0)%CHARTEXT('/**/') UNAL;
    76 - DCL ERRFLGSF UBIN(9) STCLASS %INIT(3)%CHARTEXT('/**/') UNAL;
    77 - DCL MERGESF BIT(1)  STCLASS %INIT('0'B)%CHARTEXT('/**/') UNAL;
    78 - DCL FSA_FLAG BIT(1) STCLASS %INIT('0'B)%CHARTEXT('/**/') UNAL;
    79 - DCL RELGSF BIT(1)  STCLASS %INIT('0'B)%CHARTEXT('/**/') UNAL;
    80 - DCL UNUSED   BIT(9) STCLASS %INIT('0'B)%CHARTEXT('/**/') UNAL;
    81 - DCL 1 HELPCODE STCLASS ALIGNED,  /*D* ERRCODESF = ERROR CODE*/
    82 -       2 FN_CODE BIT(18) %INIT('011010001001001000'B)%CHARTEXT('/**/') UNAL,
    83 -       2 FLAG BIT(1) %INIT('0'B)%CHARTEXT('/**/') UNAL,
    84 -       2 ERR# UBIN(14) %INIT(0)%CHARTEXT('/**/') UNAL,
    85 -       2 SEV#  BIT(3) %INIT('0'B)%CHARTEXT('/**/') UNAL;
    86 - DCL 1 HELPCODE_RDEF REDEF HELPCODE UBIN(36);
    87 - DCL COUNTSF SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D*NUMBER OF RECS TO SKIP IN PRECORD
*/
    88 - DCL EVENTSF REDEF COUNTSF SBIN WORD;    /* No wait I/O event number           */
    89 - DCL INDEXSF    UBIN WORD STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
    90 - DCL GAP     BIT(36) STCLASS %INIT('0'B*0)%CHARTEXT('/**/') ALIGNED;
    91 - DCL 1   PSNSF      STCLASS  ALIGNED,
    92 -       2 VOL#     UBIN BYTE   UNAL %INIT(0)%CHARTEXT('/**/') ,
    93 -       2 NUM#     UBIN BYTE   UNAL,
    94 -       2 SN#      CHAR(6)     UNAL;
    95 - DCL ACNTSF CHAR(8) STCLASS %INIT(' ')%CHARTEXT('/**/') ALIGNED;
    96 - DCL KEY_SHADWSF UBIN WORD STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
    97 - %MEND;
    98 - %MACRO MISC_DCLS (STCLASS=SYMREF);
    99 - %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   100 - %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
   101 - %LSET INIT=CHARTEXT('INIT');
   102 - %ELSE;
   103 - %LSET INIT=CHARTEXT('/*');
   104 - %ENDIF;
   105 - DCL REC$ PTR STCLASS; /*D* REC$ = PTR TO A DATA RECORD IN A DATA PAGE*/
   106 - DCL RB UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/')  ALIGNED; /*D*RB  = BEGINNING RANGE  ON DIRECTIVE*/
   107 - DCL RE UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D*RE = ENDING RANGE ON DIRECTIVE*/
   108 - DCL IE UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D*IE = ENDING RANGE FOR INVENTROY MANIPU
LATION*/
   109 - DCL IB UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D*IB = BEGINNING RANGE FOR INVENTORY MAI
PULATION*/
   110 - DCL CNT SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D*  CNT = COUNTER*/
   111 - DCL ICNT SBIN(36)  STCLASS %INIT(-1)%CHARTEXT('/**/') ALIGNED; /*D* ICNT = INDEX TO INIT_RG*/
   112 - DCL RCNT SBIN(36) STCLASS %INIT(-1)%CHARTEXT('/**/') ALIGNED; /*D* RCNT = INDEX TO RECORD RANGE ON TH
E PRINT DIRECTIVE*/
   113 - DCL SCNT SBIN(36) STCLASS %INIT(-1)%CHARTEXT('/**/') ALIGNED;
   114 - DCL FIRST_SET SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
   115 - DCL RETCNT SBIN(36) STCLASS %INIT(-1)%CHARTEXT('/**/') ALIGNED;
   116 - DCL DMPCNT SBIN(36) STCLASS %INIT(-1)%CHARTEXT('/**/') ALIGNED;
   117 - DCL KCNT SBIN(36) STCLASS %INIT(-1)%CHARTEXT('/**/') ALIGNED;  /*D* KCNT = INDEX TO KEY RANGE FOR PRI
NT DIRECTIVE*/
   118 - DCL ACNT_IDX SBIN(36) STCLASS %INIT(-1)%CHARTEXT('/**/') ALIGNED; /*D* ACNT_IDX =INDEX FOR AN ACCOUNT
 LIST  ON THE DIRECTIVES*/
   119 - DCL I SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* I = DO VARIBLE*/
   120 - DCL J SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* J = DO VARIBLE*/
   121 - DCL K SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D* K = DO VARIBLE*/
   122 - DCL X SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*D*  X = DO VARIBLE*/
   123 - DCL STEPCC SBIN STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
   124 - DCL I_O_BUF$ PTR STCLASS;     /* I_O_BUF$ points to i/o buffs (ZIU$GETDYN)    */
   125 - DCL I_O_BUF (0:0) BASED(I_O_BUF$) CHAR(4096) ALIGNED; /*D* I_O_BUF = BUFFER USED FOR SETTING UP DATA 
PAGES*/
   126 - DCL OUT_INDX SBIN(36) STCLASS ALIGNED; /*D* OUT_INDX = INDEX FOR I_O_BUF*/
   127 - DCL I_O_SIZE SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED; /*I_O_SIZE = size to be written out*
/
   128 - DCL 1 REC_FRMT BASED(REC$),  /*D* REC_FRMT= LAYOUT FORMAT OF A DATA RECORD*/
   129 -       2 STAT UBIN(6) UNAL,
   130 -       2 TYPE UBIN(12) UNAL,
   131 -       2 LNGHT UBIN(18) UNAL,
   132 -       2 DATA CHAR(REC_DATA_LN) UNAL;
   133 - DCL REC_DATA_LN UBIN(36) STCLASS ALIGNED;
   134 - DCL M$LO DCB;  /*D* M$LO = IS THE DCB WRITTEN THROUGH TO USER*/
   135 - DCL B$TCB$ PTR SYMREF;  /*D* B$TCB$ = PTR USED TO GET TO THER TCB STACK FRAME*/
   136 - DCL B$ROS$ PTR SYMREF; /*D* B$ROS$ = PTR USED TO GET TO THE READ ONLY SEGMENT*/
   137 - DCL B$JIT$ PTR SYMREF;
   138 - DCL 1 KEYFID STCLASS ALIGNED,
   139 -       2 NM,
   140 -         3 CNT UBIN(9) UNAL,
   141 -         3 TEXT CHAR(30) UNAL,
   142 -       2 DCB# UBIN(18) ALIGNED;
   143 - DCL I_O_KEY UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
   144 - DCL RESTART  BIT(72)    STCLASS %INIT('0'B)%CHARTEXT('/**/') ALIGNED;
   145 - DCL BREAK_FLAG SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
   146 - DCL ICHKSUM    UBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
   147 - DCL ICHKSUM_BIT REDEF ICHKSUM BIT(36) ALIGNED;
   148 - DCL ITMCNT     SBIN(36) STCLASS %INIT(0)%CHARTEXT('/**/') ALIGNED;
   149 - DCL GAP1 (0:4) UBIN(36) STCLASS %INIT(0*0)%CHARTEXT('/**/') ALIGNED;
   150 - %MEND;
   151 - %MACRO PAREC(STCLASS=SYMREF);
   152 - DCL 1  PA_REC  BASED(REC$)  CALIGNED,
   153 -       2 *  UBIN(6)  UNAL,
   154 -       2 TYPE  UBIN(12)  UNAL,
   155 -       2 SIZE  UBIN(18)  UNAL,
   156 -       2 NOT_LOWEST_LEVEL BIT(1) UNAL,
   157 -       2 HIGHEST_KEY BIT(1) UNAL,
   158 -       2 FIRST_IN_LEVEL BIT(1) UNAL,
   159 -       2 LAST_IN_LEVEL BIT(1) UNAL,
   160 -       2 LOWEST_KEY BIT(1) UNAL,
   161 -       2 *  BIT(1) UNAL,                 /* UNUSED FLAG                        */
   162 -       2 ENTRIES  UBIN(12)  UNAL,
   163 -       2 AVAIL  UBIN(18)  UNAL;
   164 - DCL 1  PA_ENTRY  BASED(ENTRY$)  UNAL,
   165 -       2 C  UBIN(1)  UNAL,
   166 -       2 *  UBIN(5)  UNAL,
   167 -       2 TYPE  UBIN(12)  UNAL,
   168 -       2 PTRS  CHAR(PTR_LEN)  UNAL;
   169 - DCL 1  PA_GROUP  BASED(GROUP$)  UNAL,
   170 -       2 NO_GROUPS  UBIN  HALF  UNAL,
   171 -       2 TYPE  UBIN(18)  UNAL,
   172 -       2 PTRS  CHAR(PTR_LEN)  UNAL;
   173 - DCL  ENTRY$  PTR  STCLASS;
   174 - DCL  GROUP$  PTR  STCLASS;
   175 - DCL  PTR_LEN  SBIN  STCLASS ALIGNED;
   176 - DCL  KEY_LEN  SBIN  STCLASS ALIGNED;
   177 - %MEND;
