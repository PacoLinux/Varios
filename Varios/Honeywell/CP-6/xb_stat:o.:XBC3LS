
PL6.E3A0      #001=STAT File=xb_stat:6.:XBC3TSI                                  FRI 01/06/95 11:32 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6
        7        7        stat : PROC (path, statbuf);
        8        8
        9        9        /*D* NAME: stat
       10       10             PROTOTYPE:   int  stat(char *path, struct stat *statbuf);
       11       11             DESCRIPTION: The stat function gets file status information
       12       12                          about a file (path).  The following information
       13       13                          is returned about the file path:
       14       14                       struct stat {
       15       15                          short             st_dev;   - ID of device containin
       16       16                                                        directory entry
       17       17                          unsigned long     st_ino;   - Inode number
       18       18                          unsigned short    st_mode;  - FILE mode
       19       19                          short             st_nlink; - Number of links
       20       20                          unsigned short    st_uid;   - User ID of owner
       21       21                          unsigned short    st_gid;   - Group ID of group
       22       22                          short             st_rdev;  - ID of device
       23       23                          int               st_size;  - File size in bytes
       24       24                          time_t            st_atime; - Time of last access
       25       25                          time_t            st_mtime; - Time of last mod
       26       26                          time_t            st_ctime; - Time last statuschange
       27       27                       };
       28       28
       29       29                          If the information can be returned, then 0 is
       30       30                          returned otherwise, a value of -1 is returned and
       31       31                          errno is set to indicate the error.
       32       32
       33       33              WGE October 1, 1990
       34       34        */
       35       35
       36       36        %INCLUDE CP_6;
       37     5596        %INCLUDE CP_6_SUBS;
PL6.E3A0      #001=STAT File=xb_stat:6.:XBC3TSI                                  FRI 01/06/95 11:32 Page:2    
       38     6136        %INCLUDE FM$FIT;
       39     6357        %INCLUDE xb_error_numbers_i6;
       40     6404        %INCLUDE sys$stat_i6;
       41     6449
       42     6450
       43     6451        /*    Parameter declarations  */
       44     6452
       45     6453    1   DCL   path           CHAR(path_len);
       46     6454        %stat_struct(NAME=statbuf,STCLASS=" ");
       47     6468
       48     6469        /*    Function declarations   */
       49     6470
       50     6471    1   DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
       51     6472    1   DCL XBI$STRLEN                ENTRY (2);
       52     6473    1   DCL XBI$UTSTOGMT              ENTRY (2);
       53     6474    1   DCL XBI_SET_ERRNO             ENTRY (1);
       54     6475    1   DCL XSF$LOCCODT               ENTRY (2)   ALTRET;
       55     6476
       56     6477        /*    Local declarations      */
       57     6478
       58     6479    1   DCL   path_len       SBIN;
       59     6480    1   DCL   ret_val        SBIN;
       60     6481    1   DCL   dcb_number     UBIN;
       61     6482    1   DCL   dcb$           PTR;
       62     6483    1   DCL   fit$           PTR;
       63     6484
       64     6485        /*    Monitor declarations    */
       65     6486
       66     6487        %FPT_FID (FPTN=CONST_FPT_FID, STCLASS=CONSTANT);
       67     6510        %FPT_FID (FPTN=FPT_PATHFID, STCLASS=AUTO);
       68     6533        %FPT_OPEN   (FPTN=constant_open, TEST=YES, STCLASS=CONSTANT);
       69     6642        %FPT_OPEN   (FPTN=auto_open, STCLASS=AUTO);
       70     6751        %FPT_GETDCB (FPTN=constant_getdcb, STCLASS=CONSTANT);
       71     6766        %FPT_GETDCB (FPTN=auto_getdcb, STCLASS=AUTO);
       72     6781        %FPT_RELDCB (FPTN=constant_reldcb, STCLASS=CONSTANT);
       73     6795        %FPT_RELDCB (FPTN=auto_reldcb, STCLASS=AUTO);
       74     6809
PL6.E3A0      #001=STAT File=xb_stat:6.:XBC3TSI                                  FRI 01/06/95 11:32 Page:3    
       75     6810        %VLP_NAME (FPTN=VLP_PATHNAME, LEN=31, STCLASS=AUTO);
       76     6837        %VLP_ACCT (FPTN=VLP_PATHACCT, STCLASS=AUTO);
       77     6850        %VLP_PASS (FPTN=VLP_PATHPASS, STCLASS=AUTO);
       78     6863        %VLP_WSN (FPTN=VLP_PATHWSN, STCLASS=AUTO);
       79     6876        %VLP_SN (FPTN=VLP_PATHSN, STCLASS=AUTO);
       80     6889        %VLR_FID (FPTN=VLR_PATHFID, STCLASS=AUTO);
       81     6908
       82     6909        %F$DCB(BASED="BASED(dcb$)");
       83     6966        %FM$FIT(FM$FIT=fparam,BASED="",N=1023);
       84     6969        %CODE04(BASED="BASED(fit$)");
       85     6977
       86     6978        /*    Declarations of possible errors that can occur                */
       87     6979
       88     6980        %VLP_ERRCODE(FPTN=XB$ERR$ENOENT,
       89     6981                     FCG='XB', MID='I', ERR#="ENOENT", SEV=7);
       90     7026
       91     7027        %VLP_ERRCODE(FPTN=XB$ERR$EACCES,
       92     7028                     FCG='XB', MID='I', ERR#="EACCES", SEV=7);
       93     7073
       94     7074    1   lstat:   entry (path, statbuf);
       95     7075
       96     7076        /*D* NAME: lstat
       97     7077             PROTOTYPE:   int  lstat(char *path, struct stat *statbuf);
       98     7078             DESCRIPTION: The lstat function gets file status information
       99     7079                          about a file (path).  The following information
      100     7080                          is returned about the file path:
      101     7081                       struct stat {
      102     7082                          short             st_dev;   - ID of device containin
      103     7083                                                        directory entry
      104     7084                          unsigned long     st_ino;   - Inode number
      105     7085                          unsigned short    st_mode;  - FILE mode
      106     7086                          short             st_nlink; - Number of links
      107     7087                          unsigned short    st_uid;   - User ID of owner
      108     7088                          unsigned short    st_gid;   - Group ID of group
      109     7089                          short             st_rdev;  - ID of device
      110     7090                          int               st_size;  - File size in bytes
      111     7091                          time_t            st_atime; - Time of last access
PL6.E3A0      #001=STAT File=xb_stat:6.:XBC3TSI                                  FRI 01/06/95 11:32 Page:4    
      112     7092                          time_t            st_mtime; - Time of last mod
      113     7093                          time_t            st_ctime; - Time last statuschange
      114     7094                       };
      115     7095
      116     7096                          If the information can be returned, then 0 is
      117     7097                          returned otherwise, a value of -1 is returned and
      118     7098                          errno is set to indicate the error.
      119     7099
      120     7100              WGE October 1, 1990
      121     7101        */
      122     7102
      123     7103        /*    Usual kludge to get parameters and get length of arguments    */
      124     7104
      125     7105    1      CALL XBI$STRLEN(path, path_len);
      126     7106    1      ret_val = 0;
      127     7107
      128     7108        /*    Time to do an M$FID on the path  name                         */
      129     7109
      130     7110    2      IF path_len = 0 THEN DO;
      131     7111    2         CALL XBI_SET_ERRNO (XB$ERR$ENOENT);
      132     7112    2         CALL XB_RETURN_ORDINAL_RESULT (-1);
      133     7113    2      END;
      134     7114    1      VLP_PATHNAME.L#= path_len;
      135     7115    1      SUBSTR(VLP_PATHNAME.NAME#,0,path_len) = SUBSTR(path,0,path_len);
      136     7116
      137     7117        /* get a DCB to use */
      138     7118
      139     7119    1      auto_getdcb = constant_getdcb;
      140     7120    1      auto_getdcb.v_ = VECTOR(auto_getdcb.v);
      141     7121    1      auto_getdcb.dcbnum_ = VECTOR(dcb_number);
      142     7122    1      CALL M$GETDCB (auto_getdcb)
      143     7123    2      WHENALTRETURN DO;   /* failed to get a DCB .. give user an error */
      144     7124    2         CALL XB_RETURN_ORDINAL_RESULT(-1);
      145     7125    2      END;
      146     7126
      147     7127    1      auto_open = constant_open;
      148     7128    1      auto_open.v_ = VECTOR(auto_open.v);
PL6.E3A0      #001=STAT File=xb_stat:6.:XBC3TSI                                  FRI 01/06/95 11:32 Page:5    
      149     7129    1      FPT_PATHFID        = CONST_FPT_FID;
      150     7130    1      FPT_PATHFID.V_     = VECTOR(FPT_PATHFID.V);
      151     7131    1      FPT_PATHFID.NAME_  = VECTOR(VLP_PATHNAME);
      152     7132    1      FPT_PATHFID.ACCT_  = VECTOR(VLP_PATHACCT);
      153     7133    1      FPT_PATHFID.PASS_  = VECTOR(VLP_PATHPASS);
      154     7134    1      FPT_PATHFID.ASN_   = VECTOR(auto_open.V.ASN#);
      155     7135    1      FPT_PATHFID.RES_   = VECTOR(auto_open.V.RES#);
      156     7136    1      FPT_PATHFID.SN_    = VECTOR(VLP_PATHSN);
      157     7137    1      FPT_PATHFID.WSN_   = VECTOR(VLP_PATHWSN);
      158     7138    1      FPT_PATHFID.TEXTFID_ = VECTOR(path);
      159     7139    1      FPT_PATHFID.RESULTS_ = VECTOR(VLR_PATHFID);
      160     7140    1      VLR_PATHFID = '0'B;
      161     7141    2      CALL M$FID (FPT_PATHFID) whenaltreturn do;
      162     7142    2         ret_val = -1;
      163     7143    2         goto return_cleanup;
      164     7144    2      end;
      165     7145
      166     7146        /*    Now that the files has been M$FIDed it is time to do a test
      167     7147              open to see if the requested access is attainable for the
      168     7148              file.                                                         */
      169     7149
      170     7150    1      auto_open.ACCT_ = VECTOR(VLP_PATHACCT);
      171     7151    1      auto_open.NAME_ = VECTOR(VLP_PATHNAME);
      172     7152    1      auto_open.PASS_ = VECTOR(VLP_PATHPASS);
      173     7153    1      auto_open.SN_   = VECTOR(VLP_PATHSN);
      174     7154    1      auto_open.WSN_  = VECTOR(VLP_PATHWSN);
      175     7155    1      auto_open.v.dcb# = dcb_number;
      176     7156    1      auto_open.fparam_ = VECTOR(fparam);
      177     7157
      178     7158    2      CALL M$OPEN (auto_open) WHENALTRETURN DO;
      179     7159    2         ret_val = -1;
      180     7160    2         CALL XBI_SET_ERRNO (XB$ERR$ENOENT);
      181     7161    2         GOTO return_cleanup;
      182     7162    2      END;
      183     7163    1      dcb$ = DCBADDR(dcb_number);
      184     7164
      185     7165        /*    Now lets stuff all this info into the stat structure          */
PL6.E3A0      #001=STAT File=xb_stat:6.:XBC3TSI                                  FRI 01/06/95 11:32 Page:6    
      186     7166
      187     7167    1      fit$ = ADDR(fparam);
      188     7168    2      CALL XSF$LOCCODT (FIT$, 4) WHENALTRETURN DO;
      189     7169    2         ret_val = -1;
      190     7170    2         CALL XBI_SET_ERRNO (XB$ERR$ENOENT);
      191     7171    2         GOTO return_cleanup;
      192     7172    2      END;
      193     7173
      194     7174
      195     7175    2      IF (F$DCB.ORG# = %UR#) THEN DO;
      196     7176    2         statbuf.st_mode = %BITBIN(%S_IFCHR);
      197     7177    2      END;
      198     7178    2      ELSE DO;
      199     7179    2         statbuf.st_mode = %BITBIN(%S_IFREG);
      200     7180    2      END;
      201     7181
      202     7182    1      statbuf.st_mode = BITBIN(BINBIT(statbuf.st_mode,36) | %S_IREAD | %S_IWRITE | %
              7182               S_IEXEC);
      203     7183    1      statbuf.st_ino = 0;
      204     7184    1      statbuf.st_dev = 0;
      205     7185    1      statbuf.st_rdev = 0;
      206     7186    1      statbuf.st_nlink = 1;
      207     7187    1      statbuf.st_uid = 0;
      208     7188    1      statbuf.st_gid = 0;
      209     7189    1      statbuf.st_size = F$DCB.IXTNSIZE# * 4096;
      210     7190    1      CALL XBI$UTSTOGMT (statbuf.st_atime, CODE04.ACCESS.TIME);
      211     7191    1      CALL XBI$UTSTOGMT (statbuf.st_mtime, CODE04.MODIFY.TIME);
      212     7192    1      statbuf.st_ctime = statbuf.st_ctime;
      213     7193
      214     7194    1   return_cleanup:
      215     7195    1      auto_reldcb = constant_reldcb;
      216     7196    1      auto_reldcb.v_ = VECTOR (auto_reldcb.v);
      217     7197    1      auto_reldcb.v.dcb# = dcb_number;
      218     7198    2      CALL M$RELDCB (auto_reldcb) WHENALTRETURN DO; END;
      219     7199
      220     7200        /* Th Th Th That's all folks, for completion                        */
      221     7201
PL6.E3A0      #001=STAT File=xb_stat:6.:XBC3TSI                                  FRI 01/06/95 11:32 Page:7    
      222     7202    1      CALL XB_RETURN_ORDINAL_RESULT(ret_val);
      223     7203    1   END stat;

PL6.E3A0      #001=STAT File=xb_stat:6.:XBC3TSI                                  FRI 01/06/95 11:32 Page:8    
--  Include file information  --

   sys$stat_i6.:XBC3TOU  is referenced.
   xb_error_numbers_i6.:XBC3TOU  is referenced.
   FM$FIT.:LIB_E04  is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure STAT.

   Procedure STAT requires 262 words for executable code.
   Procedure STAT requires 1158 words of local(AUTO) storage.

    No errors detected in file xb_stat:6.:XBC3TSI    .

PL6.E3A0      #001=STAT File=xb_stat:6.:XBC3TSI                                  FRI 01/06/95 11:32 Page:9    
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=STAT File=xb_stat:6.:XBC3TSI                                  FRI 01/06/95 11:32 Page:10   
          MINI XREF LISTING

AUTO_GETDCB
      6777**DCL      7119<<ASSIGN   7122<>CALL
AUTO_GETDCB.DCBNUM_
      6777**DCL      7121<<ASSIGN
AUTO_GETDCB.V
      6778**DCL      7120--ASSIGN
AUTO_GETDCB.V_
      6777**DCL      7120<<ASSIGN
AUTO_OPEN
      6707**DCL      7127<<ASSIGN   7158<>CALL
AUTO_OPEN.ACCT_
      6711**DCL      7150<<ASSIGN
AUTO_OPEN.ACSVEH_
      6709**DCL      6710--REDEF
AUTO_OPEN.ALTKEYS_
      6715**DCL      6716--REDEF    6716--REDEF
AUTO_OPEN.FPARAM_
      6712**DCL      7156<<ASSIGN
AUTO_OPEN.HDR_
      6714**DCL      6715--REDEF
AUTO_OPEN.NAME_
      6708**DCL      7151<<ASSIGN
AUTO_OPEN.PASS_
      6709**DCL      7152<<ASSIGN
AUTO_OPEN.SN_
      6707**DCL      7153<<ASSIGN
AUTO_OPEN.TAB_
      6713**DCL      6714--REDEF
AUTO_OPEN.UHL_
      6707**DCL      6708--REDEF    6708--REDEF
AUTO_OPEN.V
      6716**DCL      7128--ASSIGN
PL6.E3A0      #001=STAT File=xb_stat:6.:XBC3TSI                                  FRI 01/06/95 11:32 Page:11   
AUTO_OPEN.V.ASN#
      6726**DCL      7134--ASSIGN
AUTO_OPEN.V.DCB#
      6716**DCL      7155<<ASSIGN
AUTO_OPEN.V.FSN#
      6747**DCL      6747--REDEF    6747--REDEF
AUTO_OPEN.V.RES#
      6731**DCL      7135--ASSIGN
AUTO_OPEN.V_
      6707**DCL      7128<<ASSIGN
AUTO_OPEN.WSN_
      6713**DCL      6713--REDEF    7154<<ASSIGN
AUTO_RELDCB
      6806**DCL      7195<<ASSIGN   7198<>CALL
AUTO_RELDCB.V
      6806**DCL      7196--ASSIGN
AUTO_RELDCB.V.DCB#
      6806**DCL      7197<<ASSIGN
AUTO_RELDCB.V_
      6806**DCL      7196<<ASSIGN
CODE04.ACCESS.TIME
      6974**DCL      7190<>CALL
CODE04.MODIFY.TIME
      6974**DCL      7191<>CALL
CONSTANT_GETDCB
      6762**DCL      7119>>ASSIGN
CONSTANT_GETDCB.V
      6763**DCL      6762--DCLINIT
CONSTANT_OPEN
      6598**DCL      7127>>ASSIGN
CONSTANT_OPEN.ACSVEH_
      6600**DCL      6601--REDEF
CONSTANT_OPEN.ALTKEYS_
      6606**DCL      6607--REDEF    6607--REDEF
CONSTANT_OPEN.HDR_
      6605**DCL      6606--REDEF
PL6.E3A0      #001=STAT File=xb_stat:6.:XBC3TSI                                  FRI 01/06/95 11:32 Page:12   
CONSTANT_OPEN.TAB_
      6604**DCL      6605--REDEF
CONSTANT_OPEN.UHL_
      6598**DCL      6599--REDEF    6599--REDEF
CONSTANT_OPEN.V
      6607**DCL      6598--DCLINIT
CONSTANT_OPEN.V.FSN#
      6638**DCL      6638--REDEF    6638--REDEF
CONSTANT_OPEN.WSN_
      6604**DCL      6604--REDEF
CONSTANT_RELDCB
      6792**DCL      7195>>ASSIGN
CONSTANT_RELDCB.V
      6792**DCL      6792--DCLINIT
CONST_FPT_FID
      6498**DCL      7129>>ASSIGN
CONST_FPT_FID.V
      6502**DCL      6498--DCLINIT
DCB$
      6482**DCL      6910--IMP-PTR  7163<<ASSIGN   7175>>IF       7189>>ASSIGN
DCB_NUMBER
      6481**DCL      7121--ASSIGN   7155>>ASSIGN   7163--ASSIGN   7197>>ASSIGN
F$DCB.ACTPOS
      6942**DCL      6942--REDEF
F$DCB.ARS#
      6916**DCL      6916--REDEF
F$DCB.ATTR
      6935**DCL      6936--REDEF
F$DCB.BORROW
      6950**DCL      6950--REDEF    6950--REDEF    6950--REDEF
F$DCB.DCBNAME.L
      6964**DCL      6964--IMP-SIZ
F$DCB.EOMCHAR#
      6920**DCL      6920--REDEF
F$DCB.FLDID
      6945**DCL      6945--REDEF
PL6.E3A0      #001=STAT File=xb_stat:6.:XBC3TSI                                  FRI 01/06/95 11:32 Page:13   
F$DCB.FORM$
      6939**DCL      6939--REDEF
F$DCB.FSECT
      6955**DCL      6955--REDEF
F$DCB.FSN#
      6932**DCL      6932--REDEF    6932--REDEF    6933--REDEF
F$DCB.HEADER$
      6938**DCL      6938--REDEF
F$DCB.IXTNSIZE#
      6936**DCL      6936--REDEF    7189>>ASSIGN
F$DCB.LASTSTA$
      6925**DCL      6925--REDEF
F$DCB.LVL
      6951**DCL      6951--REDEF
F$DCB.NAME#.C
      6926**DCL      6926--REDEF
F$DCB.NOEOF
      6948**DCL      6948--REDEF
F$DCB.NRECS#
      6937**DCL      6937--REDEF
F$DCB.NRECX
      6956**DCL      6956--REDEF
F$DCB.OHDR
      6948**DCL      6948--REDEF
F$DCB.ORG#
      6931**DCL      6931--REDEF    7175>>IF
F$DCB.PRECNO
      6954**DCL      6954--REDEF
F$DCB.RCSZ
      6960**DCL      6960--REDEF
F$DCB.RES#
      6927**DCL      6927--REDEF
F$DCB.SETX
      6939**DCL      6939--REDEF
F$DCB.TAB$
      6939**DCL      6939--REDEF
PL6.E3A0      #001=STAT File=xb_stat:6.:XBC3TSI                                  FRI 01/06/95 11:32 Page:14   
F$DCB.TDA
      6953**DCL      6954--REDEF
F$DCB.WSN#
      6927**DCL      6927--REDEF
FIT$
      6483**DCL      6972--IMP-PTR  7167<<ASSIGN   7168<>CALL     7190>>CALL     7191>>CALL
FPARAM
      6967**DCL      7156--ASSIGN   7167--ASSIGN
FPT_PATHFID
      6521**DCL      7129<<ASSIGN   7141<>CALL
FPT_PATHFID.ACCT_
      6522**DCL      7132<<ASSIGN
FPT_PATHFID.ASN_
      6524**DCL      7134<<ASSIGN
FPT_PATHFID.NAME_
      6522**DCL      7131<<ASSIGN
FPT_PATHFID.PASS_
      6522**DCL      7133<<ASSIGN
FPT_PATHFID.RESULTS_
      6524**DCL      7139<<ASSIGN
FPT_PATHFID.RES_
      6524**DCL      7135<<ASSIGN
FPT_PATHFID.SN_
      6523**DCL      7136<<ASSIGN
FPT_PATHFID.TEXTFID_
      6521**DCL      7138<<ASSIGN
FPT_PATHFID.V
      6525**DCL      7130--ASSIGN
FPT_PATHFID.V_
      6521**DCL      7130<<ASSIGN
FPT_PATHFID.WSN_
      6523**DCL      7137<<ASSIGN
M$FID
      5587**DCL-ENT  7141--CALL
M$GETDCB
      5530**DCL-ENT  7122--CALL
PL6.E3A0      #001=STAT File=xb_stat:6.:XBC3TSI                                  FRI 01/06/95 11:32 Page:15   
M$OPEN
      5524**DCL-ENT  7158--CALL
M$RELDCB
      5530**DCL-ENT  7198--CALL
PATH
      6453**DCL         7--PROC     7074--ENTRY    7105<>CALL     7115>>ASSIGN   7138--ASSIGN
PATH_LEN
      6479**DCL      6453--IMP-SIZ  7105>>CALL     7105<>CALL     7110>>IF       7114>>ASSIGN   7115>>ASSIGN
      7115>>ASSIGN   7115>>ASSIGN   7138>>ASSIGN
RETURN_CLEANUP
      7195**LABEL    7143--GOTO     7161--GOTO     7171--GOTO
RET_VAL
      6480**DCL      7106<<ASSIGN   7142<<ASSIGN   7159<<ASSIGN   7169<<ASSIGN   7202<>CALL
STATBUF
      6455**DCL         7--PROC     7074--ENTRY
STATBUF.ST_ATIME
      6464**DCL      7190<>CALL
STATBUF.ST_CTIME
      6466**DCL      7192<<ASSIGN   7192>>ASSIGN
STATBUF.ST_DEV
      6456**DCL      7184<<ASSIGN
STATBUF.ST_GID
      6461**DCL      7188<<ASSIGN
STATBUF.ST_INO
      6457**DCL      7183<<ASSIGN
STATBUF.ST_MODE
      6458**DCL      7176<<ASSIGN   7179<<ASSIGN   7182<<ASSIGN   7182>>ASSIGN
STATBUF.ST_MTIME
      6465**DCL      7191<>CALL
STATBUF.ST_NLINK
      6459**DCL      7186<<ASSIGN
STATBUF.ST_RDEV
      6462**DCL      7185<<ASSIGN
STATBUF.ST_SIZE
      6463**DCL      7189<<ASSIGN
STATBUF.ST_UID
PL6.E3A0      #001=STAT File=xb_stat:6.:XBC3TSI                                  FRI 01/06/95 11:32 Page:16   
      6460**DCL      7187<<ASSIGN
VLP_PATHACCT
      6848**DCL      7132--ASSIGN   7150--ASSIGN
VLP_PATHNAME
      6835**DCL      7131--ASSIGN   7151--ASSIGN
VLP_PATHNAME.L#
      6835**DCL      7114<<ASSIGN
VLP_PATHNAME.NAME#
      6835**DCL      7115<<ASSIGN
VLP_PATHPASS
      6861**DCL      7133--ASSIGN   7152--ASSIGN
VLP_PATHSN
      6887**DCL      7136--ASSIGN   7153--ASSIGN
VLP_PATHWSN
      6874**DCL      7137--ASSIGN   7154--ASSIGN
VLR_PATHFID
      6900**DCL      7139--ASSIGN   7140<<ASSIGN
XB$ERR$ENOENT
      6993**DCL      7111<>CALL     7160<>CALL     7170<>CALL
XBI$STRLEN
      6472**DCL-ENT  7105--CALL
XBI$UTSTOGMT
      6473**DCL-ENT  7190--CALL     7191--CALL
XBI_SET_ERRNO
      6474**DCL-ENT  7111--CALL     7160--CALL     7170--CALL
XB_RETURN_ORDINAL_RESULT
      6471**DCL-ENT  7112--CALL     7124--CALL     7202--CALL
XSF$LOCCODT
      6475**DCL-ENT  7168--CALL
