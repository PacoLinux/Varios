/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
GET_NAME: PROC (LOGON_NAME,WEEK);
%INCLUDE CP_6;
%INCLUDE B$JIT_C;
%B$JIT0;
%U$JIT1;
%A$JIT6X;
%B$TCB;
%B$ALT;
%F$DCB;
DCL LOGON_NAME CHAR(12);
        DCL WEEK CHAR(2);
DCL B$JIT$ PTR SYMREF;
                WEEK = '  ';
                IF B$JIT.CCDISP<B$JIT.CCARS
                THEN DO;
                    IF SUBSTR(B$JIT.CCBUF,B$JIT.CCARS-1,1) = ')'
                    THEN
                        WEEK = SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP+1,
                                B$JIT.CCARS-B$JIT.CCDISP-2);
                    ELSE
                        WEEK = SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP+1,
                                B$JIT.CCARS-B$JIT.CCDISP-1);
                    END;
        LOGON_NAME = B$JIT$->B$JIT.ACCN;
        RETURN;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
GET_DATE: PROC ( ANS_DATE);
%INCLUDE CP_6;
DCL ANS_DATE CHAR(6);
 
%FPT_TIME (FPTN=CURRENT_DATE,
           DEST=ANS);
 
           CURRENT_DATE.DATE_=VECTOR(ANS_DATE);
           CALL M$TIME (CURRENT_DATE);
           RETURN;
 
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
GET_DATE_FROM_UTS: PROC (UTS, ANS_DATE);
%INCLUDE CP_6;
DCL TIME CHAR(11) STATIC INIT('12:00:00:00');
DCL ANS_DATE CHAR(6);
DCL UTS BIT(36) ALIGNED;
 
%FPT_TIME (FPTN=USER_DATE,
           DEST=ANS,
           SOURCE=UTS);
 
 
        USER_DATE.TSTAMP_=VECTOR(UTS);
        USER_DATE.DATE_=VECTOR(ANS_DATE);
        CALL M$TIME (USER_DATE);
        RETURN;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*D*
NAME: TEXT_TO_UTS
PURPOSE: Convert a text string date in a fixed form to a UTS.
DESCRIPTION:
    Pass this routine a character string and a length, and it will return you
    a UTS. The string must be in the form:
     MM/DD/YY
*/
%EJECT;
TEXT_TO_UTS: PROC( P_STR, P_UTS,P_ERROR);
 
 /* CP6 Includes */
 
/*N* delete the account when the date routines get to :LIBRARY */
%INCLUDE XU_MACRO_C;
 
 /* Parameters */
 
DCL P_STR CHAR( 8 ) PARAM;
DCL P_UTS BIT(36) ALIGNED PARAM;
DCL P_ERROR BIT(36) PARAM;
 
 /* Entries */
 
        %XUD_ENTRY;
 
 /* Constants */
 
%XUD_PARAM( NAME=XUD_PARAM_C, STCLASS=CONSTANT,
 PIC=DATE_PICTURE,
 INIT_PIC=YES );
 
DCL 1 DATE_PICTURE ALIGNED CONSTANT,
      2 C CHAR(8) CALIGNED INIT( 'MM/DD/YY');
 
 /* Local Data */
 
%XUD_PARAM( NAME=XUD_PARAM, STCLASS=AUTO );
 
%EJECT;
    XUD_PARAM = XUD_PARAM_C;
    XUD_PARAM.SIZE = 8;
    XUD_PARAM.PIC_SIZE = 8;
 
    CALL XUD$CHAR_UTS( XUD_PARAM, P_STR, P_UTS )
    WHENALTRETURN DO;
 /* XUD_PARAM.ERR Contains a CP6 error code. */
         P_ERROR = XUD_PARAM.ERR;
        END;
 
    RETURN;
 
 
END TEXT_TO_UTS;
%EOD;
/*M* BREAK HANDLER FOR VOUCHER.X PROGRAM */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
SETUP:  PROC;
%INCLUDE CP_6;
 %FPT_INT(FPTN=FPT_INT,STCLASS=CONSTANT,
  UENTRY=BREAK);
DCL BREAK ENTRY ASYNC;
 
    CALL M$INT(FPT_INT)
    WHENALTRETURN DO;
        CALL M$MERC;
        END;
 
    RETURN;
END SETUP;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
BREAK:  PROC ASYNC;
DCL BLCK10 SBIN WORD EXT;
 
    BLCK10=1;
 
    RETURN;
END BREAK;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
SET_PROMPT: PROC;
%INCLUDE CP_6;
%INCLUDE NK_VFC_C;
%FPT_PROMPT( FPTN=FPT_BREAK_PROMPT_C, STCLASS=CONSTANT,
             DCB=INFILE, PROMPT=BREAK_PROMPT, VFC=YES );
%FPT_PROMPT( FPTN=FPT_NORMAL_PROMPT_C, STCLASS=CONSTANT,
             DCB=INFILE, PROMPT=NORMAL_PROMPT, VFC=YES );
DCL BREAK_PROMPT CHAR(23) CONSTANT
   INIT( %CONCAT( %VFC_TRANSITION0, 'Enter ''C'' to continue.' ) );
DCL NORMAL_PROMPT CHAR(2) CONSTANT
   INIT( %CONCAT( %VFC_TRANSITION0, '*' ) );
DCL INFILE DCB;
 
    CALL M$PROMPT( FPT_BREAK_PROMPT_C );
    RETURN;
 
RESET_PROMPT: ENTRY;
    CALL M$PROMPT( FPT_NORMAL_PROMPT_C );
    RETURN;
 
END SET_PROMPT;
