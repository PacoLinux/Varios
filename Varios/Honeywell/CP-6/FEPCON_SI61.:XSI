/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
FEPCON: PROC MAIN NOAUTO;
 
/*M*  FEPCON - A cool way to configure a FEP      ahlbdje   */
 
 
%INCLUDE FEPCON_C61;
 %INCLUDE XU_MACRO_C;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE XU_FORMAT_C;
%INCLUDE XU_SUBS_C;
%INCLUDE XU_PERR_C;
%INCLUDE XUG_ENTRY;
%INCLUDE READ_C61;
 %F$DCB;
%PARSE$OUT;
%PARSE$SYM;
 
%EQU     TRUE = 1;
%EQU     FALSE = 0;
/* ----------------------------------- */
/*           FPT's                     */
/* ----------------------------------- */
 
%FPT_OPEN(FPTN=OPEN_LO,
          DCB=M$LO,
          FUN=CREATE,
          EXIST=OLDFILE);
 
%FPT_OPEN(FPTN=OPEN_SI,
          DCB=M$SI,
          FUN=IN);
 
 
%FPT_CLOSE(FPTN=CLOSE_SI,
           DCB=M$SI,
           DISP=SAVE);
 
%FPT_CLOSE(FPTN=CLOSE_LO,
           DCB=M$LO,
           DISP=SAVE);
 
%FPT_OPEN(FPTN=CON_DATA,
          DCB=F$CON,
          FUN=IN,
          SHARE=IN,
          ASN=FILE,
          NAME=NAME_CON);
 
%VLP_NAME(FPTN=NAME_CON,
          LEN=4,
          NAME='FEPA');
 
%FPT_READ(FPTN=READ_CON,
         DCB=F$CON,
         BUF=BUFFER);
 
 
%P_PCB(NAME=FEPCON_PCB,
         R=MAIN_CMD,
         W=WORK_AREA,
         T=BUFFER,
         WSZ="SIZEW(WORK_AREA)");
 
%FPT_READ(FPTN=BPRINT,
          DCB=M$LO,
          BUF=BUFFER);
 
%XUG_GETCMD   (NAME          = XUG$GETCMD_,
               TREAD         = NO,
               DCB_PARAM     = M$LO,
               NODES         = MAIN_CMD,
               INDCB         = F$CON,
               OUTDCB        = M$ME ) ;
 
%XUG_INIT     (NAME          = XUG$INIT_,
               STCLASS       = STATIC,
               PCB           = FEPCON_PCB ) ;
 
 
/* ----------------------------------- */
/*           work space                */
/* ----------------------------------- */
 
DCL M$SI      DCB;
DCL M$LO      DCB;
DCL M$ME      DCB;
DCL M$DO      DCB;
DCL F$CON     DCB;
DCL  BLK$  PTR  STATIC;
DCL  WORK_AREA(0:1023)       UBIN(36)     STATIC;
DCL  MAIN_CMD                BIT(36)      SYMREF;
 
DCL  X$PARSE                 ENTRY(1)     ALTRET;
DCL BUFFER  CHAR(80)  STATIC INIT(' ');
DCL RBUFFER  REDEF BUFFER  CHAR(80);
 
DCL QUIT BIT(1) STATIC INIT('%FALSE'B);
DCL SELBYHND BIT(1) STATIC INIT('%FALSE'B);
DCL OUT$ PTR;
DCL LAST_CMD  UBIN;
DCL SUBZERO$       PTR;       /*  SUB BLOCK ZERO */
DCL SUBONE$        PTR;       /*  SUB BLOCK ONE  */
DCL XPTR           PTR;      /*  WORK SPACE PTR  */
DCL I              UBIN;
 
/* -------------------------------------
         input data storage
   ------------------------------------- */
 
DCL  DELTA         CHAR(1)   STATIC INIT('N');
DCL  LOCAL         CHAR(1)   STATIC INIT('Y');
DCL  RBT_NAME      CHAR(8)   STATIC INIT(' ');
DCL  HDLC_NAME     CHAR(8)   STATIC INIT(' ');
DCL  URNAME        CHAR(8)   STATIC INIT(' ');
DCL  DISK          CHAR(1)   STATIC INIT('Y');
DCL  A_SIZE        CHAR(1)   STATIC INIT('M');
DCL  B_SIZE        CHAR(1)   STATIC INIT('M');
DCL  HDLC_SIZE     CHAR(1)   STATIC INIT('M');
DCL  SIZE_FEPMEM   CHAR(1)   STATIC INIT('M');
DCL  RBT_AUTOLOG   CHAR(1)   STATIC INIT('Y');
 
 
DCL  FEP_NUM       UBIN      STATIC INIT(0);
DCL  MAXRBTS       UBIN      STATIC INIT(1);
DCL  LINKNO        UBIN      STATIC INIT(0);
DCL  VC            UBIN      STATIC INIT(0);
DCL  SW            UBIN      STATIC INIT(0);
DCL  FRAME         UBIN      STATIC INIT(0);
DCL  X28_DFL       UBIN      STATIC INIT(0);  /* DEVICE FOR LINK */
DCL  CIRCUITS      UBIN      STATIC INIT(0);
DCL  HDLC_6EUSERS  UBIN      STATIC INIT(0);
DCL  HDLC_FORMU    UBIN      STATIC INIT(0);
DCL  HDLC_MSCFPRG  UBIN      STATIC INIT(0);
DCL  HDLCALNO   UBIN      STATIC INIT(0);
DCL  RFEPS         UBIN      STATIC INIT(0);
DCL  MAXUNIT_RECS  UBIN      STATIC INIT(0);
DCL  URBLOCK       UBIN      STATIC INIT(0);
DCL  CPLRSND       UBIN      STATIC INIT(32000);  /* SNDCQBYTSIZE */
DCL  CPLRRCV       UBIN      STATIC INIT(16000);  /* RCVCQBYTSIZE */
DCL  RBT_NO        UBIN      STATIC INIT(0);  /* TOTAL # RBTS */
DCL  RBT_INDEV     UBIN      STATIC INIT(2);
DCL  RBT_OUTDEV    UBIN      STATIC INIT(2);
DCL  RBT_BLKBYTES  UBIN      STATIC INIT(400);
DCL  RBT_DEVICES   UBIN      STATIC INIT(5);
DCL  RBT_BLOCK     UBIN      STATIC INIT(0);
DCL  PHYCHANS      UBIN      STATIC INIT(0);
DCL  NUMPGS        UBIN      STATIC INIT(1);
 
 
DCL  ASYNCNO       UBIN      STATIC INIT(0);  /* MAXACTIVE   */
DCL  ASYNCFORMNO   UBIN      STATIC INIT(0);  /* FORMS USERS */
DCL  ASYNC6EDNO    UBIN      STATIC INIT(0);  /* 6EDIT USERS */
DCL  ASYNCFPNO     UBIN      STATIC INIT(0);  /* MSCFPRG     */
DCL  ASYNCALNO     UBIN      STATIC INIT(0);  /* PROECONFIG  */
 
 
DCL  B3270CNO      UBIN      STATIC INIT(0);  /* # 3270 CONTROLLERS */
DCL  B3270DNO      UBIN      STATIC INIT(0);  /* # DEVICES     */
DCL  B3270NO       UBIN      STATIC INIT(0);  /* # 3270 AND 7700 */
DCL  B3270FORMNO   UBIN      STATIC INIT(0);  /* # FORMS USERS   */
DCL  B3270ALNO     UBIN      STATIC INIT(0);  /* # PRECONFIG     */
 
/* ----------------------------------------------------
               working variables    what a concept
   ----------------------------------------------------- */
 
DCL  RBTI1          UBIN      STATIC INIT(0);
DCL  RBTI2          UBIN      STATIC INIT(0);
DCL  RBTI3          UBIN      STATIC INIT(0);
DCL  RBTI4          UBIN      STATIC INIT(0);
DCL  RBTI5          UBIN      STATIC INIT(0);
DCL  BRBTALNO       UBIN      STATIC INIT(0);  /*LINE 1610      */
DCL  HDLC1          UBIN      STATIC INIT(0);
DCL  HDLC2          UBIN      STATIC INIT(0);
DCL  HDLC3          UBIN      STATIC INIT(0);
DCL  HDLC4          UBIN      STATIC INIT(0);
DCL  HDLC5          UBIN      STATIC INIT(0);
DCL  HDLC6          UBIN      STATIC INIT(0);
DCL  HDLC7          UBIN      STATIC INIT(0);
DCL  HDLC8          UBIN      STATIC INIT(0);
DCL  X9             UBIN      STATIC INIT(0);
 
DCL  URI1           UBIN      STATIC INIT(0);
DCL  ASYNCTERMMEM   UBIN      STATIC INIT(4);
DCL  FORMMEM        UBIN      STATIC INIT(8);
DCL  X6EMEM         UBIN      STATIC INIT(4);
DCL  TOT_MEMUSG     UBIN      STATIC INIT(302);
DCL  FEP_BMUSG      UBIN      STATIC INIT(302);
DCL  DELTA_BMUSG    UBIN      STATIC INIT(0);
DCL SHAREDREL_ISMEM UBIN      STATIC INIT(397);
DCL SHAREDSYS_ISMEM UBIN      STATIC INIT(341);
DCL SHAREDFPL_ISMEM UBIN      STATIC INIT(151);
DCL NODEADMN_BMUSG  UBIN      STATIC INIT(97);
DCL NODEADMN_AUTO   UBIN      STATIC INIT(8);
DCL NODEADMN_SCQ    UBIN      STATIC INIT(4200);
DCL NODEADMN_RCQ    UBIN      STATIC INIT(4200);
DCL NODEADMN_HCQ    UBIN      STATIC INIT(34);
DCL NODEADMN_MEM    UBIN      STATIC INIT(50);
DCL ANLZ_FPRG_BMUSG UBIN      STATIC INIT(14);
DCL ANLZ_FPRG_AUTO  UBIN      STATIC INIT(1);
DCL AFORMMEM        UBIN      STATIC INIT(0);
DCL BFORMMEM        UBIN      STATIC INIT(0);
DCL HFORMMEM        UBIN      STATIC INIT(0);
DCL PIGLET_BMUSG    UBIN      STATIC INIT(0);
DCL PIGLET_AUTO     UBIN      STATIC INIT(0);
DCL PIGLET_IOMEM    UBIN      STATIC INIT(0);
DCL ASYNC_MEM       UBIN      STATIC INIT(0);
 
/* ------------------------------------------
         some initial calculations
   ------------------------------------------ */
 
  NODEADMN_BMUSG=%N_UHJIT+%N_TSTKU+%N_DS1+%N_ROS+%N_IS1+%N_IS2;
  ANLZ_FPRG_BMUSG=%Z_TSTKU+%Z_ROS+%Z_IS1+%Z_UHJIT;
  ASYNC_BMUSG=%UHJIT+%TSTKU+2*%HHJIT+%DS1+%ROS+%IS1+%IS2;
  BISYNC_BMUSG=3*%B_HHJIT+%B_TSTKU+%B_DS1+%B_ROS+%B_IS1+%B_IS2+%B_UHJIT;
  HDLCX25_BMUSG=2*%H_HHJIT+%H_UHJIT+%H_TSTKU+%H_DS1+%H_ROS+%H_IS1+%H_IS2;
  UNITREC_BMUSG=%U_HHJIT+%U_DS1+%U_UHJIT+%U_TSTKU+%U_ROS+%U_IS1+%U_IS2;
 
  NODEADMN_HQ = (NODEADMN_SCQ + NODEADMN_RCQ + 511)/256;
  TOT_MEMUSG = TOTMEMUSG+NODEADMN_BMUSG+NODEADMN_AUTO+NODEADMN_HCQ+NODEADMN_MEM ;
  TOT_MEMUSG = TOTMEMUSG+ANLZ_FPRG_BMUSG+ANLZ_FPRG_AUTO;
 
/* ------------------------------------------
         read input file of parse nodes
   ------------------------------------------  */
 
CALL M$OPEN(CON_DATA);
 
DO WHILE ~QUIT;
  CALL XUG$INIT(XUG$GETCMD_, XUG$INIT_) ;
  CALL XUG$GETCMD(XUG$GETCMD_);
 
    OUT$ = XUG$GETCMD_.OUT$ ;
    LAST_CMD = OUT$->OUT$BLK.CODE ;
    IF OUT$->OUT$BLK.NSUBLKS >= 1 THEN
         SUBZERO$ = OUT$->OUT$BLK.SUBLK$(0);
 
    DO CASE (OUT$->OUT$BLK.CODE);
 
 
      CASE (%FEPSIZE) ;
         SIZE_FEPMEM = SUBZERO$->OUT$SYM.TEXT;
         DO SELECT (SIZE_FEPMEM);
           SELECT('S');
              ASYNCTERMMEM = 2;
              FORMMEM      = 4;
              X6EMEM       = 2;
 
           SELECT('M');
              ASYNCTERMMEM = 4;
              FORMMEM      = 8;
              X6EMEM       = 4;
 
           SELECT('L');
              ASYNCTERMMEM = 6;
              FORMMEM      = 12;
              X6EMEM       = 6;
         END;  /*  SELECT FEPMEM  */
 
      CASE (%ASYNC) ;
         DO I = 0 TO OUT$->OUT$BLK.NSUBLKS-1;
          XPTR = OUT$->OUT$BLK.SUBLK$(I)->OUT$BLK.SUBLK$(0);
          DO CASE(OUT$->OUT$BLK.SUBLK$(I)->OUT$SYM.CODE);
 
            CASE(%MAXACTIVE);
              CALL CHARBIN(ASYNCNO, XPTR->OUT$SYM.TEXT);
              IF ASYNCNO > 0 THEN DO;
                /*ASYNC BASIC MEM USAGE               */
                /*UHJIT,TSTKU,HHJIT,HHJIT,DS1,ROS,IS1,IS2  */
                /*   2     6    1      1    1   5  7   52   */
 
                ASYNC_BMUSG = 75;
                ASYNC_AUTO = 8;
                ASYNC_SCQ = 4200;
                ASYNC_RCQ = 16384;
                ASYNC_HCQ=(ASYNC_SCQ+ASYNC_RCQ+511)/256;
                TOT_MEMUSG=TOT_MEMUSG+ASYNC_BMUSG+ASYNC_AUTO+ASYNC_HCQ+ASYNC_MEM
            CASE(%FORMU);
              CALL CHARBIN(ASYNCFORMNO, XPTR->OUT$SYM.TEXT);
 
            CASE(%X6EUSER);
              CALL CHARBIN(ASYNC6EDNO, XPTR->OUT$SYM.TEXT);
 
            CASE(%MSCFPRG);
              CALL CHARBIN(ASYNCFPNO, XPTR->OUT$SYM.TEXT);
 
            CASE(%PRECON);
              CALL CHARBIN(ASYNCALNO, XPTR->OUT$SYM.TEXT);
 
            CASE(%SIZE_OPT);
              A_SIZE = XPTR->OUT$SYM.TEXT;
              DO SELECT (A_SIZE);
                SELECT('S');
                   ASYNCTERMMEM = 2;
                   AFORMMEM     = 4;
                   X6EMEM       = 2;
 
                SELECT('M');
                   ASYNCTERMMEM = 4;
                   AFORMMEM     = 8;
                   X6EMEM       = 4;
 
                SELECT('L');
                   ASYNCTERMMEM = 6;
                   AFORMMEM     = 12;
                   X6EMEM       = 6;
              END;  /*  SELECT  */
              SELBYHND = %TRUE;
 
            END;    /* CASE*/
         END;   /*  DO LOOP  ASYNC */
 
      CASE (%BISYNC) ;
         DO I = 0 TO OUT$->OUT$BLK.NSUBLKS-1;
          XPTR = OUT$->OUT$BLK.SUBLK$(I)->OUT$BLK.SUBLK$(0);
          DO CASE(OUT$->OUT$BLK.SUBLK$(I)->OUT$SYM.CODE);
 
            CASE(%MAXACTIVE);
              CALL CHARBIN(B3270NO, XPTR->OUT$SYM.TEXT);
            CASE(%FORMU);
              CALL CHARBIN(B3270FORMNO, XPTR->OUT$SYM.TEXT);
 
            CASE(%CONT);
              CALL CHARBIN(B3270CNO, XPTR->OUT$SYM.TEXT);
 
            CASE(%DEV);
              CALL CHARBIN(B3270DNO, XPTR->OUT$SYM.TEXT);
 
            CASE(%PRECON);
              CALL CHARBIN(B3270ALNO, XPTR->OUT$SYM.TEXT);
            CASE (%SIZE_OPT) ;
              B_SIZE = XPTR->OUT$SYM.TEXT;
              DO SELECT(B_SIZE);
                SELECT('S');
                   BFORMMEM = 4;
                SELECT('M');
                   BFORMMEM = 8;
                SELECT('L');
                   BFORMMEM = 4;
              END;   /*  SELECT B_SIZE  */
 
 
            END;   /* BISYNC CASE */
          END;     /* DO LOOP   BISYNC */
 
 
      CASE (%FEP) ;
         CALL CHARBIN(FEP_NUM, SUBZERO$->OUT$SYM.TEXT);
 
      CASE (%DELTA) ;
         DELTA = SUBZERO$->OUT$SYM.TEXT;
         DELTA_BMUSG = 85;
         TOT_MEMUSG = TOT_MEMUSG + DELTA_BMUSG;
      CASE (%LOCAL) ;
         LOCAL = SUBZERO$->OUT$SYM.TEXT;
 
      CASE (%MAXRBTS) ;
         CALL CHARBIN(MAXRBTS, SUBZERO$->OUT$SYM.TEXT);
 
      CASE (%RBT) ;
         DO I = 0 TO OUT$->OUT$BLK.NSUBLKS-1;
          XPTR = OUT$->OUT$BLK.SUBLK$(I)->OUT$BLK.SUBLK$(0);
          DO CASE(OUT$->OUT$BLK.SUBLK$(I)->OUT$SYM.CODE);
 
            CASE (%RBT_NAME);
              RBT_NAME = XPTR->OUT$SYM.TEXT;
 
            CASE (%INDEV) ;
              CALL CHARBIN(RBTI3, XPTR->OUT$SYM.TEXT);
              RBT_INDEV = RBT_INDEV + RBTI3;
            CASE (%OUTDEV) ;
              CALL CHARBIN(RBTI4, XPTR->OUT$SYM.TEXT);
              RBT_OUTDEV = RBT_OUTDEV + RBTI4;
            CASE (%BLKBYTES) ;
              CALL CHARBIN(RBTI1, XPTR->OUT$SYM.TEXT);
              RBT_BLKBYTES = RBT_BLKBYTES + RBTI1;
            CASE (%DEVICES);
              CALL CHARBIN(RBTI2, XPTR->OUT$SYM.TEXT);
              RBT_DEVICES = RBT_DEVICES + RBTI2;
            CASE (%BLOCK) ;
              CALL CHARBIN(RBTI5, XPTR->OUT$SYM.TEXT);
              RBT_BLOCK = RBT_BLOCK + RBTI5;
            CASE (%AUTOLOG) ;
              RBT_AUTOLOG = XPTR->OUT$SYM.TEXT;
              IF RBT_AUTOLOG = 'Y' THEN BRBTALNO = BRBTALNO + RBTI2;
            END;   /* CASE */
          END;     /*DO  RBT  */
 
      CASE (%COUPLER) ;
         DO I = 0 TO OUT$->OUT$BLK.NSUBLKS-1;
          XPTR = OUT$->OUT$BLK.SUBLK$(I)->OUT$BLK.SUBLK$(0);
          DO CASE(OUT$->OUT$BLK.SUBLK$(I)->OUT$SYM.CODE);
 
            CASE (%SEND) ;
              CALL CHARBIN(CPLRSND, XPTR->OUT$SYM.TEXT);
 
            CASE (%RCV) ;
              CALL CHARBIN(CPLRRCV, XPTR->OUT$SYM.TEXT);
 
            END;   /*  CASE  */
          END;     /* DO     */
 
      CASE (%MAXHDLC) ;
         CALL CHARBIN(LINKNO, SUBZERO$->OUT$SYM.TEXT);
 
      CASE (%HDLC);
         DO I = 0 TO OUT$->OUT$BLK.NSUBLKS-1;
          XPTR = OUT$->OUT$BLK.SUBLK$(I)->OUT$BLK.SUBLK$(0);
          DO CASE(OUT$->OUT$BLK.SUBLK$(I)->OUT$SYM.CODE);
 
            CASE (%HDLC_NAME) ;
              HDLC_NAME = XPTR->OUT$SYM.TEXT;
 
            CASE (%VC) ;
              CALL CHARBIN(HDLC1, XPTR->OUT$SYM.TEXT);
              VC = VC + HDLC1;
            CASE (%SW) ;
              CALL CHARBIN(HDLC2, XPTR->OUT$SYM.TEXT);
              SW = SW + HDLC2;
            CASE (%FRAME) ;
              CALL CHARBIN(HDLC3, XPTR->OUT$SYM.TEXT);
              FRAME = FRAME + HDLC3;
            CASE (%X28DFL) ;
              CALL CHARBIN(HDLC8, XPTR->OUT$SYM.TEXT);
              X28_DFL = X28_DFL + HDLC8;
            CASE (%CIRCUITS) ;
              CALL CHARBIN(HDLC4, XPTR->OUT$SYM.TEXT);
              CIRCUITS = CIRCUITS + HDLC4;
            CASE (%X6EUSER) ;
              CALL CHARBIN(HDLC5, XPTR->OUT$SYM.TEXT);
              HDLC_6EUSERS = HDLC_6EUSERS + HDLC5;
            CASE (%FORMU) ;
              CALL CHARBIN(HDLC6, XPTR->OUT$SYM.TEXT);
              HDLC_FORMU = HDLC_FORMU + HDLC6;
            CASE (%MSCFPRG) ;
              CALL CHARBIN(HDLC7, XPTR->OUT$SYM.TEXT);
              HDLC_MSCFPRG = HDLC_MSCFPRG + HDLC7;
            CASE (%PRECON);
              CALL CHARBIN(X9, XPTR->OUT$SYM.TEXT);
              HDLCALNO = HDLCALNO + X9;
            CASE (%SIZE_OPT) ;
              HDLC_SIZE = XPTR->OUT$SYM.TEXT;
              DO SELECT(HDLC_SIZE);
                SELECT('S');
                   HFORMMEM = 4;
                SELECT('M');
                   HFORMMEM = 8;
                SELECT('L');
                   HFORMMEM = 12;
              END;  /*  SELECT HDLC_SIZE  */
 
            END;  /*  CASE   */
          END;    /*   DO    */
 
 
      CASE (%RFEPS) ;
         CALL CHARBIN(RFEPS, SUBZERO$->OUT$SYM.TEXT);
 
      CASE (%MAXUREC) ;
         CALL CHARBIN(MAXUNIT_RECS, SUBZERO$->OUT$SYM.TEXT);
 
      CASE (%UNITREC);
         IF OUT$->OUT$BLK.NSUBLKS >= 2 THEN
           SUBONE$=OUT$->OUT$BLK.SUBLK$(1)->OUT$BLK.SUBLK$(0);
         ELSE DO;
           RBUFFER = ' ';
           RBUFFER = ' Error in unitrec case ';
           CALL M$WRITE(BPRINT);
           CALL M$EXIT;
           END;   /*  ELSE DO  */
 
         URNAME = SUBZERO$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT;
         CALL CHARBIN(URI1, SUBONE$->OUT$SYM.TEXT);
              URBLOCK = URBLOCK + URI1;
      CASE (%DISK) ;
         DISK = SUBZERO$->OUT$SYM.TEXT;
         PIGLET_BMUSG = 18;
         PIGLET_AUTO = 1;
         PIGLET_IOMEM = 30;
         TOT_MEMUSG= TOT_MEMUSG+PIGLET_BMUSG+PIGLET_AUTO+PIGLET_IOMEM;
 
      CASE (%PHYCHANS) ;
         CALL CHARBIN(PHYCHANS, SUBZERO$->OUT$SYM.TEXT);
 
      CASE (%NUMPGS) ;
         CALL CHARBIN(NUMPGS, SUBZERO$->OUT$SYM.TEXT);
 
      CASE (%END_) ;
         QUIT = '1'B;
 
    END;    /*  CASE, DAMMIT     */
  END;      /* WHILE ~QUIT        */
 
/* -----------------------------------------------------
         computing starts here....
   ----------------------------------------------------- */
 
ASYNC_MEM = ASYNCTERMMEM *ASYNCNO + X6EMEM * ASYNC6EDNO;
IF SELBYHND THEN
    ASYNC_MEM = ASYNC_MEM +AFORMMEM * ASYNCFRMNO;
  ELSE
    ASYNC_MEM = AYSNC_MEM + FORMMEM * ASYNCFRMNO;
 
 
   RBUFFER = ' ';
   RBUFFER = 'we have reached the end.';
   CALL M$WRITE(BPRINT);
 CALL M$EXIT;
 
END FEPCON;
