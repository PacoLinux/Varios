VERSION A02

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:1    
        1        1        /*M*    XSL$SOCKET4             BSD4.3 Socket Library for CP-6, part 4  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=4,DCI=8,DTI=0,ENI=4,ECI=4,CSI=4,DIN=4,SDI=0 */
        8        8
        9        9        /*F* NAME: gethostbyaddr() and XSL$GETHOSTBYADDR  --  Look Up Host by Address
       10       10        ..::IT "Purpose:"
       11       11        .INL +4
       12       12        Searches the etc:hosts file for an entry whose address matches that specified.
       13       13        ..::IT "C Usage:"
       14       14        .INL 4
       15       15        .FIF
       16       16        ptr = gethostbyaddr( addr, len, type );
       17       17        ..::IT "PL6 Usage:"
       18       18        .INL 4
       19       19        .FIF
       20       20        CALL XSL$GETHOSTBYADDR( ptr, addr, len, type );
       21       21        ..::IT "Parameters:"
       22       22        .INL 4
       23       23        .FIF
       24       24        addr        character array containing address
       25       25
       26       26        len         integer number of significant characters in addr
       27       27
       28       28        type        integer address type
       29       29        ..::IT "Result:"
       30       30        .INL 4
       31       31        .FIF
       32       32        ptr         pointer to static buffer containing a host entry
       33       33        ..::IT "Description:"
       34       34        The gethostbyaddr() function sequentially searches the etc:hosts file for the
       35       35        first entry whose address matches the specified address.  This entry is
       36       36        parsed into a hostent structure in a static buffer within the socket library,
       37       37        and a pointer to this buffer is returned.
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:2    
       38       38        .SPB
       39       39        The addr parameter specifies an application-defined buffer containing the
       40       40        address of the host to be looked up.
       41       41        .SPB
       42       42        The len parameter specifies the number of significant characters in addr.
       43       43        .SPB
       44       44        The type parameter specifies the address format.  Equates for the possible
       45       45        values can be found in <xsl_socket.h> or XSL_SOCKET_E.  Only the "DARPA Internet"
       46       46        address format is currently supported; it is selected by coding AF_INET or
       47       47        %XSL_AF_INET in C or PL6 source, respectively.
       48       48        .SPB
       49       49        If the gethostbyaddr() function is successful, the ptr result contains a
       50       50        pointer to a static buffer within the socket library containing a hostent
       51       51        structure for the matching entry.
       52       52        .SPB
       53       53        If the gethostbyaddr() function is unsuccessful, the ptr result contains a
       54       54        NULL pointer.
       55       55        ..::IT "Errors:"
       56       56        A NULL pointer is returned if any error occurs while reading the
       57       57        etc:hosts file, including reaching the end of the file without matching
       58       58        the address.
       59       59        */
       60       60        /*F* NAME: gethostbyname() and XSL$GETHOSTBYNAME  --  Look Up Host by Name
       61       61        ..::IT "Purpose:"
       62       62        .INL +4
       63       63        Searches the etc:hosts file for an entry whose name matches that specified.
       64       64        ..::IT "C Usage:"
       65       65        .INL 4
       66       66        .FIF
       67       67        ptr = gethostbyname( name );
       68       68        ..::IT "PL6 Usage:"
       69       69        .INL 4
       70       70        .FIF
       71       71        CALL XSL$GETHOSTBYNAME( ptr, name );
       72       72        ..::IT "Parameters:"
       73       73        .INL 4
       74       74        .FIF
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:3    
       75       75        name        character array containing a host name to look up
       76       76        ..::IT "Result:"
       77       77        .INL 4
       78       78        .FIF
       79       79        ptr         pointer to static buffer containing a host entry
       80       80        ..::IT "Description:"
       81       81        The gethostbyname() function sequentially searches the etc:hosts file for the
       82       82        first entry whose name matches the specified name.  This entry is
       83       83        parsed into a hostent structure in a static buffer within the socket library,
       84       84        and a pointer to this buffer is returned.
       85       85        .SPB
       86       86        The name parameter specifies an application-defined buffer containing the
       87       87        name of the host to be looked up.
       88       88        .SPB
       89       89        If the gethostbyname() function is successful, the ptr result contains a
       90       90        pointer to a static buffer within the socket library containing a hostent
       91       91        structure for the matching entry.
       92       92        .SPB
       93       93        If the gethostbyname() function is unsuccessful, the ptr result contains a
       94       94        NULL pointer.
       95       95        ..::IT "Errors:"
       96       96        A NULL pointer is returned if any error occurs while reading the
       97       97        etc:hosts file, including reaching the end of the file without matching
       98       98        the name.
       99       99        */
      100      100        /*F* NAME: gethostent() and XSL$GETHOSTENT  --  Get Host Entry
      101      101        ..::IT "Purpose:"
      102      102        .INL +4
      103      103        Reads the next entry of the etc:hosts file into an internal buffer.
      104      104        ..::IT "C Usage:"
      105      105        .INL 4
      106      106        .FIF
      107      107        ptr = gethostent();
      108      108        ..::IT "PL6 Usage:"
      109      109        .INL 4
      110      110        .FIF
      111      111        CALL XSL$GETHOSTENT( ptr );
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:4    
      112      112        ..::IT "Parameters:"
      113      113        .INL 4
      114      114        .FIF
      115      115        (none)
      116      116        ..::IT "Result:"
      117      117        .INL 4
      118      118        .FIF
      119      119        ptr         pointer to static buffer containing a host entry
      120      120        ..::IT "Description:"
      121      121        The gethostent() function opens the etc:hosts file, if it is not already open,
      122      122        and reads the next entry and parses it into a hostent structure in a
      123      123        static buffer within the socket library.  A pointer to this buffer is
      124      124        returned.
      125      125        .SPB
      126      126        If the gethostent() function is successful, the ptr result contains a
      127      127        pointer to a static buffer within the socket library containing a hostent
      128      128        structure for the entry read.
      129      129        .SPB
      130      130        If the gethostent() function is unsuccessful, the ptr result contains a
      131      131        NULL pointer.
      132      132        ..::IT "Errors:"
      133      133        A NULL pointer is returned if any error occurs while reading the
      134      134        etc:hosts file, including reaching the end of the file.
      135      135        */
      136      136        /*F* NAME: sethostent() and XSL$SETHOSTENT  --  Set Host Entry
      137      137        ..::IT "Purpose:"
      138      138        .INL +4
      139      139        Opens or positions the etc:hosts file and initializes a stay-open flag.
      140      140        ..::IT "C Usage:"
      141      141        .INL 4
      142      142        .FIF
      143      143        ptr = sethostent( flag );
      144      144        ..::IT "PL6 Usage:"
      145      145        .INL 4
      146      146        .FIF
      147      147        CALL XSL$SETHOSTENT( ptr, flag );
      148      148        ..::IT "Parameters:"
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:5    
      149      149        .INL 4
      150      150        .FIF
      151      151        flag        integer flag
      152      152        ..::IT "Result:"
      153      153        .INL 4
      154      154        .FIF
      155      155        ptr         pointer to arbitrary location
      156      156        ..::IT "Description:"
      157      157        The sethostent() function opens the etc:hosts file, if it is not already open,
      158      158        and positions it to the beginning.  A flag internal to the socket library
      159      159        is initialized from the flag parameter.
      160      160        .SPB
      161      161        The flag parameter specifies whether the etc:hosts file is to remain open
      162      162        after use by any of the hosts file manipulation functions.  If the flag
      163      163        is nonzero the file will be kept open.
      164      164        .SPB
      165      165        If the sethostent() function is successful, the ptr result contains an
      166      166        arbitrary non-NULL value.
      167      167        .SPB
      168      168        If the sethostent() function is unsuccessful, the ptr result contains a
      169      169        NULL pointer.
      170      170        ..::IT "Errors:"
      171      171        A NULL pointer is returned if any error occurs while opening or positioning
      172      172        the etc:hosts file.
      173      173        */
      174      174        /*F* NAME: endhostent() and XSL$ENDHOSTENT  --  End Host Entry
      175      175        ..::IT "Purpose:"
      176      176        .INL +4
      177      177        Closes the etc:hosts file.
      178      178        ..::IT "C Usage:"
      179      179        .INL 4
      180      180        .FIF
      181      181        ptr = endhostent();
      182      182        ..::IT "PL6 Usage:"
      183      183        .INL 4
      184      184        .FIF
      185      185        CALL XSL$ENDHOSTENT( ptr );
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:6    
      186      186        ..::IT "Parameters:"
      187      187        .INL 4
      188      188        .FIF
      189      189        (none)
      190      190        ..::IT "Result:"
      191      191        .INL 4
      192      192        .FIF
      193      193        ptr         pointer to arbitrary location
      194      194        ..::IT "Description:"
      195      195        The endhostent() function closes the etc:hosts file.
      196      196        .SPB
      197      197        If the endhostent() function is successful, the ptr result contains an
      198      198        arbitrary non-NULL value.
      199      199        .SPB
      200      200        If the endhostent() function is unsuccessful, the ptr result contains a
      201      201        NULL pointer.
      202      202        ..::IT "Errors:"
      203      203        A NULL pointer is returned if any error occurs while closing
      204      204        the hosts file.
      205      205        */
      206      206        /*F* NAME: getnetbyaddr() and XSL$GETNETBYADDR  --  Look Up Network by Address
      207      207        ..::IT "Purpose:"
      208      208        .INL +4
      209      209        Searches the etc:networks file for an entry whose address matches that specified.
      210      210        ..::IT "C Usage:"
      211      211        .INL 4
      212      212        .FIF
      213      213        ptr = getnetbyaddr( netnum, type );
      214      214        ..::IT "PL6 Usage:"
      215      215        .INL 4
      216      216        .FIF
      217      217        CALL XSL$GETNETBYADDR( ptr, netnum, type );
      218      218        ..::IT "Parameters:"
      219      219        .INL 4
      220      220        .FIF
      221      221        netnum      integer network number
      222      222
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:7    
      223      223        type        integer address type
      224      224        ..::IT "Result:"
      225      225        .INL 4
      226      226        .FIF
      227      227        ptr         pointer to static buffer containing a network entry
      228      228        ..::IT "Description:"
      229      229        The getnetbyaddr() function sequentially searches the etc:networks file for the
      230      230        first entry whose network number matches the specified network number.  This
      231      231        entry is parsed into a netent structure in a static buffer within the
      232      232        socket library, and a pointer to this buffer is returned.
      233      233        .SPB
      234      234        The netnum parameter specifies the network number of interest.
      235      235        .SPB
      236      236        The type parameter specifies the address format.  Equates for the possible
      237      237        values can be found in <xsl_socket.h> or XSL_SOCKET_E.  Only the "DARPA Internet"
      238      238        address format is currently supported; it is selected by coding AF_INET or
      239      239        %XSL_AF_INET in C or PL6 source, respectively.
      240      240        .SPB
      241      241        If the getnetbyaddr() function is successful, the ptr result contains a
      242      242        pointer to a static buffer within the socket library containing a netent
      243      243        structure for the matching entry.
      244      244        .SPB
      245      245        If the getnetbyaddr() function is unsuccessful, the ptr result contains a
      246      246        NULL pointer.
      247      247        ..::IT "Errors:"
      248      248        A NULL pointer is returned if any error occurs while reading the
      249      249        etc:networks file, including reaching the end of the file without matching
      250      250        the network number.
      251      251        */
      252      252        /*F* NAME: getnetbyname() and XSL$GETNETBYNAME  --  Look Up Network by Name
      253      253        ..::IT "Purpose:"
      254      254        .INL +4
      255      255        Searches the etc:networks file for an entry whose name matches that specified.
      256      256        ..::IT "C Usage:"
      257      257        .INL 4
      258      258        .FIF
      259      259        ptr = getnetbyname( name );
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:8    
      260      260        ..::IT "PL6 Usage:"
      261      261        .INL 4
      262      262        .FIF
      263      263        CALL XSL$GETNETBYNAME( ptr, name );
      264      264        ..::IT "Parameters:"
      265      265        .INL 4
      266      266        .FIF
      267      267        name        character array containing a network name to look up
      268      268        ..::IT "Result:"
      269      269        .INL 4
      270      270        .FIF
      271      271        ptr         pointer to static buffer containing a network entry
      272      272        ..::IT "Description:"
      273      273        The getnetbyname() function sequentially searches the etc:networks file for the
      274      274        first entry whose name matches the specified name.  This entry is
      275      275        parsed into a netent structure in a static buffer within the socket library,
      276      276        and a pointer to this buffer is returned.
      277      277        .SPB
      278      278        The name parameter specifies an application-defined buffer containing the
      279      279        name of the network to be looked up.
      280      280        .SPB
      281      281        If the getnetbyname() function is successful, the ptr result contains a
      282      282        pointer to a static buffer within the socket library containing a netent
      283      283        structure for the matching entry.
      284      284        .SPB
      285      285        If the getnetbyname() function is unsuccessful, the ptr result contains a
      286      286        NULL pointer.
      287      287        ..::IT "Errors:"
      288      288        A NULL pointer is returned if any error occurs while reading the
      289      289        etc:networks file, including reaching the end of the file without matching
      290      290        the name.
      291      291        */
      292      292        /*F* NAME: getnetent() and XSL$GETNETENT  --  Get Network Entry
      293      293        ..::IT "Purpose:"
      294      294        .INL +4
      295      295        Reads the next entry of the etc:networks file into an internal buffer.
      296      296        ..::IT "C Usage:"
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:9    
      297      297        .INL 4
      298      298        .FIF
      299      299        ptr = getnetent();
      300      300        ..::IT "PL6 Usage:"
      301      301        .INL 4
      302      302        .FIF
      303      303        CALL XSL$GETNETENT( ptr );
      304      304        ..::IT "Parameters:"
      305      305        .INL 4
      306      306        .FIF
      307      307        (none)
      308      308        ..::IT "Result:"
      309      309        .INL 4
      310      310        .FIF
      311      311        ptr         pointer to static buffer containing a network entry
      312      312        ..::IT "Description:"
      313      313        The getnetent() function opens the etc:networks file, if it is not already open,
      314      314        and reads the next entry and parses it into a netent structure in a
      315      315        static buffer within the socket library.  A pointer to this buffer is
      316      316        returned.
      317      317        .SPB
      318      318        If the getnetent() function is successful, the ptr result contains a
      319      319        pointer to a static buffer within the socket library containing a netent
      320      320        structure for the entry read.
      321      321        .SPB
      322      322        If the getnetent() function is unsuccessful, the ptr result contains a
      323      323        NULL pointer.
      324      324        ..::IT "Errors:"
      325      325        A NULL pointer is returned if any error occurs while reading the
      326      326        etc:networks file, including reaching the end of the file.
      327      327        */
      328      328        /*F* NAME: setnetent() and XSL$SETNETENT  --  Set Network Entry
      329      329        ..::IT "Purpose:"
      330      330        .INL +4
      331      331        Opens or positions the etc:networks file and initializes a stay-open flag.
      332      332        ..::IT "C Usage:"
      333      333        .INL 4
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:10   
      334      334        .FIF
      335      335        ptr = setnetent( flag );
      336      336        ..::IT "PL6 Usage:"
      337      337        .INL 4
      338      338        .FIF
      339      339        CALL XSL$SETNETENT( ptr, flag );
      340      340        ..::IT "Parameters:"
      341      341        .INL 4
      342      342        .FIF
      343      343        flag        integer flag
      344      344        ..::IT "Result:"
      345      345        .INL 4
      346      346        .FIF
      347      347        ptr         pointer to arbitrary location
      348      348        ..::IT "Description:"
      349      349        The setnetent() function opens the etc:networks file, if it is not already open,
      350      350        and positions it to the beginning.  A flag internal to the socket library
      351      351        is initialized from the flag parameter.
      352      352        .SPB
      353      353        The flag parameter specifies whether the etc:networks file is to remain open
      354      354        after use by any of the networks file manipulation functions.  If the flag
      355      355        is nonzero the file will be kept open.
      356      356        .SPB
      357      357        If the setnetent() function is successful, the ptr result contains an
      358      358        arbitrary non-NULL value.
      359      359        .SPB
      360      360        If the setnetent() function is unsuccessful, the ptr result contains a
      361      361        NULL pointer.
      362      362        ..::IT "Errors:"
      363      363        A NULL pointer is returned if any error occurs while opening or positioning
      364      364        the etc:networks file.
      365      365        */
      366      366        /*F* NAME: endnetent() and XSL$ENDNETENT  --  End Network Entry
      367      367        ..::IT "Purpose:"
      368      368        .INL +4
      369      369        Closes the etc:networks file.
      370      370        ..::IT "C Usage:"
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:11   
      371      371        .INL 4
      372      372        .FIF
      373      373        ptr = endnetent();
      374      374        ..::IT "PL6 Usage:"
      375      375        .INL 4
      376      376        .FIF
      377      377        CALL XSL$ENDNETENT( ptr );
      378      378        ..::IT "Parameters:"
      379      379        .INL 4
      380      380        .FIF
      381      381        (none)
      382      382        ..::IT "Result:"
      383      383        .INL 4
      384      384        .FIF
      385      385        ptr         pointer to arbitrary location
      386      386        ..::IT "Description:"
      387      387        The endnetent() function closes the etc:networks file.
      388      388        .SPB
      389      389        If the endnetent() function is successful, the ptr result contains an
      390      390        arbitrary non-NULL value.
      391      391        .SPB
      392      392        If the endnetent() function is unsuccessful, the ptr result contains a
      393      393        NULL pointer.
      394      394        ..::IT "Errors:"
      395      395        A NULL pointer is returned if any error occurs while closing
      396      396        the etc:networks file.
      397      397        */
      398      398        /*F* NAME: getprotobyname() and XSL$GETPROTOBYNAME  --  Look Up Protocol by Name
      399      399        ..::IT "Purpose:"
      400      400        .INL +4
      401      401        Searches the etc:protocols file for an entry whose name matches that specified.
      402      402        ..::IT "C Usage:"
      403      403        .INL 4
      404      404        .FIF
      405      405        ptr = getprotobyname( name );
      406      406        ..::IT "PL6 Usage:"
      407      407        .INL 4
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:12   
      408      408        .FIF
      409      409        CALL XSL$GETPROTOBYNAME( ptr, name );
      410      410        ..::IT "Parameters:"
      411      411        .INL 4
      412      412        .FIF
      413      413        name        character array containing a protocol name to look up
      414      414        ..::IT "Result:"
      415      415        .INL 4
      416      416        .FIF
      417      417        ptr         pointer to static buffer containing a protocol entry
      418      418        ..::IT "Description:"
      419      419        The getprotobyname() function sequentially searches the etc:protocols file for the
      420      420        first entry whose name matches the specified name.  This entry is
      421      421        parsed into a protoent structure in a static buffer within the socket library,
      422      422        and a pointer to this buffer is returned.
      423      423        .SPB
      424      424        The name parameter specifies an application-defined buffer containing the
      425      425        name of the protocol to be looked up.
      426      426        .SPB
      427      427        If the getprotobyname() function is successful, the ptr result contains a
      428      428        pointer to a static buffer within the socket library containing a protoent
      429      429        structure for the matching entry.
      430      430        .SPB
      431      431        If the getprotobyname() function is unsuccessful, the ptr result contains a
      432      432        NULL pointer.
      433      433        ..::IT "Errors:"
      434      434        A NULL pointer is returned if any error occurs while reading the
      435      435        etc:protocols file, including reaching the end of the file without matching
      436      436        the name.
      437      437        */
      438      438        /*F* NAME: getprotobynumber() and XSL$GETPROTOBYNUMBER  --  Look Up Protocol by Numb
               438        er
      439      439        ..::IT "Purpose:"
      440      440        .INL +4
      441      441        Searches the etc:protocols file for an entry whose number matches that specified.
      442      442        ..::IT "C Usage:"
      443      443        .INL 4
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:13   
      444      444        .FIF
      445      445        ptr = getprotobynumber( proto );
      446      446        ..::IT "PL6 Usage:"
      447      447        .INL 4
      448      448        .FIF
      449      449        CALL XSL$GETPROTOBYNUMBER( ptr, proto );
      450      450        ..::IT "Parameters:"
      451      451        .INL 4
      452      452        .FIF
      453      453        proto       integer protocol number
      454      454        ..::IT "Result:"
      455      455        .INL 4
      456      456        .FIF
      457      457        ptr         pointer to static buffer containing a protocol entry
      458      458        ..::IT "Description:"
      459      459        The getprotobynumber() function sequentially searches the etc:protocols file for
      460      460        the first entry whose number matches the specified number.  This entry is
      461      461        parsed into a protoent structure in a static buffer within the socket library,
      462      462        and a pointer to this buffer is returned.
      463      463        .SPB
      464      464        The proto parameter specifies the number of the protocol of interest.
      465      465        .SPB
      466      466        If the getprotobynumber() function is successful, the ptr result contains a
      467      467        pointer to a static buffer within the socket library containing a protoent
      468      468        structure for the matching entry.
      469      469        .SPB
      470      470        If the getprotobyaddr() function is unsuccessful, the ptr result contains a
      471      471        NULL pointer.
      472      472        ..::IT "Errors:"
      473      473        A NULL pointer is returned if any error occurs while reading the
      474      474        etc:protocols file, including reaching the end of the file without matching
      475      475        the address.
      476      476        */
      477      477        /*F* NAME: getprotoent() and XSL$GETPROTOENT  --  Get Protocol Entry
      478      478        ..::IT "Purpose:"
      479      479        .INL +4
      480      480        Reads the next entry of the etc:protocols file into an internal buffer.
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:14   
      481      481        ..::IT "C Usage:"
      482      482        .INL 4
      483      483        .FIF
      484      484        ptr = getprotoent();
      485      485        ..::IT "PL6 Usage:"
      486      486        .INL 4
      487      487        .FIF
      488      488        CALL XSL$GETPROTOENT( ptr );
      489      489        ..::IT "Parameters:"
      490      490        .INL 4
      491      491        .FIF
      492      492        (none)
      493      493        ..::IT "Result:"
      494      494        .INL 4
      495      495        .FIF
      496      496        ptr         pointer to static buffer containing a protocol entry
      497      497        ..::IT "Description:"
      498      498        The getprotoent() function opens the etc:protocols file, if it is not already open,
      499      499        and reads the next entry and parses it into a protoent structure in a
      500      500        static buffer within the socket library.  A pointer to this buffer is
      501      501        returned.
      502      502        .SPB
      503      503        If the getprotoent() function is successful, the ptr result contains a
      504      504        pointer to a static buffer within the socket library containing a protoent
      505      505        structure for the entry read.
      506      506        .SPB
      507      507        If the getprotoent() function is unsuccessful, the ptr result contains a
      508      508        NULL pointer.
      509      509        ..::IT "Errors:"
      510      510        A NULL pointer is returned if any error occurs while reading the
      511      511        etc:protocols file, including reaching the end of the file.
      512      512        */
      513      513        /*F* NAME: setprotoent() and XSL$SETPROTOENT  --  Set Protocol Entry
      514      514        ..::IT "Purpose:"
      515      515        .INL +4
      516      516        Opens or positions the etc:protocols file and initializes a stay-open flag.
      517      517        ..::IT "C Usage:"
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:15   
      518      518        .INL 4
      519      519        .FIF
      520      520        ptr = setprotoent( flag );
      521      521        ..::IT "PL6 Usage:"
      522      522        .INL 4
      523      523        .FIF
      524      524        CALL XSL$SETPROTOENT( ptr, flag );
      525      525        ..::IT "Parameters:"
      526      526        .INL 4
      527      527        .FIF
      528      528        flag        integer flag
      529      529        ..::IT "Result:"
      530      530        .INL 4
      531      531        .FIF
      532      532        ptr         pointer to arbitrary location
      533      533        ..::IT "Description:"
      534      534        The setprotoent() function opens the etc:protocols file, if it is not already open,
      535      535        and positions it to the beginning.  A flag internal to the socket library
      536      536        is initialized from the flag parameter.
      537      537        .SPB
      538      538        The flag parameter specifies whether the etc:protocols file is to remain open
      539      539        after use by any of the protocols file manipulation functions.  If the flag
      540      540        is nonzero the file will be kept open.
      541      541        .SPB
      542      542        If the setprotoent() function is successful, the ptr result contains an
      543      543        arbitrary non-NULL value.
      544      544        .SPB
      545      545        If the setprotoent() function is unsuccessful, the ptr result contains a
      546      546        NULL pointer.
      547      547        ..::IT "Errors:"
      548      548        A NULL pointer is returned if any error occurs while opening or positioning
      549      549        the etc:protocols file.
      550      550        */
      551      551        /*F* NAME: endprotoent() and XSL$ENDPROTOENT  --  End Protocol Entry
      552      552        ..::IT "Purpose:"
      553      553        .INL +4
      554      554        Closes the etc:protocols file.
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:16   
      555      555        ..::IT "C Usage:"
      556      556        .INL 4
      557      557        .FIF
      558      558        ptr = endprotoent();
      559      559        ..::IT "PL6 Usage:"
      560      560        .INL 4
      561      561        .FIF
      562      562        CALL XSL$ENDPROTOENT( ptr );
      563      563        ..::IT "Parameters:"
      564      564        .INL 4
      565      565        .FIF
      566      566        (none)
      567      567        ..::IT "Result:"
      568      568        .INL 4
      569      569        .FIF
      570      570        ptr         pointer to arbitrary location
      571      571        ..::IT "Description:"
      572      572        The endprotoent() function closes the etc:protocols file.
      573      573        .SPB
      574      574        If the endprotoent() function is successful, the ptr result contains an
      575      575        arbitrary non-NULL value.
      576      576        .SPB
      577      577        If the endprotoent() function is unsuccessful, the ptr result contains a
      578      578        NULL pointer.
      579      579        ..::IT "Errors:"
      580      580        A NULL pointer is returned if any error occurs while closing
      581      581        the etc:protocols file.
      582      582        */
      583      583        /*F* NAME: getservbyname() and XSL$GETSERVBYNAME  --  Look Up Service by Name
      584      584        ..::IT "Purpose:"
      585      585        .INL +4
      586      586        Searches the etc:services file for an entry whose name matches that specified.
      587      587        ..::IT "C Usage:"
      588      588        .INL 4
      589      589        .FIF
      590      590        ptr = getservbyname( name, proto );
      591      591        ..::IT "PL6 Usage:"
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:17   
      592      592        .INL 4
      593      593        .FIF
      594      594        CALL XSL$GETSERVBYNAME( ptr, name, proto );
      595      595        ..::IT "Parameters:"
      596      596        .INL 4
      597      597        .FIF
      598      598        name        character array containing a service name to look up
      599      599
      600      600        proto       character array containing a protocol name
      601      601        ..::IT "Result:"
      602      602        .INL 4
      603      603        .FIF
      604      604        ptr         pointer to static buffer containing a service entry
      605      605        ..::IT "Description:"
      606      606        The getservbyname() function sequentially searches the etc:services file for the
      607      607        first entry whose name matches the specified name.  This entry is
      608      608        parsed into a servent structure in a static buffer within the socket library,
      609      609        and a pointer to this buffer is returned.  If the optional proto parameter
      610      610        is non-NULL, searches must also match the specified protocol name.
      611      611        .SPB
      612      612        The name parameter specifies an application-defined buffer containing the
      613      613        name of the service to be looked up.
      614      614        .SPB
      615      615        The proto parameter specifies an application-defined buffer containing the
      616      616        name of the protocol. Specifying the proto parameter is optional
      617      617        and can be coded as NULL or zero.
      618      618        .SPB
      619      619        If the getservbyname() function is successful, the ptr result contains a
      620      620        pointer to a static buffer within the socket library containing a servent
      621      621        structure for the matching entry.
      622      622        .SPB
      623      623        If the getservbyname() function is unsuccessful, the ptr result contains a
      624      624        NULL pointer.
      625      625        ..::IT "Errors:"
      626      626        A NULL pointer is returned if any error occurs while reading the
      627      627        etc:services file, including reaching the end of the file without matching
      628      628        the name.
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:18   
      629      629        */
      630      630        /*F* NAME: getservbyport() and XSL$GETSERVBYPORT  --  Look Up Service by Port
      631      631        ..::IT "Purpose:"
      632      632        .INL +4
      633      633        Searches the etc:services file for an entry whose port number matches
      634      634        that specified.
      635      635        ..::IT "C Usage:"
      636      636        .INL 4
      637      637        .FIF
      638      638        ptr = getservbyport( port, proto );
      639      639        ..::IT "PL6 Usage:"
      640      640        .INL 4
      641      641        .FIF
      642      642        CALL XSL$GETSERVBYPORT( ptr, port, proto );
      643      643        ..::IT "Parameters:"
      644      644        .INL 4
      645      645        .FIF
      646      646        port        integer port number
      647      647
      648      648        proto       character array containing protocol name
      649      649        ..::IT "Result:"
      650      650        .INL 4
      651      651        .FIF
      652      652        ptr         pointer to static buffer containing a service entry
      653      653        ..::IT "Description:"
      654      654        The getservbyport() function sequentially searches the etc:services file for
      655      655        the first entry whose port number matches the specified number.  This entry is
      656      656        parsed into a servent structure in a static buffer within the socket library,
      657      657        and a pointer to this buffer is returned.
      658      658        .SPB
      659      659        The port parameter specifies the port number of the service of interest.
      660      660        .SPB
      661      661        The proto parameter specifies an application-defined buffer containing the
      662      662        name of the protocol. Specifying the proto parameter is optional
      663      663        and can be coded as NULL or zero.
      664      664        .SPB
      665      665        If the getservbyport() function is successful, the ptr result contains a
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:19   
      666      666        pointer to a static buffer within the socket library containing a servent
      667      667        structure for the matching entry.
      668      668        .SPB
      669      669        If the getservbyport() function is unsuccessful, the ptr result contains a
      670      670        NULL pointer.
      671      671        ..::IT "Errors:"
      672      672        A NULL pointer is returned if any error occurs while reading the
      673      673        etc:services file, including reaching the end of the file without matching
      674      674        the port number.
      675      675        */
      676      676        /*F* NAME: getservent() and XSL$GETSERVENT  --  Get Service Entry
      677      677        ..::IT "Purpose:"
      678      678        .INL +4
      679      679        Reads the next entry of the etc:services file into an internal buffer.
      680      680        ..::IT "C Usage:"
      681      681        .INL 4
      682      682        .FIF
      683      683        ptr = getservent();
      684      684        ..::IT "PL6 Usage:"
      685      685        .INL 4
      686      686        .FIF
      687      687        CALL XSL$GETSERVENT( ptr );
      688      688        ..::IT "Parameters:"
      689      689        .INL 4
      690      690        .FIF
      691      691        (none)
      692      692        ..::IT "Result:"
      693      693        .INL 4
      694      694        .FIF
      695      695        ptr         pointer to static buffer containing a service entry
      696      696        ..::IT "Description:"
      697      697        The getservent() function opens the etc:services file, if it is not already open,
      698      698        and reads the next entry and parses it into a servent structure in a
      699      699        static buffer within the socket library.  A pointer to this buffer is
      700      700        returned.
      701      701        .SPB
      702      702        If the getservent() function is successful, the ptr result contains a
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:20   
      703      703        pointer to a static buffer within the socket library containing a servent
      704      704        structure for the entry read.
      705      705        .SPB
      706      706        If the getservent() function is unsuccessful, the ptr result contains a
      707      707        NULL pointer.
      708      708        ..::IT "Errors:"
      709      709        A NULL pointer is returned if any error occurs while reading the
      710      710        etc:services file, including reaching the end of the file.
      711      711        */
      712      712        /*F* NAME: setservent() and XSL$SETSERVENT  --  Set Service Entry
      713      713        ..::IT "Purpose:"
      714      714        .INL +4
      715      715        Opens or positions the etc:services file and initializes a stay-open flag.
      716      716        ..::IT "C Usage:"
      717      717        .INL 4
      718      718        .FIF
      719      719        ptr = setservent( flag );
      720      720        ..::IT "PL6 Usage:"
      721      721        .INL 4
      722      722        .FIF
      723      723        CALL XSL$SETSERVENT( ptr, flag );
      724      724        ..::IT "Parameters:"
      725      725        .INL 4
      726      726        .FIF
      727      727        flag        integer flag
      728      728        ..::IT "Result:"
      729      729        .INL 4
      730      730        .FIF
      731      731        ptr         pointer to arbitrary location
      732      732        ..::IT "Description:"
      733      733        The setservent() function opens the etc:services file, if it is not already open,
      734      734        and positions it to the beginning.  A flag internal to the socket library
      735      735        is initialized from the flag parameter.
      736      736        .SPB
      737      737        The flag parameter specifies whether the etc:services file is to remain open
      738      738        after use by any of the services file manipulation functions.  If the flag
      739      739        is nonzero the file will be kept open.
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:21   
      740      740        .SPB
      741      741        If the setservent() function is successful, the ptr result contains an
      742      742        arbitrary non-NULL value.
      743      743        .SPB
      744      744        If the setservent() function is unsuccessful, the ptr result contains a
      745      745        NULL pointer.
      746      746        ..::IT "Errors:"
      747      747        A NULL pointer is returned if any error occurs while opening or positioning
      748      748        the etc:services file.
      749      749        */
      750      750        /*F* NAME: endservent() and XSL$ENDSERVENT  --  End Service Entry
      751      751        ..::IT "Purpose:"
      752      752        .INL +4
      753      753        Closes the etc:services file.
      754      754        ..::IT "C Usage:"
      755      755        .INL 4
      756      756        .FIF
      757      757        ptr = endservent();
      758      758        ..::IT "PL6 Usage:"
      759      759        .INL 4
      760      760        .FIF
      761      761        CALL XSL$ENDSERVENT( ptr );
      762      762        ..::IT "Parameters:"
      763      763        .INL 4
      764      764        .FIF
      765      765        (none)
      766      766        ..::IT "Result:"
      767      767        .INL 4
      768      768        .FIF
      769      769        ptr         pointer to arbitrary location
      770      770        ..::IT "Description:"
      771      771        The endservent() function closes the etc:services file.
      772      772        .SPB
      773      773        If the endservent() function is successful, the ptr result contains an
      774      774        arbitrary non-NULL value.
      775      775        .SPB
      776      776        If the endservent() function is unsuccessful, the ptr result contains a
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:22   
      777      777        NULL pointer.
      778      778        ..::IT "Errors:"
      779      779        A NULL pointer is returned if any error occurs while closing
      780      780        the etc:services file.
      781      781        */
      782      782        /*F* NAME: gethostname() and XSL$GETHOSTNAME  --  Get Current Host Name
      783      783        ..::IT "Purpose:"
      784      784        .INL +4
      785      785        Obtains the name of the host system.
      786      786        ..::IT "C Usage:"
      787      787        .INL 4
      788      788        .FIF
      789      789        status = gethostname( name, namelen );
      790      790        ..::IT "PL6 Usage:"
      791      791        .INL 4
      792      792        .FIF
      793      793        CALL XSL$GETHOSTNAME( status, name, namelen );
      794      794        ..::IT "Parameters:"
      795      795        .INL 4
      796      796        .FIF
      797      797        name        character array buffer
      798      798
      799      799        namelen     integer size of name in characters
      800      800        ..::IT "Result:"
      801      801        .INL 4
      802      802        .FIF
      803      803        status      integer error code
      804      804        ..::IT "Description:"
      805      805        The gethostname() function returns the name of the system on which the
      806      806        function was invoked.  The name is found by looking up the alias "localhost"
      807      807        in the etc:hosts file and returning the system name associated with it.
      808      808        .SPB
      809      809        The name parameter specifies an application-defined buffer to receive
      810      810        the host name.
      811      811        .SPB
      812      812        The namelen parameter specifies how large the buffer is, expressed as
      813      813        the number of characters it can hold.
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:23   
      814      814        .SPB
      815      815        If the gethostname() function is successful, the status result contains
      816      816        ESUCCESS or E$SUCCESS.
      817      817        .SPB
      818      818        If the gethostname() function is unsuccessful, the status result contains
      819      819        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
      820      820        to determine the specific error condition.  The XSL$GETHOSTNAME procedure
      821      821        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      822      822        to the gethostname() function.
      823      823        ..::IT "Errors:"
      824      824        Following are the possible error conditions reported when the gethostname()
      825      825        function is unsuccessful.  Equates for the possible values can be found in
      826      826        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      827      827
      828      828        .FIF
      829      829
      830      830        C #define               PL6 %EQU
      831      831        ----------------------- -----------------------
      832      832        ENOENT                  E$NOENT
      833      833        .FIN
      834      834        The hosts file does not exist.
      835      835        .FIF
      836      836        */
      837      837        XSL$ETCFILES: PROC( RESULT$, PARM1, PARM2, PARM3) ALTRET;
      838      838        %INCLUDE B$TABLES_C;
      839      946            %B$XL_UPPER( NAME=UPCASE);
      840      950        %INCLUDE CP_6;
      841     1031            %F$DCB;
      842     1088            %B$ALT;
      843     1096            %B$TCB;
      844     1099            %FPT_OPEN( DCB=F$HOSTS, ASN=COMGROUP, FUN=UPDATE, SHARE=ALL,
      845     1100                    ACCT=VLP_ACCT, NAME=NAMESERCG, STCLASS=CONSTANT);
      846     1209            %FPT_WRITE( DCB=F$HOSTS, BUF="RQS.BUF", STATION=VLP_STATION, STCLASS=CONSTANT);
      847     1240            %VLP_STATION( STATION='SERVER', STCLASS=CONSTANT);
      848     1267            %VLP_ACCT( ACCT=':SYS', STCLASS=CONSTANT);
      849     1280            %FPT_OPEN( FPTN=TEST_OPEN, DCB=F$HOSTS, ASN=FILE, FUN=IN, SHARE=NONE,
      850     1281                    TEST=YES, ACS=SEQUEN, NAME=ETC_HOSTS, STCLASS=CONSTANT);
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:24   
      851     1390            %VLP_NAME( FPTN=NAMESERCG, NAME='NAMESERCG', STCLASS=CONSTANT);
      852     1417            %VLP_NAME( FPTN=ETC_HOSTS, NAME='etc:hosts', STCLASS=CONSTANT);
      853     1444            %FPT_CLOSE( DISP=SAVE);
      854     1486            %FPT_PFIL( BOF=YES);
      855     1501            %FPT_READ( BUF=ETCBUFFER);
      856     1540        %INCLUDE XU_MACRO_C;
      857     4646            %P_PCB( STCLASS=STATIC, W=PARSEWORK, WSZ="SIZEW( PARSEWORK)", T = ETCBUFFER,
      858     4647                    C_LD='  ', C_TL='  ', CNTU=NO);
      859     4846            %PARSE$OUT( NAME=ITM, STCLASS="BASED( ITM$)");
      860     4891            %PARSE$OUT( NAME=OUT, STCLASS="BASED( OUT$)");
      861     4936            %PARSE$SYM( NAME=SYM, STCLASS="BASED( SYM$)");
      862     4974        %INCLUDE XSL_PERR_C;
      863     5029    1       DCL XSL_ERRNO SBIN SYMREF;
      864     5030        %INCLUDE XSL_SOCKET_E;
      865     5288        %INCLUDE XSL_SOCKET_M;
      866     6049            %XSL$HOSTENT( FPTN=XSL_HOSTENT, STCLASS=CONSTANT);
      867     6109            %XSL$NETENT( FPTN=XSL_NETENT, STCLASS=CONSTANT);
      868     6160            %XSL$PROTOENT( FPTN=XSL_PROTOENT, STCLASS=CONSTANT);
      869     6203            %XSL$SERVENT( FPTN=XSL_SERVENT, STCLASS=CONSTANT);
      870     6254        %INCLUDE XSL_NODES_E;
      871     6286        %INCLUDE XSL_INTERNAL_M;
      872     6537            %XSL_REFDATA;
      873     6540        %INCLUDE CP_6_SUBS;
      874     7080
      875     7081    1       DCL XSL_NODES ENTRY CONV(5);
      876     7082    1       DCL XSL$INET_ADDR ENTRY(2) ALTRET;
      877     7083    1       DCL XSL$INET_NETWORK ENTRY(2) ALTRET;
      878     7084    1       DCL XSL$HTONL ENTRY(2);
      879     7085    1       DCL X$PARSE ENTRY(1) ALTRET;
      880     7086
      881     7087    1       DCL B$TCB$ PTR SYMREF READONLY;
      882     7088    1       DCL R_HOSTS SBIN SYMREF;
      883     7089    1       DCL R_NETWORKS SBIN SYMREF;
      884     7090    1       DCL R_PROTOCOLS SBIN SYMREF;
      885     7091    1       DCL R_SERVICES SBIN SYMREF;
      886     7092
      887     7093            %M$DCB( DCBN=F$HOSTS, ASN=FILE, ACS=SEQUEN, FUN=IN, ACCT=':SYS',
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:25   
      888     7094              NAME='etc:hosts');
      889     7168            %M$DCB( DCBN=F$NETWORKS, ASN=FILE, ACS=SEQUEN, FUN=IN, ACCT=':SYS',
      890     7169              NAME='etc:networks');
      891     7243            %M$DCB( DCBN=F$PROTOCOLS, ASN=FILE, ACS=SEQUEN, FUN=IN, ACCT=':SYS',
      892     7244              NAME='etc:protocols');
      893     7318            %M$DCB( DCBN=F$SERVICES, ASN=FILE, ACS=SEQUEN, FUN=IN, ACCT=':SYS',
      894     7319              NAME='etc:services');
      895     7393
      896     7394
      897     7395    1       DCL ACTION SBIN;
      898     7396        %EQU GETENT = 0;
      899     7397        %EQU SETENT = 1;
      900     7398        %EQU ENDENT = 2;
      901     7399        %EQU BYNAME = 3;
      902     7400        %EQU BYADDR = 4;
      903     7401        %EQU BYPORT = 5;
      904     7402        %EQU BYNUMBER = 6;
      905     7403    1       DCL ENTRYFLAG SBIN;
      906     7404        %EQU HOSTS = 0;
      907     7405        %EQU NETWORKS = 1;
      908     7406        %EQU PROTOCOLS = 2;
      909     7407        %EQU SERVICES = 3;
      910     7408    1       DCL LEN SBIN;
      911     7409    1       DCL TXTN CHAR( LEN) BASED;
      912     7410    1       DCL P1LEN SBIN;
      913     7411    1       DCL TXT1N CHAR( P1LEN) BASED;
      914     7412    1       DCL P2LEN SBIN;
      915     7413    1       DCL TXT2N CHAR( P2LEN) BASED;
      916     7414    1       DCL I SBIN;
      917     7415    1       DCL INETADDR(0:5) UBIN STATIC INIT( 0*6);
      918     7416    1       DCL INETPTR$(0:5) PTR STATIC INIT( ADDR( NIL)*6);
      919     7417    1       DCL NAMEPTR$(0:5) PTR STATIC INIT( ADDR( NIL)*6);
      920     7418    1       DCL B$PTR PTR BASED;
      921     7419    1       DCL ITM$ PTR;
      922     7420    1       DCL J SBIN;
      923     7421    1       DCL OUT$ PTR;
      924     7422    1       DCL SYM$ REDEF OUT$ PTR;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:26   
      925     7423    1       DCL TMP$ PTR;
      926     7424    1       DCL TMPCHARS CHAR(32) BASED( TMP$);
      927     7425    1       DCL TRYSERVER BIT(1) UNAL;
      928     7426    1       DCL PARM1 SBIN;
      929     7427    1       DCL HTONLPARM1 SBIN;
      930     7428    1       DCL PARM1$ PTR;
      931     7429    1       DCL PARM2 SBIN;
      932     7430    1       DCL PARM2$ PTR;
      933     7431    1       DCL PARM3 SBIN;
      934     7432    1       DCL PARM3$ PTR;
      935     7433    1       DCL PTR# SBIN;
      936     7434    1       DCL PTRLEN(0:31) SBIN;
      937     7435    1       DCL RESULT$ PTR;
      938     7436    1       DCL RESULT REDEF RESULT$ SBIN;
      939     7437    1       DCL H_NAMELEN SBIN;
      940     7438    1       DCL H_ADDRLEN SBIN;
      941     7439    1       DCL N_NAMELEN SBIN;
      942     7440    1       DCL P_NAMELEN SBIN;
      943     7441    1       DCL S_NAMELEN SBIN;
      944     7442    1       DCL S_PROTOLEN SBIN;
      945     7443    1       DCL ARS(0:3) SBIN STATIC INIT(0*4);
      946     7444    1       DCL ROOT$(0:3) PTR CONSTANT
      947     7445    1        INIT(ADDR(R_HOSTS), ADDR(R_NETWORKS), ADDR(R_PROTOCOLS), ADDR(R_SERVICES));
      948     7446    1       DCL DCBNUMS(0:3) SBIN CONSTANT INIT(DCBNUM(F$HOSTS), DCBNUM(F$NETWORKS),
      949     7447    1         DCBNUM(F$PROTOCOLS), DCBNUM(F$SERVICES));
      950     7448    1       DCL STAYOPEN(0:3) SBIN STATIC INIT(0*4);
      951     7449    1       DCL LOCAL_HOST_NAME CONSTANT CHAR(0) INIT(%CONCAT('LOCALHOST',BINASC(0)));
      952     7450    1       DCL 1 TXTC BASED ALIGNED,
      953     7451    1           2 LEN UBIN(9) CALIGNED,
      954     7452    1           2 TXT CHAR(TXTC.LEN) CALIGNED;
      955     7453    1       DCL ETCBUFFER CHAR(132) STATIC;
      956     7454    1       DCL 1 RSP REDEF ETCBUFFER,
      957     7455    1           2 BUF,
      958     7456    1           3 RESULT SBIN,
      959     7457    1           3 ERRNO SBIN,
      960     7458    1           2 * CHAR(124) UNAL;
      961     7459    1       DCL RESULTBUF CHAR(132) STATIC;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:27   
      962     7460    1       DCL 1 RQS REDEF RESULTBUF,
      963     7461    1           2 BUF,
      964     7462    1           3 TYPE UBIN(18) UNAL,
      965     7463    1           3 LEN UBIN(18) UNAL,
      966     7464    1           3 RELOC$ PTR,
      967     7465    1           3 DATA CHAR(32) UNAL,
      968     7466    1           2 * CHAR(92) UNAL;
      969     7467            %XSL$HOSTENT( STCLASS=REDEF RESULTBUF, LAST=",");
      970     7527    1           2 PTR$(0:27) PTR;
      971     7528            %XSL$NETENT( STCLASS=REDEF RESULTBUF, LAST=",");
      972     7579    1           2 * PTR, 2 PTR$(0:27) PTR;
      973     7580            %XSL$PROTOENT( STCLASS=REDEF RESULTBUF, LAST=",");
      974     7623    1           2 * CHAR(8), 2 PTR$(0:27) PTR;
      975     7624            %XSL$SERVENT( STCLASS=REDEF RESULTBUF, LAST=",");
      976     7675    1           2 * PTR, 2 PTR$(0:27) PTR;
      977     7676    1       DCL 1 XSL$ANYENT REDEF RESULTBUF,
      978     7677    1           2 * CHAR(20),2 PTR$(0:27) PTR;
      979     7678    1       DCL PARSEWORK(0:199) SBIN STATIC;
      980     7679    1       DCL PARM1UP CHAR(32);
      981     7680    1       DCL PARM2UP CHAR(32);
      982     7681    1       DCL NAMEUP CHAR(32);
      983     7682
      984     7683    1   XSL$GETHOSTBYADDR: ENTRY( RESULT$, PARM1, PARM2, PARM3) ALTRET;
      985     7684
      986     7685    1       TRYSERVER = '1'B;
      987     7686    1       GOTO H1;
      988     7687
      989     7688    1   XSL$$GETHOSTBYADDR: ENTRY( RESULT$, PARM1, PARM2, PARM3) ALTRET;
      990     7689
      991     7690    1       TRYSERVER = '0'B;
      992     7691    1   H1:
      993     7692    1       ENTRYFLAG = %HOSTS;
      994     7693    1       ACTION = %BYADDR;
      995     7694    1       GOTO COMMON;
      996     7695
      997     7696    1   XSL$GETNETBYADDR: ENTRY( RESULT$, PARM1, PARM2) ALTRET;
      998     7697
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:28   
      999     7698    1       ENTRYFLAG = %NETWORKS;
     1000     7699    1       ACTION = %BYADDR;
     1001     7700    1       GOTO COMMON;
     1002     7701
     1003     7702    1   XSL$GETSERVBYNAME: ENTRY( RESULT$, PARM1, PARM2) ALTRET;
     1004     7703
     1005     7704    1       ENTRYFLAG = %SERVICES;
     1006     7705    1       ACTION = %BYNAME;
     1007     7706    1       GOTO COMMON;
     1008     7707
     1009     7708    1   XSL$GETSERVBYPORT: ENTRY( RESULT$, PARM1, PARM2) ALTRET;
     1010     7709
     1011     7710    1       ENTRYFLAG = %SERVICES;
     1012     7711    1       ACTION = %BYPORT;
     1013     7712    1       GOTO COMMON;
     1014     7713
     1015     7714    1   XSL$GETHOSTBYNAME: ENTRY( RESULT$, PARM1) ALTRET;
     1016     7715
     1017     7716    1       TRYSERVER = '1'B;
     1018     7717    1       GOTO H2;
     1019     7718
     1020     7719    1   XSL$$GETHOSTBYNAME: ENTRY( RESULT$, PARM1) ALTRET;
     1021     7720
     1022     7721    1       TRYSERVER = '0'B;
     1023     7722    1   H2:
     1024     7723    1       ENTRYFLAG = %HOSTS;
     1025     7724    1       ACTION = %BYNAME;
     1026     7725    1       GOTO COMMON;
     1027     7726
     1028     7727    1   XSL$GETNETBYNAME: ENTRY( RESULT$, PARM1) ALTRET;
     1029     7728
     1030     7729    1       ENTRYFLAG = %NETWORKS;
     1031     7730    1       ACTION = %BYNAME;
     1032     7731    1       GOTO COMMON;
     1033     7732
     1034     7733    1   XSL$GETPROTOBYNAME: ENTRY( RESULT$, PARM1) ALTRET;
     1035     7734
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:29   
     1036     7735    1       ENTRYFLAG = %PROTOCOLS;
     1037     7736    1       ACTION = %BYNAME;
     1038     7737    1       GOTO COMMON;
     1039     7738
     1040     7739    1   XSL$GETPROTOBYNUMBER: ENTRY( RESULT$, PARM1) ALTRET;
     1041     7740
     1042     7741    1       ENTRYFLAG = %PROTOCOLS;
     1043     7742    1       ACTION = %BYNUMBER;
     1044     7743    1       GOTO COMMON;
     1045     7744
     1046     7745    1   XSL$SETHOSTENT: ENTRY( RESULT$, PARM1) ALTRET;
     1047     7746
     1048     7747    1       TRYSERVER = '1'B;
     1049     7748    1       GOTO H3;
     1050     7749
     1051     7750    1   XSL$$SETHOSTENT: ENTRY( RESULT$, PARM1) ALTRET;
     1052     7751
     1053     7752    1       TRYSERVER = '0'B;
     1054     7753    1   H3:
     1055     7754    1       ENTRYFLAG = %HOSTS;
     1056     7755    1       ACTION = %SETENT;
     1057     7756    1       GOTO COMMON;
     1058     7757
     1059     7758    1   XSL$SETNETENT: ENTRY( RESULT$, PARM1) ALTRET;
     1060     7759
     1061     7760    1       ENTRYFLAG = %NETWORKS;
     1062     7761    1       ACTION = %SETENT;
     1063     7762    1       GOTO COMMON;
     1064     7763
     1065     7764    1   XSL$SETPROTOENT: ENTRY( RESULT$, PARM1) ALTRET;
     1066     7765
     1067     7766    1       ENTRYFLAG = %PROTOCOLS;
     1068     7767    1       ACTION = %SETENT;
     1069     7768    1       GOTO COMMON;
     1070     7769
     1071     7770    1   XSL$SETSERVENT: ENTRY( RESULT$, PARM1) ALTRET;
     1072     7771
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:30   
     1073     7772    1       ENTRYFLAG = %SERVICES;
     1074     7773    1       ACTION = %SETENT;
     1075     7774    1       GOTO COMMON;
     1076     7775
     1077     7776    1   XSL$GETHOSTENT: ENTRY( RESULT$) ALTRET;
     1078     7777
     1079     7778    1       TRYSERVER = '1'B;
     1080     7779    1       GOTO H4;
     1081     7780
     1082     7781    1   XSL$$GETHOSTENT: ENTRY( RESULT$) ALTRET;
     1083     7782
     1084     7783    1       TRYSERVER = '0'B;
     1085     7784    1   H4:
     1086     7785    1       ENTRYFLAG = %HOSTS;
     1087     7786    1       ACTION = %GETENT;
     1088     7787    1       GOTO COMMON;
     1089     7788
     1090     7789    1   XSL$GETNETENT: ENTRY( RESULT$) ALTRET;
     1091     7790
     1092     7791    1       ENTRYFLAG = %NETWORKS;
     1093     7792    1       ACTION = %GETENT;
     1094     7793    1       GOTO COMMON;
     1095     7794
     1096     7795    1   XSL$GETPROTOENT: ENTRY( RESULT$) ALTRET;
     1097     7796
     1098     7797    1       ENTRYFLAG = %PROTOCOLS;
     1099     7798    1       ACTION = %GETENT;
     1100     7799    1       GOTO COMMON;
     1101     7800
     1102     7801    1   XSL$GETSERVENT: ENTRY( RESULT$) ALTRET;
     1103     7802
     1104     7803    1       ENTRYFLAG = %SERVICES;
     1105     7804    1       ACTION = %GETENT;
     1106     7805    1       GOTO COMMON;
     1107     7806
     1108     7807    1   XSL$ENDHOSTENT: ENTRY( RESULT$) ALTRET;
     1109     7808
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:31   
     1110     7809    1       TRYSERVER = '1'B;
     1111     7810    1       GOTO H5;
     1112     7811
     1113     7812    1   XSL$$ENDHOSTENT: ENTRY( RESULT$) ALTRET;
     1114     7813
     1115     7814    1       TRYSERVER = '0'B;
     1116     7815    1   H5:
     1117     7816    1       ENTRYFLAG = %HOSTS;
     1118     7817    1       ACTION = %ENDENT;
     1119     7818    1       GOTO COMMON;
     1120     7819
     1121     7820    1   XSL$ENDNETENT: ENTRY( RESULT$) ALTRET;
     1122     7821
     1123     7822    1       ENTRYFLAG = %NETWORKS;
     1124     7823    1       ACTION = %ENDENT;
     1125     7824    1       GOTO COMMON;
     1126     7825
     1127     7826    1   XSL$ENDPROTOENT: ENTRY( RESULT$) ALTRET;
     1128     7827
     1129     7828    1       ENTRYFLAG = %PROTOCOLS;
     1130     7829    1       ACTION = %ENDENT;
     1131     7830    1       GOTO COMMON;
     1132     7831
     1133     7832    1   XSL$ENDSERVENT: ENTRY( RESULT$) ALTRET;
     1134     7833
     1135     7834    1       ENTRYFLAG = %SERVICES;
     1136     7835    1       ACTION = %ENDENT;
     1137     7836    1       GOTO COMMON;
     1138     7837
     1139     7838    1   XSL$GETHOSTNAME: ENTRY( RESULT$, PARM1, PARM2) ALTRET;
     1140     7839
     1141     7840    1       ENTRYFLAG = %HOSTS;
     1142     7841    1       ACTION = %BYNAME;
     1143     7842    1       PARM1$ = ADDR( LOCAL_HOST_NAME);
     1144     7843    1       GOTO COMMON1;
     1145     7844
     1146     7845        %EJECT;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:32   
     1147     7846    1   COMMON:
     1148     7847    1       PARM1$ = ADDR( PARM1);
     1149     7848    1   COMMON1:
     1150     7849    1       PARM2$ = ADDR( PARM2);
     1151     7850    1       PARM3$ = ADDR( PARM3);
     1152     7851    1       IF ENTRYFLAG = %HOSTS AND TRYSERVER THEN
     1153     7852    1           GOTO TRY_SERVER;
     1154     7853    1   THIS_COMMAND:
     1155     7854    2       DO CASE( ACTION);
     1156     7855    2           CASE( %GETENT);
     1157     7856    2   ANOTHER:
     1158     7857    2               CALL READFILE ALTRET( RETURN_NIL);
     1159     7858    2               CALL PARSERECORD ALTRET( ANOTHER);
     1160     7859    2           CASE( %SETENT);
     1161     7860    2               CALL REWINDFILE ALTRET( RETURN_NIL);
     1162     7861    2               STAYOPEN( ENTRYFLAG) = PARM1;
     1163     7862    2           CASE( %ENDENT);
     1164     7863    2               CALL CLOSEFILE ALTRET( RETURN_NIL);
     1165     7864    2               STAYOPEN( ENTRYFLAG) = 0;
     1166     7865    2           CASE( %BYNAME);
     1167     7866    3               IF SUBSTR( PARM1$->TXTN, 0, 1) < ' ' THEN DO;
     1168     7867    3                   P1LEN = ASCBIN( SUBSTR( PARM1$->TXTN, 0, 1));
     1169     7868    3                   PARM1$ = PINCRC( PARM1$, 1);
     1170     7869    3                   END;
     1171     7870    2               ELSE
     1172     7871    2                   CALL INDEX( P1LEN, BINASC(0), PARM1$->TMPCHARS);
     1173     7872    3               IF PARM1$ ~= ADDR( LOCAL_HOST_NAME) THEN DO;
     1174     7873    3                   CALL XLATE( PARM1UP, UPCASE, PARM1$->TXT1N);
     1175     7874    3                   PARM1$ = ADDR( PARM1UP);
     1176     7875    3                   END;
     1177     7876    3               IF PARM2$ ~= ADDR( NIL) THEN DO;
     1178     7877    4                   IF SUBSTR( PARM2$->TXTN, 0, 1) < ' ' THEN DO;
     1179     7878    4                       P2LEN = ASCBIN( SUBSTR( PARM2$->TXTN, 0, 1));
     1180     7879    4                       PARM2$ = PINCRC( PARM2$, 1);
     1181     7880    4                       END;
     1182     7881    3                   ELSE
     1183     7882    3                       CALL INDEX( P2LEN, BINASC(0), PARM2$->TMPCHARS);
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:33   
     1184     7883    3                   CALL XLATE( PARM2UP, UPCASE, PARM2$->TXT2N);
     1185     7884    3                   PARM2$ = ADDR( PARM2UP);
     1186     7885    3                   END;
     1187     7886    2               CALL REWINDFILE ALTRET( RETURN_NIL);
     1188     7887    2   NAMELOOP:
     1189     7888    2               CALL READFILE ALTRET( RETURN_NIL);
     1190     7889    2               CALL PARSERECORD ALTRET( NAMELOOP);
     1191     7890    3               DO CASE( ENTRYFLAG);
     1192     7891    3                   CASE( %HOSTS);
     1193     7892    3                       LEN = H_NAMELEN;
     1194     7893    3                       CALL XLATE( NAMEUP, UPCASE, XSL$HOSTENT.H_NAME$->TXTN);
     1195     7894    3                   CASE( %NETWORKS);
     1196     7895    3                       LEN = N_NAMELEN;
     1197     7896    3                       CALL XLATE( NAMEUP, UPCASE, XSL$NETENT.N_NAME$->TXTN);
     1198     7897    3                   CASE( %PROTOCOLS);
     1199     7898    3                       LEN = P_NAMELEN;
     1200     7899    3                       CALL XLATE( NAMEUP, UPCASE, XSL$PROTOENT.P_NAME$->TXTN);
     1201     7900    3                   CASE( %SERVICES);
     1202     7901    4                       IF PARM2$ ~= ADDR( NIL) THEN DO;
     1203     7902    4                           LEN = S_PROTOLEN;
     1204     7903    4                           CALL XLATE( NAMEUP, UPCASE, XSL$SERVENT.S_PROTO$->TXTN);
     1205     7904    4                           IF ADDR( NAMEUP)->TXTN ~= PARM2$->TXT2N THEN
     1206     7905    4                               GOTO NAMELOOP;
     1207     7906    4                           END;
     1208     7907    3                       LEN = S_NAMELEN;
     1209     7908    3                       CALL XLATE( NAMEUP, UPCASE, XSL$SERVENT.S_NAME$->TXTN);
     1210     7909    3                   END;
     1211     7910    2               IF ADDR( NAMEUP)->TXTN = PARM1$->TXT1N THEN
     1212     7911    2                   EXIT THIS_COMMAND;
     1213     7912    3               DO I=0 TO PTR#-1; /* Check the aliases, too. */
     1214     7913    3                   LEN = PTRLEN( I);
     1215     7914    3                   CALL XLATE( NAMEUP, UPCASE, XSL$ANYENT.PTR$( I)->B$PTR->TXTN);
     1216     7915    3                   IF ADDR( NAMEUP)->TXTN = PARM1$->TXT1N THEN
     1217     7916    3                       EXIT THIS_COMMAND;
     1218     7917    3                   END;
     1219     7918    2               GOTO NAMELOOP;
     1220     7919    2           CASE( %BYADDR);
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:34   
     1221     7920    2               CALL REWINDFILE ALTRET( RETURN_NIL);
     1222     7921    2   ADDRLOOP:
     1223     7922    2               CALL READFILE ALTRET( RETURN_NIL);
     1224     7923    2               CALL PARSERECORD ALTRET( ADDRLOOP);
     1225     7924    2               LEN = H_ADDRLEN;
     1226     7925    3               IF LEN = PARM2 THEN DO;
     1227     7926    3                   TMP$ = XSL$HOSTENT.H_ADDR_LIST$;
     1228     7927    4                   DO WHILE( TMP$->B$PTR ~= ADDR( NIL));
     1229     7928    4                       IF TMP$->B$PTR->TXTN = PARM1$->TXTN THEN
     1230     7929    4                           EXIT THIS_COMMAND;
     1231     7930    4                       TMP$ = PINCRW( TMP$, 1);  /* relies on INETPTR$ array */
     1232     7931    4                       END;
     1233     7932    3                   END;
     1234     7933    2               GOTO ADDRLOOP;
     1235     7934    2           CASE( %BYPORT);
     1236     7935    2               CALL REWINDFILE ALTRET( RETURN_NIL);
     1237     7936    2   PORTLOOP:
     1238     7937    2               CALL READFILE ALTRET( RETURN_NIL);
     1239     7938    2               CALL PARSERECORD ALTRET( PORTLOOP);
     1240     7939    2               LEN = S_PROTOLEN;
     1241     7940    2               CALL XSL$HTONL (HTONLPARM1, PARM1);
     1242     7941    2               IF XSL$SERVENT.S_PORT = HTONLPARM1 THEN
     1243     7942    2                   IF PARM2$ = ADDR( NIL) OR
     1244     7943    2                     XSL$SERVENT.S_PROTO$->TXTN = PARM2$->TXTN THEN
     1245     7944    2                       EXIT THIS_COMMAND;
     1246     7945    2               GOTO PORTLOOP;
     1247     7946    2           CASE( %BYNUMBER);
     1248     7947    2               CALL REWINDFILE ALTRET( RETURN_NIL);
     1249     7948    2   NUMBERLOOP:
     1250     7949    2               CALL READFILE ALTRET( RETURN_NIL);
     1251     7950    2               CALL PARSERECORD ALTRET( NUMBERLOOP);
     1252     7951    2               IF XSL$PROTOENT.P_PROTO = PARM1 THEN
     1253     7952    2                   EXIT THIS_COMMAND;
     1254     7953    2               GOTO NUMBERLOOP;
     1255     7954    2           END THIS_COMMAND;
     1256     7955
     1257     7956    2       IF PARM1$ = ADDR( LOCAL_HOST_NAME) THEN DO;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:35   
     1258     7957    2           LEN = MINIMUM( H_NAMELEN + 1,  /* Include the nulbyte */ PARM2);
     1259     7958    2           ADDR( PARM1) -> TXTN = XSL$HOSTENT.H_NAME$ -> TXTN;
     1260     7959    2           RESULT = 0;
     1261     7960    2           END;
     1262     7961    1       ELSE
     1263     7962    1           RESULT$ = ADDR( RESULTBUF);
     1264     7963    2       DO WHILE( '0'B);
     1265     7964    2   RETURN_NIL:
     1266     7965    2           RESULT$ = ADDR( NIL);
     1267     7966    2           XSL_ERRNO = %E$FAILURE;
     1268     7967    2           IF PARM1$ = ADDR( LOCAL_HOST_NAME) THEN RESULT = %E$FAILURE;
     1269     7968    2           IF DCBADDR( DCBNUMS( ENTRYFLAG))->F$DCB.TYC.EOF# THEN
     1270     7969    2               XSL_ERRNO = %E$NOENT;
     1271     7970    2           END;
     1272     7971    1       IF STAYOPEN( ENTRYFLAG) = 0 THEN
     1273     7972    1           CALL CLOSEFILE;
     1274     7973    1       IF RESULT$ ~= ADDR( NIL) AND RESULT>=0 THEN
     1275     7974    1           RETURN;
     1276     7975    1       ALTRETURN;
     1277     7976        %EJECT;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:36   
     1278     7977    1   OPENFILE: PROC ALTRET;  /* used only for NAMESERCG */
     1279     7978
     1280     7979    3       IF NOT DCBADDR( DCBNUMS( ENTRYFLAG))->F$DCB.FCD# THEN DO;
     1281     7980    3           CALL M$OPEN( FPT_OPEN)
     1282     7981    4           WHENALTRETURN DO;
     1283     7982    4               CALL M$OPEN( TEST_OPEN);  /* ignore ALTRET */
     1284     7983    4               ALTRETURN;
     1285     7984    4               END;
     1286     7985    3           END;
     1287     7986    2       RETURN;
     1288     7987
     1289     7988    2   END OPENFILE;
     1290     7989
     1291     7990    1   WRITEFILE: PROC ALTRET;  /* used only for NAMESERCG */
     1292     7991
     1293     7992    2       CALL M$WRITE( FPT_WRITE)
     1294     7993    3       WHENALTRETURN DO;
     1295     7994                /* write failed.  expected if FILE, bad if NAMESERCG */
     1296     7995    4           IF DCBADDR( DCBNUMS( ENTRYFLAG))->F$DCB.ASN# = %COMGROUP# THEN DO;
     1297     7996                    /* grr.. CG is open but server not running.. */
     1298     7997    4               CALL CLOSEFILE2;  /* ignore ALTRET */
     1299     7998    4               CALL M$OPEN( TEST_OPEN);  /* ignore ALTRET */
     1300     7999    4               END;
     1301     8000    3           ALTRETURN;
     1302     8001    3           END;
     1303     8002    2       RETURN;
     1304     8003
     1305     8004    2   END WRITEFILE;
     1306     8005
     1307     8006    1   READFILE: PROC ALTRET;  /* used for either FILE or NAMESERCG */
     1308     8007
     1309     8008    2       FPT_READ.V.DCB# = DCBNUMS( ENTRYFLAG);
     1310     8009    2       CALL M$READ( FPT_READ)
     1311     8010    3       WHENALTRETURN DO;
     1312     8011    3           ALTRETURN;
     1313     8012    3           END;
     1314     8013    2       ARS( ENTRYFLAG) = DCBADDR( DCBNUMS( ENTRYFLAG))->F$DCB.ARS#;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:37   
     1315     8014    2       RETURN;
     1316     8015
     1317     8016    2   END READFILE;
     1318     8017
     1319     8018    1   REWINDFILE: PROC ALTRET;  /* used only for FILE */
     1320     8019
     1321     8020    2       FPT_PFIL.V.DCB# = DCBNUMS( ENTRYFLAG);
     1322     8021    2       CALL M$PFIL( FPT_PFIL)
     1323     8022    3       WHENALTRETURN DO;
     1324     8023    3   OOPS:
     1325     8024    3           ALTRETURN;
     1326     8025    3           END;
     1327     8026    2       RETURN;
     1328     8027
     1329     8028    2   END REWINDFILE;
     1330     8029
     1331     8030    1   CLOSEFILE: PROC ALTRET;  /* used only for FILE */
     1332     8031
     1333     8032    2       STAYOPEN( ENTRYFLAG) = 0;
     1334     8033
     1335     8034    2   CLOSEFILE2: ENTRY ALTRET;  /* used only for NAMESERCG */
     1336     8035
     1337     8036    3       IF DCBADDR( DCBNUMS( ENTRYFLAG))->F$DCB.FCD# THEN DO;
     1338     8037    3           FPT_CLOSE.V.DCB# = DCBNUMS( ENTRYFLAG);
     1339     8038    3           CALL M$CLOSE( FPT_CLOSE)
     1340     8039    4           WHENALTRETURN DO;
     1341     8040    4               ALTRETURN;
     1342     8041    4               END;
     1343     8042    3           END;
     1344     8043    2       RETURN;
     1345     8044
     1346     8045    2   END CLOSEFILE;
     1347     8046        %EJECT;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:38   
     1348     8047    1   PARSERECORD: PROC ALTRET;
     1349     8048
     1350     8049    2       P_PCB.ROOT$ = ROOT$( ENTRYFLAG);
     1351     8050    2       P_PCB.NCHARS = ARS( ENTRYFLAG);
     1352     8051    2       CALL X$PARSE( P_PCB )
     1353     8052    3       WHENALTRETURN DO;
     1354     8053    3   BAILOUT:
     1355     8054    3           ALTRETURN;
     1356     8055    3           END;
     1357     8056    2       PTR# = 0;
     1358     8057    2       IF P_PCB.OUT$->ITM.NSUBLKS = 0 THEN
     1359     8058    2           ALTRETURN;
     1360     8059    2       ITM$ = P_PCB.OUT$->ITM.SUBLK$(0);
     1361     8060    3       DO CASE( ITM.CODE);
     1362     8061    3           CASE( %C_COMMENT);
     1363     8062    3               ALTRETURN;
     1364     8063    3           CASE( %C_HOSTENT);
     1365     8064    3               XSL$HOSTENT = XSL_HOSTENT;
     1366     8065    3               XSL$HOSTENT.H_ALIASES$ = ADDR( NAMEPTR$(0));
     1367     8066    4               DO I = 0 TO ITM.NSUBLKS - 1;
     1368     8067    4                   OUT$ = ITM.SUBLK$( I);
     1369     8068    4                   J = 0;
     1370     8069    4   MULTIHOMED:
     1371     8070    4                   TMP$ = ADDR( OUT.SUBLK$( J)->SYM.COUNT);
     1372     8071    4                   CALL UNTEXTC;
     1373     8072    5                   DO CASE( OUT.CODE);
     1374     8073    5                       CASE( %C_ADDR);
     1375     8074    5                           XSL$HOSTENT.H_ADDRTYPE = %XSL_AF_INET;
     1376     8075    5                           CALL XSL$INET_ADDR( INETADDR( J), TMPCHARS);
     1377     8076    6                           IF J = 0 THEN DO;
     1378     8077    6                               H_ADDRLEN = 4;
     1379     8078    6                               XSL$HOSTENT.H_LENGTH = 4;
     1380     8079    6                               XSL$HOSTENT.H_ADDR_LIST$ = ADDR( INETPTR$(0));
     1381     8080    6                               END;
     1382     8081    5                           INETPTR$( J) = ADDR( INETADDR( J));
     1383     8082    5                           J = J + 1;
     1384     8083    5                           IF J < OUT.NSUBLKS AND J < 5 THEN
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:39   
     1385     8084    5                               GOTO MULTIHOMED;
     1386     8085    5                           INETPTR$( J) = ADDR( NIL);
     1387     8086    5                       CASE( %C_NAME);
     1388     8087    5                           H_NAMELEN = LEN;
     1389     8088    5                           XSL$HOSTENT.H_NAME$ = TMP$;
     1390     8089    5                       CASE( %C_ALIAS);
     1391     8090    5                           NAMEPTR$( PTR#) = TMP$;
     1392     8091    5                           XSL$HOSTENT.PTR$( PTR#) = ADDR( NAMEPTR$( PTR#));
     1393     8092    5                           PTRLEN( PTR#) = LEN;
     1394     8093    5                           PTR# = PTR# + 1;
     1395     8094    5                       END;
     1396     8095    4                   END;
     1397     8096    3           CASE( %C_NETENT);
     1398     8097    3               XSL$NETENT = XSL_NETENT;
     1399     8098    3               XSL$NETENT.N_ALIASES$ = ADDR( NAMEPTR$(0));
     1400     8099    4               DO I = 0 TO ITM.NSUBLKS - 1;
     1401     8100    4                   OUT$ = ITM.SUBLK$( I);
     1402     8101    4                   TMP$ = ADDR( OUT.SUBLK$(0)->SYM.COUNT);
     1403     8102    4                   CALL UNTEXTC;
     1404     8103    5                   DO CASE( OUT.CODE);
     1405     8104    5                       CASE( %C_NAME);
     1406     8105    5                           N_NAMELEN = LEN;
     1407     8106    5                           XSL$NETENT.N_NAME$ = TMP$;
     1408     8107    5                       CASE( %C_NET);
     1409     8108    5                           XSL$NETENT.N_ADDRTYPE = %XSL_AF_INET;
     1410     8109    5                           CALL XSL$INET_NETWORK( XSL$NETENT.N_NET, TMP$->TXTN);
     1411     8110    5                       CASE( %C_ALIAS);
     1412     8111    5                           NAMEPTR$( PTR#) = TMP$;
     1413     8112    5                           XSL$NETENT.PTR$( PTR#) = ADDR( NAMEPTR$( PTR#));
     1414     8113    5                           PTRLEN( PTR#) = LEN;
     1415     8114    5                           PTR# = PTR# + 1;
     1416     8115    5                       END;
     1417     8116    4                   END;
     1418     8117    3           CASE( %C_PROTOENT);
     1419     8118    3               XSL$PROTOENT = XSL_PROTOENT;
     1420     8119    3               XSL$PROTOENT.P_ALIASES$ = ADDR( NAMEPTR$(0));
     1421     8120    4               DO I = 0 TO ITM.NSUBLKS - 1;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:40   
     1422     8121    4                   OUT$ = ITM.SUBLK$( I);
     1423     8122    4                   TMP$ = ADDR( OUT.SUBLK$(0)->SYM.COUNT);
     1424     8123    4                   CALL UNTEXTC;
     1425     8124    5                   DO CASE( OUT.CODE);
     1426     8125    5                       CASE( %C_NAME);
     1427     8126    5                           P_NAMELEN = LEN;
     1428     8127    5                           XSL$PROTOENT.P_NAME$ = TMP$;
     1429     8128    5                       CASE( %C_PROTO);
     1430     8129    5                           CALL CHARBIN( XSL$PROTOENT.P_PROTO, TMP$->TXTN);
     1431     8130    5                       CASE( %C_ALIAS);
     1432     8131    5                           NAMEPTR$( PTR#) = TMP$;
     1433     8132    5                           XSL$PROTOENT.PTR$( PTR#) = ADDR( NAMEPTR$( PTR#));
     1434     8133    5                           PTRLEN( PTR#) = LEN;
     1435     8134    5                           PTR# = PTR# + 1;
     1436     8135    5                       END;
     1437     8136    4                   END;
     1438     8137    3           CASE( %C_SERVENT);
     1439     8138    3               XSL$SERVENT = XSL_SERVENT;
     1440     8139    3               XSL$SERVENT.S_ALIASES$ = ADDR( NAMEPTR$(0));
     1441     8140    4               DO I = 0 TO ITM.NSUBLKS - 1;
     1442     8141    4                   OUT$ = ITM.SUBLK$( I);
     1443     8142    4                   TMP$ = ADDR( OUT.SUBLK$(0)->SYM.COUNT);
     1444     8143    4                   CALL UNTEXTC;
     1445     8144    5                   DO CASE( OUT.CODE);
     1446     8145    5                       CASE( %C_NAME);
     1447     8146    5                           S_NAMELEN = LEN;
     1448     8147    5                           XSL$SERVENT.S_NAME$ = TMP$;
     1449     8148    5                       CASE( %C_PORT);
     1450     8149    5                           CALL CHARBIN( XSL$SERVENT.S_PORT, TMP$->TXTN);
     1451     8150    5                           CALL XSL$HTONL( XSL$SERVENT.S_PORT, XSL$SERVENT.S_PORT);
     1452     8151    5                       CASE( %C_PROTO);
     1453     8152    5                           S_PROTOLEN = LEN;
     1454     8153    5                           XSL$SERVENT.S_PROTO$ = TMP$;
     1455     8154    5                       CASE( %C_ALIAS);
     1456     8155    5                           NAMEPTR$( PTR#) = TMP$;
     1457     8156    5                           XSL$SERVENT.PTR$( PTR#) = ADDR( NAMEPTR$( PTR#));
     1458     8157    5                           PTRLEN( PTR#) = LEN;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:41   
     1459     8158    5                           PTR# = PTR# + 1;
     1460     8159    5                       END;
     1461     8160    4                   END;
     1462     8161    3           CASE( ELSE);
     1463     8162    3               ALTRETURN;
     1464     8163    3           END;
     1465     8164    2       NAMEPTR$( PTR#) = ADDR( NIL);
     1466     8165    2       XSL$ANYENT.PTR$( PTR#) = ADDR( NAMEPTR$( PTR#));
     1467     8166    2       RETURN;
     1468     8167
     1469     8168    2   END PARSERECORD;
     1470     8169
     1471     8170    1   UNTEXTC: PROC;
     1472     8171
     1473     8172    2       LEN = TMP$->TXTC.LEN;
     1474     8173    2       CALL INSERT( TMPCHARS, 0, LEN, TMP$->TXTC.TXT);
     1475     8174    2       CALL INSERT( TMPCHARS, LEN, 1, BINASC( 0));
     1476     8175    2       RETURN;
     1477     8176
     1478     8177    2   END UNTEXTC;
     1479     8178        %EJECT;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:42   
     1480     8179    1   TRY_SERVER:
     1481     8180    2       DO CASE( ACTION);
     1482     8181    2           CASE( %SETENT);
     1483     8182    2               CALL CLOSEFILE ALTRET( RETURN_NIL);
     1484     8183    2               CALL OPENFILE ALTRET( THIS_COMMAND);
     1485     8184    2               STAYOPEN( ENTRYFLAG) = PARM1;
     1486     8185    2               GOTO SUCCESS;
     1487     8186    2           CASE( %ENDENT);
     1488     8187    2               CALL CLOSEFILE ALTRET( RETURN_NIL);
     1489     8188    2   SUCCESS:
     1490     8189    2               RESULT$ = ADDR( ETCBUFFER); /* a non-NULL ptr */
     1491     8190    2               RETURN;
     1492     8191    2           CASE( ELSE);
     1493     8192    2               CALL OPENFILE ALTRET( THIS_COMMAND);
     1494     8193    2               RQS.BUF = '0'B;
     1495     8194    2               RQS.BUF.RELOC$ = ADDR( ETCBUFFER);
     1496     8195    3               DO CASE( ACTION);
     1497     8196    3                   CASE( %BYNAME);
     1498     8197    3                       RQS.BUF.TYPE = 1;
     1499     8198    4                       IF SUBSTR( PARM1$->TXTN, 0, 1) < ' ' THEN DO;
     1500     8199    4                           P1LEN = ASCBIN( SUBSTR( PARM1$->TXTN, 0, 1));
     1501     8200    4                           PARM1$ = PINCRC( PARM1$, 1);
     1502     8201    4                           END;
     1503     8202    3                       ELSE
     1504     8203    3                           CALL INDEX( P1LEN, BINASC(0), PARM1$->TMPCHARS);
     1505     8204    3                       RQS.BUF.LEN = P1LEN;
     1506     8205    3                       RQS.BUF.DATA = SUBSTR( PARM1$->TXTN, 0, P1LEN);
     1507     8206    3                   CASE( %BYADDR);
     1508     8207    3                       RQS.BUF.TYPE = 2;
     1509     8208    3                       RQS.BUF.LEN = PARM2;
     1510     8209    3                       RQS.BUF.DATA = SUBSTR( PARM1$->TXTN, 0, PARM2);
     1511     8210    3                   CASE( %GETENT);
     1512     8211    3                       RQS.BUF.TYPE = 3;
     1513     8212    3                   END;
     1514     8213    2               CALL WRITEFILE ALTRET( THIS_COMMAND);
     1515     8214    2               CALL READFILE ALTRET( THIS_COMMAND);
     1516     8215    2               IF STAYOPEN( ENTRYFLAG) = 0 THEN
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:43   
     1517     8216    2                   CALL CLOSEFILE2;  /* ignore ALTRET */
     1518     8217    3               IF RSP.BUF.RESULT = -1 THEN DO;
     1519     8218    3                   RESULT$ = ADDR( NIL);
     1520     8219    3                   XSL_ERRNO = RSP.BUF.ERRNO;
     1521     8220    3                   ALTRETURN;
     1522     8221    3                   END;
     1523     8222    2               RESULT$ = ADDR( ETCBUFFER);
     1524     8223    2               RETURN;
     1525     8224    2           END;
     1526     8225
     1527     8226    1   END XSL$ETCFILES;

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:44   
--  Include file information  --

   CP_6_SUBS.:LIBRARY  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_NODES_E.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure XSL$ETCFILES.

   Procedure XSL$ETCFILES requires 1025 words for executable code.
   Procedure XSL$ETCFILES requires 92 words of local(AUTO) storage.

    No errors detected in file XSL$SOCKET4.:TCA2TSI    .

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:45   

 Object Unit name= XSL$ETCFILES                               File name= XSL$SOCKET4.:TCA2TOU
 UTS= NOV 16 '97 14:32:00.80 SUN                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS    171    253  XSL$ETCFILES
    2   Data  even  none   354    542  XSL$ETCFILES
    3   DCB   even  none    98    142  F$HOSTS
    4   DCB   even  none    98    142  F$NETWORKS
    5   DCB   even  none    98    142  F$PROTOCOLS
    6   DCB   even  none    98    142  F$SERVICES
    7   Proc  even  none  1025   2001  XSL$ETCFILES
    8  RoData even  none    11     13  XSL$ETCFILES

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     7      0   yes    yes     yes      Std        4  XSL$ETCFILES
     7      3          yes     yes      Std        4  XSL$GETHOSTBYADDR
     7     10          yes     yes      Std        4  XSL$$GETHOSTBYADDR
     7     17          yes     yes      Std        3  XSL$GETNETBYADDR
     7     26          yes     yes      Std        3  XSL$GETSERVBYNAME
     7     34          yes     yes      Std        3  XSL$GETSERVBYPORT
     7     43          yes     yes      Std        2  XSL$GETHOSTBYNAME
     7     50          yes     yes      Std        2  XSL$$GETHOSTBYNAME
     7     57          yes     yes      Std        2  XSL$GETNETBYNAME
     7     66          yes     yes      Std        2  XSL$GETPROTOBYNAME
     7     75          yes     yes      Std        2  XSL$GETPROTOBYNUMBER
     7    104          yes     yes      Std        2  XSL$SETHOSTENT
     7    111          yes     yes      Std        2  XSL$$SETHOSTENT
     7    120          yes     yes      Std        2  XSL$SETNETENT
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:46   
     7    126          yes     yes      Std        2  XSL$SETPROTOENT
     7    135          yes     yes      Std        2  XSL$SETSERVENT
     7    144          yes     yes      Std        1  XSL$GETHOSTENT
     7    151          yes     yes      Std        1  XSL$$GETHOSTENT
     7    157          yes     yes      Std        1  XSL$GETNETENT
     7    165          yes     yes      Std        1  XSL$GETPROTOENT
     7    173          yes     yes      Std        1  XSL$GETSERVENT
     7    201          yes     yes      Std        1  XSL$ENDHOSTENT
     7    206          yes     yes      Std        1  XSL$$ENDHOSTENT
     7    215          yes     yes      Std        1  XSL$ENDNETENT
     7    224          yes     yes      Std        1  XSL$ENDPROTOENT
     7    232          yes     yes      Std        1  XSL$ENDSERVENT
     7    241          yes     yes      Std        3  XSL$GETHOSTNAME

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
         yes          ~proc      0 XSL$DATADEFS
         yes          ~proc      0 XSL_NODES
         yes           Std       2 XSL$HTONL
 yes     yes           Std       1 X$PARSE
 yes     yes           Std       2 XSL$INET_ADDR
 yes     yes           Std       2 XSL$INET_NETWORK
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:47   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    B$XL_UPPER$                           M$UC                                  XSL_ERRNO
     R_HOSTS                               R_NETWORKS                            R_PROTOCOLS
     R_SERVICES                            F$HOSTS                               F$NETWORKS
     F$PROTOCOLS                           F$SERVICES                            B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:48   


        1        1        /*M*    XSL$SOCKET4             BSD4.3 Socket Library for CP-6, part 4  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=4,DCI=8,DTI=0,ENI=4,ECI=4,CSI=4,DIN=4,SDI=0 */
        8        8
        9        9        /*F* NAME: gethostbyaddr() and XSL$GETHOSTBYADDR  --  Look Up Host by Address
       10       10        ..::IT "Purpose:"
       11       11        .INL +4
       12       12        Searches the etc:hosts file for an entry whose address matches that specified.
       13       13        ..::IT "C Usage:"
       14       14        .INL 4
       15       15        .FIF
       16       16        ptr = gethostbyaddr( addr, len, type );
       17       17        ..::IT "PL6 Usage:"
       18       18        .INL 4
       19       19        .FIF
       20       20        CALL XSL$GETHOSTBYADDR( ptr, addr, len, type );
       21       21        ..::IT "Parameters:"
       22       22        .INL 4
       23       23        .FIF
       24       24        addr        character array containing address
       25       25
       26       26        len         integer number of significant characters in addr
       27       27
       28       28        type        integer address type
       29       29        ..::IT "Result:"
       30       30        .INL 4
       31       31        .FIF
       32       32        ptr         pointer to static buffer containing a host entry
       33       33        ..::IT "Description:"
       34       34        The gethostbyaddr() function sequentially searches the etc:hosts file for the
       35       35        first entry whose address matches the specified address.  This entry is
       36       36        parsed into a hostent structure in a static buffer within the socket library,
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:49   
       37       37        and a pointer to this buffer is returned.
       38       38        .SPB
       39       39        The addr parameter specifies an application-defined buffer containing the
       40       40        address of the host to be looked up.
       41       41        .SPB
       42       42        The len parameter specifies the number of significant characters in addr.
       43       43        .SPB
       44       44        The type parameter specifies the address format.  Equates for the possible
       45       45        values can be found in <xsl_socket.h> or XSL_SOCKET_E.  Only the "DARPA Internet"
       46       46        address format is currently supported; it is selected by coding AF_INET or
       47       47        %XSL_AF_INET in C or PL6 source, respectively.
       48       48        .SPB
       49       49        If the gethostbyaddr() function is successful, the ptr result contains a
       50       50        pointer to a static buffer within the socket library containing a hostent
       51       51        structure for the matching entry.
       52       52        .SPB
       53       53        If the gethostbyaddr() function is unsuccessful, the ptr result contains a
       54       54        NULL pointer.
       55       55        ..::IT "Errors:"
       56       56        A NULL pointer is returned if any error occurs while reading the
       57       57        etc:hosts file, including reaching the end of the file without matching
       58       58        the address.
       59       59        */
       60       60        /*F* NAME: gethostbyname() and XSL$GETHOSTBYNAME  --  Look Up Host by Name
       61       61        ..::IT "Purpose:"
       62       62        .INL +4
       63       63        Searches the etc:hosts file for an entry whose name matches that specified.
       64       64        ..::IT "C Usage:"
       65       65        .INL 4
       66       66        .FIF
       67       67        ptr = gethostbyname( name );
       68       68        ..::IT "PL6 Usage:"
       69       69        .INL 4
       70       70        .FIF
       71       71        CALL XSL$GETHOSTBYNAME( ptr, name );
       72       72        ..::IT "Parameters:"
       73       73        .INL 4
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:50   
       74       74        .FIF
       75       75        name        character array containing a host name to look up
       76       76        ..::IT "Result:"
       77       77        .INL 4
       78       78        .FIF
       79       79        ptr         pointer to static buffer containing a host entry
       80       80        ..::IT "Description:"
       81       81        The gethostbyname() function sequentially searches the etc:hosts file for the
       82       82        first entry whose name matches the specified name.  This entry is
       83       83        parsed into a hostent structure in a static buffer within the socket library,
       84       84        and a pointer to this buffer is returned.
       85       85        .SPB
       86       86        The name parameter specifies an application-defined buffer containing the
       87       87        name of the host to be looked up.
       88       88        .SPB
       89       89        If the gethostbyname() function is successful, the ptr result contains a
       90       90        pointer to a static buffer within the socket library containing a hostent
       91       91        structure for the matching entry.
       92       92        .SPB
       93       93        If the gethostbyname() function is unsuccessful, the ptr result contains a
       94       94        NULL pointer.
       95       95        ..::IT "Errors:"
       96       96        A NULL pointer is returned if any error occurs while reading the
       97       97        etc:hosts file, including reaching the end of the file without matching
       98       98        the name.
       99       99        */
      100      100        /*F* NAME: gethostent() and XSL$GETHOSTENT  --  Get Host Entry
      101      101        ..::IT "Purpose:"
      102      102        .INL +4
      103      103        Reads the next entry of the etc:hosts file into an internal buffer.
      104      104        ..::IT "C Usage:"
      105      105        .INL 4
      106      106        .FIF
      107      107        ptr = gethostent();
      108      108        ..::IT "PL6 Usage:"
      109      109        .INL 4
      110      110        .FIF
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:51   
      111      111        CALL XSL$GETHOSTENT( ptr );
      112      112        ..::IT "Parameters:"
      113      113        .INL 4
      114      114        .FIF
      115      115        (none)
      116      116        ..::IT "Result:"
      117      117        .INL 4
      118      118        .FIF
      119      119        ptr         pointer to static buffer containing a host entry
      120      120        ..::IT "Description:"
      121      121        The gethostent() function opens the etc:hosts file, if it is not already open,
      122      122        and reads the next entry and parses it into a hostent structure in a
      123      123        static buffer within the socket library.  A pointer to this buffer is
      124      124        returned.
      125      125        .SPB
      126      126        If the gethostent() function is successful, the ptr result contains a
      127      127        pointer to a static buffer within the socket library containing a hostent
      128      128        structure for the entry read.
      129      129        .SPB
      130      130        If the gethostent() function is unsuccessful, the ptr result contains a
      131      131        NULL pointer.
      132      132        ..::IT "Errors:"
      133      133        A NULL pointer is returned if any error occurs while reading the
      134      134        etc:hosts file, including reaching the end of the file.
      135      135        */
      136      136        /*F* NAME: sethostent() and XSL$SETHOSTENT  --  Set Host Entry
      137      137        ..::IT "Purpose:"
      138      138        .INL +4
      139      139        Opens or positions the etc:hosts file and initializes a stay-open flag.
      140      140        ..::IT "C Usage:"
      141      141        .INL 4
      142      142        .FIF
      143      143        ptr = sethostent( flag );
      144      144        ..::IT "PL6 Usage:"
      145      145        .INL 4
      146      146        .FIF
      147      147        CALL XSL$SETHOSTENT( ptr, flag );
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:52   
      148      148        ..::IT "Parameters:"
      149      149        .INL 4
      150      150        .FIF
      151      151        flag        integer flag
      152      152        ..::IT "Result:"
      153      153        .INL 4
      154      154        .FIF
      155      155        ptr         pointer to arbitrary location
      156      156        ..::IT "Description:"
      157      157        The sethostent() function opens the etc:hosts file, if it is not already open,
      158      158        and positions it to the beginning.  A flag internal to the socket library
      159      159        is initialized from the flag parameter.
      160      160        .SPB
      161      161        The flag parameter specifies whether the etc:hosts file is to remain open
      162      162        after use by any of the hosts file manipulation functions.  If the flag
      163      163        is nonzero the file will be kept open.
      164      164        .SPB
      165      165        If the sethostent() function is successful, the ptr result contains an
      166      166        arbitrary non-NULL value.
      167      167        .SPB
      168      168        If the sethostent() function is unsuccessful, the ptr result contains a
      169      169        NULL pointer.
      170      170        ..::IT "Errors:"
      171      171        A NULL pointer is returned if any error occurs while opening or positioning
      172      172        the etc:hosts file.
      173      173        */
      174      174        /*F* NAME: endhostent() and XSL$ENDHOSTENT  --  End Host Entry
      175      175        ..::IT "Purpose:"
      176      176        .INL +4
      177      177        Closes the etc:hosts file.
      178      178        ..::IT "C Usage:"
      179      179        .INL 4
      180      180        .FIF
      181      181        ptr = endhostent();
      182      182        ..::IT "PL6 Usage:"
      183      183        .INL 4
      184      184        .FIF
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:53   
      185      185        CALL XSL$ENDHOSTENT( ptr );
      186      186        ..::IT "Parameters:"
      187      187        .INL 4
      188      188        .FIF
      189      189        (none)
      190      190        ..::IT "Result:"
      191      191        .INL 4
      192      192        .FIF
      193      193        ptr         pointer to arbitrary location
      194      194        ..::IT "Description:"
      195      195        The endhostent() function closes the etc:hosts file.
      196      196        .SPB
      197      197        If the endhostent() function is successful, the ptr result contains an
      198      198        arbitrary non-NULL value.
      199      199        .SPB
      200      200        If the endhostent() function is unsuccessful, the ptr result contains a
      201      201        NULL pointer.
      202      202        ..::IT "Errors:"
      203      203        A NULL pointer is returned if any error occurs while closing
      204      204        the hosts file.
      205      205        */
      206      206        /*F* NAME: getnetbyaddr() and XSL$GETNETBYADDR  --  Look Up Network by Address
      207      207        ..::IT "Purpose:"
      208      208        .INL +4
      209      209        Searches the etc:networks file for an entry whose address matches that specified.
      210      210        ..::IT "C Usage:"
      211      211        .INL 4
      212      212        .FIF
      213      213        ptr = getnetbyaddr( netnum, type );
      214      214        ..::IT "PL6 Usage:"
      215      215        .INL 4
      216      216        .FIF
      217      217        CALL XSL$GETNETBYADDR( ptr, netnum, type );
      218      218        ..::IT "Parameters:"
      219      219        .INL 4
      220      220        .FIF
      221      221        netnum      integer network number
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:54   
      222      222
      223      223        type        integer address type
      224      224        ..::IT "Result:"
      225      225        .INL 4
      226      226        .FIF
      227      227        ptr         pointer to static buffer containing a network entry
      228      228        ..::IT "Description:"
      229      229        The getnetbyaddr() function sequentially searches the etc:networks file for the
      230      230        first entry whose network number matches the specified network number.  This
      231      231        entry is parsed into a netent structure in a static buffer within the
      232      232        socket library, and a pointer to this buffer is returned.
      233      233        .SPB
      234      234        The netnum parameter specifies the network number of interest.
      235      235        .SPB
      236      236        The type parameter specifies the address format.  Equates for the possible
      237      237        values can be found in <xsl_socket.h> or XSL_SOCKET_E.  Only the "DARPA Internet"
      238      238        address format is currently supported; it is selected by coding AF_INET or
      239      239        %XSL_AF_INET in C or PL6 source, respectively.
      240      240        .SPB
      241      241        If the getnetbyaddr() function is successful, the ptr result contains a
      242      242        pointer to a static buffer within the socket library containing a netent
      243      243        structure for the matching entry.
      244      244        .SPB
      245      245        If the getnetbyaddr() function is unsuccessful, the ptr result contains a
      246      246        NULL pointer.
      247      247        ..::IT "Errors:"
      248      248        A NULL pointer is returned if any error occurs while reading the
      249      249        etc:networks file, including reaching the end of the file without matching
      250      250        the network number.
      251      251        */
      252      252        /*F* NAME: getnetbyname() and XSL$GETNETBYNAME  --  Look Up Network by Name
      253      253        ..::IT "Purpose:"
      254      254        .INL +4
      255      255        Searches the etc:networks file for an entry whose name matches that specified.
      256      256        ..::IT "C Usage:"
      257      257        .INL 4
      258      258        .FIF
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:55   
      259      259        ptr = getnetbyname( name );
      260      260        ..::IT "PL6 Usage:"
      261      261        .INL 4
      262      262        .FIF
      263      263        CALL XSL$GETNETBYNAME( ptr, name );
      264      264        ..::IT "Parameters:"
      265      265        .INL 4
      266      266        .FIF
      267      267        name        character array containing a network name to look up
      268      268        ..::IT "Result:"
      269      269        .INL 4
      270      270        .FIF
      271      271        ptr         pointer to static buffer containing a network entry
      272      272        ..::IT "Description:"
      273      273        The getnetbyname() function sequentially searches the etc:networks file for the
      274      274        first entry whose name matches the specified name.  This entry is
      275      275        parsed into a netent structure in a static buffer within the socket library,
      276      276        and a pointer to this buffer is returned.
      277      277        .SPB
      278      278        The name parameter specifies an application-defined buffer containing the
      279      279        name of the network to be looked up.
      280      280        .SPB
      281      281        If the getnetbyname() function is successful, the ptr result contains a
      282      282        pointer to a static buffer within the socket library containing a netent
      283      283        structure for the matching entry.
      284      284        .SPB
      285      285        If the getnetbyname() function is unsuccessful, the ptr result contains a
      286      286        NULL pointer.
      287      287        ..::IT "Errors:"
      288      288        A NULL pointer is returned if any error occurs while reading the
      289      289        etc:networks file, including reaching the end of the file without matching
      290      290        the name.
      291      291        */
      292      292        /*F* NAME: getnetent() and XSL$GETNETENT  --  Get Network Entry
      293      293        ..::IT "Purpose:"
      294      294        .INL +4
      295      295        Reads the next entry of the etc:networks file into an internal buffer.
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:56   
      296      296        ..::IT "C Usage:"
      297      297        .INL 4
      298      298        .FIF
      299      299        ptr = getnetent();
      300      300        ..::IT "PL6 Usage:"
      301      301        .INL 4
      302      302        .FIF
      303      303        CALL XSL$GETNETENT( ptr );
      304      304        ..::IT "Parameters:"
      305      305        .INL 4
      306      306        .FIF
      307      307        (none)
      308      308        ..::IT "Result:"
      309      309        .INL 4
      310      310        .FIF
      311      311        ptr         pointer to static buffer containing a network entry
      312      312        ..::IT "Description:"
      313      313        The getnetent() function opens the etc:networks file, if it is not already open,
      314      314        and reads the next entry and parses it into a netent structure in a
      315      315        static buffer within the socket library.  A pointer to this buffer is
      316      316        returned.
      317      317        .SPB
      318      318        If the getnetent() function is successful, the ptr result contains a
      319      319        pointer to a static buffer within the socket library containing a netent
      320      320        structure for the entry read.
      321      321        .SPB
      322      322        If the getnetent() function is unsuccessful, the ptr result contains a
      323      323        NULL pointer.
      324      324        ..::IT "Errors:"
      325      325        A NULL pointer is returned if any error occurs while reading the
      326      326        etc:networks file, including reaching the end of the file.
      327      327        */
      328      328        /*F* NAME: setnetent() and XSL$SETNETENT  --  Set Network Entry
      329      329        ..::IT "Purpose:"
      330      330        .INL +4
      331      331        Opens or positions the etc:networks file and initializes a stay-open flag.
      332      332        ..::IT "C Usage:"
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:57   
      333      333        .INL 4
      334      334        .FIF
      335      335        ptr = setnetent( flag );
      336      336        ..::IT "PL6 Usage:"
      337      337        .INL 4
      338      338        .FIF
      339      339        CALL XSL$SETNETENT( ptr, flag );
      340      340        ..::IT "Parameters:"
      341      341        .INL 4
      342      342        .FIF
      343      343        flag        integer flag
      344      344        ..::IT "Result:"
      345      345        .INL 4
      346      346        .FIF
      347      347        ptr         pointer to arbitrary location
      348      348        ..::IT "Description:"
      349      349        The setnetent() function opens the etc:networks file, if it is not already open,
      350      350        and positions it to the beginning.  A flag internal to the socket library
      351      351        is initialized from the flag parameter.
      352      352        .SPB
      353      353        The flag parameter specifies whether the etc:networks file is to remain open
      354      354        after use by any of the networks file manipulation functions.  If the flag
      355      355        is nonzero the file will be kept open.
      356      356        .SPB
      357      357        If the setnetent() function is successful, the ptr result contains an
      358      358        arbitrary non-NULL value.
      359      359        .SPB
      360      360        If the setnetent() function is unsuccessful, the ptr result contains a
      361      361        NULL pointer.
      362      362        ..::IT "Errors:"
      363      363        A NULL pointer is returned if any error occurs while opening or positioning
      364      364        the etc:networks file.
      365      365        */
      366      366        /*F* NAME: endnetent() and XSL$ENDNETENT  --  End Network Entry
      367      367        ..::IT "Purpose:"
      368      368        .INL +4
      369      369        Closes the etc:networks file.
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:58   
      370      370        ..::IT "C Usage:"
      371      371        .INL 4
      372      372        .FIF
      373      373        ptr = endnetent();
      374      374        ..::IT "PL6 Usage:"
      375      375        .INL 4
      376      376        .FIF
      377      377        CALL XSL$ENDNETENT( ptr );
      378      378        ..::IT "Parameters:"
      379      379        .INL 4
      380      380        .FIF
      381      381        (none)
      382      382        ..::IT "Result:"
      383      383        .INL 4
      384      384        .FIF
      385      385        ptr         pointer to arbitrary location
      386      386        ..::IT "Description:"
      387      387        The endnetent() function closes the etc:networks file.
      388      388        .SPB
      389      389        If the endnetent() function is successful, the ptr result contains an
      390      390        arbitrary non-NULL value.
      391      391        .SPB
      392      392        If the endnetent() function is unsuccessful, the ptr result contains a
      393      393        NULL pointer.
      394      394        ..::IT "Errors:"
      395      395        A NULL pointer is returned if any error occurs while closing
      396      396        the etc:networks file.
      397      397        */
      398      398        /*F* NAME: getprotobyname() and XSL$GETPROTOBYNAME  --  Look Up Protocol by Name
      399      399        ..::IT "Purpose:"
      400      400        .INL +4
      401      401        Searches the etc:protocols file for an entry whose name matches that specified.
      402      402        ..::IT "C Usage:"
      403      403        .INL 4
      404      404        .FIF
      405      405        ptr = getprotobyname( name );
      406      406        ..::IT "PL6 Usage:"
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:59   
      407      407        .INL 4
      408      408        .FIF
      409      409        CALL XSL$GETPROTOBYNAME( ptr, name );
      410      410        ..::IT "Parameters:"
      411      411        .INL 4
      412      412        .FIF
      413      413        name        character array containing a protocol name to look up
      414      414        ..::IT "Result:"
      415      415        .INL 4
      416      416        .FIF
      417      417        ptr         pointer to static buffer containing a protocol entry
      418      418        ..::IT "Description:"
      419      419        The getprotobyname() function sequentially searches the etc:protocols file for the
      420      420        first entry whose name matches the specified name.  This entry is
      421      421        parsed into a protoent structure in a static buffer within the socket library,
      422      422        and a pointer to this buffer is returned.
      423      423        .SPB
      424      424        The name parameter specifies an application-defined buffer containing the
      425      425        name of the protocol to be looked up.
      426      426        .SPB
      427      427        If the getprotobyname() function is successful, the ptr result contains a
      428      428        pointer to a static buffer within the socket library containing a protoent
      429      429        structure for the matching entry.
      430      430        .SPB
      431      431        If the getprotobyname() function is unsuccessful, the ptr result contains a
      432      432        NULL pointer.
      433      433        ..::IT "Errors:"
      434      434        A NULL pointer is returned if any error occurs while reading the
      435      435        etc:protocols file, including reaching the end of the file without matching
      436      436        the name.
      437      437        */
      438      438        /*F* NAME: getprotobynumber() and XSL$GETPROTOBYNUMBER  -- Look Up Protocol by Numb
               438        er
      439      439        ..::IT "Purpose:"
      440      440        .INL +4
      441      441        Searches the etc:protocols file for an entry whose number matches that specified.
      442      442        ..::IT "C Usage:"
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:60   
      443      443        .INL 4
      444      444        .FIF
      445      445        ptr = getprotobynumber( proto );
      446      446        ..::IT "PL6 Usage:"
      447      447        .INL 4
      448      448        .FIF
      449      449        CALL XSL$GETPROTOBYNUMBER( ptr, proto );
      450      450        ..::IT "Parameters:"
      451      451        .INL 4
      452      452        .FIF
      453      453        proto       integer protocol number
      454      454        ..::IT "Result:"
      455      455        .INL 4
      456      456        .FIF
      457      457        ptr         pointer to static buffer containing a protocol entry
      458      458        ..::IT "Description:"
      459      459        The getprotobynumber() function sequentially searches the etc:protocols file for
      460      460        the first entry whose number matches the specified number.  This entry is
      461      461        parsed into a protoent structure in a static buffer within the socket library,
      462      462        and a pointer to this buffer is returned.
      463      463        .SPB
      464      464        The proto parameter specifies the number of the protocol of interest.
      465      465        .SPB
      466      466        If the getprotobynumber() function is successful, the ptr result contains a
      467      467        pointer to a static buffer within the socket library containing a protoent
      468      468        structure for the matching entry.
      469      469        .SPB
      470      470        If the getprotobyaddr() function is unsuccessful, the ptr result contains a
      471      471        NULL pointer.
      472      472        ..::IT "Errors:"
      473      473        A NULL pointer is returned if any error occurs while reading the
      474      474        etc:protocols file, including reaching the end of the file without matching
      475      475        the address.
      476      476        */
      477      477        /*F* NAME: getprotoent() and XSL$GETPROTOENT  --  Get Protocol Entry
      478      478        ..::IT "Purpose:"
      479      479        .INL +4
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:61   
      480      480        Reads the next entry of the etc:protocols file into an internal buffer.
      481      481        ..::IT "C Usage:"
      482      482        .INL 4
      483      483        .FIF
      484      484        ptr = getprotoent();
      485      485        ..::IT "PL6 Usage:"
      486      486        .INL 4
      487      487        .FIF
      488      488        CALL XSL$GETPROTOENT( ptr );
      489      489        ..::IT "Parameters:"
      490      490        .INL 4
      491      491        .FIF
      492      492        (none)
      493      493        ..::IT "Result:"
      494      494        .INL 4
      495      495        .FIF
      496      496        ptr         pointer to static buffer containing a protocol entry
      497      497        ..::IT "Description:"
      498      498        The getprotoent() function opens the etc:protocols file, if it is not already open,
      499      499        and reads the next entry and parses it into a protoent structure in a
      500      500        static buffer within the socket library.  A pointer to this buffer is
      501      501        returned.
      502      502        .SPB
      503      503        If the getprotoent() function is successful, the ptr result contains a
      504      504        pointer to a static buffer within the socket library containing a protoent
      505      505        structure for the entry read.
      506      506        .SPB
      507      507        If the getprotoent() function is unsuccessful, the ptr result contains a
      508      508        NULL pointer.
      509      509        ..::IT "Errors:"
      510      510        A NULL pointer is returned if any error occurs while reading the
      511      511        etc:protocols file, including reaching the end of the file.
      512      512        */
      513      513        /*F* NAME: setprotoent() and XSL$SETPROTOENT  --  Set Protocol Entry
      514      514        ..::IT "Purpose:"
      515      515        .INL +4
      516      516        Opens or positions the etc:protocols file and initializes a stay-open flag.
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:62   
      517      517        ..::IT "C Usage:"
      518      518        .INL 4
      519      519        .FIF
      520      520        ptr = setprotoent( flag );
      521      521        ..::IT "PL6 Usage:"
      522      522        .INL 4
      523      523        .FIF
      524      524        CALL XSL$SETPROTOENT( ptr, flag );
      525      525        ..::IT "Parameters:"
      526      526        .INL 4
      527      527        .FIF
      528      528        flag        integer flag
      529      529        ..::IT "Result:"
      530      530        .INL 4
      531      531        .FIF
      532      532        ptr         pointer to arbitrary location
      533      533        ..::IT "Description:"
      534      534        The setprotoent() function opens the etc:protocols file, if it is not already open,
      535      535        and positions it to the beginning.  A flag internal to the socket library
      536      536        is initialized from the flag parameter.
      537      537        .SPB
      538      538        The flag parameter specifies whether the etc:protocols file is to remain open
      539      539        after use by any of the protocols file manipulation functions.  If the flag
      540      540        is nonzero the file will be kept open.
      541      541        .SPB
      542      542        If the setprotoent() function is successful, the ptr result contains an
      543      543        arbitrary non-NULL value.
      544      544        .SPB
      545      545        If the setprotoent() function is unsuccessful, the ptr result contains a
      546      546        NULL pointer.
      547      547        ..::IT "Errors:"
      548      548        A NULL pointer is returned if any error occurs while opening or positioning
      549      549        the etc:protocols file.
      550      550        */
      551      551        /*F* NAME: endprotoent() and XSL$ENDPROTOENT  --  End Protocol Entry
      552      552        ..::IT "Purpose:"
      553      553        .INL +4
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:63   
      554      554        Closes the etc:protocols file.
      555      555        ..::IT "C Usage:"
      556      556        .INL 4
      557      557        .FIF
      558      558        ptr = endprotoent();
      559      559        ..::IT "PL6 Usage:"
      560      560        .INL 4
      561      561        .FIF
      562      562        CALL XSL$ENDPROTOENT( ptr );
      563      563        ..::IT "Parameters:"
      564      564        .INL 4
      565      565        .FIF
      566      566        (none)
      567      567        ..::IT "Result:"
      568      568        .INL 4
      569      569        .FIF
      570      570        ptr         pointer to arbitrary location
      571      571        ..::IT "Description:"
      572      572        The endprotoent() function closes the etc:protocols file.
      573      573        .SPB
      574      574        If the endprotoent() function is successful, the ptr result contains an
      575      575        arbitrary non-NULL value.
      576      576        .SPB
      577      577        If the endprotoent() function is unsuccessful, the ptr result contains a
      578      578        NULL pointer.
      579      579        ..::IT "Errors:"
      580      580        A NULL pointer is returned if any error occurs while closing
      581      581        the etc:protocols file.
      582      582        */
      583      583        /*F* NAME: getservbyname() and XSL$GETSERVBYNAME  --  Look Up Service by Name
      584      584        ..::IT "Purpose:"
      585      585        .INL +4
      586      586        Searches the etc:services file for an entry whose name matches that specified.
      587      587        ..::IT "C Usage:"
      588      588        .INL 4
      589      589        .FIF
      590      590        ptr = getservbyname( name, proto );
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:64   
      591      591        ..::IT "PL6 Usage:"
      592      592        .INL 4
      593      593        .FIF
      594      594        CALL XSL$GETSERVBYNAME( ptr, name, proto );
      595      595        ..::IT "Parameters:"
      596      596        .INL 4
      597      597        .FIF
      598      598        name        character array containing a service name to look up
      599      599
      600      600        proto       character array containing a protocol name
      601      601        ..::IT "Result:"
      602      602        .INL 4
      603      603        .FIF
      604      604        ptr         pointer to static buffer containing a service entry
      605      605        ..::IT "Description:"
      606      606        The getservbyname() function sequentially searches the etc:services file for the
      607      607        first entry whose name matches the specified name.  This entry is
      608      608        parsed into a servent structure in a static buffer within the socket library,
      609      609        and a pointer to this buffer is returned.  If the optional proto parameter
      610      610        is non-NULL, searches must also match the specified protocol name.
      611      611        .SPB
      612      612        The name parameter specifies an application-defined buffer containing the
      613      613        name of the service to be looked up.
      614      614        .SPB
      615      615        The proto parameter specifies an application-defined buffer containing the
      616      616        name of the protocol. Specifying the proto parameter is optional
      617      617        and can be coded as NULL or zero.
      618      618        .SPB
      619      619        If the getservbyname() function is successful, the ptr result contains a
      620      620        pointer to a static buffer within the socket library containing a servent
      621      621        structure for the matching entry.
      622      622        .SPB
      623      623        If the getservbyname() function is unsuccessful, the ptr result contains a
      624      624        NULL pointer.
      625      625        ..::IT "Errors:"
      626      626        A NULL pointer is returned if any error occurs while reading the
      627      627        etc:services file, including reaching the end of the file without matching
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:65   
      628      628        the name.
      629      629        */
      630      630        /*F* NAME: getservbyport() and XSL$GETSERVBYPORT  --  Look Up Service by Port
      631      631        ..::IT "Purpose:"
      632      632        .INL +4
      633      633        Searches the etc:services file for an entry whose port number matches
      634      634        that specified.
      635      635        ..::IT "C Usage:"
      636      636        .INL 4
      637      637        .FIF
      638      638        ptr = getservbyport( port, proto );
      639      639        ..::IT "PL6 Usage:"
      640      640        .INL 4
      641      641        .FIF
      642      642        CALL XSL$GETSERVBYPORT( ptr, port, proto );
      643      643        ..::IT "Parameters:"
      644      644        .INL 4
      645      645        .FIF
      646      646        port        integer port number
      647      647
      648      648        proto       character array containing protocol name
      649      649        ..::IT "Result:"
      650      650        .INL 4
      651      651        .FIF
      652      652        ptr         pointer to static buffer containing a service entry
      653      653        ..::IT "Description:"
      654      654        The getservbyport() function sequentially searches the etc:services file for
      655      655        the first entry whose port number matches the specified number.  This entry is
      656      656        parsed into a servent structure in a static buffer within the socket library,
      657      657        and a pointer to this buffer is returned.
      658      658        .SPB
      659      659        The port parameter specifies the port number of the service of interest.
      660      660        .SPB
      661      661        The proto parameter specifies an application-defined buffer containing the
      662      662        name of the protocol. Specifying the proto parameter is optional
      663      663        and can be coded as NULL or zero.
      664      664        .SPB
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:66   
      665      665        If the getservbyport() function is successful, the ptr result contains a
      666      666        pointer to a static buffer within the socket library containing a servent
      667      667        structure for the matching entry.
      668      668        .SPB
      669      669        If the getservbyport() function is unsuccessful, the ptr result contains a
      670      670        NULL pointer.
      671      671        ..::IT "Errors:"
      672      672        A NULL pointer is returned if any error occurs while reading the
      673      673        etc:services file, including reaching the end of the file without matching
      674      674        the port number.
      675      675        */
      676      676        /*F* NAME: getservent() and XSL$GETSERVENT  --  Get Service Entry
      677      677        ..::IT "Purpose:"
      678      678        .INL +4
      679      679        Reads the next entry of the etc:services file into an internal buffer.
      680      680        ..::IT "C Usage:"
      681      681        .INL 4
      682      682        .FIF
      683      683        ptr = getservent();
      684      684        ..::IT "PL6 Usage:"
      685      685        .INL 4
      686      686        .FIF
      687      687        CALL XSL$GETSERVENT( ptr );
      688      688        ..::IT "Parameters:"
      689      689        .INL 4
      690      690        .FIF
      691      691        (none)
      692      692        ..::IT "Result:"
      693      693        .INL 4
      694      694        .FIF
      695      695        ptr         pointer to static buffer containing a service entry
      696      696        ..::IT "Description:"
      697      697        The getservent() function opens the etc:services file, if it is not already open,
      698      698        and reads the next entry and parses it into a servent structure in a
      699      699        static buffer within the socket library.  A pointer to this buffer is
      700      700        returned.
      701      701        .SPB
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:67   
      702      702        If the getservent() function is successful, the ptr result contains a
      703      703        pointer to a static buffer within the socket library containing a servent
      704      704        structure for the entry read.
      705      705        .SPB
      706      706        If the getservent() function is unsuccessful, the ptr result contains a
      707      707        NULL pointer.
      708      708        ..::IT "Errors:"
      709      709        A NULL pointer is returned if any error occurs while reading the
      710      710        etc:services file, including reaching the end of the file.
      711      711        */
      712      712        /*F* NAME: setservent() and XSL$SETSERVENT  --  Set Service Entry
      713      713        ..::IT "Purpose:"
      714      714        .INL +4
      715      715        Opens or positions the etc:services file and initializes a stay-open flag.
      716      716        ..::IT "C Usage:"
      717      717        .INL 4
      718      718        .FIF
      719      719        ptr = setservent( flag );
      720      720        ..::IT "PL6 Usage:"
      721      721        .INL 4
      722      722        .FIF
      723      723        CALL XSL$SETSERVENT( ptr, flag );
      724      724        ..::IT "Parameters:"
      725      725        .INL 4
      726      726        .FIF
      727      727        flag        integer flag
      728      728        ..::IT "Result:"
      729      729        .INL 4
      730      730        .FIF
      731      731        ptr         pointer to arbitrary location
      732      732        ..::IT "Description:"
      733      733        The setservent() function opens the etc:services file, if it is not already open,
      734      734        and positions it to the beginning.  A flag internal to the socket library
      735      735        is initialized from the flag parameter.
      736      736        .SPB
      737      737        The flag parameter specifies whether the etc:services file is to remain open
      738      738        after use by any of the services file manipulation functions.  If the flag
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:68   
      739      739        is nonzero the file will be kept open.
      740      740        .SPB
      741      741        If the setservent() function is successful, the ptr result contains an
      742      742        arbitrary non-NULL value.
      743      743        .SPB
      744      744        If the setservent() function is unsuccessful, the ptr result contains a
      745      745        NULL pointer.
      746      746        ..::IT "Errors:"
      747      747        A NULL pointer is returned if any error occurs while opening or positioning
      748      748        the etc:services file.
      749      749        */
      750      750        /*F* NAME: endservent() and XSL$ENDSERVENT  --  End Service Entry
      751      751        ..::IT "Purpose:"
      752      752        .INL +4
      753      753        Closes the etc:services file.
      754      754        ..::IT "C Usage:"
      755      755        .INL 4
      756      756        .FIF
      757      757        ptr = endservent();
      758      758        ..::IT "PL6 Usage:"
      759      759        .INL 4
      760      760        .FIF
      761      761        CALL XSL$ENDSERVENT( ptr );
      762      762        ..::IT "Parameters:"
      763      763        .INL 4
      764      764        .FIF
      765      765        (none)
      766      766        ..::IT "Result:"
      767      767        .INL 4
      768      768        .FIF
      769      769        ptr         pointer to arbitrary location
      770      770        ..::IT "Description:"
      771      771        The endservent() function closes the etc:services file.
      772      772        .SPB
      773      773        If the endservent() function is successful, the ptr result contains an
      774      774        arbitrary non-NULL value.
      775      775        .SPB
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:69   
      776      776        If the endservent() function is unsuccessful, the ptr result contains a
      777      777        NULL pointer.
      778      778        ..::IT "Errors:"
      779      779        A NULL pointer is returned if any error occurs while closing
      780      780        the etc:services file.
      781      781        */
      782      782        /*F* NAME: gethostname() and XSL$GETHOSTNAME  --  Get Current Host Name
      783      783        ..::IT "Purpose:"
      784      784        .INL +4
      785      785        Obtains the name of the host system.
      786      786        ..::IT "C Usage:"
      787      787        .INL 4
      788      788        .FIF
      789      789        status = gethostname( name, namelen );
      790      790        ..::IT "PL6 Usage:"
      791      791        .INL 4
      792      792        .FIF
      793      793        CALL XSL$GETHOSTNAME( status, name, namelen );
      794      794        ..::IT "Parameters:"
      795      795        .INL 4
      796      796        .FIF
      797      797        name        character array buffer
      798      798
      799      799        namelen     integer size of name in characters
      800      800        ..::IT "Result:"
      801      801        .INL 4
      802      802        .FIF
      803      803        status      integer error code
      804      804        ..::IT "Description:"
      805      805        The gethostname() function returns the name of the system on which the
      806      806        function was invoked.  The name is found by looking up the alias "localhost"
      807      807        in the etc:hosts file and returning the system name associated with it.
      808      808        .SPB
      809      809        The name parameter specifies an application-defined buffer to receive
      810      810        the host name.
      811      811        .SPB
      812      812        The namelen parameter specifies how large the buffer is, expressed as
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:70   
      813      813        the number of characters it can hold.
      814      814        .SPB
      815      815        If the gethostname() function is successful, the status result contains
      816      816        ESUCCESS or E$SUCCESS.
      817      817        .SPB
      818      818        If the gethostname() function is unsuccessful, the status result contains
      819      819        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
      820      820        to determine the specific error condition.  The XSL$GETHOSTNAME procedure
      821      821        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      822      822        to the gethostname() function.
      823      823        ..::IT "Errors:"
      824      824        Following are the possible error conditions reported when the gethostname()
      825      825        function is unsuccessful.  Equates for the possible values can be found in
      826      826        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      827      827
      828      828        .FIF
      829      829
      830      830        C #define               PL6 %EQU
      831      831        ----------------------- -----------------------
      832      832        ENOENT                  E$NOENT
      833      833        .FIN
      834      834        The hosts file does not exist.
      835      835        .FIF
      836      836        */
      837      837        XSL$ETCFILES: PROC( RESULT$, PARM1, PARM2, PARM3) ALTRET;

    837  7 000000   000000 700200 xent  XSL$ETCFILES TSX0  ! X66_AUTO_4
         7 000001   000134 000004                    ZERO    92,4
         7 000002   000005 710000 7                  TRA     s:7685

      838      838        %INCLUDE B$TABLES_C;
      839      946            %B$XL_UPPER( NAME=UPCASE);
      840      950        %INCLUDE CP_6;
      841     1031            %F$DCB;
      842     1088            %B$ALT;
      843     1096            %B$TCB;
      844     1099            %FPT_OPEN( DCB=F$HOSTS, ASN=COMGROUP, FUN=UPDATE, SHARE=ALL,
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:71   
      845     1100                    ACCT=VLP_ACCT, NAME=NAMESERCG, STCLASS=CONSTANT);
      846     1209            %FPT_WRITE( DCB=F$HOSTS, BUF="RQS.BUF", STATION=VLP_STATION, STCLASS=CONSTANT);
      847     1240            %VLP_STATION( STATION='SERVER', STCLASS=CONSTANT);
      848     1267            %VLP_ACCT( ACCT=':SYS', STCLASS=CONSTANT);
      849     1280            %FPT_OPEN( FPTN=TEST_OPEN, DCB=F$HOSTS, ASN=FILE, FUN=IN, SHARE=NONE,
      850     1281                    TEST=YES, ACS=SEQUEN, NAME=ETC_HOSTS, STCLASS=CONSTANT);
      851     1390            %VLP_NAME( FPTN=NAMESERCG, NAME='NAMESERCG', STCLASS=CONSTANT);
      852     1417            %VLP_NAME( FPTN=ETC_HOSTS, NAME='etc:hosts', STCLASS=CONSTANT);
      853     1444            %FPT_CLOSE( DISP=SAVE);
      854     1486            %FPT_PFIL( BOF=YES);
      855     1501            %FPT_READ( BUF=ETCBUFFER);
      856     1540        %INCLUDE XU_MACRO_C;
      857     4646            %P_PCB( STCLASS=STATIC, W=PARSEWORK, WSZ="SIZEW( PARSEWORK)", T = ETCBUFFER,
      858     4647                    C_LD='  ', C_TL='  ', CNTU=NO);
      859     4846            %PARSE$OUT( NAME=ITM, STCLASS="BASED( ITM$)");
      860     4891            %PARSE$OUT( NAME=OUT, STCLASS="BASED( OUT$)");
      861     4936            %PARSE$SYM( NAME=SYM, STCLASS="BASED( SYM$)");
      862     4974        %INCLUDE XSL_PERR_C;
      863     5029    1       DCL XSL_ERRNO SBIN SYMREF;
      864     5030        %INCLUDE XSL_SOCKET_E;
      865     5288        %INCLUDE XSL_SOCKET_M;
      866     6049            %XSL$HOSTENT( FPTN=XSL_HOSTENT, STCLASS=CONSTANT);
      867     6109            %XSL$NETENT( FPTN=XSL_NETENT, STCLASS=CONSTANT);
      868     6160            %XSL$PROTOENT( FPTN=XSL_PROTOENT, STCLASS=CONSTANT);
      869     6203            %XSL$SERVENT( FPTN=XSL_SERVENT, STCLASS=CONSTANT);
      870     6254        %INCLUDE XSL_NODES_E;
      871     6286        %INCLUDE XSL_INTERNAL_M;
      872     6537            %XSL_REFDATA;
      873     6540        %INCLUDE CP_6_SUBS;
      874     7080
      875     7081    1       DCL XSL_NODES ENTRY CONV(5);
      876     7082    1       DCL XSL$INET_ADDR ENTRY(2) ALTRET;
      877     7083    1       DCL XSL$INET_NETWORK ENTRY(2) ALTRET;
      878     7084    1       DCL XSL$HTONL ENTRY(2);
      879     7085    1       DCL X$PARSE ENTRY(1) ALTRET;
      880     7086
      881     7087    1       DCL B$TCB$ PTR SYMREF READONLY;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:72   
      882     7088    1       DCL R_HOSTS SBIN SYMREF;
      883     7089    1       DCL R_NETWORKS SBIN SYMREF;
      884     7090    1       DCL R_PROTOCOLS SBIN SYMREF;
      885     7091    1       DCL R_SERVICES SBIN SYMREF;
      886     7092
      887     7093            %M$DCB( DCBN=F$HOSTS, ASN=FILE, ACS=SEQUEN, FUN=IN, ACCT=':SYS',
      888     7094              NAME='etc:hosts');
      889     7168            %M$DCB( DCBN=F$NETWORKS, ASN=FILE, ACS=SEQUEN, FUN=IN, ACCT=':SYS',
      890     7169              NAME='etc:networks');
      891     7243            %M$DCB( DCBN=F$PROTOCOLS, ASN=FILE, ACS=SEQUEN, FUN=IN, ACCT=':SYS',
      892     7244              NAME='etc:protocols');
      893     7318            %M$DCB( DCBN=F$SERVICES, ASN=FILE, ACS=SEQUEN, FUN=IN, ACCT=':SYS',
      894     7319              NAME='etc:services');
      895     7393
      896     7394
      897     7395    1       DCL ACTION SBIN;
      898     7396        %EQU GETENT = 0;
      899     7397        %EQU SETENT = 1;
      900     7398        %EQU ENDENT = 2;
      901     7399        %EQU BYNAME = 3;
      902     7400        %EQU BYADDR = 4;
      903     7401        %EQU BYPORT = 5;
      904     7402        %EQU BYNUMBER = 6;
      905     7403    1       DCL ENTRYFLAG SBIN;
      906     7404        %EQU HOSTS = 0;
      907     7405        %EQU NETWORKS = 1;
      908     7406        %EQU PROTOCOLS = 2;
      909     7407        %EQU SERVICES = 3;
      910     7408    1       DCL LEN SBIN;
      911     7409    1       DCL TXTN CHAR( LEN) BASED;
      912     7410    1       DCL P1LEN SBIN;
      913     7411    1       DCL TXT1N CHAR( P1LEN) BASED;
      914     7412    1       DCL P2LEN SBIN;
      915     7413    1       DCL TXT2N CHAR( P2LEN) BASED;
      916     7414    1       DCL I SBIN;
      917     7415    1       DCL INETADDR(0:5) UBIN STATIC INIT( 0*6);
      918     7416    1       DCL INETPTR$(0:5) PTR STATIC INIT( ADDR( NIL)*6);
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:73   
      919     7417    1       DCL NAMEPTR$(0:5) PTR STATIC INIT( ADDR( NIL)*6);
      920     7418    1       DCL B$PTR PTR BASED;
      921     7419    1       DCL ITM$ PTR;
      922     7420    1       DCL J SBIN;
      923     7421    1       DCL OUT$ PTR;
      924     7422    1       DCL SYM$ REDEF OUT$ PTR;
      925     7423    1       DCL TMP$ PTR;
      926     7424    1       DCL TMPCHARS CHAR(32) BASED( TMP$);
      927     7425    1       DCL TRYSERVER BIT(1) UNAL;
      928     7426    1       DCL PARM1 SBIN;
      929     7427    1       DCL HTONLPARM1 SBIN;
      930     7428    1       DCL PARM1$ PTR;
      931     7429    1       DCL PARM2 SBIN;
      932     7430    1       DCL PARM2$ PTR;
      933     7431    1       DCL PARM3 SBIN;
      934     7432    1       DCL PARM3$ PTR;
      935     7433    1       DCL PTR# SBIN;
      936     7434    1       DCL PTRLEN(0:31) SBIN;
      937     7435    1       DCL RESULT$ PTR;
      938     7436    1       DCL RESULT REDEF RESULT$ SBIN;
      939     7437    1       DCL H_NAMELEN SBIN;
      940     7438    1       DCL H_ADDRLEN SBIN;
      941     7439    1       DCL N_NAMELEN SBIN;
      942     7440    1       DCL P_NAMELEN SBIN;
      943     7441    1       DCL S_NAMELEN SBIN;
      944     7442    1       DCL S_PROTOLEN SBIN;
      945     7443    1       DCL ARS(0:3) SBIN STATIC INIT(0*4);
      946     7444    1       DCL ROOT$(0:3) PTR CONSTANT
      947     7445    1        INIT(ADDR(R_HOSTS), ADDR(R_NETWORKS), ADDR(R_PROTOCOLS), ADDR(R_SERVICES));
      948     7446    1       DCL DCBNUMS(0:3) SBIN CONSTANT INIT(DCBNUM(F$HOSTS), DCBNUM(F$NETWORKS),
      949     7447    1         DCBNUM(F$PROTOCOLS), DCBNUM(F$SERVICES));
      950     7448    1       DCL STAYOPEN(0:3) SBIN STATIC INIT(0*4);
      951     7449    1       DCL LOCAL_HOST_NAME CONSTANT CHAR(0) INIT(%CONCAT('LOCALHOST',BINASC(0)));
      952     7450    1       DCL 1 TXTC BASED ALIGNED,
      953     7451    1           2 LEN UBIN(9) CALIGNED,
      954     7452    1           2 TXT CHAR(TXTC.LEN) CALIGNED;
      955     7453    1       DCL ETCBUFFER CHAR(132) STATIC;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:74   
      956     7454    1       DCL 1 RSP REDEF ETCBUFFER,
      957     7455    1           2 BUF,
      958     7456    1           3 RESULT SBIN,
      959     7457    1           3 ERRNO SBIN,
      960     7458    1           2 * CHAR(124) UNAL;
      961     7459    1       DCL RESULTBUF CHAR(132) STATIC;
      962     7460    1       DCL 1 RQS REDEF RESULTBUF,
      963     7461    1           2 BUF,
      964     7462    1           3 TYPE UBIN(18) UNAL,
      965     7463    1           3 LEN UBIN(18) UNAL,
      966     7464    1           3 RELOC$ PTR,
      967     7465    1           3 DATA CHAR(32) UNAL,
      968     7466    1           2 * CHAR(92) UNAL;
      969     7467            %XSL$HOSTENT( STCLASS=REDEF RESULTBUF, LAST=",");
      970     7527    1           2 PTR$(0:27) PTR;
      971     7528            %XSL$NETENT( STCLASS=REDEF RESULTBUF, LAST=",");
      972     7579    1           2 * PTR, 2 PTR$(0:27) PTR;
      973     7580            %XSL$PROTOENT( STCLASS=REDEF RESULTBUF, LAST=",");
      974     7623    1           2 * CHAR(8), 2 PTR$(0:27) PTR;
      975     7624            %XSL$SERVENT( STCLASS=REDEF RESULTBUF, LAST=",");
      976     7675    1           2 * PTR, 2 PTR$(0:27) PTR;
      977     7676    1       DCL 1 XSL$ANYENT REDEF RESULTBUF,
      978     7677    1           2 * CHAR(20),2 PTR$(0:27) PTR;
      979     7678    1       DCL PARSEWORK(0:199) SBIN STATIC;
      980     7679    1       DCL PARM1UP CHAR(32);
      981     7680    1       DCL PARM2UP CHAR(32);
      982     7681    1       DCL NAMEUP CHAR(32);
      983     7682
      984     7683    1   XSL$GETHOSTBYADDR: ENTRY( RESULT$, PARM1, PARM2, PARM3) ALTRET;

   7683  7 000003   000000 700200 xent  XSL$GETHOST* TSX0  ! X66_AUTO_4
         7 000004   000134 000004                    ZERO    92,4

      985     7684
      986     7685    1       TRYSERVER = '1'B;

   7685  7 000005   400000 236003                    LDQ     -131072,DU
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:75   
         7 000006   200021 756100                    STQ     TRYSERVER,,AUTO

      987     7686    1       GOTO H1;

   7686  7 000007   000013 710000 7                  TRA     H1

      988     7687
      989     7688    1   XSL$$GETHOSTBYADDR: ENTRY( RESULT$, PARM1, PARM2, PARM3) ALTRET;

   7688  7 000010   000000 700200 xent  XSL$$GETHOS* TSX0  ! X66_AUTO_4
         7 000011   000134 000004                    ZERO    92,4

      990     7689
      991     7690    1       TRYSERVER = '0'B;

   7690  7 000012   200021 450100                    STZ     TRYSERVER,,AUTO

      992     7691    1   H1:
      993     7692    1       ENTRYFLAG = %HOSTS;

   7692  7 000013   200010 450100       H1           STZ     ENTRYFLAG,,AUTO

      994     7693    1       ACTION = %BYADDR;

   7693  7 000014   000004 235007                    LDA     4,DL
         7 000015   200007 755100                    STA     ACTION,,AUTO

      995     7694    1       GOTO COMMON;

   7694  7 000016   000251 710000 7                  TRA     COMMON

      996     7695
      997     7696    1   XSL$GETNETBYADDR: ENTRY( RESULT$, PARM1, PARM2) ALTRET;

   7696  7 000017   000000 700200 xent  XSL$GETNETB* TSX0  ! X66_AUTO_4
         7 000020   000134 000004                    ZERO    92,4

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:76   
      998     7697
      999     7698    1       ENTRYFLAG = %NETWORKS;

   7698  7 000021   000001 235007                    LDA     1,DL
         7 000022   200010 755100                    STA     ENTRYFLAG,,AUTO

     1000     7699    1       ACTION = %BYADDR;

   7699  7 000023   000004 236007                    LDQ     4,DL
         7 000024   200007 756100                    STQ     ACTION,,AUTO

     1001     7700    1       GOTO COMMON;

   7700  7 000025   000251 710000 7                  TRA     COMMON

     1002     7701
     1003     7702    1   XSL$GETSERVBYNAME: ENTRY( RESULT$, PARM1, PARM2) ALTRET;

   7702  7 000026   000000 700200 xent  XSL$GETSERV* TSX0  ! X66_AUTO_4
         7 000027   000134 000004                    ZERO    92,4

     1004     7703
     1005     7704    1       ENTRYFLAG = %SERVICES;

   7704  7 000030   000003 235007                    LDA     3,DL
         7 000031   200010 755100                    STA     ENTRYFLAG,,AUTO

     1006     7705    1       ACTION = %BYNAME;

   7705  7 000032   200007 755100                    STA     ACTION,,AUTO

     1007     7706    1       GOTO COMMON;

   7706  7 000033   000251 710000 7                  TRA     COMMON

     1008     7707
     1009     7708    1   XSL$GETSERVBYPORT: ENTRY( RESULT$, PARM1, PARM2) ALTRET;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:77   

   7708  7 000034   000000 700200 xent  XSL$GETSERV* TSX0  ! X66_AUTO_4
         7 000035   000134 000004                    ZERO    92,4

     1010     7709
     1011     7710    1       ENTRYFLAG = %SERVICES;

   7710  7 000036   000003 235007                    LDA     3,DL
         7 000037   200010 755100                    STA     ENTRYFLAG,,AUTO

     1012     7711    1       ACTION = %BYPORT;

   7711  7 000040   000005 236007                    LDQ     5,DL
         7 000041   200007 756100                    STQ     ACTION,,AUTO

     1013     7712    1       GOTO COMMON;

   7712  7 000042   000251 710000 7                  TRA     COMMON

     1014     7713
     1015     7714    1   XSL$GETHOSTBYNAME: ENTRY( RESULT$, PARM1) ALTRET;

   7714  7 000043   000000 700200 xent  XSL$GETHOST* TSX0  ! X66_AUTO_4
         7 000044   000134 000004                    ZERO    92,4

     1016     7715
     1017     7716    1       TRYSERVER = '1'B;

   7716  7 000045   400000 236003                    LDQ     -131072,DU
         7 000046   200021 756100                    STQ     TRYSERVER,,AUTO

     1018     7717    1       GOTO H2;

   7717  7 000047   000053 710000 7                  TRA     H2

     1019     7718
     1020     7719    1   XSL$$GETHOSTBYNAME: ENTRY( RESULT$, PARM1) ALTRET;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:78   

   7719  7 000050   000000 700200 xent  XSL$$GETHOS* TSX0  ! X66_AUTO_4
         7 000051   000134 000004                    ZERO    92,4

     1021     7720
     1022     7721    1       TRYSERVER = '0'B;

   7721  7 000052   200021 450100                    STZ     TRYSERVER,,AUTO

     1023     7722    1   H2:
     1024     7723    1       ENTRYFLAG = %HOSTS;

   7723  7 000053   200010 450100       H2           STZ     ENTRYFLAG,,AUTO

     1025     7724    1       ACTION = %BYNAME;

   7724  7 000054   000003 235007                    LDA     3,DL
         7 000055   200007 755100                    STA     ACTION,,AUTO

     1026     7725    1       GOTO COMMON;

   7725  7 000056   000251 710000 7                  TRA     COMMON

     1027     7726
     1028     7727    1   XSL$GETNETBYNAME: ENTRY( RESULT$, PARM1) ALTRET;

   7727  7 000057   000000 700200 xent  XSL$GETNETB* TSX0  ! X66_AUTO_4
         7 000060   000134 000004                    ZERO    92,4

     1029     7728
     1030     7729    1       ENTRYFLAG = %NETWORKS;

   7729  7 000061   000001 235007                    LDA     1,DL
         7 000062   200010 755100                    STA     ENTRYFLAG,,AUTO

     1031     7730    1       ACTION = %BYNAME;

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:79   
   7730  7 000063   000003 236007                    LDQ     3,DL
         7 000064   200007 756100                    STQ     ACTION,,AUTO

     1032     7731    1       GOTO COMMON;

   7731  7 000065   000251 710000 7                  TRA     COMMON

     1033     7732
     1034     7733    1   XSL$GETPROTOBYNAME: ENTRY( RESULT$, PARM1) ALTRET;

   7733  7 000066   000000 700200 xent  XSL$GETPROT* TSX0  ! X66_AUTO_4
         7 000067   000134 000004                    ZERO    92,4

     1035     7734
     1036     7735    1       ENTRYFLAG = %PROTOCOLS;

   7735  7 000070   000002 235007                    LDA     2,DL
         7 000071   200010 755100                    STA     ENTRYFLAG,,AUTO

     1037     7736    1       ACTION = %BYNAME;

   7736  7 000072   000003 236007                    LDQ     3,DL
         7 000073   200007 756100                    STQ     ACTION,,AUTO

     1038     7737    1       GOTO COMMON;

   7737  7 000074   000251 710000 7                  TRA     COMMON

     1039     7738
     1040     7739    1   XSL$GETPROTOBYNUMBER: ENTRY( RESULT$, PARM1) ALTRET;

   7739  7 000075   000000 700200 xent  XSL$GETPROT* TSX0  ! X66_AUTO_4
         7 000076   000134 000004                    ZERO    92,4

     1041     7740
     1042     7741    1       ENTRYFLAG = %PROTOCOLS;

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:80   
   7741  7 000077   000002 235007                    LDA     2,DL
         7 000100   200010 755100                    STA     ENTRYFLAG,,AUTO

     1043     7742    1       ACTION = %BYNUMBER;

   7742  7 000101   000006 236007                    LDQ     6,DL
         7 000102   200007 756100                    STQ     ACTION,,AUTO

     1044     7743    1       GOTO COMMON;

   7743  7 000103   000251 710000 7                  TRA     COMMON

     1045     7744
     1046     7745    1   XSL$SETHOSTENT: ENTRY( RESULT$, PARM1) ALTRET;

   7745  7 000104   000000 700200 xent  XSL$SETHOST* TSX0  ! X66_AUTO_4
         7 000105   000134 000004                    ZERO    92,4

     1047     7746
     1048     7747    1       TRYSERVER = '1'B;

   7747  7 000106   400000 236003                    LDQ     -131072,DU
         7 000107   200021 756100                    STQ     TRYSERVER,,AUTO

     1049     7748    1       GOTO H3;

   7748  7 000110   000114 710000 7                  TRA     H3

     1050     7749
     1051     7750    1   XSL$$SETHOSTENT: ENTRY( RESULT$, PARM1) ALTRET;

   7750  7 000111   000000 700200 xent  XSL$$SETHOS* TSX0  ! X66_AUTO_4
         7 000112   000134 000004                    ZERO    92,4

     1052     7751
     1053     7752    1       TRYSERVER = '0'B;

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:81   
   7752  7 000113   200021 450100                    STZ     TRYSERVER,,AUTO

     1054     7753    1   H3:
     1055     7754    1       ENTRYFLAG = %HOSTS;

   7754  7 000114   200010 450100       H3           STZ     ENTRYFLAG,,AUTO

     1056     7755    1       ACTION = %SETENT;

   7755  7 000115   000001 235007                    LDA     1,DL
         7 000116   200007 755100                    STA     ACTION,,AUTO

     1057     7756    1       GOTO COMMON;

   7756  7 000117   000251 710000 7                  TRA     COMMON

     1058     7757
     1059     7758    1   XSL$SETNETENT: ENTRY( RESULT$, PARM1) ALTRET;

   7758  7 000120   000000 700200 xent  XSL$SETNETE* TSX0  ! X66_AUTO_4
         7 000121   000134 000004                    ZERO    92,4

     1060     7759
     1061     7760    1       ENTRYFLAG = %NETWORKS;

   7760  7 000122   000001 235007                    LDA     1,DL
         7 000123   200010 755100                    STA     ENTRYFLAG,,AUTO

     1062     7761    1       ACTION = %SETENT;

   7761  7 000124   200007 755100                    STA     ACTION,,AUTO

     1063     7762    1       GOTO COMMON;

   7762  7 000125   000251 710000 7                  TRA     COMMON

     1064     7763
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:82   
     1065     7764    1   XSL$SETPROTOENT: ENTRY( RESULT$, PARM1) ALTRET;

   7764  7 000126   000000 700200 xent  XSL$SETPROT* TSX0  ! X66_AUTO_4
         7 000127   000134 000004                    ZERO    92,4

     1066     7765
     1067     7766    1       ENTRYFLAG = %PROTOCOLS;

   7766  7 000130   000002 235007                    LDA     2,DL
         7 000131   200010 755100                    STA     ENTRYFLAG,,AUTO

     1068     7767    1       ACTION = %SETENT;

   7767  7 000132   000001 236007                    LDQ     1,DL
         7 000133   200007 756100                    STQ     ACTION,,AUTO

     1069     7768    1       GOTO COMMON;

   7768  7 000134   000251 710000 7                  TRA     COMMON

     1070     7769
     1071     7770    1   XSL$SETSERVENT: ENTRY( RESULT$, PARM1) ALTRET;

   7770  7 000135   000000 700200 xent  XSL$SETSERV* TSX0  ! X66_AUTO_4
         7 000136   000134 000004                    ZERO    92,4

     1072     7771
     1073     7772    1       ENTRYFLAG = %SERVICES;

   7772  7 000137   000003 235007                    LDA     3,DL
         7 000140   200010 755100                    STA     ENTRYFLAG,,AUTO

     1074     7773    1       ACTION = %SETENT;

   7773  7 000141   000001 236007                    LDQ     1,DL
         7 000142   200007 756100                    STQ     ACTION,,AUTO

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:83   
     1075     7774    1       GOTO COMMON;

   7774  7 000143   000251 710000 7                  TRA     COMMON

     1076     7775
     1077     7776    1   XSL$GETHOSTENT: ENTRY( RESULT$) ALTRET;

   7776  7 000144   000000 700200 xent  XSL$GETHOST* TSX0  ! X66_AUTO_4
         7 000145   000134 000004                    ZERO    92,4

     1078     7777
     1079     7778    1       TRYSERVER = '1'B;

   7778  7 000146   400000 236003                    LDQ     -131072,DU
         7 000147   200021 756100                    STQ     TRYSERVER,,AUTO

     1080     7779    1       GOTO H4;

   7779  7 000150   000154 710000 7                  TRA     H4

     1081     7780
     1082     7781    1   XSL$$GETHOSTENT: ENTRY( RESULT$) ALTRET;

   7781  7 000151   000000 700200 xent  XSL$$GETHOS* TSX0  ! X66_AUTO_4
         7 000152   000134 000004                    ZERO    92,4

     1083     7782
     1084     7783    1       TRYSERVER = '0'B;

   7783  7 000153   200021 450100                    STZ     TRYSERVER,,AUTO

     1085     7784    1   H4:
     1086     7785    1       ENTRYFLAG = %HOSTS;

   7785  7 000154   200010 450100       H4           STZ     ENTRYFLAG,,AUTO

     1087     7786    1       ACTION = %GETENT;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:84   

   7786  7 000155   200007 450100                    STZ     ACTION,,AUTO

     1088     7787    1       GOTO COMMON;

   7787  7 000156   000251 710000 7                  TRA     COMMON

     1089     7788
     1090     7789    1   XSL$GETNETENT: ENTRY( RESULT$) ALTRET;

   7789  7 000157   000000 700200 xent  XSL$GETNETE* TSX0  ! X66_AUTO_4
         7 000160   000134 000004                    ZERO    92,4

     1091     7790
     1092     7791    1       ENTRYFLAG = %NETWORKS;

   7791  7 000161   000001 235007                    LDA     1,DL
         7 000162   200010 755100                    STA     ENTRYFLAG,,AUTO

     1093     7792    1       ACTION = %GETENT;

   7792  7 000163   200007 450100                    STZ     ACTION,,AUTO

     1094     7793    1       GOTO COMMON;

   7793  7 000164   000251 710000 7                  TRA     COMMON

     1095     7794
     1096     7795    1   XSL$GETPROTOENT: ENTRY( RESULT$) ALTRET;

   7795  7 000165   000000 700200 xent  XSL$GETPROT* TSX0  ! X66_AUTO_4
         7 000166   000134 000004                    ZERO    92,4

     1097     7796
     1098     7797    1       ENTRYFLAG = %PROTOCOLS;

   7797  7 000167   000002 235007                    LDA     2,DL
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:85   
         7 000170   200010 755100                    STA     ENTRYFLAG,,AUTO

     1099     7798    1       ACTION = %GETENT;

   7798  7 000171   200007 450100                    STZ     ACTION,,AUTO

     1100     7799    1       GOTO COMMON;

   7799  7 000172   000251 710000 7                  TRA     COMMON

     1101     7800
     1102     7801    1   XSL$GETSERVENT: ENTRY( RESULT$) ALTRET;

   7801  7 000173   000000 700200 xent  XSL$GETSERV* TSX0  ! X66_AUTO_4
         7 000174   000134 000004                    ZERO    92,4

     1103     7802
     1104     7803    1       ENTRYFLAG = %SERVICES;

   7803  7 000175   000003 235007                    LDA     3,DL
         7 000176   200010 755100                    STA     ENTRYFLAG,,AUTO

     1105     7804    1       ACTION = %GETENT;

   7804  7 000177   200007 450100                    STZ     ACTION,,AUTO

     1106     7805    1       GOTO COMMON;

   7805  7 000200   000251 710000 7                  TRA     COMMON

     1107     7806
     1108     7807    1   XSL$ENDHOSTENT: ENTRY( RESULT$) ALTRET;

   7807  7 000201   000000 700200 xent  XSL$ENDHOST* TSX0  ! X66_AUTO_4
         7 000202   000134 000004                    ZERO    92,4

     1109     7808
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:86   
     1110     7809    1       TRYSERVER = '1'B;

   7809  7 000203   400000 236003                    LDQ     -131072,DU
         7 000204   200021 756100                    STQ     TRYSERVER,,AUTO

     1111     7810    1       GOTO H5;

   7810  7 000205   000211 710000 7                  TRA     H5

     1112     7811
     1113     7812    1   XSL$$ENDHOSTENT: ENTRY( RESULT$) ALTRET;

   7812  7 000206   000000 700200 xent  XSL$$ENDHOS* TSX0  ! X66_AUTO_4
         7 000207   000134 000004                    ZERO    92,4

     1114     7813
     1115     7814    1       TRYSERVER = '0'B;

   7814  7 000210   200021 450100                    STZ     TRYSERVER,,AUTO

     1116     7815    1   H5:
     1117     7816    1       ENTRYFLAG = %HOSTS;

   7816  7 000211   200010 450100       H5           STZ     ENTRYFLAG,,AUTO

     1118     7817    1       ACTION = %ENDENT;

   7817  7 000212   000002 235007                    LDA     2,DL
         7 000213   200007 755100                    STA     ACTION,,AUTO

     1119     7818    1       GOTO COMMON;

   7818  7 000214   000251 710000 7                  TRA     COMMON

     1120     7819
     1121     7820    1   XSL$ENDNETENT: ENTRY( RESULT$) ALTRET;

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:87   
   7820  7 000215   000000 700200 xent  XSL$ENDNETE* TSX0  ! X66_AUTO_4
         7 000216   000134 000004                    ZERO    92,4

     1122     7821
     1123     7822    1       ENTRYFLAG = %NETWORKS;

   7822  7 000217   000001 235007                    LDA     1,DL
         7 000220   200010 755100                    STA     ENTRYFLAG,,AUTO

     1124     7823    1       ACTION = %ENDENT;

   7823  7 000221   000002 236007                    LDQ     2,DL
         7 000222   200007 756100                    STQ     ACTION,,AUTO

     1125     7824    1       GOTO COMMON;

   7824  7 000223   000251 710000 7                  TRA     COMMON

     1126     7825
     1127     7826    1   XSL$ENDPROTOENT: ENTRY( RESULT$) ALTRET;

   7826  7 000224   000000 700200 xent  XSL$ENDPROT* TSX0  ! X66_AUTO_4
         7 000225   000134 000004                    ZERO    92,4

     1128     7827
     1129     7828    1       ENTRYFLAG = %PROTOCOLS;

   7828  7 000226   000002 235007                    LDA     2,DL
         7 000227   200010 755100                    STA     ENTRYFLAG,,AUTO

     1130     7829    1       ACTION = %ENDENT;

   7829  7 000230   200007 755100                    STA     ACTION,,AUTO

     1131     7830    1       GOTO COMMON;

   7830  7 000231   000251 710000 7                  TRA     COMMON
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:88   

     1132     7831
     1133     7832    1   XSL$ENDSERVENT: ENTRY( RESULT$) ALTRET;

   7832  7 000232   000000 700200 xent  XSL$ENDSERV* TSX0  ! X66_AUTO_4
         7 000233   000134 000004                    ZERO    92,4

     1134     7833
     1135     7834    1       ENTRYFLAG = %SERVICES;

   7834  7 000234   000003 235007                    LDA     3,DL
         7 000235   200010 755100                    STA     ENTRYFLAG,,AUTO

     1136     7835    1       ACTION = %ENDENT;

   7835  7 000236   000002 236007                    LDQ     2,DL
         7 000237   200007 756100                    STQ     ACTION,,AUTO

     1137     7836    1       GOTO COMMON;

   7836  7 000240   000251 710000 7                  TRA     COMMON

     1138     7837
     1139     7838    1   XSL$GETHOSTNAME: ENTRY( RESULT$, PARM1, PARM2) ALTRET;

   7838  7 000241   000000 700200 xent  XSL$GETHOST* TSX0  ! X66_AUTO_4
         7 000242   000134 000004                    ZERO    92,4

     1140     7839
     1141     7840    1       ENTRYFLAG = %HOSTS;

   7840  7 000243   200010 450100                    STZ     ENTRYFLAG,,AUTO

     1142     7841    1       ACTION = %BYNAME;

   7841  7 000244   000003 235007                    LDA     3,DL
         7 000245   200007 755100                    STA     ACTION,,AUTO
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:89   

     1143     7842    1       PARM1$ = ADDR( LOCAL_HOST_NAME);

   7842  7 000246   000000 236000 8                  LDQ     0
         7 000247   200023 756100                    STQ     PARM1$,,AUTO

     1144     7843    1       GOTO COMMON1;

   7843  7 000250   000253 710000 7                  TRA     COMMON1

     1145     7844
     1146     7845        %EJECT;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:90   
     1147     7846    1   COMMON:
     1148     7847    1       PARM1$ = ADDR( PARM1);

   7847  7 000251   200004 236100       COMMON       LDQ     @PARM1,,AUTO
         7 000252   200023 756100                    STQ     PARM1$,,AUTO

     1149     7848    1   COMMON1:
     1150     7849    1       PARM2$ = ADDR( PARM2);

   7849  7 000253   200005 236100       COMMON1      LDQ     @PARM2,,AUTO
         7 000254   200024 756100                    STQ     PARM2$,,AUTO

     1151     7850    1       PARM3$ = ADDR( PARM3);

   7850  7 000255   200006 236100                    LDQ     @PARM3,,AUTO
         7 000256   200025 756100                    STQ     PARM3$,,AUTO

     1152     7851    1       IF ENTRYFLAG = %HOSTS AND TRYSERVER THEN

   7851  7 000257   200010 235100                    LDA     ENTRYFLAG,,AUTO
         7 000260   000263 601000 7                  TNZ     THIS_COMMAND
         7 000261   200021 234100                    SZN     TRYSERVER,,AUTO
         7 000262   001635 604000 7                  TMI     TRY_SERVER

     1153     7852    1           GOTO TRY_SERVER;
     1154     7853    1   THIS_COMMAND:
     1155     7854    2       DO CASE( ACTION);

   7854  7 000263   200007 235100       THIS_COMMAND LDA     ACTION,,AUTO
         7 000264   000007 115007                    CMPA    7,DL
         7 000265   000267 602005 7                  TNC     THIS_COMMAND+4,AL
         7 000266   000673 710000 7                  TRA     s:7956
         7 000267   000276 710000 7                  TRA     ANOTHER
         7 000270   000303 710000 7                  TRA     s:7860
         7 000271   000312 710000 7                  TRA     s:7863
         7 000272   000317 710000 7                  TRA     s:7866
         7 000273   000563 710000 7                  TRA     s:7920
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:91   
         7 000274   000622 710000 7                  TRA     s:7935
         7 000275   000660 710000 7                  TRA     s:7947

     1156     7855    2           CASE( %GETENT);

     1157     7856    2   ANOTHER:
     1158     7857    2               CALL READFILE ALTRET( RETURN_NIL);

   7857  7 000276   001040 701000 7     ANOTHER      TSX1    READFILE
         7 000277   000723 702000 7                  TSX2    RETURN_NIL

     1159     7858    2               CALL PARSERECORD ALTRET( ANOTHER);

   7858  7 000300   001130 701000 7                  TSX1    PARSERECORD
         7 000301   000276 702000 7                  TSX2    ANOTHER
         7 000302   000673 710000 7                  TRA     s:7956

     1160     7859    2           CASE( %SETENT);

     1161     7860    2               CALL REWINDFILE ALTRET( RETURN_NIL);

   7860  7 000303   001064 701000 7                  TSX1    REWINDFILE
         7 000304   000723 702000 7                  TSX2    RETURN_NIL

     1162     7861    2               STAYOPEN( ENTRYFLAG) = PARM1;

   7861  7 000305   200004 470500                    LDP0    @PARM1,,AUTO
         7 000306   200010 720100                    LXL0    ENTRYFLAG,,AUTO
         7 000307   000000 235100                    LDA     0,,PR0
         7 000310   000124 755010 2                  STA     STAYOPEN,X0
         7 000311   000673 710000 7                  TRA     s:7956

     1163     7862    2           CASE( %ENDENT);

     1164     7863    2               CALL CLOSEFILE ALTRET( RETURN_NIL);

   7863  7 000312   001101 701000 7                  TSX1    CLOSEFILE
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:92   
         7 000313   000723 702000 7                  TSX2    RETURN_NIL

     1165     7864    2               STAYOPEN( ENTRYFLAG) = 0;

   7864  7 000314   200010 720100                    LXL0    ENTRYFLAG,,AUTO
         7 000315   000124 450010 2                  STZ     STAYOPEN,X0
         7 000316   000673 710000 7                  TRA     s:7956

     1166     7865    2           CASE( %BYNAME);

     1167     7866    3               IF SUBSTR( PARM1$->TXTN, 0, 1) < ' ' THEN DO;

   7866  7 000317   200023 470500                    LDP0    PARM1$,,AUTO
         7 000320   040000 106500                    CMPC    fill='040'O
         7 000321   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         7 000322   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         7 000323   000335 603000 7                  TRC     s:7871

     1168     7867    3                   P1LEN = ASCBIN( SUBSTR( PARM1$->TXTN, 0, 1));

   7867  7 000324   000100 101500                    MRL     fill='000'O
         7 000325   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         7 000326   200132 000004                    ADSC9   NAMEUP+13,,AUTO          cn=0,n=4
         7 000327   200132 236100                    LDQ     NAMEUP+13,,AUTO
         7 000330   200012 756100                    STQ     P1LEN,,AUTO

     1169     7868    3                   PARM1$ = PINCRC( PARM1$, 1);

   7868  7 000331   200023 236100                    LDQ     PARM1$,,AUTO
         7 000332   200000 036007                    ADLQ    65536,DL
         7 000333   200023 756100                    STQ     PARM1$,,AUTO

     1170     7869    3                   END;

   7869  7 000334   000341 710000 7                  TRA     s:7872

     1171     7870    2               ELSE
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:93   
     1172     7871    2                   CALL INDEX( P1LEN, BINASC(0), PARM1$->TMPCHARS);

   7871  7 000335   000000 124500                    SCM     mask='000'O
         7 000336   000000 000040                    ADSC9   0,,PR0                   cn=0,n=32
         7 000337   000001 000001 8                  ADSC9   1                        cn=0,n=1
         7 000340   200012 000100                    ARG     P1LEN,,AUTO

     1173     7872    3               IF PARM1$ ~= ADDR( LOCAL_HOST_NAME) THEN DO;

   7872  7 000341   000000 236000 8                  LDQ     0
         7 000342   200023 116100                    CMPQ    PARM1$,,AUTO
         7 000343   000355 600000 7                  TZE     s:7876

     1174     7873    3                   CALL XLATE( PARM1UP, UPCASE, PARM1$->TXT1N);

   7873  7 000344   200023 470500                    LDP0    PARM1$,,AUTO
         7 000345   200012 720100                    LXL0    P1LEN,,AUTO
         7 000346   000000 471400 xsym               LDP1    B$XL_UPPER$
         7 000347   040100 160540                    MVT     fill='040'O
         7 000350   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         7 000351   200075 000040                    ADSC9   PARM1UP,,AUTO            cn=0,n=32
         7 000352   100000 000100                    ARG     0,,PR1

     1175     7874    3                   PARM1$ = ADDR( PARM1UP);

   7874  7 000353   200075 633500                    EPPR3   PARM1UP,,AUTO
         7 000354   200023 453500                    STP3    PARM1$,,AUTO

     1176     7875    3                   END;

     1177     7876    3               IF PARM2$ ~= ADDR( NIL) THEN DO;

   7876  7 000355   200024 236100                    LDQ     PARM2$,,AUTO
         7 000356   000001 116000 xsym               CMPQ    B_VECTNIL+1
         7 000357   000413 600000 7                  TZE     s:7886

     1178     7877    4                   IF SUBSTR( PARM2$->TXTN, 0, 1) < ' ' THEN DO;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:94   

   7877  7 000360   200024 470500                    LDP0    PARM2$,,AUTO
         7 000361   040000 106500                    CMPC    fill='040'O
         7 000362   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         7 000363   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         7 000364   000376 603000 7                  TRC     s:7882

     1179     7878    4                       P2LEN = ASCBIN( SUBSTR( PARM2$->TXTN, 0, 1));

   7878  7 000365   000100 101500                    MRL     fill='000'O
         7 000366   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         7 000367   200132 000004                    ADSC9   NAMEUP+13,,AUTO          cn=0,n=4
         7 000370   200132 236100                    LDQ     NAMEUP+13,,AUTO
         7 000371   200013 756100                    STQ     P2LEN,,AUTO

     1180     7879    4                       PARM2$ = PINCRC( PARM2$, 1);

   7879  7 000372   200024 236100                    LDQ     PARM2$,,AUTO
         7 000373   200000 036007                    ADLQ    65536,DL
         7 000374   200024 756100                    STQ     PARM2$,,AUTO

     1181     7880    4                       END;

   7880  7 000375   000402 710000 7                  TRA     s:7883

     1182     7881    3                   ELSE
     1183     7882    3                       CALL INDEX( P2LEN, BINASC(0), PARM2$->TMPCHARS);

   7882  7 000376   000000 124500                    SCM     mask='000'O
         7 000377   000000 000040                    ADSC9   0,,PR0                   cn=0,n=32
         7 000400   000001 000001 8                  ADSC9   1                        cn=0,n=1
         7 000401   200013 000100                    ARG     P2LEN,,AUTO

     1184     7883    3                   CALL XLATE( PARM2UP, UPCASE, PARM2$->TXT2N);

   7883  7 000402   200024 470500                    LDP0    PARM2$,,AUTO
         7 000403   200013 720100                    LXL0    P2LEN,,AUTO
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:95   
         7 000404   000000 471400 xsym               LDP1    B$XL_UPPER$
         7 000405   040100 160540                    MVT     fill='040'O
         7 000406   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         7 000407   200105 000040                    ADSC9   PARM2UP,,AUTO            cn=0,n=32
         7 000410   100000 000100                    ARG     0,,PR1

     1185     7884    3                   PARM2$ = ADDR( PARM2UP);

   7884  7 000411   200105 633500                    EPPR3   PARM2UP,,AUTO
         7 000412   200024 453500                    STP3    PARM2$,,AUTO

     1186     7885    3                   END;

     1187     7886    2               CALL REWINDFILE ALTRET( RETURN_NIL);

   7886  7 000413   001064 701000 7                  TSX1    REWINDFILE
         7 000414   000723 702000 7                  TSX2    RETURN_NIL

     1188     7887    2   NAMELOOP:
     1189     7888    2               CALL READFILE ALTRET( RETURN_NIL);

   7888  7 000415   001040 701000 7     NAMELOOP     TSX1    READFILE
         7 000416   000723 702000 7                  TSX2    RETURN_NIL

     1190     7889    2               CALL PARSERECORD ALTRET( NAMELOOP);

   7889  7 000417   001130 701000 7                  TSX1    PARSERECORD
         7 000420   000415 702000 7                  TSX2    NAMELOOP

     1191     7890    3               DO CASE( ENTRYFLAG);

   7890  7 000421   200010 235100                    LDA     ENTRYFLAG,,AUTO
         7 000422   000004 115007                    CMPA    4,DL
         7 000423   000425 602005 7                  TNC     s:7890+4,AL
         7 000424   000523 710000 7                  TRA     s:7910
         7 000425   000431 710000 7                  TRA     s:7892
         7 000426   000443 710000 7                  TRA     s:7895
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:96   
         7 000427   000455 710000 7                  TRA     s:7898
         7 000430   000467 710000 7                  TRA     s:7901

     1192     7891    3                   CASE( %HOSTS);

     1193     7892    3                       LEN = H_NAMELEN;

   7892  7 000431   200067 236100                    LDQ     H_NAMELEN,,AUTO
         7 000432   200011 756100                    STQ     LEN,,AUTO

     1194     7893    3                       CALL XLATE( NAMEUP, UPCASE, XSL$HOSTENT.H_NAME$->TXTN);

   7893  7 000433   000171 470400 2                  LDP0    RESULTBUF
         7 000434   000000 620006                    EAX0    0,QL
         7 000435   000000 471400 xsym               LDP1    B$XL_UPPER$
         7 000436   040100 160540                    MVT     fill='040'O
         7 000437   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         7 000440   200115 000040                    ADSC9   NAMEUP,,AUTO             cn=0,n=32
         7 000441   100000 000100                    ARG     0,,PR1
         7 000442   000523 710000 7                  TRA     s:7910

     1195     7894    3                   CASE( %NETWORKS);

     1196     7895    3                       LEN = N_NAMELEN;

   7895  7 000443   200071 236100                    LDQ     N_NAMELEN,,AUTO
         7 000444   200011 756100                    STQ     LEN,,AUTO

     1197     7896    3                       CALL XLATE( NAMEUP, UPCASE, XSL$NETENT.N_NAME$->TXTN);

   7896  7 000445   000171 470400 2                  LDP0    RESULTBUF
         7 000446   000000 620006                    EAX0    0,QL
         7 000447   000000 471400 xsym               LDP1    B$XL_UPPER$
         7 000450   040100 160540                    MVT     fill='040'O
         7 000451   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         7 000452   200115 000040                    ADSC9   NAMEUP,,AUTO             cn=0,n=32
         7 000453   100000 000100                    ARG     0,,PR1
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:97   
         7 000454   000523 710000 7                  TRA     s:7910

     1198     7897    3                   CASE( %PROTOCOLS);

     1199     7898    3                       LEN = P_NAMELEN;

   7898  7 000455   200072 236100                    LDQ     P_NAMELEN,,AUTO
         7 000456   200011 756100                    STQ     LEN,,AUTO

     1200     7899    3                       CALL XLATE( NAMEUP, UPCASE, XSL$PROTOENT.P_NAME$->TXTN);

   7899  7 000457   000171 470400 2                  LDP0    RESULTBUF
         7 000460   000000 620006                    EAX0    0,QL
         7 000461   000000 471400 xsym               LDP1    B$XL_UPPER$
         7 000462   040100 160540                    MVT     fill='040'O
         7 000463   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         7 000464   200115 000040                    ADSC9   NAMEUP,,AUTO             cn=0,n=32
         7 000465   100000 000100                    ARG     0,,PR1
         7 000466   000523 710000 7                  TRA     s:7910

     1201     7900    3                   CASE( %SERVICES);

     1202     7901    4                       IF PARM2$ ~= ADDR( NIL) THEN DO;

   7901  7 000467   200024 236100                    LDQ     PARM2$,,AUTO
         7 000470   000001 116000 xsym               CMPQ    B_VECTNIL+1
         7 000471   000512 600000 7                  TZE     s:7907

     1203     7902    4                           LEN = S_PROTOLEN;

   7902  7 000472   200074 235100                    LDA     S_PROTOLEN,,AUTO
         7 000473   200011 755100                    STA     LEN,,AUTO

     1204     7903    4                           CALL XLATE( NAMEUP, UPCASE, XSL$SERVENT.S_PROTO$->TXTN);

   7903  7 000474   000174 470400 2                  LDP0    RESULTBUF+3
         7 000475   000000 620005                    EAX0    0,AL
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:98   
         7 000476   000000 471400 xsym               LDP1    B$XL_UPPER$
         7 000477   040100 160540                    MVT     fill='040'O
         7 000500   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         7 000501   200115 000040                    ADSC9   NAMEUP,,AUTO             cn=0,n=32
         7 000502   100000 000100                    ARG     0,,PR1

     1205     7904    4                           IF ADDR( NAMEUP)->TXTN ~= PARM2$->TXT2N THEN

   7904  7 000503   200011 720100                    LXL0    LEN,,AUTO
         7 000504   200024 473500                    LDP3    PARM2$,,AUTO
         7 000505   200013 721100                    LXL1    P2LEN,,AUTO
         7 000506   040140 106540                    CMPC    fill='040'O
         7 000507   200115 000010                    ADSC9   NAMEUP,,AUTO             cn=0,n=*X0
         7 000510   300000 000011                    ADSC9   0,,PR3                   cn=0,n=*X1
         7 000511   000415 601000 7                  TNZ     NAMELOOP

     1206     7905    4                               GOTO NAMELOOP;
     1207     7906    4                           END;

     1208     7907    3                       LEN = S_NAMELEN;

   7907  7 000512   200073 235100                    LDA     S_NAMELEN,,AUTO
         7 000513   200011 755100                    STA     LEN,,AUTO

     1209     7908    3                       CALL XLATE( NAMEUP, UPCASE, XSL$SERVENT.S_NAME$->TXTN);

   7908  7 000514   000171 470400 2                  LDP0    RESULTBUF
         7 000515   000000 620005                    EAX0    0,AL
         7 000516   000000 471400 xsym               LDP1    B$XL_UPPER$
         7 000517   040100 160540                    MVT     fill='040'O
         7 000520   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         7 000521   200115 000040                    ADSC9   NAMEUP,,AUTO             cn=0,n=32
         7 000522   100000 000100                    ARG     0,,PR1

     1210     7909    3                   END;

     1211     7910    2               IF ADDR( NAMEUP)->TXTN = PARM1$->TXT1N THEN
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:99   

   7910  7 000523   200011 720100                    LXL0    LEN,,AUTO
         7 000524   200023 470500                    LDP0    PARM1$,,AUTO
         7 000525   200012 721100                    LXL1    P1LEN,,AUTO
         7 000526   040140 106540                    CMPC    fill='040'O
         7 000527   200115 000010                    ADSC9   NAMEUP,,AUTO             cn=0,n=*X0
         7 000530   000000 000011                    ADSC9   0,,PR0                   cn=0,n=*X1
         7 000531   000673 600000 7                  TZE     s:7956

     1212     7911    2                   EXIT THIS_COMMAND;
     1213     7912    3               DO I=0 TO PTR#-1; /* Check the aliases, too. */

   7912  7 000532   200014 450100                    STZ     I,,AUTO
         7 000533   000557 710000 7                  TRA     s:7917+1

     1214     7913    3                   LEN = PTRLEN( I);

   7913  7 000534   200014 720100                    LXL0    I,,AUTO
         7 000535   200027 235110                    LDA     PTRLEN,X0,AUTO
         7 000536   200011 755100                    STA     LEN,,AUTO

     1215     7914    3                   CALL XLATE( NAMEUP, UPCASE, XSL$ANYENT.PTR$( I)->B$PTR->TXTN);

   7914  7 000537   000176 470410 2                  LDP0    RESULTBUF+5,X0
         7 000540   000000 471500                    LDP1    0,,PR0
         7 000541   000000 621005                    EAX1    0,AL
         7 000542   000000 473400 xsym               LDP3    B$XL_UPPER$
         7 000543   040100 160540                    MVT     fill='040'O
         7 000544   100000 000011                    ADSC9   0,,PR1                   cn=0,n=*X1
         7 000545   200115 000040                    ADSC9   NAMEUP,,AUTO             cn=0,n=32
         7 000546   300000 000100                    ARG     0,,PR3

     1216     7915    3                   IF ADDR( NAMEUP)->TXTN = PARM1$->TXT1N THEN

   7915  7 000547   200011 721100                    LXL1    LEN,,AUTO
         7 000550   200023 471500                    LDP1    PARM1$,,AUTO
         7 000551   200012 722100                    LXL2    P1LEN,,AUTO
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:100  
         7 000552   040140 106540                    CMPC    fill='040'O
         7 000553   200115 000011                    ADSC9   NAMEUP,,AUTO             cn=0,n=*X1
         7 000554   100000 000012                    ADSC9   0,,PR1                   cn=0,n=*X2
         7 000555   000673 600000 7                  TZE     s:7956

     1217     7916    3                       EXIT THIS_COMMAND;
     1218     7917    3                   END;

   7917  7 000556   200014 054100                    AOS     I,,AUTO
         7 000557   200014 236100                    LDQ     I,,AUTO
         7 000560   200026 116100                    CMPQ    PTR#,,AUTO
         7 000561   000534 604000 7                  TMI     s:7913

     1219     7918    2               GOTO NAMELOOP;

   7918  7 000562   000415 710000 7                  TRA     NAMELOOP

     1220     7919    2           CASE( %BYADDR);

     1221     7920    2               CALL REWINDFILE ALTRET( RETURN_NIL);

   7920  7 000563   001064 701000 7                  TSX1    REWINDFILE
         7 000564   000723 702000 7                  TSX2    RETURN_NIL

     1222     7921    2   ADDRLOOP:
     1223     7922    2               CALL READFILE ALTRET( RETURN_NIL);

   7922  7 000565   001040 701000 7     ADDRLOOP     TSX1    READFILE
         7 000566   000723 702000 7                  TSX2    RETURN_NIL

     1224     7923    2               CALL PARSERECORD ALTRET( ADDRLOOP);

   7923  7 000567   001130 701000 7                  TSX1    PARSERECORD
         7 000570   000565 702000 7                  TSX2    ADDRLOOP

     1225     7924    2               LEN = H_ADDRLEN;

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:101  
   7924  7 000571   200070 235100                    LDA     H_ADDRLEN,,AUTO
         7 000572   200011 755100                    STA     LEN,,AUTO

     1226     7925    3               IF LEN = PARM2 THEN DO;

   7925  7 000573   200005 470500                    LDP0    @PARM2,,AUTO
         7 000574   200011 236100                    LDQ     LEN,,AUTO
         7 000575   000000 116100                    CMPQ    0,,PR0
         7 000576   000621 601000 7                  TNZ     s:7933

     1227     7926    3                   TMP$ = XSL$HOSTENT.H_ADDR_LIST$;

   7926  7 000577   000175 236000 2                  LDQ     RESULTBUF+4
         7 000600   200020 756100                    STQ     TMP$,,AUTO

     1228     7927    4                   DO WHILE( TMP$->B$PTR ~= ADDR( NIL));

   7927  7 000601   000615 710000 7                  TRA     s:7931

     1229     7928    4                       IF TMP$->B$PTR->TXTN = PARM1$->TXTN THEN

   7928  7 000602   200020 470500                    LDP0    TMP$,,AUTO
         7 000603   000000 471500                    LDP1    0,,PR0
         7 000604   200011 720100                    LXL0    LEN,,AUTO
         7 000605   200023 473500                    LDP3    PARM1$,,AUTO
         7 000606   040140 106540                    CMPC    fill='040'O
         7 000607   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0
         7 000610   300000 000010                    ADSC9   0,,PR3                   cn=0,n=*X0
         7 000611   000673 600000 7                  TZE     s:7956

     1230     7929    4                           EXIT THIS_COMMAND;
     1231     7930    4                       TMP$ = PINCRW( TMP$, 1);  /* relies on INETPTR$ array */

   7930  7 000612   200020 236100                    LDQ     TMP$,,AUTO
         7 000613   000001 036003                    ADLQ    1,DU
         7 000614   200020 756100                    STQ     TMP$,,AUTO

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:102  
     1232     7931    4                       END;

   7931  7 000615   200020 470500                    LDP0    TMP$,,AUTO
         7 000616   000000 236100                    LDQ     0,,PR0
         7 000617   000001 116000 xsym               CMPQ    B_VECTNIL+1
         7 000620   000602 601000 7                  TNZ     s:7928

     1233     7932    3                   END;

     1234     7933    2               GOTO ADDRLOOP;

   7933  7 000621   000565 710000 7                  TRA     ADDRLOOP

     1235     7934    2           CASE( %BYPORT);

     1236     7935    2               CALL REWINDFILE ALTRET( RETURN_NIL);

   7935  7 000622   001064 701000 7                  TSX1    REWINDFILE
         7 000623   000723 702000 7                  TSX2    RETURN_NIL

     1237     7936    2   PORTLOOP:
     1238     7937    2               CALL READFILE ALTRET( RETURN_NIL);

   7937  7 000624   001040 701000 7     PORTLOOP     TSX1    READFILE
         7 000625   000723 702000 7                  TSX2    RETURN_NIL

     1239     7938    2               CALL PARSERECORD ALTRET( PORTLOOP);

   7938  7 000626   001130 701000 7                  TSX1    PARSERECORD
         7 000627   000624 702000 7                  TSX2    PORTLOOP

     1240     7939    2               LEN = S_PROTOLEN;

   7939  7 000630   200074 235100                    LDA     S_PROTOLEN,,AUTO
         7 000631   200011 755100                    STA     LEN,,AUTO

     1241     7940    2               CALL XSL$HTONL (HTONLPARM1, PARM1);
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:103  

   7940  7 000632   200004 236100                    LDQ     @PARM1,,AUTO
         7 000633   200133 756100                    STQ     NAMEUP+14,,AUTO
         7 000634   200022 630500                    EPPR0   HTONLPARM1,,AUTO
         7 000635   200132 450500                    STP0    NAMEUP+13,,AUTO
         7 000636   200132 630500                    EPPR0   NAMEUP+13,,AUTO
         7 000637   000020 631400 xsym               EPPR1   B_VECTNIL+16
         7 000640   000000 701000 xent               TSX1    XSL$HTONL
         7 000641   000000 011000                    NOP     0

     1242     7941    2               IF XSL$SERVENT.S_PORT = HTONLPARM1 THEN

   7941  7 000642   000173 236000 2                  LDQ     RESULTBUF+2
         7 000643   200022 116100                    CMPQ    HTONLPARM1,,AUTO
         7 000644   000657 601000 7                  TNZ     s:7945

     1243     7942    2                   IF PARM2$ = ADDR( NIL) OR

   7942  7 000645   200024 236100                    LDQ     PARM2$,,AUTO
         7 000646   000001 116000 xsym               CMPQ    B_VECTNIL+1
         7 000647   000673 600000 7                  TZE     s:7956
         7 000650   000174 470400 2                  LDP0    RESULTBUF+3
         7 000651   200011 720100                    LXL0    LEN,,AUTO
         7 000652   200024 471500                    LDP1    PARM2$,,AUTO
         7 000653   040140 106540                    CMPC    fill='040'O
         7 000654   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         7 000655   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0
         7 000656   000673 600000 7                  TZE     s:7956

     1244     7943    2                     XSL$SERVENT.S_PROTO$->TXTN = PARM2$->TXTN THEN
     1245     7944    2                       EXIT THIS_COMMAND;
     1246     7945    2               GOTO PORTLOOP;

   7945  7 000657   000624 710000 7                  TRA     PORTLOOP

     1247     7946    2           CASE( %BYNUMBER);

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:104  
     1248     7947    2               CALL REWINDFILE ALTRET( RETURN_NIL);

   7947  7 000660   001064 701000 7                  TSX1    REWINDFILE
         7 000661   000723 702000 7                  TSX2    RETURN_NIL

     1249     7948    2   NUMBERLOOP:
     1250     7949    2               CALL READFILE ALTRET( RETURN_NIL);

   7949  7 000662   001040 701000 7     NUMBERLOOP   TSX1    READFILE
         7 000663   000723 702000 7                  TSX2    RETURN_NIL

     1251     7950    2               CALL PARSERECORD ALTRET( NUMBERLOOP);

   7950  7 000664   001130 701000 7                  TSX1    PARSERECORD
         7 000665   000662 702000 7                  TSX2    NUMBERLOOP

     1252     7951    2               IF XSL$PROTOENT.P_PROTO = PARM1 THEN

   7951  7 000666   200004 470500                    LDP0    @PARM1,,AUTO
         7 000667   000173 236000 2                  LDQ     RESULTBUF+2
         7 000670   000000 116100                    CMPQ    0,,PR0
         7 000671   000673 600000 7                  TZE     s:7956

     1253     7952    2                   EXIT THIS_COMMAND;
     1254     7953    2               GOTO NUMBERLOOP;

   7953  7 000672   000662 710000 7                  TRA     NUMBERLOOP

     1255     7954    2           END THIS_COMMAND;

     1256     7955
     1257     7956    2       IF PARM1$ = ADDR( LOCAL_HOST_NAME) THEN DO;

   7956  7 000673   000000 236000 8                  LDQ     0
         7 000674   200023 116100                    CMPQ    PARM1$,,AUTO
         7 000675   000717 601000 7                  TNZ     s:7962

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:105  
     1258     7957    2           LEN = MINIMUM( H_NAMELEN + 1,  /* Include the nulbyte */ PARM2);

   7957  7 000676   200067 236100                    LDQ     H_NAMELEN,,AUTO
         7 000677   000001 036007                    ADLQ    1,DL
         7 000700   200005 470500                    LDP0    @PARM2,,AUTO
         7 000701   000000 116100                    CMPQ    0,,PR0
         7 000702   000704 604400 7                  TMOZ    s:7957+6
         7 000703   000000 236100                    LDQ     0,,PR0
         7 000704   200011 756100                    STQ     LEN,,AUTO

     1259     7958    2           ADDR( PARM1) -> TXTN = XSL$HOSTENT.H_NAME$ -> TXTN;

   7958  7 000705   000171 471400 2                  LDP1    RESULTBUF
         7 000706   000000 620006                    EAX0    0,QL
         7 000707   200004 473500                    LDP3    @PARM1,,AUTO
         7 000710   200011 721100                    LXL1    LEN,,AUTO
         7 000711   040140 100540                    MLR     fill='040'O
         7 000712   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0
         7 000713   300000 000011                    ADSC9   0,,PR3                   cn=0,n=*X1

     1260     7959    2           RESULT = 0;

   7959  7 000714   200003 471500                    LDP1    @RESULT$,,AUTO
         7 000715   100000 450100                    STZ     0,,PR1

     1261     7960    2           END;

   7960  7 000716   000722 710000 7                  TRA     s:7963

     1262     7961    1       ELSE
     1263     7962    1           RESULT$ = ADDR( RESULTBUF);

   7962  7 000717   000002 236000 8                  LDQ     2
         7 000720   200003 470500                    LDP0    @RESULT$,,AUTO
         7 000721   000000 756100                    STQ     0,,PR0

     1264     7963    2       DO WHILE( '0'B);
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:106  

   7963  7 000722   000746 710000 7                  TRA     s:7971

     1265     7964    2   RETURN_NIL:
     1266     7965    2           RESULT$ = ADDR( NIL);

   7965  7 000723   000001 236000 xsym  RETURN_NIL   LDQ     B_VECTNIL+1
         7 000724   200003 470500                    LDP0    @RESULT$,,AUTO
         7 000725   000000 756100                    STQ     0,,PR0

     1267     7966    2           XSL_ERRNO = %E$FAILURE;

   7966  7 000726   000001 335007                    LCA     1,DL
         7 000727   000000 755000 xsym               STA     XSL_ERRNO

     1268     7967    2           IF PARM1$ = ADDR( LOCAL_HOST_NAME) THEN RESULT = %E$FAILURE;

   7967  7 000730   000000 236000 8                  LDQ     0
         7 000731   200023 116100                    CMPQ    PARM1$,,AUTO
         7 000732   000734 601000 7                  TNZ     s:7968

   7967  7 000733   000000 755100                    STA     0,,PR0

     1269     7968    2           IF DCBADDR( DCBNUMS( ENTRYFLAG))->F$DCB.TYC.EOF# THEN

   7968  7 000734   000003 471400 8                  LDP1    3
         7 000735   100000 473500                    LDP3    0,,PR1
         7 000736   200010 720100                    LXL0    ENTRYFLAG,,AUTO
         7 000737   000244 721010 1                  LXL1    DCBNUMS,X0
         7 000740   300000 474511                    LDP4    0,X1,PR3
         7 000741   400002 236100                    LDQ     2,,PR4
         7 000742   004000 316003                    CANQ    2048,DU
         7 000743   000746 600000 7                  TZE     s:7971

     1270     7969    2               XSL_ERRNO = %E$NOENT;

   7969  7 000744   000002 235007                    LDA     2,DL
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:107  
         7 000745   000000 755000 xsym               STA     XSL_ERRNO

     1271     7970    2           END;

     1272     7971    1       IF STAYOPEN( ENTRYFLAG) = 0 THEN

   7971  7 000746   200010 720100                    LXL0    ENTRYFLAG,,AUTO
         7 000747   000124 235010 2                  LDA     STAYOPEN,X0
         7 000750   000753 601000 7                  TNZ     s:7973

     1273     7972    1           CALL CLOSEFILE;

   7972  7 000751   001101 701000 7                  TSX1    CLOSEFILE
         7 000752   000000 011000                    NOP     0

     1274     7973    1       IF RESULT$ ~= ADDR( NIL) AND RESULT>=0 THEN

   7973  7 000753   200003 470500                    LDP0    @RESULT$,,AUTO
         7 000754   000000 236100                    LDQ     0,,PR0
         7 000755   000001 116000 xsym               CMPQ    B_VECTNIL+1
         7 000756   000762 600000 7                  TZE     s:7975
         7 000757   000000 235100                    LDA     0,,PR0
         7 000760   000762 604000 7                  TMI     s:7975

     1275     7974    1           RETURN;

   7974  7 000761   000000 702200 xent               TSX2  ! X66_ARET

     1276     7975    1       ALTRETURN;

   7975  7 000762   000000 702200 xent               TSX2  ! X66_AALT

     1277     7976        %EJECT;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:108  
     1278     7977    1   OPENFILE: PROC ALTRET;  /* used only for NAMESERCG */

   7977  7 000763   200126 741300       OPENFILE     STX1  ! NAMEUP+9,,AUTO

     1279     7978
     1280     7979    3       IF NOT DCBADDR( DCBNUMS( ENTRYFLAG))->F$DCB.FCD# THEN DO;

   7979  7 000764   000003 470400 8                  LDP0    3
         7 000765   000000 471500                    LDP1    0,,PR0
         7 000766   200010 720100                    LXL0    ENTRYFLAG,,AUTO
         7 000767   000244 722010 1                  LXL2    DCBNUMS,X0
         7 000770   100000 473512                    LDP3    0,X2,PR1
         7 000771   300031 236100                    LDQ     25,,PR3
         7 000772   020000 316007                    CANQ    8192,DL
         7 000773   001006 601000 7                  TNZ     s:7986

     1281     7980    3           CALL M$OPEN( FPT_OPEN)

   7980  7 000774   000000 630400 1                  EPPR0   FPT_OPEN
         7 000775   450000 713400                    CLIMB   alt,open
         7 000776   410400 401760                    pmme    nvectors=18
         7 000777   001001 702000 7                  TSX2    s:7982
         7 001000   001006 710000 7                  TRA     s:7986

     1282     7981    4           WHENALTRETURN DO;

     1283     7982    4               CALL M$OPEN( TEST_OPEN);  /* ignore ALTRET */

   7982  7 001001   000120 630400 1                  EPPR0   TEST_OPEN
         7 001002   050000 713400                    CLIMB   open
         7 001003   410400 401760                    pmme    nvectors=18

     1284     7983    4               ALTRETURN;

   7983  7 001004   200126 221300                    LDX1  ! NAMEUP+9,,AUTO
         7 001005   000000 702211                    TSX2  ! 0,X1

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:109  
     1285     7984    4               END;
     1286     7985    3           END;

     1287     7986    2       RETURN;

   7986  7 001006   200126 221300                    LDX1  ! NAMEUP+9,,AUTO
         7 001007   000001 702211                    TSX2  ! 1,X1

     1288     7987
     1289     7988    2   END OPENFILE;
     1290     7989
     1291     7990    1   WRITEFILE: PROC ALTRET;  /* used only for NAMESERCG */

   7990  7 001010   200126 741300       WRITEFILE    STX1  ! NAMEUP+9,,AUTO

     1292     7991
     1293     7992    2       CALL M$WRITE( FPT_WRITE)

   7992  7 001011   000072 630400 1                  EPPR0   FPT_WRITE
         7 001012   440001 713400                    CLIMB   alt,write
         7 001013   401400 401760                    pmme    nvectors=4
         7 001014   001016 702000 7                  TSX2    s:7995
         7 001015   001036 710000 7                  TRA     s:8002

     1294     7993    3       WHENALTRETURN DO;

     1295     7994                /* write failed.  expected if FILE, bad if NAMESERCG */
     1296     7995    4           IF DCBADDR( DCBNUMS( ENTRYFLAG))->F$DCB.ASN# = %COMGROUP# THEN DO;

   7995  7 001016   000003 470400 8                  LDP0    3
         7 001017   000000 471500                    LDP1    0,,PR0
         7 001020   200010 720100                    LXL0    ENTRYFLAG,,AUTO
         7 001021   000244 721010 1                  LXL1    DCBNUMS,X0
         7 001022   100000 473511                    LDP3    0,X1,PR1
         7 001023   300032 236100                    LDQ     26,,PR3
         7 001024   777000 376007                    ANQ     -512,DL
         7 001025   004000 116007                    CMPQ    2048,DL
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:110  
         7 001026   001034 601000 7                  TNZ     s:8000

     1297     7996                    /* grr.. CG is open but server not running.. */
     1298     7997    4               CALL CLOSEFILE2;  /* ignore ALTRET */

   7997  7 001027   001105 701000 7                  TSX1    CLOSEFILE2
         7 001030   000000 011000                    NOP     0

     1299     7998    4               CALL M$OPEN( TEST_OPEN);  /* ignore ALTRET */

   7998  7 001031   000120 630400 1                  EPPR0   TEST_OPEN
         7 001032   050000 713400                    CLIMB   open
         7 001033   410400 401760                    pmme    nvectors=18

     1300     7999    4               END;

     1301     8000    3           ALTRETURN;

   8000  7 001034   200126 221300                    LDX1  ! NAMEUP+9,,AUTO
         7 001035   000000 702211                    TSX2  ! 0,X1

     1302     8001    3           END;
     1303     8002    2       RETURN;

   8002  7 001036   200126 221300                    LDX1  ! NAMEUP+9,,AUTO
         7 001037   000001 702211                    TSX2  ! 1,X1

     1304     8003
     1305     8004    2   END WRITEFILE;
     1306     8005
     1307     8006    1   READFILE: PROC ALTRET;  /* used for either FILE or NAMESERCG */

   8006  7 001040   200126 741300       READFILE     STX1  ! NAMEUP+9,,AUTO

     1308     8007
     1309     8008    2       FPT_READ.V.DCB# = DCBNUMS( ENTRYFLAG);

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:111  
   8008  7 001041   200010 720100                    LXL0    ENTRYFLAG,,AUTO
         7 001042   000244 722010 1                  LXL2    DCBNUMS,X0
         7 001043   000052 742000 2                  STX2    FPT_READ+8

     1310     8009    2       CALL M$READ( FPT_READ)

   8009  7 001044   000042 630400 2                  EPPR0   FPT_READ
         7 001045   440000 713400                    CLIMB   alt,read
         7 001046   401400 401760                    pmme    nvectors=4
         7 001047   001051 702000 7                  TSX2    s:8011
         7 001050   001053 710000 7                  TRA     s:8013

     1311     8010    3       WHENALTRETURN DO;

     1312     8011    3           ALTRETURN;

   8011  7 001051   200126 221300                    LDX1  ! NAMEUP+9,,AUTO
         7 001052   000000 702211                    TSX2  ! 0,X1

     1313     8012    3           END;
     1314     8013    2       ARS( ENTRYFLAG) = DCBADDR( DCBNUMS( ENTRYFLAG))->F$DCB.ARS#;

   8013  7 001053   000003 470400 8                  LDP0    3
         7 001054   000000 471500                    LDP1    0,,PR0
         7 001055   200010 720100                    LXL0    ENTRYFLAG,,AUTO
         7 001056   000244 721010 1                  LXL1    DCBNUMS,X0
         7 001057   100000 473511                    LDP3    0,X1,PR1
         7 001060   300000 235100                    LDA     0,,PR3
         7 001061   000120 755010 2                  STA     ARS,X0

     1315     8014    2       RETURN;

   8014  7 001062   200126 221300                    LDX1  ! NAMEUP+9,,AUTO
         7 001063   000001 702211                    TSX2  ! 1,X1

     1316     8015
     1317     8016    2   END READFILE;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:112  
     1318     8017
     1319     8018    1   REWINDFILE: PROC ALTRET;  /* used only for FILE */

   8018  7 001064   200126 741300       REWINDFILE   STX1  ! NAMEUP+9,,AUTO

     1320     8019
     1321     8020    2       FPT_PFIL.V.DCB# = DCBNUMS( ENTRYFLAG);

   8020  7 001065   200010 720100                    LXL0    ENTRYFLAG,,AUTO
         7 001066   000244 722010 1                  LXL2    DCBNUMS,X0
         7 001067   000040 742000 2                  STX2    FPT_PFIL+2

     1322     8021    2       CALL M$PFIL( FPT_PFIL)

   8021  7 001070   000036 630400 2                  EPPR0   FPT_PFIL
         7 001071   440004 713400                    CLIMB   alt,+16388
         7 001072   400000 401760                    pmme    nvectors=1
         7 001073   001075 702000 7                  TSX2    OOPS
         7 001074   001077 710000 7                  TRA     s:8026

     1323     8022    3       WHENALTRETURN DO;

     1324     8023    3   OOPS:
     1325     8024    3           ALTRETURN;

   8024  7 001075   200126 221300       OOPS         LDX1  ! NAMEUP+9,,AUTO
         7 001076   000000 702211                    TSX2  ! 0,X1

     1326     8025    3           END;
     1327     8026    2       RETURN;

   8026  7 001077   200126 221300                    LDX1  ! NAMEUP+9,,AUTO
         7 001100   000001 702211                    TSX2  ! 1,X1

     1328     8027
     1329     8028    2   END REWINDFILE;
     1330     8029
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:113  
     1331     8030    1   CLOSEFILE: PROC ALTRET;  /* used only for FILE */

   8030  7 001101   200130 741300       CLOSEFILE    STX1  ! NAMEUP+11,,AUTO

     1332     8031
     1333     8032    2       STAYOPEN( ENTRYFLAG) = 0;

   8032  7 001102   200010 720100                    LXL0    ENTRYFLAG,,AUTO
         7 001103   000124 450010 2                  STZ     STAYOPEN,X0
         7 001104   001106 710000 7                  TRA     s:8036

     1334     8033
     1335     8034    2   CLOSEFILE2: ENTRY ALTRET;  /* used only for NAMESERCG */

   8034  7 001105   200130 741300       CLOSEFILE2   STX1  ! NAMEUP+11,,AUTO

     1336     8035
     1337     8036    3       IF DCBADDR( DCBNUMS( ENTRYFLAG))->F$DCB.FCD# THEN DO;

   8036  7 001106   000003 470400 8                  LDP0    3
         7 001107   000000 471500                    LDP1    0,,PR0
         7 001110   200010 720100                    LXL0    ENTRYFLAG,,AUTO
         7 001111   000244 722010 1                  LXL2    DCBNUMS,X0
         7 001112   100000 473512                    LDP3    0,X2,PR1
         7 001113   300031 236100                    LDQ     25,,PR3
         7 001114   020000 316007                    CANQ    8192,DL
         7 001115   001126 600000 7                  TZE     s:8043

     1338     8037    3           FPT_CLOSE.V.DCB# = DCBNUMS( ENTRYFLAG);

   8037  7 001116   000032 742000 2                  STX2    FPT_CLOSE+26

     1339     8038    3           CALL M$CLOSE( FPT_CLOSE)

   8038  7 001117   000000 630400 2                  EPPR0   FPT_CLOSE
         7 001120   450001 713400                    CLIMB   alt,close
         7 001121   406000 401760                    pmme    nvectors=13
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:114  
         7 001122   001124 702000 7                  TSX2    s:8040
         7 001123   001126 710000 7                  TRA     s:8043

     1340     8039    4           WHENALTRETURN DO;

     1341     8040    4               ALTRETURN;

   8040  7 001124   200130 221300                    LDX1  ! NAMEUP+11,,AUTO
         7 001125   000000 702211                    TSX2  ! 0,X1

     1342     8041    4               END;
     1343     8042    3           END;

     1344     8043    2       RETURN;

   8043  7 001126   200130 221300                    LDX1  ! NAMEUP+11,,AUTO
         7 001127   000001 702211                    TSX2  ! 1,X1

     1345     8044
     1346     8045    2   END CLOSEFILE;
     1347     8046        %EJECT;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:115  
     1348     8047    1   PARSERECORD: PROC ALTRET;

   8047  7 001130   200126 741300       PARSERECORD  STX1  ! NAMEUP+9,,AUTO

     1349     8048
     1350     8049    2       P_PCB.ROOT$ = ROOT$( ENTRYFLAG);

   8049  7 001131   200010 720100                    LXL0    ENTRYFLAG,,AUTO
         7 001132   000240 236010 1                  LDQ     ROOT$,X0
         7 001133   000061 756000 2                  STQ     P_PCB+1

     1351     8050    2       P_PCB.NCHARS = ARS( ENTRYFLAG);

   8050  7 001134   000120 235010 2                  LDA     ARS,X0
         7 001135   000071 755000 2                  STA     P_PCB+9

     1352     8051    2       CALL X$PARSE( P_PCB )

   8051  7 001136   000004 630400 8                  EPPR0   4
         7 001137   000017 631400 xsym               EPPR1   B_VECTNIL+15
         7 001140   000000 701000 xent               TSX1    X$PARSE
         7 001141   001143 702000 7                  TSX2    BAILOUT
         7 001142   001145 710000 7                  TRA     s:8056

     1353     8052    3       WHENALTRETURN DO;

     1354     8053    3   BAILOUT:
     1355     8054    3           ALTRETURN;

   8054  7 001143   200126 221300       BAILOUT      LDX1  ! NAMEUP+9,,AUTO
         7 001144   000000 702211                    TSX2  ! 0,X1

     1356     8055    3           END;
     1357     8056    2       PTR# = 0;

   8056  7 001145   200026 450100                    STZ     PTR#,,AUTO

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:116  
     1358     8057    2       IF P_PCB.OUT$->ITM.NSUBLKS = 0 THEN

   8057  7 001146   000063 470400 2                  LDP0    P_PCB+3
         7 001147   000001 220100                    LDX0    1,,PR0
         7 001150   001153 601000 7                  TNZ     s:8059

     1359     8058    2           ALTRETURN;

   8058  7 001151   200126 221300                    LDX1  ! NAMEUP+9,,AUTO
         7 001152   000000 702211                    TSX2  ! 0,X1

     1360     8059    2       ITM$ = P_PCB.OUT$->ITM.SUBLK$(0);

   8059  7 001153   000003 236100                    LDQ     3,,PR0
         7 001154   200015 756100                    STQ     ITM$,,AUTO

     1361     8060    3       DO CASE( ITM.CODE);

   8060  7 001155   200015 471500                    LDP1    ITM$,,AUTO
         7 001156   100000 236100                    LDQ     0,,PR1
         7 001157   777777 376007                    ANQ     -1,DL
         7 001160   000005 136007                    SBLQ    5,DL
         7 001161   000013 116007                    CMPQ    11,DL
         7 001162   001164 602006 7                  TNC     s:8060+7,QL
         7 001163   001604 710000 7                  TRA     s:8162
         7 001164   001201 710000 7                  TRA     s:8064
         7 001165   001324 710000 7                  TRA     s:8097
         7 001166   001415 710000 7                  TRA     s:8118
         7 001167   001504 710000 7                  TRA     s:8138
         7 001170   001604 710000 7                  TRA     s:8162
         7 001171   001604 710000 7                  TRA     s:8162
         7 001172   001604 710000 7                  TRA     s:8162
         7 001173   001604 710000 7                  TRA     s:8162
         7 001174   001604 710000 7                  TRA     s:8162
         7 001175   001604 710000 7                  TRA     s:8162
         7 001176   001177 710000 7                  TRA     s:8062

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:117  
     1362     8061    3           CASE( %C_COMMENT);

     1363     8062    3               ALTRETURN;

   8062  7 001177   200126 221300                    LDX1  ! NAMEUP+9,,AUTO
         7 001200   000000 702211                    TSX2  ! 0,X1

     1364     8063    3           CASE( %C_HOSTENT);

     1365     8064    3               XSL$HOSTENT = XSL_HOSTENT;

   8064  7 001201   000000 100400                    MLR     fill='000'O
         7 001202   000220 000024 1                  ADSC9   XSL_HOSTENT              cn=0,n=20
         7 001203   000171 000204 2                  ADSC9   RESULTBUF                cn=0,n=132

     1366     8065    3               XSL$HOSTENT.H_ALIASES$ = ADDR( NAMEPTR$(0));

   8065  7 001204   000005 236000 8                  LDQ     5
         7 001205   000172 756000 2                  STQ     RESULTBUF+1

     1367     8066    4               DO I = 0 TO ITM.NSUBLKS - 1;

   8066  7 001206   200014 450100                    STZ     I,,AUTO
         7 001207   001316 710000 7                  TRA     s:8095+1

     1368     8067    4                   OUT$ = ITM.SUBLK$( I);

   8067  7 001210   200015 470500                    LDP0    ITM$,,AUTO
         7 001211   200014 720100                    LXL0    I,,AUTO
         7 001212   000003 236110                    LDQ     3,X0,PR0
         7 001213   200017 756100                    STQ     OUT$,,AUTO

     1369     8068    4                   J = 0;

   8068  7 001214   200016 450100                    STZ     J,,AUTO

     1370     8069    4   MULTIHOMED:
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:118  
     1371     8070    4                   TMP$ = ADDR( OUT.SUBLK$( J)->SYM.COUNT);

   8070  7 001215   200017 470500       MULTIHOMED   LDP0    OUT$,,AUTO
         7 001216   200016 720100                    LXL0    J,,AUTO
         7 001217   000003 471510                    LDP1    3,X0,PR0
         7 001220   100004 633500                    EPPR3   4,,PR1
         7 001221   200020 453500                    STP3    TMP$,,AUTO

     1372     8071    4                   CALL UNTEXTC;

   8071  7 001222   001615 701000 7                  TSX1    UNTEXTC
         7 001223   000000 011000                    NOP     0

     1373     8072    5                   DO CASE( OUT.CODE);

   8072  7 001224   200017 470500                    LDP0    OUT$,,AUTO
         7 001225   000000 236100                    LDQ     0,,PR0
         7 001226   777777 376007                    ANQ     -1,DL
         7 001227   000011 136007                    SBLQ    9,DL
         7 001230   000003 116007                    CMPQ    3,DL
         7 001231   001233 602006 7                  TNC     s:8072+7,QL
         7 001232   001315 710000 7                  TRA     s:8095
         7 001233   001236 710000 7                  TRA     s:8074
         7 001234   001305 710000 7                  TRA     s:8090
         7 001235   001300 710000 7                  TRA     s:8087

     1374     8073    5                       CASE( %C_ADDR);

     1375     8074    5                           XSL$HOSTENT.H_ADDRTYPE = %XSL_AF_INET;

   8074  7 001236   000002 235007                    LDA     2,DL
         7 001237   000173 755000 2                  STA     RESULTBUF+2

     1376     8075    5                           CALL XSL$INET_ADDR( INETADDR( J), TMPCHARS);

   8075  7 001240   200020 236100                    LDQ     TMP$,,AUTO
         7 001241   200133 756100                    STQ     NAMEUP+14,,AUTO
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:119  
         7 001242   200016 720100                    LXL0    J,,AUTO
         7 001243   000076 631410 2                  EPPR1   INETADDR,X0
         7 001244   200132 451500                    STP1    NAMEUP+13,,AUTO
         7 001245   200132 630500                    EPPR0   NAMEUP+13,,AUTO
         7 001246   000020 631400 xsym               EPPR1   B_VECTNIL+16
         7 001247   000000 701000 xent               TSX1    XSL$INET_ADDR
         7 001250   000000 011000                    NOP     0

     1377     8076    6                           IF J = 0 THEN DO;

   8076  7 001251   200016 235100                    LDA     J,,AUTO
         7 001252   001260 601000 7                  TNZ     s:8081

     1378     8077    6                               H_ADDRLEN = 4;

   8077  7 001253   000004 236007                    LDQ     4,DL
         7 001254   200070 756100                    STQ     H_ADDRLEN,,AUTO

     1379     8078    6                               XSL$HOSTENT.H_LENGTH = 4;

   8078  7 001255   000174 756000 2                  STQ     RESULTBUF+3

     1380     8079    6                               XSL$HOSTENT.H_ADDR_LIST$ = ADDR( INETPTR$(0));

   8079  7 001256   000006 236000 8                  LDQ     6
         7 001257   000175 756000 2                  STQ     RESULTBUF+4

     1381     8080    6                               END;

     1382     8081    5                           INETPTR$( J) = ADDR( INETADDR( J));

   8081  7 001260   000076 630405 2                  EPPR0   INETADDR,AL
         7 001261   200016 720100                    LXL0    J,,AUTO
         7 001262   000104 450410 2                  STP0    INETPTR$,X0

     1383     8082    5                           J = J + 1;

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:120  
   8082  7 001263   200016 054100                    AOS     J,,AUTO

     1384     8083    5                           IF J < OUT.NSUBLKS AND J < 5 THEN

   8083  7 001264   200017 470500                    LDP0    OUT$,,AUTO
         7 001265   000001 236100                    LDQ     1,,PR0
         7 001266   000022 772000                    QRL     18
         7 001267   200016 116100                    CMPQ    J,,AUTO
         7 001270   001274 604400 7                  TMOZ    s:8085
         7 001271   200016 235100                    LDA     J,,AUTO
         7 001272   000005 115007                    CMPA    5,DL
         7 001273   001215 604000 7                  TMI     MULTIHOMED

     1385     8084    5                               GOTO MULTIHOMED;
     1386     8085    5                           INETPTR$( J) = ADDR( NIL);

   8085  7 001274   000001 236000 xsym               LDQ     B_VECTNIL+1
         7 001275   200016 720100                    LXL0    J,,AUTO
         7 001276   000104 756010 2                  STQ     INETPTR$,X0
         7 001277   001315 710000 7                  TRA     s:8095

     1387     8086    5                       CASE( %C_NAME);

     1388     8087    5                           H_NAMELEN = LEN;

   8087  7 001300   200011 235100                    LDA     LEN,,AUTO
         7 001301   200067 755100                    STA     H_NAMELEN,,AUTO

     1389     8088    5                           XSL$HOSTENT.H_NAME$ = TMP$;

   8088  7 001302   200020 236100                    LDQ     TMP$,,AUTO
         7 001303   000171 756000 2                  STQ     RESULTBUF
         7 001304   001315 710000 7                  TRA     s:8095

     1390     8089    5                       CASE( %C_ALIAS);

     1391     8090    5                           NAMEPTR$( PTR#) = TMP$;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:121  

   8090  7 001305   200020 236100                    LDQ     TMP$,,AUTO
         7 001306   200026 720100                    LXL0    PTR#,,AUTO
         7 001307   000112 756010 2                  STQ     NAMEPTR$,X0

     1392     8091    5                           XSL$HOSTENT.PTR$( PTR#) = ADDR( NAMEPTR$( PTR#));

   8091  7 001310   000112 631410 2                  EPPR1   NAMEPTR$,X0
         7 001311   000176 451410 2                  STP1    RESULTBUF+5,X0

     1393     8092    5                           PTRLEN( PTR#) = LEN;

   8092  7 001312   200011 235100                    LDA     LEN,,AUTO
         7 001313   200027 755110                    STA     PTRLEN,X0,AUTO

     1394     8093    5                           PTR# = PTR# + 1;

   8093  7 001314   200026 054100                    AOS     PTR#,,AUTO

     1395     8094    5                       END;

     1396     8095    4                   END;

   8095  7 001315   200014 054100                    AOS     I,,AUTO
         7 001316   200015 470500                    LDP0    ITM$,,AUTO
         7 001317   000001 236100                    LDQ     1,,PR0
         7 001320   000022 772000                    QRL     18
         7 001321   200014 116100                    CMPQ    I,,AUTO
         7 001322   001210 605400 7                  TPNZ    s:8067
         7 001323   001606 710000 7                  TRA     s:8164

     1397     8096    3           CASE( %C_NETENT);

     1398     8097    3               XSL$NETENT = XSL_NETENT;

   8097  7 001324   000000 100400                    MLR     fill='000'O
         7 001325   000225 000020 1                  ADSC9   XSL_NETENT               cn=0,n=16
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:122  
         7 001326   000171 000204 2                  ADSC9   RESULTBUF                cn=0,n=132

     1399     8098    3               XSL$NETENT.N_ALIASES$ = ADDR( NAMEPTR$(0));

   8098  7 001327   000005 236000 8                  LDQ     5
         7 001330   000172 756000 2                  STQ     RESULTBUF+1

     1400     8099    4               DO I = 0 TO ITM.NSUBLKS - 1;

   8099  7 001331   200014 450100                    STZ     I,,AUTO
         7 001332   001407 710000 7                  TRA     s:8116+1

     1401     8100    4                   OUT$ = ITM.SUBLK$( I);

   8100  7 001333   200015 470500                    LDP0    ITM$,,AUTO
         7 001334   200014 720100                    LXL0    I,,AUTO
         7 001335   000003 236110                    LDQ     3,X0,PR0
         7 001336   200017 756100                    STQ     OUT$,,AUTO

     1402     8101    4                   TMP$ = ADDR( OUT.SUBLK$(0)->SYM.COUNT);

   8101  7 001337   200017 471500                    LDP1    OUT$,,AUTO
         7 001340   100003 473500                    LDP3    3,,PR1
         7 001341   300004 634500                    EPPR4   4,,PR3
         7 001342   200020 454500                    STP4    TMP$,,AUTO

     1403     8102    4                   CALL UNTEXTC;

   8102  7 001343   001615 701000 7                  TSX1    UNTEXTC
         7 001344   000000 011000                    NOP     0

     1404     8103    5                   DO CASE( OUT.CODE);

   8103  7 001345   200017 470500                    LDP0    OUT$,,AUTO
         7 001346   000000 236100                    LDQ     0,,PR0
         7 001347   777777 376007                    ANQ     -1,DL
         7 001350   000012 136007                    SBLQ    10,DL
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:123  
         7 001351   000003 116007                    CMPQ    3,DL
         7 001352   001354 602006 7                  TNC     s:8103+7,QL
         7 001353   001406 710000 7                  TRA     s:8116
         7 001354   001376 710000 7                  TRA     s:8111
         7 001355   001357 710000 7                  TRA     s:8105
         7 001356   001364 710000 7                  TRA     s:8108

     1405     8104    5                       CASE( %C_NAME);

     1406     8105    5                           N_NAMELEN = LEN;

   8105  7 001357   200011 235100                    LDA     LEN,,AUTO
         7 001360   200071 755100                    STA     N_NAMELEN,,AUTO

     1407     8106    5                           XSL$NETENT.N_NAME$ = TMP$;

   8106  7 001361   200020 236100                    LDQ     TMP$,,AUTO
         7 001362   000171 756000 2                  STQ     RESULTBUF
         7 001363   001406 710000 7                  TRA     s:8116

     1408     8107    5                       CASE( %C_NET);

     1409     8108    5                           XSL$NETENT.N_ADDRTYPE = %XSL_AF_INET;

   8108  7 001364   000002 235007                    LDA     2,DL
         7 001365   000173 755000 2                  STA     RESULTBUF+2

     1410     8109    5                           CALL XSL$INET_NETWORK( XSL$NETENT.N_NET, TMP$->TXTN);

   8109  7 001366   200020 236100                    LDQ     TMP$,,AUTO
         7 001367   000007 235000 8                  LDA     7
         7 001370   200132 757100                    STAQ    NAMEUP+13,,AUTO
         7 001371   200132 630500                    EPPR0   NAMEUP+13,,AUTO
         7 001372   000020 631400 xsym               EPPR1   B_VECTNIL+16
         7 001373   000000 701000 xent               TSX1    XSL$INET_NETWORK
         7 001374   000000 011000                    NOP     0
         7 001375   001406 710000 7                  TRA     s:8116
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:124  

     1411     8110    5                       CASE( %C_ALIAS);

     1412     8111    5                           NAMEPTR$( PTR#) = TMP$;

   8111  7 001376   200020 236100                    LDQ     TMP$,,AUTO
         7 001377   200026 720100                    LXL0    PTR#,,AUTO
         7 001400   000112 756010 2                  STQ     NAMEPTR$,X0

     1413     8112    5                           XSL$NETENT.PTR$( PTR#) = ADDR( NAMEPTR$( PTR#));

   8112  7 001401   000112 631410 2                  EPPR1   NAMEPTR$,X0
         7 001402   000176 451410 2                  STP1    RESULTBUF+5,X0

     1414     8113    5                           PTRLEN( PTR#) = LEN;

   8113  7 001403   200011 235100                    LDA     LEN,,AUTO
         7 001404   200027 755110                    STA     PTRLEN,X0,AUTO

     1415     8114    5                           PTR# = PTR# + 1;

   8114  7 001405   200026 054100                    AOS     PTR#,,AUTO

     1416     8115    5                       END;

     1417     8116    4                   END;

   8116  7 001406   200014 054100                    AOS     I,,AUTO
         7 001407   200015 470500                    LDP0    ITM$,,AUTO
         7 001410   000001 236100                    LDQ     1,,PR0
         7 001411   000022 772000                    QRL     18
         7 001412   200014 116100                    CMPQ    I,,AUTO
         7 001413   001333 605400 7                  TPNZ    s:8100
         7 001414   001606 710000 7                  TRA     s:8164

     1418     8117    3           CASE( %C_PROTOENT);

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:125  
     1419     8118    3               XSL$PROTOENT = XSL_PROTOENT;

   8118  7 001415   000000 100400                    MLR     fill='000'O
         7 001416   000231 000014 1                  ADSC9   XSL_PROTOENT             cn=0,n=12
         7 001417   000171 000204 2                  ADSC9   RESULTBUF                cn=0,n=132

     1420     8119    3               XSL$PROTOENT.P_ALIASES$ = ADDR( NAMEPTR$(0));

   8119  7 001420   000005 236000 8                  LDQ     5
         7 001421   000172 756000 2                  STQ     RESULTBUF+1

     1421     8120    4               DO I = 0 TO ITM.NSUBLKS - 1;

   8120  7 001422   200014 450100                    STZ     I,,AUTO
         7 001423   001476 710000 7                  TRA     s:8136+1

     1422     8121    4                   OUT$ = ITM.SUBLK$( I);

   8121  7 001424   200015 470500                    LDP0    ITM$,,AUTO
         7 001425   200014 720100                    LXL0    I,,AUTO
         7 001426   000003 236110                    LDQ     3,X0,PR0
         7 001427   200017 756100                    STQ     OUT$,,AUTO

     1423     8122    4                   TMP$ = ADDR( OUT.SUBLK$(0)->SYM.COUNT);

   8122  7 001430   200017 471500                    LDP1    OUT$,,AUTO
         7 001431   100003 473500                    LDP3    3,,PR1
         7 001432   300004 634500                    EPPR4   4,,PR3
         7 001433   200020 454500                    STP4    TMP$,,AUTO

     1424     8123    4                   CALL UNTEXTC;

   8123  7 001434   001615 701000 7                  TSX1    UNTEXTC
         7 001435   000000 011000                    NOP     0

     1425     8124    5                   DO CASE( OUT.CODE);

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:126  
   8124  7 001436   200017 470500                    LDP0    OUT$,,AUTO
         7 001437   000000 236100                    LDQ     0,,PR0
         7 001440   777777 376007                    ANQ     -1,DL
         7 001441   000012 136007                    SBLQ    10,DL
         7 001442   000005 116007                    CMPQ    5,DL
         7 001443   001445 602006 7                  TNC     s:8124+7,QL
         7 001444   001475 710000 7                  TRA     s:8136
         7 001445   001465 710000 7                  TRA     s:8131
         7 001446   001452 710000 7                  TRA     s:8126
         7 001447   001475 710000 7                  TRA     s:8136
         7 001450   001475 710000 7                  TRA     s:8136
         7 001451   001457 710000 7                  TRA     s:8129

     1426     8125    5                       CASE( %C_NAME);

     1427     8126    5                           P_NAMELEN = LEN;

   8126  7 001452   200011 235100                    LDA     LEN,,AUTO
         7 001453   200072 755100                    STA     P_NAMELEN,,AUTO

     1428     8127    5                           XSL$PROTOENT.P_NAME$ = TMP$;

   8127  7 001454   200020 236100                    LDQ     TMP$,,AUTO
         7 001455   000171 756000 2                  STQ     RESULTBUF
         7 001456   001475 710000 7                  TRA     s:8136

     1429     8128    5                       CASE( %C_PROTO);

     1430     8129    5                           CALL CHARBIN( XSL$PROTOENT.P_PROTO, TMP$->TXTN);

   8129  7 001457   200020 471500                    LDP1    TMP$,,AUTO
         7 001460   200011 720100                    LXL0    LEN,,AUTO
         7 001461   000000 305540                    DTB
         7 001462   100000 030010                    NDSC9   0,,PR1                   cn=0,s=nosgn,sf=0,n=*X0
         7 001463   000173 000004 2                  NDSC9   RESULTBUF+2              cn=0,s=lsgnf,sf=0,n=4
         7 001464   001475 710000 7                  TRA     s:8136

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:127  
     1431     8130    5                       CASE( %C_ALIAS);

     1432     8131    5                           NAMEPTR$( PTR#) = TMP$;

   8131  7 001465   200020 236100                    LDQ     TMP$,,AUTO
         7 001466   200026 720100                    LXL0    PTR#,,AUTO
         7 001467   000112 756010 2                  STQ     NAMEPTR$,X0

     1433     8132    5                           XSL$PROTOENT.PTR$( PTR#) = ADDR( NAMEPTR$( PTR#));

   8132  7 001470   000112 631410 2                  EPPR1   NAMEPTR$,X0
         7 001471   000176 451410 2                  STP1    RESULTBUF+5,X0

     1434     8133    5                           PTRLEN( PTR#) = LEN;

   8133  7 001472   200011 235100                    LDA     LEN,,AUTO
         7 001473   200027 755110                    STA     PTRLEN,X0,AUTO

     1435     8134    5                           PTR# = PTR# + 1;

   8134  7 001474   200026 054100                    AOS     PTR#,,AUTO

     1436     8135    5                       END;

     1437     8136    4                   END;

   8136  7 001475   200014 054100                    AOS     I,,AUTO
         7 001476   200015 470500                    LDP0    ITM$,,AUTO
         7 001477   000001 236100                    LDQ     1,,PR0
         7 001500   000022 772000                    QRL     18
         7 001501   200014 116100                    CMPQ    I,,AUTO
         7 001502   001424 605400 7                  TPNZ    s:8121
         7 001503   001606 710000 7                  TRA     s:8164

     1438     8137    3           CASE( %C_SERVENT);

     1439     8138    3               XSL$SERVENT = XSL_SERVENT;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:128  

   8138  7 001504   000000 100400                    MLR     fill='000'O
         7 001505   000234 000020 1                  ADSC9   XSL_SERVENT              cn=0,n=16
         7 001506   000171 000204 2                  ADSC9   RESULTBUF                cn=0,n=132

     1440     8139    3               XSL$SERVENT.S_ALIASES$ = ADDR( NAMEPTR$(0));

   8139  7 001507   000005 236000 8                  LDQ     5
         7 001510   000172 756000 2                  STQ     RESULTBUF+1

     1441     8140    4               DO I = 0 TO ITM.NSUBLKS - 1;

   8140  7 001511   200014 450100                    STZ     I,,AUTO
         7 001512   001576 710000 7                  TRA     s:8160+1

     1442     8141    4                   OUT$ = ITM.SUBLK$( I);

   8141  7 001513   200015 470500                    LDP0    ITM$,,AUTO
         7 001514   200014 720100                    LXL0    I,,AUTO
         7 001515   000003 236110                    LDQ     3,X0,PR0
         7 001516   200017 756100                    STQ     OUT$,,AUTO

     1443     8142    4                   TMP$ = ADDR( OUT.SUBLK$(0)->SYM.COUNT);

   8142  7 001517   200017 471500                    LDP1    OUT$,,AUTO
         7 001520   100003 473500                    LDP3    3,,PR1
         7 001521   300004 634500                    EPPR4   4,,PR3
         7 001522   200020 454500                    STP4    TMP$,,AUTO

     1444     8143    4                   CALL UNTEXTC;

   8143  7 001523   001615 701000 7                  TSX1    UNTEXTC
         7 001524   000000 011000                    NOP     0

     1445     8144    5                   DO CASE( OUT.CODE);

   8144  7 001525   200017 470500                    LDP0    OUT$,,AUTO
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:129  
         7 001526   000000 236100                    LDQ     0,,PR0
         7 001527   777777 376007                    ANQ     -1,DL
         7 001530   000012 136007                    SBLQ    10,DL
         7 001531   000005 116007                    CMPQ    5,DL
         7 001532   001534 602006 7                  TNC     s:8144+7,QL
         7 001533   001575 710000 7                  TRA     s:8160
         7 001534   001565 710000 7                  TRA     s:8155
         7 001535   001541 710000 7                  TRA     s:8146
         7 001536   001575 710000 7                  TRA     s:8160
         7 001537   001546 710000 7                  TRA     s:8149
         7 001540   001560 710000 7                  TRA     s:8152

     1446     8145    5                       CASE( %C_NAME);

     1447     8146    5                           S_NAMELEN = LEN;

   8146  7 001541   200011 235100                    LDA     LEN,,AUTO
         7 001542   200073 755100                    STA     S_NAMELEN,,AUTO

     1448     8147    5                           XSL$SERVENT.S_NAME$ = TMP$;

   8147  7 001543   200020 236100                    LDQ     TMP$,,AUTO
         7 001544   000171 756000 2                  STQ     RESULTBUF
         7 001545   001575 710000 7                  TRA     s:8160

     1449     8148    5                       CASE( %C_PORT);

     1450     8149    5                           CALL CHARBIN( XSL$SERVENT.S_PORT, TMP$->TXTN);

   8149  7 001546   200020 471500                    LDP1    TMP$,,AUTO
         7 001547   200011 720100                    LXL0    LEN,,AUTO
         7 001550   000000 305540                    DTB
         7 001551   100000 030010                    NDSC9   0,,PR1                   cn=0,s=nosgn,sf=0,n=*X0
         7 001552   000173 000004 2                  NDSC9   RESULTBUF+2              cn=0,s=lsgnf,sf=0,n=4

     1451     8150    5                           CALL XSL$HTONL( XSL$SERVENT.S_PORT, XSL$SERVENT.S_PORT);

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:130  
   8150  7 001553   000010 630400 8                  EPPR0   8
         7 001554   000020 631400 xsym               EPPR1   B_VECTNIL+16
         7 001555   000000 701000 xent               TSX1    XSL$HTONL
         7 001556   000000 011000                    NOP     0
         7 001557   001575 710000 7                  TRA     s:8160

     1452     8151    5                       CASE( %C_PROTO);

     1453     8152    5                           S_PROTOLEN = LEN;

   8152  7 001560   200011 235100                    LDA     LEN,,AUTO
         7 001561   200074 755100                    STA     S_PROTOLEN,,AUTO

     1454     8153    5                           XSL$SERVENT.S_PROTO$ = TMP$;

   8153  7 001562   200020 236100                    LDQ     TMP$,,AUTO
         7 001563   000174 756000 2                  STQ     RESULTBUF+3
         7 001564   001575 710000 7                  TRA     s:8160

     1455     8154    5                       CASE( %C_ALIAS);

     1456     8155    5                           NAMEPTR$( PTR#) = TMP$;

   8155  7 001565   200020 236100                    LDQ     TMP$,,AUTO
         7 001566   200026 720100                    LXL0    PTR#,,AUTO
         7 001567   000112 756010 2                  STQ     NAMEPTR$,X0

     1457     8156    5                           XSL$SERVENT.PTR$( PTR#) = ADDR( NAMEPTR$( PTR#));

   8156  7 001570   000112 631410 2                  EPPR1   NAMEPTR$,X0
         7 001571   000176 451410 2                  STP1    RESULTBUF+5,X0

     1458     8157    5                           PTRLEN( PTR#) = LEN;

   8157  7 001572   200011 235100                    LDA     LEN,,AUTO
         7 001573   200027 755110                    STA     PTRLEN,X0,AUTO

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:131  
     1459     8158    5                           PTR# = PTR# + 1;

   8158  7 001574   200026 054100                    AOS     PTR#,,AUTO

     1460     8159    5                       END;

     1461     8160    4                   END;

   8160  7 001575   200014 054100                    AOS     I,,AUTO
         7 001576   200015 470500                    LDP0    ITM$,,AUTO
         7 001577   000001 236100                    LDQ     1,,PR0
         7 001600   000022 772000                    QRL     18
         7 001601   200014 116100                    CMPQ    I,,AUTO
         7 001602   001513 605400 7                  TPNZ    s:8141
         7 001603   001606 710000 7                  TRA     s:8164

     1462     8161    3           CASE( ELSE);

     1463     8162    3               ALTRETURN;

   8162  7 001604   200126 221300                    LDX1  ! NAMEUP+9,,AUTO
         7 001605   000000 702211                    TSX2  ! 0,X1

     1464     8163    3           END;

     1465     8164    2       NAMEPTR$( PTR#) = ADDR( NIL);

   8164  7 001606   000001 236000 xsym               LDQ     B_VECTNIL+1
         7 001607   200026 720100                    LXL0    PTR#,,AUTO
         7 001610   000112 756010 2                  STQ     NAMEPTR$,X0

     1466     8165    2       XSL$ANYENT.PTR$( PTR#) = ADDR( NAMEPTR$( PTR#));

   8165  7 001611   000112 631410 2                  EPPR1   NAMEPTR$,X0
         7 001612   000176 451410 2                  STP1    RESULTBUF+5,X0

     1467     8166    2       RETURN;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:132  

   8166  7 001613   200126 221300                    LDX1  ! NAMEUP+9,,AUTO
         7 001614   000001 702211                    TSX2  ! 1,X1

     1468     8167
     1469     8168    2   END PARSERECORD;
     1470     8169
     1471     8170    1   UNTEXTC: PROC;

   8170  7 001615   200130 741300       UNTEXTC      STX1  ! NAMEUP+11,,AUTO

     1472     8171
     1473     8172    2       LEN = TMP$->TXTC.LEN;

   8172  7 001616   200020 470500                    LDP0    TMP$,,AUTO
         7 001617   000000 236100                    LDQ     0,,PR0
         7 001620   000033 772000                    QRL     27
         7 001621   200011 756100                    STQ     LEN,,AUTO

     1474     8173    2       CALL INSERT( TMPCHARS, 0, LEN, TMP$->TXTC.TXT);

   8173  7 001622   000000 620006                    EAX0    0,QL
         7 001623   200011 722100                    LXL2    LEN,,AUTO
         7 001624   040140 100540                    MLR     fill='040'O
         7 001625   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
         7 001626   000000 000012                    ADSC9   0,,PR0                   cn=0,n=*X2

     1475     8174    2       CALL INSERT( TMPCHARS, LEN, 1, BINASC( 0));

   8174  7 001627   200011 235100                    LDA     LEN,,AUTO
         7 001630   040105 100400                    MLR     fill='040'O
         7 001631   000001 000001 8                  ADSC9   1                        cn=0,n=1
         7 001632   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1

     1476     8175    2       RETURN;

   8175  7 001633   200130 221300                    LDX1  ! NAMEUP+11,,AUTO
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:133  
         7 001634   000001 702211                    TSX2  ! 1,X1

     1477     8176
     1478     8177    2   END UNTEXTC;
     1479     8178        %EJECT;
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:134  
     1480     8179    1   TRY_SERVER:
     1481     8180    2       DO CASE( ACTION);

   8180  7 001635   200007 235100       TRY_SERVER   LDA     ACTION,,AUTO
         7 001636   000003 115007                    CMPA    3,DL
         7 001637   001641 602005 7                  TNC     TRY_SERVER+4,AL
         7 001640   001663 710000 7                  TRA     s:8192
         7 001641   001663 710000 7                  TRA     s:8192
         7 001642   001644 710000 7                  TRA     s:8182
         7 001643   001655 710000 7                  TRA     s:8187

     1482     8181    2           CASE( %SETENT);

     1483     8182    2               CALL CLOSEFILE ALTRET( RETURN_NIL);

   8182  7 001644   001101 701000 7                  TSX1    CLOSEFILE
         7 001645   000723 702000 7                  TSX2    RETURN_NIL

     1484     8183    2               CALL OPENFILE ALTRET( THIS_COMMAND);

   8183  7 001646   000763 701000 7                  TSX1    OPENFILE
         7 001647   000263 702000 7                  TSX2    THIS_COMMAND

     1485     8184    2               STAYOPEN( ENTRYFLAG) = PARM1;

   8184  7 001650   200004 470500                    LDP0    @PARM1,,AUTO
         7 001651   200010 720100                    LXL0    ENTRYFLAG,,AUTO
         7 001652   000000 235100                    LDA     0,,PR0
         7 001653   000124 755010 2                  STA     STAYOPEN,X0

     1486     8185    2               GOTO SUCCESS;

   8185  7 001654   001657 710000 7                  TRA     SUCCESS

     1487     8186    2           CASE( %ENDENT);

     1488     8187    2               CALL CLOSEFILE ALTRET( RETURN_NIL);
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:135  

   8187  7 001655   001101 701000 7                  TSX1    CLOSEFILE
         7 001656   000723 702000 7                  TSX2    RETURN_NIL

     1489     8188    2   SUCCESS:
     1490     8189    2               RESULT$ = ADDR( ETCBUFFER); /* a non-NULL ptr */

   8189  7 001657   000012 236000 8     SUCCESS      LDQ     10
         7 001660   200003 470500                    LDP0    @RESULT$,,AUTO
         7 001661   000000 756100                    STQ     0,,PR0

     1491     8190    2               RETURN;

   8190  7 001662   000000 702200 xent               TSX2  ! X66_ARET

     1492     8191    2           CASE( ELSE);

     1493     8192    2               CALL OPENFILE ALTRET( THIS_COMMAND);

   8192  7 001663   000763 701000 7                  TSX1    OPENFILE
         7 001664   000263 702000 7                  TSX2    THIS_COMMAND

     1494     8193    2               RQS.BUF = '0'B;

   8193  7 001665   000000 100400                    MLR     fill='000'O
         7 001666   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         7 001667   000171 000050 2                  ADSC9   RESULTBUF                cn=0,n=40

     1495     8194    2               RQS.BUF.RELOC$ = ADDR( ETCBUFFER);

   8194  7 001670   000012 236000 8                  LDQ     10
         7 001671   000172 756000 2                  STQ     RESULTBUF+1

     1496     8195    3               DO CASE( ACTION);

   8195  7 001672   200007 235100                    LDA     ACTION,,AUTO
         7 001673   000005 115007                    CMPA    5,DL
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:136  
         7 001674   001676 602005 7                  TNC     s:8195+4,AL
         7 001675   001753 710000 7                  TRA     s:8213
         7 001676   001751 710000 7                  TRA     s:8211
         7 001677   001753 710000 7                  TRA     s:8213
         7 001700   001753 710000 7                  TRA     s:8213
         7 001701   001703 710000 7                  TRA     s:8197
         7 001702   001736 710000 7                  TRA     s:8207

     1497     8196    3                   CASE( %BYNAME);

     1498     8197    3                       RQS.BUF.TYPE = 1;

   8197  7 001703   000001 220003                    LDX0    1,DU
         7 001704   000171 740000 2                  STX0    RESULTBUF

     1499     8198    4                       IF SUBSTR( PARM1$->TXTN, 0, 1) < ' ' THEN DO;

   8198  7 001705   200023 470500                    LDP0    PARM1$,,AUTO
         7 001706   040000 106500                    CMPC    fill='040'O
         7 001707   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         7 001710   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         7 001711   001723 603000 7                  TRC     s:8203

     1500     8199    4                           P1LEN = ASCBIN( SUBSTR( PARM1$->TXTN, 0, 1));

   8199  7 001712   000100 101500                    MRL     fill='000'O
         7 001713   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         7 001714   200132 000004                    ADSC9   NAMEUP+13,,AUTO          cn=0,n=4
         7 001715   200132 236100                    LDQ     NAMEUP+13,,AUTO
         7 001716   200012 756100                    STQ     P1LEN,,AUTO

     1501     8200    4                           PARM1$ = PINCRC( PARM1$, 1);

   8200  7 001717   200023 236100                    LDQ     PARM1$,,AUTO
         7 001720   200000 036007                    ADLQ    65536,DL
         7 001721   200023 756100                    STQ     PARM1$,,AUTO

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:137  
     1502     8201    4                           END;

   8201  7 001722   001727 710000 7                  TRA     s:8204

     1503     8202    3                       ELSE
     1504     8203    3                           CALL INDEX( P1LEN, BINASC(0), PARM1$->TMPCHARS);

   8203  7 001723   000000 124500                    SCM     mask='000'O
         7 001724   000000 000040                    ADSC9   0,,PR0                   cn=0,n=32
         7 001725   000001 000001 8                  ADSC9   1                        cn=0,n=1
         7 001726   200012 000100                    ARG     P1LEN,,AUTO

     1505     8204    3                       RQS.BUF.LEN = P1LEN;

   8204  7 001727   200012 721100                    LXL1    P1LEN,,AUTO
         7 001730   000171 441000 2                  SXL1    RESULTBUF

     1506     8205    3                       RQS.BUF.DATA = SUBSTR( PARM1$->TXTN, 0, P1LEN);

   8205  7 001731   200023 470500                    LDP0    PARM1$,,AUTO
         7 001732   040000 100540                    MLR     fill='040'O
         7 001733   000000 000011                    ADSC9   0,,PR0                   cn=0,n=*X1
         7 001734   000173 000040 2                  ADSC9   RESULTBUF+2              cn=0,n=32
         7 001735   001753 710000 7                  TRA     s:8213

     1507     8206    3                   CASE( %BYADDR);

     1508     8207    3                       RQS.BUF.TYPE = 2;

   8207  7 001736   000002 220003                    LDX0    2,DU
         7 001737   000171 740000 2                  STX0    RESULTBUF

     1509     8208    3                       RQS.BUF.LEN = PARM2;

   8208  7 001740   200005 470500                    LDP0    @PARM2,,AUTO
         7 001741   000000 721100                    LXL1    0,,PR0
         7 001742   000171 441000 2                  SXL1    RESULTBUF
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:138  

     1510     8209    3                       RQS.BUF.DATA = SUBSTR( PARM1$->TXTN, 0, PARM2);

   8209  7 001743   000000 722100                    LXL2    0,,PR0
         7 001744   200023 471500                    LDP1    PARM1$,,AUTO
         7 001745   040000 100540                    MLR     fill='040'O
         7 001746   100000 000012                    ADSC9   0,,PR1                   cn=0,n=*X2
         7 001747   000173 000040 2                  ADSC9   RESULTBUF+2              cn=0,n=32
         7 001750   001753 710000 7                  TRA     s:8213

     1511     8210    3                   CASE( %GETENT);

     1512     8211    3                       RQS.BUF.TYPE = 3;

   8211  7 001751   000003 220003                    LDX0    3,DU
         7 001752   000171 740000 2                  STX0    RESULTBUF

     1513     8212    3                   END;

     1514     8213    2               CALL WRITEFILE ALTRET( THIS_COMMAND);

   8213  7 001753   001010 701000 7                  TSX1    WRITEFILE
         7 001754   000263 702000 7                  TSX2    THIS_COMMAND

     1515     8214    2               CALL READFILE ALTRET( THIS_COMMAND);

   8214  7 001755   001040 701000 7                  TSX1    READFILE
         7 001756   000263 702000 7                  TSX2    THIS_COMMAND

     1516     8215    2               IF STAYOPEN( ENTRYFLAG) = 0 THEN

   8215  7 001757   200010 720100                    LXL0    ENTRYFLAG,,AUTO
         7 001760   000124 235010 2                  LDA     STAYOPEN,X0
         7 001761   001764 601000 7                  TNZ     s:8217

     1517     8216    2                   CALL CLOSEFILE2;  /* ignore ALTRET */

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:139  
   8216  7 001762   001105 701000 7                  TSX1    CLOSEFILE2
         7 001763   000000 011000                    NOP     0

     1518     8217    3               IF RSP.BUF.RESULT = -1 THEN DO;

   8217  7 001764   000130 235000 2                  LDA     ETCBUFFER
         7 001765   000027 115000 xsym               CMPA    B_VECTNIL+23
         7 001766   001775 601000 7                  TNZ     s:8222

     1519     8218    3                   RESULT$ = ADDR( NIL);

   8218  7 001767   000001 236000 xsym               LDQ     B_VECTNIL+1
         7 001770   200003 470500                    LDP0    @RESULT$,,AUTO
         7 001771   000000 756100                    STQ     0,,PR0

     1520     8219    3                   XSL_ERRNO = RSP.BUF.ERRNO;

   8219  7 001772   000131 235000 2                  LDA     ETCBUFFER+1
         7 001773   000000 755000 xsym               STA     XSL_ERRNO

     1521     8220    3                   ALTRETURN;

   8220  7 001774   000000 702200 xent               TSX2  ! X66_AALT

     1522     8221    3                   END;
     1523     8222    2               RESULT$ = ADDR( ETCBUFFER);

   8222  7 001775   000012 236000 8                  LDQ     10
         7 001776   200003 470500                    LDP0    @RESULT$,,AUTO
         7 001777   000000 756100                    STQ     0,,PR0

     1524     8223    2               RETURN;

   8223  7 002000   000000 702200 xent               TSX2  ! X66_ARET

FPT_OPEN
 Sect OctLoc
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:140  
   1     000   000025 777640   000044 006000   000000 177640   000000 006014    .....$..........
   1     004   000000 177640   000000 006014   000002 377640   000212 006000    ................
   1     010   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     024*  000001 777640   000116 006000   000000 177640   000000 006014    .....N..........
   1     030   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     044*  000000 000052   000000 001004   252525 000000   000040 252520    ...*......... ..
   1     050   000040 040040   000000 000000   000000 777777   000000 000000    .   ............
   1     054   000000 000000   000000 000000   000000 000000   000000 000000    ................
   1     060   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
   1     064   040040 040040   000000 000000   000000 000000   000000 000000        ............
   1     070   000000 000000   ****** ******                                    ........

FPT_WRITE
 Sect OctLoc
   1     072   000003 777640   000102 006000   000000 177640   000000 006014    .....B..........
   1     076   000011 777640   000171 006000   000007 777640   000106 006000    .....y.......F..
   1     102   000000 400400   000000 000000   000000 000000   000000 000000    ................

VLP_STATION
 Sect OctLoc
   1     106   123105 122126   105122 040040   040040 040040   040040 040040    SERVER
   1     112   001000 000000   000000 000000   000000 000000   000000 000000    ................

VLP_ACCT
 Sect OctLoc
   1     116   072123 131123   040040 040040                                    :SYS

TEST_OPEN
 Sect OctLoc
   1     120   000025 777640   000164 006000   000000 177640   000000 006014    .....t..........
   1     124   000000 177640   000000 006014   000002 377640   000215 006000    ................
   1     130   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     164*  000000 020072   000000 002001   252525 000001   000040 252520    ...:......... ..
   1     170   000040 040040   000000 000000   000000 777777   000000 000000    .   ............
   1     174   000000 000000   000000 000000   000000 000000   000000 000000    ................
   1     200   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
   1     204   040040 040040   000000 000000   000000 000000   000000 000000        ............
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:141  
   1     210   000000 000000   ****** ******                                    ........

NAMESERCG
 Sect OctLoc
   1     212   011116 101115   105123 105122   103107 ******                    .NAMESERCG..

ETC_HOSTS
 Sect OctLoc
   1     215   011145 164143   072150 157163   164163 ******                    .etc:hosts..

XSL_HOSTENT
 Sect OctLoc
   1     220   000000 006014   000000 006014   000000 000000   000000 000000    ................
   1     224   000000 006014                                                    ....

XSL_NETENT
 Sect OctLoc
   1     225   000000 006014   000000 006014   000000 000000   000000 000000    ................

XSL_PROTOENT
 Sect OctLoc
   1     231   000000 006014   000000 006014   000000 000000                    ............

XSL_SERVENT
 Sect OctLoc
   1     234   000000 006014   000000 006014   000000 000000   000000 006014    ................

ROOT$
 Sect OctLoc
   1     240   000000 006000   000000 006000   000000 006000   000000 006000    ................

DCBNUMS
 Sect OctLoc
   1     244   000000 000000   000000 000000   000000 000000   000000 000000    ................

LOCAL_HOST_NAME
 Sect OctLoc
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:142  
   1     250   114117 103101   114110 117123   124000 ******                    LOCALHOST...

FPT_CLOSE
 Sect OctLoc
   2     000   000003 777640   000032 006000   000000 177640   000000 006014    ................
   2     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
   2     030*  000000 177640   000000 006014   000000 000002   000000 000040    ...............
   2     034   000220 000000   000000 000000                                    ........

FPT_PFIL
 Sect OctLoc
   2     036   000001 777640   000040 006000   000000 400000   000000 000000    ..... ..........

FPT_READ
 Sect OctLoc
   2     042   000005 777640   000052 006000   000000 177640   000000 006014    .....*..........
   2     046   000040 777640   000130 006000   000000 177640   000000 006014    . ...X..........
   2     052   000000 400000   000000 000000   000000 000000   000000 000000    ................
   2     056   000000 000000   000000 000000                                    ........

P_PCB
 Sect OctLoc
   2     060   000130 006000   000000 006014   000232 006000   000000 006014    .X..............
   2     064   000000 000000   000310 400000   000000 000000   040040 040040    ............
   2     070   000000 040000   000000 000000   000000 000000   000000 006014    .. .............
   2     074   000000 006014   000000 000000                                    ........

INETADDR
 Sect OctLoc
   2     076   000000 000000   000000 000000   000000 000000   000000 000000    ................
   2     102   000000 000000   000000 000000                                    ........

INETPTR$
 Sect OctLoc
   2     104   000000 006014   000000 006014   000000 006014   000000 006014    ................
   2     110   000000 006014   000000 006014                                    ........

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:143  
NAMEPTR$
 Sect OctLoc
   2     112   000000 006014   000000 006014   000000 006014   000000 006014    ................
   2     116   000000 006014   000000 006014                                    ........

ARS
 Sect OctLoc
   2     120   000000 000000   000000 000000   000000 000000   000000 000000    ................

STAYOPEN
 Sect OctLoc
   2     124   000000 000000   000000 000000   000000 000000   000000 000000    ................

ETCBUFFER
 Sect OctLoc
   2     130   ****** ******   ****** ******   ****** ******   ****** ******    ................

RESULTBUF
 Sect OctLoc
   2     171   ****** ******   ****** ******   ****** ******   ****** ******    ................

PARSEWORK
 Sect OctLoc
   2     232   ****** ******   ****** ******   ****** ******   ****** ******    ................

(unnamed)
 Sect OctLoc
   3     000   000000 000000   000000 000000   000000 000000   000000 000501    ................
   3     004   000000 000000   000000 000000   000000 006014   000000 006014    ................
   3     010   011145 164143   072150 157163   164163 040040   040040 040040    .etc:hosts
   3     014   040040 040040   040040 040040   040040 040040   040040 040040
   3     020   072123 131123   040040 040040   040040 040040   040040 040040    :SYS
   3     024   040040 040040   040040 040040   115105 040040   040040 040040            ME
   3     030   040040 040040   000000 203015   000002 001000   000000 000000        ............
   3     034   000000 000000   000000 000000   000000 000001   000002 776003    ................
   3     040   001000 000000   000000 000002   000000 000000   000000 000000    ................
   3     044   000000 000111   040040 040040   000000 006014   000000 006014    ...I    ........
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:144  
   3     050   000000 006014   000000 000000   000000 000000   000000 006014    ................
   3     054   000000 000000   000000 000000   000000 000000   000000 000000    ................
   3     060   000000 010000   000000 000000   000000 000000   000000 000000    ................
   3     064   000000 000020   000000 000000   000000 006014   000000 000000    ................
   3     070   000000 000000   000000 000000   000000 000000   000000 000000    ................
   3     074   000000 000000   000000 006014   000000 000000   000000 000000    ................
   3     100   000000 000000   000000 000000   000000 000000   000000 000000    ................
   3     104   ****** ******   ****** ******   000000 000000   ****** ******    ................
   3     110   000000 000000   000000 000000   000000 000000   000000 000000    ................
   3     124*  000000 000000   000000 000000   000000 000000   ****** ******    ................
   3     134*  ****** ******   ****** ******   ****** ******   000000 070707    ..............8.
   3     140   ****** ******   ****** ******                                    ........

(unnamed)
 Sect OctLoc
   4     000   000000 000000   000000 000000   000000 000000   000000 000501    ................
   4     004   000000 000000   000000 000000   000000 006014   000000 006014    ................
   4     010   014145 164143   072156 145164   167157 162153   163040 040040    .etc:networks
   4     014   040040 040040   040040 040040   040040 040040   040040 040040
   4     020   072123 131123   040040 040040   040040 040040   040040 040040    :SYS
   4     024   040040 040040   040040 040040   115105 040040   040040 040040            ME
   4     030   040040 040040   000000 203015   000002 001000   000000 000000        ............
   4     034   000000 000000   000000 000000   000000 000001   000002 776003    ................
   4     040   001000 000000   000000 000002   000000 000000   000000 000000    ................
   4     044   000000 000111   040040 040040   000000 006014   000000 006014    ...I    ........
   4     050   000000 006014   000000 000000   000000 000000   000000 006014    ................
   4     054   000000 000000   000000 000000   000000 000000   000000 000000    ................
   4     060   000000 010000   000000 000000   000000 000000   000000 000000    ................
   4     064   000000 000020   000000 000000   000000 006014   000000 000000    ................
   4     070   000000 000000   000000 000000   000000 000000   000000 000000    ................
   4     074   000000 000000   000000 006014   000000 000000   000000 000000    ................
   4     100   000000 000000   000000 000000   000000 000000   000000 000000    ................
   4     104   ****** ******   ****** ******   000000 000000   ****** ******    ................
   4     110   000000 000000   000000 000000   000000 000000   000000 000000    ................
   4     124*  000000 000000   000000 000000   000000 000000   ****** ******    ................
   4     134*  ****** ******   ****** ******   ****** ******   000000 070707    ..............8.
   4     140   ****** ******   ****** ******                                    ........
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:145  

(unnamed)
 Sect OctLoc
   5     000   000000 000000   000000 000000   000000 000000   000000 000501    ................
   5     004   000000 000000   000000 000000   000000 006014   000000 006014    ................
   5     010   015145 164143   072160 162157   164157 143157   154163 040040    .etc:protocols
   5     014   040040 040040   040040 040040   040040 040040   040040 040040
   5     020   072123 131123   040040 040040   040040 040040   040040 040040    :SYS
   5     024   040040 040040   040040 040040   115105 040040   040040 040040            ME
   5     030   040040 040040   000000 203015   000002 001000   000000 000000        ............
   5     034   000000 000000   000000 000000   000000 000001   000002 776003    ................
   5     040   001000 000000   000000 000002   000000 000000   000000 000000    ................
   5     044   000000 000111   040040 040040   000000 006014   000000 006014    ...I    ........
   5     050   000000 006014   000000 000000   000000 000000   000000 006014    ................
   5     054   000000 000000   000000 000000   000000 000000   000000 000000    ................
   5     060   000000 010000   000000 000000   000000 000000   000000 000000    ................
   5     064   000000 000020   000000 000000   000000 006014   000000 000000    ................
   5     070   000000 000000   000000 000000   000000 000000   000000 000000    ................
   5     074   000000 000000   000000 006014   000000 000000   000000 000000    ................
   5     100   000000 000000   000000 000000   000000 000000   000000 000000    ................
   5     104   ****** ******   ****** ******   000000 000000   ****** ******    ................
   5     110   000000 000000   000000 000000   000000 000000   000000 000000    ................
   5     124*  000000 000000   000000 000000   000000 000000   ****** ******    ................
   5     134*  ****** ******   ****** ******   ****** ******   000000 070707    ..............8.
   5     140   ****** ******   ****** ******                                    ........

(unnamed)
 Sect OctLoc
   6     000   000000 000000   000000 000000   000000 000000   000000 000501    ................
   6     004   000000 000000   000000 000000   000000 006014   000000 006014    ................
   6     010   014145 164143   072163 145162   166151 143145   163040 040040    .etc:services
   6     014   040040 040040   040040 040040   040040 040040   040040 040040
   6     020   072123 131123   040040 040040   040040 040040   040040 040040    :SYS
   6     024   040040 040040   040040 040040   115105 040040   040040 040040            ME
   6     030   040040 040040   000000 203015   000002 001000   000000 000000        ............
   6     034   000000 000000   000000 000000   000000 000001   000002 776003    ................
   6     040   001000 000000   000000 000002   000000 000000   000000 000000    ................
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:146  
   6     044   000000 000111   040040 040040   000000 006014   000000 006014    ...I    ........
   6     050   000000 006014   000000 000000   000000 000000   000000 006014    ................
   6     054   000000 000000   000000 000000   000000 000000   000000 000000    ................
   6     060   000000 010000   000000 000000   000000 000000   000000 000000    ................
   6     064   000000 000020   000000 000000   000000 006014   000000 000000    ................
   6     070   000000 000000   000000 000000   000000 000000   000000 000000    ................
   6     074   000000 000000   000000 006014   000000 000000   000000 000000    ................
   6     100   000000 000000   000000 000000   000000 000000   000000 000000    ................
   6     104   ****** ******   ****** ******   000000 000000   ****** ******    ................
   6     110   000000 000000   000000 000000   000000 000000   000000 000000    ................
   6     124*  000000 000000   000000 000000   000000 000000   ****** ******    ................
   6     134*  ****** ******   ****** ******   ****** ******   000000 070707    ..............8.
   6     140   ****** ******   ****** ******                                    ........

(unnamed)
 Sect OctLoc
   8     000   000250 006000   000040 040040   000171 006000   000000 006003    .....   .y......
   8     004   000060 006000   000112 006000   000104 006000   000174 006000    .0...J...D...|..
   8     010   000173 006000   000173 006000   000130 006000                    .{...{...X..
     1525     8224    2           END;
     1526     8225
     1527     8226    1   END XSL$ETCFILES;

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:147  
--  Include file information  --

   CP_6_SUBS.:LIBRARY  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_NODES_E.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure XSL$ETCFILES.
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:148  

 **** Variables and constants ****

  ****  Section 001 RoData XSL$ETCFILES

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   244-0-0/w SBIN        r     1 DCBNUMS(0:3)
   215-0-0/c STRC(90)    r     1 ETC_HOSTS                  0-0-0/d STRC(2088)  r     1 FPT_OPEN
    72-0-0/d STRC(432)   r     1 FPT_WRITE                250-0-0/c CHAR(10)    r     1 LOCAL_HOST_NAME
   212-0-0/c STRC(90)    r     1 NAMESERCG                240-0-0/w PTR         r     1 ROOT$(0:3)
   120-0-0/d STRC(2088)  r     1 TEST_OPEN                116-0-0/c STRC(72)    r     1 VLP_ACCT
   106-0-0/w STRC(288)   r     1 VLP_STATION              220-0-0/w STRC(180)   r     1 XSL_HOSTENT
   225-0-0/w STRC(144)   r     1 XSL_NETENT               231-0-0/w STRC(108)   r     1 XSL_PROTOENT
   234-0-0/w STRC(144)   r     1 XSL_SERVENT

  ****  Section 002  Data  XSL$ETCFILES

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   120-0-0/w SBIN        r     1 ARS(0:3)                 130-0-0/w CHAR(132)   r     1 ETCBUFFER
     0-0-0/d STRC(1080)  r     1 FPT_CLOSE                 36-0-0/d STRC(144)   r     1 FPT_PFIL
    42-0-0/d STRC(504)   r     1 FPT_READ
    76-0-0/w UBIN        r     1 INETADDR(0:5)
   104-0-0/w PTR         r     1 INETPTR$(0:5)
   112-0-0/w PTR         r     1 NAMEPTR$(0:5)
   232-0-0/w SBIN        r     1 PARSEWORK(0:199)
    60-0-0/w STRC(504)   r     1 P_PCB                    171-0-0/w CHAR(132)   r     1 RESULTBUF
   171-0-0/w STRC(1188)  r     1 RQS                      130-0-0/w STRC(1188)  r     1 RSP
   124-0-0/w SBIN        r     1 STAYOPEN(0:3)
   171-0-0/w STRC(1188)  r     1 XSL$ANYENT               171-0-0/w STRC(1188)  r     1 XSL$HOSTENT
   171-0-0/w STRC(1188)  r     1 XSL$NETENT               171-0-0/w STRC(1188)  r     1 XSL$PROTOENT
   171-0-0/w STRC(1188)  r     1 XSL$SERVENT

  ****  Auto variables  ****

PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:149  
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @PARM1                     5-0-0/w PTR         r     1 @PARM2
     6-0-0/w PTR         r     1 @PARM3                     3-0-0/w PTR         r     1 @RESULT$
     7-0-0/w SBIN        r     1 ACTION                    10-0-0/w SBIN        r     1 ENTRYFLAG
    22-0-0/w SBIN        r     1 HTONLPARM1                70-0-0/w SBIN        r     1 H_ADDRLEN
    67-0-0/w SBIN        r     1 H_NAMELEN                 14-0-0/w SBIN        r     1 I
    15-0-0/w PTR         r     1 ITM$                      16-0-0/w SBIN        r     1 J
    11-0-0/w SBIN        r     1 LEN                      115-0-0/c CHAR(32)    r     1 NAMEUP
    71-0-0/w SBIN        r     1 N_NAMELEN                 17-0-0/w PTR         r     1 OUT$
    12-0-0/w SBIN        r     1 P1LEN                     13-0-0/w SBIN        r     1 P2LEN
    *0-0-0/w SBIN        r     1 PARM1                     23-0-0/w PTR         r     1 PARM1$
    75-0-0/c CHAR(32)    r     1 PARM1UP                   *0-0-0/w SBIN        r     1 PARM2
    24-0-0/w PTR         r     1 PARM2$                   105-0-0/c CHAR(32)    r     1 PARM2UP
    *0-0-0/w SBIN        r     1 PARM3                     25-0-0/w PTR         r     1 PARM3$
    26-0-0/w SBIN        r     1 PTR#                      27-0-0/w SBIN        r     1 PTRLEN(0:31)
    72-0-0/w SBIN        r     1 P_NAMELEN                 *0-0-0/w SBIN        r     1 RESULT
    *0-0-0/w PTR         r     1 RESULT$                   17-0-0/w PTR         r     1 SYM$
    73-0-0/w SBIN        r     1 S_NAMELEN                 74-0-0/w SBIN        r     1 S_PROTOLEN
    20-0-0/w PTR         r     1 TMP$                      21-0-0/b BIT         r     1 TRYSERVER

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$XL_UPPER$                0-0-0/w SBIN        r     1 R_HOSTS
     0-0-0/w SBIN        r     1 R_NETWORKS                 0-0-0/w SBIN        r     1 R_PROTOCOLS
     0-0-0/w SBIN        r     1 R_SERVICES                 0-0-0/w SBIN        r     1 XSL_ERRNO

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$PTR                      0-0-0/d ASTR(3528)  r     1 F$DCB
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:150  
     0-0-0/d ASTR(3528)  r     1 F$HOSTS                    0-0-0/d ASTR(3528)  r     1 F$NETWORKS
     0-0-0/d ASTR(3528)  r     1 F$PROTOCOLS                0-0-0/d ASTR(3528)  r     1 F$SERVICES
     0-0-0/w STRC(144)   r     1 ITM                        0-0-0/w STRC(144)   r     1 OUT
     0-0-0/w ASTR(153)   r     1 SYM                        0-0-0/c CHAR(32)    r     1 TMPCHARS
     0-0-0/c ACHR        r     1 TXT1N                      0-0-0/c ACHR        r     1 TXT2N
     0-0-0/w ASTR(9)     r     1 TXTC                       0-0-0/c ACHR        r     1 TXTN
     0-0-0/d STRC(4608)  r     1 UPCASE


   Procedure XSL$ETCFILES requires 1025 words for executable code.
   Procedure XSL$ETCFILES requires 92 words of local(AUTO) storage.

    No errors detected in file XSL$SOCKET4.:TCA2TSI    .
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:151  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:152  
          MINI XREF LISTING

ACTION
      7395**DCL      7693<<ASSIGN   7699<<ASSIGN   7705<<ASSIGN   7711<<ASSIGN   7724<<ASSIGN   7730<<ASSIGN
      7736<<ASSIGN   7742<<ASSIGN   7755<<ASSIGN   7761<<ASSIGN   7767<<ASSIGN   7773<<ASSIGN   7786<<ASSIGN
      7792<<ASSIGN   7798<<ASSIGN   7804<<ASSIGN   7817<<ASSIGN   7823<<ASSIGN   7829<<ASSIGN   7835<<ASSIGN
      7841<<ASSIGN   7854>>DOCASE   8180>>DOCASE   8195>>DOCASE
ADDRLOOP
      7922**LABEL    7923--CALLALT  7933--GOTO
ANOTHER
      7857**LABEL    7858--CALLALT
ARS
      7443**DCL      8013<<ASSIGN   8050>>ASSIGN
B$ALT.CODE
      1090**DCL      1090--REDEF    1091--REDEF    1091--REDEF
B$ALT.ERR.ERR#
      1092**DCL      1092--REDEF
B$ALT.EVID
      1091**DCL      1091--REDEF    1091--REDEF
B$PTR
      7418**DCL      7914>>CALLBLT  7927>>DOWHILE  7928>>IF
B$XL_UPPER$
       947**DCL       948--IMP-PTR  7873>>CALLBLT  7883>>CALLBLT  7893>>CALLBLT  7896>>CALLBLT  7899>>CALLBLT
      7903>>CALLBLT  7908>>CALLBLT  7914>>CALLBLT
CLOSEFILE
      8030**PROC     7863--CALL     7972--CALL     8182--CALL     8187--CALL
CLOSEFILE2 IN PROCEDURE CLOSEFILE
      8034**ENTRY    7997--CALL     8216--CALL
COMMON
      7847**LABEL    7694--GOTO     7700--GOTO     7706--GOTO     7712--GOTO     7725--GOTO     7731--GOTO
      7737--GOTO     7743--GOTO     7756--GOTO     7762--GOTO     7768--GOTO     7774--GOTO     7787--GOTO
      7793--GOTO     7799--GOTO     7805--GOTO     7818--GOTO     7824--GOTO     7830--GOTO     7836--GOTO
COMMON1
      7849**LABEL    7843--GOTO
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:153  
DCBNUMS
      7446**DCL      7968--IF       7979--IF       7995--IF       8008>>ASSIGN   8013--ASSIGN   8020>>ASSIGN
      8036--IF       8037>>ASSIGN
ENTRYFLAG
      7403**DCL      7692<<ASSIGN   7698<<ASSIGN   7704<<ASSIGN   7710<<ASSIGN   7723<<ASSIGN   7729<<ASSIGN
      7735<<ASSIGN   7741<<ASSIGN   7754<<ASSIGN   7760<<ASSIGN   7766<<ASSIGN   7772<<ASSIGN   7785<<ASSIGN
      7791<<ASSIGN   7797<<ASSIGN   7803<<ASSIGN   7816<<ASSIGN   7822<<ASSIGN   7828<<ASSIGN   7834<<ASSIGN
      7840<<ASSIGN   7851>>IF       7861>>ASSIGN   7864>>ASSIGN   7890>>DOCASE   7968>>IF       7971>>IF
      7979>>IF       7995>>IF       8008>>ASSIGN   8013>>ASSIGN   8013>>ASSIGN   8020>>ASSIGN   8032>>ASSIGN
      8036>>IF       8037>>ASSIGN   8049>>ASSIGN   8050>>ASSIGN   8184>>ASSIGN   8215>>IF
ETCBUFFER
      7453**DCL      1520--DCLINIT  1521--DCLINIT  4666--DCLINIT  7454--REDEF    8189--ASSIGN   8194--ASSIGN
      8222--ASSIGN
ETC_HOSTS
      1442**DCL      1347--DCLINIT
F$DCB.ACTPOS
      1064**DCL      1064--REDEF
F$DCB.ARS#
      1038**DCL      1038--REDEF    8013>>ASSIGN
F$DCB.ASN#
      1053**DCL      7995>>IF
F$DCB.ATTR
      1057**DCL      1058--REDEF
F$DCB.BORROW
      1072**DCL      1072--REDEF    1072--REDEF    1072--REDEF
F$DCB.DCBNAME.L
      1086**DCL      1086--IMP-SIZ
F$DCB.EOMCHAR#
      1042**DCL      1042--REDEF
F$DCB.FCD#
      1051**DCL      7979>>IF       8036>>IF
F$DCB.FLDID
      1067**DCL      1067--REDEF
F$DCB.FORM$
      1061**DCL      1061--REDEF
F$DCB.FSECT
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:154  
      1077**DCL      1077--REDEF
F$DCB.FSN#
      1054**DCL      1054--REDEF    1054--REDEF    1055--REDEF
F$DCB.HEADER$
      1060**DCL      1060--REDEF
F$DCB.IXTNSIZE#
      1058**DCL      1058--REDEF
F$DCB.LASTSTA$
      1047**DCL      1047--REDEF
F$DCB.LVL
      1073**DCL      1073--REDEF
F$DCB.NAME#.C
      1048**DCL      1048--REDEF
F$DCB.NOEOF
      1070**DCL      1070--REDEF
F$DCB.NRECS#
      1059**DCL      1059--REDEF
F$DCB.NRECX
      1078**DCL      1078--REDEF
F$DCB.OHDR
      1070**DCL      1070--REDEF
F$DCB.ORG#
      1053**DCL      1053--REDEF
F$DCB.PRECNO
      1076**DCL      1076--REDEF
F$DCB.RCSZ
      1082**DCL      1082--REDEF
F$DCB.RES#
      1049**DCL      1049--REDEF
F$DCB.SETX
      1061**DCL      1061--REDEF
F$DCB.TAB$
      1061**DCL      1061--REDEF
F$DCB.TDA
      1075**DCL      1076--REDEF
F$DCB.TYC.EOF#
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:155  
      1039**DCL      7968>>IF
F$DCB.WSN#
      1049**DCL      1049--REDEF
F$HOSTS.ACTPOS
      7136**DCL      7136--REDEF
F$HOSTS.ARS#
      7095**DCL      7095--REDEF
F$HOSTS.ATTR#
      7125**DCL      7125--REDEF    7127--REDEF
F$HOSTS.BORROW
      7147**DCL      7147--REDEF    7147--REDEF    7147--REDEF
F$HOSTS.DCBNAME.L
      7166**DCL      7166--IMP-SIZ
F$HOSTS.EOMCHAR#
      7102**DCL      7103--REDEF
F$HOSTS.FLDID
      7139**DCL      7140--REDEF
F$HOSTS.FORM$
      7131**DCL      7131--REDEF
F$HOSTS.FSECT
      7154**DCL      7154--REDEF
F$HOSTS.FSN#
      7121**DCL      7121--REDEF    7121--REDEF    7122--REDEF
F$HOSTS.HEADER$
      7130**DCL      7131--REDEF
F$HOSTS.IXTNSIZE#
      7127**DCL      7128--REDEF
F$HOSTS.LASTSTA$
      7111**DCL      7111--REDEF
F$HOSTS.LVL
      7148**DCL      7148--REDEF
F$HOSTS.NAME#.C
      7111**DCL      7112--REDEF
F$HOSTS.NOEOF
      7143**DCL      7143--REDEF
F$HOSTS.NRECS#
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:156  
      7128**DCL      7128--REDEF
F$HOSTS.NRECX
      7155**DCL      7155--REDEF
F$HOSTS.OHDR
      7144**DCL      7144--REDEF
F$HOSTS.ORG#
      7119**DCL      7120--REDEF
F$HOSTS.PRECNO
      7152**DCL      7152--REDEF
F$HOSTS.RCSZ
      7160**DCL      7160--REDEF
F$HOSTS.RES#
      7113**DCL      7113--REDEF
F$HOSTS.SETX
      7132**DCL      7132--REDEF
F$HOSTS.TAB$
      7131**DCL      7131--REDEF
F$HOSTS.TDA
      7151**DCL      7152--REDEF
F$HOSTS.WSN#
      7113**DCL      7114--REDEF
F$NETWORKS.ACTPOS
      7211**DCL      7211--REDEF
F$NETWORKS.ARS#
      7170**DCL      7170--REDEF
F$NETWORKS.ATTR#
      7200**DCL      7200--REDEF    7202--REDEF
F$NETWORKS.BORROW
      7222**DCL      7222--REDEF    7222--REDEF    7222--REDEF
F$NETWORKS.DCBNAME.L
      7241**DCL      7241--IMP-SIZ
F$NETWORKS.EOMCHAR#
      7177**DCL      7178--REDEF
F$NETWORKS.FLDID
      7214**DCL      7215--REDEF
F$NETWORKS.FORM$
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:157  
      7206**DCL      7206--REDEF
F$NETWORKS.FSECT
      7229**DCL      7229--REDEF
F$NETWORKS.FSN#
      7196**DCL      7196--REDEF    7196--REDEF    7197--REDEF
F$NETWORKS.HEADER$
      7205**DCL      7206--REDEF
F$NETWORKS.IXTNSIZE#
      7202**DCL      7203--REDEF
F$NETWORKS.LASTSTA$
      7186**DCL      7186--REDEF
F$NETWORKS.LVL
      7223**DCL      7223--REDEF
F$NETWORKS.NAME#.C
      7186**DCL      7187--REDEF
F$NETWORKS.NOEOF
      7218**DCL      7218--REDEF
F$NETWORKS.NRECS#
      7203**DCL      7203--REDEF
F$NETWORKS.NRECX
      7230**DCL      7230--REDEF
F$NETWORKS.OHDR
      7219**DCL      7219--REDEF
F$NETWORKS.ORG#
      7194**DCL      7195--REDEF
F$NETWORKS.PRECNO
      7227**DCL      7227--REDEF
F$NETWORKS.RCSZ
      7235**DCL      7235--REDEF
F$NETWORKS.RES#
      7188**DCL      7188--REDEF
F$NETWORKS.SETX
      7207**DCL      7207--REDEF
F$NETWORKS.TAB$
      7206**DCL      7206--REDEF
F$NETWORKS.TDA
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:158  
      7226**DCL      7227--REDEF
F$NETWORKS.WSN#
      7188**DCL      7189--REDEF
F$PROTOCOLS.ACTPOS
      7286**DCL      7286--REDEF
F$PROTOCOLS.ARS#
      7245**DCL      7245--REDEF
F$PROTOCOLS.ATTR#
      7275**DCL      7275--REDEF    7277--REDEF
F$PROTOCOLS.BORROW
      7297**DCL      7297--REDEF    7297--REDEF    7297--REDEF
F$PROTOCOLS.DCBNAME.L
      7316**DCL      7316--IMP-SIZ
F$PROTOCOLS.EOMCHAR#
      7252**DCL      7253--REDEF
F$PROTOCOLS.FLDID
      7289**DCL      7290--REDEF
F$PROTOCOLS.FORM$
      7281**DCL      7281--REDEF
F$PROTOCOLS.FSECT
      7304**DCL      7304--REDEF
F$PROTOCOLS.FSN#
      7271**DCL      7271--REDEF    7271--REDEF    7272--REDEF
F$PROTOCOLS.HEADER$
      7280**DCL      7281--REDEF
F$PROTOCOLS.IXTNSIZE#
      7277**DCL      7278--REDEF
F$PROTOCOLS.LASTSTA$
      7261**DCL      7261--REDEF
F$PROTOCOLS.LVL
      7298**DCL      7298--REDEF
F$PROTOCOLS.NAME#.C
      7261**DCL      7262--REDEF
F$PROTOCOLS.NOEOF
      7293**DCL      7293--REDEF
F$PROTOCOLS.NRECS#
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:159  
      7278**DCL      7278--REDEF
F$PROTOCOLS.NRECX
      7305**DCL      7305--REDEF
F$PROTOCOLS.OHDR
      7294**DCL      7294--REDEF
F$PROTOCOLS.ORG#
      7269**DCL      7270--REDEF
F$PROTOCOLS.PRECNO
      7302**DCL      7302--REDEF
F$PROTOCOLS.RCSZ
      7310**DCL      7310--REDEF
F$PROTOCOLS.RES#
      7263**DCL      7263--REDEF
F$PROTOCOLS.SETX
      7282**DCL      7282--REDEF
F$PROTOCOLS.TAB$
      7281**DCL      7281--REDEF
F$PROTOCOLS.TDA
      7301**DCL      7302--REDEF
F$PROTOCOLS.WSN#
      7263**DCL      7264--REDEF
F$SERVICES.ACTPOS
      7361**DCL      7361--REDEF
F$SERVICES.ARS#
      7320**DCL      7320--REDEF
F$SERVICES.ATTR#
      7350**DCL      7350--REDEF    7352--REDEF
F$SERVICES.BORROW
      7372**DCL      7372--REDEF    7372--REDEF    7372--REDEF
F$SERVICES.DCBNAME.L
      7391**DCL      7391--IMP-SIZ
F$SERVICES.EOMCHAR#
      7327**DCL      7328--REDEF
F$SERVICES.FLDID
      7364**DCL      7365--REDEF
F$SERVICES.FORM$
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:160  
      7356**DCL      7356--REDEF
F$SERVICES.FSECT
      7379**DCL      7379--REDEF
F$SERVICES.FSN#
      7346**DCL      7346--REDEF    7346--REDEF    7347--REDEF
F$SERVICES.HEADER$
      7355**DCL      7356--REDEF
F$SERVICES.IXTNSIZE#
      7352**DCL      7353--REDEF
F$SERVICES.LASTSTA$
      7336**DCL      7336--REDEF
F$SERVICES.LVL
      7373**DCL      7373--REDEF
F$SERVICES.NAME#.C
      7336**DCL      7337--REDEF
F$SERVICES.NOEOF
      7368**DCL      7368--REDEF
F$SERVICES.NRECS#
      7353**DCL      7353--REDEF
F$SERVICES.NRECX
      7380**DCL      7380--REDEF
F$SERVICES.OHDR
      7369**DCL      7369--REDEF
F$SERVICES.ORG#
      7344**DCL      7345--REDEF
F$SERVICES.PRECNO
      7377**DCL      7377--REDEF
F$SERVICES.RCSZ
      7385**DCL      7385--REDEF
F$SERVICES.RES#
      7338**DCL      7338--REDEF
F$SERVICES.SETX
      7357**DCL      7357--REDEF
F$SERVICES.TAB$
      7356**DCL      7356--REDEF
F$SERVICES.TDA
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:161  
      7376**DCL      7377--REDEF
F$SERVICES.WSN#
      7338**DCL      7339--REDEF
FPT_CLOSE
      1467**DCL      8038<>CALL
FPT_CLOSE.SN_
      1467**DCL      1467--REDEF
FPT_CLOSE.UTL_
      1468**DCL      1468--REDEF
FPT_CLOSE.V
      1472**DCL      1467--DCLINIT
FPT_CLOSE.V.DCB#
      1473**DCL      8037<<ASSIGN
FPT_CLOSE.V.EXPIRE#
      1482**DCL      1482--REDEF
FPT_CLOSE.V.TYPE#
      1480**DCL      1480--REDEF
FPT_CLOSE.V.XTNSIZE#
      1477**DCL      1477--REDEF    1479--REDEF
FPT_OPEN
      1165**DCL      7980<>CALL
FPT_OPEN.ACSVEH_
      1167**DCL      1168--REDEF
FPT_OPEN.ALTKEYS_
      1173**DCL      1174--REDEF    1174--REDEF
FPT_OPEN.HDR_
      1172**DCL      1173--REDEF
FPT_OPEN.TAB_
      1171**DCL      1172--REDEF
FPT_OPEN.UHL_
      1165**DCL      1166--REDEF    1166--REDEF
FPT_OPEN.V
      1174**DCL      1165--DCLINIT
FPT_OPEN.V.FSN#
      1205**DCL      1205--REDEF    1205--REDEF
FPT_OPEN.WSN_
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:162  
      1171**DCL      1171--REDEF
FPT_PFIL
      1497**DCL      8021<>CALL
FPT_PFIL.V
      1497**DCL      1497--DCLINIT
FPT_PFIL.V.DCB#
      1497**DCL      8020<<ASSIGN
FPT_READ
      1518**DCL      8009<>CALL
FPT_READ.STATION_
      1521**DCL      1522--REDEF
FPT_READ.V
      1522**DCL      1518--DCLINIT
FPT_READ.V.DCB#
      1522**DCL      8008<<ASSIGN
FPT_READ.V.DVBYTE.REREAD#
      1533**DCL      1533--REDEF
FPT_READ.V.INDX#
      1531**DCL      1531--REDEF
FPT_WRITE
      1226**DCL      7992<>CALL
FPT_WRITE.STATION_
      1228**DCL      1228--REDEF
FPT_WRITE.V
      1229**DCL      1226--DCLINIT
FPT_WRITE.V.DVBYTE.VFC#
      1235**DCL      1235--REDEF
H1
      7692**LABEL    7686--GOTO
H2
      7723**LABEL    7717--GOTO
H3
      7754**LABEL    7748--GOTO
H4
      7785**LABEL    7779--GOTO
H5
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:163  
      7816**LABEL    7810--GOTO
HTONLPARM1
      7427**DCL      7940<>CALL     7941>>IF
H_ADDRLEN
      7438**DCL      7924>>ASSIGN   8077<<ASSIGN
H_NAMELEN
      7437**DCL      7892>>ASSIGN   7957>>ASSIGN   8087<<ASSIGN
I
      7414**DCL      7912<<DOINDEX  7913>>ASSIGN   7914>>CALLBLT  8066<<DOINDEX  8067>>ASSIGN   8099<<DOINDEX
      8100>>ASSIGN   8120<<DOINDEX  8121>>ASSIGN   8140<<DOINDEX  8141>>ASSIGN
INETADDR
      7415**DCL      8075<>CALL     8081--ASSIGN
INETPTR$
      7416**DCL      8079--ASSIGN   8081<<ASSIGN   8085<<ASSIGN
ITM.CODE
      4860**DCL      8060>>DOCASE
ITM.NSUBLKS
      4864**DCL      8057>>IF       8066>>DOINDEX  8099>>DOINDEX  8120>>DOINDEX  8140>>DOINDEX
ITM.SUBLK$
      4885**DCL      8059>>ASSIGN   8067>>ASSIGN   8100>>ASSIGN   8121>>ASSIGN   8141>>ASSIGN
ITM$
      7419**DCL      4852--IMP-PTR  8059<<ASSIGN   8060>>DOCASE   8066>>DOINDEX  8067>>ASSIGN   8099>>DOINDEX
      8100>>ASSIGN   8120>>DOINDEX  8121>>ASSIGN   8140>>DOINDEX  8141>>ASSIGN
J
      7420**DCL      8068<<ASSIGN   8070>>ASSIGN   8075>>CALL     8076>>IF       8081>>ASSIGN   8081>>ASSIGN
      8082<<ASSIGN   8082>>ASSIGN   8083>>IF       8083>>IF       8085>>ASSIGN
LEN
      7408**DCL      7409--IMP-SIZ  7866>>IF       7867>>ASSIGN   7877>>IF       7878>>ASSIGN   7892<<ASSIGN
      7893>>CALLBLT  7895<<ASSIGN   7896>>CALLBLT  7898<<ASSIGN   7899>>CALLBLT  7902<<ASSIGN   7903>>CALLBLT
      7904>>IF       7907<<ASSIGN   7908>>CALLBLT  7910>>IF       7913<<ASSIGN   7914>>CALLBLT  7915>>IF
      7924<<ASSIGN   7925>>IF       7928>>IF       7928>>IF       7939<<ASSIGN   7942>>IF       7942>>IF
      7957<<ASSIGN   7958>>ASSIGN   7958>>ASSIGN   8087>>ASSIGN   8092>>ASSIGN   8105>>ASSIGN   8109>>CALL
      8113>>ASSIGN   8126>>ASSIGN   8129>>CALLBLT  8133>>ASSIGN   8146>>ASSIGN   8149>>CALLBLT  8152>>ASSIGN
      8157>>ASSIGN   8172<<ASSIGN   8173>>CALLBLT  8174>>CALLBLT  8198>>IF       8199>>ASSIGN   8205>>ASSIGN
      8209>>ASSIGN
LOCAL_HOST_NAME
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:164  
      7449**DCL      7842--ASSIGN   7872--IF       7956--IF       7967--IF
M$CLOSE
       959**DCL-ENT  8038--CALL
M$OPEN
       959**DCL-ENT  7980--CALL     7982--CALL     7998--CALL
M$PFIL
       961**DCL-ENT  8021--CALL
M$READ
       960**DCL-ENT  8009--CALL
M$WRITE
       960**DCL-ENT  7992--CALL
MULTIHOMED IN PROCEDURE PARSERECORD
      8070**LABEL    8084--GOTO
NAMELOOP
      7888**LABEL    7889--CALLALT  7905--GOTO     7918--GOTO
NAMEPTR$
      7417**DCL      8065--ASSIGN   8090<<ASSIGN   8091--ASSIGN   8098--ASSIGN   8111<<ASSIGN   8112--ASSIGN
      8119--ASSIGN   8131<<ASSIGN   8132--ASSIGN   8139--ASSIGN   8155<<ASSIGN   8156--ASSIGN   8164<<ASSIGN
      8165--ASSIGN
NAMESERCG
      1415**DCL      1166--DCLINIT
NAMEUP
      7681**DCL      7893<<CALLBLT  7896<<CALLBLT  7899<<CALLBLT  7903<<CALLBLT  7904--IF       7908<<CALLBLT
      7910--IF       7914<<CALLBLT  7915--IF
NUMBERLOOP
      7949**LABEL    7950--CALLALT  7953--GOTO
N_NAMELEN
      7439**DCL      7895>>ASSIGN   8105<<ASSIGN
OPENFILE
      7977**PROC     8183--CALL     8192--CALL
OUT.CODE
      4905**DCL      8072>>DOCASE   8103>>DOCASE   8124>>DOCASE   8144>>DOCASE
OUT.NSUBLKS
      4909**DCL      8083>>IF
OUT.SUBLK$
      4930**DCL      8070>>ASSIGN   8101>>ASSIGN   8122>>ASSIGN   8142>>ASSIGN
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:165  
OUT$
      7421**DCL      4897--IMP-PTR  7422--REDEF    8067<<ASSIGN   8070>>ASSIGN   8072>>DOCASE   8083>>IF
      8100<<ASSIGN   8101>>ASSIGN   8103>>DOCASE   8121<<ASSIGN   8122>>ASSIGN   8124>>DOCASE   8141<<ASSIGN
      8142>>ASSIGN   8144>>DOCASE
P1LEN
      7410**DCL      7411--IMP-SIZ  7867<<ASSIGN   7871<<CALLBLT  7873>>CALLBLT  7910>>IF       7915>>IF
      8199<<ASSIGN   8203<<CALLBLT  8204>>ASSIGN   8205>>ASSIGN
P2LEN
      7412**DCL      7413--IMP-SIZ  7878<<ASSIGN   7882<<CALLBLT  7883>>CALLBLT  7904>>IF
PARM1
      7426**DCL       837--PROC     7683--ENTRY    7688--ENTRY    7696--ENTRY    7702--ENTRY    7708--ENTRY
      7714--ENTRY    7719--ENTRY    7727--ENTRY    7733--ENTRY    7739--ENTRY    7745--ENTRY    7750--ENTRY
      7758--ENTRY    7764--ENTRY    7770--ENTRY    7838--ENTRY    7847--ASSIGN   7861>>ASSIGN   7940<>CALL
      7951>>IF       7958--ASSIGN   8184>>ASSIGN
PARM1$
      7428**DCL      7842<<ASSIGN   7847<<ASSIGN   7866>>IF       7867>>ASSIGN   7868<<ASSIGN   7868>>ASSIGN
      7871>>CALLBLT  7872>>IF       7873>>CALLBLT  7874<<ASSIGN   7910>>IF       7915>>IF       7928>>IF
      7956>>IF       7967>>IF       8198>>IF       8199>>ASSIGN   8200<<ASSIGN   8200>>ASSIGN   8203>>CALLBLT
      8205>>ASSIGN   8209>>ASSIGN
PARM1UP
      7679**DCL      7873<<CALLBLT  7874--ASSIGN
PARM2
      7429**DCL       837--PROC     7683--ENTRY    7688--ENTRY    7696--ENTRY    7702--ENTRY    7708--ENTRY
      7838--ENTRY    7849--ASSIGN   7925>>IF       7957>>ASSIGN   8208>>ASSIGN   8209>>ASSIGN
PARM2$
      7430**DCL      7849<<ASSIGN   7876>>IF       7877>>IF       7878>>ASSIGN   7879<<ASSIGN   7879>>ASSIGN
      7882>>CALLBLT  7883>>CALLBLT  7884<<ASSIGN   7901>>IF       7904>>IF       7942>>IF       7942>>IF
PARM2UP
      7680**DCL      7883<<CALLBLT  7884--ASSIGN
PARM3
      7431**DCL       837--PROC     7683--ENTRY    7688--ENTRY    7850--ASSIGN
PARM3$
      7432**DCL      7850<<ASSIGN
PARSERECORD
      8047**PROC     7858--CALL     7889--CALL     7923--CALL     7938--CALL     7950--CALL
PARSEWORK
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:166  
      7678**DCL      4674--DCLINIT  4695--DCLINIT
PORTLOOP
      7937**LABEL    7938--CALLALT  7945--GOTO
PTR#
      7433**DCL      7912>>DOINDEX  8056<<ASSIGN   8090>>ASSIGN   8091>>ASSIGN   8091>>ASSIGN   8092>>ASSIGN
      8093<<ASSIGN   8093>>ASSIGN   8111>>ASSIGN   8112>>ASSIGN   8112>>ASSIGN   8113>>ASSIGN   8114<<ASSIGN
      8114>>ASSIGN   8131>>ASSIGN   8132>>ASSIGN   8132>>ASSIGN   8133>>ASSIGN   8134<<ASSIGN   8134>>ASSIGN
      8155>>ASSIGN   8156>>ASSIGN   8156>>ASSIGN   8157>>ASSIGN   8158<<ASSIGN   8158>>ASSIGN   8164>>ASSIGN
      8165>>ASSIGN   8165>>ASSIGN
PTRLEN
      7434**DCL      7913>>ASSIGN   8092<<ASSIGN   8113<<ASSIGN   8133<<ASSIGN   8157<<ASSIGN
P_NAMELEN
      7440**DCL      7898>>ASSIGN   8126<<ASSIGN
P_PCB
      4665**DCL      8051<>CALL
P_PCB.NCHARS
      4812**DCL      8050<<ASSIGN
P_PCB.OUT$
      4678**DCL      8057>>IF       8059>>ASSIGN
P_PCB.ROOT$
      4670**DCL      8049<<ASSIGN
READFILE
      8006**PROC     7857--CALL     7888--CALL     7922--CALL     7937--CALL     7949--CALL     8214--CALL
RESULT
      7436**DCL      7959<<ASSIGN   7967<<ASSIGN   7973>>IF
RESULT$
      7435**DCL       837--PROC     7436--REDEF    7683--ENTRY    7688--ENTRY    7696--ENTRY    7702--ENTRY
      7708--ENTRY    7714--ENTRY    7719--ENTRY    7727--ENTRY    7733--ENTRY    7739--ENTRY    7745--ENTRY
      7750--ENTRY    7758--ENTRY    7764--ENTRY    7770--ENTRY    7776--ENTRY    7781--ENTRY    7789--ENTRY
      7795--ENTRY    7801--ENTRY    7807--ENTRY    7812--ENTRY    7820--ENTRY    7826--ENTRY    7832--ENTRY
      7838--ENTRY    7962<<ASSIGN   7965<<ASSIGN   7973>>IF       8189<<ASSIGN   8218<<ASSIGN   8222<<ASSIGN
RESULTBUF
      7459**DCL      7460--REDEF    7484--REDEF    7545--REDEF    7597--REDEF    7641--REDEF    7676--REDEF
      7962--ASSIGN
RETURN_NIL
      7965**LABEL    7857--CALLALT  7860--CALLALT  7863--CALLALT  7886--CALLALT  7888--CALLALT  7920--CALLALT
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:167  
      7922--CALLALT  7935--CALLALT  7937--CALLALT  7947--CALLALT  7949--CALLALT  8182--CALLALT  8187--CALLALT
REWINDFILE
      8018**PROC     7860--CALL     7886--CALL     7920--CALL     7935--CALL     7947--CALL
ROOT$
      7444**DCL      8049>>ASSIGN
RQS.BUF
      7461**DCL      1227--DCLINIT  1228--DCLINIT  8193<<ASSIGN
RQS.BUF.DATA
      7465**DCL      8205<<ASSIGN   8209<<ASSIGN
RQS.BUF.LEN
      7463**DCL      8204<<ASSIGN   8208<<ASSIGN
RQS.BUF.RELOC$
      7464**DCL      8194<<ASSIGN
RQS.BUF.TYPE
      7462**DCL      8197<<ASSIGN   8207<<ASSIGN   8211<<ASSIGN
RSP.BUF.ERRNO
      7457**DCL      8219>>ASSIGN
RSP.BUF.RESULT
      7456**DCL      8217>>IF
R_HOSTS
      7088**DCL      7445--DCLINIT
R_NETWORKS
      7089**DCL      7445--DCLINIT
R_PROTOCOLS
      7090**DCL      7445--DCLINIT
R_SERVICES
      7091**DCL      7445--DCLINIT
STAYOPEN
      7448**DCL      7861<<ASSIGN   7864<<ASSIGN   7971>>IF       8032<<ASSIGN   8184<<ASSIGN   8215>>IF
SUCCESS
      8189**LABEL    8185--GOTO
SYM.COUNT
      4966**DCL      4969--IMP-SIZ  8070--ASSIGN   8101--ASSIGN   8122--ASSIGN   8142--ASSIGN
SYM$
      7422**DCL      4943--IMP-PTR
S_NAMELEN
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:168  
      7441**DCL      7907>>ASSIGN   8146<<ASSIGN
S_PROTOLEN
      7442**DCL      7902>>ASSIGN   7939>>ASSIGN   8152<<ASSIGN
TEST_OPEN
      1346**DCL      7982<>CALL     7998<>CALL
TEST_OPEN.ACSVEH_
      1348**DCL      1349--REDEF
TEST_OPEN.ALTKEYS_
      1354**DCL      1355--REDEF    1355--REDEF
TEST_OPEN.HDR_
      1353**DCL      1354--REDEF
TEST_OPEN.TAB_
      1352**DCL      1353--REDEF
TEST_OPEN.UHL_
      1346**DCL      1347--REDEF    1347--REDEF
TEST_OPEN.V
      1355**DCL      1346--DCLINIT
TEST_OPEN.V.FSN#
      1386**DCL      1386--REDEF    1386--REDEF
TEST_OPEN.WSN_
      1352**DCL      1352--REDEF
THIS_COMMAND
      7854**LABEL    7911--EXIT     7916--EXIT     7929--EXIT     7944--EXIT     7952--EXIT     8183--CALLALT
      8192--CALLALT  8213--CALLALT  8214--CALLALT
TMP$
      7423**DCL      7424--IMP-PTR  7926<<ASSIGN   7927>>DOWHILE  7928>>IF       7930<<ASSIGN   7930>>ASSIGN
      8070<<ASSIGN   8075>>CALL     8088>>ASSIGN   8090>>ASSIGN   8101<<ASSIGN   8106>>ASSIGN   8109>>CALL
      8111>>ASSIGN   8122<<ASSIGN   8127>>ASSIGN   8129>>CALLBLT  8131>>ASSIGN   8142<<ASSIGN   8147>>ASSIGN
      8149>>CALLBLT  8153>>ASSIGN   8155>>ASSIGN   8172>>ASSIGN   8173>>CALLBLT  8173>>CALLBLT  8173>>CALLBLT
      8174>>CALLBLT
TMPCHARS
      7424**DCL      7871>>CALLBLT  7882>>CALLBLT  8075<>CALL     8173<<CALLBLT  8174<<CALLBLT  8203>>CALLBLT
TRYSERVER
      7425**DCL      7685<<ASSIGN   7690<<ASSIGN   7716<<ASSIGN   7721<<ASSIGN   7747<<ASSIGN   7752<<ASSIGN
      7778<<ASSIGN   7783<<ASSIGN   7809<<ASSIGN   7814<<ASSIGN   7851>>IF
TRY_SERVER
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:169  
      8180**LABEL    7852--GOTO
TXT1N
      7411**DCL      7873>>CALLBLT  7910>>IF       7915>>IF
TXT2N
      7413**DCL      7883>>CALLBLT  7904>>IF
TXTC.LEN
      7451**DCL      7452--IMP-SIZ  8172>>ASSIGN   8173>>CALLBLT
TXTC.TXT
      7452**DCL      8173>>CALLBLT
TXTN
      7409**DCL      7866>>IF       7867>>ASSIGN   7877>>IF       7878>>ASSIGN   7893>>CALLBLT  7896>>CALLBLT
      7899>>CALLBLT  7903>>CALLBLT  7904>>IF       7908>>CALLBLT  7910>>IF       7914>>CALLBLT  7915>>IF
      7928>>IF       7928>>IF       7942>>IF       7942>>IF       7958<<ASSIGN   7958>>ASSIGN   8109<>CALL
      8129>>CALLBLT  8149>>CALLBLT  8198>>IF       8199>>ASSIGN   8205>>ASSIGN   8209>>ASSIGN
UNTEXTC
      8170**PROC     8071--CALL     8102--CALL     8123--CALL     8143--CALL
UPCASE
       948**DCL      7873>>CALLBLT  7883>>CALLBLT  7893>>CALLBLT  7896>>CALLBLT  7899>>CALLBLT  7903>>CALLBLT
      7908>>CALLBLT  7914>>CALLBLT
VLP_ACCT
      1278**DCL      1170--DCLINIT
VLP_STATION
      1252**DCL      1228--DCLINIT
VLP_STATION.MSGIDXT
      1262**DCL      1265--REDEF
WRITEFILE
      7990**PROC     8213--CALL
X$PARSE
      7085**DCL-ENT  8051--CALL
XSL$ANYENT.PTR$
      7677**DCL      7914>>CALLBLT  8165<<ASSIGN
XSL$HOSTENT
      7484**DCL      8064<<ASSIGN
XSL$HOSTENT.H_ADDRTYPE
      7511**DCL      8074<<ASSIGN
XSL$HOSTENT.H_ADDR_LIST$
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:170  
      7525**DCL      7926>>ASSIGN   8079<<ASSIGN
XSL$HOSTENT.H_ALIASES$
      7503**DCL      8065<<ASSIGN
XSL$HOSTENT.H_LENGTH
      7517**DCL      8078<<ASSIGN
XSL$HOSTENT.H_NAME$
      7495**DCL      7893>>CALLBLT  7958>>ASSIGN   8088<<ASSIGN
XSL$HOSTENT.PTR$
      7527**DCL      8091<<ASSIGN
XSL$HTONL
      7084**DCL-ENT  7940--CALL     8150--CALL
XSL$INET_ADDR
      7082**DCL-ENT  8075--CALL
XSL$INET_NETWORK
      7083**DCL-ENT  8109--CALL
XSL$NETENT
      7545**DCL      8097<<ASSIGN
XSL$NETENT.N_ADDRTYPE
      7572**DCL      8108<<ASSIGN
XSL$NETENT.N_ALIASES$
      7564**DCL      8098<<ASSIGN
XSL$NETENT.N_NAME$
      7556**DCL      7896>>CALLBLT  8106<<ASSIGN
XSL$NETENT.N_NET
      7577**DCL      8109<>CALL
XSL$NETENT.PTR$
      7579**DCL      8112<<ASSIGN
XSL$PROTOENT
      7597**DCL      8118<<ASSIGN
XSL$PROTOENT.PTR$
      7623**DCL      8132<<ASSIGN
XSL$PROTOENT.P_ALIASES$
      7616**DCL      8119<<ASSIGN
XSL$PROTOENT.P_NAME$
      7608**DCL      7899>>CALLBLT  8127<<ASSIGN
XSL$PROTOENT.P_PROTO
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:171  
      7621**DCL      7951>>IF       8129<<CALLBLT
XSL$SERVENT
      7641**DCL      8138<<ASSIGN
XSL$SERVENT.PTR$
      7675**DCL      8156<<ASSIGN
XSL$SERVENT.S_ALIASES$
      7660**DCL      8139<<ASSIGN
XSL$SERVENT.S_NAME$
      7652**DCL      7908>>CALLBLT  8147<<ASSIGN
XSL$SERVENT.S_PORT
      7666**DCL      7941>>IF       8149<<CALLBLT  8150<>CALL     8150<>CALL
XSL$SERVENT.S_PROTO$
      7673**DCL      7903>>CALLBLT  7942>>IF       8153<<ASSIGN
XSL_ERRNO
      5029**DCL      7966<<ASSIGN   7969<<ASSIGN   8219<<ASSIGN
XSL_HOSTENT
      6066**DCL      8064>>ASSIGN
XSL_NETENT
      6126**DCL      8097>>ASSIGN
XSL_PROTOENT
      6177**DCL      8118>>ASSIGN
XSL_SERVENT
      6220**DCL      8138>>ASSIGN
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:172  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:173  
              MINI UREF LISTING

B$TCB    1097**DCL
B$TCB$    7087**DCL
BAILOUT IN PROCEDURE PARSERECORD   8054**LABEL
B_POINTER     888**DCL-ENT
M$ACCT     976**DCL-ENT
M$ACTIVATE     979**DCL-ENT
M$ALIB     972**DCL-ENT
M$ASUSER     974**DCL-ENT
M$ATTACH     981**DCL-ENT
M$BADPP     999**DCL-ENT
M$CGCTL     980**DCL-ENT
M$CGINFO     980**DCL-ENT
M$CHECK     961**DCL-ENT
M$CHGUNIT    1019**DCL-ENT
M$CLRSTK    1017**DCL-ENT
M$CMDVAR    1028**DCL-ENT
M$CONFIG     989**DCL-ENT
M$CORRES     964**DCL-ENT
M$CPEXIT     973**DCL-ENT
M$CVM     997**DCL-ENT
M$CVOL     962**DCL-ENT
M$DCLFLD     989**DCL-ENT
M$DEACTIVATE     979**DCL-ENT
M$DELREC     961**DCL-ENT
M$DEQ    1026**DCL-ENT
M$DETACH     981**DCL-ENT
M$DEVICE     963**DCL-ENT
M$DISPLAY    1026**DCL-ENT
M$DISPRES     966**DCL-ENT
M$DLIB     972**DCL-ENT
M$DRIBBLE     989**DCL-ENT
M$DRTN    1017**DCL-ENT
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:174  
M$DSUSER     974**DCL-ENT
M$ENQ    1025**DCL-ENT
M$EOM     984**DCL-ENT
M$ERASE     990**DCL-ENT
M$ERR     971**DCL-ENT
M$ERRMSG    1022**DCL-ENT
M$EVENT    1014**DCL-ENT
M$EXHUME    1023**DCL-ENT
M$EXIT     971**DCL-ENT
M$EXTEND     963**DCL-ENT
M$FDP     995**DCL-ENT
M$FDS     994**DCL-ENT
M$FEBOOT     987**DCL-ENT
M$FECTL     988**DCL-ENT
M$FEDUMP     987**DCL-ENT
M$FID    1022**DCL-ENT
M$FINDPROC     976**DCL-ENT
M$FSUSER     974**DCL-ENT
M$FVP     996**DCL-ENT
M$FWCG     980**DCL-ENT
M$GBPL    1000**DCL-ENT
M$GDDL     996**DCL-ENT
M$GDP     995**DCL-ENT
M$GDS     994**DCL-ENT
M$GETDCB     965**DCL-ENT
M$GETMOUSE    1005**DCL-ENT
M$GETPM    1006**DCL-ENT
M$GJOB    1024**DCL-ENT
M$GLINEATTR     984**DCL-ENT
M$GOODPP     999**DCL-ENT
M$GPLATEN     992**DCL-ENT
M$GPROMPT     991**DCL-ENT
M$GTRMATTR     985**DCL-ENT
M$GTRMCTL     983**DCL-ENT
M$GTRMTAB     986**DCL-ENT
M$GVP     995**DCL-ENT
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:175  
M$HELP    1022**DCL-ENT
M$INT    1014**DCL-ENT
M$INTRTN     975**DCL-ENT
M$IOQ    1010**DCL-ENT
M$JOBSTATS    1024**DCL-ENT
M$KEYIN     964**DCL-ENT
M$LDEV     959**DCL-ENT
M$LDTRC     972**DCL-ENT
M$LIMIT     965**DCL-ENT
M$LINES     964**DCL-ENT
M$LINK     971**DCL-ENT
M$MADMUCK     967**DCL-ENT
M$MAKUSER     998**DCL-ENT
M$MBS     966**DCL-ENT
M$MDFFLD     990**DCL-ENT
M$MERC    1015**DCL-ENT
M$MERCS    1016**DCL-ENT
M$MIRROR    1010**DCL-ENT
M$MONINFO    1027**DCL-ENT
M$MPL    1000**DCL-ENT
M$NODEINFO     991**DCL-ENT
M$NXTUSR    1025**DCL-ENT
M$OCMSG    1023**DCL-ENT
M$OLAY     971**DCL-ENT
M$PAS    1000**DCL-ENT
M$PATHCON    1023**DCL-ENT
M$PDS     994**DCL-ENT
M$PLATEN     985**DCL-ENT
M$PRECORD     963**DCL-ENT
M$PROCNAME     976**DCL-ENT
M$PROFILE     987**DCL-ENT
M$PROMPT     983**DCL-ENT
M$RACST     967**DCL-ENT
M$RDSYSLOG    1008**DCL-ENT
M$RELDCB     965**DCL-ENT
M$RELRES     966**DCL-ENT
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:176  
M$RELSTARF     968**DCL-ENT
M$REM     968**DCL-ENT
M$RENV    1015**DCL-ENT
M$REQUIRE     967**DCL-ENT
M$RETRY    1016**DCL-ENT
M$RETRYS    1016**DCL-ENT
M$REW     962**DCL-ENT
M$RLSFLD     990**DCL-ENT
M$RPRIV    1018**DCL-ENT
M$RSPP     997**DCL-ENT
M$RSWITCH    1019**DCL-ENT
M$RUE    1025**DCL-ENT
M$SAD     998**DCL-ENT
M$SAVE     974**DCL-ENT
M$SCON     975**DCL-ENT
M$SCREECH     973**DCL-ENT
M$SENV    1015**DCL-ENT
M$SETFMA     959**DCL-ENT
M$SETFP     988**DCL-ENT
M$SINPUT     986**DCL-ENT
M$SLCFLD     991**DCL-ENT
M$SMOUSE    1005**DCL-ENT
M$SMPRT     997**DCL-ENT
M$SPRIV    1018**DCL-ENT
M$SSC     998**DCL-ENT
M$SSWITCH    1018**DCL-ENT
M$STATE    1027**DCL-ENT
M$STD     999**DCL-ENT
M$STIMER    1013**DCL-ENT
M$STLPP     996**DCL-ENT
M$STRAP    1013**DCL-ENT
M$STRMATTR     985**DCL-ENT
M$STRMCTL     983**DCL-ENT
M$STRMTAB     986**DCL-ENT
M$SYMBIO    1024**DCL-ENT
M$SYSCON    1010**DCL-ENT
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:177  
M$SYSID    1028**DCL-ENT
M$TDCLOSE    1009**DCL-ENT
M$TDIO    1009**DCL-ENT
M$TDOPEN    1008**DCL-ENT
M$TDREQCPU    1009**DCL-ENT
M$TEMPWROC    1003**DCL-ENT
M$TIME    1026**DCL-ENT
M$TRAP    1013**DCL-ENT
M$TRMISC     988**DCL-ENT
M$TRMPRG     984**DCL-ENT
M$TRTN    1017**DCL-ENT
M$TRUNC     960**DCL-ENT
M$TTIMER    1013**DCL-ENT
M$UC     983**DCL
M$UMPL    1000**DCL-ENT
M$UNFID    1022**DCL-ENT
M$UNLATCH     979**DCL-ENT
M$UNSHARE     976**DCL-ENT
M$USRFIELD    1019**DCL-ENT
M$VIRTUAL     994**DCL-ENT
M$WAIT    1017**DCL-ENT
M$WEOF     962**DCL-ENT
M$WRSYSLOG    1008**DCL-ENT
M$XCON    1014**DCL-ENT
M$XCONRTN     975**DCL-ENT
M$XEQTIME    1027**DCL-ENT
M$XFLUSH     968**DCL-ENT
M$XMOUSE    1005**DCL-ENT
M$XXX     971**DCL-ENT
M$YC     973**DCL-ENT
OOPS IN PROCEDURE REWINDFILE   8024**LABEL
XSL$$ENDHOSTENT    7812**ENTRY
XSL$$GETHOSTBYADDR    7688**ENTRY
XSL$$GETHOSTBYNAME    7719**ENTRY
XSL$$GETHOSTENT    7781**ENTRY
XSL$$SETHOSTENT    7750**ENTRY
PL6.E3A0      #001=XSL$ETCFILES File=XSL$SOCKET4.:TCA2TSI                        SUN 11/16/97 14:32 Page:178  
XSL$DATADEFS    6538**DCL-ENT
XSL$ENDHOSTENT    7807**ENTRY
XSL$ENDNETENT    7820**ENTRY
XSL$ENDPROTOENT    7826**ENTRY
XSL$ENDSERVENT    7832**ENTRY
XSL$ETCFILES     837**PROC
XSL$GETHOSTBYADDR    7683**ENTRY
XSL$GETHOSTBYNAME    7714**ENTRY
XSL$GETHOSTENT    7776**ENTRY
XSL$GETHOSTNAME    7838**ENTRY
XSL$GETNETBYADDR    7696**ENTRY
XSL$GETNETBYNAME    7727**ENTRY
XSL$GETNETENT    7789**ENTRY
XSL$GETPROTOBYNAME    7733**ENTRY
XSL$GETPROTOBYNUMBER    7739**ENTRY
XSL$GETPROTOENT    7795**ENTRY
XSL$GETSERVBYNAME    7702**ENTRY
XSL$GETSERVBYPORT    7708**ENTRY
XSL$GETSERVENT    7801**ENTRY
XSL$SETHOSTENT    7745**ENTRY
XSL$SETNETENT    7758**ENTRY
XSL$SETPROTOENT    7764**ENTRY
XSL$SETSERVENT    7770**ENTRY
XSL_NODES    7081**DCL-ENT
