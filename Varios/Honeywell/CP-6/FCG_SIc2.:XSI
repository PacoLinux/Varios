/*M* FCG_SIc2 -- Start-up routines for FCG & command line stuff */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/*F*    NAME:     FCG_SIc2
        PURPOSE:  Execute start-up routines, and handle interactive
                  use of FCG until the program is quit.
 
        DESCRIPTION:
 
           Start_up consists of a few different tasks.  The very first
           The very first task we take on is reading the data file in,
           and processing that information.  We get the messages, and
           link data from the file and place it into the tree structures
           used for decoding fcg's.  Then, command line options and
           commands are processed at this time also.
*/
 
/*
**********************************************************************
*/
 
 
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>
#define __SG_MACROS__
#include <SEAGULL.h>
 
#include "FCG_Cc1"
 
/* EXTERNAL DATA */
 
 
/*
======================================================================
                      START-UP ROUTINES
======================================================================
*/
/*D*  NAME:    dr2_StartUp (int argc, char *arvg[])
      PURPOSE: In this function we want to control the start-up process
               for FCG.  It is a mini-driver for the entire process.
               The major purpose being decoding commands that were given
               on the command line, and either returning or exitting
               depending on the final status.
*/
 
 
int dr2_StartUp (int argc, char **argv)
{
  int i, j, result, status;
  int num_cmds=0, num_procs=0, opt_result=0;
 
#ifdef DEBUG
   strcat( message_file, ".JTBHOST");
#else
   strcat( message_file, ".X");
#endif
  msg_file_namep = message_file;
  strcpy( document_file, "FCG_AF_");
  strcat( document_file, GetTime() );
  DefaultAfName = TRUE;
  docum_file_namep = document_file;
  if (argc > 1)        /* options on the command line */
    opt_result = pa2_CmdOptionHandler (argc,argv,&num_cmds,&num_procs);
  if (opt_result == BUILD_DOCUMENT)
     dr3_BuildAfDocument();
 
  result = fm2_GetMessagesFromFile (msg_file_namep);
  switch (result)  {
    case OK:
      for (i=1; i<= num_cmds; i++)  {
         status = pa2_FcgFromCmdLine (fcg_commands[i]);
         free(fcg_commands[i]);
         if (status != OK)
            return (status);
      }  /*end for*/
      /* no fcg's given on the command line, if num_cmds=0 */
 
      for (i=1; i<= num_procs; i++)  {
         num_cmds = 0;
         result = ut2_DecodeProcToFcg (proc_commands[i], &num_cmds);
         switch (result)  {
           case OK:
             printf("\n%s ",proc_commands[i]);
             for (j=1; j<= num_cmds; j++)  {
                status = pa2_FcgFromCmdLine (fcg_commands[j]);
                free(fcg_commands[j]);
                if (status != OK)
                   return (status);
             }  /*end for j*/
             break;
           case NOT_FOUND:
             printf("** NO processor \"%s\" in data file **\n");
             return (opt_result);
           default:
             printf("** Illegal processor given on cmd line **\n");
             break;
         }  /*end switch*/
      }  /*end for i*/
      /* no proc's given on the command line if num_procs=0 */
 
      return (opt_result);
    case SYNTAX:
      return (SYNTAX);
    default:
      return (ERROR);
  }  /*end switch*/
}  /*end dr2_StartUp()*/
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    fm2_GetMessagesFromFile (char *msg_file)
      PURPOSE: This function reads data from the file, and then places
               the information into the tree structures of FCG.
*/
 
int fm2_GetMessagesFromFile (char *msg_file)
{
   I_AM( fm2_GetMessagesFromFile)
  FILE *fp;
  char fcg[5];
  char fwdlink[5];
  char backlink[20];
  char cntrl_account[10];
  char msg[81];
 
  fp = fopen(msg_file, "r");
  if (fp == (FILE *)0)  {
    Error( ME, "%s \n", "Message File given Does Not Exist!!");
    return (ERROR);
  }
 
  while (fscanf(fp,"%s %s %s",fcg,backlink,cntrl_account) != EOF )  {
    if ((strcmp(backlink, BOGUS) != 0) && (fcg[0] != COMMENT))  {
       if (strcmp(cntrl_account, NO_ACCOUNT) == 0)
          cntrl_account[0] = 0;
       strcpy(fwdlink, fcg);
       tr2_InsertProcName (ut2_FixFcg(fwdlink), StringToUpper(backlink),
                         cntrl_account, LEVEL_2);
    }
    fgets(msg,80,fp);   /* get the message, after the fcg & backlink*/
 
    if (isalpha(fcg[0]))  {          /* Level #1 = fcg[0] */
       toupper(fcg[0]);
       if (isalnum(fcg[1]) || (fcg[1] == '*'))  {       /* Level #2 */
          if (isalpha(fcg[1]))
             toupper(fcg[1]);
          if (isalnum(fcg[2]) || (fcg[2] == '*'))  {    /* Level #3 */
             if (isalpha(fcg[2]))
                toupper(fcg[2]);
             tr2_InsertFcgMessage (fcg, msg, LEVEL_3);
          }
          else if (fcg[2] == UNDER_SCORE)
             tr2_InsertFcgMessage (fcg, msg, LEVEL_2);
          else  {
              Error( ME, "%s \n            %s %s\"%c%c%c\" \n",
                     "Message File Syntax Error ###",
                     "Level=3",
                     "FCG=", fcg[0], fcg[1], fcg[2]);
             return (SYNTAX);
          }                          /* END Level #3 code */
       }  /*end if*/
       else if (fcg[1] == UNDER_SCORE)
          tr2_InsertFcgMessage (fcg, msg, LEVEL_1);
       else  {
           Error( ME, "%s \n            %s %s\"%c%c%c\" \n",
                  "Message File Syntax Error ###",
                  "Level=2",
                  "FCG=", fcg[0], fcg[1], fcg[2]);
          return (SYNTAX);
       }                             /* END Level #2 code */
    }  /*end if*/
    else if (fcg[0] == COMMENT)
      ;                 /* do nothing, skip this record of the file */
    else  {          /* 1st char of fcg != alnum or a comment */
      Error( ME, "%s \n            %s %s\"%c%c%c\" \n",
             "Message File Syntax Error ###",
             "Level=1",
             "FCG=", fcg[0], fcg[1], fcg[2]);
      return (SYNTAX);
    }                                /* END Level #1 code */
  }  /*end while != EOF*/
  fclose(fp);
return(OK);
}  /*end fm2_GetMessagesFromFile ()*/
 
/*
======================================================================
                     TREE MANIPULATION ROUTINES
======================================================================
*/
/*D*  NAME:    tr2_InsertFcgMessages (char *fcg, char *message, int level)
      PURPOSE: This function serves as a mini-driver for inserting a
               message into the tree, given a certain fcg and level.
*/
 
int tr2_InsertFcgMessage (char *fcg, char *message, int level)
{
   I_AM( tr2_InsertFcgMessage)
  char major, minor, module;
  LINK minor_head,module_head;
 
  major = fcg[0];
  minor = fcg[1];
  module = fcg[2];
    while (*message == BLANK)    /* skip over leading blanks of msg */
       ++message;
  if (isalpha(major))
    major = toupper(major);
  switch (level)  {
    case LEVEL_1:
      major_head[major-'A'].message = (char *)malloc(strlen(message)+1);
      strcpy(major_head[major-'A'].message,message);
      return (OK);
    case LEVEL_2:
      minor_head = tr2_InsertNode(major_head[major-'A'].next_level, minor, message);
      major_head[major-'A'].next_level = minor_head;
      return (OK);
    case LEVEL_3:
      minor_head = major_head[major-'A'].next_level;
      while (minor_head)  {
        if (minor == minor_head->fcg)  {
          module_head = tr2_InsertNode(minor_head->next_level, module, message);
          minor_head->next_level = module_head;
          return (OK);
        }
        else
          minor_head = minor_head->next_char;
      }  /*end while*/
      Error( ME, "%s \n            %s\"%c%c%c\" \n",
             "Could not insert message in list, Minor FCG not found!",
             "FCG=", fcg[0], fcg[1], fcg[2]);
      return (ERROR);
      break;
  }  /*end switch*/
}  /*end insert_message ()*/
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    tr2_InsertNode
      PURPOSE: This function is to insert one node, first or append,
               into the fcg message tree.  Given an old head, the fcg,
               and the message.  It traverses the tree to find the
               correct location for the new node.
*/
 
LINK tr2_InsertNode (LINK old_head, char fcg, char *message)
{
  LINK new_head, new_node;
 
  if (!old_head)  {
     new_head = tr2_NewFcgNode ();
     new_node = new_head;
  }
  else  {
     new_head = new_node = old_head;
     while (new_node->next_char)
       new_node = new_node->next_char;
     new_node->next_char = tr2_NewFcgNode ();
     new_node = new_node->next_char;
  }
  new_node->fcg=fcg;
  new_node->message = (char *)malloc(strlen(message)+1);
  strcpy(new_node->message,message);
  new_node->next_level = (LINK)0;
  new_node->next_char = (LINK)0;
return (new_head);
}  /*end tr2_InsertNode ()*/
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    tr2_InsertProcName
      PURPOSE: Similar to the above insertion function, only this one
               inserts into the processor backwards link tree.  This
               function inserts the first, in the middle, or at the end
               of the list.  In alphabetical order also.
*/
 
int tr2_InsertProcName (char *fcg, char *name, char *account, int level)
{
  char key;
  PLINK previous, present, head, temp;
 
  key = *name;
  while (key == BLANK)
     key = *++name;
  if (isalpha(key))
    key = toupper(key);
  else  {
    printf("** Processor name must start with a letter -NOT \"%c\"\n",*name);
    return (ERROR);
  }
  switch (level)  {
    case LEVEL_2:
      head = proc_head[key-'A'].next;
      if (!head)  {
         head = tr2_NewProcNode ();   /*allocate*/
         proc_head[key-'A'].next = head;
         proc_head[key-'A'].prev = (PLINK)0;
         head->next = (PLINK)0;
         head->prev = (PLINK)0;
         temp = head;
      }
      else  {    /* have a head ptr, so insert node alphabetically */
         previous = (PLINK)0;
         present = head;
         while ((present) && (strcmp(name,present->name) >= 0))  {
            previous = present;
            present = present->next;
         }
         temp = tr2_NewProcNode ();    /* allocate space */
         if ((present) && (previous))  {        /* insert in middle */
            present->prev = temp;
            temp->prev = previous;
            temp->next = present;
            previous->next = temp;
         }
         else if (present)  {   /* (!previous)  insert at beginning */
            present->prev = temp;
            temp->prev = previous;   /* NULL */
            temp->next = present;
            proc_head[key-'A'].next = temp;
         }
         else  {     /* (previous)&(!present)  insert at end of list*/
            temp->prev = previous;
            temp->next = present;    /* NULL */
            previous->next = temp;
         }
      }  /*end else*/
      strcpy(temp->fcg,fcg);
      temp->name = (char *)malloc(strlen(name)+1);
      strcpy(temp->name,name);
      temp->account = (char *)malloc(strlen(account)+1);
      strcpy(temp->account,account);
      break;
    default:
      printf("** no such PROC LEVEL **\n");
      return (ERROR);
  }  /*end switch*/
return (OK);
}  /*end tr2_InsertProcName ()*/
 
 
/*
----------------------------------------------------------------------
*/
/*D*     NAME:  tr2_NewFcgNode
         PURPOSE:  This function just allocates the storage space for
                   the FCG type of linked list node, for that 3 level
                   tree structure.
*/
 
LINK tr2_NewFcgNode ()
{
   return( (LINK)malloc(sizeof(NODE)) );
}
 
 
/*
----------------------------------------------------------------------
*/
/*D*     NAME:  tr2_NewProcNode
         PURPOSE:  This function just allocates the storage space for
                   the PROCessor type of linked list node, which is an
                   array of liner lists.
*/
 
PLINK tr2_NewProcNode ()
{
   return( (PLINK)malloc(sizeof(PROC)) );
}
 
/*
======================================================================
                      COMMAND LINE HANDLING ROUTINES
======================================================================
*/
/*D*  NAME:    pa2_CmdOptionHandler
      PURPOSE: This function handles all options that are input on the
               command line.  (similar to pa1_OptionHandler in FCG_SIc1)
*/
 
int pa2_CmdOptionHandler (int argc, char **argv,
                        int *num_cmds, int *num_procs)
{
  I_AM( pa2_CmdOptionHandler)
  char *buf;
  char endc = 0;
  int num_opts;
  int i;
  int status;
 
  num_opts = argc-1;
  if (num_opts >= 1)
    status = -1;    /* -1 default to OK, changed if fcg on cmd line */
  else
     status = OK;     /* no opts => stay tuned for interactive use */
  for (i=1; i <=num_opts; i++)  {
     buf = argv[i];
     if (buf[0] == DASH)  {     /* has to be option(s) */
       while (*++buf)  {
          switch (tolower(*buf))  {
            case 'a':      /* ASCII document opt */
              flag_ascii_docum = TRUE;
              break;
            case 'c':      /* continue option */
              status = OK;  /* don't quit after processing cmd line */
              break;
            case 'd':      /* Document opt = assign document file */
              if (*(buf+1) == '+')  {
                 ++buf;
                 AppendToDocumFile = TRUE;
              }
              if (*(buf+1))  {
                 docum_file_namep = buf+1;
                 buf = (&endc) - 1;
              }
              else
                 docum_file_namep = argv[++i];
              docum_file_namep = ut2_CheckLPorLZ( docum_file_namep);
              status = BUILD_DOCUMENT;
              break;
            case 'e':      /* End */
            case 'q':      /* Quit */
              status = QUIT;
              break;
            case 'f':      /* File opt = change message file */
              if (*(buf+1))  {
                 msg_file_namep = buf+1;
                 buf = (&endc) - 1;
              }
              else
                 msg_file_namep = argv[++i];
              break;
            case 'h':      /* Help opt */
              ou1_HelpEmOut (H_CMD_LINE);
              break;
            case 'i':      /* Input opt = assign Input file */
              if (*(buf+1))  {
                 input_file_namep = buf+1;
                 buf = (&endc) - 1;
              }
              else
                 input_file_namep = argv[++i];
              InputFileExists = TRUE;
              status = BUILD_DOCUMENT;
              break;
            case 'p':      /* Proc opt = decode given processor */
              if (status < 0)
                status = QUIT;  /* no continue yet, so default QUIT */
              (*num_procs)++;
              if (*(buf+1))  {
                 proc_commands[*num_procs] = (char *)malloc(strlen(buf+1) +1);
                 strcpy(proc_commands[*num_procs], buf+1);
                 buf = (&endc) - 1;
              }
              else
                 proc_commands[*num_procs] = argv[++i];
                 StringToUpper( proc_commands[*num_procs]);
              break;
            case 't':      /* Text document opt */
              flag_text_docum = TRUE;
              break;
            case 'v':      /* Verbose opt */
              ++verbose;
              break;
            case 'x':      /* X Account opt */
              if (*(buf+1))  {
                  if (strncmp( buf+1, "LP", 2) == 0)
                     OutputToLP = TRUE;
                  else if (strncmp( buf+1, "LZ", 2) == 0)
                     OutputToLZ = TRUE;
                  else if (strncmp( buf+1, "NO", 2) == 0)  {
                     OutputToLZ = FALSE;
                     OutputToLP = FALSE;
                  }
                  else  {
                     Error( ME, "Bad syntax on -x option: \"%s\" \n",
                            buf+1);
                     exit( 3);
                  }
                  buf = (&endc) - 1;
              }
              else  {
                  ++i;
                  if (i > num_opts)  {
                     OutputToLP = TRUE;    /* do default junk */
                  }
                  else if (strncmp( argv[i], "LP", 2) == 0)
                     OutputToLP = TRUE;
                  else if (strncmp( argv[i], "LZ", 2) == 0)
                     OutputToLZ = TRUE;
                  else if (strncmp( argv[i], "NO", 2) == 0)  {
                     OutputToLZ = FALSE;
                     OutputToLP = FALSE;
                  }
              }  /*end else*/
              dr2_XaccountOption();
              status = BUILD_DOCUMENT;
              break;
            default:
              printf("** \"%c\" is not a valid option **\n",*buf);
              break;
          }  /*end switch*/
       }  /*end while*/
     }  /*end if DASH*/
     else if (buf[0] == BACK_SLASH)  {  /* processor given as input */
        if (status < 0)
          status = QUIT;    /* no continue yet, so default QUIT */
        (*num_procs)++;
        proc_commands[*num_procs] = (char *)malloc(strlen(argv[i])+1);
        strcpy(proc_commands[*num_procs], argv[i]+1);  /* +1 to get rid of \ */
        proc_commands[*num_procs] = StringToUpper (proc_commands[*num_procs]);
     }  /*end else if*/
     else  {         /* no DASH or BACK_SLASH => command line input */
        if (status < 0)
          status = QUIT;    /* no continue yet, so default QUIT */
        (*num_cmds)++;
        fcg_commands[*num_cmds] = (char *)malloc(strlen(argv[i])+1);
        strcpy(fcg_commands[*num_cmds], argv[i]);
     }  /*end else*/
  }  /*end for i*/
  if (status < 0)
    return (OK);
  else
    return (status);
}  /*end pa2_CmdOptionHandler ()*/
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    pa2_FcgFromCmdLine (char *command)
      PURPOSE: This is a mini-driver function, similar to the main function.
               It handles the fcg command when it is given on the command
               line.
*/
 
int pa2_FcgFromCmdLine (char *command)
{
  int result;
 
  if (!command)
     return (ERROR);
  in1_InitShit ();
  ou1_PromptEm ();
  printf("\n");  /* for clarity */
  result = pa1_GetFcg (CMD_LINE, command);
  switch (result)  {
    case (OK):
      ut1_DecodeMajorArea (major_area);
      if (minor_area != NONE)  {
        ut1_DecodeMinorArea (major_area, minor_area);
        if (module_id != NONE)
          ut1_DecodeModuleId (major_area, minor_area, module_id);
      }
      break;
    default:
      return (result);
  }  /*end switch*/
return (OK);
}  /*end pa2_FcgFromCmdLine ()*/
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    ut2_DecodeProcToFcg (char *command, int *num_cmds)
      PURPOSE: This function takes a given processor command, and decodes
               it back into fcg type commands.  These commands are then
               passed on for further decoding, and output.
*/
 
int ut2_DecodeProcToFcg (char *command, int *num_cmds)
{
  PLINK head, temp;
  char key;
  char *question;
  int result, length;
 
  key = command[0];
  head = proc_head[key-'A'].next;
 
  if (question = strchr(command, '?'))  {   /*command is wildcarded */
     if (key == '?')  {
        printf("** NO wild carding for every processor bub! **\n");
        return (ERROR);
     }
     else  {
        length = (question - command);  /*? position - start of str */
        temp = head;
        while (temp)  {    /* go for partial match on input string here */
           if (strncmp(temp->name,command,length) == 0)
              tr2_AddCmdToList (num_cmds, temp);
           temp = temp->next;
        }
        if (*num_cmds > 0)
          return (OK);
     }  /*end else*/
  }
  else  {  /* NO wildcard on command, look for an exact match */
     temp = head;
     while (temp)  {
        if (strcmp(temp->name, command) == 0)
           tr2_AddCmdToList (num_cmds, temp);
        temp = temp->next;
     }  /*end while*/
     if (*num_cmds > 0)
        return (OK);     /* because we got an exact match */
 
  /* else, we did not get an exact match */
 
     result = ut2_DecodePartialProc (head, num_cmds, command);
     return (result);
  }  /*end else*/
return (NOT_FOUND);
}  /*end ut2_DecodeProcToFcg ()*/
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    ut2_DecodePartialProc
      PURPOSE: This function handles the case where a processor was input
               but an exact match was not found.  This means it was either
               wildcarded, or they took a guess.  It tries to match n input
               chars, to the back-link names.  If that fails, it does a x?,
               first letter input, ?.
*/
 
int ut2_DecodePartialProc (PLINK head, int *num_cmds, char *proc)
{
  PLINK temp;
 
  /* go for partial match on input string here */
  temp = head;
  while (temp)  {    /* go for partial match on input string here */
     if (strncmp(temp->name,proc,strlen(proc)) == 0)
        tr2_AddCmdToList (num_cmds, temp);
     temp = temp->next;
  }
  if (*num_cmds > 0)
    return (OK);
 
  /* FOR NOW => do a "x?" if the input doesn't match by now */
  *++proc = '?';     /* make 2nd char a ? , 1st char remains same */
  *++proc = 0;       /* end command string after ? */
  temp = head;
  while (temp)  {    /* go for matches on "key"? here */
     tr2_AddCmdToList (num_cmds, temp);
     temp = temp->next;
  }
  if (*num_cmds > 0)
    return (OK);
 
  /* if we get down here, we didn't find a match I guess */
return (NOT_FOUND);
}  /*end ut2_DecodePartialProc ()*/
 
/*
======================================================================
                       MISC / UTILITY ROUTINES
======================================================================
*/
/*D*  NAME:    tr2_AddCmdToList (int *count, PLINK ptr)
      PURPOSE: Allocates storage for, and puts fcg command, that was
               decoded from a processor command, into the cmd array.
*/
 
void  tr2_AddCmdToList (int *count, PLINK ptr)
{
  (*count)++;
  fcg_commands[*count] = (char *)malloc(strlen(ptr->fcg) +1);
  strcpy(fcg_commands[*count], ptr->fcg);
return;
}
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    ut2_FixFcg (char *fcg)
      PURPOSE: This function was required, because an under-score is
               not legal in an fcg, so we needed to remove it before
               the fcg was decoded.
*/
 
char *ut2_FixFcg (char *fcg)
{
  char *temp;
 
  temp = fcg;
  while (*temp)
     if (*temp == UNDER_SCORE)
        *temp++ = BLANK;
     else
        *temp++;
return (fcg);
}  /*end ut2_FixFcg()*/
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    ut2_CheckLPorLZ (char *docum_name)
      PURPOSE: This function tests the document name to see if it is
               LP or LZ.  If it is: it will set flags, and change the
               name back to the default (star file).
*/
 
char *ut2_CheckLPorLZ (char *docum_name)
{
   if (strcmp( docum_name, "LP") == 0)  {
      OutputToLP = TRUE;
   }
   else if (strcmp( docum_name, "LZ") == 0)  {
      OutputToLZ = TRUE;
   }
 
   if (OutputToLP || OutputToLZ)
      return( document_file);       /* global ref: default file name*/
   else  {
      DefaultAfName = FALSE;
      return( docum_name);          /* don't change the one passed  */
   }
}  /*end ut2_CheckLPorLZ ()*/
 
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    dr2_XaccountOption ()
      PURPOSE: lower level Driver function for X Account option handling
      DESCRIPTION:
         This function handles everything we could possibly want done
         when doing an X Account integration of the Data file.  It will
         automatically grab the latest version of AF_0071?.ARCHFILE,
         then "increment" the version to create the output file name.
         It will also set Output to LP by default, but can be directed
         to Output to LZ, or use NO to cancel output.  Then we go to it.
*/
 
void  dr2_XaccountOption ()                                   /*func*/
{
   I_AM( dr2_XaccountOption)
   char OldArchfile[41];
   char NewArchfile[41];
   char WildString[41];
   char *TmpFid;
   char *LastChar;
   char Version;
   char Revision;
   char *period;
   int  FidCnt = 0;
   extern char *fwildfid( char *, int, int);
 
   WHERE_AM_I( ME)
 
#ifndef DEBUG
   strcpy( WildString, "AF_0071?.ARCHFILE");
#else
   strcpy( WildString, "AF_0071?.JTBHOST");
#endif
   if (TmpFid = fwildfid( WildString, FidCnt++, '?') )  {
      strcpy( OldArchfile, TmpFid);
      /* we have at least one OldArchfile that matches here */
 
      /* now go see if we have any more matches to "WildString" */
      while (TmpFid = fwildfid( WildString, FidCnt++, '?') )  {
         strcpy( OldArchfile, TmpFid);
/*       fprintf( ifp, "%s\n",OldArchfile);   *N* ???*/
      }  /*end while TmpFid*/
 
   }  /*if TmpFid*/
   else  {
   /* if we get here... we didn't find any file's that match "WildString"
      so we had better blow off, eh.
   */
      Error ( ME, "%s %s \n",
         "NO matches found for: ", WildString);
      exit( 4);
   }  /*end else*/
 
   /* now use the Old Archfile name as our input file */
   InputFileExists = TRUE;
   strcpy( input_file, OldArchfile);
   input_file_namep = input_file;
   if (verbose)  {
      printf( "Input found: %s \n", OldArchfile);
   }
 
   /* now "increment" the old name, for our output file */
   strcpy( NewArchfile, OldArchfile);
   if (period = strrchr( NewArchfile, '.') )
      *period = '\0';
   LastChar = &(NewArchfile[ strlen( NewArchfile) -1]);
   Revision = *LastChar;
   Version  = *(LastChar-2);
 
   if (Revision < '9')  {
      ++*LastChar;
   }
   else  {
      *LastChar = '0';
      ++*(LastChar-2);
   }
 
   if (strcmp( OldArchfile, NewArchfile) == 0)  {
      Error( ME, "%s \n           Old Archfile: %s  New Archfile: %s",
             "Oops!  The auto-increment function don't work.",
             OldArchfile, NewArchfile);
      exit( 4);
   }
 
   strcpy( document_file, NewArchfile);
   docum_file_namep = document_file;
   if (verbose)  {
      printf( "Document file name generated: %s \n", docum_file_namep);
   }
 
return;
}  /*end dr2_XaccountOption ()*/
 
/*
----------------------------------------------------------------------
*/
