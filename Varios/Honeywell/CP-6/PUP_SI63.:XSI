/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/*M* PMERGE - a program to merge patch files together */
 
SUB$UTS: PROC(FID,PROCC,UTS,CBIT);
 
DCL ERROR ENTRY(1);
DCL X$PARSE ENTRY(1) ALTRET;
DCL PROCC CHAR(30);
DCL UTS CHAR(60);
DCL UTSX CHAR(60);
DCL SUBUTS CHAR(60);
DCL OUNAME CHAR(30);
DCL I UBIN;
DCL FID_TEXT CHAR(60) STATIC;
DCL FID CHAR(60);
 
DCL INPUT CHAR(80) SYMREF;
DCL OUTPUT CHAR(80) STATIC;
DCL FID_ASN UBIN(9) STATIC ALIGNED;
DCL FID_RES CHAR(4) STATIC;
 
DCL TPROC CHAR(30);
DCL TOUNAME CHAR(30);
DCL TUTS CHAR(60);
DCL CBIT BIT(1);
DCL 1 CTABLE CALIGNED STATIC,
      2 C (0:5000) CHAR(80) CALIGNED INIT(' ');
DCL STABLESIZE UBIN STATIC SYMDEF INIT(0);
DCL CIX UBIN;
 
DCL M$INPUT DCB;
DCL M$LO DCB;
 
%INCLUDE CP_6;
%F$DCB;
%INCLUDE XU_MACRO_C;
%INCLUDE XS_MACRO_C;
 
%FPT_READ(FPTN=READ,DCB=M$INPUT,BUF=INPUT);
DCL COMMAND UBIN SYMREF;
DCL XSA$OPEN ENTRY(2) ALTRET;
DCL XSA$CLOSE ENTRY(2) ALTRET;
DCL XSA$READ ENTRY(2) ALTRET;
DCL XSA$WRITE ENTRY(2) ALTRET;
DCL XSA$PFIL ENTRY(2) ALTRET;
%P_PCB(STCLASS="SYMREF");
%PARSE$SYM(NAME=OUTSYM,
         STCLASS=BASED);                /* FOR SYMBOLS AND DELIM STRINGS      */
%PARSE$OUT(NAME=OUTBLK,
         STCLASS=BASED);                /* FOR OUTPUT BLOCKS                  */
%FPT_OPEN(FPTN=OPENSHARED,
         STCLASS=STATIC,
         FUN=IN,
         ACS=SEQUEN,
         ORG=CONSEC,
         ASN=FILE,
         SN=VLP_SN,
         SHARE=ALL,
         NAME=VLP_NAME,
         ACCT=VLP_ACCT,
         PASS=VLP_PASS,
         WSN=VLP_WSN);
 
%FPT_FID(FPTN=FPT_FID,
         STCLASS=STATIC,
         ACCT=VLP_ACCT,
         ASN=FID_ASN,
         NAME=VLP_NAME,
         PASS=VLP_PASS,
         RES=FID_RES,
         RESULTS=VLR_FID,
         SN=VLP_SN,
         TEXTFID=FID_TEXT,
         WSN=VLP_WSN);
 
%VLP_NAME(FPTN=VLP_NAME,STCLASS=STATIC);
%VLR_FID(FPTN=VLR_FID);
%VLP_ACCT(FPTN=VLP_ACCT,STCLASS=STATIC);
%VLP_PASS(FPTN=VLP_PASS,STCLASS=STATIC);
%VLP_SN(FPTN=VLP_SN,STCLASS=STATIC);
%VLP_WSN(FPTN=VLP_WSN,STCLASS=STATIC);
%FPT_CLOSE(FPTN=CLOSE,DISP=SAVE,DCB=M$INPUT);
DCL BLOCK CHAR(4096) STATIC SYMDEF;
DCL KLOCK CHAR(1024) STATIC SYMDEF;
%XSA_PARAM(FPTN=XSA$PARAM,BBUF=BLOCK,KBUF=KLOCK,STCLASS=STATIC SYMDEF);
%FPT_WRITE(FPTN=WRITELO,DCB=M$LO,BUF=OUTPUT);
%FPT_PFIL(FPTN=BOF,BOF=YES,DCB=M$INPUT);
 
 
                 OUNAME=' ';
                 UTSX=UTS;
                 I = 0;
                 CALL INDEX (I,',',UTS,I+1);
                 IF I<SIZEC(UTS)-1
                       THEN DO;
                       OUNAME = SUBSTR(UTS,0,I);
                       UTSX = SUBSTR(UTS,I+5,SIZEC(UTS)-I-5);
                       END;
 
IF SUBSTR(UTSX,7,1)~=' ' THEN RETURN;    /* I BELIEVE YOU IF NOT BLANK */
        FID_TEXT=FID;
        CALL M$FID(FPT_FID);
 
        OPENSHARED.V.DCB#=DCBNUM(M$INPUT);
        CALL XSA$OPEN(OPENSHARED,XSA$PARAM) ALTRET(BADOPEN);
           DO WHILE('0'B);
 
BADOPEN:    CALL CONCAT(OUTPUT, 'Unable to open file: ',FID);
           CALL M$WRITE(WRITELO);
           END;
 
        CALL XSA$PFIL(BOF,XSA$PARAM);
        IF STABLESIZE=0 THEN DO WHILE('1'B);
        INPUT=' ';
        CALL XSA$READ(READ,XSA$PARAM)ALTRET(GOON);
        CALL LOADCTABLE;
        END;
 
GOON:;
        CALL XSA$PFIL(BOF,XSA$PARAM);
        CIX=0;
 
           DO WHILE('1'B);
 
              INPUT=' ';
              CALL NEXTCARD ALTRET(OUT);
              P_PCB.NCHARS=80;
              CALL X$PARSE(P_PCB) ALTRET(SYNTAX);
           DO WHILE('0'B);
 
SYNTAX:    CALL CONCAT(OUTPUT, 'Syntax error in file: ',FID);
           CALL M$WRITE(WRITELO);
           OUTPUT = INPUT;
           CALL M$WRITE(WRITELO);
           END;
 
              TPROC=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.TEXT;
              TUTS=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(1)->OUTSYM.TEXT;
              SUBUTS=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(2)->OUTSYM.TEXT;
                 I = 0;
                 CALL INDEX (I,',',SUBUTS,I+1);
                 IF I<SIZEC(SUBUTS)-1
                       THEN DO;
                       TOUNAME = SUBSTR(SUBUTS,0,I);
                       END;
                       ELSE TOUNAME=' ';
 
              IF TPROC=PROCC AND TOUNAME=OUNAME AND UTSX=TUTS THEN DO;
 
                 UTS=SUBUTS;
                 CALL XSA$CLOSE(CLOSE,XSA$PARAM);
                 RETURN;
 
                 END;
 
        IF CBIT='1'B THEN
              IF TPROC=PROCC AND UTSX=TUTS THEN DO;
 
                 UTS=SUBUTS;
                 CALL XSA$CLOSE(CLOSE,XSA$PARAM);
                 RETURN;
 
                 END;
 
              END;
 
OUT:       CALL XSA$CLOSE(CLOSE,XSA$PARAM);
           RETURN;
 
CHECKIT: PROC;
 
DCL TEST BIT(1) UNAL;
 
        TEST='0'B;
        DO WHILE('1'B);
 
           INPUT=' ';
           CALL XSA$READ(READ,XSA$PARAM) ALTRET(OUT);
           P_PCB.NCHARS=DCBADDR(DCBNUM(M$INPUT))->F$DCB.ARS#;
           CALL X$PARSE(P_PCB) ALTRET(SYNTAX);
 
           TPROC=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.TEXT;
           TUTS=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(1)->OUTSYM.TEXT;
           SUBUTS=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(2)->OUTSYM.TEXT;
           IF PROCC='?' AND UTS='?' THEN DO;
 
              OUTPUT=INPUT;
              CALL M$WRITE(WRITELO);
              TEST='1'B;
 
              END;
           IF PROCC='?' AND UTS=TUTS THEN DO;
 
              OUTPUT=INPUT;
              CALL M$WRITE(WRITELO);
              TEST='1'B;
              END;
 
 
           IF TPROC=PROCC AND UTS='?' THEN DO;
 
              OUTPUT=INPUT;
              CALL M$WRITE(WRITELO);
              TEST='1'B;
 
              END;
 
           ELSE IF TPROC=PROCC AND UTS=TUTS THEN DO;
 
                 OUTPUT=INPUT;
                 CALL M$WRITE(WRITELO);
                 RETURN;
 
                 END;
 
 
           END;
 
OUT:    IF TEST='1'B THEN RETURN;
        CALL CONCAT(OUTPUT,'*** nothing found in file: ',FID);
        CALL M$WRITE(WRITELO);
        RETURN;
 
SYNTAX:    CALL CONCAT(OUTPUT, 'Syntax error in file: ',FID);
           CALL M$WRITE(WRITELO);
           OUTPUT = INPUT;
           CALL M$WRITE(WRITELO);
           CALL M$ERR;
 
END;
LOADCTABLE: PROC;
 
           CTABLE.C(CIX)=INPUT;
           CIX=CIX+1;
 
DONE:   ;
        STABLESIZE=CIX;
        RETURN;
 
END;
NEXTCARD: PROC ALTRET;
 
           INPUT=CTABLE.C(CIX);
           CIX=CIX+1;
 
DONE:   ;
        IF STABLESIZE<CIX THEN ALTRETURN;
        RETURN;
 
END;
END;
