/*M* LARK_PARSE_D - Partrge nodes for the LARK command language */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*T*/
/*X* DDA */
/*P*
   NAME:          LARK_PARSE_D
   PURPOSE:       This module contains a complete description of the syntax
                  of the LARK command language.  It is written in the Partrge
                  meta-language for use with Partrge and X$PARSE.
   DESCRIPTION:   None.
*/
/*D*
   NAME:          LARK_PARSE_D
   ENTRY:         One externally visible node head is defined in this module:
                     LARK_CMDS
   CALL:          This module, when compiled by Partrge, contains only data.
   DESCRIPTION:   LARK_CMDS provides the main root of the syntax of the LARK
                  command language.  The nodes are structured such that each
                  introducer keyword selects the command syntax allowed for
                  that command.  The introducer keywords are separated from
                  the rest of the command to make the parser more efficient.
*/
%EJECT ;
%SET LISTINC = '1'B ;
%INCLUDE LARK_C63 ;
%EJECT ;
/*D*
   NAME:          LARK_CMDS
   DESCRIPTION:   LARK_CMDS is the root of the syntax description for the LARK
                  command language.  Its purpose is to break out the major
                  commands by their introducer keyword and point the parser
                  down the correct syntactic path for the command.
*/
 
LARK_CMDS ( D ) = ;
   (  CREATE_CMD ;
    | DELETE_CMD ;
    | DISCONNECTSTA_CMD ;
    | DISPLAY_CMD ;
    | MODIFY_CMD ;
    | SELECT_CMD ;
    | ABORTSTA_CMD ;
    | CONNECTSTA_CMD ;
    | DEFINESTA_CMD ;
    | RESUMESTA_CMD ;
    | STATUSOFSTA_CMD ;
    | SUSPENDSTA_CMD ;
    | CLOSE_CMD ;
    | OPEN_CMD ;
    | ACTIVATE_CMD ;
    | DEACTIVATE_CMD ;
    | SETPROFILE_CMD ;
    | EXIT_CMD ;
    | NULL_CMD ;
    | STARTFPRG_CMD ;
    | PAUSE_CMD ;
    | STOPFPRG_CMD ;
   ) ;
   .END
 
%EJECT ;
/*D*
   NAME:          CREATE_CMD
   DESCRIPTION:   Creates a new ComGroup file.
*/
 
CREATE_CMD ( %CREATE_CMD ) = ;
   'CRE/ATE' ;
   CREATE_BODY
 
 
/*
   CREATE body
*/
 
CREATE_BODY = ;
   .B ;
   [ ( 'COMG/ROUP'|'CG' ) ASSIGNMENT_OP ] ;
   CG_FID ;
   [ CREATE_OPTION_LIST ]
 
 
/*
   CREATE option list
*/
 
CREATE_OPTION_LIST ( %CREATE_OPTION_LIST ) = ;
   '(' ;
   < ',', CREATE_OPTION > ;
   [ ')' ]
 
 
/*
   CREATE option possibilities
*/
 
CREATE_OPTION = ;
   (  ACCT_ACCESS_OPT ;
    | CREATE_OPTS ;
   )
 
 
/*
   CREATE opts possibilities
*/
 
CREATE_OPTS = ;
   {  EXIST_OPT ;
    | EXPIRE_OPT ;
    | IXTNSIZE_OPT ;
    | JOURNAL_OPT ;
    | QISS_OPT ;
   }
 
 
/*
   CREATE option definitions
*/
 
ACCT_ACCESS_OPT ( %ACCT_ACCESS_OPT ) = ;
   'A/CCT' ;
   ASSIGNMENT_OP ;
   ACCT_NAME_WILDC ;
   [ ACCESS_OPTION_LIST ]
 
EXIST_OPT ( %EXIST_OPT ) = ;
   'EXI/ST' ;
   ASSIGNMENT_OP ;
   ERR_NEW
 
EXPIRE_OPT ( %EXPIRE_OPT ) = ;
   'EXP/IRE' ;
   ASSIGNMENT_OP ;
   NEVER_NUMDAYS
 
IXTNSIZE_OPT ( %IXTNSIZE_OPT ) = ;
   'I/XTNSIZE' ;
   ASSIGNMENT_OP ;
   NUMGRANS
 
JOURNAL_OPT ( %JOURNAL_OPT ) = ;
   'J/OURNAL' ;
   ASSIGNMENT_OP ;
   YES_NO
 
QISS_OPT ( %QISS_OPT ) = ;
   'Q/ISS' ;
   ASSIGNMENT_OP ;
   YES_NO
 
 
/*
   ACCESS option list
*/
 
ACCESS_OPTION_LIST ( %ACCESS_OPTION_LIST ) = ;
   '(' ;
   < ',', ACCESS_OPTION > ;
   ')'
 
 
/*
   ACCESS option possibilities
*/
 
ACCESS_OPTION = ;
   {  ACC_AU_OPT ;
    | ACC_AURD_OPT ;
    | ACC_DELF_OPT ;
    | ACC_DELR_OPT ;
    | ACC_EXEC_OPT ;
    | ACC_NOLIST_OPT ;
    | ACC_READ_OPT ;
    | ACC_REATTR_OPT ;
    | ACC_TCTL_OPT ;
    | ACC_UPD_OPT ;
    | ACC_WNEW_OPT ;
   }
 
 
/*
   ACCESS option definitions
*/
 
ACC_AU_OPT ( %ACC_AU_OPT ) = ;
   'AU' ;
   ASSIGNMENT_OP ;
   YES_NO
 
ACC_AURD_OPT ( %ACC_AURD_OPT ) = ;
   'AURD' ;
   ASSIGNMENT_OP ;
   YES_NO
 
ACC_DELF_OPT ( %ACC_DELF_OPT ) = ;
   'DELF' ;
   ASSIGNMENT_OP ;
   YES_NO
 
ACC_DELR_OPT ( %ACC_DELR_OPT ) = ;
   'DELR' ;
   ASSIGNMENT_OP ;
   YES_NO
 
ACC_EXEC_OPT ( %ACC_EXEC_OPT ) = ;
   'EXEC' ;
   ASSIGNMENT_OP ;
   YES_NO
 
ACC_NOLIST_OPT ( %ACC_NOLIST_OPT ) = ;
   'NOLIST' ;
   ASSIGNMENT_OP ;
   YES_NO
 
ACC_READ_OPT ( %ACC_READ_OPT ) = ;
   'READ' ;
   ASSIGNMENT_OP ;
   YES_NO
 
ACC_REATTR_OPT ( %ACC_REATTR_OPT ) = ;
   'REATTR' ;
   ASSIGNMENT_OP ;
   YES_NO
 
ACC_TCTL_OPT ( %ACC_TCTL_OPT ) = ;
   'TCTL' ;
   ASSIGNMENT_OP ;
   YES_NO
 
ACC_UPD_OPT ( %ACC_UPD_OPT ) = ;
   'UPD' ;
   ASSIGNMENT_OP ;
   YES_NO
 
ACC_WNEW_OPT ( %ACC_WNEW_OPT ) = ;
   'WNEW' ;
   ASSIGNMENT_OP ;
   YES_NO
 
%EJECT ;
/*D*
   NAME:          DELETE_CMD
   DESCRIPTION:   Deletes a ComGroup file.
*/
 
DELETE_CMD ( %DELETE_CMD ) = ;
   'DEL/ETE' ;
   DELETE_BODY
 
 
/*
   DELETE body
*/
 
DELETE_BODY = ;
   .B ;
   [ ( 'COMG/ROUP'|'CG' ) ASSIGNMENT_OP ] ;
   CG_FID
 
%EJECT ;
/*D*
   NAME:          DISPLAY_CMD
   DESCRIPTION:   Displays current information about a ComGroup.
*/
 
DISPLAY_CMD ( %DISPLAY_CMD ) = ;
   'DI/SPLAY' ;
   DISPLAY_BODY
 
 
/*
   DISPLAY body
*/
 
DISPLAY_BODY = ;
   [ .B [ ( 'COMG/ROUP'|'CG' ) ASSIGNMENT_OP ] CG_FID ] ;
   [ DISPLAY_OPTION_LIST ]
 
 
/*
   DISPLAY option list
*/
 
DISPLAY_OPTION_LIST ( %DISPLAY_OPTION_LIST ) = ;
   '(' ;
   ( DISPLAY_ALL_OPTION | < ',', DISPLAY_OPTION > ) ;
   [ ')' ]
 
/*
   DISPLAY_ALL option
*/
 
DISPLAY_ALL_OPTION = ;
   ALL_OPT
 
 
/*
   DISPLAY option possiblilities
*/
 
DISPLAY_OPTION = ;
   {  CGCP_OPT ;
    | DCB_OPT ;
    | EVENT_OPT ;
    | FPRGS_OPT ;
    | FSTA_OPT ;
    | HOLDSTA_OPT ;
    | JRNLFID_OPT ;
    | JRNLSTA_OPT ;
    | QLIST_OPT ;
    | SETSTA_OPT ;
    | STALIST_OPT ;
    | STATS_OPT ;
    | TYPLIST_OPT ;
   }
 
 
/*
   DISPLAY option definitions
*/
 
ALL_OPT ( %ALL_OPT ) = ;
   'A/LL'
 
CGCP_OPT ( %CGCP_OPT ) = ;
   'C/GCP'
 
DCB_OPT ( %DCB_OPT ) = ;
   'D/CB'
 
EVENT_OPT ( %EVENT_OPT ) = ;
   'E/VENTS'
 
FPRGS_OPT ( %FPRGS_OPT ) = ;
    'FP/RGS'
 
FSTA_OPT ( %FSTA_OPT ) = ;
   ( 'FUNC/TIONSTA' | 'FS/TA' )
 
HOLDSTA_OPT ( %HOLDSTA_OPT ) = ;
   'H/OLDSTA'
 
JRNLFID_OPT ( %JRNLFID_OPT ) = ;
   'JRNLF/ID'
 
JRNLSTA_OPT ( %JRNLSTA_OPT ) = ;
   'JRNLS/TA'
 
QLIST_OPT ( %QLIST_OPT ) = ;
   'QL/IST'
 
SETSTA_OPT ( %SETSTA_OPT ) = ;
   'SE/TSTA'
 
STALIST_OPT ( %STALIST_OPT ) = ;
   'STAL/IST'
 
STATS_OPT ( %STATS_OPT ) = ;
   'STAT/S'
 
TYPLIST_OPT ( %TYPLIST_OPT ) = ;
   'TYPL/IST'
 
 
%EJECT ;
/*D*
   NAME:          MODIFY_CMD
   DESCRIPTION:   Changes the parameters of a ComGroup.
*/
 
MODIFY_CMD ( %MODIFY_CMD ) = ;
   'MOD/IFY' ;
   MODIFY_BODY
 
 
/*
   MODIFY body
*/
 
MODIFY_BODY = ;
   [ .B [ ( 'COMG/ROUP'|'CG' ) ASSIGNMENT_OP ] CG_FID ] ;
   MODIFY_OPTION_LIST
 
 
/*
   MODIFY option list
*/
 
MODIFY_OPTION_LIST ( %MODIFY_OPTION_LIST ) = ;
   '(' ;
   < ',', MODIFY_OPTION > ;
   [ ')' ]
 
/*
   MODIFY option possibilities
*/
 
MODIFY_OPTION = ;
   ( ;
/*
      ACCESS_OPT ;
*/
/*|*/ CGCP_OPT ;
  |   EVENT_OPT ;
    | HOLDSTA_OPT ;
    | JRNLFID_OPT ;
    | JRNLSTA_OPT ;
    | QLIST_OPT ;
    | SETSTA_OPT ;
    | SIZE_OPT ;
    | STALIST_OPT ;
    | TYPLIST_OPT ;
   )
 
 
/*
   MODIFY option definitions
*/
 
ACCESS_OPT ( %ACCESS_OPT ) = ;
   'AC/CESS'
 
SIZE_OPT ( %SIZE_OPT ) = ;
   'SI/ZE'
 
/***
   other option definitions are same as previously defined DISPLAY options
 
CGCP_OPT ( %CGCP_OPT ) = ;
   'C/GCP'
 
EVENT_OPT ( %EVENT_OPT ) = ;
   'E/VENTS'
 
HOLDSTA_OPT ( %HOLDSTA_OPT ) = ;
   'H/OLDSTA'
 
JRNLFID_OPT ( %JRNLFID_OPT ) = ;
   'JRNLF/ID'
 
JRNLSTA_OPT ( %JRNLSTA_OPT ) = ;
   'JRNLS/TA'
 
QLIST_OPT ( %QLIST_OPT ) = ;
   'QL/IST'
 
SETSTA_OPT ( %SETSTA_OPT ) = ;
   'SE/TSTA'
 
STALIST_OPT ( %STALIST_OPT ) = ;
   'STAL/IST'
 
TYPLIST_OPT ( %TYPLIST_OPT ) = ;
   'TYPL/IST
***/
 
%EJECT ;
/*D*
   NAME:          SELECT_CMD
   DESCRIPTION:   Selects a ComGroup file.
*/
 
SELECT_CMD ( %SELECT_CMD ) = ;
   'SEL/ECT' ;
   SELECT_BODY
 
 
/*
   SELECT body
*/
 
SELECT_BODY = ;
   SELECT_OPTION_LIST
 
 
/*
   SELECT option list
*/
 
SELECT_OPTION_LIST ( %SELECT_OPTION_LIST ) = ;
   ( '(' | .B ) ;
   < ',', SELECT_OPTION > ;
   [ ')' ]
 
 
/*
   SELECT option possibilities
*/
 
SELECT_OPTION = ;
   {  AUFORCE_OPT ;
    | CG_OPT ;
    | DEBUG_OPT ;
    | MYSTATION_OPT ;
   }
 
 
/*
   SELECTION option definitions
*/
 
AUFORCE_OPT ( %AUFORCE_OPT ) = ;
   'AU/FORCE' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CG_OPT ( %CG_OPT ) = ;
   ( 'COMG/ROUP'|'CG' ) ;
   ASSIGNMENT_OP ;
   CG_FID
 
DEBUG_OPT ( %DEBUG_OPT ) = ;
   'D/EBUG' ;
   ASSIGNMENT_OP ;
   YES_NO
 
MYSTATION_OPT ( %MYSTATION_OPT ) = ;
   ( 'M/YSTATION'|'STA/TION' ) ;
   ASSIGNMENT_OP ;
   STATION
 
%EJECT ;
/*D*
   NAME:          ABORTSTA_CMD
   DESCRIPTION:   Aborts a LARKETTE ghost station
*/
 
ABORTSTA_CMD ( %ABORTSTA_CMD ) = ;
   'ABO/RT' ;
   ABORTSTA_BODY
 
 
/*
   ABORTSTA body
*/
 
ABORTSTA_BODY = ;
   .B ;
   [ 'STA/TION' ASSIGNMENT_OP ] ;
   STATION
 
%EJECT ;
/*D*
   NAME:          CONNECTSTA_CMD
   DESCRIPTION:   Connects (opens) a LARKETTE ghost station
*/
 
CONNECTSTA_CMD ( %CONNECTSTA_CMD ) = ;
   'CON/NECT' ;
   CONNECTSTA_BODY
 
 
/*
   CONNECTSTA body
*/
 
CONNECTSTA_BODY = ;
   .B ;
   [ 'STA/TION' ASSIGNMENT_OP ] ;
   STATION
 
%EJECT ;
/*D*
   NAME:       DEFINESTA_CMD
   DESCRIPTION:   Defines the function of a LARKETTE ghost station
*/
 
DEFINESTA_CMD ( %DEFINESTA_CMD ) = ;
   'DEF/INE' ;
   DEFINESTA_BODY
 
 
/*
   DEFINESTA body
*/
 
DEFINESTA_BODY = ;
   .B ;
   [ 'STA/TION' ASSIGNMENT_OP ] ;
   STATION ;
   DEFINESTA_OPTION_LIST
 
 
/*
   DEFINESTA option list
*/
 
DEFINESTA_OPTION_LIST ( %DEFINESTA_OPTION_LIST ) = ;
   '(' ;
   < ',', DEFINESTA_OPTION > ;
   [ ')' ]
 
 
/*
   DEFINESTA option possibilities
*/
 
DEFINESTA_OPTION = ;
   {  ADMIN_OPT ;
    | CONTROL_OPT ;
    | READ_STATION_OPT ;
    | READ_OPT ;
    | SETSTA_OPT ;
    | WRITE_STATION_OPT ;
    | WRITE_OPT ;
   }
 
 
/*
   DEFINESTA option definitions
*/
 
ADMIN_OPT ( %ADMIN_OPT ) = ;
   'A/DMINISTRATION'
 
CONTROL_OPT ( %CONTROL_OPT ) = ;
   'C/ONTROL'
 
READ_OPT ( %READ_OPT ) = ;
   'R/EAD'
 
READ_STATION_OPT ( %READ_STATION_OPT ) = ;
   'RS/TATION'
 
WRITE_OPT ( %WRITE_OPT ) = ;
   'W/RITE'
 
WRITE_STATION_OPT ( %WRITE_STATION_OPT ) = ;
   'WS/TATION'
 
/***
   option definition same as previously defined DISPLAY option
 
SETSTA_OPT ( %SETSTA_OPT ) = ;
   'SE/TSTA'
 
***/
 
%EJECT ;
/*D*
   NAME:          DISCONNECTSTA_CMD
   DESCRIPTION:   Disconnects (closes) a LARKETTE ghost station
*/
 
DISCONNECTSTA_CMD ( %DISCONNECTSTA_CMD ) = ;
   'DISC/ONNECT' ;
   DISCONNECTSTA_BODY
 
 
/*
   DISCONNECTSTA body
*/
 
DISCONNECTSTA_BODY = ;
   .B ;
   [ 'STA/TION' ASSIGNMENT_OP ] ;
   STATION
 
%EJECT ;
/*D*
   NAME:          LOADFPRGSTA_CMD
   DESCRIPTION:   Converts a terminal station to an FPRG station and loads the
                  FPRG
*/
 
/*
FPRGSTA_OPT ( %FPRGSTA_OPT ) = ;
   'FPRGSTA' ;
   ASSIGNMENT_OP ;
   STATION
*/
 
%EJECT;
/*D*
   NAME:          RESUMESTA_CMD
   DESCRIPTION:   Resumes a suspended LARKETTE ghost station
*/
 
RESUMESTA_CMD ( %RESUMESTA_CMD ) = ;
   'RES/UME' ;
   RESUMESTA_BODY
 
 
/*
   RESUMESTA body
*/
 
RESUMESTA_BODY = ;
   .B ;
   [ 'STA/TION' ASSIGNMENT_OP ] ;
   STATION
 
%EJECT ;
/*D*
   NAME:          STATUSOFSTA_CMD
   DESCRIPTION:   Requests the status of a LARKETTE ghost station
*/
 
STATUSOFSTA_CMD ( %STATUSOFSTA_CMD ) = ;
   'STA/TUS' ;
   STATUSOFSTA_BODY
 
 
/*
   STATUSOFSTA body
*/
 
STATUSOFSTA_BODY = ;
   .B ;
   [ 'STA/TION' ASSIGNMENT_OP ] ;
   STATION
 
%EJECT ;
/*D*
   NAME:          SUSPENDSTA_CMD
   DESCRIPTION:   Suspends the operation of a LARKETTE ghost station
*/
 
SUSPENDSTA_CMD ( %SUSPENDSTA_CMD ) = ;
   'SUS/PEND' ;
   SUSPENDSTA_BODY
 
 
/*
   SUSPENDSTA body
*/
 
SUSPENDSTA_BODY = ;
   .B ;
   [ 'STA/TION' ASSIGNMENT_OP ] ;
   STATION
 
%EJECT ;
/*D*
   NAME:          CLOSE_CMD
   DESCRIPTION:   Closes a station previously opened to the comgroup.
*/
 
CLOSE_CMD ( %CLOSE_CMD ) = ;
   'CLO/SE' ;
   CLOSE_BODY
 
 
/*
   CLOSE body
*/
 
CLOSE_BODY = ;
   CLOSE_OPTION_LIST
 
 
/*
   CLOSE option list
*/
 
CLOSE_OPTION_LIST ( %CLOSE_OPTION_LIST ) = ;
   [  ( '(' | .B ) ;
   < ',', CLOSE_OPTION > ;
   [ ')' ]  ]
 
 
/*
   CLOSE option possibilities
*/
 
CLOSE_OPTION = ;
   {  MYSTATION_OPT ;
   }
 
 
%EJECT ;
/*D*
   NAME:          OPEN_CMD
   DESCRIPTION:   Opens a station to the comgroup.
*/
 
OPEN_CMD ( %OPEN_CMD ) = ;
   'OPE/N' ;
   OPEN_BODY
 
 
/*
   OPEN body
*/
 
OPEN_BODY = ;
   [ .B [ ( 'COMG/ROUP'|'CG' ) ASSIGNMENT_OP ] CG_FID ] ;
   OPEN_OPTION_LIST
 
 
/*
   OPEN option list
*/
 
OPEN_OPTION_LIST ( %OPEN_OPTION_LIST ) = ;
   '(' ;
   < ',', OPEN_OPTION > ;
   [ ')' ]
 
 
/*
   OPEN option possibilities
*/
 
OPEN_OPTION = ;
   {  AU_OPT ;
    | JOURNALBP_OPT ;
    | MYSTATION_OPT ;
   }
 
 
/*
   OPEN option definitions
*/
 
AU_OPT ( %AU_OPT ) = ;
   'AU' ;
   ASSIGNMENT_OP ;
   YES_NO
 
JOURNALBP_OPT ( %JOURNALBP_OPT ) = ;
   'J/OURNALBYPASS' ;
   ASSIGNMENT_OP ;
   YES_NO
 
%EJECT ;
/*D*
   NAME:          ACTIVATE_CMD
   DESCRIPTION:   Activates station(s) on the comgroup.
*/
 
ACTIVATE_CMD ( %ACTIVATE_CMD ) = ;
   'ACT/IVATE' ;
   ACTIVATE_BODY
 
 
/*
   ACTIVATE body
*/
 
ACTIVATE_BODY = ;
   [ .B [ ( 'COMG/ROUP'|'CG' ) ASSIGNMENT_OP ] CG_FID ] ;
   ACTIVATE_OPTION_LIST
 
 
/*
   ACTIVATE option list
*/
 
ACTIVATE_OPTION_LIST ( %ACTIVATE_OPTION_LIST ) = ;
   '(' ;
   < ',', ACTIVATE_OPTION > ;
   [ ')' ]
 
 
/*
   ACTIVATE option possibilities
*/
 
ACTIVATE_OPTION = ;
   {  ABTET_OPT ;
    | ABTREAD_OPT ;
    | ATTR_OPT ;
    | CGCP_BIN_PARM ;
    | CGCP_BP_PARM ;
    | CGCP_CONT_PARM ;
    | CGCP_MAXRD_PARM ;
    | CGCP_MINRD_PARM ;
    | CGCP_REREAD_PARM ;
    | CGCP_TRANS_PARM ;
    | CGCP_VFC_PARM ;
    | CONNECTRES_OPT ;
    | FLUSH_OPT ;
    | RES_OPT ;
    | STATION_OPT ;
   }
 
 
/*
   ACTIVATE option definitions
*/
 
ABTET_OPT ( %ABTET_OPT ) = ;
   'ABTE/T' ;
   ASSIGNMENT_OP ;
   YES_NO
 
ABTREAD_OPT ( %ABTREAD_OPT ) = ;
   'ABTR/EAD' ;
   ASSIGNMENT_OP ;
   TYC
 
ATTR_OPT ( %ATTR_OPT ) = ;
   'ATTR' ;
   ASSIGNMENT_OP ;
   ATTRIBUTE
 
CONNECTRES_OPT ( %CONNECTRES_OPT ) = ;
   'CONN/ECTRES' ;
   ASSIGNMENT_OP ;
   YES_NO
 
FLUSH_OPT ( %FLUSH_OPT ) = ;
   'FL/USH' ;
   ASSIGNMENT_OP ;
   YES_NO
 
RES_OPT ( %RES_OPT ) = ;
   'RES' ;
   ASSIGNMENT_OP ;
   RESOURCE
 
STATION_OPT ( %STATION_OPT ) = ;
   'STA/TION' ;
   ASSIGNMENT_OP ;
   STATION_WILDC
 
%EJECT ;
/*D*
   NAME:          DEACTIVATE_CMD
   DESCRIPTION:   Deactivates station(s) on the comgroup.
*/
 
DEACTIVATE_CMD ( %DEACTIVATE_CMD ) = ;
   'DEA/CTIVATE' ;
   DEACTIVATE_BODY
 
 
/*
   DEACTIVATE body
*/
 
DEACTIVATE_BODY = ;
   [ .B [ ( 'COMG/ROUP'|'CG' ) ASSIGNMENT_OP ] CG_FID ] ;
   DEACTIVATE_OPTION_LIST
 
 
/*
   DEACTIVATE option list
*/
 
DEACTIVATE_OPTION_LIST ( %DEACTIVATE_OPTION_LIST ) = ;
   '(' ;
   < ',', DEACTIVATE_OPTION > ;
   [ ')' ]
 
 
/*
   DEACTIVATE option possibilities
*/
 
DEACTIVATE_OPTION = ;
   {  DISCONNECT_OPT ;
    | DSCGO_OPT ;
    | FLUSH_OPT ;
    | STATION_OPT ;
   }
 
 
/*
   DEACTIVATE option definitions
*/
 
DISCONNECT_OPT ( %DISCONNECT_OPT ) = ;
   'DISC/ONNECT' ;
   ASSIGNMENT_OP ;
   YES_NO
 
DSCGO_OPT ( %DSCGO_OPT ) = ;
   'DSCGO' ;
   ASSIGNMENT_OP ;
   YES_NO
 
%EJECT ;
/*D*
   NAME:          SETPROFILE_CMD
   DESCRIPTION:   Sets the profile for the provided terminal station.
*/
 
SETPROFILE_CMD ( %SETPROFILE_CMD ) = ;
   'SETP/ROFILE' ;
   SETPROFILE_BODY
 
 
/*
   SETPROFILE body
*/
 
SETPROFILE_BODY = ;
   [ .B [ ( 'COMG/ROUP'|'CG' ) ASSIGNMENT_OP ] CG_FID ] ;
   SETPROFILE_OPTION_LIST
 
 
/*
   SETPROFILE option list
*/
 
SETPROFILE_OPTION_LIST ( %SETPROFILE_OPTION_LIST ) = ;
   '(' ;
   < ',', SETPROFILE_OPTION > ;
   [ ')' ]
 
 
/*
   SETPROFILE option possibilities
*/
 
SETPROFILE_OPTION = ;
   {  PROFILE_OPT ;
    | STATION_OPT ;
   }
 
 
/*
   SETPROFILE option definitions
*/
 
PROFILE_OPT ( %PROFILE_OPT ) = ;
   'PRO/FILE' ;
   ASSIGNMENT_OP ;
   PROFILE
 
%EJECT ;
/*D*
   NAME:          NULL_CMD
   DESCRIPTION:   Allows LARK to regain control from XUG when a <CR> is typed.
*/
 
NULL_CMD ( %NULL_CMD ) = ;
   .END
 
 
%EJECT ;
/*D*
   NAME:          EXIT_CMD
   DESCRIPTION:   Allows LARK to gain control on the exit so things can be closed
                  down properly.
*/
 
EXIT_CMD ( %EXIT_CMD ) = ;
   (  'E/XIT' ;
    | 'E/ND' ;
    | 'Q/UIT' ;
    | 'X/IT' ;
   )
 
%EJECT;
/*D*
   NAME:         STARTFPRG_CMD
   DESCRIPTION: Starts an FPRG
*/
 
STARTFPRG_CMD  ( %STARTFPRG_CMD ) = ;
     ('STARTF/PRG' | 'SF/PRG') ;
     STARTFPRG_BODY
 
/*
   STARTFPRG body
*/
 
STARTFPRG_BODY = ;
     [ .B [ ( 'COMG/ROUP' | 'CG') ASSIGNMENT_OP ] CG_FID ] ;
     STARTFPRG_OPTION_LIST
 
/*
  STARTFPRG option list
*/
 
STARTFPRG_OPTION_LIST ( %STARTFPRG_OPTION_LIST ) = ;
     '(' ;
     < ',', STARTFPRG_OPTION > ;
     [ ')' ]
 
/*
  STARTFPRG options
*/
 
STARTFPRG_OPTION = ;
     {   FPRG_OPT ;
      |  FEP_OPT ;
      |  DEVICEPRESENT_OPT ;
      |  PURESTATION_OPT ;
      |  FPRG_STATION_OPT ;
      |  DEBUG_OPT ;
      |  USEAUACCT_OPT ;
     }
 
/*
   STARTFPRG option definitions
*/
 
FPRG_OPT ( %FPRG_OPT ) = ;
     'FP/RG' ;
     ASSIGNMENT_OP ;
     FPRG_FID
 
FEP_OPT ( %FEP_OPT ) = ;
     'FEP' ;
     ASSIGNMENT_OP ;
     FEP_NAME
 
DEVICEPRESENT_OPT ( %DEVICEPRESENT_OPT ) = ;
     ( 'DEVICEPR/ESENT'|'DEVP/RES' ) ;
     ASSIGNMENT_OP ;
     YES_NO
 
USEAUACCT_OPT ( %USEAUACCT_OPT ) = ;
       'USEAU/ACCT' ;
     ASSIGNMENT_OP ;
     YES_NO
 
 
PURESTATION_OPT ( %PURESTATION_OPT ) = ;
     ( 'PURESTA/TION' | 'PSTA/TION' ) ;
     ASSIGNMENT_OP ;
     FPRG_STATION
 
 
FPRG_STATION_OPT ( %FPRG_STATION_OPT ) = ;
     'STA/TION' ;
     ASSIGNMENT_OP ;
     FPRG_STATION
 
/*
    Debug Opt is defined under Select Cmd
*/
%EJECT ;
 
/*D*
    NAME:          PAUSE_CMD
    DESCRIPTION:   Calls M$WAIT to make LARK wait
*/
 
PAUSE_CMD ( %PAUSE_CMD ) = ;
    'PA/USE' ;
    .B      ;
     PAUSE_TIME
 
/*
    PUASE time
*/
PAUSE_TIME ( %PAUSE_TIME ) = ;
   .DEC
 
 
%EJECT ;
/*
   NAME:    STOPFPRG_CMD
   DESCRIPTION: Stops an FPRG
*/
 
STOPFPRG_CMD ( %STOPFPRG_CMD ) = ;
   ( 'STOPF/PRG' | 'STF/PRG' ) ;
   STOPFPRG_OPTION_LIST
 
/*
   STOPFPRG option list
*/
 
STOPFPRG_OPTION_LIST ( %STOPFPRG_OPTION_LIST ) = ;
    '(' ;
    < ',' , STOPFPRG_OPTION > ;
    [ ')' ]
 
/*
   STOPFPRG options
*/
 
STOPFPRG_OPTION = ;
    {   DISCONNECT_OPT ;
      | STOP_STATION_OPT ;
    }
 
/*
   STOPFPRG option definitions
*/
 
 
STOP_STATION_OPT ( %STOP_STATION_OPT ) = ;
    'STA/TION' ;
    ASSIGNMENT_OP ;
    STATION
 
%EJECT ;
/*
   String Expressions
*/
 
ACCT_NAME_WILDC ( %ACCT_NAME_WILDC ) = ;
   .ALPHA8+'-_$?:0123456789'
 
CG_FID ( %CG_FID ) = ;
   .FID
 
FEP_NAME ( %FEP_NAME ) = ;
   'FE' .DEC2
 
FPRG_FID ( %FPRG_FID ) = ;
   .FID
 
FPRG_STATION ( %FPRG_STATION ) = ;
   .ALPHA8+'_&:$-*0123456789'
 
JOURNAL_FID ( %JOURNAL_FID ) = ;
   .FID
 
LOGON_ACCT ( %LOGON_ACCT ) = ;
   .ALPHA8+'-_$:0123456789'
 
LOGON_NAME ( %LOGON_NAME ) = ;
   .ALPHA12+'-_$:0123456789'
 
LOGON_PASSWORD ( %LOGON_PASSWORD ) = ;
   .ALPHA8+'-_$:0123456789'
 
MSG_FID ( %MSG_FID ) = ;
   .FID
 
MSGTYPE ( %MSGTYPE ) = ;
   .ALPHA8+'_&:$-*0123456789'
 
MSGTYPE_WILDC ( %MSGTYPE_WILDC ) = ;
   .ALPHA8+'_&:$-?*0123456789'
 
PROFILE ( %PROFILE ) = ;
   .ALPHA11+'-_$:0123456789'
 
RESOURCE ( %RESOURCE ) = ;
   .ANUMERIC4
 
STATION ( %STATION ) = ;
   .ALPHA8+'_&:$-*0123456789'
 
STATION_WILDC ( %STATION_WILDC ) = ;
   .ALPHA8+'_&:$-?*0123456789'
 
/*
   Assignment Operator
*/
 
ASSIGNMENT_OP = ;
   [ .B ] ;
   '=' ;
   [ .B ]
 
/*
   Option Value Groups
*/
 
YES_NO = ;
   (  YES ;
    | NO ;
   )
 
ACT_DEACT = ;
   (  ACTIVATE ;
    | DEACTIVATE ;
    | NOCHANGE ;
   )
 
ACT_DEACT_DISCON = ;
   (  ACTIVATE ;
    | DEACTIVATE ;
    | DISCONNECT ;
    | NOCHANGE ;
   )
 
ERR_NEW = ;
   (  ERROR ;
    | NEWFILE ;
   )
 
NEVER_NUMDAYS = ;
   (  NEVER ;
    | NUMDAYS ;
   )
 
/*
   Possible Option Values
*/
 
ACTIVATE ( %ACTIVATE ) = ;
   'A/CTIVATE'
 
ATTRIBUTE ( %ATTRIBUTE ) = ;
   .OCTAL6
 
DEACTIVATE ( %DEACTIVATE ) = ;
   'DE/ACTIVATE'
 
DISCONNECT ( %DISCONNECT ) = ;
   'DI/SCONNECT'
 
ERROR ( %ERROR ) = ;
   'E/RROR'
 
LENGTH ( %LENGTH ) = ;
   .DEC4
 
NEVER ( %NEVER ) = ;
   'N/EVER'
 
NEWFILE ( %NEWFILE ) = ;
   'N/EWFILE'
 
NO ( %NO ) = ;
   'N/O'
 
NOCHANGE ( %NOCHANGE ) = ;
   'N/C'
 
NUMACTIVE ( %NUMACTIVE ) = ;
   .DEC
 
NUMBLOCKS ( %NUMBLOCKS ) = ;
   .DEC3
 
NUMBYTES ( %NUMBYTES ) = ;
   .DEC4
 
NUMDAYS ( %NUMDAYS ) = ;
   .DEC
 
NUMGRANS ( %NUMGRANS ) = ;
   .DEC
 
NUMMINUTES ( %NUMMINUTES ) = ;
   .DEC3
 
NUMOPS ( %NUMOPS ) = ;
   .DEC6
 
NUMPAGES ( %NUMPAGES ) = ;
   .DEC4
 
NUMPRIO ( %NUMPRIO ) = ;
   .DEC3
 
NUMREADS ( %NUMREADS ) = ;
   .DEC
 
NUMSECONDS ( %NUMSECONDS ) = ;
   .DEC
 
NUMWARN ( %NUMWARN ) = ;
   .DEC5
 
PERCENTAGE ( %PERCENTAGE ) = ;
   .DEC2
 
TYC ( %TYC ) = ;
   .OCTAL12
 
YES ( %YES ) = ;
   'Y/ES'
 
/*
   Subcommand possibilities
*/
 
ADD_SUBCMD ( %ADD_SUBCMD ) = ;
   'A/DD'
 
CHANGE_SUBCMD ( %CHANGE_SUBCMD ) = ;
   'C/HANGE'
 
DELETE_SUBCMD ( %DELETE_SUBCMD ) = ;
   'DEL/ETE'
 
EXIT_SUBCMD ( %EXIT_SUBCMD ) = ;
   (  'EX/IT' ;
    | 'E/ND' ;
    | 'Q/UIT' ;
    | 'X/IT' ;
   )
 
%EJECT ;
/*D*
   NAME:          CGCP_MOD_PARMS
   DESCRIPTION:   CGCP_MOD_PARMS is the root of the syntax description for the
                  CGCP_MOD subcommand language.  It's purpose is to break down
                  the parameters provided to modify the CGCP parameters.
*/
 
CGCP_MOD_PARMS ( D ) = ;
   (  CGCP_AUCONDCB_PARM ;
    | CGCP_AUCONTERM_PARM ;
    | CGCP_AUDCONDCB_PARM ;
    | CGCP_AUDCONTERM_PARM ;
    | CGCP_AUTORCVR_PARM ;
    | CGCP_BIGMXT_PARM ;
    | CGCP_BIN_PARM ;
    | CGCP_BP_PARM ;
    | CGCP_CARRYOSTA_PARM ;
    | CGCP_CONMSG_PARM ;
    | CGCP_CONT_PARM ;
    | CGCP_DATAPGS_PARM ;
    | CGCP_DCBCONAU_PARM ;
    | CGCP_DCBCONLGL_PARM ;
    | CGCP_DCBCONNAU_PARM ;
    | CGCP_DCBCONWA_PARM ;
    | CGCP_DEFERBLKS_PARM ;
    | CGCP_DISKWARN_PARM ;
    | CGCP_DMTYP_PARM ;
    | CGCP_DRML_PARM ;
    | CGCP_DSCREQ_PARM ;
    | CGCP_INPUT_PARM ;
    | CGCP_JOURNAL_PARM ;
    | CGCP_MAXMC_PARM ;
    | CGCP_MAXPG_PARM ;
    | CGCP_MAXRD_PARM ;
    | CGCP_MEMWARN_PARM ;
    | CGCP_MEMWARNP_PARM ;
    | CGCP_MINPG_PARM ;
    | CGCP_MINRD_PARM ;
    | CGCP_MXACT_PARM ;
    | CGCP_OUTPUT_PARM ;
    | CGCP_QRML_PARM ;
    | CGCP_RAS_PARM ;
    | CGCP_REDUNDANT_PARM ;
    | CGCP_REREAD_PARM ;
    | CGCP_SECURE_PARM ;
    | CGCP_SMD_PARM ;
    | CGCP_STAPRIO_PARM ;
    | CGCP_TERMCONAU_PARM ;
    | CGCP_TERMCONLGL_PARM ;
    | CGCP_TERMCONNAU_PARM ;
    | CGCP_TMTYP_PARM ;
    | CGCP_TRANS_PARM ;
    | CGCP_TRMRDSIZ_PARM ;
    | CGCP_TYPPRIO_PARM ;
    | CGCP_UNLAMSG_PARM ;
    | CGCP_VFC_PARM ;
    | CGCP_WAS_PARM ;
    | CGCP_WRITETIME_PARM ;
    | CGCP_XSTALGL_PARM ;
    | CGCP_XTYPLGL_PARM ;
    | EXIT_SUBCMD ;
   ) ;
   .END
 
/*
   CGCP MOD parameter definitions
*/
 
CGCP_AUCONDCB_PARM ( %CGCP_AUCONDCB_PARM  ) = ;
   'AUCONDCB' ;
   ASSIGNMENT_OP ;
   ACT_DEACT_DISCON
 
CGCP_AUCONTERM_PARM ( %CGCP_AUCONTERM_PARM  ) = ;
   'AUCONTERM' ;
   ASSIGNMENT_OP ;
   ACT_DEACT_DISCON
 
CGCP_AUDCONDCB_PARM ( %CGCP_AUDCONDCB_PARM  ) = ;
   'AUDCONDCB' ;
   ASSIGNMENT_OP ;
   ACT_DEACT_DISCON
 
CGCP_AUDCONTERM_PARM ( %CGCP_AUDCONTERM_PARM  ) = ;
   'AUDCONTERM' ;
   ASSIGNMENT_OP ;
   ACT_DEACT_DISCON
 
CGCP_AUTORCVR_PARM ( %CGCP_AUTORCVR_PARM  ) = ;
   'AUTORCVR' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_BIGMXT_PARM ( %CGCP_BIGMXT_PARM  ) = ;
   'BIGMXT' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_BIN_PARM ( %CGCP_BIN_PARM  ) = ;
   'BIN' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_BP_PARM ( %CGCP_BP_PARM  ) = ;
   'BP' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_CARRYOSTA_PARM ( %CGCP_CARRYOSTA_PARM  ) = ;
   'CARRYOSTA' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_CONMSG_PARM ( %CGCP_CONMSG_PARM  ) = ;
   'CONMSG' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_CONT_PARM ( %CGCP_CONT_PARM  ) = ;
   'CONT' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_DATAPGS_PARM ( %CGCP_DATAPGS_PARM  ) = ;
   'DATAPGS' ;
   ASSIGNMENT_OP ;
   PERCENTAGE
 
CGCP_DCBCONAU_PARM ( %CGCP_DCBCONAU_PARM  ) = ;
   'DCBCONAU' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_DCBCONLGL_PARM ( %CGCP_DCBCONLGL_PARM  ) = ;
   'DCBCONLGL' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_DCBCONNAU_PARM ( %CGCP_DCBCONNAU_PARM  ) = ;
   'DCBCONNAU' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_DCBCONWA_PARM ( %CGCP_DCBCONWA_PARM  ) = ;
   'DCBCONWA' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_DEFERBLKS_PARM ( %CGCP_DEFERBLKS_PARM  ) = ;
   'DEFERBLKS' ;
   ASSIGNMENT_OP ;
   NUMBLOCKS
 
CGCP_DISKWARN_PARM ( %CGCP_DISKWARN_PARM  ) = ;
   'DISKWARN' ;
   ASSIGNMENT_OP ;
   NUMWARN
 
CGCP_DMTYP_PARM ( %CGCP_DMTYP_PARM  ) = ;
   'DMTYP' ;
   ASSIGNMENT_OP ;
   MSGTYPE
 
CGCP_DRML_PARM ( %CGCP_DRML_PARM  ) = ;
   'DRML' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_DSCREQ_PARM ( %CGCP_DSCREQ_PARM  ) = ;
   'DSCREQ' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_INPUT_PARM ( %CGCP_INPUT_PARM  ) = ;
   'INPUT' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_JOURNAL_PARM ( %CGCP_JOURNAL_PARM  ) = ;
   'JOURNAL' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_MAXMC_PARM ( %CGCP_MAXMC_PARM  ) = ;
   'MAXMC' ;
   ASSIGNMENT_OP ;
   NUMBYTES
 
CGCP_MAXPG_PARM ( %CGCP_MAXPG_PARM  ) = ;
   'MAXPG' ;
   ASSIGNMENT_OP ;
   NUMPAGES
 
CGCP_MAXRD_PARM ( %CGCP_MAXRD_PARM  ) = ;
   'MAXRD' ;
   ASSIGNMENT_OP ;
   NUMREADS
 
CGCP_MEMWARN_PARM ( %CGCP_MEMWARN_PARM  ) = ;
   'MEMWARN' ;
   ASSIGNMENT_OP ;
   NUMWARN
 
CGCP_MEMWARNP_PARM ( %CGCP_MEMWARNP_PARM  ) = ;
   'MEMWARNP' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_MINPG_PARM ( %CGCP_MINPG_PARM  ) = ;
   'MINPG' ;
   ASSIGNMENT_OP ;
   NUMPAGES
 
CGCP_MINRD_PARM ( %CGCP_MINRD_PARM  ) = ;
   'MINRD' ;
   ASSIGNMENT_OP ;
   NUMREADS
 
CGCP_MXACT_PARM ( %CGCP_MXACT_PARM  ) = ;
   'MXACT' ;
   ASSIGNMENT_OP ;
   NUMACTIVE
 
CGCP_OUTPUT_PARM ( %CGCP_OUTPUT_PARM  ) = ;
   'OUTPUT' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_QRML_PARM ( %CGCP_QRML_PARM  ) = ;
   'QRML' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_RAS_PARM ( %CGCP_RAS_PARM  ) = ;
   'RAS' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_REDUNDANT_PARM ( %CGCP_REDUNDANT_PARM  ) = ;
   'REDUNDANT' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_REREAD_PARM ( %CGCP_REREAD_PARM  ) = ;
   'REREAD' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_SECURE_PARM ( %CGCP_SECURE_PARM  ) = ;
   'SECURE' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_SMD_PARM ( %CGCP_SMD_PARM  ) = ;
   'SMD' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_STAPRIO_PARM ( %CGCP_STAPRIO_PARM  ) = ;
   'STAPRIO' ;
   ASSIGNMENT_OP ;
   NUMPRIO
 
CGCP_TERMCONAU_PARM ( %CGCP_TERMCONAU_PARM  ) = ;
   'TERMCONAU' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_TERMCONLGL_PARM ( %CGCP_TERMCONLGL_PARM  ) = ;
   'TERMCONLGL' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_TERMCONNAU_PARM ( %CGCP_TERMCONNAU_PARM  ) = ;
   'TERMCONNAU' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_TMTYP_PARM ( %CGCP_TMTYP_PARM  ) = ;
   'TMTYP' ;
   ASSIGNMENT_OP ;
   MSGTYPE
 
CGCP_TRANS_PARM ( %CGCP_TRANS_PARM  ) = ;
   'TRANS' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_TRMRDSIZ_PARM ( %CGCP_TRMRDSIZ_PARM  ) = ;
   'TRMRDSIZ' ;
   ASSIGNMENT_OP ;
   NUMBYTES
 
CGCP_TYPPRIO_PARM ( %CGCP_TYPPRIO_PARM  ) = ;
   'TYPPRIO' ;
   ASSIGNMENT_OP ;
   NUMPRIO
 
CGCP_UNLAMSG_PARM ( %CGCP_UNLAMSG_PARM  ) = ;
   'UNLAMSG' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_VFC_PARM ( %CGCP_VFC_PARM  ) = ;
   'VFC' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_WAS_PARM ( %CGCP_WAS_PARM  ) = ;
   'WAS' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_WRITETIME_PARM ( %CGCP_WRITETIME_PARM  ) = ;
   'WRITETIME' ;
   ASSIGNMENT_OP ;
   NUMMINUTES
 
CGCP_XSTALGL_PARM ( %CGCP_XSTALGL_PARM  ) = ;
   'XSTALGL' ;
   ASSIGNMENT_OP ;
   YES_NO
 
CGCP_XTYPLGL_PARM ( %CGCP_XTYPLGL_PARM  ) = ;
   'XTYPLGL' ;
   ASSIGNMENT_OP ;
   YES_NO
 
%EJECT ;
/*D*
   NAME:          EVENT_MOD_PARMS
   DESCRIPTION:   EVENT_MOD_PARMS is the root of the syntax description for the
                  EVENT_MOD subcommand language.  It's purpose is to break down
                  the parameters provided to tell LARK what AU EVENTS to
                  report.
*/
 
EVENT_MOD_PARMS ( D ) = ;
   (  EVENT_DOPN_PARAM ;
    | EVENT_DCLS_PARAM ;
    | EVENT_TCON_PARAM ;
    | EVENT_TDSC_PARAM ;
    | EVENT_TBRK_PARAM ;
    | EVENT_UNLR_PARAM ;
    | EVENT_UNLH_PARAM ;
    | EVENT_UNLD_PARAM ;
    | EVENT_WARN_PARAM ;
    | EVENT_STDSC_PARAM ;
    | EVENT_STHLD_PARAM ;
    | EVENT_SFERR_PARAM ;
    | EVENT_STERR_PARAM ;
    | EVENT_SFEXT_PARAM ;
    | EVENT_SFSPA_PARAM ;
    | EVENT_STOKN_PARAM ;
    | EVENT_STACK_PARAM ;
    | EVENT_AUCON_PARAM ;
    | EVENT_AUDCON_PARAM ;
    | EVENT_FWCG_PARAM ;
    | EVENT_JNLD_PARAM ;
    | EVENT_TDRQ_PARAM ;
    | EVENT_FPEXIT_PARAM ;
    | EVENT_FPABORT_PARAM ;
    | EVENT_FPLDTRC_PARAM ;
    | EVENT_ALL_PARAM ;
    | EXIT_SUBCMD ;
   ) ;
   .END
 
/*
   EVENT MOD parameter definitions
*/
 
EVENT_DOPN_PARAM    ( %EVENT_DOPN_PARAM  ) = ;
   'DOPN' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_DCLS_PARAM    ( %EVENT_DCLS_PARAM  ) = ;
   'DCLS' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_TCON_PARAM    ( %EVENT_TCON_PARAM  ) = ;
   'TCON' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_TDSC_PARAM    ( %EVENT_TDSC_PARAM  ) = ;
   'TDSC' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_TBRK_PARAM    ( %EVENT_TBRK_PARAM  ) = ;
   'TBRK' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_UNLR_PARAM    ( %EVENT_UNLR_PARAM  ) = ;
   'UNLR' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_UNLH_PARAM    ( %EVENT_UNLH_PARAM  ) = ;
   'UNLH' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_UNLD_PARAM    ( %EVENT_UNLD_PARAM  ) = ;
   'UNLD' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_WARN_PARAM    ( %EVENT_WARN_PARAM  ) = ;
   'WARN' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_STDSC_PARAM    ( %EVENT_STDSC_PARAM  ) = ;
   'STDSC' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_STHLD_PARAM    ( %EVENT_STHLD_PARAM  ) = ;
   'STHLD' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_SFERR_PARAM    ( %EVENT_SFERR_PARAM  ) = ;
   'SFERR' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_STERR_PARAM    ( %EVENT_STERR_PARAM  ) = ;
   'STERR' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_SFEXT_PARAM    ( %EVENT_SFEXT_PARAM  ) = ;
   'SFEXT' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_SFSPA_PARAM    ( %EVENT_SFSPA_PARAM  ) = ;
   'SFSPA' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_STOKN_PARAM    ( %EVENT_STOKN_PARAM  ) = ;
   'STOKN' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_STACK_PARAM    ( %EVENT_STACK_PARAM  ) = ;
   'STACK' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_AUCON_PARAM    ( %EVENT_AUCON_PARAM  ) = ;
   'AUCON' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_AUDCON_PARAM    ( %EVENT_AUDCON_PARAM  ) = ;
   'AUDCON' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_FWCG_PARAM    ( %EVENT_FWCG_PARAM  ) = ;
   'FWCG' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_JNLD_PARAM    ( %EVENT_JNLD_PARAM  ) = ;
   'JNLD' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_TDRQ_PARAM    ( %EVENT_TDRQ_PARAM  ) = ;
   'TDRQ' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_FPEXIT_PARAM    ( %EVENT_FPEXIT_PARAM  ) = ;
   'FPEXIT' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_FPABORT_PARAM    ( %EVENT_FPABORT_PARAM  ) = ;
   'FPABORT' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_FPLDTRC_PARAM    ( %EVENT_FPLDTRC_PARAM  ) = ;
   'FPLDTRC' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
EVENT_ALL_PARAM    ( %EVENT_ALL_PARAM  ) = ;
   'ALL' ;
   [ ASSIGNMENT_OP ;
   YES_NO ]
 
%EJECT
/*D*
   NAME:          HOLDSTA_MOD_CMDS
   DESCRIPTION:   HOLDSTA_MOD_CMDS is the root of the syntax description for the
                  HOLDSTA_MOD subcommand language.  It's purpose is to break down
                  the subcommands provided to modify the HOLDSTA.
*/
 
HOLDSTA_MOD_CMDS ( D ) = ;
   (  HOLDSTA_HAS_STA_CMD ;
    | HOLDSTA_NO_STA_CMD ;
   ) ;
   .END
 
/*
   HOLDSTA MOD subcommand definitions
*/
 
HOLDSTA_HAS_STA_CMD ( %HOLDSTA_HAS_STA_CMD ) = ;
   (  ADD_SUBCMD ;
    | CHANGE_SUBCMD ;
   ) ;
   .B ;
   [ 'STA/TION' ASSIGNMENT_OP ] ;
   STATION
 
HOLDSTA_NO_STA_CMD ( %HOLDSTA_NO_STA_CMD ) = ;
   (  DELETE_SUBCMD ;
    | EXIT_SUBCMD ;
   )
 
%EJECT ;
/*D*
   NAME:          JRNLFID_MOD_CMDS
   DESCRIPTION:   JRNLFID_MOD_CMDS is the root of the syntax description for the
                  JRNLFID_MOD subcommand language.  It's purpose is to break down
                  the subcommands provided to modify the JRNLFID.
*/
 
JRNLFID_MOD_CMDS ( D ) = ;
   (  JRNLFID_HAS_FID_CMD ;
    | JRNLFID_NO_FID_CMD ;
   ) ;
   .END
 
/*
   JRNLFID MOD subcommand definitions
*/
 
JRNLFID_HAS_FID_CMD ( %JRNLFID_HAS_FID_CMD ) = ;
   (  ADD_SUBCMD ;
    | CHANGE_SUBCMD ;
   ) ;
   .B ;
   [ 'FID' ASSIGNMENT_OP ] ;
   JOURNAL_FID
 
JRNLFID_NO_FID_CMD ( %JRNLFID_NO_FID_CMD ) = ;
   (  DELETE_SUBCMD ;
    | EXIT_SUBCMD ;
   )
 
%EJECT ;
/*D*
   NAME:          JRNLSTA_MOD_CMDS
   DESCRIPTION:   JRNLSTA_MOD_CMDS is the root of the syntax description for the
                  JRNLSTA_MOD subcommand language.  It's purpose is to break down
                  the subcommands provided to modify the JRNLSTA.
*/
 
JRNLSTA_MOD_CMDS ( D ) = ;
   (  JRNLSTA_HAS_STA_CMD ;
    | JRNLSTA_NO_STA_CMD ;
   ) ;
   .END
 
/*
   JRNLSTA MOD subcommand definitions
*/
 
JRNLSTA_HAS_STA_CMD ( %JRNLSTA_HAS_STA_CMD ) = ;
   (  ADD_SUBCMD ;
    | CHANGE_SUBCMD ;
   ) ;
   .B ;
   [ 'STA/TION' ASSIGNMENT_OP ] ;
   STATION
 
JRNLSTA_NO_STA_CMD ( %JRNLSTA_NO_STA_CMD ) = ;
   (  DELETE_SUBCMD ;
    | EXIT_SUBCMD ;
   )
 
%EJECT ;
/*D*
    NAME:           QLIST_MOD_PARMS
    DESCRIPTION:    QLIST_MOD_PARMS is the root of the syntax description for the
                    QLIST_MOD subcommand language.  It's purpose is to break down
                    the subcommand provided to define a anonymous queue list.
*/
 
QLIST_MOD_PARMS ( D ) = ;
   (  QLIST_OPTIONS_CMD ;
    | QLIST_EXIT_CMD ;
   ) ;
   .END
 
 
/*
   QLIST MOD subcommand definitions
*/
 
QLIST_OPTIONS_CMD ( %QLIST_OPTIONS_CMD ) = ;
   CHANGE_SUBCMD ;
   .B ;
   QLIST_STA_TYP_PARM ;
   Q_OPTION_LIST
 
QLIST_EXIT_CMD ( %QLIST_EXIT_CMD ) = ;
   EXIT_SUBCMD
 
 
/*
    QLIST MOD parameter definitions
*/
 
QLIST_STA_TYP_PARM ( %QLIST_STA_TYP_PARM ) = ;
   [ ( 'STA/TION' | 'MSG/TYPE' ) ASSIGNMENT_OP ] ;
   ( STATION | MSGTYPE )
 
 
/*
   Q option list
*/
 
Q_OPTION_LIST ( %Q_OPTION_LIST ) = ;
   '(' ;
   < ',', Q_OPTION > ;
   [ ')' ]
 
/*
   Q option possibilities
*/
 
Q_OPTION = ;
   {  MXACT_OPT ;
    | AUTORCVR_OPT ;
   }
 
/*
   Q option definitions
*/
 
MXACT_OPT ( %MXACT_OPT ) = ;
   'MXACT' ;
   ASSIGNMENT_OP ;
   NUMACTIVE
 
AUTORCVR_OPT ( %AUTORCVR_OPT ) = ;
   'AUTORCVR' ;
   ASSIGNMENT_OP ;
   YES_NO
 
 
%EJECT ;
/*D*
   NAME:          SETSTA_MOD_PARMS
   DESCRIPTION:   SETSTA_MOD_PARMS is the root of the syntax description for the
                  SETSTA_MOD subcommand language.  It's purpose is to break down
                  the parameters provided to modify the SETSTA parameters.
*/
 
SETSTA_MOD_PARMS ( D ) = ;
   (  SETSTA_ALLABSENT_PARM ;
    | SETSTA_ALLDCBS_PARM ;
    | SETSTA_ALLTRMS_PARM ;
    | SETSTA_ANYDCB_PARM ;
    | SETSTA_DIRONLY_PARM ;
    | SETSTA_EOFNONE_PARM ;
    | SETSTA_EOFONE_PARM ;
    | SETSTA_EOFTIME_PARM ;
    | SETSTA_ILATCH_PARM ;
    | SETSTA_ILOCK_PARM ;
    | SETSTA_IMSGTYP_PARM ;
    | SETSTA_ISTATION_PARM ;
    | SETSTA_MYSTATION_PARM ;
    | SETSTA_OLATCH_PARM ;
    | SETSTA_OLOCK_PARM ;
    | SETSTA_OMSGTYP_PARM ;
    | SETSTA_OSTATION_PARM ;
    | SETSTA_WAS_PARM ;
    | EXIT_SUBCMD ;
   ) ;
   .END
 
/*
   SETSTA MOD parameter definitions
*/
 
SETSTA_ALLABSENT_PARM ( %SETSTA_ALLABSENT_PARM ) = ;
   'ALLABSENT' ;
   ASSIGNMENT_OP ;
   YES_NO
 
SETSTA_ALLDCBS_PARM ( %SETSTA_ALLDCBS_PARM ) = ;
   'ALLDCBS' ;
   ASSIGNMENT_OP ;
   YES_NO
 
SETSTA_ALLTRMS_PARM ( %SETSTA_ALLTRMS_PARM ) = ;
   'ALLTRMS' ;
   ASSIGNMENT_OP ;
   YES_NO
 
SETSTA_ANYDCB_PARM ( %SETSTA_ANYDCB_PARM ) = ;
   'ANYDCB' ;
   ASSIGNMENT_OP ;
   YES_NO
 
SETSTA_DIRONLY_PARM ( %SETSTA_DIRONLY_PARM ) = ;
   'DIRONLY' ;
   ASSIGNMENT_OP ;
   YES_NO
 
SETSTA_EOFNONE_PARM ( %SETSTA_EOFNONE_PARM ) = ;
   'EOFNONE' ;
   ASSIGNMENT_OP ;
   YES_NO
 
SETSTA_EOFONE_PARM ( %SETSTA_EOFONE_PARM ) = ;
   'EOFONE' ;
   ASSIGNMENT_OP ;
   YES_NO
 
SETSTA_EOFTIME_PARM ( %SETSTA_EOFTIME_PARM ) = ;
   'EOFTIME' ;
   ASSIGNMENT_OP ;
   NUMSECONDS
 
SETSTA_ILATCH_PARM ( %SETSTA_ILATCH_PARM ) = ;
   'ILATCH' ;
   ASSIGNMENT_OP ;
   YES_NO
 
SETSTA_ILOCK_PARM ( %SETSTA_ILOCK_PARM ) = ;
   'ILOCK' ;
   ASSIGNMENT_OP ;
   YES_NO
 
SETSTA_IMSGTYP_PARM ( %SETSTA_IMSGTYP_PARM ) = ;
   'IMSGTYP' ;
   ASSIGNMENT_OP ;
   MSGTYPE
 
SETSTA_ISTATION_PARM ( %SETSTA_ISTATION_PARM ) = ;
   'ISTATION' ;
   ASSIGNMENT_OP ;
   STATION
 
SETSTA_MYSTATION_PARM ( %SETSTA_MYSTATION_PARM ) = ;
   'MYSTATION' ;
   ASSIGNMENT_OP ;
   STATION
 
SETSTA_OLATCH_PARM ( %SETSTA_OLATCH_PARM ) = ;
   'OLATCH' ;
   ASSIGNMENT_OP ;
   YES_NO
 
SETSTA_OLOCK_PARM ( %SETSTA_OLOCK_PARM ) = ;
   'OLOCK' ;
   ASSIGNMENT_OP ;
   YES_NO
 
SETSTA_OMSGTYP_PARM ( %SETSTA_OMSGTYP_PARM ) = ;
   'OMSGTYP' ;
   ASSIGNMENT_OP ;
   MSGTYPE
 
SETSTA_OSTATION_PARM ( %SETSTA_OSTATION_PARM ) = ;
   'OSTATION' ;
   ASSIGNMENT_OP ;
   STATION
 
SETSTA_WAS_PARM ( %SETSTA_WAS_PARM ) = ;
   'WAS' ;
   ASSIGNMENT_OP ;
   YES_NO
 
%EJECT ;
/*D*
    NAME:           SIZE_MOD_CMDS
    DESCRIPTION:    SIZE_MOD_CMDS is the root of the syntax description for the
                    SIZE_MOD subcommand language.  It's purpose is to break down
                    the subcommands provided to modify the comroup size.
*/
 
SIZE_MOD_CMDS ( D ) = ;
   (  SIZE_INCREASE_PARM ;
    | EXIT_SUBCMD ;
   ) ;
   .END
 
/*
    SIZE MOD parameter definitions
*/
 
SIZE_INCREASE_PARM ( %SIZE_INCREASE_PARM ) = ;
   'IN/CREASE' ;
   ASSIGNMENT_OP ;
   NUMGRANS
 
%EJECT ;
/*D*
    NAME:           STALIST_MOD_PARMS
    DESCRIPTION:    STALIST_MOD_PARMS is the root of the syntax description for the
                    STALIST_MOD subcommand language.  It's purpose is to break down
                    the subcommand provided to define a station of the station list.
*/
 
STALIST_MOD_PARMS ( D ) = ;
   (  STALIST_OPTIONS_CMD ;
    | STALIST_NO_OPTION_CMD ;
    | STALIST_EXIT_CMD ;
   ) ;
   .END
 
 
/*
   STALIST MOD subcommand definitions
*/
 
STALIST_OPTIONS_CMD ( %STALIST_OPTIONS_CMD ) = ;
   (  ADD_SUBCMD ;
    | CHANGE_SUBCMD ;
   ) ;
   .B ;
   STALIST_STATION_PARM ;
   [ STATION_OPTION_LIST ]
 
STALIST_NO_OPTION_CMD ( %STALIST_NO_OPTION_CMD ) = ;
   DELETE_SUBCMD ;
   .B ;
   STALIST_STATION_PARM
 
STALIST_EXIT_CMD ( %STALIST_EXIT_CMD ) = ;
   EXIT_SUBCMD
 
 
/*
    STALIST MOD parameter definitions
*/
 
STALIST_STATION_PARM ( %STALIST_STATION_PARM ) = ;
   [ 'STA/TION' ASSIGNMENT_OP ] ;
   STATION
 
 
/*
   STATION option list
*/
 
STATION_OPTION_LIST ( %STATION_OPTION_LIST ) = ;
   '(' ;
   < ',', STATION_OPTION > ;
   [ ')' ]
 
/*
   STATION option possibilities
*/
 
STATION_OPTION = ;
   {  AUP_OPT ;
    | PERM_OPT ;
    | PRIO_OPT ;
   }
 
/*
   STATION option definitions
*/
 
AUP_OPT ( %AUP_OPT ) = ;
   'AUP' ;
   ASSIGNMENT_OP ;
   YES_NO
 
PERM_OPT ( %PERM_OPT ) = ;
   'PERM' ;
   ASSIGNMENT_OP ;
   YES_NO
 
PRIO_OPT ( %PRIO_OPT ) = ;
   'PRIO' ;
   ASSIGNMENT_OP ;
   NUMPRIO
 
%EJECT ;
/*D*
    NAME:           TYPLIST_MOD_PARMS
    DESCRIPTION:    TYPLIST_MOD_PARMS is the root of the syntax description for the
                    TYPLIST_MOD subcommand language.  It's purpose is to break down
                    the subcommand provided to define a msgtype of the message type list.
*/
 
TYPLIST_MOD_PARMS ( D ) = ;
   (  TYPLIST_OPTIONS_CMD ;
    | TYPLIST_NO_OPTION_CMD ;
    | TYPLIST_EXIT_CMD ;
   ) ;
   .END
 
 
/*
   TYPLIST MOD subcommand definitions
*/
 
TYPLIST_OPTIONS_CMD ( %TYPLIST_OPTIONS_CMD ) = ;
   (  ADD_SUBCMD ;
    | CHANGE_SUBCMD ;
   ) ;
   .B ;
   TYPLIST_MSGTYP_PARM ;
   [ MSGTYP_OPTION_LIST ]
 
TYPLIST_NO_OPTION_CMD ( %TYPLIST_NO_OPTION_CMD ) = ;
   DELETE_SUBCMD ;
   .B ;
   TYPLIST_MSGTYP_PARM
 
TYPLIST_EXIT_CMD ( %TYPLIST_EXIT_CMD ) = ;
   EXIT_SUBCMD
 
 
/*
    TYPLIST MOD parameter definitions
*/
 
TYPLIST_MSGTYP_PARM ( %TYPLIST_MSGTYP_PARM ) = ;
   [ 'MSG/TYPE' ASSIGNMENT_OP ] ;
   MSGTYPE
 
 
/*
   MSGTYP option list
*/
 
MSGTYP_OPTION_LIST ( %MSGTYP_OPTION_LIST ) = ;
   '(' ;
   < ',', MSGTYP_OPTION > ;
   [ ')' ]
 
/*
   MSGTYP option possibilities
*/
 
MSGTYP_OPTION = ;
   {  JOURNALT_OPT ;
    | ONEREPORT_OPT ;
    | PERM_OPT ;
    | PRIO_OPT ;
   }
 
/*
   MSGTYP option definitions
*/
 
JOURNALT_OPT ( %JOURNALT_OPT ) = ;
   'JOURNAL' ;
   ASSIGNMENT_OP ;
   YES_NO
 
ONEREPORT_OPT ( %ONEREPORT_OPT ) = ;
   'ONEREPORT' ;
   ASSIGNMENT_OP ;
   YES_NO
 
%EJECT ;
/*D*
   NAME:          ADMIN_DEFINESTA_PARMS
   DESCRIPTION:   ADMIN_DEFINESTA_PARMS is the root of the syntax description for
                  the ADMIN_DEFINESTA subcommand language.  It's purpose is to
                  break down the parameters provided to initialize the ADMIN
                  (miscellaneous administrative info) structure.
*/
 
ADMIN_DEFINESTA_PARMS ( D ) = ;
   (  ADMIN_ABORTCOMP_PARM ;
    | ADMIN_ACTIVATE_PARM ;
    | ADMIN_AU_PARM ;
    | ADMIN_DISCCOMP_PARM ;
    | ADMIN_NEWDEFCOMP_PARM ;
    | EXIT_SUBCMD ;
   ) ;
   .END
 
 
/*
   ADMIN LARKETTE parameter definitions
 
*/
 
ADMIN_ABORTCOMP_PARM ( %ADMIN_ABORTCOMP_PARM ) = ;
   ( 'ABORTONCOMP/LETION'|'ABORTCOMP/LETION' ) ;
   ASSIGNMENT_OP ;
   YES_NO
 
ADMIN_ACTIVATE_PARM ( %ADMIN_ACTIVATE_PARM ) = ;
   'ACTIVATE' ;
   ASSIGNMENT_OP ;
   YES_NO
 
ADMIN_AU_PARM ( %ADMIN_AU_PARM ) = ;
   'AU' ;
   ASSIGNMENT_OP ;
   YES_NO
 
ADMIN_DISCCOMP_PARM ( %ADMIN_DISCCOMP_PARM ) = ;
   ( 'DISCONCOMP/LETION'|'DISCCOMP/LETION' ) ;
   ASSIGNMENT_OP ;
   YES_NO
 
ADMIN_NEWDEFCOMP_PARM ( %ADMIN_NEWDEFCOMP_PARM ) = ;
   ( 'NEWDEFONCOMP/LETION'|'NEWDEFCOMP/LETION' ) ;
   ASSIGNMENT_OP ;
   YES_NO
 
%EJECT ;
/*D*
   NAME:          CONTROL_DEFINESTA_PARMS
   DESCRIPTION:   CONTROL_DEFINESTA_PARMS is the root of the syntax description for
                  the CONTROL_DEFINESTA subcommand language.  It's purpose is to
                  break down the parameters provided to allow the M$GJOB call.
*/
 
CONTROL_DEFINESTA_PARMS ( D ) = ;
   (  CONTROL_ACCT_PARM ;
    | CONTROL_NAME_PARM ;
    | CONTROL_PASS_PARM ;
    | CONTROL_STATION_PARM ;
    | EXIT_SUBCMD ;
   ) ;
   .END
 
 
/*
   CONTROL LARKETTE parameter definitions
*/
 
CONTROL_ACCT_PARM ( %CONTROL_ACCT_PARM ) = ;
   ( 'ACCT'|'ACCO/UNT' ) ;
   ASSIGNMENT_OP ;
   LOGON_ACCT
 
CONTROL_NAME_PARM ( %CONTROL_NAME_PARM ) = ;
   'NAME' ;
   ASSIGNMENT_OP ;
   LOGON_NAME
 
CONTROL_PASS_PARM ( %CONTROL_PASS_PARM ) = ;
   'PASS/WORD' ;
   ASSIGNMENT_OP ;
   LOGON_PASSWORD
 
CONTROL_STATION_PARM ( %CONTROL_STATION_PARM ) = ;
   ( 'STA/TION' ) ;
   ASSIGNMENT_OP ;
   STATION
 
%EJECT ;
/*D*
   NAME:          READ_DEFINESTA_PARMS
   DESCRIPTION:   READ_DEFINESTA_PARMS is the root of the syntax description for
                  the READ_DEFINESTA subcommand language.  It's purpose is to
                  break down the parameters provided to initialize the READ_V
                  structure and the function operation information.
*/
 
READ_DEFINESTA_PARMS ( D ) = ;
   (  RW_ABORTERR_PARM ;
    | RW_BIN_PARM ;
    | RW_CONT_PARM ;
    | RW_FREQUENCY_PARM ;
    | RW_LENGTHMAX_PARM ;
    | RW_MSGFILE_PARM ;
    | RW_NEWMSGFILE_PARM ;
    | RW_NUMOPS_PARM ;
    | RW_TRANS_PARM ;
    | RW_WAIT_PARM ;
    | EXIT_SUBCMD ;
   ) ;
   .END
 
/*
   READ LARKETTE parameter definitions
 
      see definitions for WRITE LARKETTE parameters
 
*/
 
%EJECT ;
/*D*
   NAME:          WRITE_DEFINESTA_PARMS
   DESCRIPTION:   WRITE_DEFINESTA_PARMS is the root of the syntax description for
                  the WRITE_DEFINESTA subcommand language.  It's purpose is to
                  break down the parameters provided to initialize the WRITE_V
                  structure and the function operation information.
*/
 
WRITE_DEFINESTA_PARMS ( D ) = ;
   (  RW_ABORTERR_PARM ;
    | RW_BIN_PARM ;
    | RW_CONT_PARM ;
    | RW_FREQUENCY_PARM ;
    | RW_LENGTHMIN_PARM ;
    | RW_LENGTHMAX_PARM ;
    | RW_MSGFILE_PARM ;
    | RW_NUMOPS_PARM ;
    | RW_TRANS_PARM ;
    | RW_WAIT_PARM ;
    | EXIT_SUBCMD ;
   ) ;
   .END
 
/*
   WRITE LARKETTE parameter definitions
 
*/
 
RW_ABORTERR_PARM ( %RW_ABORTERR_PARM ) = ;
   ( 'ABORTONERR/OR'|'ABORTERR/OR' ) ;
   ASSIGNMENT_OP ;
   YES_NO
 
RW_BIN_PARM ( %RW_BIN_PARM ) = ;
   'BIN' ;
   ASSIGNMENT_OP ;
   YES_NO
 
RW_CONT_PARM ( %RW_CONT_PARM ) = ;
   'CONT' ;
   ASSIGNMENT_OP ;
   YES_NO
 
RW_FREQUENCY_PARM ( %RW_FREQUENCY_PARM ) = ;
   'FREQUENCY' ;
   ASSIGNMENT_OP ;
   NUMSECONDS
 
RW_LENGTHMIN_PARM ( %RW_LENGTHMIN_PARM ) = ;
   ( 'LENGTHMIN'|'LENMIN' ) ;
   ASSIGNMENT_OP ;
   LENGTH
 
RW_LENGTHMAX_PARM ( %RW_LENGTHMAX_PARM ) = ;
   ( 'LENGTHMAX'|'LENMAX' ) ;
   ASSIGNMENT_OP ;
   LENGTH
 
RW_MSGFILE_PARM ( %RW_MSGFILE_PARM ) = ;
   ( 'MESSAGEFILE'|'MSGFILE' ) ;
   ASSIGNMENT_OP ;
   MSG_FID
 
RW_NEWMSGFILE_PARM ( %RW_NEWMSGFILE_PARM ) = ;
   ( 'NEWMESSAGEFILE'|'NEWMSGFILE' ) ;
   ASSIGNMENT_OP ;
   YES_NO
 
RW_NUMOPS_PARM ( %RW_NUMOPS_PARM ) = ;
   ( 'NUMBEROPS'|'NUMOPS' ) ;
   ASSIGNMENT_OP ;
   NUMOPS
 
RW_TRANS_PARM ( %RW_TRANS_PARM ) = ;
   'TRANS' ;
   ASSIGNMENT_OP ;
   YES_NO
 
RW_VFC_PARM ( %RW_VFC_PARM ) = ;
   'VFC' ;
   ASSIGNMENT_OP ;
   YES_NO
 
RW_WAIT_PARM ( %RW_WAIT_PARM ) = ;
   'WAIT' ;
   ASSIGNMENT_OP ;
   YES_NO
 
%EJECT ;
/*D*
   NAME:          SETSTA_DEFINESTA_PARMS
   DESCRIPTION:   SETSTA_DEFINESTA_PARMS is the root of the syntax description for the
                  SETSTA_DEFINESTA subcommand language.  It's purpose is to break
                  down the parameters provided to initialize the SETSTA structure.
*/
 
SETSTA_DEFINESTA_PARMS ( D ) = ;
   (  SETSTA_ALLABSENT_PARM ;
    | SETSTA_ALLDCBS_PARM ;
    | SETSTA_ALLTRMS_PARM ;
    | SETSTA_ANYDCB_PARM ;
    | SETSTA_DIRONLY_PARM ;
    | SETSTA_EOFNONE_PARM ;
    | SETSTA_EOFONE_PARM ;
    | SETSTA_EOFTIME_PARM ;
    | SETSTA_ILATCH_PARM ;
    | SETSTA_ILOCK_PARM ;
    | SETSTA_IMSGTYP_PARM ;
    | SETSTA_ISTATION_PARM ;
    | SETSTA_OLATCH_PARM ;
    | SETSTA_OLOCK_PARM ;
    | SETSTA_OMSGTYP_PARM ;
    | SETSTA_OSTATION_PARM ;
    | SETSTA_WAS_PARM ;
    | EXIT_SUBCMD ;
   ) ;
   .END
 
%EJECT ;
/*D*
   NAME:          STATION_DEFINESTA_PARMS
   DESCRIPTION:   STATION_DEFINESTA_PARMS is the root of the syntax description for
                  the STATION_DEFINESTA subcommand language.  It's purpose is to
                  break down the parameters provided to initialize the STATION
                  structure.
*/
 
STATION_DEFINESTA_PARMS ( D ) = ;
   (  SETSTA_ALLABSENT_PARM ;
    | SETSTA_ALLDCBS_PARM ;
    | SETSTA_ALLTRMS_PARM ;
    | SETSTA_ANYDCB_PARM ;
    | SETSTA_DIRONLY_PARM ;
    | SETSTA_EOFNONE_PARM ;
    | SETSTA_EOFONE_PARM ;
    | SETSTA_EOFTIME_PARM ;
    | STATION_LATCH_PARM ;
    | STATION_LOCK_PARM ;
    | STATION_MSGTYP_PARM ;
    | STATION_STATION_PARM ;
    | SETSTA_WAS_PARM ;
    | EXIT_SUBCMD ;
   ) ;
   .END
 
/*
   STATION LARKETTE parameter definitions
*/
 
STATION_LATCH_PARM ( %STATION_LATCH_PARM ) = ;
   'LATCH' ;
   ASSIGNMENT_OP ;
   YES_NO
 
STATION_LOCK_PARM ( %STATION_LOCK_PARM ) = ;
   'LOCK' ;
   ASSIGNMENT_OP ;
   YES_NO
 
STATION_MSGTYP_PARM ( %STATION_MSGTYP_PARM ) = ;
   'MSGTYP' ;
   ASSIGNMENT_OP ;
   MSGTYPE_WILDC
 
STATION_STATION_PARM ( %STATION_STATION_PARM ) = ;
   'STATION' ;
   ASSIGNMENT_OP ;
   STATION_WILDC
 
