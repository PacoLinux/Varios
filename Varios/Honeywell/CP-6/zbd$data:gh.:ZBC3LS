

12:18 AUG 20 '97 zbg$data:h.:ZBC3TSI                                       1    
    1      /*
    2       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    3       * See the copyright notice in the ACK home directory, in the file "Copyright".
    4       */
    5      /* $Header: data.h,v 0.2 87/03/09 17:14:51 ceriel Exp $ */
    6
    7      typedef struct cost {
    8       short ct_space;
    9       short ct_time;
   10      } cost_t,*cost_p;
   11
   12      typedef struct {
   13       string ea_str;
   14       word ea_off;
   15      } addr_t;
   16
   17      typedef struct {
   18       int     t_token;        /* kind of token, -1 for register */
   19       union {
   20          word aw; /* integer type */
   21          addr_t aa;  /* address type */
   22          int ar;     /* register type */
   23       } t_att[TOKENSIZE];
   24      } token_t,*token_p;
   25
   26      struct reginfo {
   27       int     r_repr;                 /* index in string table */
   28       int     r_size;                 /* size in bytes */
   29      #if MAXMEMBERS!=0
   30       int     r_members[MAXMEMBERS];  /* register contained within this reg */
   31       short r_clash[REGSETSIZE]; /* set of clashing registers */
   32      #endif
   33       int     r_refcount;             /* Times in use */
   34       token_t r_contents;             /* Current contents */
   35       int     r_tcount;               /* Temporary count difference */
   36      };
   37
12:18 AUG 20 '97 zbg$data:h.:ZBC3TSI                                       2    
   38      #if MAXMEMBERS!=0
   39      #define clash(a,b) ((machregs[a].r_clash[(b)>>4]&(1<<((b)&017)))!=0)
   40      #else
   41      #define clash(a,b) ((a)==(b))
   42      #endif
   43
   44      typedef struct {
   45       int     t_size;                 /* size in bytes */
   46       cost_t  t_cost;                 /* cost in bytes and time */
   47       byte    t_type[TOKENSIZE];      /* types of attributes, TT_??? */
   48       int     t_format;               /* index of formatstring */
   49      } tkdef_t,*tkdef_p;
   50
   51      struct emline {
   52       int     em_instr;
   53       int     em_optyp;
   54       string  em_soper;
   55       union {
   56          word    em_ioper;
   57          long  em_loper;
   58       } em_u;
   59      };
   60
   61      #define OPNO 0
   62      #define OPINT 1
   63      #define OPSYMBOL 2
   64
   65      typedef struct {
   66       int rl_n;       /* number in list */
   67       int rl_list[NREGS];
   68      } rl_t,*rl_p;
   69

