

10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        1    
    1      /*M*    XSP$SYNTAX      Presentation PDU definitions in ASN.1 notation  */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DDA */
    8      /*F*    NAME:   XSP$SYNTAX
    9
   10              XSP$SYNTAX defines the structure of each of the Presentation
   11              layer PDUs using the ASN.1 macros.  These structures determine
   12              precisely how to encode and decode the PPDUs.  Any User Data
   13              supplied on a call to Presentation or passed to the application
   14              by Presentation is also encoded, but using the syntax definitions
   15              supplied by the application.
   16
   17              NOTE: The code/data in this module is never used.  During
   18              implementation I decided to use a PDU encode/decode strategy
   19              I was already familiar with, rather than using the ASN.1
   20              macros.  The problems I had with the ASN.1 macros were...
   21              (1) It's not possible to specify a PRE, SUCC, or FAIL
   22                  procedure name that is unique to a parse node,
   23              (2) Once you get to the (one) PRE/SUCC/FAIL procedure, it's
   24                  impossible to tell where in the parse tree you are,
   25              (3) Because the macros are just data, FPTs carry around an
   26                  inordinate number of pointers to things, and
   27              (4) Debugging an incorrect or incomplete ASN.1 grammar is
   28                  a pain in the neck because there are no tools to help.
   29              See XSP$ENCODE and XSP$DECODE for the real code.
   30      */
   31      XSP$SYNTAX: PROC( PARM) ALTRET;  /* PARM, ALTRET used only by other ENTRYs */
   32      %INCLUDE XSP_ASN1_M;
   33          %XSP_ASN1_E;
   34          %XSP$ASN1_PARM( NAME=PARM, STCLASS=);
   35          %XSP_ASN1_FPT( FPTN=XSP_AFPT, STCLASS=SYMREF);
   36          %XSP_ASN1_FPT( FPTN=AFPT, STCLASS="BASED( AFPT$)");
   37          %XSP_ASN1_N( NAME=NODE, STCLASS=BASED);
10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        2    
   38      %INCLUDE XSP_INTERNAL_E;
   39      %INCLUDE XSP_INTERNAL_M;
   40          %XSP$CTXTMAP( NAME=CMAP, STCLASS="BASED( CMAP$)");
   41      %INCLUDE K_ADDRESS_M;
   42      %INCLUDE XSP_PRESENTATION_E;
   43      %INCLUDE XSP_PRESENTATION_M;
   44          %XSP$GENERIC( STCLASS="BASED( PFPT$)");
   45
   46          /* Equates for CONDITION= are defined in XSP_INTERNAL_E */
   47
   48          /* Equates for OFFSET= */
   49      %EQU OFFSET_PSAP = 0;  /* offset into XSC$ADDRESS of PSAP */
   50      %EQU OFFSET_FU = 2;  /* offset into PCTX of FU */
   51      %EQU OFFSET_SUR = 32;  /* offset into PCTX of SUR */
   52      %EQU OFFSET_REASON = 2;  /* offset into XSP$GENERIC of REASON */
   53
   54          /* Equates for SIZE= */
   55      %EQU SIZE_PSAP = 224;
   56
   57          DCL 1 XSP_ABSLIST SYMREF,
   58               2 CTXT$(0:0) PTR;
   59          DCL 1 XSP_TFRLIST SYMREF,
   60               2 CTXT$(0:0) PTR;
   61
   62          DCL AFPT$ PTR STATIC;
   63          DCL CMAP$ PTR STATIC;
   64          DCL I SBIN;
   65          DCL NEXT SBIN STATIC;
   66          DCL PFPT$ PTR STATIC;
   67          DCL VALUE SBIN STATIC;
   68      %EJECT;

10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        3    
   69      /*
   70       * PPDU
   71       */
   72          %XSP_ASN1_CHOICE( NAME=PPDU, STCLASS="STATIC SYMDEF",
   73              TAGS=YES, CP6TYP=UBIN, VALUE=0,
   74              SUBNDS="Oops,AC,ACA,ARP,ARU,CP,CPA,CPR,RS,RSA,TC,TCC,TD,TE,TTD");
   75          /* VALUE is modified at runtime to hold the %XSP_PEV_xxx value of the
   76             event which caused the encoder to be invoked.  The SUBNDS list above
   77             has been arranged to match the corresponding %XSP_PEV_xxx values, so
   78             the correct PDU will be encoded, depending on VALUE. */
   79
   80          %XSP_ASN1_N( NAME=Oops, TYPE=NULL);
   81          /* XSP$ENCODE is hosed if we're attempting to encode this... */
   82
   83      /*
   84       * ModeSelector
   85       */
   86          %XSP_ASN1_SET( TAG=C0, NAME=ModeSelector,
   87              SHORT=YES,
   88              SUBNDS="Mode");
   89
   90          %XSP_ASN1_N( NAME=Mode,
   91              TYPE=INTEGER, VALUE=1);
   92          /* VALUE is 1 to indicate that only 'normal' mode is supported. */
   93
   94      /*
   95       * AbstractSyntaxName
   96       */
   97          %XSP_ASN1_N( NAME=AbstractSyntaxName,
   98              TYPE=OBJECT_IDENTIFIER, CP6TYP=TEXTH,
   99              FPTPTR=%XSP_FPTX_ABS, OFFSET=0);
  100
  101      /*
  102       * TransferSyntaxName
  103       */
  104          %XSP_ASN1_N( NAME=TransferSyntaxName,
  105              TYPE=OBJECT_IDENTIFIER, CP6TYP=TEXTH,
10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        4    
  106              FPTPTR=%XSP_FPTX_TFR, OFFSET=0);
  107      %EJECT;

10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        5    
  108      /*
  109       * SimplyEncodedData
  110       */
  111          %XSP_ASN1_N( TAG=A0, NAME=SimplyEncodedData,
  112              TYPE=OCTET_STRING, CP6TYP=TEXT, PRE=SND,
  113              FPTPTR=%XSP_FPTX_DATA, OFFSET=0);
  114          /* XSP$CHKNODE fills in the data pointer and data size */
  115
  116      /*
  117       * FullyEncodedData
  118       */
  119          %XSP_ASN1_SEQUENCE_OF( TAG=A1, NAME=FullyEncodedData,
  120              SUBND="PDVList");
  121
  122          %XSP_ASN1_SEQUENCE( NAME=PDVList,
  123              PRE=SND,
  124              SUBNDS="PDVTransferSyntaxName,PresCtxtIdent,PDVPresDataValue");
  125          /* XSP$CHKNODE fills in the required subnode variables */
  126
  127          %XSP_ASN1_N( NAME=PDVTransferSyntaxName,
  128              TYPE=OBJECT_IDENTIFIER, CP6TYP=TEXTH,
  129              FPTPTR=%XSP_FPTX_TFR, OFFSET=0);
  130
  131          %XSP_ASN1_CHOICE( NAME=PDVPresDataValue,
  132              TAGS=YES, CP6TYP=UBIN, VALUE=0, PRE=SND,
  133              SUBNDS="PDVSingleASN1Type,PDVOctetAligned,PDVArbitrary");
  134          /* XSP$CHKNODE fills in the subnode variables */
  135
  136          %XSP_ASN1_N( TAG=C0, NAME=PDVSingleASN1Type,
  137              TYPE=NULL, CP6TYP=TEXTFPTSIZ,
  138              FPTPTR=%XSP_FPTX_DATA, OFFSET=0);
  139
  140          %XSP_ASN1_N( TAG=C1, NAME=PDVOctetAligned,
  141              TYPE=OCTET_STRING, CP6TYP=TEXTFPTSIZ,
  142              FPTPTR=%XSP_FPTX_DATA, OFFSET=0);
  143
  144          %XSP_ASN1_N( TAG=C2, NAME=PDVArbitrary,
10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        6    
  145              TYPE=BIT_STRING, CP6TYP=TEXTFPTSIZ,
  146              FPTPTR=%XSP_FPTX_DATA, OFFSET=0);
  147      %EJECT;

10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        7    
  148      /*
  149       * PresCtxtDef
  150       */
  151          %XSP_ASN1_SEQUENCE( NAME=PresCtxtDef,
  152              PRE=SND,
  153              SUBNDS="PresCtxtIdent,AbstractSyntaxName,TSList");
  154          /* Each time node PresCtxtDef is reached by the encoder, XSP$CHKNODE
  155             is called to fill in the variables for the subnode value fields. */
  156
  157          %XSP_ASN1_N( NAME=PresCtxtIdent,
  158              TYPE=INTEGER, SIZE=1, CP6TYP=SBIN,
  159              FPTPTR=%XSP_FPTX_VAL, OFFSET=0);
  160
  161          %XSP_ASN1_SEQUENCE_OF( NAME=TSList,
  162              VALUE=1,
  163              SUBND="TransferSyntaxName");
  164          /* VALUE is 1 because there is only one transfer syntax supported. */
  165
  166      /*
  167       * ResultList
  168       */
  169          %XSP_ASN1_SEQUENCE( NAME=ResultList,
  170              SHORT=YES,
  171              SUBNDS="Result,RTransferSyntaxName,RProviderReason");
  172
  173          %XSP_ASN1_N( TAG=C0, NAME=Result,
  174              TYPE=INTEGER, SIZE=1, CP6TYP=UBIN);
  175
  176          %XSP_ASN1_N( TAG=C1, NAME=RTransferSyntaxName,
  177              TYPE=OBJECT_IDENTIFIER, CP6TYP=TEXTH,
  178              FPTPTR=%XSP_FPTX_TFR, OFFSET=0);
  179          /*N* somehow the transfer syntax name variable needs to be set up */
  180
  181          %XSP_ASN1_N( TAG=C2, NAME=RProviderReason,
  182              TYPE=INTEGER);
  183      %EJECT;

10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        8    
  184      /*****************************************************************************
  185      *
  186      *       CP PPDU
  187      *
  188      *****************************************************************************/
  189          %XSP_ASN1_SET( NAME=CP,
  190              SUBNDS="CPModeSelector,CPX410,CPNonX410");
  191
  192          %XSP_ASN1_SET( TAG=C0, NAME=CPModeSelector,
  193              SHORT=YES,
  194              SUBNDS="ModeSelector");
  195
  196          %XSP_ASN1_SET( TAG=C1, NAME=CPX410,
  197              OPTIONL=YES, CONDITION=%XSP_COND_X410);
  198          /*N* If X.410 mode supported, SUBNDS for this need to be determined */
  199
  200      %SET CPList = CONCAT(   'CPProtocolVersion,',
  201                              'CPCallingPresSelector,',
  202                              'CPCalledPresSelector,',
  203                              'CPPresCtxtDefList,',
  204                              'CPDefaultCtxtName,',
  205                              'CPPresRequirements,',
  206                              'CPUserSessRequirements,',
  207                              'CPUserData');
  208
  209          %XSP_ASN1_SEQUENCE( TAG=C2, NAME=CPNonX410,
  210              OPTIONL=YES, CONDITION=%XSP_COND_NONX410,
  211              SUBNDS=%CPList);
  212
  213          %XSP_ASN1_N( TAG=C0, NAME=CPProtocolVersion,
  214              TYPE=BIT_STRING, SIZE=1, DEFAULT='0'B, VALUE='0'B);
  215
  216          %XSP_ASN1_N( TAG=C1, NAME=CPCallingPresSelector,
  217              TYPE=OCTET_STRING, SIZELIM=%SIZE_PSAP, CP6TYP=TEXTC,
  218              FPTPTR=%XSP_FPTX_PSRC, OFFSET=%OFFSET_PSAP);
  219
  220          %XSP_ASN1_N( TAG=C2, NAME=CPCalledPresSelector,
10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        9    
  221              TYPE=OCTET_STRING, SIZELIM=%SIZE_PSAP, CP6TYP=TEXTC,
  222              FPTPTR=%XSP_FPTX_PDST, OFFSET=%OFFSET_PSAP);
  223
  224          %XSP_ASN1_SEQUENCE_OF( TAG=C4, NAME=CPPresCtxtDefList,
  225              CP6TYP=UBIN, VALUE=0, PRE=SND,
  226              SUBND="PresCtxtDef");
  227          /* VALUE is modified at runtime by XSP$CHKNODE */
  228
  229          %XSP_ASN1_SEQUENCE( TAG=C6, NAME=CPDefaultCtxtName,
  230              SHORT=YES, PRE=SND,
  231              SUBNDS="CPAbstractSyntaxName,CPTransferSyntaxName");
  232          /* XSP$CHKNODE is invoked to set up the subnode value fields. */
  233
  234          %XSP_ASN1_N( TAG=C0, NAME=CPAbstractSyntaxName,
  235              TYPE=OBJECT_IDENTIFIER, CP6TYP=TEXTH,
  236              FPTPTR=%XSP_FPTX_ABS, OFFSET=0);
  237
  238          %XSP_ASN1_N( TAG=C1, NAME=CPTransferSyntaxName,
  239              TYPE=OBJECT_IDENTIFIER, CP6TYP=TEXTH,
  240              FPTPTR=%XSP_FPTX_TFR, OFFSET=0);
  241
  242          %XSP_ASN1_N( TAG=C8, NAME=CPPresRequirements,
  243              TYPE=BIT_STRING, SIZE=2, CP6TYP=BIT, DEFAULT='10'B,
  244              FPTPTR=%XSP_FPTX_PCTX, OFFSET=%OFFSET_FU);
  245
  246          %XSP_ASN1_N( TAG=C9, NAME=CPUserSessRequirements,
  247              TYPE=BIT_STRING, SIZE=11, CP6TYP=BIT,
  248              FPTPTR=%XSP_FPTX_PCTX, OFFSET=%OFFSET_SUR);
  249
  250          %XSP_ASN1_CHOICE( NAME=CPUserData,
  251              TAGS=YES, CP6TYP=UBIN, VALUE=0, PRE=SND,
  252              SUBNDS="SimplyEncodedData,FullyEncodedData");
  253          /* VALUE is modified at runtime by XSP$CHKNODE */
  254      %EJECT;

10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        10   
  255      /*****************************************************************************
  256      *
  257      *       CPA PPDU
  258      *
  259      *****************************************************************************/
  260          %XSP_ASN1_SET( NAME=CPA,
  261              SUBNDS="CPAModeSelector,CPAX410,CPANonX410");
  262
  263          %XSP_ASN1_SET( TAG=C0, NAME=CPAModeSelector,
  264              SHORT=YES,
  265              SUBNDS="ModeSelector");
  266
  267          %XSP_ASN1_SET( TAG=C1, NAME=CPAX410,
  268              OPTIONL=YES, CONDITION=%XSP_COND_X410);
  269
  270      %SET CPAList = CONCAT(  'CPAProtocolVersion,',
  271                              'CPARespondingPresSelector,',
  272                              'CPAPresCtxtDefResultList,',
  273                              'CPAPresRequirements,',
  274                              'CPAUserSessRequirements,',
  275                              'CPAUserData');
  276
  277          %XSP_ASN1_SEQUENCE( TAG=C2, NAME=CPANonX410,
  278              OPTIONL=YES, CONDITION=%XSP_COND_NONX410,
  279              SUBNDS=%CPAList);
  280
  281          %XSP_ASN1_N( TAG=C0, NAME=CPAProtocolVersion,
  282              TYPE=BIT_STRING, SIZE=1, DEFAULT='1'B, VALUE='1'B);
  283
  284          %XSP_ASN1_N( TAG=C3, NAME=CPARespondingPresSelector,
  285              TYPE=OCTET_STRING, SIZELIM=%SIZE_PSAP, CP6TYP=TEXTC,
  286              FPTPTR=%XSP_FPTX_PDST, OFFSET=%OFFSET_PSAP);
  287
  288          %XSP_ASN1_SEQUENCE_OF( TAG=C5, NAME=CPAPresCtxtDefResultList,
  289              SUBND="ResultList");
  290
  291          %XSP_ASN1_N( TAG=C8, NAME=CPAPresRequirements,
10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        11   
  292              TYPE=BIT_STRING, SIZE=2, CP6TYP=BIT, DEFAULT='10'B,
  293              FPTPTR=%XSP_FPTX_PCTX, OFFSET=%OFFSET_FU);
  294
  295          %XSP_ASN1_N( TAG=C9, NAME=CPAUserSessRequirements,
  296              TYPE=BIT_STRING, SIZE=11, CP6TYP=BIT,
  297              FPTPTR=%XSP_FPTX_PCTX, OFFSET=%OFFSET_SUR);
  298
  299          %XSP_ASN1_CHOICE( NAME=CPAUserData,
  300              SUBNDS="SimplyEncodedData,FullyEncodedData");
  301      %EJECT;

10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        12   
  302      /*****************************************************************************
  303      *
  304      *       CPR PPDU
  305      *
  306      *****************************************************************************/
  307          %XSP_ASN1_CHOICE( NAME=CPR,
  308              TAGS=NO,
  309              SUBNDS="CPRX410,CPRNonX410");
  310
  311          %XSP_ASN1_SET( NAME=CPRX410,
  312              OPTIONL=YES, CONDITION=%XSP_COND_X410);
  313
  314      %SET CPRList = CONCAT(  'CPRProtocolVersion,',
  315                              'CPRRespondingPresSelector,',
  316                              'CPRPresCtxtDefResultList,',
  317                              'CPRDefaultCtxtResult,',
  318                              'CPRProviderReason,',
  319                              'CPRUserData');
  320
  321          %XSP_ASN1_SEQUENCE( NAME=CPRNonX410,
  322              OPTIONL=YES, CONDITION=%XSP_COND_NONX410,
  323              SUBNDS=%CPRList);
  324
  325          %XSP_ASN1_N( TAG=C0, NAME=CPRProtocolVersion,
  326              TYPE=BIT_STRING, SIZE=1, DEFAULT='1'B, VALUE='1'B);
  327
  328          %XSP_ASN1_N( TAG=C3, NAME=CPRRespondingPresSelector,
  329              TYPE=OCTET_STRING, SIZELIM=%SIZE_PSAP, CP6TYP=TEXTC,
  330              FPTPTR=%XSP_FPTX_PDST, OFFSET=%OFFSET_PSAP);
  331
  332          %XSP_ASN1_SEQUENCE_OF( TAG=C5, NAME=CPRPresCtxtDefResultList,
  333              SUBND="ResultList");
  334
  335          %XSP_ASN1_N( TAG=C7, NAME=CPRDefaultCtxtResult,
  336              TYPE=INTEGER, SIZE=1, CP6TYP=UBIN,
  337              FPTPTR=%XSP_FPTX_CMAP, OFFSET=0);
  338          /*N* OFFSET needs to be fixed */
10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        13   
  339
  340          %XSP_ASN1_N( TAG=C10, NAME=CPRProviderReason,
  341              TYPE=INTEGER, SIZE=4, CP6TYP=UBIN,
  342              FPTPTR=%XSP_FPTX_PFPT, OFFSET=0);
  343          /*N* OFFSET needs to be fixed */
  344
  345          %XSP_ASN1_CHOICE( NAME=CPRUserData,
  346              SUBNDS="SimplyEncodedData,FullyEncodedData");
  347      %EJECT;

10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        14   
  348      /*****************************************************************************
  349      *
  350      *       ARU PPDU
  351      *
  352      *****************************************************************************/
  353          %XSP_ASN1_CHOICE( NAME=ARU,
  354              TAGS=NO,
  355              SUBNDS="ARUX410,ARUNonX410");
  356
  357          %XSP_ASN1_SET( NAME=ARUX410,
  358              OPTIONL=YES, CONDITION=%XSP_COND_X410);
  359
  360      %SET ARUList = CONCAT(  'ARUPresCtxtIdentList,',
  361                              'ARUUserData');
  362
  363          %XSP_ASN1_SEQUENCE( TAG=C0, NAME=ARUNonX410,
  364              OPTIONL=YES, CONDITION=%XSP_COND_NONX410,
  365              SUBNDS=%ARUList);
  366
  367          %XSP_ASN1_SEQUENCE_OF( TAG=C0, NAME=ARUPresCtxtIdentList,
  368              SUBND="PresCtxtIdent");
  369
  370          %XSP_ASN1_CHOICE( NAME=ARUUserData,
  371              SUBNDS="SimplyEncodedData,FullyEncodedData");
  372      %EJECT;

10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        15   
  373      /*****************************************************************************
  374      *
  375      *       ARP PPDU
  376      *
  377      *****************************************************************************/
  378      %SET ARPList = CONCAT(  'ARPAbortReason,',
  379                              'ARPEventIdentifier');
  380
  381          %XSP_ASN1_SEQUENCE( NAME=ARP,
  382              SHORT=YES,
  383              SUBNDS=%ARPList);
  384
  385          %XSP_ASN1_N( TAG=C0, NAME=ARPAbortReason,
  386              TYPE=INTEGER, CP6TYP=UBIN,
  387              FPTPTR=%XSP_FPTX_PFPT, OFFSET=%OFFSET_REASON);
  388
  389          %XSP_ASN1_N( TAG=C1, NAME=ARPEventIdentifier,
  390              TYPE=INTEGER, CP6TYP=UBIN);
  391      %EJECT;

10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        16   
  392      /*****************************************************************************
  393      *
  394      *       TD PPDU
  395      *
  396      *****************************************************************************/
  397      %SET TDList = CONCAT(   'TDUserData');
  398
  399          %XSP_ASN1_SEQUENCE( NAME=TD,
  400              SUBNDS=%TDList);
  401
  402          %XSP_ASN1_CHOICE( NAME=TDUserData,
  403              SUBNDS="SimplyEncodedData,FullyEncodedData");
  404      %EJECT;

10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        17   
  405      /*****************************************************************************
  406      *
  407      *       TE PPDU
  408      *
  409      *****************************************************************************/
  410      %SET TEList = CONCAT(   'TEUserData');
  411
  412          %XSP_ASN1_SEQUENCE( NAME=TE,
  413              SUBNDS=%TEList);
  414
  415          %XSP_ASN1_CHOICE( NAME=TEUserData,
  416              SUBNDS="SimplyEncodedData,FullyEncodedData");
  417      %EJECT;

10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        18   
  418      /*****************************************************************************
  419      *
  420      *       TTD PPDU
  421      *
  422      *****************************************************************************/
  423      %SET TTDList = CONCAT(  'TTDUserData');
  424
  425          %XSP_ASN1_SEQUENCE( NAME=TTD,
  426              SUBNDS=%TTDList);
  427
  428          %XSP_ASN1_CHOICE( NAME=TTDUserData,
  429              SUBNDS="SimplyEncodedData,FullyEncodedData");
  430      %EJECT;

10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        19   
  431      /*****************************************************************************
  432      *
  433      *       TC PPDU
  434      *
  435      *****************************************************************************/
  436      %SET TCList = CONCAT(   'TCUserData');
  437
  438          %XSP_ASN1_SEQUENCE( NAME=TC,
  439              SUBNDS=%TCList);
  440
  441          %XSP_ASN1_CHOICE( NAME=TCUserData,
  442              SUBNDS="SimplyEncodedData,FullyEncodedData");
  443      %EJECT;

10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        20   
  444      /*****************************************************************************
  445      *
  446      *       TCC PPDU
  447      *
  448      *****************************************************************************/
  449      %SET TCCList = CONCAT(  'TCCUserData');
  450
  451          %XSP_ASN1_SEQUENCE( NAME=TCC,
  452              SUBNDS=%TCCList);
  453
  454          %XSP_ASN1_CHOICE( NAME=TCCUserData,
  455              SUBNDS="SimplyEncodedData,FullyEncodedData");
  456      %EJECT;

10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        21   
  457      /*****************************************************************************
  458      *
  459      *       AC PPDU
  460      *
  461      *****************************************************************************/
  462      %SET ACList = CONCAT(   'ACPresCtxtAddList,',
  463                              'ACPresCtxtDelList,',
  464                              'ACUserData');
  465
  466          %XSP_ASN1_SEQUENCE( NAME=AC,
  467              SUBNDS=%ACList);
  468
  469          %XSP_ASN1_SEQUENCE_OF( TAG=C0, NAME=ACPresCtxtAddList,
  470              SUBND="PresCtxtDef");
  471
  472          %XSP_ASN1_SEQUENCE_OF( TAG=C1, NAME=ACPresCtxtDelList,
  473              SUBND="PresCtxtIdent");
  474
  475          %XSP_ASN1_CHOICE( NAME=ACUserData,
  476              SUBNDS="SimplyEncodedData,FullyEncodedData");
  477      %EJECT;

10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        22   
  478      /*****************************************************************************
  479      *
  480      *       ACA PPDU
  481      *
  482      *****************************************************************************/
  483      %SET ACAList = CONCAT(  'ACAPresCtxtAddResultList,',
  484                              'ACAPresCtxtDelResultList,',
  485                              'ACAUserData');
  486
  487          %XSP_ASN1_SEQUENCE( NAME=ACA,
  488              SUBNDS=%ACAList);
  489
  490          %XSP_ASN1_SEQUENCE( TAG=C0, NAME=ACAPresCtxtAddResultList,
  491              SUBNDS="ResultList");
  492
  493          %XSP_ASN1_SEQUENCE_OF( TAG=C1, NAME=ACAPresCtxtDelResultList,
  494              SUBND="ACAPresCtxtDelResultItem");
  495
  496          %XSP_ASN1_N( NAME=ACAPresCtxtDelResultItem,
  497              TYPE=INTEGER, SIZE=1, CP6TYP=UBIN);
  498
  499          %XSP_ASN1_CHOICE( NAME=ACAUserData,
  500              SUBNDS="SimplyEncodedData,FullyEncodedData");
  501      %EJECT;

10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        23   
  502      /*****************************************************************************
  503      *
  504      *       RS PPDU
  505      *
  506      *****************************************************************************/
  507      %SET RSList = CONCAT(   'RSPresCtxtIdentList,',
  508                              'RSUserData');
  509
  510          %XSP_ASN1_SEQUENCE( NAME=RS,
  511              SUBNDS=%RSList);
  512
  513          %XSP_ASN1_SEQUENCE_OF( TAG=C0, NAME=RSPresCtxtIdentList,
  514              SUBND="PresCtxtIdent");
  515
  516          %XSP_ASN1_CHOICE( NAME=RSUserData,
  517              SUBNDS="SimplyEncodedData,FullyEncodedData");
  518      %EJECT;

10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        24   
  519      /*****************************************************************************
  520      *
  521      *       RSA PPDU
  522      *
  523      *****************************************************************************/
  524      %SET RSAList = CONCAT(  'RSAPresCtxtIdentList,',
  525                              'RSAUserData');
  526
  527          %XSP_ASN1_SEQUENCE( NAME=RSA,
  528              SUBNDS=%RSAList);
  529
  530          %XSP_ASN1_SEQUENCE_OF( TAG=C0, NAME=RSAPresCtxtIdentList,
  531              SUBND="PresCtxtIdent");
  532
  533          %XSP_ASN1_CHOICE( NAME=RSAUserData,
  534              SUBNDS="SimplyEncodedData,FullyEncodedData");
  535      %EJECT;

10:40 OCT 01 '97 XSP$SYNTAX.:XSA1SI                                        25   
  536      /*F*    NAME:   XSP$CHKNODE
  537
  538              XSP$CHKNODE is invoked by the Presentation encoder when it reaches
  539              a syntax node specifying one of the flags PRE=, SUCC=, or FAIL=.
  540              This provides a mechanism for runtime activity dependent on the
  541              particular node of the syntax tree that has been reached.
  542      */
  543      XSP$CHKNODE: ENTRY( PARM) ALTRET;
  544
  545          DO CASE( PARM.USR);
  546              CASE( %XSP_ASN1_SND_PRE);
  547              CASE( ELSE);
  548              END;
  549          ALTRETURN;
  550
  551          END XSP$SYNTAX;

