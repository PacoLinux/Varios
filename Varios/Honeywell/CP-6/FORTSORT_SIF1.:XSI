      PROGRAM OFS                                                       OFS
C*T***********************************************************  
C*T*                                                         *  
C*T* Copyright (c) Bull HN Information Systems Inc., 1989    *  
C*T*                                                         *  
C*T***********************************************************  
C*M* FORTSORT_SIF1 - MAIN PROGRAM FOR FORTSORT.X
C  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  --------
C
C             To Order Fortran Subroutines, Alphabetically
C                            by:  Mathieu Federspiel
C                                 with significant contribution from
C                                 Dennis Lilla
C
C     DCB's:
C             F$1   - Source Input file, assigned at LINK time.
C             F$2   - Object oUtput file, assigned at LINK time.
C             F$3   - "**ofs-?"; temporary output files.
C             F$4   - "**ofs-temp"; temporary output/input file.
C             F$102 - User output.
C             F$105 - User input.
C
C  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  --------
C
      IMPLICIT INTEGER (A-Z)
      LOGICAL
     .    LTEMP, LEND, LHOLDMAIN
      CHARACTER
     .    PREFIX*6 / '**ofs-' /
     .  , BLOCKTEMP*10 / '**ofs-temp' /
     .  , BLANK*100 / ' ' /
     .  , BLOCKNAME*30
     .  , OLDNAME*36, NEXTNAME*36
     .  , RECORD*100, RECORD1*100
     .  , CKYN*1
      REAL
     .    SECONDS, SECONDS1, TEMPR
C
      COMMON / HOLDMAIN / LHOLDMAIN
C
C  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  --------
C
      CONSTANT, MAXINRECS=99999, MAXLEADCOMMENTS=200, MAXRECBLOCK=9999
C
C
      CALL ACPU ( SECONDS1 )
      CALL PROMPT (105,'@? ',1,3)
      WRITE (102,9040)
      WRITE (102,9050)
      READ (105,9000) CKYN
      IF (CKYN .EQ. 'Y' .OR. CKYN .EQ. 'y') THEN
         LHOLDMAIN = .TRUE.
      ELSE 
         LHOLDMAIN = .FALSE.
      END IF 
      WRITE (102,9060)
      READ (105,"(F)") TEMPR
      IF (TEMPR .LT. 0.001) THEN
         INCRKEY = 1000
      ELSE 
         INCRKEY = TEMPR * 1000.0 + 0.0001
      END IF 
C
C
      OPEN (4, FILE=BLOCKTEMP, STATUS='UNKNOWN')
      CLOSE (4, STATUS='DELETE')
      OPEN (4, FILE=BLOCKTEMP, STATUS='NEW', USAGE='UPDATE')
      NFILES = 0
      WRITE (102,9010) '    Starting first pass.'
      REPEAT 1040, FOR JLP1 = (1,MAXINRECS)
         READ (1,"(A)",END=1050) RECORD
         IF (RECORD(1:1) .EQ. 'C' .OR.RECORD(1:1) .EQ. '*' .OR.RECORD .
     1      EQ. BLANK) THEN
            WRITE (4,9000) RECORD
            LTEMP = .TRUE.
            GOTO 1040 
         END IF 
         CALL SCANNAME ( RECORD, BLOCKNAME )
         OPEN (3,FILE=PREFIX//BLOCKNAME,STATUS='UNKNOWN',USAGE='OUTPUT')
         NFILES = NFILES + 1
         IF (LTEMP) THEN
            REWIND 4
            REPEAT 1000, FOR JLP2 = (1,MAXLEADCOMMENTS)
               READ (4,9000,END=1010) RECORD1
               WRITE (3,9000) RECORD1
1000        CONTINUE 
            WRITE (102,9030) 'MAXLEADCOMMENTS'
1010        CLOSE (4,STATUS='DELETE')
            LTEMP = .FALSE.
            OPEN (4, FILE=BLOCKTEMP, STATUS='NEW', USAGE='UPDATE')
         END IF 
         WRITE (3,9000) RECORD
         LEND =  .FALSE.
         REPEAT 1020, FOR JLP2 = (1,MAXRECBLOCK)
            READ (1,9000,END=1030) RECORD
            IF ( (RECORD(1:1) .EQ. ' ') .AND. (RECORD(6:6) .EQ. ' ') )
     1            THEN
               CALL SCANEND ( RECORD, LEND )
            END IF 
            WRITE (3,9000) RECORD
            IF ( LEND )GOTO 1030 
1020     CONTINUE 
         WRITE (102,9030) 'MAXRECBLOCK'
1030     CLOSE (3, STATUS='KEEP')
         WRITE (102,9010) BLOCKNAME
1040  CONTINUE 
      WRITE (102,9030) 'MAXINRECS'
C
C         Now to read through the files, putting records in order.
C
1050  CLOSE (4, STATUS='DELETE')
      CALL ACPU (SECONDS)
      WRITE (102,9020) SECONDS-SECONDS1
      SECONDS1 = SECONDS
      WRITE (102,9010) '    Starting second pass.'
      CALL OPENTWO
      OPEN (UNIT=2, ACCESS='KEYED')
      OLDNAME = PREFIX
      NRKEY = 0
      REPEAT 1080, FOR JLP1 = (1,NFILES)
         CALL OPENNEXT ( 3, OLDNAME, NEXTNAME, ERRSTAT )
         IF (ERRSTAT .NE. 0) THEN
            OUTPUT ERRSTAT, OLDNAME
            STOP 'Error on NEXTFID.'
         END IF 
         IF (NEXTNAME(1:6) .NE. PREFIX) THEN
            OUTPUT NEXTNAME
            STOP 'Bad file name.'
         END IF 
         OLDNAME = NEXTNAME
         WRITE (102,9010) NEXTNAME(7:36)
         REPEAT 1060, FOR JLP2 = (1,MAXRECBLOCK)
            READ (3,9000,END=1070) RECORD
            CALL FIND$LNB ( RECORD, 100, LAST )
            IF (LAST .EQ. 0) LAST = 1
            NRKEY = NRKEY + INCRKEY
            WRITE (2,9000,KEY=NRKEY) RECORD(1:LAST)
1060     CONTINUE 
         WRITE (102,9030) 'MAXRECBLOCK'
1070     CLOSE (3,STATUS='DELETE')
1080  CONTINUE 
C
C
      CALL ACPU (SECONDS)
      WRITE (102,9020) SECONDS-SECONDS1
      STOP 'Normal end.'
C
C  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  --------
C                                                                       Formats
C
C
9000  FORMAT ( A )
9010  FORMAT ( 1X,A )
9020  FORMAT ( '     Used ',F.3,'CPU seconds.' )
9030  FORMAT (
     . 1/,' ERROR: Constant ',A,'is too small.'
     .,1/,'        Not all records correctly moved.'
     .,1/,'        Program continues.'
     .,1/
     .  )
9040  FORMAT (
     . 1/,' FORTSORT.X here'
     .,1/
     .  )
9050  FORMAT (
     .    ' Put main program first (Yes or No; default No) '
     .  )
9060  FORMAT (
     .    ' What EDIT key increment (default 1.000) '
     .  )
      END 
C
C  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  --------
C
      SUBROUTINE SCANEND ( RECORD, LEND )                               SCANEND
C
C         To scan record for END statement.
C                                      -- Mathieu Federspiel, October 1984
C
C  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  --------
C
      IMPLICIT INTEGER (A-Z)
      LOGICAL
     .    LEND
      CHARACTER
     .    RECORD*(*)
C
C  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  --------
C
      LENGTHREC = 72
      LEND = .FALSE.
      CALL FIND$LNB ( RECORD, LENGTHREC, LAST )
      IF (LAST .LT. 9)GOTO 1000 
      IF (RECORD(LAST-2:LAST) .EQ. 'END') THEN
         IF ((LAST .EQ. 9) .OR.(LAST .GT. 9 .AND. RECORD(7:LAST-3) .EQ. 
     1      ' ') ) THEN
            LEND = .TRUE.
         END IF 
      ELSE IF (RECORD(LAST-4:LAST) .EQ. 'E N D') THEN
         IF ((LAST .EQ. 11) .OR.(LAST .GT. 11 .AND. RECORD(7:LAST-5)
     1      .EQ. ' ') ) THEN
            LEND = .TRUE.
         END IF 
      ELSE IF (RECORD(LAST-3:LAST) .EQ. 'EN D' .OR.RECORD(LAST-3:LAST)
     1.EQ. 'E ND') THEN
         IF ((LAST .EQ. 10) .OR.(LAST .GT. 10 .AND. RECORD(7:LAST-4)
     1      .EQ. ' ') ) THEN
            LEND = .TRUE.
         END IF 
      END IF 
C
C
1000  RETURN
C
C
      END 
C
C  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  --------
C
      SUBROUTINE SCANNAME ( RECORD, NAME )                              SCANNAME
C
C         To find the name of a Block (subroutine, function, etc.).
C                                      -- Mathieu Federspiel, October 1984
C
C  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  --------
C
      IMPLICIT INTEGER (A-Z)
      PARAMETER (DIMWORDS=10)
      LOGICAL
     .    LHOLDMAIN
      CHARACTER
     .    RECORD*(*), NAME*30
     .  , WORDS(DIMWORDS)*30
C
      COMMON / HOLDMAIN / LHOLDMAIN
C
C  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  --------
C
      CALL BLANKBUFFER ( WORDS, DIMWORDS )
      NAME = ' '
      CALL ARECDECODE ( RECORD, WORDS, DIMWORDS, NRWORDS, IERR )
      IF (IERR .NE. 0) THEN
         OUTPUT
     1      'Possible error in following program unit identification.'
         OUTPUT IERR
      END IF 
      NRWORDS1 = NRWORDS - 1
      REPEAT 1000, FOR JLP = (1,NRWORDS1)
         JLP1 = JLP + 1 ; JLP2 = JLP + 2
         IF ((WORDS(JLP) .EQ. 'SUBROUTINE') .OR.(WORDS(JLP) .EQ. 
     1      'FUNCTION'  )) THEN
            NAME = WORDS(JLP1)
            JLP = NRWORDS1
         ELSE IF (WORDS(JLP) .EQ. 'BLOCK' .AND. WORDS(JLP1) .EQ. 'DATA')
     1      THEN
            IF (WORDS(JLP2) .NE. ' ') THEN
               NAME = WORDS(JLP2)
            ELSE 
               NAME = 'BLOCKDATA'
            END IF 
            JLP = NRWORDS1
         ELSE IF (WORDS(JLP) .EQ. 'PROGRAM') THEN
            IF (LHOLDMAIN) THEN
               NAME = '$'//WORDS(JLP1)
            ELSE 
               NAME = WORDS(JLP1)
            END IF 
            JLP = NRWORDS1
         END IF 
1000  CONTINUE 
C
      IF (NAME .EQ. ' ') NAME = '4MAIN'
C
C
      RETURN
C
C
      END 
