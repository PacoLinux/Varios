

11:56 AUG 20 '97 zbc$expr:str.:ZBC3TSI                                     1    
    1      /*
    2       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    3       * See the copyright notice in the ACK home directory, in the file "Copyright".
    4       */
    5      /* $Header: expr.str,v 3.11 87/03/25 22:57:12 ceriel Exp $ */
    6      /* EXPRESSION DESCRIPTOR */
    7
    8      /*  What we want to define is the struct expr, but since it contains
    9       a union of various goodies, we define them first; so be patient.
   10      */
   11
   12      #include "nofloat:h"
   13      #include "em_arith:h"
   14
   15      /* classes of value */
   16      #define Const   1
   17      #define Name 2
   18      #define Label   3
   19
   20      struct value {
   21       int vl_class;     /* Const, Name or Label */
   22       arith vl_value;      /* constant value or offset */
   23       union {
   24          struct idf *vl_idf;  /* external name */
   25          label vl_lbl;     /* compiler-generated label */
   26       } vl_data;
   27      };
   28
   29      struct string   {
   30       char *sg_value;      /* row of bytes repr. the constant */
   31       int sg_len;    /* length of the row */
   32       label sg_datlab;  /* global data-label       */
   33      };
   34
   35      #ifndef NOFLOAT
   36      struct floating {
   37      #ifndef FLOATOPT
11:56 AUG 20 '97 zbc$expr:str.:ZBC3TSI                                     2    
   38       char *fl_value;      /* pointer to string repr. the fp const. */
   39      #else
   40       double fl_value;     /* machine rep of fp constant            */
   41      #endif
   42       label fl_datlab;  /* global data_label */
   43      };
   44      #endif NOFLOAT
   45
   46      struct oper  {
   47       struct type *op_type;   /* resulting type of the operation  */
   48       struct expr *op_left;
   49       int op_oper;         /* the symbol of the operator */
   50       struct expr *op_right;
   51      };
   52
   53      /* The following constants indicate the class of the expression: */
   54      #define   Value 0     /* it is a value known at load time */
   55      #define   String   1     /* it is a string constant  */
   56      #ifndef NOFLOAT
   57      #define   Float 2     /* it is a floating point constant  */
   58      #endif NOFLOAT
   59      #define   Oper  3     /* it is a run-time expression */
   60      #define   Type  4     /* only its type is relevant */
   61
   62      struct expr  {
   63       struct expr *next;
   64       char *ex_file;    /* the file it (probably) comes from */
   65       arith ex_line; /* the line it (probably) comes from */
   66       long ex_debline;  /*  the line the debugger will see */
   67       struct type *ex_type;
   68       char ex_lvalue;
   69       char ex_modlvalue;
   70       char ex_flags;
   71       int ex_class;
   72       int ex_depth;
   73       union {
   74          struct value ex_value;
11:56 AUG 20 '97 zbc$expr:str.:ZBC3TSI                                     3    
   75          struct string ex_string;
   76      #ifndef NOFLOAT
   77          struct floating ex_float;
   78      #endif NOFLOAT
   79          struct oper ex_oper;
   80       } ex_object;
   81      };
   82
   83      /* some abbreviated selections */
   84      #define VL_CLASS   ex_object.ex_value.vl_class
   85      #define   VL_VALUE ex_object.ex_value.vl_value
   86      #define   VL_IDF      ex_object.ex_value.vl_data.vl_idf
   87      #define   VL_LBL      ex_object.ex_value.vl_data.vl_lbl
   88      #define   SG_VALUE ex_object.ex_string.sg_value
   89      #define SG_LEN     ex_object.ex_string.sg_len
   90      #define   SG_DATLAB   ex_object.ex_string.sg_datlab
   91      #ifndef NOFLOAT
   92      #define   FL_VALUE ex_object.ex_float.fl_value
   93      #define   FL_DATLAB   ex_object.ex_float.fl_datlab
   94      #endif NOFLOAT
   95      #define   OP_TYPE     ex_object.ex_oper.op_type
   96      #define   OP_LEFT     ex_object.ex_oper.op_left
   97      #define   OP_OPER     ex_object.ex_oper.op_oper
   98      #define   OP_RIGHT ex_object.ex_oper.op_right
   99
  100      /*  some bits for the ex_flag field, to keep track of various
  101       interesting properties of an expression.
  102      */
  103      #define   EX_SIZEOF   0001     /* contains sizeof operator */
  104      #define   EX_CAST     0002     /* contains cast */
  105      #define   EX_LOGICAL  0004     /* contains logical operator */
  106      #define   EX_COMMA 0010     /* contains expression comma */
  107      #define   EX_PARENS   0020     /* the top level is parenthesized */
  108      #define EX_SIDEEFFECTS   0040     /* expression has side effects */
  109      #define EX_CONST 0100     /* expression is a const reference */
  110      #define   EX_ERROR 0200     /* the expression is wrong */
  111      #define   EX_FLOATOPT 0400     /* the expression contains float ops */
11:56 AUG 20 '97 zbc$expr:str.:ZBC3TSI                                     4    
  112
  113      #define   NILEXPR     ((struct expr *)0)
  114
  115      extern struct expr *intexpr(), *new_oper();
  116
  117      /* ALLOCDEF "expr" 20 */
  118
  119      #define   ISCOMMA(e) ((e)->ex_class == Oper && (e)->OP_OPER == INITCOMMA)
  120

