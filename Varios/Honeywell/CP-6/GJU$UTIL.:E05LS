VERSION E05

PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:1    
        1        1        /*M* GJU$UTIL  LCP-6 Job Step utility subroutines.  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ENU=0,ECU=0,CRM=70  */
        8        8
        9        9        /*F* NAME:   GJU$UTIL
       10       10
       11       11             PURPOSE: LCP-6 Job Step Subroutines.
       12       12
       13       13             DESCRIPTION:
       14       14             The GJU$UTIL module contains the following compile units:
       15       15
       16       16                GJU$GET_PROC - to associate program or special shared
       17       17                               processor procedure with a user.
       18       18
       19       19                GJU$GET_DB - to associate or enter a debugger.
       20       20
       21       21                GJU$XCON - to provide for entering exit control.
       22       22
       23       23                GJU$EVENT - to handle monitor events for this user.
       24       24
       25       25        */
       26       26
       27       27        %EJECT;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:2    
       28       28        /*F* NAME: GJU$GET_PROC
       29       29
       30       30             PURPOSE:  To either read the procedure from the run-unit
       31       31                       and possibly share it or simply build the descriptors
       32       32                       in ASDT_USR for the already shared procedure.
       33       33
       34       34             INPUT:    GJ_GETPROC_PARAMS:
       35       35
       36       36                       RD_PARAMS$ - Contains the address of the parameters
       37       37                                      to be passed to GJS$READ_RU.
       38       38
       39       39                       SFILE$ - PTR. Contains the address of the run-unit
       40       40                                     entry in the shared file tables.
       41       41
       42       42                       GET_PROC - To be set non-zero if the procedure
       43       43                                  must be read from the host.
       44       44
       45       45                       SHARE_PROC - To be set to 1 if after reading the
       46       46                                    procedure from the host, the procedure is
       47       47                                    to be made shared in the shared file table
       48       48                                    entry identified by PROC$.
       49       49                                    To be set to zero if not to be made shared.
       50       50                                    To be set to -1 if this is an unshare request.
       51       51                                    To be set to -2 if this is a copydata request.
       52       52
       53       53                       VP# = first virtual page of the program section.
       54       54
       55       55                       PGSZ = # of pages in the program section.
       56       56
       57       57             OUTPUT:   RD_PARAMS.ERR if an error occurs
       58       58
       59       59             CALL:     CALL GJU$GET_PROC(GJ_GETPROC_PARAMS) ALTRET(LABEL);
       60       60
       61       61        */
       62       62        GJU$GET_PROC: PROC(P) ALTRET;
       63       63
       64       64        %INCLUDE GH_GATE_M;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:3    
       65      105        %INCLUDE GJ_MSG_M;
       66      418        %INCLUDE GJ_MACROS_M;
       67      891        %INCLUDE G_JIT_M;
       68     1156        %INCLUDE G_SFILE_M;
       69     1216 S      %INCLUDE GH_LCP6_M;
       70     1217 S      %INCLUDE GU_LCP6_M;
       71     1218
       72     1219 S      %INCLUDE G_LCP6_E;
       73     1220        %INCLUDE GH_SCHD_E;
       74     1316        %INCLUDE GM_VIRTUAL_E;
       75     1526        %INCLUDE M_ERRORS_C;
       76     1590        %INCLUDE P_FEP_M;
       77     2028        %INCLUDE KL_MACRO_C;
       78     5380        %INCLUDE K_ID_E;
       79     5430
       80     5431                                                /* Input parameter          */
       81     5432        %GJ_GETPROC_PARAMS (FPTN=P,STCLASS= );
       82     5477
       83     5478                                                /* AUTO Storage             */
       84     5479    1   DCL I UBIN;
       85     5480    1   DCL J UBIN;
       86     5481    1   DCL PROG_TYPE UBIN;
       87     5482    1   DCL UPAGE$ PTR;
       88     5483    1   DCL SPAGE$ PTR;
       89     5484    1   DCL PP_SEG$ PTR;
       90     5485    1   DCL PGS_PROC UBIN;
       91     5486    1   DCL ASDT_INDX UBIN;
       92     5487    1   DCL PP_INDX SBIN;
       93     5488    1   DCL SEGS_64K UBIN;
       94     5489    1   DCL GMA_VP# UBIN;
       95     5490    1   DCL GMA_SEGX UBIN;
       96     5491    1   DCL GMA_#PGS UBIN;
       97     5492    1   DCL SIZE_LEFT UBIN(32);
       98     5493    1   DCL SEG_BYT_SZ UBIN(32);
       99     5494    1   DCL MOVE_SZ UBIN;
      100     5495    1   DCL FIRST_USER UBIN;
      101     5496    1   DCL SLUFF_PGSZ UBIN;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:4    
      102     5497    1   DCL V_ VECTOR;
      103     5498
      104     5499        %GJ_FCN_MSG (FPTN=FCN_MSG,STCLASS=AUTO);
      105     5569
      106     5570                                                /* BASED Structures         */
      107     5571        %GJ_READ_PARAMS (FPTN=RD_PARAMS,STCLASS="BASED(P.RD_PARAMS$)");
      108     5668        %G$SFILE (FPTN=G$SFILE,STCLASS="BASED(P.SHARE.SFILE$)",ARRAYED=NO);
      109     5705        %G$ASDT (FPTN=G$ASDT_USR,STCLASS="BASED(G$ASDT_USR$)");
      110     5734        %G$ASDT_MCL (STCLASS="BASED(G$ASDT_MCL$)");
      111     6428        %G$JIT (FPTN=G$JIT,STCLASS="BASED(G$JIT$)");
      112     6842
      113     6843    1   DCL B$APAGE CHAR(MOVE_SZ) BASED;
      114     6844    1   DCL B$PP_SEG(0:6) UBIN BASED;           /* G$SFILE.PP_SEGn          */
      115     6845
      116     6846                                                /* Internal data            */
      117     6847        %VLP_ERRCODE (FPTN=EMMFAILED,ERR#=%E$MEMLIMIT,SEV=G_SEV_ERROR#,
      118     6848                            STCLASS=CONSTANT,FCG=GJ,MID=U,MON='1'B);
      119     6894
      120     6895                                                /* Internal Data            */
      121     6896                                                /* External Data            */
      122     6897    1   DCL GJ_SFILE_CUR_DATA UBIN SYMREF;
      123     6898    1   DCL GJ_SFILE_MAX_DATA UBIN SYMREF;
      124     6899    1   DCL GJ_SFILE_PEAK_DATA UBIN SYMREF;
      125     6900    1   DCL GJ_SFILE_LIB_DATA UBIN SYMREF;
      126     6901    1   DCL GJ_SFILE_CUR_PROC UBIN SYMREF;
      127     6902    1   DCL GJ_SFILE_PEAK_PROC UBIN SYMREF;
      128     6903    1   DCL GJ_SFILE_FRQ UBIN SYMREF;
      129     6904
      130     6905    1   DCL GM_SHUF UBIN SYMREF;
      131     6906    1   DCL GM_STEP UBIN SYMREF;
      132     6907        %GATE (FPTN=GM_MEATLOCK,STCLASS=SYMREF);
      133     6926        %GATE (FPTN=G_SLOCK,STCLASS=SYMREF);
      134     6945        %K#ENTID_E;
      135     6964        %PS_LCP6STT (STCLASS=SYMREF);
      136     7468    1   DCL G$ASDT_USR$ PTR SYMREF READONLY;
      137     7469    1   DCL G$ASDT_MCL$ PTR SYMREF READONLY;
      138     7470    1   DCL G$BPAR1$ PTR SYMREF READONLY;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:5    
      139     7471    1   DCL G$BPAR2$ PTR SYMREF READONLY;
      140     7472    1   DCL G$JIT$ PTR SYMREF READONLY;
      141     7473
      142     7474                                                /* External Procedures      */
      143     7475    1   DCL GHH$ASD ENTRY(2);
      144     7476    1   DCL GMA$GET ENTRY(5) ALTRET;
      145     7477    1   DCL GMA$GETPS ENTRY(2) ALTRET;
      146     7478    1   DCL GMA$PS2USR ENTRY(2) ALTRET;
      147     7479    1   DCL GMA$RELPS ENTRY(2) ALTRET;
      148     7480    1   DCL GMA$SHARED ENTRY(1) ALTRET;
      149     7481    1   DCL GMA$UNSHARE ENTRY(1) ALTRET;
      150     7482    1   DCL GJS$READ_RU ENTRY(1) ALTRET;
      151     7483    1   DCL GHS$RUE ENTRY(4) ALTRET;
      152     7484    1   DCL KNA$WRITE ENTRY(4) ALTRET;
      153     7485    1   DCL KNA$READ ENTRY(4) ALTRET;
      154     7486
      155     7487                                                /* String Substitutions     */
      156     7488        %G$JIT_E;
      157     7550        %LIST;
      158     7551        %GJ_FCN#;
              7552        %EQU GJ_SETFP#=0;
              7553        %EQU GJ_GETPROG#=1;
              7554        %EQU GJ_GETLIB#=2;
              7555        %EQU GJ_GETDB#=3;
              7556        %EQU GJ_GETCP#=4;
              7557        %EQU GJ_GETDONE#=5;
              7558        %EQU GJ_PROG_EXIT#=6;
              7559        %EQU GJ_PROG_ABRT#=7;
              7560        %EQU GJ_PROG_LDTRC#=8;
              7561        %EQU GJ_LDTRC_FP#=9;
              7562        %EQU GJ_GETCCBUF#=10;
              7563        %EQU GJ_LIB_DATA#=11;
              7564        %EQU GJ_DB_DATA#=12;
              7565        %EQU GJ_CP_DATA#=13;
              7566        %EQU GJ_GETLIB_DONE#=14;
              7567        %EQU GJ_GETDB_DONE#=15;
              7568        %EQU GJ_GETCP_DONE#=16;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:6    
              7569        %EQU GJ_WAKEDB#=17;
              7570        %EQU GJ_RUND#=18;
              7571        %EQU GJ_RTNFID#=19;
              7572        %EQU GJ_PROFILE#=20;
              7573        %EQU GJ_MICROFPL#=21;
              7574        %EQU GJ_ACK#=28;
              7575        %EQU GJ_NAK#=29;
      159     7577        %GJ_SHARE#;
              7578        %EQU GJ_SHARE# = 1;
              7579        %EQU GJ_DONTSHARE# = 0;
              7580        %EQU GJ_UNSHARE#= -1;
              7581        %EQU GJ_COPYDATA# = -2;
      160     7583        %PLIST;
      161     7584
      162     7585        %EJECT;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:7    
      163     7586        /*D*   NAME: GJU$GET_PROC
      164     7587
      165     7588               DESCRIPTION:
      166     7589        */
      167     7590
      168     7591        /*    Initialize AUTO.
      169     7592        */
      170     7593    1      PP_SEG$ = ADDR(G$SFILE.PP_SEG1);
      171     7594    1      ASDT_INDX = (P.VP# / 256) + 15;
      172     7595
      173     7596    1      IF ASDT_INDX <= %GM_ISR7#
      174     7597    1      THEN PP_INDX = ASDT_INDX - 16;
      175     7598    1      ELSE PP_INDX = MOD(ASDT_INDX,4); /* special shared processors    */
      176     7599
      177     7600    1      IF (P.SHARE.SHARE_PROC = %GJ_UNSHARE#)
      178     7601    1      THEN PGS_PROC = G$SFILE.PGSZ_PROC;
      179     7602    1      ELSE PGS_PROC = P.PGSZ;
      180     7603
      181     7604    1      IF P.SHARE.SHARE_PROC = %GJ_COPYDATA#
      182     7605    1      THEN SIZE_LEFT = G$SFILE.LIB_WDSZ_DATA *2;
      183     7606    1      ELSE SIZE_LEFT = PGS_PROC * %GM_PAGE_SZ *2;
      184     7607
      185     7608    1      SEGS_64K = (PGS_PROC +255) / 256;
      186     7609
      187     7610        /*D* If the procedure is already shared, it is associated by simply
      188     7611             moving the physical page number from the shared file
      189     7612             tables to the user's ASDT and filling in the access control
      190     7613             bits and size.
      191     7614             GMA$SHARED is then called to add this user to the list of those
      192     7615             users connected to the physical segments.
      193     7616        */
      194     7617    1      IF (P.SHARE.GET_PROC = 0) AND (P.SHARE.SHARE_PROC = 0)
      195     7618    2      THEN DO;
      196     7619    2           IF NOT(G$SFILE.RU_FLGS.LIB)
      197     7620    2           THEN PS_LCP6STT.FPRG_FTCH_SFILE = PS_LCP6STT.FPRG_FTCH_SFILE +1;
      198     7621    2           PGS_PROC = G$SFILE.PGSZ_PROC;
      199     7622
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:8    
      200     7623    3           DO I=0 TO SEGS_64K-1;
      201     7624                     %LOCK(G=GM_MEATLOCK);
      202     7631    3                G$ASDT_USR.DESC.BASE(ASDT_INDX +I) =
      203     7632    3                  PP_SEG$->B$PP_SEG(PP_INDX +I);
      204     7633    3                G$ASDT_USR.DESC.V(ASDT_INDX +I) = '1'B;
      205     7634    3                G$ASDT_USR.DESC.RP(ASDT_INDX +I) = %G_R_USR#;
      206     7635    3                G$ASDT_USR.DESC.WP(ASDT_INDX +I) = %G_RING0#;
      207     7636    3                G$ASDT_USR.DESC.EP(ASDT_INDX +I) = %G_R_USR#;
      208     7637
      209     7638    3                IF PGS_PROC > 256
      210     7639    4                THEN DO;
      211     7640    4                     G$ASDT_USR.DESC.SIZE(ASDT_INDX +I) = 255;
      212     7641    4                     PGS_PROC = PGS_PROC - 256;
      213     7642    4                     END;
      214     7643    4                ELSE DO;
      215     7644    4                     G$ASDT_USR.DESC.SIZE(ASDT_INDX +I) = PGS_PROC -1;
      216     7645    4                     END;
      217     7646
      218     7647                     %UNLOCK(G=GM_MEATLOCK);
      219     7654    3                END;
      220     7655    2           CALL GMA$SHARED(G$SFILE);
      221     7656    2           RETURN;
      222     7657    2           END/* Do if already shared*/;
      223     7658
      224     7659        %EJECT;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:9    
      225     7660
      226     7661        /*D* Otherwise it is a request to read the run-unit, and perhaps
      227     7662             make it shared, to unshare, or to copy the data into the
      228     7663             user's pages.  This is done a segment at a time.
      229     7664        */
      230     7665    2      DO I=0 TO SEGS_64K-1;
      231     7666    2           IF PGS_PROC > 256
      232     7667    3           THEN DO;
      233     7668    3                GMA_#PGS = 256;
      234     7669    3                PGS_PROC = PGS_PROC - 256;
      235     7670    3                END;
      236     7671    3           ELSE DO;
      237     7672    3                GMA_#PGS = PGS_PROC;
      238     7673    3                END;
      239     7674
      240     7675    2           IF SIZE_LEFT < GMA_#PGS * (256 *2)
      241     7676    2           THEN SEG_BYT_SZ = SIZE_LEFT;
      242     7677    2           ELSE SEG_BYT_SZ = GMA_#PGS * (256 * 2);
      243     7678
      244     7679    2           SIZE_LEFT = SIZE_LEFT - SEG_BYT_SZ;
      245     7680
      246     7681    2           GMA_VP# = P.VP# + (I * 256);
      247     7682    2           GMA_SEGX = (GMA_VP# / 256) + 15;
      248     7683
      249     7684        /*D* If the procedure must be read, or this is an call to unshare,
      250     7685             GMA$GET is called to get the pages and map them into the user's ASDT.
      251     7686        */
      252     7687    2           IF P.SHARE.SHARE_PROC ~= %GJ_COPYDATA#
      253     7688    3           THEN DO;
      254     7689    3                IF (P.SHARE.SHARE_PROC = %GJ_UNSHARE#) AND (GMA_SEGX ~= %GM_DB_PROC#)
      255     7690    3                THEN CALL GMA$UNSHARE(GMA_SEGX);
      256     7691
      257     7692    3                CALL GMA$GET(GMA_SEGX,GMA_#PGS,%G_R_USR#,%G_R_MON#,%G_R_USR#)
      258     7693    4                WHENALTRETURN DO;
      259     7694    4                     RD_PARAMS.ERR = EMMFAILED;
      260     7695    4                     ALTRETURN;
      261     7696    4                     END;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:10   
      262     7697    3                END/*do if not copydata*/;
      263     7698
      264     7699        /*D* If the processor is to be made shared, the base physical page
      265     7700             is moved to the shared processor table.
      266     7701        */
      267     7702    2           IF P.SHARE.SHARE_PROC = %GJ_SHARE#
      268     7703    3           THEN DO;
      269     7704                     %LOCK(G=GM_MEATLOCK);
      270     7711    3                PP_SEG$->B$PP_SEG(PP_INDX +I) =
      271     7712    3                  G$ASDT_USR.DESC.BASE(ASDT_INDX +I);
      272     7713                     %UNLOCK(G=GM_MEATLOCK);
      273     7720
      274     7721    3                END;
      275     7722
      276     7723        /*D* If this is a call to unshare or to copy the data, the contents
      277     7724             of the shared processor pages are moved to the user pages.
      278     7725        */
      279     7726    2           IF (P.SHARE.SHARE_PROC = %GJ_UNSHARE#) OR (P.SHARE.SHARE_PROC = %
              7726                    GJ_COPYDATA#)
      280     7727    3           THEN DO;
      281     7728
      282     7729    3                UPAGE$ = G$BPAR1$;
      283     7730    3                SPAGE$ = G$BPAR2$;
      284     7731    3                CALL MOVE_DATA(UPAGE$,SPAGE$);
      285     7732
      286     7733    3                IF P.SHARE.SHARE_PROC ~= %GJ_COPYDATA#
      287     7734    3                THEN G$ASDT_USR.DESC.WP(ASDT_INDX +I) = %G_RING0#;
      288     7735    3                END/*do if unshare*/;
      289     7736
      290     7737    2           END/* DO 0 to segsz-1*/;
      291     7738
      292     7739        /*D* If this is a call to copydata or unshare, control returns
      293     7740             to the caller.
      294     7741        */
      295     7742    1      IF P.SHARE.SHARE_PROC = %GJ_COPYDATA#
      296     7743    1      THEN RETURN;
      297     7744
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:11   
      298     7745    1      IF P.SHARE.SHARE_PROC = %GJ_UNSHARE#
      299     7746    2      THEN DO;
      300     7747    2           RETURN;
      301     7748    2           END;
      302     7749
      303     7750        /*D* The GJS$READ_RU routine is called to read the procedure from the
      304     7751            Host.  After the procedure is read WP in the user's ASDT for the
      305     7752            procedure segments is set to Ring 0.
      306     7753        */
      307     7754    1      PS_LCP6STT.FPRG_FTCH_HOST = PS_LCP6STT.FPRG_FTCH_HOST +1;
      308     7755    1      PROG_TYPE = RD_PARAMS.PROG_TYPE;
      309     7756    1      IF PROG_TYPE = %GJ_LIB_DATA#
      310     7757    1      THEN RD_PARAMS.PROG_TYPE = %GJ_GETLIB#;
      311     7758
      312     7759    1      CALL GJS$READ_RU(RD_PARAMS)
      313     7760    2      WHENRETURN DO;
      314     7761    3           DO I=0 TO SEGS_64K-1;
      315     7762    3                G$ASDT_USR.DESC.WP(ASDT_INDX +I) = %G_RING0#;
      316     7763    3                END;
      317     7764
      318     7765        /*D* After the procedure for a special shared processor has been
      319     7766             read from the host, a DONE message is sent and then reread to
      320     7767             keep everything in sync.  If the error code in the message is
      321     7768             non-zero when returned, it indicates that an error has occured
      322     7769             previously (read a NAK as data, for example), and the alternate
      323     7770             return is taken.
      324     7771             The GJS$STEP routine will send the DONE message after reading
      325     7772             the CCBUF if this is a user run-unit.
      326     7773        */
      327     7774
      328     7775    2           IF G$JIT.PROG_ENTRY ~= %G_PE_BF#
      329     7776    3           THEN DO;
      330     7777    3                IF PROG_TYPE = %GJ_GETLIB#
      331     7778    3                THEN FCN_MSG.FCN = %GJ_GETLIB_DONE#;
      332     7779    3                ELSE IF PROG_TYPE = %GJ_GETDB#
      333     7780    3                     THEN FCN_MSG.FCN = %GJ_GETDB_DONE#;
      334     7781    3                     ELSE EXIT;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:12   
      335     7782
      336     7783    3                V_ = VECTOR(FCN_MSG);
      337     7784    3                FCN_MSG.ERR = '0'B;
      338     7785    3                CALL KNA$WRITE(RD_PARAMS.DCB#,V_,RD_PARAMS.ERR);
      339     7786    3                CALL KNA$READ(RD_PARAMS.DCB#,V_,RD_PARAMS.ERR);
      340     7787    3                IF FCN_MSG.ERR ~= '0'B
      341     7788    4                THEN DO;
      342     7789    4                     RD_PARAMS.ERR = FCN_MSG.ERR;
      343     7790    4                     ALTRETURN;
      344     7791    4                     END;
      345     7792
      346     7793    3                END /* Do if not Bigfoot */;
      347     7794    2           END /* Do on normal return from read*/;
      348     7795
      349     7796    2      WHENALTRETURN DO;
      350     7797    2           ALTRETURN;
      351     7798    2           END;
      352     7799
      353     7800        /*D* If the call to this module was to read the library data from
      354     7801             the host, the shared file entry for the library is completed
      355     7802             and the pages are removed from the user's map.
      356     7803             The pages that have been allocated are counted in GJ_SFILE_LIB_DATA,
      357     7804             but they do not come out of the number of pages that may be
      358     7805             used for saving a copy of processor data, GJ_SFILE_MAX_DATA.
      359     7806        */
      360     7807    1      IF PROG_TYPE = %GJ_LIB_DATA#
      361     7808    2      THEN DO;
      362     7809    2           G$SFILE.LIB_WDSZ_DATA = RD_PARAMS.TOT_SECTSZ;
      363     7810    2           G$SFILE.PGSZ_DATA = P.PGSZ;
      364     7811    2           GJ_SFILE_LIB_DATA = GJ_SFILE_LIB_DATA + P.PGSZ;
      365     7812    2           G$SFILE.SEG_1ST_DATA = PP_INDX;
      366     7813
      367     7814    3           DO I=0 TO SEGS_64K-1;
      368     7815    3                CALL GMA$UNSHARE(ASDT_INDX +I);
      369     7816    3                END;
      370     7817
      371     7818    2           RETURN;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:13   
      372     7819    2           END;
      373     7820
      374     7821        /*D*  If this completes the process of installing the processor,
      375     7822              the initialization of the shared file table entry is completed.
      376     7823
      377     7824             GMA$SHARED is called to begin the process of creating a list
      378     7825             of users that are connected to the physical segments.
      379     7826
      380     7827              A call is made to GHS$RUE to wake-up all users that may be
      381     7828              waiting for it if this is a special shared processor.  If
      382     7829              this is a user run unit, the call to GHS$RUE will be made in
      383     7830              in GJS$STEP after the DONE message verifys that all is OK.
      384     7831        */
      385     7832    1      IF P.SHARE.SHARE_PROC = %GJ_SHARE#
      386     7833    2      THEN DO;
      387     7834    2           G$SFILE.PGSZ_PROC = P.PGSZ;
      388     7835    2           G$SFILE.SEG_1ST_PROC = PP_INDX;
      389     7836
      390     7837    2           GJ_SFILE_CUR_PROC = GJ_SFILE_CUR_PROC + P.PGSZ;
      391     7838    2           IF GJ_SFILE_CUR_PROC > GJ_SFILE_PEAK_PROC
      392     7839    2           THEN GJ_SFILE_PEAK_PROC = GJ_SFILE_CUR_PROC;
      393     7840
      394     7841    2           CALL GMA$SHARED(G$SFILE);
      395     7842
      396     7843    2           IF (PROG_TYPE = %GJ_GETLIB#) OR (PROG_TYPE = %GJ_GETDB#)
      397     7844    3           THEN DO;
      398     7845                     %LOCK (G=G_SLOCK);
      399     7852    3                G$SFILE.LCP6_FLGS = (G$SFILE.LCP6_FLGS &~ %LCP6_INST#);
      400     7853                     %UNLOCK (G=G_SLOCK);
      401     7860    3                CALL GHS$RUE(%GH_EVUQFP);
      402     7861    3                END;
      403     7862    2           END;
      404     7863
      405     7864    1      RETURN;
      406     7865        %EJECT;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:14   
      407     7866        /*F* NAME: GJU$GET_DATA
      408     7867
      409     7868             PURPOSE: To either read the data from a run-unit, and save
      410     7869                      a copy of it for later use, or to copy the saved
      411     7870                      run-unit data into the user's pages.
      412     7871
      413     7872        */
      414     7873
      415     7874    1   GJU$GET_DATA: ENTRY(P) ALTRET;
      416     7875
      417     7876    1      PP_SEG$ = ADDR(G$SFILE.PP_SEG1);
      418     7877           %LOCK (G=G_SLOCK);
      419     7884
      420     7885        /*D* If there is already a copy of the run-unit data in memory,
      421     7886             bump the count of the number of users that are copying it
      422     7887             so it doesn't get released out from under us and set the
      423     7888             internal flag to indicate we should copy it.
      424     7889        */
      425     7890    1      IF (RD_PARAMS.USR_LOC >= %GM_ISR1_BASE   AND   G$SFILE.PGSZ_DATA ~= 0)
      426     7891    1        OR
      427     7892    1        (RD_PARAMS.USR_LOC < %GM_ISR1_BASE   AND   G$SFILE.PGSZ_ROS ~= 0)
      428     7893    2      THEN DO;
      429     7894    2           G$SFILE.USR_DATA.COPY = G$SFILE.USR_DATA.COPY +1;
      430     7895                %UNLOCK (G=G_SLOCK);
      431     7902    2           FIRST_USER = 0;
      432     7903    2           END;
      433     7904
      434     7905        /*D* If there isn't a copy in memory, read it now.  If there is
      435     7906             enough physical memory available, get the pages and keep a
      436     7907             copy of the run-unit initial data around for the next user
      437     7908             of the run-unit.
      438     7909        */
      439     7910    2      ELSE DO;
      440     7911    2           IF G$SFILE.LCP6_FLGS.INST_DATA = '0'B
      441     7912    3           THEN DO;
      442     7913    3                G$SFILE.LCP6_FLGS.INST_DATA = '1'B;
      443     7914    3                FIRST_USER = 1;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:15   
      444     7915    3                END;
      445     7916    2           ELSE FIRST_USER = 0;
      446     7917
      447     7918                %UNLOCK (G=G_SLOCK);
      448     7925    2           CALL GJS$READ_RU(RD_PARAMS);
      449     7926
      450     7927                %LOCK (G=G_SLOCK);
      451     7934
      452     7935    2           IF (FIRST_USER = 1)
      453     7936    3           THEN DO;
      454     7937    3                IF ( (G$SFILE.FRQ >= GJ_SFILE_FRQ) OR (G$SFILE.RU_FLGS.CP) )
      455     7938    3                  AND (GM_SHUF-GM_STEP > P.PGSZ)
      456     7939    3                  AND  (GJ_SFILE_CUR_DATA+P.PGSZ <= GJ_SFILE_MAX_DATA)
      457     7940    4                THEN DO;
      458     7941                          %UNLOCK (G=G_SLOCK);
      459     7948    4                     END;
      460     7949    4                ELSE DO;
      461     7950    4                     G$SFILE.LCP6_FLGS.INST_DATA = '0'B;
      462     7951    4                     GOTO DONT_KEEP_DATA;
      463     7952    4                     END;
      464     7953
      465     7954    3                END/*do if I was to install data*/;
      466     7955
      467     7956    3           ELSE DO;
      468     7957    3   DONT_KEEP_DATA: ;
      469     7958                     %UNLOCK (G=G_SLOCK);
      470     7965    3                RETURN;
      471     7966    3                END;
      472     7967    2           END;
      473     7968
      474     7969        %EJECT;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:16   
      475     7970        /* First, the logic for the Read-Only Segment.
      476     7971        */
      477     7972    1      IF RD_PARAMS.USR_LOC < %GM_ISR1_BASE
      478     7973    2      THEN DO;
      479     7974    2           ASDT_INDX = %GM_ROS#;
      480     7975    2           PP_INDX = -1;
      481     7976    2           I=0;
      482     7977
      483     7978    2           UPAGE$ = PINCRW(G$BPAR1$, RD_PARAMS.USR_LOC - %GM_ROS_BASE);
      484     7979    2           SPAGE$ = G$BPAR2$;
      485     7980
      486     7981    2           SEG_BYT_SZ = RD_PARAMS.TOT_SECTSZ * 2;
      487     7982
      488     7983    2           IF FIRST_USER ~= 0
      489     7984    3           THEN DO;
      490     7985    3                CALL GMA$GETPS(G$SFILE.PP_ROS , P.PGSZ) ALTRET(RESET_N_RTN);
      491     7986
      492     7987    3                G$SFILE.PGSZ_ROS = P.PGSZ;
      493     7988    3                CALL MOVE_DATA(SPAGE$,UPAGE$);
      494     7989    3                CALL GMA$PS2USR(G$SFILE.PP_ROS,0);
      495     7990
      496     7991    3   COUNT_N_RTN: ;
      497     7992    3                GJ_SFILE_CUR_DATA = GJ_SFILE_CUR_DATA + P.PGSZ;
      498     7993    3                IF GJ_SFILE_CUR_DATA > GJ_SFILE_PEAK_DATA
      499     7994    3                THEN GJ_SFILE_PEAK_DATA = GJ_SFILE_CUR_DATA;
      500     7995    3   RESET_N_RTN: ;
      501     7996                     %LOCK (G=G_SLOCK);
      502     8003    3                G$SFILE.LCP6_FLGS.INST_DATA = '0'B;
      503     8004                     %UNLOCK (G=G_SLOCK);
      504     8011    3                END;
      505     8012
      506     8013    3           ELSE DO;
      507     8014    3                CALL MOVE_DATA(UPAGE$,SPAGE$);
      508     8015    3   COPY_RTN:    ;
      509     8016                     %LOCK(G=G_SLOCK);
      510     8023    3                G$SFILE.USR_DATA.COPY = G$SFILE.USR_DATA.COPY -1;
      511     8024                     %UNLOCK(G=G_SLOCK);
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:17   
      512     8031    3                END;
      513     8032
      514     8033    2           RETURN;
      515     8034    2           END/* do if read-only segment*/;
      516     8035
      517     8036        %EJECT;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:18   
      518     8037        /* Next, data with no offset; i.e. no library associated.
      519     8038        */
      520     8039    1      IF RD_PARAMS.USR_LOC = %GM_ISR1_BASE
      521     8040    2      THEN DO;
      522     8041    2           PGS_PROC = P.PGSZ;
      523     8042    2           ASDT_INDX = (P.VP# / 256) +15;
      524     8043    2           PP_INDX = ASDT_INDX - 16;
      525     8044
      526     8045    2           IF FIRST_USER ~= 0
      527     8046    3           THEN DO;
      528     8047    3                G$SFILE.SEG_1ST_DATA = PP_INDX;
      529     8048    3                IF PGS_PROC > 256
      530     8049    3                THEN G$SFILE.USR_DATA.PGSZ_DATA1 = 256;
      531     8050    3                ELSE G$SFILE.USR_DATA.PGSZ_DATA1 = PGS_PROC;
      532     8051    3                END;
      533     8052    2           END;
      534     8053
      535     8054        /*   Worst case is to have to take care of the gap for library data.
      536     8055
      537     8056             Adjust the addresses for the user run-unit data supplied in
      538     8057             the head record to the first L6 page of user data.
      539     8058        */
      540     8059    2      ELSE DO;
      541     8060    2           J = P.VP#;                 /* remember what we started with */
      542     8061
      543     8062    2           RD_PARAMS.USR_LOC = (RD_PARAMS.BIAS / 256) *256;
      544     8063    2           P.VP# = RD_PARAMS.USR_LOC / 256;
      545     8064                       /* get rid of excess pages back to 8 page boundry    */
      546     8065
      547     8066    2           ASDT_INDX = (P.VP# / 256) +15;
      548     8067    2           PP_INDX = ASDT_INDX - 16;
      549     8068    2           I=0;
      550     8069
      551     8070    2           P.PGSZ = P.PGSZ - (P.VP# - J);
      552     8071                                                /* compute new word size    */
      553     8072
      554     8073    2           SLUFF_PGSZ = (P.VP# - %GM_ISR1_VP) - (256 * PP_INDX);
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:19   
      555     8074                       /* the number of pages not used in this 64K segment  */
      556     8075
      557     8076    2           UPAGE$ = PINCRW(G$BPAR1$,SLUFF_PGSZ*256);
      558     8077    2           SPAGE$ = G$BPAR2$;
      559     8078
      560     8079    2           IF (P.PGSZ + SLUFF_PGSZ) > 256
      561     8080    2           THEN GMA_#PGS = 256 - SLUFF_PGSZ;
      562     8081    2           ELSE GMA_#PGS = P.PGSZ;
      563     8082                            /* page size of the first (short) 64K segment   */
      564     8083
      565     8084    2           SEG_BYT_SZ = (GMA_#PGS) * (256 *2);
      566     8085                            /* byte size of the first (short) 64K segment   */
      567     8086
      568     8087        /*D* If saving the data in memory, get the physical pages for
      569     8088             the saved copy and move the data from the user's memory
      570     8089             into the physical pages aquired.
      571     8090        */
      572     8091    2           IF FIRST_USER ~= 0
      573     8092    3           THEN DO;
      574     8093    3                CALL GMA$GETPS(PP_SEG$->B$PP_SEG(PP_INDX),GMA_#PGS) ALTRET(RESET_N_RTN)
              8093                         ;
      575     8094
      576     8095
      577     8096    3                CALL MOVE_DATA(SPAGE$,UPAGE$);
      578     8097    3                CALL GMA$PS2USR(PP_SEG$->B$PP_SEG(PP_INDX +I),0);
      579     8098
      580     8099    3                GJ_SFILE_CUR_DATA = GJ_SFILE_CUR_DATA + P.PGSZ;
      581     8100    3                IF GJ_SFILE_CUR_DATA > GJ_SFILE_PEAK_DATA
      582     8101    3                THEN GJ_SFILE_PEAK_DATA = GJ_SFILE_CUR_DATA;
      583     8102
      584     8103    3                G$SFILE.SEG_1ST_DATA = PP_INDX;
      585     8104    3                G$SFILE.USR_DATA.PGSZ_DATA1 = GMA_#PGS;
      586     8105    3                END;
      587     8106
      588     8107        /*D* Or, simply copy the data from the saved copy to the user memory.
      589     8108        */
      590     8109    2           ELSE CALL MOVE_DATA(UPAGE$,SPAGE$);
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:20   
      591     8110
      592     8111    2           PGS_PROC = P.PGSZ - GMA_#PGS;
      593     8112    2           ASDT_INDX = ASDT_INDX+1;
      594     8113    2           PP_INDX = PP_INDX +1;
      595     8114
      596     8115    2           END/*do if bias not ISR1_BASE*/;
      597     8116
      598     8117
      599     8118        /* Now do the rest a segment at a time.
      600     8119        */
      601     8120
      602     8121    1      IF PGS_PROC ~= 0
      603     8122    2      THEN DO;
      604     8123    2           SEGS_64K = (PGS_PROC +255) / 256;
      605     8124
      606     8125    3           DO I=0 TO SEGS_64K-1;
      607     8126    3                IF PGS_PROC > 256
      608     8127    4                THEN DO;
      609     8128    4                     GMA_#PGS = 256;
      610     8129    4                     PGS_PROC = PGS_PROC - 256;
      611     8130    4                     END;
      612     8131    4                ELSE DO;
      613     8132    4                     GMA_#PGS = PGS_PROC;
      614     8133    4                     END;
      615     8134
      616     8135    3                SEG_BYT_SZ = GMA_#PGS * (256 * 2);
      617     8136    3                UPAGE$ = G$BPAR1$;
      618     8137    3                SPAGE$ = G$BPAR2$;
      619     8138
      620     8139    3                IF FIRST_USER ~= 0
      621     8140    4                THEN DO;
      622     8141    4                     CALL GMA$GETPS(PP_SEG$->B$PP_SEG(PP_INDX +I) , GMA_#PGS)
      623     8142    5                     WHENALTRETURN DO;
      624     8143
      625     8144
      626     8145    5                          END;
      627     8146
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:21   
      628     8147    4                     CALL MOVE_DATA(SPAGE$,UPAGE$);
      629     8148    4                     CALL GMA$PS2USR(PP_SEG$->B$PP_SEG(PP_INDX +I),0);
      630     8149    4                     END;
      631     8150
      632     8151    3                ELSE CALL MOVE_DATA(UPAGE$,SPAGE$);
      633     8152
      634     8153    3                END /*do to segs_64k */;
      635     8154    2           END /* do if PGS_PROC ~= 0 */;
      636     8155
      637     8156    1      IF FIRST_USER = 1
      638     8157    2      THEN DO;
      639     8158    2           G$SFILE.PGSZ_DATA = P.PGSZ;
      640     8159    2           GOTO COUNT_N_RTN;
      641     8160    2           END;
      642     8161
      643     8162    1      ELSE GOTO COPY_RTN;
      644     8163
      645     8164
      646     8165        %EJECT;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:22   
      647     8166        /*I* NAME: MOVE_DATA
      648     8167
      649     8168             PURPOSE: To map and move.
      650     8169
      651     8170             INPUT: TO$ = address of where data is to go
      652     8171                    FROM$ = address of where data is now
      653     8172
      654     8173             CALL:  ASDT_INDX = index into G$ASDT_USR for descriptor that is
      655     8174                                to be mapped into G$ASDT_MCL.BPAR1
      656     8175
      657     8176                    PP_INDX   = index into B$PP_SEG for physical page to be
      658     8177                                mapped into G$ASDT_MCL.BPAR2.
      659     8178
      660     8179                    I = increment to be applied to ASDT_INDX and PP_INDX.
      661     8180
      662     8181                    SEG_BYT_SZ = byte size of data to be moved.
      663     8182
      664     8183                    CALL MOVE_DATA(TO$, FROM$);
      665     8184        */
      666     8185    1   MOVE_DATA: PROC(TO$,FROM$);
      667     8186
      668     8187    2   DCL TO$ PTR;
      669     8188    2   DCL FROM$ PTR;
      670     8189
      671     8190            %LOCK (G=GM_MEATLOCK);
      672     8197    2      G$ASDT_MCL.BPAR1 = G$ASDT_USR.DESC(ASDT_INDX +I);
      673     8198    2      G$ASDT_MCL.BPAR2 = G$ASDT_USR.DESC(ASDT_INDX +I);
      674     8199    2      G$ASDT_MCL.BPAR2.BASE = PP_SEG$->B$PP_SEG(PP_INDX +I);
      675     8200           %UNLOCK (G=GM_MEATLOCK);
      676     8207
      677     8208    2      CALL GHH$ASD(G$BPAR1$,G$ASDT_MCL.BPAR1);
      678     8209    2      CALL GHH$ASD(G$BPAR2$,G$ASDT_MCL.BPAR2);
      679     8210
      680     8211    2      MOVE_SZ = 32 * 512;                  /* move 32 pages at a time  */
      681     8212
      682     8213    3      DO WHILE(SEG_BYT_SZ ~= 0);
      683     8214    3           IF SEG_BYT_SZ < MOVE_SZ
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:23   
      684     8215    3           THEN MOVE_SZ = SEG_BYT_SZ;
      685     8216
      686     8217    3           TO$->B$APAGE = FROM$->B$APAGE;
      687     8218
      688     8219    3           TO$ = PINCRC(TO$,MOVE_SZ);
      689     8220    3           FROM$ = PINCRC(FROM$,MOVE_SZ);
      690     8221    3           SEG_BYT_SZ = SEG_BYT_SZ - MOVE_SZ;
      691     8222    3           END/* do while size_left ~= 0 */;
      692     8223
      693     8224    2      RETURN;
      694     8225
      695     8226    2   END MOVE_DATA;
      696     8227    1   END GJU$GET_PROC;
      697     8228        %EOD;

PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:24   
--  Include file information  --

   K_ID_E.:E05TOU  is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   M_ERRORS_C.:E05TOU  is referenced.
   GM_VIRTUAL_E.:E05TOU  is referenced.
   GH_SCHD_E.:E05TOU  is referenced.
   G_SFILE_M.:E05TOU  is referenced.
   G_JIT_M.:E05TOU  is referenced.
   GJ_MACROS_M.:E05TOU  is referenced.
   GJ_MSG_M.:E05TOU  is referenced.
   GH_GATE_M.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GJU$GET_PROC.

   Procedure GJU$GET_PROC requires 1743 words for executable code.
   Procedure GJU$GET_PROC requires 52 words of local(AUTO) storage.

PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:25   

 Object Unit name= GJU$GET_PROC                               File name= GJU$UTIL.:E05TOU
 UTS= JUL 29 '97 22:04:35.64 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0  RoData even  UTS      2      2  GJU$GET_PROC
    1   Proc  even  none  1743    6CF  GJU$GET_PROC
    2  RoData even  none     8      8  GJU$GET_PROC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        1  GJU$GET_PROC
     1    321          yes     yes      Std        1  GJU$GET_DATA
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:26   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 GHH$LOCK
 yes     yes           Std       1 GHH$UNLOCK
 yes     yes           Std       2 GMA$GETPS
 yes     yes           Std       2 GMA$PS2USR
 yes     yes           Std       1 GMA$SHARED
 yes     yes           Std       5 GMA$GET
 yes     yes           Std       4 GHS$RUE
 yes     yes           Std       1 GMA$UNSHARE
 yes     yes           Std       1 GJS$READ_RU
 yes     yes           Std       4 KNA$READ
 yes     yes           Std       4 KNA$WRITE
         yes           Std       2 GHH$ASD
                       nStd      0 X6A_AUTO_1
                       nStd      0 X6A_ARET
                       nStd      0 X6A_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     GJ_SFILE_CUR_DATA                     GJ_SFILE_MAX_DATA                     GJ_SFILE_PEAK_DATA
     GJ_SFILE_LIB_DATA                     GJ_SFILE_CUR_PROC                     GJ_SFILE_PEAK_PROC
     GJ_SFILE_FRQ                          GM_SHUF                               GM_STEP
     GM_MEATLOCK                           G_SLOCK                               PS_LCP6STT
r    G$ASDT_USR$                      r    G$ASDT_MCL$                      r    G$BPAR1$
r    G$BPAR2$                         r    G$JIT$                           r    G$ROS$
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:27   


        1        1        /*M* GJU$UTIL  LCP-6 Job Step utility subroutines.  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ENU=0,ECU=0,CRM=70  */
        8        8
        9        9        /*F* NAME:   GJU$UTIL
       10       10
       11       11             PURPOSE: LCP-6 Job Step Subroutines.
       12       12
       13       13             DESCRIPTION:
       14       14             The GJU$UTIL module contains the following compile units:
       15       15
       16       16                GJU$GET_PROC - to associate program or special shared
       17       17                               processor procedure with a user.
       18       18
       19       19                GJU$GET_DB - to associate or enter a debugger.
       20       20
       21       21                GJU$XCON - to provide for entering exit control.
       22       22
       23       23                GJU$EVENT - to handle monitor events for this user.
       24       24
       25       25        */
       26       26
       27       27        %EJECT;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:28   
       28       28        /*F* NAME: GJU$GET_PROC
       29       29
       30       30             PURPOSE:  To either read the procedure from the run-unit
       31       31                       and possibly share it or simply build the descriptors
       32       32                       in ASDT_USR for the already shared procedure.
       33       33
       34       34             INPUT:    GJ_GETPROC_PARAMS:
       35       35
       36       36                       RD_PARAMS$ - Contains the address of the parameters
       37       37                                      to be passed to GJS$READ_RU.
       38       38
       39       39                       SFILE$ - PTR. Contains the address of the run-unit
       40       40                                     entry in the shared file tables.
       41       41
       42       42                       GET_PROC - To be set non-zero if the procedure
       43       43                                  must be read from the host.
       44       44
       45       45                       SHARE_PROC - To be set to 1 if after reading the
       46       46                                    procedure from the host, the procedure is
       47       47                                    to be made shared in the shared file table
       48       48                                    entry identified by PROC$.
       49       49                                    To be set to zero if not to be made shared.
       50       50                                    To be set to -1 if this is an unshare request.
       51       51                                    To be set to -2 if this is a copydata request.
       52       52
       53       53                       VP# = first virtual page of the program section.
       54       54
       55       55                       PGSZ = # of pages in the program section.
       56       56
       57       57             OUTPUT:   RD_PARAMS.ERR if an error occurs
       58       58
       59       59             CALL:     CALL GJU$GET_PROC(GJ_GETPROC_PARAMS) ALTRET(LABEL);
       60       60
       61       61        */
       62       62        GJU$GET_PROC: PROC(P) ALTRET;

     62   1 000000  D380 0000 0000  xent GJU$GET_PROC    LNJ,B5   X6A_AUTO_1
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:29   
          1 000003       0034 0001                       DC       52,1

       63       63
       64       64        %INCLUDE GH_GATE_M;
       65      105        %INCLUDE GJ_MSG_M;
       66      418        %INCLUDE GJ_MACROS_M;
       67      891        %INCLUDE G_JIT_M;
       68     1156        %INCLUDE G_SFILE_M;
       69     1216 S      %INCLUDE GH_LCP6_M;
       70     1217 S      %INCLUDE GU_LCP6_M;
       71     1218
       72     1219 S      %INCLUDE G_LCP6_E;
       73     1220        %INCLUDE GH_SCHD_E;
       74     1316        %INCLUDE GM_VIRTUAL_E;
       75     1526        %INCLUDE M_ERRORS_C;
       76     1590        %INCLUDE P_FEP_M;
       77     2028        %INCLUDE KL_MACRO_C;
       78     5380        %INCLUDE K_ID_E;
       79     5430
       80     5431                                                /* Input parameter          */
       81     5432        %GJ_GETPROC_PARAMS (FPTN=P,STCLASS= );
       82     5477
       83     5478                                                /* AUTO Storage             */
       84     5479    1   DCL I UBIN;
       85     5480    1   DCL J UBIN;
       86     5481    1   DCL PROG_TYPE UBIN;
       87     5482    1   DCL UPAGE$ PTR;
       88     5483    1   DCL SPAGE$ PTR;
       89     5484    1   DCL PP_SEG$ PTR;
       90     5485    1   DCL PGS_PROC UBIN;
       91     5486    1   DCL ASDT_INDX UBIN;
       92     5487    1   DCL PP_INDX SBIN;
       93     5488    1   DCL SEGS_64K UBIN;
       94     5489    1   DCL GMA_VP# UBIN;
       95     5490    1   DCL GMA_SEGX UBIN;
       96     5491    1   DCL GMA_#PGS UBIN;
       97     5492    1   DCL SIZE_LEFT UBIN(32);
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:30   
       98     5493    1   DCL SEG_BYT_SZ UBIN(32);
       99     5494    1   DCL MOVE_SZ UBIN;
      100     5495    1   DCL FIRST_USER UBIN;
      101     5496    1   DCL SLUFF_PGSZ UBIN;
      102     5497    1   DCL V_ VECTOR;
      103     5498
      104     5499        %GJ_FCN_MSG (FPTN=FCN_MSG,STCLASS=AUTO);
      105     5569
      106     5570                                                /* BASED Structures         */
      107     5571        %GJ_READ_PARAMS (FPTN=RD_PARAMS,STCLASS="BASED(P.RD_PARAMS$)");
      108     5668        %G$SFILE (FPTN=G$SFILE,STCLASS="BASED(P.SHARE.SFILE$)",ARRAYED=NO);
      109     5705        %G$ASDT (FPTN=G$ASDT_USR,STCLASS="BASED(G$ASDT_USR$)");
      110     5734        %G$ASDT_MCL (STCLASS="BASED(G$ASDT_MCL$)");
      111     6428        %G$JIT (FPTN=G$JIT,STCLASS="BASED(G$JIT$)");
      112     6842
      113     6843    1   DCL B$APAGE CHAR(MOVE_SZ) BASED;
      114     6844    1   DCL B$PP_SEG(0:6) UBIN BASED;           /* G$SFILE.PP_SEGn          */
      115     6845
      116     6846                                                /* Internal data            */
      117     6847        %VLP_ERRCODE (FPTN=EMMFAILED,ERR#=%E$MEMLIMIT,SEV=G_SEV_ERROR#,
      118     6848                            STCLASS=CONSTANT,FCG=GJ,MID=U,MON='1'B);
      119     6894
      120     6895                                                /* Internal Data            */
      121     6896                                                /* External Data            */
      122     6897    1   DCL GJ_SFILE_CUR_DATA UBIN SYMREF;
      123     6898    1   DCL GJ_SFILE_MAX_DATA UBIN SYMREF;
      124     6899    1   DCL GJ_SFILE_PEAK_DATA UBIN SYMREF;
      125     6900    1   DCL GJ_SFILE_LIB_DATA UBIN SYMREF;
      126     6901    1   DCL GJ_SFILE_CUR_PROC UBIN SYMREF;
      127     6902    1   DCL GJ_SFILE_PEAK_PROC UBIN SYMREF;
      128     6903    1   DCL GJ_SFILE_FRQ UBIN SYMREF;
      129     6904
      130     6905    1   DCL GM_SHUF UBIN SYMREF;
      131     6906    1   DCL GM_STEP UBIN SYMREF;
      132     6907        %GATE (FPTN=GM_MEATLOCK,STCLASS=SYMREF);
      133     6926        %GATE (FPTN=G_SLOCK,STCLASS=SYMREF);
      134     6945        %K#ENTID_E;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:31   
      135     6964        %PS_LCP6STT (STCLASS=SYMREF);
      136     7468    1   DCL G$ASDT_USR$ PTR SYMREF READONLY;
      137     7469    1   DCL G$ASDT_MCL$ PTR SYMREF READONLY;
      138     7470    1   DCL G$BPAR1$ PTR SYMREF READONLY;
      139     7471    1   DCL G$BPAR2$ PTR SYMREF READONLY;
      140     7472    1   DCL G$JIT$ PTR SYMREF READONLY;
      141     7473
      142     7474                                                /* External Procedures      */
      143     7475    1   DCL GHH$ASD ENTRY(2);
      144     7476    1   DCL GMA$GET ENTRY(5) ALTRET;
      145     7477    1   DCL GMA$GETPS ENTRY(2) ALTRET;
      146     7478    1   DCL GMA$PS2USR ENTRY(2) ALTRET;
      147     7479    1   DCL GMA$RELPS ENTRY(2) ALTRET;
      148     7480    1   DCL GMA$SHARED ENTRY(1) ALTRET;
      149     7481    1   DCL GMA$UNSHARE ENTRY(1) ALTRET;
      150     7482    1   DCL GJS$READ_RU ENTRY(1) ALTRET;
      151     7483    1   DCL GHS$RUE ENTRY(4) ALTRET;
      152     7484    1   DCL KNA$WRITE ENTRY(4) ALTRET;
      153     7485    1   DCL KNA$READ ENTRY(4) ALTRET;
      154     7486
      155     7487                                                /* String Substitutions     */
      156     7488        %G$JIT_E;
      157     7550        %LIST;
      158     7551        %GJ_FCN#;
              7552        %EQU GJ_SETFP#=0;
              7553        %EQU GJ_GETPROG#=1;
              7554        %EQU GJ_GETLIB#=2;
              7555        %EQU GJ_GETDB#=3;
              7556        %EQU GJ_GETCP#=4;
              7557        %EQU GJ_GETDONE#=5;
              7558        %EQU GJ_PROG_EXIT#=6;
              7559        %EQU GJ_PROG_ABRT#=7;
              7560        %EQU GJ_PROG_LDTRC#=8;
              7561        %EQU GJ_LDTRC_FP#=9;
              7562        %EQU GJ_GETCCBUF#=10;
              7563        %EQU GJ_LIB_DATA#=11;
              7564        %EQU GJ_DB_DATA#=12;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:32   
              7565        %EQU GJ_CP_DATA#=13;
              7566        %EQU GJ_GETLIB_DONE#=14;
              7567        %EQU GJ_GETDB_DONE#=15;
              7568        %EQU GJ_GETCP_DONE#=16;
              7569        %EQU GJ_WAKEDB#=17;
              7570        %EQU GJ_RUND#=18;
              7571        %EQU GJ_RTNFID#=19;
              7572        %EQU GJ_PROFILE#=20;
              7573        %EQU GJ_MICROFPL#=21;
              7574        %EQU GJ_ACK#=28;
              7575        %EQU GJ_NAK#=29;
      159     7577        %GJ_SHARE#;
              7578        %EQU GJ_SHARE# = 1;
              7579        %EQU GJ_DONTSHARE# = 0;
              7580        %EQU GJ_UNSHARE#= -1;
              7581        %EQU GJ_COPYDATA# = -2;
      160     7583        %PLIST;
      161     7584
      162     7585        %EJECT;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:33   
      163     7586        /*D*   NAME: GJU$GET_PROC
      164     7587
      165     7588               DESCRIPTION:
      166     7589        */
      167     7590
      168     7591        /*    Initialize AUTO.
      169     7592        */
      170     7593    1      PP_SEG$ = ADDR(G$SFILE.PP_SEG1);

   7593   1 000005  ECC7 0004                            LDB,B6   @P,AUTO
          1 000007  DCC6 0002                            LDB,B5   2,B6
          1 000009  CBC5 0029                            LAB,B4   41,B5
          1 00000B  CFC7 000D                            STB,B4   PP_SEG$,AUTO

      171     7594    1      ASDT_INDX = (P.VP# / 256) + 15;

   7594   1 00000D  E846 0006                            LDR,R6   6,B6
          1 00000F  6048                                 SOR,R6   8
          1 000010  6E0F                                 ADV,R6   15
          1 000011  EF47 0010                            STR,R6   ASDT_INDX,AUTO

      172     7595
      173     7596    1      IF ASDT_INDX <= %GM_ISR7#

   7596   1 000013  6D16                                 CMV,R6   22
          1 000014  0301 0006                            BG       s:7598,PREL

      174     7597    1      THEN PP_INDX = ASDT_INDX - 16;

   7597   1 000016  6EF0                                 ADV,R6   -16
          1 000017  EF47 0011                            STR,R6   PP_INDX,AUTO
          1 000019  0F81 0005                            B        s:7600,PREL

      175     7598    1      ELSE PP_INDX = MOD(ASDT_INDX,4); /* special shared processors    */

   7598   1 00001B  E570 0003                            AND,R6   3,IMO
          1 00001D  EF47 0011                            STR,R6   PP_INDX,AUTO
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:34   

      176     7599
      177     7600    1      IF (P.SHARE.SHARE_PROC = %GJ_UNSHARE#)

   7600   1 00001F  D846 0005                            LDR,R5   5,B6
          1 000021  5DFF                                 CMV,R5   -1
          1 000022  0981 0007                            BNE      s:7602,PREL

      178     7601    1      THEN PGS_PROC = G$SFILE.PGSZ_PROC;

   7601   1 000024  C845 0027                            LDR,R4   39,B5
          1 000026  CF47 000F                            STR,R4   PGS_PROC,AUTO
          1 000028  0F81 0005                            B        s:7604,PREL

      179     7602    1      ELSE PGS_PROC = P.PGSZ;

   7602   1 00002A  C846 0007                            LDR,R4   7,B6
          1 00002C  CF47 000F                            STR,R4   PGS_PROC,AUTO

      180     7603
      181     7604    1      IF P.SHARE.SHARE_PROC = %GJ_COPYDATA#

   7604   1 00002E  5DFE                                 CMV,R5   -2
          1 00002F  0981 0008                            BNE      s:7606,PREL

      182     7605    1      THEN SIZE_LEFT = G$SFILE.LIB_WDSZ_DATA *2;

   7605   1 000031  8CC5 0024                            LDI      36,B5
          1 000033  7081                                 DOL,R7   1
          1 000034  8D47 0016                            SDI      SIZE_LEFT,AUTO
          1 000036  0F81 0006                            B        s:7608,PREL

      183     7606    1      ELSE SIZE_LEFT = PGS_PROC * %GM_PAGE_SZ *2;

   7606   1 000038  F854                                 LDR,R7   R4
          1 000039  6C00                                 LDV,R6   0
          1 00003A  7089                                 DOL,R7   9
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:35   
          1 00003B  8D47 0016                            SDI      SIZE_LEFT,AUTO

      184     7607
      185     7608    1      SEGS_64K = (PGS_PROC +255) / 256;

   7608   1 00003D  CA70 00FF                            ADD,R4   255,IMO
          1 00003F  4048                                 SOR,R4   8
          1 000040  CF47 0012                            STR,R4   SEGS_64K,AUTO

      186     7609
      187     7610        /*D* If the procedure is already shared, it is associated by simply
      188     7611             moving the physical page number from the shared file
      189     7612             tables to the user's ASDT and filling in the access control
      190     7613             bits and size.
      191     7614             GMA$SHARED is then called to add this user to the list of those
      192     7615             users connected to the physical segments.
      193     7616        */
      194     7617    1      IF (P.SHARE.GET_PROC = 0) AND (P.SHARE.SHARE_PROC = 0)

   7617   1 000042  B846 0004                            LDR,R3   4,B6
          1 000044  3981 009A                            BNEZ,R3  s:7665,PREL
          1 000046  5981 0098                            BNEZ,R5  s:7665,PREL

      195     7618    2      THEN DO;

      196     7619    2           IF NOT(G$SFILE.RU_FLGS.LIB)

   7619   1 000048  82C5 001D                            LB,'4000'X        29,B5
   7619   1 00004A       4000
          1 00004B  0501 0007                            BBT      s:7621,PREL

      197     7620    2           THEN PS_LCP6STT.FPRG_FTCH_SFILE = PS_LCP6STT.FPRG_FTCH_SFILE +1;

   7620   1 00004D  8A80 0000 0089  xsym                 INC      PS_LCP6STT+137
          1 000050  8E80 0000 0088  xsym                 CAD      PS_LCP6STT+136

      198     7621    2           PGS_PROC = G$SFILE.PGSZ_PROC;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:36   

   7621   1 000053  DCC6 0002                            LDB,B5   2,B6
          1 000055  D845 0027                            LDR,R5   39,B5
          1 000057  DF47 000F                            STR,R5   PGS_PROC,AUTO

      199     7622
      200     7623    3           DO I=0 TO SEGS_64K-1;

   7623   1 000059  8747 0006                            CL       I,AUTO
          1 00005B  0F81 006C                            B        s:7654+2,PREL

      201     7624                     %LOCK(G=GM_MEATLOCK);

   7629   1 00005D  BB80 0000 0000  02                   LAB,B3   0
          1 000060  CBF0 0100                            LAB,B4   256,IMO
          1 000062  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          1 000065       0001                            DC       s:7631,PREL

      202     7631    3                G$ASDT_USR.DESC.BASE(ASDT_INDX +I) =

   7631   1 000066  E847 0010                            LDR,R6   ASDT_INDX,AUTO
          1 000068  EA47 0006                            ADD,R6   I,AUTO
          1 00006A  D847 0011                            LDR,R5   PP_INDX,AUTO
          1 00006C  DA47 0006                            ADD,R5   I,AUTO
          1 00006E  ECC7 000D                            LDB,B6   PP_SEG$,AUTO
          1 000070  B855                                 LDR,R3   R5
          1 000071  D836                                 LDR,R5   ,B6,R3
          1 000072  DC80 0000 0000  xsym                 LDB,B5   G$ASDT_USR$
          1 000075  B856                                 LDR,R3   R6
          1 000076  3001                                 SOL,R3   1
          1 000077  DAB5                                 SRM,R5,'7FFF'X    ,B5,R3
          1 000078       7FFF

      203     7632    3                  PP_SEG$->B$PP_SEG(PP_INDX +I);
      204     7633    3                G$ASDT_USR.DESC.V(ASDT_INDX +I) = '1'B;

   7633   1 000079  E847 0010                            LDR,R6   ASDT_INDX,AUTO
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:37   
          1 00007B  EA47 0006                            ADD,R6   I,AUTO
          1 00007D  B856                                 LDR,R3   R6
          1 00007E  3005                                 SOL,R3   5
          1 00007F  8935                                 LBT      ,B5,R3

      205     7634    3                G$ASDT_USR.DESC.RP(ASDT_INDX +I) = %G_R_USR#;

   7634   1 000080  E847 0010                            LDR,R6   ASDT_INDX,AUTO
          1 000082  EA47 0006                            ADD,R6   I,AUTO
          1 000084  5C00                                 LDV,R5   0
          1 000085  B856                                 LDR,R3   R6
          1 000086  3001                                 SOL,R3   1
          1 000087  3E01                                 ADV,R3   1
          1 000088  DAB5                                 SRM,R5,'C000'X    ,B5,R3
          1 000089       C000

      206     7635    3                G$ASDT_USR.DESC.WP(ASDT_INDX +I) = %G_RING0#;

   7635   1 00008A  E847 0010                            LDR,R6   ASDT_INDX,AUTO
          1 00008C  EA47 0006                            ADD,R6   I,AUTO
          1 00008E  C870 3000                            LDR,R4   12288,IMO
          1 000090  B856                                 LDR,R3   R6
          1 000091  3001                                 SOL,R3   1
          1 000092  3E01                                 ADV,R3   1
          1 000093  CAB5                                 SRM,R4,'3000'X    ,B5,R3
          1 000094       3000

      207     7636    3                G$ASDT_USR.DESC.EP(ASDT_INDX +I) = %G_R_USR#;

   7636   1 000095  E847 0010                            LDR,R6   ASDT_INDX,AUTO
          1 000097  EA47 0006                            ADD,R6   I,AUTO
          1 000099  B856                                 LDR,R3   R6
          1 00009A  3001                                 SOL,R3   1
          1 00009B  3E01                                 ADV,R3   1
          1 00009C  DAB5                                 SRM,R5,'0C00'X    ,B5,R3
          1 00009D       0C00

PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:38   
      208     7637
      209     7638    3                IF PGS_PROC > 256

   7638   1 00009E  E847 000F                            LDR,R6   PGS_PROC,AUTO
          1 0000A0  E970 0100                            CMR,R6   256,IMO
          1 0000A2  0381 0011                            BLE      s:7644,PREL

      210     7639    4                THEN DO;

      211     7640    4                     G$ASDT_USR.DESC.SIZE(ASDT_INDX +I) = 255;

   7640   1 0000A4  B847 0010                            LDR,R3   ASDT_INDX,AUTO
          1 0000A6  BA47 0006                            ADD,R3   I,AUTO
          1 0000A8  A870 00FF                            LDR,R2   255,IMO
          1 0000AA  3001                                 SOL,R3   1
          1 0000AB  3E01                                 ADV,R3   1
          1 0000AC  AAB5                                 SRM,R2,'01FF'X    ,B5,R3
          1 0000AD       01FF

      212     7641    4                     PGS_PROC = PGS_PROC - 256;

   7641   1 0000AE  EA70 FF00                            ADD,R6   -256,IMO
          1 0000B0  EF47 000F                            STR,R6   PGS_PROC,AUTO

      213     7642    4                     END;

   7642   1 0000B2  0F81 000A                            B        s:7652,PREL

      214     7643    4                ELSE DO;

      215     7644    4                     G$ASDT_USR.DESC.SIZE(ASDT_INDX +I) = PGS_PROC -1;

   7644   1 0000B4  B847 0010                            LDR,R3   ASDT_INDX,AUTO
          1 0000B6  BA47 0006                            ADD,R3   I,AUTO
          1 0000B8  6EFF                                 ADV,R6   -1
          1 0000B9  3001                                 SOL,R3   1
          1 0000BA  3E01                                 ADV,R3   1
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:39   
          1 0000BB  EAB5                                 SRM,R6,'01FF'X    ,B5,R3
          1 0000BC       01FF

      216     7645    4                     END;

      217     7646
      218     7647                     %UNLOCK(G=GM_MEATLOCK);

   7652   1 0000BD  BB80 0000 0000  02                   LAB,B3   0
          1 0000C0  CBF0 0100                            LAB,B4   256,IMO
          1 0000C2  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          1 0000C5       0001                            DC       s:7654,PREL

      219     7654    3                END;

   7654   1 0000C6  8AC7 0006                            INC      I,AUTO
          1 0000C8  E847 0006                            LDR,R6   I,AUTO
          1 0000CA  E947 0012                            CMR,R6   SEGS_64K,AUTO
          1 0000CC  0201 FF90                            BL       s:7629,PREL

      220     7655    2           CALL GMA$SHARED(G$SFILE);

   7655   1 0000CE  ECC7 0004                            LDB,B6   @P,AUTO
          1 0000D0  DCC6 0002                            LDB,B5   2,B6
          1 0000D2  DFC7 002A                            STB,B5   @FROM$+2,AUTO
          1 0000D4  BBC7 002A                            LAB,B3   @FROM$+2,AUTO
          1 0000D6  CBF0 0100                            LAB,B4   256,IMO
          1 0000D8  E380 0000 0000  xent                 LNJ,B6   GMA$SHARED
          1 0000DB       0001                            DC       s:7656,PREL

      221     7656    2           RETURN;

   7656   1 0000DC  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      222     7657    2           END/* Do if already shared*/;
      223     7658
      224     7659        %EJECT;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:40   
      225     7660
      226     7661        /*D* Otherwise it is a request to read the run-unit, and perhaps
      227     7662             make it shared, to unshare, or to copy the data into the
      228     7663             user's pages.  This is done a segment at a time.
      229     7664        */
      230     7665    2      DO I=0 TO SEGS_64K-1;

   7665   1 0000DF  8747 0006                            CL       I,AUTO
          1 0000E1  0F81 00E1                            B        s:7737+2,PREL

      231     7666    2           IF PGS_PROC > 256

   7666   1 0000E3  E847 000F                            LDR,R6   PGS_PROC,AUTO
          1 0000E5  E970 0100                            CMR,R6   256,IMO
          1 0000E7  0381 000B                            BLE      s:7672,PREL

      232     7667    3           THEN DO;

      233     7668    3                GMA_#PGS = 256;

   7668   1 0000E9  D870 0100                            LDR,R5   256,IMO
          1 0000EB  DF47 0015                            STR,R5   GMA_#PGS,AUTO

      234     7669    3                PGS_PROC = PGS_PROC - 256;

   7669   1 0000ED  EA70 FF00                            ADD,R6   -256,IMO
          1 0000EF  EF47 000F                            STR,R6   PGS_PROC,AUTO

      235     7670    3                END;

   7670   1 0000F1  0F81 0003                            B        s:7675,PREL

      236     7671    3           ELSE DO;

      237     7672    3                GMA_#PGS = PGS_PROC;

   7672   1 0000F3  EF47 0015                            STR,R6   GMA_#PGS,AUTO
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:41   

      238     7673    3                END;

      239     7674
      240     7675    2           IF SIZE_LEFT < GMA_#PGS * (256 *2)

   7675   1 0000F5  F847 0015                            LDR,R7   GMA_#PGS,AUTO
          1 0000F7  6C00                                 LDV,R6   0
          1 0000F8  7089                                 DOL,R7   9
          1 0000F9  84C7 0016                            SID      SIZE_LEFT,AUTO
          1 0000FB  0681 000B                            BCF      s:7677,PREL
          1 0000FD  6981 0003                            BNEZ,R6  s:7676,PREL
          1 0000FF  7901 0007                            BEZ,R7   s:7677,PREL

      241     7676    2           THEN SEG_BYT_SZ = SIZE_LEFT;

   7676   1 000101  8CC7 0016                            LDI      SIZE_LEFT,AUTO
          1 000103  8D47 0018                            SDI      SEG_BYT_SZ,AUTO
          1 000105  0F81 0007                            B        s:7679,PREL

      242     7677    2           ELSE SEG_BYT_SZ = GMA_#PGS * (256 * 2);

   7677   1 000107  F847 0015                            LDR,R7   GMA_#PGS,AUTO
          1 000109  6C00                                 LDV,R6   0
          1 00010A  7089                                 DOL,R7   9
          1 00010B  8D47 0018                            SDI      SEG_BYT_SZ,AUTO

      243     7678
      244     7679    2           SIZE_LEFT = SIZE_LEFT - SEG_BYT_SZ;

   7679   1 00010D  8CC7 0016                            LDI      SIZE_LEFT,AUTO
          1 00010F  84C7 0018                            SID      SEG_BYT_SZ,AUTO
          1 000111  8D47 0016                            SDI      SIZE_LEFT,AUTO

      245     7680
      246     7681    2           GMA_VP# = P.VP# + (I * 256);

PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:42   
   7681   1 000113  ECC7 0004                            LDB,B6   @P,AUTO
          1 000115  D847 0006                            LDR,R5   I,AUTO
          1 000117  5008                                 SOL,R5   8
          1 000118  DA46 0006                            ADD,R5   6,B6
          1 00011A  DF47 0013                            STR,R5   GMA_VP#,AUTO

      247     7682    2           GMA_SEGX = (GMA_VP# / 256) + 15;

   7682   1 00011C  5048                                 SOR,R5   8
          1 00011D  5E0F                                 ADV,R5   15
          1 00011E  DF47 0014                            STR,R5   GMA_SEGX,AUTO

      248     7683
      249     7684        /*D* If the procedure must be read, or this is an call to unshare,
      250     7685             GMA$GET is called to get the pages and map them into the user's ASDT.
      251     7686        */
      252     7687    2           IF P.SHARE.SHARE_PROC ~= %GJ_COPYDATA#

   7687   1 000120  C846 0005                            LDR,R4   5,B6
          1 000122  4DFE                                 CMV,R4   -2
          1 000123  0901 003C                            BE       s:7702,PREL

      253     7688    3           THEN DO;

      254     7689    3                IF (P.SHARE.SHARE_PROC = %GJ_UNSHARE#) AND (GMA_SEGX ~= %GM_DB_PROC#)

   7689   1 000125  4DFF                                 CMV,R4   -1
          1 000126  0981 0010                            BNE      s:7692,PREL
          1 000128  5D17                                 CMV,R5   23
          1 000129  0901 000D                            BE       s:7692,PREL

      255     7690    3                THEN CALL GMA$UNSHARE(GMA_SEGX);

   7690   1 00012B  DBC7 0014                            LAB,B5   GMA_SEGX,AUTO
          1 00012D  DFC7 002A                            STB,B5   @FROM$+2,AUTO
          1 00012F  BBC7 002A                            LAB,B3   @FROM$+2,AUTO
          1 000131  CBF0 0100                            LAB,B4   256,IMO
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:43   
          1 000133  E380 0000 0000  xent                 LNJ,B6   GMA$UNSHARE
          1 000136       0001                            DC       s:7692,PREL

      256     7691
      257     7692    3                CALL GMA$GET(GMA_SEGX,GMA_#PGS,%G_R_USR#,%G_R_MON#,%G_R_USR#)

   7692   1 000137  EBF0 0000                            LAB,B6   0,IMO
          1 000139  DBF0 8000                            LAB,B5   -32768,IMO
          1 00013B  CBF0 0000                            LAB,B4   0,IMO
          1 00013D  CFC7 0032                            STB,B4   @FROM$+10,AUTO
          1 00013F  DFC7 0030                            STB,B5   @FROM$+8,AUTO
          1 000141  EFC7 002E                            STB,B6   @FROM$+6,AUTO
          1 000143  BBC7 0015                            LAB,B3   GMA_#PGS,AUTO
          1 000145  BFC7 002C                            STB,B3   @FROM$+4,AUTO
          1 000147  ABC7 0014                            LAB,B2   GMA_SEGX,AUTO
          1 000149  AFC7 002A                            STB,B2   @FROM$+2,AUTO
          1 00014B  BBC7 002A                            LAB,B3   @FROM$+2,AUTO
          1 00014D  CBF0 0500                            LAB,B4   1280,IMO
          1 00014F  E380 0000 0000  xent                 LNJ,B6   GMA$GET
          1 000152       0003                            DC       s:7694,PREL
          1 000153  0F81 000C                            B        s:7702,PREL

      258     7693    4                WHENALTRETURN DO;

      259     7694    4                     RD_PARAMS.ERR = EMMFAILED;

   7694   1 000155  ECC7 0004                            LDB,B6   @P,AUTO
          1 000157  DC86                                 LDB,B5   ,B6
          1 000158  8C80 0000 0000  00                   LDI      EMMFAILED
          1 00015B  8D45 000C                            SDI      12,B5

      260     7695    4                     ALTRETURN;

   7695   1 00015D  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      261     7696    4                     END;
      262     7697    3                END/*do if not copydata*/;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:44   

      263     7698
      264     7699        /*D* If the processor is to be made shared, the base physical page
      265     7700             is moved to the shared processor table.
      266     7701        */
      267     7702    2           IF P.SHARE.SHARE_PROC = %GJ_SHARE#

   7702   1 000160  ECC7 0004                            LDB,B6   @P,AUTO
          1 000162  E846 0005                            LDR,R6   5,B6
          1 000164  6D01                                 CMV,R6   1
          1 000165  0981 0027                            BNE      s:7726,PREL

      268     7703    3           THEN DO;

      269     7704                     %LOCK(G=GM_MEATLOCK);

   7709   1 000167  BB80 0000 0000  02                   LAB,B3   0
          1 00016A  CBF0 0100                            LAB,B4   256,IMO
          1 00016C  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          1 00016F       0001                            DC       s:7711,PREL

      270     7711    3                PP_SEG$->B$PP_SEG(PP_INDX +I) =

   7711   1 000170  E847 0011                            LDR,R6   PP_INDX,AUTO
          1 000172  EA47 0006                            ADD,R6   I,AUTO
          1 000174  D847 0010                            LDR,R5   ASDT_INDX,AUTO
          1 000176  DA47 0006                            ADD,R5   I,AUTO
          1 000178  ECC7 000D                            LDB,B6   PP_SEG$,AUTO
          1 00017A  B856                                 LDR,R3   R6
          1 00017B  DC80 0000 0000  xsym                 LDB,B5   G$ASDT_USR$
          1 00017E  A855                                 LDR,R2   R5
          1 00017F  2001                                 SOL,R2   1
          1 000180  E825                                 LDR,R6   ,B5,R2
          1 000181  E570 7FFF                            AND,R6   32767,IMO
          1 000183  EF36                                 STR,R6   ,B6,R3

      271     7712    3                  G$ASDT_USR.DESC.BASE(ASDT_INDX +I);
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:45   
      272     7713                     %UNLOCK(G=GM_MEATLOCK);

   7718   1 000184  BB80 0000 0000  02                   LAB,B3   0
          1 000187  CBF0 0100                            LAB,B4   256,IMO
          1 000189  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          1 00018C       0001                            DC       s:7726,PREL

      273     7720
      274     7721    3                END;

      275     7722
      276     7723        /*D* If this is a call to unshare or to copy the data, the contents
      277     7724             of the shared processor pages are moved to the user pages.
      278     7725        */
      279     7726    2           IF (P.SHARE.SHARE_PROC = %GJ_UNSHARE#) OR (P.SHARE.SHARE_PROC = %
              7726                    GJ_COPYDATA#)

   7726   1 00018D  ECC7 0004                            LDB,B6   @P,AUTO
          1 00018F  E846 0005                            LDR,R6   5,B6
          1 000191  6DFF                                 CMV,R6   -1
          1 000192  0901 0004                            BE       s:7729,PREL
          1 000194  6DFE                                 CMV,R6   -2
          1 000195  0981 002B                            BNE      s:7737,PREL

      280     7727    3           THEN DO;

      281     7728
      282     7729    3                UPAGE$ = G$BPAR1$;

   7729   1 000197  DC80 0000 0000  xsym                 LDB,B5   G$BPAR1$
          1 00019A  DFC7 0009                            STB,B5   UPAGE$,AUTO

      283     7730    3                SPAGE$ = G$BPAR2$;

   7730   1 00019C  CC80 0000 0000  xsym                 LDB,B4   G$BPAR2$
          1 00019F  CFC7 000B                            STB,B4   SPAGE$,AUTO

PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:46   
      284     7731    3                CALL MOVE_DATA(UPAGE$,SPAGE$);

   7731   1 0001A1  BBC7 000B                            LAB,B3   SPAGE$,AUTO
          1 0001A3  BFC7 0028                            STB,B3   @TO$+2,AUTO
          1 0001A5  ABC7 0009                            LAB,B2   UPAGE$,AUTO
          1 0001A7  AFC7 0026                            STB,B2   FCN_MSG+6,AUTO
          1 0001A9  E3C0 046A                            LNJ,B6   s:0,PREL
          1 0001AB       0001                            DC       s:7733,PREL

      285     7732
      286     7733    3                IF P.SHARE.SHARE_PROC ~= %GJ_COPYDATA#

   7733   1 0001AC  ECC7 0004                            LDB,B6   @P,AUTO
          1 0001AE  E846 0005                            LDR,R6   5,B6
          1 0001B0  6DFE                                 CMV,R6   -2
          1 0001B1  0901 000F                            BE       s:7737,PREL

      287     7734    3                THEN G$ASDT_USR.DESC.WP(ASDT_INDX +I) = %G_RING0#;

   7734   1 0001B3  D847 0010                            LDR,R5   ASDT_INDX,AUTO
          1 0001B5  DA47 0006                            ADD,R5   I,AUTO
          1 0001B7  C870 3000                            LDR,R4   12288,IMO
          1 0001B9  DC80 0000 0000  xsym                 LDB,B5   G$ASDT_USR$
          1 0001BC  B855                                 LDR,R3   R5
          1 0001BD  3001                                 SOL,R3   1
          1 0001BE  3E01                                 ADV,R3   1
          1 0001BF  CAB5                                 SRM,R4,'3000'X    ,B5,R3
          1 0001C0       3000

      288     7735    3                END/*do if unshare*/;

      289     7736
      290     7737    2           END/* DO 0 to segsz-1*/;

   7737   1 0001C1  8AC7 0006                            INC      I,AUTO
          1 0001C3  E847 0006                            LDR,R6   I,AUTO
          1 0001C5  E947 0012                            CMR,R6   SEGS_64K,AUTO
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:47   
          1 0001C7  0201 FF1B                            BL       s:7666,PREL

      291     7738
      292     7739        /*D* If this is a call to copydata or unshare, control returns
      293     7740             to the caller.
      294     7741        */
      295     7742    1      IF P.SHARE.SHARE_PROC = %GJ_COPYDATA#

   7742   1 0001C9  D846 0005                            LDR,R5   5,B6
          1 0001CB  5DFE                                 CMV,R5   -2
          1 0001CC  0981 0004                            BNE      s:7745,PREL

      296     7743    1      THEN RETURN;

   7743   1 0001CE  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      297     7744
      298     7745    1      IF P.SHARE.SHARE_PROC = %GJ_UNSHARE#

   7745   1 0001D1  5DFF                                 CMV,R5   -1
          1 0001D2  0981 0004                            BNE      s:7754,PREL

      299     7746    2      THEN DO;

      300     7747    2           RETURN;

   7747   1 0001D4  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      301     7748    2           END;
      302     7749
      303     7750        /*D* The GJS$READ_RU routine is called to read the procedure from the
      304     7751            Host.  After the procedure is read WP in the user's ASDT for the
      305     7752            procedure segments is set to Ring 0.
      306     7753        */
      307     7754    1      PS_LCP6STT.FPRG_FTCH_HOST = PS_LCP6STT.FPRG_FTCH_HOST +1;

   7754   1 0001D7  8A80 0000 0087  xsym                 INC      PS_LCP6STT+135
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:48   
          1 0001DA  8E80 0000 0086  xsym                 CAD      PS_LCP6STT+134

      308     7755    1      PROG_TYPE = RD_PARAMS.PROG_TYPE;

   7755   1 0001DD  DC86                                 LDB,B5   ,B6
          1 0001DE  D805                                 LDR,R5   ,B5
          1 0001DF  DF47 0008                            STR,R5   PROG_TYPE,AUTO

      309     7756    1      IF PROG_TYPE = %GJ_LIB_DATA#

   7756   1 0001E1  5D0B                                 CMV,R5   11
          1 0001E2  0981 0003                            BNE      s:7759,PREL

      310     7757    1      THEN RD_PARAMS.PROG_TYPE = %GJ_GETLIB#;

   7757   1 0001E4  5C02                                 LDV,R5   2
          1 0001E5  DF05                                 STR,R5   ,B5

      311     7758
      312     7759    1      CALL GJS$READ_RU(RD_PARAMS)

   7759   1 0001E6  DC86                                 LDB,B5   ,B6
          1 0001E7  DFC7 002A                            STB,B5   @FROM$+2,AUTO
          1 0001E9  BBC7 002A                            LAB,B3   @FROM$+2,AUTO
          1 0001EB  CBF0 0100                            LAB,B4   256,IMO
          1 0001ED  E380 0000 0000  xent                 LNJ,B6   GJS$READ_RU
          1 0001F0       008B                            DC       s:7797,PREL

      313     7760    2      WHENRETURN DO;

      314     7761    3           DO I=0 TO SEGS_64K-1;

   7761   1 0001F1  8747 0006                            CL       I,AUTO
          1 0001F3  0F81 0011                            B        s:7763+2,PREL

      315     7762    3                G$ASDT_USR.DESC.WP(ASDT_INDX +I) = %G_RING0#;

PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:49   
   7762   1 0001F5  E847 0010                            LDR,R6   ASDT_INDX,AUTO
          1 0001F7  EA47 0006                            ADD,R6   I,AUTO
          1 0001F9  D870 3000                            LDR,R5   12288,IMO
          1 0001FB  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_USR$
          1 0001FE  B856                                 LDR,R3   R6
          1 0001FF  3001                                 SOL,R3   1
          1 000200  3E01                                 ADV,R3   1
          1 000201  DAB6                                 SRM,R5,'3000'X    ,B6,R3
          1 000202       3000

      316     7763    3                END;

   7763   1 000203  8AC7 0006                            INC      I,AUTO
          1 000205  E847 0006                            LDR,R6   I,AUTO
          1 000207  E947 0012                            CMR,R6   SEGS_64K,AUTO
          1 000209  026C                                 BL       s:7762,SPREL

      317     7764
      318     7765        /*D* After the procedure for a special shared processor has been
      319     7766             read from the host, a DONE message is sent and then reread to
      320     7767             keep everything in sync.  If the error code in the message is
      321     7768             non-zero when returned, it indicates that an error has occured
      322     7769             previously (read a NAK as data, for example), and the alternate
      323     7770             return is taken.
      324     7771             The GJS$STEP routine will send the DONE message after reading
      325     7772             the CCBUF if this is a user run-unit.
      326     7773        */
      327     7774
      328     7775    2           IF G$JIT.PROG_ENTRY ~= %G_PE_BF#

   7775   1 00020A  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 00020D  82C6 0003                            LB,'00FF'X        3,B6
          1 00020F       00FF
          1 000210  0581 0068                            BBF      s:7794,PREL

      329     7776    3           THEN DO;

PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:50   
      330     7777    3                IF PROG_TYPE = %GJ_GETLIB#

   7777   1 000212  D847 0008                            LDR,R5   PROG_TYPE,AUTO
          1 000214  5D02                                 CMV,R5   2
          1 000215  0981 0006                            BNE      s:7779,PREL

      331     7778    3                THEN FCN_MSG.FCN = %GJ_GETLIB_DONE#;

   7778   1 000217  4C0E                                 LDV,R4   14
          1 000218  C7C7 0020                            STH,R4   FCN_MSG,AUTO
          1 00021A  0F81 0009                            B        s:7783,PREL

      332     7779    3                ELSE IF PROG_TYPE = %GJ_GETDB#

   7779   1 00021C  5D03                                 CMV,R5   3
          1 00021D  0981 005B                            BNE      s:7794,PREL

      333     7780    3                     THEN FCN_MSG.FCN = %GJ_GETDB_DONE#;

   7780   1 00021F  4C0F                                 LDV,R4   15
          1 000220  C7C7 0020                            STH,R4   FCN_MSG,AUTO
          1 000222  0F81 0001                            B        s:7783,PREL

      334     7781    3                     ELSE EXIT;
      335     7782
      336     7783    3                V_ = VECTOR(FCN_MSG);

   7783   1 000224  DBC7 0020                            LAB,B5   FCN_MSG,AUTO
          1 000226  DFC7 002B                            STB,B5   @FROM$+3,AUTO
          1 000228  4C05                                 LDV,R4   5
          1 000229  CF47 002A                            STR,R4   @FROM$+2,AUTO
          1 00022B  ABC7 002A                            LAB,B2   @FROM$+2,AUTO
          1 00022D  2C00                                 LDV,R2   0
          1 00022E  6C06                                 LDV,R6   6
          1 00022F  BB87                                 LAB,B3   ,AUTO
          1 000230  3C3A                                 LDV,R3   58
          1 000231  0008                                 MMM
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:51   

      337     7784    3                FCN_MSG.ERR = '0'B;

   7784   1 000232  8747 0021                            CL       FCN_MSG+1,AUTO
          1 000234  8747 0022                            CL       FCN_MSG+2,AUTO

      338     7785    3                CALL KNA$WRITE(RD_PARAMS.DCB#,V_,RD_PARAMS.ERR);

   7785   1 000236  DCC7 0004                            LDB,B5   @P,AUTO
          1 000238  CC85                                 LDB,B4   ,B5
          1 000239  ABC4 000C                            LAB,B2   12,B4
          1 00023B  AFC7 002E                            STB,B2   @FROM$+6,AUTO
          1 00023D  9BC7 001D                            LAB,B1   V_,AUTO
          1 00023F  9FC7 002C                            STB,B1   @FROM$+4,AUTO
          1 000241  EBC4 000B                            LAB,B6   11,B4
          1 000243  EFC7 002A                            STB,B6   @FROM$+2,AUTO
          1 000245  BBC7 002A                            LAB,B3   @FROM$+2,AUTO
          1 000247  CBF0 0300                            LAB,B4   768,IMO
          1 000249  E380 0000 0000  xent                 LNJ,B6   KNA$WRITE
          1 00024C       0001                            DC       s:7786,PREL

      339     7786    3                CALL KNA$READ(RD_PARAMS.DCB#,V_,RD_PARAMS.ERR);

   7786   1 00024D  ECC7 0004                            LDB,B6   @P,AUTO
          1 00024F  DC86                                 LDB,B5   ,B6
          1 000250  CBC5 000C                            LAB,B4   12,B5
          1 000252  CFC7 002E                            STB,B4   @FROM$+6,AUTO
          1 000254  BBC7 001D                            LAB,B3   V_,AUTO
          1 000256  BFC7 002C                            STB,B3   @FROM$+4,AUTO
          1 000258  ABC5 000B                            LAB,B2   11,B5
          1 00025A  AFC7 002A                            STB,B2   @FROM$+2,AUTO
          1 00025C  BBC7 002A                            LAB,B3   @FROM$+2,AUTO
          1 00025E  CBF0 0300                            LAB,B4   768,IMO
          1 000260  E380 0000 0000  xent                 LNJ,B6   KNA$READ
          1 000263       0001                            DC       s:7787,PREL

      340     7787    3                IF FCN_MSG.ERR ~= '0'B
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:52   

   7787   1 000264  EB80 0000 0000  02                   LAB,B6   0
          1 000267  5C01                                 LDV,R5   1
          1 000268  0022                                 ACM      ;
          1 000269       4407 0021                                ALPHANUM(FCN_MSG+1,AUTO,,4,FILL),;
          1 00026B       4006 0002                                ALPHANUM(2,B6,,R5,FILL)
          1 00026D  5381 000B                            CBE      s:7794,PREL

      341     7788    4                THEN DO;

      342     7789    4                     RD_PARAMS.ERR = FCN_MSG.ERR;

   7789   1 00026F  ECC7 0004                            LDB,B6   @P,AUTO
          1 000271  DC86                                 LDB,B5   ,B6
          1 000272  8CC7 0021                            LDI      FCN_MSG+1,AUTO
          1 000274  8D45 000C                            SDI      12,B5

      343     7790    4                     ALTRETURN;

   7790   1 000276  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      344     7791    4                     END;
      345     7792
      346     7793    3                END /* Do if not Bigfoot */;
      347     7794    2           END /* Do on normal return from read*/;

   7794   1 000279  0F81 0004                            B        s:7807,PREL

      348     7795
      349     7796    2      WHENALTRETURN DO;

      350     7797    2           ALTRETURN;

   7797   1 00027B  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      351     7798    2           END;
      352     7799
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:53   
      353     7800        /*D* If the call to this module was to read the library data from
      354     7801             the host, the shared file entry for the library is completed
      355     7802             and the pages are removed from the user's map.
      356     7803             The pages that have been allocated are counted in GJ_SFILE_LIB_DATA,
      357     7804             but they do not come out of the number of pages that may be
      358     7805             used for saving a copy of processor data, GJ_SFILE_MAX_DATA.
      359     7806        */
      360     7807    1      IF PROG_TYPE = %GJ_LIB_DATA#

   7807   1 00027E  E847 0008                            LDR,R6   PROG_TYPE,AUTO
          1 000280  6D0B                                 CMV,R6   11
          1 000281  0981 003E                            BNE      s:7832,PREL

      361     7808    2      THEN DO;

      362     7809    2           G$SFILE.LIB_WDSZ_DATA = RD_PARAMS.TOT_SECTSZ;

   7809   1 000283  ECC7 0004                            LDB,B6   @P,AUTO
          1 000285  DCC6 0002                            LDB,B5   2,B6
          1 000287  CC86                                 LDB,B4   ,B6
          1 000288  8CC4 0005                            LDI      5,B4
          1 00028A  8D45 0024                            SDI      36,B5

      363     7810    2           G$SFILE.PGSZ_DATA = P.PGSZ;

   7810   1 00028C  DCC6 0002                            LDB,B5   2,B6
          1 00028E  E846 0007                            LDR,R6   7,B6
          1 000290  EF45 0026                            STR,R6   38,B5

      364     7811    2           GJ_SFILE_LIB_DATA = GJ_SFILE_LIB_DATA + P.PGSZ;

   7811   1 000292  E800 0000 0000  xsym                 LDR,R6   GJ_SFILE_LIB_DATA
          1 000295  EA46 0007                            ADD,R6   7,B6
          1 000297  EF00 0000 0000  xsym                 STR,R6   GJ_SFILE_LIB_DATA

      365     7812    2           G$SFILE.SEG_1ST_DATA = PP_INDX;

PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:54   
   7812   1 00029A  DCC6 0002                            LDB,B5   2,B6
          1 00029C  D847 0011                            LDR,R5   PP_INDX,AUTO
          1 00029E  DF45 0022                            STR,R5   34,B5

      366     7813
      367     7814    3           DO I=0 TO SEGS_64K-1;

   7814   1 0002A0  8747 0006                            CL       I,AUTO
          1 0002A2  0F81 0015                            B        s:7816+2,PREL

      368     7815    3                CALL GMA$UNSHARE(ASDT_INDX +I);

   7815   1 0002A4  E847 0010                            LDR,R6   ASDT_INDX,AUTO
          1 0002A6  EA47 0006                            ADD,R6   I,AUTO
          1 0002A8  EF47 002A                            STR,R6   @FROM$+2,AUTO
          1 0002AA  EBC7 002A                            LAB,B6   @FROM$+2,AUTO
          1 0002AC  EFC7 002B                            STB,B6   @FROM$+3,AUTO
          1 0002AE  BBC7 002B                            LAB,B3   @FROM$+3,AUTO
          1 0002B0  CBF0 0100                            LAB,B4   256,IMO
          1 0002B2  E380 0000 0000  xent                 LNJ,B6   GMA$UNSHARE
          1 0002B5       0001                            DC       s:7816,PREL

      369     7816    3                END;

   7816   1 0002B6  8AC7 0006                            INC      I,AUTO
          1 0002B8  E847 0006                            LDR,R6   I,AUTO
          1 0002BA  E947 0012                            CMR,R6   SEGS_64K,AUTO
          1 0002BC  0268                                 BL       s:7815,SPREL

      370     7817
      371     7818    2           RETURN;

   7818   1 0002BD  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      372     7819    2           END;
      373     7820
      374     7821        /*D*  If this completes the process of installing the processor,
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:55   
      375     7822              the initialization of the shared file table entry is completed.
      376     7823
      377     7824             GMA$SHARED is called to begin the process of creating a list
      378     7825             of users that are connected to the physical segments.
      379     7826
      380     7827              A call is made to GHS$RUE to wake-up all users that may be
      381     7828              waiting for it if this is a special shared processor.  If
      382     7829              this is a user run unit, the call to GHS$RUE will be made in
      383     7830              in GJS$STEP after the DONE message verifys that all is OK.
      384     7831        */
      385     7832    1      IF P.SHARE.SHARE_PROC = %GJ_SHARE#

   7832   1 0002C0  ECC7 0004                            LDB,B6   @P,AUTO
          1 0002C2  D846 0005                            LDR,R5   5,B6
          1 0002C4  5D01                                 CMV,R5   1
          1 0002C5  0981 0058                            BNE      s:7864,PREL

      386     7833    2      THEN DO;

      387     7834    2           G$SFILE.PGSZ_PROC = P.PGSZ;

   7834   1 0002C7  DCC6 0002                            LDB,B5   2,B6
          1 0002C9  C846 0007                            LDR,R4   7,B6
          1 0002CB  CF45 0027                            STR,R4   39,B5

      388     7835    2           G$SFILE.SEG_1ST_PROC = PP_INDX;

   7835   1 0002CD  DCC6 0002                            LDB,B5   2,B6
          1 0002CF  D847 0011                            LDR,R5   PP_INDX,AUTO
          1 0002D1  DF45 0023                            STR,R5   35,B5

      389     7836
      390     7837    2           GJ_SFILE_CUR_PROC = GJ_SFILE_CUR_PROC + P.PGSZ;

   7837   1 0002D3  C800 0000 0000  xsym                 LDR,R4   GJ_SFILE_CUR_PROC
          1 0002D6  CA46 0007                            ADD,R4   7,B6
          1 0002D8  CF00 0000 0000  xsym                 STR,R4   GJ_SFILE_CUR_PROC
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:56   

      391     7838    2           IF GJ_SFILE_CUR_PROC > GJ_SFILE_PEAK_PROC

   7838   1 0002DB  C900 0000 0000  xsym                 CMR,R4   GJ_SFILE_PEAK_PROC
          1 0002DE  0381 0004                            BLE      s:7841,PREL

      392     7839    2           THEN GJ_SFILE_PEAK_PROC = GJ_SFILE_CUR_PROC;

   7839   1 0002E0  CF00 0000 0000  xsym                 STR,R4   GJ_SFILE_PEAK_PROC

      393     7840
      394     7841    2           CALL GMA$SHARED(G$SFILE);

   7841   1 0002E3  DCC6 0002                            LDB,B5   2,B6
          1 0002E5  DFC7 002A                            STB,B5   @FROM$+2,AUTO
          1 0002E7  BBC7 002A                            LAB,B3   @FROM$+2,AUTO
          1 0002E9  CBF0 0100                            LAB,B4   256,IMO
          1 0002EB  E380 0000 0000  xent                 LNJ,B6   GMA$SHARED
          1 0002EE       0001                            DC       s:7843,PREL

      395     7842
      396     7843    2           IF (PROG_TYPE = %GJ_GETLIB#) OR (PROG_TYPE = %GJ_GETDB#)

   7843   1 0002EF  E847 0008                            LDR,R6   PROG_TYPE,AUTO
          1 0002F1  6D02                                 CMV,R6   2
          1 0002F2  0901 0004                            BE       s:7850,PREL
          1 0002F4  6D03                                 CMV,R6   3
          1 0002F5  0981 0028                            BNE      s:7864,PREL

      397     7844    3           THEN DO;

      398     7845                     %LOCK (G=G_SLOCK);

   7850   1 0002F7  BB80 0000 0003  02                   LAB,B3   +3
          1 0002FA  CBF0 0100                            LAB,B4   256,IMO
          1 0002FC  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          1 0002FF       0001                            DC       s:7852,PREL
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:57   

      399     7852    3                G$SFILE.LCP6_FLGS = (G$SFILE.LCP6_FLGS &~ %LCP6_INST#);

   7852   1 000300  ECC7 0004                            LDB,B6   @P,AUTO
          1 000302  DCC6 0002                            LDB,B5   2,B6
          1 000304  E2C5 001E                            LLH,R6   30,B5
          1 000306  6008                                 SOL,R6   8
          1 000307  E570 FD00                            AND,R6   -768,IMO
          1 000309  6048                                 SOR,R6   8
          1 00030A  E7C5 001E                            STH,R6   30,B5

      400     7853                     %UNLOCK (G=G_SLOCK);

   7858   1 00030C  BB80 0000 0003  02                   LAB,B3   +3
          1 00030F  CBF0 0100                            LAB,B4   256,IMO
          1 000311  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          1 000314       0001                            DC       s:7860,PREL

      401     7860    3                CALL GHS$RUE(%GH_EVUQFP);

   7860   1 000315  BB80 0000 0006  02                   LAB,B3   +6
          1 000318  CBF0 0100                            LAB,B4   256,IMO
          1 00031A  E380 0000 0000  xent                 LNJ,B6   GHS$RUE
          1 00031D       0001                            DC       s:7864,PREL

      402     7861    3                END;

      403     7862    2           END;

      404     7863
      405     7864    1      RETURN;

   7864   1 00031E  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      406     7865        %EJECT;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:58   
      407     7866        /*F* NAME: GJU$GET_DATA
      408     7867
      409     7868             PURPOSE: To either read the data from a run-unit, and save
      410     7869                      a copy of it for later use, or to copy the saved
      411     7870                      run-unit data into the user's pages.
      412     7871
      413     7872        */
      414     7873
      415     7874    1   GJU$GET_DATA: ENTRY(P) ALTRET;

   7874   1 000321  D380 0000 0000  xent GJU$GET_DATA    LNJ,B5   X6A_AUTO_1
          1 000324       0034 0001                       DC       52,1

      416     7875
      417     7876    1      PP_SEG$ = ADDR(G$SFILE.PP_SEG1);

   7876   1 000326  ECC7 0004                            LDB,B6   @P,AUTO
          1 000328  DCC6 0002                            LDB,B5   2,B6
          1 00032A  CBC5 0029                            LAB,B4   41,B5
          1 00032C  CFC7 000D                            STB,B4   PP_SEG$,AUTO

      418     7877           %LOCK (G=G_SLOCK);

   7882   1 00032E  BB80 0000 0003  02                   LAB,B3   +3
          1 000331  CBF0 0100                            LAB,B4   256,IMO
          1 000333  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          1 000336       0001                            DC       s:7890,PREL

      419     7884
      420     7885        /*D* If there is already a copy of the run-unit data in memory,
      421     7886             bump the count of the number of users that are copying it
      422     7887             so it doesn't get released out from under us and set the
      423     7888             internal flag to indicate we should copy it.
      424     7889        */
      425     7890    1      IF (RD_PARAMS.USR_LOC >= %GM_ISR1_BASE   AND   G$SFILE.PGSZ_DATA ~= 0)

   7890   1 000337  ECC7 0004                            LDB,B6   @P,AUTO
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:59   
          1 000339  DC86                                 LDB,B5   ,B6
          1 00033A  8CC5 0007                            LDI      7,B5
          1 00033C  84F0 0001 0000                       SID      65536,IMO
          1 00033F  0681 0007                            BCF      s:7890+16,PREL
          1 000341  CCC6 0002                            LDB,B4   2,B6
          1 000343  E844 0026                            LDR,R6   38,B4
          1 000345  6981 000F                            BNEZ,R6  s:7894,PREL
          1 000347  8CC5 0007                            LDI      7,B5
          1 000349  84F0 0001 0000                       SID      65536,IMO
          1 00034C  0601 0017                            BCT      s:7911,PREL
          1 00034E  CCC6 0002                            LDB,B4   2,B6
          1 000350  82C4 001E                            LB,'00FF'X        30,B4
          1 000352       00FF
          1 000353  0581 0010                            BBF      s:7911,PREL

      426     7891    1        OR
      427     7892    1        (RD_PARAMS.USR_LOC < %GM_ISR1_BASE   AND   G$SFILE.PGSZ_ROS ~= 0)
      428     7893    2      THEN DO;

      429     7894    2           G$SFILE.USR_DATA.COPY = G$SFILE.USR_DATA.COPY +1;

   7894   1 000355  8AC4 0024                            INC      36,B4

      430     7895                %UNLOCK (G=G_SLOCK);

   7900   1 000357  BB80 0000 0003  02                   LAB,B3   +3
          1 00035A  CBF0 0100                            LAB,B4   256,IMO
          1 00035C  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          1 00035F       0001                            DC       s:7902,PREL

      431     7902    2           FIRST_USER = 0;

   7902   1 000360  8747 001B                            CL       FIRST_USER,AUTO

      432     7903    2           END;

   7903   1 000362  0F81 007A                            B        s:7972,PREL
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:60   

      433     7904
      434     7905        /*D* If there isn't a copy in memory, read it now.  If there is
      435     7906             enough physical memory available, get the pages and keep a
      436     7907             copy of the run-unit initial data around for the next user
      437     7908             of the run-unit.
      438     7909        */
      439     7910    2      ELSE DO;

      440     7911    2           IF G$SFILE.LCP6_FLGS.INST_DATA = '0'B

   7911   1 000364  CCC6 0002                            LDB,B4   2,B6
          1 000366  82C4 001E                            LB,'0800'X        30,B4
          1 000368       0800
          1 000369  0501 0009                            BBT      s:7916,PREL

      441     7912    3           THEN DO;

      442     7913    3                G$SFILE.LCP6_FLGS.INST_DATA = '1'B;

   7913   1 00036B  8944 001E                            LBT,'0800'X       30,B4
   7913   1 00036D       0800

      443     7914    3                FIRST_USER = 1;

   7914   1 00036E  6C01                                 LDV,R6   1
          1 00036F  EF47 001B                            STR,R6   FIRST_USER,AUTO

      444     7915    3                END;

   7915   1 000371  0F81 0003                            B        s:7923,PREL

      445     7916    2           ELSE FIRST_USER = 0;

   7916   1 000373  8747 001B                            CL       FIRST_USER,AUTO

      446     7917
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:61   
      447     7918                %UNLOCK (G=G_SLOCK);

   7923   1 000375  BB80 0000 0003  02                   LAB,B3   +3
          1 000378  CBF0 0100                            LAB,B4   256,IMO
          1 00037A  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          1 00037D       0001                            DC       s:7925,PREL

      448     7925    2           CALL GJS$READ_RU(RD_PARAMS);

   7925   1 00037E  ECC7 0004                            LDB,B6   @P,AUTO
          1 000380  DC86                                 LDB,B5   ,B6
          1 000381  DFC7 002A                            STB,B5   @FROM$+2,AUTO
          1 000383  BBC7 002A                            LAB,B3   @FROM$+2,AUTO
          1 000385  CBF0 0100                            LAB,B4   256,IMO
          1 000387  E380 0000 0000  xent                 LNJ,B6   GJS$READ_RU
          1 00038A       0001                            DC       s:7932,PREL

      449     7926
      450     7927                %LOCK (G=G_SLOCK);

   7932   1 00038B  BB80 0000 0003  02                   LAB,B3   +3
          1 00038E  CBF0 0100                            LAB,B4   256,IMO
          1 000390  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          1 000393       0001                            DC       s:7935,PREL

      451     7934
      452     7935    2           IF (FIRST_USER = 1)

   7935   1 000394  E847 001B                            LDR,R6   FIRST_USER,AUTO
          1 000396  6D01                                 CMV,R6   1
          1 000397  0981 0039                            BNE      s:7956,PREL

      453     7936    3           THEN DO;

      454     7937    3                IF ( (G$SFILE.FRQ >= GJ_SFILE_FRQ) OR (G$SFILE.RU_FLGS.CP) )

   7937   1 000399  ECC7 0004                            LDB,B6   @P,AUTO
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:62   
          1 00039B  DCC6 0002                            LDB,B5   2,B6
          1 00039D  D845 001F                            LDR,R5   31,B5
          1 00039F  D570 00FF                            AND,R5   255,IMO
          1 0003A1  D900 0000 0000  xsym                 CMR,R5   GJ_SFILE_FRQ
          1 0003A4  0281 0006                            BGE      s:7937+18,PREL
          1 0003A6  82C5 001D                            LB,'1000'X        29,B5
          1 0003A8       1000
          1 0003A9  0581 0022                            BBF      s:7950,PREL
          1 0003AB  C800 0000 0000  xsym                 LDR,R4   GM_SHUF
          1 0003AE  C200 0000 0000  xsym                 SUB,R4   GM_STEP
          1 0003B1  4801 001A                            BLZ,R4   s:7950,PREL
          1 0003B3  C946 0007                            CMR,R4   7,B6
          1 0003B5  0381 0016                            BLE      s:7950,PREL
          1 0003B7  C800 0000 0000  xsym                 LDR,R4   GJ_SFILE_CUR_DATA
          1 0003BA  CA46 0007                            ADD,R4   7,B6
          1 0003BC  C900 0000 0000  xsym                 CMR,R4   GJ_SFILE_MAX_DATA
          1 0003BF  0301 000C                            BG       s:7950,PREL

      455     7938    3                  AND (GM_SHUF-GM_STEP > P.PGSZ)
      456     7939    3                  AND  (GJ_SFILE_CUR_DATA+P.PGSZ <= GJ_SFILE_MAX_DATA)
      457     7940    4                THEN DO;

      458     7941                          %UNLOCK (G=G_SLOCK);

   7946   1 0003C1  BB80 0000 0003  02                   LAB,B3   +3
          1 0003C4  CBF0 0100                            LAB,B4   256,IMO
          1 0003C6  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          1 0003C9       0001                            DC       s:7948,PREL

      459     7948    4                     END;

   7948   1 0003CA  0F81 0012                            B        s:7972,PREL

      460     7949    4                ELSE DO;

      461     7950    4                     G$SFILE.LCP6_FLGS.INST_DATA = '0'B;

PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:63   
   7950   1 0003CC  8845 001E                            LBF,'0800'X       30,B5
   7950   1 0003CE       0800

      462     7951    4                     GOTO DONT_KEEP_DATA;

   7951   1 0003CF  0F81 0001                            B        s:7956,PREL

      463     7952    4                     END;
      464     7953
      465     7954    3                END/*do if I was to install data*/;
      466     7955
      467     7956    3           ELSE DO;

   7940   1                              DONT_KEEP_DATA  null
      468     7957    3   DONT_KEEP_DATA: ;
      469     7958                     %UNLOCK (G=G_SLOCK);

   7963   1 0003D1  BB80 0000 0003  02   DONT_KEEP_DATA  LAB,B3   +3
          1 0003D4  CBF0 0100                            LAB,B4   256,IMO
          1 0003D6  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          1 0003D9       0001                            DC       s:7965,PREL

      470     7965    3                RETURN;

   7965   1 0003DA  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      471     7966    3                END;
      472     7967    2           END;
      473     7968
      474     7969        %EJECT;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:64   
      475     7970        /* First, the logic for the Read-Only Segment.
      476     7971        */
      477     7972    1      IF RD_PARAMS.USR_LOC < %GM_ISR1_BASE

   7972   1 0003DD  ECC7 0004                            LDB,B6   @P,AUTO
          1 0003DF  DC86                                 LDB,B5   ,B6
          1 0003E0  8CC5 0007                            LDI      7,B5
          1 0003E2  84F0 0001 0000                       SID      65536,IMO
          1 0003E5  0601 00AF                            BCT      s:8039,PREL

      478     7973    2      THEN DO;

      479     7974    2           ASDT_INDX = %GM_ROS#;

   7974   1 0003E7  6C01                                 LDV,R6   1
          1 0003E8  EF47 0010                            STR,R6   ASDT_INDX,AUTO

      480     7975    2           PP_INDX = -1;

   7975   1 0003EA  8947 0011                            LBT,'FFFF'X       PP_INDX,AUTO
   7975   1 0003EC       FFFF

      481     7976    2           I=0;

   7976   1 0003ED  8747 0006                            CL       I,AUTO

      482     7977
      483     7978    2           UPAGE$ = PINCRW(G$BPAR1$, RD_PARAMS.USR_LOC - %GM_ROS_BASE);

   7978   1 0003EF  8CC5 0007                            LDI      7,B5
          1 0003F1  8400 0000 0000  xsym                 AID      G$BPAR1$
          1 0003F4  8470 FFFF F000                       AID      -4096,IMO
          1 0003F7  8D47 0009                            SDI      UPAGE$,AUTO

      484     7979    2           SPAGE$ = G$BPAR2$;

   7979   1 0003F9  DC80 0000 0000  xsym                 LDB,B5   G$BPAR2$
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:65   
          1 0003FC  DFC7 000B                            STB,B5   SPAGE$,AUTO

      485     7980
      486     7981    2           SEG_BYT_SZ = RD_PARAMS.TOT_SECTSZ * 2;

   7981   1 0003FE  CC86                                 LDB,B4   ,B6
          1 0003FF  8CC4 0005                            LDI      5,B4
          1 000401  7081                                 DOL,R7   1
          1 000402  8D47 0018                            SDI      SEG_BYT_SZ,AUTO

      487     7982
      488     7983    2           IF FIRST_USER ~= 0

   7983   1 000404  D847 001B                            LDR,R5   FIRST_USER,AUTO
          1 000406  5901 0068                            BEZ,R5   s:8014,PREL

      489     7984    3           THEN DO;

      490     7985    3                CALL GMA$GETPS(G$SFILE.PP_ROS , P.PGSZ) ALTRET(RESET_N_RTN);

   7985   1 000408  BCC6 0002                            LDB,B3   2,B6
          1 00040A  ABC6 0007                            LAB,B2   7,B6
          1 00040C  AFC7 002C                            STB,B2   @FROM$+4,AUTO
          1 00040E  CBC3 0028                            LAB,B4   40,B3
          1 000410  CFC7 002A                            STB,B4   @FROM$+2,AUTO
          1 000412  BBC7 002A                            LAB,B3   @FROM$+2,AUTO
          1 000414  CBF0 0200                            LAB,B4   512,IMO
          1 000416  E380 0000 0000  xent                 LNJ,B6   GMA$GETPS
          1 000419       003B                            DC       s:7993,PREL

      491     7986
      492     7987    3                G$SFILE.PGSZ_ROS = P.PGSZ;

   7987   1 00041A  ECC7 0004                            LDB,B6   @P,AUTO
          1 00041C  DCC6 0002                            LDB,B5   2,B6
          1 00041E  E846 0007                            LDR,R6   7,B6
          1 000420  EAC5 001E                            SRM,R6,'00FF'X    30,B5
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:66   
          1 000422       00FF

      493     7988    3                CALL MOVE_DATA(SPAGE$,UPAGE$);

   7988   1 000423  DBC7 0009                            LAB,B5   UPAGE$,AUTO
          1 000425  DFC7 0028                            STB,B5   @TO$+2,AUTO
          1 000427  CBC7 000B                            LAB,B4   SPAGE$,AUTO
          1 000429  CFC7 0026                            STB,B4   FCN_MSG+6,AUTO
          1 00042B  E3C0 01E8                            LNJ,B6   s:0,PREL
          1 00042D       0001                            DC       s:7989,PREL

      494     7989    3                CALL GMA$PS2USR(G$SFILE.PP_ROS,0);

   7989   1 00042E  ECC7 0004                            LDB,B6   @P,AUTO
          1 000430  DCC6 0002                            LDB,B5   2,B6
          1 000432  CBF0 0000                            LAB,B4   0,IMO
          1 000434  CFC7 002C                            STB,B4   @FROM$+4,AUTO
          1 000436  BBC5 0028                            LAB,B3   40,B5
          1 000438  BFC7 002A                            STB,B3   @FROM$+2,AUTO
          1 00043A  BBC7 002A                            LAB,B3   @FROM$+2,AUTO
          1 00043C  CBF0 0200                            LAB,B4   512,IMO
          1 00043E  E380 0000 0000  xent                 LNJ,B6   GMA$PS2USR
          1 000441       0001                            DC       s:7987,PREL

   7987   1                              COUNT_N_RTN     null
      495     7990
      496     7991    3   COUNT_N_RTN: ;
      497     7992    3                GJ_SFILE_CUR_DATA = GJ_SFILE_CUR_DATA + P.PGSZ;

   7992   1 000442  ECC7 0004            COUNT_N_RTN     LDB,B6   @P,AUTO
          1 000444  E800 0000 0000  xsym                 LDR,R6   GJ_SFILE_CUR_DATA
          1 000447  EA46 0007                            ADD,R6   7,B6
          1 000449  EF00 0000 0000  xsym                 STR,R6   GJ_SFILE_CUR_DATA

      498     7993    3                IF GJ_SFILE_CUR_DATA > GJ_SFILE_PEAK_DATA

   7993   1 00044C  E900 0000 0000  xsym                 CMR,R6   GJ_SFILE_PEAK_DATA
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:67   
          1 00044F  0381 0004                            BLE      s:7993,PREL

      499     7994    3                THEN GJ_SFILE_PEAK_DATA = GJ_SFILE_CUR_DATA;

   7994   1 000451  EF00 0000 0000  xsym                 STR,R6   GJ_SFILE_PEAK_DATA

   7993   1                              RESET_N_RTN     null
      500     7995    3   RESET_N_RTN: ;
      501     7996                     %LOCK (G=G_SLOCK);

   8001   1 000454  BB80 0000 0003  02   RESET_N_RTN     LAB,B3   +3
          1 000457  CBF0 0100                            LAB,B4   256,IMO
          1 000459  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          1 00045C       0001                            DC       s:8003,PREL

      502     8003    3                G$SFILE.LCP6_FLGS.INST_DATA = '0'B;

   8003   1 00045D  ECC7 0004                            LDB,B6   @P,AUTO
          1 00045F  DCC6 0002                            LDB,B5   2,B6
          1 000461  8845 001E                            LBF,'0800'X       30,B5
          1 000463       0800

      503     8004                     %UNLOCK (G=G_SLOCK);

   8009   1 000464  BB80 0000 0003  02                   LAB,B3   +3
          1 000467  CBF0 0100                            LAB,B4   256,IMO
          1 000469  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          1 00046C       0001                            DC       s:8011,PREL

      504     8011    3                END;

   8011   1 00046D  0F81 0024                            B        s:8033,PREL

      505     8012
      506     8013    3           ELSE DO;

      507     8014    3                CALL MOVE_DATA(UPAGE$,SPAGE$);
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:68   

   8014   1 00046F  BBC7 000B                            LAB,B3   SPAGE$,AUTO
          1 000471  BFC7 0028                            STB,B3   @TO$+2,AUTO
          1 000473  CBC7 0009                            LAB,B4   UPAGE$,AUTO
          1 000475  CFC7 0026                            STB,B4   FCN_MSG+6,AUTO
          1 000477  E3C0 019C                            LNJ,B6   s:0,PREL
          1 000479       0001                            DC       s:8014,PREL

   8014   1                              COPY_RTN        null
      508     8015    3   COPY_RTN:    ;
      509     8016                     %LOCK(G=G_SLOCK);

   8021   1 00047A  BB80 0000 0003  02   COPY_RTN        LAB,B3   +3
          1 00047D  CBF0 0100                            LAB,B4   256,IMO
          1 00047F  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          1 000482       0001                            DC       s:8023,PREL

      510     8023    3                G$SFILE.USR_DATA.COPY = G$SFILE.USR_DATA.COPY -1;

   8023   1 000483  ECC7 0004                            LDB,B6   @P,AUTO
          1 000485  DCC6 0002                            LDB,B5   2,B6
          1 000487  88C5 0024                            DEC      36,B5

      511     8024                     %UNLOCK(G=G_SLOCK);

   8029   1 000489  BB80 0000 0003  02                   LAB,B3   +3
          1 00048C  CBF0 0100                            LAB,B4   256,IMO
          1 00048E  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          1 000491       0001                            DC       s:8033,PREL

      512     8031    3                END;

      513     8032
      514     8033    2           RETURN;

   8033   1 000492  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:69   
      515     8034    2           END/* do if read-only segment*/;
      516     8035
      517     8036        %EJECT;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:70   
      518     8037        /* Next, data with no offset; i.e. no library associated.
      519     8038        */
      520     8039    1      IF RD_PARAMS.USR_LOC = %GM_ISR1_BASE

   8039   1 000495  8CC5 0007                            LDI      7,B5
          1 000497  84F0 0001 0000                       SID      65536,IMO
          1 00049A  6981 002A                            BNEZ,R6  s:8060,PREL
          1 00049C  7981 0028                            BNEZ,R7  s:8060,PREL

      521     8040    2      THEN DO;

      522     8041    2           PGS_PROC = P.PGSZ;

   8041   1 00049E  E846 0007                            LDR,R6   7,B6
          1 0004A0  EF47 000F                            STR,R6   PGS_PROC,AUTO

      523     8042    2           ASDT_INDX = (P.VP# / 256) +15;

   8042   1 0004A2  D846 0006                            LDR,R5   6,B6
          1 0004A4  5048                                 SOR,R5   8
          1 0004A5  5E0F                                 ADV,R5   15
          1 0004A6  DF47 0010                            STR,R5   ASDT_INDX,AUTO

      524     8043    2           PP_INDX = ASDT_INDX - 16;

   8043   1 0004A8  5EF0                                 ADV,R5   -16
          1 0004A9  DF47 0011                            STR,R5   PP_INDX,AUTO

      525     8044
      526     8045    2           IF FIRST_USER ~= 0

   8045   1 0004AB  C847 001B                            LDR,R4   FIRST_USER,AUTO
          1 0004AD  4901 00D8                            BEZ,R4   s:8121,PREL

      527     8046    3           THEN DO;

      528     8047    3                G$SFILE.SEG_1ST_DATA = PP_INDX;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:71   

   8047   1 0004AF  CCC6 0002                            LDB,B4   2,B6
          1 0004B1  DF44 0022                            STR,R5   34,B4

      529     8048    3                IF PGS_PROC > 256

   8048   1 0004B3  E970 0100                            CMR,R6   256,IMO
          1 0004B5  0381 0009                            BLE      s:8050,PREL

      530     8049    3                THEN G$SFILE.USR_DATA.PGSZ_DATA1 = 256;

   8049   1 0004B7  DCC6 0002                            LDB,B5   2,B6
          1 0004B9  B870 0100                            LDR,R3   256,IMO
          1 0004BB  BF45 0025                            STR,R3   37,B5
          1 0004BD  0F81 00C8                            B        s:8121,PREL

      531     8050    3                ELSE G$SFILE.USR_DATA.PGSZ_DATA1 = PGS_PROC;

   8050   1 0004BF  DCC6 0002                            LDB,B5   2,B6
          1 0004C1  EF45 0025                            STR,R6   37,B5

      532     8051    3                END;

      533     8052    2           END;

   8052   1 0004C3  0F81 00C2                            B        s:8121,PREL

      534     8053
      535     8054        /*   Worst case is to have to take care of the gap for library data.
      536     8055
      537     8056             Adjust the addresses for the user run-unit data supplied in
      538     8057             the head record to the first L6 page of user data.
      539     8058        */
      540     8059    2      ELSE DO;

      541     8060    2           J = P.VP#;                 /* remember what we started with */

PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:72   
   8060   1 0004C5  E846 0006                            LDR,R6   6,B6
          1 0004C7  EF47 0007                            STR,R6   J,AUTO

      542     8061
      543     8062    2           RD_PARAMS.USR_LOC = (RD_PARAMS.BIAS / 256) *256;

   8062   1 0004C9  8CC5 0002                            LDI      2,B5
          1 0004CB  70C8                                 DOR,R7   8
          1 0004CC  7088                                 DOL,R7   8
          1 0004CD  8D45 0007                            SDI      7,B5

      544     8063    2           P.VP# = RD_PARAMS.USR_LOC / 256;

   8063   1 0004CF  DC86                                 LDB,B5   ,B6
          1 0004D0  8CC5 0007                            LDI      7,B5
          1 0004D2  70C8                                 DOR,R7   8
          1 0004D3  E857                                 LDR,R6   R7
          1 0004D4  EF46 0006                            STR,R6   6,B6

      545     8064                       /* get rid of excess pages back to 8 page boundry    */
      546     8065
      547     8066    2           ASDT_INDX = (P.VP# / 256) +15;

   8066   1 0004D6  6048                                 SOR,R6   8
          1 0004D7  6E0F                                 ADV,R6   15
          1 0004D8  EF47 0010                            STR,R6   ASDT_INDX,AUTO

      548     8067    2           PP_INDX = ASDT_INDX - 16;

   8067   1 0004DA  6EF0                                 ADV,R6   -16
          1 0004DB  EF47 0011                            STR,R6   PP_INDX,AUTO

      549     8068    2           I=0;

   8068   1 0004DD  8747 0006                            CL       I,AUTO

      550     8069
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:73   
      551     8070    2           P.PGSZ = P.PGSZ - (P.VP# - J);

   8070   1 0004DF  D846 0006                            LDR,R5   6,B6
          1 0004E1  D247 0007                            SUB,R5   J,AUTO
          1 0004E3  D246 0007                            SUB,R5   7,B6
          1 0004E5  8255                                 NEG      R5
          1 0004E6  DF46 0007                            STR,R5   7,B6

      552     8071                                                /* compute new word size    */
      553     8072
      554     8073    2           SLUFF_PGSZ = (P.VP# - %GM_ISR1_VP) - (256 * PP_INDX);

   8073   1 0004E8  6008                                 SOL,R6   8
          1 0004E9  8256                                 NEG      R6
          1 0004EA  EA46 0006                            ADD,R6   6,B6
          1 0004EC  EA70 FF00                            ADD,R6   -256,IMO
          1 0004EE  EF47 001C                            STR,R6   SLUFF_PGSZ,AUTO

      555     8074                       /* the number of pages not used in this 64K segment  */
      556     8075
      557     8076    2           UPAGE$ = PINCRW(G$BPAR1$,SLUFF_PGSZ*256);

   8076   1 0004F0  F856                                 LDR,R7   R6
          1 0004F1  6C00                                 LDV,R6   0
          1 0004F2  7088                                 DOL,R7   8
          1 0004F3  8400 0000 0000  xsym                 AID      G$BPAR1$
          1 0004F6  8D47 0009                            SDI      UPAGE$,AUTO

      558     8077    2           SPAGE$ = G$BPAR2$;

   8077   1 0004F8  DC80 0000 0000  xsym                 LDB,B5   G$BPAR2$
          1 0004FB  DFC7 000B                            STB,B5   SPAGE$,AUTO

      559     8078
      560     8079    2           IF (P.PGSZ + SLUFF_PGSZ) > 256

   8079   1 0004FD  D846 0007                            LDR,R5   7,B6
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:74   
          1 0004FF  DA47 001C                            ADD,R5   SLUFF_PGSZ,AUTO
          1 000501  D970 0100                            CMR,R5   256,IMO
          1 000503  0381 000A                            BLE      s:8081,PREL

      561     8080    2           THEN GMA_#PGS = 256 - SLUFF_PGSZ;

   8080   1 000505  D847 001C                            LDR,R5   SLUFF_PGSZ,AUTO
          1 000507  8255                                 NEG      R5
          1 000508  DA70 0100                            ADD,R5   256,IMO
          1 00050A  DF47 0015                            STR,R5   GMA_#PGS,AUTO
          1 00050C  0F81 0005                            B        s:8084,PREL

      562     8081    2           ELSE GMA_#PGS = P.PGSZ;

   8081   1 00050E  D846 0007                            LDR,R5   7,B6
          1 000510  DF47 0015                            STR,R5   GMA_#PGS,AUTO

      563     8082                            /* page size of the first (short) 64K segment   */
      564     8083
      565     8084    2           SEG_BYT_SZ = (GMA_#PGS) * (256 *2);

   8084   1 000512  F855                                 LDR,R7   R5
          1 000513  6C00                                 LDV,R6   0
          1 000514  7089                                 DOL,R7   9
          1 000515  8D47 0018                            SDI      SEG_BYT_SZ,AUTO

      566     8085                            /* byte size of the first (short) 64K segment   */
      567     8086
      568     8087        /*D* If saving the data in memory, get the physical pages for
      569     8088             the saved copy and move the data from the user's memory
      570     8089             into the physical pages aquired.
      571     8090        */
      572     8091    2           IF FIRST_USER ~= 0

   8091   1 000517  C847 001B                            LDR,R4   FIRST_USER,AUTO
          1 000519  4901 0055                            BEZ,R4   s:8109,PREL

PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:75   
      573     8092    3           THEN DO;

      574     8093    3               CALL GMA$GETPS(PP_SEG$->B$PP_SEG(PP_INDX),GMA_#PGS) ALTRET(RESET_N_RTN)
              8093                         ;

   8093   1 00051B  CBC7 0015                            LAB,B4   GMA_#PGS,AUTO
          1 00051D  CFC7 002C                            STB,B4   @FROM$+4,AUTO
          1 00051F  BCC7 000D                            LDB,B3   PP_SEG$,AUTO
          1 000521  B847 0011                            LDR,R3   PP_INDX,AUTO
          1 000523  ABB3                                 LAB,B2   ,B3,R3
          1 000524  AFC7 002A                            STB,B2   @FROM$+2,AUTO
          1 000526  BBC7 002A                            LAB,B3   @FROM$+2,AUTO
          1 000528  CBF0 0200                            LAB,B4   512,IMO
          1 00052A  E380 0000 0000  xent                 LNJ,B6   GMA$GETPS
          1 00052D       FF27                            DC       s:7993,PREL

      575     8094
      576     8095
      577     8096    3                CALL MOVE_DATA(SPAGE$,UPAGE$);

   8096   1 00052E  EBC7 0009                            LAB,B6   UPAGE$,AUTO
          1 000530  EFC7 0028                            STB,B6   @TO$+2,AUTO
          1 000532  DBC7 000B                            LAB,B5   SPAGE$,AUTO
          1 000534  DFC7 0026                            STB,B5   FCN_MSG+6,AUTO
          1 000536  E3C0 00DD                            LNJ,B6   s:0,PREL
          1 000538       0001                            DC       s:8097,PREL

      578     8097    3                CALL GMA$PS2USR(PP_SEG$->B$PP_SEG(PP_INDX +I),0);

   8097   1 000539  E847 0011                            LDR,R6   PP_INDX,AUTO
          1 00053B  EA47 0006                            ADD,R6   I,AUTO
          1 00053D  EBF0 0000                            LAB,B6   0,IMO
          1 00053F  EFC7 002C                            STB,B6   @FROM$+4,AUTO
          1 000541  DCC7 000D                            LDB,B5   PP_SEG$,AUTO
          1 000543  B856                                 LDR,R3   R6
          1 000544  CBB5                                 LAB,B4   ,B5,R3
          1 000545  CFC7 002A                            STB,B4   @FROM$+2,AUTO
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:76   
          1 000547  BBC7 002A                            LAB,B3   @FROM$+2,AUTO
          1 000549  CBF0 0200                            LAB,B4   512,IMO
          1 00054B  E380 0000 0000  xent                 LNJ,B6   GMA$PS2USR
          1 00054E       0001                            DC       s:8099,PREL

      579     8098
      580     8099    3                GJ_SFILE_CUR_DATA = GJ_SFILE_CUR_DATA + P.PGSZ;

   8099   1 00054F  ECC7 0004                            LDB,B6   @P,AUTO
          1 000551  E800 0000 0000  xsym                 LDR,R6   GJ_SFILE_CUR_DATA
          1 000554  EA46 0007                            ADD,R6   7,B6
          1 000556  EF00 0000 0000  xsym                 STR,R6   GJ_SFILE_CUR_DATA

      581     8100    3                IF GJ_SFILE_CUR_DATA > GJ_SFILE_PEAK_DATA

   8100   1 000559  E900 0000 0000  xsym                 CMR,R6   GJ_SFILE_PEAK_DATA
          1 00055C  0381 0004                            BLE      s:8103,PREL

      582     8101    3                THEN GJ_SFILE_PEAK_DATA = GJ_SFILE_CUR_DATA;

   8101   1 00055E  EF00 0000 0000  xsym                 STR,R6   GJ_SFILE_PEAK_DATA

      583     8102
      584     8103    3                G$SFILE.SEG_1ST_DATA = PP_INDX;

   8103   1 000561  DCC6 0002                            LDB,B5   2,B6
          1 000563  D847 0011                            LDR,R5   PP_INDX,AUTO
          1 000565  DF45 0022                            STR,R5   34,B5

      585     8104    3                G$SFILE.USR_DATA.PGSZ_DATA1 = GMA_#PGS;

   8104   1 000567  DCC6 0002                            LDB,B5   2,B6
          1 000569  C847 0015                            LDR,R4   GMA_#PGS,AUTO
          1 00056B  CF45 0025                            STR,R4   37,B5

      586     8105    3                END;

PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:77   
   8105   1 00056D  0F81 000C                            B        s:8111,PREL

      587     8106
      588     8107        /*D* Or, simply copy the data from the saved copy to the user memory.
      589     8108        */
      590     8109    2           ELSE CALL MOVE_DATA(UPAGE$,SPAGE$);

   8109   1 00056F  CBC7 000B                            LAB,B4   SPAGE$,AUTO
          1 000571  CFC7 0028                            STB,B4   @TO$+2,AUTO
          1 000573  BBC7 0009                            LAB,B3   UPAGE$,AUTO
          1 000575  BFC7 0026                            STB,B3   FCN_MSG+6,AUTO
          1 000577  E3C0 009C                            LNJ,B6   s:0,PREL
          1 000579       0001                            DC       s:8111,PREL

      591     8110
      592     8111    2           PGS_PROC = P.PGSZ - GMA_#PGS;

   8111   1 00057A  ECC7 0004                            LDB,B6   @P,AUTO
          1 00057C  E846 0007                            LDR,R6   7,B6
          1 00057E  E247 0015                            SUB,R6   GMA_#PGS,AUTO
          1 000580  EF47 000F                            STR,R6   PGS_PROC,AUTO

      593     8112    2           ASDT_INDX = ASDT_INDX+1;

   8112   1 000582  8AC7 0010                            INC      ASDT_INDX,AUTO

      594     8113    2           PP_INDX = PP_INDX +1;

   8113   1 000584  8AC7 0011                            INC      PP_INDX,AUTO

      595     8114
      596     8115    2           END/*do if bias not ISR1_BASE*/;

      597     8116
      598     8117
      599     8118        /* Now do the rest a segment at a time.
      600     8119        */
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:78   
      601     8120
      602     8121    1      IF PGS_PROC ~= 0

   8121   1 000586  6901 007E                            BEZ,R6   s:8156,PREL

      603     8122    2      THEN DO;

      604     8123    2           SEGS_64K = (PGS_PROC +255) / 256;

   8123   1 000588  EA70 00FF                            ADD,R6   255,IMO
          1 00058A  6048                                 SOR,R6   8
          1 00058B  EF47 0012                            STR,R6   SEGS_64K,AUTO

      605     8124
      606     8125    3           DO I=0 TO SEGS_64K-1;

   8125   1 00058D  8747 0006                            CL       I,AUTO
          1 00058F  0F81 006F                            B        s:8153+2,PREL

      607     8126    3                IF PGS_PROC > 256

   8126   1 000591  E847 000F                            LDR,R6   PGS_PROC,AUTO
          1 000593  E970 0100                            CMR,R6   256,IMO
          1 000595  0381 000B                            BLE      s:8132,PREL

      608     8127    4                THEN DO;

      609     8128    4                     GMA_#PGS = 256;

   8128   1 000597  D870 0100                            LDR,R5   256,IMO
          1 000599  DF47 0015                            STR,R5   GMA_#PGS,AUTO

      610     8129    4                     PGS_PROC = PGS_PROC - 256;

   8129   1 00059B  EA70 FF00                            ADD,R6   -256,IMO
          1 00059D  EF47 000F                            STR,R6   PGS_PROC,AUTO

PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:79   
      611     8130    4                     END;

   8130   1 00059F  0F81 0003                            B        s:8135,PREL

      612     8131    4                ELSE DO;

      613     8132    4                     GMA_#PGS = PGS_PROC;

   8132   1 0005A1  EF47 0015                            STR,R6   GMA_#PGS,AUTO

      614     8133    4                     END;

      615     8134
      616     8135    3                SEG_BYT_SZ = GMA_#PGS * (256 * 2);

   8135   1 0005A3  F847 0015                            LDR,R7   GMA_#PGS,AUTO
          1 0005A5  6C00                                 LDV,R6   0
          1 0005A6  7089                                 DOL,R7   9
          1 0005A7  8D47 0018                            SDI      SEG_BYT_SZ,AUTO

      617     8136    3                UPAGE$ = G$BPAR1$;

   8136   1 0005A9  EC80 0000 0000  xsym                 LDB,B6   G$BPAR1$
          1 0005AC  EFC7 0009                            STB,B6   UPAGE$,AUTO

      618     8137    3                SPAGE$ = G$BPAR2$;

   8137   1 0005AE  DC80 0000 0000  xsym                 LDB,B5   G$BPAR2$
          1 0005B1  DFC7 000B                            STB,B5   SPAGE$,AUTO

      619     8138
      620     8139    3                IF FIRST_USER ~= 0

   8139   1 0005B3  D847 001B                            LDR,R5   FIRST_USER,AUTO
          1 0005B5  5901 003C                            BEZ,R5   s:8151,PREL

      621     8140    4                THEN DO;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:80   

      622     8141    4                     CALL GMA$GETPS(PP_SEG$->B$PP_SEG(PP_INDX +I) , GMA_#PGS)

   8141   1 0005B7  C847 0011                            LDR,R4   PP_INDX,AUTO
          1 0005B9  CA47 0006                            ADD,R4   I,AUTO
          1 0005BB  CBC7 0015                            LAB,B4   GMA_#PGS,AUTO
          1 0005BD  CFC7 002C                            STB,B4   @FROM$+4,AUTO
          1 0005BF  BCC7 000D                            LDB,B3   PP_SEG$,AUTO
          1 0005C1  B854                                 LDR,R3   R4
          1 0005C2  ABB3                                 LAB,B2   ,B3,R3
          1 0005C3  AFC7 002A                            STB,B2   @FROM$+2,AUTO
          1 0005C5  BBC7 002A                            LAB,B3   @FROM$+2,AUTO
          1 0005C7  CBF0 0200                            LAB,B4   512,IMO
          1 0005C9  E380 0000 0000  xent                 LNJ,B6   GMA$GETPS
          1 0005CC       0003                            DC       s:8147,PREL
          1 0005CD  0F81 0001                            B        s:8147,PREL

      623     8142    5                     WHENALTRETURN DO;

      624     8143
      625     8144
      626     8145    5                          END;

      627     8146
      628     8147    4                     CALL MOVE_DATA(SPAGE$,UPAGE$);

   8147   1 0005CF  EBC7 0009                            LAB,B6   UPAGE$,AUTO
          1 0005D1  EFC7 0028                            STB,B6   @TO$+2,AUTO
          1 0005D3  DBC7 000B                            LAB,B5   SPAGE$,AUTO
          1 0005D5  DFC7 0026                            STB,B5   FCN_MSG+6,AUTO
          1 0005D7  E3C0 003C                            LNJ,B6   s:0,PREL
          1 0005D9       0001                            DC       s:8148,PREL

      629     8148    4                     CALL GMA$PS2USR(PP_SEG$->B$PP_SEG(PP_INDX +I),0);

   8148   1 0005DA  E847 0011                            LDR,R6   PP_INDX,AUTO
          1 0005DC  EA47 0006                            ADD,R6   I,AUTO
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:81   
          1 0005DE  EBF0 0000                            LAB,B6   0,IMO
          1 0005E0  EFC7 002C                            STB,B6   @FROM$+4,AUTO
          1 0005E2  DCC7 000D                            LDB,B5   PP_SEG$,AUTO
          1 0005E4  B856                                 LDR,R3   R6
          1 0005E5  CBB5                                 LAB,B4   ,B5,R3
          1 0005E6  CFC7 002A                            STB,B4   @FROM$+2,AUTO
          1 0005E8  BBC7 002A                            LAB,B3   @FROM$+2,AUTO
          1 0005EA  CBF0 0200                            LAB,B4   512,IMO
          1 0005EC  E380 0000 0000  xent                 LNJ,B6   GMA$PS2USR
          1 0005EF       0001                            DC       s:8149,PREL

      630     8149    4                     END;

   8149   1 0005F0  0F81 000C                            B        s:8153,PREL

      631     8150
      632     8151    3                ELSE CALL MOVE_DATA(UPAGE$,SPAGE$);

   8151   1 0005F2  CBC7 000B                            LAB,B4   SPAGE$,AUTO
          1 0005F4  CFC7 0028                            STB,B4   @TO$+2,AUTO
          1 0005F6  BBC7 0009                            LAB,B3   UPAGE$,AUTO
          1 0005F8  BFC7 0026                            STB,B3   FCN_MSG+6,AUTO
          1 0005FA  E3C0 0019                            LNJ,B6   s:0,PREL
          1 0005FC       0001                            DC       s:8153,PREL

      633     8152
      634     8153    3                END /*do to segs_64k */;

   8153   1 0005FD  8AC7 0006                            INC      I,AUTO
          1 0005FF  E847 0006                            LDR,R6   I,AUTO
          1 000601  E947 0012                            CMR,R6   SEGS_64K,AUTO
          1 000603  0201 FF8D                            BL       s:8126,PREL

      635     8154    2           END /* do if PGS_PROC ~= 0 */;

      636     8155
      637     8156    1      IF FIRST_USER = 1
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:82   

   8156   1 000605  E847 001B                            LDR,R6   FIRST_USER,AUTO
          1 000607  6D01                                 CMV,R6   1
          1 000608  0981 FE71                            BNE      s:8014,PREL

      638     8157    2      THEN DO;

      639     8158    2           G$SFILE.PGSZ_DATA = P.PGSZ;

   8158   1 00060A  ECC7 0004                            LDB,B6   @P,AUTO
          1 00060C  DCC6 0002                            LDB,B5   2,B6
          1 00060E  D846 0007                            LDR,R5   7,B6
          1 000610  DF45 0026                            STR,R5   38,B5

      640     8159    2           GOTO COUNT_N_RTN;

   8159   1 000612  0F81 FE2F                            B        s:7987,PREL

      641     8160    2           END;
      642     8161
      643     8162    1      ELSE GOTO COPY_RTN;
      644     8163
      645     8164
      646     8165        %EJECT;
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:83   
      647     8166        /*I* NAME: MOVE_DATA
      648     8167
      649     8168             PURPOSE: To map and move.
      650     8169
      651     8170             INPUT: TO$ = address of where data is to go
      652     8171                    FROM$ = address of where data is now
      653     8172
      654     8173             CALL:  ASDT_INDX = index into G$ASDT_USR for descriptor that is
      655     8174                                to be mapped into G$ASDT_MCL.BPAR1
      656     8175
      657     8176                    PP_INDX   = index into B$PP_SEG for physical page to be
      658     8177                                mapped into G$ASDT_MCL.BPAR2.
      659     8178
      660     8179                    I = increment to be applied to ASDT_INDX and PP_INDX.
      661     8180
      662     8181                    SEG_BYT_SZ = byte size of data to be moved.
      663     8182
      664     8183                    CALL MOVE_DATA(TO$, FROM$);
      665     8184        */
      666     8185    1   MOVE_DATA: PROC(TO$,FROM$);

   8185   1 000614  EFC7 0024            MOVE_DATA       STB,B6   FCN_MSG+4,AUTO

      667     8186
      668     8187    2   DCL TO$ PTR;
      669     8188    2   DCL FROM$ PTR;
      670     8189
      671     8190            %LOCK (G=GM_MEATLOCK);

   8195   1 000616  BB80 0000 0000  02                   LAB,B3   0
          1 000619  CBF0 0100                            LAB,B4   256,IMO
          1 00061B  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          1 00061E       0001                            DC       s:8197,PREL

      672     8197    2      G$ASDT_MCL.BPAR1 = G$ASDT_USR.DESC(ASDT_INDX +I);

   8197   1 00061F  E847 0010                            LDR,R6   ASDT_INDX,AUTO
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:84   
          1 000621  EA47 0006                            ADD,R6   I,AUTO
          1 000623  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_USR$
          1 000626  B856                                 LDR,R3   R6
          1 000627  8CB6                                 LDI      ,B6,R3
          1 000628  DC80 0000 0000  xsym                 LDB,B5   G$ASDT_MCL$
          1 00062B  8D45 002A                            SDI      42,B5

      673     8198    2      G$ASDT_MCL.BPAR2 = G$ASDT_USR.DESC(ASDT_INDX +I);

   8198   1 00062D  D847 0010                            LDR,R5   ASDT_INDX,AUTO
          1 00062F  DA47 0006                            ADD,R5   I,AUTO
          1 000631  B855                                 LDR,R3   R5
          1 000632  8CB6                                 LDI      ,B6,R3
          1 000633  8D45 002C                            SDI      44,B5

      674     8199    2      G$ASDT_MCL.BPAR2.BASE = PP_SEG$->B$PP_SEG(PP_INDX +I);

   8199   1 000635  D847 0011                            LDR,R5   PP_INDX,AUTO
          1 000637  DA47 0006                            ADD,R5   I,AUTO
          1 000639  CCC7 000D                            LDB,B4   PP_SEG$,AUTO
          1 00063B  B855                                 LDR,R3   R5
          1 00063C  D834                                 LDR,R5   ,B4,R3
          1 00063D  DAC5 002C                            SRM,R5,'7FFF'X    44,B5
          1 00063F       7FFF

      675     8200           %UNLOCK (G=GM_MEATLOCK);

   8205   1 000640  BB80 0000 0000  02                   LAB,B3   0
          1 000643  CBF0 0100                            LAB,B4   256,IMO
          1 000645  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          1 000648       0001                            DC       s:8208,PREL

      676     8207
      677     8208    2      CALL GHH$ASD(G$BPAR1$,G$ASDT_MCL.BPAR1);

   8208   1 000649  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_MCL$
          1 00064C  DBC6 002A                            LAB,B5   42,B6
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:85   
          1 00064E  DFC7 002C                            STB,B5   @FROM$+4,AUTO
          1 000650  CB80 0000 0000  xsym                 LAB,B4   G$BPAR1$
          1 000653  CFC7 002A                            STB,B4   @FROM$+2,AUTO
          1 000655  BBC7 002A                            LAB,B3   @FROM$+2,AUTO
          1 000657  CBF0 0200                            LAB,B4   512,IMO
          1 000659  E380 0000 0000  xent                 LNJ,B6   GHH$ASD
          1 00065C       0001                            DC       s:8209,PREL

      678     8209    2      CALL GHH$ASD(G$BPAR2$,G$ASDT_MCL.BPAR2);

   8209   1 00065D  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_MCL$
          1 000660  DBC6 002C                            LAB,B5   44,B6
          1 000662  DFC7 002C                            STB,B5   @FROM$+4,AUTO
          1 000664  CB80 0000 0000  xsym                 LAB,B4   G$BPAR2$
          1 000667  CFC7 002A                            STB,B4   @FROM$+2,AUTO
          1 000669  BBC7 002A                            LAB,B3   @FROM$+2,AUTO
          1 00066B  CBF0 0200                            LAB,B4   512,IMO
          1 00066D  E380 0000 0000  xent                 LNJ,B6   GHH$ASD
          1 000670       0001                            DC       s:8211,PREL

      679     8210
      680     8211    2      MOVE_SZ = 32 * 512;                  /* move 32 pages at a time  */

   8211   1 000671  E870 4000                            LDR,R6   16384,IMO
          1 000673  EF47 001A                            STR,R6   MOVE_SZ,AUTO

      681     8212
      682     8213    3      DO WHILE(SEG_BYT_SZ ~= 0);

   8213   1 000675  8CC7 0018                            LDI      SEG_BYT_SZ,AUTO
          1 000677  84F0 0000 0000                       SID      0,IMO
          1 00067A  6981 0003                            BNEZ,R6  s:8214,PREL
          1 00067C  7901 004E                            BEZ,R7   s:8224,PREL

      683     8214    3           IF SEG_BYT_SZ < MOVE_SZ

   8214   1 00067E  F847 001A                            LDR,R7   MOVE_SZ,AUTO
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:86   
          1 000680  6C00                                 LDV,R6   0
          1 000681  84C7 0018                            SID      SEG_BYT_SZ,AUTO
          1 000683  0681 0009                            BCF      s:8217,PREL
          1 000685  6981 0003                            BNEZ,R6  s:8215,PREL
          1 000687  7901 0005                            BEZ,R7   s:8217,PREL

      684     8215    3           THEN MOVE_SZ = SEG_BYT_SZ;

   8215   1 000689  E847 0019                            LDR,R6   SEG_BYT_SZ+1,AUTO
          1 00068B  EF47 001A                            STR,R6   MOVE_SZ,AUTO

      685     8216
      686     8217    3           TO$->B$APAGE = FROM$->B$APAGE;

   8217   1 00068D  ECC7 0026                            LDB,B6   @TO$,AUTO
          1 00068F  DC86                                 LDB,B5   ,B6
          1 000690  CCC7 0028                            LDB,B4   @FROM$,AUTO
          1 000692  BC84                                 LDB,B3   ,B4
          1 000693  AB83                                 LAB,B2   ,B3
          1 000694  2C00                                 LDV,R2   0
          1 000695  E847 001A                            LDR,R6   MOVE_SZ,AUTO
          1 000697  BB85                                 LAB,B3   ,B5
          1 000698  3C00                                 LDV,R3   0
          1 000699  0008                                 MMM

      687     8218
      688     8219    3           TO$ = PINCRC(TO$,MOVE_SZ);

   8219   1 00069A  AC86                                 LDB,B2   ,B6
          1 00069B  AFC7 002A                            STB,B2   @FROM$+2,AUTO
          1 00069D  8CC7 002A                            LDI      @FROM$+2,AUTO
          1 00069F  7031                                 DCL,R7   1
          1 0006A0  8D47 002C                            SDI      @FROM$+4,AUTO
          1 0006A2  F847 001A                            LDR,R7   MOVE_SZ,AUTO
          1 0006A4  6C00                                 LDV,R6   0
          1 0006A5  8447 002C                            AID      @FROM$+4,AUTO
          1 0006A7  7071                                 DCR,R7   1
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:87   
          1 0006A8  8D06                                 SDI      ,B6

      689     8220    3           FROM$ = PINCRC(FROM$,MOVE_SZ);

   8220   1 0006A9  AC84                                 LDB,B2   ,B4
          1 0006AA  AFC7 002A                            STB,B2   @FROM$+2,AUTO
          1 0006AC  8CC7 002A                            LDI      @FROM$+2,AUTO
          1 0006AE  7031                                 DCL,R7   1
          1 0006AF  8D47 002C                            SDI      @FROM$+4,AUTO
          1 0006B1  F847 001A                            LDR,R7   MOVE_SZ,AUTO
          1 0006B3  6C00                                 LDV,R6   0
          1 0006B4  8447 002C                            AID      @FROM$+4,AUTO
          1 0006B6  7071                                 DCR,R7   1
          1 0006B7  8D04                                 SDI      ,B4

      690     8221    3           SEG_BYT_SZ = SEG_BYT_SZ - MOVE_SZ;

   8221   1 0006B8  F847 001A                            LDR,R7   MOVE_SZ,AUTO
          1 0006BA  6C00                                 LDV,R6   0
          1 0006BB  84C7 0018                            SID      SEG_BYT_SZ,AUTO
          1 0006BD  8656                                 CPL      R6
          1 0006BE  8657                                 CPL      R7
          1 0006BF  8470 0000 0001                       AID      1,IMO
          1 0006C2  8D47 0018                            SDI      SEG_BYT_SZ,AUTO

      691     8222    3           END/* do while size_left ~= 0 */;

   8222   1 0006C4  84F0 0000 0000                       SID      0,IMO
          1 0006C7  6981 FFB6                            BNEZ,R6  s:8214,PREL
          1 0006C9  7981 FFB4                            BNEZ,R7  s:8214,PREL

      692     8223
      693     8224    2      RETURN;

   8224   1 0006CB  ECC7 0024                            LDB,B6   FCN_MSG+4,AUTO
          1 0006CD  C3C6 0001                            LNJ,B4   1,B6
      694     8225
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:88   
      695     8226    2   END MOVE_DATA;
      696     8227    1   END GJU$GET_PROC;
      697     8228        %EOD;

PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:89   
--  Include file information  --

   K_ID_E.:E05TOU  is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   M_ERRORS_C.:E05TOU  is referenced.
   GM_VIRTUAL_E.:E05TOU  is referenced.
   GH_SCHD_E.:E05TOU  is referenced.
   G_SFILE_M.:E05TOU  is referenced.
   G_JIT_M.:E05TOU  is referenced.
   GJ_MACROS_M.:E05TOU  is referenced.
   GJ_MSG_M.:E05TOU  is referenced.
   GH_GATE_M.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GJU$GET_PROC.
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:90   

 **** Variables and constants ****

  ****  Section 000 RoData GJU$GET_PROC

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(32)    r     1 EMMFAILED

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

    28-0-0/w PTR         r     1 @FROM$                     4-0-0/w PTR         r     1 @P
    26-0-0/w PTR         r     1 @TO$                      10-0-0/w UBIN(16)    r     1 ASDT_INDX
    20-0-0/w STRC(48)    r     1 FCN_MSG                   1B-0-0/w UBIN(16)    r     1 FIRST_USER
    *0-0-0/w PTR         r     1 FROM$                     15-0-0/w UBIN(16)    r     1 GMA_#PGS
    14-0-0/w UBIN(16)    r     1 GMA_SEGX                  13-0-0/w UBIN(16)    r     1 GMA_VP#
     6-0-0/w UBIN(16)    r     1 I                          7-0-0/w UBIN(16)    r     1 J
    1A-0-0/w UBIN(16)    r     1 MOVE_SZ                   *0-0-0/w STRC(128)   r     1 P
     F-0-0/w UBIN(16)    r     1 PGS_PROC                  11-0-0/w SBIN(16)    r     1 PP_INDX
     D-0-0/w PTR         r     1 PP_SEG$                    8-0-0/w UBIN(16)    r     1 PROG_TYPE
    12-0-0/w UBIN(16)    r     1 SEGS_64K                  18-0-0/w UBIN(32)    r     1 SEG_BYT_SZ
    16-0-0/w UBIN(32)    r     1 SIZE_LEFT                 1C-0-0/w UBIN(16)    r     1 SLUFF_PGSZ
     B-0-0/w PTR         r     1 SPAGE$                    *0-0-0/w PTR         r     1 TO$
     9-0-0/w PTR         r     1 UPAGE$                    1D-0-0/w VECT        r     1 V_

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 G$ASDT_MCL$                0-0-0/w PTR         r     1 G$ASDT_USR$
     0-0-0/w PTR         r     1 G$BPAR1$                   0-0-0/w PTR         r     1 G$BPAR2$
     0-0-0/w PTR         r     1 G$JIT$                     0-0-0/w UBIN(16)    r     1 GJ_SFILE_CUR_DATA
     0-0-0/w UBIN(16)    r     1 GJ_SFILE_CUR_PROC          0-0-0/w UBIN(16)    r     1 GJ_SFILE_FRQ
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:91   
     0-0-0/w UBIN(16)    r     1 GJ_SFILE_LIB_DATA          0-0-0/w UBIN(16)    r     1 GJ_SFILE_MAX_DATA
     0-0-0/w UBIN(16)    r     1 GJ_SFILE_PEAK_DATA         0-0-0/w UBIN(16)    r     1 GJ_SFILE_PEAK_PROC
     0-0-0/w STRC(48)    r     1 GM_MEATLOCK                0-0-0/w UBIN(16)    r     1 GM_SHUF
     0-0-0/w UBIN(16)    r     1 GM_STEP                    0-0-0/w STRC(48)    r     1 G_SLOCK
     0-0-0/w STRC(2208)  r     1 PS_LCP6STT

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c ACHR        r     1 B$APAGE
     0-0-0/w UBIN(16)    r     1 B$PP_SEG(0:6)
     0-0-0/w STRC(992)   r     1 G$ASDT_MCL
     0-0-0/w STRC(32)    r     1 G$ASDT_USR(0:30)
     0-0-0/w STRC(5616)  r     1 G$JIT                      0-0-0/w STRC(768)   r     1 G$SFILE
     0-0-0/w STRC(224)   r     1 RD_PARAMS


   Procedure GJU$GET_PROC requires 1743 words for executable code.
   Procedure GJU$GET_PROC requires 52 words of local(AUTO) storage.
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:92   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:93   
          MINI XREF LISTING

ASDT_INDX
      5486**DCL      7594<<ASSIGN   7596>>IF       7597>>ASSIGN   7598>>ASSIGN   7631>>ASSIGN   7633>>ASSIGN
      7634>>ASSIGN   7635>>ASSIGN   7636>>ASSIGN   7640>>ASSIGN   7644>>ASSIGN   7711>>ASSIGN   7734>>ASSIGN
      7762>>ASSIGN   7815>>CALL     7974<<ASSIGN   8042<<ASSIGN   8043>>ASSIGN   8066<<ASSIGN   8067>>ASSIGN
      8112<<ASSIGN   8112>>ASSIGN   8197>>ASSIGN   8198>>ASSIGN
B$APAGE
      6843**DCL      8217<<ASSIGN   8217>>ASSIGN
B$PP_SEG
      6844**DCL      7631>>ASSIGN   7711<<ASSIGN   8093<>CALL     8097<>CALL     8141<>CALL     8148<>CALL
      8199>>ASSIGN
COPY_RTN
      8014**LABEL    8162--GOTO
COUNT_N_RTN
      7987**LABEL    8159--GOTO
DONT_KEEP_DATA
      7940**LABEL    7951--GOTO
EMMFAILED
      6862**DCL      7694>>ASSIGN
FCN_MSG
      5512**DCL      7783--ASSIGN
FCN_MSG.ERR
      5537**DCL      7784<<ASSIGN   7787>>IF       7789>>ASSIGN
FCN_MSG.FCN
      5512**DCL      7778<<ASSIGN   7780<<ASSIGN
FIRST_USER
      5495**DCL      7902<<ASSIGN   7914<<ASSIGN   7916<<ASSIGN   7935>>IF       7983>>IF       8045>>IF
      8091>>IF       8139>>IF       8156>>IF
FROM$ IN PROCEDURE MOVE_DATA
      8188**DCL      8185--PROC     8217>>ASSIGN   8220<<ASSIGN   8220>>ASSIGN
G$ASDT_MCL.BPAR1
      6223**DCL      8197<<ASSIGN   8208<>CALL
G$ASDT_MCL.BPAR2
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:94   
      6245**DCL      8198<<ASSIGN   8209<>CALL
G$ASDT_MCL.BPAR2.BASE
      6247**DCL      8199<<ASSIGN
G$ASDT_MCL$
      7469**DCL      5740--IMP-PTR  8197>>ASSIGN   8198>>ASSIGN   8199>>ASSIGN   8208>>CALL     8209>>CALL
G$ASDT_USR.DESC
      5727**DCL      8197>>ASSIGN   8198>>ASSIGN
G$ASDT_USR.DESC.BASE
      5729**DCL      7631<<ASSIGN   7711>>ASSIGN
G$ASDT_USR.DESC.EP
      5730**DCL      7636<<ASSIGN
G$ASDT_USR.DESC.RP
      5729**DCL      7634<<ASSIGN
G$ASDT_USR.DESC.SIZE
      5731**DCL      7640<<ASSIGN   7644<<ASSIGN
G$ASDT_USR.DESC.V
      5729**DCL      7633<<ASSIGN
G$ASDT_USR.DESC.WP
      5730**DCL      7635<<ASSIGN   7734<<ASSIGN   7762<<ASSIGN
G$ASDT_USR$
      7468**DCL      5710--IMP-PTR  7631>>ASSIGN   7633>>ASSIGN   7634>>ASSIGN   7635>>ASSIGN   7636>>ASSIGN
      7640>>ASSIGN   7644>>ASSIGN   7711>>ASSIGN   7734>>ASSIGN   7762>>ASSIGN   8197>>ASSIGN   8198>>ASSIGN
G$BPAR1$
      7470**DCL      7729>>ASSIGN   7978>>ASSIGN   8076>>ASSIGN   8136>>ASSIGN   8208<>CALL
G$BPAR2$
      7471**DCL      7730>>ASSIGN   7979>>ASSIGN   8077>>ASSIGN   8137>>ASSIGN   8209<>CALL
G$JIT.ERRLOG
      6772**DCL      6775--REDEF
G$JIT.JSUNIT
      6511**DCL      6512--REDEF
G$JIT.MCLS
      6510**DCL      6510--REDEF
G$JIT.PROG_ENTRY
      6499**DCL      7775>>IF
G$JIT.TMRZ
      6779**DCL      6780--REDEF
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:95   
G$JIT.USER_EXTIME
      6503**DCL      6504--REDEF
G$JIT.USER_MEMTIME
      6506**DCL      6506--REDEF
G$JIT.USER_SVTIME
      6505**DCL      6505--REDEF
G$JIT$
      7472**DCL      6442--IMP-PTR  7775>>IF
G$SFILE
      5684**DCL      7655<>CALL     7841<>CALL
G$SFILE.FRQ
      5699**DCL      7937>>IF
G$SFILE.LCP6_FLGS
      5695**DCL      7852<<ASSIGN   7852>>ASSIGN
G$SFILE.LCP6_FLGS.INST_DATA
      5699**DCL      7911>>IF       7913<<ASSIGN   7950<<ASSIGN   8003<<ASSIGN
G$SFILE.LIB_WDSZ_DATA
      5700**DCL      5701--REDEF    7605>>ASSIGN   7809<<ASSIGN
G$SFILE.PGSZ_DATA
      5701**DCL      7810<<ASSIGN   7890>>IF       8158<<ASSIGN
G$SFILE.PGSZ_PROC
      5701**DCL      7601>>ASSIGN   7621>>ASSIGN   7834<<ASSIGN
G$SFILE.PGSZ_ROS
      5699**DCL      7890>>IF       7987<<ASSIGN
G$SFILE.PP_ROS
      5702**DCL      7985<>CALL     7989<>CALL
G$SFILE.PP_SEG1
      5702**DCL      7593--ASSIGN   7876--ASSIGN
G$SFILE.RU_FLGS.CP
      5691**DCL      7937>>IF
G$SFILE.RU_FLGS.LIB
      5691**DCL      7619>>IF
G$SFILE.SEG_1ST_DATA
      5700**DCL      7812<<ASSIGN   8047<<ASSIGN   8103<<ASSIGN
G$SFILE.SEG_1ST_PROC
      5700**DCL      7835<<ASSIGN
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:96   
G$SFILE.USR_DATA.COPY
      5701**DCL      7894<<ASSIGN   7894>>ASSIGN   8023<<ASSIGN   8023>>ASSIGN
G$SFILE.USR_DATA.PGSZ_DATA1
      5701**DCL      8049<<ASSIGN   8050<<ASSIGN   8104<<ASSIGN
GHH$ASD
      7475**DCL-ENT  8208--CALL     8209--CALL
GHH$LOCK
       104**DCL-ENT  7629--CALL     7709--CALL     7850--CALL     7882--CALL     7932--CALL     8001--CALL
      8021--CALL     8195--CALL
GHH$UNLOCK
       104**DCL-ENT  7652--CALL     7718--CALL     7858--CALL     7900--CALL     7923--CALL     7946--CALL
      7963--CALL     8009--CALL     8029--CALL     8205--CALL
GHS$RUE
      7483**DCL-ENT  7860--CALL
GJS$READ_RU
      7482**DCL-ENT  7759--CALL     7925--CALL
GJ_SFILE_CUR_DATA
      6897**DCL      7937>>IF       7992<<ASSIGN   7992>>ASSIGN   7993>>IF       7994>>ASSIGN   8099<<ASSIGN
      8099>>ASSIGN   8100>>IF       8101>>ASSIGN
GJ_SFILE_CUR_PROC
      6901**DCL      7837<<ASSIGN   7837>>ASSIGN   7838>>IF       7839>>ASSIGN
GJ_SFILE_FRQ
      6903**DCL      7937>>IF
GJ_SFILE_LIB_DATA
      6900**DCL      7811<<ASSIGN   7811>>ASSIGN
GJ_SFILE_MAX_DATA
      6898**DCL      7937>>IF
GJ_SFILE_PEAK_DATA
      6899**DCL      7993>>IF       7994<<ASSIGN   8100>>IF       8101<<ASSIGN
GJ_SFILE_PEAK_PROC
      6902**DCL      7838>>IF       7839<<ASSIGN
GMA$GET
      7476**DCL-ENT  7692--CALL
GMA$GETPS
      7477**DCL-ENT  7985--CALL     8093--CALL     8141--CALL
GMA$PS2USR
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:97   
      7478**DCL-ENT  7989--CALL     8097--CALL     8148--CALL
GMA$SHARED
      7480**DCL-ENT  7655--CALL     7841--CALL
GMA$UNSHARE
      7481**DCL-ENT  7690--CALL     7815--CALL
GMA_#PGS
      5491**DCL      7668<<ASSIGN   7672<<ASSIGN   7675>>IF       7677>>ASSIGN   7692<>CALL     8080<<ASSIGN
      8081<<ASSIGN   8084>>ASSIGN   8093<>CALL     8104>>ASSIGN   8111>>ASSIGN   8128<<ASSIGN   8132<<ASSIGN
      8135>>ASSIGN   8141<>CALL
GMA_SEGX
      5490**DCL      7682<<ASSIGN   7689>>IF       7690<>CALL     7692<>CALL
GMA_VP#
      5489**DCL      7681<<ASSIGN   7682>>ASSIGN
GM_MEATLOCK
      6919**DCL      7629<>CALL     7652<>CALL     7709<>CALL     7718<>CALL     8195<>CALL     8205<>CALL
GM_SHUF
      6905**DCL      7937>>IF
GM_STEP
      6906**DCL      7937>>IF
G_SLOCK
      6938**DCL      7850<>CALL     7858<>CALL     7882<>CALL     7900<>CALL     7923<>CALL     7932<>CALL
      7946<>CALL     7963<>CALL     8001<>CALL     8009<>CALL     8021<>CALL     8029<>CALL
I
      5479**DCL      7623<<DOINDEX  7631>>ASSIGN   7631>>ASSIGN   7633>>ASSIGN   7634>>ASSIGN   7635>>ASSIGN
      7636>>ASSIGN   7640>>ASSIGN   7644>>ASSIGN   7665<<DOINDEX  7681>>ASSIGN   7711>>ASSIGN   7711>>ASSIGN
      7734>>ASSIGN   7761<<DOINDEX  7762>>ASSIGN   7814<<DOINDEX  7815>>CALL     7976<<ASSIGN   8068<<ASSIGN
      8097>>CALL     8125<<DOINDEX  8141>>CALL     8148>>CALL     8197>>ASSIGN   8198>>ASSIGN   8199>>ASSIGN
J
      5480**DCL      8060<<ASSIGN   8070>>ASSIGN
KNA$READ
      7485**DCL-ENT  7786--CALL
KNA$WRITE
      7484**DCL-ENT  7785--CALL
MOVE_DATA
      8185**PROC     7731--CALL     7988--CALL     8014--CALL     8096--CALL     8109--CALL     8147--CALL
      8151--CALL
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:98   
MOVE_SZ
      5494**DCL      6843--IMP-SIZ  8211<<ASSIGN   8214>>IF       8215<<ASSIGN   8217>>ASSIGN   8217>>ASSIGN
      8219>>ASSIGN   8220>>ASSIGN   8221>>ASSIGN
P
      5437**DCL        62--PROC     7874--ENTRY
P.PGSZ
      5472**DCL      7602>>ASSIGN   7810>>ASSIGN   7811>>ASSIGN   7834>>ASSIGN   7837>>ASSIGN   7937>>IF
      7937>>IF       7985<>CALL     7987>>ASSIGN   7992>>ASSIGN   8041>>ASSIGN   8070<<ASSIGN   8070>>ASSIGN
      8079>>IF       8081>>ASSIGN   8099>>ASSIGN   8111>>ASSIGN   8158>>ASSIGN
P.RD_PARAMS$
      5438**DCL      5576--IMP-PTR  7694>>ASSIGN   7755>>ASSIGN   7757>>ASSIGN   7759>>CALL     7785>>CALL
      7785>>CALL     7786>>CALL     7786>>CALL     7789>>ASSIGN   7809>>ASSIGN   7890>>IF       7890>>IF
      7925>>CALL     7972>>IF       7978>>ASSIGN   7981>>ASSIGN   8039>>IF       8062>>ASSIGN   8062>>ASSIGN
      8063>>ASSIGN
P.SHARE.GET_PROC
      5455**DCL      7617>>IF
P.SHARE.SFILE$
      5450**DCL      5684--IMP-PTR  7593>>ASSIGN   7601>>ASSIGN   7605>>ASSIGN   7619>>IF       7621>>ASSIGN
      7655>>CALL     7809>>ASSIGN   7810>>ASSIGN   7812>>ASSIGN   7834>>ASSIGN   7835>>ASSIGN   7841>>CALL
      7852>>ASSIGN   7852>>ASSIGN   7876>>ASSIGN   7890>>IF       7890>>IF       7894>>ASSIGN   7894>>ASSIGN
      7911>>IF       7913>>ASSIGN   7937>>IF       7937>>IF       7950>>ASSIGN   7985>>CALL     7987>>ASSIGN
      7989>>CALL     8003>>ASSIGN   8023>>ASSIGN   8023>>ASSIGN   8047>>ASSIGN   8049>>ASSIGN   8050>>ASSIGN
      8103>>ASSIGN   8104>>ASSIGN   8158>>ASSIGN
P.SHARE.SHARE_PROC
      5459**DCL      7600>>IF       7604>>IF       7617>>IF       7687>>IF       7689>>IF       7702>>IF
      7726>>IF       7726>>IF       7733>>IF       7742>>IF       7745>>IF       7832>>IF
P.VP#
      5468**DCL      7594>>ASSIGN   7681>>ASSIGN   8042>>ASSIGN   8060>>ASSIGN   8063<<ASSIGN   8066>>ASSIGN
      8070>>ASSIGN   8073>>ASSIGN
PGS_PROC
      5485**DCL      7601<<ASSIGN   7602<<ASSIGN   7606>>ASSIGN   7608>>ASSIGN   7621<<ASSIGN   7638>>IF
      7641<<ASSIGN   7641>>ASSIGN   7644>>ASSIGN   7666>>IF       7669<<ASSIGN   7669>>ASSIGN   7672>>ASSIGN
      8041<<ASSIGN   8048>>IF       8050>>ASSIGN   8111<<ASSIGN   8121>>IF       8123>>ASSIGN   8126>>IF
      8129<<ASSIGN   8129>>ASSIGN   8132>>ASSIGN
PP_INDX
      5487**DCL      7597<<ASSIGN   7598<<ASSIGN   7631>>ASSIGN   7711>>ASSIGN   7812>>ASSIGN   7835>>ASSIGN
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:99   
      7975<<ASSIGN   8043<<ASSIGN   8047>>ASSIGN   8067<<ASSIGN   8073>>ASSIGN   8093>>CALL     8097>>CALL
      8103>>ASSIGN   8113<<ASSIGN   8113>>ASSIGN   8141>>CALL     8148>>CALL     8199>>ASSIGN
PP_SEG$
      5484**DCL      7593<<ASSIGN   7631>>ASSIGN   7711>>ASSIGN   7876<<ASSIGN   8093>>CALL     8097>>CALL
      8141>>CALL     8148>>CALL     8199>>ASSIGN
PROG_TYPE
      5481**DCL      7755<<ASSIGN   7756>>IF       7777>>IF       7779>>IF       7807>>IF       7843>>IF
      7843>>IF
PS_LCP6STT.FPRG_FTCH_HOST
      7455**DCL      7754<<ASSIGN   7754>>ASSIGN
PS_LCP6STT.FPRG_FTCH_SFILE
      7460**DCL      7620<<ASSIGN   7620>>ASSIGN
PS_LCP6STT.REQSTATS.DSPMSK
      7230**DCL      7236--REDEF
PS_LCP6STT.REQSTATS.SLCMSK
      7271**DCL      7278--REDEF
RD_PARAMS
      5576**DCL      7759<>CALL     7925<>CALL
RD_PARAMS.BIAS
      5584**DCL      8062>>ASSIGN
RD_PARAMS.DCB#
      5614**DCL      7785<>CALL     7786<>CALL
RD_PARAMS.ERR
      5634**DCL      7694<<ASSIGN   7785<>CALL     7786<>CALL     7789<<ASSIGN
RD_PARAMS.PROG_TYPE
      5577**DCL      7755>>ASSIGN   7757<<ASSIGN
RD_PARAMS.TOT_SECTSZ
      5598**DCL      7809>>ASSIGN   7981>>ASSIGN
RD_PARAMS.USR_LOC
      5603**DCL      7890>>IF       7890>>IF       7972>>IF       7978>>ASSIGN   8039>>IF       8062<<ASSIGN
      8063>>ASSIGN
RD_PARAMS.USR_LOC$
      5602**DCL      5603--REDEF
RESET_N_RTN
      7993**LABEL    7985--CALLALT  8093--CALLALT
SEGS_64K
PL6.E3A0      #001=GJU$GET_PROC File=GJU$UTIL.:E05TSI                            TUE 07/29/97 22:04 Page:100  
      5488**DCL      7608<<ASSIGN   7623>>DOINDEX  7665>>DOINDEX  7761>>DOINDEX  7814>>DOINDEX  8123<<ASSIGN
      8125>>DOINDEX
SEG_BYT_SZ
      5493**DCL      7676<<ASSIGN   7677<<ASSIGN   7679>>ASSIGN   7981<<ASSIGN   8084<<ASSIGN   8135<<ASSIGN
      8213>>DOWHILE  8214>>IF       8215>>ASSIGN   8221<<ASSIGN   8221>>ASSIGN
SIZE_LEFT
      5492**DCL      7605<<ASSIGN   7606<<ASSIGN   7675>>IF       7676>>ASSIGN   7679<<ASSIGN   7679>>ASSIGN
SLUFF_PGSZ
      5496**DCL      8073<<ASSIGN   8076>>ASSIGN   8079>>IF       8080>>ASSIGN
SPAGE$
      5483**DCL      7730<<ASSIGN   7731<>CALL     7979<<ASSIGN   7988<>CALL     8014<>CALL     8077<<ASSIGN
      8096<>CALL     8109<>CALL     8137<<ASSIGN   8147<>CALL     8151<>CALL
TO$ IN PROCEDURE MOVE_DATA
      8187**DCL      8185--PROC     8217>>ASSIGN   8219<<ASSIGN   8219>>ASSIGN
UPAGE$
      5482**DCL      7729<<ASSIGN   7731<>CALL     7978<<ASSIGN   7988<>CALL     8014<>CALL     8076<<ASSIGN
      8096<>CALL     8109<>CALL     8136<<ASSIGN   8147<>CALL     8151<>CALL
V_
      5497**DCL      7783<<ASSIGN   7785<>CALL     7786<>CALL

PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:101  
      698        1        /*T***********************************************************/
      699        2        /*T*                                                         */
      700        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      701        4        /*T*                                                         */
      702        5        /*T***********************************************************/
      703        6        /*F* NAME: GJU$GET_DB
      704        7
      705        8             PURPOSE:  To associate a debugger with a run-unit.
      706        9
      707       10             CALL:    CALL GJU$GET_DB ALTRET(LABEL);
      708       11
      709       12        */
      710       13        GJU$GET_DB: PROC ALTRET;
      711       14
      712       15        %INCLUDE GH_GATE_M;
      713       56        %INCLUDE GH_SCHD_M;
      714      200        %INCLUDE GJ_MSG_M;
      715      513        %INCLUDE GJ_MACROS_M;
      716      986        %INCLUDE GM_MACRO_M;
      717     1468        %INCLUDE G_ROS_M;
      718     1550        %INCLUDE G_SFILE_M;
      719     1610        %INCLUDE G_JIT_M;
      720     1875        %INCLUDE G_HJIT_M;
      721     2020 S      %INCLUDE GF_LCP6_M;
      722     2021 S      %INCLUDE GH_LCP6_M;
      723     2022 S      %INCLUDE GU_LCP6_M;
      724     2023        %INCLUDE GD$MACS_M;
      725     2061
      726     2062 S      %INCLUDE G_LCP6_E;
      727     2063        %INCLUDE GH_SCHD_E;
      728     2159        %INCLUDE GM_VIRTUAL_E;
      729     2369        %INCLUDE J_ERRORS_C;
      730     2456        %INCLUDE M_ERRORS_C;
      731     2520
      732     2521                                                /* AUTO                     */
      733     2522        %GJ_SFILE_PARAMS (FPTN=SF_PARAMS,STCLASS=AUTO);
      734     2662        %GJ_GETPROC_PARAMS (FPTN=GP_PARAMS,STCLASS=AUTO);
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:102  
      735     2707        %GJ_READ_PARAMS (FPTN=RD_PARAMS,STCLASS=AUTO);
      736     2804        %GM_CHKSZ_PARAMS (FPTN=CHKSZ_PARAMS,STCLASS=AUTO);
      737     2898        %GJ_FID (FPTN=ALIB_FID,STCLASS=AUTO);
      738     2926        %GJ_ALIB_MSG (FPTN=ALIB_MSG,STCLASS=AUTO);
      739     3011        %GJ_ALIB_DATA (FPTN=ALIB_DATA,STCLASS=AUTO);
      740     3105        %GJ_FCN_MSG (FPTN=FCN_MSG,STCLASS=AUTO);
      741     3175        %GJ_LDTRC_MSG (FPTN=ALIBFD_ACK_MSG,STCLASS=AUTO,GEN_MODTIME=YES);
      742     3271
      743     3272        %VLP_ERRCODE (FPTN=ERR,STCLASS=AUTO);
      744     3318
      745     3319    1   DCL MSG_ VECTOR;
      746     3320    1   DCL DB_SEGSZ UBIN;
      747     3321    1   DCL SEG UBIN;
      748     3322    1   DCL HISEG UBIN;
      749     3323    1   DCL LOSEG UBIN;
      750     3324
      751     3325                                                /* External Data            */
      752     3326    1   DCL G$TSA_USR$ PTR SYMREF READONLY;
      753     3327    1   DCL G$JIT$ PTR SYMREF READONLY;
      754     3328    1   DCL G$LPAR1$ PTR SYMREF READONLY;
      755     3329    1   DCL G$LPAR2$ PTR SYMREF READONLY;
      756     3330    1   DCL G$BPAR1$ PTR SYMREF READONLY;
      757     3331    1   DCL G$MHJIT$ PTR SYMREF READONLY;
      758     3332    1   DCL G$ROS$ PTR SYMREF READONLY;
      759     3333    1   DCL G$ASDT_MCL$ PTR SYMREF READONLY;
      760     3334    1   DCL G$ASDT_USR$ PTR SYMREF READONLY;
      761     3335
      762     3336        %GATE (FPTN=GM_MEATLOCK,STCLASS=SYMREF);
      763     3355
      764     3356                                                /* Internal data            */
      765     3357    1   DCL GJU_DB_DB SBIN CONSTANT SYMDEF INIT(0); /*N*/
      766     3358        %VLP_ERRCODE (FPTN=EMMFAILED,ERR#=%E$MEMLIMIT,SEV=G_SEV_ERROR#,
      767     3359                            STCLASS=CONSTANT,FCG=GJ,MID=U,MON='1'B);
      768     3405        %VLP_ERRCODE (FPTN=ENOTFREE,ERR#=%E$NOTFREE,SEV=G_SEV_ERROR#,
      769     3406                            STCLASS=CONSTANT,FCG=GJ,MID=U,MON='1'B);
      770     3452
      771     3453        %VLP_ERRCODE (FPTN=EDEBUGXONLY,ERR#=%E$DEBUGXONLY,SEV=G_SEV_ERROR#,
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:103  
      772     3454                            STCLASS=CONSTANT,FCG=GJ,MID=U,MON='1'B);
      773     3500
      774     3501                                                /* BASED Structures         */
      775     3502        %G$ASDT_USR (FPTN=G$ASDT_USR,STCLASS="BASED(G$ASDT_USR$)");
      776     4196        %G$ASDT_MCL (FPTN=G$ASDT_MCL,STCLASS="BASED(G$ASDT_MCL$)");
      777     4890        %G$USER (FPTN=G$U);
      778     4901        %G$MHJIT (STCLASS="BASED(G$MHJIT$)");
      779    11775        %G$ROS (FULL=YES,STCLASS="BASED(G$ROS$)");
      780    12726        %G$JIT (STCLASS="BASED(G$JIT$)");
      781    13140        %G$TSA (STCLASS="BASED(G$TSA_USR$)");
      782    13528        %G$SFILE (FPTN=G$SFILE,STCLASS="BASED(SF_PARAMS.TYC.SFILE$)",ARRAYED=NO);
      783    13565        %GJ_FID (FPTN=G$FID,STCLASS=BASED);
      784    13593
      785    13594        %GD$FD_PROC;
      786    13610        %GD$FD_DS;
      787    13665                                                /* External Procedures      */
      788    13666    1   DCL KNA$READ ENTRY(4) ALTRET;
      789    13667    1   DCL KNA$WRITE ENTRY(4) ALTRET;
      790    13668    1   DCL GJS$OPEN_SHARED ENTRY(1) ALTRET;
      791    13669    1   DCL GJS$CLOSE_SHARED ENTRY(1) ALTRET;
      792    13670    1   DCL GJS$RUND_FD ENTRY(1);
      793    13671    1   DCL GJU$GET_PROC ENTRY(1) ALTRET;
      794    13672    1   DCL GMA$CHKSIZE ENTRY(1) ALTRET;
      795    13673    1   DCL GMA$GET ENTRY(5) ALTRET;
      796    13674    1   DCL GHH$ASD ENTRY(2);
      797    13675
      798    13676                                                /* String Substitutions     */
      799    13677        %GJ_FCN#;
      800    13703        %GJ_SHARE#;
      801    13709        %G$JIT_E;
      802    13771        %PLIST;
      803    13772
      804    13773        %EJECT;
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:104  
      805    13774        /*D* NAME: GJU$GET_DB
      806    13775
      807    13776             DESCRIPTION:
      808    13777             The GJU$GET_DB routine is called by GHQ$QEND if the FPRG is to
      809    13778             started under control of a debugger.  This routine is also called
      810    13779             by GHT$TRAP on a trace transfer trap and by GUD$MCL_EXIT and
      811    13780             GHB$TRAP1 if the ALIBFD bit is set in JIT.JUNK.
      812    13781        */
      813    13782
      814    13783        /*D* The ALIB bit in JIT.JUNK and G$U.ASYNCH is reset by this routine.
      815    13784        */
      816    13785    1      G$JIT.JUNK.ALIBFD = '0'B;
      817    13786    1      G$MHJIT.CU$->G$U.ASYNCH = (G$MHJIT.CU$->G$U.ASYNCH &~ %U_ALIBFD);
      818    13787
      819    13788
      820    13789        /*D* If the debugger is not already associated, the name message
      821    13790             is read from the UEP$PMME on the host.  Then GJS$OPEN_SHARED
      822    13791             is called to determine if the debugger is in the shared file
      823    13792             tables or if it should be read from the Host.
      824    13793        */
      825    13794    1      IF G$JIT.DB# = 0
      826    13795    2      THEN DO;
      827    13796    2           MSG_ = VECTOR(ALIB_MSG);
      828    13797    2           CALL KNA$READ(%G_M$DEBUG#,MSG_,ERR) ALTRET(CANT_ALIB);
      829    13798    2           IF ALIB_MSG.ERR ~='0'B
      830    13799    3           THEN DO;
      831    13800    3                ERR = ALIB_MSG.ERR;
      832    13801    3   CANT_ALIB:   ;
      833    13802    3                ALTRETURN;
      834    13803    3                END;
      835    13804
      836    13805    2           IF G$JIT.JUNK.EXONLY
      837    13806    3           THEN DO;
      838    13807    3                ERR = EDEBUGXONLY;
      839    13808    3   NAK_N_ALTRET: CALL SEND_NAK;
      840    13809    3                ALTRETURN;
      841    13810    3                END;
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:105  
      842    13811
      843    13812        /*E*    ERROR: GJU-E$DEBUGXONLY-E
      844    13813                MESSAGE: You are not allowed to debug an execute only FPRG.
      845    13814                DESCRIPTION:  Should only happen here on post association.
      846    13815        */
      847    13816    3           IF G$ASDT_USR.DB_PROC.V THEN DO;
      848    13817    3                ERR = ENOTFREE;
      849    13818    3                GOTO NAK_N_ALTRET;
      850    13819    3                END;
      851    13820        /*E*    ERROR: GJU-E$NOTFREE-E
      852    13821                MESSAGE: The debugger's procedure segment is in use.
      853    13822                MESSAGE1: It is not possible to post-associate a debugger
      854    13823                          with a program that uses the DP_PROC segment as data.
      855    13824        */
      856    13825    2           SF_PARAMS.FCN = %GJ_OPEN_PROC#;
      857    13826    2           SF_PARAMS.PTYPE = %RU_DB#;
      858    13827    2           SF_PARAMS.WAIT = 1;
      859    13828    2           SF_PARAMS.FID$ = ADDR(ALIB_FID);
      860    13829
      861    13830    2           ALIB_FID.NAME = ALIB_MSG.NAME;
      862    13831    2           ALIB_FID.ACCT = ':SYS    ';
      863    13832    2           ALIB_FID.PASS = '        ';
      864    13833    2           ALIB_FID.PSN = '      ';
      865    13834    2           ALIB_FID.MODTIME = 1;
      866    13835
      867    13836    2           CALL GJS$OPEN_SHARED(SF_PARAMS)
      868    13837    3           WHENALTRETURN DO;
      869    13838    3                ERR = SF_PARAMS.ERR /* wrong type */;
      870    13839    3                GOTO NAK_N_ALTRET;
      871    13840    3                END;
      872    13841    2           G$JIT.DB# = SF_PARAMS.PNUM;
      873    13842
      874    13843        /*D* If not already shared, a message is written to the host to
      875    13844             request the debugger size.  The ALIB data message is then
      876    13845             read and the library procedure size is moved to the parameters
      877    13846             for GJU$GET_PROC.  If already shared, GJS$GET_PROC will get the
      878    13847             size from the shared file table.
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:106  
      879    13848        */
      880    13849    2           IF SF_PARAMS.TYC.GET_PROC ~= 0
      881    13850    3           THEN DO;
      882    13851    3                FCN_MSG.FCN = %GJ_DB_DATA#;
      883    13852    3                MSG_ = VECTOR(FCN_MSG);
      884    13853    3                CALL KNA$WRITE(%G_M$DEBUG#,MSG_,ERR) ALTRET(CANT_GET_DB);
      885    13854
      886    13855    3                MSG_ = VECTOR(ALIB_DATA);
      887    13856    3                CALL KNA$READ(%G_M$DEBUG#,MSG_,ERR) ALTRET(CANT_GET_DB);
      888    13857
      889    13858    3                IF ALIB_DATA.ERR ~= '0'B
      890    13859    4                THEN DO;
      891    13860    4                     ERR = ALIB_MSG.ERR;
      892    13861    4   CANT_GET_DB:      ;
      893    13862    4                     CALL GJS$RUND_FD(DB_SEGSZ);
      894    13863    4                     GOTO NAK_N_ALTRET;
      895    13864    4                     END;
      896    13865    3                GP_PARAMS.PGSZ = (ALIB_DATA.PROC_SZ + 255) / 256;
      897    13866    3                END /* Do if not already in the shared file tables */;
      898    13867
      899    13868    3           ELSE DO;
      900    13869    3                GP_PARAMS.PGSZ = G$SFILE.PGSZ_PROC;
      901    13870    3                END;
      902    13871
      903    13872        /*D* The GJU$GET_PROC routine is then called to read the debugger
      904    13873             procedure from the host, if necessary, and to associate the
      905    13874             debugger procedure with this user.  If GJU$GET_PROC sucessfully
      906    13875             the debugger, that routine will send a "done" message to the
      907    13876             host.  If GJU$GET_PROC altreturns, a "nak" message is sent to
      908    13877             the host from here.
      909    13878        */
      910    13879    2           GP_PARAMS.SHARE = SF_PARAMS.TYC;
      911    13880    2           GP_PARAMS.VP# = %GM_DB_PROC_VP;
      912    13881    2           GP_PARAMS.RD_PARAMS$ = ADDR(RD_PARAMS);
      913    13882
      914    13883    2           RD_PARAMS.USR_LOC = GP_PARAMS.VP# *256;
      915    13884    2           RD_PARAMS.PROG_TYPE = %GJ_GETDB#;
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:107  
      916    13885    2           RD_PARAMS.TOT_SECTSZ = ALIB_DATA.PROC_SZ;
      917    13886    2           RD_PARAMS.DCB# = %G_M$DEBUG#;
      918    13887
      919    13888    2           CALL GJU$GET_PROC(GP_PARAMS)
      920    13889    3           WHENALTRETURN DO;
      921    13890    3                ERR = RD_PARAMS.ERR;
      922    13891    3                GOTO CANT_GET_DB;
      923    13892    3                END;
      924    13893
      925    13894        /*D* Since we are debugging the debugger, we unshare it.
      926    13895             This goes away later.   ????
      927    13896        */
      928    13897    2           IF GJU_DB_DB ~= 0
      929    13898    3           THEN DO;
      930    13899    3                GP_PARAMS.SHARE.GET_PROC = 0;
      931    13900    3                GP_PARAMS.SHARE.SHARE_PROC = %GJ_UNSHARE#;
      932    13901    3                G$ASDT_USR.DB_PROC = '0'B;
      933    13902    3                CALL GJU$GET_PROC(GP_PARAMS);
      934    13903
      935    13904    3                SEG = G$JIT.DB#;
      936    13905    3                CALL GJS$CLOSE_SHARED(SEG);
      937    13906    3                G$JIT.DB# = 0;
      938    13907    3                END;
      939    13908
      940    13909        /*D* The size of the debugger data segment is extracted from the
      941    13910             debugger procedure segment and the debugger data segment is
      942    13911             allocated.  The PTR in the first two words is set NIL.
      943    13912             The trap bits in words 2 and 3 are all set on.
      944    13913        */
      945    13914                %LOCK (G=GM_MEATLOCK);
      946    13921    2           G$ASDT_MCL.BPAR1 = G$ASDT_USR.DB_PROC;
      947    13922                %UNLOCK (G=GM_MEATLOCK);
      948    13929    2           CALL GHH$ASD(G$BPAR1$,G$ASDT_MCL.BPAR1);
      949    13930
      950    13931    2           DB_SEGSZ = (G$BPAR1$->GD$FD_PROC.DS_SZ
      951    13932    2             + G$BPAR1$->GD$FD_PROC.STK_SZ
      952    13933    2             +                            6/*for the stack header*/
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:108  
      953    13934    2             + 255/*round up*/)
      954    13935    2             / 256;
      955    13936
      956    13937    2           CHKSZ_PARAMS.SIZE = DB_SEGSZ;
      957    13938    2           CHKSZ_PARAMS.FLGS.CHK_ONLY='0'B;
      958    13939    2           CHKSZ_PARAMS.FLGS.REQ_ALL='1'B;
      959    13940    2           CHKSZ_PARAMS.FLGS.PARK='1'B;
      960    13941    2           CHKSZ_PARAMS.FLGS.NSHUF='0'B;
      961    13942    2           CHKSZ_PARAMS.FLGS.STEP='0'B;
      962    13943    2           CALL GMA$CHKSIZE(CHKSZ_PARAMS)
      963    13944    3           WHENALTRETURN DO;
      964    13945    3                ERR = CHKSZ_PARAMS.ERR;
      965    13946    3                GOTO CANT_GET_DB;
      966    13947    3                END;
      967    13948    2           CALL GMA$GET(%GM_DB_DS#,DB_SEGSZ,%G_R_CPDB#,%G_R_CPDB#,%G_RING0#)
      968    13949    3           WHENRETURN DO;
      969    13950    3                G$JIT.PCDDS = DB_SEGSZ;
      970    13951                     %LOCK (G=GM_MEATLOCK);
      971    13958    3                G$ASDT_MCL.LPAR1 = G$ASDT_USR.DB_DS;
      972    13959                     %UNLOCK (G=GM_MEATLOCK);
      973    13966    3                CALL GHH$ASD(G$LPAR1$,G$ASDT_MCL.LPAR1);
      974    13967
      975    13968    3                G$LPAR1$->GD$FD_DS.STK_PTR = ADDR(NIL);
      976    13969    3                G$LPAR1$->GD$FD_DS.TRAPS(0) = -1;
      977    13970    3                G$LPAR1$->GD$FD_DS.TRAPS(1) = -1;
      978    13971
      979    13972        /*D* Since this will be the first entry to the debugger, the
      980    13973             TRAP# field in the TSA is set to %G_FPRG_START#.
      981    13974        */
      982    13975    3                G$TSA.I.TRAP# = %G_FPRG_START#;
      983    13976
      984    13977        /*D* The index to the ASDT for the segments the debugger is to
      985    13978             be given write access are computed and stored in the JIT.
      986    13979        */
      987    13980    3                IF G$JIT.SPROC# = 0
      988    13981    4                THEN DO;
      989    13982    4                     LOSEG = (G$JIT.PLL / 256) -1;
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:109  
      990    13983    4                     HISEG = (G$JIT.PUL / 256) -1;
      991    13984
      992    13985    5                     DO SEG=LOSEG TO HISEG;
      993    13986    5                          G$JIT.DB_WRTSEGS(SEG) ='1'B;
      994    13987    5                          END;
      995    13988    4                     END;
      996    13989
      997    13990    3                END;
      998    13991
      999    13992    3           WHENALTRETURN DO;
     1000    13993    3                ERR = EMMFAILED;
     1001    13994    3                GOTO CANT_GET_DB;
     1002    13995    3                END;
     1003    13996
     1004    13997        /*D* Once the debugger is successfully associated the UDELTA bit
     1005    13998             is set in G$JIT.JUNK.
     1006    13999        */
     1007    14000    2           G$JIT.JUNK.UDELTA = '1'B;
     1008    14001
     1009    14002        /*D* An ACK message is sent back to the UEP$PMME routine on the host.
     1010    14003             The ACK message will contain the FPRG fid.
     1011    14004        */
     1012    14005    2           CALL SEND_ACK;
     1013    14006    2           END /* Do if JIT.DB# zero */;
     1014    14007
     1015    14008
     1016    14009        /*D* If this is not the initial entry to the debugger,
     1017    14010             the TRAP field is set to G_HOST_INT# or G_FPRG_START2.
     1018    14011        */
     1019    14012    2      ELSE DO;
     1020    14013    2           IF G$JIT.JUNK.RTNFID
     1021    14014    3           THEN DO;
     1022    14015    3                CALL SEND_ACK;
     1023    14016    3                G$JIT.JUNK.RTNFID = '0'B;
     1024    14017    3                RETURN;
     1025    14018    3                END;
     1026    14019
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:110  
     1027    14020    2           IF G$JIT.JUNK.DB_TIMER
     1028    14021    2           THEN G$TSA.I.TRAP# = %G_DB_TIMER#;
     1029    14022    2           ELSE IF G$JIT.PROG_ENTRY = %G_PE_LDTRC#
     1030    14023    2                THEN G$TSA.I.TRAP# = %G_FPRG_START2#;
     1031    14024    2                ELSE G$TSA.I.TRAP# = %G_HOST_INT#;
     1032    14025    2           END;
     1033    14026    1      RETURN;
     1034    14027
     1035    14028        %EJECT;
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:111  
     1036    14029
     1037    14030
     1038    14031
     1039    14032    1   SEND_ACK: PROC;
     1040    14033    2      ALIBFD_ACK_MSG.FCN = %GJ_ACK#;
     1041    14034    2      ALIBFD_ACK_MSG.ERR = '0'B;
     1042    14035    2      ALIBFD_ACK_MSG.NAME = G$ROS.M$LM.NAME;
     1043    14036    2      ALIBFD_ACK_MSG.ACCT = G$ROS.M$LM.ACCT;
     1044    14037    2      ALIBFD_ACK_MSG.PASS = G$ROS.M$LM.PASS;
     1045    14038    2      ALIBFD_ACK_MSG.PSN = G$ROS.M$LM.PSN;
     1046    14039    2      ALIBFD_ACK_MSG.MODTIME = G$ROS.M$LM.MODTIME;
     1047    14040
     1048    14041    2      MSG_ = VECTOR(ALIBFD_ACK_MSG);
     1049    14042    2      CALL KNA$WRITE(%G_M$DEBUG#,MSG_,ERR);
     1050    14043    2   END SEND_ACK;
     1051    14044
     1052    14045
     1053    14046
     1054    14047    1   SEND_NAK: PROC;
     1055    14048    2      FCN_MSG.FCN = %GJ_NAK#;
     1056    14049    2      FCN_MSG.ERR = ERR;
     1057    14050    2      MSG_ = VECTOR(FCN_MSG);
     1058    14051    2      CALL KNA$WRITE(%G_M$DEBUG#,MSG_,ERR)
     1059    14052    3      WHENALTRETURN DO;
     1060    14053
     1061    14054    3           END;
     1062    14055    2   END SEND_NAK;
     1063    14056
     1064    14057    1   END GJU$GET_DB;
     1065    14058        %EOD;

PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:112  
--  Include file information  --

   M_ERRORS_C.:E05TOU  is referenced.
   J_ERRORS_C.:E05TOU  is referenced.
   GM_VIRTUAL_E.:E05TOU  is referenced.
   GH_SCHD_E.:E05TOU  is referenced.
   GD$MACS_M.:E05TOU  is referenced.
   G_HJIT_M.:E05TOU  is referenced.
   G_JIT_M.:E05TOU  is referenced.
   G_SFILE_M.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   GM_MACRO_M.:E05TOU  is referenced.
   GJ_MACROS_M.:E05TOU  is referenced.
   GJ_MSG_M.:E05TOU  is referenced.
   GH_SCHD_M.:E05TOU  is referenced.
   GH_GATE_M.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GJU$GET_DB.

   Procedure GJU$GET_DB requires 872 words for executable code.
   Procedure GJU$GET_DB requires 152 words of local(AUTO) storage.

PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:113  

 Object Unit name= GJU$GET_DB                                 File name= GJU$UTIL.:E05TOU
 UTS= JUL 29 '97 22:07:00.84 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0  RoData even  UTS     15      F  GJU$GET_DB
    1   Proc  even  none   872    368  GJU$GET_DB
    2  RoData even  none     3      3  GJU$GET_DB

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        0  GJU$GET_DB

  ****  Data defs  ****

 Sect HexLoc  Name                           Sect HexLoc  Name
    0      0  GJU_DB_DB
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:114  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       4 KNA$READ
 yes     yes           Std       1 GJS$OPEN_SHARED
         yes           Std       1 GJS$RUND_FD
 yes     yes           Std       1 GJU$GET_PROC
 yes     yes           Std       1 GHH$UNLOCK
         yes           Std       2 GHH$ASD
 yes     yes           Std       5 GMA$GET
 yes     yes           Std       1 GHH$LOCK
 yes     yes           Std       1 GMA$CHKSIZE
 yes     yes           Std       4 KNA$WRITE
 yes     yes           Std       1 GJS$CLOSE_SHARED
                       nStd      0 X6A_AUTO_0
                       nStd      0 X6A_AALT
                       nStd      0 X6A_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    G$TSA_USR$                       r    G$JIT$                           r    G$LPAR1$
r    G$BPAR1$                         r    G$MHJIT$                         r    G$ROS$
r    G$ASDT_MCL$                      r    G$ASDT_USR$                           GM_MEATLOCK
r    G$ROS$
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:115  


      698        1        /*T***********************************************************/
      699        2        /*T*                                                         */
      700        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      701        4        /*T*                                                         */
      702        5        /*T***********************************************************/
      703        6        /*F* NAME: GJU$GET_DB
      704        7
      705        8             PURPOSE:  To associate a debugger with a run-unit.
      706        9
      707       10             CALL:    CALL GJU$GET_DB ALTRET(LABEL);
      708       11
      709       12        */
      710       13        GJU$GET_DB: PROC ALTRET;

     13   1 000000  D380 0000 0000  xent GJU$GET_DB      LNJ,B5   X6A_AUTO_0
          1 000003       0098 0000                       DC       152,0

      711       14
      712       15        %INCLUDE GH_GATE_M;
      713       56        %INCLUDE GH_SCHD_M;
      714      200        %INCLUDE GJ_MSG_M;
      715      513        %INCLUDE GJ_MACROS_M;
      716      986        %INCLUDE GM_MACRO_M;
      717     1468        %INCLUDE G_ROS_M;
      718     1550        %INCLUDE G_SFILE_M;
      719     1610        %INCLUDE G_JIT_M;
      720     1875        %INCLUDE G_HJIT_M;
      721     2020 S      %INCLUDE GF_LCP6_M;
      722     2021 S      %INCLUDE GH_LCP6_M;
      723     2022 S      %INCLUDE GU_LCP6_M;
      724     2023        %INCLUDE GD$MACS_M;
      725     2061
      726     2062 S      %INCLUDE G_LCP6_E;
      727     2063        %INCLUDE GH_SCHD_E;
      728     2159        %INCLUDE GM_VIRTUAL_E;
      729     2369        %INCLUDE J_ERRORS_C;
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:116  
      730     2456        %INCLUDE M_ERRORS_C;
      731     2520
      732     2521                                                /* AUTO                     */
      733     2522        %GJ_SFILE_PARAMS (FPTN=SF_PARAMS,STCLASS=AUTO);
      734     2662        %GJ_GETPROC_PARAMS (FPTN=GP_PARAMS,STCLASS=AUTO);
      735     2707        %GJ_READ_PARAMS (FPTN=RD_PARAMS,STCLASS=AUTO);
      736     2804        %GM_CHKSZ_PARAMS (FPTN=CHKSZ_PARAMS,STCLASS=AUTO);
      737     2898        %GJ_FID (FPTN=ALIB_FID,STCLASS=AUTO);
      738     2926        %GJ_ALIB_MSG (FPTN=ALIB_MSG,STCLASS=AUTO);
      739     3011        %GJ_ALIB_DATA (FPTN=ALIB_DATA,STCLASS=AUTO);
      740     3105        %GJ_FCN_MSG (FPTN=FCN_MSG,STCLASS=AUTO);
      741     3175        %GJ_LDTRC_MSG (FPTN=ALIBFD_ACK_MSG,STCLASS=AUTO,GEN_MODTIME=YES);
      742     3271
      743     3272        %VLP_ERRCODE (FPTN=ERR,STCLASS=AUTO);
      744     3318
      745     3319    1   DCL MSG_ VECTOR;
      746     3320    1   DCL DB_SEGSZ UBIN;
      747     3321    1   DCL SEG UBIN;
      748     3322    1   DCL HISEG UBIN;
      749     3323    1   DCL LOSEG UBIN;
      750     3324
      751     3325                                                /* External Data            */
      752     3326    1   DCL G$TSA_USR$ PTR SYMREF READONLY;
      753     3327    1   DCL G$JIT$ PTR SYMREF READONLY;
      754     3328    1   DCL G$LPAR1$ PTR SYMREF READONLY;
      755     3329    1   DCL G$LPAR2$ PTR SYMREF READONLY;
      756     3330    1   DCL G$BPAR1$ PTR SYMREF READONLY;
      757     3331    1   DCL G$MHJIT$ PTR SYMREF READONLY;
      758     3332    1   DCL G$ROS$ PTR SYMREF READONLY;
      759     3333    1   DCL G$ASDT_MCL$ PTR SYMREF READONLY;
      760     3334    1   DCL G$ASDT_USR$ PTR SYMREF READONLY;
      761     3335
      762     3336        %GATE (FPTN=GM_MEATLOCK,STCLASS=SYMREF);
      763     3355
      764     3356                                                /* Internal data            */
      765     3357    1   DCL GJU_DB_DB SBIN CONSTANT SYMDEF INIT(0); /*N*/
      766     3358        %VLP_ERRCODE (FPTN=EMMFAILED,ERR#=%E$MEMLIMIT,SEV=G_SEV_ERROR#,
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:117  
      767     3359                            STCLASS=CONSTANT,FCG=GJ,MID=U,MON='1'B);
      768     3405        %VLP_ERRCODE (FPTN=ENOTFREE,ERR#=%E$NOTFREE,SEV=G_SEV_ERROR#,
      769     3406                            STCLASS=CONSTANT,FCG=GJ,MID=U,MON='1'B);
      770     3452
      771     3453        %VLP_ERRCODE (FPTN=EDEBUGXONLY,ERR#=%E$DEBUGXONLY,SEV=G_SEV_ERROR#,
      772     3454                            STCLASS=CONSTANT,FCG=GJ,MID=U,MON='1'B);
      773     3500
      774     3501                                                /* BASED Structures         */
      775     3502        %G$ASDT_USR (FPTN=G$ASDT_USR,STCLASS="BASED(G$ASDT_USR$)");
      776     4196        %G$ASDT_MCL (FPTN=G$ASDT_MCL,STCLASS="BASED(G$ASDT_MCL$)");
      777     4890        %G$USER (FPTN=G$U);
      778     4901        %G$MHJIT (STCLASS="BASED(G$MHJIT$)");
      779    11775        %G$ROS (FULL=YES,STCLASS="BASED(G$ROS$)");
      780    12726        %G$JIT (STCLASS="BASED(G$JIT$)");
      781    13140        %G$TSA (STCLASS="BASED(G$TSA_USR$)");
      782    13528        %G$SFILE (FPTN=G$SFILE,STCLASS="BASED(SF_PARAMS.TYC.SFILE$)",ARRAYED=NO);
      783    13565        %GJ_FID (FPTN=G$FID,STCLASS=BASED);
      784    13593
      785    13594        %GD$FD_PROC;
      786    13610        %GD$FD_DS;
      787    13665                                                /* External Procedures      */
      788    13666    1   DCL KNA$READ ENTRY(4) ALTRET;
      789    13667    1   DCL KNA$WRITE ENTRY(4) ALTRET;
      790    13668    1   DCL GJS$OPEN_SHARED ENTRY(1) ALTRET;
      791    13669    1   DCL GJS$CLOSE_SHARED ENTRY(1) ALTRET;
      792    13670    1   DCL GJS$RUND_FD ENTRY(1);
      793    13671    1   DCL GJU$GET_PROC ENTRY(1) ALTRET;
      794    13672    1   DCL GMA$CHKSIZE ENTRY(1) ALTRET;
      795    13673    1   DCL GMA$GET ENTRY(5) ALTRET;
      796    13674    1   DCL GHH$ASD ENTRY(2);
      797    13675
      798    13676                                                /* String Substitutions     */
      799    13677        %GJ_FCN#;
      800    13703        %GJ_SHARE#;
      801    13709        %G$JIT_E;
      802    13771        %PLIST;
      803    13772
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:118  
      804    13773        %EJECT;
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:119  
      805    13774        /*D* NAME: GJU$GET_DB
      806    13775
      807    13776             DESCRIPTION:
      808    13777             The GJU$GET_DB routine is called by GHQ$QEND if the FPRG is to
      809    13778             started under control of a debugger.  This routine is also called
      810    13779             by GHT$TRAP on a trace transfer trap and by GUD$MCL_EXIT and
      811    13780             GHB$TRAP1 if the ALIBFD bit is set in JIT.JUNK.
      812    13781        */
      813    13782
      814    13783        /*D* The ALIB bit in JIT.JUNK and G$U.ASYNCH is reset by this routine.
      815    13784        */
      816    13785    1      G$JIT.JUNK.ALIBFD = '0'B;

  13785   1 000005  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 000008  8846 0098                            LBF,'0020'X       152,B6
          1 00000A       0020

      817    13786    1      G$MHJIT.CU$->G$U.ASYNCH = (G$MHJIT.CU$->G$U.ASYNCH &~ %U_ALIBFD);

  13786   1 00000B  DC80 0000 0000  xsym                 LDB,B5   G$MHJIT$
          1 00000E  CCC5 0352                            LDB,B4   850,B5
          1 000010  E844 0001                            LDR,R6   1,B4
          1 000012  E570 F7FF                            AND,R6   -2049,IMO
          1 000014  EF44 0001                            STR,R6   1,B4

      818    13787
      819    13788
      820    13789        /*D* If the debugger is not already associated, the name message
      821    13790             is read from the UEP$PMME on the host.  Then GJS$OPEN_SHARED
      822    13791             is called to determine if the debugger is in the shared file
      823    13792             tables or if it should be read from the Host.
      824    13793        */
      825    13794    1      IF G$JIT.DB# = 0

  13794   1 000016  E2C6 008D                            LLH,R6   141,B6
          1 000018  6981 0284                            BNEZ,R6  s:14013,PREL

PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:120  
      826    13795    2      THEN DO;

      827    13796    2           MSG_ = VECTOR(ALIB_MSG);

  13796   1 00001A  CBC7 0046                            LAB,B4   ALIB_MSG,AUTO
          1 00001C  CFC7 008F                            STB,B4   LOSEG+4,AUTO
          1 00001E  6C25                                 LDV,R6   37
          1 00001F  EF47 008E                            STR,R6   LOSEG+3,AUTO
          1 000021  ABC7 008E                            LAB,B2   LOSEG+3,AUTO
          1 000023  2C00                                 LDV,R2   0
          1 000024  6C06                                 LDV,R6   6
          1 000025  BBC7 0085                            LAB,B3   MSG_,AUTO
          1 000027  3C00                                 LDV,R3   0
          1 000028  0008                                 MMM

      828    13797    2           CALL KNA$READ(%G_M$DEBUG#,MSG_,ERR) ALTRET(CANT_ALIB);

  13797   1 000029  CBF0 0001                            LAB,B4   1,IMO
          1 00002B  BBC7 0083                            LAB,B3   ERR,AUTO
          1 00002D  BFC7 0092                            STB,B3   LOSEG+7,AUTO
          1 00002F  ABC7 0085                            LAB,B2   MSG_,AUTO
          1 000031  AFC7 0090                            STB,B2   LOSEG+5,AUTO
          1 000033  CFC7 008E                            STB,B4   LOSEG+3,AUTO
          1 000035  BBC7 008E                            LAB,B3   LOSEG+3,AUTO
          1 000037  CBF0 0300                            LAB,B4   768,IMO
          1 000039  E380 0000 0000  xent                 LNJ,B6   KNA$READ
          1 00003C       0010                            DC       s:13800,PREL

      829    13798    2           IF ALIB_MSG.ERR ~='0'B

  13798   1 00003D  EB80 0000 0000  02                   LAB,B6   0
          1 000040  5C01                                 LDV,R5   1
          1 000041  0022                                 ACM      ;
          1 000042       4407 0047                                ALPHANUM(ALIB_MSG+1,AUTO,,4,FILL),;
          1 000044       4006 0000                                ALPHANUM(0,B6,,R5,FILL)
          1 000046  5381 0008                            CBE      s:13805,PREL

PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:121  
      830    13799    3           THEN DO;

      831    13800    3                ERR = ALIB_MSG.ERR;

  13800   1 000048  8CC7 0047                            LDI      ALIB_MSG+1,AUTO
          1 00004A  8D47 0083                            SDI      ERR,AUTO

  13800   1                              CANT_ALIB       null
      832    13801    3   CANT_ALIB:   ;
      833    13802    3                ALTRETURN;

  13802   1 00004C  C380 0000 0000  xent CANT_ALIB       LNJ,B4   X6A_AALT

      834    13803    3                END;
      835    13804
      836    13805    2           IF G$JIT.JUNK.EXONLY

  13805   1 00004F  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 000052  82C6 0098                            LB,'0008'X        152,B6
          1 000054       0008
          1 000055  0581 000C                            BBF      s:13816,PREL

      837    13806    3           THEN DO;

      838    13807    3                ERR = EDEBUGXONLY;

  13807   1 000057  8C80 0000 0005  00                   LDI      EDEBUGXONLY
          1 00005A  8D47 0083                            SDI      ERR,AUTO

      839    13808    3   NAK_N_ALTRET: CALL SEND_NAK;

  13808   1 00005C  E3C0 02D9            NAK_N_ALTRET    LNJ,B6   s:0,PREL
          1 00005E       0001                            DC       s:13809,PREL

      840    13809    3                ALTRETURN;

  13809   1 00005F  C380 0000 0000  xent                 LNJ,B4   X6A_AALT
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:122  

      841    13810    3                END;
      842    13811
      843    13812        /*E*    ERROR: GJU-E$DEBUGXONLY-E
      844    13813                MESSAGE: You are not allowed to debug an execute only FPRG.
      845    13814                DESCRIPTION:  Should only happen here on post association.
      846    13815        */
      847    13816    3           IF G$ASDT_USR.DB_PROC.V THEN DO;

  13816   1 000062  DC80 0000 0000  xsym                 LDB,B5   G$ASDT_USR$
          1 000065  89C5 002E                            CMZ      46,B5
          1 000067  0881 0007                            BAGE     s:13825,PREL

      848    13817    3                ERR = ENOTFREE;

  13817   1 000069  8C80 0000 0003  00                   LDI      ENOTFREE
          1 00006C  8D47 0083                            SDI      ERR,AUTO

      849    13818    3                GOTO NAK_N_ALTRET;

  13818   1 00006E  0FEE                                 B        s:13808,SPREL

      850    13819    3                END;
      851    13820        /*E*    ERROR: GJU-E$NOTFREE-E
      852    13821                MESSAGE: The debugger's procedure segment is in use.
      853    13822                MESSAGE1: It is not possible to post-associate a debugger
      854    13823                          with a program that uses the DP_PROC segment as data.
      855    13824        */
      856    13825    2           SF_PARAMS.FCN = %GJ_OPEN_PROC#;

  13825   1 00006F  D7C7 0006                            STH,R5   SF_PARAMS+2,AUTO

      857    13826    2           SF_PARAMS.PTYPE = %RU_DB#;

  13826   1 000071  E870 0800                            LDR,R6   2048,IMO
          1 000073  EF47 0007                            STR,R6   SF_PARAMS+3,AUTO

PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:123  
      858    13827    2           SF_PARAMS.WAIT = 1;

  13827   1 000075  DF47 000A                            STR,R5   SF_PARAMS+6,AUTO

      859    13828    2           SF_PARAMS.FID$ = ADDR(ALIB_FID);

  13828   1 000077  CBC7 0029                            LAB,B4   ALIB_FID,AUTO
          1 000079  CFC7 0004                            STB,B4   SF_PARAMS,AUTO

      860    13829
      861    13830    2           ALIB_FID.NAME = ALIB_MSG.NAME;

  13830   1 00007B  ABC7 0049                            LAB,B2   ALIB_MSG+3,AUTO
          1 00007D  2C00                                 LDV,R2   0
          1 00007E  6C20                                 LDV,R6   32
          1 00007F  BB87                                 LAB,B3   ,AUTO
          1 000080  3C52                                 LDV,R3   82
          1 000081  0008                                 MMM

      862    13831    2           ALIB_FID.ACCT = ':SYS    ';

  13831   1 000082  AB80 0000 0000  00                   LAB,B2   GJU_DB_DB
          1 000085  2C0E                                 LDV,R2   14
          1 000086  6C08                                 LDV,R6   8
          1 000087  BB87                                 LAB,B3   ,AUTO
          1 000088  3C72                                 LDV,R3   114
          1 000089  0008                                 MMM

      863    13832    2           ALIB_FID.PASS = '        ';

  13832   1 00008A  AB80 0000 0000  00                   LAB,B2   GJU_DB_DB
          1 00008D  2C16                                 LDV,R2   22
          1 00008E  6C08                                 LDV,R6   8
          1 00008F  BB87                                 LAB,B3   ,AUTO
          1 000090  3C7A                                 LDV,R3   122
          1 000091  0008                                 MMM

PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:124  
      864    13833    2           ALIB_FID.PSN = '      ';

  13833   1 000092  AB80 0000 0000  00                   LAB,B2   GJU_DB_DB
          1 000095  2C12                                 LDV,R2   18
          1 000096  6C06                                 LDV,R6   6
          1 000097  BBC7 0041                            LAB,B3   ALIB_FID+24,AUTO
          1 000099  3C00                                 LDV,R3   0
          1 00009A  0008                                 MMM

      865    13834    2           ALIB_FID.MODTIME = 1;

  13834   1 00009B  8CF0 0000 0001                       LDI      1,IMO
          1 00009E  8D47 0044                            SDI      ALIB_FID+27,AUTO

      866    13835
      867    13836    2           CALL GJS$OPEN_SHARED(SF_PARAMS)

  13836   1 0000A0  CBC7 0004                            LAB,B4   SF_PARAMS,AUTO
          1 0000A2  CFC7 008E                            STB,B4   LOSEG+3,AUTO
          1 0000A4  BBC7 008E                            LAB,B3   LOSEG+3,AUTO
          1 0000A6  CBF0 0100                            LAB,B4   256,IMO
          1 0000A8  E380 0000 0000  xent                 LNJ,B6   GJS$OPEN_SHARED
          1 0000AB       0003                            DC       s:13838,PREL
          1 0000AC  0F81 0007                            B        s:13841,PREL

      868    13837    3           WHENALTRETURN DO;

      869    13838    3                ERR = SF_PARAMS.ERR /* wrong type */;

  13838   1 0000AE  8CC7 0008                            LDI      SF_PARAMS+4,AUTO
          1 0000B0  8D47 0083                            SDI      ERR,AUTO

      870    13839    3                GOTO NAK_N_ALTRET;

  13839   1 0000B2  0F81 FFA9                            B        s:13808,PREL

      871    13840    3                END;
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:125  
      872    13841    2           G$JIT.DB# = SF_PARAMS.PNUM;

  13841   1 0000B4  E847 0006                            LDR,R6   SF_PARAMS+2,AUTO
          1 0000B6  E570 00FF                            AND,R6   255,IMO
          1 0000B8  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 0000BB  E7C6 008D                            STH,R6   141,B6

      873    13842
      874    13843        /*D* If not already shared, a message is written to the host to
      875    13844             request the debugger size.  The ALIB data message is then
      876    13845             read and the library procedure size is moved to the parameters
      877    13846             for GJU$GET_PROC.  If already shared, GJS$GET_PROC will get the
      878    13847             size from the shared file table.
      879    13848        */
      880    13849    2           IF SF_PARAMS.TYC.GET_PROC ~= 0

  13849   1 0000BD  D847 000D                            LDR,R5   SF_PARAMS+9,AUTO
          1 0000BF  5901 0072                            BEZ,R5   s:13869,PREL

      881    13850    3           THEN DO;

      882    13851    3                FCN_MSG.FCN = %GJ_DB_DATA#;

  13851   1 0000C1  4C0C                                 LDV,R4   12
          1 0000C2  C7C7 0060                            STH,R4   FCN_MSG,AUTO

      883    13852    3                MSG_ = VECTOR(FCN_MSG);

  13852   1 0000C4  DBC7 0060                            LAB,B5   FCN_MSG,AUTO
          1 0000C6  DFC7 008F                            STB,B5   LOSEG+4,AUTO
          1 0000C8  3C05                                 LDV,R3   5
          1 0000C9  BF47 008E                            STR,R3   LOSEG+3,AUTO
          1 0000CB  ABC7 008E                            LAB,B2   LOSEG+3,AUTO
          1 0000CD  2C00                                 LDV,R2   0
          1 0000CE  6C06                                 LDV,R6   6
          1 0000CF  BBC7 0085                            LAB,B3   MSG_,AUTO
          1 0000D1  3C00                                 LDV,R3   0
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:126  
          1 0000D2  0008                                 MMM

      884    13853    3                CALL KNA$WRITE(%G_M$DEBUG#,MSG_,ERR) ALTRET(CANT_GET_DB);

  13853   1 0000D3  DBF0 0001                            LAB,B5   1,IMO
          1 0000D5  CBC7 0083                            LAB,B4   ERR,AUTO
          1 0000D7  CFC7 0092                            STB,B4   LOSEG+7,AUTO
          1 0000D9  BBC7 0085                            LAB,B3   MSG_,AUTO
          1 0000DB  BFC7 0090                            STB,B3   LOSEG+5,AUTO
          1 0000DD  DFC7 008E                            STB,B5   LOSEG+3,AUTO
          1 0000DF  BBC7 008E                            LAB,B3   LOSEG+3,AUTO
          1 0000E1  CBF0 0300                            LAB,B4   768,IMO
          1 0000E3  E380 0000 0000  xent                 LNJ,B6   KNA$WRITE
          1 0000E6       0033                            DC       s:13860,PREL

      885    13854
      886    13855    3                MSG_ = VECTOR(ALIB_DATA);

  13855   1 0000E7  EBC7 0059                            LAB,B6   ALIB_DATA,AUTO
          1 0000E9  EFC7 008F                            STB,B6   LOSEG+4,AUTO
          1 0000EB  6C0D                                 LDV,R6   13
          1 0000EC  EF47 008E                            STR,R6   LOSEG+3,AUTO
          1 0000EE  ABC7 008E                            LAB,B2   LOSEG+3,AUTO
          1 0000F0  2C00                                 LDV,R2   0
          1 0000F1  6C06                                 LDV,R6   6
          1 0000F2  BBC7 0085                            LAB,B3   MSG_,AUTO
          1 0000F4  3C00                                 LDV,R3   0
          1 0000F5  0008                                 MMM

      887    13856    3                CALL KNA$READ(%G_M$DEBUG#,MSG_,ERR) ALTRET(CANT_GET_DB);

  13856   1 0000F6  EBF0 0001                            LAB,B6   1,IMO
          1 0000F8  DBC7 0083                            LAB,B5   ERR,AUTO
          1 0000FA  DFC7 0092                            STB,B5   LOSEG+7,AUTO
          1 0000FC  CBC7 0085                            LAB,B4   MSG_,AUTO
          1 0000FE  CFC7 0090                            STB,B4   LOSEG+5,AUTO
          1 000100  EFC7 008E                            STB,B6   LOSEG+3,AUTO
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:127  
          1 000102  BBC7 008E                            LAB,B3   LOSEG+3,AUTO
          1 000104  CBF0 0300                            LAB,B4   768,IMO
          1 000106  E380 0000 0000  xent                 LNJ,B6   KNA$READ
          1 000109       0010                            DC       s:13860,PREL

      888    13857
      889    13858    3                IF ALIB_DATA.ERR ~= '0'B

  13858   1 00010A  EB80 0000 0000  02                   LAB,B6   0
          1 00010D  5C01                                 LDV,R5   1
          1 00010E  0022                                 ACM      ;
          1 00010F       4407 005A                                ALPHANUM(ALIB_DATA+1,AUTO,,4,FILL),;
          1 000111       4006 0000                                ALPHANUM(0,B6,,R5,FILL)
          1 000113  5381 0013                            CBE      s:13865,PREL

      890    13859    4                THEN DO;

      891    13860    4                     ERR = ALIB_MSG.ERR;

  13860   1 000115  8CC7 0047                            LDI      ALIB_MSG+1,AUTO
          1 000117  8D47 0083                            SDI      ERR,AUTO

  13860   1                              CANT_GET_DB     null
      892    13861    4   CANT_GET_DB:      ;
      893    13862    4                     CALL GJS$RUND_FD(DB_SEGSZ);

  13862   1 000119  EBC7 0088            CANT_GET_DB     LAB,B6   DB_SEGSZ,AUTO
          1 00011B  EFC7 008E                            STB,B6   LOSEG+3,AUTO
          1 00011D  BBC7 008E                            LAB,B3   LOSEG+3,AUTO
          1 00011F  CBF0 0100                            LAB,B4   256,IMO
          1 000121  E380 0000 0000  xent                 LNJ,B6   GJS$RUND_FD
          1 000124       0001                            DC       s:13863,PREL

      894    13863    4                     GOTO NAK_N_ALTRET;

  13863   1 000125  0F81 FF36                            B        s:13808,PREL

PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:128  
      895    13864    4                     END;
      896    13865    3                GP_PARAMS.PGSZ = (ALIB_DATA.PROC_SZ + 255) / 256;

  13865   1 000127  8CC7 005C                            LDI      ALIB_DATA+3,AUTO
          1 000129  8470 0000 00FF                       AID      255,IMO
          1 00012C  70C8                                 DOR,R7   8
          1 00012D  E857                                 LDR,R6   R7
          1 00012E  EF47 0016                            STR,R6   GP_PARAMS+7,AUTO

      897    13866    3                END /* Do if not already in the shared file tables */;

  13866   1 000130  0F81 0007                            B        s:13879,PREL

      898    13867
      899    13868    3           ELSE DO;

      900    13869    3                GP_PARAMS.PGSZ = G$SFILE.PGSZ_PROC;

  13869   1 000132  DCC7 000B                            LDB,B5   SF_PARAMS+7,AUTO
          1 000134  C845 0027                            LDR,R4   39,B5
          1 000136  CF47 0016                            STR,R4   GP_PARAMS+7,AUTO

      901    13870    3                END;

      902    13871
      903    13872        /*D* The GJU$GET_PROC routine is then called to read the debugger
      904    13873             procedure from the host, if necessary, and to associate the
      905    13874             debugger procedure with this user.  If GJU$GET_PROC sucessfully
      906    13875             the debugger, that routine will send a "done" message to the
      907    13876             host.  If GJU$GET_PROC altreturns, a "nak" message is sent to
      908    13877             the host from here.
      909    13878        */
      910    13879    2           GP_PARAMS.SHARE = SF_PARAMS.TYC;

  13879   1 000138  AB87                                 LAB,B2   ,AUTO
          1 000139  2C16                                 LDV,R2   22
          1 00013A  6C08                                 LDV,R6   8
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:129  
          1 00013B  BB87                                 LAB,B3   ,AUTO
          1 00013C  3C22                                 LDV,R3   34
          1 00013D  0008                                 MMM

      911    13880    2           GP_PARAMS.VP# = %GM_DB_PROC_VP;

  13880   1 00013E  E870 0800                            LDR,R6   2048,IMO
          1 000140  EF47 0015                            STR,R6   GP_PARAMS+6,AUTO

      912    13881    2           GP_PARAMS.RD_PARAMS$ = ADDR(RD_PARAMS);

  13881   1 000142  EBC7 0017                            LAB,B6   RD_PARAMS,AUTO
          1 000144  EFC7 000F                            STB,B6   GP_PARAMS,AUTO

      913    13882
      914    13883    2           RD_PARAMS.USR_LOC = GP_PARAMS.VP# *256;

  13883   1 000146  F856                                 LDR,R7   R6
          1 000147  6C00                                 LDV,R6   0
          1 000148  7088                                 DOL,R7   8
          1 000149  8D47 001E                            SDI      RD_PARAMS+7,AUTO

      915    13884    2           RD_PARAMS.PROG_TYPE = %GJ_GETDB#;

  13884   1 00014B  5C03                                 LDV,R5   3
          1 00014C  DF47 0017                            STR,R5   RD_PARAMS,AUTO

      916    13885    2           RD_PARAMS.TOT_SECTSZ = ALIB_DATA.PROC_SZ;

  13885   1 00014E  8CC7 005C                            LDI      ALIB_DATA+3,AUTO
          1 000150  8D47 001C                            SDI      RD_PARAMS+5,AUTO

      917    13886    2           RD_PARAMS.DCB# = %G_M$DEBUG#;

  13886   1 000152  4C01                                 LDV,R4   1
          1 000153  CF47 0022                            STR,R4   RD_PARAMS+11,AUTO

PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:130  
      918    13887
      919    13888    2           CALL GJU$GET_PROC(GP_PARAMS)

  13888   1 000155  DBC7 000F                            LAB,B5   GP_PARAMS,AUTO
          1 000157  DFC7 008E                            STB,B5   LOSEG+3,AUTO
          1 000159  BBC7 008E                            LAB,B3   LOSEG+3,AUTO
          1 00015B  CBF0 0100                            LAB,B4   256,IMO
          1 00015D  E380 0000 0000  xent                 LNJ,B6   GJU$GET_PROC
          1 000160       0003                            DC       s:13890,PREL
          1 000161  0F81 0007                            B        s:13897,PREL

      920    13889    3           WHENALTRETURN DO;

      921    13890    3                ERR = RD_PARAMS.ERR;

  13890   1 000163  8CC7 0023                            LDI      RD_PARAMS+12,AUTO
          1 000165  8D47 0083                            SDI      ERR,AUTO

      922    13891    3                GOTO CANT_GET_DB;

  13891   1 000167  0F81 FFB1                            B        s:13860,PREL

      923    13892    3                END;
      924    13893
      925    13894        /*D* Since we are debugging the debugger, we unshare it.
      926    13895             This goes away later.   ????
      927    13896        */
      928    13897    2           IF GJU_DB_DB ~= 0

  13897   1 000169  E800 0000 0000  00                   LDR,R6   GJU_DB_DB
          1 00016C  6901 0031                            BEZ,R6   s:13919,PREL

      929    13898    3           THEN DO;

      930    13899    3                GP_PARAMS.SHARE.GET_PROC = 0;

  13899   1 00016E  8747 0013                            CL       GP_PARAMS+4,AUTO
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:131  

      931    13900    3                GP_PARAMS.SHARE.SHARE_PROC = %GJ_UNSHARE#;

  13900   1 000170  8947 0014                            LBT,'FFFF'X       GP_PARAMS+5,AUTO
  13900   1 000172       FFFF

      932    13901    3                G$ASDT_USR.DB_PROC = '0'B;

  13901   1 000173  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_USR$
          1 000176  8746 002E                            CL       46,B6
          1 000178  8746 002F                            CL       47,B6

      933    13902    3                CALL GJU$GET_PROC(GP_PARAMS);

  13902   1 00017A  DBC7 000F                            LAB,B5   GP_PARAMS,AUTO
          1 00017C  DFC7 008E                            STB,B5   LOSEG+3,AUTO
          1 00017E  BBC7 008E                            LAB,B3   LOSEG+3,AUTO
          1 000180  CBF0 0100                            LAB,B4   256,IMO
          1 000182  E380 0000 0000  xent                 LNJ,B6   GJU$GET_PROC
          1 000185       0001                            DC       s:13904,PREL

      934    13903
      935    13904    3                SEG = G$JIT.DB#;

  13904   1 000186  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 000189  E2C6 008D                            LLH,R6   141,B6
          1 00018B  EF47 0089                            STR,R6   SEG,AUTO

      936    13905    3                CALL GJS$CLOSE_SHARED(SEG);

  13905   1 00018D  DBC7 0089                            LAB,B5   SEG,AUTO
          1 00018F  DFC7 008E                            STB,B5   LOSEG+3,AUTO
          1 000191  BBC7 008E                            LAB,B3   LOSEG+3,AUTO
          1 000193  CBF0 0100                            LAB,B4   256,IMO
          1 000195  E380 0000 0000  xent                 LNJ,B6   GJS$CLOSE_SHARED
          1 000198       0001                            DC       s:13906,PREL

PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:132  
      937    13906    3                G$JIT.DB# = 0;

  13906   1 000199  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 00019C  87C6 008D                            CLH      141,B6

      938    13907    3                END;

      939    13908
      940    13909        /*D* The size of the debugger data segment is extracted from the
      941    13910             debugger procedure segment and the debugger data segment is
      942    13911             allocated.  The PTR in the first two words is set NIL.
      943    13912             The trap bits in words 2 and 3 are all set on.
      944    13913        */
      945    13914                %LOCK (G=GM_MEATLOCK);

  13919   1 00019E  BB80 0000 0001  02                   LAB,B3   +1
          1 0001A1  CBF0 0100                            LAB,B4   256,IMO
          1 0001A3  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          1 0001A6       0001                            DC       s:13921,PREL

      946    13921    2           G$ASDT_MCL.BPAR1 = G$ASDT_USR.DB_PROC;

  13921   1 0001A7  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_USR$
          1 0001AA  8CC6 002E                            LDI      46,B6
          1 0001AC  DC80 0000 0000  xsym                 LDB,B5   G$ASDT_MCL$
          1 0001AF  8D45 002A                            SDI      42,B5

      947    13922                %UNLOCK (G=GM_MEATLOCK);

  13927   1 0001B1  BB80 0000 0001  02                   LAB,B3   +1
          1 0001B4  CBF0 0100                            LAB,B4   256,IMO
          1 0001B6  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          1 0001B9       0001                            DC       s:13929,PREL

      948    13929    2           CALL GHH$ASD(G$BPAR1$,G$ASDT_MCL.BPAR1);

  13929   1 0001BA  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_MCL$
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:133  
          1 0001BD  DBC6 002A                            LAB,B5   42,B6
          1 0001BF  DFC7 0090                            STB,B5   LOSEG+5,AUTO
          1 0001C1  CB80 0000 0000  xsym                 LAB,B4   G$BPAR1$
          1 0001C4  CFC7 008E                            STB,B4   LOSEG+3,AUTO
          1 0001C6  BBC7 008E                            LAB,B3   LOSEG+3,AUTO
          1 0001C8  CBF0 0200                            LAB,B4   512,IMO
          1 0001CA  E380 0000 0000  xent                 LNJ,B6   GHH$ASD
          1 0001CD       0001                            DC       s:13931,PREL

      949    13930
      950    13931    2           DB_SEGSZ = (G$BPAR1$->GD$FD_PROC.DS_SZ

  13931   1 0001CE  EC80 0000 0000  xsym                 LDB,B6   G$BPAR1$
          1 0001D1  E846 0004                            LDR,R6   4,B6
          1 0001D3  EA46 0005                            ADD,R6   5,B6
          1 0001D5  EA70 0105                            ADD,R6   261,IMO
          1 0001D7  6048                                 SOR,R6   8
          1 0001D8  EF47 0088                            STR,R6   DB_SEGSZ,AUTO

      951    13932    2             + G$BPAR1$->GD$FD_PROC.STK_SZ
      952    13933    2             +                            6/*for the stack header*/
      953    13934    2             + 255/*round up*/)
      954    13935    2             / 256;
      955    13936
      956    13937    2           CHKSZ_PARAMS.SIZE = DB_SEGSZ;

  13937   1 0001DA  EF47 0025                            STR,R6   CHKSZ_PARAMS,AUTO

      957    13938    2           CHKSZ_PARAMS.FLGS.CHK_ONLY='0'B;

  13938   1 0001DC  8847 0028                            LBF,'8000'X       CHKSZ_PARAMS+3,AUTO
  13938   1 0001DE       8000

      958    13939    2           CHKSZ_PARAMS.FLGS.REQ_ALL='1'B;

  13939   1 0001DF  8947 0028                            LBT,'4000'X       CHKSZ_PARAMS+3,AUTO
  13939   1 0001E1       4000
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:134  

      959    13940    2           CHKSZ_PARAMS.FLGS.PARK='1'B;

  13940   1 0001E2  8947 0028                            LBT,'2000'X       CHKSZ_PARAMS+3,AUTO
  13940   1 0001E4       2000

      960    13941    2           CHKSZ_PARAMS.FLGS.NSHUF='0'B;

  13941   1 0001E5  8847 0028                            LBF,'1000'X       CHKSZ_PARAMS+3,AUTO
  13941   1 0001E7       1000

      961    13942    2           CHKSZ_PARAMS.FLGS.STEP='0'B;

  13942   1 0001E8  8847 0028                            LBF,'0800'X       CHKSZ_PARAMS+3,AUTO
  13942   1 0001EA       0800

      962    13943    2           CALL GMA$CHKSIZE(CHKSZ_PARAMS)

  13943   1 0001EB  DBC7 0025                            LAB,B5   CHKSZ_PARAMS,AUTO
          1 0001ED  DFC7 008E                            STB,B5   LOSEG+3,AUTO
          1 0001EF  BBC7 008E                            LAB,B3   LOSEG+3,AUTO
          1 0001F1  CBF0 0100                            LAB,B4   256,IMO
          1 0001F3  E380 0000 0000  xent                 LNJ,B6   GMA$CHKSIZE
          1 0001F6       0003                            DC       s:13945,PREL
          1 0001F7  0F81 0007                            B        s:13948,PREL

      963    13944    3           WHENALTRETURN DO;

      964    13945    3                ERR = CHKSZ_PARAMS.ERR;

  13945   1 0001F9  8CC7 0026                            LDI      CHKSZ_PARAMS+1,AUTO
          1 0001FB  8D47 0083                            SDI      ERR,AUTO

      965    13946    3                GOTO CANT_GET_DB;

  13946   1 0001FD  0F81 FF1B                            B        s:13860,PREL

PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:135  
      966    13947    3                END;
      967    13948    2           CALL GMA$GET(%GM_DB_DS#,DB_SEGSZ,%G_R_CPDB#,%G_R_CPDB#,%G_RING0#)

  13948   1 0001FF  EBF0 0002                            LAB,B6   2,IMO
          1 000201  DBF0 4000                            LAB,B5   16384,IMO
          1 000203  CBF0 4000                            LAB,B4   16384,IMO
          1 000205  BBF0 C000                            LAB,B3   -16384,IMO
          1 000207  BFC7 0096                            STB,B3   LOSEG+11,AUTO
          1 000209  CFC7 0094                            STB,B4   LOSEG+9,AUTO
          1 00020B  DFC7 0092                            STB,B5   LOSEG+7,AUTO
          1 00020D  ABC7 0088                            LAB,B2   DB_SEGSZ,AUTO
          1 00020F  AFC7 0090                            STB,B2   LOSEG+5,AUTO
          1 000211  EFC7 008E                            STB,B6   LOSEG+3,AUTO
          1 000213  BBC7 008E                            LAB,B3   LOSEG+3,AUTO
          1 000215  CBF0 0500                            LAB,B4   1280,IMO
          1 000217  E380 0000 0000  xent                 LNJ,B6   GMA$GET
          1 00021A       0074                            DC       s:13993,PREL

      968    13949    3           WHENRETURN DO;

      969    13950    3                G$JIT.PCDDS = DB_SEGSZ;

  13950   1 00021B  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 00021E  E847 0088                            LDR,R6   DB_SEGSZ,AUTO
          1 000220  EF46 0084                            STR,R6   132,B6

      970    13951                     %LOCK (G=GM_MEATLOCK);

  13956   1 000222  BB80 0000 0001  02                   LAB,B3   +1
          1 000225  CBF0 0100                            LAB,B4   256,IMO
          1 000227  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          1 00022A       0001                            DC       s:13958,PREL

      971    13958    3                G$ASDT_MCL.LPAR1 = G$ASDT_USR.DB_DS;

  13958   1 00022B  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_USR$
          1 00022E  8CC6 0004                            LDI      4,B6
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:136  
          1 000230  DC80 0000 0000  xsym                 LDB,B5   G$ASDT_MCL$
          1 000233  8D45 0014                            SDI      20,B5

      972    13959                     %UNLOCK (G=GM_MEATLOCK);

  13964   1 000235  BB80 0000 0001  02                   LAB,B3   +1
          1 000238  CBF0 0100                            LAB,B4   256,IMO
          1 00023A  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          1 00023D       0001                            DC       s:13966,PREL

      973    13966    3                CALL GHH$ASD(G$LPAR1$,G$ASDT_MCL.LPAR1);

  13966   1 00023E  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_MCL$
          1 000241  DBC6 0014                            LAB,B5   20,B6
          1 000243  DFC7 0090                            STB,B5   LOSEG+5,AUTO
          1 000245  CB80 0000 0000  xsym                 LAB,B4   G$LPAR1$
          1 000248  CFC7 008E                            STB,B4   LOSEG+3,AUTO
          1 00024A  BBC7 008E                            LAB,B3   LOSEG+3,AUTO
          1 00024C  CBF0 0200                            LAB,B4   512,IMO
          1 00024E  E380 0000 0000  xent                 LNJ,B6   GHH$ASD
          1 000251       0001                            DC       s:13968,PREL

      974    13967
      975    13968    3                G$LPAR1$->GD$FD_DS.STK_PTR = ADDR(NIL);

  13968   1 000252  EB80 0000 0000                       LAB,B6   0
          1 000255  DC80 0000 0000  xsym                 LDB,B5   G$LPAR1$
          1 000258  EF85                                 STB,B6   ,B5

      976    13969    3                G$LPAR1$->GD$FD_DS.TRAPS(0) = -1;

  13969   1 000259  8CF0 FFFF FFFF                       LDI      -1,IMO
          1 00025C  8D45 0002                            SDI      2,B5

      977    13970    3                G$LPAR1$->GD$FD_DS.TRAPS(1) = -1;

  13970   1 00025E  8D45 0004                            SDI      4,B5
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:137  

      978    13971
      979    13972        /*D* Since this will be the first entry to the debugger, the
      980    13973             TRAP# field in the TSA is set to %G_FPRG_START#.
      981    13974        */
      982    13975    3                G$TSA.I.TRAP# = %G_FPRG_START#;

  13975   1 000260  5C3D                                 LDV,R5   61
          1 000261  CC80 0000 0000  xsym                 LDB,B4   G$TSA_USR$
          1 000264  D7C4 0002                            STH,R5   2,B4

      983    13976
      984    13977        /*D* The index to the ASDT for the segments the debugger is to
      985    13978             be given write access are computed and stored in the JIT.
      986    13979        */
      987    13980    3                IF G$JIT.SPROC# = 0

  13980   1 000266  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 000269  C2C6 008C                            LLH,R4   140,B6
          1 00026B  4981 0020                            BNEZ,R4  s:13990,PREL

      988    13981    4                THEN DO;

      989    13982    4                     LOSEG = (G$JIT.PLL / 256) -1;

  13982   1 00026D  B846 007B                            LDR,R3   123,B6
          1 00026F  3048                                 SOR,R3   8
          1 000270  3EFF                                 ADV,R3   -1
          1 000271  BF47 008B                            STR,R3   LOSEG,AUTO

      990    13983    4                     HISEG = (G$JIT.PUL / 256) -1;

  13983   1 000273  A846 007C                            LDR,R2   124,B6
          1 000275  2048                                 SOR,R2   8
          1 000276  2EFF                                 ADV,R2   -1
          1 000277  AF47 008A                            STR,R2   HISEG,AUTO

PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:138  
      991    13984
      992    13985    5                     DO SEG=LOSEG TO HISEG;

  13985   1 000279  BF47 0089                            STR,R3   SEG,AUTO
          1 00027B  0F81 000B                            B        s:13987+2,PREL

      993    13986    5                          G$JIT.DB_WRTSEGS(SEG) ='1'B;

  13986   1 00027D  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 000280  DBC6 007F                            LAB,B5   127,B6
          1 000282  B847 0089                            LDR,R3   SEG,AUTO
          1 000284  8935                                 LBT      ,B5,R3

      994    13987    5                          END;

  13987   1 000285  8AC7 0089                            INC      SEG,AUTO
          1 000287  E847 0089                            LDR,R6   SEG,AUTO
          1 000289  E947 008A                            CMR,R6   HISEG,AUTO
          1 00028B  03F2                                 BLE      s:13986,SPREL

      995    13988    4                     END;

      996    13989
      997    13990    3                END;

  13990   1 00028C  0F81 0008                            B        s:14000,PREL

      998    13991
      999    13992    3           WHENALTRETURN DO;

     1000    13993    3                ERR = EMMFAILED;

  13993   1 00028E  8C80 0000 0001  00                   LDI      EMMFAILED
          1 000291  8D47 0083                            SDI      ERR,AUTO

     1001    13994    3                GOTO CANT_GET_DB;

PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:139  
  13994   1 000293  0F81 FE85                            B        s:13860,PREL

     1002    13995    3                END;
     1003    13996
     1004    13997        /*D* Once the debugger is successfully associated the UDELTA bit
     1005    13998             is set in G$JIT.JUNK.
     1006    13999        */
     1007    14000    2           G$JIT.JUNK.UDELTA = '1'B;

  14000   1 000295  8946 0098                            LBT,'0004'X       152,B6
  14000   1 000297       0004

     1008    14001
     1009    14002        /*D* An ACK message is sent back to the UEP$PMME routine on the host.
     1010    14003             The ACK message will contain the FPRG fid.
     1011    14004        */
     1012    14005    2           CALL SEND_ACK;

  14005   1 000298  E3C0 003A                            LNJ,B6   s:0,PREL
          1 00029A       0001                            DC       s:14006,PREL

     1013    14006    2           END /* Do if JIT.DB# zero */;

  14006   1 00029B  0F81 0034                            B        s:14026,PREL

     1014    14007
     1015    14008
     1016    14009        /*D* If this is not the initial entry to the debugger,
     1017    14010             the TRAP field is set to G_HOST_INT# or G_FPRG_START2.
     1018    14011        */
     1019    14012    2      ELSE DO;

     1020    14013    2           IF G$JIT.JUNK.RTNFID

  14013   1 00029D  82C6 0098                            LB,'0040'X        152,B6
  14013   1 00029F       0040
          1 0002A0  0581 000D                            BBF      s:14020,PREL
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:140  

     1021    14014    3           THEN DO;

     1022    14015    3                CALL SEND_ACK;

  14015   1 0002A2  E3C0 0030                            LNJ,B6   s:0,PREL
          1 0002A4       0001                            DC       s:14016,PREL

     1023    14016    3                G$JIT.JUNK.RTNFID = '0'B;

  14016   1 0002A5  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 0002A8  8846 0098                            LBF,'0040'X       152,B6
          1 0002AA       0040

     1024    14017    3                RETURN;

  14017   1 0002AB  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

     1025    14018    3                END;
     1026    14019
     1027    14020    2           IF G$JIT.JUNK.DB_TIMER

  14020   1 0002AE  82C6 0098                            LB,'1000'X        152,B6
  14020   1 0002B0       1000
          1 0002B1  0581 0009                            BBF      s:14022,PREL

     1028    14021    2           THEN G$TSA.I.TRAP# = %G_DB_TIMER#;

  14021   1 0002B3  5C3C                                 LDV,R5   60
          1 0002B4  CC80 0000 0000  xsym                 LDB,B4   G$TSA_USR$
          1 0002B7  D7C4 0002                            STH,R5   2,B4
          1 0002B9  0F81 0016                            B        s:14026,PREL

     1029    14022    2           ELSE IF G$JIT.PROG_ENTRY = %G_PE_LDTRC#

  14022   1 0002BB  D846 0003                            LDR,R5   3,B6
          1 0002BD  D570 00FF                            AND,R5   255,IMO
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:141  
          1 0002BF  5D02                                 CMV,R5   2
          1 0002C0  0981 0009                            BNE      s:14024,PREL

     1030    14023    2                THEN G$TSA.I.TRAP# = %G_FPRG_START2#;

  14023   1 0002C2  4C3E                                 LDV,R4   62
          1 0002C3  CC80 0000 0000  xsym                 LDB,B4   G$TSA_USR$
          1 0002C6  C7C4 0002                            STH,R4   2,B4
          1 0002C8  0F81 0007                            B        s:14026,PREL

     1031    14024    2                ELSE G$TSA.I.TRAP# = %G_HOST_INT#;

  14024   1 0002CA  4C37                                 LDV,R4   55
          1 0002CB  CC80 0000 0000  xsym                 LDB,B4   G$TSA_USR$
          1 0002CE  C7C4 0002                            STH,R4   2,B4

     1032    14025    2           END;

     1033    14026    1      RETURN;

  14026   1 0002D0  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

     1034    14027
     1035    14028        %EJECT;
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:142  
     1036    14029
     1037    14030
     1038    14031
     1039    14032    1   SEND_ACK: PROC;

  14032   1 0002D3  EFC7 008C            SEND_ACK        STB,B6   LOSEG+1,AUTO

     1040    14033    2      ALIBFD_ACK_MSG.FCN = %GJ_ACK#;

  14033   1 0002D5  6C1C                                 LDV,R6   28
          1 0002D6  E7C7 0063                            STH,R6   ALIBFD_ACK_MSG,AUTO

     1041    14034    2      ALIBFD_ACK_MSG.ERR = '0'B;

  14034   1 0002D8  8747 0064                            CL       ALIBFD_ACK_MSG+1,AUTO
          1 0002DA  8747 0065                            CL       ALIBFD_ACK_MSG+2,AUTO

     1042    14035    2      ALIBFD_ACK_MSG.NAME = G$ROS.M$LM.NAME;

  14035   1 0002DC  AC80 0000 0000  xsym                 LDB,B2   G$ROS$
          1 0002DF  ABC2 01FE                            LAB,B2   510,B2
          1 0002E1  2C00                                 LDV,R2   0
          1 0002E2  6C20                                 LDV,R6   32
          1 0002E3  BBC7 0066                            LAB,B3   ALIBFD_ACK_MSG+3,AUTO
          1 0002E5  3C00                                 LDV,R3   0
          1 0002E6  0008                                 MMM

     1043    14036    2      ALIBFD_ACK_MSG.ACCT = G$ROS.M$LM.ACCT;

  14036   1 0002E7  AC80 0000 0000  xsym                 LDB,B2   G$ROS$
          1 0002EA  ABC2 020E                            LAB,B2   526,B2
          1 0002EC  2C00                                 LDV,R2   0
          1 0002ED  6C08                                 LDV,R6   8
          1 0002EE  BBC7 0076                            LAB,B3   ALIBFD_ACK_MSG+19,AUTO
          1 0002F0  3C00                                 LDV,R3   0
          1 0002F1  0008                                 MMM

PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:143  
     1044    14037    2      ALIBFD_ACK_MSG.PASS = G$ROS.M$LM.PASS;

  14037   1 0002F2  AC80 0000 0000  xsym                 LDB,B2   G$ROS$
          1 0002F5  ABC2 022D                            LAB,B2   557,B2
          1 0002F7  2C01                                 LDV,R2   1
          1 0002F8  6C08                                 LDV,R6   8
          1 0002F9  BBC7 007A                            LAB,B3   ALIBFD_ACK_MSG+23,AUTO
          1 0002FB  3C00                                 LDV,R3   0
          1 0002FC  0008                                 MMM

     1045    14038    2      ALIBFD_ACK_MSG.PSN = G$ROS.M$LM.PSN;

  14038   1 0002FD  AC80 0000 0000  xsym                 LDB,B2   G$ROS$
          1 000300  ABC2 0231                            LAB,B2   561,B2
          1 000302  2C01                                 LDV,R2   1
          1 000303  6C06                                 LDV,R6   6
          1 000304  BBC7 007E                            LAB,B3   ALIBFD_ACK_MSG+27,AUTO
          1 000306  3C00                                 LDV,R3   0
          1 000307  0008                                 MMM

     1046    14039    2      ALIBFD_ACK_MSG.MODTIME = G$ROS.M$LM.MODTIME;

  14039   1 000308  EC80 0000 0000  xsym                 LDB,B6   G$ROS$
          1 00030B  8CC6 0235                            LDI      565,B6
          1 00030D  8D47 0081                            SDI      ALIBFD_ACK_MSG+30,AUTO

     1047    14040
     1048    14041    2      MSG_ = VECTOR(ALIBFD_ACK_MSG);

  14041   1 00030F  DBC7 0063                            LAB,B5   ALIBFD_ACK_MSG,AUTO
          1 000311  DFC7 008F                            STB,B5   LOSEG+4,AUTO
          1 000313  5C3F                                 LDV,R5   63
          1 000314  DF47 008E                            STR,R5   LOSEG+3,AUTO
          1 000316  ABC7 008E                            LAB,B2   LOSEG+3,AUTO
          1 000318  2C00                                 LDV,R2   0
          1 000319  6C06                                 LDV,R6   6
          1 00031A  BBC7 0085                            LAB,B3   MSG_,AUTO
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:144  
          1 00031C  3C00                                 LDV,R3   0
          1 00031D  0008                                 MMM

     1049    14042    2      CALL KNA$WRITE(%G_M$DEBUG#,MSG_,ERR);

  14042   1 00031E  DBF0 0001                            LAB,B5   1,IMO
          1 000320  CBC7 0083                            LAB,B4   ERR,AUTO
          1 000322  CFC7 0092                            STB,B4   LOSEG+7,AUTO
          1 000324  BBC7 0085                            LAB,B3   MSG_,AUTO
          1 000326  BFC7 0090                            STB,B3   LOSEG+5,AUTO
          1 000328  DFC7 008E                            STB,B5   LOSEG+3,AUTO
          1 00032A  BBC7 008E                            LAB,B3   LOSEG+3,AUTO
          1 00032C  CBF0 0300                            LAB,B4   768,IMO
          1 00032E  E380 0000 0000  xent                 LNJ,B6   KNA$WRITE
          1 000331       0001                            DC       s:14043,PREL

     1050    14043    2   END SEND_ACK;

  14043   1 000332  ECC7 008C                            LDB,B6   LOSEG+1,AUTO
          1 000334  C3C6 0001                            LNJ,B4   1,B6

     1051    14044
     1052    14045
     1053    14046
     1054    14047    1   SEND_NAK: PROC;

  14047   1 000336  EFC7 008C            SEND_NAK        STB,B6   LOSEG+1,AUTO

     1055    14048    2      FCN_MSG.FCN = %GJ_NAK#;

  14048   1 000338  6C1D                                 LDV,R6   29
          1 000339  E7C7 0060                            STH,R6   FCN_MSG,AUTO

     1056    14049    2      FCN_MSG.ERR = ERR;

  14049   1 00033B  8CC7 0083                            LDI      ERR,AUTO
          1 00033D  8D47 0061                            SDI      FCN_MSG+1,AUTO
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:145  

     1057    14050    2      MSG_ = VECTOR(FCN_MSG);

  14050   1 00033F  DBC7 0060                            LAB,B5   FCN_MSG,AUTO
          1 000341  DFC7 008F                            STB,B5   LOSEG+4,AUTO
          1 000343  5C05                                 LDV,R5   5
          1 000344  DF47 008E                            STR,R5   LOSEG+3,AUTO
          1 000346  ABC7 008E                            LAB,B2   LOSEG+3,AUTO
          1 000348  2C00                                 LDV,R2   0
          1 000349  6C06                                 LDV,R6   6
          1 00034A  BBC7 0085                            LAB,B3   MSG_,AUTO
          1 00034C  3C00                                 LDV,R3   0
          1 00034D  0008                                 MMM

     1058    14051    2      CALL KNA$WRITE(%G_M$DEBUG#,MSG_,ERR)

  14051   1 00034E  EBF0 0001                            LAB,B6   1,IMO
          1 000350  DBC7 0083                            LAB,B5   ERR,AUTO
          1 000352  DFC7 0092                            STB,B5   LOSEG+7,AUTO
          1 000354  CBC7 0085                            LAB,B4   MSG_,AUTO
          1 000356  CFC7 0090                            STB,B4   LOSEG+5,AUTO
          1 000358  EFC7 008E                            STB,B6   LOSEG+3,AUTO
          1 00035A  BBC7 008E                            LAB,B3   LOSEG+3,AUTO
          1 00035C  CBF0 0300                            LAB,B4   768,IMO
          1 00035E  E380 0000 0000  xent                 LNJ,B6   KNA$WRITE
          1 000361       0003                            DC       s:14055,PREL
          1 000362  0F81 0001                            B        s:14055,PREL

     1059    14052    3      WHENALTRETURN DO;

     1060    14053
     1061    14054    3           END;

     1062    14055    2   END SEND_NAK;

  14055   1 000364  ECC7 008C                            LDB,B6   LOSEG+1,AUTO
          1 000366  C3C6 0001                            LNJ,B4   1,B6
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:146  
     1063    14056
     1064    14057    1   END GJU$GET_DB;
     1065    14058        %EOD;

PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:147  
--  Include file information  --

   M_ERRORS_C.:E05TOU  is referenced.
   J_ERRORS_C.:E05TOU  is referenced.
   GM_VIRTUAL_E.:E05TOU  is referenced.
   GH_SCHD_E.:E05TOU  is referenced.
   GD$MACS_M.:E05TOU  is referenced.
   G_HJIT_M.:E05TOU  is referenced.
   G_JIT_M.:E05TOU  is referenced.
   G_SFILE_M.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   GM_MACRO_M.:E05TOU  is referenced.
   GJ_MACROS_M.:E05TOU  is referenced.
   GJ_MSG_M.:E05TOU  is referenced.
   GH_SCHD_M.:E05TOU  is referenced.
   GH_GATE_M.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GJU$GET_DB.
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:148  

 **** Variables and constants ****

  ****  Section 000 RoData GJU$GET_DB

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w STRC(32)    r     1 EDEBUGXONLY                1-0-0/w STRC(32)    r     1 EMMFAILED
     3-0-0/w STRC(32)    r     1 ENOTFREE                   0-0-0/w SBIN(16)    r     1 GJU_DB_DB

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

    63-0-0/w STRC(512)   r     1 ALIBFD_ACK_MSG            59-0-0/w STRC(112)   r     1 ALIB_DATA
    29-0-0/w STRC(464)   r     1 ALIB_FID                  46-0-0/w STRC(304)   r     1 ALIB_MSG
    25-0-0/w STRC(64)    r     1 CHKSZ_PARAMS              88-0-0/w UBIN(16)    r     1 DB_SEGSZ
    83-0-0/w STRC(32)    r     1 ERR                       60-0-0/w STRC(48)    r     1 FCN_MSG
     F-0-0/w STRC(128)   r     1 GP_PARAMS                 8A-0-0/w UBIN(16)    r     1 HISEG
    8B-0-0/w UBIN(16)    r     1 LOSEG                     85-0-0/w VECT        r     1 MSG_
    17-0-0/w STRC(224)   r     1 RD_PARAMS                 89-0-0/w UBIN(16)    r     1 SEG
     4-0-0/w STRC(176)   r     1 SF_PARAMS

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 G$ASDT_MCL$                0-0-0/w PTR         r     1 G$ASDT_USR$
     0-0-0/w PTR         r     1 G$BPAR1$                   0-0-0/w PTR         r     1 G$JIT$
     0-0-0/w PTR         r     1 G$LPAR1$                   0-0-0/w PTR         r     1 G$MHJIT$
     0-0-0/w PTR         r     1 G$ROS$                     0-0-0/w PTR         r     1 G$TSA_USR$
     0-0-0/w STRC(48)    r     1 GM_MEATLOCK

  ****  BASED and DCB variables  ****

PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:149  
  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(992)   r     1 G$ASDT_MCL                 0-0-0/w STRC(992)   r     1 G$ASDT_USR
     0-0-0/w STRC(5616)  r     1 G$JIT                      0-0-0/w STRC(27232) r     1 G$MHJIT
     0-0-0/w STRC(12000) r     1 G$ROS                      0-0-0/w STRC(768)   r     1 G$SFILE
     0-0-0/w STRC(928)   r     1 G$TSA                      0-0-0/w STRC(384)   r     1 G$U
     0-0-0/w STRC(96)    r     1 GD$FD_DS                   0-0-0/w STRC(96)    r     1 GD$FD_PROC


   Procedure GJU$GET_DB requires 872 words for executable code.
   Procedure GJU$GET_DB requires 152 words of local(AUTO) storage.
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:150  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:151  
          MINI XREF LISTING

ALIBFD_ACK_MSG
      3201**DCL     14041--ASSIGN
ALIBFD_ACK_MSG.ACCT
      3258**DCL     14036<<ASSIGN
ALIBFD_ACK_MSG.ERR
      3226**DCL     14034<<ASSIGN
ALIBFD_ACK_MSG.FCN
      3201**DCL     14033<<ASSIGN
ALIBFD_ACK_MSG.MODTIME
      3267**DCL     14039<<ASSIGN
ALIBFD_ACK_MSG.NAME
      3258**DCL     14035<<ASSIGN
ALIBFD_ACK_MSG.PASS
      3258**DCL     14037<<ASSIGN
ALIBFD_ACK_MSG.PSN
      3263**DCL     14038<<ASSIGN
ALIB_DATA
      3037**DCL     13855--ASSIGN
ALIB_DATA.ERR
      3062**DCL     13858>>IF
ALIB_DATA.PROC_SZ
      3097**DCL     13865>>ASSIGN  13885>>ASSIGN
ALIB_FID
      2903**DCL     13828--ASSIGN
ALIB_FID.ACCT
      2909**DCL     13831<<ASSIGN
ALIB_FID.MODTIME
      2921**DCL     13834<<ASSIGN
ALIB_FID.NAME
      2904**DCL     13830<<ASSIGN
ALIB_FID.PASS
      2913**DCL     13832<<ASSIGN
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:152  
ALIB_FID.PSN
      2917**DCL     13833<<ASSIGN
ALIB_MSG
      2952**DCL     13796--ASSIGN
ALIB_MSG.ERR
      2977**DCL     13798>>IF      13800>>ASSIGN  13860>>ASSIGN
ALIB_MSG.NAME
      3009**DCL     13830>>ASSIGN
CANT_ALIB
     13800**LABEL   13797--CALLALT
CANT_GET_DB
     13860**LABEL   13853--CALLALT 13856--CALLALT 13891--GOTO    13946--GOTO    13994--GOTO
CHKSZ_PARAMS
      2810**DCL     13943<>CALL
CHKSZ_PARAMS.ERR
      2831**DCL     13945>>ASSIGN
CHKSZ_PARAMS.FLGS.CHK_ONLY
      2865**DCL     13938<<ASSIGN
CHKSZ_PARAMS.FLGS.NSHUF
      2884**DCL     13941<<ASSIGN
CHKSZ_PARAMS.FLGS.PARK
      2878**DCL     13940<<ASSIGN
CHKSZ_PARAMS.FLGS.REQ_ALL
      2872**DCL     13939<<ASSIGN
CHKSZ_PARAMS.FLGS.STEP
      2890**DCL     13942<<ASSIGN
CHKSZ_PARAMS.SIZE
      2811**DCL     13937<<ASSIGN
DB_SEGSZ
      3320**DCL     13862<>CALL    13931<<ASSIGN  13937>>ASSIGN  13948<>CALL    13950>>ASSIGN
EDEBUGXONLY
      3468**DCL     13807>>ASSIGN
EMMFAILED
      3373**DCL     13993>>ASSIGN
ENOTFREE
      3420**DCL     13817>>ASSIGN
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:153  
ERR
      3286**DCL     13797<>CALL    13800<<ASSIGN  13807<<ASSIGN  13817<<ASSIGN  13838<<ASSIGN  13853<>CALL
     13856<>CALL    13860<<ASSIGN  13890<<ASSIGN  13945<<ASSIGN  13993<<ASSIGN  14042<>CALL    14049>>ASSIGN
     14051<>CALL
FCN_MSG
      3118**DCL     13852--ASSIGN  14050--ASSIGN
FCN_MSG.ERR
      3143**DCL     14049<<ASSIGN
FCN_MSG.FCN
      3118**DCL     13851<<ASSIGN  14048<<ASSIGN
G$ASDT_MCL.BPAR1
      4685**DCL     13921<<ASSIGN  13929<>CALL
G$ASDT_MCL.LPAR1
      4443**DCL     13958<<ASSIGN  13966<>CALL
G$ASDT_MCL$
      3333**DCL      4202--IMP-PTR 13921>>ASSIGN  13929>>CALL    13958>>ASSIGN  13966>>CALL
G$ASDT_USR.DB_DS
      3573**DCL     13958>>ASSIGN
G$ASDT_USR.DB_PROC
      4035**DCL     13901<<ASSIGN  13921>>ASSIGN
G$ASDT_USR.DB_PROC.V
      4037**DCL     13816>>IF
G$ASDT_USR$
      3334**DCL      3508--IMP-PTR 13816>>IF      13901>>ASSIGN  13921>>ASSIGN  13958>>ASSIGN
G$BPAR1$
      3330**DCL     13929<>CALL    13931>>ASSIGN  13931>>ASSIGN
G$JIT.DB#
     12921**DCL     13794>>IF      13841<<ASSIGN  13904>>ASSIGN  13906<<ASSIGN
G$JIT.DB_WRTSEGS
     12914**DCL     13986<<ASSIGN
G$JIT.ERRLOG
     13070**DCL     13073--REDEF
G$JIT.JSUNIT
     12809**DCL     12810--REDEF
G$JIT.JUNK.ALIBFD
     13067**DCL     13785<<ASSIGN
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:154  
G$JIT.JUNK.DB_TIMER
     13061**DCL     14020>>IF
G$JIT.JUNK.EXONLY
     13068**DCL     13805>>IF
G$JIT.JUNK.RTNFID
     13067**DCL     14013>>IF      14016<<ASSIGN
G$JIT.JUNK.UDELTA
     13068**DCL     14000<<ASSIGN
G$JIT.MCLS
     12808**DCL     12808--REDEF
G$JIT.PCDDS
     12916**DCL     13950<<ASSIGN
G$JIT.PLL
     12912**DCL     13982>>ASSIGN
G$JIT.PROG_ENTRY
     12797**DCL     14022>>IF
G$JIT.PUL
     12913**DCL     13983>>ASSIGN
G$JIT.SPROC#
     12920**DCL     13980>>IF
G$JIT.TMRZ
     13077**DCL     13078--REDEF
G$JIT.USER_EXTIME
     12801**DCL     12802--REDEF
G$JIT.USER_MEMTIME
     12804**DCL     12804--REDEF
G$JIT.USER_SVTIME
     12803**DCL     12803--REDEF
G$JIT$
      3327**DCL     12740--IMP-PTR 13785>>ASSIGN  13794>>IF      13805>>IF      13841>>ASSIGN  13904>>ASSIGN
     13906>>ASSIGN  13950>>ASSIGN  13980>>IF      13982>>ASSIGN  13983>>ASSIGN  13986>>ASSIGN  14000>>ASSIGN
     14013>>IF      14016>>ASSIGN  14020>>IF      14022>>IF
G$LPAR1$
      3328**DCL     13966<>CALL    13968>>ASSIGN  13969>>ASSIGN  13970>>ASSIGN
G$MHJIT.CU$
     11246**DCL     13786>>ASSIGN  13786>>ASSIGN
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:155  
G$MHJIT.INTCON.HHJIT
     11380**DCL     11380--REDEF
G$MHJIT.INTCON.P$$
     11353**DCL     11353--REDEF
G$MHJIT.ISA_BIGFOOT.P$$
      8298**DCL      8298--REDEF
G$MHJIT.ISA_DBINH.P$$
      9512**DCL      9512--REDEF
G$MHJIT.ISA_IDLE.P$$
      6393**DCL      6393--REDEF
G$MHJIT.ISA_LVL10.P$$
      9815**DCL      9815--REDEF
G$MHJIT.ISA_LVL11.P$$
     10118**DCL     10118--REDEF
G$MHJIT.ISA_LVL12.P$$
     10421**DCL     10421--REDEF
G$MHJIT.ISA_LVL5.P$$
      8601**DCL      8601--REDEF
G$MHJIT.ISA_OV.P$$
      7995**DCL      7995--REDEF
G$MHJIT.ISA_PFS.P$$
      7666**DCL      7666--REDEF
G$MHJIT.ISA_RT_CLOCK.P$$
     11028**DCL     11028--REDEF
G$MHJIT.ISA_SATYR_RCV.P$$
      8905**DCL      8905--REDEF
G$MHJIT.ISA_SATYR_TRN.P$$
      9209**DCL      9209--REDEF
G$MHJIT.ISA_SCHD.P$$
     10724**DCL     10724--REDEF
G$MHJIT.ISA_WDOG.P$$
      7774**DCL      7774--REDEF
G$MHJIT.TSA_DB.ISA.P$$
      6996**DCL      6996--REDEF
G$MHJIT.TSA_DB.P$$
      6867**DCL      6867--REDEF    6868--REDEF
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:156  
G$MHJIT.TSA_HND.ISA.P$$
     11574**DCL     11574--REDEF
G$MHJIT.TSA_HND.P$$
     11445**DCL     11445--REDEF   11446--REDEF
G$MHJIT.TSA_MON.ISA.P$$
      6608**DCL      6608--REDEF
G$MHJIT.TSA_MON.P$$
      6479**DCL      6479--REDEF    6480--REDEF
G$MHJIT.TSA_OV.ISA.P$$
      7384**DCL      7384--REDEF
G$MHJIT.TSA_OV.P$$
      7255**DCL      7255--REDEF    7256--REDEF
G$MHJIT$
      3331**DCL      4918--IMP-PTR 13786>>ASSIGN  13786>>ASSIGN
G$ROS.AUTO_DS$
     11798**DCL     11799--REDEF
G$ROS.AUTO_T$
     11799**DCL     11799--REDEF
G$ROS.CP_ECCB.FLTFLG
     12413**DCL     12444--REDEF
G$ROS.DB_ECCB.FLTFLG
     12337**DCL     12368--REDEF
G$ROS.JIT.ERRLOG
     12148**DCL     12151--REDEF
G$ROS.JIT.JSUNIT
     11887**DCL     11888--REDEF
G$ROS.JIT.MCLS
     11886**DCL     11886--REDEF
G$ROS.JIT.TMRZ
     12155**DCL     12156--REDEF
G$ROS.JIT.USER_EXTIME
     11879**DCL     11880--REDEF
G$ROS.JIT.USER_MEMTIME
     11882**DCL     11882--REDEF
G$ROS.JIT.USER_SVTIME
     11881**DCL     11881--REDEF
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:157  
G$ROS.M$DEBUG.EOMCHAR
     12484**DCL     12484--REDEF   12485--REDEF
G$ROS.M$DEBUG.FLDID
     12483**DCL     12483--REDEF
G$ROS.M$DEBUG.RES
     12478**DCL     12479--REDEF
G$ROS.M$DO.EOMCHAR
     12689**DCL     12689--REDEF   12690--REDEF
G$ROS.M$DO.FLDID
     12688**DCL     12688--REDEF
G$ROS.M$DO.RES
     12683**DCL     12684--REDEF
G$ROS.M$HOST.EOMCHAR
     12638**DCL     12638--REDEF   12639--REDEF
G$ROS.M$HOST.FLDID
     12637**DCL     12637--REDEF
G$ROS.M$HOST.RES
     12632**DCL     12633--REDEF
G$ROS.M$LM.ACCT
     12529**DCL     14036>>ASSIGN
G$ROS.M$LM.EOMCHAR
     12535**DCL     12535--REDEF   12536--REDEF
G$ROS.M$LM.FLDID
     12534**DCL     12534--REDEF
G$ROS.M$LM.MODTIME
     12548**DCL     14039>>ASSIGN
G$ROS.M$LM.NAME
     12528**DCL     14035>>ASSIGN
G$ROS.M$LM.PASS
     12548**DCL     14037>>ASSIGN
G$ROS.M$LM.PSN
     12548**DCL     14038>>ASSIGN
G$ROS.M$LM.RES
     12529**DCL     12530--REDEF
G$ROS.M$ME.EOMCHAR
     12587**DCL     12587--REDEF   12588--REDEF
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:158  
G$ROS.M$ME.FLDID
     12586**DCL     12586--REDEF
G$ROS.M$ME.RES
     12581**DCL     12582--REDEF
G$ROS.U_ECCB.FLTFLG
     12261**DCL     12292--REDEF
G$ROS$
      3332**DCL     11789--IMP-PTR 14035>>ASSIGN  14036>>ASSIGN  14037>>ASSIGN  14038>>ASSIGN  14039>>ASSIGN
G$SFILE.LIB_WDSZ_DATA
     13560**DCL     13561--REDEF
G$SFILE.PGSZ_PROC
     13561**DCL     13869>>ASSIGN
G$TSA.I.TRAP#
     13191**DCL     13975<<ASSIGN  14021<<ASSIGN  14023<<ASSIGN  14024<<ASSIGN
G$TSA.ISA.P$$
     13328**DCL     13328--REDEF
G$TSA.P$$
     13199**DCL     13199--REDEF   13200--REDEF
G$TSA_USR$
      3326**DCL     13167--IMP-PTR 13975>>ASSIGN  14021>>ASSIGN  14023>>ASSIGN  14024>>ASSIGN
G$U.ASYNCH
      4896**DCL     13786<<ASSIGN  13786>>ASSIGN
G$U.MISC
      4896**DCL      4896--REDEF
GD$FD_DS.STK_PTR
     13615**DCL     13968<<ASSIGN
GD$FD_DS.TRAP
     13632**DCL     13663--REDEF   13663--REDEF
GD$FD_DS.TRAPS
     13663**DCL     13969<<ASSIGN  13970<<ASSIGN
GD$FD_PROC.DS_SZ
     13608**DCL     13931>>ASSIGN
GD$FD_PROC.STK_SZ
     13608**DCL     13931>>ASSIGN
GHH$ASD
     13674**DCL-ENT 13929--CALL    13966--CALL
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:159  
GHH$LOCK
        55**DCL-ENT 13919--CALL    13956--CALL
GHH$UNLOCK
        55**DCL-ENT 13927--CALL    13964--CALL
GJS$CLOSE_SHARED
     13669**DCL-ENT 13905--CALL
GJS$OPEN_SHARED
     13668**DCL-ENT 13836--CALL
GJS$RUND_FD
     13670**DCL-ENT 13862--CALL
GJU$GET_PROC
     13671**DCL-ENT 13888--CALL    13902--CALL
GJU_DB_DB
      3357**DCL     13897>>IF
GMA$CHKSIZE
     13672**DCL-ENT 13943--CALL
GMA$GET
     13673**DCL-ENT 13948--CALL
GM_MEATLOCK
      3348**DCL     13919<>CALL    13927<>CALL    13956<>CALL    13964<>CALL
GP_PARAMS
      2667**DCL     13888<>CALL    13902<>CALL
GP_PARAMS.PGSZ
      2702**DCL     13865<<ASSIGN  13869<<ASSIGN
GP_PARAMS.RD_PARAMS$
      2668**DCL     13881<<ASSIGN
GP_PARAMS.SHARE
      2675**DCL     13879<<ASSIGN
GP_PARAMS.SHARE.GET_PROC
      2685**DCL     13899<<ASSIGN
GP_PARAMS.SHARE.SHARE_PROC
      2689**DCL     13900<<ASSIGN
GP_PARAMS.VP#
      2698**DCL     13880<<ASSIGN  13883>>ASSIGN
HISEG
      3322**DCL     13983<<ASSIGN  13985>>DOINDEX
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:160  
KNA$READ
     13666**DCL-ENT 13797--CALL    13856--CALL
KNA$WRITE
     13667**DCL-ENT 13853--CALL    14042--CALL    14051--CALL
LOSEG
      3323**DCL     13982<<ASSIGN  13985>>DOINDEX
MSG_
      3319**DCL     13796<<ASSIGN  13797<>CALL    13852<<ASSIGN  13853<>CALL    13855<<ASSIGN  13856<>CALL
     14041<<ASSIGN  14042<>CALL    14050<<ASSIGN  14051<>CALL
NAK_N_ALTRET
     13808**LABEL   13818--GOTO    13839--GOTO    13863--GOTO
RD_PARAMS
      2712**DCL     13881--ASSIGN
RD_PARAMS.DCB#
      2750**DCL     13886<<ASSIGN
RD_PARAMS.ERR
      2770**DCL     13890>>ASSIGN
RD_PARAMS.PROG_TYPE
      2713**DCL     13884<<ASSIGN
RD_PARAMS.TOT_SECTSZ
      2734**DCL     13885<<ASSIGN
RD_PARAMS.USR_LOC
      2739**DCL     13883<<ASSIGN
RD_PARAMS.USR_LOC$
      2738**DCL      2739--REDEF
SEG
      3321**DCL     13904<<ASSIGN  13905<>CALL    13985<<DOINDEX 13986>>ASSIGN
SEND_ACK
     14032**PROC    14005--CALL    14015--CALL
SEND_NAK
     14047**PROC    13808--CALL
SF_PARAMS
      2527**DCL     13836<>CALL
SF_PARAMS.ERR
      2587**DCL     13838>>ASSIGN
SF_PARAMS.FCN
PL6.E3A0      #002=GJU$GET_DB File=GJU$UTIL.:E05TSI                              TUE 07/29/97 22:07 Page:161  
      2533**DCL     13825<<ASSIGN
SF_PARAMS.FID$
      2528**DCL     13828<<ASSIGN
SF_PARAMS.PNUM
      2554**DCL     13841>>ASSIGN
SF_PARAMS.PTYPE
      2561**DCL     13826<<ASSIGN
SF_PARAMS.TYC
      2626**DCL     13879>>ASSIGN
SF_PARAMS.TYC.GET_PROC
      2634**DCL     13849>>IF
SF_PARAMS.TYC.SFILE$
      2630**DCL     13544--IMP-PTR 13869>>ASSIGN
SF_PARAMS.WAIT
      2617**DCL     13827<<ASSIGN

PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:162  
     1066        1        /*T***********************************************************/
     1067        2        /*T*                                                         */
     1068        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1069        4        /*T*                                                         */
     1070        5        /*T***********************************************************/
     1071        6        /*F*    NAME: GJU$XCON
     1072        7
     1073        8                PURPOSE: To provide for exit control.
     1074        9
     1075       10                CALL:    CALL GJU$XCON ALTRET(LABEL);
     1076       11
     1077       12        */
     1078       13
     1079       14        GJU$XCON: PROC(INFO$,P#) ALTRET;
     1080       15
     1081       16        %INCLUDE GU_MACROS_M;
     1082      175        %INCLUDE G_ROS_M;
     1083      257        %INCLUDE G_JIT_M;
     1084      522        %INCLUDE G_HJIT_M;
     1085      667 S      %INCLUDE GH_LCP6_M;
     1086      668 S      %INCLUDE GU_LCP6_M;
     1087      669
     1088      670 S      %INCLUDE G_LCP6_E;
     1089      671        %INCLUDE J_SCODE_C;
     1090      699
     1091      700                                                /* Input parameters         */
     1092      701    1   DCL INFO$ PTR;
     1093      702    1   DCL P# UBIN;
     1094      703                                                /* AUTO Storage             */
     1095      704    1   DCL ECCB$ PTR;
     1096      705        %GUE_ENVTCB_PARAMS (FPTN=ENVTCB_PARAMS,STCLASS=AUTO);
     1097      830
     1098      831                                                /* BASED Structures         */
     1099      832        %G$TSA;
     1100     1220        %G$ROS (STCLASS="BASED(G$ROS$)");
     1101     1264        %G$JIT (STCLASS="BASED(G$JIT$)");
     1102     1678        %G$ECCB (STCLASS="BASED(ECCB$)");
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:163  
     1103     1754        %G$UHJIT (STCLASS="BASED(G$UHJIT$)");
     1104     4728
     1105     4729                                                /* External Data            */
     1106     4730    1   DCL G$ROS$ PTR SYMREF READONLY;
     1107     4731    1   DCL G$JIT$ PTR SYMREF READONLY;
     1108     4732    1   DCL G$UHJIT$ PTR SYMREF READONLY;
     1109     4733    1   DCL G_XCONTIME UBIN(32) SYMREF;
     1110     4734
     1111     4735                                                /* External Procedures      */
     1112     4736    1   DCL GUE$ENVTCB ENTRY(1) ALTRET;
     1113     4737    1   DCL SCREECH ENTRY(1);
     1114     4738
     1115     4739                                                /* Internal data            */
     1116     4740        %VLP_SCODE (FPTN=SDOMAIN,ERR#=%S$SSFRAME,SEV=G_SEV_SUA#,
     1117     4741                    STCLASS=CONSTANT,FCG=GJ,MID=U,MON='1'B);
     1118     4802
     1119     4803                                                /* String Substitutions     */
     1120     4804        %G$JIT_E;
     1121     4866
     1122     4867        %EJECT;
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:164  
     1123     4868        /*D* NAME: GJU$XCON
     1124     4869
     1125     4870             DESCRIPTION:
     1126     4871
     1127     4872             GJU$XCON is called from GJS$ABORTM to determine if exit
     1128     4873             control processing is to be initiated.
     1129     4874             If so, the alternate return will be taken.  If the abort
     1130     4875             logic is to continue, the normal return will be taken.
     1131     4876        */
     1132     4877    2      DO CASE(G$UHJIT.DMN.ID);
     1133     4878    2       CASE(%G_DMN_USR#, %G_DMN_USR_SVC#, %G_DMN_INT#, %G_DMN_INT_SVC#);
     1134     4879    2         ECCB$ = G$ROS.U_ECCB$;
     1135     4880
     1136     4881    2       CASE(%G_DMN_DB#, %G_DMN_DB_SVC#);
     1137     4882    2         ECCB$ = G$ROS.DB_ECCB$;
     1138     4883
     1139     4884    2       CASE(ELSE);
     1140     4885    2         CALL SCREECH(SDOMAIN);
     1141     4886
     1142     4887    2         END /*do case*/;
     1143     4888
     1144     4889        /*S* SCREECH_CODE: GJU-S$SSFRAME
     1145     4890             TYPE: SUA
     1146     4891             MESSAGE:  Invalid domain number in UHJIT.
     1147     4892             REMARKS:  The bad domain was detected by GJU$XCON
     1148     4893                       which expects only G_DMN_USR_SVC or G_DMN_DB_SVC.
     1149     4894        */
     1150     4895
     1151     4896    1      IF G$UHJIT.ISA_USR.TSAP$ = ADDR(NIL)
     1152     4897    2      THEN DO;
     1153     4898    2           CALL SCREECH(SDOMAIN);
     1154     4899    2           END;
     1155     4900    2      ELSE DO;
     1156     4901    2           ENVTCB_PARAMS = '0'B;
     1157     4902    2           ENVTCB_PARAMS.ENV$ = ADDR(G$UHJIT.TSA_USR);
     1158     4903    2           ENVTCB_PARAMS.ENVTYPE = %GUE_ENVTCB_TSA#;
     1159     4904    2           END;
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:165  
     1160     4905
     1161     4906        /*D* Remember exit conditions in FRS.
     1162     4907        */
     1163     4908    1      G$JIT.FRS = (G$JIT.FRS | (G$JIT.RNST & %G_RS_XCON#) );
     1164     4909
     1165     4910        /*D* If this is an exit from XCON or a repeated class 2/3 abort
     1166     4911             the ECCB is reset to prevent re-entry to the user XCON routine.
     1167     4912        */
     1168     4913    1      IF G$ECCB.FLAGS.XCONP
     1169     4914    1      THEN IF (G$JIT.RNST & %G_RS_MCL#) = '0000'X
     1170     4915    2           THEN DO;
     1171     4916    2   NO_XCON:     ;
     1172     4917    2                G$ECCB.FLAGS.XCONP = '0'B;
     1173     4918    2                G$ECCB.XCON$ = ENTADDR(NIL);
     1174     4919    2                GOTO XCON_EXIT;
     1175     4920    2                END;
     1176     4921
     1177     4922        /*D* If the entry address for exit control in the ECCB is not nil,
     1178     4923             the GUE$ENVTCB routine is called to put an exit control frame
     1179     4924             on the TCB and put the user's XCON handler address in TSA.P$$.
     1180     4925             An altret to GJS$ABORTM will then cause a normal return to
     1181     4926             whoever initiated the abort logic.
     1182     4927        */
     1183     4928    1      IF (G$ECCB.XCON$ ~= ENTADDR(NIL) )
     1184     4929    1        OR ( (G$JIT.DB# ~= 0) AND NOT(G$JIT.RNST.LDTRC) )
     1185     4930    2      THEN DO;
     1186     4931    2           IF (G$JIT.RNST & %G_RS_CL23#)
     1187     4932    3           THEN DO;
     1188     4933    3                IF (G$JIT.RNST & %G_RS_CL23#) AND G$ECCB.FLAGS.EXTD_LIM
     1189     4934    3                THEN GOTO NO_XCON;
     1190     4935
     1191     4936    3                G$JIT.MRT = G_XCONTIME;
     1192     4937    3                G$ECCB.FLAGS.EXTD_LIM = '1'B;
     1193     4938    3                END;
     1194     4939
     1195     4940    2           IF (G$JIT.DB# = 0) OR (G$JIT.JUNK.BYPASSD)
     1196     4941    2           THEN ENVTCB_PARAMS.P$$ = G$ECCB.XCON$;
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:166  
     1197     4942    2           ELSE ENVTCB_PARAMS.P$$ = ENVTCB_PARAMS.ENV$->G$TSA.P$$;
     1198     4943    2           G$JIT.JUNK.BYPASSD = '0'B;
     1199     4944
     1200     4945    2           ENVTCB_PARAMS.ECC = %G_XCON#;
     1201     4946    2           ENVTCB_PARAMS.ECINFO.XCON.TRAP# = ENVTCB_PARAMS.ENV$->G$TSA.I.TRAP#;
     1202     4947    2           ENVTCB_PARAMS.ECINFO.XCON.FLAGS.XCONP = G$ECCB.FLAGS.XCONP;
     1203     4948    2           ENVTCB_PARAMS.ECINFO.RNST = G$JIT.RNST;
     1204     4949    2           ENVTCB_PARAMS.ECINFO.ERR = G$JIT.ERR;
     1205     4950    2           ENVTCB_PARAMS.ECINFO.P# = P#;
     1206     4951    2           ENVTCB_PARAMS.MOREINFO$ = INFO$;
     1207     4952    2           ENVTCB_PARAMS.TCB$ = ADDR(NIL);
     1208     4953
     1209     4954    2           CALL GUE$ENVTCB(ENVTCB_PARAMS)
     1210     4955    3           WHENRETURN DO;
     1211     4956    3                G$ECCB.FLAGS.TCBFULL = '0'B;
     1212     4957    3   GO_XCON:     ;
     1213     4958    3                G$JIT.RNST = '0000'X;
     1214     4959    3                G$ECCB.FLAGS.XCONP ='1'B;
     1215     4960
     1216     4961    3                IF G$JIT.DB# ~= 0
     1217     4962    3                THEN ENVTCB_PARAMS.ENV$->G$TSA.I.TRAP# = %G_FPRG_XCON#;
     1218     4963
     1219     4964    3                ALTRETURN;
     1220     4965    3                END;
     1221     4966
     1222     4967        /*D* When there is no room on the TCB, the exit control frame will be
     1223     4968             placed in the TCB's ALTRET frame and the TCBFULL bit will be set
     1224     4969             in the ECCB.  If this condition should occur again, i.e. a trap
     1225     4970             in the user's exit control logic, exit control will not be
     1226     4971             re-entered.
     1227     4972        */
     1228     4973    3           WHENALTRETURN DO;
     1229     4974    3                IF G$ECCB.FLAGS.TCBFULL= '1'B
     1230     4975    3                THEN RETURN;
     1231     4976
     1232     4977    3                ENVTCB_PARAMS.ECC = %G_TCBFULL#;
     1233     4978    3                CALL GUE$ENVTCB(ENVTCB_PARAMS)
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:167  
     1234     4979    4                WHENRETURN DO;
     1235     4980    4                     G$ECCB.FLAGS.TCBFULL = '1'B;
     1236     4981    4                     GOTO GO_XCON;
     1237     4982    4                     END;
     1238     4983    4                WHENALTRETURN DO;
     1239     4984    4                     RETURN;
     1240     4985    4                     END;
     1241     4986
     1242     4987    3                END;
     1243     4988
     1244     4989    2           END;
     1245     4990
     1246     4991        /*D* If the user has not requested XCON (or this is an XCON exit)
     1247     4992             JIT.RNST is reset and GJU$XCON returns to GJS$ABORTM.
     1248     4993        */
     1249     4994    2      ELSE DO;
     1250     4995
     1251     4996    2   XCON_EXIT: ;
     1252     4997    2           G$JIT.RNST = (G$JIT.RNST | (G$JIT.FRS & %G_RS_XCON#) );
     1253     4998    2           END;
     1254     4999
     1255     5000    1   END GJU$XCON;
     1256     5001        %EOD;

PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:168  
--  Include file information  --

   J_SCODE_C.:E05TOU  is referenced.
   G_HJIT_M.:E05TOU  is referenced.
   G_JIT_M.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   GU_MACROS_M.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GJU$XCON.

   Procedure GJU$XCON requires 309 words for executable code.
   Procedure GJU$XCON requires 28 words of local(AUTO) storage.

PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:169  

 Object Unit name= GJU$XCON                                   File name= GJU$UTIL.:E05TOU
 UTS= JUL 29 '97 22:10:34.24 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0  RoData even  UTS      3      3  GJU$XCON
    1   Proc  even  none   309    135  GJU$XCON
    2  RoData even  none     4      4  GJU$XCON

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        2  GJU$XCON

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 SCREECH
 yes     yes           Std       1 GUE$ENVTCB
                       nStd      0 X6A_AUTO_2
                       nStd      0 X6A_AALT
                       nStd      0 X6A_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    G$ROS$                           r    G$JIT$                           r    G$UHJIT$
     G_XCONTIME                       r    G$ROS$
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:170  


     1066        1        /*T***********************************************************/
     1067        2        /*T*                                                         */
     1068        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1069        4        /*T*                                                         */
     1070        5        /*T***********************************************************/
     1071        6        /*F*    NAME: GJU$XCON
     1072        7
     1073        8                PURPOSE: To provide for exit control.
     1074        9
     1075       10                CALL:    CALL GJU$XCON ALTRET(LABEL);
     1076       11
     1077       12        */
     1078       13
     1079       14        GJU$XCON: PROC(INFO$,P#) ALTRET;

     14   1 000000  D380 0000 0000  xent GJU$XCON        LNJ,B5   X6A_AUTO_2
          1 000003       001C 0002                       DC       28,2

     1080       15
     1081       16        %INCLUDE GU_MACROS_M;
     1082      175        %INCLUDE G_ROS_M;
     1083      257        %INCLUDE G_JIT_M;
     1084      522        %INCLUDE G_HJIT_M;
     1085      667 S      %INCLUDE GH_LCP6_M;
     1086      668 S      %INCLUDE GU_LCP6_M;
     1087      669
     1088      670 S      %INCLUDE G_LCP6_E;
     1089      671        %INCLUDE J_SCODE_C;
     1090      699
     1091      700                                                /* Input parameters         */
     1092      701    1   DCL INFO$ PTR;
     1093      702    1   DCL P# UBIN;
     1094      703                                                /* AUTO Storage             */
     1095      704    1   DCL ECCB$ PTR;
     1096      705        %GUE_ENVTCB_PARAMS (FPTN=ENVTCB_PARAMS,STCLASS=AUTO);
     1097      830
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:171  
     1098      831                                                /* BASED Structures         */
     1099      832        %G$TSA;
     1100     1220        %G$ROS (STCLASS="BASED(G$ROS$)");
     1101     1264        %G$JIT (STCLASS="BASED(G$JIT$)");
     1102     1678        %G$ECCB (STCLASS="BASED(ECCB$)");
     1103     1754        %G$UHJIT (STCLASS="BASED(G$UHJIT$)");
     1104     4728
     1105     4729                                                /* External Data            */
     1106     4730    1   DCL G$ROS$ PTR SYMREF READONLY;
     1107     4731    1   DCL G$JIT$ PTR SYMREF READONLY;
     1108     4732    1   DCL G$UHJIT$ PTR SYMREF READONLY;
     1109     4733    1   DCL G_XCONTIME UBIN(32) SYMREF;
     1110     4734
     1111     4735                                                /* External Procedures      */
     1112     4736    1   DCL GUE$ENVTCB ENTRY(1) ALTRET;
     1113     4737    1   DCL SCREECH ENTRY(1);
     1114     4738
     1115     4739                                                /* Internal data            */
     1116     4740        %VLP_SCODE (FPTN=SDOMAIN,ERR#=%S$SSFRAME,SEV=G_SEV_SUA#,
     1117     4741                    STCLASS=CONSTANT,FCG=GJ,MID=U,MON='1'B);
     1118     4802
     1119     4803                                                /* String Substitutions     */
     1120     4804        %G$JIT_E;
     1121     4866
     1122     4867        %EJECT;
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:172  
     1123     4868        /*D* NAME: GJU$XCON
     1124     4869
     1125     4870             DESCRIPTION:
     1126     4871
     1127     4872             GJU$XCON is called from GJS$ABORTM to determine if exit
     1128     4873             control processing is to be initiated.
     1129     4874             If so, the alternate return will be taken.  If the abort
     1130     4875             logic is to continue, the normal return will be taken.
     1131     4876        */
     1132     4877    2      DO CASE(G$UHJIT.DMN.ID);

   4877   1 000005  EC80 0000 0000  xsym                 LDB,B6   G$UHJIT$
          1 000008  B846 007E                            LDR,R3   126,B6
          1 00000A  3D08                                 CMV,R3   8
          1 00000B  0281 0021                            BGE      s:4885,PREL
          1 00000D  A830 0000 0013  01                   LDR,R2   s:4877+14,R3
          1 000010  83A0 0000 001B  01                   JMP      s:4879,R2
          1 000013       0012                            DC       s:4885,PREL
          1 000014       0009                            DC       s:4882,PREL
          1 000015       0000                            DC       s:4879,PREL
          1 000016       0000                            DC       s:4879,PREL
          1 000017       0012                            DC       s:4885,PREL
          1 000018       0009                            DC       s:4882,PREL
          1 000019       0000                            DC       s:4879,PREL
          1 00001A       0000                            DC       s:4879,PREL

     1133     4878    2       CASE(%G_DMN_USR#, %G_DMN_USR_SVC#, %G_DMN_INT#, %G_DMN_INT_SVC#);

     1134     4879    2         ECCB$ = G$ROS.U_ECCB$;

   4879   1 00001B  DC80 0000 0000  xsym                 LDB,B5   G$ROS$
          1 00001E  CCC5 000C                            LDB,B4   12,B5
          1 000020  CFC7 0008                            STB,B4   ECCB$,AUTO
          1 000022  0F81 0013                            B        s:4896,PREL

     1135     4880
     1136     4881    2       CASE(%G_DMN_DB#, %G_DMN_DB_SVC#);
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:173  

     1137     4882    2         ECCB$ = G$ROS.DB_ECCB$;

   4882   1 000024  DC80 0000 0000  xsym                 LDB,B5   G$ROS$
          1 000027  CCC5 000E                            LDB,B4   14,B5
          1 000029  CFC7 0008                            STB,B4   ECCB$,AUTO
          1 00002B  0F81 000A                            B        s:4896,PREL

     1138     4883
     1139     4884    2       CASE(ELSE);

     1140     4885    2         CALL SCREECH(SDOMAIN);

   4885   1 00002D  BB80 0000 0000  02                   LAB,B3   0
          1 000030  CBF0 0100                            LAB,B4   256,IMO
          1 000032  E380 0000 0000  xent                 LNJ,B6   SCREECH
          1 000035       0001                            DC       s:4896,PREL

     1141     4886
     1142     4887    2         END /*do case*/;

     1143     4888
     1144     4889        /*S* SCREECH_CODE: GJU-S$SSFRAME
     1145     4890             TYPE: SUA
     1146     4891             MESSAGE:  Invalid domain number in UHJIT.
     1147     4892             REMARKS:  The bad domain was detected by GJU$XCON
     1148     4893                       which expects only G_DMN_USR_SVC or G_DMN_DB_SVC.
     1149     4894        */
     1150     4895
     1151     4896    1      IF G$UHJIT.ISA_USR.TSAP$ = ADDR(NIL)

   4896   1 000036  EC80 0000 0000  xsym                 LDB,B6   G$UHJIT$
          1 000039  8DC6 007F                            CMN      127,B6
          1 00003B  0981 000C                            BNE      s:4901,PREL

     1152     4897    2      THEN DO;

PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:174  
     1153     4898    2           CALL SCREECH(SDOMAIN);

   4898   1 00003D  BB80 0000 0000  02                   LAB,B3   0
          1 000040  CBF0 0100                            LAB,B4   256,IMO
          1 000042  E380 0000 0000  xent                 LNJ,B6   SCREECH
          1 000045       0001                            DC       s:4899,PREL

     1154     4899    2           END;

   4899   1 000046  0F81 000E                            B        s:4908,PREL

     1155     4900    2      ELSE DO;

     1156     4901    2           ENVTCB_PARAMS = '0'B;

   4901   1 000048  5C1E                                 LDV,R5   30
          1 000049  0021                                 ALR      ;
          1 00004A       4178 0000                                ALPHANUM('0000'X,IMO,,1),;
          1 00004C       4007 000A                                ALPHANUM(ENVTCB_PARAMS,AUTO,,R5,FILL)

     1157     4902    2           ENVTCB_PARAMS.ENV$ = ADDR(G$UHJIT.TSA_USR);

   4902   1 00004E  DBC6 00B6                            LAB,B5   182,B6
          1 000050  437F                                 CSYNC    s:4902+1,SPREL
          1 000051  DFC7 0015                            STB,B5   ENVTCB_PARAMS+11,AUTO

     1158     4903    2           ENVTCB_PARAMS.ENVTYPE = %GUE_ENVTCB_TSA#;

   4903   1 000053  8747 0014                            CL       ENVTCB_PARAMS+10,AUTO

     1159     4904    2           END;

     1160     4905
     1161     4906        /*D* Remember exit conditions in FRS.
     1162     4907        */
     1163     4908    1      G$JIT.FRS = (G$JIT.FRS | (G$JIT.RNST & %G_RS_XCON#) );

PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:175  
   4908   1 000055  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 000058  E846 0096                            LDR,R6   150,B6
          1 00005A  E570 FFF0                            AND,R6   -16,IMO
          1 00005C  E446 003E                            OR,R6    62,B6
          1 00005E  EF46 003E                            STR,R6   62,B6

     1164     4909
     1165     4910        /*D* If this is an exit from XCON or a repeated class 2/3 abort
     1166     4911             the ECCB is reset to prevent re-entry to the user XCON routine.
     1167     4912        */
     1168     4913    1      IF G$ECCB.FLAGS.XCONP

   4913   1 000060  DCC7 0008                            LDB,B5   ECCB$,AUTO
          1 000062  89C5 000A                            CMZ      10,B5
          1 000064  0881 0013                            BAGE     s:4928,PREL

     1169     4914    1      THEN IF (G$JIT.RNST & %G_RS_MCL#) = '0000'X

   4914   1 000066  D846 0096                            LDR,R5   150,B6
          1 000068  D570 FFFC                            AND,R5   -4,IMO
          1 00006A  5981 000D                            BNEZ,R5  s:4928,PREL

     1170     4915    2           THEN DO;

     1171     4916    2   NO_XCON:     ;

   4916   1                              NO_XCON         null
     1172     4917    2                G$ECCB.FLAGS.XCONP = '0'B;

   4917   1 00006C  ECC7 0008            NO_XCON         LDB,B6   ECCB$,AUTO
          1 00006E  8846 000A                            LBF,'8000'X       10,B6
          1 000070       8000

     1173     4918    2                G$ECCB.XCON$ = ENTADDR(NIL);

   4918   1 000071  DC80 0000 0002  02                   LDB,B5   +2
          1 000074  DFC6 0004                            STB,B5   4,B6
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:176  

     1174     4919    2                GOTO XCON_EXIT;

   4919   1 000076  0F81 00B0                            B        s:4994,PREL

     1175     4920    2                END;
     1176     4921
     1177     4922        /*D* If the entry address for exit control in the ECCB is not nil,
     1178     4923             the GUE$ENVTCB routine is called to put an exit control frame
     1179     4924             on the TCB and put the user's XCON handler address in TSA.P$$.
     1180     4925             An altret to GJS$ABORTM will then cause a normal return to
     1181     4926             whoever initiated the abort logic.
     1182     4927        */
     1183     4928    1      IF (G$ECCB.XCON$ ~= ENTADDR(NIL) )

   4928   1 000078  CCC5 0004                            LDB,B4   4,B5
          1 00007A  CD80 0000 0002  02                   CMB,B4   +2
          1 00007D  0981 000A                            BNE      s:4931,PREL
          1 00007F  D2C6 008D                            LLH,R5   141,B6
          1 000081  5901 00A5                            BEZ,R5   s:4994,PREL
          1 000083  82C6 0096                            LB,'0004'X        150,B6
          1 000085       0004
          1 000086  0501 00A0                            BBT      s:4994,PREL

     1184     4929    1        OR ( (G$JIT.DB# ~= 0) AND NOT(G$JIT.RNST.LDTRC) )
     1185     4930    2      THEN DO;

     1186     4931    2           IF (G$JIT.RNST & %G_RS_CL23#)

   4931   1 000088  D846 0096                            LDR,R5   150,B6
          1 00008A  D570 FF00                            AND,R5   -256,IMO
          1 00008C  5901 0013                            BEZ,R5   s:4940,PREL

     1187     4932    3           THEN DO;

     1188     4933    3                IF (G$JIT.RNST & %G_RS_CL23#) AND G$ECCB.FLAGS.EXTD_LIM

PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:177  
   4933   1 00008E  D846 0096                            LDR,R5   150,B6
          1 000090  D570 FF00                            AND,R5   -256,IMO
          1 000092  5901 0005                            BEZ,R5   s:4936,PREL
          1 000094  82C5 000A                            LB,'2000'X        10,B5
          1 000096       2000
          1 000097  0555                                 BBT      s:4915,SPREL

     1189     4934    3                THEN GOTO NO_XCON;
     1190     4935
     1191     4936    3                G$JIT.MRT = G_XCONTIME;

   4936   1 000098  8C80 0000 0000  xsym                 LDI      G_XCONTIME
          1 00009B  8D46 0070                            SDI      112,B6

     1192     4937    3                G$ECCB.FLAGS.EXTD_LIM = '1'B;

   4937   1 00009D  8945 000A                            LBT,'2000'X       10,B5
   4937   1 00009F       2000

     1193     4938    3                END;

     1194     4939
     1195     4940    2           IF (G$JIT.DB# = 0) OR (G$JIT.JUNK.BYPASSD)

   4940   1 0000A0  E2C6 008D                            LLH,R6   141,B6
          1 0000A2  6901 0006                            BEZ,R6   s:4941,PREL
          1 0000A4  82C6 0098                            LB,'0200'X        152,B6
          1 0000A6       0200
          1 0000A7  0581 0007                            BBF      s:4942,PREL

     1196     4941    2           THEN ENVTCB_PARAMS.P$$ = G$ECCB.XCON$;

   4941   1 0000A9  CCC5 0004                            LDB,B4   4,B5
          1 0000AB  CFC7 000A                            STB,B4   ENVTCB_PARAMS,AUTO
          1 0000AD  0F81 0007                            B        s:4943,PREL

     1197     4942    2           ELSE ENVTCB_PARAMS.P$$ = ENVTCB_PARAMS.ENV$->G$TSA.P$$;
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:178  

   4942   1 0000AF  CCC7 0015                            LDB,B4   ENVTCB_PARAMS+11,AUTO
          1 0000B1  BCC4 0008                            LDB,B3   8,B4
          1 0000B3  BFC7 000A                            STB,B3   ENVTCB_PARAMS,AUTO

     1198     4943    2           G$JIT.JUNK.BYPASSD = '0'B;

   4943   1 0000B5  8846 0098                            LBF,'0200'X       152,B6
   4943   1 0000B7       0200

     1199     4944
     1200     4945    2           ENVTCB_PARAMS.ECC = %G_XCON#;

   4945   1 0000B8  5C02                                 LDV,R5   2
          1 0000B9  DF47 000C                            STR,R5   ENVTCB_PARAMS+2,AUTO

     1201     4946    2           ENVTCB_PARAMS.ECINFO.XCON.TRAP# = ENVTCB_PARAMS.ENV$->G$TSA.I.TRAP#;

   4946   1 0000BB  CCC7 0015                            LDB,B4   ENVTCB_PARAMS+11,AUTO
          1 0000BD  C2C4 0002                            LLH,R4   2,B4
          1 0000BF  C7C7 000D                            STH,R4   ENVTCB_PARAMS+3,AUTO

     1202     4947    2           ENVTCB_PARAMS.ECINFO.XCON.FLAGS.XCONP = G$ECCB.FLAGS.XCONP;

   4947   1 0000C1  C845 000A                            LDR,R4   10,B5
          1 0000C3  4048                                 SOR,R4   8
          1 0000C4  CAC7 000D                            SRM,R4,'0080'X    ENVTCB_PARAMS+3,AUTO
          1 0000C6       0080

     1203     4948    2           ENVTCB_PARAMS.ECINFO.RNST = G$JIT.RNST;

   4948   1 0000C7  C846 0096                            LDR,R4   150,B6
          1 0000C9  CF47 000E                            STR,R4   ENVTCB_PARAMS+4,AUTO

     1204     4949    2           ENVTCB_PARAMS.ECINFO.ERR = G$JIT.ERR;

   4949   1 0000CB  8CC6 003C                            LDI      60,B6
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:179  
          1 0000CD  8D47 000F                            SDI      ENVTCB_PARAMS+5,AUTO

     1205     4950    2           ENVTCB_PARAMS.ECINFO.P# = P#;

   4950   1 0000CF  BCC7 0006                            LDB,B3   @P#,AUTO
          1 0000D1  B803                                 LDR,R3   ,B3
          1 0000D2  BF47 0011                            STR,R3   ENVTCB_PARAMS+7,AUTO

     1206     4951    2           ENVTCB_PARAMS.MOREINFO$ = INFO$;

   4951   1 0000D4  ACC7 0004                            LDB,B2   @INFO$,AUTO
          1 0000D6  9C82                                 LDB,B1   ,B2
          1 0000D7  9FC7 0012                            STB,B1   ENVTCB_PARAMS+8,AUTO

     1207     4952    2           ENVTCB_PARAMS.TCB$ = ADDR(NIL);

   4952   1 0000D9  EB80 0000 0000                       LAB,B6   0
          1 0000DC  EFC7 0017                            STB,B6   ENVTCB_PARAMS+13,AUTO

     1208     4953
     1209     4954    2           CALL GUE$ENVTCB(ENVTCB_PARAMS)

   4954   1 0000DE  EBC7 000A                            LAB,B6   ENVTCB_PARAMS,AUTO
          1 0000E0  EFC7 001A                            STB,B6   ENVTCB_PARAMS+16,AUTO
          1 0000E2  BBC7 001A                            LAB,B3   ENVTCB_PARAMS+16,AUTO
          1 0000E4  CBF0 0100                            LAB,B4   256,IMO
          1 0000E6  E380 0000 0000  xent                 LNJ,B6   GUE$ENVTCB
          1 0000E9       001C                            DC       s:4974,PREL

     1210     4955    3           WHENRETURN DO;

     1211     4956    3                G$ECCB.FLAGS.TCBFULL = '0'B;

   4956   1 0000EA  ECC7 0008                            LDB,B6   ECCB$,AUTO
          1 0000EC  8846 000A                            LBF,'4000'X       10,B6
          1 0000EE       4000

PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:180  
   4956   1                              GO_XCON         null
     1212     4957    3   GO_XCON:     ;
     1213     4958    3                G$JIT.RNST = '0000'X;

   4958   1 0000EF  EC80 0000 0000  xsym GO_XCON         LDB,B6   G$JIT$
          1 0000F2  8746 0096                            CL       150,B6

     1214     4959    3                G$ECCB.FLAGS.XCONP ='1'B;

   4959   1 0000F4  DCC7 0008                            LDB,B5   ECCB$,AUTO
          1 0000F6  8945 000A                            LBT,'8000'X       10,B5
          1 0000F8       8000

     1215     4960
     1216     4961    3                IF G$JIT.DB# ~= 0

   4961   1 0000F9  E2C6 008D                            LLH,R6   141,B6
          1 0000FB  6901 0006                            BEZ,R6   s:4964,PREL

     1217     4962    3                THEN ENVTCB_PARAMS.ENV$->G$TSA.I.TRAP# = %G_FPRG_XCON#;

   4962   1 0000FD  5C3A                                 LDV,R5   58
          1 0000FE  CCC7 0015                            LDB,B4   ENVTCB_PARAMS+11,AUTO
          1 000100  D7C4 0002                            STH,R5   2,B4

     1218     4963
     1219     4964    3                ALTRETURN;

   4964   1 000102  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

     1220     4965    3                END;
     1221     4966
     1222     4967        /*D* When there is no room on the TCB, the exit control frame will be
     1223     4968             placed in the TCB's ALTRET frame and the TCBFULL bit will be set
     1224     4969             in the ECCB.  If this condition should occur again, i.e. a trap
     1225     4970             in the user's exit control logic, exit control will not be
     1226     4971             re-entered.
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:181  
     1227     4972        */
     1228     4973    3           WHENALTRETURN DO;

     1229     4974    3                IF G$ECCB.FLAGS.TCBFULL= '1'B

   4974   1 000105  ECC7 0008                            LDB,B6   ECCB$,AUTO
          1 000107  82C6 000A                            LB,'4000'X        10,B6
          1 000109       4000
          1 00010A  0581 0004                            BBF      s:4977,PREL

     1230     4975    3                THEN RETURN;

   4975   1 00010C  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

     1231     4976
     1232     4977    3                ENVTCB_PARAMS.ECC = %G_TCBFULL#;

   4977   1 00010F  6C62                                 LDV,R6   98
          1 000110  EF47 000C                            STR,R6   ENVTCB_PARAMS+2,AUTO

     1233     4978    3                CALL GUE$ENVTCB(ENVTCB_PARAMS)

   4978   1 000112  DBC7 000A                            LAB,B5   ENVTCB_PARAMS,AUTO
          1 000114  DFC7 001A                            STB,B5   ENVTCB_PARAMS+16,AUTO
          1 000116  BBC7 001A                            LAB,B3   ENVTCB_PARAMS+16,AUTO
          1 000118  CBF0 0100                            LAB,B4   256,IMO
          1 00011A  E380 0000 0000  xent                 LNJ,B6   GUE$ENVTCB
          1 00011D       0007                            DC       s:4984,PREL

     1234     4979    4                WHENRETURN DO;

     1235     4980    4                     G$ECCB.FLAGS.TCBFULL = '1'B;

   4980   1 00011E  ECC7 0008                            LDB,B6   ECCB$,AUTO
          1 000120  8946 000A                            LBT,'4000'X       10,B6
          1 000122       4000

PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:182  
     1236     4981    4                     GOTO GO_XCON;

   4981   1 000123  0FCC                                 B        s:4956,SPREL

     1237     4982    4                     END;
     1238     4983    4                WHENALTRETURN DO;

     1239     4984    4                     RETURN;

   4984   1 000124  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

     1240     4985    4                     END;
     1241     4986
     1242     4987    3                END;
     1243     4988
     1244     4989    2           END;
     1245     4990
     1246     4991        /*D* If the user has not requested XCON (or this is an XCON exit)
     1247     4992             JIT.RNST is reset and GJU$XCON returns to GJS$ABORTM.
     1248     4993        */
     1249     4994    2      ELSE DO;

   4989   1                              XCON_EXIT       null
     1250     4995
     1251     4996    2   XCON_EXIT: ;
     1252     4997    2           G$JIT.RNST = (G$JIT.RNST | (G$JIT.FRS & %G_RS_XCON#) );

   4997   1 000127  EC80 0000 0000  xsym XCON_EXIT       LDB,B6   G$JIT$
          1 00012A  E846 003E                            LDR,R6   62,B6
          1 00012C  E570 FFF0                            AND,R6   -16,IMO
          1 00012E  E446 0096                            OR,R6    150,B6
          1 000130  EF46 0096                            STR,R6   150,B6

     1253     4998    2           END;

     1254     4999
     1255     5000    1   END GJU$XCON;
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:183  

   5000   1 000132  C380 0000 0000  xent                 LNJ,B4   X6A_ARET
     1256     5001        %EOD;

PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:184  
--  Include file information  --

   J_SCODE_C.:E05TOU  is referenced.
   G_HJIT_M.:E05TOU  is referenced.
   G_JIT_M.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   GU_MACROS_M.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GJU$XCON.
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:185  

 **** Variables and constants ****

  ****  Section 000 RoData GJU$XCON

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(48)    r     1 SDOMAIN

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @INFO$                     6-0-0/w PTR         r     1 @P#
     8-0-0/w PTR         r     1 ECCB$                      A-0-0/w STRC(240)   r     1 ENVTCB_PARAMS
    *0-0-0/w PTR         r     1 INFO$                     *0-0-0/w UBIN(16)    r     1 P#

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 G$JIT$                     0-0-0/w PTR         r     1 G$ROS$
     0-0-0/w PTR         r     1 G$UHJIT$                   0-0-0/w UBIN(32)    r     1 G_XCONTIME

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(224)   r     1 G$ECCB                     0-0-0/w STRC(5616)  r     1 G$JIT
     0-0-0/w STRC(928)   r     1 G$ROS                      0-0-0/w STRC(928)   r     1 G$TSA
     0-0-0/w STRC(6480)  r     1 G$UHJIT

PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:186  

   Procedure GJU$XCON requires 309 words for executable code.
   Procedure GJU$XCON requires 28 words of local(AUTO) storage.
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:187  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:188  
          MINI XREF LISTING

ECCB$
       704**DCL      1692--IMP-PTR  4879<<ASSIGN   4882<<ASSIGN   4913>>IF       4917>>ASSIGN   4918>>ASSIGN
      4928>>IF       4933>>IF       4937>>ASSIGN   4941>>ASSIGN   4947>>ASSIGN   4956>>ASSIGN   4959>>ASSIGN
      4974>>IF       4980>>ASSIGN
ENVTCB_PARAMS
       706**DCL      4901<<ASSIGN   4954<>CALL     4978<>CALL
ENVTCB_PARAMS.ECC
       706**DCL      4945<<ASSIGN   4977<<ASSIGN
ENVTCB_PARAMS.ECINFO.ERR
       792**DCL      4949<<ASSIGN
ENVTCB_PARAMS.ECINFO.EVID
       749**DCL       767--REDEF     775--REDEF     775--REDEF
ENVTCB_PARAMS.ECINFO.P#
       822**DCL      4950<<ASSIGN
ENVTCB_PARAMS.ECINFO.RNST
       767**DCL      4948<<ASSIGN
ENVTCB_PARAMS.ECINFO.SUBC
       726**DCL       726--REDEF     744--REDEF     748--REDEF     748--REDEF
ENVTCB_PARAMS.ECINFO.XCON.FLAGS.XCONP
       749**DCL      4947<<ASSIGN
ENVTCB_PARAMS.ECINFO.XCON.TRAP#
       749**DCL      4946<<ASSIGN
ENVTCB_PARAMS.ENV$
       824**DCL      4902<<ASSIGN   4942>>ASSIGN   4946>>ASSIGN   4962>>ASSIGN
ENVTCB_PARAMS.ENVTYPE
       824**DCL      4903<<ASSIGN
ENVTCB_PARAMS.MOREINFO$
       824**DCL      4951<<ASSIGN
ENVTCB_PARAMS.P$$
       706**DCL       706--REDEF    4941<<ASSIGN   4942<<ASSIGN
ENVTCB_PARAMS.TCB$
       824**DCL      4952<<ASSIGN
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:189  
G$ECCB.FLAGS.EXTD_LIM
      1703**DCL      4933>>IF       4937<<ASSIGN
G$ECCB.FLAGS.TCBFULL
      1703**DCL      4956<<ASSIGN   4974>>IF       4980<<ASSIGN
G$ECCB.FLAGS.XCONP
      1703**DCL      4913>>IF       4917<<ASSIGN   4947>>ASSIGN   4959<<ASSIGN
G$ECCB.FLTFLG
      1721**DCL      1752--REDEF
G$ECCB.XCON$
      1698**DCL      4918<<ASSIGN   4928>>IF       4941>>ASSIGN
G$JIT.DB#
      1459**DCL      4928>>IF       4940>>IF       4961>>IF
G$JIT.ERR
      1366**DCL      4949>>ASSIGN
G$JIT.ERRLOG
      1608**DCL      1611--REDEF
G$JIT.FRS
      1417**DCL      4908<<ASSIGN   4908>>ASSIGN   4997>>ASSIGN
G$JIT.JSUNIT
      1347**DCL      1348--REDEF
G$JIT.JUNK.BYPASSD
      1600**DCL      4940>>IF       4943<<ASSIGN
G$JIT.MCLS
      1346**DCL      1346--REDEF
G$JIT.MRT
      1447**DCL      4936<<ASSIGN
G$JIT.RNST
      1578**DCL      4908>>ASSIGN   4914>>IF       4931>>IF       4933>>IF       4948>>ASSIGN   4958<<ASSIGN
      4997<<ASSIGN   4997>>ASSIGN
G$JIT.RNST.LDTRC
      1583**DCL      4928>>IF
G$JIT.TMRZ
      1615**DCL      1616--REDEF
G$JIT.USER_EXTIME
      1339**DCL      1340--REDEF
G$JIT.USER_MEMTIME
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:190  
      1342**DCL      1342--REDEF
G$JIT.USER_SVTIME
      1341**DCL      1341--REDEF
G$JIT$
      4731**DCL      1278--IMP-PTR  4908>>ASSIGN   4908>>ASSIGN   4908>>ASSIGN   4914>>IF       4928>>IF
      4928>>IF       4931>>IF       4933>>IF       4936>>ASSIGN   4940>>IF       4940>>IF       4943>>ASSIGN
      4948>>ASSIGN   4949>>ASSIGN   4958>>ASSIGN   4961>>IF       4997>>ASSIGN   4997>>ASSIGN   4997>>ASSIGN
G$ROS.AUTO_DS$
      1243**DCL      1244--REDEF
G$ROS.AUTO_T$
      1244**DCL      1244--REDEF
G$ROS.DB_ECCB$
      1241**DCL      4882>>ASSIGN
G$ROS.U_ECCB$
      1241**DCL      4879>>ASSIGN
G$ROS$
      4730**DCL      1234--IMP-PTR  4879>>ASSIGN   4882>>ASSIGN
G$TSA.I.TRAP#
       883**DCL      4946>>ASSIGN   4962<<ASSIGN
G$TSA.ISA.P$$
      1020**DCL      1020--REDEF
G$TSA.P$$
       891**DCL       891--REDEF     892--REDEF    4942>>ASSIGN
G$UHJIT.DMN.ID
      3489**DCL      4877>>DOCASE
G$UHJIT.ISA_USR
      3194**DCL      3489--REDEF
G$UHJIT.ISA_USR.P$$
      3269**DCL      3269--REDEF
G$UHJIT.ISA_USR.TSAP$
      3196**DCL      4896>>IF
G$UHJIT.TSA_CP.ISA.P$$
      4476**DCL      4476--REDEF
G$UHJIT.TSA_CP.P$$
      4347**DCL      4347--REDEF    4348--REDEF
G$UHJIT.TSA_DB.ISA.P$$
PL6.E3A0      #003=GJU$XCON File=GJU$UTIL.:E05TSI                                TUE 07/29/97 22:10 Page:191  
      4088**DCL      4088--REDEF
G$UHJIT.TSA_DB.P$$
      3959**DCL      3959--REDEF    3960--REDEF
G$UHJIT.TSA_RTT.P$$
      4722**DCL      4722--REDEF    4723--REDEF
G$UHJIT.TSA_USR
      3519**DCL      4902--ASSIGN
G$UHJIT.TSA_USR.ISA.P$$
      3678**DCL      3678--REDEF
G$UHJIT.TSA_USR.P$$
      3549**DCL      3549--REDEF    3550--REDEF
G$UHJIT$
      4732**DCL      1771--IMP-PTR  4877>>DOCASE   4896>>IF       4902>>ASSIGN
GO_XCON
      4956**LABEL    4981--GOTO
GUE$ENVTCB
      4736**DCL-ENT  4954--CALL     4978--CALL
G_XCONTIME
      4733**DCL      4936>>ASSIGN
INFO$
       701**DCL        14--PROC     4951>>ASSIGN
NO_XCON
      4916**LABEL    4934--GOTO
P#
       702**DCL        14--PROC     4950>>ASSIGN
SCREECH
      4737**DCL-ENT  4885--CALL     4898--CALL
SDOMAIN
      4768**DCL      4885<>CALL     4898<>CALL
XCON_EXIT
      4989**LABEL    4919--GOTO

PL6.E3A0      #004=GJU$EVENT File=GJU$UTIL.:E05TSI                               TUE 07/29/97 22:11 Page:192  
     1257        1        /*T***********************************************************/
     1258        2        /*T*                                                         */
     1259        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1260        4        /*T*                                                         */
     1261        5        /*T***********************************************************/
     1262        6        /*D* NAME: GJU$EVENT
     1263        7             PURPOSE: This routine handles the events that come in from
     1264        8                      the host monitor.
     1265        9         */
     1266       10
     1267       11        GJU$EVENT: PROC (USER,GJ_FCN_MSG);
     1268       12
     1269       13        /* Include files */
     1270       14        %INCLUDE GJ_MSG_M;
     1271      327        %INCLUDE GH_SCHD_E;
     1272      423 S      %INCLUDE GU_LCP6_M;
     1273      424
     1274      425        /* Parameters */
     1275      426    1   DCL USER UBIN;                          /* User number              */
     1276      427        %GJ_FCN_MSG (STCLASS="");
     1277      497
     1278      498        /* Entrys */
     1279      499    1   DCL GHS$RUE ENTRY(4) ALTRET;
     1280      500
     1281      501        /* Equate */
     1282      502        %GJ_FCN#;
     1283      528
     1284      529
     1285      530    2      DO CASE (GJ_FCN_MSG.FCN);
     1286      531
     1287      532    2       CASE (%GJ_WAKEDB#);
     1288      533    2         CALL GHS$RUE (%GH_EVALIBFD,USER);
     1289      534
     1290      535    2       CASE(%GJ_RTNFID#);
     1291      536    2         CALL GHS$RUE (%GH_EVALIBFD,USER,GJ_FCN_MSG);
     1292      537    2         END;
     1293      538
PL6.E3A0      #004=GJU$EVENT File=GJU$UTIL.:E05TSI                               TUE 07/29/97 22:11 Page:193  
     1294      539    1      RETURN;
     1295      540
     1296      541    1   END GJU$EVENT;

PL6.E3A0      #004=GJU$EVENT File=GJU$UTIL.:E05TSI                               TUE 07/29/97 22:11 Page:194  
--  Include file information  --

   GH_SCHD_E.:E05TOU  is referenced.
   GJ_MSG_M.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is never referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure GJU$EVENT.

   Procedure GJU$EVENT requires 60 words for executable code.
   Procedure GJU$EVENT requires 14 words of local(AUTO) storage.

    No errors detected in file GJU$UTIL.:E05TSI    .

PL6.E3A0      #004=GJU$EVENT File=GJU$UTIL.:E05TSI                               TUE 07/29/97 22:11 Page:195  

 Object Unit name= GJU$EVENT                                  File name= GJU$UTIL.:E05TOU
 UTS= JUL 29 '97 22:11:49.92 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Proc  even  none    60     3C  GJU$EVENT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        2  GJU$EVENT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       4 GHS$RUE
                       nStd      0 X6A_AUTO_2
                       nStd      0 X6A_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    G$ROS$
PL6.E3A0      #004=GJU$EVENT File=GJU$UTIL.:E05TSI                               TUE 07/29/97 22:11 Page:196  


     1257        1        /*T***********************************************************/
     1258        2        /*T*                                                         */
     1259        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1260        4        /*T*                                                         */
     1261        5        /*T***********************************************************/
     1262        6        /*D* NAME: GJU$EVENT
     1263        7             PURPOSE: This routine handles the events that come in from
     1264        8                      the host monitor.
     1265        9         */
     1266       10
     1267       11        GJU$EVENT: PROC (USER,GJ_FCN_MSG);

     11   0 000000  D380 0000 0000  xent GJU$EVENT       LNJ,B5   X6A_AUTO_2
          0 000003       000E 0002                       DC       14,2

     1268       12
     1269       13        /* Include files */
     1270       14        %INCLUDE GJ_MSG_M;
     1271      327        %INCLUDE GH_SCHD_E;
     1272      423 S      %INCLUDE GU_LCP6_M;
     1273      424
     1274      425        /* Parameters */
     1275      426    1   DCL USER UBIN;                          /* User number              */
     1276      427        %GJ_FCN_MSG (STCLASS="");
     1277      497
     1278      498        /* Entrys */
     1279      499    1   DCL GHS$RUE ENTRY(4) ALTRET;
     1280      500
     1281      501        /* Equate */
     1282      502        %GJ_FCN#;
     1283      528
     1284      529
     1285      530    2      DO CASE (GJ_FCN_MSG.FCN);

    530   0 000005  ECC7 0006                            LDB,B6   @GJ_FCN_MSG,AUTO
          0 000007  B286                                 LLH,R3   ,B6
PL6.E3A0      #004=GJU$EVENT File=GJU$UTIL.:E05TSI                               TUE 07/29/97 22:11 Page:197  
          0 000008  3EEF                                 ADV,R3   -17
          0 000009  3D03                                 CMV,R3   3
          0 00000A  0281 002E                            BGE      s:539,PREL
          0 00000C  A830 0000 0012  00                   LDR,R2   s:530+13,R3
          0 00000F  83A0 0000 0015  00                   JMP      s:533,R2
          0 000012       0000                            DC       s:533,PREL
          0 000013       0024                            DC       s:539,PREL
          0 000014       0012                            DC       s:536,PREL

     1286      531
     1287      532    2       CASE (%GJ_WAKEDB#);

     1288      533    2         CALL GHS$RUE (%GH_EVALIBFD,USER);

    533   0 000015  DBF0 0012                            LAB,B5   18,IMO
          0 000017  CCC7 0004                            LDB,B4   @USER,AUTO
          0 000019  CFC7 000A                            STB,B4   @GJ_FCN_MSG+4,AUTO
          0 00001B  DFC7 0008                            STB,B5   @GJ_FCN_MSG+2,AUTO
          0 00001D  BBC7 0008                            LAB,B3   @GJ_FCN_MSG+2,AUTO
          0 00001F  CBF0 0200                            LAB,B4   512,IMO
          0 000021  E380 0000 0000  xent                 LNJ,B6   GHS$RUE
          0 000024       0001                            DC       s:533+16,PREL
          0 000025  0F81 0013                            B        s:539,PREL

     1289      534
     1290      535    2       CASE(%GJ_RTNFID#);

     1291      536    2         CALL GHS$RUE (%GH_EVALIBFD,USER,GJ_FCN_MSG);

    536   0 000027  DBF0 0012                            LAB,B5   18,IMO
          0 000029  EFC7 000C                            STB,B6   @GJ_FCN_MSG+6,AUTO
          0 00002B  CCC7 0004                            LDB,B4   @USER,AUTO
          0 00002D  CFC7 000A                            STB,B4   @GJ_FCN_MSG+4,AUTO
          0 00002F  DFC7 0008                            STB,B5   @GJ_FCN_MSG+2,AUTO
          0 000031  BBC7 0008                            LAB,B3   @GJ_FCN_MSG+2,AUTO
          0 000033  CBF0 0300                            LAB,B4   768,IMO
          0 000035  E380 0000 0000  xent                 LNJ,B6   GHS$RUE
PL6.E3A0      #004=GJU$EVENT File=GJU$UTIL.:E05TSI                               TUE 07/29/97 22:11 Page:198  
          0 000038       0001                            DC       s:539,PREL

     1292      537    2         END;

     1293      538
     1294      539    1      RETURN;

    539   0 000039  C380 0000 0000  xent                 LNJ,B4   X6A_ARET
     1295      540
     1296      541    1   END GJU$EVENT;

PL6.E3A0      #004=GJU$EVENT File=GJU$UTIL.:E05TSI                               TUE 07/29/97 22:11 Page:199  
--  Include file information  --

   GH_SCHD_E.:E05TOU  is referenced.
   GJ_MSG_M.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is never referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure GJU$EVENT.
PL6.E3A0      #004=GJU$EVENT File=GJU$UTIL.:E05TSI                               TUE 07/29/97 22:11 Page:200  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/w PTR         r     1 @GJ_FCN_MSG                4-0-0/w PTR         r     1 @USER
    *0-0-0/w STRC(48)    r     1 GJ_FCN_MSG                *0-0-0/w UBIN(16)    r     1 USER


   Procedure GJU$EVENT requires 60 words for executable code.
   Procedure GJU$EVENT requires 14 words of local(AUTO) storage.

    No errors detected in file GJU$UTIL.:E05TSI    .
PL6.E3A0      #004=GJU$EVENT File=GJU$UTIL.:E05TSI                               TUE 07/29/97 22:11 Page:201  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=GJU$EVENT File=GJU$UTIL.:E05TSI                               TUE 07/29/97 22:11 Page:202  
          MINI XREF LISTING

GHS$RUE
       499**DCL-ENT   533--CALL      536--CALL
GJ_FCN_MSG
       440**DCL        11--PROC      536<>CALL
GJ_FCN_MSG.FCN
       440**DCL       530>>DOCASE
USER
       426**DCL        11--PROC      533<>CALL      536<>CALL
