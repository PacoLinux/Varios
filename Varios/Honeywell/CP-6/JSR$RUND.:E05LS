VERSION E05

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:1    
        1        1        /*M*   JSR$RUND   USER RUNDOWN PROCEDURES   */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ECU=0,ENU=0  */
        8        8        JSR$RUNDOWN: PROC ALTRET;
        9        9        /**/
       10       10    1   DCL I SBIN;
       11       11    1   DCL WSR SBIN;
       12       12    1   DCL MAXECCB SBIN;
       13       13    1   DCL CPFLAGS BIT(36);
       14       14    1   DCL TPTR$ PTR;
       15       15    1   DCL ACCT_TYP UBIN BYTE;
       16       16
       17       17    1   DCL S_CUN UBIN SYMREF;                  /* Current user number                */
       18       18    1   DCL S_TDCPUF UBIN SYMREF;
       19       19    1   DCL IRM_SYSID UBIN SYMREF;
       20       20    1   DCL ES_STEPPRIVMASK BIT(36) SYMREF;
       21       21        /**/
       22       22    1   DCL FMF$TRUNCM ENTRY(1);
       23       23    1   DCL FMP$UDLIST ENTRY(2) ALTRET;
       24       24    1   DCL JSF$CLSDCBS ENTRY;             /* Routine to close all dcbs except M$UC   */
       25       25    1   DCL JSF$CLSLM ENTRY;                    /* Routine to close M$LM              */
       26       26    1   DCL JSU$RSTLMS ENTRY;              /* Routine to reset jit memory delimiters  */
       27       27    1   DCL JSU$RELMEM ENTRY(1);           /* Routine to free isr & data seg pages    */
       28       28    1   DCL JLS$CLEANUP ENTRY ALTRET;           /* Cleanup after ldlnk abort          */
       29       29    1   DCL JSU$RELFSEG ENTRY;                  /* Routine to release buffer segment  */
       30       30    1   DCL JSU$DECRUC ENTRY;         /* Routine to decrement uc for assoc. Procs     */
       31       31    1   DCL JSU$WSTAR ENTRY(1);            /* Routine to write acct records to *S     */
       32       32    1   DCL MMG$SFVP ENTRY(5) ALTRET;           /* Seg-relative free virtual page     */
       33       33    1   DCL MMB$FPP ENTRY(1) ALTRET;
       34       34    1   DCL HFC$ASSOCCLR ENTRY (3);
       35       35    1   DCL UQB$DELUSER ENTRY ALTRET;
       36       36    1   DCL UMD$CLSDRIB ENTRY ALTRET;
       37       37    1   DCL JSN$1SSSF ENTRY;
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:2    
       38       38    1   DCL UDN$MAGIC ENTRY;
       39       39    1   DCL JSN$SETASR ENTRY(1);
       40       40    1   DCL KIP$RPET ENTRY;                     /* Reset terminal info                */
       41       41    1   DCL SSV$DORUND ENTRY(1);
       42       42    1   DCL SSQ$NUQUAN ENTRY ALTRET;
       43       43    1   DCL SSC$MON ENTRY;                      /* Switch to monitor running          */
       44       44    1   DCL SSC$SERV ENTRY;                     /* Switch to user service             */
       45       45    1   DCL SSR$REG ENTRY(3) ALTRET;
       46       46    1   DCL TDP$RSETCPU ENTRY;
       47       47    1   DCL M$MRELRES ENTRY(1) ALTRET;
       48       48    1   DCL SC_FMRUND ENTRY CONV(2,0);
       49       49
       50       50        %INCLUDE B_SEGIDS_C;                    /* System segid definitions           */
       51      589        %INCLUDE B_LSDATA_C;
       52     3795        %INCLUDE JG_GHOSTS_C;
       53     3885
       54     3886    1   DCL B$JIT$ PTR SYMREF READONLY;
       55     3887    1   DCL B$M$UC$ PTR SYMREF READONLY;
       56     3888    1   DCL B$M$LM$ PTR SYMREF READONLY;
       57     3889    1   DCL B$ROSEG$ PTR SYMREF READONLY;
       58     3890    1   DCL B$DBLS$ PTR SYMREF READONLY;
       59     3891    1   DCL B$ASLLS$ PTR SYMREF READONLY;
       60     3892    1   DCL B$USERLS$ PTR SYMREF READONLY;
       61     3893    1   DCL B$UPT$ PTR SYMREF READONLY;
       62     3894    1   DCL B$IPHYMAP$ PTR SYMREF READONLY;
       63     3895
       64     3896        %INCLUDE B$JIT;
       65     4499        %INCLUDE F_CP6;
       66     5524        %FPT_RESCTL (FPTN=J_FPT_RESCTL,STCLASS=SYMREF);
       67     5541        %FPT_RESCTL (FPTN=FPT$RESCTL,STCLASS=AUTO);
       68     5558        %VLP_PSEUDO (FPTN=VLP$PS,STCLASS=AUTO,N=1);
       69     5574
       70     5575        %INCLUDE B$ROSEG;                       /* Read-only segment definitions      */
       71     5638        %INCLUDE B$USER;                        /* User table definitions             */
       72     5854        %B$USERREFS;
       73     5858        %INCLUDE MM_DATA_R;
       74     6378        %INCLUDE HF_DATA_R;
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:3    
       75     6421        %INCLUDE SS_SCHED_C;
       76     6654        %INCLUDE UE_CP6;
       77     7345        %INCLUDE CP_6_SUBS;
       78     7885        %INCLUDE B$MAP;
       79     7984        %INCLUDE FM$MACROS;
       80     8359        %FM$SET(BASED="BASED(FM$SET$)");
       81     8364        %FM$CFUX;
       82     8369        %B$ECCB;
       83     8377    1   DCL FM$SET$ PTR SYMREF;
       84     8378    1   DCL F$CFU$ PTR SYMREF;
       85     8379    1   DCL J_CRASHUN SBIN SYMREF;
       86     8380    1   DCL J_ASR_E BIT(72) SYMREF READONLY DALIGNED;
       87     8381
       88     8382    1   DCL APTR$(0:0) PTR BASED;
       89     8383        %SUB   B$JIT=B$JIT$->B$JIT;
       90     8384        %SUB   B$ROSEG=B$ROSEG$->B$ROSEG;
       91     8385
       92     8386        %LIST;
       93     8387        %INIT_RO_SIZE;                          /* Get 'INITROSIZE' from B$ROSEG      */
              8388        %SUB   INITROSIZE ="(POFFW(B$ROSEG$->B$ROSEG.DCBPTR$,B$ROSEG$)+%M$1STDCB#)";
       94     8390        %PLIST;
       95     8391
       96     8392        %EJECT;
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:4    
       97     8393        /**/
       98     8394        /* Procedures internal to this MODULE...                           */
       99     8395        /**/
      100     8396    1   INIT_ROSEG: PROC;             /* Procedure to initialize the read-only seg    */
      101     8397    2   DCL ROPGS SBIN;
      102     8398    2   DCL ERR_DUMMY REDEF ROPGS SBIN;
      103     8399    2   DCL NDCBS SBIN BASED ALIGNED;
      104     8400    2   DCL BPTR$ PTR BASED ALIGNED;
      105     8401        /**/
      106     8402    2      CALL UMD$CLSDRIB;
      107     8403    2      B$ROSEG.TREE$ = ADDR(NIL);           /* Reset tree pointer                 */
      108     8404        /*     Reset available space pointer                               */
      109     8405    2      B$ROSEG.AVAIL$ = PINCRW(B$ROSEG$,INITROSIZE%+%IBEX_DCBS#);
      110     8406        /* Reset the # of dcb slots to # of system dcbs + ibex's free slots */
      111     8407    2      B$ROSEG.NUMDCBS = %SYS_DCBS# + %IBEX_DCBS#;
      112     8408    3      DO I = 5 TO B$ROSEG.NUMDCBS;         /* NIL out all non-initial DCB ptrs   */
      113     8409    3           PINCRW(B$ROSEG.DCBPTR$,I)->BPTR$ = ADDR(NIL);
      114     8410    3           END;
      115     8411    2      IF B$JIT.PCROS > 1
      116     8412    3      THEN DO;                             /* Free all but inital roseg page     */
      117     8413    3           ROPGS = B$JIT.PCROS - 1;
      118     8414    3           CALL MMG$SFVP(%USERWSQ,BITBIN(%ROSID),ROPGS,ROPGS,ERR_DUMMY)
      119     8415    3             ALTRET(XX);
      120     8416    3   XX:     ;
      121     8417    3           END;
      122     8418        /* Reset the roseg avail space header */
      123     8419    2      B$ROSEG.AVAIL$->B$ROAVAIL.NEXT$  = ADDR(NIL);
      124     8420    2      B$ROSEG.AVAIL$->B$ROAVAIL.NWORDS = 1024 - (INITROSIZE% + %IBEX_DCBS#);
      125     8421        /*
      126     8422           Now, set the user tcb descriptor null, and reset the software
      127     8423           descriptor flag for the eccb descriptor (used by delta).
      128     8424        */
      129     8425           %SETNULL (LS$ = B$USERLS$ , SEGID = %TCBSID);
      130     8428           %RSETFLG (LS$ = B$USERLS$ , SEGID = %ECCBSID , FLG = %DSXXX);
      131     8431    2   END INIT_ROSEG;
      132     8432        %EJECT;
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:5    
      133     8433        /*F*   NAME: JSR$RUNDOWN                                           */
      134     8434        /*F*   PURPOSE: To strip a user down to his basic context.         */
      135     8435    1      IF B$JIT.RNST >= %RS_ABRT#
      136     8436    2      THEN DO;                             /* Do if some type of monitor abort   */
      137     8437    2           IF S_CUN = J_CRASHUN            /* If this guy got aborted FROM...*/
      138     8438    3           THEN DO;                        /* Rundown, then he's too DAMAGED...*/
      139     8439    3                J_CRASHUN = 0;             /* To run, so kick him off.           */
      140     8440    3                ALTRETURN;                 /* (by calling JSD$ZAPUSER on altret) */
      141     8441    3                END;
      142     8442    2           ELSE J_CRASHUN = S_CUN;         /* 1st time thru abort                */
      143     8443    2           END;
      144     8444
      145     8445    1      S$CU$->B$U.FLG = S$CU$->B$U.FLG | %U_STIP;
      146     8446    1      IF (S_CUN > JG_MING#) AND (S_CUN = S_TDCPUF)
      147     8447    1      THEN CALL TDP$RSETCPU;
      148     8448    1      CALL JSU$DECRUC;                     /* Decrement use count for procs      */
      149     8449    1      S$CU$->B$U.APR = 0;
      150     8450    1      S$CU$->B$U.APO = 0;
      151     8451    1      S$CU$->B$U.ASP = 0;
      152     8452    1      S$CU$->B$U.ASL = 0;
      153     8453
      154     8454    1      IF ((B$JIT.JUNK & %JJ_MLINKIP#) OR (B$JIT.JUNK & %JJ_LNKRETIP#))
      155     8455    2      THEN DO;
      156     8456    2           MAXECCB = 1;
      157     8457    2           B$JIT.JUNK = B$JIT.JUNK & (%JJ_MLINKIP#
      158     8458    2             | %JJ_LNKRETIP#
      159     8459    2             | %JJ_RTNXIT#
      160     8460    2             | %JJ_UDELTA#
      161     8461    2             | %JJ_MONLINK#);
      162     8462    2           END;
      163     8463    2      ELSE DO;
      164     8464    2           IF (B$JIT.CPFLAGS1 & %CP_KEEPDS#)
      165     8465    3           THEN DO;
      166     8466    3                MAXECCB=2;
      167     8467    3                TPTR$ = ADDR(B$ROSEG.ECCB(3));
      168     8468    3                TPTR$->B$ECCB.XCONF = '000'O;
      169     8469    3                END;
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:6    
      170     8470    2           ELSE MAXECCB=3;
      171     8471    2           B$JIT.JUNK = '0'B;
      172     8472    2           B$DBLS$->B$ULNK.IS.BOUND = 0;
      173     8473    2           B$DBLS$->B$ULNK.IS.BASE = 0;
      174     8474    2           END;
      175     8475    1      B$ASLLS$->B$ULNK.IS.BOUND = 0;
      176     8476    1      B$ASLLS$->B$ULNK.IS.BASE = 0;
      177     8477    1      B$USERLS$->B$ULNK.ASLENT.ENTLOC = BITBIN('777777'O);
      178     8478    1      CALL SSC$MON;
      179     8479    1      CALL SSQ$NUQUAN;                     /* Give new quantum for new mode      */
      180     8480    1      CALL SSC$SERV;
      181     8481    1      IF B$JIT.SPEAK > B$JIT.JPEAK
      182     8482    1      THEN B$JIT.JPEAK = B$JIT.SPEAK;
      183     8483    1      IF B$JIT.SRESPEAK > B$JIT.JRESPEAK
      184     8484    1      THEN B$JIT.JRESPEAK = B$JIT.SRESPEAK;
      185     8485    1      B$JIT.RUNFLAGS = %RUN_MON#;          /* Set 'MONITOR RUNNING'              */
      186     8486
      187     8487        /* If this is LINKING, JSF$CLSDCBS/JSU$TRUNCDCBS have already been
      188     8488           called, thus running down all I/O except (if TRUNCDCBS wasn't
      189     8489           called) that on M$UC.  If this is not LINKING, nothing has
      190     8490           been done.  Hence for both we blow away comm. I/O on M$UC.  */
      191     8491    1      B$JIT.DCB$=B$M$UC$;
      192     8492    1      CALL FMF$TRUNCM (0);
      193     8493
      194     8494        /* If this isn't a load-and-link rundown, then close all dcb's     */
      195     8495        /* And dequeue any outstanding enq's for this user.                */
      196     8496    1      IF NOT (B$JIT.JUNK & %JJ_MLINKIP#)
      197     8497    2      THEN DO;
      198     8498    2           CALL JSF$CLSDCBS;               /* Close all dcbs but uc & lm         */
      199     8499    2           B$ROSEG.DCBPTR$->APTR$(%M$LM#) = B$M$LM$;
      200     8500    2           CALL JSF$CLSLM;                 /* Close M$LM too                     */
      201     8501    2           B$JIT.PRFLAGS.NOSCAN = '0'B;
      202     8502    2           IF NOT (B$JIT.JUNK & %JJ_LNKRETIP#)
      203     8503    2           THEN CALL UQB$DELUSER;
      204     8504
      205     8505        /* The following check is to help jack debug file mgmt. When he says */
      206     8506        /* so, it can be removed.                                            */
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:7    
      207     8507    2           IF B$JIT.SYSID = IRM_SYSID THEN GOTO NO_SNAP;
      208     8508                                                /* Dont bother if already dumped      */
      209     8509    3           DO I = %FMSEGLO TO %FMSEGHI;
      210     8510    3                IF B$UPT$->B$MAP.RPN(I) ~= MM_FPMC.RPN
      211     8511    4                THEN DO;
      212     8512        /*S*   SCREECH_CODE: JSR-S$FMRUND                                  */
      213     8513        /*S*   TYPE:   SNAP                                                */
      214     8514        /*S*   MESSAGE: All file management buffers not released at rundown. */
      215     8515    4                     CALL SC_FMRUND;
      216     8516    4                     CALL JSU$RELFSEG;
      217     8517    4                     GOTO NO_SNAP;
      218     8518    4                     END;
      219     8519    3                END;
      220     8520    2   NO_SNAP: ;
      221     8521    2           END;
      222     8522
      223     8523
      224     8524    1      IF (B$JIT.RNST & %RS_DROP#)  = '000'O
      225     8525    2      THEN DO;
      226     8526    2           CPFLAGS = B$JIT.CPFLAGS1;
      227     8527    2           B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1 & %(~CP_DRIBBLE#);
      228     8528    2           CALL KIP$RPET;
      229     8529    2           B$JIT.CPFLAGS1 = CPFLAGS;
      230     8530    2           END;
      231     8531
      232     8532    1      B$JIT.DO$=ADDR(NIL);
      233     8533
      234     8534        /* Free all user pages in isr and all data segments except the cp's. */
      235     8535    1      CALL JSU$RELMEM(0);
      236     8536    1      CALL INIT_ROSEG;                     /* Initialize the read-only segment   */
      237     8537    1      CALL JSU$RSTLMS;                     /* Reset jit memory delimiters        */
      238     8538
      239     8539        /* Release any pseudo resources that Job Step acquired for this
      240     8540           user when the run-unit was put into execution.  If M$LINK is in
      241     8541           progress, the count will have been set to zero so they won't get
      242     8542           released here.
      243     8543        */
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:8    
      244     8544    1      IF B$JIT.PSEUDO_COUNT ~= 0
      245     8545    2      THEN DO;
      246     8546    2           FPT$RESCTL = J_FPT_RESCTL;
      247     8547    2           FPT$RESCTL.V_ = VECTOR(FPT$RESCTL.V);
      248     8548    2           FPT$RESCTL.PSEUDO_ = VECTOR(VLP$PS);
      249     8549    2           VLP$PS = '0'B;
      250     8550    2           VLP$PS.NN# = 1;
      251     8551    2           VLP$PS.PSLIST.PSEUDO#(0) = B$JIT.PSEUDO_TEXT;
      252     8552    2           VLP$PS.PSLIST.NUM#(0) = B$JIT.PSEUDO_COUNT;
      253     8553
      254     8554    2           CALL M$MRELRES(FPT$RESCTL) ALTRET(IMPOSSIBLE);
      255     8555    2   IMPOSSIBLE: ;
      256     8556    2           B$JIT.PSEUDO_COUNT = 0;
      257     8557    2           END;
      258     8558
      259     8559        /* If any M$LINKS have been done, go clean up after them */
      260     8560    1      IF NOT (B$JIT.JUNK & (%JJ_MLINKIP# | %JJ_LNKRETIP#) ) AND B$JIT.LNKCNT > 0
      261     8561    2      THEN DO;
      262     8562    2           CALL JLS$CLEANUP ALTRET(NO_CLEANUP);
      263     8563    2   NO_CLEANUP: ;
      264     8564    2           CALL INIT_ROSEG;
      265     8565    2           END;
      266     8566
      267     8567        /* Now, reset all program-specific jit & roseg information */
      268     8568    1      WSR=7;
      269     8569    2      DO I = 0 TO MAXECCB;                 /* Clear all appropriate eccb's       */
      270     8570    2           IF I=0 THEN S$CU$->B$U.FLG.EVNT='0'B;
      271     8571    2           CALL SSV$DORUND(WSR);
      272     8572    2           WSR=WSR-1;
      273     8573    2           B$ROSEG.ECCB(I) = '0'B;
      274     8574    2           END;
      275     8575        /* If we have an extra TSTACK page, release it now. Maybe we
      276     8576           won't need it later.
      277     8577        */
      278     8578    1      IF B$UPT$ -> B$MAP (%AJITPG) ~= MM_FPMC
      279     8579    2      THEN DO;
      280     8580    2           I = B$UPT$ -> B$MAP.RPN (%AJITPG);
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:9    
      281     8581    2           B$UPT$ -> B$MAP (%AJITPG) = MM_FPMC;
      282     8582    3           IF HW_WSQ0PT THEN DO;
      283     8583    3                I = B$IPHYMAP$->MM$IPHY_MAP(I);
      284     8584    3                CALL MMB$FPP(I);
      285     8585    3                END;
      286     8586    3           ELSE DO;
      287     8587    3                CALL MMB$FPP (I);
      288     8588    3                END;
      289     8589    2           CALL HFC$ASSOCCLR(%USERWSQ,%AJITPG,1);
      290     8590    2           B$JIT.PCC = B$JIT.PCC - 1;
      291     8591    2           B$JIT.PPC = B$JIT.PPC - 1;
      292     8592    2           END;
      293     8593
      294     8594        /* Reset user privileges if really ending a job step */
      295     8595    1      B$JIT.PRIV.PRC = '0'B/*Reset processor privileges*/;
      296     8596    1      IF NOT (B$JIT.JUNK & (%JJ_MLINKIP# | %JJ_LNKRETIP#) )
      297     8597    1        AND (S_CUN > JG_MING#)        /*don't reset sys ghosts (for disk boot)*/
      298     8598    1        AND (B$JIT.STEPS ~= 0)             /*for batch*/
      299     8599    1      THEN B$JIT.PRIV.JOB = B$JIT.PRIV.JOB & ES_STEPPRIVMASK;
      300     8600    1      B$JIT.PRIV.ACTIVE = B$JIT.PRIV.JOB;
      301     8601
      302     8602        /* Make sure this guy doesn't keep any special jit access */
      303     8603           %RSETFLG (LS$ = B$USERLS$ , SEGID = %JITSID , FLG = %DSWRITE);
      304     8606           %RSETFLG (LS$ = B$DBLS$ , SEGID = %JITSID , FLG = %DSWRITE);
      305     8609        /* ...OR any special access descriptors. */
      306     8610           %SETNULL (LS$ = B$USERLS$ , SEGID = %SPCL1SID);
      307     8613           %SETNULL (LS$ = B$USERLS$ , SEGID = %SPCL2SID);
      308     8616           %SETNULL (LS$ = B$USERLS$ , SEGID = %SPCL3SID);
      309     8619           %SETNULL (LS$ = B$USERLS$ , SEGID = %SPCL4SID);
      310     8622           %SETNULL (LS$ = B$USERLS$ , SEGID = %SPCL5SID);
      311     8625           %SETNULL (LS$ = B$USERLS$ , SEGID = %SPCL6SID);
      312     8628           %SETNULL (LS$ = B$USERLS$ , SEGID = %SPCL7SID);
      313     8631           %SETNULL (LS$ = B$USERLS$ , SEGID = %SPCL8SID);
      314     8634
      315     8635        /* Reset all data segment descriptors to have their normal bases
      316     8636           in case any unsatisfiable requests have left 'gaps'.  Note that
      317     8637           it is not possible for the cp to create these gaps, as all of
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:10   
      318     8638           its memory requests are always satisfied.                       */
      319     8639    1      IF NOT (B$JIT.JUNK & (%JJ_MLINKIP# | %JJ_LNKRETIP#) )
      320     8640    2      THEN DO;
      321     8641                %SETDBASE (LS$ = B$USERLS$ , SEGID = %DS1SID , DBASE = DS_BASE);
      322     8644                %SETDBASE (LS$ = B$USERLS$ , SEGID = %DS2SID , DBASE = DS_BASE);
      323     8647                %SETDBASE (LS$ = B$USERLS$ , SEGID = %DS3SID , DBASE = DS_BASE);
      324     8650                %SETDBASE (LS$ = B$USERLS$ , SEGID = %DS4SID , DBASE = DS_BASE);
      325     8653                %SETDBASE (LS$ = B$USERLS$ , SEGID = %DS5SID , DBASE = DS_BASE);
      326     8656                %SETDBASE (LS$ = B$USERLS$ , SEGID = %DS6SID , DBASE = DS_BASE);
      327     8659                %SETDBASE (LS$ = B$USERLS$ , SEGID = %DS7SID , DBASE = DS_BASE);
      328     8662                %SETDBASE (LS$ = B$USERLS$ , SEGID = %DS8SID , DBASE = DS_BASE);
      329     8665                %SETDBASE (LS$ = B$DBLS$ , SEGID = %DS1SID , DBASE = DDS_BASE);
      330     8668                %SETDBASE (LS$ = B$DBLS$ , SEGID = %DS2SID , DBASE = DDS_BASE);
      331     8671                %SETDBASE (LS$ = B$DBLS$ , SEGID = %DS3SID , DBASE = DDS_BASE);
      332     8674                %SETDBASE (LS$ = B$DBLS$ , SEGID = %DS4SID , DBASE = DDS_BASE);
      333     8677                %SETDBASE (LS$ = B$DBLS$ , SEGID = %DS5SID , DBASE = DDS_BASE);
      334     8680                %SETDBASE (LS$ = B$DBLS$ , SEGID = %DS6SID , DBASE = DDS_BASE);
      335     8683                %SETDBASE (LS$ = B$DBLS$ , SEGID = %DS7SID , DBASE = DDS_BASE);
      336     8686                %SETDBASE (LS$ = B$DBLS$ , SEGID = %DS8SID , DBASE = DDS_BASE);
      337     8689                %SETDBASE (LS$ = B$ASLLS$ , SEGID = %DS1SID , DBASE = ADS_BASE);
      338     8692                %SETDBASE (LS$ = B$ASLLS$ , SEGID = %DS2SID , DBASE = ADS_BASE);
      339     8695                %SETDBASE (LS$ = B$ASLLS$ , SEGID = %DS3SID , DBASE = ADS_BASE);
      340     8698                %SETDBASE (LS$ = B$ASLLS$ , SEGID = %DS4SID , DBASE = ADS_BASE);
      341     8701                %SETDBASE (LS$ = B$ASLLS$ , SEGID = %DS5SID , DBASE = ADS_BASE);
      342     8704                %SETDBASE (LS$ = B$ASLLS$ , SEGID = %DS6SID , DBASE = ADS_BASE);
      343     8707                %SETDBASE (LS$ = B$ASLLS$ , SEGID = %DS7SID , DBASE = ADS_BASE);
      344     8710                %SETDBASE (LS$ = B$ASLLS$ , SEGID = %DS8SID , DBASE = ADS_BASE);
      345     8713    2           END;
      346     8714
      347     8715        /* Reset JIT.ERROR and lots of other basic step-specific stuff */
      348     8716    1      B$JIT.ERR = '0'B;
      349     8717    1      IF (B$JIT.JUNK & %JJ_LNKRETIP#)
      350     8718    1      THEN B$JIT.XCONF = (B$JIT.XCONF & %XC_QUIT#);
      351     8719    1      ELSE B$JIT.XCONF='0'B;
      352     8720    1      B$JIT.PROG_ENTRY='000'O;
      353     8721
      354     8722        /* Reset Limit Exceeded flags if this is an on-line user. */
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:11   
      355     8723    1      IF B$JIT.MODE = %M_INT#
      356     8724    2      THEN DO;
      357     8725    2           B$JIT.XLIMFLG = '000'O;
      358     8726    2           B$JIT.FRS = (B$JIT.FRS & %RS_CL3#);
      359     8727    2           END;
      360     8728    1      ELSE B$JIT.FRS = (B$JIT.FRS & %RS_CL23#);
      361     8729
      362     8730        /* Reset any request for LINK or LDTRC in case of abort from Job Step */
      363     8731    1      B$JIT.SVLDTF=(B$JIT.SVLDTF & %SVL_LYNX#);
      364     8732
      365     8733        /* Write Stop Processor Acct record to *S if processor accounting in effect */
      366     8734    1      IF (B$JIT.CPFLAGS1 & %CP_PROCACCT#) AND NOT(B$JIT.JUNK2 & %JJ2_ASAVE_LNK#)
      367     8735    2      THEN DO;
      368     8736    2           B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1 & %(~CP_PROCACCT#);
      369     8737    2           ACCT_TYP = %PSTOP#;
      370     8738    2           CALL JSU$WSTAR(ACCT_TYP);
      371     8739    2           END;
      372     8740
      373     8741        /* Reset the monitor flags in JIT.CPFLAGS1 and generally cleanup */
      374     8742        /* unless this is M$LINK-LDTRC or returning, in which case we    */
      375     8743        /* are not at Job Step.                                          */
      376     8744    1      IF NOT (B$JIT.JUNK & (%JJ_MLINKIP# | %JJ_LNKRETIP#) )
      377     8745    2      THEN DO;
      378     8746    2           S$CU$->B$U.FLG = S$CU$->B$U.FLG | %U_STEP;
      379     8747
      380     8748        /* Write Stop Step Acct record to *S if step accounting in effect */
      381     8749    2           IF (B$JIT.CPFLAGS1 & %CP_SSTART#)
      382     8750                                                /* prevents duplicate SSTOP records   */
      383     8751    3           THEN DO;
      384     8752    3                ACCT_TYP = %SSTOP#;
      385     8753    3                CALL JSU$WSTAR(ACCT_TYP);
      386     8754    3                B$JIT.CPFLAGS1 = (B$JIT.CPFLAGS1 & %CP_RSSTART#);
      387     8755    3                END;
      388     8756    2           B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1  & %(~CP_RUND#);
      389     8757    2           B$JIT.CPFLAGS1 = (B$JIT.CPFLAGS1 | %CP_JSTEP#);
      390     8758    2           I=FM$CFUX.SETH;
      391     8759    2           IF B$JIT.MODE ~= %M_BATCH#
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:12   
      392     8760    3           THEN DO WHILE(I~=0);
      393     8761    3                IF FM$SET.DSMTF(I) THEN CALL FMP$UDLIST(FM$SET(I));
      394     8762    3                I=FM$SET.SETL(I);
      395     8763    3                END;
      396     8764    2           END;
      397     8765
      398     8766    1      ELSE B$JIT.CPFLAGS1 = (B$JIT.CPFLAGS1 & %CP_RESET#);
      399     8767
      400     8768    1      B$JIT.EUP = %ISEGHI;                 /* Reset end user page                */
      401     8769    1      B$JIT.DDUL = %ISEGHI;                /* Reset dynamic data upper limit     */
      402     8770        /* Re-initialize ssr and asr */
      403     8771    1      CALL JSN$1SSSF;
      404     8772    1      CALL JSN$SETASR(J_ASR_E);
      405     8773    1      CALL UDN$MAGIC;
      406     8774    1      J_CRASHUN = 0;                       /* Reset crashun - rundown complete   */
      407     8775    1      RETURN;
      408     8776    1   END JSR$RUNDOWN;

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:13   
--  Include file information  --

   FM$MACROS.:E05TOU  is referenced.
   B$MAP.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   UE_CP6.:E05TOU  is referenced.
   SS_SCHED_C.:E05TOU  is referenced.
   HF_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   MM_MACRO_M.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   MM$SYSGEN.:E05TOU  is referenced.
   M_INFO_C.:E05TOU  is referenced.
   MM_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$USER.:E05TOU  cannot be made into a system file and is referenced.
   B$ROSEG.:E05TOU  cannot be made into a system file and is referenced.
   F_CP6.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   JG_GHOSTS_C.:E05TOU  is referenced.
   B_MLSMAC_C.:E05TOU  is referenced.
   B_ULSMAC_C.:E05TOU  is referenced.
   B_LSDATA_C.:E05TOU  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure JSR$RUNDOWN.

   Procedure JSR$RUNDOWN requires 601 words for executable code.
   Procedure JSR$RUNDOWN requires 46 words of local(AUTO) storage.

    No errors detected in file JSR$RUND.:E05TSI    .

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:14   

 Object Unit name= JSR$RUNDOWN                                File name= JSR$RUND.:E05TOU
 UTS= JUL 29 '97 23:47:18.80 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS     11     13  JSR$RUNDOWN
    1   Proc  even  none   601   1131  JSR$RUNDOWN
    2  RoData even  none    17     21  JSR$RUNDOWN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        0  JSR$RUNDOWN
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:15   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 TDP$RSETCPU
         yes           Std       0 JSU$DECRUC
         yes           Std       0 SSC$MON
         yes           Std       0 SSC$SERV
 yes     yes           Std       0 JLS$CLEANUP
         yes           Std       3 HFC$ASSOCCLR
 yes     yes           Std       2 FMP$UDLIST
 yes     yes           Std       0 SSQ$NUQUAN
         yes           Std       0 JSU$RELFSEG
         yes           Std       1 JSU$RELMEM
         yes           Std       0 JSU$RSTLMS
         yes           Std       1 FMF$TRUNCM
         yes           Std       1 JSU$WSTAR
         yes           Std       1 JSN$SETASR
         yes           Std       0 KIP$RPET
 yes     yes           Std       1 M$MRELRES
         yes           Std       1 SSV$DORUND
         yes           Std       0 JSF$CLSDCBS
 yes     yes           Std       0 UQB$DELUSER
 yes     yes           Std       1 MMB$FPP
         yes           Std       0 UDN$MAGIC
         yes           Std       0 JSF$CLSLM
         yes           Std       0 JSN$1SSSF
 yes     yes           Std       0 UMD$CLSDRIB
 yes     yes           Std       5 MMG$SFVP
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:16   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     SC_FMRUND                             S_CUN                                 S_TDCPUF
     IRM_SYSID                             ES_STEPPRIVMASK                  r    B$JIT$
r    B$M$UC$                          r    B$M$LM$                          r    B$ROSEG$
r    B$DBLS$                          r    B$ASLLS$                         r    B$USERLS$
r    B$UPT$                           r    B$IPHYMAP$                            J_FPT_RESCTL
     S$CU$                            r    MM_BYP$                               MM_FPMC
     HW_WSQ0PT                             FM$SET$                               F$CFU$
     J_CRASHUN                        r    J_ASR_E                               B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ASLENTSID                             ISSID
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:17   


        1        1        /*M*   JSR$RUND   USER RUNDOWN PROCEDURES   */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ECU=0,ENU=0  */
        8        8        JSR$RUNDOWN: PROC ALTRET;

      8  1 000000   000000 700200 xent  JSR$RUNDOWN  TSX0  ! X66_AUTO_0
         1 000001   000056 000000                    ZERO    46,0
         1 000002   000124 710000 1                  TRA     s:8435

        9        9        /**/
       10       10    1   DCL I SBIN;
       11       11    1   DCL WSR SBIN;
       12       12    1   DCL MAXECCB SBIN;
       13       13    1   DCL CPFLAGS BIT(36);
       14       14    1   DCL TPTR$ PTR;
       15       15    1   DCL ACCT_TYP UBIN BYTE;
       16       16
       17       17    1   DCL S_CUN UBIN SYMREF;                  /* Current user number                */
       18       18    1   DCL S_TDCPUF UBIN SYMREF;
       19       19    1   DCL IRM_SYSID UBIN SYMREF;
       20       20    1   DCL ES_STEPPRIVMASK BIT(36) SYMREF;
       21       21        /**/
       22       22    1   DCL FMF$TRUNCM ENTRY(1);
       23       23    1   DCL FMP$UDLIST ENTRY(2) ALTRET;
       24       24    1   DCL JSF$CLSDCBS ENTRY;             /* Routine to close all dcbs except M$UC   */
       25       25    1   DCL JSF$CLSLM ENTRY;                    /* Routine to close M$LM              */
       26       26    1   DCL JSU$RSTLMS ENTRY;              /* Routine to reset jit memory delimiters  */
       27       27    1   DCL JSU$RELMEM ENTRY(1);           /* Routine to free isr & data seg pages    */
       28       28    1   DCL JLS$CLEANUP ENTRY ALTRET;           /* Cleanup after ldlnk abort          */
       29       29    1   DCL JSU$RELFSEG ENTRY;                  /* Routine to release buffer segment  */
       30       30    1   DCL JSU$DECRUC ENTRY;         /* Routine to decrement uc for assoc. Procs     */
       31       31    1   DCL JSU$WSTAR ENTRY(1);            /* Routine to write acct records to *S     */
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:18   
       32       32    1   DCL MMG$SFVP ENTRY(5) ALTRET;           /* Seg-relative free virtual page     */
       33       33    1   DCL MMB$FPP ENTRY(1) ALTRET;
       34       34    1   DCL HFC$ASSOCCLR ENTRY (3);
       35       35    1   DCL UQB$DELUSER ENTRY ALTRET;
       36       36    1   DCL UMD$CLSDRIB ENTRY ALTRET;
       37       37    1   DCL JSN$1SSSF ENTRY;
       38       38    1   DCL UDN$MAGIC ENTRY;
       39       39    1   DCL JSN$SETASR ENTRY(1);
       40       40    1   DCL KIP$RPET ENTRY;                     /* Reset terminal info                */
       41       41    1   DCL SSV$DORUND ENTRY(1);
       42       42    1   DCL SSQ$NUQUAN ENTRY ALTRET;
       43       43    1   DCL SSC$MON ENTRY;                      /* Switch to monitor running          */
       44       44    1   DCL SSC$SERV ENTRY;                     /* Switch to user service             */
       45       45    1   DCL SSR$REG ENTRY(3) ALTRET;
       46       46    1   DCL TDP$RSETCPU ENTRY;
       47       47    1   DCL M$MRELRES ENTRY(1) ALTRET;
       48       48    1   DCL SC_FMRUND ENTRY CONV(2,0);
       49       49
       50       50        %INCLUDE B_SEGIDS_C;                    /* System segid definitions           */
       51      589        %INCLUDE B_LSDATA_C;
       52     3795        %INCLUDE JG_GHOSTS_C;
       53     3885
       54     3886    1   DCL B$JIT$ PTR SYMREF READONLY;
       55     3887    1   DCL B$M$UC$ PTR SYMREF READONLY;
       56     3888    1   DCL B$M$LM$ PTR SYMREF READONLY;
       57     3889    1   DCL B$ROSEG$ PTR SYMREF READONLY;
       58     3890    1   DCL B$DBLS$ PTR SYMREF READONLY;
       59     3891    1   DCL B$ASLLS$ PTR SYMREF READONLY;
       60     3892    1   DCL B$USERLS$ PTR SYMREF READONLY;
       61     3893    1   DCL B$UPT$ PTR SYMREF READONLY;
       62     3894    1   DCL B$IPHYMAP$ PTR SYMREF READONLY;
       63     3895
       64     3896        %INCLUDE B$JIT;
       65     4499        %INCLUDE F_CP6;
       66     5524        %FPT_RESCTL (FPTN=J_FPT_RESCTL,STCLASS=SYMREF);
       67     5541        %FPT_RESCTL (FPTN=FPT$RESCTL,STCLASS=AUTO);
       68     5558        %VLP_PSEUDO (FPTN=VLP$PS,STCLASS=AUTO,N=1);
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:19   
       69     5574
       70     5575        %INCLUDE B$ROSEG;                       /* Read-only segment definitions      */
       71     5638        %INCLUDE B$USER;                        /* User table definitions             */
       72     5854        %B$USERREFS;
       73     5858        %INCLUDE MM_DATA_R;
       74     6378        %INCLUDE HF_DATA_R;
       75     6421        %INCLUDE SS_SCHED_C;
       76     6654        %INCLUDE UE_CP6;
       77     7345        %INCLUDE CP_6_SUBS;
       78     7885        %INCLUDE B$MAP;
       79     7984        %INCLUDE FM$MACROS;
       80     8359        %FM$SET(BASED="BASED(FM$SET$)");
       81     8364        %FM$CFUX;
       82     8369        %B$ECCB;
       83     8377    1   DCL FM$SET$ PTR SYMREF;
       84     8378    1   DCL F$CFU$ PTR SYMREF;
       85     8379    1   DCL J_CRASHUN SBIN SYMREF;
       86     8380    1   DCL J_ASR_E BIT(72) SYMREF READONLY DALIGNED;
       87     8381
       88     8382    1   DCL APTR$(0:0) PTR BASED;
       89     8383        %SUB   B$JIT=B$JIT$->B$JIT;
       90     8384        %SUB   B$ROSEG=B$ROSEG$->B$ROSEG;
       91     8385
       92     8386        %LIST;
       93     8387        %INIT_RO_SIZE;                          /* Get 'INITROSIZE' from B$ROSEG      */
              8388        %SUB   INITROSIZE ="(POFFW(B$ROSEG$->B$ROSEG.DCBPTR$,B$ROSEG$)+%M$1STDCB#)";
       94     8390        %PLIST;
       95     8391
       96     8392        %EJECT;
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:20   
       97     8393        /**/
       98     8394        /* Procedures internal to this MODULE...                           */
       99     8395        /**/
      100     8396    1   INIT_ROSEG: PROC;             /* Procedure to initialize the read-only seg    */

   8396  1 000003   200046 741300       INIT_ROSEG   STX1  ! VLP$PS+10,,AUTO

      101     8397    2   DCL ROPGS SBIN;
      102     8398    2   DCL ERR_DUMMY REDEF ROPGS SBIN;
      103     8399    2   DCL NDCBS SBIN BASED ALIGNED;
      104     8400    2   DCL BPTR$ PTR BASED ALIGNED;
      105     8401        /**/
      106     8402    2      CALL UMD$CLSDRIB;

   8402  1 000004   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000005   000000 701000 xent               TSX1    UMD$CLSDRIB
         1 000006   000000 011000                    NOP     0

      107     8403    2      B$ROSEG.TREE$ = ADDR(NIL);           /* Reset tree pointer                 */

   8403  1 000007   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000010   000000 470400 xsym               LDP0    B$ROSEG$
         1 000011   000001 756100                    STQ     1,,PR0

      108     8404        /*     Reset available space pointer                               */
      109     8405    2      B$ROSEG.AVAIL$ = PINCRW(B$ROSEG$,INITROSIZE%+%IBEX_DCBS#);

   8405  1 000012   000000 235000 xsym               LDA     B$ROSEG$
         1 000013   000022 771000                    ARL     18
         1 000014   200050 755100                    STA     ROPGS+1,,AUTO
         1 000015   000000 236100                    LDQ     0,,PR0
         1 000016   000022 772000                    QRL     18
         1 000017   200050 136100                    SBLQ    ROPGS+1,,AUTO
         1 000020   000022 736000                    QLS     18
         1 000021   000020 036003                    ADLQ    16,DU
         1 000022   000000 036000 xsym               ADLQ    B$ROSEG$
         1 000023   000003 756100                    STQ     3,,PR0
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:21   

      110     8406        /* Reset the # of dcb slots to # of system dcbs + ibex's free slots */
      111     8407    2      B$ROSEG.NUMDCBS = %SYS_DCBS# + %IBEX_DCBS#;

   8407  1 000024   000017 220003                    LDX0    15,DU
         1 000025   000002 740100                    STX0    2,,PR0

      112     8408    3      DO I = 5 TO B$ROSEG.NUMDCBS;         /* NIL out all non-initial DCB ptrs   */

   8408  1 000026   000005 235007                    LDA     5,DL
         1 000027   200003 755100                    STA     I,,AUTO
         1 000030   000037 710000 1                  TRA     s:8410+1

      113     8409    3           PINCRW(B$ROSEG.DCBPTR$,I)->BPTR$ = ADDR(NIL);

   8409  1 000031   000000 470400 xsym               LDP0    B$ROSEG$
         1 000032   000000 471500                    LDP1    0,,PR0
         1 000033   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000034   200003 720100                    LXL0    I,,AUTO
         1 000035   100000 756110                    STQ     0,X0,PR1

      114     8410    3           END;

   8410  1 000036   200003 054100                    AOS     I,,AUTO
         1 000037   000002 236100                    LDQ     2,,PR0
         1 000040   000022 772000                    QRL     18
         1 000041   200003 116100                    CMPQ    I,,AUTO
         1 000042   000031 605000 1                  TPL     s:8409

      115     8411    2      IF B$JIT.PCROS > 1

   8411  1 000043   000000 471400 xsym               LDP1    B$JIT$
         1 000044   100203 220100                    LDX0    131,,PR1
         1 000045   000002 100003                    CMPX0   2,DU
         1 000046   000067 602000 1                  TNC     XX

      116     8412    3      THEN DO;                             /* Free all but inital roseg page     */
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:22   

      117     8413    3           ROPGS = B$JIT.PCROS - 1;

   8413  1 000047   100203 236100                    LDQ     131,,PR1
         1 000050   000022 772000                    QRL     18
         1 000051   000001 136007                    SBLQ    1,DL
         1 000052   200047 756100                    STQ     ROPGS,,AUTO

      118     8414    3           CALL MMG$SFVP(%USERWSQ,BITBIN(%ROSID),ROPGS,ROPGS,ERR_DUMMY)

   8414  1 000053   200047 633500                    EPPR3   ROPGS,,AUTO
         1 000054   200054 453500                    STP3    ROPGS+5,,AUTO
         1 000055   200047 634500                    EPPR4   ROPGS,,AUTO
         1 000056   200053 454500                    STP4    ROPGS+4,,AUTO
         1 000057   200047 635500                    EPPR5   ROPGS,,AUTO
         1 000060   200052 455500                    STP5    ROPGS+3,,AUTO
         1 000061   000002 237000 2                  LDAQ    2
         1 000062   200050 757100                    STAQ    ROPGS+1,,AUTO
         1 000063   200050 630500                    EPPR0   ROPGS+1,,AUTO
         1 000064   000023 631400 xsym               EPPR1   B_VECTNIL+19
         1 000065   000000 701000 xent               TSX1    MMG$SFVP
         1 000066   000067 702000 1                  TSX2    XX

   8413  1 000067                       XX           null
      119     8415    3             ALTRET(XX);
      120     8416    3   XX:     ;
      121     8417    3           END;

      122     8418        /* Reset the roseg avail space header */
      123     8419    2      B$ROSEG.AVAIL$->B$ROAVAIL.NEXT$  = ADDR(NIL);

   8419  1 000067   000000 470400 xsym               LDP0    B$ROSEG$
         1 000070   000003 471500                    LDP1    3,,PR0
         1 000071   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000072   100000 756100                    STQ     0,,PR1

      124     8420    2      B$ROSEG.AVAIL$->B$ROAVAIL.NWORDS = 1024 - (INITROSIZE% + %IBEX_DCBS#);
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:23   

   8420  1 000073   000003 471500                    LDP1    3,,PR0
         1 000074   000000 235000 xsym               LDA     B$ROSEG$
         1 000075   000022 771000                    ARL     18
         1 000076   200050 755100                    STA     ROPGS+1,,AUTO
         1 000077   000000 236100                    LDQ     0,,PR0
         1 000100   000022 772000                    QRL     18
         1 000101   200050 136100                    SBLQ    ROPGS+1,,AUTO
         1 000102   000027 676000 xsym               ERQ     B_VECTNIL+23
         1 000103   001761 036007                    ADLQ    1009,DL
         1 000104   100001 756100                    STQ     1,,PR1

      125     8421        /*
      126     8422           Now, set the user tcb descriptor null, and reset the software
      127     8423           descriptor flag for the eccb descriptor (used by delta).
      128     8424        */
      129     8425           %SETNULL (LS$ = B$USERLS$ , SEGID = %TCBSID);

   8426  1 000105   000000 471400 xsym               LDP1    B$USERLS$
         1 000106   000001 236000 2                  LDQ     1
         1 000107   100036 356100                    ANSQ    30,,PR1

   8426  1 000110   177777 236007                    LDQ     65535,DL
         1 000111   100036 356100                    ANSQ    30,,PR1

      130     8428           %RSETFLG (LS$ = B$USERLS$ , SEGID = %ECCBSID , FLG = %DSXXX);

   8429  1 000112   100034 236100                    LDQ     28,,PR1
         1 000113   000024 736000                    QLS     20
         1 000114   777000 376003                    ANQ     -512,DU
         1 000115   757000 376003                    ANQ     -8704,DU
         1 000116   000024 772000                    QRL     20
         1 000117   100034 676100                    ERQ     28,,PR1
         1 000120   177600 376007                    ANQ     65408,DL
         1 000121   100034 656100                    ERSQ    28,,PR1

      131     8431    2   END INIT_ROSEG;
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:24   

   8431  1 000122   200046 221300                    LDX1  ! VLP$PS+10,,AUTO
         1 000123   000001 702211                    TSX2  ! 1,X1

      132     8432        %EJECT;
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:25   
      133     8433        /*F*   NAME: JSR$RUNDOWN                                           */
      134     8434        /*F*   PURPOSE: To strip a user down to his basic context.         */
      135     8435    1      IF B$JIT.RNST >= %RS_ABRT#

   8435  1 000124   000000 470400 xsym               LDP0    B$JIT$
         1 000125   000314 236100                    LDQ     204,,PR0
         1 000126   777000 376003                    ANQ     -512,DU
         1 000127   010000 116003                    CMPQ    4096,DU
         1 000130   000140 602000 1                  TNC     s:8445

      136     8436    2      THEN DO;                             /* Do if some type of monitor abort   */

      137     8437    2           IF S_CUN = J_CRASHUN            /* If this guy got aborted FROM...*/

   8437  1 000131   000000 236000 xsym               LDQ     S_CUN
         1 000132   000137 604000 1                  TMI     s:8442
         1 000133   000000 116000 xsym               CMPQ    J_CRASHUN
         1 000134   000137 601000 1                  TNZ     s:8442

      138     8438    3           THEN DO;                        /* Rundown, then he's too DAMAGED...*/

      139     8439    3                J_CRASHUN = 0;             /* To run, so kick him off.           */

   8439  1 000135   000000 450000 xsym               STZ     J_CRASHUN

      140     8440    3                ALTRETURN;                 /* (by calling JSD$ZAPUSER on altret) */

   8440  1 000136   000000 702200 xent               TSX2  ! X66_AALT

      141     8441    3                END;
      142     8442    2           ELSE J_CRASHUN = S_CUN;         /* 1st time thru abort                */

   8442  1 000137   000000 756000 xsym               STQ     J_CRASHUN

      143     8443    2           END;

      144     8444
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:26   
      145     8445    1      S$CU$->B$U.FLG = S$CU$->B$U.FLG | %U_STIP;

   8445  1 000140   000000 471400 xsym               LDP1    S$CU$
         1 000141   100000 236100                    LDQ     0,,PR1
         1 000142   000000 276000 0                  ORQ     0
         1 000143   100000 756100                    STQ     0,,PR1

      146     8446    1      IF (S_CUN > JG_MING#) AND (S_CUN = S_TDCPUF)

   8446  1 000144   000000 235000 xsym               LDA     S_CUN
         1 000145   000020 115007                    CMPA    16,DL
         1 000146   000155 602000 1                  TNC     s:8448
         1 000147   000000 236000 xsym               LDQ     S_CUN
         1 000150   000000 116000 xsym               CMPQ    S_TDCPUF
         1 000151   000155 601000 1                  TNZ     s:8448

      147     8447    1      THEN CALL TDP$RSETCPU;

   8447  1 000152   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000153   000000 701000 xent               TSX1    TDP$RSETCPU
         1 000154   000000 011000                    NOP     0

      148     8448    1      CALL JSU$DECRUC;                     /* Decrement use count for procs      */

   8448  1 000155   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000156   000000 701000 xent               TSX1    JSU$DECRUC
         1 000157   000000 011000                    NOP     0

      149     8449    1      S$CU$->B$U.APR = 0;

   8449  1 000160   000000 470400 xsym               LDP0    S$CU$
         1 000161   000000 236003                    LDQ     0,DU
         1 000162   000007 752160                    STCQ    7,'60'O,PR0

      150     8450    1      S$CU$->B$U.APO = 0;

   8450  1 000163   000007 752114                    STCQ    7,'14'O,PR0
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:27   

      151     8451    1      S$CU$->B$U.ASP = 0;

   8451  1 000164   000007 752102                    STCQ    7,'02'O,PR0

      152     8452    1      S$CU$->B$U.ASL = 0;

   8452  1 000165   000006 552104                    STBQ    6,'04'O,PR0

      153     8453
      154     8454    1      IF ((B$JIT.JUNK & %JJ_MLINKIP#) OR (B$JIT.JUNK & %JJ_LNKRETIP#))

   8454  1 000166   000000 471400 xsym               LDP1    B$JIT$
         1 000167   100315 220100                    LDX0    205,,PR1
         1 000170   000001 360003                    ANX0    1,DU
         1 000171   000175 601000 1                  TNZ     s:8456
         1 000172   100315 220100                    LDX0    205,,PR1
         1 000173   000002 360003                    ANX0    2,DU
         1 000174   000203 600000 1                  TZE     s:8464

      155     8455    2      THEN DO;

      156     8456    2           MAXECCB = 1;

   8456  1 000175   000001 235007                    LDA     1,DL
         1 000176   200005 755100                    STA     MAXECCB,,AUTO

      157     8457    2           B$JIT.JUNK = B$JIT.JUNK & (%JJ_MLINKIP#

   8457  1 000177   100315 220100                    LDX0    205,,PR1
         1 000200   200123 360003                    ANX0    65619,DU
         1 000201   100315 740100                    STX0    205,,PR1

      158     8458    2             | %JJ_LNKRETIP#
      159     8459    2             | %JJ_RTNXIT#
      160     8460    2             | %JJ_UDELTA#
      161     8461    2             | %JJ_MONLINK#);
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:28   
      162     8462    2           END;

   8462  1 000202   000227 710000 1                  TRA     s:8475

      163     8463    2      ELSE DO;

      164     8464    2           IF (B$JIT.CPFLAGS1 & %CP_KEEPDS#)

   8464  1 000203   100143 236100                    LDQ     99,,PR1
         1 000204   000001 376000 0                  ANQ     1
         1 000205   000217 600000 1                  TZE     s:8470

      165     8465    3           THEN DO;

      166     8466    3                MAXECCB=2;

   8466  1 000206   000002 235007                    LDA     2,DL
         1 000207   200005 755100                    STA     MAXECCB,,AUTO

      167     8467    3                TPTR$ = ADDR(B$ROSEG.ECCB(3));

   8467  1 000210   000000 236000 xsym               LDQ     B$ROSEG$
         1 000211   000046 036003                    ADLQ    38,DU
         1 000212   200007 756100                    STQ     TPTR$,,AUTO

      168     8468    3                TPTR$->B$ECCB.XCONF = '000'O;

   8468  1 000213   200007 473500                    LDP3    TPTR$,,AUTO
         1 000214   000000 236003                    LDQ     0,DU
         1 000215   300004 552120                    STBQ    4,'20'O,PR3

      169     8469    3                END;

   8469  1 000216   000221 710000 1                  TRA     s:8471

      170     8470    2           ELSE MAXECCB=3;

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:29   
   8470  1 000217   000003 235007                    LDA     3,DL
         1 000220   200005 755100                    STA     MAXECCB,,AUTO

      171     8471    2           B$JIT.JUNK = '0'B;

   8471  1 000221   000000 220003                    LDX0    0,DU
         1 000222   100315 740100                    STX0    205,,PR1

      172     8472    2           B$DBLS$->B$ULNK.IS.BOUND = 0;

   8472  1 000223   000000 473400 xsym               LDP3    B$DBLS$
         1 000224   177777 236007                    LDQ     65535,DL
         1 000225   300000 356100                    ANSQ    0,,PR3

      173     8473    2           B$DBLS$->B$ULNK.IS.BASE = 0;

   8473  1 000226   300001 450100                    STZ     1,,PR3

      174     8474    2           END;

      175     8475    1      B$ASLLS$->B$ULNK.IS.BOUND = 0;

   8475  1 000227   000000 470400 xsym               LDP0    B$ASLLS$
         1 000230   177777 236007                    LDQ     65535,DL
         1 000231   000000 356100                    ANSQ    0,,PR0

      176     8476    1      B$ASLLS$->B$ULNK.IS.BASE = 0;

   8476  1 000232   000001 450100                    STZ     1,,PR0

      177     8477    1      B$USERLS$->B$ULNK.ASLENT.ENTLOC = BITBIN('777777'O);

   8477  1 000233   777777 220003                    LDX0    -1,DU
         1 000234   000000 473400 xsym               LDP3    B$USERLS$
         1 000235   300052 740100                    STX0    42,,PR3

      178     8478    1      CALL SSC$MON;
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:30   

   8478  1 000236   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000237   000000 701000 xent               TSX1    SSC$MON
         1 000240   000000 011000                    NOP     0

      179     8479    1      CALL SSQ$NUQUAN;                     /* Give new quantum for new mode      */

   8479  1 000241   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000242   000000 701000 xent               TSX1    SSQ$NUQUAN
         1 000243   000000 011000                    NOP     0

      180     8480    1      CALL SSC$SERV;

   8480  1 000244   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000245   000000 701000 xent               TSX1    SSC$SERV
         1 000246   000000 011000                    NOP     0

      181     8481    1      IF B$JIT.SPEAK > B$JIT.JPEAK

   8481  1 000247   000000 470400 xsym               LDP0    B$JIT$
         1 000250   000211 720100                    LXL0    137,,PR0
         1 000251   000211 100100                    CMPX0   137,,PR0
         1 000252   000255 603000 1                  TRC     s:8483

      182     8482    1      THEN B$JIT.JPEAK = B$JIT.SPEAK;

   8482  1 000253   000211 221100                    LDX1    137,,PR0
         1 000254   000211 441100                    SXL1    137,,PR0

      183     8483    1      IF B$JIT.SRESPEAK > B$JIT.JRESPEAK

   8483  1 000255   000212 220100                    LDX0    138,,PR0
         1 000256   000213 100100                    CMPX0   139,,PR0
         1 000257   000262 603000 1                  TRC     s:8485

      184     8484    1      THEN B$JIT.JRESPEAK = B$JIT.SRESPEAK;

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:31   
   8484  1 000260   000213 221100                    LDX1    139,,PR0
         1 000261   000212 741100                    STX1    138,,PR0

      185     8485    1      B$JIT.RUNFLAGS = %RUN_MON#;          /* Set 'MONITOR RUNNING'              */

   8485  1 000262   001000 236007                    LDQ     512,DL
         1 000263   000314 552110                    STBQ    204,'10'O,PR0

      186     8486
      187     8487        /* If this is LINKING, JSF$CLSDCBS/JSU$TRUNCDCBS have already been
      188     8488           called, thus running down all I/O except (if TRUNCDCBS wasn't
      189     8489           called) that on M$UC.  If this is not LINKING, nothing has
      190     8490           been done.  Hence for both we blow away comm. I/O on M$UC.  */
      191     8491    1      B$JIT.DCB$=B$M$UC$;

   8491  1 000264   000000 236000 xsym               LDQ     B$M$UC$
         1 000265   000232 756100                    STQ     154,,PR0

      192     8492    1      CALL FMF$TRUNCM (0);

   8492  1 000266   000004 630400 2                  EPPR0   4
         1 000267   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000270   000000 701000 xent               TSX1    FMF$TRUNCM
         1 000271   000000 011000                    NOP     0

      193     8493
      194     8494        /* If this isn't a load-and-link rundown, then close all dcb's     */
      195     8495        /* And dequeue any outstanding enq's for this user.                */
      196     8496    1      IF NOT (B$JIT.JUNK & %JJ_MLINKIP#)

   8496  1 000272   000000 470400 xsym               LDP0    B$JIT$
         1 000273   000315 220100                    LDX0    205,,PR0
         1 000274   000001 360003                    ANX0    1,DU
         1 000275   000347 601000 1                  TNZ     NO_SNAP

      197     8497    2      THEN DO;

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:32   
      198     8498    2           CALL JSF$CLSDCBS;               /* Close all dcbs but uc & lm         */

   8498  1 000276   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000277   000000 701000 xent               TSX1    JSF$CLSDCBS
         1 000300   000000 011000                    NOP     0

      199     8499    2           B$ROSEG.DCBPTR$->APTR$(%M$LM#) = B$M$LM$;

   8499  1 000301   000000 470400 xsym               LDP0    B$ROSEG$
         1 000302   000000 471500                    LDP1    0,,PR0
         1 000303   000000 236000 xsym               LDQ     B$M$LM$
         1 000304   100002 756100                    STQ     2,,PR1

      200     8500    2           CALL JSF$CLSLM;                 /* Close M$LM too                     */

   8500  1 000305   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000306   000000 701000 xent               TSX1    JSF$CLSLM
         1 000307   000000 011000                    NOP     0

      201     8501    2           B$JIT.PRFLAGS.NOSCAN = '0'B;

   8501  1 000310   000000 470400 xsym               LDP0    B$JIT$
         1 000311   000005 236000 2                  LDQ     5
         1 000312   000030 356100                    ANSQ    24,,PR0

      202     8502    2           IF NOT (B$JIT.JUNK & %JJ_LNKRETIP#)

   8502  1 000313   000315 220100                    LDX0    205,,PR0
         1 000314   000002 360003                    ANX0    2,DU
         1 000315   000321 601000 1                  TNZ     s:8507

      203     8503    2           THEN CALL UQB$DELUSER;

   8503  1 000316   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000317   000000 701000 xent               TSX1    UQB$DELUSER
         1 000320   000000 011000                    NOP     0

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:33   
      204     8504
      205     8505        /* The following check is to help jack debug file mgmt. When he says */
      206     8506        /* so, it can be removed.                                            */
      207     8507    2           IF B$JIT.SYSID = IRM_SYSID THEN GOTO NO_SNAP;

   8507  1 000321   000000 470400 xsym               LDP0    B$JIT$
         1 000322   000000 236100                    LDQ     0,,PR0
         1 000323   777777 376007                    ANQ     -1,DL
         1 000324   000000 116000 xsym               CMPQ    IRM_SYSID
         1 000325   000347 600000 1                  TZE     NO_SNAP

      208     8508                                                /* Dont bother if already dumped      */
      209     8509    3           DO I = %FMSEGLO TO %FMSEGHI;

   8509  1 000326   000020 235007                    LDA     16,DL
         1 000327   200003 755100                    STA     I,,AUTO

      210     8510    3                IF B$UPT$->B$MAP.RPN(I) ~= MM_FPMC.RPN

   8510  1 000330   000000 470400 xsym               LDP0    B$UPT$
         1 000331   200003 720100                    LXL0    I,,AUTO
         1 000332   000000 221110                    LDX1    0,X0,PR0
         1 000333   000000 101000 xsym               CMPX1   MM_FPMC
         1 000334   000343 600000 1                  TZE     s:8519

      211     8511    4                THEN DO;

      212     8512        /*S*   SCREECH_CODE: JSR-S$FMRUND                                  */
      213     8513        /*S*   TYPE:   SNAP                                                */
      214     8514        /*S*   MESSAGE: All file management buffers not released at rundown. */
      215     8515    4                     CALL SC_FMRUND;

   8515  1 000335   000000 713400 xsym               CLIMB   SC_FMRUND
         1 000336   000000 600000 xsid               climb   nvectors=         0

      216     8516    4                     CALL JSU$RELFSEG;

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:34   
   8516  1 000337   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000340   000000 701000 xent               TSX1    JSU$RELFSEG
         1 000341   000000 011000                    NOP     0

      217     8517    4                     GOTO NO_SNAP;

   8517  1 000342   000347 710000 1                  TRA     NO_SNAP

      218     8518    4                     END;
      219     8519    3                END;

   8519  1 000343   200003 054100                    AOS     I,,AUTO
         1 000344   200003 235100                    LDA     I,,AUTO
         1 000345   000056 115007                    CMPA    46,DL
         1 000346   000330 604400 1                  TMOZ    s:8510

   8509  1 000347                       NO_SNAP      null
      220     8520    2   NO_SNAP: ;
      221     8521    2           END;

      222     8522
      223     8523
      224     8524    1      IF (B$JIT.RNST & %RS_DROP#)  = '000'O

   8524  1 000347   000000 470400 xsym               LDP0    B$JIT$
         1 000350   000314 236100                    LDQ     204,,PR0
         1 000351   777000 376003                    ANQ     -512,DU
         1 000352   200000 376003                    ANQ     65536,DU
         1 000353   000366 601000 1                  TNZ     s:8532

      225     8525    2      THEN DO;

      226     8526    2           CPFLAGS = B$JIT.CPFLAGS1;

   8526  1 000354   000143 236100                    LDQ     99,,PR0
         1 000355   200006 756100                    STQ     CPFLAGS,,AUTO

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:35   
      227     8527    2           B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1 & %(~CP_DRIBBLE#);

   8527  1 000356   000002 376000 0                  ANQ     2
         1 000357   000143 756100                    STQ     99,,PR0

      228     8528    2           CALL KIP$RPET;

   8528  1 000360   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000361   000000 701000 xent               TSX1    KIP$RPET
         1 000362   000000 011000                    NOP     0

      229     8529    2           B$JIT.CPFLAGS1 = CPFLAGS;

   8529  1 000363   200006 236100                    LDQ     CPFLAGS,,AUTO
         1 000364   000000 470400 xsym               LDP0    B$JIT$
         1 000365   000143 756100                    STQ     99,,PR0

      230     8530    2           END;

      231     8531
      232     8532    1      B$JIT.DO$=ADDR(NIL);

   8532  1 000366   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000367   000233 756100                    STQ     155,,PR0

      233     8533
      234     8534        /* Free all user pages in isr and all data segments except the cp's. */
      235     8535    1      CALL JSU$RELMEM(0);

   8535  1 000370   000004 630400 2                  EPPR0   4
         1 000371   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000372   000000 701000 xent               TSX1    JSU$RELMEM
         1 000373   000000 011000                    NOP     0

      236     8536    1      CALL INIT_ROSEG;                     /* Initialize the read-only segment   */

   8536  1 000374   000003 701000 1                  TSX1    INIT_ROSEG
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:36   
         1 000375   000000 011000                    NOP     0

      237     8537    1      CALL JSU$RSTLMS;                     /* Reset jit memory delimiters        */

   8537  1 000376   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000377   000000 701000 xent               TSX1    JSU$RSTLMS
         1 000400   000000 011000                    NOP     0

      238     8538
      239     8539        /* Release any pseudo resources that Job Step acquired for this
      240     8540           user when the run-unit was put into execution.  If M$LINK is in
      241     8541           progress, the count will have been set to zero so they won't get
      242     8542           released here.
      243     8543        */
      244     8544    1      IF B$JIT.PSEUDO_COUNT ~= 0

   8544  1 000401   000000 470400 xsym               LDP0    B$JIT$
         1 000402   000321 236100                    LDQ     209,,PR0
         1 000403   000777 316007                    CANQ    511,DL
         1 000404   000445 600000 1                  TZE     s:8560

      245     8545    2      THEN DO;

      246     8546    2           FPT$RESCTL = J_FPT_RESCTL;

   8546  1 000405   000100 100400                    MLR     fill='000'O
         1 000406   000000 000110 xsym               ADSC9   J_FPT_RESCTL             cn=0,n=72
         1 000407   200012 000110                    ADSC9   FPT$RESCTL,,AUTO         cn=0,n=72

      247     8547    2           FPT$RESCTL.V_ = VECTOR(FPT$RESCTL.V);

   8547  1 000410   000006 235000 2                  LDA     6
         1 000411   200050 452500                    STP2    ROPGS+1,,AUTO
         1 000412   200050 236100                    LDQ     ROPGS+1,,AUTO
         1 000413   000026 036003                    ADLQ    22,DU
         1 000414   200012 757100                    STAQ    FPT$RESCTL,,AUTO

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:37   
      248     8548    2           FPT$RESCTL.PSEUDO_ = VECTOR(VLP$PS);

   8548  1 000415   000007 235000 2                  LDA     7
         1 000416   200050 452500                    STP2    ROPGS+1,,AUTO
         1 000417   200050 236100                    LDQ     ROPGS+1,,AUTO
         1 000420   000034 036003                    ADLQ    28,DU
         1 000421   200014 757100                    STAQ    FPT$RESCTL+2,,AUTO

      249     8549    2           VLP$PS = '0'B;

   8549  1 000422   000100 100400                    MLR     fill='000'O
         1 000423   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000424   200034 000050                    ADSC9   VLP$PS,,AUTO             cn=0,n=40

      250     8550    2           VLP$PS.NN# = 1;

   8550  1 000425   000001 235007                    LDA     1,DL
         1 000426   200034 755100                    STA     VLP$PS,,AUTO

      251     8551    2           VLP$PS.PSLIST.PSEUDO#(0) = B$JIT.PSEUDO_TEXT;

   8551  1 000427   000322 237100                    LDAQ    210,,PR0
         1 000430   200040 757100                    STAQ    VLP$PS+4,,AUTO

      252     8552    2           VLP$PS.PSLIST.NUM#(0) = B$JIT.PSEUDO_COUNT;

   8552  1 000431   000321 236100                    LDQ     209,,PR0
         1 000432   000033 736000                    QLS     27
         1 000433   200042 552140                    STBQ    VLP$PS+6,'40'O,AUTO

      253     8553
      254     8554    2           CALL M$MRELRES(FPT$RESCTL) ALTRET(IMPOSSIBLE);

   8554  1 000434   200012 631500                    EPPR1   FPT$RESCTL,,AUTO
         1 000435   200050 451500                    STP1    ROPGS+1,,AUTO
         1 000436   200050 630500                    EPPR0   ROPGS+1,,AUTO
         1 000437   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:38   
         1 000440   000000 701000 xent               TSX1    M$MRELRES
         1 000441   000442 702000 1                  TSX2    IMPOSSIBLE

   8552  1 000442                       IMPOSSIBLE   null
      255     8555    2   IMPOSSIBLE: ;
      256     8556    2           B$JIT.PSEUDO_COUNT = 0;

   8556  1 000442   000000 470400 xsym               LDP0    B$JIT$
         1 000443   000000 236003                    LDQ     0,DU
         1 000444   000321 552104                    STBQ    209,'04'O,PR0

      257     8557    2           END;

      258     8558
      259     8559        /* If any M$LINKS have been done, go clean up after them */
      260     8560    1      IF NOT (B$JIT.JUNK & (%JJ_MLINKIP# | %JJ_LNKRETIP#) ) AND B$JIT.LNKCNT > 0

   8560  1 000445   000315 220100                    LDX0    205,,PR0
         1 000446   000003 360003                    ANX0    3,DU
         1 000447   000460 601000 1                  TNZ     s:8568
         1 000450   000314 236100                    LDQ     204,,PR0
         1 000451   000777 316007                    CANQ    511,DL
         1 000452   000460 600000 1                  TZE     s:8568

      261     8561    2      THEN DO;

      262     8562    2           CALL JLS$CLEANUP ALTRET(NO_CLEANUP);

   8562  1 000453   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000454   000000 701000 xent               TSX1    JLS$CLEANUP
         1 000455   000456 702000 1                  TSX2    NO_CLEANUP

   8562  1 000456                       NO_CLEANUP   null
      263     8563    2   NO_CLEANUP: ;
      264     8564    2           CALL INIT_ROSEG;

   8564  1 000456   000003 701000 1                  TSX1    INIT_ROSEG
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:39   
         1 000457   000000 011000                    NOP     0

      265     8565    2           END;

      266     8566
      267     8567        /* Now, reset all program-specific jit & roseg information */
      268     8568    1      WSR=7;

   8568  1 000460   000007 235007                    LDA     7,DL
         1 000461   200004 755100                    STA     WSR,,AUTO

      269     8569    2      DO I = 0 TO MAXECCB;                 /* Clear all appropriate eccb's       */

   8569  1 000462   200003 450100                    STZ     I,,AUTO
         1 000463   000510 710000 1                  TRA     s:8574+1

      270     8570    2           IF I=0 THEN S$CU$->B$U.FLG.EVNT='0'B;

   8570  1 000464   200003 235100                    LDA     I,,AUTO
         1 000465   000471 601000 1                  TNZ     s:8571

   8570  1 000466   000000 470400 xsym               LDP0    S$CU$
         1 000467   000010 236000 2                  LDQ     8
         1 000470   000000 356100                    ANSQ    0,,PR0

      271     8571    2           CALL SSV$DORUND(WSR);

   8571  1 000471   200004 630500                    EPPR0   WSR,,AUTO
         1 000472   200050 450500                    STP0    ROPGS+1,,AUTO
         1 000473   200050 630500                    EPPR0   ROPGS+1,,AUTO
         1 000474   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000475   000000 701000 xent               TSX1    SSV$DORUND
         1 000476   000000 011000                    NOP     0

      272     8572    2           WSR=WSR-1;

   8572  1 000477   000001 336007                    LCQ     1,DL
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:40   
         1 000500   200004 056100                    ASQ     WSR,,AUTO

      273     8573    2           B$ROSEG.ECCB(I) = '0'B;

   8573  1 000501   200003 236100                    LDQ     I,,AUTO
         1 000502   000030 402007                    MPY     24,DL
         1 000503   000000 470400 xsym               LDP0    B$ROSEG$
         1 000504   000106 100400                    MLR     fill='000'O
         1 000505   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000506   000024 000030                    ADSC9   20,Q,PR0                 cn=0,n=24

      274     8574    2           END;

   8574  1 000507   200003 054100                    AOS     I,,AUTO
         1 000510   200003 236100                    LDQ     I,,AUTO
         1 000511   200005 116100                    CMPQ    MAXECCB,,AUTO
         1 000512   000464 604400 1                  TMOZ    s:8570

      275     8575        /* If we have an extra TSTACK page, release it now. Maybe we
      276     8576           won't need it later.
      277     8577        */
      278     8578    1      IF B$UPT$ -> B$MAP (%AJITPG) ~= MM_FPMC

   8578  1 000513   000000 470400 xsym               LDP0    B$UPT$
         1 000514   000014 236100                    LDQ     12,,PR0
         1 000515   000000 116000 xsym               CMPQ    MM_FPMC
         1 000516   000564 600000 1                  TZE     s:8595

      279     8579    2      THEN DO;

      280     8580    2           I = B$UPT$ -> B$MAP.RPN (%AJITPG);

   8580  1 000517   000014 236100                    LDQ     12,,PR0
         1 000520   000022 772000                    QRL     18
         1 000521   200003 756100                    STQ     I,,AUTO

      281     8581    2           B$UPT$ -> B$MAP (%AJITPG) = MM_FPMC;
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:41   

   8581  1 000522   000000 236000 xsym               LDQ     MM_FPMC
         1 000523   000014 756100                    STQ     12,,PR0

      282     8582    3           IF HW_WSQ0PT THEN DO;

   8582  1 000524   000000 234000 xsym               SZN     HW_WSQ0PT
         1 000525   000543 605000 1                  TPL     s:8587

      283     8583    3                I = B$IPHYMAP$->MM$IPHY_MAP(I);

   8583  1 000526   200003 235100                    LDA     I,,AUTO
         1 000527   000001 735000                    ALS     1
         1 000530   000000 471400 xsym               LDP1    B$IPHYMAP$
         1 000531   000100 101505                    MRL     fill='000'O
         1 000532   100000 000002                    ADSC9   0,A,PR1                  cn=0,n=2
         1 000533   200003 000004                    ADSC9   I,,AUTO                  cn=0,n=4

      284     8584    3                CALL MMB$FPP(I);

   8584  1 000534   200003 633500                    EPPR3   I,,AUTO
         1 000535   200050 453500                    STP3    ROPGS+1,,AUTO
         1 000536   200050 630500                    EPPR0   ROPGS+1,,AUTO
         1 000537   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000540   000000 701000 xent               TSX1    MMB$FPP
         1 000541   000000 011000                    NOP     0

      285     8585    3                END;

   8585  1 000542   000551 710000 1                  TRA     s:8589

      286     8586    3           ELSE DO;

      287     8587    3                CALL MMB$FPP (I);

   8587  1 000543   200003 631500                    EPPR1   I,,AUTO
         1 000544   200050 451500                    STP1    ROPGS+1,,AUTO
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:42   
         1 000545   200050 630500                    EPPR0   ROPGS+1,,AUTO
         1 000546   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000547   000000 701000 xent               TSX1    MMB$FPP
         1 000550   000000 011000                    NOP     0

      288     8588    3                END;

      289     8589    2           CALL HFC$ASSOCCLR(%USERWSQ,%AJITPG,1);

   8589  1 000551   000012 630400 2                  EPPR0   10
         1 000552   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000553   000000 701000 xent               TSX1    HFC$ASSOCCLR
         1 000554   000000 011000                    NOP     0

      290     8590    2           B$JIT.PCC = B$JIT.PCC - 1;

   8590  1 000555   000000 470400 xsym               LDP0    B$JIT$
         1 000556   000202 720100                    LXL0    130,,PR0
         1 000557   777777 621010                    EAX1    -1,X0
         1 000560   000202 441100                    SXL1    130,,PR0

      291     8591    2           B$JIT.PPC = B$JIT.PPC - 1;

   8591  1 000561   000207 720100                    LXL0    135,,PR0
         1 000562   777777 622010                    EAX2    -1,X0
         1 000563   000207 442100                    SXL2    135,,PR0

      292     8592    2           END;

      293     8593
      294     8594        /* Reset user privileges if really ending a job step */
      295     8595    1      B$JIT.PRIV.PRC = '0'B/*Reset processor privileges*/;

   8595  1 000564   000000 470400 xsym               LDP0    B$JIT$
         1 000565   000016 450100                    STZ     14,,PR0

      296     8596    1      IF NOT (B$JIT.JUNK & (%JJ_MLINKIP# | %JJ_LNKRETIP#) )
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:43   

   8596  1 000566   000315 220100                    LDX0    205,,PR0
         1 000567   000003 360003                    ANX0    3,DU
         1 000570   000601 601000 1                  TNZ     s:8600
         1 000571   000000 235000 xsym               LDA     S_CUN
         1 000572   000020 115007                    CMPA    16,DL
         1 000573   000601 602000 1                  TNC     s:8600
         1 000574   000315 720100                    LXL0    205,,PR0
         1 000575   000601 600000 1                  TZE     s:8600

      297     8597    1        AND (S_CUN > JG_MING#)        /*don't reset sys ghosts (for disk boot)*/
      298     8598    1        AND (B$JIT.STEPS ~= 0)             /*for batch*/
      299     8599    1      THEN B$JIT.PRIV.JOB = B$JIT.PRIV.JOB & ES_STEPPRIVMASK;

   8599  1 000576   000015 236100                    LDQ     13,,PR0
         1 000577   000000 376000 xsym               ANQ     ES_STEPPRIVMASK
         1 000600   000015 756100                    STQ     13,,PR0

      300     8600    1      B$JIT.PRIV.ACTIVE = B$JIT.PRIV.JOB;

   8600  1 000601   000015 236100                    LDQ     13,,PR0
         1 000602   000013 756100                    STQ     11,,PR0

      301     8601
      302     8602        /* Make sure this guy doesn't keep any special jit access */
      303     8603           %RSETFLG (LS$ = B$USERLS$ , SEGID = %JITSID , FLG = %DSWRITE);

   8604  1 000603   000000 471400 xsym               LDP1    B$USERLS$
         1 000604   100002 236100                    LDQ     2,,PR1
         1 000605   000024 736000                    QLS     20
         1 000606   777000 376003                    ANQ     -512,DU
         1 000607   577000 376003                    ANQ     -66048,DU
         1 000610   000024 772000                    QRL     20
         1 000611   100002 676100                    ERQ     2,,PR1
         1 000612   177600 376007                    ANQ     65408,DL
         1 000613   100002 656100                    ERSQ    2,,PR1

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:44   
      304     8606           %RSETFLG (LS$ = B$DBLS$ , SEGID = %JITSID , FLG = %DSWRITE);

   8607  1 000614   000000 473400 xsym               LDP3    B$DBLS$
         1 000615   300002 236100                    LDQ     2,,PR3
         1 000616   000024 736000                    QLS     20
         1 000617   777000 376003                    ANQ     -512,DU
         1 000620   577000 376003                    ANQ     -66048,DU
         1 000621   000024 772000                    QRL     20
         1 000622   300002 676100                    ERQ     2,,PR3
         1 000623   177600 376007                    ANQ     65408,DL
         1 000624   300002 656100                    ERSQ    2,,PR3

      305     8609        /* ...OR any special access descriptors. */
      306     8610           %SETNULL (LS$ = B$USERLS$ , SEGID = %SPCL1SID);

   8611  1 000625   000001 236000 2                  LDQ     1
         1 000626   100042 356100                    ANSQ    34,,PR1

   8611  1 000627   177777 236007                    LDQ     65535,DL
         1 000630   100042 356100                    ANSQ    34,,PR1

      307     8613           %SETNULL (LS$ = B$USERLS$ , SEGID = %SPCL2SID);

   8614  1 000631   000001 236000 2                  LDQ     1
         1 000632   100044 356100                    ANSQ    36,,PR1

   8614  1 000633   177777 236007                    LDQ     65535,DL
         1 000634   100044 356100                    ANSQ    36,,PR1

      308     8616           %SETNULL (LS$ = B$USERLS$ , SEGID = %SPCL3SID);

   8617  1 000635   000001 236000 2                  LDQ     1
         1 000636   100046 356100                    ANSQ    38,,PR1

   8617  1 000637   177777 236007                    LDQ     65535,DL
         1 000640   100046 356100                    ANSQ    38,,PR1

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:45   
      309     8619           %SETNULL (LS$ = B$USERLS$ , SEGID = %SPCL4SID);

   8620  1 000641   000001 236000 2                  LDQ     1
         1 000642   100050 356100                    ANSQ    40,,PR1

   8620  1 000643   177777 236007                    LDQ     65535,DL
         1 000644   100050 356100                    ANSQ    40,,PR1

      310     8622           %SETNULL (LS$ = B$USERLS$ , SEGID = %SPCL5SID);

   8623  1 000645   000001 236000 2                  LDQ     1
         1 000646   100054 356100                    ANSQ    44,,PR1

   8623  1 000647   177777 236007                    LDQ     65535,DL
         1 000650   100054 356100                    ANSQ    44,,PR1

      311     8625           %SETNULL (LS$ = B$USERLS$ , SEGID = %SPCL6SID);

   8626  1 000651   000001 236000 2                  LDQ     1
         1 000652   100056 356100                    ANSQ    46,,PR1

   8626  1 000653   177777 236007                    LDQ     65535,DL
         1 000654   100056 356100                    ANSQ    46,,PR1

      312     8628           %SETNULL (LS$ = B$USERLS$ , SEGID = %SPCL7SID);

   8629  1 000655   000001 236000 2                  LDQ     1
         1 000656   100060 356100                    ANSQ    48,,PR1

   8629  1 000657   177777 236007                    LDQ     65535,DL
         1 000660   100060 356100                    ANSQ    48,,PR1

      313     8631           %SETNULL (LS$ = B$USERLS$ , SEGID = %SPCL8SID);

   8632  1 000661   000001 236000 2                  LDQ     1
         1 000662   100062 356100                    ANSQ    50,,PR1

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:46   
   8632  1 000663   177777 236007                    LDQ     65535,DL
         1 000664   100062 356100                    ANSQ    50,,PR1

      314     8634
      315     8635        /* Reset all data segment descriptors to have their normal bases
      316     8636           in case any unsatisfiable requests have left 'gaps'.  Note that
      317     8637           it is not possible for the cp to create these gaps, as all of
      318     8638           its memory requests are always satisfied.                       */
      319     8639    1      IF NOT (B$JIT.JUNK & (%JJ_MLINKIP# | %JJ_LNKRETIP#) )

   8639  1 000665   000315 220100                    LDX0    205,,PR0
         1 000666   000003 360003                    ANX0    3,DU
         1 000667   000724 601000 1                  TNZ     s:8716

      320     8640    2      THEN DO;

      321     8641                %SETDBASE (LS$ = B$USERLS$ , SEGID = %DS1SID , DBASE = DS_BASE);

   8642  1 000670   000015 235000 2                  LDA     13
         1 000671   100011 755100                    STA     9,,PR1

      322     8644                %SETDBASE (LS$ = B$USERLS$ , SEGID = %DS2SID , DBASE = DS_BASE);

   8645  1 000672   100013 755100                    STA     11,,PR1

      323     8647                %SETDBASE (LS$ = B$USERLS$ , SEGID = %DS3SID , DBASE = DS_BASE);

   8648  1 000673   100015 755100                    STA     13,,PR1

      324     8650                %SETDBASE (LS$ = B$USERLS$ , SEGID = %DS4SID , DBASE = DS_BASE);

   8651  1 000674   100017 755100                    STA     15,,PR1

      325     8653                %SETDBASE (LS$ = B$USERLS$ , SEGID = %DS5SID , DBASE = DS_BASE);

   8654  1 000675   100021 755100                    STA     17,,PR1

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:47   
      326     8656                %SETDBASE (LS$ = B$USERLS$ , SEGID = %DS6SID , DBASE = DS_BASE);

   8657  1 000676   100023 755100                    STA     19,,PR1

      327     8659                %SETDBASE (LS$ = B$USERLS$ , SEGID = %DS7SID , DBASE = DS_BASE);

   8660  1 000677   100025 755100                    STA     21,,PR1

      328     8662                %SETDBASE (LS$ = B$USERLS$ , SEGID = %DS8SID , DBASE = DS_BASE);

   8663  1 000700   100027 755100                    STA     23,,PR1

      329     8665                %SETDBASE (LS$ = B$DBLS$ , SEGID = %DS1SID , DBASE = DDS_BASE);

   8666  1 000701   000016 235000 2                  LDA     14
         1 000702   300011 755100                    STA     9,,PR3

      330     8668                %SETDBASE (LS$ = B$DBLS$ , SEGID = %DS2SID , DBASE = DDS_BASE);

   8669  1 000703   300013 755100                    STA     11,,PR3

      331     8671                %SETDBASE (LS$ = B$DBLS$ , SEGID = %DS3SID , DBASE = DDS_BASE);

   8672  1 000704   300015 755100                    STA     13,,PR3

      332     8674                %SETDBASE (LS$ = B$DBLS$ , SEGID = %DS4SID , DBASE = DDS_BASE);

   8675  1 000705   300017 755100                    STA     15,,PR3

      333     8677                %SETDBASE (LS$ = B$DBLS$ , SEGID = %DS5SID , DBASE = DDS_BASE);

   8678  1 000706   300021 755100                    STA     17,,PR3

      334     8680                %SETDBASE (LS$ = B$DBLS$ , SEGID = %DS6SID , DBASE = DDS_BASE);

   8681  1 000707   300023 755100                    STA     19,,PR3

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:48   
      335     8683                %SETDBASE (LS$ = B$DBLS$ , SEGID = %DS7SID , DBASE = DDS_BASE);

   8684  1 000710   300025 755100                    STA     21,,PR3

      336     8686                %SETDBASE (LS$ = B$DBLS$ , SEGID = %DS8SID , DBASE = DDS_BASE);

   8687  1 000711   300027 755100                    STA     23,,PR3

      337     8689                %SETDBASE (LS$ = B$ASLLS$ , SEGID = %DS1SID , DBASE = ADS_BASE);

   8690  1 000712   000017 235000 2                  LDA     15
         1 000713   000000 474400 xsym               LDP4    B$ASLLS$
         1 000714   400011 755100                    STA     9,,PR4

      338     8692                %SETDBASE (LS$ = B$ASLLS$ , SEGID = %DS2SID , DBASE = ADS_BASE);

   8693  1 000715   400013 755100                    STA     11,,PR4

      339     8695                %SETDBASE (LS$ = B$ASLLS$ , SEGID = %DS3SID , DBASE = ADS_BASE);

   8696  1 000716   400015 755100                    STA     13,,PR4

      340     8698                %SETDBASE (LS$ = B$ASLLS$ , SEGID = %DS4SID , DBASE = ADS_BASE);

   8699  1 000717   400017 755100                    STA     15,,PR4

      341     8701                %SETDBASE (LS$ = B$ASLLS$ , SEGID = %DS5SID , DBASE = ADS_BASE);

   8702  1 000720   400021 755100                    STA     17,,PR4

      342     8704                %SETDBASE (LS$ = B$ASLLS$ , SEGID = %DS6SID , DBASE = ADS_BASE);

   8705  1 000721   400023 755100                    STA     19,,PR4

      343     8707                %SETDBASE (LS$ = B$ASLLS$ , SEGID = %DS7SID , DBASE = ADS_BASE);

   8708  1 000722   400025 755100                    STA     21,,PR4
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:49   

      344     8710                %SETDBASE (LS$ = B$ASLLS$ , SEGID = %DS8SID , DBASE = ADS_BASE);

   8711  1 000723   400027 755100                    STA     23,,PR4

      345     8713    2           END;

      346     8714
      347     8715        /* Reset JIT.ERROR and lots of other basic step-specific stuff */
      348     8716    1      B$JIT.ERR = '0'B;

   8716  1 000724   000012 450100                    STZ     10,,PR0

      349     8717    1      IF (B$JIT.JUNK & %JJ_LNKRETIP#)

   8717  1 000725   000315 220100                    LDX0    205,,PR0
         1 000726   000002 360003                    ANX0    2,DU
         1 000727   000735 600000 1                  TZE     s:8719

      350     8718    1      THEN B$JIT.XCONF = (B$JIT.XCONF & %XC_QUIT#);

   8718  1 000730   000316 236100                    LDQ     206,,PR0
         1 000731   777000 376003                    ANQ     -512,DU
         1 000732   001000 376003                    ANQ     512,DU
         1 000733   000316 552140                    STBQ    206,'40'O,PR0
         1 000734   000737 710000 1                  TRA     s:8720

      351     8719    1      ELSE B$JIT.XCONF='0'B;

   8719  1 000735   000000 236003                    LDQ     0,DU
         1 000736   000316 552140                    STBQ    206,'40'O,PR0

      352     8720    1      B$JIT.PROG_ENTRY='000'O;

   8720  1 000737   000000 236003                    LDQ     0,DU
         1 000740   000170 552140                    STBQ    120,'40'O,PR0

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:50   
      353     8721
      354     8722        /* Reset Limit Exceeded flags if this is an on-line user. */
      355     8723    1      IF B$JIT.MODE = %M_INT#

   8723  1 000741   000000 236100                    LDQ     0,,PR0
         1 000742   740000 376003                    ANQ     -16384,DU
         1 000743   140000 116003                    CMPQ    49152,DU
         1 000744   000756 601000 1                  TNZ     s:8728

      356     8724    2      THEN DO;

      357     8725    2           B$JIT.XLIMFLG = '000'O;

   8725  1 000745   000000 236003                    LDQ     0,DU
         1 000746   000316 552110                    STBQ    206,'10'O,PR0

      358     8726    2           B$JIT.FRS = (B$JIT.FRS & %RS_CL3#);

   8726  1 000747   000314 236100                    LDQ     204,,PR0
         1 000750   000011 736000                    QLS     9
         1 000751   777000 376003                    ANQ     -512,DU
         1 000752   640000 376003                    ANQ     -49152,DU
         1 000753   000011 772000                    QRL     9
         1 000754   000314 552120                    STBQ    204,'20'O,PR0

      359     8727    2           END;

   8727  1 000755   000764 710000 1                  TRA     s:8731

      360     8728    1      ELSE B$JIT.FRS = (B$JIT.FRS & %RS_CL23#);

   8728  1 000756   000314 236100                    LDQ     204,,PR0
         1 000757   000011 736000                    QLS     9
         1 000760   777000 376003                    ANQ     -512,DU
         1 000761   740000 376003                    ANQ     -16384,DU
         1 000762   000011 772000                    QRL     9
         1 000763   000314 552120                    STBQ    204,'20'O,PR0
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:51   

      361     8729
      362     8730        /* Reset any request for LINK or LDTRC in case of abort from Job Step */
      363     8731    1      B$JIT.SVLDTF=(B$JIT.SVLDTF & %SVL_LYNX#);

   8731  1 000764   000316 236100                    LDQ     206,,PR0
         1 000765   000033 736000                    QLS     27
         1 000766   030000 376003                    ANQ     12288,DU
         1 000767   000033 772000                    QRL     27
         1 000770   000316 552104                    STBQ    206,'04'O,PR0

      364     8732
      365     8733        /* Write Stop Processor Acct record to *S if processor accounting in effect */
      366     8734    1      IF (B$JIT.CPFLAGS1 & %CP_PROCACCT#) AND NOT(B$JIT.JUNK2 & %JJ2_ASAVE_LNK#)

   8734  1 000771   000143 236100                    LDQ     99,,PR0
         1 000772   000003 376000 0                  ANQ     3
         1 000773   001012 600000 1                  TZE     s:8744
         1 000774   000321 220100                    LDX0    209,,PR0
         1 000775   000020 360003                    ANX0    16,DU
         1 000776   001012 601000 1                  TNZ     s:8744

      367     8735    2      THEN DO;

      368     8736    2           B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1 & %(~CP_PROCACCT#);

   8736  1 000777   000143 236100                    LDQ     99,,PR0
         1 001000   000004 376000 0                  ANQ     4
         1 001001   000143 756100                    STQ     99,,PR0

      369     8737    2           ACCT_TYP = %PSTOP#;

   8737  1 001002   002000 236003                    LDQ     1024,DU
         1 001003   200010 756100                    STQ     ACCT_TYP,,AUTO

      370     8738    2           CALL JSU$WSTAR(ACCT_TYP);

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:52   
   8738  1 001004   200010 634500                    EPPR4   ACCT_TYP,,AUTO
         1 001005   200050 454500                    STP4    ROPGS+1,,AUTO
         1 001006   200050 630500                    EPPR0   ROPGS+1,,AUTO
         1 001007   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001010   000000 701000 xent               TSX1    JSU$WSTAR
         1 001011   000000 011000                    NOP     0

      371     8739    2           END;

      372     8740
      373     8741        /* Reset the monitor flags in JIT.CPFLAGS1 and generally cleanup */
      374     8742        /* unless this is M$LINK-LDTRC or returning, in which case we    */
      375     8743        /* are not at Job Step.                                          */
      376     8744    1      IF NOT (B$JIT.JUNK & (%JJ_MLINKIP# | %JJ_LNKRETIP#) )

   8744  1 001012   000000 470400 xsym               LDP0    B$JIT$
         1 001013   000315 220100                    LDX0    205,,PR0
         1 001014   000003 360003                    ANX0    3,DU
         1 001015   001106 601000 1                  TNZ     s:8766

      377     8745    2      THEN DO;

      378     8746    2           S$CU$->B$U.FLG = S$CU$->B$U.FLG | %U_STEP;

   8746  1 001016   000000 471400 xsym               LDP1    S$CU$
         1 001017   100000 236100                    LDQ     0,,PR1
         1 001020   000005 276000 0                  ORQ     5
         1 001021   100000 756100                    STQ     0,,PR1

      379     8747
      380     8748        /* Write Stop Step Acct record to *S if step accounting in effect */
      381     8749    2           IF (B$JIT.CPFLAGS1 & %CP_SSTART#)

   8749  1 001022   000143 236100                    LDQ     99,,PR0
         1 001023   000006 376000 0                  ANQ     6
         1 001024   001041 600000 1                  TZE     s:8756

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:53   
      382     8750                                                /* prevents duplicate SSTOP records   */
      383     8751    3           THEN DO;

      384     8752    3                ACCT_TYP = %SSTOP#;

   8752  1 001025   004000 236003                    LDQ     2048,DU
         1 001026   200010 756100                    STQ     ACCT_TYP,,AUTO

      385     8753    3                CALL JSU$WSTAR(ACCT_TYP);

   8753  1 001027   200010 631500                    EPPR1   ACCT_TYP,,AUTO
         1 001030   200050 451500                    STP1    ROPGS+1,,AUTO
         1 001031   200050 630500                    EPPR0   ROPGS+1,,AUTO
         1 001032   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001033   000000 701000 xent               TSX1    JSU$WSTAR
         1 001034   000000 011000                    NOP     0

      386     8754    3                B$JIT.CPFLAGS1 = (B$JIT.CPFLAGS1 & %CP_RSSTART#);

   8754  1 001035   000000 470400 xsym               LDP0    B$JIT$
         1 001036   000143 236100                    LDQ     99,,PR0
         1 001037   000007 376000 0                  ANQ     7
         1 001040   000143 756100                    STQ     99,,PR0

      387     8755    3                END;

      388     8756    2           B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1  & %(~CP_RUND#);

   8756  1 001041   000143 236100                    LDQ     99,,PR0
         1 001042   000010 376000 0                  ANQ     8
         1 001043   000143 756100                    STQ     99,,PR0

      389     8757    2           B$JIT.CPFLAGS1 = (B$JIT.CPFLAGS1 | %CP_JSTEP#);

   8757  1 001044   000011 276000 0                  ORQ     9
         1 001045   000143 756100                    STQ     99,,PR0

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:54   
      390     8758    2           I=FM$CFUX.SETH;

   8758  1 001046   000000 471400 xsym               LDP1    F$CFU$
         1 001047   100005 236100                    LDQ     5,,PR1
         1 001050   000022 772000                    QRL     18
         1 001051   200003 756100                    STQ     I,,AUTO

      391     8759    2           IF B$JIT.MODE ~= %M_BATCH#

   8759  1 001052   000000 236100                    LDQ     0,,PR0
         1 001053   740000 376003                    ANQ     -16384,DU
         1 001054   040000 116003                    CMPQ    16384,DU
         1 001055   001111 600000 1                  TZE     s:8768

      392     8760    3           THEN DO WHILE(I~=0);

   8760  1 001056   200003 235100                    LDA     I,,AUTO
         1 001057   001111 600000 1                  TZE     s:8768

      393     8761    3                IF FM$SET.DSMTF(I) THEN CALL FMP$UDLIST(FM$SET(I));

   8761  1 001060   200003 235100                    LDA     I,,AUTO
         1 001061   000003 735000                    ALS     3
         1 001062   000000 470400 xsym               LDP0    FM$SET$
         1 001063   000002 236105                    LDQ     2,AL,PR0
         1 001064   020000 316003                    CANQ    8192,DU
         1 001065   001076 600000 1                  TZE     s:8762

   8761  1 001066   200003 236100                    LDQ     I,,AUTO
         1 001067   000025 736000                    QLS     21
         1 001070   000000 036000 xsym               ADLQ    FM$SET$
         1 001071   200050 756100                    STQ     ROPGS+1,,AUTO
         1 001072   200050 630500                    EPPR0   ROPGS+1,,AUTO
         1 001073   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001074   000000 701000 xent               TSX1    FMP$UDLIST
         1 001075   000000 011000                    NOP     0

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:55   
      394     8762    3                I=FM$SET.SETL(I);

   8762  1 001076   200003 235100                    LDA     I,,AUTO
         1 001077   000003 735000                    ALS     3
         1 001100   000000 470400 xsym               LDP0    FM$SET$
         1 001101   000005 236105                    LDQ     5,AL,PR0
         1 001102   000022 772000                    QRL     18
         1 001103   200003 756100                    STQ     I,,AUTO

      395     8763    3                END;

   8763  1 001104   001060 601000 1                  TNZ     s:8761

      396     8764    2           END;

   8764  1 001105   001111 710000 1                  TRA     s:8768

      397     8765
      398     8766    1      ELSE B$JIT.CPFLAGS1 = (B$JIT.CPFLAGS1 & %CP_RESET#);

   8766  1 001106   000143 236100                    LDQ     99,,PR0
         1 001107   000012 376000 0                  ANQ     10
         1 001110   000143 756100                    STQ     99,,PR0

      399     8767
      400     8768    1      B$JIT.EUP = %ISEGHI;                 /* Reset end user page                */

   8768  1 001111   000477 220003                    LDX0    319,DU
         1 001112   000000 470400 xsym               LDP0    B$JIT$
         1 001113   000204 440100                    SXL0    132,,PR0

      401     8769    1      B$JIT.DDUL = %ISEGHI;                /* Reset dynamic data upper limit     */

   8769  1 001114   000200 440100                    SXL0    128,,PR0

      402     8770        /* Re-initialize ssr and asr */
      403     8771    1      CALL JSN$1SSSF;
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:56   

   8771  1 001115   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 001116   000000 701000 xent               TSX1    JSN$1SSSF
         1 001117   000000 011000                    NOP     0

      404     8772    1      CALL JSN$SETASR(J_ASR_E);

   8772  1 001120   000020 630400 2                  EPPR0   16
         1 001121   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001122   000000 701000 xent               TSX1    JSN$SETASR
         1 001123   000000 011000                    NOP     0

      405     8773    1      CALL UDN$MAGIC;

   8773  1 001124   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 001125   000000 701000 xent               TSX1    UDN$MAGIC
         1 001126   000000 011000                    NOP     0

      406     8774    1      J_CRASHUN = 0;                       /* Reset crashun - rundown complete   */

   8774  1 001127   000000 450000 xsym               STZ     J_CRASHUN

      407     8775    1      RETURN;

   8775  1 001130   000000 702200 xent               TSX2  ! X66_ARET

(unnamed)
 Sect OctLoc
   0     000   000200 000000   000000 010000   777777 677777   000000 001000    ................
   0     004   777777 776777   000000 100000   010000 000000   406777 777777    ......@.........
   0     010   677777 777777   200000 000000   416777 777777                    ............

(unnamed)
 Sect OctLoc
   2     000   000000 006003   777777 777377   000012 006000   000000 006000    ................
   2     004   000002 006000   777377 777777   000005 777640   000011 777640    ................
   2     010   777777 757777   000000 000014   000012 006000   000011 006000    ................
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:57   
   2     014   000003 006000   000011 300000   000005 100000   000006 100000    ..........@...@.
   2     020   000000 006000                                                    ....
      408     8776    1   END JSR$RUNDOWN;

PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:58   
--  Include file information  --

   FM$MACROS.:E05TOU  is referenced.
   B$MAP.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   UE_CP6.:E05TOU  is referenced.
   SS_SCHED_C.:E05TOU  is referenced.
   HF_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   MM_MACRO_M.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   MM$SYSGEN.:E05TOU  is referenced.
   M_INFO_C.:E05TOU  is referenced.
   MM_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$USER.:E05TOU  cannot be made into a system file and is referenced.
   B$ROSEG.:E05TOU  cannot be made into a system file and is referenced.
   F_CP6.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   JG_GHOSTS_C.:E05TOU  is referenced.
   B_MLSMAC_C.:E05TOU  is referenced.
   B_ULSMAC_C.:E05TOU  is referenced.
   B_LSDATA_C.:E05TOU  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure JSR$RUNDOWN.
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:59   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    10-0-0/w UBIN(9)     r     1 ACCT_TYP                   6-0-0/b BIT         r     1 CPFLAGS
    47-0-0/w SBIN        r     1 ERR_DUMMY                 12-0-0/d STRC(648)   r     1 FPT$RESCTL
     3-0-0/w SBIN        r     1 I                          5-0-0/w SBIN        r     1 MAXECCB
    47-0-0/w SBIN        r     1 ROPGS                      7-0-0/w PTR         r     1 TPTR$
    34-0-0/d STRC(360)   r     1 VLP$PS                     4-0-0/w SBIN        r     1 WSR

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$ASLLS$                   0-0-0/w PTR         r     1 B$DBLS$
     0-0-0/w PTR         r     1 B$IPHYMAP$                 0-0-0/w PTR         r     1 B$JIT$
     0-0-0/w PTR         r     1 B$M$LM$                    0-0-0/w PTR         r     1 B$M$UC$
     0-0-0/w PTR         r     1 B$ROSEG$                   0-0-0/w PTR         r     1 B$UPT$
     0-0-0/w PTR         r     1 B$USERLS$                  0-0-0/b BIT         r     1 ES_STEPPRIVMASK
     0-0-0/w PTR         r     1 F$CFU$                     0-0-0/w PTR         r     1 FM$SET$
     0-0-0/w BIT         r     1 HW_WSQ0PT                  0-0-0/w UBIN        r     1 IRM_SYSID
     0-0-0/d BIT (72)    r     1 J_ASR_E                    0-0-0/w SBIN        r     1 J_CRASHUN
     0-0-0/d STRC(648)   r     1 J_FPT_RESCTL               0-0-0/w PTR         r     1 MM_BYP$
     0-0-0/b STRC        r     1 MM_FPMC                    0-0-0/w PTR         r     1 S$CU$
     0-0-0/w UBIN        r     1 S_CUN                      0-0-0/w UBIN        r     1 S_TDCPUF

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 APTR$(0:0)                 0-0-0/w STRC(180)   r     1 B$ECCB
     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/w STRC        r     1 B$MAP(0:1023)
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:60   
     0-0-0/d STRC(72)    r     1 B$ROAVAIL                  0-0-0/d STRC(3024)  r     1 B$ROSEG
     0-0-0/d STRC(576)   r     1 B$U                        0-0-0/d STRC(2592)  r     1 B$ULNK
     0-0-0/w PTR         r     1 BPTR$                      0-0-0/w STRC(288)   r     1 FM$CFUX
     0-0-0/w STRC(288)   r     1 FM$SET(0:0)
     0-0-0/d STRC(72)    r     1 MM$DESC(0:0)
     0-0-0/h UBIN(18)    r     1 MM$IPHY_MAP(0:0)


   Procedure JSR$RUNDOWN requires 601 words for executable code.
   Procedure JSR$RUNDOWN requires 46 words of local(AUTO) storage.

    No errors detected in file JSR$RUND.:E05TSI    .
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:61   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:62   
          MINI XREF LISTING

ACCT_TYP
        15**DCL      8737<<ASSIGN   8738<>CALL     8752<<ASSIGN   8753<>CALL
APTR$
      8382**DCL      8499<<ASSIGN
B$ASLLS$
      3891**DCL      8475>>ASSIGN   8476>>ASSIGN   8690>>ASSIGN   8693>>ASSIGN   8696>>ASSIGN   8699>>ASSIGN
      8702>>ASSIGN   8705>>ASSIGN   8708>>ASSIGN   8711>>ASSIGN
B$DBLS$
      3890**DCL      8472>>ASSIGN   8473>>ASSIGN   8607>>ASSIGN   8607>>ASSIGN   8666>>ASSIGN   8669>>ASSIGN
      8672>>ASSIGN   8675>>ASSIGN   8678>>ASSIGN   8681>>ASSIGN   8684>>ASSIGN   8687>>ASSIGN
B$DO.ECCINFO
      5789**DCL      5790--REDEF
B$ECCB.XCONF
      8372**DCL      8468<<ASSIGN
B$IPHYMAP$
      3894**DCL      8583>>ASSIGN
B$JIT.CPFLAGS1
      4312**DCL      8464>>IF       8526>>ASSIGN   8527<<ASSIGN   8527>>ASSIGN   8529<<ASSIGN   8734>>IF
      8736<<ASSIGN   8736>>ASSIGN   8749>>IF       8754<<ASSIGN   8754>>ASSIGN   8756<<ASSIGN   8756>>ASSIGN
      8757<<ASSIGN   8757>>ASSIGN   8766<<ASSIGN   8766>>ASSIGN
B$JIT.CPFLAGS1.SLEAZE
      4317**DCL      4317--REDEF
B$JIT.DCB$
      4391**DCL      8491<<ASSIGN
B$JIT.DDUL
      4381**DCL      8769<<ASSIGN
B$JIT.DO$
      4391**DCL      8532<<ASSIGN
B$JIT.ERR
      4223**DCL      8716<<ASSIGN
B$JIT.ERR.MID
      4224**DCL      4224--REDEF
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:63   
B$JIT.EUP
      4383**DCL      8768<<ASSIGN
B$JIT.FRS
      4419**DCL      8726<<ASSIGN   8726>>ASSIGN   8728<<ASSIGN   8728>>ASSIGN
B$JIT.JPEAK
      4385**DCL      8481>>IF       8482<<ASSIGN
B$JIT.JRESPEAK
      4385**DCL      4386--REDEF    8483>>IF       8484<<ASSIGN
B$JIT.JUNK
      4423**DCL      8454>>IF       8454>>IF       8457<<ASSIGN   8457>>ASSIGN   8471<<ASSIGN   8496>>IF
      8502>>IF       8560>>IF       8596>>IF       8639>>IF       8717>>IF       8744>>IF
B$JIT.JUNK2
      4477**DCL      8734>>IF
B$JIT.LNKCNT
      4423**DCL      8560>>IF
B$JIT.MODE
      4218**DCL      8723>>IF       8759>>IF
B$JIT.ORIGINATOR_PORT.FROM_CR
      4494**DCL      4494--REDEF    4495--REDEF
B$JIT.PCC
      4382**DCL      8590<<ASSIGN   8590>>ASSIGN
B$JIT.PCROS
      4382**DCL      8411>>IF       8413>>ASSIGN
B$JIT.PNR
      4398**DCL      4398--REDEF
B$JIT.PPC
      4384**DCL      8591<<ASSIGN   8591>>ASSIGN
B$JIT.PRFLAGS.NOSCAN
      4308**DCL      8501<<ASSIGN
B$JIT.PRIV.ACTIVE
      4224**DCL      8600<<ASSIGN
B$JIT.PRIV.JOB
      4267**DCL      8599<<ASSIGN   8599>>ASSIGN   8600>>ASSIGN
B$JIT.PRIV.PRC
      4271**DCL      8595<<ASSIGN
B$JIT.PROG_ENTRY
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:64   
      4373**DCL      8720<<ASSIGN
B$JIT.PSEUDO_COUNT
      4487**DCL      8544>>IF       8552>>ASSIGN   8556<<ASSIGN
B$JIT.PSEUDO_TEXT
      4487**DCL      8551>>ASSIGN
B$JIT.RNST
      4402**DCL      8435>>IF       8524>>IF
B$JIT.RUNFLAGS
      4419**DCL      8485<<ASSIGN
B$JIT.SPEAK
      4385**DCL      8481>>IF       8482>>ASSIGN
B$JIT.SRESPEAK
      4386**DCL      8483>>IF       8484>>ASSIGN
B$JIT.STEPS
      4444**DCL      8596>>IF
B$JIT.SVLDTF
      4464**DCL      8731<<ASSIGN   8731>>ASSIGN
B$JIT.SYSID
      4223**DCL      8507>>IF
B$JIT.TSLINE
      4492**DCL      4493--REDEF
B$JIT.XCONF
      4444**DCL      8718<<ASSIGN   8718>>ASSIGN   8719<<ASSIGN
B$JIT.XLIMFLG
      4454**DCL      8725<<ASSIGN
B$JIT$
      3886**DCL      4218--IMP-PTR  8411>>IF       8413>>ASSIGN   8435>>IF       8454>>IF       8454>>IF
      8457>>ASSIGN   8457>>ASSIGN   8464>>IF       8471>>ASSIGN   8481>>IF       8481>>IF       8482>>ASSIGN
      8482>>ASSIGN   8483>>IF       8483>>IF       8484>>ASSIGN   8484>>ASSIGN   8485>>ASSIGN   8491>>ASSIGN
      8496>>IF       8501>>ASSIGN   8502>>IF       8507>>IF       8524>>IF       8526>>ASSIGN   8527>>ASSIGN
      8527>>ASSIGN   8529>>ASSIGN   8532>>ASSIGN   8544>>IF       8551>>ASSIGN   8552>>ASSIGN   8556>>ASSIGN
      8560>>IF       8560>>IF       8590>>ASSIGN   8590>>ASSIGN   8591>>ASSIGN   8591>>ASSIGN   8595>>ASSIGN
      8596>>IF       8596>>IF       8599>>ASSIGN   8599>>ASSIGN   8600>>ASSIGN   8600>>ASSIGN   8639>>IF
      8716>>ASSIGN   8717>>IF       8718>>ASSIGN   8718>>ASSIGN   8719>>ASSIGN   8720>>ASSIGN   8723>>IF
      8725>>ASSIGN   8726>>ASSIGN   8726>>ASSIGN   8728>>ASSIGN   8728>>ASSIGN   8731>>ASSIGN   8731>>ASSIGN
      8734>>IF       8734>>IF       8736>>ASSIGN   8736>>ASSIGN   8744>>IF       8749>>IF       8754>>ASSIGN
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:65   
      8754>>ASSIGN   8756>>ASSIGN   8756>>ASSIGN   8757>>ASSIGN   8757>>ASSIGN   8759>>IF       8766>>ASSIGN
      8766>>ASSIGN   8768>>ASSIGN   8769>>ASSIGN
B$M$LM$
      3888**DCL      8499>>ASSIGN
B$M$UC$
      3887**DCL      8491>>ASSIGN
B$MAP
      7926**DCL      8578>>IF       8581<<ASSIGN
B$MAP.RPN
      7927**DCL      8510>>IF       8580>>ASSIGN
B$MAP.SCTRL
      7928**DCL      7929--REDEF
B$ROAVAIL.NEXT$
      5626**DCL      8419<<ASSIGN
B$ROAVAIL.NWORDS
      5627**DCL      8420<<ASSIGN
B$ROSEG.AVAIL$
      5590**DCL      8405<<ASSIGN   8419>>ASSIGN   8420>>ASSIGN
B$ROSEG.DCBPTR$
      5586**DCL      8405>>ASSIGN   8409>>ASSIGN   8420>>ASSIGN   8499>>ASSIGN
B$ROSEG.ECCB
      5592**DCL      8467--ASSIGN   8573<<ASSIGN
B$ROSEG.NUMDCBS
      5588**DCL      8407<<ASSIGN   8408>>DOINDEX
B$ROSEG.TREE$
      5587**DCL      8403<<ASSIGN
B$ROSEG$
      3889**DCL      8403>>ASSIGN   8405>>ASSIGN   8405>>ASSIGN   8405>>ASSIGN   8405>>ASSIGN   8407>>ASSIGN
      8408>>DOINDEX  8409>>ASSIGN   8419>>ASSIGN   8420>>ASSIGN   8420>>ASSIGN   8420>>ASSIGN   8467>>ASSIGN
      8499>>ASSIGN   8573>>ASSIGN
B$U.APO
      5749**DCL      8450<<ASSIGN
B$U.APR
      5748**DCL      8449<<ASSIGN
B$U.ASL
      5747**DCL      8452<<ASSIGN
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:66   
B$U.ASP
      5750**DCL      8451<<ASSIGN
B$U.FLG
      5655**DCL      8445<<ASSIGN   8445>>ASSIGN   8746<<ASSIGN   8746>>ASSIGN
B$U.FLG.EVNT
      5685**DCL      8570<<ASSIGN
B$U.MISC
      5768**DCL      5769--REDEF
B$ULNK.ASLENT.ENTLOC
      3611**DCL      8477<<ASSIGN
B$ULNK.IS.BASE
      3489**DCL      8473<<ASSIGN   8476<<ASSIGN
B$ULNK.IS.BOUND
      3485**DCL      8472<<ASSIGN   8475<<ASSIGN
B$UPT$
      3893**DCL      8510>>IF       8578>>IF       8580>>ASSIGN   8581>>ASSIGN
B$USER.MISC
      5844**DCL      5845--REDEF
B$USERLS$
      3892**DCL      8426>>ASSIGN   8426>>ASSIGN   8429>>ASSIGN   8429>>ASSIGN   8477>>ASSIGN   8604>>ASSIGN
      8604>>ASSIGN   8611>>ASSIGN   8611>>ASSIGN   8614>>ASSIGN   8614>>ASSIGN   8617>>ASSIGN   8617>>ASSIGN
      8620>>ASSIGN   8620>>ASSIGN   8623>>ASSIGN   8623>>ASSIGN   8626>>ASSIGN   8626>>ASSIGN   8629>>ASSIGN
      8629>>ASSIGN   8632>>ASSIGN   8632>>ASSIGN   8642>>ASSIGN   8645>>ASSIGN   8648>>ASSIGN   8651>>ASSIGN
      8654>>ASSIGN   8657>>ASSIGN   8660>>ASSIGN   8663>>ASSIGN
BPTR$ IN PROCEDURE INIT_ROSEG
      8400**DCL      8409<<ASSIGN
CPFLAGS
        13**DCL      8526<<ASSIGN   8529>>ASSIGN
ERR_DUMMY IN PROCEDURE INIT_ROSEG
      8398**DCL      8414<>CALL
ES_STEPPRIVMASK
        20**DCL      8599>>ASSIGN
F$CFU$
      8378**DCL      8365--IMP-PTR  8758>>ASSIGN
FM$CFUX.SETH
      8366**DCL      8758>>ASSIGN
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:67   
FM$SET
      8360**DCL      8761<>CALL
FM$SET.DSMTF
      8360**DCL      8761>>IF
FM$SET.SETL
      8362**DCL      8762>>ASSIGN
FM$SET.USERLIST
      8361**DCL      8361--REDEF
FM$SET$
      8377**DCL      8360--IMP-PTR  8761>>IF       8761>>CALL     8762>>ASSIGN
FMF$TRUNCM
        22**DCL-ENT  8492--CALL
FMP$UDLIST
        23**DCL-ENT  8761--CALL
FPT$RESCTL
      5552**DCL      8546<<ASSIGN   8554<>CALL
FPT$RESCTL.PSEUDO_
      5552**DCL      8548<<ASSIGN
FPT$RESCTL.V
      5554**DCL      8547--ASSIGN
FPT$RESCTL.V_
      5552**DCL      8547<<ASSIGN
HFC$ASSOCCLR
        34**DCL-ENT  8589--CALL
HW_WSQ0PT
      6416**DCL      8582>>IF
I
        10**DCL      8408<<DOINDEX  8409>>ASSIGN   8509<<DOINDEX  8510>>IF       8569<<DOINDEX  8570>>IF
      8573>>ASSIGN   8580<<ASSIGN   8583<<ASSIGN   8583>>ASSIGN   8584<>CALL     8587<>CALL     8758<<ASSIGN
      8760>>DOWHILE  8761>>IF       8761>>CALL     8762<<ASSIGN   8762>>ASSIGN
IMPOSSIBLE
      8552**LABEL    8554--CALLALT
INIT_ROSEG
      8396**PROC     8536--CALL     8564--CALL
IRM_SYSID
        19**DCL      8507>>IF
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:68   
JLS$CLEANUP
        28**DCL-ENT  8562--CALL
JSF$CLSDCBS
        24**DCL-ENT  8498--CALL
JSF$CLSLM
        25**DCL-ENT  8500--CALL
JSN$1SSSF
        37**DCL-ENT  8771--CALL
JSN$SETASR
        39**DCL-ENT  8772--CALL
JSU$DECRUC
        30**DCL-ENT  8448--CALL
JSU$RELFSEG
        29**DCL-ENT  8516--CALL
JSU$RELMEM
        27**DCL-ENT  8535--CALL
JSU$RSTLMS
        26**DCL-ENT  8537--CALL
JSU$WSTAR
        31**DCL-ENT  8738--CALL     8753--CALL
J_ASR_E
      8380**DCL      8772<>CALL
J_CRASHUN
      8379**DCL      8437>>IF       8439<<ASSIGN   8442<<ASSIGN   8774<<ASSIGN
J_FPT_RESCTL
      5535**DCL      8546>>ASSIGN
KIP$RPET
        40**DCL-ENT  8528--CALL
M$MRELRES
        47**DCL-ENT  8554--CALL
MAXECCB
        12**DCL      8456<<ASSIGN   8466<<ASSIGN   8470<<ASSIGN   8569>>DOINDEX
MM$DESC.BASE
      6331**DCL      8642<<ASSIGN   8645<<ASSIGN   8648<<ASSIGN   8651<<ASSIGN   8654<<ASSIGN   8657<<ASSIGN
      8660<<ASSIGN   8663<<ASSIGN   8666<<ASSIGN   8669<<ASSIGN   8672<<ASSIGN   8675<<ASSIGN   8678<<ASSIGN
      8681<<ASSIGN   8684<<ASSIGN   8687<<ASSIGN   8690<<ASSIGN   8693<<ASSIGN   8696<<ASSIGN   8699<<ASSIGN
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:69   
      8702<<ASSIGN   8705<<ASSIGN   8708<<ASSIGN   8711<<ASSIGN
MM$DESC.BOUND
      6329**DCL      6330--REDEF    8426<<ASSIGN   8611<<ASSIGN   8614<<ASSIGN   8617<<ASSIGN   8620<<ASSIGN
      8623<<ASSIGN   8626<<ASSIGN   8629<<ASSIGN   8632<<ASSIGN
MM$DESC.FLGS
      6330**DCL      6330--REDEF    8429<<ASSIGN   8429>>ASSIGN   8604<<ASSIGN   8604>>ASSIGN   8607<<ASSIGN
      8607>>ASSIGN
MM$DESC.FLGS1.NOTEMPTY
      6330**DCL      8426<<ASSIGN   8611<<ASSIGN   8614<<ASSIGN   8617<<ASSIGN   8620<<ASSIGN   8623<<ASSIGN
      8626<<ASSIGN   8629<<ASSIGN   8632<<ASSIGN
MM$IPHY_MAP
      7982**DCL      8583>>ASSIGN
MM$PPUT.USER#
      6318**DCL      6318--REDEF
MMB$FPP
        33**DCL-ENT  8584--CALL     8587--CALL
MMG$SFVP
        32**DCL-ENT  8414--CALL
MM_BYP$
      6249**DCL      6249--IMP-PTR
MM_FPMC
      6255**DCL      8578>>IF       8581>>ASSIGN
MM_FPMC.RPN
      6255**DCL      8510>>IF
NO_CLEANUP
      8562**LABEL    8562--CALLALT
NO_SNAP
      8509**LABEL    8507--GOTO     8517--GOTO
ROPGS IN PROCEDURE INIT_ROSEG
      8397**DCL      8398--REDEF    8413<<ASSIGN   8414<>CALL     8414<>CALL
S$CU$
      5855**DCL      8445>>ASSIGN   8445>>ASSIGN   8449>>ASSIGN   8450>>ASSIGN   8451>>ASSIGN   8452>>ASSIGN
      8570>>ASSIGN   8746>>ASSIGN   8746>>ASSIGN
SC_FMRUND
        48**DCL-ENT  8515--CALL
SSC$MON
PL6.E3A0      #001=JSR$RUNDOWN File=JSR$RUND.:E05TSI                             TUE 07/29/97 23:47 Page:70   
        43**DCL-ENT  8478--CALL
SSC$SERV
        44**DCL-ENT  8480--CALL
SSQ$NUQUAN
        42**DCL-ENT  8479--CALL
SSV$DORUND
        41**DCL-ENT  8571--CALL
S_CUN
        17**DCL      8437>>IF       8442>>ASSIGN   8446>>IF       8446>>IF       8596>>IF
S_TDCPUF
        18**DCL      8446>>IF
TDP$RSETCPU
        46**DCL-ENT  8447--CALL
TPTR$
        14**DCL      8467<<ASSIGN   8468>>ASSIGN
UDN$MAGIC
        38**DCL-ENT  8773--CALL
UMD$CLSDRIB
        36**DCL-ENT  8402--CALL
UQB$DELUSER
        35**DCL-ENT  8503--CALL
VLP$PS
      5569**DCL      8548--ASSIGN   8549<<ASSIGN
VLP$PS.NN#
      5569**DCL      8550<<ASSIGN
VLP$PS.PSLIST.NUM#
      5571**DCL      8552<<ASSIGN
VLP$PS.PSLIST.PSEUDO#
      5571**DCL      8551<<ASSIGN
WSR
        11**DCL      8568<<ASSIGN   8571<>CALL     8572<<ASSIGN   8572>>ASSIGN
XX IN PROCEDURE INIT_ROSEG
      8413**LABEL    8414--CALLALT
