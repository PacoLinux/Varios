VERSION A06

PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:1    
        1        1        /*M* Z8HU -- General Utility module - No description. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        Z8HU$ALLOT_TEMP:PROC(FORMAT,BOUNDARY,TYPE_DESC,FRESHNESS);
        8        8        /*P*
        9        9             NAME: None.
       10       10             PURPOSE:
       11       11                  None.
       12       12             DESCRIPTION:
       13       13                  None.
       14       14        */
       15       15        /*F*
       16       16             NAME: Z8HU$ALLOT_TEMP
       17       17             PURPOSE:
       18       18                  To create temporary storage addressing per specifications.
       19       19             DESCRIPTION:
       20       20                  A temp is created with the specified length, boundary, scale
       21       21                  factor, type , etc.
       22       22
       23       23                  The original temp length is kept so that the size does not
       24       24                  shrink from constant pooling and re-use (TEMP.LENGTH).
       25       25
       26       26                  The TEMP is allocated on a given boundary to accomodate
       27       27                  instructions like LDAQ, DFSTR.  It may also be the case that
       28       28                  I need to allocate storage on an odd word boundary, so that
       29       29                  data ends up on a certain boundary when the store is generated
       30       30                  (see MVDO).
       31       31
       32       32                  Temps that are reused retain the type assigned to them
       33       33                  in their first use.  This should affect only the debug
       34       34                  schema.
       35       35
       36       36                  Because temp storage may exist in a different segment, it must
       37       37                  be addressed via a pointer register.  This necessitates the
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:2    
       38       38                  use of a base triad above the TEMP item.  The resulting REF
       39       39                  item from the tree-walk of the base is what is used as the
       40       40                  temp reference only if the ATTACH directive is used.  Otherwise,
       41       41                  a pointer to the BASE item is maintained for short-term temps.
       42       42
       43       43                  Temp freshness is defined as follows:
       44       44
       45       45                      PURE  - A non-reusable temp allocated on an area that is
       46       46                                preset to zero.  Currently, only one word temps
       47       47                                can be pure.
       48       48
       49       49                      FRESH - A non-reusable, never been used temp.
       50       50
       51       51                      STALE - A reusable temp, that may have been previously used.
       52       52        */
       53       53        /*D*
       54       54             NAME: Z8HU$ALLOT_TEMP
       55       55             CALL:
       56       56                  CALL Z8HU$ALLOT_TEMP(=FORMAT, =BOUNDARY, =DESC, =FRESHNESS);
       57       57             PARAMETERS:
       58       58                  FORMAT   - Either %NDSC or %ADSC to determine descriptor units.
       59       59                  BOUNDARY - Either even, odd, or next (meaning don't care).
       60       60                  DESC     - A machine descriptor describing the type of temp
       61       61                               to create.
       62       62                  FRESHNESS- Freshness of temp to allocate (see above).
       63       63                  TYPE     - Type of temp to allocate (ex. TYA).
       64       64             INTERFACE:
       65       65                  Z8AT$CREATE_TEMPORARY
       66       66             ENVIRONMENT:
       67       67                  None.
       68       68             INPUT:
       69       69                  None.
       70       70             OUTPUT:
       71       71                  Tree containing a BASE item with a LOP of the TEMP ST item, and a
       72       72                  ROP of the current ESC triad.
       73       73             SCRATCH:
       74       74                  None.
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:3    
       75       75             DESCRIPTION:
       76       76                  None.
       77       77        */
       78       78
       79       79    1        DCL FORMAT SBIN WORD;
       80       80    1        DCL BOUNDARY SBIN WORD;
       81       81             %EQU PHASE = 4;
       82       82             %EQU TWO_WORD_TEMP = 72;
       83       83             %INCLUDE Z9A_FLAGS;
       84       97             %INCLUDE Z8A_DEFC;
       85      165             %INCLUDE Z8A_SUPP_MAC;
       86     2565             %INCLUDE Z8A_DESC;
       87     2611             %INCLUDE Z8A_TYPES;
       88     2785    1        DCL FRESHNESS SBIN WORD;
       89     2786    1        DCL 1 TYPE_DESC ALIGNED,
       90     2787                   %TYPE_DESC;
       91     2821
       92     2822    1        DCL LENGTH_OF_TEMP_IN_BITS SBIN WORD;
       93     2823    1        DCL BLKNAME   CHAR(28);
       94     2824    1        DCL TEMP_UBIN UBIN;
       95     2825    1        DCL TEMP_CHAR CHAR(4);
       96     2826    1        DCL TEMP$     PTR;
       97     2827    1        DCL ETT$$     PTR;
       98     2828    1        DCL LENGTH$   PTR;
       99     2829
      100     2830             %INCLUDE Z8A_ILL;
      101     3523             %INCLUDE Z8A_ETT;
      102     3824             %INCLUDE Z8A_ST;
      103     7483             %INCLUDE Z8A_DNT;
      104     7704             %INCLUDE Z8A_COMCOM;
      105     8354             %INCLUDE Z8A_ERR_NUMS;
      106     9118             %INCLUDE Z8A_LTS;
      107    11195
      108    11196             %INCLUDE Z8H_TEMP;
      109    11244             %INCLUDE Z8H_EXT;
      110    11295             %INCLUDE Z8A_OBJ;
      111    11792             %INCLUDE Z8H_DEP;
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:4    
      112    11899             %INCLUDE Z8H_CODE;
      113    12029
      114    12030    1        DCL Z8AT$CREATE_TEMPORARY ENTRY(2);
      115    12031    1        DCL Z8HU$WALK ENTRY(1);
      116    12032    1        DCL Z8HI$BURST ENTRY(2);
      117    12033    1        DCL Z8HU$INCCNT ENTRY(2);
      118    12034    1        DCL Z8HU$DEC_COUNT ENTRY(2);
      119    12035    1        DCL Z8HU$POOL_PRIME  ENTRY(1);
      120    12036    1        DCL Z8HU$POOL        ENTRY(1);
      121    12037    1        DCL Z8AE$ERROR  ENTRY(12);
      122    12038
      123    12039    1        IF FORMAT = %N THEN
      124    12040    1          IF TYPE_DESC.DESC.NDSC.TN = %NDSC4 THEN
      125    12041    1            LENGTH_OF_TEMP_IN_BITS = ((TYPE_DESC.DESC.NDSC.N + TYPE_DESC.DESC.NDSC.CN)
             12041                     * 9) / 2;
      126    12042    1          ELSE
      127    12043    1            LENGTH_OF_TEMP_IN_BITS = ((TYPE_DESC.DESC.NDSC.N + TYPE_DESC.DESC.NDSC.CN)
             12043                     * 9);
      128    12044    2        ELSE DO;
      129    12045    2          IF TYPE_DESC.DESC.ADSC.TA = %ADSC4 THEN
      130    12046    2            LENGTH_OF_TEMP_IN_BITS = ((TYPE_DESC.DESC.ADSC.N + TYPE_DESC.DESC.ADSC.CN)
             12046                     * 9) / 2;
      131    12047    2          ELSE
      132    12048    2            LENGTH_OF_TEMP_IN_BITS = ((TYPE_DESC.DESC.ADSC.N + TYPE_DESC.DESC.ADSC.CN)
             12048                     * 9);
      133    12049    3          IF TYPE_DESC.SIZ$ ~= ADDR(NIL) THEN DO;
      134    12050                 %FISH (TRIAD = TYPE_DESC.SIZ$, RTN = LENGTH$);
      135    12058    3            IF LENGTH$ -> ST.ID = %CONST THEN
      136    12059    4              DO;
      137    12060    4                IF TYPE_DESC.TYPE = %TYB
      138    12061    4                  THEN LENGTH_OF_TEMP_IN_BITS = MAXIMUM ((LENGTH$ -> CONST.CONSTI.WORD1
      139    12062    4                      + TYPE_DESC.DESC.NDSC.CN) * 6, 6);
      140    12063    4                  ELSE LENGTH_OF_TEMP_IN_BITS = MAXIMUM ((LENGTH$ -> CONST.CONSTI.WORD1
      141    12064    4                      + TYPE_DESC.DESC.ADSC.CN) * 9, 9);
      142    12065    4              END;
      143    12066    3          END;
      144    12067    2        END;
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:5    
      145    12068
      146    12069    1        IF (LENGTH_OF_TEMP_IN_BITS = %TWO_WORD_TEMP) AND
      147    12070    1           (BOUNDARY = %NEXT) THEN
      148    12071    1          BOUNDARY = %EVEN;
      149    12072
      150    12073    1        CALL REUSE_TEMP(TEMP$)
      151    12074    2        WHENRETURN DO;
      152    12075               %REMOVE_FROM_DL_LIST(PTR=TEMP$,ITEM=TEMP,HEAD=HEAD_TEMP$);
      153    12097    2          TEMP$ -> TEMP.B.GREATER_256K = FALSE;
      154    12098    2        END;
      155    12099
      156    12100    2        WHENALTRETURN DO;
      157    12101    2          CALL Z8AT$CREATE_TEMPORARY(%TEMP,TEMP$);
      158    12102
      159    12103    3          DO CASE(BOUNDARY);
      160    12104    3            CASE(%NEXT);
      161    12105                   /* Everything is fine */
      162    12106
      163    12107    3            CASE(%ODD);
      164    12108    3              COMCOM.LAST_BLOCK$ -> BLOCK.SIZE = COMCOM.LAST_BLOCK$ -> BLOCK.SIZE
      165    12109    3                / 2 * 2 + 1;
      166    12110
      167    12111    3            CASE(%EVEN);
      168    12112    3              IF COMCOM.LAST_BLOCK$ -> BLOCK.SIZE < %(#256K - 1) THEN
      169    12113    3                COMCOM.LAST_BLOCK$ -> BLOCK.SIZE = (COMCOM.LAST_BLOCK$ -> BLOCK.SIZE +
             12113                         1)/2*2;
      170    12114                   %IF GCOS;
      177    12121                   %ENDIF;
      178    12122    3          END /* Case */;
      179    12123
      180    12124    2          IF COMCOM.LAST_BLOCK$ -> BLOCK.SIZE + (LENGTH_OF_TEMP_IN_BITS + 35) / 36
      181    12125    3              >= (%#256K - 1) OR COMCOM.LAST_BLOCK$ -> BLOCK.B.SIZE_256K THEN DO;
      182    12126    3            IF NOT COMCOM.OB.MS_DATA
      183    12127    3              THEN CALL Z8AE$ERROR (%E$DATA_LIMIT);
      184    12128    3            BLKNAME = COMCOM.BLOCK$ -> BLOCK.DNT$ -> DNT.TEXT.NAME ;
      185    12129    3            CALL BINCHAR (TEMP_CHAR, COMCOM.BLOCKC + 1) ;
      186    12130    3            IF COMCOM.BLOCKC < 9 THEN TEMP_UBIN = 4 ;
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:6    
      187    12131    3            ELSE IF COMCOM.BLOCKC < 99 THEN TEMP_UBIN = 3 ;
      188    12132    3            ELSE TEMP_UBIN = 2 ;
      189    12133    3            CALL INSERT (BLKNAME, TEMP_UBIN, 5 - TEMP_UBIN,
      190    12134    3                SUBSTR (TEMP_CHAR, TEMP_UBIN - 1)) ;
      191    12135                 %NEW_DNT (@SIZE = "COMCOM.BLOCK$ -> BLOCK.DNT$ -> DNT.TEXT.LENGTH",
      192    12136                           @NAME = BLKNAME) ;
      193    12194                 %NEW_BLOCK (@R = %BLOCK_, @DNT$ = DNT$) ;
      194    12258    4            IF COMCOM.LAST_BLOCK$ = COMCOM.BLOCK$ THEN DO TEMP_UBIN = 3 TO COMCOM.
             12258                     BLOCKC;
      195    12259    4              COMCOM.LAST_BLOCK$ = COMCOM.LAST_BLOCK$ -> BLOCK.NEXT;
      196    12260    4            END;
      197    12261    3            COMCOM.LAST_BLOCK$ -> BLOCK.NEXT = ST$;
      198    12262    3            COMCOM.LAST_BLOCK$ = ST$;
      199    12263    3          END;
      200    12264
      201    12265    2          CALL CHECK_ESCAPE;
      202    12266
      203    12267    2          TEMP$ -> TEMP.SA = COMCOM.LAST_BLOCK$ -> BLOCK.SIZE;
      204    12268    2          TEMP$ -> TEMP.COUNT = COMCOM.LAST_BLOCK$ -> BLOCK.COUNT;
      205    12269    2          TEMP$ -> TEMP.LENGTH = LENGTH_OF_TEMP_IN_BITS;
      206    12270
      207    12271    2          IF CURRENT_BLOCK$ ~= COMCOM.LAST_BLOCK$ THEN
      208    12272    3            DO;
      209    12273                   %NEW_ORG(@ST$=COMCOM.LAST_BLOCK$);
      210    12309                   %NEW_LAB(@ST$=TEMP$);
      211    12345                   %NEW_ORG(@ST$=CURRENT_BLOCK$);
      212    12381    3            END;
      213    12382    2          ELSE
      214    12383                 %NEW_LAB(@ST$=TEMP$);
      215    12419
      216    12420
      217    12421    3          DO CASE(FRESHNESS);
      218    12422    3            CASE(%PURE);
      219    12423    3              TEMP$ -> TEMP.B.NOT_REUSABLE = TRUE;
      220    12424    3              CALL Z8HI$BURST(TEMP$,DEP.CDEP);
      221    12425
      222    12426    3            CASE(%FRESH);
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:7    
      223    12427    3              TEMP$ -> TEMP.B.NOT_REUSABLE = TRUE;
      224    12428
      225    12429    3              COMCOM.LAST_BLOCK$ -> BLOCK.SIZE = COMCOM.LAST_BLOCK$ -> BLOCK.SIZE +
      226    12430    3              ((LENGTH_OF_TEMP_IN_BITS + 35) / 36);
      227    12431
      228    12432    3            CASE(%STALE);
      229    12433    3              COMCOM.LAST_BLOCK$ -> BLOCK.SIZE = COMCOM.LAST_BLOCK$ -> BLOCK.SIZE +
      230    12434    3              ((LENGTH_OF_TEMP_IN_BITS + 35) / 36);
      231    12435    3          END /* Case */;
      232    12436
      233    12437    2        END /* WHENALTRETURN */;
      234    12438
      235    12439    1        NUMBER_OF_TEMPS = NUMBER_OF_TEMPS + 1;
      236    12440
      237    12441
      238    12442    1        TEMP$ -> TEMP.DESCL = TYPE_DESC.DESC.DESCL;
      239    12443    1        IF TYPE_DESC.SIZ$ ~= ADDR(NIL) AND
      240    12444    1            LENGTH$ -> ST.ID = %CONST THEN
      241    12445    1          TEMP$ -> TEMP.ADSC.N = LENGTH$ -> CONST.CONSTI.WORD1;
      242    12446    1        TEMP$ -> TEMP.TYPE = TYPE_DESC.TYPE;
      243    12447    1        TEMP$ -> TEMP.DEFINED_LOOP_LEVEL = CUR_LOOP_LEVEL;
      244    12448    1        TEMP$ -> TEMP.REFERENCES = 0;
      245    12449
      246    12450             %NEW_ETT( @ID     = %BASE, @POINTER = ETT$ ,
      247    12451                       @LOP    = TEMP$ ,
      248    12452                       @ROP    = COMCOM.ESC ,
      249    12453                       @COUNT  = 2 ,
      250    12454                       @STATE  = 0 ,
      251    12455                       @POOLABLE = YES );
      252    12525
      253    12526    1        IF LENGTH_OF_TEMP_IN_BITS >= 4096 * 9
      254    12527    1            OR TYPE_DESC.TYPE = %TYB
      255    12528    2               AND LENGTH_OF_TEMP_IN_BITS >= 4096 * 6 THEN DO;
      256    12529               %NEW_LONG (@POINTER = TEMP$ -> TEMP.LTS$,
      257    12530                          @LENGTH = LENGTH$ -> CONST.CONSTI.WORD1);
      258    12622               %NEW_ETT (@ID = %TRIAD, @POINTER = TEMP$,
      259    12623                         @LOP = LENGTH$);
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:8    
      260    12693               %NEW_ETT (@ID = %SIZ, @POINTER = ETT$$,
      261    12694                         @LOP = ETT$,
      262    12695                         @ROP = TEMP$,
      263    12696                         @COUNT = 2,
      264    12697                         @STATE = 0,
      265    12698                         @POOLABLE = YES);
      266    12768    2          ETT$ = ETT$$;
      267    12769    2        END;
      268    12770
      269    12771    1        CALL Z8HU$INCCNT(COMCOM.ESC, 2);
      270    12772
      271    12773    1        CALL Z8HU$WALK(ETT$);
      272    12774    1        RETURN;
      273    12775
      274    12776        %EJECT;
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:9    
      275    12777    1   REUSE_TEMP:PROC(TEMP$) ALTRET;
      276    12778        /*I*
      277    12779             NAME: REUSE_TEMP
      278    12780             PURPOSE:
      279    12781                   Return pointer to a temp from temp pool, if ones available.
      280    12782             CALL:
      281    12783                  CALL REUSE_TEMP(TEMP$)
      282    12784             PARAMETERS:
      283    12785                  TEMP$ - Pointer to available temp, if we don't altret.
      284    12786             DATA:
      285    12787                  Pool of returned temps.
      286    12788             DESCRIPTION:
      287    12789                  Search TEMP pool.  If a temp of correct length and
      288    12790                  alignment is available then normal return, otherwise
      289    12791                  altreturn. TEMP$ will contain pointer to temp if ones
      290    12792                  available.
      291    12793        */
      292    12794
      293    12795    2        DCL TEMP$ PTR;
      294    12796
      295    12797    2        IF FRESHNESS = %STALE THEN
      296    12798    3          DO;
      297    12799    3            TEMP$ = HEAD_TEMP$;
      298    12800
      299    12801    4            DO WHILE(TEMP$ ~= ADDR(NIL));
      300    12802    4              IF      TEMP$ -> TEMP.LENGTH >= LENGTH_OF_TEMP_IN_BITS
      301    12803    4              AND NOT TEMP$ -> TEMP.B.NOT_REUSABLE
      302    12804    4              AND     CUR_LOOP_LEVEL <= TEMP$ -> TEMP.DEFINED_LOOP_LEVEL THEN
      303    12805    5                DO CASE(BOUNDARY);
      304    12806    5                  CASE(%EVEN);
      305    12807    5                    IF MOD(TEMP$ -> TEMP.SA,2) = 0 THEN
      306    12808    5                      RETURN;
      307    12809
      308    12810    5                  CASE(%ODD);
      309    12811    5                    IF MOD(TEMP$ -> TEMP.SA,2) = 1 THEN
      310    12812    5                      RETURN;
      311    12813
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:10   
      312    12814    5                  CASE(%NEXT);
      313    12815    5                      RETURN;
      314    12816
      315    12817    5                  CASE(ELSE);
      316    12818    5                    CALL Z8AE$ERROR(%E$UNEXPECTED_CASE);
      317    12819    5                    RETURN;
      318    12820    5                END;
      319    12821
      320    12822    4              TEMP$ = TEMP$ -> TEMP.NEXT;
      321    12823    4            END;
      322    12824    3          END;
      323    12825
      324    12826    2        ALTRETURN;
      325    12827
      326    12828    2   END REUSE_TEMP;
      327    12829        %EJECT;
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:11   
      328    12830    1   CHECK_ESCAPE:PROC;
      329    12831        /*I*
      330    12832             NAME: CHECK_ESCAPE
      331    12833             PURPOSE:
      332    12834                  Check to see if we need to create a new escape triad to reference
      333    12835                  the new temp.  If the current data block has exceeded 16K in
      334    12836                  size, then we need a new escape.
      335    12837             CALL:
      336    12838                  CALL CHECK_ESCAPE
      337    12839             DATA:
      338    12840                  COMCOM.LAST_BLOCK$ -> BLOCK.SIZE
      339    12841             DESCRIPTION:
      340    12842                  There needs to be an escape triad for every 16K increment
      341    12843                  of storage in the data block (in order to use pointer register
      342    12844                  relative addressing).  The creation of a new temp may be
      343    12845                  at the start of a new 16K increment, so we would then need
      344    12846                  a new esc triad to reference that new block.
      345    12847        */
      346    12848
      347    12849    2        IF COMCOM.LAST_BLOCK$ -> BLOCK.SIZE / %#16K > COMCOM.ESC -> ETT.ROPCON OR
      348    12850    2            COMCOM.LAST_BLOCK$ ~= COMCOM.ESC -> ETT.LOP THEN
      349    12851    3          DO;
      350    12852                                                        /*#26726*/
      351    12853    3            IF COMCOM.LAST_BLOCK$ = COMCOM.ESC -> ETT.LOP
      352    12854    3              THEN TEMP_UBIN = COMCOM.ESC -> ETT.ROPCON + 1;
      353    12855    3              ELSE TEMP_UBIN = 0;
      354    12856
      355    12857                 %NEW_ETT( @ID     = %ESC, @POINTER = ETT$ ,
      356    12858                           @LOP    = COMCOM.LAST_BLOCK$,
      357    12859                           @ROPCON = TEMP_UBIN,
      358    12860                           @STATE  = 0 ,
      359    12861                           @COUNT  = %DONT_MESS );            /*#30618*/
      360    12931                                                              /*#30618*/
      361    12932    3            CALL Z8HU$POOL_PRIME( COMCOM.ESC );          /*#30618*/
      362    12933    3            CALL Z8HU$POOL( COMCOM.ESC );                /*#30618*/
      363    12934    3            COMCOM.ESC -> ETT.COUNT = 0;                 /*#30618*/
      364    12935    3            COMCOM.ESC = ETT$;
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:12   
      365    12936    3            CALL Z8HU$WALK(ETT$);
      366    12937    3          END;
      367    12938
      368    12939    2   END CHECK_ESCAPE;
      369    12940    1   END Z8HU$ALLOT_TEMP;
      370    12941        %EOD;

PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:13   
--  Include file information  --

   Z8H_CODE.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_DEP.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_OBJ.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_EXT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_TEMP.:Z8A6TOU  is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ERR_NUMS.:Z8A6TOU  is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_DNT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ILL.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_TYPES.:Z8A6TOU  is referenced.
   Z8A_DESC.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
      No diagnostics issued in procedure Z8HU$ALLOT_TEMP.

   Procedure Z8HU$ALLOT_TEMP requires 857 words for executable code.
   Procedure Z8HU$ALLOT_TEMP requires 58 words of local(AUTO) storage.

PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:14   

 Object Unit name= Z8HU$ALLOT_TEMP                            File name= Z8HU.:Z8A6TOU
 UTS= AUG 09 '97 13:24:51.76 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  LblCom even  none     1      1  ITERATION
    1  LblCom even  none     1      1  ILL$
    2  LblCom even  none     5      5  ILL_
    3  LblCom even  none     1      1  ETT$
    4  LblCom even  none     1      1  HEAD_ETT$
    5  LblCom even  none   512   1000  ETT_BUCKETS
    6  LblCom even  none     5      5  ETT_
    7  LblCom even  none     1      1  ST$
    8  LblCom even  none     5      5  ST_
    9  LblCom even  none     1      1  DNT$
   10  LblCom even  none     5      5  DNT_
   11  LblCom even  none     1      1  DNT_BUCKET_NUMBER
   12  LblCom even  none     1      1  DNT_OF_1$
   13  LblCom even  none     1      1  LTS$
   14  LblCom even  none     5      5  LTS_
   15  LblCom even  none     1      1  NUMBER_OF_PRIMES
   16  LblCom even  none     1      1  NUMBER_OF_TEMPS
   17  LblCom even  none     1      1  NUMBER_OF_REFS
   18  LblCom even  none     1      1  GENERATING_PTRS
   19  LblCom even  none     1      1  USE_PROC_RETURN
   20  LblCom even  none     1      1  CURRENT_SCOPE$
   21  LblCom even  none     1      1  HEAD_REF$
   22  LblCom even  none     1      1  HEAD_TEMP$
   23  LblCom even  none     1      1  CONST$
   24  LblCom even  none     1      1  HEAD_PRIMES$
   25  LblCom even  none     1      1  CUR_LOOP_LEVEL
   26  LblCom even  none     2      2  PEPD
   27  LblCom even  none     1      1  OBJ$
   28  LblCom even  none     1      1  PAGING_OBJ
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:15   
   29  LblCom even  none     1      1  OBJ_PAGE_COUNT
   30  LblCom even  none     1      1  OBJ_FINISHED
   31  LblCom even  none     1      1  OBJ_SEG_SIZE
   32  LblCom even  none     1      1  OBJ_TOP_NEW_SEG
   33  LblCom even  none     1      1  OBJ_LAST_REGULAR_PAGE
   34  LblCom even  none     5      5  OBJ_
   35  LblCom even  none    48     60  DEP
   36   Data  even  none     1      1  Z8HU$ALLOT_TEMP
   37  LblCom even  none     1      1  CURRENT_BLOCK$
   38  LblCom even  none     1      1  ROOT_PROC_BLOCK$
   39   Proc  even  none   857   1531  Z8HU$ALLOT_TEMP
   40  RoData even  none    22     26  Z8HU$ALLOT_TEMP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    39      0   yes            yes      Std        4  Z8HU$ALLOT_TEMP

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 Z8AT$CREATE_TEMPORARY
         yes           Std      12 Z8AE$ERROR
         yes           Std       1 Z8AR$RESERVER
         yes           Std       1 Z9HF$WRITE_OBJ_PAGE
         yes           Std       0 Z9HF$GET_OBJ_PAGE
         yes           Std       2 Z8HU$INCCNT
         yes           Std       1 Z8HU$WALK
         yes           Std       2 Z8HI$BURST
         yes           Std       1 Z8HU$POOL_PRIME
         yes           Std       1 Z8HU$POOL
                       nStd      0 X66_AUTO_4
                       nStd      0 X66_ARET
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:16   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    ILL_STEP                              COMCOM                           r    LTS_STEP
r    OBJ_STEP

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:17   


        1        1        /*M* Z8HU -- General Utility module - No description. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        Z8HU$ALLOT_TEMP:PROC(FORMAT,BOUNDARY,TYPE_DESC,FRESHNESS);

      7 39 000000   000000 700200 xent  Z8HU$ALLOT_* TSX0  ! X66_AUTO_4
        39 000001   000072 000004                    ZERO    58,4

        8        8        /*P*
        9        9             NAME: None.
       10       10             PURPOSE:
       11       11                  None.
       12       12             DESCRIPTION:
       13       13                  None.
       14       14        */
       15       15        /*F*
       16       16             NAME: Z8HU$ALLOT_TEMP
       17       17             PURPOSE:
       18       18                  To create temporary storage addressing per specifications.
       19       19             DESCRIPTION:
       20       20                  A temp is created with the specified length, boundary, scale
       21       21                  factor, type , etc.
       22       22
       23       23                  The original temp length is kept so that the size does not
       24       24                  shrink from constant pooling and re-use (TEMP.LENGTH).
       25       25
       26       26                  The TEMP is allocated on a given boundary to accomodate
       27       27                  instructions like LDAQ, DFSTR.  It may also be the case that
       28       28                  I need to allocate storage on an odd word boundary, so that
       29       29                  data ends up on a certain boundary when the store is generated
       30       30                  (see MVDO).
       31       31
       32       32                  Temps that are reused retain the type assigned to them
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:18   
       33       33                  in their first use.  This should affect only the debug
       34       34                  schema.
       35       35
       36       36                  Because temp storage may exist in a different segment, it must
       37       37                  be addressed via a pointer register.  This necessitates the
       38       38                  use of a base triad above the TEMP item.  The resulting REF
       39       39                  item from the tree-walk of the base is what is used as the
       40       40                  temp reference only if the ATTACH directive is used.  Otherwise,
       41       41                  a pointer to the BASE item is maintained for short-term temps.
       42       42
       43       43                  Temp freshness is defined as follows:
       44       44
       45       45                      PURE  - A non-reusable temp allocated on an area that is
       46       46                                preset to zero.  Currently, only one word temps
       47       47                                can be pure.
       48       48
       49       49                      FRESH - A non-reusable, never been used temp.
       50       50
       51       51                      STALE - A reusable temp, that may have been previously used.
       52       52        */
       53       53        /*D*
       54       54             NAME: Z8HU$ALLOT_TEMP
       55       55             CALL:
       56       56                  CALL Z8HU$ALLOT_TEMP(=FORMAT, =BOUNDARY, =DESC, =FRESHNESS);
       57       57             PARAMETERS:
       58       58                  FORMAT   - Either %NDSC or %ADSC to determine descriptor units.
       59       59                  BOUNDARY - Either even, odd, or next (meaning don't care).
       60       60                  DESC     - A machine descriptor describing the type of temp
       61       61                               to create.
       62       62                  FRESHNESS- Freshness of temp to allocate (see above).
       63       63                  TYPE     - Type of temp to allocate (ex. TYA).
       64       64             INTERFACE:
       65       65                  Z8AT$CREATE_TEMPORARY
       66       66             ENVIRONMENT:
       67       67                  None.
       68       68             INPUT:
       69       69                  None.
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:19   
       70       70             OUTPUT:
       71       71                  Tree containing a BASE item with a LOP of the TEMP ST item, and a
       72       72                  ROP of the current ESC triad.
       73       73             SCRATCH:
       74       74                  None.
       75       75             DESCRIPTION:
       76       76                  None.
       77       77        */
       78       78
       79       79    1        DCL FORMAT SBIN WORD;
       80       80    1        DCL BOUNDARY SBIN WORD;
       81       81             %EQU PHASE = 4;
       82       82             %EQU TWO_WORD_TEMP = 72;
       83       83             %INCLUDE Z9A_FLAGS;
       84       97             %INCLUDE Z8A_DEFC;
       85      165             %INCLUDE Z8A_SUPP_MAC;
       86     2565             %INCLUDE Z8A_DESC;
       87     2611             %INCLUDE Z8A_TYPES;
       88     2785    1        DCL FRESHNESS SBIN WORD;
       89     2786    1        DCL 1 TYPE_DESC ALIGNED,
       90     2787                   %TYPE_DESC;
       91     2821
       92     2822    1        DCL LENGTH_OF_TEMP_IN_BITS SBIN WORD;
       93     2823    1        DCL BLKNAME   CHAR(28);
       94     2824    1        DCL TEMP_UBIN UBIN;
       95     2825    1        DCL TEMP_CHAR CHAR(4);
       96     2826    1        DCL TEMP$     PTR;
       97     2827    1        DCL ETT$$     PTR;
       98     2828    1        DCL LENGTH$   PTR;
       99     2829
      100     2830             %INCLUDE Z8A_ILL;
      101     3523             %INCLUDE Z8A_ETT;
      102     3824             %INCLUDE Z8A_ST;
      103     7483             %INCLUDE Z8A_DNT;
      104     7704             %INCLUDE Z8A_COMCOM;
      105     8354             %INCLUDE Z8A_ERR_NUMS;
      106     9118             %INCLUDE Z8A_LTS;
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:20   
      107    11195
      108    11196             %INCLUDE Z8H_TEMP;
      109    11244             %INCLUDE Z8H_EXT;
      110    11295             %INCLUDE Z8A_OBJ;
      111    11792             %INCLUDE Z8H_DEP;
      112    11899             %INCLUDE Z8H_CODE;
      113    12029
      114    12030    1        DCL Z8AT$CREATE_TEMPORARY ENTRY(2);
      115    12031    1        DCL Z8HU$WALK ENTRY(1);
      116    12032    1        DCL Z8HI$BURST ENTRY(2);
      117    12033    1        DCL Z8HU$INCCNT ENTRY(2);
      118    12034    1        DCL Z8HU$DEC_COUNT ENTRY(2);
      119    12035    1        DCL Z8HU$POOL_PRIME  ENTRY(1);
      120    12036    1        DCL Z8HU$POOL        ENTRY(1);
      121    12037    1        DCL Z8AE$ERROR  ENTRY(12);
      122    12038
      123    12039    1        IF FORMAT = %N THEN

  12039 39 000002   200003 470500                    LDP0    @FORMAT,,AUTO
        39 000003   000000 235100                    LDA     0,,PR0
        39 000004   000001 115007                    CMPA    1,DL
        39 000005   000037 601000 39                 TNZ     s:12045

      124    12040    1          IF TYPE_DESC.DESC.NDSC.TN = %NDSC4 THEN

  12040 39 000006   200005 471500                    LDP1    @TYPE_DESC,,AUTO
        39 000007   100001 236100                    LDQ     1,,PR1
        39 000010   040000 316007                    CANQ    16384,DL
        39 000011   000025 600000 39                 TZE     s:12043

      125    12041    1            LENGTH_OF_TEMP_IN_BITS = ((TYPE_DESC.DESC.NDSC.N + TYPE_DESC.DESC.NDSC.CN)
             12041                     * 9) / 2;

  12041 39 000012   100001 236100                    LDQ     1,,PR1
        39 000013   000017 772000                    QRL     15
        39 000014   000007 376007                    ANQ     7,DL
        39 000015   200070 756100                    STQ     @TEMP$+1,,AUTO
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:21   
        39 000016   100001 236100                    LDQ     1,,PR1
        39 000017   000077 376007                    ANQ     63,DL
        39 000020   200070 036100                    ADLQ    @TEMP$+1,,AUTO
        39 000021   000011 402007                    MPY     9,DL
        39 000022   000001 772000                    QRL     1
        39 000023   200017 756100                    STQ     LENGTH_OF_TEMP_IN_BITS,,AUTO
        39 000024   000142 710000 39                 TRA     s:12069

      126    12042    1          ELSE
      127    12043    1            LENGTH_OF_TEMP_IN_BITS = ((TYPE_DESC.DESC.NDSC.N + TYPE_DESC.DESC.NDSC.CN)
             12043                     * 9);

  12043 39 000025   100001 236100                    LDQ     1,,PR1
        39 000026   000017 772000                    QRL     15
        39 000027   000007 376007                    ANQ     7,DL
        39 000030   200070 756100                    STQ     @TEMP$+1,,AUTO
        39 000031   100001 236100                    LDQ     1,,PR1
        39 000032   000077 376007                    ANQ     63,DL
        39 000033   200070 036100                    ADLQ    @TEMP$+1,,AUTO
        39 000034   000011 402007                    MPY     9,DL
        39 000035   200017 756100                    STQ     LENGTH_OF_TEMP_IN_BITS,,AUTO
        39 000036   000142 710000 39                 TRA     s:12069

      128    12044    2        ELSE DO;

      129    12045    2          IF TYPE_DESC.DESC.ADSC.TA = %ADSC4 THEN

  12045 39 000037   200005 471500                    LDP1    @TYPE_DESC,,AUTO
        39 000040   100001 236100                    LDQ     1,,PR1
        39 000041   060000 376007                    ANQ     24576,DL
        39 000042   040000 116007                    CMPQ    16384,DL
        39 000043   000057 601000 39                 TNZ     s:12048

      130    12046    2            LENGTH_OF_TEMP_IN_BITS = ((TYPE_DESC.DESC.ADSC.N + TYPE_DESC.DESC.ADSC.CN)
             12046                     * 9) / 2;

  12046 39 000044   100001 236100                    LDQ     1,,PR1
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:22   
        39 000045   000020 772000                    QRL     16
        39 000046   000003 376007                    ANQ     3,DL
        39 000047   200070 756100                    STQ     @TEMP$+1,,AUTO
        39 000050   100001 236100                    LDQ     1,,PR1
        39 000051   007777 376007                    ANQ     4095,DL
        39 000052   200070 036100                    ADLQ    @TEMP$+1,,AUTO
        39 000053   000011 402007                    MPY     9,DL
        39 000054   000001 772000                    QRL     1
        39 000055   200017 756100                    STQ     LENGTH_OF_TEMP_IN_BITS,,AUTO
        39 000056   000070 710000 39                 TRA     s:12049

      131    12047    2          ELSE
      132    12048    2            LENGTH_OF_TEMP_IN_BITS = ((TYPE_DESC.DESC.ADSC.N + TYPE_DESC.DESC.ADSC.CN)
             12048                     * 9);

  12048 39 000057   100001 236100                    LDQ     1,,PR1
        39 000060   000020 772000                    QRL     16
        39 000061   000003 376007                    ANQ     3,DL
        39 000062   200070 756100                    STQ     @TEMP$+1,,AUTO
        39 000063   100001 236100                    LDQ     1,,PR1
        39 000064   007777 376007                    ANQ     4095,DL
        39 000065   200070 036100                    ADLQ    @TEMP$+1,,AUTO
        39 000066   000011 402007                    MPY     9,DL
        39 000067   200017 756100                    STQ     LENGTH_OF_TEMP_IN_BITS,,AUTO

      133    12049    3          IF TYPE_DESC.SIZ$ ~= ADDR(NIL) THEN DO;

  12049 39 000070   100002 236100                    LDQ     2,,PR1
        39 000071   000000 116000 40                 CMPQ    0
        39 000072   000142 600000 39                 TZE     s:12069

      134    12050                 %FISH (TRIAD = TYPE_DESC.SIZ$, RTN = LENGTH$);

  12052 39 000073   200033 756100                    STQ     LENGTH$,,AUTO

  12053 39 000074   200033 473500                    LDP3    LENGTH$,,AUTO
        39 000075   300000 220100                    LDX0    0,,PR3
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:23   
        39 000076   000751 100003                    CMPX0   489,DU
        39 000077   000107 603000 39                 TRC     s:12058

  12054 39 000100   200033 470500                    LDP0    LENGTH$,,AUTO
        39 000101   000001 236100                    LDQ     1,,PR0
        39 000102   200033 756100                    STQ     LENGTH$,,AUTO

  12055 39 000103   200033 470500                    LDP0    LENGTH$,,AUTO
        39 000104   000000 220100                    LDX0    0,,PR0
        39 000105   000751 100003                    CMPX0   489,DU
        39 000106   000100 602000 39                 TNC     s:12054

      135    12058    3            IF LENGTH$ -> ST.ID = %CONST THEN

  12058 39 000107   200033 470500                    LDP0    LENGTH$,,AUTO
        39 000110   000000 220100                    LDX0    0,,PR0
        39 000111   000767 100003                    CMPX0   503,DU
        39 000112   000142 601000 39                 TNZ     s:12069

      136    12059    4              DO;

      137    12060    4                IF TYPE_DESC.TYPE = %TYB

  12060 39 000113   200005 471500                    LDP1    @TYPE_DESC,,AUTO
        39 000114   100000 235100                    LDA     0,,PR1
        39 000115   000014 115007                    CMPA    12,DL
        39 000116   000131 601000 39                 TNZ     s:12063

      138    12061    4                 THEN LENGTH_OF_TEMP_IN_BITS = MAXIMUM ((LENGTH$ -> CONST.CONSTI.WORD1

  12061 39 000117   100001 236100                    LDQ     1,,PR1
        39 000120   000017 772000                    QRL     15
        39 000121   000007 376007                    ANQ     7,DL
        39 000122   000010 036100                    ADLQ    8,,PR0
        39 000123   000006 402007                    MPY     6,DL
        39 000124   000006 116007                    CMPQ    6,DL
        39 000125   000127 605000 39                 TPL     s:12061+8
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:24   
        39 000126   000006 236007                    LDQ     6,DL
        39 000127   200017 756100                    STQ     LENGTH_OF_TEMP_IN_BITS,,AUTO
        39 000130   000142 710000 39                 TRA     s:12069

      139    12062    4                      + TYPE_DESC.DESC.NDSC.CN) * 6, 6);
      140    12063    4                 ELSE LENGTH_OF_TEMP_IN_BITS = MAXIMUM ((LENGTH$ -> CONST.CONSTI.WORD1

  12063 39 000131   100001 236100                    LDQ     1,,PR1
        39 000132   000020 772000                    QRL     16
        39 000133   000003 376007                    ANQ     3,DL
        39 000134   000010 036100                    ADLQ    8,,PR0
        39 000135   000011 402007                    MPY     9,DL
        39 000136   000011 116007                    CMPQ    9,DL
        39 000137   000141 605000 39                 TPL     s:12063+8
        39 000140   000011 236007                    LDQ     9,DL
        39 000141   200017 756100                    STQ     LENGTH_OF_TEMP_IN_BITS,,AUTO

      141    12064    4                      + TYPE_DESC.DESC.ADSC.CN) * 9, 9);
      142    12065    4              END;

      143    12066    3          END;

      144    12067    2        END;

      145    12068
      146    12069    1        IF (LENGTH_OF_TEMP_IN_BITS = %TWO_WORD_TEMP) AND

  12069 39 000142   200017 235100                    LDA     LENGTH_OF_TEMP_IN_BITS,,AUTO
        39 000143   000110 115007                    CMPA    72,DL
        39 000144   000152 601000 39                 TNZ     s:12073
        39 000145   200004 470500                    LDP0    @BOUNDARY,,AUTO
        39 000146   000000 235100                    LDA     0,,PR0
        39 000147   000152 601000 39                 TNZ     s:12073

      147    12070    1           (BOUNDARY = %NEXT) THEN
      148    12071    1          BOUNDARY = %EVEN;

PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:25   
  12071 39 000150   000002 236007                    LDQ     2,DL
        39 000151   000000 756100                    STQ     0,,PR0

      149    12072
      150    12073    1        CALL REUSE_TEMP(TEMP$)

  12073 39 000152   200031 630500                    EPPR0   TEMP$,,AUTO
        39 000153   200067 450500                    STP0    SEG_NO#+3,,AUTO
        39 000154   001312 701000 39                 TSX1    REUSE_TEMP
        39 000155   000221 702000 39                 TSX2    s:12101

      151    12074    2        WHENRETURN DO;

      152    12075               %REMOVE_FROM_DL_LIST(PTR=TEMP$,ITEM=TEMP,HEAD=HEAD_TEMP$);

  12077 39 000156   200031 470500                    LDP0    TEMP$,,AUTO
        39 000157   000010 236100                    LDQ     8,,PR0
        39 000160   000000 116000 40                 CMPQ    0
        39 000161   000174 601000 39                 TNZ     s:12085

  12079 39 000162   000011 236100                    LDQ     9,,PR0
        39 000163   000000 116000 40                 CMPQ    0
        39 000164   000170 601000 39                 TNZ     s:12082

  12080 39 000165   000000 236000 40                 LDQ     0
        39 000166   000000 756000 22                 STQ     HEAD_TEMP$
        39 000167   000215 710000 39                 TRA     s:12097

  12082 39 000170   000011 471500                    LDP1    9,,PR0
        39 000171   000000 236000 40                 LDQ     0
        39 000172   100010 756100                    STQ     8,,PR1

  12083 39 000173   000215 710000 39                 TRA     s:12097

  12085 39 000174   200031 236100                    LDQ     TEMP$,,AUTO
        39 000175   000000 116000 22                 CMPQ    HEAD_TEMP$
        39 000176   000206 601000 39                 TNZ     s:12092
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:26   

  12087 39 000177   000010 471500                    LDP1    8,,PR0
        39 000200   000000 236000 40                 LDQ     0
        39 000201   100011 756100                    STQ     9,,PR1

  12088 39 000202   200031 470500                    LDP0    TEMP$,,AUTO
        39 000203   000010 236100                    LDQ     8,,PR0
        39 000204   000000 756000 22                 STQ     HEAD_TEMP$

  12089 39 000205   000215 710000 39                 TRA     s:12097

  12092 39 000206   000010 471500                    LDP1    8,,PR0
        39 000207   000011 236100                    LDQ     9,,PR0
        39 000210   100011 756100                    STQ     9,,PR1

  12093 39 000211   200031 470500                    LDP0    TEMP$,,AUTO
        39 000212   000011 471500                    LDP1    9,,PR0
        39 000213   000010 236100                    LDQ     8,,PR0
        39 000214   100010 756100                    STQ     8,,PR1

      153    12097    2          TEMP$ -> TEMP.B.GREATER_256K = FALSE;

  12097 39 000215   200031 470500                    LDP0    TEMP$,,AUTO
        39 000216   000001 236000 40                 LDQ     1
        39 000217   000003 356100                    ANSQ    3,,PR0

      154    12098    2        END;

  12098 39 000220   000770 710000 39                 TRA     s:12439

      155    12099
      156    12100    2        WHENALTRETURN DO;

      157    12101    2          CALL Z8AT$CREATE_TEMPORARY(%TEMP,TEMP$);

  12101 39 000221   200031 630500                    EPPR0   TEMP$,,AUTO
        39 000222   200071 450500                    STP0    @TEMP$+2,,AUTO
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:27   
        39 000223   000004 236000 40                 LDQ     4
        39 000224   200070 756100                    STQ     @TEMP$+1,,AUTO
        39 000225   200070 630500                    EPPR0   @TEMP$+1,,AUTO
        39 000226   000002 631400 40                 EPPR1   2
        39 000227   000000 701000 xent               TSX1    Z8AT$CREATE_TEMPORARY
        39 000230   000000 011000                    NOP     0

      158    12102
      159    12103    3          DO CASE(BOUNDARY);

  12103 39 000231   200004 470500                    LDP0    @BOUNDARY,,AUTO
        39 000232   000000 235100                    LDA     0,,PR0
        39 000233   000003 115007                    CMPA    3,DL
        39 000234   000236 602005 39                 TNC     s:12103+5,AL
        39 000235   000264 710000 39                 TRA     s:12124
        39 000236   000264 710000 39                 TRA     s:12124
        39 000237   000241 710000 39                 TRA     s:12108
        39 000240   000251 710000 39                 TRA     s:12112

      160    12104    3            CASE(%NEXT);

      161    12105                   /* Everything is fine */
      162    12106
      163    12107    3            CASE(%ODD);

      164    12108    3              COMCOM.LAST_BLOCK$ -> BLOCK.SIZE = COMCOM.LAST_BLOCK$ -> BLOCK.SIZE

  12108 39 000241   000375 471400 xsym               LDP1    COMCOM+253
        39 000242   100002 236100                    LDQ     2,,PR1
        39 000243   000022 772000                    QRL     18
        39 000244   000001 772000                    QRL     1
        39 000245   000001 736000                    QLS     1
        39 000246   000001 620006                    EAX0    1,QL
        39 000247   100002 740100                    STX0    2,,PR1
        39 000250   000264 710000 39                 TRA     s:12124

      165    12109    3                / 2 * 2 + 1;
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:28   
      166    12110
      167    12111    3            CASE(%EVEN);

      168    12112    3              IF COMCOM.LAST_BLOCK$ -> BLOCK.SIZE < %(#256K - 1) THEN

  12112 39 000251   000375 471400 xsym               LDP1    COMCOM+253
        39 000252   100002 220100                    LDX0    2,,PR1
        39 000253   777777 100003                    CMPX0   -1,DU
        39 000254   000264 603000 39                 TRC     s:12124

      169    12113    3                COMCOM.LAST_BLOCK$ -> BLOCK.SIZE = (COMCOM.LAST_BLOCK$ -> BLOCK.SIZE +
             12113                         1)/2*2;

  12113 39 000255   100002 236100                    LDQ     2,,PR1
        39 000256   000022 772000                    QRL     18
        39 000257   000001 036007                    ADLQ    1,DL
        39 000260   000001 772000                    QRL     1
        39 000261   000001 736000                    QLS     1
        39 000262   000000 621006                    EAX1    0,QL
        39 000263   100002 741100                    STX1    2,,PR1

      170    12114                   %IF GCOS;
      177    12121                   %ENDIF;
      178    12122    3          END /* Case */;

      179    12123
      180    12124    2          IF COMCOM.LAST_BLOCK$ -> BLOCK.SIZE + (LENGTH_OF_TEMP_IN_BITS + 35) / 36

  12124 39 000264   200017 236100                    LDQ     LENGTH_OF_TEMP_IN_BITS,,AUTO
        39 000265   000043 036007                    ADLQ    35,DL
        39 000266   000044 506007                    DIV     36,DL
        39 000267   000375 471400 xsym               LDP1    COMCOM+253
        39 000270   200070 756100                    STQ     @TEMP$+1,,AUTO
        39 000271   100002 236100                    LDQ     2,,PR1
        39 000272   000022 772000                    QRL     18
        39 000273   200071 756100                    STQ     @TEMP$+2,,AUTO
        39 000274   200070 236100                    LDQ     @TEMP$+1,,AUTO
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:29   
        39 000275   200071 036100                    ADLQ    @TEMP$+2,,AUTO
        39 000276   777777 116007                    CMPQ    -1,DL
        39 000277   000303 605000 39                 TPL     s:12126
        39 000300   100003 236100                    LDQ     3,,PR1
        39 000301   100000 316003                    CANQ    32768,DU
        39 000302   000522 600000 39                 TZE     s:12265

      181    12125    3              >= (%#256K - 1) OR COMCOM.LAST_BLOCK$ -> BLOCK.B.SIZE_256K THEN DO;

      182    12126    3            IF NOT COMCOM.OB.MS_DATA

  12126 39 000303   000074 234000 xsym               SZN     COMCOM+60
        39 000304   000311 604000 39                 TMI     s:12128

      183    12127    3              THEN CALL Z8AE$ERROR (%E$DATA_LIMIT);

  12127 39 000305   000007 630400 40                 EPPR0   7
        39 000306   000005 631400 40                 EPPR1   5
        39 000307   000000 701000 xent               TSX1    Z8AE$ERROR
        39 000310   000000 011000                    NOP     0

      184    12128    3            BLKNAME = COMCOM.BLOCK$ -> BLOCK.DNT$ -> DNT.TEXT.NAME ;

  12128 39 000311   000145 470400 xsym               LDP0    COMCOM+101
        39 000312   000006 471500                    LDP1    6,,PR0
        39 000313   100004 220100                    LDX0    4,,PR1
        39 000314   040100 100540                    MLR     fill='040'O
        39 000315   100004 400010                    ADSC9   4,,PR1                   cn=2,n=*X0
        39 000316   200020 000034                    ADSC9   BLKNAME,,AUTO            cn=0,n=28

      185    12129    3            CALL BINCHAR (TEMP_CHAR, COMCOM.BLOCKC + 1) ;

  12129 39 000317   000144 235000 xsym               LDA     COMCOM+100
        39 000320   000001 035007                    ADLA    1,DL
        39 000321   200070 755100                    STA     @TEMP$+1,,AUTO
        39 000322   000100 301500                    BTD
        39 000323   200070 000004                    NDSC9   @TEMP$+1,,AUTO           cn=0,s=lsgnf,sf=0,n=4
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:30   
        39 000324   200030 030004                    NDSC9   TEMP_CHAR,,AUTO          cn=0,s=nosgn,sf=0,n=4

      186    12130    3            IF COMCOM.BLOCKC < 9 THEN TEMP_UBIN = 4 ;

  12130 39 000325   000144 236000 xsym               LDQ     COMCOM+100
        39 000326   000011 116007                    CMPQ    9,DL
        39 000327   000333 605000 39                 TPL     s:12131

  12130 39 000330   000004 235007                    LDA     4,DL
        39 000331   200027 755100                    STA     TEMP_UBIN,,AUTO
        39 000332   000342 710000 39                 TRA     s:12133

      187    12131    3            ELSE IF COMCOM.BLOCKC < 99 THEN TEMP_UBIN = 3 ;

  12131 39 000333   000143 116007                    CMPQ    99,DL
        39 000334   000340 605000 39                 TPL     s:12132

  12131 39 000335   000003 235007                    LDA     3,DL
        39 000336   200027 755100                    STA     TEMP_UBIN,,AUTO
        39 000337   000342 710000 39                 TRA     s:12133

      188    12132    3            ELSE TEMP_UBIN = 2 ;

  12132 39 000340   000002 235007                    LDA     2,DL
        39 000341   200027 755100                    STA     TEMP_UBIN,,AUTO

      189    12133    3            CALL INSERT (BLKNAME, TEMP_UBIN, 5 - TEMP_UBIN,

  12133 39 000342   777772 620005                    EAX0    -6,AL
        39 000343   777777 660003                    ERX0    -1,DU
        39 000344   040145 100545                    MLR     fill='040'O
        39 000345   200027 600010                    ADSC9   TEMP_UBIN,A,AUTO         cn=3,n=*X0
        39 000346   200020 000010                    ADSC9   BLKNAME,A,AUTO           cn=0,n=*X0

      190    12134    3                SUBSTR (TEMP_CHAR, TEMP_UBIN - 1)) ;
      191    12135                 %NEW_DNT (@SIZE = "COMCOM.BLOCK$ -> BLOCK.DNT$ -> DNT.TEXT.LENGTH",
      192    12136                           @NAME = BLKNAME) ;
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:31   

  12139 39 000347   000006 471500                    LDP1    6,,PR0
        39 000350   100004 236100                    LDQ     4,,PR1
        39 000351   000022 772000                    QRL     18
        39 000352   000025 036007                    ADLQ    21,DL
        39 000353   000002 772000                    QRL     2
        39 000354   000000 756000 0                  STQ     ITERATION

  12140 39 000355   000002 036000 10                 ADLQ    DNT_+2
        39 000356   000371 604000 39                 TMI     s:12142
        39 000357   000003 116000 10                 CMPQ    DNT_+3
        39 000360   000371 602000 39                 TNC     s:12142

  12141 39 000361   000010 236000 40                 LDQ     8
        39 000362   200070 756100                    STQ     @TEMP$+1,,AUTO
        39 000363   200070 631500                    EPPR1   @TEMP$+1,,AUTO
        39 000364   200071 451500                    STP1    @TEMP$+2,,AUTO
        39 000365   200071 630500                    EPPR0   @TEMP$+2,,AUTO
        39 000366   000005 631400 40                 EPPR1   5
        39 000367   000000 701000 xent               TSX1    Z8AR$RESERVER
        39 000370   000000 011000                    NOP     0

  12142 39 000371   000002 236000 10                 LDQ     DNT_+2
        39 000372   000022 736000                    QLS     18
        39 000373   000001 036000 10                 ADLQ    DNT_+1
        39 000374   000000 756000 9                  STQ     DNT$

  12143 39 000375   000002 236000 10                 LDQ     DNT_+2
        39 000376   000000 036000 0                  ADLQ    ITERATION
        39 000377   000002 756000 10                 STQ     DNT_+2

  12144 39 000400   001046 220003                    LDX0    550,DU
        39 000401   000000 470400 9                  LDP0    DNT$
        39 000402   000000 740100                    STX0    0,,PR0

  12145 39 000403   000000 721000 0                  LXL1    ITERATION
        39 000404   000000 470400 9                  LDP0    DNT$
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:32   
        39 000405   000000 441100                    SXL1    0,,PR0

  12146 39 000406   000145 470400 xsym               LDP0    COMCOM+101
        39 000407   000006 471500                    LDP1    6,,PR0
        39 000410   100004 221100                    LDX1    4,,PR1
        39 000411   000000 473400 9                  LDP3    DNT$
        39 000412   300004 741100                    STX1    4,,PR3

  12149 39 000413   000000 236000 40                 LDQ     0
        39 000414   300001 756100                    STQ     1,,PR3

  12150 39 000415   300002 756100                    STQ     2,,PR3

  12151 39 000416   000000 222003                    LDX2    0,DU
        39 000417   300003 742100                    STX2    3,,PR3

  12152 39 000420   000000 223003                    LDX3    0,DU
        39 000421   300003 443100                    SXL3    3,,PR3

  12153 39 000422   040140 100500                    MLR     fill='040'O
        39 000423   200020 000034                    ADSC9   BLKNAME,,AUTO            cn=0,n=28
        39 000424   300004 400011                    ADSC9   4,,PR3                   cn=2,n=*X1

      193    12194                 %NEW_BLOCK (@R = %BLOCK_, @DNT$ = DNT$) ;

  12198 39 000425   000002 236000 8                  LDQ     ST_+2
        39 000426   000013 036007                    ADLQ    11,DL
        39 000427   000003 116000 8                  CMPQ    ST_+3
        39 000430   000441 604000 39                 TMI     s:12200

  12199 39 000431   000011 236000 40                 LDQ     9
        39 000432   200070 756100                    STQ     @TEMP$+1,,AUTO
        39 000433   200070 630500                    EPPR0   @TEMP$+1,,AUTO
        39 000434   200071 450500                    STP0    @TEMP$+2,,AUTO
        39 000435   200071 630500                    EPPR0   @TEMP$+2,,AUTO
        39 000436   000005 631400 40                 EPPR1   5
        39 000437   000000 701000 xent               TSX1    Z8AR$RESERVER
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:33   
        39 000440   000000 011000                    NOP     0

  12200 39 000441   000002 236000 8                  LDQ     ST_+2
        39 000442   000022 736000                    QLS     18
        39 000443   000001 036000 8                  ADLQ    ST_+1
        39 000444   000000 756000 7                  STQ     ST$

  12201 39 000445   000013 236007                    LDQ     11,DL
        39 000446   000002 056000 8                  ASQ     ST_+2

  12205 39 000447   000144 054000 xsym               AOS     COMCOM+100

  12206 39 000450   000000 470400 7                  LDP0    ST$
        39 000451   000144 236000 xsym               LDQ     COMCOM+100
        39 000452   000000 552104                    STBQ    0,'04'O,PR0

  12214 39 000453   000774 220003                    LDX0    508,DU
        39 000454   000000 470400 7                  LDP0    ST$
        39 000455   000000 740100                    STX0    0,,PR0

  12215 39 000456   000000 470400 7                  LDP0    ST$
        39 000457   003000 236007                    LDQ     1536,DL
        39 000460   000000 552110                    STBQ    0,'10'O,PR0

  12216 39 000461   000000 221003                    LDX1    0,DU
        39 000462   000000 470400 7                  LDP0    ST$
        39 000463   000002 741100                    STX1    2,,PR0

  12217 39 000464   000133 722000 xsym               LXL2    COMCOM+91
        39 000465   000002 442100                    SXL2    2,,PR0

  12218 39 000466   000003 450100                    STZ     3,,PR0

  12219 39 000467   000000 236000 40                 LDQ     0
        39 000470   000004 756100                    STQ     4,,PR0

  12220 39 000471   000000 236000 9                  LDQ     DNT$
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:34   
        39 000472   000006 756100                    STQ     6,,PR0

  12221 39 000473   000000 236000 40                 LDQ     0
        39 000474   000007 756100                    STQ     7,,PR0

  12231 39 000475   000012 756100                    STQ     10,,PR0

      194    12258    4            IF COMCOM.LAST_BLOCK$ = COMCOM.BLOCK$ THEN DO TEMP_UBIN = 3 TO COMCOM.
             12258                     BLOCKC;

  12258 39 000476   000375 236000 xsym               LDQ     COMCOM+253
        39 000477   000145 116000 xsym               CMPQ    COMCOM+101
        39 000500   000516 601000 39                 TNZ     s:12261

  12258 39 000501   000003 235007                    LDA     3,DL
        39 000502   200027 755100                    STA     TEMP_UBIN,,AUTO
        39 000503   000512 710000 39                 TRA     s:12260+3

      195    12259    4              COMCOM.LAST_BLOCK$ = COMCOM.LAST_BLOCK$ -> BLOCK.NEXT;

  12259 39 000504   000375 470400 xsym               LDP0    COMCOM+253
        39 000505   000004 236100                    LDQ     4,,PR0
        39 000506   000375 756000 xsym               STQ     COMCOM+253

      196    12260    4            END;

  12260 39 000507   200027 235100                    LDA     TEMP_UBIN,,AUTO
        39 000510   000001 035007                    ADLA    1,DL
        39 000511   200027 755100                    STA     TEMP_UBIN,,AUTO
        39 000512   200027 236100                    LDQ     TEMP_UBIN,,AUTO
        39 000513   000516 604000 39                 TMI     s:12261
        39 000514   000144 116000 xsym               CMPQ    COMCOM+100
        39 000515   000504 604400 39                 TMOZ    s:12259

      197    12261    3            COMCOM.LAST_BLOCK$ -> BLOCK.NEXT = ST$;

  12261 39 000516   000000 236000 7                  LDQ     ST$
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:35   
        39 000517   000375 470400 xsym               LDP0    COMCOM+253
        39 000520   000004 756100                    STQ     4,,PR0

      198    12262    3            COMCOM.LAST_BLOCK$ = ST$;

  12262 39 000521   000375 756000 xsym               STQ     COMCOM+253

      199    12263    3          END;

      200    12264
      201    12265    2          CALL CHECK_ESCAPE;

  12265 39 000522   001405 701000 39                 TSX1    CHECK_ESCAPE
        39 000523   000000 011000                    NOP     0

      202    12266
      203    12267    2          TEMP$ -> TEMP.SA = COMCOM.LAST_BLOCK$ -> BLOCK.SIZE;

  12267 39 000524   000375 470400 xsym               LDP0    COMCOM+253
        39 000525   000002 220100                    LDX0    2,,PR0
        39 000526   200031 471500                    LDP1    TEMP$,,AUTO
        39 000527   100001 740100                    STX0    1,,PR1

      204    12268    2          TEMP$ -> TEMP.COUNT = COMCOM.LAST_BLOCK$ -> BLOCK.COUNT;

  12268 39 000530   000375 470400 xsym               LDP0    COMCOM+253
        39 000531   200031 471500                    LDP1    TEMP$,,AUTO
        39 000532   000000 236100                    LDQ     0,,PR0
        39 000533   100000 552104                    STBQ    0,'04'O,PR1

      205    12269    2          TEMP$ -> TEMP.LENGTH = LENGTH_OF_TEMP_IN_BITS;

  12269 39 000534   200017 720100                    LXL0    LENGTH_OF_TEMP_IN_BITS,,AUTO
        39 000535   200031 470500                    LDP0    TEMP$,,AUTO
        39 000536   000004 440100                    SXL0    4,,PR0

      206    12270
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:36   
      207    12271    2          IF CURRENT_BLOCK$ ~= COMCOM.LAST_BLOCK$ THEN

  12271 39 000537   000000 236000 37                 LDQ     CURRENT_BLOCK$
        39 000540   000375 116000 xsym               CMPQ    COMCOM+253
        39 000541   000656 600000 39                 TZE     s:12401

      208    12272    3            DO;

      209    12273                   %NEW_ORG(@ST$=COMCOM.LAST_BLOCK$);

  12291 39 000542   000002 236000 34                 LDQ     OBJ_+2
        39 000543   000002 036007                    ADLQ    2,DL
        39 000544   000003 116000 34                 CMPQ    OBJ_+3
        39 000545   000557 604000 39                 TMI     s:12297

  12293 39 000546   000000 234000 28                 SZN     PAGING_OBJ
        39 000547   000554 605000 39                 TPL     s:12295

  12294 39 000550   000012 630400 40                 EPPR0   10
        39 000551   000005 631400 40                 EPPR1   5
        39 000552   000000 701000 xent               TSX1    Z9HF$WRITE_OBJ_PAGE
        39 000553   000000 011000                    NOP     0

  12295 39 000554   000013 631400 40                 EPPR1   11
        39 000555   000000 701000 xent               TSX1    Z9HF$GET_OBJ_PAGE
        39 000556   000000 011000                    NOP     0

  12297 39 000557   000002 236000 34                 LDQ     OBJ_+2
        39 000560   000022 736000                    QLS     18
        39 000561   000001 036000 34                 ADLQ    OBJ_+1
        39 000562   000000 756000 27                 STQ     OBJ$

  12298 39 000563   000002 236007                    LDQ     2,DL
        39 000564   000002 056000 34                 ASQ     OBJ_+2

  12299 39 000565   001013 220003                    LDX0    523,DU
        39 000566   000000 470400 27                 LDP0    OBJ$
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:37   
        39 000567   000000 740100                    STX0    0,,PR0

  12303 39 000570   000375 236000 xsym               LDQ     COMCOM+253
        39 000571   000000 470400 27                 LDP0    OBJ$
        39 000572   000001 756100                    STQ     1,,PR0

      210    12309                   %NEW_LAB(@ST$=TEMP$);

  12327 39 000573   000002 236000 34                 LDQ     OBJ_+2
        39 000574   000002 036007                    ADLQ    2,DL
        39 000575   000003 116000 34                 CMPQ    OBJ_+3
        39 000576   000610 604000 39                 TMI     s:12333

  12329 39 000577   000000 234000 28                 SZN     PAGING_OBJ
        39 000600   000605 605000 39                 TPL     s:12331

  12330 39 000601   000012 630400 40                 EPPR0   10
        39 000602   000005 631400 40                 EPPR1   5
        39 000603   000000 701000 xent               TSX1    Z9HF$WRITE_OBJ_PAGE
        39 000604   000000 011000                    NOP     0

  12331 39 000605   000013 631400 40                 EPPR1   11
        39 000606   000000 701000 xent               TSX1    Z9HF$GET_OBJ_PAGE
        39 000607   000000 011000                    NOP     0

  12333 39 000610   000002 236000 34                 LDQ     OBJ_+2
        39 000611   000022 736000                    QLS     18
        39 000612   000001 036000 34                 ADLQ    OBJ_+1
        39 000613   000000 756000 27                 STQ     OBJ$

  12334 39 000614   000002 236007                    LDQ     2,DL
        39 000615   000002 056000 34                 ASQ     OBJ_+2

  12335 39 000616   001011 220003                    LDX0    521,DU
        39 000617   000000 470400 27                 LDP0    OBJ$
        39 000620   000000 740100                    STX0    0,,PR0

PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:38   
  12339 39 000621   200031 236100                    LDQ     TEMP$,,AUTO
        39 000622   000000 470400 27                 LDP0    OBJ$
        39 000623   000001 756100                    STQ     1,,PR0

      211    12345                   %NEW_ORG(@ST$=CURRENT_BLOCK$);

  12363 39 000624   000002 236000 34                 LDQ     OBJ_+2
        39 000625   000002 036007                    ADLQ    2,DL
        39 000626   000003 116000 34                 CMPQ    OBJ_+3
        39 000627   000641 604000 39                 TMI     s:12369

  12365 39 000630   000000 234000 28                 SZN     PAGING_OBJ
        39 000631   000636 605000 39                 TPL     s:12367

  12366 39 000632   000012 630400 40                 EPPR0   10
        39 000633   000005 631400 40                 EPPR1   5
        39 000634   000000 701000 xent               TSX1    Z9HF$WRITE_OBJ_PAGE
        39 000635   000000 011000                    NOP     0

  12367 39 000636   000013 631400 40                 EPPR1   11
        39 000637   000000 701000 xent               TSX1    Z9HF$GET_OBJ_PAGE
        39 000640   000000 011000                    NOP     0

  12369 39 000641   000002 236000 34                 LDQ     OBJ_+2
        39 000642   000022 736000                    QLS     18
        39 000643   000001 036000 34                 ADLQ    OBJ_+1
        39 000644   000000 756000 27                 STQ     OBJ$

  12370 39 000645   000002 236007                    LDQ     2,DL
        39 000646   000002 056000 34                 ASQ     OBJ_+2

  12371 39 000647   001013 220003                    LDX0    523,DU
        39 000650   000000 470400 27                 LDP0    OBJ$
        39 000651   000000 740100                    STX0    0,,PR0

  12375 39 000652   000000 236000 37                 LDQ     CURRENT_BLOCK$
        39 000653   000000 470400 27                 LDP0    OBJ$
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:39   
        39 000654   000001 756100                    STQ     1,,PR0

      212    12381    3            END;

  12381 39 000655   000707 710000 39                 TRA     s:12421

      213    12382    2          ELSE
      214    12383                 %NEW_LAB(@ST$=TEMP$);

  12401 39 000656   000002 236000 34                 LDQ     OBJ_+2
        39 000657   000002 036007                    ADLQ    2,DL
        39 000660   000003 116000 34                 CMPQ    OBJ_+3
        39 000661   000673 604000 39                 TMI     s:12407

  12403 39 000662   000000 234000 28                 SZN     PAGING_OBJ
        39 000663   000670 605000 39                 TPL     s:12405

  12404 39 000664   000012 630400 40                 EPPR0   10
        39 000665   000005 631400 40                 EPPR1   5
        39 000666   000000 701000 xent               TSX1    Z9HF$WRITE_OBJ_PAGE
        39 000667   000000 011000                    NOP     0

  12405 39 000670   000013 631400 40                 EPPR1   11
        39 000671   000000 701000 xent               TSX1    Z9HF$GET_OBJ_PAGE
        39 000672   000000 011000                    NOP     0

  12407 39 000673   000002 236000 34                 LDQ     OBJ_+2
        39 000674   000022 736000                    QLS     18
        39 000675   000001 036000 34                 ADLQ    OBJ_+1
        39 000676   000000 756000 27                 STQ     OBJ$

  12408 39 000677   000002 236007                    LDQ     2,DL
        39 000700   000002 056000 34                 ASQ     OBJ_+2

  12409 39 000701   001011 220003                    LDX0    521,DU
        39 000702   000000 470400 27                 LDP0    OBJ$
        39 000703   000000 740100                    STX0    0,,PR0
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:40   

  12413 39 000704   200031 236100                    LDQ     TEMP$,,AUTO
        39 000705   000000 470400 27                 LDP0    OBJ$
        39 000706   000001 756100                    STQ     1,,PR0

      215    12419
      216    12420
      217    12421    3          DO CASE(FRESHNESS);

  12421 39 000707   200006 471500                    LDP1    @FRESHNESS,,AUTO
        39 000710   100000 235100                    LDA     0,,PR1
        39 000711   000004 115007                    CMPA    4,DL
        39 000712   000714 602005 39                 TNC     s:12421+5,AL
        39 000713   000770 710000 39                 TRA     s:12439
        39 000714   000754 710000 39                 TRA     s:12433
        39 000715   000734 710000 39                 TRA     s:12427
        39 000716   000770 710000 39                 TRA     s:12439
        39 000717   000720 710000 39                 TRA     s:12423

      218    12422    3            CASE(%PURE);

      219    12423    3              TEMP$ -> TEMP.B.NOT_REUSABLE = TRUE;

  12423 39 000720   200031 473500                    LDP3    TEMP$,,AUTO
        39 000721   400000 236003                    LDQ     -131072,DU
        39 000722   300003 256100                    ORSQ    3,,PR3

      220    12424    3              CALL Z8HI$BURST(TEMP$,DEP.CDEP);

  12424 39 000723   000014 236000 40                 LDQ     12
        39 000724   200071 756100                    STQ     @TEMP$+2,,AUTO
        39 000725   200031 633500                    EPPR3   TEMP$,,AUTO
        39 000726   200070 453500                    STP3    @TEMP$+1,,AUTO
        39 000727   200070 630500                    EPPR0   @TEMP$+1,,AUTO
        39 000730   000002 631400 40                 EPPR1   2
        39 000731   000000 701000 xent               TSX1    Z8HI$BURST
        39 000732   000000 011000                    NOP     0
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:41   
        39 000733   000770 710000 39                 TRA     s:12439

      221    12425
      222    12426    3            CASE(%FRESH);

      223    12427    3              TEMP$ -> TEMP.B.NOT_REUSABLE = TRUE;

  12427 39 000734   200031 473500                    LDP3    TEMP$,,AUTO
        39 000735   400000 236003                    LDQ     -131072,DU
        39 000736   300003 256100                    ORSQ    3,,PR3

      224    12428
      225    12429    3              COMCOM.LAST_BLOCK$ -> BLOCK.SIZE = COMCOM.LAST_BLOCK$ -> BLOCK.SIZE +

  12429 39 000737   200017 236100                    LDQ     LENGTH_OF_TEMP_IN_BITS,,AUTO
        39 000740   000043 036007                    ADLQ    35,DL
        39 000741   000044 506007                    DIV     36,DL
        39 000742   000375 473400 xsym               LDP3    COMCOM+253
        39 000743   200070 756100                    STQ     @TEMP$+1,,AUTO
        39 000744   300002 236100                    LDQ     2,,PR3
        39 000745   000022 772000                    QRL     18
        39 000746   200071 756100                    STQ     @TEMP$+2,,AUTO
        39 000747   200070 236100                    LDQ     @TEMP$+1,,AUTO
        39 000750   200071 036100                    ADLQ    @TEMP$+2,,AUTO
        39 000751   000000 620006                    EAX0    0,QL
        39 000752   300002 740100                    STX0    2,,PR3
        39 000753   000770 710000 39                 TRA     s:12439

      226    12430    3              ((LENGTH_OF_TEMP_IN_BITS + 35) / 36);
      227    12431
      228    12432    3            CASE(%STALE);

      229    12433    3              COMCOM.LAST_BLOCK$ -> BLOCK.SIZE = COMCOM.LAST_BLOCK$ -> BLOCK.SIZE +

  12433 39 000754   200017 236100                    LDQ     LENGTH_OF_TEMP_IN_BITS,,AUTO
        39 000755   000043 036007                    ADLQ    35,DL
        39 000756   000044 506007                    DIV     36,DL
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:42   
        39 000757   000375 473400 xsym               LDP3    COMCOM+253
        39 000760   200070 756100                    STQ     @TEMP$+1,,AUTO
        39 000761   300002 236100                    LDQ     2,,PR3
        39 000762   000022 772000                    QRL     18
        39 000763   200071 756100                    STQ     @TEMP$+2,,AUTO
        39 000764   200070 236100                    LDQ     @TEMP$+1,,AUTO
        39 000765   200071 036100                    ADLQ    @TEMP$+2,,AUTO
        39 000766   000000 620006                    EAX0    0,QL
        39 000767   300002 740100                    STX0    2,,PR3

      230    12434    3              ((LENGTH_OF_TEMP_IN_BITS + 35) / 36);
      231    12435    3          END /* Case */;

      232    12436
      233    12437    2        END /* WHENALTRETURN */;

      234    12438
      235    12439    1        NUMBER_OF_TEMPS = NUMBER_OF_TEMPS + 1;

  12439 39 000770   000000 054000 16                 AOS     NUMBER_OF_TEMPS

      236    12440
      237    12441
      238    12442    1        TEMP$ -> TEMP.DESCL = TYPE_DESC.DESC.DESCL;

  12442 39 000771   200005 470500                    LDP0    @TYPE_DESC,,AUTO
        39 000772   000001 720100                    LXL0    1,,PR0
        39 000773   200031 471500                    LDP1    TEMP$,,AUTO
        39 000774   100001 440100                    SXL0    1,,PR1

      239    12443    1        IF TYPE_DESC.SIZ$ ~= ADDR(NIL) AND

  12443 39 000775   000002 236100                    LDQ     2,,PR0
        39 000776   000000 116000 40                 CMPQ    0
        39 000777   001007 600000 39                 TZE     s:12446
        39 001000   200033 471500                    LDP1    LENGTH$,,AUTO
        39 001001   100000 220100                    LDX0    0,,PR1
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:43   
        39 001002   000767 100003                    CMPX0   503,DU
        39 001003   001007 601000 39                 TNZ     s:12446

      240    12444    1            LENGTH$ -> ST.ID = %CONST THEN
      241    12445    1          TEMP$ -> TEMP.ADSC.N = LENGTH$ -> CONST.CONSTI.WORD1;

  12445 39 001004   200031 473500                    LDP3    TEMP$,,AUTO
        39 001005   100010 236100                    LDQ     8,,PR1
        39 001006   300001 752103                    STCQ    1,'03'O,PR3

      242    12446    1        TEMP$ -> TEMP.TYPE = TYPE_DESC.TYPE;

  12446 39 001007   000000 720100                    LXL0    0,,PR0
        39 001010   200031 471500                    LDP1    TEMP$,,AUTO
        39 001011   100002 740100                    STX0    2,,PR1

      243    12447    1        TEMP$ -> TEMP.DEFINED_LOOP_LEVEL = CUR_LOOP_LEVEL;

  12447 39 001012   000000 720000 25                 LXL0    CUR_LOOP_LEVEL
        39 001013   200031 471500                    LDP1    TEMP$,,AUTO
        39 001014   100002 440100                    SXL0    2,,PR1

      244    12448    1        TEMP$ -> TEMP.REFERENCES = 0;

  12448 39 001015   000000 221003                    LDX1    0,DU
        39 001016   200031 471500                    LDP1    TEMP$,,AUTO
        39 001017   100004 741100                    STX1    4,,PR1

      245    12449
      246    12450             %NEW_ETT( @ID     = %BASE, @POINTER = ETT$ ,
      247    12451                       @LOP    = TEMP$ ,
      248    12452                       @ROP    = COMCOM.ESC ,
      249    12453                       @COUNT  = 2 ,
      250    12454                       @STATE  = 0 ,
      251    12455                       @POOLABLE = YES );

  12459 39 001020   000000 236000 4                  LDQ     HEAD_ETT$
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:44   
        39 001021   000000 116000 40                 CMPQ    0
        39 001022   001046 601000 39                 TNZ     s:12471

  12461 39 001023   000002 236000 6                  LDQ     ETT_+2
        39 001024   000005 036007                    ADLQ    5,DL
        39 001025   000003 116000 6                  CMPQ    ETT_+3
        39 001026   001037 604000 39                 TMI     s:12463

  12462 39 001027   000015 236000 40                 LDQ     13
        39 001030   200070 756100                    STQ     @TEMP$+1,,AUTO
        39 001031   200070 631500                    EPPR1   @TEMP$+1,,AUTO
        39 001032   200071 451500                    STP1    @TEMP$+2,,AUTO
        39 001033   200071 630500                    EPPR0   @TEMP$+2,,AUTO
        39 001034   000005 631400 40                 EPPR1   5
        39 001035   000000 701000 xent               TSX1    Z8AR$RESERVER
        39 001036   000000 011000                    NOP     0

  12463 39 001037   000002 236000 6                  LDQ     ETT_+2
        39 001040   000022 736000                    QLS     18
        39 001041   000001 036000 6                  ADLQ    ETT_+1
        39 001042   000000 756000 3                  STQ     ETT$

  12464 39 001043   000005 236007                    LDQ     5,DL
        39 001044   000002 056000 6                  ASQ     ETT_+2

  12465 39 001045   001052 710000 39                 TRA     s:12481

  12471 39 001046   000000 756000 3                  STQ     ETT$

  12472 39 001047   000000 471400 4                  LDP1    HEAD_ETT$
        39 001050   100003 236100                    LDQ     3,,PR1
        39 001051   000000 756000 4                  STQ     HEAD_ETT$

  12481 39 001052   000001 220003                    LDX0    1,DU
        39 001053   000000 470400 3                  LDP0    ETT$
        39 001054   000000 740100                    STX0    0,,PR0

PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:45   
  12486 39 001055   200031 236100                    LDQ     TEMP$,,AUTO
        39 001056   000000 470400 3                  LDP0    ETT$
        39 001057   000001 756100                    STQ     1,,PR0

  12492 39 001060   000007 236000 xsym               LDQ     COMCOM+7
        39 001061   000002 756100                    STQ     2,,PR0

  12497 39 001062   000000 221003                    LDX1    0,DU
        39 001063   000004 441100                    SXL1    4,,PR0

  12498 39 001064   000001 236007                    LDQ     1,DL
        39 001065   000004 256100                    ORSQ    4,,PR0

  12499 39 001066   000002 222003                    LDX2    2,DU
        39 001067   000000 442100                    SXL2    0,,PR0

  12500 39 001070   000000 223003                    LDX3    0,DU
        39 001071   000000 470400 3                  LDP0    ETT$
        39 001072   000004 743100                    STX3    4,,PR0

  12501 39 001073   000000 236000 40                 LDQ     0
        39 001074   000003 756100                    STQ     3,,PR0

      252    12525
      253    12526    1        IF LENGTH_OF_TEMP_IN_BITS >= 4096 * 9

  12526 39 001075   200017 235100                    LDA     LENGTH_OF_TEMP_IN_BITS,,AUTO
        39 001076   110000 115007                    CMPA    36864,DL
        39 001077   001107 605000 39                 TPL     s:12609
        39 001100   200005 471500                    LDP1    @TYPE_DESC,,AUTO
        39 001101   100000 235100                    LDA     0,,PR1
        39 001102   000014 115007                    CMPA    12,DL
        39 001103   001301 601000 39                 TNZ     s:12771
        39 001104   200017 235100                    LDA     LENGTH_OF_TEMP_IN_BITS,,AUTO
        39 001105   060000 115007                    CMPA    24576,DL
        39 001106   001301 604000 39                 TMI     s:12771

PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:46   
      254    12527    1            OR TYPE_DESC.TYPE = %TYB
      255    12528    2               AND LENGTH_OF_TEMP_IN_BITS >= 4096 * 6 THEN DO;

      256    12529               %NEW_LONG (@POINTER = TEMP$ -> TEMP.LTS$,
      257    12530                          @LENGTH = LENGTH$ -> CONST.CONSTI.WORD1);

  12609 39 001107   000002 236000 14                 LDQ     LTS_+2
        39 001110   000002 036007                    ADLQ    2,DL
        39 001111   000003 116000 14                 CMPQ    LTS_+3
        39 001112   001123 604000 39                 TMI     s:12611

  12610 39 001113   000016 236000 40                 LDQ     14
        39 001114   200070 756100                    STQ     @TEMP$+1,,AUTO
        39 001115   200070 631500                    EPPR1   @TEMP$+1,,AUTO
        39 001116   200071 451500                    STP1    @TEMP$+2,,AUTO
        39 001117   200071 630500                    EPPR0   @TEMP$+2,,AUTO
        39 001120   000005 631400 40                 EPPR1   5
        39 001121   000000 701000 xent               TSX1    Z8AR$RESERVER
        39 001122   000000 011000                    NOP     0

  12611 39 001123   000002 236000 14                 LDQ     LTS_+2
        39 001124   000022 736000                    QLS     18
        39 001125   000001 036000 14                 ADLQ    LTS_+1
        39 001126   200031 470500                    LDP0    TEMP$,,AUTO
        39 001127   000005 756100                    STQ     5,,PR0

  12612 39 001130   000002 236007                    LDQ     2,DL
        39 001131   000002 056000 14                 ASQ     LTS_+2

  12613 39 001132   200031 470500                    LDP0    TEMP$,,AUTO
        39 001133   000005 471500                    LDP1    5,,PR0
        39 001134   001110 220003                    LDX0    584,DU
        39 001135   100000 740100                    STX0    0,,PR1

  12619 39 001136   200031 470500                    LDP0    TEMP$,,AUTO
        39 001137   000005 471500                    LDP1    5,,PR0
        39 001140   200033 473500                    LDP3    LENGTH$,,AUTO
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:47   
        39 001141   300010 235100                    LDA     8,,PR3
        39 001142   100001 755100                    STA     1,,PR1

      258    12622               %NEW_ETT (@ID = %TRIAD, @POINTER = TEMP$,
      259    12623                         @LOP = LENGTH$);

  12627 39 001143   000000 236000 4                  LDQ     HEAD_ETT$
        39 001144   000000 116000 40                 CMPQ    0
        39 001145   001171 601000 39                 TNZ     s:12639

  12629 39 001146   000002 236000 6                  LDQ     ETT_+2
        39 001147   000005 036007                    ADLQ    5,DL
        39 001150   000003 116000 6                  CMPQ    ETT_+3
        39 001151   001162 604000 39                 TMI     s:12631

  12630 39 001152   000015 236000 40                 LDQ     13
        39 001153   200070 756100                    STQ     @TEMP$+1,,AUTO
        39 001154   200070 630500                    EPPR0   @TEMP$+1,,AUTO
        39 001155   200071 450500                    STP0    @TEMP$+2,,AUTO
        39 001156   200071 630500                    EPPR0   @TEMP$+2,,AUTO
        39 001157   000005 631400 40                 EPPR1   5
        39 001160   000000 701000 xent               TSX1    Z8AR$RESERVER
        39 001161   000000 011000                    NOP     0

  12631 39 001162   000002 236000 6                  LDQ     ETT_+2
        39 001163   000022 736000                    QLS     18
        39 001164   000001 036000 6                  ADLQ    ETT_+1
        39 001165   200031 756100                    STQ     TEMP$,,AUTO

  12632 39 001166   000005 236007                    LDQ     5,DL
        39 001167   000002 056000 6                  ASQ     ETT_+2

  12633 39 001170   001175 710000 39                 TRA     s:12649

  12639 39 001171   200031 756100                    STQ     TEMP$,,AUTO

  12640 39 001172   000000 470400 4                  LDP0    HEAD_ETT$
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:48   
        39 001173   000003 236100                    LDQ     3,,PR0
        39 001174   000000 756000 4                  STQ     HEAD_ETT$

  12649 39 001175   000015 220003                    LDX0    13,DU
        39 001176   200031 470500                    LDP0    TEMP$,,AUTO
        39 001177   000000 740100                    STX0    0,,PR0

  12654 39 001200   200033 236100                    LDQ     LENGTH$,,AUTO
        39 001201   200031 470500                    LDP0    TEMP$,,AUTO
        39 001202   000001 756100                    STQ     1,,PR0

  12657 39 001203   000000 236000 40                 LDQ     0
        39 001204   200031 470500                    LDP0    TEMP$,,AUTO
        39 001205   000002 756100                    STQ     2,,PR0

  12665 39 001206   000000 221003                    LDX1    0,DU
        39 001207   200031 470500                    LDP0    TEMP$,,AUTO
        39 001210   000004 441100                    SXL1    4,,PR0

  12666 39 001211   200031 470500                    LDP0    TEMP$,,AUTO
        39 001212   000017 236000 40                 LDQ     15
        39 001213   000004 356100                    ANSQ    4,,PR0

  12667 39 001214   000000 222003                    LDX2    0,DU
        39 001215   200031 470500                    LDP0    TEMP$,,AUTO
        39 001216   000000 442100                    SXL2    0,,PR0

  12668 39 001217   200031 470500                    LDP0    TEMP$,,AUTO
        39 001220   000004 742100                    STX2    4,,PR0

  12669 39 001221   000000 236000 40                 LDQ     0
        39 001222   200031 470500                    LDP0    TEMP$,,AUTO
        39 001223   000003 756100                    STQ     3,,PR0

      260    12693               %NEW_ETT (@ID = %SIZ, @POINTER = ETT$$,
      261    12694                         @LOP = ETT$,
      262    12695                         @ROP = TEMP$,
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:49   
      263    12696                         @COUNT = 2,
      264    12697                         @STATE = 0,
      265    12698                         @POOLABLE = YES);

  12702 39 001224   000000 236000 4                  LDQ     HEAD_ETT$
        39 001225   000000 116000 40                 CMPQ    0
        39 001226   001252 601000 39                 TNZ     s:12714

  12704 39 001227   000002 236000 6                  LDQ     ETT_+2
        39 001230   000005 036007                    ADLQ    5,DL
        39 001231   000003 116000 6                  CMPQ    ETT_+3
        39 001232   001243 604000 39                 TMI     s:12706

  12705 39 001233   000015 236000 40                 LDQ     13
        39 001234   200070 756100                    STQ     @TEMP$+1,,AUTO
        39 001235   200070 630500                    EPPR0   @TEMP$+1,,AUTO
        39 001236   200071 450500                    STP0    @TEMP$+2,,AUTO
        39 001237   200071 630500                    EPPR0   @TEMP$+2,,AUTO
        39 001240   000005 631400 40                 EPPR1   5
        39 001241   000000 701000 xent               TSX1    Z8AR$RESERVER
        39 001242   000000 011000                    NOP     0

  12706 39 001243   000002 236000 6                  LDQ     ETT_+2
        39 001244   000022 736000                    QLS     18
        39 001245   000001 036000 6                  ADLQ    ETT_+1
        39 001246   200032 756100                    STQ     ETT$$,,AUTO

  12707 39 001247   000005 236007                    LDQ     5,DL
        39 001250   000002 056000 6                  ASQ     ETT_+2

  12708 39 001251   001256 710000 39                 TRA     s:12724

  12714 39 001252   200032 756100                    STQ     ETT$$,,AUTO

  12715 39 001253   000000 470400 4                  LDP0    HEAD_ETT$
        39 001254   000003 236100                    LDQ     3,,PR0
        39 001255   000000 756000 4                  STQ     HEAD_ETT$
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:50   

  12724 39 001256   000004 220003                    LDX0    4,DU
        39 001257   200032 470500                    LDP0    ETT$$,,AUTO
        39 001260   000000 740100                    STX0    0,,PR0

  12729 39 001261   000000 236000 3                  LDQ     ETT$
        39 001262   000001 756100                    STQ     1,,PR0

  12735 39 001263   200031 236100                    LDQ     TEMP$,,AUTO
        39 001264   000002 756100                    STQ     2,,PR0

  12740 39 001265   000000 221003                    LDX1    0,DU
        39 001266   000004 441100                    SXL1    4,,PR0

  12741 39 001267   000001 236007                    LDQ     1,DL
        39 001270   000004 256100                    ORSQ    4,,PR0

  12742 39 001271   000002 222003                    LDX2    2,DU
        39 001272   000000 442100                    SXL2    0,,PR0

  12743 39 001273   000000 223003                    LDX3    0,DU
        39 001274   000004 743100                    STX3    4,,PR0

  12744 39 001275   000000 236000 40                 LDQ     0
        39 001276   000003 756100                    STQ     3,,PR0

      266    12768    2          ETT$ = ETT$$;

  12768 39 001277   200032 236100                    LDQ     ETT$$,,AUTO
        39 001300   000000 756000 3                  STQ     ETT$

      267    12769    2        END;

      268    12770
      269    12771    1        CALL Z8HU$INCCNT(COMCOM.ESC, 2);

  12771 39 001301   000021 630400 40                 EPPR0   17
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:51   
        39 001302   000002 631400 40                 EPPR1   2
        39 001303   000000 701000 xent               TSX1    Z8HU$INCCNT
        39 001304   000000 011000                    NOP     0

      270    12772
      271    12773    1        CALL Z8HU$WALK(ETT$);

  12773 39 001305   000023 630400 40                 EPPR0   19
        39 001306   000005 631400 40                 EPPR1   5
        39 001307   000000 701000 xent               TSX1    Z8HU$WALK
        39 001310   000000 011000                    NOP     0

      272    12774    1        RETURN;

  12774 39 001311   000000 702200 xent               TSX2  ! X66_ARET

      273    12775
      274    12776        %EJECT;
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:52   
      275    12777    1   REUSE_TEMP:PROC(TEMP$) ALTRET;

  12777 39 001312   200066 741300       REUSE_TEMP   STX1  ! SEG_NO#+2,,AUTO

      276    12778        /*I*
      277    12779             NAME: REUSE_TEMP
      278    12780             PURPOSE:
      279    12781                   Return pointer to a temp from temp pool, if ones available.
      280    12782             CALL:
      281    12783                  CALL REUSE_TEMP(TEMP$)
      282    12784             PARAMETERS:
      283    12785                  TEMP$ - Pointer to available temp, if we don't altret.
      284    12786             DATA:
      285    12787                  Pool of returned temps.
      286    12788             DESCRIPTION:
      287    12789                  Search TEMP pool.  If a temp of correct length and
      288    12790                  alignment is available then normal return, otherwise
      289    12791                  altreturn. TEMP$ will contain pointer to temp if ones
      290    12792                  available.
      291    12793        */
      292    12794
      293    12795    2        DCL TEMP$ PTR;
      294    12796
      295    12797    2        IF FRESHNESS = %STALE THEN

  12797 39 001313   200006 470500                    LDP0    @FRESHNESS,,AUTO
        39 001314   000000 235100                    LDA     0,,PR0
        39 001315   001403 601000 39                 TNZ     s:12826

      296    12798    3          DO;

      297    12799    3            TEMP$ = HEAD_TEMP$;

  12799 39 001316   000000 236000 22                 LDQ     HEAD_TEMP$
        39 001317   200067 471500                    LDP1    @TEMP$,,AUTO
        39 001320   100000 756100                    STQ     0,,PR1

PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:53   
      298    12800
      299    12801    4            DO WHILE(TEMP$ ~= ADDR(NIL));

  12801 39 001321   001377 710000 39                 TRA     s:12823

      300    12802    4              IF      TEMP$ -> TEMP.LENGTH >= LENGTH_OF_TEMP_IN_BITS

  12802 39 001322   200067 470500                    LDP0    @TEMP$,,AUTO
        39 001323   000000 471500                    LDP1    0,,PR0
        39 001324   100004 236100                    LDQ     4,,PR1
        39 001325   000022 736000                    QLS     18
        39 001326   000022 732000                    QRS     18
        39 001327   200017 116100                    CMPQ    LENGTH_OF_TEMP_IN_BITS,,AUTO
        39 001330   001375 604000 39                 TMI     s:12822
        39 001331   100003 234100                    SZN     3,,PR1
        39 001332   001375 604000 39                 TMI     s:12822
        39 001333   100002 236100                    LDQ     2,,PR1
        39 001334   000022 736000                    QLS     18
        39 001335   000022 732000                    QRS     18
        39 001336   000000 116000 25                 CMPQ    CUR_LOOP_LEVEL
        39 001337   001375 604000 39                 TMI     s:12822

      301    12803    4              AND NOT TEMP$ -> TEMP.B.NOT_REUSABLE
      302    12804    4              AND     CUR_LOOP_LEVEL <= TEMP$ -> TEMP.DEFINED_LOOP_LEVEL THEN
      303    12805    5                DO CASE(BOUNDARY);

  12805 39 001340   200004 473500                    LDP3    @BOUNDARY,,AUTO
        39 001341   300000 235100                    LDA     0,,PR3
        39 001342   000003 115007                    CMPA    3,DL
        39 001343   001345 602005 39                 TNC     s:12805+5,AL
        39 001344   001367 710000 39                 TRA     s:12818
        39 001345   001365 710000 39                 TRA     s:12815
        39 001346   001356 710000 39                 TRA     s:12811
        39 001347   001350 710000 39                 TRA     s:12807

      304    12806    5                  CASE(%EVEN);

PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:54   
      305    12807    5                    IF MOD(TEMP$ -> TEMP.SA,2) = 0 THEN

  12807 39 001350   100001 236100                    LDQ     1,,PR1
        39 001351   000022 772000                    QRL     18
        39 001352   000001 376007                    ANQ     1,DL
        39 001353   001375 601000 39                 TNZ     s:12822

      306    12808    5                      RETURN;

  12808 39 001354   200066 221300                    LDX1  ! SEG_NO#+2,,AUTO
        39 001355   000001 702211                    TSX2  ! 1,X1

      307    12809
      308    12810    5                  CASE(%ODD);

      309    12811    5                    IF MOD(TEMP$ -> TEMP.SA,2) = 1 THEN

  12811 39 001356   100001 236100                    LDQ     1,,PR1
        39 001357   000022 772000                    QRL     18
        39 001360   000001 376007                    ANQ     1,DL
        39 001361   000001 116007                    CMPQ    1,DL
        39 001362   001375 601000 39                 TNZ     s:12822

      310    12812    5                      RETURN;

  12812 39 001363   200066 221300                    LDX1  ! SEG_NO#+2,,AUTO
        39 001364   000001 702211                    TSX2  ! 1,X1

      311    12813
      312    12814    5                  CASE(%NEXT);

      313    12815    5                      RETURN;

  12815 39 001365   200066 221300                    LDX1  ! SEG_NO#+2,,AUTO
        39 001366   000001 702211                    TSX2  ! 1,X1

      314    12816
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:55   
      315    12817    5                  CASE(ELSE);

      316    12818    5                    CALL Z8AE$ERROR(%E$UNEXPECTED_CASE);

  12818 39 001367   000025 630400 40                 EPPR0   21
        39 001370   000005 631400 40                 EPPR1   5
        39 001371   000000 701000 xent               TSX1    Z8AE$ERROR
        39 001372   000000 011000                    NOP     0

      317    12819    5                    RETURN;

  12819 39 001373   200066 221300                    LDX1  ! SEG_NO#+2,,AUTO
        39 001374   000001 702211                    TSX2  ! 1,X1

      318    12820    5                END;

      319    12821
      320    12822    4              TEMP$ = TEMP$ -> TEMP.NEXT;

  12822 39 001375   100010 236100                    LDQ     8,,PR1
        39 001376   000000 756100                    STQ     0,,PR0

      321    12823    4            END;

  12823 39 001377   200067 470500                    LDP0    @TEMP$,,AUTO
        39 001400   000000 236100                    LDQ     0,,PR0
        39 001401   000000 116000 40                 CMPQ    0
        39 001402   001322 601000 39                 TNZ     s:12802

      322    12824    3          END;

      323    12825
      324    12826    2        ALTRETURN;

  12826 39 001403   200066 221300                    LDX1  ! SEG_NO#+2,,AUTO
        39 001404   000000 702211                    TSX2  ! 0,X1

PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:56   
      325    12827
      326    12828    2   END REUSE_TEMP;
      327    12829        %EJECT;
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:57   
      328    12830    1   CHECK_ESCAPE:PROC;

  12830 39 001405   200066 741300       CHECK_ESCAPE STX1  ! SEG_NO#+2,,AUTO

      329    12831        /*I*
      330    12832             NAME: CHECK_ESCAPE
      331    12833             PURPOSE:
      332    12834                  Check to see if we need to create a new escape triad to reference
      333    12835                  the new temp.  If the current data block has exceeded 16K in
      334    12836                  size, then we need a new escape.
      335    12837             CALL:
      336    12838                  CALL CHECK_ESCAPE
      337    12839             DATA:
      338    12840                  COMCOM.LAST_BLOCK$ -> BLOCK.SIZE
      339    12841             DESCRIPTION:
      340    12842                  There needs to be an escape triad for every 16K increment
      341    12843                  of storage in the data block (in order to use pointer register
      342    12844                  relative addressing).  The creation of a new temp may be
      343    12845                  at the start of a new 16K increment, so we would then need
      344    12846                  a new esc triad to reference that new block.
      345    12847        */
      346    12848
      347    12849    2        IF COMCOM.LAST_BLOCK$ -> BLOCK.SIZE / %#16K > COMCOM.ESC -> ETT.ROPCON OR

  12849 39 001406   000375 470400 xsym               LDP0    COMCOM+253
        39 001407   000002 236100                    LDQ     2,,PR0
        39 001410   000022 772000                    QRL     18
        39 001411   000016 772000                    QRL     14
        39 001412   000007 471400 xsym               LDP1    COMCOM+7
        39 001413   001421 604000 39                 TMI     s:12853
        39 001414   100002 116100                    CMPQ    2,,PR1
        39 001415   001421 605400 39                 TPNZ    s:12853
        39 001416   000375 236000 xsym               LDQ     COMCOM+253
        39 001417   100001 116100                    CMPQ    1,,PR1
        39 001420   001527 600000 39                 TZE     s:12939

      348    12850    2            COMCOM.LAST_BLOCK$ ~= COMCOM.ESC -> ETT.LOP THEN
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:58   
      349    12851    3          DO;

      350    12852                                                        /*#26726*/
      351    12853    3            IF COMCOM.LAST_BLOCK$ = COMCOM.ESC -> ETT.LOP

  12853 39 001421   000375 236000 xsym               LDQ     COMCOM+253
        39 001422   100001 116100                    CMPQ    1,,PR1
        39 001423   001430 601000 39                 TNZ     s:12855

      352    12854    3              THEN TEMP_UBIN = COMCOM.ESC -> ETT.ROPCON + 1;

  12854 39 001424   100002 235100                    LDA     2,,PR1
        39 001425   000001 035007                    ADLA    1,DL
        39 001426   200027 755100                    STA     TEMP_UBIN,,AUTO
        39 001427   001431 710000 39                 TRA     s:12865

      353    12855    3              ELSE TEMP_UBIN = 0;

  12855 39 001430   200027 450100                    STZ     TEMP_UBIN,,AUTO

      354    12856
      355    12857                 %NEW_ETT( @ID     = %ESC, @POINTER = ETT$ ,
      356    12858                           @LOP    = COMCOM.LAST_BLOCK$,
      357    12859                           @ROPCON = TEMP_UBIN,
      358    12860                           @STATE  = 0 ,
      359    12861                           @COUNT  = %DONT_MESS );            /*#30618*/

  12865 39 001431   000000 236000 4                  LDQ     HEAD_ETT$
        39 001432   000000 116000 40                 CMPQ    0
        39 001433   001457 601000 39                 TNZ     s:12877

  12867 39 001434   000002 236000 6                  LDQ     ETT_+2
        39 001435   000005 036007                    ADLQ    5,DL
        39 001436   000003 116000 6                  CMPQ    ETT_+3
        39 001437   001450 604000 39                 TMI     s:12869

  12868 39 001440   000015 236000 40                 LDQ     13
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:59   
        39 001441   200070 756100                    STQ     @TEMP$+1,,AUTO
        39 001442   200070 633500                    EPPR3   @TEMP$+1,,AUTO
        39 001443   200071 453500                    STP3    @TEMP$+2,,AUTO
        39 001444   200071 630500                    EPPR0   @TEMP$+2,,AUTO
        39 001445   000005 631400 40                 EPPR1   5
        39 001446   000000 701000 xent               TSX1    Z8AR$RESERVER
        39 001447   000000 011000                    NOP     0

  12869 39 001450   000002 236000 6                  LDQ     ETT_+2
        39 001451   000022 736000                    QLS     18
        39 001452   000001 036000 6                  ADLQ    ETT_+1
        39 001453   000000 756000 3                  STQ     ETT$

  12870 39 001454   000005 236007                    LDQ     5,DL
        39 001455   000002 056000 6                  ASQ     ETT_+2

  12871 39 001456   001463 710000 39                 TRA     s:12887

  12877 39 001457   000000 756000 3                  STQ     ETT$

  12878 39 001460   000000 473400 4                  LDP3    HEAD_ETT$
        39 001461   300003 236100                    LDQ     3,,PR3
        39 001462   000000 756000 4                  STQ     HEAD_ETT$

  12887 39 001463   000017 220003                    LDX0    15,DU
        39 001464   000000 470400 3                  LDP0    ETT$
        39 001465   000000 740100                    STX0    0,,PR0

  12892 39 001466   000375 236000 xsym               LDQ     COMCOM+253
        39 001467   000000 470400 3                  LDP0    ETT$
        39 001470   000001 756100                    STQ     1,,PR0

  12901 39 001471   200027 235100                    LDA     TEMP_UBIN,,AUTO
        39 001472   000002 755100                    STA     2,,PR0

  12903 39 001473   000000 221003                    LDX1    0,DU
        39 001474   000004 441100                    SXL1    4,,PR0
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:60   

  12904 39 001475   000017 236000 40                 LDQ     15
        39 001476   000004 356100                    ANSQ    4,,PR0

  12905 39 001477   777777 222003                    LDX2    -1,DU
        39 001500   000000 442100                    SXL2    0,,PR0

  12906 39 001501   000000 223003                    LDX3    0,DU
        39 001502   000000 470400 3                  LDP0    ETT$
        39 001503   000004 743100                    STX3    4,,PR0

  12907 39 001504   000000 236000 40                 LDQ     0
        39 001505   000003 756100                    STQ     3,,PR0

      360    12931                                                              /*#30618*/
      361    12932    3            CALL Z8HU$POOL_PRIME( COMCOM.ESC );          /*#30618*/

  12932 39 001506   000021 630400 40                 EPPR0   17
        39 001507   000005 631400 40                 EPPR1   5
        39 001510   000000 701000 xent               TSX1    Z8HU$POOL_PRIME
        39 001511   000000 011000                    NOP     0

      362    12933    3            CALL Z8HU$POOL( COMCOM.ESC );                /*#30618*/

  12933 39 001512   000021 630400 40                 EPPR0   17
        39 001513   000005 631400 40                 EPPR1   5
        39 001514   000000 701000 xent               TSX1    Z8HU$POOL
        39 001515   000000 011000                    NOP     0

      363    12934    3            COMCOM.ESC -> ETT.COUNT = 0;                 /*#30618*/

  12934 39 001516   000000 220003                    LDX0    0,DU
        39 001517   000007 470400 xsym               LDP0    COMCOM+7
        39 001520   000000 440100                    SXL0    0,,PR0

      364    12935    3            COMCOM.ESC = ETT$;

PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:61   
  12935 39 001521   000000 236000 3                  LDQ     ETT$
        39 001522   000007 756000 xsym               STQ     COMCOM+7

      365    12936    3            CALL Z8HU$WALK(ETT$);

  12936 39 001523   000023 630400 40                 EPPR0   19
        39 001524   000005 631400 40                 EPPR1   5
        39 001525   000000 701000 xent               TSX1    Z8HU$WALK
        39 001526   000000 011000                    NOP     0

      366    12937    3          END;

      367    12938
      368    12939    2   END CHECK_ESCAPE;

  12939 39 001527   200066 221300                    LDX1  ! SEG_NO#+2,,AUTO
        39 001530   000001 702211                    TSX2  ! 1,X1
      369    12940    1   END Z8HU$ALLOT_TEMP;
      370    12941        %EOD;

PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:62   
--  Include file information  --

   Z8H_CODE.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_DEP.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_OBJ.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_EXT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_TEMP.:Z8A6TOU  is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ERR_NUMS.:Z8A6TOU  is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_DNT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ILL.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_TYPES.:Z8A6TOU  is referenced.
   Z8A_DESC.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
      No diagnostics issued in procedure Z8HU$ALLOT_TEMP.
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:63   

 **** Variables and constants ****

  ****  Section 000 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 ITERATION

  ****  Section 001 LblCom ILL$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ILL$

  ****  Section 002 LblCom ILL_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ILL_

  ****  Section 003 LblCom ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ETT$

  ****  Section 004 LblCom HEAD_ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 HEAD_ETT$

PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:64   
  ****  Section 005 LblCom ETT_BUCKETS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 ETT_BUCKETS(0:511)

  ****  Section 006 LblCom ETT_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 ETT_

  ****  Section 007 LblCom ST$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ST$

  ****  Section 008 LblCom ST_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 ST_

  ****  Section 009 LblCom DNT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 DNT$

  ****  Section 010 LblCom DNT_

PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:65   
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 DNT_

  ****  Section 011 LblCom DNT_BUCKET_NUMBER

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN              1 DNT_BUCKET_NUMBER

  ****  Section 012 LblCom DNT_OF_1$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 DNT_OF_1$

  ****  Section 013 LblCom LTS$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 LONG_ITEM$                 0-0-0/w PTR         r     1 LTS$

  ****  Section 014 LblCom LTS_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 LTS_

  ****  Section 015 LblCom NUMBER_OF_PRIMES

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:66   

     0-0-0/w SBIN              1 NUMBER_OF_PRIMES

  ****  Section 016 LblCom NUMBER_OF_TEMPS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 NUMBER_OF_TEMPS

  ****  Section 017 LblCom NUMBER_OF_REFS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 NUMBER_OF_REFS

  ****  Section 018 LblCom GENERATING_PTRS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT               1 GENERATING_PTRS

  ****  Section 019 LblCom USE_PROC_RETURN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 USE_PROC_RETURN

  ****  Section 020 LblCom CURRENT_SCOPE$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 CURRENT_SCOPE$
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:67   

  ****  Section 021 LblCom HEAD_REF$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_REF$

  ****  Section 022 LblCom HEAD_TEMP$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 HEAD_TEMP$

  ****  Section 023 LblCom CONST$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 CONST$

  ****  Section 024 LblCom HEAD_PRIMES$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_PRIMES$

  ****  Section 025 LblCom CUR_LOOP_LEVEL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 CUR_LOOP_LEVEL

  ****  Section 026 LblCom PEPD
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:68   

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC              1 PEPD(0:1)

  ****  Section 027 LblCom OBJ$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 OBJ$

  ****  Section 028 LblCom PAGING_OBJ

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w BIT         r     1 PAGING_OBJ

  ****  Section 029 LblCom OBJ_PAGE_COUNT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 OBJ_PAGE_COUNT

  ****  Section 030 LblCom OBJ_FINISHED

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w BIT               1 OBJ_FINISHED

  ****  Section 031 LblCom OBJ_SEG_SIZE

  ****  Scalars and arrays  ****
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:69   
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 OBJ_SEG_SIZE

  ****  Section 032 LblCom OBJ_TOP_NEW_SEG

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 OBJ_TOP_NEW_SEG

  ****  Section 033 LblCom OBJ_LAST_REGULAR_PAGE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 OBJ_LAST_REGULAR_PAGE

  ****  Section 034 LblCom OBJ_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 OBJ_

  ****  Section 035 LblCom DEP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b STRC(1728)  r     1 DEP

  ****  Section 036  Data  Z8HU$ALLOT_TEMP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:70   
     0-0-0/b STRC              1 MOD_KEY

  ****  Section 037 LblCom CURRENT_BLOCK$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 CURRENT_BLOCK$

  ****  Section 038 LblCom ROOT_PROC_BLOCK$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 ROOT_PROC_BLOCK$

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @BOUNDARY                  3-0-0/w PTR         r     1 @FORMAT
     6-0-0/w PTR         r     1 @FRESHNESS                67-0-0/w PTR         r     1 @TEMP$
     5-0-0/w PTR         r     1 @TYPE_DESC                20-0-0/c CHAR(28)    r     1 BLKNAME
    *0-0-0/w SBIN        r     1 BOUNDARY                  15-0-0/w UBIN              1 CN
    62-0-0/b BIT               1 DEFER
    35-0-0/w STRC(180)         1 DEFER_BUFFER(0:3)
    61-0-0/w SBIN              1 DEFER_BUFFER_IDX           7-0-0/w STRC              1 DESC
    32-0-0/w PTR         r     1 ETT$$                     *0-0-0/w SBIN        r     1 FORMAT
    *0-0-0/w SBIN        r     1 FRESHNESS                 34-0-0/b STRC              1 INST_WORD
    14-0-0/w SBIN              1 LENGTH                    33-0-0/w PTR         r     1 LENGTH$
    17-0-0/w SBIN        r     1 LENGTH_OF_TEMP_IN_BITS
    63-0-0/w PTR               1 OLD_CURRENT_BLOCK$        16-0-0/w UBIN              1 SA
    13-0-0/w SBIN              1 SCALE                     64-0-0/w SBIN              1 SEG_NO#
    10-0-0/w BIT (2)           1 SIGN                      12-0-0/w BIT (2)           1 TA
    31-0-0/w PTR         r     1 TEMP$                     *0-0-0/w PTR         r     1 TEMP$
    30-0-0/c CHAR(4)     r     1 TEMP_CHAR                 27-0-0/w UBIN        r     1 TEMP_UBIN
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:71   
    11-0-0/w BIT               1 TN                        *0-0-0/w STRC(144)   r     1 TYPE_DESC

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(13248) r     1 COMCOM                     0-0-0/w UBIN              1 ILL_STEP(0:144)
     0-0-0/w UBIN              1 LTS_STEP(0:37)
     0-0-0/w UBIN              1 OBJ_STEP(0:4)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(108)         1 ACCEPT_DISPLAY             0-0-0/w STRC(396)         1 ALPHABET
     0-0-0/w STRC(144)         1 ALTER_LTS                  0-0-0/w STRC(3672)        1 ALT_KEY
     0-0-0/w STRC(36864)       1 ARGLIST                    0-0-0/w STRC(396)         1 ARRAY
     0-0-0/w STRC(180)         1 ARRAY_PRESET_LTS           0-0-0/w STRC(288)         1 BASE_LTS
     0-0-0/w STRC(108)         1 BINARY_ILL                 0-0-0/w STRC(396)   r     1 BLOCK
     0-0-0/w STRC(144)         1 BRANCH_ILL                 0-0-0/w STRC(144)         1 BT
     0-0-0/w STRC(216)         1 CCOSU                      0-0-0/w STRC(396)         1 CD
     0-0-0/w STRC(288)         1 CD_LTS                     0-0-0/w CHAR(4096)        1 CHARS
     0-0-0/w STRC(396)         1 CLASS                      0-0-0/w STRC(108)         1 CODED_MOVE
     0-0-0/w STRC(396)         1 CONDITION                  0-0-0/w STRC(396)   r     1 CONST
     0-0-0/w STRC(72)          1 CONT                       0-0-0/w STRC(540)         1 CONTROL_NAME_LTS
     0-0-0/w STRC(1872)        1 COPY_FILE                  0-0-0/w STRC(396)         1 DB
     0-0-0/w STRC(396)         1 DCB_                       0-0-0/w STRC(144)         1 DEFLB
     0-0-0/w STRC(108)         1 DEPENDING_SIZE             0-0-0/w STRC(5472)        1 DIMS
     0-0-0/w STRC(396)         1 DML_ITEM                   0-0-0/w STRC(216)         1 DML_REC
     0-0-0/w ASTR(180)   r     1 DNT                        0-0-0/w STRC(144)         1 DOEND
     0-0-0/w STRC(396)         1 DO_N                       0-0-0/w STRC(180)         1 DV4I
     0-0-0/w STRC(180)         1 ENTRY_ILL                  0-0-0/w STRC(180)   r     1 ETT
     0-0-0/w STRC(108)         1 EVALU                      0-0-0/w STRC(73836)       1 EVALUATE
     0-0-0/w STRC(396)         1 FD                         0-0-0/w STRC(1692)        1 FILE_LTS
     0-0-0/w STRC(144)         1 GO                         0-0-0/w STRC(180)         1 ILL
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:72   
     0-0-0/w STRC              1 ILL_NO_OPS                 0-0-0/w STRC(108)         1 INDEXES
     0-0-0/w STRC(360)         1 INIT_LTS                   0-0-0/w STRC(396)         1 INTDEF
     0-0-0/w STRC(180)         1 IO_RESTORE_CHAIN           0-0-0/w STRC(144)         1 KEY
     0-0-0/w STRC(396)         1 LABEL                      0-0-0/w STRC(36864)       1 LCNST
     0-0-0/w STRC(108)         1 LINOI                      0-0-0/w STRC(72)    r     1 LONG
     0-0-0/w STRC        r     1 LTS                        0-0-0/w STRC(360)         1 LTSS
     0-0-0/w STRC(36936)       1 LTS_PTR_ARRAY              0-0-0/w STRC(72)          1 MFILL
     0-0-0/w STRC(396)         1 MNEMONIC                   0-0-0/w STRC(180)         1 MULTI_GO
     0-0-0/w STRC(180)         1 MVEAL                      0-0-0/w STRC(108)         1 MVFIL
     0-0-0/w STRC(72)          1 MVIIS                      0-0-0/w STRC(144)         1 NEL
     0-0-0/w STRC        r     1 OBJ                        0-0-0/w STRC(72)    r     1 OBJ_LAB
     0-0-0/w STRC(108)         1 OBJ_LINE                   0-0-0/w STRC(72)    r     1 OBJ_ORG
     0-0-0/w STRC(72)          1 OBJ_SCOPE                  0-0-0/w STRC(144)         1 OBJ_WORD
     0-0-0/w STRC(216)         1 OPEN_LTS                   0-0-0/w STRC(180)         1 OS_CALL
     0-0-0/w STRC(36864)       1 PAGE                       0-0-0/w STRC(396)         1 PARA
     0-0-0/w STRC(216)         1 PFORM                      0-0-0/w STRC(144)         1 PINC
     0-0-0/w STRC(144)         1 PREOFF                     0-0-0/w STRC(108)         1 PRESET
     0-0-0/w STRC(144)         1 PRIME                      0-0-0/w STRC(396)         1 PROC_
     0-0-0/w STRC(396)         1 PROC_DEF                   0-0-0/w STRC(900)         1 PROC_SUPP
     0-0-0/w STRC(144)         1 P_A_PRESET                 0-0-0/w STRC(144)         1 P_P_PRESET
     0-0-0/w STRC(396)         1 RD                         0-0-0/w STRC(216)         1 REF
     0-0-0/w STRC(144)         1 REMEM                      0-0-0/w STRC(108)         1 RENAMES
     0-0-0/w STRC(720)         1 REPORT_01_LTS              0-0-0/w STRC(432)         1 REPORT_ELEM_LTS
     0-0-0/w STRC(252)         1 REPORT_GRP_LTS             0-0-0/w STRC(1332)        1 REPORT_LTS
     0-0-0/w STRC(144)         1 RVA_LTS                    0-0-0/w STRC(396)         1 SCALAR
     0-0-0/w STRC(144)         1 SCOPE                      0-0-0/w STRC(396)         1 SD
     0-0-0/w STRC(216)         1 SEARCH_                    0-0-0/w STRC(396)         1 SECTION
     0-0-0/w STRC(396)         1 SEGMENT                    0-0-0/w STRC(360)         1 SEGMENT_LTS
     0-0-0/w STRC(396)   r     1 ST                         0-0-0/w STRC(72)          1 STP2
     0-0-0/w STRC(252)         1 SUM_LTS                    0-0-0/w STRC(396)         1 SWITCH
     0-0-0/w STRC(396)         1 SYMBOLIC_CHAR              0-0-0/w STRC(396)         1 SYMDEF_
     0-0-0/w STRC(396)         1 SYMREF_                    0-0-0/w STRC(396)   r     1 TEMP
     0-0-0/w STRC(144)         1 TRINARY_ILL                0-0-0/w STRC(72)          1 UNARY_ILL
     0-0-0/d STRC(612)         1 USE                        0-0-0/w STRC(216)         1 USER_CALL
     0-0-0/w STRC(252)         1 USE_SUPP                   0-0-0/w STRC(108)         1 VAL
     0-0-0/w STRC(108)         1 VAL_END                    0-0-0/w STRC(396)         1 VARIABLE
     0-0-0/w STRC(72)          1 WHEN
PL6.E3A0      #001=Z8HU$ALLOT_TEMP File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:24 Page:73   


   Procedure Z8HU$ALLOT_TEMP requires 857 words for executable code.
   Procedure Z8HU$ALLOT_TEMP requires 58 words of local(AUTO) storage.

PL6.E3A0      #002=Z8HU$INCCNT File=Z8HU.:Z8A6TSI                                SAT 08/09/97 13:27 Page:74   
      371        1        /*T***********************************************************/
      372        2        /*T*                                                         */
      373        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      374        4        /*T*                                                         */
      375        5        /*T***********************************************************/
      376        6        Z8HU$INCCNT:PROC(NODE$, COUNT);
      377        7        /*F*
      378        8             NAME: Z8HU$INCCNT
      379        9             PURPOSE:
      380       10                  To bump the reference count explicitly for NODE$, implicitly
      381       11                  for any implied references in a REF item.
      382       12             DESCRIPTION:
      383       13                  None.
      384       14        */
      385       15        /*D*
      386       16             NAME: Z8HU$INCCNT
      387       17             CALL:
      388       18                  CALL Z8HU$INCCNT(=NODE$, =COUNT);
      389       19             PARAMETERS:
      390       20                  NODE$  - Points to explicit triad to be incremented.
      391       21                  COUNT  - How many to bump both the explicit and explicit
      392       22                              references.
      393       23             INTERFACE:
      394       24                  Z8HU$INCCNT  (recursive)
      395       25             ENVIRONMENT:
      396       26                  None.
      397       27             INPUT:
      398       28                  The ETT item pointed to by NODE$.
      399       29             OUTPUT:
      400       30                  None.
      401       31             SCRATCH:
      402       32                  P$  - To get around PL6's cute little inefficiencies.
      403       33             DESCRIPTION:
      404       34                  If there is a REF item associated with this triad, look at
      405       35                  the SSOP_TAG$, SIZ_TAG$, PR_TAG$, and REF.ST$ -> TEMP, and
      406       36                  increment their fields accordingly.  These make up the *implied*
      407       37                  references.  Then increment the explicit triad pointed to by
PL6.E3A0      #002=Z8HU$INCCNT File=Z8HU.:Z8A6TSI                                SAT 08/09/97 13:27 Page:75   
      408       38                  NODE$.
      409       39
      410       40                  If the triad pointed to by NODE$ holds a register contained
      411       41                  state, update that register's accumulative count by the passed
      412       42                  value COUNT.
      413       43
      414       44                  Of course, if the triad is marked DONT_MESS, then do nothing.
      415       45        */
      416       46
      417       47    1        DCL NODE$ PTR;
      418       48    1        DCL COUNT SBIN WORD;
      419       49
      420       50    1        DCL P$ PTR;
      421       51
      422       52             %EQU PHASE = 4;
      423       53             %INCLUDE Z8A_DEFC;
      424      121             %INCLUDE Z8A_SUPP_MAC;
      425     2521             %INCLUDE Z8A_ETT;
      426     2822             %INCLUDE Z9A_FLAGS;
      427     2836             %INCLUDE Z8H_SUPPORT;
      428     3284             %INCLUDE Z8H_RAT;
      429     3375             %INCLUDE Z8A_LTS;
      430     5452             %INCLUDE Z8A_ST;
      431     9111
      432     9112
      433     9113    1        IF NODE$ -> ETT.COUNT = %DONT_MESS THEN
      434     9114    1          RETURN;
      435     9115
      436     9116    1        P$ = NODE$ -> ETT.REF$;
      437     9117
      438     9118    1        IF P$ ~= ADDR(NIL) THEN
      439     9119               %IMPLIED_REF(REF$=P$, CNT=COUNT);
      440     9133
      441     9134    1        NODE$ -> ETT.COUNT = NODE$ -> ETT.COUNT + COUNT;
      442     9135
      443     9136    1        IF NODE$ -> ETT.STATE > %REF_T THEN    /* If it's in a register */
      444     9137    2          DO;
PL6.E3A0      #002=Z8HU$INCCNT File=Z8HU.:Z8A6TSI                                SAT 08/09/97 13:27 Page:76   
      445     9138    2            RAT.COUNT(NODE$ -> ETT.STATE) = RAT.COUNT(NODE$ -> ETT.STATE) + COUNT;
      446     9139
      447     9140    2            IF RAT.AWAITING(NODE$ -> ETT.STATE) > 0 THEN
      448     9141    2              RAT.AWAITING(NODE$ -> ETT.STATE) = RAT.AWAITING(NODE$ -> ETT.STATE) + 1;
      449     9142    2          END;
      450     9143
      451     9144    1   END Z8HU$INCCNT;
      452     9145        %EOD;

PL6.E3A0      #002=Z8HU$INCCNT File=Z8HU.:Z8A6TSI                                SAT 08/09/97 13:27 Page:77   
--  Include file information  --

   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_SUPPORT.:Z8A6TOU  is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HU$INCCNT.

   Procedure Z8HU$INCCNT requires 98 words for executable code.
   Procedure Z8HU$INCCNT requires 12 words of local(AUTO) storage.

PL6.E3A0      #002=Z8HU$INCCNT File=Z8HU.:Z8A6TSI                                SAT 08/09/97 13:27 Page:78   

 Object Unit name= Z8HU$INCCNT                                File name= Z8HU.:Z8A6TOU
 UTS= AUG 09 '97 13:27:07.64 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  LblCom even  none     1      1  ITERATION
    1  LblCom even  none     1      1  ETT$
    2  LblCom even  none     1      1  HEAD_ETT$
    3  LblCom even  none   512   1000  ETT_BUCKETS
    4  LblCom even  none     5      5  ETT_
    5  LblCom even  none   112    160  RAT
    6  LblCom even  none     1      1  LTS$
    7  LblCom even  none     5      5  LTS_
    8  LblCom even  none     1      1  ST$
    9  LblCom even  none     5      5  ST_
   10   Proc  even  none    98    142  Z8HU$INCCNT
   11  RoData even  none     2      2  Z8HU$INCCNT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    10      0   yes            yes      Std        2  Z8HU$INCCNT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
PL6.E3A0      #002=Z8HU$INCCNT File=Z8HU.:Z8A6TSI                                SAT 08/09/97 13:27 Page:79   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    LTS_STEP

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID
PL6.E3A0      #002=Z8HU$INCCNT File=Z8HU.:Z8A6TSI                                SAT 08/09/97 13:27 Page:80   


      371        1        /*T***********************************************************/
      372        2        /*T*                                                         */
      373        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      374        4        /*T*                                                         */
      375        5        /*T***********************************************************/
      376        6        Z8HU$INCCNT:PROC(NODE$, COUNT);

      6 10 000000   000000 700200 xent  Z8HU$INCCNT  TSX0  ! X66_AUTO_2
        10 000001   000014 000002                    ZERO    12,2

      377        7        /*F*
      378        8             NAME: Z8HU$INCCNT
      379        9             PURPOSE:
      380       10                  To bump the reference count explicitly for NODE$, implicitly
      381       11                  for any implied references in a REF item.
      382       12             DESCRIPTION:
      383       13                  None.
      384       14        */
      385       15        /*D*
      386       16             NAME: Z8HU$INCCNT
      387       17             CALL:
      388       18                  CALL Z8HU$INCCNT(=NODE$, =COUNT);
      389       19             PARAMETERS:
      390       20                  NODE$  - Points to explicit triad to be incremented.
      391       21                  COUNT  - How many to bump both the explicit and explicit
      392       22                              references.
      393       23             INTERFACE:
      394       24                  Z8HU$INCCNT  (recursive)
      395       25             ENVIRONMENT:
      396       26                  None.
      397       27             INPUT:
      398       28                  The ETT item pointed to by NODE$.
      399       29             OUTPUT:
      400       30                  None.
      401       31             SCRATCH:
      402       32                  P$  - To get around PL6's cute little inefficiencies.
PL6.E3A0      #002=Z8HU$INCCNT File=Z8HU.:Z8A6TSI                                SAT 08/09/97 13:27 Page:81   
      403       33             DESCRIPTION:
      404       34                  If there is a REF item associated with this triad, look at
      405       35                  the SSOP_TAG$, SIZ_TAG$, PR_TAG$, and REF.ST$ -> TEMP, and
      406       36                  increment their fields accordingly.  These make up the *implied*
      407       37                  references.  Then increment the explicit triad pointed to by
      408       38                  NODE$.
      409       39
      410       40                  If the triad pointed to by NODE$ holds a register contained
      411       41                  state, update that register's accumulative count by the passed
      412       42                  value COUNT.
      413       43
      414       44                  Of course, if the triad is marked DONT_MESS, then do nothing.
      415       45        */
      416       46
      417       47    1        DCL NODE$ PTR;
      418       48    1        DCL COUNT SBIN WORD;
      419       49
      420       50    1        DCL P$ PTR;
      421       51
      422       52             %EQU PHASE = 4;
      423       53             %INCLUDE Z8A_DEFC;
      424      121             %INCLUDE Z8A_SUPP_MAC;
      425     2521             %INCLUDE Z8A_ETT;
      426     2822             %INCLUDE Z9A_FLAGS;
      427     2836             %INCLUDE Z8H_SUPPORT;
      428     3284             %INCLUDE Z8H_RAT;
      429     3375             %INCLUDE Z8A_LTS;
      430     5452             %INCLUDE Z8A_ST;
      431     9111
      432     9112
      433     9113    1        IF NODE$ -> ETT.COUNT = %DONT_MESS THEN

   9113 10 000002   200003 470500                    LDP0    @NODE$,,AUTO
        10 000003   000000 471500                    LDP1    0,,PR0
        10 000004   100000 720100                    LXL0    0,,PR1
        10 000005   777777 100003                    CMPX0   -1,DU
        10 000006   000010 601000 10                 TNZ     s:9116
PL6.E3A0      #002=Z8HU$INCCNT File=Z8HU.:Z8A6TSI                                SAT 08/09/97 13:27 Page:82   

      434     9114    1          RETURN;

   9114 10 000007   000000 702200 xent               TSX2  ! X66_ARET

      435     9115
      436     9116    1        P$ = NODE$ -> ETT.REF$;

   9116 10 000010   100003 236100                    LDQ     3,,PR1
        10 000011   200005 756100                    STQ     P$,,AUTO

      437     9117
      438     9118    1        IF P$ ~= ADDR(NIL) THEN

   9118 10 000012   000000 116000 11                 CMPQ    0
        10 000013   000076 600000 10                 TZE     s:9134

      439     9119               %IMPLIED_REF(REF$=P$, CNT=COUNT);

   9121 10 000014   200005 473500                    LDP3    P$,,AUTO
        10 000015   300002 236100                    LDQ     2,,PR3
        10 000016   000000 116000 11                 CMPQ    0
        10 000017   000031 600000 10                 TZE     s:9123

   9122 10 000020   200004 236100                    LDQ     @COUNT,,AUTO
        10 000021   200013 756100                    STQ     AORQ+2,,AUTO
        10 000022   200005 236100                    LDQ     P$,,AUTO
        10 000023   000002 036003                    ADLQ    2,DU
        10 000024   200012 756100                    STQ     AORQ+1,,AUTO
        10 000025   200012 630500                    EPPR0   AORQ+1,,AUTO
        10 000026   000001 631400 11                 EPPR1   1
        10 000027   000000 701000 10                 TSX1    s:6
        10 000030   000000 011000                    NOP     0

   9123 10 000031   200005 470500                    LDP0    P$,,AUTO
        10 000032   000003 236100                    LDQ     3,,PR0
        10 000033   000000 116000 11                 CMPQ    0
PL6.E3A0      #002=Z8HU$INCCNT File=Z8HU.:Z8A6TSI                                SAT 08/09/97 13:27 Page:83   
        10 000034   000046 600000 10                 TZE     s:9125

   9124 10 000035   200004 236100                    LDQ     @COUNT,,AUTO
        10 000036   200013 756100                    STQ     AORQ+2,,AUTO
        10 000037   200005 236100                    LDQ     P$,,AUTO
        10 000040   000003 036003                    ADLQ    3,DU
        10 000041   200012 756100                    STQ     AORQ+1,,AUTO
        10 000042   200012 630500                    EPPR0   AORQ+1,,AUTO
        10 000043   000001 631400 11                 EPPR1   1
        10 000044   000000 701000 10                 TSX1    s:6
        10 000045   000000 011000                    NOP     0

   9125 10 000046   200005 470500                    LDP0    P$,,AUTO
        10 000047   000005 471500                    LDP1    5,,PR0
        10 000050   100000 220100                    LDX0    0,,PR1
        10 000051   000760 100003                    CMPX0   496,DU
        10 000052   000062 601000 10                 TNZ     s:9129

   9126 10 000053   200004 473500                    LDP3    @COUNT,,AUTO
        10 000054   100004 236100                    LDQ     4,,PR1
        10 000055   000022 732000                    QRS     18
        10 000056   300000 036100                    ADLQ    0,,PR3
        10 000057   000000 621006                    EAX1    0,QL
        10 000060   100004 741100                    STX1    4,,PR1
        10 000061   000076 710000 10                 TRA     s:9134

   9129 10 000062   000004 236100                    LDQ     4,,PR0
        10 000063   000000 116000 11                 CMPQ    0
        10 000064   000076 600000 10                 TZE     s:9134

   9130 10 000065   200004 236100                    LDQ     @COUNT,,AUTO
        10 000066   200013 756100                    STQ     AORQ+2,,AUTO
        10 000067   200005 236100                    LDQ     P$,,AUTO
        10 000070   000004 036003                    ADLQ    4,DU
        10 000071   200012 756100                    STQ     AORQ+1,,AUTO
        10 000072   200012 630500                    EPPR0   AORQ+1,,AUTO
        10 000073   000001 631400 11                 EPPR1   1
PL6.E3A0      #002=Z8HU$INCCNT File=Z8HU.:Z8A6TSI                                SAT 08/09/97 13:27 Page:84   
        10 000074   000000 701000 10                 TSX1    s:6
        10 000075   000000 011000                    NOP     0

      440     9133
      441     9134    1        NODE$ -> ETT.COUNT = NODE$ -> ETT.COUNT + COUNT;

   9134 10 000076   200003 470500                    LDP0    @NODE$,,AUTO
        10 000077   000000 471500                    LDP1    0,,PR0
        10 000100   200004 473500                    LDP3    @COUNT,,AUTO
        10 000101   100000 236100                    LDQ     0,,PR1
        10 000102   777777 376007                    ANQ     -1,DL
        10 000103   300000 036100                    ADLQ    0,,PR3
        10 000104   000000 620006                    EAX0    0,QL
        10 000105   100000 440100                    SXL0    0,,PR1

      442     9135
      443     9136    1        IF NODE$ -> ETT.STATE > %REF_T THEN    /* If it's in a register */

   9136 10 000106   000000 471500                    LDP1    0,,PR0
        10 000107   100004 220100                    LDX0    4,,PR1
        10 000110   000005 100003                    CMPX0   5,DU
        10 000111   000141 602000 10                 TNC     s:9144

      444     9137    2          DO;

      445     9138    2            RAT.COUNT(NODE$ -> ETT.STATE) = RAT.COUNT(NODE$ -> ETT.STATE) + COUNT;

   9138 10 000112   100004 221100                    LDX1    4,,PR1
        10 000113   100004 021100                    ADLX1   4,,PR1
        10 000114   000000 635011                    EAA     0,X1
        10 000115   000021 771000                    ARL     17
        10 000116   000000 636011                    EAQ     0,X1
        10 000117   000021 772000                    QRL     17
        10 000120   000002 236006 5                  LDQ     RAT+2,QL
        10 000121   300000 036100                    ADLQ    0,,PR3
        10 000122   000002 756005 5                  STQ     RAT+2,AL

PL6.E3A0      #002=Z8HU$INCCNT File=Z8HU.:Z8A6TSI                                SAT 08/09/97 13:27 Page:85   
      446     9139
      447     9140    2            IF RAT.AWAITING(NODE$ -> ETT.STATE) > 0 THEN

   9140 10 000123   000000 471500                    LDP1    0,,PR0
        10 000124   100004 220100                    LDX0    4,,PR1
        10 000125   100004 020100                    ADLX0   4,,PR1
        10 000126   000000 635010                    EAA     0,X0
        10 000127   000021 771000                    ARL     17
        10 000130   000001 721005 5                  LXL1    RAT+1,AL
        10 000131   000141 604400 10                 TMOZ    s:9144

      448     9141    2              RAT.AWAITING(NODE$ -> ETT.STATE) = RAT.AWAITING(NODE$ -> ETT.STATE) + 1;

   9141 10 000132   000000 635010                    EAA     0,X0
        10 000133   000021 771000                    ARL     17
        10 000134   000000 636010                    EAQ     0,X0
        10 000135   000021 772000                    QRL     17
        10 000136   000001 721006 5                  LXL1    RAT+1,QL
        10 000137   000001 622011                    EAX2    1,X1
        10 000140   000001 442005 5                  SXL2    RAT+1,AL

      449     9142    2          END;

      450     9143
      451     9144    1   END Z8HU$INCCNT;

   9144 10 000141   000000 702200 xent               TSX2  ! X66_ARET
      452     9145        %EOD;

PL6.E3A0      #002=Z8HU$INCCNT File=Z8HU.:Z8A6TSI                                SAT 08/09/97 13:27 Page:86   
--  Include file information  --

   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_SUPPORT.:Z8A6TOU  is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HU$INCCNT.
PL6.E3A0      #002=Z8HU$INCCNT File=Z8HU.:Z8A6TSI                                SAT 08/09/97 13:27 Page:87   

 **** Variables and constants ****

  ****  Section 000 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 001 LblCom ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ETT$

  ****  Section 002 LblCom HEAD_ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_ETT$

  ****  Section 003 LblCom ETT_BUCKETS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 ETT_BUCKETS(0:511)

  ****  Section 004 LblCom ETT_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ETT_

PL6.E3A0      #002=Z8HU$INCCNT File=Z8HU.:Z8A6TSI                                SAT 08/09/97 13:27 Page:88   
  ****  Section 005 LblCom RAT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 RAT(0:27)

  ****  Section 006 LblCom LTS$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 LONG_ITEM$                 0-0-0/w PTR         r     1 LTS$

  ****  Section 007 LblCom LTS_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 LTS_

  ****  Section 008 LblCom ST$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ST$

  ****  Section 009 LblCom ST_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ST_

  ****  Auto variables  ****

PL6.E3A0      #002=Z8HU$INCCNT File=Z8HU.:Z8A6TSI                                SAT 08/09/97 13:27 Page:89   
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @COUNT                     3-0-0/w PTR         r     1 @NODE$
    11-0-0/b BIT               1 AORQ                      *0-0-0/w SBIN        r     1 COUNT
    10-0-0/w UBIN              1 LAST_FREED                 7-0-0/w UBIN              1 LAST_USED
    *0-0-0/w PTR         r     1 NODE$                      5-0-0/w PTR         r     1 P$
     6-0-0/w UBIN              1 REGID

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN              1 LTS_STEP(0:37)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(396)         1 ALPHABET                   0-0-0/w STRC(144)         1 ALTER_LTS
     0-0-0/w STRC(3672)        1 ALT_KEY                    0-0-0/w STRC(36864)       1 ARGLIST
     0-0-0/w STRC(396)         1 ARRAY                      0-0-0/w STRC(180)         1 ARRAY_PRESET_LTS
     0-0-0/w STRC(288)         1 BASE_LTS                   0-0-0/w STRC(396)         1 BLOCK
     0-0-0/w STRC(144)         1 BT                         0-0-0/w STRC(396)         1 CD
     0-0-0/w STRC(288)         1 CD_LTS                     0-0-0/w CHAR(4096)        1 CHARS
     0-0-0/w STRC(396)         1 CLASS                      0-0-0/w STRC(396)         1 CONDITION
     0-0-0/w STRC(396)         1 CONST                      0-0-0/w STRC(72)          1 CONT
     0-0-0/w STRC(540)         1 CONTROL_NAME_LTS           0-0-0/w STRC(1872)        1 COPY_FILE
     0-0-0/w STRC(396)         1 DB                         0-0-0/w STRC(396)         1 DCB_
     0-0-0/w STRC(108)         1 DEPENDING_SIZE             0-0-0/w STRC(5472)        1 DIMS
     0-0-0/w STRC(396)         1 DML_ITEM                   0-0-0/w STRC(216)         1 DML_REC
     0-0-0/w STRC(180)   r     1 ETT                        0-0-0/w STRC(73836)       1 EVALUATE
     0-0-0/w STRC(396)         1 FD                         0-0-0/w STRC(1692)        1 FILE_LTS
     0-0-0/w STRC(108)         1 INDEXES                    0-0-0/w STRC(360)         1 INIT_LTS
     0-0-0/w STRC(396)         1 INTDEF                     0-0-0/w STRC(180)         1 IO_RESTORE_CHAIN
PL6.E3A0      #002=Z8HU$INCCNT File=Z8HU.:Z8A6TSI                                SAT 08/09/97 13:27 Page:90   
     0-0-0/w STRC(144)         1 KEY                        0-0-0/w STRC(396)         1 LABEL
     0-0-0/w STRC(36864)       1 LCNST                      0-0-0/w STRC(72)          1 LONG
     0-0-0/w STRC              1 LTS                        0-0-0/w STRC(360)         1 LTSS
     0-0-0/w STRC(36936)       1 LTS_PTR_ARRAY              0-0-0/w STRC(396)         1 MNEMONIC
     0-0-0/w STRC(144)         1 NEL                        0-0-0/w STRC(216)         1 OPEN_LTS
     0-0-0/w STRC(36864)       1 PAGE                       0-0-0/w STRC(396)         1 PARA
     0-0-0/w STRC(144)         1 PRIME                      0-0-0/w STRC(396)         1 PROC_
     0-0-0/w STRC(396)         1 PROC_DEF                   0-0-0/w STRC(900)         1 PROC_SUPP
     0-0-0/w STRC(396)         1 RD                         0-0-0/w STRC(216)   r     1 REF
     0-0-0/w STRC(108)         1 RENAMES                    0-0-0/w STRC(720)         1 REPORT_01_LTS
     0-0-0/w STRC(432)         1 REPORT_ELEM_LTS            0-0-0/w STRC(252)         1 REPORT_GRP_LTS
     0-0-0/w STRC(1332)        1 REPORT_LTS                 0-0-0/w STRC(144)         1 RVA_LTS
     0-0-0/w STRC(396)         1 SCALAR                     0-0-0/w STRC(396)         1 SD
     0-0-0/w STRC(396)         1 SECTION                    0-0-0/w STRC(396)         1 SEGMENT
     0-0-0/w STRC(360)         1 SEGMENT_LTS                0-0-0/w STRC(396)   r     1 ST
     0-0-0/w STRC(252)         1 SUM_LTS                    0-0-0/w STRC(396)         1 SWITCH
     0-0-0/w STRC(396)         1 SYMBOLIC_CHAR              0-0-0/w STRC(396)         1 SYMDEF_
     0-0-0/w STRC(396)         1 SYMREF_                    0-0-0/w STRC(396)   r     1 TEMP
     0-0-0/d STRC(612)         1 USE                        0-0-0/w STRC(252)         1 USE_SUPP
     0-0-0/w STRC(396)         1 VARIABLE


   Procedure Z8HU$INCCNT requires 98 words for executable code.
   Procedure Z8HU$INCCNT requires 12 words of local(AUTO) storage.

PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:91   
      453        1        /*T***********************************************************/
      454        2        /*T*                                                         */
      455        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      456        4        /*T*                                                         */
      457        5        /*T***********************************************************/
      458        6        Z8HU$DEC_COUNT:PROC(NODE$, COUNT);
      459        7        /*D*
      460        8             NAME: Z8HU$DEC_COUNT
      461        9             ENTRY:
      462       10                  Z8HU$DEC_COUNT
      463       11                  Z8HU$DEC_COUNT_WITHOUT_IMPL_REF
      464       12             CALL:
      465       13                  CALL Z8HU$DEC_COUNT ( NODE$, COUNT );
      466       14             PARAMETERS:
      467       15                  NODE$ - Points at node whose count is to decremented
      468       16                  COUNT - Amount of decrement
      469       17             ENVIRONMENT:
      470       18                  None.
      471       19             INPUT:
      472       20                  NODE$ which points to an ETT item
      473       21             OUTPUT:
      474       22                  None.
      475       23             SCRATCH:
      476       24                  None.
      477       25             DESCRIPTION:
      478       26                  Decrement the count of the ETT item.  If the count
      479       27                  goes to zero, then pool all poolable items
      480       28                  associated with the triad.  Decrement implied
      481       29                  references (mostly tag items in the REF).  If
      482       30                  entered from DECCNT_WITHOUT_IMPL_REF then dont
      483       31                  decrement implied references.
      484       32        */
      485       33
      486       34    1        DCL NODE$ PTR;
      487       35    1        DCL COUNT  SBIN WORD;
      488       36
      489       37    1        DCL P$ PTR;
PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:92   
      490       38
      491       39
      492       40             %EQU PHASE = 4;
      493       41             %INCLUDE Z8A_DEFC;
      494      109             %INCLUDE Z8A_SUPP_MAC;
      495     2509             %INCLUDE Z8A_ETT;
      496     2810             %INCLUDE Z8A_ST;
      497     6469             %INCLUDE Z8A_LTS;
      498     8546
      499     8547             %INCLUDE Z8H_RAT;
      500     8638             %INCLUDE Z9A_FLAGS;
      501     8652             %INCLUDE Z8H_SUPPORT;
      502     9100
      503     9101
      504     9102    1        DCL Z8HU$POOL_PRIME ENTRY(1);
      505     9103    1        DCL Z8HU$POOL ENTRY(1);
      506     9104    1        DCL Z8HU$WALK ENTRY(1);
      507     9105
      508     9106    1        DCL CHECK_IMPLIED_REF BOOLEAN;
      509     9107         %EJECT;
PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:93   
      510     9108    1        CHECK_IMPLIED_REF = TRUE;
      511     9109
      512     9110    1        GOTO CHECK_REF;
      513     9111
      514     9112    1   Z8HU$DECCNT_WITHOUT_IMPL_REF: ENTRY(NODE$, COUNT);
      515     9113
      516     9114        /*V* DECCNT_WITHOUT_IMPLIED_REF
      517     9115
      518     9116             This entry point will DECCNT NODE$ without decrementing its
      519     9117             tags.
      520     9118        */
      521     9119
      522     9120    1        CHECK_IMPLIED_REF = FALSE;
      523     9121
      524     9122    1        CHECK_REF:
      525     9123
      526     9124    1        IF NODE$ = ADDR(NIL)
      527     9125    1        OR NODE$ -> ST.ID >= %FIRST_ST
      528     9126    1        OR NODE$ -> ETT.COUNT = %DONT_MESS THEN
      529     9127    1          RETURN;
      530     9128
      531     9129    1        P$ = NODE$ -> ETT.REF$;
      532     9130
      533     9131    1        IF CHECK_IMPLIED_REF AND (P$ ~= ADDR(NIL)) THEN
      534     9132    2          DO;
      535     9133    2            IF P$ -> REF.SSOP_TAG$ ~= ADDR(NIL) THEN
      536     9134    2              CALL Z8HU$DEC_COUNT(P$ -> REF.SSOP_TAG$, COUNT);
      537     9135
      538     9136    2            IF P$ -> REF.SIZ_TAG$ ~= ADDR(NIL) THEN
      539     9137    2              CALL Z8HU$DEC_COUNT(P$ -> REF.SIZ_TAG$, COUNT);
      540     9138
      541     9139    2            IF P$ -> REF.ST$ -> ST.ID = %TEMP THEN
      542     9140    3              DO;
      543     9141    3                P$ -> REF.ST$ -> TEMP.REFERENCES = P$ -> REF.ST$ -> TEMP.REFERENCES
      544     9142    3                                                 - COUNT;
      545     9143    3                IF P$ -> REF.PR_TAG$ ~= ADDR(NIL) AND
      546     9144    3                    RAT.CLASS (P$ -> REF.PR_TAG$ -> ETT.STATE) = %DEMAND AND
PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:94   
      547     9145    3                    RAT.AWAITING (P$ -> REF.PR_TAG$ -> ETT.STATE) > 0 THEN
      548     9146    3                  RAT.AWAITING (P$ -> REF.PR_TAG$ -> ETT.STATE) =
      549     9147    3                      RAT.AWAITING (P$ -> REF.PR_TAG$ -> ETT.STATE) - 1;
      550     9148    3              END;
      551     9149    2            ELSE
      552     9150                   /* Don't DECCNT PR_TAG$ for temps because their
      553     9151                      references are not included in the count */
      554     9152    2              IF P$ -> REF.PR_TAG$ ~= ADDR(NIL) THEN
      555     9153    2                CALL Z8HU$DEC_COUNT(P$ -> REF.PR_TAG$, COUNT);
      556     9154    2          END;
      557     9155
      558     9156    1        NODE$ -> ETT.COUNT = NODE$ -> ETT.COUNT - COUNT;
      559     9157    1        IF NODE$ -> ETT.COUNT = %DONT_MESS THEN      /*#31538*/
      560     9158    1          NODE$ -> ETT.COUNT = 0;
      561     9159
      562     9160    1        IF NODE$ -> ETT.STATE > %REF_T OR NODE$ -> ETT.STATE = %IND THEN
      563     9161    2          DO;
      564     9162    2            RAT.COUNT(NODE$ -> ETT.STATE) = MAXIMUM (0, RAT.COUNT(NODE$ -> ETT.STATE) -
              9162                     COUNT);
      565     9163    2            RAT.AWAITING(NODE$ -> ETT.STATE) = MAXIMUM(0, RAT.AWAITING(NODE$ -> ETT.
              9163                     STATE) - 1);
      566     9164    2          END;
      567     9165
      568     9166
      569     9167    1        IF NODE$ -> ETT.COUNT = 0 THEN
      570     9168    2          DO;
      571     9169    3            DO CASE(NODE$ -> ETT.STATE);    /* If in a register */
      572     9170    3              CASE(%IND,%ARA,%ARQ,%ARAQ,%AREA,%AREAQ,
      573     9171    3                   %XR0,%XR1,%XR2,%XR3,%XR4,%XR5,%XR6,%XR7,
      574     9172    3                   %PR0,%PR1,%PR2,%PR3,%PR4,%PR5,%PR6,%PR7);
      575     9173    3                CALL Z8HU$POOL_PRIME(NODE$);
      576     9174
      577     9175    3            END /* Case */;
      578     9176
      579     9177    2            CALL Z8HU$POOL(NODE$);
      580     9178    2          END;
      581     9179
PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:95   
      582     9180    1   END Z8HU$DEC_COUNT;
      583     9181        %EOD;

PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:96   
--  Include file information  --

   Z8H_SUPPORT.:Z8A6TOU  is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HU$DEC_COUNT.

   Procedure Z8HU$DEC_COUNT requires 189 words for executable code.
   Procedure Z8HU$DEC_COUNT requires 14 words of local(AUTO) storage.

PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:97   

 Object Unit name= Z8HU$DEC_COUNT                             File name= Z8HU.:Z8A6TOU
 UTS= AUG 09 '97 13:28:12.80 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  LblCom even  none     1      1  ITERATION
    1  LblCom even  none     1      1  ETT$
    2  LblCom even  none     1      1  HEAD_ETT$
    3  LblCom even  none   512   1000  ETT_BUCKETS
    4  LblCom even  none     5      5  ETT_
    5  LblCom even  none     1      1  ST$
    6  LblCom even  none     5      5  ST_
    7  LblCom even  none     1      1  LTS$
    8  LblCom even  none     5      5  LTS_
    9  LblCom even  none   112    160  RAT
   10   Proc  even  none   189    275  Z8HU$DEC_COUNT
   11  RoData even  none     3      3  Z8HU$DEC_COUNT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    10      0   yes            yes      Std        2  Z8HU$DEC_COUNT
    10      5                  yes      Std        2  Z8HU$DECCNT_WITHOUT_IMPL_REF
PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:98   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 Z8HU$POOL_PRIME
         yes           Std       1 Z8HU$POOL
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    LTS_STEP

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID
PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:99   


      453        1        /*T***********************************************************/
      454        2        /*T*                                                         */
      455        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      456        4        /*T*                                                         */
      457        5        /*T***********************************************************/
      458        6        Z8HU$DEC_COUNT:PROC(NODE$, COUNT);

      6 10 000000   000000 700200 xent  Z8HU$DEC_CO* TSX0  ! X66_AUTO_2
        10 000001   000016 000002                    ZERO    14,2

      459        7        /*D*
      460        8             NAME: Z8HU$DEC_COUNT
      461        9             ENTRY:
      462       10                  Z8HU$DEC_COUNT
      463       11                  Z8HU$DEC_COUNT_WITHOUT_IMPL_REF
      464       12             CALL:
      465       13                  CALL Z8HU$DEC_COUNT ( NODE$, COUNT );
      466       14             PARAMETERS:
      467       15                  NODE$ - Points at node whose count is to decremented
      468       16                  COUNT - Amount of decrement
      469       17             ENVIRONMENT:
      470       18                  None.
      471       19             INPUT:
      472       20                  NODE$ which points to an ETT item
      473       21             OUTPUT:
      474       22                  None.
      475       23             SCRATCH:
      476       24                  None.
      477       25             DESCRIPTION:
      478       26                  Decrement the count of the ETT item.  If the count
      479       27                  goes to zero, then pool all poolable items
      480       28                  associated with the triad.  Decrement implied
      481       29                  references (mostly tag items in the REF).  If
      482       30                  entered from DECCNT_WITHOUT_IMPL_REF then dont
      483       31                  decrement implied references.
      484       32        */
PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:100  
      485       33
      486       34    1        DCL NODE$ PTR;
      487       35    1        DCL COUNT  SBIN WORD;
      488       36
      489       37    1        DCL P$ PTR;
      490       38
      491       39
      492       40             %EQU PHASE = 4;
      493       41             %INCLUDE Z8A_DEFC;
      494      109             %INCLUDE Z8A_SUPP_MAC;
      495     2509             %INCLUDE Z8A_ETT;
      496     2810             %INCLUDE Z8A_ST;
      497     6469             %INCLUDE Z8A_LTS;
      498     8546
      499     8547             %INCLUDE Z8H_RAT;
      500     8638             %INCLUDE Z9A_FLAGS;
      501     8652             %INCLUDE Z8H_SUPPORT;
      502     9100
      503     9101
      504     9102    1        DCL Z8HU$POOL_PRIME ENTRY(1);
      505     9103    1        DCL Z8HU$POOL ENTRY(1);
      506     9104    1        DCL Z8HU$WALK ENTRY(1);
      507     9105
      508     9106    1        DCL CHECK_IMPLIED_REF BOOLEAN;
      509     9107         %EJECT;
PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:101  
      510     9108    1        CHECK_IMPLIED_REF = TRUE;

   9108 10 000002   400000 236003                    LDQ     -131072,DU
        10 000003   200012 756100                    STQ     CHECK_IMPLIED_REF,,AUTO

      511     9109
      512     9110    1        GOTO CHECK_REF;

   9110 10 000004   000010 710000 10                 TRA     CHECK_REF

      513     9111
      514     9112    1   Z8HU$DECCNT_WITHOUT_IMPL_REF: ENTRY(NODE$, COUNT);

   9112 10 000005   000000 700200 xent  Z8HU$DECCNT* TSX0  ! X66_AUTO_2
        10 000006   000016 000002                    ZERO    14,2

      515     9113
      516     9114        /*V* DECCNT_WITHOUT_IMPLIED_REF
      517     9115
      518     9116             This entry point will DECCNT NODE$ without decrementing its
      519     9117             tags.
      520     9118        */
      521     9119
      522     9120    1        CHECK_IMPLIED_REF = FALSE;

   9120 10 000007   200012 450100                    STZ     CHECK_IMPLIED_REF,,AUTO

      523     9121
      524     9122    1        CHECK_REF:
      525     9123
      526     9124    1        IF NODE$ = ADDR(NIL)

   9124 10 000010   200003 470500       CHECK_REF    LDP0    @NODE$,,AUTO
        10 000011   000000 236100                    LDQ     0,,PR0
        10 000012   000000 116000 11                 CMPQ    0
        10 000013   000023 600000 10                 TZE     s:9127
        10 000014   000000 471500                    LDP1    0,,PR0
PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:102  
        10 000015   100000 220100                    LDX0    0,,PR1
        10 000016   000751 100003                    CMPX0   489,DU
        10 000017   000023 603000 10                 TRC     s:9127
        10 000020   100000 721100                    LXL1    0,,PR1
        10 000021   777777 101003                    CMPX1   -1,DU
        10 000022   000024 601000 10                 TNZ     s:9129

      527     9125    1        OR NODE$ -> ST.ID >= %FIRST_ST
      528     9126    1        OR NODE$ -> ETT.COUNT = %DONT_MESS THEN
      529     9127    1          RETURN;

   9127 10 000023   000000 702200 xent               TSX2  ! X66_ARET

      530     9128
      531     9129    1        P$ = NODE$ -> ETT.REF$;

   9129 10 000024   100003 236100                    LDQ     3,,PR1
        10 000025   200005 756100                    STQ     P$,,AUTO

      532     9130
      533     9131    1        IF CHECK_IMPLIED_REF AND (P$ ~= ADDR(NIL)) THEN

   9131 10 000026   200012 234100                    SZN     CHECK_IMPLIED_REF,,AUTO
        10 000027   000141 605000 10                 TPL     s:9156
        10 000030   000000 116000 11                 CMPQ    0
        10 000031   000141 600000 10                 TZE     s:9156

      534     9132    2          DO;

      535     9133    2            IF P$ -> REF.SSOP_TAG$ ~= ADDR(NIL) THEN

   9133 10 000032   200005 473500                    LDP3    P$,,AUTO
        10 000033   300002 236100                    LDQ     2,,PR3
        10 000034   000000 116000 11                 CMPQ    0
        10 000035   000047 600000 10                 TZE     s:9136

      536     9134    2              CALL Z8HU$DEC_COUNT(P$ -> REF.SSOP_TAG$, COUNT);
PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:103  

   9134 10 000036   200004 236100                    LDQ     @COUNT,,AUTO
        10 000037   200015 756100                    STQ     CHECK_IMPLIED_REF+3,,AUTO
        10 000040   200005 236100                    LDQ     P$,,AUTO
        10 000041   000002 036003                    ADLQ    2,DU
        10 000042   200014 756100                    STQ     CHECK_IMPLIED_REF+2,,AUTO
        10 000043   200014 630500                    EPPR0   CHECK_IMPLIED_REF+2,,AUTO
        10 000044   000001 631400 11                 EPPR1   1
        10 000045   000000 701000 10                 TSX1    s:6
        10 000046   000000 011000                    NOP     0

      537     9135
      538     9136    2            IF P$ -> REF.SIZ_TAG$ ~= ADDR(NIL) THEN

   9136 10 000047   200005 470500                    LDP0    P$,,AUTO
        10 000050   000003 236100                    LDQ     3,,PR0
        10 000051   000000 116000 11                 CMPQ    0
        10 000052   000064 600000 10                 TZE     s:9139

      539     9137    2              CALL Z8HU$DEC_COUNT(P$ -> REF.SIZ_TAG$, COUNT);

   9137 10 000053   200004 236100                    LDQ     @COUNT,,AUTO
        10 000054   200015 756100                    STQ     CHECK_IMPLIED_REF+3,,AUTO
        10 000055   200005 236100                    LDQ     P$,,AUTO
        10 000056   000003 036003                    ADLQ    3,DU
        10 000057   200014 756100                    STQ     CHECK_IMPLIED_REF+2,,AUTO
        10 000060   200014 630500                    EPPR0   CHECK_IMPLIED_REF+2,,AUTO
        10 000061   000001 631400 11                 EPPR1   1
        10 000062   000000 701000 10                 TSX1    s:6
        10 000063   000000 011000                    NOP     0

      540     9138
      541     9139    2            IF P$ -> REF.ST$ -> ST.ID = %TEMP THEN

   9139 10 000064   200005 470500                    LDP0    P$,,AUTO
        10 000065   000005 471500                    LDP1    5,,PR0
        10 000066   100000 220100                    LDX0    0,,PR1
PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:104  
        10 000067   000760 100003                    CMPX0   496,DU
        10 000070   000125 601000 10                 TNZ     s:9152

      542     9140    3              DO;

      543     9141    3                P$ -> REF.ST$ -> TEMP.REFERENCES = P$ -> REF.ST$ -> TEMP.REFERENCES

   9141 10 000071   200004 473500                    LDP3    @COUNT,,AUTO
        10 000072   100004 236100                    LDQ     4,,PR1
        10 000073   000022 732000                    QRS     18
        10 000074   300000 136100                    SBLQ    0,,PR3
        10 000075   000000 621006                    EAX1    0,QL
        10 000076   100004 741100                    STX1    4,,PR1

      544     9142    3                                                 - COUNT;
      545     9143    3                IF P$ -> REF.PR_TAG$ ~= ADDR(NIL) AND

   9143 10 000077   000004 236100                    LDQ     4,,PR0
        10 000100   000000 116000 11                 CMPQ    0
        10 000101   000141 600000 10                 TZE     s:9156
        10 000102   000004 471500                    LDP1    4,,PR0
        10 000103   100004 220100                    LDX0    4,,PR1
        10 000104   100004 020100                    ADLX0   4,,PR1
        10 000105   000000 635010                    EAA     0,X0
        10 000106   000021 771000                    ARL     17
        10 000107   000003 235005 9                  LDA     RAT+3,AL
        10 000110   000141 601000 10                 TNZ     s:9156
        10 000111   000000 635010                    EAA     0,X0
        10 000112   000021 771000                    ARL     17
        10 000113   000001 721005 9                  LXL1    RAT+1,AL
        10 000114   000141 604400 10                 TMOZ    s:9156

      546     9144    3                    RAT.CLASS (P$ -> REF.PR_TAG$ -> ETT.STATE) = %DEMAND AND
      547     9145    3                    RAT.AWAITING (P$ -> REF.PR_TAG$ -> ETT.STATE) > 0 THEN
      548     9146    3                  RAT.AWAITING (P$ -> REF.PR_TAG$ -> ETT.STATE) =

   9146 10 000115   000000 635010                    EAA     0,X0
PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:105  
        10 000116   000021 771000                    ARL     17
        10 000117   000000 636010                    EAQ     0,X0
        10 000120   000021 772000                    QRL     17
        10 000121   000001 721006 9                  LXL1    RAT+1,QL
        10 000122   777777 622011                    EAX2    -1,X1
        10 000123   000001 442005 9                  SXL2    RAT+1,AL

      549     9147    3                      RAT.AWAITING (P$ -> REF.PR_TAG$ -> ETT.STATE) - 1;
      550     9148    3              END;

   9148 10 000124   000141 710000 10                 TRA     s:9156

      551     9149    2            ELSE
      552     9150                   /* Don't DECCNT PR_TAG$ for temps because their
      553     9151                      references are not included in the count */
      554     9152    2              IF P$ -> REF.PR_TAG$ ~= ADDR(NIL) THEN

   9152 10 000125   000004 236100                    LDQ     4,,PR0
        10 000126   000000 116000 11                 CMPQ    0
        10 000127   000141 600000 10                 TZE     s:9156

      555     9153    2                CALL Z8HU$DEC_COUNT(P$ -> REF.PR_TAG$, COUNT);

   9153 10 000130   200004 236100                    LDQ     @COUNT,,AUTO
        10 000131   200015 756100                    STQ     CHECK_IMPLIED_REF+3,,AUTO
        10 000132   200005 236100                    LDQ     P$,,AUTO
        10 000133   000004 036003                    ADLQ    4,DU
        10 000134   200014 756100                    STQ     CHECK_IMPLIED_REF+2,,AUTO
        10 000135   200014 630500                    EPPR0   CHECK_IMPLIED_REF+2,,AUTO
        10 000136   000001 631400 11                 EPPR1   1
        10 000137   000000 701000 10                 TSX1    s:6
        10 000140   000000 011000                    NOP     0

      556     9154    2          END;

      557     9155
      558     9156    1        NODE$ -> ETT.COUNT = NODE$ -> ETT.COUNT - COUNT;
PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:106  

   9156 10 000141   200003 470500                    LDP0    @NODE$,,AUTO
        10 000142   000000 471500                    LDP1    0,,PR0
        10 000143   200004 473500                    LDP3    @COUNT,,AUTO
        10 000144   100000 236100                    LDQ     0,,PR1
        10 000145   777777 376007                    ANQ     -1,DL
        10 000146   300000 136100                    SBLQ    0,,PR3
        10 000147   000000 620006                    EAX0    0,QL
        10 000150   100000 440100                    SXL0    0,,PR1

      559     9157    1        IF NODE$ -> ETT.COUNT = %DONT_MESS THEN      /*#31538*/

   9157 10 000151   000000 471500                    LDP1    0,,PR0
        10 000152   100000 720100                    LXL0    0,,PR1
        10 000153   777777 100003                    CMPX0   -1,DU
        10 000154   000157 601000 10                 TNZ     s:9160

      560     9158    1          NODE$ -> ETT.COUNT = 0;

   9158 10 000155   000000 221003                    LDX1    0,DU
        10 000156   100000 441100                    SXL1    0,,PR1

      561     9159
      562     9160    1        IF NODE$ -> ETT.STATE > %REF_T OR NODE$ -> ETT.STATE = %IND THEN

   9160 10 000157   000000 471500                    LDP1    0,,PR0
        10 000160   100004 220100                    LDX0    4,,PR1
        10 000161   000005 100003                    CMPX0   5,DU
        10 000162   000165 603000 10                 TRC     s:9162
        10 000163   000003 100003                    CMPX0   3,DU
        10 000164   000221 601000 10                 TNZ     s:9167

      563     9161    2          DO;

      564     9162    2           RAT.COUNT(NODE$ -> ETT.STATE) = MAXIMUM (0, RAT.COUNT(NODE$ -> ETT.STATE) -
              9162                     COUNT);

PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:107  
   9162 10 000165   100004 221100                    LDX1    4,,PR1
        10 000166   100004 021100                    ADLX1   4,,PR1
        10 000167   000000 635011                    EAA     0,X1
        10 000170   000021 771000                    ARL     17
        10 000171   000000 636011                    EAQ     0,X1
        10 000172   000021 772000                    QRL     17
        10 000173   000002 236006 9                  LDQ     RAT+2,QL
        10 000174   300000 136100                    SBLQ    0,,PR3
        10 000175   000000 116003                    CMPQ    0,DU
        10 000176   000200 605000 10                 TPL     s:9162+11
        10 000177   000000 236003                    LDQ     0,DU
        10 000200   000002 756005 9                  STQ     RAT+2,AL

      565     9163    2            RAT.AWAITING(NODE$ -> ETT.STATE) = MAXIMUM(0, RAT.AWAITING(NODE$ -> ETT.
              9163                     STATE) - 1);

   9163 10 000201   000000 471500                    LDP1    0,,PR0
        10 000202   100004 220100                    LDX0    4,,PR1
        10 000203   100004 020100                    ADLX0   4,,PR1
        10 000204   000000 635010                    EAA     0,X0
        10 000205   000021 771000                    ARL     17
        10 000206   000000 636010                    EAQ     0,X0
        10 000207   000021 772000                    QRL     17
        10 000210   000001 236006 9                  LDQ     RAT+1,QL
        10 000211   000022 736000                    QLS     18
        10 000212   000022 732000                    QRS     18
        10 000213   000001 136007                    SBLQ    1,DL
        10 000214   000000 116003                    CMPQ    0,DU
        10 000215   000217 605000 10                 TPL     s:9163+14
        10 000216   000000 236003                    LDQ     0,DU
        10 000217   000000 621006                    EAX1    0,QL
        10 000220   000001 441005 9                  SXL1    RAT+1,AL

      566     9164    2          END;

      567     9165
      568     9166
PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:108  
      569     9167    1        IF NODE$ -> ETT.COUNT = 0 THEN

   9167 10 000221   000000 471500                    LDP1    0,,PR0
        10 000222   100000 720100                    LXL0    0,,PR1
        10 000223   000274 601000 10                 TNZ     s:9180

      570     9168    2          DO;

      571     9169    3            DO CASE(NODE$ -> ETT.STATE);    /* If in a register */

   9169 10 000224   100004 221100                    LDX1    4,,PR1
        10 000225   000034 101003                    CMPX1   28,DU
        10 000226   000230 602011 10                 TNC     s:9169+4,X1
        10 000227   000270 710000 10                 TRA     s:9177
        10 000230   000270 710000 10                 TRA     s:9177
        10 000231   000270 710000 10                 TRA     s:9177
        10 000232   000270 710000 10                 TRA     s:9177
        10 000233   000264 710000 10                 TRA     s:9173
        10 000234   000270 710000 10                 TRA     s:9177
        10 000235   000264 710000 10                 TRA     s:9173
        10 000236   000264 710000 10                 TRA     s:9173
        10 000237   000264 710000 10                 TRA     s:9173
        10 000240   000264 710000 10                 TRA     s:9173
        10 000241   000264 710000 10                 TRA     s:9173
        10 000242   000264 710000 10                 TRA     s:9173
        10 000243   000264 710000 10                 TRA     s:9173
        10 000244   000264 710000 10                 TRA     s:9173
        10 000245   000264 710000 10                 TRA     s:9173
        10 000246   000264 710000 10                 TRA     s:9173
        10 000247   000264 710000 10                 TRA     s:9173
        10 000250   000270 710000 10                 TRA     s:9177
        10 000251   000264 710000 10                 TRA     s:9173
        10 000252   000264 710000 10                 TRA     s:9173
        10 000253   000270 710000 10                 TRA     s:9177
        10 000254   000264 710000 10                 TRA     s:9173
        10 000255   000264 710000 10                 TRA     s:9173
        10 000256   000264 710000 10                 TRA     s:9173
PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:109  
        10 000257   000264 710000 10                 TRA     s:9173
        10 000260   000264 710000 10                 TRA     s:9173
        10 000261   000264 710000 10                 TRA     s:9173
        10 000262   000264 710000 10                 TRA     s:9173
        10 000263   000264 710000 10                 TRA     s:9173

      572     9170    3              CASE(%IND,%ARA,%ARQ,%ARAQ,%AREA,%AREAQ,

      573     9171    3                   %XR0,%XR1,%XR2,%XR3,%XR4,%XR5,%XR6,%XR7,
      574     9172    3                   %PR0,%PR1,%PR2,%PR3,%PR4,%PR5,%PR6,%PR7);
      575     9173    3                CALL Z8HU$POOL_PRIME(NODE$);

   9173 10 000264   200003 630500                    EPPR0   @NODE$,,AUTO
        10 000265   000002 631400 11                 EPPR1   2
        10 000266   000000 701000 xent               TSX1    Z8HU$POOL_PRIME
        10 000267   000000 011000                    NOP     0

      576     9174
      577     9175    3            END /* Case */;

      578     9176
      579     9177    2            CALL Z8HU$POOL(NODE$);

   9177 10 000270   200003 630500                    EPPR0   @NODE$,,AUTO
        10 000271   000002 631400 11                 EPPR1   2
        10 000272   000000 701000 xent               TSX1    Z8HU$POOL
        10 000273   000000 011000                    NOP     0

      580     9178    2          END;

      581     9179
      582     9180    1   END Z8HU$DEC_COUNT;

   9180 10 000274   000000 702200 xent               TSX2  ! X66_ARET
      583     9181        %EOD;

PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:110  
--  Include file information  --

   Z8H_SUPPORT.:Z8A6TOU  is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HU$DEC_COUNT.
PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:111  

 **** Variables and constants ****

  ****  Section 000 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 001 LblCom ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ETT$

  ****  Section 002 LblCom HEAD_ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_ETT$

  ****  Section 003 LblCom ETT_BUCKETS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 ETT_BUCKETS(0:511)

  ****  Section 004 LblCom ETT_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ETT_

PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:112  
  ****  Section 005 LblCom ST$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ST$

  ****  Section 006 LblCom ST_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ST_

  ****  Section 007 LblCom LTS$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 LONG_ITEM$                 0-0-0/w PTR         r     1 LTS$

  ****  Section 008 LblCom LTS_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 LTS_

  ****  Section 009 LblCom RAT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 RAT(0:27)

  ****  Auto variables  ****

PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:113  
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @COUNT                     3-0-0/w PTR         r     1 @NODE$
    11-0-0/b BIT               1 AORQ                      12-0-0/b BIT         r     1 CHECK_IMPLIED_REF
    *0-0-0/w SBIN        r     1 COUNT                     10-0-0/w UBIN              1 LAST_FREED
     7-0-0/w UBIN              1 LAST_USED                 *0-0-0/w PTR         r     1 NODE$
     5-0-0/w PTR         r     1 P$                         6-0-0/w UBIN              1 REGID

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN              1 LTS_STEP(0:37)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(396)         1 ALPHABET                   0-0-0/w STRC(144)         1 ALTER_LTS
     0-0-0/w STRC(3672)        1 ALT_KEY                    0-0-0/w STRC(36864)       1 ARGLIST
     0-0-0/w STRC(396)         1 ARRAY                      0-0-0/w STRC(180)         1 ARRAY_PRESET_LTS
     0-0-0/w STRC(288)         1 BASE_LTS                   0-0-0/w STRC(396)         1 BLOCK
     0-0-0/w STRC(144)         1 BT                         0-0-0/w STRC(396)         1 CD
     0-0-0/w STRC(288)         1 CD_LTS                     0-0-0/w CHAR(4096)        1 CHARS
     0-0-0/w STRC(396)         1 CLASS                      0-0-0/w STRC(396)         1 CONDITION
     0-0-0/w STRC(396)         1 CONST                      0-0-0/w STRC(72)          1 CONT
     0-0-0/w STRC(540)         1 CONTROL_NAME_LTS           0-0-0/w STRC(1872)        1 COPY_FILE
     0-0-0/w STRC(396)         1 DB                         0-0-0/w STRC(396)         1 DCB_
     0-0-0/w STRC(108)         1 DEPENDING_SIZE             0-0-0/w STRC(5472)        1 DIMS
     0-0-0/w STRC(396)         1 DML_ITEM                   0-0-0/w STRC(216)         1 DML_REC
     0-0-0/w STRC(180)   r     1 ETT                        0-0-0/w STRC(73836)       1 EVALUATE
     0-0-0/w STRC(396)         1 FD                         0-0-0/w STRC(1692)        1 FILE_LTS
     0-0-0/w STRC(108)         1 INDEXES                    0-0-0/w STRC(360)         1 INIT_LTS
     0-0-0/w STRC(396)         1 INTDEF                     0-0-0/w STRC(180)         1 IO_RESTORE_CHAIN
PL6.E3A0      #003=Z8HU$DEC_COUNT File=Z8HU.:Z8A6TSI                             SAT 08/09/97 13:28 Page:114  
     0-0-0/w STRC(144)         1 KEY                        0-0-0/w STRC(396)         1 LABEL
     0-0-0/w STRC(36864)       1 LCNST                      0-0-0/w STRC(72)          1 LONG
     0-0-0/w STRC              1 LTS                        0-0-0/w STRC(360)         1 LTSS
     0-0-0/w STRC(36936)       1 LTS_PTR_ARRAY              0-0-0/w STRC(396)         1 MNEMONIC
     0-0-0/w STRC(144)         1 NEL                        0-0-0/w STRC(216)         1 OPEN_LTS
     0-0-0/w STRC(36864)       1 PAGE                       0-0-0/w STRC(396)         1 PARA
     0-0-0/w STRC(144)         1 PRIME                      0-0-0/w STRC(396)         1 PROC_
     0-0-0/w STRC(396)         1 PROC_DEF                   0-0-0/w STRC(900)         1 PROC_SUPP
     0-0-0/w STRC(396)         1 RD                         0-0-0/w STRC(216)   r     1 REF
     0-0-0/w STRC(108)         1 RENAMES                    0-0-0/w STRC(720)         1 REPORT_01_LTS
     0-0-0/w STRC(432)         1 REPORT_ELEM_LTS            0-0-0/w STRC(252)         1 REPORT_GRP_LTS
     0-0-0/w STRC(1332)        1 REPORT_LTS                 0-0-0/w STRC(144)         1 RVA_LTS
     0-0-0/w STRC(396)         1 SCALAR                     0-0-0/w STRC(396)         1 SD
     0-0-0/w STRC(396)         1 SECTION                    0-0-0/w STRC(396)         1 SEGMENT
     0-0-0/w STRC(360)         1 SEGMENT_LTS                0-0-0/w STRC(396)   r     1 ST
     0-0-0/w STRC(252)         1 SUM_LTS                    0-0-0/w STRC(396)         1 SWITCH
     0-0-0/w STRC(396)         1 SYMBOLIC_CHAR              0-0-0/w STRC(396)         1 SYMDEF_
     0-0-0/w STRC(396)         1 SYMREF_                    0-0-0/w STRC(396)   r     1 TEMP
     0-0-0/d STRC(612)         1 USE                        0-0-0/w STRC(252)         1 USE_SUPP
     0-0-0/w STRC(396)         1 VARIABLE


   Procedure Z8HU$DEC_COUNT requires 189 words for executable code.
   Procedure Z8HU$DEC_COUNT requires 14 words of local(AUTO) storage.

PL6.E3A0      #004=Z8HU$POOL File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:29 Page:115  
      584        1        /*T***********************************************************/
      585        2        /*T*                                                         */
      586        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      587        4        /*T*                                                         */
      588        5        /*T***********************************************************/
      589        6        Z8HU$POOL:PROC(NODE$);
      590        7        /*F*
      591        8             NAME: Z8HU$POOL
      592        9             PURPOSE:
      593       10                  Memory management of most reusable constructs created in the
      594       11                  Generator.
      595       12             DESCRIPTION:
      596       13                  None.
      597       14        */
      598       15        /*D*
      599       16             NAME: Z8HU$POOL
      600       17             CALL:
      601       18                  CALL Z8HU$POOL
      602       19             PARAMETERS:
      603       20                  NODE$  - Points to triad that has many potential poolable items.
      604       21             ENVIRONMENT:
      605       22                  None.
      606       23             INPUT:
      607       24                  ETT table.
      608       25             OUTPUT:
      609       26                  None.
      610       27             SCRATCH:
      611       28                  None.
      612       29             DESCRIPTION:
      613       30                  If a REF item is "attached" to the triad pointed to by NODE$,
      614       31                  then check to see if this is a TEMP's REF item.  If so, check
      615       32                  to see if it is a candidate for pooling (even though the triad's
      616       33                  count is zero does not necessarily mean that the temp also has
      617       34                  exhausted its references).  After that checking and possible
      618       35                  pooling is complete, pool the REF item.  When the count on
      619       36                  a triad goes to zero, the REF item is *always* pooled.
      620       37
PL6.E3A0      #004=Z8HU$POOL File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:29 Page:116  
      621       38                  Now the triad is no longer in an evaluated state; mark it
      622       39                  to reflect this.
      623       40
      624       41                  It also is possible that this triad was generator created, and
      625       42                  therefore possibly marked as poolable.  If so, put it on the
      626       43                  free ETT list for reuse.
      627       44
      628       45                  That's all there is to it!
      629       46        */
      630       47
      631       48    1        DCL NODE$ PTR;
      632       49
      633       50             %EQU PHASE = 4;
      634       51             %INCLUDE Z8A_DEFC;
      635      119             %INCLUDE Z8A_SUPP_MAC;
      636     2519             %INCLUDE Z8H_EXT;
      637     2570             %INCLUDE Z8A_ETT;
      638     2871             %INCLUDE Z8A_ST;
      639     6530             %INCLUDE Z8A_LTS;
      640     8607             %INCLUDE Z9A_FLAGS;
      641     8621             %INCLUDE Z8H_SUPPORT;
      642     9069
      643     9070    1        IF NODE$ -> ETT.REF$ ~= ADDR(NIL) THEN
      644     9071    2          DO;
      645     9072    2            IF NODE$ -> ETT.REF$ -> REF.ST$ -> ST.ID = %TEMP THEN
      646     9073    2              IF NODE$ -> ETT.REF$ -> REF.ST$ -> TEMP.REFERENCES = 0 THEN
      647     9074    3                DO;
      648     9075                       %INSERT_INTO_DL_LIST(PTR=NODE$->ETT.REF$->REF.ST$,ITEM=TEMP,HEAD=
              9075                           HEAD_TEMP$);
      649     9103    3                  NUMBER_OF_TEMPS = NUMBER_OF_TEMPS - 1;
      650     9104    3                END;
      651     9105
      652     9106                 %INSERT_INTO_SL_LIST(PTR=NODE$ -> ETT.REF$,ITEM=REF,HEAD=HEAD_REF$);
      653     9119    2            NUMBER_OF_REFS = NUMBER_OF_REFS - 1;
      654     9120    2          END;
      655     9121
      656     9122    1        NODE$ -> ETT.STATE = %UNEVAL_T;
PL6.E3A0      #004=Z8HU$POOL File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:29 Page:117  
      657     9123    1        NODE$ -> ETT.REF$ = ADDR(NIL);
      658     9124    1        NODE$ -> ETT.B.REVERSED_RELATE = FALSE;
      659     9125
      660     9126    1        IF NODE$ -> ETT.B.POOLABLE THEN
      661     9127    2          DO;
      662     9128    2            NODE$ -> ETT.B.POOLABLE = FALSE;
      663     9129    2            NODE$ -> ETT.B.POOLED   = TRUE;
      664     9130
      665     9131                 %INSERT_INTO_SL_LIST( PTR   = NODE$ ,
      666     9132                                       ITEM  = ETT ,
      667     9133                                       HEAD  = HEAD_ETT$ ,
      668     9134                                       NEXT  = NEXT$ );
      669     9147    2          END;
      670     9148
      671     9149    1   END Z8HU$POOL;
      672     9150        %EOD;

PL6.E3A0      #004=Z8HU$POOL File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:29 Page:118  
--  Include file information  --

   Z8H_SUPPORT.:Z8A6TOU  is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_EXT.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HU$POOL.

   Procedure Z8HU$POOL requires 68 words for executable code.
   Procedure Z8HU$POOL requires 4 words of local(AUTO) storage.

PL6.E3A0      #004=Z8HU$POOL File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:29 Page:119  

 Object Unit name= Z8HU$POOL                                  File name= Z8HU.:Z8A6TOU
 UTS= AUG 09 '97 13:29:36.32 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  LblCom even  none     1      1  ITERATION
    1  LblCom even  none     1      1  NUMBER_OF_PRIMES
    2  LblCom even  none     1      1  NUMBER_OF_TEMPS
    3  LblCom even  none     1      1  NUMBER_OF_REFS
    4  LblCom even  none     1      1  GENERATING_PTRS
    5  LblCom even  none     1      1  USE_PROC_RETURN
    6  LblCom even  none     1      1  CURRENT_SCOPE$
    7  LblCom even  none     1      1  HEAD_REF$
    8  LblCom even  none     1      1  HEAD_TEMP$
    9  LblCom even  none     1      1  CONST$
   10  LblCom even  none     1      1  HEAD_PRIMES$
   11  LblCom even  none     1      1  CUR_LOOP_LEVEL
   12  LblCom even  none     2      2  PEPD
   13  LblCom even  none     1      1  ETT$
   14  LblCom even  none     1      1  HEAD_ETT$
   15  LblCom even  none   512   1000  ETT_BUCKETS
   16  LblCom even  none     5      5  ETT_
   17  LblCom even  none     1      1  ST$
   18  LblCom even  none     5      5  ST_
   19  LblCom even  none     1      1  LTS$
   20  LblCom even  none     5      5  LTS_
   21   Proc  even  none    68    104  Z8HU$POOL
   22  RoData even  none     3      3  Z8HU$POOL
PL6.E3A0      #004=Z8HU$POOL File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:29 Page:120  

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    21      0   yes            yes      Std        1  Z8HU$POOL

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    LTS_STEP

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID
PL6.E3A0      #004=Z8HU$POOL File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:29 Page:121  


      584        1        /*T***********************************************************/
      585        2        /*T*                                                         */
      586        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      587        4        /*T*                                                         */
      588        5        /*T***********************************************************/
      589        6        Z8HU$POOL:PROC(NODE$);

      6 21 000000   000000 700200 xent  Z8HU$POOL    TSX0  ! X66_AUTO_1
        21 000001   000004 000001                    ZERO    4,1

      590        7        /*F*
      591        8             NAME: Z8HU$POOL
      592        9             PURPOSE:
      593       10                  Memory management of most reusable constructs created in the
      594       11                  Generator.
      595       12             DESCRIPTION:
      596       13                  None.
      597       14        */
      598       15        /*D*
      599       16             NAME: Z8HU$POOL
      600       17             CALL:
      601       18                  CALL Z8HU$POOL
      602       19             PARAMETERS:
      603       20                  NODE$  - Points to triad that has many potential poolable items.
      604       21             ENVIRONMENT:
      605       22                  None.
      606       23             INPUT:
      607       24                  ETT table.
      608       25             OUTPUT:
      609       26                  None.
      610       27             SCRATCH:
      611       28                  None.
      612       29             DESCRIPTION:
      613       30                  If a REF item is "attached" to the triad pointed to by NODE$,
      614       31                  then check to see if this is a TEMP's REF item.  If so, check
      615       32                  to see if it is a candidate for pooling (even though the triad's
PL6.E3A0      #004=Z8HU$POOL File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:29 Page:122  
      616       33                  count is zero does not necessarily mean that the temp also has
      617       34                  exhausted its references).  After that checking and possible
      618       35                  pooling is complete, pool the REF item.  When the count on
      619       36                  a triad goes to zero, the REF item is *always* pooled.
      620       37
      621       38                  Now the triad is no longer in an evaluated state; mark it
      622       39                  to reflect this.
      623       40
      624       41                  It also is possible that this triad was generator created, and
      625       42                  therefore possibly marked as poolable.  If so, put it on the
      626       43                  free ETT list for reuse.
      627       44
      628       45                  That's all there is to it!
      629       46        */
      630       47
      631       48    1        DCL NODE$ PTR;
      632       49
      633       50             %EQU PHASE = 4;
      634       51             %INCLUDE Z8A_DEFC;
      635      119             %INCLUDE Z8A_SUPP_MAC;
      636     2519             %INCLUDE Z8H_EXT;
      637     2570             %INCLUDE Z8A_ETT;
      638     2871             %INCLUDE Z8A_ST;
      639     6530             %INCLUDE Z8A_LTS;
      640     8607             %INCLUDE Z9A_FLAGS;
      641     8621             %INCLUDE Z8H_SUPPORT;
      642     9069
      643     9070    1        IF NODE$ -> ETT.REF$ ~= ADDR(NIL) THEN

   9070 21 000002   200003 470500                    LDP0    @NODE$,,AUTO
        21 000003   000000 471500                    LDP1    0,,PR0
        21 000004   100003 236100                    LDQ     3,,PR1
        21 000005   000000 116000 22                 CMPQ    0
        21 000006   000054 600000 21                 TZE     s:9122

      644     9071    2          DO;

PL6.E3A0      #004=Z8HU$POOL File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:29 Page:123  
      645     9072    2            IF NODE$ -> ETT.REF$ -> REF.ST$ -> ST.ID = %TEMP THEN

   9072 21 000007   100003 473500                    LDP3    3,,PR1
        21 000010   300005 474500                    LDP4    5,,PR3
        21 000011   400000 220100                    LDX0    0,,PR4
        21 000012   000760 100003                    CMPX0   496,DU
        21 000013   000043 601000 21                 TNZ     s:9109

      646     9073    2              IF NODE$ -> ETT.REF$ -> REF.ST$ -> TEMP.REFERENCES = 0 THEN

   9073 21 000014   400004 221100                    LDX1    4,,PR4
        21 000015   000043 601000 21                 TNZ     s:9109

      647     9074    3                DO;

      648     9075                       %INSERT_INTO_DL_LIST(PTR=NODE$->ETT.REF$->REF.ST$,ITEM=TEMP,HEAD=
              9075                           HEAD_TEMP$);

   9078 21 000016   000000 236000 8                  LDQ     HEAD_TEMP$
        21 000017   400010 756100                    STQ     8,,PR4

   9079 21 000020   000000 471500                    LDP1    0,,PR0
        21 000021   100003 473500                    LDP3    3,,PR1
        21 000022   300005 474500                    LDP4    5,,PR3
        21 000023   000000 236000 22                 LDQ     0
        21 000024   400011 756100                    STQ     9,,PR4

   9080 21 000025   000000 236000 8                  LDQ     HEAD_TEMP$
        21 000026   000000 116000 22                 CMPQ    0
        21 000027   000035 600000 21                 TZE     s:9082

   9081 21 000030   000000 471500                    LDP1    0,,PR0
        21 000031   100003 473500                    LDP3    3,,PR1
        21 000032   300005 236100                    LDQ     5,,PR3
        21 000033   000000 474400 8                  LDP4    HEAD_TEMP$
        21 000034   400011 756100                    STQ     9,,PR4

PL6.E3A0      #004=Z8HU$POOL File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:29 Page:124  
   9082 21 000035   000000 471500                    LDP1    0,,PR0
        21 000036   100003 473500                    LDP3    3,,PR1
        21 000037   300005 236100                    LDQ     5,,PR3
        21 000040   000000 756000 8                  STQ     HEAD_TEMP$

      649     9103    3                  NUMBER_OF_TEMPS = NUMBER_OF_TEMPS - 1;

   9103 21 000041   000001 336007                    LCQ     1,DL
        21 000042   000000 056000 2                  ASQ     NUMBER_OF_TEMPS

      650     9104    3                END;

      651     9105
      652     9106                 %INSERT_INTO_SL_LIST(PTR=NODE$ -> ETT.REF$,ITEM=REF,HEAD=HEAD_REF$);

   9109 21 000043   000000 471500                    LDP1    0,,PR0
        21 000044   100003 473500                    LDP3    3,,PR1
        21 000045   000000 236000 7                  LDQ     HEAD_REF$
        21 000046   300002 756100                    STQ     2,,PR3

   9110 21 000047   000000 471500                    LDP1    0,,PR0
        21 000050   100003 236100                    LDQ     3,,PR1
        21 000051   000000 756000 7                  STQ     HEAD_REF$

      653     9119    2            NUMBER_OF_REFS = NUMBER_OF_REFS - 1;

   9119 21 000052   000001 336007                    LCQ     1,DL
        21 000053   000000 056000 3                  ASQ     NUMBER_OF_REFS

      654     9120    2          END;

      655     9121
      656     9122    1        NODE$ -> ETT.STATE = %UNEVAL_T;

   9122 21 000054   000000 471500                    LDP1    0,,PR0
        21 000055   000000 220003                    LDX0    0,DU
        21 000056   100004 740100                    STX0    4,,PR1
PL6.E3A0      #004=Z8HU$POOL File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:29 Page:125  

      657     9123    1        NODE$ -> ETT.REF$ = ADDR(NIL);

   9123 21 000057   000000 471500                    LDP1    0,,PR0
        21 000060   000000 236000 22                 LDQ     0
        21 000061   100003 756100                    STQ     3,,PR1

      658     9124    1        NODE$ -> ETT.B.REVERSED_RELATE = FALSE;

   9124 21 000062   000000 471500                    LDP1    0,,PR0
        21 000063   000001 236000 22                 LDQ     1
        21 000064   100004 356100                    ANSQ    4,,PR1

      659     9125
      660     9126    1        IF NODE$ -> ETT.B.POOLABLE THEN

   9126 21 000065   000000 471500                    LDP1    0,,PR0
        21 000066   100004 236100                    LDQ     4,,PR1
        21 000067   000001 316007                    CANQ    1,DL
        21 000070   000103 600000 21                 TZE     s:9149

      661     9127    2          DO;

      662     9128    2            NODE$ -> ETT.B.POOLABLE = FALSE;

   9128 21 000071   000002 236000 22                 LDQ     2
        21 000072   100004 356100                    ANSQ    4,,PR1

      663     9129    2            NODE$ -> ETT.B.POOLED   = TRUE;

   9129 21 000073   000000 471500                    LDP1    0,,PR0
        21 000074   000002 236007                    LDQ     2,DL
        21 000075   100004 256100                    ORSQ    4,,PR1

      664     9130
      665     9131                 %INSERT_INTO_SL_LIST( PTR   = NODE$ ,
      666     9132                                       ITEM  = ETT ,
PL6.E3A0      #004=Z8HU$POOL File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:29 Page:126  
      667     9133                                       HEAD  = HEAD_ETT$ ,
      668     9134                                       NEXT  = NEXT$ );

   9137 21 000076   000000 471500                    LDP1    0,,PR0
        21 000077   000000 236000 14                 LDQ     HEAD_ETT$
        21 000100   100003 756100                    STQ     3,,PR1

   9138 21 000101   000000 236100                    LDQ     0,,PR0
        21 000102   000000 756000 14                 STQ     HEAD_ETT$

      669     9147    2          END;

      670     9148
      671     9149    1   END Z8HU$POOL;

   9149 21 000103   000000 702200 xent               TSX2  ! X66_ARET
      672     9150        %EOD;

PL6.E3A0      #004=Z8HU$POOL File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:29 Page:127  
--  Include file information  --

   Z8H_SUPPORT.:Z8A6TOU  is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_EXT.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HU$POOL.
PL6.E3A0      #004=Z8HU$POOL File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:29 Page:128  

 **** Variables and constants ****

  ****  Section 000 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 001 LblCom NUMBER_OF_PRIMES

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 NUMBER_OF_PRIMES

  ****  Section 002 LblCom NUMBER_OF_TEMPS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 NUMBER_OF_TEMPS

  ****  Section 003 LblCom NUMBER_OF_REFS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 NUMBER_OF_REFS

  ****  Section 004 LblCom GENERATING_PTRS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT               1 GENERATING_PTRS

PL6.E3A0      #004=Z8HU$POOL File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:29 Page:129  
  ****  Section 005 LblCom USE_PROC_RETURN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 USE_PROC_RETURN

  ****  Section 006 LblCom CURRENT_SCOPE$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 CURRENT_SCOPE$

  ****  Section 007 LblCom HEAD_REF$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 HEAD_REF$

  ****  Section 008 LblCom HEAD_TEMP$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 HEAD_TEMP$

  ****  Section 009 LblCom CONST$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 CONST$

  ****  Section 010 LblCom HEAD_PRIMES$

PL6.E3A0      #004=Z8HU$POOL File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:29 Page:130  
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_PRIMES$

  ****  Section 011 LblCom CUR_LOOP_LEVEL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 CUR_LOOP_LEVEL

  ****  Section 012 LblCom PEPD

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC              1 PEPD(0:1)

  ****  Section 013 LblCom ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ETT$

  ****  Section 014 LblCom HEAD_ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 HEAD_ETT$

  ****  Section 015 LblCom ETT_BUCKETS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #004=Z8HU$POOL File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:29 Page:131  

     0-0-0/w PTR               1 ETT_BUCKETS(0:511)

  ****  Section 016 LblCom ETT_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ETT_

  ****  Section 017 LblCom ST$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ST$

  ****  Section 018 LblCom ST_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ST_

  ****  Section 019 LblCom LTS$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 LONG_ITEM$                 0-0-0/w PTR         r     1 LTS$

  ****  Section 020 LblCom LTS_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 LTS_
PL6.E3A0      #004=Z8HU$POOL File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:29 Page:132  

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @NODE$                    *0-0-0/w PTR         r     1 NODE$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN              1 LTS_STEP(0:37)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(396)         1 ALPHABET                   0-0-0/w STRC(144)         1 ALTER_LTS
     0-0-0/w STRC(3672)        1 ALT_KEY                    0-0-0/w STRC(36864)       1 ARGLIST
     0-0-0/w STRC(396)         1 ARRAY                      0-0-0/w STRC(180)         1 ARRAY_PRESET_LTS
     0-0-0/w STRC(288)         1 BASE_LTS                   0-0-0/w STRC(396)         1 BLOCK
     0-0-0/w STRC(144)         1 BT                         0-0-0/w STRC(396)         1 CD
     0-0-0/w STRC(288)         1 CD_LTS                     0-0-0/w CHAR(4096)        1 CHARS
     0-0-0/w STRC(396)         1 CLASS                      0-0-0/w STRC(396)         1 CONDITION
     0-0-0/w STRC(396)         1 CONST                      0-0-0/w STRC(72)          1 CONT
     0-0-0/w STRC(540)         1 CONTROL_NAME_LTS           0-0-0/w STRC(1872)        1 COPY_FILE
     0-0-0/w STRC(396)         1 DB                         0-0-0/w STRC(396)         1 DCB_
     0-0-0/w STRC(108)         1 DEPENDING_SIZE             0-0-0/w STRC(5472)        1 DIMS
     0-0-0/w STRC(396)         1 DML_ITEM                   0-0-0/w STRC(216)         1 DML_REC
     0-0-0/w STRC(180)   r     1 ETT                        0-0-0/w STRC(73836)       1 EVALUATE
     0-0-0/w STRC(396)         1 FD                         0-0-0/w STRC(1692)        1 FILE_LTS
     0-0-0/w STRC(108)         1 INDEXES                    0-0-0/w STRC(360)         1 INIT_LTS
     0-0-0/w STRC(396)         1 INTDEF                     0-0-0/w STRC(180)         1 IO_RESTORE_CHAIN
     0-0-0/w STRC(144)         1 KEY                        0-0-0/w STRC(396)         1 LABEL
PL6.E3A0      #004=Z8HU$POOL File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:29 Page:133  
     0-0-0/w STRC(36864)       1 LCNST                      0-0-0/w STRC(72)          1 LONG
     0-0-0/w STRC              1 LTS                        0-0-0/w STRC(360)         1 LTSS
     0-0-0/w STRC(36936)       1 LTS_PTR_ARRAY              0-0-0/w STRC(396)         1 MNEMONIC
     0-0-0/w STRC(144)         1 NEL                        0-0-0/w STRC(216)         1 OPEN_LTS
     0-0-0/w STRC(36864)       1 PAGE                       0-0-0/w STRC(396)         1 PARA
     0-0-0/w STRC(144)         1 PRIME                      0-0-0/w STRC(396)         1 PROC_
     0-0-0/w STRC(396)         1 PROC_DEF                   0-0-0/w STRC(900)         1 PROC_SUPP
     0-0-0/w STRC(396)         1 RD                         0-0-0/w STRC(216)   r     1 REF
     0-0-0/w STRC(108)         1 RENAMES                    0-0-0/w STRC(720)         1 REPORT_01_LTS
     0-0-0/w STRC(432)         1 REPORT_ELEM_LTS            0-0-0/w STRC(252)         1 REPORT_GRP_LTS
     0-0-0/w STRC(1332)        1 REPORT_LTS                 0-0-0/w STRC(144)         1 RVA_LTS
     0-0-0/w STRC(396)         1 SCALAR                     0-0-0/w STRC(396)         1 SD
     0-0-0/w STRC(396)         1 SECTION                    0-0-0/w STRC(396)         1 SEGMENT
     0-0-0/w STRC(360)         1 SEGMENT_LTS                0-0-0/w STRC(396)   r     1 ST
     0-0-0/w STRC(252)         1 SUM_LTS                    0-0-0/w STRC(396)         1 SWITCH
     0-0-0/w STRC(396)         1 SYMBOLIC_CHAR              0-0-0/w STRC(396)         1 SYMDEF_
     0-0-0/w STRC(396)         1 SYMREF_                    0-0-0/w STRC(396)   r     1 TEMP
     0-0-0/d STRC(612)         1 USE                        0-0-0/w STRC(252)         1 USE_SUPP
     0-0-0/w STRC(396)         1 VARIABLE


   Procedure Z8HU$POOL requires 68 words for executable code.
   Procedure Z8HU$POOL requires 4 words of local(AUTO) storage.

PL6.E3A0      #005=Z8HU$POOL_PRIME File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:30 Page:134  
      673        1        /*T***********************************************************/
      674        2        /*T*                                                         */
      675        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      676        4        /*T*                                                         */
      677        5        /*T***********************************************************/
      678        6        Z8HU$POOL_PRIME:PROC(NODE$);
      679        7        /*F*
      680        8             NAME: Z8HU$POOL_PRIME
      681        9             PURPOSE:
      682       10                  To relieve a triad of its register state, without affecting any
      683       11                  storage state that may exist.
      684       12             DESCRIPTION:
      685       13                  None.
      686       14        */
      687       15        /*D*
      688       16             NAME: Z8HU$POOL_PRIME
      689       17             CALL:
      690       18                  CALL Z8HU$POOL_PRIME(NODE$);
      691       19             PARAMETERS:
      692       20                  NODE$  - Points to ETT item that no longer deserves to be
      693       21                           register contained.
      694       22             ENVIRONMENT:
      695       23                  None.
      696       24             INPUT:
      697       25                  ETT item.
      698       26             OUTPUT:
      699       27                  None.
      700       28             SCRATCH:
      701       29                  P$   - Getting around the inefficiencies of PL6 again!  This holds
      702       30                         a pointer to the prime list for the triad's register.
      703       31             DESCRIPTION:
      704       32                  The triad passed in is assumed to be register contained.
      705       33
      706       34                  Find the PRIME item that points to this NODE$.  When found
      707       35                  (and it best be found), pool that PRIME item; leave all other
      708       36                  PRIME items intact.  Just because one of the guys in the list
      709       37                  is spoiled (count went to zero), doesn't mean I want to throw
PL6.E3A0      #005=Z8HU$POOL_PRIME File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:30 Page:135  
      710       38                  out the whole bunch of 'em.
      711       39
      712       40                  Now, what if there was only one guy on the list to begin with?
      713       41                  I can't call FREE_REGISTER again, we'll get into a loop. So
      714       42                  just mark it unused.
      715       43        */
      716       44
      717       45    1          DCL NODE$ PTR;
      718       46    1          DCL P$ PTR;
      719       47    1          DCL REGISTER SBIN WORD;
      720       48
      721       49               %EQU PHASE = 4;
      722       50               %INCLUDE Z8A_DEFC;
      723      118               %INCLUDE Z8A_SUPP_MAC;
      724     2518               %INCLUDE Z8H_EXT;
      725     2569               %INCLUDE Z8A_ETT;
      726     2870             %INCLUDE Z8A_LTS;
      727     4947               %INCLUDE Z8H_RAT;
      728     5038             %INCLUDE Z9A_FLAGS;
      729     5052               %INCLUDE Z8H_SUPPORT;
      730     5500
      731     5501    1          REGISTER = NODE$ -> ETT.STATE;
      732     5502    1          P$ = RAT.PRIMES(REGISTER);
      733     5503
      734     5504    2          DO WHILE P$ ~= ADDR(NIL);
      735     5505    2            IF NODE$ = P$ -> PRIME.TRIAD THEN
      736     5506    3              DO;
      737     5507                     %REMOVE_FROM_DL_LIST(PTR=P$,ITEM=PRIME,HEAD="RAT.PRIMES(REGISTER)");
      738     5529
      739     5530                     %INSERT_INTO_SL_LIST(PTR=P$,ITEM=PRIME,HEAD=HEAD_PRIMES$);
      740     5543
      741     5544    3                NUMBER_OF_PRIMES = NUMBER_OF_PRIMES - 1;
      742     5545
      743     5546    3                P$ = ADDR(NIL);
      744     5547    3              END;
      745     5548    2            ELSE
      746     5549    2              P$ = P$ -> PRIME.NEXT;
PL6.E3A0      #005=Z8HU$POOL_PRIME File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:30 Page:136  
      747     5550    2          END /* Do Until */;
      748     5551
      749     5552    1          IF NODE$ -> ETT.REF$ = ADDR(NIL) THEN
      750     5553    1            NODE$ -> ETT.STATE = %UNEVAL_T;
      751     5554    1          ELSE
      752     5555    1            NODE$ -> ETT.STATE = %REF_T;
      753     5556
      754     5557    1   END Z8HU$POOL_PRIME;
      755     5558        %EOD;

PL6.E3A0      #005=Z8HU$POOL_PRIME File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:30 Page:137  
--  Include file information  --

   Z8H_SUPPORT.:Z8A6TOU  is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_EXT.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HU$POOL_PRIME.

   Procedure Z8HU$POOL_PRIME requires 72 words for executable code.
   Procedure Z8HU$POOL_PRIME requires 10 words of local(AUTO) storage.

PL6.E3A0      #005=Z8HU$POOL_PRIME File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:30 Page:138  

 Object Unit name= Z8HU$POOL_PRIME                            File name= Z8HU.:Z8A6TOU
 UTS= AUG 09 '97 13:30:44.16 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  LblCom even  none     1      1  ITERATION
    1  LblCom even  none     1      1  NUMBER_OF_PRIMES
    2  LblCom even  none     1      1  NUMBER_OF_TEMPS
    3  LblCom even  none     1      1  NUMBER_OF_REFS
    4  LblCom even  none     1      1  GENERATING_PTRS
    5  LblCom even  none     1      1  USE_PROC_RETURN
    6  LblCom even  none     1      1  CURRENT_SCOPE$
    7  LblCom even  none     1      1  HEAD_REF$
    8  LblCom even  none     1      1  HEAD_TEMP$
    9  LblCom even  none     1      1  CONST$
   10  LblCom even  none     1      1  HEAD_PRIMES$
   11  LblCom even  none     1      1  CUR_LOOP_LEVEL
   12  LblCom even  none     2      2  PEPD
   13  LblCom even  none     1      1  ETT$
   14  LblCom even  none     1      1  HEAD_ETT$
   15  LblCom even  none   512   1000  ETT_BUCKETS
   16  LblCom even  none     5      5  ETT_
   17  LblCom even  none     1      1  LTS$
   18  LblCom even  none     5      5  LTS_
   19  LblCom even  none   112    160  RAT
   20   Proc  even  none    72    110  Z8HU$POOL_PRIME
   21  RoData even  none     1      1  Z8HU$POOL_PRIME

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    20      0   yes            yes      Std        1  Z8HU$POOL_PRIME
PL6.E3A0      #005=Z8HU$POOL_PRIME File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:30 Page:139  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    LTS_STEP

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID
PL6.E3A0      #005=Z8HU$POOL_PRIME File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:30 Page:140  


      673        1        /*T***********************************************************/
      674        2        /*T*                                                         */
      675        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      676        4        /*T*                                                         */
      677        5        /*T***********************************************************/
      678        6        Z8HU$POOL_PRIME:PROC(NODE$);

      6 20 000000   000000 700200 xent  Z8HU$POOL_P* TSX0  ! X66_AUTO_1
        20 000001   000012 000001                    ZERO    10,1

      679        7        /*F*
      680        8             NAME: Z8HU$POOL_PRIME
      681        9             PURPOSE:
      682       10                  To relieve a triad of its register state, without affecting any
      683       11                  storage state that may exist.
      684       12             DESCRIPTION:
      685       13                  None.
      686       14        */
      687       15        /*D*
      688       16             NAME: Z8HU$POOL_PRIME
      689       17             CALL:
      690       18                  CALL Z8HU$POOL_PRIME(NODE$);
      691       19             PARAMETERS:
      692       20                  NODE$  - Points to ETT item that no longer deserves to be
      693       21                           register contained.
      694       22             ENVIRONMENT:
      695       23                  None.
      696       24             INPUT:
      697       25                  ETT item.
      698       26             OUTPUT:
      699       27                  None.
      700       28             SCRATCH:
      701       29                  P$   - Getting around the inefficiencies of PL6 again!  This holds
      702       30                         a pointer to the prime list for the triad's register.
      703       31             DESCRIPTION:
      704       32                  The triad passed in is assumed to be register contained.
PL6.E3A0      #005=Z8HU$POOL_PRIME File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:30 Page:141  
      705       33
      706       34                  Find the PRIME item that points to this NODE$.  When found
      707       35                  (and it best be found), pool that PRIME item; leave all other
      708       36                  PRIME items intact.  Just because one of the guys in the list
      709       37                  is spoiled (count went to zero), doesn't mean I want to throw
      710       38                  out the whole bunch of 'em.
      711       39
      712       40                  Now, what if there was only one guy on the list to begin with?
      713       41                  I can't call FREE_REGISTER again, we'll get into a loop. So
      714       42                  just mark it unused.
      715       43        */
      716       44
      717       45    1          DCL NODE$ PTR;
      718       46    1          DCL P$ PTR;
      719       47    1          DCL REGISTER SBIN WORD;
      720       48
      721       49               %EQU PHASE = 4;
      722       50               %INCLUDE Z8A_DEFC;
      723      118               %INCLUDE Z8A_SUPP_MAC;
      724     2518               %INCLUDE Z8H_EXT;
      725     2569               %INCLUDE Z8A_ETT;
      726     2870             %INCLUDE Z8A_LTS;
      727     4947               %INCLUDE Z8H_RAT;
      728     5038             %INCLUDE Z9A_FLAGS;
      729     5052               %INCLUDE Z8H_SUPPORT;
      730     5500
      731     5501    1          REGISTER = NODE$ -> ETT.STATE;

   5501 20 000002   200003 470500                    LDP0    @NODE$,,AUTO
        20 000003   000000 471500                    LDP1    0,,PR0
        20 000004   100004 236100                    LDQ     4,,PR1
        20 000005   000022 772000                    QRL     18
        20 000006   200005 756100                    STQ     REGISTER,,AUTO

      732     5502    1          P$ = RAT.PRIMES(REGISTER);

   5502 20 000007   200005 235100                    LDA     REGISTER,,AUTO
PL6.E3A0      #005=Z8HU$POOL_PRIME File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:30 Page:142  
        20 000010   000002 735000                    ALS     2
        20 000011   000000 236005 19                 LDQ     RAT,AL
        20 000012   200004 756100                    STQ     P$,,AUTO

      733     5503
      734     5504    2          DO WHILE P$ ~= ADDR(NIL);

   5504 20 000013   000074 710000 20                 TRA     s:5550

      735     5505    2            IF NODE$ = P$ -> PRIME.TRIAD THEN

   5505 20 000014   200003 470500                    LDP0    @NODE$,,AUTO
        20 000015   200004 471500                    LDP1    P$,,AUTO
        20 000016   000000 236100                    LDQ     0,,PR0
        20 000017   100001 116100                    CMPQ    1,,PR1
        20 000020   000072 601000 20                 TNZ     s:5549

      736     5506    3              DO;

      737     5507                     %REMOVE_FROM_DL_LIST(PTR=P$,ITEM=PRIME,HEAD="RAT.PRIMES(REGISTER)");

   5509 20 000021   100003 236100                    LDQ     3,,PR1
        20 000022   000000 116000 21                 CMPQ    0
        20 000023   000040 601000 20                 TNZ     s:5517

   5511 20 000024   100002 236100                    LDQ     2,,PR1
        20 000025   000000 116000 21                 CMPQ    0
        20 000026   000034 601000 20                 TNZ     s:5514

   5512 20 000027   200005 235100                    LDA     REGISTER,,AUTO
        20 000030   000002 735000                    ALS     2
        20 000031   000000 236000 21                 LDQ     0
        20 000032   000000 756005 19                 STQ     RAT,AL
        20 000033   000061 710000 20                 TRA     s:5533

   5514 20 000034   100002 473500                    LDP3    2,,PR1
        20 000035   000000 236000 21                 LDQ     0
PL6.E3A0      #005=Z8HU$POOL_PRIME File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:30 Page:143  
        20 000036   300003 756100                    STQ     3,,PR3

   5515 20 000037   000061 710000 20                 TRA     s:5533

   5517 20 000040   200005 235100                    LDA     REGISTER,,AUTO
        20 000041   000002 735000                    ALS     2
        20 000042   200004 236100                    LDQ     P$,,AUTO
        20 000043   000000 116005 19                 CMPQ    RAT,AL
        20 000044   000053 601000 20                 TNZ     s:5524

   5519 20 000045   100003 473500                    LDP3    3,,PR1
        20 000046   000000 236000 21                 LDQ     0
        20 000047   300002 756100                    STQ     2,,PR3

   5520 20 000050   100003 236100                    LDQ     3,,PR1
        20 000051   000000 756005 19                 STQ     RAT,AL

   5521 20 000052   000061 710000 20                 TRA     s:5533

   5524 20 000053   100003 473500                    LDP3    3,,PR1
        20 000054   100002 236100                    LDQ     2,,PR1
        20 000055   300002 756100                    STQ     2,,PR3

   5525 20 000056   100002 473500                    LDP3    2,,PR1
        20 000057   100003 236100                    LDQ     3,,PR1
        20 000060   300003 756100                    STQ     3,,PR3

      738     5529
      739     5530                     %INSERT_INTO_SL_LIST(PTR=P$,ITEM=PRIME,HEAD=HEAD_PRIMES$);

   5533 20 000061   000000 236000 10                 LDQ     HEAD_PRIMES$
        20 000062   100003 756100                    STQ     3,,PR1

   5534 20 000063   200004 236100                    LDQ     P$,,AUTO
        20 000064   000000 756000 10                 STQ     HEAD_PRIMES$

      740     5543
PL6.E3A0      #005=Z8HU$POOL_PRIME File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:30 Page:144  
      741     5544    3                NUMBER_OF_PRIMES = NUMBER_OF_PRIMES - 1;

   5544 20 000065   000001 336007                    LCQ     1,DL
        20 000066   000000 056000 1                  ASQ     NUMBER_OF_PRIMES

      742     5545
      743     5546    3                P$ = ADDR(NIL);

   5546 20 000067   000000 236000 21                 LDQ     0
        20 000070   200004 756100                    STQ     P$,,AUTO

      744     5547    3              END;

   5547 20 000071   000074 710000 20                 TRA     s:5550

      745     5548    2            ELSE
      746     5549    2              P$ = P$ -> PRIME.NEXT;

   5549 20 000072   100003 236100                    LDQ     3,,PR1
        20 000073   200004 756100                    STQ     P$,,AUTO

      747     5550    2          END /* Do Until */;

   5550 20 000074   000000 116000 21                 CMPQ    0
        20 000075   000014 601000 20                 TNZ     s:5505

      748     5551
      749     5552    1          IF NODE$ -> ETT.REF$ = ADDR(NIL) THEN

   5552 20 000076   000000 471500                    LDP1    0,,PR0
        20 000077   100003 236100                    LDQ     3,,PR1
        20 000100   000000 116000 21                 CMPQ    0
        20 000101   000105 601000 20                 TNZ     s:5555

      750     5553    1            NODE$ -> ETT.STATE = %UNEVAL_T;

   5553 20 000102   000000 220003                    LDX0    0,DU
PL6.E3A0      #005=Z8HU$POOL_PRIME File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:30 Page:145  
        20 000103   100004 740100                    STX0    4,,PR1
        20 000104   000107 710000 20                 TRA     s:5557

      751     5554    1          ELSE
      752     5555    1            NODE$ -> ETT.STATE = %REF_T;

   5555 20 000105   000004 220003                    LDX0    4,DU
        20 000106   100004 740100                    STX0    4,,PR1

      753     5556
      754     5557    1   END Z8HU$POOL_PRIME;

   5557 20 000107   000000 702200 xent               TSX2  ! X66_ARET
      755     5558        %EOD;

PL6.E3A0      #005=Z8HU$POOL_PRIME File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:30 Page:146  
--  Include file information  --

   Z8H_SUPPORT.:Z8A6TOU  is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_EXT.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HU$POOL_PRIME.
PL6.E3A0      #005=Z8HU$POOL_PRIME File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:30 Page:147  

 **** Variables and constants ****

  ****  Section 000 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 001 LblCom NUMBER_OF_PRIMES

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 NUMBER_OF_PRIMES

  ****  Section 002 LblCom NUMBER_OF_TEMPS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 NUMBER_OF_TEMPS

  ****  Section 003 LblCom NUMBER_OF_REFS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 NUMBER_OF_REFS

  ****  Section 004 LblCom GENERATING_PTRS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT               1 GENERATING_PTRS

PL6.E3A0      #005=Z8HU$POOL_PRIME File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:30 Page:148  
  ****  Section 005 LblCom USE_PROC_RETURN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 USE_PROC_RETURN

  ****  Section 006 LblCom CURRENT_SCOPE$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 CURRENT_SCOPE$

  ****  Section 007 LblCom HEAD_REF$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_REF$

  ****  Section 008 LblCom HEAD_TEMP$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_TEMP$

  ****  Section 009 LblCom CONST$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 CONST$

  ****  Section 010 LblCom HEAD_PRIMES$

PL6.E3A0      #005=Z8HU$POOL_PRIME File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:30 Page:149  
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 HEAD_PRIMES$

  ****  Section 011 LblCom CUR_LOOP_LEVEL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 CUR_LOOP_LEVEL

  ****  Section 012 LblCom PEPD

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC              1 PEPD(0:1)

  ****  Section 013 LblCom ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ETT$

  ****  Section 014 LblCom HEAD_ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_ETT$

  ****  Section 015 LblCom ETT_BUCKETS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #005=Z8HU$POOL_PRIME File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:30 Page:150  

     0-0-0/w PTR               1 ETT_BUCKETS(0:511)

  ****  Section 016 LblCom ETT_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ETT_

  ****  Section 017 LblCom LTS$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 LONG_ITEM$                 0-0-0/w PTR         r     1 LTS$

  ****  Section 018 LblCom LTS_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 LTS_

  ****  Section 019 LblCom RAT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 RAT(0:27)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @NODE$                    11-0-0/b BIT               1 AORQ
PL6.E3A0      #005=Z8HU$POOL_PRIME File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:30 Page:151  
    10-0-0/w UBIN              1 LAST_FREED                 7-0-0/w UBIN              1 LAST_USED
    *0-0-0/w PTR         r     1 NODE$                      4-0-0/w PTR         r     1 P$
     6-0-0/w UBIN              1 REGID                      5-0-0/w SBIN        r     1 REGISTER

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN              1 LTS_STEP(0:37)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)         1 ALTER_LTS                  0-0-0/w STRC(3672)        1 ALT_KEY
     0-0-0/w STRC(36864)       1 ARGLIST                    0-0-0/w STRC(180)         1 ARRAY_PRESET_LTS
     0-0-0/w STRC(288)         1 BASE_LTS                   0-0-0/w STRC(144)         1 BT
     0-0-0/w STRC(288)         1 CD_LTS                     0-0-0/w CHAR(4096)        1 CHARS
     0-0-0/w STRC(72)          1 CONT                       0-0-0/w STRC(540)         1 CONTROL_NAME_LTS
     0-0-0/w STRC(1872)        1 COPY_FILE                  0-0-0/w STRC(108)         1 DEPENDING_SIZE
     0-0-0/w STRC(5472)        1 DIMS                       0-0-0/w STRC(216)         1 DML_REC
     0-0-0/w STRC(180)   r     1 ETT                        0-0-0/w STRC(73836)       1 EVALUATE
     0-0-0/w STRC(1692)        1 FILE_LTS                   0-0-0/w STRC(108)         1 INDEXES
     0-0-0/w STRC(360)         1 INIT_LTS                   0-0-0/w STRC(180)         1 IO_RESTORE_CHAIN
     0-0-0/w STRC(144)         1 KEY                        0-0-0/w STRC(36864)       1 LCNST
     0-0-0/w STRC(72)          1 LONG                       0-0-0/w STRC              1 LTS
     0-0-0/w STRC(360)         1 LTSS                       0-0-0/w STRC(36936)       1 LTS_PTR_ARRAY
     0-0-0/w STRC(144)         1 NEL                        0-0-0/w STRC(216)         1 OPEN_LTS
     0-0-0/w STRC(36864)       1 PAGE                       0-0-0/w STRC(144)   r     1 PRIME
     0-0-0/w STRC(900)         1 PROC_SUPP                  0-0-0/w STRC(216)         1 REF
     0-0-0/w STRC(108)         1 RENAMES                    0-0-0/w STRC(720)         1 REPORT_01_LTS
     0-0-0/w STRC(432)         1 REPORT_ELEM_LTS            0-0-0/w STRC(252)         1 REPORT_GRP_LTS
     0-0-0/w STRC(1332)        1 REPORT_LTS                 0-0-0/w STRC(144)         1 RVA_LTS
     0-0-0/w STRC(360)         1 SEGMENT_LTS                0-0-0/w STRC(252)         1 SUM_LTS
     0-0-0/d STRC(612)         1 USE                        0-0-0/w STRC(252)         1 USE_SUPP
PL6.E3A0      #005=Z8HU$POOL_PRIME File=Z8HU.:Z8A6TSI                            SAT 08/09/97 13:30 Page:152  


   Procedure Z8HU$POOL_PRIME requires 72 words for executable code.
   Procedure Z8HU$POOL_PRIME requires 10 words of local(AUTO) storage.

PL6.E3A0      #006=Z8HU$FORCE_BOUNDARY File=Z8HU.:Z8A6TSI                        SAT 08/09/97 13:31 Page:153  
      756        1        /*T***********************************************************/
      757        2        /*T*                                                         */
      758        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      759        4        /*T*                                                         */
      760        5        /*T***********************************************************/
      761        6        /*F*
      762        7             NAME: Z8HU$FORCE_BOUNDARY
      763        8             PURPOSE:
      764        9                  To assure that the word generated after this routine ends up
      765       10                  on a given boundary.  The boundary is specified by the first
      766       11                  parameter.
      767       12             DESCRIPTION:
      768       13                  The words that are used to fill in the void are NOP instructions
      769       14                  so that they are valid for both data and procedure area.  The
      770       15                  DL tag is used for a little more speed when used in procedure
      771       16                  area.
      772       17        */
      773       18        /*D*
      774       19             NAME: Z8HU$FORCE_BOUNDARY
      775       20             CALL:
      776       21                  CALL Z8HU$FORCE_BOUNDARY(=boundary);
      777       22             PARAMETERS:
      778       23                  BOUNDARY
      779       24                       Boundary we need to fill up *to*. Even, odd, mod eight etc.
      780       25             INTERFACE:
      781       26                  none.
      782       27             ENVIRONMENT:
      783       28                  None.
      784       29             INPUT:
      785       30                  None.
      786       31             OUTPUT:
      787       32                  None.
      788       33             SCRATCH:
      789       34                  N
      790       35                       Number of words to fill in order to leave us at given boundary.
      791       36                  I
      792       37                       Do loop index.
PL6.E3A0      #006=Z8HU$FORCE_BOUNDARY File=Z8HU.:Z8A6TSI                        SAT 08/09/97 13:31 Page:154  
      793       38             DESCRIPTION:
      794       39                  As above.
      795       40        */
      796       41        Z8HU$FORCE_BOUNDARY:PROC(BOUNDARY);
      797       42
      798       43    1        DCL BOUNDARY SBIN WORD;
      799       44    1        DCL N        SBIN WORD;
      800       45    1        DCL I        SBIN WORD;
      801       46
      802       47             %EQU PHASE = 4;
      803       48             %INCLUDE Z8A_DEFC;
      804      116             %INCLUDE Z8A_SUPP_MAC;
      805     2516             %INCLUDE Z8A_OBJ;
      806     3013             %INCLUDE Z8H_CODE;
      807     3143             %INCLUDE Z8A_ST;
      808     6802             %INCLUDE Z8H_OPCODES;
      809     7305             %INCLUDE Z8H_TEMP;
      810     7353             %INCLUDE Z8A_ERR_NUMS;
      811     8117    1        DCL Z8AE$ERROR ENTRY(12);
      812     8118
      813     8119
      814     8120
      815     8121    1        IF BOUNDARY = %EVEN      THEN
      816     8122    1            N = MOD(CURRENT_BLOCK$ -> BLOCK.SIZE,2);
      817     8123    1        ELSE
      818     8124    1            N = 0;
      819     8125
      820     8126
      821     8127    2        DO I = 0 TO N - 1;
      822     8128    2          INST_WORD = '0'O;
      823     8129    2          INST_WORD.LOW.OP_CODE = %NOP_OP;
      824     8130    2          INST_WORD.LOW.MF.TAG = %DL;
      825     8131
      826     8132               %NEW_WORD( @OU_WORD = INST_WORD );
      827     8179    2        END;
      828     8180
      829     8181    1   END Z8HU$FORCE_BOUNDARY;
PL6.E3A0      #006=Z8HU$FORCE_BOUNDARY File=Z8HU.:Z8A6TSI                        SAT 08/09/97 13:31 Page:155  
      830     8182        %EOD;

PL6.E3A0      #006=Z8HU$FORCE_BOUNDARY File=Z8HU.:Z8A6TSI                        SAT 08/09/97 13:31 Page:156  
--  Include file information  --

   Z8A_ERR_NUMS.:Z8A6TOU  is referenced.
   Z8H_TEMP.:Z8A6TOU  is referenced.
   Z8H_OPCODES.:Z8A6TOU  is referenced.
   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_CODE.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_OBJ.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HU$FORCE_BOUNDARY.

   Procedure Z8HU$FORCE_BOUNDARY requires 70 words for executable code.
   Procedure Z8HU$FORCE_BOUNDARY requires 32 words of local(AUTO) storage.

PL6.E3A0      #006=Z8HU$FORCE_BOUNDARY File=Z8HU.:Z8A6TSI                        SAT 08/09/97 13:31 Page:157  

 Object Unit name= Z8HU$FORCE_BOUNDARY                        File name= Z8HU.:Z8A6TOU
 UTS= AUG 09 '97 13:31:32.64 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  LblCom even  none     1      1  ITERATION
    1  LblCom even  none     1      1  OBJ$
    2  LblCom even  none     1      1  PAGING_OBJ
    3  LblCom even  none     1      1  OBJ_PAGE_COUNT
    4  LblCom even  none     1      1  OBJ_FINISHED
    5  LblCom even  none     1      1  OBJ_SEG_SIZE
    6  LblCom even  none     1      1  OBJ_TOP_NEW_SEG
    7  LblCom even  none     1      1  OBJ_LAST_REGULAR_PAGE
    8  LblCom even  none     5      5  OBJ_
    9   Data  even  none     1      1  Z8HU$FORCE_BOUNDARY
   10  LblCom even  none     1      1  CURRENT_BLOCK$
   11  LblCom even  none     1      1  ROOT_PROC_BLOCK$
   12  LblCom even  none     1      1  ST$
   13  LblCom even  none     5      5  ST_
   14   Proc  even  none    70    106  Z8HU$FORCE_BOUNDARY
   15  RoData even  none     7      7  Z8HU$FORCE_BOUNDARY

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    14      0   yes            yes      Std        1  Z8HU$FORCE_BOUNDARY
PL6.E3A0      #006=Z8HU$FORCE_BOUNDARY File=Z8HU.:Z8A6TSI                        SAT 08/09/97 13:31 Page:158  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 Z9HF$WRITE_OBJ_PAGE
         yes           Std       0 Z9HF$GET_OBJ_PAGE
         yes           Std      12 Z8AE$ERROR
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    OBJ_STEP

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #006=Z8HU$FORCE_BOUNDARY File=Z8HU.:Z8A6TSI                        SAT 08/09/97 13:31 Page:159  


      756        1        /*T***********************************************************/
      757        2        /*T*                                                         */
      758        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      759        4        /*T*                                                         */
      760        5        /*T***********************************************************/
      761        6        /*F*
      762        7             NAME: Z8HU$FORCE_BOUNDARY
      763        8             PURPOSE:
      764        9                  To assure that the word generated after this routine ends up
      765       10                  on a given boundary.  The boundary is specified by the first
      766       11                  parameter.
      767       12             DESCRIPTION:
      768       13                  The words that are used to fill in the void are NOP instructions
      769       14                  so that they are valid for both data and procedure area.  The
      770       15                  DL tag is used for a little more speed when used in procedure
      771       16                  area.
      772       17        */
      773       18        /*D*
      774       19             NAME: Z8HU$FORCE_BOUNDARY
      775       20             CALL:
      776       21                  CALL Z8HU$FORCE_BOUNDARY(=boundary);
      777       22             PARAMETERS:
      778       23                  BOUNDARY
      779       24                       Boundary we need to fill up *to*. Even, odd, mod eight etc.
      780       25             INTERFACE:
      781       26                  none.
      782       27             ENVIRONMENT:
      783       28                  None.
      784       29             INPUT:
      785       30                  None.
      786       31             OUTPUT:
      787       32                  None.
      788       33             SCRATCH:
      789       34                  N
      790       35                       Number of words to fill in order to leave us at given boundary.
      791       36                  I
PL6.E3A0      #006=Z8HU$FORCE_BOUNDARY File=Z8HU.:Z8A6TSI                        SAT 08/09/97 13:31 Page:160  
      792       37                       Do loop index.
      793       38             DESCRIPTION:
      794       39                  As above.
      795       40        */
      796       41        Z8HU$FORCE_BOUNDARY:PROC(BOUNDARY);

     41 14 000000   000000 700200 xent  Z8HU$FORCE_* TSX0  ! X66_AUTO_1
        14 000001   000040 000001                    ZERO    32,1

      797       42
      798       43    1        DCL BOUNDARY SBIN WORD;
      799       44    1        DCL N        SBIN WORD;
      800       45    1        DCL I        SBIN WORD;
      801       46
      802       47             %EQU PHASE = 4;
      803       48             %INCLUDE Z8A_DEFC;
      804      116             %INCLUDE Z8A_SUPP_MAC;
      805     2516             %INCLUDE Z8A_OBJ;
      806     3013             %INCLUDE Z8H_CODE;
      807     3143             %INCLUDE Z8A_ST;
      808     6802             %INCLUDE Z8H_OPCODES;
      809     7305             %INCLUDE Z8H_TEMP;
      810     7353             %INCLUDE Z8A_ERR_NUMS;
      811     8117    1        DCL Z8AE$ERROR ENTRY(12);
      812     8118
      813     8119
      814     8120
      815     8121    1        IF BOUNDARY = %EVEN      THEN

   8121 14 000002   200003 470500                    LDP0    @BOUNDARY,,AUTO
        14 000003   000000 235100                    LDA     0,,PR0
        14 000004   000002 115007                    CMPA    2,DL
        14 000005   000014 601000 14                 TNZ     s:8124

      816     8122    1            N = MOD(CURRENT_BLOCK$ -> BLOCK.SIZE,2);

   8122 14 000006   000000 471400 10                 LDP1    CURRENT_BLOCK$
PL6.E3A0      #006=Z8HU$FORCE_BOUNDARY File=Z8HU.:Z8A6TSI                        SAT 08/09/97 13:31 Page:161  
        14 000007   100002 236100                    LDQ     2,,PR1
        14 000010   000022 772000                    QRL     18
        14 000011   000001 376007                    ANQ     1,DL
        14 000012   200004 756100                    STQ     N,,AUTO
        14 000013   000015 710000 14                 TRA     s:8127

      817     8123    1        ELSE
      818     8124    1            N = 0;

   8124 14 000014   200004 450100                    STZ     N,,AUTO

      819     8125
      820     8126
      821     8127    2        DO I = 0 TO N - 1;

   8127 14 000015   200005 450100                    STZ     I,,AUTO
        14 000016   000102 710000 14                 TRA     s:8179+1

      822     8128    2          INST_WORD = '0'O;

   8128 14 000017   200006 450100                    STZ     INST_WORD,,AUTO

      823     8129    2          INST_WORD.LOW.OP_CODE = %NOP_OP;

   8129 14 000020   011000 236007                    LDQ     4608,DL
        14 000021   200006 552110                    STBQ    INST_WORD,'10'O,AUTO

      824     8130    2          INST_WORD.LOW.MF.TAG = %DL;

   8130 14 000022   200006 236100                    LDQ     INST_WORD,,AUTO
        14 000023   000000 376000 15                 ANQ     0
        14 000024   000007 276007                    ORQ     7,DL
        14 000025   200006 756100                    STQ     INST_WORD,,AUTO

      825     8131
      826     8132               %NEW_WORD( @OU_WORD = INST_WORD );

PL6.E3A0      #006=Z8HU$FORCE_BOUNDARY File=Z8HU.:Z8A6TSI                        SAT 08/09/97 13:31 Page:162  
   8151 14 000026   000002 236000 8                  LDQ     OBJ_+2
        14 000027   000004 036007                    ADLQ    4,DL
        14 000030   000003 116000 8                  CMPQ    OBJ_+3
        14 000031   000043 604000 14                 TMI     s:8157

   8153 14 000032   000000 234000 2                  SZN     PAGING_OBJ
        14 000033   000040 605000 14                 TPL     s:8155

   8154 14 000034   000003 630400 15                 EPPR0   3
        14 000035   000002 631400 15                 EPPR1   2
        14 000036   000000 701000 xent               TSX1    Z9HF$WRITE_OBJ_PAGE
        14 000037   000000 011000                    NOP     0

   8155 14 000040   000004 631400 15                 EPPR1   4
        14 000041   000000 701000 xent               TSX1    Z9HF$GET_OBJ_PAGE
        14 000042   000000 011000                    NOP     0

   8157 14 000043   000002 236000 8                  LDQ     OBJ_+2
        14 000044   000022 736000                    QLS     18
        14 000045   000001 036000 8                  ADLQ    OBJ_+1
        14 000046   000000 756000 1                  STQ     OBJ$

   8158 14 000047   000004 236007                    LDQ     4,DL
        14 000050   000002 056000 8                  ASQ     OBJ_+2

   8159 14 000051   001012 220003                    LDX0    522,DU
        14 000052   000000 470400 1                  LDP0    OBJ$
        14 000053   000000 740100                    STX0    0,,PR0

   8162 14 000054   000001 236000 15                 LDQ     1
        14 000055   000000 470400 1                  LDP0    OBJ$
        14 000056   000002 756100                    STQ     2,,PR0

   8163 14 000057   000000 471400 10                 LDP1    CURRENT_BLOCK$
        14 000060   100002 236100                    LDQ     2,,PR1
        14 000061   000022 772000                    QRL     18
        14 000062   000001 756100                    STQ     1,,PR0
PL6.E3A0      #006=Z8HU$FORCE_BOUNDARY File=Z8HU.:Z8A6TSI                        SAT 08/09/97 13:31 Page:163  

   8164 14 000063   000000 236003                    LDQ     0,DU
        14 000064   000000 552110                    STBQ    0,'10'O,PR0

   8166 14 000065   200006 236100                    LDQ     INST_WORD,,AUTO
        14 000066   000000 470400 1                  LDP0    OBJ$
        14 000067   000003 756100                    STQ     3,,PR0

   8173 14 000070   000000 471400 10                 LDP1    CURRENT_BLOCK$
        14 000071   100002 221100                    LDX1    2,,PR1
        14 000072   000001 622011                    EAX2    1,X1
        14 000073   100002 742100                    STX2    2,,PR1

   8174 14 000074   000101 601000 14                 TNZ     s:8179

   8175 14 000075   000006 630400 15                 EPPR0   6
        14 000076   000002 631400 15                 EPPR1   2
        14 000077   000000 701000 xent               TSX1    Z8AE$ERROR
        14 000100   000000 011000                    NOP     0

      827     8179    2        END;

   8179 14 000101   200005 054100                    AOS     I,,AUTO
        14 000102   200005 236100                    LDQ     I,,AUTO
        14 000103   200004 116100                    CMPQ    N,,AUTO
        14 000104   000017 604000 14                 TMI     s:8128

      828     8180
      829     8181    1   END Z8HU$FORCE_BOUNDARY;

   8181 14 000105   000000 702200 xent               TSX2  ! X66_ARET
      830     8182        %EOD;

PL6.E3A0      #006=Z8HU$FORCE_BOUNDARY File=Z8HU.:Z8A6TSI                        SAT 08/09/97 13:31 Page:164  
--  Include file information  --

   Z8A_ERR_NUMS.:Z8A6TOU  is referenced.
   Z8H_TEMP.:Z8A6TOU  is referenced.
   Z8H_OPCODES.:Z8A6TOU  is referenced.
   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_CODE.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_OBJ.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HU$FORCE_BOUNDARY.
PL6.E3A0      #006=Z8HU$FORCE_BOUNDARY File=Z8HU.:Z8A6TSI                        SAT 08/09/97 13:31 Page:165  

 **** Variables and constants ****

  ****  Section 000 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 001 LblCom OBJ$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 OBJ$

  ****  Section 002 LblCom PAGING_OBJ

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w BIT         r     1 PAGING_OBJ

  ****  Section 003 LblCom OBJ_PAGE_COUNT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 OBJ_PAGE_COUNT

  ****  Section 004 LblCom OBJ_FINISHED

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w BIT               1 OBJ_FINISHED

PL6.E3A0      #006=Z8HU$FORCE_BOUNDARY File=Z8HU.:Z8A6TSI                        SAT 08/09/97 13:31 Page:166  
  ****  Section 005 LblCom OBJ_SEG_SIZE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 OBJ_SEG_SIZE

  ****  Section 006 LblCom OBJ_TOP_NEW_SEG

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 OBJ_TOP_NEW_SEG

  ****  Section 007 LblCom OBJ_LAST_REGULAR_PAGE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 OBJ_LAST_REGULAR_PAGE

  ****  Section 008 LblCom OBJ_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 OBJ_

  ****  Section 009  Data  Z8HU$FORCE_BOUNDARY

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b STRC              1 MOD_KEY

  ****  Section 010 LblCom CURRENT_BLOCK$

PL6.E3A0      #006=Z8HU$FORCE_BOUNDARY File=Z8HU.:Z8A6TSI                        SAT 08/09/97 13:31 Page:167  
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 CURRENT_BLOCK$

  ****  Section 011 LblCom ROOT_PROC_BLOCK$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 ROOT_PROC_BLOCK$

  ****  Section 012 LblCom ST$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ST$

  ****  Section 013 LblCom ST_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ST_

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @BOUNDARY                 *0-0-0/w SBIN        r     1 BOUNDARY
    34-0-0/b BIT               1 DEFER
     7-0-0/w STRC(180)         1 DEFER_BUFFER(0:3)
    33-0-0/w SBIN              1 DEFER_BUFFER_IDX           5-0-0/w SBIN        r     1 I
     6-0-0/b STRC        r     1 INST_WORD                  4-0-0/w SBIN        r     1 N
    35-0-0/w PTR               1 OLD_CURRENT_BLOCK$        36-0-0/w SBIN              1 SEG_NO#
PL6.E3A0      #006=Z8HU$FORCE_BOUNDARY File=Z8HU.:Z8A6TSI                        SAT 08/09/97 13:31 Page:168  

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN              1 OBJ_STEP(0:4)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(396)         1 ALPHABET                   0-0-0/w STRC(396)         1 ARRAY
     0-0-0/w STRC(396)   r     1 BLOCK                      0-0-0/w STRC(396)         1 CD
     0-0-0/w CHAR(4096)        1 CHARS                      0-0-0/w STRC(396)         1 CLASS
     0-0-0/w STRC(396)         1 CONDITION                  0-0-0/w STRC(396)         1 CONST
     0-0-0/w STRC(72)          1 CONT                       0-0-0/w STRC(396)         1 DB
     0-0-0/w STRC(396)         1 DCB_                       0-0-0/w STRC(396)         1 DML_ITEM
     0-0-0/w STRC(396)         1 FD                         0-0-0/w STRC(396)         1 INTDEF
     0-0-0/w STRC(396)         1 LABEL                      0-0-0/w STRC(396)         1 MNEMONIC
     0-0-0/w STRC        r     1 OBJ                        0-0-0/w STRC(72)          1 OBJ_LAB
     0-0-0/w STRC(108)         1 OBJ_LINE                   0-0-0/w STRC(72)          1 OBJ_ORG
     0-0-0/w STRC(72)          1 OBJ_SCOPE                  0-0-0/w STRC(144)   r     1 OBJ_WORD
     0-0-0/w STRC(36864)       1 PAGE                       0-0-0/w STRC(396)         1 PARA
     0-0-0/w STRC(396)         1 PROC_                      0-0-0/w STRC(396)         1 PROC_DEF
     0-0-0/w STRC(396)         1 RD                         0-0-0/w STRC(396)         1 SCALAR
     0-0-0/w STRC(396)         1 SD                         0-0-0/w STRC(396)         1 SECTION
     0-0-0/w STRC(396)         1 SEGMENT                    0-0-0/w STRC(396)         1 ST
     0-0-0/w STRC(396)         1 SWITCH                     0-0-0/w STRC(396)         1 SYMBOLIC_CHAR
     0-0-0/w STRC(396)         1 SYMDEF_                    0-0-0/w STRC(396)         1 SYMREF_
     0-0-0/w STRC(396)         1 TEMP                       0-0-0/w STRC(396)         1 VARIABLE


   Procedure Z8HU$FORCE_BOUNDARY requires 70 words for executable code.
   Procedure Z8HU$FORCE_BOUNDARY requires 32 words of local(AUTO) storage.

PL6.E3A0      #007=Z8HU$TAG File=Z8HU.:Z8A6TSI                                   SAT 08/09/97 13:32 Page:169  
      831        1        /*T***********************************************************/
      832        2        /*T*                                                         */
      833        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      834        4        /*T*                                                         */
      835        5        /*T***********************************************************/
      836        6        Z8HU$TAG:PROC(NODE$, GREATER_256K);
      837        7        /*D*
      838        8             NAME: Z8HU$TAG
      839        9             CALL:
      840       10                  CALL Z8HU$TAG(NODE$, GREATER_256K );
      841       11             PARAMETERS:
      842       12                  NODE$ - Points to the triad referenced in the tag field.
      843       13                  GREATER_256K - Boolean value indicating that the tag
      844       14                                 may be greater than 256k and therefore will
      845       15                                 not fit in an index register.
      846       16             ENVIRONMENT:
      847       17                  None.
      848       18             INPUT:
      849       19                  Pointer to the node referenced by the tag.
      850       20             OUTPUT:
      851       21                  None.
      852       22             SCRATCH:
      853       23                  None.
      854       24             DESCRIPTION:
      855       25                  Evaluate the triad pointed to by NODE$.  Load it
      856       26                  into a register so that it can be referenced in
      857       27                  the tag field of an instruction.  Use an
      858       28                  index register unless the value could be
      859       29                  greater than 256K.
      860       30        */
      861       31
      862       32    1        DCL NODE$ PTR;
      863       33    1        DCL GREATER_256K BIT(1) ALIGNED;
      864       34
      865       35    1        DCL REGISTER SBIN WORD;
      866       36
      867       37
PL6.E3A0      #007=Z8HU$TAG File=Z8HU.:Z8A6TSI                                   SAT 08/09/97 13:32 Page:170  
      868       38    1        DCL Z8HU$WALK ENTRY(1);
      869       39    1        DCL Z8HI$BURST ENTRY(2);
      870       40
      871       41
      872       42             %EQU PHASE = 4;
      873       43             %INCLUDE Z8A_DEFC;
      874      111             %INCLUDE Z8A_SUPP_MAC;
      875     2511             %INCLUDE Z8A_ETT;
      876     2812             %INCLUDE Z9A_FLAGS;
      877     2826             %INCLUDE Z8H_SUPPORT;
      878     3274             %INCLUDE Z8H_RAT;
      879     3365             %INCLUDE Z8H_DEP;
      880     3472
      881     3473    1        CALL Z8HU$WALK(NODE$);
      882     3474
      883     3475    1        REGISTER = NODE$ -> ETT.STATE;
      884     3476
      885     3477    1        IF REGISTER > %REF_T THEN
      886     3478    2          DO;
      887     3479    2            RAT.AWAITING(REGISTER) = 1;
      888     3480    2            IF GREATER_256K THEN                   /*#38512*/
      889     3481    2              RAT.B.GREATER_256K(REGISTER) = TRUE;
      890     3482    2          END;
      891     3483    1        ELSE
      892     3484    1          IF GREATER_256K THEN
      893     3485    2            DO;
      894     3486    2              CALL Z8HI$BURST(NODE$, DEP.JDEP);
      895     3487    2              REGISTER = NODE$ -> ETT.STATE;
      896     3488    2              RAT.B.GREATER_256K(REGISTER) = TRUE;
      897     3489    2            END;
      898     3490    1          ELSE
      899     3491    1            CALL Z8HI$BURST(NODE$, DEP.KDEP);
      900     3492
      901     3493    1   END Z8HU$TAG;
      902     3494        %EOD;

PL6.E3A0      #007=Z8HU$TAG File=Z8HU.:Z8A6TSI                                   SAT 08/09/97 13:32 Page:171  
--  Include file information  --

   Z8H_DEP.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_SUPPORT.:Z8A6TOU  is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HU$TAG.

   Procedure Z8HU$TAG requires 51 words for executable code.
   Procedure Z8HU$TAG requires 12 words of local(AUTO) storage.

PL6.E3A0      #007=Z8HU$TAG File=Z8HU.:Z8A6TSI                                   SAT 08/09/97 13:32 Page:172  

 Object Unit name= Z8HU$TAG                                   File name= Z8HU.:Z8A6TOU
 UTS= AUG 09 '97 13:32:47.36 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  LblCom even  none     1      1  ITERATION
    1  LblCom even  none     1      1  ETT$
    2  LblCom even  none     1      1  HEAD_ETT$
    3  LblCom even  none   512   1000  ETT_BUCKETS
    4  LblCom even  none     5      5  ETT_
    5  LblCom even  none   112    160  RAT
    6  LblCom even  none    48     60  DEP
    7   Proc  even  none    51     63  Z8HU$TAG
    8  RoData even  none     4      4  Z8HU$TAG

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     7      0   yes            yes      Std        2  Z8HU$TAG

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 Z8HU$WALK
         yes           Std       2 Z8HI$BURST
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
PL6.E3A0      #007=Z8HU$TAG File=Z8HU.:Z8A6TSI                                   SAT 08/09/97 13:32 Page:173  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #007=Z8HU$TAG File=Z8HU.:Z8A6TSI                                   SAT 08/09/97 13:32 Page:174  


      831        1        /*T***********************************************************/
      832        2        /*T*                                                         */
      833        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      834        4        /*T*                                                         */
      835        5        /*T***********************************************************/
      836        6        Z8HU$TAG:PROC(NODE$, GREATER_256K);

      6  7 000000   000000 700200 xent  Z8HU$TAG     TSX0  ! X66_AUTO_2
         7 000001   000014 000002                    ZERO    12,2

      837        7        /*D*
      838        8             NAME: Z8HU$TAG
      839        9             CALL:
      840       10                  CALL Z8HU$TAG(NODE$, GREATER_256K );
      841       11             PARAMETERS:
      842       12                  NODE$ - Points to the triad referenced in the tag field.
      843       13                  GREATER_256K - Boolean value indicating that the tag
      844       14                                 may be greater than 256k and therefore will
      845       15                                 not fit in an index register.
      846       16             ENVIRONMENT:
      847       17                  None.
      848       18             INPUT:
      849       19                  Pointer to the node referenced by the tag.
      850       20             OUTPUT:
      851       21                  None.
      852       22             SCRATCH:
      853       23                  None.
      854       24             DESCRIPTION:
      855       25                  Evaluate the triad pointed to by NODE$.  Load it
      856       26                  into a register so that it can be referenced in
      857       27                  the tag field of an instruction.  Use an
      858       28                  index register unless the value could be
      859       29                  greater than 256K.
      860       30        */
      861       31
      862       32    1        DCL NODE$ PTR;
PL6.E3A0      #007=Z8HU$TAG File=Z8HU.:Z8A6TSI                                   SAT 08/09/97 13:32 Page:175  
      863       33    1        DCL GREATER_256K BIT(1) ALIGNED;
      864       34
      865       35    1        DCL REGISTER SBIN WORD;
      866       36
      867       37
      868       38    1        DCL Z8HU$WALK ENTRY(1);
      869       39    1        DCL Z8HI$BURST ENTRY(2);
      870       40
      871       41
      872       42             %EQU PHASE = 4;
      873       43             %INCLUDE Z8A_DEFC;
      874      111             %INCLUDE Z8A_SUPP_MAC;
      875     2511             %INCLUDE Z8A_ETT;
      876     2812             %INCLUDE Z9A_FLAGS;
      877     2826             %INCLUDE Z8H_SUPPORT;
      878     3274             %INCLUDE Z8H_RAT;
      879     3365             %INCLUDE Z8H_DEP;
      880     3472
      881     3473    1        CALL Z8HU$WALK(NODE$);

   3473  7 000002   200003 630500                    EPPR0   @NODE$,,AUTO
         7 000003   000000 631400 8                  EPPR1   0
         7 000004   000000 701000 xent               TSX1    Z8HU$WALK
         7 000005   000000 011000                    NOP     0

      882     3474
      883     3475    1        REGISTER = NODE$ -> ETT.STATE;

   3475  7 000006   200003 470500                    LDP0    @NODE$,,AUTO
         7 000007   000000 471500                    LDP1    0,,PR0
         7 000010   100004 236100                    LDQ     4,,PR1
         7 000011   000022 772000                    QRL     18
         7 000012   200005 756100                    STQ     REGISTER,,AUTO

      884     3476
      885     3477    1        IF REGISTER > %REF_T THEN

PL6.E3A0      #007=Z8HU$TAG File=Z8HU.:Z8A6TSI                                   SAT 08/09/97 13:32 Page:176  
   3477  7 000013   000004 116007                    CMPQ    4,DL
         7 000014   000027 604400 7                  TMOZ    s:3484

      886     3478    2          DO;

      887     3479    2            RAT.AWAITING(REGISTER) = 1;

   3479  7 000015   200005 235100                    LDA     REGISTER,,AUTO
         7 000016   000002 735000                    ALS     2
         7 000017   000001 220003                    LDX0    1,DU
         7 000020   000001 440005 5                  SXL0    RAT+1,AL

      888     3480    2            IF GREATER_256K THEN                   /*#38512*/

   3480  7 000021   200004 471500                    LDP1    @GREATER_256K,,AUTO
         7 000022   100000 234100                    SZN     0,,PR1
         7 000023   000062 605000 7                  TPL     s:3493

      889     3481    2              RAT.B.GREATER_256K(REGISTER) = TRUE;

   3481  7 000024   200000 236003                    LDQ     65536,DU
         7 000025   000001 256005 5                  ORSQ    RAT+1,AL

      890     3482    2          END;

   3482  7 000026   000062 710000 7                  TRA     s:3493

      891     3483    1        ELSE
      892     3484    1          IF GREATER_256K THEN

   3484  7 000027   200004 473500                    LDP3    @GREATER_256K,,AUTO
         7 000030   300000 234100                    SZN     0,,PR3
         7 000031   000053 605000 7                  TPL     s:3491

      893     3485    2            DO;

      894     3486    2              CALL Z8HI$BURST(NODE$, DEP.JDEP);
PL6.E3A0      #007=Z8HU$TAG File=Z8HU.:Z8A6TSI                                   SAT 08/09/97 13:32 Page:177  

   3486  7 000032   000002 236000 8                  LDQ     2
         7 000033   200003 235100                    LDA     @NODE$,,AUTO
         7 000034   200012 757100                    STAQ    AORQ+1,,AUTO
         7 000035   200012 630500                    EPPR0   AORQ+1,,AUTO
         7 000036   000001 631400 8                  EPPR1   1
         7 000037   000000 701000 xent               TSX1    Z8HI$BURST
         7 000040   000000 011000                    NOP     0

      895     3487    2              REGISTER = NODE$ -> ETT.STATE;

   3487  7 000041   200003 470500                    LDP0    @NODE$,,AUTO
         7 000042   000000 471500                    LDP1    0,,PR0
         7 000043   100004 236100                    LDQ     4,,PR1
         7 000044   000022 772000                    QRL     18
         7 000045   200005 756100                    STQ     REGISTER,,AUTO

      896     3488    2              RAT.B.GREATER_256K(REGISTER) = TRUE;

   3488  7 000046   200005 235100                    LDA     REGISTER,,AUTO
         7 000047   000002 735000                    ALS     2
         7 000050   200000 236003                    LDQ     65536,DU
         7 000051   000001 256005 5                  ORSQ    RAT+1,AL

      897     3489    2            END;

   3489  7 000052   000062 710000 7                  TRA     s:3493

      898     3490    1          ELSE
      899     3491    1            CALL Z8HI$BURST(NODE$, DEP.KDEP);

   3491  7 000053   000003 236000 8                  LDQ     3
         7 000054   200003 235100                    LDA     @NODE$,,AUTO
         7 000055   200012 757100                    STAQ    AORQ+1,,AUTO
         7 000056   200012 630500                    EPPR0   AORQ+1,,AUTO
         7 000057   000001 631400 8                  EPPR1   1
         7 000060   000000 701000 xent               TSX1    Z8HI$BURST
PL6.E3A0      #007=Z8HU$TAG File=Z8HU.:Z8A6TSI                                   SAT 08/09/97 13:32 Page:178  
         7 000061   000000 011000                    NOP     0

      900     3492
      901     3493    1   END Z8HU$TAG;

   3493  7 000062   000000 702200 xent               TSX2  ! X66_ARET
      902     3494        %EOD;

PL6.E3A0      #007=Z8HU$TAG File=Z8HU.:Z8A6TSI                                   SAT 08/09/97 13:32 Page:179  
--  Include file information  --

   Z8H_DEP.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_SUPPORT.:Z8A6TOU  is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HU$TAG.
PL6.E3A0      #007=Z8HU$TAG File=Z8HU.:Z8A6TSI                                   SAT 08/09/97 13:32 Page:180  

 **** Variables and constants ****

  ****  Section 000 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 001 LblCom ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ETT$

  ****  Section 002 LblCom HEAD_ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_ETT$

  ****  Section 003 LblCom ETT_BUCKETS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 ETT_BUCKETS(0:511)

  ****  Section 004 LblCom ETT_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ETT_

PL6.E3A0      #007=Z8HU$TAG File=Z8HU.:Z8A6TSI                                   SAT 08/09/97 13:32 Page:181  
  ****  Section 005 LblCom RAT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 RAT(0:27)

  ****  Section 006 LblCom DEP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b STRC(1728)  r     1 DEP

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @GREATER_256K              3-0-0/w PTR         r     1 @NODE$
    11-0-0/b BIT               1 AORQ                      *0-0-0/w BIT         r     1 GREATER_256K
    10-0-0/w UBIN              1 LAST_FREED                 7-0-0/w UBIN              1 LAST_USED
    *0-0-0/w PTR         r     1 NODE$                      6-0-0/w UBIN              1 REGID
     5-0-0/w SBIN        r     1 REGISTER

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w CHAR(4096)        1 CHARS                      0-0-0/w STRC(72)          1 CONT
     0-0-0/w STRC(180)   r     1 ETT                        0-0-0/w STRC(36864)       1 PAGE


   Procedure Z8HU$TAG requires 51 words for executable code.
   Procedure Z8HU$TAG requires 12 words of local(AUTO) storage.

PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:182  
      903        1        /*T***********************************************************/
      904        2        /*T*                                                         */
      905        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      906        4        /*T*                                                         */
      907        5        /*T***********************************************************/
      908        6        Z8HU$WALK:PROC(NODE$);
      909        7        /*D*
      910        8
      911        9               NAME: Z8HU$WALK
      912       10            PURPOSE: Invoke recursion to evaluate subtrees of the current triad.
      913       11
      914       12               CALL: CALL Z8HU$WALK(=NODE$);
      915       13              INPUT: NODE$
      916       14                       Points to the operand that we are desirous of evaluating.
      917       15                       This is the register that the triad above the one to be
      918       16                       tree-walked would like to see.
      919       17
      920       18        DESCRIPTION: Issue recursive call only if not previously evaluated.  NODE$
      921       19                     points to an operand that is evaluated if that operand is a
      922       20                     Symbol Table item or the T field of the triad contains
      923       21                     a value not equal to %UNEVAL_T.
      924       22
      925       23
      926       24        */
      927       25
      928       26             %EQU PHASE = 4;
      929       27             %INCLUDE Z8A_DEFC;
      930       95             %INCLUDE Z8A_SUPP_MAC;
      931     2495             %INCLUDE Z8A_ETT;
      932     2796             %INCLUDE Z8A_ST;
      933     6455             %INCLUDE Z9A_FLAGS;
      934     6469             %INCLUDE Z8H_SUPPORT;
      935     6917             %INCLUDE Z8A_LTS;
      936     8994             %INCLUDE Z8H_EXT;
      937     9045
      938     9046    1        DCL Z8HI$BURST ENTRY(2);
      939     9047    1        DCL Z8HU$TAG ENTRY(2);
PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:183  
      940     9048
      941     9049    1        DCL NODE$ PTR;
      942     9050
      943     9051    1        IF NODE$ ~= ADDR(NIL) THEN
      944     9052    1          IF NODE$ -> ETT.ID < %FIRST_ST THEN
      945     9053    2            DO;
      946     9054    2              IF NODE$ -> ETT.COUNT = 0 THEN
      947     9055    2                NODE$ -> ETT.COUNT = 1;
      948     9056
      949     9057    2              IF NODE$ -> ETT.ID <= %LAST_REFERENCE_TRIAD THEN
      950     9058    3                DO;
      951     9059    3                  IF NODE$ -> ETT.STATE = %UNEVAL_T THEN
      952     9060    3                    NODE$ -> ETT.REF$ = ADDR(NIL);
      953     9061
      954     9062    3                  IF NODE$ -> ETT.REF$ = ADDR(NIL) THEN
      955     9063    3                    CALL Z8HI$BURST(NODE$,PEPD(NODE$ -> ETT.ID));
      956     9064
      957     9065    4                  DO CASE(NODE$ -> ETT.ID);
      958     9066    4                    CASE(%OPTIMIZE_THIS_CASE);
      959     9067    4                    CASE(%SSOP);
      960     9068    4                      IF NODE$ -> ETT.REF$ -> REF.SSOP_TAG$ ~= ADDR(NIL) THEN
      961     9069    5                        DO;
      962     9070    5                          CALL Z8HU$TAG(NODE$ -> ETT.REF$ -> REF.SSOP_TAG$,
      963     9071    5                                        NODE$->ETT.REF$->REF.ST$->VARIABLE.B.
              9071                                                 GREATER_256K=TRUE);
      964     9072    5                        END;
      965     9073
      966     9074    4                    CASE(%SIZ, %REFMOD);  /*#28637*/
      967     9075    4                      IF NODE$ -> ETT.REF$ -> REF.SIZ_TAG$ ~= ADDR(NIL) THEN
      968     9076    5                        DO;
      969     9077    5                          CALL Z8HU$TAG(NODE$ -> ETT.REF$ -> REF.SIZ_TAG$,
      970     9078    5                                        NODE$->ETT.REF$->REF.ST$->VARIABLE.B.
              9078                                                 GREATER_256K=TRUE);
      971     9079    5                        END;
      972     9080    4                  END;
      973     9081    3                END;
      974     9082    2              ELSE
PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:184  
      975     9083    2                IF NODE$ -> ETT.STATE = %UNEVAL_T THEN
      976     9084    3                  DO;
      977     9085    3                    NODE$ -> ETT.REF$ = ADDR(NIL);
      978     9086    3                    CALL Z8HI$BURST(NODE$,PEPD(NODE$ -> ETT.ID));
      979     9087    3                  END;
      980     9088    2            END;
      981     9089
      982     9090    1   END Z8HU$WALK;

PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:185  
--  Include file information  --

   Z8H_EXT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_SUPPORT.:Z8A6TOU  is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HU$WALK.

   Procedure Z8HU$WALK requires 113 words for executable code.
   Procedure Z8HU$WALK requires 8 words of local(AUTO) storage.

    No errors detected in file Z8HU.:Z8A6TSI    .

PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:186  

 Object Unit name= Z8HU$WALK                                  File name= Z8HU.:Z8A6TOU
 UTS= AUG 09 '97 13:33:10.12 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  LblCom even  none     1      1  ITERATION
    1  LblCom even  none     1      1  ETT$
    2  LblCom even  none     1      1  HEAD_ETT$
    3  LblCom even  none   512   1000  ETT_BUCKETS
    4  LblCom even  none     5      5  ETT_
    5  LblCom even  none     1      1  ST$
    6  LblCom even  none     5      5  ST_
    7  LblCom even  none     1      1  LTS$
    8  LblCom even  none     5      5  LTS_
    9  LblCom even  none     1      1  NUMBER_OF_PRIMES
   10  LblCom even  none     1      1  NUMBER_OF_TEMPS
   11  LblCom even  none     1      1  NUMBER_OF_REFS
   12  LblCom even  none     1      1  GENERATING_PTRS
   13  LblCom even  none     1      1  USE_PROC_RETURN
   14  LblCom even  none     1      1  CURRENT_SCOPE$
   15  LblCom even  none     1      1  HEAD_REF$
   16  LblCom even  none     1      1  HEAD_TEMP$
   17  LblCom even  none     1      1  CONST$
   18  LblCom even  none     1      1  HEAD_PRIMES$
   19  LblCom even  none     1      1  CUR_LOOP_LEVEL
   20  LblCom even  none     2      2  PEPD
   21   Proc  even  none   113    161  Z8HU$WALK
   22  RoData even  none     2      2  Z8HU$WALK
PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:187  

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    21      0   yes            yes      Std        1  Z8HU$WALK

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 Z8HI$BURST
         yes           Std       2 Z8HU$TAG
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    LTS_STEP

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID
PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:188  


      903        1        /*T***********************************************************/
      904        2        /*T*                                                         */
      905        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      906        4        /*T*                                                         */
      907        5        /*T***********************************************************/
      908        6        Z8HU$WALK:PROC(NODE$);

      6 21 000000   000000 700200 xent  Z8HU$WALK    TSX0  ! X66_AUTO_1
        21 000001   000010 000001                    ZERO    8,1

      909        7        /*D*
      910        8
      911        9               NAME: Z8HU$WALK
      912       10            PURPOSE: Invoke recursion to evaluate subtrees of the current triad.
      913       11
      914       12               CALL: CALL Z8HU$WALK(=NODE$);
      915       13              INPUT: NODE$
      916       14                       Points to the operand that we are desirous of evaluating.
      917       15                       This is the register that the triad above the one to be
      918       16                       tree-walked would like to see.
      919       17
      920       18        DESCRIPTION: Issue recursive call only if not previously evaluated.  NODE$
      921       19                     points to an operand that is evaluated if that operand is a
      922       20                     Symbol Table item or the T field of the triad contains
      923       21                     a value not equal to %UNEVAL_T.
      924       22
      925       23
      926       24        */
      927       25
      928       26             %EQU PHASE = 4;
      929       27             %INCLUDE Z8A_DEFC;
      930       95             %INCLUDE Z8A_SUPP_MAC;
      931     2495             %INCLUDE Z8A_ETT;
      932     2796             %INCLUDE Z8A_ST;
      933     6455             %INCLUDE Z9A_FLAGS;
      934     6469             %INCLUDE Z8H_SUPPORT;
PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:189  
      935     6917             %INCLUDE Z8A_LTS;
      936     8994             %INCLUDE Z8H_EXT;
      937     9045
      938     9046    1        DCL Z8HI$BURST ENTRY(2);
      939     9047    1        DCL Z8HU$TAG ENTRY(2);
      940     9048
      941     9049    1        DCL NODE$ PTR;
      942     9050
      943     9051    1        IF NODE$ ~= ADDR(NIL) THEN

   9051 21 000002   200003 470500                    LDP0    @NODE$,,AUTO
        21 000003   000000 236100                    LDQ     0,,PR0
        21 000004   000000 116000 22                 CMPQ    0
        21 000005   000160 600000 21                 TZE     s:9090

      944     9052    1          IF NODE$ -> ETT.ID < %FIRST_ST THEN

   9052 21 000006   000000 471500                    LDP1    0,,PR0
        21 000007   100000 220100                    LDX0    0,,PR1
        21 000010   000751 100003                    CMPX0   489,DU
        21 000011   000160 603000 21                 TRC     s:9090

      945     9053    2            DO;

      946     9054    2              IF NODE$ -> ETT.COUNT = 0 THEN

   9054 21 000012   100000 721100                    LXL1    0,,PR1
        21 000013   000016 601000 21                 TNZ     s:9057

      947     9055    2                NODE$ -> ETT.COUNT = 1;

   9055 21 000014   000001 222003                    LDX2    1,DU
        21 000015   100000 442100                    SXL2    0,,PR1

      948     9056
      949     9057    2              IF NODE$ -> ETT.ID <= %LAST_REFERENCE_TRIAD THEN

PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:190  
   9057 21 000016   000000 471500                    LDP1    0,,PR0
        21 000017   100000 220100                    LDX0    0,,PR1
        21 000020   000020 100003                    CMPX0   16,DU
        21 000021   000142 603000 21                 TRC     s:9083

      950     9058    3                DO;

      951     9059    3                  IF NODE$ -> ETT.STATE = %UNEVAL_T THEN

   9059 21 000022   100004 221100                    LDX1    4,,PR1
        21 000023   000026 601000 21                 TNZ     s:9062

      952     9060    3                    NODE$ -> ETT.REF$ = ADDR(NIL);

   9060 21 000024   000000 236000 22                 LDQ     0
        21 000025   100003 756100                    STQ     3,,PR1

      953     9061
      954     9062    3                  IF NODE$ -> ETT.REF$ = ADDR(NIL) THEN

   9062 21 000026   000000 471500                    LDP1    0,,PR0
        21 000027   100003 236100                    LDQ     3,,PR1
        21 000030   000000 116000 22                 CMPQ    0
        21 000031   000043 601000 21                 TNZ     s:9065

      955     9063    3                    CALL Z8HI$BURST(NODE$,PEPD(NODE$ -> ETT.ID));

   9063 21 000032   100000 220100                    LDX0    0,,PR1
        21 000033   000000 633410 20                 EPPR3   PEPD,X0
        21 000034   200005 453500                    STP3    @NODE$+2,,AUTO
        21 000035   200003 236100                    LDQ     @NODE$,,AUTO
        21 000036   200004 756100                    STQ     @NODE$+1,,AUTO
        21 000037   200004 630500                    EPPR0   @NODE$+1,,AUTO
        21 000040   000001 631400 22                 EPPR1   1
        21 000041   000000 701000 xent               TSX1    Z8HI$BURST
        21 000042   000000 011000                    NOP     0

PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:191  
      956     9064
      957     9065    4                  DO CASE(NODE$ -> ETT.ID);

   9065 21 000043   200003 470500                    LDP0    @NODE$,,AUTO
        21 000044   000000 471500                    LDP1    0,,PR0
        21 000045   100000 220100                    LDX0    0,,PR1
        21 000046   000013 100003                    CMPX0   11,DU
        21 000047   000051 602010 21                 TNC     s:9065+6,X0
        21 000050   000160 710000 21                 TRA     s:9090
        21 000051   000141 710000 21                 TRA     s:9081
        21 000052   000141 710000 21                 TRA     s:9081
        21 000053   000141 710000 21                 TRA     s:9081
        21 000054   000141 710000 21                 TRA     s:9081
        21 000055   000113 710000 21                 TRA     s:9075
        21 000056   000064 710000 21                 TRA     s:9068
        21 000057   000141 710000 21                 TRA     s:9081
        21 000060   000141 710000 21                 TRA     s:9081
        21 000061   000141 710000 21                 TRA     s:9081
        21 000062   000141 710000 21                 TRA     s:9081
        21 000063   000113 710000 21                 TRA     s:9075

      958     9066    4                    CASE(%OPTIMIZE_THIS_CASE);

      959     9067    4                    CASE(%SSOP);

      960     9068    4                      IF NODE$ -> ETT.REF$ -> REF.SSOP_TAG$ ~= ADDR(NIL) THEN

   9068 21 000064   100003 473500                    LDP3    3,,PR1
        21 000065   300002 236100                    LDQ     2,,PR3
        21 000066   000000 116000 22                 CMPQ    0
        21 000067   000160 600000 21                 TZE     s:9090

      961     9069    5                        DO;

      962     9070    5                          CALL Z8HU$TAG(NODE$ -> ETT.REF$ -> REF.SSOP_TAG$,

   9070 21 000070   300005 474500                    LDP4    5,,PR3
PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:192  
        21 000071   400000 221003                    LDX1    -131072,DU
        21 000072   400003 236100                    LDQ     3,,PR4
        21 000073   020000 316003                    CANQ    8192,DU
        21 000074   000076 601000 21                 TNZ     s:9070+6
        21 000075   000000 221003                    LDX1    0,DU
        21 000076   000000 636011                    EAQ     0,X1
        21 000077   200004 676100                    ERQ     @NODE$+1,,AUTO
        21 000100   400000 376003                    ANQ     -131072,DU
        21 000101   200004 656100                    ERSQ    @NODE$+1,,AUTO
        21 000102   200004 631500                    EPPR1   @NODE$+1,,AUTO
        21 000103   200007 451500                    STP1    @NODE$+4,,AUTO
        21 000104   300002 634500                    EPPR4   2,,PR3
        21 000105   200006 454500                    STP4    @NODE$+3,,AUTO
        21 000106   200006 630500                    EPPR0   @NODE$+3,,AUTO
        21 000107   000001 631400 22                 EPPR1   1
        21 000110   000000 701000 xent               TSX1    Z8HU$TAG
        21 000111   000000 011000                    NOP     0

      963     9071    5                                        NODE$->ETT.REF$->REF.ST$->VARIABLE.B.
              9071                                                 GREATER_256K=TRUE);
      964     9072    5                        END;

   9072 21 000112   000160 710000 21                 TRA     s:9090

      965     9073
      966     9074    4                    CASE(%SIZ, %REFMOD);  /*#28637*/

      967     9075    4                      IF NODE$ -> ETT.REF$ -> REF.SIZ_TAG$ ~= ADDR(NIL) THEN

   9075 21 000113   100003 473500                    LDP3    3,,PR1
        21 000114   300003 236100                    LDQ     3,,PR3
        21 000115   000000 116000 22                 CMPQ    0
        21 000116   000160 600000 21                 TZE     s:9090

      968     9076    5                        DO;

      969     9077    5                          CALL Z8HU$TAG(NODE$ -> ETT.REF$ -> REF.SIZ_TAG$,
PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:193  

   9077 21 000117   300005 474500                    LDP4    5,,PR3
        21 000120   400000 221003                    LDX1    -131072,DU
        21 000121   400003 236100                    LDQ     3,,PR4
        21 000122   020000 316003                    CANQ    8192,DU
        21 000123   000125 601000 21                 TNZ     s:9077+6
        21 000124   000000 221003                    LDX1    0,DU
        21 000125   000000 636011                    EAQ     0,X1
        21 000126   200004 676100                    ERQ     @NODE$+1,,AUTO
        21 000127   400000 376003                    ANQ     -131072,DU
        21 000130   200004 656100                    ERSQ    @NODE$+1,,AUTO
        21 000131   200004 631500                    EPPR1   @NODE$+1,,AUTO
        21 000132   200007 451500                    STP1    @NODE$+4,,AUTO
        21 000133   300003 634500                    EPPR4   3,,PR3
        21 000134   200006 454500                    STP4    @NODE$+3,,AUTO
        21 000135   200006 630500                    EPPR0   @NODE$+3,,AUTO
        21 000136   000001 631400 22                 EPPR1   1
        21 000137   000000 701000 xent               TSX1    Z8HU$TAG
        21 000140   000000 011000                    NOP     0

      970     9078    5                                        NODE$->ETT.REF$->REF.ST$->VARIABLE.B.
              9078                                                 GREATER_256K=TRUE);
      971     9079    5                        END;

      972     9080    4                  END;

      973     9081    3                END;

   9081 21 000141   000160 710000 21                 TRA     s:9090

      974     9082    2              ELSE
      975     9083    2                IF NODE$ -> ETT.STATE = %UNEVAL_T THEN

   9083 21 000142   100004 221100                    LDX1    4,,PR1
        21 000143   000160 601000 21                 TNZ     s:9090

      976     9084    3                  DO;
PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:194  

      977     9085    3                    NODE$ -> ETT.REF$ = ADDR(NIL);

   9085 21 000144   000000 236000 22                 LDQ     0
        21 000145   100003 756100                    STQ     3,,PR1

      978     9086    3                    CALL Z8HI$BURST(NODE$,PEPD(NODE$ -> ETT.ID));

   9086 21 000146   000000 471500                    LDP1    0,,PR0
        21 000147   100000 220100                    LDX0    0,,PR1
        21 000150   000000 633410 20                 EPPR3   PEPD,X0
        21 000151   200005 453500                    STP3    @NODE$+2,,AUTO
        21 000152   200003 236100                    LDQ     @NODE$,,AUTO
        21 000153   200004 756100                    STQ     @NODE$+1,,AUTO
        21 000154   200004 630500                    EPPR0   @NODE$+1,,AUTO
        21 000155   000001 631400 22                 EPPR1   1
        21 000156   000000 701000 xent               TSX1    Z8HI$BURST
        21 000157   000000 011000                    NOP     0

      979     9087    3                  END;

      980     9088    2            END;

      981     9089
      982     9090    1   END Z8HU$WALK;

   9090 21 000160   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:195  
--  Include file information  --

   Z8H_EXT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_SUPPORT.:Z8A6TOU  is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HU$WALK.
PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:196  

 **** Variables and constants ****

  ****  Section 000 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 001 LblCom ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ETT$

  ****  Section 002 LblCom HEAD_ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_ETT$

  ****  Section 003 LblCom ETT_BUCKETS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 ETT_BUCKETS(0:511)

  ****  Section 004 LblCom ETT_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ETT_

PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:197  
  ****  Section 005 LblCom ST$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ST$

  ****  Section 006 LblCom ST_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ST_

  ****  Section 007 LblCom LTS$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 LONG_ITEM$                 0-0-0/w PTR         r     1 LTS$

  ****  Section 008 LblCom LTS_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 LTS_

  ****  Section 009 LblCom NUMBER_OF_PRIMES

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 NUMBER_OF_PRIMES

  ****  Section 010 LblCom NUMBER_OF_TEMPS

PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:198  
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 NUMBER_OF_TEMPS

  ****  Section 011 LblCom NUMBER_OF_REFS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 NUMBER_OF_REFS

  ****  Section 012 LblCom GENERATING_PTRS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT               1 GENERATING_PTRS

  ****  Section 013 LblCom USE_PROC_RETURN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 USE_PROC_RETURN

  ****  Section 014 LblCom CURRENT_SCOPE$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 CURRENT_SCOPE$

  ****  Section 015 LblCom HEAD_REF$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:199  

     0-0-0/w PTR               1 HEAD_REF$

  ****  Section 016 LblCom HEAD_TEMP$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_TEMP$

  ****  Section 017 LblCom CONST$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 CONST$

  ****  Section 018 LblCom HEAD_PRIMES$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_PRIMES$

  ****  Section 019 LblCom CUR_LOOP_LEVEL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 CUR_LOOP_LEVEL

  ****  Section 020 LblCom PEPD

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 PEPD(0:1)
PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:200  

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @NODE$                    *0-0-0/w PTR         r     1 NODE$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN              1 LTS_STEP(0:37)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(396)         1 ALPHABET                   0-0-0/w STRC(144)         1 ALTER_LTS
     0-0-0/w STRC(3672)        1 ALT_KEY                    0-0-0/w STRC(36864)       1 ARGLIST
     0-0-0/w STRC(396)         1 ARRAY                      0-0-0/w STRC(180)         1 ARRAY_PRESET_LTS
     0-0-0/w STRC(288)         1 BASE_LTS                   0-0-0/w STRC(396)         1 BLOCK
     0-0-0/w STRC(144)         1 BT                         0-0-0/w STRC(396)         1 CD
     0-0-0/w STRC(288)         1 CD_LTS                     0-0-0/w CHAR(4096)        1 CHARS
     0-0-0/w STRC(396)         1 CLASS                      0-0-0/w STRC(396)         1 CONDITION
     0-0-0/w STRC(396)         1 CONST                      0-0-0/w STRC(72)          1 CONT
     0-0-0/w STRC(540)         1 CONTROL_NAME_LTS           0-0-0/w STRC(1872)        1 COPY_FILE
     0-0-0/w STRC(396)         1 DB                         0-0-0/w STRC(396)         1 DCB_
     0-0-0/w STRC(108)         1 DEPENDING_SIZE             0-0-0/w STRC(5472)        1 DIMS
     0-0-0/w STRC(396)         1 DML_ITEM                   0-0-0/w STRC(216)         1 DML_REC
     0-0-0/w STRC(180)   r     1 ETT                        0-0-0/w STRC(73836)       1 EVALUATE
     0-0-0/w STRC(396)         1 FD                         0-0-0/w STRC(1692)        1 FILE_LTS
     0-0-0/w STRC(108)         1 INDEXES                    0-0-0/w STRC(360)         1 INIT_LTS
     0-0-0/w STRC(396)         1 INTDEF                     0-0-0/w STRC(180)         1 IO_RESTORE_CHAIN
     0-0-0/w STRC(144)         1 KEY                        0-0-0/w STRC(396)         1 LABEL
PL6.E3A0      #008=Z8HU$WALK File=Z8HU.:Z8A6TSI                                  SAT 08/09/97 13:33 Page:201  
     0-0-0/w STRC(36864)       1 LCNST                      0-0-0/w STRC(72)          1 LONG
     0-0-0/w STRC              1 LTS                        0-0-0/w STRC(360)         1 LTSS
     0-0-0/w STRC(36936)       1 LTS_PTR_ARRAY              0-0-0/w STRC(396)         1 MNEMONIC
     0-0-0/w STRC(144)         1 NEL                        0-0-0/w STRC(216)         1 OPEN_LTS
     0-0-0/w STRC(36864)       1 PAGE                       0-0-0/w STRC(396)         1 PARA
     0-0-0/w STRC(144)         1 PRIME                      0-0-0/w STRC(396)         1 PROC_
     0-0-0/w STRC(396)         1 PROC_DEF                   0-0-0/w STRC(900)         1 PROC_SUPP
     0-0-0/w STRC(396)         1 RD                         0-0-0/w STRC(216)   r     1 REF
     0-0-0/w STRC(108)         1 RENAMES                    0-0-0/w STRC(720)         1 REPORT_01_LTS
     0-0-0/w STRC(432)         1 REPORT_ELEM_LTS            0-0-0/w STRC(252)         1 REPORT_GRP_LTS
     0-0-0/w STRC(1332)        1 REPORT_LTS                 0-0-0/w STRC(144)         1 RVA_LTS
     0-0-0/w STRC(396)         1 SCALAR                     0-0-0/w STRC(396)         1 SD
     0-0-0/w STRC(396)         1 SECTION                    0-0-0/w STRC(396)         1 SEGMENT
     0-0-0/w STRC(360)         1 SEGMENT_LTS                0-0-0/w STRC(396)         1 ST
     0-0-0/w STRC(252)         1 SUM_LTS                    0-0-0/w STRC(396)         1 SWITCH
     0-0-0/w STRC(396)         1 SYMBOLIC_CHAR              0-0-0/w STRC(396)         1 SYMDEF_
     0-0-0/w STRC(396)         1 SYMREF_                    0-0-0/w STRC(396)         1 TEMP
     0-0-0/d STRC(612)         1 USE                        0-0-0/w STRC(252)         1 USE_SUPP
     0-0-0/w STRC(396)   r     1 VARIABLE


   Procedure Z8HU$WALK requires 113 words for executable code.
   Procedure Z8HU$WALK requires 8 words of local(AUTO) storage.

    No errors detected in file Z8HU.:Z8A6TSI    .
