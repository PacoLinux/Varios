VERSION E05

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:1    
        1        1        /*M* KQB$TREE Binary tree routines for COMGROUP QUEUE */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=6,IND=0,IDT=2,SDI=2,CTI=0,ENU=0,AND,DCI=4,CSU=2,ECU=4,THI=0,DTI=0,STI=1
                 7        ,IAD=0,PRB */
        8        8        /**/
        9        9        /*P* NAME:         KQB$TREE
       10       10
       11       11             PURPOSE:      To provide the handling of the binary trees
       12       12                           used by COMGROUP QUEUE.
       13       13
       14       14             DESCRIPTION:  A comgroup has at least two binary trees
       15       15                           associated with it.  Although the nodes in
       16       16                           the different trees contain different information,
       17       17                           a part of their structure is common, to allow
       18       18                           manipulation by these routines, which build,
       19       19                           search, and update a balanced binary tree.
       20       20
       21       21        */
       22       22        /**/
       23       23        KQB$SRCH: PROC (TREEHDR,KEY,NODE$) ALTRET;
       24       24        /**/
       25       25
       26       26
       27       27
       28       28        /**/
       29       29        /* INCLUDES */
       30       30        /**/
       31       31        %INCLUDE KQ_SUBS_C;
       32      331        %INCLUDE KQ_MAC_C;
       33     2881        %INCLUDE HF_LOCK_C;
       34     2895
       35     2896
       36     2897
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:2    
       37     2898        /**/
       38     2899        /* PARAMETERS */
       39     2900        /**/
       40     2901        %KQ_THDR (FPTN=TREEHDR,STCLASS="");
       41     2939    1   DCL KEY CHAR(8) ALIGNED;
       42     2940    1   DCL NODE$ PTR ALIGNED;
       43     2941
       44     2942
       45     2943
       46     2944        /**/
       47     2945        /* BASED STRUCTURES */
       48     2946        /**/
       49     2947        %KQ_BTN (FPTN=KQ$BTN,STCLASS=BASED);
       50     2979    1   DCL BP$ PTR BASED ALIGNED;
       51     2980
       52     2981
       53     2982
       54     2983        /**/
       55     2984        /* AUTO */
       56     2985        /**/
       57     2986    1   DCL BTN$ PTR;
       58     2987    1   DCL A SBIN WORD;
       59     2988    1   DCL P$ PTR;
       60     2989    1   DCL Q$ PTR;
       61     2990    1   DCL R$ PTR;
       62     2991    1   DCL S$ PTR;
       63     2992    1   DCL T$ PTR;
       64     2993    1   DCL Z$ PTR;
       65     2994    1   DCL PRED$ PTR;
       66     2995    1   DCL SUCC$ PTR;
       67     2996
       68     2997
       69     2998
       70     2999        /**/
       71     3000        /* CONSTANT */
       72     3001        /**/
       73     3002        %KQ_BTN (FPTN=BTN_INIT,STCLASS=CONSTANT);
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:3    
       74     3034        %EJECT;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:4    
       75     3035        /*F* NAME:         KQB$SRCH
       76     3036             PURPOSE:      To find a node in a binary tree
       77     3037             DESCRIPTION:  TREEHDR is the tree header (see KQ_THDR),
       78     3038                           KEY is the desired key, and NODE$ will
       79     3039                           be returned pointing to the correct node if found,
       80     3040                           or to the appropriate leaf if not (ALTRET case).
       81     3041
       82     3042        KQB$SRCH: ENTRY (TREEHDR,KEY,NODE$) ALTRET;
       83     3043        */
       84     3044    1         NODE$=ADDR(NIL);
       85     3045
       86     3046    1         BTN$=TREEHDR.ROOT$;
       87     3047    2           DO WHILE (BTN$ ~= ADDR(NIL));
       88     3048    2           NODE$=BTN$;
       89     3049    2           IF KEY < BTN$->KQ$BTN.KEY THEN BTN$=BTN$->KQ$BTN.LSON$;
       90     3050    2           ELSE IF KEY > BTN$->KQ$BTN.KEY THEN BTN$=BTN$->KQ$BTN.RSON$;
       91     3051    2            ELSE RETURN;
       92     3052    2           END;
       93     3053    1         ALTRETURN;
       94     3054        %EJECT;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:5    
       95     3055        /*F* NAME:         KQB$INSERTNL
       96     3056             PURPOSE:      To insert a node in a binary tree without locking
       97     3057                           the tree header.
       98     3058             DESCRIPTION:  TREEHDR is the tree header (see KQ_THDR), KEY is
       99     3059                           the desired key, and NODE$ points to the node
      100     3060                           frame to be inserted.  The routine ALTRETs if
      101     3061                           the key is found, with NODE$ pointing to the node.
      102     3062
      103     3063                           If TREEHDR.LINKS is nonzero, then the node is
      104     3064                           also to be added to the sorted linear node list
      105     3065                           headed by TREEHDR.HEAD$.  When nodes are put on
      106     3066                           this list, they are framed by the based structure
      107     3067                           KB_BTN, and the links are maintained in KB_BTN.FLINK$.
      108     3068
      109     3069                           This insertion algorithm is almost exactly the
      110     3070                           same as Algorithm 'A' in section 6.2.3 of KNUTH
      111     3071                           Volume 3, with all P,Q,R,S,T names preserved.  The
      112     3072                           big difference is that of parent pointers, which
      113     3073                           we must maintain, and also use to chase the chain
      114     3074                           of nodes whose balance factors must be adjusted.
      115     3075
      116     3076                           Locks the tree, and unlocks when done.
      117     3077        */
      118     3078    1   KQB$INSERTNL: ENTRY (TREEHDR,KEY,NODE$) ALTRET;
      119     3079        /**/
      120     3080    1         CALL INS ALTRET(ALTRT1);
      121     3081    1         RETURN;
      122     3082    1   ALTRT1:;
      123     3083    1         ALTRETURN;
      124     3084
      125     3085    1   INS:  PROC ALTRET;
      126     3086    3           DO INHIBIT;
      127     3087    3           TREEHDR.ACTCNT=TREEHDR.ACTCNT+1;
      128     3088    3           P$=TREEHDR.ROOT$;
      129     3089    3           T$=ADDR(TREEHDR.ROOT$);
      130     3090    3           PRED$=ADDR(NIL);
      131     3091    3           S$=P$;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:6    
      132     3092    3           IF P$ = ADDR(NIL) THEN
      133     3093    4             DO;
      134     3094                                /* EMPTY TREE */
      135     3095    4             NODE$->KQ$BTN=BTN_INIT;
      136     3096    4             NODE$->KQ$BTN.KEY=KEY;
      137     3097    4             T$->BP$=NODE$;
      138     3098    4             IF TREEHDR.LINKS ~= 0 THEN
      139     3099    5               DO;
      140     3100    5               TREEHDR.HEAD$=NODE$;
      141     3101    5               NODE$->KQ$BTN.FLINK$=ADDR(NIL);
      142     3102    5               END;
      143     3103    4             TREEHDR.COUNT=1;
      144     3104    4             RETURN;
      145     3105    4             END;
      146     3106
      147     3107                                /* NON-EMPTY TREE */
      148     3108    4             DO FOREVER;
      149     3109    4             IF KEY < P$->KQ$BTN.KEY THEN
      150     3110    5               DO;
      151     3111    5               Q$=P$->KQ$BTN.LSON$;
      152     3112    5               Z$=ADDR(P$->KQ$BTN.LSON$);
      153     3113    5               IF Q$ = ADDR(NIL) THEN GOTO INS1;
      154     3114    5               END;
      155     3115    4             ELSE IF KEY > P$->KQ$BTN.KEY THEN
      156     3116    5                DO;
      157     3117    5                Q$=P$->KQ$BTN.RSON$;
      158     3118    5                Z$=ADDR(P$->KQ$BTN.RSON$);
      159     3119    5                PRED$=P$;
      160     3120    5                IF Q$ = ADDR(NIL) THEN GOTO INS2;
      161     3121    5                END;
      162     3122    4              ELSE
      163     3123    5                DO;
      164     3124    5                NODE$=P$;
      165     3125    5                ALTRETURN;
      166     3126    5                END;
      167     3127    4             IF Q$->KQ$BTN.BF ~= 0 THEN
      168     3128    5               DO;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:7    
      169     3129    5               T$=Z$;
      170     3130    5               S$=Q$;
      171     3131    5               END;
      172     3132    4             P$=Q$;
      173     3133    4             END;
      174     3134
      175     3135                                /* FOUND CORRECT PLACE TO ADD NODE */
      176     3136    3   INS1:   ;
      177     3137    3           P$->KQ$BTN.LSON$=NODE$;
      178     3138    3           GOTO INS3;
      179     3139    3   INS2:   ;
      180     3140    3           P$->KQ$BTN.RSON$=NODE$;
      181     3141    3   INS3:   ;
      182     3142    3           Q$=NODE$;
      183     3143    3           Q$->KQ$BTN=BTN_INIT;
      184     3144    3           Q$->KQ$BTN.KEY=KEY;
      185     3145    3           Q$->KQ$BTN.PRNT$=P$;
      186     3146    3           TREEHDR.COUNT=TREEHDR.COUNT+1;
      187     3147    3           IF TREEHDR.LINKS ~= 0 THEN
      188     3148    4             DO;
      189     3149    4             IF PRED$ ~= ADDR(NIL) THEN
      190     3150    5               DO;
      191     3151    5               Q$->KQ$BTN.FLINK$=PRED$->KQ$BTN.FLINK$;
      192     3152    5               PRED$->KQ$BTN.FLINK$=Q$;
      193     3153    5               END;
      194     3154    4             ELSE
      195     3155    5               DO;
      196     3156    5               Q$->KQ$BTN.FLINK$=TREEHDR.HEAD$;
      197     3157    5               TREEHDR.HEAD$=Q$;
      198     3158    5               END;
      199     3159    4             END;
      200     3160                                /* ADJUST BALANCE FACTORS BACK UP TO S$ */
      201     3161    3           R$=Q$;
      202     3162    4             DO WHILE (P$ ~= S$);
      203     3163    4             IF R$ = P$->KQ$BTN.LSON$ THEN P$->KQ$BTN.BF=-1;
      204     3164    4             ELSE P$->KQ$BTN.BF=1;
      205     3165    4             R$=P$;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:8    
      206     3166    4             P$=P$->KQ$BTN.PRNT$;
      207     3167    4             END;
      208     3168    3           IF R$ = S$->KQ$BTN.LSON$ THEN A=-1;
      209     3169    3           ELSE A=1;
      210     3170                                /* DECIDE IF REBALANCING NEEDED */
      211     3171    3           IF S$->KQ$BTN.BF = 0 THEN
      212     3172    4             DO;
      213     3173    4             S$->KQ$BTN.BF=A;
      214     3174    4             RETURN;
      215     3175    4             END;
      216     3176    3           IF S$->KQ$BTN.BF = -A THEN
      217     3177    4             DO;
      218     3178    4             S$->KQ$BTN.BF=0;
      219     3179    4             RETURN;
      220     3180    4             END;
      221     3181                                /* YES */
      222     3182    3           CALL ROTATE;
      223     3183    3           RETURN;
      224     3184    3           END; /* INHIBIT */
      225     3185    2   END INS;
      226     3186
      227     3187        /*D* NAME:         ROTATE
      228     3188             PURPOSE:      To perform rotation in the tree when required
      229     3189             DESCRIPTION:  S$ points to the node being considered;
      230     3190                           R$ points to his son on the side to which S$
      231     3191                           has become too heavy; A=1 if it's right, -1
      232     3192                           else.  T$ points to S$'s parent's link to
      233     3193                           S$. ALTRETs in the CASE3 (single rotate with
      234     3194                           balanced node) situation.
      235     3195        */
      236     3196    1   ROTATE: PROC ALTRET;
      237     3197    3           DO INHIBIT;
      238     3198    3           IF R$->KQ$BTN.BF = A THEN
      239     3199    4             DO;
      240     3200                                /* SINGLE ROTATION */
      241     3201    4             S$->KQ$BTN.BF=0;
      242     3202    4             R$->KQ$BTN.BF=0;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:9    
      243     3203    4             CALL SNGL;
      244     3204    4             END;
      245     3205    3           ELSE IF R$->KQ$BTN.BF = -A THEN
      246     3206    4              DO;
      247     3207                                /* DOUBLE ROTATION */
      248     3208    4              IF A = 1 THEN
      249     3209    5                DO;
      250     3210    5                P$=R$->KQ$BTN.LSON$;
      251     3211    5                R$->KQ$BTN.PRNT$=P$;
      252     3212    5                P$->KQ$BTN.PRNT$=S$->KQ$BTN.PRNT$;
      253     3213    5                S$->KQ$BTN.PRNT$=P$;
      254     3214    5                T$->BP$=P$;
      255     3215    5                R$->KQ$BTN.LSON$=P$->KQ$BTN.RSON$;
      256     3216    5                P$->KQ$BTN.RSON$=R$;
      257     3217    5                S$->KQ$BTN.RSON$=P$->KQ$BTN.LSON$;
      258     3218    5                P$->KQ$BTN.LSON$=S$;
      259     3219    5                IF S$->KQ$BTN.RSON$ ~= ADDR(NIL) THEN
      260     3220    5                 S$->KQ$BTN.RSON$->KQ$BTN.PRNT$=S$;
      261     3221    5                IF R$->KQ$BTN.LSON$ ~= ADDR(NIL) THEN
      262     3222    5                 R$->KQ$BTN.LSON$->KQ$BTN.PRNT$=R$;
      263     3223    5                END;
      264     3224    4              ELSE
      265     3225    5                DO;
      266     3226    5                P$=R$->KQ$BTN.RSON$;
      267     3227    5                R$->KQ$BTN.PRNT$=P$;
      268     3228    5                P$->KQ$BTN.PRNT$=S$->KQ$BTN.PRNT$;
      269     3229    5                S$->KQ$BTN.PRNT$=P$;
      270     3230    5                T$->BP$=P$;
      271     3231    5                R$->KQ$BTN.RSON$=P$->KQ$BTN.LSON$;
      272     3232    5                P$->KQ$BTN.LSON$=R$;
      273     3233    5                S$->KQ$BTN.LSON$=P$->KQ$BTN.RSON$;
      274     3234    5                P$->KQ$BTN.RSON$=S$;
      275     3235    5                IF S$->KQ$BTN.LSON$ ~= ADDR(NIL) THEN S$->KQ$BTN.LSON$->KQ$BTN.PRNT$=S$
              3235                         ;
      276     3236    5                IF R$->KQ$BTN.RSON$ ~= ADDR(NIL) THEN R$->KQ$BTN.RSON$->KQ$BTN.PRNT$=R$
              3236                         ;
      277     3237    5                END;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:10   
      278     3238    4              IF P$->KQ$BTN.BF = A THEN
      279     3239    5                DO;
      280     3240    5                S$->KQ$BTN.BF=-A;
      281     3241    5                R$->KQ$BTN.BF=0;
      282     3242    5                END;
      283     3243    4              ELSE IF P$->KQ$BTN.BF = 0 THEN
      284     3244    5                 DO;
      285     3245    5                 S$->KQ$BTN.BF=0;
      286     3246    5                 R$->KQ$BTN.BF=0;
      287     3247    5                 END;
      288     3248    4               ELSE
      289     3249    5                 DO;
      290     3250                                /* P$->KQ$BTN.BF = -A */
      291     3251    5                 S$->KQ$BTN.BF=0;
      292     3252    5                 R$->KQ$BTN.BF=A;
      293     3253    5                 END;
      294     3254    4              P$->KQ$BTN.BF=0;
      295     3255    4              END;
      296     3256    3            ELSE
      297     3257    4              DO;
      298     3258                                /* SINGLE ROTATION WHEN R$ IS BALANCED;
      299     3259                                   OCCURS ONLY DURING DELETES */
      300     3260    4              R$->KQ$BTN.BF=-A;
      301     3261    4              CALL SNGL;
      302     3262    4              ALTRETURN;
      303     3263    4              END;
      304     3264    3           RETURN;
      305     3265    3           END; /* INHIBIT */
      306     3266    2   SNGL: PROC;
      307     3267    4           DO INHIBIT;
      308     3268    4           P$=R$;
      309     3269    4           R$->KQ$BTN.PRNT$=S$->KQ$BTN.PRNT$;
      310     3270    4           T$->BP$=R$;
      311     3271    4           S$->KQ$BTN.PRNT$=R$;
      312     3272    4           IF A = 1 THEN
      313     3273    5             DO;
      314     3274    5             S$->KQ$BTN.RSON$=R$->KQ$BTN.LSON$;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:11   
      315     3275    5             R$->KQ$BTN.LSON$=S$;
      316     3276    5             IF S$->KQ$BTN.RSON$ ~= ADDR(NIL) THEN
      317     3277    5              S$->KQ$BTN.RSON$->KQ$BTN.PRNT$=S$;
      318     3278    5             END;
      319     3279    4           ELSE
      320     3280    5             DO;
      321     3281    5             S$->KQ$BTN.LSON$=R$->KQ$BTN.RSON$;
      322     3282    5             R$->KQ$BTN.RSON$=S$;
      323     3283    5             IF S$->KQ$BTN.LSON$ ~= ADDR(NIL) THEN
      324     3284    5              S$->KQ$BTN.LSON$->KQ$BTN.PRNT$=S$;
      325     3285    5             END;
      326     3286    4           RETURN;
      327     3287    4           END; /* INHIBIT */
      328     3288    3   END SNGL;
      329     3289    2   END ROTATE;
      330     3290        %EJECT;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:12   
      331     3291        /*F* NAME:         KQB$DELETENL
      332     3292             PURPOSE:      To delete a node from a binary tree without
      333     3293                           locking the tree header.
      334     3294             DESCRIPTION:  TREEHDR is the tree header.  NODE$ points to the
      335     3295                           node to be deleted.  ALTRETs if NODE$ not in the tree.
      336     3296
      337     3297                           The algorithm is that given in KNUTH VOL3 6.2.3
      338     3298
      339     3299                           Locks the tree, and unlocks when done.
      340     3300        */
      341     3301    1   KQB$DELETENL: ENTRY (TREEHDR,KEY,NODE$) ALTRET;
      342     3302        /**/
      343     3303    1         CALL DELETE ALTRET(ALTRT1);
      344     3304    1         RETURN;
      345     3305    1   DELETE: PROC ALTRET;
      346     3306    3           DO INHIBIT;
      347     3307    3           TREEHDR.ACTCNT=TREEHDR.ACTCNT+1;
      348     3308    3           BTN$=TREEHDR.ROOT$;
      349     3309    4             DO WHILE (BTN$ ~= ADDR(NIL));
      350     3310    4             IF NODE$->KQ$BTN.KEY < BTN$->KQ$BTN.KEY THEN
      351     3311    4              BTN$=BTN$->KQ$BTN.LSON$;
      352     3312    4             ELSE IF NODE$->KQ$BTN.KEY > BTN$->KQ$BTN.KEY THEN
      353     3313    4               BTN$=BTN$->KQ$BTN.RSON$;
      354     3314    4              ELSE GOTO DEL00;
      355     3315    4             END;
      356     3316    3           ALTRETURN;
      357     3317    3   DEL00:  ;
      358     3318    3           IF BTN$ ~= NODE$ THEN ALTRETURN;
      359     3319    3           TREEHDR.COUNT=TREEHDR.COUNT-1;
      360     3320    3           P$=NODE$;
      361     3321                                /* DELETE FROM LINEAR LIST */
      362     3322    3           IF TREEHDR.LINKS ~= 0 THEN
      363     3323    4             DO;
      364     3324    4             CALL GETPRED ALTRET(DEL0);
      365     3325    4             PRED$->KQ$BTN.FLINK$=P$->KQ$BTN.FLINK$;
      366     3326    4             GOTO DEL1;
      367     3327    4   DEL0:     ;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:13   
      368     3328    4             TREEHDR.HEAD$=P$->KQ$BTN.FLINK$;
      369     3329    4   DEL1:     ;
      370     3330    4             END;
      371     3331    3           Z$=P$->KQ$BTN.PRNT$;
      372     3332    3           IF Z$ = ADDR(NIL) THEN T$=ADDR(TREEHDR.ROOT$);
      373     3333    3           ELSE
      374     3334    4             DO;
      375     3335    4             IF P$ = Z$->KQ$BTN.LSON$ THEN
      376     3336    5               DO;
      377     3337    5               A=-1;
      378     3338    5               T$=ADDR(Z$->KQ$BTN.LSON$);
      379     3339    5               END;
      380     3340    4             ELSE
      381     3341    5               DO;
      382     3342    5               A=1;
      383     3343    5               T$=ADDR(Z$->KQ$BTN.RSON$);
      384     3344    5               END;
      385     3345    4             END;
      386     3346    3           IF P$->KQ$BTN.LSON$ = ADDR(NIL) THEN
      387     3347    4             DO;
      388     3348    4             T$->BP$=P$->KQ$BTN.RSON$;
      389     3349    4             IF P$->KQ$BTN.RSON$ ~= ADDR(NIL) THEN
      390     3350    4              P$->KQ$BTN.RSON$->KQ$BTN.PRNT$=Z$;
      391     3351    4             END;
      392     3352    3           ELSE IF P$->KQ$BTN.RSON$ = ADDR(NIL) THEN
      393     3353    4              DO;
      394     3354    4              T$->BP$=P$->KQ$BTN.LSON$;
      395     3355    4              IF P$->KQ$BTN.LSON$ ~= ADDR(NIL) THEN
      396     3356    4               P$->KQ$BTN.LSON$->KQ$BTN.PRNT$=Z$;
      397     3357    4              END;
      398     3358    3            ELSE
      399     3359    4              DO;
      400     3360                                /* NEITHER OF P'S LINKS ARE NIL.  PUT HIS
      401     3361                                   SUCCESSOR IN HIS PLACE, DELETING THE
      402     3362                                   SPOT WHERE HIS SUCCESSOR WAS, LEAVING
      403     3363                                   Z$ POINTING AT HIS SUCCESSOR'S OLD
      404     3364                                   PARENT'S SPOT, AND ADJUST A TO REFLECT
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:14   
      405     3365                                   WHICH SIDE OF THAT NODE THE DELETION WAS
      406     3366                                   ON. */
      407     3367    4              CALL GETSUCC;
      408     3368    4              T$->BP$=SUCC$;
      409     3369    4              Z$=SUCC$->KQ$BTN.PRNT$;
      410     3370    4              SUCC$->KQ$BTN.PRNT$=P$->KQ$BTN.PRNT$;
      411     3371    4              SUCC$->KQ$BTN.LSON$=P$->KQ$BTN.LSON$;
      412     3372    4              SUCC$->KQ$BTN.LSON$->KQ$BTN.PRNT$=SUCC$;
      413     3373    4              IF Z$ = P$ THEN
      414     3374    5                DO;
      415     3375    5                Z$=SUCC$;
      416     3376    5                A=1;
      417     3377    5                END;
      418     3378    4              ELSE
      419     3379    5                DO;
      420     3380    5                A=-1;
      421     3381    5                R$=SUCC$->KQ$BTN.RSON$;
      422     3382    5                SUCC$->KQ$BTN.RSON$=P$->KQ$BTN.RSON$;
      423     3383    5                SUCC$->KQ$BTN.RSON$->KQ$BTN.PRNT$=SUCC$;
      424     3384    5                Z$->KQ$BTN.LSON$=R$;
      425     3385    5                IF R$ ~= ADDR(NIL) THEN
      426     3386    5                 R$->KQ$BTN.PRNT$ = Z$;
      427     3387    5                END;
      428     3388    4              SUCC$->KQ$BTN.BF=P$->KQ$BTN.BF;
      429     3389    4              END;
      430     3390
      431     3391
      432     3392                                /* WHEN WE GET HERE, Z$ POINTS TO THE FIRST
      433     3393                                   NODE WHICH MIGHT REQUIRE REBALANCE, AND
      434     3394                                   A REFLECTS WHICH SIDE THE DELETION WAS ON.  */
      435     3395    3           IF Z$ = ADDR(NIL) THEN RETURN;
      436     3396    3   DEL2:   ;
      437     3397                                /* SET UP T$ FOR ROTATE */
      438     3398    3           IF Z$->KQ$BTN.PRNT$ = ADDR(NIL) THEN T$=ADDR(TREEHDR.ROOT$);
      439     3399    3           ELSE
      440     3400    4             DO;
      441     3401    4             IF Z$ = Z$->KQ$BTN.PRNT$->KQ$BTN.RSON$ THEN
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:15   
      442     3402    4              T$=ADDR(Z$->KQ$BTN.PRNT$->KQ$BTN.RSON$);
      443     3403    4             ELSE T$=ADDR(Z$->KQ$BTN.PRNT$->KQ$BTN.LSON$);
      444     3404    4             END;
      445     3405    3           S$=Z$;
      446     3406    3           Z$=Z$->KQ$BTN.PRNT$;
      447     3407    3           IF S$->KQ$BTN.BF = A THEN S$->KQ$BTN.BF=0;
      448     3408    3           ELSE IF S$->KQ$BTN.BF = 0 THEN
      449     3409    4              DO;
      450     3410    4              S$->KQ$BTN.BF=-A;
      451     3411    4              RETURN;
      452     3412    4              END;
      453     3413    3            ELSE
      454     3414    4              DO;
      455     3415    4              IF A=1 THEN R$=S$->KQ$BTN.LSON$;
      456     3416    4              ELSE R$=S$->KQ$BTN.RSON$;
      457     3417    4              A=-A;
      458     3418    4              CALL ROTATE ALTRET(DEL3);
      459     3419    4              END;
      460     3420                                /* NOW RE-ADJUST A */
      461     3421    3           IF Z$ ~= ADDR(NIL) THEN
      462     3422    4             DO;
      463     3423    4             IF T$ = ADDR(Z$->KQ$BTN.RSON$) THEN A=1;
      464     3424    4             ELSE A=-1;
      465     3425    4             GOTO DEL2;
      466     3426    4             END;
      467     3427    3   DEL3:   ;
      468     3428    3           RETURN;
      469     3429    3           END; /* INHIBIT */
      470     3430
      471     3431
      472     3432        /* FIND PRED OF P$; ALTRET IF NONE W/ PRED$ = NIL */
      473     3433    2   GETPRED: PROC ALTRET;
      474     3434    4           DO INHIBIT;
      475     3435    4           PRED$=ADDR(NIL);
      476     3436    4           IF P$->KQ$BTN.LSON$ ~= ADDR(NIL) THEN
      477     3437    5             DO;
      478     3438    5             PRED$=P$->KQ$BTN.LSON$;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:16   
      479     3439    6               DO WHILE (PRED$->KQ$BTN.RSON$ ~= ADDR(NIL));
      480     3440    6               PRED$=PRED$->KQ$BTN.RSON$;
      481     3441    6               END;
      482     3442    5             RETURN;
      483     3443    5             END;
      484     3444    4           S$=P$;
      485     3445    5             DO WHILE (S$->KQ$BTN.PRNT$ ~= ADDR(NIL));
      486     3446    5             IF S$ = S$->KQ$BTN.PRNT$->KQ$BTN.RSON$ THEN
      487     3447    6               DO;
      488     3448    6               PRED$=S$->KQ$BTN.PRNT$;
      489     3449    6               RETURN;
      490     3450    6               END;
      491     3451    5             S$=S$->KQ$BTN.PRNT$;
      492     3452    5             END;
      493     3453    4           ALTRETURN;
      494     3454    4           END; /* INHIBIT */
      495     3455    3   END GETPRED;
      496     3456        /* SAME AS GETPRED BUT SUCCESSOR */
      497     3457    2   GETSUCC: PROC ALTRET;
      498     3458    4           DO INHIBIT;
      499     3459    4           IF TREEHDR.LINKS ~= 0 THEN
      500     3460    5             DO;
      501     3461    5             SUCC$=P$->KQ$BTN.FLINK$;
      502     3462    5             IF SUCC$ = ADDR(NIL) THEN ALTRETURN;
      503     3463    5             RETURN;
      504     3464    5             END;
      505     3465    4           SUCC$=ADDR(NIL);
      506     3466    4           IF P$->KQ$BTN.RSON$ ~= ADDR(NIL) THEN
      507     3467    5             DO;
      508     3468    5             SUCC$=P$->KQ$BTN.RSON$;
      509     3469    6               DO WHILE (SUCC$->KQ$BTN.LSON$ ~= ADDR(NIL));
      510     3470    6               SUCC$=SUCC$->KQ$BTN.LSON$;
      511     3471    6               END;
      512     3472    5             RETURN;
      513     3473    5             END;
      514     3474    4           S$=P$;
      515     3475    5             DO WHILE (P$->KQ$BTN.PRNT$ ~= ADDR(NIL));
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:17   
      516     3476    5             IF S$ = S$->KQ$BTN.PRNT$->KQ$BTN.LSON$ THEN
      517     3477    6               DO;
      518     3478    6               SUCC$=S$->KQ$BTN.PRNT$;
      519     3479    6               RETURN;
      520     3480    6               END;
      521     3481    5             S$=S$->KQ$BTN.PRNT$;
      522     3482    5             END;
      523     3483    4           ALTRETURN;
      524     3484    4           END; /* INHIBIT */
      525     3485    3   END GETSUCC;
      526     3486    2   END DELETE;
      527     3487    1   END KQB$SRCH;

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:18   
--  Include file information  --

   HF_LOCK_C.:E05TOU  cannot be made into a system file and is referenced.
   KQ_MAC_C.:E05TOU  is referenced.
   KQ_SUBS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure KQB$SRCH.

   Procedure KQB$SRCH requires 675 words for executable code.
   Procedure KQB$SRCH requires 24 words of local(AUTO) storage.

    No errors detected in file KQB$TREE.:E05TSI    .

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:19   

 Object Unit name= KQB$SRCH                                   File name= KQB$TREE.:E05TOU
 UTS= JUL 30 '97 01:24:22.88 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      7      7  KQB$SRCH
    1   Proc  even  none   675   1243  KQB$SRCH

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        3  KQB$SRCH
     1     36          yes     yes      Std        3  KQB$INSERTNL
     1    560          yes     yes      Std        3  KQB$DELETENL

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:20   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:21   


        1        1        /*M* KQB$TREE Binary tree routines for COMGROUP QUEUE */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7       /*X* DMC,PLM=6,IND=0,IDT=2,SDI=2,CTI=0,ENU=0,AND,DCI=4,CSU=2,ECU=4,THI=0,DTI=0,STI=1
                 7        ,IAD=0,PRB */
        8        8        /**/
        9        9        /*P* NAME:         KQB$TREE
       10       10
       11       11             PURPOSE:      To provide the handling of the binary trees
       12       12                           used by COMGROUP QUEUE.
       13       13
       14       14             DESCRIPTION:  A comgroup has at least two binary trees
       15       15                           associated with it.  Although the nodes in
       16       16                           the different trees contain different information,
       17       17                           a part of their structure is common, to allow
       18       18                           manipulation by these routines, which build,
       19       19                           search, and update a balanced binary tree.
       20       20
       21       21        */
       22       22        /**/
       23       23        KQB$SRCH: PROC (TREEHDR,KEY,NODE$) ALTRET;

     23  1 000000   000000 700200 xent  KQB$SRCH     TSX0  ! X66_AUTO_3
         1 000001   000030 000003                    ZERO    24,3

       24       24        /**/
       25       25
       26       26
       27       27
       28       28        /**/
       29       29        /* INCLUDES */
       30       30        /**/
       31       31        %INCLUDE KQ_SUBS_C;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:22   
       32      331        %INCLUDE KQ_MAC_C;
       33     2881        %INCLUDE HF_LOCK_C;
       34     2895
       35     2896
       36     2897
       37     2898        /**/
       38     2899        /* PARAMETERS */
       39     2900        /**/
       40     2901        %KQ_THDR (FPTN=TREEHDR,STCLASS="");
       41     2939    1   DCL KEY CHAR(8) ALIGNED;
       42     2940    1   DCL NODE$ PTR ALIGNED;
       43     2941
       44     2942
       45     2943
       46     2944        /**/
       47     2945        /* BASED STRUCTURES */
       48     2946        /**/
       49     2947        %KQ_BTN (FPTN=KQ$BTN,STCLASS=BASED);
       50     2979    1   DCL BP$ PTR BASED ALIGNED;
       51     2980
       52     2981
       53     2982
       54     2983        /**/
       55     2984        /* AUTO */
       56     2985        /**/
       57     2986    1   DCL BTN$ PTR;
       58     2987    1   DCL A SBIN WORD;
       59     2988    1   DCL P$ PTR;
       60     2989    1   DCL Q$ PTR;
       61     2990    1   DCL R$ PTR;
       62     2991    1   DCL S$ PTR;
       63     2992    1   DCL T$ PTR;
       64     2993    1   DCL Z$ PTR;
       65     2994    1   DCL PRED$ PTR;
       66     2995    1   DCL SUCC$ PTR;
       67     2996
       68     2997
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:23   
       69     2998
       70     2999        /**/
       71     3000        /* CONSTANT */
       72     3001        /**/
       73     3002        %KQ_BTN (FPTN=BTN_INIT,STCLASS=CONSTANT);
       74     3034        %EJECT;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:24   
       75     3035        /*F* NAME:         KQB$SRCH
       76     3036             PURPOSE:      To find a node in a binary tree
       77     3037             DESCRIPTION:  TREEHDR is the tree header (see KQ_THDR),
       78     3038                           KEY is the desired key, and NODE$ will
       79     3039                           be returned pointing to the correct node if found,
       80     3040                           or to the appropriate leaf if not (ALTRET case).
       81     3041
       82     3042        KQB$SRCH: ENTRY (TREEHDR,KEY,NODE$) ALTRET;
       83     3043        */
       84     3044    1         NODE$=ADDR(NIL);

   3044  1 000002   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000003   200005 470500                    LDP0    @NODE$,,AUTO
         1 000004   000000 756100                    STQ     0,,PR0

       85     3045
       86     3046    1         BTN$=TREEHDR.ROOT$;

   3046  1 000005   200003 471500                    LDP1    @TREEHDR,,AUTO
         1 000006   100002 236100                    LDQ     2,,PR1
         1 000007   200006 756100                    STQ     BTN$,,AUTO

       87     3047    2           DO WHILE (BTN$ ~= ADDR(NIL));

   3047  1 000010   000033 710000 1                  TRA     s:3052

       88     3048    2           NODE$=BTN$;

   3048  1 000011   200006 236100                    LDQ     BTN$,,AUTO
         1 000012   200005 470500                    LDP0    @NODE$,,AUTO
         1 000013   000000 756100                    STQ     0,,PR0

       89     3049    2           IF KEY < BTN$->KQ$BTN.KEY THEN BTN$=BTN$->KQ$BTN.LSON$;

   3049  1 000014   200004 471500                    LDP1    @KEY,,AUTO
         1 000015   200006 473500                    LDP3    BTN$,,AUTO
         1 000016   040100 106500                    CMPC    fill='040'O
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:25   
         1 000017   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
         1 000020   300005 000010                    ADSC9   5,,PR3                   cn=0,n=8
         1 000021   000025 603000 1                  TRC     s:3050

   3049  1 000022   300002 236100                    LDQ     2,,PR3
         1 000023   200006 756100                    STQ     BTN$,,AUTO
         1 000024   000033 710000 1                  TRA     s:3052

       90     3050    2           ELSE IF KEY > BTN$->KQ$BTN.KEY THEN BTN$=BTN$->KQ$BTN.RSON$;

   3050  1 000025   000032 602000 1                  TNC     s:3051
         1 000026   000032 600000 1                  TZE     s:3051

   3050  1 000027   300003 236100                    LDQ     3,,PR3
         1 000030   200006 756100                    STQ     BTN$,,AUTO
         1 000031   000033 710000 1                  TRA     s:3052

       91     3051    2            ELSE RETURN;

   3051  1 000032   000000 702200 xent               TSX2  ! X66_ARET

       92     3052    2           END;

   3052  1 000033   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000034   000011 601000 1                  TNZ     s:3048

       93     3053    1         ALTRETURN;

   3053  1 000035   000000 702200 xent               TSX2  ! X66_AALT

       94     3054        %EJECT;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:26   
       95     3055        /*F* NAME:         KQB$INSERTNL
       96     3056             PURPOSE:      To insert a node in a binary tree without locking
       97     3057                           the tree header.
       98     3058             DESCRIPTION:  TREEHDR is the tree header (see KQ_THDR), KEY is
       99     3059                           the desired key, and NODE$ points to the node
      100     3060                           frame to be inserted.  The routine ALTRETs if
      101     3061                           the key is found, with NODE$ pointing to the node.
      102     3062
      103     3063                           If TREEHDR.LINKS is nonzero, then the node is
      104     3064                           also to be added to the sorted linear node list
      105     3065                           headed by TREEHDR.HEAD$.  When nodes are put on
      106     3066                           this list, they are framed by the based structure
      107     3067                           KB_BTN, and the links are maintained in KB_BTN.FLINK$.
      108     3068
      109     3069                           This insertion algorithm is almost exactly the
      110     3070                           same as Algorithm 'A' in section 6.2.3 of KNUTH
      111     3071                           Volume 3, with all P,Q,R,S,T names preserved.  The
      112     3072                           big difference is that of parent pointers, which
      113     3073                           we must maintain, and also use to chase the chain
      114     3074                           of nodes whose balance factors must be adjusted.
      115     3075
      116     3076                           Locks the tree, and unlocks when done.
      117     3077        */
      118     3078    1   KQB$INSERTNL: ENTRY (TREEHDR,KEY,NODE$) ALTRET;

   3078  1 000036   000000 700200 xent  KQB$INSERTNL TSX0  ! X66_AUTO_3
         1 000037   000030 000003                    ZERO    24,3

      119     3079        /**/
      120     3080    1         CALL INS ALTRET(ALTRT1);

   3080  1 000040   000044 701000 1                  TSX1    INS
         1 000041   000043 702000 1                  TSX2    ALTRT1

      121     3081    1         RETURN;

   3081  1 000042   000000 702200 xent               TSX2  ! X66_ARET
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:27   

   3078  1 000043                       ALTRT1       null
      122     3082    1   ALTRT1:;
      123     3083    1         ALTRETURN;

   3083  1 000043   000000 702200 xent               TSX2  ! X66_AALT

      124     3084
      125     3085    1   INS:  PROC ALTRET;

   3085  1 000044   200020 741300       INS          STX1  ! SUCC$+1,,AUTO

      126     3086    3           DO INHIBIT;

      127     3087    3           TREEHDR.ACTCNT=TREEHDR.ACTCNT+1;

   3087  1 000045   200003 470700                    LDP0  ! @TREEHDR,,AUTO
         1 000046   000005 220300                    LDX0  ! 5,,PR0
         1 000047   000001 622210                    EAX2  ! 1,X0
         1 000050   000005 742300                    STX2  ! 5,,PR0

      128     3088    3           P$=TREEHDR.ROOT$;

   3088  1 000051   000002 236300                    LDQ   ! 2,,PR0
         1 000052   200010 756300                    STQ   ! P$,,AUTO

      129     3089    3           T$=ADDR(TREEHDR.ROOT$);

   3089  1 000053   200003 236300                    LDQ   ! @TREEHDR,,AUTO
         1 000054   000002 036203                    ADLQ  ! 2,DU
         1 000055   200014 756300                    STQ   ! T$,,AUTO

      130     3090    3           PRED$=ADDR(NIL);

   3090  1 000056   000001 236200 xsym               LDQ   ! B_VECTNIL+1
         1 000057   200016 756300                    STQ   ! PRED$,,AUTO

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:28   
      131     3091    3           S$=P$;

   3091  1 000060   200010 236300                    LDQ   ! P$,,AUTO
         1 000061   200013 756300                    STQ   ! S$,,AUTO

      132     3092    3           IF P$ = ADDR(NIL) THEN

   3092  1 000062   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 000063   000114 601200 1                  TNZ   ! s:3109

      133     3093    4             DO;

      134     3094                                /* EMPTY TREE */
      135     3095    4             NODE$->KQ$BTN=BTN_INIT;

   3095  1 000064   200005 471700                    LDP1  ! @NODE$,,AUTO
         1 000065   100000 473700                    LDP3  ! 0,,PR1
         1 000066   000100 100600                    MLR   ! fill='000'O
         1 000067   000000 000034 0                  ADSC9   BTN_INIT                 cn=0,n=28
         1 000070   300000 000034                    ADSC9   0,,PR3                   cn=0,n=28

      136     3096    4             NODE$->KQ$BTN.KEY=KEY;

   3096  1 000071   100000 473700                    LDP3  ! 0,,PR1
         1 000072   200004 474700                    LDP4  ! @KEY,,AUTO
         1 000073   040100 100700                    MLR   ! fill='040'O
         1 000074   400000 000010                    ADSC9   0,,PR4                   cn=0,n=8
         1 000075   300005 000010                    ADSC9   5,,PR3                   cn=0,n=8

      137     3097    4             T$->BP$=NODE$;

   3097  1 000076   100000 236300                    LDQ   ! 0,,PR1
         1 000077   200014 473700                    LDP3  ! T$,,AUTO
         1 000100   300000 756300                    STQ   ! 0,,PR3

      138     3098    4             IF TREEHDR.LINKS ~= 0 THEN

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:29   
   3098  1 000101   000003 235300                    LDA   ! 3,,PR0
         1 000102   000110 600200 1                  TZE   ! s:3103

      139     3099    5               DO;

      140     3100    5               TREEHDR.HEAD$=NODE$;

   3100  1 000103   100000 236300                    LDQ   ! 0,,PR1
         1 000104   000004 756300                    STQ   ! 4,,PR0

      141     3101    5               NODE$->KQ$BTN.FLINK$=ADDR(NIL);

   3101  1 000105   100000 475700                    LDP5  ! 0,,PR1
         1 000106   000001 236200 xsym               LDQ   ! B_VECTNIL+1
         1 000107   500004 756300                    STQ   ! 4,,PR5

      142     3102    5               END;

      143     3103    4             TREEHDR.COUNT=1;

   3103  1 000110   000001 220203                    LDX0  ! 1,DU
         1 000111   000005 440300                    SXL0  ! 5,,PR0

      144     3104    4             RETURN;

   3104  1 000112   200020 221300                    LDX1  ! SUCC$+1,,AUTO
         1 000113   000001 702211                    TSX2  ! 1,X1

      145     3105    4             END;
      146     3106
      147     3107                                /* NON-EMPTY TREE */
      148     3108    4             DO FOREVER;

      149     3109    4             IF KEY < P$->KQ$BTN.KEY THEN

   3109  1 000114   200004 470700                    LDP0  ! @KEY,,AUTO
         1 000115   200010 471700                    LDP1  ! P$,,AUTO
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:30   
         1 000116   040100 106700                    CMPC  ! fill='040'O
         1 000117   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         1 000120   100005 000010                    ADSC9   5,,PR1                   cn=0,n=8
         1 000121   000133 603200 1                  TRC   ! s:3115

      150     3110    5               DO;

      151     3111    5               Q$=P$->KQ$BTN.LSON$;

   3111  1 000122   100002 236300                    LDQ   ! 2,,PR1
         1 000123   200011 756300                    STQ   ! Q$,,AUTO

      152     3112    5               Z$=ADDR(P$->KQ$BTN.LSON$);

   3112  1 000124   200010 236300                    LDQ   ! P$,,AUTO
         1 000125   000002 036203                    ADLQ  ! 2,DU
         1 000126   200015 756300                    STQ   ! Z$,,AUTO

      153     3113    5               IF Q$ = ADDR(NIL) THEN GOTO INS1;

   3113  1 000127   200011 236300                    LDQ   ! Q$,,AUTO
         1 000130   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 000131   000170 600200 1                  TZE   ! INS1

      154     3114    5               END;

   3114  1 000132   000155 710200 1                  TRA   ! s:3127

      155     3115    4             ELSE IF KEY > P$->KQ$BTN.KEY THEN

   3115  1 000133   000150 602200 1                  TNC   ! s:3124
         1 000134   000150 600200 1                  TZE   ! s:3124

      156     3116    5                DO;

      157     3117    5                Q$=P$->KQ$BTN.RSON$;

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:31   
   3117  1 000135   100003 236300                    LDQ   ! 3,,PR1
         1 000136   200011 756300                    STQ   ! Q$,,AUTO

      158     3118    5                Z$=ADDR(P$->KQ$BTN.RSON$);

   3118  1 000137   200010 236300                    LDQ   ! P$,,AUTO
         1 000140   000003 036203                    ADLQ  ! 3,DU
         1 000141   200015 756300                    STQ   ! Z$,,AUTO

      159     3119    5                PRED$=P$;

   3119  1 000142   200010 236300                    LDQ   ! P$,,AUTO
         1 000143   200016 756300                    STQ   ! PRED$,,AUTO

      160     3120    5                IF Q$ = ADDR(NIL) THEN GOTO INS2;

   3120  1 000144   200011 236300                    LDQ   ! Q$,,AUTO
         1 000145   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 000146   000174 600200 1                  TZE   ! INS2

      161     3121    5                END;

   3121  1 000147   000155 710200 1                  TRA   ! s:3127

      162     3122    4              ELSE
      163     3123    5                DO;

      164     3124    5                NODE$=P$;

   3124  1 000150   200010 236300                    LDQ   ! P$,,AUTO
         1 000151   200005 473700                    LDP3  ! @NODE$,,AUTO
         1 000152   300000 756300                    STQ   ! 0,,PR3

      165     3125    5                ALTRETURN;

   3125  1 000153   200020 221300                    LDX1  ! SUCC$+1,,AUTO
         1 000154   000000 702211                    TSX2  ! 0,X1
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:32   

      166     3126    5                END;
      167     3127    4             IF Q$->KQ$BTN.BF ~= 0 THEN

   3127  1 000155   200011 473700                    LDP3  ! Q$,,AUTO
         1 000156   300000 236300                    LDQ   ! 0,,PR3
         1 000157   000777 316207                    CANQ  ! 511,DL
         1 000160   000165 600200 1                  TZE   ! s:3132

      168     3128    5               DO;

      169     3129    5               T$=Z$;

   3129  1 000161   200015 236300                    LDQ   ! Z$,,AUTO
         1 000162   200014 756300                    STQ   ! T$,,AUTO

      170     3130    5               S$=Q$;

   3130  1 000163   200011 236300                    LDQ   ! Q$,,AUTO
         1 000164   200013 756300                    STQ   ! S$,,AUTO

      171     3131    5               END;

      172     3132    4             P$=Q$;

   3132  1 000165   200011 236300                    LDQ   ! Q$,,AUTO
         1 000166   200010 756300                    STQ   ! P$,,AUTO

      173     3133    4             END;

   3133  1 000167   000114 710200 1                  TRA   ! s:3109

   3125  1 000170                       INS1         null
      174     3134
      175     3135                                /* FOUND CORRECT PLACE TO ADD NODE */
      176     3136    3   INS1:   ;
      177     3137    3           P$->KQ$BTN.LSON$=NODE$;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:33   

   3137  1 000170   200005 473700                    LDP3  ! @NODE$,,AUTO
         1 000171   300000 236300                    LDQ   ! 0,,PR3
         1 000172   100002 756300                    STQ   ! 2,,PR1

      178     3138    3           GOTO INS3;

   3138  1 000173   000177 710200 1                  TRA   ! INS3

   3137  1 000174                       INS2         null
      179     3139    3   INS2:   ;
      180     3140    3           P$->KQ$BTN.RSON$=NODE$;

   3140  1 000174   200005 473700                    LDP3  ! @NODE$,,AUTO
         1 000175   300000 236300                    LDQ   ! 0,,PR3
         1 000176   100003 756300                    STQ   ! 3,,PR1

   3140  1 000177                       INS3         null
      181     3141    3   INS3:   ;
      182     3142    3           Q$=NODE$;

   3142  1 000177   300000 236300                    LDQ   ! 0,,PR3
         1 000200   200011 756300                    STQ   ! Q$,,AUTO

      183     3143    3           Q$->KQ$BTN=BTN_INIT;

   3143  1 000201   200011 474700                    LDP4  ! Q$,,AUTO
         1 000202   000100 100600                    MLR   ! fill='000'O
         1 000203   000000 000034 0                  ADSC9   BTN_INIT                 cn=0,n=28
         1 000204   400000 000034                    ADSC9   0,,PR4                   cn=0,n=28

      184     3144    3           Q$->KQ$BTN.KEY=KEY;

   3144  1 000205   040100 100700                    MLR   ! fill='040'O
         1 000206   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         1 000207   400005 000010                    ADSC9   5,,PR4                   cn=0,n=8

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:34   
      185     3145    3           Q$->KQ$BTN.PRNT$=P$;

   3145  1 000210   200010 236300                    LDQ   ! P$,,AUTO
         1 000211   400001 756300                    STQ   ! 1,,PR4

      186     3146    3           TREEHDR.COUNT=TREEHDR.COUNT+1;

   3146  1 000212   200003 475700                    LDP5  ! @TREEHDR,,AUTO
         1 000213   500005 720300                    LXL0  ! 5,,PR5
         1 000214   000001 621210                    EAX1  ! 1,X0
         1 000215   500005 441300                    SXL1  ! 5,,PR5

      187     3147    3           IF TREEHDR.LINKS ~= 0 THEN

   3147  1 000216   500003 235300                    LDA   ! 3,,PR5
         1 000217   000235 600200 1                  TZE   ! s:3161

      188     3148    4             DO;

      189     3149    4             IF PRED$ ~= ADDR(NIL) THEN

   3149  1 000220   200016 236300                    LDQ   ! PRED$,,AUTO
         1 000221   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 000222   000231 600200 1                  TZE   ! s:3156

      190     3150    5               DO;

      191     3151    5               Q$->KQ$BTN.FLINK$=PRED$->KQ$BTN.FLINK$;

   3151  1 000223   200016 476700                    LDP6  ! PRED$,,AUTO
         1 000224   600004 236300                    LDQ   ! 4,,PR6
         1 000225   400004 756300                    STQ   ! 4,,PR4

      192     3152    5               PRED$->KQ$BTN.FLINK$=Q$;

   3152  1 000226   200011 236300                    LDQ   ! Q$,,AUTO
         1 000227   600004 756300                    STQ   ! 4,,PR6
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:35   

      193     3153    5               END;

   3153  1 000230   000235 710200 1                  TRA   ! s:3161

      194     3154    4             ELSE
      195     3155    5               DO;

      196     3156    5               Q$->KQ$BTN.FLINK$=TREEHDR.HEAD$;

   3156  1 000231   500004 236300                    LDQ   ! 4,,PR5
         1 000232   400004 756300                    STQ   ! 4,,PR4

      197     3157    5               TREEHDR.HEAD$=Q$;

   3157  1 000233   200011 236300                    LDQ   ! Q$,,AUTO
         1 000234   500004 756300                    STQ   ! 4,,PR5

      198     3158    5               END;

      199     3159    4             END;

      200     3160                                /* ADJUST BALANCE FACTORS BACK UP TO S$ */
      201     3161    3           R$=Q$;

   3161  1 000235   200011 236300                    LDQ   ! Q$,,AUTO
         1 000236   200012 756300                    STQ   ! R$,,AUTO

      202     3162    4             DO WHILE (P$ ~= S$);

   3162  1 000237   200010 236300                    LDQ   ! P$,,AUTO
         1 000240   200013 116300                    CMPQ  ! S$,,AUTO
         1 000241   000261 600200 1                  TZE   ! s:3168

      203     3163    4             IF R$ = P$->KQ$BTN.LSON$ THEN P$->KQ$BTN.BF=-1;

   3163  1 000242   200010 470700                    LDP0  ! P$,,AUTO
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:36   
         1 000243   200012 236300                    LDQ   ! R$,,AUTO
         1 000244   000002 116300                    CMPQ  ! 2,,PR0
         1 000245   000251 601200 1                  TNZ   ! s:3164

   3163  1 000246   000777 236207                    LDQ   ! 511,DL
         1 000247   000000 552304                    STBQ  ! 0,'04'O,PR0
         1 000250   000253 710200 1                  TRA   ! s:3165

      204     3164    4             ELSE P$->KQ$BTN.BF=1;

   3164  1 000251   000001 236207                    LDQ   ! 1,DL
         1 000252   000000 552304                    STBQ  ! 0,'04'O,PR0

      205     3165    4             R$=P$;

   3165  1 000253   200010 236300                    LDQ   ! P$,,AUTO
         1 000254   200012 756300                    STQ   ! R$,,AUTO

      206     3166    4             P$=P$->KQ$BTN.PRNT$;

   3166  1 000255   000001 236300                    LDQ   ! 1,,PR0
         1 000256   200010 756300                    STQ   ! P$,,AUTO

      207     3167    4             END;

   3167  1 000257   200013 116300                    CMPQ  ! S$,,AUTO
         1 000260   000242 601200 1                  TNZ   ! s:3163

      208     3168    3           IF R$ = S$->KQ$BTN.LSON$ THEN A=-1;

   3168  1 000261   200013 470700                    LDP0  ! S$,,AUTO
         1 000262   200012 236300                    LDQ   ! R$,,AUTO
         1 000263   000002 116300                    CMPQ  ! 2,,PR0
         1 000264   000270 601200 1                  TNZ   ! s:3169

   3168  1 000265   000001 335207                    LCA   ! 1,DL
         1 000266   200007 755300                    STA   ! A,,AUTO
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:37   
         1 000267   000272 710200 1                  TRA   ! s:3171

      209     3169    3           ELSE A=1;

   3169  1 000270   000001 235207                    LDA   ! 1,DL
         1 000271   200007 755300                    STA   ! A,,AUTO

      210     3170                                /* DECIDE IF REBALANCING NEEDED */
      211     3171    3           IF S$->KQ$BTN.BF = 0 THEN

   3171  1 000272   000000 236300                    LDQ   ! 0,,PR0
         1 000273   000777 316207                    CANQ  ! 511,DL
         1 000274   000301 601200 1                  TNZ   ! s:3176

      212     3172    4             DO;

      213     3173    4             S$->KQ$BTN.BF=A;

   3173  1 000275   200007 236300                    LDQ   ! A,,AUTO
         1 000276   000000 552304                    STBQ  ! 0,'04'O,PR0

      214     3174    4             RETURN;

   3174  1 000277   200020 221300                    LDX1  ! SUCC$+1,,AUTO
         1 000300   000001 702211                    TSX2  ! 1,X1

      215     3175    4             END;
      216     3176    3           IF S$->KQ$BTN.BF = -A THEN

   3176  1 000301   000000 531200                    NEG   ! 0
         1 000302   200026 755300                    STA   ! SUCC$+7,,AUTO
         1 000303   000000 236300                    LDQ   ! 0,,PR0
         1 000304   000033 736200                    QLS   ! 27
         1 000305   000033 732200                    QRS   ! 27
         1 000306   200026 116300                    CMPQ  ! SUCC$+7,,AUTO
         1 000307   000314 601200 1                  TNZ   ! s:3182

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:38   
      217     3177    4             DO;

      218     3178    4             S$->KQ$BTN.BF=0;

   3178  1 000310   000000 236203                    LDQ   ! 0,DU
         1 000311   000000 552304                    STBQ  ! 0,'04'O,PR0

      219     3179    4             RETURN;

   3179  1 000312   200020 221300                    LDX1  ! SUCC$+1,,AUTO
         1 000313   000001 702211                    TSX2  ! 1,X1

      220     3180    4             END;
      221     3181                                /* YES */
      222     3182    3           CALL ROTATE;

   3182  1 000314   000321 701200 1                  TSX1  ! ROTATE
         1 000315   000000 011200                    NOP   ! 0

      223     3183    3           RETURN;

   3183  1 000316   200020 221300                    LDX1  ! SUCC$+1,,AUTO
         1 000317   000001 702211                    TSX2  ! 1,X1

      224     3184    3           END; /* INHIBIT */

      225     3185    2   END INS;

   3185  1 000320   000001 702211                    TSX2  ! 1,X1

      226     3186
      227     3187        /*D* NAME:         ROTATE
      228     3188             PURPOSE:      To perform rotation in the tree when required
      229     3189             DESCRIPTION:  S$ points to the node being considered;
      230     3190                           R$ points to his son on the side to which S$
      231     3191                           has become too heavy; A=1 if it's right, -1
      232     3192                           else.  T$ points to S$'s parent's link to
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:39   
      233     3193                           S$. ALTRETs in the CASE3 (single rotate with
      234     3194                           balanced node) situation.
      235     3195        */
      236     3196    1   ROTATE: PROC ALTRET;

   3196  1 000321   200022 741300       ROTATE       STX1  ! SUCC$+3,,AUTO

      237     3197    3           DO INHIBIT;

      238     3198    3           IF R$->KQ$BTN.BF = A THEN

   3198  1 000322   200012 470700                    LDP0  ! R$,,AUTO
         1 000323   000000 236300                    LDQ   ! 0,,PR0
         1 000324   000033 736200                    QLS   ! 27
         1 000325   000033 732200                    QRS   ! 27
         1 000326   200007 116300                    CMPQ  ! A,,AUTO
         1 000327   000337 601200 1                  TNZ   ! s:3205

      239     3199    4             DO;

      240     3200                                /* SINGLE ROTATION */
      241     3201    4             S$->KQ$BTN.BF=0;

   3201  1 000330   200013 471700                    LDP1  ! S$,,AUTO
         1 000331   000000 236203                    LDQ   ! 0,DU
         1 000332   100000 552304                    STBQ  ! 0,'04'O,PR1

      242     3202    4             R$->KQ$BTN.BF=0;

   3202  1 000333   000000 552304                    STBQ  ! 0,'04'O,PR0

      243     3203    4             CALL SNGL;

   3203  1 000334   000511 701200 1                  TSX1  ! SNGL
         1 000335   000000 011200                    NOP   ! 0

      244     3204    4             END;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:40   

   3204  1 000336   000506 710200 1                  TRA   ! s:3264

      245     3205    3           ELSE IF R$->KQ$BTN.BF = -A THEN

   3205  1 000337   200007 335300                    LCA   ! A,,AUTO
         1 000340   200026 755300                    STA   ! SUCC$+7,,AUTO
         1 000341   000000 236300                    LDQ   ! 0,,PR0
         1 000342   000033 736200                    QLS   ! 27
         1 000343   000033 732200                    QRS   ! 27
         1 000344   200026 116300                    CMPQ  ! SUCC$+7,,AUTO
         1 000345   000500 601200 1                  TNZ   ! s:3260

      246     3206    4              DO;

      247     3207                                /* DOUBLE ROTATION */
      248     3208    4              IF A = 1 THEN

   3208  1 000346   200007 235300                    LDA   ! A,,AUTO
         1 000347   000001 115207                    CMPA  ! 1,DL
         1 000350   000411 601200 1                  TNZ   ! s:3226

      249     3209    5                DO;

      250     3210    5                P$=R$->KQ$BTN.LSON$;

   3210  1 000351   000002 236300                    LDQ   ! 2,,PR0
         1 000352   200010 756300                    STQ   ! P$,,AUTO

      251     3211    5                R$->KQ$BTN.PRNT$=P$;

   3211  1 000353   000001 756300                    STQ   ! 1,,PR0

      252     3212    5                P$->KQ$BTN.PRNT$=S$->KQ$BTN.PRNT$;

   3212  1 000354   200013 471700                    LDP1  ! S$,,AUTO
         1 000355   100001 236300                    LDQ   ! 1,,PR1
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:41   
         1 000356   200010 473700                    LDP3  ! P$,,AUTO
         1 000357   300001 756300                    STQ   ! 1,,PR3

      253     3213    5                S$->KQ$BTN.PRNT$=P$;

   3213  1 000360   200010 236300                    LDQ   ! P$,,AUTO
         1 000361   100001 756300                    STQ   ! 1,,PR1

      254     3214    5                T$->BP$=P$;

   3214  1 000362   200014 474700                    LDP4  ! T$,,AUTO
         1 000363   400000 756300                    STQ   ! 0,,PR4

      255     3215    5                R$->KQ$BTN.LSON$=P$->KQ$BTN.RSON$;

   3215  1 000364   300003 236300                    LDQ   ! 3,,PR3
         1 000365   000002 756300                    STQ   ! 2,,PR0

      256     3216    5                P$->KQ$BTN.RSON$=R$;

   3216  1 000366   200012 236300                    LDQ   ! R$,,AUTO
         1 000367   300003 756300                    STQ   ! 3,,PR3

      257     3217    5                S$->KQ$BTN.RSON$=P$->KQ$BTN.LSON$;

   3217  1 000370   300002 236300                    LDQ   ! 2,,PR3
         1 000371   100003 756300                    STQ   ! 3,,PR1

      258     3218    5                P$->KQ$BTN.LSON$=S$;

   3218  1 000372   200013 236300                    LDQ   ! S$,,AUTO
         1 000373   300002 756300                    STQ   ! 2,,PR3

      259     3219    5                IF S$->KQ$BTN.RSON$ ~= ADDR(NIL) THEN

   3219  1 000374   100003 236300                    LDQ   ! 3,,PR1
         1 000375   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:42   
         1 000376   000402 600200 1                  TZE   ! s:3221

      260     3220    5                 S$->KQ$BTN.RSON$->KQ$BTN.PRNT$=S$;

   3220  1 000377   100003 475700                    LDP5  ! 3,,PR1
         1 000400   200013 236300                    LDQ   ! S$,,AUTO
         1 000401   500001 756300                    STQ   ! 1,,PR5

      261     3221    5                IF R$->KQ$BTN.LSON$ ~= ADDR(NIL) THEN

   3221  1 000402   000002 236300                    LDQ   ! 2,,PR0
         1 000403   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 000404   000450 600200 1                  TZE   ! s:3238

      262     3222    5                 R$->KQ$BTN.LSON$->KQ$BTN.PRNT$=R$;

   3222  1 000405   000002 475700                    LDP5  ! 2,,PR0
         1 000406   200012 236300                    LDQ   ! R$,,AUTO
         1 000407   500001 756300                    STQ   ! 1,,PR5

      263     3223    5                END;

   3223  1 000410   000450 710200 1                  TRA   ! s:3238

      264     3224    4              ELSE
      265     3225    5                DO;

      266     3226    5                P$=R$->KQ$BTN.RSON$;

   3226  1 000411   000003 236300                    LDQ   ! 3,,PR0
         1 000412   200010 756300                    STQ   ! P$,,AUTO

      267     3227    5                R$->KQ$BTN.PRNT$=P$;

   3227  1 000413   000001 756300                    STQ   ! 1,,PR0

      268     3228    5                P$->KQ$BTN.PRNT$=S$->KQ$BTN.PRNT$;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:43   

   3228  1 000414   200013 471700                    LDP1  ! S$,,AUTO
         1 000415   100001 236300                    LDQ   ! 1,,PR1
         1 000416   200010 473700                    LDP3  ! P$,,AUTO
         1 000417   300001 756300                    STQ   ! 1,,PR3

      269     3229    5                S$->KQ$BTN.PRNT$=P$;

   3229  1 000420   200010 236300                    LDQ   ! P$,,AUTO
         1 000421   100001 756300                    STQ   ! 1,,PR1

      270     3230    5                T$->BP$=P$;

   3230  1 000422   200014 474700                    LDP4  ! T$,,AUTO
         1 000423   400000 756300                    STQ   ! 0,,PR4

      271     3231    5                R$->KQ$BTN.RSON$=P$->KQ$BTN.LSON$;

   3231  1 000424   300002 236300                    LDQ   ! 2,,PR3
         1 000425   000003 756300                    STQ   ! 3,,PR0

      272     3232    5                P$->KQ$BTN.LSON$=R$;

   3232  1 000426   200012 236300                    LDQ   ! R$,,AUTO
         1 000427   300002 756300                    STQ   ! 2,,PR3

      273     3233    5                S$->KQ$BTN.LSON$=P$->KQ$BTN.RSON$;

   3233  1 000430   300003 236300                    LDQ   ! 3,,PR3
         1 000431   100002 756300                    STQ   ! 2,,PR1

      274     3234    5                P$->KQ$BTN.RSON$=S$;

   3234  1 000432   200013 236300                    LDQ   ! S$,,AUTO
         1 000433   300003 756300                    STQ   ! 3,,PR3

      275     3235    5               IF S$->KQ$BTN.LSON$ ~= ADDR(NIL) THEN S$->KQ$BTN.LSON$->KQ$BTN.PRNT$=S$
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:44   
              3235                         ;

   3235  1 000434   100002 236300                    LDQ   ! 2,,PR1
         1 000435   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 000436   000442 600200 1                  TZE   ! s:3236

   3235  1 000437   100002 475700                    LDP5  ! 2,,PR1
         1 000440   200013 236300                    LDQ   ! S$,,AUTO
         1 000441   500001 756300                    STQ   ! 1,,PR5

      276     3236    5               IF R$->KQ$BTN.RSON$ ~= ADDR(NIL) THEN R$->KQ$BTN.RSON$->KQ$BTN.PRNT$=R$
              3236                         ;

   3236  1 000442   000003 236300                    LDQ   ! 3,,PR0
         1 000443   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 000444   000450 600200 1                  TZE   ! s:3238

   3236  1 000445   000003 475700                    LDP5  ! 3,,PR0
         1 000446   200012 236300                    LDQ   ! R$,,AUTO
         1 000447   500001 756300                    STQ   ! 1,,PR5

      277     3237    5                END;

      278     3238    4              IF P$->KQ$BTN.BF = A THEN

   3238  1 000450   300000 236300                    LDQ   ! 0,,PR3
         1 000451   000033 736200                    QLS   ! 27
         1 000452   000033 732200                    QRS   ! 27
         1 000453   200007 116300                    CMPQ  ! A,,AUTO
         1 000454   000462 601200 1                  TNZ   ! s:3243

      279     3239    5                DO;

      280     3240    5                S$->KQ$BTN.BF=-A;

   3240  1 000455   200007 336300                    LCQ   ! A,,AUTO
         1 000456   100000 552304                    STBQ  ! 0,'04'O,PR1
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:45   

      281     3241    5                R$->KQ$BTN.BF=0;

   3241  1 000457   000000 236203                    LDQ   ! 0,DU
         1 000460   000000 552304                    STBQ  ! 0,'04'O,PR0

      282     3242    5                END;

   3242  1 000461   000475 710200 1                  TRA   ! s:3254

      283     3243    4              ELSE IF P$->KQ$BTN.BF = 0 THEN

   3243  1 000462   300000 236300                    LDQ   ! 0,,PR3
         1 000463   000777 316207                    CANQ  ! 511,DL
         1 000464   000471 601200 1                  TNZ   ! s:3251

      284     3244    5                 DO;

      285     3245    5                 S$->KQ$BTN.BF=0;

   3245  1 000465   000000 236203                    LDQ   ! 0,DU
         1 000466   100000 552304                    STBQ  ! 0,'04'O,PR1

      286     3246    5                 R$->KQ$BTN.BF=0;

   3246  1 000467   000000 552304                    STBQ  ! 0,'04'O,PR0

      287     3247    5                 END;

   3247  1 000470   000475 710200 1                  TRA   ! s:3254

      288     3248    4               ELSE
      289     3249    5                 DO;

      290     3250                                /* P$->KQ$BTN.BF = -A */
      291     3251    5                 S$->KQ$BTN.BF=0;

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:46   
   3251  1 000471   000000 236203                    LDQ   ! 0,DU
         1 000472   100000 552304                    STBQ  ! 0,'04'O,PR1

      292     3252    5                 R$->KQ$BTN.BF=A;

   3252  1 000473   200007 236300                    LDQ   ! A,,AUTO
         1 000474   000000 552304                    STBQ  ! 0,'04'O,PR0

      293     3253    5                 END;

      294     3254    4              P$->KQ$BTN.BF=0;

   3254  1 000475   000000 236203                    LDQ   ! 0,DU
         1 000476   300000 552304                    STBQ  ! 0,'04'O,PR3

      295     3255    4              END;

   3255  1 000477   000506 710200 1                  TRA   ! s:3264

      296     3256    3            ELSE
      297     3257    4              DO;

      298     3258                                /* SINGLE ROTATION WHEN R$ IS BALANCED;
      299     3259                                   OCCURS ONLY DURING DELETES */
      300     3260    4              R$->KQ$BTN.BF=-A;

   3260  1 000500   200007 336300                    LCQ   ! A,,AUTO
         1 000501   000000 552304                    STBQ  ! 0,'04'O,PR0

      301     3261    4              CALL SNGL;

   3261  1 000502   000511 701200 1                  TSX1  ! SNGL
         1 000503   000000 011200                    NOP   ! 0

      302     3262    4              ALTRETURN;

   3262  1 000504   200022 221300                    LDX1  ! SUCC$+3,,AUTO
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:47   
         1 000505   000000 702211                    TSX2  ! 0,X1

      303     3263    4              END;
      304     3264    3           RETURN;

   3264  1 000506   200022 221300                    LDX1  ! SUCC$+3,,AUTO
         1 000507   000001 702211                    TSX2  ! 1,X1

      305     3265    3           END; /* INHIBIT */

   3265  1 000510   000557 710000 1                  TRA     s:3289

      306     3266    2   SNGL: PROC;

   3266  1 000511   200024 741300       SNGL         STX1  ! SUCC$+5,,AUTO

      307     3267    4           DO INHIBIT;

      308     3268    4           P$=R$;

   3268  1 000512   200012 236300                    LDQ   ! R$,,AUTO
         1 000513   200010 756300                    STQ   ! P$,,AUTO

      309     3269    4           R$->KQ$BTN.PRNT$=S$->KQ$BTN.PRNT$;

   3269  1 000514   200013 470700                    LDP0  ! S$,,AUTO
         1 000515   000001 236300                    LDQ   ! 1,,PR0
         1 000516   200012 471700                    LDP1  ! R$,,AUTO
         1 000517   100001 756300                    STQ   ! 1,,PR1

      310     3270    4           T$->BP$=R$;

   3270  1 000520   200012 236300                    LDQ   ! R$,,AUTO
         1 000521   200014 473700                    LDP3  ! T$,,AUTO
         1 000522   300000 756300                    STQ   ! 0,,PR3

      311     3271    4           S$->KQ$BTN.PRNT$=R$;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:48   

   3271  1 000523   000001 756300                    STQ   ! 1,,PR0

      312     3272    4           IF A = 1 THEN

   3272  1 000524   200007 235300                    LDA   ! A,,AUTO
         1 000525   000001 115207                    CMPA  ! 1,DL
         1 000526   000542 601200 1                  TNZ   ! s:3281

      313     3273    5             DO;

      314     3274    5             S$->KQ$BTN.RSON$=R$->KQ$BTN.LSON$;

   3274  1 000527   100002 236300                    LDQ   ! 2,,PR1
         1 000530   000003 756300                    STQ   ! 3,,PR0

      315     3275    5             R$->KQ$BTN.LSON$=S$;

   3275  1 000531   200013 236300                    LDQ   ! S$,,AUTO
         1 000532   100002 756300                    STQ   ! 2,,PR1

      316     3276    5             IF S$->KQ$BTN.RSON$ ~= ADDR(NIL) THEN

   3276  1 000533   000003 236300                    LDQ   ! 3,,PR0
         1 000534   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 000535   000554 600200 1                  TZE   ! s:3286

      317     3277    5              S$->KQ$BTN.RSON$->KQ$BTN.PRNT$=S$;

   3277  1 000536   000003 474700                    LDP4  ! 3,,PR0
         1 000537   200013 236300                    LDQ   ! S$,,AUTO
         1 000540   400001 756300                    STQ   ! 1,,PR4

      318     3278    5             END;

   3278  1 000541   000554 710200 1                  TRA   ! s:3286

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:49   
      319     3279    4           ELSE
      320     3280    5             DO;

      321     3281    5             S$->KQ$BTN.LSON$=R$->KQ$BTN.RSON$;

   3281  1 000542   100003 236300                    LDQ   ! 3,,PR1
         1 000543   000002 756300                    STQ   ! 2,,PR0

      322     3282    5             R$->KQ$BTN.RSON$=S$;

   3282  1 000544   200013 236300                    LDQ   ! S$,,AUTO
         1 000545   100003 756300                    STQ   ! 3,,PR1

      323     3283    5             IF S$->KQ$BTN.LSON$ ~= ADDR(NIL) THEN

   3283  1 000546   000002 236300                    LDQ   ! 2,,PR0
         1 000547   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 000550   000554 600200 1                  TZE   ! s:3286

      324     3284    5              S$->KQ$BTN.LSON$->KQ$BTN.PRNT$=S$;

   3284  1 000551   000002 474700                    LDP4  ! 2,,PR0
         1 000552   200013 236300                    LDQ   ! S$,,AUTO
         1 000553   400001 756300                    STQ   ! 1,,PR4

      325     3285    5             END;

      326     3286    4           RETURN;

   3286  1 000554   200024 221300                    LDX1  ! SUCC$+5,,AUTO
         1 000555   000001 702211                    TSX2  ! 1,X1

      327     3287    4           END; /* INHIBIT */

      328     3288    3   END SNGL;

   3288  1 000556   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:50   

      329     3289    2   END ROTATE;

   3289  1 000557   000001 702211                    TSX2  ! 1,X1

      330     3290        %EJECT;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:51   
      331     3291        /*F* NAME:         KQB$DELETENL
      332     3292             PURPOSE:      To delete a node from a binary tree without
      333     3293                           locking the tree header.
      334     3294             DESCRIPTION:  TREEHDR is the tree header.  NODE$ points to the
      335     3295                           node to be deleted.  ALTRETs if NODE$ not in the tree.
      336     3296
      337     3297                           The algorithm is that given in KNUTH VOL3 6.2.3
      338     3298
      339     3299                           Locks the tree, and unlocks when done.
      340     3300        */
      341     3301    1   KQB$DELETENL: ENTRY (TREEHDR,KEY,NODE$) ALTRET;

   3301  1 000560   000000 700200 xent  KQB$DELETENL TSX0  ! X66_AUTO_3
         1 000561   000030 000003                    ZERO    24,3

      342     3302        /**/
      343     3303    1         CALL DELETE ALTRET(ALTRT1);

   3303  1 000562   000565 701000 1                  TSX1    DELETE
         1 000563   000043 702000 1                  TSX2    ALTRT1

      344     3304    1         RETURN;

   3304  1 000564   000000 702200 xent               TSX2  ! X66_ARET

      345     3305    1   DELETE: PROC ALTRET;

   3305  1 000565   200020 741300       DELETE       STX1  ! SUCC$+1,,AUTO

      346     3306    3           DO INHIBIT;

      347     3307    3           TREEHDR.ACTCNT=TREEHDR.ACTCNT+1;

   3307  1 000566   200003 470700                    LDP0  ! @TREEHDR,,AUTO
         1 000567   000005 220300                    LDX0  ! 5,,PR0
         1 000570   000001 622210                    EAX2  ! 1,X0
         1 000571   000005 742300                    STX2  ! 5,,PR0
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:52   

      348     3308    3           BTN$=TREEHDR.ROOT$;

   3308  1 000572   000002 236300                    LDQ   ! 2,,PR0
         1 000573   200006 756300                    STQ   ! BTN$,,AUTO

      349     3309    4             DO WHILE (BTN$ ~= ADDR(NIL));

   3309  1 000574   000614 710200 1                  TRA   ! s:3315

      350     3310    4             IF NODE$->KQ$BTN.KEY < BTN$->KQ$BTN.KEY THEN

   3310  1 000575   200005 470700                    LDP0  ! @NODE$,,AUTO
         1 000576   000000 471700                    LDP1  ! 0,,PR0
         1 000577   200006 473700                    LDP3  ! BTN$,,AUTO
         1 000600   040100 106700                    CMPC  ! fill='040'O
         1 000601   100005 000010                    ADSC9   5,,PR1                   cn=0,n=8
         1 000602   300005 000010                    ADSC9   5,,PR3                   cn=0,n=8
         1 000603   000607 603200 1                  TRC   ! s:3312

      351     3311    4              BTN$=BTN$->KQ$BTN.LSON$;

   3311  1 000604   300002 236300                    LDQ   ! 2,,PR3
         1 000605   200006 756300                    STQ   ! BTN$,,AUTO
         1 000606   000614 710200 1                  TRA   ! s:3315

      352     3312    4             ELSE IF NODE$->KQ$BTN.KEY > BTN$->KQ$BTN.KEY THEN

   3312  1 000607   000620 602200 1                  TNC   ! DEL00
         1 000610   000620 600200 1                  TZE   ! DEL00

      353     3313    4               BTN$=BTN$->KQ$BTN.RSON$;

   3313  1 000611   300003 236300                    LDQ   ! 3,,PR3
         1 000612   200006 756300                    STQ   ! BTN$,,AUTO
         1 000613   000614 710200 1                  TRA   ! s:3315

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:53   
      354     3314    4              ELSE GOTO DEL00;
      355     3315    4             END;

   3315  1 000614   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 000615   000575 601200 1                  TNZ   ! s:3310

      356     3316    3           ALTRETURN;

   3316  1 000616   200020 221300                    LDX1  ! SUCC$+1,,AUTO
         1 000617   000000 702211                    TSX2  ! 0,X1

   3314  1 000620                       DEL00        null
      357     3317    3   DEL00:  ;
      358     3318    3           IF BTN$ ~= NODE$ THEN ALTRETURN;

   3318  1 000620   200006 236300                    LDQ   ! BTN$,,AUTO
         1 000621   000000 116300                    CMPQ  ! 0,,PR0
         1 000622   000625 600200 1                  TZE   ! s:3319

   3318  1 000623   200020 221300                    LDX1  ! SUCC$+1,,AUTO
         1 000624   000000 702211                    TSX2  ! 0,X1

      359     3319    3           TREEHDR.COUNT=TREEHDR.COUNT-1;

   3319  1 000625   200003 474700                    LDP4  ! @TREEHDR,,AUTO
         1 000626   400005 720300                    LXL0  ! 5,,PR4
         1 000627   777777 621210                    EAX1  ! -1,X0
         1 000630   400005 441300                    SXL1  ! 5,,PR4

      360     3320    3           P$=NODE$;

   3320  1 000631   000000 236300                    LDQ   ! 0,,PR0
         1 000632   200010 756300                    STQ   ! P$,,AUTO

      361     3321                                /* DELETE FROM LINEAR LIST */
      362     3322    3           IF TREEHDR.LINKS ~= 0 THEN

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:54   
   3322  1 000633   400003 235300                    LDA   ! 3,,PR4
         1 000634   000650 600200 1                  TZE   ! DEL1

      363     3323    4             DO;

      364     3324    4             CALL GETPRED ALTRET(DEL0);

   3324  1 000635   001112 701200 1                  TSX1  ! GETPRED
         1 000636   000644 702200 1                  TSX2  ! DEL0

      365     3325    4             PRED$->KQ$BTN.FLINK$=P$->KQ$BTN.FLINK$;

   3325  1 000637   200010 470700                    LDP0  ! P$,,AUTO
         1 000640   000004 236300                    LDQ   ! 4,,PR0
         1 000641   200016 471700                    LDP1  ! PRED$,,AUTO
         1 000642   100004 756300                    STQ   ! 4,,PR1

      366     3326    4             GOTO DEL1;

   3326  1 000643   000650 710200 1                  TRA   ! DEL1

   3325  1 000644                       DEL0         null
      367     3327    4   DEL0:     ;
      368     3328    4             TREEHDR.HEAD$=P$->KQ$BTN.FLINK$;

   3328  1 000644   200010 470700                    LDP0  ! P$,,AUTO
         1 000645   000004 236300                    LDQ   ! 4,,PR0
         1 000646   200003 471700                    LDP1  ! @TREEHDR,,AUTO
         1 000647   100004 756300                    STQ   ! 4,,PR1

   3328  1 000650                       DEL1         null
      369     3329    4   DEL1:     ;
      370     3330    4             END;

      371     3331    3           Z$=P$->KQ$BTN.PRNT$;

   3331  1 000650   200010 470700                    LDP0  ! P$,,AUTO
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:55   
         1 000651   000001 236300                    LDQ   ! 1,,PR0
         1 000652   200015 756300                    STQ   ! Z$,,AUTO

      372     3332    3           IF Z$ = ADDR(NIL) THEN T$=ADDR(TREEHDR.ROOT$);

   3332  1 000653   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 000654   000661 601200 1                  TNZ   ! s:3335

   3332  1 000655   200003 236300                    LDQ   ! @TREEHDR,,AUTO
         1 000656   000002 036203                    ADLQ  ! 2,DU
         1 000657   200014 756300                    STQ   ! T$,,AUTO
         1 000660   000700 710200 1                  TRA   ! s:3346

      373     3333    3           ELSE
      374     3334    4             DO;

      375     3335    4             IF P$ = Z$->KQ$BTN.LSON$ THEN

   3335  1 000661   200015 471700                    LDP1  ! Z$,,AUTO
         1 000662   200010 236300                    LDQ   ! P$,,AUTO
         1 000663   100002 116300                    CMPQ  ! 2,,PR1
         1 000664   000673 601200 1                  TNZ   ! s:3342

      376     3336    5               DO;

      377     3337    5               A=-1;

   3337  1 000665   000001 335207                    LCA   ! 1,DL
         1 000666   200007 755300                    STA   ! A,,AUTO

      378     3338    5               T$=ADDR(Z$->KQ$BTN.LSON$);

   3338  1 000667   200015 236300                    LDQ   ! Z$,,AUTO
         1 000670   000002 036203                    ADLQ  ! 2,DU
         1 000671   200014 756300                    STQ   ! T$,,AUTO

      379     3339    5               END;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:56   

   3339  1 000672   000700 710200 1                  TRA   ! s:3346

      380     3340    4             ELSE
      381     3341    5               DO;

      382     3342    5               A=1;

   3342  1 000673   000001 235207                    LDA   ! 1,DL
         1 000674   200007 755300                    STA   ! A,,AUTO

      383     3343    5               T$=ADDR(Z$->KQ$BTN.RSON$);

   3343  1 000675   200015 236300                    LDQ   ! Z$,,AUTO
         1 000676   000003 036203                    ADLQ  ! 3,DU
         1 000677   200014 756300                    STQ   ! T$,,AUTO

      384     3344    5               END;

      385     3345    4             END;

      386     3346    3           IF P$->KQ$BTN.LSON$ = ADDR(NIL) THEN

   3346  1 000700   000002 236300                    LDQ   ! 2,,PR0
         1 000701   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 000702   000715 601200 1                  TNZ   ! s:3352

      387     3347    4             DO;

      388     3348    4             T$->BP$=P$->KQ$BTN.RSON$;

   3348  1 000703   000003 236300                    LDQ   ! 3,,PR0
         1 000704   200014 471700                    LDP1  ! T$,,AUTO
         1 000705   100000 756300                    STQ   ! 0,,PR1

      389     3349    4             IF P$->KQ$BTN.RSON$ ~= ADDR(NIL) THEN

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:57   
   3349  1 000706   000003 236300                    LDQ   ! 3,,PR0
         1 000707   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 000710   001005 600200 1                  TZE   ! s:3395

      390     3350    4              P$->KQ$BTN.RSON$->KQ$BTN.PRNT$=Z$;

   3350  1 000711   000003 473700                    LDP3  ! 3,,PR0
         1 000712   200015 236300                    LDQ   ! Z$,,AUTO
         1 000713   300001 756300                    STQ   ! 1,,PR3

      391     3351    4             END;

   3351  1 000714   001005 710200 1                  TRA   ! s:3395

      392     3352    3           ELSE IF P$->KQ$BTN.RSON$ = ADDR(NIL) THEN

   3352  1 000715   000003 236300                    LDQ   ! 3,,PR0
         1 000716   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 000717   000732 601200 1                  TNZ   ! s:3367

      393     3353    4              DO;

      394     3354    4              T$->BP$=P$->KQ$BTN.LSON$;

   3354  1 000720   000002 236300                    LDQ   ! 2,,PR0
         1 000721   200014 471700                    LDP1  ! T$,,AUTO
         1 000722   100000 756300                    STQ   ! 0,,PR1

      395     3355    4              IF P$->KQ$BTN.LSON$ ~= ADDR(NIL) THEN

   3355  1 000723   000002 236300                    LDQ   ! 2,,PR0
         1 000724   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 000725   001005 600200 1                  TZE   ! s:3395

      396     3356    4               P$->KQ$BTN.LSON$->KQ$BTN.PRNT$=Z$;

   3356  1 000726   000002 473700                    LDP3  ! 2,,PR0
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:58   
         1 000727   200015 236300                    LDQ   ! Z$,,AUTO
         1 000730   300001 756300                    STQ   ! 1,,PR3

      397     3357    4              END;

   3357  1 000731   001005 710200 1                  TRA   ! s:3395

      398     3358    3            ELSE
      399     3359    4              DO;

      400     3360                                /* NEITHER OF P'S LINKS ARE NIL.  PUT HIS
      401     3361                                   SUCCESSOR IN HIS PLACE, DELETING THE
      402     3362                                   SPOT WHERE HIS SUCCESSOR WAS, LEAVING
      403     3363                                   Z$ POINTING AT HIS SUCCESSOR'S OLD
      404     3364                                   PARENT'S SPOT, AND ADJUST A TO REFLECT
      405     3365                                   WHICH SIDE OF THAT NODE THE DELETION WAS
      406     3366                                   ON. */
      407     3367    4              CALL GETSUCC;

   3367  1 000732   001161 701200 1                  TSX1  ! GETSUCC
         1 000733   000000 011200                    NOP   ! 0

      408     3368    4              T$->BP$=SUCC$;

   3368  1 000734   200017 236300                    LDQ   ! SUCC$,,AUTO
         1 000735   200014 470700                    LDP0  ! T$,,AUTO
         1 000736   000000 756300                    STQ   ! 0,,PR0

      409     3369    4              Z$=SUCC$->KQ$BTN.PRNT$;

   3369  1 000737   200017 471700                    LDP1  ! SUCC$,,AUTO
         1 000740   100001 236300                    LDQ   ! 1,,PR1
         1 000741   200015 756300                    STQ   ! Z$,,AUTO

      410     3370    4              SUCC$->KQ$BTN.PRNT$=P$->KQ$BTN.PRNT$;

   3370  1 000742   200010 473700                    LDP3  ! P$,,AUTO
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:59   
         1 000743   300001 236300                    LDQ   ! 1,,PR3
         1 000744   100001 756300                    STQ   ! 1,,PR1

      411     3371    4              SUCC$->KQ$BTN.LSON$=P$->KQ$BTN.LSON$;

   3371  1 000745   300002 236300                    LDQ   ! 2,,PR3
         1 000746   100002 756300                    STQ   ! 2,,PR1

      412     3372    4              SUCC$->KQ$BTN.LSON$->KQ$BTN.PRNT$=SUCC$;

   3372  1 000747   100002 474700                    LDP4  ! 2,,PR1
         1 000750   200017 236300                    LDQ   ! SUCC$,,AUTO
         1 000751   400001 756300                    STQ   ! 1,,PR4

      413     3373    4              IF Z$ = P$ THEN

   3373  1 000752   200015 236300                    LDQ   ! Z$,,AUTO
         1 000753   200010 116300                    CMPQ  ! P$,,AUTO
         1 000754   000762 601200 1                  TNZ   ! s:3380

      414     3374    5                DO;

      415     3375    5                Z$=SUCC$;

   3375  1 000755   200017 236300                    LDQ   ! SUCC$,,AUTO
         1 000756   200015 756300                    STQ   ! Z$,,AUTO

      416     3376    5                A=1;

   3376  1 000757   000001 235207                    LDA   ! 1,DL
         1 000760   200007 755300                    STA   ! A,,AUTO

      417     3377    5                END;

   3377  1 000761   001003 710200 1                  TRA   ! s:3388

      418     3378    4              ELSE
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:60   
      419     3379    5                DO;

      420     3380    5                A=-1;

   3380  1 000762   000001 335207                    LCA   ! 1,DL
         1 000763   200007 755300                    STA   ! A,,AUTO

      421     3381    5                R$=SUCC$->KQ$BTN.RSON$;

   3381  1 000764   100003 236300                    LDQ   ! 3,,PR1
         1 000765   200012 756300                    STQ   ! R$,,AUTO

      422     3382    5                SUCC$->KQ$BTN.RSON$=P$->KQ$BTN.RSON$;

   3382  1 000766   300003 236300                    LDQ   ! 3,,PR3
         1 000767   100003 756300                    STQ   ! 3,,PR1

      423     3383    5                SUCC$->KQ$BTN.RSON$->KQ$BTN.PRNT$=SUCC$;

   3383  1 000770   100003 474700                    LDP4  ! 3,,PR1
         1 000771   200017 236300                    LDQ   ! SUCC$,,AUTO
         1 000772   400001 756300                    STQ   ! 1,,PR4

      424     3384    5                Z$->KQ$BTN.LSON$=R$;

   3384  1 000773   200012 236300                    LDQ   ! R$,,AUTO
         1 000774   200015 474700                    LDP4  ! Z$,,AUTO
         1 000775   400002 756300                    STQ   ! 2,,PR4

      425     3385    5                IF R$ ~= ADDR(NIL) THEN

   3385  1 000776   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 000777   001003 600200 1                  TZE   ! s:3388

      426     3386    5                 R$->KQ$BTN.PRNT$ = Z$;

   3386  1 001000   200015 236300                    LDQ   ! Z$,,AUTO
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:61   
         1 001001   200012 475700                    LDP5  ! R$,,AUTO
         1 001002   500001 756300                    STQ   ! 1,,PR5

      427     3387    5                END;

      428     3388    4              SUCC$->KQ$BTN.BF=P$->KQ$BTN.BF;

   3388  1 001003   300000 236300                    LDQ   ! 0,,PR3
         1 001004   100000 552304                    STBQ  ! 0,'04'O,PR1

      429     3389    4              END;

      430     3390
      431     3391
      432     3392                                /* WHEN WE GET HERE, Z$ POINTS TO THE FIRST
      433     3393                                   NODE WHICH MIGHT REQUIRE REBALANCE, AND
      434     3394                                   A REFLECTS WHICH SIDE THE DELETION WAS ON.  */
      435     3395    3           IF Z$ = ADDR(NIL) THEN RETURN;

   3395  1 001005   200015 236300                    LDQ   ! Z$,,AUTO
         1 001006   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 001007   001012 601200 1                  TNZ   ! DEL2

   3395  1 001010   200020 221300                    LDX1  ! SUCC$+1,,AUTO
         1 001011   000001 702211                    TSX2  ! 1,X1

   3395  1 001012                       DEL2         null
      436     3396    3   DEL2:   ;
      437     3397                                /* SET UP T$ FOR ROTATE */
      438     3398    3           IF Z$->KQ$BTN.PRNT$ = ADDR(NIL) THEN T$=ADDR(TREEHDR.ROOT$);

   3398  1 001012   200015 470700                    LDP0  ! Z$,,AUTO
         1 001013   000001 236300                    LDQ   ! 1,,PR0
         1 001014   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 001015   001022 601200 1                  TNZ   ! s:3401

   3398  1 001016   200003 236300                    LDQ   ! @TREEHDR,,AUTO
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:62   
         1 001017   000002 036203                    ADLQ  ! 2,DU
         1 001020   200014 756300                    STQ   ! T$,,AUTO
         1 001021   001033 710200 1                  TRA   ! s:3405

      439     3399    3           ELSE
      440     3400    4             DO;

      441     3401    4             IF Z$ = Z$->KQ$BTN.PRNT$->KQ$BTN.RSON$ THEN

   3401  1 001022   000001 471700                    LDP1  ! 1,,PR0
         1 001023   200015 236300                    LDQ   ! Z$,,AUTO
         1 001024   100003 116300                    CMPQ  ! 3,,PR1
         1 001025   001031 601200 1                  TNZ   ! s:3403

      442     3402    4              T$=ADDR(Z$->KQ$BTN.PRNT$->KQ$BTN.RSON$);

   3402  1 001026   100003 633700                    EPPR3 ! 3,,PR1
         1 001027   200014 453700                    STP3  ! T$,,AUTO
         1 001030   001033 710200 1                  TRA   ! s:3405

      443     3403    4             ELSE T$=ADDR(Z$->KQ$BTN.PRNT$->KQ$BTN.LSON$);

   3403  1 001031   100002 633700                    EPPR3 ! 2,,PR1
         1 001032   200014 453700                    STP3  ! T$,,AUTO

      444     3404    4             END;

      445     3405    3           S$=Z$;

   3405  1 001033   200015 236300                    LDQ   ! Z$,,AUTO
         1 001034   200013 756300                    STQ   ! S$,,AUTO

      446     3406    3           Z$=Z$->KQ$BTN.PRNT$;

   3406  1 001035   000001 236300                    LDQ   ! 1,,PR0
         1 001036   200015 756300                    STQ   ! Z$,,AUTO

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:63   
      447     3407    3           IF S$->KQ$BTN.BF = A THEN S$->KQ$BTN.BF=0;

   3407  1 001037   200013 470700                    LDP0  ! S$,,AUTO
         1 001040   000000 236300                    LDQ   ! 0,,PR0
         1 001041   000033 736200                    QLS   ! 27
         1 001042   000033 732200                    QRS   ! 27
         1 001043   200007 116300                    CMPQ  ! A,,AUTO
         1 001044   001050 601200 1                  TNZ   ! s:3408

   3407  1 001045   000000 236203                    LDQ   ! 0,DU
         1 001046   000000 552304                    STBQ  ! 0,'04'O,PR0
         1 001047   001073 710200 1                  TRA   ! s:3421

      448     3408    3           ELSE IF S$->KQ$BTN.BF = 0 THEN

   3408  1 001050   000000 236300                    LDQ   ! 0,,PR0
         1 001051   000777 316207                    CANQ  ! 511,DL
         1 001052   001057 601200 1                  TNZ   ! s:3415

      449     3409    4              DO;

      450     3410    4              S$->KQ$BTN.BF=-A;

   3410  1 001053   200007 336300                    LCQ   ! A,,AUTO
         1 001054   000000 552304                    STBQ  ! 0,'04'O,PR0

      451     3411    4              RETURN;

   3411  1 001055   200020 221300                    LDX1  ! SUCC$+1,,AUTO
         1 001056   000001 702211                    TSX2  ! 1,X1

      452     3412    4              END;
      453     3413    3            ELSE
      454     3414    4              DO;

      455     3415    4              IF A=1 THEN R$=S$->KQ$BTN.LSON$;

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:64   
   3415  1 001057   200007 235300                    LDA   ! A,,AUTO
         1 001060   000001 115207                    CMPA  ! 1,DL
         1 001061   001065 601200 1                  TNZ   ! s:3416

   3415  1 001062   000002 236300                    LDQ   ! 2,,PR0
         1 001063   200012 756300                    STQ   ! R$,,AUTO
         1 001064   001067 710200 1                  TRA   ! s:3417

      456     3416    4              ELSE R$=S$->KQ$BTN.RSON$;

   3416  1 001065   000003 236300                    LDQ   ! 3,,PR0
         1 001066   200012 756300                    STQ   ! R$,,AUTO

      457     3417    4              A=-A;

   3417  1 001067   000000 531200                    NEG   ! 0
         1 001070   200007 755300                    STA   ! A,,AUTO

      458     3418    4              CALL ROTATE ALTRET(DEL3);

   3418  1 001071   000321 701200 1                  TSX1  ! ROTATE
         1 001072   001107 702200 1                  TSX2  ! DEL3

      459     3419    4              END;

      460     3420                                /* NOW RE-ADJUST A */
      461     3421    3           IF Z$ ~= ADDR(NIL) THEN

   3421  1 001073   200015 236300                    LDQ   ! Z$,,AUTO
         1 001074   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 001075   001107 600200 1                  TZE   ! DEL3

      462     3422    4             DO;

      463     3423    4             IF T$ = ADDR(Z$->KQ$BTN.RSON$) THEN A=1;

   3423  1 001076   000003 036203                    ADLQ  ! 3,DU
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:65   
         1 001077   200014 116300                    CMPQ  ! T$,,AUTO
         1 001100   001104 601200 1                  TNZ   ! s:3424

   3423  1 001101   000001 235207                    LDA   ! 1,DL
         1 001102   200007 755300                    STA   ! A,,AUTO
         1 001103   001106 710200 1                  TRA   ! s:3425

      464     3424    4             ELSE A=-1;

   3424  1 001104   000001 335207                    LCA   ! 1,DL
         1 001105   200007 755300                    STA   ! A,,AUTO

      465     3425    4             GOTO DEL2;

   3425  1 001106   001012 710200 1                  TRA   ! DEL2

   3421  1 001107                       DEL3         null
      466     3426    4             END;
      467     3427    3   DEL3:   ;
      468     3428    3           RETURN;

   3428  1 001107   200020 221300                    LDX1  ! SUCC$+1,,AUTO
         1 001110   000001 702211                    TSX2  ! 1,X1

      469     3429    3           END; /* INHIBIT */

   3429  1 001111   001242 710000 1                  TRA     s:3486

      470     3430
      471     3431
      472     3432        /* FIND PRED OF P$; ALTRET IF NONE W/ PRED$ = NIL */
      473     3433    2   GETPRED: PROC ALTRET;

   3433  1 001112   200022 741300       GETPRED      STX1  ! SUCC$+3,,AUTO

      474     3434    4           DO INHIBIT;

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:66   
      475     3435    4           PRED$=ADDR(NIL);

   3435  1 001113   000001 236200 xsym               LDQ   ! B_VECTNIL+1
         1 001114   200016 756300                    STQ   ! PRED$,,AUTO

      476     3436    4           IF P$->KQ$BTN.LSON$ ~= ADDR(NIL) THEN

   3436  1 001115   200010 470700                    LDP0  ! P$,,AUTO
         1 001116   000002 236300                    LDQ   ! 2,,PR0
         1 001117   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 001120   001134 600200 1                  TZE   ! s:3444

      477     3437    5             DO;

      478     3438    5             PRED$=P$->KQ$BTN.LSON$;

   3438  1 001121   200016 756300                    STQ   ! PRED$,,AUTO

      479     3439    6               DO WHILE (PRED$->KQ$BTN.RSON$ ~= ADDR(NIL));

   3439  1 001122   001126 710200 1                  TRA   ! s:3441

      480     3440    6               PRED$=PRED$->KQ$BTN.RSON$;

   3440  1 001123   200016 470700                    LDP0  ! PRED$,,AUTO
         1 001124   000003 236300                    LDQ   ! 3,,PR0
         1 001125   200016 756300                    STQ   ! PRED$,,AUTO

      481     3441    6               END;

   3441  1 001126   200016 470700                    LDP0  ! PRED$,,AUTO
         1 001127   000003 236300                    LDQ   ! 3,,PR0
         1 001130   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 001131   001123 601200 1                  TNZ   ! s:3440

      482     3442    5             RETURN;

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:67   
   3442  1 001132   200022 221300                    LDX1  ! SUCC$+3,,AUTO
         1 001133   000001 702211                    TSX2  ! 1,X1

      483     3443    5             END;
      484     3444    4           S$=P$;

   3444  1 001134   200010 236300                    LDQ   ! P$,,AUTO
         1 001135   200013 756300                    STQ   ! S$,,AUTO

      485     3445    5             DO WHILE (S$->KQ$BTN.PRNT$ ~= ADDR(NIL));

   3445  1 001136   001152 710200 1                  TRA   ! s:3452

      486     3446    5             IF S$ = S$->KQ$BTN.PRNT$->KQ$BTN.RSON$ THEN

   3446  1 001137   200013 470700                    LDP0  ! S$,,AUTO
         1 001140   000001 471700                    LDP1  ! 1,,PR0
         1 001141   200013 236300                    LDQ   ! S$,,AUTO
         1 001142   100003 116300                    CMPQ  ! 3,,PR1
         1 001143   001150 601200 1                  TNZ   ! s:3451

      487     3447    6               DO;

      488     3448    6               PRED$=S$->KQ$BTN.PRNT$;

   3448  1 001144   000001 236300                    LDQ   ! 1,,PR0
         1 001145   200016 756300                    STQ   ! PRED$,,AUTO

      489     3449    6               RETURN;

   3449  1 001146   200022 221300                    LDX1  ! SUCC$+3,,AUTO
         1 001147   000001 702211                    TSX2  ! 1,X1

      490     3450    6               END;
      491     3451    5             S$=S$->KQ$BTN.PRNT$;

   3451  1 001150   000001 236300                    LDQ   ! 1,,PR0
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:68   
         1 001151   200013 756300                    STQ   ! S$,,AUTO

      492     3452    5             END;

   3452  1 001152   200013 470700                    LDP0  ! S$,,AUTO
         1 001153   000001 236300                    LDQ   ! 1,,PR0
         1 001154   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 001155   001137 601200 1                  TNZ   ! s:3446

      493     3453    4           ALTRETURN;

   3453  1 001156   200022 221300                    LDX1  ! SUCC$+3,,AUTO
         1 001157   000000 702211                    TSX2  ! 0,X1

      494     3454    4           END; /* INHIBIT */

      495     3455    3   END GETPRED;

   3455  1 001160   000001 702211                    TSX2  ! 1,X1

      496     3456        /* SAME AS GETPRED BUT SUCCESSOR */
      497     3457    2   GETSUCC: PROC ALTRET;

   3457  1 001161   200022 741300       GETSUCC      STX1  ! SUCC$+3,,AUTO

      498     3458    4           DO INHIBIT;

      499     3459    4           IF TREEHDR.LINKS ~= 0 THEN

   3459  1 001162   200003 470700                    LDP0  ! @TREEHDR,,AUTO
         1 001163   000003 235300                    LDA   ! 3,,PR0
         1 001164   001174 600200 1                  TZE   ! s:3465

      500     3460    5             DO;

      501     3461    5             SUCC$=P$->KQ$BTN.FLINK$;

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:69   
   3461  1 001165   200010 471700                    LDP1  ! P$,,AUTO
         1 001166   100004 236300                    LDQ   ! 4,,PR1
         1 001167   200017 756300                    STQ   ! SUCC$,,AUTO

      502     3462    5             IF SUCC$ = ADDR(NIL) THEN ALTRETURN;

   3462  1 001170   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 001171   001173 601200 1                  TNZ   ! s:3463

   3462  1 001172   000000 702211                    TSX2  ! 0,X1

      503     3463    5             RETURN;

   3463  1 001173   000001 702211                    TSX2  ! 1,X1

      504     3464    5             END;
      505     3465    4           SUCC$=ADDR(NIL);

   3465  1 001174   000001 236200 xsym               LDQ   ! B_VECTNIL+1
         1 001175   200017 756300                    STQ   ! SUCC$,,AUTO

      506     3466    4           IF P$->KQ$BTN.RSON$ ~= ADDR(NIL) THEN

   3466  1 001176   200010 471700                    LDP1  ! P$,,AUTO
         1 001177   100003 236300                    LDQ   ! 3,,PR1
         1 001200   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 001201   001215 600200 1                  TZE   ! s:3474

      507     3467    5             DO;

      508     3468    5             SUCC$=P$->KQ$BTN.RSON$;

   3468  1 001202   200017 756300                    STQ   ! SUCC$,,AUTO

      509     3469    6               DO WHILE (SUCC$->KQ$BTN.LSON$ ~= ADDR(NIL));

   3469  1 001203   001207 710200 1                  TRA   ! s:3471
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:70   

      510     3470    6               SUCC$=SUCC$->KQ$BTN.LSON$;

   3470  1 001204   200017 470700                    LDP0  ! SUCC$,,AUTO
         1 001205   000002 236300                    LDQ   ! 2,,PR0
         1 001206   200017 756300                    STQ   ! SUCC$,,AUTO

      511     3471    6               END;

   3471  1 001207   200017 470700                    LDP0  ! SUCC$,,AUTO
         1 001210   000002 236300                    LDQ   ! 2,,PR0
         1 001211   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 001212   001204 601200 1                  TNZ   ! s:3470

      512     3472    5             RETURN;

   3472  1 001213   200022 221300                    LDX1  ! SUCC$+3,,AUTO
         1 001214   000001 702211                    TSX2  ! 1,X1

      513     3473    5             END;
      514     3474    4           S$=P$;

   3474  1 001215   200010 236300                    LDQ   ! P$,,AUTO
         1 001216   200013 756300                    STQ   ! S$,,AUTO

      515     3475    5             DO WHILE (P$->KQ$BTN.PRNT$ ~= ADDR(NIL));

   3475  1 001217   001233 710200 1                  TRA   ! s:3482

      516     3476    5             IF S$ = S$->KQ$BTN.PRNT$->KQ$BTN.LSON$ THEN

   3476  1 001220   200013 470700                    LDP0  ! S$,,AUTO
         1 001221   000001 471700                    LDP1  ! 1,,PR0
         1 001222   200013 236300                    LDQ   ! S$,,AUTO
         1 001223   100002 116300                    CMPQ  ! 2,,PR1
         1 001224   001231 601200 1                  TNZ   ! s:3481

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:71   
      517     3477    6               DO;

      518     3478    6               SUCC$=S$->KQ$BTN.PRNT$;

   3478  1 001225   000001 236300                    LDQ   ! 1,,PR0
         1 001226   200017 756300                    STQ   ! SUCC$,,AUTO

      519     3479    6               RETURN;

   3479  1 001227   200022 221300                    LDX1  ! SUCC$+3,,AUTO
         1 001230   000001 702211                    TSX2  ! 1,X1

      520     3480    6               END;
      521     3481    5             S$=S$->KQ$BTN.PRNT$;

   3481  1 001231   000001 236300                    LDQ   ! 1,,PR0
         1 001232   200013 756300                    STQ   ! S$,,AUTO

      522     3482    5             END;

   3482  1 001233   200010 470700                    LDP0  ! P$,,AUTO
         1 001234   000001 236300                    LDQ   ! 1,,PR0
         1 001235   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 001236   001220 601200 1                  TNZ   ! s:3476

      523     3483    4           ALTRETURN;

   3483  1 001237   200022 221300                    LDX1  ! SUCC$+3,,AUTO
         1 001240   000000 702211                    TSX2  ! 0,X1

      524     3484    4           END; /* INHIBIT */

      525     3485    3   END GETSUCC;

   3485  1 001241   000001 702211                    TSX2  ! 1,X1

      526     3486    2   END DELETE;
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:72   

   3486  1 001242   000001 702211                    TSX2  ! 1,X1

BTN_INIT
 Sect OctLoc
   0     000   000000 000000   000000 006014   000000 006014   000000 006014    ................
   0     004   000000 006014   040040 040040   040040 040040                    ....
      527     3487    1   END KQB$SRCH;

PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:73   
--  Include file information  --

   HF_LOCK_C.:E05TOU  cannot be made into a system file and is referenced.
   KQ_MAC_C.:E05TOU  is referenced.
   KQ_SUBS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure KQB$SRCH.
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:74   

 **** Variables and constants ****

  ****  Section 000 RoData KQB$SRCH

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(252)   r     1 BTN_INIT

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @KEY                       5-0-0/w PTR         r     1 @NODE$
     3-0-0/w PTR         r     1 @TREEHDR                   7-0-0/w SBIN        r     1 A
     6-0-0/w PTR         r     1 BTN$                      *0-0-0/w CHAR(8)     r     1 KEY
    *0-0-0/w PTR         r     1 NODE$                     10-0-0/w PTR         r     1 P$
    16-0-0/w PTR         r     1 PRED$                     11-0-0/w PTR         r     1 Q$
    12-0-0/w PTR         r     1 R$                        13-0-0/w PTR         r     1 S$
    17-0-0/w PTR         r     1 SUCC$                     14-0-0/w PTR         r     1 T$
    *0-0-0/w STRC(216)   r     1 TREEHDR                   15-0-0/w PTR         r     1 Z$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 BP$                        0-0-0/w STRC(252)   r     1 KQ$BTN


   Procedure KQB$SRCH requires 675 words for executable code.
   Procedure KQB$SRCH requires 24 words of local(AUTO) storage.

    No errors detected in file KQB$TREE.:E05TSI    .
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:75   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:76   
          MINI XREF LISTING

A
      2987**DCL      3168<<ASSIGN   3169<<ASSIGN   3173>>ASSIGN   3176>>IF       3198>>IF       3205>>IF
      3208>>IF       3238>>IF       3240>>ASSIGN   3252>>ASSIGN   3260>>ASSIGN   3272>>IF       3337<<ASSIGN
      3342<<ASSIGN   3376<<ASSIGN   3380<<ASSIGN   3407>>IF       3410>>ASSIGN   3415>>IF       3417<<ASSIGN
      3417>>ASSIGN   3423<<ASSIGN   3424<<ASSIGN
ALTRT1
      3078**LABEL    3080--CALLALT  3303--CALLALT
BP$
      2979**DCL      3097<<ASSIGN   3214<<ASSIGN   3230<<ASSIGN   3270<<ASSIGN   3348<<ASSIGN   3354<<ASSIGN
      3368<<ASSIGN
BTN$
      2986**DCL      3046<<ASSIGN   3047>>DOWHILE  3048>>ASSIGN   3049>>IF       3049<<ASSIGN   3049>>ASSIGN
      3050>>IF       3050<<ASSIGN   3050>>ASSIGN   3308<<ASSIGN   3309>>DOWHILE  3310>>IF       3311<<ASSIGN
      3311>>ASSIGN   3312>>IF       3313<<ASSIGN   3313>>ASSIGN   3318>>IF
BTN_INIT
      3016**DCL      3095>>ASSIGN   3143>>ASSIGN
DEL0 IN PROCEDURE DELETE
      3325**LABEL    3324--CALLALT
DEL00 IN PROCEDURE DELETE
      3314**LABEL    3314--GOTO
DEL1 IN PROCEDURE DELETE
      3328**LABEL    3326--GOTO
DEL2 IN PROCEDURE DELETE
      3395**LABEL    3425--GOTO
DEL3 IN PROCEDURE DELETE
      3421**LABEL    3418--CALLALT
DELETE
      3305**PROC     3303--CALL
GETPRED IN PROCEDURE DELETE
      3433**PROC     3324--CALL
GETSUCC IN PROCEDURE DELETE
      3457**PROC     3367--CALL
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:77   
INS
      3085**PROC     3080--CALL
INS1 IN PROCEDURE INS
      3125**LABEL    3113--GOTO
INS2 IN PROCEDURE INS
      3137**LABEL    3120--GOTO
INS3 IN PROCEDURE INS
      3140**LABEL    3138--GOTO
KEY
      2939**DCL        23--PROC     3049>>IF       3050>>IF       3078--ENTRY    3096>>ASSIGN   3109>>IF
      3115>>IF       3144>>ASSIGN   3301--ENTRY
KQ$BTN
      2961**DCL      3095<<ASSIGN   3143<<ASSIGN
KQ$BTN.BF
      2966**DCL      3127>>IF       3163<<ASSIGN   3164<<ASSIGN   3171>>IF       3173<<ASSIGN   3176>>IF
      3178<<ASSIGN   3198>>IF       3201<<ASSIGN   3202<<ASSIGN   3205>>IF       3238>>IF       3240<<ASSIGN
      3241<<ASSIGN   3243>>IF       3245<<ASSIGN   3246<<ASSIGN   3251<<ASSIGN   3252<<ASSIGN   3254<<ASSIGN
      3260<<ASSIGN   3388<<ASSIGN   3388>>ASSIGN   3407>>IF       3407<<ASSIGN   3408>>IF       3410<<ASSIGN
KQ$BTN.FLINK$
      2974**DCL      3101<<ASSIGN   3151<<ASSIGN   3151>>ASSIGN   3152<<ASSIGN   3156<<ASSIGN   3325<<ASSIGN
      3325>>ASSIGN   3328>>ASSIGN   3461>>ASSIGN
KQ$BTN.KEY
      2976**DCL      3049>>IF       3050>>IF       3096<<ASSIGN   3109>>IF       3115>>IF       3144<<ASSIGN
      3310>>IF       3310>>IF       3312>>IF       3312>>IF
KQ$BTN.LSON$
      2970**DCL      3049>>ASSIGN   3111>>ASSIGN   3112--ASSIGN   3137<<ASSIGN   3163>>IF       3168>>IF
      3210>>ASSIGN   3215<<ASSIGN   3217>>ASSIGN   3218<<ASSIGN   3221>>IF       3222>>ASSIGN   3231>>ASSIGN
      3232<<ASSIGN   3233<<ASSIGN   3235>>IF       3235>>ASSIGN   3274>>ASSIGN   3275<<ASSIGN   3281<<ASSIGN
      3283>>IF       3284>>ASSIGN   3311>>ASSIGN   3335>>IF       3338--ASSIGN   3346>>IF       3354>>ASSIGN
      3355>>IF       3356>>ASSIGN   3371<<ASSIGN   3371>>ASSIGN   3372>>ASSIGN   3384<<ASSIGN   3403--ASSIGN
      3415>>ASSIGN   3436>>IF       3438>>ASSIGN   3469>>DOWHILE  3470>>ASSIGN   3476>>IF
KQ$BTN.PRNT$
      2968**DCL      3145<<ASSIGN   3166>>ASSIGN   3211<<ASSIGN   3212<<ASSIGN   3212>>ASSIGN   3213<<ASSIGN
      3220<<ASSIGN   3222<<ASSIGN   3227<<ASSIGN   3228<<ASSIGN   3228>>ASSIGN   3229<<ASSIGN   3235<<ASSIGN
      3236<<ASSIGN   3269<<ASSIGN   3269>>ASSIGN   3271<<ASSIGN   3277<<ASSIGN   3284<<ASSIGN   3331>>ASSIGN
      3350<<ASSIGN   3356<<ASSIGN   3369>>ASSIGN   3370<<ASSIGN   3370>>ASSIGN   3372<<ASSIGN   3383<<ASSIGN
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:78   
      3386<<ASSIGN   3398>>IF       3401>>IF       3402>>ASSIGN   3403>>ASSIGN   3406>>ASSIGN   3445>>DOWHILE
      3446>>IF       3448>>ASSIGN   3451>>ASSIGN   3475>>DOWHILE  3476>>IF       3478>>ASSIGN   3481>>ASSIGN
KQ$BTN.RSON$
      2972**DCL      3050>>ASSIGN   3117>>ASSIGN   3118--ASSIGN   3140<<ASSIGN   3215>>ASSIGN   3216<<ASSIGN
      3217<<ASSIGN   3219>>IF       3220>>ASSIGN   3226>>ASSIGN   3231<<ASSIGN   3233>>ASSIGN   3234<<ASSIGN
      3236>>IF       3236>>ASSIGN   3274<<ASSIGN   3276>>IF       3277>>ASSIGN   3281>>ASSIGN   3282<<ASSIGN
      3313>>ASSIGN   3343--ASSIGN   3348>>ASSIGN   3349>>IF       3350>>ASSIGN   3352>>IF       3381>>ASSIGN
      3382<<ASSIGN   3382>>ASSIGN   3383>>ASSIGN   3401>>IF       3402--ASSIGN   3416>>ASSIGN   3423--IF
      3439>>DOWHILE  3440>>ASSIGN   3446>>IF       3466>>IF       3468>>ASSIGN
NODE$
      2940**DCL        23--PROC     3044<<ASSIGN   3048<<ASSIGN   3078--ENTRY    3095>>ASSIGN   3096>>ASSIGN
      3097>>ASSIGN   3100>>ASSIGN   3101>>ASSIGN   3124<<ASSIGN   3137>>ASSIGN   3140>>ASSIGN   3142>>ASSIGN
      3301--ENTRY    3310>>IF       3312>>IF       3318>>IF       3320>>ASSIGN
P$
      2988**DCL      3088<<ASSIGN   3091>>ASSIGN   3092>>IF       3109>>IF       3111>>ASSIGN   3112>>ASSIGN
      3115>>IF       3117>>ASSIGN   3118>>ASSIGN   3119>>ASSIGN   3124>>ASSIGN   3132<<ASSIGN   3137>>ASSIGN
      3140>>ASSIGN   3145>>ASSIGN   3162>>DOWHILE  3163>>IF       3163>>ASSIGN   3164>>ASSIGN   3165>>ASSIGN
      3166<<ASSIGN   3166>>ASSIGN   3210<<ASSIGN   3211>>ASSIGN   3212>>ASSIGN   3213>>ASSIGN   3214>>ASSIGN
      3215>>ASSIGN   3216>>ASSIGN   3217>>ASSIGN   3218>>ASSIGN   3226<<ASSIGN   3227>>ASSIGN   3228>>ASSIGN
      3229>>ASSIGN   3230>>ASSIGN   3231>>ASSIGN   3232>>ASSIGN   3233>>ASSIGN   3234>>ASSIGN   3238>>IF
      3243>>IF       3254>>ASSIGN   3268<<ASSIGN   3320<<ASSIGN   3325>>ASSIGN   3328>>ASSIGN   3331>>ASSIGN
      3335>>IF       3346>>IF       3348>>ASSIGN   3349>>IF       3350>>ASSIGN   3352>>IF       3354>>ASSIGN
      3355>>IF       3356>>ASSIGN   3370>>ASSIGN   3371>>ASSIGN   3373>>IF       3382>>ASSIGN   3388>>ASSIGN
      3436>>IF       3438>>ASSIGN   3444>>ASSIGN   3461>>ASSIGN   3466>>IF       3468>>ASSIGN   3474>>ASSIGN
      3475>>DOWHILE
PRED$
      2994**DCL      3090<<ASSIGN   3119<<ASSIGN   3149>>IF       3151>>ASSIGN   3152>>ASSIGN   3325>>ASSIGN
      3435<<ASSIGN   3438<<ASSIGN   3439>>DOWHILE  3440<<ASSIGN   3440>>ASSIGN   3448<<ASSIGN
Q$
      2989**DCL      3111<<ASSIGN   3113>>IF       3117<<ASSIGN   3120>>IF       3127>>IF       3130>>ASSIGN
      3132>>ASSIGN   3142<<ASSIGN   3143>>ASSIGN   3144>>ASSIGN   3145>>ASSIGN   3151>>ASSIGN   3152>>ASSIGN
      3156>>ASSIGN   3157>>ASSIGN   3161>>ASSIGN
R$
      2990**DCL      3161<<ASSIGN   3163>>IF       3165<<ASSIGN   3168>>IF       3198>>IF       3202>>ASSIGN
      3205>>IF       3210>>ASSIGN   3211>>ASSIGN   3215>>ASSIGN   3216>>ASSIGN   3221>>IF       3222>>ASSIGN
      3222>>ASSIGN   3226>>ASSIGN   3227>>ASSIGN   3231>>ASSIGN   3232>>ASSIGN   3236>>IF       3236>>ASSIGN
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:79   
      3236>>ASSIGN   3241>>ASSIGN   3246>>ASSIGN   3252>>ASSIGN   3260>>ASSIGN   3268>>ASSIGN   3269>>ASSIGN
      3270>>ASSIGN   3271>>ASSIGN   3274>>ASSIGN   3275>>ASSIGN   3281>>ASSIGN   3282>>ASSIGN   3381<<ASSIGN
      3384>>ASSIGN   3385>>IF       3386>>ASSIGN   3415<<ASSIGN   3416<<ASSIGN
ROTATE
      3196**PROC     3182--CALL     3418--CALL
S$
      2991**DCL      3091<<ASSIGN   3130<<ASSIGN   3162>>DOWHILE  3168>>IF       3171>>IF       3173>>ASSIGN
      3176>>IF       3178>>ASSIGN   3201>>ASSIGN   3212>>ASSIGN   3213>>ASSIGN   3217>>ASSIGN   3218>>ASSIGN
      3219>>IF       3220>>ASSIGN   3220>>ASSIGN   3228>>ASSIGN   3229>>ASSIGN   3233>>ASSIGN   3234>>ASSIGN
      3235>>IF       3235>>ASSIGN   3235>>ASSIGN   3240>>ASSIGN   3245>>ASSIGN   3251>>ASSIGN   3269>>ASSIGN
      3271>>ASSIGN   3274>>ASSIGN   3275>>ASSIGN   3276>>IF       3277>>ASSIGN   3277>>ASSIGN   3281>>ASSIGN
      3282>>ASSIGN   3283>>IF       3284>>ASSIGN   3284>>ASSIGN   3405<<ASSIGN   3407>>IF       3407>>ASSIGN
      3408>>IF       3410>>ASSIGN   3415>>ASSIGN   3416>>ASSIGN   3444<<ASSIGN   3445>>DOWHILE  3446>>IF
      3446>>IF       3448>>ASSIGN   3451<<ASSIGN   3451>>ASSIGN   3474<<ASSIGN   3476>>IF       3476>>IF
      3478>>ASSIGN   3481<<ASSIGN   3481>>ASSIGN
SNGL IN PROCEDURE ROTATE
      3266**PROC     3203--CALL     3261--CALL
SUCC$
      2995**DCL      3368>>ASSIGN   3369>>ASSIGN   3370>>ASSIGN   3371>>ASSIGN   3372>>ASSIGN   3372>>ASSIGN
      3375>>ASSIGN   3381>>ASSIGN   3382>>ASSIGN   3383>>ASSIGN   3383>>ASSIGN   3388>>ASSIGN   3461<<ASSIGN
      3462>>IF       3465<<ASSIGN   3468<<ASSIGN   3469>>DOWHILE  3470<<ASSIGN   3470>>ASSIGN   3478<<ASSIGN
T$
      2992**DCL      3089<<ASSIGN   3097>>ASSIGN   3129<<ASSIGN   3214>>ASSIGN   3230>>ASSIGN   3270>>ASSIGN
      3332<<ASSIGN   3338<<ASSIGN   3343<<ASSIGN   3348>>ASSIGN   3354>>ASSIGN   3368>>ASSIGN   3398<<ASSIGN
      3402<<ASSIGN   3403<<ASSIGN   3423>>IF
TREEHDR
      2915**DCL        23--PROC     3078--ENTRY    3301--ENTRY
TREEHDR.ACTCNT
      2932**DCL      3087<<ASSIGN   3087>>ASSIGN   3307<<ASSIGN   3307>>ASSIGN
TREEHDR.COUNT
      2935**DCL      3103<<ASSIGN   3146<<ASSIGN   3146>>ASSIGN   3319<<ASSIGN   3319>>ASSIGN
TREEHDR.HEAD$
      2927**DCL      3100<<ASSIGN   3156>>ASSIGN   3157<<ASSIGN   3328<<ASSIGN
TREEHDR.LINKS
      2923**DCL      3098>>IF       3147>>IF       3322>>IF       3459>>IF
TREEHDR.ROOT$
PL6.E3A0      #001=KQB$SRCH File=KQB$TREE.:E05TSI                                WED 07/30/97 01:24 Page:80   
      2921**DCL      3046>>ASSIGN   3088>>ASSIGN   3089--ASSIGN   3308>>ASSIGN   3332--ASSIGN   3398--ASSIGN
Z$
      2993**DCL      3112<<ASSIGN   3118<<ASSIGN   3129>>ASSIGN   3331<<ASSIGN   3332>>IF       3335>>IF
      3338>>ASSIGN   3343>>ASSIGN   3350>>ASSIGN   3356>>ASSIGN   3369<<ASSIGN   3373>>IF       3375<<ASSIGN
      3384>>ASSIGN   3386>>ASSIGN   3395>>IF       3398>>IF       3401>>IF       3401>>IF       3402>>ASSIGN
      3403>>ASSIGN   3405>>ASSIGN   3406<<ASSIGN   3406>>ASSIGN   3421>>IF       3423>>IF
