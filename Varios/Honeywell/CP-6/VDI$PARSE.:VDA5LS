VERSION A05

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:1    
        1        1        /*M* VDI$PARSE - Read and parse commands for 6Edit */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P* NAME: VDI$PARSE
       12       12            PURPOSE: Read and parse commands for the Interpreter.
       13       13            DESCRIPTION:
       14       14                This module contains several external routines:
       15       15
       16       16                VDI$PDRIVER
       17       17                Gets command lines, parses them, and calls the appropriate Command
       18       18                Processor.
       19       19        *N*     Handles omitted block expressions, substituting and parsing the
       20       20        *N*     appropriate $DEFAULT_ name.
       21       21
       22       22                VDI$PARSE_TREE_TO_INTREE
       23       23                Converts one %T_xxx_CMD node of a parse tree into a (chain of) Intree
       24       24                node(s).
       25       25
       26       26                VDI$PGET_COMMAND_RECORD
       27       27                XUG$GETCMD calls VDI$PGET_COMMAND_RECORD to read a command
       28       28                record from the current command stream.
       29       29                GET_COMMAND_RECORD does the following to the command record:
       30       30        *N*         o If $ECHO is on, echos the record to M$DO.
       31       31                    o Replaces all synonyms in the record with their value.
       32       32
       33       33                VDI$PREAD_FILE
       34       34                Performs all I/O on a READ-file, using Fast Sequential services.
       35       35                This routine contains four entry-points:
       36       36                    VDI$PREAD_FILE_OPEN:  Open a READ-file.
       37       37                    VDI$PREAD_FILE_POSITION:  Position in a READ-file.
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:2    
       38       38                    VDI$PREAD_FILE_READ:  Read a command line from a READ-file.
       39       39                    VDI$PREAD_FILE_CLOSE:  Close a READ-file.
       40       40
       41       41                VDI$PUSER_PARSE_RTN
       42       42                When X$PARSE parses a node declared with the SUCC, FAIL, or PRE
       43       43                options, it will call VDI$PUSER_PARSE_RTN to do any parse-twiddling
       44       44                necessary.  All SUCC nodes in the syntax are OUT$SYM nodes containing
       45       45                names, which must be verified in various ways.  This routine verifies
       46       46                the names, and accepts or rejects them when it returns to X$PARSE.
       47       47
       48       48                VDI$PGLOBAL_COMMANDS
       49       49                This routine is called by XUG$GETCMD just before it executes
       50       50                a globally-recognized command (ie, DIRECTORY, DO, PRINT, ERASE, TIME,
       51       51                DATE, HELP, !, ?, ??, END, QUIT, EXIT).
       52       52                For some of these commands, we guarantee that the command
       53       53                window is popped-up (expanded) before they execute.
       54       54                We sidetrack the END/QUIT/EXIT commands to our own handler.
       55       55
       56       56                VDI$PREMOVE_EDIT_BLOCK
       57       57                When an explicit or implicit EDIT operation fails, we must go to a
       58       58                state of having no EditBlock open for editing.  This routine cleans
       59       59                up the mess.
       60       60        */
       61       61
       62       62        /*D* NAME: VDI$PDRIVER
       63       63            PARAMETERS:
       64       64                None.
       65       65            INPUT:
       66       66                VD_6E.CMD_STREAM$ - Ptr to top VD$CMD_STREAM on stack of such
       67       67                    structures.  The top entry describes the current command
       68       68                    stream:  either a READ-file, the command window, or
       69       69                    a one-shot buffer (for invocation command line, etc.).
       70       70                    (Encoded workspace files are processed by the READ command
       71       71                    processor, and so are never seen directly by VDI$PDRIVER.)
       72       72                    VD$CMD_STREAM.INTREE$ points to an InTree representing the current
       73       73                    command line; if it's NIL, then VD$CMD_STREAM.RECORD$ points to a
       74       74                    VD$BUFFER containing the current command line in character form.
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:3    
       75       75                    The lower entries in the stack represent command streams
       76       76                    interrupted by a READ command.
       77       77                    When the current command stream is not the command window,
       78       78                    we always read from that command stream rather than any
       79       79                    editing window.
       80       80                VD_CURRENT_WINDOW$ - Ptr to VD$FILE_NODE at level 1 of the
       81       81                    Windows file, for the current editing window.  May be NIL;
       82       82                    if not NIL, it still may not be editing anything (no current
       83       83                    EditBlock).
       84       84                VD_COMMAND_WINDOW$ - Ptr to VD$FILE_NODE at level 1 of the
       85       85                    Windows file, for the command window.  There must
       86       86                    be such a window at all times (after initialization), tho it
       87       87                    may at times be "invisible", ie, have a height of 0 lines.
       88       88                VD_$COMMAND - A VD$NUMBER for the predefined name "$COMMAND".
       89       89                    If the value of this name is true, we'll always read from the
       90       90                    command window, until $COMMAND is set false.
       91       91                VD_$MAX_COMMAND - A VD$NUMBER for the predefined name "$MAX_COMMAND".
       92       92                    The value of this name is the number of lines in the largest
       93       93                    command window (ie, when displaying messages, or doing HELP or
       94       94                    other "freebie" commands).
       95       95                VD_$MIN_COMMAND - A VD$NUMBER for the predefined name "$MIN_COMMAND".
       96       96                    The value of this name is the number of lines in the smallest
       97       97                    command window.  If this value is less than
       98       98                    %DFLT_$MIN_COMMAND, we'll use %DFLT_$MIN_COMMAND instead.
       99       99                VD_$SCREEN - A VD$NUMBER for the predefined name "$SCREEN".  The value
      100      100                    of this name is the number of lines of the terminal screen which
      101      101                    the user allows 6Edit to use.  A value less than
      102      102                    %MN_SCREEN_EDITING_HEIGHT specifies that we're not screen editing.
      103      103        *N*     Following paragraph de-implemented due to star 25801:
      104      104        *N*     VD_2DIM - Bit-flag saying if we're actually screen editing or not.
      105      105        *N*         Modifies the meaning of VD_$SCREEN.V#:  if VD_$SCREEN says to
      106      106        *N*         screen edit, well, we're really only screen editing if VD_2DIM
      107      107        *N*         is also set.
      108      108        *N*     VD_$DEFAULT_SOURCE - a VD$BUFFER for the predefined
      109      109        *N*         name "$DEFAULT_SOURCE".  The value of this name
      110      110        *N*         must be a block expression.  Value's length may be 0.
      111      111        *N*     VD_$DEFAULT_DESTINATION - a VD$BUFFER for the predefined
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:4    
      112      112        *N*         name "$DEFAULT_DESTINATION".  The value of this
      113      113        *N*         name must be a block expression.  Value's length may be 0.
      114      114                XUG_GETCMD - Control block for XUG$GETCMD.
      115      115            OUTPUT:
      116      116                None.  (This routine never "returns".  At the end of the session,
      117      117                    we'll get to VDG$MTERMINATE indirectly, via VDI$CEND or
      118      118                    VDG$EREPORT_ERROR or a trap to VDG$ETRAP.)
      119      119            DESCRIPTION:
      120      120                This is the "top of the loop".  Processing a fatal error
      121      121                    or an END command will get us out of this loop:
      122      122                If $COMMAND is not set (or if the previous command read ended with
      123      123                    EOM_NEXT_ED_WINDOW), and the current command stream is
      124      124                    the command window, and there is a current editing
      125      125                    window, and that window has an open EditBlock currently,
      126      126                    and we didn't just write an error message to the command
      127      127                    window, then call VDP$WREAD to read from the current
      128      128                    editing window.  On return from VDP$WREAD, the Presenter
      129      129                    will have told us a new window to read from:  if it's an
      130      130                    editing window, make that the new current window, and go
      131      131                    to the top of the loop again (check $COMMAND, etc); if
      132      132                    it's the command window or if it's an editing window which
      133      133                    isn't currently editing a file (no EditBlock), fall thru
      134      134                    to the next step to read from the command window.
      135      135                Call XUG$GETCMD to read and parse a command line.
      136      136                    The READR (read record) routine called by XUG$GETCMD will
      137      137                    see if the command stream is a workspace file, and if so,
      138      138                    will call VDW$LOAD to load the entire workspace file; it will
      139      139                    then pop the command stream stack and read from the previous
      140      140                    command stream; this will continue until we get a
      141      141                    text record containing a parsable command (or one which is
      142      142                    empty).
      143      143                GETCMD will then parse the record.  The parse tree for each
      144      144                    command will either contain a %T_xxx_CMD node or not:  the
      145      145                    presence of a %T_xxx_CMD node implies that the entire block
      146      146                    expression is given in this one command, whereas the absence
      147      147                    of a %T_xxx_CMD node (absence of an editing verb before
      148      148                    a block expression) implies that the user is in the process
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:5    
      149      149                    of finding or selecting a block, so don't do anything to
      150      150                    the block yet, just evaluate the new selection.
      151      151                If this is an editing command:
      152      152                    Call VDE$PBLOCK_EXPR to convert the ParseTree to an InTree.
      153      153                    Call VDE$IOPEN[_SOURCE] to setup the operand for the first
      154      154                        call to VDE$IRANGE, and (for non-source operands) to
      155      155                        open the stream to the correct file (if it isn't yet).
      156      156                If there is a T_xxx_CMD node in the command, call the
      157      157                    appropriate command processor (VDI$Cxxx).
      158      158                Else (if there is no T_xxx_CMD node in the command) call
      159      159                    VDE$IRANGE to evaluate the block expression.
      160      160                Discard all entries on the evaluation stack of the current
      161      161                    editing window, except the top entry.
      162      162                Discard the InTree.
      163      163        */
      164      164
      165      165        VDI$PDRIVER: PROC ALTRET;
      166      166
      167      167        %INCLUDE VD_MACROS_M;
      168     2382        %INCLUDE VD_PERR_C;
      169     2530        %INCLUDE VD_NODES0_E;
      170     2622        %INCLUDE XU_MACRO_C;
      171     5716        %INCLUDE XUE_SUBS_C;
      172     5896        %INCLUDE XUG_ENTRY;
      173     5927        %INCLUDE CP_6;
      174     6008        %INCLUDE B$TABLES_C;
      175     6116
      176     6117
      177     6118    1   DCL VDP$NFLUSH              ENTRY (1) ALTRET;
      178     6119    1   DCL VDP$WERASE              ENTRY (1) ALTRET;
      179     6120    1   DCL VDP$WREAD               ENTRY (3) ALTRET;
      180     6121    1   DCL VDA$LDELETE             ENTRY (2) ALTRET;
      181     6122    1   DCL VDA$LWRITE              ENTRY (4) ALTRET;
      182     6123    1   DCL VDA$PFLUSH              ENTRY (2) ALTRET;
      183     6124    1   DCL VDI$PARSE_TREE_TO_INTREE    ENTRY (3) ALTRET;
      184     6125    1   DCL VDI$PREMOVE_EDIT_BLOCK  ENTRY ALTRET;
      185     6126    1   DCL VDI$PREAD_FILE_CLOSE    ENTRY ALTRET;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:6    
      186     6127    1   DCL VDI$PREAD_FILE_OPEN     ENTRY ALTRET;
      187     6128    1   DCL VDI$PREAD_FILE_POSITION ENTRY ALTRET;
      188     6129    1   DCL VDE$PBLOCK_EXPR         ENTRY (1) ALTRET;
      189     6130    1   DCL VDE$PSTRING             ENTRY (5) ALTRET;
      190     6131    1   DCL VDE$PNUMBER             ENTRY (2) ALTRET;
      191     6132    1   DCL VDE$IOPEN               ENTRY ALTRET;
      192     6133    1   DCL VDE$IRANGE              ENTRY (2) ALTRET;
      193     6134    1   DCL VDG$SHRINK_COMMAND_WINDOW ENTRY (1) ALTRET;
      194     6135    1   DCL VDG$EXPAND_COMMAND_WINDOW ENTRY (1) ALTRET;
      195     6136    1   DCL VDG$OALLOC              ENTRY (3) ALTRET;
      196     6137    1   DCL VDG$OFREE               ENTRY (1) ALTRET;
      197     6138    1   DCL VDG$OCOPY               ENTRY (2) ALTRET;
      198     6139    1   DCL VDG$OCOPY_RANGE         ENTRY (2) ALTRET;
      199     6140    1   DCL VDG$EREPORT_ERROR       ENTRY (1);
      200     6141    1   DCL VDG$ESCREECH            ENTRY (3);
      201     6142    1   DCL VDP$WINIT               ENTRY ALTRET;
      202     6143
      203     6144
      204     6145    1   DCL VDI$CEDIT           ENTRY ALTRET;
      205     6146    1   DCL VDI$CDISPLAY        ENTRY ALTRET;
      206     6147    1   DCL VDI$CCOPY           ENTRY ALTRET;
      207     6148    1   DCL VDI$CMOVE           ENTRY ALTRET;
      208     6149    1   DCL VDI$CAFTER          ENTRY ALTRET;
      209     6150    1   DCL VDI$COVER           ENTRY ALTRET;
      210     6151    1   DCL VDI$CDELETE         ENTRY ALTRET;
      211     6152    1   DCL VDI$CDELETE_FID     ENTRY ALTRET;
      212     6153    1   DCL VDI$CEQUALS         ENTRY (1) ALTRET;
      213     6154    1   DCL VDI$CEND            ENTRY (1) ALTRET;
      214     6155    1   DCL VDI$CKEYIN          ENTRY (1) ALTRET;
      215     6156    1   DCL VDI$CLOCATION       ENTRY (1) ALTRET;
      216     6157    1   DCL VDI$CREAD           ENTRY (1) ALTRET;
      217     6158    1   DCL VDI$CRESTORE        ENTRY (1) ALTRET;
      218     6159    1   DCL VDI$CSAVE           ENTRY (1) ALTRET;
      219     6160    1   DCL VDI$CSHOW           ENTRY ALTRET;
      220     6161    1   DCL VDI$CSYNONYM        ENTRY (1) ALTRET;
      221     6162
      222     6163
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:7    
      223     6164        %VD_6E (STCLASS=SYMREF);
      224     6200        %XUG_GETCMD (NAME=XUG_GETCMD, STCLASS=SYMREF);
      225     6538    1   DCL VD_CURRENT_WINDOW$ PTR SYMREF;
      226     6539    1   DCL VD_COMMAND_WINDOW$ PTR SYMREF;
      227     6540    1   DCL VD_2DIM BIT(1) ALIGNED SYMREF;
      228     6541    1   DCL VD_FORCE_READ_FROM UBIN SYMREF;
      229     6542    1   DCL VD_LAST_CWIN_ACTIVITY UBIN SYMREF;
      230     6543    1   DCL VD_CMD_OBJECTS$ (0:%(MX_CMD_OBJECTS-1)) PTR SYMREF;
      231     6544        %B$XL_UPPER;
      232     6548    1   DCL VD_COMMAND_LINE SBIN SYMREF;    /* Parse nodes */
      233     6549    1   DCL VD_ASYM UBIN SYMREF;
      234     6550    1   DCL VD_WORST_FLAGLEV SBIN SYMREF;
      235     6551    1   DCL VD_EDITING_HEIGHT SBIN SYMREF;
      236     6552    1   DCL VD_EDITING_WINDOWS SBIN SYMREF;
      237     6553    1   DCL VD_IBEX_WINDOW SBIN SYMREF;
      238     6554    1   DCL VD_OLD_$SCREEN SBIN SYMREF;
      239     6555    1   DCL VD_SCREEN_HEIGHT SBIN SYMREF;
      240     6556    1   DCL M$6E DCB;
      241     6557    1   DCL M$ME DCB;
      242     6558    1   DCL M$SI DCB;
      243     6559        %VD$NUMBER (NAME=VD_$$QUAC, STCLASS=SYMREF);
      244     6604        %VD$NUMBER (NAME=VD_$SCREEN, STCLASS=SYMREF);
      245     6649        %VD$NUMBER (NAME=VD_$COMMAND, STCLASS=SYMREF);
      246     6694        %VD$NUMBER (NAME=VD_$MIN_COMMAND, STCLASS=SYMREF);
      247     6739        %VD$NUMBER (NAME=VD_$MAX_COMMAND, STCLASS=SYMREF);
      248     6784
      249     6785
      250     6786
      251     6787    1   DCL ACTCHR UBIN BYTE CALIGNED;
      252     6788    1   DCL ED_WINDOW_NODE$ PTR;
      253     6789    1   DCL CAN_READ_EDITING_WINDOW BIT(1) ALIGNED;
      254     6790    1   DCL CURR_WINDOW$ PTR;
      255     6791    1   DCL IT_COMMAND$ PTR;
      256     6792    1   DCL PREV_IT_COMMAND$ PTR;
      257     6793    1   DCL COMMAND_LINE$ PTR;
      258     6794    1   DCL CL_INDEX UBIN;
      259     6795    1   DCL GOT_WREAD_ERROR BIT(1) ALIGNED;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:8    
      260     6796    1   DCL WARN_ABORTED_BUFFER BIT(1) ALIGNED;
      261     6797    1   DCL ERR_FLAGLEV UBIN;
      262     6798    1   DCL VD_ERR$ PTR;
      263     6799    1   DCL SUBST_FIELD$ PTR;
      264     6800        %VD$ERR_CODE (NAME=ERR_CODE, STCLASS=AUTO);
      265     6815    1   DCL INDX SBIN;
      266     6816    1   DCL CMD_RECORD$ PTR;
      267     6817    1   DCL SINK$ PTR;
      268     6818
      269     6819
      270     6820        %VD$WINDOW_SPEC (NAME=CURR$WINDOW, STCLASS="BASED(CURR_WINDOW$)");
      271     6886        %VD$IT_COMMAND (NAME=IT$COMMAND, STCLASS="BASED(IT_COMMAND$)");
      272     6924        %VD$IT_COMMAND (NAME=PREV$IT_COMMAND, STCLASS="BASED(PREV_IT_COMMAND$)");
      273     6962        %VD$CMD_STREAM (NAME=CMD$STREAM, STCLASS="BASED(VD_6E.CMD_STREAM$)");
      274     7001        %VD$STREAM (NAME=WINDOWS$STREAM, STCLASS="BASED(VD_6E.WINDOWS$)");
      275     7107        %VD$BUFFER (NAME=CMD$RECORD, STCLASS="BASED(CMD_RECORD$)");
      276     7165        %PARSE$OUT (NAME=COMMAND$LINE, STCLASS="BASED(COMMAND_LINE$)");
      277     7210        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
      278     7263        %VD$ERR (NAME=FATAL$ERR, STCLASS="BASED(VD_6E.ERR_HEAD$)");
      279     7316        %VD$ERR (NAME=VD$ERR_TAIL, STCLASS="BASED(VD_6E.ERR_TAIL$)");
      280     7369        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
      281     7414        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
      282     7459        %VD$FILE_NODE;
      283     7552        %VD$BUFFER;
      284     7610        %VD$IT_BLOCK_EXPR;
      285     7760        %VD$PORT;
      286     7858        %VD$EVAL;
      287     8103        %VD$FILE_KEY;
      288     8152        %VD$IT_ADJUST (NAME=IT$ADJUST);
      289     8189        %VD$IT_OPERAND (NAME=IT$OPERAND);
      290     8255        %VD$IT_SELECT (NAME=IT$SELECT);
      291     8292        %VD$KEY_NUMBER;
      292     8307        %VD$NUMBER;
      293     8352        %VD$STREAM;
      294     8458        %VD$TEXTC_REMOTE;
      295     8519        %P_PCB (NAME=P$PCB, STCLASS=BASED);
      296     8718        %F$DCB;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:9    
      297     8775
      298     8776
      299     8777                %BOX (TITLE="Driver Loop");

              8789    1   /***************************************************************************
              8791    1    *                                                                         *
              8795    1            *                                Driver Loop                              *
              8797    1            *                                                                         *
              8799    1           ***************************************************************************/

      300     8803
      301     8804                /*
      302     8805                *   How globals are used to save the current state:
      303     8806                *   VD_$COMMAND.V# - If true, then user wants to keep reading
      304     8807                *       from the command window, not the current editing
      305     8808                *       window.  If false, then we keep reading from the
      306     8809                *       current editing window until the user explicitly
      307     8810                *       moves to the command window (which VDP$WREAD signals
      308     8811                *       by returning a nil new-editing-window pointer).
      309     8812                *       Note that even if we don't read from the command
      310     8813                *       window, we must check the value of VD_$COMMAND.V#
      311     8814                *       each time thru the loop, 'cause the user may change
      312     8815                *       it's value via an editing window open to the
      313     8816                *       Equals-file.
      314     8817                */
      315     8818
      316     8819    1           VD_FORCE_READ_FROM = %RF_DONT_CARE;
      317     8820    1           ACTCHR = %EOM_NORMAL;
      318     8821    1           IF VD_WORST_FLAGLEV >= %FLV_SERIOUS THEN GOTO CLEAN_UP;
      319     8822        /* Flush any stored commands if a pre-encoded context file failed */
      320     8823
      321     8824    1   FOREVER_LOOP:
      322     8825    2           DO %FOREVER;        /* END cmd or fatal error gets us out */
      323     8826    2              CAN_READ_EDITING_WINDOW = %FALSE;
      324     8827    2              ED_WINDOW_NODE$ = VD_CURRENT_WINDOW$;
      325     8828    3              IF ED_WINDOW_NODE$ ~= ADDR(NIL) THEN DO;
      326     8829    4                 IF ACTCHR = %EOM_NEXT_ED_WINDOW THEN DO;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:10   
      327     8830    4                    ED_WINDOW_NODE$ = ED_WINDOW_NODE$->VD$FILE_NODE.FLINK$;
      328     8831    4                    IF ED_WINDOW_NODE$ = ADDR(NIL) THEN
      329     8832    4                       ED_WINDOW_NODE$ = VD_6E.WINDOWS$ -> VD$STREAM.PORT$ ->
      330     8833    4                         VD$PORT.LEVEL.INTERNAL$(%LVL_FILE) ->
      331     8834    4                         VD$FILE_NODE.HEAD$ -> VD$FILE_NODE.FLINK$;
      332     8835    4                    VD_CURRENT_WINDOW$ = ED_WINDOW_NODE$;
      333     8836    4                    END;
      334     8837    3                 IF ED_WINDOW_NODE$->VD$FILE_NODE.DESC.SPEC.V$->
      335     8838    3                   CURR$WINDOW.OPERAND.EDIT_BLOCK$ ~= ADDR(NIL) THEN
      336     8839    3                    CAN_READ_EDITING_WINDOW = %TRUE;
      337     8840    3                 END;
      338     8841
      339     8842    2              IF CAN_READ_EDITING_WINDOW THEN
      340     8843    2   READ_EDITING_WINDOW:
      341     8844    3              DO WHILE (VD_$COMMAND.V# <= 0
      342     8845    3                OR VD_FORCE_READ_FROM = %RF_EDITING_WINDOW)
      343     8846    3                AND (CMD$STREAM.TYPE# = %CS_ME)
      344     8847    3                AND (ED_WINDOW_NODE$ ~= ADDR(NIL))
      345     8848    3                AND (VD_FORCE_READ_FROM ~= %RF_COMMAND_WINDOW);
      346     8849    3                 CURR_WINDOW$ = ED_WINDOW_NODE$->VD$FILE_NODE.DESC.SPEC.V$;
      347     8850    3                 IF CURR$WINDOW.OPERAND.EDIT_BLOCK$ = ADDR(NIL) THEN
      348     8851    3                    EXIT READ_EDITING_WINDOW;
      349     8852    3                 IF CURR$WINDOW.COMMAND THEN
      350     8853    3                    CALL VDG$ESCREECH;
      351     8854
      352     8855    4                 IF DCBADDR (CURR$WINDOW.DCB#) -> F$DCB.FCD# THEN DO;
      353     8856
      354     8857                      /* Pop-down (shrink) the command window */
      355     8858    4                    CALL VDG$SHRINK_COMMAND_WINDOW (VD_$MIN_COMMAND.V#)
      356     8859    4                      ALTRET (SHRINK_COMMAND_WINDOW_FAILED);
      357     8860
      358     8861                      /*
      359     8862                      *   Flush keyins, etc (but NOT edwin updates) to the terminal.
      360     8863                      *     (The call to VDP$WREAD will do an M$READ which will cause
      361     8864                      *     the FEP to update the editing windows.  If we also flush
      362     8865                      *     screen updates here, we'll M$DEVICE before the M$READ
      363     8866                      *     unnecessarily).
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:11   
      364     8867                      */
      365     8868    4                    CALL VDP$NFLUSH (%FALSE)
      366     8869    4                      ALTRET (NFLUSH_FAILED);
      367     8870    4                    END;
      368     8871
      369     8872    3                 VD_LAST_CWIN_ACTIVITY = %LCA_SWITCH;
      370     8873    3                 CALL VDP$WREAD (ED_WINDOW_NODE$, ACTCHR, %TO_PRESENTER)
      371     8874    3                   ALTRET (WREAD_FAILED);
      372     8875    3                 ACTCHR = %EOM_NORMAL;
      373     8876
      374     8877    3                 IF ED_WINDOW_NODE$ ~= ADDR(NIL) THEN
      375     8878    3                    VD_CURRENT_WINDOW$ = ED_WINDOW_NODE$;
      376     8879    3                 END READ_EDITING_WINDOW;
      377     8880    3              ELSE DO;
      378     8881                      /*
      379     8882                      *  We're not reading from the editing window -- so flush
      380     8883                      *    everything (including edwin updates) to the terminal.
      381     8884                      */
      382     8885    3                 IF CMD$STREAM.TYPE# = %CS_ME THEN
      383     8886    3                    CALL VDP$NFLUSH (%TRUE)
      384     8887    3                      ALTRET (NFLUSH_FAILED);
      385     8888    3                 END;
      386     8889
      387     8890
      388     8891                   /*
      389     8892                   *  Read from the command window.
      390     8893                   *  First, expand the command window to its minimum height.
      391     8894                   *     (It may have been shrunk to 0 lines.)
      392     8895                   */
      393     8896
      394     8897    2              VD_FORCE_READ_FROM = %RF_DONT_CARE;
      395     8898    2              IF (VD_$MIN_COMMAND.V#>0) THEN
      396     8899    2                 CALL VDG$EXPAND_COMMAND_WINDOW (VD_$MIN_COMMAND.V#)
      397     8900    2                   ALTRET (EXPAND_COMMAND_WINDOW_FAILED);
      398     8901    2              ELSE
      399     8902    2                 CALL VDG$EXPAND_COMMAND_WINDOW (%DFLT_$MIN_COMMAND)
      400     8903    2                   ALTRET (EXPAND_COMMAND_WINDOW_FAILED);
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:12   
      401     8904
      402     8905    2              XUG_GETCMD.NODES$ = ADDR(VD_COMMAND_LINE);
      403     8906    2              CALL XUG$GETCMD (XUG_GETCMD)
      404     8907    3              WHENALTRETURN DO;
      405     8908    3                 VD_LAST_CWIN_ACTIVITY = %LCA_READ;
      406     8909    3                 GOTO GETCMD_FAILED;
      407     8910    3                 END;
      408     8911    2              VD_LAST_CWIN_ACTIVITY = %LCA_READ;
      409     8912    2              IF XUG_GETCMD.NODES$ = ADDR(VD_ASYM) THEN
      410     8913    2                 GOTO CLEAN_UP; /* Error occurred in GET_COMMAND_RECORD */
      411     8914    2              ACTCHR = ASCBIN(DCBADDR(XUG_GETCMD.INDCB#)->F$DCB.EOMCHAR#);
      412     8915
      413     8916    2              IF CMD$STREAM.INTREE$ = ADDR(NIL)
      414     8917    3                AND XUG_GETCMD.OUT$ ~= ADDR(NIL) THEN DO;
      415     8918    3                 COMMAND_LINE$ = XUG_GETCMD.OUT$;
      416     8919                      %INCREMENT (ARRAY=STATS_TOKENS#, INDX="COMMAND$LINE.CODE - %VD_BASE#")
              8919                          ;
      417     8922    3                 PREV_IT_COMMAND$ = ADDR(NIL);
      418     8923    3                 CL_INDEX = 0;
      419     8924    4                 DO WHILE CL_INDEX < COMMAND$LINE.NSUBLKS;
      420     8925    4                    IT_COMMAND$ = ADDR(NIL);
      421     8926    4                    CALL VDI$PARSE_TREE_TO_INTREE (COMMAND$LINE, CL_INDEX,
      422     8927    4                      IT_COMMAND$)
      423     8928    4                      ALTRET (PARSE_TREE_TO_INTREE_FAILED);
      424     8929    5                    IF IT_COMMAND$ ~= ADDR(NIL) THEN DO;
      425     8930    5                       CMD$STREAM.INTREE$ = IT_COMMAND$;
      426     8931    5                       CMD$STREAM.IT_FROM_PARSE_TREE = %TRUE;
      427     8932    6                       DO WHILE IT_COMMAND$ ~= ADDR(NIL);
      428     8933    6                          CALL PROCESS_COMMAND (IT_COMMAND$)
      429     8934    6                            ALTRET (PROCESS_COMMAND_FAILED);
      430     8935    6                          END;
      431     8936    5                       CALL VDG$OFREE (CMD$STREAM.INTREE$->IT$COMMAND)
      432     8937    5                         ALTRET (OFREE_FAILED);
      433     8938    5                       CMD$STREAM.INTREE$ = ADDR(NIL);
      434     8939    5                       CMD$STREAM.IT_FROM_PARSE_TREE = %FALSE;
      435     8940    5                       END;
      436     8941    4                    END;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:13   
      437     8942    3                 END;
      438     8943
      439     8944    3              IF CMD$STREAM.INTREE$ ~= ADDR(NIL) THEN DO;
      440     8945    3                 IT_COMMAND$ = CMD$STREAM.INTREE$;
      441     8946    4                 DO WHILE IT_COMMAND$ ~= ADDR(NIL);
      442     8947    4                    CALL PROCESS_COMMAND (IT_COMMAND$)
      443     8948    4                      ALTRET (PROCESS_COMMAND_FAILED);
      444     8949    4                    END;
      445     8950    3                 END;
      446     8951
      447     8952    3              IF CMD$STREAM.IT_FROM_PARSE_TREE THEN DO;
      448     8953    3                 CALL VDG$OFREE (CMD$STREAM.INTREE$->IT$COMMAND)
      449     8954    3                   ALTRET (OFREE_FAILED);
      450     8955    3                 CMD$STREAM.INTREE$ = ADDR(NIL);
      451     8956    3                 CMD$STREAM.IT_FROM_PARSE_TREE = %FALSE;
      452     8957    3                 END;
      453     8958
      454     8959
      455     8960    2              IF VD_6E.ERR_TAIL$ ~= VD_6E.ERR_HEAD$ THEN
      456     8961    2                 CALL VDG$EREPORT_ERROR; /* Flush any info msgs */
      457     8962    2              END FOREVER_LOOP;
      458     8963
      459     8964    1   VDI$PFIX_WINDOWS: ENTRY ALTRET;
      460     8965
      461     8966    2           IF DCBADDR (DCBNUM (M$6E)) -> F$DCB.RES# ~= 'ME' THEN DO;
      462     8967                   /* An !ADJUST must have been the command - try to honor it */
      463     8968    2              IF VD_EDITING_WINDOWS > VD_IBEX_WINDOW THEN EXIT; /* Too late */
      464     8969    2              CALL VDP$WINIT;
      465     8970    2              END;
      466     8971    1           IF NOT DCBADDR (DCBNUM (M$ME)) -> F$DCB.FCD# OR VD_$SCREEN.V#=0 THEN
      467     8972    1              CALL VDG$EXPAND_COMMAND_WINDOW (VD_$SCREEN.V#);
      468     8973    1           RETURN;
      469     8974
      470     8975                %BOX (TITLE="Error Handlers");

              8987    1   /***************************************************************************
              8989    1    *                                                                         *
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:14   
              8993    1            *                               Error Handlers                            *
              8995    1            *                                                                         *
              8997    1           ***************************************************************************/

      471     9001
      472     9002    1   WREAD_FAILED:
      473     9003                /*
      474     9004                *   We differentiate between different types of WREAD
      475     9005                *       errors:  (1) those that occur on the file side before we
      476     9006                *       get the screen filled, usually while reading the file in
      477     9007                *       order to fill the screen; (2) those that occur on the file
      478     9008                *       side after we get the screen filled and begin reading
      479     9009                *       user keystrokes, usually while writing user-changed records
      480     9010                *       to the file; and
      481     9011                *N*     (3) those that occur on the FEP side.
      482     9012                *   We detect case (1) by looking at the last error on the VD$ERR
      483     9013                *       chain; if it's %E$CANT_READ_FILE, then we've got a case (1)
      484     9014                *       error.  In that case, remove the EditBlock so we don't loop
      485     9015                *       forever trying to read the file to fill the screen.
      486     9016                *   If the last VD$ERR is any other error, we've got case (2):
      487     9017                *       just erase the screen to force a refill of the screen
      488     9018                *       from the file.  This is an error like "can't insert records
      489     9019                *       into a consecutive file", or "can't insert anymore records
      490     9020                *       between these two".  We don't need to remove the EditBlock
      491     9021                *       block; presumeably the user won't keep repeating the same
      492     9022                *       mistake.  However, we do need to make sure that the screen
      493     9023                *       matches what's in the file, not what the FEP thinks it
      494     9024                *       should be:  an insertion may have worked in the FEP which
      495     9025                *       didn't work on the file, and the FEP must be informed of
      496     9026                *       the actual file contents.
      497     9027                *N* For case (3), who knows!  Assume it's not loopable, and
      498     9028                *N*     do the same as for case (2).
      499     9029                */
      500     9030    1           IF VD$ERR_TAIL.ERR.CODE# = %E$CANT_READ_FILE
      501     9031    2             AND NOT VD$ERR_TAIL.ERR.MON THEN DO;
      502     9032                   /* Case (1):  Remove the EditBlock */
      503     9033    2              CALL VDI$PREMOVE_EDIT_BLOCK;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:15   
      504     9034    2              END;
      505     9035    2           ELSE DO;
      506     9036                   /* Cases (2) and (3):  just erase the screen */
      507     9037    2              IF CURR$WINDOW.DCB# ~= VD$ERR_TAIL.DCB# THEN
      508     9038    2                 CALL VDP$WERASE (CURR$WINDOW);
      509     9039    2              END;
      510     9040    1           GOT_WREAD_ERROR = %TRUE;
      511     9041    1           GOTO CLEAN_UP;
      512     9042
      513     9043
      514     9044    1   GETCMD_FAILED:
      515     9045                /*
      516     9046                *  XUG_INIT.GOODCMD isn't set, so we get syntax errors as errors
      517     9047                *     from XUG (XUP-E$SYNERR-0).
      518     9048                *  Also, the subroutines called by GETCMD (eg VDI$PGET_COMMAND_RECORD
      519     9049                *     and VDI$PUSER_PARSE_RTN) may return errors.
      520     9050                *  A VD$ERR has already been allocated in all cases except an
      521     9051                *      error from an XU routine.
      522     9052                */
      523     9053    1           ERR_CODE = XUG_GETCMD.ERR#;
      524     9054    2           IF ERR_CODE.FCG = %FCG_XU THEN DO;
      525     9055    2              CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
      526     9056    2                ALTRET (OALLOC_FAILED);
      527     9057    2              VD$ERR.ERR = XUG_GETCMD.ERR#;
      528     9058    2              VD$ERR.FLAGLEV# = %FLV_SERIOUS;
      529     9059    2              VD$ERR.CMDLINE_INDEX# = XUG_GETCMD.PCB$->P$PCB.HI_CHAR;
      530     9060    2              END;
      531     9061    1           GOTO CLEAN_UP;
      532     9062
      533     9063
      534     9064    1   PARSE_TREE_TO_INTREE_FAILED:
      535     9065    1           CALL VDG$OFREE (CMD$STREAM.INTREE$->IT$COMMAND)
      536     9066    1             ALTRET (OFREE_FAILED);
      537     9067    1           CMD$STREAM.INTREE$ = ADDR(NIL);
      538     9068    1           CMD$STREAM.IT_FROM_PARSE_TREE = %FALSE;
      539     9069    1           GOTO CLEAN_UP;
      540     9070
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:16   
      541     9071
      542     9072    1   SHRINK_COMMAND_WINDOW_FAILED: ;
      543     9073    1   EXPAND_COMMAND_WINDOW_FAILED: ;
      544     9074    1   NFLUSH_FAILED: ;
      545     9075    1   PROCESS_COMMAND_FAILED: ;
      546     9076    1   CLEAN_UP:
      547     9077    1           IF VD_6E.CMD_STREAM$ ~= ADDR(NIL) THEN
      548     9078    2   FLUSH_CMD_STREAMS: DO;
      549     9079    2              VD_ERR$ = ADDR(NIL);
      550     9080
      551     9081    2   EACH_CMD_STREAM:
      552     9082    3              DO UNTIL (VD_6E.CMD_STREAM$ = ADDR (NIL));
      553     9083    3                 WARN_ABORTED_BUFFER = %FALSE;
      554     9084    3                 IF CMD$STREAM.TYPE# = %CS_BUFFER
      555     9085    3                   AND CMD$STREAM.RECORD$ ~= ADDR(NIL) THEN
      556     9086    3                    IF CMD$STREAM.POSITION# <
      557     9087    3                      CMD$STREAM.RECORD$ -> VD$BUFFER.LENGTH# THEN
      558     9088    3                       WARN_ABORTED_BUFFER = %TRUE;
      559     9089    4                 IF VD_$$QUAC.V# ~= 0 AND CMD$STREAM.DCB# = DCBNUM(M$SI) THEN DO;
      560     9090    4                    IF CMD$STREAM.REC_NUM# = 0 THEN EXIT; /* give up if not open */
      561     9091    4                    IF VD_ERR$=ADDR(NIL) THEN EXIT FLUSH_CMD_STREAMS;
      562     9092    4                    CALL VDI$PREAD_FILE_CLOSE;
      563     9093    4                    CALL VDI$PREAD_FILE_OPEN;
      564     9094    4                    CALL VDI$PREAD_FILE_POSITION;
      565     9095    4                    EXIT FLUSH_CMD_STREAMS; /* Only to the input file */
      566     9096    4                    END;
      567     9097    3                 IF CMD$STREAM.TYPE# = %CS_FILE
      568     9098    3                   OR CMD$STREAM.TYPE# = %CS_DCB
      569     9099    3                   OR WARN_ABORTED_BUFFER THEN
      570     9100    4   WARN_ABORTED_CMD_STREAM: DO;
      571     9101    4                    CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
      572     9102    4                      ALTRET (OALLOC_FAILED);
      573     9103    4                    SUBST_FIELD$ = PINCRW(VD_ERR$, SIZEW(VD$ERR));
      574     9104    4                    VD$ERR.FLAGLEV# = %FLV_WARN;
      575     9105    4                    INDX = 0;
      576     9106    5                    DO WHILE INDX < %MX_CMD_OBJECTS
      577     9107    5                      AND VD_CMD_OBJECTS$ (INDX) ~= ADDR(NIL);
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:17   
      578     9108    5                       INDX = INDX + 1;
      579     9109    5                       END;
      580     9110    4                    IF INDX >= %MX_CMD_OBJECTS THEN
      581     9111    4                       CALL VDG$ESCREECH;
      582     9112
      583     9113    5                    IF WARN_ABORTED_BUFFER THEN DO;
      584     9114    5                       VD$ERR.ERR.CODE# = %E$WARN_COMMANDS_IGNORED;
      585     9115    5                       VD_CMD_OBJECTS$ (INDX) = CMD$STREAM.RECORD$;
      586     9116    5                       CMD$STREAM.RECORD$ = ADDR(NIL);
      587     9117    5                       SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_TEXTC;
      588     9118    5                       CMD_RECORD$ = VD_CMD_OBJECTS$ (INDX);
      589     9119    5                       CALL INSERT (CMD$RECORD.BYTES,
      590     9120    5                         CMD$STREAM.POSITION# - 1, 1,
      591     9121    5                         BINASC(CMD$RECORD.LENGTH# - CMD$STREAM.POSITION#));
      592     9122    5                       SUBST$POINTER.V$ (0) = PINCRC(ADDR(CMD$RECORD.BYTES),
      593     9123    5                         CMD$STREAM.POSITION# - 1);
      594     9124    5                       END;
      595     9125    5                    ELSE DO;
      596     9126    5                       CALL VDI$PREAD_FILE_CLOSE; /* Any err reported below */
      597     9127    5                       VD$ERR.ERR.CODE# = %E$WARN_STOPPING_READ_FILE;
      598     9128    5                       CALL VDG$OALLOC (%CLS_TEXTC_REMOTE, VD_CMD_OBJECTS$ (INDX),
      599     9129    5                         LENGTHC(CMD$STREAM.FILE))
      600     9130    5                         ALTRET (OALLOC_FAILED);
      601     9131    5                       SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_TEXTC;
      602     9132    5                       SUBST$POINTER.V$ (0) = ADDR(VD_CMD_OBJECTS$ (INDX) ->
      603     9133    5                         VD$TEXTC_REMOTE.LENGTH#);
      604     9134    5                       VD_CMD_OBJECTS$ (INDX) -> VD$TEXTC_REMOTE.LENGTH# =
      605     9135    5                         CMD$STREAM.FILE.LENGTH#;
      606     9136    5                       VD_CMD_OBJECTS$ (INDX) -> VD$TEXTC_REMOTE.BYTES =
      607     9137    5                         CMD$STREAM.FILE.BYTES;
      608     9138    5                       SUBST$NUMBER.OBJECT.CLASS# (1) = %CLS_NUMBER;
      609     9139    5                       SUBST$NUMBER.V# (1) = CMD$STREAM.REC_NUM#;
      610     9140    5                       END;
      611     9141    4                    END WARN_ABORTED_CMD_STREAM;
      612     9142
      613     9143    3                 CALL VDG$OFREE (CMD$STREAM)
      614     9144    3                   ALTRET (OFREE_FAILED);
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:18   
      615     9145    3                 END EACH_CMD_STREAM;
      616     9146
      617     9147    2              CALL VDG$OALLOC (%CLS_CMD_STREAM, SINK$)
      618     9148    2                ALTRET (OALLOC_FAILED);
      619     9149    2              CMD$STREAM.TYPE# = %CS_ME;
      620     9150    2              END FLUSH_CMD_STREAMS;
      621     9151
      622     9152    1           CALL VDG$EREPORT_ERROR;
      623     9153
      624     9154    1           VD_FORCE_READ_FROM = %RF_COMMAND_WINDOW; /* Force 1 cmd window read */
      625     9155    1           GOTO FOREVER_LOOP;   /* Re-enter the loop at the top */
      626     9156
      627     9157
      628     9158    1   OALLOC_FAILED: ;
      629     9159    1   OFREE_FAILED: ;
      630     9160                /* These are fatal errors */
      631     9161    1           CALL VDG$EREPORT_ERROR; /* We'll never come back from this */
      632     9162
      633     9163        %BOX (TITLE=PROCESS_COMMAND, PAGE=YES);
              9171    1
              9175    1   /***************************************************************************
              9177    1    *                                                                         *
              9181    1            *                              PROCESS_COMMAND                            *
              9183    1            *                                                                         *
              9185    1           ***************************************************************************/

      634     9189
      635     9190        /*I* NAME: PROCESS_COMMAND
      636     9191            PARAMETERS:
      637     9192                IT_COMMAND$ - Ptr to a VD$IT_COMMAND node specyfying the command to
      638     9193                    process.
      639     9194            INPUT:
      640     9195
      641     9196                The following data isn't used by this routine directly,
      642     9197                but the comments below describe the state of the data
      643     9198                at the point between commands.
      644     9199
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:19   
      645     9200                VD_CURRENT_WINDOW$ points to the VD$FILE_NODE for the current
      646     9201                    editing window.  If not NIL, the Spec attached to this node is:
      647     9202                CURR$WINDOW - The VD$WINDOW_SPEC for the current editing window:
      648     9203                    .OPERAND.STREAM$ points to the window's stream, which is
      649     9204                        always open to the EditBlock (if any) for the window.
      650     9205                    .OPERAND.INTREE$ must be NIL between commands.
      651     9206                    .OPERAND.EDIT_BLOCK$ points to the block descriptor for
      652     9207                        the EditBlock, if any.
      653     9208                    .OPERAND.EVAL$ points to the top VD$EVAL on the evalutation
      654     9209                        stack for the current SelectedBlock:
      655     9210                        .ENCLOSING specifies the current enclosing range for
      656     9211                            evaluation; used by the VDE$Ixxx routines.
      657     9212                        .RANGE is the current range of the SelectedBlock (its
      658     9213                            domain is always the current EditBlock).
      659     9214                        .STATE# is the current state of evaluation of the
      660     9215                            block; used by VDE$Ixxx routines.
      661     9216                VD_6E.SOURCE.OPERAND contains all the above info for the
      662     9217                    Source operand.
      663     9218
      664     9219                There may be:
      665     9220                    No current EditBlock:  CURR$WSPEC.OPERAND.EDIT_BLOCK$ and
      666     9221                        .EVAL$ will be NIL.
      667     9222                    No current Source operand:  VD_6E.SOURCE.OPERAND.EDIT_BLOCK$
      668     9223                        will be NIL.
      669     9224            OUTPUT:
      670     9225                IT_COMMAND$ will be reset to point to the next
      671     9226                    VD$IT_COMMAND node to process, if any.
      672     9227                IT_COMMAND$'s InTree parameter, if it had one, will be removed.
      673     9228            DESCRIPTION:
      674     9229                This routine will process one command, as specified by a VD$IT_COMMAND
      675     9230                    node.
      676     9231                If the command has an explicit verb, call the appropriate command
      677     9232                    processor.
      678     9233                    If this is an editing command, reset the SelectedBlock's
      679     9234                    evaluation state to %EVST_INITIAL, ready for the next command.
      680     9235                If the command doesn't have an explicit verb, evaluate the
      681     9236                    range of the command's InTree:  this is the new range for the
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:20   
      682     9237                    SelectedBlock.
      683     9238                In any case, discard all entries on the SelectedBlock's
      684     9239                    evaluation stack except the top entry; those generators
      685     9240                    aren't needed anymore.
      686     9241        */
      687     9242
      688     9243    1   PROCESS_COMMAND: PROC (IT_COMMAND$) ALTRET;
      689     9244
      690     9245
      691     9246    2   DCL IT_COMMAND$ PTR;
      692     9247
      693     9248
      694     9249        /*
      695     9250        *   EQUs just for this routine.
      696     9251        */
      697     9252
      698     9253        %EQU NON_ED_CMD = 1;        /* Non-editing command */
      699     9254        %EQU EXPL_ED_CMD = 2;       /* Explicit editing command */
      700     9255        %EQU IMPL_ED_CMD = 3;       /* Implicit (verb-less) editing command */
      701     9256
      702     9257
      703     9258    2   DCL CMD_CLASS SBIN;
      704     9259    2   DCL CURR_WINDOW$ PTR;
      705     9260    2   DCL IT_BLOCK_EXPR$ PTR;
      706     9261    2   DCL SIGNAL BIT(1) ALIGNED;
      707     9262    2   DCL SAVE_SCREEN SBIN;
      708     9263    2   DCL DELFID_CMD    BIT(36)  STATIC SYMDEF INIT('0'B);
      709     9264
      710     9265
      711     9266        %VD$IT_COMMAND (NAME=IT$COMMAND, STCLASS="BASED(IT_COMMAND$)");
      712     9304        %PARSE$OUT (NAME=BLOCK$EXPR, STCLASS=BASED);
      713     9349        %VD$WINDOW_SPEC (NAME=CURR$WINDOW, STCLASS="BASED(CURR_WINDOW$)");
      714     9415        %VD$IT_BLOCK_EXPR (NAME=IT$BLOCK_EXPR, STCLASS="BASED(IT_BLOCK_EXPR$)");
      715     9565
      716     9566
      717     9567
      718     9568    2           CMD_CLASS = 0;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:21   
      719     9569    3           DO CASE (IT$COMMAND.CODE#);
      720     9570    3            CASE (%T_EDIT_CMD, %T_WINDOW_CMD,
      721     9571    3             %T_DISPLAY_CMD, %T_COPY_CMD, %T_MOVE_CMD, %T_AFTER_CMD,
      722     9572    3             %T_OVER_CMD, %T_DELETE_CMD, %T_LOCATION_CMD);
      723     9573    3              CMD_CLASS = %EXPL_ED_CMD;
      724     9574    3            CASE (%T_BLOCK_EXPR, %T_STRING_EXPR);
      725     9575    3              CMD_CLASS = %IMPL_ED_CMD;
      726     9576    3            CASE (ELSE);
      727     9577    3              CMD_CLASS = %NON_ED_CMD;
      728     9578    3            END;
      729     9579
      730     9580
      731     9581    2           IF CMD_CLASS = %EXPL_ED_CMD OR CMD_CLASS = %IMPL_ED_CMD THEN
      732     9582    3   EDITING_COMMANDS: DO;
      733     9583                   /*
      734     9584                   *   For editing commands, if there isn't a current editing window,
      735     9585                   *       create one, after first creating the "real" command
      736     9586                   *       window, if we're using a temporary serial one.
      737     9587                   */
      738     9588    3              IF VD_OLD_$SCREEN > 0 AND VD_$COMMAND.V# = 0 THEN
      739     9589    3                 CALL VDG$SHRINK_COMMAND_WINDOW (VD_$MIN_COMMAND.V#)
      740     9590    3                   ALTRET (CP_FAILED);
      741     9591
      742     9592    3              CALL EDITING_COMMAND_SEEN (CMD_CLASS)
      743     9593    3                ALTRET (EDITING_COMMAND_SEEN_FAILED);
      744     9594    3              IF IT$COMMAND.CODE# = %T_WINDOW_CMD AND
      745     9595    3                IT$COMMAND.PT_BLOCK_EXPR$ = ADDR(NIL)
      746     9596    3              THEN EXIT EDITING_COMMANDS;
      747     9597
      748     9598    3              CURR_WINDOW$ = VD_CURRENT_WINDOW$->VD$FILE_NODE.DESC.SPEC.V$;
      749     9599
      750     9600                   /*
      751     9601                   *  If given a parse-tree for a block expression, convert it into an
      752     9602                   *      InTree.
      753     9603                   *  In any case, the InTree should be moved to the WindowSpec.
      754     9604                   */
      755     9605    4              IF IT$COMMAND.PT_BLOCK_EXPR$ ~= ADDR(NIL) THEN DO;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:22   
      756     9606    4                 CALL VDE$PBLOCK_EXPR (IT$COMMAND.PT_BLOCK_EXPR$->BLOCK$EXPR)
      757     9607    4                   ALTRET (PBLOCK_EXPR_FAILED);
      758     9608    4                 IT$COMMAND.PT_BLOCK_EXPR$ = ADDR(NIL);
      759     9609    4                 END;
      760     9610    4              ELSE DO;
      761     9611    4                 CURR$WINDOW.OPERAND.INTREE$ = IT$COMMAND.PARAM$ (%CP_EDCMD_BLOCK);
      762     9612    4                 IT$COMMAND.PARAM$ (%CP_EDCMD_BLOCK) = ADDR(NIL);
      763     9613    4                 END;
      764     9614    3              IT_BLOCK_EXPR$ = CURR$WINDOW.OPERAND.INTREE$;
      765     9615
      766     9616    3              IF IT$COMMAND.CODE# = %T_EDIT_CMD
      767     9617    4                AND IT$BLOCK_EXPR.DOMAINN = %CLEAR THEN DO;
      768     9618                      /*
      769     9619                      *  This doesn't look like a new EditBlock.  But for
      770     9620                      *    the EDIT command, we always force a new EditBlock.
      771     9621                      */
      772     9622    4                 CALL NEW_EDIT_BLOCK_IN_OLD_DOMAIN (CURR$WINDOW, IT$BLOCK_EXPR)
      773     9623    4                   ALTRET (NEW_EDIT_BLOCK_IN_OLD_FAILED);
      774     9624    4                 END;
      775     9625
      776     9626                   /*
      777     9627                   *  Except for the COPY and MOVE commands, call VDE$IOPEN.
      778     9628                   */
      779     9629    3              IF IT$COMMAND.CODE# ~= %T_COPY_CMD
      780     9630    4                AND IT$COMMAND.CODE# ~= %T_MOVE_CMD THEN DO;
      781     9631    4                 DELFID_CMD = '0'B;
      782     9632    4                 IF IT$COMMAND.CODE# = %T_DELETE_CMD
      783     9633    4                   AND IT$BLOCK_EXPR.SELECTS_TAIL$ -> IT$SELECT.ADJUSTS_TAIL$ ->
      784     9634    4                   IT$ADJUST.MOVEMENTS_TAIL$ -> IT$OPERAND.CODE# = %OPAND_FILE THEN
      785     9635    4                    DELFID_CMD = '1'B;
      786     9636    4                 CALL VDE$IOPEN ALTRET (IOPEN_FAILED);
      787     9637    4                 END;
      788     9638
      789     9639    3              END EDITING_COMMANDS;
      790     9640
      791     9641
      792     9642                /*
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:23   
      793     9643                *   Call the appropriate command processor.
      794     9644                */
      795     9645
      796     9646    3           DO CASE (IT$COMMAND.CODE#);
      797     9647
      798     9648    3            CASE (%T_BLOCK_EXPR, %T_STRING_EXPR);
      799     9649                   %INCREMENT (INDX=%STG_BLKEXPR_CMD);
      800     9652    3              CALL VDE$IRANGE (CURR$WINDOW.OPERAND, SIGNAL)
      801     9653    3                ALTRET (IRANGE_FAILED);
      802     9654                   /* Note that SIGNAL says if we found a range or not */
      803     9655    4              IF NOT SIGNAL THEN DO;
      804     9656    4                 CALL VDG$OALLOC (%CLS_ERR, VD_ERR$) ALTRET (OALLOC_FAILED);
      805     9657    4                 VD$ERR.ERR.CODE# = %E$INFO_NONE;
      806     9658    4                 VD$ERR.FLAGLEV# = %FLV_WARN;
      807     9659    4                 END;
      808     9660
      809     9661    3            CASE (%T_EDIT_CMD);
      810     9662    3              CALL VDI$CEDIT
      811     9663    3                ALTRET (CP_FAILED);
      812     9664    3              CURR_WINDOW$ = VD_CURRENT_WINDOW$->VD$FILE_NODE.DESC.SPEC.V$;
      813     9665    3            CASE (%T_SHOW_CMD);
      814     9666    3              SIGNAL = '0'B;
      815     9667                   /* Parse the block expression first */
      816     9668    3              IF VD_CURRENT_WINDOW$ = ADDR(NIL) THEN
      817     9669    3                 VD_CURRENT_WINDOW$ = VD_COMMAND_WINDOW$;
      818     9670    3              CALL VDE$PBLOCK_EXPR (IT$COMMAND.PT_BLOCK_EXPR$->BLOCK$EXPR)
      819     9671    3                ALTRET (SHOW_PBLOCK_EXPR_FAILED);
      820     9672    3              IT$COMMAND.PT_BLOCK_EXPR$ = ADDR(NIL);
      821     9673                   /* Now move the InTree to the source Operand, protected */
      822     9674    4              CALL VDI$CCOPY WHENALTRETURN DO;
      823     9675    4   SHOW_PBLOCK_EXPR_FAILED: SIGNAL = %TRUE;
      824     9676    4                 END;
      825     9677    3              IF VD_CURRENT_WINDOW$ = VD_COMMAND_WINDOW$ THEN
      826     9678    3                 VD_CURRENT_WINDOW$ = ADDR(NIL);
      827     9679
      828     9680    3              IF SIGNAL THEN
      829     9681    3                 GOTO CP_FAILED;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:24   
      830     9682    3              IF VD_$SCREEN.V# > 0
      831     9683    3                AND VD_FORCE_READ_FROM ~= %RF_EDITING_WINDOW THEN
      832     9684    3                 CALL VDG$EXPAND_COMMAND_WINDOW (VD_$SCREEN.V#);
      833     9685
      834     9686    3              SAVE_SCREEN = VD_$SCREEN.V#;
      835     9687    3              VD_$SCREEN.V# = 0;
      836     9688    3              CALL VDI$CSHOW
      837     9689    4              WHENALTRETURN DO;
      838     9690    4                 SIGNAL = '1'B;
      839     9691    4                 END;
      840     9692
      841     9693    3              VD_$SCREEN.V# = SAVE_SCREEN;
      842     9694
      843     9695    3              IF VD_FORCE_READ_FROM ~= %RF_EDITING_WINDOW THEN
      844     9696    3                 VD_FORCE_READ_FROM = %RF_COMMAND_WINDOW;
      845     9697    3              IF SIGNAL THEN GOTO CP_FAILED;
      846     9698    3            CASE (%T_WINDOW_CMD);
      847     9699    3              IF VD_CURRENT_WINDOW$ = ADDR(NIL) THEN EXIT;
      848     9700    3              IF VD_CURRENT_WINDOW$ -> VD$FILE_NODE.DESC.SPEC.V$ ->
      849     9701    3                CURR$WINDOW.OPERAND.INTREE$ ~= ADDR(NIL) THEN
      850     9702    3                 CALL VDI$CEDIT ALTRET (CP_FAILED);
      851     9703    3              CURR_WINDOW$ = VD_CURRENT_WINDOW$->VD$FILE_NODE.DESC.SPEC.V$;
      852     9704
      853     9705    3            CASE (%T_DISPLAY_CMD);
      854     9706    3              CALL VDI$CDISPLAY
      855     9707    3                ALTRET (CP_FAILED);
      856     9708
      857     9709    3            CASE (%T_COPY_CMD);
      858     9710    3              CALL VDI$CCOPY
      859     9711    3                ALTRET (CP_FAILED);
      860     9712
      861     9713    3            CASE (%T_MOVE_CMD);
      862     9714    3              CALL VDI$CMOVE
      863     9715    3                ALTRET (CP_FAILED);
      864     9716
      865     9717    3            CASE (%T_AFTER_CMD);
      866     9718    3              CALL VDI$CAFTER
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:25   
      867     9719    3                ALTRET (CP_FAILED);
      868     9720
      869     9721    3            CASE (%T_OVER_CMD);
      870     9722    3              CALL VDI$COVER
      871     9723    3                ALTRET (CP_FAILED);
      872     9724
      873     9725    3            CASE (%T_DELETE_CMD);
      874     9726    3              IF NOT DELFID_CMD THEN
      875     9727    3                 CALL VDI$CDELETE
      876     9728    3                   ALTRET (CP_FAILED);
      877     9729    3              ELSE
      878     9730    3                 CALL VDI$CDELETE_FID
      879     9731    3                   ALTRET (CP_FAILED);
      880     9732
      881     9733    3            CASE (%T_EQUALS_CMD);
      882     9734    3              CALL VDI$CEQUALS (IT$COMMAND)
      883     9735    3                ALTRET (CP_FAILED);
      884     9736
      885     9737    3            CASE (%T_LOCATION_CMD);
      886     9738    3              CALL VDI$CLOCATION (IT$COMMAND)
      887     9739    3                ALTRET (CP_FAILED);
      888     9740
      889     9741    3            CASE (%T_SYNONYM_CMD);
      890     9742    3              CALL VDI$CSYNONYM (IT$COMMAND)
      891     9743    3                ALTRET (CP_FAILED);
      892     9744
      893     9745    3            CASE (%T_KEYIN_CMD);
      894     9746    3              CALL VDI$CKEYIN (IT$COMMAND)
      895     9747    3                ALTRET (CP_FAILED);
      896     9748
      897     9749    3            CASE (%T_SAVE_CMD);
      898     9750    3              CALL VDI$CSAVE (IT$COMMAND)
      899     9751    3                ALTRET (CP_FAILED);
      900     9752
      901     9753    3            CASE (%T_READ_CMD);
      902     9754    3              CALL VDI$CREAD (IT$COMMAND)
      903     9755    3                ALTRET (CP_FAILED);
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:26   
      904     9756                   /* Force no more processing of this record for now */
      905     9757    3              IT_COMMAND$ = ADDR(NIL);
      906     9758    3            CASE (%T_RESTORE_CMD);
      907     9759    3              CALL VDI$CRESTORE (IT$COMMAND)
      908     9760    3                ALTRET (CP_FAILED);
      909     9761
      910     9762    3            CASE (%T_END_CMD);
      911     9763    3              IF IT$COMMAND.FLINK$ ~= ADDR(NIL)
      912     9764    3                OR CL_INDEX<COMMAND$LINE.NSUBLKS THEN
      913     9765    3                 GOTO END_NOT_LAST_FAILURE;
      914     9766    3              CALL VDI$CEND (IT$COMMAND)
      915     9767    3                ALTRET (CP_FAILED);
      916     9768
      917     9769    3            CASE (ELSE);
      918     9770    3              CALL VDG$ESCREECH (IT$COMMAND.CODE#);
      919     9771
      920     9772    3            END;
      921     9773
      922     9774                /*
      923     9775                *   Discard all the evaluation stack except the top entry.
      924     9776                *   Discard the InTree.
      925     9777                */
      926     9778
      927     9779    2           CALL CLEAN_UP_AFTER_COMMAND (CMD_CLASS)
      928     9780    2             ALTRET (CLEAN_UP_AFTER_COMMAND_FAILED);
      929     9781
      930     9782    2           IF IT_COMMAND$ ~= ADDR(NIL) THEN
      931     9783    2              IT_COMMAND$ = IT$COMMAND.FLINK$;
      932     9784
      933     9785    2           RETURN;
      934     9786
      935     9787
      936     9788                %BOX (TITLE="Error Handlers");

              9800    2   /***************************************************************************
              9802    2    *                                                                         *
              9806    2            *                               Error Handlers                            *
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:27   
              9808    2            *                                                                         *
              9810    2           ***************************************************************************/

      937     9814
      938     9815    2   END_NOT_LAST_FAILURE:
      939     9816    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
      940     9817    2             ALTRET (OALLOC_FAILED);
      941     9818    2           VD$ERR.ERR.CODE# = %E$END_NOT_LAST_CMD;
      942     9819    2           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
      943     9820
      944     9821
      945     9822    2   PBLOCK_EXPR_FAILED: ;
      946     9823    2   OCOPY_RANGE_FAILED: ;
      947     9824    2   IOPEN_FAILED: ;
      948     9825    2   IRANGE_FAILED: ;
      949     9826    2   CP_FAILED: ;
      950     9827    2           IF VD_6E.ERR_TAIL$->VD$ERR.CMDLINE_INDEX# = 0 THEN
      951     9828    2              VD_6E.ERR_TAIL$->VD$ERR.CMDLINE_INDEX# = IT$COMMAND.CMDLINE_INDEX#;
      952     9829    2           IF FATAL$ERR.ERR = %CLEAR THEN
      953     9830    2              CALL CLEAN_UP_AFTER_COMMAND (CMD_CLASS)
      954     9831    2                ALTRET (CLEAN_UP_AFTER_COMMAND_FAILED);
      955     9832    2           ALTRETURN;
      956     9833
      957     9834
      958     9835    2   OALLOC_FAILED: ;
      959     9836    2   EDITING_COMMAND_SEEN_FAILED: ;
      960     9837    2   NEW_EDIT_BLOCK_IN_OLD_FAILED: ;
      961     9838    2   CLEAN_UP_AFTER_COMMAND_FAILED: ;
      962     9839    2           ALTRETURN;
      963     9840
      964     9841    2   END PROCESS_COMMAND;
      965     9842
      966     9843        %BOX (TITLE=EDITING_COMMAND_SEEN, PAGE=YES);
              9851    2
              9855    2   /***************************************************************************
              9857    2    *                                                                         *
              9861    2            *                            EDITING_COMMAND_SEEN                         *
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:28   
              9863    2            *                                                                         *
              9865    2           ***************************************************************************/

      967     9869
      968     9870        /*I* NAME: EDITING_COMMAND_SEEN
      969     9871            PARAMETERS:
      970     9872                CMD_CLASS is a word; it must be %EXPL_ED_CMD or %IMPL_ED_CMD.
      971     9873            INPUT:
      972     9874                VD_CURRENT_WINDOW$ must either be NIL, or point to the FileNode at
      973     9875                    level 1 of the Windows file, for the current editing window.
      974     9876                    NOTE that even if there is such a window currently, it may not
      975     9877                    be editing anything (as a result of an error), and its
      976     9878                    stream may be closed.
      977     9879                    May or may not have an .OPERAND.EVAL$ currently.
      978     9880            OUTPUT:
      979     9881                VD_CURRENT_WINDOW$ - If NIL at entry, will point to the VD$FILE_NODE
      980     9882                    at level 1 of the Windows file for a newly-created editing
      981     9883                    window, which isn't editing anything.
      982     9884                The current editing window's .OPERAND.EVAL$ will point to a
      983     9885                    single VD$EVAL; the rest of the stack will be freed.
      984     9886                    .CTRL_REC_MATCHED_EOF will be reset.
      985     9887                    (If at entry there was no evaluation stack, nothing will
      986     9888                    be done with it, and .OPERAND.EVAL$ will still be NIL.)
      987     9889                The current editing window's .OPERAND.INTREE$ will be NIL.
      988     9890                If this is an explicit editing command, the evaluation state
      989     9891                    (VD$EVAL.STATE#) will be set to %EVST_INITIAL.
      990     9892            DESCRIPTION:
      991     9893                If there are no editing windows yet (VD_CURRENT_WINDOW$ is NIL),
      992     9894                    create the first editing window; it starts out editing nothing.
      993     9895        *N*         Following paragraph de-implemented due to star 25801; instead,
      994     9896        *N*         just set the VD_2DIM flag but don't muck with command window:
      995     9897        *N*         If VD_$SCREEN says we can screen-edit, then check VD_2DIM:  it
      996     9898        *N*         probably indicates we're not screen editing yet (since this is
      997     9899        *N*         the first editing window), so set it (to tell the Presenter
      998     9900        *N*         to (re-)open windows in 2-dimensional mode) and "change" the
      999     9901        *N*         height of the command window (which should be the only window
     1000     9902        *N*         currently) to VD_$SCREEN.V#.
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:29   
     1001     9903                Both before and after processing an editing command, we must
     1002     9904                initialize the window's VD$OPERAND for evaluation of this
     1003     9905                command's block expression and for that of the next command.
     1004     9906        */
     1005     9907
     1006     9908    1   EDITING_COMMAND_SEEN: PROC (CMD_CLASS) ALTRET;
     1007     9909
     1008     9910    2   DCL CMD_CLASS SBIN;
     1009     9911
     1010     9912
     1011     9913
     1012     9914        /*
     1013     9915        *   Locations in the Windows file for the first editing window.
     1014     9916        */
     1015     9917        %VD_LOCATION (NAME=FIRST_ED_WIN_LOC, STCLASS=CONSTANT, INITS=1,
     1016     9918            ITYPE1=%KT_NUMBER, IREP1=%REP_LOCAL, IBYTES1=%WK_1ST_EDITING_WINDOW);
     1017     9993        %VD_LOCATION (NAME=FIRST_ED_WIN_BLOCK_LOC, STCLASS=CONSTANT, INITS=2,
     1018     9994            ITYPE1=%KT_NUMBER, IREP1=%REP_LOCAL, IBYTES1=%WK_1ST_EDITING_WINDOW,
     1019     9995            ITYPE2=%KT_NUMBER, IREP2=%REP_LOCAL, IBYTES2=0);    /* Key at level 2 */
     1020    10105
     1021    10106
     1022    10107
     1023    10108    2   DCL WINDOW_SPEC$ PTR;
     1024    10109    2   DCL NODE$ PTR;
     1025    10110    2   DCL COUNT SBIN;
     1026    10111    2   DCL COUNT_PTR$ REDEF COUNT PTR;
     1027    10112    2   DCL FREE_EVAL$ PTR;
     1028    10113    2   DCL NEXT_EVAL$ PTR;
     1029    10114        %VD$SPEC (NAME=WSPEC, STCLASS=AUTO);
     1030    10128        %VD$RANGE (NAME=WLOC, STCLASS=AUTO);
     1031    10197
     1032    10198
     1033    10199        %VD$WINDOW_SPEC (NAME=WINDOW$SPEC, STCLASS="BASED(WINDOW_SPEC$)");
     1034    10265        %VD$EVAL (NAME=FREE$EVAL, STCLASS="BASED(FREE_EVAL$)");
     1035    10510
     1036    10511
     1037    10512
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:30   
     1038    10513    2           IF VD_CURRENT_WINDOW$ = ADDR(NIL)
     1039    10514    2             OR IT$COMMAND.CODE# = %T_WINDOW_CMD THEN
     1040    10515    3   CREATE_FIRST_ED_WINDOW: DO;
     1041    10516                   /*
     1042    10517                   *  Create the first editing window.
     1043    10518                   */
     1044    10519    3              CALL VDG$OALLOC (%CLS_WINDOW_SPEC, WSPEC.V$)
     1045    10520    3                ALTRET (OALLOC_FAILED);
     1046    10521    3              WSPEC.V$ -> WINDOW$SPEC.COORDS.HEIGHT# = VD_EDITING_HEIGHT;
     1047    10522    3              WLOC.START = FIRST_ED_WIN_LOC;
     1048    10523    3              WLOC.ENDD = FIRST_ED_WIN_BLOCK_LOC;
     1049    10524    3              ADDR(WLOC.START)->VD$KEY_NUMBER.BYTES# = VD_EDITING_WINDOWS;
     1050    10525    4              IF IT$COMMAND.CODE# = %T_WINDOW_CMD THEN DO;
     1051    10526    4                 IF IT$COMMAND.PARAM$(%CP_WI_LINES) ~= ADDR(NIL) THEN
     1052    10527    4                    WSPEC.V$ -> WINDOW$SPEC.COORDS.HEIGHT# =
     1053    10528    4                      IT$COMMAND.PARAM$(%CP_WI_LINES)->VD$NUMBER.V#;
     1054    10529    4                 IF IT$COMMAND.FLAGS(%CF_WI_NEW) OR
     1055    10530    4                   VD_CURRENT_WINDOW$ = ADDR(NIL) THEN EXIT;
     1056    10531    4                 WLOC.START.KEY.V$(0) =
     1057    10532    4                   VD_CURRENT_WINDOW$->VD$FILE_NODE.DESC.KEY.V$;
     1058    10533    4                 IF IT$COMMAND.PARAM$(%CP_WI_NUM) ~= ADDR(NIL) THEN
     1059    10534    4                    ADDR(WLOC.START)->VD$KEY_NUMBER.BYTES# =
     1060    10535    4                      IT$COMMAND.PARAM$(%CP_WI_NUM) -> VD$NUMBER.V#;
     1061    10536    4                 WLOC.ENDD.KEY(0) = WLOC.START.KEY(0);
     1062    10537    5                 IF IT$COMMAND.FLAGS(%CF_WI_DELETE) THEN DO;
     1063    10538    5                    CALL VDA$LDELETE (WINDOWS$STREAM, WLOC)
     1064    10539    5                      ALTRET (LDELETE_FAILED);
     1065    10540    6                    IF VD_COMMAND_WINDOW$ ~= ADDR(NIL) THEN DO;
     1066    10541        /* Adjust window numbers to insure they're contiguous */
     1067    10542    6                       NODE$ = VD_COMMAND_WINDOW$;
     1068    10543    6                       COUNT_PTR$ = NODE$ -> VD$FILE_NODE.DESC.KEY.V$;
     1069    10544    7                       DO UNTIL NODE$ = ADDR(NIL);
     1070    10545    7                          NODE$ -> VD$FILE_NODE.DESC.KEY.V$ = COUNT_PTR$;
     1071    10546    7                          IF NODE$ = WINDOWS$STREAM.PORT$ ->
     1072    10547    7                            VD$PORT.LEVEL.INTERNAL$ (%LVL_LOWER) THEN
     1073    10548    7                             WINDOWS$STREAM.PORT$ ->
     1074    10549    7                               VD$PORT.CURRENT.KEY.V$ (0) = COUNT_PTR$;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:31   
     1075    10550    7                          NODE$ = NODE$ -> VD$FILE_NODE.FLINK$;
     1076    10551    7                          COUNT = COUNT + 1;
     1077    10552    7                          END;
     1078    10553    6                       END;
     1079    10554    5                    CALL VDG$OFREE (WSPEC.V$ -> WINDOW$SPEC) ALTRET(OFREE_FAILED);
     1080    10555    5                    RETURN;
     1081    10556    5                    END;
     1082    10557    5                 ELSE IF IT$COMMAND.PARAM$(%CP_WI_LINES) = ADDR(NIL) THEN DO;
     1083    10558    5                       CALL VDG$OFREE (WSPEC.V$ -> WINDOW$SPEC) ALTRET (OFREE_FAILED);
     1084    10559    6                       DO WHILE WLOC.START.KEY.V$(0) ~=
     1085    10560    6                         VD_CURRENT_WINDOW$->VD$FILE_NODE.DESC.KEY.V$;
     1086    10561    6                          IF VD_CURRENT_WINDOW$->VD$FILE_NODE.FLINK$ ~= ADDR(NIL)
     1087    10562    6                          THEN VD_CURRENT_WINDOW$ =
     1088    10563    6                               VD_CURRENT_WINDOW$->VD$FILE_NODE.FLINK$;
     1089    10564    6                          ELSE VD_CURRENT_WINDOW$ =
     1090    10565    6                               VD_COMMAND_WINDOW$->VD$FILE_NODE.FLINK$;
     1091    10566    6                          END;
     1092    10567    5                       EXIT CREATE_FIRST_ED_WINDOW;
     1093    10568    5                       END;
     1094    10569    4                 END;
     1095    10570    3              WLOC.ENDD.KEY(0) = WLOC.START.KEY(0);
     1096    10571
     1097    10572    3              WSPEC.TYPE# = %SPT_WINDOW_SPEC;
     1098    10573    3              WSPEC.REP# = %REP_REMOTE;
     1099    10574    3              CALL VDA$LWRITE (WINDOWS$STREAM, WLOC.START, WSPEC)
     1100    10575    3                ALTRET (ED_WINDOW_WRITE_FAILED);
     1101    10576
     1102    10577    3              CALL VDG$OALLOC (%CLS_WINDOW_BLOCK, WSPEC.V$)
     1103    10578    3                ALTRET (OALLOC_FAILED);
     1104    10579    3              WSPEC.TYPE# = %SPT_WINDOW_BLOCK;
     1105    10580    3              WSPEC.REP# = %REP_REMOTE;
     1106    10581    3              CALL VDA$LWRITE (WINDOWS$STREAM, WLOC.ENDD, WSPEC)
     1107    10582    3                ALTRET (ED_WINDOW_BLOCK_WRITE_FAILED);
     1108    10583
     1109    10584    3              CALL VDA$PFLUSH (WINDOWS$STREAM.PORT$->VD$PORT, %TO_PRESENTER)
     1110    10585    3                ALTRET (ED_WINDOW_PFLUSH_FAILED);
     1111    10586    3              END CREATE_FIRST_ED_WINDOW;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:32   
     1112    10587
     1113    10588    2           WINDOW_SPEC$ = VD_CURRENT_WINDOW$->VD$FILE_NODE.DESC.SPEC.V$;
     1114    10589    3           IF WINDOW$SPEC.OPERAND.EVAL$ ~= ADDR(NIL) THEN DO;
     1115    10590    3              FREE_EVAL$ = WINDOW$SPEC.OPERAND.EVAL$->VD$EVAL.BLINK$;
     1116    10591    3              WINDOW$SPEC.OPERAND.EVAL$->VD$EVAL.BLINK$ = ADDR(NIL);
     1117    10592    4              DO WHILE FREE_EVAL$ ~= ADDR(NIL);
     1118    10593    4                 NEXT_EVAL$ = FREE$EVAL.BLINK$;
     1119    10594    4                 CALL VDG$OFREE (FREE$EVAL)
     1120    10595    4                   ALTRET (OFREE_FAILED);
     1121    10596    4                 FREE_EVAL$ = NEXT_EVAL$;
     1122    10597    4                 END;
     1123    10598
     1124    10599    3              WINDOW$SPEC.OPERAND.EVAL$->VD$EVAL.CTRL_REC_MATCHED_EOF = %FALSE;
     1125    10600    3              IF CMD_CLASS = %EXPL_ED_CMD THEN
     1126    10601    3                 WINDOW$SPEC.OPERAND.EVAL$->VD$EVAL.STATE# = %EVST_INITIAL;
     1127    10602    3              END;
     1128    10603
     1129    10604    2           CALL VDG$OFREE (WINDOW$SPEC.OPERAND.INTREE$->VD$IT_BLOCK_EXPR)
     1130    10605    2             ALTRET (OFREE_FAILED);
     1131    10606    2           WINDOW$SPEC.OPERAND.INTREE$ = ADDR(NIL);
     1132    10607
     1133    10608    2           RETURN;
     1134    10609
     1135    10610
     1136    10611
     1137    10612    2   ED_WINDOW_WRITE_FAILED: ;
     1138    10613    2   LDELETE_FAILED: ;
     1139    10614    2   ED_WINDOW_BLOCK_WRITE_FAILED: ;
     1140    10615    2           IF WSPEC ~= %CLEAR THEN
     1141    10616    2              CALL VDG$OFREE (WSPEC.V$ -> WINDOW$SPEC);
     1142    10617    2           IF VD_CURRENT_WINDOW$ ~= ADDR(NIL) THEN
     1143    10618    2              IF VD_CURRENT_WINDOW$->
     1144    10619    2                VD$FILE_NODE.OBJECT.CLASS# ~= %CLS_FILE_NODE THEN
     1145    10620    2                 VD_CURRENT_WINDOW$ = VD_COMMAND_WINDOW$ -> VD$FILE_NODE.FLINK$;
     1146    10621
     1147    10622
     1148    10623    2   EXPAND_COMMAND_WINDOW_FAILED: ;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:33   
     1149    10624    2   ED_WINDOW_PFLUSH_FAILED: ;
     1150    10625    2   OALLOC_FAILED: ;
     1151    10626    2   OFREE_FAILED: ;
     1152    10627    2           ALTRETURN;
     1153    10628
     1154    10629    2   END EDITING_COMMAND_SEEN;
     1155    10630
     1156    10631        %BOX (TITLE=NEW_EDIT_BLOCK_IN_OLD_DOMAIN, PAGE=YES);
             10639    2
             10643    2   /***************************************************************************
             10645    2    *                                                                         *
             10649    2            *                        NEW_EDIT_BLOCK_IN_OLD_DOMAIN                     *
             10651    2            *                                                                         *
             10653    2           ***************************************************************************/

     1157    10657
     1158    10658        /*I* NAME: NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     1159    10659            PARAMETERS:
     1160    10660                CURR_WINDOW - VD$WINDOW_SPEC for the current editing window.
     1161    10661                    CURR$WINDOW.OPERAND.EDIT_BLOCK$ must point to a
     1162    10662                    VD$BLOCK_DESC for the current EditBlock; there must
     1163    10663                    be such an EditBlock.
     1164    10664               IT_BLOCK_EXPR must be the VD$IT_BLOCK_EXPR returned by
     1165    10665                    VDE$PBLOCK_EXPR.  Specifically:
     1166    10666                  .DOMAINN must be %CLEAR, indicating that the block expression
     1167    10667                      specifies a block enclosed in the current edit block.
     1168    10668                  .OPTIONS must contain only those values explicitly given
     1169    10669                      by the user in the block expression; all other options
     1170    10670                      must be %CLEAR/NIL.
     1171    10671            INPUT:
     1172    10672            OUTPUT:
     1173    10673                IT_BLOCK_EXPR.DOMAINN will be filled in with info from
     1174    10674                    the current EditBlock.
     1175    10675                A BLOCK_DESC IT$OPERAND will be inserted at the beginning of the
     1176    10676                    movements chain to insure that subsequent movements start
     1177    10677                    from the proper position.
     1178    10678                IT_BLOCK_EXPR.OPTIONS will have its %CLEAR/NIL fields
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:34   
     1179    10679                    filled in with values from the current EditBlock.
     1180    10680            DESCRIPTION:
     1181    10681                This routine is called for an EDIT command,
     1182    10682                when the user is telling us to edit a block which is in
     1183    10683                the same file as the current EditBlock.  Normally, this
     1184    10684                wouldn't look like a new EditBlock to VDE$IOPEN, so
     1185    10685                this routine fixes up IT_BLOCK_EXPR such that VDE$IOPEN
     1186    10686                will think this is a new EditBlock, and will act accordingly.
     1187    10687        */
     1188    10688
     1189    10689    1   NEW_EDIT_BLOCK_IN_OLD_DOMAIN: PROC (CURR_WINDOW, IT_BLOCK_EXPR) ALTRET;
     1190    10690
     1191    10691        %VD$WINDOW_SPEC (NAME=CURR_WINDOW, STCLASS=PARAM);
     1192    10757        %VD$IT_BLOCK_EXPR (NAME=IT_BLOCK_EXPR, STCLASS=PARAM);
     1193    10907
     1194    10908
     1195    10909
     1196    10910    2   DCL EDIT_BLOCK$ PTR;
     1197    10911    2   DCL IT_TEMP$ PTR;
     1198    10912
     1199    10913
     1200    10914        %VD$BLOCK_DESC (NAME=EDIT$BLOCK, STCLASS="BASED(EDIT_BLOCK$)");
     1201    11061
     1202    11062
     1203    11063
     1204    11064    2           EDIT_BLOCK$ = CURR_WINDOW.OPERAND.EDIT_BLOCK$;
     1205    11065
     1206    11066                %COPYKEY (FKEY=EDIT$BLOCK.FILE_KEY,
     1207    11067                TKEY=IT_BLOCK_EXPR.DOMAINN.FILE_KEY);
     1208    11083    2           CALL VDG$OCOPY_RANGE (EDIT$BLOCK.RANGE, IT_BLOCK_EXPR.DOMAINN.RANGE)
     1209    11084    2             ALTRET (OCOPY_RANGE_FAILED);
     1210    11085    2           IT_TEMP$ = IT_BLOCK_EXPR.SELECTS$->IT$SELECT.ADJUSTS$;
     1211    11086    2           CALL VDG$OALLOC (%CLS_IT_OPERAND, SINK$)
     1212    11087    2             ALTRET (OALLOC_FAILED);
     1213    11088    2           SINK$ -> IT$OPERAND.FLINK$ = IT_TEMP$ -> IT$ADJUST.MOVEMENTS$;
     1214    11089    2           SINK$ -> IT$OPERAND.PARENT$ = IT_TEMP$;
     1215    11090    2           IT_TEMP$ -> IT$ADJUST.MOVEMENTS$ = SINK$;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:35   
     1216    11091    2           IT_TEMP$ = SINK$;
     1217    11092    2           IT_TEMP$ -> IT$OPERAND.OPTIONS.POINT# = %PNT_AO;
     1218    11093    2           IT_TEMP$ -> IT$OPERAND.CODE# = %OPAND_BLOCK_DESC;
     1219    11094    2           CALL VDG$OALLOC (%CLS_BLOCK_DESC, IT_TEMP$ -> IT$OPERAND.PARAM$)
     1220    11095    2             ALTRET(OALLOC_FAILED);
     1221    11096    2           CALL VDG$OCOPY_RANGE (CURR_WINDOW.OPERAND.EVAL$ -> VD$EVAL.RANGE,
     1222    11097    2             IT_TEMP$ -> IT$OPERAND.PARAM$ -> EDIT$BLOCK.RANGE)
     1223    11098    2             ALTRET (OCOPY_RANGE_FAILED);
     1224    11099
     1225    11100                /*
     1226    11101                *   If the user explicitly specified any processing
     1227    11102                *       options, they're in IT_BLOCK_EXPR.OPTIONS.
     1228    11103                *   Fill in any missing values in the InTree's .OPTIONS
     1229    11104                *       from the new EditBlock's options.
     1230    11105                */
     1231    11106    2           IF IT_BLOCK_EXPR.OPTIONS.STRUCTURE$ = ADDR(NIL) THEN
     1232    11107    2              IT_BLOCK_EXPR.OPTIONS.STRUCTURE$ =
     1233    11108    2                EDIT$BLOCK.OPTIONS.STRUCTURE$;
     1234    11109    2           IF IT_BLOCK_EXPR.OPTIONS.LEVEL# = 0 THEN
     1235    11110    2              IT_BLOCK_EXPR.OPTIONS.LEVEL# = EDIT$BLOCK.OPTIONS.LEVEL#;
     1236    11111    2           IF IT_BLOCK_EXPR.OPTIONS.COMPONENT# = 0 THEN
     1237    11112    2              IT_BLOCK_EXPR.OPTIONS.COMPONENT# =
     1238    11113    2                EDIT$BLOCK.OPTIONS.COMPONENT#;
     1239    11114    2           IF IT_BLOCK_EXPR.OPTIONS.PROTECT# = 0 THEN
     1240    11115    2              IT_BLOCK_EXPR.OPTIONS.PROTECT# = EDIT$BLOCK.OPTIONS.PROTECT#;
     1241    11116    2           IF IT_BLOCK_EXPR.OPTIONS.EXIST# = 0 THEN
     1242    11117    2              IT_BLOCK_EXPR.OPTIONS.EXIST# = EDIT$BLOCK.OPTIONS.EXIST#;
     1243    11118                %COPYKEY (FKEY=EDIT$BLOCK.OPTIONS.KEY_INCR,
     1244    11119                TKEY=IT_BLOCK_EXPR.OPTIONS.KEY_INCR);
     1245    11135
     1246    11136    2           RETURN;
     1247    11137
     1248    11138
     1249    11139    2   OALLOC_FAILED: ;
     1250    11140    2   OCOPY_FAILED: ;
     1251    11141    2   OCOPY_RANGE_FAILED: ;
     1252    11142    2           ALTRETURN;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:36   
     1253    11143
     1254    11144    2   END NEW_EDIT_BLOCK_IN_OLD_DOMAIN;
     1255    11145
     1256    11146        %BOX (TITLE=CLEAN_UP_AFTER_COMMAND, PAGE=YES);
             11154    2
             11158    2   /***************************************************************************
             11160    2    *                                                                         *
             11164    2            *                           CLEAN_UP_AFTER_COMMAND                        *
             11166    2            *                                                                         *
             11168    2           ***************************************************************************/

     1257    11172
     1258    11173        /*I* NAME: CLEAN_UP_AFTER_COMMAND
     1259    11174            PARAMETERS:
     1260    11175                CMD_CLASS - Code specifying what type of command was just
     1261    11176                    processed:  %EXPL_ED_CMD, %IMPL_ED_CMD, or %NON_ED_CMD.
     1262    11177                If CMD_CLASS = %EXPL_ED_CMD or %IMPL_ED_CMD, then
     1263    11178                    VD_CURRENT_WINDOW$ must point to the FileNode at level
     1264    11179                    1 of the Windows file, for the current editing window.
     1265    11180            INPUT:
     1266    11181            OUTPUT:
     1267    11182                The current editing window's .OPERAND.EVAL$ will point to a
     1268    11183                    single VD$EVAL; the rest of the stack will be freed.
     1269    11184                The current editing window's .OPERAND.INTREE$ will be NIL.
     1270    11185            DESCRIPTION:
     1271    11186                After performing a command, even if the command encountered
     1272    11187                errors, we must clean up the window's VD$OPERAND before
     1273    11188                going on the the next command.
     1274    11189        */
     1275    11190
     1276    11191    1   CLEAN_UP_AFTER_COMMAND: PROC (CMD_CLASS) ALTRET;
     1277    11192
     1278    11193    2   DCL CMD_CLASS SBIN;
     1279    11194
     1280    11195
     1281    11196
     1282    11197    2   DCL CURR_WINDOW$ PTR;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:37   
     1283    11198
     1284    11199
     1285    11200        %VD$WINDOW_SPEC (NAME=CURR$WINDOW, STCLASS="BASED(CURR_WINDOW$)");
     1286    11266
     1287    11267
     1288    11268
     1289    11269    2           IF VD_CURRENT_WINDOW$ ~= ADDR(NIL) THEN
     1290    11270    2              CURR_WINDOW$ = VD_CURRENT_WINDOW$->VD$FILE_NODE.DESC.SPEC.V$;
     1291    11271    2           ELSE
     1292    11272    2              CURR_WINDOW$ = ADDR(NIL);
     1293    11273
     1294    11274    2           IF (CMD_CLASS = %EXPL_ED_CMD OR CMD_CLASS = %IMPL_ED_CMD)
     1295    11275    3             AND (CURR_WINDOW$ ~= ADDR(NIL)) THEN DO;
     1296    11276    3              IF CURR$WINDOW.OPERAND.STREAM$ -> VD$STREAM.PORT$ ~=
     1297    11277    4                ADDR(NIL) THEN DO;
     1298    11278    4                 CALL VDA$PFLUSH (CURR$WINDOW.OPERAND.STREAM$ ->
     1299    11279    4                   VD$STREAM.PORT$ -> VD$PORT, %TO_PRESENTER)
     1300    11280    4                   ALTRET (PFLUSH_FAILED);
     1301    11281    4                 END;
     1302    11282    3              IF VD_6E.SOURCE.OPERAND.STREAM$->VD$STREAM.PORT$ ~=
     1303    11283    4                ADDR(NIL) THEN DO;
     1304    11284    4                 CALL VDA$PFLUSH (VD_6E.SOURCE.OPERAND.STREAM$ ->
     1305    11285    4                   VD$STREAM.PORT$ -> VD$PORT, %TO_PRESENTER)
     1306    11286    4                   ALTRET (PFLUSH_FAILED);
     1307    11287    4                 END;
     1308    11288    3              IT$COMMAND.CODE# = 0; /* Mustn't be T_WINDOW_CMD */
     1309    11289    3              CALL EDITING_COMMAND_SEEN (CMD_CLASS)
     1310    11290    3                ALTRET (EDITING_COMMAND_SEEN_FAILED);
     1311    11291    3              END;
     1312    11292
     1313    11293    2           RETURN;
     1314    11294
     1315    11295
     1316    11296    2   PFLUSH_FAILED: ;
     1317    11297    2   EDITING_COMMAND_SEEN_FAILED: ;
     1318    11298    2           ALTRETURN;
     1319    11299
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:38   
     1320    11300    2   END CLEAN_UP_AFTER_COMMAND;
     1321    11301
     1322    11302    1   END VDI$PDRIVER;
     1323    11303        %EOD;

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:39   
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   XUG_ENTRY.:LIBRARY  cannot be made into a system file and is referenced.
   XUE_SUBS_C.:LIBRARY  is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_NODES0_E.:VDA5TOU  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDI$PDRIVER.

   Procedure VDI$PDRIVER requires 1461 words for executable code.
   Procedure VDI$PDRIVER requires 64 words of local(AUTO) storage.

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:40   

 Object Unit name= VDI$PDRIVER                                File name= VDI$PARSE.:VDA5TOU
 UTS= JUL 04 '97 11:33:15.80 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$6E
    2   DCB   even  none     0      0  M$ME
    3   DCB   even  none     0      0  M$SI
    4   Data  even  none     1      1  VDI$PDRIVER
    5  RoData even  UTS     19     23  VDI$PDRIVER
    6   Proc  even  none  1461   2665  VDI$PDRIVER
    7  RoData even  none    26     32  VDI$PDRIVER

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     6      0   yes    yes     yes      Std        0  VDI$PDRIVER
     6    367          yes     yes      Std        0  VDI$PFIX_WINDOWS

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    4      0  DELFID_CMD
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:41   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
         yes           Std       1 VDG$EREPORT_ERROR
 yes     yes           Std       0 VDI$PREMOVE_EDIT_BLOCK
 yes     yes           Std       1 VDP$WERASE
 yes     yes           Std       3 VDG$OALLOC
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       0 VDI$PREAD_FILE_OPEN
 yes     yes           Std       1 VDG$SHRINK_COMMAND_WINDOW
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       0 VDP$WINIT
 yes     yes           Std       0 VDI$PREAD_FILE_CLOSE
 yes     yes           Std       0 VDI$PREAD_FILE_POSITION
 yes     yes           Std       1 VDP$NFLUSH
 yes     yes           Std       3 VDP$WREAD
 yes     yes           Std       1 XUG$GETCMD
 yes     yes           Std       3 VDI$PARSE_TREE_TO_INTREE
 yes     yes           Std       1 VDG$EXPAND_COMMAND_WINDOW
 yes     yes           Std       0 VDI$CSHOW
 yes     yes           Std       1 VDI$CSYNONYM
 yes     yes           Std       0 VDE$IOPEN
 yes     yes           Std       0 VDI$CMOVE
 yes     yes           Std       0 VDI$COVER
 yes     yes           Std       0 VDI$CDELETE
 yes     yes           Std       1 VDI$CEND
 yes     yes           Std       1 VDI$CSAVE
 yes     yes           Std       1 VDI$CEQUALS
 yes     yes           Std       0 VDI$CEDIT
 yes     yes           Std       0 VDI$CDISPLAY
 yes     yes           Std       0 VDI$CDELETE_FID
 yes     yes           Std       1 VDE$PBLOCK_EXPR
 yes     yes           Std       0 VDI$CCOPY
 yes     yes           Std       0 VDI$CAFTER
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:42   
 yes     yes           Std       1 VDI$CREAD
 yes     yes           Std       1 VDI$CRESTORE
 yes     yes           Std       2 VDE$IRANGE
 yes     yes           Std       1 VDI$CLOCATION
 yes     yes           Std       1 VDI$CKEYIN
 yes     yes           Std       4 VDA$LWRITE
 yes     yes           Std       2 VDA$LDELETE
 yes     yes           Std       2 VDA$PFLUSH
 yes     yes           Std       2 VDG$OCOPY
 yes     yes           Std       2 VDG$OCOPY_RANGE
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VD_6E                                 XUG_GETCMD
     VD_CURRENT_WINDOW$                    VD_COMMAND_WINDOW$                    VD_FORCE_READ_FROM
     VD_LAST_CWIN_ACTIVITY                 VD_CMD_OBJECTS$                  r    B$XL_UPPER$
     VD_COMMAND_LINE                       VD_ASYM                               VD_WORST_FLAGLEV
     VD_EDITING_HEIGHT                     VD_EDITING_WINDOWS                    VD_IBEX_WINDOW
     VD_OLD_$SCREEN                        M$6E                                  M$ME
     M$SI                                  VD_$$QUAC                             VD_$SCREEN
     VD_$COMMAND                           VD_$MIN_COMMAND                       B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ROSID                                 ISSID
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:43   


        1        1        /*M* VDI$PARSE - Read and parse commands for 6Edit */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P* NAME: VDI$PARSE
       12       12            PURPOSE: Read and parse commands for the Interpreter.
       13       13            DESCRIPTION:
       14       14                This module contains several external routines:
       15       15
       16       16                VDI$PDRIVER
       17       17                Gets command lines, parses them, and calls the appropriate Command
       18       18                Processor.
       19       19        *N*     Handles omitted block expressions, substituting and parsing the
       20       20        *N*     appropriate $DEFAULT_ name.
       21       21
       22       22                VDI$PARSE_TREE_TO_INTREE
       23       23                Converts one %T_xxx_CMD node of a parse tree into a (chain of) Intree
       24       24                node(s).
       25       25
       26       26                VDI$PGET_COMMAND_RECORD
       27       27                XUG$GETCMD calls VDI$PGET_COMMAND_RECORD to read a command
       28       28                record from the current command stream.
       29       29                GET_COMMAND_RECORD does the following to the command record:
       30       30        *N*         o If $ECHO is on, echos the record to M$DO.
       31       31                    o Replaces all synonyms in the record with their value.
       32       32
       33       33                VDI$PREAD_FILE
       34       34                Performs all I/O on a READ-file, using Fast Sequential services.
       35       35                This routine contains four entry-points:
       36       36                    VDI$PREAD_FILE_OPEN:  Open a READ-file.
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:44   
       37       37                    VDI$PREAD_FILE_POSITION:  Position in a READ-file.
       38       38                    VDI$PREAD_FILE_READ:  Read a command line from a READ-file.
       39       39                    VDI$PREAD_FILE_CLOSE:  Close a READ-file.
       40       40
       41       41                VDI$PUSER_PARSE_RTN
       42       42                When X$PARSE parses a node declared with the SUCC, FAIL, or PRE
       43       43                options, it will call VDI$PUSER_PARSE_RTN to do any parse-twiddling
       44       44                necessary.  All SUCC nodes in the syntax are OUT$SYM nodes containing
       45       45                names, which must be verified in various ways.  This routine verifies
       46       46                the names, and accepts or rejects them when it returns to X$PARSE.
       47       47
       48       48                VDI$PGLOBAL_COMMANDS
       49       49                This routine is called by XUG$GETCMD just before it executes
       50       50                a globally-recognized command (ie, DIRECTORY, DO, PRINT, ERASE, TIME,
       51       51                DATE, HELP, !, ?, ??, END, QUIT, EXIT).
       52       52                For some of these commands, we guarantee that the command
       53       53                window is popped-up (expanded) before they execute.
       54       54                We sidetrack the END/QUIT/EXIT commands to our own handler.
       55       55
       56       56                VDI$PREMOVE_EDIT_BLOCK
       57       57                When an explicit or implicit EDIT operation fails, we must go to a
       58       58                state of having no EditBlock open for editing.  This routine cleans
       59       59                up the mess.
       60       60        */
       61       61
       62       62        /*D* NAME: VDI$PDRIVER
       63       63            PARAMETERS:
       64       64                None.
       65       65            INPUT:
       66       66                VD_6E.CMD_STREAM$ - Ptr to top VD$CMD_STREAM on stack of such
       67       67                    structures.  The top entry describes the current command
       68       68                    stream:  either a READ-file, the command window, or
       69       69                    a one-shot buffer (for invocation command line, etc.).
       70       70                    (Encoded workspace files are processed by the READ command
       71       71                    processor, and so are never seen directly by VDI$PDRIVER.)
       72       72                    VD$CMD_STREAM.INTREE$ points to an InTree representing the current
       73       73                    command line; if it's NIL, then VD$CMD_STREAM.RECORD$ points to a
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:45   
       74       74                    VD$BUFFER containing the current command line in character form.
       75       75                    The lower entries in the stack represent command streams
       76       76                    interrupted by a READ command.
       77       77                    When the current command stream is not the command window,
       78       78                    we always read from that command stream rather than any
       79       79                    editing window.
       80       80                VD_CURRENT_WINDOW$ - Ptr to VD$FILE_NODE at level 1 of the
       81       81                    Windows file, for the current editing window.  May be NIL;
       82       82                    if not NIL, it still may not be editing anything (no current
       83       83                    EditBlock).
       84       84                VD_COMMAND_WINDOW$ - Ptr to VD$FILE_NODE at level 1 of the
       85       85                    Windows file, for the command window.  There must
       86       86                    be such a window at all times (after initialization), tho it
       87       87                    may at times be "invisible", ie, have a height of 0 lines.
       88       88                VD_$COMMAND - A VD$NUMBER for the predefined name "$COMMAND".
       89       89                    If the value of this name is true, we'll always read from the
       90       90                    command window, until $COMMAND is set false.
       91       91                VD_$MAX_COMMAND - A VD$NUMBER for the predefined name "$MAX_COMMAND".
       92       92                    The value of this name is the number of lines in the largest
       93       93                    command window (ie, when displaying messages, or doing HELP or
       94       94                    other "freebie" commands).
       95       95                VD_$MIN_COMMAND - A VD$NUMBER for the predefined name "$MIN_COMMAND".
       96       96                    The value of this name is the number of lines in the smallest
       97       97                    command window.  If this value is less than
       98       98                    %DFLT_$MIN_COMMAND, we'll use %DFLT_$MIN_COMMAND instead.
       99       99                VD_$SCREEN - A VD$NUMBER for the predefined name "$SCREEN".  The value
      100      100                    of this name is the number of lines of the terminal screen which
      101      101                    the user allows 6Edit to use.  A value less than
      102      102                    %MN_SCREEN_EDITING_HEIGHT specifies that we're not screen editing.
      103      103        *N*     Following paragraph de-implemented due to star 25801:
      104      104        *N*     VD_2DIM - Bit-flag saying if we're actually screen editing or not.
      105      105        *N*         Modifies the meaning of VD_$SCREEN.V#:  if VD_$SCREEN says to
      106      106        *N*         screen edit, well, we're really only screen editing if VD_2DIM
      107      107        *N*         is also set.
      108      108        *N*     VD_$DEFAULT_SOURCE - a VD$BUFFER for the predefined
      109      109        *N*         name "$DEFAULT_SOURCE".  The value of this name
      110      110        *N*         must be a block expression.  Value's length may be 0.
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:46   
      111      111        *N*     VD_$DEFAULT_DESTINATION - a VD$BUFFER for the predefined
      112      112        *N*         name "$DEFAULT_DESTINATION".  The value of this
      113      113        *N*         name must be a block expression.  Value's length may be 0.
      114      114                XUG_GETCMD - Control block for XUG$GETCMD.
      115      115            OUTPUT:
      116      116                None.  (This routine never "returns".  At the end of the session,
      117      117                    we'll get to VDG$MTERMINATE indirectly, via VDI$CEND or
      118      118                    VDG$EREPORT_ERROR or a trap to VDG$ETRAP.)
      119      119            DESCRIPTION:
      120      120                This is the "top of the loop".  Processing a fatal error
      121      121                    or an END command will get us out of this loop:
      122      122                If $COMMAND is not set (or if the previous command read ended with
      123      123                    EOM_NEXT_ED_WINDOW), and the current command stream is
      124      124                    the command window, and there is a current editing
      125      125                    window, and that window has an open EditBlock currently,
      126      126                    and we didn't just write an error message to the command
      127      127                    window, then call VDP$WREAD to read from the current
      128      128                    editing window.  On return from VDP$WREAD, the Presenter
      129      129                    will have told us a new window to read from:  if it's an
      130      130                    editing window, make that the new current window, and go
      131      131                    to the top of the loop again (check $COMMAND, etc); if
      132      132                    it's the command window or if it's an editing window which
      133      133                    isn't currently editing a file (no EditBlock), fall thru
      134      134                    to the next step to read from the command window.
      135      135                Call XUG$GETCMD to read and parse a command line.
      136      136                    The READR (read record) routine called by XUG$GETCMD will
      137      137                    see if the command stream is a workspace file, and if so,
      138      138                    will call VDW$LOAD to load the entire workspace file; it will
      139      139                    then pop the command stream stack and read from the previous
      140      140                    command stream; this will continue until we get a
      141      141                    text record containing a parsable command (or one which is
      142      142                    empty).
      143      143                GETCMD will then parse the record.  The parse tree for each
      144      144                    command will either contain a %T_xxx_CMD node or not:  the
      145      145                    presence of a %T_xxx_CMD node implies that the entire block
      146      146                    expression is given in this one command, whereas the absence
      147      147                    of a %T_xxx_CMD node (absence of an editing verb before
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:47   
      148      148                    a block expression) implies that the user is in the process
      149      149                    of finding or selecting a block, so don't do anything to
      150      150                    the block yet, just evaluate the new selection.
      151      151                If this is an editing command:
      152      152                    Call VDE$PBLOCK_EXPR to convert the ParseTree to an InTree.
      153      153                    Call VDE$IOPEN[_SOURCE] to setup the operand for the first
      154      154                        call to VDE$IRANGE, and (for non-source operands) to
      155      155                        open the stream to the correct file (if it isn't yet).
      156      156                If there is a T_xxx_CMD node in the command, call the
      157      157                    appropriate command processor (VDI$Cxxx).
      158      158                Else (if there is no T_xxx_CMD node in the command) call
      159      159                    VDE$IRANGE to evaluate the block expression.
      160      160                Discard all entries on the evaluation stack of the current
      161      161                    editing window, except the top entry.
      162      162                Discard the InTree.
      163      163        */
      164      164
      165      165        VDI$PDRIVER: PROC ALTRET;

    165  6 000000   000000 700200 xent  VDI$PDRIVER  TSX0  ! X66_AUTO_0
         6 000001   000100 000000                    ZERO    64,0

      166      166
      167      167        %INCLUDE VD_MACROS_M;
      168     2382        %INCLUDE VD_PERR_C;
      169     2530        %INCLUDE VD_NODES0_E;
      170     2622        %INCLUDE XU_MACRO_C;
      171     5716        %INCLUDE XUE_SUBS_C;
      172     5896        %INCLUDE XUG_ENTRY;
      173     5927        %INCLUDE CP_6;
      174     6008        %INCLUDE B$TABLES_C;
      175     6116
      176     6117
      177     6118    1   DCL VDP$NFLUSH              ENTRY (1) ALTRET;
      178     6119    1   DCL VDP$WERASE              ENTRY (1) ALTRET;
      179     6120    1   DCL VDP$WREAD               ENTRY (3) ALTRET;
      180     6121    1   DCL VDA$LDELETE             ENTRY (2) ALTRET;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:48   
      181     6122    1   DCL VDA$LWRITE              ENTRY (4) ALTRET;
      182     6123    1   DCL VDA$PFLUSH              ENTRY (2) ALTRET;
      183     6124    1   DCL VDI$PARSE_TREE_TO_INTREE    ENTRY (3) ALTRET;
      184     6125    1   DCL VDI$PREMOVE_EDIT_BLOCK  ENTRY ALTRET;
      185     6126    1   DCL VDI$PREAD_FILE_CLOSE    ENTRY ALTRET;
      186     6127    1   DCL VDI$PREAD_FILE_OPEN     ENTRY ALTRET;
      187     6128    1   DCL VDI$PREAD_FILE_POSITION ENTRY ALTRET;
      188     6129    1   DCL VDE$PBLOCK_EXPR         ENTRY (1) ALTRET;
      189     6130    1   DCL VDE$PSTRING             ENTRY (5) ALTRET;
      190     6131    1   DCL VDE$PNUMBER             ENTRY (2) ALTRET;
      191     6132    1   DCL VDE$IOPEN               ENTRY ALTRET;
      192     6133    1   DCL VDE$IRANGE              ENTRY (2) ALTRET;
      193     6134    1   DCL VDG$SHRINK_COMMAND_WINDOW ENTRY (1) ALTRET;
      194     6135    1   DCL VDG$EXPAND_COMMAND_WINDOW ENTRY (1) ALTRET;
      195     6136    1   DCL VDG$OALLOC              ENTRY (3) ALTRET;
      196     6137    1   DCL VDG$OFREE               ENTRY (1) ALTRET;
      197     6138    1   DCL VDG$OCOPY               ENTRY (2) ALTRET;
      198     6139    1   DCL VDG$OCOPY_RANGE         ENTRY (2) ALTRET;
      199     6140    1   DCL VDG$EREPORT_ERROR       ENTRY (1);
      200     6141    1   DCL VDG$ESCREECH            ENTRY (3);
      201     6142    1   DCL VDP$WINIT               ENTRY ALTRET;
      202     6143
      203     6144
      204     6145    1   DCL VDI$CEDIT           ENTRY ALTRET;
      205     6146    1   DCL VDI$CDISPLAY        ENTRY ALTRET;
      206     6147    1   DCL VDI$CCOPY           ENTRY ALTRET;
      207     6148    1   DCL VDI$CMOVE           ENTRY ALTRET;
      208     6149    1   DCL VDI$CAFTER          ENTRY ALTRET;
      209     6150    1   DCL VDI$COVER           ENTRY ALTRET;
      210     6151    1   DCL VDI$CDELETE         ENTRY ALTRET;
      211     6152    1   DCL VDI$CDELETE_FID     ENTRY ALTRET;
      212     6153    1   DCL VDI$CEQUALS         ENTRY (1) ALTRET;
      213     6154    1   DCL VDI$CEND            ENTRY (1) ALTRET;
      214     6155    1   DCL VDI$CKEYIN          ENTRY (1) ALTRET;
      215     6156    1   DCL VDI$CLOCATION       ENTRY (1) ALTRET;
      216     6157    1   DCL VDI$CREAD           ENTRY (1) ALTRET;
      217     6158    1   DCL VDI$CRESTORE        ENTRY (1) ALTRET;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:49   
      218     6159    1   DCL VDI$CSAVE           ENTRY (1) ALTRET;
      219     6160    1   DCL VDI$CSHOW           ENTRY ALTRET;
      220     6161    1   DCL VDI$CSYNONYM        ENTRY (1) ALTRET;
      221     6162
      222     6163
      223     6164        %VD_6E (STCLASS=SYMREF);
      224     6200        %XUG_GETCMD (NAME=XUG_GETCMD, STCLASS=SYMREF);
      225     6538    1   DCL VD_CURRENT_WINDOW$ PTR SYMREF;
      226     6539    1   DCL VD_COMMAND_WINDOW$ PTR SYMREF;
      227     6540    1   DCL VD_2DIM BIT(1) ALIGNED SYMREF;
      228     6541    1   DCL VD_FORCE_READ_FROM UBIN SYMREF;
      229     6542    1   DCL VD_LAST_CWIN_ACTIVITY UBIN SYMREF;
      230     6543    1   DCL VD_CMD_OBJECTS$ (0:%(MX_CMD_OBJECTS-1)) PTR SYMREF;
      231     6544        %B$XL_UPPER;
      232     6548    1   DCL VD_COMMAND_LINE SBIN SYMREF;    /* Parse nodes */
      233     6549    1   DCL VD_ASYM UBIN SYMREF;
      234     6550    1   DCL VD_WORST_FLAGLEV SBIN SYMREF;
      235     6551    1   DCL VD_EDITING_HEIGHT SBIN SYMREF;
      236     6552    1   DCL VD_EDITING_WINDOWS SBIN SYMREF;
      237     6553    1   DCL VD_IBEX_WINDOW SBIN SYMREF;
      238     6554    1   DCL VD_OLD_$SCREEN SBIN SYMREF;
      239     6555    1   DCL VD_SCREEN_HEIGHT SBIN SYMREF;
      240     6556    1   DCL M$6E DCB;
      241     6557    1   DCL M$ME DCB;
      242     6558    1   DCL M$SI DCB;
      243     6559        %VD$NUMBER (NAME=VD_$$QUAC, STCLASS=SYMREF);
      244     6604        %VD$NUMBER (NAME=VD_$SCREEN, STCLASS=SYMREF);
      245     6649        %VD$NUMBER (NAME=VD_$COMMAND, STCLASS=SYMREF);
      246     6694        %VD$NUMBER (NAME=VD_$MIN_COMMAND, STCLASS=SYMREF);
      247     6739        %VD$NUMBER (NAME=VD_$MAX_COMMAND, STCLASS=SYMREF);
      248     6784
      249     6785
      250     6786
      251     6787    1   DCL ACTCHR UBIN BYTE CALIGNED;
      252     6788    1   DCL ED_WINDOW_NODE$ PTR;
      253     6789    1   DCL CAN_READ_EDITING_WINDOW BIT(1) ALIGNED;
      254     6790    1   DCL CURR_WINDOW$ PTR;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:50   
      255     6791    1   DCL IT_COMMAND$ PTR;
      256     6792    1   DCL PREV_IT_COMMAND$ PTR;
      257     6793    1   DCL COMMAND_LINE$ PTR;
      258     6794    1   DCL CL_INDEX UBIN;
      259     6795    1   DCL GOT_WREAD_ERROR BIT(1) ALIGNED;
      260     6796    1   DCL WARN_ABORTED_BUFFER BIT(1) ALIGNED;
      261     6797    1   DCL ERR_FLAGLEV UBIN;
      262     6798    1   DCL VD_ERR$ PTR;
      263     6799    1   DCL SUBST_FIELD$ PTR;
      264     6800        %VD$ERR_CODE (NAME=ERR_CODE, STCLASS=AUTO);
      265     6815    1   DCL INDX SBIN;
      266     6816    1   DCL CMD_RECORD$ PTR;
      267     6817    1   DCL SINK$ PTR;
      268     6818
      269     6819
      270     6820        %VD$WINDOW_SPEC (NAME=CURR$WINDOW, STCLASS="BASED(CURR_WINDOW$)");
      271     6886        %VD$IT_COMMAND (NAME=IT$COMMAND, STCLASS="BASED(IT_COMMAND$)");
      272     6924        %VD$IT_COMMAND (NAME=PREV$IT_COMMAND, STCLASS="BASED(PREV_IT_COMMAND$)");
      273     6962        %VD$CMD_STREAM (NAME=CMD$STREAM, STCLASS="BASED(VD_6E.CMD_STREAM$)");
      274     7001        %VD$STREAM (NAME=WINDOWS$STREAM, STCLASS="BASED(VD_6E.WINDOWS$)");
      275     7107        %VD$BUFFER (NAME=CMD$RECORD, STCLASS="BASED(CMD_RECORD$)");
      276     7165        %PARSE$OUT (NAME=COMMAND$LINE, STCLASS="BASED(COMMAND_LINE$)");
      277     7210        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
      278     7263        %VD$ERR (NAME=FATAL$ERR, STCLASS="BASED(VD_6E.ERR_HEAD$)");
      279     7316        %VD$ERR (NAME=VD$ERR_TAIL, STCLASS="BASED(VD_6E.ERR_TAIL$)");
      280     7369        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
      281     7414        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
      282     7459        %VD$FILE_NODE;
      283     7552        %VD$BUFFER;
      284     7610        %VD$IT_BLOCK_EXPR;
      285     7760        %VD$PORT;
      286     7858        %VD$EVAL;
      287     8103        %VD$FILE_KEY;
      288     8152        %VD$IT_ADJUST (NAME=IT$ADJUST);
      289     8189        %VD$IT_OPERAND (NAME=IT$OPERAND);
      290     8255        %VD$IT_SELECT (NAME=IT$SELECT);
      291     8292        %VD$KEY_NUMBER;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:51   
      292     8307        %VD$NUMBER;
      293     8352        %VD$STREAM;
      294     8458        %VD$TEXTC_REMOTE;
      295     8519        %P_PCB (NAME=P$PCB, STCLASS=BASED);
      296     8718        %F$DCB;
      297     8775
      298     8776
      299     8777                %BOX (TITLE="Driver Loop");

              8789    1   /***************************************************************************
              8791    1    *                                                                         *
              8795    1            *                                Driver Loop                             *
              8797    1            *                                                                        *
              8799    1          ***************************************************************************/

      300     8803
      301     8804                /*
      302     8805                *   How globals are used to save the current state:
      303     8806                *   VD_$COMMAND.V# - If true, then user wants to keep reading
      304     8807                *       from the command window, not the current editing
      305     8808                *       window.  If false, then we keep reading from the
      306     8809                *       current editing window until the user explicitly
      307     8810                *       moves to the command window (which VDP$WREAD signals
      308     8811                *       by returning a nil new-editing-window pointer).
      309     8812                *       Note that even if we don't read from the command
      310     8813                *       window, we must check the value of VD_$COMMAND.V#
      311     8814                *       each time thru the loop, 'cause the user may change
      312     8815                *       it's value via an editing window open to the
      313     8816                *       Equals-file.
      314     8817                */
      315     8818
      316     8819    1           VD_FORCE_READ_FROM = %RF_DONT_CARE;

   8819  6 000002   000000 450000 xsym               STZ     VD_FORCE_READ_FROM

      317     8820    1           ACTCHR = %EOM_NORMAL;

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:52   
   8820  6 000003   015000 236003                    LDQ     6656,DU
         6 000004   200003 756100                    STQ     ACTCHR,,AUTO

      318     8821    1           IF VD_WORST_FLAGLEV >= %FLV_SERIOUS THEN GOTO CLEAN_UP;

   8821  6 000005   000000 235000 xsym               LDA     VD_WORST_FLAGLEV
         6 000006   000003 115007                    CMPA    3,DL
         6 000007   000522 605000 6                  TPL     SHRINK_COMMAND_WINDOW_FAILED

      319     8822        /* Flush any stored commands if a pre-encoded context file failed */
      320     8823
      321     8824    1   FOREVER_LOOP:
      322     8825    2           DO %FOREVER;        /* END cmd or fatal error gets us out */

   8825  6 000010                       FOREVER_LOOP null
      323     8826    2              CAN_READ_EDITING_WINDOW = %FALSE;

   8826  6 000010   200005 450100                    STZ     CAN_READ_EDITING_WINDOW,,AUTO

      324     8827    2              ED_WINDOW_NODE$ = VD_CURRENT_WINDOW$;

   8827  6 000011   000000 236000 xsym               LDQ     VD_CURRENT_WINDOW$
         6 000012   200004 756100                    STQ     ED_WINDOW_NODE$,,AUTO

      325     8828    3              IF ED_WINDOW_NODE$ ~= ADDR(NIL) THEN DO;

   8828  6 000013   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000014   000044 600000 6                  TZE     s:8842

      326     8829    4                 IF ACTCHR = %EOM_NEXT_ED_WINDOW THEN DO;

   8829  6 000015   200003 236100                    LDQ     ACTCHR,,AUTO
         6 000016   777000 376003                    ANQ     -512,DU
         6 000017   016000 116003                    CMPQ    7168,DU
         6 000020   000035 601000 6                  TNZ     s:8837

      327     8830    4                    ED_WINDOW_NODE$ = ED_WINDOW_NODE$->VD$FILE_NODE.FLINK$;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:53   

   8830  6 000021   200004 470500                    LDP0    ED_WINDOW_NODE$,,AUTO
         6 000022   000002 236100                    LDQ     2,,PR0
         6 000023   200004 756100                    STQ     ED_WINDOW_NODE$,,AUTO

      328     8831    4                    IF ED_WINDOW_NODE$ = ADDR(NIL) THEN

   8831  6 000024   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000025   000034 601000 6                  TNZ     s:8835

      329     8832    4                       ED_WINDOW_NODE$ = VD_6E.WINDOWS$ -> VD$STREAM.PORT$ ->

   8832  6 000026   000006 470400 xsym               LDP0    VD_6E+6
         6 000027   000001 471500                    LDP1    1,,PR0
         6 000030   100031 473500                    LDP3    25,,PR1
         6 000031   300012 474500                    LDP4    10,,PR3
         6 000032   400002 236100                    LDQ     2,,PR4
         6 000033   200004 756100                    STQ     ED_WINDOW_NODE$,,AUTO

      330     8833    4                         VD$PORT.LEVEL.INTERNAL$(%LVL_FILE) ->
      331     8834    4                         VD$FILE_NODE.HEAD$ -> VD$FILE_NODE.FLINK$;
      332     8835    4                    VD_CURRENT_WINDOW$ = ED_WINDOW_NODE$;

   8835  6 000034   000000 756000 xsym               STQ     VD_CURRENT_WINDOW$

      333     8836    4                    END;

      334     8837    3                 IF ED_WINDOW_NODE$->VD$FILE_NODE.DESC.SPEC.V$->

   8837  6 000035   200004 470500                    LDP0    ED_WINDOW_NODE$,,AUTO
         6 000036   000007 471500                    LDP1    7,,PR0
         6 000037   100012 236100                    LDQ     10,,PR1
         6 000040   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000041   000044 600000 6                  TZE     s:8842

      335     8838    3                   CURR$WINDOW.OPERAND.EDIT_BLOCK$ ~= ADDR(NIL) THEN
      336     8839    3                    CAN_READ_EDITING_WINDOW = %TRUE;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:54   

   8839  6 000042   400000 236003                    LDQ     -131072,DU
         6 000043   200005 756100                    STQ     CAN_READ_EDITING_WINDOW,,AUTO

      337     8840    3                 END;

      338     8841
      339     8842    2              IF CAN_READ_EDITING_WINDOW THEN

   8842  6 000044   200005 234100                    SZN     CAN_READ_EDITING_WINDOW,,AUTO
         6 000045   000146 605000 6                  TPL     s:8885

      340     8843    2   READ_EDITING_WINDOW:
      341     8844    3              DO WHILE (VD_$COMMAND.V# <= 0

   8844  6 000046   000126 710000 6     READ_EDITIN* TRA     s:8879

      342     8845    3                OR VD_FORCE_READ_FROM = %RF_EDITING_WINDOW)
      343     8846    3                AND (CMD$STREAM.TYPE# = %CS_ME)
      344     8847    3                AND (ED_WINDOW_NODE$ ~= ADDR(NIL))
      345     8848    3                AND (VD_FORCE_READ_FROM ~= %RF_COMMAND_WINDOW);
      346     8849    3                 CURR_WINDOW$ = ED_WINDOW_NODE$->VD$FILE_NODE.DESC.SPEC.V$;

   8849  6 000047   200004 470500                    LDP0    ED_WINDOW_NODE$,,AUTO
         6 000050   000007 236100                    LDQ     7,,PR0
         6 000051   200006 756100                    STQ     CURR_WINDOW$,,AUTO

      347     8850    3                 IF CURR$WINDOW.OPERAND.EDIT_BLOCK$ = ADDR(NIL) THEN

   8850  6 000052   200006 471500                    LDP1    CURR_WINDOW$,,AUTO
         6 000053   100012 236100                    LDQ     10,,PR1
         6 000054   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000055   000145 600000 6                  TZE     s:8879+15

      348     8851    3                    EXIT READ_EDITING_WINDOW;
      349     8852    3                 IF CURR$WINDOW.COMMAND THEN

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:55   
   8852  6 000056   100002 236100                    LDQ     2,,PR1
         6 000057   000400 316003                    CANQ    256,DU
         6 000060   000064 600000 6                  TZE     s:8855

      350     8853    3                    CALL VDG$ESCREECH;

   8853  6 000061   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 000062   000000 701000 xent               TSX1    VDG$ESCREECH
         6 000063   000000 011000                    NOP     0

      351     8854
      352     8855    4                 IF DCBADDR (CURR$WINDOW.DCB#) -> F$DCB.FCD# THEN DO;

   8855  6 000064   000000 470400 7                  LDP0    0
         6 000065   000000 471500                    LDP1    0,,PR0
         6 000066   200006 473500                    LDP3    CURR_WINDOW$,,AUTO
         6 000067   300014 720100                    LXL0    12,,PR3
         6 000070   100000 474510                    LDP4    0,X0,PR1
         6 000071   400031 236100                    LDQ     25,,PR4
         6 000072   020000 316007                    CANQ    8192,DL
         6 000073   000104 600000 6                  TZE     s:8872

      353     8856
      354     8857                      /* Pop-down (shrink) the command window */
      355     8858    4                    CALL VDG$SHRINK_COMMAND_WINDOW (VD_$MIN_COMMAND.V#)

   8858  6 000074   000001 630400 7                  EPPR0   1
         6 000075   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000076   000000 701000 xent               TSX1    VDG$SHRINK_COMMAND_WINDOW
         6 000077   000522 702000 6                  TSX2    SHRINK_COMMAND_WINDOW_FAILED

      356     8859    4                      ALTRET (SHRINK_COMMAND_WINDOW_FAILED);
      357     8860
      358     8861                      /*
      359     8862                      *   Flush keyins, etc (but NOT edwin updates) to the terminal.
      360     8863                      *     (The call to VDP$WREAD will do an M$READ which will cause
      361     8864                      *     the FEP to update the editing windows.  If we also flush
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:56   
      362     8865                      *     screen updates here, we'll M$DEVICE before the M$READ
      363     8866                      *     unnecessarily).
      364     8867                      */
      365     8868    4                    CALL VDP$NFLUSH (%FALSE)

   8868  6 000100   000002 630400 7                  EPPR0   2
         6 000101   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000102   000000 701000 xent               TSX1    VDP$NFLUSH
         6 000103   000522 702000 6                  TSX2    SHRINK_COMMAND_WINDOW_FAILED

      366     8869    4                      ALTRET (NFLUSH_FAILED);
      367     8870    4                    END;

      368     8871
      369     8872    3                 VD_LAST_CWIN_ACTIVITY = %LCA_SWITCH;

   8872  6 000104   000004 235007                    LDA     4,DL
         6 000105   000000 755000 xsym               STA     VD_LAST_CWIN_ACTIVITY

      370     8873    3                 CALL VDP$WREAD (ED_WINDOW_NODE$, ACTCHR, %TO_PRESENTER)

   8873  6 000106   000002 236000 7                  LDQ     2
         6 000107   200076 756100                    STQ     WLOC+21,,AUTO
         6 000110   200003 630500                    EPPR0   ACTCHR,,AUTO
         6 000111   200075 450500                    STP0    WLOC+20,,AUTO
         6 000112   200004 631500                    EPPR1   ED_WINDOW_NODE$,,AUTO
         6 000113   200074 451500                    STP1    WLOC+19,,AUTO
         6 000114   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 000115   000021 631400 xsym               EPPR1   B_VECTNIL+17
         6 000116   000000 701000 xent               TSX1    VDP$WREAD
         6 000117   000425 702000 6                  TSX2    WREAD_FAILED

      371     8874    3                   ALTRET (WREAD_FAILED);
      372     8875    3                 ACTCHR = %EOM_NORMAL;

   8875  6 000120   015000 236003                    LDQ     6656,DU
         6 000121   200003 756100                    STQ     ACTCHR,,AUTO
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:57   

      373     8876
      374     8877    3                 IF ED_WINDOW_NODE$ ~= ADDR(NIL) THEN

   8877  6 000122   200004 236100                    LDQ     ED_WINDOW_NODE$,,AUTO
         6 000123   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000124   000126 600000 6                  TZE     s:8879

      375     8878    3                    VD_CURRENT_WINDOW$ = ED_WINDOW_NODE$;

   8878  6 000125   000000 756000 xsym               STQ     VD_CURRENT_WINDOW$

      376     8879    3                 END READ_EDITING_WINDOW;

   8879  6 000126   000003 235000 xsym               LDA     VD_$COMMAND+3
         6 000127   000133 604400 6                  TMOZ    s:8879+5
         6 000130   000000 236000 xsym               LDQ     VD_FORCE_READ_FROM
         6 000131   000002 116007                    CMPQ    2,DL
         6 000132   000145 601000 6                  TNZ     s:8879+15
         6 000133   000026 470400 xsym               LDP0    VD_6E+22
         6 000134   000002 220100                    LDX0    2,,PR0
         6 000135   000002 100003                    CMPX0   2,DU
         6 000136   000145 601000 6                  TNZ     s:8879+15
         6 000137   200004 236100                    LDQ     ED_WINDOW_NODE$,,AUTO
         6 000140   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000141   000145 600000 6                  TZE     s:8879+15
         6 000142   000000 235000 xsym               LDA     VD_FORCE_READ_FROM
         6 000143   000001 115007                    CMPA    1,DL
         6 000144   000047 601000 6                  TNZ     s:8849
         6 000145   000156 710000 6                  TRA     s:8897

      377     8880    3              ELSE DO;

      378     8881                      /*
      379     8882                      *  We're not reading from the editing window -- so flush
      380     8883                      *    everything (including edwin updates) to the terminal.
      381     8884                      */
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:58   
      382     8885    3                 IF CMD$STREAM.TYPE# = %CS_ME THEN

   8885  6 000146   000026 470400 xsym               LDP0    VD_6E+22
         6 000147   000002 220100                    LDX0    2,,PR0
         6 000150   000002 100003                    CMPX0   2,DU
         6 000151   000156 601000 6                  TNZ     s:8897

      383     8886    3                    CALL VDP$NFLUSH (%TRUE)

   8886  6 000152   000003 630400 7                  EPPR0   3
         6 000153   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000154   000000 701000 xent               TSX1    VDP$NFLUSH
         6 000155   000522 702000 6                  TSX2    SHRINK_COMMAND_WINDOW_FAILED

      384     8887    3                      ALTRET (NFLUSH_FAILED);
      385     8888    3                 END;

      386     8889
      387     8890
      388     8891                   /*
      389     8892                   *  Read from the command window.
      390     8893                   *  First, expand the command window to its minimum height.
      391     8894                   *     (It may have been shrunk to 0 lines.)
      392     8895                   */
      393     8896
      394     8897    2              VD_FORCE_READ_FROM = %RF_DONT_CARE;

   8897  6 000156   000000 450000 xsym               STZ     VD_FORCE_READ_FROM

      395     8898    2              IF (VD_$MIN_COMMAND.V#>0) THEN

   8898  6 000157   000003 235000 xsym               LDA     VD_$MIN_COMMAND+3
         6 000160   000166 604400 6                  TMOZ    s:8902

      396     8899    2                 CALL VDG$EXPAND_COMMAND_WINDOW (VD_$MIN_COMMAND.V#)

   8899  6 000161   000001 630400 7                  EPPR0   1
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:59   
         6 000162   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000163   000000 701000 xent               TSX1    VDG$EXPAND_COMMAND_WINDOW
         6 000164   000522 702000 6                  TSX2    SHRINK_COMMAND_WINDOW_FAILED
         6 000165   000172 710000 6                  TRA     s:8905

      397     8900    2                   ALTRET (EXPAND_COMMAND_WINDOW_FAILED);
      398     8901    2              ELSE
      399     8902    2                 CALL VDG$EXPAND_COMMAND_WINDOW (%DFLT_$MIN_COMMAND)

   8902  6 000166   000004 630400 7                  EPPR0   4
         6 000167   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000170   000000 701000 xent               TSX1    VDG$EXPAND_COMMAND_WINDOW
         6 000171   000522 702000 6                  TSX2    SHRINK_COMMAND_WINDOW_FAILED

      400     8903    2                   ALTRET (EXPAND_COMMAND_WINDOW_FAILED);
      401     8904
      402     8905    2              XUG_GETCMD.NODES$ = ADDR(VD_COMMAND_LINE);

   8905  6 000172   000005 236000 7                  LDQ     5
         6 000173   000000 756000 xsym               STQ     XUG_GETCMD

      403     8906    2              CALL XUG$GETCMD (XUG_GETCMD)

   8906  6 000174   000006 630400 7                  EPPR0   6
         6 000175   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000176   000000 701000 xent               TSX1    XUG$GETCMD
         6 000177   000201 702000 6                  TSX2    s:8908
         6 000200   000204 710000 6                  TRA     s:8911

      404     8907    3              WHENALTRETURN DO;

      405     8908    3                 VD_LAST_CWIN_ACTIVITY = %LCA_READ;

   8908  6 000201   000001 235007                    LDA     1,DL
         6 000202   000000 755000 xsym               STA     VD_LAST_CWIN_ACTIVITY

      406     8909    3                 GOTO GETCMD_FAILED;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:60   

   8909  6 000203   000454 710000 6                  TRA     GETCMD_FAILED

      407     8910    3                 END;
      408     8911    2              VD_LAST_CWIN_ACTIVITY = %LCA_READ;

   8911  6 000204   000001 235007                    LDA     1,DL
         6 000205   000000 755000 xsym               STA     VD_LAST_CWIN_ACTIVITY

      409     8912    2              IF XUG_GETCMD.NODES$ = ADDR(VD_ASYM) THEN

   8912  6 000206   000007 236000 7                  LDQ     7
         6 000207   000000 116000 xsym               CMPQ    XUG_GETCMD
         6 000210   000522 600000 6                  TZE     SHRINK_COMMAND_WINDOW_FAILED

      410     8913    2                 GOTO CLEAN_UP; /* Error occurred in GET_COMMAND_RECORD */
      411     8914    2              ACTCHR = ASCBIN(DCBADDR(XUG_GETCMD.INDCB#)->F$DCB.EOMCHAR#);

   8914  6 000211   000000 470400 7                  LDP0    0
         6 000212   000000 471500                    LDP1    0,,PR0
         6 000213   000012 720000 xsym               LXL0    XUG_GETCMD+10
         6 000214   100000 473510                    LDP3    0,X0,PR1
         6 000215   300003 236100                    LDQ     3,,PR3
         6 000216   000777 376007                    ANQ     511,DL
         6 000217   000033 736000                    QLS     27
         6 000220   200003 756100                    STQ     ACTCHR,,AUTO

      412     8915
      413     8916    2              IF CMD$STREAM.INTREE$ = ADDR(NIL)

   8916  6 000221   000026 474400 xsym               LDP4    VD_6E+22
         6 000222   400026 236100                    LDQ     22,,PR4
         6 000223   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000224   000323 601000 6                  TNZ     s:8944
         6 000225   000001 236000 xsym               LDQ     XUG_GETCMD+1
         6 000226   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000227   000323 600000 6                  TZE     s:8944
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:61   

      414     8917    3                AND XUG_GETCMD.OUT$ ~= ADDR(NIL) THEN DO;

      415     8918    3                 COMMAND_LINE$ = XUG_GETCMD.OUT$;

   8918  6 000230   200011 756100                    STQ     COMMAND_LINE$,,AUTO

      416     8919                     %INCREMENT (ARRAY=STATS_TOKENS#, INDX="COMMAND$LINE.CODE - %VD_BASE#")
              8919                          ;

   8920  6 000231   200011 475500                    LDP5    COMMAND_LINE$,,AUTO
         6 000232   500000 721100                    LXL1    0,,PR5
         6 000233   776375 054011 xsym               AOS     VD_6E-771,X1

      417     8922    3                 PREV_IT_COMMAND$ = ADDR(NIL);

   8922  6 000234   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 000235   200010 756100                    STQ     PREV_IT_COMMAND$,,AUTO

      418     8923    3                 CL_INDEX = 0;

   8923  6 000236   200012 450100                    STZ     CL_INDEX,,AUTO

      419     8924    4                 DO WHILE CL_INDEX < COMMAND$LINE.NSUBLKS;

   8924  6 000237   500001 236100                    LDQ     1,,PR5
         6 000240   000022 772000                    QRL     18
         6 000241   200012 116100                    CMPQ    CL_INDEX,,AUTO
         6 000242   000323 602000 6                  TNC     s:8944
         6 000243   000323 600000 6                  TZE     s:8944

      420     8925    4                    IT_COMMAND$ = ADDR(NIL);

   8925  6 000244   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 000245   200007 756100                    STQ     IT_COMMAND$,,AUTO

      421     8926    4                    CALL VDI$PARSE_TREE_TO_INTREE (COMMAND$LINE, CL_INDEX,
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:62   

   8926  6 000246   200007 630500                    EPPR0   IT_COMMAND$,,AUTO
         6 000247   200076 450500                    STP0    WLOC+21,,AUTO
         6 000250   200012 631500                    EPPR1   CL_INDEX,,AUTO
         6 000251   200075 451500                    STP1    WLOC+20,,AUTO
         6 000252   200011 236100                    LDQ     COMMAND_LINE$,,AUTO
         6 000253   200074 756100                    STQ     WLOC+19,,AUTO
         6 000254   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 000255   000021 631400 xsym               EPPR1   B_VECTNIL+17
         6 000256   000000 701000 xent               TSX1    VDI$PARSE_TREE_TO_INTREE
         6 000257   000504 702000 6                  TSX2    PARSE_TREE_TO_INTREE_FAILED

      422     8927    4                      IT_COMMAND$)
      423     8928    4                      ALTRET (PARSE_TREE_TO_INTREE_FAILED);
      424     8929    5                    IF IT_COMMAND$ ~= ADDR(NIL) THEN DO;

   8929  6 000260   200007 236100                    LDQ     IT_COMMAND$,,AUTO
         6 000261   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000262   000315 600000 6                  TZE     s:8941

      425     8930    5                       CMD$STREAM.INTREE$ = IT_COMMAND$;

   8930  6 000263   000026 470400 xsym               LDP0    VD_6E+22
         6 000264   000026 756100                    STQ     22,,PR0

      426     8931    5                       CMD$STREAM.IT_FROM_PARSE_TREE = %TRUE;

   8931  6 000265   000026 470400 xsym               LDP0    VD_6E+22
         6 000266   200000 236007                    LDQ     65536,DL
         6 000267   000027 256100                    ORSQ    23,,PR0

      427     8932    6                       DO WHILE IT_COMMAND$ ~= ADDR(NIL);

   8932  6 000270   000275 710000 6                  TRA     s:8935

      428     8933    6                          CALL PROCESS_COMMAND (IT_COMMAND$)

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:63   
   8933  6 000271   200007 630500                    EPPR0   IT_COMMAND$,,AUTO
         6 000272   200025 450500                    STP0    SINK$+2,,AUTO
         6 000273   001027 701000 6                  TSX1    PROCESS_COMMAND
         6 000274   000522 702000 6                  TSX2    SHRINK_COMMAND_WINDOW_FAILED

      429     8934    6                            ALTRET (PROCESS_COMMAND_FAILED);
      430     8935    6                          END;

   8935  6 000275   200007 236100                    LDQ     IT_COMMAND$,,AUTO
         6 000276   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000277   000271 601000 6                  TNZ     s:8933

      431     8936    5                       CALL VDG$OFREE (CMD$STREAM.INTREE$->IT$COMMAND)

   8936  6 000300   000026 470400 xsym               LDP0    VD_6E+22
         6 000301   000026 471500                    LDP1    22,,PR0
         6 000302   200074 451500                    STP1    WLOC+19,,AUTO
         6 000303   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 000304   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000305   000000 701000 xent               TSX1    VDG$OFREE
         6 000306   001023 702000 6                  TSX2    OALLOC_FAILED

      432     8937    5                         ALTRET (OFREE_FAILED);
      433     8938    5                       CMD$STREAM.INTREE$ = ADDR(NIL);

   8938  6 000307   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 000310   000026 470400 xsym               LDP0    VD_6E+22
         6 000311   000026 756100                    STQ     22,,PR0

      434     8939    5                       CMD$STREAM.IT_FROM_PARSE_TREE = %FALSE;

   8939  6 000312   000026 470400 xsym               LDP0    VD_6E+22
         6 000313   000010 236000 7                  LDQ     8
         6 000314   000027 356100                    ANSQ    23,,PR0

      435     8940    5                       END;

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:64   
      436     8941    4                    END;

   8941  6 000315   200011 470500                    LDP0    COMMAND_LINE$,,AUTO
         6 000316   000001 236100                    LDQ     1,,PR0
         6 000317   000022 772000                    QRL     18
         6 000320   200012 116100                    CMPQ    CL_INDEX,,AUTO
         6 000321   000323 600000 6                  TZE     s:8944
         6 000322   000244 603000 6                  TRC     s:8925

      437     8942    3                 END;

      438     8943
      439     8944    3              IF CMD$STREAM.INTREE$ ~= ADDR(NIL) THEN DO;

   8944  6 000323   000026 470400 xsym               LDP0    VD_6E+22
         6 000324   000026 236100                    LDQ     22,,PR0
         6 000325   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000326   000340 600000 6                  TZE     s:8952

      440     8945    3                 IT_COMMAND$ = CMD$STREAM.INTREE$;

   8945  6 000327   200007 756100                    STQ     IT_COMMAND$,,AUTO

      441     8946    4                 DO WHILE IT_COMMAND$ ~= ADDR(NIL);

   8946  6 000330   000335 710000 6                  TRA     s:8949

      442     8947    4                    CALL PROCESS_COMMAND (IT_COMMAND$)

   8947  6 000331   200007 630500                    EPPR0   IT_COMMAND$,,AUTO
         6 000332   200025 450500                    STP0    SINK$+2,,AUTO
         6 000333   001027 701000 6                  TSX1    PROCESS_COMMAND
         6 000334   000522 702000 6                  TSX2    SHRINK_COMMAND_WINDOW_FAILED

      443     8948    4                      ALTRET (PROCESS_COMMAND_FAILED);
      444     8949    4                    END;

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:65   
   8949  6 000335   200007 236100                    LDQ     IT_COMMAND$,,AUTO
         6 000336   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000337   000331 601000 6                  TNZ     s:8947

      445     8950    3                 END;

      446     8951
      447     8952    3              IF CMD$STREAM.IT_FROM_PARSE_TREE THEN DO;

   8952  6 000340   000026 470400 xsym               LDP0    VD_6E+22
         6 000341   000027 236100                    LDQ     23,,PR0
         6 000342   200000 316007                    CANQ    65536,DL
         6 000343   000360 600000 6                  TZE     s:8960

      448     8953    3                 CALL VDG$OFREE (CMD$STREAM.INTREE$->IT$COMMAND)

   8953  6 000344   000026 471500                    LDP1    22,,PR0
         6 000345   200074 451500                    STP1    WLOC+19,,AUTO
         6 000346   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 000347   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000350   000000 701000 xent               TSX1    VDG$OFREE
         6 000351   001023 702000 6                  TSX2    OALLOC_FAILED

      449     8954    3                   ALTRET (OFREE_FAILED);
      450     8955    3                 CMD$STREAM.INTREE$ = ADDR(NIL);

   8955  6 000352   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 000353   000026 470400 xsym               LDP0    VD_6E+22
         6 000354   000026 756100                    STQ     22,,PR0

      451     8956    3                 CMD$STREAM.IT_FROM_PARSE_TREE = %FALSE;

   8956  6 000355   000026 470400 xsym               LDP0    VD_6E+22
         6 000356   000010 236000 7                  LDQ     8
         6 000357   000027 356100                    ANSQ    23,,PR0

      452     8957    3                 END;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:66   

      453     8958
      454     8959
      455     8960    2              IF VD_6E.ERR_TAIL$ ~= VD_6E.ERR_HEAD$ THEN

   8960  6 000360   000032 236000 xsym               LDQ     VD_6E+26
         6 000361   000031 116000 xsym               CMPQ    VD_6E+25
         6 000362   000010 600000 6                  TZE     FOREVER_LOOP

      456     8961    2                 CALL VDG$EREPORT_ERROR; /* Flush any info msgs */

   8961  6 000363   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 000364   000000 701000 xent               TSX1    VDG$EREPORT_ERROR
         6 000365   000000 011000                    NOP     0

      457     8962    2              END FOREVER_LOOP;

   8962  6 000366   000010 710000 6                  TRA     FOREVER_LOOP

      458     8963
      459     8964    1   VDI$PFIX_WINDOWS: ENTRY ALTRET;

   8964  6 000367   000000 700200 xent  VDI$PFIX_WI* TSX0  ! X66_AUTO_0
         6 000370   000100 000000                    ZERO    64,0

      460     8965
      461     8966    2           IF DCBADDR (DCBNUM (M$6E)) -> F$DCB.RES# ~= 'ME' THEN DO;

   8966  6 000371   000000 236007 xsym               LDQ     M$6E,DL
         6 000372   000000 470400 7                  LDP0    0
         6 000373   000000 471500                    LDP1    0,,PR0
         6 000374   100000 473506                    LDP3    0,QL,PR1
         6 000375   040000 106500                    CMPC    fill='040'O
         6 000376   300026 000004                    ADSC9   22,,PR3                  cn=0,n=4
         6 000377   000022 000002 5                  ADSC9   FIRST_ED_WIN_BLOCK_LOC+9 cn=0,n=2
         6 000400   000407 600000 6                  TZE     s:8971

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:67   
      462     8967                   /* An !ADJUST must have been the command - try to honor it */
      463     8968    2              IF VD_EDITING_WINDOWS > VD_IBEX_WINDOW THEN EXIT; /* Too late */

   8968  6 000401   000000 236000 xsym               LDQ     VD_EDITING_WINDOWS
         6 000402   000000 116000 xsym               CMPQ    VD_IBEX_WINDOW
         6 000403   000407 605400 6                  TPNZ    s:8971

      464     8969    2              CALL VDP$WINIT;

   8969  6 000404   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 000405   000000 701000 xent               TSX1    VDP$WINIT
         6 000406   000000 011000                    NOP     0

      465     8970    2              END;

      466     8971    1           IF NOT DCBADDR (DCBNUM (M$ME)) -> F$DCB.FCD# OR VD_$SCREEN.V#=0 THEN

   8971  6 000407   000000 236007 xsym               LDQ     M$ME,DL
         6 000410   000000 470400 7                  LDP0    0
         6 000411   000000 471500                    LDP1    0,,PR0
         6 000412   100000 473506                    LDP3    0,QL,PR1
         6 000413   300031 236100                    LDQ     25,,PR3
         6 000414   020000 316007                    CANQ    8192,DL
         6 000415   000420 600000 6                  TZE     s:8972
         6 000416   000003 235000 xsym               LDA     VD_$SCREEN+3
         6 000417   000424 601000 6                  TNZ     s:8973

      467     8972    1              CALL VDG$EXPAND_COMMAND_WINDOW (VD_$SCREEN.V#);

   8972  6 000420   000011 630400 7                  EPPR0   9
         6 000421   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000422   000000 701000 xent               TSX1    VDG$EXPAND_COMMAND_WINDOW
         6 000423   000000 011000                    NOP     0

      468     8973    1           RETURN;

   8973  6 000424   000000 702200 xent               TSX2  ! X66_ARET
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:68   

      469     8974
      470     8975                %BOX (TITLE="Error Handlers");

              8987    1   /***************************************************************************
              8989    1    *                                                                         *
              8993    1            *                               Error Handlers                           *
              8995    1            *                                                                        *
              8997    1          ***************************************************************************/

      471     9001
      472     9002    1   WREAD_FAILED:
      473     9003                /*
      474     9004                *   We differentiate between different types of WREAD
      475     9005                *       errors:  (1) those that occur on the file side before we
      476     9006                *       get the screen filled, usually while reading the file in
      477     9007                *       order to fill the screen; (2) those that occur on the file
      478     9008                *       side after we get the screen filled and begin reading
      479     9009                *       user keystrokes, usually while writing user-changed records
      480     9010                *       to the file; and
      481     9011                *N*     (3) those that occur on the FEP side.
      482     9012                *   We detect case (1) by looking at the last error on the VD$ERR
      483     9013                *       chain; if it's %E$CANT_READ_FILE, then we've got a case (1)
      484     9014                *       error.  In that case, remove the EditBlock so we don't loop
      485     9015                *       forever trying to read the file to fill the screen.
      486     9016                *   If the last VD$ERR is any other error, we've got case (2):
      487     9017                *       just erase the screen to force a refill of the screen
      488     9018                *       from the file.  This is an error like "can't insert records
      489     9019                *       into a consecutive file", or "can't insert anymore records
      490     9020                *       between these two".  We don't need to remove the EditBlock
      491     9021                *       block; presumeably the user won't keep repeating the same
      492     9022                *       mistake.  However, we do need to make sure that the screen
      493     9023                *       matches what's in the file, not what the FEP thinks it
      494     9024                *       should be:  an insertion may have worked in the FEP which
      495     9025                *       didn't work on the file, and the FEP must be informed of
      496     9026                *       the actual file contents.
      497     9027                *N* For case (3), who knows!  Assume it's not loopable, and
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:69   
      498     9028                *N*     do the same as for case (2).
      499     9029                */
      500     9030    1           IF VD$ERR_TAIL.ERR.CODE# = %E$CANT_READ_FILE

   9030  6 000425   000032 470400 xsym  WREAD_FAILED LDP0    VD_6E+26
         6 000426   000002 236100                    LDQ     2,,PR0
         6 000427   377770 376007                    ANQ     131064,DL
         6 000430   004330 116007                    CMPQ    2264,DL
         6 000431   000441 601000 6                  TNZ     s:9037
         6 000432   000002 236100                    LDQ     2,,PR0
         6 000433   400000 316007                    CANQ    -131072,DL
         6 000434   000441 601000 6                  TNZ     s:9037

      501     9031    2             AND NOT VD$ERR_TAIL.ERR.MON THEN DO;

      502     9032                   /* Case (1):  Remove the EditBlock */
      503     9033    2              CALL VDI$PREMOVE_EDIT_BLOCK;

   9033  6 000435   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 000436   000000 701000 xent               TSX1    VDI$PREMOVE_EDIT_BLOCK
         6 000437   000000 011000                    NOP     0

      504     9034    2              END;

   9034  6 000440   000451 710000 6                  TRA     s:9040

      505     9035    2           ELSE DO;

      506     9036                   /* Cases (2) and (3):  just erase the screen */
      507     9037    2              IF CURR$WINDOW.DCB# ~= VD$ERR_TAIL.DCB# THEN

   9037  6 000441   200006 471500                    LDP1    CURR_WINDOW$,,AUTO
         6 000442   100014 720100                    LXL0    12,,PR1
         6 000443   000004 100100                    CMPX0   4,,PR0
         6 000444   000451 600000 6                  TZE     s:9040

      508     9038    2                 CALL VDP$WERASE (CURR$WINDOW);
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:70   

   9038  6 000445   200006 630500                    EPPR0   CURR_WINDOW$,,AUTO
         6 000446   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000447   000000 701000 xent               TSX1    VDP$WERASE
         6 000450   000000 011000                    NOP     0

      509     9039    2              END;

      510     9040    1           GOT_WREAD_ERROR = %TRUE;

   9040  6 000451   400000 236003                    LDQ     -131072,DU
         6 000452   200013 756100                    STQ     GOT_WREAD_ERROR,,AUTO

      511     9041    1           GOTO CLEAN_UP;

   9041  6 000453   000522 710000 6                  TRA     SHRINK_COMMAND_WINDOW_FAILED

      512     9042
      513     9043
      514     9044    1   GETCMD_FAILED:
      515     9045                /*
      516     9046                *  XUG_INIT.GOODCMD isn't set, so we get syntax errors as errors
      517     9047                *     from XUG (XUP-E$SYNERR-0).
      518     9048                *  Also, the subroutines called by GETCMD (eg VDI$PGET_COMMAND_RECORD
      519     9049                *     and VDI$PUSER_PARSE_RTN) may return errors.
      520     9050                *  A VD$ERR has already been allocated in all cases except an
      521     9051                *      error from an XU routine.
      522     9052                */
      523     9053    1           ERR_CODE = XUG_GETCMD.ERR#;

   9053  6 000454   000001 236000 xsym  GETCMD_FAIL* LDQ     XUG_GETCMD+1
         6 000455   200020 756100                    STQ     ERR_CODE,,AUTO

      524     9054    2           IF ERR_CODE.FCG = %FCG_XU THEN DO;

   9054  6 000456   777700 376003                    ANQ     -64,DU
         6 000457   302500 116003                    CMPQ    99648,DU
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:71   
         6 000460   000503 601000 6                  TNZ     s:9061

      525     9055    2              CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   9055  6 000461   200016 630500                    EPPR0   VD_ERR$,,AUTO
         6 000462   200075 450500                    STP0    WLOC+20,,AUTO
         6 000463   000012 236000 7                  LDQ     10
         6 000464   200074 756100                    STQ     WLOC+19,,AUTO
         6 000465   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 000466   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 000467   000000 701000 xent               TSX1    VDG$OALLOC
         6 000470   001023 702000 6                  TSX2    OALLOC_FAILED

      526     9056    2                ALTRET (OALLOC_FAILED);
      527     9057    2              VD$ERR.ERR = XUG_GETCMD.ERR#;

   9057  6 000471   000001 236000 xsym               LDQ     XUG_GETCMD+1
         6 000472   200016 470500                    LDP0    VD_ERR$,,AUTO
         6 000473   000002 756100                    STQ     2,,PR0

      528     9058    2              VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   9058  6 000474   000003 220003                    LDX0    3,DU
         6 000475   200016 470500                    LDP0    VD_ERR$,,AUTO
         6 000476   000003 740100                    STX0    3,,PR0

      529     9059    2              VD$ERR.CMDLINE_INDEX# = XUG_GETCMD.PCB$->P$PCB.HI_CHAR;

   9059  6 000477   000003 470400 xsym               LDP0    XUG_GETCMD+3
         6 000500   000012 721100                    LXL1    10,,PR0
         6 000501   200016 471500                    LDP1    VD_ERR$,,AUTO
         6 000502   100003 441100                    SXL1    3,,PR1

      530     9060    2              END;

      531     9061    1           GOTO CLEAN_UP;

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:72   
   9061  6 000503   000522 710000 6                  TRA     SHRINK_COMMAND_WINDOW_FAILED

      532     9062
      533     9063
      534     9064    1   PARSE_TREE_TO_INTREE_FAILED:
      535     9065    1           CALL VDG$OFREE (CMD$STREAM.INTREE$->IT$COMMAND)

   9065  6 000504   000026 470400 xsym  PARSE_TREE_* LDP0    VD_6E+22
         6 000505   000026 471500                    LDP1    22,,PR0
         6 000506   200074 451500                    STP1    WLOC+19,,AUTO
         6 000507   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 000510   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000511   000000 701000 xent               TSX1    VDG$OFREE
         6 000512   001023 702000 6                  TSX2    OALLOC_FAILED

      536     9066    1             ALTRET (OFREE_FAILED);
      537     9067    1           CMD$STREAM.INTREE$ = ADDR(NIL);

   9067  6 000513   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 000514   000026 470400 xsym               LDP0    VD_6E+22
         6 000515   000026 756100                    STQ     22,,PR0

      538     9068    1           CMD$STREAM.IT_FROM_PARSE_TREE = %FALSE;

   9068  6 000516   000026 470400 xsym               LDP0    VD_6E+22
         6 000517   000010 236000 7                  LDQ     8
         6 000520   000027 356100                    ANSQ    23,,PR0

      539     9069    1           GOTO CLEAN_UP;

   9069  6 000521   000522 710000 6                  TRA     SHRINK_COMMAND_WINDOW_FAILED

   9068  6 000522                       SHRINK_COMM* null
   9068  6 000522                       EXPAND_COMM* null
   9068  6 000522                       NFLUSH_FAIL* null
   9068  6 000522                       PROCESS_COM* null
      540     9070
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:73   
      541     9071
      542     9072    1   SHRINK_COMMAND_WINDOW_FAILED: ;
      543     9073    1   EXPAND_COMMAND_WINDOW_FAILED: ;
      544     9074    1   NFLUSH_FAILED: ;
      545     9075    1   PROCESS_COMMAND_FAILED: ;
      546     9076    1   CLEAN_UP:
      547     9077    1           IF VD_6E.CMD_STREAM$ ~= ADDR(NIL) THEN

   9077  6 000522   000026 236000 xsym  CLEAN_UP     LDQ     VD_6E+22
         6 000523   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000524   001015 600000 6                  TZE     s:9152

      548     9078    2   FLUSH_CMD_STREAMS: DO;

   9078  6 000525                       FLUSH_CMD_S* null
      549     9079    2              VD_ERR$ = ADDR(NIL);

   9079  6 000525   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 000526   200016 756100                    STQ     VD_ERR$,,AUTO

      550     9080
      551     9081    2   EACH_CMD_STREAM:
      552     9082    3              DO UNTIL (VD_6E.CMD_STREAM$ = ADDR (NIL));

   9082  6 000527                       EACH_CMD_ST* null
      553     9083    3                 WARN_ABORTED_BUFFER = %FALSE;

   9083  6 000527   200014 450100                    STZ     WARN_ABORTED_BUFFER,,AUTO

      554     9084    3                 IF CMD$STREAM.TYPE# = %CS_BUFFER

   9084  6 000530   000026 470400 xsym               LDP0    VD_6E+22
         6 000531   000002 220100                    LDX0    2,,PR0
         6 000532   000001 100003                    CMPX0   1,DU
         6 000533   000545 601000 6                  TNZ     s:9089
         6 000534   000025 236100                    LDQ     21,,PR0
         6 000535   000001 116000 xsym               CMPQ    B_VECTNIL+1
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:74   
         6 000536   000545 600000 6                  TZE     s:9089

      555     9085    3                   AND CMD$STREAM.RECORD$ ~= ADDR(NIL) THEN
      556     9086    3                    IF CMD$STREAM.POSITION# <

   9086  6 000537   000025 471500                    LDP1    21,,PR0
         6 000540   000027 221100                    LDX1    23,,PR0
         6 000541   100002 101100                    CMPX1   2,,PR1
         6 000542   000545 605000 6                  TPL     s:9089

      557     9087    3                      CMD$STREAM.RECORD$ -> VD$BUFFER.LENGTH# THEN
      558     9088    3                       WARN_ABORTED_BUFFER = %TRUE;

   9088  6 000543   400000 236003                    LDQ     -131072,DU
         6 000544   200014 756100                    STQ     WARN_ABORTED_BUFFER,,AUTO

      559     9089    4                 IF VD_$$QUAC.V# ~= 0 AND CMD$STREAM.DCB# = DCBNUM(M$SI) THEN DO;

   9089  6 000545   000003 235000 xsym               LDA     VD_$$QUAC+3
         6 000546   000574 600000 6                  TZE     s:9097
         6 000547   000000 236007 xsym               LDQ     M$SI,DL
         6 000550   200074 756100                    STQ     WLOC+19,,AUTO
         6 000551   000024 236100                    LDQ     20,,PR0
         6 000552   000022 772000                    QRL     18
         6 000553   200074 116100                    CMPQ    WLOC+19,,AUTO
         6 000554   000574 601000 6                  TNZ     s:9097

      560     9090    4                    IF CMD$STREAM.REC_NUM# = 0 THEN EXIT; /* give up if not open */

   9090  6 000555   000030 235100                    LDA     24,,PR0
         6 000556   000574 600000 6                  TZE     s:9097

      561     9091    4                    IF VD_ERR$=ADDR(NIL) THEN EXIT FLUSH_CMD_STREAMS;

   9091  6 000557   200016 236100                    LDQ     VD_ERR$,,AUTO
         6 000560   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000561   001015 600000 6                  TZE     s:9152
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:75   

      562     9092    4                    CALL VDI$PREAD_FILE_CLOSE;

   9092  6 000562   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 000563   000000 701000 xent               TSX1    VDI$PREAD_FILE_CLOSE
         6 000564   000000 011000                    NOP     0

      563     9093    4                    CALL VDI$PREAD_FILE_OPEN;

   9093  6 000565   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 000566   000000 701000 xent               TSX1    VDI$PREAD_FILE_OPEN
         6 000567   000000 011000                    NOP     0

      564     9094    4                    CALL VDI$PREAD_FILE_POSITION;

   9094  6 000570   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 000571   000000 701000 xent               TSX1    VDI$PREAD_FILE_POSITION
         6 000572   000000 011000                    NOP     0

      565     9095    4                    EXIT FLUSH_CMD_STREAMS; /* Only to the input file */

   9095  6 000573   001015 710000 6                  TRA     s:9152

      566     9096    4                    END;
      567     9097    3                 IF CMD$STREAM.TYPE# = %CS_FILE

   9097  6 000574   000002 220100                    LDX0    2,,PR0
         6 000575   000003 100003                    CMPX0   3,DU
         6 000576   000603 600000 6                  TZE     WARN_ABORTED_CMD_STREAM
         6 000577   000004 100003                    CMPX0   4,DU
         6 000600   000603 600000 6                  TZE     WARN_ABORTED_CMD_STREAM
         6 000601   200014 234100                    SZN     WARN_ABORTED_BUFFER,,AUTO
         6 000602   000773 605000 6                  TPL     s:9143

      568     9098    3                   OR CMD$STREAM.TYPE# = %CS_DCB
      569     9099    3                   OR WARN_ABORTED_BUFFER THEN
      570     9100    4   WARN_ABORTED_CMD_STREAM: DO;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:76   

   9100  6 000603                       WARN_ABORTE* null
      571     9101    4                    CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   9101  6 000603   200016 631500                    EPPR1   VD_ERR$,,AUTO
         6 000604   200075 451500                    STP1    WLOC+20,,AUTO
         6 000605   000012 236000 7                  LDQ     10
         6 000606   200074 756100                    STQ     WLOC+19,,AUTO
         6 000607   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 000610   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 000611   000000 701000 xent               TSX1    VDG$OALLOC
         6 000612   001023 702000 6                  TSX2    OALLOC_FAILED

      572     9102    4                      ALTRET (OALLOC_FAILED);
      573     9103    4                    SUBST_FIELD$ = PINCRW(VD_ERR$, SIZEW(VD$ERR));

   9103  6 000613   200016 236100                    LDQ     VD_ERR$,,AUTO
         6 000614   000005 036003                    ADLQ    5,DU
         6 000615   200017 756100                    STQ     SUBST_FIELD$,,AUTO

      574     9104    4                    VD$ERR.FLAGLEV# = %FLV_WARN;

   9104  6 000616   000002 220003                    LDX0    2,DU
         6 000617   200016 470500                    LDP0    VD_ERR$,,AUTO
         6 000620   000003 740100                    STX0    3,,PR0

      575     9105    4                    INDX = 0;

   9105  6 000621   200021 450100                    STZ     INDX,,AUTO

      576     9106    5                    DO WHILE INDX < %MX_CMD_OBJECTS

   9106  6 000622   000624 710000 6                  TRA     s:9109

      577     9107    5                      AND VD_CMD_OBJECTS$ (INDX) ~= ADDR(NIL);
      578     9108    5                       INDX = INDX + 1;

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:77   
   9108  6 000623   200021 054100                    AOS     INDX,,AUTO

      579     9109    5                       END;

   9109  6 000624   200021 235100                    LDA     INDX,,AUTO
         6 000625   000062 115007                    CMPA    50,DL
         6 000626   000632 605000 6                  TPL     s:9110
         6 000627   000000 236005 xsym               LDQ     VD_CMD_OBJECTS$,AL
         6 000630   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000631   000623 601000 6                  TNZ     s:9108

      580     9110    4                    IF INDX >= %MX_CMD_OBJECTS THEN

   9110  6 000632   200021 235100                    LDA     INDX,,AUTO
         6 000633   000062 115007                    CMPA    50,DL
         6 000634   000640 604000 6                  TMI     s:9113

      581     9111    4                       CALL VDG$ESCREECH;

   9111  6 000635   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 000636   000000 701000 xent               TSX1    VDG$ESCREECH
         6 000637   000000 011000                    NOP     0

      582     9112
      583     9113    5                    IF WARN_ABORTED_BUFFER THEN DO;

   9113  6 000640   200014 234100                    SZN     WARN_ABORTED_BUFFER,,AUTO
         6 000641   000717 605000 6                  TPL     s:9126

      584     9114    5                       VD$ERR.ERR.CODE# = %E$WARN_COMMANDS_IGNORED;

   9114  6 000642   200016 470500                    LDP0    VD_ERR$,,AUTO
         6 000643   000002 236100                    LDQ     2,,PR0
         6 000644   000013 376000 7                  ANQ     11
         6 000645   001070 276007                    ORQ     568,DL
         6 000646   000002 756100                    STQ     2,,PR0

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:78   
      585     9115    5                       VD_CMD_OBJECTS$ (INDX) = CMD$STREAM.RECORD$;

   9115  6 000647   000026 470400 xsym               LDP0    VD_6E+22
         6 000650   000025 236100                    LDQ     21,,PR0
         6 000651   200021 720100                    LXL0    INDX,,AUTO
         6 000652   000000 756010 xsym               STQ     VD_CMD_OBJECTS$,X0

      586     9116    5                       CMD$STREAM.RECORD$ = ADDR(NIL);

   9116  6 000653   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 000654   000025 756100                    STQ     21,,PR0

      587     9117    5                       SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_TEXTC;

   9117  6 000655   000045 221003                    LDX1    37,DU
         6 000656   200017 470500                    LDP0    SUBST_FIELD$,,AUTO
         6 000657   000000 741100                    STX1    0,,PR0

      588     9118    5                       CMD_RECORD$ = VD_CMD_OBJECTS$ (INDX);

   9118  6 000660   000000 236010 xsym               LDQ     VD_CMD_OBJECTS$,X0
         6 000661   200022 756100                    STQ     CMD_RECORD$,,AUTO

      589     9119    5                       CALL INSERT (CMD$RECORD.BYTES,

   9119  6 000662   200022 471500                    LDP1    CMD_RECORD$,,AUTO
         6 000663   100002 222100                    LDX2    2,,PR1
         6 000664   000026 473400 xsym               LDP3    VD_6E+22
         6 000665   300027 236100                    LDQ     23,,PR3
         6 000666   000022 732000                    QRS     18
         6 000667   200074 756100                    STQ     WLOC+19,,AUTO
         6 000670   100002 236100                    LDQ     2,,PR1
         6 000671   000022 732000                    QRS     18
         6 000672   200074 136100                    SBLQ    WLOC+19,,AUTO
         6 000673   000033 736000                    QLS     27
         6 000674   000014 276000 7                  ORQ     12
         6 000675   200075 756100                    STQ     WLOC+20,,AUTO
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:79   
         6 000676   300027 236100                    LDQ     23,,PR3
         6 000677   000022 732000                    QRS     18
         6 000700   200077 756100                    STQ     WLOC+22,,AUTO
         6 000701   200075 236100                    LDQ     WLOC+20,,AUTO
         6 000702   200076 756100                    STQ     WLOC+21,,AUTO
         6 000703   200077 235100                    LDA     WLOC+22,,AUTO
         6 000704   040105 100500                    MLR     fill='040'O
         6 000705   200076 000004                    ADSC9   WLOC+21,,AUTO            cn=0,n=4
         6 000706   100002 200001                    ADSC9   2,A,PR1                  cn=1,n=1

      590     9120    5                         CMD$STREAM.POSITION# - 1, 1,
      591     9121    5                         BINASC(CMD$RECORD.LENGTH# - CMD$STREAM.POSITION#));
      592     9122    5                       SUBST$POINTER.V$ (0) = PINCRC(ADDR(CMD$RECORD.BYTES),

   9122  6 000707   000026 473400 xsym               LDP3    VD_6E+22
         6 000710   300027 236100                    LDQ     23,,PR3
         6 000711   000022 732000                    QRS     18
         6 000712   000020 736000                    QLS     16
         6 000713   000015 036000 7                  ADLQ    13
         6 000714   200022 036100                    ADLQ    CMD_RECORD$,,AUTO
         6 000715   000003 756100                    STQ     3,,PR0

      593     9123    5                         CMD$STREAM.POSITION# - 1);
      594     9124    5                       END;

   9124  6 000716   000773 710000 6                  TRA     s:9143

      595     9125    5                    ELSE DO;

      596     9126    5                       CALL VDI$PREAD_FILE_CLOSE; /* Any err reported below */

   9126  6 000717   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 000720   000000 701000 xent               TSX1    VDI$PREAD_FILE_CLOSE
         6 000721   000000 011000                    NOP     0

      597     9127    5                       VD$ERR.ERR.CODE# = %E$WARN_STOPPING_READ_FILE;

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:80   
   9127  6 000722   200016 470500                    LDP0    VD_ERR$,,AUTO
         6 000723   000002 236100                    LDQ     2,,PR0
         6 000724   000013 376000 7                  ANQ     11
         6 000725   001060 276007                    ORQ     560,DL
         6 000726   000002 756100                    STQ     2,,PR0

      598     9128    5                       CALL VDG$OALLOC (%CLS_TEXTC_REMOTE, VD_CMD_OBJECTS$ (INDX),

   9128  6 000727   000020 236000 7                  LDQ     16
         6 000730   200076 756100                    STQ     WLOC+21,,AUTO
         6 000731   200021 720100                    LXL0    INDX,,AUTO
         6 000732   000000 630410 xsym               EPPR0   VD_CMD_OBJECTS$,X0
         6 000733   200075 450500                    STP0    WLOC+20,,AUTO
         6 000734   000021 236000 7                  LDQ     17
         6 000735   200074 756100                    STQ     WLOC+19,,AUTO
         6 000736   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 000737   000021 631400 xsym               EPPR1   B_VECTNIL+17
         6 000740   000000 701000 xent               TSX1    VDG$OALLOC
         6 000741   001023 702000 6                  TSX2    OALLOC_FAILED

      599     9129    5                         LENGTHC(CMD$STREAM.FILE))
      600     9130    5                         ALTRET (OALLOC_FAILED);
      601     9131    5                       SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_TEXTC;

   9131  6 000742   000045 220003                    LDX0    37,DU
         6 000743   200017 470500                    LDP0    SUBST_FIELD$,,AUTO
         6 000744   000000 740100                    STX0    0,,PR0

      602     9132    5                       SUBST$POINTER.V$ (0) = ADDR(VD_CMD_OBJECTS$ (INDX) ->

   9132  6 000745   200021 721100                    LXL1    INDX,,AUTO
         6 000746   000000 471411 xsym               LDP1    VD_CMD_OBJECTS$,X1
         6 000747   100002 633500                    EPPR3   2,,PR1
         6 000750   000003 453500                    STP3    3,,PR0

      603     9133    5                         VD$TEXTC_REMOTE.LENGTH#);
      604     9134    5                       VD_CMD_OBJECTS$ (INDX) -> VD$TEXTC_REMOTE.LENGTH# =
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:81   

   9134  6 000751   000000 471411 xsym               LDP1    VD_CMD_OBJECTS$,X1
         6 000752   000026 474400 xsym               LDP4    VD_6E+22
         6 000753   400002 236100                    LDQ     2,,PR4
         6 000754   000022 736000                    QLS     18
         6 000755   100002 552140                    STBQ    2,'40'O,PR1

      605     9135    5                         CMD$STREAM.FILE.LENGTH#;
      606     9136    5                       VD_CMD_OBJECTS$ (INDX) -> VD$TEXTC_REMOTE.BYTES =

   9136  6 000756   000000 471411 xsym               LDP1    VD_CMD_OBJECTS$,X1
         6 000757   100002 236100                    LDQ     2,,PR1
         6 000760   000033 772000                    QRL     27
         6 000761   000026 473400 xsym               LDP3    VD_6E+22
         6 000762   000000 622006                    EAX2    0,QL
         6 000763   040140 100500                    MLR     fill='040'O
         6 000764   300002 600104                    ADSC9   2,,PR3                   cn=3,n=68
         6 000765   100002 200012                    ADSC9   2,,PR1                   cn=1,n=*X2

      607     9137    5                         CMD$STREAM.FILE.BYTES;
      608     9138    5                       SUBST$NUMBER.OBJECT.CLASS# (1) = %CLS_NUMBER;

   9138  6 000766   000033 222003                    LDX2    27,DU
         6 000767   000004 742100                    STX2    4,,PR0

      609     9139    5                       SUBST$NUMBER.V# (1) = CMD$STREAM.REC_NUM#;

   9139  6 000770   000026 471400 xsym               LDP1    VD_6E+22
         6 000771   100030 235100                    LDA     24,,PR1
         6 000772   000007 755100                    STA     7,,PR0

      610     9140    5                       END;

      611     9141    4                    END WARN_ABORTED_CMD_STREAM;

      612     9142
      613     9143    3                 CALL VDG$OFREE (CMD$STREAM)
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:82   

   9143  6 000773   000026 630400 xsym               EPPR0   VD_6E+22
         6 000774   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000775   000000 701000 xent               TSX1    VDG$OFREE
         6 000776   001023 702000 6                  TSX2    OALLOC_FAILED

      614     9144    3                   ALTRET (OFREE_FAILED);
      615     9145    3                 END EACH_CMD_STREAM;

   9145  6 000777   000026 236000 xsym               LDQ     VD_6E+22
         6 001000   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 001001   000527 601000 6                  TNZ     EACH_CMD_STREAM

      616     9146
      617     9147    2              CALL VDG$OALLOC (%CLS_CMD_STREAM, SINK$)

   9147  6 001002   200023 630500                    EPPR0   SINK$,,AUTO
         6 001003   200075 450500                    STP0    WLOC+20,,AUTO
         6 001004   000022 236000 7                  LDQ     18
         6 001005   200074 756100                    STQ     WLOC+19,,AUTO
         6 001006   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 001007   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 001010   000000 701000 xent               TSX1    VDG$OALLOC
         6 001011   001023 702000 6                  TSX2    OALLOC_FAILED

      618     9148    2                ALTRET (OALLOC_FAILED);
      619     9149    2              CMD$STREAM.TYPE# = %CS_ME;

   9149  6 001012   000002 220003                    LDX0    2,DU
         6 001013   000026 470400 xsym               LDP0    VD_6E+22
         6 001014   000002 740100                    STX0    2,,PR0

      620     9150    2              END FLUSH_CMD_STREAMS;

      621     9151
      622     9152    1           CALL VDG$EREPORT_ERROR;

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:83   
   9152  6 001015   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 001016   000000 701000 xent               TSX1    VDG$EREPORT_ERROR
         6 001017   000000 011000                    NOP     0

      623     9153
      624     9154    1           VD_FORCE_READ_FROM = %RF_COMMAND_WINDOW; /* Force 1 cmd window read */

   9154  6 001020   000001 235007                    LDA     1,DL
         6 001021   000000 755000 xsym               STA     VD_FORCE_READ_FROM

      625     9155    1           GOTO FOREVER_LOOP;   /* Re-enter the loop at the top */

   9155  6 001022   000010 710000 6                  TRA     FOREVER_LOOP

   9154  6 001023                       OALLOC_FAIL* null
   9154  6 001023                       OFREE_FAILED null
      626     9156
      627     9157
      628     9158    1   OALLOC_FAILED: ;
      629     9159    1   OFREE_FAILED: ;
      630     9160                /* These are fatal errors */
      631     9161    1           CALL VDG$EREPORT_ERROR; /* We'll never come back from this */

   9161  6 001023   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 001024   000000 701000 xent               TSX1    VDG$EREPORT_ERROR
         6 001025   000000 011000                    NOP     0
         6 001026   002664 710000 6                  TRA     s:11302

      632     9162
      633     9163        %BOX (TITLE=PROCESS_COMMAND, PAGE=YES);
              9171    1
              9175    1   /***************************************************************************
              9177    1    *                                                                         *
              9181    1            *                              PROCESS_COMMAND                           *
              9183    1            *                                                                        *
              9185    1          ***************************************************************************/

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:84   
      634     9189
      635     9190        /*I* NAME: PROCESS_COMMAND
      636     9191            PARAMETERS:
      637     9192                IT_COMMAND$ - Ptr to a VD$IT_COMMAND node specyfying the command to
      638     9193                    process.
      639     9194            INPUT:
      640     9195
      641     9196                The following data isn't used by this routine directly,
      642     9197                but the comments below describe the state of the data
      643     9198                at the point between commands.
      644     9199
      645     9200                VD_CURRENT_WINDOW$ points to the VD$FILE_NODE for the current
      646     9201                    editing window.  If not NIL, the Spec attached to this node is:
      647     9202                CURR$WINDOW - The VD$WINDOW_SPEC for the current editing window:
      648     9203                    .OPERAND.STREAM$ points to the window's stream, which is
      649     9204                        always open to the EditBlock (if any) for the window.
      650     9205                    .OPERAND.INTREE$ must be NIL between commands.
      651     9206                    .OPERAND.EDIT_BLOCK$ points to the block descriptor for
      652     9207                        the EditBlock, if any.
      653     9208                    .OPERAND.EVAL$ points to the top VD$EVAL on the evalutation
      654     9209                        stack for the current SelectedBlock:
      655     9210                        .ENCLOSING specifies the current enclosing range for
      656     9211                            evaluation; used by the VDE$Ixxx routines.
      657     9212                        .RANGE is the current range of the SelectedBlock (its
      658     9213                            domain is always the current EditBlock).
      659     9214                        .STATE# is the current state of evaluation of the
      660     9215                            block; used by VDE$Ixxx routines.
      661     9216                VD_6E.SOURCE.OPERAND contains all the above info for the
      662     9217                    Source operand.
      663     9218
      664     9219                There may be:
      665     9220                    No current EditBlock:  CURR$WSPEC.OPERAND.EDIT_BLOCK$ and
      666     9221                        .EVAL$ will be NIL.
      667     9222                    No current Source operand:  VD_6E.SOURCE.OPERAND.EDIT_BLOCK$
      668     9223                        will be NIL.
      669     9224            OUTPUT:
      670     9225                IT_COMMAND$ will be reset to point to the next
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:85   
      671     9226                    VD$IT_COMMAND node to process, if any.
      672     9227                IT_COMMAND$'s InTree parameter, if it had one, will be removed.
      673     9228            DESCRIPTION:
      674     9229                This routine will process one command, as specified by a VD$IT_COMMAND
      675     9230                    node.
      676     9231                If the command has an explicit verb, call the appropriate command
      677     9232                    processor.
      678     9233                    If this is an editing command, reset the SelectedBlock's
      679     9234                    evaluation state to %EVST_INITIAL, ready for the next command.
      680     9235                If the command doesn't have an explicit verb, evaluate the
      681     9236                    range of the command's InTree:  this is the new range for the
      682     9237                    SelectedBlock.
      683     9238                In any case, discard all entries on the SelectedBlock's
      684     9239                    evaluation stack except the top entry; those generators
      685     9240                    aren't needed anymore.
      686     9241        */
      687     9242
      688     9243    1   PROCESS_COMMAND: PROC (IT_COMMAND$) ALTRET;

   9243  6 001027   200024 741300       PROCESS_COM* STX1  ! SINK$+1,,AUTO

      689     9244
      690     9245
      691     9246    2   DCL IT_COMMAND$ PTR;
      692     9247
      693     9248
      694     9249        /*
      695     9250        *   EQUs just for this routine.
      696     9251        */
      697     9252
      698     9253        %EQU NON_ED_CMD = 1;        /* Non-editing command */
      699     9254        %EQU EXPL_ED_CMD = 2;       /* Explicit editing command */
      700     9255        %EQU IMPL_ED_CMD = 3;       /* Implicit (verb-less) editing command */
      701     9256
      702     9257
      703     9258    2   DCL CMD_CLASS SBIN;
      704     9259    2   DCL CURR_WINDOW$ PTR;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:86   
      705     9260    2   DCL IT_BLOCK_EXPR$ PTR;
      706     9261    2   DCL SIGNAL BIT(1) ALIGNED;
      707     9262    2   DCL SAVE_SCREEN SBIN;
      708     9263    2   DCL DELFID_CMD    BIT(36)  STATIC SYMDEF INIT('0'B);
      709     9264
      710     9265
      711     9266        %VD$IT_COMMAND (NAME=IT$COMMAND, STCLASS="BASED(IT_COMMAND$)");
      712     9304        %PARSE$OUT (NAME=BLOCK$EXPR, STCLASS=BASED);
      713     9349        %VD$WINDOW_SPEC (NAME=CURR$WINDOW, STCLASS="BASED(CURR_WINDOW$)");
      714     9415        %VD$IT_BLOCK_EXPR (NAME=IT$BLOCK_EXPR, STCLASS="BASED(IT_BLOCK_EXPR$)");
      715     9565
      716     9566
      717     9567
      718     9568    2           CMD_CLASS = 0;

   9568  6 001030   200026 450100                    STZ     CMD_CLASS,,AUTO

      719     9569    3           DO CASE (IT$COMMAND.CODE#);

   9569  6 001031   200025 470500                    LDP0    @IT_COMMAND$,,AUTO
         6 001032   000000 471500                    LDP1    0,,PR0
         6 001033   100003 236100                    LDQ     3,,PR1
         6 001034   000022 732000                    QRS     18
         6 001035   001752 136007                    SBLQ    1002,DL
         6 001036   000105 116007                    CMPQ    69,DL
         6 001037   001041 602006 6                  TNC     s:9569+8,QL
         6 001040   001154 710000 6                  TRA     s:9577
         6 001041   001146 710000 6                  TRA     s:9573
         6 001042   001146 710000 6                  TRA     s:9573
         6 001043   001154 710000 6                  TRA     s:9577
         6 001044   001154 710000 6                  TRA     s:9577
         6 001045   001146 710000 6                  TRA     s:9573
         6 001046   001146 710000 6                  TRA     s:9573
         6 001047   001146 710000 6                  TRA     s:9573
         6 001050   001146 710000 6                  TRA     s:9573
         6 001051   001146 710000 6                  TRA     s:9573
         6 001052   001146 710000 6                  TRA     s:9573
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:87   
         6 001053   001154 710000 6                  TRA     s:9577
         6 001054   001146 710000 6                  TRA     s:9573
         6 001055   001154 710000 6                  TRA     s:9577
         6 001056   001154 710000 6                  TRA     s:9577
         6 001057   001154 710000 6                  TRA     s:9577
         6 001060   001154 710000 6                  TRA     s:9577
         6 001061   001154 710000 6                  TRA     s:9577
         6 001062   001154 710000 6                  TRA     s:9577
         6 001063   001154 710000 6                  TRA     s:9577
         6 001064   001154 710000 6                  TRA     s:9577
         6 001065   001154 710000 6                  TRA     s:9577
         6 001066   001154 710000 6                  TRA     s:9577
         6 001067   001154 710000 6                  TRA     s:9577
         6 001070   001154 710000 6                  TRA     s:9577
         6 001071   001154 710000 6                  TRA     s:9577
         6 001072   001154 710000 6                  TRA     s:9577
         6 001073   001154 710000 6                  TRA     s:9577
         6 001074   001154 710000 6                  TRA     s:9577
         6 001075   001154 710000 6                  TRA     s:9577
         6 001076   001154 710000 6                  TRA     s:9577
         6 001077   001151 710000 6                  TRA     s:9575
         6 001100   001154 710000 6                  TRA     s:9577
         6 001101   001154 710000 6                  TRA     s:9577
         6 001102   001154 710000 6                  TRA     s:9577
         6 001103   001154 710000 6                  TRA     s:9577
         6 001104   001154 710000 6                  TRA     s:9577
         6 001105   001154 710000 6                  TRA     s:9577
         6 001106   001154 710000 6                  TRA     s:9577
         6 001107   001154 710000 6                  TRA     s:9577
         6 001110   001154 710000 6                  TRA     s:9577
         6 001111   001154 710000 6                  TRA     s:9577
         6 001112   001154 710000 6                  TRA     s:9577
         6 001113   001154 710000 6                  TRA     s:9577
         6 001114   001154 710000 6                  TRA     s:9577
         6 001115   001154 710000 6                  TRA     s:9577
         6 001116   001154 710000 6                  TRA     s:9577
         6 001117   001154 710000 6                  TRA     s:9577
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:88   
         6 001120   001154 710000 6                  TRA     s:9577
         6 001121   001154 710000 6                  TRA     s:9577
         6 001122   001154 710000 6                  TRA     s:9577
         6 001123   001154 710000 6                  TRA     s:9577
         6 001124   001154 710000 6                  TRA     s:9577
         6 001125   001154 710000 6                  TRA     s:9577
         6 001126   001154 710000 6                  TRA     s:9577
         6 001127   001154 710000 6                  TRA     s:9577
         6 001130   001154 710000 6                  TRA     s:9577
         6 001131   001154 710000 6                  TRA     s:9577
         6 001132   001154 710000 6                  TRA     s:9577
         6 001133   001154 710000 6                  TRA     s:9577
         6 001134   001154 710000 6                  TRA     s:9577
         6 001135   001154 710000 6                  TRA     s:9577
         6 001136   001154 710000 6                  TRA     s:9577
         6 001137   001154 710000 6                  TRA     s:9577
         6 001140   001154 710000 6                  TRA     s:9577
         6 001141   001154 710000 6                  TRA     s:9577
         6 001142   001154 710000 6                  TRA     s:9577
         6 001143   001154 710000 6                  TRA     s:9577
         6 001144   001154 710000 6                  TRA     s:9577
         6 001145   001151 710000 6                  TRA     s:9575

      720     9570    3            CASE (%T_EDIT_CMD, %T_WINDOW_CMD,

      721     9571    3             %T_DISPLAY_CMD, %T_COPY_CMD, %T_MOVE_CMD, %T_AFTER_CMD,
      722     9572    3             %T_OVER_CMD, %T_DELETE_CMD, %T_LOCATION_CMD);
      723     9573    3              CMD_CLASS = %EXPL_ED_CMD;

   9573  6 001146   000002 235007                    LDA     2,DL
         6 001147   200026 755100                    STA     CMD_CLASS,,AUTO
         6 001150   001156 710000 6                  TRA     s:9581

      724     9574    3            CASE (%T_BLOCK_EXPR, %T_STRING_EXPR);

      725     9575    3              CMD_CLASS = %IMPL_ED_CMD;

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:89   
   9575  6 001151   000003 235007                    LDA     3,DL
         6 001152   200026 755100                    STA     CMD_CLASS,,AUTO
         6 001153   001156 710000 6                  TRA     s:9581

      726     9576    3            CASE (ELSE);

      727     9577    3              CMD_CLASS = %NON_ED_CMD;

   9577  6 001154   000001 235007                    LDA     1,DL
         6 001155   200026 755100                    STA     CMD_CLASS,,AUTO

      728     9578    3            END;

      729     9579
      730     9580
      731     9581    2           IF CMD_CLASS = %EXPL_ED_CMD OR CMD_CLASS = %IMPL_ED_CMD THEN

   9581  6 001156   000002 115007                    CMPA    2,DL
         6 001157   001162 600000 6                  TZE     EDITING_COMMANDS
         6 001160   000003 115007                    CMPA    3,DL
         6 001161   001306 601000 6                  TNZ     s:9646

      732     9582    3   EDITING_COMMANDS: DO;

   9582  6 001162                       EDITING_COM* null
      733     9583                   /*
      734     9584                   *   For editing commands, if there isn't a current editing window,
      735     9585                   *       create one, after first creating the "real" command
      736     9586                   *       window, if we're using a temporary serial one.
      737     9587                   */
      738     9588    3              IF VD_OLD_$SCREEN > 0 AND VD_$COMMAND.V# = 0 THEN

   9588  6 001162   000000 236000 xsym               LDQ     VD_OLD_$SCREEN
         6 001163   001172 604400 6                  TMOZ    s:9592
         6 001164   000003 235000 xsym               LDA     VD_$COMMAND+3
         6 001165   001172 601000 6                  TNZ     s:9592

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:90   
      739     9589    3                 CALL VDG$SHRINK_COMMAND_WINDOW (VD_$MIN_COMMAND.V#)

   9589  6 001166   000001 630400 7                  EPPR0   1
         6 001167   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 001170   000000 701000 xent               TSX1    VDG$SHRINK_COMMAND_WINDOW
         6 001171   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED

      740     9590    3                   ALTRET (CP_FAILED);
      741     9591
      742     9592    3              CALL EDITING_COMMAND_SEEN (CMD_CLASS)

   9592  6 001172   200026 630500                    EPPR0   CMD_CLASS,,AUTO
         6 001173   200041 450500                    STP0    IT_TEMP$+1,,AUTO
         6 001174   002017 701000 6                  TSX1    EDITING_COMMAND_SEEN
         6 001175   002015 702000 6                  TSX2    OALLOC_FAILED

      743     9593    3                ALTRET (EDITING_COMMAND_SEEN_FAILED);
      744     9594    3              IF IT$COMMAND.CODE# = %T_WINDOW_CMD AND

   9594  6 001176   200025 470500                    LDP0    @IT_COMMAND$,,AUTO
         6 001177   000000 471500                    LDP1    0,,PR0
         6 001200   100003 220100                    LDX0    3,,PR1
         6 001201   001753 100003                    CMPX0   1003,DU
         6 001202   001206 601000 6                  TNZ     s:9598
         6 001203   100004 236100                    LDQ     4,,PR1
         6 001204   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 001205   001306 600000 6                  TZE     s:9646

      745     9595    3                IT$COMMAND.PT_BLOCK_EXPR$ = ADDR(NIL)
      746     9596    3              THEN EXIT EDITING_COMMANDS;
      747     9597
      748     9598    3              CURR_WINDOW$ = VD_CURRENT_WINDOW$->VD$FILE_NODE.DESC.SPEC.V$;

   9598  6 001206   000000 473400 xsym               LDP3    VD_CURRENT_WINDOW$
         6 001207   300007 236100                    LDQ     7,,PR3
         6 001210   200027 756100                    STQ     CURR_WINDOW$,,AUTO

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:91   
      749     9599
      750     9600                   /*
      751     9601                   *  If given a parse-tree for a block expression, convert it into an
      752     9602                   *      InTree.
      753     9603                   *  In any case, the InTree should be moved to the WindowSpec.
      754     9604                   */
      755     9605    4              IF IT$COMMAND.PT_BLOCK_EXPR$ ~= ADDR(NIL) THEN DO;

   9605  6 001211   100004 236100                    LDQ     4,,PR1
         6 001212   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 001213   001227 600000 6                  TZE     s:9611

      756     9606    4                 CALL VDE$PBLOCK_EXPR (IT$COMMAND.PT_BLOCK_EXPR$->BLOCK$EXPR)

   9606  6 001214   100004 474500                    LDP4    4,,PR1
         6 001215   200074 454500                    STP4    WLOC+19,,AUTO
         6 001216   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 001217   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 001220   000000 701000 xent               TSX1    VDE$PBLOCK_EXPR
         6 001221   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED

      757     9607    4                   ALTRET (PBLOCK_EXPR_FAILED);
      758     9608    4                 IT$COMMAND.PT_BLOCK_EXPR$ = ADDR(NIL);

   9608  6 001222   200025 470500                    LDP0    @IT_COMMAND$,,AUTO
         6 001223   000000 471500                    LDP1    0,,PR0
         6 001224   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 001225   100004 756100                    STQ     4,,PR1

      759     9609    4                 END;

   9609  6 001226   001235 710000 6                  TRA     s:9614

      760     9610    4              ELSE DO;

      761     9611    4                 CURR$WINDOW.OPERAND.INTREE$ = IT$COMMAND.PARAM$ (%CP_EDCMD_BLOCK);

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:92   
   9611  6 001227   100006 236100                    LDQ     6,,PR1
         6 001230   200027 474500                    LDP4    CURR_WINDOW$,,AUTO
         6 001231   400011 756100                    STQ     9,,PR4

      762     9612    4                 IT$COMMAND.PARAM$ (%CP_EDCMD_BLOCK) = ADDR(NIL);

   9612  6 001232   000000 471500                    LDP1    0,,PR0
         6 001233   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 001234   100006 756100                    STQ     6,,PR1

      763     9613    4                 END;

      764     9614    3              IT_BLOCK_EXPR$ = CURR$WINDOW.OPERAND.INTREE$;

   9614  6 001235   200027 471500                    LDP1    CURR_WINDOW$,,AUTO
         6 001236   100011 236100                    LDQ     9,,PR1
         6 001237   200030 756100                    STQ     IT_BLOCK_EXPR$,,AUTO

      765     9615
      766     9616    3              IF IT$COMMAND.CODE# = %T_EDIT_CMD

   9616  6 001240   000000 473500                    LDP3    0,,PR0
         6 001241   300003 220100                    LDX0    3,,PR3
         6 001242   001752 100003                    CMPX0   1002,DU
         6 001243   001256 601000 6                  TNZ     s:9629
         6 001244   200030 474500                    LDP4    IT_BLOCK_EXPR$,,AUTO
         6 001245   000000 106500                    CMPC    fill='000'O
         6 001246   400003 000124                    ADSC9   3,,PR4                   cn=0,n=84
         6 001247   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         6 001250   001256 601000 6                  TNZ     s:9629

      767     9617    4                AND IT$BLOCK_EXPR.DOMAINN = %CLEAR THEN DO;

      768     9618                      /*
      769     9619                      *  This doesn't look like a new EditBlock.  But for
      770     9620                      *    the EDIT command, we always force a new EditBlock.
      771     9621                      */
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:93   
      772     9622    4                 CALL NEW_EDIT_BLOCK_IN_OLD_DOMAIN (CURR$WINDOW, IT$BLOCK_EXPR)

   9622  6 001251   200036 756100                    STQ     @CMD_CLASS+1,,AUTO
         6 001252   200027 236100                    LDQ     CURR_WINDOW$,,AUTO
         6 001253   200035 756100                    STQ     SAVE_SCREEN+3,,AUTO
         6 001254   002373 701000 6                  TSX1    NEW_EDIT_BLOCK_IN_OLD_DOMAIN
         6 001255   002015 702000 6                  TSX2    OALLOC_FAILED

      773     9623    4                   ALTRET (NEW_EDIT_BLOCK_IN_OLD_FAILED);
      774     9624    4                 END;

      775     9625
      776     9626                   /*
      777     9627                   *  Except for the COPY and MOVE commands, call VDE$IOPEN.
      778     9628                   */
      779     9629    3              IF IT$COMMAND.CODE# ~= %T_COPY_CMD

   9629  6 001256   200025 470500                    LDP0    @IT_COMMAND$,,AUTO
         6 001257   000000 471500                    LDP1    0,,PR0
         6 001260   100003 220100                    LDX0    3,,PR1
         6 001261   001757 100003                    CMPX0   1007,DU
         6 001262   001306 600000 6                  TZE     s:9646
         6 001263   001760 100003                    CMPX0   1008,DU
         6 001264   001306 600000 6                  TZE     s:9646

      780     9630    4                AND IT$COMMAND.CODE# ~= %T_MOVE_CMD THEN DO;

      781     9631    4                 DELFID_CMD = '0'B;

   9631  6 001265   000000 450000 4                  STZ     DELFID_CMD

      782     9632    4                 IF IT$COMMAND.CODE# = %T_DELETE_CMD

   9632  6 001266   000000 471500                    LDP1    0,,PR0
         6 001267   100003 220100                    LDX0    3,,PR1
         6 001270   001763 100003                    CMPX0   1011,DU
         6 001271   001303 601000 6                  TNZ     s:9636
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:94   
         6 001272   200030 473500                    LDP3    IT_BLOCK_EXPR$,,AUTO
         6 001273   300036 474500                    LDP4    30,,PR3
         6 001274   400005 475500                    LDP5    5,,PR4
         6 001275   500005 476500                    LDP6    5,,PR5
         6 001276   600003 221100                    LDX1    3,,PR6
         6 001277   000001 101003                    CMPX1   1,DU
         6 001300   001303 601000 6                  TNZ     s:9636

      783     9633    4                   AND IT$BLOCK_EXPR.SELECTS_TAIL$ -> IT$SELECT.ADJUSTS_TAIL$ ->
      784     9634    4                   IT$ADJUST.MOVEMENTS_TAIL$ -> IT$OPERAND.CODE# = %OPAND_FILE THEN
      785     9635    4                    DELFID_CMD = '1'B;

   9635  6 001301   400000 236003                    LDQ     -131072,DU
         6 001302   000000 756000 4                  STQ     DELFID_CMD

      786     9636    4                 CALL VDE$IOPEN ALTRET (IOPEN_FAILED);

   9636  6 001303   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 001304   000000 701000 xent               TSX1    VDE$IOPEN
         6 001305   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED

      787     9637    4                 END;

      788     9638
      789     9639    3              END EDITING_COMMANDS;

      790     9640
      791     9641
      792     9642                /*
      793     9643                *   Call the appropriate command processor.
      794     9644                */
      795     9645
      796     9646    3           DO CASE (IT$COMMAND.CODE#);

   9646  6 001306   200025 470500                    LDP0    @IT_COMMAND$,,AUTO
         6 001307   000000 471500                    LDP1    0,,PR0
         6 001310   100003 236100                    LDQ     3,,PR1
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:95   
         6 001311   000022 732000                    QRS     18
         6 001312   001752 136007                    SBLQ    1002,DL
         6 001313   000105 116007                    CMPQ    69,DL
         6 001314   001316 602006 6                  TNC     s:9646+8,QL
         6 001315   001732 710000 6                  TRA     s:9770
         6 001316   001460 710000 6                  TRA     s:9662
         6 001317   001561 710000 6                  TRA     s:9699
         6 001320   001732 710000 6                  TRA     s:9770
         6 001321   001732 710000 6                  TRA     s:9770
         6 001322   001600 710000 6                  TRA     s:9706
         6 001323   001604 710000 6                  TRA     s:9710
         6 001324   001610 710000 6                  TRA     s:9714
         6 001325   001614 710000 6                  TRA     s:9718
         6 001326   001620 710000 6                  TRA     s:9722
         6 001327   001624 710000 6                  TRA     s:9726
         6 001330   001636 710000 6                  TRA     s:9734
         6 001331   001644 710000 6                  TRA     s:9738
         6 001332   001652 710000 6                  TRA     s:9742
         6 001333   001732 710000 6                  TRA     s:9770
         6 001334   001732 710000 6                  TRA     s:9770
         6 001335   001660 710000 6                  TRA     s:9746
         6 001336   001732 710000 6                  TRA     s:9770
         6 001337   001732 710000 6                  TRA     s:9770
         6 001340   001732 710000 6                  TRA     s:9770
         6 001341   001732 710000 6                  TRA     s:9770
         6 001342   001666 710000 6                  TRA     s:9750
         6 001343   001732 710000 6                  TRA     s:9770
         6 001344   001732 710000 6                  TRA     s:9770
         6 001345   001732 710000 6                  TRA     s:9770
         6 001346   001467 710000 6                  TRA     s:9666
         6 001347   001732 710000 6                  TRA     s:9770
         6 001350   001705 710000 6                  TRA     s:9759
         6 001351   001674 710000 6                  TRA     s:9754
         6 001352   001713 710000 6                  TRA     s:9763
         6 001353   001732 710000 6                  TRA     s:9770
         6 001354   001423 710000 6                  TRA     s:9650
         6 001355   001732 710000 6                  TRA     s:9770
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:96   
         6 001356   001732 710000 6                  TRA     s:9770
         6 001357   001732 710000 6                  TRA     s:9770
         6 001360   001732 710000 6                  TRA     s:9770
         6 001361   001732 710000 6                  TRA     s:9770
         6 001362   001732 710000 6                  TRA     s:9770
         6 001363   001732 710000 6                  TRA     s:9770
         6 001364   001732 710000 6                  TRA     s:9770
         6 001365   001732 710000 6                  TRA     s:9770
         6 001366   001732 710000 6                  TRA     s:9770
         6 001367   001732 710000 6                  TRA     s:9770
         6 001370   001732 710000 6                  TRA     s:9770
         6 001371   001732 710000 6                  TRA     s:9770
         6 001372   001732 710000 6                  TRA     s:9770
         6 001373   001732 710000 6                  TRA     s:9770
         6 001374   001732 710000 6                  TRA     s:9770
         6 001375   001732 710000 6                  TRA     s:9770
         6 001376   001732 710000 6                  TRA     s:9770
         6 001377   001732 710000 6                  TRA     s:9770
         6 001400   001732 710000 6                  TRA     s:9770
         6 001401   001732 710000 6                  TRA     s:9770
         6 001402   001732 710000 6                  TRA     s:9770
         6 001403   001732 710000 6                  TRA     s:9770
         6 001404   001732 710000 6                  TRA     s:9770
         6 001405   001732 710000 6                  TRA     s:9770
         6 001406   001732 710000 6                  TRA     s:9770
         6 001407   001732 710000 6                  TRA     s:9770
         6 001410   001732 710000 6                  TRA     s:9770
         6 001411   001732 710000 6                  TRA     s:9770
         6 001412   001732 710000 6                  TRA     s:9770
         6 001413   001732 710000 6                  TRA     s:9770
         6 001414   001732 710000 6                  TRA     s:9770
         6 001415   001732 710000 6                  TRA     s:9770
         6 001416   001732 710000 6                  TRA     s:9770
         6 001417   001732 710000 6                  TRA     s:9770
         6 001420   001732 710000 6                  TRA     s:9770
         6 001421   001732 710000 6                  TRA     s:9770
         6 001422   001423 710000 6                  TRA     s:9650
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:97   

      797     9647
      798     9648    3            CASE (%T_BLOCK_EXPR, %T_STRING_EXPR);

      799     9649                   %INCREMENT (INDX=%STG_BLKEXPR_CMD);

   9650  6 001423   000040 054000 xsym               AOS     VD_6E+32

      800     9652    3              CALL VDE$IRANGE (CURR$WINDOW.OPERAND, SIGNAL)

   9652  6 001424   200031 631500                    EPPR1   SIGNAL,,AUTO
         6 001425   200075 451500                    STP1    WLOC+20,,AUTO
         6 001426   200027 236100                    LDQ     CURR_WINDOW$,,AUTO
         6 001427   000010 036003                    ADLQ    8,DU
         6 001430   200074 756100                    STQ     WLOC+19,,AUTO
         6 001431   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 001432   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 001433   000000 701000 xent               TSX1    VDE$IRANGE
         6 001434   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED

      801     9653    3                ALTRET (IRANGE_FAILED);
      802     9654                   /* Note that SIGNAL says if we found a range or not */
      803     9655    4              IF NOT SIGNAL THEN DO;

   9655  6 001435   200031 234100                    SZN     SIGNAL,,AUTO
         6 001436   001740 604000 6                  TMI     s:9779

      804     9656    4                 CALL VDG$OALLOC (%CLS_ERR, VD_ERR$) ALTRET (OALLOC_FAILED);

   9656  6 001437   200016 630500                    EPPR0   VD_ERR$,,AUTO
         6 001440   200075 450500                    STP0    WLOC+20,,AUTO
         6 001441   000012 236000 7                  LDQ     10
         6 001442   200074 756100                    STQ     WLOC+19,,AUTO
         6 001443   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 001444   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 001445   000000 701000 xent               TSX1    VDG$OALLOC
         6 001446   002015 702000 6                  TSX2    OALLOC_FAILED
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:98   

      805     9657    4                 VD$ERR.ERR.CODE# = %E$INFO_NONE;

   9657  6 001447   200016 470500                    LDP0    VD_ERR$,,AUTO
         6 001450   000002 236100                    LDQ     2,,PR0
         6 001451   000013 376000 7                  ANQ     11
         6 001452   000120 276007                    ORQ     80,DL
         6 001453   000002 756100                    STQ     2,,PR0

      806     9658    4                 VD$ERR.FLAGLEV# = %FLV_WARN;

   9658  6 001454   000002 220003                    LDX0    2,DU
         6 001455   200016 470500                    LDP0    VD_ERR$,,AUTO
         6 001456   000003 740100                    STX0    3,,PR0

      807     9659    4                 END;

   9659  6 001457   001740 710000 6                  TRA     s:9779

      808     9660
      809     9661    3            CASE (%T_EDIT_CMD);

      810     9662    3              CALL VDI$CEDIT

   9662  6 001460   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 001461   000000 701000 xent               TSX1    VDI$CEDIT
         6 001462   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED

      811     9663    3                ALTRET (CP_FAILED);
      812     9664    3              CURR_WINDOW$ = VD_CURRENT_WINDOW$->VD$FILE_NODE.DESC.SPEC.V$;

   9664  6 001463   000000 470400 xsym               LDP0    VD_CURRENT_WINDOW$
         6 001464   000007 236100                    LDQ     7,,PR0
         6 001465   200027 756100                    STQ     CURR_WINDOW$,,AUTO
         6 001466   001740 710000 6                  TRA     s:9779

      813     9665    3            CASE (%T_SHOW_CMD);
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:99   

      814     9666    3              SIGNAL = '0'B;

   9666  6 001467   200031 450100                    STZ     SIGNAL,,AUTO

      815     9667                   /* Parse the block expression first */
      816     9668    3              IF VD_CURRENT_WINDOW$ = ADDR(NIL) THEN

   9668  6 001470   000000 236000 xsym               LDQ     VD_CURRENT_WINDOW$
         6 001471   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 001472   001475 601000 6                  TNZ     s:9670

      817     9669    3                 VD_CURRENT_WINDOW$ = VD_COMMAND_WINDOW$;

   9669  6 001473   000000 236000 xsym               LDQ     VD_COMMAND_WINDOW$
         6 001474   000000 756000 xsym               STQ     VD_CURRENT_WINDOW$

      818     9670    3              CALL VDE$PBLOCK_EXPR (IT$COMMAND.PT_BLOCK_EXPR$->BLOCK$EXPR)

   9670  6 001475   000000 471500                    LDP1    0,,PR0
         6 001476   100004 473500                    LDP3    4,,PR1
         6 001477   200074 453500                    STP3    WLOC+19,,AUTO
         6 001500   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 001501   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 001502   000000 701000 xent               TSX1    VDE$PBLOCK_EXPR
         6 001503   001514 702000 6                  TSX2    SHOW_PBLOCK_EXPR_FAILED

      819     9671    3                ALTRET (SHOW_PBLOCK_EXPR_FAILED);
      820     9672    3              IT$COMMAND.PT_BLOCK_EXPR$ = ADDR(NIL);

   9672  6 001504   200025 470500                    LDP0    @IT_COMMAND$,,AUTO
         6 001505   000000 471500                    LDP1    0,,PR0
         6 001506   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 001507   100004 756100                    STQ     4,,PR1

      821     9673                   /* Now move the InTree to the source Operand, protected */
      822     9674    4              CALL VDI$CCOPY WHENALTRETURN DO;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:100  

   9674  6 001510   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 001511   000000 701000 xent               TSX1    VDI$CCOPY
         6 001512   001514 702000 6                  TSX2    SHOW_PBLOCK_EXPR_FAILED
         6 001513   001516 710000 6                  TRA     s:9677

      823     9675    4   SHOW_PBLOCK_EXPR_FAILED: SIGNAL = %TRUE;

   9675  6 001514   400000 236003       SHOW_PBLOCK* LDQ     -131072,DU
         6 001515   200031 756100                    STQ     SIGNAL,,AUTO

      824     9676    4                 END;

      825     9677    3              IF VD_CURRENT_WINDOW$ = VD_COMMAND_WINDOW$ THEN

   9677  6 001516   000000 236000 xsym               LDQ     VD_CURRENT_WINDOW$
         6 001517   000000 116000 xsym               CMPQ    VD_COMMAND_WINDOW$
         6 001520   001523 601000 6                  TNZ     s:9680

      826     9678    3                 VD_CURRENT_WINDOW$ = ADDR(NIL);

   9678  6 001521   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 001522   000000 756000 xsym               STQ     VD_CURRENT_WINDOW$

      827     9679
      828     9680    3              IF SIGNAL THEN

   9680  6 001523   200031 234100                    SZN     SIGNAL,,AUTO
         6 001524   001775 604000 6                  TMI     PBLOCK_EXPR_FAILED

      829     9681    3                 GOTO CP_FAILED;
      830     9682    3              IF VD_$SCREEN.V# > 0

   9682  6 001525   000003 235000 xsym               LDA     VD_$SCREEN+3
         6 001526   001536 604400 6                  TMOZ    s:9686
         6 001527   000000 235000 xsym               LDA     VD_FORCE_READ_FROM
         6 001530   000002 115007                    CMPA    2,DL
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:101  
         6 001531   001536 600000 6                  TZE     s:9686

      831     9683    3                AND VD_FORCE_READ_FROM ~= %RF_EDITING_WINDOW THEN
      832     9684    3                 CALL VDG$EXPAND_COMMAND_WINDOW (VD_$SCREEN.V#);

   9684  6 001532   000011 630400 7                  EPPR0   9
         6 001533   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 001534   000000 701000 xent               TSX1    VDG$EXPAND_COMMAND_WINDOW
         6 001535   000000 011000                    NOP     0

      833     9685
      834     9686    3              SAVE_SCREEN = VD_$SCREEN.V#;

   9686  6 001536   000003 235000 xsym               LDA     VD_$SCREEN+3
         6 001537   200032 755100                    STA     SAVE_SCREEN,,AUTO

      835     9687    3              VD_$SCREEN.V# = 0;

   9687  6 001540   000003 450000 xsym               STZ     VD_$SCREEN+3

      836     9688    3              CALL VDI$CSHOW

   9688  6 001541   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 001542   000000 701000 xent               TSX1    VDI$CSHOW
         6 001543   001545 702000 6                  TSX2    s:9690
         6 001544   001547 710000 6                  TRA     s:9693

      837     9689    4              WHENALTRETURN DO;

      838     9690    4                 SIGNAL = '1'B;

   9690  6 001545   400000 236003                    LDQ     -131072,DU
         6 001546   200031 756100                    STQ     SIGNAL,,AUTO

      839     9691    4                 END;

      840     9692
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:102  
      841     9693    3              VD_$SCREEN.V# = SAVE_SCREEN;

   9693  6 001547   200032 235100                    LDA     SAVE_SCREEN,,AUTO
         6 001550   000003 755000 xsym               STA     VD_$SCREEN+3

      842     9694
      843     9695    3              IF VD_FORCE_READ_FROM ~= %RF_EDITING_WINDOW THEN

   9695  6 001551   000000 236000 xsym               LDQ     VD_FORCE_READ_FROM
         6 001552   000002 116007                    CMPQ    2,DL
         6 001553   001556 600000 6                  TZE     s:9697

      844     9696    3                 VD_FORCE_READ_FROM = %RF_COMMAND_WINDOW;

   9696  6 001554   000001 235007                    LDA     1,DL
         6 001555   000000 755000 xsym               STA     VD_FORCE_READ_FROM

      845     9697    3              IF SIGNAL THEN GOTO CP_FAILED;

   9697  6 001556   200031 234100                    SZN     SIGNAL,,AUTO
         6 001557   001775 604000 6                  TMI     PBLOCK_EXPR_FAILED
         6 001560   001740 710000 6                  TRA     s:9779

      846     9698    3            CASE (%T_WINDOW_CMD);

      847     9699    3              IF VD_CURRENT_WINDOW$ = ADDR(NIL) THEN EXIT;

   9699  6 001561   000000 236000 xsym               LDQ     VD_CURRENT_WINDOW$
         6 001562   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 001563   001740 600000 6                  TZE     s:9779

      848     9700    3              IF VD_CURRENT_WINDOW$ -> VD$FILE_NODE.DESC.SPEC.V$ ->

   9700  6 001564   000000 473400 xsym               LDP3    VD_CURRENT_WINDOW$
         6 001565   300007 474500                    LDP4    7,,PR3
         6 001566   400011 236100                    LDQ     9,,PR4
         6 001567   000001 116000 xsym               CMPQ    B_VECTNIL+1
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:103  
         6 001570   001574 600000 6                  TZE     s:9703

      849     9701    3                CURR$WINDOW.OPERAND.INTREE$ ~= ADDR(NIL) THEN
      850     9702    3                 CALL VDI$CEDIT ALTRET (CP_FAILED);

   9702  6 001571   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 001572   000000 701000 xent               TSX1    VDI$CEDIT
         6 001573   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED

      851     9703    3              CURR_WINDOW$ = VD_CURRENT_WINDOW$->VD$FILE_NODE.DESC.SPEC.V$;

   9703  6 001574   000000 470400 xsym               LDP0    VD_CURRENT_WINDOW$
         6 001575   000007 236100                    LDQ     7,,PR0
         6 001576   200027 756100                    STQ     CURR_WINDOW$,,AUTO
         6 001577   001740 710000 6                  TRA     s:9779

      852     9704
      853     9705    3            CASE (%T_DISPLAY_CMD);

      854     9706    3              CALL VDI$CDISPLAY

   9706  6 001600   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 001601   000000 701000 xent               TSX1    VDI$CDISPLAY
         6 001602   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED
         6 001603   001740 710000 6                  TRA     s:9779

      855     9707    3                ALTRET (CP_FAILED);
      856     9708
      857     9709    3            CASE (%T_COPY_CMD);

      858     9710    3              CALL VDI$CCOPY

   9710  6 001604   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 001605   000000 701000 xent               TSX1    VDI$CCOPY
         6 001606   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED
         6 001607   001740 710000 6                  TRA     s:9779

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:104  
      859     9711    3                ALTRET (CP_FAILED);
      860     9712
      861     9713    3            CASE (%T_MOVE_CMD);

      862     9714    3              CALL VDI$CMOVE

   9714  6 001610   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 001611   000000 701000 xent               TSX1    VDI$CMOVE
         6 001612   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED
         6 001613   001740 710000 6                  TRA     s:9779

      863     9715    3                ALTRET (CP_FAILED);
      864     9716
      865     9717    3            CASE (%T_AFTER_CMD);

      866     9718    3              CALL VDI$CAFTER

   9718  6 001614   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 001615   000000 701000 xent               TSX1    VDI$CAFTER
         6 001616   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED
         6 001617   001740 710000 6                  TRA     s:9779

      867     9719    3                ALTRET (CP_FAILED);
      868     9720
      869     9721    3            CASE (%T_OVER_CMD);

      870     9722    3              CALL VDI$COVER

   9722  6 001620   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 001621   000000 701000 xent               TSX1    VDI$COVER
         6 001622   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED
         6 001623   001740 710000 6                  TRA     s:9779

      871     9723    3                ALTRET (CP_FAILED);
      872     9724
      873     9725    3            CASE (%T_DELETE_CMD);

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:105  
      874     9726    3              IF NOT DELFID_CMD THEN

   9726  6 001624   000000 235000 4                  LDA     DELFID_CMD
         6 001625   001632 601000 6                  TNZ     s:9730

      875     9727    3                 CALL VDI$CDELETE

   9727  6 001626   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 001627   000000 701000 xent               TSX1    VDI$CDELETE
         6 001630   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED
         6 001631   001740 710000 6                  TRA     s:9779

      876     9728    3                   ALTRET (CP_FAILED);
      877     9729    3              ELSE
      878     9730    3                 CALL VDI$CDELETE_FID

   9730  6 001632   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 001633   000000 701000 xent               TSX1    VDI$CDELETE_FID
         6 001634   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED
         6 001635   001740 710000 6                  TRA     s:9779

      879     9731    3                   ALTRET (CP_FAILED);
      880     9732
      881     9733    3            CASE (%T_EQUALS_CMD);

      882     9734    3              CALL VDI$CEQUALS (IT$COMMAND)

   9734  6 001636   200074 451500                    STP1    WLOC+19,,AUTO
         6 001637   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 001640   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 001641   000000 701000 xent               TSX1    VDI$CEQUALS
         6 001642   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED
         6 001643   001740 710000 6                  TRA     s:9779

      883     9735    3                ALTRET (CP_FAILED);
      884     9736
      885     9737    3            CASE (%T_LOCATION_CMD);
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:106  

      886     9738    3              CALL VDI$CLOCATION (IT$COMMAND)

   9738  6 001644   200074 451500                    STP1    WLOC+19,,AUTO
         6 001645   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 001646   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 001647   000000 701000 xent               TSX1    VDI$CLOCATION
         6 001650   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED
         6 001651   001740 710000 6                  TRA     s:9779

      887     9739    3                ALTRET (CP_FAILED);
      888     9740
      889     9741    3            CASE (%T_SYNONYM_CMD);

      890     9742    3              CALL VDI$CSYNONYM (IT$COMMAND)

   9742  6 001652   200074 451500                    STP1    WLOC+19,,AUTO
         6 001653   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 001654   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 001655   000000 701000 xent               TSX1    VDI$CSYNONYM
         6 001656   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED
         6 001657   001740 710000 6                  TRA     s:9779

      891     9743    3                ALTRET (CP_FAILED);
      892     9744
      893     9745    3            CASE (%T_KEYIN_CMD);

      894     9746    3              CALL VDI$CKEYIN (IT$COMMAND)

   9746  6 001660   200074 451500                    STP1    WLOC+19,,AUTO
         6 001661   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 001662   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 001663   000000 701000 xent               TSX1    VDI$CKEYIN
         6 001664   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED
         6 001665   001740 710000 6                  TRA     s:9779

      895     9747    3                ALTRET (CP_FAILED);
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:107  
      896     9748
      897     9749    3            CASE (%T_SAVE_CMD);

      898     9750    3              CALL VDI$CSAVE (IT$COMMAND)

   9750  6 001666   200074 451500                    STP1    WLOC+19,,AUTO
         6 001667   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 001670   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 001671   000000 701000 xent               TSX1    VDI$CSAVE
         6 001672   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED
         6 001673   001740 710000 6                  TRA     s:9779

      899     9751    3                ALTRET (CP_FAILED);
      900     9752
      901     9753    3            CASE (%T_READ_CMD);

      902     9754    3              CALL VDI$CREAD (IT$COMMAND)

   9754  6 001674   200074 451500                    STP1    WLOC+19,,AUTO
         6 001675   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 001676   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 001677   000000 701000 xent               TSX1    VDI$CREAD
         6 001700   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED

      903     9755    3                ALTRET (CP_FAILED);
      904     9756                   /* Force no more processing of this record for now */
      905     9757    3              IT_COMMAND$ = ADDR(NIL);

   9757  6 001701   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 001702   200025 470500                    LDP0    @IT_COMMAND$,,AUTO
         6 001703   000000 756100                    STQ     0,,PR0
         6 001704   001740 710000 6                  TRA     s:9779

      906     9758    3            CASE (%T_RESTORE_CMD);

      907     9759    3              CALL VDI$CRESTORE (IT$COMMAND)

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:108  
   9759  6 001705   200074 451500                    STP1    WLOC+19,,AUTO
         6 001706   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 001707   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 001710   000000 701000 xent               TSX1    VDI$CRESTORE
         6 001711   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED
         6 001712   001740 710000 6                  TRA     s:9779

      908     9760    3                ALTRET (CP_FAILED);
      909     9761
      910     9762    3            CASE (%T_END_CMD);

      911     9763    3              IF IT$COMMAND.FLINK$ ~= ADDR(NIL)

   9763  6 001713   100002 236100                    LDQ     2,,PR1
         6 001714   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 001715   001755 601000 6                  TNZ     END_NOT_LAST_FAILURE
         6 001716   200011 473500                    LDP3    COMMAND_LINE$,,AUTO
         6 001717   300001 236100                    LDQ     1,,PR3
         6 001720   000022 772000                    QRL     18
         6 001721   200012 116100                    CMPQ    CL_INDEX,,AUTO
         6 001722   001724 600000 6                  TZE     s:9766
         6 001723   001755 603000 6                  TRC     END_NOT_LAST_FAILURE

      912     9764    3                OR CL_INDEX<COMMAND$LINE.NSUBLKS THEN
      913     9765    3                 GOTO END_NOT_LAST_FAILURE;
      914     9766    3              CALL VDI$CEND (IT$COMMAND)

   9766  6 001724   200074 451500                    STP1    WLOC+19,,AUTO
         6 001725   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 001726   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 001727   000000 701000 xent               TSX1    VDI$CEND
         6 001730   001775 702000 6                  TSX2    PBLOCK_EXPR_FAILED
         6 001731   001740 710000 6                  TRA     s:9779

      915     9767    3                ALTRET (CP_FAILED);
      916     9768
      917     9769    3            CASE (ELSE);
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:109  

      918     9770    3              CALL VDG$ESCREECH (IT$COMMAND.CODE#);

   9770  6 001732   100003 633500                    EPPR3   3,,PR1
         6 001733   200074 453500                    STP3    WLOC+19,,AUTO
         6 001734   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 001735   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 001736   000000 701000 xent               TSX1    VDG$ESCREECH
         6 001737   000000 011000                    NOP     0

      919     9771
      920     9772    3            END;

      921     9773
      922     9774                /*
      923     9775                *   Discard all the evaluation stack except the top entry.
      924     9776                *   Discard the InTree.
      925     9777                */
      926     9778
      927     9779    2           CALL CLEAN_UP_AFTER_COMMAND (CMD_CLASS)

   9779  6 001740   200026 630500                    EPPR0   CMD_CLASS,,AUTO
         6 001741   200035 450500                    STP0    SAVE_SCREEN+3,,AUTO
         6 001742   002576 701000 6                  TSX1    CLEAN_UP_AFTER_COMMAND
         6 001743   002015 702000 6                  TSX2    OALLOC_FAILED

      928     9780    2             ALTRET (CLEAN_UP_AFTER_COMMAND_FAILED);
      929     9781
      930     9782    2           IF IT_COMMAND$ ~= ADDR(NIL) THEN

   9782  6 001744   200025 470500                    LDP0    @IT_COMMAND$,,AUTO
         6 001745   000000 236100                    LDQ     0,,PR0
         6 001746   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 001747   001753 600000 6                  TZE     s:9785

      931     9783    2              IT_COMMAND$ = IT$COMMAND.FLINK$;

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:110  
   9783  6 001750   000000 471500                    LDP1    0,,PR0
         6 001751   100002 236100                    LDQ     2,,PR1
         6 001752   000000 756100                    STQ     0,,PR0

      932     9784
      933     9785    2           RETURN;

   9785  6 001753   200024 221300                    LDX1  ! SINK$+1,,AUTO
         6 001754   000001 702211                    TSX2  ! 1,X1

      934     9786
      935     9787
      936     9788                %BOX (TITLE="Error Handlers");

              9800    2   /***************************************************************************
              9802    2    *                                                                         *
              9806    2            *                               Error Handlers                           *
              9808    2            *                                                                        *
              9810    2          ***************************************************************************/

      937     9814
      938     9815    2   END_NOT_LAST_FAILURE:
      939     9816    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   9816  6 001755   200016 633500       END_NOT_LAS* EPPR3   VD_ERR$,,AUTO
         6 001756   200075 453500                    STP3    WLOC+20,,AUTO
         6 001757   000012 236000 7                  LDQ     10
         6 001760   200074 756100                    STQ     WLOC+19,,AUTO
         6 001761   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 001762   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 001763   000000 701000 xent               TSX1    VDG$OALLOC
         6 001764   002015 702000 6                  TSX2    OALLOC_FAILED

      940     9817    2             ALTRET (OALLOC_FAILED);
      941     9818    2           VD$ERR.ERR.CODE# = %E$END_NOT_LAST_CMD;

   9818  6 001765   200016 470500                    LDP0    VD_ERR$,,AUTO
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:111  
         6 001766   000002 236100                    LDQ     2,,PR0
         6 001767   000013 376000 7                  ANQ     11
         6 001770   001460 276007                    ORQ     816,DL
         6 001771   000002 756100                    STQ     2,,PR0

      942     9819    2           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   9819  6 001772   000003 220003                    LDX0    3,DU
         6 001773   200016 470500                    LDP0    VD_ERR$,,AUTO
         6 001774   000003 740100                    STX0    3,,PR0

   9819  6 001775                       PBLOCK_EXPR* null
   9819  6 001775                       OCOPY_RANGE* null
   9819  6 001775                       IOPEN_FAILED null
   9819  6 001775                       IRANGE_FAIL* null
   9819  6 001775                       CP_FAILED    null
      943     9820
      944     9821
      945     9822    2   PBLOCK_EXPR_FAILED: ;
      946     9823    2   OCOPY_RANGE_FAILED: ;
      947     9824    2   IOPEN_FAILED: ;
      948     9825    2   IRANGE_FAILED: ;
      949     9826    2   CP_FAILED: ;
      950     9827    2           IF VD_6E.ERR_TAIL$->VD$ERR.CMDLINE_INDEX# = 0 THEN

   9827  6 001775   000032 470400 xsym               LDP0    VD_6E+26
         6 001776   000003 720100                    LXL0    3,,PR0
         6 001777   002004 601000 6                  TNZ     s:9829

      951     9828    2              VD_6E.ERR_TAIL$->VD$ERR.CMDLINE_INDEX# = IT$COMMAND.CMDLINE_INDEX#;

   9828  6 002000   200025 471500                    LDP1    @IT_COMMAND$,,AUTO
         6 002001   100000 473500                    LDP3    0,,PR1
         6 002002   300003 721100                    LXL1    3,,PR3
         6 002003   000003 441100                    SXL1    3,,PR0

      952     9829    2           IF FATAL$ERR.ERR = %CLEAR THEN
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:112  

   9829  6 002004   000031 470400 xsym               LDP0    VD_6E+25
         6 002005   000002 235100                    LDA     2,,PR0
         6 002006   002013 601000 6                  TNZ     s:9832

      953     9830    2              CALL CLEAN_UP_AFTER_COMMAND (CMD_CLASS)

   9830  6 002007   200026 631500                    EPPR1   CMD_CLASS,,AUTO
         6 002010   200035 451500                    STP1    SAVE_SCREEN+3,,AUTO
         6 002011   002576 701000 6                  TSX1    CLEAN_UP_AFTER_COMMAND
         6 002012   002015 702000 6                  TSX2    OALLOC_FAILED

      954     9831    2                ALTRET (CLEAN_UP_AFTER_COMMAND_FAILED);
      955     9832    2           ALTRETURN;

   9832  6 002013   200024 221300                    LDX1  ! SINK$+1,,AUTO
         6 002014   000000 702211                    TSX2  ! 0,X1

   9829  6 002015                       OALLOC_FAIL* null
   9829  6 002015                       EDITING_COM* null
   9829  6 002015                       NEW_EDIT_BL* null
   9829  6 002015                       CLEAN_UP_AF* null
      956     9833
      957     9834
      958     9835    2   OALLOC_FAILED: ;
      959     9836    2   EDITING_COMMAND_SEEN_FAILED: ;
      960     9837    2   NEW_EDIT_BLOCK_IN_OLD_FAILED: ;
      961     9838    2   CLEAN_UP_AFTER_COMMAND_FAILED: ;
      962     9839    2           ALTRETURN;

   9839  6 002015   200024 221300                    LDX1  ! SINK$+1,,AUTO
         6 002016   000000 702211                    TSX2  ! 0,X1

      963     9840
      964     9841    2   END PROCESS_COMMAND;
      965     9842
      966     9843        %BOX (TITLE=EDITING_COMMAND_SEEN, PAGE=YES);
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:113  
              9851    2
              9855    2   /***************************************************************************
              9857    2    *                                                                         *
              9861    2            *                            EDITING_COMMAND_SEEN                        *
              9863    2            *                                                                        *
              9865    2          ***************************************************************************/

      967     9869
      968     9870        /*I* NAME: EDITING_COMMAND_SEEN
      969     9871            PARAMETERS:
      970     9872                CMD_CLASS is a word; it must be %EXPL_ED_CMD or %IMPL_ED_CMD.
      971     9873            INPUT:
      972     9874                VD_CURRENT_WINDOW$ must either be NIL, or point to the FileNode at
      973     9875                    level 1 of the Windows file, for the current editing window.
      974     9876                    NOTE that even if there is such a window currently, it may not
      975     9877                    be editing anything (as a result of an error), and its
      976     9878                    stream may be closed.
      977     9879                    May or may not have an .OPERAND.EVAL$ currently.
      978     9880            OUTPUT:
      979     9881                VD_CURRENT_WINDOW$ - If NIL at entry, will point to the VD$FILE_NODE
      980     9882                    at level 1 of the Windows file for a newly-created editing
      981     9883                    window, which isn't editing anything.
      982     9884                The current editing window's .OPERAND.EVAL$ will point to a
      983     9885                    single VD$EVAL; the rest of the stack will be freed.
      984     9886                    .CTRL_REC_MATCHED_EOF will be reset.
      985     9887                    (If at entry there was no evaluation stack, nothing will
      986     9888                    be done with it, and .OPERAND.EVAL$ will still be NIL.)
      987     9889                The current editing window's .OPERAND.INTREE$ will be NIL.
      988     9890                If this is an explicit editing command, the evaluation state
      989     9891                    (VD$EVAL.STATE#) will be set to %EVST_INITIAL.
      990     9892            DESCRIPTION:
      991     9893                If there are no editing windows yet (VD_CURRENT_WINDOW$ is NIL),
      992     9894                    create the first editing window; it starts out editing nothing.
      993     9895        *N*         Following paragraph de-implemented due to star 25801; instead,
      994     9896        *N*         just set the VD_2DIM flag but don't muck with command window:
      995     9897        *N*         If VD_$SCREEN says we can screen-edit, then check VD_2DIM:  it
      996     9898        *N*         probably indicates we're not screen editing yet (since this is
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:114  
      997     9899        *N*         the first editing window), so set it (to tell the Presenter
      998     9900        *N*         to (re-)open windows in 2-dimensional mode) and "change" the
      999     9901        *N*         height of the command window (which should be the only window
     1000     9902        *N*         currently) to VD_$SCREEN.V#.
     1001     9903                Both before and after processing an editing command, we must
     1002     9904                initialize the window's VD$OPERAND for evaluation of this
     1003     9905                command's block expression and for that of the next command.
     1004     9906        */
     1005     9907
     1006     9908    1   EDITING_COMMAND_SEEN: PROC (CMD_CLASS) ALTRET;

   9908  6 002017   200040 741300       EDITING_COM* STX1  ! EDIT_BLOCK$+1,,AUTO

     1007     9909
     1008     9910    2   DCL CMD_CLASS SBIN;
     1009     9911
     1010     9912
     1011     9913
     1012     9914        /*
     1013     9915        *   Locations in the Windows file for the first editing window.
     1014     9916        */
     1015     9917        %VD_LOCATION (NAME=FIRST_ED_WIN_LOC, STCLASS=CONSTANT, INITS=1,
     1016     9918            ITYPE1=%KT_NUMBER, IREP1=%REP_LOCAL, IBYTES1=%WK_1ST_EDITING_WINDOW);
     1017     9993        %VD_LOCATION (NAME=FIRST_ED_WIN_BLOCK_LOC, STCLASS=CONSTANT, INITS=2,
     1018     9994            ITYPE1=%KT_NUMBER, IREP1=%REP_LOCAL, IBYTES1=%WK_1ST_EDITING_WINDOW,
     1019     9995            ITYPE2=%KT_NUMBER, IREP2=%REP_LOCAL, IBYTES2=0);    /* Key at level 2 */
     1020    10105
     1021    10106
     1022    10107
     1023    10108    2   DCL WINDOW_SPEC$ PTR;
     1024    10109    2   DCL NODE$ PTR;
     1025    10110    2   DCL COUNT SBIN;
     1026    10111    2   DCL COUNT_PTR$ REDEF COUNT PTR;
     1027    10112    2   DCL FREE_EVAL$ PTR;
     1028    10113    2   DCL NEXT_EVAL$ PTR;
     1029    10114        %VD$SPEC (NAME=WSPEC, STCLASS=AUTO);
     1030    10128        %VD$RANGE (NAME=WLOC, STCLASS=AUTO);
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:115  
     1031    10197
     1032    10198
     1033    10199        %VD$WINDOW_SPEC (NAME=WINDOW$SPEC, STCLASS="BASED(WINDOW_SPEC$)");
     1034    10265        %VD$EVAL (NAME=FREE$EVAL, STCLASS="BASED(FREE_EVAL$)");
     1035    10510
     1036    10511
     1037    10512
     1038    10513    2           IF VD_CURRENT_WINDOW$ = ADDR(NIL)

  10513  6 002020   000000 236000 xsym               LDQ     VD_CURRENT_WINDOW$
         6 002021   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002022   002027 600000 6                  TZE     CREATE_FIRST_ED_WINDOW
         6 002023   200007 470500                    LDP0    IT_COMMAND$,,AUTO
         6 002024   000003 220100                    LDX0    3,,PR0
         6 002025   001753 100003                    CMPX0   1003,DU
         6 002026   002267 601000 6                  TNZ     s:10588

     1039    10514    2             OR IT$COMMAND.CODE# = %T_WINDOW_CMD THEN
     1040    10515    3   CREATE_FIRST_ED_WINDOW: DO;

  10515  6 002027                       CREATE_FIRS* null
     1041    10516                   /*
     1042    10517                   *  Create the first editing window.
     1043    10518                   */
     1044    10519    3              CALL VDG$OALLOC (%CLS_WINDOW_SPEC, WSPEC.V$)

  10519  6 002027   200050 630500                    EPPR0   WSPEC+1,,AUTO
         6 002030   200075 450500                    STP0    WLOC+20,,AUTO
         6 002031   000024 236000 7                  LDQ     20
         6 002032   200074 756100                    STQ     WLOC+19,,AUTO
         6 002033   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 002034   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 002035   000000 701000 xent               TSX1    VDG$OALLOC
         6 002036   002371 702000 6                  TSX2    EXPAND_COMMAND_WINDOW_FAILED

     1045    10520    3                ALTRET (OALLOC_FAILED);
     1046    10521    3              WSPEC.V$ -> WINDOW$SPEC.COORDS.HEIGHT# = VD_EDITING_HEIGHT;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:116  

  10521  6 002037   200050 470500                    LDP0    WSPEC+1,,AUTO
         6 002040   000000 235000 xsym               LDA     VD_EDITING_HEIGHT
         6 002041   000005 755100                    STA     5,,PR0

     1047    10522    3              WLOC.START = FIRST_ED_WIN_LOC;

  10522  6 002042   000100 100400                    MLR     fill='000'O
         6 002043   000000 000044 5                  ADSC9   FIRST_ED_WIN_LOC         cn=0,n=36
         6 002044   200051 000044                    ADSC9   WLOC,,AUTO               cn=0,n=36

     1048    10523    3              WLOC.ENDD = FIRST_ED_WIN_BLOCK_LOC;

  10523  6 002045   000100 100400                    MLR     fill='000'O
         6 002046   000011 000044 5                  ADSC9   FIRST_ED_WIN_BLOCK_LOC   cn=0,n=36
         6 002047   200062 000044                    ADSC9   WLOC+9,,AUTO             cn=0,n=36

     1049    10524    3              ADDR(WLOC.START)->VD$KEY_NUMBER.BYTES# = VD_EDITING_WINDOWS;

  10524  6 002050   000000 236000 xsym               LDQ     VD_EDITING_WINDOWS
         6 002051   200052 552134                    STBQ    WLOC+1,'34'O,AUTO

     1050    10525    4              IF IT$COMMAND.CODE# = %T_WINDOW_CMD THEN DO;

  10525  6 002052   200007 470500                    LDP0    IT_COMMAND$,,AUTO
         6 002053   000003 220100                    LDX0    3,,PR0
         6 002054   001753 100003                    CMPX0   1003,DU
         6 002055   002207 601000 6                  TNZ     s:10570

     1051    10526    4                 IF IT$COMMAND.PARAM$(%CP_WI_LINES) ~= ADDR(NIL) THEN

  10526  6 002056   000007 236100                    LDQ     7,,PR0
         6 002057   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002060   002065 600000 6                  TZE     s:10529

     1052    10527    4                    WSPEC.V$ -> WINDOW$SPEC.COORDS.HEIGHT# =

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:117  
  10527  6 002061   000007 471500                    LDP1    7,,PR0
         6 002062   200050 473500                    LDP3    WSPEC+1,,AUTO
         6 002063   100003 235100                    LDA     3,,PR1
         6 002064   300005 755100                    STA     5,,PR3

     1053    10528    4                      IT$COMMAND.PARAM$(%CP_WI_LINES)->VD$NUMBER.V#;
     1054    10529    4                 IF IT$COMMAND.FLAGS(%CF_WI_NEW) OR

  10529  6 002065   200007 470500                    LDP0    IT_COMMAND$,,AUTO
         6 002066   000005 236100                    LDQ     5,,PR0
         6 002067   200000 316003                    CANQ    65536,DU
         6 002070   002207 601000 6                  TNZ     s:10570
         6 002071   000000 236000 xsym               LDQ     VD_CURRENT_WINDOW$
         6 002072   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002073   002207 600000 6                  TZE     s:10570

     1055    10530    4                   VD_CURRENT_WINDOW$ = ADDR(NIL) THEN EXIT;
     1056    10531    4                 WLOC.START.KEY.V$(0) =

  10531  6 002074   000000 471400 xsym               LDP1    VD_CURRENT_WINDOW$
         6 002075   100005 236100                    LDQ     5,,PR1
         6 002076   200052 756100                    STQ     WLOC+1,,AUTO

     1057    10532    4                   VD_CURRENT_WINDOW$->VD$FILE_NODE.DESC.KEY.V$;
     1058    10533    4                 IF IT$COMMAND.PARAM$(%CP_WI_NUM) ~= ADDR(NIL) THEN

  10533  6 002077   000010 236100                    LDQ     8,,PR0
         6 002100   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002101   002105 600000 6                  TZE     s:10536

     1059    10534    4                    ADDR(WLOC.START)->VD$KEY_NUMBER.BYTES# =

  10534  6 002102   000010 473500                    LDP3    8,,PR0
         6 002103   300003 236100                    LDQ     3,,PR3
         6 002104   200052 552134                    STBQ    WLOC+1,'34'O,AUTO

     1060    10535    4                      IT$COMMAND.PARAM$(%CP_WI_NUM) -> VD$NUMBER.V#;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:118  
     1061    10536    4                 WLOC.ENDD.KEY(0) = WLOC.START.KEY(0);

  10536  6 002105   000100 100500                    MLR     fill='000'O
         6 002106   200051 000010                    ADSC9   WLOC,,AUTO               cn=0,n=8
         6 002107   200062 000010                    ADSC9   WLOC+9,,AUTO             cn=0,n=8

     1062    10537    5                 IF IT$COMMAND.FLAGS(%CF_WI_DELETE) THEN DO;

  10537  6 002110   000005 234100                    SZN     5,,PR0
         6 002111   002156 605000 6                  TPL     s:10557

     1063    10538    5                    CALL VDA$LDELETE (WINDOWS$STREAM, WLOC)

  10538  6 002112   200051 633500                    EPPR3   WLOC,,AUTO
         6 002113   200075 453500                    STP3    WLOC+20,,AUTO
         6 002114   000006 236000 xsym               LDQ     VD_6E+6
         6 002115   200074 756100                    STQ     WLOC+19,,AUTO
         6 002116   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 002117   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 002120   000000 701000 xent               TSX1    VDA$LDELETE
         6 002121   002347 702000 6                  TSX2    ED_WINDOW_WRITE_FAILED

     1064    10539    5                      ALTRET (LDELETE_FAILED);
     1065    10540    6                    IF VD_COMMAND_WINDOW$ ~= ADDR(NIL) THEN DO;

  10540  6 002122   000000 236000 xsym               LDQ     VD_COMMAND_WINDOW$
         6 002123   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002124   002150 600000 6                  TZE     s:10554

     1066    10541        /* Adjust window numbers to insure they're contiguous */
     1067    10542    6                       NODE$ = VD_COMMAND_WINDOW$;

  10542  6 002125   200043 756100                    STQ     NODE$,,AUTO

     1068    10543    6                       COUNT_PTR$ = NODE$ -> VD$FILE_NODE.DESC.KEY.V$;

  10543  6 002126   200043 470500                    LDP0    NODE$,,AUTO
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:119  
         6 002127   000005 236100                    LDQ     5,,PR0
         6 002130   200044 756100                    STQ     COUNT,,AUTO

     1069    10544    7                       DO UNTIL NODE$ = ADDR(NIL);

     1070    10545    7                          NODE$ -> VD$FILE_NODE.DESC.KEY.V$ = COUNT_PTR$;

  10545  6 002131   200044 236100                    LDQ     COUNT,,AUTO
         6 002132   200043 470500                    LDP0    NODE$,,AUTO
         6 002133   000005 756100                    STQ     5,,PR0

     1071    10546    7                          IF NODE$ = WINDOWS$STREAM.PORT$ ->

  10546  6 002134   000006 471400 xsym               LDP1    VD_6E+6
         6 002135   100001 473500                    LDP3    1,,PR1
         6 002136   200043 236100                    LDQ     NODE$,,AUTO
         6 002137   300040 116100                    CMPQ    32,,PR3
         6 002140   002143 601000 6                  TNZ     s:10550

     1072    10547    7                            VD$PORT.LEVEL.INTERNAL$ (%LVL_LOWER) THEN
     1073    10548    7                             WINDOWS$STREAM.PORT$ ->

  10548  6 002141   200044 236100                    LDQ     COUNT,,AUTO
         6 002142   300013 756100                    STQ     11,,PR3

     1074    10549    7                               VD$PORT.CURRENT.KEY.V$ (0) = COUNT_PTR$;
     1075    10550    7                          NODE$ = NODE$ -> VD$FILE_NODE.FLINK$;

  10550  6 002143   000002 236100                    LDQ     2,,PR0
         6 002144   200043 756100                    STQ     NODE$,,AUTO

     1076    10551    7                          COUNT = COUNT + 1;

  10551  6 002145   200044 054100                    AOS     COUNT,,AUTO

     1077    10552    7                          END;

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:120  
  10552  6 002146   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002147   002131 601000 6                  TNZ     s:10545

     1078    10553    6                       END;

     1079    10554    5                    CALL VDG$OFREE (WSPEC.V$ -> WINDOW$SPEC) ALTRET(OFREE_FAILED);

  10554  6 002150   200050 630500                    EPPR0   WSPEC+1,,AUTO
         6 002151   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 002152   000000 701000 xent               TSX1    VDG$OFREE
         6 002153   002371 702000 6                  TSX2    EXPAND_COMMAND_WINDOW_FAILED

     1080    10555    5                    RETURN;

  10555  6 002154   200040 221300                    LDX1  ! EDIT_BLOCK$+1,,AUTO
         6 002155   000001 702211                    TSX2  ! 1,X1

     1081    10556    5                    END;
     1082    10557    5                 ELSE IF IT$COMMAND.PARAM$(%CP_WI_LINES) = ADDR(NIL) THEN DO;

  10557  6 002156   000007 236100                    LDQ     7,,PR0
         6 002157   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002160   002207 601000 6                  TNZ     s:10570

     1083    10558    5                       CALL VDG$OFREE (WSPEC.V$ -> WINDOW$SPEC) ALTRET (OFREE_FAILED);

  10558  6 002161   200050 630500                    EPPR0   WSPEC+1,,AUTO
         6 002162   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 002163   000000 701000 xent               TSX1    VDG$OFREE
         6 002164   002371 702000 6                  TSX2    EXPAND_COMMAND_WINDOW_FAILED

     1084    10559    6                       DO WHILE WLOC.START.KEY.V$(0) ~=

  10559  6 002165   000000 470400 xsym               LDP0    VD_CURRENT_WINDOW$
         6 002166   200052 236100                    LDQ     WLOC+1,,AUTO
         6 002167   000005 116100                    CMPQ    5,,PR0
         6 002170   002206 600000 6                  TZE     s:10567
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:121  

     1085    10560    6                         VD_CURRENT_WINDOW$->VD$FILE_NODE.DESC.KEY.V$;
     1086    10561    6                          IF VD_CURRENT_WINDOW$->VD$FILE_NODE.FLINK$ ~= ADDR(NIL)

  10561  6 002171   000000 470400 xsym               LDP0    VD_CURRENT_WINDOW$
         6 002172   000002 236100                    LDQ     2,,PR0
         6 002173   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002174   002177 600000 6                  TZE     s:10564

     1087    10562    6                          THEN VD_CURRENT_WINDOW$ =

  10562  6 002175   000000 756000 xsym               STQ     VD_CURRENT_WINDOW$
         6 002176   002202 710000 6                  TRA     s:10566

     1088    10563    6                               VD_CURRENT_WINDOW$->VD$FILE_NODE.FLINK$;
     1089    10564    6                          ELSE VD_CURRENT_WINDOW$ =

  10564  6 002177   000000 471400 xsym               LDP1    VD_COMMAND_WINDOW$
         6 002200   100002 236100                    LDQ     2,,PR1
         6 002201   000000 756000 xsym               STQ     VD_CURRENT_WINDOW$

     1090    10565    6                               VD_COMMAND_WINDOW$->VD$FILE_NODE.FLINK$;
     1091    10566    6                          END;

  10566  6 002202   000000 470400 xsym               LDP0    VD_CURRENT_WINDOW$
         6 002203   200052 236100                    LDQ     WLOC+1,,AUTO
         6 002204   000005 116100                    CMPQ    5,,PR0
         6 002205   002171 601000 6                  TNZ     s:10561

     1092    10567    5                       EXIT CREATE_FIRST_ED_WINDOW;

  10567  6 002206   002267 710000 6                  TRA     s:10588

     1093    10568    5                       END;
     1094    10569    4                 END;
     1095    10570    3              WLOC.ENDD.KEY(0) = WLOC.START.KEY(0);

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:122  
  10570  6 002207   000100 100500                    MLR     fill='000'O
         6 002210   200051 000010                    ADSC9   WLOC,,AUTO               cn=0,n=8
         6 002211   200062 000010                    ADSC9   WLOC+9,,AUTO             cn=0,n=8

     1096    10571
     1097    10572    3              WSPEC.TYPE# = %SPT_WINDOW_SPEC;

  10572  6 002212   000006 220003                    LDX0    6,DU
         6 002213   200047 740100                    STX0    WSPEC,,AUTO

     1098    10573    3              WSPEC.REP# = %REP_REMOTE;

  10573  6 002214   000002 221003                    LDX1    2,DU
         6 002215   200047 441100                    SXL1    WSPEC,,AUTO

     1099    10574    3              CALL VDA$LWRITE (WINDOWS$STREAM, WLOC.START, WSPEC)

  10574  6 002216   200047 631500                    EPPR1   WSPEC,,AUTO
         6 002217   200076 451500                    STP1    WLOC+21,,AUTO
         6 002220   200051 633500                    EPPR3   WLOC,,AUTO
         6 002221   200075 453500                    STP3    WLOC+20,,AUTO
         6 002222   000006 236000 xsym               LDQ     VD_6E+6
         6 002223   200074 756100                    STQ     WLOC+19,,AUTO
         6 002224   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 002225   000021 631400 xsym               EPPR1   B_VECTNIL+17
         6 002226   000000 701000 xent               TSX1    VDA$LWRITE
         6 002227   002347 702000 6                  TSX2    ED_WINDOW_WRITE_FAILED

     1100    10575    3                ALTRET (ED_WINDOW_WRITE_FAILED);
     1101    10576
     1102    10577    3              CALL VDG$OALLOC (%CLS_WINDOW_BLOCK, WSPEC.V$)

  10577  6 002230   200050 630500                    EPPR0   WSPEC+1,,AUTO
         6 002231   200075 450500                    STP0    WLOC+20,,AUTO
         6 002232   000026 236000 7                  LDQ     22
         6 002233   200074 756100                    STQ     WLOC+19,,AUTO
         6 002234   200074 630500                    EPPR0   WLOC+19,,AUTO
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:123  
         6 002235   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 002236   000000 701000 xent               TSX1    VDG$OALLOC
         6 002237   002371 702000 6                  TSX2    EXPAND_COMMAND_WINDOW_FAILED

     1103    10578    3                ALTRET (OALLOC_FAILED);
     1104    10579    3              WSPEC.TYPE# = %SPT_WINDOW_BLOCK;

  10579  6 002240   000007 220003                    LDX0    7,DU
         6 002241   200047 740100                    STX0    WSPEC,,AUTO

     1105    10580    3              WSPEC.REP# = %REP_REMOTE;

  10580  6 002242   000002 221003                    LDX1    2,DU
         6 002243   200047 441100                    SXL1    WSPEC,,AUTO

     1106    10581    3              CALL VDA$LWRITE (WINDOWS$STREAM, WLOC.ENDD, WSPEC)

  10581  6 002244   200047 630500                    EPPR0   WSPEC,,AUTO
         6 002245   200076 450500                    STP0    WLOC+21,,AUTO
         6 002246   200062 631500                    EPPR1   WLOC+9,,AUTO
         6 002247   200075 451500                    STP1    WLOC+20,,AUTO
         6 002250   000006 236000 xsym               LDQ     VD_6E+6
         6 002251   200074 756100                    STQ     WLOC+19,,AUTO
         6 002252   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 002253   000021 631400 xsym               EPPR1   B_VECTNIL+17
         6 002254   000000 701000 xent               TSX1    VDA$LWRITE
         6 002255   002347 702000 6                  TSX2    ED_WINDOW_WRITE_FAILED

     1107    10582    3                ALTRET (ED_WINDOW_BLOCK_WRITE_FAILED);
     1108    10583
     1109    10584    3              CALL VDA$PFLUSH (WINDOWS$STREAM.PORT$->VD$PORT, %TO_PRESENTER)

  10584  6 002256   000006 470400 xsym               LDP0    VD_6E+6
         6 002257   000001 471500                    LDP1    1,,PR0
         6 002260   000002 236000 7                  LDQ     2
         6 002261   200075 756100                    STQ     WLOC+20,,AUTO
         6 002262   200074 451500                    STP1    WLOC+19,,AUTO
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:124  
         6 002263   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 002264   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 002265   000000 701000 xent               TSX1    VDA$PFLUSH
         6 002266   002371 702000 6                  TSX2    EXPAND_COMMAND_WINDOW_FAILED

     1110    10585    3                ALTRET (ED_WINDOW_PFLUSH_FAILED);
     1111    10586    3              END CREATE_FIRST_ED_WINDOW;

     1112    10587
     1113    10588    2           WINDOW_SPEC$ = VD_CURRENT_WINDOW$->VD$FILE_NODE.DESC.SPEC.V$;

  10588  6 002267   000000 470400 xsym               LDP0    VD_CURRENT_WINDOW$
         6 002270   000007 236100                    LDQ     7,,PR0
         6 002271   200042 756100                    STQ     WINDOW_SPEC$,,AUTO

     1114    10589    3           IF WINDOW$SPEC.OPERAND.EVAL$ ~= ADDR(NIL) THEN DO;

  10589  6 002272   200042 471500                    LDP1    WINDOW_SPEC$,,AUTO
         6 002273   100013 236100                    LDQ     11,,PR1
         6 002274   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002275   002333 600000 6                  TZE     s:10604

     1115    10590    3              FREE_EVAL$ = WINDOW$SPEC.OPERAND.EVAL$->VD$EVAL.BLINK$;

  10590  6 002276   100013 473500                    LDP3    11,,PR1
         6 002277   300001 236100                    LDQ     1,,PR3
         6 002300   200045 756100                    STQ     FREE_EVAL$,,AUTO

     1116    10591    3              WINDOW$SPEC.OPERAND.EVAL$->VD$EVAL.BLINK$ = ADDR(NIL);

  10591  6 002301   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 002302   300001 756100                    STQ     1,,PR3

     1117    10592    4              DO WHILE FREE_EVAL$ ~= ADDR(NIL);

  10592  6 002303   002315 710000 6                  TRA     s:10597

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:125  
     1118    10593    4                 NEXT_EVAL$ = FREE$EVAL.BLINK$;

  10593  6 002304   200045 470500                    LDP0    FREE_EVAL$,,AUTO
         6 002305   000001 236100                    LDQ     1,,PR0
         6 002306   200046 756100                    STQ     NEXT_EVAL$,,AUTO

     1119    10594    4                 CALL VDG$OFREE (FREE$EVAL)

  10594  6 002307   200045 630500                    EPPR0   FREE_EVAL$,,AUTO
         6 002310   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 002311   000000 701000 xent               TSX1    VDG$OFREE
         6 002312   002371 702000 6                  TSX2    EXPAND_COMMAND_WINDOW_FAILED

     1120    10595    4                   ALTRET (OFREE_FAILED);
     1121    10596    4                 FREE_EVAL$ = NEXT_EVAL$;

  10596  6 002313   200046 236100                    LDQ     NEXT_EVAL$,,AUTO
         6 002314   200045 756100                    STQ     FREE_EVAL$,,AUTO

     1122    10597    4                 END;

  10597  6 002315   200045 236100                    LDQ     FREE_EVAL$,,AUTO
         6 002316   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002317   002304 601000 6                  TNZ     s:10593

     1123    10598
     1124    10599    3              WINDOW$SPEC.OPERAND.EVAL$->VD$EVAL.CTRL_REC_MATCHED_EOF = %FALSE;

  10599  6 002320   200042 470500                    LDP0    WINDOW_SPEC$,,AUTO
         6 002321   000013 471500                    LDP1    11,,PR0
         6 002322   000027 236000 7                  LDQ     23
         6 002323   100070 356100                    ANSQ    56,,PR1

     1125    10600    3              IF CMD_CLASS = %EXPL_ED_CMD THEN

  10600  6 002324   200041 471500                    LDP1    @CMD_CLASS,,AUTO
         6 002325   100000 235100                    LDA     0,,PR1
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:126  
         6 002326   000002 115007                    CMPA    2,DL
         6 002327   002333 601000 6                  TNZ     s:10604

     1126    10601    3                 WINDOW$SPEC.OPERAND.EVAL$->VD$EVAL.STATE# = %EVST_INITIAL;

  10601  6 002330   000013 473500                    LDP3    11,,PR0
         6 002331   000001 220003                    LDX0    1,DU
         6 002332   300070 740100                    STX0    56,,PR3

     1127    10602    3              END;

     1128    10603
     1129    10604    2           CALL VDG$OFREE (WINDOW$SPEC.OPERAND.INTREE$->VD$IT_BLOCK_EXPR)

  10604  6 002333   200042 470500                    LDP0    WINDOW_SPEC$,,AUTO
         6 002334   000011 471500                    LDP1    9,,PR0
         6 002335   200074 451500                    STP1    WLOC+19,,AUTO
         6 002336   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 002337   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 002340   000000 701000 xent               TSX1    VDG$OFREE
         6 002341   002371 702000 6                  TSX2    EXPAND_COMMAND_WINDOW_FAILED

     1130    10605    2             ALTRET (OFREE_FAILED);
     1131    10606    2           WINDOW$SPEC.OPERAND.INTREE$ = ADDR(NIL);

  10606  6 002342   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 002343   200042 470500                    LDP0    WINDOW_SPEC$,,AUTO
         6 002344   000011 756100                    STQ     9,,PR0

     1132    10607
     1133    10608    2           RETURN;

  10608  6 002345   200040 221300                    LDX1  ! EDIT_BLOCK$+1,,AUTO
         6 002346   000001 702211                    TSX2  ! 1,X1

  10606  6 002347                       ED_WINDOW_W* null
  10606  6 002347                       LDELETE_FAI* null
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:127  
  10606  6 002347                       ED_WINDOW_B* null
     1134    10609
     1135    10610
     1136    10611
     1137    10612    2   ED_WINDOW_WRITE_FAILED: ;
     1138    10613    2   LDELETE_FAILED: ;
     1139    10614    2   ED_WINDOW_BLOCK_WRITE_FAILED: ;
     1140    10615    2           IF WSPEC ~= %CLEAR THEN

  10615  6 002347   000000 106500                    CMPC    fill='000'O
         6 002350   200047 000010                    ADSC9   WSPEC,,AUTO              cn=0,n=8
         6 002351   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         6 002352   002357 600000 6                  TZE     s:10617

     1141    10616    2              CALL VDG$OFREE (WSPEC.V$ -> WINDOW$SPEC);

  10616  6 002353   200050 630500                    EPPR0   WSPEC+1,,AUTO
         6 002354   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 002355   000000 701000 xent               TSX1    VDG$OFREE
         6 002356   000000 011000                    NOP     0

     1142    10617    2           IF VD_CURRENT_WINDOW$ ~= ADDR(NIL) THEN

  10617  6 002357   000000 236000 xsym               LDQ     VD_CURRENT_WINDOW$
         6 002360   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002361   002371 600000 6                  TZE     EXPAND_COMMAND_WINDOW_FAILED

     1143    10618    2              IF VD_CURRENT_WINDOW$->

  10618  6 002362   000000 470400 xsym               LDP0    VD_CURRENT_WINDOW$
         6 002363   000000 220100                    LDX0    0,,PR0
         6 002364   000017 100003                    CMPX0   15,DU
         6 002365   002371 600000 6                  TZE     EXPAND_COMMAND_WINDOW_FAILED

     1144    10619    2                VD$FILE_NODE.OBJECT.CLASS# ~= %CLS_FILE_NODE THEN
     1145    10620    2                 VD_CURRENT_WINDOW$ = VD_COMMAND_WINDOW$ -> VD$FILE_NODE.FLINK$;

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:128  
  10620  6 002366   000000 471400 xsym               LDP1    VD_COMMAND_WINDOW$
         6 002367   100002 236100                    LDQ     2,,PR1
         6 002370   000000 756000 xsym               STQ     VD_CURRENT_WINDOW$

  10617  6 002371                       EXPAND_COMM* null
  10617  6 002371                       ED_WINDOW_P* null
  10617  6 002371                       OALLOC_FAIL* null
  10617  6 002371                       OFREE_FAILED null
     1146    10621
     1147    10622
     1148    10623    2   EXPAND_COMMAND_WINDOW_FAILED: ;
     1149    10624    2   ED_WINDOW_PFLUSH_FAILED: ;
     1150    10625    2   OALLOC_FAILED: ;
     1151    10626    2   OFREE_FAILED: ;
     1152    10627    2           ALTRETURN;

  10627  6 002371   200040 221300                    LDX1  ! EDIT_BLOCK$+1,,AUTO
         6 002372   000000 702211                    TSX2  ! 0,X1

     1153    10628
     1154    10629    2   END EDITING_COMMAND_SEEN;
     1155    10630
     1156    10631        %BOX (TITLE=NEW_EDIT_BLOCK_IN_OLD_DOMAIN, PAGE=YES);
             10639    2
             10643    2   /***************************************************************************
             10645    2    *                                                                         *
             10649    2            *                        NEW_EDIT_BLOCK_IN_OLD_DOMAIN                    *
             10651    2            *                                                                        *
             10653    2          ***************************************************************************/

     1157    10657
     1158    10658        /*I* NAME: NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     1159    10659            PARAMETERS:
     1160    10660                CURR_WINDOW - VD$WINDOW_SPEC for the current editing window.
     1161    10661                    CURR$WINDOW.OPERAND.EDIT_BLOCK$ must point to a
     1162    10662                    VD$BLOCK_DESC for the current EditBlock; there must
     1163    10663                    be such an EditBlock.
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:129  
     1164    10664               IT_BLOCK_EXPR must be the VD$IT_BLOCK_EXPR returned by
     1165    10665                    VDE$PBLOCK_EXPR.  Specifically:
     1166    10666                  .DOMAINN must be %CLEAR, indicating that the block expression
     1167    10667                      specifies a block enclosed in the current edit block.
     1168    10668                  .OPTIONS must contain only those values explicitly given
     1169    10669                      by the user in the block expression; all other options
     1170    10670                      must be %CLEAR/NIL.
     1171    10671            INPUT:
     1172    10672            OUTPUT:
     1173    10673                IT_BLOCK_EXPR.DOMAINN will be filled in with info from
     1174    10674                    the current EditBlock.
     1175    10675                A BLOCK_DESC IT$OPERAND will be inserted at the beginning of the
     1176    10676                    movements chain to insure that subsequent movements start
     1177    10677                    from the proper position.
     1178    10678                IT_BLOCK_EXPR.OPTIONS will have its %CLEAR/NIL fields
     1179    10679                    filled in with values from the current EditBlock.
     1180    10680            DESCRIPTION:
     1181    10681                This routine is called for an EDIT command,
     1182    10682                when the user is telling us to edit a block which is in
     1183    10683                the same file as the current EditBlock.  Normally, this
     1184    10684                wouldn't look like a new EditBlock to VDE$IOPEN, so
     1185    10685                this routine fixes up IT_BLOCK_EXPR such that VDE$IOPEN
     1186    10686                will think this is a new EditBlock, and will act accordingly.
     1187    10687        */
     1188    10688
     1189    10689    1   NEW_EDIT_BLOCK_IN_OLD_DOMAIN: PROC (CURR_WINDOW, IT_BLOCK_EXPR) ALTRET;

  10689  6 002373   200034 741300       NEW_EDIT_BL* STX1  ! SAVE_SCREEN+2,,AUTO

     1190    10690
     1191    10691        %VD$WINDOW_SPEC (NAME=CURR_WINDOW, STCLASS=PARAM);
     1192    10757        %VD$IT_BLOCK_EXPR (NAME=IT_BLOCK_EXPR, STCLASS=PARAM);
     1193    10907
     1194    10908
     1195    10909
     1196    10910    2   DCL EDIT_BLOCK$ PTR;
     1197    10911    2   DCL IT_TEMP$ PTR;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:130  
     1198    10912
     1199    10913
     1200    10914        %VD$BLOCK_DESC (NAME=EDIT$BLOCK, STCLASS="BASED(EDIT_BLOCK$)");
     1201    11061
     1202    11062
     1203    11063
     1204    11064    2           EDIT_BLOCK$ = CURR_WINDOW.OPERAND.EDIT_BLOCK$;

  11064  6 002374   200035 470500                    LDP0    @CURR_WINDOW,,AUTO
         6 002375   000012 236100                    LDQ     10,,PR0
         6 002376   200037 756100                    STQ     EDIT_BLOCK$,,AUTO

     1205    11065
     1206    11066                %COPYKEY (FKEY=EDIT$BLOCK.FILE_KEY,
     1207    11067                TKEY=IT_BLOCK_EXPR.DOMAINN.FILE_KEY);

  11080  6 002377   200037 471500                    LDP1    EDIT_BLOCK$,,AUTO
         6 002400   200036 473500                    LDP3    @IT_BLOCK_EXPR,,AUTO
         6 002401   000100 100500                    MLR     fill='000'O
         6 002402   100001 000010                    ADSC9   1,,PR1                   cn=0,n=8
         6 002403   300004 000010                    ADSC9   4,,PR3                   cn=0,n=8

  11080  6 002404   100001 720100                    LXL0    1,,PR1
         6 002405   000002 100003                    CMPX0   2,DU
         6 002406   002423 601000 6                  TNZ     s:11083

  11080  6 002407   100002 474500                    LDP4    2,,PR1
         6 002410   200036 236100                    LDQ     @IT_BLOCK_EXPR,,AUTO
         6 002411   000005 036003                    ADLQ    5,DU
         6 002412   200075 756100                    STQ     WLOC+20,,AUTO
         6 002413   200074 454500                    STP4    WLOC+19,,AUTO
         6 002414   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 002415   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 002416   000000 701000 xent               TSX1    VDG$OCOPY
         6 002417   002421 702000 6                  TSX2    s:11081
         6 002420   002423 710000 6                  TRA     s:11083

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:131  
  11081  6 002421   200034 221300                    LDX1  ! SAVE_SCREEN+2,,AUTO
         6 002422   000000 702211                    TSX2  ! 0,X1

     1208    11083    2           CALL VDG$OCOPY_RANGE (EDIT$BLOCK.RANGE, IT_BLOCK_EXPR.DOMAINN.RANGE)

  11083  6 002423   200036 236100                    LDQ     @IT_BLOCK_EXPR,,AUTO
         6 002424   000006 036003                    ADLQ    6,DU
         6 002425   200075 756100                    STQ     WLOC+20,,AUTO
         6 002426   200037 236100                    LDQ     EDIT_BLOCK$,,AUTO
         6 002427   000003 036003                    ADLQ    3,DU
         6 002430   200074 756100                    STQ     WLOC+19,,AUTO
         6 002431   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 002432   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 002433   000000 701000 xent               TSX1    VDG$OCOPY_RANGE
         6 002434   002574 702000 6                  TSX2    OALLOC_FAILED

     1209    11084    2             ALTRET (OCOPY_RANGE_FAILED);
     1210    11085    2           IT_TEMP$ = IT_BLOCK_EXPR.SELECTS$->IT$SELECT.ADJUSTS$;

  11085  6 002435   200036 470500                    LDP0    @IT_BLOCK_EXPR,,AUTO
         6 002436   000035 471500                    LDP1    29,,PR0
         6 002437   100004 236100                    LDQ     4,,PR1
         6 002440   200040 756100                    STQ     IT_TEMP$,,AUTO

     1211    11086    2           CALL VDG$OALLOC (%CLS_IT_OPERAND, SINK$)

  11086  6 002441   200023 633500                    EPPR3   SINK$,,AUTO
         6 002442   200075 453500                    STP3    WLOC+20,,AUTO
         6 002443   000031 236000 7                  LDQ     25
         6 002444   200074 756100                    STQ     WLOC+19,,AUTO
         6 002445   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 002446   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 002447   000000 701000 xent               TSX1    VDG$OALLOC
         6 002450   002574 702000 6                  TSX2    OALLOC_FAILED

     1212    11087    2             ALTRET (OALLOC_FAILED);
     1213    11088    2           SINK$ -> IT$OPERAND.FLINK$ = IT_TEMP$ -> IT$ADJUST.MOVEMENTS$;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:132  

  11088  6 002451   200040 470500                    LDP0    IT_TEMP$,,AUTO
         6 002452   000004 236100                    LDQ     4,,PR0
         6 002453   200023 471500                    LDP1    SINK$,,AUTO
         6 002454   100002 756100                    STQ     2,,PR1

     1214    11089    2           SINK$ -> IT$OPERAND.PARENT$ = IT_TEMP$;

  11089  6 002455   200040 236100                    LDQ     IT_TEMP$,,AUTO
         6 002456   200023 471500                    LDP1    SINK$,,AUTO
         6 002457   100001 756100                    STQ     1,,PR1

     1215    11090    2           IT_TEMP$ -> IT$ADJUST.MOVEMENTS$ = SINK$;

  11090  6 002460   200023 236100                    LDQ     SINK$,,AUTO
         6 002461   000004 756100                    STQ     4,,PR0

     1216    11091    2           IT_TEMP$ = SINK$;

  11091  6 002462   200023 236100                    LDQ     SINK$,,AUTO
         6 002463   200040 756100                    STQ     IT_TEMP$,,AUTO

     1217    11092    2           IT_TEMP$ -> IT$OPERAND.OPTIONS.POINT# = %PNT_AO;

  11092  6 002464   000001 220003                    LDX0    1,DU
         6 002465   200040 470500                    LDP0    IT_TEMP$,,AUTO
         6 002466   000005 740100                    STX0    5,,PR0

     1218    11093    2           IT_TEMP$ -> IT$OPERAND.CODE# = %OPAND_BLOCK_DESC;

  11093  6 002467   000005 221003                    LDX1    5,DU
         6 002470   000003 741100                    STX1    3,,PR0

     1219    11094    2           CALL VDG$OALLOC (%CLS_BLOCK_DESC, IT_TEMP$ -> IT$OPERAND.PARAM$)

  11094  6 002471   000010 036003                    ADLQ    8,DU
         6 002472   000004 235000 7                  LDA     4
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:133  
         6 002473   200074 757100                    STAQ    WLOC+19,,AUTO
         6 002474   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 002475   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 002476   000000 701000 xent               TSX1    VDG$OALLOC
         6 002477   002574 702000 6                  TSX2    OALLOC_FAILED

     1220    11095    2             ALTRET(OALLOC_FAILED);
     1221    11096    2           CALL VDG$OCOPY_RANGE (CURR_WINDOW.OPERAND.EVAL$ -> VD$EVAL.RANGE,

  11096  6 002500   200035 470500                    LDP0    @CURR_WINDOW,,AUTO
         6 002501   000013 471500                    LDP1    11,,PR0
         6 002502   200040 473500                    LDP3    IT_TEMP$,,AUTO
         6 002503   300010 474500                    LDP4    8,,PR3
         6 002504   400003 635500                    EPPR5   3,,PR4
         6 002505   200075 455500                    STP5    WLOC+20,,AUTO
         6 002506   100024 634500                    EPPR4   20,,PR1
         6 002507   200074 454500                    STP4    WLOC+19,,AUTO
         6 002510   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 002511   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 002512   000000 701000 xent               TSX1    VDG$OCOPY_RANGE
         6 002513   002574 702000 6                  TSX2    OALLOC_FAILED

     1222    11097    2             IT_TEMP$ -> IT$OPERAND.PARAM$ -> EDIT$BLOCK.RANGE)
     1223    11098    2             ALTRET (OCOPY_RANGE_FAILED);
     1224    11099
     1225    11100                /*
     1226    11101                *   If the user explicitly specified any processing
     1227    11102                *       options, they're in IT_BLOCK_EXPR.OPTIONS.
     1228    11103                *   Fill in any missing values in the InTree's .OPTIONS
     1229    11104                *       from the new EditBlock's options.
     1230    11105                */
     1231    11106    2           IF IT_BLOCK_EXPR.OPTIONS.STRUCTURE$ = ADDR(NIL) THEN

  11106  6 002514   200036 470500                    LDP0    @IT_BLOCK_EXPR,,AUTO
         6 002515   000030 236100                    LDQ     24,,PR0
         6 002516   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002517   002523 601000 6                  TNZ     s:11109
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:134  

     1232    11107    2              IT_BLOCK_EXPR.OPTIONS.STRUCTURE$ =

  11107  6 002520   200037 471500                    LDP1    EDIT_BLOCK$,,AUTO
         6 002521   100025 236100                    LDQ     21,,PR1
         6 002522   000030 756100                    STQ     24,,PR0

     1233    11108    2                EDIT$BLOCK.OPTIONS.STRUCTURE$;
     1234    11109    2           IF IT_BLOCK_EXPR.OPTIONS.LEVEL# = 0 THEN

  11109  6 002523   000031 220100                    LDX0    25,,PR0
         6 002524   002530 601000 6                  TNZ     s:11111

     1235    11110    2              IT_BLOCK_EXPR.OPTIONS.LEVEL# = EDIT$BLOCK.OPTIONS.LEVEL#;

  11110  6 002525   200037 471500                    LDP1    EDIT_BLOCK$,,AUTO
         6 002526   100026 221100                    LDX1    22,,PR1
         6 002527   000031 741100                    STX1    25,,PR0

     1236    11111    2           IF IT_BLOCK_EXPR.OPTIONS.COMPONENT# = 0 THEN

  11111  6 002530   000031 720100                    LXL0    25,,PR0
         6 002531   002535 601000 6                  TNZ     s:11114

     1237    11112    2              IT_BLOCK_EXPR.OPTIONS.COMPONENT# =

  11112  6 002532   200037 471500                    LDP1    EDIT_BLOCK$,,AUTO
         6 002533   100026 721100                    LXL1    22,,PR1
         6 002534   000031 441100                    SXL1    25,,PR0

     1238    11113    2                EDIT$BLOCK.OPTIONS.COMPONENT#;
     1239    11114    2           IF IT_BLOCK_EXPR.OPTIONS.PROTECT# = 0 THEN

  11114  6 002535   000032 220100                    LDX0    26,,PR0
         6 002536   002542 601000 6                  TNZ     s:11116

     1240    11115    2              IT_BLOCK_EXPR.OPTIONS.PROTECT# = EDIT$BLOCK.OPTIONS.PROTECT#;
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:135  

  11115  6 002537   200037 471500                    LDP1    EDIT_BLOCK$,,AUTO
         6 002540   100027 221100                    LDX1    23,,PR1
         6 002541   000032 741100                    STX1    26,,PR0

     1241    11116    2           IF IT_BLOCK_EXPR.OPTIONS.EXIST# = 0 THEN

  11116  6 002542   000032 720100                    LXL0    26,,PR0
         6 002543   002547 601000 6                  TNZ     s:11132

     1242    11117    2              IT_BLOCK_EXPR.OPTIONS.EXIST# = EDIT$BLOCK.OPTIONS.EXIST#;

  11117  6 002544   200037 471500                    LDP1    EDIT_BLOCK$,,AUTO
         6 002545   100027 721100                    LXL1    23,,PR1
         6 002546   000032 441100                    SXL1    26,,PR0

     1243    11118                %COPYKEY (FKEY=EDIT$BLOCK.OPTIONS.KEY_INCR,
     1244    11119                TKEY=IT_BLOCK_EXPR.OPTIONS.KEY_INCR);

  11132  6 002547   200037 471500                    LDP1    EDIT_BLOCK$,,AUTO
         6 002550   000100 100500                    MLR     fill='000'O
         6 002551   100030 000010                    ADSC9   24,,PR1                  cn=0,n=8
         6 002552   000033 000010                    ADSC9   27,,PR0                  cn=0,n=8

  11132  6 002553   100030 720100                    LXL0    24,,PR1
         6 002554   000002 100003                    CMPX0   2,DU
         6 002555   002572 601000 6                  TNZ     s:11136

  11132  6 002556   100031 473500                    LDP3    25,,PR1
         6 002557   200036 236100                    LDQ     @IT_BLOCK_EXPR,,AUTO
         6 002560   000034 036003                    ADLQ    28,DU
         6 002561   200075 756100                    STQ     WLOC+20,,AUTO
         6 002562   200074 453500                    STP3    WLOC+19,,AUTO
         6 002563   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 002564   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 002565   000000 701000 xent               TSX1    VDG$OCOPY
         6 002566   002570 702000 6                  TSX2    s:11133
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:136  
         6 002567   002572 710000 6                  TRA     s:11136

  11133  6 002570   200034 221300                    LDX1  ! SAVE_SCREEN+2,,AUTO
         6 002571   000000 702211                    TSX2  ! 0,X1

     1245    11135
     1246    11136    2           RETURN;

  11136  6 002572   200034 221300                    LDX1  ! SAVE_SCREEN+2,,AUTO
         6 002573   000001 702211                    TSX2  ! 1,X1

  11132  6 002574                       OALLOC_FAIL* null
  11132  6 002574                       OCOPY_FAILED null
     1247    11137
     1248    11138
     1249    11139    2   OALLOC_FAILED: ;
     1250    11140    2   OCOPY_FAILED: ;
     1251    11141    2   OCOPY_RANGE_FAILED: ;

  11141  6 002574                       OCOPY_RANGE* null
     1252    11142    2           ALTRETURN;

  11142  6 002574   200034 221300                    LDX1  ! SAVE_SCREEN+2,,AUTO
         6 002575   000000 702211                    TSX2  ! 0,X1

     1253    11143
     1254    11144    2   END NEW_EDIT_BLOCK_IN_OLD_DOMAIN;
     1255    11145
     1256    11146        %BOX (TITLE=CLEAN_UP_AFTER_COMMAND, PAGE=YES);
             11154    2
             11158    2   /***************************************************************************
             11160    2    *                                                                         *
             11164    2            *                           CLEAN_UP_AFTER_COMMAND                       *
             11166    2            *                                                                        *
             11168    2          ***************************************************************************/

     1257    11172
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:137  
     1258    11173        /*I* NAME: CLEAN_UP_AFTER_COMMAND
     1259    11174            PARAMETERS:
     1260    11175                CMD_CLASS - Code specifying what type of command was just
     1261    11176                    processed:  %EXPL_ED_CMD, %IMPL_ED_CMD, or %NON_ED_CMD.
     1262    11177                If CMD_CLASS = %EXPL_ED_CMD or %IMPL_ED_CMD, then
     1263    11178                    VD_CURRENT_WINDOW$ must point to the FileNode at level
     1264    11179                    1 of the Windows file, for the current editing window.
     1265    11180            INPUT:
     1266    11181            OUTPUT:
     1267    11182                The current editing window's .OPERAND.EVAL$ will point to a
     1268    11183                    single VD$EVAL; the rest of the stack will be freed.
     1269    11184                The current editing window's .OPERAND.INTREE$ will be NIL.
     1270    11185            DESCRIPTION:
     1271    11186                After performing a command, even if the command encountered
     1272    11187                errors, we must clean up the window's VD$OPERAND before
     1273    11188                going on the the next command.
     1274    11189        */
     1275    11190
     1276    11191    1   CLEAN_UP_AFTER_COMMAND: PROC (CMD_CLASS) ALTRET;

  11191  6 002576   200034 741300       CLEAN_UP_AF* STX1  ! SAVE_SCREEN+2,,AUTO

     1277    11192
     1278    11193    2   DCL CMD_CLASS SBIN;
     1279    11194
     1280    11195
     1281    11196
     1282    11197    2   DCL CURR_WINDOW$ PTR;
     1283    11198
     1284    11199
     1285    11200        %VD$WINDOW_SPEC (NAME=CURR$WINDOW, STCLASS="BASED(CURR_WINDOW$)");
     1286    11266
     1287    11267
     1288    11268
     1289    11269    2           IF VD_CURRENT_WINDOW$ ~= ADDR(NIL) THEN

  11269  6 002577   000000 236000 xsym               LDQ     VD_CURRENT_WINDOW$
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:138  
         6 002600   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002601   002606 600000 6                  TZE     s:11272

     1290    11270    2              CURR_WINDOW$ = VD_CURRENT_WINDOW$->VD$FILE_NODE.DESC.SPEC.V$;

  11270  6 002602   000000 470400 xsym               LDP0    VD_CURRENT_WINDOW$
         6 002603   000007 236100                    LDQ     7,,PR0
         6 002604   200036 756100                    STQ     CURR_WINDOW$,,AUTO
         6 002605   002610 710000 6                  TRA     s:11274

     1291    11271    2           ELSE
     1292    11272    2              CURR_WINDOW$ = ADDR(NIL);

  11272  6 002606   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 002607   200036 756100                    STQ     CURR_WINDOW$,,AUTO

     1293    11273
     1294    11274    2           IF (CMD_CLASS = %EXPL_ED_CMD OR CMD_CLASS = %IMPL_ED_CMD)

  11274  6 002610   200035 470500                    LDP0    @CMD_CLASS,,AUTO
         6 002611   000000 235100                    LDA     0,,PR0
         6 002612   000002 115007                    CMPA    2,DL
         6 002613   002616 600000 6                  TZE     s:11274+6
         6 002614   000003 115007                    CMPA    3,DL
         6 002615   002660 601000 6                  TNZ     s:11293
         6 002616   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002617   002660 600000 6                  TZE     s:11293

     1295    11275    3             AND (CURR_WINDOW$ ~= ADDR(NIL)) THEN DO;

     1296    11276    3              IF CURR$WINDOW.OPERAND.STREAM$ -> VD$STREAM.PORT$ ~=

  11276  6 002620   200036 471500                    LDP1    CURR_WINDOW$,,AUTO
         6 002621   100010 473500                    LDP3    8,,PR1
         6 002622   300001 236100                    LDQ     1,,PR3
         6 002623   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002624   002635 600000 6                  TZE     s:11282
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:139  

     1297    11277    4                ADDR(NIL) THEN DO;

     1298    11278    4                 CALL VDA$PFLUSH (CURR$WINDOW.OPERAND.STREAM$ ->

  11278  6 002625   300001 474500                    LDP4    1,,PR3
         6 002626   000002 236000 7                  LDQ     2
         6 002627   200075 756100                    STQ     WLOC+20,,AUTO
         6 002630   200074 454500                    STP4    WLOC+19,,AUTO
         6 002631   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 002632   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 002633   000000 701000 xent               TSX1    VDA$PFLUSH
         6 002634   002662 702000 6                  TSX2    PFLUSH_FAILED

     1299    11279    4                   VD$STREAM.PORT$ -> VD$PORT, %TO_PRESENTER)
     1300    11280    4                   ALTRET (PFLUSH_FAILED);
     1301    11281    4                 END;

     1302    11282    3              IF VD_6E.SOURCE.OPERAND.STREAM$->VD$STREAM.PORT$ ~=

  11282  6 002635   000020 470400 xsym               LDP0    VD_6E+16
         6 002636   000001 236100                    LDQ     1,,PR0
         6 002637   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002640   002651 600000 6                  TZE     s:11288

     1303    11283    4                ADDR(NIL) THEN DO;

     1304    11284    4                 CALL VDA$PFLUSH (VD_6E.SOURCE.OPERAND.STREAM$ ->

  11284  6 002641   000001 471500                    LDP1    1,,PR0
         6 002642   000002 236000 7                  LDQ     2
         6 002643   200075 756100                    STQ     WLOC+20,,AUTO
         6 002644   200074 451500                    STP1    WLOC+19,,AUTO
         6 002645   200074 630500                    EPPR0   WLOC+19,,AUTO
         6 002646   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 002647   000000 701000 xent               TSX1    VDA$PFLUSH
         6 002650   002662 702000 6                  TSX2    PFLUSH_FAILED
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:140  

     1305    11285    4                   VD$STREAM.PORT$ -> VD$PORT, %TO_PRESENTER)
     1306    11286    4                   ALTRET (PFLUSH_FAILED);
     1307    11287    4                 END;

     1308    11288    3              IT$COMMAND.CODE# = 0; /* Mustn't be T_WINDOW_CMD */

  11288  6 002651   000000 220003                    LDX0    0,DU
         6 002652   200007 470500                    LDP0    IT_COMMAND$,,AUTO
         6 002653   000003 740100                    STX0    3,,PR0

     1309    11289    3              CALL EDITING_COMMAND_SEEN (CMD_CLASS)

  11289  6 002654   200035 236100                    LDQ     @CMD_CLASS,,AUTO
         6 002655   200041 756100                    STQ     @CMD_CLASS,,AUTO
         6 002656   002017 701000 6                  TSX1    EDITING_COMMAND_SEEN
         6 002657   002662 702000 6                  TSX2    PFLUSH_FAILED

     1310    11290    3                ALTRET (EDITING_COMMAND_SEEN_FAILED);
     1311    11291    3              END;

     1312    11292
     1313    11293    2           RETURN;

  11293  6 002660   200034 221300                    LDX1  ! SAVE_SCREEN+2,,AUTO
         6 002661   000001 702211                    TSX2  ! 1,X1

  11286  6 002662                       PFLUSH_FAIL* null
  11286  6 002662                       EDITING_COM* null
     1314    11294
     1315    11295
     1316    11296    2   PFLUSH_FAILED: ;
     1317    11297    2   EDITING_COMMAND_SEEN_FAILED: ;
     1318    11298    2           ALTRETURN;

  11298  6 002662   200034 221300                    LDX1  ! SAVE_SCREEN+2,,AUTO
         6 002663   000000 702211                    TSX2  ! 0,X1
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:141  

     1319    11299
     1320    11300    2   END CLEAN_UP_AFTER_COMMAND;
     1321    11301
     1322    11302    1   END VDI$PDRIVER;

  11302  6 002664   000000 702200 xent               TSX2  ! X66_ARET
     1323    11303        %EOD;

PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:142  
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   XUG_ENTRY.:LIBRARY  cannot be made into a system file and is referenced.
   XUE_SUBS_C.:LIBRARY  is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_NODES0_E.:VDA5TOU  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDI$PDRIVER.
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:143  

 **** Variables and constants ****

  ****  Section 004  Data  VDI$PDRIVER

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT         r     1 DELFID_CMD

  ****  Section 005 RoData VDI$PDRIVER

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    11-0-0/w STRC(324)   r     1 FIRST_ED_WIN_BLOCK_LOC
     0-0-0/w STRC(324)   r     1 FIRST_ED_WIN_LOC

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    41-0-0/w PTR         r     1 @CMD_CLASS                35-0-0/w PTR         r     1 @CMD_CLASS
    35-0-0/w PTR         r     1 @CURR_WINDOW              36-0-0/w PTR         r     1 @IT_BLOCK_EXPR
    25-0-0/w PTR         r     1 @IT_COMMAND$               3-0-0/c UBIN(9)     r     1 ACTCHR
     5-0-0/w BIT         r     1 CAN_READ_EDITING_WINDOW
    12-0-0/w UBIN        r     1 CL_INDEX                  26-0-0/w SBIN        r     1 CMD_CLASS
    *0-0-0/w SBIN        r     1 CMD_CLASS                 *0-0-0/w SBIN        r     1 CMD_CLASS
    22-0-0/w PTR         r     1 CMD_RECORD$               11-0-0/w PTR         r     1 COMMAND_LINE$
    44-0-0/w SBIN        r     1 COUNT                     44-0-0/w PTR         r     1 COUNT_PTR$
    *0-0-0/w STRC(900)   r     1 CURR_WINDOW                6-0-0/w PTR         r     1 CURR_WINDOW$
    27-0-0/w PTR         r     1 CURR_WINDOW$              36-0-0/w PTR         r     1 CURR_WINDOW$
    37-0-0/w PTR         r     1 EDIT_BLOCK$                4-0-0/w PTR         r     1 ED_WINDOW_NODE$
    20-0-0/w STRC        r     1 ERR_CODE                  45-0-0/w PTR         r     1 FREE_EVAL$
    13-0-0/w BIT         r     1 GOT_WREAD_ERROR           21-0-0/w SBIN        r     1 INDX
    *0-0-0/w STRC(1116)  r     1 IT_BLOCK_EXPR             30-0-0/w PTR         r     1 IT_BLOCK_EXPR$
     7-0-0/w PTR         r     1 IT_COMMAND$               *0-0-0/w PTR         r     1 IT_COMMAND$
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:144  
    40-0-0/w PTR         r     1 IT_TEMP$                  46-0-0/w PTR         r     1 NEXT_EVAL$
    43-0-0/w PTR         r     1 NODE$                     10-0-0/w PTR         r     1 PREV_IT_COMMAND$
    32-0-0/w SBIN        r     1 SAVE_SCREEN               31-0-0/w BIT         r     1 SIGNAL
    23-0-0/w PTR         r     1 SINK$                     17-0-0/w PTR         r     1 SUBST_FIELD$
    16-0-0/w PTR         r     1 VD_ERR$                   14-0-0/w BIT         r     1 WARN_ABORTED_BUFFER
    42-0-0/w PTR         r     1 WINDOW_SPEC$              51-0-0/w STRC(648)   r     1 WLOC
    47-0-0/w STRC(72)    r     1 WSPEC

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$XL_UPPER$                0-0-0/w STRC(144)   r     1 VD_$$QUAC
     0-0-0/w STRC(144)   r     1 VD_$COMMAND                0-0-0/w STRC(144)   r     1 VD_$MIN_COMMAND
     0-0-0/w STRC(144)   r     1 VD_$SCREEN                 0-0-0/w STRC(22644) r     1 VD_6E
     0-0-0/w UBIN        r     1 VD_ASYM
     0-0-0/w PTR         r     1 VD_CMD_OBJECTS$(0:49)
     0-0-0/w SBIN        r     1 VD_COMMAND_LINE            0-0-0/w PTR         r     1 VD_COMMAND_WINDOW$
     0-0-0/w PTR         r     1 VD_CURRENT_WINDOW$         0-0-0/w SBIN        r     1 VD_EDITING_HEIGHT
     0-0-0/w SBIN        r     1 VD_EDITING_WINDOWS         0-0-0/w UBIN        r     1 VD_FORCE_READ_FROM
     0-0-0/w SBIN        r     1 VD_IBEX_WINDOW
     0-0-0/w UBIN        r     1 VD_LAST_CWIN_ACTIVITY
     0-0-0/w SBIN        r     1 VD_OLD_$SCREEN             0-0-0/w SBIN        r     1 VD_WORST_FLAGLEV
     0-0-0/d STRC(1512)  r     1 XUG_GETCMD

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 BLOCK$EXPR                 0-0-0/w ASTR(90)    r     1 CMD$RECORD
     0-0-0/w STRC(900)   r     1 CMD$STREAM                 0-0-0/w STRC(144)   r     1 COMMAND$LINE
     0-0-0/w STRC(900)   r     1 CURR$WINDOW                0-0-0/w STRC(900)   r     1 CURR$WINDOW
     0-0-0/w STRC(900)   r     1 CURR$WINDOW                0-0-0/w STRC(936)   r     1 EDIT$BLOCK
     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0/w STRC(180)   r     1 FATAL$ERR
     0-0-0/w STRC(2124)  r     1 FREE$EVAL                  0-0-0/w STRC(216)   r     1 IT$ADJUST
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:145  
     0-0-0/w STRC(1116)  r     1 IT$BLOCK_EXPR              0-0-0/w STRC(540)   r     1 IT$COMMAND
     0-0-0/w STRC(540)   r     1 IT$COMMAND                 0-0-0/w STRC(324)   r     1 IT$OPERAND
     0-0-0/w STRC(216)   r     1 IT$SELECT                  0-0-0N  NULL        r     1 M$6E
     0-0-0N  NULL        r     1 M$ME                       0-0-0N  NULL        r     1 M$SI
     0-0-0/w STRC(504)   r     1 P$PCB
     0-0-0/w STRC(144)   r     1 SUBST$NUMBER(0:2)
     0-0-0/w STRC(144)   r     1 SUBST$POINTER(0:2)
     0-0-0/w ASTR(90)    r     1 VD$BUFFER                  0-0-0/w STRC(180)   r     1 VD$ERR
     0-0-0/w STRC(180)   r     1 VD$ERR_TAIL                0-0-0/w STRC(2124)  r     1 VD$EVAL
     0-0-0/w STRC(468)   r     1 VD$FILE_NODE               0-0-0/w STRC(1116)  r     1 VD$IT_BLOCK_EXPR
     0-0-0/w STRC(72)    r     1 VD$KEY_NUMBER              0-0-0/w STRC(144)   r     1 VD$NUMBER
     0-0-0/w STRC(1944)  r     1 VD$PORT                    0-0-0/w STRC(864)   r     1 VD$STREAM
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE            0-0-0/w STRC(900)   r     1 WINDOW$SPEC
     0-0-0/w STRC(864)   r     1 WINDOWS$STREAM


   Procedure VDI$PDRIVER requires 1461 words for executable code.
   Procedure VDI$PDRIVER requires 64 words of local(AUTO) storage.
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:146  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:147  
          MINI XREF LISTING

ACTCHR
      6787**DCL      8820<<ASSIGN   8829>>IF       8873<>CALL     8875<<ASSIGN   8914<<ASSIGN
B$XL_UPPER$
      6545**DCL      6546--IMP-PTR
BLOCK$EXPR IN PROCEDURE PROCESS_COMMAND
      9310**DCL      9606<>CALL     9670<>CALL
CAN_READ_EDITING_WINDOW
      6789**DCL      8826<<ASSIGN   8839<<ASSIGN   8842>>IF
CLEAN_UP
      9077**LABEL    8821--GOTO     8913--GOTO     9041--GOTO     9061--GOTO     9069--GOTO
CLEAN_UP_AFTER_COMMAND
     11191**PROC     9779--CALL     9830--CALL
CLEAN_UP_AFTER_COMMAND_FAILED IN PROCEDURE PROCESS_COMMAND
      9829**LABEL    9779--CALLALT  9830--CALLALT
CL_INDEX
      6794**DCL      8923<<ASSIGN   8924>>DOWHILE  8926<>CALL     9763>>IF
CMD$RECORD.BYTES
      7160**DCL      9119<<CALLBLT  9122--ASSIGN
CMD$RECORD.LENGTH#
      7158**DCL      7160--IMP-SIZ  9119>>CALLBLT  9119>>CALLBLT
CMD$STREAM
      6970**DCL      9143<>CALL
CMD$STREAM.DCB#
      6997**DCL      9089>>IF
CMD$STREAM.FILE
      6996**DCL      9128--CALL
CMD$STREAM.FILE.BYTES
      6996**DCL      9136>>ASSIGN
CMD$STREAM.FILE.LENGTH#
      6996**DCL      9134>>ASSIGN
CMD$STREAM.INTREE$
      6997**DCL      8916>>IF       8930<<ASSIGN   8936>>CALL     8938<<ASSIGN   8944>>IF       8945>>ASSIGN
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:148  
      8953>>CALL     8955<<ASSIGN   9065>>CALL     9067<<ASSIGN
CMD$STREAM.IT_FROM_PARSE_TREE
      6998**DCL      8931<<ASSIGN   8939<<ASSIGN   8952>>IF       8956<<ASSIGN   9068<<ASSIGN
CMD$STREAM.POSITION#
      6998**DCL      9086>>IF       9119>>CALLBLT  9119>>CALLBLT  9122>>ASSIGN
CMD$STREAM.RECORD$
      6997**DCL      9084>>IF       9086>>IF       9115>>ASSIGN   9116<<ASSIGN
CMD$STREAM.REC_NUM#
      6999**DCL      9090>>IF       9139>>ASSIGN
CMD$STREAM.TYPE#
      6996**DCL      8844>>DOWHILE  8885>>IF       9084>>IF       9097>>IF       9097>>IF       9149<<ASSIGN
CMD_CLASS IN PROCEDURE CLEAN_UP_AFTER_COMMAND
     11193**DCL     11191--PROC    11274>>IF      11274>>IF      11289<>CALL
CMD_CLASS IN PROCEDURE EDITING_COMMAND_SEEN
      9910**DCL      9908--PROC    10600>>IF
CMD_CLASS IN PROCEDURE PROCESS_COMMAND
      9258**DCL      9568<<ASSIGN   9573<<ASSIGN   9575<<ASSIGN   9577<<ASSIGN   9581>>IF       9581>>IF
      9592<>CALL     9779<>CALL     9830<>CALL
CMD_RECORD$
      6816**DCL      7132--IMP-PTR  9118<<ASSIGN   9119>>CALLBLT  9119>>CALLBLT  9119>>CALLBLT  9122>>ASSIGN
COMMAND$LINE
      7171**DCL      8926<>CALL
COMMAND$LINE.CODE
      7179**DCL      8920>>ASSIGN   8920>>ASSIGN
COMMAND$LINE.NSUBLKS
      7183**DCL      8924>>DOWHILE  9763>>IF
COMMAND_LINE$
      6793**DCL      7171--IMP-PTR  8918<<ASSIGN   8920>>ASSIGN   8920>>ASSIGN   8924>>DOWHILE  8926>>CALL
      9763>>IF
COUNT IN PROCEDURE EDITING_COMMAND_SEEN
     10110**DCL     10111--REDEF   10551<<ASSIGN  10551>>ASSIGN
COUNT_PTR$ IN PROCEDURE EDITING_COMMAND_SEEN
     10111**DCL     10543<<ASSIGN  10545>>ASSIGN  10548>>ASSIGN
CP_FAILED IN PROCEDURE PROCESS_COMMAND
      9819**LABEL    9589--CALLALT  9662--CALLALT  9681--GOTO     9697--GOTO     9702--CALLALT  9706--CALLALT
      9710--CALLALT  9714--CALLALT  9718--CALLALT  9722--CALLALT  9727--CALLALT  9730--CALLALT  9734--CALLALT
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:149  
      9738--CALLALT  9742--CALLALT  9746--CALLALT  9750--CALLALT  9754--CALLALT  9759--CALLALT  9766--CALLALT
CREATE_FIRST_ED_WINDOW IN PROCEDURE EDITING_COMMAND_SEEN
     10515**LABEL   10567--EXIT
CURR$WINDOW
      6828**DCL      9038<>CALL
CURR$WINDOW.COMMAND
      6854**DCL      8852>>IF
CURR$WINDOW.DCB#
      6871**DCL      8855--IF       9037>>IF
CURR$WINDOW.OPERAND.EDIT_BLOCK$
      6869**DCL      8837>>IF       8850>>IF
CURR$WINDOW.OPERAND.STREAM$ IN PROCEDURE CLEAN_UP_AFTER_COMMAND
     11249**DCL     11276>>IF      11278>>CALL
CURR$WINDOW IN PROCEDURE PROCESS_COMMAND
      9357**DCL      9622<>CALL
CURR$WINDOW.OPERAND IN PROCEDURE PROCESS_COMMAND
      9396**DCL      9652<>CALL
CURR$WINDOW.OPERAND.INTREE$ IN PROCEDURE PROCESS_COMMAND
      9398**DCL      9611<<ASSIGN   9614>>ASSIGN   9700>>IF
CURR_WINDOW IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10699**DCL     10689--PROC
CURR_WINDOW.OPERAND.EDIT_BLOCK$ IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10740**DCL     11064>>ASSIGN
CURR_WINDOW.OPERAND.EVAL$ IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10740**DCL     11096>>CALL
CURR_WINDOW$
      6790**DCL      6828--IMP-PTR  8849<<ASSIGN   8850>>IF       8852>>IF       8855>>IF       9037>>IF
      9038>>CALL
CURR_WINDOW$ IN PROCEDURE CLEAN_UP_AFTER_COMMAND
     11197**DCL     11208--IMP-PTR 11270<<ASSIGN  11272<<ASSIGN  11274>>IF      11276>>IF      11278>>CALL
CURR_WINDOW$ IN PROCEDURE PROCESS_COMMAND
      9259**DCL      9357--IMP-PTR  9598<<ASSIGN   9611>>ASSIGN   9614>>ASSIGN   9622>>CALL     9652>>CALL
      9664<<ASSIGN   9703<<ASSIGN
DELFID_CMD IN PROCEDURE PROCESS_COMMAND
      9263**DCL      9631<<ASSIGN   9635<<ASSIGN   9726>>IF
EDIT$BLOCK.FILE_KEY IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:150  
     10958**DCL     11080>>ASSIGN
EDIT$BLOCK.FILE_KEY.REP# IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10960**DCL     11080>>IF
EDIT$BLOCK.FILE_KEY.V$ IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10960**DCL     11080>>CALL    11080>>CALL
EDIT$BLOCK.OPTIONS.COMPONENT# IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     11043**DCL     11112>>ASSIGN
EDIT$BLOCK.OPTIONS.EXIST# IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     11044**DCL     11117>>ASSIGN
EDIT$BLOCK.OPTIONS.KEY_INCR IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     11055**DCL     11132>>ASSIGN
EDIT$BLOCK.OPTIONS.KEY_INCR.REP# IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     11057**DCL     11132>>IF
EDIT$BLOCK.OPTIONS.KEY_INCR.V$ IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     11057**DCL     11132>>CALL    11132>>CALL
EDIT$BLOCK.OPTIONS.LEVEL# IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     11043**DCL     11110>>ASSIGN
EDIT$BLOCK.OPTIONS.PROTECT# IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     11043**DCL     11115>>ASSIGN
EDIT$BLOCK.OPTIONS.STRUCTURE$ IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     11043**DCL     11107>>ASSIGN
EDIT$BLOCK.RANGE IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10972**DCL     11083<>CALL    11096<>CALL
EDITING_COMMANDS IN PROCEDURE PROCESS_COMMAND
      9582**LABEL    9596--EXIT
EDITING_COMMAND_SEEN
      9908**PROC     9592--CALL    11289--CALL
EDITING_COMMAND_SEEN_FAILED IN PROCEDURE CLEAN_UP_AFTER_COMMAND
     11286**LABEL   11289--CALLALT
EDITING_COMMAND_SEEN_FAILED IN PROCEDURE PROCESS_COMMAND
      9829**LABEL    9592--CALLALT
EDIT_BLOCK$ IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10910**DCL     10922--IMP-PTR 11064<<ASSIGN  11080>>ASSIGN  11080>>IF      11080>>CALL    11080>>CALL
     11083>>CALL    11107>>ASSIGN  11110>>ASSIGN  11112>>ASSIGN  11115>>ASSIGN  11117>>ASSIGN  11132>>ASSIGN
     11132>>IF      11132>>CALL    11132>>CALL
ED_WINDOW_BLOCK_WRITE_FAILED IN PROCEDURE EDITING_COMMAND_SEEN
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:151  
     10606**LABEL   10581--CALLALT
ED_WINDOW_NODE$
      6788**DCL      8827<<ASSIGN   8828>>IF       8830<<ASSIGN   8830>>ASSIGN   8831>>IF       8832<<ASSIGN
      8835>>ASSIGN   8837>>IF       8844>>DOWHILE  8849>>ASSIGN   8873<>CALL     8877>>IF       8878>>ASSIGN
ED_WINDOW_PFLUSH_FAILED IN PROCEDURE EDITING_COMMAND_SEEN
     10617**LABEL   10584--CALLALT
ED_WINDOW_WRITE_FAILED IN PROCEDURE EDITING_COMMAND_SEEN
     10606**LABEL   10574--CALLALT
END_NOT_LAST_FAILURE IN PROCEDURE PROCESS_COMMAND
      9816**LABEL    9765--GOTO
ERR_CODE
      6808**DCL      9053<<ASSIGN
ERR_CODE.FCG
      6812**DCL      9054>>IF
EXPAND_COMMAND_WINDOW_FAILED
      9068**LABEL    8899--CALLALT  8902--CALLALT
F$DCB.ACTPOS
      8751**DCL      8751--REDEF
F$DCB.ARS#
      8725**DCL      8725--REDEF
F$DCB.ATTR
      8744**DCL      8745--REDEF
F$DCB.BORROW
      8759**DCL      8759--REDEF    8759--REDEF    8759--REDEF
F$DCB.DCBNAME.L
      8773**DCL      8773--IMP-SIZ
F$DCB.EOMCHAR#
      8729**DCL      8729--REDEF    8914>>ASSIGN
F$DCB.FCD#
      8738**DCL      8855>>IF       8971>>IF
F$DCB.FLDID
      8754**DCL      8754--REDEF
F$DCB.FORM$
      8748**DCL      8748--REDEF
F$DCB.FSECT
      8764**DCL      8764--REDEF
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:152  
F$DCB.FSN#
      8741**DCL      8741--REDEF    8741--REDEF    8742--REDEF
F$DCB.HEADER$
      8747**DCL      8747--REDEF
F$DCB.IXTNSIZE#
      8745**DCL      8745--REDEF
F$DCB.LASTSTA$
      8734**DCL      8734--REDEF
F$DCB.LVL
      8760**DCL      8760--REDEF
F$DCB.NAME#.C
      8735**DCL      8735--REDEF
F$DCB.NOEOF
      8757**DCL      8757--REDEF
F$DCB.NRECS#
      8746**DCL      8746--REDEF
F$DCB.NRECX
      8765**DCL      8765--REDEF
F$DCB.OHDR
      8757**DCL      8757--REDEF
F$DCB.ORG#
      8740**DCL      8740--REDEF
F$DCB.PRECNO
      8763**DCL      8763--REDEF
F$DCB.RCSZ
      8769**DCL      8769--REDEF
F$DCB.RES#
      8736**DCL      8736--REDEF    8966>>IF
F$DCB.SETX
      8748**DCL      8748--REDEF
F$DCB.TAB$
      8748**DCL      8748--REDEF
F$DCB.TDA
      8762**DCL      8763--REDEF
F$DCB.WSN#
      8736**DCL      8736--REDEF
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:153  
FATAL$ERR.ERR
      7308**DCL      9829>>IF
FIRST_ED_WIN_BLOCK_LOC IN PROCEDURE EDITING_COMMAND_SEEN
     10006**DCL     10523>>ASSIGN
FIRST_ED_WIN_LOC IN PROCEDURE EDITING_COMMAND_SEEN
      9929**DCL     10522>>ASSIGN
FLUSH_CMD_STREAMS
      9078**LABEL    9091--EXIT     9095--EXIT
FOREVER_LOOP
      8825**LABEL    9155--GOTO
FREE$EVAL IN PROCEDURE EDITING_COMMAND_SEEN
     10273**DCL     10594<>CALL
FREE$EVAL.BLINK$ IN PROCEDURE EDITING_COMMAND_SEEN
     10299**DCL     10593>>ASSIGN
FREE_EVAL$ IN PROCEDURE EDITING_COMMAND_SEEN
     10112**DCL     10273--IMP-PTR 10590<<ASSIGN  10592>>DOWHILE 10593>>ASSIGN  10594>>CALL    10596<<ASSIGN
GETCMD_FAILED
      9053**LABEL    8909--GOTO
GOT_WREAD_ERROR
      6795**DCL      9040<<ASSIGN
INDX
      6815**DCL      9105<<ASSIGN   9106>>DOWHILE  9106>>DOWHILE  9108<<ASSIGN   9108>>ASSIGN   9110>>IF
      9115>>ASSIGN   9118>>ASSIGN   9128>>CALL     9132>>ASSIGN   9134>>ASSIGN   9136>>ASSIGN   9136>>ASSIGN
IOPEN_FAILED IN PROCEDURE PROCESS_COMMAND
      9819**LABEL    9636--CALLALT
IRANGE_FAILED IN PROCEDURE PROCESS_COMMAND
      9819**LABEL    9652--CALLALT
IT$ADJUST.MOVEMENTS$
      8186**DCL     11088>>ASSIGN  11090<<ASSIGN
IT$ADJUST.MOVEMENTS_TAIL$
      8187**DCL      9632>>IF
IT$BLOCK_EXPR IN PROCEDURE PROCESS_COMMAND
      9423**DCL      9622<>CALL
IT$BLOCK_EXPR.DOMAINN IN PROCEDURE PROCESS_COMMAND
      9449**DCL      9616>>IF
IT$BLOCK_EXPR.SELECTS_TAIL$ IN PROCEDURE PROCESS_COMMAND
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:154  
      9563**DCL      9632>>IF
IT$COMMAND
      6894**DCL      8936<>CALL     8953<>CALL     9065<>CALL
IT$COMMAND.CODE#
      6920**DCL     10513>>IF      10525>>IF      11288<<ASSIGN
IT$COMMAND.FLAGS
      6921**DCL     10529>>IF      10537>>IF
IT$COMMAND.PARAM$
      6921**DCL     10526>>IF      10527>>ASSIGN  10533>>IF      10534>>ASSIGN  10557>>IF
IT$COMMAND IN PROCEDURE PROCESS_COMMAND
      9274**DCL      9734<>CALL     9738<>CALL     9742<>CALL     9746<>CALL     9750<>CALL     9754<>CALL
      9759<>CALL     9766<>CALL
IT$COMMAND.CMDLINE_INDEX# IN PROCEDURE PROCESS_COMMAND
      9300**DCL      9828>>ASSIGN
IT$COMMAND.CODE# IN PROCEDURE PROCESS_COMMAND
      9300**DCL      9569>>DOCASE   9594>>IF       9616>>IF       9629>>IF       9629>>IF       9632>>IF
      9646>>DOCASE   9770<>CALL
IT$COMMAND.FLINK$ IN PROCEDURE PROCESS_COMMAND
      9300**DCL      9763>>IF       9783>>ASSIGN
IT$COMMAND.PARAM$ IN PROCEDURE PROCESS_COMMAND
      9301**DCL      9611>>ASSIGN   9612<<ASSIGN
IT$COMMAND.PT_BLOCK_EXPR$ IN PROCEDURE PROCESS_COMMAND
      9301**DCL      9594>>IF       9605>>IF       9606>>CALL     9608<<ASSIGN   9670>>CALL     9672<<ASSIGN
IT$OPERAND.CODE#
      8223**DCL      9632>>IF      11093<<ASSIGN
IT$OPERAND.FLINK$
      8223**DCL     11088<<ASSIGN
IT$OPERAND.OPTIONS.POINT#
      8236**DCL     11092<<ASSIGN
IT$OPERAND.PARAM$
      8253**DCL     11094<>CALL    11096>>CALL
IT$OPERAND.PARENT$
      8223**DCL     11089<<ASSIGN
IT$SELECT.ADJUSTS$
      8290**DCL     11085>>ASSIGN
IT$SELECT.ADJUSTS_TAIL$
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:155  
      8290**DCL      9632>>IF
IT_BLOCK_EXPR IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10765**DCL     10689--PROC
IT_BLOCK_EXPR.DOMAINN.FILE_KEY IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10803**DCL     11080<<ASSIGN
IT_BLOCK_EXPR.DOMAINN.FILE_KEY.V$ IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10805**DCL     11080<>CALL
IT_BLOCK_EXPR.DOMAINN.RANGE IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10817**DCL     11083<>CALL
IT_BLOCK_EXPR.OPTIONS.COMPONENT# IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10888**DCL     11111>>IF      11112<<ASSIGN
IT_BLOCK_EXPR.OPTIONS.EXIST# IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10889**DCL     11116>>IF      11117<<ASSIGN
IT_BLOCK_EXPR.OPTIONS.KEY_INCR IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10900**DCL     11132<<ASSIGN
IT_BLOCK_EXPR.OPTIONS.KEY_INCR.V$ IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10902**DCL     11132<>CALL
IT_BLOCK_EXPR.OPTIONS.LEVEL# IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10888**DCL     11109>>IF      11110<<ASSIGN
IT_BLOCK_EXPR.OPTIONS.PROTECT# IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10888**DCL     11114>>IF      11115<<ASSIGN
IT_BLOCK_EXPR.OPTIONS.STRUCTURE$ IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10888**DCL     11106>>IF      11107<<ASSIGN
IT_BLOCK_EXPR.SELECTS$ IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10905**DCL     11085>>ASSIGN
IT_BLOCK_EXPR$ IN PROCEDURE PROCESS_COMMAND
      9260**DCL      9423--IMP-PTR  9614<<ASSIGN   9616>>IF       9622>>CALL     9632>>IF
IT_COMMAND$
      6791**DCL      6894--IMP-PTR  8925<<ASSIGN   8926<>CALL     8929>>IF       8930>>ASSIGN   8932>>DOWHILE
      8933<>CALL     8945<<ASSIGN   8946>>DOWHILE  8947<>CALL    10513>>IF      10525>>IF      10526>>IF
     10527>>ASSIGN  10529>>IF      10533>>IF      10534>>ASSIGN  10537>>IF      10557>>IF      11288>>ASSIGN
IT_COMMAND$ IN PROCEDURE PROCESS_COMMAND
      9246**DCL      9243--PROC     9274--IMP-PTR  9569>>DOCASE   9594>>IF       9594>>IF       9605>>IF
      9606>>CALL     9608>>ASSIGN   9611>>ASSIGN   9612>>ASSIGN   9616>>IF       9629>>IF       9629>>IF
      9632>>IF       9646>>DOCASE   9670>>CALL     9672>>ASSIGN   9734>>CALL     9738>>CALL     9742>>CALL
      9746>>CALL     9750>>CALL     9754>>CALL     9757<<ASSIGN   9759>>CALL     9763>>IF       9766>>CALL
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:156  
      9770>>CALL     9782>>IF       9783<<ASSIGN   9783>>ASSIGN   9828>>ASSIGN
IT_TEMP$ IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10911**DCL     11085<<ASSIGN  11088>>ASSIGN  11089>>ASSIGN  11090>>ASSIGN  11091<<ASSIGN  11092>>ASSIGN
     11093>>ASSIGN  11094>>CALL    11096>>CALL
LDELETE_FAILED IN PROCEDURE EDITING_COMMAND_SEEN
     10606**LABEL   10538--CALLALT
M$6E
      6556**DCL      8966--IF
M$ME
      6557**DCL      8971--IF
M$SI
      6558**DCL      9089>>IF
NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     10689**PROC     9622--CALL
NEW_EDIT_BLOCK_IN_OLD_FAILED IN PROCEDURE PROCESS_COMMAND
      9829**LABEL    9622--CALLALT
NEXT_EVAL$ IN PROCEDURE EDITING_COMMAND_SEEN
     10113**DCL     10593<<ASSIGN  10596>>ASSIGN
NFLUSH_FAILED
      9068**LABEL    8868--CALLALT  8886--CALLALT
NODE$ IN PROCEDURE EDITING_COMMAND_SEEN
     10109**DCL     10542<<ASSIGN  10543>>ASSIGN  10544>>DOUNTIL 10545>>ASSIGN  10546>>IF      10550<<ASSIGN
     10550>>ASSIGN
OALLOC_FAILED
      9154**LABEL    9055--CALLALT  9101--CALLALT  9128--CALLALT  9147--CALLALT
OALLOC_FAILED IN PROCEDURE EDITING_COMMAND_SEEN
     10617**LABEL   10519--CALLALT 10577--CALLALT
OALLOC_FAILED IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     11132**LABEL   11086--CALLALT 11094--CALLALT
OALLOC_FAILED IN PROCEDURE PROCESS_COMMAND
      9829**LABEL    9656--CALLALT  9816--CALLALT
OCOPY_RANGE_FAILED IN PROCEDURE NEW_EDIT_BLOCK_IN_OLD_DOMAIN
     11141**LABEL   11083--CALLALT 11096--CALLALT
OFREE_FAILED
      9154**LABEL    8936--CALLALT  8953--CALLALT  9065--CALLALT  9143--CALLALT
OFREE_FAILED IN PROCEDURE EDITING_COMMAND_SEEN
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:157  
     10617**LABEL   10554--CALLALT 10558--CALLALT 10594--CALLALT 10604--CALLALT
P$PCB.HI_CHAR
      8688**DCL      9059>>ASSIGN
PARSE_TREE_TO_INTREE_FAILED
      9065**LABEL    8926--CALLALT
PBLOCK_EXPR_FAILED IN PROCEDURE PROCESS_COMMAND
      9819**LABEL    9606--CALLALT
PFLUSH_FAILED IN PROCEDURE CLEAN_UP_AFTER_COMMAND
     11286**LABEL   11278--CALLALT 11284--CALLALT
PREV_IT_COMMAND$
      6792**DCL      6932--IMP-PTR  8922<<ASSIGN
PROCESS_COMMAND
      9243**PROC     8933--CALL     8947--CALL
PROCESS_COMMAND_FAILED
      9068**LABEL    8933--CALLALT  8947--CALLALT
READ_EDITING_WINDOW
      8844**LABEL    8851--EXIT
SAVE_SCREEN IN PROCEDURE PROCESS_COMMAND
      9262**DCL      9686<<ASSIGN   9693>>ASSIGN
SHOW_PBLOCK_EXPR_FAILED IN PROCEDURE PROCESS_COMMAND
      9675**LABEL    9670--CALLALT
SHRINK_COMMAND_WINDOW_FAILED
      9068**LABEL    8858--CALLALT
SIGNAL IN PROCEDURE PROCESS_COMMAND
      9261**DCL      9652<>CALL     9655>>IF       9666<<ASSIGN   9675<<ASSIGN   9680>>IF       9690<<ASSIGN
      9697>>IF
SINK$
      6817**DCL      9147<>CALL    11086<>CALL    11088>>ASSIGN  11089>>ASSIGN  11090>>ASSIGN  11091>>ASSIGN
SUBST$NUMBER.OBJECT.CLASS#
      7409**DCL      9138<<ASSIGN
SUBST$NUMBER.V#
      7411**DCL      9139<<ASSIGN
SUBST$POINTER.OBJECT.CLASS#
      7454**DCL      9117<<ASSIGN   9131<<ASSIGN
SUBST$POINTER.V$
      7456**DCL      9122<<ASSIGN   9132<<ASSIGN
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:158  
SUBST_FIELD$
      6799**DCL      7377--IMP-PTR  7430--IMP-PTR  9103<<ASSIGN   9117>>ASSIGN   9122>>ASSIGN   9131>>ASSIGN
      9132>>ASSIGN   9138>>ASSIGN   9139>>ASSIGN
VD$BUFFER.LENGTH#
      7603**DCL      7605--IMP-SIZ  9086>>IF
VD$ERR
      7218**DCL      9103--ASSIGN
VD$ERR.CMDLINE_INDEX#
      7260**DCL      9059<<ASSIGN   9827>>IF       9828<<ASSIGN
VD$ERR.ERR
      7255**DCL      9057<<ASSIGN
VD$ERR.ERR.CODE#
      7257**DCL      9114<<ASSIGN   9127<<ASSIGN   9657<<ASSIGN   9818<<ASSIGN
VD$ERR.FLAGLEV#
      7260**DCL      9058<<ASSIGN   9104<<ASSIGN   9658<<ASSIGN   9819<<ASSIGN
VD$ERR_TAIL.DCB#
      7366**DCL      9037>>IF
VD$ERR_TAIL.ERR.CODE#
      7363**DCL      9030>>IF
VD$ERR_TAIL.ERR.MON
      7363**DCL      9030>>IF
VD$EVAL.BLINK$
      7892**DCL     10590>>ASSIGN  10591<<ASSIGN
VD$EVAL.CTRL_REC_MATCHED_EOF
      8100**DCL     10599<<ASSIGN
VD$EVAL.RANGE
      7972**DCL     11096<>CALL
VD$EVAL.STATE#
      8100**DCL     10601<<ASSIGN
VD$FILE_NODE.DESC.KEY.V$
      7532**DCL     10531>>ASSIGN  10543>>ASSIGN  10545<<ASSIGN  10559>>DOWHILE
VD$FILE_NODE.DESC.SPEC.V$
      7546**DCL      8837>>IF       8849>>ASSIGN   9598>>ASSIGN   9664>>ASSIGN   9700>>IF       9703>>ASSIGN
     10588>>ASSIGN  11270>>ASSIGN
VD$FILE_NODE.FLINK$
      7493**DCL      8830>>ASSIGN   8832>>ASSIGN  10550>>ASSIGN  10561>>IF      10562>>ASSIGN  10564>>ASSIGN
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:159  
     10620>>ASSIGN
VD$FILE_NODE.HEAD$
      7550**DCL      8832>>ASSIGN
VD$FILE_NODE.OBJECT.CLASS#
      7491**DCL     10618>>IF
VD$IT_BLOCK_EXPR
      7618**DCL     10604<>CALL
VD$KEY_NUMBER.BYTES#
      8304**DCL     10524<<ASSIGN  10534<<ASSIGN
VD$NUMBER.V#
      8349**DCL     10527>>ASSIGN  10534>>ASSIGN
VD$PORT
      7768**DCL     10584<>CALL    11278<>CALL    11284<>CALL
VD$PORT.CURRENT.KEY.V$
      7835**DCL     10548<<ASSIGN
VD$PORT.LEVEL.INTERNAL$
      7855**DCL      8832>>ASSIGN  10546>>IF
VD$STREAM.PORT$
      8386**DCL      8832>>ASSIGN  11276>>IF      11278>>CALL    11282>>IF      11284>>CALL
VD$TEXTC_REMOTE
      8483**DCL     11080<>CALL    11132<>CALL
VD$TEXTC_REMOTE.BYTES
      8514**DCL      9136<<ASSIGN
VD$TEXTC_REMOTE.LENGTH#
      8512**DCL      8514--IMP-SIZ  9132--ASSIGN   9134<<ASSIGN   9136>>ASSIGN  11080>>CALL    11132>>CALL
VDA$LDELETE
      6121**DCL-ENT 10538--CALL
VDA$LWRITE
      6122**DCL-ENT 10574--CALL    10581--CALL
VDA$PFLUSH
      6123**DCL-ENT 10584--CALL    11278--CALL    11284--CALL
VDE$IOPEN
      6132**DCL-ENT  9636--CALL
VDE$IRANGE
      6133**DCL-ENT  9652--CALL
VDE$PBLOCK_EXPR
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:160  
      6129**DCL-ENT  9606--CALL     9670--CALL
VDG$EREPORT_ERROR
      6140**DCL-ENT  8961--CALL     9152--CALL     9161--CALL
VDG$ESCREECH
      6141**DCL-ENT  8853--CALL     9111--CALL     9770--CALL
VDG$EXPAND_COMMAND_WINDOW
      6135**DCL-ENT  8899--CALL     8902--CALL     8972--CALL     9684--CALL
VDG$OALLOC
      6136**DCL-ENT  9055--CALL     9101--CALL     9128--CALL     9147--CALL     9656--CALL     9816--CALL
     10519--CALL    10577--CALL    11086--CALL    11094--CALL
VDG$OCOPY
      6138**DCL-ENT 11080--CALL    11132--CALL
VDG$OCOPY_RANGE
      6139**DCL-ENT 11083--CALL    11096--CALL
VDG$OFREE
      6137**DCL-ENT  8936--CALL     8953--CALL     9065--CALL     9143--CALL    10554--CALL    10558--CALL
     10594--CALL    10604--CALL    10616--CALL
VDG$SHRINK_COMMAND_WINDOW
      6134**DCL-ENT  8858--CALL     9589--CALL
VDI$CAFTER
      6149**DCL-ENT  9718--CALL
VDI$CCOPY
      6147**DCL-ENT  9674--CALL     9710--CALL
VDI$CDELETE
      6151**DCL-ENT  9727--CALL
VDI$CDELETE_FID
      6152**DCL-ENT  9730--CALL
VDI$CDISPLAY
      6146**DCL-ENT  9706--CALL
VDI$CEDIT
      6145**DCL-ENT  9662--CALL     9702--CALL
VDI$CEND
      6154**DCL-ENT  9766--CALL
VDI$CEQUALS
      6153**DCL-ENT  9734--CALL
VDI$CKEYIN
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:161  
      6155**DCL-ENT  9746--CALL
VDI$CLOCATION
      6156**DCL-ENT  9738--CALL
VDI$CMOVE
      6148**DCL-ENT  9714--CALL
VDI$COVER
      6150**DCL-ENT  9722--CALL
VDI$CREAD
      6157**DCL-ENT  9754--CALL
VDI$CRESTORE
      6158**DCL-ENT  9759--CALL
VDI$CSAVE
      6159**DCL-ENT  9750--CALL
VDI$CSHOW
      6160**DCL-ENT  9688--CALL
VDI$CSYNONYM
      6161**DCL-ENT  9742--CALL
VDI$PARSE_TREE_TO_INTREE
      6124**DCL-ENT  8926--CALL
VDI$PREAD_FILE_CLOSE
      6126**DCL-ENT  9092--CALL     9126--CALL
VDI$PREAD_FILE_OPEN
      6127**DCL-ENT  9093--CALL
VDI$PREAD_FILE_POSITION
      6128**DCL-ENT  9094--CALL
VDI$PREMOVE_EDIT_BLOCK
      6125**DCL-ENT  9033--CALL
VDP$NFLUSH
      6118**DCL-ENT  8868--CALL     8886--CALL
VDP$WERASE
      6119**DCL-ENT  9038--CALL
VDP$WINIT
      6142**DCL-ENT  8969--CALL
VDP$WREAD
      6120**DCL-ENT  8873--CALL
VD_$$QUAC.V#
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:162  
      6601**DCL      9089>>IF
VD_$COMMAND.V#
      6691**DCL      8844>>DOWHILE  9588>>IF
VD_$MIN_COMMAND.V#
      6736**DCL      8858<>CALL     8898>>IF       8899<>CALL     9589<>CALL
VD_$SCREEN.V#
      6646**DCL      8971>>IF       8972<>CALL     9682>>IF       9684<>CALL     9686>>ASSIGN   9687<<ASSIGN
      9693<<ASSIGN
VD_6E.CMD_STREAM$
      6195**DCL      6970--IMP-PTR  8844>>DOWHILE  8885>>IF       8916>>IF       8930>>ASSIGN   8931>>ASSIGN
      8936>>CALL     8938>>ASSIGN   8939>>ASSIGN   8944>>IF       8945>>ASSIGN   8952>>IF       8953>>CALL
      8955>>ASSIGN   8956>>ASSIGN   9065>>CALL     9067>>ASSIGN   9068>>ASSIGN   9077>>IF       9082>>DOUNTIL
      9084>>IF       9084>>IF       9086>>IF       9086>>IF       9089>>IF       9090>>IF       9097>>IF
      9097>>IF       9115>>ASSIGN   9116>>ASSIGN   9119>>CALLBLT  9119>>CALLBLT  9122>>ASSIGN   9134>>ASSIGN
      9136>>ASSIGN   9139>>ASSIGN   9143>>CALL     9149>>ASSIGN
VD_6E.ERR_HEAD$
      6196**DCL      7271--IMP-PTR  8960>>IF       9829>>IF
VD_6E.ERR_TAIL$
      6196**DCL      7324--IMP-PTR  8960>>IF       9030>>IF       9030>>IF       9037>>IF       9827>>IF
      9828>>ASSIGN
VD_6E.SOURCE.OPERAND.STREAM$
      6193**DCL     11282>>IF      11284>>CALL
VD_6E.STATS#
      6197**DCL      9650<<ASSIGN   9650>>ASSIGN
VD_6E.STATS_TOKENS#
      6198**DCL      8920<<ASSIGN   8920>>ASSIGN
VD_6E.WINDOWS$
      6178**DCL      7009--IMP-PTR  8832>>ASSIGN  10538>>CALL    10546>>IF      10548>>ASSIGN  10574>>CALL
     10581>>CALL    10584>>CALL
VD_ASYM
      6549**DCL      8912--IF
VD_CMD_OBJECTS$
      6543**DCL      9106>>DOWHILE  9115<<ASSIGN   9118>>ASSIGN   9128<>CALL     9132>>ASSIGN   9134>>ASSIGN
      9136>>ASSIGN   9136>>ASSIGN
VD_COMMAND_LINE
      6548**DCL      8905--ASSIGN
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:163  
VD_COMMAND_WINDOW$
      6539**DCL      9669>>ASSIGN   9677>>IF      10540>>IF      10542>>ASSIGN  10564>>ASSIGN  10620>>ASSIGN
VD_CURRENT_WINDOW$
      6538**DCL      8827>>ASSIGN   8835<<ASSIGN   8878<<ASSIGN   9598>>ASSIGN   9664>>ASSIGN   9668>>IF
      9669<<ASSIGN   9677>>IF       9678<<ASSIGN   9699>>IF       9700>>IF       9703>>ASSIGN  10513>>IF
     10529>>IF      10531>>ASSIGN  10559>>DOWHILE 10561>>IF      10562<<ASSIGN  10562>>ASSIGN  10564<<ASSIGN
     10588>>ASSIGN  10617>>IF      10618>>IF      10620<<ASSIGN  11269>>IF      11270>>ASSIGN
VD_EDITING_HEIGHT
      6551**DCL     10521>>ASSIGN
VD_EDITING_WINDOWS
      6552**DCL      8968>>IF      10524>>ASSIGN
VD_ERR$
      6798**DCL      7218--IMP-PTR  9055<>CALL     9057>>ASSIGN   9058>>ASSIGN   9059>>ASSIGN   9079<<ASSIGN
      9091>>IF       9101<>CALL     9103>>ASSIGN   9104>>ASSIGN   9114>>ASSIGN   9127>>ASSIGN   9656<>CALL
      9657>>ASSIGN   9658>>ASSIGN   9816<>CALL     9818>>ASSIGN   9819>>ASSIGN
VD_FORCE_READ_FROM
      6541**DCL      8819<<ASSIGN   8844>>DOWHILE  8844>>DOWHILE  8897<<ASSIGN   9154<<ASSIGN   9682>>IF
      9695>>IF       9696<<ASSIGN
VD_IBEX_WINDOW
      6553**DCL      8968>>IF
VD_LAST_CWIN_ACTIVITY
      6542**DCL      8872<<ASSIGN   8908<<ASSIGN   8911<<ASSIGN
VD_OLD_$SCREEN
      6554**DCL      9588>>IF
VD_WORST_FLAGLEV
      6550**DCL      8821>>IF
WARN_ABORTED_BUFFER
      6796**DCL      9083<<ASSIGN   9088<<ASSIGN   9097>>IF       9113>>IF
WINDOW$SPEC IN PROCEDURE EDITING_COMMAND_SEEN
     10207**DCL     10554<>CALL    10558<>CALL    10616<>CALL
WINDOW$SPEC.COORDS.HEIGHT# IN PROCEDURE EDITING_COMMAND_SEEN
     10234**DCL     10521<<ASSIGN  10527<<ASSIGN
WINDOW$SPEC.OPERAND.EVAL$ IN PROCEDURE EDITING_COMMAND_SEEN
     10248**DCL     10589>>IF      10590>>ASSIGN  10591>>ASSIGN  10599>>ASSIGN  10601>>ASSIGN
WINDOW$SPEC.OPERAND.INTREE$ IN PROCEDURE EDITING_COMMAND_SEEN
     10248**DCL     10604>>CALL    10606<<ASSIGN
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:164  
WINDOWS$STREAM
      7009**DCL     10538<>CALL    10574<>CALL    10581<>CALL
WINDOWS$STREAM.PORT$
      7035**DCL     10546>>IF      10548>>ASSIGN  10584>>CALL
WINDOW_SPEC$ IN PROCEDURE EDITING_COMMAND_SEEN
     10108**DCL     10207--IMP-PTR 10588<<ASSIGN  10589>>IF      10590>>ASSIGN  10591>>ASSIGN  10599>>ASSIGN
     10601>>ASSIGN  10604>>CALL    10606>>ASSIGN
WLOC IN PROCEDURE EDITING_COMMAND_SEEN
     10136**DCL     10538<>CALL
WLOC.ENDD IN PROCEDURE EDITING_COMMAND_SEEN
     10178**DCL     10523<<ASSIGN  10581<>CALL
WLOC.ENDD.KEY IN PROCEDURE EDITING_COMMAND_SEEN
     10190**DCL     10536<<ASSIGN  10570<<ASSIGN
WLOC.START IN PROCEDURE EDITING_COMMAND_SEEN
     10150**DCL     10522<<ASSIGN  10524--ASSIGN  10534--ASSIGN  10574<>CALL
WLOC.START.KEY IN PROCEDURE EDITING_COMMAND_SEEN
     10162**DCL     10536>>ASSIGN  10570>>ASSIGN
WLOC.START.KEY.V$ IN PROCEDURE EDITING_COMMAND_SEEN
     10164**DCL     10531<<ASSIGN  10559>>DOWHILE
WREAD_FAILED
      9030**LABEL    8873--CALLALT
WSPEC IN PROCEDURE EDITING_COMMAND_SEEN
     10122**DCL     10574<>CALL    10581<>CALL    10615>>IF
WSPEC.REP# IN PROCEDURE EDITING_COMMAND_SEEN
     10126**DCL     10573<<ASSIGN  10580<<ASSIGN
WSPEC.TYPE# IN PROCEDURE EDITING_COMMAND_SEEN
     10126**DCL     10572<<ASSIGN  10579<<ASSIGN
WSPEC.V$ IN PROCEDURE EDITING_COMMAND_SEEN
     10126**DCL     10519<>CALL    10521>>ASSIGN  10527>>ASSIGN  10554>>CALL    10558>>CALL    10577<>CALL
     10616>>CALL
XUG$GETCMD
      5903**DCL-ENT  8906--CALL
XUG_GETCMD
      6213**DCL      8906<>CALL
XUG_GETCMD.ERR#
      6224**DCL      9053>>ASSIGN   9057>>ASSIGN
PL6.E3A0      #001=VDI$PDRIVER File=VDI$PARSE.:VDA5TSI                           FRI 07/04/97 11:33 Page:165  
XUG_GETCMD.INDCB#
      6384**DCL      8914--ASSIGN
XUG_GETCMD.NODES$
      6214**DCL      8905<<ASSIGN   8912>>IF
XUG_GETCMD.OUT$
      6218**DCL      6224--REDEF    8916>>IF       8918>>ASSIGN
XUG_GETCMD.PCB$
      6238**DCL      9059>>ASSIGN

PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:166  
     1324        1        /*T***********************************************************/
     1325        2        /*T*                                                         */
     1326        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1327        4        /*T*                                                         */
     1328        5        /*T***********************************************************/
     1329        6
     1330        7        /*D* NAME: VDI$PARSE_TREE_TO_INTREE
     1331        8            PARAMETERS:
     1332        9                PT_COMMAND_PARENT - The parent ParseTree node of the single command
     1333       10                    node to convert.
     1334       11                CMD_INDEX - Index into PT_COMMAND_PARENT's children of the single
     1335       12                    command node to convert.  This child node should have .CODE# =
     1336       13                    %T_xxx_CMD.  (Exception:  for the EQUALS command, this will be a
     1337       14                    T_DEF_NAME node, and the next child of PT_COMMAND_PARENT will be the
     1338       15                    T_EQUALS_CMD node.)
     1339       16                IT_COMMAND$ - A pointer:  either NIL; or it points to a cleared/NILd
     1340       17                    VD$IT_COMMAND InTree node.
     1341       18            INPUT:
     1342       19            OUTPUT:
     1343       20                IT_COMMAND$ will point to a (chain of) VD$IT_COMMAND node(s), which
     1344       21                    contain(s) the info from the ParseTree.  As such, the individual
     1345       22                    VD$IT_COMMAND nodes in the chain can be passed to any of the
     1346       23                    command handlers (VDI$Cxxx) for processing.
     1347       24                CMD_INDEX will be incremented beyond any PT_COMMAND_PARENT children
     1348       25                    which have been processed.
     1349       26            DESCRIPTION:
     1350       27                Based on the type of command, build an IT_COMMAND InTree node (or a
     1351       28                chain of 'em) with the info from the ParseTree node(s).
     1352       29        */
     1353       30
     1354       31        VDI$PARSE_TREE_TO_INTREE: PROC (PT_COMMAND_PARENT, CMD_INDEX, IT_COMMAND$)
     1355       32                  ALTRET;
     1356       33
     1357       34        %INCLUDE VD_MACROS_M;
     1358     2249        %INCLUDE VD_PERR_C;
     1359     2397        %INCLUDE VD_NODES0_E;
     1360     2489        %INCLUDE XUE_MACRO_C;
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:167  
     1361     3233        %INCLUDE XU_MACRO_C;
     1362     6327        %INCLUDE XU_SUBS_C;
     1363     6419        %INCLUDE B$TABLES_C;
     1364     6527
     1365     6528
     1366     6529        %PARSE$OUT (NAME=PT_COMMAND_PARENT, STCLASS=PARAM);
     1367     6574    1   DCL CMD_INDEX SBIN;
     1368     6575    1   DCL IT_COMMAND$ PTR;
     1369     6576
     1370     6577    1   DCL VDE$PSTRING         ENTRY (5) ALTRET;
     1371     6578    1   DCL VDE$PNUMBER         ENTRY (2) ALTRET;
     1372     6579    1   DCL VDG$ERRMSG          ENTRY (4) ALTRET;
     1373     6580    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1374     6581    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1375     6582    1   DCL VDG$ESCREECH        ENTRY (3);
     1376     6583
     1377     6584
     1378     6585        %VD_6E (STCLASS=SYMREF);
     1379     6621        %VD$POINTER (NAME=VD_$STRUCTURE, STCLASS=SYMREF);
     1380     6666        %B$XL_UPPER;
     1381     6670        %XUE_ECB (NAME=XUE_ECB, STCLASS=SYMREF);
     1382     6872    1   DCL VD_SCREEN_HEIGHT SBIN SYMREF;
     1383     6873    1   DCL VD_EDITING_HEIGHT SBIN SYMREF;
     1384     6874    1   DCL VD_EDITING_WINDOWS SBIN SYMREF;
     1385     6875    1   DCL VD_CURRENT_WINDOW$ PTR SYMREF;
     1386     6876        %VD$NUMBER (NAME=VD_$SCREEN, STCLASS=SYMREF);
     1387     6921        %VD$NUMBER (NAME=VD_$MIN_COMMAND, STCLASS=SYMREF);
     1388     6966        %VD$NUMBER (NAME=VD_$WI_PERCENT, STCLASS=SYMREF);
     1389     7011
     1390     7012
     1391     7013        %VD_BUFFER (NAME=ZERO_LENGTH_BUFFER, STCLASS=CONSTANT, IBYTES="''");
     1392     7073
     1393     7074
     1394     7075    1   DCL CMD_BLK$ PTR;
     1395     7076    1   DCL SYM_BLK$ PTR;
     1396     7077    1   DCL SYM_BLK SBIN;
     1397     7078    1   DCL RETCODE CHAR(1) CALIGNED;
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:168  
     1398     7079    1   DCL SINK SBIN;
     1399     7080    1   DCL WINDOW_SUBSCRIPT SBIN;
     1400     7081    1   DCL VD_BUFFER$ PTR;
     1401     7082    1   DCL VD_NUMBER$ PTR;
     1402     7083    1   DCL CTRL_FN_ARGS_ARRAY(0:%(MX_CTRL_FN_ARGS-1)) SBIN;
     1403     7084    1   DCL VD_ERR$ PTR;
     1404     7085    1   DCL SUBST_FIELD$ PTR;
     1405     7086
     1406     7087
     1407     7088        %VD$CMD_STREAM (NAME=CMD$STREAM, STCLASS="BASED(VD_6E.CMD_STREAM$)");
     1408     7127        %VD$IT_COMMAND (NAME=IT$COMMAND, STCLASS="BASED(IT_COMMAND$)");
     1409     7165        %PARSE$OUT (NAME=CMD$BLK, STCLASS="BASED(CMD_BLK$)");
     1410     7210        %PARSE$SYM (NAME=CMD$SYM, STCLASS="BASED(CMD_BLK$)");
     1411     7248        %PARSE$SYM (NAME=SYM$BLK, STCLASS="BASED(SYM_BLK$)");
     1412     7286        %VD$BUFFER (NAME=VD$BUFFER, STCLASS="BASED(VD_BUFFER$)");
     1413     7344        %VD$NUMBER (NAME=VD$NUMBER, STCLASS="BASED(VD_NUMBER$)");
     1414     7389        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     1415     7442        %VD$FILE_NODE;
     1416     7535        %VD$KEY_NUMBER;
     1417     7550        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     1418     7595        %VD$TEXTC;
     1419     7618        %VD$BUFFER_HEADER;
     1420     7654
     1421     7655    2           IF IT_COMMAND$ = ADDR(NIL) THEN DO;
     1422     7656    2              CALL VDG$OALLOC (%CLS_IT_COMMAND, IT_COMMAND$)
     1423     7657    2                ALTRET (OALLOC_FAILED);
     1424     7658    2              END;
     1425     7659
     1426     7660    1           CMD_BLK$ = PT_COMMAND_PARENT.SUBLK$ (CMD_INDEX);
     1427     7661                %INCREMENT (ARRAY=STATS_TOKENS#, INDX="CMD$BLK.CODE - %VD_BASE#");
     1428     7664    1           IT$COMMAND.CODE# = CMD$BLK.CODE;
     1429     7665    1           IF CMD_INDEX > 0 THEN
     1430     7666    1              IT$COMMAND.CMDLINE_INDEX# = CMD$BLK.CPOS;
     1431     7667
     1432     7668
     1433     7669    1   CMD_CODE_CASES:
     1434     7670    2           DO CASE (IT$COMMAND.CODE#);
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:169  
     1435     7671    2            CASE (%T_EDIT_CMD, %T_DISPLAY_CMD, %T_COPY_CMD, %T_AFTER_CMD,
     1436     7672    2             %T_DELETE_CMD, %T_OVER_CMD, %T_MOVE_CMD, %T_SHOW_CMD);
     1437     7673                   /*
     1438     7674                   *  The ParseTree for the editing commands (except the LOCATION
     1439     7675                   *  command) is:
     1440     7676                   *
     1441     7677                   *                        T_xxx_CMD
     1442     7678                   *                            |
     1443     7679                   *                       T_BLOCK_EXPR
     1444     7680                   */
     1445     7681    2              IT$COMMAND.PT_BLOCK_EXPR$ = CMD$BLK.SUBLK$ (0);
     1446     7682    2            CASE (%T_BLOCK_EXPR, %T_STRING_EXPR);
     1447     7683                   /*
     1448     7684                   *  This is an implicit (verb-less) editing command.
     1449     7685                   */
     1450     7686    2              IT$COMMAND.PT_BLOCK_EXPR$ = ADDR(CMD$BLK);
     1451     7687
     1452     7688
     1453     7689    2            CASE (%T_DEF_NAME);
     1454     7690                   /*
     1455     7691                   *  The ParseTree for the EQUALS command is actually TWO children
     1456     7692                   *  of the PT_COMMAND_PARENT node:
     1457     7693                   *
     1458     7694                   *      T_DEF_NAME             T_EQUALS_CMD
     1459     7695                   *          |                       |
     1460     7696                   *       .symbol          ----------------- (opt.) ---
     1461     7697                   *                        |                          |
     1462     7698                   *                  T_STRING_EXPR               T_IN_WINDOW
     1463     7699                   *                        |                          |
     1464     7700                   *                     XUE_EXP#                      |
     1465     7701                   *                                                one of:
     1466     7702                   *
     1467     7703                   *  T_COMMAND_WINDOW  or  T_EDITING_WINDOW  or  T_SPECIFIC_WINDOW
     1468     7704                   *                                                     |
     1469     7705                   *                                                T_STRING_EXPR
     1470     7706                   *                                                     |
     1471     7707                   *                                                  XUE_EXP#
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:170  
     1472     7708                   */
     1473     7709    2              SYM_BLK$ = CMD$BLK.SUBLK$ (0);
     1474     7710    2              CALL XLATE (SYM$BLK.TEXT, B$XL_UPPER, SYM$BLK.TEXT);
     1475     7711    2              CALL MAKE_TEXTC_REMOTE (SYM$BLK.TEXTC$ -> VD$TEXTC,
     1476     7712    2                IT$COMMAND.PARAM$ (%CP_EQ_NAME))
     1477     7713    2                ALTRET (MAKE_TEXTC_REMOTE_FAILED);
     1478     7714
     1479     7715    2              CMD_INDEX = CMD_INDEX + 1;
     1480     7716    2              CMD_BLK$ = PT_COMMAND_PARENT.SUBLK$ (CMD_INDEX);
     1481     7717    2              IT$COMMAND.CODE# = CMD$BLK.CODE;
     1482     7718                   %INCREMENT (ARRAY=STATS_TOKENS#, INDX="CMD$BLK.CODE - %VD_BASE#");
     1483     7721
     1484     7722                   %INCREMENT (ARRAY=STATS_TOKENS#,
     1485     7723                   INDX="CMD$BLK.SUBLK$ (0) -> CMD$BLK.CODE - %VD_BASE#");
     1486     7726    2              CALL VDE$PSTRING
     1487     7727    2                (CMD$BLK.SUBLK$ (0) -> CMD$BLK.SUBLK$ (0) -> CMD$BLK, SINK)
     1488     7728    2                ALTRET (PSTRING_FAILED);
     1489     7729
     1490     7730    3              IF XUE_ECB.OUT$ ~= ADDR(NIL) THEN DO;
     1491     7731    3                 CALL VDG$OALLOC (%CLS_BUFFER, IT$COMMAND.PARAM$ (%CP_EQ_VALUE),
     1492     7732    3                   (LENGTHC(VD$BUFFER_HEADER) + XUE_ECB.OUT$ -> VD$TEXTC.LENGTH# +
     1493     7733    3                   %NB_PER_WORD-1) / %NB_PER_WORD) ALTRET (OALLOC_FAILED);
     1494     7734    3                 IT$COMMAND.PARAM$ (%CP_EQ_VALUE) -> VD$BUFFER.LENGTH# =
     1495     7735    3                   XUE_ECB.OUT$ -> VD$TEXTC.LENGTH#;
     1496     7736    3                 IT$COMMAND.PARAM$ (%CP_EQ_VALUE) -> VD$BUFFER.BYTES =
     1497     7737    3                   XUE_ECB.OUT$ -> VD$TEXTC.BYTES;
     1498     7738    3                 END;
     1499     7739    2              ELSE
     1500     7740    2                 IT$COMMAND.PARAM$ (%CP_EQ_VALUE) = ADDR(ZERO_LENGTH_BUFFER);
     1501     7741
     1502     7742    2              SINK = 1;
     1503     7743    2              IF CMD$BLK.NSUBLKS > 1 THEN
     1504     7744    2                 GOTO BUILD_WINDOW_SPECIFIER;
     1505     7745
     1506     7746
     1507     7747    2            CASE (%T_END_CMD);
     1508     7748    2              ;    /* Nothing to do */
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:171  
     1509     7749
     1510     7750
     1511     7751    2            CASE (%T_IF_CMD);
     1512     7752                   /*
     1513     7753                   *  The ParseTree for the IF/ELSE command is:
     1514     7754                   *
     1515     7755                   *      T_IF_CMD
     1516     7756                   *          |
     1517     7757                   *    T_STRING_EXPR (no subnodes for ELSE command)
     1518     7758                   *          |
     1519     7759                   *       XUE_EXP#
     1520     7760                   */
     1521     7761
     1522     7762    3              IF CMD$BLK.NSUBLKS=0 THEN DO; /* ELSE COMMAND */
     1523     7763    3                 IF NOT CMD$STREAM.IF_CMD THEN
     1524     7764    3                    GOTO ELSE_CMD_WITHOUT_IF_FAILURE;
     1525     7765    3                 CMD_INDEX = PT_COMMAND_PARENT.NSUBLKS - 1;
     1526     7766    3                 END;
     1527     7767    2              ELSE IF CMD_INDEX = PT_COMMAND_PARENT.NSUBLKS - 1 THEN
     1528     7768    2                    GOTO IF_COMMAND_LAST_FAILURE;
     1529     7769    3                 ELSE DO; /* IF COMMAND */
     1530     7770    3                    CALL VDE$PNUMBER
     1531     7771    3                      (CMD$BLK.SUBLK$(0) -> CMD$BLK.SUBLK$(0) -> CMD$BLK, SINK)
     1532     7772    3                      ALTRET (PNUMBER_FAILED);
     1533     7773    3                    IF SINK < 0 THEN SINK = 0; /* Prepare for level counting */
     1534     7774    3                    IF SINK > 0 THEN CMD$STREAM.IF_CMD = '1'B;
     1535     7775    4                    ELSE DO UNTIL SINK < 0;
     1536     7776    4                       CMD_INDEX = CMD_INDEX + 1;
     1537     7777    4                       IF CMD_INDEX = PT_COMMAND_PARENT.NSUBLKS-1 THEN EXIT;
     1538     7778    4                       CMD_BLK$ = PT_COMMAND_PARENT.SUBLK$ (CMD_INDEX);
     1539     7779    4                       IF CMD$BLK.CODE = %T_IF_CMD THEN
     1540     7780    4                          IF CMD$BLK.NSUBLKS > 0 THEN SINK = SINK + 1;
     1541     7781    4                          ELSE SINK = SINK - 1;
     1542     7782    4                       END;
     1543     7783    3                    END;
     1544     7784
     1545     7785    2              CALL VDG$OFREE (IT$COMMAND) ALTRET (OFREE_FAILED);
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:172  
     1546     7786    2              IT_COMMAND$ = ADDR(NIL);
     1547     7787
     1548     7788
     1549     7789    2            CASE (%T_KEYIN_CMD);
     1550     7790                   /*
     1551     7791                   *  The ParseTree for the KEYIN command is:
     1552     7792                   *
     1553     7793                   *                      T_KEYIN_CMD
     1554     7794                   *                           |
     1555     7795                   *          -------------------------------- (opt.) ---
     1556     7796                   *          |                         |               |
     1557     7797                   *  T_BREAK or T_KEYIN_NAME     T_KEYIN_VALUE    T_IN_WINDOW
     1558     7798                   *                   |                |               |
     1559     7799                   *             T_STRING_EXPR    T_STRING_EXPR         |
     1560     7800                   *                   |                |               |
     1561     7801                   *                XUE_EXP#         XUE_EXP#        one of:
     1562     7802                   *
     1563     7803                   *  T_COMMAND_WINDOW  or  T_EDITING_WINDOW  or  T_SPECIFIC_WINDOW
     1564     7804                   *                                                     |
     1565     7805                   *                                                T_STRING_EXPR
     1566     7806                   *                                                     |
     1567     7807                   *                                                  XUE_EXP#
     1568     7808                   */
     1569     7809
     1570     7810                   %INCREMENT (ARRAY=STATS_TOKENS#,
     1571     7811                   INDX="CMD$BLK.SUBLK$ (0) -> CMD$BLK.CODE - %VD_BASE#");
     1572     7814    2              CALL VDE$PSTRING (CMD$BLK.SUBLK$(0) -> CMD$BLK.SUBLK$(0) ->
     1573     7815    2                CMD$BLK.SUBLK$(0) -> CMD$BLK, SINK,
     1574     7816    2                IT$COMMAND.PARAM$ (%CP_KE_NAME), RETCODE, CTRL_FN_ARGS_ARRAY)
     1575     7817    2                ALTRET (PSTRING_FAILED);
     1576     7818    2              IF RETCODE ~= %CHR_SPACE THEN
     1577     7819    2                 GOTO CTRLFN_CONFLICTS_W_KEYIN_ERROR;
     1578     7820
     1579     7821    2              IF IT$COMMAND.PARAM$ (%CP_KE_NAME) = ADDR(NIL) THEN
     1580     7822    2                 IT$COMMAND.PARAM$ (%CP_KE_NAME) = ADDR(ZERO_LENGTH_BUFFER);
     1581     7823
     1582     7824                   %INCREMENT (ARRAY=STATS_TOKENS#,
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:173  
     1583     7825                   INDX="CMD$BLK.SUBLK$ (1) -> CMD$BLK.CODE - %VD_BASE#");
     1584     7828    2              CALL VDE$PSTRING (CMD$BLK.SUBLK$ (1) -> CMD$BLK.SUBLK$ (0) ->
     1585     7829    2                CMD$BLK.SUBLK$ (0) -> CMD$BLK, SINK,
     1586     7830    2                IT$COMMAND.PARAM$ (%CP_KE_VALUE), RETCODE, CTRL_FN_ARGS_ARRAY)
     1587     7831    2                ALTRET (PSTRING_FAILED);
     1588     7832    2              IF RETCODE ~= %CHR_SPACE THEN
     1589     7833    2                 GOTO CTRLFN_CONFLICTS_W_KEYIN_ERROR;
     1590     7834
     1591     7835    2              IF IT$COMMAND.PARAM$ (%CP_KE_VALUE) = ADDR(NIL) THEN
     1592     7836    2                 IT$COMMAND.PARAM$ (%CP_KE_VALUE) = ADDR(ZERO_LENGTH_BUFFER);
     1593     7837
     1594     7838    2              SINK = 2;
     1595     7839    2              IF CMD$BLK.NSUBLKS > 2 THEN
     1596     7840    3   BUILD_WINDOW_SPECIFIER: DO;
     1597     7841                      /* Build a VD$NUMBER containing the window specifier */
     1598     7842                      %INCREMENT (ARRAY=STATS_TOKENS#,
     1599     7843                      INDX="CMD$BLK.SUBLK$ (SINK) -> CMD$BLK.CODE - %VD_BASE#");
     1600     7846    3                 CMD_BLK$ = CMD$BLK.SUBLK$ (SINK) -> CMD$BLK.SUBLK$ (0);
     1601     7847                      %INCREMENT (ARRAY=STATS_TOKENS#, INDX="CMD$BLK.CODE - %VD_BASE#");
     1602     7850    3                 IF CMD$BLK.CODE = %T_COMMAND_WINDOW THEN
     1603     7851    3                    WINDOW_SUBSCRIPT = %WK_COMMAND_WINDOW + %WI_KEY_OFFSET;
     1604     7852    3                 ELSE IF CMD$BLK.CODE = %T_EDITING_WINDOW THEN
     1605     7853    3                       WINDOW_SUBSCRIPT = %WI_EDITING;
     1606     7854    4                    ELSE DO;
     1607     7855                            %INCREMENT (ARRAY=STATS_TOKENS#,
     1608     7856                            INDX="CMD$BLK.SUBLK$ (0) -> CMD$BLK.CODE - %VD_BASE#");
     1609     7859    4                       CALL VDE$PNUMBER (CMD$BLK.SUBLK$ (0) ->
     1610     7860    4                         CMD$BLK.SUBLK$ (0) -> CMD$BLK, WINDOW_SUBSCRIPT)
     1611     7861    4                         ALTRET (PNUMBER_FAILED);
     1612     7862    4                       IF WINDOW_SUBSCRIPT < 0 OR WINDOW_SUBSCRIPT >
     1613     7863    4                         (%MX_EDITING_WINDOWS + %WK_1ST_EDITING_WINDOW - 1) THEN
     1614     7864    4                          GOTO WI_KEY_NOT_IN_RANGE_FAILURE;
     1615     7865    4                       WINDOW_SUBSCRIPT = WINDOW_SUBSCRIPT + %WI_KEY_OFFSET;
     1616     7866    4                       END;
     1617     7867    3                 CALL VDG$OALLOC (%CLS_NUMBER, VD_NUMBER$)
     1618     7868    3                   ALTRET (OALLOC_FAILED);
     1619     7869    3                 IF SINK = 2 THEN
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:174  
     1620     7870    3                    IT$COMMAND.PARAM$ (%CP_KE_IN) = VD_NUMBER$;
     1621     7871    3                 ELSE
     1622     7872    3                    IT$COMMAND.PARAM$ (%CP_EQ_IN) = VD_NUMBER$;
     1623     7873    3                 VD$NUMBER.V# = WINDOW_SUBSCRIPT;
     1624     7874    3                 END BUILD_WINDOW_SPECIFIER;
     1625     7875
     1626     7876
     1627     7877    2            CASE (%T_LOCATION_CMD);
     1628     7878                   /*
     1629     7879                   *  The ParseTree for a LOCATION command is:
     1630     7880                   *
     1631     7881                   *                T_LOCATION_CMD
     1632     7882                   *                      |
     1633     7883                   *            ----------------------
     1634     7884                   *            |                    |
     1635     7885                   *        T_DEF_NAME          T_BLOCK_EXPR
     1636     7886                   *            |
     1637     7887                   *         .symbol
     1638     7888                   */
     1639     7889                   %INCREMENT (ARRAY=STATS_TOKENS#,
     1640     7890                   INDX="CMD$BLK.SUBLK$ (0) -> CMD$BLK.CODE - %VD_BASE#");
     1641     7893    2              SYM_BLK$ = CMD$BLK.SUBLK$ (0) -> CMD$BLK.SUBLK$ (0);
     1642     7894    2              CALL XLATE (SYM$BLK.TEXT, B$XL_UPPER, SYM$BLK.TEXT);
     1643     7895    2              CALL MAKE_TEXTC_REMOTE (SYM$BLK.TEXTC$ -> VD$TEXTC,
     1644     7896    2                IT$COMMAND.PARAM$ (%CP_LO_NAME))
     1645     7897    2                ALTRET (MAKE_TEXTC_REMOTE_FAILED);
     1646     7898
     1647     7899    2              IT$COMMAND.PT_BLOCK_EXPR$ = CMD$BLK.SUBLK$ (1);
     1648     7900
     1649     7901
     1650     7902    2            CASE (%T_READ_CMD);
     1651     7903                   /*
     1652     7904                   *  The ParseTree for the READ command is:
     1653     7905                   *
     1654     7906                   *             T_READ_CMD
     1655     7907                   *                 |
     1656     7908                   *               T_FID     *N* or T_BLOCK_EXPR or T_STRING_EXPR
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:175  
     1657     7909                   */
     1658     7910    2              SYM_BLK$ = CMD$BLK.SUBLK$ (0);
     1659     7911                   %INCREMENT (ARRAY=STATS_TOKENS#, INDX="SYM$BLK.CODE - %VD_BASE#");
     1660     7914    2              CALL MAKE_TEXTC_REMOTE (SYM$BLK.TEXTC$ -> VD$TEXTC,
     1661     7915    2                IT$COMMAND.PARAM$ (%CP_READ_FID))
     1662     7916    2                ALTRET (MAKE_TEXTC_REMOTE_FAILED);
     1663     7917
     1664     7918    2              CALL VDG$OALLOC (%CLS_NUMBER, VD_NUMBER$)
     1665     7919    2                ALTRET (OALLOC_FAILED);
     1666     7920    2              IT$COMMAND.PARAM$ (%CP_READ_NEXT_COMMAND) = VD_NUMBER$;
     1667     7921    2              VD$NUMBER.V# = 0;     /* Assume no more cmds on this record */
     1668     7922    3              IF CMD_INDEX < (PT_COMMAND_PARENT.NSUBLKS - 1) THEN DO;
     1669     7923    3                 VD$NUMBER.V# = PT_COMMAND_PARENT.SUBLK$ (CMD_INDEX + 1) ->
     1670     7924    3                   CMD$BLK.CPOS;
     1671     7925                      /* Force no more processing of this record for now */
     1672     7926    3                 CMD_INDEX = PT_COMMAND_PARENT.NSUBLKS;
     1673     7927    3                 END;
     1674     7928
     1675     7929
     1676     7930    2            CASE (%T_RESTORE_CMD);
     1677     7931                   /*
     1678     7932                   *  The ParseTree for the RESTORE command is:
     1679     7933                   *
     1680     7934                   *           T_RESTORE_CMD
     1681     7935                   *                 |
     1682     7936                   *               T_FID     *N* or T_BLOCK_EXPR or T_STRING_EXPR
     1683     7937                   */
     1684     7938    2              SYM_BLK$ = CMD$BLK.SUBLK$ (0);
     1685     7939                   %INCREMENT (ARRAY=STATS_TOKENS#, INDX="SYM$BLK.CODE - %VD_BASE#");
     1686     7942    2              CALL MAKE_TEXTC_REMOTE (SYM$BLK.TEXTC$ -> VD$TEXTC,
     1687     7943    2                IT$COMMAND.PARAM$ (%CP_RESTORE_FID))
     1688     7944    2                ALTRET (MAKE_TEXTC_REMOTE_FAILED);
     1689     7945
     1690     7946
     1691     7947    2            CASE (%T_SAVE_CMD);
     1692     7948                   /*
     1693     7949                   *  The ParseTree for the SAVE command is:
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:176  
     1694     7950                   *
     1695     7951                   *                             T_SAVE_CMD
     1696     7952                   *                                 |
     1697     7953                   *              (opt.) --------------------------------------
     1698     7954                   *                |                            |            |
     1699     7955                   *      ALL or SETUP or SESSION              T_TO or       FID
     1700     7956                   *                                          T_OVER or    (PARSE$SYM
     1701     7957                   *                                                       with fid)
     1702     7958                   */
     1703     7959
     1704     7960    2   EACH_SAVE_CHILD:
     1705     7961    3              DO SYM_BLK = 0 TO CMD$BLK.NSUBLKS - 1;
     1706     7962    3                 SYM_BLK$ = CMD$BLK.SUBLK$ (SYM_BLK);
     1707     7963                      %INCREMENT(ARRAY=STATS_TOKENS#, INDX="SYM$BLK.CODE - %VD_BASE#");
     1708     7966    4                 DO CASE (SYM$BLK.CODE);
     1709     7967    4                  CASE (%T_ALL);
     1710     7968    4                    IT$COMMAND.FLAGS (%CF_SAVE_ALL) = %TRUE;
     1711     7969
     1712     7970    4                  CASE (%T_SETUP);
     1713     7971    4                    IT$COMMAND.FLAGS (%CF_SAVE_SETUP) = %TRUE;
     1714     7972
     1715     7973    4                  CASE (%T_SESSION);
     1716     7974    4                    IT$COMMAND.FLAGS (%CF_SAVE_SESSION) = %TRUE;
     1717     7975
     1718     7976    4                  CASE (%T_TO);
     1719     7977    4                    IT$COMMAND.FLAGS (%CF_SAVE_TO) = %TRUE;
     1720     7978
     1721     7979    4                  CASE (%T_OVER);
     1722     7980    4                    IT$COMMAND.FLAGS (%CF_SAVE_OVER) = %TRUE;
     1723     7981
     1724     7982    4                  CASE (%T_FID);
     1725     7983    4                    CALL MAKE_TEXTC_REMOTE (SYM$BLK.TEXTC$ -> VD$TEXTC,
     1726     7984    4                      IT$COMMAND.PARAM$ (%CP_SAVE_FID))
     1727     7985    4                      ALTRET (MAKE_TEXTC_REMOTE_FAILED);
     1728     7986    4                  END;
     1729     7987    3                 END EACH_SAVE_CHILD;
     1730     7988
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:177  
     1731     7989    2              IF NOT IT$COMMAND.FLAGS (%CF_SAVE_SETUP)
     1732     7990    2                AND NOT IT$COMMAND.FLAGS (%CF_SAVE_SESSION) THEN
     1733     7991    2                 IT$COMMAND.FLAGS (%CF_SAVE_ALL) = %TRUE;  /* Default 1st param */
     1734     7992
     1735     7993
     1736     7994    2            CASE (%T_SYNONYM_CMD);
     1737     7995                   /*
     1738     7996                   *  The ParseTree for the SYNONYM command is:
     1739     7997                   *
     1740     7998                   *                         T_SYNONYM_CMD
     1741     7999                   *                               |
     1742     8000                   *                ---------------------------------
     1743     8001                   *                |                               |
     1744     8002                   *             either                        T_SY_VALUE
     1745     8003                   *       |       or        |                 (PARSE$SYM
     1746     8004                   *    T_DEF_NAME      T_SPECIAL_NAME         for value)
     1747     8005                   *       |            (PARSE$SYM for
     1748     8006                   *    .symbol         special name)
     1749     8007                   */
     1750     8008    2              SYM_BLK$ = CMD$BLK.SUBLK$ (0);
     1751     8009                   %INCREMENT (ARRAY=STATS_TOKENS#, INDX="SYM$BLK.CODE - %VD_BASE#");
     1752     8012    2              IF SYM$BLK.CODE = %T_DEF_NAME THEN
     1753     8013    2                 SYM_BLK$ = SYM_BLK$ -> CMD$BLK.SUBLK$ (0);
     1754     8014
     1755     8015    2              CALL XLATE (SYM$BLK.TEXT, B$XL_UPPER, SYM$BLK.TEXT);
     1756     8016    2              CALL MAKE_TEXTC_REMOTE (SYM$BLK.TEXTC$ -> VD$TEXTC,
     1757     8017    2                IT$COMMAND.PARAM$ (%CP_SY_NAME))
     1758     8018    2                ALTRET (MAKE_TEXTC_REMOTE_FAILED);
     1759     8019
     1760     8020    2              SYM_BLK$ = CMD$BLK.SUBLK$ (1);
     1761     8021                   %INCREMENT (ARRAY=STATS_TOKENS#, INDX="SYM$BLK.CODE - %VD_BASE#");
     1762     8024
     1763     8025    2              CALL VDG$OALLOC (%CLS_BUFFER, VD_BUFFER$,
     1764     8026    2                (LENGTHC(VD$BUFFER_HEADER) + SYM$BLK.COUNT + (%NB_PER_WORD-1)) /
     1765     8027    2                %NB_PER_WORD)
     1766     8028    2                ALTRET (OALLOC_FAILED);
     1767     8029    2              IT$COMMAND.PARAM$ (%CP_SY_VALUE) = VD_BUFFER$;
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:178  
     1768     8030    2              VD$BUFFER.LENGTH# = SYM$BLK.COUNT;
     1769     8031    2              VD$BUFFER.BYTES = SYM$BLK.TEXT;
     1770     8032
     1771     8033
     1772     8034    2            CASE (%T_WINDOW_CMD);
     1773     8035                   /*
     1774     8036                   *  The ParseTree for the WINDOW command is:
     1775     8037                   *
     1776     8038                   *           T_WINDOW_CMD
     1777     8039                   *                 |
     1778     8040                   *  (opt)--------(opt)--------(opt)--------(opt)
     1779     8041                   *    |            |            |            |
     1780     8042                   * T_DELETE_CMD T_IN_WINDOW  T_LINES or   T_EDIT_CMD
     1781     8043                   *  or T_NEW      ...        T_PERCENT      ...
     1782     8044                   * or T_NEXT
     1783     8045                   * or T_PREV
     1784     8046                   */
     1785     8047    2              SINK = VD_EDITING_HEIGHT *
     1786     8048    2                (100 - (VD_EDITING_WINDOWS-1) * VD_$WI_PERCENT.V#) /100;
     1787     8049    3              DO SYM_BLK=0 TO CMD$BLK.NSUBLKS-1;
     1788     8050    3                 SYM_BLK$ = CMD$BLK.SUBLK$(SYM_BLK);
     1789     8051                      %INCREMENT(ARRAY=STATS_TOKENS#, INDX=SYM$BLK.CODE - %VD_BASE#);
     1790     8054    4                 IF SYM$BLK.CODE = %T_EDIT_CMD THEN DO;
     1791     8055    4                    IT$COMMAND.PT_BLOCK_EXPR$ = SYM_BLK$ -> CMD$BLK.SUBLK$(0);
     1792     8056    4                    END;
     1793     8057    3                 ELSE IF SYM$BLK.CODE = %T_DELETE_CMD THEN
     1794     8058    3                       IT$COMMAND.FLAGS(%CF_WI_DELETE) = %TRUE;
     1795     8059    3                    ELSE IF SYM$BLK.CODE = %T_NEW THEN
     1796     8060    3                          IT$COMMAND.FLAGS(%CF_WI_NEW) = %TRUE;
     1797     8061    3                       ELSE IF SYM$BLK.CODE = %T_NEXT OR SYM$BLK.CODE = %T_PREVIOUS
     1798     8062    4                          THEN DO;
     1799     8063    4                             IF VD_CURRENT_WINDOW$ = ADDR(NIL) THEN EXIT;
     1800     8064    4                             WINDOW_SUBSCRIPT = ADDR (VD_CURRENT_WINDOW$ ->
     1801     8065    4                               VD$FILE_NODE.DESC.KEY) -> VD$KEY_NUMBER.BYTES# + 1;
     1802     8066    4                             IF SYM$BLK.CODE = %T_PREVIOUS THEN
     1803     8067    4                                WINDOW_SUBSCRIPT = WINDOW_SUBSCRIPT - 2;
     1804     8068    4                             IF WINDOW_SUBSCRIPT >= VD_EDITING_WINDOWS THEN
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:179  
     1805     8069    4                                WINDOW_SUBSCRIPT = 1;
     1806     8070    4                             IF WINDOW_SUBSCRIPT = 0 THEN
     1807     8071    4                                WINDOW_SUBSCRIPT = VD_EDITING_WINDOWS-1;
     1808     8072    4                             GOTO SET_WINDOW_NUMBER;
     1809     8073    4                             END;
     1810     8074    4                          ELSE DO;
     1811     8075    4                             CALL VDE$PNUMBER (SYM_BLK$ -> CMD$BLK.SUBLK$(0) ->
     1812     8076    4                               CMD$BLK.SUBLK$(0) -> CMD$BLK, WINDOW_SUBSCRIPT)
     1813     8077    4                               ALTRET (PNUMBER_FAILED);
     1814     8078    5                             IF SYM$BLK.CODE ~= %T_IN_WINDOW THEN DO;
     1815     8079    5                                SINK = WINDOW_SUBSCRIPT;
     1816     8080    5                                IF SYM$BLK.CODE = %T_PERCENT THEN
     1817     8081    5                                   SINK = VD_EDITING_HEIGHT * SINK / 100;
     1818     8082    5                                IT$COMMAND.PARAM$ (%CP_WI_LINES) = SYM_BLK$;
     1819     8083    5                                END;
     1820     8084    5                             ELSE DO;
     1821     8085    5                                IF WINDOW_SUBSCRIPT >= VD_EDITING_WINDOWS
     1822     8086    5                                  OR WINDOW_SUBSCRIPT = 0 THEN
     1823     8087    5                                   GOTO WI_KEY_NOT_IN_RANGE_FAILURE;
     1824     8088    5   SET_WINDOW_NUMBER:           CALL VDG$OALLOC (%CLS_NUMBER, IT$COMMAND.PARAM$(%
              8088            CP_WI_NUM))
     1825     8089    5                                  ALTRET (OALLOC_FAILED);
     1826     8090    5                                IT$COMMAND.PARAM$(%CP_WI_NUM) -> VD$NUMBER.V# =
     1827     8091    5                                  WINDOW_SUBSCRIPT;
     1828     8092    5                                END;
     1829     8093    4                             END;
     1830     8094    3                 END;
     1831     8095    2              IF IT$COMMAND.PARAM$(%CP_WI_LINES) ~= ADDR(NIL) OR
     1832     8096    3                IT$COMMAND.FLAGS (%CF_WI_NEW) THEN DO;
     1833     8097    3                 CALL VDG$OALLOC (%CLS_NUMBER, IT$COMMAND.PARAM$(%CP_WI_LINES))
     1834     8098    3                   ALTRET (OALLOC_FAILED);
     1835     8099    3                 IT$COMMAND.PARAM$(%CP_WI_LINES) -> VD$NUMBER.V# =
     1836     8100    3                   MINIMUM (SINK, VD_EDITING_HEIGHT);
     1837     8101    3                 END;
     1838     8102
     1839     8103
     1840     8104    2            CASE (ELSE);
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:180  
     1841     8105    2              CALL VDG$ESCREECH (IT$COMMAND.CODE#);
     1842     8106    2            END CMD_CODE_CASES;
     1843     8107
     1844     8108    1           CMD_INDEX = CMD_INDEX + 1;    /* Bump past the node we just processed */
     1845     8109    1           IF CMD_INDEX = PT_COMMAND_PARENT.NSUBLKS THEN
     1846     8110    1              CMD$STREAM.IF_CMD = '0'B;
     1847     8111    1           RETURN;
     1848     8112
     1849     8113
     1850     8114
     1851     8115    1   WI_KEY_NOT_IN_RANGE_FAILURE:
     1852     8116    1           CALL VDG$ERRMSG (%E$WI_KEY_NOT_IN_RANGE,
     1853     8117    1             VD_EDITING_WINDOWS-1, WINDOW_SUBSCRIPT);
     1854     8118    1           GOTO SUB_PARSE_TREE_TO_INTREE_FAILED;
     1855     8119
     1856     8120
     1857     8121    1   CTRLFN_CONFLICTS_W_KEYIN_ERROR: ;
     1858     8122    1           CALL VDG$ERRMSG (%E$CTRLFN_CONFLICTS_W_KEYIN);
     1859     8123    1           GOTO SUB_PARSE_TREE_TO_INTREE_FAILED;
     1860     8124
     1861     8125
     1862     8126    1   ELSE_CMD_WITHOUT_IF_FAILURE: ;
     1863     8127    2           CALL VDG$ERRMSG (%E$ELSE_CMD_WITHOUT_IF) WHENRETURN DO;
     1864     8128    2              VD_6E.ERR_TAIL$ -> VD$ERR.CMDLINE_INDEX# = CMD$BLK.CPOS;
     1865     8129    2              END;
     1866     8130    1           GOTO SUB_PARSE_TREE_TO_INTREE_FAILED;
     1867     8131
     1868     8132
     1869     8133    1   IF_COMMAND_LAST_FAILURE: ;
     1870     8134    2           CALL VDG$ERRMSG (%E$IF_CMD_IS_LAST) WHENRETURN DO;
     1871     8135    2              VD_6E.ERR_TAIL$ -> VD$ERR.CMDLINE_INDEX# = CMD$BLK.CPOS;
     1872     8136    2              END;
     1873     8137
     1874     8138
     1875     8139    1   PSTRING_FAILED: ;
     1876     8140    1   PNUMBER_FAILED: ;
     1877     8141    1   MAKE_TEXTC_REMOTE_FAILED: ;
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:181  
     1878     8142    1   SUB_PARSE_TREE_TO_INTREE_FAILED: ;
     1879     8143    1           CALL VDG$OFREE (IT$COMMAND)
     1880     8144    1             ALTRET (OFREE_FAILED);
     1881     8145
     1882     8146
     1883     8147    1   OALLOC_FAILED: ;
     1884     8148    1   OFREE_FAILED: ;
     1885     8149    1           IT_COMMAND$ = ADDR(NIL);
     1886     8150    1           ALTRETURN;
     1887     8151
     1888     8152
     1889     8153        /*I* NAME: MAKE_TEXTC_REMOTE
     1890     8154            PARAMETERS:
     1891     8155                TEXTC - A VD$TEXTC string.
     1892     8156                TEXTC_REMOTE$ - An uninitialized ptr.
     1893     8157            INPUT:
     1894     8158                None.
     1895     8159            OUTPUT:
     1896     8160                TEXTC_REMOTE$ will point to a VD$TEXTC_REMOTE object.
     1897     8161            DESCRIPTION:
     1898     8162                Build a VD$TEXTC_REMOTE containing the TEXTC string.
     1899     8163        */
     1900     8164
     1901     8165    1   MAKE_TEXTC_REMOTE: PROC (TEXTC, TEXTC_REMOTE$) ALTRET;
     1902     8166
     1903     8167        %VD$TEXTC (NAME=TEXTC, STCLASS=PARAM);
     1904     8190    2   DCL TEXTC_REMOTE$ PTR;
     1905     8191
     1906     8192
     1907     8193        %VD$TEXTC_REMOTE (NAME=TEXTC$REMOTE, STCLASS="BASED(TEXTC_REMOTE$)");
     1908     8254        %VD$STRING_HEADER;
     1909     8290
     1910     8291
     1911     8292
     1912     8293    2           CALL VDG$OALLOC (%CLS_TEXTC_REMOTE, TEXTC_REMOTE$,
     1913     8294    2             (LENGTHC(VD$STRING_HEADER) + TEXTC.LENGTH# +
     1914     8295    2             (%NB_PER_WORD-1)) / %NB_PER_WORD)
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:182  
     1915     8296    3           WHENALTRETURN DO; ALTRETURN; END;
     1916     8297
     1917     8298    2           TEXTC$REMOTE.LENGTH# = TEXTC.LENGTH#;
     1918     8299    2           TEXTC$REMOTE.BYTES = TEXTC.BYTES;
     1919     8300
     1920     8301    2           RETURN;
     1921     8302
     1922     8303    2   END MAKE_TEXTC_REMOTE;
     1923     8304
     1924     8305    1   END VDI$PARSE_TREE_TO_INTREE;
     1925     8306        %EOD;

PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:183  
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   XU_SUBS_C.:LIBRARY  is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   XUE_MACRO_C.:LIBRARY  is referenced.
   VD_NODES0_E.:VDA5TOU  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDI$PARSE_TREE_TO_INTREE.

   Procedure VDI$PARSE_TREE_TO_INTREE requires 933 words for executable code.
   Procedure VDI$PARSE_TREE_TO_INTREE requires 28 words of local(AUTO) storage.

PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:184  

 Object Unit name= VDI$PARSE_TREE_TO_INTREE                   File name= VDI$PARSE.:VDA5TOU
 UTS= JUL 04 '97 11:34:02.84 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      3      3  VDI$PARSE_TREE_TO_INTREE
    1   Proc  even  none   933   1645  VDI$PARSE_TREE_TO_INTREE
    2  RoData even  none    17     21  VDI$PARSE_TREE_TO_INTREE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        3  VDI$PARSE_TREE_TO_INTREE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       5 VDE$PSTRING
 yes     yes           Std       1 VDG$OFREE
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       4 VDG$ERRMSG
 yes     yes           Std       2 VDE$PNUMBER
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:185  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                            r    B$XL_UPPER$                           XUE_ECB
     VD_EDITING_HEIGHT                     VD_EDITING_WINDOWS                    VD_CURRENT_WINDOW$
     VD_$WI_PERCENT                        B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:186  


     1324        1        /*T***********************************************************/
     1325        2        /*T*                                                         */
     1326        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1327        4        /*T*                                                         */
     1328        5        /*T***********************************************************/
     1329        6
     1330        7        /*D* NAME: VDI$PARSE_TREE_TO_INTREE
     1331        8            PARAMETERS:
     1332        9                PT_COMMAND_PARENT - The parent ParseTree node of the single command
     1333       10                    node to convert.
     1334       11                CMD_INDEX - Index into PT_COMMAND_PARENT's children of the single
     1335       12                    command node to convert.  This child node should have .CODE# =
     1336       13                    %T_xxx_CMD.  (Exception:  for the EQUALS command, this will be a
     1337       14                    T_DEF_NAME node, and the next child of PT_COMMAND_PARENT will be the
     1338       15                    T_EQUALS_CMD node.)
     1339       16                IT_COMMAND$ - A pointer:  either NIL; or it points to a cleared/NILd
     1340       17                    VD$IT_COMMAND InTree node.
     1341       18            INPUT:
     1342       19            OUTPUT:
     1343       20                IT_COMMAND$ will point to a (chain of) VD$IT_COMMAND node(s), which
     1344       21                    contain(s) the info from the ParseTree.  As such, the individual
     1345       22                    VD$IT_COMMAND nodes in the chain can be passed to any of the
     1346       23                    command handlers (VDI$Cxxx) for processing.
     1347       24                CMD_INDEX will be incremented beyond any PT_COMMAND_PARENT children
     1348       25                    which have been processed.
     1349       26            DESCRIPTION:
     1350       27                Based on the type of command, build an IT_COMMAND InTree node (or a
     1351       28                chain of 'em) with the info from the ParseTree node(s).
     1352       29        */
     1353       30
     1354       31        VDI$PARSE_TREE_TO_INTREE: PROC (PT_COMMAND_PARENT, CMD_INDEX, IT_COMMAND$)

     31  1 000000   000000 700200 xent  VDI$PARSE_T* TSX0  ! X66_AUTO_3
         1 000001   000034 000003                    ZERO    28,3

     1355       32                  ALTRET;
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:187  
     1356       33
     1357       34        %INCLUDE VD_MACROS_M;
     1358     2249        %INCLUDE VD_PERR_C;
     1359     2397        %INCLUDE VD_NODES0_E;
     1360     2489        %INCLUDE XUE_MACRO_C;
     1361     3233        %INCLUDE XU_MACRO_C;
     1362     6327        %INCLUDE XU_SUBS_C;
     1363     6419        %INCLUDE B$TABLES_C;
     1364     6527
     1365     6528
     1366     6529        %PARSE$OUT (NAME=PT_COMMAND_PARENT, STCLASS=PARAM);
     1367     6574    1   DCL CMD_INDEX SBIN;
     1368     6575    1   DCL IT_COMMAND$ PTR;
     1369     6576
     1370     6577    1   DCL VDE$PSTRING         ENTRY (5) ALTRET;
     1371     6578    1   DCL VDE$PNUMBER         ENTRY (2) ALTRET;
     1372     6579    1   DCL VDG$ERRMSG          ENTRY (4) ALTRET;
     1373     6580    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1374     6581    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1375     6582    1   DCL VDG$ESCREECH        ENTRY (3);
     1376     6583
     1377     6584
     1378     6585        %VD_6E (STCLASS=SYMREF);
     1379     6621        %VD$POINTER (NAME=VD_$STRUCTURE, STCLASS=SYMREF);
     1380     6666        %B$XL_UPPER;
     1381     6670        %XUE_ECB (NAME=XUE_ECB, STCLASS=SYMREF);
     1382     6872    1   DCL VD_SCREEN_HEIGHT SBIN SYMREF;
     1383     6873    1   DCL VD_EDITING_HEIGHT SBIN SYMREF;
     1384     6874    1   DCL VD_EDITING_WINDOWS SBIN SYMREF;
     1385     6875    1   DCL VD_CURRENT_WINDOW$ PTR SYMREF;
     1386     6876        %VD$NUMBER (NAME=VD_$SCREEN, STCLASS=SYMREF);
     1387     6921        %VD$NUMBER (NAME=VD_$MIN_COMMAND, STCLASS=SYMREF);
     1388     6966        %VD$NUMBER (NAME=VD_$WI_PERCENT, STCLASS=SYMREF);
     1389     7011
     1390     7012
     1391     7013        %VD_BUFFER (NAME=ZERO_LENGTH_BUFFER, STCLASS=CONSTANT, IBYTES="''");
     1392     7073
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:188  
     1393     7074
     1394     7075    1   DCL CMD_BLK$ PTR;
     1395     7076    1   DCL SYM_BLK$ PTR;
     1396     7077    1   DCL SYM_BLK SBIN;
     1397     7078    1   DCL RETCODE CHAR(1) CALIGNED;
     1398     7079    1   DCL SINK SBIN;
     1399     7080    1   DCL WINDOW_SUBSCRIPT SBIN;
     1400     7081    1   DCL VD_BUFFER$ PTR;
     1401     7082    1   DCL VD_NUMBER$ PTR;
     1402     7083    1   DCL CTRL_FN_ARGS_ARRAY(0:%(MX_CTRL_FN_ARGS-1)) SBIN;
     1403     7084    1   DCL VD_ERR$ PTR;
     1404     7085    1   DCL SUBST_FIELD$ PTR;
     1405     7086
     1406     7087
     1407     7088        %VD$CMD_STREAM (NAME=CMD$STREAM, STCLASS="BASED(VD_6E.CMD_STREAM$)");
     1408     7127        %VD$IT_COMMAND (NAME=IT$COMMAND, STCLASS="BASED(IT_COMMAND$)");
     1409     7165        %PARSE$OUT (NAME=CMD$BLK, STCLASS="BASED(CMD_BLK$)");
     1410     7210        %PARSE$SYM (NAME=CMD$SYM, STCLASS="BASED(CMD_BLK$)");
     1411     7248        %PARSE$SYM (NAME=SYM$BLK, STCLASS="BASED(SYM_BLK$)");
     1412     7286        %VD$BUFFER (NAME=VD$BUFFER, STCLASS="BASED(VD_BUFFER$)");
     1413     7344        %VD$NUMBER (NAME=VD$NUMBER, STCLASS="BASED(VD_NUMBER$)");
     1414     7389        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     1415     7442        %VD$FILE_NODE;
     1416     7535        %VD$KEY_NUMBER;
     1417     7550        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     1418     7595        %VD$TEXTC;
     1419     7618        %VD$BUFFER_HEADER;
     1420     7654
     1421     7655    2           IF IT_COMMAND$ = ADDR(NIL) THEN DO;

   7655  1 000002   200005 470500                    LDP0    @IT_COMMAND$,,AUTO
         1 000003   000000 236100                    LDQ     0,,PR0
         1 000004   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000005   000015 601000 1                  TNZ     s:7660

     1422     7656    2              CALL VDG$OALLOC (%CLS_IT_COMMAND, IT_COMMAND$)

PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:189  
   7656  1 000006   200005 236100                    LDQ     @IT_COMMAND$,,AUTO
         1 000007   000001 235000 2                  LDA     1
         1 000010   200026 757100                    STAQ    @TEXTC_REMOTE$+2,,AUTO
         1 000011   200026 630500                    EPPR0   @TEXTC_REMOTE$+2,,AUTO
         1 000012   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000013   000000 701000 xent               TSX1    VDG$OALLOC
         1 000014   001574 702000 1                  TSX2    OALLOC_FAILED

     1423     7657    2                ALTRET (OALLOC_FAILED);
     1424     7658    2              END;

     1425     7659
     1426     7660    1           CMD_BLK$ = PT_COMMAND_PARENT.SUBLK$ (CMD_INDEX);

   7660  1 000015   200004 470500                    LDP0    @CMD_INDEX,,AUTO
         1 000016   000000 235100                    LDA     0,,PR0
         1 000017   200003 471500                    LDP1    @PT_COMMAND_PARENT,,AUTO
         1 000020   100003 236105                    LDQ     3,AL,PR1
         1 000021   200006 756100                    STQ     CMD_BLK$,,AUTO

     1427     7661                %INCREMENT (ARRAY=STATS_TOKENS#, INDX="CMD$BLK.CODE - %VD_BASE#");

   7662  1 000022   200006 473500                    LDP3    CMD_BLK$,,AUTO
         1 000023   300000 720100                    LXL0    0,,PR3
         1 000024   776375 054010 xsym               AOS     VD_6E-771,X0

     1428     7664    1           IT$COMMAND.CODE# = CMD$BLK.CODE;

   7664  1 000025   200005 474500                    LDP4    @IT_COMMAND$,,AUTO
         1 000026   400000 475500                    LDP5    0,,PR4
         1 000027   300000 720100                    LXL0    0,,PR3
         1 000030   500003 740100                    STX0    3,,PR5

     1429     7665    1           IF CMD_INDEX > 0 THEN

   7665  1 000031   000000 235100                    LDA     0,,PR0
         1 000032   000036 604400 1                  TMOZ    CMD_CODE_CASES
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:190  

     1430     7666    1              IT$COMMAND.CMDLINE_INDEX# = CMD$BLK.CPOS;

   7666  1 000033   400000 475500                    LDP5    0,,PR4
         1 000034   300002 720100                    LXL0    2,,PR3
         1 000035   500003 440100                    SXL0    3,,PR5

     1431     7667
     1432     7668
     1433     7669    1   CMD_CODE_CASES:
     1434     7670    2           DO CASE (IT$COMMAND.CODE#);

   7670  1 000036   400000 475500       CMD_CODE_CA* LDP5    0,,PR4
         1 000037   500003 236100                    LDQ     3,,PR5
         1 000040   000022 732000                    QRS     18
         1 000041   001752 136007                    SBLQ    1002,DL
         1 000042   000107 116007                    CMPQ    71,DL
         1 000043   000045 602006 1                  TNC     CMD_CODE_CASES+7,QL
         1 000044   001500 710000 1                  TRA     s:8105
         1 000045   000154 710000 1                  TRA     s:7681
         1 000046   001256 710000 1                  TRA     s:8047
         1 000047   001500 710000 1                  TRA     s:8105
         1 000050   001500 710000 1                  TRA     s:8105
         1 000051   000154 710000 1                  TRA     s:7681
         1 000052   000154 710000 1                  TRA     s:7681
         1 000053   000154 710000 1                  TRA     s:7681
         1 000054   000154 710000 1                  TRA     s:7681
         1 000055   000154 710000 1                  TRA     s:7681
         1 000056   000154 710000 1                  TRA     s:7681
         1 000057   001500 710000 1                  TRA     s:8105
         1 000060   000635 710000 1                  TRA     s:7891
         1 000061   001153 710000 1                  TRA     s:8008
         1 000062   001500 710000 1                  TRA     s:8105
         1 000063   001500 710000 1                  TRA     s:8105
         1 000064   000425 710000 1                  TRA     s:7812
         1 000065   000321 710000 1                  TRA     s:7762
         1 000066   001500 710000 1                  TRA     s:8105
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:191  
         1 000067   001500 710000 1                  TRA     s:8105
         1 000070   001500 710000 1                  TRA     s:8105
         1 000071   000761 710000 1                  TRA     EACH_SAVE_CHILD
         1 000072   001500 710000 1                  TRA     s:8105
         1 000073   001500 710000 1                  TRA     s:8105
         1 000074   001500 710000 1                  TRA     s:8105
         1 000075   000154 710000 1                  TRA     s:7681
         1 000076   001500 710000 1                  TRA     s:8105
         1 000077   000744 710000 1                  TRA     s:7938
         1 000100   000672 710000 1                  TRA     s:7910
         1 000101   001506 710000 1                  TRA     s:8108
         1 000102   001500 710000 1                  TRA     s:8105
         1 000103   000157 710000 1                  TRA     s:7686
         1 000104   001500 710000 1                  TRA     s:8105
         1 000105   001500 710000 1                  TRA     s:8105
         1 000106   001500 710000 1                  TRA     s:8105
         1 000107   001500 710000 1                  TRA     s:8105
         1 000110   001500 710000 1                  TRA     s:8105
         1 000111   001500 710000 1                  TRA     s:8105
         1 000112   001500 710000 1                  TRA     s:8105
         1 000113   001500 710000 1                  TRA     s:8105
         1 000114   001500 710000 1                  TRA     s:8105
         1 000115   001500 710000 1                  TRA     s:8105
         1 000116   001500 710000 1                  TRA     s:8105
         1 000117   001500 710000 1                  TRA     s:8105
         1 000120   001500 710000 1                  TRA     s:8105
         1 000121   001500 710000 1                  TRA     s:8105
         1 000122   001500 710000 1                  TRA     s:8105
         1 000123   001500 710000 1                  TRA     s:8105
         1 000124   001500 710000 1                  TRA     s:8105
         1 000125   001500 710000 1                  TRA     s:8105
         1 000126   001500 710000 1                  TRA     s:8105
         1 000127   001500 710000 1                  TRA     s:8105
         1 000130   001500 710000 1                  TRA     s:8105
         1 000131   001500 710000 1                  TRA     s:8105
         1 000132   001500 710000 1                  TRA     s:8105
         1 000133   001500 710000 1                  TRA     s:8105
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:192  
         1 000134   001500 710000 1                  TRA     s:8105
         1 000135   001500 710000 1                  TRA     s:8105
         1 000136   001500 710000 1                  TRA     s:8105
         1 000137   001500 710000 1                  TRA     s:8105
         1 000140   001500 710000 1                  TRA     s:8105
         1 000141   001500 710000 1                  TRA     s:8105
         1 000142   001500 710000 1                  TRA     s:8105
         1 000143   001500 710000 1                  TRA     s:8105
         1 000144   001500 710000 1                  TRA     s:8105
         1 000145   001500 710000 1                  TRA     s:8105
         1 000146   001500 710000 1                  TRA     s:8105
         1 000147   001500 710000 1                  TRA     s:8105
         1 000150   001500 710000 1                  TRA     s:8105
         1 000151   000157 710000 1                  TRA     s:7686
         1 000152   001500 710000 1                  TRA     s:8105
         1 000153   000162 710000 1                  TRA     s:7709

     1435     7671    2            CASE (%T_EDIT_CMD, %T_DISPLAY_CMD, %T_COPY_CMD, %T_AFTER_CMD,

     1436     7672    2             %T_DELETE_CMD, %T_OVER_CMD, %T_MOVE_CMD, %T_SHOW_CMD);
     1437     7673                   /*
     1438     7674                   *  The ParseTree for the editing commands (except the LOCATION
     1439     7675                   *  command) is:
     1440     7676                   *
     1441     7677                   *                        T_xxx_CMD
     1442     7678                   *                            |
     1443     7679                   *                       T_BLOCK_EXPR
     1444     7680                   */
     1445     7681    2              IT$COMMAND.PT_BLOCK_EXPR$ = CMD$BLK.SUBLK$ (0);

   7681  1 000154   300003 236100                    LDQ     3,,PR3
         1 000155   500004 756100                    STQ     4,,PR5
         1 000156   001506 710000 1                  TRA     s:8108

     1446     7682    2            CASE (%T_BLOCK_EXPR, %T_STRING_EXPR);

     1447     7683                   /*
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:193  
     1448     7684                   *  This is an implicit (verb-less) editing command.
     1449     7685                   */
     1450     7686    2              IT$COMMAND.PT_BLOCK_EXPR$ = ADDR(CMD$BLK);

   7686  1 000157   200006 236100                    LDQ     CMD_BLK$,,AUTO
         1 000160   500004 756100                    STQ     4,,PR5
         1 000161   001506 710000 1                  TRA     s:8108

     1451     7687
     1452     7688
     1453     7689    2            CASE (%T_DEF_NAME);

     1454     7690                   /*
     1455     7691                   *  The ParseTree for the EQUALS command is actually TWO children
     1456     7692                   *  of the PT_COMMAND_PARENT node:
     1457     7693                   *
     1458     7694                   *      T_DEF_NAME             T_EQUALS_CMD
     1459     7695                   *          |                       |
     1460     7696                   *       .symbol          ----------------- (opt.) ---
     1461     7697                   *                        |                          |
     1462     7698                   *                  T_STRING_EXPR               T_IN_WINDOW
     1463     7699                   *                        |                          |
     1464     7700                   *                     XUE_EXP#                      |
     1465     7701                   *                                                one of:
     1466     7702                   *
     1467     7703                   *  T_COMMAND_WINDOW  or  T_EDITING_WINDOW  or  T_SPECIFIC_WINDOW
     1468     7704                   *                                                     |
     1469     7705                   *                                                T_STRING_EXPR
     1470     7706                   *                                                     |
     1471     7707                   *                                                  XUE_EXP#
     1472     7708                   */
     1473     7709    2              SYM_BLK$ = CMD$BLK.SUBLK$ (0);

   7709  1 000162   300003 236100                    LDQ     3,,PR3
         1 000163   200007 756100                    STQ     SYM_BLK$,,AUTO

     1474     7710    2              CALL XLATE (SYM$BLK.TEXT, B$XL_UPPER, SYM$BLK.TEXT);
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:194  

   7710  1 000164   200007 476500                    LDP6    SYM_BLK$,,AUTO
         1 000165   600004 236100                    LDQ     4,,PR6
         1 000166   000033 772000                    QRL     27
         1 000167   000000 620006                    EAX0    0,QL
         1 000170   000000 477400 xsym               LDP7    B$XL_UPPER$
         1 000171   000000 621006                    EAX1    0,QL
         1 000172   040140 160540                    MVT     fill='040'O
         1 000173   600004 200010                    ADSC9   4,,PR6                   cn=1,n=*X0
         1 000174   600004 200011                    ADSC9   4,,PR6                   cn=1,n=*X1
         1 000175   700000 000100                    ARG     0,,PR7

     1475     7711    2              CALL MAKE_TEXTC_REMOTE (SYM$BLK.TEXTC$ -> VD$TEXTC,

   7711  1 000176   600003 475500                    LDP5    3,,PR6
         1 000177   400000 470500                    LDP0    0,,PR4
         1 000200   000006 631500                    EPPR1   6,,PR0
         1 000201   200024 451500                    STP1    @TEXTC+1,,AUTO
         1 000202   200023 455500                    STP5    SUBST_FIELD$+2,,AUTO
         1 000203   001600 701000 1                  TSX1    MAKE_TEXTC_REMOTE
         1 000204   001565 702000 1                  TSX2    PSTRING_FAILED

     1476     7712    2                IT$COMMAND.PARAM$ (%CP_EQ_NAME))
     1477     7713    2                ALTRET (MAKE_TEXTC_REMOTE_FAILED);
     1478     7714
     1479     7715    2              CMD_INDEX = CMD_INDEX + 1;

   7715  1 000205   200004 470500                    LDP0    @CMD_INDEX,,AUTO
         1 000206   000000 054100                    AOS     0,,PR0

     1480     7716    2              CMD_BLK$ = PT_COMMAND_PARENT.SUBLK$ (CMD_INDEX);

   7716  1 000207   000000 235100                    LDA     0,,PR0
         1 000210   200003 471500                    LDP1    @PT_COMMAND_PARENT,,AUTO
         1 000211   100003 236105                    LDQ     3,AL,PR1
         1 000212   200006 756100                    STQ     CMD_BLK$,,AUTO

PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:195  
     1481     7717    2              IT$COMMAND.CODE# = CMD$BLK.CODE;

   7717  1 000213   200005 473500                    LDP3    @IT_COMMAND$,,AUTO
         1 000214   300000 474500                    LDP4    0,,PR3
         1 000215   200006 475500                    LDP5    CMD_BLK$,,AUTO
         1 000216   500000 720100                    LXL0    0,,PR5
         1 000217   400003 740100                    STX0    3,,PR4

     1482     7718                   %INCREMENT (ARRAY=STATS_TOKENS#, INDX="CMD$BLK.CODE - %VD_BASE#");

   7719  1 000220   500000 720100                    LXL0    0,,PR5
         1 000221   776375 054010 xsym               AOS     VD_6E-771,X0

     1483     7721
     1484     7722                   %INCREMENT (ARRAY=STATS_TOKENS#,
     1485     7723                   INDX="CMD$BLK.SUBLK$ (0) -> CMD$BLK.CODE - %VD_BASE#");

   7724  1 000222   500003 474500                    LDP4    3,,PR5
         1 000223   400000 720100                    LXL0    0,,PR4
         1 000224   776375 054010 xsym               AOS     VD_6E-771,X0

     1486     7726    2              CALL VDE$PSTRING

   7726  1 000225   500003 474500                    LDP4    3,,PR5
         1 000226   400003 476500                    LDP6    3,,PR4
         1 000227   200012 637500                    EPPR7   SINK,,AUTO
         1 000230   200027 457500                    STP7    @TEXTC_REMOTE$+3,,AUTO
         1 000231   200026 456500                    STP6    @TEXTC_REMOTE$+2,,AUTO
         1 000232   200026 630500                    EPPR0   @TEXTC_REMOTE$+2,,AUTO
         1 000233   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000234   000000 701000 xent               TSX1    VDE$PSTRING
         1 000235   001565 702000 1                  TSX2    PSTRING_FAILED

     1487     7727    2                (CMD$BLK.SUBLK$ (0) -> CMD$BLK.SUBLK$ (0) -> CMD$BLK, SINK)
     1488     7728    2                ALTRET (PSTRING_FAILED);
     1489     7729
     1490     7730    3              IF XUE_ECB.OUT$ ~= ADDR(NIL) THEN DO;
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:196  

   7730  1 000236   000004 236000 xsym               LDQ     XUE_ECB+4
         1 000237   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000240   000306 600000 1                  TZE     s:7740

     1491     7731    3                 CALL VDG$OALLOC (%CLS_BUFFER, IT$COMMAND.PARAM$ (%CP_EQ_VALUE),

   7731  1 000241   200005 470500                    LDP0    @IT_COMMAND$,,AUTO
         1 000242   000000 471500                    LDP1    0,,PR0
         1 000243   000004 473400 xsym               LDP3    XUE_ECB+4
         1 000244   300000 236100                    LDQ     0,,PR3
         1 000245   000033 772000                    QRL     27
         1 000246   000015 036007                    ADLQ    13,DL
         1 000247   000002 772000                    QRL     2
         1 000250   200026 756100                    STQ     @TEXTC_REMOTE$+2,,AUTO
         1 000251   200026 634500                    EPPR4   @TEXTC_REMOTE$+2,,AUTO
         1 000252   200031 454500                    STP4    @TEXTC_REMOTE$+5,,AUTO
         1 000253   100007 635500                    EPPR5   7,,PR1
         1 000254   200030 455500                    STP5    @TEXTC_REMOTE$+4,,AUTO
         1 000255   000002 236000 2                  LDQ     2
         1 000256   200027 756100                    STQ     @TEXTC_REMOTE$+3,,AUTO
         1 000257   200027 630500                    EPPR0   @TEXTC_REMOTE$+3,,AUTO
         1 000260   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000261   000000 701000 xent               TSX1    VDG$OALLOC
         1 000262   001574 702000 1                  TSX2    OALLOC_FAILED

     1492     7732    3                   (LENGTHC(VD$BUFFER_HEADER) + XUE_ECB.OUT$ -> VD$TEXTC.LENGTH# +
     1493     7733    3                   %NB_PER_WORD-1) / %NB_PER_WORD) ALTRET (OALLOC_FAILED);
     1494     7734    3                 IT$COMMAND.PARAM$ (%CP_EQ_VALUE) -> VD$BUFFER.LENGTH# =

   7734  1 000263   200005 470500                    LDP0    @IT_COMMAND$,,AUTO
         1 000264   000000 471500                    LDP1    0,,PR0
         1 000265   100007 473500                    LDP3    7,,PR1
         1 000266   000004 474400 xsym               LDP4    XUE_ECB+4
         1 000267   400000 236100                    LDQ     0,,PR4
         1 000270   000033 772000                    QRL     27
         1 000271   000000 620006                    EAX0    0,QL
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:197  
         1 000272   300002 740100                    STX0    2,,PR3

     1495     7735    3                   XUE_ECB.OUT$ -> VD$TEXTC.LENGTH#;
     1496     7736    3                 IT$COMMAND.PARAM$ (%CP_EQ_VALUE) -> VD$BUFFER.BYTES =

   7736  1 000273   000000 471500                    LDP1    0,,PR0
         1 000274   100007 473500                    LDP3    7,,PR1
         1 000275   300002 220100                    LDX0    2,,PR3
         1 000276   000004 474400 xsym               LDP4    XUE_ECB+4
         1 000277   400000 236100                    LDQ     0,,PR4
         1 000300   000033 772000                    QRL     27
         1 000301   000000 621006                    EAX1    0,QL
         1 000302   040140 100540                    MLR     fill='040'O
         1 000303   400000 200011                    ADSC9   0,,PR4                   cn=1,n=*X1
         1 000304   300002 400010                    ADSC9   2,,PR3                   cn=2,n=*X0

     1497     7737    3                   XUE_ECB.OUT$ -> VD$TEXTC.BYTES;
     1498     7738    3                 END;

   7738  1 000305   000312 710000 1                  TRA     s:7742

     1499     7739    2              ELSE
     1500     7740    2                 IT$COMMAND.PARAM$ (%CP_EQ_VALUE) = ADDR(ZERO_LENGTH_BUFFER);

   7740  1 000306   200005 470500                    LDP0    @IT_COMMAND$,,AUTO
         1 000307   000000 471500                    LDP1    0,,PR0
         1 000310   000003 236000 2                  LDQ     3
         1 000311   100007 756100                    STQ     7,,PR1

     1501     7741
     1502     7742    2              SINK = 1;

   7742  1 000312   000001 235007                    LDA     1,DL
         1 000313   200012 755100                    STA     SINK,,AUTO

     1503     7743    2              IF CMD$BLK.NSUBLKS > 1 THEN

PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:198  
   7743  1 000314   200006 471500                    LDP1    CMD_BLK$,,AUTO
         1 000315   100001 220100                    LDX0    1,,PR1
         1 000316   000002 100003                    CMPX0   2,DU
         1 000317   000532 603000 1                  TRC     BUILD_WINDOW_SPECIFIER
         1 000320   001506 710000 1                  TRA     s:8108

     1504     7744    2                 GOTO BUILD_WINDOW_SPECIFIER;
     1505     7745
     1506     7746
     1507     7747    2            CASE (%T_END_CMD);

     1508     7748    2              ;    /* Nothing to do */
     1509     7749
     1510     7750
     1511     7751    2            CASE (%T_IF_CMD);

     1512     7752                   /*
     1513     7753                   *  The ParseTree for the IF/ELSE command is:
     1514     7754                   *
     1515     7755                   *      T_IF_CMD
     1516     7756                   *          |
     1517     7757                   *    T_STRING_EXPR (no subnodes for ELSE command)
     1518     7758                   *          |
     1519     7759                   *       XUE_EXP#
     1520     7760                   */
     1521     7761
     1522     7762    3              IF CMD$BLK.NSUBLKS=0 THEN DO; /* ELSE COMMAND */

   7762  1 000321   300001 220100                    LDX0    1,,PR3
         1 000322   000334 601000 1                  TNZ     s:7767

     1523     7763    3                 IF NOT CMD$STREAM.IF_CMD THEN

   7763  1 000323   000026 476400 xsym               LDP6    VD_6E+22
         1 000324   600027 236100                    LDQ     23,,PR6
         1 000325   100000 316007                    CANQ    32768,DL
         1 000326   001544 600000 1                  TZE     ELSE_CMD_WITHOUT_IF_FAILURE
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:199  

     1524     7764    3                    GOTO ELSE_CMD_WITHOUT_IF_FAILURE;
     1525     7765    3                 CMD_INDEX = PT_COMMAND_PARENT.NSUBLKS - 1;

   7765  1 000327   100001 236100                    LDQ     1,,PR1
         1 000330   000022 772000                    QRL     18
         1 000331   000001 136007                    SBLQ    1,DL
         1 000332   000000 756100                    STQ     0,,PR0

     1526     7766    3                 END;

   7766  1 000333   000412 710000 1                  TRA     s:7785

     1527     7767    2              ELSE IF CMD_INDEX = PT_COMMAND_PARENT.NSUBLKS - 1 THEN

   7767  1 000334   100001 236100                    LDQ     1,,PR1
         1 000335   000022 772000                    QRL     18
         1 000336   000001 136007                    SBLQ    1,DL
         1 000337   000000 116100                    CMPQ    0,,PR0
         1 000340   001555 600000 1                  TZE     IF_COMMAND_LAST_FAILURE

     1528     7768    2                    GOTO IF_COMMAND_LAST_FAILURE;
     1529     7769    3                 ELSE DO; /* IF COMMAND */

     1530     7770    3                    CALL VDE$PNUMBER

   7770  1 000341   300003 476500                    LDP6    3,,PR3
         1 000342   600003 477500                    LDP7    3,,PR6
         1 000343   200012 630500                    EPPR0   SINK,,AUTO
         1 000344   200027 450500                    STP0    @TEXTC_REMOTE$+3,,AUTO
         1 000345   200026 457500                    STP7    @TEXTC_REMOTE$+2,,AUTO
         1 000346   200026 630500                    EPPR0   @TEXTC_REMOTE$+2,,AUTO
         1 000347   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000350   000000 701000 xent               TSX1    VDE$PNUMBER
         1 000351   001565 702000 1                  TSX2    PSTRING_FAILED

     1531     7771    3                      (CMD$BLK.SUBLK$(0) -> CMD$BLK.SUBLK$(0) -> CMD$BLK, SINK)
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:200  
     1532     7772    3                      ALTRET (PNUMBER_FAILED);
     1533     7773    3                    IF SINK < 0 THEN SINK = 0; /* Prepare for level counting */

   7773  1 000352   200012 235100                    LDA     SINK,,AUTO
         1 000353   000355 605000 1                  TPL     s:7774

   7773  1 000354   200012 450100                    STZ     SINK,,AUTO

     1534     7774    3                    IF SINK > 0 THEN CMD$STREAM.IF_CMD = '1'B;

   7774  1 000355   200012 235100                    LDA     SINK,,AUTO
         1 000356   000363 604400 1                  TMOZ    s:7776

   7774  1 000357   000026 470400 xsym               LDP0    VD_6E+22
         1 000360   100000 236007                    LDQ     32768,DL
         1 000361   000027 256100                    ORSQ    23,,PR0
         1 000362   000412 710000 1                  TRA     s:7785

     1535     7775    4                    ELSE DO UNTIL SINK < 0;

     1536     7776    4                       CMD_INDEX = CMD_INDEX + 1;

   7776  1 000363   200004 470500                    LDP0    @CMD_INDEX,,AUTO
         1 000364   000000 054100                    AOS     0,,PR0

     1537     7777    4                       IF CMD_INDEX = PT_COMMAND_PARENT.NSUBLKS-1 THEN EXIT;

   7777  1 000365   200003 471500                    LDP1    @PT_COMMAND_PARENT,,AUTO
         1 000366   100001 236100                    LDQ     1,,PR1
         1 000367   000022 772000                    QRL     18
         1 000370   000001 136007                    SBLQ    1,DL
         1 000371   000000 116100                    CMPQ    0,,PR0
         1 000372   000412 600000 1                  TZE     s:7785

     1538     7778    4                       CMD_BLK$ = PT_COMMAND_PARENT.SUBLK$ (CMD_INDEX);

   7778  1 000373   000000 235100                    LDA     0,,PR0
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:201  
         1 000374   100003 236105                    LDQ     3,AL,PR1
         1 000375   200006 756100                    STQ     CMD_BLK$,,AUTO

     1539     7779    4                       IF CMD$BLK.CODE = %T_IF_CMD THEN

   7779  1 000376   200006 473500                    LDP3    CMD_BLK$,,AUTO
         1 000377   300000 720100                    LXL0    0,,PR3
         1 000400   001772 100003                    CMPX0   1018,DU
         1 000401   000410 601000 1                  TNZ     s:7782

     1540     7780    4                          IF CMD$BLK.NSUBLKS > 0 THEN SINK = SINK + 1;

   7780  1 000402   300001 221100                    LDX1    1,,PR3
         1 000403   000406 600000 1                  TZE     s:7781

   7780  1 000404   200012 054100                    AOS     SINK,,AUTO
         1 000405   000410 710000 1                  TRA     s:7782

     1541     7781    4                          ELSE SINK = SINK - 1;

   7781  1 000406   000001 336007                    LCQ     1,DL
         1 000407   200012 056100                    ASQ     SINK,,AUTO

     1542     7782    4                       END;

   7782  1 000410   200012 235100                    LDA     SINK,,AUTO
         1 000411   000363 605000 1                  TPL     s:7776

     1543     7783    3                    END;

     1544     7784
     1545     7785    2              CALL VDG$OFREE (IT$COMMAND) ALTRET (OFREE_FAILED);

   7785  1 000412   200005 470500                    LDP0    @IT_COMMAND$,,AUTO
         1 000413   000000 471500                    LDP1    0,,PR0
         1 000414   200026 451500                    STP1    @TEXTC_REMOTE$+2,,AUTO
         1 000415   200026 630500                    EPPR0   @TEXTC_REMOTE$+2,,AUTO
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:202  
         1 000416   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000417   000000 701000 xent               TSX1    VDG$OFREE
         1 000420   001574 702000 1                  TSX2    OALLOC_FAILED

     1546     7786    2              IT_COMMAND$ = ADDR(NIL);

   7786  1 000421   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000422   200005 470500                    LDP0    @IT_COMMAND$,,AUTO
         1 000423   000000 756100                    STQ     0,,PR0
         1 000424   001506 710000 1                  TRA     s:8108

     1547     7787
     1548     7788
     1549     7789    2            CASE (%T_KEYIN_CMD);

     1550     7790                   /*
     1551     7791                   *  The ParseTree for the KEYIN command is:
     1552     7792                   *
     1553     7793                   *                      T_KEYIN_CMD
     1554     7794                   *                           |
     1555     7795                   *          -------------------------------- (opt.) ---
     1556     7796                   *          |                         |               |
     1557     7797                   *  T_BREAK or T_KEYIN_NAME     T_KEYIN_VALUE    T_IN_WINDOW
     1558     7798                   *                   |                |               |
     1559     7799                   *             T_STRING_EXPR    T_STRING_EXPR         |
     1560     7800                   *                   |                |               |
     1561     7801                   *                XUE_EXP#         XUE_EXP#        one of:
     1562     7802                   *
     1563     7803                   *  T_COMMAND_WINDOW  or  T_EDITING_WINDOW  or  T_SPECIFIC_WINDOW
     1564     7804                   *                                                     |
     1565     7805                   *                                                T_STRING_EXPR
     1566     7806                   *                                                     |
     1567     7807                   *                                                  XUE_EXP#
     1568     7808                   */
     1569     7809
     1570     7810                   %INCREMENT (ARRAY=STATS_TOKENS#,
     1571     7811                   INDX="CMD$BLK.SUBLK$ (0) -> CMD$BLK.CODE - %VD_BASE#");
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:203  

   7812  1 000425   300003 476500                    LDP6    3,,PR3
         1 000426   600000 720100                    LXL0    0,,PR6
         1 000427   776375 054010 xsym               AOS     VD_6E-771,X0

     1572     7814    2              CALL VDE$PSTRING (CMD$BLK.SUBLK$(0) -> CMD$BLK.SUBLK$(0) ->

   7814  1 000430   300003 475500                    LDP5    3,,PR3
         1 000431   500003 476500                    LDP6    3,,PR5
         1 000432   600003 477500                    LDP7    3,,PR6
         1 000433   400000 470500                    LDP0    0,,PR4
         1 000434   200016 631500                    EPPR1   CTRL_FN_ARGS_ARRAY,,AUTO
         1 000435   200032 451500                    STP1    @TEXTC_REMOTE$+6,,AUTO
         1 000436   200011 635500                    EPPR5   RETCODE,,AUTO
         1 000437   200031 455500                    STP5    @TEXTC_REMOTE$+5,,AUTO
         1 000440   000006 636500                    EPPR6   6,,PR0
         1 000441   200030 456500                    STP6    @TEXTC_REMOTE$+4,,AUTO
         1 000442   200012 630500                    EPPR0   SINK,,AUTO
         1 000443   200027 450500                    STP0    @TEXTC_REMOTE$+3,,AUTO
         1 000444   200026 457500                    STP7    @TEXTC_REMOTE$+2,,AUTO
         1 000445   200026 630500                    EPPR0   @TEXTC_REMOTE$+2,,AUTO
         1 000446   000023 631400 xsym               EPPR1   B_VECTNIL+19
         1 000447   000000 701000 xent               TSX1    VDE$PSTRING
         1 000450   001565 702000 1                  TSX2    PSTRING_FAILED

     1573     7815    2                CMD$BLK.SUBLK$(0) -> CMD$BLK, SINK,
     1574     7816    2                IT$COMMAND.PARAM$ (%CP_KE_NAME), RETCODE, CTRL_FN_ARGS_ARRAY)
     1575     7817    2                ALTRET (PSTRING_FAILED);
     1576     7818    2              IF RETCODE ~= %CHR_SPACE THEN

   7818  1 000451   200011 236100                    LDQ     RETCODE,,AUTO
         1 000452   777000 376003                    ANQ     -512,DU
         1 000453   040000 116003                    CMPQ    16384,DU
         1 000454   001537 601000 1                  TNZ     CTRLFN_CONFLICTS_W_KEYIN_ERROR

     1577     7819    2                 GOTO CTRLFN_CONFLICTS_W_KEYIN_ERROR;
     1578     7820
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:204  
     1579     7821    2              IF IT$COMMAND.PARAM$ (%CP_KE_NAME) = ADDR(NIL) THEN

   7821  1 000455   200005 470500                    LDP0    @IT_COMMAND$,,AUTO
         1 000456   000000 471500                    LDP1    0,,PR0
         1 000457   100006 236100                    LDQ     6,,PR1
         1 000460   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000461   000464 601000 1                  TNZ     s:7826

     1580     7822    2                 IT$COMMAND.PARAM$ (%CP_KE_NAME) = ADDR(ZERO_LENGTH_BUFFER);

   7822  1 000462   000003 236000 2                  LDQ     3
         1 000463   100006 756100                    STQ     6,,PR1

     1581     7823
     1582     7824                   %INCREMENT (ARRAY=STATS_TOKENS#,
     1583     7825                   INDX="CMD$BLK.SUBLK$ (1) -> CMD$BLK.CODE - %VD_BASE#");

   7826  1 000464   200006 471500                    LDP1    CMD_BLK$,,AUTO
         1 000465   100004 473500                    LDP3    4,,PR1
         1 000466   300000 720100                    LXL0    0,,PR3
         1 000467   776375 054010 xsym               AOS     VD_6E-771,X0

     1584     7828    2              CALL VDE$PSTRING (CMD$BLK.SUBLK$ (1) -> CMD$BLK.SUBLK$ (0) ->

   7828  1 000470   100004 473500                    LDP3    4,,PR1
         1 000471   300003 474500                    LDP4    3,,PR3
         1 000472   400003 475500                    LDP5    3,,PR4
         1 000473   000000 476500                    LDP6    0,,PR0
         1 000474   200016 637500                    EPPR7   CTRL_FN_ARGS_ARRAY,,AUTO
         1 000475   200032 457500                    STP7    @TEXTC_REMOTE$+6,,AUTO
         1 000476   200011 633500                    EPPR3   RETCODE,,AUTO
         1 000477   200031 453500                    STP3    @TEXTC_REMOTE$+5,,AUTO
         1 000500   600007 634500                    EPPR4   7,,PR6
         1 000501   200030 454500                    STP4    @TEXTC_REMOTE$+4,,AUTO
         1 000502   200012 636500                    EPPR6   SINK,,AUTO
         1 000503   200027 456500                    STP6    @TEXTC_REMOTE$+3,,AUTO
         1 000504   200026 455500                    STP5    @TEXTC_REMOTE$+2,,AUTO
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:205  
         1 000505   200026 630500                    EPPR0   @TEXTC_REMOTE$+2,,AUTO
         1 000506   000023 631400 xsym               EPPR1   B_VECTNIL+19
         1 000507   000000 701000 xent               TSX1    VDE$PSTRING
         1 000510   001565 702000 1                  TSX2    PSTRING_FAILED

     1585     7829    2                CMD$BLK.SUBLK$ (0) -> CMD$BLK, SINK,
     1586     7830    2                IT$COMMAND.PARAM$ (%CP_KE_VALUE), RETCODE, CTRL_FN_ARGS_ARRAY)
     1587     7831    2                ALTRET (PSTRING_FAILED);
     1588     7832    2              IF RETCODE ~= %CHR_SPACE THEN

   7832  1 000511   200011 236100                    LDQ     RETCODE,,AUTO
         1 000512   777000 376003                    ANQ     -512,DU
         1 000513   040000 116003                    CMPQ    16384,DU
         1 000514   001537 601000 1                  TNZ     CTRLFN_CONFLICTS_W_KEYIN_ERROR

     1589     7833    2                 GOTO CTRLFN_CONFLICTS_W_KEYIN_ERROR;
     1590     7834
     1591     7835    2              IF IT$COMMAND.PARAM$ (%CP_KE_VALUE) = ADDR(NIL) THEN

   7835  1 000515   200005 470500                    LDP0    @IT_COMMAND$,,AUTO
         1 000516   000000 471500                    LDP1    0,,PR0
         1 000517   100007 236100                    LDQ     7,,PR1
         1 000520   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000521   000524 601000 1                  TNZ     s:7838

     1592     7836    2                 IT$COMMAND.PARAM$ (%CP_KE_VALUE) = ADDR(ZERO_LENGTH_BUFFER);

   7836  1 000522   000003 236000 2                  LDQ     3
         1 000523   100007 756100                    STQ     7,,PR1

     1593     7837
     1594     7838    2              SINK = 2;

   7838  1 000524   000002 235007                    LDA     2,DL
         1 000525   200012 755100                    STA     SINK,,AUTO

     1595     7839    2              IF CMD$BLK.NSUBLKS > 2 THEN
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:206  

   7839  1 000526   200006 471500                    LDP1    CMD_BLK$,,AUTO
         1 000527   100001 220100                    LDX0    1,,PR1
         1 000530   000003 100003                    CMPX0   3,DU
         1 000531   001506 602000 1                  TNC     s:8108

     1596     7840    3   BUILD_WINDOW_SPECIFIER: DO;

   7840  1 000532                       BUILD_WINDO* null
     1597     7841                      /* Build a VD$NUMBER containing the window specifier */
     1598     7842                      %INCREMENT (ARRAY=STATS_TOKENS#,
     1599     7843                      INDX="CMD$BLK.SUBLK$ (SINK) -> CMD$BLK.CODE - %VD_BASE#");

   7844  1 000532   100003 473505                    LDP3    3,AL,PR1
         1 000533   300000 721100                    LXL1    0,,PR3
         1 000534   200012 722100                    LXL2    SINK,,AUTO
         1 000535   100003 473512                    LDP3    3,X2,PR1
         1 000536   300000 723100                    LXL3    0,,PR3
         1 000537   776375 235013 xsym               LDA     VD_6E-771,X3
         1 000540   000001 035007                    ADLA    1,DL
         1 000541   776375 755011 xsym               STA     VD_6E-771,X1

     1600     7846    3                 CMD_BLK$ = CMD$BLK.SUBLK$ (SINK) -> CMD$BLK.SUBLK$ (0);

   7846  1 000542   100003 473512                    LDP3    3,X2,PR1
         1 000543   300003 236100                    LDQ     3,,PR3
         1 000544   200006 756100                    STQ     CMD_BLK$,,AUTO

     1601     7847                      %INCREMENT (ARRAY=STATS_TOKENS#, INDX="CMD$BLK.CODE - %VD_BASE#");

   7848  1 000545   200006 471500                    LDP1    CMD_BLK$,,AUTO
         1 000546   100000 720100                    LXL0    0,,PR1
         1 000547   776375 054010 xsym               AOS     VD_6E-771,X0

     1602     7850    3                 IF CMD$BLK.CODE = %T_COMMAND_WINDOW THEN

   7850  1 000550   100000 720100                    LXL0    0,,PR1
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:207  
         1 000551   002064 100003                    CMPX0   1076,DU
         1 000552   000556 601000 1                  TNZ     s:7852

     1603     7851    3                    WINDOW_SUBSCRIPT = %WK_COMMAND_WINDOW + %WI_KEY_OFFSET;

   7851  1 000553   000002 235007                    LDA     2,DL
         1 000554   200013 755100                    STA     WINDOW_SUBSCRIPT,,AUTO
         1 000555   000605 710000 1                  TRA     s:7867

     1604     7852    3                 ELSE IF CMD$BLK.CODE = %T_EDITING_WINDOW THEN

   7852  1 000556   002065 100003                    CMPX0   1077,DU
         1 000557   000563 601000 1                  TNZ     s:7857

     1605     7853    3                       WINDOW_SUBSCRIPT = %WI_EDITING;

   7853  1 000560   000001 235007                    LDA     1,DL
         1 000561   200013 755100                    STA     WINDOW_SUBSCRIPT,,AUTO
         1 000562   000605 710000 1                  TRA     s:7867

     1606     7854    4                    ELSE DO;

     1607     7855                            %INCREMENT (ARRAY=STATS_TOKENS#,
     1608     7856                            INDX="CMD$BLK.SUBLK$ (0) -> CMD$BLK.CODE - %VD_BASE#");

   7857  1 000563   100003 473500                    LDP3    3,,PR1
         1 000564   300000 721100                    LXL1    0,,PR3
         1 000565   776375 054011 xsym               AOS     VD_6E-771,X1

     1609     7859    4                       CALL VDE$PNUMBER (CMD$BLK.SUBLK$ (0) ->

   7859  1 000566   100003 473500                    LDP3    3,,PR1
         1 000567   300003 474500                    LDP4    3,,PR3
         1 000570   200013 635500                    EPPR5   WINDOW_SUBSCRIPT,,AUTO
         1 000571   200027 455500                    STP5    @TEXTC_REMOTE$+3,,AUTO
         1 000572   200026 454500                    STP4    @TEXTC_REMOTE$+2,,AUTO
         1 000573   200026 630500                    EPPR0   @TEXTC_REMOTE$+2,,AUTO
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:208  
         1 000574   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000575   000000 701000 xent               TSX1    VDE$PNUMBER
         1 000576   001565 702000 1                  TSX2    PSTRING_FAILED

     1610     7860    4                         CMD$BLK.SUBLK$ (0) -> CMD$BLK, WINDOW_SUBSCRIPT)
     1611     7861    4                         ALTRET (PNUMBER_FAILED);
     1612     7862    4                       IF WINDOW_SUBSCRIPT < 0 OR WINDOW_SUBSCRIPT >

   7862  1 000577   200013 235100                    LDA     WINDOW_SUBSCRIPT,,AUTO
         1 000600   001521 604000 1                  TMI     WI_KEY_NOT_IN_RANGE_FAILURE
         1 000601   000012 115007                    CMPA    10,DL
         1 000602   001521 605400 1                  TPNZ    WI_KEY_NOT_IN_RANGE_FAILURE

     1613     7863    4                         (%MX_EDITING_WINDOWS + %WK_1ST_EDITING_WINDOW - 1) THEN
     1614     7864    4                          GOTO WI_KEY_NOT_IN_RANGE_FAILURE;
     1615     7865    4                       WINDOW_SUBSCRIPT = WINDOW_SUBSCRIPT + %WI_KEY_OFFSET;

   7865  1 000603   000002 236007                    LDQ     2,DL
         1 000604   200013 056100                    ASQ     WINDOW_SUBSCRIPT,,AUTO

     1616     7866    4                       END;

     1617     7867    3                 CALL VDG$OALLOC (%CLS_NUMBER, VD_NUMBER$)

   7867  1 000605   200015 630500                    EPPR0   VD_NUMBER$,,AUTO
         1 000606   200027 450500                    STP0    @TEXTC_REMOTE$+3,,AUTO
         1 000607   000005 236000 2                  LDQ     5
         1 000610   200026 756100                    STQ     @TEXTC_REMOTE$+2,,AUTO
         1 000611   200026 630500                    EPPR0   @TEXTC_REMOTE$+2,,AUTO
         1 000612   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000613   000000 701000 xent               TSX1    VDG$OALLOC
         1 000614   001574 702000 1                  TSX2    OALLOC_FAILED

     1618     7868    3                   ALTRET (OALLOC_FAILED);
     1619     7869    3                 IF SINK = 2 THEN

   7869  1 000615   200012 235100                    LDA     SINK,,AUTO
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:209  
         1 000616   000002 115007                    CMPA    2,DL
         1 000617   000625 601000 1                  TNZ     s:7872

     1620     7870    3                    IT$COMMAND.PARAM$ (%CP_KE_IN) = VD_NUMBER$;

   7870  1 000620   200005 470500                    LDP0    @IT_COMMAND$,,AUTO
         1 000621   000000 471500                    LDP1    0,,PR0
         1 000622   200015 236100                    LDQ     VD_NUMBER$,,AUTO
         1 000623   100010 756100                    STQ     8,,PR1
         1 000624   000631 710000 1                  TRA     s:7873

     1621     7871    3                 ELSE
     1622     7872    3                    IT$COMMAND.PARAM$ (%CP_EQ_IN) = VD_NUMBER$;

   7872  1 000625   200005 470500                    LDP0    @IT_COMMAND$,,AUTO
         1 000626   000000 471500                    LDP1    0,,PR0
         1 000627   200015 236100                    LDQ     VD_NUMBER$,,AUTO
         1 000630   100010 756100                    STQ     8,,PR1

     1623     7873    3                 VD$NUMBER.V# = WINDOW_SUBSCRIPT;

   7873  1 000631   200015 471500                    LDP1    VD_NUMBER$,,AUTO
         1 000632   200013 235100                    LDA     WINDOW_SUBSCRIPT,,AUTO
         1 000633   100003 755100                    STA     3,,PR1

     1624     7874    3                 END BUILD_WINDOW_SPECIFIER;

   7874  1 000634   001506 710000 1                  TRA     s:8108

     1625     7875
     1626     7876
     1627     7877    2            CASE (%T_LOCATION_CMD);

     1628     7878                   /*
     1629     7879                   *  The ParseTree for a LOCATION command is:
     1630     7880                   *
     1631     7881                   *                T_LOCATION_CMD
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:210  
     1632     7882                   *                      |
     1633     7883                   *            ----------------------
     1634     7884                   *            |                    |
     1635     7885                   *        T_DEF_NAME          T_BLOCK_EXPR
     1636     7886                   *            |
     1637     7887                   *         .symbol
     1638     7888                   */
     1639     7889                   %INCREMENT (ARRAY=STATS_TOKENS#,
     1640     7890                   INDX="CMD$BLK.SUBLK$ (0) -> CMD$BLK.CODE - %VD_BASE#");

   7891  1 000635   300003 476500                    LDP6    3,,PR3
         1 000636   600000 720100                    LXL0    0,,PR6
         1 000637   776375 054010 xsym               AOS     VD_6E-771,X0

     1641     7893    2              SYM_BLK$ = CMD$BLK.SUBLK$ (0) -> CMD$BLK.SUBLK$ (0);

   7893  1 000640   300003 475500                    LDP5    3,,PR3
         1 000641   500003 236100                    LDQ     3,,PR5
         1 000642   200007 756100                    STQ     SYM_BLK$,,AUTO

     1642     7894    2              CALL XLATE (SYM$BLK.TEXT, B$XL_UPPER, SYM$BLK.TEXT);

   7894  1 000643   200007 476500                    LDP6    SYM_BLK$,,AUTO
         1 000644   600004 236100                    LDQ     4,,PR6
         1 000645   000033 772000                    QRL     27
         1 000646   000000 620006                    EAX0    0,QL
         1 000647   000000 477400 xsym               LDP7    B$XL_UPPER$
         1 000650   000000 621006                    EAX1    0,QL
         1 000651   040140 160540                    MVT     fill='040'O
         1 000652   600004 200010                    ADSC9   4,,PR6                   cn=1,n=*X0
         1 000653   600004 200011                    ADSC9   4,,PR6                   cn=1,n=*X1
         1 000654   700000 000100                    ARG     0,,PR7

     1643     7895    2              CALL MAKE_TEXTC_REMOTE (SYM$BLK.TEXTC$ -> VD$TEXTC,

   7895  1 000655   600003 475500                    LDP5    3,,PR6
         1 000656   400000 470500                    LDP0    0,,PR4
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:211  
         1 000657   000007 631500                    EPPR1   7,,PR0
         1 000660   200024 451500                    STP1    @TEXTC+1,,AUTO
         1 000661   200023 455500                    STP5    SUBST_FIELD$+2,,AUTO
         1 000662   001600 701000 1                  TSX1    MAKE_TEXTC_REMOTE
         1 000663   001565 702000 1                  TSX2    PSTRING_FAILED

     1644     7896    2                IT$COMMAND.PARAM$ (%CP_LO_NAME))
     1645     7897    2                ALTRET (MAKE_TEXTC_REMOTE_FAILED);
     1646     7898
     1647     7899    2              IT$COMMAND.PT_BLOCK_EXPR$ = CMD$BLK.SUBLK$ (1);

   7899  1 000664   200005 470500                    LDP0    @IT_COMMAND$,,AUTO
         1 000665   000000 471500                    LDP1    0,,PR0
         1 000666   200006 473500                    LDP3    CMD_BLK$,,AUTO
         1 000667   300004 236100                    LDQ     4,,PR3
         1 000670   100004 756100                    STQ     4,,PR1
         1 000671   001506 710000 1                  TRA     s:8108

     1648     7900
     1649     7901
     1650     7902    2            CASE (%T_READ_CMD);

     1651     7903                   /*
     1652     7904                   *  The ParseTree for the READ command is:
     1653     7905                   *
     1654     7906                   *             T_READ_CMD
     1655     7907                   *                 |
     1656     7908                   *               T_FID     *N* or T_BLOCK_EXPR or T_STRING_EXPR
     1657     7909                   */
     1658     7910    2              SYM_BLK$ = CMD$BLK.SUBLK$ (0);

   7910  1 000672   300003 236100                    LDQ     3,,PR3
         1 000673   200007 756100                    STQ     SYM_BLK$,,AUTO

     1659     7911                   %INCREMENT (ARRAY=STATS_TOKENS#, INDX="SYM$BLK.CODE - %VD_BASE#");

   7912  1 000674   200007 476500                    LDP6    SYM_BLK$,,AUTO
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:212  
         1 000675   600000 720100                    LXL0    0,,PR6
         1 000676   776375 054010 xsym               AOS     VD_6E-771,X0

     1660     7914    2              CALL MAKE_TEXTC_REMOTE (SYM$BLK.TEXTC$ -> VD$TEXTC,

   7914  1 000677   600003 475500                    LDP5    3,,PR6
         1 000700   400000 477500                    LDP7    0,,PR4
         1 000701   700006 630500                    EPPR0   6,,PR7
         1 000702   200024 450500                    STP0    @TEXTC+1,,AUTO
         1 000703   200023 455500                    STP5    SUBST_FIELD$+2,,AUTO
         1 000704   001600 701000 1                  TSX1    MAKE_TEXTC_REMOTE
         1 000705   001565 702000 1                  TSX2    PSTRING_FAILED

     1661     7915    2                IT$COMMAND.PARAM$ (%CP_READ_FID))
     1662     7916    2                ALTRET (MAKE_TEXTC_REMOTE_FAILED);
     1663     7917
     1664     7918    2              CALL VDG$OALLOC (%CLS_NUMBER, VD_NUMBER$)

   7918  1 000706   200015 630500                    EPPR0   VD_NUMBER$,,AUTO
         1 000707   200027 450500                    STP0    @TEXTC_REMOTE$+3,,AUTO
         1 000710   000005 236000 2                  LDQ     5
         1 000711   200026 756100                    STQ     @TEXTC_REMOTE$+2,,AUTO
         1 000712   200026 630500                    EPPR0   @TEXTC_REMOTE$+2,,AUTO
         1 000713   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000714   000000 701000 xent               TSX1    VDG$OALLOC
         1 000715   001574 702000 1                  TSX2    OALLOC_FAILED

     1665     7919    2                ALTRET (OALLOC_FAILED);
     1666     7920    2              IT$COMMAND.PARAM$ (%CP_READ_NEXT_COMMAND) = VD_NUMBER$;

   7920  1 000716   200005 470500                    LDP0    @IT_COMMAND$,,AUTO
         1 000717   000000 471500                    LDP1    0,,PR0
         1 000720   200015 236100                    LDQ     VD_NUMBER$,,AUTO
         1 000721   100007 756100                    STQ     7,,PR1

     1667     7921    2              VD$NUMBER.V# = 0;     /* Assume no more cmds on this record */

PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:213  
   7921  1 000722   200015 471500                    LDP1    VD_NUMBER$,,AUTO
         1 000723   100003 450100                    STZ     3,,PR1

     1668     7922    3              IF CMD_INDEX < (PT_COMMAND_PARENT.NSUBLKS - 1) THEN DO;

   7922  1 000724   200004 471500                    LDP1    @CMD_INDEX,,AUTO
         1 000725   200003 473500                    LDP3    @PT_COMMAND_PARENT,,AUTO
         1 000726   300001 236100                    LDQ     1,,PR3
         1 000727   000022 772000                    QRL     18
         1 000730   000001 136007                    SBLQ    1,DL
         1 000731   100000 116100                    CMPQ    0,,PR1
         1 000732   001506 604400 1                  TMOZ    s:8108

     1669     7923    3                 VD$NUMBER.V# = PT_COMMAND_PARENT.SUBLK$ (CMD_INDEX + 1) ->

   7923  1 000733   100000 235100                    LDA     0,,PR1
         1 000734   300004 474505                    LDP4    4,AL,PR3
         1 000735   400002 235100                    LDA     2,,PR4
         1 000736   200015 474500                    LDP4    VD_NUMBER$,,AUTO
         1 000737   400003 755100                    STA     3,,PR4

     1670     7924    3                   CMD$BLK.CPOS;
     1671     7925                      /* Force no more processing of this record for now */
     1672     7926    3                 CMD_INDEX = PT_COMMAND_PARENT.NSUBLKS;

   7926  1 000740   300001 236100                    LDQ     1,,PR3
         1 000741   000022 772000                    QRL     18
         1 000742   100000 756100                    STQ     0,,PR1

     1673     7927    3                 END;

   7927  1 000743   001506 710000 1                  TRA     s:8108

     1674     7928
     1675     7929
     1676     7930    2            CASE (%T_RESTORE_CMD);

PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:214  
     1677     7931                   /*
     1678     7932                   *  The ParseTree for the RESTORE command is:
     1679     7933                   *
     1680     7934                   *           T_RESTORE_CMD
     1681     7935                   *                 |
     1682     7936                   *               T_FID     *N* or T_BLOCK_EXPR or T_STRING_EXPR
     1683     7937                   */
     1684     7938    2              SYM_BLK$ = CMD$BLK.SUBLK$ (0);

   7938  1 000744   300003 236100                    LDQ     3,,PR3
         1 000745   200007 756100                    STQ     SYM_BLK$,,AUTO

     1685     7939                   %INCREMENT (ARRAY=STATS_TOKENS#, INDX="SYM$BLK.CODE - %VD_BASE#");

   7940  1 000746   200007 476500                    LDP6    SYM_BLK$,,AUTO
         1 000747   600000 720100                    LXL0    0,,PR6
         1 000750   776375 054010 xsym               AOS     VD_6E-771,X0

     1686     7942    2              CALL MAKE_TEXTC_REMOTE (SYM$BLK.TEXTC$ -> VD$TEXTC,

   7942  1 000751   600003 475500                    LDP5    3,,PR6
         1 000752   400000 477500                    LDP7    0,,PR4
         1 000753   700006 630500                    EPPR0   6,,PR7
         1 000754   200024 450500                    STP0    @TEXTC+1,,AUTO
         1 000755   200023 455500                    STP5    SUBST_FIELD$+2,,AUTO
         1 000756   001600 701000 1                  TSX1    MAKE_TEXTC_REMOTE
         1 000757   001565 702000 1                  TSX2    PSTRING_FAILED
         1 000760   001506 710000 1                  TRA     s:8108

     1687     7943    2                IT$COMMAND.PARAM$ (%CP_RESTORE_FID))
     1688     7944    2                ALTRET (MAKE_TEXTC_REMOTE_FAILED);
     1689     7945
     1690     7946
     1691     7947    2            CASE (%T_SAVE_CMD);

     1692     7948                   /*
     1693     7949                   *  The ParseTree for the SAVE command is:
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:215  
     1694     7950                   *
     1695     7951                   *                             T_SAVE_CMD
     1696     7952                   *                                 |
     1697     7953                   *              (opt.) --------------------------------------
     1698     7954                   *                |                            |            |
     1699     7955                   *      ALL or SETUP or SESSION              T_TO or       FID
     1700     7956                   *                                          T_OVER or    (PARSE$SYM
     1701     7957                   *                                                       with fid)
     1702     7958                   */
     1703     7959
     1704     7960    2   EACH_SAVE_CHILD:
     1705     7961    3              DO SYM_BLK = 0 TO CMD$BLK.NSUBLKS - 1;

   7961  1 000761   200010 450100       EACH_SAVE_C* STZ     SYM_BLK,,AUTO
         1 000762   001134 710000 1                  TRA     s:7987+1

     1706     7962    3                 SYM_BLK$ = CMD$BLK.SUBLK$ (SYM_BLK);

   7962  1 000763   200006 470500                    LDP0    CMD_BLK$,,AUTO
         1 000764   200010 720100                    LXL0    SYM_BLK,,AUTO
         1 000765   000003 236110                    LDQ     3,X0,PR0
         1 000766   200007 756100                    STQ     SYM_BLK$,,AUTO

     1707     7963                      %INCREMENT(ARRAY=STATS_TOKENS#, INDX="SYM$BLK.CODE - %VD_BASE#");

   7964  1 000767   200007 471500                    LDP1    SYM_BLK$,,AUTO
         1 000770   100000 721100                    LXL1    0,,PR1
         1 000771   776375 054011 xsym               AOS     VD_6E-771,X1

     1708     7966    4                 DO CASE (SYM$BLK.CODE);

   7966  1 000772   100000 236100                    LDQ     0,,PR1
         1 000773   777777 376007                    ANQ     -1,DL
         1 000774   001777 136007                    SBLQ    1023,DL
         1 000775   000072 116007                    CMPQ    58,DL
         1 000776   001000 602006 1                  TNC     s:7966+6,QL
         1 000777   001133 710000 1                  TRA     s:7987
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:216  
         1 001000   001072 710000 1                  TRA     s:7968
         1 001001   001133 710000 1                  TRA     s:7987
         1 001002   001111 710000 1                  TRA     s:7977
         1 001003   001133 710000 1                  TRA     s:7987
         1 001004   001116 710000 1                  TRA     s:7980
         1 001005   001133 710000 1                  TRA     s:7987
         1 001006   001133 710000 1                  TRA     s:7987
         1 001007   001133 710000 1                  TRA     s:7987
         1 001010   001123 710000 1                  TRA     s:7983
         1 001011   001133 710000 1                  TRA     s:7987
         1 001012   001133 710000 1                  TRA     s:7987
         1 001013   001133 710000 1                  TRA     s:7987
         1 001014   001133 710000 1                  TRA     s:7987
         1 001015   001133 710000 1                  TRA     s:7987
         1 001016   001133 710000 1                  TRA     s:7987
         1 001017   001133 710000 1                  TRA     s:7987
         1 001020   001133 710000 1                  TRA     s:7987
         1 001021   001133 710000 1                  TRA     s:7987
         1 001022   001133 710000 1                  TRA     s:7987
         1 001023   001133 710000 1                  TRA     s:7987
         1 001024   001133 710000 1                  TRA     s:7987
         1 001025   001133 710000 1                  TRA     s:7987
         1 001026   001133 710000 1                  TRA     s:7987
         1 001027   001133 710000 1                  TRA     s:7987
         1 001030   001133 710000 1                  TRA     s:7987
         1 001031   001133 710000 1                  TRA     s:7987
         1 001032   001133 710000 1                  TRA     s:7987
         1 001033   001133 710000 1                  TRA     s:7987
         1 001034   001133 710000 1                  TRA     s:7987
         1 001035   001133 710000 1                  TRA     s:7987
         1 001036   001133 710000 1                  TRA     s:7987
         1 001037   001133 710000 1                  TRA     s:7987
         1 001040   001133 710000 1                  TRA     s:7987
         1 001041   001133 710000 1                  TRA     s:7987
         1 001042   001133 710000 1                  TRA     s:7987
         1 001043   001133 710000 1                  TRA     s:7987
         1 001044   001133 710000 1                  TRA     s:7987
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:217  
         1 001045   001133 710000 1                  TRA     s:7987
         1 001046   001133 710000 1                  TRA     s:7987
         1 001047   001133 710000 1                  TRA     s:7987
         1 001050   001133 710000 1                  TRA     s:7987
         1 001051   001133 710000 1                  TRA     s:7987
         1 001052   001133 710000 1                  TRA     s:7987
         1 001053   001133 710000 1                  TRA     s:7987
         1 001054   001133 710000 1                  TRA     s:7987
         1 001055   001133 710000 1                  TRA     s:7987
         1 001056   001133 710000 1                  TRA     s:7987
         1 001057   001133 710000 1                  TRA     s:7987
         1 001060   001133 710000 1                  TRA     s:7987
         1 001061   001133 710000 1                  TRA     s:7987
         1 001062   001133 710000 1                  TRA     s:7987
         1 001063   001133 710000 1                  TRA     s:7987
         1 001064   001133 710000 1                  TRA     s:7987
         1 001065   001133 710000 1                  TRA     s:7987
         1 001066   001133 710000 1                  TRA     s:7987
         1 001067   001133 710000 1                  TRA     s:7987
         1 001070   001077 710000 1                  TRA     s:7971
         1 001071   001104 710000 1                  TRA     s:7974

     1709     7967    4                  CASE (%T_ALL);

     1710     7968    4                    IT$COMMAND.FLAGS (%CF_SAVE_ALL) = %TRUE;

   7968  1 001072   200005 473500                    LDP3    @IT_COMMAND$,,AUTO
         1 001073   300000 474500                    LDP4    0,,PR3
         1 001074   400000 236003                    LDQ     -131072,DU
         1 001075   400005 256100                    ORSQ    5,,PR4
         1 001076   001133 710000 1                  TRA     s:7987

     1711     7969
     1712     7970    4                  CASE (%T_SETUP);

     1713     7971    4                    IT$COMMAND.FLAGS (%CF_SAVE_SETUP) = %TRUE;

PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:218  
   7971  1 001077   200005 473500                    LDP3    @IT_COMMAND$,,AUTO
         1 001100   300000 474500                    LDP4    0,,PR3
         1 001101   200000 236003                    LDQ     65536,DU
         1 001102   400005 256100                    ORSQ    5,,PR4
         1 001103   001133 710000 1                  TRA     s:7987

     1714     7972
     1715     7973    4                  CASE (%T_SESSION);

     1716     7974    4                    IT$COMMAND.FLAGS (%CF_SAVE_SESSION) = %TRUE;

   7974  1 001104   200005 473500                    LDP3    @IT_COMMAND$,,AUTO
         1 001105   300000 474500                    LDP4    0,,PR3
         1 001106   100000 236003                    LDQ     32768,DU
         1 001107   400005 256100                    ORSQ    5,,PR4
         1 001110   001133 710000 1                  TRA     s:7987

     1717     7975
     1718     7976    4                  CASE (%T_TO);

     1719     7977    4                    IT$COMMAND.FLAGS (%CF_SAVE_TO) = %TRUE;

   7977  1 001111   200005 473500                    LDP3    @IT_COMMAND$,,AUTO
         1 001112   300000 474500                    LDP4    0,,PR3
         1 001113   040000 236003                    LDQ     16384,DU
         1 001114   400005 256100                    ORSQ    5,,PR4
         1 001115   001133 710000 1                  TRA     s:7987

     1720     7978
     1721     7979    4                  CASE (%T_OVER);

     1722     7980    4                    IT$COMMAND.FLAGS (%CF_SAVE_OVER) = %TRUE;

   7980  1 001116   200005 473500                    LDP3    @IT_COMMAND$,,AUTO
         1 001117   300000 474500                    LDP4    0,,PR3
         1 001120   020000 236003                    LDQ     8192,DU
         1 001121   400005 256100                    ORSQ    5,,PR4
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:219  
         1 001122   001133 710000 1                  TRA     s:7987

     1723     7981
     1724     7982    4                  CASE (%T_FID);

     1725     7983    4                    CALL MAKE_TEXTC_REMOTE (SYM$BLK.TEXTC$ -> VD$TEXTC,

   7983  1 001123   100003 473500                    LDP3    3,,PR1
         1 001124   200005 474500                    LDP4    @IT_COMMAND$,,AUTO
         1 001125   400000 475500                    LDP5    0,,PR4
         1 001126   500006 636500                    EPPR6   6,,PR5
         1 001127   200024 456500                    STP6    @TEXTC+1,,AUTO
         1 001130   200023 453500                    STP3    SUBST_FIELD$+2,,AUTO
         1 001131   001600 701000 1                  TSX1    MAKE_TEXTC_REMOTE
         1 001132   001565 702000 1                  TSX2    PSTRING_FAILED

     1726     7984    4                      IT$COMMAND.PARAM$ (%CP_SAVE_FID))
     1727     7985    4                      ALTRET (MAKE_TEXTC_REMOTE_FAILED);
     1728     7986    4                  END;

     1729     7987    3                 END EACH_SAVE_CHILD;

   7987  1 001133   200010 054100                    AOS     SYM_BLK,,AUTO
         1 001134   200006 470500                    LDP0    CMD_BLK$,,AUTO
         1 001135   000001 236100                    LDQ     1,,PR0
         1 001136   000022 772000                    QRL     18
         1 001137   200010 116100                    CMPQ    SYM_BLK,,AUTO
         1 001140   000763 605400 1                  TPNZ    s:7962

     1730     7988
     1731     7989    2              IF NOT IT$COMMAND.FLAGS (%CF_SAVE_SETUP)

   7989  1 001141   200005 471500                    LDP1    @IT_COMMAND$,,AUTO
         1 001142   100000 473500                    LDP3    0,,PR1
         1 001143   300005 236100                    LDQ     5,,PR3
         1 001144   200000 316003                    CANQ    65536,DU
         1 001145   001506 601000 1                  TNZ     s:8108
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:220  
         1 001146   100000 316003                    CANQ    32768,DU
         1 001147   001506 601000 1                  TNZ     s:8108

     1732     7990    2                AND NOT IT$COMMAND.FLAGS (%CF_SAVE_SESSION) THEN
     1733     7991    2                 IT$COMMAND.FLAGS (%CF_SAVE_ALL) = %TRUE;  /* Default 1st param */

   7991  1 001150   400000 236003                    LDQ     -131072,DU
         1 001151   300005 256100                    ORSQ    5,,PR3
         1 001152   001506 710000 1                  TRA     s:8108

     1734     7992
     1735     7993
     1736     7994    2            CASE (%T_SYNONYM_CMD);

     1737     7995                   /*
     1738     7996                   *  The ParseTree for the SYNONYM command is:
     1739     7997                   *
     1740     7998                   *                         T_SYNONYM_CMD
     1741     7999                   *                               |
     1742     8000                   *                ---------------------------------
     1743     8001                   *                |                               |
     1744     8002                   *             either                        T_SY_VALUE
     1745     8003                   *       |       or        |                 (PARSE$SYM
     1746     8004                   *    T_DEF_NAME      T_SPECIAL_NAME         for value)
     1747     8005                   *       |            (PARSE$SYM for
     1748     8006                   *    .symbol         special name)
     1749     8007                   */
     1750     8008    2              SYM_BLK$ = CMD$BLK.SUBLK$ (0);

   8008  1 001153   300003 236100                    LDQ     3,,PR3
         1 001154   200007 756100                    STQ     SYM_BLK$,,AUTO

     1751     8009                   %INCREMENT (ARRAY=STATS_TOKENS#, INDX="SYM$BLK.CODE - %VD_BASE#");

   8010  1 001155   200007 476500                    LDP6    SYM_BLK$,,AUTO
         1 001156   600000 720100                    LXL0    0,,PR6
         1 001157   776375 054010 xsym               AOS     VD_6E-771,X0
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:221  

     1752     8012    2              IF SYM$BLK.CODE = %T_DEF_NAME THEN

   8012  1 001160   600000 720100                    LXL0    0,,PR6
         1 001161   002060 100003                    CMPX0   1072,DU
         1 001162   001165 601000 1                  TNZ     s:8015

     1753     8013    2                 SYM_BLK$ = SYM_BLK$ -> CMD$BLK.SUBLK$ (0);

   8013  1 001163   600003 236100                    LDQ     3,,PR6
         1 001164   200007 756100                    STQ     SYM_BLK$,,AUTO

     1754     8014
     1755     8015    2              CALL XLATE (SYM$BLK.TEXT, B$XL_UPPER, SYM$BLK.TEXT);

   8015  1 001165   200007 475500                    LDP5    SYM_BLK$,,AUTO
         1 001166   500004 236100                    LDQ     4,,PR5
         1 001167   000033 772000                    QRL     27
         1 001170   000000 620006                    EAX0    0,QL
         1 001171   000000 476400 xsym               LDP6    B$XL_UPPER$
         1 001172   000000 621006                    EAX1    0,QL
         1 001173   040140 160540                    MVT     fill='040'O
         1 001174   500004 200010                    ADSC9   4,,PR5                   cn=1,n=*X0
         1 001175   500004 200011                    ADSC9   4,,PR5                   cn=1,n=*X1
         1 001176   600000 000100                    ARG     0,,PR6

     1756     8016    2              CALL MAKE_TEXTC_REMOTE (SYM$BLK.TEXTC$ -> VD$TEXTC,

   8016  1 001177   500003 477500                    LDP7    3,,PR5
         1 001200   400000 470500                    LDP0    0,,PR4
         1 001201   000006 631500                    EPPR1   6,,PR0
         1 001202   200024 451500                    STP1    @TEXTC+1,,AUTO
         1 001203   200023 457500                    STP7    SUBST_FIELD$+2,,AUTO
         1 001204   001600 701000 1                  TSX1    MAKE_TEXTC_REMOTE
         1 001205   001565 702000 1                  TSX2    PSTRING_FAILED

     1757     8017    2                IT$COMMAND.PARAM$ (%CP_SY_NAME))
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:222  
     1758     8018    2                ALTRET (MAKE_TEXTC_REMOTE_FAILED);
     1759     8019
     1760     8020    2              SYM_BLK$ = CMD$BLK.SUBLK$ (1);

   8020  1 001206   200006 470500                    LDP0    CMD_BLK$,,AUTO
         1 001207   000004 236100                    LDQ     4,,PR0
         1 001210   200007 756100                    STQ     SYM_BLK$,,AUTO

     1761     8021                   %INCREMENT (ARRAY=STATS_TOKENS#, INDX="SYM$BLK.CODE - %VD_BASE#");

   8022  1 001211   200007 471500                    LDP1    SYM_BLK$,,AUTO
         1 001212   100000 720100                    LXL0    0,,PR1
         1 001213   776375 054010 xsym               AOS     VD_6E-771,X0

     1762     8024
     1763     8025    2              CALL VDG$OALLOC (%CLS_BUFFER, VD_BUFFER$,

   8025  1 001214   100004 236100                    LDQ     4,,PR1
         1 001215   000033 772000                    QRL     27
         1 001216   000015 036007                    ADLQ    13,DL
         1 001217   000002 772000                    QRL     2
         1 001220   200026 756100                    STQ     @TEXTC_REMOTE$+2,,AUTO
         1 001221   200026 633500                    EPPR3   @TEXTC_REMOTE$+2,,AUTO
         1 001222   200031 453500                    STP3    @TEXTC_REMOTE$+5,,AUTO
         1 001223   200014 634500                    EPPR4   VD_BUFFER$,,AUTO
         1 001224   200030 454500                    STP4    @TEXTC_REMOTE$+4,,AUTO
         1 001225   000002 236000 2                  LDQ     2
         1 001226   200027 756100                    STQ     @TEXTC_REMOTE$+3,,AUTO
         1 001227   200027 630500                    EPPR0   @TEXTC_REMOTE$+3,,AUTO
         1 001230   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 001231   000000 701000 xent               TSX1    VDG$OALLOC
         1 001232   001574 702000 1                  TSX2    OALLOC_FAILED

     1764     8026    2                (LENGTHC(VD$BUFFER_HEADER) + SYM$BLK.COUNT + (%NB_PER_WORD-1)) /
     1765     8027    2                %NB_PER_WORD)
     1766     8028    2                ALTRET (OALLOC_FAILED);
     1767     8029    2              IT$COMMAND.PARAM$ (%CP_SY_VALUE) = VD_BUFFER$;
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:223  

   8029  1 001233   200005 470500                    LDP0    @IT_COMMAND$,,AUTO
         1 001234   000000 471500                    LDP1    0,,PR0
         1 001235   200014 236100                    LDQ     VD_BUFFER$,,AUTO
         1 001236   100007 756100                    STQ     7,,PR1

     1768     8030    2              VD$BUFFER.LENGTH# = SYM$BLK.COUNT;

   8030  1 001237   200007 471500                    LDP1    SYM_BLK$,,AUTO
         1 001240   100004 236100                    LDQ     4,,PR1
         1 001241   000033 772000                    QRL     27
         1 001242   000000 620006                    EAX0    0,QL
         1 001243   200014 473500                    LDP3    VD_BUFFER$,,AUTO
         1 001244   300002 740100                    STX0    2,,PR3

     1769     8031    2              VD$BUFFER.BYTES = SYM$BLK.TEXT;

   8031  1 001245   200014 473500                    LDP3    VD_BUFFER$,,AUTO
         1 001246   300002 220100                    LDX0    2,,PR3
         1 001247   100004 236100                    LDQ     4,,PR1
         1 001250   000033 772000                    QRL     27
         1 001251   000000 621006                    EAX1    0,QL
         1 001252   040140 100540                    MLR     fill='040'O
         1 001253   100004 200011                    ADSC9   4,,PR1                   cn=1,n=*X1
         1 001254   300002 400010                    ADSC9   2,,PR3                   cn=2,n=*X0
         1 001255   001506 710000 1                  TRA     s:8108

     1770     8032
     1771     8033
     1772     8034    2            CASE (%T_WINDOW_CMD);

     1773     8035                   /*
     1774     8036                   *  The ParseTree for the WINDOW command is:
     1775     8037                   *
     1776     8038                   *           T_WINDOW_CMD
     1777     8039                   *                 |
     1778     8040                   *  (opt)--------(opt)--------(opt)--------(opt)
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:224  
     1779     8041                   *    |            |            |            |
     1780     8042                   * T_DELETE_CMD T_IN_WINDOW  T_LINES or   T_EDIT_CMD
     1781     8043                   *  or T_NEW      ...        T_PERCENT      ...
     1782     8044                   * or T_NEXT
     1783     8045                   * or T_PREV
     1784     8046                   */
     1785     8047    2              SINK = VD_EDITING_HEIGHT *

   8047  1 001256   000000 236000 xsym               LDQ     VD_EDITING_WINDOWS
         1 001257   000001 136007                    SBLQ    1,DL
         1 001260   000003 402000 xsym               MPY     VD_$WI_PERCENT+3
         1 001261   000027 676000 xsym               ERQ     B_VECTNIL+23
         1 001262   000145 036007                    ADLQ    101,DL
         1 001263   000000 402000 xsym               MPY     VD_EDITING_HEIGHT
         1 001264   000144 506007                    DIV     100,DL
         1 001265   200012 756100                    STQ     SINK,,AUTO

     1786     8048    2                (100 - (VD_EDITING_WINDOWS-1) * VD_$WI_PERCENT.V#) /100;
     1787     8049    3              DO SYM_BLK=0 TO CMD$BLK.NSUBLKS-1;

   8049  1 001266   200010 450100                    STZ     SYM_BLK,,AUTO
         1 001267   001442 710000 1                  TRA     s:8094+1

     1788     8050    3                 SYM_BLK$ = CMD$BLK.SUBLK$(SYM_BLK);

   8050  1 001270   200006 470500                    LDP0    CMD_BLK$,,AUTO
         1 001271   200010 720100                    LXL0    SYM_BLK,,AUTO
         1 001272   000003 236110                    LDQ     3,X0,PR0
         1 001273   200007 756100                    STQ     SYM_BLK$,,AUTO

     1789     8051                      %INCREMENT(ARRAY=STATS_TOKENS#, INDX=SYM$BLK.CODE - %VD_BASE#);

   8052  1 001274   200007 471500                    LDP1    SYM_BLK$,,AUTO
         1 001275   100000 721100                    LXL1    0,,PR1
         1 001276   776375 054011 xsym               AOS     VD_6E-771,X1

     1790     8054    4                 IF SYM$BLK.CODE = %T_EDIT_CMD THEN DO;
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:225  

   8054  1 001277   100000 721100                    LXL1    0,,PR1
         1 001300   001752 101003                    CMPX1   1002,DU
         1 001301   001307 601000 1                  TNZ     s:8057

     1791     8055    4                    IT$COMMAND.PT_BLOCK_EXPR$ = SYM_BLK$ -> CMD$BLK.SUBLK$(0);

   8055  1 001302   200005 473500                    LDP3    @IT_COMMAND$,,AUTO
         1 001303   300000 474500                    LDP4    0,,PR3
         1 001304   100003 236100                    LDQ     3,,PR1
         1 001305   400004 756100                    STQ     4,,PR4

     1792     8056    4                    END;

   8056  1 001306   001441 710000 1                  TRA     s:8094

     1793     8057    3                 ELSE IF SYM$BLK.CODE = %T_DELETE_CMD THEN

   8057  1 001307   001763 101003                    CMPX1   1011,DU
         1 001310   001316 601000 1                  TNZ     s:8059

     1794     8058    3                       IT$COMMAND.FLAGS(%CF_WI_DELETE) = %TRUE;

   8058  1 001311   200005 473500                    LDP3    @IT_COMMAND$,,AUTO
         1 001312   300000 474500                    LDP4    0,,PR3
         1 001313   400000 236003                    LDQ     -131072,DU
         1 001314   400005 256100                    ORSQ    5,,PR4
         1 001315   001441 710000 1                  TRA     s:8094

     1795     8059    3                    ELSE IF SYM$BLK.CODE = %T_NEW THEN

   8059  1 001316   002044 101003                    CMPX1   1060,DU
         1 001317   001325 601000 1                  TNZ     s:8061

     1796     8060    3                          IT$COMMAND.FLAGS(%CF_WI_NEW) = %TRUE;

   8060  1 001320   200005 473500                    LDP3    @IT_COMMAND$,,AUTO
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:226  
         1 001321   300000 474500                    LDP4    0,,PR3
         1 001322   200000 236003                    LDQ     65536,DU
         1 001323   400005 256100                    ORSQ    5,,PR4
         1 001324   001441 710000 1                  TRA     s:8094

     1797     8061    3                       ELSE IF SYM$BLK.CODE = %T_NEXT OR SYM$BLK.CODE = %T_PREVIOUS

   8061  1 001325   002041 101003                    CMPX1   1057,DU
         1 001326   001331 600000 1                  TZE     s:8063
         1 001327   002042 101003                    CMPX1   1058,DU
         1 001330   001362 601000 1                  TNZ     s:8075

     1798     8062    4                          THEN DO;

     1799     8063    4                             IF VD_CURRENT_WINDOW$ = ADDR(NIL) THEN EXIT;

   8063  1 001331   000000 236000 xsym               LDQ     VD_CURRENT_WINDOW$
         1 001332   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001333   001361 600000 1                  TZE     s:8072+1

     1800     8064    4                             WINDOW_SUBSCRIPT = ADDR (VD_CURRENT_WINDOW$ ->

   8064  1 001334   000000 473400 xsym               LDP3    VD_CURRENT_WINDOW$
         1 001335   300005 236100                    LDQ     5,,PR3
         1 001336   000032 376000 xsym               ANQ     B_VECTNIL+26
         1 001337   000001 036007                    ADLQ    1,DL
         1 001340   200013 756100                    STQ     WINDOW_SUBSCRIPT,,AUTO

     1801     8065    4                               VD$FILE_NODE.DESC.KEY) -> VD$KEY_NUMBER.BYTES# + 1;
     1802     8066    4                             IF SYM$BLK.CODE = %T_PREVIOUS THEN

   8066  1 001341   100000 721100                    LXL1    0,,PR1
         1 001342   002042 101003                    CMPX1   1058,DU
         1 001343   001346 601000 1                  TNZ     s:8068

     1803     8067    4                                WINDOW_SUBSCRIPT = WINDOW_SUBSCRIPT - 2;

PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:227  
   8067  1 001344   000002 336007                    LCQ     2,DL
         1 001345   200013 056100                    ASQ     WINDOW_SUBSCRIPT,,AUTO

     1804     8068    4                             IF WINDOW_SUBSCRIPT >= VD_EDITING_WINDOWS THEN

   8068  1 001346   200013 236100                    LDQ     WINDOW_SUBSCRIPT,,AUTO
         1 001347   000000 116000 xsym               CMPQ    VD_EDITING_WINDOWS
         1 001350   001353 604000 1                  TMI     s:8070

     1805     8069    4                                WINDOW_SUBSCRIPT = 1;

   8069  1 001351   000001 235007                    LDA     1,DL
         1 001352   200013 755100                    STA     WINDOW_SUBSCRIPT,,AUTO

     1806     8070    4                             IF WINDOW_SUBSCRIPT = 0 THEN

   8070  1 001353   200013 235100                    LDA     WINDOW_SUBSCRIPT,,AUTO
         1 001354   001360 601000 1                  TNZ     s:8072

     1807     8071    4                                WINDOW_SUBSCRIPT = VD_EDITING_WINDOWS-1;

   8071  1 001355   000000 236000 xsym               LDQ     VD_EDITING_WINDOWS
         1 001356   000001 136007                    SBLQ    1,DL
         1 001357   200013 756100                    STQ     WINDOW_SUBSCRIPT,,AUTO

     1808     8072    4                             GOTO SET_WINDOW_NUMBER;

   8072  1 001360   001422 710000 1                  TRA     SET_WINDOW_NUMBER
         1 001361   001441 710000 1                  TRA     s:8094

     1809     8073    4                             END;
     1810     8074    4                          ELSE DO;

     1811     8075    4                             CALL VDE$PNUMBER (SYM_BLK$ -> CMD$BLK.SUBLK$(0) ->

   8075  1 001362   100003 473500                    LDP3    3,,PR1
         1 001363   300003 474500                    LDP4    3,,PR3
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:228  
         1 001364   200013 635500                    EPPR5   WINDOW_SUBSCRIPT,,AUTO
         1 001365   200027 455500                    STP5    @TEXTC_REMOTE$+3,,AUTO
         1 001366   200026 454500                    STP4    @TEXTC_REMOTE$+2,,AUTO
         1 001367   200026 630500                    EPPR0   @TEXTC_REMOTE$+2,,AUTO
         1 001370   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001371   000000 701000 xent               TSX1    VDE$PNUMBER
         1 001372   001565 702000 1                  TSX2    PSTRING_FAILED

     1812     8076    4                               CMD$BLK.SUBLK$(0) -> CMD$BLK, WINDOW_SUBSCRIPT)
     1813     8077    4                               ALTRET (PNUMBER_FAILED);
     1814     8078    5                             IF SYM$BLK.CODE ~= %T_IN_WINDOW THEN DO;

   8078  1 001373   200007 470500                    LDP0    SYM_BLK$,,AUTO
         1 001374   000000 720100                    LXL0    0,,PR0
         1 001375   002063 100003                    CMPX0   1075,DU
         1 001376   001415 600000 1                  TZE     s:8085

     1815     8079    5                                SINK = WINDOW_SUBSCRIPT;

   8079  1 001377   200013 235100                    LDA     WINDOW_SUBSCRIPT,,AUTO
         1 001400   200012 755100                    STA     SINK,,AUTO

     1816     8080    5                                IF SYM$BLK.CODE = %T_PERCENT THEN

   8080  1 001401   000000 720100                    LXL0    0,,PR0
         1 001402   001755 100003                    CMPX0   1005,DU
         1 001403   001410 601000 1                  TNZ     s:8082

     1817     8081    5                                   SINK = VD_EDITING_HEIGHT * SINK / 100;

   8081  1 001404   000000 236000 xsym               LDQ     VD_EDITING_HEIGHT
         1 001405   200012 402100                    MPY     SINK,,AUTO
         1 001406   000144 506007                    DIV     100,DL
         1 001407   200012 756100                    STQ     SINK,,AUTO

     1818     8082    5                                IT$COMMAND.PARAM$ (%CP_WI_LINES) = SYM_BLK$;

PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:229  
   8082  1 001410   200005 471500                    LDP1    @IT_COMMAND$,,AUTO
         1 001411   100000 473500                    LDP3    0,,PR1
         1 001412   200007 236100                    LDQ     SYM_BLK$,,AUTO
         1 001413   300007 756100                    STQ     7,,PR3

     1819     8083    5                                END;

   8083  1 001414   001441 710000 1                  TRA     s:8094

     1820     8084    5                             ELSE DO;

     1821     8085    5                                IF WINDOW_SUBSCRIPT >= VD_EDITING_WINDOWS

   8085  1 001415   200013 236100                    LDQ     WINDOW_SUBSCRIPT,,AUTO
         1 001416   000000 116000 xsym               CMPQ    VD_EDITING_WINDOWS
         1 001417   001521 605000 1                  TPL     WI_KEY_NOT_IN_RANGE_FAILURE
         1 001420   000000 116003                    CMPQ    0,DU
         1 001421   001521 600000 1                  TZE     WI_KEY_NOT_IN_RANGE_FAILURE

     1822     8086    5                                  OR WINDOW_SUBSCRIPT = 0 THEN
     1823     8087    5                                   GOTO WI_KEY_NOT_IN_RANGE_FAILURE;
     1824     8088    5   SET_WINDOW_NUMBER:           CALL VDG$OALLOC (%CLS_NUMBER, IT$COMMAND.PARAM$(%
              8088            CP_WI_NUM))

   8088  1 001422   200005 470500       SET_WINDOW_* LDP0    @IT_COMMAND$,,AUTO
         1 001423   000000 471500                    LDP1    0,,PR0
         1 001424   100010 633500                    EPPR3   8,,PR1
         1 001425   200027 453500                    STP3    @TEXTC_REMOTE$+3,,AUTO
         1 001426   000005 236000 2                  LDQ     5
         1 001427   200026 756100                    STQ     @TEXTC_REMOTE$+2,,AUTO
         1 001430   200026 630500                    EPPR0   @TEXTC_REMOTE$+2,,AUTO
         1 001431   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001432   000000 701000 xent               TSX1    VDG$OALLOC
         1 001433   001574 702000 1                  TSX2    OALLOC_FAILED

     1825     8089    5                                  ALTRET (OALLOC_FAILED);
     1826     8090    5                                IT$COMMAND.PARAM$(%CP_WI_NUM) -> VD$NUMBER.V# =
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:230  

   8090  1 001434   200005 470500                    LDP0    @IT_COMMAND$,,AUTO
         1 001435   000000 471500                    LDP1    0,,PR0
         1 001436   100010 473500                    LDP3    8,,PR1
         1 001437   200013 235100                    LDA     WINDOW_SUBSCRIPT,,AUTO
         1 001440   300003 755100                    STA     3,,PR3

     1827     8091    5                                  WINDOW_SUBSCRIPT;
     1828     8092    5                                END;

     1829     8093    4                             END;

     1830     8094    3                 END;

   8094  1 001441   200010 054100                    AOS     SYM_BLK,,AUTO
         1 001442   200006 470500                    LDP0    CMD_BLK$,,AUTO
         1 001443   000001 236100                    LDQ     1,,PR0
         1 001444   000022 772000                    QRL     18
         1 001445   200010 116100                    CMPQ    SYM_BLK,,AUTO
         1 001446   001270 605400 1                  TPNZ    s:8050

     1831     8095    2              IF IT$COMMAND.PARAM$(%CP_WI_LINES) ~= ADDR(NIL) OR

   8095  1 001447   200005 471500                    LDP1    @IT_COMMAND$,,AUTO
         1 001450   100000 473500                    LDP3    0,,PR1
         1 001451   300007 236100                    LDQ     7,,PR3
         1 001452   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001453   001457 601000 1                  TNZ     s:8097
         1 001454   300005 236100                    LDQ     5,,PR3
         1 001455   200000 316003                    CANQ    65536,DU
         1 001456   001506 600000 1                  TZE     s:8108

     1832     8096    3                IT$COMMAND.FLAGS (%CF_WI_NEW) THEN DO;

     1833     8097    3                 CALL VDG$OALLOC (%CLS_NUMBER, IT$COMMAND.PARAM$(%CP_WI_LINES))

   8097  1 001457   300007 634500                    EPPR4   7,,PR3
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:231  
         1 001460   200027 454500                    STP4    @TEXTC_REMOTE$+3,,AUTO
         1 001461   000005 236000 2                  LDQ     5
         1 001462   200026 756100                    STQ     @TEXTC_REMOTE$+2,,AUTO
         1 001463   200026 630500                    EPPR0   @TEXTC_REMOTE$+2,,AUTO
         1 001464   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001465   000000 701000 xent               TSX1    VDG$OALLOC
         1 001466   001574 702000 1                  TSX2    OALLOC_FAILED

     1834     8098    3                   ALTRET (OALLOC_FAILED);
     1835     8099    3                 IT$COMMAND.PARAM$(%CP_WI_LINES) -> VD$NUMBER.V# =

   8099  1 001467   200005 470500                    LDP0    @IT_COMMAND$,,AUTO
         1 001470   000000 471500                    LDP1    0,,PR0
         1 001471   100007 473500                    LDP3    7,,PR1
         1 001472   000000 236000 xsym               LDQ     VD_EDITING_HEIGHT
         1 001473   200012 116100                    CMPQ    SINK,,AUTO
         1 001474   001476 604400 1                  TMOZ    s:8099+7
         1 001475   200012 236100                    LDQ     SINK,,AUTO
         1 001476   300003 756100                    STQ     3,,PR3

     1836     8100    3                   MINIMUM (SINK, VD_EDITING_HEIGHT);
     1837     8101    3                 END;

   8101  1 001477   001506 710000 1                  TRA     s:8108

     1838     8102
     1839     8103
     1840     8104    2            CASE (ELSE);

     1841     8105    2              CALL VDG$ESCREECH (IT$COMMAND.CODE#);

   8105  1 001500   500003 636500                    EPPR6   3,,PR5
         1 001501   200026 456500                    STP6    @TEXTC_REMOTE$+2,,AUTO
         1 001502   200026 630500                    EPPR0   @TEXTC_REMOTE$+2,,AUTO
         1 001503   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001504   000000 701000 xent               TSX1    VDG$ESCREECH
         1 001505   000000 011000                    NOP     0
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:232  

     1842     8106    2            END CMD_CODE_CASES;

     1843     8107
     1844     8108    1           CMD_INDEX = CMD_INDEX + 1;    /* Bump past the node we just processed */

   8108  1 001506   200004 470500                    LDP0    @CMD_INDEX,,AUTO
         1 001507   000000 054100                    AOS     0,,PR0

     1845     8109    1           IF CMD_INDEX = PT_COMMAND_PARENT.NSUBLKS THEN

   8109  1 001510   200003 471500                    LDP1    @PT_COMMAND_PARENT,,AUTO
         1 001511   100001 236100                    LDQ     1,,PR1
         1 001512   000022 772000                    QRL     18
         1 001513   000000 116100                    CMPQ    0,,PR0
         1 001514   001520 601000 1                  TNZ     s:8111

     1846     8110    1              CMD$STREAM.IF_CMD = '0'B;

   8110  1 001515   000026 473400 xsym               LDP3    VD_6E+22
         1 001516   000006 236000 2                  LDQ     6
         1 001517   300027 356100                    ANSQ    23,,PR3

     1847     8111    1           RETURN;

   8111  1 001520   000000 702200 xent               TSX2  ! X66_ARET

     1848     8112
     1849     8113
     1850     8114
     1851     8115    1   WI_KEY_NOT_IN_RANGE_FAILURE:
     1852     8116    1           CALL VDG$ERRMSG (%E$WI_KEY_NOT_IN_RANGE,

   8116  1 001521   000000 235000 xsym  WI_KEY_NOT_* LDA     VD_EDITING_WINDOWS
         1 001522   000001 135007                    SBLA    1,DL
         1 001523   200026 755100                    STA     @TEXTC_REMOTE$+2,,AUTO
         1 001524   200013 630500                    EPPR0   WINDOW_SUBSCRIPT,,AUTO
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:233  
         1 001525   200031 450500                    STP0    @TEXTC_REMOTE$+5,,AUTO
         1 001526   200026 631500                    EPPR1   @TEXTC_REMOTE$+2,,AUTO
         1 001527   200030 451500                    STP1    @TEXTC_REMOTE$+4,,AUTO
         1 001530   000010 236000 2                  LDQ     8
         1 001531   200027 756100                    STQ     @TEXTC_REMOTE$+3,,AUTO
         1 001532   200027 630500                    EPPR0   @TEXTC_REMOTE$+3,,AUTO
         1 001533   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 001534   000000 701000 xent               TSX1    VDG$ERRMSG
         1 001535   000000 011000                    NOP     0

     1853     8117    1             VD_EDITING_WINDOWS-1, WINDOW_SUBSCRIPT);
     1854     8118    1           GOTO SUB_PARSE_TREE_TO_INTREE_FAILED;

   8118  1 001536   001565 710000 1                  TRA     PSTRING_FAILED

   8109  1 001537                       CTRLFN_CONF* null
     1855     8119
     1856     8120
     1857     8121    1   CTRLFN_CONFLICTS_W_KEYIN_ERROR: ;
     1858     8122    1           CALL VDG$ERRMSG (%E$CTRLFN_CONFLICTS_W_KEYIN);

   8122  1 001537   000012 630400 2                  EPPR0   10
         1 001540   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001541   000000 701000 xent               TSX1    VDG$ERRMSG
         1 001542   000000 011000                    NOP     0

     1859     8123    1           GOTO SUB_PARSE_TREE_TO_INTREE_FAILED;

   8123  1 001543   001565 710000 1                  TRA     PSTRING_FAILED

   8109  1 001544                       ELSE_CMD_WI* null
     1860     8124
     1861     8125
     1862     8126    1   ELSE_CMD_WITHOUT_IF_FAILURE: ;
     1863     8127    2           CALL VDG$ERRMSG (%E$ELSE_CMD_WITHOUT_IF) WHENRETURN DO;

   8127  1 001544   000014 630400 2                  EPPR0   12
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:234  
         1 001545   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001546   000000 701000 xent               TSX1    VDG$ERRMSG
         1 001547   001554 702000 1                  TSX2    s:8130

     1864     8128    2              VD_6E.ERR_TAIL$ -> VD$ERR.CMDLINE_INDEX# = CMD$BLK.CPOS;

   8128  1 001550   200006 470500                    LDP0    CMD_BLK$,,AUTO
         1 001551   000002 720100                    LXL0    2,,PR0
         1 001552   000032 471400 xsym               LDP1    VD_6E+26
         1 001553   100003 440100                    SXL0    3,,PR1

     1865     8129    2              END;

     1866     8130    1           GOTO SUB_PARSE_TREE_TO_INTREE_FAILED;

   8130  1 001554   001565 710000 1                  TRA     PSTRING_FAILED

   8127  1 001555                       IF_COMMAND_* null
     1867     8131
     1868     8132
     1869     8133    1   IF_COMMAND_LAST_FAILURE: ;
     1870     8134    2           CALL VDG$ERRMSG (%E$IF_CMD_IS_LAST) WHENRETURN DO;

   8134  1 001555   000016 630400 2                  EPPR0   14
         1 001556   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001557   000000 701000 xent               TSX1    VDG$ERRMSG
         1 001560   001565 702000 1                  TSX2    PSTRING_FAILED

     1871     8135    2              VD_6E.ERR_TAIL$ -> VD$ERR.CMDLINE_INDEX# = CMD$BLK.CPOS;

   8135  1 001561   200006 470500                    LDP0    CMD_BLK$,,AUTO
         1 001562   000002 720100                    LXL0    2,,PR0
         1 001563   000032 471400 xsym               LDP1    VD_6E+26
         1 001564   100003 440100                    SXL0    3,,PR1

     1872     8136    2              END;

PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:235  
   8127  1 001565                       PSTRING_FAI* null
   8127  1 001565                       PNUMBER_FAI* null
     1873     8137
     1874     8138
     1875     8139    1   PSTRING_FAILED: ;
     1876     8140    1   PNUMBER_FAILED: ;
     1877     8141    1   MAKE_TEXTC_REMOTE_FAILED: ;

   8141  1 001565                       MAKE_TEXTC_* null
   8141  1 001565                       SUB_PARSE_T* null
     1878     8142    1   SUB_PARSE_TREE_TO_INTREE_FAILED: ;
     1879     8143    1           CALL VDG$OFREE (IT$COMMAND)

   8143  1 001565   200005 470500                    LDP0    @IT_COMMAND$,,AUTO
         1 001566   000000 471500                    LDP1    0,,PR0
         1 001567   200026 451500                    STP1    @TEXTC_REMOTE$+2,,AUTO
         1 001570   200026 630500                    EPPR0   @TEXTC_REMOTE$+2,,AUTO
         1 001571   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001572   000000 701000 xent               TSX1    VDG$OFREE
         1 001573   001574 702000 1                  TSX2    OALLOC_FAILED

   8141  1 001574                       OALLOC_FAIL* null
   8141  1 001574                       OFREE_FAILED null
     1880     8144    1             ALTRET (OFREE_FAILED);
     1881     8145
     1882     8146
     1883     8147    1   OALLOC_FAILED: ;
     1884     8148    1   OFREE_FAILED: ;
     1885     8149    1           IT_COMMAND$ = ADDR(NIL);

   8149  1 001574   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 001575   200005 470500                    LDP0    @IT_COMMAND$,,AUTO
         1 001576   000000 756100                    STQ     0,,PR0

     1886     8150    1           ALTRETURN;

   8150  1 001577   000000 702200 xent               TSX2  ! X66_AALT
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:236  

     1887     8151
     1888     8152
     1889     8153        /*I* NAME: MAKE_TEXTC_REMOTE
     1890     8154            PARAMETERS:
     1891     8155                TEXTC - A VD$TEXTC string.
     1892     8156                TEXTC_REMOTE$ - An uninitialized ptr.
     1893     8157            INPUT:
     1894     8158                None.
     1895     8159            OUTPUT:
     1896     8160                TEXTC_REMOTE$ will point to a VD$TEXTC_REMOTE object.
     1897     8161            DESCRIPTION:
     1898     8162                Build a VD$TEXTC_REMOTE containing the TEXTC string.
     1899     8163        */
     1900     8164
     1901     8165    1   MAKE_TEXTC_REMOTE: PROC (TEXTC, TEXTC_REMOTE$) ALTRET;

   8165  1 001600   200022 741300       MAKE_TEXTC_* STX1  ! SUBST_FIELD$+1,,AUTO

     1902     8166
     1903     8167        %VD$TEXTC (NAME=TEXTC, STCLASS=PARAM);
     1904     8190    2   DCL TEXTC_REMOTE$ PTR;
     1905     8191
     1906     8192
     1907     8193        %VD$TEXTC_REMOTE (NAME=TEXTC$REMOTE, STCLASS="BASED(TEXTC_REMOTE$)");
     1908     8254        %VD$STRING_HEADER;
     1909     8290
     1910     8291
     1911     8292
     1912     8293    2           CALL VDG$OALLOC (%CLS_TEXTC_REMOTE, TEXTC_REMOTE$,

   8293  1 001601   200023 470500                    LDP0    @TEXTC,,AUTO
         1 001602   000000 236100                    LDQ     0,,PR0
         1 001603   000033 772000                    QRL     27
         1 001604   000014 036007                    ADLQ    12,DL
         1 001605   000002 772000                    QRL     2
         1 001606   200026 756100                    STQ     @TEXTC_REMOTE$+2,,AUTO
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:237  
         1 001607   200026 631500                    EPPR1   @TEXTC_REMOTE$+2,,AUTO
         1 001610   200031 451500                    STP1    @TEXTC_REMOTE$+5,,AUTO
         1 001611   200024 236100                    LDQ     @TEXTC_REMOTE$,,AUTO
         1 001612   200030 756100                    STQ     @TEXTC_REMOTE$+4,,AUTO
         1 001613   000020 236000 2                  LDQ     16
         1 001614   200027 756100                    STQ     @TEXTC_REMOTE$+3,,AUTO
         1 001615   200027 630500                    EPPR0   @TEXTC_REMOTE$+3,,AUTO
         1 001616   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 001617   000000 701000 xent               TSX1    VDG$OALLOC
         1 001620   001622 702000 1                  TSX2    s:8296
         1 001621   001624 710000 1                  TRA     s:8298

     1913     8294    2             (LENGTHC(VD$STRING_HEADER) + TEXTC.LENGTH# +
     1914     8295    2             (%NB_PER_WORD-1)) / %NB_PER_WORD)
     1915     8296    3           WHENALTRETURN DO; ALTRETURN; END;

   8296  1 001622   200022 221300                    LDX1  ! SUBST_FIELD$+1,,AUTO
         1 001623   000000 702211                    TSX2  ! 0,X1

     1916     8297
     1917     8298    2           TEXTC$REMOTE.LENGTH# = TEXTC.LENGTH#;

   8298  1 001624   200024 470500                    LDP0    @TEXTC_REMOTE$,,AUTO
         1 001625   000000 471500                    LDP1    0,,PR0
         1 001626   200023 473500                    LDP3    @TEXTC,,AUTO
         1 001627   300000 236100                    LDQ     0,,PR3
         1 001630   100002 552140                    STBQ    2,'40'O,PR1

     1918     8299    2           TEXTC$REMOTE.BYTES = TEXTC.BYTES;

   8299  1 001631   000000 471500                    LDP1    0,,PR0
         1 001632   100002 236100                    LDQ     2,,PR1
         1 001633   000033 772000                    QRL     27
         1 001634   000000 620006                    EAX0    0,QL
         1 001635   300000 236100                    LDQ     0,,PR3
         1 001636   000033 772000                    QRL     27
         1 001637   000000 621006                    EAX1    0,QL
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:238  
         1 001640   040140 100540                    MLR     fill='040'O
         1 001641   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         1 001642   100002 200010                    ADSC9   2,,PR1                   cn=1,n=*X0

     1919     8300
     1920     8301    2           RETURN;

   8301  1 001643   200022 221300                    LDX1  ! SUBST_FIELD$+1,,AUTO
         1 001644   000001 702211                    TSX2  ! 1,X1
     1921     8302
     1922     8303    2   END MAKE_TEXTC_REMOTE;
     1923     8304
     1924     8305    1   END VDI$PARSE_TREE_TO_INTREE;
     1925     8306        %EOD;

PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:239  
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   XU_SUBS_C.:LIBRARY  is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   XUE_MACRO_C.:LIBRARY  is referenced.
   VD_NODES0_E.:VDA5TOU  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDI$PARSE_TREE_TO_INTREE.
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:240  

 **** Variables and constants ****

  ****  Section 000 RoData VDI$PARSE_TREE_TO_INTREE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(99)    r     1 ZERO_LENGTH_BUFFER

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @CMD_INDEX                 5-0-0/w PTR         r     1 @IT_COMMAND$
     3-0-0/w PTR         r     1 @PT_COMMAND_PARENT        23-0-0/w PTR         r     1 @TEXTC
    24-0-0/w PTR         r     1 @TEXTC_REMOTE$             6-0-0/w PTR         r     1 CMD_BLK$
    *0-0-0/w SBIN        r     1 CMD_INDEX
    16-0-0/w SBIN        r     1 CTRL_FN_ARGS_ARRAY(0:1)
    *0-0-0/w PTR         r     1 IT_COMMAND$               *0-0-0/w STRC(144)   r     1 PT_COMMAND_PARENT
    11-0-0/c CHAR        r     1 RETCODE                   12-0-0/w SBIN        r     1 SINK
    21-0-0/w PTR         r     1 SUBST_FIELD$              10-0-0/w SBIN        r     1 SYM_BLK
     7-0-0/w PTR         r     1 SYM_BLK$                  *0-0-0/w ASTR(9)     r     1 TEXTC
    *0-0-0/w PTR         r     1 TEXTC_REMOTE$             14-0-0/w PTR         r     1 VD_BUFFER$
    20-0-0/w PTR         r     1 VD_ERR$                   15-0-0/w PTR         r     1 VD_NUMBER$
    13-0-0/w SBIN        r     1 WINDOW_SUBSCRIPT

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$XL_UPPER$                0-0-0/w STRC(144)   r     1 VD_$WI_PERCENT
     0-0-0/w STRC(22644) r     1 VD_6E                      0-0-0/w PTR         r     1 VD_CURRENT_WINDOW$
     0-0-0/w SBIN        r     1 VD_EDITING_HEIGHT          0-0-0/w SBIN        r     1 VD_EDITING_WINDOWS
     0-0-0/d STRC(1008)  r     1 XUE_ECB

PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:241  
  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(4608)  r     1 B$XL_UPPER                 0-0-0/w STRC(144)   r     1 CMD$BLK
     0-0-0/w STRC(900)   r     1 CMD$STREAM                 0-0-0/w ASTR(153)   r     1 CMD$SYM
     0-0-0/w STRC(540)   r     1 IT$COMMAND                 0-0-0/w ASTR(153)   r     1 SYM$BLK
     0-0-0/w ASTR(81)    r     1 TEXTC$REMOTE               0-0-0/w ASTR(90)    r     1 VD$BUFFER
     0-0-0/w STRC(90)    r     1 VD$BUFFER_HEADER           0-0-0/w STRC(180)   r     1 VD$ERR
     0-0-0/w STRC(468)   r     1 VD$FILE_NODE               0-0-0/w STRC(72)    r     1 VD$KEY_NUMBER
     0-0-0/w STRC(144)   r     1 VD$NUMBER                  0-0-0/w STRC(81)    r     1 VD$STRING_HEADER
     0-0-0/w ASTR(9)     r     1 VD$TEXTC


   Procedure VDI$PARSE_TREE_TO_INTREE requires 933 words for executable code.
   Procedure VDI$PARSE_TREE_TO_INTREE requires 28 words of local(AUTO) storage.
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:242  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:243  
          MINI XREF LISTING

B$XL_UPPER
      6668**DCL      7710>>CALLBLT  7894>>CALLBLT  8015>>CALLBLT
B$XL_UPPER$
      6667**DCL      6668--IMP-PTR  7710>>CALLBLT  7894>>CALLBLT  8015>>CALLBLT
BUILD_WINDOW_SPECIFIER
      7840**LABEL    7744--GOTO
CMD$BLK
      7171**DCL      7686--ASSIGN   7726<>CALL     7770<>CALL     7814<>CALL     7828<>CALL     7859<>CALL
      8075<>CALL
CMD$BLK.CODE
      7179**DCL      7662>>ASSIGN   7662>>ASSIGN   7664>>ASSIGN   7717>>ASSIGN   7719>>ASSIGN   7719>>ASSIGN
      7724>>ASSIGN   7724>>ASSIGN   7779>>IF       7812>>ASSIGN   7812>>ASSIGN   7826>>ASSIGN   7826>>ASSIGN
      7844>>ASSIGN   7844>>ASSIGN   7848>>ASSIGN   7848>>ASSIGN   7850>>IF       7852>>IF       7857>>ASSIGN
      7857>>ASSIGN   7891>>ASSIGN   7891>>ASSIGN
CMD$BLK.CPOS
      7197**DCL      7666>>ASSIGN   7923>>ASSIGN   8128>>ASSIGN   8135>>ASSIGN
CMD$BLK.NSUBLKS
      7183**DCL      7743>>IF       7762>>IF       7780>>IF       7839>>IF       7961>>DOINDEX  8049>>DOINDEX
CMD$BLK.SUBLK$
      7204**DCL      7681>>ASSIGN   7709>>ASSIGN   7724>>ASSIGN   7724>>ASSIGN   7726>>CALL     7726>>CALL
      7770>>CALL     7770>>CALL     7812>>ASSIGN   7812>>ASSIGN   7814>>CALL     7814>>CALL     7814>>CALL
      7826>>ASSIGN   7826>>ASSIGN   7828>>CALL     7828>>CALL     7828>>CALL     7844>>ASSIGN   7844>>ASSIGN
      7846>>ASSIGN   7846>>ASSIGN   7857>>ASSIGN   7857>>ASSIGN   7859>>CALL     7859>>CALL     7891>>ASSIGN
      7891>>ASSIGN   7893>>ASSIGN   7893>>ASSIGN   7899>>ASSIGN   7910>>ASSIGN   7938>>ASSIGN   7962>>ASSIGN
      8008>>ASSIGN   8013>>ASSIGN   8020>>ASSIGN   8050>>ASSIGN   8055>>ASSIGN   8075>>CALL     8075>>CALL
CMD$STREAM.IF_CMD
      7124**DCL      7763>>IF       7774<<ASSIGN   8110<<ASSIGN
CMD$SYM.COUNT
      7240**DCL      7243--IMP-SIZ
CMD_BLK$
      7075**DCL      7171--IMP-PTR  7217--IMP-PTR  7660<<ASSIGN   7662>>ASSIGN   7662>>ASSIGN   7664>>ASSIGN
      7666>>ASSIGN   7681>>ASSIGN   7686>>ASSIGN   7709>>ASSIGN   7716<<ASSIGN   7717>>ASSIGN   7719>>ASSIGN
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:244  
      7719>>ASSIGN   7724>>ASSIGN   7724>>ASSIGN   7726>>CALL     7743>>IF       7762>>IF       7770>>CALL
      7778<<ASSIGN   7779>>IF       7780>>IF       7812>>ASSIGN   7812>>ASSIGN   7814>>CALL     7826>>ASSIGN
      7826>>ASSIGN   7828>>CALL     7839>>IF       7844>>ASSIGN   7844>>ASSIGN   7846<<ASSIGN   7846>>ASSIGN
      7848>>ASSIGN   7848>>ASSIGN   7850>>IF       7852>>IF       7857>>ASSIGN   7857>>ASSIGN   7859>>CALL
      7891>>ASSIGN   7891>>ASSIGN   7893>>ASSIGN   7899>>ASSIGN   7910>>ASSIGN   7938>>ASSIGN   7961>>DOINDEX
      7962>>ASSIGN   8008>>ASSIGN   8020>>ASSIGN   8049>>DOINDEX  8050>>ASSIGN   8128>>ASSIGN   8135>>ASSIGN
CMD_INDEX
      6574**DCL        31--PROC     7660>>ASSIGN   7665>>IF       7715<<ASSIGN   7715>>ASSIGN   7716>>ASSIGN
      7765<<ASSIGN   7767>>IF       7776<<ASSIGN   7776>>ASSIGN   7777>>IF       7778>>ASSIGN   7922>>IF
      7923>>ASSIGN   7926<<ASSIGN   8108<<ASSIGN   8108>>ASSIGN   8109>>IF
CTRLFN_CONFLICTS_W_KEYIN_ERROR
      8109**LABEL    7819--GOTO     7833--GOTO
CTRL_FN_ARGS_ARRAY
      7083**DCL      7814<>CALL     7828<>CALL
ELSE_CMD_WITHOUT_IF_FAILURE
      8109**LABEL    7764--GOTO
IF_COMMAND_LAST_FAILURE
      8127**LABEL    7768--GOTO
IT$COMMAND
      7135**DCL      7785<>CALL     8143<>CALL
IT$COMMAND.CMDLINE_INDEX#
      7161**DCL      7666<<ASSIGN
IT$COMMAND.CODE#
      7161**DCL      7664<<ASSIGN   7670>>DOCASE   7717<<ASSIGN   8105<>CALL
IT$COMMAND.FLAGS
      7162**DCL      7968<<ASSIGN   7971<<ASSIGN   7974<<ASSIGN   7977<<ASSIGN   7980<<ASSIGN   7989>>IF
      7989>>IF       7991<<ASSIGN   8058<<ASSIGN   8060<<ASSIGN   8095>>IF
IT$COMMAND.PARAM$
      7162**DCL      7711<>CALL     7731<>CALL     7734>>ASSIGN   7736>>ASSIGN   7736>>ASSIGN   7740<<ASSIGN
      7814<>CALL     7821>>IF       7822<<ASSIGN   7828<>CALL     7835>>IF       7836<<ASSIGN   7870<<ASSIGN
      7872<<ASSIGN   7895<>CALL     7914<>CALL     7920<<ASSIGN   7942<>CALL     7983<>CALL     8016<>CALL
      8029<<ASSIGN   8082<<ASSIGN   8088<>CALL     8090>>ASSIGN   8095>>IF       8097<>CALL     8099>>ASSIGN
IT$COMMAND.PT_BLOCK_EXPR$
      7162**DCL      7681<<ASSIGN   7686<<ASSIGN   7899<<ASSIGN   8055<<ASSIGN
IT_COMMAND$
      6575**DCL        31--PROC     7135--IMP-PTR  7655>>IF       7656<>CALL     7664>>ASSIGN   7666>>ASSIGN
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:245  
      7670>>DOCASE   7681>>ASSIGN   7686>>ASSIGN   7711>>CALL     7717>>ASSIGN   7731>>CALL     7734>>ASSIGN
      7736>>ASSIGN   7736>>ASSIGN   7740>>ASSIGN   7785>>CALL     7786<<ASSIGN   7814>>CALL     7821>>IF
      7822>>ASSIGN   7828>>CALL     7835>>IF       7836>>ASSIGN   7870>>ASSIGN   7872>>ASSIGN   7895>>CALL
      7899>>ASSIGN   7914>>CALL     7920>>ASSIGN   7942>>CALL     7968>>ASSIGN   7971>>ASSIGN   7974>>ASSIGN
      7977>>ASSIGN   7980>>ASSIGN   7983>>CALL     7989>>IF       7989>>IF       7991>>ASSIGN   8016>>CALL
      8029>>ASSIGN   8055>>ASSIGN   8058>>ASSIGN   8060>>ASSIGN   8082>>ASSIGN   8088>>CALL     8090>>ASSIGN
      8095>>IF       8095>>IF       8097>>CALL     8099>>ASSIGN   8105>>CALL     8143>>CALL     8149<<ASSIGN
MAKE_TEXTC_REMOTE
      8165**PROC     7711--CALL     7895--CALL     7914--CALL     7942--CALL     7983--CALL     8016--CALL
MAKE_TEXTC_REMOTE_FAILED
      8141**LABEL    7711--CALLALT  7895--CALLALT  7914--CALLALT  7942--CALLALT  7983--CALLALT  8016--CALLALT
OALLOC_FAILED
      8141**LABEL    7656--CALLALT  7731--CALLALT  7867--CALLALT  7918--CALLALT  8025--CALLALT  8088--CALLALT
      8097--CALLALT
OFREE_FAILED
      8141**LABEL    7785--CALLALT  8143--CALLALT
PNUMBER_FAILED
      8127**LABEL    7770--CALLALT  7859--CALLALT  8075--CALLALT
PSTRING_FAILED
      8127**LABEL    7726--CALLALT  7814--CALLALT  7828--CALLALT
PT_COMMAND_PARENT
      6535**DCL        31--PROC
PT_COMMAND_PARENT.NSUBLKS
      6547**DCL      7765>>ASSIGN   7767>>IF       7777>>IF       7922>>IF       7926>>ASSIGN   8109>>IF
PT_COMMAND_PARENT.SUBLK$
      6568**DCL      7660>>ASSIGN   7716>>ASSIGN   7778>>ASSIGN   7923>>ASSIGN
RETCODE
      7078**DCL      7814<>CALL     7818>>IF       7828<>CALL     7832>>IF
SET_WINDOW_NUMBER
      8088**LABEL    8072--GOTO
SINK
      7079**DCL      7726<>CALL     7742<<ASSIGN   7770<>CALL     7773>>IF       7773<<ASSIGN   7774>>IF
      7775>>DOUNTIL  7780<<ASSIGN   7780>>ASSIGN   7781<<ASSIGN   7781>>ASSIGN   7814<>CALL     7828<>CALL
      7838<<ASSIGN   7844>>ASSIGN   7844>>ASSIGN   7846>>ASSIGN   7869>>IF       8047<<ASSIGN   8079<<ASSIGN
      8081<<ASSIGN   8081>>ASSIGN   8099>>ASSIGN
SUBST_FIELD$
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:246  
      7085**DCL      7558--IMP-PTR
SUB_PARSE_TREE_TO_INTREE_FAILED
      8141**LABEL    8118--GOTO     8123--GOTO     8130--GOTO
SYM$BLK.CODE
      7261**DCL      7912>>ASSIGN   7912>>ASSIGN   7940>>ASSIGN   7940>>ASSIGN   7964>>ASSIGN   7964>>ASSIGN
      7966>>DOCASE   8010>>ASSIGN   8010>>ASSIGN   8012>>IF       8022>>ASSIGN   8022>>ASSIGN   8052>>ASSIGN
      8052>>ASSIGN   8054>>IF       8057>>IF       8059>>IF       8061>>IF       8061>>IF       8066>>IF
      8078>>IF       8080>>IF
SYM$BLK.COUNT
      7278**DCL      7281--IMP-SIZ  7710>>CALLBLT  7710>>CALLBLT  7894>>CALLBLT  7894>>CALLBLT  8015>>CALLBLT
      8015>>CALLBLT  8025>>CALL     8030>>ASSIGN   8031>>ASSIGN
SYM$BLK.TEXT
      7281**DCL      7710<<CALLBLT  7710>>CALLBLT  7894<<CALLBLT  7894>>CALLBLT  8015<<CALLBLT  8015>>CALLBLT
      8031>>ASSIGN
SYM$BLK.TEXTC$
      7273**DCL      7711>>CALL     7711>>CALL     7895>>CALL     7895>>CALL     7914>>CALL     7914>>CALL
      7942>>CALL     7942>>CALL     7983>>CALL     7983>>CALL     8016>>CALL     8016>>CALL
SYM_BLK
      7077**DCL      7961<<DOINDEX  7962>>ASSIGN   8049<<DOINDEX  8050>>ASSIGN
SYM_BLK$
      7076**DCL      7255--IMP-PTR  7709<<ASSIGN   7710>>CALLBLT  7710>>CALLBLT  7710>>CALLBLT  7710>>CALLBLT
      7711>>CALL     7711>>CALL     7893<<ASSIGN   7894>>CALLBLT  7894>>CALLBLT  7894>>CALLBLT  7894>>CALLBLT
      7895>>CALL     7895>>CALL     7910<<ASSIGN   7912>>ASSIGN   7912>>ASSIGN   7914>>CALL     7914>>CALL
      7938<<ASSIGN   7940>>ASSIGN   7940>>ASSIGN   7942>>CALL     7942>>CALL     7962<<ASSIGN   7964>>ASSIGN
      7964>>ASSIGN   7966>>DOCASE   7983>>CALL     7983>>CALL     8008<<ASSIGN   8010>>ASSIGN   8010>>ASSIGN
      8012>>IF       8013<<ASSIGN   8013>>ASSIGN   8015>>CALLBLT  8015>>CALLBLT  8015>>CALLBLT  8015>>CALLBLT
      8016>>CALL     8016>>CALL     8020<<ASSIGN   8022>>ASSIGN   8022>>ASSIGN   8025>>CALL     8030>>ASSIGN
      8031>>ASSIGN   8031>>ASSIGN   8050<<ASSIGN   8052>>ASSIGN   8052>>ASSIGN   8054>>IF       8055>>ASSIGN
      8057>>IF       8059>>IF       8061>>IF       8061>>IF       8066>>IF       8075>>CALL     8078>>IF
      8080>>IF       8082>>ASSIGN
TEXTC IN PROCEDURE MAKE_TEXTC_REMOTE
      8175**DCL      8165--PROC
TEXTC.BYTES IN PROCEDURE MAKE_TEXTC_REMOTE
      8185**DCL      8299>>ASSIGN
TEXTC.LENGTH# IN PROCEDURE MAKE_TEXTC_REMOTE
      8183**DCL      8185--IMP-SIZ  8293>>CALL     8298>>ASSIGN   8299>>ASSIGN
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:247  
TEXTC$REMOTE.BYTES IN PROCEDURE MAKE_TEXTC_REMOTE
      8249**DCL      8299<<ASSIGN
TEXTC$REMOTE.LENGTH# IN PROCEDURE MAKE_TEXTC_REMOTE
      8247**DCL      8249--IMP-SIZ  8298<<ASSIGN   8299>>ASSIGN
TEXTC_REMOTE$ IN PROCEDURE MAKE_TEXTC_REMOTE
      8190**DCL      8165--PROC     8218--IMP-PTR  8293<>CALL     8298>>ASSIGN   8299>>ASSIGN   8299>>ASSIGN
VD$BUFFER.BYTES
      7339**DCL      7736<<ASSIGN   8031<<ASSIGN
VD$BUFFER.LENGTH#
      7337**DCL      7339--IMP-SIZ  7734<<ASSIGN   7736>>ASSIGN   8030<<ASSIGN   8031>>ASSIGN
VD$BUFFER_HEADER
      7626**DCL      7731--CALL     8025--CALL
VD$ERR.CMDLINE_INDEX#
      7439**DCL      8128<<ASSIGN   8135<<ASSIGN
VD$FILE_NODE.DESC.KEY
      7513**DCL      8064--ASSIGN
VD$KEY_NUMBER.BYTES#
      7547**DCL      8064>>ASSIGN
VD$NUMBER.V#
      7386**DCL      7873<<ASSIGN   7921<<ASSIGN   7923<<ASSIGN   8090<<ASSIGN   8099<<ASSIGN
VD$STRING_HEADER IN PROCEDURE MAKE_TEXTC_REMOTE
      8262**DCL      8293--CALL
VD$TEXTC
      7603**DCL      7711<>CALL     7895<>CALL     7914<>CALL     7942<>CALL     7983<>CALL     8016<>CALL
VD$TEXTC.BYTES
      7613**DCL      7736>>ASSIGN
VD$TEXTC.LENGTH#
      7611**DCL      7613--IMP-SIZ  7711>>CALL     7731>>CALL     7734>>ASSIGN   7736>>ASSIGN   7895>>CALL
      7914>>CALL     7942>>CALL     7983>>CALL     8016>>CALL
VDE$PNUMBER
      6578**DCL-ENT  7770--CALL     7859--CALL     8075--CALL
VDE$PSTRING
      6577**DCL-ENT  7726--CALL     7814--CALL     7828--CALL
VDG$ERRMSG
      6579**DCL-ENT  8116--CALL     8122--CALL     8127--CALL     8134--CALL
VDG$ESCREECH
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:248  
      6582**DCL-ENT  8105--CALL
VDG$OALLOC
      6580**DCL-ENT  7656--CALL     7731--CALL     7867--CALL     7918--CALL     8025--CALL     8088--CALL
      8097--CALL     8293--CALL
VDG$OFREE
      6581**DCL-ENT  7785--CALL     8143--CALL
VD_$WI_PERCENT.V#
      7008**DCL      8047>>ASSIGN
VD_6E.CMD_STREAM$
      6616**DCL      7096--IMP-PTR  7763>>IF       7774>>ASSIGN   8110>>ASSIGN
VD_6E.ERR_TAIL$
      6617**DCL      8128>>ASSIGN   8135>>ASSIGN
VD_6E.STATS_TOKENS#
      6619**DCL      7662<<ASSIGN   7662>>ASSIGN   7719<<ASSIGN   7719>>ASSIGN   7724<<ASSIGN   7724>>ASSIGN
      7812<<ASSIGN   7812>>ASSIGN   7826<<ASSIGN   7826>>ASSIGN   7844<<ASSIGN   7844>>ASSIGN   7848<<ASSIGN
      7848>>ASSIGN   7857<<ASSIGN   7857>>ASSIGN   7891<<ASSIGN   7891>>ASSIGN   7912<<ASSIGN   7912>>ASSIGN
      7940<<ASSIGN   7940>>ASSIGN   7964<<ASSIGN   7964>>ASSIGN   8010<<ASSIGN   8010>>ASSIGN   8022<<ASSIGN
      8022>>ASSIGN   8052<<ASSIGN   8052>>ASSIGN
VD_BUFFER$
      7081**DCL      7311--IMP-PTR  8025<>CALL     8029>>ASSIGN   8030>>ASSIGN   8031>>ASSIGN   8031>>ASSIGN
VD_CURRENT_WINDOW$
      6875**DCL      8063>>IF       8064>>ASSIGN
VD_EDITING_HEIGHT
      6873**DCL      8047>>ASSIGN   8081>>ASSIGN   8099>>ASSIGN
VD_EDITING_WINDOWS
      6874**DCL      8047>>ASSIGN   8068>>IF       8071>>ASSIGN   8085>>IF       8116>>CALL
VD_ERR$
      7084**DCL      7397--IMP-PTR
VD_NUMBER$
      7082**DCL      7352--IMP-PTR  7867<>CALL     7870>>ASSIGN   7872>>ASSIGN   7873>>ASSIGN   7918<>CALL
      7920>>ASSIGN   7921>>ASSIGN   7923>>ASSIGN
WINDOW_SUBSCRIPT
      7080**DCL      7851<<ASSIGN   7853<<ASSIGN   7859<>CALL     7862>>IF       7862>>IF       7865<<ASSIGN
      7865>>ASSIGN   7873>>ASSIGN   8064<<ASSIGN   8067<<ASSIGN   8067>>ASSIGN   8068>>IF       8069<<ASSIGN
      8070>>IF       8071<<ASSIGN   8075<>CALL     8079>>ASSIGN   8085>>IF       8085>>IF       8090>>ASSIGN
      8116<>CALL
PL6.E3A0      #002=VDI$PARSE_TREE_TO_INTREE File=VDI$PARSE.:VDA5TSI              FRI 07/04/97 11:34 Page:249  
WI_KEY_NOT_IN_RANGE_FAILURE
      8116**LABEL    7864--GOTO     8087--GOTO
XUE_ECB.OUT$
      6716**DCL      7730>>IF       7731>>CALL     7734>>ASSIGN   7736>>ASSIGN   7736>>ASSIGN
ZERO_LENGTH_BUFFER
      7039**DCL      7740--ASSIGN   7822--ASSIGN   7836--ASSIGN

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:250  
     1926        1        /*T***********************************************************/
     1927        2        /*T*                                                         */
     1928        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1929        4        /*T*                                                         */
     1930        5        /*T***********************************************************/
     1931        6
     1932        7        /*D* NAME: VDI$PGET_COMMAND_RECORD
     1933        8            PARAMETERS:
     1934        9                BUF_ - Vector framing buffer to return record in.
     1935       10                ARS - Uninitialized UBIN word.
     1936       11                NEXT_RECORD$$ - Uninitialized EPTR.
     1937       12                ERRCODE - Uninitialized word.
     1938       13                EOMCHAR - Uninitialized character.
     1939       14            INPUT:
     1940       15                XUG_GETCMD - Control block for XUG$GETCMD.
     1941       16                XUG_INIT - Control block for XUG$GETCMD.
     1942       17                VD_6E.CMD_STREAM$ must point to the VD$CMD_STREAM for the
     1943       18                    current command stream (top entry on stack of same).
     1944       19                VD_$COMMENT:  VD$BUFFER for $COMMENT predefined name.
     1945       20                    Value's length may be 0.
     1946       21                VD_CMD_OBJECTS$ - Array of pointers to otherwise-unowned
     1947       22                    dynamic objects.
     1948       23            OUTPUT:
     1949       24                BUF_'s buffer will contain the record read.
     1950       25                ARS will contain the number of characters in the record.
     1951       26                NEXT_RECORD$$ will contain the entry address of the routine
     1952       27                    which XUG$GETCMD is to call to read the next record.
     1953       28                    This will always be VDI$PGET_COMMAND_RECORD.
     1954       29                ERRCODE will contain either %CLEAR, or a 6Edit error code.
     1955       30                EOMCHAR will contain either %EOM_EOR#, or the activation char.
     1956       31                CMD$STREAM (top VD$CMD_STREAM) will describe the record read:
     1957       32                    .INTREE$ may point to an InTree (chain of VD$IT_COMMAND nodes)
     1958       33                        for the command to process.  If .INTREE$ = NIL, then the
     1959       34                        command line only appears in .RECORD$ below.
     1960       35                    .RECORD$ may point to a VD$BUFFER containing just what
     1961       36                        we returned to GETCMD in BUF and ARS.  If .RECORD$ = NIL
     1962       37                        or has a .LENGTH# of 0, then the command line may appear
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:251  
     1963       38                        in InTree form pointed-to by .INTREE$.
     1964       39                    If we hit the end of a READ-file, we'll pop the stack
     1965       40                    of VD$CMD_STREAMs.  (The bottom entry on the stack
     1966       41                    should be for the terminal, and so will never get EOF.)
     1967       42                VD_CMD_OBJECTS$ will be all NIL:  any objects it pointed to
     1968       43                    will be freed.
     1969       44            DESCRIPTION:
     1970       45                Run thru VD_CMD_OBJECTS$ and free any objects it points to.
     1971       46                    This array is used as the "owner" of otherwise orphaned
     1972       47                    dynamic objects.  (For example, storage allocated by
     1973       48                    VDE$PFUNCTION for X$EVAL.)  Someone has to free this
     1974       49                    storage at a suitable time.  The time is now, and we are us!
     1975       50                Call READ_COMMAND_RECORD to get a record from the current command
     1976       51                    stream.  If the current command stream is a workspace
     1977       52                    file, we'll load it (except we won't load windows),
     1978       53                    then pop the command stream and read from the new
     1979       54                    "current" command stream.
     1980       55                    If EOF is hit, READ_COMMAND_RECORD will pop the
     1981       56                    command-stream stack and continue reading from the
     1982       57                    previous command stream.
     1983       58                If the record just read is actually an InTree, return an empty
     1984       59                    buffer to XUG$GETCMD.
     1985       60        *N*     Find and perform all $CONTROL functions which are not in
     1986       61        *N*         string literals.
     1987       62                Replace any synonyms in the
     1988       63                    command record with the synonyms' value, surrounded by
     1989       64                    space characters (unless there are already spaces
     1990       65                    surrounding the synonym).
     1991       66        */
     1992       67
     1993       68        VDI$PGET_COMMAND_RECORD: PROC
     1994       69                  (BUF_, ARS, NEXT_RECORD$$, ERRCODE, EOMCHAR) ALTRET;
     1995       70
     1996       71
     1997       72        %INCLUDE VD_MACROS_M;
     1998     2287        %INCLUDE VD_PERR_C;
     1999     2435        %INCLUDE XU_MACRO_C;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:252  
     2000     5529        %INCLUDE CP_6;
     2001     5610        %INCLUDE CP_6_SUBS;
     2002     6150        %INCLUDE B_ERRORS_C;
     2003     7276        %INCLUDE B$JIT;
     2004     7566        %INCLUDE B$TABLES_C;
     2005     7674
     2006     7675
     2007     7676    1   DCL BUF_ VECTOR;
     2008     7677    1   DCL ARS SBIN;
     2009     7678    1   DCL NEXT_RECORD$$ EPTR;
     2010     7679        %VD$ERR_CODE (NAME=ERRCODE, STCLASS=PARAM);
     2011     7694    1   DCL EOMCHAR CHAR(1);
     2012     7695
     2013     7696
     2014     7697
     2015     7698    1   DCL VDA$LREAD               ENTRY (4) ALTRET;
     2016     7699    1   DCL VDI$PREAD_FILE_OPEN     ENTRY ALTRET;
     2017     7700    1   DCL VDI$PREAD_FILE_CLOSE    ENTRY ALTRET;
     2018     7701    1   DCL VDI$PREAD_FILE_POSITION ENTRY ALTRET;
     2019     7702    1   DCL VDI$PREAD_FILE_READ     ENTRY (2) ALTRET;
     2020     7703    1   DCL VDW$LOAD                ENTRY (1) ALTRET;
     2021     7704    1   DCL VDG$ERASE_COMMAND_WINDOW ENTRY ALTRET;
     2022     7705    1   DCL VDG$OALLOC              ENTRY (3) ALTRET;
     2023     7706    1   DCL VDG$OFREE               ENTRY (1) ALTRET;
     2024     7707    1   DCL VDG$ESCREECH            ENTRY (3);
     2025     7708    1   DCL VDI$CEND_GLOBAL         ENTRY ALTRET;
     2026     7709
     2027     7710
     2028     7711        %VD_6E (STCLASS=SYMREF);
     2029     7747        %VD_BUFFER (NAME=VD_$COMMENT, STCLASS=SYMREF, MXNB=%MXNB_$COMMENT);
     2030     7807    1   DCL VD_ASYM UBIN SYMREF;
     2031     7808    1   DCL VD_LAST_CWIN_ACTIVITY UBIN SYMREF;
     2032     7809    1   DCL VD_FORCE_READ_FROM UBIN SYMREF;
     2033     7810        %B$XL_UPPER;
     2034     7814    1   DCL VD_XLATE_CHAR_CLASS CHAR(512) ALIGNED SYMREF;
     2035     7815    1   DCL VD_STATIC_TEMP CHAR(%NB_STATIC_TEMP) ALIGNED SYMREF;
     2036     7816    1   DCL VD_CMD_OBJECTS$ (0:%(MX_CMD_OBJECTS-1)) PTR SYMREF;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:253  
     2037     7817        %XUG_GETCMD (NAME=XUG_GETCMD, STCLASS=SYMREF);
     2038     8155        %XUG_INIT (NAME=XUG_INIT, STCLASS=SYMREF);
     2039     8568    1   DCL B$JIT$ PTR SYMREF;
     2040     8569    1   DCL B$TCB$ PTR SYMREF;
     2041     8570
     2042     8571
     2043     8572    1   DCL PTR_$COMMENT$ PTR CONSTANT INIT(ADDR(VD_$COMMENT));
     2044     8573
     2045     8574        /*N* Someday, would be nice to allow different $STRING delimiters */
     2046     8575        %VD_BUFFER (NAME=D_$STRING, STCLASS=CONSTANT, IBYTES="''''");
     2047     8635    1   DCL PTR_$STRING$ PTR CONSTANT INIT(ADDR(D_$STRING));
     2048     8636
     2049     8637
     2050     8638    1   DCL BUF$ PTR;
     2051     8639    1   DCL NB_BUF SBIN;
     2052     8640    1   DCL CMD_RECORD$ PTR;
     2053     8641    1   DCL SCAN_INDEX UBIN;
     2054     8642        %VD$LOCATION (NAME=SYNONYM_LOC, STCLASS=AUTO);
     2055     8670        %VD_TEXTC_REMOTE (NAME=TOKEN, STCLASS=AUTO, MXNB=%MXNB_NAME_VALUE);
     2056     8733    1   DCL SY_KEY$ PTR;
     2057     8734    1   DCL N UBIN;
     2058     8735    1   DCL VD_ERR$ PTR;
     2059     8736
     2060     8737
     2061     8738    1   DCL BUF CHAR(NB_BUF) BASED(BUF$);
     2062     8739        %VD$CMD_STREAM (NAME=CMD$STREAM, STCLASS="BASED(VD_6E.CMD_STREAM$)");
     2063     8778        %VD$BUFFER (NAME=CMD$RECORD, STCLASS="BASED(CMD_RECORD$)");
     2064     8836        %VD$TEXTC (NAME=SY$KEY, STCLASS="BASED(SY_KEY$)");
     2065     8859        %VD$BUFFER (NAME=VD$COMMENT, STCLASS="BASED(PTR_$COMMENT$)");
     2066     8917        %VD$BUFFER (NAME=D$STRING, STCLASS="BASED(PTR_$STRING$)");
     2067     8975        %VD$STREAM (NAME=SYNONYMS$STREAM, STCLASS="BASED(VD_6E.SYNONYMS$)");
     2068     9081        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     2069     9134        %VD$ERR (NAME=FATAL$ERR, STCLASS="BASED(VD_6E.ERR_HEAD$)");
     2070     9187        %B$TCB (NAME=B$TCB, STCLASS="BASED(B$TCB$)");
     2071     9190        %B$ALT;
     2072     9198        %VD$PORT;
     2073     9296        %VD$BUFFER;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:254  
     2074     9354        %VD$BUFFER_HEADER;
     2075     9390        %VD$OBJECT_HEADER;
     2076     9412        %VD$TEXTC_REMOTE;
     2077     9473
     2078     9474
     2079     9475
     2080     9476    1           BUF$ = VBASE(BUF_);
     2081     9477    1           NB_BUF = VBOUND(BUF_) + 1;
     2082     9478    1           ARS = 0;
     2083     9479    1           NEXT_RECORD$$ = ENTADDR(VDI$PGET_COMMAND_RECORD);
     2084     9480    1           ERRCODE = %CLEAR;
     2085     9481    1           EOMCHAR = %EOM_EOR#;
     2086     9482
     2087     9483    2           DO N = 0 TO %(MX_CMD_OBJECTS-1);
     2088     9484    3              IF VD_CMD_OBJECTS$ (N) ~= ADDR(NIL) THEN DO;
     2089     9485    3                 CALL VDG$OFREE (VD_CMD_OBJECTS$ (N) -> VD$OBJECT_HEADER)
     2090     9486    3                   ALTRET (OFREE_FAILED);
     2091     9487    3                 VD_CMD_OBJECTS$ (N) = ADDR(NIL);
     2092     9488    3                 END;
     2093     9489    2              END;
     2094     9490
     2095     9491    1           CALL READ_COMMAND_RECORD
     2096     9492    1             ALTRET (READ_COMMAND_RECORD_FAILED);
     2097     9493
     2098     9494    1           IF CMD$STREAM.INTREE$ ~= ADDR(NIL) THEN
     2099     9495    1              RETURN;      /* Return an empty buffer to XUG$GETCMD */
     2100     9496    1           CMD_RECORD$ = CMD$STREAM.RECORD$;
     2101     9497    1           IF CMD$RECORD.LENGTH# = 0 THEN
     2102     9498    1              RETURN;             /* Empty command line:  just return */
     2103     9499
     2104     9500    2           IF CMD$STREAM.CMD_AFTER_READ THEN DO;
     2105     9501    2              CMD$STREAM.CMD_AFTER_READ = %FALSE;
     2106     9502    3              IF CMD$RECORD.LENGTH# > NB_BUF THEN DO; /* no longer fits */
     2107     9503    3                 CMD$RECORD.LENGTH# = NB_BUF;
     2108     9504    3                 CALL VDG$OALLOC (%CLS_ERR, VD_ERR$);
     2109     9505    3                 VD$ERR.ERR.CODE# = %E$READ_2BIG;
     2110     9506    3                 VD$ERR.FLAGLEV# = %FLV_SERIOUS;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:255  
     2111     9507    3                 GOTO READ_COMMAND_RECORD_FAILED;
     2112     9508    3                 END;
     2113     9509
     2114     9510    2              GOTO RETURN_RECORD; /* Skip synonym substitution */
     2115     9511    2              END;
     2116     9512
     2117     9513
     2118     9514                %BOX (TITLE="Find and replace synonyms");

              9526    2   /***************************************************************************
              9528    2    *                                                                         *
              9532    2            *                         Find and replace synonyms                       *
              9534    2            *                                                                         *
              9536    2           ***************************************************************************/

     2119     9540
     2120     9541    1           SYNONYM_LOC = %CLEAR;
     2121     9542    1           SYNONYM_LOC.KEY.TYPE# (%(LVL_LOWER-1)) = %KT_STRING;
     2122     9543    1           SYNONYM_LOC.KEY.REP# (%(LVL_LOWER-1)) = %REP_REMOTE;
     2123     9544    1           SYNONYM_LOC.KEY.V$ (%(LVL_LOWER-1)) = ADDR(TOKEN);
     2124     9545    1           TOKEN = %CLEAR;
     2125     9546    1           TOKEN.OBJECT.CLASS# = %CLS_TEXTC_REMOTE;
     2126     9547
     2127     9548    1           SCAN_INDEX = 0;
     2128     9549    1   EACH_TOKEN:
     2129     9550    2           DO WHILE SCAN_INDEX < CMD$RECORD.LENGTH#;
     2130     9551    2              CALL FIND_TOKEN (SCAN_INDEX, TOKEN)
     2131     9552    2                ALTRET (FIND_TOKEN_FAILED);
     2132     9553
     2133     9554    3              IF TOKEN.LENGTH# > 0 THEN DO;
     2134     9555    3                 CALL XLATE (SUBSTR(TOKEN.BYTES, 0, TOKEN.LENGTH#), B$XL_UPPER,
     2135     9556    3                   SUBSTR(TOKEN.BYTES, 0, TOKEN.LENGTH#));
     2136     9557
     2137     9558    3   TOKEN_SELECTIONS:
     2138     9559    4                 DO SELECT (SUBSTR(TOKEN.BYTES, 0, TOKEN.LENGTH#));
     2139     9560    4                    SELECT (%KW_FILE, %KWA_FILE, %KW_READ);
     2140     9561                         /* Skip both the FILE or READ keywords and the fid that
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:256  
     2141     9562                         *    follows them.                                  */
     2142     9563    4                    SCAN_INDEX = SCAN_INDEX + TOKEN.LENGTH#; /* Skip keyword */
     2143     9564    4                    CALL FIND_FID (SCAN_INDEX, TOKEN)
     2144     9565    4                      ALTRET (FIND_FID_FAILED);
     2145     9566    4                    SCAN_INDEX = SCAN_INDEX + TOKEN.LENGTH#; /* Skip fid */
     2146     9567
     2147     9568    4                    SELECT (%KW_SYNONYM, %KWA_SYNONYM);
     2148     9569                         /* Skip SYNONYM keyword and the token following it */
     2149     9570    4                    SCAN_INDEX = SCAN_INDEX + TOKEN.LENGTH#; /* Skip SYNONYM */
     2150     9571    4                    CALL FIND_TOKEN (SCAN_INDEX, TOKEN)
     2151     9572    4                      ALTRET (FIND_TOKEN_FAILED);
     2152     9573    4                    SCAN_INDEX = SCAN_INDEX + TOKEN.LENGTH#; /* Skip token */
     2153     9574
     2154     9575    4                    SELECT (ELSE);
     2155     9576                         /* Got a candidate token:  see if it's a synonym */
     2156     9577    4                 CALL VDA$LREAD (SYNONYMS$STREAM, SYNONYM_LOC, 0, %TRUE)
     2157     9578    4                   ALTRET (LREAD_FAILED);
     2158     9579                      %GETKEY (KEY=SYNONYMS$STREAM.PORT$->VD$PORT.CURRENT.KEY,
     2159     9580                      INDX=%LVL_LOWER-1, PTR=SY_KEY$);
     2160     9590    4                 IF SY$KEY.BYTES =
     2161     9591    5                   SUBSTR(TOKEN.BYTES, 0, TOKEN.LENGTH#) THEN DO;
     2162     9592    5                    CALL REPLACE_STRING_AND_SKIP (SCAN_INDEX, TOKEN.LENGTH#,
     2163     9593    5                      SYNONYMS$STREAM.PORT$ ->
     2164     9594    5                      VD$PORT.LEVEL.DATA$ (%LVL_LOWER) -> VD$BUFFER)
     2165     9595    5                      ALTRET (REPLACE_STRING_AND_SKIP_FAILED);
     2166     9596    5                    END;
     2167     9597    4                 ELSE
     2168     9598    4                    SCAN_INDEX = SCAN_INDEX + TOKEN.LENGTH#;
     2169     9599
     2170     9600    4                    END TOKEN_SELECTIONS;
     2171     9601    3                 END;
     2172     9602    2              END EACH_TOKEN;
     2173     9603
     2174     9604    1   RETURN_RECORD: ;
     2175     9605    1           CALL INSERT (BUF, 0, CMD$RECORD.LENGTH#, CMD$RECORD.BYTES)
     2176     9606    2           WHENALTRETURN DO;
     2177     9607    2              CALL VDG$ESCREECH (CMD$RECORD.LENGTH#, NB_BUF);
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:257  
     2178     9608    2              END;
     2179     9609    1           ARS = CMD$RECORD.LENGTH#;
     2180     9610
     2181     9611    1           RETURN;
     2182     9612
     2183     9613
     2184     9614
     2185     9615    1   READ_COMMAND_RECORD_FAILED: ;
     2186     9616    1   OFREE_FAILED: ;
     2187     9617    1   FIND_TOKEN_FAILED: ;
     2188     9618    1   FIND_FID_FAILED: ;
     2189     9619    1   LREAD_FAILED: ;
     2190     9620    1   REPLACE_STRING_AND_SKIP_FAILED: ;
     2191     9621    1           ERRCODE = VD_6E.ERR_TAIL$->VD$ERR.ERR;
     2192     9622                /*
     2193     9623                *   We don't want XUG$GETCMD to parse this command record, but we do
     2194     9624                *       want to tell GETCMD about it in case VDG$EREPORT_ERROR calls
     2195     9625                *       XUG$ERRPTR (eg, in case one of the errors has
     2196     9626                *       VD$ERR.CMDLINE_INDEX# set).
     2197     9627                *   So, return the record (if any), but reset the parse nodes to NIL.
     2198     9628                *       (((Test case:  With !DONT POINT, say CO ST 'ABC AF 6
     2199     9629                *       ie, enter a string with unbalanced quotes.)))
     2200     9630                */
     2201     9631    1           IF CMD$STREAM.RECORD$ = ADDR(NIL) THEN
     2202     9632    1              ARS = 0;
     2203     9633    2           ELSE DO;
     2204     9634    2              CMD_RECORD$ = CMD$STREAM.RECORD$;
     2205     9635    2              CALL INSERT (BUF, 0, CMD$RECORD.LENGTH#, CMD$RECORD.BYTES)
     2206     9636    3              WHENALTRETURN DO;
     2207     9637    3                 CALL VDG$ESCREECH (CMD$RECORD.LENGTH#, NB_BUF);
     2208     9638    3                 END;
     2209     9639    2              ARS = CMD$RECORD.LENGTH#;
     2210     9640    2              XUG_GETCMD.NODES$ = ADDR(VD_ASYM);
     2211     9641    2              RETURN; /* So GETCMD will echo the record */
     2212     9642    2              END;
     2213     9643    1           ALTRETURN;
     2214     9644
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:258  
     2215     9645        %BOX (TITLE=READ_COMMAND_RECORD, PAGE=YES);
              9653    1
              9657    1   /***************************************************************************
              9659    1    *                                                                         *
              9663    1            *                            READ_COMMAND_RECORD                          *
              9665    1            *                                                                         *
              9667    1           ***************************************************************************/

     2216     9671
     2217     9672        /*I* NAME: READ_COMMAND_RECORD
     2218     9673            PARAMETERS:
     2219     9674                None.
     2220     9675            INPUT:
     2221     9676                VD_6E.CMD_STREAM$:  Ptr to top VD$CMD_STREAM on stack of same.
     2222     9677                    Each entry represents a command stream; all entries except
     2223     9678                    the top represent command streams which have been
     2224     9679                    interrupted by a READ command.  A command stream can be
     2225     9680                    either:
     2226     9681                        The command window (there may be a partially unprocessed
     2227     9682                            record in the VD$CMD_STREAM, left over from a READ
     2228     9683                            command);
     2229     9684                        A file (the VD$CMD_STREAM remembers where in the file
     2230     9685                            to start reading again); or
     2231     9686                        A buffer or InTree containing a single command line (the
     2232     9687                            VD$CMD_STREAM remembers where in the buffer/InTree to
     2233     9688                            start processing again).
     2234     9689                    The top entry (if any) on the stack is the current
     2235     9690                    position in the current command stream.  The stack must
     2236     9691                    never be empty.
     2237     9692            OUTPUT:
     2238     9693                CMD$STREAM (top VD$CMD_STREAM) will describe the command record
     2239     9694                    read from the command stream:
     2240     9695                    .INTREE$ may point to an InTree for the record.  If .INTREE$
     2241     9696                        is not NIL, the InTree should be used in preference to
     2242     9697                        the character record in .RECORD$.
     2243     9698                    .RECORD$ may point to a VD$BUFFER containing the record.
     2244     9699                    .REC_NUM# will be the file record number (counting from 1) of the
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:259  
     2245     9700                        record pointed-to by .INTREE$/.RECORD$.
     2246     9701                    Either one or both of .INTREE$ and .RECORD$ will be non-NIL.
     2247     9702                    If both are returned, .INTREE$ should be used in preference to
     2248     9703                    .RECORD$; the character form of the command record is kept only
     2249     9704                    for the purposes of error reporting.
     2250     9705                VD_6E.CMD_STREAM$ may be modified.  The VD$CMD_STREAM at the
     2251     9706                    top of the stack may be modified.
     2252     9707                XUG_GETCMD.TREAD# will be set if we read a record from the
     2253     9708                    terminal, reset otherwise.
     2254     9709            DESCRIPTION:
     2255     9710                Read the next record from the current command stream:  either
     2256     9711                the next record from a READ-file, or a record from the command
     2257     9712                window, or the unprocessed portion of an existing record
     2258     9713                buffer.
     2259     9714                Note that if the current command stream is a workspace file,
     2260     9715                    we'll load the workspace, pop the command stream, then
     2261     9716                    read from the new "current" command stream.
     2262     9717                If we get EOF, pop the command stream stack: if the new
     2263     9718                command stream is:
     2264     9719                o A READ-file:
     2265     9720                    Open it and reposition to the last record read from the file.
     2266     9721                o The command window:
     2267     9722                    If the command stream contains a partially-unprocessed record,
     2268     9723                        then return it as the next command record.
     2269     9724                    However, If the command stream doesn't contain a
     2270     9725                        partially-unprocessed record, return an empty command record.
     2271     9726                        We return an empty command record when we transition back to
     2272     9727                        the command window, instead of reading from the command window
     2273     9728                        immediately.  This gives VDI$PDRIVER a chance to re-evaluate
     2274     9729                        its parameters for deciding whether to read from the command
     2275     9730                        window or the current editing window.
     2276     9731        */
     2277     9732
     2278     9733    1   READ_COMMAND_RECORD: PROC ALTRET;
     2279     9734
     2280     9735
     2281     9736    2   DCL REC_NUM_INCR SBIN;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:260  
     2282     9737    2   DCL HAD_ERROR BIT(1) ALIGNED;
     2283     9738    2   DCL EOF_FLAG BIT(1) ALIGNED;
     2284     9739
     2285     9740
     2286     9741        %VD$BUFFER;
     2287     9799
     2288     9800
     2289     9801
     2290     9802    2           REC_NUM_INCR = 1;   /* Assume we're reading new record */
     2291     9803    2           HAD_ERROR = %FALSE;
     2292     9804
     2293     9805    3           DO UNTIL NOT EOF_FLAG;
     2294     9806    3              CALL CMD_STREAM_READ
     2295     9807    3                ALTRET (CMD_STREAM_READ_FAILED);
     2296     9808
     2297     9809    4              IF EOF_FLAG THEN DO;
     2298     9810    4                 CALL POP_STACK_AND_POSTN
     2299     9811    4                   ALTRET (POP_STACK_AND_POSTN_FAILED);
     2300     9812    4                 IF CMD$STREAM.CMD_AFTER_READ THEN
     2301     9813    4                    REC_NUM_INCR = 0;
     2302     9814    5                 ELSE IF CMD$STREAM.TYPE# = %CS_ME THEN DO;
     2303     9815                         /* Return an empty buffer to get into the editing window
     2304     9816                            after a command-line or read command */
     2305     9817    6                       IF CMD$STREAM.RECORD$ = ADDR(NIL) THEN DO;
     2306     9818    6                          CALL VDG$OALLOC (%CLS_BUFFER, CMD$STREAM.RECORD$,
     2307     9819    6                            SIZEW(VD$BUFFER_HEADER))
     2308     9820    6                            ALTRET (OALLOC_FAILED);
     2309     9821    6                          END;
     2310     9822    5                       CMD$STREAM.RECORD$->VD$BUFFER.LENGTH# = 0;
     2311     9823    5                       EOF_FLAG = %FALSE;
     2312     9824    5                       END;
     2313     9825    4                 END;
     2314     9826    3              END;
     2315     9827
     2316     9828    2           IF HAD_ERROR THEN
     2317     9829    2              ALTRETURN;
     2318     9830
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:261  
     2319     9831    2           CMD$STREAM.REC_NUM# = CMD$STREAM.REC_NUM# + REC_NUM_INCR;
     2320     9832    2           RETURN;
     2321     9833
     2322     9834
     2323     9835
     2324     9836    2   CMD_STREAM_READ_FAILED: ;
     2325     9837    2   POP_STACK_AND_POSTN_FAILED: ;
     2326     9838    2   OALLOC_FAILED: ;
     2327     9839    2           ALTRETURN;
     2328     9840
     2329     9841
     2330     9842                %BOX (TITLE=CMD_STREAM_READ);

              9854    2   /***************************************************************************
              9856    2    *                                                                         *
              9860    2            *                              CMD_STREAM_READ                            *
              9862    2            *                                                                         *
              9864    2           ***************************************************************************/

     2331     9868
     2332     9869        /*I** NAME: CMD_STREAM_READ
     2333     9870            PARAMETERS:
     2334     9871                None.
     2335     9872            INPUT:
     2336     9873                CMD$STREAM - Current command stream.
     2337     9874            OUTPUT:
     2338     9875                If EOF not hit:
     2339     9876                    CMD$STREAM.INTREE$ may point to an InTree (chain of VD$IT_COMMAND
     2340     9877                        nodes) for the record read from the command stream.
     2341     9878                        The first node in the chain is always the first node to
     2342     9879                        process (any previously-processed nodes will be stripped).
     2343     9880                    CMD$STREAM.RECORD$ may point to either a VD$BUFFER containing
     2344     9881                        the record read from the command stream.  If .INTREE$
     2345     9882                        is non-NIL, it should be used instead of .RECORD$.
     2346     9883                        In .RECORD$'s VD$BUFFER.DATA, the VFC and already-processed
     2347     9884                        leading will have been stripped from the buffer, so the
     2348     9885                        next character to process will be the first character of
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:262  
     2349     9886                        the buffer.
     2350     9887                    XUG_GETCMD.TREAD# will be set if we got the command record
     2351     9888                        from an interactive terminal; reset otherwise.
     2352     9889                EOF_FLAG - Will contain %TRUE if there are no more records
     2353     9890                    in the current command stream (EOF on file or EOF activation
     2354     9891                    from the command window).
     2355     9892            DESCRIPTION:
     2356     9893                Read the next record.  Return EOF if appropriate.
     2357     9894                Note that if we see a VD$CMD_STREAM for a file whose file-type
     2358     9895                    is %CHR_ENCODED_TYPE, we'll call VDW$LOAD, which could
     2359     9896                    change alot of info in the internal files -- like all of
     2360     9897                    them!
     2361     9898                If we're reading from the terminal, we sometimes force pagehalt
     2362     9899                    off and then on again.  We do this when there is an
     2363     9900                    editing window to which the cursor will probably return
     2364     9901                    after this command read (ie, $COMMAND is off and the
     2365     9902                    editing window has an EditBlock).  If we didn't turn
     2366     9903                    pagehalt off, the user would have to type two CRs after
     2367     9904                    every command:  one to terminate the command and one
     2368     9905                    in response to the CR TO GO or beep.  However, if we
     2369     9906                    leave pagehalt off as we return to XUG$GETCMD, then if
     2370     9907                    GETCMD reports any errors they'll flash by in the command
     2371     9908                    window before the user can read them!  So, if we decide
     2372     9909                    to turn pagehalt off before the M$READ, we must turn it
     2373     9910                    back on after the M$READ.
     2374     9911        */
     2375     9912
     2376     9913    2   CMD_STREAM_READ: PROC ALTRET;
     2377     9914
     2378     9915
     2379     9916        %FPT_READ (STCLASS=STATIC);
     2380     9955        %FPT_WRITE (FPTN=WRITE_BLANK_LINE, STCLASS=STATIC, BUF=BLANK_BUF);
     2381     9986    3   DCL BLANK_BUF CHAR(1) CONSTANT INIT(%CHR_SPACE);
     2382     9987
     2383     9988
     2384     9989    3   DCL BUF_SIZE SBIN;
     2385     9990    3   DCL N SBIN;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:263  
     2386     9991    3   DCL IT_COMMAND$ PTR;
     2387     9992    3   DCL VD_BUFFER$ PTR;
     2388     9993    3   DCL READ_DCB$ PTR;
     2389     9994    3   DCL 1 LOAD_FLAGS ALIGNED,
     2390     9995              %VD$PDFF (NAME=F, STCLASS=AUTO, LEV=2, LAST=YES);
     2391    10009
     2392    10010
     2393    10011        %VD$IT_COMMAND (NAME=IT$COMMAND, STCLASS="BASED(IT_COMMAND$)");
     2394    10049        %VD$BUFFER (NAME=VD$BUFFER, STCLASS="BASED(VD_BUFFER$)");
     2395    10107        %F$DCB (DCBN=READ$DCB, STCLASS="BASED(READ_DCB$)");
     2396    10164        %VD$IT_COMMAND;
     2397    10202
     2398    10203
     2399    10204
     2400    10205    3           EOF_FLAG = %FALSE;
     2401    10206    3           XUG_GETCMD.TREAD# = %FALSE;
     2402    10207
     2403    10208    3   CMD_STREAM_TYPE_CASES:
     2404    10209    4           DO CASE (CMD$STREAM.TYPE#);
     2405    10210
     2406    10211    4            CASE (%CS_BUFFER);
     2407    10212    4              IF (CMD$STREAM.INTREE$ = ADDR(NIL)
     2408    10213    4                AND CMD$STREAM.RECORD$ = ADDR(NIL))
     2409    10214    4                OR (CMD$STREAM.REC_NUM# > 0 AND NOT CMD$STREAM.CMD_AFTER_READ
     2410    10215    5                AND CMD$STREAM.RECORD$ -> VD$BUFFER.FLINK$ = ADDR(NIL)) THEN DO;
     2411    10216    5                 EOF_FLAG = %TRUE;
     2412    10217    5                 END;
     2413    10218                   /*
     2414    10219                   * Force increment of .REC_NUM#; otherwise, it won't be
     2415    10220                   *    incremented til the buffer is read twice.
     2416    10221                   *    (Test case:  !6EDIT (NEW FILE *) => reads
     2417    10222                   *    NEW FILE * command line twice.)
     2418    10223                   */
     2419    10224    4              ELSE IF CMD$STREAM.REC_NUM# = 0 THEN
     2420    10225    4                    CMD$STREAM.REC_NUM# = CMD$STREAM.REC_NUM# + 1;
     2421    10226    5                 ELSE IF NOT CMD$STREAM.CMD_AFTER_READ THEN DO;
     2422    10227    5                       VD_BUFFER$ = CMD$STREAM.RECORD$ -> VD$BUFFER.FLINK$;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:264  
     2423    10228    5                       CMD$STREAM.RECORD$ -> VD$BUFFER.FLINK$ = ADDR(NIL);
     2424    10229    5                       CALL VDG$OFREE (CMD$STREAM.RECORD$ -> VD$BUFFER)
     2425    10230    5                         ALTRET (OFREE_FAILED);
     2426    10231    5                       CMD$STREAM.RECORD$ = VD_BUFFER$;
     2427    10232    5                       END;
     2428    10233                   /* Say we read from terminal, so won't echo this line */
     2429    10234    4              XUG_GETCMD.TREAD# = %TRUE;
     2430    10235
     2431    10236
     2432    10237    4            CASE (%CS_FILE, %CS_DCB);
     2433    10238    5              IF CMD$STREAM.FILE_TYPE = %CHR_ENCODED_TYPE THEN DO;
     2434    10239    5                 LOAD_FLAGS = %CLEAR;
     2435    10240    5                 LOAD_FLAGS.F (%PDFF_EQUALS) = %TRUE;
     2436    10241    6                 IF B$JIT.MODE = %M_INT# THEN DO;
     2437    10242                         /* Can load keyins only if we're timesharing */
     2438    10243    6                    LOAD_FLAGS.F (%PDFF_KEYINS) = %TRUE;
     2439    10244    6                    END;
     2440    10245    5                 LOAD_FLAGS.F (%PDFF_LOCATIONS) = %TRUE;
     2441    10246    5                 LOAD_FLAGS.F (%PDFF_SYNONYMS) = %TRUE;
     2442    10247                      /* Don't load windows or structures */
     2443    10248    5                 CALL VDW$LOAD (LOAD_FLAGS)
     2444    10249    5                   ALTRET (WLOAD_FAILED);
     2445    10250                      /*N**??*
     2446    10251                      *N**??* On altret from WLOAD, WLOAD has closed the SAVE-file and
     2447    10252                      *N**??*   popped it off the cmdstream stack.  But the prior
     2448    10253                      *N**??*   cmdstream hasn't been opened or positioned, has it???!!!
     2449    10254                      *N**??*/
     2450    10255    5                 EOF_FLAG = %TRUE;
     2451    10256    5                 END;
     2452    10257    4              ELSE IF CMD$STREAM.DCB#~=DCBNUM(NIL)
     2453    10258    4                   AND DCBADDR(CMD$STREAM.DCB#) -> READ$DCB.CTLCMDIN
     2454    10259    4                   AND B$JIT.NEXTCC = %CC_FROMUC# THEN
     2455    10260    4                    EOF_FLAG = %TRUE; /* Finished an XEQ, read from M$ME next */
     2456    10261    5                 ELSE IF NOT CMD$STREAM.CMD_AFTER_READ THEN DO;
     2457    10262    5                       CALL VDI$PREAD_FILE_READ (NB_BUF, EOF_FLAG)
     2458    10263    5                         ALTRET (PREAD_FILE_READ_FAILED);
     2459    10264    5                       END;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:265  
     2460    10265    4              IF NOT CMD$STREAM.ECHO /* Only echo READ, XEQ, or BATCH */
     2461    10266    4                OR CMD$STREAM.CMD_AFTER_READ THEN /* unless rereading after READ */
     2462    10267    4                 XUG_GETCMD.TREAD# = %TRUE;
     2463    10268
     2464    10269
     2465    10270    4            CASE (%CS_ME);
     2466    10271    5              IF CMD$STREAM.INTREE$ ~= ADDR(NIL) THEN DO;
     2467    10272    5                 CALL VDG$OFREE (CMD$STREAM.INTREE$->VD$IT_COMMAND)
     2468    10273    5                   ALTRET (OFREE_FAILED);
     2469    10274    5                 CMD$STREAM.INTREE$ = ADDR(NIL);
     2470    10275    5                 END;
     2471    10276
     2472    10277                   /* If .POSITION# > 0, we already have a partial rec left over */
     2473    10278    4              IF NOT CMD$STREAM.CMD_AFTER_READ THEN
     2474    10279    4                 CALL READ_FROM_ME
     2475    10280    4                   ALTRET (READ_FROM_ME_FAILED);
     2476    10281
     2477    10282
     2478    10283    4            CASE (ELSE);
     2479    10284    4              CALL VDG$ESCREECH (CMD$STREAM.TYPE#);
     2480    10285    4            END CMD_STREAM_TYPE_CASES;
     2481    10286
     2482    10287
     2483    10288    4           IF NOT EOF_FLAG THEN DO;
     2484    10289                   /*
     2485    10290                   *  The two cases to be handled are:
     2486    10291                   *  1.  Reading a record for the first time.  CMD$STREAM.POSITION#
     2487    10292                   *        is either 0 or 1 in this case.  (It may be 1 if
     2488    10293                   *        the record contains a VFC char.)
     2489    10294                   *  2.  Re-reading a record whose processing was interrupted
     2490    10295                   *        by a READ command.  .POSITION# is > 1 in this case.
     2491    10296                   */
     2492    10297    5              IF CMD$STREAM.INTREE$ ~= ADDR(NIL) THEN DO;
     2493    10298    6                 IF CMD$STREAM.POSITION# > 0 THEN DO;
     2494    10299                         /* Strip some VD$IT_COMMANDs from front of chain */
     2495    10300    6                    N = CMD$STREAM.POSITION#;   /* # to strip */
     2496    10301    7                    DO WHILE CMD$STREAM.INTREE$ ~= ADDR(NIL)
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:266  
     2497    10302    7                      AND N > 0;
     2498    10303    7                       IT_COMMAND$ = CMD$STREAM.INTREE$;
     2499    10304    7                       CMD$STREAM.INTREE$ = IT$COMMAND.FLINK$;
     2500    10305    7                       CALL VDG$OFREE (IT$COMMAND)
     2501    10306    7                         ALTRET (OFREE_FAILED);
     2502    10307    7                       N = N - 1;
     2503    10308    7                       END;
     2504    10309    6                    END;
     2505    10310    5                 END;
     2506    10311    5              ELSE IF CMD$STREAM.RECORD$ ~= ADDR(NIL) THEN DO;
     2507    10312    5                    VD_BUFFER$ = CMD$STREAM.RECORD$;
     2508    10313    6                    IF CMD$STREAM.POSITION# < 2 THEN DO;
     2509    10314                            /*
     2510    10315                            *  This is case 1: we just read a record for the first
     2511    10316                            *       time.
     2512    10317                            *  Check for prompt at start of record.
     2513    10318                            */
     2514    10319    6                       IF SUBSTR(VD$BUFFER.BYTES, CMD$STREAM.POSITION#,
     2515    10320    6                         LENGTHC(%CHR_PROMPT)) = %CHR_PROMPT THEN
     2516    10321    6                          CMD$STREAM.POSITION# = CMD$STREAM.POSITION# +
     2517    10322    6                            LENGTHC(%CHR_PROMPT);
     2518    10323    6                       END;
     2519    10324
     2520    10325    6                    IF CMD$STREAM.POSITION# > 0 THEN DO;
     2521    10326                            /*
     2522    10327                            *  This ISN'T case 2!  Both cases may pass thru this code.
     2523    10328                            *  Case 1 may get here to strip a VFC char off the front
     2524    10329                            *    of the buffer.
     2525    10330                            *  Case 2 always gets here to strip the already-processed
     2526    10331                            *    commands off the front of the buffer.
     2527    10332                            */
     2528    10333    6                       VD$BUFFER.LENGTH# = MAXIMUM (0,
     2529    10334    6                         VD$BUFFER.LENGTH# - CMD$STREAM.POSITION#);
     2530    10335    6                       IF VD$BUFFER.LENGTH# > 0 THEN
     2531    10336    6                          VD$BUFFER.BYTES = SUBSTR (VD$BUFFER.BYTES,
     2532    10337    6                            CMD$STREAM.POSITION#, VD$BUFFER.LENGTH#);
     2533    10338    6                       CMD$STREAM.POSITION# = 0;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:267  
     2534    10339    6                       END;
     2535    10340    5                    END;
     2536    10341    4              END;
     2537    10342
     2538    10343    3           RETURN;
     2539    10344
     2540    10345
     2541    10346
     2542    10347    3   PREAD_FILE_READ_FAILED:
     2543    10348    3           CALL VDI$PREAD_FILE_CLOSE;
     2544    10349    3           ALTRETURN;
     2545    10350
     2546    10351
     2547    10352    3   WLOAD_FAILED: ;
     2548    10353    3   READ_FROM_ME_FAILED: ;
     2549    10354    3   OALLOC_FAILED: ;
     2550    10355    3   OFREE_FAILED: ;
     2551    10356    3           ALTRETURN;
     2552    10357
     2553    10358    3   END CMD_STREAM_READ;
     2554    10359
     2555    10360
     2556    10361        %BOX (TITLE=READ_FROM_ME);

             10373    3   /***************************************************************************
             10375    3    *                                                                         *
             10379    3            *                                READ_FROM_ME                             *
             10381    3            *                                                                         *
             10383    3           ***************************************************************************/

     2557    10387
     2558    10388        /*I** NAME: READ_FROM_ME
     2559    10389            PARAMETERS:
     2560    10390                None.
     2561    10391            INPUT:
     2562    10392                CMD$STREAM - VD$CMD_STREAM at top of stack.  It must be a %CS_ME-type.
     2563    10393            OUTPUT:
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:268  
     2564    10394                CMD$STREAM.RECORD$ will point to the new record from ME.
     2565    10395                CMD$STREAM.POSITION# will be set to 1 if the record read from ME has
     2566    10396                    a VFC character; else .POSITION# will be set to 0.
     2567    10397                EOF_FLAG will be set if we get EOF from ME.
     2568    10398                XUG_GETCMD.TREAD will be set if we got a command line we want to
     2569    10399                    process.
     2570    10400                VD_FORCE_READ_FROM may be set.
     2571    10401            DESCRIPTION:
     2572    10402                Read a record from ME (the terminal command window).  If we didn't
     2573    10403                get EOF, then check the activation character:  if EOM_COMMAND, ignore
     2574    10404                this read and start another one.
     2575    10405        */
     2576    10406
     2577    10407    2   READ_FROM_ME: PROC ALTRET;
     2578    10408
     2579    10409
     2580    10410        %FPT_READ (STCLASS=STATIC);
     2581    10449
     2582    10450
     2583    10451    3   DCL BUF_SIZE SBIN;
     2584    10452    3   DCL VD_BUFFER$ PTR;
     2585    10453    3   DCL READ_DCB$ PTR;
     2586    10454    3   DCL ERR_CODE SBIN;
     2587    10455    3   DCL INTERRUPT_STATE_BEFORE_M$READ SBIN;
     2588    10456
     2589    10457
     2590    10458        %VD$BUFFER (NAME=VD$BUFFER, STCLASS="BASED(VD_BUFFER$)");
     2591    10516        %F$DCB (DCBN=READ$DCB, STCLASS="BASED(READ_DCB$)");
     2592    10573
     2593    10574
     2594    10575
     2595    10576    4           IF VD_LAST_CWIN_ACTIVITY = %LCA_SWITCH THEN DO;
     2596    10577    4              CALL VDG$ERASE_COMMAND_WINDOW
     2597    10578    4                ALTRET (ERASE_COMMAND_WINDOW_FAILED);
     2598    10579    4              END;
     2599    10580
     2600    10581    3           BUF_SIZE = (LENGTHC(VD$BUFFER_HEADER) + NB_BUF + %NB_PER_WORD - 1) /
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:269  
     2601    10582    3             %NB_PER_WORD;
     2602    10583    4           IF CMD$STREAM.RECORD$ ~= ADDR(NIL) THEN DO;
     2603    10584    4              VD_BUFFER$ = CMD$STREAM.RECORD$;
     2604    10585    5              IF VD$BUFFER.OBJECT.SIZE# < BUF_SIZE THEN DO;
     2605    10586    5                 CALL VDG$OFREE (VD$BUFFER)
     2606    10587    5                   ALTRET (OFREE_FAILED);
     2607    10588    5                 CMD$STREAM.RECORD$ = ADDR(NIL);
     2608    10589    5                 END;
     2609    10590    4              END;
     2610    10591    4           IF CMD$STREAM.RECORD$ = ADDR(NIL) THEN DO;
     2611    10592    4              CALL VDG$OALLOC (%CLS_BUFFER, CMD$STREAM.RECORD$, BUF_SIZE)
     2612    10593    4                ALTRET (OALLOC_FAILED);
     2613    10594    4              END;
     2614    10595    3           VD_BUFFER$ = CMD$STREAM.RECORD$;
     2615    10596    3           VD$BUFFER.LENGTH# = NB_BUF;
     2616    10597    3           FPT_READ.BUF_ = VECTOR(VD$BUFFER.BYTES);
     2617    10598    3           FPT_READ.V.DCB# = XUG_GETCMD.INDCB#;
     2618    10599    3           READ_DCB$ = DCBADDR(FPT_READ.V.DCB#);
     2619    10600
     2620    10601    3   DO_UNTIL_GOT_A_REC:
     2621    10602    4           DO UNTIL EOF_FLAG OR XUG_GETCMD.TREAD#;
     2622    10603    4              ERR_CODE = 0;
     2623    10604    5              DO INHIBIT;
     2624    10605    5                 INTERRUPT_STATE_BEFORE_M$READ = VD_6E.INTERRUPT.STATE#;
     2625    10606    5                 VD_6E.INTERRUPT.STATE# = %INST_READING;
     2626    10607    5                 END;
     2627    10608
     2628    10609    4              CALL M$READ (FPT_READ)
     2629    10610    5              WHENALTRETURN DO;
     2630    10611    5                 ERR_CODE = B$TCB.ALT$->B$ALT.ERR.ERR#;
     2631    10612    5                 END;
     2632    10613
     2633    10614    5              DO INHIBIT;
     2634    10615    5                 VD_6E.INTERRUPT.STATE# = INTERRUPT_STATE_BEFORE_M$READ;
     2635    10616    5                 END;
     2636    10617
     2637    10618    5              IF ERR_CODE ~= 0 THEN DO;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:270  
     2638    10619    5                 IF ERR_CODE ~= %E$EOF OR B$JIT.MODE ~= %M_INT# THEN
     2639    10620                         /* Non-EOF error, or EOF in batch/ghost/TP */
     2640    10621    5                    GOTO CMD_WINDOW_READ_FAILED;
     2641    10622    5                 EOF_FLAG = %TRUE;
     2642    10623    5                 END;
     2643    10624    4              ELSE
     2644    10625    5   READ_COMPLETED_OK: DO;
     2645    10626    5                 VD$BUFFER.LENGTH# = READ$DCB.ARS#;
     2646    10627
     2647    10628    5                 EOMCHAR = READ$DCB.EOMCHAR#;
     2648    10629    5                 IF READ$DCB.EOMVAL#.VALUE# = %EOM_COMMAND THEN
     2649    10630                             /* Ignore empty command line, start another one */
     2650    10631    5                    IF READ$DCB.ARS#=0 THEN EXIT READ_COMPLETED_OK;
     2651    10632                             /* Otherwise, stay in the command window */
     2652    10633    5                    ELSE VD_FORCE_READ_FROM = %RF_COMMAND_WINDOW;
     2653    10634    5                 ELSE IF READ$DCB.EOMVAL#.VALUE# = %EOM_NEXT_ED_WINDOW THEN
     2654    10635                            /*
     2655    10636                            *  Treat EOM_NEXT_ED_WINDOW like CR, but force next
     2656    10637                            *    read from editing window.
     2657    10638                            */
     2658    10639
     2659    10640    5                       ; /* ? */
     2660    10641    5                    ELSE IF READ$DCB.EOMVAL#.VALUE# = %EOM_ED_WINDOW
     2661    10642    5                         OR READ$DCB.EOMVAL#.VALUE# = %EOM_PREV_RECORD
     2662    10643    5                         OR READ$DCB.EOMVAL#.VALUE# = %EOM_SPLIT_RECORD THEN
     2663    10644                            /*  A <LF> in the command window means go to
     2664    10645                                the current editing window.  */
     2665    10646
     2666    10647    5                          VD_FORCE_READ_FROM = %RF_EDITING_WINDOW;
     2667    10648
     2668    10649                            /* CR or other "normal" activations */
     2669    10650    5                 XUG_GETCMD.TREAD# = %TRUE;
     2670    10651    5                 CMD$STREAM.POSITION# = BITBIN(READ$DCB.DVBYTE.VFC#);
     2671    10652    5                 END READ_COMPLETED_OK;
     2672    10653
     2673    10654    4              END DO_UNTIL_GOT_A_REC;
     2674    10655
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:271  
     2675    10656    3           RETURN;
     2676    10657
     2677    10658
     2678    10659
     2679    10660    3   CMD_WINDOW_READ_FAILED:
     2680    10661    4           IF B$JIT.MODE ~= %M_INT# THEN DO;
     2681    10662                   /* Error while reading in batch is fatal */
     2682    10663    4              FATAL$ERR.ERR = B$TCB.ALT$->B$ALT.ERR;
     2683    10664    5              IF FATAL$ERR.ERR.CODE# = %E$EOF THEN DO;
     2684    10665    5                 FATAL$ERR.ERR = %CLEAR;
     2685    10666    5                 FATAL$ERR.ERR.CODE# = %E$NO_MORE_COMMANDS;
     2686    10667    5                 END;
     2687    10668    4              FATAL$ERR.FLAGLEV# = %FLV_FATAL;
     2688    10669    4              FATAL$ERR.DCB# = FPT_READ.V.DCB#;
     2689    10670    4              END;
     2690    10671    4           ELSE DO;
     2691    10672    4              CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     2692    10673    4                ALTRET (OALLOC_FAILED);
     2693    10674    4              VD$ERR.ERR = B$TCB.ALT$->B$ALT.ERR;
     2694    10675    4              VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     2695    10676    4              VD$ERR.DCB# = FPT_READ.V.DCB#;
     2696    10677    4              END;
     2697    10678    3           ALTRETURN;
     2698    10679
     2699    10680
     2700    10681    3   OALLOC_FAILED: ;
     2701    10682    3   OFREE_FAILED: ;
     2702    10683    3   ERASE_COMMAND_WINDOW_FAILED: ;
     2703    10684    3           ALTRETURN;
     2704    10685
     2705    10686    3   END READ_FROM_ME;
     2706    10687
     2707    10688
     2708    10689                %BOX (TITLE=POP_STACK_AND_POSTN);

             10701    3   /***************************************************************************
             10703    3    *                                                                         *
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:272  
             10707    3            *                            POP_STACK_AND_POSTN                          *
             10709    3            *                                                                         *
             10711    3           ***************************************************************************/

     2709    10715
     2710    10716        /*I** NAME: POP_STACK_AND_POSTN
     2711    10717            PARAMETERS:
     2712    10718                None.
     2713    10719            INPUT:
     2714    10720                CMD$STREAM - VD$CMD_STREAM at the top of the stack.
     2715    10721            OUTPUT:
     2716    10722                VD_6E.CMD_STREAM$ will be modified.  At exit, it will always
     2717    10723                    point to a VD$CMD_STREAM for what is now the current
     2718    10724                    command stream.
     2719    10725            DESCRIPTION:
     2720    10726               If eof is reached on the primary command stream, terminate 6EDIT.
     2721    10727               Otherwise:
     2722    10728                Close/free the top entry of the command stream stack and
     2723    10729                    pop the stack.
     2724    10730                If the stack is now empty, push an entry for the command window.
     2725    10731                If the top entry on the stack is now a READ-file, open the
     2726    10732                    file and position it to where we left off.
     2727    10733        */
     2728    10734
     2729    10735    2   POP_STACK_AND_POSTN: PROC ALTRET;
     2730    10736
     2731    10737
     2732    10738    3   DCL I UBIN;
     2733    10739    3   DCL SINK$ PTR;
     2734    10740
     2735    10741
     2736    10742
     2737    10743    4           IF CMD$STREAM.TYPE# = %CS_ME THEN DO;
     2738    10744    4              CALL VDI$CEND_GLOBAL;    /* Never returns!!! */
     2739    10745    4              END;
     2740    10746    3           ELSE IF CMD$STREAM.TYPE# = %CS_FILE
     2741    10747    4                OR CMD$STREAM.TYPE# = %CS_DCB THEN DO;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:273  
     2742    10748    4                 CALL VDI$PREAD_FILE_CLOSE
     2743    10749    4                   ALTRET (PREAD_FILE_CLOSE_FAILED);
     2744    10750    4                 END;
     2745    10751    3           CALL VDG$OFREE (CMD$STREAM)
     2746    10752    3             ALTRET (OFREE_FAILED);
     2747    10753
     2748    10754    4           IF VD_6E.CMD_STREAM$ = ADDR(NIL) THEN DO;
     2749    10755    4              CALL VDG$OALLOC (%CLS_CMD_STREAM, SINK$)
     2750    10756    4                ALTRET (OALLOC_FAILED);
     2751    10757    4              CMD$STREAM.TYPE# = %CS_ME;
     2752    10758    4              END;
     2753    10759
     2754    10760    3           IF CMD$STREAM.TYPE# = %CS_FILE
     2755    10761    4             OR CMD$STREAM.TYPE# = %CS_DCB THEN DO;
     2756    10762    4              CALL VDI$PREAD_FILE_CLOSE
     2757    10763    4                ALTRET (PREAD_FILE_CLOSE_FAILED);
     2758    10764    4              CALL VDI$PREAD_FILE_OPEN
     2759    10765    4                ALTRET (PREAD_FILE_OPEN_FAILED);
     2760    10766    4              CALL VDI$PREAD_FILE_POSITION
     2761    10767    4                ALTRET (PREAD_FILE_POSITION_FAILED);
     2762    10768
     2763    10769    4              END;
     2764    10770
     2765    10771    3           RETURN;
     2766    10772
     2767    10773
     2768    10774
     2769    10775    3   PREAD_FILE_POSITION_FAILED:
     2770    10776    3           CALL VDI$PREAD_FILE_CLOSE;
     2771    10777    3           ALTRETURN;
     2772    10778
     2773    10779
     2774    10780    3   PREAD_FILE_CLOSE_FAILED: ;
     2775    10781    3   OFREE_FAILED: ;
     2776    10782    3   OALLOC_FAILED: ;
     2777    10783    3   PREAD_FILE_OPEN_FAILED: ;
     2778    10784    3           ALTRETURN;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:274  
     2779    10785
     2780    10786    3   END POP_STACK_AND_POSTN;
     2781    10787
     2782    10788    2   END READ_COMMAND_RECORD;
     2783    10789
     2784    10790
     2785    10791                %BOX (TITLE="FIND_TOKEN and FIND_FID", PAGE=YES);
             10799    2
             10803    2   /***************************************************************************
             10805    2    *                                                                         *
             10809    2            *                          FIND_TOKEN and FIND_FID                        *
             10811    2            *                                                                         *
             10813    2           ***************************************************************************/

     2786    10817
     2787    10818        /*I* NAME: FIND_TOKEN and FIND_FID
     2788    10819            PARAMETERS:
     2789    10820                SCAN_INDEX - Index into CMD$RECORD.BYTES of next char to scan
     2790    10821                    for token.
     2791    10822                TOKEN - Unintialized VD$TEXTC_REMOTE with MXNB = %MXNB_NAME_VALUE.
     2792    10823            INPUT:
     2793    10824                CMD$RECORD - VD$BUFFER containing the command record.
     2794    10825                D$STRING - Based VD$BUFFER containing the current string
     2795    10826                    which is used to delimit string literals (that is,
     2796    10827                    the value of the $STRING predefined name).
     2797    10828            OUTPUT:
     2798    10829                If we don't find any more tokens/fids in the command record:
     2799    10830                    SCAN_INDEX will contain CMD$RECORD.LENGTH#.
     2800    10831                    TOKEN.LENGTH# will be 0.
     2801    10832                If we do find another token/fid in the command record:
     2802    10833                    SCAN_INDEX will contain the index into CMD$RECORD.BYTES
     2803    10834                        of the found token/fid.
     2804    10835                    TOKEN.LENGTH# will contain the length of the found token/fid.
     2805    10836                    TOKEN.BYTES will contain the found token/fid.
     2806    10837            DESCRIPTION:
     2807    10838                Starting at SCAN_INDEX, scan CMD$RECORD.BYTES for the next
     2808    10839                    non-literal token or for the next fid.
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:275  
     2809    10840                If we find a literal number or string, skip it.
     2810    10841                If we find a comment, skip it.
     2811    10842                If we don't find any more non-literal tokens or fids in
     2812    10843                    CMD$RECORD.BYTES, return with SCAN_INDEX pointing to the
     2813    10844                    end of CMD$RECORD.BYTES.
     2814    10845        */
     2815    10846
     2816    10847    1   FIND_TOKEN: PROC (SCAN_INDEX, TOKEN) ALTRET;
     2817    10848    2   DCL SCAN_INDEX UBIN;
     2818    10849        %VD_TEXTC_REMOTE (NAME=TOKEN, STCLASS=PARAM, MXNB=%MXNB_NAME_VALUE);
     2819    10912
     2820    10913
     2821    10914    2   DCL 1 XLATE_FID_CHAR_CLASS ALIGNED CONSTANT,
     2822    10915    2         2 * (0:511) UBIN BYTE CALIGNED INIT(
     2823    10916    2       %CCL_WHSP * %ASCBIN(CHR_SPACE),                 /* 000 - 037 */
     2824    10917    2       %CCL_WHSP, %CCL_RES, %CCL_RES, %CCL_NAME,       /* 040 - 043 */
     2825    10918    2       %CCL_NAME, %CCL_RES, %CCL_RES, %CCL_RES,        /* 044 - 047 */
     2826    10919    2       %CCL_RES, %CCL_RES, %CCL_NAME, %CCL_RES,        /* 050 - 053 */
     2827    10920    2       %CCL_RES, %CCL_NAME, %CCL_NAME, %CCL_NAME,      /* 054 - 057 */
     2828    10921    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 060 - 063 */
     2829    10922    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 064 - 067 */
     2830    10923    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_RES,      /* 070 - 073 */
     2831    10924    2       %CCL_RES, %CCL_RES, %CCL_RES, %CCL_NAME,        /* 074 - 077 */
     2832    10925    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 100 - 103 */
     2833    10926    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 104 - 107 */
     2834    10927    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 110 - 113 */
     2835    10928    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 114 - 117 */
     2836    10929    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 120 - 123 */
     2837    10930    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 124 - 127 */
     2838    10931    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_RES,      /* 130 - 133 */
     2839    10932    2       %CCL_RES, %CCL_RES, %CCL_RES, %CCL_NAME,        /* 134 - 137 */
     2840    10933    2       %CCL_RES, %CCL_NAME, %CCL_NAME, %CCL_NAME,      /* 140 - 143 */
     2841    10934    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 144 - 147 */
     2842    10935    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 150 - 153 */
     2843    10936    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 154 - 157 */
     2844    10937    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 160 - 163 */
     2845    10938    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 164 - 167 */
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:276  
     2846    10939    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_RES,      /* 170 - 173 */
     2847    10940    2       %CCL_RES, %CCL_RES, %CCL_RES, %CCL_WHSP,        /* 174 - 177 */
     2848    10941    2       %CCL_WHSP*0);                                   /* 200 - 777 */
     2849    10942
     2850    10943
     2851    10944
     2852    10945    2   DCL CLASS UBIN;
     2853    10946    2   DCL CLASS_TABLE$ PTR;
     2854    10947
     2855    10948
     2856    10949    2   DCL 1 CLASS$TABLE ALIGNED BASED(CLASS_TABLE$),
     2857    10950    2         2 C (0:0) UBIN BYTE CALIGNED;
     2858    10951
     2859    10952
     2860    10953
     2861    10954    2           CLASS_TABLE$ = ADDR(VD_XLATE_CHAR_CLASS);
     2862    10955    2           GOTO COMMON_ENTRY;
     2863    10956
     2864    10957
     2865    10958    2   FIND_FID: ENTRY (SCAN_INDEX, TOKEN) ALTRET;
     2866    10959    2           CLASS_TABLE$ = ADDR(XLATE_FID_CHAR_CLASS);
     2867    10960
     2868    10961
     2869    10962    2   COMMON_ENTRY:
     2870    10963    2           TOKEN.LENGTH# = 0;
     2871    10964
     2872    10965    2   LOOK_FOR_RETURNABLE_TOKEN:
     2873    10966    3           DO WHILE (SCAN_INDEX < CMD$RECORD.LENGTH#);
     2874    10967    3              IF SCAN_INDEX <= (CMD$RECORD.LENGTH# - D$STRING.LENGTH#)
     2875    10968    3                AND SUBSTR(CMD$RECORD.BYTES, SCAN_INDEX, D$STRING.LENGTH#) =
     2876    10969    4                D$STRING.BYTES THEN DO;
     2877    10970    4                 CALL SKIP_STRING_LITERAL (SCAN_INDEX)
     2878    10971    4                   ALTRET (SKIP_STRING_LITERAL_FAILED);
     2879    10972    4                 END;
     2880    10973    3              ELSE IF VD$COMMENT.LENGTH# > 0
     2881    10974    3                   AND SCAN_INDEX <= (CMD$RECORD.LENGTH# - VD$COMMENT.LENGTH#)
     2882    10975    3                   AND SUBSTR(CMD$RECORD.BYTES, SCAN_INDEX, VD$COMMENT.LENGTH#) =
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:277  
     2883    10976    4                   VD$COMMENT.BYTES THEN DO;
     2884    10977    4                    CALL INDEX (SCAN_INDEX, VD$COMMENT.BYTES,
     2885    10978    4                      CMD$RECORD.BYTES, SCAN_INDEX + VD$COMMENT.LENGTH#);
     2886    10979    4                    SCAN_INDEX = SCAN_INDEX + VD$COMMENT.LENGTH#;
     2887    10980    4                    END;
     2888    10981    4                 ELSE DO;
     2889    10982    4                    CLASS = CLASS$TABLE.C
     2890    10983    4                      (ASCBIN (SUBSTR (CMD$RECORD.BYTES, SCAN_INDEX, 1)));
     2891    10984
     2892    10985    5                    DO CASE (CLASS);
     2893    10986
     2894    10987    5                     CASE (%CCL_NUM, %CCL_DOT);
     2895    10988    5                       SCAN_INDEX = SCAN_INDEX + 1;
     2896    10989    6                       DO WHILE (SCAN_INDEX < CMD$RECORD.LENGTH#)
     2897    10990    6                         AND (CLASS = %CCL_NUM OR CLASS = %CCL_DOT);
     2898    10991    6                          CLASS = CLASS$TABLE.C
     2899    10992    6                            (ASCBIN (SUBSTR (CMD$RECORD.BYTES, SCAN_INDEX, 1)));
     2900    10993    6                          IF CLASS = %CCL_NUM OR CLASS = %CCL_DOT THEN
     2901    10994    6                             SCAN_INDEX = SCAN_INDEX + 1;
     2902    10995    6                          END;
     2903    10996
     2904    10997    5                     CASE (%CCL_WHSP, %CCL_RES);
     2905    10998    5                       SCAN_INDEX = SCAN_INDEX + 1;
     2906    10999
     2907    11000    5                     CASE (%CCL_SPEC);
     2908    11001    5                       TOKEN.LENGTH# = 1;
     2909    11002    6                       DO WHILE (SCAN_INDEX + TOKEN.LENGTH# < CMD$RECORD.LENGTH#)
     2910    11003    6                         AND (CLASS = %CCL_SPEC);
     2911    11004    6                          CLASS = CLASS$TABLE.C (ASCBIN
     2912    11005    6                            (SUBSTR(CMD$RECORD.BYTES, SCAN_INDEX + TOKEN.LENGTH#,
     2913    11006    6                            1)));
     2914    11007    6                          IF CLASS = %CCL_SPEC THEN
     2915    11008    6                             TOKEN.LENGTH# = TOKEN.LENGTH# + 1;
     2916    11009    6                          END;
     2917    11010    5                       TOKEN.BYTES = SUBSTR(CMD$RECORD.BYTES, SCAN_INDEX,
     2918    11011    5                         TOKEN.LENGTH#);
     2919    11012    5                       RETURN;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:278  
     2920    11013
     2921    11014    5                     CASE (%CCL_NAME);
     2922    11015    5                       TOKEN.LENGTH# = 1;
     2923    11016    6                       DO WHILE (SCAN_INDEX + TOKEN.LENGTH# < CMD$RECORD.LENGTH#)
     2924    11017    6                         AND (CLASS = %CCL_NAME OR CLASS = %CCL_NUM);
     2925    11018    6                          CLASS = CLASS$TABLE.C (ASCBIN(SUBSTR
     2926    11019    6                            (CMD$RECORD.BYTES, SCAN_INDEX + TOKEN.LENGTH#, 1)));
     2927    11020    6                          IF CLASS = %CCL_NAME OR CLASS = %CCL_NUM THEN
     2928    11021    6                             TOKEN.LENGTH# = TOKEN.LENGTH# + 1;
     2929    11022    6                          END;
     2930    11023    5                       TOKEN.BYTES = SUBSTR(CMD$RECORD.BYTES, SCAN_INDEX,
     2931    11024    5                         TOKEN.LENGTH#);
     2932    11025    5                       RETURN;
     2933    11026
     2934    11027    5                     CASE (ELSE);
     2935    11028    5                       CALL VDG$ESCREECH (CLASS, SCAN_INDEX);
     2936    11029
     2937    11030    5                     END;
     2938    11031    4                    END;
     2939    11032    3              END LOOK_FOR_RETURNABLE_TOKEN;
     2940    11033
     2941    11034    2           RETURN;
     2942    11035
     2943    11036
     2944    11037
     2945    11038    2   SKIP_STRING_LITERAL_FAILED: ;
     2946    11039    2           ALTRETURN;
     2947    11040
     2948    11041    2   END FIND_TOKEN;
     2949    11042
     2950    11043
     2951    11044                %BOX (TITLE="REPLACE_STRING_AND_SKIP", PAGE=YES);
             11052    2
             11056    2   /***************************************************************************
             11058    2    *                                                                         *
             11062    2            *                          REPLACE_STRING_AND_SKIP                        *
             11064    2            *                                                                         *
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:279  
             11066    2           ***************************************************************************/

     2952    11070
     2953    11071        /*I* NAME: REPLACE_STRING_AND_SKIP
     2954    11072            PARAMETERS:
     2955    11073                STR_INDEX - Index into CMD$RECORD.BYTES of string to replace.
     2956    11074                STR_LN - Length of string in CMD$RECORD.BYTES to replace.  STR_LN
     2957    11075                    is a UBIN BYTE CALIGNED field!!!!
     2958    11076                REPL - VD$BUFFER containing the synonym value which is to
     2959    11077                    replace the chars at STR_INDEX.
     2960    11078            INPUT:
     2961    11079                CMD$RECORD - VD$BUFFER containing the command record so far.
     2962    11080                CMD_RECORD$ - Ptr on which CMD$RECORD is based.  Must be
     2963    11081                    equal to CMD$STREAM.RECORD$.
     2964    11082                CMD$STREAM - Top VD$CMD_STREAM on stack.
     2965    11083            OUTPUT:
     2966    11084                STR_LN chars at STR_INDEX in CMD$RECORD.BYTES may be replaced with
     2967    11085                    the VALUE.BYTES chars, possibly surrounded by spaces.
     2968    11086                STR_INDEX will be incremented so that it points just beyond
     2969    11087                    the replacement string in CMD$RECORD.BYTES.
     2970    11088                CMD$RECORD will be modified to describe the new command record,
     2971    11089                    which may have been moved from its old location.
     2972    11090                CMD_RECORD$ and CMD$STREAM.RECORD$ may be changed, if CMD$RECORD
     2973    11091                    is moved.
     2974    11092            SCRATCH (no input value, no output value):
     2975    11093                VD_STATIC_TEMP - A scratch buffer for moving strings in a command
     2976    11094                    record.
     2977    11095            DESCRIPTION:
     2978    11096                If the new string will fit in the space allocated for the
     2979    11097                command record, do the replacement in place; otherwise,
     2980    11098                allocate new storage for the command record, do the replacement
     2981    11099                as we copy to the new storage, adjust CMD$STREAM.RECORD$ to
     2982    11100                point to the new VD$BUFFER, and free the old VD$BUFFER.
     2983    11101        */
     2984    11102
     2985    11103    1   REPLACE_STRING_AND_SKIP: PROC (STR_INDEX, STR_LN, REPL) ALTRET;
     2986    11104    2   DCL STR_INDEX UBIN;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:280  
     2987    11105    2   DCL STR_LN UBIN BYTE CALIGNED;
     2988    11106        %VD$BUFFER (NAME=REPL, STCLASS=PARAM);
     2989    11164
     2990    11165
     2991    11166
     2992    11167    2   DCL LEFT_LN UBIN;
     2993    11168    2   DCL RIGHT_INDEX UBIN;
     2994    11169    2   DCL RIGHT_LN UBIN;
     2995    11170    2   DCL NEW_RECORD_LN UBIN;
     2996    11171    2   DCL NEW_RECORD$ PTR;
     2997    11172    2   DCL N UBIN;
     2998    11173
     2999    11174
     3000    11175        %VD$BUFFER (NAME=NEW$RECORD, STCLASS="BASED(NEW_RECORD$)");
     3001    11233
     3002    11234
     3003    11235
     3004    11236    2           LEFT_LN = STR_INDEX;
     3005    11237    2           RIGHT_INDEX = STR_INDEX + STR_LN;
     3006    11238    2           RIGHT_LN = CMD$RECORD.LENGTH# - RIGHT_INDEX;
     3007    11239    2           NEW_RECORD_LN = LEFT_LN + REPL.LENGTH# + 1 + RIGHT_LN;
     3008    11240    2           IF RIGHT_LN > 0 THEN
     3009    11241    2              NEW_RECORD_LN = NEW_RECORD_LN + 1;
     3010    11242    2           IF NEW_RECORD_LN > NB_BUF THEN
     3011    11243    2              GOTO SYND_RECORD_TOO_LONG_FAILURE;
     3012    11244    2           IF NEW_RECORD_LN > ((CMD$RECORD.OBJECT.SIZE# * %NB_PER_WORD) -
     3013    11245    3             LENGTHC(VD$BUFFER_HEADER)) THEN DO;
     3014    11246                   /*
     3015    11247                   *    Replacement text is longer than the text it's replacing,
     3016    11248                   *        and current CMD$RECORD doesn't have enough storage
     3017    11249                   *        allocated for it to hold the new cmd-line length.
     3018    11250                   */
     3019    11251    3              CALL VDG$OALLOC (%CLS_BUFFER, NEW_RECORD$, SIZEW(VD$BUFFER_HEADER) +
     3020    11252    3                (NEW_RECORD_LN + %(NB_PER_WORD-1)) / %NB_PER_WORD)
     3021    11253    3                ALTRET (OALLOC_FAILED);
     3022    11254    3              NEW$RECORD.LENGTH# = NEW_RECORD_LN;
     3023    11255    3              CALL CONCAT (NEW$RECORD.BYTES,
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:281  
     3024    11256    3                SUBSTR(CMD$RECORD.BYTES, 0, LEFT_LN),
     3025    11257    3                %CHR_SPACE, REPL.BYTES)
     3026    11258    4              WHENALTRETURN DO; CALL VDG$ESCREECH; END;
     3027    11259    3              IF RIGHT_LN > 0 THEN
     3028    11260    3                 CALL INSERT (NEW$RECORD.BYTES, LEFT_LN + 1 + REPL.LENGTH#,
     3029    11261    3                   RIGHT_LN + 1, %CHR_SPACE,
     3030    11262    3                   SUBSTR(CMD$RECORD.BYTES, RIGHT_INDEX, RIGHT_LN))
     3031    11263    4                 WHENALTRETURN DO; CALL VDG$ESCREECH; END;
     3032    11264    3              NEW$RECORD.FLINK$ = CMD$RECORD.FLINK$;
     3033    11265    3              CMD$RECORD.FLINK$ = ADDR(NIL);
     3034    11266    3              CALL VDG$OFREE (CMD$RECORD)
     3035    11267    3                ALTRET (OFREE_FAILED);
     3036    11268    3              CMD_RECORD$ = NEW_RECORD$;
     3037    11269    3              CMD$STREAM.RECORD$ = NEW_RECORD$;
     3038    11270    3              END;
     3039    11271    3           ELSE DO;
     3040    11272                   /*
     3041    11273                   *    Either the replacement text is shorter than the text
     3042    11274                   *        it's replacing,
     3043    11275                   *    or CMD$RECORD has enough storage allocated for it to
     3044    11276                   *        hold the new cmd-line length.
     3045    11277                   */
     3046    11278    3              IF RIGHT_LN > 0 THEN
     3047    11279    3                 CALL INSERT (VD_STATIC_TEMP, 0, RIGHT_LN,
     3048    11280    3                   SUBSTR(CMD$RECORD.BYTES, RIGHT_INDEX, RIGHT_LN))
     3049    11281    4                 WHENALTRETURN DO; CALL VDG$ESCREECH; END;
     3050    11282    3              CMD$RECORD.LENGTH# = NEW_RECORD_LN;
     3051    11283    3              CALL INSERT (CMD$RECORD.BYTES, LEFT_LN, REPL.LENGTH# + 1,
     3052    11284    3                %CHR_SPACE, REPL.BYTES)
     3053    11285    4              WHENALTRETURN DO; CALL VDG$ESCREECH; END;
     3054    11286    3              IF RIGHT_LN > 0 THEN
     3055    11287    3                 CALL INSERT (CMD$RECORD.BYTES, LEFT_LN + 1 + REPL.LENGTH#,
     3056    11288    3                   RIGHT_LN + 1, %CHR_SPACE,
     3057    11289    3                   SUBSTR(VD_STATIC_TEMP, 0, RIGHT_LN))
     3058    11290    4                 WHENALTRETURN DO; CALL VDG$ESCREECH; END;
     3059    11291    3              END;
     3060    11292
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:282  
     3061    11293                /* Skip STR_INDEX over the replacement text */
     3062    11294    2           STR_INDEX = STR_INDEX + 1 + REPL.LENGTH#;
     3063    11295    2           IF RIGHT_LN > 0 THEN
     3064    11296    2              STR_INDEX = STR_INDEX + 1;
     3065    11297
     3066    11298    2           RETURN;
     3067    11299
     3068    11300
     3069    11301    2   SYND_RECORD_TOO_LONG_FAILURE:
     3070    11302    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     3071    11303    2             ALTRET (OALLOC_FAILED);
     3072    11304    2           VD$ERR.ERR.CODE# = %E$SYND_RECORD_TOO_LONG;
     3073    11305    2           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     3074    11306    2           ALTRETURN;
     3075    11307
     3076    11308
     3077    11309    2   OALLOC_FAILED: ;
     3078    11310    2   OFREE_FAILED: ;
     3079    11311    2           ALTRETURN;
     3080    11312
     3081    11313    2   END REPLACE_STRING_AND_SKIP;
     3082    11314
     3083    11315
     3084    11316                %BOX (TITLE="SKIP_STRING_LITERAL", PAGE=YES);
             11324    2
             11328    2   /***************************************************************************
             11330    2    *                                                                         *
             11334    2            *                            SKIP_STRING_LITERAL                          *
             11336    2            *                                                                         *
             11338    2           ***************************************************************************/

     3085    11342
     3086    11343        /*I* NAME: SKIP_STRING_LITERAL
     3087    11344            PARAMETERS:
     3088    11345                LIT_INDEX - Index into CMD$RECORD.BYTES of string literal delimiter.
     3089    11346            INPUT:
     3090    11347                CMD$RECORD - VD$BUFFER containing the command record being processed.
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:283  
     3091    11348            OUTPUT:
     3092    11349                LIT_INDEX will contain the index into CMD$RECORD.BYTES of the next
     3093    11350                    char to scan, ie, the char after the ending string
     3094    11351                    literal delimiter.
     3095    11352            DESCRIPTION:
     3096    11353                Scan LIT_INDEX over a string literal.
     3097    11354        */
     3098    11355
     3099    11356    1   SKIP_STRING_LITERAL: PROC (LIT_INDEX) ALTRET;
     3100    11357    2   DCL LIT_INDEX UBIN;
     3101    11358
     3102    11359
     3103    11360
     3104    11361    2   DCL DELIM_INDEX UBIN;
     3105    11362    2   DCL ORIGINAL_INDEX UBIN;
     3106    11363
     3107    11364
     3108    11365
     3109    11366    2           ORIGINAL_INDEX = LIT_INDEX;
     3110    11367
     3111    11368    2   FIND_END_OF_STRING:
     3112    11369    3           DO WHILE (LIT_INDEX + D$STRING.LENGTH# <= CMD$RECORD.LENGTH#)
     3113    11370    3             AND (SUBSTR(CMD$RECORD.BYTES, LIT_INDEX, D$STRING.LENGTH#) =
     3114    11371    3             D$STRING.BYTES);
     3115    11372    3              LIT_INDEX = LIT_INDEX + D$STRING.LENGTH#;
     3116    11373    3              CALL INDEX (DELIM_INDEX, D$STRING.BYTES, CMD$RECORD.BYTES,
     3117    11374    3                LIT_INDEX)
     3118    11375    3                ALTRET (UNBAL_STRING_FAILURE);
     3119    11376    3              LIT_INDEX = DELIM_INDEX + D$STRING.LENGTH#;
     3120    11377    3              END FIND_END_OF_STRING;
     3121    11378
     3122    11379    2           RETURN;
     3123    11380
     3124    11381
     3125    11382
     3126    11383    2   UNBAL_STRING_FAILURE:
     3127    11384    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:284  
     3128    11385    2             ALTRET (OALLOC_FAILED);
     3129    11386    2           VD$ERR.ERR.CODE# = %E$UNBAL_STRING;
     3130    11387    2           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     3131    11388                /*
     3132    11389                *   We can't give XUG$ERRPTR a CMDLINE_INDEX, 'cause we haven't given
     3133    11390                *       XUG$GETCMD this command!
     3134    11391                *   (((Test case:  With !DONT POINT, say CO ST 'ABC AF 6 )))
     3135    11392                */
     3136    11393    2           VD$ERR.CMDLINE_INDEX# = ORIGINAL_INDEX; /* might as well try? */
     3137    11394    2           ALTRETURN;
     3138    11395
     3139    11396
     3140    11397    2   OALLOC_FAILED: ;
     3141    11398    2           ALTRETURN;
     3142    11399
     3143    11400    2   END SKIP_STRING_LITERAL;
     3144    11401
     3145    11402    1   END VDI$PGET_COMMAND_RECORD;
     3146    11403        %EOD;

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:285  
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   B$JIT.:LIBRARY  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIBRARY  is referenced.
   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDI$PGET_COMMAND_RECORD.

   Procedure VDI$PGET_COMMAND_RECORD requires 1460 words for executable code.
   Procedure VDI$PGET_COMMAND_RECORD requires 176 words of local(AUTO) storage.

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:286  

 Object Unit name= VDI$PGET_COMMAND_RECORD                    File name= VDI$PARSE.:VDA5TOU
 UTS= JUL 04 '97 11:34:26.96 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS    140    214  VDI$PGET_COMMAND_RECORD
    2   Data  even  none    40     50  VDI$PGET_COMMAND_RECORD
    3   Proc  even  none  1460   2664  VDI$PGET_COMMAND_RECORD
    4  RoData even  none    16     20  VDI$PGET_COMMAND_RECORD

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        5  VDI$PGET_COMMAND_RECORD
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:287  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       4 VDA$LREAD
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       2 VDI$PREAD_FILE_READ
 yes     yes           Std       1 VDW$LOAD
 yes     yes           Std       0 VDI$PREAD_FILE_CLOSE
 yes     yes           Std       0 VDG$ERASE_COMMAND_WINDOW
 yes     yes           Std       0 VDI$CEND_GLOBAL
 yes     yes           Std       0 VDI$PREAD_FILE_OPEN
 yes     yes           Std       0 VDI$PREAD_FILE_POSITION
 yes     yes           Std       5 VDI$PGET_COMMAND_RECORD
                       nStd      0 X66_AUTO_5
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
                       nStd      0 X66_INDEX

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VD_6E                                 VD_$COMMENT
     VD_ASYM                               VD_LAST_CWIN_ACTIVITY                 VD_FORCE_READ_FROM
r    B$XL_UPPER$                           VD_XLATE_CHAR_CLASS                   VD_STATIC_TEMP
     VD_CMD_OBJECTS$                       XUG_GETCMD                            B$JIT$
     B$TCB$                                B_VECTNIL
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:288  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:289  


     1926        1        /*T***********************************************************/
     1927        2        /*T*                                                         */
     1928        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1929        4        /*T*                                                         */
     1930        5        /*T***********************************************************/
     1931        6
     1932        7        /*D* NAME: VDI$PGET_COMMAND_RECORD
     1933        8            PARAMETERS:
     1934        9                BUF_ - Vector framing buffer to return record in.
     1935       10                ARS - Uninitialized UBIN word.
     1936       11                NEXT_RECORD$$ - Uninitialized EPTR.
     1937       12                ERRCODE - Uninitialized word.
     1938       13                EOMCHAR - Uninitialized character.
     1939       14            INPUT:
     1940       15                XUG_GETCMD - Control block for XUG$GETCMD.
     1941       16                XUG_INIT - Control block for XUG$GETCMD.
     1942       17                VD_6E.CMD_STREAM$ must point to the VD$CMD_STREAM for the
     1943       18                    current command stream (top entry on stack of same).
     1944       19                VD_$COMMENT:  VD$BUFFER for $COMMENT predefined name.
     1945       20                    Value's length may be 0.
     1946       21                VD_CMD_OBJECTS$ - Array of pointers to otherwise-unowned
     1947       22                    dynamic objects.
     1948       23            OUTPUT:
     1949       24                BUF_'s buffer will contain the record read.
     1950       25                ARS will contain the number of characters in the record.
     1951       26                NEXT_RECORD$$ will contain the entry address of the routine
     1952       27                    which XUG$GETCMD is to call to read the next record.
     1953       28                    This will always be VDI$PGET_COMMAND_RECORD.
     1954       29                ERRCODE will contain either %CLEAR, or a 6Edit error code.
     1955       30                EOMCHAR will contain either %EOM_EOR#, or the activation char.
     1956       31                CMD$STREAM (top VD$CMD_STREAM) will describe the record read:
     1957       32                    .INTREE$ may point to an InTree (chain of VD$IT_COMMAND nodes)
     1958       33                        for the command to process.  If .INTREE$ = NIL, then the
     1959       34                        command line only appears in .RECORD$ below.
     1960       35                    .RECORD$ may point to a VD$BUFFER containing just what
     1961       36                        we returned to GETCMD in BUF and ARS.  If .RECORD$ = NIL
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:290  
     1962       37                        or has a .LENGTH# of 0, then the command line may appear
     1963       38                        in InTree form pointed-to by .INTREE$.
     1964       39                    If we hit the end of a READ-file, we'll pop the stack
     1965       40                    of VD$CMD_STREAMs.  (The bottom entry on the stack
     1966       41                    should be for the terminal, and so will never get EOF.)
     1967       42                VD_CMD_OBJECTS$ will be all NIL:  any objects it pointed to
     1968       43                    will be freed.
     1969       44            DESCRIPTION:
     1970       45                Run thru VD_CMD_OBJECTS$ and free any objects it points to.
     1971       46                    This array is used as the "owner" of otherwise orphaned
     1972       47                    dynamic objects.  (For example, storage allocated by
     1973       48                    VDE$PFUNCTION for X$EVAL.)  Someone has to free this
     1974       49                    storage at a suitable time.  The time is now, and we are us!
     1975       50                Call READ_COMMAND_RECORD to get a record from the current command
     1976       51                    stream.  If the current command stream is a workspace
     1977       52                    file, we'll load it (except we won't load windows),
     1978       53                    then pop the command stream and read from the new
     1979       54                    "current" command stream.
     1980       55                    If EOF is hit, READ_COMMAND_RECORD will pop the
     1981       56                    command-stream stack and continue reading from the
     1982       57                    previous command stream.
     1983       58                If the record just read is actually an InTree, return an empty
     1984       59                    buffer to XUG$GETCMD.
     1985       60        *N*     Find and perform all $CONTROL functions which are not in
     1986       61        *N*         string literals.
     1987       62                Replace any synonyms in the
     1988       63                    command record with the synonyms' value, surrounded by
     1989       64                    space characters (unless there are already spaces
     1990       65                    surrounding the synonym).
     1991       66        */
     1992       67
     1993       68        VDI$PGET_COMMAND_RECORD: PROC

     68  3 000000   000000 700200 xent  VDI$PGET_CO* TSX0  ! X66_AUTO_5
         3 000001   000260 000005                    ZERO    176,5

     1994       69                  (BUF_, ARS, NEXT_RECORD$$, ERRCODE, EOMCHAR) ALTRET;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:291  
     1995       70
     1996       71
     1997       72        %INCLUDE VD_MACROS_M;
     1998     2287        %INCLUDE VD_PERR_C;
     1999     2435        %INCLUDE XU_MACRO_C;
     2000     5529        %INCLUDE CP_6;
     2001     5610        %INCLUDE CP_6_SUBS;
     2002     6150        %INCLUDE B_ERRORS_C;
     2003     7276        %INCLUDE B$JIT;
     2004     7566        %INCLUDE B$TABLES_C;
     2005     7674
     2006     7675
     2007     7676    1   DCL BUF_ VECTOR;
     2008     7677    1   DCL ARS SBIN;
     2009     7678    1   DCL NEXT_RECORD$$ EPTR;
     2010     7679        %VD$ERR_CODE (NAME=ERRCODE, STCLASS=PARAM);
     2011     7694    1   DCL EOMCHAR CHAR(1);
     2012     7695
     2013     7696
     2014     7697
     2015     7698    1   DCL VDA$LREAD               ENTRY (4) ALTRET;
     2016     7699    1   DCL VDI$PREAD_FILE_OPEN     ENTRY ALTRET;
     2017     7700    1   DCL VDI$PREAD_FILE_CLOSE    ENTRY ALTRET;
     2018     7701    1   DCL VDI$PREAD_FILE_POSITION ENTRY ALTRET;
     2019     7702    1   DCL VDI$PREAD_FILE_READ     ENTRY (2) ALTRET;
     2020     7703    1   DCL VDW$LOAD                ENTRY (1) ALTRET;
     2021     7704    1   DCL VDG$ERASE_COMMAND_WINDOW ENTRY ALTRET;
     2022     7705    1   DCL VDG$OALLOC              ENTRY (3) ALTRET;
     2023     7706    1   DCL VDG$OFREE               ENTRY (1) ALTRET;
     2024     7707    1   DCL VDG$ESCREECH            ENTRY (3);
     2025     7708    1   DCL VDI$CEND_GLOBAL         ENTRY ALTRET;
     2026     7709
     2027     7710
     2028     7711        %VD_6E (STCLASS=SYMREF);
     2029     7747        %VD_BUFFER (NAME=VD_$COMMENT, STCLASS=SYMREF, MXNB=%MXNB_$COMMENT);
     2030     7807    1   DCL VD_ASYM UBIN SYMREF;
     2031     7808    1   DCL VD_LAST_CWIN_ACTIVITY UBIN SYMREF;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:292  
     2032     7809    1   DCL VD_FORCE_READ_FROM UBIN SYMREF;
     2033     7810        %B$XL_UPPER;
     2034     7814    1   DCL VD_XLATE_CHAR_CLASS CHAR(512) ALIGNED SYMREF;
     2035     7815    1   DCL VD_STATIC_TEMP CHAR(%NB_STATIC_TEMP) ALIGNED SYMREF;
     2036     7816    1   DCL VD_CMD_OBJECTS$ (0:%(MX_CMD_OBJECTS-1)) PTR SYMREF;
     2037     7817        %XUG_GETCMD (NAME=XUG_GETCMD, STCLASS=SYMREF);
     2038     8155        %XUG_INIT (NAME=XUG_INIT, STCLASS=SYMREF);
     2039     8568    1   DCL B$JIT$ PTR SYMREF;
     2040     8569    1   DCL B$TCB$ PTR SYMREF;
     2041     8570
     2042     8571
     2043     8572    1   DCL PTR_$COMMENT$ PTR CONSTANT INIT(ADDR(VD_$COMMENT));
     2044     8573
     2045     8574        /*N* Someday, would be nice to allow different $STRING delimiters */
     2046     8575        %VD_BUFFER (NAME=D_$STRING, STCLASS=CONSTANT, IBYTES="''''");
     2047     8635    1   DCL PTR_$STRING$ PTR CONSTANT INIT(ADDR(D_$STRING));
     2048     8636
     2049     8637
     2050     8638    1   DCL BUF$ PTR;
     2051     8639    1   DCL NB_BUF SBIN;
     2052     8640    1   DCL CMD_RECORD$ PTR;
     2053     8641    1   DCL SCAN_INDEX UBIN;
     2054     8642        %VD$LOCATION (NAME=SYNONYM_LOC, STCLASS=AUTO);
     2055     8670        %VD_TEXTC_REMOTE (NAME=TOKEN, STCLASS=AUTO, MXNB=%MXNB_NAME_VALUE);
     2056     8733    1   DCL SY_KEY$ PTR;
     2057     8734    1   DCL N UBIN;
     2058     8735    1   DCL VD_ERR$ PTR;
     2059     8736
     2060     8737
     2061     8738    1   DCL BUF CHAR(NB_BUF) BASED(BUF$);
     2062     8739        %VD$CMD_STREAM (NAME=CMD$STREAM, STCLASS="BASED(VD_6E.CMD_STREAM$)");
     2063     8778        %VD$BUFFER (NAME=CMD$RECORD, STCLASS="BASED(CMD_RECORD$)");
     2064     8836        %VD$TEXTC (NAME=SY$KEY, STCLASS="BASED(SY_KEY$)");
     2065     8859        %VD$BUFFER (NAME=VD$COMMENT, STCLASS="BASED(PTR_$COMMENT$)");
     2066     8917        %VD$BUFFER (NAME=D$STRING, STCLASS="BASED(PTR_$STRING$)");
     2067     8975        %VD$STREAM (NAME=SYNONYMS$STREAM, STCLASS="BASED(VD_6E.SYNONYMS$)");
     2068     9081        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:293  
     2069     9134        %VD$ERR (NAME=FATAL$ERR, STCLASS="BASED(VD_6E.ERR_HEAD$)");
     2070     9187        %B$TCB (NAME=B$TCB, STCLASS="BASED(B$TCB$)");
     2071     9190        %B$ALT;
     2072     9198        %VD$PORT;
     2073     9296        %VD$BUFFER;
     2074     9354        %VD$BUFFER_HEADER;
     2075     9390        %VD$OBJECT_HEADER;
     2076     9412        %VD$TEXTC_REMOTE;
     2077     9473
     2078     9474
     2079     9475
     2080     9476    1           BUF$ = VBASE(BUF_);

   9476  3 000002   200003 470500                    LDP0    @BUF_,,AUTO
         3 000003   000001 236100                    LDQ     1,,PR0
         3 000004   200010 756100                    STQ     BUF$,,AUTO

     2081     9477    1           NB_BUF = VBOUND(BUF_) + 1;

   9477  3 000005   000000 236100                    LDQ     0,,PR0
         3 000006   000020 772000                    QRL     16
         3 000007   000001 036007                    ADLQ    1,DL
         3 000010   200011 756100                    STQ     NB_BUF,,AUTO

     2082     9478    1           ARS = 0;

   9478  3 000011   200004 471500                    LDP1    @ARS,,AUTO
         3 000012   100000 450100                    STZ     0,,PR1

     2083     9479    1           NEXT_RECORD$$ = ENTADDR(VDI$PGET_COMMAND_RECORD);

   9479  3 000013   000000 636000 3                  EAQ     s:68
         3 000014   200005 473500                    LDP3    @NEXT_RECORD$$,,AUTO
         3 000015   300000 756100                    STQ     0,,PR3

     2084     9480    1           ERRCODE = %CLEAR;

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:294  
   9480  3 000016   200006 474500                    LDP4    @ERRCODE,,AUTO
         3 000017   400000 450100                    STZ     0,,PR4

     2085     9481    1           EOMCHAR = %EOM_EOR#;

   9481  3 000020   200007 475500                    LDP5    @EOMCHAR,,AUTO
         3 000021   040100 100400                    MLR     fill='040'O
         3 000022   000000 000001 4                  ADSC9   0                        cn=0,n=1
         3 000023   500000 000001                    ADSC9   0,,PR5                   cn=0,n=1

     2086     9482
     2087     9483    2           DO N = 0 TO %(MX_CMD_OBJECTS-1);

   9483  3 000024   200230 450100                    STZ     N,,AUTO

     2088     9484    3              IF VD_CMD_OBJECTS$ (N) ~= ADDR(NIL) THEN DO;

   9484  3 000025   200230 720100                    LXL0    N,,AUTO
         3 000026   000000 236010 xsym               LDQ     VD_CMD_OBJECTS$,X0
         3 000027   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000030   000042 600000 3                  TZE     s:9489

     2089     9485    3                 CALL VDG$OFREE (VD_CMD_OBJECTS$ (N) -> VD$OBJECT_HEADER)

   9485  3 000031   000000 470410 xsym               LDP0    VD_CMD_OBJECTS$,X0
         3 000032   200254 450500                    STP0    INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000033   200254 630500                    EPPR0   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000034   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000035   000000 701000 xent               TSX1    VDG$OFREE
         3 000036   000426 702000 3                  TSX2    READ_COMMAND_RECORD_FAILED

     2090     9486    3                   ALTRET (OFREE_FAILED);
     2091     9487    3                 VD_CMD_OBJECTS$ (N) = ADDR(NIL);

   9487  3 000037   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000040   200230 720100                    LXL0    N,,AUTO
         3 000041   000000 756010 xsym               STQ     VD_CMD_OBJECTS$,X0
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:295  

     2092     9488    3                 END;

     2093     9489    2              END;

   9489  3 000042   200230 235100                    LDA     N,,AUTO
         3 000043   000001 035007                    ADLA    1,DL
         3 000044   200230 755100                    STA     N,,AUTO
         3 000045   000062 115007                    CMPA    50,DL
         3 000046   000025 602000 3                  TNC     s:9484

     2094     9490
     2095     9491    1           CALL READ_COMMAND_RECORD

   9491  3 000047   000510 701000 3                  TSX1    READ_COMMAND_RECORD
         3 000050   000426 702000 3                  TSX2    READ_COMMAND_RECORD_FAILED

     2096     9492    1             ALTRET (READ_COMMAND_RECORD_FAILED);
     2097     9493
     2098     9494    1           IF CMD$STREAM.INTREE$ ~= ADDR(NIL) THEN

   9494  3 000051   000026 470400 xsym               LDP0    VD_6E+22
         3 000052   000026 236100                    LDQ     22,,PR0
         3 000053   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000054   000056 600000 3                  TZE     s:9496

     2099     9495    1              RETURN;      /* Return an empty buffer to XUG$GETCMD */

   9495  3 000055   000000 702200 xent               TSX2  ! X66_ARET

     2100     9496    1           CMD_RECORD$ = CMD$STREAM.RECORD$;

   9496  3 000056   000025 236100                    LDQ     21,,PR0
         3 000057   200012 756100                    STQ     CMD_RECORD$,,AUTO

     2101     9497    1           IF CMD$RECORD.LENGTH# = 0 THEN

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:296  
   9497  3 000060   200012 471500                    LDP1    CMD_RECORD$,,AUTO
         3 000061   100002 220100                    LDX0    2,,PR1
         3 000062   000064 601000 3                  TNZ     s:9500

     2102     9498    1              RETURN;             /* Empty command line:  just return */

   9498  3 000063   000000 702200 xent               TSX2  ! X66_ARET

     2103     9499
     2104     9500    2           IF CMD$STREAM.CMD_AFTER_READ THEN DO;

   9500  3 000064   000027 236100                    LDQ     23,,PR0
         3 000065   040000 316007                    CANQ    16384,DL
         3 000066   000121 600000 3                  TZE     s:9541

     2105     9501    2              CMD$STREAM.CMD_AFTER_READ = %FALSE;

   9501  3 000067   000001 236000 4                  LDQ     1
         3 000070   000027 356100                    ANSQ    23,,PR0

     2106     9502    3              IF CMD$RECORD.LENGTH# > NB_BUF THEN DO; /* no longer fits */

   9502  3 000071   100002 236100                    LDQ     2,,PR1
         3 000072   000022 732000                    QRS     18
         3 000073   200011 116100                    CMPQ    NB_BUF,,AUTO
         3 000074   000120 604400 3                  TMOZ    s:9510

     2107     9503    3                 CMD$RECORD.LENGTH# = NB_BUF;

   9503  3 000075   200011 720100                    LXL0    NB_BUF,,AUTO
         3 000076   100002 740100                    STX0    2,,PR1

     2108     9504    3                 CALL VDG$OALLOC (%CLS_ERR, VD_ERR$);

   9504  3 000077   200231 630500                    EPPR0   VD_ERR$,,AUTO
         3 000100   200255 450500                    STP0    INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 000101   000002 236000 4                  LDQ     2
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:297  
         3 000102   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000103   200254 630500                    EPPR0   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000104   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000105   000000 701000 xent               TSX1    VDG$OALLOC
         3 000106   000000 011000                    NOP     0

     2109     9505    3                 VD$ERR.ERR.CODE# = %E$READ_2BIG;

   9505  3 000107   200231 470500                    LDP0    VD_ERR$,,AUTO
         3 000110   000002 236100                    LDQ     2,,PR0
         3 000111   000003 376000 4                  ANQ     3
         3 000112   001400 276007                    ORQ     768,DL
         3 000113   000002 756100                    STQ     2,,PR0

     2110     9506    3                 VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   9506  3 000114   000003 220003                    LDX0    3,DU
         3 000115   200231 470500                    LDP0    VD_ERR$,,AUTO
         3 000116   000003 740100                    STX0    3,,PR0

     2111     9507    3                 GOTO READ_COMMAND_RECORD_FAILED;

   9507  3 000117   000426 710000 3                  TRA     READ_COMMAND_RECORD_FAILED

     2112     9508    3                 END;
     2113     9509
     2114     9510    2              GOTO RETURN_RECORD; /* Skip synonym substitution */

   9510  3 000120   000363 710000 3                  TRA     RETURN_RECORD

     2115     9511    2              END;
     2116     9512
     2117     9513
     2118     9514                %BOX (TITLE="Find and replace synonyms");

              9526    2   /***************************************************************************
              9528    2    *                                                                         *
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:298  
              9532    2            *                         Find and replace synonyms                      *
              9534    2            *                                                                        *
              9536    2          ***************************************************************************/

     2119     9540
     2120     9541    1           SYNONYM_LOC = %CLEAR;

   9541  3 000121   000100 100400                    MLR     fill='000'O
         3 000122   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         3 000123   200014 000044                    ADSC9   SYNONYM_LOC,,AUTO        cn=0,n=36

     2121     9542    1           SYNONYM_LOC.KEY.TYPE# (%(LVL_LOWER-1)) = %KT_STRING;

   9542  3 000124   000002 220003                    LDX0    2,DU
         3 000125   200014 740100                    STX0    SYNONYM_LOC,,AUTO

     2122     9543    1           SYNONYM_LOC.KEY.REP# (%(LVL_LOWER-1)) = %REP_REMOTE;

   9543  3 000126   200014 440100                    SXL0    SYNONYM_LOC,,AUTO

     2123     9544    1           SYNONYM_LOC.KEY.V$ (%(LVL_LOWER-1)) = ADDR(TOKEN);

   9544  3 000127   200025 633500                    EPPR3   TOKEN,,AUTO
         3 000130   200015 453500                    STP3    SYNONYM_LOC+1,,AUTO

     2124     9545    1           TOKEN = %CLEAR;

   9545  3 000131   000100 100400                    MLR     fill='000'O
         3 000132   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         3 000133   200025 001010                    ADSC9   TOKEN,,AUTO              cn=0,n=520

     2125     9546    1           TOKEN.OBJECT.CLASS# = %CLS_TEXTC_REMOTE;

   9546  3 000134   000053 221003                    LDX1    43,DU
         3 000135   200025 741100                    STX1    TOKEN,,AUTO

     2126     9547
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:299  
     2127     9548    1           SCAN_INDEX = 0;

   9548  3 000136   200013 450100                    STZ     SCAN_INDEX,,AUTO

     2128     9549    1   EACH_TOKEN:
     2129     9550    2           DO WHILE SCAN_INDEX < CMD$RECORD.LENGTH#;

   9550  3 000137   100002 236100       EACH_TOKEN   LDQ     2,,PR1
         3 000140   000022 732000                    QRS     18
         3 000141   000363 604000 3                  TMI     RETURN_RECORD
         3 000142   200013 116100                    CMPQ    SCAN_INDEX,,AUTO
         3 000143   000363 602000 3                  TNC     RETURN_RECORD
         3 000144   000363 600000 3                  TZE     RETURN_RECORD

     2130     9551    2              CALL FIND_TOKEN (SCAN_INDEX, TOKEN)

   9551  3 000145   200025 630500                    EPPR0   TOKEN,,AUTO
         3 000146   200234 450500                    STP0    @STR_INDEX+1,,AUTO
         3 000147   200013 631500                    EPPR1   SCAN_INDEX,,AUTO
         3 000150   200233 451500                    STP1    VD_ERR$+2,,AUTO
         3 000151   001521 701000 3                  TSX1    FIND_TOKEN
         3 000152   000426 702000 3                  TSX2    READ_COMMAND_RECORD_FAILED

     2131     9552    2                ALTRET (FIND_TOKEN_FAILED);
     2132     9553
     2133     9554    3              IF TOKEN.LENGTH# > 0 THEN DO;

   9554  3 000153   200027 236100                    LDQ     TOKEN+2,,AUTO
         3 000154   777000 316003                    CANQ    -512,DU
         3 000155   000354 600000 3                  TZE     s:9602

     2134     9555    3                 CALL XLATE (SUBSTR(TOKEN.BYTES, 0, TOKEN.LENGTH#), B$XL_UPPER,

   9555  3 000156   200027 236100                    LDQ     TOKEN+2,,AUTO
         3 000157   000033 772000                    QRL     27
         3 000160   000000 620006                    EAX0    0,QL
         3 000161   200027 236100                    LDQ     TOKEN+2,,AUTO
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:300  
         3 000162   000033 772000                    QRL     27
         3 000163   000000 621006                    EAX1    0,QL
         3 000164   000000 470400 xsym               LDP0    B$XL_UPPER$
         3 000165   040140 160540                    MVT     fill='040'O
         3 000166   200027 200011                    ADSC9   TOKEN+2,,AUTO            cn=1,n=*X1
         3 000167   200027 200010                    ADSC9   TOKEN+2,,AUTO            cn=1,n=*X0
         3 000170   000000 000100                    ARG     0,,PR0

     2135     9556    3                   SUBSTR(TOKEN.BYTES, 0, TOKEN.LENGTH#));
     2136     9557
     2137     9558    3   TOKEN_SELECTIONS:
     2138     9559    4                 DO SELECT (SUBSTR(TOKEN.BYTES, 0, TOKEN.LENGTH#));

   9559  3 000171   200027 236100       TOKEN_SELEC* LDQ     TOKEN+2,,AUTO
         3 000172   000033 772000                    QRL     27
         3 000173   000000 620006                    EAX0    0,QL
         3 000174   040000 106540                    CMPC    fill='040'O
         3 000175   200027 200010                    ADSC9   TOKEN+2,,AUTO            cn=1,n=*X0
         3 000176   000206 000004 1                  ADSC9   XLATE_FID_CHAR_CLASS+128 cn=0,n=4
         3 000177   000233 602000 3                  TNC     TOKEN_SELECTIONS+34
         3 000200   000000 620006                    EAX0    0,QL
         3 000201   040000 106540                    CMPC    fill='040'O
         3 000202   200027 200010                    ADSC9   TOKEN+2,,AUTO            cn=1,n=*X0
         3 000203   000206 000004 1                  ADSC9   XLATE_FID_CHAR_CLASS+128 cn=0,n=4
         3 000204   000241 600000 3                  TZE     s:9563
         3 000205   000000 620006                    EAX0    0,QL
         3 000206   040000 106540                    CMPC    fill='040'O
         3 000207   200027 200010                    ADSC9   TOKEN+2,,AUTO            cn=1,n=*X0
         3 000210   000207 000002 1                  ADSC9   XLATE_FID_CHAR_CLASS+129 cn=0,n=2
         3 000211   000225 602000 3                  TNC     TOKEN_SELECTIONS+28
         3 000212   000000 620006                    EAX0    0,QL
         3 000213   040000 106540                    CMPC    fill='040'O
         3 000214   200027 200010                    ADSC9   TOKEN+2,,AUTO            cn=1,n=*X0
         3 000215   000207 000002 1                  ADSC9   XLATE_FID_CHAR_CLASS+129 cn=0,n=2
         3 000216   000260 600000 3                  TZE     s:9570
         3 000217   000000 620006                    EAX0    0,QL
         3 000220   040000 106540                    CMPC    fill='040'O
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:301  
         3 000221   200027 200010                    ADSC9   TOKEN+2,,AUTO            cn=1,n=*X0
         3 000222   000210 000007 1                  ADSC9   XLATE_FID_CHAR_CLASS+130 cn=0,n=7
         3 000223   000277 601000 3                  TNZ     s:9577
         3 000224   000260 710000 3                  TRA     s:9570
         3 000225   000000 620006                    EAX0    0,QL
         3 000226   040000 106540                    CMPC    fill='040'O
         3 000227   200027 200010                    ADSC9   TOKEN+2,,AUTO            cn=1,n=*X0
         3 000230   000212 000004 1                  ADSC9   XLATE_FID_CHAR_CLASS+132 cn=0,n=4
         3 000231   000277 601000 3                  TNZ     s:9577
         3 000232   000241 710000 3                  TRA     s:9563
         3 000233   000000 620006                    EAX0    0,QL
         3 000234   040000 106540                    CMPC    fill='040'O
         3 000235   200027 200010                    ADSC9   TOKEN+2,,AUTO            cn=1,n=*X0
         3 000236   000206 000002 1                  ADSC9   XLATE_FID_CHAR_CLASS+128 cn=0,n=2
         3 000237   000277 601000 3                  TNZ     s:9577
         3 000240   000241 710000 3                  TRA     s:9563

     2139     9560    4                    SELECT (%KW_FILE, %KWA_FILE, %KW_READ);

     2140     9561                         /* Skip both the FILE or READ keywords and the fid that
     2141     9562                         *    follows them.                                  */
     2142     9563    4                    SCAN_INDEX = SCAN_INDEX + TOKEN.LENGTH#; /* Skip keyword */

   9563  3 000241   200027 236100                    LDQ     TOKEN+2,,AUTO
         3 000242   000033 772000                    QRL     27
         3 000243   200013 036100                    ADLQ    SCAN_INDEX,,AUTO
         3 000244   200013 756100                    STQ     SCAN_INDEX,,AUTO

     2143     9564    4                    CALL FIND_FID (SCAN_INDEX, TOKEN)

   9564  3 000245   200025 631500                    EPPR1   TOKEN,,AUTO
         3 000246   200234 451500                    STP1    @STR_INDEX+1,,AUTO
         3 000247   200013 633500                    EPPR3   SCAN_INDEX,,AUTO
         3 000250   200233 453500                    STP3    VD_ERR$+2,,AUTO
         3 000251   001525 701000 3                  TSX1    FIND_FID
         3 000252   000426 702000 3                  TSX2    READ_COMMAND_RECORD_FAILED

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:302  
     2144     9565    4                      ALTRET (FIND_FID_FAILED);
     2145     9566    4                    SCAN_INDEX = SCAN_INDEX + TOKEN.LENGTH#; /* Skip fid */

   9566  3 000253   200027 236100                    LDQ     TOKEN+2,,AUTO
         3 000254   000033 772000                    QRL     27
         3 000255   200013 036100                    ADLQ    SCAN_INDEX,,AUTO
         3 000256   200013 756100                    STQ     SCAN_INDEX,,AUTO
         3 000257   000354 710000 3                  TRA     s:9602

     2146     9567
     2147     9568    4                    SELECT (%KW_SYNONYM, %KWA_SYNONYM);

     2148     9569                         /* Skip SYNONYM keyword and the token following it */
     2149     9570    4                    SCAN_INDEX = SCAN_INDEX + TOKEN.LENGTH#; /* Skip SYNONYM */

   9570  3 000260   200027 236100                    LDQ     TOKEN+2,,AUTO
         3 000261   000033 772000                    QRL     27
         3 000262   200013 036100                    ADLQ    SCAN_INDEX,,AUTO
         3 000263   200013 756100                    STQ     SCAN_INDEX,,AUTO

     2150     9571    4                    CALL FIND_TOKEN (SCAN_INDEX, TOKEN)

   9571  3 000264   200025 631500                    EPPR1   TOKEN,,AUTO
         3 000265   200234 451500                    STP1    @STR_INDEX+1,,AUTO
         3 000266   200013 633500                    EPPR3   SCAN_INDEX,,AUTO
         3 000267   200233 453500                    STP3    VD_ERR$+2,,AUTO
         3 000270   001521 701000 3                  TSX1    FIND_TOKEN
         3 000271   000426 702000 3                  TSX2    READ_COMMAND_RECORD_FAILED

     2151     9572    4                      ALTRET (FIND_TOKEN_FAILED);
     2152     9573    4                    SCAN_INDEX = SCAN_INDEX + TOKEN.LENGTH#; /* Skip token */

   9573  3 000272   200027 236100                    LDQ     TOKEN+2,,AUTO
         3 000273   000033 772000                    QRL     27
         3 000274   200013 036100                    ADLQ    SCAN_INDEX,,AUTO
         3 000275   200013 756100                    STQ     SCAN_INDEX,,AUTO
         3 000276   000354 710000 3                  TRA     s:9602
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:303  

     2153     9574
     2154     9575    4                    SELECT (ELSE);

     2155     9576                         /* Got a candidate token:  see if it's a synonym */
     2156     9577    4                 CALL VDA$LREAD (SYNONYMS$STREAM, SYNONYM_LOC, 0, %TRUE)

   9577  3 000277   000004 237000 4                  LDAQ    4
         3 000300   200256 757100                    STAQ    INTERRUPT_STATE_BEFORE_M$READ+3,,AUTO
         3 000301   200014 631500                    EPPR1   SYNONYM_LOC,,AUTO
         3 000302   200255 451500                    STP1    INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 000303   000003 236000 xsym               LDQ     VD_6E+3
         3 000304   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000305   200254 630500                    EPPR0   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000306   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000307   000000 701000 xent               TSX1    VDA$LREAD
         3 000310   000426 702000 3                  TSX2    READ_COMMAND_RECORD_FAILED

     2157     9578    4                   ALTRET (LREAD_FAILED);
     2158     9579                      %GETKEY (KEY=SYNONYMS$STREAM.PORT$->VD$PORT.CURRENT.KEY,
     2159     9580                      INDX=%LVL_LOWER-1, PTR=SY_KEY$);

   9587  3 000311   000003 470400 xsym               LDP0    VD_6E+3
         3 000312   000001 471500                    LDP1    1,,PR0
         3 000313   100012 720100                    LXL0    10,,PR1
         3 000314   000002 100003                    CMPX0   2,DU
         3 000315   000322 601000 3                  TNZ     s:9587+9

   9587  3 000316   100013 473500                    LDP3    11,,PR1
         3 000317   300002 634500                    EPPR4   2,,PR3
         3 000320   200227 454500                    STP4    SY_KEY$,,AUTO
         3 000321   000324 710000 3                  TRA     s:9590

   9587  3 000322   100013 633500                    EPPR3   11,,PR1
         3 000323   200227 453500                    STP3    SY_KEY$,,AUTO

     2160     9590    4                 IF SY$KEY.BYTES =
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:304  

   9590  3 000324   200227 473500                    LDP3    SY_KEY$,,AUTO
         3 000325   300000 236100                    LDQ     0,,PR3
         3 000326   000033 772000                    QRL     27
         3 000327   000000 621006                    EAX1    0,QL
         3 000330   200027 236100                    LDQ     TOKEN+2,,AUTO
         3 000331   000033 772000                    QRL     27
         3 000332   000000 622006                    EAX2    0,QL
         3 000333   040140 106540                    CMPC    fill='040'O
         3 000334   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         3 000335   200027 200012                    ADSC9   TOKEN+2,,AUTO            cn=1,n=*X2
         3 000336   000350 601000 3                  TNZ     s:9598

     2161     9591    5                   SUBSTR(TOKEN.BYTES, 0, TOKEN.LENGTH#) THEN DO;

     2162     9592    5                    CALL REPLACE_STRING_AND_SKIP (SCAN_INDEX, TOKEN.LENGTH#,

   9592  3 000337   100036 474500                    LDP4    30,,PR1
         3 000340   200235 454500                    STP4    @STR_LN+1,,AUTO
         3 000341   200027 631500                    EPPR1   TOKEN+2,,AUTO
         3 000342   200234 451500                    STP1    @STR_INDEX+1,,AUTO
         3 000343   200013 635500                    EPPR5   SCAN_INDEX,,AUTO
         3 000344   200233 455500                    STP5    VD_ERR$+2,,AUTO
         3 000345   002142 701000 3                  TSX1    REPLACE_STRING_AND_SKIP
         3 000346   000426 702000 3                  TSX2    READ_COMMAND_RECORD_FAILED

     2163     9593    5                      SYNONYMS$STREAM.PORT$ ->
     2164     9594    5                      VD$PORT.LEVEL.DATA$ (%LVL_LOWER) -> VD$BUFFER)
     2165     9595    5                      ALTRET (REPLACE_STRING_AND_SKIP_FAILED);
     2166     9596    5                    END;

   9596  3 000347   000354 710000 3                  TRA     s:9602

     2167     9597    4                 ELSE
     2168     9598    4                    SCAN_INDEX = SCAN_INDEX + TOKEN.LENGTH#;

   9598  3 000350   200027 236100                    LDQ     TOKEN+2,,AUTO
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:305  
         3 000351   000033 772000                    QRL     27
         3 000352   200013 036100                    ADLQ    SCAN_INDEX,,AUTO
         3 000353   200013 756100                    STQ     SCAN_INDEX,,AUTO

     2169     9599
     2170     9600    4                    END TOKEN_SELECTIONS;

     2171     9601    3                 END;

     2172     9602    2              END EACH_TOKEN;

   9602  3 000354   200012 470500                    LDP0    CMD_RECORD$,,AUTO
         3 000355   000002 236100                    LDQ     2,,PR0
         3 000356   000022 732000                    QRS     18
         3 000357   000363 604000 3                  TMI     RETURN_RECORD
         3 000360   200013 116100                    CMPQ    SCAN_INDEX,,AUTO
         3 000361   000363 600000 3                  TZE     RETURN_RECORD
         3 000362   000145 603000 3                  TRC     s:9551

   9600  3 000363                       RETURN_RECO* null
     2173     9603
     2174     9604    1   RETURN_RECORD: ;
     2175     9605    1           CALL INSERT (BUF, 0, CMD$RECORD.LENGTH#, CMD$RECORD.BYTES)

   9605  3 000363   200012 470500                    LDP0    CMD_RECORD$,,AUTO
         3 000364   000002 220100                    LDX0    2,,PR0
         3 000365   200254 740100                    STX0    INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000366   200254 221100                    LDX1    INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000367   200010 471500                    LDP1    BUF$,,AUTO
         3 000370   040140 100540                    MLR     fill='040'O
         3 000371   000002 400011                    ADSC9   2,,PR0                   cn=2,n=*X1
         3 000372   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0
         3 000373   200254 236100                    LDQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000374   000022 732000                    QRS     18
         3 000375   000011 402007                    MPY     9,DL
         3 000376   200255 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 000377   000000 636010                    EAQ     0,X0
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:306  
         3 000400   000022 772000                    QRL     18
         3 000401   000011 402007                    MPY     9,DL
         3 000402   000000 116003                    CMPQ    0,DU
         3 000403   000406 604000 3                  TMI     RETURN_RECORD+19
         3 000404   200255 116100                    CMPQ    INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 000405   000407 604000 3                  TMI     s:9607
         3 000406   000420 710000 3                  TRA     s:9609

     2176     9606    2           WHENALTRETURN DO;

     2177     9607    2              CALL VDG$ESCREECH (CMD$RECORD.LENGTH#, NB_BUF);

   9607  3 000407   200011 630500                    EPPR0   NB_BUF,,AUTO
         3 000410   200255 450500                    STP0    INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 000411   200012 236100                    LDQ     CMD_RECORD$,,AUTO
         3 000412   000002 036003                    ADLQ    2,DU
         3 000413   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000414   200254 630500                    EPPR0   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000415   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000416   000000 701000 xent               TSX1    VDG$ESCREECH
         3 000417   000000 011000                    NOP     0

     2178     9608    2              END;

     2179     9609    1           ARS = CMD$RECORD.LENGTH#;

   9609  3 000420   200012 470500                    LDP0    CMD_RECORD$,,AUTO
         3 000421   000002 236100                    LDQ     2,,PR0
         3 000422   000022 732000                    QRS     18
         3 000423   200004 471500                    LDP1    @ARS,,AUTO
         3 000424   100000 756100                    STQ     0,,PR1

     2180     9610
     2181     9611    1           RETURN;

   9611  3 000425   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:307  
   9609  3 000426                       READ_COMMAN* null
   9609  3 000426                       OFREE_FAILED null
   9609  3 000426                       FIND_TOKEN_* null
   9609  3 000426                       FIND_FID_FA* null
   9609  3 000426                       LREAD_FAILED null
   9609  3 000426                       REPLACE_STR* null
     2182     9612
     2183     9613
     2184     9614
     2185     9615    1   READ_COMMAND_RECORD_FAILED: ;
     2186     9616    1   OFREE_FAILED: ;
     2187     9617    1   FIND_TOKEN_FAILED: ;
     2188     9618    1   FIND_FID_FAILED: ;
     2189     9619    1   LREAD_FAILED: ;
     2190     9620    1   REPLACE_STRING_AND_SKIP_FAILED: ;
     2191     9621    1           ERRCODE = VD_6E.ERR_TAIL$->VD$ERR.ERR;

   9621  3 000426   000032 470400 xsym               LDP0    VD_6E+26
         3 000427   000002 236100                    LDQ     2,,PR0
         3 000430   200006 471500                    LDP1    @ERRCODE,,AUTO
         3 000431   100000 756100                    STQ     0,,PR1

     2192     9622                /*
     2193     9623                *   We don't want XUG$GETCMD to parse this command record, but we do
     2194     9624                *       want to tell GETCMD about it in case VDG$EREPORT_ERROR calls
     2195     9625                *       XUG$ERRPTR (eg, in case one of the errors has
     2196     9626                *       VD$ERR.CMDLINE_INDEX# set).
     2197     9627                *   So, return the record (if any), but reset the parse nodes to NIL.
     2198     9628                *       (((Test case:  With !DONT POINT, say CO ST 'ABC AF 6
     2199     9629                *       ie, enter a string with unbalanced quotes.)))
     2200     9630                */
     2201     9631    1           IF CMD$STREAM.RECORD$ = ADDR(NIL) THEN

   9631  3 000432   000026 470400 xsym               LDP0    VD_6E+22
         3 000433   000025 236100                    LDQ     21,,PR0
         3 000434   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000435   000441 601000 3                  TNZ     s:9634
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:308  

     2202     9632    1              ARS = 0;

   9632  3 000436   200004 473500                    LDP3    @ARS,,AUTO
         3 000437   300000 450100                    STZ     0,,PR3
         3 000440   000507 710000 3                  TRA     s:9643

     2203     9633    2           ELSE DO;

     2204     9634    2              CMD_RECORD$ = CMD$STREAM.RECORD$;

   9634  3 000441   200012 756100                    STQ     CMD_RECORD$,,AUTO

     2205     9635    2              CALL INSERT (BUF, 0, CMD$RECORD.LENGTH#, CMD$RECORD.BYTES)

   9635  3 000442   200012 473500                    LDP3    CMD_RECORD$,,AUTO
         3 000443   300002 220100                    LDX0    2,,PR3
         3 000444   200254 740100                    STX0    INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000445   200254 221100                    LDX1    INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000446   200010 474500                    LDP4    BUF$,,AUTO
         3 000447   040140 100540                    MLR     fill='040'O
         3 000450   300002 400011                    ADSC9   2,,PR3                   cn=2,n=*X1
         3 000451   400000 000010                    ADSC9   0,,PR4                   cn=0,n=*X0
         3 000452   200254 236100                    LDQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000453   000022 732000                    QRS     18
         3 000454   000011 402007                    MPY     9,DL
         3 000455   200255 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 000456   000000 636010                    EAQ     0,X0
         3 000457   000022 772000                    QRL     18
         3 000460   000011 402007                    MPY     9,DL
         3 000461   000000 116003                    CMPQ    0,DU
         3 000462   000465 604000 3                  TMI     s:9635+19
         3 000463   200255 116100                    CMPQ    INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 000464   000466 604000 3                  TMI     s:9637
         3 000465   000477 710000 3                  TRA     s:9639

     2206     9636    3              WHENALTRETURN DO;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:309  

     2207     9637    3                 CALL VDG$ESCREECH (CMD$RECORD.LENGTH#, NB_BUF);

   9637  3 000466   200011 630500                    EPPR0   NB_BUF,,AUTO
         3 000467   200255 450500                    STP0    INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 000470   200012 236100                    LDQ     CMD_RECORD$,,AUTO
         3 000471   000002 036003                    ADLQ    2,DU
         3 000472   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000473   200254 630500                    EPPR0   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000474   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000475   000000 701000 xent               TSX1    VDG$ESCREECH
         3 000476   000000 011000                    NOP     0

     2208     9638    3                 END;

     2209     9639    2              ARS = CMD$RECORD.LENGTH#;

   9639  3 000477   200012 470500                    LDP0    CMD_RECORD$,,AUTO
         3 000500   000002 236100                    LDQ     2,,PR0
         3 000501   000022 732000                    QRS     18
         3 000502   200004 471500                    LDP1    @ARS,,AUTO
         3 000503   100000 756100                    STQ     0,,PR1

     2210     9640    2              XUG_GETCMD.NODES$ = ADDR(VD_ASYM);

   9640  3 000504   000006 236000 4                  LDQ     6
         3 000505   000000 756000 xsym               STQ     XUG_GETCMD

     2211     9641    2              RETURN; /* So GETCMD will echo the record */

   9641  3 000506   000000 702200 xent               TSX2  ! X66_ARET

     2212     9642    2              END;
     2213     9643    1           ALTRETURN;

   9643  3 000507   000000 702200 xent               TSX2  ! X66_AALT

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:310  
     2214     9644
     2215     9645        %BOX (TITLE=READ_COMMAND_RECORD, PAGE=YES);
              9653    1
              9657    1   /***************************************************************************
              9659    1    *                                                                         *
              9663    1            *                            READ_COMMAND_RECORD                         *
              9665    1            *                                                                        *
              9667    1          ***************************************************************************/

     2216     9671
     2217     9672        /*I* NAME: READ_COMMAND_RECORD
     2218     9673            PARAMETERS:
     2219     9674                None.
     2220     9675            INPUT:
     2221     9676                VD_6E.CMD_STREAM$:  Ptr to top VD$CMD_STREAM on stack of same.
     2222     9677                    Each entry represents a command stream; all entries except
     2223     9678                    the top represent command streams which have been
     2224     9679                    interrupted by a READ command.  A command stream can be
     2225     9680                    either:
     2226     9681                        The command window (there may be a partially unprocessed
     2227     9682                            record in the VD$CMD_STREAM, left over from a READ
     2228     9683                            command);
     2229     9684                        A file (the VD$CMD_STREAM remembers where in the file
     2230     9685                            to start reading again); or
     2231     9686                        A buffer or InTree containing a single command line (the
     2232     9687                            VD$CMD_STREAM remembers where in the buffer/InTree to
     2233     9688                            start processing again).
     2234     9689                    The top entry (if any) on the stack is the current
     2235     9690                    position in the current command stream.  The stack must
     2236     9691                    never be empty.
     2237     9692            OUTPUT:
     2238     9693                CMD$STREAM (top VD$CMD_STREAM) will describe the command record
     2239     9694                    read from the command stream:
     2240     9695                    .INTREE$ may point to an InTree for the record.  If .INTREE$
     2241     9696                        is not NIL, the InTree should be used in preference to
     2242     9697                        the character record in .RECORD$.
     2243     9698                    .RECORD$ may point to a VD$BUFFER containing the record.
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:311  
     2244     9699                    .REC_NUM# will be the file record number (counting from 1) of the
     2245     9700                        record pointed-to by .INTREE$/.RECORD$.
     2246     9701                    Either one or both of .INTREE$ and .RECORD$ will be non-NIL.
     2247     9702                    If both are returned, .INTREE$ should be used in preference to
     2248     9703                    .RECORD$; the character form of the command record is kept only
     2249     9704                    for the purposes of error reporting.
     2250     9705                VD_6E.CMD_STREAM$ may be modified.  The VD$CMD_STREAM at the
     2251     9706                    top of the stack may be modified.
     2252     9707                XUG_GETCMD.TREAD# will be set if we read a record from the
     2253     9708                    terminal, reset otherwise.
     2254     9709            DESCRIPTION:
     2255     9710                Read the next record from the current command stream:  either
     2256     9711                the next record from a READ-file, or a record from the command
     2257     9712                window, or the unprocessed portion of an existing record
     2258     9713                buffer.
     2259     9714                Note that if the current command stream is a workspace file,
     2260     9715                    we'll load the workspace, pop the command stream, then
     2261     9716                    read from the new "current" command stream.
     2262     9717                If we get EOF, pop the command stream stack: if the new
     2263     9718                command stream is:
     2264     9719                o A READ-file:
     2265     9720                    Open it and reposition to the last record read from the file.
     2266     9721                o The command window:
     2267     9722                    If the command stream contains a partially-unprocessed record,
     2268     9723                        then return it as the next command record.
     2269     9724                    However, If the command stream doesn't contain a
     2270     9725                        partially-unprocessed record, return an empty command record.
     2271     9726                        We return an empty command record when we transition back to
     2272     9727                        the command window, instead of reading from the command window
     2273     9728                        immediately.  This gives VDI$PDRIVER a chance to re-evaluate
     2274     9729                        its parameters for deciding whether to read from the command
     2275     9730                        window or the current editing window.
     2276     9731        */
     2277     9732
     2278     9733    1   READ_COMMAND_RECORD: PROC ALTRET;

   9733  3 000510   200232 741300       READ_COMMAN* STX1  ! VD_ERR$+1,,AUTO
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:312  

     2279     9734
     2280     9735
     2281     9736    2   DCL REC_NUM_INCR SBIN;
     2282     9737    2   DCL HAD_ERROR BIT(1) ALIGNED;
     2283     9738    2   DCL EOF_FLAG BIT(1) ALIGNED;
     2284     9739
     2285     9740
     2286     9741        %VD$BUFFER;
     2287     9799
     2288     9800
     2289     9801
     2290     9802    2           REC_NUM_INCR = 1;   /* Assume we're reading new record */

   9802  3 000511   000001 235007                    LDA     1,DL
         3 000512   200233 755100                    STA     REC_NUM_INCR,,AUTO

     2291     9803    2           HAD_ERROR = %FALSE;

   9803  3 000513   200234 450100                    STZ     HAD_ERROR,,AUTO

     2292     9804
     2293     9805    3           DO UNTIL NOT EOF_FLAG;

     2294     9806    3              CALL CMD_STREAM_READ

   9806  3 000514   000573 701000 3                  TSX1    CMD_STREAM_READ
         3 000515   000571 702000 3                  TSX2    CMD_STREAM_READ_FAILED

     2295     9807    3                ALTRET (CMD_STREAM_READ_FAILED);
     2296     9808
     2297     9809    4              IF EOF_FLAG THEN DO;

   9809  3 000516   200235 234100                    SZN     EOF_FLAG,,AUTO
         3 000517   000555 605000 3                  TPL     s:9826

     2298     9810    4                 CALL POP_STACK_AND_POSTN
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:313  

   9810  3 000520   001427 701000 3                  TSX1    POP_STACK_AND_POSTN
         3 000521   000571 702000 3                  TSX2    CMD_STREAM_READ_FAILED

     2299     9811    4                   ALTRET (POP_STACK_AND_POSTN_FAILED);
     2300     9812    4                 IF CMD$STREAM.CMD_AFTER_READ THEN

   9812  3 000522   000026 470400 xsym               LDP0    VD_6E+22
         3 000523   000027 236100                    LDQ     23,,PR0
         3 000524   040000 316007                    CANQ    16384,DL
         3 000525   000530 600000 3                  TZE     s:9814

     2301     9813    4                    REC_NUM_INCR = 0;

   9813  3 000526   200233 450100                    STZ     REC_NUM_INCR,,AUTO
         3 000527   000555 710000 3                  TRA     s:9826

     2302     9814    5                 ELSE IF CMD$STREAM.TYPE# = %CS_ME THEN DO;

   9814  3 000530   000002 220100                    LDX0    2,,PR0
         3 000531   000002 100003                    CMPX0   2,DU
         3 000532   000555 601000 3                  TNZ     s:9826

     2303     9815                         /* Return an empty buffer to get into the editing window
     2304     9816                            after a command-line or read command */
     2305     9817    6                       IF CMD$STREAM.RECORD$ = ADDR(NIL) THEN DO;

   9817  3 000533   000025 236100                    LDQ     21,,PR0
         3 000534   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000535   000550 601000 3                  TNZ     s:9822

     2306     9818    6                          CALL VDG$OALLOC (%CLS_BUFFER, CMD$STREAM.RECORD$,

   9818  3 000536   000007 236000 4                  LDQ     7
         3 000537   200256 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+3,,AUTO
         3 000540   000026 236000 xsym               LDQ     VD_6E+22
         3 000541   000025 036003                    ADLQ    21,DU
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:314  
         3 000542   000010 235000 4                  LDA     8
         3 000543   200254 757100                    STAQ    INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000544   200254 630500                    EPPR0   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000545   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 000546   000000 701000 xent               TSX1    VDG$OALLOC
         3 000547   000571 702000 3                  TSX2    CMD_STREAM_READ_FAILED

     2307     9819    6                            SIZEW(VD$BUFFER_HEADER))
     2308     9820    6                            ALTRET (OALLOC_FAILED);
     2309     9821    6                          END;

     2310     9822    5                       CMD$STREAM.RECORD$->VD$BUFFER.LENGTH# = 0;

   9822  3 000550   000026 470400 xsym               LDP0    VD_6E+22
         3 000551   000025 471500                    LDP1    21,,PR0
         3 000552   000000 220003                    LDX0    0,DU
         3 000553   100002 740100                    STX0    2,,PR1

     2311     9823    5                       EOF_FLAG = %FALSE;

   9823  3 000554   200235 450100                    STZ     EOF_FLAG,,AUTO

     2312     9824    5                       END;

     2313     9825    4                 END;

     2314     9826    3              END;

   9826  3 000555   200235 234100                    SZN     EOF_FLAG,,AUTO
         3 000556   000514 604000 3                  TMI     s:9806

     2315     9827
     2316     9828    2           IF HAD_ERROR THEN

   9828  3 000557   200234 234100                    SZN     HAD_ERROR,,AUTO
         3 000560   000563 605000 3                  TPL     s:9831

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:315  
     2317     9829    2              ALTRETURN;

   9829  3 000561   200232 221300                    LDX1  ! VD_ERR$+1,,AUTO
         3 000562   000000 702211                    TSX2  ! 0,X1

     2318     9830
     2319     9831    2           CMD$STREAM.REC_NUM# = CMD$STREAM.REC_NUM# + REC_NUM_INCR;

   9831  3 000563   000026 470400 xsym               LDP0    VD_6E+22
         3 000564   000030 236100                    LDQ     24,,PR0
         3 000565   200233 036100                    ADLQ    REC_NUM_INCR,,AUTO
         3 000566   000030 756100                    STQ     24,,PR0

     2320     9832    2           RETURN;

   9832  3 000567   200232 221300                    LDX1  ! VD_ERR$+1,,AUTO
         3 000570   000001 702211                    TSX2  ! 1,X1

   9831  3 000571                       CMD_STREAM_* null
   9831  3 000571                       POP_STACK_A* null
   9831  3 000571                       OALLOC_FAIL* null
     2321     9833
     2322     9834
     2323     9835
     2324     9836    2   CMD_STREAM_READ_FAILED: ;
     2325     9837    2   POP_STACK_AND_POSTN_FAILED: ;
     2326     9838    2   OALLOC_FAILED: ;
     2327     9839    2           ALTRETURN;

   9839  3 000571   200232 221300                    LDX1  ! VD_ERR$+1,,AUTO
         3 000572   000000 702211                    TSX2  ! 0,X1

     2328     9840
     2329     9841
     2330     9842                %BOX (TITLE=CMD_STREAM_READ);

              9854    2   /***************************************************************************
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:316  
              9856    2    *                                                                         *
              9860    2            *                              CMD_STREAM_READ                           *
              9862    2            *                                                                        *
              9864    2          ***************************************************************************/

     2331     9868
     2332     9869        /*I** NAME: CMD_STREAM_READ
     2333     9870            PARAMETERS:
     2334     9871                None.
     2335     9872            INPUT:
     2336     9873                CMD$STREAM - Current command stream.
     2337     9874            OUTPUT:
     2338     9875                If EOF not hit:
     2339     9876                    CMD$STREAM.INTREE$ may point to an InTree (chain of VD$IT_COMMAND
     2340     9877                        nodes) for the record read from the command stream.
     2341     9878                        The first node in the chain is always the first node to
     2342     9879                        process (any previously-processed nodes will be stripped).
     2343     9880                    CMD$STREAM.RECORD$ may point to either a VD$BUFFER containing
     2344     9881                        the record read from the command stream.  If .INTREE$
     2345     9882                        is non-NIL, it should be used instead of .RECORD$.
     2346     9883                        In .RECORD$'s VD$BUFFER.DATA, the VFC and already-processed
     2347     9884                        leading will have been stripped from the buffer, so the
     2348     9885                        next character to process will be the first character of
     2349     9886                        the buffer.
     2350     9887                    XUG_GETCMD.TREAD# will be set if we got the command record
     2351     9888                        from an interactive terminal; reset otherwise.
     2352     9889                EOF_FLAG - Will contain %TRUE if there are no more records
     2353     9890                    in the current command stream (EOF on file or EOF activation
     2354     9891                    from the command window).
     2355     9892            DESCRIPTION:
     2356     9893                Read the next record.  Return EOF if appropriate.
     2357     9894                Note that if we see a VD$CMD_STREAM for a file whose file-type
     2358     9895                    is %CHR_ENCODED_TYPE, we'll call VDW$LOAD, which could
     2359     9896                    change alot of info in the internal files -- like all of
     2360     9897                    them!
     2361     9898                If we're reading from the terminal, we sometimes force pagehalt
     2362     9899                    off and then on again.  We do this when there is an
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:317  
     2363     9900                    editing window to which the cursor will probably return
     2364     9901                    after this command read (ie, $COMMAND is off and the
     2365     9902                    editing window has an EditBlock).  If we didn't turn
     2366     9903                    pagehalt off, the user would have to type two CRs after
     2367     9904                    every command:  one to terminate the command and one
     2368     9905                    in response to the CR TO GO or beep.  However, if we
     2369     9906                    leave pagehalt off as we return to XUG$GETCMD, then if
     2370     9907                    GETCMD reports any errors they'll flash by in the command
     2371     9908                    window before the user can read them!  So, if we decide
     2372     9909                    to turn pagehalt off before the M$READ, we must turn it
     2373     9910                    back on after the M$READ.
     2374     9911        */
     2375     9912
     2376     9913    2   CMD_STREAM_READ: PROC ALTRET;

   9913  3 000573   200236 741300       CMD_STREAM_* STX1  ! @REPL+1,,AUTO

     2377     9914
     2378     9915
     2379     9916        %FPT_READ (STCLASS=STATIC);
     2380     9955        %FPT_WRITE (FPTN=WRITE_BLANK_LINE, STCLASS=STATIC, BUF=BLANK_BUF);
     2381     9986    3   DCL BLANK_BUF CHAR(1) CONSTANT INIT(%CHR_SPACE);
     2382     9987
     2383     9988
     2384     9989    3   DCL BUF_SIZE SBIN;
     2385     9990    3   DCL N SBIN;
     2386     9991    3   DCL IT_COMMAND$ PTR;
     2387     9992    3   DCL VD_BUFFER$ PTR;
     2388     9993    3   DCL READ_DCB$ PTR;
     2389     9994    3   DCL 1 LOAD_FLAGS ALIGNED,
     2390     9995              %VD$PDFF (NAME=F, STCLASS=AUTO, LEV=2, LAST=YES);
     2391    10009
     2392    10010
     2393    10011        %VD$IT_COMMAND (NAME=IT$COMMAND, STCLASS="BASED(IT_COMMAND$)");
     2394    10049        %VD$BUFFER (NAME=VD$BUFFER, STCLASS="BASED(VD_BUFFER$)");
     2395    10107        %F$DCB (DCBN=READ$DCB, STCLASS="BASED(READ_DCB$)");
     2396    10164        %VD$IT_COMMAND;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:318  
     2397    10202
     2398    10203
     2399    10204
     2400    10205    3           EOF_FLAG = %FALSE;

  10205  3 000574   200235 450100                    STZ     EOF_FLAG,,AUTO

     2401    10206    3           XUG_GETCMD.TREAD# = %FALSE;

  10206  3 000575   000011 236000 4                  LDQ     9
         3 000576   000006 356000 xsym               ANSQ    XUG_GETCMD+6

     2402    10207
     2403    10208    3   CMD_STREAM_TYPE_CASES:
     2404    10209    4           DO CASE (CMD$STREAM.TYPE#);

  10209  3 000577   000026 470400 xsym  CMD_STREAM_* LDP0    VD_6E+22
         3 000600   000002 220100                    LDX0    2,,PR0
         3 000601   000005 100003                    CMPX0   5,DU
         3 000602   000604 602010 3                  TNC     CMD_STREAM_TYPE_CASES+5,X0
         3 000603   001005 710000 3                  TRA     s:10284
         3 000604   001005 710000 3                  TRA     s:10284
         3 000605   000611 710000 3                  TRA     s:10212
         3 000606   000762 710000 3                  TRA     s:10271
         3 000607   000664 710000 3                  TRA     s:10238
         3 000610   000664 710000 3                  TRA     s:10238

     2405    10210
     2406    10211    4            CASE (%CS_BUFFER);

     2407    10212    4              IF (CMD$STREAM.INTREE$ = ADDR(NIL)

  10212  3 000611   000026 236100                    LDQ     22,,PR0
         3 000612   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000613   000617 601000 3                  TNZ     s:10212+6
         3 000614   000025 236100                    LDQ     21,,PR0
         3 000615   000001 116000 xsym               CMPQ    B_VECTNIL+1
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:319  
         3 000616   000630 600000 3                  TZE     s:10216
         3 000617   000030 235100                    LDA     24,,PR0
         3 000620   000633 604400 3                  TMOZ    s:10224
         3 000621   000027 236100                    LDQ     23,,PR0
         3 000622   040000 316007                    CANQ    16384,DL
         3 000623   000633 601000 3                  TNZ     s:10224
         3 000624   000025 471500                    LDP1    21,,PR0
         3 000625   100001 236100                    LDQ     1,,PR1
         3 000626   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000627   000633 601000 3                  TNZ     s:10224

     2408    10213    4                AND CMD$STREAM.RECORD$ = ADDR(NIL))
     2409    10214    4                OR (CMD$STREAM.REC_NUM# > 0 AND NOT CMD$STREAM.CMD_AFTER_READ
     2410    10215    5                AND CMD$STREAM.RECORD$ -> VD$BUFFER.FLINK$ = ADDR(NIL)) THEN DO;

     2411    10216    5                 EOF_FLAG = %TRUE;

  10216  3 000630   400000 236003                    LDQ     -131072,DU
         3 000631   200235 756100                    STQ     EOF_FLAG,,AUTO

     2412    10217    5                 END;

  10217  3 000632   000661 710000 3                  TRA     s:10234

     2413    10218                   /*
     2414    10219                   * Force increment of .REC_NUM#; otherwise, it won't be
     2415    10220                   *    incremented til the buffer is read twice.
     2416    10221                   *    (Test case:  !6EDIT (NEW FILE *) => reads
     2417    10222                   *    NEW FILE * command line twice.)
     2418    10223                   */
     2419    10224    4              ELSE IF CMD$STREAM.REC_NUM# = 0 THEN

  10224  3 000633   000000 115003                    CMPA    0,DU
         3 000634   000637 601000 3                  TNZ     s:10226

     2420    10225    4                    CMD$STREAM.REC_NUM# = CMD$STREAM.REC_NUM# + 1;

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:320  
  10225  3 000635   000030 054100                    AOS     24,,PR0
         3 000636   000661 710000 3                  TRA     s:10234

     2421    10226    5                 ELSE IF NOT CMD$STREAM.CMD_AFTER_READ THEN DO;

  10226  3 000637   000027 236100                    LDQ     23,,PR0
         3 000640   040000 316007                    CANQ    16384,DL
         3 000641   000661 601000 3                  TNZ     s:10234

     2422    10227    5                       VD_BUFFER$ = CMD$STREAM.RECORD$ -> VD$BUFFER.FLINK$;

  10227  3 000642   000025 471500                    LDP1    21,,PR0
         3 000643   100001 236100                    LDQ     1,,PR1
         3 000644   200242 756100                    STQ     VD_BUFFER$,,AUTO

     2423    10228    5                       CMD$STREAM.RECORD$ -> VD$BUFFER.FLINK$ = ADDR(NIL);

  10228  3 000645   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000646   100001 756100                    STQ     1,,PR1

     2424    10229    5                       CALL VDG$OFREE (CMD$STREAM.RECORD$ -> VD$BUFFER)

  10229  3 000647   000026 470400 xsym               LDP0    VD_6E+22
         3 000650   000025 471500                    LDP1    21,,PR0
         3 000651   200254 451500                    STP1    INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000652   200254 630500                    EPPR0   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000653   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000654   000000 701000 xent               TSX1    VDG$OFREE
         3 000655   001135 702000 3                  TSX2    WLOAD_FAILED

     2425    10230    5                         ALTRET (OFREE_FAILED);
     2426    10231    5                       CMD$STREAM.RECORD$ = VD_BUFFER$;

  10231  3 000656   200242 236100                    LDQ     VD_BUFFER$,,AUTO
         3 000657   000026 470400 xsym               LDP0    VD_6E+22
         3 000660   000025 756100                    STQ     21,,PR0

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:321  
     2427    10232    5                       END;

     2428    10233                   /* Say we read from terminal, so won't echo this line */
     2429    10234    4              XUG_GETCMD.TREAD# = %TRUE;

  10234  3 000661   200000 236003                    LDQ     65536,DU
         3 000662   000006 256000 xsym               ORSQ    XUG_GETCMD+6
         3 000663   001014 710000 3                  TRA     s:10288

     2430    10235
     2431    10236
     2432    10237    4            CASE (%CS_FILE, %CS_DCB);

     2433    10238    5              IF CMD$STREAM.FILE_TYPE = %CHR_ENCODED_TYPE THEN DO;

  10238  3 000664   000024 722100                    LXL2    20,,PR0
         3 000665   000213 102000 1                  CMPX2   XLATE_FID_CHAR_CLASS+133
         3 000666   000716 601000 3                  TNZ     s:10257

     2434    10239    5                 LOAD_FLAGS = %CLEAR;

  10239  3 000667   200244 450100                    STZ     LOAD_FLAGS,,AUTO

     2435    10240    5                 LOAD_FLAGS.F (%PDFF_EQUALS) = %TRUE;

  10240  3 000670   200000 236003                    LDQ     65536,DU
         3 000671   200244 256100                    ORSQ    LOAD_FLAGS,,AUTO

     2436    10241    6                 IF B$JIT.MODE = %M_INT# THEN DO;

  10241  3 000672   000000 471400 xsym               LDP1    B$JIT$
         3 000673   100000 236100                    LDQ     0,,PR1
         3 000674   740000 376003                    ANQ     -16384,DU
         3 000675   140000 116003                    CMPQ    49152,DU
         3 000676   000701 601000 3                  TNZ     s:10245

     2437    10242                         /* Can load keyins only if we're timesharing */
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:322  
     2438    10243    6                    LOAD_FLAGS.F (%PDFF_KEYINS) = %TRUE;

  10243  3 000677   100000 236003                    LDQ     32768,DU
         3 000700   200244 256100                    ORSQ    LOAD_FLAGS,,AUTO

     2439    10244    6                    END;

     2440    10245    5                 LOAD_FLAGS.F (%PDFF_LOCATIONS) = %TRUE;

  10245  3 000701   040000 236003                    LDQ     16384,DU
         3 000702   200244 256100                    ORSQ    LOAD_FLAGS,,AUTO

     2441    10246    5                 LOAD_FLAGS.F (%PDFF_SYNONYMS) = %TRUE;

  10246  3 000703   020000 236003                    LDQ     8192,DU
         3 000704   200244 256100                    ORSQ    LOAD_FLAGS,,AUTO

     2442    10247                      /* Don't load windows or structures */
     2443    10248    5                 CALL VDW$LOAD (LOAD_FLAGS)

  10248  3 000705   200244 633500                    EPPR3   LOAD_FLAGS,,AUTO
         3 000706   200254 453500                    STP3    INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000707   200254 630500                    EPPR0   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000710   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000711   000000 701000 xent               TSX1    VDW$LOAD
         3 000712   001135 702000 3                  TSX2    WLOAD_FAILED

     2444    10249    5                   ALTRET (WLOAD_FAILED);
     2445    10250                      /*N**??*
     2446    10251                      *N**??* On altret from WLOAD, WLOAD has closed the SAVE-file and
     2447    10252                      *N**??*   popped it off the cmdstream stack.  But the prior
     2448    10253                      *N**??*   cmdstream hasn't been opened or positioned, has it???!!!
     2449    10254                      *N**??*/
     2450    10255    5                 EOF_FLAG = %TRUE;

  10255  3 000713   400000 236003                    LDQ     -131072,DU
         3 000714   200235 756100                    STQ     EOF_FLAG,,AUTO
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:323  

     2451    10256    5                 END;

  10256  3 000715   000751 710000 3                  TRA     s:10265

     2452    10257    4              ELSE IF CMD$STREAM.DCB#~=DCBNUM(NIL)

  10257  3 000716   000024 223100                    LDX3    20,,PR0
         3 000717   000736 600000 3                  TZE     s:10261
         3 000720   000012 471400 4                  LDP1    10
         3 000721   100000 473500                    LDP3    0,,PR1
         3 000722   300000 474513                    LDP4    0,X3,PR3
         3 000723   400103 236100                    LDQ     67,,PR4
         3 000724   004000 316007                    CANQ    2048,DL
         3 000725   000736 600000 3                  TZE     s:10261
         3 000726   000000 475400 xsym               LDP5    B$JIT$
         3 000727   500151 236100                    LDQ     105,,PR5
         3 000730   000777 376003                    ANQ     511,DU
         3 000731   000003 116003                    CMPQ    3,DU
         3 000732   000736 601000 3                  TNZ     s:10261

     2453    10258    4                   AND DCBADDR(CMD$STREAM.DCB#) -> READ$DCB.CTLCMDIN
     2454    10259    4                   AND B$JIT.NEXTCC = %CC_FROMUC# THEN
     2455    10260    4                    EOF_FLAG = %TRUE; /* Finished an XEQ, read from M$ME next */

  10260  3 000733   400000 236003                    LDQ     -131072,DU
         3 000734   200235 756100                    STQ     EOF_FLAG,,AUTO
         3 000735   000751 710000 3                  TRA     s:10265

     2456    10261    5                 ELSE IF NOT CMD$STREAM.CMD_AFTER_READ THEN DO;

  10261  3 000736   000027 236100                    LDQ     23,,PR0
         3 000737   040000 316007                    CANQ    16384,DL
         3 000740   000751 601000 3                  TNZ     s:10265

     2457    10262    5                       CALL VDI$PREAD_FILE_READ (NB_BUF, EOF_FLAG)

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:324  
  10262  3 000741   200235 631500                    EPPR1   EOF_FLAG,,AUTO
         3 000742   200255 451500                    STP1    INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 000743   200011 633500                    EPPR3   NB_BUF,,AUTO
         3 000744   200254 453500                    STP3    INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000745   200254 630500                    EPPR0   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000746   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000747   000000 701000 xent               TSX1    VDI$PREAD_FILE_READ
         3 000750   001130 702000 3                  TSX2    PREAD_FILE_READ_FAILED

     2458    10263    5                         ALTRET (PREAD_FILE_READ_FAILED);
     2459    10264    5                       END;

     2460    10265    4              IF NOT CMD$STREAM.ECHO /* Only echo READ, XEQ, or BATCH */

  10265  3 000751   000026 470400 xsym               LDP0    VD_6E+22
         3 000752   000027 236100                    LDQ     23,,PR0
         3 000753   400000 316007                    CANQ    -131072,DL
         3 000754   000757 600000 3                  TZE     s:10267
         3 000755   040000 316007                    CANQ    16384,DL
         3 000756   001014 600000 3                  TZE     s:10288

     2461    10266    4                OR CMD$STREAM.CMD_AFTER_READ THEN /* unless rereading after READ */
     2462    10267    4                 XUG_GETCMD.TREAD# = %TRUE;

  10267  3 000757   200000 236003                    LDQ     65536,DU
         3 000760   000006 256000 xsym               ORSQ    XUG_GETCMD+6
         3 000761   001014 710000 3                  TRA     s:10288

     2463    10268
     2464    10269
     2465    10270    4            CASE (%CS_ME);

     2466    10271    5              IF CMD$STREAM.INTREE$ ~= ADDR(NIL) THEN DO;

  10271  3 000762   000026 236100                    LDQ     22,,PR0
         3 000763   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000764   000776 600000 3                  TZE     s:10278
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:325  

     2467    10272    5                 CALL VDG$OFREE (CMD$STREAM.INTREE$->VD$IT_COMMAND)

  10272  3 000765   000026 471500                    LDP1    22,,PR0
         3 000766   200254 451500                    STP1    INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000767   200254 630500                    EPPR0   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 000770   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000771   000000 701000 xent               TSX1    VDG$OFREE
         3 000772   001135 702000 3                  TSX2    WLOAD_FAILED

     2468    10273    5                   ALTRET (OFREE_FAILED);
     2469    10274    5                 CMD$STREAM.INTREE$ = ADDR(NIL);

  10274  3 000773   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000774   000026 470400 xsym               LDP0    VD_6E+22
         3 000775   000026 756100                    STQ     22,,PR0

     2470    10275    5                 END;

     2471    10276
     2472    10277                   /* If .POSITION# > 0, we already have a partial rec left over */
     2473    10278    4              IF NOT CMD$STREAM.CMD_AFTER_READ THEN

  10278  3 000776   000026 470400 xsym               LDP0    VD_6E+22
         3 000777   000027 236100                    LDQ     23,,PR0
         3 001000   040000 316007                    CANQ    16384,DL
         3 001001   001014 601000 3                  TNZ     s:10288

     2474    10279    4                 CALL READ_FROM_ME

  10279  3 001002   001137 701000 3                  TSX1    READ_FROM_ME
         3 001003   001135 702000 3                  TSX2    WLOAD_FAILED
         3 001004   001014 710000 3                  TRA     s:10288

     2475    10280    4                   ALTRET (READ_FROM_ME_FAILED);
     2476    10281
     2477    10282
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:326  
     2478    10283    4            CASE (ELSE);

     2479    10284    4              CALL VDG$ESCREECH (CMD$STREAM.TYPE#);

  10284  3 001005   000026 236000 xsym               LDQ     VD_6E+22
         3 001006   000002 036003                    ADLQ    2,DU
         3 001007   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 001010   200254 630500                    EPPR0   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 001011   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001012   000000 701000 xent               TSX1    VDG$ESCREECH
         3 001013   000000 011000                    NOP     0

     2480    10285    4            END CMD_STREAM_TYPE_CASES;

     2481    10286
     2482    10287
     2483    10288    4           IF NOT EOF_FLAG THEN DO;

  10288  3 001014   200235 234100                    SZN     EOF_FLAG,,AUTO
         3 001015   001126 604000 3                  TMI     s:10343

     2484    10289                   /*
     2485    10290                   *  The two cases to be handled are:
     2486    10291                   *  1.  Reading a record for the first time.  CMD$STREAM.POSITION#
     2487    10292                   *        is either 0 or 1 in this case.  (It may be 1 if
     2488    10293                   *        the record contains a VFC char.)
     2489    10294                   *  2.  Re-reading a record whose processing was interrupted
     2490    10295                   *        by a READ command.  .POSITION# is > 1 in this case.
     2491    10296                   */
     2492    10297    5              IF CMD$STREAM.INTREE$ ~= ADDR(NIL) THEN DO;

  10297  3 001016   000026 470400 xsym               LDP0    VD_6E+22
         3 001017   000026 236100                    LDQ     22,,PR0
         3 001020   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001021   001053 600000 3                  TZE     s:10311

     2493    10298    6                 IF CMD$STREAM.POSITION# > 0 THEN DO;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:327  

  10298  3 001022   000027 220100                    LDX0    23,,PR0
         3 001023   001126 604400 3                  TMOZ    s:10343

     2494    10299                         /* Strip some VD$IT_COMMANDs from front of chain */
     2495    10300    6                    N = CMD$STREAM.POSITION#;   /* # to strip */

  10300  3 001024   000027 236100                    LDQ     23,,PR0
         3 001025   000022 732000                    QRS     18
         3 001026   200240 756100                    STQ     N,,AUTO

     2496    10301    7                    DO WHILE CMD$STREAM.INTREE$ ~= ADDR(NIL)

  10301  3 001027   001044 710000 3                  TRA     s:10308

     2497    10302    7                      AND N > 0;
     2498    10303    7                       IT_COMMAND$ = CMD$STREAM.INTREE$;

  10303  3 001030   000026 470400 xsym               LDP0    VD_6E+22
         3 001031   000026 236100                    LDQ     22,,PR0
         3 001032   200241 756100                    STQ     IT_COMMAND$,,AUTO

     2499    10304    7                       CMD$STREAM.INTREE$ = IT$COMMAND.FLINK$;

  10304  3 001033   200241 471500                    LDP1    IT_COMMAND$,,AUTO
         3 001034   100002 236100                    LDQ     2,,PR1
         3 001035   000026 756100                    STQ     22,,PR0

     2500    10305    7                       CALL VDG$OFREE (IT$COMMAND)

  10305  3 001036   200241 630500                    EPPR0   IT_COMMAND$,,AUTO
         3 001037   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001040   000000 701000 xent               TSX1    VDG$OFREE
         3 001041   001135 702000 3                  TSX2    WLOAD_FAILED

     2501    10306    7                         ALTRET (OFREE_FAILED);
     2502    10307    7                       N = N - 1;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:328  

  10307  3 001042   000001 336007                    LCQ     1,DL
         3 001043   200240 056100                    ASQ     N,,AUTO

     2503    10308    7                       END;

  10308  3 001044   000026 470400 xsym               LDP0    VD_6E+22
         3 001045   000026 236100                    LDQ     22,,PR0
         3 001046   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001047   001052 600000 3                  TZE     s:10310
         3 001050   200240 235100                    LDA     N,,AUTO
         3 001051   001030 605400 3                  TPNZ    s:10303

     2504    10309    6                    END;

     2505    10310    5                 END;

  10310  3 001052   001126 710000 3                  TRA     s:10343

     2506    10311    5              ELSE IF CMD$STREAM.RECORD$ ~= ADDR(NIL) THEN DO;

  10311  3 001053   000025 236100                    LDQ     21,,PR0
         3 001054   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001055   001126 600000 3                  TZE     s:10343

     2507    10312    5                    VD_BUFFER$ = CMD$STREAM.RECORD$;

  10312  3 001056   200242 756100                    STQ     VD_BUFFER$,,AUTO

     2508    10313    6                    IF CMD$STREAM.POSITION# < 2 THEN DO;

  10313  3 001057   000027 220100                    LDX0    23,,PR0
         3 001060   000002 100003                    CMPX0   2,DU
         3 001061   001074 605000 3                  TPL     s:10325

     2509    10314                            /*
     2510    10315                            *  This is case 1: we just read a record for the first
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:329  
     2511    10316                            *       time.
     2512    10317                            *  Check for prompt at start of record.
     2513    10318                            */
     2514    10319    6                       IF SUBSTR(VD$BUFFER.BYTES, CMD$STREAM.POSITION#,

  10319  3 001062   200242 471500                    LDP1    VD_BUFFER$,,AUTO
         3 001063   100002 221100                    LDX1    2,,PR1
         3 001064   000027 236100                    LDQ     23,,PR0
         3 001065   000022 732000                    QRS     18
         3 001066   040000 106506                    CMPC    fill='040'O
         3 001067   100002 400001                    ADSC9   2,Q,PR1                  cn=2,n=1
         3 001070   000013 000001 4                  ADSC9   11                       cn=0,n=1
         3 001071   001074 601000 3                  TNZ     s:10325

     2515    10320    6                         LENGTHC(%CHR_PROMPT)) = %CHR_PROMPT THEN
     2516    10321    6                          CMD$STREAM.POSITION# = CMD$STREAM.POSITION# +

  10321  3 001072   000001 622010                    EAX2    1,X0
         3 001073   000027 742100                    STX2    23,,PR0

     2517    10322    6                            LENGTHC(%CHR_PROMPT);
     2518    10323    6                       END;

     2519    10324
     2520    10325    6                    IF CMD$STREAM.POSITION# > 0 THEN DO;

  10325  3 001074   000027 220100                    LDX0    23,,PR0
         3 001075   001126 604400 3                  TMOZ    s:10343

     2521    10326                            /*
     2522    10327                            *  This ISN'T case 2!  Both cases may pass thru this code.
     2523    10328                            *  Case 1 may get here to strip a VFC char off the front
     2524    10329                            *    of the buffer.
     2525    10330                            *  Case 2 always gets here to strip the already-processed
     2526    10331                            *    commands off the front of the buffer.
     2527    10332                            */
     2528    10333    6                       VD$BUFFER.LENGTH# = MAXIMUM (0,
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:330  

  10333  3 001076   000027 236100                    LDQ     23,,PR0
         3 001077   000022 732000                    QRS     18
         3 001100   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 001101   200242 471500                    LDP1    VD_BUFFER$,,AUTO
         3 001102   100002 236100                    LDQ     2,,PR1
         3 001103   000022 732000                    QRS     18
         3 001104   200254 136100                    SBLQ    INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 001105   000000 116003                    CMPQ    0,DU
         3 001106   001110 605000 3                  TPL     s:10333+10
         3 001107   000000 236003                    LDQ     0,DU
         3 001110   000000 620006                    EAX0    0,QL
         3 001111   100002 740100                    STX0    2,,PR1

     2529    10334    6                         VD$BUFFER.LENGTH# - CMD$STREAM.POSITION#);
     2530    10335    6                       IF VD$BUFFER.LENGTH# > 0 THEN

  10335  3 001112   001123 604400 3                  TMOZ    s:10338

     2531    10336    6                          VD$BUFFER.BYTES = SUBSTR (VD$BUFFER.BYTES,

  10336  3 001113   000026 470400 xsym               LDP0    VD_6E+22
         3 001114   000027 236100                    LDQ     23,,PR0
         3 001115   000022 732000                    QRS     18
         3 001116   200254 740100                    STX0    INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 001117   200254 221100                    LDX1    INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 001120   040140 100546                    MLR     fill='040'O
         3 001121   100002 400010                    ADSC9   2,Q,PR1                  cn=2,n=*X0
         3 001122   100002 400011                    ADSC9   2,,PR1                   cn=2,n=*X1

     2532    10337    6                            CMD$STREAM.POSITION#, VD$BUFFER.LENGTH#);
     2533    10338    6                       CMD$STREAM.POSITION# = 0;

  10338  3 001123   000000 220003                    LDX0    0,DU
         3 001124   000026 470400 xsym               LDP0    VD_6E+22
         3 001125   000027 740100                    STX0    23,,PR0

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:331  
     2534    10339    6                       END;

     2535    10340    5                    END;

     2536    10341    4              END;

     2537    10342
     2538    10343    3           RETURN;

  10343  3 001126   200236 221300                    LDX1  ! @REPL+1,,AUTO
         3 001127   000001 702211                    TSX2  ! 1,X1

     2539    10344
     2540    10345
     2541    10346
     2542    10347    3   PREAD_FILE_READ_FAILED:
     2543    10348    3           CALL VDI$PREAD_FILE_CLOSE;

  10348  3 001130   000002 631400 xsym  PREAD_FILE_* EPPR1   B_VECTNIL+2
         3 001131   000000 701000 xent               TSX1    VDI$PREAD_FILE_CLOSE
         3 001132   000000 011000                    NOP     0

     2544    10349    3           ALTRETURN;

  10349  3 001133   200236 221300                    LDX1  ! @REPL+1,,AUTO
         3 001134   000000 702211                    TSX2  ! 0,X1

  10339  3 001135                       WLOAD_FAILED null
  10339  3 001135                       READ_FROM_M* null
  10339  3 001135                       OALLOC_FAIL* null
  10339  3 001135                       OFREE_FAILED null
     2545    10350
     2546    10351
     2547    10352    3   WLOAD_FAILED: ;
     2548    10353    3   READ_FROM_ME_FAILED: ;
     2549    10354    3   OALLOC_FAILED: ;
     2550    10355    3   OFREE_FAILED: ;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:332  
     2551    10356    3           ALTRETURN;

  10356  3 001135   200236 221300                    LDX1  ! @REPL+1,,AUTO
         3 001136   000000 702211                    TSX2  ! 0,X1

     2552    10357
     2553    10358    3   END CMD_STREAM_READ;
     2554    10359
     2555    10360
     2556    10361        %BOX (TITLE=READ_FROM_ME);

             10373    3   /***************************************************************************
             10375    3    *                                                                         *
             10379    3            *                                READ_FROM_ME                            *
             10381    3            *                                                                        *
             10383    3          ***************************************************************************/

     2557    10387
     2558    10388        /*I** NAME: READ_FROM_ME
     2559    10389            PARAMETERS:
     2560    10390                None.
     2561    10391            INPUT:
     2562    10392                CMD$STREAM - VD$CMD_STREAM at top of stack.  It must be a %CS_ME-type.
     2563    10393            OUTPUT:
     2564    10394                CMD$STREAM.RECORD$ will point to the new record from ME.
     2565    10395                CMD$STREAM.POSITION# will be set to 1 if the record read from ME has
     2566    10396                    a VFC character; else .POSITION# will be set to 0.
     2567    10397                EOF_FLAG will be set if we get EOF from ME.
     2568    10398                XUG_GETCMD.TREAD will be set if we got a command line we want to
     2569    10399                    process.
     2570    10400                VD_FORCE_READ_FROM may be set.
     2571    10401            DESCRIPTION:
     2572    10402                Read a record from ME (the terminal command window).  If we didn't
     2573    10403                get EOF, then check the activation character:  if EOM_COMMAND, ignore
     2574    10404                this read and start another one.
     2575    10405        */
     2576    10406
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:333  
     2577    10407    2   READ_FROM_ME: PROC ALTRET;

  10407  3 001137   200246 741300       READ_FROM_ME STX1  ! LOAD_FLAGS+2,,AUTO

     2578    10408
     2579    10409
     2580    10410        %FPT_READ (STCLASS=STATIC);
     2581    10449
     2582    10450
     2583    10451    3   DCL BUF_SIZE SBIN;
     2584    10452    3   DCL VD_BUFFER$ PTR;
     2585    10453    3   DCL READ_DCB$ PTR;
     2586    10454    3   DCL ERR_CODE SBIN;
     2587    10455    3   DCL INTERRUPT_STATE_BEFORE_M$READ SBIN;
     2588    10456
     2589    10457
     2590    10458        %VD$BUFFER (NAME=VD$BUFFER, STCLASS="BASED(VD_BUFFER$)");
     2591    10516        %F$DCB (DCBN=READ$DCB, STCLASS="BASED(READ_DCB$)");
     2592    10573
     2593    10574
     2594    10575
     2595    10576    4           IF VD_LAST_CWIN_ACTIVITY = %LCA_SWITCH THEN DO;

  10576  3 001140   000000 235000 xsym               LDA     VD_LAST_CWIN_ACTIVITY
         3 001141   000004 115007                    CMPA    4,DL
         3 001142   001146 601000 3                  TNZ     s:10581

     2596    10577    4              CALL VDG$ERASE_COMMAND_WINDOW

  10577  3 001143   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 001144   000000 701000 xent               TSX1    VDG$ERASE_COMMAND_WINDOW
         3 001145   001425 702000 3                  TSX2    OALLOC_FAILED

     2597    10578    4                ALTRET (ERASE_COMMAND_WINDOW_FAILED);
     2598    10579    4              END;

     2599    10580
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:334  
     2600    10581    3           BUF_SIZE = (LENGTHC(VD$BUFFER_HEADER) + NB_BUF + %NB_PER_WORD - 1) /

  10581  3 001146   200011 236100                    LDQ     NB_BUF,,AUTO
         3 001147   000015 036007                    ADLQ    13,DL
         3 001150   000004 506007                    DIV     4,DL
         3 001151   200247 756100                    STQ     BUF_SIZE,,AUTO

     2601    10582    3             %NB_PER_WORD;
     2602    10583    4           IF CMD$STREAM.RECORD$ ~= ADDR(NIL) THEN DO;

  10583  3 001152   000026 470400 xsym               LDP0    VD_6E+22
         3 001153   000025 236100                    LDQ     21,,PR0
         3 001154   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001155   001174 600000 3                  TZE     s:10591

     2603    10584    4              VD_BUFFER$ = CMD$STREAM.RECORD$;

  10584  3 001156   200250 756100                    STQ     VD_BUFFER$,,AUTO

     2604    10585    5              IF VD$BUFFER.OBJECT.SIZE# < BUF_SIZE THEN DO;

  10585  3 001157   200250 471500                    LDP1    VD_BUFFER$,,AUTO
         3 001160   100000 236100                    LDQ     0,,PR1
         3 001161   000022 736000                    QLS     18
         3 001162   000022 732000                    QRS     18
         3 001163   200247 116100                    CMPQ    BUF_SIZE,,AUTO
         3 001164   001174 605000 3                  TPL     s:10591

     2605    10586    5                 CALL VDG$OFREE (VD$BUFFER)

  10586  3 001165   200250 630500                    EPPR0   VD_BUFFER$,,AUTO
         3 001166   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001167   000000 701000 xent               TSX1    VDG$OFREE
         3 001170   001425 702000 3                  TSX2    OALLOC_FAILED

     2606    10587    5                   ALTRET (OFREE_FAILED);
     2607    10588    5                 CMD$STREAM.RECORD$ = ADDR(NIL);
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:335  

  10588  3 001171   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 001172   000026 470400 xsym               LDP0    VD_6E+22
         3 001173   000025 756100                    STQ     21,,PR0

     2608    10589    5                 END;

     2609    10590    4              END;

     2610    10591    4           IF CMD$STREAM.RECORD$ = ADDR(NIL) THEN DO;

  10591  3 001174   000026 470400 xsym               LDP0    VD_6E+22
         3 001175   000025 236100                    LDQ     21,,PR0
         3 001176   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001177   001212 601000 3                  TNZ     s:10595

     2611    10592    4              CALL VDG$OALLOC (%CLS_BUFFER, CMD$STREAM.RECORD$, BUF_SIZE)

  10592  3 001200   200247 631500                    EPPR1   BUF_SIZE,,AUTO
         3 001201   200256 451500                    STP1    INTERRUPT_STATE_BEFORE_M$READ+3,,AUTO
         3 001202   000026 236000 xsym               LDQ     VD_6E+22
         3 001203   000025 036003                    ADLQ    21,DU
         3 001204   000010 235000 4                  LDA     8
         3 001205   200254 757100                    STAQ    INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 001206   200254 630500                    EPPR0   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 001207   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 001210   000000 701000 xent               TSX1    VDG$OALLOC
         3 001211   001425 702000 3                  TSX2    OALLOC_FAILED

     2612    10593    4                ALTRET (OALLOC_FAILED);
     2613    10594    4              END;

     2614    10595    3           VD_BUFFER$ = CMD$STREAM.RECORD$;

  10595  3 001212   000026 470400 xsym               LDP0    VD_6E+22
         3 001213   000025 236100                    LDQ     21,,PR0
         3 001214   200250 756100                    STQ     VD_BUFFER$,,AUTO
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:336  

     2615    10596    3           VD$BUFFER.LENGTH# = NB_BUF;

  10596  3 001215   200011 720100                    LXL0    NB_BUF,,AUTO
         3 001216   200250 471500                    LDP1    VD_BUFFER$,,AUTO
         3 001217   100002 740100                    STX0    2,,PR1

     2616    10597    3           FPT_READ.BUF_ = VECTOR(VD$BUFFER.BYTES);

  10597  3 001220   000000 635010                    EAA     0,X0
         3 001221   000002 731000                    ARS     2
         3 001222   000140 135007                    SBLA    96,DL
         3 001223   000014 036000 4                  ADLQ    12
         3 001224   000036 757000 2                  STAQ    FPT_READ+4

     2617    10598    3           FPT_READ.V.DCB# = XUG_GETCMD.INDCB#;

  10598  3 001225   000012 720000 xsym               LXL0    XUG_GETCMD+10
         3 001226   000042 740000 2                  STX0    FPT_READ+8

     2618    10599    3           READ_DCB$ = DCBADDR(FPT_READ.V.DCB#);

  10599  3 001227   000012 470400 4                  LDP0    10
         3 001230   000000 473500                    LDP3    0,,PR0
         3 001231   300000 236110                    LDQ     0,X0,PR3
         3 001232   200251 756100                    STQ     READ_DCB$,,AUTO

     2619    10600
     2620    10601    3   DO_UNTIL_GOT_A_REC:
     2621    10602    4           DO UNTIL EOF_FLAG OR XUG_GETCMD.TREAD#;

  10602  3 001233                       DO_UNTIL_GO* null
     2622    10603    4              ERR_CODE = 0;

  10603  3 001233   200252 450100                    STZ     ERR_CODE,,AUTO

     2623    10604    5              DO INHIBIT;
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:337  

     2624    10605    5                 INTERRUPT_STATE_BEFORE_M$READ = VD_6E.INTERRUPT.STATE#;

  10605  3 001234   000027 235200 xsym               LDA   ! VD_6E+23
         3 001235   000022 771200                    ARL   ! 18
         3 001236   200253 755300                    STA   ! INTERRUPT_STATE_BEFORE_M$READ,,AUTO

     2625    10606    5                 VD_6E.INTERRUPT.STATE# = %INST_READING;

  10606  3 001237   000002 220203                    LDX0  ! 2,DU
         3 001240   000027 740200 xsym               STX0  ! VD_6E+23

     2626    10607    5                 END;

     2627    10608
     2628    10609    4              CALL M$READ (FPT_READ)

  10609  3 001241   000032 630400 2                  EPPR0   FPT_READ
         3 001242   440000 713400                    CLIMB   alt,read
         3 001243   401400 401760                    pmme    nvectors=4
         3 001244   001246 702000 3                  TSX2    s:10611
         3 001245   001254 710000 3                  TRA     s:10615

     2629    10610    5              WHENALTRETURN DO;

     2630    10611    5                 ERR_CODE = B$TCB.ALT$->B$ALT.ERR.ERR#;

  10611  3 001246   000000 470400 xsym               LDP0    B$TCB$
         3 001247   000000 471500                    LDP1    0,,PR0
         3 001250   100102 236100                    LDQ     66,,PR1
         3 001251   000003 772000                    QRL     3
         3 001252   037777 376007                    ANQ     16383,DL
         3 001253   200252 756100                    STQ     ERR_CODE,,AUTO

     2631    10612    5                 END;

     2632    10613
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:338  
     2633    10614    5              DO INHIBIT;

     2634    10615    5                 VD_6E.INTERRUPT.STATE# = INTERRUPT_STATE_BEFORE_M$READ;

  10615  3 001254   200253 720300                    LXL0  ! INTERRUPT_STATE_BEFORE_M$READ,,AUTO
         3 001255   000027 740200 xsym               STX0  ! VD_6E+23

     2635    10616    5                 END;

     2636    10617
     2637    10618    5              IF ERR_CODE ~= 0 THEN DO;

  10618  3 001256   200252 235100                    LDA     ERR_CODE,,AUTO
         3 001257   001272 600000 3                  TZE     READ_COMPLETED_OK

     2638    10619    5                 IF ERR_CODE ~= %E$EOF OR B$JIT.MODE ~= %M_INT# THEN

  10619  3 001260   000006 115007                    CMPA    6,DL
         3 001261   001344 601000 3                  TNZ     CMD_WINDOW_READ_FAILED
         3 001262   000000 470400 xsym               LDP0    B$JIT$
         3 001263   000000 236100                    LDQ     0,,PR0
         3 001264   740000 376003                    ANQ     -16384,DU
         3 001265   140000 116003                    CMPQ    49152,DU
         3 001266   001344 601000 3                  TNZ     CMD_WINDOW_READ_FAILED

     2639    10620                         /* Non-EOF error, or EOF in batch/ghost/TP */
     2640    10621    5                    GOTO CMD_WINDOW_READ_FAILED;
     2641    10622    5                 EOF_FLAG = %TRUE;

  10622  3 001267   400000 236003                    LDQ     -131072,DU
         3 001270   200235 756100                    STQ     EOF_FLAG,,AUTO

     2642    10623    5                 END;

  10623  3 001271   001335 710000 3                  TRA     s:10654

     2643    10624    4              ELSE
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:339  
     2644    10625    5   READ_COMPLETED_OK: DO;

  10625  3 001272                       READ_COMPLE* null
     2645    10626    5                 VD$BUFFER.LENGTH# = READ$DCB.ARS#;

  10626  3 001272   200251 470500                    LDP0    READ_DCB$,,AUTO
         3 001273   000000 721100                    LXL1    0,,PR0
         3 001274   200250 471500                    LDP1    VD_BUFFER$,,AUTO
         3 001275   100002 741100                    STX1    2,,PR1

     2646    10627
     2647    10628    5                 EOMCHAR = READ$DCB.EOMCHAR#;

  10628  3 001276   200007 473500                    LDP3    @EOMCHAR,,AUTO
         3 001277   040100 100500                    MLR     fill='040'O
         3 001300   000003 600001                    ADSC9   3,,PR0                   cn=3,n=1
         3 001301   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1

     2648    10629    5                 IF READ$DCB.EOMVAL#.VALUE# = %EOM_COMMAND THEN

  10629  3 001302   000003 236100                    LDQ     3,,PR0
         3 001303   000377 376007                    ANQ     255,DL
         3 001304   000003 116007                    CMPQ    3,DL
         3 001305   001313 601000 3                  TNZ     s:10634

     2649    10630                             /* Ignore empty command line, start another one */
     2650    10631    5                    IF READ$DCB.ARS#=0 THEN EXIT READ_COMPLETED_OK;

  10631  3 001306   000000 235100                    LDA     0,,PR0
         3 001307   001335 600000 3                  TZE     s:10654

     2651    10632                             /* Otherwise, stay in the command window */
     2652    10633    5                    ELSE VD_FORCE_READ_FROM = %RF_COMMAND_WINDOW;

  10633  3 001310   000001 235007                    LDA     1,DL
         3 001311   000000 755000 xsym               STA     VD_FORCE_READ_FROM
         3 001312   001325 710000 3                  TRA     s:10650
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:340  

     2653    10634    5                 ELSE IF READ$DCB.EOMVAL#.VALUE# = %EOM_NEXT_ED_WINDOW THEN

  10634  3 001313   000016 116007                    CMPQ    14,DL
         3 001314   001325 600000 3                  TZE     s:10650

     2654    10635                            /*
     2655    10636                            *  Treat EOM_NEXT_ED_WINDOW like CR, but force next
     2656    10637                            *    read from editing window.
     2657    10638                            */
     2658    10639
     2659    10640    5                       ; /* ? */
     2660    10641    5                    ELSE IF READ$DCB.EOMVAL#.VALUE# = %EOM_ED_WINDOW

  10641  3 001315   000012 116007                    CMPQ    10,DL
         3 001316   001323 600000 3                  TZE     s:10647
         3 001317   000004 116007                    CMPQ    4,DL
         3 001320   001323 600000 3                  TZE     s:10647
         3 001321   000026 116007                    CMPQ    22,DL
         3 001322   001325 601000 3                  TNZ     s:10650

     2661    10642    5                         OR READ$DCB.EOMVAL#.VALUE# = %EOM_PREV_RECORD
     2662    10643    5                         OR READ$DCB.EOMVAL#.VALUE# = %EOM_SPLIT_RECORD THEN
     2663    10644                            /*  A <LF> in the command window means go to
     2664    10645                                the current editing window.  */
     2665    10646
     2666    10647    5                          VD_FORCE_READ_FROM = %RF_EDITING_WINDOW;

  10647  3 001323   000002 235007                    LDA     2,DL
         3 001324   000000 755000 xsym               STA     VD_FORCE_READ_FROM

     2667    10648
     2668    10649                            /* CR or other "normal" activations */
     2669    10650    5                 XUG_GETCMD.TREAD# = %TRUE;

  10650  3 001325   200000 236003                    LDQ     65536,DU
         3 001326   000006 256000 xsym               ORSQ    XUG_GETCMD+6
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:341  

     2670    10651    5                 CMD$STREAM.POSITION# = BITBIN(READ$DCB.DVBYTE.VFC#);

  10651  3 001327   000003 236100                    LDQ     3,,PR0
         3 001330   000041 772000                    QRL     33
         3 001331   000001 376007                    ANQ     1,DL
         3 001332   000000 621006                    EAX1    0,QL
         3 001333   000026 474400 xsym               LDP4    VD_6E+22
         3 001334   400027 741100                    STX1    23,,PR4

     2671    10652    5                 END READ_COMPLETED_OK;

     2672    10653
     2673    10654    4              END DO_UNTIL_GOT_A_REC;

  10654  3 001335   200235 234100                    SZN     EOF_FLAG,,AUTO
         3 001336   001342 604000 3                  TMI     s:10656
         3 001337   000006 236000 xsym               LDQ     XUG_GETCMD+6
         3 001340   200000 316003                    CANQ    65536,DU
         3 001341   001233 600000 3                  TZE     DO_UNTIL_GOT_A_REC

     2674    10655
     2675    10656    3           RETURN;

  10656  3 001342   200246 221300                    LDX1  ! LOAD_FLAGS+2,,AUTO
         3 001343   000001 702211                    TSX2  ! 1,X1

     2676    10657
     2677    10658
     2678    10659
     2679    10660    3   CMD_WINDOW_READ_FAILED:
     2680    10661    4           IF B$JIT.MODE ~= %M_INT# THEN DO;

  10661  3 001344   000000 470400 xsym  CMD_WINDOW_* LDP0    B$JIT$
         3 001345   000000 236100                    LDQ     0,,PR0
         3 001346   740000 376003                    ANQ     -16384,DU
         3 001347   140000 116003                    CMPQ    49152,DU
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:342  
         3 001350   001400 600000 3                  TZE     s:10672

     2681    10662                   /* Error while reading in batch is fatal */
     2682    10663    4              FATAL$ERR.ERR = B$TCB.ALT$->B$ALT.ERR;

  10663  3 001351   000000 471400 xsym               LDP1    B$TCB$
         3 001352   100000 473500                    LDP3    0,,PR1
         3 001353   300102 236100                    LDQ     66,,PR3
         3 001354   000031 474400 xsym               LDP4    VD_6E+25
         3 001355   400002 756100                    STQ     2,,PR4

     2683    10664    5              IF FATAL$ERR.ERR.CODE# = %E$EOF THEN DO;

  10664  3 001356   000031 473400 xsym               LDP3    VD_6E+25
         3 001357   300002 236100                    LDQ     2,,PR3
         3 001360   377770 376007                    ANQ     131064,DL
         3 001361   000060 116007                    CMPQ    48,DL
         3 001362   001371 601000 3                  TNZ     s:10668

     2684    10665    5                 FATAL$ERR.ERR = %CLEAR;

  10665  3 001363   300002 450100                    STZ     2,,PR3

     2685    10666    5                 FATAL$ERR.ERR.CODE# = %E$NO_MORE_COMMANDS;

  10666  3 001364   000031 473400 xsym               LDP3    VD_6E+25
         3 001365   300002 236100                    LDQ     2,,PR3
         3 001366   000003 376000 4                  ANQ     3
         3 001367   001100 276007                    ORQ     576,DL
         3 001370   300002 756100                    STQ     2,,PR3

     2686    10667    5                 END;

     2687    10668    4              FATAL$ERR.FLAGLEV# = %FLV_FATAL;

  10668  3 001371   000004 221003                    LDX1    4,DU
         3 001372   000031 473400 xsym               LDP3    VD_6E+25
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:343  
         3 001373   300003 741100                    STX1    3,,PR3

     2688    10669    4              FATAL$ERR.DCB# = FPT_READ.V.DCB#;

  10669  3 001374   000042 222000 2                  LDX2    FPT_READ+8
         3 001375   000031 473400 xsym               LDP3    VD_6E+25
         3 001376   300004 742100                    STX2    4,,PR3

     2689    10670    4              END;

  10670  3 001377   001423 710000 3                  TRA     s:10678

     2690    10671    4           ELSE DO;

     2691    10672    4              CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

  10672  3 001400   200231 631500                    EPPR1   VD_ERR$,,AUTO
         3 001401   200255 451500                    STP1    INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 001402   000002 236000 4                  LDQ     2
         3 001403   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 001404   200254 630500                    EPPR0   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 001405   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001406   000000 701000 xent               TSX1    VDG$OALLOC
         3 001407   001425 702000 3                  TSX2    OALLOC_FAILED

     2692    10673    4                ALTRET (OALLOC_FAILED);
     2693    10674    4              VD$ERR.ERR = B$TCB.ALT$->B$ALT.ERR;

  10674  3 001410   000000 470400 xsym               LDP0    B$TCB$
         3 001411   000000 471500                    LDP1    0,,PR0
         3 001412   100102 236100                    LDQ     66,,PR1
         3 001413   200231 473500                    LDP3    VD_ERR$,,AUTO
         3 001414   300002 756100                    STQ     2,,PR3

     2694    10675    4              VD$ERR.FLAGLEV# = %FLV_SERIOUS;

  10675  3 001415   000003 220003                    LDX0    3,DU
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:344  
         3 001416   200231 471500                    LDP1    VD_ERR$,,AUTO
         3 001417   100003 740100                    STX0    3,,PR1

     2695    10676    4              VD$ERR.DCB# = FPT_READ.V.DCB#;

  10676  3 001420   000042 221000 2                  LDX1    FPT_READ+8
         3 001421   200231 471500                    LDP1    VD_ERR$,,AUTO
         3 001422   100004 741100                    STX1    4,,PR1

     2696    10677    4              END;

     2697    10678    3           ALTRETURN;

  10678  3 001423   200246 221300                    LDX1  ! LOAD_FLAGS+2,,AUTO
         3 001424   000000 702211                    TSX2  ! 0,X1

  10676  3 001425                       OALLOC_FAIL* null
  10676  3 001425                       OFREE_FAILED null
  10676  3 001425                       ERASE_COMMA* null
     2698    10679
     2699    10680
     2700    10681    3   OALLOC_FAILED: ;
     2701    10682    3   OFREE_FAILED: ;
     2702    10683    3   ERASE_COMMAND_WINDOW_FAILED: ;
     2703    10684    3           ALTRETURN;

  10684  3 001425   200246 221300                    LDX1  ! LOAD_FLAGS+2,,AUTO
         3 001426   000000 702211                    TSX2  ! 0,X1

     2704    10685
     2705    10686    3   END READ_FROM_ME;
     2706    10687
     2707    10688
     2708    10689                %BOX (TITLE=POP_STACK_AND_POSTN);

             10701    3   /***************************************************************************
             10703    3    *                                                                         *
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:345  
             10707    3            *                            POP_STACK_AND_POSTN                         *
             10709    3            *                                                                        *
             10711    3          ***************************************************************************/

     2709    10715
     2710    10716        /*I** NAME: POP_STACK_AND_POSTN
     2711    10717            PARAMETERS:
     2712    10718                None.
     2713    10719            INPUT:
     2714    10720                CMD$STREAM - VD$CMD_STREAM at the top of the stack.
     2715    10721            OUTPUT:
     2716    10722                VD_6E.CMD_STREAM$ will be modified.  At exit, it will always
     2717    10723                    point to a VD$CMD_STREAM for what is now the current
     2718    10724                    command stream.
     2719    10725            DESCRIPTION:
     2720    10726               If eof is reached on the primary command stream, terminate 6EDIT.
     2721    10727               Otherwise:
     2722    10728                Close/free the top entry of the command stream stack and
     2723    10729                    pop the stack.
     2724    10730                If the stack is now empty, push an entry for the command window.
     2725    10731                If the top entry on the stack is now a READ-file, open the
     2726    10732                    file and position it to where we left off.
     2727    10733        */
     2728    10734
     2729    10735    2   POP_STACK_AND_POSTN: PROC ALTRET;

  10735  3 001427   200236 741300       POP_STACK_A* STX1  ! @REPL+1,,AUTO

     2730    10736
     2731    10737
     2732    10738    3   DCL I UBIN;
     2733    10739    3   DCL SINK$ PTR;
     2734    10740
     2735    10741
     2736    10742
     2737    10743    4           IF CMD$STREAM.TYPE# = %CS_ME THEN DO;

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:346  
  10743  3 001430   000026 470400 xsym               LDP0    VD_6E+22
         3 001431   000002 220100                    LDX0    2,,PR0
         3 001432   000002 100003                    CMPX0   2,DU
         3 001433   001440 601000 3                  TNZ     s:10746

     2738    10744    4              CALL VDI$CEND_GLOBAL;    /* Never returns!!! */

  10744  3 001434   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 001435   000000 701000 xent               TSX1    VDI$CEND_GLOBAL
         3 001436   000000 011000                    NOP     0

     2739    10745    4              END;

  10745  3 001437   001447 710000 3                  TRA     s:10751

     2740    10746    3           ELSE IF CMD$STREAM.TYPE# = %CS_FILE

  10746  3 001440   000003 100003                    CMPX0   3,DU
         3 001441   001444 600000 3                  TZE     s:10748
         3 001442   000004 100003                    CMPX0   4,DU
         3 001443   001447 601000 3                  TNZ     s:10751

     2741    10747    4                OR CMD$STREAM.TYPE# = %CS_DCB THEN DO;

     2742    10748    4                 CALL VDI$PREAD_FILE_CLOSE

  10748  3 001444   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 001445   000000 701000 xent               TSX1    VDI$PREAD_FILE_CLOSE
         3 001446   001517 702000 3                  TSX2    PREAD_FILE_CLOSE_FAILED

     2743    10749    4                   ALTRET (PREAD_FILE_CLOSE_FAILED);
     2744    10750    4                 END;

     2745    10751    3           CALL VDG$OFREE (CMD$STREAM)

  10751  3 001447   000026 630400 xsym               EPPR0   VD_6E+22
         3 001450   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:347  
         3 001451   000000 701000 xent               TSX1    VDG$OFREE
         3 001452   001517 702000 3                  TSX2    PREAD_FILE_CLOSE_FAILED

     2746    10752    3             ALTRET (OFREE_FAILED);
     2747    10753
     2748    10754    4           IF VD_6E.CMD_STREAM$ = ADDR(NIL) THEN DO;

  10754  3 001453   000026 236000 xsym               LDQ     VD_6E+22
         3 001454   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001455   001471 601000 3                  TNZ     s:10760

     2749    10755    4              CALL VDG$OALLOC (%CLS_CMD_STREAM, SINK$)

  10755  3 001456   200240 630500                    EPPR0   SINK$,,AUTO
         3 001457   200255 450500                    STP0    INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 001460   000015 236000 4                  LDQ     13
         3 001461   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 001462   200254 630500                    EPPR0   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 001463   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001464   000000 701000 xent               TSX1    VDG$OALLOC
         3 001465   001517 702000 3                  TSX2    PREAD_FILE_CLOSE_FAILED

     2750    10756    4                ALTRET (OALLOC_FAILED);
     2751    10757    4              CMD$STREAM.TYPE# = %CS_ME;

  10757  3 001466   000002 220003                    LDX0    2,DU
         3 001467   000026 470400 xsym               LDP0    VD_6E+22
         3 001470   000002 740100                    STX0    2,,PR0

     2752    10758    4              END;

     2753    10759
     2754    10760    3           IF CMD$STREAM.TYPE# = %CS_FILE

  10760  3 001471   000026 470400 xsym               LDP0    VD_6E+22
         3 001472   000002 220100                    LDX0    2,,PR0
         3 001473   000003 100003                    CMPX0   3,DU
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:348  
         3 001474   001477 600000 3                  TZE     s:10762
         3 001475   000004 100003                    CMPX0   4,DU
         3 001476   001510 601000 3                  TNZ     s:10771

     2755    10761    4             OR CMD$STREAM.TYPE# = %CS_DCB THEN DO;

     2756    10762    4              CALL VDI$PREAD_FILE_CLOSE

  10762  3 001477   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 001500   000000 701000 xent               TSX1    VDI$PREAD_FILE_CLOSE
         3 001501   001517 702000 3                  TSX2    PREAD_FILE_CLOSE_FAILED

     2757    10763    4                ALTRET (PREAD_FILE_CLOSE_FAILED);
     2758    10764    4              CALL VDI$PREAD_FILE_OPEN

  10764  3 001502   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 001503   000000 701000 xent               TSX1    VDI$PREAD_FILE_OPEN
         3 001504   001517 702000 3                  TSX2    PREAD_FILE_CLOSE_FAILED

     2759    10765    4                ALTRET (PREAD_FILE_OPEN_FAILED);
     2760    10766    4              CALL VDI$PREAD_FILE_POSITION

  10766  3 001505   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 001506   000000 701000 xent               TSX1    VDI$PREAD_FILE_POSITION
         3 001507   001512 702000 3                  TSX2    PREAD_FILE_POSITION_FAILED

     2761    10767    4                ALTRET (PREAD_FILE_POSITION_FAILED);
     2762    10768
     2763    10769    4              END;

     2764    10770
     2765    10771    3           RETURN;

  10771  3 001510   200236 221300                    LDX1  ! @REPL+1,,AUTO
         3 001511   000001 702211                    TSX2  ! 1,X1

     2766    10772
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:349  
     2767    10773
     2768    10774
     2769    10775    3   PREAD_FILE_POSITION_FAILED:
     2770    10776    3           CALL VDI$PREAD_FILE_CLOSE;

  10776  3 001512   000002 631400 xsym  PREAD_FILE_* EPPR1   B_VECTNIL+2
         3 001513   000000 701000 xent               TSX1    VDI$PREAD_FILE_CLOSE
         3 001514   000000 011000                    NOP     0

     2771    10777    3           ALTRETURN;

  10777  3 001515   200236 221300                    LDX1  ! @REPL+1,,AUTO
         3 001516   000000 702211                    TSX2  ! 0,X1

  10760  3 001517                       PREAD_FILE_* null
     2772    10778
     2773    10779
     2774    10780    3   PREAD_FILE_CLOSE_FAILED: ;
     2775    10781    3   OFREE_FAILED: ;

  10781  3 001517                       OFREE_FAILED null
  10781  3 001517                       OALLOC_FAIL* null
  10781  3 001517                       PREAD_FILE_* null
     2776    10782    3   OALLOC_FAILED: ;
     2777    10783    3   PREAD_FILE_OPEN_FAILED: ;
     2778    10784    3           ALTRETURN;

  10784  3 001517   200236 221300                    LDX1  ! @REPL+1,,AUTO
         3 001520   000000 702211                    TSX2  ! 0,X1

     2779    10785
     2780    10786    3   END POP_STACK_AND_POSTN;
     2781    10787
     2782    10788    2   END READ_COMMAND_RECORD;
     2783    10789
     2784    10790
     2785    10791                %BOX (TITLE="FIND_TOKEN and FIND_FID", PAGE=YES);
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:350  
             10799    2
             10803    2   /***************************************************************************
             10805    2    *                                                                         *
             10809    2            *                          FIND_TOKEN and FIND_FID                       *
             10811    2            *                                                                        *
             10813    2          ***************************************************************************/

     2786    10817
     2787    10818        /*I* NAME: FIND_TOKEN and FIND_FID
     2788    10819            PARAMETERS:
     2789    10820                SCAN_INDEX - Index into CMD$RECORD.BYTES of next char to scan
     2790    10821                    for token.
     2791    10822                TOKEN - Unintialized VD$TEXTC_REMOTE with MXNB = %MXNB_NAME_VALUE.
     2792    10823            INPUT:
     2793    10824                CMD$RECORD - VD$BUFFER containing the command record.
     2794    10825                D$STRING - Based VD$BUFFER containing the current string
     2795    10826                    which is used to delimit string literals (that is,
     2796    10827                    the value of the $STRING predefined name).
     2797    10828            OUTPUT:
     2798    10829                If we don't find any more tokens/fids in the command record:
     2799    10830                    SCAN_INDEX will contain CMD$RECORD.LENGTH#.
     2800    10831                    TOKEN.LENGTH# will be 0.
     2801    10832                If we do find another token/fid in the command record:
     2802    10833                    SCAN_INDEX will contain the index into CMD$RECORD.BYTES
     2803    10834                        of the found token/fid.
     2804    10835                    TOKEN.LENGTH# will contain the length of the found token/fid.
     2805    10836                    TOKEN.BYTES will contain the found token/fid.
     2806    10837            DESCRIPTION:
     2807    10838                Starting at SCAN_INDEX, scan CMD$RECORD.BYTES for the next
     2808    10839                    non-literal token or for the next fid.
     2809    10840                If we find a literal number or string, skip it.
     2810    10841                If we find a comment, skip it.
     2811    10842                If we don't find any more non-literal tokens or fids in
     2812    10843                    CMD$RECORD.BYTES, return with SCAN_INDEX pointing to the
     2813    10844                    end of CMD$RECORD.BYTES.
     2814    10845        */
     2815    10846
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:351  
     2816    10847    1   FIND_TOKEN: PROC (SCAN_INDEX, TOKEN) ALTRET;

  10847  3 001521   200232 741300       FIND_TOKEN   STX1  ! VD_ERR$+1,,AUTO

     2817    10848    2   DCL SCAN_INDEX UBIN;
     2818    10849        %VD_TEXTC_REMOTE (NAME=TOKEN, STCLASS=PARAM, MXNB=%MXNB_NAME_VALUE);
     2819    10912
     2820    10913
     2821    10914    2   DCL 1 XLATE_FID_CHAR_CLASS ALIGNED CONSTANT,
     2822    10915    2         2 * (0:511) UBIN BYTE CALIGNED INIT(
     2823    10916    2       %CCL_WHSP * %ASCBIN(CHR_SPACE),                 /* 000 - 037 */
     2824    10917    2       %CCL_WHSP, %CCL_RES, %CCL_RES, %CCL_NAME,       /* 040 - 043 */
     2825    10918    2       %CCL_NAME, %CCL_RES, %CCL_RES, %CCL_RES,        /* 044 - 047 */
     2826    10919    2       %CCL_RES, %CCL_RES, %CCL_NAME, %CCL_RES,        /* 050 - 053 */
     2827    10920    2       %CCL_RES, %CCL_NAME, %CCL_NAME, %CCL_NAME,      /* 054 - 057 */
     2828    10921    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 060 - 063 */
     2829    10922    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 064 - 067 */
     2830    10923    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_RES,      /* 070 - 073 */
     2831    10924    2       %CCL_RES, %CCL_RES, %CCL_RES, %CCL_NAME,        /* 074 - 077 */
     2832    10925    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 100 - 103 */
     2833    10926    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 104 - 107 */
     2834    10927    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 110 - 113 */
     2835    10928    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 114 - 117 */
     2836    10929    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 120 - 123 */
     2837    10930    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 124 - 127 */
     2838    10931    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_RES,      /* 130 - 133 */
     2839    10932    2       %CCL_RES, %CCL_RES, %CCL_RES, %CCL_NAME,        /* 134 - 137 */
     2840    10933    2       %CCL_RES, %CCL_NAME, %CCL_NAME, %CCL_NAME,      /* 140 - 143 */
     2841    10934    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 144 - 147 */
     2842    10935    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 150 - 153 */
     2843    10936    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 154 - 157 */
     2844    10937    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 160 - 163 */
     2845    10938    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_NAME,     /* 164 - 167 */
     2846    10939    2       %CCL_NAME, %CCL_NAME, %CCL_NAME, %CCL_RES,      /* 170 - 173 */
     2847    10940    2       %CCL_RES, %CCL_RES, %CCL_RES, %CCL_WHSP,        /* 174 - 177 */
     2848    10941    2       %CCL_WHSP*0);                                   /* 200 - 777 */
     2849    10942
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:352  
     2850    10943
     2851    10944
     2852    10945    2   DCL CLASS UBIN;
     2853    10946    2   DCL CLASS_TABLE$ PTR;
     2854    10947
     2855    10948
     2856    10949    2   DCL 1 CLASS$TABLE ALIGNED BASED(CLASS_TABLE$),
     2857    10950    2         2 C (0:0) UBIN BYTE CALIGNED;
     2858    10951
     2859    10952
     2860    10953
     2861    10954    2           CLASS_TABLE$ = ADDR(VD_XLATE_CHAR_CLASS);

  10954  3 001522   000016 236000 4                  LDQ     14
         3 001523   200236 756100                    STQ     CLASS_TABLE$,,AUTO

     2862    10955    2           GOTO COMMON_ENTRY;

  10955  3 001524   001530 710000 3                  TRA     COMMON_ENTRY

     2863    10956
     2864    10957
     2865    10958    2   FIND_FID: ENTRY (SCAN_INDEX, TOKEN) ALTRET;

  10958  3 001525   200232 741300       FIND_FID     STX1  ! VD_ERR$+1,,AUTO

     2866    10959    2           CLASS_TABLE$ = ADDR(XLATE_FID_CHAR_CLASS);

  10959  3 001526   000017 236000 4                  LDQ     15
         3 001527   200236 756100                    STQ     CLASS_TABLE$,,AUTO

     2867    10960
     2868    10961
     2869    10962    2   COMMON_ENTRY:
     2870    10963    2           TOKEN.LENGTH# = 0;

  10963  3 001530   200234 470500       COMMON_ENTRY LDP0    @TOKEN,,AUTO
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:353  
         3 001531   000000 236003                    LDQ     0,DU
         3 001532   000002 552140                    STBQ    2,'40'O,PR0

     2871    10964
     2872    10965    2   LOOK_FOR_RETURNABLE_TOKEN:
     2873    10966    3           DO WHILE (SCAN_INDEX < CMD$RECORD.LENGTH#);

  10966  3 001533   200233 471500       LOOK_FOR_RE* LDP1    @SCAN_INDEX,,AUTO
         3 001534   200012 473500                    LDP3    CMD_RECORD$,,AUTO
         3 001535   300002 236100                    LDQ     2,,PR3
         3 001536   000022 732000                    QRS     18
         3 001537   002136 604000 3                  TMI     s:11034
         3 001540   100000 116100                    CMPQ    0,,PR1
         3 001541   002136 602000 3                  TNC     s:11034
         3 001542   002136 600000 3                  TZE     s:11034

     2874    10967    3              IF SCAN_INDEX <= (CMD$RECORD.LENGTH# - D$STRING.LENGTH#)

  10967  3 001543   000004 470400 1                  LDP0    PTR_$STRING$
         3 001544   000002 236100                    LDQ     2,,PR0
         3 001545   000022 732000                    QRS     18
         3 001546   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 001547   200012 471500                    LDP1    CMD_RECORD$,,AUTO
         3 001550   100002 236100                    LDQ     2,,PR1
         3 001551   000022 732000                    QRS     18
         3 001552   200254 136100                    SBLQ    INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 001553   200233 473500                    LDP3    @SCAN_INDEX,,AUTO
         3 001554   001574 604000 3                  TMI     s:10973
         3 001555   300000 116100                    CMPQ    0,,PR3
         3 001556   001574 602000 3                  TNC     s:10973
         3 001557   100002 220100                    LDX0    2,,PR1
         3 001560   300000 235100                    LDA     0,,PR3
         3 001561   000002 221100                    LDX1    2,,PR0
         3 001562   000002 222100                    LDX2    2,,PR0
         3 001563   040140 106545                    CMPC    fill='040'O
         3 001564   100002 400011                    ADSC9   2,A,PR1                  cn=2,n=*X1
         3 001565   000002 400012                    ADSC9   2,,PR0                   cn=2,n=*X2
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:354  
         3 001566   001574 601000 3                  TNZ     s:10973

     2875    10968    3                AND SUBSTR(CMD$RECORD.BYTES, SCAN_INDEX, D$STRING.LENGTH#) =
     2876    10969    4                D$STRING.BYTES THEN DO;

     2877    10970    4                 CALL SKIP_STRING_LITERAL (SCAN_INDEX)

  10970  3 001567   200233 236100                    LDQ     @SCAN_INDEX,,AUTO
         3 001570   200241 756100                    STQ     IT_COMMAND$,,AUTO
         3 001571   002547 701000 3                  TSX1    SKIP_STRING_LITERAL
         3 001572   002140 702000 3                  TSX2    SKIP_STRING_LITERAL_FAILED

     2878    10971    4                   ALTRET (SKIP_STRING_LITERAL_FAILED);
     2879    10972    4                 END;

  10972  3 001573   002126 710000 3                  TRA     s:11032

     2880    10973    3              ELSE IF VD$COMMENT.LENGTH# > 0

  10973  3 001574   000000 474400 1                  LDP4    PTR_$COMMENT$
         3 001575   400002 220100                    LDX0    2,,PR4
         3 001576   001642 604400 3                  TMOZ    s:10982
         3 001577   400002 236100                    LDQ     2,,PR4
         3 001600   000022 732000                    QRS     18
         3 001601   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 001602   100002 236100                    LDQ     2,,PR1
         3 001603   000022 732000                    QRS     18
         3 001604   200254 136100                    SBLQ    INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 001605   001642 604000 3                  TMI     s:10982
         3 001606   300000 116100                    CMPQ    0,,PR3
         3 001607   001642 602000 3                  TNC     s:10982
         3 001610   100002 220100                    LDX0    2,,PR1
         3 001611   300000 235100                    LDA     0,,PR3
         3 001612   400002 221100                    LDX1    2,,PR4
         3 001613   400002 222100                    LDX2    2,,PR4
         3 001614   040140 106545                    CMPC    fill='040'O
         3 001615   100002 400011                    ADSC9   2,A,PR1                  cn=2,n=*X1
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:355  
         3 001616   400002 400012                    ADSC9   2,,PR4                   cn=2,n=*X2
         3 001617   001642 601000 3                  TNZ     s:10982

     2881    10974    3                   AND SCAN_INDEX <= (CMD$RECORD.LENGTH# - VD$COMMENT.LENGTH#)
     2882    10975    3                   AND SUBSTR(CMD$RECORD.BYTES, SCAN_INDEX, VD$COMMENT.LENGTH#) =
     2883    10976    4                   VD$COMMENT.BYTES THEN DO;

     2884    10977    4                    CALL INDEX (SCAN_INDEX, VD$COMMENT.BYTES,

  10977  3 001620   400002 236100                    LDQ     2,,PR4
         3 001621   000022 732000                    QRS     18
         3 001622   300000 036100                    ADLQ    0,,PR3
         3 001623   300000 631500                    EPPR1   0,,PR3
         3 001624   400000 633500                    EPPR3   0,,PR4
         3 001625   000012 221003                    LDX1    10,DU
         3 001626   300000 500511                    A9BD    0,X1,PR3
         3 001627   000000 623012                    EAX3    0,X2
         3 001630   200012 470500                    LDP0    CMD_RECORD$,,AUTO
         3 001631   000000 500511                    A9BD    0,X1,PR0
         3 001632   000000 701000 xent               TSX1    X66_INDEX
         3 001633   000000 011000                    NOP     0

     2885    10978    4                      CMD$RECORD.BYTES, SCAN_INDEX + VD$COMMENT.LENGTH#);
     2886    10979    4                    SCAN_INDEX = SCAN_INDEX + VD$COMMENT.LENGTH#;

  10979  3 001634   200233 470500                    LDP0    @SCAN_INDEX,,AUTO
         3 001635   400002 236100                    LDQ     2,,PR4
         3 001636   000022 732000                    QRS     18
         3 001637   000000 036100                    ADLQ    0,,PR0
         3 001640   000000 756100                    STQ     0,,PR0

     2887    10980    4                    END;

  10980  3 001641   002126 710000 3                  TRA     s:11032

     2888    10981    4                 ELSE DO;

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:356  
     2889    10982    4                    CLASS = CLASS$TABLE.C

  10982  3 001642   100002 220100                    LDX0    2,,PR1
         3 001643   300000 235100                    LDA     0,,PR3
         3 001644   000100 101505                    MRL     fill='000'O
         3 001645   100002 400001                    ADSC9   2,A,PR1                  cn=2,n=1
         3 001646   200254 000004                    ADSC9   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO cn=0,n=4
         3 001647   200254 236100                    LDQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 001650   200236 475500                    LDP5    CLASS_TABLE$,,AUTO
         3 001651   000100 101506                    MRL     fill='000'O
         3 001652   500000 000001                    ADSC9   0,Q,PR5                  cn=0,n=1
         3 001653   200235 000004                    ADSC9   CLASS,,AUTO              cn=0,n=4

     2890    10983    4                      (ASCBIN (SUBSTR (CMD$RECORD.BYTES, SCAN_INDEX, 1)));
     2891    10984
     2892    10985    5                    DO CASE (CLASS);

  10985  3 001654   200235 235100                    LDA     CLASS,,AUTO
         3 001655   000006 115007                    CMPA    6,DL
         3 001656   001660 602005 3                  TNC     s:10985+4,AL
         3 001657   002116 710000 3                  TRA     s:11028
         3 001660   001734 710000 3                  TRA     s:10998
         3 001661   001740 710000 3                  TRA     s:11001
         3 001662   001666 710000 3                  TRA     s:10988
         3 001663   001734 710000 3                  TRA     s:10998
         3 001664   001666 710000 3                  TRA     s:10988
         3 001665   002025 710000 3                  TRA     s:11015

     2893    10986
     2894    10987    5                     CASE (%CCL_NUM, %CCL_DOT);

     2895    10988    5                       SCAN_INDEX = SCAN_INDEX + 1;

  10988  3 001666   300000 235100                    LDA     0,,PR3
         3 001667   000001 035007                    ADLA    1,DL
         3 001670   300000 755100                    STA     0,,PR3

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:357  
     2896    10989    6                       DO WHILE (SCAN_INDEX < CMD$RECORD.LENGTH#)

  10989  3 001671   001716 710000 3                  TRA     s:10995

     2897    10990    6                         AND (CLASS = %CCL_NUM OR CLASS = %CCL_DOT);
     2898    10991    6                          CLASS = CLASS$TABLE.C

  10991  3 001672   200012 470500                    LDP0    CMD_RECORD$,,AUTO
         3 001673   000002 220100                    LDX0    2,,PR0
         3 001674   200233 471500                    LDP1    @SCAN_INDEX,,AUTO
         3 001675   100000 235100                    LDA     0,,PR1
         3 001676   000100 101505                    MRL     fill='000'O
         3 001677   000002 400001                    ADSC9   2,A,PR0                  cn=2,n=1
         3 001700   200254 000004                    ADSC9   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO cn=0,n=4
         3 001701   200254 236100                    LDQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 001702   200236 473500                    LDP3    CLASS_TABLE$,,AUTO
         3 001703   000100 101506                    MRL     fill='000'O
         3 001704   300000 000001                    ADSC9   0,Q,PR3                  cn=0,n=1
         3 001705   200235 000004                    ADSC9   CLASS,,AUTO              cn=0,n=4

     2899    10992    6                            (ASCBIN (SUBSTR (CMD$RECORD.BYTES, SCAN_INDEX, 1)));
     2900    10993    6                          IF CLASS = %CCL_NUM OR CLASS = %CCL_DOT THEN

  10993  3 001706   200235 235100                    LDA     CLASS,,AUTO
         3 001707   000004 115007                    CMPA    4,DL
         3 001710   001713 600000 3                  TZE     s:10994
         3 001711   000002 115007                    CMPA    2,DL
         3 001712   001716 601000 3                  TNZ     s:10995

     2901    10994    6                             SCAN_INDEX = SCAN_INDEX + 1;

  10994  3 001713   100000 235100                    LDA     0,,PR1
         3 001714   000001 035007                    ADLA    1,DL
         3 001715   100000 755100                    STA     0,,PR1

     2902    10995    6                          END;

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:358  
  10995  3 001716   200233 470500                    LDP0    @SCAN_INDEX,,AUTO
         3 001717   200012 471500                    LDP1    CMD_RECORD$,,AUTO
         3 001720   100002 236100                    LDQ     2,,PR1
         3 001721   000022 732000                    QRS     18
         3 001722   001733 604000 3                  TMI     s:10995+13
         3 001723   000000 116100                    CMPQ    0,,PR0
         3 001724   001733 602000 3                  TNC     s:10995+13
         3 001725   001733 600000 3                  TZE     s:10995+13
         3 001726   200235 235100                    LDA     CLASS,,AUTO
         3 001727   000004 115007                    CMPA    4,DL
         3 001730   001672 600000 3                  TZE     s:10991
         3 001731   000002 115007                    CMPA    2,DL
         3 001732   001672 600000 3                  TZE     s:10991
         3 001733   002126 710000 3                  TRA     s:11032

     2903    10996
     2904    10997    5                     CASE (%CCL_WHSP, %CCL_RES);

     2905    10998    5                       SCAN_INDEX = SCAN_INDEX + 1;

  10998  3 001734   300000 235100                    LDA     0,,PR3
         3 001735   000001 035007                    ADLA    1,DL
         3 001736   300000 755100                    STA     0,,PR3
         3 001737   002126 710000 3                  TRA     s:11032

     2906    10999
     2907    11000    5                     CASE (%CCL_SPEC);

     2908    11001    5                       TOKEN.LENGTH# = 1;

  11001  3 001740   200234 476500                    LDP6    @TOKEN,,AUTO
         3 001741   001000 236003                    LDQ     512,DU
         3 001742   600002 552140                    STBQ    2,'40'O,PR6

     2909    11002    6                       DO WHILE (SCAN_INDEX + TOKEN.LENGTH# < CMD$RECORD.LENGTH#)

  11002  3 001743   001771 710000 3                  TRA     s:11009
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:359  

     2910    11003    6                         AND (CLASS = %CCL_SPEC);
     2911    11004    6                          CLASS = CLASS$TABLE.C (ASCBIN

  11004  3 001744   200012 470500                    LDP0    CMD_RECORD$,,AUTO
         3 001745   000002 220100                    LDX0    2,,PR0
         3 001746   200233 471500                    LDP1    @SCAN_INDEX,,AUTO
         3 001747   200234 473500                    LDP3    @TOKEN,,AUTO
         3 001750   300002 236100                    LDQ     2,,PR3
         3 001751   000033 772000                    QRL     27
         3 001752   100000 036100                    ADLQ    0,,PR1
         3 001753   000100 101506                    MRL     fill='000'O
         3 001754   000002 400001                    ADSC9   2,Q,PR0                  cn=2,n=1
         3 001755   200254 000004                    ADSC9   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO cn=0,n=4
         3 001756   200254 236100                    LDQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 001757   200236 474500                    LDP4    CLASS_TABLE$,,AUTO
         3 001760   000100 101506                    MRL     fill='000'O
         3 001761   400000 000001                    ADSC9   0,Q,PR4                  cn=0,n=1
         3 001762   200235 000004                    ADSC9   CLASS,,AUTO              cn=0,n=4

     2912    11005    6                            (SUBSTR(CMD$RECORD.BYTES, SCAN_INDEX + TOKEN.LENGTH#,
     2913    11006    6                            1)));
     2914    11007    6                          IF CLASS = %CCL_SPEC THEN

  11007  3 001763   200235 235100                    LDA     CLASS,,AUTO
         3 001764   000001 115007                    CMPA    1,DL
         3 001765   001771 601000 3                  TNZ     s:11009

     2915    11008    6                             TOKEN.LENGTH# = TOKEN.LENGTH# + 1;

  11008  3 001766   300002 236100                    LDQ     2,,PR3
         3 001767   001000 036003                    ADLQ    512,DU
         3 001770   300002 552140                    STBQ    2,'40'O,PR3

     2916    11009    6                          END;

  11009  3 001771   200233 470500                    LDP0    @SCAN_INDEX,,AUTO
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:360  
         3 001772   200234 471500                    LDP1    @TOKEN,,AUTO
         3 001773   100002 236100                    LDQ     2,,PR1
         3 001774   000033 772000                    QRL     27
         3 001775   000000 036100                    ADLQ    0,,PR0
         3 001776   200012 473500                    LDP3    CMD_RECORD$,,AUTO
         3 001777   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002000   300002 236100                    LDQ     2,,PR3
         3 002001   000022 732000                    QRS     18
         3 002002   200255 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 002003   200254 236100                    LDQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002004   002012 604000 3                  TMI     s:11010
         3 002005   200255 116100                    CMPQ    INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 002006   002012 605000 3                  TPL     s:11010
         3 002007   200235 235100                    LDA     CLASS,,AUTO
         3 002010   000001 115007                    CMPA    1,DL
         3 002011   001744 600000 3                  TZE     s:11004

     2917    11010    5                       TOKEN.BYTES = SUBSTR(CMD$RECORD.BYTES, SCAN_INDEX,

  11010  3 002012   100002 236100                    LDQ     2,,PR1
         3 002013   000033 772000                    QRL     27
         3 002014   300002 220100                    LDX0    2,,PR3
         3 002015   000000 235100                    LDA     0,,PR0
         3 002016   000000 621006                    EAX1    0,QL
         3 002017   000000 622006                    EAX2    0,QL
         3 002020   040140 100545                    MLR     fill='040'O
         3 002021   300002 400012                    ADSC9   2,A,PR3                  cn=2,n=*X2
         3 002022   100002 200011                    ADSC9   2,,PR1                   cn=1,n=*X1

     2918    11011    5                         TOKEN.LENGTH#);
     2919    11012    5                       RETURN;

  11012  3 002023   200232 221300                    LDX1  ! VD_ERR$+1,,AUTO
         3 002024   000001 702211                    TSX2  ! 1,X1

     2920    11013
     2921    11014    5                     CASE (%CCL_NAME);
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:361  

     2922    11015    5                       TOKEN.LENGTH# = 1;

  11015  3 002025   200234 476500                    LDP6    @TOKEN,,AUTO
         3 002026   001000 236003                    LDQ     512,DU
         3 002027   600002 552140                    STBQ    2,'40'O,PR6

     2923    11016    6                       DO WHILE (SCAN_INDEX + TOKEN.LENGTH# < CMD$RECORD.LENGTH#)

  11016  3 002030   002060 710000 3                  TRA     s:11022

     2924    11017    6                         AND (CLASS = %CCL_NAME OR CLASS = %CCL_NUM);
     2925    11018    6                          CLASS = CLASS$TABLE.C (ASCBIN(SUBSTR

  11018  3 002031   200012 470500                    LDP0    CMD_RECORD$,,AUTO
         3 002032   000002 220100                    LDX0    2,,PR0
         3 002033   200233 471500                    LDP1    @SCAN_INDEX,,AUTO
         3 002034   200234 473500                    LDP3    @TOKEN,,AUTO
         3 002035   300002 236100                    LDQ     2,,PR3
         3 002036   000033 772000                    QRL     27
         3 002037   100000 036100                    ADLQ    0,,PR1
         3 002040   000100 101506                    MRL     fill='000'O
         3 002041   000002 400001                    ADSC9   2,Q,PR0                  cn=2,n=1
         3 002042   200254 000004                    ADSC9   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO cn=0,n=4
         3 002043   200254 236100                    LDQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002044   200236 474500                    LDP4    CLASS_TABLE$,,AUTO
         3 002045   000100 101506                    MRL     fill='000'O
         3 002046   400000 000001                    ADSC9   0,Q,PR4                  cn=0,n=1
         3 002047   200235 000004                    ADSC9   CLASS,,AUTO              cn=0,n=4

     2926    11019    6                            (CMD$RECORD.BYTES, SCAN_INDEX + TOKEN.LENGTH#, 1)));
     2927    11020    6                          IF CLASS = %CCL_NAME OR CLASS = %CCL_NUM THEN

  11020  3 002050   200235 235100                    LDA     CLASS,,AUTO
         3 002051   000005 115007                    CMPA    5,DL
         3 002052   002055 600000 3                  TZE     s:11021
         3 002053   000004 115007                    CMPA    4,DL
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:362  
         3 002054   002060 601000 3                  TNZ     s:11022

     2928    11021    6                             TOKEN.LENGTH# = TOKEN.LENGTH# + 1;

  11021  3 002055   300002 236100                    LDQ     2,,PR3
         3 002056   001000 036003                    ADLQ    512,DU
         3 002057   300002 552140                    STBQ    2,'40'O,PR3

     2929    11022    6                          END;

  11022  3 002060   200233 470500                    LDP0    @SCAN_INDEX,,AUTO
         3 002061   200234 471500                    LDP1    @TOKEN,,AUTO
         3 002062   100002 236100                    LDQ     2,,PR1
         3 002063   000033 772000                    QRL     27
         3 002064   000000 036100                    ADLQ    0,,PR0
         3 002065   200012 473500                    LDP3    CMD_RECORD$,,AUTO
         3 002066   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002067   300002 236100                    LDQ     2,,PR3
         3 002070   000022 732000                    QRS     18
         3 002071   200255 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 002072   200254 236100                    LDQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002073   002103 604000 3                  TMI     s:11023
         3 002074   200255 116100                    CMPQ    INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 002075   002103 605000 3                  TPL     s:11023
         3 002076   200235 235100                    LDA     CLASS,,AUTO
         3 002077   000005 115007                    CMPA    5,DL
         3 002100   002031 600000 3                  TZE     s:11018
         3 002101   000004 115007                    CMPA    4,DL
         3 002102   002031 600000 3                  TZE     s:11018

     2930    11023    5                       TOKEN.BYTES = SUBSTR(CMD$RECORD.BYTES, SCAN_INDEX,

  11023  3 002103   100002 236100                    LDQ     2,,PR1
         3 002104   000033 772000                    QRL     27
         3 002105   300002 220100                    LDX0    2,,PR3
         3 002106   000000 235100                    LDA     0,,PR0
         3 002107   000000 621006                    EAX1    0,QL
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:363  
         3 002110   000000 622006                    EAX2    0,QL
         3 002111   040140 100545                    MLR     fill='040'O
         3 002112   300002 400012                    ADSC9   2,A,PR3                  cn=2,n=*X2
         3 002113   100002 200011                    ADSC9   2,,PR1                   cn=1,n=*X1

     2931    11024    5                         TOKEN.LENGTH#);
     2932    11025    5                       RETURN;

  11025  3 002114   200232 221300                    LDX1  ! VD_ERR$+1,,AUTO
         3 002115   000001 702211                    TSX2  ! 1,X1

     2933    11026
     2934    11027    5                     CASE (ELSE);

     2935    11028    5                       CALL VDG$ESCREECH (CLASS, SCAN_INDEX);

  11028  3 002116   200233 236100                    LDQ     @SCAN_INDEX,,AUTO
         3 002117   200255 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 002120   200235 636500                    EPPR6   CLASS,,AUTO
         3 002121   200254 456500                    STP6    INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002122   200254 630500                    EPPR0   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002123   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 002124   000000 701000 xent               TSX1    VDG$ESCREECH
         3 002125   000000 011000                    NOP     0

     2936    11029
     2937    11030    5                     END;

     2938    11031    4                    END;

     2939    11032    3              END LOOK_FOR_RETURNABLE_TOKEN;

  11032  3 002126   200233 470500                    LDP0    @SCAN_INDEX,,AUTO
         3 002127   200012 471500                    LDP1    CMD_RECORD$,,AUTO
         3 002130   100002 236100                    LDQ     2,,PR1
         3 002131   000022 732000                    QRS     18
         3 002132   002136 604000 3                  TMI     s:11034
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:364  
         3 002133   000000 116100                    CMPQ    0,,PR0
         3 002134   002136 600000 3                  TZE     s:11034
         3 002135   001543 603000 3                  TRC     s:10967

     2940    11033
     2941    11034    2           RETURN;

  11034  3 002136   200232 221300                    LDX1  ! VD_ERR$+1,,AUTO
         3 002137   000001 702211                    TSX2  ! 1,X1

  11031  3 002140                       SKIP_STRING* null
     2942    11035
     2943    11036
     2944    11037
     2945    11038    2   SKIP_STRING_LITERAL_FAILED: ;
     2946    11039    2           ALTRETURN;

  11039  3 002140   200232 221300                    LDX1  ! VD_ERR$+1,,AUTO
         3 002141   000000 702211                    TSX2  ! 0,X1

     2947    11040
     2948    11041    2   END FIND_TOKEN;
     2949    11042
     2950    11043
     2951    11044                %BOX (TITLE="REPLACE_STRING_AND_SKIP", PAGE=YES);
             11052    2
             11056    2   /***************************************************************************
             11058    2    *                                                                         *
             11062    2            *                          REPLACE_STRING_AND_SKIP                       *
             11064    2            *                                                                        *
             11066    2          ***************************************************************************/

     2952    11070
     2953    11071        /*I* NAME: REPLACE_STRING_AND_SKIP
     2954    11072            PARAMETERS:
     2955    11073                STR_INDEX - Index into CMD$RECORD.BYTES of string to replace.
     2956    11074                STR_LN - Length of string in CMD$RECORD.BYTES to replace.  STR_LN
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:365  
     2957    11075                    is a UBIN BYTE CALIGNED field!!!!
     2958    11076                REPL - VD$BUFFER containing the synonym value which is to
     2959    11077                    replace the chars at STR_INDEX.
     2960    11078            INPUT:
     2961    11079                CMD$RECORD - VD$BUFFER containing the command record so far.
     2962    11080                CMD_RECORD$ - Ptr on which CMD$RECORD is based.  Must be
     2963    11081                    equal to CMD$STREAM.RECORD$.
     2964    11082                CMD$STREAM - Top VD$CMD_STREAM on stack.
     2965    11083            OUTPUT:
     2966    11084                STR_LN chars at STR_INDEX in CMD$RECORD.BYTES may be replaced with
     2967    11085                    the VALUE.BYTES chars, possibly surrounded by spaces.
     2968    11086                STR_INDEX will be incremented so that it points just beyond
     2969    11087                    the replacement string in CMD$RECORD.BYTES.
     2970    11088                CMD$RECORD will be modified to describe the new command record,
     2971    11089                    which may have been moved from its old location.
     2972    11090                CMD_RECORD$ and CMD$STREAM.RECORD$ may be changed, if CMD$RECORD
     2973    11091                    is moved.
     2974    11092            SCRATCH (no input value, no output value):
     2975    11093                VD_STATIC_TEMP - A scratch buffer for moving strings in a command
     2976    11094                    record.
     2977    11095            DESCRIPTION:
     2978    11096                If the new string will fit in the space allocated for the
     2979    11097                command record, do the replacement in place; otherwise,
     2980    11098                allocate new storage for the command record, do the replacement
     2981    11099                as we copy to the new storage, adjust CMD$STREAM.RECORD$ to
     2982    11100                point to the new VD$BUFFER, and free the old VD$BUFFER.
     2983    11101        */
     2984    11102
     2985    11103    1   REPLACE_STRING_AND_SKIP: PROC (STR_INDEX, STR_LN, REPL) ALTRET;

  11103  3 002142   200232 741300       REPLACE_STR* STX1  ! VD_ERR$+1,,AUTO

     2986    11104    2   DCL STR_INDEX UBIN;
     2987    11105    2   DCL STR_LN UBIN BYTE CALIGNED;
     2988    11106        %VD$BUFFER (NAME=REPL, STCLASS=PARAM);
     2989    11164
     2990    11165
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:366  
     2991    11166
     2992    11167    2   DCL LEFT_LN UBIN;
     2993    11168    2   DCL RIGHT_INDEX UBIN;
     2994    11169    2   DCL RIGHT_LN UBIN;
     2995    11170    2   DCL NEW_RECORD_LN UBIN;
     2996    11171    2   DCL NEW_RECORD$ PTR;
     2997    11172    2   DCL N UBIN;
     2998    11173
     2999    11174
     3000    11175        %VD$BUFFER (NAME=NEW$RECORD, STCLASS="BASED(NEW_RECORD$)");
     3001    11233
     3002    11234
     3003    11235
     3004    11236    2           LEFT_LN = STR_INDEX;

  11236  3 002143   200233 470500                    LDP0    @STR_INDEX,,AUTO
         3 002144   000000 235100                    LDA     0,,PR0
         3 002145   200236 755100                    STA     LEFT_LN,,AUTO

     3005    11237    2           RIGHT_INDEX = STR_INDEX + STR_LN;

  11237  3 002146   200234 471500                    LDP1    @STR_LN,,AUTO
         3 002147   000100 101500                    MRL     fill='000'O
         3 002150   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         3 002151   200254 000004                    ADSC9   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO cn=0,n=4
         3 002152   200254 236100                    LDQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002153   000000 036100                    ADLQ    0,,PR0
         3 002154   200237 756100                    STQ     RIGHT_INDEX,,AUTO

     3006    11238    2           RIGHT_LN = CMD$RECORD.LENGTH# - RIGHT_INDEX;

  11238  3 002155   200012 473500                    LDP3    CMD_RECORD$,,AUTO
         3 002156   300002 236100                    LDQ     2,,PR3
         3 002157   000022 732000                    QRS     18
         3 002160   200237 136100                    SBLQ    RIGHT_INDEX,,AUTO
         3 002161   200240 756100                    STQ     RIGHT_LN,,AUTO

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:367  
     3007    11239    2           NEW_RECORD_LN = LEFT_LN + REPL.LENGTH# + 1 + RIGHT_LN;

  11239  3 002162   200235 474500                    LDP4    @REPL,,AUTO
         3 002163   400002 236100                    LDQ     2,,PR4
         3 002164   000022 732000                    QRS     18
         3 002165   200236 036100                    ADLQ    LEFT_LN,,AUTO
         3 002166   200240 036100                    ADLQ    RIGHT_LN,,AUTO
         3 002167   000001 036007                    ADLQ    1,DL
         3 002170   200241 756100                    STQ     NEW_RECORD_LN,,AUTO

     3008    11240    2           IF RIGHT_LN > 0 THEN

  11240  3 002171   200240 235100                    LDA     RIGHT_LN,,AUTO
         3 002172   002175 600000 3                  TZE     s:11242

     3009    11241    2              NEW_RECORD_LN = NEW_RECORD_LN + 1;

  11241  3 002173   000001 036007                    ADLQ    1,DL
         3 002174   200241 756100                    STQ     NEW_RECORD_LN,,AUTO

     3010    11242    2           IF NEW_RECORD_LN > NB_BUF THEN

  11242  3 002175   000000 116003                    CMPQ    0,DU
         3 002176   002523 604000 3                  TMI     SYND_RECORD_TOO_LONG_FAILURE
         3 002177   200011 116100                    CMPQ    NB_BUF,,AUTO
         3 002200   002523 605400 3                  TPNZ    SYND_RECORD_TOO_LONG_FAILURE

     3011    11243    2              GOTO SYND_RECORD_TOO_LONG_FAILURE;
     3012    11244    2           IF NEW_RECORD_LN > ((CMD$RECORD.OBJECT.SIZE# * %NB_PER_WORD) -

  11244  3 002201   300000 236100                    LDQ     0,,PR3
         3 002202   000022 736000                    QLS     18
         3 002203   000020 732000                    QRS     16
         3 002204   000012 136007                    SBLQ    10,DL
         3 002205   002210 604000 3                  TMI     s:11251
         3 002206   200241 116100                    CMPQ    NEW_RECORD_LN,,AUTO
         3 002207   002365 603000 3                  TRC     s:11278
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:368  

     3013    11245    3             LENGTHC(VD$BUFFER_HEADER)) THEN DO;

     3014    11246                   /*
     3015    11247                   *    Replacement text is longer than the text it's replacing,
     3016    11248                   *        and current CMD$RECORD doesn't have enough storage
     3017    11249                   *        allocated for it to hold the new cmd-line length.
     3018    11250                   */
     3019    11251    3              CALL VDG$OALLOC (%CLS_BUFFER, NEW_RECORD$, SIZEW(VD$BUFFER_HEADER) +

  11251  3 002210   200241 236100                    LDQ     NEW_RECORD_LN,,AUTO
         3 002211   000003 036007                    ADLQ    3,DL
         3 002212   000002 772000                    QRL     2
         3 002213   000003 036007                    ADLQ    3,DL
         3 002214   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002215   200254 635500                    EPPR5   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002216   200257 455500                    STP5    INTERRUPT_STATE_BEFORE_M$READ+4,,AUTO
         3 002217   200242 636500                    EPPR6   NEW_RECORD$,,AUTO
         3 002220   200256 456500                    STP6    INTERRUPT_STATE_BEFORE_M$READ+3,,AUTO
         3 002221   000010 236000 4                  LDQ     8
         3 002222   200255 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 002223   200255 630500                    EPPR0   INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 002224   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 002225   000000 701000 xent               TSX1    VDG$OALLOC
         3 002226   002545 702000 3                  TSX2    OALLOC_FAILED

     3020    11252    3                (NEW_RECORD_LN + %(NB_PER_WORD-1)) / %NB_PER_WORD)
     3021    11253    3                ALTRET (OALLOC_FAILED);
     3022    11254    3              NEW$RECORD.LENGTH# = NEW_RECORD_LN;

  11254  3 002227   200241 720100                    LXL0    NEW_RECORD_LN,,AUTO
         3 002230   200242 470500                    LDP0    NEW_RECORD$,,AUTO
         3 002231   000002 740100                    STX0    2,,PR0

     3023    11255    3              CALL CONCAT (NEW$RECORD.BYTES,

  11255  3 002232   200242 470500                    LDP0    NEW_RECORD$,,AUTO
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:369  
         3 002233   000002 221100                    LDX1    2,,PR0
         3 002234   200012 471500                    LDP1    CMD_RECORD$,,AUTO
         3 002235   100002 222100                    LDX2    2,,PR1
         3 002236   200235 473500                    LDP3    @REPL,,AUTO
         3 002237   300002 223100                    LDX3    2,,PR3
         3 002240   200236 724100                    LXL4    LEFT_LN,,AUTO
         3 002241   040140 100540                    MLR     fill='040'O
         3 002242   100002 400014                    ADSC9   2,,PR1                   cn=2,n=*X4
         3 002243   000002 400011                    ADSC9   2,,PR0                   cn=2,n=*X1
         3 002244   000000 636011                    EAQ     0,X1
         3 002245   000022 732000                    QRS     18
         3 002246   200236 136100                    SBLQ    LEFT_LN,,AUTO
         3 002247   002300 604400 3                  TMOZ    s:11258
         3 002250   200242 470500                    LDP0    NEW_RECORD$,,AUTO
         3 002251   000000 621006                    EAX1    0,QL
         3 002252   200236 235100                    LDA     LEFT_LN,,AUTO
         3 002253   040145 100400                    MLR     fill='040'O
         3 002254   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         3 002255   000002 400011                    ADSC9   2,A,PR0                  cn=2,n=*X1
         3 002256   000001 116007                    CMPQ    1,DL
         3 002257   002300 604400 3                  TMOZ    s:11258
         3 002260   777777 621006                    EAX1    -1,QL
         3 002261   200242 470500                    LDP0    NEW_RECORD$,,AUTO
         3 002262   040145 100540                    MLR     fill='040'O
         3 002263   300002 400013                    ADSC9   2,,PR3                   cn=2,n=*X3
         3 002264   000002 600011                    ADSC9   2,A,PR0                  cn=3,n=*X1
         3 002265   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002266   000000 636013                    EAQ     0,X3
         3 002267   000022 732000                    QRS     18
         3 002270   000011 402007                    MPY     9,DL
         3 002271   200255 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 002272   200254 236100                    LDQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002273   000011 402007                    MPY     9,DL
         3 002274   000011 136007                    SBLQ    9,DL
         3 002275   200255 116100                    CMPQ    INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 002276   002300 604000 3                  TMI     s:11258
         3 002277   002303 710000 3                  TRA     s:11259
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:370  

     3024    11256    3                SUBSTR(CMD$RECORD.BYTES, 0, LEFT_LN),
     3025    11257    3                %CHR_SPACE, REPL.BYTES)
     3026    11258    4              WHENALTRETURN DO; CALL VDG$ESCREECH; END;

  11258  3 002300   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 002301   000000 701000 xent               TSX1    VDG$ESCREECH
         3 002302   000000 011000                    NOP     0

     3027    11259    3              IF RIGHT_LN > 0 THEN

  11259  3 002303   200240 235100                    LDA     RIGHT_LN,,AUTO
         3 002304   002346 600000 3                  TZE     s:11264

     3028    11260    3                 CALL INSERT (NEW$RECORD.BYTES, LEFT_LN + 1 + REPL.LENGTH#,

  11260  3 002305   200242 470500                    LDP0    NEW_RECORD$,,AUTO
         3 002306   000002 220100                    LDX0    2,,PR0
         3 002307   200235 471500                    LDP1    @REPL,,AUTO
         3 002310   100002 236100                    LDQ     2,,PR1
         3 002311   000022 732000                    QRS     18
         3 002312   200236 036100                    ADLQ    LEFT_LN,,AUTO
         3 002313   200012 473500                    LDP3    CMD_RECORD$,,AUTO
         3 002314   300002 221100                    LDX1    2,,PR3
         3 002315   000001 622005                    EAX2    1,AL
         3 002316   040146 100400                    MLR     fill='040'O
         3 002317   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         3 002320   000002 600012                    ADSC9   2,Q,PR0                  cn=3,n=*X2
         3 002321   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002322   200240 236100                    LDQ     RIGHT_LN,,AUTO
         3 002323   000000 116003                    CMPQ    0,DU
         3 002324   002343 600000 3                  TZE     s:11263
         3 002325   000000 620006                    EAX0    0,QL
         3 002326   200237 236100                    LDQ     RIGHT_INDEX,,AUTO
         3 002327   200242 470500                    LDP0    NEW_RECORD$,,AUTO
         3 002330   000000 621005                    EAX1    0,AL
         3 002331   200254 235100                    LDA     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:371  
         3 002332   040145 100546                    MLR     fill='040'O
         3 002333   300002 400010                    ADSC9   2,Q,PR3                  cn=2,n=*X0
         3 002334   000003 000011                    ADSC9   3,A,PR0                  cn=0,n=*X1
         3 002335   200240 236100                    LDQ     RIGHT_LN,,AUTO
         3 002336   000011 402007                    MPY     9,DL
         3 002337   200255 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 002340   200255 116100                    CMPQ    INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 002341   002343 602000 3                  TNC     s:11263
         3 002342   002346 710000 3                  TRA     s:11264

     3029    11261    3                   RIGHT_LN + 1, %CHR_SPACE,
     3030    11262    3                   SUBSTR(CMD$RECORD.BYTES, RIGHT_INDEX, RIGHT_LN))
     3031    11263    4                 WHENALTRETURN DO; CALL VDG$ESCREECH; END;

  11263  3 002343   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 002344   000000 701000 xent               TSX1    VDG$ESCREECH
         3 002345   000000 011000                    NOP     0

     3032    11264    3              NEW$RECORD.FLINK$ = CMD$RECORD.FLINK$;

  11264  3 002346   200012 470500                    LDP0    CMD_RECORD$,,AUTO
         3 002347   000001 236100                    LDQ     1,,PR0
         3 002350   200242 471500                    LDP1    NEW_RECORD$,,AUTO
         3 002351   100001 756100                    STQ     1,,PR1

     3033    11265    3              CMD$RECORD.FLINK$ = ADDR(NIL);

  11265  3 002352   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 002353   000001 756100                    STQ     1,,PR0

     3034    11266    3              CALL VDG$OFREE (CMD$RECORD)

  11266  3 002354   200012 630500                    EPPR0   CMD_RECORD$,,AUTO
         3 002355   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 002356   000000 701000 xent               TSX1    VDG$OFREE
         3 002357   002545 702000 3                  TSX2    OALLOC_FAILED

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:372  
     3035    11267    3                ALTRET (OFREE_FAILED);
     3036    11268    3              CMD_RECORD$ = NEW_RECORD$;

  11268  3 002360   200242 236100                    LDQ     NEW_RECORD$,,AUTO
         3 002361   200012 756100                    STQ     CMD_RECORD$,,AUTO

     3037    11269    3              CMD$STREAM.RECORD$ = NEW_RECORD$;

  11269  3 002362   000026 470400 xsym               LDP0    VD_6E+22
         3 002363   000025 756100                    STQ     21,,PR0

     3038    11270    3              END;

  11270  3 002364   002506 710000 3                  TRA     s:11294

     3039    11271    3           ELSE DO;

     3040    11272                   /*
     3041    11273                   *    Either the replacement text is shorter than the text
     3042    11274                   *        it's replacing,
     3043    11275                   *    or CMD$RECORD has enough storage allocated for it to
     3044    11276                   *        hold the new cmd-line length.
     3045    11277                   */
     3046    11278    3              IF RIGHT_LN > 0 THEN

  11278  3 002365   000000 115003                    CMPA    0,DU
         3 002366   002407 600000 3                  TZE     s:11282

     3047    11279    3                 CALL INSERT (VD_STATIC_TEMP, 0, RIGHT_LN,

  11279  3 002367   300002 220100                    LDX0    2,,PR3
         3 002370   000000 622005                    EAX2    0,AL
         3 002371   200237 235100                    LDA     RIGHT_INDEX,,AUTO
         3 002372   200240 723100                    LXL3    RIGHT_LN,,AUTO
         3 002373   040040 100545                    MLR     fill='040'O
         3 002374   300002 400012                    ADSC9   2,A,PR3                  cn=2,n=*X2
         3 002375   000000 000013 xsym               ADSC9   VD_STATIC_TEMP           cn=0,n=*X3
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:373  
         3 002376   200240 236100                    LDQ     RIGHT_LN,,AUTO
         3 002377   000011 402007                    MPY     9,DL
         3 002400   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002401   200254 116100                    CMPQ    INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002402   002404 602000 3                  TNC     s:11281
         3 002403   002407 710000 3                  TRA     s:11282

     3048    11280    3                   SUBSTR(CMD$RECORD.BYTES, RIGHT_INDEX, RIGHT_LN))
     3049    11281    4                 WHENALTRETURN DO; CALL VDG$ESCREECH; END;

  11281  3 002404   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 002405   000000 701000 xent               TSX1    VDG$ESCREECH
         3 002406   000000 011000                    NOP     0

     3050    11282    3              CMD$RECORD.LENGTH# = NEW_RECORD_LN;

  11282  3 002407   200241 720100                    LXL0    NEW_RECORD_LN,,AUTO
         3 002410   200012 470500                    LDP0    CMD_RECORD$,,AUTO
         3 002411   000002 740100                    STX0    2,,PR0

     3051    11283    3              CALL INSERT (CMD$RECORD.BYTES, LEFT_LN, REPL.LENGTH# + 1,

  11283  3 002412   200235 471500                    LDP1    @REPL,,AUTO
         3 002413   100002 221100                    LDX1    2,,PR1
         3 002414   000001 622011                    EAX2    1,X1
         3 002415   200236 235100                    LDA     LEFT_LN,,AUTO
         3 002416   040145 100400                    MLR     fill='040'O
         3 002417   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         3 002420   000002 400012                    ADSC9   2,A,PR0                  cn=2,n=*X2
         3 002421   000000 636012                    EAQ     0,X2
         3 002422   000022 772000                    QRL     18
         3 002423   000002 116007                    CMPQ    2,DL
         3 002424   002444 602000 3                  TNC     s:11285
         3 002425   777777 623012                    EAX3    -1,X2
         3 002426   040145 100540                    MLR     fill='040'O
         3 002427   100002 400011                    ADSC9   2,,PR1                   cn=2,n=*X1
         3 002430   000002 600013                    ADSC9   2,A,PR0                  cn=3,n=*X3
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:374  
         3 002431   000000 636011                    EAQ     0,X1
         3 002432   000022 732000                    QRS     18
         3 002433   000011 402007                    MPY     9,DL
         3 002434   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002435   000000 636012                    EAQ     0,X2
         3 002436   000022 772000                    QRL     18
         3 002437   000011 402007                    MPY     9,DL
         3 002440   000011 136007                    SBLQ    9,DL
         3 002441   200254 116100                    CMPQ    INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002442   002444 604000 3                  TMI     s:11285
         3 002443   002447 710000 3                  TRA     s:11286

     3052    11284    3                %CHR_SPACE, REPL.BYTES)
     3053    11285    4              WHENALTRETURN DO; CALL VDG$ESCREECH; END;

  11285  3 002444   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 002445   000000 701000 xent               TSX1    VDG$ESCREECH
         3 002446   000000 011000                    NOP     0

     3054    11286    3              IF RIGHT_LN > 0 THEN

  11286  3 002447   200240 235100                    LDA     RIGHT_LN,,AUTO
         3 002450   002506 600000 3                  TZE     s:11294

     3055    11287    3                 CALL INSERT (CMD$RECORD.BYTES, LEFT_LN + 1 + REPL.LENGTH#,

  11287  3 002451   200012 470500                    LDP0    CMD_RECORD$,,AUTO
         3 002452   000002 220100                    LDX0    2,,PR0
         3 002453   200235 471500                    LDP1    @REPL,,AUTO
         3 002454   100002 236100                    LDQ     2,,PR1
         3 002455   000022 732000                    QRS     18
         3 002456   200236 036100                    ADLQ    LEFT_LN,,AUTO
         3 002457   000001 621005                    EAX1    1,AL
         3 002460   040146 100400                    MLR     fill='040'O
         3 002461   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         3 002462   000002 600011                    ADSC9   2,Q,PR0                  cn=3,n=*X1
         3 002463   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:375  
         3 002464   200240 236100                    LDQ     RIGHT_LN,,AUTO
         3 002465   000000 116003                    CMPQ    0,DU
         3 002466   002503 600000 3                  TZE     s:11290
         3 002467   000000 620006                    EAX0    0,QL
         3 002470   000000 622005                    EAX2    0,AL
         3 002471   200254 235100                    LDA     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002472   040145 100440                    MLR     fill='040'O
         3 002473   000000 000010 xsym               ADSC9   VD_STATIC_TEMP           cn=0,n=*X0
         3 002474   000003 000012                    ADSC9   3,A,PR0                  cn=0,n=*X2
         3 002475   200240 236100                    LDQ     RIGHT_LN,,AUTO
         3 002476   000011 402007                    MPY     9,DL
         3 002477   200255 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 002500   200255 116100                    CMPQ    INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 002501   002503 602000 3                  TNC     s:11290
         3 002502   002506 710000 3                  TRA     s:11294

     3056    11288    3                   RIGHT_LN + 1, %CHR_SPACE,
     3057    11289    3                   SUBSTR(VD_STATIC_TEMP, 0, RIGHT_LN))
     3058    11290    4                 WHENALTRETURN DO; CALL VDG$ESCREECH; END;

  11290  3 002503   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 002504   000000 701000 xent               TSX1    VDG$ESCREECH
         3 002505   000000 011000                    NOP     0

     3059    11291    3              END;

     3060    11292
     3061    11293                /* Skip STR_INDEX over the replacement text */
     3062    11294    2           STR_INDEX = STR_INDEX + 1 + REPL.LENGTH#;

  11294  3 002506   200233 470500                    LDP0    @STR_INDEX,,AUTO
         3 002507   200235 471500                    LDP1    @REPL,,AUTO
         3 002510   100002 236100                    LDQ     2,,PR1
         3 002511   000022 732000                    QRS     18
         3 002512   000000 036100                    ADLQ    0,,PR0
         3 002513   000001 036007                    ADLQ    1,DL
         3 002514   000000 756100                    STQ     0,,PR0
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:376  

     3063    11295    2           IF RIGHT_LN > 0 THEN

  11295  3 002515   200240 235100                    LDA     RIGHT_LN,,AUTO
         3 002516   002521 600000 3                  TZE     s:11298

     3064    11296    2              STR_INDEX = STR_INDEX + 1;

  11296  3 002517   000001 036007                    ADLQ    1,DL
         3 002520   000000 756100                    STQ     0,,PR0

     3065    11297
     3066    11298    2           RETURN;

  11298  3 002521   200232 221300                    LDX1  ! VD_ERR$+1,,AUTO
         3 002522   000001 702211                    TSX2  ! 1,X1

     3067    11299
     3068    11300
     3069    11301    2   SYND_RECORD_TOO_LONG_FAILURE:
     3070    11302    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

  11302  3 002523   200231 635500       SYND_RECORD* EPPR5   VD_ERR$,,AUTO
         3 002524   200255 455500                    STP5    INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 002525   000002 236000 4                  LDQ     2
         3 002526   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002527   200254 630500                    EPPR0   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002530   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 002531   000000 701000 xent               TSX1    VDG$OALLOC
         3 002532   002545 702000 3                  TSX2    OALLOC_FAILED

     3071    11303    2             ALTRET (OALLOC_FAILED);
     3072    11304    2           VD$ERR.ERR.CODE# = %E$SYND_RECORD_TOO_LONG;

  11304  3 002533   200231 470500                    LDP0    VD_ERR$,,AUTO
         3 002534   000002 236100                    LDQ     2,,PR0
         3 002535   000003 376000 4                  ANQ     3
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:377  
         3 002536   000620 276007                    ORQ     400,DL
         3 002537   000002 756100                    STQ     2,,PR0

     3073    11305    2           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

  11305  3 002540   000003 220003                    LDX0    3,DU
         3 002541   200231 470500                    LDP0    VD_ERR$,,AUTO
         3 002542   000003 740100                    STX0    3,,PR0

     3074    11306    2           ALTRETURN;

  11306  3 002543   200232 221300                    LDX1  ! VD_ERR$+1,,AUTO
         3 002544   000000 702211                    TSX2  ! 0,X1

  11305  3 002545                       OALLOC_FAIL* null
  11305  3 002545                       OFREE_FAILED null
     3075    11307
     3076    11308
     3077    11309    2   OALLOC_FAILED: ;
     3078    11310    2   OFREE_FAILED: ;
     3079    11311    2           ALTRETURN;

  11311  3 002545   200232 221300                    LDX1  ! VD_ERR$+1,,AUTO
         3 002546   000000 702211                    TSX2  ! 0,X1

     3080    11312
     3081    11313    2   END REPLACE_STRING_AND_SKIP;
     3082    11314
     3083    11315
     3084    11316                %BOX (TITLE="SKIP_STRING_LITERAL", PAGE=YES);
             11324    2
             11328    2   /***************************************************************************
             11330    2    *                                                                         *
             11334    2            *                            SKIP_STRING_LITERAL                         *
             11336    2            *                                                                        *
             11338    2          ***************************************************************************/

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:378  
     3085    11342
     3086    11343        /*I* NAME: SKIP_STRING_LITERAL
     3087    11344            PARAMETERS:
     3088    11345                LIT_INDEX - Index into CMD$RECORD.BYTES of string literal delimiter.
     3089    11346            INPUT:
     3090    11347                CMD$RECORD - VD$BUFFER containing the command record being processed.
     3091    11348            OUTPUT:
     3092    11349                LIT_INDEX will contain the index into CMD$RECORD.BYTES of the next
     3093    11350                    char to scan, ie, the char after the ending string
     3094    11351                    literal delimiter.
     3095    11352            DESCRIPTION:
     3096    11353                Scan LIT_INDEX over a string literal.
     3097    11354        */
     3098    11355
     3099    11356    1   SKIP_STRING_LITERAL: PROC (LIT_INDEX) ALTRET;

  11356  3 002547   200240 741300       SKIP_STRING* STX1  ! RIGHT_LN,,AUTO

     3100    11357    2   DCL LIT_INDEX UBIN;
     3101    11358
     3102    11359
     3103    11360
     3104    11361    2   DCL DELIM_INDEX UBIN;
     3105    11362    2   DCL ORIGINAL_INDEX UBIN;
     3106    11363
     3107    11364
     3108    11365
     3109    11366    2           ORIGINAL_INDEX = LIT_INDEX;

  11366  3 002550   200241 470500                    LDP0    @LIT_INDEX,,AUTO
         3 002551   000000 235100                    LDA     0,,PR0
         3 002552   200243 755100                    STA     ORIGINAL_INDEX,,AUTO

     3110    11367
     3111    11368    2   FIND_END_OF_STRING:
     3112    11369    3           DO WHILE (LIT_INDEX + D$STRING.LENGTH# <= CMD$RECORD.LENGTH#)

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:379  
  11369  3 002553   002606 710000 3     FIND_END_OF* TRA     s:11377

     3113    11370    3             AND (SUBSTR(CMD$RECORD.BYTES, LIT_INDEX, D$STRING.LENGTH#) =
     3114    11371    3             D$STRING.BYTES);
     3115    11372    3              LIT_INDEX = LIT_INDEX + D$STRING.LENGTH#;

  11372  3 002554   200241 470500                    LDP0    @LIT_INDEX,,AUTO
         3 002555   000004 471400 1                  LDP1    PTR_$STRING$
         3 002556   100002 236100                    LDQ     2,,PR1
         3 002557   000022 732000                    QRS     18
         3 002560   000000 036100                    ADLQ    0,,PR0
         3 002561   000000 756100                    STQ     0,,PR0

     3116    11373    3              CALL INDEX (DELIM_INDEX, D$STRING.BYTES, CMD$RECORD.BYTES,

  11373  3 002562   100002 220100                    LDX0    2,,PR1
         3 002563   200012 473500                    LDP3    CMD_RECORD$,,AUTO
         3 002564   300002 221100                    LDX1    2,,PR3
         3 002565   200242 631500                    EPPR1   DELIM_INDEX,,AUTO
         3 002566   000004 473400 1                  LDP3    PTR_$STRING$
         3 002567   000012 222003                    LDX2    10,DU
         3 002570   300000 500512                    A9BD    0,X2,PR3
         3 002571   000000 623010                    EAX3    0,X0
         3 002572   200012 470500                    LDP0    CMD_RECORD$,,AUTO
         3 002573   000000 500512                    A9BD    0,X2,PR0
         3 002574   000000 620011                    EAX0    0,X1
         3 002575   200241 474500                    LDP4    @LIT_INDEX,,AUTO
         3 002576   400000 236100                    LDQ     0,,PR4
         3 002577   000000 701000 xent               TSX1    X66_INDEX
         3 002600   002635 710000 3                  TRA     UNBAL_STRING_FAILURE

     3117    11374    3                LIT_INDEX)
     3118    11375    3                ALTRET (UNBAL_STRING_FAILURE);
     3119    11376    3              LIT_INDEX = DELIM_INDEX + D$STRING.LENGTH#;

  11376  3 002601   000004 470400 1                  LDP0    PTR_$STRING$
         3 002602   000002 236100                    LDQ     2,,PR0
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:380  
         3 002603   000022 732000                    QRS     18
         3 002604   200242 036100                    ADLQ    DELIM_INDEX,,AUTO
         3 002605   400000 756100                    STQ     0,,PR4

     3120    11377    3              END FIND_END_OF_STRING;

  11377  3 002606   200241 470500                    LDP0    @LIT_INDEX,,AUTO
         3 002607   000004 471400 1                  LDP1    PTR_$STRING$
         3 002610   100002 236100                    LDQ     2,,PR1
         3 002611   000022 732000                    QRS     18
         3 002612   000000 036100                    ADLQ    0,,PR0
         3 002613   200012 473500                    LDP3    CMD_RECORD$,,AUTO
         3 002614   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002615   300002 236100                    LDQ     2,,PR3
         3 002616   000022 732000                    QRS     18
         3 002617   200255 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 002620   200254 236100                    LDQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002621   200255 116100                    CMPQ    INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 002622   002633 605400 3                  TPNZ    s:11379
         3 002623   300002 220100                    LDX0    2,,PR3
         3 002624   000000 235100                    LDA     0,,PR0
         3 002625   100002 221100                    LDX1    2,,PR1
         3 002626   100002 222100                    LDX2    2,,PR1
         3 002627   040140 106545                    CMPC    fill='040'O
         3 002630   300002 400011                    ADSC9   2,A,PR3                  cn=2,n=*X1
         3 002631   100002 400012                    ADSC9   2,,PR1                   cn=2,n=*X2
         3 002632   002554 600000 3                  TZE     s:11372

     3121    11378
     3122    11379    2           RETURN;

  11379  3 002633   200240 221300                    LDX1  ! RIGHT_LN,,AUTO
         3 002634   000001 702211                    TSX2  ! 1,X1

     3123    11380
     3124    11381
     3125    11382
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:381  
     3126    11383    2   UNBAL_STRING_FAILURE:
     3127    11384    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

  11384  3 002635   200231 630500       UNBAL_STRIN* EPPR0   VD_ERR$,,AUTO
         3 002636   200255 450500                    STP0    INTERRUPT_STATE_BEFORE_M$READ+2,,AUTO
         3 002637   000002 236000 4                  LDQ     2
         3 002640   200254 756100                    STQ     INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002641   200254 630500                    EPPR0   INTERRUPT_STATE_BEFORE_M$READ+1,,AUTO
         3 002642   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 002643   000000 701000 xent               TSX1    VDG$OALLOC
         3 002644   002662 702000 3                  TSX2    OALLOC_FAILED

     3128    11385    2             ALTRET (OALLOC_FAILED);
     3129    11386    2           VD$ERR.ERR.CODE# = %E$UNBAL_STRING;

  11386  3 002645   200231 470500                    LDP0    VD_ERR$,,AUTO
         3 002646   000002 236100                    LDQ     2,,PR0
         3 002647   000003 376000 4                  ANQ     3
         3 002650   000720 276007                    ORQ     464,DL
         3 002651   000002 756100                    STQ     2,,PR0

     3130    11387    2           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

  11387  3 002652   000003 220003                    LDX0    3,DU
         3 002653   200231 470500                    LDP0    VD_ERR$,,AUTO
         3 002654   000003 740100                    STX0    3,,PR0

     3131    11388                /*
     3132    11389                *   We can't give XUG$ERRPTR a CMDLINE_INDEX, 'cause we haven't given
     3133    11390                *       XUG$GETCMD this command!
     3134    11391                *   (((Test case:  With !DONT POINT, say CO ST 'ABC AF 6 )))
     3135    11392                */
     3136    11393    2           VD$ERR.CMDLINE_INDEX# = ORIGINAL_INDEX; /* might as well try? */

  11393  3 002655   200243 721100                    LXL1    ORIGINAL_INDEX,,AUTO
         3 002656   200231 470500                    LDP0    VD_ERR$,,AUTO
         3 002657   000003 441100                    SXL1    3,,PR0
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:382  

     3137    11394    2           ALTRETURN;

  11394  3 002660   200240 221300                    LDX1  ! RIGHT_LN,,AUTO
         3 002661   000000 702211                    TSX2  ! 0,X1

  11393  3 002662                       OALLOC_FAIL* null
     3138    11395
     3139    11396
     3140    11397    2   OALLOC_FAILED: ;
     3141    11398    2           ALTRETURN;

  11398  3 002662   200240 221300                    LDX1  ! RIGHT_LN,,AUTO
         3 002663   000000 702211                    TSX2  ! 0,X1
     3142    11399
     3143    11400    2   END SKIP_STRING_LITERAL;
     3144    11401
     3145    11402    1   END VDI$PGET_COMMAND_RECORD;
     3146    11403        %EOD;

PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:383  
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   B$JIT.:LIBRARY  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIBRARY  is referenced.
   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDI$PGET_COMMAND_RECORD.
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:384  

 **** Variables and constants ****

  ****  Section 001 RoData VDI$PGET_COMMAND_RECORD

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/c CHAR        r     1 BLANK_BUF                  1-0-0/w STRC(99)    r     1 D_$STRING
     0-0-0/w PTR         r     1 PTR_$COMMENT$              4-0-0/w PTR         r     1 PTR_$STRING$
     6-0-0/w STRC(4608)  r     1 XLATE_FID_CHAR_CLASS

  ****  Section 002  Data  VDI$PGET_COMMAND_RECORD

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(504)   r     1 FPT_READ                  32-0-0/d STRC(504)   r     1 FPT_READ
    16-0-0/d STRC(432)   r     1 WRITE_BLANK_LINE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @ARS                       3-0-0/w PTR         r     1 @BUF_
     7-0-0/w PTR         r     1 @EOMCHAR                   6-0-0/w PTR         r     1 @ERRCODE
   241-0-0/w PTR         r     1 @LIT_INDEX                 5-0-0/w PTR         r     1 @NEXT_RECORD$$
   235-0-0/w PTR         r     1 @REPL                    233-0-0/w PTR         r     1 @SCAN_INDEX
   233-0-0/w PTR         r     1 @STR_INDEX               234-0-0/w PTR         r     1 @STR_LN
   234-0-0/w PTR         r     1 @TOKEN                    *0-0-0/w SBIN        r     1 ARS
    10-0-0/w PTR         r     1 BUF$                      *0-0-0/d VECT        r     1 BUF_
   247-0-0/w SBIN        r     1 BUF_SIZE                 235-0-0/w UBIN        r     1 CLASS
   236-0-0/w PTR         r     1 CLASS_TABLE$              12-0-0/w PTR         r     1 CMD_RECORD$
   242-0-0/w UBIN        r     1 DELIM_INDEX              235-0-0/w BIT         r     1 EOF_FLAG
    *0-0-0/c CHAR        r     1 EOMCHAR                   *0-0-0/w STRC        r     1 ERRCODE
   252-0-0/w SBIN        r     1 ERR_CODE                 234-0-0/w BIT         r     1 HAD_ERROR
   253-0-0/w SBIN        r     1 INTERRUPT_STATE_BEFORE_M$READ
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:385  
   241-0-0/w PTR         r     1 IT_COMMAND$              236-0-0/w UBIN        r     1 LEFT_LN
    *0-0-0/w UBIN        r     1 LIT_INDEX                244-0-0/w STRC(9)     r     1 LOAD_FLAGS
   230-0-0/w UBIN        r     1 N                        240-0-0/w SBIN        r     1 N
    11-0-0/w SBIN        r     1 NB_BUF                   242-0-0/w PTR         r     1 NEW_RECORD$
   241-0-0/w UBIN        r     1 NEW_RECORD_LN             *0-0-0/w EPTR        r     1 NEXT_RECORD$$
   243-0-0/w UBIN        r     1 ORIGINAL_INDEX           243-0-0/w PTR         r     1 READ_DCB$
   251-0-0/w PTR         r     1 READ_DCB$                233-0-0/w SBIN        r     1 REC_NUM_INCR
    *0-0-0/w ASTR(90)    r     1 REPL                     237-0-0/w UBIN        r     1 RIGHT_INDEX
   240-0-0/w UBIN        r     1 RIGHT_LN                  13-0-0/w UBIN        r     1 SCAN_INDEX
    *0-0-0/w UBIN        r     1 SCAN_INDEX               240-0-0/w PTR         r     1 SINK$
    *0-0-0/w UBIN        r     1 STR_INDEX                 *0-0-0/c UBIN(9)     r     1 STR_LN
    14-0-0/w STRC(324)   r     1 SYNONYM_LOC              227-0-0/w PTR         r     1 SY_KEY$
    25-0-0/w STRC(4680)  r     1 TOKEN                     *0-0-0/w ASTR(81)    r     1 TOKEN
   242-0-0/w PTR         r     1 VD_BUFFER$               250-0-0/w PTR         r     1 VD_BUFFER$
   231-0-0/w PTR         r     1 VD_ERR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/w PTR         r     1 B$XL_UPPER$                0-0-0/w ASTR(90)    r     1 VD_$COMMENT
     0-0-0/w STRC(22644) r     1 VD_6E                      0-0-0/w UBIN        r     1 VD_ASYM
     0-0-0/w PTR         r     1 VD_CMD_OBJECTS$(0:49)
     0-0-0/w UBIN        r     1 VD_FORCE_READ_FROM
     0-0-0/w UBIN        r     1 VD_LAST_CWIN_ACTIVITY
     0-0-0/w CHAR(1024)  r     1 VD_STATIC_TEMP             0-0-0/w CHAR(512)   r     1 VD_XLATE_CHAR_CLASS
     0-0-0/d STRC(1512)  r     1 XUG_GETCMD

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0/d STRC(4608)  r     1 B$XL_UPPER
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:386  
     0-0-0/c ACHR        r     1 BUF                        0-0-0/w STRC(9)     r     1 CLASS$TABLE
     0-0-0/w ASTR(90)    r     1 CMD$RECORD                 0-0-0/w STRC(900)   r     1 CMD$STREAM
     0-0-0/w ASTR(90)    r     1 D$STRING                   0-0-0/w STRC(180)   r     1 FATAL$ERR
     0-0-0/w STRC(540)   r     1 IT$COMMAND                 0-0-0/w ASTR(90)    r     1 NEW$RECORD
     0-0-0/d ASTR(3528)  r     1 READ$DCB                   0-0-0/d ASTR(3528)  r     1 READ$DCB
     0-0-0/w ASTR(9)     r     1 SY$KEY                     0-0-0/w STRC(864)   r     1 SYNONYMS$STREAM
     0-0-0/w ASTR(90)    r     1 VD$BUFFER                  0-0-0/w ASTR(90)    r     1 VD$BUFFER
     0-0-0/w ASTR(90)    r     1 VD$BUFFER                  0-0-0/w ASTR(90)    r     1 VD$BUFFER
     0-0-0/w STRC(90)    r     1 VD$BUFFER_HEADER           0-0-0/w ASTR(90)    r     1 VD$COMMENT
     0-0-0/w STRC(180)   r     1 VD$ERR                     0-0-0/w STRC(540)   r     1 VD$IT_COMMAND
     0-0-0/w STRC        r     1 VD$OBJECT_HEADER           0-0-0/w STRC(1944)  r     1 VD$PORT
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDI$PGET_COMMAND_RECORD requires 1460 words for executable code.
   Procedure VDI$PGET_COMMAND_RECORD requires 176 words of local(AUTO) storage.
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:387  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:388  
          MINI XREF LISTING

ARS
      7677**DCL        68--PROC     9478<<ASSIGN   9609<<ASSIGN   9632<<ASSIGN   9639<<ASSIGN
B$ALT.CODE
      9192**DCL      9192--REDEF    9193--REDEF    9193--REDEF
B$ALT.ERR
      9193**DCL     10663>>ASSIGN  10674>>ASSIGN
B$ALT.ERR.ERR#
      9194**DCL      9194--REDEF   10611>>ASSIGN
B$ALT.EVID
      9193**DCL      9193--REDEF    9193--REDEF
B$JIT.CPFLAGS1.SLEAZE
      7384**DCL      7384--REDEF
B$JIT.ERR.MID
      7291**DCL      7291--REDEF
B$JIT.JRESPEAK
      7452**DCL      7453--REDEF
B$JIT.MODE
      7285**DCL     10241>>IF      10619>>IF      10661>>IF
B$JIT.NEXTCC
      7432**DCL     10257>>IF
B$JIT.ORIGINATOR_PORT.FROM_CR
      7561**DCL      7561--REDEF    7562--REDEF
B$JIT.PNR
      7465**DCL      7465--REDEF
B$JIT.TSLINE
      7559**DCL      7560--REDEF
B$JIT$
      8568**DCL      7285--IMP-PTR 10241>>IF      10257>>IF      10619>>IF      10661>>IF
B$TCB.ALT$
      9188**DCL     10611>>ASSIGN  10663>>ASSIGN  10674>>ASSIGN
B$TCB$
      8569**DCL      9188--IMP-PTR 10611>>ASSIGN  10663>>ASSIGN  10674>>ASSIGN
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:389  
B$XL_UPPER
      7812**DCL      9555>>CALLBLT
B$XL_UPPER$
      7811**DCL      7812--IMP-PTR  9555>>CALLBLT
BLANK_BUF IN PROCEDURE CMD_STREAM_READ
      9986**DCL      9973--DCLINIT  9974--DCLINIT
BUF
      8738**DCL      9605<<CALLBLT  9635<<CALLBLT
BUF$
      8638**DCL      8738--IMP-PTR  9476<<ASSIGN   9605>>CALLBLT  9635>>CALLBLT
BUF_
      7676**DCL        68--PROC     9476>>ASSIGN   9477>>ASSIGN
BUF_SIZE IN PROCEDURE READ_FROM_ME
     10451**DCL     10581<<ASSIGN  10585>>IF      10592<>CALL
CLASS IN PROCEDURE FIND_TOKEN
     10945**DCL     10982<<ASSIGN  10985>>DOCASE  10989>>DOWHILE 10989>>DOWHILE 10991<<ASSIGN  10993>>IF
     10993>>IF      11002>>DOWHILE 11004<<ASSIGN  11007>>IF      11016>>DOWHILE 11016>>DOWHILE 11018<<ASSIGN
     11020>>IF      11020>>IF      11028<>CALL
CLASS$TABLE.C IN PROCEDURE FIND_TOKEN
     10950**DCL     10982>>ASSIGN  10991>>ASSIGN  11004>>ASSIGN  11018>>ASSIGN
CLASS_TABLE$ IN PROCEDURE FIND_TOKEN
     10946**DCL     10949--IMP-PTR 10954<<ASSIGN  10959<<ASSIGN  10982>>ASSIGN  10991>>ASSIGN  11004>>ASSIGN
     11018>>ASSIGN
CMD$RECORD
      8803**DCL     11266<>CALL
CMD$RECORD.BYTES
      8831**DCL      9605>>CALLBLT  9635>>CALLBLT 10967>>IF      10973>>IF      10977>>CALLBLT 10982>>ASSIGN
     10991>>ASSIGN  11004>>ASSIGN  11010>>ASSIGN  11018>>ASSIGN  11023>>ASSIGN  11255>>CALLBLT 11260>>CALLBLT
     11279>>CALLBLT 11283<<CALLBLT 11287<<CALLBLT 11369>>DOWHILE 11373>>CALLBLT
CMD$RECORD.FLINK$
      8829**DCL     11264>>ASSIGN  11265<<ASSIGN
CMD$RECORD.LENGTH#
      8829**DCL      8831--IMP-SIZ  9497>>IF       9502>>IF       9503<<ASSIGN   9550>>DOWHILE  9605>>CALLBLT
      9605>>CALLBLT  9607<>CALL     9609>>ASSIGN   9635>>CALLBLT  9635>>CALLBLT  9637<>CALL     9639>>ASSIGN
     10966>>DOWHILE 10967>>IF      10967>>IF      10973>>IF      10973>>IF      10977>>CALLBLT 10982>>ASSIGN
     10989>>DOWHILE 10991>>ASSIGN  11002>>DOWHILE 11004>>ASSIGN  11010>>ASSIGN  11016>>DOWHILE 11018>>ASSIGN
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:390  
     11023>>ASSIGN  11238>>ASSIGN  11255>>CALLBLT 11260>>CALLBLT 11266>>CALL    11279>>CALLBLT 11282<<ASSIGN
     11283>>CALLBLT 11287>>CALLBLT 11369>>DOWHILE 11369>>DOWHILE 11373>>CALLBLT
CMD$RECORD.OBJECT.SIZE#
      8827**DCL     11244>>IF
CMD$STREAM
      8747**DCL     10751<>CALL
CMD$STREAM.CMD_AFTER_READ
      8776**DCL      9500>>IF       9501<<ASSIGN   9812>>IF      10212>>IF      10226>>IF      10261>>IF
     10265>>IF      10278>>IF
CMD$STREAM.DCB#
      8774**DCL     10257>>IF      10257--IF
CMD$STREAM.ECHO
      8775**DCL     10265>>IF
CMD$STREAM.FILE_TYPE
      8774**DCL     10238>>IF
CMD$STREAM.INTREE$
      8774**DCL      9494>>IF      10212>>IF      10271>>IF      10272>>CALL    10274<<ASSIGN  10297>>IF
     10301>>DOWHILE 10303>>ASSIGN  10304<<ASSIGN
CMD$STREAM.POSITION#
      8775**DCL     10298>>IF      10300>>ASSIGN  10313>>IF      10319>>IF      10321<<ASSIGN  10321>>ASSIGN
     10325>>IF      10333>>ASSIGN  10336>>ASSIGN  10338<<ASSIGN  10651<<ASSIGN
CMD$STREAM.RECORD$
      8774**DCL      9496>>ASSIGN   9631>>IF       9634>>ASSIGN   9817>>IF       9818<>CALL     9822>>ASSIGN
     10212>>IF      10212>>IF      10227>>ASSIGN  10228>>ASSIGN  10229>>CALL    10229>>CALL    10231<<ASSIGN
     10311>>IF      10312>>ASSIGN  10583>>IF      10584>>ASSIGN  10588<<ASSIGN  10591>>IF      10592<>CALL
     10595>>ASSIGN  11269<<ASSIGN
CMD$STREAM.REC_NUM#
      8776**DCL      9831<<ASSIGN   9831>>ASSIGN  10212>>IF      10224>>IF      10225<<ASSIGN  10225>>ASSIGN
CMD$STREAM.TYPE#
      8773**DCL      9814>>IF      10209>>DOCASE  10284<>CALL    10743>>IF      10746>>IF      10746>>IF
     10757<<ASSIGN  10760>>IF      10760>>IF
CMD_RECORD$
      8640**DCL      8803--IMP-PTR  9496<<ASSIGN   9497>>IF       9502>>IF       9503>>ASSIGN   9550>>DOWHILE
      9605>>CALLBLT  9605>>CALLBLT  9605>>CALLBLT  9607>>CALL     9609>>ASSIGN   9634<<ASSIGN   9635>>CALLBLT
      9635>>CALLBLT  9635>>CALLBLT  9637>>CALL     9639>>ASSIGN  10966>>DOWHILE 10967>>IF      10967>>IF
     10967>>IF      10973>>IF      10973>>IF      10973>>IF      10977>>CALLBLT 10977>>CALLBLT 10982>>ASSIGN
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:391  
     10982>>ASSIGN  10989>>DOWHILE 10991>>ASSIGN  10991>>ASSIGN  11002>>DOWHILE 11004>>ASSIGN  11004>>ASSIGN
     11010>>ASSIGN  11010>>ASSIGN  11016>>DOWHILE 11018>>ASSIGN  11018>>ASSIGN  11023>>ASSIGN  11023>>ASSIGN
     11238>>ASSIGN  11244>>IF      11255>>CALLBLT 11255>>CALLBLT 11260>>CALLBLT 11260>>CALLBLT 11264>>ASSIGN
     11265>>ASSIGN  11266>>CALL    11266>>CALL    11268<<ASSIGN  11279>>CALLBLT 11279>>CALLBLT 11282>>ASSIGN
     11283>>CALLBLT 11283>>CALLBLT 11287>>CALLBLT 11287>>CALLBLT 11369>>DOWHILE 11369>>DOWHILE 11369>>DOWHILE
     11373>>CALLBLT 11373>>CALLBLT
CMD_STREAM_READ IN PROCEDURE READ_COMMAND_RECORD
      9913**PROC     9806--CALL
CMD_STREAM_READ_FAILED IN PROCEDURE READ_COMMAND_RECORD
      9831**LABEL    9806--CALLALT
CMD_WINDOW_READ_FAILED IN PROCEDURE READ_FROM_ME
     10661**LABEL   10621--GOTO
COMMON_ENTRY IN PROCEDURE FIND_TOKEN
     10963**LABEL   10955--GOTO
D$STRING.BYTES
      8970**DCL     10967>>IF      11369>>DOWHILE 11373>>CALLBLT
D$STRING.LENGTH#
      8968**DCL      8970--IMP-SIZ 10967>>IF      10967>>IF      10967>>IF      11369>>DOWHILE 11369>>DOWHILE
     11369>>DOWHILE 11372>>ASSIGN  11373>>CALLBLT 11376>>ASSIGN
DELIM_INDEX IN PROCEDURE SKIP_STRING_LITERAL
     11361**DCL     11373<<CALLBLT 11376>>ASSIGN
D_$STRING
      8601**DCL      8635--DCLINIT
EOF_FLAG IN PROCEDURE READ_COMMAND_RECORD
      9738**DCL      9805>>DOUNTIL  9809>>IF       9823<<ASSIGN  10205<<ASSIGN  10216<<ASSIGN  10255<<ASSIGN
     10260<<ASSIGN  10262<>CALL    10288>>IF      10602>>DOUNTIL 10622<<ASSIGN
EOMCHAR
      7694**DCL        68--PROC     9481<<ASSIGN  10628<<ASSIGN
ERASE_COMMAND_WINDOW_FAILED IN PROCEDURE READ_FROM_ME
     10676**LABEL   10577--CALLALT
ERRCODE
      7687**DCL        68--PROC     9480<<ASSIGN   9621<<ASSIGN
ERR_CODE IN PROCEDURE READ_FROM_ME
     10454**DCL     10603<<ASSIGN  10611<<ASSIGN  10618>>IF      10619>>IF
FATAL$ERR.DCB#
      9184**DCL     10669<<ASSIGN
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:392  
FATAL$ERR.ERR
      9179**DCL     10663<<ASSIGN  10665<<ASSIGN
FATAL$ERR.ERR.CODE#
      9181**DCL     10664>>IF      10666<<ASSIGN
FATAL$ERR.FLAGLEV#
      9184**DCL     10668<<ASSIGN
FIND_FID IN PROCEDURE FIND_TOKEN
     10958**ENTRY    9564--CALL
FIND_FID_FAILED
      9609**LABEL    9564--CALLALT
FIND_TOKEN
     10847**PROC     9551--CALL     9571--CALL
FIND_TOKEN_FAILED
      9609**LABEL    9551--CALLALT  9571--CALLALT
FPT_READ.STATION_ IN PROCEDURE CMD_STREAM_READ
      9936**DCL      9937--REDEF
FPT_READ.V IN PROCEDURE CMD_STREAM_READ
      9937**DCL      9933--DCLINIT
FPT_READ.V.DVBYTE.REREAD# IN PROCEDURE CMD_STREAM_READ
      9948**DCL      9948--REDEF
FPT_READ.V.INDX# IN PROCEDURE CMD_STREAM_READ
      9946**DCL      9946--REDEF
FPT_READ IN PROCEDURE READ_FROM_ME
     10427**DCL     10609<>CALL
FPT_READ.BUF_ IN PROCEDURE READ_FROM_ME
     10429**DCL     10597<<ASSIGN
FPT_READ.STATION_ IN PROCEDURE READ_FROM_ME
     10430**DCL     10431--REDEF
FPT_READ.V IN PROCEDURE READ_FROM_ME
     10431**DCL     10427--DCLINIT
FPT_READ.V.DCB# IN PROCEDURE READ_FROM_ME
     10431**DCL     10598<<ASSIGN  10599--ASSIGN  10669>>ASSIGN  10676>>ASSIGN
FPT_READ.V.DVBYTE.REREAD# IN PROCEDURE READ_FROM_ME
     10442**DCL     10442--REDEF
FPT_READ.V.INDX# IN PROCEDURE READ_FROM_ME
     10440**DCL     10440--REDEF
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:393  
HAD_ERROR IN PROCEDURE READ_COMMAND_RECORD
      9737**DCL      9803<<ASSIGN   9828>>IF
INTERRUPT_STATE_BEFORE_M$READ IN PROCEDURE READ_FROM_ME
     10455**DCL     10605<<ASSIGN  10615>>ASSIGN
IT$COMMAND IN PROCEDURE CMD_STREAM_READ
     10019**DCL     10305<>CALL
IT$COMMAND.FLINK$ IN PROCEDURE CMD_STREAM_READ
     10045**DCL     10304>>ASSIGN
IT_COMMAND$ IN PROCEDURE CMD_STREAM_READ
      9991**DCL     10019--IMP-PTR 10303<<ASSIGN  10304>>ASSIGN  10305>>CALL
LEFT_LN IN PROCEDURE REPLACE_STRING_AND_SKIP
     11167**DCL     11236<<ASSIGN  11239>>ASSIGN  11255>>CALLBLT 11260>>CALLBLT 11283>>CALLBLT 11287>>CALLBLT
LIT_INDEX IN PROCEDURE SKIP_STRING_LITERAL
     11357**DCL     11356--PROC    11366>>ASSIGN  11369>>DOWHILE 11369>>DOWHILE 11372<<ASSIGN  11372>>ASSIGN
     11373>>CALLBLT 11376<<ASSIGN
LOAD_FLAGS IN PROCEDURE CMD_STREAM_READ
      9994**DCL     10239<<ASSIGN  10248<>CALL
LOAD_FLAGS.F IN PROCEDURE CMD_STREAM_READ
     10006**DCL     10240<<ASSIGN  10243<<ASSIGN  10245<<ASSIGN  10246<<ASSIGN
LREAD_FAILED
      9609**LABEL    9577--CALLALT
M$READ
      5539**DCL-ENT 10609--CALL
N
      8734**DCL      9483<<DOINDEX  9484>>IF       9485>>CALL     9487>>ASSIGN
N IN PROCEDURE CMD_STREAM_READ
      9990**DCL     10300<<ASSIGN  10301>>DOWHILE 10307<<ASSIGN  10307>>ASSIGN
NB_BUF
      8639**DCL      8738--IMP-SIZ  9477<<ASSIGN   9502>>IF       9503>>ASSIGN   9605>>CALLBLT  9607<>CALL
      9635>>CALLBLT  9637<>CALL    10262<>CALL    10581>>ASSIGN  10596>>ASSIGN  11242>>IF
NEW$RECORD.BYTES IN PROCEDURE REPLACE_STRING_AND_SKIP
     11228**DCL     11255<<CALLBLT 11260<<CALLBLT
NEW$RECORD.FLINK$ IN PROCEDURE REPLACE_STRING_AND_SKIP
     11226**DCL     11264<<ASSIGN
NEW$RECORD.LENGTH# IN PROCEDURE REPLACE_STRING_AND_SKIP
     11226**DCL     11228--IMP-SIZ 11254<<ASSIGN  11255>>CALLBLT 11260>>CALLBLT
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:394  
NEW_RECORD$ IN PROCEDURE REPLACE_STRING_AND_SKIP
     11171**DCL     11200--IMP-PTR 11251<>CALL    11254>>ASSIGN  11255>>CALLBLT 11255>>CALLBLT 11260>>CALLBLT
     11260>>CALLBLT 11264>>ASSIGN  11268>>ASSIGN  11269>>ASSIGN
NEW_RECORD_LN IN PROCEDURE REPLACE_STRING_AND_SKIP
     11170**DCL     11239<<ASSIGN  11241<<ASSIGN  11241>>ASSIGN  11242>>IF      11244>>IF      11251>>CALL
     11254>>ASSIGN  11282>>ASSIGN
NEXT_RECORD$$
      7678**DCL        68--PROC     9479<<ASSIGN
OALLOC_FAILED IN PROCEDURE POP_STACK_AND_POSTN
     10781**LABEL   10755--CALLALT
OALLOC_FAILED IN PROCEDURE READ_COMMAND_RECORD
      9831**LABEL    9818--CALLALT
OALLOC_FAILED IN PROCEDURE READ_FROM_ME
     10676**LABEL   10592--CALLALT 10672--CALLALT
OALLOC_FAILED IN PROCEDURE REPLACE_STRING_AND_SKIP
     11305**LABEL   11251--CALLALT 11302--CALLALT
OALLOC_FAILED IN PROCEDURE SKIP_STRING_LITERAL
     11393**LABEL   11384--CALLALT
OFREE_FAILED
      9609**LABEL    9485--CALLALT
OFREE_FAILED IN PROCEDURE CMD_STREAM_READ
     10339**LABEL   10229--CALLALT 10272--CALLALT 10305--CALLALT
OFREE_FAILED IN PROCEDURE POP_STACK_AND_POSTN
     10781**LABEL   10751--CALLALT
OFREE_FAILED IN PROCEDURE READ_FROM_ME
     10676**LABEL   10586--CALLALT
OFREE_FAILED IN PROCEDURE REPLACE_STRING_AND_SKIP
     11305**LABEL   11266--CALLALT
ORIGINAL_INDEX IN PROCEDURE SKIP_STRING_LITERAL
     11362**DCL     11366<<ASSIGN  11393>>ASSIGN
POP_STACK_AND_POSTN IN PROCEDURE READ_COMMAND_RECORD
     10735**PROC     9810--CALL
POP_STACK_AND_POSTN_FAILED IN PROCEDURE READ_COMMAND_RECORD
      9831**LABEL    9810--CALLALT
PREAD_FILE_CLOSE_FAILED IN PROCEDURE POP_STACK_AND_POSTN
     10760**LABEL   10748--CALLALT 10762--CALLALT
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:395  
PREAD_FILE_OPEN_FAILED IN PROCEDURE POP_STACK_AND_POSTN
     10781**LABEL   10764--CALLALT
PREAD_FILE_POSITION_FAILED IN PROCEDURE POP_STACK_AND_POSTN
     10776**LABEL   10766--CALLALT
PREAD_FILE_READ_FAILED IN PROCEDURE CMD_STREAM_READ
     10348**LABEL   10262--CALLALT
PTR_$COMMENT$
      8572**DCL      8884--IMP-PTR 10973>>IF      10973>>IF      10973>>IF      10973>>IF      10973>>IF
     10977>>CALLBLT 10977>>CALLBLT 10977>>CALLBLT 10979>>ASSIGN
PTR_$STRING$
      8635**DCL      8942--IMP-PTR 10967>>IF      10967>>IF      10967>>IF      10967>>IF      11369>>DOWHILE
     11369>>DOWHILE 11369>>DOWHILE 11369>>DOWHILE 11372>>ASSIGN  11373>>CALLBLT 11373>>CALLBLT 11376>>ASSIGN
READ$DCB.ACTPOS IN PROCEDURE CMD_STREAM_READ
     10140**DCL     10140--REDEF
READ$DCB.ARS# IN PROCEDURE CMD_STREAM_READ
     10114**DCL     10114--REDEF
READ$DCB.ATTR IN PROCEDURE CMD_STREAM_READ
     10133**DCL     10134--REDEF
READ$DCB.BORROW IN PROCEDURE CMD_STREAM_READ
     10148**DCL     10148--REDEF   10148--REDEF   10148--REDEF
READ$DCB.CTLCMDIN IN PROCEDURE CMD_STREAM_READ
     10156**DCL     10257>>IF
READ$DCB.DCBNAME.L IN PROCEDURE CMD_STREAM_READ
     10162**DCL     10162--IMP-SIZ
READ$DCB.EOMCHAR# IN PROCEDURE CMD_STREAM_READ
     10118**DCL     10118--REDEF
READ$DCB.FLDID IN PROCEDURE CMD_STREAM_READ
     10143**DCL     10143--REDEF
READ$DCB.FORM$ IN PROCEDURE CMD_STREAM_READ
     10137**DCL     10137--REDEF
READ$DCB.FSECT IN PROCEDURE CMD_STREAM_READ
     10153**DCL     10153--REDEF
READ$DCB.FSN# IN PROCEDURE CMD_STREAM_READ
     10130**DCL     10130--REDEF   10130--REDEF   10131--REDEF
READ$DCB.HEADER$ IN PROCEDURE CMD_STREAM_READ
     10136**DCL     10136--REDEF
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:396  
READ$DCB.IXTNSIZE# IN PROCEDURE CMD_STREAM_READ
     10134**DCL     10134--REDEF
READ$DCB.LASTSTA$ IN PROCEDURE CMD_STREAM_READ
     10123**DCL     10123--REDEF
READ$DCB.LVL IN PROCEDURE CMD_STREAM_READ
     10149**DCL     10149--REDEF
READ$DCB.NAME#.C IN PROCEDURE CMD_STREAM_READ
     10124**DCL     10124--REDEF
READ$DCB.NOEOF IN PROCEDURE CMD_STREAM_READ
     10146**DCL     10146--REDEF
READ$DCB.NRECS# IN PROCEDURE CMD_STREAM_READ
     10135**DCL     10135--REDEF
READ$DCB.NRECX IN PROCEDURE CMD_STREAM_READ
     10154**DCL     10154--REDEF
READ$DCB.OHDR IN PROCEDURE CMD_STREAM_READ
     10146**DCL     10146--REDEF
READ$DCB.ORG# IN PROCEDURE CMD_STREAM_READ
     10129**DCL     10129--REDEF
READ$DCB.PRECNO IN PROCEDURE CMD_STREAM_READ
     10152**DCL     10152--REDEF
READ$DCB.RCSZ IN PROCEDURE CMD_STREAM_READ
     10158**DCL     10158--REDEF
READ$DCB.RES# IN PROCEDURE CMD_STREAM_READ
     10125**DCL     10125--REDEF
READ$DCB.SETX IN PROCEDURE CMD_STREAM_READ
     10137**DCL     10137--REDEF
READ$DCB.TAB$ IN PROCEDURE CMD_STREAM_READ
     10137**DCL     10137--REDEF
READ$DCB.TDA IN PROCEDURE CMD_STREAM_READ
     10151**DCL     10152--REDEF
READ$DCB.WSN# IN PROCEDURE CMD_STREAM_READ
     10125**DCL     10125--REDEF
READ$DCB.ACTPOS IN PROCEDURE READ_FROM_ME
     10549**DCL     10549--REDEF
READ$DCB.ARS# IN PROCEDURE READ_FROM_ME
     10523**DCL     10523--REDEF   10626>>ASSIGN  10631>>IF
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:397  
READ$DCB.ATTR IN PROCEDURE READ_FROM_ME
     10542**DCL     10543--REDEF
READ$DCB.BORROW IN PROCEDURE READ_FROM_ME
     10557**DCL     10557--REDEF   10557--REDEF   10557--REDEF
READ$DCB.DCBNAME.L IN PROCEDURE READ_FROM_ME
     10571**DCL     10571--IMP-SIZ
READ$DCB.DVBYTE.VFC# IN PROCEDURE READ_FROM_ME
     10526**DCL     10651>>ASSIGN
READ$DCB.EOMCHAR# IN PROCEDURE READ_FROM_ME
     10527**DCL     10527--REDEF   10628>>ASSIGN
READ$DCB.EOMVAL#.VALUE# IN PROCEDURE READ_FROM_ME
     10528**DCL     10629>>IF      10634>>IF      10641>>IF      10641>>IF      10641>>IF
READ$DCB.FLDID IN PROCEDURE READ_FROM_ME
     10552**DCL     10552--REDEF
READ$DCB.FORM$ IN PROCEDURE READ_FROM_ME
     10546**DCL     10546--REDEF
READ$DCB.FSECT IN PROCEDURE READ_FROM_ME
     10562**DCL     10562--REDEF
READ$DCB.FSN# IN PROCEDURE READ_FROM_ME
     10539**DCL     10539--REDEF   10539--REDEF   10540--REDEF
READ$DCB.HEADER$ IN PROCEDURE READ_FROM_ME
     10545**DCL     10545--REDEF
READ$DCB.IXTNSIZE# IN PROCEDURE READ_FROM_ME
     10543**DCL     10543--REDEF
READ$DCB.LASTSTA$ IN PROCEDURE READ_FROM_ME
     10532**DCL     10532--REDEF
READ$DCB.LVL IN PROCEDURE READ_FROM_ME
     10558**DCL     10558--REDEF
READ$DCB.NAME#.C IN PROCEDURE READ_FROM_ME
     10533**DCL     10533--REDEF
READ$DCB.NOEOF IN PROCEDURE READ_FROM_ME
     10555**DCL     10555--REDEF
READ$DCB.NRECS# IN PROCEDURE READ_FROM_ME
     10544**DCL     10544--REDEF
READ$DCB.NRECX IN PROCEDURE READ_FROM_ME
     10563**DCL     10563--REDEF
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:398  
READ$DCB.OHDR IN PROCEDURE READ_FROM_ME
     10555**DCL     10555--REDEF
READ$DCB.ORG# IN PROCEDURE READ_FROM_ME
     10538**DCL     10538--REDEF
READ$DCB.PRECNO IN PROCEDURE READ_FROM_ME
     10561**DCL     10561--REDEF
READ$DCB.RCSZ IN PROCEDURE READ_FROM_ME
     10567**DCL     10567--REDEF
READ$DCB.RES# IN PROCEDURE READ_FROM_ME
     10534**DCL     10534--REDEF
READ$DCB.SETX IN PROCEDURE READ_FROM_ME
     10546**DCL     10546--REDEF
READ$DCB.TAB$ IN PROCEDURE READ_FROM_ME
     10546**DCL     10546--REDEF
READ$DCB.TDA IN PROCEDURE READ_FROM_ME
     10560**DCL     10561--REDEF
READ$DCB.WSN# IN PROCEDURE READ_FROM_ME
     10534**DCL     10534--REDEF
READ_COMMAND_RECORD
      9733**PROC     9491--CALL
READ_COMMAND_RECORD_FAILED
      9609**LABEL    9491--CALLALT  9507--GOTO
READ_COMPLETED_OK IN PROCEDURE READ_FROM_ME
     10625**LABEL   10631--EXIT
READ_DCB$ IN PROCEDURE CMD_STREAM_READ
      9993**DCL     10108--IMP-PTR
READ_DCB$ IN PROCEDURE READ_FROM_ME
     10453**DCL     10517--IMP-PTR 10599<<ASSIGN  10626>>ASSIGN  10628>>ASSIGN  10629>>IF      10631>>IF
     10634>>IF      10641>>IF      10641>>IF      10641>>IF      10651>>ASSIGN
READ_FROM_ME IN PROCEDURE READ_COMMAND_RECORD
     10407**PROC    10279--CALL
READ_FROM_ME_FAILED IN PROCEDURE CMD_STREAM_READ
     10339**LABEL   10279--CALLALT
REC_NUM_INCR IN PROCEDURE READ_COMMAND_RECORD
      9736**DCL      9802<<ASSIGN   9813<<ASSIGN   9831>>ASSIGN
REPL IN PROCEDURE REPLACE_STRING_AND_SKIP
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:399  
     11131**DCL     11103--PROC
REPL.BYTES IN PROCEDURE REPLACE_STRING_AND_SKIP
     11159**DCL     11255>>CALLBLT 11283>>CALLBLT
REPL.LENGTH# IN PROCEDURE REPLACE_STRING_AND_SKIP
     11157**DCL     11159--IMP-SIZ 11239>>ASSIGN  11255>>CALLBLT 11260>>CALLBLT 11283>>CALLBLT 11283>>CALLBLT
     11287>>CALLBLT 11294>>ASSIGN
REPLACE_STRING_AND_SKIP
     11103**PROC     9592--CALL
REPLACE_STRING_AND_SKIP_FAILED
      9609**LABEL    9592--CALLALT
RETURN_RECORD
      9600**LABEL    9510--GOTO
RIGHT_INDEX IN PROCEDURE REPLACE_STRING_AND_SKIP
     11168**DCL     11237<<ASSIGN  11238>>ASSIGN  11260>>CALLBLT 11279>>CALLBLT
RIGHT_LN IN PROCEDURE REPLACE_STRING_AND_SKIP
     11169**DCL     11238<<ASSIGN  11239>>ASSIGN  11240>>IF      11259>>IF      11260>>CALLBLT 11260>>CALLBLT
     11278>>IF      11279>>CALLBLT 11279>>CALLBLT 11286>>IF      11287>>CALLBLT 11287>>CALLBLT 11295>>IF
SCAN_INDEX
      8641**DCL      9548<<ASSIGN   9550>>DOWHILE  9551<>CALL     9563<<ASSIGN   9563>>ASSIGN   9564<>CALL
      9566<<ASSIGN   9566>>ASSIGN   9570<<ASSIGN   9570>>ASSIGN   9571<>CALL     9573<<ASSIGN   9573>>ASSIGN
      9592<>CALL     9598<<ASSIGN   9598>>ASSIGN
SCAN_INDEX IN PROCEDURE FIND_TOKEN
     10848**DCL     10847--PROC    10958--ENTRY   10966>>DOWHILE 10967>>IF      10967>>IF      10970<>CALL
     10973>>IF      10973>>IF      10977<<CALLBLT 10977>>CALLBLT 10979<<ASSIGN  10979>>ASSIGN  10982>>ASSIGN
     10988<<ASSIGN  10988>>ASSIGN  10989>>DOWHILE 10991>>ASSIGN  10994<<ASSIGN  10994>>ASSIGN  10998<<ASSIGN
     10998>>ASSIGN  11002>>DOWHILE 11004>>ASSIGN  11010>>ASSIGN  11016>>DOWHILE 11018>>ASSIGN  11023>>ASSIGN
     11028<>CALL
SINK$ IN PROCEDURE POP_STACK_AND_POSTN
     10739**DCL     10755<>CALL
SKIP_STRING_LITERAL
     11356**PROC    10970--CALL
SKIP_STRING_LITERAL_FAILED IN PROCEDURE FIND_TOKEN
     11031**LABEL   10970--CALLALT
STR_INDEX IN PROCEDURE REPLACE_STRING_AND_SKIP
     11104**DCL     11103--PROC    11236>>ASSIGN  11237>>ASSIGN  11294<<ASSIGN  11294>>ASSIGN  11296<<ASSIGN
     11296>>ASSIGN
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:400  
STR_LN IN PROCEDURE REPLACE_STRING_AND_SKIP
     11105**DCL     11103--PROC    11237>>ASSIGN
SY$KEY.BYTES
      8854**DCL      9590>>IF
SY$KEY.LENGTH#
      8852**DCL      8854--IMP-SIZ  9590>>IF
SYND_RECORD_TOO_LONG_FAILURE IN PROCEDURE REPLACE_STRING_AND_SKIP
     11302**LABEL   11243--GOTO
SYNONYMS$STREAM
      8983**DCL      9577<>CALL
SYNONYMS$STREAM.PORT$
      9009**DCL      9587>>IF       9587>>ASSIGN   9587>>ASSIGN   9592>>CALL     9592>>CALL
SYNONYM_LOC
      8650**DCL      9541<<ASSIGN   9577<>CALL
SYNONYM_LOC.KEY.REP#
      8666**DCL      9543<<ASSIGN
SYNONYM_LOC.KEY.TYPE#
      8666**DCL      9542<<ASSIGN
SYNONYM_LOC.KEY.V$
      8666**DCL      9544<<ASSIGN
SY_KEY$
      8733**DCL      8844--IMP-PTR  9587<<ASSIGN   9587<<ASSIGN   9590>>IF       9590>>IF
TOKEN
      8696**DCL      9544--ASSIGN   9545<<ASSIGN   9551<>CALL     9564<>CALL     9571<>CALL
TOKEN.BYTES
      8729**DCL      9555<<CALLBLT  9555>>CALLBLT  9559>>DOSELCT  9590>>IF
TOKEN.LENGTH#
      8725**DCL      9554>>IF       9555>>CALLBLT  9555>>CALLBLT  9559>>DOSELCT  9563>>ASSIGN   9566>>ASSIGN
      9570>>ASSIGN   9573>>ASSIGN   9590>>IF       9592<>CALL     9598>>ASSIGN
TOKEN.OBJECT.CLASS#
      8723**DCL      9546<<ASSIGN
TOKEN IN PROCEDURE FIND_TOKEN
     10875**DCL     10847--PROC    10958--ENTRY
TOKEN.BYTES IN PROCEDURE FIND_TOKEN
     10906**DCL     11010<<ASSIGN  11023<<ASSIGN
TOKEN.LENGTH# IN PROCEDURE FIND_TOKEN
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:401  
     10904**DCL     10906--IMP-SIZ 10963<<ASSIGN  11001<<ASSIGN  11002>>DOWHILE 11004>>ASSIGN  11008<<ASSIGN
     11008>>ASSIGN  11010>>ASSIGN  11010>>ASSIGN  11015<<ASSIGN  11016>>DOWHILE 11018>>ASSIGN  11021<<ASSIGN
     11021>>ASSIGN  11023>>ASSIGN  11023>>ASSIGN
UNBAL_STRING_FAILURE IN PROCEDURE SKIP_STRING_LITERAL
     11384**LABEL   11373--CALLALT
VD$BUFFER
      9321**DCL      9592<>CALL
VD$BUFFER.LENGTH#
      9347**DCL      9349--IMP-SIZ  9592>>CALL
VD$BUFFER IN PROCEDURE CMD_STREAM_READ
     10074**DCL     10229<>CALL
VD$BUFFER.BYTES IN PROCEDURE CMD_STREAM_READ
     10102**DCL     10319>>IF      10336<<ASSIGN  10336>>ASSIGN
VD$BUFFER.FLINK$ IN PROCEDURE CMD_STREAM_READ
     10100**DCL     10212>>IF      10227>>ASSIGN  10228<<ASSIGN
VD$BUFFER.LENGTH# IN PROCEDURE CMD_STREAM_READ
     10100**DCL     10102--IMP-SIZ 10229>>CALL    10319>>IF      10333<<ASSIGN  10333>>ASSIGN  10335>>IF
     10336>>ASSIGN  10336>>ASSIGN  10336>>ASSIGN
VD$BUFFER.LENGTH# IN PROCEDURE READ_COMMAND_RECORD
      9792**DCL      9794--IMP-SIZ  9822<<ASSIGN
VD$BUFFER IN PROCEDURE READ_FROM_ME
     10483**DCL     10586<>CALL
VD$BUFFER.BYTES IN PROCEDURE READ_FROM_ME
     10511**DCL     10597--ASSIGN
VD$BUFFER.LENGTH# IN PROCEDURE READ_FROM_ME
     10509**DCL     10511--IMP-SIZ 10586>>CALL    10596<<ASSIGN  10597>>ASSIGN  10626<<ASSIGN
VD$BUFFER.OBJECT.SIZE# IN PROCEDURE READ_FROM_ME
     10507**DCL     10585>>IF
VD$BUFFER_HEADER
      9362**DCL      9818--CALL    10581--ASSIGN  11244--IF      11251--CALL
VD$COMMENT.BYTES
      8912**DCL     10973>>IF      10977>>CALLBLT
VD$COMMENT.LENGTH#
      8910**DCL      8912--IMP-SIZ 10973>>IF      10973>>IF      10973>>IF      10973>>IF      10977>>CALLBLT
     10977>>CALLBLT 10979>>ASSIGN
VD$ERR.CMDLINE_INDEX#
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:402  
      9131**DCL     11393<<ASSIGN
VD$ERR.DCB#
      9131**DCL     10676<<ASSIGN
VD$ERR.ERR
      9126**DCL      9621>>ASSIGN  10674<<ASSIGN
VD$ERR.ERR.CODE#
      9128**DCL      9505<<ASSIGN  11304<<ASSIGN  11386<<ASSIGN
VD$ERR.FLAGLEV#
      9131**DCL      9506<<ASSIGN  10675<<ASSIGN  11305<<ASSIGN  11387<<ASSIGN
VD$IT_COMMAND IN PROCEDURE CMD_STREAM_READ
     10172**DCL     10272<>CALL
VD$OBJECT_HEADER
      9406**DCL      9485<>CALL
VD$PORT.CURRENT.KEY.REP#
      9273**DCL      9587>>IF
VD$PORT.CURRENT.KEY.V$
      9273**DCL      9587>>ASSIGN   9587--ASSIGN
VD$PORT.LEVEL.DATA$
      9293**DCL      9592>>CALL     9592>>CALL
VD$TEXTC_REMOTE.LENGTH#
      9466**DCL      9468--IMP-SIZ  9587--ASSIGN
VDA$LREAD
      7698**DCL-ENT  9577--CALL
VDG$ERASE_COMMAND_WINDOW
      7704**DCL-ENT 10577--CALL
VDG$ESCREECH
      7707**DCL-ENT  9607--CALL     9637--CALL    10284--CALL    11028--CALL    11258--CALL    11263--CALL
     11281--CALL    11285--CALL    11290--CALL
VDG$OALLOC
      7705**DCL-ENT  9504--CALL     9818--CALL    10592--CALL    10672--CALL    10755--CALL    11251--CALL
     11302--CALL    11384--CALL
VDG$OFREE
      7706**DCL-ENT  9485--CALL    10229--CALL    10272--CALL    10305--CALL    10586--CALL    10751--CALL
     11266--CALL
VDI$CEND_GLOBAL
      7708**DCL-ENT 10744--CALL
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:403  
VDI$PGET_COMMAND_RECORD
        68**PROC     9479--ASSIGN
VDI$PREAD_FILE_CLOSE
      7700**DCL-ENT 10348--CALL    10748--CALL    10762--CALL    10776--CALL
VDI$PREAD_FILE_OPEN
      7699**DCL-ENT 10764--CALL
VDI$PREAD_FILE_POSITION
      7701**DCL-ENT 10766--CALL
VDI$PREAD_FILE_READ
      7702**DCL-ENT 10262--CALL
VDW$LOAD
      7703**DCL-ENT 10248--CALL
VD_$COMMENT
      7773**DCL      8572--DCLINIT
VD_$COMMENT.LENGTH#
      7799**DCL      7801--IMP-SIZ
VD_6E.CMD_STREAM$
      7742**DCL      8747--IMP-PTR  9494>>IF       9496>>ASSIGN   9500>>IF       9501>>ASSIGN   9631>>IF
      9634>>ASSIGN   9812>>IF       9814>>IF       9817>>IF       9818>>CALL     9822>>ASSIGN   9831>>ASSIGN
      9831>>ASSIGN  10209>>DOCASE  10212>>IF      10212>>IF      10212>>IF      10212>>IF      10212>>IF
     10224>>IF      10225>>ASSIGN  10225>>ASSIGN  10226>>IF      10227>>ASSIGN  10228>>ASSIGN  10229>>CALL
     10229>>CALL    10231>>ASSIGN  10238>>IF      10257>>IF      10257>>IF      10261>>IF      10265>>IF
     10265>>IF      10271>>IF      10272>>CALL    10274>>ASSIGN  10278>>IF      10284>>CALL    10297>>IF
     10298>>IF      10300>>ASSIGN  10301>>DOWHILE 10303>>ASSIGN  10304>>ASSIGN  10311>>IF      10312>>ASSIGN
     10313>>IF      10319>>IF      10321>>ASSIGN  10321>>ASSIGN  10325>>IF      10333>>ASSIGN  10336>>ASSIGN
     10338>>ASSIGN  10583>>IF      10584>>ASSIGN  10588>>ASSIGN  10591>>IF      10592>>CALL    10595>>ASSIGN
     10651>>ASSIGN  10743>>IF      10746>>IF      10746>>IF      10751>>CALL    10754>>IF      10757>>ASSIGN
     10760>>IF      10760>>IF      11269>>ASSIGN
VD_6E.ERR_HEAD$
      7743**DCL      9142--IMP-PTR 10663>>ASSIGN  10664>>IF      10665>>ASSIGN  10666>>ASSIGN  10668>>ASSIGN
     10669>>ASSIGN
VD_6E.ERR_TAIL$
      7743**DCL      9621>>ASSIGN
VD_6E.INTERRUPT.STATE#
      7743**DCL     10605>>ASSIGN  10606<<ASSIGN  10615<<ASSIGN
VD_6E.SYNONYMS$
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:404  
      7724**DCL      8983--IMP-PTR  9577>>CALL     9587>>IF       9587>>ASSIGN   9587>>ASSIGN   9592>>CALL
      9592>>CALL
VD_ASYM
      7807**DCL      9640--ASSIGN
VD_BUFFER$ IN PROCEDURE CMD_STREAM_READ
      9992**DCL     10074--IMP-PTR 10227<<ASSIGN  10231>>ASSIGN  10312<<ASSIGN  10319>>IF      10319>>IF
     10333>>ASSIGN  10333>>ASSIGN  10335>>IF      10336>>ASSIGN  10336>>ASSIGN  10336>>ASSIGN  10336>>ASSIGN
     10336>>ASSIGN
VD_BUFFER$ IN PROCEDURE READ_FROM_ME
     10452**DCL     10483--IMP-PTR 10584<<ASSIGN  10585>>IF      10586>>CALL    10586>>CALL    10595<<ASSIGN
     10596>>ASSIGN  10597>>ASSIGN  10597>>ASSIGN  10626>>ASSIGN
VD_CMD_OBJECTS$
      7816**DCL      9484>>IF       9485>>CALL     9487<<ASSIGN
VD_ERR$
      8735**DCL      9089--IMP-PTR  9504<>CALL     9505>>ASSIGN   9506>>ASSIGN  10672<>CALL    10674>>ASSIGN
     10675>>ASSIGN  10676>>ASSIGN  11302<>CALL    11304>>ASSIGN  11305>>ASSIGN  11384<>CALL    11386>>ASSIGN
     11387>>ASSIGN  11393>>ASSIGN
VD_FORCE_READ_FROM
      7809**DCL     10633<<ASSIGN  10647<<ASSIGN
VD_LAST_CWIN_ACTIVITY
      7808**DCL     10576>>IF
VD_STATIC_TEMP
      7815**DCL     11279<<CALLBLT 11287>>CALLBLT
VD_XLATE_CHAR_CLASS
      7814**DCL     10954--ASSIGN
WLOAD_FAILED IN PROCEDURE CMD_STREAM_READ
     10339**LABEL   10248--CALLALT
WRITE_BLANK_LINE.STATION_ IN PROCEDURE CMD_STREAM_READ
      9974**DCL      9974--REDEF
WRITE_BLANK_LINE.V IN PROCEDURE CMD_STREAM_READ
      9975**DCL      9972--DCLINIT
WRITE_BLANK_LINE.V.DVBYTE.VFC# IN PROCEDURE CMD_STREAM_READ
      9981**DCL      9981--REDEF
XLATE_FID_CHAR_CLASS IN PROCEDURE FIND_TOKEN
     10914**DCL     10959--ASSIGN
XUG_GETCMD.INDCB#
PL6.E3A0      #003=VDI$PGET_COMMAND_RECORD File=VDI$PARSE.:VDA5TSI               FRI 07/04/97 11:34 Page:405  
      8001**DCL     10598>>ASSIGN
XUG_GETCMD.NODES$
      7831**DCL      9640<<ASSIGN
XUG_GETCMD.OUT$
      7835**DCL      7841--REDEF
XUG_GETCMD.TREAD#
      7879**DCL     10206<<ASSIGN  10234<<ASSIGN  10267<<ASSIGN  10602>>DOUNTIL 10650<<ASSIGN

PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:406  
     3147        1        /*T***********************************************************/
     3148        2        /*T*                                                         */
     3149        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3150        4        /*T*                                                         */
     3151        5        /*T***********************************************************/
     3152        6
     3153        7        /*D* NAME: VDI$PREAD_FILE
     3154        8            PARAMETERS:
     3155        9                For VDI$PREAD_FILE_READ only:
     3156       10                MXNB_CMD_REC - Max # bytes we can return in a command record.
     3157       11                    This limit is based on the size of the buffer that
     3158       12                    XUG$GETCMD gives us to fill.
     3159       13                EOF_FLAG - Uninitialized BIT(1) ALIGNED flag.  Used only when
     3160       14                    reading or positioning.
     3161       15            INPUT:
     3162       16                VD_6E.CMD_STREAM$ - Ptr to the top VD$CMD_STREAM on the
     3163       17                    command stream stack.  This entry must contain either:
     3164       18                        .TYPE = %CS_FILE, and .FILE = fid of READ-file to be
     3165       19                            operated upon; or
     3166       20                        .TYPE = %CS_DCB, and .DCB# = DCB# to be operated upon.
     3167       21            OUTPUT:
     3168       22                From VDI$PREAD_FILE_OPEN:
     3169       23                    VD$CMD_STREAM.FILE_TYPE will be filled in from the
     3170       24                        opened file.
     3171       25                From VDI$PREAD_FILE_READ:
     3172       26                    VD$CMD_STREAM.RECORD$ will point to a VD$BUFFER
     3173       27                        containing the record read.
     3174       28                    EOF_FLAG will contain either %TRUE or %FALSE;  %TRUE if
     3175       29                        we couldn't read a record 'cause we hit EOF.
     3176       30            DESCRIPTION:
     3177       31                All calls use Fast Sequential library services.
     3178       32                VDI$PREAD_FILE_OPEN will open the READ-file.
     3179       33                VDI$PREAD_FILE_POSITION will position the READ-file
     3180       34                    to the record number specified in the top VD$CMD_STREAM.
     3181       35                VDI$PREAD_FILE_READ will read a record from the READ-file
     3182       36                VDI$PREAD_FILE_CLOSE will close the READ-file.
     3183       37        */
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:407  
     3184       38
     3185       39        VDI$PREAD_FILE: PROC (MXNB_CMD_REC, EOF_FLAG) ALTRET;
     3186       40
     3187       41
     3188       42    1   DCL MXNB_CMD_REC SBIN;
     3189       43    1   DCL EOF_FLAG BIT(1) ALIGNED;
     3190       44
     3191       45
     3192       46        %INCLUDE CP_6;
     3193      127        %INCLUDE B_ERRORS_C;
     3194     1253        %INCLUDE CP_6_SUBS;
     3195     1793        %INCLUDE VD_MACROS_M;
     3196     4008        %INCLUDE VD_PERR_C;
     3197     4156        %INCLUDE XS_MACRO_C;
     3198     4200
     3199     4201
     3200     4202    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     3201     4203    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     3202     4204        %XSA_ENTRIES;
     3203     4208
     3204     4209
     3205     4210    1   DCL M$EI DCB;
     3206     4211        %VD_6E (NAME=VD_6E, STCLASS=SYMREF);
     3207     4247    1   DCL B$TCB$ PTR SYMREF;
     3208     4248
     3209     4249
     3210     4250
     3211     4251        %FPT_FID (FPTN=FILE_FID, ACCT=FILE_ACCT, ASN=FILE_OPEN.V.ASN#,
     3212     4252            NAME=FILE_NAME, PASS=FILE_PASS, RES=FILE_OPEN.V.RES#,
     3213     4253            SN=FILE_SN, WSN=FILE_WSN);
     3214     4276        %FPT_OPEN (FPTN=FILE_OPEN, FUN=IN, SHARE=IN, ACS=SEQUEN);
     3215     4385        %VLP_ACCT (FPTN=FILE_ACCT);
     3216     4398        %VLP_NAME (FPTN=FILE_NAME);
     3217     4425        %VLP_PASS (FPTN=FILE_PASS);
     3218     4438        %VLP_SN (FPTN=FILE_SN, N=%MX_SERIAL_NUMS);
     3219     4451        %VLP_WSN (FPTN=FILE_WSN);
     3220     4464
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:408  
     3221     4465        %XSA_PARAM;
     3222     4495
     3223     4496        %FPT_PRECORD (FPTN=FILE_POSITION);
     3224     4517
     3225     4518        %FPT_READ (FPTN=FILE_READ);
     3226     4557
     3227     4558        %FPT_CLOSE (FPTN=FILE_CLOSE);
     3228     4600
     3229     4601
     3230     4602
     3231     4603    1   DCL VD_BUFFER$ PTR;
     3232     4604    1   DCL NB_BUFFER SBIN;
     3233     4605    1   DCL TOTAL_ARS SBIN;
     3234     4606    1   DCL PREV_BUFFER$ PTR;
     3235     4607    1   DCL VD_ERR$ PTR;
     3236     4608
     3237     4609
     3238     4610        %VD$CMD_STREAM (NAME=CMD$STREAM, STCLASS="BASED(VD_6E.CMD_STREAM$)");
     3239     4649        %VD$BUFFER (NAME=VD$BUFFER, STCLASS="BASED(VD_BUFFER$)");
     3240     4707        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     3241     4760        %VD$IT_COMMAND;
     3242     4798        %VD$BUFFER_HEADER;
     3243     4834        %F$DCB;
     3244     4891        %B$TCB;
     3245     4894        %B$ALT;
     3246     4902
     3247     4903
     3248     4904        %BOX (TITLE="VDI$PREAD_FILE_OPEN");

              4916    1   /***************************************************************************
              4918    1    *                                                                         *
              4922    1            *                            VDI$PREAD_FILE_OPEN                          *
              4924    1            *                                                                         *
              4926    1           ***************************************************************************/

     3249     4930
     3250     4931        /*D* NAME: VDI$PREAD_FILE_OPEN
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:409  
     3251     4932            PARAMETERS:
     3252     4933                None.
     3253     4934            INPUT:
     3254     4935                VD_6E.CMD_STREAM$ as described above.
     3255     4936                XSA_PARAM must be initialized.  It may already have
     3256     4937                    data and key buffers allocated for it -- or it may not.
     3257     4938            OUTPUT:
     3258     4939                VD$CMD_STREAM.FILE_TYPE will be set from the file's type.
     3259     4940            DESCRIPTION:
     3260     4941                The fid from the top command-stream stack entry is used to open
     3261     4942                the file.  No other file should be open on M$EI or the given
     3262     4943                DCB at entry.
     3263     4944        */
     3264     4945
     3265     4946    1   VDI$PREAD_FILE_OPEN: ENTRY ALTRET;
     3266     4947
     3267     4948
     3268     4949    2           IF CMD$STREAM.TYPE# = %CS_FILE THEN DO;
     3269     4950    2              FILE_FID.TEXTFID_ = VECTOR (SUBSTR (CMD$STREAM.FILE.BYTES, 0,
     3270     4951    2                CMD$STREAM.FILE.LENGTH#));
     3271     4952    2              CALL M$FID (FILE_FID)
     3272     4953    3              WHENALTRETURN DO;
     3273     4954    3                 XSA_PARAM.ERR = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
     3274     4955    3                 GOTO FID_FAILED;
     3275     4956    3                 END;
     3276     4957    2              FILE_OPEN.V.DCB# = DCBNUM(M$EI);
     3277     4958    2              FILE_OPEN.V.INITZ.SCRUB# = %TRUE;
     3278     4959    2              FILE_OPEN.ACCT_ = VECTOR(FILE_ACCT);
     3279     4960    2              FILE_OPEN.NAME_ = VECTOR(FILE_NAME);
     3280     4961    2              FILE_OPEN.PASS_ = VECTOR(FILE_PASS);
     3281     4962    2              FILE_OPEN.SN_ = VECTOR(FILE_SN);
     3282     4963    2              FILE_OPEN.WSN_ = VECTOR(FILE_WSN);
     3283     4964    2              END;
     3284     4965    2           ELSE DO;
     3285     4966    2              FILE_OPEN.V.DCB# = CMD$STREAM.DCB#;
     3286     4967    2              FILE_OPEN.V.ASN# = 0;
     3287     4968    2              FILE_OPEN.V.RES# = BINASC(0);
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:410  
     3288     4969    2              FILE_OPEN.V.INITZ.SCRUB# = %FALSE;
     3289     4970    2              FILE_OPEN.ACCT_ = VECTOR(NIL);
     3290     4971    2              FILE_OPEN.NAME_ = VECTOR(NIL);
     3291     4972    2              FILE_OPEN.PASS_ = VECTOR(NIL);
     3292     4973    2              FILE_OPEN.SN_ = VECTOR(NIL);
     3293     4974    2              FILE_OPEN.WSN_ = VECTOR(NIL);
     3294     4975    2              IF NOT DCBADDR(FILE_OPEN.V.DCB#) -> F$DCB.FCD# THEN EXIT;
     3295     4976           /* If already open, presumably this is thw scratch workspace
     3296     4977              used to restore windows after an IBEX command.  Leave it open
     3297     4978              and don't use XSA */
     3298     4979    2              XSA_PARAM.ORG = 0;
     3299     4980    2              GOTO SKIP_XSA$OPEN;
     3300     4981    2              END;
     3301     4982
     3302     4983    1           CALL XSA$OPEN (FILE_OPEN, XSA_PARAM)
     3303     4984    1             ALTRET (OPEN_FAILED);
     3304     4985    1   SKIP_XSA$OPEN: ;
     3305     4986    1           CMD$STREAM.FILE_TYPE = DCBADDR(FILE_OPEN.V.DCB#)->F$DCB.TYPE#;
     3306     4987
     3307     4988    2           IF XSA_PARAM.ORG ~= 0 THEN DO;
     3308     4989                   /* File ok for FSA:  allocate buffers */
     3309     4990    3              IF XSA_PARAM.BBUF_.BUF$ = ADDR(NIL) THEN DO;
     3310     4991    3                 CALL VDG$OALLOC (%CLS_BUFFER, VD_BUFFER$,
     3311     4992    3                   SIZEW(VD$BUFFER_HEADER) + %NW_FSA_DATA_BUFFER)
     3312     4993    3                   ALTRET (OALLOC_FAILED);
     3313     4994    3                 XSA_PARAM.BBUF_.BUF$ = PINCRW(VD_BUFFER$,
     3314     4995    3                   SIZEW(VD$BUFFER_HEADER));
     3315     4996    3                 XSA_PARAM.BBUF_.BOUND = (%NW_FSA_DATA_BUFFER *
     3316     4997    3                   %NB_PER_WORD) - 1;
     3317     4998    3                 END;
     3318     4999    2              IF (XSA_PARAM.ORG = %KEYED# OR XSA_PARAM.ORG = %INDEXED#)
     3319     5000    3                AND XSA_PARAM.KBUF_.BUF$ = ADDR(NIL) THEN DO;
     3320     5001                      /* Allocate key-granule buffer */
     3321     5002    3                 CALL VDG$OALLOC (%CLS_BUFFER, VD_BUFFER$,
     3322     5003    3                   SIZEW(VD$BUFFER_HEADER) + %NW_FSA_KEY_BUFFER)
     3323     5004    3                   ALTRET (OALLOC_FAILED);
     3324     5005    3                 XSA_PARAM.KBUF_.BUF$ = PINCRW(VD_BUFFER$,
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:411  
     3325     5006    3                   SIZEW(VD$BUFFER_HEADER));
     3326     5007    3                 XSA_PARAM.KBUF_.BOUND = (%NW_FSA_KEY_BUFFER *
     3327     5008    3                   %NB_PER_WORD) - 1;
     3328     5009    3                 END;
     3329     5010    2              END;
     3330     5011
     3331     5012    1           RETURN;
     3332     5013
     3333     5014
     3334     5015                %BOX (TITLE="VDI$PREAD_FILE_POSITION", PAGE=YES);
              5023    1
              5027    1   /***************************************************************************
              5029    1    *                                                                         *
              5033    1            *                          VDI$PREAD_FILE_POSITION                        *
              5035    1            *                                                                         *
              5037    1           ***************************************************************************/

     3335     5041
     3336     5042        /*D* NAME: VDI$PREAD_FILE_POSITION
     3337     5043            PARAMETERS:
     3338     5044                None.
     3339     5045            INPUT:
     3340     5046                VD_6E.CMD_STREAM$ as described above.
     3341     5047                XSA_PARAM must be open with all buffers allocated.
     3342     5048                The DCB must have just been opened before VDI$PREAD_FILE_POSITION
     3343     5049                    was called, so that skipping forward in the file is
     3344     5050                    equivalent to positioning to the specified record in the
     3345     5051                    file.  (Which DCB?  If CS_FILE, M$EI; else CMD$STREAM.DCB#.)
     3346     5052                VD$CMD_STREAM.REC_NUM# in top stack entry should contain the
     3347     5053                    record number of the record being processed when we
     3348     5054                    switched to the new READ-file.  We'll re-position to this
     3349     5055                    record, ready for the next call to VDI$PREAD_FILE_READ, which
     3350     5056                    will re-read the record.
     3351     5057            OUTPUT:
     3352     5058                None.
     3353     5059            DESCRIPTION:
     3354     5060                The current READ-file is positioned forward the appropriate number of
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:412  
     3355     5061                records.
     3356     5062        */
     3357     5063
     3358     5064    1   VDI$PREAD_FILE_POSITION: ENTRY ALTRET;
     3359     5065
     3360     5066
     3361     5067    1           FILE_POSITION.V.N# = CMD$STREAM.REC_NUM#;
     3362     5068    1           IF FILE_POSITION.V.N# = 0 THEN
     3363     5069    1              RETURN;      /* Record to read is first in file */
     3364     5070    1           IF CMD$STREAM.TYPE# = %CS_FILE THEN
     3365     5071    1              FILE_POSITION.V.DCB# = DCBNUM(M$EI);
     3366     5072    1           ELSE
     3367     5073    1              FILE_POSITION.V.DCB# = CMD$STREAM.DCB#;
     3368     5074    1           IF DCBADDR(FILE_POSITION.V.DCB#) -> F$DCB.ASN# ~= %DEVICE# THEN
     3369     5075    1              CALL XSA$PRECORD (FILE_POSITION, XSA_PARAM)
     3370     5076    1                ALTRET (PRECORD_FAILED);
     3371     5077    1           RETURN;
     3372     5078
     3373     5079
     3374     5080                %BOX (TITLE="VDI$PREAD_FILE_READ", PAGE=YES);
              5088    1
              5092    1   /***************************************************************************
              5094    1    *                                                                         *
              5098    1            *                            VDI$PREAD_FILE_READ                          *
              5100    1            *                                                                         *
              5102    1           ***************************************************************************/

     3375     5106
     3376     5107        /*D* NAME: VDI$PREAD_FILE_READ
     3377     5108            PARAMETERS:
     3378     5109                MXNB_CMD_REC and EOF_FLAG, as described above.
     3379     5110            INPUT:
     3380     5111                VD_6E.CMD_STREAM$ as described above.
     3381     5112                XSA_PARAM must be open with all buffers allocated.  It should
     3382     5113                    be positioned, ready to read the next record.
     3383     5114            OUTPUT:
     3384     5115                Either EOF_FLAG will be set, or:
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:413  
     3385     5116                    VD$CMD_STREAM.INTREE$ will be NIL (old InTree, if any, freed).
     3386     5117                    VD$CMD_STREAM.RECORD$ will point to a VD$BUFFER containing
     3387     5118                        the record read.
     3388     5119                    VD$CMD_STREAM.POSITION# may be changed; if at entry
     3389     5120                        it is > 0, then we assume we've already processed
     3390     5121                        the first .POSITION# chars of this record, so we
     3391     5122                        leave .POSITION# alone.  If, however, at entry
     3392     5123                        .POSITION# = 0, then we set it to either 0 or 1,
     3393     5124                        depending on the absence or presence, respectively,
     3394     5125                        of a VFC character in the record buffer.
     3395     5126            DESCRIPTION:
     3396     5127                A record is read from the current READ-file, at its current position.
     3397     5128        */
     3398     5129
     3399     5130    1   VDI$PREAD_FILE_READ: ENTRY (MXNB_CMD_REC, EOF_FLAG) ALTRET;
     3400     5131
     3401     5132
     3402     5133    1           EOF_FLAG = %FALSE;
     3403     5134    1           NB_BUFFER = MXNB_CMD_REC;
     3404     5135    1           TOTAL_ARS = 0;
     3405     5136    1           VD_BUFFER$ = ADDR(NIL);
     3406     5137    1           PREV_BUFFER$ = ADDR(NIL);
     3407     5138    2           IF CMD$STREAM.INTREE$ ~= ADDR(NIL) THEN DO;
     3408     5139    2              CALL VDG$OFREE (CMD$STREAM.INTREE$->VD$IT_COMMAND)
     3409     5140    2                ALTRET (OFREE_FAILED);
     3410     5141    2              CMD$STREAM.INTREE$ = ADDR(NIL);
     3411     5142    2              END;
     3412     5143
     3413     5144    2           IF CMD$STREAM.RECORD$ ~= ADDR(NIL) THEN DO;
     3414     5145    2              CALL VDG$OFREE (CMD$STREAM.RECORD$->VD$BUFFER)
     3415     5146    2                ALTRET (OFREE_FAILED);
     3416     5147    2              CMD$STREAM.RECORD$ = ADDR(NIL);
     3417     5148    2              END;
     3418     5149
     3419     5150    1           IF CMD$STREAM.TYPE# = %CS_FILE THEN
     3420     5151    1              FILE_READ.V.DCB# = DCBNUM(M$EI);
     3421     5152    1           ELSE
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:414  
     3422     5153    1              FILE_READ.V.DCB# = CMD$STREAM.DCB#;
     3423     5154
     3424     5155    1   GET_COMPLETE_RECORD:
     3425     5156    2           DO WHILE VD_BUFFER$ = ADDR(NIL);
     3426     5157    2              CALL VDG$OALLOC (%CLS_BUFFER, VD_BUFFER$,
     3427     5158    2                SIZEW(VD$BUFFER_HEADER) +
     3428     5159    2                ((NB_BUFFER + %(NB_PER_WORD - 1)) / %NB_PER_WORD))
     3429     5160    2                ALTRET (OALLOC_FAILED);
     3430     5161    2              CMD$STREAM.RECORD$ = VD_BUFFER$;
     3431     5162    2              VD$BUFFER.LENGTH# = NB_BUFFER;
     3432     5163    2              FILE_READ.BUF_ = VECTOR(VD$BUFFER.BYTES);
     3433     5164                /**** XUG$GETCMD gives us a fixed-len buffer, ***************/
     3434     5165                /****     so we can't do all this             ***************/
     3435     5166                /* IF PREV_BUFFER$ ~= ADDR(NIL) THEN DO;                    */
     3436     5167                /*    \*                                                    */
     3437     5168                /*    * Doing a continued read:  copy already-read part of  */
     3438     5169                /*    *     record to new buffer, free old buffer.          */
     3439     5170                /*    *\                                                    */
     3440     5171                /*    VD$BUFFER.BYTES = PREV_BUFFER$->VD$BUFFER.BYTES;      */
     3441     5172                /*    FILE_READ.BUF_ = VECTOR(SUBSTR(VD$BUFFER.BYTES,       */
     3442     5173                /*      PREV_BUFFER$->VD$BUFFER.LENGTH#));                  */
     3443     5174                /*    CALL VDG$OFREE (PREV_BUFFER$->VD$BUFFER)              */
     3444     5175                /*      ALTRET (OFREE_FAILED);                              */
     3445     5176                /*    PREV_BUFFER$ = ADDR(NIL);                             */
     3446     5177                /*    END;                                                  */
     3447     5178
     3448     5179    2              CALL XSA$READ (FILE_READ, XSA_PARAM)
     3449     5180    3              WHENALTRETURN DO;
     3450     5181                   /**** XUG$GETCMD gives us a fixed-len buffer, ***********/
     3451     5182                   /****     so we can't do all this             ***********/
     3452     5183                   /* IF XSA_PARAM.ERR.CODE ~= %E$LD                       */
     3453     5184                   /*   OR NB_BUFFER + MXNB_CMD_REC > %MXNB_BUFFER THEN    */
     3454     5185    3                 GOTO READ_FAILED_HARD;
     3455     5186                   /* FILE_READ.V.DVBYTE.CONT# = %TRUE;                    */
     3456     5187                   /* VD$BUFFER.LENGTH# = XSA_PARAM.ARS#;                  */
     3457     5188                   /* NB_BUFFER = NB_BUFFER + MXNB_CMD_REC;                */
     3458     5189                   /* TOTAL_ARS = TOTAL_ARS + XSA_PARAM.ARS#;              */
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:415  
     3459     5190                   /* PREV_BUFFER$ = VD_BUFFER$;                           */
     3460     5191                   /* VD_BUFFER$ = ADDR(NIL);                              */
     3461     5192    3                 END;
     3462     5193    2              END GET_COMPLETE_RECORD;
     3463     5194
     3464     5195    1           VD$BUFFER.LENGTH# = TOTAL_ARS + XSA_PARAM.ARS#;
     3465     5196    1           IF CMD$STREAM.POSITION# = 0 THEN
     3466     5197    1              CMD$STREAM.POSITION# = BITBIN(XSA_PARAM.DVBYTE.VFC#);
     3467     5198                %INCREMENT (INDX=%STG_READFILE_READS);
     3468     5201    1           RETURN;
     3469     5202
     3470     5203
     3471     5204    1   READ_FAILED_HARD:
     3472     5205    1           CALL VDG$OFREE (VD$BUFFER)
     3473     5206    1             ALTRET (OFREE_FAILED);
     3474     5207    1           CMD$STREAM.RECORD$ = ADDR(NIL);
     3475     5208    2           IF XSA_PARAM.ERR.CODE = %E$EOF THEN DO;
     3476     5209    2              EOF_FLAG = %TRUE;
     3477     5210    2              RETURN;
     3478     5211    2              END;
     3479     5212
     3480     5213
     3481     5214    1   FID_FAILED: ;
     3482     5215    1   OPEN_FAILED: ;
     3483     5216    1   PRECORD_FAILED: ;
     3484     5217    1   CLOSE_FAILED_HARD:
     3485     5218    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     3486     5219    1             ALTRET (OALLOC_FAILED);
     3487     5220    1           VD$ERR.ERR = XSA_PARAM.ERR;
     3488     5221    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     3489     5222    1           IF CMD$STREAM.TYPE# = %CS_FILE THEN
     3490     5223    1              VD$ERR.DCB# = DCBNUM(M$EI);
     3491     5224    1           ELSE
     3492     5225    1              VD$ERR.DCB# = CMD$STREAM.DCB#;
     3493     5226    1           ALTRETURN;
     3494     5227
     3495     5228
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:416  
     3496     5229    1   OALLOC_FAILED: ;
     3497     5230    1   OFREE_FAILED: ;
     3498     5231    1           ALTRETURN;
     3499     5232
     3500     5233
     3501     5234                %BOX (TITLE="VDI$PREAD_FILE_CLOSE", PAGE=YES);
              5242    1
              5246    1   /***************************************************************************
              5248    1    *                                                                         *
              5252    1            *                            VDI$PREAD_FILE_CLOSE                         *
              5254    1            *                                                                         *
              5256    1           ***************************************************************************/

     3502     5260
     3503     5261        /*D* NAME: VDI$PREAD_FILE_CLOSE
     3504     5262            PARAMETERS:
     3505     5263                None.
     3506     5264            INPUT:
     3507     5265                VD_6E.CMD_STREAM$ as described above.
     3508     5266                XSA_PARAM may or may not be open.
     3509     5267            OUTPUT:
     3510     5268                None.
     3511     5269            DESCRIPTION:
     3512     5270                The current READ-file is closed.  Any buffer
     3513     5271                    associated with the VD$CMD_STREAM is freed unless in use by READ.
     3514     5272        */
     3515     5273
     3516     5274    1   VDI$PREAD_FILE_CLOSE: ENTRY ALTRET;
     3517     5275
     3518     5276
     3519     5277    1           IF CMD$STREAM.RECORD$ ~= ADDR(NIL) AND NOT CMD$STREAM.CMD_AFTER_READ
     3520     5278    2           THEN DO;
     3521     5279    2              CALL VDG$OFREE (CMD$STREAM.RECORD$->VD$BUFFER)
     3522     5280    2                ALTRET (OFREE_FAILED);
     3523     5281    2              CMD$STREAM.RECORD$ = ADDR(NIL);
     3524     5282    2              END;
     3525     5283
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:417  
     3526     5284    1           IF CMD$STREAM.TYPE# = %CS_FILE THEN
     3527     5285    1              FILE_CLOSE.V.DCB# = DCBNUM(M$EI);
     3528     5286    1           ELSE
     3529     5287    1              FILE_CLOSE.V.DCB# = CMD$STREAM.DCB#;
     3530     5288
     3531     5289    2           IF DCBADDR(FILE_CLOSE.V.DCB#)->F$DCB.FCD# THEN DO;
     3532     5290    2              CALL XSA$CLOSE (FILE_CLOSE, XSA_PARAM)
     3533     5291    2                ALTRET (CLOSE_FAILED);
     3534     5292    2              END;
     3535     5293
     3536     5294    1           RETURN;
     3537     5295
     3538     5296
     3539     5297    1   CLOSE_FAILED:
     3540     5298    1           IF XSA_PARAM.ERR.CODE = %E$DCBCLOSED THEN
     3541     5299    1              RETURN;
     3542     5300    1           GOTO CLOSE_FAILED_HARD;
     3543     5301
     3544     5302    1   END VDI$PREAD_FILE;
     3545     5303        %EOD;

PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:418  
--  Include file information  --

   XS_MACRO_C.:LIBRARY  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   CP_6_SUBS.:LIBRARY  is referenced.
   B_ERRORS_C.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDI$PREAD_FILE.

   Procedure VDI$PREAD_FILE requires 348 words for executable code.
   Procedure VDI$PREAD_FILE requires 14 words of local(AUTO) storage.

PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:419  

 Object Unit name= VDI$PREAD_FILE                             File name= VDI$PARSE.:VDA5TOU
 UTS= JUL 04 '97 11:35:16.08 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   Data  even  none   178    262  VDI$PREAD_FILE
    3   Proc  even  none   348    534  VDI$PREAD_FILE
    4  RoData even  none    30     36  VDI$PREAD_FILE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        2  VDI$PREAD_FILE
     3      3          yes     yes      Std        0  VDI$PREAD_FILE_OPEN
     3    203          yes     yes      Std        0  VDI$PREAD_FILE_POSITION
     3    237          yes     yes      Std        2  VDI$PREAD_FILE_READ
     3    457          yes     yes      Std        0  VDI$PREAD_FILE_CLOSE
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:420  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XSA$OPEN
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       2 XSA$PRECORD
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       2 XSA$READ
 yes     yes           Std       2 XSA$CLOSE
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  M$EI                                  VD_6E
     B$TCB$                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:421  


     3147        1        /*T***********************************************************/
     3148        2        /*T*                                                         */
     3149        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3150        4        /*T*                                                         */
     3151        5        /*T***********************************************************/
     3152        6
     3153        7        /*D* NAME: VDI$PREAD_FILE
     3154        8            PARAMETERS:
     3155        9                For VDI$PREAD_FILE_READ only:
     3156       10                MXNB_CMD_REC - Max # bytes we can return in a command record.
     3157       11                    This limit is based on the size of the buffer that
     3158       12                    XUG$GETCMD gives us to fill.
     3159       13                EOF_FLAG - Uninitialized BIT(1) ALIGNED flag.  Used only when
     3160       14                    reading or positioning.
     3161       15            INPUT:
     3162       16                VD_6E.CMD_STREAM$ - Ptr to the top VD$CMD_STREAM on the
     3163       17                    command stream stack.  This entry must contain either:
     3164       18                        .TYPE = %CS_FILE, and .FILE = fid of READ-file to be
     3165       19                            operated upon; or
     3166       20                        .TYPE = %CS_DCB, and .DCB# = DCB# to be operated upon.
     3167       21            OUTPUT:
     3168       22                From VDI$PREAD_FILE_OPEN:
     3169       23                    VD$CMD_STREAM.FILE_TYPE will be filled in from the
     3170       24                        opened file.
     3171       25                From VDI$PREAD_FILE_READ:
     3172       26                    VD$CMD_STREAM.RECORD$ will point to a VD$BUFFER
     3173       27                        containing the record read.
     3174       28                    EOF_FLAG will contain either %TRUE or %FALSE;  %TRUE if
     3175       29                        we couldn't read a record 'cause we hit EOF.
     3176       30            DESCRIPTION:
     3177       31                All calls use Fast Sequential library services.
     3178       32                VDI$PREAD_FILE_OPEN will open the READ-file.
     3179       33                VDI$PREAD_FILE_POSITION will position the READ-file
     3180       34                    to the record number specified in the top VD$CMD_STREAM.
     3181       35                VDI$PREAD_FILE_READ will read a record from the READ-file
     3182       36                VDI$PREAD_FILE_CLOSE will close the READ-file.
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:422  
     3183       37        */
     3184       38
     3185       39        VDI$PREAD_FILE: PROC (MXNB_CMD_REC, EOF_FLAG) ALTRET;

     39  3 000000   000000 700200 xent  VDI$PREAD_F* TSX0  ! X66_AUTO_2
         3 000001   000016 000002                    ZERO    14,2
         3 000002   000005 710000 3                  TRA     s:4949

     3186       40
     3187       41
     3188       42    1   DCL MXNB_CMD_REC SBIN;
     3189       43    1   DCL EOF_FLAG BIT(1) ALIGNED;
     3190       44
     3191       45
     3192       46        %INCLUDE CP_6;
     3193      127        %INCLUDE B_ERRORS_C;
     3194     1253        %INCLUDE CP_6_SUBS;
     3195     1793        %INCLUDE VD_MACROS_M;
     3196     4008        %INCLUDE VD_PERR_C;
     3197     4156        %INCLUDE XS_MACRO_C;
     3198     4200
     3199     4201
     3200     4202    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     3201     4203    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     3202     4204        %XSA_ENTRIES;
     3203     4208
     3204     4209
     3205     4210    1   DCL M$EI DCB;
     3206     4211        %VD_6E (NAME=VD_6E, STCLASS=SYMREF);
     3207     4247    1   DCL B$TCB$ PTR SYMREF;
     3208     4248
     3209     4249
     3210     4250
     3211     4251        %FPT_FID (FPTN=FILE_FID, ACCT=FILE_ACCT, ASN=FILE_OPEN.V.ASN#,
     3212     4252            NAME=FILE_NAME, PASS=FILE_PASS, RES=FILE_OPEN.V.RES#,
     3213     4253            SN=FILE_SN, WSN=FILE_WSN);
     3214     4276        %FPT_OPEN (FPTN=FILE_OPEN, FUN=IN, SHARE=IN, ACS=SEQUEN);
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:423  
     3215     4385        %VLP_ACCT (FPTN=FILE_ACCT);
     3216     4398        %VLP_NAME (FPTN=FILE_NAME);
     3217     4425        %VLP_PASS (FPTN=FILE_PASS);
     3218     4438        %VLP_SN (FPTN=FILE_SN, N=%MX_SERIAL_NUMS);
     3219     4451        %VLP_WSN (FPTN=FILE_WSN);
     3220     4464
     3221     4465        %XSA_PARAM;
     3222     4495
     3223     4496        %FPT_PRECORD (FPTN=FILE_POSITION);
     3224     4517
     3225     4518        %FPT_READ (FPTN=FILE_READ);
     3226     4557
     3227     4558        %FPT_CLOSE (FPTN=FILE_CLOSE);
     3228     4600
     3229     4601
     3230     4602
     3231     4603    1   DCL VD_BUFFER$ PTR;
     3232     4604    1   DCL NB_BUFFER SBIN;
     3233     4605    1   DCL TOTAL_ARS SBIN;
     3234     4606    1   DCL PREV_BUFFER$ PTR;
     3235     4607    1   DCL VD_ERR$ PTR;
     3236     4608
     3237     4609
     3238     4610        %VD$CMD_STREAM (NAME=CMD$STREAM, STCLASS="BASED(VD_6E.CMD_STREAM$)");
     3239     4649        %VD$BUFFER (NAME=VD$BUFFER, STCLASS="BASED(VD_BUFFER$)");
     3240     4707        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     3241     4760        %VD$IT_COMMAND;
     3242     4798        %VD$BUFFER_HEADER;
     3243     4834        %F$DCB;
     3244     4891        %B$TCB;
     3245     4894        %B$ALT;
     3246     4902
     3247     4903
     3248     4904        %BOX (TITLE="VDI$PREAD_FILE_OPEN");

              4916    1   /***************************************************************************
              4918    1    *                                                                         *
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:424  
              4922    1            *                            VDI$PREAD_FILE_OPEN                         *
              4924    1            *                                                                        *
              4926    1          ***************************************************************************/

     3249     4930
     3250     4931        /*D* NAME: VDI$PREAD_FILE_OPEN
     3251     4932            PARAMETERS:
     3252     4933                None.
     3253     4934            INPUT:
     3254     4935                VD_6E.CMD_STREAM$ as described above.
     3255     4936                XSA_PARAM must be initialized.  It may already have
     3256     4937                    data and key buffers allocated for it -- or it may not.
     3257     4938            OUTPUT:
     3258     4939                VD$CMD_STREAM.FILE_TYPE will be set from the file's type.
     3259     4940            DESCRIPTION:
     3260     4941                The fid from the top command-stream stack entry is used to open
     3261     4942                the file.  No other file should be open on M$EI or the given
     3262     4943                DCB at entry.
     3263     4944        */
     3264     4945
     3265     4946    1   VDI$PREAD_FILE_OPEN: ENTRY ALTRET;

   4946  3 000003   000000 700200 xent  VDI$PREAD_F* TSX0  ! X66_AUTO_2
         3 000004   000016 000002                    ZERO    14,2

     3266     4947
     3267     4948
     3268     4949    2           IF CMD$STREAM.TYPE# = %CS_FILE THEN DO;

   4949  3 000005   000026 470400 xsym               LDP0    VD_6E+22
         3 000006   000002 220100                    LDX0    2,,PR0
         3 000007   000003 100003                    CMPX0   3,DU
         3 000010   000053 601000 3                  TNZ     s:4966

     3269     4950    2              FILE_FID.TEXTFID_ = VECTOR (SUBSTR (CMD$STREAM.FILE.BYTES, 0,

   4950  3 000011   000002 236100                    LDQ     2,,PR0
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:425  
         3 000012   000011 772000                    QRL     9
         3 000013   000777 376007                    ANQ     511,DL
         3 000014   000064 737000                    LLS     52
         3 000015   000140 135007                    SBLA    96,DL
         3 000016   000026 236000 xsym               LDQ     VD_6E+22
         3 000017   000000 036000 4                  ADLQ    0
         3 000020   000002 757000 2                  STAQ    FILE_FID+2

     3270     4951    2                CMD$STREAM.FILE.LENGTH#));
     3271     4952    2              CALL M$FID (FILE_FID)

   4952  3 000021   000000 630400 2                  EPPR0   FILE_FID
         3 000022   420001 713400                    CLIMB   alt,+8193
         3 000023   404400 401760                    pmme    nvectors=10
         3 000024   000026 702000 3                  TSX2    s:4954
         3 000025   000033 710000 3                  TRA     s:4957

     3272     4953    3              WHENALTRETURN DO;

     3273     4954    3                 XSA_PARAM.ERR = B$TCB$->B$TCB.ALT$->B$ALT.ERR;

   4954  3 000026   000000 470400 xsym               LDP0    B$TCB$
         3 000027   000000 471500                    LDP1    0,,PR0
         3 000030   100102 236100                    LDQ     66,,PR1
         3 000031   000157 756000 2                  STQ     XSA_PARAM+1

     3274     4955    3                 GOTO FID_FAILED;

   4955  3 000032   000423 710000 3                  TRA     FID_FAILED

     3275     4956    3                 END;
     3276     4957    2              FILE_OPEN.V.DCB# = DCBNUM(M$EI);

   4957  3 000033   000000 236007 xsym               LDQ     M$EI,DL
         3 000034   000000 620006                    EAX0    0,QL
         3 000035   000074 740000 2                  STX0    FILE_OPEN+36

PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:426  
     3277     4958    2              FILE_OPEN.V.INITZ.SCRUB# = %TRUE;

   4958  3 000036   400000 236007                    LDQ     -131072,DL
         3 000037   000074 256000 2                  ORSQ    FILE_OPEN+36

     3278     4959    2              FILE_OPEN.ACCT_ = VECTOR(FILE_ACCT);

   4959  3 000040   000002 237000 4                  LDAQ    2
         3 000041   000054 757000 2                  STAQ    FILE_OPEN+20

     3279     4960    2              FILE_OPEN.NAME_ = VECTOR(FILE_NAME);

   4960  3 000042   000004 237000 4                  LDAQ    4
         3 000043   000036 757000 2                  STAQ    FILE_OPEN+6

     3280     4961    2              FILE_OPEN.PASS_ = VECTOR(FILE_PASS);

   4961  3 000044   000006 237000 4                  LDAQ    6
         3 000045   000040 757000 2                  STAQ    FILE_OPEN+8

     3281     4962    2              FILE_OPEN.SN_ = VECTOR(FILE_SN);

   4962  3 000046   000010 237000 4                  LDAQ    8
         3 000047   000032 757000 2                  STAQ    FILE_OPEN+2

     3282     4963    2              FILE_OPEN.WSN_ = VECTOR(FILE_WSN);

   4963  3 000050   000012 237000 4                  LDAQ    10
         3 000051   000062 757000 2                  STAQ    FILE_OPEN+26

     3283     4964    2              END;

   4964  3 000052   000106 710000 3                  TRA     s:4983

     3284     4965    2           ELSE DO;

     3285     4966    2              FILE_OPEN.V.DCB# = CMD$STREAM.DCB#;
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:427  

   4966  3 000053   000024 221100                    LDX1    20,,PR0
         3 000054   000074 741000 2                  STX1    FILE_OPEN+36

     3286     4967    2              FILE_OPEN.V.ASN# = 0;

   4967  3 000055   000000 236003                    LDQ     0,DU
         3 000056   000075 552004 2                  STBQ    FILE_OPEN+37,'04'O

     3287     4968    2              FILE_OPEN.V.RES# = BINASC(0);

   4968  3 000057   000001 236000 4                  LDQ     1
         3 000060   000100 756000 2                  STQ     FILE_OPEN+40

     3288     4969    2              FILE_OPEN.V.INITZ.SCRUB# = %FALSE;

   4969  3 000061   000014 236000 4                  LDQ     12
         3 000062   000074 356000 2                  ANSQ    FILE_OPEN+36

     3289     4970    2              FILE_OPEN.ACCT_ = VECTOR(NIL);

   4970  3 000063   000016 237000 4                  LDAQ    14
         3 000064   000054 757000 2                  STAQ    FILE_OPEN+20

     3290     4971    2              FILE_OPEN.NAME_ = VECTOR(NIL);

   4971  3 000065   000016 237000 4                  LDAQ    14
         3 000066   000036 757000 2                  STAQ    FILE_OPEN+6

     3291     4972    2              FILE_OPEN.PASS_ = VECTOR(NIL);

   4972  3 000067   000016 237000 4                  LDAQ    14
         3 000070   000040 757000 2                  STAQ    FILE_OPEN+8

     3292     4973    2              FILE_OPEN.SN_ = VECTOR(NIL);

   4973  3 000071   000016 237000 4                  LDAQ    14
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:428  
         3 000072   000032 757000 2                  STAQ    FILE_OPEN+2

     3293     4974    2              FILE_OPEN.WSN_ = VECTOR(NIL);

   4974  3 000073   000016 237000 4                  LDAQ    14
         3 000074   000062 757000 2                  STAQ    FILE_OPEN+26

     3294     4975    2              IF NOT DCBADDR(FILE_OPEN.V.DCB#) -> F$DCB.FCD# THEN EXIT;

   4975  3 000075   000015 471400 4                  LDP1    13
         3 000076   100000 473500                    LDP3    0,,PR1
         3 000077   300000 474511                    LDP4    0,X1,PR3
         3 000100   400031 236100                    LDQ     25,,PR4
         3 000101   020000 316007                    CANQ    8192,DL
         3 000102   000106 600000 3                  TZE     s:4983

     3295     4976           /* If already open, presumably this is thw scratch workspace
     3296     4977              used to restore windows after an IBEX command.  Leave it open
     3297     4978              and don't use XSA */
     3298     4979    2              XSA_PARAM.ORG = 0;

   4979  3 000103   000000 236003                    LDQ     0,DU
         3 000104   000172 552020 2                  STBQ    XSA_PARAM+12,'20'O

     3299     4980    2              GOTO SKIP_XSA$OPEN;

   4980  3 000105   000112 710000 3                  TRA     SKIP_XSA$OPEN

     3300     4981    2              END;
     3301     4982
     3302     4983    1           CALL XSA$OPEN (FILE_OPEN, XSA_PARAM)

   4983  3 000106   000020 630400 4                  EPPR0   16
         3 000107   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000110   000000 701000 xent               TSX1    XSA$OPEN
         3 000111   000423 702000 3                  TSX2    FID_FAILED

PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:429  
     3303     4984    1             ALTRET (OPEN_FAILED);
     3304     4985    1   SKIP_XSA$OPEN: ;

   4985  3 000112                       SKIP_XSA$OP* null
     3305     4986    1           CMD$STREAM.FILE_TYPE = DCBADDR(FILE_OPEN.V.DCB#)->F$DCB.TYPE#;

   4986  3 000112   000015 470400 4                  LDP0    13
         3 000113   000000 471500                    LDP1    0,,PR0
         3 000114   000074 220000 2                  LDX0    FILE_OPEN+36
         3 000115   100000 473510                    LDP3    0,X0,PR1
         3 000116   300025 721100                    LXL1    21,,PR3
         3 000117   000026 474400 xsym               LDP4    VD_6E+22
         3 000120   400024 441100                    SXL1    20,,PR4

     3306     4987
     3307     4988    2           IF XSA_PARAM.ORG ~= 0 THEN DO;

   4988  3 000121   000172 236000 2                  LDQ     XSA_PARAM+12
         3 000122   000777 316003                    CANQ    511,DU
         3 000123   000202 600000 3                  TZE     s:5012

     3308     4989                   /* File ok for FSA:  allocate buffers */
     3309     4990    3              IF XSA_PARAM.BBUF_.BUF$ = ADDR(NIL) THEN DO;

   4990  3 000124   000163 236000 2                  LDQ     XSA_PARAM+5
         3 000125   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000126   000150 601000 3                  TNZ     s:4999

     3310     4991    3                 CALL VDG$OALLOC (%CLS_BUFFER, VD_BUFFER$,

   4991  3 000127   000023 236000 4                  LDQ     19
         3 000130   200014 756100                    STQ     VD_ERR$+3,,AUTO
         3 000131   200005 633500                    EPPR3   VD_BUFFER$,,AUTO
         3 000132   200013 453500                    STP3    VD_ERR$+2,,AUTO
         3 000133   000024 236000 4                  LDQ     20
         3 000134   200012 756100                    STQ     VD_ERR$+1,,AUTO
         3 000135   200012 630500                    EPPR0   VD_ERR$+1,,AUTO
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:430  
         3 000136   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 000137   000000 701000 xent               TSX1    VDG$OALLOC
         3 000140   000456 702000 3                  TSX2    OALLOC_FAILED

     3311     4992    3                   SIZEW(VD$BUFFER_HEADER) + %NW_FSA_DATA_BUFFER)
     3312     4993    3                   ALTRET (OALLOC_FAILED);
     3313     4994    3                 XSA_PARAM.BBUF_.BUF$ = PINCRW(VD_BUFFER$,

   4994  3 000141   200005 236100                    LDQ     VD_BUFFER$,,AUTO
         3 000142   000003 036003                    ADLQ    3,DU
         3 000143   000163 756000 2                  STQ     XSA_PARAM+5

     3314     4995    3                   SIZEW(VD$BUFFER_HEADER));
     3315     4996    3                 XSA_PARAM.BBUF_.BOUND = (%NW_FSA_DATA_BUFFER *

   4996  3 000144   000162 236000 2                  LDQ     XSA_PARAM+4
         3 000145   177777 376007                    ANQ     65535,DL
         3 000146   000025 276000 4                  ORQ     21
         3 000147   000162 756000 2                  STQ     XSA_PARAM+4

     3316     4997    3                   %NB_PER_WORD) - 1;
     3317     4998    3                 END;

     3318     4999    2              IF (XSA_PARAM.ORG = %KEYED# OR XSA_PARAM.ORG = %INDEXED#)

   4999  3 000150   000172 236000 2                  LDQ     XSA_PARAM+12
         3 000151   000777 376003                    ANQ     511,DU
         3 000152   000002 116003                    CMPQ    2,DU
         3 000153   000156 600000 3                  TZE     s:4999+6
         3 000154   000006 116003                    CMPQ    6,DU
         3 000155   000202 601000 3                  TNZ     s:5012
         3 000156   000161 236000 2                  LDQ     XSA_PARAM+3
         3 000157   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000160   000202 601000 3                  TNZ     s:5012

     3319     5000    3                AND XSA_PARAM.KBUF_.BUF$ = ADDR(NIL) THEN DO;

PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:431  
     3320     5001                      /* Allocate key-granule buffer */
     3321     5002    3                 CALL VDG$OALLOC (%CLS_BUFFER, VD_BUFFER$,

   5002  3 000161   000023 236000 4                  LDQ     19
         3 000162   200014 756100                    STQ     VD_ERR$+3,,AUTO
         3 000163   200005 630500                    EPPR0   VD_BUFFER$,,AUTO
         3 000164   200013 450500                    STP0    VD_ERR$+2,,AUTO
         3 000165   000024 236000 4                  LDQ     20
         3 000166   200012 756100                    STQ     VD_ERR$+1,,AUTO
         3 000167   200012 630500                    EPPR0   VD_ERR$+1,,AUTO
         3 000170   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 000171   000000 701000 xent               TSX1    VDG$OALLOC
         3 000172   000456 702000 3                  TSX2    OALLOC_FAILED

     3322     5003    3                   SIZEW(VD$BUFFER_HEADER) + %NW_FSA_KEY_BUFFER)
     3323     5004    3                   ALTRET (OALLOC_FAILED);
     3324     5005    3                 XSA_PARAM.KBUF_.BUF$ = PINCRW(VD_BUFFER$,

   5005  3 000173   200005 236100                    LDQ     VD_BUFFER$,,AUTO
         3 000174   000003 036003                    ADLQ    3,DU
         3 000175   000161 756000 2                  STQ     XSA_PARAM+3

     3325     5006    3                   SIZEW(VD$BUFFER_HEADER));
     3326     5007    3                 XSA_PARAM.KBUF_.BOUND = (%NW_FSA_KEY_BUFFER *

   5007  3 000176   000160 236000 2                  LDQ     XSA_PARAM+2
         3 000177   177777 376007                    ANQ     65535,DL
         3 000200   000025 276000 4                  ORQ     21
         3 000201   000160 756000 2                  STQ     XSA_PARAM+2

     3327     5008    3                   %NB_PER_WORD) - 1;
     3328     5009    3                 END;

     3329     5010    2              END;

     3330     5011
     3331     5012    1           RETURN;
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:432  

   5012  3 000202   000000 702200 xent               TSX2  ! X66_ARET

     3332     5013
     3333     5014
     3334     5015                %BOX (TITLE="VDI$PREAD_FILE_POSITION", PAGE=YES);
              5023    1
              5027    1   /***************************************************************************
              5029    1    *                                                                         *
              5033    1            *                          VDI$PREAD_FILE_POSITION                       *
              5035    1            *                                                                        *
              5037    1          ***************************************************************************/

     3335     5041
     3336     5042        /*D* NAME: VDI$PREAD_FILE_POSITION
     3337     5043            PARAMETERS:
     3338     5044                None.
     3339     5045            INPUT:
     3340     5046                VD_6E.CMD_STREAM$ as described above.
     3341     5047                XSA_PARAM must be open with all buffers allocated.
     3342     5048                The DCB must have just been opened before VDI$PREAD_FILE_POSITION
     3343     5049                    was called, so that skipping forward in the file is
     3344     5050                    equivalent to positioning to the specified record in the
     3345     5051                    file.  (Which DCB?  If CS_FILE, M$EI; else CMD$STREAM.DCB#.)
     3346     5052                VD$CMD_STREAM.REC_NUM# in top stack entry should contain the
     3347     5053                    record number of the record being processed when we
     3348     5054                    switched to the new READ-file.  We'll re-position to this
     3349     5055                    record, ready for the next call to VDI$PREAD_FILE_READ, which
     3350     5056                    will re-read the record.
     3351     5057            OUTPUT:
     3352     5058                None.
     3353     5059            DESCRIPTION:
     3354     5060                The current READ-file is positioned forward the appropriate number of
     3355     5061                records.
     3356     5062        */
     3357     5063
     3358     5064    1   VDI$PREAD_FILE_POSITION: ENTRY ALTRET;
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:433  

   5064  3 000203   000000 700200 xent  VDI$PREAD_F* TSX0  ! X66_AUTO_2
         3 000204   000016 000002                    ZERO    14,2

     3359     5065
     3360     5066
     3361     5067    1           FILE_POSITION.V.N# = CMD$STREAM.REC_NUM#;

   5067  3 000205   000026 470400 xsym               LDP0    VD_6E+22
         3 000206   000030 235100                    LDA     24,,PR0
         3 000207   000203 755000 2                  STA     FILE_POSITION+7

     3362     5068    1           IF FILE_POSITION.V.N# = 0 THEN

   5068  3 000210   000212 601000 3                  TNZ     s:5070

     3363     5069    1              RETURN;      /* Record to read is first in file */

   5069  3 000211   000000 702200 xent               TSX2  ! X66_ARET

     3364     5070    1           IF CMD$STREAM.TYPE# = %CS_FILE THEN

   5070  3 000212   000002 220100                    LDX0    2,,PR0
         3 000213   000003 100003                    CMPX0   3,DU
         3 000214   000221 601000 3                  TNZ     s:5073

     3365     5071    1              FILE_POSITION.V.DCB# = DCBNUM(M$EI);

   5071  3 000215   000000 236007 xsym               LDQ     M$EI,DL
         3 000216   000000 621006                    EAX1    0,QL
         3 000217   000202 741000 2                  STX1    FILE_POSITION+6
         3 000220   000223 710000 3                  TRA     s:5074

     3366     5072    1           ELSE
     3367     5073    1              FILE_POSITION.V.DCB# = CMD$STREAM.DCB#;

   5073  3 000221   000024 221100                    LDX1    20,,PR0
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:434  
         3 000222   000202 741000 2                  STX1    FILE_POSITION+6

     3368     5074    1           IF DCBADDR(FILE_POSITION.V.DCB#) -> F$DCB.ASN# ~= %DEVICE# THEN

   5074  3 000223   000015 471400 4                  LDP1    13
         3 000224   100000 473500                    LDP3    0,,PR1
         3 000225   300000 474511                    LDP4    0,X1,PR3
         3 000226   400032 236100                    LDQ     26,,PR4
         3 000227   777000 376007                    ANQ     -512,DL
         3 000230   003000 116007                    CMPQ    1536,DL
         3 000231   000236 600000 3                  TZE     s:5077

     3369     5075    1              CALL XSA$PRECORD (FILE_POSITION, XSA_PARAM)

   5075  3 000232   000026 630400 4                  EPPR0   22
         3 000233   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000234   000000 701000 xent               TSX1    XSA$PRECORD
         3 000235   000423 702000 3                  TSX2    FID_FAILED

     3370     5076    1                ALTRET (PRECORD_FAILED);
     3371     5077    1           RETURN;

   5077  3 000236   000000 702200 xent               TSX2  ! X66_ARET

     3372     5078
     3373     5079
     3374     5080                %BOX (TITLE="VDI$PREAD_FILE_READ", PAGE=YES);
              5088    1
              5092    1   /***************************************************************************
              5094    1    *                                                                         *
              5098    1            *                            VDI$PREAD_FILE_READ                         *
              5100    1            *                                                                        *
              5102    1          ***************************************************************************/

     3375     5106
     3376     5107        /*D* NAME: VDI$PREAD_FILE_READ
     3377     5108            PARAMETERS:
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:435  
     3378     5109                MXNB_CMD_REC and EOF_FLAG, as described above.
     3379     5110            INPUT:
     3380     5111                VD_6E.CMD_STREAM$ as described above.
     3381     5112                XSA_PARAM must be open with all buffers allocated.  It should
     3382     5113                    be positioned, ready to read the next record.
     3383     5114            OUTPUT:
     3384     5115                Either EOF_FLAG will be set, or:
     3385     5116                    VD$CMD_STREAM.INTREE$ will be NIL (old InTree, if any, freed).
     3386     5117                    VD$CMD_STREAM.RECORD$ will point to a VD$BUFFER containing
     3387     5118                        the record read.
     3388     5119                    VD$CMD_STREAM.POSITION# may be changed; if at entry
     3389     5120                        it is > 0, then we assume we've already processed
     3390     5121                        the first .POSITION# chars of this record, so we
     3391     5122                        leave .POSITION# alone.  If, however, at entry
     3392     5123                        .POSITION# = 0, then we set it to either 0 or 1,
     3393     5124                        depending on the absence or presence, respectively,
     3394     5125                        of a VFC character in the record buffer.
     3395     5126            DESCRIPTION:
     3396     5127                A record is read from the current READ-file, at its current position.
     3397     5128        */
     3398     5129
     3399     5130    1   VDI$PREAD_FILE_READ: ENTRY (MXNB_CMD_REC, EOF_FLAG) ALTRET;

   5130  3 000237   000000 700200 xent  VDI$PREAD_F* TSX0  ! X66_AUTO_2
         3 000240   000016 000002                    ZERO    14,2

     3400     5131
     3401     5132
     3402     5133    1           EOF_FLAG = %FALSE;

   5133  3 000241   200004 470500                    LDP0    @EOF_FLAG,,AUTO
         3 000242   000000 450100                    STZ     0,,PR0

     3403     5134    1           NB_BUFFER = MXNB_CMD_REC;

   5134  3 000243   200003 471500                    LDP1    @MXNB_CMD_REC,,AUTO
         3 000244   100000 235100                    LDA     0,,PR1
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:436  
         3 000245   200006 755100                    STA     NB_BUFFER,,AUTO

     3404     5135    1           TOTAL_ARS = 0;

   5135  3 000246   200007 450100                    STZ     TOTAL_ARS,,AUTO

     3405     5136    1           VD_BUFFER$ = ADDR(NIL);

   5136  3 000247   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000250   200005 756100                    STQ     VD_BUFFER$,,AUTO

     3406     5137    1           PREV_BUFFER$ = ADDR(NIL);

   5137  3 000251   200010 756100                    STQ     PREV_BUFFER$,,AUTO

     3407     5138    2           IF CMD$STREAM.INTREE$ ~= ADDR(NIL) THEN DO;

   5138  3 000252   000026 473400 xsym               LDP3    VD_6E+22
         3 000253   300026 236100                    LDQ     22,,PR3
         3 000254   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000255   000267 600000 3                  TZE     s:5144

     3408     5139    2              CALL VDG$OFREE (CMD$STREAM.INTREE$->VD$IT_COMMAND)

   5139  3 000256   300026 474500                    LDP4    22,,PR3
         3 000257   200012 454500                    STP4    VD_ERR$+1,,AUTO
         3 000260   200012 630500                    EPPR0   VD_ERR$+1,,AUTO
         3 000261   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000262   000000 701000 xent               TSX1    VDG$OFREE
         3 000263   000456 702000 3                  TSX2    OALLOC_FAILED

     3409     5140    2                ALTRET (OFREE_FAILED);
     3410     5141    2              CMD$STREAM.INTREE$ = ADDR(NIL);

   5141  3 000264   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000265   000026 470400 xsym               LDP0    VD_6E+22
         3 000266   000026 756100                    STQ     22,,PR0
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:437  

     3411     5142    2              END;

     3412     5143
     3413     5144    2           IF CMD$STREAM.RECORD$ ~= ADDR(NIL) THEN DO;

   5144  3 000267   000026 470400 xsym               LDP0    VD_6E+22
         3 000270   000025 236100                    LDQ     21,,PR0
         3 000271   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000272   000304 600000 3                  TZE     s:5150

     3414     5145    2              CALL VDG$OFREE (CMD$STREAM.RECORD$->VD$BUFFER)

   5145  3 000273   000025 471500                    LDP1    21,,PR0
         3 000274   200012 451500                    STP1    VD_ERR$+1,,AUTO
         3 000275   200012 630500                    EPPR0   VD_ERR$+1,,AUTO
         3 000276   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000277   000000 701000 xent               TSX1    VDG$OFREE
         3 000300   000456 702000 3                  TSX2    OALLOC_FAILED

     3415     5146    2                ALTRET (OFREE_FAILED);
     3416     5147    2              CMD$STREAM.RECORD$ = ADDR(NIL);

   5147  3 000301   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000302   000026 470400 xsym               LDP0    VD_6E+22
         3 000303   000025 756100                    STQ     21,,PR0

     3417     5148    2              END;

     3418     5149
     3419     5150    1           IF CMD$STREAM.TYPE# = %CS_FILE THEN

   5150  3 000304   000026 470400 xsym               LDP0    VD_6E+22
         3 000305   000002 220100                    LDX0    2,,PR0
         3 000306   000003 100003                    CMPX0   3,DU
         3 000307   000314 601000 3                  TNZ     s:5153

PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:438  
     3420     5151    1              FILE_READ.V.DCB# = DCBNUM(M$EI);

   5151  3 000310   000000 236007 xsym               LDQ     M$EI,DL
         3 000311   000000 621006                    EAX1    0,QL
         3 000312   000216 741000 2                  STX1    FILE_READ+8
         3 000313   000316 710000 3                  TRA     GET_COMPLETE_RECORD

     3421     5152    1           ELSE
     3422     5153    1              FILE_READ.V.DCB# = CMD$STREAM.DCB#;

   5153  3 000314   000024 221100                    LDX1    20,,PR0
         3 000315   000216 741000 2                  STX1    FILE_READ+8

     3423     5154
     3424     5155    1   GET_COMPLETE_RECORD:
     3425     5156    2           DO WHILE VD_BUFFER$ = ADDR(NIL);

   5156  3 000316   000362 710000 3     GET_COMPLET* TRA     s:5193

     3426     5157    2              CALL VDG$OALLOC (%CLS_BUFFER, VD_BUFFER$,

   5157  3 000317   200006 236100                    LDQ     NB_BUFFER,,AUTO
         3 000320   000003 036007                    ADLQ    3,DL
         3 000321   000004 506007                    DIV     4,DL
         3 000322   000003 036007                    ADLQ    3,DL
         3 000323   200012 756100                    STQ     VD_ERR$+1,,AUTO
         3 000324   200012 630500                    EPPR0   VD_ERR$+1,,AUTO
         3 000325   200015 450500                    STP0    VD_ERR$+4,,AUTO
         3 000326   200005 631500                    EPPR1   VD_BUFFER$,,AUTO
         3 000327   200014 451500                    STP1    VD_ERR$+3,,AUTO
         3 000330   000024 236000 4                  LDQ     20
         3 000331   200013 756100                    STQ     VD_ERR$+2,,AUTO
         3 000332   200013 630500                    EPPR0   VD_ERR$+2,,AUTO
         3 000333   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 000334   000000 701000 xent               TSX1    VDG$OALLOC
         3 000335   000456 702000 3                  TSX2    OALLOC_FAILED

PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:439  
     3427     5158    2                SIZEW(VD$BUFFER_HEADER) +
     3428     5159    2                ((NB_BUFFER + %(NB_PER_WORD - 1)) / %NB_PER_WORD))
     3429     5160    2                ALTRET (OALLOC_FAILED);
     3430     5161    2              CMD$STREAM.RECORD$ = VD_BUFFER$;

   5161  3 000336   200005 236100                    LDQ     VD_BUFFER$,,AUTO
         3 000337   000026 470400 xsym               LDP0    VD_6E+22
         3 000340   000025 756100                    STQ     21,,PR0

     3431     5162    2              VD$BUFFER.LENGTH# = NB_BUFFER;

   5162  3 000341   200006 720100                    LXL0    NB_BUFFER,,AUTO
         3 000342   200005 470500                    LDP0    VD_BUFFER$,,AUTO
         3 000343   000002 740100                    STX0    2,,PR0

     3432     5163    2              FILE_READ.BUF_ = VECTOR(VD$BUFFER.BYTES);

   5163  3 000344   200005 470500                    LDP0    VD_BUFFER$,,AUTO
         3 000345   000002 221100                    LDX1    2,,PR0
         3 000346   000000 635011                    EAA     0,X1
         3 000347   000002 731000                    ARS     2
         3 000350   000140 135007                    SBLA    96,DL
         3 000351   200005 236100                    LDQ     VD_BUFFER$,,AUTO
         3 000352   000030 036000 4                  ADLQ    24
         3 000353   000212 757000 2                  STAQ    FILE_READ+4

     3433     5164                /**** XUG$GETCMD gives us a fixed-len buffer, ***************/
     3434     5165                /****     so we can't do all this             ***************/
     3435     5166                /* IF PREV_BUFFER$ ~= ADDR(NIL) THEN DO;                    */
     3436     5167                /*    \*                                                    */
     3437     5168                /*    * Doing a continued read:  copy already-read part of  */
     3438     5169                /*    *     record to new buffer, free old buffer.          */
     3439     5170                /*    *\                                                    */
     3440     5171                /*    VD$BUFFER.BYTES = PREV_BUFFER$->VD$BUFFER.BYTES;      */
     3441     5172                /*    FILE_READ.BUF_ = VECTOR(SUBSTR(VD$BUFFER.BYTES,       */
     3442     5173                /*      PREV_BUFFER$->VD$BUFFER.LENGTH#));                  */
     3443     5174                /*    CALL VDG$OFREE (PREV_BUFFER$->VD$BUFFER)              */
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:440  
     3444     5175                /*      ALTRET (OFREE_FAILED);                              */
     3445     5176                /*    PREV_BUFFER$ = ADDR(NIL);                             */
     3446     5177                /*    END;                                                  */
     3447     5178
     3448     5179    2              CALL XSA$READ (FILE_READ, XSA_PARAM)

   5179  3 000354   000031 630400 4                  EPPR0   25
         3 000355   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000356   000000 701000 xent               TSX1    XSA$READ
         3 000357   000361 702000 3                  TSX2    s:5185
         3 000360   000362 710000 3                  TRA     s:5193

     3449     5180    3              WHENALTRETURN DO;

     3450     5181                   /**** XUG$GETCMD gives us a fixed-len buffer, ***********/
     3451     5182                   /****     so we can't do all this             ***********/
     3452     5183                   /* IF XSA_PARAM.ERR.CODE ~= %E$LD                       */
     3453     5184                   /*   OR NB_BUFFER + MXNB_CMD_REC > %MXNB_BUFFER THEN    */
     3454     5185    3                 GOTO READ_FAILED_HARD;

   5185  3 000361   000404 710000 3                  TRA     READ_FAILED_HARD

     3455     5186                   /* FILE_READ.V.DVBYTE.CONT# = %TRUE;                    */
     3456     5187                   /* VD$BUFFER.LENGTH# = XSA_PARAM.ARS#;                  */
     3457     5188                   /* NB_BUFFER = NB_BUFFER + MXNB_CMD_REC;                */
     3458     5189                   /* TOTAL_ARS = TOTAL_ARS + XSA_PARAM.ARS#;              */
     3459     5190                   /* PREV_BUFFER$ = VD_BUFFER$;                           */
     3460     5191                   /* VD_BUFFER$ = ADDR(NIL);                              */
     3461     5192    3                 END;
     3462     5193    2              END GET_COMPLETE_RECORD;

   5193  3 000362   200005 236100                    LDQ     VD_BUFFER$,,AUTO
         3 000363   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000364   000317 600000 3                  TZE     s:5157

     3463     5194
     3464     5195    1           VD$BUFFER.LENGTH# = TOTAL_ARS + XSA_PARAM.ARS#;
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:441  

   5195  3 000365   200007 236100                    LDQ     TOTAL_ARS,,AUTO
         3 000366   000156 036000 2                  ADLQ    XSA_PARAM
         3 000367   000000 620006                    EAX0    0,QL
         3 000370   200005 470500                    LDP0    VD_BUFFER$,,AUTO
         3 000371   000002 740100                    STX0    2,,PR0

     3465     5196    1           IF CMD$STREAM.POSITION# = 0 THEN

   5196  3 000372   000026 470400 xsym               LDP0    VD_6E+22
         3 000373   000027 220100                    LDX0    23,,PR0
         3 000374   000402 601000 3                  TNZ     s:5199

     3466     5197    1              CMD$STREAM.POSITION# = BITBIN(XSA_PARAM.DVBYTE.VFC#);

   5197  3 000375   000172 236000 2                  LDQ     XSA_PARAM+12
         3 000376   000040 772000                    QRL     32
         3 000377   000001 376007                    ANQ     1,DL
         3 000400   000000 621006                    EAX1    0,QL
         3 000401   000027 741100                    STX1    23,,PR0

     3467     5198                %INCREMENT (INDX=%STG_READFILE_READS);

   5199  3 000402   000037 054000 xsym               AOS     VD_6E+31

     3468     5201    1           RETURN;

   5201  3 000403   000000 702200 xent               TSX2  ! X66_ARET

     3469     5202
     3470     5203
     3471     5204    1   READ_FAILED_HARD:
     3472     5205    1           CALL VDG$OFREE (VD$BUFFER)

   5205  3 000404   200005 630500       READ_FAILED* EPPR0   VD_BUFFER$,,AUTO
         3 000405   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000406   000000 701000 xent               TSX1    VDG$OFREE
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:442  
         3 000407   000456 702000 3                  TSX2    OALLOC_FAILED

     3473     5206    1             ALTRET (OFREE_FAILED);
     3474     5207    1           CMD$STREAM.RECORD$ = ADDR(NIL);

   5207  3 000410   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000411   000026 470400 xsym               LDP0    VD_6E+22
         3 000412   000025 756100                    STQ     21,,PR0

     3475     5208    2           IF XSA_PARAM.ERR.CODE = %E$EOF THEN DO;

   5208  3 000413   000157 236000 2                  LDQ     XSA_PARAM+1
         3 000414   377770 376007                    ANQ     131064,DL
         3 000415   000060 116007                    CMPQ    48,DL
         3 000416   000423 601000 3                  TNZ     FID_FAILED

     3476     5209    2              EOF_FLAG = %TRUE;

   5209  3 000417   400000 236003                    LDQ     -131072,DU
         3 000420   200004 470500                    LDP0    @EOF_FLAG,,AUTO
         3 000421   000000 756100                    STQ     0,,PR0

     3477     5210    2              RETURN;

   5210  3 000422   000000 702200 xent               TSX2  ! X66_ARET

   5208  3 000423                       FID_FAILED   null
   5208  3 000423                       OPEN_FAILED  null
   5208  3 000423                       PRECORD_FAI* null
     3478     5211    2              END;
     3479     5212
     3480     5213
     3481     5214    1   FID_FAILED: ;
     3482     5215    1   OPEN_FAILED: ;
     3483     5216    1   PRECORD_FAILED: ;
     3484     5217    1   CLOSE_FAILED_HARD:
     3485     5218    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:443  

   5218  3 000423   200011 630500       CLOSE_FAILE* EPPR0   VD_ERR$,,AUTO
         3 000424   200013 450500                    STP0    VD_ERR$+2,,AUTO
         3 000425   000033 236000 4                  LDQ     27
         3 000426   200012 756100                    STQ     VD_ERR$+1,,AUTO
         3 000427   200012 630500                    EPPR0   VD_ERR$+1,,AUTO
         3 000430   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000431   000000 701000 xent               TSX1    VDG$OALLOC
         3 000432   000456 702000 3                  TSX2    OALLOC_FAILED

     3486     5219    1             ALTRET (OALLOC_FAILED);
     3487     5220    1           VD$ERR.ERR = XSA_PARAM.ERR;

   5220  3 000433   000157 236000 2                  LDQ     XSA_PARAM+1
         3 000434   200011 470500                    LDP0    VD_ERR$,,AUTO
         3 000435   000002 756100                    STQ     2,,PR0

     3488     5221    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   5221  3 000436   000003 220003                    LDX0    3,DU
         3 000437   200011 470500                    LDP0    VD_ERR$,,AUTO
         3 000440   000003 740100                    STX0    3,,PR0

     3489     5222    1           IF CMD$STREAM.TYPE# = %CS_FILE THEN

   5222  3 000441   000026 470400 xsym               LDP0    VD_6E+22
         3 000442   000002 221100                    LDX1    2,,PR0
         3 000443   000003 101003                    CMPX1   3,DU
         3 000444   000452 601000 3                  TNZ     s:5225

     3490     5223    1              VD$ERR.DCB# = DCBNUM(M$EI);

   5223  3 000445   000000 236007 xsym               LDQ     M$EI,DL
         3 000446   000000 622006                    EAX2    0,QL
         3 000447   200011 471500                    LDP1    VD_ERR$,,AUTO
         3 000450   100004 742100                    STX2    4,,PR1
         3 000451   000455 710000 3                  TRA     s:5226
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:444  

     3491     5224    1           ELSE
     3492     5225    1              VD$ERR.DCB# = CMD$STREAM.DCB#;

   5225  3 000452   000024 222100                    LDX2    20,,PR0
         3 000453   200011 471500                    LDP1    VD_ERR$,,AUTO
         3 000454   100004 742100                    STX2    4,,PR1

     3493     5226    1           ALTRETURN;

   5226  3 000455   000000 702200 xent               TSX2  ! X66_AALT

   5222  3 000456                       OALLOC_FAIL* null
   5222  3 000456                       OFREE_FAILED null
     3494     5227
     3495     5228
     3496     5229    1   OALLOC_FAILED: ;
     3497     5230    1   OFREE_FAILED: ;
     3498     5231    1           ALTRETURN;

   5231  3 000456   000000 702200 xent               TSX2  ! X66_AALT

     3499     5232
     3500     5233
     3501     5234                %BOX (TITLE="VDI$PREAD_FILE_CLOSE", PAGE=YES);
              5242    1
              5246    1   /***************************************************************************
              5248    1    *                                                                         *
              5252    1            *                            VDI$PREAD_FILE_CLOSE                        *
              5254    1            *                                                                        *
              5256    1          ***************************************************************************/

     3502     5260
     3503     5261        /*D* NAME: VDI$PREAD_FILE_CLOSE
     3504     5262            PARAMETERS:
     3505     5263                None.
     3506     5264            INPUT:
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:445  
     3507     5265                VD_6E.CMD_STREAM$ as described above.
     3508     5266                XSA_PARAM may or may not be open.
     3509     5267            OUTPUT:
     3510     5268                None.
     3511     5269            DESCRIPTION:
     3512     5270                The current READ-file is closed.  Any buffer
     3513     5271                    associated with the VD$CMD_STREAM is freed unless in use by READ.
     3514     5272        */
     3515     5273
     3516     5274    1   VDI$PREAD_FILE_CLOSE: ENTRY ALTRET;

   5274  3 000457   000000 700200 xent  VDI$PREAD_F* TSX0  ! X66_AUTO_2
         3 000460   000016 000002                    ZERO    14,2

     3517     5275
     3518     5276
     3519     5277    1           IF CMD$STREAM.RECORD$ ~= ADDR(NIL) AND NOT CMD$STREAM.CMD_AFTER_READ

   5277  3 000461   000026 470400 xsym               LDP0    VD_6E+22
         3 000462   000025 236100                    LDQ     21,,PR0
         3 000463   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000464   000501 600000 3                  TZE     s:5284
         3 000465   000027 236100                    LDQ     23,,PR0
         3 000466   040000 316007                    CANQ    16384,DL
         3 000467   000501 601000 3                  TNZ     s:5284

     3520     5278    2           THEN DO;

     3521     5279    2              CALL VDG$OFREE (CMD$STREAM.RECORD$->VD$BUFFER)

   5279  3 000470   000025 471500                    LDP1    21,,PR0
         3 000471   200012 451500                    STP1    VD_ERR$+1,,AUTO
         3 000472   200012 630500                    EPPR0   VD_ERR$+1,,AUTO
         3 000473   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000474   000000 701000 xent               TSX1    VDG$OFREE
         3 000475   000456 702000 3                  TSX2    OALLOC_FAILED

PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:446  
     3522     5280    2                ALTRET (OFREE_FAILED);
     3523     5281    2              CMD$STREAM.RECORD$ = ADDR(NIL);

   5281  3 000476   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000477   000026 470400 xsym               LDP0    VD_6E+22
         3 000500   000025 756100                    STQ     21,,PR0

     3524     5282    2              END;

     3525     5283
     3526     5284    1           IF CMD$STREAM.TYPE# = %CS_FILE THEN

   5284  3 000501   000026 470400 xsym               LDP0    VD_6E+22
         3 000502   000002 220100                    LDX0    2,,PR0
         3 000503   000003 100003                    CMPX0   3,DU
         3 000504   000511 601000 3                  TNZ     s:5287

     3527     5285    1              FILE_CLOSE.V.DCB# = DCBNUM(M$EI);

   5285  3 000505   000000 236007 xsym               LDQ     M$EI,DL
         3 000506   000000 621006                    EAX1    0,QL
         3 000507   000256 741000 2                  STX1    FILE_CLOSE+26
         3 000510   000513 710000 3                  TRA     s:5289

     3528     5286    1           ELSE
     3529     5287    1              FILE_CLOSE.V.DCB# = CMD$STREAM.DCB#;

   5287  3 000511   000024 221100                    LDX1    20,,PR0
         3 000512   000256 741000 2                  STX1    FILE_CLOSE+26

     3530     5288
     3531     5289    2           IF DCBADDR(FILE_CLOSE.V.DCB#)->F$DCB.FCD# THEN DO;

   5289  3 000513   000015 471400 4                  LDP1    13
         3 000514   100000 473500                    LDP3    0,,PR1
         3 000515   300000 474511                    LDP4    0,X1,PR3
         3 000516   400031 236100                    LDQ     25,,PR4
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:447  
         3 000517   020000 316007                    CANQ    8192,DL
         3 000520   000525 600000 3                  TZE     s:5294

     3532     5290    2              CALL XSA$CLOSE (FILE_CLOSE, XSA_PARAM)

   5290  3 000521   000034 630400 4                  EPPR0   28
         3 000522   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000523   000000 701000 xent               TSX1    XSA$CLOSE
         3 000524   000526 702000 3                  TSX2    CLOSE_FAILED

     3533     5291    2                ALTRET (CLOSE_FAILED);
     3534     5292    2              END;

     3535     5293
     3536     5294    1           RETURN;

   5294  3 000525   000000 702200 xent               TSX2  ! X66_ARET

     3537     5295
     3538     5296
     3539     5297    1   CLOSE_FAILED:
     3540     5298    1           IF XSA_PARAM.ERR.CODE = %E$DCBCLOSED THEN

   5298  3 000526   000157 236000 2     CLOSE_FAILED LDQ     XSA_PARAM+1
         3 000527   377770 376007                    ANQ     131064,DL
         3 000530   002260 116007                    CMPQ    1200,DL
         3 000531   000533 601000 3                  TNZ     s:5300

     3541     5299    1              RETURN;

   5299  3 000532   000000 702200 xent               TSX2  ! X66_ARET

     3542     5300    1           GOTO CLOSE_FAILED_HARD;

   5300  3 000533   000423 710000 3                  TRA     FID_FAILED
     3543     5301
     3544     5302    1   END VDI$PREAD_FILE;
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:448  
     3545     5303        %EOD;

PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:449  
--  Include file information  --

   XS_MACRO_C.:LIBRARY  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   CP_6_SUBS.:LIBRARY  is referenced.
   B_ERRORS_C.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDI$PREAD_FILE.
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:450  

 **** Variables and constants ****

  ****  Section 002  Data  VDI$PREAD_FILE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   122-0-0/c STRC(72)    r     1 FILE_ACCT                224-0-0/d STRC(1080)  r     1 FILE_CLOSE
     0-0-0/d STRC(864)   r     1 FILE_FID                 124-0-0/c STRC(288)   r     1 FILE_NAME
    30-0-0/d STRC(2088)  r     1 FILE_OPEN                134-0-0/c STRC(72)    r     1 FILE_PASS
   174-0-0/d STRC(360)   r     1 FILE_POSITION            206-0-0/d STRC(504)   r     1 FILE_READ
   136-0-0/d STRC(468)   r     1 FILE_SN                  154-0-0/c STRC(72)    r     1 FILE_WSN
   156-0-0/d STRC(504)   r     1 XSA_PARAM

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @EOF_FLAG                  3-0-0/w PTR         r     1 @MXNB_CMD_REC
    *0-0-0/w BIT         r     1 EOF_FLAG                  *0-0-0/w SBIN        r     1 MXNB_CMD_REC
     6-0-0/w SBIN        r     1 NB_BUFFER                 10-0-0/w PTR         r     1 PREV_BUFFER$
     7-0-0/w SBIN        r     1 TOTAL_ARS                  5-0-0/w PTR         r     1 VD_BUFFER$
    11-0-0/w PTR         r     1 VD_ERR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w STRC(22644) r     1 VD_6E

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:451  
     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w STRC(900)   r     1 CMD$STREAM                 0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0N  NULL        r     1 M$EI                       0-0-0/w ASTR(90)    r     1 VD$BUFFER
     0-0-0/w STRC(90)    r     1 VD$BUFFER_HEADER           0-0-0/w STRC(180)   r     1 VD$ERR
     0-0-0/w STRC(540)   r     1 VD$IT_COMMAND


   Procedure VDI$PREAD_FILE requires 348 words for executable code.
   Procedure VDI$PREAD_FILE requires 14 words of local(AUTO) storage.
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:452  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:453  
          MINI XREF LISTING

B$ALT.CODE
      4896**DCL      4896--REDEF    4897--REDEF    4897--REDEF
B$ALT.ERR
      4897**DCL      4954>>ASSIGN
B$ALT.ERR.ERR#
      4898**DCL      4898--REDEF
B$ALT.EVID
      4897**DCL      4897--REDEF    4897--REDEF
B$TCB.ALT$
      4892**DCL      4954>>ASSIGN
B$TCB$
      4247**DCL      4954>>ASSIGN
CLOSE_FAILED
      5298**LABEL    5290--CALLALT
CLOSE_FAILED_HARD
      5218**LABEL    5300--GOTO
CMD$STREAM.CMD_AFTER_READ
      4647**DCL      5277>>IF
CMD$STREAM.DCB#
      4645**DCL      4966>>ASSIGN   5073>>ASSIGN   5153>>ASSIGN   5225>>ASSIGN   5287>>ASSIGN
CMD$STREAM.FILE.BYTES
      4644**DCL      4950--ASSIGN
CMD$STREAM.FILE.LENGTH#
      4644**DCL      4950>>ASSIGN
CMD$STREAM.FILE_TYPE
      4645**DCL      4986<<ASSIGN
CMD$STREAM.INTREE$
      4645**DCL      5138>>IF       5139>>CALL     5141<<ASSIGN
CMD$STREAM.POSITION#
      4646**DCL      5196>>IF       5197<<ASSIGN
CMD$STREAM.RECORD$
      4645**DCL      5144>>IF       5145>>CALL     5145>>CALL     5147<<ASSIGN   5161<<ASSIGN   5207<<ASSIGN
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:454  
      5277>>IF       5279>>CALL     5279>>CALL     5281<<ASSIGN
CMD$STREAM.REC_NUM#
      4647**DCL      5067>>ASSIGN
CMD$STREAM.TYPE#
      4644**DCL      4949>>IF       5070>>IF       5150>>IF       5222>>IF       5284>>IF
EOF_FLAG
        43**DCL        39--PROC     5130--ENTRY    5133<<ASSIGN   5209<<ASSIGN
F$DCB.ACTPOS
      4867**DCL      4867--REDEF
F$DCB.ARS#
      4841**DCL      4841--REDEF
F$DCB.ASN#
      4856**DCL      5074>>IF
F$DCB.ATTR
      4860**DCL      4861--REDEF
F$DCB.BORROW
      4875**DCL      4875--REDEF    4875--REDEF    4875--REDEF
F$DCB.DCBNAME.L
      4889**DCL      4889--IMP-SIZ
F$DCB.EOMCHAR#
      4845**DCL      4845--REDEF
F$DCB.FCD#
      4854**DCL      4975>>IF       5289>>IF
F$DCB.FLDID
      4870**DCL      4870--REDEF
F$DCB.FORM$
      4864**DCL      4864--REDEF
F$DCB.FSECT
      4880**DCL      4880--REDEF
F$DCB.FSN#
      4857**DCL      4857--REDEF    4857--REDEF    4858--REDEF
F$DCB.HEADER$
      4863**DCL      4863--REDEF
F$DCB.IXTNSIZE#
      4861**DCL      4861--REDEF
F$DCB.LASTSTA$
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:455  
      4850**DCL      4850--REDEF
F$DCB.LVL
      4876**DCL      4876--REDEF
F$DCB.NAME#.C
      4851**DCL      4851--REDEF
F$DCB.NOEOF
      4873**DCL      4873--REDEF
F$DCB.NRECS#
      4862**DCL      4862--REDEF
F$DCB.NRECX
      4881**DCL      4881--REDEF
F$DCB.OHDR
      4873**DCL      4873--REDEF
F$DCB.ORG#
      4856**DCL      4856--REDEF
F$DCB.PRECNO
      4879**DCL      4879--REDEF
F$DCB.RCSZ
      4885**DCL      4885--REDEF
F$DCB.RES#
      4852**DCL      4852--REDEF
F$DCB.SETX
      4864**DCL      4864--REDEF
F$DCB.TAB$
      4864**DCL      4864--REDEF
F$DCB.TDA
      4878**DCL      4879--REDEF
F$DCB.TYPE#
      4852**DCL      4986>>ASSIGN
F$DCB.WSN#
      4852**DCL      4852--REDEF
FID_FAILED
      5208**LABEL    4955--GOTO
FILE_ACCT
      4396**DCL      4265--DCLINIT  4959--ASSIGN
FILE_CLOSE
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:456  
      4581**DCL      5290<>CALL
FILE_CLOSE.SN_
      4581**DCL      4581--REDEF
FILE_CLOSE.UTL_
      4582**DCL      4582--REDEF
FILE_CLOSE.V
      4586**DCL      4581--DCLINIT
FILE_CLOSE.V.DCB#
      4587**DCL      5285<<ASSIGN   5287<<ASSIGN   5289--IF
FILE_CLOSE.V.EXPIRE#
      4596**DCL      4596--REDEF
FILE_CLOSE.V.TYPE#
      4594**DCL      4594--REDEF
FILE_CLOSE.V.XTNSIZE#
      4591**DCL      4591--REDEF    4593--REDEF
FILE_FID
      4264**DCL      4952<>CALL
FILE_FID.TEXTFID_
      4264**DCL      4950<<ASSIGN
FILE_FID.V
      4268**DCL      4264--DCLINIT
FILE_NAME
      4423**DCL      4265--DCLINIT  4960--ASSIGN
FILE_OPEN
      4341**DCL      4983<>CALL
FILE_OPEN.ACCT_
      4345**DCL      4959<<ASSIGN   4970<<ASSIGN
FILE_OPEN.ACSVEH_
      4343**DCL      4344--REDEF
FILE_OPEN.ALTKEYS_
      4349**DCL      4350--REDEF    4350--REDEF
FILE_OPEN.HDR_
      4348**DCL      4349--REDEF
FILE_OPEN.NAME_
      4342**DCL      4960<<ASSIGN   4971<<ASSIGN
FILE_OPEN.PASS_
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:457  
      4343**DCL      4961<<ASSIGN   4972<<ASSIGN
FILE_OPEN.SN_
      4341**DCL      4962<<ASSIGN   4973<<ASSIGN
FILE_OPEN.TAB_
      4347**DCL      4348--REDEF
FILE_OPEN.UHL_
      4341**DCL      4342--REDEF    4342--REDEF
FILE_OPEN.V
      4350**DCL      4341--DCLINIT
FILE_OPEN.V.ASN#
      4360**DCL      4267--DCLINIT  4967<<ASSIGN
FILE_OPEN.V.DCB#
      4350**DCL      4957<<ASSIGN   4966<<ASSIGN   4975--IF       4986--ASSIGN
FILE_OPEN.V.FSN#
      4381**DCL      4381--REDEF    4381--REDEF
FILE_OPEN.V.INITZ.SCRUB#
      4351**DCL      4958<<ASSIGN   4969<<ASSIGN
FILE_OPEN.V.RES#
      4365**DCL      4267--DCLINIT  4968<<ASSIGN
FILE_OPEN.WSN_
      4347**DCL      4347--REDEF    4963<<ASSIGN   4974<<ASSIGN
FILE_PASS
      4436**DCL      4266--DCLINIT  4961--ASSIGN
FILE_POSITION
      4507**DCL      5075<>CALL
FILE_POSITION.V
      4509**DCL      4507--DCLINIT
FILE_POSITION.V.DCB#
      4509**DCL      5071<<ASSIGN   5073<<ASSIGN   5074--IF
FILE_POSITION.V.N#
      4513**DCL      5067<<ASSIGN   5068>>IF
FILE_READ
      4535**DCL      5179<>CALL
FILE_READ.BUF_
      4537**DCL      5163<<ASSIGN
FILE_READ.STATION_
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:458  
      4538**DCL      4539--REDEF
FILE_READ.V
      4539**DCL      4535--DCLINIT
FILE_READ.V.DCB#
      4539**DCL      5151<<ASSIGN   5153<<ASSIGN
FILE_READ.V.DVBYTE.REREAD#
      4550**DCL      4550--REDEF
FILE_READ.V.INDX#
      4548**DCL      4548--REDEF
FILE_SN
      4449**DCL      4266--DCLINIT  4962--ASSIGN
FILE_WSN
      4462**DCL      4266--DCLINIT  4963--ASSIGN
M$EI
      4210**DCL      4957>>ASSIGN   5071>>ASSIGN   5151>>ASSIGN   5223>>ASSIGN   5285>>ASSIGN
M$FID
       118**DCL-ENT  4952--CALL
MXNB_CMD_REC
        42**DCL        39--PROC     5130--ENTRY    5134>>ASSIGN
NB_BUFFER
      4604**DCL      5134<<ASSIGN   5157>>CALL     5162>>ASSIGN
OALLOC_FAILED
      5222**LABEL    4991--CALLALT  5002--CALLALT  5157--CALLALT  5218--CALLALT
OFREE_FAILED
      5222**LABEL    5139--CALLALT  5145--CALLALT  5205--CALLALT  5279--CALLALT
OPEN_FAILED
      5208**LABEL    4983--CALLALT
PRECORD_FAILED
      5208**LABEL    5075--CALLALT
PREV_BUFFER$
      4606**DCL      5137<<ASSIGN
READ_FAILED_HARD
      5205**LABEL    5185--GOTO
SKIP_XSA$OPEN
      4985**LABEL    4980--GOTO
TOTAL_ARS
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:459  
      4605**DCL      5135<<ASSIGN   5195>>ASSIGN
VD$BUFFER
      4674**DCL      5145<>CALL     5205<>CALL     5279<>CALL
VD$BUFFER.BYTES
      4702**DCL      5163--ASSIGN
VD$BUFFER.LENGTH#
      4700**DCL      4702--IMP-SIZ  5145>>CALL     5162<<ASSIGN   5163>>ASSIGN   5195<<ASSIGN   5205>>CALL
      5279>>CALL
VD$BUFFER_HEADER
      4806**DCL      4991--CALL     4994--ASSIGN   5002--CALL     5005--ASSIGN   5157--CALL
VD$ERR.DCB#
      4757**DCL      5223<<ASSIGN   5225<<ASSIGN
VD$ERR.ERR
      4752**DCL      5220<<ASSIGN
VD$ERR.FLAGLEV#
      4757**DCL      5221<<ASSIGN
VD$IT_COMMAND
      4768**DCL      5139<>CALL
VDG$OALLOC
      4202**DCL-ENT  4991--CALL     5002--CALL     5157--CALL     5218--CALL
VDG$OFREE
      4203**DCL-ENT  5139--CALL     5145--CALL     5205--CALL     5279--CALL
VD_6E.CMD_STREAM$
      4242**DCL      4618--IMP-PTR  4949>>IF       4950>>ASSIGN   4950>>ASSIGN   4966>>ASSIGN   4986>>ASSIGN
      5067>>ASSIGN   5070>>IF       5073>>ASSIGN   5138>>IF       5139>>CALL     5141>>ASSIGN   5144>>IF
      5145>>CALL     5145>>CALL     5147>>ASSIGN   5150>>IF       5153>>ASSIGN   5161>>ASSIGN   5196>>IF
      5197>>ASSIGN   5207>>ASSIGN   5222>>IF       5225>>ASSIGN   5277>>IF       5277>>IF       5279>>CALL
      5279>>CALL     5281>>ASSIGN   5284>>IF       5287>>ASSIGN
VD_6E.STATS#
      4244**DCL      5199<<ASSIGN   5199>>ASSIGN
VD_BUFFER$
      4603**DCL      4674--IMP-PTR  4991<>CALL     4994>>ASSIGN   5002<>CALL     5005>>ASSIGN   5136<<ASSIGN
      5156>>DOWHILE  5157<>CALL     5161>>ASSIGN   5162>>ASSIGN   5163>>ASSIGN   5163>>ASSIGN   5195>>ASSIGN
      5205>>CALL     5205>>CALL
VD_ERR$
      4607**DCL      4715--IMP-PTR  5218<>CALL     5220>>ASSIGN   5221>>ASSIGN   5223>>ASSIGN   5225>>ASSIGN
PL6.E3A0      #004=VDI$PREAD_FILE File=VDI$PARSE.:VDA5TSI                        FRI 07/04/97 11:35 Page:460  
XSA$CLOSE
      4205**DCL-ENT  5290--CALL
XSA$OPEN
      4205**DCL-ENT  4983--CALL
XSA$PRECORD
      4205**DCL-ENT  5075--CALL
XSA$READ
      4205**DCL-ENT  5179--CALL
XSA_PARAM
      4473**DCL      4983<>CALL     5075<>CALL     5179<>CALL     5290<>CALL
XSA_PARAM.ARS#
      4477**DCL      5195>>ASSIGN
XSA_PARAM.BBUF_.BOUND
      4481**DCL      4996<<ASSIGN
XSA_PARAM.BBUF_.BUF$
      4482**DCL      4990>>IF       4994<<ASSIGN
XSA_PARAM.DVBYTE.VFC#
      4487**DCL      5197>>ASSIGN
XSA_PARAM.EOMCHAR#
      4489**DCL      4490--REDEF
XSA_PARAM.ERR
      4477**DCL      4954<<ASSIGN   5220>>ASSIGN
XSA_PARAM.ERR.CODE
      4478**DCL      5208>>IF       5298>>IF
XSA_PARAM.KBUF_.BOUND
      4479**DCL      5007<<ASSIGN
XSA_PARAM.KBUF_.BUF$
      4480**DCL      4999>>IF       5005<<ASSIGN
XSA_PARAM.ORG
      4488**DCL      4979<<ASSIGN   4988>>IF       4999>>IF       4999>>IF
XSA_PARAM.SIG1
      4483**DCL      4483--REDEF
XSA_PARAM.SIG2
      4483**DCL      4484--REDEF

PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:461  
     3546        1        /*T***********************************************************/
     3547        2        /*T*                                                         */
     3548        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3549        4        /*T*                                                         */
     3550        5        /*T***********************************************************/
     3551        6
     3552        7        /*D* NAME: VDI$PUSER_PARSE_RTN
     3553        8            PARAMETERS:
     3554        9                PARM - a PARSE$PARAM structure describing where
     3555       10                    X$PARSE is in the parse of the command line.
     3556       11            INPUT:
     3557       12                VD_RESERVED_TABLE$ - Array of pointers to lists of reserved
     3558       13                    words.  Each entry points to a list of words of a specific
     3559       14                    length.  The lists of words are simply CALIGNED characters,
     3560       15                    all run together; since all the words in one list are of the
     3561       16                    same length, we know where the word breaks are in the
     3562       17                    list.  The end of a list is marked by a single blank
     3563       18                    character.
     3564       19                VD_6E.EQUALS$, .LOCATIONS$, .SYNONYMS$, .KEYINS$, and
     3565       20                    .STRUCTURES$ - Pointers to open VD$STREAMs for these files.
     3566       21                VD_6E.WS.INTERNAL_DIR$ - Ptr to chain of VD$DIR_NODEs for
     3567       22                    the predefined files (Equals, Windows, etc).
     3568       23            OUTPUT:
     3569       24                PARM will be modified:  .REJECT or .ACCEPT will be set to
     3570       25                    %TRUE.
     3571       26            DESCRIPTION:
     3572       27                When X$PARSE parses a node declared with the SUCC, FAIL, or
     3573       28                    PRE options, it will call VDI$PUSER_PARSE_RTN to do any
     3574       29                    parse-twiddling necessary.
     3575       30                All SUCC nodes in the syntax are OUT$SYM nodes containing
     3576       31                    names, which must be verified in various ways.
     3577       32                    Lower-case characters in the name are converted to upper-
     3578       33                    case before looking up the name anywhere.
     3579       34                What this routine does depends on the node which X$PARSE
     3580       35                just parsed:
     3581       36
     3582       37                o T_DEF_NAME - This parse node appears when the user is
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:462  
     3583       38                        assigning a value to a name with the EQUALS, LOCATION,
     3584       39                        or SYNONYM command (for SYNONYM, only if the name
     3585       40                        isn't a special-character name).
     3586       41                    Guarantee that the name doesn't start with a digit.
     3587       42                    Guarantee that the name isn't actually a reserved word.
     3588       43                        All legal abbreviations of reserved words must have
     3589       44                        separate entries in the VD_RESERVED_TABLE$ table.
     3590       45                        Also, check the name against the level-names in the
     3591       46                        Structures file; these look and act like reserved
     3592       47                        words, but aren't in VD_RESERVED_TABLE$ and don't
     3593       48                        have separate entries for their abbreviations.
     3594       49
     3595       50                o T_LO_NAME - This parse node appears when the user has
     3596       51                        refered to a name in a block expression, and we want
     3597       52                        to see if it's a valid LOCATION-name.
     3598       53                    Guarantee that the name exists in the Locations-file.
     3599       54
     3600       55                o T_LEVEL_NAME - This parse node appears when the user has
     3601       56                        refered to a name in a block expression, and we want
     3602       57                        to see if it's a valid level name.
     3603       58        *N*         If we aren't already beyond level 1 of a structure:
     3604       59                    Search the Structures file, looking for the name
     3605       60                        as the level-1 key of some structure.
     3606       61        *N*         If we are already beyond level 1 of a structure in this
     3607       62        *N*             block expression, make sure that the name is the
     3608       63        *N*             next level key of the structure.
     3609       64                    When checking the name against a Structures-file key, also
     3610       65                        check to see if the name is an abbreviation of the
     3611       66                        Structures-file key.  This makes level-names look
     3612       67                        and act like reserved words.
     3613       68
     3614       69                o T_PREDEF_FILE_NAME - This node appears when the user has
     3615       70                        referred to a name, and we want to see if it's the
     3616       71                        name of a predefined file--or internal directory!
     3617       72                    Loop thru each of the internal directories, looking
     3618       73                        for a match of the name with both the directory name and
     3619       74                        the names of the files in the directory.  Note that the
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:463  
     3620       75                        names in the directories and files are stored internally
     3621       76                        with leading caps (mixed upper- and lower-case), so they
     3622       77                        must be converted to upper-case before comparison, too.
     3623       78                    When checking the name against an internal file or directory name,
     3624       79                        also check to see if the name is an abbreviation of the
     3625       80                        file/directory name.  This makes PREDEF_FILE_NAMEs look
     3626       81                        and act like reserved words.
     3627       82
     3628       83
     3629       84                The topography of the Structures file is confusing, so
     3630       85                here's a drawing to (hopefully) clear things up:
     3631       86
     3632       87                              STRUCTURES$L0           : Level 0 file-node of
     3633       88                                   |                  :   Structures file
     3634       89                         --------------------------. . .
     3635       90                         |                      |
     3636       91                        $L1                    $L1    : Def of diff Structures
     3637       92                         |                      |
     3638       93                  ---------------          ----------
     3639       94                  |      |      |          |        |
     3640       95                 $L2    $L2    $L2        $L2      $L2    : Def of levels of
     3641       96                 for    for    for        for      for    :   each Structure
     3642       97                lev 0  lev 1  lev 2      lev 0    lev 1
     3643       98        */
     3644       99
     3645      100        VDI$PUSER_PARSE_RTN: PROC (PARM);
     3646      101
     3647      102
     3648      103        %INCLUDE VD_MACROS_M;
     3649     2318        %INCLUDE VD_PERR_C;
     3650     2466        %INCLUDE VD_NODES0_E;
     3651     2558        %INCLUDE XU_MACRO_C;
     3652     5652        %INCLUDE XU_SUBS_C;
     3653     5744        %INCLUDE B$TABLES_C;
     3654     5852
     3655     5853
     3656     5854        %PARSE$PARAM (NAME=PARM, STCLASS="");
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:464  
     3657     5935
     3658     5936
     3659     5937
     3660     5938    1   DCL VDA$LREAD       ENTRY (4) ALTRET;
     3661     5939    1   DCL VDG$ESCREECH    ENTRY (3);
     3662     5940
     3663     5941
     3664     5942        %VD_6E (STCLASS=SYMREF);
     3665     5978        %B$XL_UPPER;
     3666     5982    1   DCL VD_RESERVED_TABLE$ (0:%MXNB_RESERVED_WORD) PTR SYMREF;
     3667     5983    1   DCL VD_STATIC_TEMP CHAR(%MXNB_NAME) ALIGNED SYMREF;
     3668     5984    1   DCL VD_FKEY_NAMES_EQUALS UBIN SYMREF;
     3669     5985    1   DCL VD_RPAREN_POS SBIN STATIC SYMDEF INIT(0);
     3670     5986
     3671     5987    1   DCL START_CPOS UBIN STATIC;
     3672     5988    1   DCL START_HI_CHAR UBIN STATIC;
     3673     5989    1   DCL START_CODE UBIN STATIC;
     3674     5990
     3675     5991
     3676     5992
     3677     5993    1   DCL OUT_SYM$ PTR;
     3678     5994    1   DCL I UBIN;
     3679     5995        %VD_TEXTC_REMOTE (NAME=USER_WORD, STCLASS=AUTO, MXNB=%MXNB_NAME);
     3680     6058    1   DCL TABLE_WORD$ PTR;
     3681     6059    1   DCL TABLE_WORD_LN UBIN;
     3682     6060        %VD$LOCATION (NAME=LO_NAME_LOC, STCLASS=AUTO);
     3683     6088    1   DCL PORT_KEY$ PTR;
     3684     6089    1   DCL STRUCTURES_L0$ PTR;
     3685     6090    1   DCL STRUCTURES_L1$ PTR;
     3686     6091    1   DCL STRUCTURES_L2$ PTR;
     3687     6092    1   DCL LEVEL_KEY$ PTR;
     3688     6093    1   DCL DIR_NODE$ PTR;
     3689     6094    1   DCL FILE_NODE$ PTR;
     3690     6095    1   DCL FILE_KEY$ PTR;
     3691     6096    1   DCL FILE_KEY CHAR(%MXNB_NAME);
     3692     6097    1   DCL SINK UBIN;
     3693     6098
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:465  
     3694     6099
     3695     6100        %P_PCB (NAME=P$PCB, STCLASS="BASED(PARM.PCB$)");
     3696     6299    1   DCL UBYT(0:0) UBIN BYTE CALIGNED BASED;
     3697     6300        %PARSE$OUT (NAME=OUT$BLK, STCLASS="BASED(PARM.OUT$)");
     3698     6345        %PARSE$SYM (NAME=OUT$SYM, STCLASS="BASED(OUT_SYM$)");
     3699     6383    1   DCL TABLE$WORD CHAR(TABLE_WORD_LN) BASED(TABLE_WORD$) CALIGNED;
     3700     6384        %VD$STREAM (NAME=EQUALS$STREAM, STCLASS="BASED(VD_6E.EQUALS$)");
     3701     6490        %VD$STREAM (NAME=LOCATIONS$STREAM, STCLASS="BASED(VD_6E.LOCATIONS$)");
     3702     6596        %VD$STREAM (NAME=SYNONYMS$STREAM, STCLASS="BASED(VD_6E.SYNONYMS$)");
     3703     6702        %VD$STREAM (NAME=KEYINS$STREAM, STCLASS="BASED(VD_6E.KEYINS$)");
     3704     6808        %VD$STREAM (NAME=STRUCTURES$STREAM, STCLASS="BASED(VD_6E.STRUCTURES$)");
     3705     6914        %VD$TEXTC (NAME=PORT$KEY, STCLASS="BASED(PORT_KEY$)");
     3706     6937        %VD$FILE_NODE (NAME=STRUCTURES$L0, STCLASS="BASED(STRUCTURES_L0$)");
     3707     7030        %VD$FILE_NODE (NAME=STRUCTURES$L1, STCLASS="BASED(STRUCTURES_L1$)");
     3708     7123        %VD$FILE_NODE (NAME=STRUCTURES$L2, STCLASS="BASED(STRUCTURES_L2$)");
     3709     7216        %VD$TEXTC (NAME=LEVEL$KEY, STCLASS="BASED(LEVEL_KEY$)");
     3710     7239        %VD$DIR_NODE (NAME=DIR$NODE, STCLASS="BASED(DIR_NODE$)");
     3711     7277        %VD$FILE_NODE (NAME=FILE$NODE, STCLASS="BASED(FILE_NODE$)");
     3712     7370        %VD$FILE_KEY;
     3713     7419        %VD$TEXTC (NAME=FILE$KEY, STCLASS="BASED(FILE_KEY$)");
     3714     7442        %VD$PORT;
     3715     7540        %VD$TEXTC_REMOTE;
     3716     7601
     3717     7602    1           IF PARM.CODE < %VD_BASE# THEN RETURN;
     3718     7603    2           IF PARM.TYPE = %PRE# THEN DO;
     3719     7604
     3720     7605    2              START_CPOS = PARM.CHARPOS;
     3721     7606    2              START_HI_CHAR = P$PCB.HI_CHAR;
     3722     7607    3              IF PARM.CODE = %T_SPECIAL_NAME THEN DO;
     3723     7608                      /* Don't list builtin function names in the alternatives */
     3724     7609    3                 IF P$PCB.NXT AND START_CPOS = START_HI_CHAR THEN
     3725     7610    3                    PARM.REJECT = %TRUE;
     3726     7611    3                 END;
     3727     7612    2              ELSE IF PARM.CODE = %T_COMMAND_LINE
     3728     7613    2                   OR START_CODE ~= %T_SHOW_CMD THEN /* Lookup LO names for SHOW */
     3729     7614    2                    START_CODE = PARM.CODE;
     3730     7615    2              VD_RPAREN_POS = 0;
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:466  
     3731     7616    2              RETURN;
     3732     7617    2              END;
     3733     7618
     3734     7619        %BOX (TITLE="Re-examine successful parse of a DEF_NAME node");

              7631    2   /***************************************************************************
              7633    2    *                                                                         *
              7637    2            *               Re-examine successful parse of a DEF_NAME node            *
              7639    2            *                                                                         *
              7641    2           ***************************************************************************/

     3735     7645
     3736     7646    1           IF PARM.TYPE ~= %SUCC# THEN RETURN;
     3737     7647
     3738     7648    2           IF PARM.CODE = %T_INVOK_CMD THEN DO;
     3739     7649                /*
     3740     7650                *    Save the ) position in the parse string, in case there's a READ
     3741     7651                *    command on the command line.  Then when we save the text while
     3742     7652                *    doing the read command, we can blank out the ).  Otherwise,
     3743     7653                *    it won't parse properly next time.
     3744     7654                */
     3745     7655    2              VD_RPAREN_POS = START_CPOS;
     3746     7656    2              RETURN;
     3747     7657    2              END;
     3748     7658
     3749     7659    1           OUT_SYM$ = OUT$BLK.SUBLK$ (0);
     3750     7660
     3751     7661    2           IF PARM.CODE = %T_FUNKEY_EXP THEN DO;
     3752     7662    2              OUT$SYM.CODE =
     3753     7663    2                OUT_SYM$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0)->OUT$SYM.CODE+256;
     3754     7664    3              IF OUT$SYM.CODE < 514 THEN DO;
     3755     7665    3                 IF START_CODE ~= %T_KEYIN_NAME AND START_CODE ~= %T_EQUALS_CMD
     3756     7666    3                   OR OUT$BLK.CPOS > START_CPOS THEN OUT$SYM.CODE = 514;
     3757     7667    3                 GOTO ACCEPT_DEF_NAME;
     3758     7668    3                 END;
     3759     7669    2              DIR_NODE$ = OUT_SYM$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0)->
     3760     7670    2                OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0);
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:467  
     3761     7671    2              OUT$SYM.CODE = ADDR(DIR_NODE$->OUT$SYM.TEXT) -> UBYT(0);
     3762     7672    3              IF DIR_NODE$->OUT$SYM.CODE<256 THEN DO;
     3763     7673    3                 OUT$SYM.CODE = DIR_NODE$->OUT$SYM.CODE;
     3764     7674    3                 GOTO ACCEPT_DEF_NAME;
     3765     7675    3                 END;
     3766     7676    2              IF DIR_NODE$->OUT$SYM.CODE=267 THEN
     3767     7677    2                 GOTO ACCEPT_DEF_NAME;
     3768     7678    2              OUT$SYM.CODE = OUT$SYM.CODE - ASCBIN('0'); /* Cvt from hex */
     3769     7679    2              IF OUT$SYM.CODE > 9 THEN OUT$SYM.CODE = OUT$SYM.CODE-7;
     3770     7680    2              IF DIR_NODE$->OUT$SYM.COUNT = 1 THEN
     3771     7681    2                 GOTO ACCEPT_DEF_NAME;
     3772     7682    2              OUT$SYM.CODE = OUT$SYM.CODE*16 - ASCBIN('0') +
     3773     7683    2                ADDR(DIR_NODE$->OUT$SYM.TEXT) -> UBYT(1);
     3774     7684    2              IF ADDR(DIR_NODE$->OUT$SYM.TEXT) -> UBYT(1) > ASCBIN('9') THEN
     3775     7685    2                 OUT$SYM.CODE = OUT$SYM.CODE-7;
     3776     7686    2              GOTO ACCEPT_DEF_NAME;
     3777     7687    2              END;
     3778     7688
     3779     7689    1           IF OUT$SYM.CODE ~= 0 THEN /* Reject builtin function names here */
     3780     7690    1              GOTO REJECT_DEF_NAME;
     3781     7691
     3782     7692    1           USER_WORD.LENGTH# = OUT$SYM.COUNT;
     3783     7693    1           CALL XLATE (USER_WORD.BYTES, B$XL_UPPER, OUT$SYM.TEXT);
     3784     7694
     3785     7695    1           IF PARM.CODE = %T_PREDEF_FILE_NAME THEN
     3786     7696    1              GOTO PROCESS_PREDEF_FILE_NAME;
     3787     7697                /* Predef names are mostly reserved words anyway */
     3788     7698
     3789     7699    1           IF SUBSTR(OUT$SYM.TEXT, 0, 1) >= '0'
     3790     7700    1             AND SUBSTR(OUT$SYM.TEXT, 0, 1) <= '9' THEN
     3791     7701    1              GOTO REJECT_DEF_NAME;
     3792     7702
     3793     7703    1           TABLE_WORD_LN = USER_WORD.LENGTH#;
     3794     7704    1           IF TABLE_WORD_LN <= %MXNB_RESERVED_WORD THEN
     3795     7705    2   EACH_TABLE: DO;
     3796     7706    2              TABLE_WORD$ = VD_RESERVED_TABLE$ (TABLE_WORD_LN);
     3797     7707    2              IF TABLE_WORD$ = ADDR(NIL) THEN
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:468  
     3798     7708    2                 EXIT EACH_TABLE;
     3799     7709
     3800     7710    2   EACH_TABLE_WORD:
     3801     7711    3              DO UNTIL SUBSTR(TABLE$WORD, 0, 1) = %CHR_SPACE;
     3802     7712    3                 IF ADDR(USER_WORD.BYTES) -> TABLE$WORD = TABLE$WORD THEN
     3803     7713    3                    GOTO REJECT_DEF_NAME;
     3804     7714    3                 IF ADDR(USER_WORD.BYTES) -> TABLE$WORD < TABLE$WORD THEN
     3805     7715    3                    EXIT EACH_TABLE_WORD;
     3806     7716    3                 TABLE_WORD$ = PINCRC(TABLE_WORD$, TABLE_WORD_LN);
     3807     7717    3                 END EACH_TABLE_WORD;
     3808     7718    2              END EACH_TABLE;
     3809     7719
     3810     7720    1           IF PARM.CODE ~= %T_DEF_NAME THEN
     3811     7721    1              GOTO PROCESS_LO_NAME;
     3812     7722
     3813     7723                /*
     3814     7724                *   Now see if the name matches any level-names in the
     3815     7725                *       Structures file.
     3816     7726                */
     3817     7727
     3818     7728    1           STRUCTURES_L0$ = STRUCTURES$STREAM.PORT$ ->
     3819     7729    1             VD$PORT.LEVEL.INTERNAL$ (%LVL_FILE);
     3820     7730    1           STRUCTURES_L1$ = STRUCTURES$L0.HEAD$;
     3821     7731    1   EACH_STRUCTURE:
     3822     7732    2           DO WHILE STRUCTURES_L1$ ~= ADDR(NIL);
     3823     7733    2              STRUCTURES_L2$ = STRUCTURES$L1.HEAD$;
     3824     7734    2   EACH_LEVEL_OF_ONE_STRUCTURE:
     3825     7735    3              DO WHILE STRUCTURES_L2$ ~= ADDR(NIL);
     3826     7736                      %GETKEY (KEY=STRUCTURES$L2.DESC.KEY, PTR=LEVEL_KEY$);
     3827     7746    3                 IF LEVEL$KEY.BYTES =
     3828     7747    3                   SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH#) THEN
     3829     7748    3                    GOTO REJECT_DEF_NAME;
     3830     7749    3                 IF USER_WORD.LENGTH# = %NB_RESERVED_WORD_ABBREV
     3831     7750    3                   AND SUBSTR(LEVEL$KEY.BYTES, 0, USER_WORD.LENGTH#) =
     3832     7751    3                   SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH#) THEN
     3833     7752    3                    GOTO REJECT_DEF_NAME;
     3834     7753    3                 STRUCTURES_L2$ = STRUCTURES$L2.FLINK$;
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:469  
     3835     7754    3                 END EACH_LEVEL_OF_ONE_STRUCTURE;
     3836     7755    2              STRUCTURES_L1$ = STRUCTURES$L1.FLINK$;
     3837     7756    2              END EACH_STRUCTURE;
     3838     7757
     3839     7758    1   ACCEPT_DEF_NAME:
     3840     7759    1           RETURN;
     3841     7760
     3842     7761
     3843     7762                %BOX (TITLE="Re-examine successful parse of a LO_NAME node");

              7774    1   /***************************************************************************
              7776    1    *                                                                         *
              7780    1            *               Re-examine successful parse of a LO_NAME node             *
              7782    1            *                                                                         *
              7784    1           ***************************************************************************/

     3844     7788
     3845     7789    1   PROCESS_LO_NAME:
     3846     7790    1           IF PARM.CODE ~= %T_LO_NAME THEN
     3847     7791    1              GOTO PROCESS_LEVEL_NAME;
     3848     7792
     3849     7793    1           IF START_CODE = %T_LO_NAME THEN
     3850     7794    1              RETURN;
     3851     7795    1           LO_NAME_LOC = %CLEAR;
     3852     7796    1           LO_NAME_LOC.KEY.TYPE# (%(LVL_LOWER-1)) = %KT_STRING;
     3853     7797    1           LO_NAME_LOC.KEY.REP# (%(LVL_LOWER-1)) = %REP_REMOTE;
     3854     7798    1           LO_NAME_LOC.KEY.V$ (%(LVL_LOWER-1)) = ADDR(USER_WORD);
     3855     7799    1           USER_WORD.OBJECT = %CLEAR;
     3856     7800    1           USER_WORD.OBJECT.CLASS# = %CLS_TEXTC_REMOTE;
     3857     7801    1           CALL VDA$LREAD (LOCATIONS$STREAM, LO_NAME_LOC, 0, %TRUE)
     3858     7802    1             ALTRET (LREAD_FAILED);
     3859     7803
     3860     7804                %GETKEY (KEY=LOCATIONS$STREAM.PORT$->VD$PORT.CURRENT.KEY,
     3861     7805                INDX="%(LVL_LOWER-1)", PTR=PORT_KEY$);
     3862     7815    1           IF PORT$KEY.BYTES ~=
     3863     7816    2             SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH#) THEN DO;
     3864     7817    2              GOTO REJECT_LO_NAME;
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:470  
     3865     7818    2              END;
     3866     7819
     3867     7820    1           RETURN;
     3868     7821
     3869     7822
     3870     7823                %BOX (TITLE="Re-examine successful parse of a LEVEL_NAME node");

              7835    1   /***************************************************************************
              7837    1    *                                                                         *
              7841    1            *              Re-examine successful parse of a LEVEL_NAME node           *
              7843    1            *                                                                         *
              7845    1           ***************************************************************************/

     3871     7849
     3872     7850    1   PROCESS_LEVEL_NAME:
     3873     7851    1           IF PARM.CODE ~= %T_LEVEL_NAME THEN
     3874     7852    1              GOTO PROCESS_PREDEF_FILE_NAME;
     3875     7853
     3876     7854    1           STRUCTURES_L0$ = STRUCTURES$STREAM.PORT$ ->
     3877     7855    1             VD$PORT.LEVEL.INTERNAL$ (%LVL_FILE);
     3878     7856                /*STRUCTURES_L1$ = STRUCTURES$L0.HEAD$;*/
     3879     7857                /* For now, the only structure the user can ref is External */
     3880     7858    1           STRUCTURES_L1$ = VD_6E.STRUCTURE_EXTERNAL$;
     3881     7859
     3882     7860    1   FIND_STRUCTURE:
     3883     7861    2           DO WHILE STRUCTURES_L1$ ~= ADDR(NIL);
     3884     7862    2              STRUCTURES_L2$ = STRUCTURES$L1.HEAD$;
     3885     7863    2              IF STRUCTURES_L2$ ~= ADDR(NIL) THEN
     3886     7864    2                 STRUCTURES_L2$ = STRUCTURES$L2.FLINK$; /* Get to lev 1 */
     3887     7865    3              IF STRUCTURES_L2$ ~= ADDR(NIL) THEN DO;
     3888     7866                      %GETKEY (KEY=STRUCTURES$L2.DESC.KEY, PTR=LEVEL_KEY$);
     3889     7876    3                 IF LEVEL$KEY.BYTES =
     3890     7877    3                   SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH#) THEN
     3891     7878    3                    EXIT FIND_STRUCTURE;
     3892     7879    3                 IF SUBSTR(USER_WORD.BYTES, USER_WORD.LENGTH# -
     3893     7880    3                   %LENGTHC(CHR_PLURAL), %LENGTHC(CHR_PLURAL)) = %CHR_PLURAL
     3894     7881    3                   AND SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH# -
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:471  
     3895     7882    3                   %LENGTHC(CHR_PLURAL)) = LEVEL$KEY.BYTES THEN
     3896     7883    3                    EXIT FIND_STRUCTURE;
     3897     7884    3                 IF USER_WORD.LENGTH# = %NB_RESERVED_WORD_ABBREV
     3898     7885    3                   AND SUBSTR(LEVEL$KEY.BYTES, 0, USER_WORD.LENGTH#) =
     3899     7886    3                   SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH#) THEN
     3900     7887    3                    EXIT FIND_STRUCTURE;
     3901     7888    3                 END;
     3902     7889                   /*STRUCTURES_L1$ = STRUCTURES$L1.FLINK$;*/
     3903     7890                   /* For now, the only structure the user can ref is External */
     3904     7891    2              GOTO REJECT_LEVEL_NAME;
     3905     7892    2              END FIND_STRUCTURE;
     3906     7893
     3907     7894    1           IF STRUCTURES_L1$ = ADDR(NIL) THEN
     3908     7895    1              GOTO REJECT_LEVEL_NAME;
     3909     7896
     3910     7897
     3911     7898    1   ACCEPT_LEVEL_NAME:
     3912     7899    1           RETURN;
     3913     7900
     3914     7901
     3915     7902                %BOX (TITLE="Re-examine successful parse of a PREDEF_FILE_NAME node");

              7914    1   /***************************************************************************
              7916    1    *                                                                         *
              7920    1            *           Re-examine successful parse of a PREDEF_FILE_NAME node        *
              7922    1            *                                                                         *
              7924    1           ***************************************************************************/

     3916     7928
     3917     7929    1   PROCESS_PREDEF_FILE_NAME:
     3918     7930    1           IF PARM.CODE ~= %T_PREDEF_FILE_NAME THEN
     3919     7931    1              RETURN;
     3920     7932
     3921     7933    1           DIR_NODE$ = VD_6E.WS.INTERNAL_DIR$;
     3922     7934    1   EACH_DIR:
     3923     7935    2           DO WHILE DIR_NODE$ ~= ADDR(NIL);
     3924     7936    2              OUT$BLK.SCRITCH = POFFW(DIR_NODE$,EQUALS$STREAM.FILE_KEY.V$);
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:472  
     3925     7937    2              CALL XLATE (FILE_KEY, B$XL_UPPER, DIR$NODE.KEY);
     3926     7938    2              IF SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH#) = FILE_KEY THEN
     3927     7939    2                 GOTO ACCEPT_PREDEF_FILE_NAME;
     3928     7940    2              IF USER_WORD.LENGTH# = %NB_RESERVED_WORD_ABBREV
     3929     7941    2                AND SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH#) =
     3930     7942    2                SUBSTR(FILE_KEY, 0, USER_WORD.LENGTH#) THEN
     3931     7943    2                 GOTO ACCEPT_PREDEF_FILE_NAME;
     3932     7944
     3933     7945    2              FILE_NODE$ = DIR$NODE.HEAD$;
     3934     7946    2   EACH_FILE_IN_DIR:
     3935     7947    3              DO WHILE FILE_NODE$ ~= ADDR(NIL);
     3936     7948                      %GETKEY (KEY=FILE$NODE.DESC.KEY, PTR=FILE_KEY$);
     3937     7958    3                 OUT$BLK.SCRITCH =
     3938     7959    3                   POFFW(FILE$NODE.DESC.KEY.V$,EQUALS$STREAM.FILE_KEY.V$);
     3939     7960    3                 CALL XLATE (FILE_KEY, B$XL_UPPER, FILE$KEY.BYTES);
     3940     7961    3                 CALL INDEX1R (I, %CHR_UNDERSCORE, FILE_KEY, FILE$KEY.LENGTH#)
     3941     7962    4                 WHENALTRETURN DO;
     3942     7963    4                    CALL VDG$ESCREECH (FILE$KEY.LENGTH#);
     3943     7964    4                    END;
     3944     7965    3                 I = I + 1;
     3945     7966    3                 IF SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH#) =
     3946     7967    3                   SUBSTR(FILE_KEY, I, FILE$KEY.LENGTH# - I) THEN
     3947     7968    3                    GOTO ACCEPT_PREDEF_FILE_NAME;
     3948     7969    3                 IF USER_WORD.LENGTH# = %NB_RESERVED_WORD_ABBREV
     3949     7970    3                   AND SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH#) =
     3950     7971    3                   SUBSTR(FILE_KEY, I, USER_WORD.LENGTH#) THEN
     3951     7972    3                    GOTO ACCEPT_PREDEF_FILE_NAME;
     3952     7973    3                 FILE_NODE$ = FILE$NODE.FLINK$;
     3953     7974    3                 END EACH_FILE_IN_DIR;
     3954     7975    2              DIR_NODE$ = DIR$NODE.FLINK$;
     3955     7976    2              END EACH_DIR;
     3956     7977
     3957     7978
     3958     7979    1   REJECT_DEF_NAME:;
     3959     7980    1   REJECT_LEVEL_NAME:;
     3960     7981    1   REJECT_LO_NAME:;
     3961     7982    1   REJECT_PREDEF_FILE_NAME:
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:473  
     3962     7983    1           PARM.REJECT = %TRUE;
     3963     7984    1           IF PARM.TYPE = %PRE# THEN RETURN;
     3964     7985    1           PARM.CHARPOS = START_CPOS;
     3965     7986    1           P$PCB.HI_CHAR = START_HI_CHAR;
     3966     7987    1           RETURN;
     3967     7988
     3968     7989
     3969     7990    1   ACCEPT_PREDEF_FILE_NAME:
     3970     7991    1           RETURN;
     3971     7992
     3972     7993
     3973     7994                %BOX (TITLE="Error Handlers");

              8006    1   /***************************************************************************
              8008    1    *                                                                         *
              8012    1            *                               Error Handlers                            *
              8014    1            *                                                                         *
              8016    1           ***************************************************************************/

     3974     8020
     3975     8021    1   LREAD_FAILED:
     3976     8022    1           PARM.REJECT = %TRUE;
     3977     8023    1           RETURN;
     3978     8024
     3979     8025    1   END VDI$PUSER_PARSE_RTN;
     3980     8026        %EOD;

PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:474  
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   XU_SUBS_C.:LIBRARY  is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_NODES0_E.:VDA5TOU  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDI$PUSER_PARSE_RTN.

   Procedure VDI$PUSER_PARSE_RTN requires 498 words for executable code.
   Procedure VDI$PUSER_PARSE_RTN requires 48 words of local(AUTO) storage.

PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:475  

 Object Unit name= VDI$PUSER_PARSE_RTN                        File name= VDI$PARSE.:VDA5TOU
 UTS= JUL 04 '97 11:35:37.60 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none     4      4  VDI$PUSER_PARSE_RTN
    1   Proc  even  none   498    762  VDI$PUSER_PARSE_RTN
    2  RoData even  none     5      5  VDI$PUSER_PARSE_RTN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        1  VDI$PUSER_PARSE_RTN

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      0  VD_RPAREN_POS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
 yes     yes           Std       4 VDA$LREAD
         yes           Std       3 VDG$ESCREECH
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:476  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                            r    B$XL_UPPER$                           VD_RESERVED_TABLE$
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:477  


     3546        1        /*T***********************************************************/
     3547        2        /*T*                                                         */
     3548        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3549        4        /*T*                                                         */
     3550        5        /*T***********************************************************/
     3551        6
     3552        7        /*D* NAME: VDI$PUSER_PARSE_RTN
     3553        8            PARAMETERS:
     3554        9                PARM - a PARSE$PARAM structure describing where
     3555       10                    X$PARSE is in the parse of the command line.
     3556       11            INPUT:
     3557       12                VD_RESERVED_TABLE$ - Array of pointers to lists of reserved
     3558       13                    words.  Each entry points to a list of words of a specific
     3559       14                    length.  The lists of words are simply CALIGNED characters,
     3560       15                    all run together; since all the words in one list are of the
     3561       16                    same length, we know where the word breaks are in the
     3562       17                    list.  The end of a list is marked by a single blank
     3563       18                    character.
     3564       19                VD_6E.EQUALS$, .LOCATIONS$, .SYNONYMS$, .KEYINS$, and
     3565       20                    .STRUCTURES$ - Pointers to open VD$STREAMs for these files.
     3566       21                VD_6E.WS.INTERNAL_DIR$ - Ptr to chain of VD$DIR_NODEs for
     3567       22                    the predefined files (Equals, Windows, etc).
     3568       23            OUTPUT:
     3569       24                PARM will be modified:  .REJECT or .ACCEPT will be set to
     3570       25                    %TRUE.
     3571       26            DESCRIPTION:
     3572       27                When X$PARSE parses a node declared with the SUCC, FAIL, or
     3573       28                    PRE options, it will call VDI$PUSER_PARSE_RTN to do any
     3574       29                    parse-twiddling necessary.
     3575       30                All SUCC nodes in the syntax are OUT$SYM nodes containing
     3576       31                    names, which must be verified in various ways.
     3577       32                    Lower-case characters in the name are converted to upper-
     3578       33                    case before looking up the name anywhere.
     3579       34                What this routine does depends on the node which X$PARSE
     3580       35                just parsed:
     3581       36
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:478  
     3582       37                o T_DEF_NAME - This parse node appears when the user is
     3583       38                        assigning a value to a name with the EQUALS, LOCATION,
     3584       39                        or SYNONYM command (for SYNONYM, only if the name
     3585       40                        isn't a special-character name).
     3586       41                    Guarantee that the name doesn't start with a digit.
     3587       42                    Guarantee that the name isn't actually a reserved word.
     3588       43                        All legal abbreviations of reserved words must have
     3589       44                        separate entries in the VD_RESERVED_TABLE$ table.
     3590       45                        Also, check the name against the level-names in the
     3591       46                        Structures file; these look and act like reserved
     3592       47                        words, but aren't in VD_RESERVED_TABLE$ and don't
     3593       48                        have separate entries for their abbreviations.
     3594       49
     3595       50                o T_LO_NAME - This parse node appears when the user has
     3596       51                        refered to a name in a block expression, and we want
     3597       52                        to see if it's a valid LOCATION-name.
     3598       53                    Guarantee that the name exists in the Locations-file.
     3599       54
     3600       55                o T_LEVEL_NAME - This parse node appears when the user has
     3601       56                        refered to a name in a block expression, and we want
     3602       57                        to see if it's a valid level name.
     3603       58        *N*         If we aren't already beyond level 1 of a structure:
     3604       59                    Search the Structures file, looking for the name
     3605       60                        as the level-1 key of some structure.
     3606       61        *N*         If we are already beyond level 1 of a structure in this
     3607       62        *N*             block expression, make sure that the name is the
     3608       63        *N*             next level key of the structure.
     3609       64                    When checking the name against a Structures-file key, also
     3610       65                        check to see if the name is an abbreviation of the
     3611       66                        Structures-file key.  This makes level-names look
     3612       67                        and act like reserved words.
     3613       68
     3614       69                o T_PREDEF_FILE_NAME - This node appears when the user has
     3615       70                        referred to a name, and we want to see if it's the
     3616       71                        name of a predefined file--or internal directory!
     3617       72                    Loop thru each of the internal directories, looking
     3618       73                        for a match of the name with both the directory name and
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:479  
     3619       74                        the names of the files in the directory.  Note that the
     3620       75                        names in the directories and files are stored internally
     3621       76                        with leading caps (mixed upper- and lower-case), so they
     3622       77                        must be converted to upper-case before comparison, too.
     3623       78                    When checking the name against an internal file or directory name,
     3624       79                        also check to see if the name is an abbreviation of the
     3625       80                        file/directory name.  This makes PREDEF_FILE_NAMEs look
     3626       81                        and act like reserved words.
     3627       82
     3628       83
     3629       84                The topography of the Structures file is confusing, so
     3630       85                here's a drawing to (hopefully) clear things up:
     3631       86
     3632       87                              STRUCTURES$L0           : Level 0 file-node of
     3633       88                                   |                  :   Structures file
     3634       89                         --------------------------. . .
     3635       90                         |                      |
     3636       91                        $L1                    $L1    : Def of diff Structures
     3637       92                         |                      |
     3638       93                  ---------------          ----------
     3639       94                  |      |      |          |        |
     3640       95                 $L2    $L2    $L2        $L2      $L2    : Def of levels of
     3641       96                 for    for    for        for      for    :   each Structure
     3642       97                lev 0  lev 1  lev 2      lev 0    lev 1
     3643       98        */
     3644       99
     3645      100        VDI$PUSER_PARSE_RTN: PROC (PARM);

    100  1 000000   000000 700200 xent  VDI$PUSER_P* TSX0  ! X66_AUTO_1
         1 000001   000060 000001                    ZERO    48,1

     3646      101
     3647      102
     3648      103        %INCLUDE VD_MACROS_M;
     3649     2318        %INCLUDE VD_PERR_C;
     3650     2466        %INCLUDE VD_NODES0_E;
     3651     2558        %INCLUDE XU_MACRO_C;
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:480  
     3652     5652        %INCLUDE XU_SUBS_C;
     3653     5744        %INCLUDE B$TABLES_C;
     3654     5852
     3655     5853
     3656     5854        %PARSE$PARAM (NAME=PARM, STCLASS="");
     3657     5935
     3658     5936
     3659     5937
     3660     5938    1   DCL VDA$LREAD       ENTRY (4) ALTRET;
     3661     5939    1   DCL VDG$ESCREECH    ENTRY (3);
     3662     5940
     3663     5941
     3664     5942        %VD_6E (STCLASS=SYMREF);
     3665     5978        %B$XL_UPPER;
     3666     5982    1   DCL VD_RESERVED_TABLE$ (0:%MXNB_RESERVED_WORD) PTR SYMREF;
     3667     5983    1   DCL VD_STATIC_TEMP CHAR(%MXNB_NAME) ALIGNED SYMREF;
     3668     5984    1   DCL VD_FKEY_NAMES_EQUALS UBIN SYMREF;
     3669     5985    1   DCL VD_RPAREN_POS SBIN STATIC SYMDEF INIT(0);
     3670     5986
     3671     5987    1   DCL START_CPOS UBIN STATIC;
     3672     5988    1   DCL START_HI_CHAR UBIN STATIC;
     3673     5989    1   DCL START_CODE UBIN STATIC;
     3674     5990
     3675     5991
     3676     5992
     3677     5993    1   DCL OUT_SYM$ PTR;
     3678     5994    1   DCL I UBIN;
     3679     5995        %VD_TEXTC_REMOTE (NAME=USER_WORD, STCLASS=AUTO, MXNB=%MXNB_NAME);
     3680     6058    1   DCL TABLE_WORD$ PTR;
     3681     6059    1   DCL TABLE_WORD_LN UBIN;
     3682     6060        %VD$LOCATION (NAME=LO_NAME_LOC, STCLASS=AUTO);
     3683     6088    1   DCL PORT_KEY$ PTR;
     3684     6089    1   DCL STRUCTURES_L0$ PTR;
     3685     6090    1   DCL STRUCTURES_L1$ PTR;
     3686     6091    1   DCL STRUCTURES_L2$ PTR;
     3687     6092    1   DCL LEVEL_KEY$ PTR;
     3688     6093    1   DCL DIR_NODE$ PTR;
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:481  
     3689     6094    1   DCL FILE_NODE$ PTR;
     3690     6095    1   DCL FILE_KEY$ PTR;
     3691     6096    1   DCL FILE_KEY CHAR(%MXNB_NAME);
     3692     6097    1   DCL SINK UBIN;
     3693     6098
     3694     6099
     3695     6100        %P_PCB (NAME=P$PCB, STCLASS="BASED(PARM.PCB$)");
     3696     6299    1   DCL UBYT(0:0) UBIN BYTE CALIGNED BASED;
     3697     6300        %PARSE$OUT (NAME=OUT$BLK, STCLASS="BASED(PARM.OUT$)");
     3698     6345        %PARSE$SYM (NAME=OUT$SYM, STCLASS="BASED(OUT_SYM$)");
     3699     6383    1   DCL TABLE$WORD CHAR(TABLE_WORD_LN) BASED(TABLE_WORD$) CALIGNED;
     3700     6384        %VD$STREAM (NAME=EQUALS$STREAM, STCLASS="BASED(VD_6E.EQUALS$)");
     3701     6490        %VD$STREAM (NAME=LOCATIONS$STREAM, STCLASS="BASED(VD_6E.LOCATIONS$)");
     3702     6596        %VD$STREAM (NAME=SYNONYMS$STREAM, STCLASS="BASED(VD_6E.SYNONYMS$)");
     3703     6702        %VD$STREAM (NAME=KEYINS$STREAM, STCLASS="BASED(VD_6E.KEYINS$)");
     3704     6808        %VD$STREAM (NAME=STRUCTURES$STREAM, STCLASS="BASED(VD_6E.STRUCTURES$)");
     3705     6914        %VD$TEXTC (NAME=PORT$KEY, STCLASS="BASED(PORT_KEY$)");
     3706     6937        %VD$FILE_NODE (NAME=STRUCTURES$L0, STCLASS="BASED(STRUCTURES_L0$)");
     3707     7030        %VD$FILE_NODE (NAME=STRUCTURES$L1, STCLASS="BASED(STRUCTURES_L1$)");
     3708     7123        %VD$FILE_NODE (NAME=STRUCTURES$L2, STCLASS="BASED(STRUCTURES_L2$)");
     3709     7216        %VD$TEXTC (NAME=LEVEL$KEY, STCLASS="BASED(LEVEL_KEY$)");
     3710     7239        %VD$DIR_NODE (NAME=DIR$NODE, STCLASS="BASED(DIR_NODE$)");
     3711     7277        %VD$FILE_NODE (NAME=FILE$NODE, STCLASS="BASED(FILE_NODE$)");
     3712     7370        %VD$FILE_KEY;
     3713     7419        %VD$TEXTC (NAME=FILE$KEY, STCLASS="BASED(FILE_KEY$)");
     3714     7442        %VD$PORT;
     3715     7540        %VD$TEXTC_REMOTE;
     3716     7601
     3717     7602    1           IF PARM.CODE < %VD_BASE# THEN RETURN;

   7602  1 000002   200003 470500                    LDP0    @PARM,,AUTO
         1 000003   000000 720100                    LXL0    0,,PR0
         1 000004   001750 100003                    CMPX0   1000,DU
         1 000005   000007 603000 1                  TRC     s:7603

   7602  1 000006   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:482  
     3718     7603    2           IF PARM.TYPE = %PRE# THEN DO;

   7603  1 000007   000000 236100                    LDQ     0,,PR0
         1 000010   777000 376003                    ANQ     -512,DU
         1 000011   001000 116003                    CMPQ    512,DU
         1 000012   000045 601000 1                  TNZ     s:7646

     3719     7604
     3720     7605    2              START_CPOS = PARM.CHARPOS;

   7605  1 000013   000004 235100                    LDA     4,,PR0
         1 000014   000001 755000 0                  STA     START_CPOS

     3721     7606    2              START_HI_CHAR = P$PCB.HI_CHAR;

   7606  1 000015   000005 471500                    LDP1    5,,PR0
         1 000016   100012 235100                    LDA     10,,PR1
         1 000017   000002 755000 0                  STA     START_HI_CHAR

     3722     7607    3              IF PARM.CODE = %T_SPECIAL_NAME THEN DO;

   7607  1 000020   001767 100003                    CMPX0   1015,DU
         1 000021   000033 601000 1                  TNZ     s:7612

     3723     7608                      /* Don't list builtin function names in the alternatives */
     3724     7609    3                 IF P$PCB.NXT AND START_CPOS = START_HI_CHAR THEN

   7609  1 000022   100005 236100                    LDQ     5,,PR1
         1 000023   040000 316007                    CANQ    16384,DL
         1 000024   000043 600000 1                  TZE     s:7615
         1 000025   000001 236000 0                  LDQ     START_CPOS
         1 000026   000002 116000 0                  CMPQ    START_HI_CHAR
         1 000027   000043 601000 1                  TNZ     s:7615

     3725     7610    3                    PARM.REJECT = %TRUE;

   7610  1 000030   000200 236003                    LDQ     128,DU
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:483  
         1 000031   000000 256100                    ORSQ    0,,PR0

     3726     7611    3                 END;

   7611  1 000032   000043 710000 1                  TRA     s:7615

     3727     7612    2              ELSE IF PARM.CODE = %T_COMMAND_LINE

   7612  1 000033   001751 100003                    CMPX0   1001,DU
         1 000034   000040 600000 1                  TZE     s:7614
         1 000035   000003 235000 0                  LDA     START_CODE
         1 000036   002002 115007                    CMPA    1026,DL
         1 000037   000043 600000 1                  TZE     s:7615

     3728     7613    2                   OR START_CODE ~= %T_SHOW_CMD THEN /* Lookup LO names for SHOW */
     3729     7614    2                    START_CODE = PARM.CODE;

   7614  1 000040   000000 236100                    LDQ     0,,PR0
         1 000041   777777 376007                    ANQ     -1,DL
         1 000042   000003 756000 0                  STQ     START_CODE

     3730     7615    2              VD_RPAREN_POS = 0;

   7615  1 000043   000000 450000 0                  STZ     VD_RPAREN_POS

     3731     7616    2              RETURN;

   7616  1 000044   000000 702200 xent               TSX2  ! X66_ARET

     3732     7617    2              END;
     3733     7618
     3734     7619        %BOX (TITLE="Re-examine successful parse of a DEF_NAME node");

              7631    2   /***************************************************************************
              7633    2    *                                                                         *
              7637    2            *               Re-examine successful parse of a DEF_NAME node           *
              7639    2            *                                                                        *
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:484  
              7641    2          ***************************************************************************/

     3735     7645
     3736     7646    1           IF PARM.TYPE ~= %SUCC# THEN RETURN;

   7646  1 000045   002000 116003                    CMPQ    1024,DU
         1 000046   000050 600000 1                  TZE     s:7648

   7646  1 000047   000000 702200 xent               TSX2  ! X66_ARET

     3737     7647
     3738     7648    2           IF PARM.CODE = %T_INVOK_CMD THEN DO;

   7648  1 000050   002071 100003                    CMPX0   1081,DU
         1 000051   000055 601000 1                  TNZ     s:7659

     3739     7649                /*
     3740     7650                *    Save the ) position in the parse string, in case there's a READ
     3741     7651                *    command on the command line.  Then when we save the text while
     3742     7652                *    doing the read command, we can blank out the ).  Otherwise,
     3743     7653                *    it won't parse properly next time.
     3744     7654                */
     3745     7655    2              VD_RPAREN_POS = START_CPOS;

   7655  1 000052   000001 235000 0                  LDA     START_CPOS
         1 000053   000000 755000 0                  STA     VD_RPAREN_POS

     3746     7656    2              RETURN;

   7656  1 000054   000000 702200 xent               TSX2  ! X66_ARET

     3747     7657    2              END;
     3748     7658
     3749     7659    1           OUT_SYM$ = OUT$BLK.SUBLK$ (0);

   7659  1 000055   000002 471500                    LDP1    2,,PR0
         1 000056   100003 236100                    LDQ     3,,PR1
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:485  
         1 000057   200004 756100                    STQ     OUT_SYM$,,AUTO

     3750     7660
     3751     7661    2           IF PARM.CODE = %T_FUNKEY_EXP THEN DO;

   7661  1 000060   002072 100003                    CMPX0   1082,DU
         1 000061   000160 601000 1                  TNZ     s:7689

     3752     7662    2              OUT$SYM.CODE =

   7662  1 000062   200004 473500                    LDP3    OUT_SYM$,,AUTO
         1 000063   300003 474500                    LDP4    3,,PR3
         1 000064   400003 475500                    LDP5    3,,PR4
         1 000065   500000 721100                    LXL1    0,,PR5
         1 000066   000400 622011                    EAX2    256,X1
         1 000067   300000 442100                    SXL2    0,,PR3

     3753     7663    2                OUT_SYM$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0)->OUT$SYM.CODE+256;
     3754     7664    3              IF OUT$SYM.CODE < 514 THEN DO;

   7664  1 000070   001002 102003                    CMPX2   514,DU
         1 000071   000106 603000 1                  TRC     s:7669

     3755     7665    3                 IF START_CODE ~= %T_KEYIN_NAME AND START_CODE ~= %T_EQUALS_CMD

   7665  1 000072   000003 235000 0                  LDA     START_CODE
         1 000073   001773 115007                    CMPA    1019,DL
         1 000074   000077 600000 1                  TZE     s:7665+5
         1 000075   001764 115007                    CMPA    1012,DL
         1 000076   000103 601000 1                  TNZ     s:7666
         1 000077   000002 471500                    LDP1    2,,PR0
         1 000100   000001 236000 0                  LDQ     START_CPOS
         1 000101   100002 116100                    CMPQ    2,,PR1
         1 000102   000105 603000 1                  TRC     s:7667

     3756     7666    3                   OR OUT$BLK.CPOS > START_CPOS THEN OUT$SYM.CODE = 514;

PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:486  
   7666  1 000103   001002 220003                    LDX0    514,DU
         1 000104   300000 440100                    SXL0    0,,PR3

     3757     7667    3                 GOTO ACCEPT_DEF_NAME;

   7667  1 000105   000343 710000 1                  TRA     ACCEPT_DEF_NAME

     3758     7668    3                 END;
     3759     7669    2              DIR_NODE$ = OUT_SYM$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0)->

   7669  1 000106   400003 471500                    LDP1    3,,PR4
         1 000107   100003 475500                    LDP5    3,,PR1
         1 000110   500003 236100                    LDQ     3,,PR5
         1 000111   200040 756100                    STQ     DIR_NODE$,,AUTO

     3760     7670    2                OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0);
     3761     7671    2              OUT$SYM.CODE = ADDR(DIR_NODE$->OUT$SYM.TEXT) -> UBYT(0);

   7671  1 000112   200040 476500                    LDP6    DIR_NODE$,,AUTO
         1 000113   600004 220100                    LDX0    4,,PR6
         1 000114   000777 360003                    ANX0    511,DU
         1 000115   300000 440100                    SXL0    0,,PR3

     3762     7672    3              IF DIR_NODE$->OUT$SYM.CODE<256 THEN DO;

   7672  1 000116   600000 721100                    LXL1    0,,PR6
         1 000117   000400 101003                    CMPX1   256,DU
         1 000120   000123 603000 1                  TRC     s:7676

     3763     7673    3                 OUT$SYM.CODE = DIR_NODE$->OUT$SYM.CODE;

   7673  1 000121   300000 441100                    SXL1    0,,PR3

     3764     7674    3                 GOTO ACCEPT_DEF_NAME;

   7674  1 000122   000343 710000 1                  TRA     ACCEPT_DEF_NAME

PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:487  
     3765     7675    3                 END;
     3766     7676    2              IF DIR_NODE$->OUT$SYM.CODE=267 THEN

   7676  1 000123   000413 101003                    CMPX1   267,DU
         1 000124   000343 600000 1                  TZE     ACCEPT_DEF_NAME

     3767     7677    2                 GOTO ACCEPT_DEF_NAME;
     3768     7678    2              OUT$SYM.CODE = OUT$SYM.CODE - ASCBIN('0'); /* Cvt from hex */

   7678  1 000125   777720 622010                    EAX2    -48,X0
         1 000126   300000 442100                    SXL2    0,,PR3

     3769     7679    2              IF OUT$SYM.CODE > 9 THEN OUT$SYM.CODE = OUT$SYM.CODE-7;

   7679  1 000127   000012 102003                    CMPX2   10,DU
         1 000130   000133 602000 1                  TNC     s:7680

   7679  1 000131   777771 620012                    EAX0    -7,X2
         1 000132   300000 440100                    SXL0    0,,PR3

     3770     7680    2              IF DIR_NODE$->OUT$SYM.COUNT = 1 THEN

   7680  1 000133   600004 236100                    LDQ     4,,PR6
         1 000134   777000 376003                    ANQ     -512,DU
         1 000135   001000 116003                    CMPQ    512,DU
         1 000136   000343 600000 1                  TZE     ACCEPT_DEF_NAME

     3771     7681    2                 GOTO ACCEPT_DEF_NAME;
     3772     7682    2              OUT$SYM.CODE = OUT$SYM.CODE*16 - ASCBIN('0') +

   7682  1 000137   600004 236100                    LDQ     4,,PR6
         1 000140   000011 772000                    QRL     9
         1 000141   000777 376007                    ANQ     511,DL
         1 000142   200054 756100                    STQ     FILE_KEY+9,,AUTO
         1 000143   300000 236100                    LDQ     0,,PR3
         1 000144   000004 736000                    QLS     4
         1 000145   000000 376000 2                  ANQ     0
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:488  
         1 000146   200054 036100                    ADLQ    FILE_KEY+9,,AUTO
         1 000147   777720 620006                    EAX0    -48,QL
         1 000150   300000 440100                    SXL0    0,,PR3

     3773     7683    2                ADDR(DIR_NODE$->OUT$SYM.TEXT) -> UBYT(1);
     3774     7684    2              IF ADDR(DIR_NODE$->OUT$SYM.TEXT) -> UBYT(1) > ASCBIN('9') THEN

   7684  1 000151   600004 236100                    LDQ     4,,PR6
         1 000152   777000 376007                    ANQ     -512,DL
         1 000153   072000 116007                    CMPQ    29696,DL
         1 000154   000157 602000 1                  TNC     s:7686

     3775     7685    2                 OUT$SYM.CODE = OUT$SYM.CODE-7;

   7685  1 000155   777771 621010                    EAX1    -7,X0
         1 000156   300000 441100                    SXL1    0,,PR3

     3776     7686    2              GOTO ACCEPT_DEF_NAME;

   7686  1 000157   000343 710000 1                  TRA     ACCEPT_DEF_NAME

     3777     7687    2              END;
     3778     7688
     3779     7689    1           IF OUT$SYM.CODE ~= 0 THEN /* Reject builtin function names here */

   7689  1 000160   200004 473500                    LDP3    OUT_SYM$,,AUTO
         1 000161   300000 721100                    LXL1    0,,PR3
         1 000162   000737 601000 1                  TNZ     REJECT_DEF_NAME

     3780     7690    1              GOTO REJECT_DEF_NAME;
     3781     7691
     3782     7692    1           USER_WORD.LENGTH# = OUT$SYM.COUNT;

   7692  1 000163   300004 236100                    LDQ     4,,PR3
         1 000164   200010 552140                    STBQ    USER_WORD+2,'40'O,AUTO

     3783     7693    1           CALL XLATE (USER_WORD.BYTES, B$XL_UPPER, OUT$SYM.TEXT);
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:489  

   7693  1 000165   300004 236100                    LDQ     4,,PR3
         1 000166   000033 772000                    QRL     27
         1 000167   000000 620006                    EAX0    0,QL
         1 000170   000000 471400 xsym               LDP1    B$XL_UPPER$
         1 000171   040100 160540                    MVT     fill='040'O
         1 000172   300004 200010                    ADSC9   4,,PR3                   cn=1,n=*X0
         1 000173   200010 200037                    ADSC9   USER_WORD+2,,AUTO        cn=1,n=31
         1 000174   100000 000100                    ARG     0,,PR1

     3784     7694
     3785     7695    1           IF PARM.CODE = %T_PREDEF_FILE_NAME THEN

   7695  1 000175   000000 720100                    LXL0    0,,PR0
         1 000176   002000 100003                    CMPX0   1024,DU
         1 000177   000536 600000 1                  TZE     PROCESS_PREDEF_FILE_NAME

     3786     7696    1              GOTO PROCESS_PREDEF_FILE_NAME;
     3787     7697                /* Predef names are mostly reserved words anyway */
     3788     7698
     3789     7699    1           IF SUBSTR(OUT$SYM.TEXT, 0, 1) >= '0'

   7699  1 000200   300004 236100                    LDQ     4,,PR3
         1 000201   000033 772000                    QRL     27
         1 000202   300004 236100                    LDQ     4,,PR3
         1 000203   000777 376003                    ANQ     511,DU
         1 000204   000060 116003                    CMPQ    48,DU
         1 000205   000215 602000 1                  TNC     s:7703
         1 000206   300004 236100                    LDQ     4,,PR3
         1 000207   000033 772000                    QRL     27
         1 000210   300004 236100                    LDQ     4,,PR3
         1 000211   000777 376003                    ANQ     511,DU
         1 000212   000071 116003                    CMPQ    57,DU
         1 000213   000737 602000 1                  TNC     REJECT_DEF_NAME
         1 000214   000737 600000 1                  TZE     REJECT_DEF_NAME

     3790     7700    1             AND SUBSTR(OUT$SYM.TEXT, 0, 1) <= '9' THEN
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:490  
     3791     7701    1              GOTO REJECT_DEF_NAME;
     3792     7702
     3793     7703    1           TABLE_WORD_LN = USER_WORD.LENGTH#;

   7703  1 000215   200010 236100                    LDQ     USER_WORD+2,,AUTO
         1 000216   000033 772000                    QRL     27
         1 000217   200021 756100                    STQ     TABLE_WORD_LN,,AUTO

     3794     7704    1           IF TABLE_WORD_LN <= %MXNB_RESERVED_WORD THEN

   7704  1 000220   000020 116007                    CMPQ    16,DL
         1 000221   000246 603000 1                  TRC     s:7720

     3795     7705    2   EACH_TABLE: DO;

   7705  1 000222                       EACH_TABLE   null
     3796     7706    2              TABLE_WORD$ = VD_RESERVED_TABLE$ (TABLE_WORD_LN);

   7706  1 000222   000000 236006 xsym               LDQ     VD_RESERVED_TABLE$,QL
         1 000223   200020 756100                    STQ     TABLE_WORD$,,AUTO

     3797     7707    2              IF TABLE_WORD$ = ADDR(NIL) THEN

   7707  1 000224   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000225   000246 600000 1                  TZE     s:7720

     3798     7708    2                 EXIT EACH_TABLE;
     3799     7709
     3800     7710    2   EACH_TABLE_WORD:
     3801     7711    3              DO UNTIL SUBSTR(TABLE$WORD, 0, 1) = %CHR_SPACE;

   7711  1 000226                       EACH_TABLE_* null
     3802     7712    3                 IF ADDR(USER_WORD.BYTES) -> TABLE$WORD = TABLE$WORD THEN

   7712  1 000226   200021 720100                    LXL0    TABLE_WORD_LN,,AUTO
         1 000227   200020 470500                    LDP0    TABLE_WORD$,,AUTO
         1 000230   040140 106540                    CMPC    fill='040'O
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:491  
         1 000231   200010 200010                    ADSC9   USER_WORD+2,,AUTO        cn=1,n=*X0
         1 000232   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         1 000233   000737 600000 1                  TZE     REJECT_DEF_NAME

     3803     7713    3                    GOTO REJECT_DEF_NAME;
     3804     7714    3                 IF ADDR(USER_WORD.BYTES) -> TABLE$WORD < TABLE$WORD THEN

   7714  1 000234   000246 602000 1                  TNC     s:7720

     3805     7715    3                    EXIT EACH_TABLE_WORD;
     3806     7716    3                 TABLE_WORD$ = PINCRC(TABLE_WORD$, TABLE_WORD_LN);

   7716  1 000235   200021 236100                    LDQ     TABLE_WORD_LN,,AUTO
         1 000236   000020 736000                    QLS     16
         1 000237   200020 036100                    ADLQ    TABLE_WORD$,,AUTO
         1 000240   200020 756100                    STQ     TABLE_WORD$,,AUTO

     3807     7717    3                 END EACH_TABLE_WORD;

   7717  1 000241   200020 470500                    LDP0    TABLE_WORD$,,AUTO
         1 000242   040000 106500                    CMPC    fill='040'O
         1 000243   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         1 000244   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         1 000245   000226 601000 1                  TNZ     EACH_TABLE_WORD

     3808     7718    2              END EACH_TABLE;

     3809     7719
     3810     7720    1           IF PARM.CODE ~= %T_DEF_NAME THEN

   7720  1 000246   200003 470500                    LDP0    @PARM,,AUTO
         1 000247   000000 720100                    LXL0    0,,PR0
         1 000250   002060 100003                    CMPX0   1072,DU
         1 000251   000344 601000 1                  TNZ     PROCESS_LO_NAME

     3811     7721    1              GOTO PROCESS_LO_NAME;
     3812     7722
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:492  
     3813     7723                /*
     3814     7724                *   Now see if the name matches any level-names in the
     3815     7725                *       Structures file.
     3816     7726                */
     3817     7727
     3818     7728    1           STRUCTURES_L0$ = STRUCTURES$STREAM.PORT$ ->

   7728  1 000252   000005 471400 xsym               LDP1    VD_6E+5
         1 000253   100001 473500                    LDP3    1,,PR1
         1 000254   300031 236100                    LDQ     25,,PR3
         1 000255   200034 756100                    STQ     STRUCTURES_L0$,,AUTO

     3819     7729    1             VD$PORT.LEVEL.INTERNAL$ (%LVL_FILE);
     3820     7730    1           STRUCTURES_L1$ = STRUCTURES$L0.HEAD$;

   7730  1 000256   200034 474500                    LDP4    STRUCTURES_L0$,,AUTO
         1 000257   400012 236100                    LDQ     10,,PR4
         1 000260   200035 756100                    STQ     STRUCTURES_L1$,,AUTO

     3821     7731    1   EACH_STRUCTURE:
     3822     7732    2           DO WHILE STRUCTURES_L1$ ~= ADDR(NIL);

   7732  1 000261   000341 710000 1     EACH_STRUCT* TRA     s:7756

     3823     7733    2              STRUCTURES_L2$ = STRUCTURES$L1.HEAD$;

   7733  1 000262   200035 470500                    LDP0    STRUCTURES_L1$,,AUTO
         1 000263   000012 236100                    LDQ     10,,PR0
         1 000264   200036 756100                    STQ     STRUCTURES_L2$,,AUTO

     3824     7734    2   EACH_LEVEL_OF_ONE_STRUCTURE:
     3825     7735    3              DO WHILE STRUCTURES_L2$ ~= ADDR(NIL);

   7735  1 000265   000334 710000 1     EACH_LEVEL_* TRA     s:7754

     3826     7736                      %GETKEY (KEY=STRUCTURES$L2.DESC.KEY, PTR=LEVEL_KEY$);

PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:493  
   7743  1 000266   200036 470500                    LDP0    STRUCTURES_L2$,,AUTO
         1 000267   000004 720100                    LXL0    4,,PR0
         1 000270   000002 100003                    CMPX0   2,DU
         1 000271   000276 601000 1                  TNZ     s:7743+8

   7743  1 000272   000005 471500                    LDP1    5,,PR0
         1 000273   100002 633500                    EPPR3   2,,PR1
         1 000274   200037 453500                    STP3    LEVEL_KEY$,,AUTO
         1 000275   000301 710000 1                  TRA     s:7746

   7743  1 000276   200036 236100                    LDQ     STRUCTURES_L2$,,AUTO
         1 000277   000005 036003                    ADLQ    5,DU
         1 000300   200037 756100                    STQ     LEVEL_KEY$,,AUTO

     3827     7746    3                 IF LEVEL$KEY.BYTES =

   7746  1 000301   200037 471500                    LDP1    LEVEL_KEY$,,AUTO
         1 000302   100000 236100                    LDQ     0,,PR1
         1 000303   000033 772000                    QRL     27
         1 000304   000000 621006                    EAX1    0,QL
         1 000305   200010 236100                    LDQ     USER_WORD+2,,AUTO
         1 000306   000033 772000                    QRL     27
         1 000307   000000 622006                    EAX2    0,QL
         1 000310   040140 106540                    CMPC    fill='040'O
         1 000311   100000 200011                    ADSC9   0,,PR1                   cn=1,n=*X1
         1 000312   200010 200012                    ADSC9   USER_WORD+2,,AUTO        cn=1,n=*X2
         1 000313   000737 600000 1                  TZE     REJECT_DEF_NAME

     3828     7747    3                   SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH#) THEN
     3829     7748    3                    GOTO REJECT_DEF_NAME;
     3830     7749    3                 IF USER_WORD.LENGTH# = %NB_RESERVED_WORD_ABBREV

   7749  1 000314   200010 236100                    LDQ     USER_WORD+2,,AUTO
         1 000315   777000 376003                    ANQ     -512,DU
         1 000316   002000 116003                    CMPQ    1024,DU
         1 000317   000332 601000 1                  TNZ     s:7753
         1 000320   200010 236100                    LDQ     USER_WORD+2,,AUTO
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:494  
         1 000321   000033 772000                    QRL     27
         1 000322   000000 622006                    EAX2    0,QL
         1 000323   200010 236100                    LDQ     USER_WORD+2,,AUTO
         1 000324   000033 772000                    QRL     27
         1 000325   000000 623006                    EAX3    0,QL
         1 000326   040140 106540                    CMPC    fill='040'O
         1 000327   100000 200012                    ADSC9   0,,PR1                   cn=1,n=*X2
         1 000330   200010 200013                    ADSC9   USER_WORD+2,,AUTO        cn=1,n=*X3
         1 000331   000737 600000 1                  TZE     REJECT_DEF_NAME

     3831     7750    3                   AND SUBSTR(LEVEL$KEY.BYTES, 0, USER_WORD.LENGTH#) =
     3832     7751    3                   SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH#) THEN
     3833     7752    3                    GOTO REJECT_DEF_NAME;
     3834     7753    3                 STRUCTURES_L2$ = STRUCTURES$L2.FLINK$;

   7753  1 000332   000002 236100                    LDQ     2,,PR0
         1 000333   200036 756100                    STQ     STRUCTURES_L2$,,AUTO

     3835     7754    3                 END EACH_LEVEL_OF_ONE_STRUCTURE;

   7754  1 000334   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000335   000266 601000 1                  TNZ     s:7743

     3836     7755    2              STRUCTURES_L1$ = STRUCTURES$L1.FLINK$;

   7755  1 000336   200035 470500                    LDP0    STRUCTURES_L1$,,AUTO
         1 000337   000002 236100                    LDQ     2,,PR0
         1 000340   200035 756100                    STQ     STRUCTURES_L1$,,AUTO

     3837     7756    2              END EACH_STRUCTURE;

   7756  1 000341   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000342   000262 601000 1                  TNZ     s:7733

     3838     7757
     3839     7758    1   ACCEPT_DEF_NAME:
     3840     7759    1           RETURN;
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:495  

   7759  1 000343   000000 702200 xent  ACCEPT_DEF_* TSX2  ! X66_ARET

     3841     7760
     3842     7761
     3843     7762                %BOX (TITLE="Re-examine successful parse of a LO_NAME node");

              7774    1   /***************************************************************************
              7776    1    *                                                                         *
              7780    1            *               Re-examine successful parse of a LO_NAME node            *
              7782    1            *                                                                        *
              7784    1          ***************************************************************************/

     3844     7788
     3845     7789    1   PROCESS_LO_NAME:
     3846     7790    1           IF PARM.CODE ~= %T_LO_NAME THEN

   7790  1 000344   002047 100003       PROCESS_LO_* CMPX0   1063,DU
         1 000345   000427 601000 1                  TNZ     PROCESS_LEVEL_NAME

     3847     7791    1              GOTO PROCESS_LEVEL_NAME;
     3848     7792
     3849     7793    1           IF START_CODE = %T_LO_NAME THEN

   7793  1 000346   000003 235000 0                  LDA     START_CODE
         1 000347   002047 115007                    CMPA    1063,DL
         1 000350   000352 601000 1                  TNZ     s:7795

     3850     7794    1              RETURN;

   7794  1 000351   000000 702200 xent               TSX2  ! X66_ARET

     3851     7795    1           LO_NAME_LOC = %CLEAR;

   7795  1 000352   000100 100400                    MLR     fill='000'O
         1 000353   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000354   200022 000044                    ADSC9   LO_NAME_LOC,,AUTO        cn=0,n=36
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:496  

     3852     7796    1           LO_NAME_LOC.KEY.TYPE# (%(LVL_LOWER-1)) = %KT_STRING;

   7796  1 000355   000002 220003                    LDX0    2,DU
         1 000356   200022 740100                    STX0    LO_NAME_LOC,,AUTO

     3853     7797    1           LO_NAME_LOC.KEY.REP# (%(LVL_LOWER-1)) = %REP_REMOTE;

   7797  1 000357   200022 440100                    SXL0    LO_NAME_LOC,,AUTO

     3854     7798    1           LO_NAME_LOC.KEY.V$ (%(LVL_LOWER-1)) = ADDR(USER_WORD);

   7798  1 000360   200006 631500                    EPPR1   USER_WORD,,AUTO
         1 000361   200023 451500                    STP1    LO_NAME_LOC+1,,AUTO

     3855     7799    1           USER_WORD.OBJECT = %CLEAR;

   7799  1 000362   200006 450100                    STZ     USER_WORD,,AUTO

     3856     7800    1           USER_WORD.OBJECT.CLASS# = %CLS_TEXTC_REMOTE;

   7800  1 000363   000053 221003                    LDX1    43,DU
         1 000364   200006 741100                    STX1    USER_WORD,,AUTO

     3857     7801    1           CALL VDA$LREAD (LOCATIONS$STREAM, LO_NAME_LOC, 0, %TRUE)

   7801  1 000365   000002 237000 2                  LDAQ    2
         1 000366   200056 757100                    STAQ    FILE_KEY+11,,AUTO
         1 000367   200022 633500                    EPPR3   LO_NAME_LOC,,AUTO
         1 000370   200055 453500                    STP3    FILE_KEY+10,,AUTO
         1 000371   000002 236000 xsym               LDQ     VD_6E+2
         1 000372   200054 756100                    STQ     FILE_KEY+9,,AUTO
         1 000373   200054 630500                    EPPR0   FILE_KEY+9,,AUTO
         1 000374   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000375   000000 701000 xent               TSX1    VDA$LREAD
         1 000376   000756 702000 1                  TSX2    LREAD_FAILED

PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:497  
     3858     7802    1             ALTRET (LREAD_FAILED);
     3859     7803
     3860     7804                %GETKEY (KEY=LOCATIONS$STREAM.PORT$->VD$PORT.CURRENT.KEY,
     3861     7805                INDX="%(LVL_LOWER-1)", PTR=PORT_KEY$);

   7812  1 000377   000002 470400 xsym               LDP0    VD_6E+2
         1 000400   000001 471500                    LDP1    1,,PR0
         1 000401   100012 720100                    LXL0    10,,PR1
         1 000402   000002 100003                    CMPX0   2,DU
         1 000403   000410 601000 1                  TNZ     s:7812+9

   7812  1 000404   100013 473500                    LDP3    11,,PR1
         1 000405   300002 634500                    EPPR4   2,,PR3
         1 000406   200033 454500                    STP4    PORT_KEY$,,AUTO
         1 000407   000412 710000 1                  TRA     s:7815

   7812  1 000410   100013 633500                    EPPR3   11,,PR1
         1 000411   200033 453500                    STP3    PORT_KEY$,,AUTO

     3862     7815    1           IF PORT$KEY.BYTES ~=

   7815  1 000412   200033 473500                    LDP3    PORT_KEY$,,AUTO
         1 000413   300000 236100                    LDQ     0,,PR3
         1 000414   000033 772000                    QRL     27
         1 000415   000000 621006                    EAX1    0,QL
         1 000416   200010 236100                    LDQ     USER_WORD+2,,AUTO
         1 000417   000033 772000                    QRL     27
         1 000420   000000 622006                    EAX2    0,QL
         1 000421   040140 106540                    CMPC    fill='040'O
         1 000422   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         1 000423   200010 200012                    ADSC9   USER_WORD+2,,AUTO        cn=1,n=*X2
         1 000424   000426 600000 1                  TZE     s:7820

     3863     7816    2             SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH#) THEN DO;

     3864     7817    2              GOTO REJECT_LO_NAME;

PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:498  
   7817  1 000425   000737 710000 1                  TRA     REJECT_DEF_NAME

     3865     7818    2              END;
     3866     7819
     3867     7820    1           RETURN;

   7820  1 000426   000000 702200 xent               TSX2  ! X66_ARET

     3868     7821
     3869     7822
     3870     7823                %BOX (TITLE="Re-examine successful parse of a LEVEL_NAME node");

              7835    1   /***************************************************************************
              7837    1    *                                                                         *
              7841    1            *              Re-examine successful parse of a LEVEL_NAME node          *
              7843    1            *                                                                        *
              7845    1          ***************************************************************************/

     3871     7849
     3872     7850    1   PROCESS_LEVEL_NAME:
     3873     7851    1           IF PARM.CODE ~= %T_LEVEL_NAME THEN

   7851  1 000427   002054 100003       PROCESS_LEV* CMPX0   1068,DU
         1 000430   000536 601000 1                  TNZ     PROCESS_PREDEF_FILE_NAME

     3874     7852    1              GOTO PROCESS_PREDEF_FILE_NAME;
     3875     7853
     3876     7854    1           STRUCTURES_L0$ = STRUCTURES$STREAM.PORT$ ->

   7854  1 000431   000005 471400 xsym               LDP1    VD_6E+5
         1 000432   100001 473500                    LDP3    1,,PR1
         1 000433   300031 236100                    LDQ     25,,PR3
         1 000434   200034 756100                    STQ     STRUCTURES_L0$,,AUTO

     3877     7855    1             VD$PORT.LEVEL.INTERNAL$ (%LVL_FILE);
     3878     7856                /*STRUCTURES_L1$ = STRUCTURES$L0.HEAD$;*/
     3879     7857                /* For now, the only structure the user can ref is External */
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:499  
     3880     7858    1           STRUCTURES_L1$ = VD_6E.STRUCTURE_EXTERNAL$;

   7858  1 000435   000010 236000 xsym               LDQ     VD_6E+8
         1 000436   200035 756100                    STQ     STRUCTURES_L1$,,AUTO

     3881     7859
     3882     7860    1   FIND_STRUCTURE:
     3883     7861    2           DO WHILE STRUCTURES_L1$ ~= ADDR(NIL);

   7861  1 000437   000530 710000 1     FIND_STRUCT* TRA     s:7892

     3884     7862    2              STRUCTURES_L2$ = STRUCTURES$L1.HEAD$;

   7862  1 000440   200035 470500                    LDP0    STRUCTURES_L1$,,AUTO
         1 000441   000012 236100                    LDQ     10,,PR0
         1 000442   200036 756100                    STQ     STRUCTURES_L2$,,AUTO

     3885     7863    2              IF STRUCTURES_L2$ ~= ADDR(NIL) THEN

   7863  1 000443   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000444   000450 600000 1                  TZE     s:7865

     3886     7864    2                 STRUCTURES_L2$ = STRUCTURES$L2.FLINK$; /* Get to lev 1 */

   7864  1 000445   200036 471500                    LDP1    STRUCTURES_L2$,,AUTO
         1 000446   100002 236100                    LDQ     2,,PR1
         1 000447   200036 756100                    STQ     STRUCTURES_L2$,,AUTO

     3887     7865    3              IF STRUCTURES_L2$ ~= ADDR(NIL) THEN DO;

   7865  1 000450   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000451   000527 600000 1                  TZE     s:7891

     3888     7866                      %GETKEY (KEY=STRUCTURES$L2.DESC.KEY, PTR=LEVEL_KEY$);

   7873  1 000452   200036 471500                    LDP1    STRUCTURES_L2$,,AUTO
         1 000453   100004 720100                    LXL0    4,,PR1
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:500  
         1 000454   000002 100003                    CMPX0   2,DU
         1 000455   000462 601000 1                  TNZ     s:7873+8

   7873  1 000456   100005 473500                    LDP3    5,,PR1
         1 000457   300002 634500                    EPPR4   2,,PR3
         1 000460   200037 454500                    STP4    LEVEL_KEY$,,AUTO
         1 000461   000464 710000 1                  TRA     s:7876

   7873  1 000462   000005 036003                    ADLQ    5,DU
         1 000463   200037 756100                    STQ     LEVEL_KEY$,,AUTO

     3889     7876    3                 IF LEVEL$KEY.BYTES =

   7876  1 000464   200037 473500                    LDP3    LEVEL_KEY$,,AUTO
         1 000465   300000 236100                    LDQ     0,,PR3
         1 000466   000033 772000                    QRL     27
         1 000467   000000 621006                    EAX1    0,QL
         1 000470   200010 236100                    LDQ     USER_WORD+2,,AUTO
         1 000471   000033 772000                    QRL     27
         1 000472   000000 622006                    EAX2    0,QL
         1 000473   040140 106540                    CMPC    fill='040'O
         1 000474   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         1 000475   200010 200012                    ADSC9   USER_WORD+2,,AUTO        cn=1,n=*X2
         1 000476   000532 600000 1                  TZE     s:7894

     3890     7877    3                   SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH#) THEN
     3891     7878    3                    EXIT FIND_STRUCTURE;
     3892     7879    3                 IF SUBSTR(USER_WORD.BYTES, USER_WORD.LENGTH# -

   7879  1 000477   200010 236100                    LDQ     USER_WORD+2,,AUTO
         1 000500   000033 772000                    QRL     27
         1 000501   040000 106506                    CMPC    fill='040'O
         1 000502   200010 000001                    ADSC9   USER_WORD+2,Q,AUTO       cn=0,n=1
         1 000503   000001 000001 2                  ADSC9   1                        cn=0,n=1
         1 000504   000512 601000 1                  TNZ     s:7884
         1 000505   777777 622006                    EAX2    -1,QL
         1 000506   040140 106540                    CMPC    fill='040'O
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:501  
         1 000507   200010 200012                    ADSC9   USER_WORD+2,,AUTO        cn=1,n=*X2
         1 000510   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         1 000511   000532 600000 1                  TZE     s:7894

     3893     7880    3                   %LENGTHC(CHR_PLURAL), %LENGTHC(CHR_PLURAL)) = %CHR_PLURAL
     3894     7881    3                   AND SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH# -
     3895     7882    3                   %LENGTHC(CHR_PLURAL)) = LEVEL$KEY.BYTES THEN
     3896     7883    3                    EXIT FIND_STRUCTURE;
     3897     7884    3                 IF USER_WORD.LENGTH# = %NB_RESERVED_WORD_ABBREV

   7884  1 000512   000033 736000                    QLS     27
         1 000513   002000 116003                    CMPQ    1024,DU
         1 000514   000527 601000 1                  TNZ     s:7891
         1 000515   200010 236100                    LDQ     USER_WORD+2,,AUTO
         1 000516   000033 772000                    QRL     27
         1 000517   000000 622006                    EAX2    0,QL
         1 000520   200010 236100                    LDQ     USER_WORD+2,,AUTO
         1 000521   000033 772000                    QRL     27
         1 000522   000000 623006                    EAX3    0,QL
         1 000523   040140 106540                    CMPC    fill='040'O
         1 000524   300000 200012                    ADSC9   0,,PR3                   cn=1,n=*X2
         1 000525   200010 200013                    ADSC9   USER_WORD+2,,AUTO        cn=1,n=*X3
         1 000526   000532 600000 1                  TZE     s:7894

     3898     7885    3                   AND SUBSTR(LEVEL$KEY.BYTES, 0, USER_WORD.LENGTH#) =
     3899     7886    3                   SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH#) THEN
     3900     7887    3                    EXIT FIND_STRUCTURE;
     3901     7888    3                 END;

     3902     7889                   /*STRUCTURES_L1$ = STRUCTURES$L1.FLINK$;*/
     3903     7890                   /* For now, the only structure the user can ref is External */
     3904     7891    2              GOTO REJECT_LEVEL_NAME;

   7891  1 000527   000737 710000 1                  TRA     REJECT_DEF_NAME

     3905     7892    2              END FIND_STRUCTURE;

PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:502  
   7892  1 000530   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000531   000440 601000 1                  TNZ     s:7862

     3906     7893
     3907     7894    1           IF STRUCTURES_L1$ = ADDR(NIL) THEN

   7894  1 000532   200035 236100                    LDQ     STRUCTURES_L1$,,AUTO
         1 000533   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000534   000737 600000 1                  TZE     REJECT_DEF_NAME

     3908     7895    1              GOTO REJECT_LEVEL_NAME;
     3909     7896
     3910     7897
     3911     7898    1   ACCEPT_LEVEL_NAME:
     3912     7899    1           RETURN;

   7899  1 000535   000000 702200 xent  ACCEPT_LEVE* TSX2  ! X66_ARET

     3913     7900
     3914     7901
     3915     7902                %BOX (TITLE="Re-examine successful parse of a PREDEF_FILE_NAME node");

              7914    1   /***************************************************************************
              7916    1    *                                                                         *
              7920    1            *           Re-examine successful parse of a PREDEF_FILE_NAME node       *
              7922    1            *                                                                        *
              7924    1          ***************************************************************************/

     3916     7928
     3917     7929    1   PROCESS_PREDEF_FILE_NAME:
     3918     7930    1           IF PARM.CODE ~= %T_PREDEF_FILE_NAME THEN

   7930  1 000536   002000 100003       PROCESS_PRE* CMPX0   1024,DU
         1 000537   000541 600000 1                  TZE     s:7933

     3919     7931    1              RETURN;

PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:503  
   7931  1 000540   000000 702200 xent               TSX2  ! X66_ARET

     3920     7932
     3921     7933    1           DIR_NODE$ = VD_6E.WS.INTERNAL_DIR$;

   7933  1 000541   000017 236000 xsym               LDQ     VD_6E+15
         1 000542   200040 756100                    STQ     DIR_NODE$,,AUTO

     3922     7934    1   EACH_DIR:
     3923     7935    2           DO WHILE DIR_NODE$ ~= ADDR(NIL);

   7935  1 000543   000735 710000 1     EACH_DIR     TRA     s:7976

     3924     7936    2              OUT$BLK.SCRITCH = POFFW(DIR_NODE$,EQUALS$STREAM.FILE_KEY.V$);

   7936  1 000544   200003 470500                    LDP0    @PARM,,AUTO
         1 000545   000002 471500                    LDP1    2,,PR0
         1 000546   000001 473400 xsym               LDP3    VD_6E+1
         1 000547   300005 236100                    LDQ     5,,PR3
         1 000550   000022 772000                    QRL     18
         1 000551   200054 756100                    STQ     FILE_KEY+9,,AUTO
         1 000552   200040 236100                    LDQ     DIR_NODE$,,AUTO
         1 000553   000022 772000                    QRL     18
         1 000554   200054 136100                    SBLQ    FILE_KEY+9,,AUTO
         1 000555   000000 620006                    EAX0    0,QL
         1 000556   100001 440100                    SXL0    1,,PR1

     3925     7937    2              CALL XLATE (FILE_KEY, B$XL_UPPER, DIR$NODE.KEY);

   7937  1 000557   200040 471500                    LDP1    DIR_NODE$,,AUTO
         1 000560   000000 473400 xsym               LDP3    B$XL_UPPER$
         1 000561   040100 160500                    MVT     fill='040'O
         1 000562   100003 000037                    ADSC9   3,,PR1                   cn=0,n=31
         1 000563   200043 000037                    ADSC9   FILE_KEY,,AUTO           cn=0,n=31
         1 000564   300000 000100                    ARG     0,,PR3

     3926     7938    2              IF SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH#) = FILE_KEY THEN
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:504  

   7938  1 000565   200010 236100                    LDQ     USER_WORD+2,,AUTO
         1 000566   000033 772000                    QRL     27
         1 000567   000000 620006                    EAX0    0,QL
         1 000570   040100 106540                    CMPC    fill='040'O
         1 000571   200010 200010                    ADSC9   USER_WORD+2,,AUTO        cn=1,n=*X0
         1 000572   200043 000037                    ADSC9   FILE_KEY,,AUTO           cn=0,n=31
         1 000573   000755 600000 1                  TZE     ACCEPT_PREDEF_FILE_NAME

     3927     7939    2                 GOTO ACCEPT_PREDEF_FILE_NAME;
     3928     7940    2              IF USER_WORD.LENGTH# = %NB_RESERVED_WORD_ABBREV

   7940  1 000574   200010 236100                    LDQ     USER_WORD+2,,AUTO
         1 000575   777000 376003                    ANQ     -512,DU
         1 000576   002000 116003                    CMPQ    1024,DU
         1 000577   000612 601000 1                  TNZ     s:7945
         1 000600   200010 236100                    LDQ     USER_WORD+2,,AUTO
         1 000601   000033 772000                    QRL     27
         1 000602   000000 620006                    EAX0    0,QL
         1 000603   200010 236100                    LDQ     USER_WORD+2,,AUTO
         1 000604   000033 772000                    QRL     27
         1 000605   000000 621006                    EAX1    0,QL
         1 000606   040140 106540                    CMPC    fill='040'O
         1 000607   200010 200010                    ADSC9   USER_WORD+2,,AUTO        cn=1,n=*X0
         1 000610   200043 000011                    ADSC9   FILE_KEY,,AUTO           cn=0,n=*X1
         1 000611   000755 600000 1                  TZE     ACCEPT_PREDEF_FILE_NAME

     3929     7941    2                AND SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH#) =
     3930     7942    2                SUBSTR(FILE_KEY, 0, USER_WORD.LENGTH#) THEN
     3931     7943    2                 GOTO ACCEPT_PREDEF_FILE_NAME;
     3932     7944
     3933     7945    2              FILE_NODE$ = DIR$NODE.HEAD$;

   7945  1 000612   100015 236100                    LDQ     13,,PR1
         1 000613   200041 756100                    STQ     FILE_NODE$,,AUTO

     3934     7946    2   EACH_FILE_IN_DIR:
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:505  
     3935     7947    3              DO WHILE FILE_NODE$ ~= ADDR(NIL);

   7947  1 000614   000730 710000 1     EACH_FILE_I* TRA     s:7974

     3936     7948                      %GETKEY (KEY=FILE$NODE.DESC.KEY, PTR=FILE_KEY$);

   7955  1 000615   200041 470500                    LDP0    FILE_NODE$,,AUTO
         1 000616   000004 720100                    LXL0    4,,PR0
         1 000617   000002 100003                    CMPX0   2,DU
         1 000620   000625 601000 1                  TNZ     s:7955+8

   7955  1 000621   000005 471500                    LDP1    5,,PR0
         1 000622   100002 633500                    EPPR3   2,,PR1
         1 000623   200042 453500                    STP3    FILE_KEY$,,AUTO
         1 000624   000630 710000 1                  TRA     s:7958

   7955  1 000625   200041 236100                    LDQ     FILE_NODE$,,AUTO
         1 000626   000005 036003                    ADLQ    5,DU
         1 000627   200042 756100                    STQ     FILE_KEY$,,AUTO

     3937     7958    3                 OUT$BLK.SCRITCH =

   7958  1 000630   200003 471500                    LDP1    @PARM,,AUTO
         1 000631   100002 473500                    LDP3    2,,PR1
         1 000632   000001 474400 xsym               LDP4    VD_6E+1
         1 000633   400005 236100                    LDQ     5,,PR4
         1 000634   000022 772000                    QRL     18
         1 000635   200054 756100                    STQ     FILE_KEY+9,,AUTO
         1 000636   000005 236100                    LDQ     5,,PR0
         1 000637   000022 772000                    QRL     18
         1 000640   200054 136100                    SBLQ    FILE_KEY+9,,AUTO
         1 000641   000000 620006                    EAX0    0,QL
         1 000642   300001 440100                    SXL0    1,,PR3

     3938     7959    3                   POFFW(FILE$NODE.DESC.KEY.V$,EQUALS$STREAM.FILE_KEY.V$);
     3939     7960    3                 CALL XLATE (FILE_KEY, B$XL_UPPER, FILE$KEY.BYTES);

PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:506  
   7960  1 000643   200042 473500                    LDP3    FILE_KEY$,,AUTO
         1 000644   300000 236100                    LDQ     0,,PR3
         1 000645   000033 772000                    QRL     27
         1 000646   000000 620006                    EAX0    0,QL
         1 000647   000000 474400 xsym               LDP4    B$XL_UPPER$
         1 000650   040100 160540                    MVT     fill='040'O
         1 000651   300000 200010                    ADSC9   0,,PR3                   cn=1,n=*X0
         1 000652   200043 000037                    ADSC9   FILE_KEY,,AUTO           cn=0,n=31
         1 000653   400000 000100                    ARG     0,,PR4

     3940     7961    3                 CALL INDEX1R (I, %CHR_UNDERSCORE, FILE_KEY, FILE$KEY.LENGTH#)

   7961  1 000654   000000 125540                    SCMR    mask='000'O
         1 000655   200043 000010                    ADSC9   FILE_KEY,,AUTO           cn=0,n=*X0
         1 000656   000004 000001 2                  ADSC9   4                        cn=0,n=1
         1 000657   200005 000100                    ARG     I,,AUTO
         1 000660   000664 606400 1                  TTN     s:7963
         1 000661   200005 054100                    AOS     I,,AUTO
         1 000662   200005 156100                    SSQ     I,,AUTO
         1 000663   000670 710000 1                  TRA     s:7965

     3941     7962    4                 WHENALTRETURN DO;

     3942     7963    4                    CALL VDG$ESCREECH (FILE$KEY.LENGTH#);

   7963  1 000664   200042 630500                    EPPR0   FILE_KEY$,,AUTO
         1 000665   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000666   000000 701000 xent               TSX1    VDG$ESCREECH
         1 000667   000000 011000                    NOP     0

     3943     7964    4                    END;

     3944     7965    3                 I = I + 1;

   7965  1 000670   200005 235100                    LDA     I,,AUTO
         1 000671   000001 035007                    ADLA    1,DL
         1 000672   200005 755100                    STA     I,,AUTO
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:507  

     3945     7966    3                 IF SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH#) =

   7966  1 000673   200010 236100                    LDQ     USER_WORD+2,,AUTO
         1 000674   000033 772000                    QRL     27
         1 000675   200042 470500                    LDP0    FILE_KEY$,,AUTO
         1 000676   000000 620006                    EAX0    0,QL
         1 000677   000000 236100                    LDQ     0,,PR0
         1 000700   000033 772000                    QRL     27
         1 000701   200005 136100                    SBLQ    I,,AUTO
         1 000702   000000 621006                    EAX1    0,QL
         1 000703   040145 106540                    CMPC    fill='040'O
         1 000704   200010 200010                    ADSC9   USER_WORD+2,,AUTO        cn=1,n=*X0
         1 000705   200043 000011                    ADSC9   FILE_KEY,A,AUTO          cn=0,n=*X1
         1 000706   000755 600000 1                  TZE     ACCEPT_PREDEF_FILE_NAME

     3946     7967    3                   SUBSTR(FILE_KEY, I, FILE$KEY.LENGTH# - I) THEN
     3947     7968    3                    GOTO ACCEPT_PREDEF_FILE_NAME;
     3948     7969    3                 IF USER_WORD.LENGTH# = %NB_RESERVED_WORD_ABBREV

   7969  1 000707   200010 236100                    LDQ     USER_WORD+2,,AUTO
         1 000710   777000 376003                    ANQ     -512,DU
         1 000711   002000 116003                    CMPQ    1024,DU
         1 000712   000725 601000 1                  TNZ     s:7973
         1 000713   200010 236100                    LDQ     USER_WORD+2,,AUTO
         1 000714   000033 772000                    QRL     27
         1 000715   000000 620006                    EAX0    0,QL
         1 000716   200010 236100                    LDQ     USER_WORD+2,,AUTO
         1 000717   000033 772000                    QRL     27
         1 000720   000000 621006                    EAX1    0,QL
         1 000721   040145 106540                    CMPC    fill='040'O
         1 000722   200010 200010                    ADSC9   USER_WORD+2,,AUTO        cn=1,n=*X0
         1 000723   200043 000011                    ADSC9   FILE_KEY,A,AUTO          cn=0,n=*X1
         1 000724   000755 600000 1                  TZE     ACCEPT_PREDEF_FILE_NAME

     3949     7970    3                   AND SUBSTR(USER_WORD.BYTES, 0, USER_WORD.LENGTH#) =
     3950     7971    3                   SUBSTR(FILE_KEY, I, USER_WORD.LENGTH#) THEN
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:508  
     3951     7972    3                    GOTO ACCEPT_PREDEF_FILE_NAME;
     3952     7973    3                 FILE_NODE$ = FILE$NODE.FLINK$;

   7973  1 000725   200041 471500                    LDP1    FILE_NODE$,,AUTO
         1 000726   100002 236100                    LDQ     2,,PR1
         1 000727   200041 756100                    STQ     FILE_NODE$,,AUTO

     3953     7974    3                 END EACH_FILE_IN_DIR;

   7974  1 000730   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000731   000615 601000 1                  TNZ     s:7955

     3954     7975    2              DIR_NODE$ = DIR$NODE.FLINK$;

   7975  1 000732   200040 470500                    LDP0    DIR_NODE$,,AUTO
         1 000733   000002 236100                    LDQ     2,,PR0
         1 000734   200040 756100                    STQ     DIR_NODE$,,AUTO

     3955     7976    2              END EACH_DIR;

   7976  1 000735   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000736   000544 601000 1                  TNZ     s:7936

   7969  1 000737                       REJECT_DEF_* null
     3956     7977
     3957     7978
     3958     7979    1   REJECT_DEF_NAME:;
     3959     7980    1   REJECT_LEVEL_NAME:;

   7980  1 000737                       REJECT_LEVE* null
   7980  1 000737                       REJECT_LO_N* null
     3960     7981    1   REJECT_LO_NAME:;
     3961     7982    1   REJECT_PREDEF_FILE_NAME:
     3962     7983    1           PARM.REJECT = %TRUE;

   7983  1 000737   200003 470500       REJECT_PRED* LDP0    @PARM,,AUTO
         1 000740   000200 236003                    LDQ     128,DU
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:509  
         1 000741   000000 256100                    ORSQ    0,,PR0

     3963     7984    1           IF PARM.TYPE = %PRE# THEN RETURN;

   7984  1 000742   000000 236100                    LDQ     0,,PR0
         1 000743   777000 376003                    ANQ     -512,DU
         1 000744   001000 116003                    CMPQ    512,DU
         1 000745   000747 601000 1                  TNZ     s:7985

   7984  1 000746   000000 702200 xent               TSX2  ! X66_ARET

     3964     7985    1           PARM.CHARPOS = START_CPOS;

   7985  1 000747   000001 235000 0                  LDA     START_CPOS
         1 000750   000004 755100                    STA     4,,PR0

     3965     7986    1           P$PCB.HI_CHAR = START_HI_CHAR;

   7986  1 000751   000005 471500                    LDP1    5,,PR0
         1 000752   000002 235000 0                  LDA     START_HI_CHAR
         1 000753   100012 755100                    STA     10,,PR1

     3966     7987    1           RETURN;

   7987  1 000754   000000 702200 xent               TSX2  ! X66_ARET

     3967     7988
     3968     7989
     3969     7990    1   ACCEPT_PREDEF_FILE_NAME:
     3970     7991    1           RETURN;

   7991  1 000755   000000 702200 xent  ACCEPT_PRED* TSX2  ! X66_ARET

     3971     7992
     3972     7993
     3973     7994                %BOX (TITLE="Error Handlers");

PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:510  
              8006    1   /***************************************************************************
              8008    1    *                                                                         *
              8012    1            *                               Error Handlers                           *
              8014    1            *                                                                        *
              8016    1          ***************************************************************************/

     3974     8020
     3975     8021    1   LREAD_FAILED:
     3976     8022    1           PARM.REJECT = %TRUE;

   8022  1 000756   200003 470500       LREAD_FAILED LDP0    @PARM,,AUTO
         1 000757   000200 236003                    LDQ     128,DU
         1 000760   000000 256100                    ORSQ    0,,PR0

     3977     8023    1           RETURN;

   8023  1 000761   000000 702200 xent               TSX2  ! X66_ARET
     3978     8024
     3979     8025    1   END VDI$PUSER_PARSE_RTN;
     3980     8026        %EOD;

PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:511  
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   XU_SUBS_C.:LIBRARY  is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_NODES0_E.:VDA5TOU  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDI$PUSER_PARSE_RTN.
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:512  

 **** Variables and constants ****

  ****  Section 000  Data  VDI$PUSER_PARSE_RTN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w UBIN        r     1 START_CODE                 1-0-0/w UBIN        r     1 START_CPOS
     2-0-0/w UBIN        r     1 START_HI_CHAR              0-0-0/w SBIN        r     1 VD_RPAREN_POS

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @PARM                     40-0-0/w PTR         r     1 DIR_NODE$
    43-0-0/c CHAR(31)    r     1 FILE_KEY                  42-0-0/w PTR         r     1 FILE_KEY$
    41-0-0/w PTR         r     1 FILE_NODE$                 5-0-0/w UBIN        r     1 I
    37-0-0/w PTR         r     1 LEVEL_KEY$                22-0-0/w STRC(324)   r     1 LO_NAME_LOC
     4-0-0/w PTR         r     1 OUT_SYM$                  *0-0-0/w STRC(270)   r     1 PARM
    33-0-0/w PTR         r     1 PORT_KEY$                 34-0-0/w PTR         r     1 STRUCTURES_L0$
    35-0-0/w PTR         r     1 STRUCTURES_L1$            36-0-0/w PTR         r     1 STRUCTURES_L2$
    20-0-0/w PTR         r     1 TABLE_WORD$               21-0-0/w UBIN        r     1 TABLE_WORD_LN
     6-0-0/w STRC(360)   r     1 USER_WORD

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$XL_UPPER$                0-0-0/w STRC(22644) r     1 VD_6E
     0-0-0/w PTR         r     1 VD_RESERVED_TABLE$(0:15)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:513  

     0-0-0/d STRC(4608)  r     1 B$XL_UPPER                 0-0-0/w STRC(576)   r     1 DIR$NODE
     0-0-0/w STRC(864)   r     1 EQUALS$STREAM              0-0-0/w ASTR(9)     r     1 FILE$KEY
     0-0-0/w STRC(468)   r     1 FILE$NODE                  0-0-0/w ASTR(9)     r     1 LEVEL$KEY
     0-0-0/w STRC(864)   r     1 LOCATIONS$STREAM           0-0-0/w STRC(144)   r     1 OUT$BLK
     0-0-0/w ASTR(153)   r     1 OUT$SYM                    0-0-0/w STRC(504)   r     1 P$PCB
     0-0-0/w ASTR(9)     r     1 PORT$KEY                   0-0-0/w STRC(468)   r     1 STRUCTURES$L0
     0-0-0/w STRC(468)   r     1 STRUCTURES$L1              0-0-0/w STRC(468)   r     1 STRUCTURES$L2
     0-0-0/w STRC(864)   r     1 STRUCTURES$STREAM          0-0-0/c ACHR        r     1 TABLE$WORD
     0-0-0/c UBIN(9)     r     1 UBYT(0:0)                  0-0-0/w STRC(1944)  r     1 VD$PORT
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDI$PUSER_PARSE_RTN requires 498 words for executable code.
   Procedure VDI$PUSER_PARSE_RTN requires 48 words of local(AUTO) storage.
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:514  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:515  
          MINI XREF LISTING

ACCEPT_DEF_NAME
      7759**LABEL    7667--GOTO     7674--GOTO     7677--GOTO     7681--GOTO     7686--GOTO
ACCEPT_PREDEF_FILE_NAME
      7991**LABEL    7939--GOTO     7943--GOTO     7968--GOTO     7972--GOTO
B$XL_UPPER
      5980**DCL      7693>>CALLBLT  7937>>CALLBLT  7960>>CALLBLT
B$XL_UPPER$
      5979**DCL      5980--IMP-PTR  7693>>CALLBLT  7937>>CALLBLT  7960>>CALLBLT
DIR$NODE.FLINK$
      7273**DCL      7975>>ASSIGN
DIR$NODE.HEAD$
      7274**DCL      7945>>ASSIGN
DIR$NODE.KEY
      7273**DCL      7937>>CALLBLT
DIR_NODE$
      6093**DCL      7247--IMP-PTR  7669<<ASSIGN   7671>>ASSIGN   7672>>IF       7673>>ASSIGN   7676>>IF
      7680>>IF       7682>>ASSIGN   7684>>IF       7933<<ASSIGN   7935>>DOWHILE  7936>>ASSIGN   7937>>CALLBLT
      7945>>ASSIGN   7975<<ASSIGN   7975>>ASSIGN
EACH_TABLE
      7705**LABEL    7708--EXIT
EACH_TABLE_WORD
      7711**LABEL    7715--EXIT
EQUALS$STREAM.FILE_KEY.V$
      6431**DCL      7936>>ASSIGN   7958>>ASSIGN
FILE$KEY.BYTES
      7437**DCL      7960>>CALLBLT
FILE$KEY.LENGTH#
      7435**DCL      7437--IMP-SIZ  7960>>CALLBLT  7961>>CALLBLT  7963<>CALL     7966>>IF
FILE$NODE.DESC.KEY.REP#
      7350**DCL      7955>>IF
FILE$NODE.DESC.KEY.V$
      7350**DCL      7955>>ASSIGN   7955--ASSIGN   7958>>ASSIGN
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:516  
FILE$NODE.FLINK$
      7311**DCL      7973>>ASSIGN
FILE_KEY
      6096**DCL      7937<<CALLBLT  7938>>IF       7940>>IF       7960<<CALLBLT  7961>>CALLBLT  7966>>IF
      7969>>IF
FILE_KEY$
      6095**DCL      7427--IMP-PTR  7955<<ASSIGN   7955<<ASSIGN   7960>>CALLBLT  7960>>CALLBLT  7961>>CALLBLT
      7963>>CALL     7966>>IF
FILE_NODE$
      6094**DCL      7285--IMP-PTR  7945<<ASSIGN   7947>>DOWHILE  7955>>IF       7955>>ASSIGN   7955>>ASSIGN
      7958>>ASSIGN   7973<<ASSIGN   7973>>ASSIGN
FIND_STRUCTURE
      7861**LABEL    7878--EXIT     7883--EXIT     7887--EXIT
I
      5994**DCL      7961<<CALLBLT  7965<<ASSIGN   7965>>ASSIGN   7966>>IF       7966>>IF       7969>>IF
LEVEL$KEY.BYTES
      7234**DCL      7746>>IF       7749>>IF       7876>>IF       7879>>IF       7884>>IF
LEVEL$KEY.LENGTH#
      7232**DCL      7234--IMP-SIZ  7746>>IF       7749>>IF       7876>>IF       7879>>IF       7884>>IF
LEVEL_KEY$
      6092**DCL      7224--IMP-PTR  7743<<ASSIGN   7743<<ASSIGN   7746>>IF       7746>>IF       7749>>IF
      7749>>IF       7873<<ASSIGN   7873<<ASSIGN   7876>>IF       7876>>IF       7879>>IF       7879>>IF
      7884>>IF       7884>>IF
LOCATIONS$STREAM
      6498**DCL      7801<>CALL
LOCATIONS$STREAM.PORT$
      6524**DCL      7812>>IF       7812>>ASSIGN   7812>>ASSIGN
LO_NAME_LOC
      6068**DCL      7795<<ASSIGN   7801<>CALL
LO_NAME_LOC.KEY.REP#
      6084**DCL      7797<<ASSIGN
LO_NAME_LOC.KEY.TYPE#
      6084**DCL      7796<<ASSIGN
LO_NAME_LOC.KEY.V$
      6084**DCL      7798<<ASSIGN
LREAD_FAILED
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:517  
      8022**LABEL    7801--CALLALT
OUT$BLK.CPOS
      6332**DCL      7665>>IF
OUT$BLK.SCRITCH
      6322**DCL      7936<<ASSIGN   7958<<ASSIGN
OUT$BLK.SUBLK$
      6339**DCL      7659>>ASSIGN   7662>>ASSIGN   7662>>ASSIGN   7669>>ASSIGN   7669>>ASSIGN   7669>>ASSIGN
      7669>>ASSIGN
OUT$SYM.CODE
      6358**DCL      7662<<ASSIGN   7662>>ASSIGN   7664>>IF       7666<<ASSIGN   7671<<ASSIGN   7672>>IF
      7673<<ASSIGN   7673>>ASSIGN   7676>>IF       7678<<ASSIGN   7678>>ASSIGN   7679>>IF       7679<<ASSIGN
      7679>>ASSIGN   7682<<ASSIGN   7682>>ASSIGN   7685<<ASSIGN   7685>>ASSIGN   7689>>IF
OUT$SYM.COUNT
      6375**DCL      6378--IMP-SIZ  7680>>IF       7692>>ASSIGN   7693>>CALLBLT  7699>>IF       7699>>IF
OUT$SYM.TEXT
      6378**DCL      7671--ASSIGN   7682--ASSIGN   7684--IF       7693>>CALLBLT  7699>>IF       7699>>IF
OUT_SYM$
      5993**DCL      6352--IMP-PTR  7659<<ASSIGN   7662>>ASSIGN   7662>>ASSIGN   7664>>IF       7666>>ASSIGN
      7669>>ASSIGN   7671>>ASSIGN   7673>>ASSIGN   7678>>ASSIGN   7678>>ASSIGN   7679>>IF       7679>>ASSIGN
      7679>>ASSIGN   7682>>ASSIGN   7682>>ASSIGN   7685>>ASSIGN   7685>>ASSIGN   7689>>IF       7692>>ASSIGN
      7693>>CALLBLT  7693>>CALLBLT  7699>>IF       7699>>IF       7699>>IF       7699>>IF
P$PCB.HI_CHAR
      6269**DCL      7606>>ASSIGN   7986<<ASSIGN
P$PCB.NXT
      6168**DCL      7609>>IF
PARM
      5873**DCL       100--PROC
PARM.CHARPOS
      5911**DCL      7605>>ASSIGN   7985<<ASSIGN
PARM.CODE
      5894**DCL      7602>>IF       7607>>IF       7612>>IF       7614>>ASSIGN   7648>>IF       7661>>IF
      7695>>IF       7720>>IF       7790>>IF       7851>>IF       7930>>IF
PARM.OUT$
      5903**DCL      6306--IMP-PTR  7659>>ASSIGN   7665>>IF       7936>>ASSIGN   7958>>ASSIGN
PARM.PCB$
      5917**DCL      6118--IMP-PTR  7606>>ASSIGN   7609>>IF       7986>>ASSIGN
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:518  
PARM.REJECT
      5885**DCL      7610<<ASSIGN   7983<<ASSIGN   8022<<ASSIGN
PARM.TYPE
      5874**DCL      7603>>IF       7646>>IF       7984>>IF
PORT$KEY.BYTES
      6932**DCL      7815>>IF
PORT$KEY.LENGTH#
      6930**DCL      6932--IMP-SIZ  7815>>IF
PORT_KEY$
      6088**DCL      6922--IMP-PTR  7812<<ASSIGN   7812<<ASSIGN   7815>>IF       7815>>IF
PROCESS_LEVEL_NAME
      7851**LABEL    7791--GOTO
PROCESS_LO_NAME
      7790**LABEL    7721--GOTO
PROCESS_PREDEF_FILE_NAME
      7930**LABEL    7696--GOTO     7852--GOTO
REJECT_DEF_NAME
      7969**LABEL    7690--GOTO     7701--GOTO     7713--GOTO     7748--GOTO     7752--GOTO
REJECT_LEVEL_NAME
      7980**LABEL    7891--GOTO     7895--GOTO
REJECT_LO_NAME
      7980**LABEL    7817--GOTO
START_CODE
      5989**DCL      7612>>IF       7614<<ASSIGN   7665>>IF       7665>>IF       7793>>IF
START_CPOS
      5987**DCL      7605<<ASSIGN   7609>>IF       7655>>ASSIGN   7665>>IF       7985>>ASSIGN
START_HI_CHAR
      5988**DCL      7606<<ASSIGN   7609>>IF       7986>>ASSIGN
STRUCTURES$L0.HEAD$
      7028**DCL      7730>>ASSIGN
STRUCTURES$L1.FLINK$
      7064**DCL      7755>>ASSIGN
STRUCTURES$L1.HEAD$
      7121**DCL      7733>>ASSIGN   7862>>ASSIGN
STRUCTURES$L2.DESC.KEY.REP#
      7196**DCL      7743>>IF       7873>>IF
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:519  
STRUCTURES$L2.DESC.KEY.V$
      7196**DCL      7743>>ASSIGN   7743--ASSIGN   7873>>ASSIGN   7873--ASSIGN
STRUCTURES$L2.FLINK$
      7157**DCL      7753>>ASSIGN   7864>>ASSIGN
STRUCTURES$STREAM.PORT$
      6842**DCL      7728>>ASSIGN   7854>>ASSIGN
STRUCTURES_L0$
      6089**DCL      6945--IMP-PTR  7728<<ASSIGN   7730>>ASSIGN   7854<<ASSIGN
STRUCTURES_L1$
      6090**DCL      7038--IMP-PTR  7730<<ASSIGN   7732>>DOWHILE  7733>>ASSIGN   7755<<ASSIGN   7755>>ASSIGN
      7858<<ASSIGN   7861>>DOWHILE  7862>>ASSIGN   7894>>IF
STRUCTURES_L2$
      6091**DCL      7131--IMP-PTR  7733<<ASSIGN   7735>>DOWHILE  7743>>IF       7743>>ASSIGN   7743>>ASSIGN
      7753<<ASSIGN   7753>>ASSIGN   7862<<ASSIGN   7863>>IF       7864<<ASSIGN   7864>>ASSIGN   7865>>IF
      7873>>IF       7873>>ASSIGN   7873>>ASSIGN
TABLE$WORD
      6383**DCL      7711>>DOUNTIL  7712>>IF       7712>>IF       7714>>IF       7714>>IF
TABLE_WORD$
      6058**DCL      6383--IMP-PTR  7706<<ASSIGN   7707>>IF       7711>>DOUNTIL  7712>>IF       7714>>IF
      7716<<ASSIGN   7716>>ASSIGN
TABLE_WORD_LN
      6059**DCL      6383--IMP-SIZ  7703<<ASSIGN   7704>>IF       7706>>ASSIGN   7711>>DOUNTIL  7712>>IF
      7712>>IF       7714>>IF       7714>>IF       7716>>ASSIGN
UBYT
      6299**DCL      7671>>ASSIGN   7682>>ASSIGN   7684>>IF
USER_WORD
      6021**DCL      7798--ASSIGN
USER_WORD.BYTES
      6054**DCL      7693<<CALLBLT  7712--IF       7714--IF       7746>>IF       7749>>IF       7815>>IF
      7876>>IF       7879>>IF       7879>>IF       7884>>IF       7938>>IF       7940>>IF       7966>>IF
      7969>>IF
USER_WORD.LENGTH#
      6050**DCL      7692<<ASSIGN   7703>>ASSIGN   7746>>IF       7749>>IF       7749>>IF       7749>>IF
      7815>>IF       7876>>IF       7879>>IF       7879>>IF       7884>>IF       7884>>IF       7884>>IF
      7938>>IF       7940>>IF       7940>>IF       7940>>IF       7966>>IF       7969>>IF       7969>>IF
      7969>>IF
PL6.E3A0      #005=VDI$PUSER_PARSE_RTN File=VDI$PARSE.:VDA5TSI                   FRI 07/04/97 11:35 Page:520  
USER_WORD.OBJECT
      6046**DCL      7799<<ASSIGN
USER_WORD.OBJECT.CLASS#
      6048**DCL      7800<<ASSIGN
VD$PORT.CURRENT.KEY.REP#
      7517**DCL      7812>>IF
VD$PORT.CURRENT.KEY.V$
      7517**DCL      7812>>ASSIGN   7812--ASSIGN
VD$PORT.LEVEL.INTERNAL$
      7537**DCL      7728>>ASSIGN   7854>>ASSIGN
VD$TEXTC_REMOTE.LENGTH#
      7594**DCL      7596--IMP-SIZ  7743--ASSIGN   7812--ASSIGN   7873--ASSIGN   7955--ASSIGN
VDA$LREAD
      5938**DCL-ENT  7801--CALL
VDG$ESCREECH
      5939**DCL-ENT  7963--CALL
VD_6E.EQUALS$
      5955**DCL      6392--IMP-PTR  7936>>ASSIGN   7958>>ASSIGN
VD_6E.KEYINS$
      5955**DCL      6710--IMP-PTR
VD_6E.LOCATIONS$
      5955**DCL      6498--IMP-PTR  7801>>CALL     7812>>IF       7812>>ASSIGN   7812>>ASSIGN
VD_6E.STRUCTURES$
      5955**DCL      6816--IMP-PTR  7728>>ASSIGN   7854>>ASSIGN
VD_6E.STRUCTURE_EXTERNAL$
      5956**DCL      7858>>ASSIGN
VD_6E.SYNONYMS$
      5955**DCL      6604--IMP-PTR
VD_6E.WS.INTERNAL_DIR$
      5958**DCL      7933>>ASSIGN
VD_RESERVED_TABLE$
      5982**DCL      7706>>ASSIGN
VD_RPAREN_POS
      5985**DCL      7615<<ASSIGN   7655<<ASSIGN

PL6.E3A0      #006=VDI$PGLOBAL_COMMANDS File=VDI$PARSE.:VDA5TSI                  FRI 07/04/97 11:35 Page:521  
     3981        1        /*T***********************************************************/
     3982        2        /*T*                                                         */
     3983        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3984        4        /*T*                                                         */
     3985        5        /*T***********************************************************/
     3986        6
     3987        7        /*D* NAME: VDI$PGLOBAL_COMMANDS
     3988        8            PARAMETERS:
     3989        9                XUG_GETCMD - The %XUG_GETCMD structure we're using.
     3990       10                CODE - Word containing the %XUG_CMD_ code for the global command
     3991       11                    we're about to execute.
     3992       12            INPUT:
     3993       13                VD_COMMAND_WINDOW$ - Points to the VD$FILE_NODE for the
     3994       14                    command window.
     3995       15                VD_$MAX_COMMAND must contain the max height to which the
     3996       16                    user wants the command window expanded.
     3997       17            OUTPUT:
     3998       18                VD_LAST_CWIN_ACTIVITY will be set to %LCA_READ.
     3999       19                We may tell the Presenter to expand the command window.
     4000       20                    to expand the command window.
     4001       21            DESCRIPTION:
     4002       22                This routine is called by XUG$GETCMD just before it executes
     4003       23                a globally-recognized command (eg, DIRECTORY, DO, PRINT, ERASE,
     4004       24                TIME, DATE, HELP, !, ?, ??, END, QUIT, EXIT).
     4005       25                First, we set VD_LAST_CWIN_ACTIVITY to %LCA_READ, to remember
     4006       26                    that we just read from the command window.
     4007       27                    We do this here because GETCMD sometimes doesn't even return
     4008       28                    to us when it sees a global command, it just executes it and
     4009       29                    reads the next command.  This means that our VD_LAST_CWIN_ACTIVITY
     4010       30                    flag won't be updated, and may be wrong.
     4011       31                    Test case for this:  while editing a file, go up to command
     4012       32                    window and say HELP (XXX.X); GETCMD will spit out the error
     4013       33                    message and read for another command without ever returning
     4014       34                    to VDI$PDRIVER, so VD_LAST_CWIN_ACTIVITY is still %LCA_SWITCH,
     4015       35                    so VDI$PGET_COMMAND_RECORD thinks it should erase the command
     4016       36                    window before the command read, so the error message gets
     4017       37                    erased before we can read it.
PL6.E3A0      #006=VDI$PGLOBAL_COMMANDS File=VDI$PARSE.:VDA5TSI                  FRI 07/04/97 11:35 Page:522  
     4018       38
     4019       39                In addition, this routine does other things depending on the command:
     4020       40
     4021       41                HELP, ?, ??
     4022       42                    If the command window isn't expanded to its full height
     4023       43                        already, expand it.
     4024       44                END, QUIT, EXIT
     4025       45                    Call VDI$CEND_GLOBAL so we can clean up before XUG
     4026       46                        M$EXITs on us!
     4027       47        */
     4028       48
     4029       49        VDI$PGLOBAL_COMMANDS: PROC (XUG_GETCMD, CODE) ALTRET;
     4030       50
     4031       51
     4032       52        %INCLUDE VD_MACROS_M;
     4033     2267        %INCLUDE XU_MACRO_C;
     4034     5361        %INCLUDE XU_SUBS_C;
     4035     5453        %INCLUDE CP_6;
     4036     5534
     4037     5535
     4038     5536        %XUG_GETCMD (NAME=XUG_GETCMD, STCLASS=PARAM);
     4039     5874    1   DCL CODE SBIN;
     4040     5875
     4041     5876
     4042     5877    1   DCL VDI$CEND_GLOBAL     ENTRY ALTRET;
     4043     5878    1   DCL VDG$EXPAND_COMMAND_WINDOW ENTRY (1) ALTRET;
     4044     5879
     4045     5880
     4046     5881    1   DCL VD_LAST_CWIN_ACTIVITY SBIN SYMREF;
     4047     5882        %VD$NUMBER (NAME=VD_$MAX_COMMAND, STCLASS=SYMREF);
     4048     5927
     4049     5928
     4050     5929
     4051     5930    1           VD_LAST_CWIN_ACTIVITY = %LCA_READ;
     4052     5931
     4053     5932    2           DO CASE (CODE);
     4054     5933
PL6.E3A0      #006=VDI$PGLOBAL_COMMANDS File=VDI$PARSE.:VDA5TSI                  FRI 07/04/97 11:35 Page:523  
     4055     5934    2            CASE (%XUG_CMD_HELP, %XUG_CMD_Q1, %XUG_CMD_Q2);
     4056     5935                   /* Expand the command window to its max height */
     4057     5936    2              CALL VDG$EXPAND_COMMAND_WINDOW (VD_$MAX_COMMAND.V#)
     4058     5937    2                ALTRET (EXPAND_COMMAND_WINDOW_FAILED);
     4059     5938
     4060     5939    2            CASE (%XUG_CMD_END);
     4061     5940    2              CALL VDI$CEND_GLOBAL
     4062     5941    3              WHENALTRETURN DO; ALTRETURN; END;
     4063     5942
     4064     5943    2            CASE (ELSE);
     4065     5944    2              ;        /* Don't do anything on other commands */
     4066     5945    2            END;
     4067     5946
     4068     5947    1           RETURN;
     4069     5948
     4070     5949
     4071     5950
     4072     5951    1   EXPAND_COMMAND_WINDOW_FAILED:
     4073     5952    1           ALTRETURN;
     4074     5953
     4075     5954    1   END VDI$PGLOBAL_COMMANDS;
     4076     5955        %EOD;

PL6.E3A0      #006=VDI$PGLOBAL_COMMANDS File=VDI$PARSE.:VDA5TSI                  FRI 07/04/97 11:35 Page:524  
--  Include file information  --

   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   XU_SUBS_C.:LIBRARY  is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDI$PGLOBAL_COMMANDS.

   Procedure VDI$PGLOBAL_COMMANDS requires 32 words for executable code.
   Procedure VDI$PGLOBAL_COMMANDS requires 6 words of local(AUTO) storage.

PL6.E3A0      #006=VDI$PGLOBAL_COMMANDS File=VDI$PARSE.:VDA5TSI                  FRI 07/04/97 11:35 Page:525  

 Object Unit name= VDI$PGLOBAL_COMMANDS                       File name= VDI$PARSE.:VDA5TOU
 UTS= JUL 04 '97 11:35:58.24 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    32     40  VDI$PGLOBAL_COMMANDS
    2  RoData even  none     1      1  VDI$PGLOBAL_COMMANDS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        2  VDI$PGLOBAL_COMMANDS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 VDG$EXPAND_COMMAND_WINDOW
 yes     yes           Std       0 VDI$CEND_GLOBAL
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #006=VDI$PGLOBAL_COMMANDS File=VDI$PARSE.:VDA5TSI                  FRI 07/04/97 11:35 Page:526  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VD_LAST_CWIN_ACTIVITY                 VD_$MAX_COMMAND
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #006=VDI$PGLOBAL_COMMANDS File=VDI$PARSE.:VDA5TSI                  FRI 07/04/97 11:35 Page:527  


     3981        1        /*T***********************************************************/
     3982        2        /*T*                                                         */
     3983        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3984        4        /*T*                                                         */
     3985        5        /*T***********************************************************/
     3986        6
     3987        7        /*D* NAME: VDI$PGLOBAL_COMMANDS
     3988        8            PARAMETERS:
     3989        9                XUG_GETCMD - The %XUG_GETCMD structure we're using.
     3990       10                CODE - Word containing the %XUG_CMD_ code for the global command
     3991       11                    we're about to execute.
     3992       12            INPUT:
     3993       13                VD_COMMAND_WINDOW$ - Points to the VD$FILE_NODE for the
     3994       14                    command window.
     3995       15                VD_$MAX_COMMAND must contain the max height to which the
     3996       16                    user wants the command window expanded.
     3997       17            OUTPUT:
     3998       18                VD_LAST_CWIN_ACTIVITY will be set to %LCA_READ.
     3999       19                We may tell the Presenter to expand the command window.
     4000       20                    to expand the command window.
     4001       21            DESCRIPTION:
     4002       22                This routine is called by XUG$GETCMD just before it executes
     4003       23                a globally-recognized command (eg, DIRECTORY, DO, PRINT, ERASE,
     4004       24                TIME, DATE, HELP, !, ?, ??, END, QUIT, EXIT).
     4005       25                First, we set VD_LAST_CWIN_ACTIVITY to %LCA_READ, to remember
     4006       26                    that we just read from the command window.
     4007       27                    We do this here because GETCMD sometimes doesn't even return
     4008       28                    to us when it sees a global command, it just executes it and
     4009       29                    reads the next command.  This means that our VD_LAST_CWIN_ACTIVITY
     4010       30                    flag won't be updated, and may be wrong.
     4011       31                    Test case for this:  while editing a file, go up to command
     4012       32                    window and say HELP (XXX.X); GETCMD will spit out the error
     4013       33                    message and read for another command without ever returning
     4014       34                    to VDI$PDRIVER, so VD_LAST_CWIN_ACTIVITY is still %LCA_SWITCH,
     4015       35                    so VDI$PGET_COMMAND_RECORD thinks it should erase the command
     4016       36                    window before the command read, so the error message gets
PL6.E3A0      #006=VDI$PGLOBAL_COMMANDS File=VDI$PARSE.:VDA5TSI                  FRI 07/04/97 11:35 Page:528  
     4017       37                    erased before we can read it.
     4018       38
     4019       39                In addition, this routine does other things depending on the command:
     4020       40
     4021       41                HELP, ?, ??
     4022       42                    If the command window isn't expanded to its full height
     4023       43                        already, expand it.
     4024       44                END, QUIT, EXIT
     4025       45                    Call VDI$CEND_GLOBAL so we can clean up before XUG
     4026       46                        M$EXITs on us!
     4027       47        */
     4028       48
     4029       49        VDI$PGLOBAL_COMMANDS: PROC (XUG_GETCMD, CODE) ALTRET;

     49  1 000000   000000 700200 xent  VDI$PGLOBAL* TSX0  ! X66_AUTO_2
         1 000001   000006 000002                    ZERO    6,2

     4030       50
     4031       51
     4032       52        %INCLUDE VD_MACROS_M;
     4033     2267        %INCLUDE XU_MACRO_C;
     4034     5361        %INCLUDE XU_SUBS_C;
     4035     5453        %INCLUDE CP_6;
     4036     5534
     4037     5535
     4038     5536        %XUG_GETCMD (NAME=XUG_GETCMD, STCLASS=PARAM);
     4039     5874    1   DCL CODE SBIN;
     4040     5875
     4041     5876
     4042     5877    1   DCL VDI$CEND_GLOBAL     ENTRY ALTRET;
     4043     5878    1   DCL VDG$EXPAND_COMMAND_WINDOW ENTRY (1) ALTRET;
     4044     5879
     4045     5880
     4046     5881    1   DCL VD_LAST_CWIN_ACTIVITY SBIN SYMREF;
     4047     5882        %VD$NUMBER (NAME=VD_$MAX_COMMAND, STCLASS=SYMREF);
     4048     5927
     4049     5928
PL6.E3A0      #006=VDI$PGLOBAL_COMMANDS File=VDI$PARSE.:VDA5TSI                  FRI 07/04/97 11:35 Page:529  
     4050     5929
     4051     5930    1           VD_LAST_CWIN_ACTIVITY = %LCA_READ;

   5930  1 000002   000001 235007                    LDA     1,DL
         1 000003   000000 755000 xsym               STA     VD_LAST_CWIN_ACTIVITY

     4052     5931
     4053     5932    2           DO CASE (CODE);

   5932  1 000004   200004 470500                    LDP0    @CODE,,AUTO
         1 000005   000000 235100                    LDA     0,,PR0
         1 000006   000012 115007                    CMPA    10,DL
         1 000007   000011 602005 1                  TNC     s:5932+5,AL
         1 000010   000036 710000 1                  TRA     s:5947
         1 000011   000036 710000 1                  TRA     s:5947
         1 000012   000036 710000 1                  TRA     s:5947
         1 000013   000036 710000 1                  TRA     s:5947
         1 000014   000030 710000 1                  TRA     s:5940
         1 000015   000036 710000 1                  TRA     s:5947
         1 000016   000023 710000 1                  TRA     s:5936
         1 000017   000036 710000 1                  TRA     s:5947
         1 000020   000036 710000 1                  TRA     s:5947
         1 000021   000023 710000 1                  TRA     s:5936
         1 000022   000023 710000 1                  TRA     s:5936

     4054     5933
     4055     5934    2            CASE (%XUG_CMD_HELP, %XUG_CMD_Q1, %XUG_CMD_Q2);

     4056     5935                   /* Expand the command window to its max height */
     4057     5936    2              CALL VDG$EXPAND_COMMAND_WINDOW (VD_$MAX_COMMAND.V#)

   5936  1 000023   000000 630400 2                  EPPR0   0
         1 000024   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000025   000000 701000 xent               TSX1    VDG$EXPAND_COMMAND_WINDOW
         1 000026   000037 702000 1                  TSX2    EXPAND_COMMAND_WINDOW_FAILED
         1 000027   000036 710000 1                  TRA     s:5947

PL6.E3A0      #006=VDI$PGLOBAL_COMMANDS File=VDI$PARSE.:VDA5TSI                  FRI 07/04/97 11:35 Page:530  
     4058     5937    2                ALTRET (EXPAND_COMMAND_WINDOW_FAILED);
     4059     5938
     4060     5939    2            CASE (%XUG_CMD_END);

     4061     5940    2              CALL VDI$CEND_GLOBAL

   5940  1 000030   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000031   000000 701000 xent               TSX1    VDI$CEND_GLOBAL
         1 000032   000034 702000 1                  TSX2    s:5941
         1 000033   000035 710000 1                  TRA     s:5941+1

     4062     5941    3              WHENALTRETURN DO; ALTRETURN; END;

   5941  1 000034   000000 702200 xent               TSX2  ! X66_AALT
         1 000035   000036 710000 1                  TRA     s:5947

     4063     5942
     4064     5943    2            CASE (ELSE);

     4065     5944    2              ;        /* Don't do anything on other commands */
     4066     5945    2            END;

     4067     5946
     4068     5947    1           RETURN;

   5947  1 000036   000000 702200 xent               TSX2  ! X66_ARET

     4069     5948
     4070     5949
     4071     5950
     4072     5951    1   EXPAND_COMMAND_WINDOW_FAILED:
     4073     5952    1           ALTRETURN;

   5952  1 000037   000000 702200 xent  EXPAND_COMM* TSX2  ! X66_AALT
     4074     5953
     4075     5954    1   END VDI$PGLOBAL_COMMANDS;
     4076     5955        %EOD;
PL6.E3A0      #006=VDI$PGLOBAL_COMMANDS File=VDI$PARSE.:VDA5TSI                  FRI 07/04/97 11:35 Page:531  

PL6.E3A0      #006=VDI$PGLOBAL_COMMANDS File=VDI$PARSE.:VDA5TSI                  FRI 07/04/97 11:35 Page:532  
--  Include file information  --

   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   XU_SUBS_C.:LIBRARY  is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDI$PGLOBAL_COMMANDS.
PL6.E3A0      #006=VDI$PGLOBAL_COMMANDS File=VDI$PARSE.:VDA5TSI                  FRI 07/04/97 11:35 Page:533  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @CODE                      3-0-0/w PTR         r     1 @XUG_GETCMD
    *0-0-0/w SBIN        r     1 CODE                      *0-0-0/d STRC(1512)  r     1 XUG_GETCMD

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 VD_$MAX_COMMAND
     0-0-0/w SBIN        r     1 VD_LAST_CWIN_ACTIVITY


   Procedure VDI$PGLOBAL_COMMANDS requires 32 words for executable code.
   Procedure VDI$PGLOBAL_COMMANDS requires 6 words of local(AUTO) storage.
PL6.E3A0      #006=VDI$PGLOBAL_COMMANDS File=VDI$PARSE.:VDA5TSI                  FRI 07/04/97 11:35 Page:534  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=VDI$PGLOBAL_COMMANDS File=VDI$PARSE.:VDA5TSI                  FRI 07/04/97 11:35 Page:535  
          MINI XREF LISTING

CODE
      5874**DCL        49--PROC     5932>>DOCASE
EXPAND_COMMAND_WINDOW_FAILED
      5952**LABEL    5936--CALLALT
VDG$EXPAND_COMMAND_WINDOW
      5878**DCL-ENT  5936--CALL
VDI$CEND_GLOBAL
      5877**DCL-ENT  5940--CALL
VD_$MAX_COMMAND.V#
      5924**DCL      5936<>CALL
VD_LAST_CWIN_ACTIVITY
      5881**DCL      5930<<ASSIGN
XUG_GETCMD
      5549**DCL        49--PROC
XUG_GETCMD.OUT$
      5554**DCL      5560--REDEF

PL6.E3A0      #007=VDI$PREMOVE_EDIT_BLOCK File=VDI$PARSE.:VDA5TSI                FRI 07/04/97 11:36 Page:536  
     4077        1        /*T***********************************************************/
     4078        2        /*T*                                                         */
     4079        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     4080        4        /*T*                                                         */
     4081        5        /*T***********************************************************/
     4082        6
     4083        7        /*D* NAME: VDI$PREMOVE_EDIT_BLOCK
     4084        8            PARAMETERS:
     4085        9                None.
     4086       10            INPUT:
     4087       11                VD_CURRENT_WINDOW$ - Ptr to VD$FILE_NODE at level 1 of the
     4088       12                    Windows file, of the current editing window.  Must
     4089       13                    not be NIL.  The VD$WINDOW_SPEC attached to this file
     4090       14                    node will have its EditBlock removed.
     4091       15            OUTPUT:
     4092       16                In the VD$WINDOW_SPEC pointed-to indirectly thru VD_CURRENT_WINDOW$:
     4093       17                    .OPERAND.STREAM$ will be closed.  (The VD$STREAM will not
     4094       18                        be freed, just closed).
     4095       19                    .OPERAND.EDIT_BLOCK$ will contain NIL; the BlockDescriptor
     4096       20                        it pointed to (if any) will have been freed.
     4097       21                    .OPERAND.EVAL$ will contain NIL; the stack of VD$EVALs
     4098       22                        it pointed to (if any) will have been freed.
     4099       23                The Presenter will have been told to erase the window.
     4100       24            DESCRIPTION:
     4101       25                Close the current editing window's stream.
     4102       26                If the window has an EditBlock and/or an evaluation stack,
     4103       27                    free them.
     4104       28                Tell the Presenter to erase the window.
     4105       29        */
     4106       30
     4107       31        VDI$PREMOVE_EDIT_BLOCK: PROC ALTRET;
     4108       32
     4109       33
     4110       34        %INCLUDE VD_MACROS_M;
     4111     2249
     4112     2250
     4113     2251    1   DCL VDA$FCLOSE          ENTRY (1) ALTRET;
PL6.E3A0      #007=VDI$PREMOVE_EDIT_BLOCK File=VDI$PARSE.:VDA5TSI                FRI 07/04/97 11:36 Page:537  
     4114     2252    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     4115     2253    1   DCL VDP$WERASE          ENTRY (1) ALTRET;
     4116     2254
     4117     2255
     4118     2256    1   DCL VD_CURRENT_WINDOW$ PTR SYMREF;
     4119     2257
     4120     2258
     4121     2259    1   DCL CURR_WINDOW$ PTR;
     4122     2260    1   DCL CURR_EVAL$ PTR;
     4123     2261    1   DCL NEXT_EVAL$ PTR;
     4124     2262
     4125     2263
     4126     2264        %VD$WINDOW_SPEC (NAME=CURR$WINDOW, STCLASS="BASED(CURR_WINDOW$)");
     4127     2330        %VD$EVAL (NAME=CURR$EVAL, STCLASS="BASED(CURR_EVAL$)");
     4128     2575        %VD$FILE_NODE (NAME=CURR$NODE, STCLASS="BASED(VD_CURRENT_WINDOW$)");
     4129     2668        %VD$STREAM;
     4130     2774        %VD$BLOCK_DESC;
     4131     2921
     4132     2922
     4133     2923
     4134     2924    1           CURR_WINDOW$ = CURR$NODE.DESC.SPEC.V$;
     4135     2925    1           CALL VDA$FCLOSE (CURR$WINDOW.OPERAND.STREAM$->VD$STREAM)
     4136     2926    1             ALTRET (FCLOSE_FAILED);
     4137     2927
     4138     2928    2           IF CURR$WINDOW.OPERAND.EDIT_BLOCK$ ~= ADDR(NIL) THEN DO;
     4139     2929    2              CALL VDG$OFREE (CURR$WINDOW.OPERAND.EDIT_BLOCK$ ->
     4140     2930    2                VD$BLOCK_DESC)
     4141     2931    2                ALTRET (OFREE_FAILED);
     4142     2932    2              CURR$WINDOW.OPERAND.EDIT_BLOCK$ = ADDR(NIL);
     4143     2933    2              END;
     4144     2934
     4145     2935    1           CURR_EVAL$ = CURR$WINDOW.OPERAND.EVAL$;
     4146     2936    1           CURR$WINDOW.OPERAND.EVAL$ = ADDR(NIL);
     4147     2937    2           DO WHILE CURR_EVAL$ ~= ADDR(NIL);
     4148     2938    2              NEXT_EVAL$ = CURR$EVAL.BLINK$;
     4149     2939    2              CALL VDG$OFREE (CURR$EVAL)
     4150     2940    2                ALTRET (OFREE_FAILED);
PL6.E3A0      #007=VDI$PREMOVE_EDIT_BLOCK File=VDI$PARSE.:VDA5TSI                FRI 07/04/97 11:36 Page:538  
     4151     2941    2              CURR_EVAL$ = NEXT_EVAL$;
     4152     2942    2              END;
     4153     2943
     4154     2944    1           CALL VDP$WERASE (CURR$WINDOW)
     4155     2945    1             ALTRET (WERASE_FAILED);
     4156     2946
     4157     2947    1           RETURN;
     4158     2948
     4159     2949
     4160     2950
     4161     2951    1   FCLOSE_FAILED: ;
     4162     2952    1   OFREE_FAILED: ;
     4163     2953    1   WERASE_FAILED: ;
     4164     2954    1           ALTRETURN;
     4165     2955
     4166     2956    1   END VDI$PREMOVE_EDIT_BLOCK;

PL6.E3A0      #007=VDI$PREMOVE_EDIT_BLOCK File=VDI$PARSE.:VDA5TSI                FRI 07/04/97 11:36 Page:539  
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDI$PREMOVE_EDIT_BLOCK.

   Procedure VDI$PREMOVE_EDIT_BLOCK requires 48 words for executable code.
   Procedure VDI$PREMOVE_EDIT_BLOCK requires 8 words of local(AUTO) storage.

    No errors detected in file VDI$PARSE.:VDA5TSI    .

PL6.E3A0      #007=VDI$PREMOVE_EDIT_BLOCK File=VDI$PARSE.:VDA5TSI                FRI 07/04/97 11:36 Page:540  

 Object Unit name= VDI$PREMOVE_EDIT_BLOCK                     File name= VDI$PARSE.:VDA5TOU
 UTS= JUL 04 '97 11:36:07.20 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    48     60  VDI$PREMOVE_EDIT_BLOCK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        0  VDI$PREMOVE_EDIT_BLOCK

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 VDA$FCLOSE
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       1 VDP$WERASE
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_CURRENT_WINDOW$                    B_VECTNIL
PL6.E3A0      #007=VDI$PREMOVE_EDIT_BLOCK File=VDI$PARSE.:VDA5TSI                FRI 07/04/97 11:36 Page:541  


     4077        1        /*T***********************************************************/
     4078        2        /*T*                                                         */
     4079        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     4080        4        /*T*                                                         */
     4081        5        /*T***********************************************************/
     4082        6
     4083        7        /*D* NAME: VDI$PREMOVE_EDIT_BLOCK
     4084        8            PARAMETERS:
     4085        9                None.
     4086       10            INPUT:
     4087       11                VD_CURRENT_WINDOW$ - Ptr to VD$FILE_NODE at level 1 of the
     4088       12                    Windows file, of the current editing window.  Must
     4089       13                    not be NIL.  The VD$WINDOW_SPEC attached to this file
     4090       14                    node will have its EditBlock removed.
     4091       15            OUTPUT:
     4092       16                In the VD$WINDOW_SPEC pointed-to indirectly thru VD_CURRENT_WINDOW$:
     4093       17                    .OPERAND.STREAM$ will be closed.  (The VD$STREAM will not
     4094       18                        be freed, just closed).
     4095       19                    .OPERAND.EDIT_BLOCK$ will contain NIL; the BlockDescriptor
     4096       20                        it pointed to (if any) will have been freed.
     4097       21                    .OPERAND.EVAL$ will contain NIL; the stack of VD$EVALs
     4098       22                        it pointed to (if any) will have been freed.
     4099       23                The Presenter will have been told to erase the window.
     4100       24            DESCRIPTION:
     4101       25                Close the current editing window's stream.
     4102       26                If the window has an EditBlock and/or an evaluation stack,
     4103       27                    free them.
     4104       28                Tell the Presenter to erase the window.
     4105       29        */
     4106       30
     4107       31        VDI$PREMOVE_EDIT_BLOCK: PROC ALTRET;

     31  0 000000   000000 700200 xent  VDI$PREMOVE* TSX0  ! X66_AUTO_0
         0 000001   000010 000000                    ZERO    8,0

     4108       32
PL6.E3A0      #007=VDI$PREMOVE_EDIT_BLOCK File=VDI$PARSE.:VDA5TSI                FRI 07/04/97 11:36 Page:542  
     4109       33
     4110       34        %INCLUDE VD_MACROS_M;
     4111     2249
     4112     2250
     4113     2251    1   DCL VDA$FCLOSE          ENTRY (1) ALTRET;
     4114     2252    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     4115     2253    1   DCL VDP$WERASE          ENTRY (1) ALTRET;
     4116     2254
     4117     2255
     4118     2256    1   DCL VD_CURRENT_WINDOW$ PTR SYMREF;
     4119     2257
     4120     2258
     4121     2259    1   DCL CURR_WINDOW$ PTR;
     4122     2260    1   DCL CURR_EVAL$ PTR;
     4123     2261    1   DCL NEXT_EVAL$ PTR;
     4124     2262
     4125     2263
     4126     2264        %VD$WINDOW_SPEC (NAME=CURR$WINDOW, STCLASS="BASED(CURR_WINDOW$)");
     4127     2330        %VD$EVAL (NAME=CURR$EVAL, STCLASS="BASED(CURR_EVAL$)");
     4128     2575        %VD$FILE_NODE (NAME=CURR$NODE, STCLASS="BASED(VD_CURRENT_WINDOW$)");
     4129     2668        %VD$STREAM;
     4130     2774        %VD$BLOCK_DESC;
     4131     2921
     4132     2922
     4133     2923
     4134     2924    1           CURR_WINDOW$ = CURR$NODE.DESC.SPEC.V$;

   2924  0 000002   000000 470400 xsym               LDP0    VD_CURRENT_WINDOW$
         0 000003   000007 236100                    LDQ     7,,PR0
         0 000004   200003 756100                    STQ     CURR_WINDOW$,,AUTO

     4135     2925    1           CALL VDA$FCLOSE (CURR$WINDOW.OPERAND.STREAM$->VD$STREAM)

   2925  0 000005   200003 471500                    LDP1    CURR_WINDOW$,,AUTO
         0 000006   100010 473500                    LDP3    8,,PR1
         0 000007   200006 453500                    STP3    NEXT_EVAL$+1,,AUTO
         0 000010   200006 630500                    EPPR0   NEXT_EVAL$+1,,AUTO
PL6.E3A0      #007=VDI$PREMOVE_EDIT_BLOCK File=VDI$PARSE.:VDA5TSI                FRI 07/04/97 11:36 Page:543  
         0 000011   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000012   000000 701000 xent               TSX1    VDA$FCLOSE
         0 000013   000057 702000 0                  TSX2    FCLOSE_FAILED

     4136     2926    1             ALTRET (FCLOSE_FAILED);
     4137     2927
     4138     2928    2           IF CURR$WINDOW.OPERAND.EDIT_BLOCK$ ~= ADDR(NIL) THEN DO;

   2928  0 000014   200003 470500                    LDP0    CURR_WINDOW$,,AUTO
         0 000015   000012 236100                    LDQ     10,,PR0
         0 000016   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000017   000031 600000 0                  TZE     s:2935

     4139     2929    2              CALL VDG$OFREE (CURR$WINDOW.OPERAND.EDIT_BLOCK$ ->

   2929  0 000020   000012 471500                    LDP1    10,,PR0
         0 000021   200006 451500                    STP1    NEXT_EVAL$+1,,AUTO
         0 000022   200006 630500                    EPPR0   NEXT_EVAL$+1,,AUTO
         0 000023   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000024   000000 701000 xent               TSX1    VDG$OFREE
         0 000025   000057 702000 0                  TSX2    FCLOSE_FAILED

     4140     2930    2                VD$BLOCK_DESC)
     4141     2931    2                ALTRET (OFREE_FAILED);
     4142     2932    2              CURR$WINDOW.OPERAND.EDIT_BLOCK$ = ADDR(NIL);

   2932  0 000026   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000027   200003 470500                    LDP0    CURR_WINDOW$,,AUTO
         0 000030   000012 756100                    STQ     10,,PR0

     4143     2933    2              END;

     4144     2934
     4145     2935    1           CURR_EVAL$ = CURR$WINDOW.OPERAND.EVAL$;

   2935  0 000031   000013 236100                    LDQ     11,,PR0
         0 000032   200004 756100                    STQ     CURR_EVAL$,,AUTO
PL6.E3A0      #007=VDI$PREMOVE_EDIT_BLOCK File=VDI$PARSE.:VDA5TSI                FRI 07/04/97 11:36 Page:544  

     4146     2936    1           CURR$WINDOW.OPERAND.EVAL$ = ADDR(NIL);

   2936  0 000033   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000034   000013 756100                    STQ     11,,PR0

     4147     2937    2           DO WHILE CURR_EVAL$ ~= ADDR(NIL);

   2937  0 000035   000047 710000 0                  TRA     s:2942

     4148     2938    2              NEXT_EVAL$ = CURR$EVAL.BLINK$;

   2938  0 000036   200004 470500                    LDP0    CURR_EVAL$,,AUTO
         0 000037   000001 236100                    LDQ     1,,PR0
         0 000040   200005 756100                    STQ     NEXT_EVAL$,,AUTO

     4149     2939    2              CALL VDG$OFREE (CURR$EVAL)

   2939  0 000041   200004 630500                    EPPR0   CURR_EVAL$,,AUTO
         0 000042   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000043   000000 701000 xent               TSX1    VDG$OFREE
         0 000044   000057 702000 0                  TSX2    FCLOSE_FAILED

     4150     2940    2                ALTRET (OFREE_FAILED);
     4151     2941    2              CURR_EVAL$ = NEXT_EVAL$;

   2941  0 000045   200005 236100                    LDQ     NEXT_EVAL$,,AUTO
         0 000046   200004 756100                    STQ     CURR_EVAL$,,AUTO

     4152     2942    2              END;

   2942  0 000047   200004 236100                    LDQ     CURR_EVAL$,,AUTO
         0 000050   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000051   000036 601000 0                  TNZ     s:2938

     4153     2943
     4154     2944    1           CALL VDP$WERASE (CURR$WINDOW)
PL6.E3A0      #007=VDI$PREMOVE_EDIT_BLOCK File=VDI$PARSE.:VDA5TSI                FRI 07/04/97 11:36 Page:545  

   2944  0 000052   200003 630500                    EPPR0   CURR_WINDOW$,,AUTO
         0 000053   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000054   000000 701000 xent               TSX1    VDP$WERASE
         0 000055   000057 702000 0                  TSX2    FCLOSE_FAILED

     4155     2945    1             ALTRET (WERASE_FAILED);
     4156     2946
     4157     2947    1           RETURN;

   2947  0 000056   000000 702200 xent               TSX2  ! X66_ARET

   2938  0 000057                       FCLOSE_FAIL* null
   2938  0 000057                       OFREE_FAILED null
   2938  0 000057                       WERASE_FAIL* null
     4158     2948
     4159     2949
     4160     2950
     4161     2951    1   FCLOSE_FAILED: ;
     4162     2952    1   OFREE_FAILED: ;
     4163     2953    1   WERASE_FAILED: ;
     4164     2954    1           ALTRETURN;

   2954  0 000057   000000 702200 xent               TSX2  ! X66_AALT
     4165     2955
     4166     2956    1   END VDI$PREMOVE_EDIT_BLOCK;

PL6.E3A0      #007=VDI$PREMOVE_EDIT_BLOCK File=VDI$PARSE.:VDA5TSI                FRI 07/04/97 11:36 Page:546  
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDI$PREMOVE_EDIT_BLOCK.
PL6.E3A0      #007=VDI$PREMOVE_EDIT_BLOCK File=VDI$PARSE.:VDA5TSI                FRI 07/04/97 11:36 Page:547  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 CURR_EVAL$                 3-0-0/w PTR         r     1 CURR_WINDOW$
     5-0-0/w PTR         r     1 NEXT_EVAL$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 VD_CURRENT_WINDOW$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2124)  r     1 CURR$EVAL                  0-0-0/w STRC(468)   r     1 CURR$NODE
     0-0-0/w STRC(900)   r     1 CURR$WINDOW                0-0-0/w STRC(936)   r     1 VD$BLOCK_DESC
     0-0-0/w STRC(864)   r     1 VD$STREAM


   Procedure VDI$PREMOVE_EDIT_BLOCK requires 48 words for executable code.
   Procedure VDI$PREMOVE_EDIT_BLOCK requires 8 words of local(AUTO) storage.

    No errors detected in file VDI$PARSE.:VDA5TSI    .
PL6.E3A0      #007=VDI$PREMOVE_EDIT_BLOCK File=VDI$PARSE.:VDA5TSI                FRI 07/04/97 11:36 Page:548  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=VDI$PREMOVE_EDIT_BLOCK File=VDI$PARSE.:VDA5TSI                FRI 07/04/97 11:36 Page:549  
          MINI XREF LISTING

CURR$EVAL
      2338**DCL      2939<>CALL
CURR$EVAL.BLINK$
      2364**DCL      2938>>ASSIGN
CURR$NODE.DESC.SPEC.V$
      2662**DCL      2924>>ASSIGN
CURR$WINDOW
      2272**DCL      2944<>CALL
CURR$WINDOW.OPERAND.EDIT_BLOCK$
      2313**DCL      2928>>IF       2929>>CALL     2932<<ASSIGN
CURR$WINDOW.OPERAND.EVAL$
      2313**DCL      2935>>ASSIGN   2936<<ASSIGN
CURR$WINDOW.OPERAND.STREAM$
      2313**DCL      2925>>CALL
CURR_EVAL$
      2260**DCL      2338--IMP-PTR  2935<<ASSIGN   2937>>DOWHILE  2938>>ASSIGN   2939>>CALL     2941<<ASSIGN
CURR_WINDOW$
      2259**DCL      2272--IMP-PTR  2924<<ASSIGN   2925>>CALL     2928>>IF       2929>>CALL     2932>>ASSIGN
      2935>>ASSIGN   2936>>ASSIGN   2944>>CALL
FCLOSE_FAILED
      2938**LABEL    2925--CALLALT
NEXT_EVAL$
      2261**DCL      2938<<ASSIGN   2941>>ASSIGN
OFREE_FAILED
      2938**LABEL    2929--CALLALT  2939--CALLALT
VD$BLOCK_DESC
      2782**DCL      2929<>CALL
VD$STREAM
      2676**DCL      2925<>CALL
VDA$FCLOSE
      2251**DCL-ENT  2925--CALL
VDG$OFREE
PL6.E3A0      #007=VDI$PREMOVE_EDIT_BLOCK File=VDI$PARSE.:VDA5TSI                FRI 07/04/97 11:36 Page:550  
      2252**DCL-ENT  2929--CALL     2939--CALL
VDP$WERASE
      2253**DCL-ENT  2944--CALL
VD_CURRENT_WINDOW$
      2256**DCL      2583--IMP-PTR  2924>>ASSIGN
WERASE_FAILED
      2938**LABEL    2944--CALLALT
