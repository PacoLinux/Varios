/*M*  fcg_defines:h -- include file that has all #defines for FCG */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/*F*    NAME: FCG_Cc3    (fcg_defines:h)
        PURPOSE: central location for constants (#defines)
 
        AUTHOR:  Jordan Boucher, LADC
          DATE:  October 16, 1989
       UPDATES:
*/
 
/*
======================================================================
*/
 
 
/* Useful shit */
#define  NO       0
#define  YES      1
#define  TRUE     1
#define  FALSE    0
#define  OK       0
#define  QUIT     3
#define  ERROR    4
#define  SYNTAX   2
#define  ILLEGAL  5
 
#define  STRDEF(s)  # s
#define  MAKESTR(d)  STRDEF( d)
 
/* HELP constants */
#define  H_MAIN        0
#define  H_CMD_LINE    1
 
/* MISC CONSTANTS */
#define  STR_LENGTH    40
#define  NUM_CODES     37
#define  NUM_MAJOR     26
#define  NUM_MINOR     36
#define  NUM_MODULE    36
#define  NONE          -1
#define  NOT_FOUND     -1
#define  LEVEL_1        1
#define  LEVEL_2        2
#define  LEVEL_3        3
#define  UNDER_SCORE  '_'
#define  DASH         '-'
#define  BACK_SLASH  '\\'
#define  BLANK        ' '
#define  COMMENT      '#'
#define  NO_ACCOUNT     "$NOACCT$"
#define  BOGUS          "$BOGUS$"
#define  ALL_OPTS       0
#define  FILE_NAME      1
#define  CMD_LINE       1
#define  INTERACTIVE    2
#define  OPTIONS        11
#define  BUILD_DOCUMENT 99
#define  FORMAT_CAP    1
#define  FORMAT_TEXT   2
#define  FORMAT_ASCII  3
 
/* READABILITY CODES */
#define  FCG_A    0
#define  FCG_Z   25
#define  FCG_0   30
#define  FCG_9   39
#define  FCG_MAX 39
#define  FCG_ALL 40
 
/* ERROR MESSAGE CODES */
#define  CONVERT_1        1
#define  DEC_MAJOR        2
#define  OPT_HANDLER      3
#define  TABLE_SRCH       4
#define  FILE_SYNTAX      5
#define  IN_MSG1          6
#define  IN_MSG2          7
#define  CMD_OPT          8
#define  ILL_CHAR         9
#define  FILE_DNE        10
#define  FCG_DIGIT       11
#define  AF_GEN_1        12
#define  AF_GEN_2        13
#define  AF_GEN_3        14
#define  AF_FILE_ERR     15
#define  AF_NOT_CONSEC   16
 
 
/*
======================================================================
*/
 
/*D*  fcg_structs:h -- include file that has all structs for FCG
        NAME: FCG_Cc3    (fcg_structs:h)
        PURPOSE: central location for structs and typedefs
*/
 
 
/*  The following structure is to hold the FCG messages for any given
    combination of letters in an FCG.  It will have an array of head
    pointers, 0-25 for A-Z respectively, called major_head[26].  This
    level node will contain the major FCG message, and a pointer to
    the next level, if it exists.  The next level, minor FCG, will have
    a message for that level (XY = message), a pointer to the next char
    on the same level, and a pointer to the next level (module level).
    The module level has a message (XYZ = message), and a pointer to the
    next character on the same level, there will be no next level here.
*/
struct linked_list  {
   char               fcg;            /* functional code group      */
   char               *message;       /* message from data file     */
   struct linked_list *next_level;    /* ptr to next fcg level      */
   struct linked_list *next_char;     /* ptr to next node on same level */
};
 
typedef  struct linked_list  NODE;    /* short hand type for reading*/
typedef  NODE                *LINK;   /* LINK is a ptr to a NODE    */
 
/*
----------------------------------------------------------------------
*/
 
 
/* The following structure is similar to the one above, but it more linear
   in nature, while the one above is more of a bushy tree.
   It will have an array, 0-25 for A-Z respectively also.  Each entry is
   a header node for the backwards linking feature of FCG.  All processor
   links (PLINKs) are keyed by the first letter, and put into the linked
   list accordingly.  The array is called proc_head[26], and each node
   will contain a name (the processor backwards link), the fcg, and next
   & prev pointers.
*/
struct processor_list  {
   char                  *name;       /* processor name or area of code*/
   char                  *account;    /* account that source resides*/
   char                  fcg[4];      /* fcg of this processor or area*/
   struct processor_list *next;       /* ptr to next record in list */
   struct processor_list *prev;       /* ptr to previous record     */
};
 
typedef  struct processor_list  PROC; /* short hand type for reading*/
typedef  PROC                *PLINK;  /*PLINK is a ptr to a PROC */
 
/*
----------------------------------------------------------------------
*/
 
 
/* The following structure is ...
*/
struct text_list  {
   char                  fcg[4];      /* fcg of this text or area*/
   char                  *text;       /* text message to be saved */
   struct text_list      *next;       /* ptr to next record     */
};
 
typedef  struct text_list  TEXT; /* short hand type for reading*/
typedef  TEXT                *TLINK;  /*PLINK is a ptr to a PROC */
 
 
/*
======================================================================
*/
 
/*D*  fcg_prototypes:h -- include file of functional prototypes of FCG
        NAME: FCG_Cc3    (fcg_prototypes:h)
        PURPOSE: central location for functional prototypes
*/
 
 
/*  The reason for functional prototyes is pretty staight forward...
    It provides better type checking for functions, and the parameters
    that are passed to them.
*/
 
/* FUNCTIONAL PROTOTYPES */
 
/* FCG_SIc1 functional prototypes */
int  pa1_GetFcg( int, char *);
int  pa1_OptionHandler( char [], int, int);
void ut1_DecodeMajorArea( int);
void ut1_DecodeMinorArea( int, int);
void ut1_DecodeModuleId( int, int, int);
void ou1_OutputMajor( int, char *);
void ou1_OutputMinor( char, char, char *);
void ou1_OutputModule( char, char, char, char *);
int  ut1_LegalFcg( int);
int  ut1_AssignCodes( char, int);
int  ut1_ConvertCharToCode( char);
void ou1_HelpEmOut( int);
 
/* FCG_SIc2 functional prototypes */
int  dr2_StartUp ( int, char *[]);
int  fm2_GetMessagesFromFile (char *);
int  tr2_InsertFcgMessage( char *, char *, int);
LINK tr2_InsertNode( LINK, char, char *);
int  tr2_InsertProcName( char[], char *, char *, int);
LINK tr2_NewFcgNode( );
PLINK tr2_NewProcNode( );
int  pa2_CmdOptionHandler( int, char *[], int *, int *);
int  pa2_FcgFromCmdLine (char *);
int  ut2_DecodeProcToFcg (char *, int *);
int  ut2_DecodePartialProc( PLINK, int *, char *);
void tr2_AddCmdToList (int *, PLINK);
char *ut2_FixFcg (char *);
char *ut2_CheckLPorLZ (char *);
void dr2_XaccountOption ();
 
/* FCG_SIc3 functional prototypes */
void dr3_BuildAfDocument ( );
int  af3_DoSection1_CAP ( );
int  af3_DoSection2_CAP ( );
int  af3_DoSection3_CAP ( );
int  af3_DoSection1_ASCII ( );
int  af3_DoSection2_ASCII ( );
int  af3_DoSection3_ASCII ( );
int  af3_DoSection1_TEXT ( );
int  af3_DoSection2_TEXT ( );
int  af3_DoSection3_TEXT ( );
void dr3_ReviseAfDocument ();
void ut3_CheckEmbeddedText (char *);
void ut3_SaveText (char *);
void ut3_IncrementDocumentVersion ();
TLINK tr3_NewTextNode ();
int   tr3_InsertTextNode (char *, char *);
int   tr3_FreeAllTextNodes ();
int  ut3_PrintDocument ( );
 
/* EXTERNAL DATA */
extern NODE major_head[];
extern PROC proc_head[];
extern char major_functional_area[][];
extern int  argc;
extern char message_file[];
extern char *msg_file_namep;
extern char document_file[];
extern char input_file[];
extern char *docum_file_namep;
extern char *input_file_namep;
extern int  major_area, minor_area, module_id;
extern char *fcg_commands[];
extern char *proc_commands[];
extern int  flag_text_docum;
extern int  flag_ascii_docum;
extern int  flag_cap_docum;
extern int  verbose;
extern int  AppendToDocumFile;
extern int  InputFileExists;
extern FILE *dbp;
extern FILE *afp;
extern FILE *inp;
extern TEXT embedded_text_list[];
extern int  embedded_count;
extern char StartCommand[];
extern char EndCommand[];
extern int  OutputToLP;
extern int  OutputToLZ;
extern int  DefaultAfName;
