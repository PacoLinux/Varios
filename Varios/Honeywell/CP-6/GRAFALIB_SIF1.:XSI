      SUBROUTINE SCALE(ADATA,AXISL,NVAL,INC,STEP)
C*T***********************************************************  
C*T*                                                         *  
C*T* Copyright (c) Bull HN Information Systems Inc., 1989    *  
C*T*                                                         *  
C*T***********************************************************  
      SAVE
C*X* JR,IND=3,FMT=1000,STMT=100
      DIMENSION ADATA(1),ADELTA(7)
      DATA ADELTA/1.0,2.0,2.5,4.0,5.0,10.0,20.0/
      RV=0.01
      K=IABS(INC)
      N=NVAL*K
      DMIN=ADATA(1)
      DMAX=DMIN
  100 DO 110 I=1,N,K
         IF (DMAX.LT.ADATA(I)) DMAX=ADATA(I)
         IF (DMIN.GT.ADATA(I)) DMIN=ADATA(I)
  110 CONTINUE 
      VAL1=DMIN
      IF (DMIN) 120,130,130
  120 RV=-.99
  130 DV=(DMAX-VAL1)/(AXISL/STEP)
      IF (DV) 230,230,140
  140 ILOG=ALOG10(DV)+1000
      FAC=10.0**(ILOG-1000)
      DV=DV/FAC-0.01
      DO 150 I=1,7
         IDV=I
         IF (ADELTA(IDV).GE.DV)GOTO 160 
  150 CONTINUE 
  160 DV=ADELTA(IDV)*FAC
      VAL1=DV*INT(DMIN/DV+RV)
      ENDPT=VAL1+((AXISL/STEP)+0.01)*DV
      IF (ENDPT.GE.DMAX)GOTO 170 
      VAL1=FAC*INT(DMIN/FAC+RV)
      ENDPT=VAL1+((AXISL/STEP)+0.001)*DV
      IF (ENDPT.GE.DMAX)GOTO 170 
      IDV=IDV+1
      GOTO 160 
  170 IF (DMIN*VAL1) 180,180,190
  180 VAL1=0.0
  190 IF (INC) 200,200,210
  200 VAL1=VAL1+AINT((AXISL/STEP)+0.05)*DV
      DV=-DV
  210 N=N+1
      ADATA(N)=VAL1
      N=N+K
C     DV=DV*STEP
      ADATA(N)=DV
  220 RETURN
  230 DV=2.0*VAL1
      DV=ABS(DV/AXISL)+1.0
      GOTO 210 
      END 
      SUBROUTINE AXIS (XLOC,YLOC,TITLE,KOUNTC,AXISL,ANGL,ITICFLG,START,
     1                   SCALE,TICDIS,IFONT,INTEGERS,TMAXLGL)
C
C         Subroutine AXIS is basically CALCOMP AXIS routine, with
C         interesting CP-6 additions.  Arguments are:
C         XLOC - world coordinates of axis origin
C         YLOC
C         TITLE - character string of title to be centered under axis
C         KOUNTC - character count of axis title
C         AXISL - length of axis in world coordinates
C         ANGL - angle in degrees at which to lay out axis
C         ITICFLG - integer flag signifying which side of axis line to
C              lay tic marks -1 = counterclockwise side
C                             1 = clockwise side
C         START - minimum value for axis (via SCALE routine)
C         SCALE - number of units per tic mark (via SCALE routine)
C         TICDIS - distance in world coordinates between tics
C         IFONT - font to use for annotation
C         INTEGERS - if 1, means to try to make annotations integers
C              (i.e. clip '.00' from tic annotation if all tics have
C               '.00' on them)
C         TMAXLGL - maximum "range" between points, default is 100, but
C              1000 may be specified to "force" 0-999 to print without
C              exponentiation (hopefully)
C
      CHARACTER DECODED*8,TITLE*40,TITLE2*40
      LOGICAL IZERO
      EXP=0.0
      TCHECK=100.
      IF (TMAXLGL.EQ.1000.) TCHECK=1000.
      DELTAV=ABS(SCALE)
      IF (DELTAV.EQ.0)GOTO 130 
  100 CONTINUE 
      IF (DELTAV.LE.TCHECK)GOTO 120 
      DELTAV = DELTAV/10.0
      EXP=EXP+1.0
      GOTO 100 
  110 CONTINUE 
      DELTAV = DELTAV*10
      EXP=EXP-1.0
  120 CONTINUE 
      IF (DELTAV.LT.0.01)GOTO 110 
  130 CONTINUE 
      VAL1=START*10.0**(-EXP)
      DELTAV=SCALE*10.0**(-EXP)
      IDE=0
      IF (EXP.EQ.0.0)GOTO 140 
      IDE=ALOG10(ABS(EXP))+3.0
      IF (EXP.LT.0.0) IDE=IDE+1
  140 CONTINUE 
      CALL XG$MOVE_ABS_2 (XLOC,YLOC)
      PANGL =(3.141592654 * ANGL) / 180.
      XEND=XLOC+COS(PANGL)*AXISL
      YEND=YLOC+SIN(PANGL)*AXISL
      CALL XG$LINE_ABS_2 (XEND,YEND)
      ISN = ISIGN(1,ITICFLG)
      IF (ISN.EQ.0) ISN=1
      TICDIR = FLOAT(ISN)*(-90.)
      TANGL = (3.141592654 * (ANGL+TICDIR)) / 180.
      KOUNT = INT(AXISL/TICDIS)+1
      X = XLOC
      Y = YLOC
      COST = COS(TANGL)
      SINT = SIN(TANGL)
      IF (ABS(COST).GT.ABS(SINT))THEN
         TXTDIS = .6
         TITLDIS = -1.
         TITLFLG = -1.
      ELSE 
         TXTDIS = .35
         TITLDIS = .65
         TITLFLG = 1.
      ENDIF 
      CALL XG$SET_CHARSIZE (.20,.20)
      ICKSIZE = .20*260.
      CALL XG$ESCAPE(2,1,ICKSIZE)
      CALL XG$SET_FONT(IFONT)
      CALL XG$SET_CHARUP_2(0.,1.)
      CALL XG$SET_CHARJUST ('CENTER','CENTER')
      IF (INTEGERS .NE. 1)GOTO 160 
      IZERO = .FALSE.
      DO 150 I=1,KOUNT
         ENCODE (8,1010,DECODED),VAL1
         IF (DECODED(6:8).NE. '.00')GOTO 160 
         VAL1 = VAL1+DELTAV
  150 CONTINUE 
      IZERO = .TRUE.
  160 CONTINUE 
      VAL1=START*10.0**(-EXP)
      DO 190 I=1,KOUNT
         CALL XG$MOVE_ABS_2 (X,Y)
         XN = X + COS(TANGL)*.15
         YN = Y + SIN(TANGL)*.15
         CALL XG$LINE_ABS_2 (XN,YN)
         XN = X + COST*TXTDIS
         YN = Y + SINT*TXTDIS
         IF (IZERO) THEN
            IF (TITLFLG .GT. 0.) THEN
               XN = XN - .40
            ENDIF 
         ENDIF 
         CALL XG$MOVE_ABS_2 (XN,YN)
         IF (IZERO) THEN
            ENCODE (8,1020,DECODED),NINT(VAL1)
         ELSE 
            ENCODE (8,1010,DECODED),VAL1
            IF (DECODED(5:8) .EQ. ' .00') THEN
               DECODED = '    0.00'
            ENDIF 
         ENDIF 
         IF (TITLFLG .LT. 0.) THEN
            DO 170 IP = 1,7
               ITHIS = IP
               IF (DECODED(IP:IP).NE.' ')GOTO 180 
  170       CONTINUE 
  180       CONTINUE 
            IP = 8 - ITHIS + 1
            CALL XG$INQ_TEXT_EXTENT_3_COUNT (DECODED(ITHIS:ITHIS),IP,DX,
     1            DY,DZ)
            IF (DX+.5 .GT. TITLDIS) TITLDIS = DX+.5
         ENDIF 
         CALL XG$TEXT_COUNT (DECODED,8)
         X = X + COS(PANGL)*TICDIS
         Y = Y + SIN(PANGL)*TICDIS
         VAL1 = VAL1+DELTAV
  190 CONTINUE 
      X = XLOC + COS(PANGL)*(AXISL/2.)
      Y = YLOC + SIN(PANGL)*(AXISL/2.)
      X = X + COST*TITLDIS
      Y = Y + SINT*TITLDIS
      CALL XG$MOVE_ABS_2 (X,Y)
      CALL XG$SET_CHARSIZE (.25,.25)
      ICKSIZE=.25*260.
      CALL XG$ESCAPE(2,1,ICKSIZE)
      XUP = COS(TANGL+(3.141592654*ISN))
      YUP = SIN(TANGL+(3.141592654*ISN))
      IF (XUP.GT.0.) XUP=-(XUP)
      CALL XG$SET_CHARUP_2 (XUP,YUP)
      IF (EXP.EQ.0.0) THEN
         CALL XG$TEXT_COUNT (TITLE,KOUNTC)
         RETURN
      ENDIF 
      TITLE2 = TITLE
      TITLE2(KOUNTC+1:KOUNTC+6)=' (x10'
      KOUNT=KOUNTC+5
      CALL XG$INQ_TEXT_EXTENT_3_COUNT (TITLE2, KOUNT, DX, DY,DZ)
      DIST = SQRT (DX*DX+DY*DY)/2.
      XOFF = COS(PANGL)*DIST
      YOFF = SIN(PANGL)*DIST
      CALL XG$TEXT_COUNT (TITLE2, KOUNT)
      X = X+XOFF
      Y = Y+YOFF
      CALL XG$SET_CHARJUST ('LEFT','BOTTOM')
      CALL XG$SET_CHARSIZE (.10,.10)
      ICKSIZE=.10*260.
      CALL XG$ESCAPE(2,1,ICKSIZE)
      CALL XG$MOVE_ABS_2 (X,Y)
      ENCODE (7,1000,DECODED,ISIZE),INT(EXP)
      CALL XG$INQ_TEXT_EXTENT_3_COUNT (DECODED, ISIZE, DX, DY, DZ)
      DIST = SQRT (DX*DX+DY*DY)
      XOFF = COS(PANGL)*DIST
      YOFF = SIN(PANGL)*DIST
      CALL XG$TEXT_COUNT (DECODED,ISIZE)
      X = X+XOFF
      Y = Y+YOFF
      CALL XG$MOVE_ABS_2 (X,Y)
      CALL XG$SET_CHARSIZE (.25,.25)
      ICKSIZE=.25*260.
      CALL XG$ESCAPE(2,1,ICKSIZE)
      CALL XG$SET_CHARJUST ('CENTER','CENTER')
      CALL XG$TEXT_COUNT (')',-1)
      RETURN
 1000 FORMAT (I)
 1010 FORMAT (F8.2)
 1020 FORMAT (I8)
      END 
      SUBROUTINE PERM2TEMP (PERM,TEMP,ICOL,NENTS)
      DIMENSION PERM (4,204),TEMP(204)
      DO 100 I = 1,NENTS
         TEMP(I) = PERM(ICOL,I)
  100 CONTINUE 
      RETURN
      END 
      SUBROUTINE TEMP2PERM (PERM,TEMP,ICOL,NENTS)
      DIMENSION PERM(4,204),TEMP(204)
      DO 100 I=1,NENTS
         PERM(ICOL,I) = TEMP(I)
  100 CONTINUE 
      RETURN
      END 
      SUBROUTINE GRAFASTART
C
C         GET AND SAVE CURRENT CPU TIME
C
      COMMON/GRAFACOM/CPUTIME
      CALL ACPU(CPUTIME)
      RETURN
      END 
      SUBROUTINE GRAFAEXIT
C
C         following routines are for my own sanity, and are
C         CP-6 specific
C
      COMMON/GRAFACOM/CPUTIME
      CALL ACPU(CPUTIME2)
      ICPU=(CPUTIME2-CPUTIME)*10.
      CALL DVCHKCNT (NCH)
      IF (NCH.GE.ICPU) THEN
         OUTPUT '*** Lots of divide checks'
         OUTPUT NCH
      ENDIF 
      CALL OVFLOCNT (NOV)
      IF (NOV.GE.ICPU) THEN
         OUTPUT '*** Lots of overflows'
         OUTPUT NOV
      ENDIF 
      STOP 
      END 
      SUBROUTINE TEXTWIDTH(WIDTH)
C
C         **********************************************************
C         Subroutine calculates TEXT_WIDTH based on character width
C         **********************************************************
C
      ISIZE=260
      IF (WIDTH.LE.1.0) THEN
         ISIZE=WIDTH*260.
      ENDIF 
      CALL XG$ESCAPE(2,1,ISIZE)
      RETURN
      END 
      SUBROUTINE CHARSIZE(STRING,ICMAX,IRET)
      CHARACTER STRING*(*)
      IF (ICMAX.LE.1) RETURN
      DO 100 I=ICMAX,1,-1
         IRET=I
         IF (STRING(I:I).NE.' ') RETURN
  100 CONTINUE 
      RETURN
      END 
      SUBROUTINE SYMBOL (POSX,POSY,SIZEC,STRING,ANGLE,ISIZE)
      CHARACTER*80 STRING
      CALL XG$SET_CHARSIZE (SIZEC,SIZEC)
      CALL TEXTWIDTH(SIZEC)
      CALL XG$SET_FONT(13)
      ANGLE2=ANGLE
      IF (ANGLE2.LT.0.)GOTO 110 
  100 CONTINUE 
      IF (ANGLE2.LT.360.0)GOTO 110 
      ANGLE2=ANGLE2-360.
      GOTO 100 
  110 CONTINUE 
      IF (ANGLE2.GT.-360.)GOTO 120 
      ANGLE2=ANGLE2+360.
  120 CONTINUE 
      THETA=(ANGLE2*3.14159)/180.
      COSX=COS(THETA)
      SINX=-(SIN(THETA))
      CALL XG$SET_CHARUP_2(SINX,COSX)
      CALL XG$MOVE_ABS_2(POSX,POSY)
      CALL XG$TEXT_COUNT(STRING,ISIZE)
      RETURN
      END 
