/*M*  CALEN - A TOOL FOR DISPLAYING A CALENDAR.               */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/**/
/*D* This tool can be used to display a calendar of any year,
     semester,quarter, or month. CALEN is also in connection
     with CALENDAR.X  for displaying scheduled appointments   */
 
CALEN:  PROC MAIN;
 
        % INCLUDE CP_6;
        % INCLUDE B$JIT;
        % INCLUDE XU_MACRO_C;
        % INCLUDE XU_SUBS_C;
        % INCLUDE XU_PERR_C;
        % INCLUDE XUR_ENTRY;
        % F$DCB;
 
        % FPT_WRITE (FPTN = WRLO,
          BUF  = OUT_BUF,
          DCB  = M$LO);
 
 
        % FPT_TIME (FPTN = TM,
          DATE = DDATE,
          DEST = LOCAL);
 
        % FPT_LINK (FPTN =LINK_TO_PCL,
          CMD = COPY_INTO,
          ACCT = PCL_ACCT,
          NAME = PCL);
 
        % FPT_OPEN (FPTN = OP,
          DCB  = M$LO,
          EXIST= OLDFILE,
          ACCT = ACC,
          CTG = YES,
          FUN  = CREATE);
 
        % FPT_CLOSE (FPTN = CL,
          DISP = SAVE,
          DCB = M$LO);
 
        % FPT_OPEN (FPTN = OP_CAL,
          DCB  = M$CAL,
          FUN  = CREATE,
          NAME = CAL_FILE,
          ACCT = ACC,
          ASN  = FILE,
          EXIST= OLDFILE,
          ACS  = SEQUEN);
 
        % FPT_REW (FPTN = RE,
          DCB  = M$CAL);
 
        % FPT_READ (FPTN = RD,
          DCB  = M$CAL,
          BUF  = INBUF);
 
        % FPT_CLOSE (FPTN = CL_CAL,
          DCB  = M$CAL,
          DISP = SAVE);
 
        % VLP_NAME (FPTN = PCL);
        % VLP_NAME (FPTN = COPY_INTO ,LEN=80 ,L=80);
        % VLP_NAME (FPTN = CAL_FILE);
        % VLP_ACCT (FPTN = PCL_ACCT);
 
DCL M$LO DCB;
DCL M$DO DCB;
DCL M$SI DCB;
DCL M$CAL DCB;
 
DCL 1 INBUF STATIC,
      2 DATE,
        3 MONTH CHAR(2),
        3 SLASH1 CHAR (1),
        3 DAY CHAR(2),
        3 SLASH2 CHAR (1),
        3 YEAR CHAR (2),
        3 * CHAR (2),
      2 TIME,
        3 HR CHAR (2),
        3 COLON  CHAR (1),
        3 MIN CHAR (2),
      2 * CHAR (82),
      2 TOPIC CHAR (80),
      2 * CHAR (1683);
 
 
DCL ACC CHAR(8) STATIC;
DCL DDATE (0:7) CHAR(1) STATIC;
DCL DDATE1 CHAR (2) STATIC;
DCL PRMT CHAR (0) CONSTANT INIT ('CALEN>> ');
DCL DDAY UBIN STATIC;
 
DCL X$PARSE ENTRY (1) ALTRET;
DCL CALENDARCMD UBIN SYMREF;
DCL B$JIT$ PTR SYMREF;
 
       DCL JIT_BUF CHAR(256) STATIC;
       DCL ANAL_JIT (0:255) REDEF JIT_BUF CHAR (1);
       DCL ALTER CHAR (2) BASED;
 
 
DCL 1 OUT_BUF STATIC,
      2 * CHAR (24),
      2 DATE,
        3 PARENL CHAR (1),
        3 MONTH CHAR (2),
        3 SL    CHAR (1),
        3 DAY CHAR (2),
        3 PARENR CHAR (1),
      2 * CHAR (2),
      2 TIME,
        3 HR  CHAR (2),
        3 COL CHAR (1),
        3 MIN CHAR (2),
      2 * CHAR (2),
      2 TOPIC CHAR (40);
DCL OBUF REDEF OUT_BUF CHAR (80);
DCL BUF1 CHAR(400) STATIC;
DCL BUF2 CHAR(400) STATIC;
DCL TEMP_BUF CHAR(40) STATIC;
DCL BUF1$ PTR STATIC;
DCL BUF2$ PTR STATIC;
DCL ROWV CHAR (40) BASED;
DCL ROW# UBIN STATIC;
DCL IBUF CHAR (72) STATIC INIT (' ');
DCL YEAR UBIN STATIC;
DCL SEM UBIN STATIC;
DCL QUART UBIN STATIC;
DCL MONTH UBIN STATIC;
 
DCL FLAGS (0:4) BIT(1) STATIC INIT ('0'B * 5);
DCL WORK_AREA (0:1023) UBIN WORD STATIC;
DCL SUBLK$ PTR STATIC;
DCL DEC$ PTR STATIC;
DCL NODECODE UBIN STATIC;
DCL NODE UBIN STATIC;
DCL ENDCM BIT(1) STATIC INIT ('0'B);
DCL FIRST_PASS BIT(1) STATIC INIT ('1'B);
DCL MONTHS_FLAG (0:12) BIT(1) STATIC;
DCL MONTH_NODE UBIN STATIC;
DCL J UBIN STATIC;
DCL K UBIN STATIC;
DCL BUF_TYPE UBIN STATIC;
DCL COUNTM UBIN STATIC;
DCL SCH_FLAG BIT (1) STATIC INIT ('0'B);
DCL FORMAT_FLAG BIT(1) STATIC INIT ('1'B);
DCL SCREEN_FLAG BIT(1) STATIC INIT ('0'B);
DCL PRINT_FYEAR BIT(1) STATIC;
DCL EOF_FLAG BIT (1) STATIC;
DCL OP_FLAG BIT(1) STATIC;
DCL MNAME_FLAG BIT(1) STATIC;
DCL SAVE_FO BIT(1) STATIC;
DCL PTR$ PTR STATIC;
DCL 1 ERR REDEF PTR$,
      2 FCG BIT(18),
      2 MON BIT(1),
      2 CODE UBIN (14) UNAL,
      2 SEV UBIN (3) UNAL;
 
DCL TXT CHAR (40) STATIC;
DCL TEXT$ PTR STATIC;
 
        % P_PCB (R = CALENDARCMD,
          W  = WORK_AREA,
          WSZ = 1024);
 
        % XUR_INIT (NAME = XUR_INIT,
          SYNTAX = YES,
          PREPROCESS = YES,
          PCB = P_PCB);
 
        % PARSE$OUT (STCLASS = BASED);
        % PARSE$SYM (STCLASS = BASED);
 
/* Clear screen and position cursor in upper left corner */
 
DCL CRT ENTRY (1);
 
 
/* Open output file */
 
        ACC = B$JIT$->B$JIT.ACCN;
        PCL.NAME# = 'PCL';
        PCL_ACCT.ACCT# = ':SYS';
        PCL.L# = 3;
        CALL CONCAT (COPY_INTO.NAME#,
                     'COPY :CALENDAR.', ACC,' INTO :CALEN.',ACC);
        CALL M$LINK (LINK_TO_PCL);
        CALL M$OPEN(OP);
 
 
/* Initialize YEAR and MONTH, Call Timer*/
 
        CALL M$TIME (TM);
        CALL CONCAT (DDATE1, DDATE(0),DDATE(1));
        CALL CHARBIN (MONTH, DDATE1);
        CALL CONCAT (DDATE1, DDATE(6),DDATE(7));
        CALL CHARBIN (YEAR, DDATE1);
        IF (YEAR < 78) THEN
           YEAR = YEAR + 2000;
        ELSE
            YEAR = YEAR + 1900;
 
        CALL XUR$INIT (XUR_INIT);
        P_PCB.NCHARS = MAXIMUM(1,B$JIT$->B$JIT.CCARS - B$JIT.CCDISP);
   IF (P_PCB.NCHARS = 1) THEN DO;
       CALL INDEX(J,'CALEN',B$JIT$->B$JIT.CCBUF);
       CALL INDEX(J,' ',B$JIT$->B$JIT.CCBUF,J);
       TEXT$ = PINCRC (ADDR(B$JIT$->B$JIT.CCBUF),J+1);
       IF ((B$JIT$->B$JIT.CCARS ~= J ) AND (TEXT$->ROWV ~= ' '))THEN DO;
           JIT_BUF = B$JIT$->B$JIT.CCBUF;
           DO WHILE (ANAL_JIT (J) = ' ');
               J = J + 1;
               END;
           DO SELECT (ADDR (ANAL_JIT (J))->ALTER);
               SELECT ('OV','IN','ON','TO');
                   CALL INDEX(J,',',JIT_BUF,J);
                   IF (J = 256) THEN DO;
                       OBUF = '*** Syntax Error , a comma is missing before lofid';
                       CALL M$WRITE (WRLO);
                       ENDCM = '1'B; GOTO START;
                       END;
               SELECT (ELSE);
                   OBUF = 'Next time try option-list with delimited parenthesis!!';
                   CALL M$WRITE (WRLO);
                   ENDCM = '1'B; GOTO START;
               END;
           END;
       END;
        P_PCB.TEXT$ = PINCRC (ADDR(B$JIT$->B$JIT.CCBUF), B$JIT$->B$JIT.CCDISP);
        TEXT$ = P_PCB.TEXT$;
 
START:  DO WHILE (ENDCM = '0'B);
 
           EOF_FLAG = '0'B;
           MNAME_FLAG = '0'B;
           PRINT_FYEAR = '1'B;
           COUNTM = 0;
           BUF1 = ' ';
           BUF2 = ' ';
           BUF_TYPE = 2;
           DO J = 0 TO 12;
              MONTHS_FLAG(J) = '0'B;
              END;
           FLAGS (0) = '0'B;
           FLAGS (1) = '0'B;
           FLAGS (3) = '0'B;
           FLAGS (4) = '0'B;
 
           IF (OP_FLAG = '1'B) THEN
              CALL M$CLOSE (CL_CAL);
 
GTCMD:
           CALL XUR$GETCMD (CALENDARCMD,PTR$,VECTOR(PRMT),TEXT$->ROWV) WHENALTRETURN DO;
              TEXT$ = ADDR (NIL);
           CALL XUR$ERRPTR (,DCBNUM(M$DO));
           CALL XUR$ERRMSG (ERR);
              GOTO GTCMD;
              END;
 
           TEXT$ = ADDR (NIL);
           CALL XUR$ECHOIF (DCBNUM(M$LO));
           DO NODE = 0 TO PTR$->OUT$BLK.NSUBLKS - 1;
              SUBLK$ = PTR$->OUT$BLK.SUBLK$ (NODE);
              NODECODE = SUBLK$->OUT$BLK.CODE;
              DEC$ = SUBLK$->OUT$BLK.SUBLK$(0);
              DO CASE (NODECODE);
               CASE(0);
                 CALL CHARBIN (YEAR, DEC$->OUT$SYM.TEXT);
                 FLAGS (4) = '1'B;
               CASE (1);
                 IF (DEC$->OUT$BLK.CODE = 1) THEN DO;
                    FLAGS(3) = '1'B;
                    DO CASE (DEC$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE);
                     CASE (0);
                       QUART = 1;
                     CASE (1);
                       QUART = 2;
                     CASE (2);
                       QUART = 3;
                     END;
                    END;
                 ELSE DO;
                    FLAGS (0) = '1'B;
                    CALL CHARBIN (SEM, DEC$->OUT$SYM.TEXT);
                    END;
               CASE (2);
                 FLAGS (1) = '1'B;
                 IF (DEC$->OUT$BLK.CODE = 1) THEN
                    MNAME_FLAG = '1'B;
                 ELSE IF (DEC$->OUT$BLK.CODE = 2) THEN DO;
                       DEC$ = DEC$->OUT$BLK.SUBLK$(0);
                       CALL M$TIME (TM);
                       CALL CONCAT (DDATE1, DDATE(0),DDATE(1));
                       CALL CHARBIN (MONTH, DDATE1);
                       IF (DEC$->OUT$BLK.CODE = 1) THEN
                          MONTHS_FLAG (MONTH) = '1'B;
                       ELSE IF (DEC$->OUT$BLK.CODE = 2) THEN DO;
                             IF (DEC$->OUT$BLK.NSUBLKS = 0) THEN
                                K = 1;
                             ELSE
                                CALL CHARBIN(K,DEC$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT);
                             J = MONTH + 1;
                             DO WHILE (J <= MONTH+K);
                                IF (J <= 12) THEN
                                   MONTHS_FLAG (J) = '1'B;
                                J = J + 1;
                                END;
                             END;
                          ELSE IF (DEC$->OUT$BLK.CODE = 3) THEN DO;
                                MONTHS_FLAG (0) = '1'B;
                                MONTHS_FLAG (1) = '1'B;
                                MONTH = 12;
                                END;
                       GOTO NXT;
                       END;
                 DEC$ = DEC$->OUT$BLK.SUBLK$(0);
                 IF (DEC$->OUT$BLK.CODE = 0) THEN DO;
                    DO MONTH_NODE = 0 TO 1;
                       IF (MNAME_FLAG = '1'B) THEN
                          MONTH=DEC$->OUT$BLK.SUBLK$(MONTH_NODE)->OUT$BLK.CODE;
                       ELSE
                          CALL CHARBIN(MONTH,DEC$->OUT$BLK.SUBLK$(MONTH_NODE)->OUT$SYM.TEXT);
                       MONTHS_FLAG (MONTH) = '1'B;
                       END;
                    MONTHS_FLAG(0) = '1'B;
                    END;
                 ELSE IF (DEC$->OUT$BLK.CODE = 1) THEN DO;
                       IF (MNAME_FLAG = '1'B) THEN
                          MONTH = DEC$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE;
                       ELSE
                          CALL CHARBIN(MONTH,DEC$->OUT$SYM.TEXT);
                       IF (MONTH > 12) THEN DO;
                          OBUF = 'Allowable months are from 1 to 12';
                          CALL M$WRITE (WRLO);
                          END;
                       ELSE
                          MONTHS_FLAG (MONTH) = '1'B;
                       END;
                    ELSE IF (DEC$->OUT$BLK.CODE = 2) THEN DO;
                          DO MONTH_NODE = 0 TO DEC$->OUT$BLK.NSUBLKS-1;
                             IF (MNAME_FLAG = '1'B) THEN
                                MONTH = DEC$->OUT$BLK.SUBLK$(MONTH_NODE)->OUT$BLK.CODE;
                             ELSE
                                CALL CHARBIN(MONTH,DEC$->OUT$BLK.SUBLK$(MONTH_NODE)->OUT$SYM.TEXT);
                             IF (MONTH > 12) THEN DO;
                                OBUF = 'Allowable months are from 1 to 12';
                                CALL M$WRITE (WRLO);
                                END;
                             ELSE
                                MONTHS_FLAG (MONTH) = '1'B;
                             END;
NXT:                      END;
               CASE (3);
                 DO CASE (DEC$->OUT$BLK.CODE);
                  CASE (1,3);
                    SCH_FLAG = '1'B;
                    SAVE_FO = FORMAT_FLAG;
                    DO CASE (DEC$->OUT$BLK.CODE);
                      CASE (1);
                        CAL_FILE.L# = 9;
                        CAL_FILE.NAME# = ':CALENDAR';
                      CASE (3);
                        CAL_FILE.L# = 6;
                        CAL_FILE.NAME# = ':CALEN';
                      END;
                  CASE (2);
                    IF (SCH_FLAG = '1'B) THEN
                       FORMAT_FLAG = SAVE_FO;
                    SCH_FLAG = '0'B;
                    IF (OP_FLAG = '1'B) THEN
                       CALL M$CLOSE (CL_CAL);
 
                  END;
               CASE (4);
                 IF (DEC$->OUT$BLK.CODE = 1) THEN DO;
                    FLAGS (1) = '1'B;
                    MONTHS_FLAG (0) = '1'B;
                    DO CASE (DEC$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE);
                     CASE (0);
                       MONTHS_FLAG (1) = '1'B;
                       MONTHS_FLAG (3) = '1'B;
                       MONTH = 3;
                     CASE (1);
                       MONTHS_FLAG (4) = '1'B;
                       MONTHS_FLAG (6) = '1'B;
                       MONTH = 6;
                     CASE (2);
                       MONTHS_FLAG (7) = '1'B;
                       MONTHS_FLAG (9) = '1'B;
                       MONTH = 9;
                     CASE (3);
                       MONTHS_FLAG (10) = '1'B;
                       MONTHS_FLAG (12) = '1'B;
                       MONTH = 12;
                     END;
                    END;
                 ELSE DO;
                    CALL CHARBIN(QUART,DEC$->OUT$SYM.TEXT);
                    FLAGS(3) = '1'B;
                    END;
               CASE (5);
                 ENDCM = '1'B;
                 GOTO START;
               CASE (6);
                 DO CASE (DEC$->OUT$BLK.CODE);
                  CASE (1);
                    FORMAT_FLAG = '1'B;
                  CASE (2);
                    FORMAT_FLAG = '0'B;
                  END;
               CASE (7);
                 DO CASE (DEC$->OUT$BLK.CODE);
                  CASE (1);
                    SCREEN_FLAG = '1'B;
                    CALL CRT(1);
                    CALL CRT(2);
                  CASE (2);
                    SCREEN_FLAG = '0'B;
                  END;
 
               END;
              END;
 
           IF (SCH_FLAG = '1'B) THEN DO;
              FORMAT_FLAG = '0'B;
              CALL M$OPEN (OP_CAL);
              OP_FLAG = '1'B;
              CALL M$REW (RE);
              CALL READ;
              END;
 
           IF (FLAGS(1) = '1'B) THEN
           DO;
              IF (MONTHS_FLAG(0) = '1'B) THEN DO;
                 J = 1;
                 DO WHILE (MONTHS_FLAG(J) ~= '1'B);
                    J = J + 1;
                    END;
                 K = MONTH;
                 CALL CREATE_CALEN_FILE(J,K);
                 END;
              ELSE DO;
                 DO J = 1 TO 12;
                    IF (MONTHS_FLAG (J) = '1'B) THEN DO;
                       MONTH = J;
                       CALL CREATE_CALEN_FILE(J,J);
                       END;
                    END;
                 END;
              END;
           ELSE IF (FLAGS(3) = '1'B) THEN DO;
                 DO CASE (QUART);
                  CASE(1);
                    CALL CREATE_CALEN_FILE (1,4);
                  CASE(2);
                    CALL CREATE_CALEN_FILE (5,8);
                  CASE(3);
                    CALL CREATE_CALEN_FILE (9,12);
                  CASE (ELSE);
                    OBUF = 'Quarters are either 1 or 2 or 3';
                    CALL M$WRITE(WRLO);
                  END;
                 END;
              ELSE IF (FLAGS(0) = '1'B) THEN DO;
                    DO CASE(SEM);
                     CASE(1);
                       CALL CREATE_CALEN_FILE(1,6);
                     CASE(2);
                       CALL CREATE_CALEN_FILE (7,12);
                     CASE(ELSE);
                       OBUF = 'SEMESTER # MUST BE 1 OR 2';
                       CALL M$WRITE (WRLO);
                     END;
                    END;
                 ELSE IF (FLAGS (4) = '1'B) THEN
                    DO;
                       CALL CREATE_CALEN_FILE(1,12);
                       END;
 
           IF (BUF1 ~= ' ') THEN
              CALL PRINT_FILE;
 
 
 
           END START;
 
        CALL M$CLOSE (CL);
 
/*M*   This PROC  figures out the days of a month or months,
       and prints the created data (month/s) thru M$LO        */
 
CREATE_CALEN_FILE: PROC(FIRST,LAST);
 
 
DCL LEAP UBIN CONSTANT INIT (1984);
DCL FIRST_DAY_OF_1984 UBIN CONSTANT INIT (1);
DCL MONTHS (0:12) UBIN STATIC INIT (999,31,28,31,30,
                         31,30,31,31,30,31,30,31);
DCL YEAR_NUM CHAR(4) STATIC;
DCL MONTH_NAME (0:12) CHAR(9) CONSTANT INIT ('MONTHS',
                                                  ' JANUARY ',
                                                  'FEBRUARY ',
                                                  '  MARCH  ',
                                                  '  APRIL  ',
                                                  '   MAY   ',
                                                  '  JUNE   ',
                                                  '  JULY   ',
                                                  ' AUGUST  ',
                                                  'SEPTEMBER',
                                                  ' OCTOBER ',
                                                  'NOVEMBER ',
                                                  'DECEMBER ');
 
DCL TEST_LEAP SBIN STATIC;
DCL YEARS_FROM_LEAP SBIN STATIC;
DCL TEMP SBIN STATIC;
DCL FIRST_DAY_OF_YEAR SBIN STATIC;
DCL FIRST_DAY_OF_MONTH UBIN STATIC;
DCL FIRST UBIN;
DCL LAST UBIN;
DCL IMONTHS SBIN STATIC;
DCL IDAYS SBIN STATIC;
DCL I UBIN STATIC;
 
 
DCL CBUF$ PTR STATIC;
 
DCL JDAY CHAR(2) STATIC;
DCL JDAYA (0:1) REDEF JDAY CHAR (1);
DCL DAYIN CHAR(1) BASED;
DCL LOWLI UBIN STATIC;
DCL DY UBIN STATIC;
DCL DM UBIN STATIC;
DCL DD UBIN STATIC;
 
        IF ((SCREEN_FLAG = '1'B) AND (PRINT_FYEAR = '1'B)) THEN DO;
           CALL CRT (1);
           CALL CRT (2);
           END;
 
        IF ((FIRST > 12) OR (LAST > 12)) THEN DO;
           OBUF = 'Allowable months are from 1 to 12';
           CALL M$WRITE (WRLO);
           RETURN;
           END;
 
        MONTHS(2) = 28;                 /* Initialize February to 28 days     */
/* Test if year is LEAP */
 
        IF ((MOD(YEAR,4)=0 AND MOD(YEAR,100)~=0) OR MOD(YEAR,400)=0) THEN
           MONTHS(2) = 29;
 
/* Figure out FIRST_DAY_OF_YEAR */
 
        YEARS_FROM_LEAP = YEAR - LEAP;
 
        IF (YEARS_FROM_LEAP > 0) THEN DO;
           IF (YEARS_FROM_LEAP <= 4) THEN
              TEMP = 0;
           ELSE IF (MOD(YEARS_FROM_LEAP,4) = 0) THEN
                 TEMP = (YEARS_FROM_LEAP / 4) - 1;
              ELSE
                 TEMP = YEARS_FROM_LEAP / 4;
           FIRST_DAY_OF_YEAR = FIRST_DAY_OF_1984 + YEARS_FROM_LEAP +TEMP+1;
           END;
        ELSE IF (YEARS_FROM_LEAP < 0) THEN DO;
              TEMP = YEARS_FROM_LEAP/4;
              IF (YEARS_FROM_LEAP < -7) THEN DO;
                 YEARS_FROM_LEAP = MOD (YEARS_FROM_LEAP+TEMP,7);
                 FIRST_DAY_OF_YEAR = FIRST_DAY_OF_1984+YEARS_FROM_LEAP+7;
                 END;
              ELSE
                 FIRST_DAY_OF_YEAR = FIRST_DAY_OF_1984+YEARS_FROM_LEAP+TEMP+7;
              END;
           ELSE
              FIRST_DAY_OF_YEAR = FIRST_DAY_OF_1984;
 
        IF (FIRST_DAY_OF_YEAR > 7) THEN
           FIRST_DAY_OF_YEAR = MOD (FIRST_DAY_OF_YEAR, 7);
 
        IF ((FLAGS(1) = '1'B) OR (FLAGS(0) = '1'B) OR (FLAGS(3) = '1'B)) THEN
        DO;
           TEMP = 0;
           DO I = 1 TO FIRST - 1;
              TEMP = TEMP + MONTHS(I); END;
 
           FIRST_DAY_OF_MONTH = TEMP + FIRST_DAY_OF_YEAR;
           IF (FIRST_DAY_OF_MONTH > 7) THEN
              FIRST_DAY_OF_MONTH = MOD (FIRST_DAY_OF_MONTH,7);
 
           IF (FIRST_DAY_OF_MONTH = 0) THEN
              FIRST_DAY_OF_MONTH = 7;
           END;
 
        ELSE IF ((FLAGS(0) = '0'B) AND (FLAGS(1) = '0'B)) THEN /* Neither Semester nor month */
           DO;
              FIRST_DAY_OF_MONTH = FIRST_DAY_OF_YEAR;
              END;
 
/*Create file */
 
        IF (PRINT_FYEAR = '1'B) THEN DO;
           OBUF = ' ';
           CALL M$WRITE (WRLO);
           CALL BINCHAR (YEAR_NUM,YEAR);
           IF ((FORMAT_FLAG = '0'B) AND (SCH_FLAG = '0'B)) THEN
              CALL CONCAT (OBUF,'         ',YEAR_NUM);
           ELSE
              CALL CONCAT (OBUF, '                                        ', YEAR_NUM);
           CALL M$WRITE(WRLO);
           PRINT_FYEAR = '0'B;
           END;
        BUF1$ = ADDR(BUF1);
        BUF2$ = ADDR(BUF2);
 
        I = ((FIRST_DAY_OF_MONTH - 1) * 3) + 1;
        TEMP = I;
 
        DO IMONTHS = FIRST TO LAST;
           LOWLI = 1;
           CBUF$ = PINCRC (WRLO.BUF_.BUF$, TEMP);
           DO SELECT (FORMAT_FLAG);
            SELECT ('0'B);
              OBUF = ' ';
              CALL M$WRITE (WRLO);
              CALL CONCAT (OBUF,'       ',MONTH_NAME(IMONTHS));
              CALL M$WRITE (WRLO);
              OBUF = ' ';
              CALL M$WRITE (WRLO);
              IF (SCH_FLAG) THEN
              OBUF = '  SU MO TU WE TH FR SA   DATE    TIME   EVENT';
              ELSE
              OBUF = '  SU MO TU WE TH FR SA';
              CALL M$WRITE (WRLO);
            SELECT ('1'B);
              COUNTM = COUNTM + 1;
              IF (COUNTM > 2) THEN DO;
                 CALL PRINT_FILE;
                 BUF1 = ' ';
                 BUF2 = ' ';
                 COUNTM = 1;
                 END;
              ROW# = 0;
              CALL CONCAT (TEMP_BUF,'                 ',MONTH_NAME(IMONTHS));
              ROW# = ROW# + 40;
              DO CASE (BUF_TYPE);
               CASE (2);
                 BUF_TYPE = 1;
                 PINCRC(BUF1$,ROW#)->ROWV = TEMP_BUF;
                 ROW# = ROW# + 80;
                 CALL CONCAT(TEMP_BUF,'           ','SU MO TU WE TH FR SA');
                 PINCRC(BUF1$,ROW#)->ROWV = TEMP_BUF;
               CASE (1);
                 BUF_TYPE = 2;
                 PINCRC(BUF2$,ROW#)->ROWV = TEMP_BUF;
                 ROW# = ROW# + 80;
                 CALL CONCAT(TEMP_BUF,'           ','SU MO TU WE TH FR SA');
                 PINCRC(BUF2$,ROW#)->ROWV = TEMP_BUF;
               END;
              ROW# = ROW# + 40;
            END;
           OBUF = ' ';
           DO IDAYS = 1 TO MONTHS (IMONTHS);
              JDAY = ' ';
              CALL BINCHAR (JDAY,IDAYS);
              IF (IDAYS < 10) THEN
              DO;
                 CBUF$ = PINCRC(CBUF$,2);
                 CBUF$->DAYIN = JDAYA(1);
                 END;
              ELSE
              DO;
                 CBUF$ = PINCRC(CBUF$,1);
                 CBUF$->DAYIN = JDAYA(0);
                 CBUF$ = PINCRC(CBUF$,1);
                 CBUF$->DAYIN = JDAYA(1);
                 END;
              CBUF$ = PINCRC(CBUF$,1); I = I + 3;
              IF ((I = 22) OR (IDAYS = MONTHS(IMONTHS))) THEN
              DO;
                 DO SELECT (FORMAT_FLAG);
                  SELECT ('0'B);
                    DO SELECT (SCH_FLAG);
                     SELECT ('1'B);
                       IF (EOF_FLAG = '1'B) THEN GOTO NOSCH;
ST:                    CALL CHARBIN (DY,INBUF.DATE.YEAR);
                       CALL CHARBIN (DM,INBUF.DATE.MONTH);
                       CALL CHARBIN (DD,INBUF.DATE.DAY);
LOOP:                  IF (((DY+1900 = YEAR) OR (DY+2000 = YEAR)) AND
                         (DM = IMONTHS) AND
                         ((DD >= LOWLI) AND
                         (DD <= IDAYS)) AND
                         (EOF_FLAG = '0'B)) THEN DO;
                          OUT_BUF.DATE.PARENL = '(';
                          OUT_BUF.DATE.MONTH = INBUF.DATE.MONTH;
                          OUT_BUF.DATE.SL = '/';
                          OUT_BUF.DATE.DAY   = INBUF.DATE.DAY;
                          OUT_BUF.DATE.PARENR = ')';
                          IF ((INBUF.TIME.HR = '00') AND (INBUF.TIME.MIN = '00')) THEN
                              OUT_BUF.TIME.MIN = ' -';
                           ELSE DO;
                              OUT_BUF.TIME.HR = INBUF.TIME.HR;
                              OUT_BUF.TIME.COL = ':';
                              OUT_BUF.TIME.MIN = INBUF.TIME.MIN;
                              END;
                          OUT_BUF.TOPIC = INBUF.TOPIC;
                          CALL M$WRITE (WRLO); OBUF = ' ';
                          CALL READ;
                          CALL CHARBIN (DY,INBUF.DATE.YEAR);
                          CALL CHARBIN (DM,INBUF.DATE.MONTH);
                          CALL CHARBIN (DD,INBUF.DATE.DAY);
                          GOTO LOOP;
                          END;
                       ELSE IF (((DM<IMONTHS) OR
                               (((DY>=78) AND (DY+1900<YEAR)) OR
                               ((DY<78)  AND (DY+2000<YEAR)))) AND
                               (EOF_FLAG='0'B)) THEN DO;
                             CALL READ;
                             GOTO ST;
                             END;
NOSCH:                 IF (OBUF ~= '                     ') THEN
                          CALL M$WRITE (WRLO);
                       LOWLI = IDAYS + 1;
                     SELECT ('0'B);
                       CALL M$WRITE (WRLO);
                     END;
                  SELECT ('1'B);
                    CALL CONCAT(TEMP_BUF,'         ',OBUF);
                    DO CASE (BUF_TYPE);
                     CASE (1);
                       PINCRC(BUF1$,ROW#)->ROWV = TEMP_BUF;
                     CASE (2);
                       PINCRC(BUF2$,ROW#)->ROWV = TEMP_BUF;
                     END;
                    ROW# = ROW# + 40;
                  END;
                 CBUF$ = PINCRC(WRLO.BUF_.BUF$,1); OBUF = ' ';
                 IF (IDAYS~=MONTHS(IMONTHS)) THEN
                    I = 1;
                 ELSE IF (I ~= 22) THEN DO;
                       TEMP = I;
                       OBUF = ' ';
                       CALL M$WRITE(WRLO);
                       END;
                    ELSE DO;
                       I = 1;
                       TEMP = 1;
                       OBUF = ' ';
                       CALL M$WRITE (WRLO);
                       END;
                 END;
              END;
           END;
 
 
END CREATE_CALEN_FILE;
 
READ: PROC;
 
READ_AGAIN:
   CALL M$READ (RD) WHENALTRETURN DO;
       EOF_FLAG = '1'B;
         RETURN;
       END;
 
/* Now check for record validity */
 
   IF (INBUF.DATE.SLASH1 ~= '/' OR INBUF.DATE.SLASH2 ~='/' OR INBUF.TIME.COLON ~= ':') THEN
       GOTO READ_AGAIN;
 
END READ;
 
 
/*M*  This PROC is called only if FORMAT is ON. The output
       buffer (OBUF) is set such that two months are
       outputed side by side.                                 */
 
PRINT_FILE: PROC;
 
DCL ROW1 CHAR(40) STATIC;
DCL ROW2 CHAR(40) STATIC;
 
        DO ROW# = 0 TO 399 BY 40;
           ROW1 = PINCRC(BUF1$,ROW#)->ROWV;
           ROW2 = PINCRC(BUF2$,ROW#)->ROWV;
           CALL CONCAT (OBUF,ROW1,ROW2);
           CALL M$WRITE(WRLO);
           END;
END PRINT_FILE;
 
END CALEN;
