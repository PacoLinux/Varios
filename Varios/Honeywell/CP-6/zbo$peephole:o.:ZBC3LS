

CC.C03    File=zbo$peephole:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=1  
        1         1             #ifndef NORCSID
        2         2             static char rcsid[] = "$Header: peephole.c,v 2.3 87/03/10 01:40:16 ceriel Exp
                               $";
        3         3             #endif
        4         4
        5         5             #include "param:h"
        6         6             #include "types:h"
        7         7             #include "assert:h"
        8         8             #include "line:h"
        9         9             #include "lookup:h"
       10        10             #include "proinf:h"
       11        11             #include "alloc:h"
       12        12             #include "pattern:h"
       13        13             #include "em_spec:h"
       14        14             #include "em_mnem:h"
       15        15             #include "optim:h"
       16        16             #include "ext:h"
       17        17
       18        18             /*
       19        19              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
       20        20              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
       21        21              *
       22        22              * Author: Hans van Staveren
       23        23              */
       24        24
       25        25             /* #define CHK_HASH   /* print numbers patterns are hashed to */
       26        26             #ifdef CHK_HASH
       27        27   *S*       #include <stdio:h>
       28        28   *S*       #endif
       29        29
       30        30             #define ILLHASH 0177777
       31        31             short pathash[256];   /* table of indices into pattern[] */
       32        32
       33        33             int opind = 0;     /* second index of next matrix */
       34        34             byte transl[op_plast-op_pfirst+1][3] = {
       35        35    1         /* LLP */   { op_LLP, op_lol, op_ldl },
CC.C03    File=zbo$peephole:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=2  
       36        36    1         /* LEP */   { op_LEP, op_loe, op_lde },
       37        37    1         /* SLP */   { op_SLP, op_stl, op_sdl },
       38        38    1         /* SEP */   { op_SEP, op_ste, op_sde }
       39        39    1        };
       40        40
       41        41             opcheck(bp) register byte *bp; {
       42        42    1
       43        43    1         if (((*bp)&BMASK) >= op_pfirst)
       44        44    1            *bp = transl[((*bp)&BMASK)-op_pfirst][opind];
       45        45    1        }
       46        46
       47        47             /*
       48        48              * The hashing method used is believed to be reasonably efficient.
       49        49              * A minor speed improvement could be obtained by keeping a boolean
       50        50              * array telling which opcode has any patterns starting with it.
       51        51              * Currently only about one third of the opcodes actually have a
       52        52              * pattern starting with it, but they are the most common ones.
       53        53              * Estimated improvement possible: about 2%
       54        54              */
       55        55
       56        56             hashpatterns() {
       57        57    1         short index;
       58        58    1         register byte *bp,*tp;
       59        59    1         register short i;
       60        60    1         unsigned short hashvalue;
       61        61    1         byte *save;
       62        62    1         int patlen;
       63        63    1
       64        64    1         if (pointersize == wordsize)
       65        65    1            opind=1;
       66        66    1         else if (pointersize == 2*wordsize)
       67        67    1            opind=2;
       68        68    1         index = lastind;  /* set by mktab */
       69        69    1         while (index != 0) {
       70        70    2            bp = &pattern[index];
       71        71    2            tp = &bp[PO_MATCH];
       72        72    2            i = *tp++&BMASK;
CC.C03    File=zbo$peephole:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=3  
       73        73    2            if (i==BMASK) {
       74        74    3               i = *tp++&BMASK;
       75        75    3               i |= (*tp++&BMASK)<<8;
       76        76    3            }
       77        77    2            save = tp;
       78        78    2            patlen = i;
       79        79    2            while (i--)
       80        80    2               opcheck(tp++);
       81        81    2            if ((*tp++&BMASK)==BMASK)
       82        82    2               tp += 2;
       83        83    2            i = *tp++&BMASK;
       84        84    2            if (i==BMASK) {
       85        85    3               i = *tp++&BMASK;
       86        86    3               i |= (*tp++&BMASK)<<8;
       87        87    3            }
       88        88    2            while (i--) {
       89        89    3               opcheck(tp++);
       90        90    3               if ((*tp++&BMASK)==BMASK)
       91        91    3                  tp += 2;
       92        92    3            }
       93        93    2
       94        94    2            /*
       95        95    2             * Now the special opcodes are filled
       96        96    2             * in properly, we can hash the pattern
       97        97    2             */
       98        98    2
       99        99    2            hashvalue = 0;
      100       100    2            tp = save;
      101       101    2            switch(patlen) {
      102       102    3            default: /* 3 or more */
      103       103    3               hashvalue = (hashvalue<<4)^(*tp++&BMASK);
      104       104    3            case 2:
      105       105    3               hashvalue = (hashvalue<<4)^(*tp++&BMASK);
      106       106    3            case 1:
      107       107    3               hashvalue = (hashvalue<<4)^(*tp++&BMASK);
      108       108    3            }
      109       109    2            assert(hashvalue!= ILLHASH);
CC.C03    File=zbo$peephole:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=4  
      110       110    2            i=index;
      111       111    2            index = (bp[PO_NEXT]&BMASK)|(bp[PO_NEXT+1]<<8);
      112       112    2            bp[PO_HASH] = hashvalue>>8;
      113       113    2            hashvalue &= BMASK;
      114       114    2            bp[PO_NEXT] = pathash[hashvalue]&BMASK;
      115       115    2            bp[PO_NEXT+1] = pathash[hashvalue]>>8;
      116       116    2            pathash[hashvalue] = i;
      117       117    2        #ifdef CHK_HASH
      118       118   *S*           fprintf(stderr,"%d\n",hashvalue);
      119       119   *S*       #endif
      120       120    2         }
      121       121    1        }
      122       122
      123       123             peephole() {
      124       124    1         static bool phashed = FALSE;
      125       125    1
      126       126    1         if (!phashed) {
      127       127    2            hashpatterns();
      128       128    2            phashed=TRUE;
      129       129    2         }
      130       130    1         optimize();
      131       131    1        }
      132       132
      133       133             optimize() {
      134       134    1         register num_p *npp,np;
      135       135    1         register instr;
      136       136    1
      137       137    1         basicblock(&instrs);
      138       138    1         for (npp=curpro.numhash;npp< &curpro.numhash[NNUMHASH]; npp++)
      139       139    1            for (np = *npp; np != (num_p) 0; np=np->n_next) {
      140       140    2               if(np->n_line->l_next == (line_p) 0)
      141       141    2                  continue;
      142       142    2               instr = np->n_line->l_next->l_instr&BMASK;
      143       143    2               if (instr == op_lab || instr == op_bra)
      144       144    2                  np->n_repl = np->n_line->l_next->l_a.la_np;
      145       145    2               else
      146       146    2                  basicblock(&np->n_line->l_next);
CC.C03    File=zbo$peephole:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=5  
      147       147    2            }
      148       148    1        }
      149       149
      150       150             offset oabs(off) offset off; {
      151       151    1
      152       152    1         return(off >= 0 ? off : -off);
      153       153    1        }
      154       154
      155       155             line_p repline(ev,patlen) eval_t ev; {
      156       156    1         register line_p lp;
      157       157    1         register iarg_p iap;
      158       158    1         register sym_p sp;
      159       159    1         offset diff,newdiff;
      160       160    1
      161       161    1         assert(ev.e_typ != EV_UNDEF);
      162       162    1         switch(ev.e_typ) {
      163       163    2         case EV_CONST:
      164       164    2            if ((short) ev.e_v.e_con == ev.e_v.e_con) {
      165       165    3               if (CANMINI((short) ev.e_v.e_con))
      166       166    3                  lp = newline((short) (ev.e_v.e_con)+Z_OPMINI);
      167       167    3               else {
      168       168    4                  lp = newline(OPSHORT);
      169       169    4                  lp->l_a.la_short = (short) ev.e_v.e_con;
      170       170    4               }
      171       171    3            } else {
      172       172    3               lp = newline(OPOFFSET);
      173       173    3               lp->l_a.la_offset = ev.e_v.e_con;
      174       174    3            }
      175       175    2            return(lp);
      176       176    2         case EV_NUMLAB:
      177       177    2            lp = newline(OPNUMLAB);
      178       178    2            lp->l_a.la_np = ev.e_v.e_np;
      179       179    2            return(lp);
      180       180    2         default: /* fragment + offset */
      181       181    2            /*
      182       182    2             * There is a slight problem here, because we have to
      183       183    2             * map fragment+offset to symbol+offset.
CC.C03    File=zbo$peephole:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=6  
      184       184    2             * Fortunately the fragment we have must be the fragment
      185       185    2             * of one of the symbols in the matchpattern.
      186       186    2             * So a short search should do the job.
      187       187    2             */
      188       188    2            sp = (sym_p) 0;
      189       189    2            for (iap= &iargs[patlen-1]; iap >= iargs; iap--)
      190       190    2               if (iap->ia_ev.e_typ == ev.e_typ) {
      191       191    3                  /*
      192       192    3                   * Although lint complains, diff is not used
      193       193    3                   * before set.
      194       194    3                   *
      195       195    3                   * The proof is left as an exercise to the
      196       196    3                   * reader.
      197       197    3                   */
      198       198    3                  newdiff = oabs(iap->ia_sp->s_value-ev.e_v.e_con);
      199       199    3                  if (sp==(sym_p) 0 || newdiff < diff) {
      200       200    4                     sp = iap->ia_sp;
      201       201    4                     diff = newdiff;
      202       202    4                  }
      203       203    3               }
      204       204    2            assert(sp != (sym_p) 0);
      205       205    2            if (diff == 0) {
      206       206    3               lp = newline(OPSYMBOL);
      207       207    3               lp->l_a.la_sp = sp;
      208       208    3            } else {
      209       209    3               diff = ev.e_v.e_con - sp->s_value;
      210       210    3               if ((short) diff == diff) {
      211       211    4                  lp = newline(OPSVAL);
      212       212    4                  lp->l_a.la_sval.lasv_short = (short) diff;
      213       213    4                  lp->l_a.la_sval.lasv_sp = sp;
      214       214    4               } else {
      215       215    4                  lp = newline(OPLVAL);
      216       216    4                  lp->l_a.la_lval.lalv_offset = diff;
      217       217    4                  lp->l_a.la_lval.lalv_sp = sp;
      218       218    4               }
      219       219    3            }
      220       220    2            return(lp);
CC.C03    File=zbo$peephole:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=7  
      221       221    2         }
      222       222    1        }
      223       223
      224       224             offset rotate(w,amount) offset w,amount; {
      225       225    1         offset highmask,lowmask;
      226       226    1
      227       227    1        #ifndef LONGOFF
      228       228   *S*        assert(wordsize<=4);
      229       229   *S*       #endif
      230       230    1         highmask = (offset)(-1) << amount;
      231       231    1         lowmask = ~highmask;
      232       232    1         if (wordsize != 4)
      233       233    1            highmask &= wordsize==2 ? 0xFFFF : 0xFF;
      234       234    1         return(((w<<amount)&highmask)|((w>>(8*wordsize-amount))&lowmask));
      235       235    1        }
      236       236
      237       237             eval_t undefres = { EV_UNDEF };
      238       238
      239       239             eval_t compute(pexp) register expr_p pexp; {
      240       240    1         eval_t leaf1,leaf2,res;
      241       241    1         register i;
      242       242    1         register sym_p sp;
      243       243    1         offset mask;
      244       244    1
      245       245    1         switch(nparam[pexp->ex_operator]) {
      246       246    2         default:
      247       247    2            assert(FALSE);
      248       248    2         case 2:
      249       249    2            leaf2 = compute(&enodes[pexp->ex_rnode]);
      250       250    2            if (leaf2.e_typ == EV_UNDEF ||
      251       251    2                nonumlab[pexp->ex_operator] && leaf2.e_typ == EV_NUMLAB ||
      252       252    2                onlyconst[pexp->ex_operator] && leaf2.e_typ != EV_CONST)
      253       253    2               return(undefres);
      254       254    2         case 1:
      255       255    2            leaf1 = compute(&enodes[pexp->ex_lnode]);
      256       256    2            if (leaf1.e_typ == EV_UNDEF ||
      257       257    2                nonumlab[pexp->ex_operator] && leaf1.e_typ == EV_NUMLAB ||
CC.C03    File=zbo$peephole:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=8  
      258       258    2                onlyconst[pexp->ex_operator] && leaf1.e_typ != EV_CONST)
      259       259    2               return(undefres);
      260       260    2         case 0:
      261       261    2            break;
      262       262    2         }
      263       263    1
      264       264    1         res.e_typ = EV_CONST;
      265       265    1         res.e_v.e_con = 0;
      266       266    1         switch(pexp->ex_operator) {
      267       267    2         default:
      268       268    2            assert(FALSE);
      269       269    2         case EX_CON:
      270       270    2            res.e_v.e_con = (offset) pexp->ex_lnode;
      271       271    2            break;
      272       272    2         case EX_ARG:
      273       273    2            return(iargs[pexp->ex_lnode - 1].ia_ev);
      274       274    2         case EX_CMPEQ:
      275       275    2            if (leaf1.e_typ != leaf2.e_typ)
      276       276    2               return(undefres);
      277       277    2            if (leaf1.e_typ == EV_NUMLAB) {
      278       278    3               if (leaf1.e_v.e_np == leaf2.e_v.e_np)
      279       279    3                  res.e_v.e_con = 1;
      280       280    3               break;
      281       281    3            }
      282       282    2            if (leaf1.e_v.e_con == leaf2.e_v.e_con)
      283       283    2               res.e_v.e_con = 1;
      284       284    2            break;
      285       285    2         case EX_CMPNE:
      286       286    2            if (leaf1.e_typ != leaf2.e_typ) {
      287       287    3               res.e_v.e_con = 1;
      288       288    3               break;
      289       289    3            }
      290       290    2            if (leaf1.e_typ == EV_NUMLAB) {
      291       291    3               if (leaf1.e_v.e_np != leaf2.e_v.e_np)
      292       292    3                  res.e_v.e_con = 1;
      293       293    3               break;
      294       294    3            }
CC.C03    File=zbo$peephole:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=9  
      295       295    2            if (leaf1.e_v.e_con != leaf2.e_v.e_con)
      296       296    2               res.e_v.e_con = 1;
      297       297    2            break;
      298       298    2         case EX_CMPGT:
      299       299    2            if (leaf1.e_typ != leaf2.e_typ)
      300       300    2               return(undefres);
      301       301    2            res.e_v.e_con = leaf1.e_v.e_con > leaf2.e_v.e_con;
      302       302    2            break;
      303       303    2         case EX_CMPGE:
      304       304    2            if (leaf1.e_typ != leaf2.e_typ)
      305       305    2               return(undefres);
      306       306    2            res.e_v.e_con = leaf1.e_v.e_con >= leaf2.e_v.e_con;
      307       307    2            break;
      308       308    2         case EX_CMPLT:
      309       309    2            if (leaf1.e_typ != leaf2.e_typ)
      310       310    2               return(undefres);
      311       311    2            res.e_v.e_con = leaf1.e_v.e_con < leaf2.e_v.e_con;
      312       312    2            break;
      313       313    2         case EX_CMPLE:
      314       314    2            if (leaf1.e_typ != leaf2.e_typ)
      315       315    2               return(undefres);
      316       316    2            res.e_v.e_con = leaf1.e_v.e_con <= leaf2.e_v.e_con;
      317       317    2            break;
      318       318    2         case EX_OR2:
      319       319    2            if (leaf1.e_v.e_con != 0)
      320       320    2               return(leaf1);
      321       321    2            leaf2 = compute(&enodes[pexp->ex_rnode]);
      322       322    2            if (leaf2.e_typ != EV_CONST)
      323       323    2               return(undefres);
      324       324    2            return(leaf2);
      325       325    2         case EX_AND2:
      326       326    2            if (leaf1.e_v.e_con == 0)
      327       327    2               return(leaf1);
      328       328    2            leaf2 = compute(&enodes[pexp->ex_rnode]);
      329       329    2            if (leaf2.e_typ != EV_CONST)
      330       330    2               return(undefres);
      331       331    2            return(leaf2);
CC.C03    File=zbo$peephole:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=10 
      332       332    2         case EX_OR1:
      333       333    2            res.e_v.e_con = leaf1.e_v.e_con | leaf2.e_v.e_con;
      334       334    2            break;
      335       335    2         case EX_XOR1:
      336       336    2            res.e_v.e_con = leaf1.e_v.e_con ^ leaf2.e_v.e_con;
      337       337    2            break;
      338       338    2         case EX_AND1:
      339       339    2            res.e_v.e_con = leaf1.e_v.e_con & leaf2.e_v.e_con;
      340       340    2            break;
      341       341    2         case EX_TIMES:
      342       342    2            res.e_v.e_con = leaf1.e_v.e_con * leaf2.e_v.e_con;
      343       343    2            break;
      344       344    2         case EX_DIVIDE:
      345       345    2            res.e_v.e_con = leaf1.e_v.e_con / leaf2.e_v.e_con;
      346       346    2            break;
      347       347    2         case EX_MOD:
      348       348    2            res.e_v.e_con = leaf1.e_v.e_con % leaf2.e_v.e_con;
      349       349    2            break;
      350       350    2         case EX_LSHIFT:
      351       351    2            res.e_v.e_con = leaf1.e_v.e_con << leaf2.e_v.e_con;
      352       352    2            break;
      353       353    2         case EX_RSHIFT:
      354       354    2            res.e_v.e_con = leaf1.e_v.e_con >> leaf2.e_v.e_con;
      355       355    2            break;
      356       356    2         case EX_UMINUS:
      357       357    2            res.e_v.e_con = -leaf1.e_v.e_con;
      358       358    2            break;
      359       359    2         case EX_NOT:
      360       360    2            res.e_v.e_con = !leaf1.e_v.e_con;
      361       361    2            break;
      362       362    2         case EX_COMP:
      363       363    2            res.e_v.e_con = ~leaf1.e_v.e_con;
      364       364    2            break;
      365       365    2         case EX_PLUS:
      366       366    2            if (leaf1.e_typ >= EV_FRAG) {
      367       367    3               if (leaf2.e_typ >= EV_FRAG)
      368       368    3                  return(undefres);
CC.C03    File=zbo$peephole:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=11 
      369       369    3               res.e_typ = leaf1.e_typ;
      370       370    3            } else
      371       371    2               res.e_typ = leaf2.e_typ;
      372       372    2            res.e_v.e_con = leaf1.e_v.e_con + leaf2.e_v.e_con;
      373       373    2            break;
      374       374    2         case EX_MINUS:
      375       375    2            if (leaf1.e_typ >= EV_FRAG) {
      376       376    3               if (leaf2.e_typ == EV_CONST)
      377       377    3                  res.e_typ = leaf1.e_typ;
      378       378    3               else if (leaf2.e_typ != leaf1.e_typ)
      379       379    3                  return(undefres);
      380       380    3            } else if (leaf2.e_typ >= EV_FRAG)
      381       381    2               return(undefres);
      382       382    2            res.e_v.e_con = leaf1.e_v.e_con - leaf2.e_v.e_con;
      383       383    2            break;
      384       384    2         case EX_POINTERSIZE:
      385       385    2            res.e_v.e_con = pointersize;
      386       386    2            break;
      387       387    2         case EX_WORDSIZE:
      388       388    2            res.e_v.e_con = wordsize;
      389       389    2            break;
      390       390    2         case EX_NOTREG:
      391       391    2            res.e_v.e_con = !inreg(leaf1.e_v.e_con);
      392       392    2            break;
      393       393    2         case EX_DEFINED:
      394       394    2            leaf1 = compute(&enodes[pexp->ex_lnode]);
      395       395    2            res.e_v.e_con = leaf1.e_typ != EV_UNDEF;
      396       396    2            break;
      397       397    2         case EX_SAMESIGN:
      398       398    2            res.e_v.e_con = (leaf1.e_v.e_con ^ leaf2.e_v.e_con) >= 0;
      399       399    2            break;
      400       400    2         case EX_ROM:
      401       401    2            if ((sp = iargs[pexp->ex_lnode - 1].ia_sp) != (sym_p) 0 &&
      402       402    2                sp->s_rom != (offset *) 0) {
      403       403    3               leaf2 = compute(&enodes[pexp->ex_rnode]);
      404       404    3               if (leaf2.e_typ != EV_CONST ||
      405       405    3                   leaf2.e_v.e_con < 0 ||
CC.C03    File=zbo$peephole:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=12 
      406       406    3                   leaf2.e_v.e_con >= MAXROM)
      407       407    3                  return(undefres);
      408       408    3               res.e_v.e_con = sp->s_rom[leaf2.e_v.e_con];
      409       409    3               break;
      410       410    3            } else
      411       411    2               return(undefres);
      412       412    2         case EX_SFIT:
      413       413    2            mask = 0;
      414       414    2            for (i=leaf2.e_v.e_con - 1;i < 8*sizeof(offset); i++)
      415       415    2               mask |= 1<<i;
      416       416    2            res.e_v.e_con = (leaf1.e_v.e_con&mask) == 0 ||
      417       417    2                         (leaf1.e_v.e_con&mask) == mask;
      418       418    2            break;
      419       419    2         case EX_UFIT:
      420       420    2            mask = 0;
      421       421    2            for (i=leaf2.e_v.e_con;i < 8*sizeof(offset); i++)
      422       422    2               mask |= 1<<i;
      423       423    2            res.e_v.e_con = (leaf1.e_v.e_con&mask) == 0;
      424       424    2            break;
      425       425    2         case EX_ROTATE:
      426       426    2            res.e_v.e_con = rotate(leaf1.e_v.e_con,leaf2.e_v.e_con);
      427       427    2            break;
      428       428    2         }
      429       429    1         return(res);
      430       430    1        }
      431       431
      432       432             #ifdef ALLOWSPECIAL
      433       433   *S*       extern bool special();
      434       434   *S*       #endif
      435       435
      436       436             bool tryrepl(lpp,bp,patlen)
      437       437             line_p *lpp;
      438       438             register byte *bp;
      439       439             int patlen;
      440       440             {
      441       441    1         int rpllen,instr,rplval;
      442       442    1         register line_p lp;
CC.C03    File=zbo$peephole:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=13 
      443       443    1         line_p replacement,*rlpp,tp;
      444       444    1
      445       445    1         rpllen = *bp++&BMASK;
      446       446    1         if (rpllen == BMASK) {
      447       447    2            rpllen = *bp++&BMASK;
      448       448    2            rpllen |= (*bp++&BMASK)<<8;
      449       449    2         }
      450       450    1        #ifdef ALLOWSPECIAL
      451       451   *S*        if (rpllen == 1 && *bp == 0)
      452       452   *S*           return(special(lpp,bp+1,patlen));
      453       453   *S*       #endif
      454       454    1         replacement = (line_p) 0;
      455       455    1         rlpp = &replacement;
      456       456    1         while (rpllen--) {
      457       457    2            instr = *bp++&BMASK;
      458       458    2            rplval = *bp++&BMASK;
      459       459    2            if (rplval == BMASK) {
      460       460    3               rplval = (*bp++&BMASK);
      461       461    3               rplval |= (*bp++&BMASK)<<8;
      462       462    3            }
      463       463    2            if (rplval)
      464       464    2               lp = repline(compute(&enodes[rplval]),patlen);
      465       465    2            else
      466       466    2               lp = newline(OPNO);
      467       467    2
      468       468    2            /*
      469       469    2             * One replacement instruction is generated,
      470       470    2             * link in list and proceed with the next one.
      471       471    2             */
      472       472    2
      473       473    2            if (instr == op_lab)
      474       474    2               lp->l_a.la_np->n_line = lp;
      475       475    2            *rlpp = lp;
      476       476    2            rlpp = &lp->l_next;
      477       477    2            lp->l_instr = instr;
      478       478    2         }
      479       479    1
CC.C03    File=zbo$peephole:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=14 
      480       480    1         /*
      481       481    1          * Replace instructions matched by the created replacement
      482       482    1          */
      483       483    1
      484       484    1
      485       485    1         OPTIM((bp[0]&BMASK)|(bp[1]&BMASK)<<8);
      486       486    1         for (lp= *lpp;patlen>0;patlen--,tp=lp,lp=lp->l_next)
      487       487    1            ;
      488       488    1         tp->l_next = (line_p) 0;
      489       489    1         *rlpp = lp;
      490       490    1         lp = *lpp;
      491       491    1         *lpp = replacement;
      492       492    1         while ( lp != (line_p) 0 ) {
      493       493    2            tp = lp->l_next;
      494       494    2            oldline(lp);
      495       495    2            lp = tp;
      496       496    2         }
      497       497    1         return(TRUE);
      498       498    1        }
      499       499
      500       500             bool trypat(lpp,bp,len)
      501       501             line_p *lpp;
      502       502             register byte *bp;
      503       503             int len;
      504       504             {
      505       505    1         register iarg_p iap;
      506       506    1         int i,patlen;
      507       507    1         register line_p lp;
      508       508    1         eval_t result;
      509       509    1
      510       510    1         patlen = *bp++&BMASK;
      511       511    1         if (patlen == BMASK) {
      512       512    2            patlen = *bp++&BMASK;
      513       513    2            patlen |= (*bp++&BMASK)<<8;
      514       514    2         }
      515       515    1         if (len == 3) {
      516       516    2            if (patlen<3)
CC.C03    File=zbo$peephole:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=15 
      517       517    2               return(FALSE);
      518       518    2         } else {
      519       519    2            if (patlen != len)
      520       520    2               return(FALSE);
      521       521    2         }
      522       522    1
      523       523    1         /*
      524       524    1          * Length is ok, now check opcodes
      525       525    1          */
      526       526    1
      527       527    1         for (i=0,lp= *lpp;i<patlen && lp != (line_p) 0;i++,lp=lp->l_next)
      528       528    1            if (lp->l_instr != *bp++)
      529       529    1               return(FALSE);
      530       530    1         if (i != patlen)
      531       531    1            return(FALSE);
      532       532    1
      533       533    1         /*
      534       534    1          * opcodes are also correct, now comes the hard part
      535       535    1          */
      536       536    1
      537       537    1         for(i=0,lp= *lpp,iap= iargs; i<patlen;i++,iap++,lp=lp->l_next) {
      538       538    2            switch(lp->l_optyp) {
      539       539    3            case OPNO:
      540       540    3               iap->ia_ev.e_typ = EV_UNDEF;
      541       541    3               break;
      542       542    3            default:
      543       543    3               iap->ia_ev.e_typ = EV_CONST;
      544       544    3               iap->ia_ev.e_v.e_con = (lp->l_optyp&BMASK)-Z_OPMINI;
      545       545    3               break;
      546       546    3            case OPSHORT:
      547       547    3               iap->ia_ev.e_typ = EV_CONST;
      548       548    3               iap->ia_ev.e_v.e_con = lp->l_a.la_short;
      549       549    3               break;
      550       550    3        #ifdef LONGOFF
      551       551    3            case OPOFFSET:
      552       552    3               iap->ia_ev.e_typ = EV_CONST;
      553       553    3               iap->ia_ev.e_v.e_con = lp->l_a.la_offset;
CC.C03    File=zbo$peephole:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=16 
      554       554    3               break;
      555       555    3        #endif
      556       556    3            case OPNUMLAB:
      557       557    3               iap->ia_ev.e_typ = EV_NUMLAB;
      558       558    3               iap->ia_ev.e_v.e_np = lp->l_a.la_np;
      559       559    3               break;
      560       560    3            case OPSYMBOL:
      561       561    3               iap->ia_ev.e_typ = lp->l_a.la_sp->s_frag;
      562       562    3               iap->ia_sp = lp->l_a.la_sp;
      563       563    3               iap->ia_ev.e_v.e_con = lp->l_a.la_sp->s_value;
      564       564    3               break;
      565       565    3            case OPSVAL:
      566       566    3               iap->ia_ev.e_typ = lp->l_a.la_sval.lasv_sp->s_frag;
      567       567    3               iap->ia_sp = lp->l_a.la_sval.lasv_sp;
      568       568    3               iap->ia_ev.e_v.e_con = lp->l_a.la_sval.lasv_sp->s_value + lp->l_a.la_sv
                               al.lasv_short;
      569       569    3               break;
      570       570    3        #ifdef LONGOFF
      571       571    3            case OPLVAL:
      572       572    3               iap->ia_ev.e_typ = lp->l_a.la_lval.lalv_sp->s_frag;
      573       573    3               iap->ia_sp = lp->l_a.la_lval.lalv_sp;
      574       574    3               iap->ia_ev.e_v.e_con = lp->l_a.la_lval.lalv_sp->s_value + lp->l_a.la_lv
                               al.lalv_offset;
      575       575    3               break;
      576       576    3        #endif
      577       577    3            }
      578       578    2         }
      579       579    1         i = *bp++&BMASK;
      580       580    1         if ( i==BMASK ) {
      581       581    2            i = *bp++&BMASK;
      582       582    2            i |= (*bp++&BMASK)<<8;
      583       583    2         }
      584       584    1         if ( i != 0) {
      585       585    2            /* there is a condition */
      586       586    2            result = compute(&enodes[i]);
      587       587    2            if (result.e_typ != EV_CONST || result.e_v.e_con == 0)
      588       588    2               return(FALSE);
CC.C03    File=zbo$peephole:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=17 
      589       589    2         }
      590       590    1         return(tryrepl(lpp,bp,patlen));
      591       591    1        }
      592       592
      593       593             basicblock(alpp) line_p *alpp; {
      594       594    1         register line_p *lpp,lp;
      595       595    1         bool madeopt;
      596       596    1         unsigned short hash[3];
      597       597    1         line_p *next;
      598       598    1         register byte *bp;
      599       599    1         int i;
      600       600    1         short index;
      601       601    1         int npasses;
      602       602    1
      603       603    1         npasses = 0;
      604       604    1         do {  /* make pass over basicblock */
      605       605    2             lpp = alpp; madeopt = FALSE;
      606       606    2             while ((*lpp) != (line_p) 0 && ((*lpp)->l_instr&BMASK) != op_lab) {
      607       607    3            lp = *lpp; next = &lp->l_next;
      608       608    3            hash[0] = lp->l_instr&BMASK;
      609       609    3            lp=lp->l_next;
      610       610    3            if (lp != (line_p) 0) {
      611       611    4               hash[1] = (hash[0]<<4)^(lp->l_instr&BMASK);
      612       612    4               lp=lp->l_next;
      613       613    4               if (lp != (line_p) 0)
      614       614    4                  hash[2] = (hash[1]<<4)^(lp->l_instr&BMASK);
      615       615    4               else
      616       616    4                  hash[2] = ILLHASH;
      617       617    4            } else {
      618       618    4               hash[1] = ILLHASH;
      619       619    4               hash[2] = ILLHASH;
      620       620    4            }
      621       621    3
      622       622    3            /*
      623       623    3             * hashvalues computed. Try for longest pattern first
      624       624    3             */
      625       625    3
CC.C03    File=zbo$peephole:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=18 
      626       626    3            for (i=2;i>=0;i--) {
      627       627    4                index = pathash[hash[i]&BMASK];
      628       628    4                while (index != 0) {
      629       629    5               bp = &pattern[index];
      630       630    5               if((bp[PO_HASH]&BMASK) == (hash[i]>>8))
      631       631    5                   if(trypat(lpp,&bp[PO_MATCH],i+1)) {
      632       632    6                  madeopt = TRUE;
      633       633    6                  next = lpp;
      634       634    6                  i = 0;   /* dirty way of double break */
      635       635    6                  break;
      636       636    6                   }
      637       637    5               index=(bp[PO_NEXT]&BMASK)|(bp[PO_NEXT+1]<<8);
      638       638    5                }
      639       639    4            }
      640       640    3            lpp = next;
      641       641    3             }
      642       642    2         } while(madeopt && ++npasses<5000); /* as long as there is progress */
      643       643    1         assert(!madeopt);
      644       644    1        }
      645       645
---  Include file information  ---

   zbo$param:h.:ZBC3TOU. is referenced
   zbo$types:h.:ZBC3TOU. is referenced
   zbo$assert:h.:ZBC3TOU. is referenced
   zbo$line:h.:ZBC3TOU. is referenced
   zbo$lookup:h.:ZBC3TOU. is referenced
   zbo$proinf:h.:ZBC3TOU. is referenced
   zbo$alloc:h.:ZBC3TOU. is referenced
   zbo$pattern:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   zbo$optim:h.:ZBC3TOU. is referenced
   zbo$ext:h.:ZBC3TOU. is referenced
   stdio:h.:LIBRARY. is referenced

CC.C03    File=zbo$peephole:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=19 
No diagnostics were issued in the file zbo$peephole:c.:ZBC3TSI
