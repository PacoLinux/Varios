/*M* MAKE -- Command syntax                                      */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*
     Make accepts the following commands:
 
     name     =  stuff
     namelist :  namelist
      commands
 
*/
MAKECOMMAND   (DEF) = (COMMENT    | ACTIONDEFN | STRINGDEFN |   ;
                       RULEDEFN   | EMAILDEFN  | CPP              )
 
PARSECOMMAND  (DEF) = .asym+'$'- ( .e                             | ;
                                   SIMPLE-        PARSECOMMAND-   | ;
                                   '${' SPECIAL '}'- PARSECOMMAND | ;
                                   '$(' SPECIAL ')'- PARSECOMMAND )
 
SRCH          (DEF) =  ( FID1 | FIDLISTS )
 
INVOKATION    (DEF) =  <',',INVOKE> .e
 
FIDLISTS            =  '(' FIDLIST ')'  [.b FIDLISTS] .e
FIDLIST       (56)  =  <',',.FID>
FID1          (57)  =  .FID
 
 
SPECIAL             = ( SPECIALS | NAME ) [REPLACEMENT]
 
REPLACEMENT         =  ':'-   STRING1- '='- STRING2-
STRING1      (50)   =  .asym+'='-
STRING2      (51)   =  .asym+')'-
 
 
SPECIALS            =  (SPECLONG | SPECNAMES)
 
NAME          (1)   =  .alpha+'0123456789_-.$?*#200'
NAMELIST      (2)   =  <[','],NAME>
 
SPECNAMES           =  (  CHANGE_NAMES      |  PREDECESSOR_TREE  | ;
                          ARCHIVE_NAME      |  SINGLE_DOLLAR     | ;
                          NO_SUFFIX_NAME    |  SI_NAME           | ;
                          OU_NAME           |  LS_NAME           | ;
                          DO_NAME           |  DEPENDENT_NAMES      )
 
SPECLONG            =  (  NO_SUFFIX_FILE    |  SI_FILE           | ;
                          OU_FILE           |  LS_FILE           | ;
                          DO_FILE                                | ;
                          NO_SUFFIX_ACCT    |  SI_ACCT           | ;
                          OU_ACCT           |  LS_ACCT           | ;
                          DO_ACCT                                | ;
                          DYN_OU_NAME       |  DYN_OU_FILE       | ;
                          DYN_OU_ACCT                               )
 
CHANGE_NAMES     (2)   =  '?'-
PREDECESSOR_TREE (3)   =  '!'-
ARCHIVE_NAME     (4)   =  '%'-
SINGLE_DOLLAR    (5)   =  '$'-
NO_SUFFIX_NAME   (6)   =  '*'-
SI_NAME          (7)   =  '<'-
OU_NAME          (8)   =  '@'-
LS_NAME          (9)   =  '&'-
DO_NAME         (10)   =  '+'-
NO_SUFFIX_FILE  (11)   =  '*F'
SI_FILE         (12)   =  '<F'
OU_FILE         (13)   =  '@F'
LS_FILE         (14)   =  '&F'
DO_FILE         (15)   =  '+F'
NO_SUFFIX_ACCT  (16)   =  '*D'
SI_ACCT         (17)   =  '<D'
OU_ACCT         (18)   =  '@D'
LS_ACCT         (19)   =  '&D'
DO_ACCT         (20)   =  '+D'
DYN_OU_NAME     (21)   =  '$$@'
DYN_OU_FILE     (22)   =  '$$(@F)'-
DYN_OU_ACCT     (23)   =  '$$(@D)'-
DEPENDENT_NAMES (24)   =  '^'-
 
SIMPLE              =  '$'- ( SPECNAMES- | SIMPLE_NAME- | IGNORE_NAME-)
SIMPLE_NAME   (1)   =  .alpha1+'0123456789_-'-
IGNORE_NAME   (49)  =  .alpha+'0123456789_!"%&''-=^~\|@,.:;*+/?><#200'-
 
 
 
STRINGDEFN    (1)   =  NAME '=' PARSECOMMAND             .e
RULEDEFN      (2)   =  NAMELIST ':' [.b NAMELIST] [COMMENT] .e
ACTIONDEFN    (3)   =  .B .asym+'#'-           [COMMENT] .e
COMMENT       (4)   =  ( '#' .asym .e | .e )
EMAILDEFN     (5)   =  NAMELIST ':=' [.b NAMELIST] [COMMENT] .e
 
CPP           =  (     INCLUDE                               ;
                    |  IF       | ELIF   | ELSE   | ENDIF    ;
                    |  ERROR    | PRINT                      ;
                 )
 
INCLUDE  (6)  =  ':' '=include'    filename    [COMMENT]   .e
filename      =  (  barefid  |  bracefid  | quotefid )
bracefid      =  '<' barefid '>'
quotefid      =  '"' barefid '"'
barefid  (6)  =  .fid
 
IF       (7)  =  ':' '=if'         expression  [COMMENT]   .e
ELIF     (8)  =  ':' '=elif'       expression  [COMMENT]   .e
ELSE     (9)  =  ':' '=else'                   [COMMENT]   .e
ENDIF   (10)  =  ':' '=endif'                  [COMMENT]   .e
 
ERROR   (11)  =  ':' '=error'      < ',', expression >     .e
PRINT   (12)  =  ':' '=print'      < ',', expression >     .e
 
 
 
INVOKE     =  (SI | UI | OU | OPTIONS)
 
SI         =  'SI' '=' ( SIF | '(' SIF [ ',' UIF [',' IGNOREF ]] ')' )
IGNOREF    =  <',', SKF>
UI         =  'UI' '=' UIF
OU         =  'OU' '=' OUF
SIF  (2)   = .fid
UIF  (3)   = .fid
OUF  (4)   = .fid
SKF  (5)   = .fid
 
OPTIONS    =  '('    <',',OPTS>    ')'
OPTS       = (VAR|TEST|BUILD|STOP|WARN|NWARN|LS|NLS|NVERB|VERB|DEBUG)
 
TEST (10)  =  'T/EST'
BUILD(11)  =  'B/UILD'
STOP (12)  =  'S/TOP'
WARN (13)  =  'WARN'
NWARN(14)  =  'N/O' 'W/ARN'
LS   (15)  =  'L'-  ['I'-]  'S/T'
NLS  (16)  =  'N/O' 'L'- ['I'-] 'S/T'
NVERB(17)  =  'N/O' 'V/ERBOSE'
VERB (18)  =  'V/ERBOSE'
DEBUG(19)  =  'DEB/UG'
 
VAR        =  NAME '=' (VAL1 | VAL2)
VAL1 (20)  =  .ALPHA+'0123456789_#$-'
VAL2 (20)  =  .QUOTE
 
 
/*      Expressions:
 
     The evaluation of expressions is performed by building a single
     list of operands and operations.  The higher precedence functions
     are indicated by a lower code value.  The highest precedence item
     is the end of the statement, followed by primarys, unaries,
     the multiplicative functions, the additive functions, the shift
     functions, the relational functions, the equality functions,
     the and function, the exclusive or function, the or function,
     the double and function, the double or function and closing
     parenthesis.  The precedence is obtained by dividing the code
     by 8.
*/
 
expression (D,9) =  binary
 
primary          =  ( constant | quotes | string | identifier )
 
constant   (16)  =  .dec
quotes     (17)  =  .quote4
string     (18)  =  .dstring+'"'
identifier (19)  =  .anum+'_.$#200'
 
unary            =  (     monop unary             ;
                       |  parenthesis             ;
                       |  defined_identifier      ;
                       |  sizeof_primary          ;
                       |  primary                 ;
                    )
 
monop            =  ( negateop | nullop | notop | complop )
negateop   (24)  =  '-'
nullop     (25)  =  '+'
notop      (26)  =  '!'
complop    (27)  =  '~'
 
parenthesis(9)   =  '(' binary ')'
 
defined_identifier (30)   =  (     'defined'     identifier         ;
                                |  'defined' '(' identifier ')'     ;
                             )
 
sizeof_primary     (31)   =  (     'sizeof'      string             ;
                                |  'sizeof'  '(' string     ')'     ;
                                |  'sizeof'      identifier         ;
                                |  'sizeof'  '(' identifier ')'     ;
                             )
 
binary           =  unary [ binop binary ]
 
binop            =  ( loglexprop | arithop | relop | eqop )
 
loglexprop       =  ( andandop | ororop )
andandop   (96)  =  '&&'
ororop     (104) =  '||'
 
arithop          =  ( multop | addop | shiftop | loglop )
multop           =  ( multiplyop | divideop | modop )
multiplyop (32)  =  '*'
divideop   (33)  =  '/'
modop      (34)  =  '%'
 
addop            =  (additionop | subtractop)
additionop (40)  =  '+'
subtractop (41)  =  '-'
 
shiftop          =  ( leftshop  | rightshop )
leftshop   (48)  =  '<<'
rightshop  (49)  =  '>>'
 
loglop           =  ( andop | xorop | orop )
andop      (72)  =  '&'
xorop      (80)  =  '^'
orop       (88)  =  '|'
 
relop            =  ( lesseqop | greateqop | lessop | greatop )
lessop     (56)  =  '<'
greatop    (57)  =  '>'
lesseqop   (58)  =  '<='
greateqop  (59)  =  '>='
 
eqop             =  ( equalsop  | nequalsop )
equalsop   (64)  =  '==='
nequalsop  (65)  =  '!='
 
