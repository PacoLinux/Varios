

14:35 JUL 28 '97 GM_MACRO_M.:E05SI                                         1    
    1      /*M* GM_MACRO_M - Macro include file for LCP-6 memory management */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DMC,PLM=6,IND=0,IDT=2,SDI=2,CTI=0,ENU=0,AND,DCI=4,CSU=2,ECU=4,THI=0,DTI=0,STI=2,IAD=0,PRB */
    8      /*P*
    9           NAME: GM_MACRO_M
   10           PURPOSE:
   11                This include file contains macros that are invoked to reference
   12                memory management data and equates.
   13           DESCRIPTION:
   14                The various macros are as follows:
   15
   16                GM$EXTENT - First two words of a free extent.
   17                GM$PPUT - Physical page utilization table.
   18                GM_EQUS - Commonly used EQUs.
   19                GM_MEAT - Memory extent access table.
   20                GM_SHARED_PARAMS - Parameters for calling GMM$SHAREDS.
   21                GM_CHKSZ_PARAMS - Parameters for calling GMA$CHKSIZE.
   22                GM_DATA_TBL - Monitor static memory management data.
   23      */
   24
   25
   26                          /*F* NAME: GM$EXTENT
   27
   28                          The GM$EXTENT macro generates a structure for
   29                          the first two words of a free extent.
   30                          */
   31
   32      %MACRO GM$EXTENT (FPTN=GM$EXTENT,
   33                        LVL=1,
   34                        LAST(YES=";",NO=",",ANY)=";",
   35                        STCLASS=BASED,
   36                        ALGN=WALIGNED,
   37                        FLINK=0,
14:35 JUL 28 '97 GM_MACRO_M.:E05SI                                         2    
   38                        BLINK=0);
   39      %LSET LISTDIR='0'B;
   40      %LSET LISTEXP='1'B;
   41      %LSET LISTCOM='0'B;
   42      %LSET LISTSUB='1'B;
   43      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   44      %IF (SUBSTR(STR,0,6)='STATIC') OR
   45          (SUBSTR(STR,0,8)='CONSTANT') OR
   46          (SUBSTR(STR,0,3)='EXT');
   47      %LSET INIT=CHARTEXT('INIT');
   48      %ELSE;
   49      %LSET INIT=CHARTEXT('/*');
   50      %ENDIF;
   51
   52      %IF LVL=1;
   53      DCL 1 FPTN STCLASS ALGN,
   54      %ELSE;
   55            %LVL FPTN,
   56      %ENDIF;
   57
   58            %(LVL+1) %CHARTEXT('FLINK ') UBIN WORD WALIGNED %INIT(FLINK) %CHARTEXT('/**/'),
   59                          /*K* FLINK - UBIN WORD
   60                          the forward link to the next free extent in this MEAT list.
   61                           */
   62            %(LVL+1) %CHARTEXT('BLINK ') UBIN WORD WALIGNED %INIT(BLINK) %CHARTEXT('/**/') LAST
   63                          /*K* BLINK - UBIN WORD
   64                          the backward link to the previous free extent in this MEAT list.
   65                           */
   66      %MEND;
   67
   68
   69                          /*F* NAME: GM$PPUT
   70
   71                          The GM$PPUT macro generates a structure for the
   72                          Physical Page Utilization Table.
   73                          */
   74      %MACRO GM$PPUT (FPTN=GM$PPUT,
14:35 JUL 28 '97 GM_MACRO_M.:E05SI                                         3    
   75                      LVL=1,
   76                      LAST(YES=";",NO=",",ANY)=";",
   77                      STCLASS=BASED,
   78                      ALGN=ALIGNED,
   79                      ARRAY(YES="(0:32767)",NO="",ANY)="",
   80                      FIRSTP(YES='1'B,NO='0'B)='0'B,
   81                      LASTP(YES='1'B,NO='0'B)='0'B,
   82                      INUSE(YES='1'B,NO='0'B)='0'B,
   83                      SHARED(YES='1'B,NO='0'B)='0'B,
   84                      SHUFFLABLE(YES='1'B,NO='0'B)='0'B,
   85                      OWNER=0,
   86                      SIZE=0);
   87      %LSET LISTDIR='0'B;
   88      %LSET LISTEXP='1'B;
   89      %LSET LISTCOM='0'B;
   90      %LSET LISTSUB='1'B;
   91      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   92      %IF (SUBSTR(STR,0,6)='STATIC') OR
   93          (SUBSTR(STR,0,8)='CONSTANT') OR
   94          (SUBSTR(STR,0,3)='EXT');
   95      %LSET INIT=CHARTEXT('INIT');
   96      %ELSE;
   97      %LSET INIT=CHARTEXT('/*');
   98      %ENDIF;
   99
  100      %IF LVL=1;
  101      DCL 1 FPTN ARRAY STCLASS ALGN,
  102      %ELSE;
  103            %LVL FPTN ARRAY,
  104      %ENDIF;
  105
  106            %(LVL+1) %CHARTEXT('OWNER ') UBIN BYTE CALIGNED %INIT(OWNER) %CHARTEXT('/**/'),
  107                          /*K* OWNER - UBIN BYTE
  108                          contains the USERNO of the owner of the extent, if not shared.
  109                          Contains the CSU index, if this segment is shared.
  110                          Not valid if C.LASTP is set.
  111                          */
14:35 JUL 28 '97 GM_MACRO_M.:E05SI                                         4    
  112            %(LVL+1) C,
  113                          /*K* C  contains the page and/or segment control flags.
  114                           */
  115
  116      %IF NOT(MODE_FEP);
  117            %(LVL+2) %CHARTEXT('*  ') BIT(1) UNAL %INIT('0'B) %CHARTEXT('/**/'),
  118      %ENDIF;
  119            %(LVL+2) %CHARTEXT('FIRSTP ') BIT(1) UNAL %INIT(FIRSTP) %CHARTEXT('/**/'),
  120                          /*K* C.FIRSTP - BIT(1)                        .
  121                          if set, this page is the first page of an extent.
  122                          */
  123            %(LVL+2) %CHARTEXT('LASTP ') BIT(1) UNAL %INIT(LASTP) %CHARTEXT('/**/'),
  124                          /*K* C.LASTP - BIT(1)
  125                          if set, this page is the last page of an extent.
  126                          */
  127            %(LVL+2) %CHARTEXT('INUSE ') BIT(1) UNAL %INIT(INUSE) %CHARTEXT('/**/'),
  128                          /*K* C.INUSE - BIT(1)
  129                          if set, the extent associated with this page is allocated.
  130                          */
  131            %(LVL+2) %CHARTEXT('SHARED ') BIT(1) UNAL %INIT(SHARED) %CHARTEXT('/**/'),
  132                         /*K* C.SHARED - BIT(1)
  133                         if set, the extent associated with this page is shared.
  134                         */
  135            %(LVL+2) %CHARTEXT('SHUFFLABLE ') BIT(1) UNAL %INIT(SHUFFLABLE) %CHARTEXT('/**/'),
  136                          /*K* C.SHUFFLABLE - BIT(1)
  137                          if set, the extent associated with this page is shufflable.
  138                          */
  139            %(LVL+2) %CHARTEXT('PP') BIT(1) UNAL,
  140                          /*K* C.PP - BIT(1)
  141                          if set, the segment contains executable procedure only.
  142                          */
  143
  144            %(LVL+2) %CHARTEXT('* ') BIT(2) UNAL,
  145
  146            %(LVL+1) %CHARTEXT('SIZE ') UBIN(16) CALIGNED %INIT(SIZE) %CHARTEXT('/**/') LAST
  147                          /*K* SIZE - UBIN WORD
  148                          contins the number of pages (256 words) in the extent.
14:35 JUL 28 '97 GM_MACRO_M.:E05SI                                         5    
  149                          */
  150      %MEND;
  151
  152
  153
  154                          /*F* NAME: GM_EQUS
  155
  156                          */
  157      %MACRO GM_EQUS;
  158
  159      %EQU GM_MEATSIZE=15;                        /* Upper array bound of MEATs */
  160
  161      %MEND;
  162
  163
  164
  165                          /*F* NAME: GM_MEAT
  166
  167                          The GM_MEAT macro generates a structure for the
  168                          Memory Extent Access Table.
  169                          */
  170      %MACRO GM_MEAT (FPTN=GM_MEAT,
  171                      LVL=1,
  172                      LAST(YES=";",NO=",",ANY)=";",
  173                      STCLASS=STATIC SYMDEF,
  174                      ALGN=WALIGNED,
  175                      ARRAY(YES="(0:%GM_MEATSIZE)",NO="",ANY)="",
  176                      HEAD=0*0,
  177                      TAIL=0*0,
  178                      COUNT=0*0);
  179      %LSET LISTDIR='0'B;
  180      %LSET LISTEXP='1'B;
  181      %LSET LISTCOM='0'B;
  182      %LSET LISTSUB='1'B;
  183      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  184      %IF (SUBSTR(STR,0,6)='STATIC') OR
  185          (SUBSTR(STR,0,8)='CONSTANT') OR
14:35 JUL 28 '97 GM_MACRO_M.:E05SI                                         6    
  186          (SUBSTR(STR,0,3)='EXT');
  187      %LSET INIT=CHARTEXT('INIT');
  188      %ELSE;
  189      %LSET INIT=CHARTEXT('/*');
  190      %ENDIF;
  191
  192      %IF LVL=1;
  193      DCL 1 FPTN ARRAY STCLASS ALGN,
  194      %ELSE;
  195            %LVL FPTN ARRAY,
  196      %ENDIF;
  197
  198            %(LVL+1) %CHARTEXT('HEAD ') UBIN WORD WALIGNED %INIT(HEAD) %CHARTEXT('/**/'),
  199                          /*K* HEAD - UBIN WORD
  200                          contains the physical page number of the head of this extent list.
  201                          */
  202            %(LVL+1) %CHARTEXT('TAIL ') UBIN WORD WALIGNED %INIT(TAIL) %CHARTEXT('/**/'),
  203                          /*K* TAIL - UBIN WORD
  204                          contains the physical page number of the tail of this extent list.
  205                          */
  206            %(LVL+1) %CHARTEXT('COUNT ') UBIN WORD WALIGNED %INIT(COUNT) %CHARTEXT('/**/') LAST
  207                          /*K* COUNT - UBIN WORD
  208                          contains the count of the number of entries in this extent list.
  209                          This field is maintained for statistical uses only.
  210                          */
  211      %MEND;
  212
  213
  214                          /*F* NAME: GM_SHARED_PARAMS
  215
  216                          The GM_SHARED_PARAMS macro generates a structure
  217                          for the parameters for calling GMM$SHAREDS.
  218                          */
  219      %MACRO GM_SHARED_PARAMS (FPTN=GM_SHARED_PARAMS,
  220                      LVL=1,
  221                      LAST(YES=";",NO=",",ANY)=";",
  222                      STCLASS=" ",
14:35 JUL 28 '97 GM_MACRO_M.:E05SI                                         7    
  223                      ALGN=WALIGNED);
  224      %LSET LISTDIR='0'B;
  225      %LSET LISTEXP='1'B;
  226      %LSET LISTCOM='0'B;
  227      %LSET LISTSUB='1'B;
  228      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  229      %IF (SUBSTR(STR,0,6)='STATIC') OR
  230          (SUBSTR(STR,0,8)='CONSTANT') OR
  231          (SUBSTR(STR,0,3)='EXT');
  232      %LSET INIT=CHARTEXT('INIT');
  233      %ELSE;
  234      %LSET INIT=CHARTEXT('/*');
  235      %ENDIF;
  236
  237      %IF LVL=1;
  238      DCL 1 FPTN STCLASS ALGN,
  239      %ELSE;
  240            %LVL FPTN,
  241      %ENDIF;
  242
  243            %(LVL+1) SEGX UBIN WORD WALIGNED %INIT(0) %CHARTEXT('/**/'),
  244                          /*K*  SEGX - UBIN WORD
  245                          contains the index of the shared segment in the user's ASDT.
  246                          */
  247            %(LVL+1) PAGES UBIN WORD WALIGNED %INIT(0) %CHARTEXT('/**/'),
  248
  249                          /*K*  PAGES - UBIN WORD
  250                          contains the size of the segment to be allocated, in pages.
  251                          */
  252            %VLP_ERRCODE (FPTN=ERR,LVL=2,STCLASS=STCLASS,LAST=NO);
  253                          /*K* ERR = BIT(32).  Contains zero.
  254                          Used to return an error code in VLP_ERRCODE
  255                          format to the caller.
  256                          */
  257
  258            %(LVL+1) RP UBIN %INIT('0'B) %CHARTEXT('/**/'),
  259                          /*K* RP - UBIN WORD
14:35 JUL 28 '97 GM_MACRO_M.:E05SI                                         8    
  260                          contains the read protection code.
  261                          */
  262            %(LVL+1) WP UBIN %INIT('0'B) %CHARTEXT('/**/'),
  263                          /*K* WP - UBIN WORD
  264                          contains the write protection code.
  265                          */
  266            %(LVL+1) S$ PTR %INIT(ADDR(NIL)) %CHARTEXT('/**/') LAST
  267                          /*K*  S$ - PTR
  268                          contains the address of the entry in the G$SFILE
  269                          table for the shared data segment being allocated.
  270                          */
  271      %MEND;
  272
  273
  274
  275                          /*F* NAME: GM_CHKSZ_PARAMS
  276
  277                          The GM_CHKSZ_PARAMS macro generates a structure
  278                          for the parameters for calling GMA$CHKSIZE.
  279                          */
  280
  281      %MACRO GM_CHKSZ_PARAMS (FPTN=GM_CHKSZ_PARAMS,
  282                      STCLASS=AUTO,
  283                      ALGN=WALIGNED);
  284
  285      %LSET LISTDIR='0'B;
  286      %LSET LISTEXP='1'B;
  287      %LSET LISTCOM='0'B;
  288      %LSET LISTSUB='1'B;
  289
  290      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  291      DCL 1 FPTN STCLASS ALGN,
  292            2 SIZE UBIN WORD WALIGNED,
  293                          /*K* SIZE - UBIN WORD.
  294                          Contains the number of pages to be reserved.
  295                          */
  296            %VLP_ERRCODE (FPTN=ERR,STCLASS=STCLASS,LVL=2,LAST=NO);
14:35 JUL 28 '97 GM_MACRO_M.:E05SI                                         9    
  297                          /*K* ERR - BIT(32).  Used to convey error
  298                          information to the calling routine.
  299                          */
  300            2 FLGS,
  301              3 CHK_ONLY BIT(1) UNAL,
  302                          /*K* FLGS.CHK_ONLY - BIT(1).
  303                          If set, indicates that this is just a check and
  304                          that the pages specified by SIZE are not to be
  305                          reserved in the account resource table and perhaps
  306                          GM_STEP.
  307                          */
  308              3 REQ_ALL BIT(1) UNAL,
  309                          /*K* FLGS.REQ_ALL - BIT(1).
  310                          If set, indicates that all requested pages must be
  311                          available if any are to be allocated.  This parameter
  312                          is ignored if CHK_ONLY is set.
  313                          */
  314              3 PARK BIT(1) UNAL,
  315                          /* FLGS.PARK - BIT(1).
  316                          If set, indicates that it is OK to REG the user
  317                          until the memory becomes available.  This parameter
  318                          is ignored in CHK_ONLY is set.
  319                          */
  320              3 NSHUF BIT(1) UNAL,
  321                          /*K* FLGS.NSHUF - BIT(1).
  322                          If set, indicates that the pages to be allocated are
  323                          to be used for I/O and must come from the non-shufflable
  324                          page pool.
  325                          */
  326              3 STEP BIT(1) UNAL,
  327                          /*K* FLGS.STEP - BIT(1).
  328                          If set, indicates that the request is being made by
  329                          job step and that the check against physical pages
  330                          has already been made.
  331                          */
  332              3 * BIT(11) UNAL;
  333      %MEND;
14:35 JUL 28 '97 GM_MACRO_M.:E05SI                                         10   
  334
  335
  336
  337
  338
  339                          /*F* NAME: GM_DATA_TBL
  340
  341                          The GM_DATA_TBL is used to generate the data
  342                          required by the LCP-6 memory management logic that
  343                          is resident in the monitor instruction segment.
  344
  345                          This macro may also be used to generate a BASED
  346                          structure that defines that data.  The pointer
  347                          at B$BOBCAT.MMDATA$ will contain the address of
  348                          this data.
  349
  350                          To generate the data in monitor static data the
  351                          only option to specify is TYPE=DATA.  To generate
  352                          a BASED structure of that data, TYPE=STRUCTURE should
  353                          be specified.
  354                          */
  355
  356
  357      %MACRO GM_DATA_TBL
  358        (TYPE(DATA='0'B,STRUCTURE='1'B,ANY)='0'B,
  359         STCLASS=BASED,
  360         FPTN=GM$DATA);
  361
  362      %LSET LISTDIR='0'B;
  363      %LSET LISTEXP='1'B;
  364      %LSET LISTCOM='1'B;
  365      %LSET LISTSUB='1'B;
  366
  367      %IF TYPE='1'B;
  368      DCL 1 FPTN STCLASS ALIGNED,
  369      %LSET LVL=CHARTEXT('2 ');
  370      %LSET INIT=CHARTEXT(',');
14:35 JUL 28 '97 GM_MACRO_M.:E05SI                                         11   
  371      %LSET TERM=CHARTEXT(';');
  372
  373      %ELSE;
  374      %LSET LVL=CHARTEXT('DCL 1 GM_');
  375      %LSET INIT=CHARTEXT(' INIT(0) STATIC SYMDEF;');
  376      %LSET TERM=CHARTEXT(' INIT(0) STATIC SYMDEF;');
  377      %ENDIF;
  378
  379            %(LVL)MEM_LOW UBIN(16) CALIGNED%INIT
  380                          /*K* MEM_LOW -UBIN WORD.
  381                          Contains the page number of the first page available
  382                          for user allocation.  Setup by BIGFOOT.
  383                          */
  384            %(LVL)MEM_HI UBIN(16) CALIGNED%INIT
  385                          /*K* MEM_HI - UBIN WORD.
  386                          Contains the page number of the last page available
  387                          for user allocation.  Set up by BIGFOOT.
  388                          */
  389            %(LVL)SHUF_HI UBIN(16) CALIGNED%INIT
  390                          /*K* SHUF_HI -UBIN WORD.
  391                          Contains the page number of the last page in the
  392                          standard memory pool.
  393                          This is the boundary between shufflable and
  394                          non-shufflable memory.
  395                          The boundary is moved downward as I/O pages are
  396                          allocated, and, when possible, moved back up as
  397                          the I/O pages are returned to the system.
  398                          */
  399            %(LVL)ASHUF UBIN(16) CALIGNED%INIT
  400                          /*K* ASHUF - UBIN WORD.
  401                          Contains the total number of pages in the user
  402                          memory pool.  This value is initialized by
  403                          BIGFOOT to the number of pages remaining after
  404                          all monitor pages have been allocated.  This value
  405                          is decremented whenever a handler allocates memory
  406                          from the memory pool on the assumption that
  407                          handlers are a class of users that will not normally
14:35 JUL 28 '97 GM_MACRO_M.:E05SI                                         12   
  408                          exit.  Thus GM_ASHUF represents the maximum user size.
  409                          */
  410            %(LVL)SHUF UBIN(16) CALIGNED%INIT
  411                          /*K* SHUF - UBIN WORD.
  412                          Contains the number of pages currently available
  413                          for user allocation that are in the standard
  414                          memory pool; i.e. all the unallocated pages
  415                          below GM_SHUF_HI.
  416                          */
  417            %(LVL)NSHF UBIN(16) CALIGNED%INIT
  418                          /*K* NSHF - UBIN WORD.
  419                          Contains the number of pages currently available
  420                          in the fragmented I/O memory pool; i.e. the
  421                          number of unallocated pages above GM_SHUF_HI.
  422                          */
  423            %(LVL)XSHUF UBIN(16) CALIGNED%INIT
  424                          /*K* XSHUF - UBIN WORD.
  425                          Contains the number of non-shufflable extents in
  426                          the shufflable memory pool.  These extents are
  427                          allocated by calls to GMA$GETPS.  The pages are
  428                          marked as shuffable by calling GMA$PS2USR or
  429                          GMA$RELPS.
  430                          */
  431            %(LVL)SHUF_COUNT UBIN(16) CALIGNED%INIT
  432                          /*K* SHUF_COUNT# - UBIN WORD.
  433                          Contains a count of the number of times the system
  434                          had to relocate allocated user memory to get the
  435                          pages to satisfy a user memory request.
  436                          */
  437            %(LVL)SHUF_SEGS# UBIN(16) CALIGNED%INIT
  438                          /*K* SHUF_SEGS# - UBIN WORD.
  439                          Contains a count of the number segments that have
  440                          been relocated to get the pages to satisfy a
  441                          user memory request.
  442                          */
  443            %(LVL)CHK_PPUT UBIN(16) CALIGNED%INIT
  444                          /*K* CHK_PPUT - UBIN WORD.
14:35 JUL 28 '97 GM_MACRO_M.:E05SI                                         13   
  445                          Contains a value to indicate if the PPUT chain is
  446                          to be checked for inconsistency after every memory
  447                          allocation and deallocation.  Any non-zero value
  448                          indicates PPUT is to be checked.
  449                          */
  450            %(LVL)HSHUF UBIN(16) CALIGNED%INIT
  451                          /*K* HSHUF - UBIN WORD.
  452                          Contains the number of pages in the memory
  453                          pool currently in use by handlers.
  454                          */
  455            %(LVL)STEP UBIN(16) CALIGNED%INIT
  456                          /*K* STEP - UBIN WORD.
  457                          Contains a count of the number of pages that the
  458                          step logic has reserved from GM_SHUF.
  459                          */
  460            %(LVL)SHUF_MIN UBIN(16) CALIGNED%INIT
  461                          /*K* SHUF_MIN - UBIN WORD.
  462                          Contains the lowest value that GM_SHUF has ever
  463                          reached.
  464                          */
  465            %(LVL)NSHF_CURR UBIN(16) CALIGNED%INIT
  466                          /*K* NSHF_CURR - UBIN WORD.
  467                          Contains a count of the number of pages currently
  468                          allocated as I/O memory.
  469                          */
  470            %(LVL)NSHF_PEAK UBIN(16) CALIGNED%INIT
  471                          /*K* NSHF_PEAK - UBIN WORD.
  472                          Contains the highest number of pages ever
  473                          allocated as I/O memory at any one time.
  474                          */
  475            %(LVL)SHUF_TIME UBIN(32) CALIGNED%TERM
  476                          /*K* SHUF_TIME - UBIN(32).
  477                          Contains the amount of time that the system has
  478                          spent in the shuffle logic; maintained in clock ticks.
  479                          */
  480      %MEND;
  481

