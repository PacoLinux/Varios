/*M* SCREEN - routines to simplify screen updating */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
SCREENIN: PROC (P$WIDTH,P$HEIGHT);
%EQU NO#='0'B;
%EQU YES#='1'B;
%EQU CRT_CLEAR_SCREEN#=2;
%EQU CRT_ERASE_LINE#=5;
DCL P$WIDTH SBIN;
DCL P$HEIGHT SBIN;
DCL INITCRT ENTRY (2);
DCL CRT ENTRY (1);
DCL COPTON ENTRY;
DCL SCREEN_INITIALIZED BIT(1) STATIC SYMDEF INIT (%NO#);
DCL SCREEN (0:23) CHAR(80) EXTROOT;
DCL SCREEN1920 REDEF SCREEN CHAR(1920);
DCL 1 FUDGE EXTROOT,          /* Fudge facters used for clearing and erasing  */
      2 CS SBIN ALIGNED INIT (16),
      2 EL SBIN ALIGNED INIT (10);
        IF ADDR(P$WIDTH) ~= ADDR(NIL)
          THEN
           CALL INITCRT (P$WIDTH,P$HEIGHT);
        CALL COPTON;
        CALL CRT (%CRT_CLEAR_SCREEN#);
        SCREEN1920 = ' ';
        SCREEN_INITIALIZED = %YES#;
        RETURN;
 
END SCREENIN;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
SCREENUP: PROC (P$SCREEN);
%EQU NO#='0'B;
%EQU YES#='1'B;
%EQU CRT_CLEAR_SCREEN#=2;
%EQU CRT_ERASE_LINE#=5;
DCL P$SCREEN (0:23) CHAR(80) CALIGNED;
DCL P$SCREEN1920 REDEF P$SCREEN CHAR(1920);
DCL CRT ENTRY (1);
DCL CURSOR ENTRY (2);
DCL WRITE ENTRY (2);
DCL CRTFLUSH ENTRY;
DCL SCREENIN ENTRY (2);
DCL SCREEN_INITIALIZED BIT(1) SYMREF;
DCL SCREEN (0:23) CHAR(80) EXTROOT;
DCL SCREEN1920 REDEF SCREEN CHAR(1920);
DCL 1 FUDGE EXTROOT,
      2 CS SBIN ALIGNED,           /* Fudge facter used for clearing screen   */
      2 EL SBIN ALIGNED;                /* Fudge facter used for erasing line */
DCL SCREEN_CONTROL CHAR(1) STATIC;
DCL FIRST_NON_BLANK_FOR_LINE (0:23) SBIN STATIC;
DCL TRUE_LENGTH_OF_LINE (0:23) SBIN STATIC;
DCL FIRST_DIFFERENT_FOR_LINE (0:23) SBIN STATIC;
DCL LAST_DIFFERENT_FOR_LINE (0:23) SBIN STATIC;
DCL OUTCOUNT_IF_BLANK_LINE (0:23) SBIN STATIC;
DCL OUTCOUNT_FOR_LINE (0:23) SBIN STATIC;
DCL OUTCOUNT_IF_BLANK_SCREEN SBIN STATIC;
DCL OUTCOUNT_FOR_SCREEN SBIN STATIC;
DCL NN SBIN STATIC;
DCL FN SBIN STATIC;
DCL TL SBIN STATIC;
DCL ND SBIN STATIC;
DCL FD SBIN STATIC;
DCL LD SBIN STATIC;
DCL PCHAR CHAR(1) STATIC;
DCL CCHAR CHAR(1) STATIC;
DCL PLINE CHAR(80) STATIC;
DCL CLINE CHAR(80) STATIC;
DCL X SBIN STATIC;
DCL Y SBIN STATIC;
DCL IX SBIN STATIC;
DCL L SBIN STATIC;
        SCREEN_CONTROL = SUBSTR(P$SCREEN1920,1919,1);
        SUBSTR(P$SCREEN1920,1919,1) = ' ';
        IF NOT SCREEN_INITIALIZED
          THEN DO;
           CALL SCREENIN;
           IF SCREEN_CONTROL = 'C'
             THEN
              SCREEN_CONTROL = ' ';
           END;
        IF SCREEN_CONTROL = 'C'
          THEN DO;
           CALL CRT (%CRT_CLEAR_SCREEN#);
           SCREEN1920 = ' ';
           END;
        IF P$SCREEN1920 = SCREEN1920
          THEN
           GOTO UPDATE_FLUSH;
        IF P$SCREEN1920 = ' '
          THEN DO;
           CALL CRT (%CRT_CLEAR_SCREEN#);
           GOTO UPDATE_RETURN;
           END;
        OUTCOUNT_IF_BLANK_SCREEN = 0;
        OUTCOUNT_IF_BLANK_LINE = '0'O;
        OUTCOUNT_FOR_SCREEN = 0;
        OUTCOUNT_FOR_LINE = '0'O;
        FIRST_DIFFERENT_FOR_LINE = '0'O;
        LAST_DIFFERENT_FOR_LINE = '0'O;
        DO Y = 0 TO 23;
           TRUE_LENGTH_OF_LINE(Y) = -1;
           IF SCREEN(Y) ~= ' ' OR
             P$SCREEN(Y) ~= ' '
             THEN DO;
              FN = 79;
              FD = 79;
              TL = -1;
              LD = 0;
              NN = 0;
              ND = 0;
              PLINE = P$SCREEN(Y);
              CLINE = SCREEN(Y);
              DO X = 0 TO 79;
                 PCHAR = SUBSTR(PLINE,X,1);
                 CCHAR = SUBSTR(CLINE,X,1);
                 IF PCHAR ~= ' '
                   THEN DO;
                    FN = MINIMUM(X,FN);
                    NN = NN + MINIMUM(3,X-TL);
                    TL = X;
                    END;
                 IF PCHAR ~= CCHAR
                   THEN DO;
                    FD = MINIMUM(X,FD);
                    ND = ND + MAXIMUM(1, MINIMUM(3,X-LD));
                    LD = X;
                    END;
                 END;
              FIRST_NON_BLANK_FOR_LINE(Y) = FN;
              TRUE_LENGTH_OF_LINE(Y) = TL;
              OUTCOUNT_IF_BLANK_LINE(Y) = NN;
              FIRST_DIFFERENT_FOR_LINE(Y) = FD;
              LAST_DIFFERENT_FOR_LINE(Y) = LD;
              OUTCOUNT_FOR_LINE(Y) = ND;
              OUTCOUNT_IF_BLANK_SCREEN = OUTCOUNT_IF_BLANK_SCREEN + NN;
              OUTCOUNT_FOR_SCREEN = OUTCOUNT_FOR_SCREEN + MINIMUM(NN,ND);
              END;
           END;
        IF OUTCOUNT_IF_BLANK_SCREEN+FUDGE.CS <
          OUTCOUNT_FOR_SCREEN
          THEN DO;
           LAST_DIFFERENT_FOR_LINE = TRUE_LENGTH_OF_LINE;
           FIRST_DIFFERENT_FOR_LINE = FIRST_NON_BLANK_FOR_LINE;
           OUTCOUNT_FOR_LINE = OUTCOUNT_IF_BLANK_LINE;
           CALL CRT (%CRT_CLEAR_SCREEN#);
           CALL CRTFLUSH;
           SCREEN1920 = ' ';
           END;
        DO Y = 0 TO 23;
           IF OUTCOUNT_FOR_LINE(Y) ~= 0
             THEN DO;
              TL = TRUE_LENGTH_OF_LINE(Y);
              FD = FIRST_DIFFERENT_FOR_LINE(Y);
              IF TL = -1 OR FD > TL+3
                THEN DO;
                 CALL CURSOR (TL+1,Y);
                 CALL CRT (%CRT_ERASE_LINE#);
                 END;
                ELSE DO;
                 PLINE = P$SCREEN(Y);
                 IF OUTCOUNT_IF_BLANK_LINE(Y)+FUDGE.EL <
                   OUTCOUNT_FOR_LINE(Y)
                   THEN DO;
                    LAST_DIFFERENT_FOR_LINE(Y) = TL;
                    FD = FIRST_NON_BLANK_FOR_LINE(Y);
                    FIRST_DIFFERENT_FOR_LINE(Y) = FD;
                    CALL CURSOR (0,Y);
                    CALL CRT (%CRT_ERASE_LINE#);
                    CLINE = ' ';
                    END;
                   ELSE
                    CLINE = SCREEN(Y);
                 X = FD;
                 LD = FD;
                 DO IX = FD TO TL;
                    PCHAR = SUBSTR(PLINE,IX,1);
                    CCHAR = SUBSTR(CLINE,IX,1);
                    IF PCHAR ~= CCHAR
                      THEN DO;
                       IF LD+3 < IX
                         THEN DO;
                          CALL CURSOR (X,Y);
                          L = LD - X + 1;
                          CALL WRITE (SUBSTR(PLINE,X,L),L);
                          X = IX;
                          END;
                       LD = IX;
                       END;
                    END;
                 CALL CURSOR (X,Y);
                 IF TL+3 > LAST_DIFFERENT_FOR_LINE(Y)
                   THEN DO;
                    L = LAST_DIFFERENT_FOR_LINE(Y) - X + 1;
                    CALL WRITE (SUBSTR(PLINE,X,L),L);
                    END;
                   ELSE DO;
                    L = LD - X + 1;
                    CALL WRITE (SUBSTR(PLINE,X,L),L);
                    CALL CURSOR (TL+1,Y);
                    CALL CRT (%CRT_ERASE_LINE#);
                    END;
                 END;
              END;
           END;
UPDATE_RETURN:
        SCREEN1920 = P$SCREEN1920;
UPDATE_FLUSH:
        CALL CRTFLUSH;
        RETURN;
 
END SCREENUP;
