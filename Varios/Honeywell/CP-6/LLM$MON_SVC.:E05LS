VERSION E05

PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:1    
        1        1        /*M* LLM$MON_SVC - Interfact to monitor services                    */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=4,STI=0,IND=4,CTI=3,DCI=4,ECI=4,CSI=0,THI=0,DTI=0,ENI=4,
        8        8             CLM=0,SQB,NTB,MOC,CCI=3,NLB,MCL=0,EDMC*/
        9        9        /*F* NAME:         LLM$MON_SVC
       10       10             PURPOSE:      Provide common interface to monitor services
       11       11             DESCRIPTION:  LLM$MON_SVC is entered at LLM$MON_SVC and is
       12       12                           passed from 1 to 4  significant parameters.  The
       13       13                           first parameter determines the function to be
       14       14                           performed and the remaining 3 are unique to each
       15       15                           routine.  In order to maintain a certain degree
       16       16                           of integrity between the caller and this subroutine
       17       17                           a set of subs is provided in the file LL_MONSVC_C
       18       18                           which are to be used as the "CODE" argument.     */
       19       19        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:2    
       20       20        LLM$MON_SVC: PROC (CODE, ARG1, ARG2, ARG3) ALTRET;
       21       21        %INCLUDE LL_SUBS_C;
       22      150        %INCLUDE LL_DATA_R;
       23      186        %INCLUDE LL_MACS_C;
       24      540        %INCLUDE CP_6;
       25      621        %INCLUDE CP_6_SUBS;
       26     1161        %INCLUDE B$JIT;
       27     1451        %INCLUDE B$OBJECT_C;
       28     4881        %LL_SRCH;
       29     4903    1   DCL CURSRCH SBIN;
       30     4904    1   DCL CODE UBIN WORD ALIGNED;
       31     4905    1   DCL ARG1 UBIN WORD ALIGNED;
       32     4906    1   DCL ARG1$ REDEF ARG1 PTR;
       33     4907    1   DCL ARG2 UBIN WORD ALIGNED;
       34     4908    1   DCL ARG2$ REDEF ARG2 PTR;
       35     4909    1   DCL ARG2H REDEF ARG2 UBIN HALF;
       36     4910    1   DCL 1 ARG3 ALIGNED,
       37     4911    1         2 INTG UBIN WORD,
       38     4912    1         2 INTG2 REDEF INTG UBIN HALF,
       39     4913    1         2 * CHAR(28) UNAL;
       40     4914    1   DCL ARG3$(0:7) REDEF ARG3 PTR;
       41     4915    1   DCL 1 KEY BASED(KEY$) ALIGNED,
       42     4916    1         2 LEN UBIN BYTE UNAL,
       43     4917    1         2 TYPE UBIN BYTE UNAL,
       44     4918    1         2 ISADDR UBIN WORD UNAL;
       45     4919    1   DCL KEY$ PTR;
       46     4920    1   DCL M$SI DCB; /* M$SI - Read command file & continuations */
       47     4921    1   DCL M$LO DCB; /* M$LO - Write link map & related listings */
       48     4922    1   DCL M$DO DCB; /* M$DO - Write diagnostics */
       49     4923    1   DCL M$EF DCB; /* M$EF - Read object units */
       50     4924    1   DCL M$RU DCB; /* M$RU - Create or replace run unit */
       51     4925    1   DCL M$LI DCB; /* M$LI - Read library files */
       52     4926    1   DCL M$ME DCB; /* M$ME - Write responses to "break keyins */
       53     4927    1   DCL M$SI$ PTR STATIC; /* Pointer to M$SI */
       54     4928    1   DCL M$LO$ PTR STATIC; /* Pointer to M$LO */
       55     4929    1   DCL M$DO$ PTR STATIC; /* Pointer to M$DO */
       56     4930    1   DCL M$EF$ PTR STATIC; /* Pointer to M$EF */
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:3    
       57     4931    1   DCL M$RU$ PTR STATIC; /* Pointer to M$RU */
       58     4932    1   DCL M$LI$ PTR STATIC; /* Pointer to M$LI */
       59     4933    1   DCL B$JIT$ PTR SYMREF; /* Pointer to the user JIT - linker sat. */
       60     4934    1   DCL LLJ$BREAK ENTRY ASYNC;
       61     4935    1   DCL NPAGES UBIN WORD STATIC ALIGNED INIT(0); /* Keep page count */
       62     4936    1   DCL TEST_STR CHAR(6) UNAL;
       63     4937    1   DCL LL_MEBUF CHAR(108) SYMREF;
       64     4938    1   DCL B_VERSION(0:1) UBIN SYMREF;
       65     4939    1   DCL TIME UBIN WORD STATIC ALIGNED;
       66     4940    1   DCL EDIT_KEY UBIN WORD STATIC ALIGNED;
       67     4941    1   DCL TEMP SBIN WORD STATIC ALIGNED;
       68     4942         /* */
       69     4943         /* Macro invocations from CP_6 */
       70     4944         /* */
       71     4945        %F$DCB ( DCBN = B$DCB );
       72     5002        %FPT_INT ( FPTN = SET_BREAK,
       73     5003         UENTRY = LLJ$BREAK );
       74     5017        %FPT_CORRES ( FPTN = COMP_DO_TO_LO,
       75     5018         DCB1 = M$LO,
       76     5019         DCB2 = M$DO );
       77     5033        %FPT_TIME ( FPTN = GET_UTS,
       78     5034         SOURCE = CLOCK,
       79     5035         DEST = UTS,
       80     5036         TSTAMP = TIME );
       81     5055        %FPT_GDS ( FPTN = GET_MEM,
       82     5056         SEGSIZE = 1024,
       83     5057         RESULTS = VLP_VECTOR );
       84     5073        %FPT_FDP ( FPTN = FREE_MEM,
       85     5074         PAGES = 1 );
       86     5088        %FPT_OPEN ( FPTN = OPEN_SI_CR,
       87     5089         DCB = M$SI,
       88     5090         FUN = IN,
       89     5091         SCRUB = YES,
       90     5092         REASSIGN = NO );
       91     5201        %FPT_OPEN ( FPTN = OPEN_DO,
       92     5202         DCB = M$DO,
       93     5203         CTG = YES,
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:4    
       94     5204         COMP = YES,
       95     5205         ORG = UR,
       96     5206         SCRUB = YES,
       97     5207         REASSIGN = YES );
       98     5316        %FPT_OPEN ( FPTN = OPEN_LO,
       99     5317         DCB = M$LO,
      100     5318         CTG = YES,
      101     5319         COMP = YES,
      102     5320         ORG = UR,
      103     5321         SCRUB = YES,
      104     5322         REASSIGN = YES );
      105     5431        %FPT_OPEN ( FPTN = OPEN_RU,
      106     5432         DCB = M$RU,
      107     5433         SCRUB = YES,
      108     5434         REASSIGN = NO,
      109     5435         TYPE = 'Rf',
      110     5436         ASN = FILE,
      111     5437         ORG = KEYED,
      112     5438         FUN = CREATE,
      113     5439         EXIST = ERROR,
      114     5440         ACS = DIRECT,
      115     5441         IXTNSIZE = 50,
      116     5442         XTNSIZE = 50,
      117     5443         NAME = VLP_NAME,
      118     5444         ACCT = VLP_ACCT,
      119     5445         PASS = VLP_PASS,
      120     5446         WSN = VLP_WSN,
      121     5447         SN = VLP_SN );
      122     5556        %FPT_OPEN ( FPTN = OPEN_RU_IN,
      123     5557         DCB = M$RU,
      124     5558         SCRUB = YES,
      125     5559         REASSIGN = NO,
      126     5560         ASN = FILE,
      127     5561         ORG = KEYED,
      128     5562         FUN = IN,
      129     5563         SHARE = IN,
      130     5564         ACS = DIRECT,
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:5    
      131     5565         NAME = VLP_NAME,
      132     5566         ACCT = VLP_ACCT,
      133     5567         PASS = VLP_PASS,
      134     5568         WSN = VLP_WSN,
      135     5569         SN = VLP_SN );
      136     5678        %FPT_OPEN ( FPTN = OPEN_EF,
      137     5679         DCB =M$EF,
      138     5680         SCRUB = YES,
      139     5681         REASSIGN = NO,
      140     5682         FUN = IN,
      141     5683         SHARE = IN,
      142     5684         ASN = FILE,
      143     5685         NAME = VLP_NAME,
      144     5686         PASS = VLP_PASS,
      145     5687         ACCT = VLP_ACCT,
      146     5688         WSN = VLP_WSN,
      147     5689         SN = VLP_SN,
      148     5690         ORG = KEYED );
      149     5799        %FPT_OPEN ( FPTN = OPEN_SI_TEST,
      150     5800         DCB = M$SI,
      151     5801         SCRUB = NO,
      152     5802         REASSIGN = NO,
      153     5803         TEST = YES,
      154     5804         THISF = NO,
      155     5805         NXTF = YES,
      156     5806         NAME = VLP_NAME,
      157     5807         ACCT = VLP_ACCT,
      158     5808         PASS = VLP_PASS,
      159     5809         WSN = VLP_WSN,
      160     5810         SN = VLP_SN,
      161     5811         ORG = KEYED,
      162     5812         FUN = IN );
      163     5921        %FPT_OPEN ( FPTN = NXTF_SI_TEST,
      164     5922         DCB = M$SI,
      165     5923         SCRUB = NO,
      166     5924         REASSIGN = NO,
      167     5925         THISF = NO,
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:6    
      168     5926         NXTF = YES,
      169     5927         ORG = KEYED,
      170     5928         TEST = YES,
      171     5929         FUN = IN );
      172     6038        %FPT_OPEN ( FPTN = OPEN_SI,
      173     6039         DCB = M$SI,
      174     6040         SCRUB = YES,
      175     6041         REASSIGN = YES,
      176     6042         ASN = FILE,
      177     6043         NAME = VLP_NAME,
      178     6044         ACCT = VLP_ACCT,
      179     6045         PASS = VLP_PASS,
      180     6046         FUN = IN );
      181     6155        %FPT_FID ( FPTN = FID_FILE,
      182     6156         RESULTS = FID_RESULTS,
      183     6157         TEXTFID = LL_FIRSTFID,
      184     6158         NAME = VLP_NAME,
      185     6159         ACCT = VLP_ACCT,
      186     6160         PASS = VLP_PASS,
      187     6161         WSN = VLP_WSN,
      188     6162         SN = VLP_SN,
      189     6163         RES = OPEN_SI_TEST.V.RES#,
      190     6164         ASN = OPEN_SI_TEST.V.ASN# );
      191     6187        %FPT_UNFID ( FPTN = UNFID_SI,
      192     6188         DCB = M$SI,
      193     6189         TEXTFID = LL_OPENFID );
      194     6207        %FPT_UNFID ( FPTN = UNFID_SI_PRE,
      195     6208         DCB = M$SI,
      196     6209         TEXTFID = LL_SPECFID.NAME );
      197     6227        %FPT_CLOSE ( FPTN = CLOSE_SI,
      198     6228         DCB = M$SI,
      199     6229         DISP = SAVE );
      200     6271        %FPT_CLOSE ( FPTN = CLOSE_LO,
      201     6272         DCB = M$LO,
      202     6273         DISP = SAVE );
      203     6315        %FPT_CLOSE ( FPTN = CLOSE_DO,
      204     6316         DCB = M$DO,
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:7    
      205     6317         DISP = SAVE );
      206     6359        %FPT_CLOSE ( FPTN = CLOSE_EF,
      207     6360         DCB = M$EF,
      208     6361         DISP = SAVE );
      209     6403        %FPT_CLOSE ( FPTN = CLOSE_RU,
      210     6404         DCB = M$RU,
      211     6405         RELG = YES,
      212     6406         DISP = SAVE );
      213     6448        %FPT_READ ( FPTN = READ_COM_FIL,
      214     6449         DCB = M$SI,
      215     6450         BUF = NIL,
      216     6451         KEY = EDIT_KEY,
      217     6452         KEYS = NO,
      218     6453         KEYR = YES,
      219     6454         WAIT = YES );
      220     6493        %FPT_READ ( FPTN = READ_COM,
      221     6494         DCB = M$SI,
      222     6495         BUF = NIL,
      223     6496         WAIT = YES );
      224     6535        %FPT_READ ( FPTN = READ_HEAD,
      225     6536         DCB = M$EF,
      226     6537         KEY = NIL,
      227     6538         KEYS = NO,
      228     6539         KEYR = YES,
      229     6540         BUF = NIL,
      230     6541         WAIT = YES );
      231     6580        %FPT_READ ( FPTN = READ_RU,
      232     6581         DCB = M$RU,
      233     6582         KEY = NIL,
      234     6583         KEYS = YES,
      235     6584         KEYR = NO,
      236     6585         BUF = NIL,
      237     6586         WAIT = YES );
      238     6625        %FPT_READ ( FPTN = READ_OU,
      239     6626         DCB = M$EF,
      240     6627         KEY = NIL,
      241     6628         KEYS = YES,
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:8    
      242     6629         KEYR = NO,
      243     6630         BUF = NIL,
      244     6631         WAIT = YES );
      245     6670        %FPT_READ ( FPTN = SEQ_EF_READ,
      246     6671         DCB = M$EF,
      247     6672         KEY = NIL,
      248     6673         KEYS = NO,
      249     6674         KEYR = YES,
      250     6675         BUF = NIL,
      251     6676         WAIT = YES );
      252     6715        %FPT_PRECORD ( FPTN = POS_EF,
      253     6716         DCB = M$EF,
      254     6717         KEY = NIL,
      255     6718         KEYS = YES,
      256     6719         KEYR = YES,
      257     6720         N = 0 );
      258     6741        %FPT_PRECORD ( FPTN = POS_TO_HEAD,
      259     6742         DCB = M$EF,
      260     6743         KEY = NIL,
      261     6744         KEYS = YES,
      262     6745         KEYR = YES,
      263     6746         N = 1 );
      264     6767        %FPT_PRECORD ( FPTN = POS_SI,
      265     6768         DCB = M$SI,
      266     6769         KEY = EDIT_KEY,
      267     6770         KEYR = YES,
      268     6771         N = 0,
      269     6772         STCLASS = CONSTANT);
      270     6793        %FPT_WRITE ( FPTN = WRITE_RU,
      271     6794         DCB = M$RU,
      272     6795         KEY = NIL,
      273     6796         BUF = NIL,
      274     6797         WAIT = YES,
      275     6798         ONEWKEY = YES );
      276     6829        %FPT_WRITE ( FPTN = WRITE_LO,
      277     6830         DCB = M$LO,
      278     6831         BUF = LL_LOBUF,
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:9    
      279     6832         WAIT = YES,
      280     6833         VFC = YES );
      281     6864        %FPT_WRITE ( FPTN = WRITE_DO,
      282     6865         DCB = M$DO,
      283     6866         BUF = LL_DOBUF,
      284     6867         WAIT = YES,
      285     6868         VFC = YES );
      286     6899        %FPT_WRITE ( FPTN = WRITE_ME,
      287     6900         DCB = M$ME,
      288     6901         BUF = LL_MEBUF,
      289     6902         WAIT = YES,
      290     6903         VFC = YES );
      291     6934        %VLP_VECTOR ( FPTN = VLP_VECTOR );
      292     6949         /* Watch closely here.  These VLRs are STATIC because they hold
      293     6950            fid information from a call with code=LL#FID till one for LL#OPEN?.
      294     6951         */
      295     6952        %VLP_NAME ( FPTN = VLP_NAME,
      296     6953         NAME = '*CONTINUATION_COMMANDS',
      297     6954         LEN = 31,
      298     6955         STCLASS = STATIC );
      299     6982        %VLP_ACCT ( FPTN = VLP_ACCT,
      300     6983         ACCT = "';'",
      301     6984         STCLASS = STATIC );
      302     6997    1   DCL SEMICOLON REDEF VLP_ACCT CHAR(8);
      303     6998        %VLP_PASS ( FPTN = VLP_PASS,
      304     6999         STCLASS = STATIC );
      305     7012        %VLP_WSN ( FPTN = VLP_WSN,
      306     7013         STCLASS = STATIC );
      307     7026        %VLP_SN ( FPTN = VLP_SN,
      308     7027         STCLASS = STATIC );
      309     7040        %VLR_FID( FPTN = FID_RESULTS,
      310     7041         STCLASS = STATIC );
      311     7060        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:10   
      312     7061    2       DO CASE (CODE);
      313     7062         /* LL#INIT -
      314     7063            Format of call:
      315     7064            CALL LLM$MON_SVC (LL#INIT, PTR1$, PTR2$, LENGTH);
      316     7065            Function:
      317     7066            Initializes several dcb pointer fields.
      318     7067            Gets a page of memory and returns in PTR1$ the
      319     7068            address of the first word.
      320     7069            Returns in PTR2$ the address of the CCBUF in the
      321     7070            JIT.
      322     7071            Returns in LEN the length of the command entered.
      323     7072            Errors:
      324     7073            If any of the opens "blow up" the monitor handles
      325     7074            the error.  If the M$GDP cannot be executed, then
      326     7075            the user is informed and an M$ERR is done.  No
      327     7076            altreturn is possible. */
      328     7077    2       CASE (LL#INIT);
      329     7078    2           VLP_VECTOR.PTR$ = ADDR(NIL);
      330     7079    2           VLP_VECTOR.W2.SEGID# = '6005'O;
      331     7080    2           CALL M$GDS (GET_MEM) ALTRET (NO_MEM);
      332     7081    2           LL_TOPOMEM$ = VLP_VECTOR.PTR$;
      333     7082    2           LL_BOTOMEM$ = VLP_VECTOR.PTR$;
      334     7083    2           NPAGES = NPAGES + 1;
      335     7084    2           CALL M$OPEN (OPEN_DO);
      336     7085    2           CALL M$OPEN (OPEN_LO);
      337     7086    2           ARG1$ = VLP_VECTOR.PTR$;
      338     7087    3           IF NOT B$JIT.PRFLAGS.CONTINUED THEN DO;
      339     7088    3               ARG2$ = ADDR(B$JIT$ -> B$JIT.CCBUF);
      340     7089    3               ARG3.INTG = B$JIT$ -> B$JIT.CCARS;
      341     7090    3               CALL M$OPEN (OPEN_SI_CR);
      342     7091    3               END; ELSE DO;
      343     7092    3               ARG2$ = ADDR(SEMICOLON);
      344     7093    3               ARG3.INTG = 1;
      345     7094    3               CALL M$OPEN (OPEN_SI);
      346     7095    3               END;
      347     7096    2           M$SI$ = DCBADDR(DCBNUM(M$SI));
      348     7097    2           M$LO$ = DCBADDR(DCBNUM(M$LO));
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:11   
      349     7098    2           M$DO$ = DCBADDR(DCBNUM(M$DO));
      350     7099    2           M$EF$ = DCBADDR(DCBNUM(M$EF));
      351     7100    2           M$RU$ = DCBADDR(DCBNUM(M$RU));
      352     7101    2           M$LI$ = DCBADDR(DCBNUM(M$LI));
      353     7102    2           LL_STATE = LL#INITIALIZING;
      354     7103    2           CALL M$INT ( SET_BREAK ) ALTRET ( NXT_STMT );
      355     7104    2           IF M$LO$ -> B$DCB.ORG# = %UR# AND M$LO$ -> B$DCB.ASN#
      356     7105    3              = %DEVICE# THEN DO;
      357     7106    3               IF M$LO$ -> B$DCB.WIDTH# < 110 THEN
      358     7107    3                   LL_WIDE# = '0'B;
      359     7108    3               END;
      360     7109    2           ELSE LL_WIDE# = '1'B;
      361     7110    2           LL_VERSION = B_VERSION;
      362     7111    2   NXT_STMT:;
      363     7112        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:12   
      364     7113         /* LL#READCF -
      365     7114            Format of call:
      366     7115            CALL LLM$MON_SVC (LL$READCF, PTR1$, LEN, KEY) ALTRET
      367     7116            (STMT_LBL);
      368     7117            Function:
      369     7118            Reads a command file into a buffer pointed to by
      370     7119            PTR1$.
      371     7120            Returns the length of the record read in LEN.
      372     7121            Errors:
      373     7122            If the M$READ altrets, then this routine will
      374     7123            altreturn. */
      375     7124    2       CASE (LL#READCF);
      376     7125    2           READ_COM_FIL.BUF_.BUF$ = ARG1$;
      377     7126    2           READ_COM_FIL.BUF_.BOUND = 255;
      378     7127    2           CALL M$READ (READ_COM_FIL) ALTRET (ERROR_EXIT);
      379     7128    2           ARG2 = M$SI$ -> B$DCB.ARS#;
      380     7129    2           ARG3.INTG = EDIT_KEY;
      381     7130        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:13   
      382     7131         /* LL#WRITELO -
      383     7132            Format of call:
      384     7133            CALL LL$MON_SVC (LL#WRITELO);
      385     7134            Function:
      386     7135            Writes the information contained in LL#LOBUF.
      387     7136            Errors:
      388     7137            None. */
      389     7138    2       CASE (LL#WRITELO);
      390     7139    2           CALL M$WRITE (WRITE_LO) ALTRET (IGNORE);
      391     7140        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:14   
      392     7141         /* LL#WRITEDO -
      393     7142            See LL#WRITELO. */
      394     7143    2       CASE (LL#WRITEDO);
      395     7144    2           CALL M$WRITE (WRITE_DO) ALTRET (IGNORE);
      396     7145    2           CALL M$CORRES (COMP_DO_TO_LO) ALTRET (IGNORE);
      397     7146    2           LL_LOBUF = LL_DOBUF;
      398     7147    2           CALL M$WRITE (WRITE_LO) ALTRET (IGNORE);
      399     7148        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:15   
      400     7149         /* LL#GETMEM -
      401     7150            Format:
      402     7151            CALL LLM$MON_SVC (LL#GETMEM, NWORDS, START$);
      403     7152            Function:
      404     7153            Allocates memory in page sized chunks until enough
      405     7154            memory is allocated so that NWORDS may be safely
      406     7155            stored.  START$ contains a pointer to the start
      407     7156            of the required space.
      408     7157            Errors:
      409     7158            If the required amount of memory cannot be
      410     7159            acquired, then the user is notified and an M$ERR
      411     7160            is executed. */
      412     7161    2       CASE (LL#GETMEM);
      413     7162    2           IF ADDR(ARG1)=ADDR(NIL) THEN GOTO NO_MEM;
      414     7163    2           TEMP = ( 1024 * NPAGES ) - ARG2H;
      415     7164    3           DO WHILE (TEMP < ARG1);
      416     7165    3               CALL M$GDS (GET_MEM) ALTRET (NO_MEM);
      417     7166    3               NPAGES = NPAGES + 1;
      418     7167    3               TEMP = TEMP + 1024;
      419     7168    3               END;
      420     7169    2           TEMP = TEMP - 2048;
      421     7170    3           DO WHILE (TEMP > ARG1);
      422     7171    3               CALL M$FDS (GET_MEM) ALTRET (NO_MEM);
      423     7172    3               NPAGES = NPAGES - 1;
      424     7173    3               TEMP = TEMP - 1024;
      425     7174    3               END;
      426     7175        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:16   
      427     7176         /* LL#CLOSESI -
      428     7177            Format:
      429     7178            CALL LLM$MON_SVC (LL#CLOSESI);
      430     7179            Function:
      431     7180            If M$SI is currently closed, no action is taken.
      432     7181            If M$SI is open, it is closed with save.
      433     7182            Errors:
      434     7183            None. */
      435     7184    2       CASE (LL#CLOSESI);
      436     7185    2           IF (M$SI$ -> B$DCB.FCD#) THEN
      437     7186    2               CALL M$CLOSE (CLOSE_SI) ALTRET (IGNORE);
      438     7187        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:17   
      439     7188         /* LL#INITSI -
      440     7189            Format:
      441     7190            CALL LLM$MON_SVC (LL#INITSI);
      442     7191            Function:
      443     7192            Positions M$SI to closest file following the
      444     7193            file specified in LL#FIRSTFID.
      445     7194            Errors:
      446     7195            Handled by monitor. */
      447     7196    2       CASE (LL#INITSI);
      448     7197    2           CALL M$FID (FID_FILE);
      449     7198    2           OPEN_SI_TEST.V.ASN# = 1;
      450     7199    2           CALL M$OPEN (OPEN_SI_TEST);
      451     7200    2           CALL M$UNFID (UNFID_SI_PRE);
      452     7201        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:18   
      453     7202         /* LL#NXTFSI
      454     7203            Format:
      455     7204            CALL LLM$MON_SVC (LL#NXTFSI);
      456     7205            Function:
      457     7206            Advances M$SI to file immediatly following the
      458     7207            file specified in the DCB.
      459     7208            Errors:
      460     7209            Handled by monitor. */
      461     7210    2       CASE (LL#NXTFSI);
      462     7211    2           CALL M$OPEN (NXTF_SI_TEST);
      463     7212    2           CALL M$UNFID (UNFID_SI_PRE);
      464     7213        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:19   
      465     7214         /* LL#FREEMEM -
      466     7215            Format:
      467     7216            CALL LLM$MON_SVC (LL#FREEMEM);
      468     7217            Function:
      469     7218            Deallocates all memory acquired.
      470     7219            Errors:
      471     7220            Handled by monitor. */
      472     7221    2       CASE (LL#FREEMEM);
      473     7222    3           IF (NPAGES > 0) THEN DO;
      474     7223    3               FREE_MEM.V.PAGES# = NPAGES;
      475     7224    3               CALL M$FDP (FREE_MEM);
      476     7225    3               NPAGES = 0;
      477     7226    3               END;
      478     7227        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:20   
      479     7228         /* LL#EXIT -
      480     7229            Format:
      481     7230            CALL LLM$MON_SVC (LL#EXIT);
      482     7231            Function:
      483     7232            Issue a M$EXIT.
      484     7233            Errors:
      485     7234            None. */
      486     7235    2       CASE (LL#EXIT);
      487     7236    2           IF ( M$DO$ -> B$DCB.FCD# ) THEN
      488     7237    2               CALL M$CLOSE ( CLOSE_DO );
      489     7238    2           IF ( M$LO$ -> B$DCB.FCD# ) THEN
      490     7239    2               CALL M$CLOSE ( CLOSE_LO );
      491     7240    2           CALL M$EXIT;
      492     7241        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:21   
      493     7242         /* LL#ERR -
      494     7243            Format:
      495     7244            CALL LLM$MON_SVC (LL#ERR);
      496     7245            Function:
      497     7246            Issue a M$ERR.
      498     7247            Errors:
      499     7248            None. */
      500     7249    2       CASE (LL#ERR);
      501     7250    2           IF ( M$DO$ -> B$DCB.FCD# ) THEN
      502     7251    2               CALL M$CLOSE ( CLOSE_DO );
      503     7252    2           IF ( M$LO$ -> B$DCB.FCD# ) THEN
      504     7253    2               CALL M$CLOSE ( CLOSE_LO );
      505     7254    2           CALL M$ERR;
      506     7255        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:22   
      507     7256         /* LL#FID
      508     7257            Format:
      509     7258            CALL LLM$MON_SVC (LL#FID);
      510     7259            Function:
      511     7260            Converts a file name in standard CP-6 format
      512     7261            into a form usable by the M$OPEN service.
      513     7262            Errors:
      514     7263            Handled by monitor. */
      515     7264    2       CASE (LL#FID);
      516     7265    2           CALL M$FID (FID_FILE);
      517     7266        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:23   
      518     7267    2       CASE (LL#WRITEME);
      519     7268    2           CALL M$WRITE (WRITE_ME) ALTRET (IGNORE);
      520     7269        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:24   
      521     7270         /* LL#OPENSIFIL
      522     7271            Format:
      523     7272            CALL LLM$MON_SVC (LL#OPENSIFIL);
      524     7273            Function:
      525     7274            After a call to LLM$MON_SVC passign ll#fid as a
      526     7275            code, this routine may be called to open M$SI to
      527     7276            the file specified to M$FID */
      528     7277    2       CASE (LL#OPENSIFIL);
      529     7278    2           CALL M$OPEN (OPEN_SI);
      530     7279    2           LL_TYPE = M$SI$ -> B$DCB.ORG#;
      531     7280    2           CALL M$PRECORD (POS_SI) ALTRET(ERROR_EXIT);
      532     7281    2           EDIT_KEY = EDIT_KEY / 262144;
      533     7282    2           IF BINBIT (EDIT_KEY,9) = '042'O
      534     7283    2              OR EDIT_KEY>511 AND EDIT_KEY<3*512
      535     7284    2           THEN GOTO ERROR_EXIT;
      536     7285        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:25   
      537     7286         /* LL#UNFIDSI
      538     7287            Format:
      539     7288            CALL LLM$MON_SVC (LL#UNFIDSI);
      540     7289            Function:
      541     7290            Performs a M$UNFID on dcb M$SI and places the
      542     7291            text result in LL#OPENFID.
      543     7292            Errors:
      544     7293            Handled by monitor. */
      545     7294    2       CASE (LL#UNFIDSI);
      546     7295    2           CALL M$UNFID (UNFID_SI);
      547     7296        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:26   
      548     7297         /* LL#READHEAD
      549     7298            Format:
      550     7299            CALL LLM$MON_SVC (LL#READHEAD, BUF$, BOUND, KEY);
      551     7300            Fucntion:
      552     7301            Reads a head record of the currently open file thru
      553     7302            the M$EF dcb.  No key is specified, however the
      554     7303            key of the record record reas is returned in
      555     7304            KEY, the record read is returned in BUF$ and
      556     7305            BOUND specifies the length to read.
      557     7306            Errors:
      558     7307            None. */
      559     7308    2       CASE (LL#READHEAD);
      560     7309    2           READ_HEAD.BUF_.BUF$ = ARG1$;
      561     7310    2           READ_HEAD.BUF_.BOUND = ARG2;
      562     7311    2           READ_HEAD.KEY_ = VECTOR(ARG3);
      563     7312    2           CALL M$READ (READ_HEAD) ALTRET (ERROR_EXIT);
      564     7313        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:27   
      565     7314         /* LL#READRU
      566     7315            Format:
      567     7316            CALL LLM$MON_SVC (LL#READRU, BUF$, BOUND, KEY);
      568     7317            Function:
      569     7318            Reads a record specified by KEY from the file
      570     7319            open thru M$RU into BUF$ of length BOUND-1.
      571     7320            Errors:
      572     7321            Altreturns if no record exists. */
      573     7322    2       CASE (LL#READRU);
      574     7323    2           READ_RU.BUF_.BOUND = ARG2;
      575     7324    2           READ_RU.BUF_.BUF$ = ARG1$;
      576     7325    2           READ_RU.KEY_ = VECTOR(ARG3);
      577     7326    2           CALL M$READ (READ_RU) ALTRET (ERROR_EXIT);
      578     7327        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:28   
      579     7328         /* LL#WRITERU
      580     7329            Format:
      581     7330            CALL LLM$MON_SVC (LL#WRITE_RU, BUF$, BOUND, KEY);
      582     7331            Function:
      583     7332            Write a record of length BOUND beginning at
      584     7333            BUF$ to be written thru M$RU with key KEY.
      585     7334            Errors:
      586     7335            None. */
      587     7336    2       CASE (LL#WRITERU);
      588     7337    2           WRITE_RU.BUF_.BUF$ = ARG1$;
      589     7338    2           KEY$ = ADDR ( ARG3 );
      590     7339    2           WRITE_RU.BUF_.BOUND = ARG2;
      591     7340    2           WRITE_RU.KEY_ = VECTOR(ARG3);
      592     7341    2           CALL M$WRITE (WRITE_RU);
      593     7342        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:29   
      594     7343         /* LL#READOU
      595     7344            Format:
      596     7345            CALL LLM$MONSVC (LL#READOU, BUF$, BOUND, KEY)
      597     7346            ALTRET (STMT_LBL);
      598     7347            Function:
      599     7348            Reads a record thru M$EF into BUF$ of length
      600     7349            BOUND.  The record is specified by key KEY.
      601     7350            Errors:
      602     7351            Altreturns if a record specified by key is not
      603     7352            found. */
      604     7353    2       CASE (LL#READOU);
      605     7354    2           READ_OU.BUF_.BUF$ = ARG1$;
      606     7355    2           READ_OU.BUF_.BOUND = ARG2;
      607     7356    2           READ_OU.KEY_ = VECTOR(ARG3);
      608     7357    2           CALL M$READ (READ_OU) ALTRET (ERROR_EXIT);
      609     7358        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:30   
      610     7359         /* LL#SIZEEF
      611     7360            Format:
      612     7361            CALL LLM$MON_SVC (LL#SIZEEF, TEMP);
      613     7362            Function:
      614     7363            Returns in TEMP the size of the last record
      615     7364            read thru M$EF.
      616     7365            Errors:
      617     7366            None. */
      618     7367    2       CASE (LL#SIZEEF);
      619     7368    2           ARG1 = M$EF$ -> B$DCB.ARS#;
      620     7369        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:31   
      621     7370         /* LL#POSTOHEAD
      622     7371            Format:
      623     7372            CALL LLM$MON_SVC (LL#POSTOHEAD, NIL, NIL, KEY);
      624     7373            Function:
      625     7374            Positions M$EF to the record following that
      626     7375            specified by KEY and returns in KEY the key of
      627     7376            record positioned to.
      628     7377            Errors:
      629     7378            Handled by monitor. */
      630     7379    2       CASE (LL#POSTOHEAD);
      631     7380    2           POS_TO_HEAD.KEY_ = VECTOR(ARG3);
      632     7381    2           CALL M$PRECORD (POS_TO_HEAD);
      633     7382        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:32   
      634     7383         /* LL#CLOSEEF, LL#CLOSERU, LL#OPENEF, & LL#OPENRU
      635     7384            Format:
      636     7385            CALL LLM$MON_SVC (LL#xxx);
      637     7386            Function:
      638     7387            Opens or closes a specified dcb (M$EF or M$RU).
      639     7388            Errors:
      640     7389            Handled by monitor */
      641     7390    2       CASE (LL#CLOSEEF);
      642     7391    2           CALL M$CLOSE (CLOSE_EF);
      643     7392    2       CASE (LL#CLOSERU);
      644     7393    2           CALL M$CLOSE (CLOSE_RU);
      645     7394    2       CASE (LL#OPENRU);
      646     7395    2           LL_FIRSTFID = LL_RUNUNIT;
      647     7396    2           CALL M$FID (FID_FILE);
      648     7397    3           IF (LL_FLAGS.OVER#) THEN DO;
      649     7398    3               OPEN_RU.V.EXIST# = 3;
      650     7399    3               OPEN_RU.V.CTG# = '0'B;
      651     7400    3               END;
      652     7401    2           CALL M$OPEN (OPEN_RU);
      653     7402    2       CASE (LL#OPENEF);
      654     7403    2           IF LL_SRCH.NUM = 0 OR
      655     7404    2              FID_RESULTS.ACCT
      656     7405    2           THEN
      657     7406    2               CALL M$OPEN( OPEN_EF ) ALTRET( ERROR_EXIT );
      658     7407    3           ELSE DO;
      659     7408    3   SEARCH_EF:
      660     7409    4               DO CURSRCH = 0 TO LL_SRCH.NUM-1;
      661     7410    4                   VLP_ACCT.ACCT# = LL_SRCH.ACCT(CURSRCH);
      662     7411    4                   VLP_SN.SN#(0) = LL_SRCH.SN(CURSRCH);
      663     7412    4                   CALL M$OPEN( OPEN_EF )
      664     7413    5                   WHENRETURN DO;
      665     7414    5                       EXIT SEARCH_EF;
      666     7415    5                       END;
      667     7416    4                   END SEARCH_EF;
      668     7417    3               IF CURSRCH >= LL_SRCH.NUM
      669     7418    3               THEN
      670     7419    3                   GOTO ERROR_EXIT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:33   
      671     7420    3               END;
      672     7421        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:34   
      673     7422    2       CASE (LL#TIME);
      674     7423    2           CALL M$TIME (GET_UTS);
      675     7424    2           ARG1 = TIME;
      676     7425        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:35   
      677     7426    2       CASE (LL#OPENRUIN);
      678     7427    2           LL_FIRSTFID = LL_RUNUNIT;
      679     7428    2           CALL M$FID (FID_FILE);
      680     7429    2           CALL M$OPEN (OPEN_RU_IN);
      681     7430    2       CASE (LL#POSEF);
      682     7431    2           POS_EF.KEY_ = VECTOR (ARG3);
      683     7432    2           CALL M$PRECORD (POS_EF) ALTRET (ERROR_EXIT);
      684     7433    2       CASE (LL#RDEFSQ);
      685     7434    2           SEQ_EF_READ.BUF_.BUF$ = ARG1$;
      686     7435    2           SEQ_EF_READ.BUF_.BOUND = ARG2;
      687     7436    2           SEQ_EF_READ.KEY_ = VECTOR (ARG3);
      688     7437    2           CALL M$READ (SEQ_EF_READ) ALTRET (ERROR_EXIT);
      689     7438    2           END;
      690     7439        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:36   
      691     7440    1   IGNORE:
      692     7441    1       RETURN;
      693     7442    1   ERROR_EXIT:
      694     7443    1       ALTRETURN;
      695     7444    1   NO_MEM:
      696     7445    1       LL_DOBUF = 'A  ***Can''t get any more memory';
      697     7446    1       CALL M$WRITE (WRITE_DO);
      698     7447    1       CALL BINCHAR (TEST_STR, NPAGES + (LL_DNAME_VEC.BOUND + 1 +
      699     7448    1          LL_UREF_NAME_MAX + LL_U_SYMREF_MAX + LL_U_ENTREF_MAX) / 1024);
      700     7449    1       CALL INSERT (LL_DOBUF,0,,'A  ***',TEST_STR,' pages used');
      701     7450    1       CALL M$WRITE (WRITE_DO);
      702     7451    1       CALL M$ERR;
      703     7452    1   END LLM$MON_SVC;

PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:37   
--  Include file information  --

   B$OBJECT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   LL_MACS_C.:E05TOU  is referenced.
   LL_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   LL_SUBS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure LLM$MON_SVC.

   Procedure LLM$MON_SVC requires 548 words for executable code.
   Procedure LLM$MON_SVC requires 14 words of local(AUTO) storage.

    No errors detected in file LLM$MON_SVC.:E05TSI    .

PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:38   

 Object Unit name= LLM$MON_SVC                                File name= LLM$MON_SVC.:E05TOU
 UTS= JUL 30 '97 03:16:02.56 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$SI
    2   DCB   even  none     0      0  M$LO
    3   DCB   even  none     0      0  M$DO
    4   DCB   even  none     0      0  M$EF
    5   DCB   even  none     0      0  M$RU
    6   DCB   even  none     0      0  M$LI
    7   DCB   even  none     0      0  M$ME
    8   Data  even  none   964   1704  LLM$MON_SVC
    9  RoData even  UTS     21     25  LLM$MON_SVC
   10   Proc  even  none   548   1044  LLM$MON_SVC
   11  RoData even  none     5      5  LLM$MON_SVC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    10      0   yes    yes     yes      Std        4  LLM$MON_SVC
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:39   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          Async      0 LLJ$BREAK
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     LL_LOBUF                              LL_DOBUF                              LL_FLAGS
     LL_TYPE                               LL_FIRSTFID                           LL_OPENFID
     LL_SPECFID                            LL_STATE                              LL_RUNUNIT
     LL_BOTOMEM$                           LL_TOPOMEM$                           LL_UREF_NAME_MAX
     LL_U_SYMREF_MAX                       LL_U_ENTREF_MAX                       LL_WIDE#
     LL_DNAME_VEC                          LL_VERSION                            M$UC
     LL_SRCH                               M$SI                                  M$LO
     M$DO                                  M$EF                                  M$RU
     M$LI                                  M$ME                                  B$JIT$
     LL_MEBUF                              B_VERSION                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:40   


        1        1        /*M* LLM$MON_SVC - Interfact to monitor services                    */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=4,STI=0,IND=4,CTI=3,DCI=4,ECI=4,CSI=0,THI=0,DTI=0,ENI=4,
        8        8             CLM=0,SQB,NTB,MOC,CCI=3,NLB,MCL=0,EDMC*/
        9        9        /*F* NAME:         LLM$MON_SVC
       10       10             PURPOSE:      Provide common interface to monitor services
       11       11             DESCRIPTION:  LLM$MON_SVC is entered at LLM$MON_SVC and is
       12       12                           passed from 1 to 4  significant parameters.  The
       13       13                           first parameter determines the function to be
       14       14                           performed and the remaining 3 are unique to each
       15       15                           routine.  In order to maintain a certain degree
       16       16                           of integrity between the caller and this subroutine
       17       17                           a set of subs is provided in the file LL_MONSVC_C
       18       18                           which are to be used as the "CODE" argument.     */
       19       19        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:41   
       20       20        LLM$MON_SVC: PROC (CODE, ARG1, ARG2, ARG3) ALTRET;

     20 10 000000   000000 700200 xent  LLM$MON_SVC  TSX0  ! X66_AUTO_4
        10 000001   000016 000004                    ZERO    14,4

       21       21        %INCLUDE LL_SUBS_C;
       22      150        %INCLUDE LL_DATA_R;
       23      186        %INCLUDE LL_MACS_C;
       24      540        %INCLUDE CP_6;
       25      621        %INCLUDE CP_6_SUBS;
       26     1161        %INCLUDE B$JIT;
       27     1451        %INCLUDE B$OBJECT_C;
       28     4881        %LL_SRCH;
       29     4903    1   DCL CURSRCH SBIN;
       30     4904    1   DCL CODE UBIN WORD ALIGNED;
       31     4905    1   DCL ARG1 UBIN WORD ALIGNED;
       32     4906    1   DCL ARG1$ REDEF ARG1 PTR;
       33     4907    1   DCL ARG2 UBIN WORD ALIGNED;
       34     4908    1   DCL ARG2$ REDEF ARG2 PTR;
       35     4909    1   DCL ARG2H REDEF ARG2 UBIN HALF;
       36     4910    1   DCL 1 ARG3 ALIGNED,
       37     4911    1         2 INTG UBIN WORD,
       38     4912    1         2 INTG2 REDEF INTG UBIN HALF,
       39     4913    1         2 * CHAR(28) UNAL;
       40     4914    1   DCL ARG3$(0:7) REDEF ARG3 PTR;
       41     4915    1   DCL 1 KEY BASED(KEY$) ALIGNED,
       42     4916    1         2 LEN UBIN BYTE UNAL,
       43     4917    1         2 TYPE UBIN BYTE UNAL,
       44     4918    1         2 ISADDR UBIN WORD UNAL;
       45     4919    1   DCL KEY$ PTR;
       46     4920    1   DCL M$SI DCB; /* M$SI - Read command file & continuations */
       47     4921    1   DCL M$LO DCB; /* M$LO - Write link map & related listings */
       48     4922    1   DCL M$DO DCB; /* M$DO - Write diagnostics */
       49     4923    1   DCL M$EF DCB; /* M$EF - Read object units */
       50     4924    1   DCL M$RU DCB; /* M$RU - Create or replace run unit */
       51     4925    1   DCL M$LI DCB; /* M$LI - Read library files */
       52     4926    1   DCL M$ME DCB; /* M$ME - Write responses to "break keyins */
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:42   
       53     4927    1   DCL M$SI$ PTR STATIC; /* Pointer to M$SI */
       54     4928    1   DCL M$LO$ PTR STATIC; /* Pointer to M$LO */
       55     4929    1   DCL M$DO$ PTR STATIC; /* Pointer to M$DO */
       56     4930    1   DCL M$EF$ PTR STATIC; /* Pointer to M$EF */
       57     4931    1   DCL M$RU$ PTR STATIC; /* Pointer to M$RU */
       58     4932    1   DCL M$LI$ PTR STATIC; /* Pointer to M$LI */
       59     4933    1   DCL B$JIT$ PTR SYMREF; /* Pointer to the user JIT - linker sat. */
       60     4934    1   DCL LLJ$BREAK ENTRY ASYNC;
       61     4935    1   DCL NPAGES UBIN WORD STATIC ALIGNED INIT(0); /* Keep page count */
       62     4936    1   DCL TEST_STR CHAR(6) UNAL;
       63     4937    1   DCL LL_MEBUF CHAR(108) SYMREF;
       64     4938    1   DCL B_VERSION(0:1) UBIN SYMREF;
       65     4939    1   DCL TIME UBIN WORD STATIC ALIGNED;
       66     4940    1   DCL EDIT_KEY UBIN WORD STATIC ALIGNED;
       67     4941    1   DCL TEMP SBIN WORD STATIC ALIGNED;
       68     4942         /* */
       69     4943         /* Macro invocations from CP_6 */
       70     4944         /* */
       71     4945        %F$DCB ( DCBN = B$DCB );
       72     5002        %FPT_INT ( FPTN = SET_BREAK,
       73     5003         UENTRY = LLJ$BREAK );
       74     5017        %FPT_CORRES ( FPTN = COMP_DO_TO_LO,
       75     5018         DCB1 = M$LO,
       76     5019         DCB2 = M$DO );
       77     5033        %FPT_TIME ( FPTN = GET_UTS,
       78     5034         SOURCE = CLOCK,
       79     5035         DEST = UTS,
       80     5036         TSTAMP = TIME );
       81     5055        %FPT_GDS ( FPTN = GET_MEM,
       82     5056         SEGSIZE = 1024,
       83     5057         RESULTS = VLP_VECTOR );
       84     5073        %FPT_FDP ( FPTN = FREE_MEM,
       85     5074         PAGES = 1 );
       86     5088        %FPT_OPEN ( FPTN = OPEN_SI_CR,
       87     5089         DCB = M$SI,
       88     5090         FUN = IN,
       89     5091         SCRUB = YES,
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:43   
       90     5092         REASSIGN = NO );
       91     5201        %FPT_OPEN ( FPTN = OPEN_DO,
       92     5202         DCB = M$DO,
       93     5203         CTG = YES,
       94     5204         COMP = YES,
       95     5205         ORG = UR,
       96     5206         SCRUB = YES,
       97     5207         REASSIGN = YES );
       98     5316        %FPT_OPEN ( FPTN = OPEN_LO,
       99     5317         DCB = M$LO,
      100     5318         CTG = YES,
      101     5319         COMP = YES,
      102     5320         ORG = UR,
      103     5321         SCRUB = YES,
      104     5322         REASSIGN = YES );
      105     5431        %FPT_OPEN ( FPTN = OPEN_RU,
      106     5432         DCB = M$RU,
      107     5433         SCRUB = YES,
      108     5434         REASSIGN = NO,
      109     5435         TYPE = 'Rf',
      110     5436         ASN = FILE,
      111     5437         ORG = KEYED,
      112     5438         FUN = CREATE,
      113     5439         EXIST = ERROR,
      114     5440         ACS = DIRECT,
      115     5441         IXTNSIZE = 50,
      116     5442         XTNSIZE = 50,
      117     5443         NAME = VLP_NAME,
      118     5444         ACCT = VLP_ACCT,
      119     5445         PASS = VLP_PASS,
      120     5446         WSN = VLP_WSN,
      121     5447         SN = VLP_SN );
      122     5556        %FPT_OPEN ( FPTN = OPEN_RU_IN,
      123     5557         DCB = M$RU,
      124     5558         SCRUB = YES,
      125     5559         REASSIGN = NO,
      126     5560         ASN = FILE,
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:44   
      127     5561         ORG = KEYED,
      128     5562         FUN = IN,
      129     5563         SHARE = IN,
      130     5564         ACS = DIRECT,
      131     5565         NAME = VLP_NAME,
      132     5566         ACCT = VLP_ACCT,
      133     5567         PASS = VLP_PASS,
      134     5568         WSN = VLP_WSN,
      135     5569         SN = VLP_SN );
      136     5678        %FPT_OPEN ( FPTN = OPEN_EF,
      137     5679         DCB =M$EF,
      138     5680         SCRUB = YES,
      139     5681         REASSIGN = NO,
      140     5682         FUN = IN,
      141     5683         SHARE = IN,
      142     5684         ASN = FILE,
      143     5685         NAME = VLP_NAME,
      144     5686         PASS = VLP_PASS,
      145     5687         ACCT = VLP_ACCT,
      146     5688         WSN = VLP_WSN,
      147     5689         SN = VLP_SN,
      148     5690         ORG = KEYED );
      149     5799        %FPT_OPEN ( FPTN = OPEN_SI_TEST,
      150     5800         DCB = M$SI,
      151     5801         SCRUB = NO,
      152     5802         REASSIGN = NO,
      153     5803         TEST = YES,
      154     5804         THISF = NO,
      155     5805         NXTF = YES,
      156     5806         NAME = VLP_NAME,
      157     5807         ACCT = VLP_ACCT,
      158     5808         PASS = VLP_PASS,
      159     5809         WSN = VLP_WSN,
      160     5810         SN = VLP_SN,
      161     5811         ORG = KEYED,
      162     5812         FUN = IN );
      163     5921        %FPT_OPEN ( FPTN = NXTF_SI_TEST,
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:45   
      164     5922         DCB = M$SI,
      165     5923         SCRUB = NO,
      166     5924         REASSIGN = NO,
      167     5925         THISF = NO,
      168     5926         NXTF = YES,
      169     5927         ORG = KEYED,
      170     5928         TEST = YES,
      171     5929         FUN = IN );
      172     6038        %FPT_OPEN ( FPTN = OPEN_SI,
      173     6039         DCB = M$SI,
      174     6040         SCRUB = YES,
      175     6041         REASSIGN = YES,
      176     6042         ASN = FILE,
      177     6043         NAME = VLP_NAME,
      178     6044         ACCT = VLP_ACCT,
      179     6045         PASS = VLP_PASS,
      180     6046         FUN = IN );
      181     6155        %FPT_FID ( FPTN = FID_FILE,
      182     6156         RESULTS = FID_RESULTS,
      183     6157         TEXTFID = LL_FIRSTFID,
      184     6158         NAME = VLP_NAME,
      185     6159         ACCT = VLP_ACCT,
      186     6160         PASS = VLP_PASS,
      187     6161         WSN = VLP_WSN,
      188     6162         SN = VLP_SN,
      189     6163         RES = OPEN_SI_TEST.V.RES#,
      190     6164         ASN = OPEN_SI_TEST.V.ASN# );
      191     6187        %FPT_UNFID ( FPTN = UNFID_SI,
      192     6188         DCB = M$SI,
      193     6189         TEXTFID = LL_OPENFID );
      194     6207        %FPT_UNFID ( FPTN = UNFID_SI_PRE,
      195     6208         DCB = M$SI,
      196     6209         TEXTFID = LL_SPECFID.NAME );
      197     6227        %FPT_CLOSE ( FPTN = CLOSE_SI,
      198     6228         DCB = M$SI,
      199     6229         DISP = SAVE );
      200     6271        %FPT_CLOSE ( FPTN = CLOSE_LO,
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:46   
      201     6272         DCB = M$LO,
      202     6273         DISP = SAVE );
      203     6315        %FPT_CLOSE ( FPTN = CLOSE_DO,
      204     6316         DCB = M$DO,
      205     6317         DISP = SAVE );
      206     6359        %FPT_CLOSE ( FPTN = CLOSE_EF,
      207     6360         DCB = M$EF,
      208     6361         DISP = SAVE );
      209     6403        %FPT_CLOSE ( FPTN = CLOSE_RU,
      210     6404         DCB = M$RU,
      211     6405         RELG = YES,
      212     6406         DISP = SAVE );
      213     6448        %FPT_READ ( FPTN = READ_COM_FIL,
      214     6449         DCB = M$SI,
      215     6450         BUF = NIL,
      216     6451         KEY = EDIT_KEY,
      217     6452         KEYS = NO,
      218     6453         KEYR = YES,
      219     6454         WAIT = YES );
      220     6493        %FPT_READ ( FPTN = READ_COM,
      221     6494         DCB = M$SI,
      222     6495         BUF = NIL,
      223     6496         WAIT = YES );
      224     6535        %FPT_READ ( FPTN = READ_HEAD,
      225     6536         DCB = M$EF,
      226     6537         KEY = NIL,
      227     6538         KEYS = NO,
      228     6539         KEYR = YES,
      229     6540         BUF = NIL,
      230     6541         WAIT = YES );
      231     6580        %FPT_READ ( FPTN = READ_RU,
      232     6581         DCB = M$RU,
      233     6582         KEY = NIL,
      234     6583         KEYS = YES,
      235     6584         KEYR = NO,
      236     6585         BUF = NIL,
      237     6586         WAIT = YES );
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:47   
      238     6625        %FPT_READ ( FPTN = READ_OU,
      239     6626         DCB = M$EF,
      240     6627         KEY = NIL,
      241     6628         KEYS = YES,
      242     6629         KEYR = NO,
      243     6630         BUF = NIL,
      244     6631         WAIT = YES );
      245     6670        %FPT_READ ( FPTN = SEQ_EF_READ,
      246     6671         DCB = M$EF,
      247     6672         KEY = NIL,
      248     6673         KEYS = NO,
      249     6674         KEYR = YES,
      250     6675         BUF = NIL,
      251     6676         WAIT = YES );
      252     6715        %FPT_PRECORD ( FPTN = POS_EF,
      253     6716         DCB = M$EF,
      254     6717         KEY = NIL,
      255     6718         KEYS = YES,
      256     6719         KEYR = YES,
      257     6720         N = 0 );
      258     6741        %FPT_PRECORD ( FPTN = POS_TO_HEAD,
      259     6742         DCB = M$EF,
      260     6743         KEY = NIL,
      261     6744         KEYS = YES,
      262     6745         KEYR = YES,
      263     6746         N = 1 );
      264     6767        %FPT_PRECORD ( FPTN = POS_SI,
      265     6768         DCB = M$SI,
      266     6769         KEY = EDIT_KEY,
      267     6770         KEYR = YES,
      268     6771         N = 0,
      269     6772         STCLASS = CONSTANT);
      270     6793        %FPT_WRITE ( FPTN = WRITE_RU,
      271     6794         DCB = M$RU,
      272     6795         KEY = NIL,
      273     6796         BUF = NIL,
      274     6797         WAIT = YES,
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:48   
      275     6798         ONEWKEY = YES );
      276     6829        %FPT_WRITE ( FPTN = WRITE_LO,
      277     6830         DCB = M$LO,
      278     6831         BUF = LL_LOBUF,
      279     6832         WAIT = YES,
      280     6833         VFC = YES );
      281     6864        %FPT_WRITE ( FPTN = WRITE_DO,
      282     6865         DCB = M$DO,
      283     6866         BUF = LL_DOBUF,
      284     6867         WAIT = YES,
      285     6868         VFC = YES );
      286     6899        %FPT_WRITE ( FPTN = WRITE_ME,
      287     6900         DCB = M$ME,
      288     6901         BUF = LL_MEBUF,
      289     6902         WAIT = YES,
      290     6903         VFC = YES );
      291     6934        %VLP_VECTOR ( FPTN = VLP_VECTOR );
      292     6949         /* Watch closely here.  These VLRs are STATIC because they hold
      293     6950            fid information from a call with code=LL#FID till one for LL#OPEN?.
      294     6951         */
      295     6952        %VLP_NAME ( FPTN = VLP_NAME,
      296     6953         NAME = '*CONTINUATION_COMMANDS',
      297     6954         LEN = 31,
      298     6955         STCLASS = STATIC );
      299     6982        %VLP_ACCT ( FPTN = VLP_ACCT,
      300     6983         ACCT = "';'",
      301     6984         STCLASS = STATIC );
      302     6997    1   DCL SEMICOLON REDEF VLP_ACCT CHAR(8);
      303     6998        %VLP_PASS ( FPTN = VLP_PASS,
      304     6999         STCLASS = STATIC );
      305     7012        %VLP_WSN ( FPTN = VLP_WSN,
      306     7013         STCLASS = STATIC );
      307     7026        %VLP_SN ( FPTN = VLP_SN,
      308     7027         STCLASS = STATIC );
      309     7040        %VLR_FID( FPTN = FID_RESULTS,
      310     7041         STCLASS = STATIC );
      311     7060        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:49   
      312     7061    2       DO CASE (CODE);

   7061 10 000002   200003 470500                    LDP0    @CODE,,AUTO
        10 000003   000000 235100                    LDA     0,,PR0
        10 000004   000035 115007                    CMPA    29,DL
        10 000005   000007 602005 10                 TNC     s:7061+5,AL
        10 000006   001000 710000 10                 TRA     IGNORE
        10 000007   000044 710000 10                 TRA     s:7078
        10 000010   000202 710000 10                 TRA     s:7125
        10 000011   000225 710000 10                 TRA     s:7139
        10 000012   000252 710000 10                 TRA     s:7162
        10 000013   000340 710000 10                 TRA     s:7185
        10 000014   000351 710000 10                 TRA     s:7197
        10 000015   000365 710000 10                 TRA     s:7211
        10 000016   000232 710000 10                 TRA     s:7144
        10 000017   000446 710000 10                 TRA     s:7265
        10 000020   000457 710000 10                 TRA     s:7278
        10 000021   000374 710000 10                 TRA     s:7222
        10 000022   000404 710000 10                 TRA     s:7236
        10 000023   000643 710000 10                 TRA     s:7395
        10 000024   000425 710000 10                 TRA     s:7250
        10 000025   000506 710000 10                 TRA     s:7295
        10 000026   000512 710000 10                 TRA     s:7309
        10 000027   000533 710000 10                 TRA     s:7323
        10 000030   000576 710000 10                 TRA     s:7354
        10 000031   000554 710000 10                 TRA     s:7337
        10 000032   000664 710000 10                 TRA     s:7403
        10 000033   000617 710000 10                 TRA     s:7368
        10 000034   000624 710000 10                 TRA     s:7380
        10 000035   000633 710000 10                 TRA     s:7391
        10 000036   000637 710000 10                 TRA     s:7393
        10 000037   000727 710000 10                 TRA     s:7423
        10 000040   000736 710000 10                 TRA     s:7427
        10 000041   000750 710000 10                 TRA     s:7431
        10 000042   000760 710000 10                 TRA     s:7434
        10 000043   000452 710000 10                 TRA     s:7268

PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:50   
      313     7062         /* LL#INIT -
      314     7063            Format of call:
      315     7064            CALL LLM$MON_SVC (LL#INIT, PTR1$, PTR2$, LENGTH);
      316     7065            Function:
      317     7066            Initializes several dcb pointer fields.
      318     7067            Gets a page of memory and returns in PTR1$ the
      319     7068            address of the first word.
      320     7069            Returns in PTR2$ the address of the CCBUF in the
      321     7070            JIT.
      322     7071            Returns in LEN the length of the command entered.
      323     7072            Errors:
      324     7073            If any of the opens "blow up" the monitor handles
      325     7074            the error.  If the M$GDP cannot be executed, then
      326     7075            the user is informed and an M$ERR is done.  No
      327     7076            altreturn is possible. */
      328     7077    2       CASE (LL#INIT);

      329     7078    2           VLP_VECTOR.PTR$ = ADDR(NIL);

   7078 10 000044   000001 236000 xsym               LDQ     B_VECTNIL+1
        10 000045   001647 756000 8                  STQ     VLP_VECTOR+1

      330     7079    2           VLP_VECTOR.W2.SEGID# = '6005'O;

   7079 10 000046   006005 236007                    LDQ     3077,DL
        10 000047   001647 752003 8                  STCQ    VLP_VECTOR+1,'03'O

      331     7080    2           CALL M$GDS (GET_MEM) ALTRET (NO_MEM);

   7080 10 000050   000036 630400 8                  EPPR0   GET_MEM
        10 000051   430001 713400                    CLIMB   alt,gds
        10 000052   400400 401760                    pmme    nvectors=2
        10 000053   001002 702000 10                 TSX2    NO_MEM

      332     7081    2           LL_TOPOMEM$ = VLP_VECTOR.PTR$;

   7081 10 000054   001647 236000 8                  LDQ     VLP_VECTOR+1
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:51   
        10 000055   000000 756000 xsym               STQ     LL_TOPOMEM$

      333     7082    2           LL_BOTOMEM$ = VLP_VECTOR.PTR$;

   7082 10 000056   000000 756000 xsym               STQ     LL_BOTOMEM$

      334     7083    2           NPAGES = NPAGES + 1;

   7083 10 000057   000006 235000 8                  LDA     NPAGES
        10 000060   000001 035007                    ADLA    1,DL
        10 000061   000006 755000 8                  STA     NPAGES

      335     7084    2           CALL M$OPEN (OPEN_DO);

   7084 10 000062   000144 630400 8                  EPPR0   OPEN_DO
        10 000063   050000 713400                    CLIMB   open
        10 000064   410400 401760                    pmme    nvectors=18

      336     7085    2           CALL M$OPEN (OPEN_LO);

   7085 10 000065   000236 630400 8                  EPPR0   OPEN_LO
        10 000066   050000 713400                    CLIMB   open
        10 000067   410400 401760                    pmme    nvectors=18

      337     7086    2           ARG1$ = VLP_VECTOR.PTR$;

   7086 10 000070   001647 236000 8                  LDQ     VLP_VECTOR+1
        10 000071   200004 470500                    LDP0    @ARG1,,AUTO
        10 000072   000000 756100                    STQ     0,,PR0

      338     7087    3           IF NOT B$JIT.PRFLAGS.CONTINUED THEN DO;

   7087 10 000073   000000 471400 xsym               LDP1    B$JIT$
        10 000074   100030 430100                    FSZN    24,,PR1
        10 000075   000113 604000 10                 TMI     s:7092

      339     7088    3               ARG2$ = ADDR(B$JIT$ -> B$JIT.CCBUF);
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:52   

   7088 10 000076   000000 236000 xsym               LDQ     B$JIT$
        10 000077   000033 036003                    ADLQ    27,DU
        10 000100   200005 473500                    LDP3    @ARG2,,AUTO
        10 000101   300000 756100                    STQ     0,,PR3

      340     7089    3               ARG3.INTG = B$JIT$ -> B$JIT.CCARS;

   7089 10 000102   000000 471400 xsym               LDP1    B$JIT$
        10 000103   100032 236100                    LDQ     26,,PR1
        10 000104   000022 732000                    QRS     18
        10 000105   200006 474500                    LDP4    @ARG3,,AUTO
        10 000106   400000 756100                    STQ     0,,PR4

      341     7090    3               CALL M$OPEN (OPEN_SI_CR);

   7090 10 000107   000052 630400 8                  EPPR0   OPEN_SI_CR
        10 000110   050000 713400                    CLIMB   open
        10 000111   410400 401760                    pmme    nvectors=18

      342     7091    3               END; ELSE DO;

   7091 10 000112   000124 710000 10                 TRA     s:7096

      343     7092    3               ARG2$ = ADDR(SEMICOLON);

   7092 10 000113   000000 236000 11                 LDQ     0
        10 000114   200005 473500                    LDP3    @ARG2,,AUTO
        10 000115   300000 756100                    STQ     0,,PR3

      344     7093    3               ARG3.INTG = 1;

   7093 10 000116   000001 235007                    LDA     1,DL
        10 000117   200006 471500                    LDP1    @ARG3,,AUTO
        10 000120   100000 755100                    STA     0,,PR1

      345     7094    3               CALL M$OPEN (OPEN_SI);
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:53   

   7094 10 000121   000772 630400 8                  EPPR0   OPEN_SI
        10 000122   050000 713400                    CLIMB   open
        10 000123   410400 401760                    pmme    nvectors=18

      346     7095    3               END;

      347     7096    2           M$SI$ = DCBADDR(DCBNUM(M$SI));

   7096 10 000124   000000 236007 xsym               LDQ     M$SI,DL
        10 000125   000001 470400 11                 LDP0    1
        10 000126   000000 471500                    LDP1    0,,PR0
        10 000127   100000 236106                    LDQ     0,QL,PR1
        10 000130   000000 756000 8                  STQ     M$SI$

      348     7097    2           M$LO$ = DCBADDR(DCBNUM(M$LO));

   7097 10 000131   000000 236007 xsym               LDQ     M$LO,DL
        10 000132   100000 236106                    LDQ     0,QL,PR1
        10 000133   000001 756000 8                  STQ     M$LO$

      349     7098    2           M$DO$ = DCBADDR(DCBNUM(M$DO));

   7098 10 000134   000000 236007 xsym               LDQ     M$DO,DL
        10 000135   100000 236106                    LDQ     0,QL,PR1
        10 000136   000002 756000 8                  STQ     M$DO$

      350     7099    2           M$EF$ = DCBADDR(DCBNUM(M$EF));

   7099 10 000137   000000 236007 xsym               LDQ     M$EF,DL
        10 000140   100000 236106                    LDQ     0,QL,PR1
        10 000141   000003 756000 8                  STQ     M$EF$

      351     7100    2           M$RU$ = DCBADDR(DCBNUM(M$RU));

   7100 10 000142   000000 236007 xsym               LDQ     M$RU,DL
        10 000143   100000 236106                    LDQ     0,QL,PR1
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:54   
        10 000144   000004 756000 8                  STQ     M$RU$

      352     7101    2           M$LI$ = DCBADDR(DCBNUM(M$LI));

   7101 10 000145   000000 236007 xsym               LDQ     M$LI,DL
        10 000146   100000 236106                    LDQ     0,QL,PR1
        10 000147   000005 756000 8                  STQ     M$LI$

      353     7102    2           LL_STATE = LL#INITIALIZING;

   7102 10 000150   000000 450000 xsym               STZ     LL_STATE

      354     7103    2           CALL M$INT ( SET_BREAK ) ALTRET ( NXT_STMT );

   7103 10 000151   000012 630400 8                  EPPR0   SET_BREAK
        10 000152   410002 713400                    CLIMB   alt,+4098
        10 000153   400000 401760                    pmme    nvectors=1
        10 000154   000201 702000 10                 TSX2    NXT_STMT

      355     7104    2           IF M$LO$ -> B$DCB.ORG# = %UR# AND M$LO$ -> B$DCB.ASN#

   7104 10 000155   000001 470400 8                  LDP0    M$LO$
        10 000156   000032 236100                    LDQ     26,,PR0
        10 000157   777000 376003                    ANQ     -512,DU
        10 000160   004000 116003                    CMPQ    2048,DU
        10 000161   000174 601000 10                 TNZ     s:7109
        10 000162   000032 236100                    LDQ     26,,PR0
        10 000163   777000 376007                    ANQ     -512,DL
        10 000164   003000 116007                    CMPQ    1536,DL
        10 000165   000174 601000 10                 TNZ     s:7109

      356     7105    3              = %DEVICE# THEN DO;

      357     7106    3               IF M$LO$ -> B$DCB.WIDTH# < 110 THEN

   7106 10 000166   000004 236100                    LDQ     4,,PR0
        10 000167   000777 376007                    ANQ     511,DL
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:55   
        10 000170   000156 116007                    CMPQ    110,DL
        10 000171   000176 603000 10                 TRC     s:7110

      358     7107    3                   LL_WIDE# = '0'B;

   7107 10 000172   000000 450000 xsym               STZ     LL_WIDE#

      359     7108    3               END;

   7108 10 000173   000176 710000 10                 TRA     s:7110

      360     7109    2           ELSE LL_WIDE# = '1'B;

   7109 10 000174   400000 236003                    LDQ     -131072,DU
        10 000175   000000 756000 xsym               STQ     LL_WIDE#

      361     7110    2           LL_VERSION = B_VERSION;

   7110 10 000176   000000 100400                    MLR     fill='000'O
        10 000177   000000 000007 xsym               ADSC9   B_VERSION                cn=0,n=7
        10 000200   000000 000007 xsym               ADSC9   LL_VERSION               cn=0,n=7

   7110 10 000201   001000 710000 10    NXT_STMT     TRA     IGNORE

      362     7111    2   NXT_STMT:;
      363     7112        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:56   
      364     7113         /* LL#READCF -
      365     7114            Format of call:
      366     7115            CALL LLM$MON_SVC (LL$READCF, PTR1$, LEN, KEY) ALTRET
      367     7116            (STMT_LBL);
      368     7117            Function:
      369     7118            Reads a command file into a buffer pointed to by
      370     7119            PTR1$.
      371     7120            Returns the length of the record read in LEN.
      372     7121            Errors:
      373     7122            If the M$READ altrets, then this routine will
      374     7123            altreturn. */
      375     7124    2       CASE (LL#READCF);

      376     7125    2           READ_COM_FIL.BUF_.BUF$ = ARG1$;

   7125 10 000202   200004 471500                    LDP1    @ARG1,,AUTO
        10 000203   100000 236100                    LDQ     0,,PR1
        10 000204   001423 756000 8                  STQ     READ_COM_FIL+5

      377     7126    2           READ_COM_FIL.BUF_.BOUND = 255;

   7126 10 000205   001422 236000 8                  LDQ     READ_COM_FIL+4
        10 000206   177777 376007                    ANQ     65535,DL
        10 000207   000002 276000 11                 ORQ     2
        10 000210   001422 756000 8                  STQ     READ_COM_FIL+4

      378     7127    2           CALL M$READ (READ_COM_FIL) ALTRET (ERROR_EXIT);

   7127 10 000211   001416 630400 8                  EPPR0   READ_COM_FIL
        10 000212   440000 713400                    CLIMB   alt,read
        10 000213   401400 401760                    pmme    nvectors=4
        10 000214   001001 702000 10                 TSX2    ERROR_EXIT

      379     7128    2           ARG2 = M$SI$ -> B$DCB.ARS#;

   7128 10 000215   000000 470400 8                  LDP0    M$SI$
        10 000216   000000 235100                    LDA     0,,PR0
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:57   
        10 000217   200005 471500                    LDP1    @ARG2,,AUTO
        10 000220   100000 755100                    STA     0,,PR1

      380     7129    2           ARG3.INTG = EDIT_KEY;

   7129 10 000221   200006 473500                    LDP3    @ARG3,,AUTO
        10 000222   000010 236000 8                  LDQ     EDIT_KEY
        10 000223   300000 756100                    STQ     0,,PR3
        10 000224   001000 710000 10                 TRA     IGNORE

      381     7130        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:58   
      382     7131         /* LL#WRITELO -
      383     7132            Format of call:
      384     7133            CALL LL$MON_SVC (LL#WRITELO);
      385     7134            Function:
      386     7135            Writes the information contained in LL#LOBUF.
      387     7136            Errors:
      388     7137            None. */
      389     7138    2       CASE (LL#WRITELO);

      390     7139    2           CALL M$WRITE (WRITE_LO) ALTRET (IGNORE);

   7139 10 000225   001602 630400 8                  EPPR0   WRITE_LO
        10 000226   440001 713400                    CLIMB   alt,write
        10 000227   401400 401760                    pmme    nvectors=4
        10 000230   001000 702000 10                 TSX2    IGNORE
        10 000231   001000 710000 10                 TRA     IGNORE

      391     7140        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:59   
      392     7141         /* LL#WRITEDO -
      393     7142            See LL#WRITELO. */
      394     7143    2       CASE (LL#WRITEDO);

      395     7144    2           CALL M$WRITE (WRITE_DO) ALTRET (IGNORE);

   7144 10 000232   001616 630400 8                  EPPR0   WRITE_DO
        10 000233   440001 713400                    CLIMB   alt,write
        10 000234   401400 401760                    pmme    nvectors=4
        10 000235   001000 702000 10                 TSX2    IGNORE

      396     7145    2           CALL M$CORRES (COMP_DO_TO_LO) ALTRET (IGNORE);

   7145 10 000236   000016 630400 8                  EPPR0   COMP_DO_TO_LO
        10 000237   460000 713400                    CLIMB   alt,+24576
        10 000240   400000 401760                    pmme    nvectors=1
        10 000241   001000 702000 10                 TSX2    IGNORE

      397     7146    2           LL_LOBUF = LL_DOBUF;

   7146 10 000242   040000 100400                    MLR     fill='040'O
        10 000243   000000 000160 xsym               ADSC9   LL_DOBUF                 cn=0,n=112
        10 000244   000000 000160 xsym               ADSC9   LL_LOBUF                 cn=0,n=112

      398     7147    2           CALL M$WRITE (WRITE_LO) ALTRET (IGNORE);

   7147 10 000245   001602 630400 8                  EPPR0   WRITE_LO
        10 000246   440001 713400                    CLIMB   alt,write
        10 000247   401400 401760                    pmme    nvectors=4
        10 000250   001000 702000 10                 TSX2    IGNORE
        10 000251   001000 710000 10                 TRA     IGNORE

      399     7148        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:60   
      400     7149         /* LL#GETMEM -
      401     7150            Format:
      402     7151            CALL LLM$MON_SVC (LL#GETMEM, NWORDS, START$);
      403     7152            Function:
      404     7153            Allocates memory in page sized chunks until enough
      405     7154            memory is allocated so that NWORDS may be safely
      406     7155            stored.  START$ contains a pointer to the start
      407     7156            of the required space.
      408     7157            Errors:
      409     7158            If the required amount of memory cannot be
      410     7159            acquired, then the user is notified and an M$ERR
      411     7160            is executed. */
      412     7161    2       CASE (LL#GETMEM);

      413     7162    2           IF ADDR(ARG1)=ADDR(NIL) THEN GOTO NO_MEM;

   7162 10 000252   200004 236100                    LDQ     @ARG1,,AUTO
        10 000253   000001 116000 xsym               CMPQ    B_VECTNIL+1
        10 000254   001002 600000 10                 TZE     NO_MEM

      414     7163    2           TEMP = ( 1024 * NPAGES ) - ARG2H;

   7163 10 000255   200005 471500                    LDP1    @ARG2,,AUTO
        10 000256   100000 236100                    LDQ     0,,PR1
        10 000257   000022 772000                    QRL     18
        10 000260   200014 756100                    STQ     TEST_STR+2,,AUTO
        10 000261   000000 236003                    LDQ     0,DU
        10 000262   000006 136000 8                  SBLQ    NPAGES
        10 000263   000012 736000                    QLS     10
        10 000264   200014 036100                    ADLQ    TEST_STR+2,,AUTO
        10 000265   000027 676000 xsym               ERQ     B_VECTNIL+23
        10 000266   000001 036007                    ADLQ    1,DL
        10 000267   000011 756000 8                  STQ     TEMP

      415     7164    3           DO WHILE (TEMP < ARG1);

   7164 10 000270   200004 473500                    LDP3    @ARG1,,AUTO
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:61   
        10 000271   000274 604000 10                 TMI     s:7165
        10 000272   300000 116100                    CMPQ    0,,PR3
        10 000273   000312 603000 10                 TRC     s:7169

      416     7165    3               CALL M$GDS (GET_MEM) ALTRET (NO_MEM);

   7165 10 000274   000036 630400 8                  EPPR0   GET_MEM
        10 000275   430001 713400                    CLIMB   alt,gds
        10 000276   400400 401760                    pmme    nvectors=2
        10 000277   001002 702000 10                 TSX2    NO_MEM

      417     7166    3               NPAGES = NPAGES + 1;

   7166 10 000300   000006 235000 8                  LDA     NPAGES
        10 000301   000001 035007                    ADLA    1,DL
        10 000302   000006 755000 8                  STA     NPAGES

      418     7167    3               TEMP = TEMP + 1024;

   7167 10 000303   002000 236007                    LDQ     1024,DL
        10 000304   000011 056000 8                  ASQ     TEMP

      419     7168    3               END;

   7168 10 000305   200004 470500                    LDP0    @ARG1,,AUTO
        10 000306   000011 236000 8                  LDQ     TEMP
        10 000307   000274 604000 10                 TMI     s:7165
        10 000310   000000 116100                    CMPQ    0,,PR0
        10 000311   000274 602000 10                 TNC     s:7165

      420     7169    2           TEMP = TEMP - 2048;

   7169 10 000312   004000 336007                    LCQ     2048,DL
        10 000313   000011 056000 8                  ASQ     TEMP

      421     7170    3           DO WHILE (TEMP > ARG1);

PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:62   
   7170 10 000314   200004 470500                    LDP0    @ARG1,,AUTO
        10 000315   000000 236100                    LDQ     0,,PR0
        10 000316   001000 604000 10                 TMI     IGNORE
        10 000317   000011 116000 8                  CMPQ    TEMP
        10 000320   001000 605000 10                 TPL     IGNORE

      422     7171    3               CALL M$FDS (GET_MEM) ALTRET (NO_MEM);

   7171 10 000321   000036 630400 8                  EPPR0   GET_MEM
        10 000322   430002 713400                    CLIMB   alt,fds
        10 000323   400400 401760                    pmme    nvectors=2
        10 000324   001002 702000 10                 TSX2    NO_MEM

      423     7172    3               NPAGES = NPAGES - 1;

   7172 10 000325   000006 235000 8                  LDA     NPAGES
        10 000326   000001 135007                    SBLA    1,DL
        10 000327   000006 755000 8                  STA     NPAGES

      424     7173    3               TEMP = TEMP - 1024;

   7173 10 000330   002000 336007                    LCQ     1024,DL
        10 000331   000011 056000 8                  ASQ     TEMP

      425     7174    3               END;

   7174 10 000332   200004 470500                    LDP0    @ARG1,,AUTO
        10 000333   000000 236100                    LDQ     0,,PR0
        10 000334   000337 604000 10                 TMI     s:7174+5
        10 000335   000011 116000 8                  CMPQ    TEMP
        10 000336   000321 604000 10                 TMI     s:7171
        10 000337   001000 710000 10                 TRA     IGNORE

      426     7175        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:63   
      427     7176         /* LL#CLOSESI -
      428     7177            Format:
      429     7178            CALL LLM$MON_SVC (LL#CLOSESI);
      430     7179            Function:
      431     7180            If M$SI is currently closed, no action is taken.
      432     7181            If M$SI is open, it is closed with save.
      433     7182            Errors:
      434     7183            None. */
      435     7184    2       CASE (LL#CLOSESI);

      436     7185    2           IF (M$SI$ -> B$DCB.FCD#) THEN

   7185 10 000340   000000 471400 8                  LDP1    M$SI$
        10 000341   100031 236100                    LDQ     25,,PR1
        10 000342   020000 316007                    CANQ    8192,DL
        10 000343   001000 600000 10                 TZE     IGNORE

      437     7186    2               CALL M$CLOSE (CLOSE_SI) ALTRET (IGNORE);

   7186 10 000344   001170 630400 8                  EPPR0   CLOSE_SI
        10 000345   450001 713400                    CLIMB   alt,close
        10 000346   406000 401760                    pmme    nvectors=13
        10 000347   001000 702000 10                 TSX2    IGNORE
        10 000350   001000 710000 10                 TRA     IGNORE

      438     7187        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:64   
      439     7188         /* LL#INITSI -
      440     7189            Format:
      441     7190            CALL LLM$MON_SVC (LL#INITSI);
      442     7191            Function:
      443     7192            Positions M$SI to closest file following the
      444     7193            file specified in LL#FIRSTFID.
      445     7194            Errors:
      446     7195            Handled by monitor. */
      447     7196    2       CASE (LL#INITSI);

      448     7197    2           CALL M$FID (FID_FILE);

   7197 10 000351   001064 630400 8                  EPPR0   FID_FILE
        10 000352   020001 713400                    CLIMB   8193
        10 000353   404400 401760                    pmme    nvectors=10

      449     7198    2           OPEN_SI_TEST.V.ASN# = 1;

   7198 10 000354   000001 236007                    LDQ     1,DL
        10 000355   000653 552004 8                  STBQ    OPEN_SI_TEST+37,'04'O

      450     7199    2           CALL M$OPEN (OPEN_SI_TEST);

   7199 10 000356   000606 630400 8                  EPPR0   OPEN_SI_TEST
        10 000357   050000 713400                    CLIMB   open
        10 000360   410400 401760                    pmme    nvectors=18

      451     7200    2           CALL M$UNFID (UNFID_SI_PRE);

   7200 10 000361   001142 630400 8                  EPPR0   UNFID_SI_PRE
        10 000362   020021 713400                    CLIMB   8209
        10 000363   404400 401760                    pmme    nvectors=10
        10 000364   001000 710000 10                 TRA     IGNORE

      452     7201        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:65   
      453     7202         /* LL#NXTFSI
      454     7203            Format:
      455     7204            CALL LLM$MON_SVC (LL#NXTFSI);
      456     7205            Function:
      457     7206            Advances M$SI to file immediatly following the
      458     7207            file specified in the DCB.
      459     7208            Errors:
      460     7209            Handled by monitor. */
      461     7210    2       CASE (LL#NXTFSI);

      462     7211    2           CALL M$OPEN (NXTF_SI_TEST);

   7211 10 000365   000700 630400 8                  EPPR0   NXTF_SI_TEST
        10 000366   050000 713400                    CLIMB   open
        10 000367   410400 401760                    pmme    nvectors=18

      463     7212    2           CALL M$UNFID (UNFID_SI_PRE);

   7212 10 000370   001142 630400 8                  EPPR0   UNFID_SI_PRE
        10 000371   020021 713400                    CLIMB   8209
        10 000372   404400 401760                    pmme    nvectors=10
        10 000373   001000 710000 10                 TRA     IGNORE

      464     7213        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:66   
      465     7214         /* LL#FREEMEM -
      466     7215            Format:
      467     7216            CALL LLM$MON_SVC (LL#FREEMEM);
      468     7217            Function:
      469     7218            Deallocates all memory acquired.
      470     7219            Errors:
      471     7220            Handled by monitor. */
      472     7221    2       CASE (LL#FREEMEM);

      473     7222    3           IF (NPAGES > 0) THEN DO;

   7222 10 000374   000006 236000 8                  LDQ     NPAGES
        10 000375   001000 600000 10                 TZE     IGNORE

      474     7223    3               FREE_MEM.V.PAGES# = NPAGES;

   7223 10 000376   000050 756000 8                  STQ     FREE_MEM+4

      475     7224    3               CALL M$FDP (FREE_MEM);

   7224 10 000377   000044 630400 8                  EPPR0   FREE_MEM
        10 000400   030004 713400                    CLIMB   12292
        10 000401   400400 401760                    pmme    nvectors=2

      476     7225    3               NPAGES = 0;

   7225 10 000402   000006 450000 8                  STZ     NPAGES

      477     7226    3               END;

   7226 10 000403   001000 710000 10                 TRA     IGNORE

      478     7227        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:67   
      479     7228         /* LL#EXIT -
      480     7229            Format:
      481     7230            CALL LLM$MON_SVC (LL#EXIT);
      482     7231            Function:
      483     7232            Issue a M$EXIT.
      484     7233            Errors:
      485     7234            None. */
      486     7235    2       CASE (LL#EXIT);

      487     7236    2           IF ( M$DO$ -> B$DCB.FCD# ) THEN

   7236 10 000404   000002 471400 8                  LDP1    M$DO$
        10 000405   100031 236100                    LDQ     25,,PR1
        10 000406   020000 316007                    CANQ    8192,DL
        10 000407   000413 600000 10                 TZE     s:7238

      488     7237    2               CALL M$CLOSE ( CLOSE_DO );

   7237 10 000410   001264 630400 8                  EPPR0   CLOSE_DO
        10 000411   050001 713400                    CLIMB   close
        10 000412   406000 401760                    pmme    nvectors=13

      489     7238    2           IF ( M$LO$ -> B$DCB.FCD# ) THEN

   7238 10 000413   000001 470400 8                  LDP0    M$LO$
        10 000414   000031 236100                    LDQ     25,,PR0
        10 000415   020000 316007                    CANQ    8192,DL
        10 000416   000422 600000 10                 TZE     s:7240

      490     7239    2               CALL M$CLOSE ( CLOSE_LO );

   7239 10 000417   001226 630400 8                  EPPR0   CLOSE_LO
        10 000420   050001 713400                    CLIMB   close
        10 000421   406000 401760                    pmme    nvectors=13

      491     7240    2           CALL M$EXIT;

PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:68   
   7240 10 000422   000001 713400                    CLIMB   exit
        10 000423   000000 401760                    pmme    nvectors=0
        10 000424   001000 710000 10                 TRA     IGNORE

      492     7241        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:69   
      493     7242         /* LL#ERR -
      494     7243            Format:
      495     7244            CALL LLM$MON_SVC (LL#ERR);
      496     7245            Function:
      497     7246            Issue a M$ERR.
      498     7247            Errors:
      499     7248            None. */
      500     7249    2       CASE (LL#ERR);

      501     7250    2           IF ( M$DO$ -> B$DCB.FCD# ) THEN

   7250 10 000425   000002 471400 8                  LDP1    M$DO$
        10 000426   100031 236100                    LDQ     25,,PR1
        10 000427   020000 316007                    CANQ    8192,DL
        10 000430   000434 600000 10                 TZE     s:7252

      502     7251    2               CALL M$CLOSE ( CLOSE_DO );

   7251 10 000431   001264 630400 8                  EPPR0   CLOSE_DO
        10 000432   050001 713400                    CLIMB   close
        10 000433   406000 401760                    pmme    nvectors=13

      503     7252    2           IF ( M$LO$ -> B$DCB.FCD# ) THEN

   7252 10 000434   000001 470400 8                  LDP0    M$LO$
        10 000435   000031 236100                    LDQ     25,,PR0
        10 000436   020000 316007                    CANQ    8192,DL
        10 000437   000443 600000 10                 TZE     s:7254

      504     7253    2               CALL M$CLOSE ( CLOSE_LO );

   7253 10 000440   001226 630400 8                  EPPR0   CLOSE_LO
        10 000441   050001 713400                    CLIMB   close
        10 000442   406000 401760                    pmme    nvectors=13

      505     7254    2           CALL M$ERR;

PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:70   
   7254 10 000443   000002 713400                    CLIMB   err
        10 000444   000000 401760                    pmme    nvectors=0
        10 000445   001000 710000 10                 TRA     IGNORE

      506     7255        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:71   
      507     7256         /* LL#FID
      508     7257            Format:
      509     7258            CALL LLM$MON_SVC (LL#FID);
      510     7259            Function:
      511     7260            Converts a file name in standard CP-6 format
      512     7261            into a form usable by the M$OPEN service.
      513     7262            Errors:
      514     7263            Handled by monitor. */
      515     7264    2       CASE (LL#FID);

      516     7265    2           CALL M$FID (FID_FILE);

   7265 10 000446   001064 630400 8                  EPPR0   FID_FILE
        10 000447   020001 713400                    CLIMB   8193
        10 000450   404400 401760                    pmme    nvectors=10
        10 000451   001000 710000 10                 TRA     IGNORE

      517     7266        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:72   
      518     7267    2       CASE (LL#WRITEME);

      519     7268    2           CALL M$WRITE (WRITE_ME) ALTRET (IGNORE);

   7268 10 000452   001632 630400 8                  EPPR0   WRITE_ME
        10 000453   440001 713400                    CLIMB   alt,write
        10 000454   401400 401760                    pmme    nvectors=4
        10 000455   001000 702000 10                 TSX2    IGNORE
        10 000456   001000 710000 10                 TRA     IGNORE

      520     7269        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:73   
      521     7270         /* LL#OPENSIFIL
      522     7271            Format:
      523     7272            CALL LLM$MON_SVC (LL#OPENSIFIL);
      524     7273            Function:
      525     7274            After a call to LLM$MON_SVC passign ll#fid as a
      526     7275            code, this routine may be called to open M$SI to
      527     7276            the file specified to M$FID */
      528     7277    2       CASE (LL#OPENSIFIL);

      529     7278    2           CALL M$OPEN (OPEN_SI);

   7278 10 000457   000772 630400 8                  EPPR0   OPEN_SI
        10 000460   050000 713400                    CLIMB   open
        10 000461   410400 401760                    pmme    nvectors=18

      530     7279    2           LL_TYPE = M$SI$ -> B$DCB.ORG#;

   7279 10 000462   000000 470400 8                  LDP0    M$SI$
        10 000463   000032 236100                    LDQ     26,,PR0
        10 000464   000033 772000                    QRL     27
        10 000465   000000 756000 xsym               STQ     LL_TYPE

      531     7280    2           CALL M$PRECORD (POS_SI) ALTRET(ERROR_EXIT);

   7280 10 000466   000000 630400 9                  EPPR0   POS_SI
        10 000467   440003 713400                    CLIMB   alt,+16387
        10 000470   401000 401760                    pmme    nvectors=3
        10 000471   001001 702000 10                 TSX2    ERROR_EXIT

      532     7281    2           EDIT_KEY = EDIT_KEY / 262144;

   7281 10 000472   000010 236000 8                  LDQ     EDIT_KEY
        10 000473   000022 772000                    QRL     18
        10 000474   000010 756000 8                  STQ     EDIT_KEY

      533     7282    2           IF BINBIT (EDIT_KEY,9) = '042'O

PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:74   
   7282 10 000475   000033 736000                    QLS     27
        10 000476   042000 116003                    CMPQ    17408,DU
        10 000477   001001 600000 10                 TZE     ERROR_EXIT
        10 000500   000010 235000 8                  LDA     EDIT_KEY
        10 000501   001000 115007                    CMPA    512,DL
        10 000502   000505 602000 10                 TNC     s:7282+8
        10 000503   003000 115007                    CMPA    1536,DL
        10 000504   001001 602000 10                 TNC     ERROR_EXIT
        10 000505   001000 710000 10                 TRA     IGNORE

      534     7283    2              OR EDIT_KEY>511 AND EDIT_KEY<3*512
      535     7284    2           THEN GOTO ERROR_EXIT;
      536     7285        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:75   
      537     7286         /* LL#UNFIDSI
      538     7287            Format:
      539     7288            CALL LLM$MON_SVC (LL#UNFIDSI);
      540     7289            Function:
      541     7290            Performs a M$UNFID on dcb M$SI and places the
      542     7291            text result in LL#OPENFID.
      543     7292            Errors:
      544     7293            Handled by monitor. */
      545     7294    2       CASE (LL#UNFIDSI);

      546     7295    2           CALL M$UNFID (UNFID_SI);

   7295 10 000506   001114 630400 8                  EPPR0   UNFID_SI
        10 000507   020021 713400                    CLIMB   8209
        10 000510   404400 401760                    pmme    nvectors=10
        10 000511   001000 710000 10                 TRA     IGNORE

      547     7296        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:76   
      548     7297         /* LL#READHEAD
      549     7298            Format:
      550     7299            CALL LLM$MON_SVC (LL#READHEAD, BUF$, BOUND, KEY);
      551     7300            Fucntion:
      552     7301            Reads a head record of the currently open file thru
      553     7302            the M$EF dcb.  No key is specified, however the
      554     7303            key of the record record reas is returned in
      555     7304            KEY, the record read is returned in BUF$ and
      556     7305            BOUND specifies the length to read.
      557     7306            Errors:
      558     7307            None. */
      559     7308    2       CASE (LL#READHEAD);

      560     7309    2           READ_HEAD.BUF_.BUF$ = ARG1$;

   7309 10 000512   200004 471500                    LDP1    @ARG1,,AUTO
        10 000513   100000 236100                    LDQ     0,,PR1
        10 000514   001457 756000 8                  STQ     READ_HEAD+5

      561     7310    2           READ_HEAD.BUF_.BOUND = ARG2;

   7310 10 000515   200005 473500                    LDP3    @ARG2,,AUTO
        10 000516   300000 236100                    LDQ     0,,PR3
        10 000517   000020 736000                    QLS     16
        10 000520   001456 676000 8                  ERQ     READ_HEAD+4
        10 000521   000034 376000 xsym               ANQ     B_VECTNIL+28
        10 000522   001456 656000 8                  ERSQ    READ_HEAD+4

      562     7311    2           READ_HEAD.KEY_ = VECTOR(ARG3);

   7311 10 000523   000003 235000 11                 LDA     3
        10 000524   200006 236100                    LDQ     @ARG3,,AUTO
        10 000525   001454 757000 8                  STAQ    READ_HEAD+2

      563     7312    2           CALL M$READ (READ_HEAD) ALTRET (ERROR_EXIT);

   7312 10 000526   001452 630400 8                  EPPR0   READ_HEAD
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:77   
        10 000527   440000 713400                    CLIMB   alt,read
        10 000530   401400 401760                    pmme    nvectors=4
        10 000531   001001 702000 10                 TSX2    ERROR_EXIT
        10 000532   001000 710000 10                 TRA     IGNORE

      564     7313        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:78   
      565     7314         /* LL#READRU
      566     7315            Format:
      567     7316            CALL LLM$MON_SVC (LL#READRU, BUF$, BOUND, KEY);
      568     7317            Function:
      569     7318            Reads a record specified by KEY from the file
      570     7319            open thru M$RU into BUF$ of length BOUND-1.
      571     7320            Errors:
      572     7321            Altreturns if no record exists. */
      573     7322    2       CASE (LL#READRU);

      574     7323    2           READ_RU.BUF_.BOUND = ARG2;

   7323 10 000533   200005 471500                    LDP1    @ARG2,,AUTO
        10 000534   100000 236100                    LDQ     0,,PR1
        10 000535   000020 736000                    QLS     16
        10 000536   001474 676000 8                  ERQ     READ_RU+4
        10 000537   000034 376000 xsym               ANQ     B_VECTNIL+28
        10 000540   001474 656000 8                  ERSQ    READ_RU+4

      575     7324    2           READ_RU.BUF_.BUF$ = ARG1$;

   7324 10 000541   200004 473500                    LDP3    @ARG1,,AUTO
        10 000542   300000 236100                    LDQ     0,,PR3
        10 000543   001475 756000 8                  STQ     READ_RU+5

      576     7325    2           READ_RU.KEY_ = VECTOR(ARG3);

   7325 10 000544   000003 235000 11                 LDA     3
        10 000545   200006 236100                    LDQ     @ARG3,,AUTO
        10 000546   001472 757000 8                  STAQ    READ_RU+2

      577     7326    2           CALL M$READ (READ_RU) ALTRET (ERROR_EXIT);

   7326 10 000547   001470 630400 8                  EPPR0   READ_RU
        10 000550   440000 713400                    CLIMB   alt,read
        10 000551   401400 401760                    pmme    nvectors=4
        10 000552   001001 702000 10                 TSX2    ERROR_EXIT
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:79   
        10 000553   001000 710000 10                 TRA     IGNORE

      578     7327        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:80   
      579     7328         /* LL#WRITERU
      580     7329            Format:
      581     7330            CALL LLM$MON_SVC (LL#WRITE_RU, BUF$, BOUND, KEY);
      582     7331            Function:
      583     7332            Write a record of length BOUND beginning at
      584     7333            BUF$ to be written thru M$RU with key KEY.
      585     7334            Errors:
      586     7335            None. */
      587     7336    2       CASE (LL#WRITERU);

      588     7337    2           WRITE_RU.BUF_.BUF$ = ARG1$;

   7337 10 000554   200004 471500                    LDP1    @ARG1,,AUTO
        10 000555   100000 236100                    LDQ     0,,PR1
        10 000556   001573 756000 8                  STQ     WRITE_RU+5

      589     7338    2           KEY$ = ADDR ( ARG3 );

   7338 10 000557   200006 236100                    LDQ     @ARG3,,AUTO
        10 000560   200011 756100                    STQ     KEY$,,AUTO

      590     7339    2           WRITE_RU.BUF_.BOUND = ARG2;

   7339 10 000561   200005 473500                    LDP3    @ARG2,,AUTO
        10 000562   300000 236100                    LDQ     0,,PR3
        10 000563   000020 736000                    QLS     16
        10 000564   001572 676000 8                  ERQ     WRITE_RU+4
        10 000565   000034 376000 xsym               ANQ     B_VECTNIL+28
        10 000566   001572 656000 8                  ERSQ    WRITE_RU+4

      591     7340    2           WRITE_RU.KEY_ = VECTOR(ARG3);

   7340 10 000567   000003 235000 11                 LDA     3
        10 000570   200006 236100                    LDQ     @ARG3,,AUTO
        10 000571   001570 757000 8                  STAQ    WRITE_RU+2

      592     7341    2           CALL M$WRITE (WRITE_RU);
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:81   

   7341 10 000572   001566 630400 8                  EPPR0   WRITE_RU
        10 000573   040001 713400                    CLIMB   write
        10 000574   401400 401760                    pmme    nvectors=4
        10 000575   001000 710000 10                 TRA     IGNORE

      593     7342        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:82   
      594     7343         /* LL#READOU
      595     7344            Format:
      596     7345            CALL LLM$MONSVC (LL#READOU, BUF$, BOUND, KEY)
      597     7346            ALTRET (STMT_LBL);
      598     7347            Function:
      599     7348            Reads a record thru M$EF into BUF$ of length
      600     7349            BOUND.  The record is specified by key KEY.
      601     7350            Errors:
      602     7351            Altreturns if a record specified by key is not
      603     7352            found. */
      604     7353    2       CASE (LL#READOU);

      605     7354    2           READ_OU.BUF_.BUF$ = ARG1$;

   7354 10 000576   200004 471500                    LDP1    @ARG1,,AUTO
        10 000577   100000 236100                    LDQ     0,,PR1
        10 000600   001513 756000 8                  STQ     READ_OU+5

      606     7355    2           READ_OU.BUF_.BOUND = ARG2;

   7355 10 000601   200005 473500                    LDP3    @ARG2,,AUTO
        10 000602   300000 236100                    LDQ     0,,PR3
        10 000603   000020 736000                    QLS     16
        10 000604   001512 676000 8                  ERQ     READ_OU+4
        10 000605   000034 376000 xsym               ANQ     B_VECTNIL+28
        10 000606   001512 656000 8                  ERSQ    READ_OU+4

      607     7356    2           READ_OU.KEY_ = VECTOR(ARG3);

   7356 10 000607   000003 235000 11                 LDA     3
        10 000610   200006 236100                    LDQ     @ARG3,,AUTO
        10 000611   001510 757000 8                  STAQ    READ_OU+2

      608     7357    2           CALL M$READ (READ_OU) ALTRET (ERROR_EXIT);

   7357 10 000612   001506 630400 8                  EPPR0   READ_OU
        10 000613   440000 713400                    CLIMB   alt,read
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:83   
        10 000614   401400 401760                    pmme    nvectors=4
        10 000615   001001 702000 10                 TSX2    ERROR_EXIT
        10 000616   001000 710000 10                 TRA     IGNORE

      609     7358        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:84   
      610     7359         /* LL#SIZEEF
      611     7360            Format:
      612     7361            CALL LLM$MON_SVC (LL#SIZEEF, TEMP);
      613     7362            Function:
      614     7363            Returns in TEMP the size of the last record
      615     7364            read thru M$EF.
      616     7365            Errors:
      617     7366            None. */
      618     7367    2       CASE (LL#SIZEEF);

      619     7368    2           ARG1 = M$EF$ -> B$DCB.ARS#;

   7368 10 000617   000003 471400 8                  LDP1    M$EF$
        10 000620   100000 235100                    LDA     0,,PR1
        10 000621   200004 473500                    LDP3    @ARG1,,AUTO
        10 000622   300000 755100                    STA     0,,PR3
        10 000623   001000 710000 10                 TRA     IGNORE

      620     7369        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:85   
      621     7370         /* LL#POSTOHEAD
      622     7371            Format:
      623     7372            CALL LLM$MON_SVC (LL#POSTOHEAD, NIL, NIL, KEY);
      624     7373            Function:
      625     7374            Positions M$EF to the record following that
      626     7375            specified by KEY and returns in KEY the key of
      627     7376            record positioned to.
      628     7377            Errors:
      629     7378            Handled by monitor. */
      630     7379    2       CASE (LL#POSTOHEAD);

      631     7380    2           POS_TO_HEAD.KEY_ = VECTOR(ARG3);

   7380 10 000624   000003 235000 11                 LDA     3
        10 000625   200006 236100                    LDQ     @ARG3,,AUTO
        10 000626   001556 757000 8                  STAQ    POS_TO_HEAD+2

      632     7381    2           CALL M$PRECORD (POS_TO_HEAD);

   7381 10 000627   001554 630400 8                  EPPR0   POS_TO_HEAD
        10 000630   040003 713400                    CLIMB   16387
        10 000631   401000 401760                    pmme    nvectors=3
        10 000632   001000 710000 10                 TRA     IGNORE

      633     7382        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:86   
      634     7383         /* LL#CLOSEEF, LL#CLOSERU, LL#OPENEF, & LL#OPENRU
      635     7384            Format:
      636     7385            CALL LLM$MON_SVC (LL#xxx);
      637     7386            Function:
      638     7387            Opens or closes a specified dcb (M$EF or M$RU).
      639     7388            Errors:
      640     7389            Handled by monitor */
      641     7390    2       CASE (LL#CLOSEEF);

      642     7391    2           CALL M$CLOSE (CLOSE_EF);

   7391 10 000633   001322 630400 8                  EPPR0   CLOSE_EF
        10 000634   050001 713400                    CLIMB   close
        10 000635   406000 401760                    pmme    nvectors=13
        10 000636   001000 710000 10                 TRA     IGNORE

      643     7392    2       CASE (LL#CLOSERU);

      644     7393    2           CALL M$CLOSE (CLOSE_RU);

   7393 10 000637   001360 630400 8                  EPPR0   CLOSE_RU
        10 000640   050001 713400                    CLIMB   close
        10 000641   406000 401760                    pmme    nvectors=13
        10 000642   001000 710000 10                 TRA     IGNORE

      645     7394    2       CASE (LL#OPENRU);

      646     7395    2           LL_FIRSTFID = LL_RUNUNIT;

   7395 10 000643   040000 100400                    MLR     fill='040'O
        10 000644   000000 000064 xsym               ADSC9   LL_RUNUNIT               cn=0,n=52
        10 000645   000000 000064 xsym               ADSC9   LL_FIRSTFID              cn=0,n=52

      647     7396    2           CALL M$FID (FID_FILE);

   7396 10 000646   001064 630400 8                  EPPR0   FID_FILE
        10 000647   020001 713400                    CLIMB   8193
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:87   
        10 000650   404400 401760                    pmme    nvectors=10

      648     7397    3           IF (LL_FLAGS.OVER#) THEN DO;

   7397 10 000651   000000 236000 xsym               LDQ     LL_FLAGS
        10 000652   000100 316003                    CANQ    64,DU
        10 000653   000660 600000 10                 TZE     s:7401

      649     7398    3               OPEN_RU.V.EXIST# = 3;

   7398 10 000654   000600 236007                    LDQ     384,DL
        10 000655   000374 256000 8                  ORSQ    OPEN_RU+36

      650     7399    3               OPEN_RU.V.CTG# = '0'B;

   7399 10 000656   000004 236000 11                 LDQ     4
        10 000657   000374 356000 8                  ANSQ    OPEN_RU+36

      651     7400    3               END;

      652     7401    2           CALL M$OPEN (OPEN_RU);

   7401 10 000660   000330 630400 8                  EPPR0   OPEN_RU
        10 000661   050000 713400                    CLIMB   open
        10 000662   410400 401760                    pmme    nvectors=18
        10 000663   001000 710000 10                 TRA     IGNORE

      653     7402    2       CASE (LL#OPENEF);

      654     7403    2           IF LL_SRCH.NUM = 0 OR

   7403 10 000664   000000 236000 xsym               LDQ     LL_SRCH
        10 000665   000671 600000 10                 TZE     s:7406
        10 000666   001672 236000 8                  LDQ     FID_RESULTS
        10 000667   200000 316003                    CANQ    65536,DU
        10 000670   000676 600000 10                 TZE     SEARCH_EF

PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:88   
      655     7404    2              FID_RESULTS.ACCT
      656     7405    2           THEN
      657     7406    2               CALL M$OPEN( OPEN_EF ) ALTRET( ERROR_EXIT );

   7406 10 000671   000514 630400 8                  EPPR0   OPEN_EF
        10 000672   450000 713400                    CLIMB   alt,open
        10 000673   410400 401760                    pmme    nvectors=18
        10 000674   001001 702000 10                 TSX2    ERROR_EXIT
        10 000675   001000 710000 10                 TRA     IGNORE

      658     7407    3           ELSE DO;

      659     7408    3   SEARCH_EF:
      660     7409    4               DO CURSRCH = 0 TO LL_SRCH.NUM-1;

   7409 10 000676   200010 450100       SEARCH_EF    STZ     CURSRCH,,AUTO
        10 000677   000720 710000 10                 TRA     s:7416+1

      661     7410    4                   VLP_ACCT.ACCT# = LL_SRCH.ACCT(CURSRCH);

   7410 10 000700   200010 235100                    LDA     CURSRCH,,AUTO
        10 000701   000003 735000                    ALS     3
        10 000702   040000 100405                    MLR     fill='040'O
        10 000703   000001 000010 xsym               ADSC9   LL_SRCH+1,A              cn=0,n=8
        10 000704   001660 000010 8                  ADSC9   VLP_ACCT                 cn=0,n=8

      662     7411    4                   VLP_SN.SN#(0) = LL_SRCH.SN(CURSRCH);

   7411 10 000705   200010 236100                    LDQ     CURSRCH,,AUTO
        10 000706   000006 402007                    MPY     6,DL
        10 000707   040000 100406                    MLR     fill='040'O
        10 000710   000027 000006 xsym               ADSC9   LL_SRCH+23,Q             cn=0,n=6
        10 000711   001667 000006 8                  ADSC9   VLP_SN+1                 cn=0,n=6

      663     7412    4                   CALL M$OPEN( OPEN_EF )

   7412 10 000712   000514 630400 8                  EPPR0   OPEN_EF
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:89   
        10 000713   450000 713400                    CLIMB   alt,open
        10 000714   410400 401760                    pmme    nvectors=18
        10 000715   000717 702000 10                 TSX2    s:7416

      664     7413    5                   WHENRETURN DO;

      665     7414    5                       EXIT SEARCH_EF;

   7414 10 000716   000723 710000 10                 TRA     s:7417

      666     7415    5                       END;
      667     7416    4                   END SEARCH_EF;

   7416 10 000717   200010 054100                    AOS     CURSRCH,,AUTO
        10 000720   200010 236100                    LDQ     CURSRCH,,AUTO
        10 000721   000000 116000 xsym               CMPQ    LL_SRCH
        10 000722   000700 604000 10                 TMI     s:7410

      668     7417    3               IF CURSRCH >= LL_SRCH.NUM

   7417 10 000723   200010 236100                    LDQ     CURSRCH,,AUTO
        10 000724   000000 116000 xsym               CMPQ    LL_SRCH
        10 000725   001001 605000 10                 TPL     ERROR_EXIT

      669     7418    3               THEN
      670     7419    3                   GOTO ERROR_EXIT;
      671     7420    3               END;

   7420 10 000726   001000 710000 10                 TRA     IGNORE

      672     7421        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:90   
      673     7422    2       CASE (LL#TIME);

      674     7423    2           CALL M$TIME (GET_UTS);

   7423 10 000727   000022 630400 8                  EPPR0   GET_UTS
        10 000730   020004 713400                    CLIMB   8196
        10 000731   402000 401760                    pmme    nvectors=5

      675     7424    2           ARG1 = TIME;

   7424 10 000732   200004 470500                    LDP0    @ARG1,,AUTO
        10 000733   000007 235000 8                  LDA     TIME
        10 000734   000000 755100                    STA     0,,PR0
        10 000735   001000 710000 10                 TRA     IGNORE

      676     7425        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:91   
      677     7426    2       CASE (LL#OPENRUIN);

      678     7427    2           LL_FIRSTFID = LL_RUNUNIT;

   7427 10 000736   040000 100400                    MLR     fill='040'O
        10 000737   000000 000064 xsym               ADSC9   LL_RUNUNIT               cn=0,n=52
        10 000740   000000 000064 xsym               ADSC9   LL_FIRSTFID              cn=0,n=52

      679     7428    2           CALL M$FID (FID_FILE);

   7428 10 000741   001064 630400 8                  EPPR0   FID_FILE
        10 000742   020001 713400                    CLIMB   8193
        10 000743   404400 401760                    pmme    nvectors=10

      680     7429    2           CALL M$OPEN (OPEN_RU_IN);

   7429 10 000744   000422 630400 8                  EPPR0   OPEN_RU_IN
        10 000745   050000 713400                    CLIMB   open
        10 000746   410400 401760                    pmme    nvectors=18
        10 000747   001000 710000 10                 TRA     IGNORE

      681     7430    2       CASE (LL#POSEF);

      682     7431    2           POS_EF.KEY_ = VECTOR (ARG3);

   7431 10 000750   000003 235000 11                 LDA     3
        10 000751   200006 236100                    LDQ     @ARG3,,AUTO
        10 000752   001544 757000 8                  STAQ    POS_EF+2

      683     7432    2           CALL M$PRECORD (POS_EF) ALTRET (ERROR_EXIT);

   7432 10 000753   001542 630400 8                  EPPR0   POS_EF
        10 000754   440003 713400                    CLIMB   alt,+16387
        10 000755   401000 401760                    pmme    nvectors=3
        10 000756   001001 702000 10                 TSX2    ERROR_EXIT
        10 000757   001000 710000 10                 TRA     IGNORE

PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:92   
      684     7433    2       CASE (LL#RDEFSQ);

      685     7434    2           SEQ_EF_READ.BUF_.BUF$ = ARG1$;

   7434 10 000760   200004 471500                    LDP1    @ARG1,,AUTO
        10 000761   100000 236100                    LDQ     0,,PR1
        10 000762   001531 756000 8                  STQ     SEQ_EF_READ+5

      686     7435    2           SEQ_EF_READ.BUF_.BOUND = ARG2;

   7435 10 000763   200005 473500                    LDP3    @ARG2,,AUTO
        10 000764   300000 236100                    LDQ     0,,PR3
        10 000765   000020 736000                    QLS     16
        10 000766   001530 676000 8                  ERQ     SEQ_EF_READ+4
        10 000767   000034 376000 xsym               ANQ     B_VECTNIL+28
        10 000770   001530 656000 8                  ERSQ    SEQ_EF_READ+4

      687     7436    2           SEQ_EF_READ.KEY_ = VECTOR (ARG3);

   7436 10 000771   000003 235000 11                 LDA     3
        10 000772   200006 236100                    LDQ     @ARG3,,AUTO
        10 000773   001526 757000 8                  STAQ    SEQ_EF_READ+2

      688     7437    2           CALL M$READ (SEQ_EF_READ) ALTRET (ERROR_EXIT);

   7437 10 000774   001524 630400 8                  EPPR0   SEQ_EF_READ
        10 000775   440000 713400                    CLIMB   alt,read
        10 000776   401400 401760                    pmme    nvectors=4
        10 000777   001001 702000 10                 TSX2    ERROR_EXIT

      689     7438    2           END;

      690     7439        %EJECT;
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:93   
      691     7440    1   IGNORE:
      692     7441    1       RETURN;

   7441 10 001000   000000 702200 xent  IGNORE       TSX2  ! X66_ARET

      693     7442    1   ERROR_EXIT:
      694     7443    1       ALTRETURN;

   7443 10 001001   000000 702200 xent  ERROR_EXIT   TSX2  ! X66_AALT

      695     7444    1   NO_MEM:
      696     7445    1       LL_DOBUF = 'A  ***Can''t get any more memory';

   7445 10 001002   040000 100400       NO_MEM       MLR     fill='040'O
        10 001003   000012 000037 9                  ADSC9   POS_SI+10                cn=0,n=31
        10 001004   000000 000160 xsym               ADSC9   LL_DOBUF                 cn=0,n=112

      697     7446    1       CALL M$WRITE (WRITE_DO);

   7446 10 001005   001616 630400 8                  EPPR0   WRITE_DO
        10 001006   040001 713400                    CLIMB   write
        10 001007   401400 401760                    pmme    nvectors=4

      698     7447    1       CALL BINCHAR (TEST_STR, NPAGES + (LL_DNAME_VEC.BOUND + 1 +

   7447 10 001010   000000 236000 xsym               LDQ     LL_DNAME_VEC
        10 001011   000022 772000                    QRL     18
        10 001012   000000 036000 xsym               ADLQ    LL_UREF_NAME_MAX
        10 001013   000000 036000 xsym               ADLQ    LL_U_SYMREF_MAX
        10 001014   000000 036000 xsym               ADLQ    LL_U_ENTREF_MAX
        10 001015   000001 036007                    ADLQ    1,DL
        10 001016   000012 772000                    QRL     10
        10 001017   000006 036000 8                  ADLQ    NPAGES
        10 001020   000000 235003                    LDA     0,DU
        10 001021   200014 757100                    STAQ    TEST_STR+2,,AUTO
        10 001022   000100 301500                    BTD
        10 001023   200014 000010                    NDSC9   TEST_STR+2,,AUTO         cn=0,s=lsgnf,sf=0,n=8
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:94   
        10 001024   200012 030006                    NDSC9   TEST_STR,,AUTO           cn=0,s=nosgn,sf=0,n=6

      699     7448    1          LL_UREF_NAME_MAX + LL_U_SYMREF_MAX + LL_U_ENTREF_MAX) / 1024);
      700     7449    1       CALL INSERT (LL_DOBUF,0,,'A  ***',TEST_STR,' pages used');

   7449 10 001025   040000 100400                    MLR     fill='040'O
        10 001026   000012 000006 9                  ADSC9   POS_SI+10                cn=0,n=6
        10 001027   000000 000006 xsym               ADSC9   LL_DOBUF                 cn=0,n=6
        10 001030   040000 100500                    MLR     fill='040'O
        10 001031   200012 000006                    ADSC9   TEST_STR,,AUTO           cn=0,n=6
        10 001032   000001 400006 xsym               ADSC9   LL_DOBUF+1               cn=2,n=6
        10 001033   040000 100400                    MLR     fill='040'O
        10 001034   000022 000013 9                  ADSC9   POS_SI+18                cn=0,n=11
        10 001035   000003 000144 xsym               ADSC9   LL_DOBUF+3               cn=0,n=100

      701     7450    1       CALL M$WRITE (WRITE_DO);

   7450 10 001036   001616 630400 8                  EPPR0   WRITE_DO
        10 001037   040001 713400                    CLIMB   write
        10 001040   401400 401760                    pmme    nvectors=4

      702     7451    1       CALL M$ERR;

   7451 10 001041   000002 713400                    CLIMB   err
        10 001042   000000 401760                    pmme    nvectors=0

      703     7452    1   END LLM$MON_SVC;

   7452 10 001043   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:95   
--  Include file information  --

   B$OBJECT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   LL_MACS_C.:E05TOU  is referenced.
   LL_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   LL_SUBS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure LLM$MON_SVC.
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:96   

 **** Variables and constants ****

  ****  Section 008  Data  LLM$MON_SVC

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

  1264-0-0/d STRC(1080)  r     1 CLOSE_DO                1322-0-0/d STRC(1080)  r     1 CLOSE_EF
  1226-0-0/d STRC(1080)  r     1 CLOSE_LO                1360-0-0/d STRC(1080)  r     1 CLOSE_RU
  1170-0-0/d STRC(1080)  r     1 CLOSE_SI                  16-0-0/d STRC(144)   r     1 COMP_DO_TO_LO
    10-0-0/w UBIN        r     1 EDIT_KEY                1064-0-0/d STRC(864)   r     1 FID_FILE
  1672-0-0/d STRC(324)   r     1 FID_RESULTS               44-0-0/d STRC(216)   r     1 FREE_MEM
    36-0-0/d STRC(216)   r     1 GET_MEM                   22-0-0/d STRC(432)   r     1 GET_UTS
     2-0-0/w PTR         r     1 M$DO$                      3-0-0/w PTR         r     1 M$EF$
     5-0-0/w PTR         r     1 M$LI$                      1-0-0/w PTR         r     1 M$LO$
     4-0-0/w PTR         r     1 M$RU$                      0-0-0/w PTR         r     1 M$SI$
     6-0-0/w UBIN        r     1 NPAGES                   700-0-0/d STRC(2088)  r     1 NXTF_SI_TEST
   144-0-0/d STRC(2088)  r     1 OPEN_DO                  514-0-0/d STRC(2088)  r     1 OPEN_EF
   236-0-0/d STRC(2088)  r     1 OPEN_LO                  330-0-0/d STRC(2088)  r     1 OPEN_RU
   422-0-0/d STRC(2088)  r     1 OPEN_RU_IN               772-0-0/d STRC(2088)  r     1 OPEN_SI
    52-0-0/d STRC(2088)  r     1 OPEN_SI_CR               606-0-0/d STRC(2088)  r     1 OPEN_SI_TEST
  1542-0-0/d STRC(360)   r     1 POS_EF                  1554-0-0/d STRC(360)   r     1 POS_TO_HEAD
  1434-0-0/d STRC(504)   r     1 READ_COM                1416-0-0/d STRC(504)   r     1 READ_COM_FIL
  1452-0-0/d STRC(504)   r     1 READ_HEAD               1506-0-0/d STRC(504)   r     1 READ_OU
  1470-0-0/d STRC(504)   r     1 READ_RU                 1660-0-0/c CHAR(8)     r     1 SEMICOLON
  1524-0-0/d STRC(504)   r     1 SEQ_EF_READ               12-0-0/d STRC(144)   r     1 SET_BREAK
    11-0-0/w SBIN        r     1 TEMP                       7-0-0/w UBIN        r     1 TIME
  1114-0-0/d STRC(792)   r     1 UNFID_SI                1142-0-0/d STRC(792)   r     1 UNFID_SI_PRE
  1660-0-0/c STRC(72)    r     1 VLP_ACCT                1650-0-0/c STRC(288)   r     1 VLP_NAME
  1662-0-0/c STRC(72)    r     1 VLP_PASS                1666-0-0/d STRC(90)    r     1 VLP_SN
  1646-0-0/d STRC(72)    r     1 VLP_VECTOR              1664-0-0/c STRC(72)    r     1 VLP_WSN
  1616-0-0/d STRC(432)   r     1 WRITE_DO                1602-0-0/d STRC(432)   r     1 WRITE_LO
  1632-0-0/d STRC(432)   r     1 WRITE_ME                1566-0-0/d STRC(432)   r     1 WRITE_RU

  ****  Section 009 RoData LLM$MON_SVC

  ****  Scalars and arrays  ****
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:97   
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(360)   r     1 POS_SI

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @ARG1                      5-0-0/w PTR         r     1 @ARG2
     6-0-0/w PTR         r     1 @ARG3                      3-0-0/w PTR         r     1 @CODE
    *0-0-0/w UBIN        r     1 ARG1                      *0-0-0/w PTR         r     1 ARG1$
    *0-0-0/w UBIN        r     1 ARG2                      *0-0-0/w PTR         r     1 ARG2$
    *0-0-0/w UBIN(18)    r     1 ARG2H                     *0-0-0/w STRC(288)   r     1 ARG3
    *0-0-0/w UBIN        r     1 CODE                      10-0-0/w SBIN        r     1 CURSRCH
    11-0-0/w PTR         r     1 KEY$                      12-0-0/c CHAR(6)     r     1 TEST_STR

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$
     0-0-0/w UBIN        r     1 B_VERSION(0:1)
     0-0-0/w PTR         r     1 LL_BOTOMEM$                0-0-0/d STRC(72)    r     1 LL_DNAME_VEC
     0-0-0/w CHAR(112)   r     1 LL_DOBUF                   0-0-0/w CHAR(52)    r     1 LL_FIRSTFID
     0-0-0/w STRC        r     1 LL_FLAGS                   0-0-0/w CHAR(112)   r     1 LL_LOBUF
     0-0-0/c CHAR(108)   r     1 LL_MEBUF                   0-0-0/w CHAR(52)    r     1 LL_OPENFID
     0-0-0/w CHAR(52)    r     1 LL_RUNUNIT                 0-0-0/w STRC(477)   r     1 LL_SPECFID
     0-0-0/w STRC(1422)  r     1 LL_SRCH                    0-0-0/w UBIN        r     1 LL_STATE
     0-0-0/w PTR         r     1 LL_TOPOMEM$                0-0-0/w UBIN        r     1 LL_TYPE
     0-0-0/w UBIN        r     1 LL_UREF_NAME_MAX           0-0-0/w UBIN        r     1 LL_U_ENTREF_MAX
     0-0-0/w UBIN        r     1 LL_U_SYMREF_MAX            0-0-0/w STRC(63)    r     1 LL_VERSION
     0-0-0/w BIT         r     1 LL_WIDE#

  ****  BASED and DCB variables  ****

PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:98   
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d ASTR(3528)  r     1 B$DCB                      0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$EF
     0-0-0N  NULL        r     1 M$LI                       0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$ME                       0-0-0N  NULL        r     1 M$RU
     0-0-0N  NULL        r     1 M$SI


   Procedure LLM$MON_SVC requires 548 words for executable code.
   Procedure LLM$MON_SVC requires 14 words of local(AUTO) storage.

    No errors detected in file LLM$MON_SVC.:E05TSI    .
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:99   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:100  
          MINI XREF LISTING

ARG1
      4905**DCL        20--PROC     4906--REDEF    7162--IF       7164>>DOWHILE  7170>>DOWHILE  7368<<ASSIGN
      7424<<ASSIGN
ARG1$
      4906**DCL      7086<<ASSIGN   7125>>ASSIGN   7309>>ASSIGN   7324>>ASSIGN   7337>>ASSIGN   7354>>ASSIGN
      7434>>ASSIGN
ARG2
      4907**DCL        20--PROC     4908--REDEF    4909--REDEF    7128<<ASSIGN   7310>>ASSIGN   7323>>ASSIGN
      7339>>ASSIGN   7355>>ASSIGN   7435>>ASSIGN
ARG2$
      4908**DCL      7088<<ASSIGN   7092<<ASSIGN
ARG2H
      4909**DCL      7163>>ASSIGN
ARG3
      4910**DCL        20--PROC     4914--REDEF    7311--ASSIGN   7325--ASSIGN   7338--ASSIGN   7340--ASSIGN
      7356--ASSIGN   7380--ASSIGN   7431--ASSIGN   7436--ASSIGN
ARG3.INTG
      4911**DCL      4912--REDEF    7089<<ASSIGN   7093<<ASSIGN   7129<<ASSIGN
B$DCB.ACTPOS
      4978**DCL      4978--REDEF
B$DCB.ARS#
      4952**DCL      4952--REDEF    7128>>ASSIGN   7368>>ASSIGN
B$DCB.ASN#
      4967**DCL      7104>>IF
B$DCB.ATTR
      4971**DCL      4972--REDEF
B$DCB.BORROW
      4986**DCL      4986--REDEF    4986--REDEF    4986--REDEF
B$DCB.DCBNAME.L
      5000**DCL      5000--IMP-SIZ
B$DCB.EOMCHAR#
      4956**DCL      4956--REDEF
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:101  
B$DCB.FCD#
      4965**DCL      7185>>IF       7236>>IF       7238>>IF       7250>>IF       7252>>IF
B$DCB.FLDID
      4981**DCL      4981--REDEF
B$DCB.FORM$
      4975**DCL      4975--REDEF
B$DCB.FSECT
      4991**DCL      4991--REDEF
B$DCB.FSN#
      4968**DCL      4968--REDEF    4968--REDEF    4969--REDEF
B$DCB.HEADER$
      4974**DCL      4974--REDEF
B$DCB.IXTNSIZE#
      4972**DCL      4972--REDEF
B$DCB.LASTSTA$
      4961**DCL      4961--REDEF
B$DCB.LVL
      4987**DCL      4987--REDEF
B$DCB.NAME#.C
      4962**DCL      4962--REDEF
B$DCB.NOEOF
      4984**DCL      4984--REDEF
B$DCB.NRECS#
      4973**DCL      4973--REDEF
B$DCB.NRECX
      4992**DCL      4992--REDEF
B$DCB.OHDR
      4984**DCL      4984--REDEF
B$DCB.ORG#
      4967**DCL      4967--REDEF    7104>>IF       7279>>ASSIGN
B$DCB.PRECNO
      4990**DCL      4990--REDEF
B$DCB.RCSZ
      4996**DCL      4996--REDEF
B$DCB.RES#
      4963**DCL      4963--REDEF
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:102  
B$DCB.SETX
      4975**DCL      4975--REDEF
B$DCB.TAB$
      4975**DCL      4975--REDEF
B$DCB.TDA
      4989**DCL      4990--REDEF
B$DCB.WIDTH#
      4959**DCL      7106>>IF
B$DCB.WSN#
      4963**DCL      4963--REDEF
B$JIT.CCARS
      1263**DCL      7089>>ASSIGN
B$JIT.CCBUF
      1263**DCL      7088--ASSIGN
B$JIT.CPFLAGS1.SLEAZE
      1269**DCL      1269--REDEF
B$JIT.ERR.MID
      1176**DCL      1176--REDEF
B$JIT.JRESPEAK
      1337**DCL      1338--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
      1446**DCL      1446--REDEF    1447--REDEF
B$JIT.PNR
      1350**DCL      1350--REDEF
B$JIT.PRFLAGS.CONTINUED
      1259**DCL      7087>>IF
B$JIT.TSLINE
      1444**DCL      1445--REDEF
B$JIT$
      4933**DCL      1170--IMP-PTR  7087>>IF       7088>>ASSIGN   7089>>ASSIGN
B_VERSION
      4938**DCL      7110>>ASSIGN
CLOSE_DO
      6340**DCL      7237<>CALL     7251<>CALL
CLOSE_DO.SN_
      6340**DCL      6340--REDEF
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:103  
CLOSE_DO.UTL_
      6341**DCL      6341--REDEF
CLOSE_DO.V
      6345**DCL      6340--DCLINIT
CLOSE_DO.V.EXPIRE#
      6355**DCL      6355--REDEF
CLOSE_DO.V.TYPE#
      6353**DCL      6353--REDEF
CLOSE_DO.V.XTNSIZE#
      6350**DCL      6350--REDEF    6352--REDEF
CLOSE_EF
      6384**DCL      7391<>CALL
CLOSE_EF.SN_
      6384**DCL      6384--REDEF
CLOSE_EF.UTL_
      6385**DCL      6385--REDEF
CLOSE_EF.V
      6389**DCL      6384--DCLINIT
CLOSE_EF.V.EXPIRE#
      6399**DCL      6399--REDEF
CLOSE_EF.V.TYPE#
      6397**DCL      6397--REDEF
CLOSE_EF.V.XTNSIZE#
      6394**DCL      6394--REDEF    6396--REDEF
CLOSE_LO
      6296**DCL      7239<>CALL     7253<>CALL
CLOSE_LO.SN_
      6296**DCL      6296--REDEF
CLOSE_LO.UTL_
      6297**DCL      6297--REDEF
CLOSE_LO.V
      6301**DCL      6296--DCLINIT
CLOSE_LO.V.EXPIRE#
      6311**DCL      6311--REDEF
CLOSE_LO.V.TYPE#
      6309**DCL      6309--REDEF
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:104  
CLOSE_LO.V.XTNSIZE#
      6306**DCL      6306--REDEF    6308--REDEF
CLOSE_RU
      6429**DCL      7393<>CALL
CLOSE_RU.SN_
      6429**DCL      6429--REDEF
CLOSE_RU.UTL_
      6430**DCL      6430--REDEF
CLOSE_RU.V
      6434**DCL      6429--DCLINIT
CLOSE_RU.V.EXPIRE#
      6444**DCL      6444--REDEF
CLOSE_RU.V.TYPE#
      6442**DCL      6442--REDEF
CLOSE_RU.V.XTNSIZE#
      6439**DCL      6439--REDEF    6441--REDEF
CLOSE_SI
      6252**DCL      7186<>CALL
CLOSE_SI.SN_
      6252**DCL      6252--REDEF
CLOSE_SI.UTL_
      6253**DCL      6253--REDEF
CLOSE_SI.V
      6257**DCL      6252--DCLINIT
CLOSE_SI.V.EXPIRE#
      6267**DCL      6267--REDEF
CLOSE_SI.V.TYPE#
      6265**DCL      6265--REDEF
CLOSE_SI.V.XTNSIZE#
      6262**DCL      6262--REDEF    6264--REDEF
CODE
      4904**DCL        20--PROC     7061>>DOCASE
COMP_DO_TO_LO
      5030**DCL      7145<>CALL
COMP_DO_TO_LO.V
      5030**DCL      5030--DCLINIT
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:105  
CURSRCH
      4903**DCL      7409<<DOINDEX  7410>>ASSIGN   7411>>ASSIGN   7417>>IF
EDIT_KEY
      4940**DCL      6471--DCLINIT  6472--DCLINIT  6783--DCLINIT  6784--DCLINIT  7129>>ASSIGN   7281<<ASSIGN
      7281>>ASSIGN   7282>>IF       7282>>IF       7282>>IF
ERROR_EXIT
      7443**LABEL    7127--CALLALT  7280--CALLALT  7284--GOTO     7312--CALLALT  7326--CALLALT  7357--CALLALT
      7406--CALLALT  7419--GOTO     7432--CALLALT  7437--CALLALT
FID_FILE
      6175**DCL      7197<>CALL     7265<>CALL     7396<>CALL     7428<>CALL
FID_FILE.V
      6179**DCL      6175--DCLINIT
FID_RESULTS
      7052**DCL      6179--DCLINIT
FID_RESULTS.ACCT
      7052**DCL      7403>>IF
FREE_MEM
      5085**DCL      7224<>CALL
FREE_MEM.V
      5085**DCL      5085--DCLINIT
FREE_MEM.V.PAGES#
      5086**DCL      7223<<ASSIGN
GET_MEM
      5068**DCL      7080<>CALL     7165<>CALL     7171<>CALL
GET_MEM.V
      5068**DCL      5068--DCLINIT
GET_UTS
      5047**DCL      7423<>CALL
GET_UTS.V
      5051**DCL      5047--DCLINIT
IGNORE
      7441**LABEL    7139--CALLALT  7144--CALLALT  7145--CALLALT  7147--CALLALT  7186--CALLALT  7268--CALLALT
KEY$
      4919**DCL      4915--IMP-PTR  7338<<ASSIGN
LLJ$BREAK
      4934**DCL-ENT  5014--DCLINIT
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:106  
LL_BOTOMEM$
       169**DCL      7082<<ASSIGN
LL_DNAME_VEC.BOUND
       181**DCL      7447>>CALLBLT
LL_DOBUF
       158**DCL      6886--DCLINIT  6887--DCLINIT  7146>>ASSIGN   7445<<ASSIGN   7449<<CALLBLT
LL_FIRSTFID
       163**DCL      6175--DCLINIT  7395<<ASSIGN   7427<<ASSIGN
LL_FLAGS.OVER#
       160**DCL      7397>>IF
LL_LOBUF
       158**DCL      6851--DCLINIT  6852--DCLINIT  7146<<ASSIGN
LL_MEBUF
      4937**DCL      6921--DCLINIT  6922--DCLINIT
LL_OPENFID
       164**DCL      6200--DCLINIT
LL_RUNUNIT
       166**DCL      7395>>ASSIGN   7427>>ASSIGN
LL_SPECFID.NAME
       164**DCL      6220--DCLINIT
LL_SRCH.ACCT
      4895**DCL      7410>>ASSIGN
LL_SRCH.NUM
      4891**DCL      7403>>IF       7409>>DOINDEX  7417>>IF
LL_SRCH.SN
      4898**DCL      7411>>ASSIGN
LL_STATE
       166**DCL      7102<<ASSIGN
LL_TOPOMEM$
       169**DCL      7081<<ASSIGN
LL_TYPE
       163**DCL      7279<<ASSIGN
LL_UREF_NAME_MAX
       170**DCL      7447>>CALLBLT
LL_U_ENTREF_MAX
       171**DCL      7447>>CALLBLT
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:107  
LL_U_SYMREF_MAX
       170**DCL      7447>>CALLBLT
LL_VERSION
       184**DCL      7110<<ASSIGN
LL_WIDE#
       172**DCL      7107<<ASSIGN   7109<<ASSIGN
M$CLOSE
       549**DCL-ENT  7186--CALL     7237--CALL     7239--CALL     7251--CALL     7253--CALL     7391--CALL
      7393--CALL
M$CORRES
       554**DCL-ENT  7145--CALL
M$DO
      4922**DCL      7098--ASSIGN
M$DO$
      4929**DCL      7098<<ASSIGN   7236>>IF       7250>>IF
M$EF
      4923**DCL      7099--ASSIGN
M$EF$
      4930**DCL      7099<<ASSIGN   7368>>ASSIGN
M$ERR
       561**DCL-ENT  7254--CALL     7451--CALL
M$EXIT
       561**DCL-ENT  7240--CALL
M$FDP
       585**DCL-ENT  7224--CALL
M$FDS
       584**DCL-ENT  7171--CALL
M$FID
       612**DCL-ENT  7197--CALL     7265--CALL     7396--CALL     7428--CALL
M$GDS
       584**DCL-ENT  7080--CALL     7165--CALL
M$INT
       604**DCL-ENT  7103--CALL
M$LI
      4925**DCL      7101--ASSIGN
M$LI$
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:108  
      4932**DCL      7101<<ASSIGN
M$LO
      4921**DCL      7097--ASSIGN
M$LO$
      4928**DCL      7097<<ASSIGN   7104>>IF       7104>>IF       7106>>IF       7238>>IF       7252>>IF
M$OPEN
       549**DCL-ENT  7084--CALL     7085--CALL     7090--CALL     7094--CALL     7199--CALL     7211--CALL
      7278--CALL     7401--CALL     7406--CALL     7412--CALL     7429--CALL
M$PRECORD
       553**DCL-ENT  7280--CALL     7381--CALL     7432--CALL
M$READ
       550**DCL-ENT  7127--CALL     7312--CALL     7326--CALL     7357--CALL     7437--CALL
M$RU
      4924**DCL      7100--ASSIGN
M$RU$
      4931**DCL      7100<<ASSIGN
M$SI
      4920**DCL      7096--ASSIGN
M$SI$
      4927**DCL      7096<<ASSIGN   7128>>ASSIGN   7185>>IF       7279>>ASSIGN
M$TIME
       616**DCL-ENT  7423--CALL
M$UNFID
       612**DCL-ENT  7200--CALL     7212--CALL     7295--CALL
M$WRITE
       550**DCL-ENT  7139--CALL     7144--CALL     7147--CALL     7268--CALL     7341--CALL     7446--CALL
      7450--CALL
NO_MEM
      7445**LABEL    7080--CALLALT  7162--GOTO     7165--CALLALT  7171--CALLALT
NPAGES
      4935**DCL      7083<<ASSIGN   7083>>ASSIGN   7163>>ASSIGN   7166<<ASSIGN   7166>>ASSIGN   7172<<ASSIGN
      7172>>ASSIGN   7222>>IF       7223>>ASSIGN   7225<<ASSIGN   7447>>CALLBLT
NXTF_SI_TEST
      5994**DCL      7211<>CALL
NXTF_SI_TEST.ACSVEH_
      5996**DCL      5997--REDEF
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:109  
NXTF_SI_TEST.ALTKEYS_
      6002**DCL      6003--REDEF    6003--REDEF
NXTF_SI_TEST.HDR_
      6001**DCL      6002--REDEF
NXTF_SI_TEST.TAB_
      6000**DCL      6001--REDEF
NXTF_SI_TEST.UHL_
      5994**DCL      5995--REDEF    5995--REDEF
NXTF_SI_TEST.V
      6003**DCL      5994--DCLINIT
NXTF_SI_TEST.V.FSN#
      6034**DCL      6034--REDEF    6034--REDEF
NXTF_SI_TEST.WSN_
      6000**DCL      6000--REDEF
NXT_STMT
      7110**LABEL    7103--CALLALT
OPEN_DO
      5272**DCL      7084<>CALL
OPEN_DO.ACSVEH_
      5274**DCL      5275--REDEF
OPEN_DO.ALTKEYS_
      5280**DCL      5281--REDEF    5281--REDEF
OPEN_DO.HDR_
      5279**DCL      5280--REDEF
OPEN_DO.TAB_
      5278**DCL      5279--REDEF
OPEN_DO.UHL_
      5272**DCL      5273--REDEF    5273--REDEF
OPEN_DO.V
      5281**DCL      5272--DCLINIT
OPEN_DO.V.FSN#
      5312**DCL      5312--REDEF    5312--REDEF
OPEN_DO.WSN_
      5278**DCL      5278--REDEF
OPEN_EF
      5755**DCL      7406<>CALL     7412<>CALL
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:110  
OPEN_EF.ACSVEH_
      5757**DCL      5758--REDEF
OPEN_EF.ALTKEYS_
      5763**DCL      5764--REDEF    5764--REDEF
OPEN_EF.HDR_
      5762**DCL      5763--REDEF
OPEN_EF.TAB_
      5761**DCL      5762--REDEF
OPEN_EF.UHL_
      5755**DCL      5756--REDEF    5756--REDEF
OPEN_EF.V
      5764**DCL      5755--DCLINIT
OPEN_EF.V.FSN#
      5795**DCL      5795--REDEF    5795--REDEF
OPEN_EF.WSN_
      5761**DCL      5761--REDEF
OPEN_LO
      5387**DCL      7085<>CALL
OPEN_LO.ACSVEH_
      5389**DCL      5390--REDEF
OPEN_LO.ALTKEYS_
      5395**DCL      5396--REDEF    5396--REDEF
OPEN_LO.HDR_
      5394**DCL      5395--REDEF
OPEN_LO.TAB_
      5393**DCL      5394--REDEF
OPEN_LO.UHL_
      5387**DCL      5388--REDEF    5388--REDEF
OPEN_LO.V
      5396**DCL      5387--DCLINIT
OPEN_LO.V.FSN#
      5427**DCL      5427--REDEF    5427--REDEF
OPEN_LO.WSN_
      5393**DCL      5393--REDEF
OPEN_RU
      5512**DCL      7401<>CALL
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:111  
OPEN_RU.ACSVEH_
      5514**DCL      5515--REDEF
OPEN_RU.ALTKEYS_
      5520**DCL      5521--REDEF    5521--REDEF
OPEN_RU.HDR_
      5519**DCL      5520--REDEF
OPEN_RU.TAB_
      5518**DCL      5519--REDEF
OPEN_RU.UHL_
      5512**DCL      5513--REDEF    5513--REDEF
OPEN_RU.V
      5521**DCL      5512--DCLINIT
OPEN_RU.V.CTG#
      5525**DCL      7399<<ASSIGN
OPEN_RU.V.EXIST#
      5525**DCL      7398<<ASSIGN
OPEN_RU.V.FSN#
      5552**DCL      5552--REDEF    5552--REDEF
OPEN_RU.WSN_
      5518**DCL      5518--REDEF
OPEN_RU_IN
      5634**DCL      7429<>CALL
OPEN_RU_IN.ACSVEH_
      5636**DCL      5637--REDEF
OPEN_RU_IN.ALTKEYS_
      5642**DCL      5643--REDEF    5643--REDEF
OPEN_RU_IN.HDR_
      5641**DCL      5642--REDEF
OPEN_RU_IN.TAB_
      5640**DCL      5641--REDEF
OPEN_RU_IN.UHL_
      5634**DCL      5635--REDEF    5635--REDEF
OPEN_RU_IN.V
      5643**DCL      5634--DCLINIT
OPEN_RU_IN.V.FSN#
      5674**DCL      5674--REDEF    5674--REDEF
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:112  
OPEN_RU_IN.WSN_
      5640**DCL      5640--REDEF
OPEN_SI
      6111**DCL      7094<>CALL     7278<>CALL
OPEN_SI.ACSVEH_
      6113**DCL      6114--REDEF
OPEN_SI.ALTKEYS_
      6119**DCL      6120--REDEF    6120--REDEF
OPEN_SI.HDR_
      6118**DCL      6119--REDEF
OPEN_SI.TAB_
      6117**DCL      6118--REDEF
OPEN_SI.UHL_
      6111**DCL      6112--REDEF    6112--REDEF
OPEN_SI.V
      6120**DCL      6111--DCLINIT
OPEN_SI.V.FSN#
      6151**DCL      6151--REDEF    6151--REDEF
OPEN_SI.WSN_
      6117**DCL      6117--REDEF
OPEN_SI_CR
      5157**DCL      7090<>CALL
OPEN_SI_CR.ACSVEH_
      5159**DCL      5160--REDEF
OPEN_SI_CR.ALTKEYS_
      5165**DCL      5166--REDEF    5166--REDEF
OPEN_SI_CR.HDR_
      5164**DCL      5165--REDEF
OPEN_SI_CR.TAB_
      5163**DCL      5164--REDEF
OPEN_SI_CR.UHL_
      5157**DCL      5158--REDEF    5158--REDEF
OPEN_SI_CR.V
      5166**DCL      5157--DCLINIT
OPEN_SI_CR.V.FSN#
      5197**DCL      5197--REDEF    5197--REDEF
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:113  
OPEN_SI_CR.WSN_
      5163**DCL      5163--REDEF
OPEN_SI_TEST
      5877**DCL      7199<>CALL
OPEN_SI_TEST.ACSVEH_
      5879**DCL      5880--REDEF
OPEN_SI_TEST.ALTKEYS_
      5885**DCL      5886--REDEF    5886--REDEF
OPEN_SI_TEST.HDR_
      5884**DCL      5885--REDEF
OPEN_SI_TEST.TAB_
      5883**DCL      5884--REDEF
OPEN_SI_TEST.UHL_
      5877**DCL      5878--REDEF    5878--REDEF
OPEN_SI_TEST.V
      5886**DCL      5877--DCLINIT
OPEN_SI_TEST.V.ASN#
      5896**DCL      6178--DCLINIT  7198<<ASSIGN
OPEN_SI_TEST.V.FSN#
      5917**DCL      5917--REDEF    5917--REDEF
OPEN_SI_TEST.V.RES#
      5901**DCL      6178--DCLINIT
OPEN_SI_TEST.WSN_
      5883**DCL      5883--REDEF
POS_EF
      6731**DCL      7432<>CALL
POS_EF.KEY_
      6731**DCL      7431<<ASSIGN
POS_EF.V
      6733**DCL      6731--DCLINIT
POS_SI
      6783**DCL      7280<>CALL
POS_SI.V
      6785**DCL      6783--DCLINIT
POS_TO_HEAD
      6757**DCL      7381<>CALL
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:114  
POS_TO_HEAD.KEY_
      6757**DCL      7380<<ASSIGN
POS_TO_HEAD.V
      6759**DCL      6757--DCLINIT
READ_COM.STATION_
      6516**DCL      6517--REDEF
READ_COM.V
      6517**DCL      6513--DCLINIT
READ_COM.V.DVBYTE.REREAD#
      6528**DCL      6528--REDEF
READ_COM.V.INDX#
      6526**DCL      6526--REDEF
READ_COM_FIL
      6471**DCL      7127<>CALL
READ_COM_FIL.BUF_.BOUND
      6473**DCL      7126<<ASSIGN
READ_COM_FIL.BUF_.BUF$
      6474**DCL      7125<<ASSIGN
READ_COM_FIL.STATION_
      6474**DCL      6475--REDEF
READ_COM_FIL.V
      6475**DCL      6471--DCLINIT
READ_COM_FIL.V.DVBYTE.REREAD#
      6486**DCL      6486--REDEF
READ_COM_FIL.V.INDX#
      6484**DCL      6484--REDEF
READ_HEAD
      6558**DCL      7312<>CALL
READ_HEAD.BUF_.BOUND
      6560**DCL      7310<<ASSIGN
READ_HEAD.BUF_.BUF$
      6561**DCL      7309<<ASSIGN
READ_HEAD.KEY_
      6558**DCL      7311<<ASSIGN
READ_HEAD.STATION_
      6561**DCL      6562--REDEF
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:115  
READ_HEAD.V
      6562**DCL      6558--DCLINIT
READ_HEAD.V.DVBYTE.REREAD#
      6573**DCL      6573--REDEF
READ_HEAD.V.INDX#
      6571**DCL      6571--REDEF
READ_OU
      6648**DCL      7357<>CALL
READ_OU.BUF_.BOUND
      6650**DCL      7355<<ASSIGN
READ_OU.BUF_.BUF$
      6651**DCL      7354<<ASSIGN
READ_OU.KEY_
      6648**DCL      7356<<ASSIGN
READ_OU.STATION_
      6651**DCL      6652--REDEF
READ_OU.V
      6652**DCL      6648--DCLINIT
READ_OU.V.DVBYTE.REREAD#
      6663**DCL      6663--REDEF
READ_OU.V.INDX#
      6661**DCL      6661--REDEF
READ_RU
      6603**DCL      7326<>CALL
READ_RU.BUF_.BOUND
      6605**DCL      7323<<ASSIGN
READ_RU.BUF_.BUF$
      6606**DCL      7324<<ASSIGN
READ_RU.KEY_
      6603**DCL      7325<<ASSIGN
READ_RU.STATION_
      6606**DCL      6607--REDEF
READ_RU.V
      6607**DCL      6603--DCLINIT
READ_RU.V.DVBYTE.REREAD#
      6618**DCL      6618--REDEF
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:116  
READ_RU.V.INDX#
      6616**DCL      6616--REDEF
SEARCH_EF
      7409**LABEL    7414--EXIT
SEMICOLON
      6997**DCL      7092--ASSIGN
SEQ_EF_READ
      6693**DCL      7437<>CALL
SEQ_EF_READ.BUF_.BOUND
      6695**DCL      7435<<ASSIGN
SEQ_EF_READ.BUF_.BUF$
      6696**DCL      7434<<ASSIGN
SEQ_EF_READ.KEY_
      6693**DCL      7436<<ASSIGN
SEQ_EF_READ.STATION_
      6696**DCL      6697--REDEF
SEQ_EF_READ.V
      6697**DCL      6693--DCLINIT
SEQ_EF_READ.V.DVBYTE.REREAD#
      6708**DCL      6708--REDEF
SEQ_EF_READ.V.INDX#
      6706**DCL      6706--REDEF
SET_BREAK
      5014**DCL      7103<>CALL
SET_BREAK.V
      5014**DCL      5014--DCLINIT
TEMP
      4941**DCL      7163<<ASSIGN   7164>>DOWHILE  7167<<ASSIGN   7167>>ASSIGN   7169<<ASSIGN   7169>>ASSIGN
      7170>>DOWHILE  7173<<ASSIGN   7173>>ASSIGN
TEST_STR
      4936**DCL      7447<<CALLBLT  7449>>CALLBLT
TIME
      4939**DCL      5051--DCLINIT  7424>>ASSIGN
UNFID_SI
      6200**DCL      7295<>CALL
UNFID_SI.V
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:117  
      6204**DCL      6200--DCLINIT
UNFID_SI_PRE
      6220**DCL      7200<>CALL     7212<>CALL
UNFID_SI_PRE.V
      6224**DCL      6220--DCLINIT
VLP_ACCT
      6995**DCL      5517--DCLINIT  5639--DCLINIT  5760--DCLINIT  5882--DCLINIT  6116--DCLINIT  6176--DCLINIT
      6997--REDEF
VLP_ACCT.ACCT#
      6995**DCL      7410<<ASSIGN
VLP_NAME
      6980**DCL      5513--DCLINIT  5635--DCLINIT  5756--DCLINIT  5878--DCLINIT  6112--DCLINIT  6176--DCLINIT
VLP_PASS
      7010**DCL      5514--DCLINIT  5636--DCLINIT  5757--DCLINIT  5879--DCLINIT  6113--DCLINIT  6177--DCLINIT
VLP_SN
      7038**DCL      5512--DCLINIT  5634--DCLINIT  5755--DCLINIT  5877--DCLINIT  6177--DCLINIT
VLP_SN.SN#
      7038**DCL      7411<<ASSIGN
VLP_VECTOR
      6945**DCL      5068--DCLINIT
VLP_VECTOR.PTR$
      6947**DCL      7078<<ASSIGN   7081>>ASSIGN   7082>>ASSIGN   7086>>ASSIGN
VLP_VECTOR.W2
      6946**DCL      6947--REDEF
VLP_VECTOR.W2.SEGID#
      6947**DCL      7079<<ASSIGN
VLP_WSN
      7024**DCL      5518--DCLINIT  5640--DCLINIT  5761--DCLINIT  5883--DCLINIT  6177--DCLINIT
WRITE_DO
      6885**DCL      7144<>CALL     7446<>CALL     7450<>CALL
WRITE_DO.STATION_
      6887**DCL      6887--REDEF
WRITE_DO.V
      6888**DCL      6885--DCLINIT
WRITE_DO.V.DVBYTE.VFC#
      6894**DCL      6894--REDEF
PL6.E3A0      #001=LLM$MON_SVC File=LLM$MON_SVC.:E05TSI                          WED 07/30/97 03:16 Page:118  
WRITE_LO
      6850**DCL      7139<>CALL     7147<>CALL
WRITE_LO.STATION_
      6852**DCL      6852--REDEF
WRITE_LO.V
      6853**DCL      6850--DCLINIT
WRITE_LO.V.DVBYTE.VFC#
      6859**DCL      6859--REDEF
WRITE_ME
      6920**DCL      7268<>CALL
WRITE_ME.STATION_
      6922**DCL      6922--REDEF
WRITE_ME.V
      6923**DCL      6920--DCLINIT
WRITE_ME.V.DVBYTE.VFC#
      6929**DCL      6929--REDEF
WRITE_RU
      6815**DCL      7341<>CALL
WRITE_RU.BUF_.BOUND
      6815**DCL      7339<<ASSIGN
WRITE_RU.BUF_.BUF$
      6817**DCL      7337<<ASSIGN
WRITE_RU.KEY_
      6815**DCL      7340<<ASSIGN
WRITE_RU.STATION_
      6817**DCL      6817--REDEF
WRITE_RU.V
      6818**DCL      6815--DCLINIT
WRITE_RU.V.DVBYTE.VFC#
      6824**DCL      6824--REDEF
