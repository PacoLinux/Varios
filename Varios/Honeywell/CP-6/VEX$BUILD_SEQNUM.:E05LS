VERSION E05

PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:1    
        1        1        /*M*    VEX$BUILD_SEQNUM - BUILD AN EDIT SEQUENCE NUMBER FROM PARSE NODES */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*/
        8        8        /**/
        9        9        VEX$BUILD_SEQNUM: PROC(SEQNUM,P$) ALTRET;
       10       10        /**/
       11       11        /*F*     NAME:     VEX$BUILD_SEQNUM
       12       12                 PURPOSE:  TO CONVERT THE PARSED FORM OF THE SEQUENCE NUMBER
       13       13                           RETURNED BY M$PARSE INTO AN EDIT KEY.   */
       14       14        /**/
       15       15        /*D*     NAME:     VEX$BUILD_SEQNUM
       16       16                 PARAMETERS: SEQNUM - THE SEQUENCE NUMBER (EDIT KEY) TO BE RETURNED
       17       17                           P$ - A POINTER TO THE FIRST PARSE BLOCK DESCRIBING THE
       18       18                                SEQUENCE NUMBER.
       19       19                 DESCRIPTION: IF THE INTEGER PART OF THE SEQUENCE NUMBER IS PRESENT
       20       20                           IT IS CONVERTED FROM TEXT TO BINARY BY CHARBIN AND
       21       21                           MULTIPLIED BY 1000. IF IT IS GREATER THAN 99999
       22       22                           THEN THE USER IS INFORMED OF THE ILLEGAL SEQUENCE NUMBER
       23       23                           AND AN ALTRETURN IS PERFORMED. IF THE FRACTIONAL PART
       24       24                           OF THE SEQUENCE NUMBER IS PRESENT THEN IT MUST BE 3
       25       25                           CHARACTERS OR LESS OR THE USER IS TOLD OF THE ERROR
       26       26                           AND VEX$BUILD_SEQNUM ALTRETURNS. THE FRACTIONAL PART IS
       27       27                           EXPANDED TO THREE CHARACTERS IF NECESSARY AND CONVERTED
       28       28                           WITH CHARBIN. THIS VALUE IS THEN ADDED TO THE INTEGER
       29       29                           PART AND A BYTE COUNT OF 3 IS PUT IN THE TOP BYTE OF
       30       30                           THE SEQUENCE NUMBER BEFORE IT IS RETURNED TO THE USER. */
       31       31        /**/
       32       32        /**********************************************************************/
       33       33        /*   PARAMETERS   PARAMETERS   PARAMETERS   PARAMETERS   PARAMETERS   */
       34       34        /**********************************************************************/
       35       35    1   DCL SEQNUM UBIN(36);
       36       36    1   DCL P$ PTR;
       37       37        /**/
PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:2    
       38       38        /*****************************************************************/
       39       39        /*   AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   */
       40       40        /*****************************************************************/
       41       41    1   DCL INT_SEQNUM UBIN(36);
       42       42    1   DCL FRAC_SEQNUM UBIN(36);
       43       43        /**/
       44       44        /*********************************************************************/
       45       45        /*   INCLUDE FILES   INCLUDE FILES   INCLUDE FILES   INCLUDE FILES   */
       46       46        /*********************************************************************/
       47       47        %PLIST;
       48       48        %INCLUDE   XU_MACRO_C;
       49     3154        %INCLUDE   VE_SUBS_C;
       50     3348        %INCLUDE VE_PERR_C;
       51     3565        /**/
       52     3566        /**********************************************************************/
       53     3567        /*   BASED DATA   BASED DATA   BASED DATA   BASED DATA   BASED DATA   */
       54     3568        /**********************************************************************/
       55     3569        %PARSE$OUT (STCLASS = BASED);
       56     3614        /**/
       57     3615    1   DCL 1 STR$BUF BASED ALIGNED,
       58     3616    1         2 COUNT UBIN(9) UNAL,
       59     3617    1         2 TEXT CHAR(255) UNAL;
       60     3618        /**/
       61     3619        /*****************************************************************/
       62     3620        /*   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   */
       63     3621        /*****************************************************************/
       64     3622        /**/
       65     3623        %INCLUDE VE_FLAGS_R;
       66     3674        /**/
       67     3675    1   DCL 1 STR_BUF SYMREF,
       68     3676    1         2 COUNT UBIN HALF HALIGNED,
       69     3677    1         2 TEXT CHAR(PC_RECSIZE#) CALIGNED,
       70     3678    1         2 TEXTARRAY(0:PC_RECMAX#) REDEF TEXT CHAR(1) UNAL;
       71     3679    1   DCL Y003 UBIN(36) SYMREF;
       72     3680    1   DCL CMD_CODE UBIN WORD SYMREF;
       73     3681    1   DCL VEX$ERROR ENTRY(2) ALTRET;
       74     3682        /**/
PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:3    
       75     3683        /*****************************************************************************/
       76     3684        /*   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   */
       77     3685        /*****************************************************************************/
       78     3686    1           INT_SEQNUM = 0;
       79     3687    1           STR_BUF.COUNT = P$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.SUBLK$(0) -> STR$BUF.
              3687                    COUNT;
       80     3688    1           STR_BUF.TEXT = P$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.SUBLK$(0) -> STR$BUF.TEXT;
       81     3689        /**/
       82     3690    1           IF (STR_BUF.COUNT > 63) THEN GOTO BUILD_SEQNUM_BAD;
       83     3691        /**/
       84     3692    1           CALL CHARBIN(FRAC_SEQNUM,SUBSTR(STR_BUF.TEXT,0,STR_BUF.COUNT));
       85     3693    2           IF (P$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE = PC_INTGERSEQ) THEN DO;
       86     3694    3              IF (FRAC_SEQNUM > 99999) THEN DO;
       87     3695    3   BUILD_SEQNUM_BAD:
       88     3696    3                 CALL VEX$ERROR(E$E_BADSEQ,3);
       89     3697    3                 ALTRETURN;
       90     3698    3                 END;
       91     3699        /**/
       92     3700        /*E*     ERROR:    VEE-E$E_BADSEQ-0
       93     3701                 MESSAGE:  Illegal sequence number
       94     3702                 MESSAGE1: Sequence numbers must be in the range 0 - 99999.999
       95     3703                           and contain no more than three fractional digits
       96     3704                 DESCRIPTION: A sequence with the integer part greater then
       97     3705                           99999 has been input.
       98     3706        */
       99     3707    2              INT_SEQNUM = FRAC_SEQNUM * 1000;
      100     3708    2              FRAC_SEQNUM = 0;
      101     3709    2              IF (P$ -> OUT$BLK.NSUBLKS < 2) THEN GOTO BUILD_SEQNUM_RET;
      102     3710        /**/                                    /* INTEGER SEQNUM                     */
      103     3711    2              STR_BUF.COUNT = P$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.SUBLK$(0) -> STR$BUF.
              3711                       COUNT;
      104     3712    2              STR_BUF.TEXT = P$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.SUBLK$(0) -> STR$BUF.
              3712                       TEXT;
      105     3713    2              END;
      106     3714        /**/                                    /* FRACTIONAL PART                    */
      107     3715    1           IF (STR_BUF.COUNT > 3) THEN GOTO BUILD_SEQNUM_BAD;
      108     3716    2           DO WHILE (STR_BUF.COUNT < 3);   /* EXPAND TO 3 DIGITS                 */
PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:4    
      109     3717    2              STR_BUF.TEXTARRAY(STR_BUF.COUNT) = '0';
      110     3718    2              STR_BUF.COUNT = STR_BUF.COUNT + 1;
      111     3719    2              END;
      112     3720    1           CALL CHARBIN (FRAC_SEQNUM,SUBSTR(STR_BUF.TEXT,0,3));
      113     3721        /**/
      114     3722    1           IF (((FLAGS.CONSEC_MODE)OR(FLAGS.REL_MODE))AND(FRAC_SEQNUM~=0)) THEN
      115     3723    1              IF ((CMD_CODE ~= BUILDCMD)AND(CMD_CODE ~= COPYCMD)AND
      116     3724    2                 (CMD_CODE ~= MERGECMD)) THEN DO;
      117     3725    2                 CALL VEX$ERROR(E$E_NOTWHOLE,ADDR(NIL));
      118     3726    2                 ALTRETURN;
      119     3727    2                 END;
      120     3728        /**/
      121     3729        /*E*     ERROR:    VEE-E$E_NOTWHOLE-0
      122     3730                 MESSAGE:  Illegal/non-integer sequence number
      123     3731            MESSAGE1: Sequence numbers for consec/relative files must be integral
      124     3732                 DESCRIPTION: The sequence number used in a read request of a
      125     3733                           consecutive file must be an integer */
      126     3734        /**/
      127     3735    1   BUILD_SEQNUM_RET:
      128     3736    1           SEQNUM = INT_SEQNUM + FRAC_SEQNUM + Y003;
      129     3737    1           RETURN;
      130     3738    1   END;                                    /* END BUILD_SEQNUM                   */

PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:5    
--  Include file information  --

   VE_FLAGS_R.:E05TOU  cannot be made into a system file and is referenced.
   VE_PERR_C.:E05TOU  is referenced.
   VE_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
      No diagnostics issued in procedure VEX$BUILD_SEQNUM.

   Procedure VEX$BUILD_SEQNUM requires 106 words for executable code.
   Procedure VEX$BUILD_SEQNUM requires 12 words of local(AUTO) storage.

    No errors detected in file VEX$BUILD_SEQNUM.:E05TSI    .

PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:6    

 Object Unit name= VEX$BUILD_SEQNUM                           File name= VEX$BUILD_SEQNUM.:E05TOU
 UTS= JUL 30 '97 07:10:30.44 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   106    152  VEX$BUILD_SEQNUM
    1  RoData even  none     6      6  VEX$BUILD_SEQNUM

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        2  VEX$BUILD_SEQNUM

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 VEX$ERROR
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     FLAGS                                 STR_BUF                               Y003
     CMD_CODE                              B_VECTNIL
PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:7    

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:8    


        1        1        /*M*    VEX$BUILD_SEQNUM - BUILD AN EDIT SEQUENCE NUMBER FROM PARSE NODES */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*/
        8        8        /**/
        9        9        VEX$BUILD_SEQNUM: PROC(SEQNUM,P$) ALTRET;

      9  0 000000   000000 700200 xent  VEX$BUILD_S* TSX0  ! X66_AUTO_2
         0 000001   000014 000002                    ZERO    12,2

       10       10        /**/
       11       11        /*F*     NAME:     VEX$BUILD_SEQNUM
       12       12                 PURPOSE:  TO CONVERT THE PARSED FORM OF THE SEQUENCE NUMBER
       13       13                           RETURNED BY M$PARSE INTO AN EDIT KEY.   */
       14       14        /**/
       15       15        /*D*     NAME:     VEX$BUILD_SEQNUM
       16       16                 PARAMETERS: SEQNUM - THE SEQUENCE NUMBER (EDIT KEY) TO BE RETURNED
       17       17                           P$ - A POINTER TO THE FIRST PARSE BLOCK DESCRIBING THE
       18       18                                SEQUENCE NUMBER.
       19       19                 DESCRIPTION: IF THE INTEGER PART OF THE SEQUENCE NUMBER IS PRESENT
       20       20                           IT IS CONVERTED FROM TEXT TO BINARY BY CHARBIN AND
       21       21                           MULTIPLIED BY 1000. IF IT IS GREATER THAN 99999
       22       22                           THEN THE USER IS INFORMED OF THE ILLEGAL SEQUENCE NUMBER
       23       23                           AND AN ALTRETURN IS PERFORMED. IF THE FRACTIONAL PART
       24       24                           OF THE SEQUENCE NUMBER IS PRESENT THEN IT MUST BE 3
       25       25                           CHARACTERS OR LESS OR THE USER IS TOLD OF THE ERROR
       26       26                           AND VEX$BUILD_SEQNUM ALTRETURNS. THE FRACTIONAL PART IS
       27       27                           EXPANDED TO THREE CHARACTERS IF NECESSARY AND CONVERTED
       28       28                           WITH CHARBIN. THIS VALUE IS THEN ADDED TO THE INTEGER
       29       29                           PART AND A BYTE COUNT OF 3 IS PUT IN THE TOP BYTE OF
       30       30                           THE SEQUENCE NUMBER BEFORE IT IS RETURNED TO THE USER. */
       31       31        /**/
       32       32        /**********************************************************************/
PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:9    
       33       33        /*   PARAMETERS   PARAMETERS   PARAMETERS   PARAMETERS   PARAMETERS   */
       34       34        /**********************************************************************/
       35       35    1   DCL SEQNUM UBIN(36);
       36       36    1   DCL P$ PTR;
       37       37        /**/
       38       38        /*****************************************************************/
       39       39        /*   AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   */
       40       40        /*****************************************************************/
       41       41    1   DCL INT_SEQNUM UBIN(36);
       42       42    1   DCL FRAC_SEQNUM UBIN(36);
       43       43        /**/
       44       44        /*********************************************************************/
       45       45        /*   INCLUDE FILES   INCLUDE FILES   INCLUDE FILES   INCLUDE FILES   */
       46       46        /*********************************************************************/
       47       47        %PLIST;
       48       48        %INCLUDE   XU_MACRO_C;
       49     3154        %INCLUDE   VE_SUBS_C;
       50     3348        %INCLUDE VE_PERR_C;
       51     3565        /**/
       52     3566        /**********************************************************************/
       53     3567        /*   BASED DATA   BASED DATA   BASED DATA   BASED DATA   BASED DATA   */
       54     3568        /**********************************************************************/
       55     3569        %PARSE$OUT (STCLASS = BASED);
       56     3614        /**/
       57     3615    1   DCL 1 STR$BUF BASED ALIGNED,
       58     3616    1         2 COUNT UBIN(9) UNAL,
       59     3617    1         2 TEXT CHAR(255) UNAL;
       60     3618        /**/
       61     3619        /*****************************************************************/
       62     3620        /*   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   */
       63     3621        /*****************************************************************/
       64     3622        /**/
       65     3623        %INCLUDE VE_FLAGS_R;
       66     3674        /**/
       67     3675    1   DCL 1 STR_BUF SYMREF,
       68     3676    1         2 COUNT UBIN HALF HALIGNED,
       69     3677    1         2 TEXT CHAR(PC_RECSIZE#) CALIGNED,
PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:10   
       70     3678    1         2 TEXTARRAY(0:PC_RECMAX#) REDEF TEXT CHAR(1) UNAL;
       71     3679    1   DCL Y003 UBIN(36) SYMREF;
       72     3680    1   DCL CMD_CODE UBIN WORD SYMREF;
       73     3681    1   DCL VEX$ERROR ENTRY(2) ALTRET;
       74     3682        /**/
       75     3683        /*****************************************************************************/
       76     3684        /*   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   */
       77     3685        /*****************************************************************************/
       78     3686    1           INT_SEQNUM = 0;

   3686  0 000002   200005 450100                    STZ     INT_SEQNUM,,AUTO

       79     3687    1           STR_BUF.COUNT = P$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.SUBLK$(0) -> STR$BUF.
              3687                    COUNT;

   3687  0 000003   200004 470500                    LDP0    @P$,,AUTO
         0 000004   000000 471500                    LDP1    0,,PR0
         0 000005   100003 473500                    LDP3    3,,PR1
         0 000006   300003 474500                    LDP4    3,,PR3
         0 000007   400000 236100                    LDQ     0,,PR4
         0 000010   000033 772000                    QRL     27
         0 000011   000000 620006                    EAX0    0,QL
         0 000012   000000 740000 xsym               STX0    STR_BUF

       80     3688    1          STR_BUF.TEXT = P$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.SUBLK$(0) -> STR$BUF.TEXT;

   3688  0 000013   000000 471500                    LDP1    0,,PR0
         0 000014   100003 473500                    LDP3    3,,PR1
         0 000015   300003 474500                    LDP4    3,,PR3
         0 000016   040000 100500                    MLR     fill='040'O
         0 000017   400000 200377                    ADSC9   0,,PR4                   cn=1,n=255
         0 000020   000000 402000 xsym               ADSC9   STR_BUF                  cn=2,n=1024

       81     3689        /**/
       82     3690    1           IF (STR_BUF.COUNT > 63) THEN GOTO BUILD_SEQNUM_BAD;

   3690  0 000021   000100 100003                    CMPX0   64,DU
PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:11   
         0 000022   000037 603000 0                  TRC     BUILD_SEQNUM_BAD

       83     3691        /**/
       84     3692    1           CALL CHARBIN(FRAC_SEQNUM,SUBSTR(STR_BUF.TEXT,0,STR_BUF.COUNT));

   3692  0 000023   000100 305440                    DTB
         0 000024   000000 430010 xsym               NDSC9   STR_BUF                  cn=2,s=nosgn,sf=0,n=*X0
         0 000025   200010 000010                    NDSC9   FRAC_SEQNUM+2,,AUTO      cn=0,s=lsgnf,sf=0,n=8
         0 000026   200011 235100                    LDA     FRAC_SEQNUM+3,,AUTO
         0 000027   200006 755100                    STA     FRAC_SEQNUM,,AUTO

       85     3693    2           IF (P$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE = PC_INTGERSEQ) THEN DO;

   3693  0 000030   000000 471500                    LDP1    0,,PR0
         0 000031   100003 473500                    LDP3    3,,PR1
         0 000032   300000 721100                    LXL1    0,,PR3
         0 000033   000146 101003                    CMPX1   102,DU
         0 000034   000067 601000 0                  TNZ     s:3715

       86     3694    3              IF (FRAC_SEQNUM > 99999) THEN DO;

   3694  0 000035   303240 115007                    CMPA    100000,DL
         0 000036   000044 602000 0                  TNC     s:3707

       87     3695    3   BUILD_SEQNUM_BAD:
       88     3696    3                 CALL VEX$ERROR(E$E_BADSEQ,3);

   3696  0 000037   000001 630400 1     BUILD_SEQNU* EPPR0   1
         0 000040   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000041   000000 701000 xent               TSX1    VEX$ERROR
         0 000042   000000 011000                    NOP     0

       89     3697    3                 ALTRETURN;

   3697  0 000043   000000 702200 xent               TSX2  ! X66_AALT

       90     3698    3                 END;
PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:12   
       91     3699        /**/
       92     3700        /*E*     ERROR:    VEE-E$E_BADSEQ-0
       93     3701                 MESSAGE:  Illegal sequence number
       94     3702                 MESSAGE1: Sequence numbers must be in the range 0 - 99999.999
       95     3703                           and contain no more than three fractional digits
       96     3704                 DESCRIPTION: A sequence with the integer part greater then
       97     3705                           99999 has been input.
       98     3706        */
       99     3707    2              INT_SEQNUM = FRAC_SEQNUM * 1000;

   3707  0 000044   200006 236100                    LDQ     FRAC_SEQNUM,,AUTO
         0 000045   001750 402007                    MPY     1000,DL
         0 000046   200005 756100                    STQ     INT_SEQNUM,,AUTO

      100     3708    2              FRAC_SEQNUM = 0;

   3708  0 000047   200006 450100                    STZ     FRAC_SEQNUM,,AUTO

      101     3709    2              IF (P$ -> OUT$BLK.NSUBLKS < 2) THEN GOTO BUILD_SEQNUM_RET;

   3709  0 000050   100001 222100                    LDX2    1,,PR1
         0 000051   000002 102003                    CMPX2   2,DU
         0 000052   000144 602000 0                  TNC     BUILD_SEQNUM_RET

      102     3710        /**/                                    /* INTEGER SEQNUM                     */
      103     3711    2              STR_BUF.COUNT = P$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.SUBLK$(0) -> STR$BUF.
              3711                       COUNT;

   3711  0 000053   100004 474500                    LDP4    4,,PR1
         0 000054   400003 475500                    LDP5    3,,PR4
         0 000055   500000 236100                    LDQ     0,,PR5
         0 000056   000033 772000                    QRL     27
         0 000057   000000 623006                    EAX3    0,QL
         0 000060   000000 743000 xsym               STX3    STR_BUF

      104     3712    2              STR_BUF.TEXT = P$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.SUBLK$(0) -> STR$BUF.
              3712                       TEXT;
PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:13   

   3712  0 000061   000000 471500                    LDP1    0,,PR0
         0 000062   100004 473500                    LDP3    4,,PR1
         0 000063   300003 474500                    LDP4    3,,PR3
         0 000064   040000 100500                    MLR     fill='040'O
         0 000065   400000 200377                    ADSC9   0,,PR4                   cn=1,n=255
         0 000066   000000 402000 xsym               ADSC9   STR_BUF                  cn=2,n=1024

      105     3713    2              END;

      106     3714        /**/                                    /* FRACTIONAL PART                    */
      107     3715    1           IF (STR_BUF.COUNT > 3) THEN GOTO BUILD_SEQNUM_BAD;

   3715  0 000067   000000 220000 xsym               LDX0    STR_BUF
         0 000070   000004 100003                    CMPX0   4,DU
         0 000071   000037 603000 0                  TRC     BUILD_SEQNUM_BAD

      108     3716    2           DO WHILE (STR_BUF.COUNT < 3);   /* EXPAND TO 3 DIGITS                 */

   3716  0 000072   000003 100003                    CMPX0   3,DU
         0 000073   000106 603000 0                  TRC     s:3720

      109     3717    2              STR_BUF.TEXTARRAY(STR_BUF.COUNT) = '0';

   3717  0 000074   000000 235000 xsym               LDA     STR_BUF
         0 000075   000022 771000                    ARL     18
         0 000076   040005 100400                    MLR     fill='040'O
         0 000077   000003 000001 1                  ADSC9   3                        cn=0,n=1
         0 000100   000000 400001 xsym               ADSC9   STR_BUF,A                cn=2,n=1

      110     3718    2              STR_BUF.COUNT = STR_BUF.COUNT + 1;

   3718  0 000101   000000 220000 xsym               LDX0    STR_BUF
         0 000102   000001 621010                    EAX1    1,X0
         0 000103   000000 741000 xsym               STX1    STR_BUF

      111     3719    2              END;
PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:14   

   3719  0 000104   000003 101003                    CMPX1   3,DU
         0 000105   000074 602000 0                  TNC     s:3717

      112     3720    1           CALL CHARBIN (FRAC_SEQNUM,SUBSTR(STR_BUF.TEXT,0,3));

   3720  0 000106   000100 305400                    DTB
         0 000107   000000 430003 xsym               NDSC9   STR_BUF                  cn=2,s=nosgn,sf=0,n=3
         0 000110   200010 000010                    NDSC9   FRAC_SEQNUM+2,,AUTO      cn=0,s=lsgnf,sf=0,n=8
         0 000111   200011 235100                    LDA     FRAC_SEQNUM+3,,AUTO
         0 000112   200006 755100                    STA     FRAC_SEQNUM,,AUTO

      113     3721        /**/
      114     3722    1           IF (((FLAGS.CONSEC_MODE)OR(FLAGS.REL_MODE))AND(FRAC_SEQNUM~=0)) THEN

   3722  0 000113   000000 236000 xsym               LDQ     FLAGS
         0 000114   002000 316003                    CANQ    1024,DU
         0 000115   000120 601000 0                  TNZ     s:3722+5
         0 000116   400000 316007                    CANQ    -131072,DL
         0 000117   000144 600000 0                  TZE     BUILD_SEQNUM_RET
         0 000120   000000 115003                    CMPA    0,DU
         0 000121   000144 600000 0                  TZE     BUILD_SEQNUM_RET

      115     3723    1              IF ((CMD_CODE ~= BUILDCMD)AND(CMD_CODE ~= COPYCMD)AND

   3723  0 000122   000000 235000 xsym               LDA     CMD_CODE
         0 000123   000027 115007                    CMPA    23,DL
         0 000124   000144 600000 0                  TZE     BUILD_SEQNUM_RET
         0 000125   000030 115007                    CMPA    24,DL
         0 000126   000144 600000 0                  TZE     BUILD_SEQNUM_RET
         0 000127   000032 115007                    CMPA    26,DL
         0 000130   000144 600000 0                  TZE     BUILD_SEQNUM_RET

      116     3724    2                 (CMD_CODE ~= MERGECMD)) THEN DO;

      117     3725    2                 CALL VEX$ERROR(E$E_NOTWHOLE,ADDR(NIL));

PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:15   
   3725  0 000131   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000132   200010 756100                    STQ     FRAC_SEQNUM+2,,AUTO
         0 000133   200010 630500                    EPPR0   FRAC_SEQNUM+2,,AUTO
         0 000134   200013 450500                    STP0    FRAC_SEQNUM+5,,AUTO
         0 000135   000005 236000 1                  LDQ     5
         0 000136   200012 756100                    STQ     FRAC_SEQNUM+4,,AUTO
         0 000137   200012 630500                    EPPR0   FRAC_SEQNUM+4,,AUTO
         0 000140   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000141   000000 701000 xent               TSX1    VEX$ERROR
         0 000142   000000 011000                    NOP     0

      118     3726    2                 ALTRETURN;

   3726  0 000143   000000 702200 xent               TSX2  ! X66_AALT

      119     3727    2                 END;
      120     3728        /**/
      121     3729        /*E*     ERROR:    VEE-E$E_NOTWHOLE-0
      122     3730                 MESSAGE:  Illegal/non-integer sequence number
      123     3731            MESSAGE1: Sequence numbers for consec/relative files must be integral
      124     3732                 DESCRIPTION: The sequence number used in a read request of a
      125     3733                           consecutive file must be an integer */
      126     3734        /**/
      127     3735    1   BUILD_SEQNUM_RET:
      128     3736    1           SEQNUM = INT_SEQNUM + FRAC_SEQNUM + Y003;

   3736  0 000144   200005 236100       BUILD_SEQNU* LDQ     INT_SEQNUM,,AUTO
         0 000145   200006 036100                    ADLQ    FRAC_SEQNUM,,AUTO
         0 000146   000000 036000 xsym               ADLQ    Y003
         0 000147   200003 470500                    LDP0    @SEQNUM,,AUTO
         0 000150   000000 756100                    STQ     0,,PR0

      129     3737    1           RETURN;

   3737  0 000151   000000 702200 xent               TSX2  ! X66_ARET
      130     3738    1   END;                                    /* END BUILD_SEQNUM                   */

PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:16   
--  Include file information  --

   VE_FLAGS_R.:E05TOU  cannot be made into a system file and is referenced.
   VE_PERR_C.:E05TOU  is referenced.
   VE_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
      No diagnostics issued in procedure VEX$BUILD_SEQNUM.
PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:17   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @P$                        3-0-0/w PTR         r     1 @SEQNUM
     6-0-0/w UBIN        r     1 FRAC_SEQNUM                5-0-0/w UBIN        r     1 INT_SEQNUM
    *0-0-0/w PTR         r     1 P$                        *0-0-0/w UBIN        r     1 SEQNUM

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 CMD_CODE                   0-0-0/b STRC(72)    r     1 FLAGS
     0-0-0/h STRC(9234)  r     1 STR_BUF                    0-0-0/w UBIN        r     1 Y003

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 OUT$BLK                    0-0-0/w STRC(2304)  r     1 STR$BUF


   Procedure VEX$BUILD_SEQNUM requires 106 words for executable code.
   Procedure VEX$BUILD_SEQNUM requires 12 words of local(AUTO) storage.

    No errors detected in file VEX$BUILD_SEQNUM.:E05TSI    .
PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:18   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:19   
          MINI XREF LISTING

BUILD_SEQNUM_BAD
      3696**LABEL    3690--GOTO     3715--GOTO
BUILD_SEQNUM_RET
      3736**LABEL    3709--GOTO
CMD_CODE
      3680**DCL      3723>>IF       3723>>IF       3723>>IF
FLAGS.CONSEC_MODE
      3639**DCL      3722>>IF
FLAGS.REL_MODE
      3650**DCL      3722>>IF
FRAC_SEQNUM
        42**DCL      3692<<CALLBLT  3694>>IF       3707>>ASSIGN   3708<<ASSIGN   3720<<CALLBLT  3722>>IF
      3736>>ASSIGN
INT_SEQNUM
        41**DCL      3686<<ASSIGN   3707<<ASSIGN   3736>>ASSIGN
OUT$BLK.CODE
      3583**DCL      3693>>IF
OUT$BLK.NSUBLKS
      3587**DCL      3709>>IF
OUT$BLK.SUBLK$
      3608**DCL      3687>>ASSIGN   3687>>ASSIGN   3688>>ASSIGN   3688>>ASSIGN   3693>>IF       3711>>ASSIGN
      3711>>ASSIGN   3712>>ASSIGN   3712>>ASSIGN
P$
        36**DCL         9--PROC     3687>>ASSIGN   3688>>ASSIGN   3693>>IF       3709>>IF       3711>>ASSIGN
      3712>>ASSIGN
SEQNUM
        35**DCL         9--PROC     3736<<ASSIGN
STR$BUF.COUNT
      3616**DCL      3687>>ASSIGN   3711>>ASSIGN
STR$BUF.TEXT
      3617**DCL      3688>>ASSIGN   3712>>ASSIGN
STR_BUF.COUNT
PL6.E3A0      #001=VEX$BUILD_SEQNUM File=VEX$BUILD_SEQNUM.:E05TSI                WED 07/30/97 07:10 Page:20   
      3676**DCL      3687<<ASSIGN   3690>>IF       3692>>CALLBLT  3711<<ASSIGN   3715>>IF       3716>>DOWHILE
      3717>>ASSIGN   3718<<ASSIGN   3718>>ASSIGN
STR_BUF.TEXT
      3677**DCL      3678--REDEF    3688<<ASSIGN   3692>>CALLBLT  3712<<ASSIGN   3720>>CALLBLT
STR_BUF.TEXTARRAY
      3678**DCL      3717<<ASSIGN
VEX$ERROR
      3681**DCL-ENT  3696--CALL     3725--CALL
Y003
      3679**DCL      3736>>ASSIGN
