/*M* LEA lists extended attributes of files concisely. */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
/*P* NAME: LEA
     PURPOSE: LEA is used to list attributes of files concisely.
     DESCRIPTION:   Invoke LEA as a processor by saying --
              !LEA fid  [ON lfid]  [(NORU|RUONLY)]
        Input "fid" may be a question-mark fid to see attributes of
        a range of files.  Attributes are listed to "lfid".  Each
        file makes a one-line display of file organization, type,
        creation date/time, modification date/time, and file name.
        If you have FMSEC turned on, file's creator is also shown.
        If you didn't specify (NORU), files which are run units get
        an additional one to three line display.  First line shows
        creation UTS, severity, what version linker was used,
        run unit's privileges (12 octal digits), and other options
        (as letters SLAOPN$RL).  Second line if run unit was
        RUM'ed shows last rum time and # times rumed.  Third line
        shows names of library and asl if any.
        If you specify (RUONLY), you only get displays for run units.
           Options meant by those funny letters --
              S  Shareable
              L  SLIB        shared library
              A  ASLIB       alternate shared library
              O              overlaid
              P  PROCACC     processor accounting
              N  NOCHGPMEM   don't charge for procedure pages
              $  SURCHARGE   do step accounting for charges
              R  WLOCK,SLOCK restricted processor
              L  SLOCK       strongly restricted processor
 */
LEA: PROC MAIN;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%F$DCB;
%INCLUDE B$OBJECT_C;
%INCLUDE B$JIT;
DCL B$JIT$ PTR SYMREF;
/**/
%B$HEAD(NAME=B$HEAD,STCLASS=STATIC);
%B$RUHEADKEY(NAME=HEADKEY);
%B$RUBIRTH;
%B$RUHEADKEY(NAME=BIRTHKEY,KEYSIZINIT="INIT(5)",TEXTINIT="INIT('BIRTH')");
%INCLUDE FM$FIT;
DCL 1 FPARAMBUF STATIC,
         2 *(0:4) UBIN,
         2 STUFF,
              3 *(0:1018) UBIN;
DCL FIT$ PTR STATIC INIT(ADDR(FPARAMBUF));
DCL CODE03$ PTR STATIC;
DCL CODE04$ PTR STATIC;
%CODE03(BASED="BASED(CODE03$)");
%CODE04(BASED="BASED(CODE04$)");
/**/
DCL 1 LOTITLEBUF STATIC,
         2 * CHAR(0)INIT('ORTY   CREATION           MODIFICATION     '),
         2 * CHAR(0)INIT('(CREATOR)FN/PRIV-FLG');
DCL LOBUFALL CHAR(132) STATIC;
DCL 1 LOBUF REDEF LOBUFALL,
         2 ORG CHAR(2),
         2 TYPE CHAR(2),
         2 * CHAR(1),
         2 CREATE CHAR(18),
         2 * CHAR(1),
         2 MODIFY CHAR(18),
         2 * CHAR(1),
         2 FN CHAR(89);
DCL 1 LOBUF2 REDEF LOBUFALL,
         2 * CHAR(6),
         2 LHS CHAR(36),
         2 * CHAR(1),
         2 * CHAR(3),
         2 RHS CHAR(86);
DCL 1 LOBUF3 REDEF LOBUFALL,
         2 * CHAR(6),
         2 LHS CHAR(36),
         2 * CHAR(1),
         2 MIDDLE CHAR(20),
         2 * CHAR(1),
         2 * CHAR(3),
         2 RHS CHAR(65);
/**/
DCL M$SI DCB;
DCL M$SI$ PTR STATIC;
DCL M$LO DCB;
%FPT_WRITE(FPTN=WRITELO,STCLASS=STATIC,DCB=M$LO,BUF=LOBUFALL);
%FPT_WRITE(FPTN=LOTITLE,STCLASS=STATIC,DCB=M$LO,BUF=LOTITLEBUF);
%FPT_CLOSE(FPTN=SAVELO,STCLASS=STATIC,DCB=M$LO,DISP=SAVE);
%FPT_READ(FPTN=READHEAD,STCLASS=STATIC,DCB=M$SI,BUF=B$HEAD,
        KEY=HEADKEY,KEYS=YES,KEYR=NO);
%FPT_READ(FPTN=READBIRTH,STCLASS=STATIC,DCB=M$SI,BUF=B$RUBIRTH,
        KEY=BIRTHKEY,KEYS=YES,KEYR=NO);
%FPT_OPEN(FPTN=TRUOPN,STCLASS=STATIC,DCB=M$SI,SHARE=NONE);
%FPT_OPEN(FPTN=SHROPN,STCLASS=STATIC,DCB=M$SI,SHARE=ALL);
%FPT_CLOSE(FPTN=CLOSI,STCLASS=STATIC,DCB=M$SI);
/**/
DCL ORGNAMES(0:20)CHAR(2)CONSTANT INIT('??',
        'CN','KY','RN','UR','RL','IN','ID','TR','SY','FP',
        'CG','12','13','14','15','16','17','18','19','20');
DCL FILE_CREATOR CHAR(20) STATIC;
DCL FILE$CREATOR CHAR(20) BASED;
DCL RU_SEV CHAR(2) STATIC;
DCL RU_PRIVS CHAR(12)STATIC;
DCL RU_PRIVVECTOR(0:11)REDEF RU_PRIVS CHAR(1);
DCL RU_FLAGS CHAR(9)STATIC;
DCL RU_FLAGVECTOR(0:8)REDEF RU_FLAGS CHAR(1);
DCL RU_LINKVERS CHAR(2)STATIC;
DCL RU_BIRTH CHAR(18)STATIC;
DCL RU_RUMED CHAR(18)STATIC;
DCL RU_RUMNO CHAR(4)STATIC;
DCL I SBIN STATIC;
DCL J SBIN STATIC;
DCL FLG$ALL BIT(36) STATIC INIT('1'B);
DCL FLG$RUINFO BIT(36)STATIC INIT('1'B);
DCL FLG$OWNER BIT(36)STATIC INIT('0'B);
DCL FLG$NARROW BIT(36)STATIC INIT('0'B);
%EJECT;
     M$SI$=DCBADDR(DCBNUM(M$SI));
     CALL M$WRITE(LOTITLE);
     I=DCBADDR(DCBNUM(M$LO))->F$DCB.WIDTH#;
     IF I>0 AND I<100 THEN FLG$NARROW='1'B;
     I=B$JIT.CCARS-B$JIT.CCDISP;
     IF I>0 THEN DO;
          CALL INDEX(J,'NORU',SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP,I))
               ALTRET(NO$NORU);
          FLG$RUINFO='0'B;
NO$NORU:  CALL INDEX(J,'RUONLY',SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP,I))
               ALTRET(NO$RUONLY);
          FLG$ALL='0'B;
NO$RUONLY: END;
     IF B$JIT.PRIV.ACTIVE & %PR_FMSEC# THEN
          FLG$OWNER='1'B;
     ELSE FLG$NARROW='1'B;
/**/
     CALL OPENSI$SETUPTEST(DCBNUM(M$SI));
NEXTFILE: ;
     CALL OPENSI$NEXT ALTRET(NOMORE);
     CODE03$=FIT$;
     CALL XSF$LOCCODP(CODE03$,3)ALTRET(BUMFILE);
     IF CODE03.ORG=%KEYED# THEN DO;
          CALL M$OPEN(TRUOPN)ALTRET(TRYSHARED);
GOTSHARED: ;
          CALL M$READ(READHEAD)ALTRET(NOTARU);
          I=M$SI$->F$DCB.ARS#;
          IF I~=SIZEC(B$HEAD) THEN GOTO NOTARU;
          CALL FIRSTLINE;
          IF FLG$RUINFO THEN
               CALL RUINFOLINE2;
        END;
     ELSE
NOTARU:   IF FLG$ALL THEN CALL FIRSTLINE;
     CALL M$CLOSE(CLOSI);
BUMFILE: ;
     GOTO NEXTFILE;
TRYSHARED: ;
     CALL M$OPEN(SHROPN)ALTRET(BUMFILE);
     GOTO GOTSHARED;
NOMORE: ;
     CALL M$CLOSE(SAVELO);
     CALL M$EXIT;
%EJECT;
/*I*    NAME: OPENSI$SETUPTEST
        CALL: CALL OEPNSI$SETUPTEST(DCB number) ALTRET;
        DESCRIPTION: OPENSI$SETUPTEST sets up internal tables for
           opening specified files through the passed DCB.  The
           DCB's name is a question-mark string.  The idea is that
           subsequent calls to OPENSI$NEXT will return with the
           DCB open to successive files which match the string,
           until it finally ALTRETs.  The OPENs will be TEST.
           FPARAMs will be returned in FPARAMBUF.
*/
OPENSI$SETUPTEST: PROC(DCBNO) ALTRET;
DCL DCBNO UBIN;
%FPT_OPEN(FPTN=OPENSI,STCLASS=STATIC,FPARAM=FPARAMBUF,
        NXTF=YES);
%FPT_CLOSE(FPTN=CLOSESI,STCLASS=STATIC);
DCL M$SI$ PTR STATIC;
DCL 1 FLG STATIC,
         2 ATALL BIT(1)INIT('0'B),      /* Set if anything at all to do */
         2 QUICKIE BIT(1)INIT('0'B),    /* Set if one of these is true: */
         2 THISF BIT(1)INIT('0'B),      /*    first time, leading non-? */
         2 ONEFILE BIT(1)INIT('0'B),    /*    doing exactly one file */
         2 ALLFILE BIT(1)INIT('0'B),    /*    doing all files in account */
         2 * BIT(31)INIT('0'B);
DCL P0COUNT UBIN STATIC;                /* Length of leading non-QM. */
DCL NUMPIECE UBIN STATIC;          /* Number of non-leading non-QM pieces. */
DCL PIECE$(0:13) PTR STATIC;            /* Pointers to non-leading pieces. */
DCL PCOUNT(0:13)UBIN STATIC;            /* Lengths of non-leading pieces. */
DCL PNCOUNT UBIN STATIC;                /* Length of trailing non-QM piece */
DCL PIECEN$ PTR STATIC;                 /* Pointer to trailing non-QM piece */
%VLP_NAME (FPTN=SINAME,STCLASS=STATIC);
DCL SINAMELEN UBIN;
DCL I UBIN;
DCL J UBIN;
DCL K UBIN;
DCL L UBIN;
DCL CHARL CHAR(L) BASED CALIGNED;
DCL CHARPN CHAR(PNCOUNT) BASED CALIGNED;
/**/
     OPENSI.V.OPER.TEST#='1'B;
/*I*    NAME: OPENSI$SETUP
        DESCRIPTION: Just like OPENSI$SETUPTEST, but real open
           instead of test open. */
OPENSI$SETUP: ENTRY(DCBNO) ALTRET;
     FLG='0'B;
     M$SI$= DCBADDR(DCBNO);
     OPENSI.V.DCB#=DCBNO;
     CLOSESI.V.DCB#=DCBNO;
     PNCOUNT=M$SI$->F$DCB.NAME#.L;
     IF PNCOUNT>31 THEN ALTRETURN;
     FLG.ATALL='1'B;
     SINAME.NAME#=SUBSTR(M$SI$->F$DCB.NAME#.C,0,PNCOUNT);
     CALL INDEX1(P0COUNT,'?',SINAME.NAME#)ALTRET(NOT$QM);
     NUMPIECE=0;
     I=P0COUNT+1;
NXT$PC: DO WHILE (SUBSTR(SINAME.NAME#,I,1)='?');
          I=I+1;
        END;
     IF I<PNCOUNT THEN DO;              /*** More non-QM follows ***/
          CALL INDEX1(J,'?',SUBSTR(SINAME.NAME#,I))ALTRET(LST$PC);
          PIECE$(NUMPIECE)=ADDR(SUBSTR(SINAME.NAME#,I));
          PCOUNT(NUMPIECE)=J;
          NUMPIECE=NUMPIECE+1;
          I=I+J+1;
          GOTO NXT$PC;
        END;
     PNCOUNT=0;
     GOTO FIX$SI;
LST$PC: PNCOUNT=PNCOUNT-I;
     PIECEN$=ADDR(SUBSTR(SINAME.NAME#,I));
FIX$SI: SINAME.L#=P0COUNT;
     OPENSI.NAME_=VECTOR(SINAME);
     OPENSI.V.SETDCB#='1'B;
     CALL M$OPEN(OPENSI);
     OPENSI.V.SETDCB#='0'B;
     OPENSI.NAME_=VECTOR(NIL);
     IF P0COUNT=0 AND NUMPIECE=0 AND PNCOUNT=0 THEN DO;
          FLG.QUICKIE='1'B;
          FLG.ALLFILE='1'B;
        END;
     IF P0COUNT~=0 THEN DO;
          FLG.QUICKIE='1'B;
          FLG.THISF='1'B;
          OPENSI.V.OPER.THISF#='1'B;
        END;
     RETURN;
NOT$QM: FLG.QUICKIE='1'B;
     IF PNCOUNT=0 THEN
          FLG.ALLFILE='1'B;
     ELSE DO;
          FLG.ONEFILE='1'B;
          OPENSI.V.OPER.NXTF#='0'B;
        END;
     RETURN;
/*I*    NAME: OPENSI$NEXT
        CALL: CALL OPENSI$NEXT ALTRET;
        DESCRIPTION: Either DCB has been advanced to the next
           file meeting the criteria, or ALTRETURN for no more files.
*/
OPENSI$NEXT: ENTRY ALTRET;
     IF NOT FLG.ATALL THEN ALTRETURN;
TRY$AGAIN:
     IF M$SI$->F$DCB.FCD# THEN
          CALL M$CLOSE(CLOSESI);
     CALL M$OPEN(OPENSI) ALTRET(NOTHERE);
     IF FLG.QUICKIE THEN DO;
          IF FLG.ALLFILE THEN
               RETURN;
          ELSE IF FLG.ONEFILE THEN DO;
                    FLG='0'B;
                    RETURN;
                  END;
               ELSE /*FLG.THISF*/ DO;
                    FLG.QUICKIE='0'B;
                    OPENSI.V.OPER.THISF#='0'B;
                  END;
        END;
     I=P0COUNT;                    /* I is how far into M$SI filename so far. */
     IF I~=0 THEN                       /*** Template starts with non-QM ***/
          IF SUBSTR(M$SI$->F$DCB.NAME#.C,0,I)~=
               SUBSTR(SINAME.NAME#,0,I) THEN ALTRETURN;
     SINAMELEN=M$SI$->F$DCB.NAME#.L;    /* SINAMELEN is name end */
     IF PNCOUNT>0 THEN DO;              /*** Template ends with non-QM ***/
          SINAMELEN=SINAMELEN-PNCOUNT;
          IF SUBSTR(M$SI$->F$DCB.NAME#.C,SINAMELEN,PNCOUNT)~=
               PIECEN$->CHARPN THEN GOTO TRY$AGAIN;
        END;
     IF I>SINAMELEN THEN GOTO TRY$AGAIN;
     IF NUMPIECE=0 THEN RETURN;
     K=0;
     DO WHILE(K<NUMPIECE);
          L=PCOUNT(K);
          CALL INDEX(L,PIECE$(K)->CHARL,
               SUBSTR(M$SI$->F$DCB.NAME#.C,I))ALTRET(TRY$AGAIN);
          I=I+PCOUNT(K)+L;
          IF I>SINAMELEN THEN GOTO TRY$AGAIN;
          K=K+1;
        END;
     RETURN;
NOTHERE: ALTRETURN;
END OPENSI$SETUPTEST;
%EJECT;
FIRSTLINE: PROC;
     LOBUFALL=' ';
     LOBUF.ORG=ORGNAMES(CODE03.ORG);
     LOBUF.TYPE=CODE03.TYPE;
     FILE_CREATOR=' ';
     CODE04$=FIT$;
     CALL XSF$LOCCODP(CODE04$,4)ALTRET(NOCODE04);
     CALL DOTIME(LOBUF.CREATE,CODE04.CREATION);
     CALL DOTIME(LOBUF.MODIFY,CODE04.MODIFY);
     FILE_CREATOR=ADDR(CODE04.CREATOR)->FILE$CREATOR;
NOCODE04: ;
     IF FLG$OWNER THEN
          IF FLG$NARROW THEN DO;
               LOBUF.FN=M$SI$->F$DCB.NAME#.C;
               CALL M$WRITE(WRITELO);
               IF FILE_CREATOR~=' ' THEN DO;
                    LOBUFALL=' ';
                    CALL CONCAT(LOBUF2.LHS,'Creator=',FILE_CREATOR);
                    CALL M$WRITE(WRITELO);
                  END;
             END;
          ELSE DO;
               CALL CONCAT(LOBUF.FN,FILE_CREATOR,' ',
                    M$SI$->F$DCB.NAME#.C);
               CALL M$WRITE(WRITELO);
             END;
     ELSE DO;
          LOBUF.FN=M$SI$->F$DCB.NAME#.C;
          CALL M$WRITE(WRITELO);
        END;
     RETURN;
END FIRSTLINE;
%EJECT;
     %LOCCODE;
%EJECT;
DOTIME: PROC(CHAROUT,UTSIN);
DCL CHAROUT CHAR(18) CALIGNED;
DCL UTSIN SBIN WORD;
DCL UTSS SBIN STATIC;
DCL ANSDATE CHAR(6)STATIC;
DCL LOCALTIME CHAR(11)STATIC;
%FPT_TIME(FPTN=TOANSDATE,STCLASS=STATIC,SOURCE=UTS,TSTAMP=UTSS,
        DEST=ANS,DATE=ANSDATE);
%FPT_TIME(FPTN=TOLOCALTIME,STCLASS=STATIC,SOURCE=UTS,TSTAMP=UTSS,
        DEST=LOCAL,TIME=LOCALTIME);
     IF UTSIN=0 THEN DO;
          CHAROUT='  * NONE *';
          RETURN;
        END;
     UTSS=UTSIN;
     CALL M$TIME(TOANSDATE);
     CALL M$TIME(TOLOCALTIME);
     CALL CONCAT(CHAROUT,ANSDATE,',',LOCALTIME);
     RETURN;
END DOTIME;
%EJECT;
RUINFOLINE2: PROC;
DCL BINOUT(0:7)CHAR(1)STATIC INIT('0','1','2','3','4','5','6','7');
DCL PRIVX3(0:11)UBIN(3)BASED UNAL;
     LOBUFALL=' ';
     B$RUBIRTH='0'B;
     CALL M$READ(READBIRTH)ALTRET(NOBIRTH);
NOBIRTH:CALL DOTIME(RU_BIRTH,B$RUBIRTH.CREATE_UTS);
     CALL DOTIME(RU_RUMED,B$RUBIRTH.RUMED_UTS);
     CALL BINCHAR(RU_RUMNO,B$RUBIRTH.COUNT);
     CALL BINCHAR(RU_SEV,B$HEAD.SEV);
     DO I=0 TO 11;
          RU_PRIVVECTOR(I)=BINOUT(ADDR(B$HEAD.PRIV)->PRIVX3(I));
        END;
     RU_FLAGS=' ';
     IF B$HEAD.S THEN RU_FLAGVECTOR(0)='S';
     IF B$HEAD.LIB THEN RU_FLAGVECTOR(1)='L';
     IF B$HEAD.ASL THEN RU_FLAGVECTOR(2)='A';
     IF B$HEAD.OVRL THEN RU_FLAGVECTOR(3)='O';
     IF B$HEAD.PROCACC THEN RU_FLAGVECTOR(4)='P';
     IF B$HEAD.NOCHGPMEM THEN RU_FLAGVECTOR(5)='N';
     IF B$HEAD.PROCSURCHG THEN RU_FLAGVECTOR(6)='$';
     IF B$HEAD.RESTPROC THEN RU_FLAGVECTOR(7)='R';
     IF B$HEAD.STRONG_LOCK THEN RU_FLAGVECTOR(8)='L';
     CALL BINCHAR(RU_LINKVERS,B$HEAD.VERSION#);
     CALL CONCAT(LOBUF2.LHS,'UTS=',RU_BIRTH,'  Sev=',RU_SEV,
          ' LV=',RU_LINKVERS);
     IF FLG$NARROW THEN
          CALL CONCAT(LOBUF2.RHS,RU_PRIVS,'  ',RU_FLAGS);
     ELSE
          CALL CONCAT(LOBUF3.RHS,RU_PRIVS,'  ',RU_FLAGS);
     CALL M$WRITE(WRITELO);
     IF B$RUBIRTH.RUMED_UTS~=0 THEN DO;
          LOBUFALL=' ';
          CALL CONCAT(LOBUF2.LHS,'RUMed ',RU_RUMED,'  ',
               RU_RUMNO,' times');
          CALL M$WRITE(WRITELO);
        END;
     IF B$HEAD.LIBNAME.CNT~=0 OR B$HEAD.ASLNAME.CNT~=0
     THEN DO;
          LOBUFALL=' ';
          IF B$HEAD.LIBNAME.CNT~=0 THEN
               CALL CONCAT(LOBUF2.LHS,'LIB=',SUBSTR(
                    B$HEAD.LIBNAME.TXT,0,B$HEAD.LIBNAME.CNT));
          IF B$HEAD.ASLNAME.CNT~=0 THEN
               IF FLG$NARROW THEN
                    CALL CONCAT(LOBUF2.RHS,'ASL=',SUBSTR(
                         B$HEAD.ASLNAME.TXT,0,B$HEAD.ASLNAME.CNT));
               ELSE
                    CALL CONCAT(LOBUF3.RHS,'ASL=',SUBSTR(
                         B$HEAD.ASLNAME.TXT,0,B$HEAD.ASLNAME.CNT));
          CALL M$WRITE(WRITELO);
        END;
     RETURN;
END RUINFOLINE2;
END LEA;
