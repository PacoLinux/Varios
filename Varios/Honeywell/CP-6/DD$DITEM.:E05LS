

14:19 JUL 28 '97 DD$DITEM.:E05SI                                           1    
    1      /*M* DD$DITEM - DEFINITIONS FOR DATA DESCRIPTOR STRUCTURES */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DMC,DFC */
    8                                                      /**/
    9      %INCLUDE DD_ICODE_C;
   10      %INCLUDE DD_ACODE_C;
   11      %INCLUDE DD_SRTN_C;
   12           %LIST;
   13           DCL SDD$ PTR;
   14           DCL ZITEM$ PTR;
   15           DCL SDD_L6$ PTR;
   16           DCL ZITEM_L6$ PTR;
   17           %PLIST;
   18                                                        /**/
   19      /*  The following structure is used for word 0 of the encoded schema block  */
   20                                                        /**/
   21      %MACRO ZITEM (NAME=ZITEM, STCLASS="BASED(ZITEM$)");
   22           DCL 1 NAME STCLASS ALIGNED,
   23                2 SIZE UBIN,
   24                  /* Size of encoded schema block is words */
   25                2 FLAGS,
   26                     3 MDSE,
   27                          4 M BIT(1),
   28                            /* Modifiable */
   29                          4 D BIT(1),
   30                            /* Displayable */
   31                          4 S BIT(1),
   32                            /* located in Safestore frame or tSa */
   33                          4 E BIT(1),
   34                            /* Evaluateable */
   35                     3 ADDREXP BIT(1),
   36                       /* Flag indicating address expression modification */
   37                     3 * BIT(4),
14:19 JUL 28 '97 DD$DITEM.:E05SI                                           2    
   38                2 DTYP UBIN BYTE UNAL,
   39                2 SET_DATATYP UBIN(18) UNAL,       /* DATATYP OF SET */
   40                2 TEXTSTART$ PTR,          /* Ptr to start of text */
   41                2 NAMEFLAGS,               /* Flags about name */
   42                     3 POSITION BIT(1),    /* Have a position */
   43                     3 STATUS_EXISTS BIT(1),
   44                       /* STATUS  variable associated with this one - DD follows */
   45                     3 * BIT(16),
   46                2 TEXTSZ UBIN HALF UNAL,   /* Size of text */
   47                2 SUBSTART$ PTR,           /* Ptr to start of subcript */
   48                2 SUBSZ UBIN UNAL,         /* Size of subcript */
   49                2 * BIT(9),
   50                2 ADDR_TYPE UBIN BYTE UNAL,
   51                  /* Address type - see DD_ACODE_C */
   52                2 FMT_SPEC UBIN BYTE UNAL,
   53                  /* Format specifier - see subs below */
   54                2 DATA_TYPE UBIN BYTE UNAL,
   55                  /* Data type from schema of actual item */
   56                2 ADDRESS,
   57                  /* See description below */
   58                  3 W UBIN(24) UNAL,
   59                  3 C UBIN(6) UNAL,
   60                  3 B UBIN(6) UNAL,
   61                2 VALUE REDEF ADDRESS UBIN WORD,
   62                2 VALUEB REDEF ADDRESS BIT(36),
   63                2 SP REDEF ADDRESS,
   64                     3 VD,                   /* Desc/Ptr entry */
   65                          4 TYPE UBIN(6) UNAL,
   66                          4 ID UBIN(9) UNAL,
   67                          4 DISP UBIN(9) UNAL,
   68                     3 VP REDEF VD,          /* PARMn */
   69                          4 TYPE UBIN(6) UNAL,
   70                          4 N UBIN(18) UNAL,
   71                     3 VS REDEF VD,          /* Spec entry */
   72                          4 ID UBIN(9) UNAL,
   73                          4 SZ UBIN(9) UNAL,
   74                          4 * BIT(6),
14:19 JUL 28 '97 DD$DITEM.:E05SI                                           3    
   75                     3 FLAGS BIT(6),
   76                     3 FMT UBIN(6) UNAL,
   77                2 PUP ALIGNED,
   78                     3 SIZE UBIN(22) UNAL,
   79                     3 SCALE SBIN(8) UNAL,
   80                     3 BITS,
   81                          4 PUB UBIN(2) UNAL,
   82                          4 SIGNPOS UBIN(2) UNAL,
   83                          4 SIGNTYP BIT(1),
   84                          4 SIGNOVER BIT(1),
   85                2 MIN_VALUE UBIN WORD UNAL,
   86                2 MAX_VALUE UBIN WORD UNAL,
   87                2 PEDEF# UBIN(18) UNAL,
   88                2 * UBIN(18) UNAL,
   89                2 NPOINTER_TRUE SBIN HALF UNAL,
   90                2 NPOINTER_FALSE SBIN HALF UNAL;
   91                                                        /**/
   92           %MEND;
   93      /* The following structure is used for the other words of the encoded schema block */
   94                                                        /**/
   95      %MACRO DITEM (NAME=DITEM, STCLASS="BASED(SDD$)");
   96           DCL 1 NAME STCLASS ALIGNED,
   97                2 SMULT UBIN BYTE UNAL,
   98                  /* Size multiplier - only used for size item */
   99                2 FLAGS,
  100                     3 OFLAG BIT(1),
  101                       /* Indicates that the input expression is OCTAL */
  102                     3 AFLAG BIT(1),
  103                       /* Indicates that this item is offset by previous
  104                          index calculation.  Only valid when:
  105                          TYPE_CODE = PTR | SIDX | LIDX | PARM  AND,
  106                          ADDR_TYPE = STATIC | AUTO | BASED      */
  107                     3 LFLAG BIT(1),
  108                       /* Indicates that this index item (SIDX,LIDX) is the
  109                          last or only index for this variable. */
  110                     3 * BIT(2),
  111                     3 EXPOP UBIN(4) UNAL,     /* Used only by EXP_ICODE */
14:19 JUL 28 '97 DD$DITEM.:E05SI                                           4    
  112                2 ADDR_TYPE UBIN BYTE UNAL,
  113                  /* Indicatis interpretation of DITEM.ADDRESS/DITEM.SP
  114                     See DD_ACODE_C     */
  115                2 TYPE_CODE UBIN BYTE UNAL,
  116                  /* Indicates item type - see DD_ICODE_C   */
  117                2 ADDRESS,
  118                  /* See description below */
  119                     3 W UBIN(24) UNAL, /* WORD OFFSET */
  120                     3 C UBIN(6) UNAL,  /* CHAR IN WORD */
  121                     3 B UBIN(6) UNAL,  /* BIT IN CHAR, OR ARITH_OP - see subs below */
  122                2 VALUE REDEF ADDRESS UBIN WORD,
  123                2 VALUEB REDEF ADDRESS BIT(36),
  124                2 SP REDEF ADDRESS,
  125                     3 VD,                   /* Desc/Ptr entry */
  126                          4 TYPE UBIN(6) UNAL,
  127                          4 ID UBIN(9) UNAL,
  128                          4 DISP UBIN(9) UNAL,
  129                     3 VP REDEF VD,          /* PARMn */
  130                          4 TYPE UBIN(6) UNAL,
  131                          4 N UBIN(18) UNAL,
  132                     3 VS REDEF VD,          /* Spec entry */
  133                          4 ID UBIN(9) UNAL,
  134                          4 SZ UBIN(9) UNAL,
  135                          4 * BIT(6),
  136                     3 MDSE,
  137                          4 M BIT(1),
  138                            /* Modifiable */
  139                          4 D BIT(1),
  140                            /* Displayable */
  141                          4 S BIT(1),
  142                            /* located in Safestore frame or tSa */
  143                          4 E BIT(1),
  144                            /* Evaluateable */
  145                          4 * BIT(1),
  146                          4 * BIT(1),
  147                     3 FMT UBIN(6) UNAL,
  148                       /* Format */
14:19 JUL 28 '97 DD$DITEM.:E05SI                                           5    
  149                2 PUP,
  150                     3 SIZE UBIN(22) UNAL,
  151                       /* Size of item */
  152                     3 SCALE SBIN(8) UNAL,
  153                       /* Scale Factor */
  154                     3 BITS BIT(6);
  155                       /* Packed, leading, ASCII
  156                               BITS = '010100'B
  157                          Packed, trailing, ASCII
  158                               BITS = '011000'B
  159                          Packed, trailing, EBCDIC
  160                               BITS = '011010'B
  161                          Packed, unsigned
  162                               BITS = '010000'B
  163                          Unpacked, unsigned
  164                               BITS = '100000'B
  165                          Unpacked, leading, separate
  166                               BITS = '100100'B
  167                          Unpacked, trailing, separate
  168                               BITS = '101000'B
  169                          Unpacked, leading, overpunched
  170                               BITS = '100101'B
  171                          Unpacked, trailing, overpunched
  172                               BITS = '101001'B
  173                       */
  174           %MEND;
  175                                                        /**/
  176      /* ADDRESS - is the offset from ADDR_TYPE indicated segment
  177                   For ADDR_TYPE = STATIC | AUTO | BASED:
  178                     ADDRESS.W is word offset
  179                     ADDRESS.C is character in word
  180                     ADDRESS.B is bit in character
  181                   For ADDR_TYPE = PARM:
  182                     ADDRESS.W is offset from $AUTO for ptr to parameter
  183                   For ADDR_TYPE = CONST:
  184                     ADDRESS.W is constant value
  185                   For ADDR_TYPE = USER:
14:19 JUL 28 '97 DD$DITEM.:E05SI                                           6    
  186                     ADDRESS.W is the character count of the user symbol
  187                          text name which immediately follows
  188                   For ADDR_TYPE = DESC only, identifies special
  189                   symbol to be used for PTR. TYPE_CODE must be PTR_ICODE. */
  190       /**/
  191      /**/
  192      /**/
  193      /*           ENCODED SPECIAL SYMBOL - DESC (pointer) type special symbols
  194
  195            *************************************************
  196            *0     5*6   14*15     23*2425*26             35*
  197            *       *      *         *    *                 *
  198            * TYPE  * ID   * DISP    *=1  *       =0        *
  199            *************************************************
  200
  201         VALUES AS ENCODED IN DD_SPEC_D
  202
  203            FLAGS not used here
  204
  205            TYPE:  0   $SSR, $JIT, $HJIT, $TCB, $SAD, $RVB, $USD,
  206                       $ERR, $HEAD, $CGn
  207                       ID: 0 $SSR
  208                           1 $JIT
  209                           2 $HJIT
  210                           3 $TCB
  211                           4 $SAD
  212                           5 $RVB (ANLZ_FILE MODE ONLY)
  213                           6 $USD (ANLZ_FILE MODE ONLY)
  214                           7 $ERR (ANLZ_FILE MODE ONLY)
  215                           8 $HEAD (RUM MODE ONLY)
  216                           9 $CGn (ANLZ_FILE MODE ONLY)
  217
  218                   1   $ISR, $ASR, $LSR, $PSR  look at user segs as data
  219
  220                       ID: 0 $PSR
  221                           1 $ISR
  222                           2 $ASR
14:19 JUL 28 '97 DD$DITEM.:E05SI                                           7    
  223                           3 $LSR
  224                       DISP - NOT USED
  225
  226                   2   $DRn, $PRn, $AUTO  use descr from SS
  227
  228                       ID - if non-zero, word displ in SS to AR
  229                       DISP - word disp to DR in SS
  230
  231                   3   $ASn, $PSn, $LSn, $DSn, $VSn  use descriptor from user desc seg
  232
  233                       ID: 0 $PSn
  234                           1 not used
  235                           2 $ASn
  236                           3 $LSn
  237                       DISP - n X 2 (word displ to descriptor)
  238
  239                   4   $REAL, $VIRT
  240                       ID: 0 $REAL
  241                           1 $VIRT
  242
  243                   5   $IOBUF
  244
  245                   6   $PARMn
  246                       use nth parameter pointer from
  247                       current AUTO stack frame
  248                         ID-DISP - parameter number
  249
  250                   7   $DCBn - use nth DCB
  251                            DISP - DCB number
  252
  253                   8   $ROSEG, $RDBR, $TSA  - L6 only
  254                            ID: 0 $ROSEG
  255                                1 $RDBR
  256                                2 $TSA
  257                            DISP: not used
  258
  259                   9   $Bn  - L6 only
14:19 JUL 28 '97 DD$DITEM.:E05SI                                           8    
  260                            ID: 0 $Bn
  261                            DISP: n
  262                                                             */
  263                                                        /**/
  264      /*  The following structure is used for index multiplier words */
  265                                                        /**/
  266      %MACRO MITEM (NAME=MITEM, STCLASS=BASED);
  267           DCL 1 NAME STCLASS ALIGNED,
  268                2 IMULT BIT(1),
  269                  /* Indicates that multiplier is indirectly specified
  270                     (Uses AMULT to specify address of multiplier)  */
  271                2 IOFF BIT(1),
  272                  /* Indicates that offset is indirectly specified
  273                     (Uses AOFF to specify address of offset value)  */
  274                2 NEWOFF BIT(1),
  275                  /* Set to indicate that this index item starts a new
  276                     offset value  */
  277                2 CONT BIT(1),
  278                  /* Set to indicate that this is not the first index of
  279                     a list of indices (for a multiply dimensioned item)  */
  280                2 * BIT(32),
  281                2 MULT UBIN ALIGNED,
  282                  /* is the multiplier value */
  283                2 AMULT REDEF MULT,
  284                  /* is the address of the multiplier value if indirect */
  285                  3 ADR,
  286                    4 W UBIN(18) UNAL,
  287                    4 C UBIN(2) UNAL,
  288                    4 B UBIN(4) UNAL,
  289                  3 ADR6 REDEF ADR,
  290                    4 W UBIN(20) UNAL,
  291                    4 C UBIN(1) UNAL,
  292                    4 B UBIN(3) UNAL,
  293                  3 * BIT(4) UNAL,
  294                  3 ACODE UBIN(4) UNAL,
  295                  3 * BIT(4) UNAL,
  296                2 OFS UBIN ALIGNED,
14:19 JUL 28 '97 DD$DITEM.:E05SI                                           9    
  297                  /* is the offset value (if NEWOFF is set) */
  298                2 AOFS REDEF OFS,
  299                  /* is the address of the new offset value if indirect */
  300                  3 ADR,
  301                    4 W UBIN(18) UNAL,
  302                    4 C UBIN(2) UNAL,
  303                    4 B UBIN(4) UNAL,
  304                  3 ADR6 REDEF ADR,
  305                    4 W UBIN(20) UNAL,
  306                    4 C UBIN(1) UNAL,
  307                    4 B UBIN(3) UNAL,
  308                  3 * BIT(4) UNAL,
  309                  3 ACODE UBIN(4) UNAL,
  310                  3 * BIT(4) UNAL,
  311                2 ELMNTSIZ UBIN;
  312                  /* is the element size */
  313           %MEND;
  314      /* ARITH_OP - Indicates arithmetic operation for address modification */
  315       %EQU NOMOD_OPCODE=0;    /* Make no changes to current address */
  316       %EQU PLUS_OPCODE=1;     /* Add ADDRESS.W to current address */
  317       %EQU MINUS_OPCODE=2;    /* Subtract ADDRESS.W from current address */
  318       %EQU LSHIFT_OPCODE=3;   /* Shift current address left ADDRESS.W bits */
  319       %EQU RSHIFT_OPCODE=4;   /* Shift current address right ADDRESS.W bits */
  320       %EQU MULT_OPCODE=5;     /* Multiply current address by ADDRESS.W */
  321                                                        /**/
  322      /* EQUs for MDSE flags */
  323           %EQU MDE_FLAGS='1101'B;
  324           %EQU E_FLAGS='0001'B;
  325           %EQU MDSE_FLAGS='1111'B;
  326           %EQU ESM_FLAGS='000101'B;
  327           %EQU MDSESM_FLAGS='111101'B;
  328                                                        /**/
  329      /* EQUs for DTYP */
  330           %EQU SIM_DTYP=0;   /* REGULAR DATA DISPLAY */
  331           %EQU RANG1_DTYP=1; /* DISPLAY OF DATA WITH INDEX RANGE SPEC */
  332           %EQU RANG2_DTYP=2; /* DISPLAY OF DATA WITH 2 INDEX RANGE SPECS */
  333           %EQU SPEC_DTYP=3;  /* DISPLAY OF SPECIAL SYMBOL */
14:19 JUL 28 '97 DD$DITEM.:E05SI                                           10   
  334                                                        /**/
  335      /* EQUs for DATA_TYPE */
  336           %EQU INST_DATATYPE=55;
  337           %EQU OCT_DATATYPE=56;
  338           %EQU X_DATATYPE=57;
  339                                                        /**/
  340      /* EQUs for Format specifier */
  341      /* Currently we can handle 0 - 63 (9-bits) of format codes for IF/LET */
  342                                                        /**/
  343      /* Due to implementation, for any format that can be specified by a
  344         user, its code in the following list has a numerical correspondence
  345         with its code in DD_PSUBS_C. */
  346
  347           %EQU REMEMBER_FMT=0;
  348           %EQU OCT_FMT=1;
  349           %EQU UINT_FMT=2;
  350           %EQU SINT_FMT=3;
  351           %EQU CHAR_FMT=4;
  352           %EQU BIT_FMT=5;
  353           %EQU INST_FMT=6;
  354           %EQU PTR_FMT=7;
  355           %EQU DESC_FMT=8;
  356           %EQU REL_FMT=9;
  357           %EQU EPTR_FMT=10;
  358           %EQU AR_FMT=11;
  359           %EQU VECTOR_FMT=12;
  360           %EQU X_FMT = 13;
  361           %EQU OBIT_FMT=14;
  362           %EQU L$_FMT=15;
  363           %EQU FLOAT_FMT=16;
  364           %EQU JDE_FMT=17;
  365           %EQU X1_FMT=18;
  366           %EQU TIME_FMT=19;
  367           %EQU ZERO_FMT=20;
  368           %EQU EBCDIC_FMT=21;
  369           %EQU COMP2_FMT=22;
  370           %EQU OFORT_FMT=23;
14:19 JUL 28 '97 DD$DITEM.:E05SI                                           11   
  371           %EQU ZFORT_FMT=24;
  372           %EQU LOGFORT_FMT=25;
  373           %EQU CMPXFORT_FMT=26;
  374           %EQU INDX1_FMT=27;
  375           %EQU INDX2_FMT=28;
  376           %EQU PUP_FMT=29;
  377           %EQU CANT_FMT=30;
  378           %EQU DEFAULT_FMT=31;
  379           %EQU COMP1_FMT=32;
  380           %EQU STATUS_FMT=33;
  381                                                       /**/
  382                                                        /**/
  383      /* L6 macros for ZITEM, DITEM, MITEM  */
  384                                                        /**/
  385      /* The following structure is used for word zero of the data descriptor */
  386                                                        /**/
  387      %MACRO ZITEM_L6(NAME=ZITEM_L6,STCLASS="BASED(ZITEM_L6$)");
  388      %IF MODE_FEP;
  389      DCL 1 NAME STCLASS ALIGNED,
  390      %ELSE;
  391      DCL 1 NAME STCLASS CALIGNED,
  392      %ENDIF;
  393            2 ADDR_TYPE UBIN(8) UNAL,
  394            2 DTYP UBIN(8) UNAL,
  395            2 DATA_TYPE UBIN(6) UNAL, /* PUP.PUB */
  396            2 PUP REDEF DATA_TYPE,
  397              3 PUB UBIN(2) UNAL,
  398              3 SIGNPOS UBIN(2) UNAL,
  399              3 SIGNTYP BIT(1) UNAL,
  400              3 SIGNOVER BIT(1) UNAL,
  401            2 SIZE UBIN(5) UNAL, /* PUP.SIZE */
  402            2 SCALE UBIN(5) UNAL, /* PUP.SCALE */
  403            2 ADDRESS,
  404              3 C UBIN(1) UNAL,
  405              3 B UBIN(3) UNAL,
  406              3 * BIT(8) UNAL,
  407              3 W UBIN(20) UNAL,
14:19 JUL 28 '97 DD$DITEM.:E05SI                                           12   
  408            2 VALUE REDEF ADDRESS,
  409              3 V UBIN(32) UNAL,
  410            2 FLAGS REDEF ADDRESS,
  411              3 * BIT(4) UNAL,
  412              3 ADDREXP BIT(1) UNAL,
  413              3 AFLAG BIT(1) UNAL,
  414              3 * BIT(26) UNAL,
  415            2 VD REDEF ADDRESS,
  416              3 * BIT(8) UNAL,
  417              3 TYPE UBIN(8) UNAL,
  418              3 ID UBIN(8) UNAL,
  419              3 DISP UBIN(8) UNAL,
  420            2 VP REDEF ADDRESS,
  421              3 * BIT(8) UNAL,
  422              3 TYPE UBIN(8) UNAL,
  423              3 N UBIN(16) UNAL,
  424            2 VS REDEF ADDRESS,
  425              3 * BIT(16) UNAL,
  426              3 ID UBIN(8) UNAL,
  427              3 SZ UBIN(8) UNAL;
  428      %MEND;
  429      %MACRO DITEM_L6(NAME=DITEM_L6,STCLASS="BASED(SDD_L6$)");
  430      %IF MODE_FEP;
  431      DCL 1 NAME STCLASS ALIGNED,
  432      %ELSE;
  433      DCL 1 NAME STCLASS CALIGNED,
  434      %ENDIF;
  435            2 TYPE_CODE UBIN(4) UNAL,
  436            2 ADDR_TYPE UBIN(7) UNAL,
  437            2 SMULT UBIN(7) UNAL,
  438            2 DATA_TYPE UBIN(6) UNAL, /* PUP.PUB */
  439            2 SIZE UBIN(8) UNAL, /* PUP.SIZE */
  440            2 ADDRESS,
  441              3 C UBIN(1) UNAL,
  442              3 B UBIN(3) UNAL,
  443              3 * BIT(8) UNAL,
  444              3 W UBIN(20) UNAL,
14:19 JUL 28 '97 DD$DITEM.:E05SI                                           13   
  445            2 VALUE REDEF ADDRESS,
  446              3 * BIT(12) UNAL,
  447              3 V UBIN(20) UNAL, /* Max is .FFFFF */
  448            2 FLAGS REDEF ADDRESS,
  449              3 * BIT(4) UNAL,
  450              3 LFLAG BIT(1) UNAL,
  451              3 AFLAG BIT(1) UNAL,
  452              3 SP BIT(1) UNAL,
  453              3 * BIT(25) UNAL,
  454            2 OPER REDEF ADDRESS, /* Expression modification */
  455              3 * BIT(6) UNAL,
  456              3 EXPR UBIN(4) UNAL, /* EXPOP */
  457              3 * BIT(22) UNAL,
  458            2 VD REDEF ADDRESS,
  459              3 * BIT(8) UNAL,
  460              3 TYPE UBIN(8) UNAL,
  461              3 ID UBIN(8) UNAL,
  462              3 DISP UBIN(8) UNAL,
  463            2 VP REDEF ADDRESS,
  464              3 * BIT(8) UNAL,
  465              3 TYPE UBIN(8) UNAL,
  466              3 N UBIN(16) UNAL,
  467            2 VS REDEF ADDRESS,
  468              3 * BIT(16) UNAL,
  469              3 ID UBIN(8) UNAL,
  470              3 SZ UBIN(8) UNAL;
  471      %MEND;
  472                                                        /**/
  473      /* The following structure is used for the other words of the encoded schema block */
  474                                                        /**/
  475                                                        /**/
  476      /*  The following structure is used for index multiplier words */
  477                                                        /**/
  478      %MACRO MITEM_L6(NAME=MITEM_L6,STCLASS=BASED);
  479      %IF MODE_FEP;
  480      DCL 1 NAME STCLASS ALIGNED,
  481      %ELSE;
14:19 JUL 28 '97 DD$DITEM.:E05SI                                           14   
  482      DCL 1 NAME STCLASS CALIGNED,
  483      %ENDIF;
  484                2 IMULT BIT(1) UNAL,
  485                  /* Indicates that multiplier is indirectly specified
  486                     (Uses AMULT to specify address of multiplier)  */
  487                2 IOFF BIT(1) UNAL,
  488                  /* Indicates that offset is indirectly specified
  489                     (Uses AOFF to specify address of offset value)  */
  490                2 NEWOFF BIT(1) UNAL,
  491                  /* Set to indicate that this index item starts a new
  492                     offset value  */
  493                2 CONT BIT(1) UNAL,
  494                  /* Set to indicate that this is not the first index of
  495                     a list of indices (for a multiply dimensioned item)  */
  496                2 ELMNTSIZ UBIN(28) UNAL,
  497                2 MULT UBIN(32) UNAL,
  498                  /* is the multiplier value */
  499                2 AMULT REDEF MULT,
  500                  /* is the address of the multiplier value if indirect */
  501                  3 ADR,
  502                    4 W UBIN(20) UNAL,
  503                    4 C UBIN(1) UNAL,
  504                    4 B UBIN(3) UNAL,
  505                  3 ACODE UBIN(8) UNAL,
  506                2 OFS UBIN(32) UNAL,
  507                  /* is the offset value (if NEWOFF is set) */
  508                2 AOFS REDEF OFS,
  509                  /* is the address of the new offset value if indirect */
  510                  3 ADR,
  511                    4 W UBIN(20) UNAL,
  512                    4 C UBIN(1) UNAL,
  513                    4 B UBIN(3) UNAL,
  514                  3 ACODE UBIN(8) UNAL;
  515      %MEND;
  516      /**/
  517      /**/
  518      /*  The DESC/PTR entry appears in DITEM_L6.SP.VD  It is also handy elsewhere. */
14:19 JUL 28 '97 DD$DITEM.:E05SI                                           15   
  519      /**/
  520      %MACRO ITEM_DESCPTR_L6 (NAME=ITEM_DESCPTR_L6,LVL=1,ALIGN=ALIGNED,STCLASS=AUTO,TERM=";");
  521      %IF LVL=1;
  522        DCL 1 NAME STCLASS ALIGN,
  523      %ELSE;
  524            %(LVL+0) NAME ALIGN,
  525      %ENDIF;
  526              %(LVL+1) * BIT(8) UNAL,
  527              %(LVL+1) TYPE UBIN(8) UNAL,     /* See elsewhere in this file         */
  528              %(LVL+1) ID UBIN(8) UNAL,       /* See elsewhere in theis file        */
  529              %(LVL+1) DISP UBIN(8) UNAL TERM
  530      %MEND;
  531      /**/
  532      /**/
  533      /*  The PARM/PTR entry appears in DITEM_L6.SP.VP  It is also handy elsewhere. */
  534      /**/
  535      %MACRO ITEM_PARMPTR_L6 (NAME=ITEM_PARMPTR_L6,LVL=1,ALIGN=ALIGNED,STCLASS=AUTO,TERM=";");
  536      %IF LVL=1;
  537        DCL 1 NAME STCLASS ALIGN,
  538      %ELSE;
  539            %(LVL+0) NAME ALIGN,
  540      %ENDIF;
  541              %(LVL+1) * BIT(8) UNAL,
  542              %(LVL+1) TYPE UBIN(8) UNAL,     /* See elsewhere in this file         */
  543              %(LVL+1) N UBIN(16) UNAL TERM
  544      %MEND;
  545      /**/
  546      /*  The SPEC entry appears in DITEM_L6.SP.VS  It is also handy elsewhere.     */
  547      /**/
  548      %MACRO ITEM_SPEC_L6 (NAME=ITEM_SPEC_L6,LVL=1,ALIGN=ALIGNED,STCLASS=AUTO,TERM=";");
  549      %IF LVL=1;
  550        DCL 1 NAME STCLASS ALIGN,
  551      %ELSE;
  552            %(LVL+0) NAME ALIGN,
  553      %ENDIF;
  554              %(LVL+1) * BIT(16) UNAL,
  555              %(LVL+1) ID UBIN(8) UNAL,
14:19 JUL 28 '97 DD$DITEM.:E05SI                                           16   
  556              %(LVL+1) SZ UBIN(8) UNAL TERM
  557      %MEND;
  558      /**/
  559           %MACRO BUMPD$;
  560           %LIST;
  561      BUMPD$: PROC(PCNT) ALTRET;
  562      DCL PCNT UBIN;
  563      DCL CNT UBIN;
  564      DCL DD_VARCOM$ PTR SYMREF;
  565      DCL DDM$GETMEM ENTRY(3) ALTRET;
  566           IF ADDR(PCNT) = ADDR(NIL)
  567           THEN CNT = SIZEW(DITEM);
  568           ELSE CNT = PCNT;
  569           SDD$ = PINCRW(SDD$,CNT);
  570           IF SDD$ > S_D.DESCL$
  571           THEN DO;
  572                IF S_D.STORED ~= 0
  573                THEN DO;
  574                     DO WHILE (SDD$ > PINCRW(S_D.DESCL$, 1));
  575                          CALL DDM$GETMEM(DD_VARCOM$, 1024);
  576                          S_D.VARCOM_HIGH$ = PINCRW(S_D.VARCOM_HIGH$, 1024);
  577                          S_D.DESCL$ = S_D.VARCOM_HIGH$;
  578                        END;
  579                   END;
  580                ELSE DO;
  581                     S_D.ERROR = E@NOROOM; /* E@NOROOM */
  582                     ALTRETURN;
  583                   END;
  584              END;
  585           S_D.D$ = SDD$;
  586           RETURN;
  587           END BUMPD$;
  588           %PLIST;
  589           %MEND;

