VERSION B06

PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:1    
        1        1        /*M* VME$SUBR - VME$ACKNOWLEDGE, VME$ANSWER                           */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
        8        8        /*F*    NAME: VME$ACKNOWLEDGE
        9        9                PURPOSE:
       10       10                      To return an ACKNOWLEDGMENT message.
       11       11                DESCRIPTION:
       12       12                      This routine will return a message to the sender
       13       13                      of a specified message which acknowledges the receipt
       14       14                      (and possible DISPLAY) of that message.
       15       15                      This routine has the following parameters.
       16       16                         MESSAGE_NUMBER - unused.
       17       17                         USER_NAME - textc name of this user.
       18       18                         VM_SEARCH_INFO - used for resolving addresses.
       19       19                         RECEIVER# - on if this is explicit ACK; off for RR ACK.
       20       20        */
       21       21        /*********************************************************************/
       22       22        VME$ACKNOWLEDGE: PROC (MESSAGE_NUMBER,USER_NAME,RECEIVER#) ALTRET;
       23       23        /***** Include files *****/
       24       24          %INCLUDE B_ERRORS_C;
       25     1151          %INCLUDE B$TABLES_C;
       26     1259          %INCLUDE CP_6;
       27     6818          %INCLUDE CP_6_SUBS;
       28     7358          %INCLUDE VM_MACRO_C;
       29     8626          %INCLUDE VM_SUBS_C;
       30     8886          %INCLUDE VM_PERR_C;
       31     9181          %INCLUDE VM_DATA_R;
       32     9612          %INCLUDE XUM_MACRO_C;
       33     9639          %INCLUDE XUR_ENTRY;
       34     9671        /***** Parameters *****/
       35     9672    1   DCL MESSAGE_NUMBER SBIN WORD;
       36     9673          %TEXTC (NAME=USER_NAME,STCLASS=" ");
       37     9678    1   DCL RECEIVER# BIT(1);
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:2    
       38     9679        /***** Based structures *****/
       39     9680          %B$TCB (STCLASS="BASED(B$TCB$)");
       40     9683          %B$ALT;
       41     9691          %F$DCB;
       42     9748            %B$XL_UPPER;
       43     9752          %B$SR_NON_BLANK;
       44     9756        /***** Mail structures *****/
       45     9757          %SET LISTMAC='1'B;
       46     9758          %SET LISTSUB='1'B;
       47     9759          %VM_ADDTYPES;
              9760        %EQU    VM_ADD_RESOLVED = 1;   /* Resolved address entry */
              9761        %EQU    VM_ADD_UNRESOLVED = 2; /* Unresolved address entry */
       48     9763          %VM_KEYTYPES;
              9764        %EQU    VM_TYPE_PRO   = 1;      /* The Profile record */
              9765        %EQU    VM_TYPE_ACC   = 2;      /* The access-control record */
              9766        %EQU    VM_TYPE_HEAD  = 8;      /* The Header record */
              9767        %EQU    VM_TYPE_DELIV = 9;      /* The delivery records */
              9768        %EQU    VM_TYPE_SITE  = 10;     /* SITE INFORMATION */
              9769        %EQU    VM_TYPE_TO    = 16;     /* The original TO record */
              9770        %EQU    VM_TYPE_ITO   = 17;     /* The intersystem TO record */
              9771        %EQU    VM_TYPE_C     = 24;     /* The original Copies record */
              9772        %EQU    VM_TYPE_IC    = 25;     /* The intersystem Copies record */
              9773        %EQU    VM_TYPE_BC    = 32;     /* The original Blind Copies record */
              9774        %EQU    VM_TYPE_IBC   = 33;     /* The intersystem Blind Copies record */
              9775        %EQU    VM_TYPE_RTO   = 36;     /* The Reply To record */
              9776        %EQU    VM_TYPE_TRACE = 44;     /* The message trace record(s) */
              9777        %EQU    VM_TYPE_BODY  = 48;     /* The message body record(s) */
              9778        %EQU    VM_TYPE_LIST  = 60;     /* Definition for a LIST of addresses */
              9779        %EQU    VM_TYPE_USER  = 80;     /* Definition for a USER */
              9780        %EQU    VM_TYPE_ID    = 90;     /* The unique-message-ID cross reference */
              9781        %EQU    VM_TYPE_ENCL  = 100;    /* The binary enclosure context record*/
              9782        %EQU    VM_TYPE_ENCL_INIT = 101;/* To initialize the first enclosure record */
       49     9784          %VM_BODYTYPES;
              9785        %EQU    VM_BODY_TEXT = 1;   /* Text record */
              9786        %EQU    VM_BODY_GRAPHICS = 2;   /* Graphics data. RESERVED FOR FUTURE USE */
              9787        %EQU    VM_BODY_ENCODED_ERR = 3; /* Encoded error/time/textc information */
              9788        %EQU    VM_BODY_BINARY_ENCL = 4; /* Binary enclosure record */
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:3    
       50     9790          %VM_HEADER;
              9791        %LSET LISTDIR='0'B;
              9800    1   DCL 1 VM_HEADER BASED (VM_HEADER$),
              9801    1         2 HEADER_SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
              9802                               /* Number of words in this header */
              9803    1         2 CREATION_DATE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
              9804                               /* Date message created (passed to send) */
              9805    1         2 DELIVERY_DATE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
              9806                               /* Date message is to be/was delivered */
              9807    1         2 FIRST_DELIVERY UBIN WORD %INIT(0)%CHARTEXT('/**/'),
              9808                             /* Date/time of MAILMAN's first delivery pass */
              9809    1         2 RESERVED_DATES (0:4) UBIN WORD %INIT(0*0)%CHARTEXT('/**/'),
              9810                               /* Reserved for future use */
              9811    1         2 NUM_RECORDS UBIN WORD %INIT(0)%CHARTEXT('/**/'),
              9812                               /* Number of records in message body */
              9813    1         2 STATUS,
              9814    1           3 ERR BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9815                        /* Set if message is being returned to sender -
              9816                           see HDR.ERROR and HDR.BAD_ADDR */
              9817    1           3 ANSWER BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9818                               /* Set if this is an answer to a received message */
              9819    1           3 ACK BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9820                               /* Set if this is an ack to a received message */
              9821    1           3 DEFER BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9822                               /* Set if deferred message (sent at HDR.DELIVERY_DATE) */
              9823    1           3 RR BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9824                               /* Set if "Return Receipt" requested */
              9825    1           3 CRYPT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9826                               /* Set if message body is encrypted */
              9827    1           3 OLD BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9828                        /* Set if message is "old" (has at least had
              9829                           header printed in prior session). */
              9830    1           3 MAKE_OLD BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9831                        /* Set if message is to be marked "old" when
              9832                           message file is overwritten. */
              9833    1           3 EXAM BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9834                               /* Set if message has been examined */
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:4    
              9835    1           3 DEL BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9836                               /* Set if message has been deleted */
              9837    1           3 FCOPY BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9838                               /* Set if message is a FILE COPY */
              9839    1           3 MARK BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9840                               /* Set if message has been MARKed */
              9841    1           3 GRAPHICS BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9842                               /* Set if message contains graphics */
              9843    1           3 FORWARDED BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9844                               /* Set if message was result of FORWARD command */
              9845    1           3 ANS_TO BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9846                               /* Used to tell MAILMAN to set RETURN_TO_ORIGIN */
              9847    1           3 DR BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9848                             /* Delivery receipt requested */
              9849    1           3 DELIVERY BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9850                             /* This 'gram is a delivery receipt */
              9851    1           3 BROADCAST BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9852                             /* Broadcast (junk) mail; don't return errors */
              9853    1           3 PRIMARY BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9854                             /* Recipient is on primary TO: list */
              9855    1           3 C BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9856                             /* Recipient is on C: list */
              9857    1           3 BC BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9858                             /* Recipient is on BC: list */
              9859    1           3 THINGED BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9860                             /* Thing has already [attempted to] sched this */
              9861    1           3 RRACK BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9862                             /* Set if this is a rr ack to a displayed message */
              9863    1           3 PRE_B00 BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9864                             /* Set when a pre-B00 message is read */
              9865    1           3 ENCL BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9866                             /* This mailgram has binary enclosures */
              9867    1           3 RESERVED BIT(11) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9868    1         2 MISC ALIGNED,
              9869    1           3 PHASE UBIN (4) UNAL %INIT(0)%CHARTEXT('/**/'),
              9870                             /* Current phase of delivery */
              9871    1           3 * UBIN (32) UNAL %INIT(0)%CHARTEXT('/**/'),
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:5    
              9872                               /* Reserved for future use */
              9873    1         2 ERROR,
              9874                               /* Reason message was returned to sender */
              9875    1           3 FCG BIT(12) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9876    1           3 MID BIT(6) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9877    1           3 MON BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9878    1           3 ERR# UBIN(14) UNAL %INIT(0)%CHARTEXT('/**/'),
              9879    1           3 SEV UBIN(3) UNAL %INIT(0)%CHARTEXT('/**/'),
              9880    1         2 FREE$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9881                               /* Head of FREE BLOCKS CHAIN in WORK_AREA */
              9882    1         2 NEXT$ PTR %INIT(ADDR(VM_HEADER.WORK_AREA))%CHARTEXT('/**/'),
              9883                               /* Ptr to next avail. word in WORK_AREA */
              9884    1         2 BAD_ADDRESS$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9885                               /* Ptr to bad address textc info */
              9886    1         2 BLIND$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9887                               /* Ptr to BLIND COPY textc info */
              9888    1         2 COPY$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9889                               /* Ptr to COPY textc info */
              9890    1         2 FILE_FOLDER$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9891                             /* Address to be used for storing copies of messages by user */
              9892    1         2 FROM$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9893                               /* Ptr to FROM textc info */
              9894    1         2 REFERENCE$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9895                               /* Ptr to REFERENCE textc info */
              9896    1         2 REPLY_TO$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9897                               /* Ptr to REPLY-TO textc info */
              9898    1         2 RETURN_ADDRESS$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9899                               /* Ptr to RETURN_ADDRESS address structure */
              9900    1         2 SIGNED$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9901                               /* Signature text */
              9902    1         2 SUBJECT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9903                               /* Ptr to SUBJECT textc info */
              9904    1         2 TO$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9905                               /* Ptr to TO textc info */
              9906    1         2 UNIQUE_ID$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9907                                    /* Unique identifier for this message */
              9908    1         2 REFERS_TO_ID$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:6    
              9909                                    /* Identifies original mailgram for ACK/ERR/ANS */
              9910    1         2 NUM_TRACE_RECORDS UBIN WORD %INIT(0)%CHARTEXT('/**/'),
              9911                                    /* Number of TRACE records */
              9912    1         2 NUM_ENCL_RECORDS UBIN WORD %INIT(0)%CHARTEXT('/**/'),
              9913                             /* Number of binary enclosure records MINUS  context record */
              9914    1         2 RESERVED (0:5) UBIN WORD %INIT(0*0)%CHARTEXT('/**/'),
              9915                               /* Reserved for future expansion */
              9916    1         2 WORK_AREA UBIN WORD;
              9917                               /* Base of work area for textc data */
       51     9919          %VM_BODYREC;
              9920        %LSET LISTDIR='0'B;
              9929    1   DCL 1 VM_BODYREC STATIC,
              9930    1         2 TYPE UBIN BYTE CALIGNED %INIT(%VM_BODY_TEXT)%CHARTEXT('/**/'),
              9931                        /* The type of the record to be accessed. */
              9932    1         2 RESERVED UBIN (27) UNAL %INIT(0)%CHARTEXT('/**/'),
              9933                         /* Reserved for future use */
              9934    1         2 VALUE,
              9935    1           3 COUNT UBIN WORD,
              9936                        /* Number of bytes of DATA */
              9947    1           3 DATA CHAR(300) CALIGNED;
       52     9951          %VM_ADD_HEAD;
              9952        %LSET LISTDIR='0'B;
              9961    1   DCL 1 VM_ADD_HEAD BASED(VM_ADDLIST$),
              9962    1         2 ADDRESS_SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
              9963                               /* Number of words in this address list */
              9964    1         2 NUM_ENTRIES UBIN WORD %INIT(0)%CHARTEXT('/**/'),
              9965                               /* Number of entries in list */
              9966    1         2 FLAGS,
              9967    1           3 ERR# BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9968                               /* Some error found in address list */
              9969    1           3 RESERVED BIT(35) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9970                               /* Reserved for future expansion */
              9971    1         2 HEAD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9972                               /* Head of link list */
              9973    1         2 FREE$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9974                               /* Ptr to first entry in free block list */
              9975    1         2 NEXT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:7    
              9976                               /* Ptr to next available word in work area */
              9977    1         2 WORK_AREA UBIN WORD;
              9978                               /* First word of work area. */
       53     9980          %VM_RADDRESS;
              9981        %LSET LISTDIR='0'B;
              9990    1   DCL 1 VM_RADDRESS STATIC,
              9991    1         2 NEXT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9992                               /* Ptr to next entry on list */
              9993    1         2 PREV$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9994                               /* Ptr to previous entry on list */
              9995    1         2 FLAGS,
              9996    1           3 UNDEF# BIT (1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9997                               /* This entry is not valid. Report as an error */
              9998    1           3 USER# BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9999                               /* USER def, not LIST */
             10000    1           3 RESERVED BIT(7) UNAL %INIT('0'B)%CHARTEXT('/**/'),
             10001                               /* Reserved for future use */
             10002    1         2 TYPE UBIN BYTE UNAL %INIT(%VM_ADD_RESOLVED)%CHARTEXT('/**/'),
             10003    1         2 NAME_KEY CHAR(20) CALIGNED %INIT(' ')%CHARTEXT('/**/'),
             10004                               /* Used only for USER definitions */
             10005    1         2 FOLDER CHAR(25) CALIGNED %INIT(' '*0)%CHARTEXT('/**/'),
             10006    1         2 NOMAD REDEF FOLDER,
             10007    1           3 FOLDER CHAR (18) CALIGNED,
             10008    1           3 DELIM CHAR (1) CALIGNED,
             10009    1           3 PSID CHAR (6) CALIGNED,
             10010    1         2 PASS CHAR(8) CALIGNED %INIT(' '*0)%CHARTEXT('/**/'),
             10011                               /* NOTE: Passwords are encrypted */
             10012    1         2 SITENAME CHAR(8) CALIGNED %INIT(' '*0)%CHARTEXT('/**/'),
             10013    1         2 ACCT CHAR(8) CALIGNED %INIT(' '*0)%CHARTEXT('/**/');
       54    10015          %VM_UADDRESS;
             10016        %LSET LISTDIR='0'B;
             10025    1   DCL 1 VM_UADDRESS STATIC,
             10026    1         2 NEXT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
             10027                               /* Ptr to next entry on list */
             10028    1         2 PREV$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
             10029                               /* Ptr to previous entry on list */
             10030    1         2 FLAGS,
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:8    
             10031    1           3 UNDEF# BIT (1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
             10032                               /* This entry is not valid. Report as an error */
             10033    1           3 USER# BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
             10034                               /* USER def, not LIST */
             10035    1           3 RESERVED BIT(7) UNAL %INIT('0'B)%CHARTEXT('/**/'),
             10036                               /* Reserved for future use */
             10037    1         2 TYPE UBIN BYTE UNAL %INIT(%VM_ADD_UNRESOLVED)%CHARTEXT('/**/'),
             10038    1         2 NAME_KEY CHAR(20) CALIGNED %INIT(' ')%CHARTEXT('/**/'),
             10039                               /* Used only for USER definitions */
             10040    1         2 FOLDER CHAR(25) CALIGNED %INIT(' '*0)%CHARTEXT('/**/'),
             10041    1         2 NOMAD REDEF FOLDER,
             10042    1           3 FOLDER CHAR (18) CALIGNED,
             10043    1           3 DELIM CHAR (1) CALIGNED,
             10044    1           3 PSID CHAR (6) CALIGNED,
             10045    1         2 PASS CHAR(8) CALIGNED %INIT(' '*0)%CHARTEXT('/**/'),
             10046                               /* NOTE: Passwords are encrypted */
             10047    1         2 SITENAME CHAR(8) CALIGNED %INIT(' '*0)%CHARTEXT('/**/'),
             10048    1         2 USER_NAME,
             10049    1           3 COUNT UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
             10050    1           3 TEXT CHAR(200) CALIGNED %INIT(' ')%CHARTEXT('/**/');
       55    10052          %SET LISTMAC='0'B;
       56    10053          %SET LISTSUB='0'B;
       57    10054        /***** Local variables *****/
       58    10055          %VM_HEADER (NAME=CVM_HEADER,STCLASS=CONSTANT);
       59    10184          %XUM$MCB (NAME=MCB,STCLASS=AUTO);
       60    10188    1   DCL OUT$ PTR AUTO;
       61    10189    1   DCL OUT1$ PTR AUTO;
       62    10190    1   DCL CMD_BUF CHAR(511) AUTO;
       63    10191    1   DCL CMD_SIZE SBIN WORD AUTO;
       64    10192          %VLP_NAME (FPTN=BLIND_TEXT,LEN=511,STCLASS=AUTO);
       65    10219          %VLP_NAME (FPTN=COPY_TEXT,LEN=511,STCLASS=AUTO);
       66    10246          %VLP_NAME (FPTN=REFERENCE_TEXT,LEN=511,STCLASS=AUTO);
       67    10273          %VLP_NAME (FPTN=REPLY_TEXT,LEN=511,STCLASS=AUTO);
       68    10300          %VLP_NAME (FPTN=SUBJECT_TEXT,LEN=511,STCLASS=AUTO);
       69    10327          %VLP_NAME (FPTN=TO_TEXT,LEN=511,STCLASS=AUTO);
       70    10354          %VLP_NAME (FPTN=UNIQUE_ID_TEXT,LEN=511,STCLASS=AUTO);
       71    10381          %VM_SEARCH_INFO (STCLASS=AUTO);
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:9    
       72    10408    1   DCL INDX1 SBIN WORD;
       73    10409    1   DCL DUMMY SBIN WORD;
       74    10410    1   DCL SITENAME CHAR(8);
       75    10411          %VM_UADDRESS (NAME=VM_UADDRESS1);
       76    10448          %VM_RADDRESS (NAME=VM_RADDRESS1);
       77    10483    1   DCL APPEND_REPLY BIT(1);
       78    10484        /***** External routines *****/
       79    10485    1   DCL VMA$ADDRESS ENTRY(5) ALTRET;
       80    10486    1   DCL VMA$GET_ADD_RECORD ENTRY(4) ALTRET;
       81    10487    1   DCL VMA$PUT_ADD_RECORD ENTRY(4) ALTRET;
       82    10488    1   DCL VMA$GET_NEXT_ENTRY ENTRY(4) ALTRET;
       83    10489    1   DCL VMA$ADD_RENTRY ENTRY(6) ALTRET;
       84    10490    1   DCL VMA$ADD_UENTRY ENTRY(6) ALTRET;
       85    10491    1   DCL VMD$PUT_BODY ENTRY(7) ALTRET;
       86    10492    1   DCL VMD$PUT_HEADER ENTRY(2) ALTRET;
       87    10493        %INIT_STR(DODCL=YES);
       88    10516    1   DCL X$ALLOCATE ENTRY(1) ALTRET;
       89    10517    1   DCL X$DEALLOCATE ENTRY(1) ALTRET;
       90    10518        /***** Symref data *****/
       91    10519    1   dcl ADDRESS_SPEC sbin based(VM_ADDRESS_SPEC$); /* Address def */
       92    10520    1   dcl VM_ADDRESS_SPEC$ ptr symref;
       93    10521        /***** Error codes *****/
       94    10522          %VLP_ERRCODE (FPTN=E_INTADDERR,FCG="VM",MID="E",
       95    10523                        ERR#=%E$INTADDERR,STCLASS=CONSTANT);
       96    10568        /*E*    ERROR: VME-E$INTADDERR-0
       97    10569                MESSAGE: Unable to decode the address properly. INTERNAL ERROR.
       98    10570        */
       99    10571              %VLP_ERRCODE (FPTN=E_ACKIMPOSSIBLE,FCG="VM",MID="E",
      100    10572              ERR#=%E$ACKIMPOSSIBLE,STCLASS=CONSTANT);
      101    10617        /*E*    ERROR: VME-E$ACKIMPOSSIBLE-0
      102    10618                MESSAGE: No address is available for this message.
      103    10619        */
      104    10620              %VLP_ERRCODE (FPTN=E_CANTANS,FCG="VM",MID="E",
      105    10621              ERR#=%E$CANTANS,STCLASS=CONSTANT);
      106    10666        /*E*    ERROR: VME-E$CANTANS-0
      107    10667                MESSAGE: Can't ANSWER or ACKNOWLEDGE this message, bad from or copy address.
      108    10668                MESSAGE1: This error usually occurs in a converted mailbox.  Copy lists
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:10   
      109    10669                         are not converted and the FROM field may not be legal in
      110    10670                         the released versions of MAIL.
      111    10671        */
      112    10672              %VLP_NAME( FPTN=VM_MSG_RECV, LEN=60,L=60, STCLASS="STATIC SYMDEF",
      113    10673              NAME=' '           );
      114    10700        %VLP_ERRCODE( FPTN=E_MSG_RECV,     STCLASS="CONSTANT SYMDEF",
      115    10701                      ERR#=%E$MSG_RECV,    FCG=VM,MID=E               );
      116    10746        /*E* ERROR: VME-E$MSG_RECV-0
      117    10747             MESSAGE:Return receipt for your message.
      118    10748        */
      119    10749              %VLP_NAME( FPTN=VM_MSG_ACKED, LEN=60,L=60, STCLASS="STATIC SYMDEF",
      120    10750              NAME=' '           );
      121    10777        %VLP_ERRCODE( FPTN=E_MSG_ACKED,    STCLASS="CONSTANT SYMDEF",
      122    10778                      ERR#=%E$MSG_ACKED,   FCG=VM,MID=E               );
      123    10823        /*E* ERROR: VME-E$MSG_ACKED-0
      124    10824             MESSAGE:Message acknowledged.
      125    10825        */
      126    10826        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:11   
      127    10827        /*
      128    10828             ***** Save the important info ...
      129    10829        */
      130    10830    1       CALL SAVE_COMMON_INFO;
      131    10831        /*
      132    10832             ***** Reinitialize VM_HEADER ...
      133    10833        */
      134    10834    1       CALL SETUP_HEADER;
      135    10835    1       VM_HEADER.STATUS.ACK = RECEIVER#;
      136    10836    1       VM_HEADER.STATUS.RRACK = ~ RECEIVER#;
      137    10837        /*
      138    10838             ***** Use the REPLY_TO address as the to address ...
      139    10839        */
      140    10840    1       IF REPLY_TEXT.L# = 0
      141    10841    1       THEN                            /* No acknowledgement possible */
      142    10842    2       DO;
      143    10843    2           CALL XUR$ERRMSG (E_ACKIMPOSSIBLE);
      144    10844    2           ALTRETURN;
      145    10845    2       END;
      146    10846        /*
      147    10847             ***** Store the to info ...
      148    10848        */
      149    10849    1       TO_TEXT = REPLY_TEXT;
      150    10850    1       CALL STASH_TO ALTRET(E_ALLOCATE);
      151    10851        /*
      152    10852             ***** Get the reply-to record. Note this record began its existence
      153    10853             ***** in A02 so a non-existing record means a pre-A02 folder.
      154    10854        */
      155    10855    1       CALL VMA$GET_ADD_RECORD (%VM_TYPE_RTO,VM_ADDLIST_,M$MAIL_FILE_NUM,
      156    10856    1         MESSAGE_NUMBER)
      157    10857    1       WHENALTRETURN
      158    10858    2       DO;
      159    10859    2           IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$NOKEY
      160    10860    2           THEN
      161    10861    3           DO;
      162    10862        /*
      163    10863                  ***** Can't find a reply-to record so send ack to sender.
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:12   
      164    10864                  ***** Convert the reply text into an address entry ...
      165    10865        */
      166    10866    3               TO_TEXT = REPLY_TEXT;
      167    10867    3               CALL CREATE_TO_ADDRESS ALTRET(E_TO);
      168    10868    3           END;
      169    10869    2       END;
      170    10870    1       CALL VMA$PUT_ADD_RECORD (%VM_TYPE_TO,VM_ADDLIST_,M$WORK_NUM) ALTRET(E_PMME);
      171    10871        /*
      172    10872             ***** Now supply the body record ...
      173    10873        */
      174    10874    1       VM_HEADER.NUM_RECORDS = 1;
      175    10875    1       VM_BODYREC.TYPE = %VM_BODY_TEXT;
      176    10876    1       IF RECEIVER#
      177    10877    2       THEN DO;    /* explicit ACK */
      178    10878                %INIT_STR( CODE=E_MSG_ACKED, STR=VM_MSG_ACKED, TEST=YES );
      179    10901    2           VM_BODYREC.VALUE.DATA = VM_MSG_ACKED.NAME#;
      180    10902    2           VM_BODYREC.VALUE.COUNT = VM_MSG_ACKED.L#;
      181    10903    2       END;
      182    10904    2       ELSE DO;    /* RR acknowledgement */
      183    10905                %INIT_STR( CODE=E_MSG_RECV, STR=VM_MSG_RECV, TEST=YES );
      184    10928    2           VM_BODYREC.VALUE.DATA = VM_MSG_RECV.NAME#;
      185    10929    2           VM_BODYREC.VALUE.COUNT = VM_MSG_RECV.L#;
      186    10930    2       END;
      187    10931    1       INDX1 = VM_BODYREC.VALUE.COUNT;
      188    10932    1       CALL VMD$PUT_BODY (0,M$WORK_NUM,0,INDX1,0,VM_BODYREC) ALTRET(E_PMME);
      189    10933        /*
      190    10934             ***** Store the subject ...
      191    10935        */
      192    10936    1       CALL STASH_SUBJECT ALTRET(E_ALLOCATE);
      193    10937        /*
      194    10938             ***** Store the id number of the mailgram being ack'ed.
      195    10939        */
      196    10940    1       CALL STASH_REFERENCE_ID;
      197    10941        /*
      198    10942             ***** Store the header ...
      199    10943        */
      200    10944    1       CALL STORE_HEADER ALTRET(E_PMME);
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:13   
      201    10945    1       RETURN;
      202    10946        /**/
      203    10947    1   E_PMME:
      204    10948    1       CALL XUR$ERRMSG (B$TCB.ALT$ -> B$ALT.ERR);
      205    10949    1       ALTRETURN;
      206    10950    1   E_TO:
      207    10951    1       CALL XUR$ERRMSG (E_CANTANS);
      208    10952    1       ALTRETURN;
      209    10953        /**/
      210    10954    1   E_ALLOCATE:
      211    10955    1       CALL XUR$ERRMSG (MCB.ERR);
      212    10956    1       ALTRETURN;
      213    10957        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:14   
      214    10958        /*********************************************************************/
      215    10959        /*F*    NAME: VME$ANSWER
      216    10960                PURPOSE:
      217    10961                      To return an ANSWER message.
      218    10962                DESCRIPTION:
      219    10963                      This routine will return a message to the sender
      220    10964                      and optionally receivers of the message. The body
      221    10965                      of the message will be supplied by the current user.
      222    10966                      This routine has the following parameters.
      223    10967                         MESSAGE_NUMBER - unused.
      224    10968                         USER_NAME - textc name of this user.
      225    10969                         VM_SEARCH_INFO - used for resolving addresses.
      226    10970                         RECEIVER# - Message to all receivers as well as sender?
      227    10971        */
      228    10972        /*********************************************************************/
      229    10973    1   VME$ANSWER: ENTRY (MESSAGE_NUMBER,USER_NAME,RECEIVER#) ALTRET;
      230    10974        /*
      231    10975             ***** Save the important info ...
      232    10976        */
      233    10977    1       CALL SAVE_COMMON_INFO;
      234    10978    1       IF VM_HEADER.TO$ ~= ADDR(NIL)
      235    10979    1       THEN
      236    10980    2       DO;
      237    10981    2           TO_TEXT.L# = VM_HEADER.TO$ ->X$STRING.SIZ;
      238    10982    2           TO_TEXT.NAME# = VM_HEADER.TO$ ->X$STRING.TEXT;
      239    10983    2       END;
      240    10984    1       ELSE
      241    10985    1           TO_TEXT.L# = 0;
      242    10986    1       IF VM_HEADER.BLIND$ ~= ADDR(NIL)
      243    10987    1       THEN
      244    10988    2       DO;
      245    10989    2           BLIND_TEXT.L# = VM_HEADER.BLIND$->X$STRING.SIZ;
      246    10990    2           BLIND_TEXT.NAME# = VM_HEADER.BLIND$->X$STRING.TEXT;
      247    10991    2       END;
      248    10992    1       ELSE
      249    10993    1           BLIND_TEXT.L# = 0;
      250    10994    1       IF VM_HEADER.COPY$ ~= ADDR(NIL)
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:15   
      251    10995    1       THEN
      252    10996    2       DO;
      253    10997    2           COPY_TEXT.L# = VM_HEADER.COPY$->X$STRING.SIZ;
      254    10998    2           COPY_TEXT.NAME# = VM_HEADER.COPY$->X$STRING.TEXT;
      255    10999    2       END;
      256    11000    1       ELSE
      257    11001    1           COPY_TEXT.L# = 0;
      258    11002        /*
      259    11003             ***** Reinitialize VM_HEADER ...
      260    11004        */
      261    11005    1       CALL SETUP_HEADER;
      262    11006    1       VM_HEADER.STATUS.ANSWER = %YES#;
      263    11007        /*
      264    11008             ***** Get the reply-to record. Note this record began its existence
      265    11009             ***** in A02 so non-existence means pre-A02 mailbox.
      266    11010        */
      267    11011    1       CALL VMA$GET_ADD_RECORD (%VM_TYPE_RTO,VM_ADDLIST_,M$MAIL_FILE_NUM,
      268    11012    1         MESSAGE_NUMBER)
      269    11013    1       WHENALTRETURN
      270    11014    2       DO;
      271    11015    2           IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$NOKEY
      272    11016    2           THEN
      273    11017    3           DO;
      274    11018        /*
      275    11019                  ***** Can't find a reply-to record so create one.
      276    11020                  ***** Convert the REPLY_TO text into an address entry ...
      277    11021        */
      278    11022    3               TO_TEXT = REPLY_TEXT;
      279    11023    3               CALL CREATE_TO_ADDRESS ALTRET(E_TO);
      280    11024    3           END;
      281    11025    2       END;
      282    11026        /*
      283    11027             ***** If receivers specified, need the original to list and append
      284    11028             ***** it to the new to list.
      285    11029        */
      286    11030    1       IF RECEIVER#
      287    11031    1       THEN
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:16   
      288    11032    2       DO;
      289    11033    2           CALL VMA$GET_ADD_RECORD (%VM_TYPE_TO,VM_WORK_,
      290    11034    2             M$MAIL_FILE_NUM,MESSAGE_NUMBER) ALTRET (E_TO);
      291    11035        /*
      292    11036                ****** See if ReplyTo list is a subset of the To list; if so, the
      293    11037                       ReplyTo text doesn't need to be appended to the To text.
      294    11038        */
      295    11039    2           OUT$ = VM_ADD_HEAD.HEAD$;
      296    11040    2           APPEND_REPLY = %NO#;
      297    11041    3           DO FOREVER;
      298    11042    3   NEXT_RTO:   ;
      299    11043    3               CALL VMA$GET_NEXT_ENTRY (VM_UADDRESS, VM_RADDRESS, OUT$,
      300    11044    3                 VM_ADDLIST$) ALTRET(END_RTO);
      301    11045    3               OUT1$ = VM_WORK$ -> VM_ADD_HEAD.HEAD$;
      302    11046    4               DO FOREVER;
      303    11047    4                   CALL VMA$GET_NEXT_ENTRY (VM_UADDRESS1, VM_RADDRESS1, OUT1$,
      304    11048    4                     VM_WORK$) ALTRET(END_TO);
      305    11049    4                   IF (VM_RADDRESS.TYPE = %VM_ADD_RESOLVED
      306    11050    4                     AND VM_RADDRESS1.TYPE = %VM_ADD_RESOLVED
      307    11051    4                     AND VM_RADDRESS1.ACCT = VM_RADDRESS.ACCT
      308    11052    4                     AND VM_RADDRESS1.FOLDER = VM_RADDRESS.FOLDER
      309    11053    4                     AND VM_RADDRESS1.SITENAME = VM_RADDRESS.SITENAME)
      310    11054    4                     OR (VM_UADDRESS.TYPE = %VM_ADD_UNRESOLVED
      311    11055    4                     AND VM_UADDRESS1.TYPE = %VM_ADD_UNRESOLVED
      312    11056    4                     AND VM_UADDRESS1.FOLDER = VM_UADDRESS.FOLDER
      313    11057    4                     AND VM_UADDRESS1.SITENAME = VM_UADDRESS.SITENAME
      314    11058    4                     AND ADDR(VM_UADDRESS1.USER_NAME) -> X$STRING =
      315    11059    4                     ADDR(VM_UADDRESS.USER_NAME) -> X$STRING)
      316    11060    4                   THEN
      317    11061    4                       GOTO NEXT_RTO;
      318    11062    4               END;
      319    11063    3   END_TO:     ;
      320    11064    3               APPEND_REPLY = %YES#;
      321    11065    3               GOTO END_RTO;
      322    11066    3           END;
      323    11067    2   END_RTO: ;
      324    11068    2           IF APPEND_REPLY
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:17   
      325    11069    3           THEN DO;
      326    11070    3               OUT$ = VM_WORK$ -> VM_ADD_HEAD.HEAD$;
      327    11071    4               DO FOREVER;
      328    11072    4                   CALL VMA$GET_NEXT_ENTRY (VM_UADDRESS,VM_RADDRESS,
      329    11073    4                     OUT$,VM_WORK$)  ALTRET(END_RECEIVER);
      330    11074    4                   IF VM_RADDRESS.TYPE = %VM_ADD_RESOLVED
      331    11075    4                   THEN
      332    11076    4                       CALL VMA$ADD_RENTRY (VM_RADDRESS.ACCT,
      333    11077    4                         VM_RADDRESS.FOLDER,VM_RADDRESS.PASS,
      334    11078    4                         VM_RADDRESS.SITENAME) ALTRET(E_PMME);
      335    11079    4                   ELSE
      336    11080    4                       CALL VMA$ADD_UENTRY (VM_UADDRESS.USER_NAME,
      337    11081    4                         VM_RADDRESS.FOLDER,VM_RADDRESS.PASS,
      338    11082    4                         VM_RADDRESS.SITENAME) ALTRET(E_PMME);
      339    11083    4               END;
      340    11084    3           END;
      341    11085    3           ELSE DO;
      342    11086    3               CALL VMA$GET_ADD_RECORD (%VM_TYPE_TO, VM_ADDLIST_,
      343    11087    3                 M$MAIL_FILE_NUM, MESSAGE_NUMBER) ALTRET(E_PMME);
      344    11088    3           END;
      345    11089    2       END;
      346    11090    1   END_RECEIVER:
      347    11091    1       CALL VMA$PUT_ADD_RECORD (%VM_TYPE_TO,VM_ADDLIST_,M$WORK_NUM) ALTRET(E_PMME);
      348    11092        /*
      349    11093             ***** Create the To field ...
      350    11094        */
      351    11095    1       IF RECEIVER#
      352    11096    2       THEN DO;
      353    11097    2           IF APPEND_REPLY
      354    11098    3           THEN DO;
      355    11099    3               CALL INSERT (TO_TEXT.NAME#,TO_TEXT.L#,,', ',REPLY_TEXT.NAME#);
      356    11100    3               TO_TEXT.L# = TO_TEXT.L# + REPLY_TEXT.L# + LENGTHC(', ');
      357    11101    3           END;
      358    11102    2       END;
      359    11103    2       ELSE DO;
      360    11104    2           TO_TEXT = REPLY_TEXT;
      361    11105    2       END;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:18   
      362    11106    1       CALL STASH_TO ALTRET(E_ALLOCATE);
      363    11107        /**/
      364    11108    1       IF RECEIVER#
      365    11109    1         AND BLIND_TEXT.L# ~= 0
      366    11110    1       THEN
      367    11111    2       DO;
      368    11112    2           CALL STASH_BLIND ALTRET(E_ALLOCATE);
      369    11113    2           CALL VMA$GET_ADD_RECORD (%VM_TYPE_BC,VM_ADDLIST_,
      370    11114    2             M$MAIL_FILE_NUM,MESSAGE_NUMBER) ALTRET (E_TO);
      371    11115    2           CALL VMA$PUT_ADD_RECORD (%VM_TYPE_BC,VM_ADDLIST_,M$WORK_NUM) ALTRET(E_PMME);
      372    11116    2       END;
      373    11117        /**/
      374    11118    1       IF RECEIVER#
      375    11119    1         AND COPY_TEXT.L# ~= 0
      376    11120    1       THEN
      377    11121    2       DO;
      378    11122    2           CALL STASH_COPY ALTRET(E_ALLOCATE);
      379    11123    2           CALL VMA$GET_ADD_RECORD (%VM_TYPE_C,VM_ADDLIST_,
      380    11124    2             M$MAIL_FILE_NUM,MESSAGE_NUMBER) ALTRET (E_TO);
      381    11125    2           CALL VMA$PUT_ADD_RECORD (%VM_TYPE_C,VM_ADDLIST_,M$WORK_NUM) ALTRET(E_PMME);
      382    11126    2       END;
      383    11127    1       IF RECEIVER#
      384    11128    1       THEN
      385    11129    1           VM_HEADER.STATUS.ANS_TO = %YES#;
      386    11130    1       CALL STASH_SUBJECT;
      387    11131        /*
      388    11132             ***** Stash the subject in the reference field ...
      389    11133        */
      390    11134    1       CALL STASH_REFERENCE;
      391    11135        /*
      392    11136             ***** Store the id number of the mailgram being ack'ed.
      393    11137        */
      394    11138    1       CALL STASH_REFERENCE_ID;
      395    11139
      396    11140        /*
      397    11141             ***** Store the header ...
      398    11142        */
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:19   
      399    11143    1       CALL STORE_HEADER ALTRET(E_PMME);
      400    11144    1       RETURN;
      401    11145        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:20   
      402    11146        /*I*
      403    11147             NAME: CREATE_TO_ADDRESS
      404    11148             PURPOSE:
      405    11149                   To convert TO_TEXT into a single address entry.
      406    11150        */
      407    11151    1   CREATE_TO_ADDRESS: PROC ALTRET;
      408    11152        /*
      409    11153             ***** Parse TO_TEXT ...
      410    11154        */
      411    11155    2       INDX1 = TO_TEXT.L#;
      412    11156    2       CALL XUR$GETCMD (ADDRESS_SPEC,OUT$,,TO_TEXT.NAME#,INDX1)
      413    11157    2       WHENALTRETURN
      414    11158    3       DO;
      415    11159    3           ALTRETURN;
      416    11160    3       END;
      417    11161        /*
      418    11162             ***** Now convert the parse tree into an address entry ...
      419    11163        */
      420    11164    2       IF DCBADDR(M$MAIL_GLOBAL_NUM) -> F$DCB.FCD#
      421    11165    2       THEN
      422    11166    3       DO;
      423    11167    3           VM_SEARCH_INFO.NUM_ENTRIES = 1;
      424    11168    3           VM_SEARCH_INFO.DCB#(0) = M$MAIL_GLOBAL_NUM;
      425    11169    3       END;
      426    11170    2       ELSE
      427    11171    2           VM_SEARCH_INFO.NUM_ENTRIES = 0;
      428    11172                                 /* Make search list look inactive so it will get set up
      429    11173                                    right if needed later */
      430    11174    2       VM_SEARCH_INFO.ACTIVE = '0'B;
      431    11175    2       CALL VMA$ADDRESS (OUT$,USER_NAME,VM_SEARCH_INFO,%NO#)
      432    11176    2       WHENALTRETURN
      433    11177    3       DO;
      434    11178                                                /* Answer impossible */
      435    11179    3           ALTRETURN;
      436    11180    3       END;
      437    11181    2       RETURN;
      438    11182    2   END CREATE_TO_ADDRESS;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:21   
      439    11183        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:22   
      440    11184        /*I*
      441    11185            NAME: SAVE_COMMON_INFO
      442    11186            PURPOSE:
      443    11187                  To save fields common to both ANSWER and ACKNOWLEDGE.
      444    11188                  These are: ReplyTo, Subject, and UniqueId
      445    11189                  Remove the sitename from the ReplyTo field if it is this site.
      446    11190        */
      447    11191    1   SAVE_COMMON_INFO: PROC;
      448    11192
      449    11193    2       IF VM_HEADER.REPLY_TO$ ~= ADDR(NIL)
      450    11194    3       THEN DO;
      451    11195    3           REPLY_TEXT.L# = VM_HEADER.REPLY_TO$ ->X$STRING.SIZ;
      452    11196    3           REPLY_TEXT.NAME# = VM_HEADER.REPLY_TO$ ->X$STRING.TEXT;
      453    11197    3       END;
      454    11198    3       ELSE DO;
      455    11199    3           IF VM_HEADER.FROM$ ~= ADDR(NIL)
      456    11200    4           THEN DO;
      457    11201    4               REPLY_TEXT.L# = VM_HEADER.FROM$ -> X$STRING.SIZ;
      458    11202    4               REPLY_TEXT.NAME# = VM_HEADER.FROM$ -> X$STRING.TEXT;
      459    11203    4           END;
      460    11204    3           ELSE
      461    11205    3               REPLY_TEXT.L# = 0;
      462    11206    3       END;
      463    11207    2       IF REPLY_TEXT.L# > 0
      464    11208    3       THEN DO;
      465    11209    3           CALL INDEX1R (INDX1, ',', REPLY_TEXT.NAME#)
      466    11210    4           WHENALTRETURN DO;  /* leave it alone if multiple names */
      467    11211    4               CALL INDEX1R (INDX1, '@', REPLY_TEXT.NAME#)
      468    11212    5               WHENRETURN DO;
      469    11213    5                   CALL XLATE (SITENAME, B$XL_UPPER,
      470    11214    5                     SUBSTR (REPLY_TEXT.NAME#, INDX1+1, 8));
      471    11215    5                   IF SITENAME = VM_SITENAME
      472    11216    6                   THEN DO;
      473    11217    6                       CALL SEARCHR (INDX1, DUMMY, B$SR_NON_BLANK,
      474    11218    6                         SUBSTR (REPLY_TEXT.NAME#, 0, INDX1));
      475    11219    6                       REPLY_TEXT.L# = INDX1 + 1;
      476    11220    6                   END;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:23   
      477    11221    5               END;
      478    11222    4           END;
      479    11223    3       END;
      480    11224        /**/
      481    11225    2       IF VM_HEADER.SUBJECT$ ~= ADDR(NIL)
      482    11226    3       THEN DO;
      483    11227    3           SUBJECT_TEXT.L# = VM_HEADER.SUBJECT$ ->X$STRING.SIZ;
      484    11228    3           SUBJECT_TEXT.NAME# = VM_HEADER.SUBJECT$ ->X$STRING.TEXT;
      485    11229    3       END;
      486    11230    2       ELSE
      487    11231    2           SUBJECT_TEXT.L# = 0;
      488    11232        /**/
      489    11233    2       IF VM_HEADER.UNIQUE_ID$ ~= ADDR(NIL)
      490    11234    3       THEN DO;
      491    11235    3           UNIQUE_ID_TEXT.L# = VM_HEADER.UNIQUE_ID$ ->X$STRING.SIZ;
      492    11236    3           UNIQUE_ID_TEXT.NAME# = VM_HEADER.UNIQUE_ID$ ->X$STRING.TEXT;
      493    11237    3       END;
      494    11238    2       ELSE
      495    11239    2           UNIQUE_ID_TEXT.L# = 0;
      496    11240        /**/
      497    11241    2       RETURN;
      498    11242
      499    11243    2   END SAVE_COMMON_INFO;
      500    11244        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:24   
      501    11245        /*I*
      502    11246             NAME: SETUP_MCB
      503    11247             PURPOSE:
      504    11248                   To reinitialize the header record to a virgin state
      505    11249                   and setup the MCB used by X$ALLOCATE and X$DEALLOCATE.
      506    11250        */
      507    11251    1   SETUP_HEADER: PROC;
      508    11252    2       VM_HEADER = CVM_HEADER;
      509    11253    2       VM_HEADER.FREE$ = ADDR(NIL);
      510    11254    2       VM_HEADER.NEXT$ = ADDR(VM_HEADER.WORK_AREA);
      511    11255    2       MCB.TYPE = 0;
      512    11256    2       MCB.MIN_SIZE = 12;
      513    11257    2       MCB.SEGMENT_BASE$ = VM_HEADER$;
      514    11258    2       MCB.HI_SEGMENT$ = VM_HEADER.NEXT$;
      515    11259    2       MCB.FREE_HEAD$ = VM_HEADER.FREE$;
      516    11260    2       MCB.WKSZ = (VBOUND(VM_HEADER_)+1)/4;
      517    11261    2       RETURN;
      518    11262    2   END SETUP_HEADER;
      519    11263        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:25   
      520    11264        /*I*
      521    11265             NAME: STASH_SUBJECT
      522    11266             PURPOSE:
      523    11267                   To stash the SUBJECT in the new header.
      524    11268        */
      525    11269    1   STASH_SUBJECT: PROC ALTRET;
      526    11270    2       IF SUBJECT_TEXT.L# ~= 0
      527    11271    2       THEN
      528    11272    3       DO;
      529    11273    3           MCB.SIZE = SUBJECT_TEXT.L# + 1; /* One byte for count */
      530    11274    3           CALL X$ALLOCATE (MCB) ALTRET(E_ALLOCATE);
      531    11275    3           VM_HEADER.SUBJECT$ = MCB.ADDRESS$;
      532    11276    3           VM_HEADER.SUBJECT$ -> X$STRING.SIZ = SUBJECT_TEXT.L#;
      533    11277    3           VM_HEADER.SUBJECT$ -> X$STRING.TEXT = SUBJECT_TEXT.NAME#;
      534    11278    3       END;
      535    11279    2       RETURN;
      536    11280        /**/
      537    11281    2   E_ALLOCATE:
      538    11282    2       ALTRETURN;
      539    11283    2   END STASH_SUBJECT;
      540    11284        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:26   
      541    11285        /*I*
      542    11286             NAME: STASH_TO
      543    11287             PURPOSE:
      544    11288                   To stash the TO info in the new header.
      545    11289        */
      546    11290    1   STASH_TO: PROC ALTRET;
      547    11291    2       IF TO_TEXT.L# ~= 0
      548    11292    2       THEN
      549    11293    3       DO;
      550    11294    3           MCB.SIZE = TO_TEXT.L# + 1; /* One byte for count */
      551    11295    3           CALL X$ALLOCATE (MCB) ALTRET(E_ALLOCATE);
      552    11296    3           VM_HEADER.TO$ = MCB.ADDRESS$;
      553    11297    3           VM_HEADER.TO$ -> X$STRING.SIZ = TO_TEXT.L#;
      554    11298    3           VM_HEADER.TO$ -> X$STRING.TEXT = TO_TEXT.NAME#;
      555    11299    3       END;
      556    11300    2       RETURN;
      557    11301        /**/
      558    11302    2   E_ALLOCATE:
      559    11303    2       ALTRETURN;
      560    11304    2   END STASH_TO;
      561    11305        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:27   
      562    11306        /*I*
      563    11307             NAME: STASH_BLIND
      564    11308             PURPOSE:
      565    11309                   To stash the BLIND info in the new header.
      566    11310        */
      567    11311    1   STASH_BLIND: PROC ALTRET;
      568    11312    2       IF BLIND_TEXT.L# ~= 0
      569    11313    2       THEN
      570    11314    3       DO;
      571    11315    3           MCB.SIZE = BLIND_TEXT.L# + 1; /* One byte for count */
      572    11316    3           CALL X$ALLOCATE (MCB) ALTRET(E_ALLOCATE);
      573    11317    3           VM_HEADER.BLIND$ = MCB.ADDRESS$;
      574    11318    3           VM_HEADER.BLIND$ -> X$STRING.SIZ = BLIND_TEXT.L#;
      575    11319    3           VM_HEADER.BLIND$ -> X$STRING.TEXT = BLIND_TEXT.NAME#;
      576    11320    3       END;
      577    11321    2       RETURN;
      578    11322        /**/
      579    11323    2   E_ALLOCATE:
      580    11324    2       ALTRETURN;
      581    11325    2   END STASH_BLIND;
      582    11326        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:28   
      583    11327        /*I*
      584    11328             NAME: STASH_COPY
      585    11329             PURPOSE:
      586    11330                   To stash the COPY info in the new header.
      587    11331        */
      588    11332    1   STASH_COPY: PROC ALTRET;
      589    11333    2       IF COPY_TEXT.L# ~= 0
      590    11334    2       THEN
      591    11335    3       DO;
      592    11336    3           MCB.SIZE = COPY_TEXT.L# + 1; /* One byte for count */
      593    11337    3           CALL X$ALLOCATE (MCB) ALTRET(E_ALLOCATE);
      594    11338    3           VM_HEADER.COPY$ = MCB.ADDRESS$;
      595    11339    3           VM_HEADER.COPY$ -> X$STRING.SIZ = COPY_TEXT.L#;
      596    11340    3           VM_HEADER.COPY$ -> X$STRING.TEXT = COPY_TEXT.NAME#;
      597    11341    3       END;
      598    11342    2       RETURN;
      599    11343        /**/
      600    11344    2   E_ALLOCATE:
      601    11345    2       ALTRETURN;
      602    11346    2   END STASH_COPY;
      603    11347        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:29   
      604    11348        /*I*
      605    11349             NAME: STORE_HEADER
      606    11350             PURPOSE:
      607    11351                   To update FREE$ and NEXT$ and write the header to work fiee.
      608    11352        */
      609    11353    1   STORE_HEADER: PROC ALTRET;
      610    11354    2       VM_HEADER.FREE$ = MCB.FREE_HEAD$;
      611    11355    2       VM_HEADER.NEXT$ = MCB.HI_SEGMENT$;
      612    11356    2       CALL VMD$PUT_HEADER (0,M$WORK_NUM) ALTRET(E_PMME);
      613    11357    2       RETURN;
      614    11358        /**/
      615    11359    2   E_PMME:
      616    11360    2       ALTRETURN;
      617    11361    2   END STORE_HEADER;
      618    11362        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:30   
      619    11363        /*I*
      620    11364             NAME: STASH_REFERENCE
      621    11365             PURPOSE:
      622    11366                   To stash the REFERENCE in the new header. The SUBJECT is
      623    11367                   used.
      624    11368        */
      625    11369    1   STASH_REFERENCE: PROC ALTRET;
      626    11370    2       IF SUBJECT_TEXT.L# ~= 0
      627    11371    2       THEN
      628    11372    3       DO;
      629    11373    3           MCB.SIZE = SUBJECT_TEXT.L# + 1; /* One byte for count */
      630    11374    3           CALL X$ALLOCATE (MCB) ALTRET(E_ALLOCATE);
      631    11375    3           VM_HEADER.REFERENCE$ = MCB.ADDRESS$;
      632    11376    3           VM_HEADER.REFERENCE$ -> X$STRING.SIZ = SUBJECT_TEXT.L#;
      633    11377    3           VM_HEADER.REFERENCE$ -> X$STRING.TEXT = SUBJECT_TEXT.NAME#;
      634    11378    3       END;
      635    11379    2       RETURN;
      636    11380        /**/
      637    11381    2   E_ALLOCATE:
      638    11382    2       ALTRETURN;
      639    11383    2   END STASH_REFERENCE;
      640    11384        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:31   
      641    11385        /*I*
      642    11386             NAME: STASH_REFERENCE_ID
      643    11387             PURPOSE:
      644    11388                   To stash the unique-ID from the old header in the references-ID
      645    11389                   of the new header.
      646    11390        */
      647    11391    1   STASH_REFERENCE_ID: PROC ALTRET;
      648    11392    2       IF UNIQUE_ID_TEXT.L# ~= 0
      649    11393    2       THEN
      650    11394    3       DO;
      651    11395    3           MCB.SIZE = UNIQUE_ID_TEXT.L# + 1; /* One byte for count */
      652    11396    3           CALL X$ALLOCATE (MCB) ALTRET(E_ALLOCATE);
      653    11397    3           VM_HEADER.REFERS_TO_ID$ = MCB.ADDRESS$;
      654    11398    3           VM_HEADER.REFERS_TO_ID$ -> X$STRING.SIZ = UNIQUE_ID_TEXT.L#;
      655    11399    3           VM_HEADER.REFERS_TO_ID$ -> X$STRING.TEXT = UNIQUE_ID_TEXT.NAME#;
      656    11400    3       END;
      657    11401    2       RETURN;
      658    11402        /**/
      659    11403    2   E_ALLOCATE:
      660    11404    2       ALTRETURN;
      661    11405    2   END STASH_REFERENCE_ID;
      662    11406    1   END VME$ACKNOWLEDGE;

PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:32   
--  Include file information  --

   XUR_ENTRY.:LIB_E05  cannot be made into a system file and is referenced.
   XUM_MACRO_C.:LIB_E05  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_PERR_C.:VMB6TOU  is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B$TABLES_C.:LIB_E05  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VME$ACKNOWLEDGE.

   Procedure VME$ACKNOWLEDGE requires 865 words for executable code.
   Procedure VME$ACKNOWLEDGE requires 1090 words of local(AUTO) storage.

    No errors detected in file VME$SUBR.:VMB6TSI    .

PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:33   

 Object Unit name= VME$ACKNOWLEDGE                            File name= VME$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:14:49.44 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none   285    435  VME$ACKNOWLEDGE
   12  RoData even  UTS     43     53  VME$ACKNOWLEDGE
   13   Proc  even  none   865   1541  VME$ACKNOWLEDGE
   14  RoData even  none    65    101  VME$ACKNOWLEDGE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    13      0   yes    yes     yes      Std        3  VME$ACKNOWLEDGE
    13    212          yes     yes      Std        3  VME$ANSWER
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:34   

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
   11    375  VM_MSG_RECV                       12     50  E_MSG_RECV
   11    415  VM_MSG_ACKED                      12     51  E_MSG_ACKED

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
 yes     yes           Std       4 VMA$GET_ADD_RECORD
 yes     yes           Std       4 VMA$GET_NEXT_ENTRY
 yes     yes           Std       6 VMA$ADD_UENTRY
 yes     yes           Std       6 VMA$ADD_RENTRY
 yes     yes           Std       7 XUR$ERRMSG
 yes     yes           Std       4 VMA$PUT_ADD_RECORD
 yes     yes           Std       3 VMD$ERRMSG
 yes     yes           Std       7 VMD$PUT_BODY
 yes     yes           Std       6 XUR$GETCMD
 yes     yes           Std       5 VMA$ADDRESS
 yes     yes           Std       1 X$ALLOCATE
 yes     yes           Std       2 VMD$PUT_HEADER
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:35   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA                 r    B$XL_UPPER$
r    B$SR_NON_BLANK$                       VM_ADDRESS_SPEC$

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID                                 ROSID
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:36   


        1        1        /*M* VME$SUBR - VME$ACKNOWLEDGE, VME$ANSWER                           */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
        8        8        /*F*    NAME: VME$ACKNOWLEDGE
        9        9                PURPOSE:
       10       10                      To return an ACKNOWLEDGMENT message.
       11       11                DESCRIPTION:
       12       12                      This routine will return a message to the sender
       13       13                      of a specified message which acknowledges the receipt
       14       14                      (and possible DISPLAY) of that message.
       15       15                      This routine has the following parameters.
       16       16                         MESSAGE_NUMBER - unused.
       17       17                         USER_NAME - textc name of this user.
       18       18                         VM_SEARCH_INFO - used for resolving addresses.
       19       19                         RECEIVER# - on if this is explicit ACK; off for RR ACK.
       20       20        */
       21       21        /*********************************************************************/
       22       22        VME$ACKNOWLEDGE: PROC (MESSAGE_NUMBER,USER_NAME,RECEIVER#) ALTRET;

     22 13 000000   000000 700200 xent  VME$ACKNOWL* TSX0  ! X66_AUTO_3
        13 000001   002102 000003                    ZERO    1090,3

       23       23        /***** Include files *****/
       24       24          %INCLUDE B_ERRORS_C;
       25     1151          %INCLUDE B$TABLES_C;
       26     1259          %INCLUDE CP_6;
       27     6818          %INCLUDE CP_6_SUBS;
       28     7358          %INCLUDE VM_MACRO_C;
       29     8626          %INCLUDE VM_SUBS_C;
       30     8886          %INCLUDE VM_PERR_C;
       31     9181          %INCLUDE VM_DATA_R;
       32     9612          %INCLUDE XUM_MACRO_C;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:37   
       33     9639          %INCLUDE XUR_ENTRY;
       34     9671        /***** Parameters *****/
       35     9672    1   DCL MESSAGE_NUMBER SBIN WORD;
       36     9673          %TEXTC (NAME=USER_NAME,STCLASS=" ");
       37     9678    1   DCL RECEIVER# BIT(1);
       38     9679        /***** Based structures *****/
       39     9680          %B$TCB (STCLASS="BASED(B$TCB$)");
       40     9683          %B$ALT;
       41     9691          %F$DCB;
       42     9748            %B$XL_UPPER;
       43     9752          %B$SR_NON_BLANK;
       44     9756        /***** Mail structures *****/
       45     9757          %SET LISTMAC='1'B;
       46     9758          %SET LISTSUB='1'B;
       47     9759          %VM_ADDTYPES;
              9760        %EQU    VM_ADD_RESOLVED = 1;   /* Resolved address entry */
              9761        %EQU    VM_ADD_UNRESOLVED = 2; /* Unresolved address entry */
       48     9763          %VM_KEYTYPES;
              9764        %EQU    VM_TYPE_PRO   = 1;      /* The Profile record */
              9765        %EQU    VM_TYPE_ACC   = 2;      /* The access-control record */
              9766        %EQU    VM_TYPE_HEAD  = 8;      /* The Header record */
              9767        %EQU    VM_TYPE_DELIV = 9;      /* The delivery records */
              9768        %EQU    VM_TYPE_SITE  = 10;     /* SITE INFORMATION */
              9769        %EQU    VM_TYPE_TO    = 16;     /* The original TO record */
              9770        %EQU    VM_TYPE_ITO   = 17;     /* The intersystem TO record */
              9771        %EQU    VM_TYPE_C     = 24;     /* The original Copies record */
              9772        %EQU    VM_TYPE_IC    = 25;     /* The intersystem Copies record */
              9773        %EQU    VM_TYPE_BC    = 32;     /* The original Blind Copies record */
              9774        %EQU    VM_TYPE_IBC   = 33;     /* The intersystem Blind Copies record */
              9775        %EQU    VM_TYPE_RTO   = 36;     /* The Reply To record */
              9776        %EQU    VM_TYPE_TRACE = 44;     /* The message trace record(s) */
              9777        %EQU    VM_TYPE_BODY  = 48;     /* The message body record(s) */
              9778        %EQU    VM_TYPE_LIST  = 60;     /* Definition for a LIST of addresses */
              9779        %EQU    VM_TYPE_USER  = 80;     /* Definition for a USER */
              9780        %EQU    VM_TYPE_ID    = 90;     /* The unique-message-ID cross reference */
              9781        %EQU    VM_TYPE_ENCL  = 100;    /* The binary enclosure context record*/
              9782        %EQU    VM_TYPE_ENCL_INIT = 101;/* To initialize the first enclosure record */
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:38   
       49     9784          %VM_BODYTYPES;
              9785        %EQU    VM_BODY_TEXT = 1;   /* Text record */
              9786        %EQU    VM_BODY_GRAPHICS = 2;   /* Graphics data. RESERVED FOR FUTURE USE */
              9787        %EQU    VM_BODY_ENCODED_ERR = 3; /* Encoded error/time/textc information */
              9788        %EQU    VM_BODY_BINARY_ENCL = 4; /* Binary enclosure record */
       50     9790          %VM_HEADER;
              9791        %LSET LISTDIR='0'B;
              9800    1   DCL 1 VM_HEADER BASED (VM_HEADER$),
              9801    1         2 HEADER_SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
              9802                               /* Number of words in this header */
              9803    1         2 CREATION_DATE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
              9804                               /* Date message created (passed to send) */
              9805    1         2 DELIVERY_DATE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
              9806                               /* Date message is to be/was delivered */
              9807    1         2 FIRST_DELIVERY UBIN WORD %INIT(0)%CHARTEXT('/**/'),
              9808                             /* Date/time of MAILMAN's first delivery pass */
              9809    1         2 RESERVED_DATES (0:4) UBIN WORD %INIT(0*0)%CHARTEXT('/**/'),
              9810                               /* Reserved for future use */
              9811    1         2 NUM_RECORDS UBIN WORD %INIT(0)%CHARTEXT('/**/'),
              9812                               /* Number of records in message body */
              9813    1         2 STATUS,
              9814    1           3 ERR BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9815                        /* Set if message is being returned to sender -
              9816                           see HDR.ERROR and HDR.BAD_ADDR */
              9817    1           3 ANSWER BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9818                               /* Set if this is an answer to a received message */
              9819    1           3 ACK BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9820                               /* Set if this is an ack to a received message */
              9821    1           3 DEFER BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9822                               /* Set if deferred message (sent at HDR.DELIVERY_DATE) */
              9823    1           3 RR BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9824                               /* Set if "Return Receipt" requested */
              9825    1           3 CRYPT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9826                               /* Set if message body is encrypted */
              9827    1           3 OLD BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9828                        /* Set if message is "old" (has at least had
              9829                           header printed in prior session). */
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:39   
              9830    1           3 MAKE_OLD BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9831                        /* Set if message is to be marked "old" when
              9832                           message file is overwritten. */
              9833    1           3 EXAM BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9834                               /* Set if message has been examined */
              9835    1           3 DEL BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9836                               /* Set if message has been deleted */
              9837    1           3 FCOPY BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9838                               /* Set if message is a FILE COPY */
              9839    1           3 MARK BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9840                               /* Set if message has been MARKed */
              9841    1           3 GRAPHICS BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9842                               /* Set if message contains graphics */
              9843    1           3 FORWARDED BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9844                               /* Set if message was result of FORWARD command */
              9845    1           3 ANS_TO BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9846                               /* Used to tell MAILMAN to set RETURN_TO_ORIGIN */
              9847    1           3 DR BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9848                             /* Delivery receipt requested */
              9849    1           3 DELIVERY BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9850                             /* This 'gram is a delivery receipt */
              9851    1           3 BROADCAST BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9852                             /* Broadcast (junk) mail; don't return errors */
              9853    1           3 PRIMARY BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9854                             /* Recipient is on primary TO: list */
              9855    1           3 C BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9856                             /* Recipient is on C: list */
              9857    1           3 BC BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9858                             /* Recipient is on BC: list */
              9859    1           3 THINGED BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9860                             /* Thing has already [attempted to] sched this */
              9861    1           3 RRACK BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9862                             /* Set if this is a rr ack to a displayed message */
              9863    1           3 PRE_B00 BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9864                             /* Set when a pre-B00 message is read */
              9865    1           3 ENCL BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9866                             /* This mailgram has binary enclosures */
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:40   
              9867    1           3 RESERVED BIT(11) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9868    1         2 MISC ALIGNED,
              9869    1           3 PHASE UBIN (4) UNAL %INIT(0)%CHARTEXT('/**/'),
              9870                             /* Current phase of delivery */
              9871    1           3 * UBIN (32) UNAL %INIT(0)%CHARTEXT('/**/'),
              9872                               /* Reserved for future use */
              9873    1         2 ERROR,
              9874                               /* Reason message was returned to sender */
              9875    1           3 FCG BIT(12) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9876    1           3 MID BIT(6) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9877    1           3 MON BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9878    1           3 ERR# UBIN(14) UNAL %INIT(0)%CHARTEXT('/**/'),
              9879    1           3 SEV UBIN(3) UNAL %INIT(0)%CHARTEXT('/**/'),
              9880    1         2 FREE$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9881                               /* Head of FREE BLOCKS CHAIN in WORK_AREA */
              9882    1         2 NEXT$ PTR %INIT(ADDR(VM_HEADER.WORK_AREA))%CHARTEXT('/**/'),
              9883                               /* Ptr to next avail. word in WORK_AREA */
              9884    1         2 BAD_ADDRESS$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9885                               /* Ptr to bad address textc info */
              9886    1         2 BLIND$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9887                               /* Ptr to BLIND COPY textc info */
              9888    1         2 COPY$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9889                               /* Ptr to COPY textc info */
              9890    1         2 FILE_FOLDER$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9891                            /* Address to be used for storing copies of messages by user */
              9892    1         2 FROM$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9893                               /* Ptr to FROM textc info */
              9894    1         2 REFERENCE$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9895                               /* Ptr to REFERENCE textc info */
              9896    1         2 REPLY_TO$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9897                               /* Ptr to REPLY-TO textc info */
              9898    1         2 RETURN_ADDRESS$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9899                               /* Ptr to RETURN_ADDRESS address structure */
              9900    1         2 SIGNED$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9901                               /* Signature text */
              9902    1         2 SUBJECT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9903                               /* Ptr to SUBJECT textc info */
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:41   
              9904    1         2 TO$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9905                               /* Ptr to TO textc info */
              9906    1         2 UNIQUE_ID$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9907                                    /* Unique identifier for this message */
              9908    1         2 REFERS_TO_ID$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9909                                    /* Identifies original mailgram for ACK/ERR/ANS */
              9910    1         2 NUM_TRACE_RECORDS UBIN WORD %INIT(0)%CHARTEXT('/**/'),
              9911                                    /* Number of TRACE records */
              9912    1         2 NUM_ENCL_RECORDS UBIN WORD %INIT(0)%CHARTEXT('/**/'),
              9913                             /* Number of binary enclosure records MINUS  context record */
              9914    1         2 RESERVED (0:5) UBIN WORD %INIT(0*0)%CHARTEXT('/**/'),
              9915                               /* Reserved for future expansion */
              9916    1         2 WORK_AREA UBIN WORD;
              9917                               /* Base of work area for textc data */
       51     9919          %VM_BODYREC;
              9920        %LSET LISTDIR='0'B;
              9929    1   DCL 1 VM_BODYREC STATIC,
              9930    1         2 TYPE UBIN BYTE CALIGNED %INIT(%VM_BODY_TEXT)%CHARTEXT('/**/'),
              9931                        /* The type of the record to be accessed. */
              9932    1         2 RESERVED UBIN (27) UNAL %INIT(0)%CHARTEXT('/**/'),
              9933                         /* Reserved for future use */
              9934    1         2 VALUE,
              9935    1           3 COUNT UBIN WORD,
              9936                        /* Number of bytes of DATA */
              9947    1           3 DATA CHAR(300) CALIGNED;
       52     9951          %VM_ADD_HEAD;
              9952        %LSET LISTDIR='0'B;
              9961    1   DCL 1 VM_ADD_HEAD BASED(VM_ADDLIST$),
              9962    1         2 ADDRESS_SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
              9963                               /* Number of words in this address list */
              9964    1         2 NUM_ENTRIES UBIN WORD %INIT(0)%CHARTEXT('/**/'),
              9965                               /* Number of entries in list */
              9966    1         2 FLAGS,
              9967    1           3 ERR# BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9968                               /* Some error found in address list */
              9969    1           3 RESERVED BIT(35) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9970                               /* Reserved for future expansion */
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:42   
              9971    1         2 HEAD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9972                               /* Head of link list */
              9973    1         2 FREE$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9974                               /* Ptr to first entry in free block list */
              9975    1         2 NEXT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9976                               /* Ptr to next available word in work area */
              9977    1         2 WORK_AREA UBIN WORD;
              9978                               /* First word of work area. */
       53     9980          %VM_RADDRESS;
              9981        %LSET LISTDIR='0'B;
              9990    1   DCL 1 VM_RADDRESS STATIC,
              9991    1         2 NEXT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9992                               /* Ptr to next entry on list */
              9993    1         2 PREV$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
              9994                               /* Ptr to previous entry on list */
              9995    1         2 FLAGS,
              9996    1           3 UNDEF# BIT (1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9997                               /* This entry is not valid. Report as an error */
              9998    1           3 USER# BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
              9999                               /* USER def, not LIST */
             10000    1           3 RESERVED BIT(7) UNAL %INIT('0'B)%CHARTEXT('/**/'),
             10001                               /* Reserved for future use */
             10002    1         2 TYPE UBIN BYTE UNAL %INIT(%VM_ADD_RESOLVED)%CHARTEXT('/**/'),
             10003    1         2 NAME_KEY CHAR(20) CALIGNED %INIT(' ')%CHARTEXT('/**/'),
             10004                               /* Used only for USER definitions */
             10005    1         2 FOLDER CHAR(25) CALIGNED %INIT(' '*0)%CHARTEXT('/**/'),
             10006    1         2 NOMAD REDEF FOLDER,
             10007    1           3 FOLDER CHAR (18) CALIGNED,
             10008    1           3 DELIM CHAR (1) CALIGNED,
             10009    1           3 PSID CHAR (6) CALIGNED,
             10010    1         2 PASS CHAR(8) CALIGNED %INIT(' '*0)%CHARTEXT('/**/'),
             10011                               /* NOTE: Passwords are encrypted */
             10012    1         2 SITENAME CHAR(8) CALIGNED %INIT(' '*0)%CHARTEXT('/**/'),
             10013    1         2 ACCT CHAR(8) CALIGNED %INIT(' '*0)%CHARTEXT('/**/');
       54    10015          %VM_UADDRESS;
             10016        %LSET LISTDIR='0'B;
             10025    1   DCL 1 VM_UADDRESS STATIC,
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:43   
             10026    1         2 NEXT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
             10027                               /* Ptr to next entry on list */
             10028    1         2 PREV$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
             10029                               /* Ptr to previous entry on list */
             10030    1         2 FLAGS,
             10031    1           3 UNDEF# BIT (1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
             10032                               /* This entry is not valid. Report as an error */
             10033    1           3 USER# BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
             10034                               /* USER def, not LIST */
             10035    1           3 RESERVED BIT(7) UNAL %INIT('0'B)%CHARTEXT('/**/'),
             10036                               /* Reserved for future use */
             10037    1         2 TYPE UBIN BYTE UNAL %INIT(%VM_ADD_UNRESOLVED)%CHARTEXT('/**/'),
             10038    1         2 NAME_KEY CHAR(20) CALIGNED %INIT(' ')%CHARTEXT('/**/'),
             10039                               /* Used only for USER definitions */
             10040    1         2 FOLDER CHAR(25) CALIGNED %INIT(' '*0)%CHARTEXT('/**/'),
             10041    1         2 NOMAD REDEF FOLDER,
             10042    1           3 FOLDER CHAR (18) CALIGNED,
             10043    1           3 DELIM CHAR (1) CALIGNED,
             10044    1           3 PSID CHAR (6) CALIGNED,
             10045    1         2 PASS CHAR(8) CALIGNED %INIT(' '*0)%CHARTEXT('/**/'),
             10046                               /* NOTE: Passwords are encrypted */
             10047    1         2 SITENAME CHAR(8) CALIGNED %INIT(' '*0)%CHARTEXT('/**/'),
             10048    1         2 USER_NAME,
             10049    1           3 COUNT UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
             10050    1           3 TEXT CHAR(200) CALIGNED %INIT(' ')%CHARTEXT('/**/');
       55    10052          %SET LISTMAC='0'B;
       56    10053          %SET LISTSUB='0'B;
       57    10054        /***** Local variables *****/
       58    10055          %VM_HEADER (NAME=CVM_HEADER,STCLASS=CONSTANT);
       59    10184          %XUM$MCB (NAME=MCB,STCLASS=AUTO);
       60    10188    1   DCL OUT$ PTR AUTO;
       61    10189    1   DCL OUT1$ PTR AUTO;
       62    10190    1   DCL CMD_BUF CHAR(511) AUTO;
       63    10191    1   DCL CMD_SIZE SBIN WORD AUTO;
       64    10192          %VLP_NAME (FPTN=BLIND_TEXT,LEN=511,STCLASS=AUTO);
       65    10219          %VLP_NAME (FPTN=COPY_TEXT,LEN=511,STCLASS=AUTO);
       66    10246          %VLP_NAME (FPTN=REFERENCE_TEXT,LEN=511,STCLASS=AUTO);
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:44   
       67    10273          %VLP_NAME (FPTN=REPLY_TEXT,LEN=511,STCLASS=AUTO);
       68    10300          %VLP_NAME (FPTN=SUBJECT_TEXT,LEN=511,STCLASS=AUTO);
       69    10327          %VLP_NAME (FPTN=TO_TEXT,LEN=511,STCLASS=AUTO);
       70    10354          %VLP_NAME (FPTN=UNIQUE_ID_TEXT,LEN=511,STCLASS=AUTO);
       71    10381          %VM_SEARCH_INFO (STCLASS=AUTO);
       72    10408    1   DCL INDX1 SBIN WORD;
       73    10409    1   DCL DUMMY SBIN WORD;
       74    10410    1   DCL SITENAME CHAR(8);
       75    10411          %VM_UADDRESS (NAME=VM_UADDRESS1);
       76    10448          %VM_RADDRESS (NAME=VM_RADDRESS1);
       77    10483    1   DCL APPEND_REPLY BIT(1);
       78    10484        /***** External routines *****/
       79    10485    1   DCL VMA$ADDRESS ENTRY(5) ALTRET;
       80    10486    1   DCL VMA$GET_ADD_RECORD ENTRY(4) ALTRET;
       81    10487    1   DCL VMA$PUT_ADD_RECORD ENTRY(4) ALTRET;
       82    10488    1   DCL VMA$GET_NEXT_ENTRY ENTRY(4) ALTRET;
       83    10489    1   DCL VMA$ADD_RENTRY ENTRY(6) ALTRET;
       84    10490    1   DCL VMA$ADD_UENTRY ENTRY(6) ALTRET;
       85    10491    1   DCL VMD$PUT_BODY ENTRY(7) ALTRET;
       86    10492    1   DCL VMD$PUT_HEADER ENTRY(2) ALTRET;
       87    10493        %INIT_STR(DODCL=YES);
       88    10516    1   DCL X$ALLOCATE ENTRY(1) ALTRET;
       89    10517    1   DCL X$DEALLOCATE ENTRY(1) ALTRET;
       90    10518        /***** Symref data *****/
       91    10519    1   dcl ADDRESS_SPEC sbin based(VM_ADDRESS_SPEC$); /* Address def */
       92    10520    1   dcl VM_ADDRESS_SPEC$ ptr symref;
       93    10521        /***** Error codes *****/
       94    10522          %VLP_ERRCODE (FPTN=E_INTADDERR,FCG="VM",MID="E",
       95    10523                        ERR#=%E$INTADDERR,STCLASS=CONSTANT);
       96    10568        /*E*    ERROR: VME-E$INTADDERR-0
       97    10569                MESSAGE: Unable to decode the address properly. INTERNAL ERROR.
       98    10570        */
       99    10571              %VLP_ERRCODE (FPTN=E_ACKIMPOSSIBLE,FCG="VM",MID="E",
      100    10572              ERR#=%E$ACKIMPOSSIBLE,STCLASS=CONSTANT);
      101    10617        /*E*    ERROR: VME-E$ACKIMPOSSIBLE-0
      102    10618                MESSAGE: No address is available for this message.
      103    10619        */
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:45   
      104    10620              %VLP_ERRCODE (FPTN=E_CANTANS,FCG="VM",MID="E",
      105    10621              ERR#=%E$CANTANS,STCLASS=CONSTANT);
      106    10666        /*E*    ERROR: VME-E$CANTANS-0
      107    10667               MESSAGE: Can't ANSWER or ACKNOWLEDGE this message, bad from or copy address.
      108    10668                MESSAGE1: This error usually occurs in a converted mailbox.  Copy lists
      109    10669                         are not converted and the FROM field may not be legal in
      110    10670                         the released versions of MAIL.
      111    10671        */
      112    10672              %VLP_NAME( FPTN=VM_MSG_RECV, LEN=60,L=60, STCLASS="STATIC SYMDEF",
      113    10673              NAME=' '           );
      114    10700        %VLP_ERRCODE( FPTN=E_MSG_RECV,     STCLASS="CONSTANT SYMDEF",
      115    10701                      ERR#=%E$MSG_RECV,    FCG=VM,MID=E               );
      116    10746        /*E* ERROR: VME-E$MSG_RECV-0
      117    10747             MESSAGE:Return receipt for your message.
      118    10748        */
      119    10749              %VLP_NAME( FPTN=VM_MSG_ACKED, LEN=60,L=60, STCLASS="STATIC SYMDEF",
      120    10750              NAME=' '           );
      121    10777        %VLP_ERRCODE( FPTN=E_MSG_ACKED,    STCLASS="CONSTANT SYMDEF",
      122    10778                      ERR#=%E$MSG_ACKED,   FCG=VM,MID=E               );
      123    10823        /*E* ERROR: VME-E$MSG_ACKED-0
      124    10824             MESSAGE:Message acknowledged.
      125    10825        */
      126    10826        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:46   
      127    10827        /*
      128    10828             ***** Save the important info ...
      129    10829        */
      130    10830    1       CALL SAVE_COMMON_INFO;

  10830 13 000002   000776 701000 13                 TSX1    SAVE_COMMON_INFO
        13 000003   000000 011000                    NOP     0

      131    10831        /*
      132    10832             ***** Reinitialize VM_HEADER ...
      133    10833        */
      134    10834    1       CALL SETUP_HEADER;

  10834 13 000004   001163 701000 13                 TSX1    SETUP_HEADER
        13 000005   000000 011000                    NOP     0

      135    10835    1       VM_HEADER.STATUS.ACK = RECEIVER#;

  10835 13 000006   200005 470500                    LDP0    @RECEIVER#,,AUTO
        13 000007   000000 471400 xsym               LDP1    VM_HEADER$
        13 000010   003100 060500                    CSL     bolr='003'O
        13 000011   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
        13 000012   100012 020001                    BDSC    10,,PR1                  by=0,bit=2,n=1

      136    10836    1       VM_HEADER.STATUS.RRACK = ~ RECEIVER#;

  10836 13 000013   003100 060500                    CSL     bolr='003'O
        13 000014   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
        13 000015   202074 000044                    BDSC    APPEND_REPLY+3,,AUTO     by=0,bit=0,n=36
        13 000016   202074 236100                    LDQ     APPEND_REPLY+3,,AUTO
        13 000017   400000 676003                    ERQ     -131072,DU
        13 000020   000026 772000                    QRL     22
        13 000021   100012 676100                    ERQ     10,,PR1
        13 000022   020000 376007                    ANQ     8192,DL
        13 000023   100012 656100                    ERSQ    10,,PR1

      137    10837        /*
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:47   
      138    10838             ***** Use the REPLY_TO address as the to address ...
      139    10839        */
      140    10840    1       IF REPLY_TEXT.L# = 0

  10840 13 000024   201022 236100                    LDQ     REPLY_TEXT,,AUTO
        13 000025   777000 316003                    CANQ    -512,DU
        13 000026   000034 601000 13                 TNZ     s:10849

      141    10841    1       THEN                            /* No acknowledgement possible */
      142    10842    2       DO;

      143    10843    2           CALL XUR$ERRMSG (E_ACKIMPOSSIBLE);

  10843 13 000027   000001 630400 14                 EPPR0   1
        13 000030   000000 631400 14                 EPPR1   0
        13 000031   000000 701000 xent               TSX1    XUR$ERRMSG
        13 000032   000000 011000                    NOP     0

      144    10844    2           ALTRETURN;

  10844 13 000033   000000 702200 xent               TSX2  ! X66_AALT

      145    10845    2       END;
      146    10846        /*
      147    10847             ***** Store the to info ...
      148    10848        */
      149    10849    1       TO_TEXT = REPLY_TEXT;

  10849 13 000034   000100 100500                    MLR     fill='000'O
        13 000035   201022 001000                    ADSC9   REPLY_TEXT,,AUTO         cn=0,n=512
        13 000036   201422 001000                    ADSC9   TO_TEXT,,AUTO            cn=0,n=512

      150    10850    1       CALL STASH_TO ALTRET(E_ALLOCATE);

  10850 13 000037   001256 701000 13                 TSX1    STASH_TO
        13 000040   000203 702000 13                 TSX2    E_ALLOCATE

PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:48   
      151    10851        /*
      152    10852             ***** Get the reply-to record. Note this record began its existence
      153    10853             ***** in A02 so a non-existing record means a pre-A02 folder.
      154    10854        */
      155    10855    1       CALL VMA$GET_ADD_RECORD (%VM_TYPE_RTO,VM_ADDLIST_,M$MAIL_FILE_NUM,

  10855 13 000041   200003 236100                    LDQ     @MESSAGE_NUMBER,,AUTO
        13 000042   000004 235000 14                 LDA     4
        13 000043   202076 757100                    STAQ    APPEND_REPLY+5,,AUTO
        13 000044   000006 237000 14                 LDAQ    6
        13 000045   202074 757100                    STAQ    APPEND_REPLY+3,,AUTO
        13 000046   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
        13 000047   000002 631400 14                 EPPR1   2
        13 000050   000000 701000 xent               TSX1    VMA$GET_ADD_RECORD
        13 000051   000053 702000 13                 TSX2    s:10859
        13 000052   000066 710000 13                 TRA     s:10870

      156    10856    1         MESSAGE_NUMBER)
      157    10857    1       WHENALTRETURN
      158    10858    2       DO;

      159    10859    2           IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$NOKEY

  10859 13 000053   000000 470400 xsym               LDP0    B$TCB$
        13 000054   000000 471500                    LDP1    0,,PR0
        13 000055   100102 236100                    LDQ     66,,PR1
        13 000056   377770 376007                    ANQ     131064,DL
        13 000057   001020 116007                    CMPQ    528,DL
        13 000060   000066 601000 13                 TNZ     s:10870

      160    10860    2           THEN
      161    10861    3           DO;

      162    10862        /*
      163    10863                  ***** Can't find a reply-to record so send ack to sender.
      164    10864                  ***** Convert the reply text into an address entry ...
      165    10865        */
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:49   
      166    10866    3               TO_TEXT = REPLY_TEXT;

  10866 13 000061   000100 100500                    MLR     fill='000'O
        13 000062   201022 001000                    ADSC9   REPLY_TEXT,,AUTO         cn=0,n=512
        13 000063   201422 001000                    ADSC9   TO_TEXT,,AUTO            cn=0,n=512

      167    10867    3               CALL CREATE_TO_ADDRESS ALTRET(E_TO);

  10867 13 000064   000710 701000 13                 TSX1    CREATE_TO_ADDRESS
        13 000065   000176 702000 13                 TSX2    E_TO

      168    10868    3           END;

      169    10869    2       END;

      170    10870    1       CALL VMA$PUT_ADD_RECORD (%VM_TYPE_TO,VM_ADDLIST_,M$WORK_NUM) ALTRET(E_PMME);

  10870 13 000066   000012 630400 14                 EPPR0   10
        13 000067   000010 631400 14                 EPPR1   8
        13 000070   000000 701000 xent               TSX1    VMA$PUT_ADD_RECORD
        13 000071   000165 702000 13                 TSX2    E_PMME

      171    10871        /*
      172    10872             ***** Now supply the body record ...
      173    10873        */
      174    10874    1       VM_HEADER.NUM_RECORDS = 1;

  10874 13 000072   000001 235007                    LDA     1,DL
        13 000073   000000 470400 xsym               LDP0    VM_HEADER$
        13 000074   000011 755100                    STA     9,,PR0

      175    10875    1       VM_BODYREC.TYPE = %VM_BODY_TEXT;

  10875 13 000075   001000 236003                    LDQ     512,DU
        13 000076   000000 552040 11                 STBQ    VM_BODYREC,'40'O

      176    10876    1       IF RECEIVER#
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:50   

  10876 13 000077   200005 471500                    LDP1    @RECEIVER#,,AUTO
        13 000100   000000 066500                    CMPB    filb='0'B
        13 000101   100000 000001                    BDSC    0,,PR1                   by=0,bit=0,n=1
        13 000102   000015 000022 14                 BDSC    13                       by=0,bit=0,n=18
        13 000103   000123 600000 13                 TZE     s:10912

      177    10877    2       THEN DO;    /* explicit ACK */

      178    10878                %INIT_STR( CODE=E_MSG_ACKED, STR=VM_MSG_ACKED, TEST=YES );

  10885 13 000104   040000 106400                    CMPC    fill='040'O
        13 000105   000415 200074 11                 ADSC9   VM_MSG_ACKED             cn=1,n=60
        13 000106   000016 000001 14                 ADSC9   14                       cn=0,n=1
        13 000107   000114 601000 13                 TNZ     s:10901

  10887 13 000110   000020 630400 14                 EPPR0   16
        13 000111   000017 631400 14                 EPPR1   15
        13 000112   000000 701000 xent               TSX1    VMD$ERRMSG
        13 000113   000000 011000                    NOP     0

      179    10901    2           VM_BODYREC.VALUE.DATA = VM_MSG_ACKED.NAME#;

  10901 13 000114   040000 100400                    MLR     fill='040'O
        13 000115   000415 200074 11                 ADSC9   VM_MSG_ACKED             cn=1,n=60
        13 000116   000002 000454 11                 ADSC9   VM_BODYREC+2             cn=0,n=300

      180    10902    2           VM_BODYREC.VALUE.COUNT = VM_MSG_ACKED.L#;

  10902 13 000117   000415 236000 11                 LDQ     VM_MSG_ACKED
        13 000120   000033 772000                    QRL     27
        13 000121   000001 756000 11                 STQ     VM_BODYREC+1

      181    10903    2       END;

  10903 13 000122   000141 710000 13                 TRA     s:10931

PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:51   
      182    10904    2       ELSE DO;    /* RR acknowledgement */

      183    10905                %INIT_STR( CODE=E_MSG_RECV, STR=VM_MSG_RECV, TEST=YES );

  10912 13 000123   040000 106400                    CMPC    fill='040'O
        13 000124   000375 200074 11                 ADSC9   VM_MSG_RECV              cn=1,n=60
        13 000125   000016 000001 14                 ADSC9   14                       cn=0,n=1
        13 000126   000133 601000 13                 TNZ     s:10928

  10914 13 000127   000022 630400 14                 EPPR0   18
        13 000130   000017 631400 14                 EPPR1   15
        13 000131   000000 701000 xent               TSX1    VMD$ERRMSG
        13 000132   000000 011000                    NOP     0

      184    10928    2           VM_BODYREC.VALUE.DATA = VM_MSG_RECV.NAME#;

  10928 13 000133   040000 100400                    MLR     fill='040'O
        13 000134   000375 200074 11                 ADSC9   VM_MSG_RECV              cn=1,n=60
        13 000135   000002 000454 11                 ADSC9   VM_BODYREC+2             cn=0,n=300

      185    10929    2           VM_BODYREC.VALUE.COUNT = VM_MSG_RECV.L#;

  10929 13 000136   000375 236000 11                 LDQ     VM_MSG_RECV
        13 000137   000033 772000                    QRL     27
        13 000140   000001 756000 11                 STQ     VM_BODYREC+1

      186    10930    2       END;

      187    10931    1       INDX1 = VM_BODYREC.VALUE.COUNT;

  10931 13 000141   202065 756100                    STQ     INDX1,,AUTO

      188    10932    1       CALL VMD$PUT_BODY (0,M$WORK_NUM,0,INDX1,0,VM_BODYREC) ALTRET(E_PMME);

  10932 13 000142   000026 237000 14                 LDAQ    22
        13 000143   202100 757100                    STAQ    APPEND_REPLY+7,,AUTO
        13 000144   202065 630500                    EPPR0   INDX1,,AUTO
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:52   
        13 000145   202077 450500                    STP0    APPEND_REPLY+6,,AUTO
        13 000146   000026 236000 14                 LDQ     22
        13 000147   202076 756100                    STQ     APPEND_REPLY+5,,AUTO
        13 000150   000030 237000 14                 LDAQ    24
        13 000151   202074 757100                    STAQ    APPEND_REPLY+3,,AUTO
        13 000152   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
        13 000153   000024 631400 14                 EPPR1   20
        13 000154   000000 701000 xent               TSX1    VMD$PUT_BODY
        13 000155   000165 702000 13                 TSX2    E_PMME

      189    10933        /*
      190    10934             ***** Store the subject ...
      191    10935        */
      192    10936    1       CALL STASH_SUBJECT ALTRET(E_ALLOCATE);

  10936 13 000156   001215 701000 13                 TSX1    STASH_SUBJECT
        13 000157   000203 702000 13                 TSX2    E_ALLOCATE

      193    10937        /*
      194    10938             ***** Store the id number of the mailgram being ack'ed.
      195    10939        */
      196    10940    1       CALL STASH_REFERENCE_ID;

  10940 13 000160   001500 701000 13                 TSX1    STASH_REFERENCE_ID
        13 000161   000000 011000                    NOP     0

      197    10941        /*
      198    10942             ***** Store the header ...
      199    10943        */
      200    10944    1       CALL STORE_HEADER ALTRET(E_PMME);

  10944 13 000162   001421 701000 13                 TSX1    STORE_HEADER
        13 000163   000165 702000 13                 TSX2    E_PMME

      201    10945    1       RETURN;

  10945 13 000164   000000 702200 xent               TSX2  ! X66_ARET
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:53   

      202    10946        /**/
      203    10947    1   E_PMME:
      204    10948    1       CALL XUR$ERRMSG (B$TCB.ALT$ -> B$ALT.ERR);

  10948 13 000165   000000 470400 xsym  E_PMME       LDP0    B$TCB$
        13 000166   000000 471500                    LDP1    0,,PR0
        13 000167   100102 633500                    EPPR3   66,,PR1
        13 000170   202074 453500                    STP3    APPEND_REPLY+3,,AUTO
        13 000171   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
        13 000172   000000 631400 14                 EPPR1   0
        13 000173   000000 701000 xent               TSX1    XUR$ERRMSG
        13 000174   000000 011000                    NOP     0

      205    10949    1       ALTRETURN;

  10949 13 000175   000000 702200 xent               TSX2  ! X66_AALT

      206    10950    1   E_TO:
      207    10951    1       CALL XUR$ERRMSG (E_CANTANS);

  10951 13 000176   000025 630400 14    E_TO         EPPR0   21
        13 000177   000000 631400 14                 EPPR1   0
        13 000200   000000 701000 xent               TSX1    XUR$ERRMSG
        13 000201   000000 011000                    NOP     0

      208    10952    1       ALTRETURN;

  10952 13 000202   000000 702200 xent               TSX2  ! X66_AALT

      209    10953        /**/
      210    10954    1   E_ALLOCATE:
      211    10955    1       CALL XUR$ERRMSG (MCB.ERR);

  10955 13 000203   200016 630500       E_ALLOCATE   EPPR0   MCB+8,,AUTO
        13 000204   202074 450500                    STP0    APPEND_REPLY+3,,AUTO
        13 000205   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:54   
        13 000206   000000 631400 14                 EPPR1   0
        13 000207   000000 701000 xent               TSX1    XUR$ERRMSG
        13 000210   000000 011000                    NOP     0

      212    10956    1       ALTRETURN;

  10956 13 000211   000000 702200 xent               TSX2  ! X66_AALT

      213    10957        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:55   
      214    10958        /*********************************************************************/
      215    10959        /*F*    NAME: VME$ANSWER
      216    10960                PURPOSE:
      217    10961                      To return an ANSWER message.
      218    10962                DESCRIPTION:
      219    10963                      This routine will return a message to the sender
      220    10964                      and optionally receivers of the message. The body
      221    10965                      of the message will be supplied by the current user.
      222    10966                      This routine has the following parameters.
      223    10967                         MESSAGE_NUMBER - unused.
      224    10968                         USER_NAME - textc name of this user.
      225    10969                         VM_SEARCH_INFO - used for resolving addresses.
      226    10970                         RECEIVER# - Message to all receivers as well as sender?
      227    10971        */
      228    10972        /*********************************************************************/
      229    10973    1   VME$ANSWER: ENTRY (MESSAGE_NUMBER,USER_NAME,RECEIVER#) ALTRET;

  10973 13 000212   000000 700200 xent  VME$ANSWER   TSX0  ! X66_AUTO_3
        13 000213   002102 000003                    ZERO    1090,3

      230    10974        /*
      231    10975             ***** Save the important info ...
      232    10976        */
      233    10977    1       CALL SAVE_COMMON_INFO;

  10977 13 000214   000776 701000 13                 TSX1    SAVE_COMMON_INFO
        13 000215   000000 011000                    NOP     0

      234    10978    1       IF VM_HEADER.TO$ ~= ADDR(NIL)

  10978 13 000216   000000 470400 xsym               LDP0    VM_HEADER$
        13 000217   000031 236100                    LDQ     25,,PR0
        13 000220   000032 116000 14                 CMPQ    26
        13 000221   000237 600000 13                 TZE     s:10985

      235    10979    1       THEN
      236    10980    2       DO;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:56   

      237    10981    2           TO_TEXT.L# = VM_HEADER.TO$ ->X$STRING.SIZ;

  10981 13 000222   000031 471500                    LDP1    25,,PR0
        13 000223   000100 100500                    MLR     fill='000'O
        13 000224   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 000225   201422 000001                    ADSC9   TO_TEXT,,AUTO            cn=0,n=1

      238    10982    2           TO_TEXT.NAME# = VM_HEADER.TO$ ->X$STRING.TEXT;

  10982 13 000226   000031 471500                    LDP1    25,,PR0
        13 000227   000100 101500                    MRL     fill='000'O
        13 000230   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 000231   202074 000002                    ADSC9   APPEND_REPLY+3,,AUTO     cn=0,n=2
        13 000232   202074 220100                    LDX0    APPEND_REPLY+3,,AUTO
        13 000233   040100 100540                    MLR     fill='040'O
        13 000234   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
        13 000235   201422 200777                    ADSC9   TO_TEXT,,AUTO            cn=1,n=511

      239    10983    2       END;

  10983 13 000236   000241 710000 13                 TRA     s:10986

      240    10984    1       ELSE
      241    10985    1           TO_TEXT.L# = 0;

  10985 13 000237   000000 236003                    LDQ     0,DU
        13 000240   201422 552140                    STBQ    TO_TEXT,'40'O,AUTO

      242    10986    1       IF VM_HEADER.BLIND$ ~= ADDR(NIL)

  10986 13 000241   000020 236100                    LDQ     16,,PR0
        13 000242   000032 116000 14                 CMPQ    26
        13 000243   000260 600000 13                 TZE     s:10993

      243    10987    1       THEN
      244    10988    2       DO;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:57   

      245    10989    2           BLIND_TEXT.L# = VM_HEADER.BLIND$->X$STRING.SIZ;

  10989 13 000244   000020 471500                    LDP1    16,,PR0
        13 000245   000100 100500                    MLR     fill='000'O
        13 000246   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 000247   200222 000001                    ADSC9   BLIND_TEXT,,AUTO         cn=0,n=1

      246    10990    2           BLIND_TEXT.NAME# = VM_HEADER.BLIND$->X$STRING.TEXT;

  10990 13 000250   000100 101500                    MRL     fill='000'O
        13 000251   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 000252   202074 000002                    ADSC9   APPEND_REPLY+3,,AUTO     cn=0,n=2
        13 000253   202074 220100                    LDX0    APPEND_REPLY+3,,AUTO
        13 000254   040100 100540                    MLR     fill='040'O
        13 000255   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
        13 000256   200222 200777                    ADSC9   BLIND_TEXT,,AUTO         cn=1,n=511

      247    10991    2       END;

  10991 13 000257   000262 710000 13                 TRA     s:10994

      248    10992    1       ELSE
      249    10993    1           BLIND_TEXT.L# = 0;

  10993 13 000260   000000 236003                    LDQ     0,DU
        13 000261   200222 552140                    STBQ    BLIND_TEXT,'40'O,AUTO

      250    10994    1       IF VM_HEADER.COPY$ ~= ADDR(NIL)

  10994 13 000262   000021 236100                    LDQ     17,,PR0
        13 000263   000032 116000 14                 CMPQ    26
        13 000264   000301 600000 13                 TZE     s:11001

      251    10995    1       THEN
      252    10996    2       DO;

PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:58   
      253    10997    2           COPY_TEXT.L# = VM_HEADER.COPY$->X$STRING.SIZ;

  10997 13 000265   000021 471500                    LDP1    17,,PR0
        13 000266   000100 100500                    MLR     fill='000'O
        13 000267   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 000270   200422 000001                    ADSC9   COPY_TEXT,,AUTO          cn=0,n=1

      254    10998    2           COPY_TEXT.NAME# = VM_HEADER.COPY$->X$STRING.TEXT;

  10998 13 000271   000100 101500                    MRL     fill='000'O
        13 000272   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 000273   202074 000002                    ADSC9   APPEND_REPLY+3,,AUTO     cn=0,n=2
        13 000274   202074 220100                    LDX0    APPEND_REPLY+3,,AUTO
        13 000275   040100 100540                    MLR     fill='040'O
        13 000276   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
        13 000277   200422 200777                    ADSC9   COPY_TEXT,,AUTO          cn=1,n=511

      255    10999    2       END;

  10999 13 000300   000303 710000 13                 TRA     s:11005

      256    11000    1       ELSE
      257    11001    1           COPY_TEXT.L# = 0;

  11001 13 000301   000000 236003                    LDQ     0,DU
        13 000302   200422 552140                    STBQ    COPY_TEXT,'40'O,AUTO

      258    11002        /*
      259    11003             ***** Reinitialize VM_HEADER ...
      260    11004        */
      261    11005    1       CALL SETUP_HEADER;

  11005 13 000303   001163 701000 13                 TSX1    SETUP_HEADER
        13 000304   000000 011000                    NOP     0

      262    11006    1       VM_HEADER.STATUS.ANSWER = %YES#;

PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:59   
  11006 13 000305   000000 470400 xsym               LDP0    VM_HEADER$
        13 000306   200000 236003                    LDQ     65536,DU
        13 000307   000012 256100                    ORSQ    10,,PR0

      263    11007        /*
      264    11008             ***** Get the reply-to record. Note this record began its existence
      265    11009             ***** in A02 so non-existence means pre-A02 mailbox.
      266    11010        */
      267    11011    1       CALL VMA$GET_ADD_RECORD (%VM_TYPE_RTO,VM_ADDLIST_,M$MAIL_FILE_NUM,

  11011 13 000310   200003 236100                    LDQ     @MESSAGE_NUMBER,,AUTO
        13 000311   000004 235000 14                 LDA     4
        13 000312   202076 757100                    STAQ    APPEND_REPLY+5,,AUTO
        13 000313   000006 237000 14                 LDAQ    6
        13 000314   202074 757100                    STAQ    APPEND_REPLY+3,,AUTO
        13 000315   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
        13 000316   000002 631400 14                 EPPR1   2
        13 000317   000000 701000 xent               TSX1    VMA$GET_ADD_RECORD
        13 000320   000322 702000 13                 TSX2    s:11015
        13 000321   000335 710000 13                 TRA     s:11030

      268    11012    1         MESSAGE_NUMBER)
      269    11013    1       WHENALTRETURN
      270    11014    2       DO;

      271    11015    2           IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$NOKEY

  11015 13 000322   000000 470400 xsym               LDP0    B$TCB$
        13 000323   000000 471500                    LDP1    0,,PR0
        13 000324   100102 236100                    LDQ     66,,PR1
        13 000325   377770 376007                    ANQ     131064,DL
        13 000326   001020 116007                    CMPQ    528,DL
        13 000327   000335 601000 13                 TNZ     s:11030

      272    11016    2           THEN
      273    11017    3           DO;

PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:60   
      274    11018        /*
      275    11019                  ***** Can't find a reply-to record so create one.
      276    11020                  ***** Convert the REPLY_TO text into an address entry ...
      277    11021        */
      278    11022    3               TO_TEXT = REPLY_TEXT;

  11022 13 000330   000100 100500                    MLR     fill='000'O
        13 000331   201022 001000                    ADSC9   REPLY_TEXT,,AUTO         cn=0,n=512
        13 000332   201422 001000                    ADSC9   TO_TEXT,,AUTO            cn=0,n=512

      279    11023    3               CALL CREATE_TO_ADDRESS ALTRET(E_TO);

  11023 13 000333   000710 701000 13                 TSX1    CREATE_TO_ADDRESS
        13 000334   000176 702000 13                 TSX2    E_TO

      280    11024    3           END;

      281    11025    2       END;

      282    11026        /*
      283    11027             ***** If receivers specified, need the original to list and append
      284    11028             ***** it to the new to list.
      285    11029        */
      286    11030    1       IF RECEIVER#

  11030 13 000335   200005 470500                    LDP0    @RECEIVER#,,AUTO
        13 000336   000000 066500                    CMPB    filb='0'B
        13 000337   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
        13 000340   000015 000022 14                 BDSC    13                       by=0,bit=0,n=18
        13 000341   000536 600000 13                 TZE     END_RECEIVER

      287    11031    1       THEN
      288    11032    2       DO;

      289    11033    2           CALL VMA$GET_ADD_RECORD (%VM_TYPE_TO,VM_WORK_,

  11033 13 000342   200003 236100                    LDQ     @MESSAGE_NUMBER,,AUTO
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:61   
        13 000343   000004 235000 14                 LDA     4
        13 000344   202076 757100                    STAQ    APPEND_REPLY+5,,AUTO
        13 000345   000034 237000 14                 LDAQ    28
        13 000346   202074 757100                    STAQ    APPEND_REPLY+3,,AUTO
        13 000347   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
        13 000350   000002 631400 14                 EPPR1   2
        13 000351   000000 701000 xent               TSX1    VMA$GET_ADD_RECORD
        13 000352   000176 702000 13                 TSX2    E_TO

      290    11034    2             M$MAIL_FILE_NUM,MESSAGE_NUMBER) ALTRET (E_TO);
      291    11035        /*
      292    11036                ****** See if ReplyTo list is a subset of the To list; if so, the
      293    11037                       ReplyTo text doesn't need to be appended to the To text.
      294    11038        */
      295    11039    2           OUT$ = VM_ADD_HEAD.HEAD$;

  11039 13 000353   000000 470400 xsym               LDP0    VM_ADDLIST$
        13 000354   000003 236100                    LDQ     3,,PR0
        13 000355   200017 756100                    STQ     OUT$,,AUTO

      296    11040    2           APPEND_REPLY = %NO#;

  11040 13 000356   202071 450100                    STZ     APPEND_REPLY,,AUTO

      297    11041    3           DO FOREVER;

  11034 13 000357                       NEXT_RTO     null
      298    11042    3   NEXT_RTO:   ;
      299    11043    3               CALL VMA$GET_NEXT_ENTRY (VM_UADDRESS, VM_RADDRESS, OUT$,

  11043 13 000357   000036 236000 14                 LDQ     30
        13 000360   202077 756100                    STQ     APPEND_REPLY+6,,AUTO
        13 000361   200017 630500                    EPPR0   OUT$,,AUTO
        13 000362   202076 450500                    STP0    APPEND_REPLY+5,,AUTO
        13 000363   000040 237000 14                 LDAQ    32
        13 000364   202074 757100                    STAQ    APPEND_REPLY+3,,AUTO
        13 000365   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:62   
        13 000366   000002 631400 14                 EPPR1   2
        13 000367   000000 701000 xent               TSX1    VMA$GET_NEXT_ENTRY
        13 000370   000470 702000 13                 TSX2    END_RTO

      300    11044    3                 VM_ADDLIST$) ALTRET(END_RTO);
      301    11045    3               OUT1$ = VM_WORK$ -> VM_ADD_HEAD.HEAD$;

  11045 13 000371   000000 470400 xsym               LDP0    VM_WORK$
        13 000372   000003 236100                    LDQ     3,,PR0
        13 000373   200020 756100                    STQ     OUT1$,,AUTO

      302    11046    4               DO FOREVER;

      303    11047    4                   CALL VMA$GET_NEXT_ENTRY (VM_UADDRESS1, VM_RADDRESS1, OUT1$,

  11047 13 000374   000042 236000 14                 LDQ     34
        13 000375   202077 756100                    STQ     APPEND_REPLY+6,,AUTO
        13 000376   200020 630500                    EPPR0   OUT1$,,AUTO
        13 000377   202076 450500                    STP0    APPEND_REPLY+5,,AUTO
        13 000400   000044 237000 14                 LDAQ    36
        13 000401   202074 757100                    STAQ    APPEND_REPLY+3,,AUTO
        13 000402   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
        13 000403   000002 631400 14                 EPPR1   2
        13 000404   000000 701000 xent               TSX1    VMA$GET_NEXT_ENTRY
        13 000405   000465 702000 13                 TSX2    END_TO

      304    11048    4                     VM_WORK$) ALTRET(END_TO);
      305    11049    4                   IF (VM_RADDRESS.TYPE = %VM_ADD_RESOLVED

  11049 13 000406   000117 236000 11                 LDQ     VM_RADDRESS+2
        13 000407   000777 376003                    ANQ     511,DU
        13 000410   000001 116003                    CMPQ    1,DU
        13 000411   000432 601000 13                 TNZ     s:11049+20
        13 000412   000353 236000 11                 LDQ     VM_RADDRESS1+2
        13 000413   000777 376003                    ANQ     511,DU
        13 000414   000001 116003                    CMPQ    1,DU
        13 000415   000432 601000 13                 TNZ     s:11049+20
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:63   
        13 000416   040000 106400                    CMPC    fill='040'O
        13 000417   000372 600010 11                 ADSC9   VM_RADDRESS1+17          cn=3,n=8
        13 000420   000136 600010 11                 ADSC9   VM_RADDRESS+17           cn=3,n=8
        13 000421   000432 601000 13                 TNZ     s:11049+20
        13 000422   040000 106400                    CMPC    fill='040'O
        13 000423   000360 400031 11                 ADSC9   VM_RADDRESS1+7           cn=2,n=25
        13 000424   000124 400031 11                 ADSC9   VM_RADDRESS+7            cn=2,n=25
        13 000425   000432 601000 13                 TNZ     s:11049+20
        13 000426   040000 106400                    CMPC    fill='040'O
        13 000427   000370 600010 11                 ADSC9   VM_RADDRESS1+15          cn=3,n=8
        13 000430   000134 600010 11                 ADSC9   VM_RADDRESS+15           cn=3,n=8
        13 000431   000357 600000 13                 TZE     NEXT_RTO
        13 000432   000143 236000 11                 LDQ     VM_UADDRESS+2
        13 000433   000777 376003                    ANQ     511,DU
        13 000434   000002 116003                    CMPQ    2,DU
        13 000435   000464 601000 13                 TNZ     s:11062
        13 000436   000247 236000 11                 LDQ     VM_UADDRESS1+2
        13 000437   000777 376003                    ANQ     511,DU
        13 000440   000002 116003                    CMPQ    2,DU
        13 000441   000464 601000 13                 TNZ     s:11062
        13 000442   040000 106400                    CMPC    fill='040'O
        13 000443   000254 400031 11                 ADSC9   VM_UADDRESS1+7           cn=2,n=25
        13 000444   000150 400031 11                 ADSC9   VM_UADDRESS+7            cn=2,n=25
        13 000445   000464 601000 13                 TNZ     s:11062
        13 000446   040000 106400                    CMPC    fill='040'O
        13 000447   000264 600010 11                 ADSC9   VM_UADDRESS1+15          cn=3,n=8
        13 000450   000160 600010 11                 ADSC9   VM_UADDRESS+15           cn=3,n=8
        13 000451   000464 601000 13                 TNZ     s:11062
        13 000452   000266 720000 11                 LXL0    VM_UADDRESS1+17
        13 000453   000777 360003                    ANX0    511,DU
        13 000454   000001 621010                    EAX1    1,X0
        13 000455   000162 720000 11                 LXL0    VM_UADDRESS+17
        13 000456   000777 360003                    ANX0    511,DU
        13 000457   000001 622010                    EAX2    1,X0
        13 000460   000040 106440                    CMPC    fill='000'O
        13 000461   000266 600011 11                 ADSC9   VM_UADDRESS1+17          cn=3,n=*X1
        13 000462   000162 600012 11                 ADSC9   VM_UADDRESS+17           cn=3,n=*X2
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:64   
        13 000463   000357 600000 13                 TZE     NEXT_RTO

      306    11050    4                     AND VM_RADDRESS1.TYPE = %VM_ADD_RESOLVED
      307    11051    4                     AND VM_RADDRESS1.ACCT = VM_RADDRESS.ACCT
      308    11052    4                     AND VM_RADDRESS1.FOLDER = VM_RADDRESS.FOLDER
      309    11053    4                     AND VM_RADDRESS1.SITENAME = VM_RADDRESS.SITENAME)
      310    11054    4                     OR (VM_UADDRESS.TYPE = %VM_ADD_UNRESOLVED
      311    11055    4                     AND VM_UADDRESS1.TYPE = %VM_ADD_UNRESOLVED
      312    11056    4                     AND VM_UADDRESS1.FOLDER = VM_UADDRESS.FOLDER
      313    11057    4                     AND VM_UADDRESS1.SITENAME = VM_UADDRESS.SITENAME
      314    11058    4                     AND ADDR(VM_UADDRESS1.USER_NAME) -> X$STRING =
      315    11059    4                     ADDR(VM_UADDRESS.USER_NAME) -> X$STRING)
      316    11060    4                   THEN
      317    11061    4                       GOTO NEXT_RTO;
      318    11062    4               END;

  11062 13 000464   000374 710000 13                 TRA     s:11047

  11059 13 000465                       END_TO       null
      319    11063    3   END_TO:     ;
      320    11064    3               APPEND_REPLY = %YES#;

  11064 13 000465   400000 236003                    LDQ     -131072,DU
        13 000466   202071 756100                    STQ     APPEND_REPLY,,AUTO

      321    11065    3               GOTO END_RTO;

  11065 13 000467   000470 710000 13                 TRA     END_RTO

      322    11066    3           END;

  11065 13 000470                       END_RTO      null
      323    11067    2   END_RTO: ;
      324    11068    2           IF APPEND_REPLY

  11068 13 000470   202071 234100                    SZN     APPEND_REPLY,,AUTO
        13 000471   000525 605000 13                 TPL     s:11086
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:65   

      325    11069    3           THEN DO;

      326    11070    3               OUT$ = VM_WORK$ -> VM_ADD_HEAD.HEAD$;

  11070 13 000472   000000 470400 xsym               LDP0    VM_WORK$
        13 000473   000003 236100                    LDQ     3,,PR0
        13 000474   200017 756100                    STQ     OUT$,,AUTO

      327    11071    4               DO FOREVER;

      328    11072    4                   CALL VMA$GET_NEXT_ENTRY (VM_UADDRESS,VM_RADDRESS,

  11072 13 000475   000042 236000 14                 LDQ     34
        13 000476   202077 756100                    STQ     APPEND_REPLY+6,,AUTO
        13 000477   200017 630500                    EPPR0   OUT$,,AUTO
        13 000500   202076 450500                    STP0    APPEND_REPLY+5,,AUTO
        13 000501   000040 237000 14                 LDAQ    32
        13 000502   202074 757100                    STAQ    APPEND_REPLY+3,,AUTO
        13 000503   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
        13 000504   000002 631400 14                 EPPR1   2
        13 000505   000000 701000 xent               TSX1    VMA$GET_NEXT_ENTRY
        13 000506   000536 702000 13                 TSX2    END_RECEIVER

      329    11073    4                     OUT$,VM_WORK$)  ALTRET(END_RECEIVER);
      330    11074    4                   IF VM_RADDRESS.TYPE = %VM_ADD_RESOLVED

  11074 13 000507   000117 236000 11                 LDQ     VM_RADDRESS+2
        13 000510   000777 376003                    ANQ     511,DU
        13 000511   000001 116003                    CMPQ    1,DU
        13 000512   000520 601000 13                 TNZ     s:11080

      331    11075    4                   THEN
      332    11076    4                       CALL VMA$ADD_RENTRY (VM_RADDRESS.ACCT,

  11076 13 000513   000046 630400 14                 EPPR0   38
        13 000514   000002 631400 14                 EPPR1   2
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:66   
        13 000515   000000 701000 xent               TSX1    VMA$ADD_RENTRY
        13 000516   000165 702000 13                 TSX2    E_PMME
        13 000517   000475 710000 13                 TRA     s:11072

      333    11077    4                         VM_RADDRESS.FOLDER,VM_RADDRESS.PASS,
      334    11078    4                         VM_RADDRESS.SITENAME) ALTRET(E_PMME);
      335    11079    4                   ELSE
      336    11080    4                       CALL VMA$ADD_UENTRY (VM_UADDRESS.USER_NAME,

  11080 13 000520   000052 630400 14                 EPPR0   42
        13 000521   000002 631400 14                 EPPR1   2
        13 000522   000000 701000 xent               TSX1    VMA$ADD_UENTRY
        13 000523   000165 702000 13                 TSX2    E_PMME

      337    11081    4                         VM_RADDRESS.FOLDER,VM_RADDRESS.PASS,
      338    11082    4                         VM_RADDRESS.SITENAME) ALTRET(E_PMME);
      339    11083    4               END;

  11083 13 000524   000475 710000 13                 TRA     s:11072

      340    11084    3           END;
      341    11085    3           ELSE DO;

      342    11086    3               CALL VMA$GET_ADD_RECORD (%VM_TYPE_TO, VM_ADDLIST_,

  11086 13 000525   200003 236100                    LDQ     @MESSAGE_NUMBER,,AUTO
        13 000526   000004 235000 14                 LDA     4
        13 000527   202076 757100                    STAQ    APPEND_REPLY+5,,AUTO
        13 000530   000012 237000 14                 LDAQ    10
        13 000531   202074 757100                    STAQ    APPEND_REPLY+3,,AUTO
        13 000532   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
        13 000533   000002 631400 14                 EPPR1   2
        13 000534   000000 701000 xent               TSX1    VMA$GET_ADD_RECORD
        13 000535   000165 702000 13                 TSX2    E_PMME

      343    11087    3                 M$MAIL_FILE_NUM, MESSAGE_NUMBER) ALTRET(E_PMME);
      344    11088    3           END;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:67   

      345    11089    2       END;

      346    11090    1   END_RECEIVER:
      347    11091    1       CALL VMA$PUT_ADD_RECORD (%VM_TYPE_TO,VM_ADDLIST_,M$WORK_NUM) ALTRET(E_PMME);

  11091 13 000536   000012 630400 14    END_RECEIVER EPPR0   10
        13 000537   000010 631400 14                 EPPR1   8
        13 000540   000000 701000 xent               TSX1    VMA$PUT_ADD_RECORD
        13 000541   000165 702000 13                 TSX2    E_PMME

      348    11092        /*
      349    11093             ***** Create the To field ...
      350    11094        */
      351    11095    1       IF RECEIVER#

  11095 13 000542   200005 470500                    LDP0    @RECEIVER#,,AUTO
        13 000543   000000 066500                    CMPB    filb='0'B
        13 000544   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
        13 000545   000015 000022 14                 BDSC    13                       by=0,bit=0,n=18
        13 000546   000604 600000 13                 TZE     s:11104

      352    11096    2       THEN DO;

      353    11097    2           IF APPEND_REPLY

  11097 13 000547   202071 234100                    SZN     APPEND_REPLY,,AUTO
        13 000550   000607 605000 13                 TPL     s:11106

      354    11098    3           THEN DO;

      355    11099    3               CALL INSERT (TO_TEXT.NAME#,TO_TEXT.L#,,', ',REPLY_TEXT.NAME#);

  11099 13 000551   201422 236100                    LDQ     TO_TEXT,,AUTO
        13 000552   000033 772000                    QRL     27
        13 000553   777000 620006                    EAX0    -512,QL
        13 000554   777777 660003                    ERX0    -1,DU
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:68   
        13 000555   040146 100400                    MLR     fill='040'O
        13 000556   000052 000002 12                 ADSC9   E_MSG_ACKED+1            cn=0,n=2
        13 000557   201422 200010                    ADSC9   TO_TEXT,Q,AUTO           cn=1,n=*X0
        13 000560   202074 756100                    STQ     APPEND_REPLY+3,,AUTO
        13 000561   000000 636010                    EAQ     0,X0
        13 000562   000022 772000                    QRL     18
        13 000563   000003 116007                    CMPQ    3,DL
        13 000564   000572 602000 13                 TNC     s:11100
        13 000565   777776 621010                    EAX1    -2,X0
        13 000566   202074 235100                    LDA     APPEND_REPLY+3,,AUTO
        13 000567   040145 100500                    MLR     fill='040'O
        13 000570   201022 200777                    ADSC9   REPLY_TEXT,,AUTO         cn=1,n=511
        13 000571   201422 600011                    ADSC9   TO_TEXT,A,AUTO           cn=3,n=*X1

      356    11100    3               TO_TEXT.L# = TO_TEXT.L# + REPLY_TEXT.L# + LENGTHC(', ');

  11100 13 000572   201022 236100                    LDQ     REPLY_TEXT,,AUTO
        13 000573   000033 772000                    QRL     27
        13 000574   202074 756100                    STQ     APPEND_REPLY+3,,AUTO
        13 000575   201422 236100                    LDQ     TO_TEXT,,AUTO
        13 000576   000033 772000                    QRL     27
        13 000577   202074 036100                    ADLQ    APPEND_REPLY+3,,AUTO
        13 000600   000002 036007                    ADLQ    2,DL
        13 000601   000033 736000                    QLS     27
        13 000602   201422 552140                    STBQ    TO_TEXT,'40'O,AUTO

      357    11101    3           END;

      358    11102    2       END;

  11102 13 000603   000607 710000 13                 TRA     s:11106

      359    11103    2       ELSE DO;

      360    11104    2           TO_TEXT = REPLY_TEXT;

  11104 13 000604   000100 100500                    MLR     fill='000'O
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:69   
        13 000605   201022 001000                    ADSC9   REPLY_TEXT,,AUTO         cn=0,n=512
        13 000606   201422 001000                    ADSC9   TO_TEXT,,AUTO            cn=0,n=512

      361    11105    2       END;

      362    11106    1       CALL STASH_TO ALTRET(E_ALLOCATE);

  11106 13 000607   001256 701000 13                 TSX1    STASH_TO
        13 000610   000203 702000 13                 TSX2    E_ALLOCATE

      363    11107        /**/
      364    11108    1       IF RECEIVER#

  11108 13 000611   200005 470500                    LDP0    @RECEIVER#,,AUTO
        13 000612   000000 066500                    CMPB    filb='0'B
        13 000613   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
        13 000614   000015 000022 14                 BDSC    13                       by=0,bit=0,n=18
        13 000615   000640 600000 13                 TZE     s:11118
        13 000616   200222 236100                    LDQ     BLIND_TEXT,,AUTO
        13 000617   777000 316003                    CANQ    -512,DU
        13 000620   000640 600000 13                 TZE     s:11118

      365    11109    1         AND BLIND_TEXT.L# ~= 0
      366    11110    1       THEN
      367    11111    2       DO;

      368    11112    2           CALL STASH_BLIND ALTRET(E_ALLOCATE);

  11112 13 000621   001317 701000 13                 TSX1    STASH_BLIND
        13 000622   000203 702000 13                 TSX2    E_ALLOCATE

      369    11113    2           CALL VMA$GET_ADD_RECORD (%VM_TYPE_BC,VM_ADDLIST_,

  11113 13 000623   200003 236100                    LDQ     @MESSAGE_NUMBER,,AUTO
        13 000624   000004 235000 14                 LDA     4
        13 000625   202076 757100                    STAQ    APPEND_REPLY+5,,AUTO
        13 000626   000060 237000 14                 LDAQ    48
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:70   
        13 000627   202074 757100                    STAQ    APPEND_REPLY+3,,AUTO
        13 000630   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
        13 000631   000002 631400 14                 EPPR1   2
        13 000632   000000 701000 xent               TSX1    VMA$GET_ADD_RECORD
        13 000633   000176 702000 13                 TSX2    E_TO

      370    11114    2             M$MAIL_FILE_NUM,MESSAGE_NUMBER) ALTRET (E_TO);
      371    11115    2          CALL VMA$PUT_ADD_RECORD (%VM_TYPE_BC,VM_ADDLIST_,M$WORK_NUM) ALTRET(E_PMME);

  11115 13 000634   000062 630400 14                 EPPR0   50
        13 000635   000010 631400 14                 EPPR1   8
        13 000636   000000 701000 xent               TSX1    VMA$PUT_ADD_RECORD
        13 000637   000165 702000 13                 TSX2    E_PMME

      372    11116    2       END;

      373    11117        /**/
      374    11118    1       IF RECEIVER#

  11118 13 000640   200005 470500                    LDP0    @RECEIVER#,,AUTO
        13 000641   000000 066500                    CMPB    filb='0'B
        13 000642   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
        13 000643   000015 000022 14                 BDSC    13                       by=0,bit=0,n=18
        13 000644   000667 600000 13                 TZE     s:11127
        13 000645   200422 236100                    LDQ     COPY_TEXT,,AUTO
        13 000646   777000 316003                    CANQ    -512,DU
        13 000647   000667 600000 13                 TZE     s:11127

      375    11119    1         AND COPY_TEXT.L# ~= 0
      376    11120    1       THEN
      377    11121    2       DO;

      378    11122    2           CALL STASH_COPY ALTRET(E_ALLOCATE);

  11122 13 000650   001360 701000 13                 TSX1    STASH_COPY
        13 000651   000203 702000 13                 TSX2    E_ALLOCATE

PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:71   
      379    11123    2           CALL VMA$GET_ADD_RECORD (%VM_TYPE_C,VM_ADDLIST_,

  11123 13 000652   200003 236100                    LDQ     @MESSAGE_NUMBER,,AUTO
        13 000653   000004 235000 14                 LDA     4
        13 000654   202076 757100                    STAQ    APPEND_REPLY+5,,AUTO
        13 000655   000066 237000 14                 LDAQ    54
        13 000656   202074 757100                    STAQ    APPEND_REPLY+3,,AUTO
        13 000657   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
        13 000660   000002 631400 14                 EPPR1   2
        13 000661   000000 701000 xent               TSX1    VMA$GET_ADD_RECORD
        13 000662   000176 702000 13                 TSX2    E_TO

      380    11124    2             M$MAIL_FILE_NUM,MESSAGE_NUMBER) ALTRET (E_TO);
      381    11125    2           CALL VMA$PUT_ADD_RECORD (%VM_TYPE_C,VM_ADDLIST_,M$WORK_NUM) ALTRET(E_PMME);

  11125 13 000663   000070 630400 14                 EPPR0   56
        13 000664   000010 631400 14                 EPPR1   8
        13 000665   000000 701000 xent               TSX1    VMA$PUT_ADD_RECORD
        13 000666   000165 702000 13                 TSX2    E_PMME

      382    11126    2       END;

      383    11127    1       IF RECEIVER#

  11127 13 000667   200005 470500                    LDP0    @RECEIVER#,,AUTO
        13 000670   000000 066500                    CMPB    filb='0'B
        13 000671   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
        13 000672   000015 000022 14                 BDSC    13                       by=0,bit=0,n=18
        13 000673   000677 600000 13                 TZE     s:11130

      384    11128    1       THEN
      385    11129    1           VM_HEADER.STATUS.ANS_TO = %YES#;

  11129 13 000674   000000 471400 xsym               LDP1    VM_HEADER$
        13 000675   000010 236003                    LDQ     8,DU
        13 000676   100012 256100                    ORSQ    10,,PR1

PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:72   
      386    11130    1       CALL STASH_SUBJECT;

  11130 13 000677   001215 701000 13                 TSX1    STASH_SUBJECT
        13 000700   000000 011000                    NOP     0

      387    11131        /*
      388    11132             ***** Stash the subject in the reference field ...
      389    11133        */
      390    11134    1       CALL STASH_REFERENCE;

  11134 13 000701   001437 701000 13                 TSX1    STASH_REFERENCE
        13 000702   000000 011000                    NOP     0

      391    11135        /*
      392    11136             ***** Store the id number of the mailgram being ack'ed.
      393    11137        */
      394    11138    1       CALL STASH_REFERENCE_ID;

  11138 13 000703   001500 701000 13                 TSX1    STASH_REFERENCE_ID
        13 000704   000000 011000                    NOP     0

      395    11139
      396    11140        /*
      397    11141             ***** Store the header ...
      398    11142        */
      399    11143    1       CALL STORE_HEADER ALTRET(E_PMME);

  11143 13 000705   001421 701000 13                 TSX1    STORE_HEADER
        13 000706   000165 702000 13                 TSX2    E_PMME

      400    11144    1       RETURN;

  11144 13 000707   000000 702200 xent               TSX2  ! X66_ARET

      401    11145        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:73   
      402    11146        /*I*
      403    11147             NAME: CREATE_TO_ADDRESS
      404    11148             PURPOSE:
      405    11149                   To convert TO_TEXT into a single address entry.
      406    11150        */
      407    11151    1   CREATE_TO_ADDRESS: PROC ALTRET;

  11151 13 000710   202072 741300       CREATE_TO_A* STX1  ! APPEND_REPLY+1,,AUTO

      408    11152        /*
      409    11153             ***** Parse TO_TEXT ...
      410    11154        */
      411    11155    2       INDX1 = TO_TEXT.L#;

  11155 13 000711   201422 236100                    LDQ     TO_TEXT,,AUTO
        13 000712   000033 772000                    QRL     27
        13 000713   202065 756100                    STQ     INDX1,,AUTO

      412    11156    2       CALL XUR$GETCMD (ADDRESS_SPEC,OUT$,,TO_TEXT.NAME#,INDX1)

  11156 13 000714   202065 630500                    EPPR0   INDX1,,AUTO
        13 000715   202100 450500                    STP0    APPEND_REPLY+7,,AUTO
        13 000716   202101 452500                    STP2    APPEND_REPLY+8,,AUTO
        13 000717   202101 236100                    LDQ     APPEND_REPLY+8,,AUTO
        13 000720   000074 036000 14                 ADLQ    60
        13 000721   000032 235000 14                 LDA     26
        13 000722   202076 757100                    STAQ    APPEND_REPLY+5,,AUTO
        13 000723   200017 631500                    EPPR1   OUT$,,AUTO
        13 000724   202075 451500                    STP1    APPEND_REPLY+4,,AUTO
        13 000725   000000 236000 xsym               LDQ     VM_ADDRESS_SPEC$
        13 000726   202074 756100                    STQ     APPEND_REPLY+3,,AUTO
        13 000727   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
        13 000730   000073 631400 14                 EPPR1   59
        13 000731   000000 701000 xent               TSX1    XUR$GETCMD
        13 000732   000734 702000 13                 TSX2    s:11159
        13 000733   000736 710000 13                 TRA     s:11164

PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:74   
      413    11157    2       WHENALTRETURN
      414    11158    3       DO;

      415    11159    3           ALTRETURN;

  11159 13 000734   202072 221300                    LDX1  ! APPEND_REPLY+1,,AUTO
        13 000735   000000 702211                    TSX2  ! 0,X1

      416    11160    3       END;
      417    11161        /*
      418    11162             ***** Now convert the parse tree into an address entry ...
      419    11163        */
      420    11164    2       IF DCBADDR(M$MAIL_GLOBAL_NUM) -> F$DCB.FCD#

  11164 13 000736   000075 470400 14                 LDP0    61
        13 000737   000000 471500                    LDP1    0,,PR0
        13 000740   000000 720000 xsym               LXL0    M$MAIL_GLOBAL_NUM
        13 000741   100000 473510                    LDP3    0,X0,PR1
        13 000742   300031 236100                    LDQ     25,,PR3
        13 000743   020000 316007                    CANQ    8192,DL
        13 000744   000752 600000 13                 TZE     s:11171

      421    11165    2       THEN
      422    11166    3       DO;

      423    11167    3           VM_SEARCH_INFO.NUM_ENTRIES = 1;

  11167 13 000745   000001 235007                    LDA     1,DL
        13 000746   202022 755100                    STA     VM_SEARCH_INFO,,AUTO

      424    11168    3           VM_SEARCH_INFO.DCB#(0) = M$MAIL_GLOBAL_NUM;

  11168 13 000747   000000 236000 xsym               LDQ     M$MAIL_GLOBAL_NUM
        13 000750   202023 756100                    STQ     VM_SEARCH_INFO+1,,AUTO

      425    11169    3       END;

PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:75   
  11169 13 000751   000753 710000 13                 TRA     s:11174

      426    11170    2       ELSE
      427    11171    2           VM_SEARCH_INFO.NUM_ENTRIES = 0;

  11171 13 000752   202022 450100                    STZ     VM_SEARCH_INFO,,AUTO

      428    11172                                 /* Make search list look inactive so it will get set up
      429    11173                                    right if needed later */
      430    11174    2       VM_SEARCH_INFO.ACTIVE = '0'B;

  11174 13 000753   000076 236000 14                 LDQ     62
        13 000754   202064 356100                    ANSQ    VM_SEARCH_INFO+34,,AUTO

      431    11175    2       CALL VMA$ADDRESS (OUT$,USER_NAME,VM_SEARCH_INFO,%NO#)

  11175 13 000755   000026 236000 14                 LDQ     22
        13 000756   202077 756100                    STQ     APPEND_REPLY+6,,AUTO
        13 000757   202022 634500                    EPPR4   VM_SEARCH_INFO,,AUTO
        13 000760   202076 454500                    STP4    APPEND_REPLY+5,,AUTO
        13 000761   200004 236100                    LDQ     @USER_NAME,,AUTO
        13 000762   202075 756100                    STQ     APPEND_REPLY+4,,AUTO
        13 000763   200017 635500                    EPPR5   OUT$,,AUTO
        13 000764   202074 455500                    STP5    APPEND_REPLY+3,,AUTO
        13 000765   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
        13 000766   000002 631400 14                 EPPR1   2
        13 000767   000000 701000 xent               TSX1    VMA$ADDRESS
        13 000770   000772 702000 13                 TSX2    s:11179
        13 000771   000774 710000 13                 TRA     s:11181

      432    11176    2       WHENALTRETURN
      433    11177    3       DO;

      434    11178                                                /* Answer impossible */
      435    11179    3           ALTRETURN;

  11179 13 000772   202072 221300                    LDX1  ! APPEND_REPLY+1,,AUTO
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:76   
        13 000773   000000 702211                    TSX2  ! 0,X1

      436    11180    3       END;
      437    11181    2       RETURN;

  11181 13 000774   202072 221300                    LDX1  ! APPEND_REPLY+1,,AUTO
        13 000775   000001 702211                    TSX2  ! 1,X1

      438    11182    2   END CREATE_TO_ADDRESS;
      439    11183        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:77   
      440    11184        /*I*
      441    11185            NAME: SAVE_COMMON_INFO
      442    11186            PURPOSE:
      443    11187                  To save fields common to both ANSWER and ACKNOWLEDGE.
      444    11188                  These are: ReplyTo, Subject, and UniqueId
      445    11189                  Remove the sitename from the ReplyTo field if it is this site.
      446    11190        */
      447    11191    1   SAVE_COMMON_INFO: PROC;

  11191 13 000776   202072 741300       SAVE_COMMON* STX1  ! APPEND_REPLY+1,,AUTO

      448    11192
      449    11193    2       IF VM_HEADER.REPLY_TO$ ~= ADDR(NIL)

  11193 13 000777   000000 470400 xsym               LDP0    VM_HEADER$
        13 001000   000025 236100                    LDQ     21,,PR0
        13 001001   000032 116000 14                 CMPQ    26
        13 001002   001017 600000 13                 TZE     s:11199

      450    11194    3       THEN DO;

      451    11195    3           REPLY_TEXT.L# = VM_HEADER.REPLY_TO$ ->X$STRING.SIZ;

  11195 13 001003   000025 471500                    LDP1    21,,PR0
        13 001004   000100 100500                    MLR     fill='000'O
        13 001005   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 001006   201022 000001                    ADSC9   REPLY_TEXT,,AUTO         cn=0,n=1

      452    11196    3           REPLY_TEXT.NAME# = VM_HEADER.REPLY_TO$ ->X$STRING.TEXT;

  11196 13 001007   000100 101500                    MRL     fill='000'O
        13 001010   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 001011   202074 000002                    ADSC9   APPEND_REPLY+3,,AUTO     cn=0,n=2
        13 001012   202074 220100                    LDX0    APPEND_REPLY+3,,AUTO
        13 001013   040100 100540                    MLR     fill='040'O
        13 001014   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
        13 001015   201022 200777                    ADSC9   REPLY_TEXT,,AUTO         cn=1,n=511
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:78   

      453    11197    3       END;

  11197 13 001016   001040 710000 13                 TRA     s:11207

      454    11198    3       ELSE DO;

      455    11199    3           IF VM_HEADER.FROM$ ~= ADDR(NIL)

  11199 13 001017   000023 236100                    LDQ     19,,PR0
        13 001020   000032 116000 14                 CMPQ    26
        13 001021   001036 600000 13                 TZE     s:11205

      456    11200    4           THEN DO;

      457    11201    4               REPLY_TEXT.L# = VM_HEADER.FROM$ -> X$STRING.SIZ;

  11201 13 001022   000023 471500                    LDP1    19,,PR0
        13 001023   000100 100500                    MLR     fill='000'O
        13 001024   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 001025   201022 000001                    ADSC9   REPLY_TEXT,,AUTO         cn=0,n=1

      458    11202    4               REPLY_TEXT.NAME# = VM_HEADER.FROM$ -> X$STRING.TEXT;

  11202 13 001026   000100 101500                    MRL     fill='000'O
        13 001027   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 001030   202074 000002                    ADSC9   APPEND_REPLY+3,,AUTO     cn=0,n=2
        13 001031   202074 220100                    LDX0    APPEND_REPLY+3,,AUTO
        13 001032   040100 100540                    MLR     fill='040'O
        13 001033   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
        13 001034   201022 200777                    ADSC9   REPLY_TEXT,,AUTO         cn=1,n=511

      459    11203    4           END;

  11203 13 001035   001040 710000 13                 TRA     s:11207

      460    11204    3           ELSE
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:79   
      461    11205    3               REPLY_TEXT.L# = 0;

  11205 13 001036   000000 236003                    LDQ     0,DU
        13 001037   201022 552140                    STBQ    REPLY_TEXT,'40'O,AUTO

      462    11206    3       END;

      463    11207    2       IF REPLY_TEXT.L# > 0

  11207 13 001040   201022 236100                    LDQ     REPLY_TEXT,,AUTO
        13 001041   777000 316003                    CANQ    -512,DU
        13 001042   001116 600000 13                 TZE     s:11225

      464    11208    3       THEN DO;

      465    11209    3           CALL INDEX1R (INDX1, ',', REPLY_TEXT.NAME#)

  11209 13 001043   000000 125500                    SCMR    mask='000'O
        13 001044   201022 200777                    ADSC9   REPLY_TEXT,,AUTO         cn=1,n=511
        13 001045   000077 000001 14                 ADSC9   63                       cn=0,n=1
        13 001046   202065 000100                    ARG     INDX1,,AUTO
        13 001047   001053 606400 13                 TTN     s:11211
        13 001050   000776 236007                    LDQ     510,DL
        13 001051   202065 156100                    SSQ     INDX1,,AUTO
        13 001052   001116 710000 13                 TRA     s:11225

      466    11210    4           WHENALTRETURN DO;  /* leave it alone if multiple names */

      467    11211    4               CALL INDEX1R (INDX1, '@', REPLY_TEXT.NAME#)

  11211 13 001053   000000 125500                    SCMR    mask='000'O
        13 001054   201022 200777                    ADSC9   REPLY_TEXT,,AUTO         cn=1,n=511
        13 001055   000100 000001 14                 ADSC9   64                       cn=0,n=1
        13 001056   202065 000100                    ARG     INDX1,,AUTO
        13 001057   001116 606400 13                 TTN     s:11225
        13 001060   000776 236007                    LDQ     510,DL
        13 001061   202065 156100                    SSQ     INDX1,,AUTO
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:80   

      468    11212    5               WHENRETURN DO;

      469    11213    5                   CALL XLATE (SITENAME, B$XL_UPPER,

  11213 13 001062   202065 235100                    LDA     INDX1,,AUTO
        13 001063   000000 470400 xsym               LDP0    B$XL_UPPER$
        13 001064   040100 160505                    MVT     fill='040'O
        13 001065   201022 400010                    ADSC9   REPLY_TEXT,A,AUTO        cn=2,n=8
        13 001066   202067 000010                    ADSC9   SITENAME,,AUTO           cn=0,n=8
        13 001067   000000 000100                    ARG     0,,PR0

      470    11214    5                     SUBSTR (REPLY_TEXT.NAME#, INDX1+1, 8));
      471    11215    5                   IF SITENAME = VM_SITENAME

  11215 13 001070   040000 106500                    CMPC    fill='040'O
        13 001071   202067 000010                    ADSC9   SITENAME,,AUTO           cn=0,n=8
        13 001072   000000 000010 xsym               ADSC9   VM_SITENAME              cn=0,n=8
        13 001073   001116 601000 13                 TNZ     s:11225

      472    11216    6                   THEN DO;

      473    11217    6                       CALL SEARCHR (INDX1, DUMMY, B$SR_NON_BLANK,

  11217 13 001074   202065 236100                    LDQ     INDX1,,AUTO
        13 001075   000000 471400 xsym               LDP1    B$SR_NON_BLANK$
        13 001076   000000 620006                    EAX0    0,QL
        13 001077   000000 165540                    TCTR
        13 001100   201022 200010                    ADSC9   REPLY_TEXT,,AUTO         cn=1,n=*X0
        13 001101   100000 000100                    ARG     0,,PR1
        13 001102   202065 000100                    ARG     INDX1,,AUTO
        13 001103   202065 235100                    LDA     INDX1,,AUTO
        13 001104   000033 771000                    ARL     27
        13 001105   202066 755100                    STA     DUMMY,,AUTO
        13 001106   202065 551140                    STBA    INDX1,'40'O,AUTO
        13 001107   001112 606400 13                 TTN     s:11219
        13 001110   202065 054100                    AOS     INDX1,,AUTO
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:81   
        13 001111   202065 156100                    SSQ     INDX1,,AUTO

      474    11218    6                         SUBSTR (REPLY_TEXT.NAME#, 0, INDX1));
      475    11219    6                       REPLY_TEXT.L# = INDX1 + 1;

  11219 13 001112   202065 236100                    LDQ     INDX1,,AUTO
        13 001113   000001 036007                    ADLQ    1,DL
        13 001114   000033 736000                    QLS     27
        13 001115   201022 552140                    STBQ    REPLY_TEXT,'40'O,AUTO

      476    11220    6                   END;

      477    11221    5               END;

      478    11222    4           END;

      479    11223    3       END;

      480    11224        /**/
      481    11225    2       IF VM_HEADER.SUBJECT$ ~= ADDR(NIL)

  11225 13 001116   000000 470400 xsym               LDP0    VM_HEADER$
        13 001117   000030 236100                    LDQ     24,,PR0
        13 001120   000032 116000 14                 CMPQ    26
        13 001121   001136 600000 13                 TZE     s:11231

      482    11226    3       THEN DO;

      483    11227    3           SUBJECT_TEXT.L# = VM_HEADER.SUBJECT$ ->X$STRING.SIZ;

  11227 13 001122   000030 471500                    LDP1    24,,PR0
        13 001123   000100 100500                    MLR     fill='000'O
        13 001124   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 001125   201222 000001                    ADSC9   SUBJECT_TEXT,,AUTO       cn=0,n=1

      484    11228    3           SUBJECT_TEXT.NAME# = VM_HEADER.SUBJECT$ ->X$STRING.TEXT;

PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:82   
  11228 13 001126   000100 101500                    MRL     fill='000'O
        13 001127   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 001130   202074 000002                    ADSC9   APPEND_REPLY+3,,AUTO     cn=0,n=2
        13 001131   202074 220100                    LDX0    APPEND_REPLY+3,,AUTO
        13 001132   040100 100540                    MLR     fill='040'O
        13 001133   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
        13 001134   201222 200777                    ADSC9   SUBJECT_TEXT,,AUTO       cn=1,n=511

      485    11229    3       END;

  11229 13 001135   001140 710000 13                 TRA     s:11233

      486    11230    2       ELSE
      487    11231    2           SUBJECT_TEXT.L# = 0;

  11231 13 001136   000000 236003                    LDQ     0,DU
        13 001137   201222 552140                    STBQ    SUBJECT_TEXT,'40'O,AUTO

      488    11232        /**/
      489    11233    2       IF VM_HEADER.UNIQUE_ID$ ~= ADDR(NIL)

  11233 13 001140   000032 236100                    LDQ     26,,PR0
        13 001141   000032 116000 14                 CMPQ    26
        13 001142   001157 600000 13                 TZE     s:11239

      490    11234    3       THEN DO;

      491    11235    3           UNIQUE_ID_TEXT.L# = VM_HEADER.UNIQUE_ID$ ->X$STRING.SIZ;

  11235 13 001143   000032 471500                    LDP1    26,,PR0
        13 001144   000100 100500                    MLR     fill='000'O
        13 001145   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 001146   201622 000001                    ADSC9   UNIQUE_ID_TEXT,,AUTO     cn=0,n=1

      492    11236    3           UNIQUE_ID_TEXT.NAME# = VM_HEADER.UNIQUE_ID$ ->X$STRING.TEXT;

  11236 13 001147   000100 101500                    MRL     fill='000'O
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:83   
        13 001150   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 001151   202074 000002                    ADSC9   APPEND_REPLY+3,,AUTO     cn=0,n=2
        13 001152   202074 220100                    LDX0    APPEND_REPLY+3,,AUTO
        13 001153   040100 100540                    MLR     fill='040'O
        13 001154   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
        13 001155   201622 200777                    ADSC9   UNIQUE_ID_TEXT,,AUTO     cn=1,n=511

      493    11237    3       END;

  11237 13 001156   001161 710000 13                 TRA     s:11241

      494    11238    2       ELSE
      495    11239    2           UNIQUE_ID_TEXT.L# = 0;

  11239 13 001157   000000 236003                    LDQ     0,DU
        13 001160   201622 552140                    STBQ    UNIQUE_ID_TEXT,'40'O,AUTO

      496    11240        /**/
      497    11241    2       RETURN;

  11241 13 001161   202072 221300                    LDX1  ! APPEND_REPLY+1,,AUTO
        13 001162   000001 702211                    TSX2  ! 1,X1

      498    11242
      499    11243    2   END SAVE_COMMON_INFO;
      500    11244        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:84   
      501    11245        /*I*
      502    11246             NAME: SETUP_MCB
      503    11247             PURPOSE:
      504    11248                   To reinitialize the header record to a virgin state
      505    11249                   and setup the MCB used by X$ALLOCATE and X$DEALLOCATE.
      506    11250        */
      507    11251    1   SETUP_HEADER: PROC;

  11251 13 001163   202072 741300       SETUP_HEADER STX1  ! APPEND_REPLY+1,,AUTO

      508    11252    2       VM_HEADER = CVM_HEADER;

  11252 13 001164   000000 470400 xsym               LDP0    VM_HEADER$
        13 001165   000100 100400                    MLR     fill='000'O
        13 001166   000000 000224 12                 ADSC9   CVM_HEADER               cn=0,n=148
        13 001167   000000 000224                    ADSC9   0,,PR0                   cn=0,n=148

      509    11253    2       VM_HEADER.FREE$ = ADDR(NIL);

  11253 13 001170   000032 236000 14                 LDQ     26
        13 001171   000015 756100                    STQ     13,,PR0

      510    11254    2       VM_HEADER.NEXT$ = ADDR(VM_HEADER.WORK_AREA);

  11254 13 001172   000000 236000 xsym               LDQ     VM_HEADER$
        13 001173   000044 036003                    ADLQ    36,DU
        13 001174   000016 756100                    STQ     14,,PR0

      511    11255    2       MCB.TYPE = 0;

  11255 13 001175   200013 450100                    STZ     MCB+5,,AUTO

      512    11256    2       MCB.MIN_SIZE = 12;

  11256 13 001176   000014 235007                    LDA     12,DL
        13 001177   200015 755100                    STA     MCB+7,,AUTO

PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:85   
      513    11257    2       MCB.SEGMENT_BASE$ = VM_HEADER$;

  11257 13 001200   000000 236000 xsym               LDQ     VM_HEADER$
        13 001201   200010 756100                    STQ     MCB+2,,AUTO

      514    11258    2       MCB.HI_SEGMENT$ = VM_HEADER.NEXT$;

  11258 13 001202   000016 236100                    LDQ     14,,PR0
        13 001203   200011 756100                    STQ     MCB+3,,AUTO

      515    11259    2       MCB.FREE_HEAD$ = VM_HEADER.FREE$;

  11259 13 001204   000015 236100                    LDQ     13,,PR0
        13 001205   200007 756100                    STQ     MCB+1,,AUTO

      516    11260    2       MCB.WKSZ = (VBOUND(VM_HEADER_)+1)/4;

  11260 13 001206   000000 236000 xsym               LDQ     VM_HEADER_
        13 001207   000020 772000                    QRL     16
        13 001210   000001 036007                    ADLQ    1,DL
        13 001211   000002 772000                    QRL     2
        13 001212   200012 756100                    STQ     MCB+4,,AUTO

      517    11261    2       RETURN;

  11261 13 001213   202072 221300                    LDX1  ! APPEND_REPLY+1,,AUTO
        13 001214   000001 702211                    TSX2  ! 1,X1

      518    11262    2   END SETUP_HEADER;
      519    11263        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:86   
      520    11264        /*I*
      521    11265             NAME: STASH_SUBJECT
      522    11266             PURPOSE:
      523    11267                   To stash the SUBJECT in the new header.
      524    11268        */
      525    11269    1   STASH_SUBJECT: PROC ALTRET;

  11269 13 001215   202072 741300       STASH_SUBJE* STX1  ! APPEND_REPLY+1,,AUTO

      526    11270    2       IF SUBJECT_TEXT.L# ~= 0

  11270 13 001216   201222 236100                    LDQ     SUBJECT_TEXT,,AUTO
        13 001217   777000 316003                    CANQ    -512,DU
        13 001220   001252 600000 13                 TZE     s:11279

      527    11271    2       THEN
      528    11272    3       DO;

      529    11273    3           MCB.SIZE = SUBJECT_TEXT.L# + 1; /* One byte for count */

  11273 13 001221   201222 236100                    LDQ     SUBJECT_TEXT,,AUTO
        13 001222   000033 772000                    QRL     27
        13 001223   000001 036007                    ADLQ    1,DL
        13 001224   200014 756100                    STQ     MCB+6,,AUTO

      530    11274    3           CALL X$ALLOCATE (MCB) ALTRET(E_ALLOCATE);

  11274 13 001225   200006 630500                    EPPR0   MCB,,AUTO
        13 001226   202074 450500                    STP0    APPEND_REPLY+3,,AUTO
        13 001227   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
        13 001230   000000 631400 14                 EPPR1   0
        13 001231   000000 701000 xent               TSX1    X$ALLOCATE
        13 001232   001254 702000 13                 TSX2    E_ALLOCATE

      531    11275    3           VM_HEADER.SUBJECT$ = MCB.ADDRESS$;

  11275 13 001233   200006 236100                    LDQ     MCB,,AUTO
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:87   
        13 001234   000000 470400 xsym               LDP0    VM_HEADER$
        13 001235   000030 756100                    STQ     24,,PR0

      532    11276    3           VM_HEADER.SUBJECT$ -> X$STRING.SIZ = SUBJECT_TEXT.L#;

  11276 13 001236   000030 471500                    LDP1    24,,PR0
        13 001237   000100 100500                    MLR     fill='000'O
        13 001240   201222 000001                    ADSC9   SUBJECT_TEXT,,AUTO       cn=0,n=1
        13 001241   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

      533    11277    3           VM_HEADER.SUBJECT$ -> X$STRING.TEXT = SUBJECT_TEXT.NAME#;

  11277 13 001242   000030 471500                    LDP1    24,,PR0
        13 001243   000100 101500                    MRL     fill='000'O
        13 001244   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 001245   202074 000002                    ADSC9   APPEND_REPLY+3,,AUTO     cn=0,n=2
        13 001246   202074 220100                    LDX0    APPEND_REPLY+3,,AUTO
        13 001247   040140 100500                    MLR     fill='040'O
        13 001250   201222 200777                    ADSC9   SUBJECT_TEXT,,AUTO       cn=1,n=511
        13 001251   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0

      534    11278    3       END;

      535    11279    2       RETURN;

  11279 13 001252   202072 221300                    LDX1  ! APPEND_REPLY+1,,AUTO
        13 001253   000001 702211                    TSX2  ! 1,X1

      536    11280        /**/
      537    11281    2   E_ALLOCATE:
      538    11282    2       ALTRETURN;

  11282 13 001254   202072 221300       E_ALLOCATE   LDX1  ! APPEND_REPLY+1,,AUTO
        13 001255   000000 702211                    TSX2  ! 0,X1

      539    11283    2   END STASH_SUBJECT;
      540    11284        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:88   
      541    11285        /*I*
      542    11286             NAME: STASH_TO
      543    11287             PURPOSE:
      544    11288                   To stash the TO info in the new header.
      545    11289        */
      546    11290    1   STASH_TO: PROC ALTRET;

  11290 13 001256   202072 741300       STASH_TO     STX1  ! APPEND_REPLY+1,,AUTO

      547    11291    2       IF TO_TEXT.L# ~= 0

  11291 13 001257   201422 236100                    LDQ     TO_TEXT,,AUTO
        13 001260   777000 316003                    CANQ    -512,DU
        13 001261   001313 600000 13                 TZE     s:11300

      548    11292    2       THEN
      549    11293    3       DO;

      550    11294    3           MCB.SIZE = TO_TEXT.L# + 1; /* One byte for count */

  11294 13 001262   201422 236100                    LDQ     TO_TEXT,,AUTO
        13 001263   000033 772000                    QRL     27
        13 001264   000001 036007                    ADLQ    1,DL
        13 001265   200014 756100                    STQ     MCB+6,,AUTO

      551    11295    3           CALL X$ALLOCATE (MCB) ALTRET(E_ALLOCATE);

  11295 13 001266   200006 630500                    EPPR0   MCB,,AUTO
        13 001267   202074 450500                    STP0    APPEND_REPLY+3,,AUTO
        13 001270   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
        13 001271   000000 631400 14                 EPPR1   0
        13 001272   000000 701000 xent               TSX1    X$ALLOCATE
        13 001273   001315 702000 13                 TSX2    E_ALLOCATE

      552    11296    3           VM_HEADER.TO$ = MCB.ADDRESS$;

  11296 13 001274   200006 236100                    LDQ     MCB,,AUTO
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:89   
        13 001275   000000 470400 xsym               LDP0    VM_HEADER$
        13 001276   000031 756100                    STQ     25,,PR0

      553    11297    3           VM_HEADER.TO$ -> X$STRING.SIZ = TO_TEXT.L#;

  11297 13 001277   000031 471500                    LDP1    25,,PR0
        13 001300   000100 100500                    MLR     fill='000'O
        13 001301   201422 000001                    ADSC9   TO_TEXT,,AUTO            cn=0,n=1
        13 001302   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

      554    11298    3           VM_HEADER.TO$ -> X$STRING.TEXT = TO_TEXT.NAME#;

  11298 13 001303   000031 471500                    LDP1    25,,PR0
        13 001304   000100 101500                    MRL     fill='000'O
        13 001305   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 001306   202074 000002                    ADSC9   APPEND_REPLY+3,,AUTO     cn=0,n=2
        13 001307   202074 220100                    LDX0    APPEND_REPLY+3,,AUTO
        13 001310   040140 100500                    MLR     fill='040'O
        13 001311   201422 200777                    ADSC9   TO_TEXT,,AUTO            cn=1,n=511
        13 001312   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0

      555    11299    3       END;

      556    11300    2       RETURN;

  11300 13 001313   202072 221300                    LDX1  ! APPEND_REPLY+1,,AUTO
        13 001314   000001 702211                    TSX2  ! 1,X1

      557    11301        /**/
      558    11302    2   E_ALLOCATE:
      559    11303    2       ALTRETURN;

  11303 13 001315   202072 221300       E_ALLOCATE   LDX1  ! APPEND_REPLY+1,,AUTO
        13 001316   000000 702211                    TSX2  ! 0,X1

      560    11304    2   END STASH_TO;
      561    11305        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:90   
      562    11306        /*I*
      563    11307             NAME: STASH_BLIND
      564    11308             PURPOSE:
      565    11309                   To stash the BLIND info in the new header.
      566    11310        */
      567    11311    1   STASH_BLIND: PROC ALTRET;

  11311 13 001317   202072 741300       STASH_BLIND  STX1  ! APPEND_REPLY+1,,AUTO

      568    11312    2       IF BLIND_TEXT.L# ~= 0

  11312 13 001320   200222 236100                    LDQ     BLIND_TEXT,,AUTO
        13 001321   777000 316003                    CANQ    -512,DU
        13 001322   001354 600000 13                 TZE     s:11321

      569    11313    2       THEN
      570    11314    3       DO;

      571    11315    3           MCB.SIZE = BLIND_TEXT.L# + 1; /* One byte for count */

  11315 13 001323   200222 236100                    LDQ     BLIND_TEXT,,AUTO
        13 001324   000033 772000                    QRL     27
        13 001325   000001 036007                    ADLQ    1,DL
        13 001326   200014 756100                    STQ     MCB+6,,AUTO

      572    11316    3           CALL X$ALLOCATE (MCB) ALTRET(E_ALLOCATE);

  11316 13 001327   200006 630500                    EPPR0   MCB,,AUTO
        13 001330   202074 450500                    STP0    APPEND_REPLY+3,,AUTO
        13 001331   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
        13 001332   000000 631400 14                 EPPR1   0
        13 001333   000000 701000 xent               TSX1    X$ALLOCATE
        13 001334   001356 702000 13                 TSX2    E_ALLOCATE

      573    11317    3           VM_HEADER.BLIND$ = MCB.ADDRESS$;

  11317 13 001335   200006 236100                    LDQ     MCB,,AUTO
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:91   
        13 001336   000000 470400 xsym               LDP0    VM_HEADER$
        13 001337   000020 756100                    STQ     16,,PR0

      574    11318    3           VM_HEADER.BLIND$ -> X$STRING.SIZ = BLIND_TEXT.L#;

  11318 13 001340   000020 471500                    LDP1    16,,PR0
        13 001341   000100 100500                    MLR     fill='000'O
        13 001342   200222 000001                    ADSC9   BLIND_TEXT,,AUTO         cn=0,n=1
        13 001343   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

      575    11319    3           VM_HEADER.BLIND$ -> X$STRING.TEXT = BLIND_TEXT.NAME#;

  11319 13 001344   000020 471500                    LDP1    16,,PR0
        13 001345   000100 101500                    MRL     fill='000'O
        13 001346   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 001347   202074 000002                    ADSC9   APPEND_REPLY+3,,AUTO     cn=0,n=2
        13 001350   202074 220100                    LDX0    APPEND_REPLY+3,,AUTO
        13 001351   040140 100500                    MLR     fill='040'O
        13 001352   200222 200777                    ADSC9   BLIND_TEXT,,AUTO         cn=1,n=511
        13 001353   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0

      576    11320    3       END;

      577    11321    2       RETURN;

  11321 13 001354   202072 221300                    LDX1  ! APPEND_REPLY+1,,AUTO
        13 001355   000001 702211                    TSX2  ! 1,X1

      578    11322        /**/
      579    11323    2   E_ALLOCATE:
      580    11324    2       ALTRETURN;

  11324 13 001356   202072 221300       E_ALLOCATE   LDX1  ! APPEND_REPLY+1,,AUTO
        13 001357   000000 702211                    TSX2  ! 0,X1

      581    11325    2   END STASH_BLIND;
      582    11326        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:92   
      583    11327        /*I*
      584    11328             NAME: STASH_COPY
      585    11329             PURPOSE:
      586    11330                   To stash the COPY info in the new header.
      587    11331        */
      588    11332    1   STASH_COPY: PROC ALTRET;

  11332 13 001360   202072 741300       STASH_COPY   STX1  ! APPEND_REPLY+1,,AUTO

      589    11333    2       IF COPY_TEXT.L# ~= 0

  11333 13 001361   200422 236100                    LDQ     COPY_TEXT,,AUTO
        13 001362   777000 316003                    CANQ    -512,DU
        13 001363   001415 600000 13                 TZE     s:11342

      590    11334    2       THEN
      591    11335    3       DO;

      592    11336    3           MCB.SIZE = COPY_TEXT.L# + 1; /* One byte for count */

  11336 13 001364   200422 236100                    LDQ     COPY_TEXT,,AUTO
        13 001365   000033 772000                    QRL     27
        13 001366   000001 036007                    ADLQ    1,DL
        13 001367   200014 756100                    STQ     MCB+6,,AUTO

      593    11337    3           CALL X$ALLOCATE (MCB) ALTRET(E_ALLOCATE);

  11337 13 001370   200006 630500                    EPPR0   MCB,,AUTO
        13 001371   202074 450500                    STP0    APPEND_REPLY+3,,AUTO
        13 001372   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
        13 001373   000000 631400 14                 EPPR1   0
        13 001374   000000 701000 xent               TSX1    X$ALLOCATE
        13 001375   001417 702000 13                 TSX2    E_ALLOCATE

      594    11338    3           VM_HEADER.COPY$ = MCB.ADDRESS$;

  11338 13 001376   200006 236100                    LDQ     MCB,,AUTO
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:93   
        13 001377   000000 470400 xsym               LDP0    VM_HEADER$
        13 001400   000021 756100                    STQ     17,,PR0

      595    11339    3           VM_HEADER.COPY$ -> X$STRING.SIZ = COPY_TEXT.L#;

  11339 13 001401   000021 471500                    LDP1    17,,PR0
        13 001402   000100 100500                    MLR     fill='000'O
        13 001403   200422 000001                    ADSC9   COPY_TEXT,,AUTO          cn=0,n=1
        13 001404   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

      596    11340    3           VM_HEADER.COPY$ -> X$STRING.TEXT = COPY_TEXT.NAME#;

  11340 13 001405   000021 471500                    LDP1    17,,PR0
        13 001406   000100 101500                    MRL     fill='000'O
        13 001407   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 001410   202074 000002                    ADSC9   APPEND_REPLY+3,,AUTO     cn=0,n=2
        13 001411   202074 220100                    LDX0    APPEND_REPLY+3,,AUTO
        13 001412   040140 100500                    MLR     fill='040'O
        13 001413   200422 200777                    ADSC9   COPY_TEXT,,AUTO          cn=1,n=511
        13 001414   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0

      597    11341    3       END;

      598    11342    2       RETURN;

  11342 13 001415   202072 221300                    LDX1  ! APPEND_REPLY+1,,AUTO
        13 001416   000001 702211                    TSX2  ! 1,X1

      599    11343        /**/
      600    11344    2   E_ALLOCATE:
      601    11345    2       ALTRETURN;

  11345 13 001417   202072 221300       E_ALLOCATE   LDX1  ! APPEND_REPLY+1,,AUTO
        13 001420   000000 702211                    TSX2  ! 0,X1

      602    11346    2   END STASH_COPY;
      603    11347        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:94   
      604    11348        /*I*
      605    11349             NAME: STORE_HEADER
      606    11350             PURPOSE:
      607    11351                   To update FREE$ and NEXT$ and write the header to work fiee.
      608    11352        */
      609    11353    1   STORE_HEADER: PROC ALTRET;

  11353 13 001421   202072 741300       STORE_HEADER STX1  ! APPEND_REPLY+1,,AUTO

      610    11354    2       VM_HEADER.FREE$ = MCB.FREE_HEAD$;

  11354 13 001422   200007 236100                    LDQ     MCB+1,,AUTO
        13 001423   000000 470400 xsym               LDP0    VM_HEADER$
        13 001424   000015 756100                    STQ     13,,PR0

      611    11355    2       VM_HEADER.NEXT$ = MCB.HI_SEGMENT$;

  11355 13 001425   200011 236100                    LDQ     MCB+3,,AUTO
        13 001426   000016 756100                    STQ     14,,PR0

      612    11356    2       CALL VMD$PUT_HEADER (0,M$WORK_NUM) ALTRET(E_PMME);

  11356 13 001427   000030 630400 14                 EPPR0   24
        13 001430   000017 631400 14                 EPPR1   15
        13 001431   000000 701000 xent               TSX1    VMD$PUT_HEADER
        13 001432   001435 702000 13                 TSX2    E_PMME

      613    11357    2       RETURN;

  11357 13 001433   202072 221300                    LDX1  ! APPEND_REPLY+1,,AUTO
        13 001434   000001 702211                    TSX2  ! 1,X1

      614    11358        /**/
      615    11359    2   E_PMME:
      616    11360    2       ALTRETURN;

  11360 13 001435   202072 221300       E_PMME       LDX1  ! APPEND_REPLY+1,,AUTO
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:95   
        13 001436   000000 702211                    TSX2  ! 0,X1

      617    11361    2   END STORE_HEADER;
      618    11362        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:96   
      619    11363        /*I*
      620    11364             NAME: STASH_REFERENCE
      621    11365             PURPOSE:
      622    11366                   To stash the REFERENCE in the new header. The SUBJECT is
      623    11367                   used.
      624    11368        */
      625    11369    1   STASH_REFERENCE: PROC ALTRET;

  11369 13 001437   202072 741300       STASH_REFER* STX1  ! APPEND_REPLY+1,,AUTO

      626    11370    2       IF SUBJECT_TEXT.L# ~= 0

  11370 13 001440   201222 236100                    LDQ     SUBJECT_TEXT,,AUTO
        13 001441   777000 316003                    CANQ    -512,DU
        13 001442   001474 600000 13                 TZE     s:11379

      627    11371    2       THEN
      628    11372    3       DO;

      629    11373    3           MCB.SIZE = SUBJECT_TEXT.L# + 1; /* One byte for count */

  11373 13 001443   201222 236100                    LDQ     SUBJECT_TEXT,,AUTO
        13 001444   000033 772000                    QRL     27
        13 001445   000001 036007                    ADLQ    1,DL
        13 001446   200014 756100                    STQ     MCB+6,,AUTO

      630    11374    3           CALL X$ALLOCATE (MCB) ALTRET(E_ALLOCATE);

  11374 13 001447   200006 630500                    EPPR0   MCB,,AUTO
        13 001450   202074 450500                    STP0    APPEND_REPLY+3,,AUTO
        13 001451   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
        13 001452   000000 631400 14                 EPPR1   0
        13 001453   000000 701000 xent               TSX1    X$ALLOCATE
        13 001454   001476 702000 13                 TSX2    E_ALLOCATE

      631    11375    3           VM_HEADER.REFERENCE$ = MCB.ADDRESS$;

PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:97   
  11375 13 001455   200006 236100                    LDQ     MCB,,AUTO
        13 001456   000000 470400 xsym               LDP0    VM_HEADER$
        13 001457   000024 756100                    STQ     20,,PR0

      632    11376    3           VM_HEADER.REFERENCE$ -> X$STRING.SIZ = SUBJECT_TEXT.L#;

  11376 13 001460   000024 471500                    LDP1    20,,PR0
        13 001461   000100 100500                    MLR     fill='000'O
        13 001462   201222 000001                    ADSC9   SUBJECT_TEXT,,AUTO       cn=0,n=1
        13 001463   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

      633    11377    3           VM_HEADER.REFERENCE$ -> X$STRING.TEXT = SUBJECT_TEXT.NAME#;

  11377 13 001464   000024 471500                    LDP1    20,,PR0
        13 001465   000100 101500                    MRL     fill='000'O
        13 001466   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 001467   202074 000002                    ADSC9   APPEND_REPLY+3,,AUTO     cn=0,n=2
        13 001470   202074 220100                    LDX0    APPEND_REPLY+3,,AUTO
        13 001471   040140 100500                    MLR     fill='040'O
        13 001472   201222 200777                    ADSC9   SUBJECT_TEXT,,AUTO       cn=1,n=511
        13 001473   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0

      634    11378    3       END;

      635    11379    2       RETURN;

  11379 13 001474   202072 221300                    LDX1  ! APPEND_REPLY+1,,AUTO
        13 001475   000001 702211                    TSX2  ! 1,X1

      636    11380        /**/
      637    11381    2   E_ALLOCATE:
      638    11382    2       ALTRETURN;

  11382 13 001476   202072 221300       E_ALLOCATE   LDX1  ! APPEND_REPLY+1,,AUTO
        13 001477   000000 702211                    TSX2  ! 0,X1

      639    11383    2   END STASH_REFERENCE;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:98   
      640    11384        %EJECT;
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:99   
      641    11385        /*I*
      642    11386             NAME: STASH_REFERENCE_ID
      643    11387             PURPOSE:
      644    11388                   To stash the unique-ID from the old header in the references-ID
      645    11389                   of the new header.
      646    11390        */
      647    11391    1   STASH_REFERENCE_ID: PROC ALTRET;

  11391 13 001500   202072 741300       STASH_REFER* STX1  ! APPEND_REPLY+1,,AUTO

      648    11392    2       IF UNIQUE_ID_TEXT.L# ~= 0

  11392 13 001501   201622 236100                    LDQ     UNIQUE_ID_TEXT,,AUTO
        13 001502   777000 316003                    CANQ    -512,DU
        13 001503   001535 600000 13                 TZE     s:11401

      649    11393    2       THEN
      650    11394    3       DO;

      651    11395    3           MCB.SIZE = UNIQUE_ID_TEXT.L# + 1; /* One byte for count */

  11395 13 001504   201622 236100                    LDQ     UNIQUE_ID_TEXT,,AUTO
        13 001505   000033 772000                    QRL     27
        13 001506   000001 036007                    ADLQ    1,DL
        13 001507   200014 756100                    STQ     MCB+6,,AUTO

      652    11396    3           CALL X$ALLOCATE (MCB) ALTRET(E_ALLOCATE);

  11396 13 001510   200006 630500                    EPPR0   MCB,,AUTO
        13 001511   202074 450500                    STP0    APPEND_REPLY+3,,AUTO
        13 001512   202074 630500                    EPPR0   APPEND_REPLY+3,,AUTO
        13 001513   000000 631400 14                 EPPR1   0
        13 001514   000000 701000 xent               TSX1    X$ALLOCATE
        13 001515   001537 702000 13                 TSX2    E_ALLOCATE

      653    11397    3           VM_HEADER.REFERS_TO_ID$ = MCB.ADDRESS$;

PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:100  
  11397 13 001516   200006 236100                    LDQ     MCB,,AUTO
        13 001517   000000 470400 xsym               LDP0    VM_HEADER$
        13 001520   000033 756100                    STQ     27,,PR0

      654    11398    3           VM_HEADER.REFERS_TO_ID$ -> X$STRING.SIZ = UNIQUE_ID_TEXT.L#;

  11398 13 001521   000033 471500                    LDP1    27,,PR0
        13 001522   000100 100500                    MLR     fill='000'O
        13 001523   201622 000001                    ADSC9   UNIQUE_ID_TEXT,,AUTO     cn=0,n=1
        13 001524   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

      655    11399    3           VM_HEADER.REFERS_TO_ID$ -> X$STRING.TEXT = UNIQUE_ID_TEXT.NAME#;

  11399 13 001525   000033 471500                    LDP1    27,,PR0
        13 001526   000100 101500                    MRL     fill='000'O
        13 001527   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 001530   202074 000002                    ADSC9   APPEND_REPLY+3,,AUTO     cn=0,n=2
        13 001531   202074 220100                    LDX0    APPEND_REPLY+3,,AUTO
        13 001532   040140 100500                    MLR     fill='040'O
        13 001533   201622 200777                    ADSC9   UNIQUE_ID_TEXT,,AUTO     cn=1,n=511
        13 001534   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0

      656    11400    3       END;

      657    11401    2       RETURN;

  11401 13 001535   202072 221300                    LDX1  ! APPEND_REPLY+1,,AUTO
        13 001536   000001 702211                    TSX2  ! 1,X1

      658    11402        /**/
      659    11403    2   E_ALLOCATE:
      660    11404    2       ALTRETURN;

  11404 13 001537   202072 221300       E_ALLOCATE   LDX1  ! APPEND_REPLY+1,,AUTO
        13 001540   000000 702211                    TSX2  ! 0,X1

VM_BODYREC
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:101  
 Sect OctLoc
  11     000   001000 000000   ****** ******   ****** ******   ****** ******    ................
  11     114*  ****** ******                                                    ....

VM_RADDRESS
 Sect OctLoc
  11     115   000000 006014   000000 006014   000001 040040   040040 040040    ..........
  11     121   040040 040040   040040 040040   040040 040040   040040 040040
  11     135*  040040 040040   040040 040040   040040 040040   040040 040***                   .

VM_UADDRESS
 Sect OctLoc
  11     141   000000 006014   000000 006014   000002 040040   040040 040040    ..........
  11     145   040040 040040   040040 040040   040040 040040   040040 040040
  11     161*  040040 040040   040040 040000   040040 040040   040040 040040           .
  11     165   040040 040040   040040 040040   040040 040040   040040 040040
  11     241*  040040 040040   040040 040040   040040 040040   040040 040040

VM_UADDRESS1
 Sect OctLoc
  11     245   000000 006014   000000 006014   000002 040040   040040 040040    ..........
  11     251   040040 040040   040040 040040   040040 040040   040040 040040
  11     265*  040040 040040   040040 040000   040040 040040   040040 040040           .
  11     271   040040 040040   040040 040040   040040 040040   040040 040040
  11     345*  040040 040040   040040 040040   040040 040040   040040 040040

VM_RADDRESS1
 Sect OctLoc
  11     351   000000 006014   000000 006014   000001 040040   040040 040040    ..........
  11     355   040040 040040   040040 040040   040040 040040   040040 040040
  11     371*  040040 040040   040040 040040   040040 040040   040040 040***                   .

VM_MSG_RECV
 Sect OctLoc
  11     375   074040 040040   040040 040040   040040 040040   040040 040040    <
  11     401   040040 040040   040040 040040   040040 040040   040040 040040
  11     411*  040040 040040   040040 040040   040040 040040   040*** ******                 ...
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:102  

VM_MSG_ACKED
 Sect OctLoc
  11     415   074040 040040   040040 040040   040040 040040   040040 040040    <
  11     421   040040 040040   040040 040040   040040 040040   040040 040040
  11     431*  040040 040040   040040 040040   040040 040040   040*** ******                 ...

CVM_HEADER
 Sect OctLoc
  12     000   000000 000000   000000 000000   000000 000000   000000 000000    ................
  12     014*  000000 000000   000000 006014   000044 006000   000000 006014    .........$......
  12     020   000000 006014   000000 006014   000000 006014   000000 006014    ................
  12     034*  000000 000000   000000 000000   000000 000000   000000 000000    ................
  12     044*  ****** ******                                                    ....

E_INTADDERR
 Sect OctLoc
  12     045   261505 010010                                                    ....

E_ACKIMPOSSIBLE
 Sect OctLoc
  12     046   261505 010020                                                    ....

E_CANTANS
 Sect OctLoc
  12     047   261505 001670                                                    ....

E_MSG_RECV
 Sect OctLoc
  12     050   261505 021420                                                    ....

E_MSG_ACKED
 Sect OctLoc
  12     051   261505 021450                                                    ....

(unnamed)
 Sect OctLoc
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:103  
  12     052   054040 040040                                                    ,

(unnamed)
 Sect OctLoc
  14     000   000001 000000   000046 006000   000004 000000   000000 000044    .....&.........$
  14     004   000000 006000   000000 000000   000003 006000   000000 006000    ................
  14     010   000003 000000   000000 000020   000011 006000   000000 006000    ................
  14     014   000000 006000   000000 000000   040040 040040   000002 000000    ........    ....
  14     020   000051 006000   000415 006000   000050 006000   000375 006000    .).......(......
  14     024   000006 000000   000047 006000   000015 006000   000000 006000    .....'..........
  14     030   000015 006000   000000 006000   000000 006014   000000 000000    ................
  14     034   000011 006000   000000 006000   000000 006000   000000 000000    ................
  14     040   000141 006000   000115 006000   000000 006000   000000 000000    .a...M..........
  14     044   000245 006000   000351 006000   000136 606000   000124 406000    .........^...T..
  14     050   000132 606000   000134 606000   000162 606000   000124 406000    .Z...\...r...T..
  14     054   000132 606000   000134 606000   000000 000040   000000 000030    .Z...\..... ....
  14     060   000056 006000   000000 006000   000056 006000   000000 006000    ................
  14     064   000000 006000   000000 000000   000057 006000   000000 006000    ........./......
  14     070   000057 006000   000000 006000   000000 006000   000005 000000    ./..............
  14     074   001422 200000   000000 006003   377777 777777   054040 040040    ............,
  14     100   100040 040040                                                    @
      661    11405    2   END STASH_REFERENCE_ID;
      662    11406    1   END VME$ACKNOWLEDGE;

PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:104  
--  Include file information  --

   XUR_ENTRY.:LIB_E05  cannot be made into a system file and is referenced.
   XUM_MACRO_C.:LIB_E05  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_PERR_C.:VMB6TOU  is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B$TABLES_C.:LIB_E05  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VME$ACKNOWLEDGE.
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:105  

 **** Variables and constants ****

  ****  Section 011  Data  VME$ACKNOWLEDGE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2772)  r     1 VM_BODYREC               415-0-0/c STRC(549)   r     1 VM_MSG_ACKED
   375-0-0/c STRC(549)   r     1 VM_MSG_RECV              115-0-0/w STRC(711)   r     1 VM_RADDRESS
   351-0-0/w STRC(711)   r     1 VM_RADDRESS1             141-0-0/w STRC(2448)  r     1 VM_UADDRESS
   245-0-0/w STRC(2448)  r     1 VM_UADDRESS1

  ****  Section 012 RoData VME$ACKNOWLEDGE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(1332)  r     1 CVM_HEADER                46-0-0/w STRC        r     1 E_ACKIMPOSSIBLE
    47-0-0/w STRC        r     1 E_CANTANS                 45-0-0/w STRC              1 E_INTADDERR
    51-0-0/w STRC        r     1 E_MSG_ACKED               50-0-0/w STRC        r     1 E_MSG_RECV

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @MESSAGE_NUMBER            5-0-0/w PTR         r     1 @RECEIVER#
     4-0-0/w PTR         r     1 @USER_NAME              2071-0-0/b BIT         r     1 APPEND_REPLY
   222-0-0/c STRC(4608)  r     1 BLIND_TEXT                21-0-0/c CHAR(511)         1 CMD_BUF
   221-0-0/w SBIN              1 CMD_SIZE                 422-0-0/c STRC(4608)  r     1 COPY_TEXT
  2066-0-0/w SBIN        r     1 DUMMY                   2065-0-0/w SBIN        r     1 INDX1
     6-0-0/w STRC(324)   r     1 MCB                       *0-0-0/w SBIN        r     1 MESSAGE_NUMBER
    17-0-0/w PTR         r     1 OUT$                      20-0-0/w PTR         r     1 OUT1$
    *0-0-0/b BIT         r     1 RECEIVER#                622-0-0/c STRC(4608)        1 REFERENCE_TEXT
  1022-0-0/c STRC(4608)  r     1 REPLY_TEXT              2067-0-0/c CHAR(8)     r     1 SITENAME
  1222-0-0/c STRC(4608)  r     1 SUBJECT_TEXT            1422-0-0/c STRC(4608)  r     1 TO_TEXT
  1622-0-0/c STRC(4608)  r     1 UNIQUE_ID_TEXT            *0-0-0/c ASTR(9)     r     1 USER_NAME
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:106  
  2022-0-0/w STRC(1260)  r     1 VM_SEARCH_INFO

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR         r     1 B$SR_NON_BLANK$
     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w PTR         r     1 B$XL_UPPER$
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w UBIN              1 M$DO_NUM
     0-0-0/w UBIN              1 M$LO_NUM                   0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM
     0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM        0-0-0/w UBIN        r     1 M$MAIL_FILE_NUM
     0-0-0/w UBIN        r     1 M$MAIL_GLOBAL_NUM          0-0-0/w UBIN              1 M$ME_NUM
     0-0-0/w UBIN              1 M$NODE_NUM                 0-0-0/w UBIN              1 M$SI_NUM
     0-0-0/w UBIN        r     1 M$WORK_NUM                 0-0-0/w PTR         r     1 VM_ADDLIST$
     0-0-0/d VECT        r     1 VM_ADDLIST_                0-0-0/w PTR               1 VM_ADDREC$
     0-0-0/d VECT              1 VM_ADDREC_                 0-0-0/w PTR         r     1 VM_ADDRESS_SPEC$
     0-0-0/w PTR               1 VM_COPY$                   0-0-0/d VECT              1 VM_COPY_
     0-0-0/w PTR               1 VM_ENCLLIST$               0-0-0/d VECT              1 VM_ENCLLIST_
     0-0-0/w PTR               1 VM_ENCLREC$                0-0-0/d VECT              1 VM_ENCLREC_
     0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME       0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME
     0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS       0-0-0/w PTR         r     1 VM_HEADER$
     0-0-0/d VECT        r     1 VM_HEADER_                 0-0-0/d VECT              1 VM_HEADER_INIT_
     0-0-0/w PTR               1 VM_INPUT$                  0-0-0/d VECT              1 VM_INPUT_
     0-0-0/c STRC(72)          1 VM_MAILCG_NAME             0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA
     0-0-0/c STRC(72)          1 VM_MAIL_ACCT               0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME
     0-0-0/w PTR               1 VM_PARSEAREA$              0-0-0/d VECT              1 VM_PARSEAREA_
     0-0-0/w PTR               1 VM_PROFILE$                0-0-0/d VECT              1 VM_PROFILE_
     0-0-0/w PTR               1 VM_SELECT$                 0-0-0/d VECT              1 VM_SELECT_
     0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME          0-0-0/c CHAR(8)     r     1 VM_SITENAME
     0-0-0/w PTR         r     1 VM_WORK$                   0-0-0/d VECT        r     1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:107  
     0-0-0/w SBIN        r     1 ADDRESS_SPEC               0-0-0/w STRC(2448)  r     1 B$ALT
     0-0-0/d STRC(4608)  r     1 B$SR_NON_BLANK             0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/d STRC(4608)  r     1 B$XL_UPPER                 0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$MAIL_CENTRAL             0-0-0N  NULL        r     1 M$MAIL_COMGROUP
     0-0-0N  NULL        r     1 M$MAIL_FILE                0-0-0N  NULL        r     1 M$MAIL_GLOBAL
     0-0-0N  NULL        r     1 M$ME                       0-0-0N  NULL        r     1 M$NODE
     0-0-0N  NULL        r     1 M$SI                       0-0-0N  NULL        r     1 M$UC
     0-0-0N  NULL        r     1 M$WORK                     0-0-0/w STRC(252)   r     1 VM_ADD_HEAD
     0-0-0/w STRC(1332)  r     1 VM_HEADER                  0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VME$ACKNOWLEDGE requires 865 words for executable code.
   Procedure VME$ACKNOWLEDGE requires 1090 words of local(AUTO) storage.

    No errors detected in file VME$SUBR.:VMB6TSI    .
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:108  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:109  
          MINI XREF LISTING

ADDRESS_SPEC
     10519**DCL     11156<>CALL
APPEND_REPLY
     10483**DCL     11040<<ASSIGN  11064<<ASSIGN  11068>>IF      11097>>IF
B$ALT.CODE
      9685**DCL      9685--REDEF    9686--REDEF    9686--REDEF
B$ALT.ERR
      9686**DCL     10948<>CALL
B$ALT.ERR.CODE
      9687**DCL     10859>>IF      11015>>IF
B$ALT.ERR.ERR#
      9687**DCL      9687--REDEF
B$ALT.EVID
      9686**DCL      9686--REDEF    9686--REDEF
B$SR_NON_BLANK
      9754**DCL     11217>>CALLBLT
B$SR_NON_BLANK$
      9753**DCL      9754--IMP-PTR 11217>>CALLBLT
B$TCB.ALT$
      9681**DCL     10859>>IF      10948>>CALL    11015>>IF
B$TCB$
      9389**DCL      9681--IMP-PTR 10859>>IF      10948>>CALL    11015>>IF
B$XL_UPPER
      9750**DCL     11213>>CALLBLT
B$XL_UPPER$
      9749**DCL      9750--IMP-PTR 11213>>CALLBLT
BLIND_TEXT.L#
     10217**DCL     10989<<ASSIGN  10993<<ASSIGN  11108>>IF      11312>>IF      11315>>ASSIGN  11318>>ASSIGN
BLIND_TEXT.NAME#
     10217**DCL     10990<<ASSIGN  11319>>ASSIGN
COPY_TEXT.L#
     10244**DCL     10997<<ASSIGN  11001<<ASSIGN  11118>>IF      11333>>IF      11336>>ASSIGN  11339>>ASSIGN
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:110  
COPY_TEXT.NAME#
     10244**DCL     10998<<ASSIGN  11340>>ASSIGN
CREATE_TO_ADDRESS
     11151**PROC    10867--CALL    11023--CALL
CVM_HEADER
     10065**DCL     11252>>ASSIGN
CVM_HEADER.WORK_AREA
     10181**DCL     10147--DCLINIT
DUMMY
     10409**DCL     11217<<CALLBLT
END_RECEIVER
     11091**LABEL   11072--CALLALT
END_RTO
     11065**LABEL   11043--CALLALT 11065--GOTO
END_TO
     11059**LABEL   11047--CALLALT
ERRMSG_FID.L#
      9457**DCL      9457--IMP-SIZ
E_ACKIMPOSSIBLE
     10584**DCL     10843<>CALL
E_ALLOCATE
     10955**LABEL   10850--CALLALT 10936--CALLALT 11106--CALLALT 11112--CALLALT 11122--CALLALT
E_ALLOCATE IN PROCEDURE STASH_BLIND
     11324**LABEL   11316--CALLALT
E_ALLOCATE IN PROCEDURE STASH_COPY
     11345**LABEL   11337--CALLALT
E_ALLOCATE IN PROCEDURE STASH_REFERENCE
     11382**LABEL   11374--CALLALT
E_ALLOCATE IN PROCEDURE STASH_REFERENCE_ID
     11404**LABEL   11396--CALLALT
E_ALLOCATE IN PROCEDURE STASH_SUBJECT
     11282**LABEL   11274--CALLALT
E_ALLOCATE IN PROCEDURE STASH_TO
     11303**LABEL   11295--CALLALT
E_CANTANS
     10633**DCL     10951<>CALL
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:111  
E_MSG_ACKED
     10790**DCL     10887<>CALL
E_MSG_RECV
     10713**DCL     10914<>CALL
E_PMME
     10948**LABEL   10870--CALLALT 10932--CALLALT 10944--CALLALT 11076--CALLALT 11080--CALLALT 11086--CALLALT
     11091--CALLALT 11115--CALLALT 11125--CALLALT 11143--CALLALT
E_PMME IN PROCEDURE STORE_HEADER
     11360**LABEL   11356--CALLALT
E_TO
     10951**LABEL   10867--CALLALT 11023--CALLALT 11033--CALLALT 11113--CALLALT 11123--CALLALT
F$DCB.ACTPOS
      9724**DCL      9724--REDEF
F$DCB.ARS#
      9698**DCL      9698--REDEF
F$DCB.ATTR
      9717**DCL      9718--REDEF
F$DCB.BORROW
      9732**DCL      9732--REDEF    9732--REDEF    9732--REDEF
F$DCB.DCBNAME.L
      9746**DCL      9746--IMP-SIZ
F$DCB.EOMCHAR#
      9702**DCL      9702--REDEF
F$DCB.FCD#
      9711**DCL     11164>>IF
F$DCB.FLDID
      9727**DCL      9727--REDEF
F$DCB.FORM$
      9721**DCL      9721--REDEF
F$DCB.FSECT
      9737**DCL      9737--REDEF
F$DCB.FSN#
      9714**DCL      9714--REDEF    9714--REDEF    9715--REDEF
F$DCB.HEADER$
      9720**DCL      9720--REDEF
F$DCB.IXTNSIZE#
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:112  
      9718**DCL      9718--REDEF
F$DCB.LASTSTA$
      9707**DCL      9707--REDEF
F$DCB.LVL
      9733**DCL      9733--REDEF
F$DCB.NAME#.C
      9708**DCL      9708--REDEF
F$DCB.NOEOF
      9730**DCL      9730--REDEF
F$DCB.NRECS#
      9719**DCL      9719--REDEF
F$DCB.NRECX
      9738**DCL      9738--REDEF
F$DCB.OHDR
      9730**DCL      9730--REDEF
F$DCB.ORG#
      9713**DCL      9713--REDEF
F$DCB.PRECNO
      9736**DCL      9736--REDEF
F$DCB.RCSZ
      9742**DCL      9742--REDEF
F$DCB.RES#
      9709**DCL      9709--REDEF
F$DCB.SETX
      9721**DCL      9721--REDEF
F$DCB.TAB$
      9721**DCL      9721--REDEF
F$DCB.TDA
      9735**DCL      9736--REDEF
F$DCB.WSN#
      9709**DCL      9709--REDEF
INDX1
     10408**DCL     10931<<ASSIGN  10932<>CALL    11155<<ASSIGN  11156<>CALL    11209<<CALLBLT 11211<<CALLBLT
     11213>>CALLBLT 11217<<CALLBLT 11217>>CALLBLT 11219>>ASSIGN
M$MAIL_FILE_NUM
      9368**DCL     10855<>CALL    11011<>CALL    11033<>CALL    11086<>CALL    11113<>CALL    11123<>CALL
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:113  
M$MAIL_GLOBAL_NUM
      9372**DCL     11164--IF      11168>>ASSIGN
M$WORK_NUM
      9374**DCL     10870<>CALL    10932<>CALL    11091<>CALL    11115<>CALL    11125<>CALL    11356<>CALL
MCB
     10185**DCL     11274<>CALL    11295<>CALL    11316<>CALL    11337<>CALL    11374<>CALL    11396<>CALL
MCB.ADDRESS$
     10185**DCL     11275>>ASSIGN  11296>>ASSIGN  11317>>ASSIGN  11338>>ASSIGN  11375>>ASSIGN  11397>>ASSIGN
MCB.ERR
     10186**DCL     10955<>CALL
MCB.FREE_HEAD$
     10185**DCL     11259<<ASSIGN  11354>>ASSIGN
MCB.HI_SEGMENT$
     10185**DCL     11258<<ASSIGN  11355>>ASSIGN
MCB.MIN_SIZE
     10186**DCL     11256<<ASSIGN
MCB.SEGMENT_BASE$
     10185**DCL     11257<<ASSIGN
MCB.SIZE
     10185**DCL     11273<<ASSIGN  11294<<ASSIGN  11315<<ASSIGN  11336<<ASSIGN  11373<<ASSIGN  11395<<ASSIGN
MCB.TYPE
     10185**DCL     11255<<ASSIGN
MCB.WKSZ
     10185**DCL     11260<<ASSIGN
MESSAGE_NUMBER
      9672**DCL        22--PROC    10855<>CALL    10973--ENTRY   11011<>CALL    11033<>CALL    11086<>CALL
     11113<>CALL    11123<>CALL
NEXT_RTO
     11034**LABEL   11061--GOTO
OUT$
     10188**DCL     11039<<ASSIGN  11043<>CALL    11070<<ASSIGN  11072<>CALL    11156<>CALL    11175<>CALL
OUT1$
     10189**DCL     11045<<ASSIGN  11047<>CALL
RECEIVER#
      9678**DCL        22--PROC    10835>>ASSIGN  10836>>ASSIGN  10876>>IF      10973--ENTRY   11030>>IF
     11095>>IF      11108>>IF      11118>>IF      11127>>IF
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:114  
REPLY_TEXT
     10298**DCL     10849>>ASSIGN  10866>>ASSIGN  11022>>ASSIGN  11104>>ASSIGN
REPLY_TEXT.L#
     10298**DCL     10840>>IF      11100>>ASSIGN  11195<<ASSIGN  11201<<ASSIGN  11205<<ASSIGN  11207>>IF
     11219<<ASSIGN
REPLY_TEXT.NAME#
     10298**DCL     11099>>CALLBLT 11196<<ASSIGN  11202<<ASSIGN  11209>>CALLBLT 11211>>CALLBLT 11213>>CALLBLT
     11217>>CALLBLT
SAVE_COMMON_INFO
     11191**PROC    10830--CALL    10977--CALL
SETUP_HEADER
     11251**PROC    10834--CALL    11005--CALL
SITENAME
     10410**DCL     11213<<CALLBLT 11215>>IF
STASH_BLIND
     11311**PROC    11112--CALL
STASH_COPY
     11332**PROC    11122--CALL
STASH_REFERENCE
     11369**PROC    11134--CALL
STASH_REFERENCE_ID
     11391**PROC    10940--CALL    11138--CALL
STASH_SUBJECT
     11269**PROC    10936--CALL    11130--CALL
STASH_TO
     11290**PROC    10850--CALL    11106--CALL
STORE_HEADER
     11353**PROC    10944--CALL    11143--CALL
SUBJECT_TEXT.L#
     10325**DCL     11227<<ASSIGN  11231<<ASSIGN  11270>>IF      11273>>ASSIGN  11276>>ASSIGN  11370>>IF
     11373>>ASSIGN  11376>>ASSIGN
SUBJECT_TEXT.NAME#
     10325**DCL     11228<<ASSIGN  11277>>ASSIGN  11377>>ASSIGN
TO_TEXT
     10352**DCL     10849<<ASSIGN  10866<<ASSIGN  11022<<ASSIGN  11104<<ASSIGN
TO_TEXT.L#
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:115  
     10352**DCL     10981<<ASSIGN  10985<<ASSIGN  11099>>CALLBLT 11100<<ASSIGN  11100>>ASSIGN  11155>>ASSIGN
     11291>>IF      11294>>ASSIGN  11297>>ASSIGN
TO_TEXT.NAME#
     10352**DCL     10982<<ASSIGN  11099<<CALLBLT 11156<>CALL    11298>>ASSIGN
UNIQUE_ID_TEXT.L#
     10379**DCL     11235<<ASSIGN  11239<<ASSIGN  11392>>IF      11395>>ASSIGN  11398>>ASSIGN
UNIQUE_ID_TEXT.NAME#
     10379**DCL     11236<<ASSIGN  11399>>ASSIGN
USER_NAME
      9674**DCL        22--PROC    10973--ENTRY   11175<>CALL
USER_NAME.SIZ
      9675**DCL      9676--IMP-SIZ 11175>>CALL
VMA$ADDRESS
     10485**DCL-ENT 11175--CALL
VMA$ADD_RENTRY
     10489**DCL-ENT 11076--CALL
VMA$ADD_UENTRY
     10490**DCL-ENT 11080--CALL
VMA$GET_ADD_RECORD
     10486**DCL-ENT 10855--CALL    11011--CALL    11033--CALL    11086--CALL    11113--CALL    11123--CALL
VMA$GET_NEXT_ENTRY
     10488**DCL-ENT 11043--CALL    11047--CALL    11072--CALL
VMA$PUT_ADD_RECORD
     10487**DCL-ENT 10870--CALL    11091--CALL    11115--CALL    11125--CALL
VMD$ERRMSG
     10496**DCL-ENT 10887--CALL    10914--CALL
VMD$PUT_BODY
     10491**DCL-ENT 10932--CALL
VMD$PUT_HEADER
     10492**DCL-ENT 11356--CALL
VM_ADDLIST$
      9311**DCL      9961--IMP-PTR 11039>>ASSIGN  11043<>CALL
VM_ADDLIST_
      9335**DCL     10855<>CALL    10870<>CALL    11011<>CALL    11086<>CALL    11091<>CALL    11113<>CALL
     11115<>CALL    11123<>CALL    11125<>CALL
VM_ADDRESS_SPEC$
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:116  
     10520**DCL     10519--IMP-PTR 11156>>CALL
VM_ADD_HEAD.HEAD$
      9971**DCL     11039>>ASSIGN  11045>>ASSIGN  11070>>ASSIGN
VM_BODYREC
      9929**DCL     10932<>CALL
VM_BODYREC.TYPE
      9930**DCL     10875<<ASSIGN
VM_BODYREC.VALUE.COUNT
      9935**DCL     10902<<ASSIGN  10929<<ASSIGN  10931>>ASSIGN
VM_BODYREC.VALUE.DATA
      9947**DCL     10901<<ASSIGN  10928<<ASSIGN
VM_HEADER
      9800**DCL     11252<<ASSIGN
VM_HEADER.BLIND$
      9886**DCL     10986>>IF      10989>>ASSIGN  10990>>ASSIGN  10990>>ASSIGN  11317<<ASSIGN  11318>>ASSIGN
     11319>>ASSIGN  11319>>ASSIGN
VM_HEADER.COPY$
      9888**DCL     10994>>IF      10997>>ASSIGN  10998>>ASSIGN  10998>>ASSIGN  11338<<ASSIGN  11339>>ASSIGN
     11340>>ASSIGN  11340>>ASSIGN
VM_HEADER.FREE$
      9880**DCL     11253<<ASSIGN  11259>>ASSIGN  11354<<ASSIGN
VM_HEADER.FROM$
      9892**DCL     11199>>IF      11201>>ASSIGN  11202>>ASSIGN  11202>>ASSIGN
VM_HEADER.NEXT$
      9882**DCL     11254<<ASSIGN  11258>>ASSIGN  11355<<ASSIGN
VM_HEADER.NUM_RECORDS
      9811**DCL     10874<<ASSIGN
VM_HEADER.REFERENCE$
      9894**DCL     11375<<ASSIGN  11376>>ASSIGN  11377>>ASSIGN  11377>>ASSIGN
VM_HEADER.REFERS_TO_ID$
      9908**DCL     11397<<ASSIGN  11398>>ASSIGN  11399>>ASSIGN  11399>>ASSIGN
VM_HEADER.REPLY_TO$
      9896**DCL     11193>>IF      11195>>ASSIGN  11196>>ASSIGN  11196>>ASSIGN
VM_HEADER.STATUS.ACK
      9819**DCL     10835<<ASSIGN
VM_HEADER.STATUS.ANSWER
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:117  
      9817**DCL     11006<<ASSIGN
VM_HEADER.STATUS.ANS_TO
      9845**DCL     11129<<ASSIGN
VM_HEADER.STATUS.RRACK
      9861**DCL     10836<<ASSIGN
VM_HEADER.SUBJECT$
      9902**DCL     11225>>IF      11227>>ASSIGN  11228>>ASSIGN  11228>>ASSIGN  11275<<ASSIGN  11276>>ASSIGN
     11277>>ASSIGN  11277>>ASSIGN
VM_HEADER.TO$
      9904**DCL     10978>>IF      10981>>ASSIGN  10982>>ASSIGN  10982>>ASSIGN  11296<<ASSIGN  11297>>ASSIGN
     11298>>ASSIGN  11298>>ASSIGN
VM_HEADER.UNIQUE_ID$
      9906**DCL     11233>>IF      11235>>ASSIGN  11236>>ASSIGN  11236>>ASSIGN
VM_HEADER.WORK_AREA
      9916**DCL     11254--ASSIGN
VM_HEADER$
      9307**DCL      9800--IMP-PTR 10835>>ASSIGN  10836>>ASSIGN  10874>>ASSIGN  10978>>IF      10981>>ASSIGN
     10982>>ASSIGN  10982>>ASSIGN  10986>>IF      10989>>ASSIGN  10990>>ASSIGN  10990>>ASSIGN  10994>>IF
     10997>>ASSIGN  10998>>ASSIGN  10998>>ASSIGN  11006>>ASSIGN  11129>>ASSIGN  11193>>IF      11195>>ASSIGN
     11196>>ASSIGN  11196>>ASSIGN  11199>>IF      11201>>ASSIGN  11202>>ASSIGN  11202>>ASSIGN  11225>>IF
     11227>>ASSIGN  11228>>ASSIGN  11228>>ASSIGN  11233>>IF      11235>>ASSIGN  11236>>ASSIGN  11236>>ASSIGN
     11252>>ASSIGN  11253>>ASSIGN  11254>>ASSIGN  11254>>ASSIGN  11257>>ASSIGN  11258>>ASSIGN  11259>>ASSIGN
     11275>>ASSIGN  11276>>ASSIGN  11277>>ASSIGN  11277>>ASSIGN  11296>>ASSIGN  11297>>ASSIGN  11298>>ASSIGN
     11298>>ASSIGN  11317>>ASSIGN  11318>>ASSIGN  11319>>ASSIGN  11319>>ASSIGN  11338>>ASSIGN  11339>>ASSIGN
     11340>>ASSIGN  11340>>ASSIGN  11354>>ASSIGN  11355>>ASSIGN  11375>>ASSIGN  11376>>ASSIGN  11377>>ASSIGN
     11377>>ASSIGN  11397>>ASSIGN  11398>>ASSIGN  11399>>ASSIGN  11399>>ASSIGN
VM_HEADER_
      9332**DCL     11260>>ASSIGN
VM_MSG_ACKED
     10775**DCL     10887<>CALL
VM_MSG_ACKED.L#
     10775**DCL     10902>>ASSIGN
VM_MSG_ACKED.NAME#
     10775**DCL     10885>>IF      10901>>ASSIGN
VM_MSG_RECV
     10698**DCL     10914<>CALL
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:118  
VM_MSG_RECV.L#
     10698**DCL     10929>>ASSIGN
VM_MSG_RECV.NAME#
     10698**DCL     10912>>IF      10928>>ASSIGN
VM_RADDRESS
      9990**DCL     11043<>CALL    11072<>CALL
VM_RADDRESS.ACCT
     10013**DCL     11049>>IF      11076<>CALL
VM_RADDRESS.FOLDER
     10005**DCL     10006--REDEF   11049>>IF      11076<>CALL    11080<>CALL
VM_RADDRESS.PASS
     10010**DCL     11076<>CALL    11080<>CALL
VM_RADDRESS.SITENAME
     10012**DCL     11049>>IF      11076<>CALL    11080<>CALL
VM_RADDRESS.TYPE
     10002**DCL     11049>>IF      11074>>IF
VM_RADDRESS1
     10458**DCL     11047<>CALL
VM_RADDRESS1.ACCT
     10481**DCL     11049>>IF
VM_RADDRESS1.FOLDER
     10473**DCL     10474--REDEF   11049>>IF
VM_RADDRESS1.SITENAME
     10480**DCL     11049>>IF
VM_RADDRESS1.TYPE
     10470**DCL     11049>>IF
VM_SEARCH_INFO
     10391**DCL     11175<>CALL
VM_SEARCH_INFO.ACTIVE
     10400**DCL     11174<<ASSIGN
VM_SEARCH_INFO.DCB#
     10394**DCL     11168<<ASSIGN
VM_SEARCH_INFO.NUM_ENTRIES
     10392**DCL     11167<<ASSIGN  11171<<ASSIGN
VM_SITENAME
      9580**DCL     11215>>IF
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:119  
VM_UADDRESS
     10025**DCL     11043<>CALL    11072<>CALL
VM_UADDRESS.FOLDER
     10040**DCL     10041--REDEF   11049>>IF
VM_UADDRESS.SITENAME
     10047**DCL     11049>>IF
VM_UADDRESS.TYPE
     10037**DCL     11049>>IF
VM_UADDRESS.USER_NAME
     10048**DCL     11049--IF      11049--IF      11080<>CALL
VM_UADDRESS1
     10421**DCL     11047<>CALL
VM_UADDRESS1.FOLDER
     10436**DCL     10437--REDEF   11049>>IF
VM_UADDRESS1.SITENAME
     10443**DCL     11049>>IF
VM_UADDRESS1.TYPE
     10433**DCL     11049>>IF
VM_UADDRESS1.USER_NAME
     10444**DCL     11049--IF      11049--IF
VM_WORK$
      9315**DCL     11045>>ASSIGN  11047<>CALL    11070>>ASSIGN  11072<>CALL
VM_WORK_
      9337**DCL     11033<>CALL
X$ALLOCATE
     10516**DCL-ENT 11274--CALL    11295--CALL    11316--CALL    11337--CALL    11374--CALL    11396--CALL
X$STRING
      9302**DCL     11049>>IF      11049>>IF
X$STRING.SIZ
      9303**DCL      9304--IMP-SIZ 10981>>ASSIGN  10982>>ASSIGN  10989>>ASSIGN  10990>>ASSIGN  10997>>ASSIGN
     10998>>ASSIGN  11049>>IF      11049>>IF      11195>>ASSIGN  11196>>ASSIGN  11201>>ASSIGN  11202>>ASSIGN
     11227>>ASSIGN  11228>>ASSIGN  11235>>ASSIGN  11236>>ASSIGN  11276<<ASSIGN  11277>>ASSIGN  11297<<ASSIGN
     11298>>ASSIGN  11318<<ASSIGN  11319>>ASSIGN  11339<<ASSIGN  11340>>ASSIGN  11376<<ASSIGN  11377>>ASSIGN
     11398<<ASSIGN  11399>>ASSIGN
X$STRING.TEXT
      9304**DCL     10982>>ASSIGN  10990>>ASSIGN  10998>>ASSIGN  11196>>ASSIGN  11202>>ASSIGN  11228>>ASSIGN
PL6.E3A0      #001=VME$ACKNOWLEDGE File=VME$SUBR.:VMB6TSI                        WED 08/20/97 15:14 Page:120  
     11236>>ASSIGN  11277<<ASSIGN  11298<<ASSIGN  11319<<ASSIGN  11340<<ASSIGN  11377<<ASSIGN  11399<<ASSIGN
XUR$ERRMSG
      9654**DCL-ENT 10843--CALL    10948--CALL    10951--CALL    10955--CALL
XUR$GETCMD
      9646**DCL-ENT 11156--CALL
