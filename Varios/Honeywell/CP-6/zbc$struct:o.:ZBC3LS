

CC.C03    File=zbc$struct:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: struct.c,v 3.10 87/03/25 23:11:24 ceriel Exp $ */
        6         6             /*  ADMINISTRATION OF STRUCT AND UNION DECLARATIONS */
        7         7
        8         8             #include  "nobitfield.h"
        9         9             #include  "debug.h"
       10        10             #include  "botch_free.h"
       11        11             #include  <alloc.h>
       12        12             #include  "arith.h"
       13        13             #include  "stack.h"
       14        14             #include  "idf.h"
       15        15             #include  "def.h"
       16        16             #include  "type.h"
       17        17             #include  "struct.h"
       18        18             #include  "field.h"
       19        19             #include  "LLlex.h"
       20        20             #include  "Lpars.h"
       21        21             #include  "align.h"
       22        22             #include  "level.h"
       23        23             #include  "assert.h"
       24        24             #include  "sizes.h"
       25        25             #include  "noRoption.h"
       26        26
       27        27             /*  Type of previous selector declared with a field width specified,
       28        28              if any.  If a selector is declared with no field with it is set to 0.
       29        29             */
       30        30             static field_busy = 0;
       31        31
       32        32             extern char options[];
       33        33             int lcm();
       34        34
       35        35             /*  The semantics of the identification of structure/union tags is
       36        36              obscure.  Some highly regarded compilers are found out to accept,
CC.C03    File=zbc$struct:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       37        37              e.g.:
       38        38                 f(xp) struct aap *xp;   {
       39        39                    struct aap {char *za;};
       40        40                    xp->za;
       41        41                 }
       42        42              Equally highly regarded software uses this feature, so we shall
       43        43              humbly oblige.
       44        44              The rules we use are:
       45        45              1. A structure definition applies at the level where it is
       46        46                 found, unless there is a structure declaration without a
       47        47                 definition on an outer level, in which case the definition
       48        48                 is applied at that level.
       49        49              2. A selector is applied on the same level as on which its
       50        50                 structure is being defined.
       51        51
       52        52              If below struct is mentioned, union is implied (and sometimes enum
       53        53              as well).
       54        54             */
       55        55
       56        56             add_sel(stp, tp, idf, sdefpp, szp, fd)  /* this is horrible */
       57        57              register struct type *stp; /* type of the structure */
       58        58              struct type *tp;     /* type of the selector */
       59        59              register struct idf *idf;  /* idf of the selector */
       60        60              struct sdef ***sdefpp;  /* address of hook to selector definition */
       61        61              arith *szp;    /* pointer to struct size upto here */
       62        62              struct field *fd;
       63        63             {
       64        64    1         /* The selector idf with type tp is added to two chains: the
       65        65    1            selector identification chain starting at idf->id_sdef,
       66        66    1            and to the end of the member list starting at stp->tp_sdef.
       67        67    1            The address of the hook in the latest member (sdef) is
       68        68    1            given in sdefpp; the hook itself must still be empty.
       69        69    1         */
       70        70    1         arith offset;
       71        71    1        #ifndef NOBITFIELD
       72        72    1         extern arith add_field();
       73        73    1        #endif NOBITFIELD
CC.C03    File=zbc$struct:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       74        74    1
       75        75    1         struct tag *tg = stp->tp_idf->id_struct;  /* or union */
       76        76    1         struct sdef *sdef = idf->id_sdef;
       77        77    1         register struct sdef *newsdef;
       78        78    1         int lvl = tg->tg_level;
       79        79    1
       80        80    1        #ifndef NOROPTION
       81        81    1         if (options['R'] && !is_anon_idf(idf)) {
       82        82    2            /* a K & R test */
       83        83    2            if (idf->id_struct && idf->id_struct->tg_level == level)
       84        84    2               warning("%s is also a struct/union tag", idf->id_text);
       85        85    2         }
       86        86    1        #endif
       87        87    1
       88        88    1        #ifndef NOBITFIELD
       89        89    1            if (fd == 0)   {  /* no field width specified   */
       90        90    2               offset = align(*szp, tp->tp_align);
       91        91    2               field_busy = 0;
       92        92    2            }
       93        93    1            else  {
       94        94    2               /* if something is wrong, the type of the
       95        95    2                  specified selector remains unchanged; its
       96        96    2                  bitfield specifier, however, is thrown away.
       97        97    2               */
       98        98    2               offset = add_field(szp, fd, &tp, idf, stp);
       99        99    2            }
      100       100    1        #else NOBITFIELD
      101       101   *S*           offset = align(*szp, tp->tp_align);
      102       102   *S*           field_busy = 0;
      103       103   *S*       #endif NOBITFIELD
      104       104    1         if (stp->tp_fund == UNION)
      105       105    1            offset = (arith)0;
      106       106    1
      107       107    1         check_selector(idf, stp);
      108       108    1        #ifndef NOROPTION
      109       109    1         if (options['R']) {
      110       110    2            if (  sdef && sdef->sd_level == lvl &&
CC.C03    File=zbc$struct:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      111       111    2               ( sdef->sd_offset != offset || sdef->sd_type != tp )
      112       112    2            )           /* RM 8.5 */
      113       113    2               warning("selector %s redeclared", idf->id_text);
      114       114    2         }
      115       115    1        #endif
      116       116    1
      117       117    1         newsdef = new_sdef();
      118       118    1         newsdef->sd_used =  0;
      119       119    1         newsdef->sd_schema =  0;
      120       120    1         newsdef->sd_busy =  0;
      121       121    1         newsdef->sd_debmes =  0;
      122       122    1         newsdef->sd_debsdef =  (struct sdef *)0;
      123       123    1         newsdef->sd_sdef = (struct sdef *) 0;
      124       124    1
      125       125    1         /* link into selector descriptor list of this id
      126       126    1         */
      127       127    1         newsdef->next = sdef;
      128       128    1         idf->id_sdef = newsdef;
      129       129    1
      130       130    1         newsdef->sd_level = lvl;
      131       131    1         newsdef->sd_idf = idf;
      132       132    1         newsdef->sd_stype = stp;
      133       133    1         newsdef->sd_type = tp;
      134       134    1         newsdef->sd_offset = offset;
      135       135    1
      136       136    1        #ifndef NOBITFIELD
      137       137    1         if (tp->tp_fund == FIELD)
      138       138    1            tp->tp_field->fd_sdef = newsdef;
      139       139    1        #endif NOBITFIELD
      140       140    1
      141       141    1         stack_idf(idf, stack_level_of(lvl));
      142       142    1
      143       143    1         /* link into selector definition list of the struct/union
      144       144    1         */
      145       145    1         **sdefpp = newsdef;
      146       146    1         *sdefpp = &newsdef->sd_sdef;
      147       147    1
CC.C03    File=zbc$struct:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      148       148    1         /* update the size of the struct/union upward   */
      149       149    1         if (stp->tp_fund == STRUCT && fd == 0) {
      150       150    2            /* Note: the case that a bitfield is declared is
      151       151    2               handled by add_field() !
      152       152    2            */
      153       153    2            *szp = offset + size_of_type(tp, "member");
      154       154    2            stp->tp_align = lcm(stp->tp_align, tp->tp_align);
      155       155    2         }
      156       156    1         else
      157       157    1         if (stp->tp_fund == UNION) {
      158       158    2            arith sel_size = size_of_type(tp, "member");
      159       159    2
      160       160    2            if (*szp < sel_size)
      161       161    2               *szp = sel_size;
      162       162    2            stp->tp_align = lcm(stp->tp_align, tp->tp_align);
      163       163    2         }
      164       164    1        }
      165       165
      166       166             check_selector(idf, stp)
      167       167              register struct idf *idf;
      168       168              struct type *stp; /* the type of the struct */
      169       169             {
      170       170    1         /* checks if idf occurs already as a selector in
      171       171    1            struct or union *stp.
      172       172    1         */
      173       173    1         register struct sdef *sdef = stp->tp_sdef;
      174       174    1
      175       175    1         while (sdef)   {
      176       176    2            if (sdef->sd_idf == idf)
      177       177    2               error("multiple selector %s", idf->id_text);
      178       178    2            sdef = sdef->sd_sdef;
      179       179    2         }
      180       180    1        }
      181       181
      182       182             declare_struct(fund, idf, tpp)
      183       183              register struct idf *idf;
      184       184              struct type **tpp;
CC.C03    File=zbc$struct:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=6  
      185       185             {
      186       186    1         /* A struct, union or enum (depending on fund) with tag (!)
      187       187    1            idf is declared, and its type (incomplete as it may be) is
      188       188    1            returned in *tpp.
      189       189    1            The idf may be missing (i.e. idf == 0), in which case an
      190       190    1            anonymous struct etc. is defined.
      191       191    1         */
      192       192    1         extern char *symbol2str();
      193       193    1         register struct tag **tgp;
      194       194    1         register struct tag *tg;
      195       195    1
      196       196    1         if (!idf)
      197       197    1            idf = gen_idf();
      198       198    1         tgp = (fund == ENUM ? &idf->id_enum : &idf->id_struct);
      199       199    1
      200       200    1        #ifndef NOROPTION
      201       201    1         if (options['R'] && !is_anon_idf(idf)) {
      202       202    2            /* a K & R test */
      203       203    2            if (  fund != ENUM &&
      204       204    2               idf->id_sdef && idf->id_sdef->sd_level == level
      205       205    2            )  {
      206       206    3               warning("%s is also a selector", idf->id_text);
      207       207    3            }
      208       208    2            if (  fund == ENUM &&
      209       209    2               idf->id_def && idf->id_def->df_level == level
      210       210    2            )  {
      211       211    3               warning("%s is also a variable", idf->id_text);
      212       212    3            }
      213       213    2         }
      214       214    1        #endif
      215       215    1
      216       216    1         tg = *tgp;
      217       217    1         if (tg && tg->tg_type->tp_size < 0 && tg->tg_level == level && tg->tg_type->t
                               p_fund == fund) {
      218       218    2            /* An unfinished declaration has preceded it, possibly on
      219       219    2               an earlier level.  We just fill in the answer.
      220       220    2            */
CC.C03    File=zbc$struct:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=7  
      221       221    2            if (tg->tg_busy) {
      222       222    3               error("recursive declaration of struct/union %s",
      223       223    3                  idf->id_text);
      224       224    3               declare_struct(fund, gen_idf(), tpp);
      225       225    3            }
      226       226    2            else {
      227       227    3        #ifndef NOROPTION
      228       228    3               if (options['R'] && tg->tg_level != level)
      229       229    3                  warning("%s declares %s in different range",
      230       230    3                     idf->id_text, symbol2str(fund));
      231       231    3        #endif
      232       232    3               *tpp = tg->tg_type;
      233       233    3            }
      234       234    2         }
      235       235    1         else
      236       236    1         if (tg && tg->tg_level == level) {
      237       237    2            /* There is an already defined struct/union of this name
      238       238    2               on our level!
      239       239    2            */
      240       240    2            error("redeclaration of struct/union %s", idf->id_text);
      241       241    2            declare_struct(fund, gen_idf(), tpp);
      242       242    2            /* to allow a second struct_declaration_pack */
      243       243    2         }
      244       244    1         else  {
      245       245    2            /* The struct is new. */
      246       246    2            /* Hook in a new struct tag */
      247       247    2            tg = new_tag();
      248       248    2            tg->next = *tgp;
      249       249    2            *tgp = tg;
      250       250    2            tg->tg_level = level;
      251       251    2            /* and supply room for a type */
      252       252    2            tg->tg_type = create_type(fund);
      253       253    2            tg->tg_type->tp_align =
      254       254    2               fund == ENUM ? int_align :
      255       255    2               fund == STRUCT ? struct_align :
      256       256    2               /* fund == UNION */ union_align;
      257       257    2            tg->tg_type->tp_idf = idf;
CC.C03    File=zbc$struct:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=8  
      258       258    2            *tpp = tg->tg_type;
      259       259    2            stack_idf(idf, local_level);
      260       260    2         }
      261       261    1        }
      262       262
      263       263             apply_struct(fund, idf, tpp)
      264       264              register struct idf *idf;
      265       265              struct type **tpp;
      266       266             {
      267       267    1         /* The occurrence of a struct, union or enum (depending on
      268       268    1            fund) with tag idf is noted. It may or may not have been
      269       269    1            declared before. Its type (complete or incomplete) is
      270       270    1            returned in *tpp.
      271       271    1         */
      272       272    1         register struct tag **tgp;
      273       273    1
      274       274    1         tgp = (is_struct_or_union(fund) ? &idf->id_struct : &idf->id_enum);
      275       275    1
      276       276    1         if (*tgp)
      277       277    1            *tpp = (*tgp)->tg_type;
      278       278    1         else
      279       279    1            declare_struct(fund, idf, tpp);
      280       280    1        }
      281       281
      282       282             struct sdef *
      283       283             idf2sdef(idf, tp)
      284       284              register struct idf *idf;
      285       285              struct type *tp;
      286       286             {
      287       287    1         /* The identifier idf is identified as a selector, preferably
      288       288    1            in the struct tp, but we will settle for any unique
      289       289    1            identification.
      290       290    1            If the attempt fails, a selector of type error_type is
      291       291    1            created.
      292       292    1         */
      293       293    1         register struct sdef **sdefp = &idf->id_sdef, *sdef;
      294       294    1         if (tp->tp_const + tp->tp_volatile)
CC.C03    File=zbc$struct:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=9  
      295       295    1            tp = tp->tp_nqualified;
      296       296    1
      297       297    1         /* Follow chain from idf, to meet tp. */
      298       298    1         while ((sdef = *sdefp)) {
      299       299    2            if (sdef->sd_stype == tp)
      300       300    2               return sdef;
      301       301    2            sdefp = &(*sdefp)->next;
      302       302    2         }
      303       303    1
      304       304    1         /* Tp not met; any unique identification will do. */
      305       305    1         if (sdef = idf->id_sdef)   {
      306       306    2            /* There is an identification */
      307       307    2            if (uniq_selector(sdef))   {
      308       308    3               /* and it is unique, so we accept */
      309       309    3               error("selector %s applied to alien type",
      310       310    3                     idf->id_text);
      311       311    3            }
      312       312    2            else  {
      313       313    3               /* it is ambiguous */
      314       314    3               error("ambiguous use of selector %s", idf->id_text);
      315       315    3            }
      316       316    2            return sdef;
      317       317    2         }
      318       318    1
      319       319    1         /* No luck; create an error entry. */
      320       320    1         if (!is_anon_idf(idf))
      321       321    1            error("unknown selector %s", idf->id_text);
      322       322    1         *sdefp = sdef = new_sdef();
      323       323    1         sdef->sd_idf = idf;
      324       324    1         sdef->sd_debmes =  0;
      325       325    1         sdef->sd_debsdef =  (struct sdef *)0;
      326       326    1         sdef->sd_stype = sdef->sd_type = error_type;
      327       327    1         sdef->next = (struct sdef *) 0;
      328       328    1         sdef->sd_sdef = (struct sdef *) 0;
      329       329    1         sdef->sd_debmes =  0;
      330       330    1         sdef->sd_debsdef =  (struct sdef *)0;
      331       331    1         return sdef;
CC.C03    File=zbc$struct:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=10 
      332       332    1        }
      333       333
      334       334             int
      335       335             uniq_selector(idf_sdef)
      336       336              register struct sdef *idf_sdef;
      337       337             {
      338       338    1         /* Returns true if idf_sdef (which is guaranteed to exist)
      339       339    1            is unique for this level, i.e there is no other selector
      340       340    1            on this level with the same name or the other selectors
      341       341    1            with the same name have the same offset.
      342       342    1            See /usr/src/cmd/sed/sed.h for an example of this absurd
      343       343    1            case!
      344       344    1         */
      345       345    1
      346       346    1         register struct sdef *sdef = idf_sdef->next;
      347       347    1
      348       348    1         while (sdef && sdef->sd_level == idf_sdef->sd_level)  {
      349       349    2            if (  sdef->sd_type != idf_sdef->sd_type
      350       350    2            || sdef->sd_offset != idf_sdef->sd_offset
      351       351    2            )  {
      352       352    3               return 0;      /* ambiguity found */
      353       353    3            }
      354       354    2            sdef = sdef->next;
      355       355    2         }
      356       356    1         return 1;
      357       357    1        }
      358       358
      359       359             #ifndef NOBITFIELD
      360       360             arith
      361       361             add_field(szp, fd, fdtpp, idf, stp)
      362       362              arith *szp;       /* size of struct upto here   */
      363       363              register struct field *fd; /* bitfield, containing width */
      364       364              register struct type **fdtpp; /* type of selector     */
      365       365              struct idf *idf;     /* name of selector     */
      366       366              register struct type *stp; /* current struct descriptor  */
      367       367             {
      368       368    1         /* The address where this selector is put is returned. If the
CC.C03    File=zbc$struct:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=11 
      369       369    1            selector with specified width does not fit in the word, or
      370       370    1            an explicit alignment is given, a new address is needed.
      371       371    1            Note that the fields are packed into machine words (according
      372       372    1            to the RM.)
      373       373    1         */
      374       374    1        #ifdef TM_L66
      375       375    1         long bits_in_type = word_size * 9;
      376       376    1        #else
      377       377   *S*        long bits_in_type = word_size * 8;
      378       378   *S*       #endif
      379       379    1         int width = fd->fd_width;
      380       380    1         arith tp_align, tp_size;
      381       381    1         static int field_offset = (arith)0;
      382       382    1         static struct type *current_struct = 0;
      383       383    1         static struct type *current_ftp = 0;
      384       384    1         static long  current_bitsize = 0;
      385       385    1         static long bits_declared; /* nr of bits used in *field_offset */
      386       386    1
      387       387    1         if (current_struct != stp || stp->tp_fund == UNION  ||
      388       388    1             current_ftp->tp_size  != (*fdtpp)->tp_size)     {
      389       389    2            /* This struct differs from the last one
      390       390    2            */
      391       391    2            field_busy = 0;
      392       392    2            current_struct = stp;
      393       393    2            current_ftp = *fdtpp;
      394       394    2            current_bitsize = current_ftp->tp_size * 9;
      395       395    2         }
      396       396    1
      397       397    1         tp_size = current_ftp->tp_size;
      398       398    1         tp_align = current_ftp->tp_align;
      399       399    1         if (  width < 0 ||
      400       400    1            (width == 0 && !is_anon_idf(idf)) ||
      401       401    1            width > bits_in_type  ||
      402       402    1            width > current_bitsize
      403       403    1         )  {
      404       404    2            error("illegal field-width specified");
      405       405    2            *fdtpp = error_type;
CC.C03    File=zbc$struct:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=12 
      406       406    2            return field_offset;
      407       407    2         }
      408       408    1
      409       409    1         switch ((*fdtpp)->tp_fund) {
      410       410    2         case CHAR:
      411       411    2         case SHORT:
      412       412    2         case INT:
      413       413    2         case ENUM:
      414       414    2         case LONG:
      415       415    2            /* right type; size OK? */
      416       416    2            if ((*fdtpp)->tp_size > word_size) {
      417       417    3               error("bit field type %s does not fit in a word",
      418       418    3                  symbol2str((*fdtpp)->tp_fund));
      419       419    3               *fdtpp = error_type;
      420       420    3               return field_offset;
      421       421    3            }
      422       422    2            break;
      423       423    2
      424       424    2         default:
      425       425    2            /* wrong type altogether */
      426       426    2            error("illegal field type (%s)",
      427       427    2                  symbol2str((*fdtpp)->tp_fund));
      428       428    2            *fdtpp = error_type;
      429       429    2            return field_offset;
      430       430    2         }
      431       431    1
      432       432    1         if (field_busy == 0) {
      433       433    2            /* align this selector on the next boundary :
      434       434    2               the previous selector wasn't a bitfield.
      435       435    2            */
      436       436    2            if (stp->tp_fund != UNION) {
      437       437    3               field_offset = align(*szp, tp_align);
      438       438    3               *szp = field_offset + tp_size;
      439       439    3               }
      440       440    2            else if (tp_size > *szp) *szp = tp_size;
      441       441    2            stp->tp_align = lcm(stp->tp_align, tp_align);
      442       442    2            bits_declared = (arith)0;
CC.C03    File=zbc$struct:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=13 
      443       443    2            field_busy = 1;
      444       444    2         }
      445       445    1
      446       446    1         if (width > current_bitsize - bits_declared) {
      447       447    2            /* field overflow: fetch next memory unit
      448       448    2            */
      449       449    2            field_offset = align(*szp, tp_align);
      450       450    2            *szp = field_offset + tp_size;
      451       451    2            stp->tp_align = lcm(stp->tp_align, tp_align);
      452       452    2            bits_declared = width;
      453       453    2         }
      454       454    1         else
      455       455    1         if (width == 0)
      456       456    1            /* next field should be aligned on the next boundary.
      457       457    1               This will take care that no field will fit in the
      458       458    1               space allocated upto here.
      459       459    1            */
      460       460    1            bits_declared = current_bitsize + 1;
      461       461    1         else  /* the bitfield fits in the current field */
      462       462    1            bits_declared += width;
      463       463    1
      464       464    1         /* Arrived here, the place where the selector is stored in the
      465       465    1            struct is computed.
      466       466    1            Now we need a mask to use its value in expressions.
      467       467    1         */
      468       468    1         *fdtpp = construct_type(FIELD, *fdtpp, (arith)0, (struct formal*)0);
      469       469    1         (*fdtpp)->tp_field = fd;
      470       470    1
      471       471    1         /* Set the mask right shifted. This solution avoids the
      472       472    1            problem of having sign extension when using the mask for
      473       473    1            extracting the value from the field-int.
      474       474    1            Sign extension could occur on some machines when shifting
      475       475    1            the mask to the left.
      476       476    1         */
      477       477    1         fd->fd_mask = ((unsigned)1 << fd->fd_width) - 1;
      478       478    1
      479       479    1         if (options['r']) /* adjust the field at the right */
CC.C03    File=zbc$struct:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=14 
      480       480    1            fd->fd_shift = bits_declared - width;
      481       481    1         else        /* adjust the field at the left     */
      482       482    1            fd->fd_shift = current_bitsize - bits_declared;
      483       483    1
      484       484    1         return field_offset;
      485       485    1        }
      486       486             #endif NOBITFIELD
      487       487
      488       488             /* some utilities */
      489       489             int
      490       490             is_struct_or_union(fund)
      491       491              register int fund;
      492       492             {
      493       493    1         return fund == STRUCT || fund == UNION;
      494       494    1        }
      495       495
      496       496             /*  Greatest Common Divisor
      497       497              */
      498       498             int
      499       499             gcd(m, n)
      500       500              register int m, n;
      501       501             {
      502       502    1         register int r;
      503       503    1
      504       504    1         while (n)   {
      505       505    2            r = m % n;
      506       506    2            m = n;
      507       507    2            n = r;
      508       508    2         }
      509       509    1         return m;
      510       510    1        }
      511       511
      512       512             /*  Least Common Multiple
      513       513              */
      514       514             int
      515       515             lcm(m, n)
      516       516              register int m, n;
CC.C03    File=zbc$struct:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=15 
      517       517             {
      518       518    1         return m * (n / gcd(m, n));
      519       519    1        }
      520       520
---  Include file information  ---

   zbc$nobitfield:h.:ZBC3TOU. is referenced
   zbc$debug:h.:ZBC3TOU. is referenced
   zbc$botch_free:h.:ZBC3TOU. is referenced
   alloc:h.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   zbc$stack:h.:ZBC3TOU. is referenced
   zbc$idf:h.:ZBC3TOU. is referenced
   zbc$nopp:h.:ZBC3TOU. is referenced
   zbc$def:h.:ZBC3TOU. is referenced
   zbc$type:h.:ZBC3TOU. is referenced
   zbc$nofloat:h.:ZBC3TOU. is referenced
   zbc$struct:h.:ZBC3TOU. is referenced
   zbc$field:h.:ZBC3TOU. is referenced
   zbc$LLlex:h.:ZBC3TOU. is referenced
   zbc$file_info:h.:ZBC3TOU. is referenced
   zbc$Lpars:h.:ZBC3TOU. is referenced
   zbc$align:h.:ZBC3TOU. is referenced
   zbc$nocross:h.:ZBC3TOU. is referenced
   zbc$target_sizes:h.:ZBC3TOU. is referenced
   zbc$level:h.:ZBC3TOU. is referenced
   zbc$assert:h.:ZBC3TOU. is referenced
   zbc$sizes:h.:ZBC3TOU. is referenced
   zbc$noRoption:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbc$struct:c.:ZBC3TSI
