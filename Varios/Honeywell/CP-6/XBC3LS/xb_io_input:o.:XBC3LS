
PL6.E3A0      #001=FREAD File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        fread: PROC (S, P_element_size, P_elements, F);
        7        7           /*D*  NAME: fread
        8        8                 PROTOTYPE: size_t fread(void *ptr, size_t size, size_t nmemb,
        9        9                                         FILE *stream);
       10       10                 DESCRIPTION: reads 'nmemb' items of 'size' bytes from the stream
       11       11                    into the array pointed to by 'ptr'.  The number of items
       12       12                    successfully read is returned.
       13       13           */
       14       14           %INCLUDE xb_stdio_i6;
       15      257           %INCLUDE xb_errors_i6;
       16      328
       17      329    1      DCL S             CHAR (1);
       18      330    1      DCL P_element_size UBIN;
       19      331    1      DCL P_elements    UBIN;
       20      332           %File_Header (Name=F, STCLASS=" ");
       21      444           %Buffer;
       22      447
       23      448    1      DCL start                  SBIN;
       24      449    1      DCL chars_to_add           SBIN;
       25      450    1      DCL location_of_newline    SBIN;
       26      451    1      DCL element_size           SBIN;
       27      452    1      DCL element_size_P REDEF element_size  PTR;
       28      453    1      DCL elements               UBIN;
       29      454    1      DCL elements_as_ptr REDEF elements PTR;
       30      455    1      DCL chars_to_read          UBIN;
       31      456    1      DCL is_read_from_term      BIT(1)   ALIGNED;
       32      457
       33      458    1      DCL XBI_SET_STREAM_ERRNO   ENTRY (2);
       34      459    1      DCL XB_IO_ERROR            ENTRY;
       35      460    1      DCL XBI$READ_NEXT_RECORD   ENTRY (1) ALTRET;
       36      461    1      DCL XB_RETURN_ORDINAL_RESULT ENTRY (1);
       37      462    1      DCL XBI$COMPLETE_OPEN      ENTRY (1) ALTRET;
PL6.E3A0      #001=FREAD File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:2    
       38      463
       39      464    1      is_read_from_term = '0'B;
       40      465    1      goto COMMON;
       41      466
       42      467    1   fread_term: ENTRY (S, P_element_size, P_elements, F);
       43      468           /*D*  NAME: fread_term
       44      469                 PROTOTYPE: size_t fread_term(void *ptr, size_t size,
       45      470                                         size_t nmemb, FILE *stream);
       46      471                 DESCRIPTION: reads 'nmemb' items of 'size' bytes from the stream
       47      472                    into the array pointed to by 'ptr'.  The number of items
       48      473                    successfully read is returned.  This is used only when
       49      474                    the stream is associated with a terminal and this was
       50      475                    called from the unix I/O function read().
       51      476           */
       52      477
       53      478    1      is_read_from_term = '1'B;
       54      479
       55      480    1   COMMON:;
       56      481
       57      482    1      element_size_P = ADDR (P_element_size); /* hack to get element_size */
       58      483    1      elements_as_ptr = ADDR(P_elements);  /* hack to get elements */
       59      484    1      chars_to_read = element_size * elements;
       60      485    1      IF (element_size = 0) OR (elements = 0) THEN
       61      486    1         CALL XB_RETURN_ORDINAL_RESULT (0);
       62      487
       63      488    2      IF (F.auxio$ ~= ADDR(NIL)) THEN DO;
       64      489    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$AUXIO_FILE_POINTER);
       65      490    2         CALL XB_IO_ERROR;
       66      491    2      END;
       67      492
       68      493    1      IF F.is_partly_open THEN CALL XBI$COMPLETE_OPEN (F)
       69      494    2         WHENALTRETURN DO;
       70      495    2            f.is_error = '1'B;
       71      496    2            CALL XB_RETURN_ORDINAL_RESULT (0);
       72      497    2            RETURN;
       73      498    2         END;
       74      499
PL6.E3A0      #001=FREAD File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:3    
       75      500    2      IF F.state = %F_writing_state THEN DO;
       76      501    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$READ_AFTER_WRITE);
       77      502    2         F.is_error = '1'B;
       78      503    2         CALL XB_RETURN_ORDINAL_RESULT (0);
       79      504    2         RETURN;
       80      505    2      END;
       81      506    1      F.state = %F_reading_state;
       82      507
       83      508    2      IF F.is_saved_char THEN DO;
       84      509    2         F.is_saved_char = '0'B;
       85      510    2         SUBSTR (s, 0, 1) = BINASC (F.saved_char);
       86      511    2         start = 1;
       87      512    2      END;
       88      513    1         start = 0;
       89      514
       90      515    1   Try_Again:;
       91      516    2      IF F.character_position < F.ars THEN DO;
       92      517    2         chars_to_add = MINIMUM (F.ars - F.character_position,
       93      518    2            chars_to_read - start);
       94      519    2         SUBSTR (s, start, chars_to_add) = SUBSTR (buffer,
       95      520    2            F.character_position, chars_to_add);
       96      521    2         F.character_position = F.character_position + chars_to_add;
       97      522    2         start = start + chars_to_add;
       98      523    2         IF start = chars_to_read THEN
       99      524    2            CALL XB_RETURN_ORDINAL_RESULT (elements);
      100      525    2      END;
      101      526
      102      527           /* nothing left in the buffer */
      103      528
      104      529           /* we may be at eof */
      105      530
      106      531    2      IF F.is_eof THEN DO;
      107      532    2         CALL XB_RETURN_ORDINAL_RESULT (start / element_size);
      108      533    2         RETURN;
      109      534    2      END;
      110      535
      111      536    2      IF ((NOT(is_read_from_term)) OR (start = 0)) THEN DO;
PL6.E3A0      #001=FREAD File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:4    
      112      537    2         CALL XBI$READ_NEXT_RECORD (F)
      113      538    3         WHENALTRETURN DO;
      114      539    3            F.is_error = '1'B;
      115      540    3            CALL XB_RETURN_ORDINAL_RESULT (start / element_size);
      116      541    3            RETURN;
      117      542    3         END;
      118      543
      119      544    2         GOTO Try_Again;
      120      545    2      END;
      121      546    2      ELSE DO;
      122      547    2         CALL XB_RETURN_ORDINAL_RESULT (start / element_size);
      123      548    2      END;
      124      549
      125      550    1   END fread;
      126      551        %EOD;

PL6.E3A0      #001=FREAD File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:5    
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FREAD.

   Procedure FREAD requires 179 words for executable code.
   Procedure FREAD requires 18 words of local(AUTO) storage.

PL6.E3A0      #001=FREAD File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:6    
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=FREAD File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:7    
          MINI XREF LISTING

BUFFER
       445**DCL       519>>ASSIGN
CHARS_TO_ADD
       449**DCL       517<<ASSIGN    519>>ASSIGN    519>>ASSIGN    521>>ASSIGN    522>>ASSIGN
CHARS_TO_READ
       455**DCL       484<<ASSIGN    517>>ASSIGN    523>>IF
COMMON
       478**LABEL     465--GOTO
ELEMENTS
       453**DCL       454--REDEF     484>>ASSIGN    485>>IF        524<>CALL
ELEMENTS_AS_PTR
       454**DCL       483<<ASSIGN
ELEMENT_SIZE
       451**DCL       452--REDEF     484>>ASSIGN    485>>IF        532>>CALL      540>>CALL      547>>CALL
ELEMENT_SIZE_P
       452**DCL       482<<ASSIGN
F
       333**DCL         6--PROC      467--ENTRY     489<>CALL      493<>CALL      501<>CALL      537<>CALL
F.ARS
       355**DCL       516>>IF        517>>ASSIGN
F.AUXIO$
       365**DCL       488>>IF
F.BUFFER$
       357**DCL       445--IMP-PTR   519>>ASSIGN
F.BUFFER_SIZE
       358**DCL       445--IMP-SIZ   519>>ASSIGN
F.CHARACTER_POSITION
       353**DCL       516>>IF        517>>ASSIGN    519>>ASSIGN    521<<ASSIGN    521>>ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
       395**DCL       396--REDEF
F.FPT_READ.V.INDX#
       388**DCL       389--REDEF
PL6.E3A0      #001=FREAD File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:8    
F.FPT_WRITE.V.DVBYTE.VFC#
       433**DCL       434--REDEF
F.IS_EOF
       335**DCL       531>>IF
F.IS_ERROR
       340**DCL       495<<ASSIGN    502<<ASSIGN    539<<ASSIGN
F.IS_PARTLY_OPEN
       345**DCL       493>>IF
F.IS_SAVED_CHAR
       336**DCL       508>>IF        509<<ASSIGN
F.SAVED_CHAR
       351**DCL       510>>ASSIGN
F.STATE
       360**DCL       500>>IF        506<<ASSIGN
IS_READ_FROM_TERM
       456**DCL       464<<ASSIGN    478<<ASSIGN    536>>IF
P_ELEMENTS
       331**DCL         6--PROC      467--ENTRY     483--ASSIGN
P_ELEMENT_SIZE
       330**DCL         6--PROC      467--ENTRY     482--ASSIGN
S
       329**DCL         6--PROC      467--ENTRY     510<<ASSIGN    519<<ASSIGN
START
       448**DCL       511<<ASSIGN    513<<ASSIGN    517>>ASSIGN    519>>ASSIGN    522<<ASSIGN    522>>ASSIGN
       523>>IF        532>>CALL      536>>IF        540>>CALL      547>>CALL
TRY_AGAIN
       513**LABEL     544--GOTO
XB$ERR$AUXIO_FILE_POINTER
       324**DCL       489<>CALL
XB$ERR$READ_AFTER_WRITE
       300**DCL       501<>CALL
XBI$COMPLETE_OPEN
       462**DCL-ENT   493--CALL
XBI$READ_NEXT_RECORD
       460**DCL-ENT   537--CALL
XBI_SET_STREAM_ERRNO
PL6.E3A0      #001=FREAD File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:9    
       458**DCL-ENT   489--CALL      501--CALL
XB_IO_ERROR
       459**DCL-ENT   490--CALL
XB_RETURN_ORDINAL_RESULT
       461**DCL-ENT   486--CALL      496--CALL      503--CALL      524--CALL      532--CALL      540--CALL
       547--CALL

PL6.E3A0      #002=FGETS File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:10   
      127        1        /*T***********************************************************/
      128        2        /*T*                                                         */
      129        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      130        4        /*T*                                                         */
      131        5        /*T***********************************************************/
      132        6
      133        7        fgets: PROC (S, S_size_as_pointer, F);
      134        8           /*D*  NAME: fgets
      135        9                 PROTOTYPE: char *fgets (char *s, int n, FILE *stream);
      136       10                 DESCRIPTION: Reads characters from stream into the string s up to
      137       11                    and including a newline character or until n-1 characters have
      138       12                    been read.  A null character is added to the end of the string.
      139       13                    If an error occurs, then null is returned, otherwise s is
      140       14                    returned.
      141       15           */
      142       16
      143       17           %INCLUDE xb_stdio_i6;
      144      260           %INCLUDE xb_errors_i6;
      145      331
      146      332    1      DCL S             CHAR (S_size);
      147      333    1      DCL S_size_as_pointer SBIN;
      148      334           %File_Header (Name=F, STCLASS=" ");
      149      446           %Buffer;
      150      449
      151      450    1      DCL start                  SBIN;
      152      451    1      DCL chars_to_add           SBIN;
      153      452    1      DCL location_of_newline    SBIN;
      154      453    1      DCL S_size                 SBIN;
      155      454    1      DCL S_size_P REDEF S_size  PTR;
      156      455
      157      456    1      DCL XBI_SET_STREAM_ERRNO   ENTRY (2);
      158      457    1      DCL XB_IO_ERROR            ENTRY;
      159      458    1      DCL XBI$READ_NEXT_RECORD   ENTRY (1) ALTRET;
      160      459    1      DCL XB_RETURN_ORDINAL_RESULT ENTRY (1);
      161      460    1      DCL XBI$COMPLETE_OPEN      ENTRY (1) ALTRET;
      162      461
      163      462    1      S_size_P = ADDR (S_size_as_pointer); /* hack to get S_size */
PL6.E3A0      #002=FGETS File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:11   
      164      463
      165      464    2      IF (F.auxio$ ~= ADDR(NIL)) THEN DO;
      166      465    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$AUXIO_FILE_POINTER);
      167      466    2         CALL XB_IO_ERROR;
      168      467    2      END;
      169      468
      170      469    1      IF F.is_partly_open THEN CALL XBI$COMPLETE_OPEN (F)
      171      470    2         WHENALTRETURN DO;
      172      471    2            f.is_error = '1'B;
      173      472    2            CALL XB_RETURN_ORDINAL_RESULT (ADDR(NIL));
      174      473    2            RETURN;
      175      474    2         END;
      176      475
      177      476    2      IF F.state = %F_writing_state THEN DO;
      178      477    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$READ_AFTER_WRITE);
      179      478    2         F.is_error = '1'B;
      180      479    2         CALL XB_RETURN_ORDINAL_RESULT (ADDR(NIL));
      181      480    2         RETURN;
      182      481    2      END;
      183      482    1      F.state = %F_reading_state;
      184      483
      185      484    2      IF F.is_saved_char THEN DO;
      186      485    2         F.is_saved_char = '0'B;
      187      486    2         SUBSTR (s, 0, 1) = BINASC (F.saved_char);
      188      487    2         start = 1;
      189      488    2      END;
      190      489    1         start = 0;
      191      490
      192      491    1   Try_Again:;
      193      492    2      IF F.character_position < F.ars THEN DO;
      194      493    2         CALL INDEX (location_of_newline, BINASC (%newline),
      195      494    2                     SUBSTR (buffer, 0, F.ars), F.character_position)
      196      495    3            WHENRETURN DO;
      197      496    3               chars_to_add = MINIMUM (location_of_newline - F.character_position + 1,
      198      497    3                  S_size - start - 1);
      199      498    3               SUBSTR (s, start, chars_to_add) = SUBSTR (buffer,
      200      499    3                       F.character_position, chars_to_add);
PL6.E3A0      #002=FGETS File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:12   
      201      500    3               F.character_position = F.character_position + chars_to_add;
      202      501    3               start = start + chars_to_add;
      203      502    3               SUBSTR (s, start, 1) = BINASC (0);
      204      503    3               CALL XB_RETURN_ORDINAL_RESULT (ADDR (s));
      205      504    3               RETURN;
      206      505    3            END;
      207      506    3            WHENALTRETURN DO;
      208      507    3               chars_to_add = MINIMUM (F.ars - F.character_position,
      209      508    3                  S_size - start - 1);
      210      509    3               SUBSTR (s, start, chars_to_add) = SUBSTR (buffer,
      211      510    3                       F.character_position, chars_to_add);
      212      511    3               F.character_position = F.character_position + chars_to_add;
      213      512    3               start = start + chars_to_add;
      214      513    4               IF (S_size - start <= 1) THEN DO;
      215      514    4                  SUBSTR (s, start, 1) = BINASC (0);
      216      515    4                  CALL XB_RETURN_ORDINAL_RESULT (ADDR (s));
      217      516    4                  RETURN;
      218      517    4               END;
      219      518    3            END;
      220      519    2      END;
      221      520
      222      521           /* nothing left in the buffer */
      223      522
      224      523           /* we may be at eof */
      225      524
      226      525    2      IF F.is_eof THEN DO;
      227      526    2         IF start = 0 THEN
      228      527    2            CALL XB_RETURN_ORDINAL_RESULT (ADDR(NIL));
      229      528    2         ELSE
      230      529    2            CALL XB_RETURN_ORDINAL_RESULT (ADDR (S));
      231      530    2         RETURN;
      232      531    2      END;
      233      532
      234      533    1      CALL XBI$READ_NEXT_RECORD (F)
      235      534    2         WHENALTRETURN DO;
      236      535    2            F.is_error = '1'B;
      237      536    2            CALL XB_RETURN_ORDINAL_RESULT (ADDR(NIL));
PL6.E3A0      #002=FGETS File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:13   
      238      537    2            RETURN;
      239      538    2         END;
      240      539
      241      540    1      GOTO Try_Again;
      242      541
      243      542    1   END fgets;
      244      543        %EOD;

PL6.E3A0      #002=FGETS File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:14   
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FGETS.

   Procedure FGETS requires 231 words for executable code.
   Procedure FGETS requires 14 words of local(AUTO) storage.

PL6.E3A0      #002=FGETS File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:15   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=FGETS File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:16   
          MINI XREF LISTING

BUFFER
       447**DCL       493>>CALLBLT   498>>ASSIGN    509>>ASSIGN
CHARS_TO_ADD
       451**DCL       496<<ASSIGN    498>>ASSIGN    498>>ASSIGN    500>>ASSIGN    501>>ASSIGN    507<<ASSIGN
       509>>ASSIGN    509>>ASSIGN    511>>ASSIGN    512>>ASSIGN
F
       335**DCL         7--PROC      465<>CALL      469<>CALL      477<>CALL      533<>CALL
F.ARS
       357**DCL       492>>IF        493>>CALLBLT   507>>ASSIGN
F.AUXIO$
       367**DCL       464>>IF
F.BUFFER$
       359**DCL       447--IMP-PTR   493>>CALLBLT   498>>ASSIGN    509>>ASSIGN
F.BUFFER_SIZE
       360**DCL       447--IMP-SIZ   493>>CALLBLT   498>>ASSIGN    509>>ASSIGN
F.CHARACTER_POSITION
       355**DCL       492>>IF        493>>CALLBLT   496>>ASSIGN    498>>ASSIGN    500<<ASSIGN    500>>ASSIGN
       507>>ASSIGN    509>>ASSIGN    511<<ASSIGN    511>>ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
       397**DCL       398--REDEF
F.FPT_READ.V.INDX#
       390**DCL       391--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       435**DCL       436--REDEF
F.IS_EOF
       337**DCL       525>>IF
F.IS_ERROR
       342**DCL       471<<ASSIGN    478<<ASSIGN    535<<ASSIGN
F.IS_PARTLY_OPEN
       347**DCL       469>>IF
F.IS_SAVED_CHAR
       338**DCL       484>>IF        485<<ASSIGN
PL6.E3A0      #002=FGETS File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:17   
F.SAVED_CHAR
       353**DCL       486>>ASSIGN
F.STATE
       362**DCL       476>>IF        482<<ASSIGN
LOCATION_OF_NEWLINE
       452**DCL       493<<CALLBLT   496>>ASSIGN
S
       332**DCL         7--PROC      486<<ASSIGN    498<<ASSIGN    502<<ASSIGN    503--CALL      509<<ASSIGN
       514<<ASSIGN    515--CALL      529--CALL
START
       450**DCL       487<<ASSIGN    489<<ASSIGN    496>>ASSIGN    498>>ASSIGN    501<<ASSIGN    501>>ASSIGN
       502>>ASSIGN    507>>ASSIGN    509>>ASSIGN    512<<ASSIGN    512>>ASSIGN    513>>IF        514>>ASSIGN
       526>>IF
S_SIZE
       453**DCL       332--IMP-SIZ   454--REDEF     486>>ASSIGN    496>>ASSIGN    498>>ASSIGN    502>>ASSIGN
       507>>ASSIGN    509>>ASSIGN    513>>IF        514>>ASSIGN
S_SIZE_AS_POINTER
       333**DCL         7--PROC      462--ASSIGN
S_SIZE_P
       454**DCL       462<<ASSIGN
TRY_AGAIN
       489**LABEL     540--GOTO
XB$ERR$AUXIO_FILE_POINTER
       327**DCL       465<>CALL
XB$ERR$READ_AFTER_WRITE
       303**DCL       477<>CALL
XBI$COMPLETE_OPEN
       460**DCL-ENT   469--CALL
XBI$READ_NEXT_RECORD
       458**DCL-ENT   533--CALL
XBI_SET_STREAM_ERRNO
       456**DCL-ENT   465--CALL      477--CALL
XB_IO_ERROR
       457**DCL-ENT   466--CALL
XB_RETURN_ORDINAL_RESULT
       459**DCL-ENT   472--CALL      479--CALL      503--CALL      515--CALL      527--CALL      529--CALL
PL6.E3A0      #002=FGETS File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:18   
       536--CALL

PL6.E3A0      #003=GETS File=xb_io_input:6.:XBC3TSI                              FRI 01/06/95 11:28 Page:19   
      245        1        /*T***********************************************************/
      246        2        /*T*                                                         */
      247        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      248        4        /*T*                                                         */
      249        5        /*T***********************************************************/
      250        6
      251        7        gets: PROC (S);
      252        8           /*D*  NAME: gets
      253        9                 PROTOTYPE: char *fgets (char *s);
      254       10                 DESCRIPTION: Reads characters from stdin into the string s up to
      255       11                    and including a newline character.
      256       12                    A null character is added to the end of the string.
      257       13                    If an error occurs, then null is returned, otherwise s is
      258       14                    returned.
      259       15           */
      260       16
      261       17           %INCLUDE xb_stdio_i6;
      262      260           %INCLUDE xb_errors_i6;
      263      331
      264      332    1     DCL STDIN_P                        PTR SYMREF;
      265      333
      266      334    1      DCL S             CHAR (1);
      267      335
      268      336           %File_Header (Name=F, STCLASS="BASED (F$)");
      269      448    1      DCL buffer$                PTR;
      270      449    1      DCL buffer_size            UBIN;
      271      450    1      DCL buffer                 CHAR (buffer_size) BASED (buffer$);
      272      451
      273      452    1      DCL start                  SBIN;
      274      453    1      DCL chars_to_add           SBIN;
      275      454    1      DCL location_of_newline    SBIN;
      276      455    1      DCL F$                     PTR;
      277      456
      278      457    1      DCL XBI_SET_STREAM_ERRNO   ENTRY (2);
      279      458    1      DCL XBI$READ_NEXT_RECORD   ENTRY (1) ALTRET;
      280      459    1      DCL XB_RETURN_ORDINAL_RESULT ENTRY (1);
      281      460    1      DCL XBI$COMPLETE_OPEN      ENTRY (1) ALTRET;
PL6.E3A0      #003=GETS File=xb_io_input:6.:XBC3TSI                              FRI 01/06/95 11:28 Page:20   
      282      461
      283      462    1      F$ = stdin_p;
      284      463
      285      464    1      IF F.is_partly_open THEN CALL XBI$COMPLETE_OPEN (F)
      286      465    2         WHENALTRETURN DO;
      287      466    2            f.is_error = '1'B;
      288      467    2            CALL XB_RETURN_ORDINAL_RESULT (ADDR(NIL));
      289      468    2            RETURN;
      290      469    2         END;
      291      470
      292      471    1      buffer$ = F.buffer$;
      293      472    1      buffer_size = F.buffer_size;
      294      473
      295      474    2      IF F.state = %F_writing_state THEN DO;
      296      475    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$READ_AFTER_WRITE);
      297      476    2         F.is_error = '1'B;
      298      477    2         CALL XB_RETURN_ORDINAL_RESULT (ADDR(NIL));
      299      478    2         RETURN;
      300      479    2      END;
      301      480    1      F.state = %F_reading_state;
      302      481
      303      482    2      IF F.is_saved_char THEN DO;
      304      483    2         F.is_saved_char = '0'B;
      305      484    2         SUBSTR (s, 0, 1) = BINASC (F.saved_char);
      306      485    2         start = 1;
      307      486    2      END;
      308      487    1         start = 0;
      309      488
      310      489    1   Try_Again:;
      311      490    2      IF F.character_position < F.ars THEN DO;
      312      491    2         CALL INDEX (location_of_newline, BINASC (%newline),
      313      492    2                     SUBSTR (F.buffer$ -> buffer, 0, F.ars), F.character_position)
      314      493    3            WHENRETURN DO;
      315      494    3               chars_to_add = location_of_newline - F.character_position;
      316      495    3               SUBSTR (s, start, chars_to_add) = SUBSTR (F.buffer$ ->
      317      496    3                       buffer, F.character_position, chars_to_add);
      318      497    3               F.character_position = F.character_position + chars_to_add + 1;
PL6.E3A0      #003=GETS File=xb_io_input:6.:XBC3TSI                              FRI 01/06/95 11:28 Page:21   
      319      498    3               start = start + chars_to_add;
      320      499    3               SUBSTR (s, start, 1) = BINASC (0);
      321      500    3               CALL XB_RETURN_ORDINAL_RESULT (ADDR (s));
      322      501    3               RETURN;
      323      502    3            END;
      324      503    3            WHENALTRETURN DO;
      325      504    3               chars_to_add = F.ars - F.character_position;
      326      505    3               SUBSTR (s, start, chars_to_add) = SUBSTR (F.buffer$ ->
      327      506    3                       buffer, F.character_position, chars_to_add);
      328      507    3               F.character_position = F.ars;
      329      508    3               start = start + chars_to_add;
      330      509    3            END;
      331      510    2      END;
      332      511
      333      512           /* nothing left in the buffer */
      334      513
      335      514           /* we may be at eof */
      336      515
      337      516    2      IF F.is_eof THEN DO;
      338      517    2         IF start = 0 THEN
      339      518    2            CALL XB_RETURN_ORDINAL_RESULT (ADDR(NIL));
      340      519    2         ELSE
      341      520    2            CALL XB_RETURN_ORDINAL_RESULT (ADDR (S));
      342      521    2         RETURN;
      343      522    2      END;
      344      523
      345      524    1      CALL XBI$READ_NEXT_RECORD (F)
      346      525    2         WHENALTRETURN DO;
      347      526    2            F.is_error = '1'B;
      348      527    2            CALL XB_RETURN_ORDINAL_RESULT (ADDR(NIL));
      349      528    2            RETURN;
      350      529    2         END;
      351      530
      352      531    1      GOTO Try_Again;
      353      532
      354      533    1   END gets;
      355      534        %EOD;
PL6.E3A0      #003=GETS File=xb_io_input:6.:XBC3TSI                              FRI 01/06/95 11:28 Page:22   

PL6.E3A0      #003=GETS File=xb_io_input:6.:XBC3TSI                              FRI 01/06/95 11:28 Page:23   
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure GETS.

   Procedure GETS requires 177 words for executable code.
   Procedure GETS requires 12 words of local(AUTO) storage.

PL6.E3A0      #003=GETS File=xb_io_input:6.:XBC3TSI                              FRI 01/06/95 11:28 Page:24   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=GETS File=xb_io_input:6.:XBC3TSI                              FRI 01/06/95 11:28 Page:25   
          MINI XREF LISTING

BUFFER
       450**DCL       491>>CALLBLT   495>>ASSIGN    505>>ASSIGN
BUFFER$
       448**DCL       450--IMP-PTR   471<<ASSIGN
BUFFER_SIZE
       449**DCL       450--IMP-SIZ   472<<ASSIGN    491>>CALLBLT   495>>ASSIGN    505>>ASSIGN
CHARS_TO_ADD
       453**DCL       494<<ASSIGN    495>>ASSIGN    495>>ASSIGN    497>>ASSIGN    498>>ASSIGN    504<<ASSIGN
       505>>ASSIGN    505>>ASSIGN    508>>ASSIGN
F
       337**DCL       464<>CALL      475<>CALL      524<>CALL
F.ARS
       359**DCL       490>>IF        491>>CALLBLT   504>>ASSIGN    507>>ASSIGN
F.BUFFER$
       361**DCL       471>>ASSIGN    491>>CALLBLT   495>>ASSIGN    505>>ASSIGN
F.BUFFER_SIZE
       362**DCL       472>>ASSIGN
F.CHARACTER_POSITION
       357**DCL       490>>IF        491>>CALLBLT   494>>ASSIGN    495>>ASSIGN    497<<ASSIGN    497>>ASSIGN
       504>>ASSIGN    505>>ASSIGN    507<<ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
       399**DCL       400--REDEF
F.FPT_READ.V.INDX#
       392**DCL       393--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       437**DCL       438--REDEF
F.IS_EOF
       339**DCL       516>>IF
F.IS_ERROR
       344**DCL       466<<ASSIGN    476<<ASSIGN    526<<ASSIGN
F.IS_PARTLY_OPEN
       349**DCL       464>>IF
PL6.E3A0      #003=GETS File=xb_io_input:6.:XBC3TSI                              FRI 01/06/95 11:28 Page:26   
F.IS_SAVED_CHAR
       340**DCL       482>>IF        483<<ASSIGN
F.SAVED_CHAR
       355**DCL       484>>ASSIGN
F.STATE
       364**DCL       474>>IF        480<<ASSIGN
F$
       455**DCL       337--IMP-PTR   462<<ASSIGN    464>>IF        464>>CALL      466>>ASSIGN    471>>ASSIGN
       472>>ASSIGN    474>>IF        475>>CALL      476>>ASSIGN    480>>ASSIGN    482>>IF        483>>ASSIGN
       484>>ASSIGN    490>>IF        490>>IF        491>>CALLBLT   491>>CALLBLT   491>>CALLBLT   494>>ASSIGN
       495>>ASSIGN    495>>ASSIGN    497>>ASSIGN    497>>ASSIGN    504>>ASSIGN    504>>ASSIGN    505>>ASSIGN
       505>>ASSIGN    507>>ASSIGN    507>>ASSIGN    516>>IF        524>>CALL      526>>ASSIGN
LOCATION_OF_NEWLINE
       454**DCL       491<<CALLBLT   494>>ASSIGN
S
       334**DCL         7--PROC      484<<ASSIGN    495<<ASSIGN    499<<ASSIGN    500--CALL      505<<ASSIGN
       520--CALL
START
       452**DCL       485<<ASSIGN    487<<ASSIGN    495>>ASSIGN    498<<ASSIGN    498>>ASSIGN    499>>ASSIGN
       505>>ASSIGN    508<<ASSIGN    508>>ASSIGN    517>>IF
STDIN_P
       332**DCL       462>>ASSIGN
TRY_AGAIN
       487**LABEL     531--GOTO
XB$ERR$READ_AFTER_WRITE
       303**DCL       475<>CALL
XBI$COMPLETE_OPEN
       460**DCL-ENT   464--CALL
XBI$READ_NEXT_RECORD
       458**DCL-ENT   524--CALL
XBI_SET_STREAM_ERRNO
       457**DCL-ENT   475--CALL
XB_RETURN_ORDINAL_RESULT
       459**DCL-ENT   467--CALL      477--CALL      500--CALL      518--CALL      520--CALL      527--CALL

PL6.E3A0      #004=GETCHAR File=xb_io_input:6.:XBC3TSI                           FRI 01/06/95 11:28 Page:27   
      356        1        /*T***********************************************************/
      357        2        /*T*                                                         */
      358        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      359        4        /*T*                                                         */
      360        5        /*T***********************************************************/
      361        6
      362        7        getchar: PROC;
      363        8           /*D*  NAME: getchar
      364        9                 PROTOTYPE: int getchar ( );
      365       10                 DESCRIPTION: reads and returns the next character from stdin.
      366       11                    If end of file is encountered, EOF is returned.
      367       12           */
      368       13
      369       14           %INCLUDE xb_stdio_i6;
      370      257           %INCLUDE xb_errors_i6;
      371      328
      372      329    1     DCL STDIN_P                        PTR SYMREF;
      373      330
      374      331           %File_Header (Name=F, STCLASS="BASED (F$)");
      375      443    1      DCL buffer$                PTR;
      376      444    1      DCL buffer_size            UBIN;
      377      445    1      DCL buffer                 CHAR (buffer_size) BASED (buffer$);
      378      446    1      DCL F$                     PTR;
      379      447
      380      448    1      DCL XBI_SET_STREAM_ERRNO   ENTRY (2);
      381      449    1      DCL XBI$READ_NEXT_RECORD   ENTRY (1) ALTRET;
      382      450    1      DCL XB_RETURN_ORDINAL_RESULT ENTRY (1);
      383      451    1      DCL XBI$COMPLETE_OPEN      ENTRY (1) ALTRET;
      384      452
      385      453    1   zgetchar: ENTRY;
      386      454
      387      455    1      F$ = stdin_p;
      388      456
      389      457    1      IF F.is_partly_open THEN CALL XBI$COMPLETE_OPEN (F)
      390      458    2         WHENALTRETURN DO;
      391      459    2            f.is_error = '1'B;
      392      460    2            CALL XB_RETURN_ORDINAL_RESULT (%EOF);
PL6.E3A0      #004=GETCHAR File=xb_io_input:6.:XBC3TSI                           FRI 01/06/95 11:28 Page:28   
      393      461    2            RETURN;
      394      462    2         END;
      395      463
      396      464    1      buffer$ = F.buffer$;
      397      465    1      buffer_size = F.buffer_size;
      398      466
      399      467    2      IF F.state = %F_writing_state THEN DO;
      400      468    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$READ_AFTER_WRITE);
      401      469    2         F.is_error = '1'B;
      402      470    2         CALL XB_RETURN_ORDINAL_RESULT (%EOF);
      403      471    2         RETURN;
      404      472    2      END;
      405      473    1      F.state = %F_reading_state;
      406      474
      407      475    2      IF F.is_saved_char THEN DO;
      408      476    2         F.is_saved_char = '0'B;
      409      477    2         CALL XB_RETURN_ORDINAL_RESULT (F.saved_char);
      410      478    2         RETURN;
      411      479    2      END;
      412      480
      413      481    1   Try_Again:;
      414      482    2      IF F.character_position < F.ars THEN DO;
      415      483    2         F.character_position = F.character_position + 1;
      416      484    2         CALL XB_RETURN_ORDINAL_RESULT (ASCBIN (SUBSTR (F.buffer$ -> buffer,
      417      485    2                                        F.character_position - 1, 1)));
      418      486    2         RETURN;
      419      487    2      END;
      420      488
      421      489           /* nothing left in the buffer */
      422      490
      423      491           /* we may be at eof */
      424      492
      425      493    2      IF F.is_eof THEN DO;
      426      494    2         CALL XB_RETURN_ORDINAL_RESULT (%EOF); /*UGLY FUNCTION RESULT */
      427      495    2         RETURN;
      428      496    2      END;
      429      497
PL6.E3A0      #004=GETCHAR File=xb_io_input:6.:XBC3TSI                           FRI 01/06/95 11:28 Page:29   
      430      498    1      CALL XBI$READ_NEXT_RECORD (F)
      431      499    2         WHENALTRETURN DO;
      432      500    2            F.is_error = '1'B;
      433      501    2            CALL XB_RETURN_ORDINAL_RESULT (%EOF);
      434      502    2            RETURN;
      435      503    2         END;
      436      504
      437      505    1      GOTO Try_Again;
      438      506
      439      507    1   END getchar;
      440      508        %EOD;

PL6.E3A0      #004=GETCHAR File=xb_io_input:6.:XBC3TSI                           FRI 01/06/95 11:28 Page:30   
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure GETCHAR.

   Procedure GETCHAR requires 102 words for executable code.
   Procedure GETCHAR requires 10 words of local(AUTO) storage.

PL6.E3A0      #004=GETCHAR File=xb_io_input:6.:XBC3TSI                           FRI 01/06/95 11:28 Page:31   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=GETCHAR File=xb_io_input:6.:XBC3TSI                           FRI 01/06/95 11:28 Page:32   
          MINI XREF LISTING

BUFFER
       445**DCL       484<>CALL
BUFFER$
       443**DCL       445--IMP-PTR   464<<ASSIGN
BUFFER_SIZE
       444**DCL       445--IMP-SIZ   465<<ASSIGN    484>>CALL
F
       332**DCL       457<>CALL      468<>CALL      498<>CALL
F.ARS
       354**DCL       482>>IF
F.BUFFER$
       356**DCL       464>>ASSIGN    484>>CALL
F.BUFFER_SIZE
       357**DCL       465>>ASSIGN
F.CHARACTER_POSITION
       352**DCL       482>>IF        483<<ASSIGN    483>>ASSIGN    484>>CALL
F.FPT_READ.V.DVBYTE.REREAD#
       394**DCL       395--REDEF
F.FPT_READ.V.INDX#
       387**DCL       388--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       432**DCL       433--REDEF
F.IS_EOF
       334**DCL       493>>IF
F.IS_ERROR
       339**DCL       459<<ASSIGN    469<<ASSIGN    500<<ASSIGN
F.IS_PARTLY_OPEN
       344**DCL       457>>IF
F.IS_SAVED_CHAR
       335**DCL       475>>IF        476<<ASSIGN
F.SAVED_CHAR
       350**DCL       477<>CALL
PL6.E3A0      #004=GETCHAR File=xb_io_input:6.:XBC3TSI                           FRI 01/06/95 11:28 Page:33   
F.STATE
       359**DCL       467>>IF        473<<ASSIGN
F$
       446**DCL       332--IMP-PTR   455<<ASSIGN    457>>IF        457>>CALL      459>>ASSIGN    464>>ASSIGN
       465>>ASSIGN    467>>IF        468>>CALL      469>>ASSIGN    473>>ASSIGN    475>>IF        476>>ASSIGN
       477>>CALL      482>>IF        482>>IF        483>>ASSIGN    483>>ASSIGN    484>>CALL      484>>CALL
       493>>IF        498>>CALL      500>>ASSIGN
STDIN_P
       329**DCL       455>>ASSIGN
TRY_AGAIN
       475**LABEL     505--GOTO
XB$ERR$READ_AFTER_WRITE
       300**DCL       468<>CALL
XBI$COMPLETE_OPEN
       451**DCL-ENT   457--CALL
XBI$READ_NEXT_RECORD
       449**DCL-ENT   498--CALL
XBI_SET_STREAM_ERRNO
       448**DCL-ENT   468--CALL
XB_RETURN_ORDINAL_RESULT
       450**DCL-ENT   460--CALL      470--CALL      477--CALL      484--CALL      494--CALL      501--CALL

PL6.E3A0      #005=FGETC File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:34   
      441        1        /*T***********************************************************/
      442        2        /*T*                                                         */
      443        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      444        4        /*T*                                                         */
      445        5        /*T***********************************************************/
      446        6
      447        7        fgetc: PROC (F);
      448        8           /*D*  NAME: fgetc
      449        9                 PROTOTYPE: int fgetc (FILE *stream);
      450       10                 DESCRIPTION: reads and returns the next character from stream.
      451       11                    If end of file is encountered, EOF is returned.
      452       12           */
      453       13
      454       14           %INCLUDE xb_stdio_i6;
      455      257           %INCLUDE xb_errors_i6;
      456      328
      457      329           %File_Header (Name=F, STCLASS=" ");
      458      441           %Buffer;
      459      444
      460      445    1      DCL XBI_SET_STREAM_ERRNO   ENTRY (2);
      461      446    1      DCL XB_IO_ERROR            ENTRY;
      462      447    1      DCL XBI$READ_NEXT_RECORD   ENTRY (1) ALTRET;
      463      448    1      DCL XB_RETURN_ORDINAL_RESULT ENTRY (1);
      464      449    1      DCL XBI$COMPLETE_OPEN      ENTRY (1) ALTRET;
      465      450
      466      451    1   getc: ENTRY (F);
      467      452           /*D*  NAME: getc
      468      453                 PROTOTYPE: int getc (FILE *stream);
      469      454                 DESCRIPTION: reads and returns the next character from stream.
      470      455                    If end of file is encountered, EOF is returned.
      471      456           */
      472      457
      473      458    1   zgetc: ENTRY (F);
      474      459           /*D*  NAME: _getc
      475      460                 PROTOTYPE: int _getc (FILE *stream);
      476      461                 DESCRIPTION: reads and returns the next character from stream.
      477      462                    If end of file is encountered, EOF is returned.
PL6.E3A0      #005=FGETC File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:35   
      478      463           */
      479      464
      480      465    2      IF (F.auxio$ ~= ADDR(NIL)) THEN DO;
      481      466    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$AUXIO_FILE_POINTER);
      482      467    2         CALL XB_IO_ERROR;
      483      468    2      END;
      484      469
      485      470    1      IF F.is_partly_open THEN CALL XBI$COMPLETE_OPEN (F)
      486      471    2         WHENALTRETURN DO;
      487      472    2            f.is_error = '1'B;
      488      473    2            CALL XB_RETURN_ORDINAL_RESULT (%EOF);
      489      474    2            RETURN;
      490      475    2         END;
      491      476
      492      477    2      IF F.state = %F_writing_state THEN DO;
      493      478    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$READ_AFTER_WRITE);
      494      479    2         F.is_error = '1'B;
      495      480    2         CALL XB_RETURN_ORDINAL_RESULT (%EOF);
      496      481    2         RETURN;
      497      482    2      END;
      498      483    1      F.state = %F_reading_state;
      499      484
      500      485    2      IF F.is_saved_char THEN DO;
      501      486    2         F.is_saved_char = '0'B;
      502      487    2         CALL XB_RETURN_ORDINAL_RESULT (F.saved_char);
      503      488    2         RETURN;
      504      489    2      END;
      505      490
      506      491    1   Try_Again:;
      507      492    2      IF F.character_position < F.ars THEN DO;
      508      493    2         F.character_position = F.character_position + 1;
      509      494    2         CALL XB_RETURN_ORDINAL_RESULT (ASCBIN (SUBSTR (F.buffer$ -> buffer,
      510      495    2                                        F.character_position - 1, 1)));
      511      496    2         RETURN;
      512      497    2      END;
      513      498
      514      499           /* nothing left in the buffer */
PL6.E3A0      #005=FGETC File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:36   
      515      500
      516      501           /* we may be at eof */
      517      502
      518      503    2      IF F.is_eof THEN DO;
      519      504    2         CALL XB_RETURN_ORDINAL_RESULT (%EOF); /*UGLY FUNCTION RESULT */
      520      505    2         RETURN;
      521      506    2      END;
      522      507
      523      508    1      CALL XBI$READ_NEXT_RECORD (F)
      524      509    2         WHENALTRETURN DO;
      525      510    2            F.is_error = '1'B;
      526      511    2            CALL XB_RETURN_ORDINAL_RESULT (%EOF);
      527      512    2            RETURN;
      528      513    2         END;
      529      514
      530      515    1      GOTO Try_Again;
      531      516
      532      517    1   END fgetc;
      533      518        %EOD;

PL6.E3A0      #005=FGETC File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:37   
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FGETC.

   Procedure FGETC requires 114 words for executable code.
   Procedure FGETC requires 8 words of local(AUTO) storage.

PL6.E3A0      #005=FGETC File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:38   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=FGETC File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:39   
          MINI XREF LISTING

BUFFER
       442**DCL       494<>CALL
F
       330**DCL         7--PROC      451--ENTRY     458--ENTRY     466<>CALL      470<>CALL      478<>CALL
       508<>CALL
F.ARS
       352**DCL       492>>IF
F.AUXIO$
       362**DCL       465>>IF
F.BUFFER$
       354**DCL       442--IMP-PTR   494>>CALL
F.BUFFER_SIZE
       355**DCL       442--IMP-SIZ   494>>CALL
F.CHARACTER_POSITION
       350**DCL       492>>IF        493<<ASSIGN    493>>ASSIGN    494>>CALL
F.FPT_READ.V.DVBYTE.REREAD#
       392**DCL       393--REDEF
F.FPT_READ.V.INDX#
       385**DCL       386--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       430**DCL       431--REDEF
F.IS_EOF
       332**DCL       503>>IF
F.IS_ERROR
       337**DCL       472<<ASSIGN    479<<ASSIGN    510<<ASSIGN
F.IS_PARTLY_OPEN
       342**DCL       470>>IF
F.IS_SAVED_CHAR
       333**DCL       485>>IF        486<<ASSIGN
F.SAVED_CHAR
       348**DCL       487<>CALL
F.STATE
PL6.E3A0      #005=FGETC File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:40   
       357**DCL       477>>IF        483<<ASSIGN
TRY_AGAIN
       485**LABEL     515--GOTO
XB$ERR$AUXIO_FILE_POINTER
       324**DCL       466<>CALL
XB$ERR$READ_AFTER_WRITE
       300**DCL       478<>CALL
XBI$COMPLETE_OPEN
       449**DCL-ENT   470--CALL
XBI$READ_NEXT_RECORD
       447**DCL-ENT   508--CALL
XBI_SET_STREAM_ERRNO
       445**DCL-ENT   466--CALL      478--CALL
XB_IO_ERROR
       446**DCL-ENT   467--CALL
XB_RETURN_ORDINAL_RESULT
       448**DCL-ENT   473--CALL      480--CALL      487--CALL      494--CALL      504--CALL      511--CALL

PL6.E3A0      #006=GETW File=xb_io_input:6.:XBC3TSI                              FRI 01/06/95 11:28 Page:41   
      534        1        /*T***********************************************************/
      535        2        /*T*                                                         */
      536        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      537        4        /*T*                                                         */
      538        5        /*T***********************************************************/
      539        6
      540        7        getw: PROC (F);
      541        8        /*D*  NAME: getw
      542        9              PROTOTYPE: int getw (FILE *stream);
      543       10              DESCRIPTION: reads and returns the next word(4 byte) from stream
      544       11                           If end of file is encountered, EOF is returned.
      545       12        */
      546       13
      547       14        %INCLUDE xb_stdio_i6;
      548      257        %INCLUDE xb_errors_i6;
      549      328
      550      329        /*    Parameter declarations  */
      551      330
      552      331        %File_Header (Name=F, STCLASS=" ");
      553      443        %Buffer;
      554      446
      555      447        /*    Function declarations   */
      556      448
      557      449    1   DCL   XBI_SET_STREAM_ERRNO       ENTRY (2);
      558      450    1   DCL   XB_IO_ERROR                ENTRY;
      559      451    1   DCL   XBI$READ_NEXT_RECORD       ENTRY (1) ALTRET;
      560      452    1   DCL   XB_RETURN_ORDINAL_RESULT   ENTRY (1);
      561      453    1   DCL   XBI$COMPLETE_OPEN          ENTRY (1) ALTRET;
      562      454
      563      455        /*    Local declarations      */
      564      456
      565      457    1   DCL   word_val       SBIN;
      566      458    1   DCL   char_val       REDEF    word_val    CHAR(4);
      567      459    1   DCL   i              SBIN;
      568      460    1   DCL   start_val      SBIN;
      569      461
      570      462        /*    Check for error conditions and set up early junk for file     */
PL6.E3A0      #006=GETW File=xb_io_input:6.:XBC3TSI                              FRI 01/06/95 11:28 Page:42   
      571      463
      572      464    2      IF (F.auxio$ ~= ADDR(NIL)) THEN DO;
      573      465    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$AUXIO_FILE_POINTER);
      574      466    2         CALL XB_IO_ERROR;
      575      467    2      END;
      576      468
      577      469    2      IF F.is_partly_open THEN DO;
      578      470    3         CALL XBI$COMPLETE_OPEN (F) WHENALTRETURN DO;
      579      471    3            f.is_error = '1'B;
      580      472    3            CALL XB_RETURN_ORDINAL_RESULT (%EOF);
      581      473    3         END;
      582      474    2      END;
      583      475
      584      476    2      IF F.state = %F_writing_state THEN DO;
      585      477    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$READ_AFTER_WRITE);
      586      478    2         F.is_error = '1'B;
      587      479    2         CALL XB_RETURN_ORDINAL_RESULT (%EOF);
      588      480    2      END;
      589      481    1      F.state = %F_reading_state;
      590      482
      591      483        /*    Check to see if a character was saved off via a ungetc and
      592      484              put it as the first character in the returned val             */
      593      485
      594      486    1      start_val = 0;
      595      487    2      IF F.is_saved_char THEN DO;
      596      488    2         F.is_saved_char = '0'B;
      597      489    2         SUBSTR(char_val, 0, 1) = BINASC (F.saved_char);
      598      490    2         start_val = 1;
      599      491    2      END;
      600      492
      601      493        /*    Loop through the number of times necessary to get the value   */
      602      494
      603      495    2      DO i = start_val TO 3;
      604      496    2   Try_Again:;
      605      497    3         IF F.character_position < F.ars THEN DO;
      606      498    3            SUBSTR(char_val, i, 1) = SUBSTR(F.buffer$->buffer, F.character_position, 1)
               498                     ;
PL6.E3A0      #006=GETW File=xb_io_input:6.:XBC3TSI                              FRI 01/06/95 11:28 Page:43   
      607      499    3            F.character_position = F.character_position + 1;
      608      500    3         END;
      609      501    3         ELSE DO;
      610      502
      611      503        /*    nothing left in the buffer we may want read the next record if
      612      504              it is not already at EOF                                      */
      613      505
      614      506    4            IF F.is_eof THEN DO;
      615      507    4               CALL XB_RETURN_ORDINAL_RESULT (%EOF);
      616      508    4            END;
      617      509
      618      510    4            CALL XBI$READ_NEXT_RECORD (F) WHENALTRETURN DO;
      619      511    4               F.is_error = '1'B;
      620      512    4               CALL XB_RETURN_ORDINAL_RESULT (%EOF);
      621      513    4            END;
      622      514
      623      515    3            GOTO Try_Again;
      624      516    3         END;
      625      517    2      END;
      626      518
      627      519    1      CALL XB_RETURN_ORDINAL_RESULT (word_val);
      628      520
      629      521    1   END getw;
      630      522        %EOD;

PL6.E3A0      #006=GETW File=xb_io_input:6.:XBC3TSI                              FRI 01/06/95 11:28 Page:44   
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure GETW.

   Procedure GETW requires 112 words for executable code.
   Procedure GETW requires 10 words of local(AUTO) storage.

PL6.E3A0      #006=GETW File=xb_io_input:6.:XBC3TSI                              FRI 01/06/95 11:28 Page:45   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=GETW File=xb_io_input:6.:XBC3TSI                              FRI 01/06/95 11:28 Page:46   
          MINI XREF LISTING

BUFFER
       444**DCL       498>>ASSIGN
CHAR_VAL
       458**DCL       489<<ASSIGN    498<<ASSIGN
F
       332**DCL         7--PROC      465<>CALL      470<>CALL      477<>CALL      510<>CALL
F.ARS
       354**DCL       497>>IF
F.AUXIO$
       364**DCL       464>>IF
F.BUFFER$
       356**DCL       444--IMP-PTR   498>>ASSIGN
F.BUFFER_SIZE
       357**DCL       444--IMP-SIZ   498>>ASSIGN
F.CHARACTER_POSITION
       352**DCL       497>>IF        498>>ASSIGN    499<<ASSIGN    499>>ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
       394**DCL       395--REDEF
F.FPT_READ.V.INDX#
       387**DCL       388--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       432**DCL       433--REDEF
F.IS_EOF
       334**DCL       506>>IF
F.IS_ERROR
       339**DCL       471<<ASSIGN    478<<ASSIGN    511<<ASSIGN
F.IS_PARTLY_OPEN
       344**DCL       469>>IF
F.IS_SAVED_CHAR
       335**DCL       487>>IF        488<<ASSIGN
F.SAVED_CHAR
       350**DCL       489>>ASSIGN
PL6.E3A0      #006=GETW File=xb_io_input:6.:XBC3TSI                              FRI 01/06/95 11:28 Page:47   
F.STATE
       359**DCL       476>>IF        481<<ASSIGN
I
       459**DCL       495<<DOINDEX   498>>ASSIGN
START_VAL
       460**DCL       486<<ASSIGN    490<<ASSIGN    495>>DOINDEX
TRY_AGAIN
       495**LABEL     515--GOTO
WORD_VAL
       457**DCL       458--REDEF     519<>CALL
XB$ERR$AUXIO_FILE_POINTER
       324**DCL       465<>CALL
XB$ERR$READ_AFTER_WRITE
       300**DCL       477<>CALL
XBI$COMPLETE_OPEN
       453**DCL-ENT   470--CALL
XBI$READ_NEXT_RECORD
       451**DCL-ENT   510--CALL
XBI_SET_STREAM_ERRNO
       449**DCL-ENT   465--CALL      477--CALL
XB_IO_ERROR
       450**DCL-ENT   466--CALL
XB_RETURN_ORDINAL_RESULT
       452**DCL-ENT   472--CALL      479--CALL      507--CALL      512--CALL      519--CALL

PL6.E3A0      #007=FSCANF File=xb_io_input:6.:XBC3TSI                            FRI 01/06/95 11:28 Page:48   
      631        1        /*T***********************************************************/
      632        2        /*T*                                                         */
      633        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      634        4        /*T*                                                         */
      635        5        /*T***********************************************************/
      636        6
      637        7        fscanf: PROC MATERIALIZE ($PR0 IN argument_block$,
      638        8                                   $PR1 IN descriptor_block$);
      639        9           /*D*  NAME: fscanf
      640       10                 PROTOTYPE: int fscanf (FILE *stream, const char *format, ... );
      641       11                 DESCRIPTION: Reads items from stream under format control.
      642       12           */
      643       13
      644       14           %INCLUDE B$OBJECT_C;
      645     3444           %INCLUDE xb_stdio_i6;
      646     3687
      647     3688    1      DCL argument_block$           PTR;
      648     3689    1      DCL descriptor_block$         PTR;
      649     3690
      650     3691    1      DCL result                    SBIN;
      651     3692    1      DCL based_char                CHAR(1) BASED;
      652     3693    1      DCL based_ptr (0:1)           PTR BASED (argument_block$);
      653     3694
      654     3695    1      DCL XBI$SCAN                 ENTRY (6);
      655     3696    1      DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      656     3697
      657     3698           %B$DESC_LIST (STCLASS="BASED (descriptor_block$)");
      658     3835           %File_Header (Name=F, Stclass=BASED);
      659     3947
      660     3948    1      CALL XBI$SCAN (based_ptr (1) -> based_char,
      661     3949    1                      ADDR(based_ptr (2)),
      662     3950    1                      B$DESC_LIST.NUMBER_OF_ARGS - 2,
      663     3951    1                      based_ptr (0) -> based_char, /* no string */, result);
      664     3952    1      CALL XB_RETURN_ORDINAL_RESULT (result);
      665     3953    1   END fscanf;
      666     3954        %EOD;

PL6.E3A0      #007=FSCANF File=xb_io_input:6.:XBC3TSI                            FRI 01/06/95 11:28 Page:49   
--  Include file information  --

   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   B$OBJECT_C.:LIB_E04  is referenced.
      No diagnostics issued in procedure FSCANF.

   Procedure FSCANF requires 34 words for executable code.
   Procedure FSCANF requires 14 words of local(AUTO) storage.

PL6.E3A0      #007=FSCANF File=xb_io_input:6.:XBC3TSI                            FRI 01/06/95 11:28 Page:50   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=FSCANF File=xb_io_input:6.:XBC3TSI                            FRI 01/06/95 11:28 Page:51   
          MINI XREF LISTING

ARGUMENT_BLOCK$
      3688**DCL         7--MATRLIZ  3693--IMP-PTR  3948>>CALL     3948>>CALL     3948>>CALL
B$DESC_EXT.LARGE_SIZE
      3819**DCL      3823--REDEF    3828--REDEF
B$DESC_LIST.DESC_WORDS.ARG_SIZE
      3767**DCL      3773--REDEF    3781--REDEF
B$DESC_LIST.NUMBER_OF_ARGS
      3700**DCL      3948>>CALL
BASED_CHAR
      3692**DCL      3948<>CALL     3948<>CALL
BASED_PTR
      3693**DCL      3948>>CALL     3948--CALL     3948>>CALL
DESCRIPTOR_BLOCK$
      3689**DCL         7--MATRLIZ  3699--IMP-PTR  3948>>CALL
F.FPT_READ.V.DVBYTE.REREAD#
      3898**DCL      3899--REDEF
F.FPT_READ.V.INDX#
      3891**DCL      3892--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
      3936**DCL      3937--REDEF
RESULT
      3691**DCL      3948<>CALL     3952<>CALL
XBI$SCAN
      3695**DCL-ENT  3948--CALL
XB_RETURN_ORDINAL_RESULT
      3696**DCL-ENT  3952--CALL

PL6.E3A0      #008=SCANF File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:52   
      667        1        /*T***********************************************************/
      668        2        /*T*                                                         */
      669        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      670        4        /*T*                                                         */
      671        5        /*T***********************************************************/
      672        6
      673        7        scanf: PROC MATERIALIZE ($PR0 IN argument_block$,
      674        8                                   $PR1 IN descriptor_block$);
      675        9           /*D*  NAME: scanf
      676       10                 PROTOTYPE: int scanf (const char *format, ... );
      677       11                 DESCRIPTION: Reads items from stdin under format control.
      678       12           */
      679       13
      680       14           %INCLUDE B$OBJECT_C;
      681     3444           %INCLUDE xb_stdio_i6;
      682     3687
      683     3688    1     DCL STDIN_P                        PTR SYMREF;
      684     3689
      685     3690    1      DCL argument_block$           PTR;
      686     3691    1      DCL descriptor_block$         PTR;
      687     3692
      688     3693    1      DCL result                    SBIN;
      689     3694    1      DCL based_char                CHAR(1) BASED;
      690     3695    1      DCL based_ptr (0:1)           PTR BASED (argument_block$);
      691     3696    1      DCL F$                        PTR;
      692     3697
      693     3698    1      DCL XBI$SCAN                 ENTRY (6);
      694     3699    1      DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      695     3700
      696     3701           %B$DESC_LIST (STCLASS="BASED (descriptor_block$)");
      697     3838           %File_Header (Name=F, Stclass="BASED (F$)");
      698     3950
      699     3951    1      F$ = stdin_p;
      700     3952    1      CALL XBI$SCAN (based_ptr (0) -> based_char,
      701     3953    1                      ADDR(based_ptr (1)),
      702     3954    1                      B$DESC_LIST.NUMBER_OF_ARGS - 1,
      703     3955    1                      F, /* no string */, result);
PL6.E3A0      #008=SCANF File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:53   
      704     3956    1      CALL XB_RETURN_ORDINAL_RESULT (result);
      705     3957    1   END scanf;
      706     3958        %EOD;

PL6.E3A0      #008=SCANF File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:54   
--  Include file information  --

   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   B$OBJECT_C.:LIB_E04  is referenced.
      No diagnostics issued in procedure SCANF.

   Procedure SCANF requires 36 words for executable code.
   Procedure SCANF requires 16 words of local(AUTO) storage.

PL6.E3A0      #008=SCANF File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:55   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=SCANF File=xb_io_input:6.:XBC3TSI                             FRI 01/06/95 11:28 Page:56   
          MINI XREF LISTING

ARGUMENT_BLOCK$
      3690**DCL         7--MATRLIZ  3695--IMP-PTR  3952>>CALL     3952>>CALL
B$DESC_EXT.LARGE_SIZE
      3822**DCL      3826--REDEF    3831--REDEF
B$DESC_LIST.DESC_WORDS.ARG_SIZE
      3770**DCL      3776--REDEF    3784--REDEF
B$DESC_LIST.NUMBER_OF_ARGS
      3703**DCL      3952>>CALL
BASED_CHAR
      3694**DCL      3952<>CALL
BASED_PTR
      3695**DCL      3952>>CALL     3952--CALL
DESCRIPTOR_BLOCK$
      3691**DCL         7--MATRLIZ  3702--IMP-PTR  3952>>CALL
F
      3839**DCL      3952<>CALL
F.FPT_READ.V.DVBYTE.REREAD#
      3901**DCL      3902--REDEF
F.FPT_READ.V.INDX#
      3894**DCL      3895--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
      3939**DCL      3940--REDEF
F$
      3696**DCL      3839--IMP-PTR  3951<<ASSIGN   3952>>CALL
RESULT
      3693**DCL      3952<>CALL     3956<>CALL
STDIN_P
      3688**DCL      3951>>ASSIGN
XBI$SCAN
      3698**DCL-ENT  3952--CALL
XB_RETURN_ORDINAL_RESULT
      3699**DCL-ENT  3956--CALL

PL6.E3A0      #009=SSCANF File=xb_io_input:6.:XBC3TSI                            FRI 01/06/95 11:28 Page:57   
      707        1        /*T***********************************************************/
      708        2        /*T*                                                         */
      709        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      710        4        /*T*                                                         */
      711        5        /*T***********************************************************/
      712        6
      713        7        sscanf: PROC MATERIALIZE ($PR0 IN argument_block$,
      714        8                                   $PR1 IN descriptor_block$);
      715        9           /*D*  NAME: sscanf
      716       10                 PROTOTYPE: int sscanf (char *s, const char *format, ... );
      717       11                 DESCRIPTION: Reads items from string s under format control.
      718       12           */
      719       13
      720       14           %INCLUDE B$OBJECT_C;
      721     3444           %INCLUDE xb_stdio_i6;
      722     3687
      723     3688    1      DCL argument_block$           PTR;
      724     3689    1      DCL descriptor_block$         PTR;
      725     3690
      726     3691    1      DCL result                    SBIN;
      727     3692    1      DCL based_char                CHAR(1) BASED;
      728     3693    1      DCL based_ptr (0:1)           PTR BASED (argument_block$);
      729     3694
      730     3695    1      DCL XBI$SCAN                 ENTRY (6);
      731     3696    1      DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      732     3697
      733     3698           %B$DESC_LIST (STCLASS="BASED (descriptor_block$)");
      734     3835           %File_Header (Name=F, Stclass=BASED);
      735     3947
      736     3948    1      CALL XBI$SCAN (based_ptr (1) -> based_char,
      737     3949    1                      ADDR(based_ptr (2)),
      738     3950    1                      B$DESC_LIST.NUMBER_OF_ARGS - 2,
      739     3951    1                      /* no file */, based_ptr (0) -> based_char, result);
      740     3952    1      CALL XB_RETURN_ORDINAL_RESULT (result);
      741     3953    1   END sscanf;

PL6.E3A0      #009=SSCANF File=xb_io_input:6.:XBC3TSI                            FRI 01/06/95 11:28 Page:58   
--  Include file information  --

   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   B$OBJECT_C.:LIB_E04  is referenced.
      No diagnostics issued in procedure SSCANF.

   Procedure SSCANF requires 34 words for executable code.
   Procedure SSCANF requires 14 words of local(AUTO) storage.

    No errors detected in file xb_io_input:6.:XBC3TSI    .

PL6.E3A0      #009=SSCANF File=xb_io_input:6.:XBC3TSI                            FRI 01/06/95 11:28 Page:59   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #009=SSCANF File=xb_io_input:6.:XBC3TSI                            FRI 01/06/95 11:28 Page:60   
          MINI XREF LISTING

ARGUMENT_BLOCK$
      3688**DCL         7--MATRLIZ  3693--IMP-PTR  3948>>CALL     3948>>CALL     3948>>CALL
B$DESC_EXT.LARGE_SIZE
      3819**DCL      3823--REDEF    3828--REDEF
B$DESC_LIST.DESC_WORDS.ARG_SIZE
      3767**DCL      3773--REDEF    3781--REDEF
B$DESC_LIST.NUMBER_OF_ARGS
      3700**DCL      3948>>CALL
BASED_CHAR
      3692**DCL      3948<>CALL     3948<>CALL
BASED_PTR
      3693**DCL      3948>>CALL     3948--CALL     3948>>CALL
DESCRIPTOR_BLOCK$
      3689**DCL         7--MATRLIZ  3699--IMP-PTR  3948>>CALL
F.FPT_READ.V.DVBYTE.REREAD#
      3898**DCL      3899--REDEF
F.FPT_READ.V.INDX#
      3891**DCL      3892--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
      3936**DCL      3937--REDEF
RESULT
      3691**DCL      3948<>CALL     3952<>CALL
XBI$SCAN
      3695**DCL-ENT  3948--CALL
XB_RETURN_ORDINAL_RESULT
      3696**DCL-ENT  3952--CALL
