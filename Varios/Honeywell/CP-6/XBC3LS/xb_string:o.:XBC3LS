
PL6.E3A0      #001=STRPBRK File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:41 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        strpbrk: PROC (string, set);
        7        7
        8        8        /*D* PROTOTYPE:   char *strpbrk (char *s1, *set);
        9        9             DESCRIPTION: searches the string s1 for the first character that
       10       10                          is in the string set skipping over characters that are
       11       11                          not in the set. The value returned is a pointer to the
       12       12                          first character found from set.
       13       13             RAP Oct 4, 1988
       14       14        */
       15       15
       16       16        %INCLUDE CP_6;
       17     5576
       18     5577    1   DCL string CHAR(length_string);
       19     5578    1   DCL set CHAR(length_set);
       20     5579    1   DCL length_string SBIN;
       21     5580    1   DCL length_set SBIN;
       22     5581    1   DCL temp_counter UBIN;
       23     5582    1   DCL throw_away UBIN;
       24     5583
       25     5584    1   DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
       26     5585    1   DCL XBI$STRLEN                ENTRY (2);
       27     5586
       28     5587    1   CALL XBI$STRLEN (string, length_string);
       29     5588    1   IF (length_string=0) THEN CALL XB_RETURN_ORDINAL_RESULT(ADDR(NIL));
       30     5589
       31     5590    1   CALL XBI$STRLEN (set, length_set);
       32     5591    1   IF (length_set=0) THEN CALL XB_RETURN_ORDINAL_RESULT(ADDR(NIL));
       33     5592
       34     5593    2   DO temp_counter=0 TO length_string;
       35     5594    2      CALL INDEX(throw_away, SUBSTR(string,temp_counter,1), SUBSTR(set,0,length_set))
       36     5595    2         WHENRETURN
       37     5596    3            DO;
PL6.E3A0      #001=STRPBRK File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:41 Page:2    
       38     5597    3               CALL XB_RETURN_ORDINAL_RESULT(ADDR(SUBSTR(string,temp_counter,1)));
       39     5598    3            END;
       40     5599    2         WHENALTRETURN
       41     5600    3            DO;
       42     5601    3            END;
       43     5602    2      END;
       44     5603    1   CALL XB_RETURN_ORDINAL_RESULT(ADDR(NIL));
       45     5604
       46     5605    1   END strpbrk;
       47     5606        %EOD;

PL6.E3A0      #001=STRPBRK File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:41 Page:3    
--  Include file information  --

   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure STRPBRK.

   Procedure STRPBRK requires 76 words for executable code.
   Procedure STRPBRK requires 12 words of local(AUTO) storage.

PL6.E3A0      #001=STRPBRK File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:41 Page:4    
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=STRPBRK File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:41 Page:5    
          MINI XREF LISTING

LENGTH_SET
      5580**DCL      5578--IMP-SIZ  5590>>CALL     5590<>CALL     5591>>IF       5594>>CALLBLT  5594>>CALLBLT
LENGTH_STRING
      5579**DCL      5577--IMP-SIZ  5587>>CALL     5587<>CALL     5588>>IF       5593>>DOINDEX  5594>>CALLBLT
      5597>>CALL
SET
      5578**DCL         6--PROC     5590<>CALL     5594>>CALLBLT
STRING
      5577**DCL         6--PROC     5587<>CALL     5594>>CALLBLT  5597--CALL
TEMP_COUNTER
      5581**DCL      5593<<DOINDEX  5594>>CALLBLT  5597>>CALL
THROW_AWAY
      5582**DCL      5594<<CALLBLT
XBI$STRLEN
      5585**DCL-ENT  5587--CALL     5590--CALL
XB_RETURN_ORDINAL_RESULT
      5584**DCL-ENT  5588--CALL     5591--CALL     5597--CALL     5603--CALL

PL6.E3A0      #002=STRCSPN File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:41 Page:6    
       48        1        /*T***********************************************************/
       49        2        /*T*                                                         */
       50        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
       51        4        /*T*                                                         */
       52        5        /*T***********************************************************/
       53        6
       54        7        strcspn: PROC (string, set);
       55        8
       56        9        /*D* PROTOTYPE:   int strcspn (char *s1, *set);
       57       10             DESCRIPTION: searches the string s1 for the first character that
       58       11                          is in the string set skipping over characters that are
       59       12                          not in the set. The value returned is the length of the
       60       13                          initial segment of string that consists of characters
       61       14                          found in set.
       62       15             RAP Oct 4, 1988
       63       16        */
       64       17
       65       18        %INCLUDE CP_6;
       66     5578
       67     5579    1   DCL string CHAR(length_string);
       68     5580    1   DCL set CHAR(length_set);
       69     5581    1   DCL length_string SBIN;
       70     5582    1   DCL length_set SBIN;
       71     5583    1   DCL temp_counter UBIN;
       72     5584    1   DCL throw_away UBIN;
       73     5585
       74     5586    1   DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
       75     5587    1   DCL XBI$STRLEN                ENTRY (2);
       76     5588
       77     5589    1   CALL XBI$STRLEN (string, length_string);
       78     5590    1   IF (length_string=0) THEN CALL XB_RETURN_ORDINAL_RESULT(0);
       79     5591    1   CALL XBI$STRLEN (set, length_set);
       80     5592
       81     5593        /* special case: if set is the null string, return the entire length */
       82     5594    1   IF (length_set=0) THEN CALL XB_RETURN_ORDINAL_RESULT(length_string);
       83     5595
       84     5596    2   DO temp_counter=0 TO length_string;
PL6.E3A0      #002=STRCSPN File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:41 Page:7    
       85     5597    2      CALL INDEX(throw_away, SUBSTR(string,temp_counter,1), SUBSTR(set,0,length_set))
       86     5598    2         WHENRETURN
       87     5599    3            DO;
       88     5600    3               CALL XB_RETURN_ORDINAL_RESULT(temp_counter);
       89     5601    3            END;
       90     5602    2         WHENALTRETURN
       91     5603    3            DO;
       92     5604    3            END;
       93     5605    2      END;
       94     5606    1   CALL XB_RETURN_ORDINAL_RESULT(length_string);
       95     5607
       96     5608    1   END strcspn;
       97     5609        %EOD;

PL6.E3A0      #002=STRCSPN File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:41 Page:8    
--  Include file information  --

   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure STRCSPN.

   Procedure STRCSPN requires 64 words for executable code.
   Procedure STRCSPN requires 12 words of local(AUTO) storage.

PL6.E3A0      #002=STRCSPN File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:41 Page:9    
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=STRCSPN File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:41 Page:10   
          MINI XREF LISTING

LENGTH_SET
      5582**DCL      5580--IMP-SIZ  5591>>CALL     5591<>CALL     5594>>IF       5597>>CALLBLT  5597>>CALLBLT
LENGTH_STRING
      5581**DCL      5579--IMP-SIZ  5589>>CALL     5589<>CALL     5590>>IF       5594<>CALL     5596>>DOINDEX
      5597>>CALLBLT  5606<>CALL
SET
      5580**DCL         7--PROC     5591<>CALL     5597>>CALLBLT
STRING
      5579**DCL         7--PROC     5589<>CALL     5597>>CALLBLT
TEMP_COUNTER
      5583**DCL      5596<<DOINDEX  5597>>CALLBLT  5600<>CALL
THROW_AWAY
      5584**DCL      5597<<CALLBLT
XBI$STRLEN
      5587**DCL-ENT  5589--CALL     5591--CALL
XB_RETURN_ORDINAL_RESULT
      5586**DCL-ENT  5590--CALL     5594--CALL     5600--CALL     5606--CALL

PL6.E3A0      #003=STRSPN File=xb_string:6.:XBC3TSI                              FRI 01/06/95 11:42 Page:11   
       98        1        /*T***********************************************************/
       99        2        /*T*                                                         */
      100        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      101        4        /*T*                                                         */
      102        5        /*T***********************************************************/
      103        6
      104        7        strspn: PROC (string, set);
      105        8
      106        9        /*D* PROTOTYPE:   int strspn (char *s1, *set);
      107       10             DESCRIPTION: searches the string s1 for the first character that
      108       11                          is not in the string set skipping over characters that
      109       12                          are in the set. The value returned is the length of the
      110       13                          initial segment of string that consists of characters
      111       14                          found in set.
      112       15             RAP Oct 4, 1988
      113       16        */
      114       17
      115       18        %INCLUDE CP_6;
      116     5578
      117     5579    1   DCL string CHAR(length_string);
      118     5580    1   DCL set CHAR(length_set);
      119     5581    1   DCL length_string SBIN;
      120     5582    1   DCL length_set SBIN;
      121     5583    1   DCL temp_counter UBIN;
      122     5584    1   DCL throw_away UBIN;
      123     5585
      124     5586    1   DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      125     5587    1   DCL XBI$STRLEN                ENTRY (2);
      126     5588
      127     5589    1   CALL XBI$STRLEN (string, length_string);
      128     5590    1   IF (length_string=0) THEN CALL XB_RETURN_ORDINAL_RESULT(0);
      129     5591
      130     5592    1   CALL XBI$STRLEN (set, length_set);
      131     5593    1   IF (length_set=0) THEN CALL XB_RETURN_ORDINAL_RESULT(0);
      132     5594
      133     5595    2   DO temp_counter=0 TO length_string;
      134     5596    2      CALL INDEX(throw_away, SUBSTR(string,temp_counter,1), SUBSTR(set,0,length_set))
PL6.E3A0      #003=STRSPN File=xb_string:6.:XBC3TSI                              FRI 01/06/95 11:42 Page:12   
      135     5597    2         WHENALTRETURN
      136     5598    3            DO;
      137     5599    3               CALL XB_RETURN_ORDINAL_RESULT(temp_counter);
      138     5600    3            END;
      139     5601    2      END;
      140     5602    1   CALL XB_RETURN_ORDINAL_RESULT(length_string);
      141     5603
      142     5604    1   END strspn;
      143     5605        %EOD;

PL6.E3A0      #003=STRSPN File=xb_string:6.:XBC3TSI                              FRI 01/06/95 11:42 Page:13   
--  Include file information  --

   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure STRSPN.

   Procedure STRSPN requires 62 words for executable code.
   Procedure STRSPN requires 12 words of local(AUTO) storage.

PL6.E3A0      #003=STRSPN File=xb_string:6.:XBC3TSI                              FRI 01/06/95 11:42 Page:14   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=STRSPN File=xb_string:6.:XBC3TSI                              FRI 01/06/95 11:42 Page:15   
          MINI XREF LISTING

LENGTH_SET
      5582**DCL      5580--IMP-SIZ  5592>>CALL     5592<>CALL     5593>>IF       5596>>CALLBLT  5596>>CALLBLT
LENGTH_STRING
      5581**DCL      5579--IMP-SIZ  5589>>CALL     5589<>CALL     5590>>IF       5595>>DOINDEX  5596>>CALLBLT
      5602<>CALL
SET
      5580**DCL         7--PROC     5592<>CALL     5596>>CALLBLT
STRING
      5579**DCL         7--PROC     5589<>CALL     5596>>CALLBLT
TEMP_COUNTER
      5583**DCL      5595<<DOINDEX  5596>>CALLBLT  5599<>CALL
THROW_AWAY
      5584**DCL      5596<<CALLBLT
XBI$STRLEN
      5587**DCL-ENT  5589--CALL     5592--CALL
XB_RETURN_ORDINAL_RESULT
      5586**DCL-ENT  5590--CALL     5593--CALL     5599--CALL     5602--CALL

PL6.E3A0      #004=STRTOK File=xb_string:6.:XBC3TSI                              FRI 01/06/95 11:42 Page:16   
      144        1        /*T***********************************************************/
      145        2        /*T*                                                         */
      146        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      147        4        /*T*                                                         */
      148        5        /*T***********************************************************/
      149        6
      150        7        strtok: PROC (string, set);
      151        8
      152        9        /*D* PROTOTYPE:   char *strtok (char *s1, *set);
      153       10             DESCRIPTION: strtok seperates the string into tokens seperated
      154       11                          by characters from the string set. The first call
      155       12                          includes the string and subsequent calls pass a
      156       13                          null pointer to indicate continue from where the
      157       14                          last call left off. The value returned is a pointer
      158       15                          to the begining of the token or a null if no token
      159       16                          exists.
      160       17             RAP Oct 5, 1988
      161       18        */
      162       19
      163       20        %INCLUDE CP_6;
      164     5580
      165     5581    1   DCL string CHAR(length_string);
      166     5582    1   DCL set CHAR(length_set);
      167     5583    1   DCL length_string SBIN;
      168     5584    1   DCL length_set SBIN;
      169     5585    1   DCL save_pos PTR STATIC INIT(ADDR(NIL));
      170     5586    1   DCL begining_pos PTR;
      171     5587    1   DCL based_string CHAR(16384) BASED (save_pos);
      172     5588    1   DCL temp UBIN;
      173     5589
      174     5590    1   DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      175     5591    1   DCL XBI$STRLEN                ENTRY (2);
      176     5592
      177     5593    1   IF ((ADDR(string)=ADDR(NIL)) AND (save_pos=ADDR(NIL))) THEN
      178     5594    1      CALL XB_RETURN_ORDINAL_RESULT(ADDR(NIL));
      179     5595
      180     5596    1   IF (ADDR(string)~=ADDR(NIL)) THEN save_pos=ADDR(string);
PL6.E3A0      #004=STRTOK File=xb_string:6.:XBC3TSI                              FRI 01/06/95 11:42 Page:17   
      181     5597
      182     5598    1   CALL XBI$STRLEN (based_string, length_string);
      183     5599    1   IF (length_string=0) THEN
      184     5600    2      DO;
      185     5601    2         save_pos = ADDR(NIL);
      186     5602    2         CALL XB_RETURN_ORDINAL_RESULT(ADDR(NIL));
      187     5603    2      END;
      188     5604
      189     5605    1   CALL XBI$STRLEN (set, length_set);
      190     5606    2   IF (length_set=0) THEN DO;
      191     5607           /* The entire string is the token to return */
      192     5608    2      begining_pos = save_pos;
      193     5609    2      save_pos = PINCRC (save_pos, length_string);
      194     5610    2      CALL XB_RETURN_ORDINAL_RESULT (begining_pos);
      195     5611    2   END;
      196     5612
      197     5613        /* skip forward over things in string that are in set */
      198     5614
      199     5615    2   Skip1: DO WHILE (SUBSTR(based_string,0,1)~=BINASC(0));
      200     5616    2      CALL INDEX(temp, SUBSTR(based_string,0,1), SUBSTR(set,0,length_set))
      201     5617    2         WHENRETURN
      202     5618    3            DO;
      203     5619    3               save_pos = PINCRC(save_pos,1);
      204     5620    3            END;
      205     5621    2         WHENALTRETURN
      206     5622    3            DO;
      207     5623    3               EXIT Skip1;
      208     5624    3            END;
      209     5625    2      END;
      210     5626
      211     5627        /* now I am at something in string that is not in set ..
      212     5628           begining of a token, or end of the string ??               */
      213     5629
      214     5630    1   IF (SUBSTR(based_string,0,1)=BINASC(0)) THEN
      215     5631    2      DO;
      216     5632    2         save_pos = ADDR(NIL);
      217     5633    2         CALL XB_RETURN_ORDINAL_RESULT(ADDR(NIL));
PL6.E3A0      #004=STRTOK File=xb_string:6.:XBC3TSI                              FRI 01/06/95 11:42 Page:18   
      218     5634    2      END;
      219     5635
      220     5636    1   begining_pos = save_pos;  /* this is where I tell the caller .. but first */
      221     5637
      222     5638        /* look for the next thing in the set as that is the end of the token */
      223     5639
      224     5640    2   Skip2: DO WHILE (SUBSTR(based_string,0,1)~=BINASC(0));
      225     5641    2      CALL INDEX(temp, SUBSTR(based_string,0,1), SUBSTR(set,0,length_set))
      226     5642    2         WHENRETURN
      227     5643    3            DO;
      228     5644    3               EXIT Skip2;
      229     5645    3            END;
      230     5646    2         WHENALTRETURN
      231     5647    3            DO;
      232     5648    3               save_pos = PINCRC(save_pos,1);
      233     5649    3            END;
      234     5650    2      END;
      235     5651
      236     5652    1   IF (SUBSTR(based_string,0,1)=BINASC(0)) THEN
      237     5653    2      DO;
      238     5654    2         save_pos = ADDR(NIL);
      239     5655    2         CALL XB_RETURN_ORDINAL_RESULT(begining_pos);
      240     5656    2      END;
      241     5657    1   ELSE
      242     5658    2      DO;
      243     5659    2         SUBSTR(based_string,0,1) = BINASC(0);
      244     5660    2         save_pos = PINCRC(save_pos,1);
      245     5661    2         CALL XB_RETURN_ORDINAL_RESULT(begining_pos);
      246     5662    2      END;
      247     5663
      248     5664    1   END strtok;
      249     5665        %EOD;

PL6.E3A0      #004=STRTOK File=xb_string:6.:XBC3TSI                              FRI 01/06/95 11:42 Page:19   
--  Include file information  --

   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure STRTOK.

   Procedure STRTOK requires 141 words for executable code.
   Procedure STRTOK requires 12 words of local(AUTO) storage.

PL6.E3A0      #004=STRTOK File=xb_string:6.:XBC3TSI                              FRI 01/06/95 11:42 Page:20   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=STRTOK File=xb_string:6.:XBC3TSI                              FRI 01/06/95 11:42 Page:21   
          MINI XREF LISTING

BASED_STRING
      5587**DCL      5598<>CALL     5615>>DOWHILE  5616>>CALLBLT  5630>>IF       5640>>DOWHILE  5641>>CALLBLT
      5652>>IF       5659<<ASSIGN
BEGINING_POS
      5586**DCL      5608<<ASSIGN   5610<>CALL     5636<<ASSIGN   5655<>CALL     5661<>CALL
LENGTH_SET
      5584**DCL      5582--IMP-SIZ  5605>>CALL     5605<>CALL     5606>>IF       5616>>CALLBLT  5616>>CALLBLT
      5641>>CALLBLT  5641>>CALLBLT
LENGTH_STRING
      5583**DCL      5581--IMP-SIZ  5598<>CALL     5599>>IF       5609>>ASSIGN
SAVE_POS
      5585**DCL      5587--IMP-PTR  5593>>IF       5596<<ASSIGN   5598>>CALL     5601<<ASSIGN   5608>>ASSIGN
      5609<<ASSIGN   5609>>ASSIGN   5615>>DOWHILE  5616>>CALLBLT  5619<<ASSIGN   5619>>ASSIGN   5630>>IF
      5632<<ASSIGN   5636>>ASSIGN   5640>>DOWHILE  5641>>CALLBLT  5648<<ASSIGN   5648>>ASSIGN   5652>>IF
      5654<<ASSIGN   5659>>ASSIGN   5660<<ASSIGN   5660>>ASSIGN
SET
      5582**DCL         7--PROC     5605<>CALL     5616>>CALLBLT  5641>>CALLBLT
SKIP1
      5615**LABEL    5623--EXIT
SKIP2
      5640**LABEL    5644--EXIT
STRING
      5581**DCL         7--PROC     5593--IF       5596--IF       5596--ASSIGN
TEMP
      5588**DCL      5616<<CALLBLT  5641<<CALLBLT
XBI$STRLEN
      5591**DCL-ENT  5598--CALL     5605--CALL
XB_RETURN_ORDINAL_RESULT
      5590**DCL-ENT  5594--CALL     5602--CALL     5610--CALL     5633--CALL     5655--CALL     5661--CALL

PL6.E3A0      #005=STRXFRM File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:42 Page:22   
      250        1        /*T***********************************************************/
      251        2        /*T*                                                         */
      252        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      253        4        /*T*                                                         */
      254        5        /*T***********************************************************/
      255        6
      256        7        strxfrm: PROC (s1, s2, n);
      257        8
      258        9        /*D* PROTOTYPE:   int strxfrm (char *s1, *s2; int n);
      259       10             DESCRIPTION: copies no more than n characters from s2 to s1 and then
      260       11                          appends a null character.
      261       12
      262       13        */
      263       14
      264       15        %INCLUDE CP_6;
      265     5575
      266     5576    1   DCL s1 CHAR(length);
      267     5577    1   DCL s2 CHAR(length);
      268     5578    1   DCL length UBIN;
      269     5579    1   DCL n UBIN;
      270     5580    1   DCL funny_ptr PTR;
      271     5581    1   DCL size REDEF funny_ptr UBIN WORD;
      272     5582    1   DCL result UBIN;
      273     5583    1   DCL chars_to_move UBIN;
      274     5584
      275     5585    1   DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      276     5586    1   DCL XBI$STRLEN                ENTRY (2);
      277     5587
      278     5588    1   funny_ptr = ADDR(N);       /* what a way to get the value of n */
      279     5589
      280     5590    1   CALL XBI$STRLEN (s2, length);
      281     5591
      282     5592    2   IF (length<size) THEN DO;
      283     5593    2      result = length;
      284     5594    2      chars_to_move = length + 1;
      285     5595    2      SUBSTR(s1,0,chars_to_move) = SUBSTR(s2,0,chars_to_move);
      286     5596    2      END;
PL6.E3A0      #005=STRXFRM File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:42 Page:23   
      287     5597    1   ELSE
      288     5598    1      result = length;
      289     5599
      290     5600    1   CALL XB_RETURN_ORDINAL_RESULT(result);
      291     5601
      292     5602    1   END strxfrm;
      293     5603        %EOD;

PL6.E3A0      #005=STRXFRM File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:42 Page:24   
--  Include file information  --

   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure STRXFRM.

   Procedure STRXFRM requires 34 words for executable code.
   Procedure STRXFRM requires 12 words of local(AUTO) storage.

PL6.E3A0      #005=STRXFRM File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:42 Page:25   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=STRXFRM File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:42 Page:26   
          MINI XREF LISTING

CHARS_TO_MOVE
      5583**DCL      5594<<ASSIGN   5595>>ASSIGN   5595>>ASSIGN
FUNNY_PTR
      5580**DCL      5581--REDEF    5588<<ASSIGN
LENGTH
      5578**DCL      5576--IMP-SIZ  5577--IMP-SIZ  5590>>CALL     5590<>CALL     5592>>IF       5593>>ASSIGN
      5594>>ASSIGN   5595>>ASSIGN   5595>>ASSIGN   5598>>ASSIGN
N
      5579**DCL         7--PROC     5588--ASSIGN
RESULT
      5582**DCL      5593<<ASSIGN   5598<<ASSIGN   5600<>CALL
S1
      5576**DCL         7--PROC     5595<<ASSIGN
S2
      5577**DCL         7--PROC     5590<>CALL     5595>>ASSIGN
SIZE
      5581**DCL      5592>>IF
XBI$STRLEN
      5586**DCL-ENT  5590--CALL
XB_RETURN_ORDINAL_RESULT
      5585**DCL-ENT  5600--CALL

PL6.E3A0      #006=STRERROR File=xb_string:6.:XBC3TSI                            FRI 01/06/95 11:42 Page:27   
      294        1        /*T***********************************************************/
      295        2        /*T*                                                         */
      296        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      297        4        /*T*                                                         */
      298        5        /*T***********************************************************/
      299        6
      300        7        strerror: PROC (errnum) MATERIALIZE ($PR0 in arg$);
      301        8           %INCLUDE CP_6;
      302     5568           %INCLUDE xb_errno_i6;
      303     5607           %INCLUDE B$TABLES_C;
      304     5715
      305     5716    1      DCL arg$                   PTR;
      306     5717    1      DCL errnum                 SBIN;
      307     5718           %C_ERRCODE (FPTN=c_error, STCLASS="BASED (arg$)");
      308     5726
      309     5727           %VLP_ERRCODE (FPTN=error, STCLASS=AUTO);
      310     5772           %VLP_ERRCODE (FPTN=current_errno, STCLASS=AUTO);
      311     5817           %FPT_ERRMSG (STCLASS=AUTO);
      312     5844           %FPT_ERRMSG (FPTN=FPT$ERRMSG, STCLASS=CONSTANT, FLAGLEV=4,
      313     5845              FILENAME=XBI$ERRFILE_NAME, FILEACCT=XBI$ERRFILE_ACCT);
      314     5872           %VLP_NAME (FPTN=XBI$ERRFILE_NAME, STCLASS="SYMREF READONLY", LEN=31);
      315     5899           %VLP_ACCT (FPTN=XBI$ERRFILE_ACCT, STCLASS="SYMREF READONLY");
      316     5912
      317     5913    1      DCL dcb_number                   SBIN;
      318     5914    1      DCL err_buf_ptr$                 STATIC PTR INIT(ADDR(NIL));
      319     5915    1      DCL error_text                   CHAR (512) BASED(err_buf_ptr$);
      320     5916    1      DCL i                            SBIN;
      321     5917    1      DCL j                            SBIN;
      322     5918    1      DCL junk                         SBIN;
      323     5919           %B$SR_NON_BLANK (NAME=XBI$non_blank_table);
      324     5923
      325     5924    1      DCL XBI_GET_ERRNO             ENTRY (1);
      326     5925    1      DCL XBI_GET_CP6_DCBNUMBER     ENTRY (1);
      327     5926    1      DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      328     5927    1      DCL XBI$CONVERT_C_TO_CP6_ERRCODE ENTRY (2);
      329     5928    1      DCL XBI_MALLOC ENTRY (2);
      330     5929    1      DCL XBI$PROTECT_POINTER ENTRY (1);
PL6.E3A0      #006=STRERROR File=xb_string:6.:XBC3TSI                            FRI 01/06/95 11:42 Page:28   
      331     5930
      332     5931    2      IF (err_buf_ptr$ = ADDR(NIL)) THEN DO;
      333     5932    2         CALL XBI_MALLOC (512, err_buf_ptr$);
      334     5933    2         IF (err_buf_ptr$ = ADDR(NIL)) THEN
      335     5934    2            CALL XB_RETURN_ORDINAL_RESULT (ADDR(NIL));
      336     5935    2         CALL XBI$PROTECT_POINTER (err_buf_ptr$);
      337     5936    2      END;
      338     5937
      339     5938    1      CALL XBI$CONVERT_C_TO_CP6_ERRCODE (c_error, error);
      340     5939    1      error_text = ' ';
      341     5940    1      FPT_ERRMSG = FPT$ERRMSG;
      342     5941    1      FPT_ERRMSG.V_ = VECTOR (FPT_ERRMSG.V);
      343     5942    1      FPT_ERRMSG.CODE_ = VECTOR(error);
      344     5943    1      CALL XBI_GET_ERRNO (current_errno);
      345     5944    1      IF current_errno = error THEN
      346     5945    1         CALL XBI_GET_CP6_DCBNUMBER (dcb_number);
      347     5946    1      ELSE
      348     5947    1         dcb_number = 0;
      349     5948    1      FPT_ERRMSG.V.DCB# = dcb_number;
      350     5949    1      FPT_ERRMSG.BUF_ = VECTOR (SUBSTR (error_text, 0, SIZEC (error_text) - 1));
      351     5950    2      IF error.FCG ~= '3002'O THEN DO;  /* 'XB' */
      352     5951    2         FPT_ERRMSG.FILENAME_ = VECTOR(NIL);
      353     5952    2         FPT_ERRMSG.FILEACCT_ = VECTOR(NIL);
      354     5953    2      END;
      355     5954    1      CALL M$ERRMSG (FPT_ERRMSG) ALTRET(GOON); GOON:
      356     5955    1      I = 0;
      357     5956    2      DO WHILE ('1'B);
      358     5957    2         CALL INDEX2(I, '  ', error_text, I);
      359     5958    2         CALL SEARCH(J, JUNK, XBI$non_blank_table, error_text, I) ALTRET (DONE);
      360     5959    2         CALL INSERT (error_text, I+1, ,SUBSTR(error_text, J));
      361     5960    2      END;
      362     5961    1     DONE:
      363     5962    1      CALL SEARCHR(I, JUNK, XBI$non_blank_table, error_text);
      364     5963    1      SUBSTR (error_text, i + 1, 1) = BINASC (0);
      365     5964    1      CALL XB_RETURN_ORDINAL_RESULT (ADDR (error_text));
      366     5965    1   END strerror;
      367     5966        %EOD;
PL6.E3A0      #006=STRERROR File=xb_string:6.:XBC3TSI                            FRI 01/06/95 11:42 Page:29   

PL6.E3A0      #006=STRERROR File=xb_string:6.:XBC3TSI                            FRI 01/06/95 11:42 Page:30   
--  Include file information  --

   B$TABLES_C.:LIB_E04  cannot be made into a system file and is referenced.
   xb_errno_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure STRERROR.

   Procedure STRERROR requires 149 words for executable code.
   Procedure STRERROR requires 40 words of local(AUTO) storage.

PL6.E3A0      #006=STRERROR File=xb_string:6.:XBC3TSI                            FRI 01/06/95 11:42 Page:31   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=STRERROR File=xb_string:6.:XBC3TSI                            FRI 01/06/95 11:42 Page:32   
          MINI XREF LISTING

ARG$
      5716**DCL         7--MATRLIZ  5719--IMP-PTR  5938>>CALL
B$SR_NON_BLANK$
      5920**DCL      5921--IMP-PTR  5958>>CALLBLT  5962>>CALLBLT
CURRENT_ERRNO
      5784**DCL      5943<>CALL     5944>>IF
C_ERROR
      5719**DCL      5938<>CALL
DCB_NUMBER
      5913**DCL      5945<>CALL     5947<<ASSIGN   5948>>ASSIGN
DONE
      5962**LABEL    5958--CALLALT
ERRNO
      5577**DCL      5595--REDEF
ERRNO_P
      5576**DCL      5577--IMP-PTR  5595--IMP-PTR
ERRNUM
      5717**DCL         7--PROC
ERROR
      5739**DCL      5938<>CALL     5942--ASSIGN   5944>>IF
ERROR.FCG
      5755**DCL      5950>>IF
ERROR_TEXT
      5915**DCL      5939<<ASSIGN   5949--ASSIGN   5949--ASSIGN   5957>>CALLBLT  5958>>CALLBLT  5959<<CALLBLT
      5959>>CALLBLT  5962>>CALLBLT  5963<<ASSIGN   5964--CALL
ERR_BUF_PTR$
      5914**DCL      5915--IMP-PTR  5931>>IF       5932<>CALL     5933>>IF       5935<>CALL     5939>>ASSIGN
      5949>>ASSIGN   5957>>CALLBLT  5958>>CALLBLT  5959>>CALLBLT  5959>>CALLBLT  5962>>CALLBLT  5963>>ASSIGN
      5964>>CALL
FPT$ERRMSG
      5856**DCL      5940>>ASSIGN
FPT$ERRMSG.V
PL6.E3A0      #006=STRERROR File=xb_string:6.:XBC3TSI                            FRI 01/06/95 11:42 Page:33   
      5860**DCL      5856--DCLINIT
FPT_ERRMSG
      5828**DCL      5940<<ASSIGN   5954<>CALL
FPT_ERRMSG.BUF_
      5828**DCL      5949<<ASSIGN
FPT_ERRMSG.CODE_
      5828**DCL      5942<<ASSIGN
FPT_ERRMSG.FILEACCT_
      5829**DCL      5952<<ASSIGN
FPT_ERRMSG.FILENAME_
      5829**DCL      5951<<ASSIGN
FPT_ERRMSG.V
      5832**DCL      5941--ASSIGN
FPT_ERRMSG.V.DCB#
      5832**DCL      5948<<ASSIGN
FPT_ERRMSG.V_
      5828**DCL      5941<<ASSIGN
GOON
      5955**LABEL    5954--CALLALT
I
      5916**DCL      5955<<ASSIGN   5957<<CALLBLT  5957>>CALLBLT  5958>>CALLBLT  5959>>CALLBLT  5962<<CALLBLT
      5963>>ASSIGN
J
      5917**DCL      5958<<CALLBLT  5959>>CALLBLT
JUNK
      5918**DCL      5958<<CALLBLT  5962<<CALLBLT
M$ERRMSG
      5559**DCL-ENT  5954--CALL
XBI$CONVERT_C_TO_CP6_ERRCODE
      5927**DCL-ENT  5938--CALL
XBI$ERRFILE_ACCT
      5910**DCL      5857--DCLINIT
XBI$ERRFILE_NAME
      5897**DCL      5857--DCLINIT
XBI$NON_BLANK_TABLE
      5921**DCL      5958>>CALLBLT  5962>>CALLBLT
PL6.E3A0      #006=STRERROR File=xb_string:6.:XBC3TSI                            FRI 01/06/95 11:42 Page:34   
XBI$PROTECT_POINTER
      5929**DCL-ENT  5935--CALL
XBI_GET_CP6_DCBNUMBER
      5925**DCL-ENT  5945--CALL
XBI_GET_ERRNO
      5924**DCL-ENT  5943--CALL
XBI_MALLOC
      5928**DCL-ENT  5932--CALL
XB_RETURN_ORDINAL_RESULT
      5926**DCL-ENT  5934--CALL     5964--CALL

PL6.E3A0      #007=STRSTR File=xb_string:6.:XBC3TSI                              FRI 01/06/95 11:42 Page:35   
      368        1        /*T***********************************************************/
      369        2        /*T*                                                         */
      370        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      371        4        /*T*                                                         */
      372        5        /*T***********************************************************/
      373        6
      374        7        strstr: PROC (string, sub);
      375        8
      376        9        /*D* PROTOTYPE:   char *strstr (char *s1, *sub);
      377       10             DESCRIPTION: searches the string s1 for the first occurrence of the
      378       11                          string sub. The value returned is a pointer to the
      379       12                          begining of sub in string or if it does not occurr then
      380       13                          a null pointer.
      381       14             RAP Oct 5, 1988
      382       15        */
      383       16
      384       17        %INCLUDE CP_6;
      385     5577
      386     5578    1   DCL string CHAR(length_string);
      387     5579    1   DCL sub CHAR(length_sub);
      388     5580    1   DCL length_string SBIN;
      389     5581    1   DCL length_sub SBIN;
      390     5582    1   DCL temp UBIN;
      391     5583
      392     5584    1   DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      393     5585    1   DCL XBI$STRLEN                ENTRY (2);
      394     5586
      395     5587    1   CALL XBI$STRLEN (string, length_string);
      396     5588
      397     5589    1   CALL XBI$STRLEN (sub, length_sub);
      398     5590
      399     5591        /* special case: if sub is null string, return string */
      400     5592    1   IF (length_sub=0) THEN CALL XB_RETURN_ORDINAL_RESULT(ADDR(string));
      401     5593
      402     5594    1   CALL INDEX(temp, SUBSTR(sub,0,length_sub), SUBSTR(string,0,length_string))
      403     5595    1      WHENALTRETURN
      404     5596    2         DO;
PL6.E3A0      #007=STRSTR File=xb_string:6.:XBC3TSI                              FRI 01/06/95 11:42 Page:36   
      405     5597    2            CALL XB_RETURN_ORDINAL_RESULT(ADDR(NIL));
      406     5598    2         END;
      407     5599    1   CALL XB_RETURN_ORDINAL_RESULT(ADDR(SUBSTR(string,temp,1)));
      408     5600
      409     5601    1   END strstr;
      410     5602        %EOD;

PL6.E3A0      #007=STRSTR File=xb_string:6.:XBC3TSI                              FRI 01/06/95 11:42 Page:37   
--  Include file information  --

   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure STRSTR.

   Procedure STRSTR requires 56 words for executable code.
   Procedure STRSTR requires 10 words of local(AUTO) storage.

PL6.E3A0      #007=STRSTR File=xb_string:6.:XBC3TSI                              FRI 01/06/95 11:42 Page:38   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=STRSTR File=xb_string:6.:XBC3TSI                              FRI 01/06/95 11:42 Page:39   
          MINI XREF LISTING

LENGTH_STRING
      5580**DCL      5578--IMP-SIZ  5587>>CALL     5587<>CALL     5594>>CALLBLT  5594>>CALLBLT  5599>>CALL
LENGTH_SUB
      5581**DCL      5579--IMP-SIZ  5589>>CALL     5589<>CALL     5592>>IF       5594>>CALLBLT  5594>>CALLBLT
STRING
      5578**DCL         7--PROC     5587<>CALL     5592--CALL     5594>>CALLBLT  5599--CALL
SUB
      5579**DCL         7--PROC     5589<>CALL     5594>>CALLBLT
TEMP
      5582**DCL      5594<<CALLBLT  5599>>CALL
XBI$STRLEN
      5585**DCL-ENT  5587--CALL     5589--CALL
XB_RETURN_ORDINAL_RESULT
      5584**DCL-ENT  5592--CALL     5597--CALL     5599--CALL

PL6.E3A0      #008=MEMMOVE File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:42 Page:40   
      411        1        /*T***********************************************************/
      412        2        /*T*                                                         */
      413        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      414        4        /*T*                                                         */
      415        5        /*T***********************************************************/
      416        6
      417        7        memmove: PROC (dest, source, n);
      418        8
      419        9        /*D* PROTOTYPE:   void *memmove (void *dest,const void *source, size_t n);
      420       10             DESCRIPTION: copies n bytes from source to dest.
      421       11                          Returns pointer to source.
      422       12             JAS Dec 14,1988
      423       13        */
      424       14
      425       15        %INCLUDE CP_6;
      426     5575
      427     5576    1   DCL dest CHAR(real_size);
      428     5577    1   DCL source CHAR(real_size);
      429     5578    1   DCL n UBIN;
      430     5579
      431     5580    1   DCL funny_ptr PTR;
      432     5581    1   DCL real_size REDEF funny_ptr SBIN;
      433     5582    1   DCL dest_ptr PTR;
      434     5583    1   DCL 1 dest_ptr_exposed REDEF dest_ptr,
      435     5584    1      2  byte_offset       UBIN (20) UNAL,
      436     5585    1      2  bit_offset        UBIN (4) UNAL,
      437     5586    1      2  segid             UBIN (12) UNAL;
      438     5587    1   DCL source_ptr PTR;
      439     5588    1   DCL 1 source_ptr_exposed REDEF source_ptr,
      440     5589    1      2  byte_offset       UBIN (20) UNAL,
      441     5590    1      2  bit_offset        UBIN (4) UNAL,
      442     5591    1      2  segid             UBIN (12) UNAL;
      443     5592
      444     5593    1   DCL XB_RETURN_ORDINAL_RESULT ENTRY(1);
      445     5594    1   DCL XBI$MOVE_USING_MRL       ENTRY(3);
      446     5595    1   DCL XBI$MOVE_USING_MLR       ENTRY(3);
      447     5596
PL6.E3A0      #008=MEMMOVE File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:42 Page:41   
      448     5597    1   funny_ptr = ADDR(n);              /* this gets the true number    */
      449     5598
      450     5599    1   IF ADDR(dest)=ADDR(source) THEN
      451     5600    1      CALL XB_RETURN_ORDINAL_RESULT(ADDR(source));
      452     5601
      453     5602    1   source_ptr = ADDR(source);
      454     5603    1   dest_ptr = ADDR(dest);
      455     5604
      456     5605        /* Check the dest and source pointers to see if a left to right move
      457     5606           can be done.  This is best as the PL6 SUBSTR function uses a fast
      458     5607           MLR instruction to do a left to right move.  To do a right to left move
      459     5608           we have to call a BMAP routine that uses a godawful slow MRL instruction.
      460     5609        */
      461     5610
      462     5611    1   IF (dest_ptr_exposed.segid ~= source_ptr_exposed.segid) OR
      463     5612    1      (dest_ptr_exposed.byte_offset < source_ptr_exposed.byte_offset) OR
      464     5613    1      ((source_ptr_exposed.byte_offset + real_size) < dest_ptr_exposed.byte_offset)
      465     5614    1   THEN
      466     5615    1      CALL XBI$MOVE_USING_MLR (dest, source, real_size);
      467     5616    1   ELSE
      468     5617    1      CALL XBI$MOVE_USING_MRL (dest, source, real_size);
      469     5618
      470     5619    1   CALL XB_RETURN_ORDINAL_RESULT(ADDR(dest));
      471     5620    1   END memmove;

PL6.E3A0      #008=MEMMOVE File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:42 Page:42   
--  Include file information  --

   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure MEMMOVE.

   Procedure MEMMOVE requires 68 words for executable code.
   Procedure MEMMOVE requires 14 words of local(AUTO) storage.

    No errors detected in file xb_string:6.:XBC3TSI    .

PL6.E3A0      #008=MEMMOVE File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:42 Page:43   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=MEMMOVE File=xb_string:6.:XBC3TSI                             FRI 01/06/95 11:42 Page:44   
          MINI XREF LISTING

DEST
      5576**DCL         7--PROC     5599--IF       5603--ASSIGN   5615<>CALL     5617<>CALL     5619--CALL
DEST_PTR
      5582**DCL      5583--REDEF    5603<<ASSIGN
DEST_PTR_EXPOSED.BYTE_OFFSET
      5584**DCL      5611>>IF       5611>>IF
DEST_PTR_EXPOSED.SEGID
      5586**DCL      5611>>IF
FUNNY_PTR
      5580**DCL      5581--REDEF    5597<<ASSIGN
N
      5578**DCL         7--PROC     5597--ASSIGN
REAL_SIZE
      5581**DCL      5576--IMP-SIZ  5577--IMP-SIZ  5611>>IF       5615>>CALL     5615>>CALL     5615<>CALL
      5617>>CALL     5617>>CALL     5617<>CALL
SOURCE
      5577**DCL         7--PROC     5599--IF       5600--CALL     5602--ASSIGN   5615<>CALL     5617<>CALL
SOURCE_PTR
      5587**DCL      5588--REDEF    5602<<ASSIGN
SOURCE_PTR_EXPOSED.BYTE_OFFSET
      5589**DCL      5611>>IF       5611>>IF
SOURCE_PTR_EXPOSED.SEGID
      5591**DCL      5611>>IF
XBI$MOVE_USING_MLR
      5595**DCL-ENT  5615--CALL
XBI$MOVE_USING_MRL
      5594**DCL-ENT  5617--CALL
XB_RETURN_ORDINAL_RESULT
      5593**DCL-ENT  5600--CALL     5619--CALL
