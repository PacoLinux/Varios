
PL6.E3A0      #001=FWRITE File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:30 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        fwrite: PROC (s, P_element_size, P_elements, F);
        7        7           /*D*  NAME: fwrite
        8        8                 PROTOTYPE: size_t fwrite (const void *ptr, size_t size,
        9        9                                           size_t nmemb, FILE *stream);
       10       10                 DESCRIPTION: writes the array located by ptr which contains nmemb
       11       11                    items of size size bytes to stream.  The number of elements
       12       12                    successfully written is returned.
       13       13           */
       14       14
       15       15           %INCLUDE xb_stdio_i6;
       16      258           %INCLUDE xb_errors_i6;
       17      329
       18      330
       19      331    1      DCL s                      CHAR (s_length);
       20      332    1      DCL P_element_size         UBIN;
       21      333    1      DCL P_elements             UBIN;
       22      334           %File_Header (Name=F, STCLASS=" ");
       23      446           %Buffer;
       24      449
       25      450    1      DCL element_size_as_ptr    PTR;
       26      451    1      DCL element_size REDEF element_size_as_ptr UBIN;
       27      452    1      DCL elements_as_ptr        PTR;
       28      453    1      DCL elements REDEF elements_as_ptr UBIN;
       29      454
       30      455    1      DCL s_length               SBIN;
       31      456    1      DCL start                  SBIN;
       32      457    1      DCL space                  SBIN;
       33      458    1      DCL chars_to_write         SBIN;
       34      459    1      DCL newline_found          BIT(1);
       35      460    1      DCL newline_position       SBIN;
       36      461    1      DCL formfeed_found         BIT(1);
       37      462    1      DCL formfeed_position      SBIN;
PL6.E3A0      #001=FWRITE File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:30 Page:2    
       38      463    1      DCL chars_actually_written SBIN;
       39      464
       40      465    1      DCL XBI_SET_STREAM_ERRNO   ENTRY (2);
       41      466    1      DCL XBI$WRITE_THIS_RECORD   ENTRY (1) ALTRET;
       42      467    1      DCL XBI$CONTINUED_WRITE    ENTRY (1) ALTRET;
       43      468    1      DCL XB_RETURN_ORDINAL_RESULT ENTRY (1);
       44      469    1      DCL XBI$COMPLETE_OPEN      ENTRY (1) ALTRET;
       45      470    1      DCL XBI$POSITION_TO_EOF    ENTRY (1) ALTRET;
       46      471    1      DCL XBI$FFLUSH             ENTRY (1) ALTRET;
       47      472    1      DCL XB_IO_ERROR            ENTRY;
       48      473
       49      474    1      element_size_as_ptr = ADDR (P_element_size);
       50      475    1      elements_as_ptr     = ADDR (P_elements);
       51      476
       52      477    2      IF (F.auxio$ ~= ADDR(NIL)) THEN DO;
       53      478    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$AUXIO_FILE_POINTER);
       54      479    2         CALL XB_IO_ERROR;
       55      480    2      END;
       56      481
       57      482    1      IF F.is_partly_open THEN CALL XBI$COMPLETE_OPEN (F) ALTRET (return_error);
       58      483
       59      484    2      IF F.state = %F_reading_state AND (NOT F.is_eof) THEN DO;
       60      485    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$WRITE_AFTER_READ);
       61      486    2         F.is_error = '1'B;
       62      487    2         GOTO return_error;
       63      488    2      END;
       64      489    1      F.state = %F_writing_state;
       65      490
       66      491    1      IF F.is_write_at_eof AND ~F.is_eof THEN
       67      492    1         CALL XBI$POSITION_TO_EOF (F) ALTRET (return_error);
       68      493
       69      494    1      s_length = elements * element_size;
       70      495    1      start = 0;
       71      496    1      chars_actually_written = 0;
       72      497
       73      498    2      IF F.is_text THEN DO;
       74      499    2         start = 0;
PL6.E3A0      #001=FWRITE File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:30 Page:3    
       75      500    3         DO WHILE start < s_length;
       76      501    4            IF F.character_position = F.buffer_size THEN DO;
       77      502    5               IF SUBSTR (s, start, 1) = BINASC(%newline) THEN DO;
       78      503    5                  start = start + 1;
       79      504    5                  CALL XBI$WRITE_THIS_RECORD (F) ALTRET (return_error);
       80      505    5                  GOTO continue_while;
       81      506    4               END; ELSE
       82      507    4                  CALL XBI$CONTINUED_WRITE (F) ALTRET (return_error);
       83      508    4               chars_actually_written = start;
       84      509    4            END;
       85      510    3            CALL INDEX (newline_position, BINASC(%newline),
       86      511    3                  SUBSTR (s, 0, MINIMUM (s_length,
       87      512    3                  start + F.buffer_size - F.character_position)), start)
       88      513    4               WHENRETURN DO; newline_found = '1'B; END;
       89      514    4               WHENALTRETURN DO; newline_found = '0'B; END;
       90      515    3            CALL INDEX (formfeed_position, BINASC(%formfeed),
       91      516    3                  SUBSTR (s, 0, MINIMUM (s_length,
       92      517    3                  start + F.buffer_size - F.character_position)), start)
       93      518    4               WHENRETURN DO; formfeed_found = '1'B; END;
       94      519    4               WHENALTRETURN DO; formfeed_found = '0'B; END;
       95      520    3            IF formfeed_found AND newline_found THEN
       96      521    3               IF formfeed_position < newline_position THEN
       97      522    3                  chars_to_write = formfeed_position - start + 1;
       98      523    3               ELSE chars_to_write = newline_position - start + 1;
       99      524    3            ELSE IF formfeed_found AND NOT newline_found THEN
      100      525    3                    chars_to_write = formfeed_position - start + 1;
      101      526    3                 ELSE IF NOT formfeed_found AND newline_found THEN
      102      527    3                         chars_to_write = newline_position - start + 1;
      103      528    3                      ELSE chars_to_write = newline_position - start;
      104      529    3            F.ars = F.ars + chars_to_write;
      105      530    3            SUBSTR (buffer, F.character_position, chars_to_write) =
      106      531    3               SUBSTR (s, start, chars_to_write);
      107      532    3            start = start + chars_to_write;
      108      533    3            F.character_position = F.ars;
      109      534    3            F.is_buffer_modified = '1'B;
      110      535    4            IF newline_found OR formfeed_found THEN DO;
      111      536    4               CALL XBI$WRITE_THIS_RECORD (F) ALTRET (return_error);
PL6.E3A0      #001=FWRITE File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:30 Page:4    
      112      537    4               chars_actually_written = start;
      113      538    4            END;
      114      539    3   continue_while:
      115      540    3         END;
      116      541    2      END; ELSE DO; /* binary file */
      117      542    2         start = 0;
      118      543    3         DO WHILE s_length > 0;
      119      544    3            space = F.buffer_size - F.character_position;
      120      545    4            IF space > s_length THEN DO;
      121      546    4               SUBSTR (buffer, F.character_position, s_length) =
      122      547    4                  SUBSTR (s, start, s_length);
      123      548    4               F.character_position = F.character_position + s_length;
      124      549    4               IF F.is_eof OR (F.ars < F.character_position) THEN
      125      550    4                  F.ars = F.character_position;
      126      551    4               s_length = 0;
      127      552    4               F.is_buffer_modified = '1'B;
      128      553    4            END; ELSE DO;
      129      554    4               SUBSTR (buffer, F.character_position, space) =
      130      555    4                  SUBSTR (s, start, space);
      131      556    4               F.character_position = F.character_position + space;
      132      557    4               IF F.is_eof OR (F.ars < F.character_position) THEN
      133      558    4                  F.ars = F.character_position;
      134      559    4               s_length = s_length - space;
      135      560    4               start = start + space;
      136      561    4               F.is_buffer_modified = '1'B;
      137      562    4               CALL XBI$WRITE_THIS_RECORD (F) ALTRET (return_error);
      138      563    4               chars_actually_written = start;
      139      564    4            END;
      140      565    3         END;
      141      566    2      END;
      142      567    1   return_ok:
      143      568    1      IF F.is_unbuffered THEN CALL XBI$FFLUSH (F) ALTRET (return_error);
      144      569    1      CALL XB_RETURN_ORDINAL_RESULT (elements);
      145      570
      146      571    1   return_error:
      147      572    1      CALL XB_RETURN_ORDINAL_RESULT (chars_actually_written / element_size);
      148      573    1   END fwrite;
PL6.E3A0      #001=FWRITE File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:30 Page:5    
      149      574        %EOD;

PL6.E3A0      #001=FWRITE File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:30 Page:6    
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FWRITE.

   Procedure FWRITE requires 307 words for executable code.
   Procedure FWRITE requires 20 words of local(AUTO) storage.

PL6.E3A0      #001=FWRITE File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:30 Page:7    
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=FWRITE File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:30 Page:8    
          MINI XREF LISTING

BUFFER
       447**DCL       530<<ASSIGN    546<<ASSIGN    554<<ASSIGN
CHARS_ACTUALLY_WRITTEN
       463**DCL       496<<ASSIGN    508<<ASSIGN    537<<ASSIGN    563<<ASSIGN    572>>CALL
CHARS_TO_WRITE
       458**DCL       522<<ASSIGN    523<<ASSIGN    525<<ASSIGN    527<<ASSIGN    528<<ASSIGN    529>>ASSIGN
       530>>ASSIGN    530>>ASSIGN    532>>ASSIGN
CONTINUE_WHILE
       540**LABEL     505--GOTO
ELEMENTS
       453**DCL       494>>ASSIGN    569<>CALL
ELEMENTS_AS_PTR
       452**DCL       453--REDEF     475<<ASSIGN
ELEMENT_SIZE
       451**DCL       494>>ASSIGN    572>>CALL
ELEMENT_SIZE_AS_PTR
       450**DCL       451--REDEF     474<<ASSIGN
F
       335**DCL         6--PROC      478<>CALL      482<>CALL      485<>CALL      492<>CALL      504<>CALL
       507<>CALL      536<>CALL      562<>CALL      568<>CALL
F.ARS
       357**DCL       529<<ASSIGN    529>>ASSIGN    533>>ASSIGN    549>>IF        550<<ASSIGN    557>>IF
       558<<ASSIGN
F.AUXIO$
       367**DCL       477>>IF
F.BUFFER$
       359**DCL       447--IMP-PTR   530>>ASSIGN    546>>ASSIGN    554>>ASSIGN
F.BUFFER_SIZE
       360**DCL       447--IMP-SIZ   501>>IF        510>>CALLBLT   515>>CALLBLT   530>>ASSIGN    544>>ASSIGN
       546>>ASSIGN    554>>ASSIGN
F.CHARACTER_POSITION
       355**DCL       501>>IF        510>>CALLBLT   515>>CALLBLT   530>>ASSIGN    533<<ASSIGN    544>>ASSIGN
PL6.E3A0      #001=FWRITE File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:30 Page:9    
       546>>ASSIGN    548<<ASSIGN    548>>ASSIGN    549>>IF        550>>ASSIGN    554>>ASSIGN    556<<ASSIGN
       556>>ASSIGN    557>>IF        558>>ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
       397**DCL       398--REDEF
F.FPT_READ.V.INDX#
       390**DCL       391--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       435**DCL       436--REDEF
F.IS_BUFFER_MODIFIED
       339**DCL       534<<ASSIGN    552<<ASSIGN    561<<ASSIGN
F.IS_EOF
       337**DCL       484>>IF        491>>IF        549>>IF        557>>IF
F.IS_ERROR
       342**DCL       486<<ASSIGN
F.IS_PARTLY_OPEN
       347**DCL       482>>IF
F.IS_TEXT
       336**DCL       498>>IF
F.IS_UNBUFFERED
       346**DCL       568>>IF
F.IS_WRITE_AT_EOF
       341**DCL       491>>IF
F.STATE
       362**DCL       484>>IF        489<<ASSIGN
FORMFEED_FOUND
       461**DCL       518<<ASSIGN    519<<ASSIGN    520>>IF        524>>IF        526>>IF        535>>IF
FORMFEED_POSITION
       462**DCL       515<<CALLBLT   521>>IF        522>>ASSIGN    525>>ASSIGN
NEWLINE_FOUND
       459**DCL       513<<ASSIGN    514<<ASSIGN    520>>IF        524>>IF        526>>IF        535>>IF
NEWLINE_POSITION
       460**DCL       510<<CALLBLT   521>>IF        523>>ASSIGN    527>>ASSIGN    528>>ASSIGN
P_ELEMENTS
       333**DCL         6--PROC      475--ASSIGN
P_ELEMENT_SIZE
       332**DCL         6--PROC      474--ASSIGN
PL6.E3A0      #001=FWRITE File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:30 Page:10   
RETURN_ERROR
       572**LABEL     482--CALLALT   487--GOTO      492--CALLALT   504--CALLALT   507--CALLALT   536--CALLALT
       562--CALLALT   568--CALLALT
S
       331**DCL         6--PROC      502>>IF        510>>CALLBLT   515>>CALLBLT   530>>ASSIGN    546>>ASSIGN
       554>>ASSIGN
SPACE
       457**DCL       544<<ASSIGN    545>>IF        554>>ASSIGN    554>>ASSIGN    556>>ASSIGN    559>>ASSIGN
       560>>ASSIGN
START
       456**DCL       495<<ASSIGN    499<<ASSIGN    500>>DOWHILE   502>>IF        503<<ASSIGN    503>>ASSIGN
       508>>ASSIGN    510>>CALLBLT   510>>CALLBLT   515>>CALLBLT   515>>CALLBLT   522>>ASSIGN    523>>ASSIGN
       525>>ASSIGN    527>>ASSIGN    528>>ASSIGN    530>>ASSIGN    532<<ASSIGN    532>>ASSIGN    537>>ASSIGN
       542<<ASSIGN    546>>ASSIGN    554>>ASSIGN    560<<ASSIGN    560>>ASSIGN    563>>ASSIGN
S_LENGTH
       455**DCL       331--IMP-SIZ   494<<ASSIGN    500>>DOWHILE   502>>IF        510>>CALLBLT   510>>CALLBLT
       515>>CALLBLT   515>>CALLBLT   530>>ASSIGN    543>>DOWHILE   545>>IF        546>>ASSIGN    546>>ASSIGN
       546>>ASSIGN    548>>ASSIGN    551<<ASSIGN    554>>ASSIGN    559<<ASSIGN    559>>ASSIGN
XB$ERR$AUXIO_FILE_POINTER
       325**DCL       478<>CALL
XB$ERR$WRITE_AFTER_READ
       302**DCL       485<>CALL
XBI$COMPLETE_OPEN
       469**DCL-ENT   482--CALL
XBI$CONTINUED_WRITE
       467**DCL-ENT   507--CALL
XBI$FFLUSH
       471**DCL-ENT   568--CALL
XBI$POSITION_TO_EOF
       470**DCL-ENT   492--CALL
XBI$WRITE_THIS_RECORD
       466**DCL-ENT   504--CALL      536--CALL      562--CALL
XBI_SET_STREAM_ERRNO
       465**DCL-ENT   478--CALL      485--CALL
XB_IO_ERROR
       472**DCL-ENT   479--CALL
PL6.E3A0      #001=FWRITE File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:30 Page:11   
XB_RETURN_ORDINAL_RESULT
       468**DCL-ENT   569--CALL      572--CALL

PL6.E3A0      #002=FPUTS File=xb_io_output:6.:XBC3TSI                            FRI 01/06/95 11:30 Page:12   
      150        1        /*T***********************************************************/
      151        2        /*T*                                                         */
      152        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      153        4        /*T*                                                         */
      154        5        /*T***********************************************************/
      155        6
      156        7        fputs: PROC (s, F) ;
      157        8           /*D*  NAME: fputs
      158        9                 PROTOTYPE: int fputs (const char *s, FILE *stream);
      159       10                 DESCRIPTION: Writes the string s to stream.  If successful, zero
      160       11                    is returned.  If unsuccessful a nonzero value is returned.
      161       12                    Many programs seem to assume that the value EOF is returned in
      162       13                    case of an error so EOF is used as the "nonzero value".
      163       14           */
      164       15
      165       16           %INCLUDE xb_stdio_i6;
      166      259           %INCLUDE xb_errors_i6;
      167      330
      168      331    1      DCL s                   CHAR (s_length);
      169      332           %File_Header (Name=F, STCLASS=" ");
      170      444           %Buffer;
      171      447
      172      448    1      DCL s_length               SBIN;
      173      449    1      DCL start                  SBIN;
      174      450    1      DCL space                  SBIN;
      175      451    1      DCL chars_to_write         SBIN;
      176      452    1      DCL newline_position       SBIN;
      177      453    1      DCL newline_found          BIT(1);
      178      454    1      DCL formfeed_found         BIT(1);
      179      455    1      DCL formfeed_position      SBIN;
      180      456
      181      457    1      DCL XBI_SET_STREAM_ERRNO   ENTRY (2);
      182      458    1      DCL XBI$WRITE_THIS_RECORD   ENTRY (1) ALTRET;
      183      459    1      DCL XBI$CONTINUED_WRITE    ENTRY (1) ALTRET;
      184      460    1      DCL XB_RETURN_ORDINAL_RESULT ENTRY (1);
      185      461    1      DCL XBI$COMPLETE_OPEN      ENTRY (1) ALTRET;
      186      462    1      DCL XBI$POSITION_TO_EOF    ENTRY (1) ALTRET;
PL6.E3A0      #002=FPUTS File=xb_io_output:6.:XBC3TSI                            FRI 01/06/95 11:30 Page:13   
      187      463    1      DCL XBI$FFLUSH             ENTRY (1) ALTRET;
      188      464    1      DCL XBI$STRLEN             ENTRY (2);
      189      465    1      DCL XB_IO_ERROR            ENTRY;
      190      466
      191      467    2      IF (F.auxio$ ~= ADDR(NIL)) THEN DO;
      192      468    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$AUXIO_FILE_POINTER);
      193      469    2         CALL XB_IO_ERROR;
      194      470    2      END;
      195      471
      196      472    1      IF F.is_partly_open THEN CALL XBI$COMPLETE_OPEN (F) ALTRET (return_error);
      197      473
      198      474    2      IF F.state = %F_reading_state AND (NOT F.is_eof) THEN DO;
      199      475    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$WRITE_AFTER_READ);
      200      476    2         F.is_error = '1'B;
      201      477    2         GOTO return_error;
      202      478    2      END;
      203      479    1      F.state = %F_writing_state;
      204      480
      205      481    1      IF F.is_write_at_eof AND ~F.is_eof THEN
      206      482    1         CALL XBI$POSITION_TO_EOF (F) ALTRET (return_error);
      207      483
      208      484    1      CALL XBI$STRLEN (s, s_length);
      209      485
      210      486    2      IF F.is_text THEN DO;
      211      487    2         start = 0;
      212      488    3         DO WHILE start < s_length;
      213      489    3            IF F.character_position = F.buffer_size THEN
      214      490    4               IF SUBSTR (s, start, 1) = BINASC(%newline) THEN DO;
      215      491    4                  start = start + 1;
      216      492    4                  CALL XBI$WRITE_THIS_RECORD (F) ALTRET (return_error);
      217      493    4                  GOTO continue_while;
      218      494    3               END; ELSE
      219      495    3                  CALL XBI$CONTINUED_WRITE (F) ALTRET (return_error);
      220      496    3            CALL INDEX (newline_position, BINASC(%newline),
      221      497    3                  SUBSTR (s, 0, MINIMUM (s_length,
      222      498    3                  start + F.buffer_size - F.character_position)), start)
      223      499    4               WHENRETURN DO; newline_found = '1'B; END;
PL6.E3A0      #002=FPUTS File=xb_io_output:6.:XBC3TSI                            FRI 01/06/95 11:30 Page:14   
      224      500    4               WHENALTRETURN DO; newline_found = '0'B; END;
      225      501    3            CALL INDEX (formfeed_position, BINASC(%formfeed),
      226      502    3                  SUBSTR (s, 0, MINIMUM (s_length,
      227      503    3                  start + F.buffer_size - F.character_position)), start)
      228      504    4               WHENRETURN DO; formfeed_found = '1'B; END;
      229      505    4               WHENALTRETURN DO; formfeed_found = '0'B; END;
      230      506    3            IF formfeed_found AND newline_found THEN
      231      507    3               IF formfeed_position < newline_position THEN
      232      508    3                  chars_to_write = formfeed_position - start + 1;
      233      509    3               ELSE chars_to_write = newline_position - start + 1;
      234      510    3            ELSE IF formfeed_found AND NOT newline_found THEN
      235      511    3                    chars_to_write = formfeed_position - start + 1;
      236      512    3                 ELSE IF NOT formfeed_found AND newline_found THEN
      237      513    3                         chars_to_write = newline_position - start + 1;
      238      514    3                      ELSE chars_to_write = newline_position - start;
      239      515    3            F.ars = F.ars + chars_to_write;
      240      516    3            SUBSTR (buffer, F.character_position, chars_to_write) =
      241      517    3               SUBSTR (s, start, chars_to_write);
      242      518    3            start = start + chars_to_write;
      243      519    3            F.character_position = F.ars;
      244      520    3            F.is_buffer_modified = '1'B;
      245      521    3            IF newline_found OR formfeed_found THEN
      246      522    3               CALL XBI$WRITE_THIS_RECORD (F) ALTRET (return_error);
      247      523    3   continue_while:
      248      524    3         END;
      249      525    2      END; ELSE DO; /* binary file */
      250      526    2         start = 0;
      251      527    3         DO WHILE s_length > 0;
      252      528    3            space = F.buffer_size - F.character_position;
      253      529    4            IF space > s_length THEN DO;
      254      530    4               SUBSTR (buffer, F.character_position, s_length) =
      255      531    4                  SUBSTR (s, start, s_length);
      256      532    4               F.character_position = F.character_position + s_length;
      257      533    4               IF F.is_eof OR (F.ars < F.character_position) THEN
      258      534    4                  F.ars = F.character_position;
      259      535    4               s_length = 0;
      260      536    4               F.is_buffer_modified = '1'B;
PL6.E3A0      #002=FPUTS File=xb_io_output:6.:XBC3TSI                            FRI 01/06/95 11:30 Page:15   
      261      537    4            END; ELSE DO;
      262      538    4               SUBSTR (buffer, F.character_position, space) =
      263      539    4                  SUBSTR (s, start, space);
      264      540    4               F.character_position = F.character_position + space;
      265      541    4               IF F.is_eof OR (F.ars < F.character_position) THEN
      266      542    4                  F.ars = F.character_position;
      267      543    4               s_length = s_length - space;
      268      544    4               start = start + space;
      269      545    4               F.is_buffer_modified = '1'B;
      270      546    4               CALL XBI$WRITE_THIS_RECORD (F) ALTRET (return_error);
      271      547    4            END;
      272      548    3         END;
      273      549    2      END;
      274      550    1      IF F.is_unbuffered THEN CALL XBI$FFLUSH (F) ALTRET (return_error);
      275      551    1      CALL XB_RETURN_ORDINAL_RESULT (0); /* return zero */
      276      552
      277      553    1   return_error:
      278      554    1      CALL XB_RETURN_ORDINAL_RESULT (%EOF);
      279      555    1   END fputs;
      280      556        %EOD;

PL6.E3A0      #002=FPUTS File=xb_io_output:6.:XBC3TSI                            FRI 01/06/95 11:30 Page:16   
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FPUTS.

   Procedure FPUTS requires 290 words for executable code.
   Procedure FPUTS requires 16 words of local(AUTO) storage.

PL6.E3A0      #002=FPUTS File=xb_io_output:6.:XBC3TSI                            FRI 01/06/95 11:30 Page:17   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=FPUTS File=xb_io_output:6.:XBC3TSI                            FRI 01/06/95 11:30 Page:18   
          MINI XREF LISTING

BUFFER
       445**DCL       516<<ASSIGN    530<<ASSIGN    538<<ASSIGN
CHARS_TO_WRITE
       451**DCL       508<<ASSIGN    509<<ASSIGN    511<<ASSIGN    513<<ASSIGN    514<<ASSIGN    515>>ASSIGN
       516>>ASSIGN    516>>ASSIGN    518>>ASSIGN
CONTINUE_WHILE
       524**LABEL     493--GOTO
F
       333**DCL         7--PROC      468<>CALL      472<>CALL      475<>CALL      482<>CALL      492<>CALL
       495<>CALL      522<>CALL      546<>CALL      550<>CALL
F.ARS
       355**DCL       515<<ASSIGN    515>>ASSIGN    519>>ASSIGN    533>>IF        534<<ASSIGN    541>>IF
       542<<ASSIGN
F.AUXIO$
       365**DCL       467>>IF
F.BUFFER$
       357**DCL       445--IMP-PTR   516>>ASSIGN    530>>ASSIGN    538>>ASSIGN
F.BUFFER_SIZE
       358**DCL       445--IMP-SIZ   489>>IF        496>>CALLBLT   501>>CALLBLT   516>>ASSIGN    528>>ASSIGN
       530>>ASSIGN    538>>ASSIGN
F.CHARACTER_POSITION
       353**DCL       489>>IF        496>>CALLBLT   501>>CALLBLT   516>>ASSIGN    519<<ASSIGN    528>>ASSIGN
       530>>ASSIGN    532<<ASSIGN    532>>ASSIGN    533>>IF        534>>ASSIGN    538>>ASSIGN    540<<ASSIGN
       540>>ASSIGN    541>>IF        542>>ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
       395**DCL       396--REDEF
F.FPT_READ.V.INDX#
       388**DCL       389--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       433**DCL       434--REDEF
F.IS_BUFFER_MODIFIED
       337**DCL       520<<ASSIGN    536<<ASSIGN    545<<ASSIGN
PL6.E3A0      #002=FPUTS File=xb_io_output:6.:XBC3TSI                            FRI 01/06/95 11:30 Page:19   
F.IS_EOF
       335**DCL       474>>IF        481>>IF        533>>IF        541>>IF
F.IS_ERROR
       340**DCL       476<<ASSIGN
F.IS_PARTLY_OPEN
       345**DCL       472>>IF
F.IS_TEXT
       334**DCL       486>>IF
F.IS_UNBUFFERED
       344**DCL       550>>IF
F.IS_WRITE_AT_EOF
       339**DCL       481>>IF
F.STATE
       360**DCL       474>>IF        479<<ASSIGN
FORMFEED_FOUND
       454**DCL       504<<ASSIGN    505<<ASSIGN    506>>IF        510>>IF        512>>IF        521>>IF
FORMFEED_POSITION
       455**DCL       501<<CALLBLT   507>>IF        508>>ASSIGN    511>>ASSIGN
NEWLINE_FOUND
       453**DCL       499<<ASSIGN    500<<ASSIGN    506>>IF        510>>IF        512>>IF        521>>IF
NEWLINE_POSITION
       452**DCL       496<<CALLBLT   507>>IF        509>>ASSIGN    513>>ASSIGN    514>>ASSIGN
RETURN_ERROR
       554**LABEL     472--CALLALT   477--GOTO      482--CALLALT   492--CALLALT   495--CALLALT   522--CALLALT
       546--CALLALT   550--CALLALT
S
       331**DCL         7--PROC      484<>CALL      490>>IF        496>>CALLBLT   501>>CALLBLT   516>>ASSIGN
       530>>ASSIGN    538>>ASSIGN
SPACE
       450**DCL       528<<ASSIGN    529>>IF        538>>ASSIGN    538>>ASSIGN    540>>ASSIGN    543>>ASSIGN
       544>>ASSIGN
START
       449**DCL       487<<ASSIGN    488>>DOWHILE   490>>IF        491<<ASSIGN    491>>ASSIGN    496>>CALLBLT
       496>>CALLBLT   501>>CALLBLT   501>>CALLBLT   508>>ASSIGN    509>>ASSIGN    511>>ASSIGN    513>>ASSIGN
       514>>ASSIGN    516>>ASSIGN    518<<ASSIGN    518>>ASSIGN    526<<ASSIGN    530>>ASSIGN    538>>ASSIGN
       544<<ASSIGN    544>>ASSIGN
PL6.E3A0      #002=FPUTS File=xb_io_output:6.:XBC3TSI                            FRI 01/06/95 11:30 Page:20   
S_LENGTH
       448**DCL       331--IMP-SIZ   484>>CALL      484<>CALL      488>>DOWHILE   490>>IF        496>>CALLBLT
       496>>CALLBLT   501>>CALLBLT   501>>CALLBLT   516>>ASSIGN    527>>DOWHILE   529>>IF        530>>ASSIGN
       530>>ASSIGN    530>>ASSIGN    532>>ASSIGN    535<<ASSIGN    538>>ASSIGN    543<<ASSIGN    543>>ASSIGN
XB$ERR$AUXIO_FILE_POINTER
       326**DCL       468<>CALL
XB$ERR$WRITE_AFTER_READ
       303**DCL       475<>CALL
XBI$COMPLETE_OPEN
       461**DCL-ENT   472--CALL
XBI$CONTINUED_WRITE
       459**DCL-ENT   495--CALL
XBI$FFLUSH
       463**DCL-ENT   550--CALL
XBI$POSITION_TO_EOF
       462**DCL-ENT   482--CALL
XBI$STRLEN
       464**DCL-ENT   484--CALL
XBI$WRITE_THIS_RECORD
       458**DCL-ENT   492--CALL      522--CALL      546--CALL
XBI_SET_STREAM_ERRNO
       457**DCL-ENT   468--CALL      475--CALL
XB_IO_ERROR
       465**DCL-ENT   469--CALL
XB_RETURN_ORDINAL_RESULT
       460**DCL-ENT   551--CALL      554--CALL

PL6.E3A0      #003=FPUTC File=xb_io_output:6.:XBC3TSI                            FRI 01/06/95 11:30 Page:21   
      281        1        /*T***********************************************************/
      282        2        /*T*                                                         */
      283        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      284        4        /*T*                                                         */
      285        5        /*T***********************************************************/
      286        6
      287        7        fputc: PROC (P_char_to_write, F);
      288        8           /*D*  NAME: fputc
      289        9                 PROTOTYPE: int fputc (int c, FILE *stream);
      290       10                 DESCRIPTION: Writes c cast to an unsigned char to stream.  If
      291       11                    successful, c is returned, otherwise returns EOF.
      292       12           */
      293       13
      294       14           %INCLUDE xb_stdio_i6;
      295      257           %INCLUDE xb_errors_i6;
      296      328
      297      329    1      DCL P_char_to_write        SBIN;
      298      330
      299      331           %File_Header (Name=F);
      300      443           %Buffer;
      301      446
      302      447    1      DCL char_to_write_as_ptr   PTR;
      303      448    1      DCL char_to_write REDEF char_to_write_as_ptr SBIN;
      304      449
      305      450    1      DCL XBI_SET_STREAM_ERRNO   ENTRY (2);
      306      451    1      DCL XBI$WRITE_THIS_RECORD   ENTRY (1) ALTRET;
      307      452    1      DCL XBI$CONTINUED_WRITE    ENTRY (1) ALTRET;
      308      453    1      DCL XB_RETURN_ORDINAL_RESULT ENTRY (1);
      309      454    1      DCL XBI$COMPLETE_OPEN      ENTRY (1) ALTRET;
      310      455    1      DCL XBI$POSITION_TO_EOF    ENTRY (1) ALTRET;
      311      456    1      DCL XB_IO_ERROR            ENTRY;
      312      457
      313      458    1   putc: ENTRY (P_char_to_write, F);
      314      459    1      char_to_write_as_ptr = ADDR(P_char_to_write);
      315      460
      316      461    2      IF (F.auxio$ ~= ADDR(NIL)) THEN DO;
      317      462    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$AUXIO_FILE_POINTER);
PL6.E3A0      #003=FPUTC File=xb_io_output:6.:XBC3TSI                            FRI 01/06/95 11:30 Page:22   
      318      463    2         CALL XB_IO_ERROR;
      319      464    2      END;
      320      465
      321      466    1      IF F.is_partly_open THEN CALL XBI$COMPLETE_OPEN (F) ALTRET (return_eof);
      322      467
      323      468    2      IF F.state = %F_reading_state AND (NOT F.is_eof) THEN DO;
      324      469    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$WRITE_AFTER_READ);
      325      470    2         F.is_error = '1'B;
      326      471    2         GOTO return_eof;
      327      472    2      END;
      328      473    1      F.state = %F_writing_state;
      329      474
      330      475    1      IF F.is_write_at_eof AND ~F.is_eof THEN
      331      476    1         CALL XBI$POSITION_TO_EOF (F) ALTRET (return_eof);
      332      477
      333      478    2      IF F.is_text THEN DO;
      334      479    2         SUBSTR (buffer, F.character_position, 1) =
      335      480    2            BINASC (char_to_write);
      336      481    2         F.character_position = F.character_position + 1;
      337      482    2         F.ars = F.ars + 1;
      338      483    3         IF F.ars = F.buffer_size THEN DO;
      339      484    4            IF char_to_write = %newline OR char_to_write = %formfeed THEN DO;
      340      485    4               CALL XBI$WRITE_THIS_RECORD (F) ALTRET (return_eof);
      341      486    4               CALL XB_RETURN_ORDINAL_RESULT (char_to_write);
      342      487    3            END; ELSE
      343      488    3               CALL XBI$CONTINUED_WRITE (F) ALTRET (return_eof);
      344      489    3         END;
      345      490    3         IF char_to_write = %newline OR char_to_write = %formfeed THEN DO;
      346      491    3            F.is_buffer_modified = '1'B;
      347      492    3            CALL XBI$WRITE_THIS_RECORD (F) ALTRET (return_eof);
      348      493    3            CALL XB_RETURN_ORDINAL_RESULT (char_to_write);
      349      494    3         END;
      350      495    2         F.is_buffer_modified = '1'B;
      351      496    2         CALL XB_RETURN_ORDINAL_RESULT (char_to_write);
      352      497    2         RETURN;
      353      498    2      END;
      354      499
PL6.E3A0      #003=FPUTC File=xb_io_output:6.:XBC3TSI                            FRI 01/06/95 11:30 Page:23   
      355      500           /* it's a binary file */
      356      501    1   Try_Again:;
      357      502    2      IF F.is_eof THEN DO;
      358      503    3         IF F.character_position >=  F.buffer_size THEN DO;
      359      504    3            CALL XBI$WRITE_THIS_RECORD (F) ALTRET (return_eof);
      360      505    3         END;
      361      506    2         F.ars = F.character_position + 1;
      362      507    2      END; ELSE DO; /* file is not positioned at eof */
      363      508    3         IF F.character_position >= F.ars THEN DO;
      364      509    4            IF F.ars < F.buffer_size THEN DO;
      365      510                    /* this record isn't full.  We must be at eof. */
      366      511    4               F.is_eof = '1'B;
      367      512    4               GOTO Try_Again;
      368      513    4            END;
      369      514    3            CALL XBI$WRITE_THIS_RECORD (F) ALTRET (return_eof);
      370      515
      371      516    3         END;
      372      517    2      END;
      373      518    1      SUBSTR (buffer, F.character_position, 1) =
      374      519    1         BINASC (char_to_write);
      375      520    1      F.character_position = F.character_position + 1;
      376      521    1      F.is_buffer_modified = '1'B;
      377      522    1      CALL XB_RETURN_ORDINAL_RESULT (char_to_write);
      378      523
      379      524    1   return_eof:
      380      525    1      CALL XB_RETURN_ORDINAL_RESULT (%EOF);
      381      526    1   END fputc;
      382      527        %EOD;

PL6.E3A0      #003=FPUTC File=xb_io_output:6.:XBC3TSI                            FRI 01/06/95 11:30 Page:24   
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FPUTC.

   Procedure FPUTC requires 186 words for executable code.
   Procedure FPUTC requires 8 words of local(AUTO) storage.

PL6.E3A0      #003=FPUTC File=xb_io_output:6.:XBC3TSI                            FRI 01/06/95 11:30 Page:25   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=FPUTC File=xb_io_output:6.:XBC3TSI                            FRI 01/06/95 11:30 Page:26   
          MINI XREF LISTING

BUFFER
       444**DCL       479<<ASSIGN    518<<ASSIGN
CHAR_TO_WRITE
       448**DCL       479>>ASSIGN    484>>IF        484>>IF        486<>CALL      490>>IF        490>>IF
       493<>CALL      496<>CALL      518>>ASSIGN    522<>CALL
CHAR_TO_WRITE_AS_PTR
       447**DCL       448--REDEF     459<<ASSIGN
F
       332**DCL         7--PROC      458--ENTRY     462<>CALL      466<>CALL      469<>CALL      476<>CALL
       485<>CALL      488<>CALL      492<>CALL      504<>CALL      514<>CALL
F.ARS
       354**DCL       482<<ASSIGN    482>>ASSIGN    483>>IF        506<<ASSIGN    508>>IF        509>>IF
F.AUXIO$
       364**DCL       461>>IF
F.BUFFER$
       356**DCL       444--IMP-PTR   479>>ASSIGN    518>>ASSIGN
F.BUFFER_SIZE
       357**DCL       444--IMP-SIZ   479>>ASSIGN    483>>IF        503>>IF        509>>IF        518>>ASSIGN
F.CHARACTER_POSITION
       352**DCL       479>>ASSIGN    481<<ASSIGN    481>>ASSIGN    503>>IF        506>>ASSIGN    508>>IF
       518>>ASSIGN    520<<ASSIGN    520>>ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
       394**DCL       395--REDEF
F.FPT_READ.V.INDX#
       387**DCL       388--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       432**DCL       433--REDEF
F.IS_BUFFER_MODIFIED
       336**DCL       491<<ASSIGN    495<<ASSIGN    521<<ASSIGN
F.IS_EOF
       334**DCL       468>>IF        475>>IF        502>>IF        511<<ASSIGN
F.IS_ERROR
PL6.E3A0      #003=FPUTC File=xb_io_output:6.:XBC3TSI                            FRI 01/06/95 11:30 Page:27   
       339**DCL       470<<ASSIGN
F.IS_PARTLY_OPEN
       344**DCL       466>>IF
F.IS_TEXT
       333**DCL       478>>IF
F.IS_WRITE_AT_EOF
       338**DCL       475>>IF
F.STATE
       359**DCL       468>>IF        473<<ASSIGN
P_CHAR_TO_WRITE
       329**DCL         7--PROC      458--ENTRY     459--ASSIGN
RETURN_EOF
       525**LABEL     466--CALLALT   471--GOTO      476--CALLALT   485--CALLALT   488--CALLALT   492--CALLALT
       504--CALLALT   514--CALLALT
TRY_AGAIN
       490**LABEL     512--GOTO
XB$ERR$AUXIO_FILE_POINTER
       324**DCL       462<>CALL
XB$ERR$WRITE_AFTER_READ
       301**DCL       469<>CALL
XBI$COMPLETE_OPEN
       454**DCL-ENT   466--CALL
XBI$CONTINUED_WRITE
       452**DCL-ENT   488--CALL
XBI$POSITION_TO_EOF
       455**DCL-ENT   476--CALL
XBI$WRITE_THIS_RECORD
       451**DCL-ENT   485--CALL      492--CALL      504--CALL      514--CALL
XBI_SET_STREAM_ERRNO
       450**DCL-ENT   462--CALL      469--CALL
XB_IO_ERROR
       456**DCL-ENT   463--CALL
XB_RETURN_ORDINAL_RESULT
       453**DCL-ENT   486--CALL      493--CALL      496--CALL      522--CALL      525--CALL

PL6.E3A0      #004=PUTCHAR File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:30 Page:28   
      383        1        /*T***********************************************************/
      384        2        /*T*                                                         */
      385        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      386        4        /*T*                                                         */
      387        5        /*T***********************************************************/
      388        6
      389        7        putchar: PROC(C_ARG) MATERIALIZE($PR0 IN arg$);
      390        8           /*D*  NAME: putchar
      391        9                 PROTOTYPE: int putchar (int c, FILE *stream);
      392       10                 DESCRIPTION: Writes c cast to an unsigned char to stdout.  If
      393       11                    successful, c is returned, otherwise returns EOF.
      394       12           */
      395       13
      396       14           %INCLUDE xb_stdio_i6;
      397      257           %INCLUDE xb_errors_i6;
      398      328
      399      329    1      DCL C_ARG                          SBIN; /* for argument count */
      400      330    1      DCL STDOUT_P                       PTR SYMREF;
      401      331
      402      332    1      DCL arg$                PTR;
      403      333    1      DCL char_to_write       SBIN;
      404      334    1      DCL based_sbin          SBIN BASED;
      405      335
      406      336           %File_Header (Name=F, STCLASS="BASED (F$)");
      407      448           /* Since F is based, the stupid PL6 compiler won't let us declare
      408      449              the buffer in the manner we normally do.
      409      450           */
      410      451    1      DCL buffer$             PTR;
      411      452    1      DCL buffer_size         UBIN;
      412      453    1      DCL buffer              CHAR (buffer_size) BASED (buffer$);
      413      454    1      DCL F$                  PTR;
      414      455
      415      456    1      DCL XBI_SET_STREAM_ERRNO   ENTRY (2);
      416      457    1      DCL XBI$WRITE_THIS_RECORD   ENTRY (1) ALTRET;
      417      458    1      DCL XBI$CONTINUED_WRITE    ENTRY (1) ALTRET;
      418      459    1      DCL XB_RETURN_ORDINAL_RESULT ENTRY (1);
      419      460    1      DCL XBI$COMPLETE_OPEN      ENTRY (1) ALTRET;
PL6.E3A0      #004=PUTCHAR File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:30 Page:29   
      420      461    1      DCL XBI$POSITION_TO_EOF    ENTRY (1) ALTRET;
      421      462
      422      463    1      F$ = stdout_p;
      423      464
      424      465    1      IF F.is_partly_open THEN CALL XBI$COMPLETE_OPEN (F) ALTRET (return_eof);
      425      466
      426      467    1      char_to_write = arg$ -> based_sbin;
      427      468
      428      469           /* setup the buffer pointer because PL6 won't let us use the one in F */
      429      470
      430      471    1      buffer$ = F.buffer$;
      431      472    1      buffer_size = F.buffer_size;
      432      473
      433      474    2      IF F.state = %F_reading_state AND (NOT F.is_eof) THEN DO;
      434      475    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$WRITE_AFTER_READ);
      435      476    2         F.is_error = '1'B;
      436      477    2         GOTO return_eof;
      437      478    2      END;
      438      479    1      F.state = %F_writing_state;
      439      480
      440      481    1      IF F.is_write_at_eof AND ~F.is_eof THEN
      441      482    1         CALL XBI$POSITION_TO_EOF (F) ALTRET (return_eof);
      442      483
      443      484    2      IF F.is_text THEN DO;
      444      485    3         IF F.ars = F.buffer_size THEN DO;
      445      486    4            IF char_to_write = %newline THEN DO;
      446      487    4               CALL XBI$WRITE_THIS_RECORD (F) ALTRET (return_eof);
      447      488    4               CALL XB_RETURN_ORDINAL_RESULT (char_to_write);
      448      489    3            END; ELSE
      449      490    3               CALL XBI$CONTINUED_WRITE (F) ALTRET (return_eof);
      450      491    3         END;
      451      492    3         IF char_to_write = %newline THEN DO;
      452      493    3            F.is_buffer_modified = '1'B;
      453      494    3            CALL XBI$WRITE_THIS_RECORD (F) ALTRET (return_eof);
      454      495    3            CALL XB_RETURN_ORDINAL_RESULT (char_to_write);
      455      496    3         END;
      456      497    2         SUBSTR (buffer, F.character_position, 1) =
PL6.E3A0      #004=PUTCHAR File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:30 Page:30   
      457      498    2            BINASC (char_to_write);
      458      499    2         F.character_position = F.character_position + 1;
      459      500    2         F.ars = F.ars + 1;
      460      501    2         F.is_buffer_modified = '1'B;
      461      502    2         CALL XB_RETURN_ORDINAL_RESULT (char_to_write);
      462      503    2         RETURN;
      463      504    2      END;
      464      505
      465      506           /* it's a binary file */
      466      507    1   Try_Again:;
      467      508    2      IF F.is_eof THEN DO;
      468      509    3         IF F.character_position >=  F.buffer_size THEN DO;
      469      510    3            CALL XBI$WRITE_THIS_RECORD (F) ALTRET (return_eof);
      470      511    3         END;
      471      512    2         F.ars = F.character_position + 1;
      472      513    2      END; ELSE DO; /* file is not positioned at eof */
      473      514    3         IF F.character_position >= F.ars THEN DO;
      474      515    4            IF F.ars < F.buffer_size THEN DO;
      475      516                    /* this record isn't full.  We must be at eof. */
      476      517    4               F.is_eof = '1'B;
      477      518    4               GOTO Try_Again;
      478      519    4            END;
      479      520    3            CALL XBI$WRITE_THIS_RECORD (F) ALTRET (return_eof);
      480      521
      481      522    3         END;
      482      523    2      END;
      483      524    1      SUBSTR (buffer, F.character_position, 1) =
      484      525    1         BINASC (char_to_write);
      485      526    1      F.character_position = F.character_position + 1;
      486      527    1      F.is_buffer_modified = '1'B;
      487      528    1      CALL XB_RETURN_ORDINAL_RESULT (char_to_write);
      488      529
      489      530    1   return_eof:
      490      531    1      CALL XB_RETURN_ORDINAL_RESULT (%EOF);
      491      532    1   END putchar;
      492      533        %EOD;

PL6.E3A0      #004=PUTCHAR File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:30 Page:31   
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure PUTCHAR.

   Procedure PUTCHAR requires 171 words for executable code.
   Procedure PUTCHAR requires 12 words of local(AUTO) storage.

PL6.E3A0      #004=PUTCHAR File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:30 Page:32   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=PUTCHAR File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:30 Page:33   
          MINI XREF LISTING

ARG$
       332**DCL         7--MATRLIZ   467>>ASSIGN
BASED_SBIN
       334**DCL       467>>ASSIGN
BUFFER
       453**DCL       497<<ASSIGN    524<<ASSIGN
BUFFER$
       451**DCL       453--IMP-PTR   471<<ASSIGN    497>>ASSIGN    524>>ASSIGN
BUFFER_SIZE
       452**DCL       453--IMP-SIZ   472<<ASSIGN    497>>ASSIGN    524>>ASSIGN
CHAR_TO_WRITE
       333**DCL       467<<ASSIGN    486>>IF        488<>CALL      492>>IF        495<>CALL      497>>ASSIGN
       502<>CALL      524>>ASSIGN    528<>CALL
C_ARG
       329**DCL         7--PROC
F
       337**DCL       465<>CALL      475<>CALL      482<>CALL      487<>CALL      490<>CALL      494<>CALL
       510<>CALL      520<>CALL
F.ARS
       359**DCL       485>>IF        500<<ASSIGN    500>>ASSIGN    512<<ASSIGN    514>>IF        515>>IF
F.BUFFER$
       361**DCL       471>>ASSIGN
F.BUFFER_SIZE
       362**DCL       472>>ASSIGN    485>>IF        509>>IF        515>>IF
F.CHARACTER_POSITION
       357**DCL       497>>ASSIGN    499<<ASSIGN    499>>ASSIGN    509>>IF        512>>ASSIGN    514>>IF
       524>>ASSIGN    526<<ASSIGN    526>>ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
       399**DCL       400--REDEF
F.FPT_READ.V.INDX#
       392**DCL       393--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
PL6.E3A0      #004=PUTCHAR File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:30 Page:34   
       437**DCL       438--REDEF
F.IS_BUFFER_MODIFIED
       341**DCL       493<<ASSIGN    501<<ASSIGN    527<<ASSIGN
F.IS_EOF
       339**DCL       474>>IF        481>>IF        508>>IF        517<<ASSIGN
F.IS_ERROR
       344**DCL       476<<ASSIGN
F.IS_PARTLY_OPEN
       349**DCL       465>>IF
F.IS_TEXT
       338**DCL       484>>IF
F.IS_WRITE_AT_EOF
       343**DCL       481>>IF
F.STATE
       364**DCL       474>>IF        479<<ASSIGN
F$
       454**DCL       337--IMP-PTR   463<<ASSIGN    465>>IF        465>>CALL      471>>ASSIGN    472>>ASSIGN
       474>>IF        474>>IF        475>>CALL      476>>ASSIGN    479>>ASSIGN    481>>IF        481>>IF
       482>>CALL      484>>IF        485>>IF        485>>IF        487>>CALL      490>>CALL      493>>ASSIGN
       494>>CALL      497>>ASSIGN    499>>ASSIGN    499>>ASSIGN    500>>ASSIGN    500>>ASSIGN    501>>ASSIGN
       508>>IF        509>>IF        509>>IF        510>>CALL      512>>ASSIGN    512>>ASSIGN    514>>IF
       514>>IF        515>>IF        515>>IF        517>>ASSIGN    520>>CALL      524>>ASSIGN    526>>ASSIGN
       526>>ASSIGN    527>>ASSIGN
RETURN_EOF
       531**LABEL     465--CALLALT   477--GOTO      482--CALLALT   487--CALLALT   490--CALLALT   494--CALLALT
       510--CALLALT   520--CALLALT
STDOUT_P
       330**DCL       463>>ASSIGN
TRY_AGAIN
       499**LABEL     518--GOTO
XB$ERR$WRITE_AFTER_READ
       301**DCL       475<>CALL
XBI$COMPLETE_OPEN
       460**DCL-ENT   465--CALL
XBI$CONTINUED_WRITE
       458**DCL-ENT   490--CALL
PL6.E3A0      #004=PUTCHAR File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:30 Page:35   
XBI$POSITION_TO_EOF
       461**DCL-ENT   482--CALL
XBI$WRITE_THIS_RECORD
       457**DCL-ENT   487--CALL      494--CALL      510--CALL      520--CALL
XBI_SET_STREAM_ERRNO
       456**DCL-ENT   475--CALL
XB_RETURN_ORDINAL_RESULT
       459**DCL-ENT   488--CALL      495--CALL      502--CALL      528--CALL      531--CALL

PL6.E3A0      #005=PUTW File=xb_io_output:6.:XBC3TSI                             FRI 01/06/95 11:30 Page:36   
      493        1        /*T***********************************************************/
      494        2        /*T*                                                         */
      495        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      496        4        /*T*                                                         */
      497        5        /*T***********************************************************/
      498        6
      499        7        putw: PROC (P_word_to_write, F);
      500        8        /*D*  NAME: putw
      501        9              PROTOTYPE: int putw (int w, FILE *stream);
      502       10              DESCRIPTION: Writes the word w to the stream stream.  If
      503       11                           successful, w is returned, otherwise returns EOF.
      504       12        */
      505       13
      506       14        %INCLUDE xb_stdio_i6;
      507      257        %INCLUDE xb_errors_i6;
      508      328
      509      329        /*    Parameter declarations  */
      510      330
      511      331    1   DCL   P_word_to_write         SBIN;
      512      332        %File_Header (Name=F);
      513      444        %Buffer;
      514      447    1   DCL   word_to_write_as_ptr    PTR;
      515      448    1   DCL   word_to_write           REDEF word_to_write_as_ptr SBIN;
      516      449    1   DCL   char_to_write           REDEF word_to_write_as_ptr CHAR(4);
      517      450
      518      451        /*    Function declatartions  */
      519      452
      520      453    1   DCL   XBI_SET_STREAM_ERRNO       ENTRY (2);
      521      454    1   DCL   XBI$WRITE_THIS_RECORD      ENTRY (1) ALTRET;
      522      455    1   DCL   XBI$CONTINUED_WRITE        ENTRY (1) ALTRET;
      523      456    1   DCL   XB_RETURN_ORDINAL_RESULT   ENTRY (1);
      524      457    1   DCL   XBI$COMPLETE_OPEN          ENTRY (1) ALTRET;
      525      458    1   DCL   XBI$POSITION_TO_EOF        ENTRY (1) ALTRET;
      526      459    1   DCL   XB_IO_ERROR                ENTRY;
      527      460
      528      461        /*    Local declarations   */
      529      462
PL6.E3A0      #005=PUTW File=xb_io_output:6.:XBC3TSI                             FRI 01/06/95 11:30 Page:37   
      530      463    1   DCL   I        SBIN;
      531      464
      532      465        /*    Kludge to get the argument                                    */
      533      466
      534      467    1      word_to_write_as_ptr = ADDR(P_word_to_write);
      535      468
      536      469    2      IF (F.auxio$ ~= ADDR(NIL)) THEN DO;
      537      470    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$AUXIO_FILE_POINTER);
      538      471    2         CALL XB_IO_ERROR;
      539      472    2      END;
      540      473
      541      474    1      IF F.is_partly_open THEN
      542      475    1         CALL XBI$COMPLETE_OPEN (F) ALTRET (return_eof);
      543      476
      544      477    2      IF F.state = %F_reading_state AND (NOT F.is_eof) THEN DO;
      545      478    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$WRITE_AFTER_READ);
      546      479    2         F.is_error = '1'B;
      547      480    2         GOTO return_eof;
      548      481    2      END;
      549      482    1      F.state = %F_writing_state;
      550      483
      551      484    1      IF F.is_write_at_eof AND ~F.is_eof THEN
      552      485    1         CALL XBI$POSITION_TO_EOF (F) ALTRET (return_eof);
      553      486
      554      487    2      IF F.is_text THEN DO;
      555      488    3         DO I= 0 TO 3;
      556      489    4            IF SUBSTR(char_to_write, i, 1) = BINASC(%newline) THEN DO;
      557      490    4               F.is_buffer_modified = '1'B;
      558      491    4               CALL XBI$WRITE_THIS_RECORD (F) ALTRET (return_eof);
      559      492    4            END;
      560      493    4            ELSE DO;
      561      494    5               IF F.ars = F.buffer_size THEN DO;
      562      495    5                  CALL XBI$CONTINUED_WRITE (F) ALTRET (return_eof);
      563      496    5               END;
      564      497    4               SUBSTR (buffer, F.character_position, 1) =
      565      498    4                       SUBSTR(char_to_write,i, 1);
      566      499    4               F.character_position = F.character_position + 1;
PL6.E3A0      #005=PUTW File=xb_io_output:6.:XBC3TSI                             FRI 01/06/95 11:30 Page:38   
      567      500    4               F.ars = F.ars + 1;
      568      501    4               F.is_buffer_modified = '1'B;
      569      502    4            END;
      570      503    3         END;
      571      504    2         CALL XB_RETURN_ORDINAL_RESULT (word_to_write);
      572      505    2      END;
      573      506
      574      507        /* it's a binary file                                               */
      575      508
      576      509    2      DO I = 0 TO 3;
      577      510    2   Try_Again:;
      578      511    3         IF F.is_eof THEN DO;
      579      512    4            IF F.character_position >=  F.buffer_size THEN DO;
      580      513    4               CALL XBI$WRITE_THIS_RECORD (F) ALTRET (return_eof);
      581      514    4            END;
      582      515    3            F.ars = F.character_position + 1;
      583      516    3         END;
      584      517    3         ELSE DO; /* file is not positioned at eof */
      585      518    4            IF F.character_position >= F.ars THEN DO;
      586      519    5               IF F.ars < F.buffer_size THEN DO;
      587      520                       /* this record isn't full.  We must be at eof. */
      588      521    5                  F.is_eof = '1'B;
      589      522    5                  GOTO Try_Again;
      590      523    5               END;
      591      524    4               CALL XBI$WRITE_THIS_RECORD (F) ALTRET (return_eof);
      592      525    4            END;
      593      526    3         END;
      594      527    2         SUBSTR (buffer, F.character_position, 1) =
      595      528    2                 SUBSTR (char_to_write, i, 1);
      596      529    2         F.character_position = F.character_position + 1;
      597      530    2         F.is_buffer_modified = '1'B;
      598      531    2      END;
      599      532    1      CALL XB_RETURN_ORDINAL_RESULT (word_to_write);
      600      533
      601      534    1   return_eof:
      602      535    1      CALL XB_RETURN_ORDINAL_RESULT (%EOF);
      603      536    1   END putw;
PL6.E3A0      #005=PUTW File=xb_io_output:6.:XBC3TSI                             FRI 01/06/95 11:30 Page:39   
      604      537        %EOD;

PL6.E3A0      #005=PUTW File=xb_io_output:6.:XBC3TSI                             FRI 01/06/95 11:30 Page:40   
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure PUTW.

   Procedure PUTW requires 166 words for executable code.
   Procedure PUTW requires 10 words of local(AUTO) storage.

PL6.E3A0      #005=PUTW File=xb_io_output:6.:XBC3TSI                             FRI 01/06/95 11:30 Page:41   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=PUTW File=xb_io_output:6.:XBC3TSI                             FRI 01/06/95 11:30 Page:42   
          MINI XREF LISTING

BUFFER
       445**DCL       497<<ASSIGN    527<<ASSIGN
CHAR_TO_WRITE
       449**DCL       489>>IF        497>>ASSIGN    527>>ASSIGN
F
       333**DCL         7--PROC      470<>CALL      475<>CALL      478<>CALL      485<>CALL      491<>CALL
       495<>CALL      513<>CALL      524<>CALL
F.ARS
       355**DCL       494>>IF        500<<ASSIGN    500>>ASSIGN    515<<ASSIGN    518>>IF        519>>IF
F.AUXIO$
       365**DCL       469>>IF
F.BUFFER$
       357**DCL       445--IMP-PTR   497>>ASSIGN    527>>ASSIGN
F.BUFFER_SIZE
       358**DCL       445--IMP-SIZ   494>>IF        497>>ASSIGN    512>>IF        519>>IF        527>>ASSIGN
F.CHARACTER_POSITION
       353**DCL       497>>ASSIGN    499<<ASSIGN    499>>ASSIGN    512>>IF        515>>ASSIGN    518>>IF
       527>>ASSIGN    529<<ASSIGN    529>>ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
       395**DCL       396--REDEF
F.FPT_READ.V.INDX#
       388**DCL       389--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       433**DCL       434--REDEF
F.IS_BUFFER_MODIFIED
       337**DCL       490<<ASSIGN    501<<ASSIGN    530<<ASSIGN
F.IS_EOF
       335**DCL       477>>IF        484>>IF        511>>IF        521<<ASSIGN
F.IS_ERROR
       340**DCL       479<<ASSIGN
F.IS_PARTLY_OPEN
       345**DCL       474>>IF
PL6.E3A0      #005=PUTW File=xb_io_output:6.:XBC3TSI                             FRI 01/06/95 11:30 Page:43   
F.IS_TEXT
       334**DCL       487>>IF
F.IS_WRITE_AT_EOF
       339**DCL       484>>IF
F.STATE
       360**DCL       477>>IF        482<<ASSIGN
I
       463**DCL       488<<DOINDEX   489>>IF        497>>ASSIGN    509<<DOINDEX   527>>ASSIGN
P_WORD_TO_WRITE
       331**DCL         7--PROC      467--ASSIGN
RETURN_EOF
       535**LABEL     475--CALLALT   480--GOTO      485--CALLALT   491--CALLALT   495--CALLALT   513--CALLALT
       524--CALLALT
TRY_AGAIN
       509**LABEL     522--GOTO
WORD_TO_WRITE
       448**DCL       504<>CALL      532<>CALL
WORD_TO_WRITE_AS_PTR
       447**DCL       448--REDEF     449--REDEF     467<<ASSIGN
XB$ERR$AUXIO_FILE_POINTER
       324**DCL       470<>CALL
XB$ERR$WRITE_AFTER_READ
       301**DCL       478<>CALL
XBI$COMPLETE_OPEN
       457**DCL-ENT   475--CALL
XBI$CONTINUED_WRITE
       455**DCL-ENT   495--CALL
XBI$POSITION_TO_EOF
       458**DCL-ENT   485--CALL
XBI$WRITE_THIS_RECORD
       454**DCL-ENT   491--CALL      513--CALL      524--CALL
XBI_SET_STREAM_ERRNO
       453**DCL-ENT   470--CALL      478--CALL
XB_IO_ERROR
       459**DCL-ENT   471--CALL
XB_RETURN_ORDINAL_RESULT
PL6.E3A0      #005=PUTW File=xb_io_output:6.:XBC3TSI                             FRI 01/06/95 11:30 Page:44   
       456**DCL-ENT   504--CALL      532--CALL      535--CALL

PL6.E3A0      #006=FFLUSH File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:30 Page:45   
      605        1        /*T***********************************************************/
      606        2        /*T*                                                         */
      607        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      608        4        /*T*                                                         */
      609        5        /*T***********************************************************/
      610        6
      611        7        fflush: PROC (F);
      612        8           /*D*  NAME: fflush
      613        9                 PROTOTYPE: int fflush (FILE *stream);
      614       10                 DESCRIPTION: If the stream is unbuffered, any unwritten data is
      615       11                    flushed.
      616       12                    If successful, zero is returned.  If unsuccessful a nonzero
      617       13                    value is returned.
      618       14           */
      619       15
      620       16           %INCLUDE CP_6;
      621     5576           %INCLUDE CP_6_SUBS;
      622     6116           %INCLUDE xb_stdio_i6;
      623     6359           %INCLUDE xb_errors_i6;
      624     6430
      625     6431           %F$DCB(STCLASS="BASED(dcb$)");
      626     6488           %File_Header (Name=F, Stclass=" ");
      627     6600           %File_Header (Name=F_Based, Stclass="BASED (CURRENT$)");
      628     6712
      629     6713    1      DCL CURRENT$                  PTR;
      630     6714    1      DCL dcb$                      PTR;
      631     6715
      632     6716    1      DCL XBI$FFLUSH                ENTRY (1) ALTRET;
      633     6717    1      DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      634     6718    1      DCL XB_IO_ERROR            ENTRY;
      635     6719    1      DCL XBI_SET_STREAM_ERRNO   ENTRY(2);
      636     6720
      637     6721    2      IF ADDR(F) ~= ADDR(NIL) THEN DO;
      638     6722    3         IF (F.auxio$ ~= ADDR(NIL)) THEN DO;
      639     6723    3            CALL XBI_SET_STREAM_ERRNO (F, ERR$AUXIO_FILE_POINTER);
      640     6724    3            CALL XB_IO_ERROR;
      641     6725    3         END;
PL6.E3A0      #006=FFLUSH File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:30 Page:46   
      642     6726
      643     6727    2         dcb$ = DCBADDR(F.fpt_write.v.dcb#);
      644     6728    2         IF dcb$->F$DCB.ASN# = %DEVICE#  AND  dcb$->F$DCB.DDEV.IC# THEN
      645     6729    2            CALL XBI$FFLUSH (F)
      646     6730    3               WHENALTRETURN DO;
      647     6731    3                  CALL XB_RETURN_ORDINAL_RESULT (1);
      648     6732    3               END;
      649     6733    2             END;
      650     6734    2      ELSE DO;
      651     6735    2         CURRENT$ = XBI$FIRST_FILE_HEADER;
      652     6736    3         DO WHILE CURRENT$ ~= ADDR(NIL);
      653     6737    3            IF (F_Based.auxio$ =ADDR(NIL)) AND F_Based.is_unbuffered THEN
      654     6738    3               CALL XBI$FFLUSH (F_Based)
      655     6739    4                  WHENALTRETURN DO;
      656     6740    4                     CALL XB_RETURN_ORDINAL_RESULT (1);
      657     6741    4                  END;
      658     6742    3            CURRENT$ = F_Based.NEXT_FILE_HEADER;
      659     6743    3         END /* while */;
      660     6744    2      END;
      661     6745
      662     6746    1      CALL XB_RETURN_ORDINAL_RESULT (0);
      663     6747    1   END fflush;
      664     6748        %EOD;

PL6.E3A0      #006=FFLUSH File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:30 Page:47   
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FFLUSH.

   Procedure FFLUSH requires 72 words for executable code.
   Procedure FFLUSH requires 8 words of local(AUTO) storage.

PL6.E3A0      #006=FFLUSH File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:30 Page:48   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=FFLUSH File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:30 Page:49   
          MINI XREF LISTING

CURRENT$
      6713**DCL      6601--IMP-PTR  6735<<ASSIGN   6736>>DOWHILE  6737>>IF       6737>>IF       6738>>CALL
      6742<<ASSIGN   6742>>ASSIGN
DCB$
      6714**DCL      6432--IMP-PTR  6727<<ASSIGN   6728>>IF       6728>>IF
F
      6489**DCL         7--PROC     6721--IF       6723<>CALL     6729<>CALL
F.AUXIO$
      6521**DCL      6722>>IF
F.FPT_READ.V.DVBYTE.REREAD#
      6551**DCL      6552--REDEF
F.FPT_READ.V.INDX#
      6544**DCL      6545--REDEF
F.FPT_WRITE.V.DCB#
      6571**DCL      6727--ASSIGN
F.FPT_WRITE.V.DVBYTE.VFC#
      6589**DCL      6590--REDEF
F$DCB.ACTPOS
      6464**DCL      6464--REDEF
F$DCB.ARS#
      6438**DCL      6438--REDEF
F$DCB.ASN#
      6453**DCL      6728>>IF
F$DCB.ATTR
      6457**DCL      6458--REDEF
F$DCB.BORROW
      6472**DCL      6472--REDEF    6472--REDEF    6472--REDEF
F$DCB.DCBNAME.L
      6486**DCL      6486--IMP-SIZ
F$DCB.DDEV.IC#
      6444**DCL      6728>>IF
F$DCB.EOMCHAR#
PL6.E3A0      #006=FFLUSH File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:30 Page:50   
      6442**DCL      6442--REDEF
F$DCB.FLDID
      6467**DCL      6467--REDEF
F$DCB.FORM$
      6461**DCL      6461--REDEF
F$DCB.FSECT
      6477**DCL      6477--REDEF
F$DCB.FSN#
      6454**DCL      6454--REDEF    6454--REDEF    6455--REDEF
F$DCB.HEADER$
      6460**DCL      6460--REDEF
F$DCB.IXTNSIZE#
      6458**DCL      6458--REDEF
F$DCB.LASTSTA$
      6447**DCL      6447--REDEF
F$DCB.LVL
      6473**DCL      6473--REDEF
F$DCB.NAME#.C
      6448**DCL      6448--REDEF
F$DCB.NOEOF
      6470**DCL      6470--REDEF
F$DCB.NRECS#
      6459**DCL      6459--REDEF
F$DCB.NRECX
      6478**DCL      6478--REDEF
F$DCB.OHDR
      6470**DCL      6470--REDEF
F$DCB.ORG#
      6453**DCL      6453--REDEF
F$DCB.PRECNO
      6476**DCL      6476--REDEF
F$DCB.RCSZ
      6482**DCL      6482--REDEF
F$DCB.RES#
      6449**DCL      6449--REDEF
F$DCB.SETX
PL6.E3A0      #006=FFLUSH File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:30 Page:51   
      6461**DCL      6461--REDEF
F$DCB.TAB$
      6461**DCL      6461--REDEF
F$DCB.TDA
      6475**DCL      6476--REDEF
F$DCB.WSN#
      6449**DCL      6449--REDEF
F_BASED
      6601**DCL      6738<>CALL
F_BASED.AUXIO$
      6633**DCL      6737>>IF
F_BASED.FPT_READ.V.DVBYTE.REREAD#
      6663**DCL      6664--REDEF
F_BASED.FPT_READ.V.INDX#
      6656**DCL      6657--REDEF
F_BASED.FPT_WRITE.V.DVBYTE.VFC#
      6701**DCL      6702--REDEF
F_BASED.IS_UNBUFFERED
      6612**DCL      6737>>IF
F_BASED.NEXT_FILE_HEADER
      6629**DCL      6742>>ASSIGN
XB$ERR$AUXIO_FILE_POINTER
      6426**DCL      6723<>CALL
XBI$FFLUSH
      6716**DCL-ENT  6729--CALL     6738--CALL
XBI$FIRST_FILE_HEADER
      6134**DCL      6735>>ASSIGN
XBI_SET_STREAM_ERRNO
      6719**DCL-ENT  6723--CALL
XB_IO_ERROR
      6718**DCL-ENT  6724--CALL
XB_RETURN_ORDINAL_RESULT
      6717**DCL-ENT  6731--CALL     6740--CALL     6746--CALL

PL6.E3A0      #007=FPRINTF File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:31 Page:52   
      665        1        /*T***********************************************************/
      666        2        /*T*                                                         */
      667        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      668        4        /*T*                                                         */
      669        5        /*T***********************************************************/
      670        6
      671        7        fprintf: PROC MATERIALIZE ($PR0 IN argument_block$,
      672        8                                   $PR1 IN descriptor_block$);
      673        9           /*D*  NAME: fprintf
      674       10                 PROTOTYPE: int fprintf (FILE *stream, const char *format, ... );
      675       11                 DESCRIPTION: Writes zero or more items to stream under format control.
      676       12           */
      677       13
      678       14           %INCLUDE B$OBJECT_C;
      679     3444           %INCLUDE xb_stdio_i6;
      680     3687
      681     3688    1      DCL argument_block$           PTR;
      682     3689    1      DCL descriptor_block$         PTR;
      683     3690
      684     3691    1      DCL result                    SBIN;
      685     3692    1      DCL based_char                CHAR(1) BASED;
      686     3693    1      DCL based_ptr (0:1)           PTR BASED (argument_block$);
      687     3694
      688     3695    1      DCL XBI$PRINT                 ENTRY (6);
      689     3696    1      DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      690     3697
      691     3698           %B$DESC_LIST (STCLASS="BASED (descriptor_block$)");
      692     3835           %File_Header (Name=F, Stclass=BASED);
      693     3947
      694     3948    1      CALL XBI$PRINT (based_ptr (1) -> based_char,
      695     3949    1                      ADDR(based_ptr (2)),
      696     3950    1                      B$DESC_LIST.NUMBER_OF_ARGS - 2,
      697     3951    1                      based_ptr (0) -> based_char, /* no string */, result);
      698     3952    1      CALL XB_RETURN_ORDINAL_RESULT (result);
      699     3953    1   END fprintf;
      700     3954        %EOD;

PL6.E3A0      #007=FPRINTF File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:31 Page:53   
--  Include file information  --

   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   B$OBJECT_C.:LIB_E04  is referenced.
      No diagnostics issued in procedure FPRINTF.

   Procedure FPRINTF requires 34 words for executable code.
   Procedure FPRINTF requires 14 words of local(AUTO) storage.

PL6.E3A0      #007=FPRINTF File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:31 Page:54   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=FPRINTF File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:31 Page:55   
          MINI XREF LISTING

ARGUMENT_BLOCK$
      3688**DCL         7--MATRLIZ  3693--IMP-PTR  3948>>CALL     3948>>CALL     3948>>CALL
B$DESC_EXT.LARGE_SIZE
      3819**DCL      3823--REDEF    3828--REDEF
B$DESC_LIST.DESC_WORDS.ARG_SIZE
      3767**DCL      3773--REDEF    3781--REDEF
B$DESC_LIST.NUMBER_OF_ARGS
      3700**DCL      3948>>CALL
BASED_CHAR
      3692**DCL      3948<>CALL     3948<>CALL
BASED_PTR
      3693**DCL      3948>>CALL     3948--CALL     3948>>CALL
DESCRIPTOR_BLOCK$
      3689**DCL         7--MATRLIZ  3699--IMP-PTR  3948>>CALL
F.FPT_READ.V.DVBYTE.REREAD#
      3898**DCL      3899--REDEF
F.FPT_READ.V.INDX#
      3891**DCL      3892--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
      3936**DCL      3937--REDEF
RESULT
      3691**DCL      3948<>CALL     3952<>CALL
XBI$PRINT
      3695**DCL-ENT  3948--CALL
XB_RETURN_ORDINAL_RESULT
      3696**DCL-ENT  3952--CALL

PL6.E3A0      #008=PRINTF File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:31 Page:56   
      701        1        /*T***********************************************************/
      702        2        /*T*                                                         */
      703        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      704        4        /*T*                                                         */
      705        5        /*T***********************************************************/
      706        6
      707        7        printf: PROC MATERIALIZE ($PR0 IN argument_block$,
      708        8                                   $PR1 IN descriptor_block$);
      709        9           /*D*  NAME: printf
      710       10                 PROTOTYPE: int printf (const char *format, ... );
      711       11                 DESCRIPTION: Writes zero or more items to stdout under format control.
      712       12           */
      713       13
      714       14           %INCLUDE B$OBJECT_C;
      715     3444           %INCLUDE xb_stdio_i6;
      716     3687
      717     3688    1      DCL STDOUT_P                       PTR SYMREF;
      718     3689
      719     3690    1      DCL argument_block$           PTR;
      720     3691    1      DCL descriptor_block$         PTR;
      721     3692
      722     3693    1      DCL result                    SBIN;
      723     3694    1      DCL based_char                CHAR(1) BASED;
      724     3695    1      DCL based_ptr (0:1)           PTR BASED (argument_block$);
      725     3696    1      DCL F$                        PTR;
      726     3697
      727     3698    1      DCL XBI$PRINT                 ENTRY (6);
      728     3699    1      DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      729     3700
      730     3701           %B$DESC_LIST (STCLASS="BASED (descriptor_block$)");
      731     3838           %File_Header (Name=F, Stclass="BASED (F$)");
      732     3950
      733     3951    1      F$ = stdout_p;
      734     3952    1      CALL XBI$PRINT (based_ptr (0) -> based_char,
      735     3953    1                      ADDR(based_ptr (1)),
      736     3954    1                      B$DESC_LIST.NUMBER_OF_ARGS - 1,
      737     3955    1                      F, /* no string */, result);
PL6.E3A0      #008=PRINTF File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:31 Page:57   
      738     3956    1      CALL XB_RETURN_ORDINAL_RESULT (result);
      739     3957    1   END printf;
      740     3958        %EOD;

PL6.E3A0      #008=PRINTF File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:31 Page:58   
--  Include file information  --

   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   B$OBJECT_C.:LIB_E04  is referenced.
      No diagnostics issued in procedure PRINTF.

   Procedure PRINTF requires 36 words for executable code.
   Procedure PRINTF requires 16 words of local(AUTO) storage.

PL6.E3A0      #008=PRINTF File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:31 Page:59   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=PRINTF File=xb_io_output:6.:XBC3TSI                           FRI 01/06/95 11:31 Page:60   
          MINI XREF LISTING

ARGUMENT_BLOCK$
      3690**DCL         7--MATRLIZ  3695--IMP-PTR  3952>>CALL     3952>>CALL
B$DESC_EXT.LARGE_SIZE
      3822**DCL      3826--REDEF    3831--REDEF
B$DESC_LIST.DESC_WORDS.ARG_SIZE
      3770**DCL      3776--REDEF    3784--REDEF
B$DESC_LIST.NUMBER_OF_ARGS
      3703**DCL      3952>>CALL
BASED_CHAR
      3694**DCL      3952<>CALL
BASED_PTR
      3695**DCL      3952>>CALL     3952--CALL
DESCRIPTOR_BLOCK$
      3691**DCL         7--MATRLIZ  3702--IMP-PTR  3952>>CALL
F
      3839**DCL      3952<>CALL
F.FPT_READ.V.DVBYTE.REREAD#
      3901**DCL      3902--REDEF
F.FPT_READ.V.INDX#
      3894**DCL      3895--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
      3939**DCL      3940--REDEF
F$
      3696**DCL      3839--IMP-PTR  3951<<ASSIGN   3952>>CALL
RESULT
      3693**DCL      3952<>CALL     3956<>CALL
STDOUT_P
      3688**DCL      3951>>ASSIGN
XBI$PRINT
      3698**DCL-ENT  3952--CALL
XB_RETURN_ORDINAL_RESULT
      3699**DCL-ENT  3956--CALL

PL6.E3A0      #009=SPRINTF File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:31 Page:61   
      741        1        /*T***********************************************************/
      742        2        /*T*                                                         */
      743        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      744        4        /*T*                                                         */
      745        5        /*T***********************************************************/
      746        6
      747        7        sprintf: PROC MATERIALIZE ($PR0 IN argument_block$,
      748        8                                   $PR1 IN descriptor_block$);
      749        9           /*D*  NAME: sprintf
      750       10                 PROTOTYPE: int sprintf (char *s, const char *format, ... );
      751       11                 DESCRIPTION: Writes zero or more items to the string s under format
      752       12                    control.
      753       13           */
      754       14
      755       15           %INCLUDE B$OBJECT_C;
      756     3445           %INCLUDE xb_stdio_i6;
      757     3688
      758     3689    1      DCL argument_block$           PTR;
      759     3690    1      DCL descriptor_block$         PTR;
      760     3691
      761     3692    1      DCL result                    SBIN;
      762     3693    1      DCL based_char                CHAR(1) BASED;
      763     3694    1      DCL based_ptr (0:1)           PTR BASED (argument_block$);
      764     3695
      765     3696    1      DCL XBI$PRINT                 ENTRY (6);
      766     3697    1      DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      767     3698
      768     3699           %B$DESC_LIST (STCLASS="BASED (descriptor_block$)");
      769     3836           %File_Header (Name=F, Stclass=BASED);
      770     3948
      771     3949    1      CALL XBI$PRINT (based_ptr (1) -> based_char,
      772     3950    1                      ADDR(based_ptr (2)),
      773     3951    1                      B$DESC_LIST.NUMBER_OF_ARGS - 2,
      774     3952    1                      /* no file */, based_ptr (0) -> based_char, result);
      775     3953    1      CALL XB_RETURN_ORDINAL_RESULT (result);
      776     3954    1   END sprintf;
      777     3955        %EOD;
PL6.E3A0      #009=SPRINTF File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:31 Page:62   

PL6.E3A0      #009=SPRINTF File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:31 Page:63   
--  Include file information  --

   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   B$OBJECT_C.:LIB_E04  is referenced.
      No diagnostics issued in procedure SPRINTF.

   Procedure SPRINTF requires 34 words for executable code.
   Procedure SPRINTF requires 14 words of local(AUTO) storage.

PL6.E3A0      #009=SPRINTF File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:31 Page:64   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #009=SPRINTF File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:31 Page:65   
          MINI XREF LISTING

ARGUMENT_BLOCK$
      3689**DCL         7--MATRLIZ  3694--IMP-PTR  3949>>CALL     3949>>CALL     3949>>CALL
B$DESC_EXT.LARGE_SIZE
      3820**DCL      3824--REDEF    3829--REDEF
B$DESC_LIST.DESC_WORDS.ARG_SIZE
      3768**DCL      3774--REDEF    3782--REDEF
B$DESC_LIST.NUMBER_OF_ARGS
      3701**DCL      3949>>CALL
BASED_CHAR
      3693**DCL      3949<>CALL     3949<>CALL
BASED_PTR
      3694**DCL      3949>>CALL     3949--CALL     3949>>CALL
DESCRIPTOR_BLOCK$
      3690**DCL         7--MATRLIZ  3700--IMP-PTR  3949>>CALL
F.FPT_READ.V.DVBYTE.REREAD#
      3899**DCL      3900--REDEF
F.FPT_READ.V.INDX#
      3892**DCL      3893--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
      3937**DCL      3938--REDEF
RESULT
      3692**DCL      3949<>CALL     3953<>CALL
XBI$PRINT
      3696**DCL-ENT  3949--CALL
XB_RETURN_ORDINAL_RESULT
      3697**DCL-ENT  3953--CALL

PL6.E3A0      #010=VFPRINTF File=xb_io_output:6.:XBC3TSI                         FRI 01/06/95 11:31 Page:66   
      778        1        /*T***********************************************************/
      779        2        /*T*                                                         */
      780        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      781        4        /*T*                                                         */
      782        5        /*T***********************************************************/
      783        6
      784        7        vfprintf: PROC (F,
      785        8                        fmt,
      786        9                        args$);
      787       10           /*D*  NAME: vfprintf
      788       11                 PROTOTYPE: int vfprintf (FILE *stream, char *format, va_list arg);
      789       12                 DESCRIPTION: Writes arg (initialized by va_start) to a stream
      790       13                    under format control.
      791       14           */
      792       15
      793       16           %INCLUDE B$OBJECT_C;
      794     3446           %INCLUDE xb_stdio_i6;
      795     3689
      796     3690           %File_Header (Name=F, Stclass=" ");
      797     3802    1      DCL fmt                       CHAR(16384);
      798     3803    1      DCL args$(0:0)                PTR;
      799     3804
      800     3805    1      DCL result                    SBIN;
      801     3806
      802     3807    1      DCL XBI$PRINT                 ENTRY (6);
      803     3808    1      DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      804     3809
      805     3810    1      CALL XBI$PRINT (fmt,
      806     3811    1                      addr (args$),
      807     3812    1                      99999,
      808     3813    1                      F, /* no string */, result);
      809     3814    1      CALL XB_RETURN_ORDINAL_RESULT (result);
      810     3815    1   END vfprintf;
      811     3816        %EOD;

PL6.E3A0      #010=VFPRINTF File=xb_io_output:6.:XBC3TSI                         FRI 01/06/95 11:31 Page:67   
--  Include file information  --

   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   B$OBJECT_C.:LIB_E04  is referenced.
      No diagnostics issued in procedure VFPRINTF.

   Procedure VFPRINTF requires 26 words for executable code.
   Procedure VFPRINTF requires 16 words of local(AUTO) storage.

PL6.E3A0      #010=VFPRINTF File=xb_io_output:6.:XBC3TSI                         FRI 01/06/95 11:31 Page:68   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #010=VFPRINTF File=xb_io_output:6.:XBC3TSI                         FRI 01/06/95 11:31 Page:69   
          MINI XREF LISTING

ARGS$
      3803**DCL         7--PROC     3810--CALL
F
      3691**DCL         7--PROC     3810<>CALL
F.FPT_READ.V.DVBYTE.REREAD#
      3753**DCL      3754--REDEF
F.FPT_READ.V.INDX#
      3746**DCL      3747--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
      3791**DCL      3792--REDEF
FMT
      3802**DCL         7--PROC     3810<>CALL
RESULT
      3805**DCL      3810<>CALL     3814<>CALL
XBI$PRINT
      3807**DCL-ENT  3810--CALL
XB_RETURN_ORDINAL_RESULT
      3808**DCL-ENT  3814--CALL

PL6.E3A0      #011=VPRINTF File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:31 Page:70   
      812        1        /*T***********************************************************/
      813        2        /*T*                                                         */
      814        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      815        4        /*T*                                                         */
      816        5        /*T***********************************************************/
      817        6
      818        7        vprintf: PROC (fmt,
      819        8                        args$);
      820        9           /*D*  NAME: vprintf
      821       10                 PROTOTYPE: int vprintf (char *format, va_list arg);
      822       11                 DESCRIPTION: Writes arg (initialized by va_start) to stdout
      823       12                    under format control.
      824       13           */
      825       14
      826       15           %INCLUDE B$OBJECT_C;
      827     3445           %INCLUDE xb_stdio_i6;
      828     3688
      829     3689    1      DCL STDOUT_P                       PTR SYMREF;
      830     3690
      831     3691    1      DCL fmt                       CHAR(16384);
      832     3692    1      DCL args$(0:0)                PTR;
      833     3693
      834     3694    1      DCL result                    SBIN;
      835     3695
      836     3696    1      DCL XBI$PRINT                 ENTRY (6);
      837     3697    1      DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      838     3698
      839     3699           %File_Header (Name=F, Stclass="BASED (stdout_p)");
      840     3811    1      CALL XBI$PRINT (fmt,
      841     3812    1                      addr (args$),
      842     3813    1                      99999,
      843     3814    1                      F, /* no string */, result);
      844     3815    1      CALL XB_RETURN_ORDINAL_RESULT (result);
      845     3816    1   END vprintf;
      846     3817        %EOD;

PL6.E3A0      #011=VPRINTF File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:31 Page:71   
--  Include file information  --

   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   B$OBJECT_C.:LIB_E04  is referenced.
      No diagnostics issued in procedure VPRINTF.

   Procedure VPRINTF requires 26 words for executable code.
   Procedure VPRINTF requires 14 words of local(AUTO) storage.

PL6.E3A0      #011=VPRINTF File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:31 Page:72   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #011=VPRINTF File=xb_io_output:6.:XBC3TSI                          FRI 01/06/95 11:31 Page:73   
          MINI XREF LISTING

ARGS$
      3692**DCL         7--PROC     3811--CALL
F
      3700**DCL      3811<>CALL
F.FPT_READ.V.DVBYTE.REREAD#
      3762**DCL      3763--REDEF
F.FPT_READ.V.INDX#
      3755**DCL      3756--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
      3800**DCL      3801--REDEF
FMT
      3691**DCL         7--PROC     3811<>CALL
RESULT
      3694**DCL      3811<>CALL     3815<>CALL
STDOUT_P
      3689**DCL      3700--IMP-PTR  3811>>CALL
XBI$PRINT
      3696**DCL-ENT  3811--CALL
XB_RETURN_ORDINAL_RESULT
      3697**DCL-ENT  3815--CALL

PL6.E3A0      #012=VSPRINTF File=xb_io_output:6.:XBC3TSI                         FRI 01/06/95 11:31 Page:74   
      847        1        /*T***********************************************************/
      848        2        /*T*                                                         */
      849        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      850        4        /*T*                                                         */
      851        5        /*T***********************************************************/
      852        6
      853        7        vsprintf: PROC (buf,
      854        8                        fmt,
      855        9                        args$);
      856       10           /*D*  NAME: vsprintf
      857       11                 PROTOTYPE: int vsprintf (char *s, char *format, va_list arg);
      858       12                 DESCRIPTION: Writes arg (initialized by va_start) to the string
      859       13                    s under format control.
      860       14           */
      861       15
      862       16           %INCLUDE B$OBJECT_C;
      863     3446           %INCLUDE xb_stdio_i6;
      864     3689
      865     3690    1      DCL buf                       CHAR(16384);
      866     3691    1      DCL fmt                       CHAR(16384);
      867     3692    1      DCL args$(0:0)                PTR;
      868     3693
      869     3694    1      DCL result                    SBIN;
      870     3695
      871     3696    1      DCL XBI$PRINT                 ENTRY (6);
      872     3697    1      DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      873     3698
      874     3699
      875     3700    1      CALL XBI$PRINT (fmt,
      876     3701    1                      addr (args$),
      877     3702    1                      99999,
      878     3703    1                      /* no file */, buf, result);
      879     3704    1      CALL XB_RETURN_ORDINAL_RESULT (result);
      880     3705    1   END vsprintf;

PL6.E3A0      #012=VSPRINTF File=xb_io_output:6.:XBC3TSI                         FRI 01/06/95 11:31 Page:75   
--  Include file information  --

   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   B$OBJECT_C.:LIB_E04  is referenced.
      No diagnostics issued in procedure VSPRINTF.

   Procedure VSPRINTF requires 26 words for executable code.
   Procedure VSPRINTF requires 16 words of local(AUTO) storage.

    No errors detected in file xb_io_output:6.:XBC3TSI    .

PL6.E3A0      #012=VSPRINTF File=xb_io_output:6.:XBC3TSI                         FRI 01/06/95 11:31 Page:76   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #012=VSPRINTF File=xb_io_output:6.:XBC3TSI                         FRI 01/06/95 11:31 Page:77   
          MINI XREF LISTING

ARGS$
      3692**DCL         7--PROC     3700--CALL
BUF
      3690**DCL         7--PROC     3700<>CALL
FMT
      3691**DCL         7--PROC     3700<>CALL
RESULT
      3694**DCL      3700<>CALL     3704<>CALL
XBI$PRINT
      3696**DCL-ENT  3700--CALL
XB_RETURN_ORDINAL_RESULT
      3697**DCL-ENT  3704--CALL
