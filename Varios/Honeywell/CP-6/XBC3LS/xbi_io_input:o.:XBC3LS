
PL6.E3A0      #001=XBI$READ_NEXT_RECORD File=xbi_io_input:6.:XBC3TSI             FRI 01/06/95 11:24 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        XBI$READ_NEXT_RECORD: PROC (F) ALTRET;
        7        7           /*I*  NAME: XBI$READ_NEXT_RECORD
        8        8                 CALL: CALL XBI$READ_NEXT_RECORD (F) ALTRETURN (..);
        9        9                 INPUT: F file_header;
       10       10                 PURPOSE: Reads the next sequential record from the stream F.
       11       11           */
       12       12
       13       13           %INCLUDE CP_6;
       14     5573           %INCLUDE CP_6_SUBS;
       15     6113           %INCLUDE B_ERRORS_C;
       16     7239           %INCLUDE XS_MACRO_C;
       17     7283           %INCLUDE xb_stdio_i6;
       18     7526           %INCLUDE xb_errors_i6;
       19     7597
       20     7598           %File_Header (NAME=F, STCLASS=" ");
       21     7710           %Buffer;
       22     7713
       23     7714    1      DCL xsa$                         PTR;
       24     7715    1      DCL B$TCB$                       PTR SYMREF READONLY;
       25     7716
       26     7717           %B$TCB;
       27     7720           %B$ALT;
       28     7728           %F$DCB;
       29     7785           %XSA_PARAM (STCLASS="BASED (xsa$)");
       30     7815    1      DCL error_code                   UBIN;
       31     7816
       32     7817           %XSA_ENTRIES;
       33     7821    1      DCL XBI_SET_STREAM_ERRNO         ENTRY (2);
       34     7822    1      DCL XB_IO_ERROR                  ENTRY (0);
       35     7823    1      DCL XBI$WRITE_THIS_RECORD        ENTRY (1) ALTRET;
       36     7824    1      DCL XBI$RELEASE_XSA_BUFFERS      ENTRY (1);
       37     7825
PL6.E3A0      #001=XBI$READ_NEXT_RECORD File=xbi_io_input:6.:XBC3TSI             FRI 01/06/95 11:24 Page:2    
       38     7826        /*
       39     7827             If input is coming from the terminal, and "stdout" is going
       40     7828             to the terminal and there is stuff waiting to be displayed,
       41     7829             then we will use that "stuff" as a prompt.
       42     7830        */
       43     7831
       44     7832        %FPT_PROMPT(  FPTN        =  PROMPT_FPT_INIT,
       45     7833                      STCLASS     =  CONSTANT,
       46     7834                      VFC         =  YES);
       47     7862
       48     7863        %FPT_PROMPT(  FPTN        =  PROMPT_FPT,
       49     7864                      STCLASS     =  "");
       50     7892
       51     7893        %equ    pbuf_size   =  256;
       52     7894
       53     7895    1   dcl  1  PBUF              aligned,
       54     7896    1           2  vfc            char(1)  /* init('@') */,
       55     7897    1           2  text           char(%pbuf_size);
       56     7898
       57     7899        %file_Header( Name=PF, stclass="based(PF$)");
       58     8011    1   dcl     PF$               ptr;
       59     8012    1   dcl     DCB$              ptr;
       60     8013    1   dcl     Position_Flag     bit(1) aligned;
       61     8014    1   dcl     STDOUT_P          ptr symref;
       62     8015
       63     8016    1   dcl  PFBUF char(1024) based;
       64     8017
       65     8018
       66     8019    1      successful_read: PROC;
       67     8020    3         IF F.fpt_read.v.dvbyte.cont# THEN DO;
       68     8021    3            F.fpt_read.v.dvbyte.cont# = '0'B;
       69     8022    3            F.continued_ios = F.continued_ios + 1;
       70     8023    3         END; ELSE DO;
       71     8024    3            F.record_position = F.record_position + 1;
       72     8025    3            F.continued_ios = 0;
       73     8026    3         END;
       74     8027    2         F.character_position = 0;
PL6.E3A0      #001=XBI$READ_NEXT_RECORD File=xbi_io_input:6.:XBC3TSI             FRI 01/06/95 11:24 Page:3    
       75     8028
       76     8029    3         IF F.is_text THEN DO;
       77     8030    3            SUBSTR (buffer, F.ars, 1) = binasc(%newline);
       78     8031    3            F.ars = F.ars + 1;
       79     8032    3         END;
       80     8033    2      END successful_read;
       81     8034
       82     8035    2      IF F.is_partly_open THEN DO;
       83     8036    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$ASSERTION_FAILURE);
       84     8037    2         CALL XB_IO_ERROR;
       85     8038    2      END;
       86     8039
       87     8040           /* check for binary file EOF */
       88     8041
       89     8042    1      IF NOT F.is_text AND F.record_position ~= 0 AND F.ars < F.buffer_size AND
       90     8043    1            DCBADDR(F.fpt_read.v.dcb#) -> F$DCB.ASN# = %FILE#
       91     8044    2      THEN DO;
       92     8045    2         F.is_eof = '1'B;
       93     8046    2         RETURN;
       94     8047    2      END;
       95     8048
       96     8049    1      IF F.is_buffer_modified and dcbaddr(F.fpt_read.v.dcb#)->F$DCB.DDEV.IC# = '0'b
       97     8050    2      THEN DO;
       98     8051    2         CALL XBI$WRITE_THIS_RECORD (F) ALTRET (error_occured);
       99     8052    2         F.record_position = F.record_position - 1;
      100     8053    2      END;
      101     8054
      102     8055    2      IF F.is_eof OR F.is_saved_char THEN DO;
      103     8056    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$ASSERTION_FAILURE);
      104     8057    2         CALL XB_IO_ERROR;
      105     8058    2      END;
      106     8059
      107     8060    1      Position_Flag = '0'b;
      108     8061    1      goto main_body;
      109     8062
      110     8063    1   XBI$READ_AFTER_POSITIONING: ENTRY (F);
      111     8064           /*I*  NAME: XBI$READ_AFTER_POSITIONING
PL6.E3A0      #001=XBI$READ_NEXT_RECORD File=xbi_io_input:6.:XBC3TSI             FRI 01/06/95 11:24 Page:4    
      112     8065                 CALL: CALL XBI$READ_AFTER_POSITIONING (F) ALTRETURN (..);
      113     8066                 INPUT: F file_header;
      114     8067                 PURPOSE: Reads the next sequential record from the stream F.
      115     8068                    Called after a stream has been repositioned.
      116     8069           */
      117     8070
      118     8071    1      F.continued_ios = 0;
      119     8072    1      Position_Flag   = '1'b;
      120     8073
      121     8074    1   main_body:
      122     8075    1      dcb$ = dcbaddr(F.fpt_read.v.dcb#);
      123     8076    2      IF dcb$->F$DCB.DDEV.IC# = '1'b  THEN DO;
      124     8077    2         PF$ = addr(F);
      125     8078    2         IF F.is_buffer_modified = '0'b THEN
      126     8079    2            IF dcbaddr(STDOUT_P->PF.fpt_write.v.dcb#)->F$DCB.DDEV.IC#='1'B
      127     8080    2              THEN PF$ = STDOUT_P;
      128     8081
      129     8082    3         IF PF.is_buffer_modified = '1'b THEN DO;
      130     8083    3           PF.ars = MINIMUM(PF.ars, %PBUF_SIZE);
      131     8084    3           substr(PBUF.text,,PF.ars)  = substr(PF.BUFFER$->PFBUF,,PF.ars);
      132     8085    3           PBUF.vfc              = '@';
      133     8086    3           PROMPT_FPT            = PROMPT_FPT_INIT;
      134     8087    3           PROMPT_FPT.V_         = vector(PROMPT_FPT.V);
      135     8088    3           PROMPT_FPT.V.DCB#     = F.fpt_read.v.dcb#;
      136     8089    3           PROMPT_FPT.PROMPT_    = vector( substr(pbuf.vfc,,PF.ars+1) );
      137     8090
      138     8091    4           call M$PROMPT( PROMPT_FPT ) whenaltreturn do; ; end;
      139     8092
      140     8093    3           PF.ars                = 0;
      141     8094    3           PF.character_position = 0;
      142     8095    3           PF.is_buffer_modified = '0'b;
      143     8096    3        end;  /*  Of if PF.is_buffer_modified  */
      144     8097    2      END;    /* of if inputing from IC#       */
      145     8098    1      F.is_buffer_modified = '0'B;
      146     8099
      147     8100    1      xsa$ = F.xsa$;
      148     8101    2      IF xsa$ ~= ADDR(NIL) THEN DO;
PL6.E3A0      #001=XBI$READ_NEXT_RECORD File=xbi_io_input:6.:XBC3TSI             FRI 01/06/95 11:24 Page:5    
      149     8102    2         CALL XSA$READ (F.fpt_read, XSA_PARAM)
      150     8103    3            WHENRETURN DO;
      151     8104    3               F.ars = XSA_PARAM.ARS#;
      152     8105    3               CALL successful_read;
      153     8106    3            END;
      154     8107    3            WHENALTRETURN DO;
      155     8108    3               error_code = XSA_PARAM.ERR.CODE;
      156     8109    4               IF error_code = %E$EOF THEN DO;
      157     8110    4                  F.is_eof = '1'B;
      158     8111    4                  F.ars = 0;
      159     8112    4                  F.record_position = F.record_position + 1;
      160     8113    4                  F.character_position = 0;
      161     8114    4                  RETURN;
      162     8115    4               END;
      163     8116    3               IF error_code = %E$LD AND
      164     8117    3                  DCBADDR(F.fpt_read.v.dcb#)->F$DCB.ASN# = %FILE#
      165     8118    4               THEN DO;
      166     8119                       /* If we have slipped out of fast mode, the contents of the
      167     8120                          ARS# field cannot be trusted.
      168     8121                       */
      169     8122    4                  IF XSA_PARAM.ORG ~= 0 THEN
      170     8123    4                     F.ars = XSA_PARAM.ARS#;
      171     8124    4                  ELSE
      172     8125    4                     F.ars = DCBADDR (F.fpt_read.v.dcb#) -> F$DCB.ARS#;
      173     8126    5                  IF NOT F.fpt_read.v.dvbyte.cont# THEN DO;
      174     8127    5                     F.fpt_read.v.dvbyte.cont# = '1'B;
      175     8128    5                     F.record_position = F.record_position + 1;
      176     8129    5                     F.continued_ios = 0;
      177     8130    4                  END; ELSE
      178     8131    4                     F.continued_ios = F.continued_ios + 1;
      179     8132    4                  F.character_position = 0;
      180     8133    4                  RETURN;
      181     8134    4               END;
      182     8135    3               F.is_error = '1'B;
      183     8136    3               CALL XBI_SET_STREAM_ERRNO (F, XSA_PARAM.ERR);
      184     8137    3               GOTO error_occured;
      185     8138    3            END;
PL6.E3A0      #001=XBI$READ_NEXT_RECORD File=xbi_io_input:6.:XBC3TSI             FRI 01/06/95 11:24 Page:6    
      186     8139    2         IF XSA_PARAM.ORG = 0 THEN CALL XBI$RELEASE_XSA_BUFFERS (F);
      187     8140    2      END; ELSE DO;
      188     8141    2         F.key.record = F.record_position + 1;
      189     8142    2         CALL M$READ (F.fpt_read)
      190     8143    3            WHENRETURN DO;
      191     8144    3               F.ars = DCBADDR (F.fpt_read.v.dcb#) -> F$DCB.ARS#;
      192     8145    3               CALL successful_read;
      193     8146    3            END;
      194     8147    3            WHENALTRETURN DO;
      195     8148    3               error_code = B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR#;
      196     8149    3               IF (F.is_text AND error_code = %E$EOF) OR
      197     8150    3                  (~F.is_text AND error_code = %E$NOKEY)
      198     8151    4               THEN DO;
      199     8152    5                  IF ~F.is_text AND F.ars < F.buffer_size THEN DO;
      200     8153    5                     F.is_eof = '1'B;
      201     8154    5                     IF (F.record_position > F.last_record) THEN
      202     8155    5                        F.last_record = F.record_position;
      203     8156    5                     F.record_position = F.last_record;
      204     8157    5                     F.character_position = F.ars;
      205     8158    5                     RETURN;
      206     8159    5                  END;
      207     8160    4                  F.is_eof = '1'B;
      208     8161    4                  F.ars = 0;
      209     8162    4                  IF (F.record_position > F.last_record) THEN
      210     8163    4                     F.last_record = F.record_position;
      211     8164    4                  F.record_position = F.last_record + 1;
      212     8165    4                  F.character_position = 0;
      213     8166    4                  RETURN;
      214     8167    4               END;
      215     8168    3               IF error_code = %E$LD AND
      216     8169    3                  DCBADDR(F.fpt_read.v.dcb#)->F$DCB.ASN# = %FILE#
      217     8170    4               THEN DO;
      218     8171    4                  F.ars = DCBADDR (F.fpt_read.v.dcb#) -> F$DCB.ARS#;
      219     8172    5                  IF NOT F.fpt_read.v.dvbyte.cont# THEN DO;
      220     8173    5                     F.fpt_read.v.dvbyte.cont# = '1'B;
      221     8174    5                     F.record_position = F.record_position + 1;
      222     8175    5                     F.continued_ios = 0;
PL6.E3A0      #001=XBI$READ_NEXT_RECORD File=xbi_io_input:6.:XBC3TSI             FRI 01/06/95 11:24 Page:7    
      223     8176    4                  END; ELSE
      224     8177    4                     F.continued_ios = F.continued_ios + 1;
      225     8178    4                  F.character_position = 0;
      226     8179    4                  RETURN;
      227     8180    4               END;
      228     8181    3               F.is_error = '1'B;
      229     8182    3               CALL XBI_SET_STREAM_ERRNO (F);
      230     8183    3               GOTO error_occured;
      231     8184    3            END;
      232     8185    2      END;
      233     8186    1      RETURN;
      234     8187
      235     8188    1   error_occured:
      236     8189    1      ALTRETURN;
      237     8190    1   END XBI$READ_NEXT_RECORD;

PL6.E3A0      #001=XBI$READ_NEXT_RECORD File=xbi_io_input:6.:XBC3TSI             FRI 01/06/95 11:24 Page:8    
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   XS_MACRO_C.:LIB_E04  is referenced.
   B_ERRORS_C.:LIB_E04  is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI$READ_NEXT_RECORD.

   Procedure XBI$READ_NEXT_RECORD requires 359 words for executable code.
   Procedure XBI$READ_NEXT_RECORD requires 88 words of local(AUTO) storage.

    No errors detected in file xbi_io_input:6.:XBC3TSI    .

PL6.E3A0      #001=XBI$READ_NEXT_RECORD File=xbi_io_input:6.:XBC3TSI             FRI 01/06/95 11:24 Page:9    
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=XBI$READ_NEXT_RECORD File=xbi_io_input:6.:XBC3TSI             FRI 01/06/95 11:24 Page:10   
          MINI XREF LISTING

B$ALT.CODE
      7722**DCL      7722--REDEF    7723--REDEF    7723--REDEF
B$ALT.ERR.ERR#
      7724**DCL      7724--REDEF    8148>>ASSIGN
B$ALT.EVID
      7723**DCL      7723--REDEF    7723--REDEF
B$TCB.ALT$
      7718**DCL      8148>>ASSIGN
B$TCB$
      7715**DCL      8148>>ASSIGN
BUFFER
      7711**DCL      8030<<ASSIGN
DCB$
      8012**DCL      8075<<ASSIGN   8076>>IF
ERROR_CODE
      7815**DCL      8108<<ASSIGN   8109>>IF       8116>>IF       8148<<ASSIGN   8149>>IF       8149>>IF
      8168>>IF
ERROR_OCCURED
      8189**LABEL    8051--CALLALT  8137--GOTO     8183--GOTO
F
      7599**DCL         6--PROC     8036<>CALL     8051<>CALL     8056<>CALL     8063--ENTRY    8077--ASSIGN
      8136<>CALL     8139<>CALL     8182<>CALL
F.ARS
      7621**DCL      8030>>ASSIGN   8031<<ASSIGN   8031>>ASSIGN   8042>>IF       8104<<ASSIGN   8111<<ASSIGN
      8123<<ASSIGN   8125<<ASSIGN   8144<<ASSIGN   8152>>IF       8157>>ASSIGN   8161<<ASSIGN   8171<<ASSIGN
F.BUFFER$
      7623**DCL      7711--IMP-PTR  8030>>ASSIGN
F.BUFFER_SIZE
      7624**DCL      7711--IMP-SIZ  8030>>ASSIGN   8042>>IF       8152>>IF
F.CHARACTER_POSITION
      7619**DCL      8027<<ASSIGN   8113<<ASSIGN   8132<<ASSIGN   8157<<ASSIGN   8165<<ASSIGN   8178<<ASSIGN
F.CONTINUED_IOS
PL6.E3A0      #001=XBI$READ_NEXT_RECORD File=xbi_io_input:6.:XBC3TSI             FRI 01/06/95 11:24 Page:11   
      7620**DCL      8022<<ASSIGN   8022>>ASSIGN   8025<<ASSIGN   8071<<ASSIGN   8129<<ASSIGN   8131<<ASSIGN
      8131>>ASSIGN   8175<<ASSIGN   8177<<ASSIGN   8177>>ASSIGN
F.FPT_READ
      7638**DCL      8102<>CALL     8142<>CALL
F.FPT_READ.V.DCB#
      7644**DCL      8042--IF       8049--IF       8075--ASSIGN   8088>>ASSIGN   8116--IF       8125--ASSIGN
      8144--ASSIGN   8168--IF       8171--ASSIGN
F.FPT_READ.V.DVBYTE.CONT#
      7668**DCL      8020>>IF       8021<<ASSIGN   8126>>IF       8127<<ASSIGN   8172>>IF       8173<<ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
      7661**DCL      7662--REDEF
F.FPT_READ.V.INDX#
      7654**DCL      7655--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
      7699**DCL      7700--REDEF
F.IS_BUFFER_MODIFIED
      7603**DCL      8049>>IF       8078>>IF       8098<<ASSIGN
F.IS_EOF
      7601**DCL      8045<<ASSIGN   8055>>IF       8110<<ASSIGN   8153<<ASSIGN   8160<<ASSIGN
F.IS_ERROR
      7606**DCL      8135<<ASSIGN   8181<<ASSIGN
F.IS_PARTLY_OPEN
      7611**DCL      8035>>IF
F.IS_SAVED_CHAR
      7602**DCL      8055>>IF
F.IS_TEXT
      7600**DCL      8029>>IF       8042>>IF       8149>>IF       8149>>IF       8152>>IF
F.KEY.RECORD
      7630**DCL      8141<<ASSIGN
F.LAST_RECORD
      7622**DCL      8154>>IF       8155<<ASSIGN   8156>>ASSIGN   8162>>IF       8163<<ASSIGN   8164>>ASSIGN
F.RECORD_POSITION
      7618**DCL      8024<<ASSIGN   8024>>ASSIGN   8042>>IF       8052<<ASSIGN   8052>>ASSIGN   8112<<ASSIGN
      8112>>ASSIGN   8128<<ASSIGN   8128>>ASSIGN   8141>>ASSIGN   8154>>IF       8155>>ASSIGN   8156<<ASSIGN
      8162>>IF       8163>>ASSIGN   8164<<ASSIGN   8174<<ASSIGN   8174>>ASSIGN
F.XSA$
PL6.E3A0      #001=XBI$READ_NEXT_RECORD File=xbi_io_input:6.:XBC3TSI             FRI 01/06/95 11:24 Page:12   
      7625**DCL      8100>>ASSIGN
F$DCB.ACTPOS
      7761**DCL      7761--REDEF
F$DCB.ARS#
      7735**DCL      7735--REDEF    8125>>ASSIGN   8144>>ASSIGN   8171>>ASSIGN
F$DCB.ASN#
      7750**DCL      8042>>IF       8116>>IF       8168>>IF
F$DCB.ATTR
      7754**DCL      7755--REDEF
F$DCB.BORROW
      7769**DCL      7769--REDEF    7769--REDEF    7769--REDEF
F$DCB.DCBNAME.L
      7783**DCL      7783--IMP-SIZ
F$DCB.DDEV.IC#
      7741**DCL      8049>>IF       8076>>IF       8079>>IF
F$DCB.EOMCHAR#
      7739**DCL      7739--REDEF
F$DCB.FLDID
      7764**DCL      7764--REDEF
F$DCB.FORM$
      7758**DCL      7758--REDEF
F$DCB.FSECT
      7774**DCL      7774--REDEF
F$DCB.FSN#
      7751**DCL      7751--REDEF    7751--REDEF    7752--REDEF
F$DCB.HEADER$
      7757**DCL      7757--REDEF
F$DCB.IXTNSIZE#
      7755**DCL      7755--REDEF
F$DCB.LASTSTA$
      7744**DCL      7744--REDEF
F$DCB.LVL
      7770**DCL      7770--REDEF
F$DCB.NAME#.C
      7745**DCL      7745--REDEF
F$DCB.NOEOF
PL6.E3A0      #001=XBI$READ_NEXT_RECORD File=xbi_io_input:6.:XBC3TSI             FRI 01/06/95 11:24 Page:13   
      7767**DCL      7767--REDEF
F$DCB.NRECS#
      7756**DCL      7756--REDEF
F$DCB.NRECX
      7775**DCL      7775--REDEF
F$DCB.OHDR
      7767**DCL      7767--REDEF
F$DCB.ORG#
      7750**DCL      7750--REDEF
F$DCB.PRECNO
      7773**DCL      7773--REDEF
F$DCB.RCSZ
      7779**DCL      7779--REDEF
F$DCB.RES#
      7746**DCL      7746--REDEF
F$DCB.SETX
      7758**DCL      7758--REDEF
F$DCB.TAB$
      7758**DCL      7758--REDEF
F$DCB.TDA
      7772**DCL      7773--REDEF
F$DCB.WSN#
      7746**DCL      7746--REDEF
M$PROMPT
      5525**DCL-ENT  8091--CALL
M$READ
      5502**DCL-ENT  8142--CALL
MAIN_BODY
      8075**LABEL    8061--GOTO
PBUF.TEXT
      7897**DCL      8084<<ASSIGN
PBUF.VFC
      7896**DCL      8085<<ASSIGN   8089--ASSIGN
PF.ARS
      7922**DCL      8083<<ASSIGN   8083>>ASSIGN   8084>>ASSIGN   8084>>ASSIGN   8089>>ASSIGN   8093<<ASSIGN
PF.BUFFER$
PL6.E3A0      #001=XBI$READ_NEXT_RECORD File=xbi_io_input:6.:XBC3TSI             FRI 01/06/95 11:24 Page:14   
      7924**DCL      8084>>ASSIGN
PF.CHARACTER_POSITION
      7920**DCL      8094<<ASSIGN
PF.FPT_READ.V.DVBYTE.REREAD#
      7962**DCL      7963--REDEF
PF.FPT_READ.V.INDX#
      7955**DCL      7956--REDEF
PF.FPT_WRITE.V.DCB#
      7982**DCL      8079--IF
PF.FPT_WRITE.V.DVBYTE.VFC#
      8000**DCL      8001--REDEF
PF.IS_BUFFER_MODIFIED
      7904**DCL      8082>>IF       8095<<ASSIGN
PF$
      8011**DCL      7900--IMP-PTR  8077<<ASSIGN   8080<<ASSIGN   8082>>IF       8083>>ASSIGN   8083>>ASSIGN
      8084>>ASSIGN   8084>>ASSIGN   8084>>ASSIGN   8089>>ASSIGN   8093>>ASSIGN   8094>>ASSIGN   8095>>ASSIGN
PFBUF
      8016**DCL      8084>>ASSIGN
POSITION_FLAG
      8013**DCL      8060<<ASSIGN   8072<<ASSIGN
PROMPT_FPT
      7880**DCL      8086<<ASSIGN   8091<>CALL
PROMPT_FPT.PROMPT_
      7886**DCL      8089<<ASSIGN
PROMPT_FPT.V
      7888**DCL      8087--ASSIGN
PROMPT_FPT.V.DCB#
      7888**DCL      8088<<ASSIGN
PROMPT_FPT.V_
      7882**DCL      8087<<ASSIGN
PROMPT_FPT_INIT
      7850**DCL      8086>>ASSIGN
PROMPT_FPT_INIT.V
      7858**DCL      7852--DCLINIT
STDOUT_P
      8014**DCL      8079>>IF       8080>>ASSIGN
PL6.E3A0      #001=XBI$READ_NEXT_RECORD File=xbi_io_input:6.:XBC3TSI             FRI 01/06/95 11:24 Page:15   
SUCCESSFUL_READ
      8019**PROC     8105--CALL     8145--CALL
XB$ERR$ASSERTION_FAILURE
      7571**DCL      8036<>CALL     8056<>CALL
XBI$RELEASE_XSA_BUFFERS
      7824**DCL-ENT  8139--CALL
XBI$WRITE_THIS_RECORD
      7823**DCL-ENT  8051--CALL
XBI_SET_STREAM_ERRNO
      7821**DCL-ENT  8036--CALL     8056--CALL     8136--CALL     8182--CALL
XB_IO_ERROR
      7822**DCL-ENT  8037--CALL     8057--CALL
XSA$
      7714**DCL      7793--IMP-PTR  8100<<ASSIGN   8101>>IF       8102>>CALL     8104>>ASSIGN   8108>>ASSIGN
      8122>>IF       8123>>ASSIGN   8136>>CALL     8139>>IF
XSA$READ
      7818**DCL-ENT  8102--CALL
XSA_PARAM
      7793**DCL      8102<>CALL
XSA_PARAM.ARS#
      7797**DCL      8104>>ASSIGN   8123>>ASSIGN
XSA_PARAM.EOMCHAR#
      7809**DCL      7810--REDEF
XSA_PARAM.ERR
      7797**DCL      8136<>CALL
XSA_PARAM.ERR.CODE
      7798**DCL      8108>>ASSIGN
XSA_PARAM.ORG
      7808**DCL      8122>>IF       8139>>IF
XSA_PARAM.SIG1
      7803**DCL      7803--REDEF
XSA_PARAM.SIG2
      7803**DCL      7804--REDEF
