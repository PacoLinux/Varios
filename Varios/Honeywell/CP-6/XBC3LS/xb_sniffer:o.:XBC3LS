

CC.C02    File=xb_sniffer:c.:XBC3TSI                                                Fri Jan  6 1995  Page=1  
        1         1
        2         2             #include   <stdio.h>
        3         3             #include   <signal.h>
        4         4
        5         5             struct  _head {
        6         6    1          struct   _head *left;
        7         7    1          struct   _head *right;
        8         8    1          int             size;
        9         9    1          unsigned        tag       :  1;
       10        10    1          unsigned        protected :  1;
       11        11    1          unsigned        mark      :  1;
       12        12    1          unsigned        RFU0      :  1;
       13        13    1          unsigned        RFU1      :  1;
       14        14    1          unsigned        RFU3      : 13;
       15        15    1          unsigned        stamp     : 18;
       16        16    1          };
       17        17
       18        18             union   _ptr_int {
       19        19    1          struct {
       20        20    2             unsigned base  : 20;
       21        21    2             unsigned segid : 16;
       22        22    2                }         ival;
       23        23    1          struct   _head *p;
       24        24    1          };
       25        25
       26        26
       27        27             union _ptr_int   stack;
       28        28
       29        29             int    XBI_SNIFFER_ALLOC   =   0;
       30        30             int    XBI_SNIFFER_UNALLOC =   0;
       31        31
       32        32             int sniffer(int *p)
       33        33             {
       34        34    1          struct   _head    *ph;
       35        35    1          int                segsize = (XBI$SEGSIZE(p) >> 2) - 8;
       36        36    1          int               *segpos  = 0;
       37        37    1          int               *segstart = 0;
CC.C02    File=xb_sniffer:c.:XBC3TSI                                                Fri Jan  6 1995  Page=2  
       38        38    1          int               *segend  = 0;
       39        39    1          int                blknum = 0;
       40        40    1
       41        41    1          stack.p = (struct _head*) p;
       42        42    1          stack.ival.base = 0;
       43        43    1          segstart         = (int *) stack.p;
       44        44    1          segend           = segstart + segsize;
       45        45    1
       46        46    1          segpos           = segstart;
       47        47    1          while (segpos < segend) {
       48        48    2             blknum++;
       49        49    2             ph = (struct _head *)segpos;
       50        50    2             if (ph != (struct _head*) *(int **)(segpos + ph->size - 1)) {
       51        51    3                fail("Tail doesn't point to head",blknum, segpos);
       52        52    3                }
       53        53    2             if (!ph->tag)   {  /*  A free block.... */
       54        54    3                struct   _head *phn = ph->left;
       55        55    3
       56        56    3                if (XBI_SNIFFER_UNALLOC != 0)
       57        57    3                  {
       58        58    4                   stack.p = (struct _head *)segpos;
       59        59    4                   fprintf(stderr,"SNIFFER: free  @ .%6o  size=.%6o  stamp .%6o\n",
       60        60    4                           stack.ival.base>>2,
       61        61    4                           ph->size,
       62        62    4                           ph->stamp);
       63        63    4                   }
       64        64    3
       65        65    3                while (phn != ph) {
       66        66    4                   if (phn->mark)
       67        67    4                      fail("Block not in left free list", blknum, segpos);
       68        68    4                   phn->mark = 1;
       69        69    4                   phn = phn->left;
       70        70    4                   }
       71        71    3                phn = ph->left;
       72        72    3                while (phn != ph) phn->mark = 0, phn = phn->left;
       73        73    3
       74        74    3                phn = ph->right;
CC.C02    File=xb_sniffer:c.:XBC3TSI                                                Fri Jan  6 1995  Page=3  
       75        75    3                while (phn != ph) {
       76        76    4                   if (phn->mark)
       77        77    4                      fail("Block not in right free list", blknum, segpos);
       78        78    4                   phn->mark = 1;
       79        79    4                   phn = phn->right;
       80        80    4                   }
       81        81    3                phn = ph->right;
       82        82    3                while (phn != ph) phn->mark = 0, phn = phn->right;
       83        83    3                }
       84        84    2
       85        85    2             else
       86        86    2                {  if (XBI_SNIFFER_ALLOC != 0)
       87        87    3                     {
       88        88    4                      stack.p = (struct _head *)segpos;
       89        89    4                      fprintf(stderr,"SNIFFER: alloc @ .%6o  size=.%6o  stamp .%6o\n",

       90        90    4                              stack.ival.base>>2,
       91        91    4                              ph->size,
       92        92    4                              ph->stamp);
       93        93    4                      }
       94        94    3                 }
       95        95    2             segpos = segpos + ph->size;
       96        96    2             }
       97        97    1
       98        98    1          return;
       99        99    1        }
      100       100
      101       101
      102       102
      103       103             fail(mes, blk, segpos)
      104       104               char     *mes;
      105       105               int       blk;
      106       106               int      *segpos;
      107       107             {
      108       108    1
      109       109    1
      110       110    1
CC.C02    File=xb_sniffer:c.:XBC3TSI                                                Fri Jan  6 1995  Page=4  
      111       111    1          stack.p = (struct _head *)segpos;
      112       112    1          fprintf(stderr,"SNIFFER: %s, BlockNum=%d, Loc=%o\n",mes,blk,stack.ival.base>
                               >2);
      113       113    1          abort();
      114       114    1        }
      115       115
      116       116
      117       117             /*D*    NAME:       mark_allocated_heap(p)
      118       118                     PURPOSE:    To mark every item on the heap that is currently
      119       119                                 allocated.
      120       120                     DESCRIPTION:
      121       121                        This function is intended to be used with the function
      122       122                        release_unmarked_heap() which will release every heap
      123       123                        block that is not marked as having been in use by
      124       124                        this function.
      125       125             */
      126       126
      127       127             mark_allocated_heap(p)
      128       128               char        *p;
      129       129             {
      130       130    1          struct   _head    *ph;
      131       131    1          int                segsize = (XBI$SEGSIZE(p) >> 2) - 8;
      132       132    1          int               *segpos  = 0;
      133       133    1          int               *segstart= 0;
      134       134    1          int               *segend  = 0;
      135       135    1
      136       136    1          stack.p  = (struct _head*)p;
      137       137    1          stack.ival.base = 0;
      138       138    1          segstart        = (int *) stack.p;
      139       139    1          segend          = segstart + segsize;
      140       140    1          segpos          = segstart;
      141       141    1
      142       142    1          while (segpos < segend) {
      143       143    2             ph = (struct _head *)segpos;
      144       144    2             if (ph->tag) ph->mark = 1;
      145       145    2             segpos = segpos + ph->size;
      146       146    2             }
CC.C02    File=xb_sniffer:c.:XBC3TSI                                                Fri Jan  6 1995  Page=5  
      147       147    1
      148       148    1          return;
      149       149    1        }
      150       150
      151       151
      152       152
      153       153
      154       154
      155       155             /*D*    NAME:             release_unmarked_heap()
      156       156                     PURPOSE:          To release memory allocated after a
      157       157                                       mark_allocated_heap() function call.
      158       158                     DESCRIPTION:
      159       159                        Every block of heap memory that is not marked is free'd.
      160       160             */
      161       161
      162       162             release_unmarked_heap(p)
      163       163               char        *p;
      164       164             {
      165       165    1          struct   _head    *ph;
      166       166    1          int                segsize = (XBI$SEGSIZE(p) >> 2) - 8;
      167       167    1          int               *segpos  = 0;
      168       168    1          int               *segstart= 0;
      169       169    1          int               *segend  = 0;
      170       170    1          int               *segs;
      171       171    1
      172       172    1          stack.p  = (struct _head*)p;
      173       173    1          stack.ival.base = 0;
      174       174    1          segstart        = (int *) stack.p;
      175       175    1          segend          = segstart + segsize;
      176       176    1          segpos = segs   = segstart;
      177       177    1
      178       178    1          while (segpos < segend) {
      179       179    2             ph = (struct _head *)segpos;
      180       180    2             if (ph->tag && !ph->mark && !ph->protected)  {
      181       181    3                free(ph+1);
      182       182    3                segpos = segs;
      183       183    3                ph = (struct _head *) segpos;
CC.C02    File=xb_sniffer:c.:XBC3TSI                                                Fri Jan  6 1995  Page=6  
      184       184    3                }
      185       185    2             else segs = segpos;
      186       186    2             segpos = segpos + ph->size;
      187       187    2             }
      188       188    1
      189       189    1          return;
      190       190    1        }
      191       191
      192       192             /* Mark a specific pointer */
      193       193
      194       194             mark_heap_pointer (p)
      195       195                struct   _head    *p;
      196       196             {
      197       197    1           struct   _head    *ph;
      198       198    1
      199       199    1           ph = p - 1;
      200       200    1           if (ph->tag) ph->mark = 1;
      201       201    1           return;
      202       202    1        }
---  Include file information  ---

   stdio:h.:XBC3TOU. is referenced
   signal:h.:XBC3TOU. is referenced

No diagnostics were issued in the file xb_sniffer:c.:XBC3TSI
