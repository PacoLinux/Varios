
PL6.E3A0      #001=SIGNAL File=xb_signal:6.:XBC3TSI                              FRI 01/06/95 11:41 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        signal: PROC (P_sig, P_handler);
        7        7           /*D*  NAME: signal
        8        8                 PROTOTYPE: void (*signal (int sig, void (*func)(int)))(int)
        9        9                 INPUT: P_sig   signal type
       10       10                        P_handler EPTR
       11       11                 PURPOSE: Tells the runtime library how the specified signal is to
       12       12                    be handled.
       13       13           */
       14       14
       15       15           %INCLUDE CP_6;
       16     5575           %INCLUDE xb_signal_i6;
       17     5637           %INCLUDE xb_errors_i6;
       18     5708
       19     5709    1      DCL P_sig                        UBIN;
       20     5710    1      DCL P_handler                    EPTR;
       21     5711
       22     5712    1      DCL sig_as_ptr                   PTR;
       23     5713    1      DCL sig REDEF sig_as_ptr         UBIN;
       24     5714    1      DCL handler_as_ptr               PTR;
       25     5715    1      DCL handler REDEF handler_as_ptr EPTR;
       26     5716
       27     5717    1      DCL result                       PTR;
       28     5718
       29     5719    1      DCL XBI_SET_ERRNO                ENTRY (1);
       30     5720    1      DCL XB_RETURN_ORDINAL_RESULT     ENTRY (1);
       31     5721    1      DCL XBI$DEFAULT_SIGNAL_HANDLER   ENTRY;
       32     5722    1      DCL XBI$ENABLE_XCON              ENTRY;
       33     5723    1      DCL XBI$ENABLE_INT               ENTRY;
       34     5724    1      DCL XBI$DISABLE_XCON             ENTRY;
       35     5725    1      DCL XBI$DISABLE_INT              ENTRY;
       36     5726
       37     5727           /* the usual kluge to get the arguments */
PL6.E3A0      #001=SIGNAL File=xb_signal:6.:XBC3TSI                              FRI 01/06/95 11:41 Page:2    
       38     5728
       39     5729    1      sig_as_ptr = ADDR(P_sig);
       40     5730    1      handler_as_ptr = ADDR(P_handler);
       41     5731
       42     5732           /* Did the user specify a valid signal type? */
       43     5733
       44     5734    2      IF SIG > %LAST_SIGNAL THEN DO;
       45     5735    2         CALL XBI_SET_ERRNO (ERR$BAD_CALL_TO_SIGNAL);
       46     5736    2         CALL XB_RETURN_ORDINAL_RESULT (SIG_ERR);
       47     5737    2      END;
       48     5738
       49     5739           /* Did the user specify SIG_ERR as handler?  This has no meaning. */
       50     5740
       51     5741    2      IF handler_as_ptr = SIG_ERR THEN DO;
       52     5742    2         CALL XBI_SET_ERRNO (ERR$BAD_CALL_TO_SIGNAL);
       53     5743    2         CALL XB_RETURN_ORDINAL_RESULT (SIG_ERR);
       54     5744    2      END;
       55     5745
       56     5746           /* It looks like we have a good handler.  First, save the old handler as
       57     5747              this value will be returned.
       58     5748           */
       59     5749
       60     5750    2   DO INHIBIT;
       61     5751    2      result = XB$ENV.SIGNAL_RETURN_RESULT (sig);
       62     5752    2      XB$ENV.SIGNAL_RETURN_RESULT (sig) = handler_as_ptr;
       63     5753
       64     5754    2      IF handler_as_ptr = SIG_DFL THEN
       65     5755    2         XB$ENV.SIGNAL_HANDLER (sig) = ENTADDR(XBI$DEFAULT_SIGNAL_HANDLER);
       66     5756    3      ELSE IF handler_as_ptr = SIG_IGN THEN DO;
       67     5757    3         XB$ENV.SIGNAL_HANDLER (sig) = ENTADDR(NIL);
       68     5758    4         DO CASE (sig);
       69     5759    4            CASE (%SIGINT);
       70     5760    4               CALL XBI$DISABLE_INT;
       71     5761    4            CASE (%SIGTERM);
       72     5762    4               IF (XB$ENV.SIGNAL_HANDLER(%SIGHUP) = ENTADDR(NIL)) THEN
       73     5763    4                  CALL XBI$DISABLE_XCON;
       74     5764    4            CASE (%SIGHUP);
PL6.E3A0      #001=SIGNAL File=xb_signal:6.:XBC3TSI                              FRI 01/06/95 11:41 Page:3    
       75     5765    4               IF (XB$ENV.SIGNAL_HANDLER(%SIGTERM) = ENTADDR(NIL)) THEN
       76     5766    4                  CALL XBI$DISABLE_XCON;
       77     5767    4         END;
       78     5768    3      end; ELSE DO;
       79     5769    3         XB$ENV.SIGNAL_HANDLER (sig) = handler;
       80     5770    4         DO CASE (sig);
       81     5771    4            CASE (%SIGINT);
       82     5772    4               CALL XBI$ENABLE_INT;
       83     5773    4            CASE (%SIGTERM, %SIGHUP);
       84     5774    4               CALL XBI$ENABLE_XCON;
       85     5775    4         END;
       86     5776    3      END;
       87     5777    2   END; /* end inhibit */
       88     5778
       89     5779    1      CALL XB_RETURN_ORDINAL_RESULT (result);
       90     5780    1   END signal;
       91     5781        %EOD;

PL6.E3A0      #001=SIGNAL File=xb_signal:6.:XBC3TSI                              FRI 01/06/95 11:41 Page:4    
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_signal_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure SIGNAL.

   Procedure SIGNAL requires 105 words for executable code.
   Procedure SIGNAL requires 10 words of local(AUTO) storage.

PL6.E3A0      #001=SIGNAL File=xb_signal:6.:XBC3TSI                              FRI 01/06/95 11:41 Page:5    
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=SIGNAL File=xb_signal:6.:XBC3TSI                              FRI 01/06/95 11:41 Page:6    
          MINI XREF LISTING

HANDLER
      5715**DCL      5769>>ASSIGN
HANDLER_AS_PTR
      5714**DCL      5715--REDEF    5730<<ASSIGN   5741>>IF       5752>>ASSIGN   5754>>IF       5756>>IF
P_HANDLER
      5710**DCL         6--PROC     5730--ASSIGN
P_SIG
      5709**DCL         6--PROC     5729--ASSIGN
RESULT
      5717**DCL      5751<<ASSIGN   5779<>CALL
SIG
      5713**DCL      5734>>IF       5751>>ASSIGN   5752>>ASSIGN   5755>>ASSIGN   5757>>ASSIGN   5758>>DOCASE
      5769>>ASSIGN   5770>>DOCASE
SIGVEC.SV_HANDLER
      5633**DCL      5634--REDEF
SIG_AS_PTR
      5712**DCL      5713--REDEF    5729<<ASSIGN
XB$ENV.SIGNAL_HANDLER
      5618**DCL      5755<<ASSIGN   5757<<ASSIGN   5762>>IF       5765>>IF       5769<<ASSIGN
XB$ENV.SIGNAL_RETURN_RESULT
      5619**DCL      5751>>ASSIGN   5752<<ASSIGN
XB$ERR$BAD_CALL_TO_SIGNAL
      5699**DCL      5735<>CALL     5742<>CALL
XBI$DEFAULT_SIGNAL_HANDLER
      5721**DCL-ENT  5755--ASSIGN
XBI$DISABLE_INT
      5725**DCL-ENT  5760--CALL
XBI$DISABLE_XCON
      5724**DCL-ENT  5763--CALL     5766--CALL
XBI$ENABLE_INT
      5723**DCL-ENT  5772--CALL
XBI$ENABLE_XCON
PL6.E3A0      #001=SIGNAL File=xb_signal:6.:XBC3TSI                              FRI 01/06/95 11:41 Page:7    
      5722**DCL-ENT  5774--CALL
XBI_SET_ERRNO
      5719**DCL-ENT  5735--CALL     5742--CALL
XB_RETURN_ORDINAL_RESULT
      5720**DCL-ENT  5736--CALL     5743--CALL     5779--CALL

PL6.E3A0      #002=RAISE File=xb_signal:6.:XBC3TSI                               FRI 01/06/95 11:41 Page:8    
       92        1        /*T***********************************************************/
       93        2        /*T*                                                         */
       94        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
       95        4        /*T*                                                         */
       96        5        /*T***********************************************************/
       97        6
       98        7        raise: PROC (P_sig);
       99        8           /*D*  NAME: raise
      100        9                 PROTOTYPE: int raise (int sig);
      101       10                 PURPOSE: Raises a signal.  The only signal we allow the user to
      102       11                    raise is SIGABRT as it doesn't make sense to let the user
      103       12                    raise the other signal types.
      104       13           */
      105       14
      106       15           %INCLUDE xb_signal_i6;
      107       77           %INCLUDE xb_errors_i6;
      108      148           %INCLUDE xb_string_support_i6;
      109      184
      110      185    1      DCL P_sig                     UBIN;
      111      186
      112      187    1      DCL sig_as_ptr                PTR;
      113      188    1      DCL sig REDEF sig_as_ptr      UBIN;
      114      189
      115      190           %STRING_CONSTANT (NAME=Abort_Signal, VALUE="'Abort signal'");
      116      195           %STRING_CONSTANT (NAME=Break_Key_Hit, VALUE="'Break Key Hit'");
      117      200           %STRING_CONSTANT (NAME=Exit_Control_Entered, VALUE="'Exit Control Entered'");
      118      205           %STRING_CONSTANT (NAME=Alarm_Has_Occured, VALUE="'Alarm Has Occured'");
      119      210           %STRING_CONSTANT (NAME=User_Signal1_Raised, VALUE="'User Signal1 Raised'");
      120      215           %STRING_CONSTANT (NAME=User_Signal2_Raised, VALUE="'User Signal2 Raised'");
      121      220
      122      221    1      DCL XBI$RAISE_SIGNAL          ENTRY;
      123      222    1      DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      124      223
      125      224    1      sig_as_ptr = ADDR (P_sig);
      126      225    2      DO CASE (sig);
      127      226    2         CASE(%SIGABRT);
      128      227    2            XB$ENV.CURRENT_SIGNAL = %SIGABRT;
PL6.E3A0      #002=RAISE File=xb_signal:6.:XBC3TSI                               FRI 01/06/95 11:41 Page:9    
      129      228    2            XB$ENV.EXCEPTION_NAME.SIZE = Abort_Signal.SIZE;
      130      229    2            XB$ENV.EXCEPTION_NAME.STRING = Abort_Signal.STRING;
      131      230    2            XB$ENV.ERROR_CODE = ERR$ABORT_SIGNAL;
      132      231    2            XB$ENV.DCB_NUMBER = 0;
      133      232    2            XB$ENV.EXCEPTION_LOCATION = 0;
      134      233    2            CALL XBI$RAISE_SIGNAL;
      135      234    2            CALL XB_RETURN_ORDINAL_RESULT (0);
      136      235    2         CASE(%SIGINT);
      137      236    2            XB$ENV.CURRENT_SIGNAL = %SIGINT;
      138      237    2            XB$ENV.EXCEPTION_NAME.SIZE = Break_Key_Hit.SIZE;
      139      238    2            XB$ENV.EXCEPTION_NAME.STRING = Break_Key_Hit.STRING;
      140      239    2            XB$ENV.ERROR_CODE = ERR$BREAK_KEY_HIT;
      141      240    2            XB$ENV.DCB_NUMBER = 0;
      142      241    2            XB$ENV.EXCEPTION_LOCATION = 0;
      143      242    2            CALL XBI$RAISE_SIGNAL;
      144      243    2            CALL XB_RETURN_ORDINAL_RESULT (0);
      145      244    2         CASE(%SIGTERM);
      146      245    2            XB$ENV.CURRENT_SIGNAL = %SIGTERM;
      147      246    2            XB$ENV.EXCEPTION_NAME.SIZE = Exit_Control_Entered.SIZE;
      148      247    2            XB$ENV.EXCEPTION_NAME.STRING = Exit_Control_Entered.STRING;
      149      248    2            XB$ENV.ERROR_CODE = ERR$EXIT_CONTROL;
      150      249    2            XB$ENV.DCB_NUMBER = 0;
      151      250    2            XB$ENV.EXCEPTION_LOCATION = 0;
      152      251    2            CALL XBI$RAISE_SIGNAL;
      153      252    2            CALL XB_RETURN_ORDINAL_RESULT (0);
      154      253    2         CASE(%SIGALRM);
      155      254    2            XB$ENV.CURRENT_SIGNAL = %SIGALRM;
      156      255    2            XB$ENV.EXCEPTION_NAME.SIZE = Alarm_Has_Occured.SIZE;
      157      256    2            XB$ENV.EXCEPTION_NAME.STRING = Alarm_Has_Occured.STRING;
      158      257    2            XB$ENV.ERROR_CODE = ERR$SIGALRM_SIGNAL;
      159      258    2            XB$ENV.DCB_NUMBER = 0;
      160      259    2            XB$ENV.EXCEPTION_LOCATION = 0;
      161      260    2            CALL XBI$RAISE_SIGNAL;
      162      261    2            CALL XB_RETURN_ORDINAL_RESULT (0);
      163      262    2         CASE(%SIGUSR1);
      164      263    2            XB$ENV.CURRENT_SIGNAL = %SIGUSR1;
      165      264    2            XB$ENV.EXCEPTION_NAME.SIZE = User_Signal1_Raised.SIZE;
PL6.E3A0      #002=RAISE File=xb_signal:6.:XBC3TSI                               FRI 01/06/95 11:41 Page:10   
      166      265    2            XB$ENV.EXCEPTION_NAME.STRING = User_Signal1_Raised.STRING;
      167      266    2            XB$ENV.ERROR_CODE = ERR$SIGUSR1_SIGNAL;
      168      267    2            XB$ENV.DCB_NUMBER = 0;
      169      268    2            XB$ENV.EXCEPTION_LOCATION = 0;
      170      269    2            CALL XBI$RAISE_SIGNAL;
      171      270    2            CALL XB_RETURN_ORDINAL_RESULT (0);
      172      271    2         CASE(%SIGUSR2);
      173      272    2            XB$ENV.CURRENT_SIGNAL = %SIGUSR2;
      174      273    2            XB$ENV.EXCEPTION_NAME.SIZE = User_Signal2_Raised.SIZE;
      175      274    2            XB$ENV.EXCEPTION_NAME.STRING = User_Signal2_Raised.STRING;
      176      275    2            XB$ENV.ERROR_CODE = ERR$SIGUSR2_SIGNAL;
      177      276    2            XB$ENV.DCB_NUMBER = 0;
      178      277    2            XB$ENV.EXCEPTION_LOCATION = 0;
      179      278    2            CALL XBI$RAISE_SIGNAL;
      180      279    2            CALL XB_RETURN_ORDINAL_RESULT (0);
      181      280    2         CASE(ELSE);
      182      281                 /* raising these signals doesn't make any sense at all */
      183      282    2            CALL XB_RETURN_ORDINAL_RESULT (1);
      184      283    2      END;
      185      284    1   END raise;
      186      285        %EOD;

PL6.E3A0      #002=RAISE File=xb_signal:6.:XBC3TSI                               FRI 01/06/95 11:41 Page:11   
--  Include file information  --

   xb_string_support_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_signal_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure RAISE.

   Procedure RAISE requires 144 words for executable code.
   Procedure RAISE requires 6 words of local(AUTO) storage.

PL6.E3A0      #002=RAISE File=xb_signal:6.:XBC3TSI                               FRI 01/06/95 11:41 Page:12   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=RAISE File=xb_signal:6.:XBC3TSI                               FRI 01/06/95 11:41 Page:13   
          MINI XREF LISTING

ABORT_SIGNAL.SIZE
       192**DCL       228>>ASSIGN
ABORT_SIGNAL.STRING
       193**DCL       229>>ASSIGN
ALARM_HAS_OCCURED.SIZE
       207**DCL       255>>ASSIGN
ALARM_HAS_OCCURED.STRING
       208**DCL       256>>ASSIGN
BREAK_KEY_HIT.SIZE
       197**DCL       237>>ASSIGN
BREAK_KEY_HIT.STRING
       198**DCL       238>>ASSIGN
EXIT_CONTROL_ENTERED.SIZE
       202**DCL       246>>ASSIGN
EXIT_CONTROL_ENTERED.STRING
       203**DCL       247>>ASSIGN
P_SIG
       185**DCL         7--PROC      224--ASSIGN
SIG
       188**DCL       225>>DOCASE
SIGVEC.SV_HANDLER
        73**DCL        74--REDEF
SIG_AS_PTR
       187**DCL       188--REDEF     224<<ASSIGN
USER_SIGNAL1_RAISED.SIZE
       212**DCL       264>>ASSIGN
USER_SIGNAL1_RAISED.STRING
       213**DCL       265>>ASSIGN
USER_SIGNAL2_RAISED.SIZE
       217**DCL       273>>ASSIGN
USER_SIGNAL2_RAISED.STRING
       218**DCL       274>>ASSIGN
PL6.E3A0      #002=RAISE File=xb_signal:6.:XBC3TSI                               FRI 01/06/95 11:41 Page:14   
XB$ENV.CURRENT_SIGNAL
        46**DCL       227<<ASSIGN    236<<ASSIGN    245<<ASSIGN    254<<ASSIGN    263<<ASSIGN    272<<ASSIGN
XB$ENV.DCB_NUMBER
        56**DCL       231<<ASSIGN    240<<ASSIGN    249<<ASSIGN    258<<ASSIGN    267<<ASSIGN    276<<ASSIGN
XB$ENV.ERROR_CODE
        50**DCL       230<<ASSIGN    239<<ASSIGN    248<<ASSIGN    257<<ASSIGN    266<<ASSIGN    275<<ASSIGN
XB$ENV.EXCEPTION_LOCATION
        57**DCL       232<<ASSIGN    241<<ASSIGN    250<<ASSIGN    259<<ASSIGN    268<<ASSIGN    277<<ASSIGN
XB$ENV.EXCEPTION_NAME.SIZE
        48**DCL       228<<ASSIGN    237<<ASSIGN    246<<ASSIGN    255<<ASSIGN    264<<ASSIGN    273<<ASSIGN
XB$ENV.EXCEPTION_NAME.STRING
        49**DCL       229<<ASSIGN    238<<ASSIGN    247<<ASSIGN    256<<ASSIGN    265<<ASSIGN    274<<ASSIGN
XB$ERR$ABORT_SIGNAL
       140**DCL       230>>ASSIGN
XB$ERR$BREAK_KEY_HIT
       141**DCL       239>>ASSIGN
XB$ERR$EXIT_CONTROL
       142**DCL       248>>ASSIGN
XB$ERR$SIGALRM_SIGNAL
       145**DCL       257>>ASSIGN
XB$ERR$SIGUSR1_SIGNAL
       146**DCL       266>>ASSIGN
XB$ERR$SIGUSR2_SIGNAL
       147**DCL       275>>ASSIGN
XBI$RAISE_SIGNAL
       221**DCL-ENT   233--CALL      242--CALL      251--CALL      260--CALL      269--CALL      278--CALL
XB_RETURN_ORDINAL_RESULT
       222**DCL-ENT   234--CALL      243--CALL      252--CALL      261--CALL      270--CALL      279--CALL
       282--CALL

PL6.E3A0      #003=SIGSETMASK File=xb_signal:6.:XBC3TSI                          FRI 01/06/95 11:41 Page:15   
      187        1        /*T***********************************************************/
      188        2        /*T*                                                         */
      189        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      190        4        /*T*                                                         */
      191        5        /*T***********************************************************/
      192        6
      193        7        sigsetmask : PROC (p_mask);
      194        8
      195        9        /*D* NAME: sigsetmask
      196       10             PROTOTYPE:   long sigsetmask(int mask);
      197       11             DESCRIPTION: The sigsetmask function sets the current signal mask
      198       12                          to be blocked from delivery.  Signal i is blocked
      199       13                          if the i-th bit in mask is a 1.  It is not possible
      200       14                          to block signals that can not be ignored.
      201       15
      202       16                          The function returns the old value masked signals.
      203       17
      204       18              WGE September 18, 1990
      205       19        */
      206       20
      207       21        %INCLUDE CP_6;
      208     5581        %INCLUDE CP_6_SUBS;
      209     6121        %INCLUDE xb_signal_i6;
      210     6183        %INCLUDE xb_string_support_i6;
      211     6219        %INCLUDE xb_errors_i6;
      212     6290
      213     6291        /*    Parameter declarations  */
      214     6292
      215     6293    1   DCL   p_mask      SBIN;
      216     6294    1   DCL   mask        SBIN;
      217     6295    1   DCL   mask_as_ptr REDEF mask  PTR;
      218     6296
      219     6297        /*    Function declarations   */
      220     6298
      221     6299    1   DCL   XB_RETURN_ORDINAL_RESULT   ENTRY(1);
      222     6300    1   DCL   XBI$RAISE_SIGNAL           ENTRY;
      223     6301
PL6.E3A0      #003=SIGSETMASK File=xb_signal:6.:XBC3TSI                          FRI 01/06/95 11:41 Page:16   
      224     6302        /*    Local declarations      */
      225     6303
      226     6304    1   DCL   old_mask    SBIN;
      227     6305    1   DCL   I           SBIN;
      228     6306        %STRING_CONSTANT (NAME=Abort_Signal, VALUE="'Abort signal'");
      229     6311        %STRING_CONSTANT (NAME=Break_Key_Hit, VALUE="'Break Key Hit'");
      230     6316        %STRING_CONSTANT (NAME=Exit_Control_Entered, VALUE="'Exit Control Entered'");
      231     6321        %STRING_CONSTANT (NAME=Alarm_Has_Occured, VALUE="'Alarm Has Occured'");
      232     6326        %STRING_CONSTANT (NAME=User_Signal1_Raised, VALUE="'User Signal1 Raised'");
      233     6331        %STRING_CONSTANT (NAME=User_Signal2_Raised, VALUE="'User Signal2 Raised'");
      234     6336
      235     6337        /*    Do the usual kludge to get the arguments                      */
      236     6338
      237     6339    1      mask_as_ptr = ADDR(p_mask);
      238     6340
      239     6341    1      old_mask = BITBIN(XB$ENV.SIGNAL_MASK);
      240     6342
      241     6343    1      XB$ENV.SIGNAL_MASK = BINBIT(mask, 36) & %BLOCKABLE_SIGNALS;
      242     6344
      243     6345        /*    Now the fun begins.  We gotta check to see if any of the
      244     6346              signals that are no longer masked of were received when they
      245     6347              were masked off.  If they were then we get to raise that signal
      246     6348              and all others that this occurs for.  We will go in the order
      247     6349              of low signal number to high signal number, not the order they
      248     6350              were received.                                                */
      249     6351
      250     6352    2      DO I = 0 TO %LAST_SIGNAL-1;
      251     6353    3         IF (XB$ENV.SIGNAL_WAIT(I) AND NOT (XB$ENV.SIGNAL_MASK(I))) THEN DO;
      252     6354    4            DO CASE (I+1);
      253     6355    4               CASE(%SIGABRT);
      254     6356    4                  XB$ENV.CURRENT_SIGNAL = %SIGABRT;
      255     6357    4                  XB$ENV.EXCEPTION_NAME.SIZE = Abort_Signal.SIZE;
      256     6358    4                  XB$ENV.EXCEPTION_NAME.STRING = Abort_Signal.STRING;
      257     6359    4                  XB$ENV.ERROR_CODE = ERR$ABORT_SIGNAL;
      258     6360    4               CASE(%SIGINT);
      259     6361    4                  XB$ENV.CURRENT_SIGNAL = %SIGINT;
      260     6362    4                  XB$ENV.EXCEPTION_NAME.SIZE = Break_Key_Hit.SIZE;
PL6.E3A0      #003=SIGSETMASK File=xb_signal:6.:XBC3TSI                          FRI 01/06/95 11:41 Page:17   
      261     6363    4                  XB$ENV.EXCEPTION_NAME.STRING = Break_Key_Hit.STRING;
      262     6364    4                  XB$ENV.ERROR_CODE = ERR$BREAK_KEY_HIT;
      263     6365    4               CASE(%SIGTERM);
      264     6366    4                  XB$ENV.CURRENT_SIGNAL = %SIGTERM;
      265     6367    4                  XB$ENV.EXCEPTION_NAME.SIZE = Exit_Control_Entered.SIZE;
      266     6368    4                  XB$ENV.EXCEPTION_NAME.STRING = Exit_Control_Entered.STRING;
      267     6369    4                  XB$ENV.ERROR_CODE = ERR$EXIT_CONTROL;
      268     6370    4               CASE(%SIGALRM);
      269     6371    4                  XB$ENV.CURRENT_SIGNAL = %SIGALRM;
      270     6372    4                  XB$ENV.EXCEPTION_NAME.SIZE = Alarm_Has_Occured.SIZE;
      271     6373    4                  XB$ENV.EXCEPTION_NAME.STRING = Alarm_Has_Occured.STRING;
      272     6374    4                  XB$ENV.ERROR_CODE = ERR$SIGALRM_SIGNAL;
      273     6375    4               CASE(%SIGUSR1);
      274     6376    4                  XB$ENV.CURRENT_SIGNAL = %SIGUSR1;
      275     6377    4                  XB$ENV.EXCEPTION_NAME.SIZE = User_Signal1_Raised.SIZE;
      276     6378    4                  XB$ENV.EXCEPTION_NAME.STRING = User_Signal1_Raised.STRING;
      277     6379    4                  XB$ENV.ERROR_CODE = ERR$SIGUSR1_SIGNAL;
      278     6380    4               CASE(%SIGUSR2);
      279     6381    4                  XB$ENV.CURRENT_SIGNAL = %SIGUSR2;
      280     6382    4                  XB$ENV.EXCEPTION_NAME.SIZE = User_Signal2_Raised.SIZE;
      281     6383    4                  XB$ENV.EXCEPTION_NAME.STRING = User_Signal2_Raised.STRING;
      282     6384    4                  XB$ENV.ERROR_CODE = ERR$SIGUSR2_SIGNAL;
      283     6385    4               CASE(ELSE);
      284     6386                       /* Should not get here so we will ignore these       */
      285     6387    4            END;  /* case */
      286     6388    3            XB$ENV.DCB_NUMBER = 0;
      287     6389    3            XB$ENV.EXCEPTION_LOCATION = 0;
      288     6390    3            CALL XBI$RAISE_SIGNAL;
      289     6391    3            XB$ENV.SIGNAL_WAIT(I) = '0'B;
      290     6392    3         END;  /* if */
      291     6393    2      END; /* do */
      292     6394
      293     6395        /*    Th Th Thats all folks                                         */
      294     6396
      295     6397    1      CALL XB_RETURN_ORDINAL_RESULT (old_mask);
      296     6398
      297     6399    1   END sigsetmask;
PL6.E3A0      #003=SIGSETMASK File=xb_signal:6.:XBC3TSI                          FRI 01/06/95 11:41 Page:18   
      298     6400        %EOD;

PL6.E3A0      #003=SIGSETMASK File=xb_signal:6.:XBC3TSI                          FRI 01/06/95 11:41 Page:19   
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_string_support_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_signal_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure SIGSETMASK.

   Procedure SIGSETMASK requires 124 words for executable code.
   Procedure SIGSETMASK requires 10 words of local(AUTO) storage.

PL6.E3A0      #003=SIGSETMASK File=xb_signal:6.:XBC3TSI                          FRI 01/06/95 11:41 Page:20   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=SIGSETMASK File=xb_signal:6.:XBC3TSI                          FRI 01/06/95 11:41 Page:21   
          MINI XREF LISTING

ABORT_SIGNAL.SIZE
      6308**DCL      6357>>ASSIGN
ABORT_SIGNAL.STRING
      6309**DCL      6358>>ASSIGN
ALARM_HAS_OCCURED.SIZE
      6323**DCL      6372>>ASSIGN
ALARM_HAS_OCCURED.STRING
      6324**DCL      6373>>ASSIGN
BREAK_KEY_HIT.SIZE
      6313**DCL      6362>>ASSIGN
BREAK_KEY_HIT.STRING
      6314**DCL      6363>>ASSIGN
EXIT_CONTROL_ENTERED.SIZE
      6318**DCL      6367>>ASSIGN
EXIT_CONTROL_ENTERED.STRING
      6319**DCL      6368>>ASSIGN
I
      6305**DCL      6352<<DOINDEX  6353>>IF       6353>>IF       6354>>DOCASE   6391>>ASSIGN
MASK
      6294**DCL      6295--REDEF    6343>>ASSIGN
MASK_AS_PTR
      6295**DCL      6339<<ASSIGN
OLD_MASK
      6304**DCL      6341<<ASSIGN   6397<>CALL
P_MASK
      6293**DCL         7--PROC     6339--ASSIGN
SIGVEC.SV_HANDLER
      6179**DCL      6180--REDEF
USER_SIGNAL1_RAISED.SIZE
      6328**DCL      6377>>ASSIGN
USER_SIGNAL1_RAISED.STRING
      6329**DCL      6378>>ASSIGN
PL6.E3A0      #003=SIGSETMASK File=xb_signal:6.:XBC3TSI                          FRI 01/06/95 11:41 Page:22   
USER_SIGNAL2_RAISED.SIZE
      6333**DCL      6382>>ASSIGN
USER_SIGNAL2_RAISED.STRING
      6334**DCL      6383>>ASSIGN
XB$ENV.CURRENT_SIGNAL
      6152**DCL      6356<<ASSIGN   6361<<ASSIGN   6366<<ASSIGN   6371<<ASSIGN   6376<<ASSIGN   6381<<ASSIGN
XB$ENV.DCB_NUMBER
      6162**DCL      6388<<ASSIGN
XB$ENV.ERROR_CODE
      6156**DCL      6359<<ASSIGN   6364<<ASSIGN   6369<<ASSIGN   6374<<ASSIGN   6379<<ASSIGN   6384<<ASSIGN
XB$ENV.EXCEPTION_LOCATION
      6163**DCL      6389<<ASSIGN
XB$ENV.EXCEPTION_NAME.SIZE
      6154**DCL      6357<<ASSIGN   6362<<ASSIGN   6367<<ASSIGN   6372<<ASSIGN   6377<<ASSIGN   6382<<ASSIGN
XB$ENV.EXCEPTION_NAME.STRING
      6155**DCL      6358<<ASSIGN   6363<<ASSIGN   6368<<ASSIGN   6373<<ASSIGN   6378<<ASSIGN   6383<<ASSIGN
XB$ENV.SIGNAL_MASK
      6168**DCL      6341>>ASSIGN   6343<<ASSIGN   6353>>IF
XB$ENV.SIGNAL_WAIT
      6169**DCL      6353>>IF       6391<<ASSIGN
XB$ERR$ABORT_SIGNAL
      6282**DCL      6359>>ASSIGN
XB$ERR$BREAK_KEY_HIT
      6283**DCL      6364>>ASSIGN
XB$ERR$EXIT_CONTROL
      6284**DCL      6369>>ASSIGN
XB$ERR$SIGALRM_SIGNAL
      6287**DCL      6374>>ASSIGN
XB$ERR$SIGUSR1_SIGNAL
      6288**DCL      6379>>ASSIGN
XB$ERR$SIGUSR2_SIGNAL
      6289**DCL      6384>>ASSIGN
XBI$RAISE_SIGNAL
      6300**DCL-ENT  6390--CALL
XB_RETURN_ORDINAL_RESULT
      6299**DCL-ENT  6397--CALL

PL6.E3A0      #004=SIGBLOCK File=xb_signal:6.:XBC3TSI                            FRI 01/06/95 11:41 Page:23   
      299        1
      300        2        /*T***********************************************************/
      301        3        /*T*                                                         */
      302        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      303        5        /*T*                                                         */
      304        6        /*T***********************************************************/
      305        7
      306        8        sigblock    : PROC (p_mask);
      307        9
      308       10        /*D* NAME: sigblock
      309       11             PROTOTYPE:   long sigblock(long mask);
      310       12             DESCRIPTION: The sigblock function ORs the current signal mask
      311       13                          with mask to get the signals to be blocked from
      312       14                          delivery.  Signal i is blocked if the i-th bit
      313       15                          in mask is a 1.  It is not possible to block signals
      314       16                          that can not be ignored.
      315       17
      316       18                          The function returns the old value masked signals.
      317       19
      318       20              WGE September 19, 1990
      319       21        */
      320       22
      321       23        %INCLUDE CP_6;
      322     5583        %INCLUDE CP_6_SUBS;
      323     6123        %INCLUDE xb_signal_i6;
      324     6185
      325     6186        /*    Parameter declarations  */
      326     6187
      327     6188    1   DCL   p_mask      SBIN;
      328     6189    1   DCL   mask        SBIN;
      329     6190    1   DCL   mask_as_ptr REDEF mask  PTR;
      330     6191
      331     6192        /*    Function declarations   */
      332     6193
      333     6194    1   DCL   XB_RETURN_ORDINAL_RESULT   ENTRY(1);
      334     6195
      335     6196        /*    Local declarations      */
PL6.E3A0      #004=SIGBLOCK File=xb_signal:6.:XBC3TSI                            FRI 01/06/95 11:41 Page:24   
      336     6197
      337     6198    1   DCL   old_mask    SBIN;
      338     6199
      339     6200        /*    Do the usual kludge to get the arguments                      */
      340     6201
      341     6202    1      mask_as_ptr = ADDR(p_mask);
      342     6203
      343     6204    1      old_mask = BITBIN(XB$ENV.SIGNAL_MASK);
      344     6205
      345     6206    1      XB$ENV.SIGNAL_MASK = (XB$ENV.SIGNAL_MASK | BINBIT(mask, 36)) & %BLOCKABLE_SIGNALS
              6206               ;
      346     6207
      347     6208        /*    Th Th Thats all folks                                         */
      348     6209
      349     6210    1      CALL XB_RETURN_ORDINAL_RESULT (old_mask);
      350     6211
      351     6212    1   END sigblock;
      352     6213        %EOD;

PL6.E3A0      #004=SIGBLOCK File=xb_signal:6.:XBC3TSI                            FRI 01/06/95 11:41 Page:25   
--  Include file information  --

   xb_signal_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure SIGBLOCK.

   Procedure SIGBLOCK requires 17 words for executable code.
   Procedure SIGBLOCK requires 8 words of local(AUTO) storage.

PL6.E3A0      #004=SIGBLOCK File=xb_signal:6.:XBC3TSI                            FRI 01/06/95 11:41 Page:26   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=SIGBLOCK File=xb_signal:6.:XBC3TSI                            FRI 01/06/95 11:41 Page:27   
          MINI XREF LISTING

MASK
      6189**DCL      6190--REDEF    6206>>ASSIGN
MASK_AS_PTR
      6190**DCL      6202<<ASSIGN
OLD_MASK
      6198**DCL      6204<<ASSIGN   6210<>CALL
P_MASK
      6188**DCL         8--PROC     6202--ASSIGN
SIGVEC.SV_HANDLER
      6181**DCL      6182--REDEF
XB$ENV.SIGNAL_MASK
      6170**DCL      6204>>ASSIGN   6206<<ASSIGN   6206>>ASSIGN
XB_RETURN_ORDINAL_RESULT
      6194**DCL-ENT  6210--CALL

PL6.E3A0      #005=SIGVECTOR File=xb_signal:6.:XBC3TSI                           FRI 01/06/95 11:41 Page:28   
      353        1
      354        2        /*T***********************************************************/
      355        3        /*T*                                                         */
      356        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      357        5        /*T*                                                         */
      358        6        /*T***********************************************************/
      359        7        sigvector: PROC (p_sig, p_vec, p_ovec);
      360        8           /*D*  NAME: sigvector
      361        9                PROTOTYPE: int sigvector (int sig, struct sigvec *vec, struct sigvec *ovec);
      362       10                 INPUT: sig   signal type
      363       11                        vec   how to handle signal
      364       12                 OUTPUT:
      365       13                       ovec  If not null returns info about old set up of sigs
      366       14                 PURPOSE: Tells the runtime library how the specified signal
      367       15                          is to be handled.  This is an alternate way of
      368       16                          handling signals than signal().  It assigns a
      369       17                          handler, and sets a mask to be used while the signal
      370       18                          is being handled, and possibly returns values about
      371       19                          the current set up (ovec).
      372       20           */
      373       21
      374       22        %INCLUDE CP_6;
      375     5582        %INCLUDE xb_signal_i6;
      376     5644        %INCLUDE xb_errors_i6;
      377     5715
      378     5716        /*    Parameter declarations  */
      379     5717
      380     5718    1   DCL   p_sig                      UBIN;
      381     5719    1   DCL   p_vec                      PTR;
      382     5720    1   DCL   p_ovec                     PTR;
      383     5721    1   DCL   sig_as_ptr                 PTR;
      384     5722    1   DCL   sig      REDEF sig_as_ptr  UBIN;
      385     5723    1   DCL   vec_p                      PTR;
      386     5724    1   DCL   ovec_p                     PTR;
      387     5725
      388     5726        /*    Function declarations   */
      389     5727
PL6.E3A0      #005=SIGVECTOR File=xb_signal:6.:XBC3TSI                           FRI 01/06/95 11:41 Page:29   
      390     5728    1   DCL   XBI_SET_ERRNO              ENTRY (1);
      391     5729    1   DCL   XB_RETURN_ORDINAL_RESULT   ENTRY (1);
      392     5730    1   DCL   XBI$DEFAULT_SIGNAL_HANDLER ENTRY;
      393     5731    1   DCL   XBI$ENABLE_XCON            ENTRY;
      394     5732    1   DCL   XBI$ENABLE_INT             ENTRY;
      395     5733    1   DCL   XBI$DISABLE_XCON           ENTRY;
      396     5734    1   DCL   XBI$DISABLE_INT            ENTRY;
      397     5735
      398     5736        /*    Local declarations      */
      399     5737
      400     5738    1   DCL   result                     SBIN;
      401     5739
      402     5740        /*    the usual kluge to get the arguments                          */
      403     5741
      404     5742    1      sig_as_ptr = ADDR(P_sig);
      405     5743    1      vec_p = ADDR(p_vec);
      406     5744    1      ovec_p = ADDR(p_ovec);
      407     5745
      408     5746        /*    Did the user specify a valid signal type?                     */
      409     5747
      410     5748    2      IF sig > %LAST_SIGNAL THEN DO;
      411     5749    2         CALL XBI_SET_ERRNO (ERR$BAD_CALL_TO_SIGNAL);  /* EINVAL */
      412     5750    2         CALL XB_RETURN_ORDINAL_RESULT (-1);
      413     5751    2      END;
      414     5752
      415     5753        /*    Lets set up the return value information (ovec)               */
      416     5754
      417     5755    2      IF (ovec_p ~= ADDR(NIL)) THEN DO;
      418     5756    2         ovec_p->sigvec.sv_handler = XB$ENV.SIGNAL_HANDLER(sig);
      419     5757    2         ovec_p->sigvec.sv_mask = XB$ENV.SIGNAL_SV_MASK(sig);
      420     5758    2         ovec_p->sigvec.sv_flags = XB$ENV.SIGNAL_SV_FLAGS(sig);
      421     5759    2      END;
      422     5760
      423     5761
      424     5762        /*    Time to change setup for the specified signal if requested    */
      425     5763
      426     5764    2      IF (vec_p ~= ADDR(NIL)) THEN DO;
PL6.E3A0      #005=SIGVECTOR File=xb_signal:6.:XBC3TSI                           FRI 01/06/95 11:41 Page:30   
      427     5765
      428     5766        /* Did the user specify SIG_ERR as handler?  This has no meaning.   */
      429     5767
      430     5768    3         IF (vec_p->sigvec.sv_handler_as_ptr = SIG_ERR) THEN DO;
      431     5769    3            CALL XBI_SET_ERRNO (ERR$BAD_CALL_TO_SIGNAL);  /* EINVAL */
      432     5770    3            CALL XB_RETURN_ORDINAL_RESULT (-1);
      433     5771    3         END;
      434     5772
      435     5773        /* It looks like we have a good handler.  First, save the old handler
      436     5774           as a return value for a possible later call to signal()          */
      437     5775
      438     5776    3         DO INHIBIT;
      439     5777    3            XB$ENV.SIGNAL_RETURN_RESULT (sig) = vec_p->sigvec.sv_handler_as_ptr;
      440     5778
      441     5779    4            IF vec_p->sigvec.sv_handler_as_ptr = SIG_DFL THEN DO;
      442     5780    4               XB$ENV.SIGNAL_HANDLER (sig) = ENTADDR(XBI$DEFAULT_SIGNAL_HANDLER);
      443     5781    4            END;
      444     5782    4            ELSE IF vec_p->sigvec.sv_handler_as_ptr = SIG_IGN THEN DO;
      445     5783    4               XB$ENV.SIGNAL_HANDLER (sig) = ENTADDR(NIL);
      446     5784    5               DO CASE (sig);
      447     5785    5                  CASE (%SIGINT);
      448     5786    5                     CALL XBI$DISABLE_INT;
      449     5787    5                  CASE (%SIGTERM);
      450     5788    5                     IF (XB$ENV.SIGNAL_HANDLER(%SIGHUP) = ENTADDR(NIL)) THEN
      451     5789    5                        CALL XBI$DISABLE_XCON;
      452     5790    5                  CASE (%SIGHUP);
      453     5791    5                     IF (XB$ENV.SIGNAL_HANDLER(%SIGTERM) = ENTADDR(NIL)) THEN
      454     5792    5                        CALL XBI$DISABLE_XCON;
      455     5793    5               END;
      456     5794    4            END;
      457     5795    4            ELSE DO;
      458     5796    4               XB$ENV.SIGNAL_HANDLER (sig) = vec_p->sigvec.sv_handler;
      459     5797    5               DO CASE (sig);
      460     5798    5                  CASE (%SIGINT);
      461     5799    5                     CALL XBI$ENABLE_INT;
      462     5800    5                  CASE (%SIGTERM, %SIGHUP);
      463     5801    5                     CALL XBI$ENABLE_XCON;
PL6.E3A0      #005=SIGVECTOR File=xb_signal:6.:XBC3TSI                           FRI 01/06/95 11:41 Page:31   
      464     5802    5               END;
      465     5803    4            END;
      466     5804    3            XB$ENV.SIGNAL_SV_MASK(sig) = vec_p->sigvec.sv_mask & %BLOCKABLE_SIGNALS;
      467     5805    3            XB$ENV.SIGNAL_SV_FLAGS(sig) = vec_p->sigvec.sv_flags;
      468     5806    3         END; /* end inhibit */
      469     5807
      470     5808    2      END;  /* vec_p ~= ADDR(NIL) */
      471     5809
      472     5810    1      CALL XB_RETURN_ORDINAL_RESULT (1);
      473     5811    1   END sigvector;

PL6.E3A0      #005=SIGVECTOR File=xb_signal:6.:XBC3TSI                           FRI 01/06/95 11:41 Page:32   
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_signal_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure SIGVECTOR.

   Procedure SIGVECTOR requires 117 words for executable code.
   Procedure SIGVECTOR requires 10 words of local(AUTO) storage.

    No errors detected in file xb_signal:6.:XBC3TSI    .

PL6.E3A0      #005=SIGVECTOR File=xb_signal:6.:XBC3TSI                           FRI 01/06/95 11:41 Page:33   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=SIGVECTOR File=xb_signal:6.:XBC3TSI                           FRI 01/06/95 11:41 Page:34   
          MINI XREF LISTING

OVEC_P
      5724**DCL      5744<<ASSIGN   5755>>IF       5756>>ASSIGN   5757>>ASSIGN   5758>>ASSIGN
P_OVEC
      5720**DCL         7--PROC     5744--ASSIGN
P_SIG
      5718**DCL         7--PROC     5742--ASSIGN
P_VEC
      5719**DCL         7--PROC     5743--ASSIGN
SIG
      5722**DCL      5748>>IF       5756>>ASSIGN   5757>>ASSIGN   5758>>ASSIGN   5777>>ASSIGN   5780>>ASSIGN
      5783>>ASSIGN   5784>>DOCASE   5796>>ASSIGN   5797>>DOCASE   5804>>ASSIGN   5805>>ASSIGN
SIGVEC.SV_FLAGS
      5643**DCL      5758<<ASSIGN   5805>>ASSIGN
SIGVEC.SV_HANDLER
      5640**DCL      5641--REDEF    5756<<ASSIGN   5796>>ASSIGN
SIGVEC.SV_HANDLER_AS_PTR
      5641**DCL      5768>>IF       5777>>ASSIGN   5779>>IF       5782>>IF
SIGVEC.SV_MASK
      5642**DCL      5757<<ASSIGN   5804>>ASSIGN
SIG_AS_PTR
      5721**DCL      5722--REDEF    5742<<ASSIGN
VEC_P
      5723**DCL      5743<<ASSIGN   5764>>IF       5768>>IF       5777>>ASSIGN   5779>>IF       5782>>IF
      5796>>ASSIGN   5804>>ASSIGN   5805>>ASSIGN
XB$ENV.SIGNAL_HANDLER
      5625**DCL      5756>>ASSIGN   5780<<ASSIGN   5783<<ASSIGN   5788>>IF       5791>>IF       5796<<ASSIGN
XB$ENV.SIGNAL_RETURN_RESULT
      5626**DCL      5777<<ASSIGN
XB$ENV.SIGNAL_SV_FLAGS
      5628**DCL      5758>>ASSIGN   5805<<ASSIGN
XB$ENV.SIGNAL_SV_MASK
      5627**DCL      5757>>ASSIGN   5804<<ASSIGN
PL6.E3A0      #005=SIGVECTOR File=xb_signal:6.:XBC3TSI                           FRI 01/06/95 11:41 Page:35   
XB$ERR$BAD_CALL_TO_SIGNAL
      5706**DCL      5749<>CALL     5769<>CALL
XBI$DEFAULT_SIGNAL_HANDLER
      5730**DCL-ENT  5780--ASSIGN
XBI$DISABLE_INT
      5734**DCL-ENT  5786--CALL
XBI$DISABLE_XCON
      5733**DCL-ENT  5789--CALL     5792--CALL
XBI$ENABLE_INT
      5732**DCL-ENT  5799--CALL
XBI$ENABLE_XCON
      5731**DCL-ENT  5801--CALL
XBI_SET_ERRNO
      5728**DCL-ENT  5749--CALL     5769--CALL
XB_RETURN_ORDINAL_RESULT
      5729**DCL-ENT  5750--CALL     5770--CALL     5810--CALL
