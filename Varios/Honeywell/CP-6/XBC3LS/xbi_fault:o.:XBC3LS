
PL6.E3A0      #001=XBI$FAULT File=xbi_fault:6.:XBC3TSI                           FRI 01/06/95 11:37 Page:1    
        1        1        /*M* XBI$FAULT - Fault handler for PASCAL runtime */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        XBI$FAULT: PROC ASYNC;
        8        8        /*D* NAME: XBI$FAULT
        9        9           CALL: Asynchronous entry
       10       10           INTERFACE: XBI$RAISE_SIGNAL
       11       11           INPUT: Fault code/subcode in exceptional condition frame
       12       12           OUTPUT: Exception name, location, stack frame pointer in
       13       13                   standard environment.
       14       14           SCRATCH: all
       15       15           DESCRIPTION:  XBI$FAULT is entered on a hardware detected
       16       16              exceptional condition.
       17       17              It determines from the code/subcode in the exceptional
       18       18              condition frame which fault occured, and sets up the information
       19       19              required for XBI$RAISE_SIGNAL to raise the appropriate
       20       20              standard signal.
       21       21        */
       22       22
       23       23        %INCLUDE CP_6;
       24     5583        %INCLUDE B_SEGIDS_C;
       25     6122        %INCLUDE xb_instruction_opcodes_i6;
       26     6180        %INCLUDE xb_string_support_i6;
       27     6216        %INCLUDE xb_signal_i6;
       28     6278
       29     6279    1   DCL X66_TRTN         ENTRY(1);
       30     6280
       31     6281        %B$TCB;
       32     6284        %B$EXCFR;
       33     6302        %SUB_EXC;
       34     6349
       35     6350    1   DCL B$TCB$           PTR SYMREF;
       36     6351
       37     6352    1   DCL PTR$             PTR  ALIGNED;
PL6.E3A0      #001=XBI$FAULT File=xbi_fault:6.:XBC3TSI                           FRI 01/06/95 11:37 Page:2    
       38     6353
       39     6354    1   DCL 1 IC  ALIGNED,
       40     6355    1         2 DISP         UBIN(18) UNAL,
       41     6356    1         2 *            BIT(18);
       42     6357
       43     6358    1   DCL IC$ REDEF IC PTR ALIGNED;
       44     6359
       45     6360    1   DCL 1 INIT_IC    CONSTANT ALIGNED,
       46     6361    1         2 *            UBIN (18) UNAL INIT (0),
       47     6362    1         2 *            BIT(6) UNAL INIT('00'B),
       48     6363    1         2 *            BIT(12) UNAL INIT(%ISSID);
       49     6364
       50     6365    1   DCL ISEG$ REDEF INIT_IC     PTR;
       51     6366
       52     6367    1   DCL I             SBIN;
       53     6368
       54     6369    1   DCL XBI$RAISE_SIGNAL$    EPTR CONSTANT INIT (ENTADDR(XBI$RAISE_SIGNAL));
       55     6370    1   DCL 1 XBI$RAISE_SIGNAL# REDEF XBI$RAISE_SIGNAL$,
       56     6371    1         2 IC#                   UBIN (18) UNAL,
       57     6372    1         2 *                     BIT (18) UNAL;
       58     6373
       59     6374    1   DCL FAULT#           SBIN WORD;
       60     6375
       61     6376    1   DCL 1 INSTRUCTION ALIGNED BASED (IC$),
       62     6377    1         2 BIG_OFFSET   UBIN (18) UNAL,
       63     6378    1         2 USES_AR REDEF BIG_OFFSET UNAL,
       64     6379    1            3 AR        UBIN (3) UNAL,
       65     6380    1            3 SMALL_OFFSET UBIN (15) UNAL,
       66     6381    1         2 OPCODE    UNAL,
       67     6382    1           3 CLASS   BIT(6) UNAL,
       68     6383    1           3 *       BIT(3) UNAL,
       69     6384    1         2 FLAGS     UNAL,
       70     6385    1           3 EIS     BIT(1) UNAL,
       71     6386    1           3 I       BIT(1) UNAL,
       72     6387    1           3 AR      BIT(1) UNAL,
       73     6388    1         2 TAG       UNAL,
       74     6389    1           3 TM      BIT(2) UNAL,
PL6.E3A0      #001=XBI$FAULT File=xbi_fault:6.:XBC3TSI                           FRI 01/06/95 11:37 Page:3    
       75     6390    1           3 TD      BIT(4) UNAL;
       76     6391
       77     6392        %FPT_TRTN (FPTN=FPT$TRTN, STCLASS=CONSTANT);
       78     6409        %FPT_TRTN (STCLASS=AUTO);
       79     6426        %VLP_REGS (STCLASS=AUTO);
       80     6441
       81     6442        %STRING_VARIABLE (NAME=STRING_TEMPLATE, STCLASS=BASED, MAXIMUM_LENGTH=384);
       82     6447
       83     6448        %STRING_CONSTANT (NAME=Integer_Overflow,         VALUE="'Integer_Overflow'");
       84     6453        %STRING_CONSTANT (NAME=Real_Overflow,            VALUE="'Real_Overflow'");
       85     6458        %STRING_CONSTANT (NAME=Real_Underflow,           VALUE="'Real_Underflow'");
       86     6463        %STRING_CONSTANT (NAME=Bad_Pointer,              VALUE="'Bad_Pointer'");
       87     6468        %STRING_CONSTANT (NAME=Division_By_Zero,         VALUE="'Division_By_Zero'");
       88     6473        %STRING_CONSTANT (NAME=Hardware_Detected_Fault,  VALUE="'Hardware_Detected_Fault'");
       89     6478        %STRING_CONSTANT (NAME=Illegal_Instruction,      VALUE="'Illegal Instruction'");
       90     6483
       91     6484    1   DCL TEXT$                  PTR;
       92     6485
       93     6486    1   DCL XBI$RAISE_SIGNAL ENTRY;
       94     6487
       95     6488        %FPT_CLRSTK (FPTN=XBI$CLRSTK, STCLASS="STATIC SYMDEF", FRAMES=0);
       96     6502
       97     6503    2   DO INHIBIT;
       98     6504    2      XBI$CLRSTK.V.FRAMES# = XBI$CLRSTK.V.FRAMES# + 1;
       99     6505    2      XBI$CLRSTK.V_ = VECTOR (XBI$CLRSTK.V);
      100     6506    2   END; /* INHIBIT */
      101     6507
      102     6508    1      TEXT$ = ADDR(NIL);
      103     6509    1      PTR$ = B$TCB$->B$TCB.STK$;
      104     6510    1      IC = INIT_IC;
      105     6511    1      IC.DISP = PTR$->B$EXCFR.IC;
      106     6512
      107     6513    2      DO CASE (PTR$->B$EXCFR.ECC);
      108     6514    2         CASE (%ECC_ARITH#);
      109     6515    2            FAULT# = 1 + PTR$->B$EXCFR.SUBC;
      110     6516    2         CASE (%ECC_PROG#);
      111     6517    2            FAULT# = 3 + PTR$->B$EXCFR.SUBC;
PL6.E3A0      #001=XBI$FAULT File=xbi_fault:6.:XBC3TSI                           FRI 01/06/95 11:37 Page:4    
      112     6518    2         CASE (%ECC_ERROR#);
      113     6519    2            FAULT# = 6 + PTR$->B$EXCFR.SUBC;
      114     6520    2      END;
      115     6521    1      VLP_REGS = PTR$->B$EXCFR.REGS;
      116     6522    1      FPT_TRTN = FPT$TRTN;
      117     6523    1      FPT_TRTN.V_ = VECTOR (FPT_TRTN.V);
      118     6524    1      FPT_TRTN.REGS_ = VECTOR(VLP_REGS);
      119     6525
      120     6526    2      DO CASE (FAULT#);
      121     6527    2         CASE (%(1+%SUBC_OVRF#)); /* Overflow */
      122     6528    3            IF PTR$->B$EXCFR.IRBIT.EXOF THEN DO;
      123     6529    3               VLP_REGS.E = '01111111'B;
      124     6530    3               VLP_REGS.A = BITBIN(BINBIT(VLP_REGS.A,36) | '377777777777'O);
      125     6531    3               VLP_REGS.Q = BITBIN('777777777400'O);
      126     6532    3               FPT_TRTN.V.IC# = 1 + PTR$->B$EXCFR.IC;
      127     6533    3               FPT_TRTN.V.IR# = '000010'O;
      128     6534    3               FPT_TRTN.V.SETIR# = '1'B;
      129     6535    3               IF XB$ENV.SIGNAL_HANDLER (%SIGFPE) = ENTADDR(NIL) THEN
      130     6536    3                  CALL X66_TRTN (FPT_TRTN);
      131     6537    3               TEXT$ = ADDR(Real_Overflow);
      132     6538    3               XB$ENV.CURRENT_SIGNAL = %SIGFPE;
      133     6539    3            END;
      134     6540    3            ELSE IF PTR$->B$EXCFR.IRBIT.EXUF THEN DO;
      135     6541    3               VLP_REGS.E = '10000000'B;
      136     6542    3               VLP_REGS.A = 0;
      137     6543    3               VLP_REGS.Q = 0;
      138     6544    3               FPT_TRTN.V.IC# = 1 + PTR$->B$EXCFR.IC;
      139     6545    3               FPT_TRTN.V.IR# = '000010'O;
      140     6546    3               FPT_TRTN.V.SETIR# = '1'B;
      141     6547    3               IF XB$ENV.SIGNAL_HANDLER (%SIGFPE) = ENTADDR(NIL) THEN
      142     6548    3                  CALL X66_TRTN (FPT_TRTN);
      143     6549    3               TEXT$ = ADDR(Real_Underflow);
      144     6550    3               XB$ENV.CURRENT_SIGNAL = %SIGFPE;
      145     6551    3            END;
      146     6552    3            ELSE DO;
      147     6553    3               FPT_TRTN.V.IC# = 1 + PTR$->B$EXCFR.IC;
      148     6554    3               FPT_TRTN.V.IR# = '000010'O;
PL6.E3A0      #001=XBI$FAULT File=xbi_fault:6.:XBC3TSI                           FRI 01/06/95 11:37 Page:5    
      149     6555    3               FPT_TRTN.V.SETIR# = '1'B;
      150     6556    3               IF XB$ENV.SIGNAL_HANDLER (%SIGFPE) = ENTADDR(NIL) THEN
      151     6557    3                  CALL X66_TRTN (FPT_TRTN);
      152     6558    3               TEXT$ = ADDR(Integer_Overflow);
      153     6559    3               XB$ENV.CURRENT_SIGNAL = %SIGFPE;
      154     6560    3            END;
      155     6561    2         CASE (%(1+%SUBC_DVCHK#)); /* Division by zero */
      156     6562    3               IF INSTRUCTION.OPCODE = %DIV THEN DO;
      157     6563    3                  VLP_REGS.A = 0;
      158     6564    3                  VLP_REGS.Q = BITBIN ('377777777777'O);
      159     6565    3               END;
      160     6566    3               ELSE DO;
      161     6567    3                  VLP_REGS.E = '01111111'B;
      162     6568    3                  VLP_REGS.A = BITBIN(BINBIT(VLP_REGS.A,36) | '377777777777'O);
      163     6569    3                  VLP_REGS.Q = BITBIN('777777777400'O);
      164     6570    3               END;
      165     6571    2               FPT_TRTN.V.IC# = 1 + PTR$->B$EXCFR.IC;
      166     6572    2               FPT_TRTN.V.IR# = '000010'O;
      167     6573    2               FPT_TRTN.V.SETIR# = '1'B;
      168     6574    2               IF XB$ENV.SIGNAL_HANDLER (%SIGFPE) = ENTADDR(NIL) THEN
      169     6575    2                  CALL X66_TRTN (FPT_TRTN);
      170     6576    2               TEXT$ = ADDR(Division_By_Zero);
      171     6577    2               XB$ENV.CURRENT_SIGNAL = %SIGFPE;
      172     6578    2         CASE (%(6+%SUBC_MEMORY#)); /* Memory fault */
      173     6579    2            IF (INSTRUCTION.OPCODE.CLASS = %LDP_CLASS) OR
      174     6580    2               (INSTRUCTION.OPCODE.CLASS = %STP_CLASS) OR
      175     6581    2               (INSTRUCTION.OPCODE.CLASS = %EPPR_CLASS) OR
      176     6582    2               (INSTRUCTION.FLAGS.AR AND PTR$->B$EXCFR.PRS(INSTRUCTION.USES_AR.AR)=
              6582                        ADDR(NIL)) THEN
      177     6583    2               TEXT$ = ADDR(Bad_Pointer);
      178     6584    2            ELSE
      179     6585    2               TEXT$ = ADDR(Hardware_Detected_Fault);
      180     6586    2            XB$ENV.CURRENT_SIGNAL = %SIGSEGV;
      181     6587
      182     6588    2         CASE (%(6+%SUBC_IPR#));
      183     6589    2            TEXT$ = ADDR (Illegal_Instruction);
      184     6590    2            XB$ENV.CURRENT_SIGNAL = %SIGILL;
PL6.E3A0      #001=XBI$FAULT File=xbi_fault:6.:XBC3TSI                           FRI 01/06/95 11:37 Page:6    
      185     6591
      186     6592    2         CASE (ELSE); /* All the other hardware generated faults */
      187     6593    2            TEXT$ = ADDR(Hardware_Detected_Fault);
      188     6594    2            XB$ENV.CURRENT_SIGNAL = %SIGSEGV;
      189     6595    2      END;
      190     6596
      191     6597    1      XB$ENV.EXCEPTION_LOCATION = PTR$->B$EXCFR.IC;
      192     6598    1      XB$ENV.EXCEPTION_NAME.SIZE = TEXT$->STRING_TEMPLATE.SIZE;
      193     6599    1      XB$ENV.EXCEPTION_NAME.STRING = TEXT$->STRING_TEMPLATE.STRING;
      194     6600    1      XB$ENV.ERROR_CODE = PTR$->B$EXCFR.ERR;
      195     6601    1      XB$ENV.DCB_NUMBER = 0;
      196     6602
      197     6603    1      CALL XBI$RAISE_SIGNAL;
      198     6604    2   DO INHIBIT;
      199     6605    2      XBI$CLRSTK.V.FRAMES# = XBI$CLRSTK.V.FRAMES# - 1;
      200     6606    2      XBI$CLRSTK.V_ = VECTOR (XBI$CLRSTK.V);
      201     6607    2   END; /* INHIBIT */
      202     6608    1   END XBI$FAULT;

PL6.E3A0      #001=XBI$FAULT File=xbi_fault:6.:XBC3TSI                           FRI 01/06/95 11:37 Page:7    
--  Include file information  --

   xb_signal_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_string_support_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_instruction_opcodes_i6.:XBC3TOU  is referenced.
   B_SEGIDS_C.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI$FAULT.

   Procedure XBI$FAULT requires 251 words for executable code.
   Procedure XBI$FAULT requires 28 words of local(AUTO) storage.

    No errors detected in file xbi_fault:6.:XBC3TSI    .

PL6.E3A0      #001=XBI$FAULT File=xbi_fault:6.:XBC3TSI                           FRI 01/06/95 11:37 Page:8    
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=XBI$FAULT File=xbi_fault:6.:XBC3TSI                           FRI 01/06/95 11:37 Page:9    
          MINI XREF LISTING

B$EXCFR.ASL
      6285**DCL      6285--REDEF
B$EXCFR.ECC
      6285**DCL      6513>>DOCASE
B$EXCFR.ERR
      6299**DCL      6600>>ASSIGN
B$EXCFR.ERR.ERR#
      6299**DCL      6299--REDEF
B$EXCFR.EVID
      6298**DCL      6298--REDEF    6299--REDEF
B$EXCFR.IC
      6286**DCL      6511>>ASSIGN   6532>>ASSIGN   6544>>ASSIGN   6553>>ASSIGN   6571>>ASSIGN   6597>>ASSIGN
B$EXCFR.IR
      6286**DCL      6286--REDEF
B$EXCFR.IRBIT.EXOF
      6287**DCL      6528>>IF
B$EXCFR.IRBIT.EXUF
      6287**DCL      6540>>IF
B$EXCFR.PREVSZ
      6285**DCL      6285--REDEF
B$EXCFR.PRS
      6296**DCL      6579>>IF
B$EXCFR.REGS
      6296**DCL      6521>>ASSIGN
B$EXCFR.SUBC
      6297**DCL      6297--REDEF    6298--REDEF    6298--REDEF    6515>>ASSIGN   6517>>ASSIGN   6519>>ASSIGN
B$TCB.STK$
      6282**DCL      6509>>ASSIGN
B$TCB$
      6350**DCL      6509>>ASSIGN
BAD_POINTER
      6464**DCL      6583--ASSIGN
PL6.E3A0      #001=XBI$FAULT File=xbi_fault:6.:XBC3TSI                           FRI 01/06/95 11:37 Page:10   
DIVISION_BY_ZERO
      6469**DCL      6576--ASSIGN
FAULT#
      6374**DCL      6515<<ASSIGN   6517<<ASSIGN   6519<<ASSIGN   6526>>DOCASE
FPT$TRTN
      6403**DCL      6522>>ASSIGN
FPT$TRTN.V
      6404**DCL      6404--DCLINIT
FPT$TRTN.V.IR#
      6404**DCL      6405--REDEF
FPT_TRTN
      6420**DCL      6522<<ASSIGN   6536<>CALL     6548<>CALL     6557<>CALL     6575<>CALL
FPT_TRTN.REGS_
      6420**DCL      6524<<ASSIGN
FPT_TRTN.V
      6421**DCL      6523--ASSIGN
FPT_TRTN.V.IC#
      6421**DCL      6532<<ASSIGN   6544<<ASSIGN   6553<<ASSIGN   6571<<ASSIGN
FPT_TRTN.V.IR#
      6421**DCL      6422--REDEF    6533<<ASSIGN   6545<<ASSIGN   6554<<ASSIGN   6572<<ASSIGN
FPT_TRTN.V.SETIR#
      6423**DCL      6534<<ASSIGN   6546<<ASSIGN   6555<<ASSIGN   6573<<ASSIGN
FPT_TRTN.V_
      6420**DCL      6523<<ASSIGN
HARDWARE_DETECTED_FAULT
      6474**DCL      6585--ASSIGN   6593--ASSIGN
IC
      6354**DCL      6358--REDEF    6510<<ASSIGN
IC.DISP
      6355**DCL      6511<<ASSIGN
IC$
      6358**DCL      6376--IMP-PTR  6562>>IF       6579>>IF       6579>>IF       6579>>IF       6579>>IF
      6579>>IF
ILLEGAL_INSTRUCTION
      6479**DCL      6589--ASSIGN
INIT_IC
PL6.E3A0      #001=XBI$FAULT File=xbi_fault:6.:XBC3TSI                           FRI 01/06/95 11:37 Page:11   
      6360**DCL      6365--REDEF    6510>>ASSIGN
INSTRUCTION.BIG_OFFSET
      6377**DCL      6378--REDEF
INSTRUCTION.FLAGS.AR
      6387**DCL      6579>>IF
INSTRUCTION.OPCODE
      6381**DCL      6562>>IF
INSTRUCTION.OPCODE.CLASS
      6382**DCL      6579>>IF       6579>>IF       6579>>IF
INSTRUCTION.USES_AR.AR
      6379**DCL      6579>>IF
INTEGER_OVERFLOW
      6449**DCL      6558--ASSIGN
PTR$
      6352**DCL      6509<<ASSIGN   6511>>ASSIGN   6513>>DOCASE   6515>>ASSIGN   6517>>ASSIGN   6519>>ASSIGN
      6521>>ASSIGN   6528>>IF       6532>>ASSIGN   6540>>IF       6544>>ASSIGN   6553>>ASSIGN   6571>>ASSIGN
      6579>>IF       6597>>ASSIGN   6600>>ASSIGN
REAL_OVERFLOW
      6454**DCL      6537--ASSIGN
REAL_UNDERFLOW
      6459**DCL      6549--ASSIGN
SIGVEC.SV_HANDLER
      6274**DCL      6275--REDEF
STRING_TEMPLATE.SIZE
      6444**DCL      6598>>ASSIGN
STRING_TEMPLATE.STRING
      6445**DCL      6599>>ASSIGN
TEXT$
      6484**DCL      6508<<ASSIGN   6537<<ASSIGN   6549<<ASSIGN   6558<<ASSIGN   6576<<ASSIGN   6583<<ASSIGN
      6585<<ASSIGN   6589<<ASSIGN   6593<<ASSIGN   6598>>ASSIGN   6599>>ASSIGN
VLP_REGS
      6437**DCL      6521<<ASSIGN   6524--ASSIGN
VLP_REGS.A
      6438**DCL      6530<<ASSIGN   6530>>ASSIGN   6542<<ASSIGN   6563<<ASSIGN   6568<<ASSIGN   6568>>ASSIGN
VLP_REGS.E
      6438**DCL      6529<<ASSIGN   6541<<ASSIGN   6567<<ASSIGN
PL6.E3A0      #001=XBI$FAULT File=xbi_fault:6.:XBC3TSI                           FRI 01/06/95 11:37 Page:12   
VLP_REGS.Q
      6438**DCL      6531<<ASSIGN   6543<<ASSIGN   6564<<ASSIGN   6569<<ASSIGN
VLP_REGS.XREGS
      6437**DCL      6437--REDEF
X66_TRTN
      6279**DCL-ENT  6536--CALL     6548--CALL     6557--CALL     6575--CALL
XB$ENV.CURRENT_SIGNAL
      6247**DCL      6538<<ASSIGN   6550<<ASSIGN   6559<<ASSIGN   6577<<ASSIGN   6586<<ASSIGN   6590<<ASSIGN
      6594<<ASSIGN
XB$ENV.DCB_NUMBER
      6257**DCL      6601<<ASSIGN
XB$ENV.ERROR_CODE
      6251**DCL      6600<<ASSIGN
XB$ENV.EXCEPTION_LOCATION
      6258**DCL      6597<<ASSIGN
XB$ENV.EXCEPTION_NAME.SIZE
      6249**DCL      6598<<ASSIGN
XB$ENV.EXCEPTION_NAME.STRING
      6250**DCL      6599<<ASSIGN
XB$ENV.SIGNAL_HANDLER
      6259**DCL      6535>>IF       6547>>IF       6556>>IF       6574>>IF
XBI$CLRSTK.V
      6499**DCL      6499--DCLINIT  6505--ASSIGN   6606--ASSIGN
XBI$CLRSTK.V.FRAMES#
      6499**DCL      6504<<ASSIGN   6504>>ASSIGN   6605<<ASSIGN   6605>>ASSIGN
XBI$CLRSTK.V_
      6499**DCL      6505<<ASSIGN   6606<<ASSIGN
XBI$RAISE_SIGNAL
      6486**DCL-ENT  6369--DCLINIT  6603--CALL
XBI$RAISE_SIGNAL$
      6369**DCL      6370--REDEF
