

CC.C02    File=xb_tsearch:c.:XBC3TSI                                                Fri Jan  6 1995  Page=1  
        1         1             /*M*  tsearch  tfind tdelete twalk -- Insert/find/delete/walk items in a binar
                               y tree */
        2         2
        3         3             #include <stdio.h>
        4         4             #include <stdlib.h>
        5         5             #include <search.h>
        6         6
        7         7             struct   __node {
        8         8    1           char  *key;
        9         9    1           struct __node  *left;
       10        10    1           struct __node  *right;
       11        11    1        };
       12        12
       13        13             static void visit(struct __node *, void(*)(), int);
       14        14
       15        15             /*F*    NAME:    tsearch
       16        16                     PURPOSE:  The tsearch function is a binary search tree routine
       17        17                               generalized from Knuth (6.2.2) Algorithm T and D.
       18        18                     DESCRIPTION:
       19        19                               This function returns a pointer into a tree
       20        20                               indicating where the data can be found.  If the
       21        21                               data can not be found it is added into the binary
       22        22                               tree.  The key parameter points to the datum
       23        23                               to be found in the tree.  The rootp parameter
       24        24                               points to the address of the root of the tree.
       25        25                               The compar is a compare function that the
       26        26                               user must supply.  It is called with two arguments
       27        27                               that point to the elements to be compared.
       28        28                               The function must return 0 if the elements are
       29        29                               equal otherwise less than zero if less than and
       30        30                               greater than zero if greater.
       31        31
       32        32                               Upon successful completion the function returns a
       33        33                               pointer into the tree where the datum may be
       34        34                               found.
       35        35             */
       36        36
CC.C02    File=xb_tsearch:c.:XBC3TSI                                                Fri Jan  6 1995  Page=2  
       37        37             char *
       38        38             tsearch(char *key, char **rootp, int (*compar)()) {
       39        39    1           struct   __node   *temp = (struct __node *) *rootp;
       40        40    1           struct   __node   *parent = (struct __node *) *rootp;
       41        41    1           int   val;
       42        42    1
       43        43    1        /*    Time to traverse through the tree and see if we can find the
       44        44    1              specified key.                                                */
       45        45    1
       46        46    1           while (temp) {
       47        47    2              if ((val = compar(key, temp->key)) == 0) {
       48        48    3                 return ((char *) temp);
       49        49    3              }
       50        50    2              else if (val < 0) {
       51        51    3                 parent = temp;
       52        52    3                 temp = temp->left;
       53        53    3              }
       54        54    2              else {
       55        55    3                 parent = temp;
       56        56    3                 temp = temp->right;
       57        57    3              }
       58        58    2           }
       59        59    1
       60        60    1        /*    If we got here that means that we have not found the item
       61        61    1              in the binary tree.  So we gotta allocate it and stuff the
       62        62    1              data into this allocation.                                    */
       63        63    1
       64        64    1           temp = (struct __node *) malloc(sizeof(struct __node));
       65        65    1           if (temp) {
       66        66    2              temp->key = key;
       67        67    2              temp->left = temp->right = (struct __node *) 0;
       68        68    2              if (*rootp) {
       69        69    3                 if (val < 0) {
       70        70    4                    parent->left = temp;
       71        71    4                 }
       72        72    3                 else {
       73        73    4                    parent->right = temp;
CC.C02    File=xb_tsearch:c.:XBC3TSI                                                Fri Jan  6 1995  Page=3  
       74        74    4                 }
       75        75    3              }
       76        76    2              else {
       77        77    3                 *rootp = (char *) temp;
       78        78    3              }
       79        79    2              return ((char *) temp);
       80        80    2           }
       81        81    1
       82        82    1        /*    We got some type of error if we got here so we will return a
       83        83    1              NULL pointer.  We really should not get here.                 */
       84        84    1
       85        85    1           return ((char *) 0);
       86        86    1
       87        87    1        }
       88        88
       89        89             /*F*    NAME:    tfind
       90        90                     PURPOSE:  The tfind function is a binary search tree routine
       91        91                               generalized from Knuth (6.2.2) Algorithm T and D.
       92        92                     DESCRIPTION:
       93        93                               This function returns a pointer into a tree
       94        94                               indicating where the data can be found.  If the
       95        95                               data can not be found a NULL pointer is returned.
       96        96                               The key parameter points to the datum
       97        97                               to be found in the tree.  The rootp parameter
       98        98                               points to the address of the root of the tree.
       99        99                               The compar is a compare function that the
      100       100                               user must supply.  It is called with two arguments
      101       101                               that point to the elements to be compared.
      102       102                               The function must return 0 if the elements are
      103       103                               equal otherwise less than zero if less than and
      104       104                               greater than zero if greater.
      105       105
      106       106                               Upon successful completion the function returns a
      107       107                               pointer into the tree where the datum may be
      108       108                               found.
      109       109             */
      110       110
CC.C02    File=xb_tsearch:c.:XBC3TSI                                                Fri Jan  6 1995  Page=4  
      111       111             char *
      112       112             tfind(char *key, char **rootp, int (*compar)()) {
      113       113    1           struct   __node   *temp = (struct __node *) *rootp;
      114       114    1           int   val;
      115       115    1
      116       116    1        /*    Time to traverse through the tree and see if we can find the
      117       117    1              specified key.                                                */
      118       118    1
      119       119    1           while (temp) {
      120       120    2              if ((val = compar(key, temp->key)) == 0) {
      121       121    3                 return ((char *) temp);
      122       122    3              }
      123       123    2              else if (val < 0) {
      124       124    3                 temp = temp->left;
      125       125    3              }
      126       126    2              else {
      127       127    3                 temp = temp->right;
      128       128    3              }
      129       129    2           }
      130       130    1
      131       131    1
      132       132    1        /*    We got some type of error if we got here so we will return a
      133       133    1              NULL pointer.  We get here when the datum ain't there.        */
      134       134    1
      135       135    1           return ((char *) 0);
      136       136    1
      137       137    1        }
      138       138
      139       139             /*F*    NAME:    tdelete
      140       140                     PURPOSE:  The tdelete function is a binary search tree routine
      141       141                               generalized from Knuth (6.2.2) Algorithm T and D.
      142       142                     DESCRIPTION:
      143       143                               This function searches the tree for datum pointed
      144       144                               to by key. If the datum can be found it will be
      145       145                               deleted from the tree.  If the data can not be
      146       146                               found a NULL pointer is returned.  The rootp
      147       147                               parameter points to the address of the root of the
CC.C02    File=xb_tsearch:c.:XBC3TSI                                                Fri Jan  6 1995  Page=5  
      148       148                               tree.  If the root is the node to be deleted, rootp
      149       149                               is updated to reflect the new root node.
      150       150                               The compar is a compare function that the
      151       151                               user must supply.  It is called with two arguments
      152       152                               that point to the elements to be compared.
      153       153                               The function must return 0 if the elements are
      154       154                               equal otherwise less than zero if less than and
      155       155                               greater than zero if greater.
      156       156
      157       157                               Upon successful completion the function returns a
      158       158                               pointer to the parent into the tree where the datum
      159       159                               was deleted, otherwise a null pointer is returned.
      160       160             */
      161       161
      162       162             char *
      163       163             tdelete(char *key, char **rootp, int (*compar)()) {
      164       164    1           struct   __node   *q = (struct __node *) *rootp;
      165       165    1           struct   __node   *parent = (struct __node *) *rootp;
      166       166    1           struct   __node   *r;
      167       167    1           struct   __node   *s;
      168       168    1           struct   __node   *t;
      169       169    1           int   val;
      170       170    1
      171       171    1        /*    Time to traverse through the tree and see if we can find the
      172       172    1              specified key.                                                */
      173       173    1
      174       174    1           while (q) {
      175       175    2              if ((val = compar(key, q->key)) == 0) {
      176       176    3
      177       177    3        /*    Now that we found the item to delete we gotta delete it.      */
      178       178    3
      179       179    3                 t = q;
      180       180    3                 if (!t->right) {
      181       181    4                    q = t->left;
      182       182    4                 }
      183       183    3                 else {
      184       184    4                    r = t->right;
CC.C02    File=xb_tsearch:c.:XBC3TSI                                                Fri Jan  6 1995  Page=6  
      185       185    4                    if (!r->left) {
      186       186    5                       r->left = t->left;
      187       187    5                       q = r;
      188       188    5                    }
      189       189    4                    else {
      190       190    5                       s = r->left;
      191       191    5                       while (s->left) {
      192       192    6                          r = s;
      193       193    6                          s = r->left;
      194       194    6                       }
      195       195    5                       s->left = t->left;
      196       196    5                       r->left = s->right;
      197       197    5                       s->right = t->right;
      198       198    5                       q = s;
      199       199    5                    }
      200       200    4                 }
      201       201    3                 if ((char *) t == *rootp) {
      202       202    4                    *rootp = (char *) q;
      203       203    4                 }
      204       204    3                 else if (t == parent->left) {
      205       205    4                    parent->left = q;
      206       206    4                 }
      207       207    3                 else if (t == parent->right) {
      208       208    4                    parent->right = q;
      209       209    4                 }
      210       210    3                 free(t);
      211       211    3                 return ((char *) parent);
      212       212    3              }
      213       213    2              else if (val < 0) {
      214       214    3                 parent = q;
      215       215    3                 q = q->left;
      216       216    3              }
      217       217    2              else {
      218       218    3                 parent = q;
      219       219    3                 q = q->right;
      220       220    3              }
      221       221    2           }
CC.C02    File=xb_tsearch:c.:XBC3TSI                                                Fri Jan  6 1995  Page=7  
      222       222    1
      223       223    1
      224       224    1        /*    We got some type of error if we got here so we will return a
      225       225    1              NULL pointer.  We get here when the datum ain't there.        */
      226       226    1
      227       227    1           return ((char *) 0);
      228       228    1
      229       229    1        }
      230       230
      231       231             /*F*    NAME:    twalk
      232       232                     PURPOSE:  The twalk function is a binary search tree routine
      233       233                               generalized from Knuth (6.2.2) Algorithm T and D.
      234       234                     DESCRIPTION:
      235       235                               This function traverses a binary search tree with
      236       236                               root being the root of the tree to be traversed.
      237       237                               The name of the routine to be invoked at each node
      238       238                               is action.  This routine in turn is called with
      239       239                               3 arguments.  The first argument is the address of
      240       240                               the node being visited.  The second argument is a
      241       241                               value from the enumeration data typedef enum {
      242       242                               preorder, postorder, enorder, leaf} VISIT,;
      243       243                               depending on whether it is the first, second or
      244       244                               third time the node has been visited (during a
      245       245                               depth-first, left-to-right traversal of the tree).
      246       246                               The third argument is the level of the node in the
      247       247                               tree, with the root level being level zero.
      248       248
      249       249                               This function returns no value.
      250       250             */
      251       251
      252       252             void
      253       253             twalk(char *root, void (*action)()) {
      254       254    1           int   level;
      255       255    1
      256       256    1        /*    Time to traverse the entire tree in an inorder fashion        */
      257       257    1
      258       258    1           if (root) {
CC.C02    File=xb_tsearch:c.:XBC3TSI                                                Fri Jan  6 1995  Page=8  
      259       259    2              level = 0;
      260       260    2              visit((struct __node *) root, action, level);
      261       261    2           }
      262       262    1        }
      263       263
      264       264             /*F*    NAME:    visit
      265       265                     PURPOSE:  The visit function is the recursive function used to
      266       266                               visit all the nodes of a tree. (called from twalk).
      267       267                     DESCRIPTION:
      268       268                               This function traverses a binary search tree
      269       269                               recursively for an inorder traversal.  It is called
      270       270                               by twalk, and is its workhorse.
      271       271
      272       272                               This function returns no value.
      273       273             */
      274       274
      275       275             static void
      276       276             visit(struct __node *node, void (*action)(), int level) {
      277       277    1
      278       278    1        /*    Check to see if the node is a leaf if so we be done           */
      279       279    1
      280       280    1           if ((!node->left) && (!node->right)) {
      281       281    2              action(&(node->key), leaf, level);
      282       282    2           }
      283       283    1           else {
      284       284    2              action(&(node->key), preorder, level);
      285       285    2              if (node->left) {
      286       286    3                 visit(node->left, action, ++level);
      287       287    3                 level--;
      288       288    3              }
      289       289    2              action(&(node->key), postorder, level);
      290       290    2              if (node->right) {
      291       291    3                 visit(node->right, action, ++level);
      292       292    3                 level--;
      293       293    3              }
      294       294    2              action(&(node->key), endorder, level);
      295       295    2           }
CC.C02    File=xb_tsearch:c.:XBC3TSI                                                Fri Jan  6 1995  Page=9  
      296       296    1        }
---  Include file information  ---

   stdio:h.:XBC3TOU. is referenced
   stdlib:h.:XBC3TOU. is referenced
   search:h.:XBC3TOU. is referenced

No diagnostics were issued in the file xb_tsearch:c.:XBC3TSI
