
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        XBI$PRINT: PROC (format, P_argument_block$, P_argument_block_size, F, S, result);
        7        7           /*D*  NAME: XBI$PRINT
        8        8                 PURPOSE: Called by fprintf, printf and sprintf to do the "real" work.
        9        9           */
       10       10
       11       11           %INCLUDE xb_stdio_i6;
       12      254           %INCLUDE xb_errors_i6;
       13      325           %INCLUDE B$TABLES_C;
       14      433
       15      434    1      DCL format                 CHAR (format_length);
       16      435    1      DCL P_argument_block$      PTR;
       17      436    1      DCL P_argument_block_size  SBIN;
       18      437           %File_Header (Name=F, Stclass=" ");
       19      549    1      DCL S                      CHAR (16384);
       20      550    1      DCL result                 SBIN;
       21      551
       22      552    1      DCL format_length          SBIN;
       23      553    1      DCL actual_width           SBIN;
       24      554    1      DCL argument_block$        PTR;
       25      555    1      DCL argument_block_size    SBIN;
       26      556    1      DCL argument_words_used    SBIN;
       27      557    1      DCL chars_flushed          SBIN;
       28      558    1      DCL digits                 SBIN;
       29      559    1      DCL double_value           BIT (72) DALIGNED;
       30      560    1      DCL exponent_digits        UBIN;
       31      561    1      DCL field_next_char        SBIN;
       32      562           %EQU field_string_size     = 1024;
       33      563    1      DCL field_string           CHAR (%field_string_size);
       34      564    1      DCL format_index           SBIN;
       35      565    1      DCL format_next_char       SBIN;
       36      566    1      DCL junk                   SBIN;
       37      567    1      DCL left_justify           BIT(1);
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:2    
       38      568    1      DCL negative               BIT(1);
       39      569           %B$SR_NON_DEC (NAME=XBI$non_digit_table);
       40      573           %B$SR_NON_ZERO (NAME=XBI$non_zero_table);
       41      577    1      DCL XBI$null_or_percent_table (0:511) UBIN BYTE UNAL SYMREF READONLY;
       42      578           %EQU out_buf_size          = 1024;
       43      579    1      DCL out_buf                CHAR (%(out_buf_size + 1));
       44      580    1      DCL out_next_char          SBIN;
       45      581    1      DCL pad_chars              SBIN;
       46      582    1      DCL precision              SBIN;
       47      583    1      DCL result$                PTR;
       48      584    1      DCL result_next_char       SBIN;
       49      585    1      DCL result_string          CHAR (actual_width) BASED (result$);
       50      586    1      DCL S_next_char            SBIN;
       51      587    1      DCL table_value            SBIN;
       52      588    1      DCL use_minus_space_sign   BIT(1);
       53      589    1      DCL use_plus_minus_sign    BIT(1);
       54      590    1      DCL use_variant            BIT(1);
       55      591    1      DCL use_zero_pad_character BIT(1);
       56      592    1      DCL width                  SBIN;
       57      593
       58      594    1      DCL XBI$STRLEN             ENTRY (2);
       59      595    1      DCL XBI_SET_ERRNO          ENTRY (1);
       60      596    1      DCL XBI_SET_STREAM_ERRNO   ENTRY (2);
       61      597    1      DCL XBI$FPUTS              ENTRY (3);
       62      598    1      DCL XPN_7DTOLS             ENTRY (5) ALTRET;
       63      599    1      DCL XPN_5PREPARE_FOR_FIXED_FMT   ENTRY (4) ALTRET;
       64      600    1      DCL XPN_7FLJ               ENTRY (7) ALTRET;
       65      601    1      DCL XPN_5PREPARE_FOR_EXP_FMT ENTRY (4) ALTRET;
       66      602    1      DCL XPN_7ERJE1             ENTRY (7) ALTRET;
       67      603    1      DCL XBI$FFLUSH             ENTRY (1) ALTRET;
       68      604
       69      605    1      set_errno: PROC (error);
       70      606    2         DCL error         UBIN;
       71      607
       72      608    2         IF ADDR(F) ~= ADDR(NIL) THEN
       73      609    2            CALL XBI_SET_STREAM_ERRNO (F, error);
       74      610    2         ELSE
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:3    
       75      611    2            CALL XBI_SET_ERRNO (error);
       76      612    2      END set_errno;
       77      613
       78      614    1      flush_out_buf: PROC ALTRET;
       79      615    2         DCL fputs_result           SBIN;
       80      616
       81      617    2         IF out_next_char = 0 THEN RETURN;
       82      618    2         chars_flushed = chars_flushed + out_next_char;
       83      619    3         IF ADDR(F) = ADDR(NIL) THEN DO;
       84      620    3            SUBSTR (S, S_next_char, out_next_char) = SUBSTR (out_buf, 0,
       85      621    3               out_next_char);
       86      622    3            S_next_char = S_next_char + out_next_char;
       87      623    3         END; ELSE DO;
       88      624    3            SUBSTR (out_buf, out_next_char, 1) = BINASC (0);
       89      625    3            IF F.is_text THEN
       90      626    3               CALL XBI$FPUTS (out_buf, F, fputs_result);
       91      627    3            ELSE
       92      628    3               CALL XBI$FPUTB (out_buf, F, out_next_char, fputs_result);
       93      629    4            IF fputs_result ~= 0 THEN DO;
       94      630    4               ALTRETURN;
       95      631    4            END;
       96      632    3         END;
       97      633    2         out_next_char = 0;
       98      634    2      END flush_out_buf;
       99      635
      100      636    1      get_word_argument: PROC (value) ALTRET;
      101      637    2         DCL value                  BIT(36) ALIGNED;
      102      638    2         DCL based_bit36 BIT(36) ALIGNED BASED;
      103      639
      104      640    3         IF argument_words_used >= argument_block_size THEN DO;
      105      641    3            CALL set_errno (ERR$NO_SUCH_ARGUMENT);
      106      642    3            ALTRETURN;
      107      643    3         END;
      108      644    2         value = argument_block$ -> based_bit36;
      109      645    2         argument_block$ = PINCRW (argument_block$, 1);
      110      646    2         argument_words_used = argument_words_used + 1;
      111      647    2      END get_word_argument;
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:4    
      112      648
      113      649    1      get_double_argument: PROC (value) ALTRET;
      114      650    2         DCL value                  BIT(72) DALIGNED;
      115      651    2         DCL based_bit72 BIT(72) DALIGNED BASED;
      116      652    2         DCL even$                  PTR;
      117      653    2         DCL 1 even_pointer REDEF even$ ALIGNED,
      118      654    2            2  word_offset          UBIN(18) UNAL,
      119      655    2            2  *                    BIT(18) UNAL;
      120      656
      121      657              /* double values have to be double word aligned so there may
      122      658                 be a filler word in the argument block to skip. */
      123      659
      124      660    2         even$ = argument_block$;
      125      661    3         IF MOD (even_pointer.word_offset, 2) ~= 0 THEN DO;
      126      662    3            argument_words_used = argument_words_used + 1;
      127      663    3            argument_block$ = PINCRW (argument_block$, 1);
      128      664    3         END;
      129      665
      130      666    3         IF argument_words_used + 1 >= argument_block_size THEN DO;
      131      667    3            CALL set_errno (ERR$NO_SUCH_ARGUMENT);
      132      668    3            ALTRETURN;
      133      669    3         END;
      134      670
      135      671    2         value = argument_block$ -> based_bit72;
      136      672    2         argument_block$ = PINCRW (argument_block$, 2);
      137      673    2         argument_words_used = argument_words_used + 2;
      138      674    2      END get_double_argument;
      139      675
      140      676    1      append_result_string: PROC ALTRET;
      141      677    2         DCL pad_char                  SBIN;
      142      678    2         DCL i                         SBIN;
      143      679
      144      680    2         pad_char = MAXIMUM (0, width - actual_width);
      145      681    3         IF ~left_justify AND pad_char > 0 THEN DO;
      146      682    4            DO WHILE out_next_char + pad_char > %out_buf_size;
      147      683    4               SUBSTR (out_buf, out_next_char) = ' ';
      148      684    4               pad_char = pad_char - (%out_buf_size - out_next_char);
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:5    
      149      685    4               out_next_char = %out_buf_size;
      150      686    4               CALL flush_out_buf ALTRET (error_return);
      151      687    4            END;
      152      688    3            SUBSTR (out_buf, out_next_char, pad_char) = ' ';
      153      689    3            out_next_char = out_next_char + pad_char;
      154      690    3         END;
      155      691
      156      692    2         result_next_char = 0;
      157      693    3         DO WHILE out_next_char + (actual_width - result_next_char) > %out_buf_size;
      158      694    3            SUBSTR (out_buf, out_next_char) = SUBSTR (result_string, result_next_char);
      159      695    3            result_next_char = result_next_char + (%out_buf_size - out_next_char);
      160      696    3            out_next_char = %out_buf_size;
      161      697    3            CALL flush_out_buf ALTRET (error_return);
      162      698    3         END;
      163      699    2         i = actual_width - result_next_char;
      164      700    2         SUBSTR (out_buf, out_next_char, i) = SUBSTR (result_string, result_next_char,
               700                  i);
      165      701    2         out_next_char = out_next_char + i;
      166      702
      167      703    3         IF left_justify AND pad_char > 0 THEN DO;
      168      704    4            DO WHILE out_next_char + pad_char > %out_buf_size;
      169      705    4               SUBSTR (out_buf, out_next_char) = ' ';
      170      706    4               pad_char = pad_char - (%out_buf_size - out_next_char);
      171      707    4               out_next_char = %out_buf_size;
      172      708    4               CALL flush_out_buf ALTRET (error_return);
      173      709    4            END;
      174      710    3            SUBSTR (out_buf, out_next_char, pad_char) = ' ';
      175      711    3            out_next_char = out_next_char + pad_char;
      176      712    3         END;
      177      713
      178      714    2         RETURN;
      179      715
      180      716    2      error_return:
      181      717    2         ALTRETURN;
      182      718    2      END append_result_string;
      183      719
      184      720    1      add_pad_chars_to_field: PROC (pad_chars);
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:6    
      185      721    2         DCL pad_chars              SBIN;
      186      722    2         DCL i                      SBIN;
      187      723
      188      724    3         DO i = 1 to pad_chars;
      189      725    3            SUBSTR (field_string, field_next_char, 1) = '0';
      190      726    3            field_next_char = field_next_char + 1;
      191      727    3         END;
      192      728    2      END add_pad_chars_to_field;
      193      729
      194      730    1      format_decimal_integer: PROC ALTRET;
      195      731    2         DCL minus_maxint_bcd       CHAR (0) CONSTANT INIT ('34359738368');
      196      732    2         DCL temp_len               SBIN;
      197      733    2         DCL temp_start             SBIN;
      198      734              %SET temp_str_size         = 12;
      199      735    2         DCL temp_str               CHAR (%temp_str_size);
      200      736    2         DCL value                  SBIN;
      201      737    2         DCL maxneg                 SBIN CONSTANT INIT(BITBIN('400000000000'O));
      202      738
      203      739    3         IF (use_zero_pad_character) AND (precision >= 0) THEN DO;
      204      740    3            use_zero_pad_character = '0'B;
      205      741    3         END;
      206      742
      207      743    2         IF precision < 0 THEN precision = 1;
      208      744
      209      745    2         CALL get_word_argument (value) ALTRET (error_return);
      210      746
      211      747    3         IF precision = 0 AND value = 0 THEN DO;
      212      748    3            actual_width = 0;
      213      749    3            result$ = ADDR(field_string);
      214      750    3            RETURN;
      215      751    3         END;
      216      752
      217      753    3         IF value = maxneg THEN DO;
      218      754                  /* negating the smallest negative number on a 2's complement machine
      219      755                    don't work so hot.  This value has to be special cased. */
      220      756    3            negative = '1'B;
      221      757    3            temp_str = minus_maxint_bcd;
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:7    
      222      758    3            temp_len = LENGTHC (minus_maxint_bcd);
      223      759    3            temp_start = 0;
      224      760    3         END; ELSE DO;
      225      761    4            IF value < 0 THEN DO;
      226      762    4               negative = '1'B;
      227      763    4               value = -value;
      228      764    3            END; ELSE
      229      765    3               negative = '0'B;
      230      766    3            CALL BINCHAR (temp_str, value);
      231      767    3            CALL SEARCH (temp_start, junk, XBI$non_zero_table, temp_str)
      232      768    4               WHENRETURN DO;
      233      769    4                  temp_len = %temp_str_size - temp_start;
      234      770    4               END;
      235      771    4               WHENALTRETURN DO;
      236      772    4                  temp_start = %temp_str_size - 1;
      237      773    4                  temp_len = 1;
      238      774    4               END;
      239      775    3         END;
      240      776    2         field_next_char= 0;
      241      777    3         IF negative THEN DO;
      242      778    3            SUBSTR (field_string, 0, 1) = '-';
      243      779    3            field_next_char = 1;
      244      780    3         END; ELSE DO;
      245      781    4            IF use_plus_minus_sign THEN DO;
      246      782    4               SUBSTR (field_string, 0, 1) = '+';
      247      783    4               field_next_char = 1;
      248      784    4            END; ELSE DO;
      249      785    5               IF use_minus_space_sign THEN DO;
      250      786    5                  SUBSTR (field_string, 0, 1) = ' ';
      251      787    5                  field_next_char = 1;
      252      788    5               END;
      253      789    4            END;
      254      790    3         END;
      255      791
      256      792    2         pad_chars = maximum (0, precision - temp_len);
      257      793    2         IF use_zero_pad_character AND (pad_chars = 0) THEN
      258      794    2            pad_chars = MAXIMUM (width - (field_next_char + temp_len), pad_chars);
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:8    
      259      795
      260      796    3         IF field_next_char + pad_chars + temp_len > %field_string_size THEN DO;
      261      797    3            CALL set_errno (ERR$FIELD_TOO_BIG);
      262      798    3            ALTRETURN;
      263      799    3         END;
      264      800
      265      801    2         IF pad_chars > 0 THEN CALL add_pad_chars_to_field (pad_chars);
      266      802
      267      803    2         SUBSTR (field_string, field_next_char, temp_len) = SUBSTR (temp_str,
      268      804    2            temp_start, temp_len);
      269      805    2         actual_width = field_next_char + temp_len;
      270      806    2         result$ = ADDR (field_string);
      271      807    2         RETURN;
      272      808
      273      809    2      error_return:
      274      810    2         ALTRETURN;
      275      811    2      END format_decimal_integer;
      276      812
      277      813    1      format_octal_integer: PROC ALTRET;
      278      814    2         DCL temp_len               SBIN;
      279      815    2         DCL temp_start             SBIN;
      280      816              %SET temp_str_size         = 12;
      281      817    2         DCL temp_str               CHAR (%temp_str_size);
      282      818    2         DCL value                  UBIN;
      283      819    2         DCL octets (0:11) REDEF value UBIN(3) UNAL;
      284      820              %EQU ord_zero              = %ASCBIN ('0');
      285      821
      286      822    2         IF (use_zero_pad_character) AND (precision >= 0) AND
      287      823    3            (NOT use_variant) THEN DO;
      288      824    3            use_zero_pad_character = '0'B;
      289      825    3         END;
      290      826
      291      827    2         IF precision < 0 THEN precision = 1;
      292      828
      293      829    2         CALL get_word_argument (value) ALTRET (error_return);
      294      830
      295      831    3         IF precision = 0 AND value = 0 THEN DO;
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:9    
      296      832    3            actual_width = 0;
      297      833    3            result$ = ADDR(field_string);
      298      834    3            RETURN;
      299      835    3         END;
      300      836
      301      837    2         SUBSTR (temp_str, 0, 1) = BINASC (octets (0) + %ord_zero);
      302      838    2         SUBSTR (temp_str, 1, 1) = BINASC (octets (1) + %ord_zero);
      303      839    2         SUBSTR (temp_str, 2, 1) = BINASC (octets (2) + %ord_zero);
      304      840    2         SUBSTR (temp_str, 3, 1) = BINASC (octets (3) + %ord_zero);
      305      841    2         SUBSTR (temp_str, 4, 1) = BINASC (octets (4) + %ord_zero);
      306      842    2         SUBSTR (temp_str, 5, 1) = BINASC (octets (5) + %ord_zero);
      307      843    2         SUBSTR (temp_str, 6, 1) = BINASC (octets (6) + %ord_zero);
      308      844    2         SUBSTR (temp_str, 7, 1) = BINASC (octets (7) + %ord_zero);
      309      845    2         SUBSTR (temp_str, 8, 1) = BINASC (octets (8) + %ord_zero);
      310      846    2         SUBSTR (temp_str, 9, 1) = BINASC (octets (9) + %ord_zero);
      311      847    2         SUBSTR (temp_str, 10, 1) = BINASC (octets (10) + %ord_zero);
      312      848    2         SUBSTR (temp_str, 11, 1) = BINASC (octets (11) + %ord_zero);
      313      849    2         CALL SEARCH (temp_start, junk, XBI$non_zero_table, temp_str)
      314      850    3            WHENRETURN DO;
      315      851    3               temp_len = %temp_str_size - temp_start;
      316      852    3            END;
      317      853    3            WHENALTRETURN DO;
      318      854    3               temp_start = %temp_str_size - 1;
      319      855    3               temp_len = 1;
      320      856    3            END;
      321      857
      322      858    2         field_next_char= 0;
      323      859    3         IF use_variant THEN DO;
      324      860    3            SUBSTR (field_string, 0, 1) = '0';
      325      861    3            field_next_char = 1;
      326      862    3         END;
      327      863
      328      864    2         pad_chars = maximum (0, precision - temp_len);
      329      865    2         IF use_zero_pad_character AND (pad_chars = 0) THEN
      330      866    2            pad_chars = MAXIMUM (width - (field_next_char + temp_len), pad_chars);
      331      867
      332      868    3         IF field_next_char + pad_chars + temp_len > %field_string_size THEN DO;
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:10   
      333      869    3            CALL set_errno (ERR$FIELD_TOO_BIG);
      334      870    3            ALTRETURN;
      335      871    3         END;
      336      872
      337      873    2         IF pad_chars > 0 THEN CALL add_pad_chars_to_field (pad_chars);
      338      874
      339      875    2         SUBSTR (field_string, field_next_char, temp_len) = SUBSTR (temp_str,
      340      876    2            temp_start, temp_len);
      341      877    2         actual_width = field_next_char + temp_len;
      342      878    2         result$ = ADDR (field_string);
      343      879    2         RETURN;
      344      880
      345      881    2      error_return:
      346      882    2         ALTRETURN;
      347      883    2      END format_octal_integer;
      348      884
      349      885    1      format_unsigned_integer: PROC ALTRET;
      350      886    2         DCL digit                  UBIN;
      351      887    2         DCL temp_len               SBIN;
      352      888    2         DCL temp_start             SBIN;
      353      889              %SET temp_str_size         = 11;
      354      890    2         DCL temp_str               CHAR (%temp_str_size);
      355      891    2         DCL value                  UBIN;
      356      892    2         DCL ten                    UBIN CONSTANT INIT (10);
      357      893
      358      894    3         IF (use_zero_pad_character) AND (precision >= 0) THEN DO;
      359      895    3            use_zero_pad_character = '0'B;
      360      896    3         END;
      361      897
      362      898    2         IF precision < 0 THEN precision = 1;
      363      899
      364      900    2         CALL get_word_argument (value) ALTRET (error_return);
      365      901
      366      902    3         IF precision = 0 AND value = 0 THEN DO;
      367      903    3            actual_width = 0;
      368      904    3            result$ = ADDR(field_string);
      369      905    3            RETURN;
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:11   
      370      906    3         END;
      371      907
      372      908    2         temp_start = %temp_str_size;
      373      909    2         temp_len = 0;
      374      910    3         DO WHILE value ~= 0;
      375      911    3            digit = MOD (value, ten);
      376      912    3            temp_start = temp_start - 1;
      377      913    3            SUBSTR (temp_str, temp_start, 1) = BINASC (digit + %ASCBIN ('0'));
      378      914    3            temp_len = temp_len + 1;
      379      915    3            value = value / ten;
      380      916    3         END;
      381      917    3         IF temp_len = 0 THEN DO;
      382      918    3            temp_start = temp_start - 1;
      383      919    3            SUBSTR (temp_str, temp_start, 1) = '0';
      384      920    3            temp_len = 1;
      385      921    3         END;
      386      922
      387      923    2         field_next_char= 0;
      388      924
      389      925    2         pad_chars = maximum (0, precision - temp_len);
      390      926    2         IF use_zero_pad_character AND (pad_chars = 0) THEN
      391      927    2            pad_chars = MAXIMUM (width - (field_next_char + temp_len), pad_chars);
      392      928
      393      929    3         IF field_next_char + pad_chars + temp_len > %field_string_size THEN DO;
      394      930    3            CALL set_errno (ERR$FIELD_TOO_BIG);
      395      931    3            ALTRETURN;
      396      932    3         END;
      397      933
      398      934    2         IF pad_chars > 0 THEN CALL add_pad_chars_to_field (pad_chars);
      399      935
      400      936    2         SUBSTR (field_string, field_next_char, temp_len) = SUBSTR (temp_str,
      401      937    2            temp_start, temp_len);
      402      938    2         actual_width = field_next_char + temp_len;
      403      939    2         result$ = ADDR (field_string);
      404      940    2         RETURN;
      405      941
      406      942    2      error_return:
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:12   
      407      943    2         ALTRETURN;
      408      944    2      END format_unsigned_integer;
      409      945
      410      946    1      format_hex_integer: PROC (use_lc_digits) ALTRET;
      411      947    2         DCL use_lc_digits          BIT(1);
      412      948
      413      949    2         DCL i                      SBIN;
      414      950    2         DCL lc_digits              CHAR(16) CONSTANT INIT('0123456789abcdef');
      415      951    2         DCL temp_len               SBIN;
      416      952    2         DCL temp_start             SBIN;
      417      953              %SET temp_str_size         = 9;
      418      954    2         DCL temp_str               CHAR (%temp_str_size);
      419      955    2         DCL value                  UBIN;
      420      956    2         DCL quads (0:8) REDEF value UBIN(4) UNAL;
      421      957    2         DCL uc_digits              CHAR(16) CONSTANT INIT('0123456789ABCDEF');
      422      958
      423      959
      424      960    3         IF (use_zero_pad_character) AND (precision >= 0) THEN DO;
      425      961    3            use_zero_pad_character = '0'B;
      426      962    3         END;
      427      963
      428      964    2         IF precision < 0 THEN precision = 1;
      429      965
      430      966    2         CALL get_word_argument (value) ALTRET (error_return);
      431      967
      432      968    3         IF precision = 0 AND value = 0 THEN DO;
      433      969    3            actual_width = 0;
      434      970    3            result$ = ADDR(field_string);
      435      971    3            RETURN;
      436      972    3         END;
      437      973
      438      974    3         IF use_lc_digits THEN DO;
      439      975    4            DO i = 0 to 8;
      440      976    4               SUBSTR (temp_str, i, 1) = SUBSTR (lc_digits, quads (i), 1);
      441      977    4            END;
      442      978    3         END; ELSE DO;
      443      979    4            DO i = 0 to 8;
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:13   
      444      980    4               SUBSTR (temp_str, i, 1) = SUBSTR (uc_digits, quads (i), 1);
      445      981    4            END;
      446      982    3         END;
      447      983
      448      984    2         CALL SEARCH (temp_start, junk, XBI$non_zero_table, temp_str)
      449      985    3            WHENRETURN DO;
      450      986    3               temp_len = %temp_str_size - temp_start;
      451      987    3            END;
      452      988    3            WHENALTRETURN DO;
      453      989    3               temp_start = %temp_str_size - 1;
      454      990    3               temp_len = 1;
      455      991    3            END;
      456      992
      457      993    2         field_next_char= 0;
      458      994    3         IF use_variant THEN DO;
      459      995    3            IF use_lc_digits THEN
      460      996    3               SUBSTR (field_string, 0, 2) = '0x';
      461      997    3            ELSE
      462      998    3               SUBSTR (field_string, 0, 2) = '0X';
      463      999    3            field_next_char = 2;
      464     1000    3         END;
      465     1001
      466     1002    2         pad_chars = maximum (0, precision - temp_len);
      467     1003    2         IF use_zero_pad_character AND (pad_chars = 0) THEN
      468     1004    2            pad_chars = MAXIMUM (width - (field_next_char + temp_len), pad_chars);
      469     1005
      470     1006    3         IF field_next_char + pad_chars + temp_len > %field_string_size THEN DO;
      471     1007    3            CALL set_errno (ERR$FIELD_TOO_BIG);
      472     1008    3            ALTRETURN;
      473     1009    3         END;
      474     1010
      475     1011    2         IF pad_chars > 0 THEN CALL add_pad_chars_to_field (pad_chars);
      476     1012
      477     1013    2         SUBSTR (field_string, field_next_char, temp_len) = SUBSTR (temp_str,
      478     1014    2            temp_start, temp_len);
      479     1015    2         actual_width = field_next_char + temp_len;
      480     1016    2         result$ = ADDR (field_string);
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:14   
      481     1017    2         RETURN;
      482     1018
      483     1019    2      error_return:
      484     1020    2         ALTRETURN;
      485     1021    2      END format_hex_integer;
      486     1022
      487     1023    1      format_char: PROC ALTRET;
      488     1024    2         DCL value                  UBIN;
      489     1025
      490     1026    2         CALL get_word_argument (value) ALTRET (error_return);
      491     1027
      492     1028    2         field_next_char= 0;
      493     1029
      494     1030    3         IF use_zero_pad_character THEN DO;
      495     1031    3            pad_chars = MAXIMUM (width - 1, 0);
      496     1032    4            IF pad_chars > 0 THEN DO;
      497     1033    5               IF pad_chars + 1 > %field_string_size THEN DO;
      498     1034    5                  CALL set_errno (ERR$FIELD_TOO_BIG);
      499     1035    5                  ALTRETURN;
      500     1036    5               END;
      501     1037    4               CALL add_pad_chars_to_field (pad_chars);
      502     1038    4            END;
      503     1039    3         END;
      504     1040
      505     1041    2         SUBSTR (field_string, field_next_char, 1) = BINASC (value);
      506     1042    2         actual_width = field_next_char + 1;
      507     1043    2         result$ = ADDR (field_string);
      508     1044    2         RETURN;
      509     1045
      510     1046    2      error_return:
      511     1047    2         ALTRETURN;
      512     1048    2      END format_char;
      513     1049
      514     1050    1      format_percent: PROC ALTRET;
      515     1051
      516     1052    2         field_next_char= 0;
      517     1053
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:15   
      518     1054    3         IF use_zero_pad_character THEN DO;
      519     1055    3            pad_chars = MAXIMUM (width - 1, 0);
      520     1056    4            IF pad_chars > 0 THEN DO;
      521     1057    5               IF pad_chars + 1 > %field_string_size THEN DO;
      522     1058    5                  CALL set_errno (ERR$FIELD_TOO_BIG);
      523     1059    5                  ALTRETURN;
      524     1060    5               END;
      525     1061    4               CALL add_pad_chars_to_field (pad_chars);
      526     1062    4            END;
      527     1063    3         END;
      528     1064
      529     1065    2         SUBSTR (field_string, field_next_char, 1) = '%';
      530     1066    2         actual_width = field_next_char + 1;
      531     1067    2         result$ = ADDR (field_string);
      532     1068    2      END format_percent;
      533     1069
      534     1070    1      format_string: PROC ALTRET;
      535     1071    2         DCL str$                   PTR;
      536     1072    2         DCL string                 CHAR (string_len) BASED (str$);
      537     1073    2         DCL string_len             SBIN;
      538     1074    2         DCL XBI$STRLEN             ENTRY (2);
      539     1075
      540     1076    2         CALL get_word_argument (str$) ALTRET (error_return);
      541     1077
      542     1078    2         CALL XBI$STRLEN (string, string_len);
      543     1079
      544     1080    2         IF precision >= 0 THEN string_len = MINIMUM (string_len, precision);
      545     1081
      546     1082    3         IF use_zero_pad_character THEN DO;
      547     1083    3            pad_chars = MAXIMUM (width - string_len, 0);
      548     1084    4            IF pad_chars > 0 THEN DO;
      549     1085    5               IF pad_chars + string_len > %field_string_size THEN DO;
      550     1086    5                  CALL set_errno (ERR$FIELD_TOO_BIG);
      551     1087    5                  ALTRETURN;
      552     1088    5               END;
      553     1089    4               field_next_char= 0;
      554     1090    4               CALL add_pad_chars_to_field (pad_chars);
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:16   
      555     1091    4               SUBSTR (field_string, field_next_char, string_len) =
      556     1092    4                  SUBSTR (string, 0, string_len);
      557     1093    4               actual_width = field_next_char + string_len;
      558     1094    4               result$ = ADDR (field_string);
      559     1095    4            END; ELSE DO;
      560     1096    4               actual_width = string_len;
      561     1097    4               result$ = str$;
      562     1098    4            END;
      563     1099    3         END; ELSE DO;
      564     1100    3            actual_width = string_len;
      565     1101    3            result$ = str$;
      566     1102    3         END;
      567     1103    2         RETURN;
      568     1104
      569     1105    2      error_return:
      570     1106    2         ALTRETURN;
      571     1107    2      END format_string;
      572     1108
      573     1109    1      return_chars_output: PROC ALTRET;
      574     1110    2         DCL int$                PTR;
      575     1111    2         DCL based_int           SBIN BASED (int$);
      576     1112
      577     1113    2         CALL get_word_argument (int$) ALTRET (error_return);
      578     1114
      579     1115    2         based_int = chars_flushed + out_next_char;
      580     1116    2         RETURN;
      581     1117
      582     1118    2      error_return:
      583     1119    2         ALTRETURN;
      584     1120    2      END return_chars_output;
      585     1121
      586     1122    1      format_f: PROC (value) ALTRET;
      587     1123    2         DCL value                  BIT (72) DALIGNED;
      588     1124
      589     1125    2         DCL exponent               SBIN;
      590     1126    2         DCL pad_chars              SBIN;
      591     1127    2         DCL sign_mode              SBIN;
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:17   
      592     1128    2         DCL string                 CHAR (128);
      593     1129    2         DCL string_len             SBIN;
      594     1130    2         DCL string_next_char       SBIN;
      595     1131    2         DCL temp                   SBIN;
      596     1132    2         DCL temp_string            CHAR (64) ALIGNED;
      597     1133
      598     1134    2         IF precision < 0 THEN precision = 6;
      599     1135
      600     1136    2         CALL XPN_7DTOLS (value, temp_string, 20, temp, exponent);
      601     1137
      602     1138    2         CALL XPN_5PREPARE_FOR_FIXED_FMT (temp_string, temp, exponent, precision);
      603     1139
      604     1140    2         sign_mode = 0;
      605     1141    2         IF use_plus_minus_sign THEN
      606     1142    2            sign_mode = 2;
      607     1143    2         ELSE IF use_minus_space_sign THEN
      608     1144    2                  sign_mode = 1;
      609     1145
      610     1146    2         CALL XPN_7FLJ (string, SIZEC(string), temp_string, temp, exponent,
      611     1147    2                        sign_mode, string_len)
      612     1148    3            WHENALTRETURN DO;
      613     1149    4               IF width > %field_string_size THEN DO;
      614     1150    4                  CALL set_errno (ERR$FIELD_TOO_BIG);
      615     1151    4                  ALTRETURN;
      616     1152    4               END;
      617     1153    3               width = MAXIMUM (width, precision);
      618     1154    4               DO field_next_char = 0 TO width - 1;
      619     1155    4                  SUBSTR (field_string, field_next_char, 1) = '*';
      620     1156    4               END;
      621     1157    3               actual_width = width;
      622     1158    3               result$ = ADDR (field_string);
      623     1159    3               RETURN;
      624     1160    3            END;
      625     1161
      626     1162              /* we may have to discard the decimal point */
      627     1163
      628     1164    2         IF precision = 0 AND ~use_variant THEN string_len = string_len - 1;
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:18   
      629     1165
      630     1166    2         field_next_char = 0;
      631     1167    2         string_next_char = 0;
      632     1168    3         DO SELECT (SUBSTR (string, 0, 1));
      633     1169    3            SELECT (' ', '-', '+');
      634     1170    3               SUBSTR (field_string, 0, 1) = SUBSTR (string, 0, 1);
      635     1171    3               field_next_char = 1;
      636     1172    3               string_next_char = 1;
      637     1173    3         END;
      638     1174
      639     1175              /* padding may be needed if there is no digit before the decimal point */
      640     1176
      641     1177    2         IF SUBSTR (string, string_next_char, 1) = '.' THEN
      642     1178    2            pad_chars = 1;
      643     1179    2         ELSE
      644     1180    2            pad_chars = 0;
      645     1181
      646     1182    2         IF use_zero_pad_character THEN
      647     1183    2            pad_chars = MAXIMUM (pad_chars, width - string_len);
      648     1184
      649     1185    3         IF MAXIMUM (width, string_len + pad_chars) > %field_string_size THEN DO;
      650     1186    3            CALL set_errno (ERR$FIELD_TOO_BIG);
      651     1187    3            ALTRETURN;
      652     1188    3         END;
      653     1189
      654     1190    2         IF pad_chars > 0 THEN CALL add_pad_chars_to_field (pad_chars);
      655     1191
      656     1192    2         temp = string_len - string_next_char;
      657     1193    2         SUBSTR (field_string, field_next_char, temp) =
      658     1194    2            SUBSTR (string, string_next_char, temp);
      659     1195    2         actual_width = field_next_char + temp;
      660     1196    2         result$ = ADDR (field_string);
      661     1197    2      END format_f;
      662     1198
      663     1199    1      format_e_or_E: PROC (value, lc_e) ALTRET;
      664     1200    2         DCL lc_e                   BIT (1);
      665     1201    2         DCL value                  BIT (72) DALIGNED;
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:19   
      666     1202
      667     1203    2         DCL chars_to_move          SBIN;
      668     1204    2         DCL digits                 SBIN;
      669     1205    2         DCL exponent               SBIN;
      670     1206    2         DCL exponent_to_print      SBIN;
      671     1207    2         DCL pad_chars              SBIN;
      672     1208    2         DCL sign_mode              SBIN;
      673     1209    2         DCL string                 CHAR (128);
      674     1210    2         DCL string_len             SBIN;
      675     1211    2         DCL string_next_char       SBIN;
      676     1212    2         DCL temp                   SBIN;
      677     1213    2         DCL temp_string            CHAR (64) ALIGNED;
      678     1214
      679     1215    2         IF precision < 0 THEN precision = 6;
      680     1216
      681     1217    2         CALL XPN_7DTOLS (value, temp_string, 20, digits, exponent);
      682     1218
      683     1219    2         exponent_to_print = exponent + digits - 1;
      684     1220
      685     1221    2         CALL XPN_5PREPARE_FOR_EXP_FMT (temp_string, digits, exponent, precision + 1);
      686     1222
      687     1223    2         sign_mode = 0;
      688     1224    2         IF use_plus_minus_sign THEN
      689     1225    2            sign_mode = 2;
      690     1226    2         ELSE IF use_minus_space_sign THEN
      691     1227    2                  sign_mode = 1;
      692     1228
      693     1229    2         IF (exponent_to_print > 99) OR (exponent_to_print < -99) THEN
      694     1230    2            exponent_digits = 3;
      695     1231    2         else
      696     1232    2            exponent_digits = 2;
      697     1233    2         string_len = MINIMUM (60, precision + 5 + exponent_digits);
      698     1234    2         CALL XPN_7ERJE1 (string, string_len, temp_string, digits, exponent,
      699     1235    2                        sign_mode, exponent_digits);
      700     1236
      701     1237              /* we may have to discard the decimal point */
      702     1238
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:20   
      703     1239    3         IF precision = 0 AND ~use_variant THEN DO;
      704     1240    3            CALL INDEX (temp, '.', SUBSTR (string, 0, string_len));
      705     1241    3            chars_to_move = string_len - (temp + 1);
      706     1242    3            SUBSTR (string, temp, chars_to_move) = SUBSTR (string, temp + 1,
      707     1243    3               chars_to_move);
      708     1244    3            string_len = string_len - 1;
      709     1245    3         END;
      710     1246
      711     1247              /* we may have to use a lowercase E */
      712     1248
      713     1249    3         IF lc_e THEN DO;
      714     1250    3            CALL INDEX (temp, 'E', SUBSTR (string, 0, string_len));
      715     1251    3            SUBSTR (string, temp, 1) = 'e';
      716     1252    3         END;
      717     1253
      718     1254    2         string_next_char = 0;
      719     1255
      720     1256              /* there may be an (unwanted) pad character at the beginning */
      721     1257
      722     1258    2         IF sign_mode = 0 AND SUBSTR (string, 0, 1) = ' ' THEN
      723     1259    2            string_next_char = 1;
      724     1260
      725     1261    2         IF use_zero_pad_character THEN
      726     1262    2            pad_chars = MAXIMUM (0, width - string_len + string_next_char);
      727     1263    2         ELSE
      728     1264    2            pad_chars = 0;
      729     1265    2         field_next_char = 0;
      730     1266    3         IF pad_chars > 0 THEN DO;
      731     1267    4            IF string_next_char = 0 THEN DO;
      732     1268    5               DO SELECT (SUBSTR (string, 0, 1));
      733     1269    5                  SELECT ('-', '+', ' ');
      734     1270    5                     SUBSTR (field_string, 0, 1) = SUBSTR (string, 0, 1);
      735     1271    5                     field_next_char = 1;
      736     1272    5                     string_next_char = 1;
      737     1273    5               END;
      738     1274    4            END;
      739     1275    3            CALL add_pad_chars_to_field (pad_chars);
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:21   
      740     1276    3         END;
      741     1277    2         chars_to_move = string_len - string_next_char;
      742     1278    2         SUBSTR (field_string, field_next_char, chars_to_move) =
      743     1279    2            SUBSTR (string, string_next_char, chars_to_move);
      744     1280    2         actual_width = field_next_char + chars_to_move;
      745     1281    2         result$ = ADDR (field_string);
      746     1282    2      END format_e_or_E;
      747     1283
      748     1284    1      format_g_or_G: PROC (value, lc_e) ALTRET;
      749     1285    2         DCL value               BIT(72) DALIGNED;
      750     1286    2         DCL lc_e                BIT (1);
      751     1287
      752     1288    2         DCL original_precision  SBIN;
      753     1289    2         DCL exponent            SBIN;
      754     1290    2         DCL keep_trailing_zeros BIT(1);
      755     1291
      756     1292    2         remove_unwanted_zeros: PROC (trailing_chars);
      757     1293    3            DCL trailing_chars         UBIN;
      758     1294    3            DCL last_fraction_char     UBIN;
      759     1295
      760     1296    3            last_fraction_char = actual_width - trailing_chars - 1;
      761     1297    4            DO WHILE SUBSTR (result_string, last_fraction_char, 1) = '0';
      762     1298    4               actual_width = actual_width - 1;
      763     1299    4               IF trailing_chars > 0 THEN
      764     1300    4                  SUBSTR (result_string, last_fraction_char, trailing_chars) =
      765     1301    4                     SUBSTR (result_string, last_fraction_char + 1, trailing_chars);
      766     1302    4               last_fraction_char = last_fraction_char - 1;
      767     1303    4            END;
      768     1304    4            IF SUBSTR (result_string, last_fraction_char, 1) = '.' THEN DO;
      769     1305    4               actual_width = actual_width - 1;
      770     1306    4               IF trailing_chars > 0 THEN
      771     1307    4                  SUBSTR (result_string, last_fraction_char, trailing_chars) =
      772     1308    4                     SUBSTR (result_string, last_fraction_char + 1, trailing_chars);
      773     1309    4            END;
      774     1310    3         END remove_unwanted_zeros;
      775     1311
      776     1312    2         IF precision < 0 THEN precision = 6;
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:22   
      777     1313    2         IF precision = 0 THEN precision = 1;
      778     1314    2         original_precision = precision;
      779     1315    2         precision = precision - 1;
      780     1316    2         keep_trailing_zeros = use_variant;
      781     1317    2         use_variant = '1'B;
      782     1318
      783     1319    2         CALL format_e_or_E (value, lc_e) ALTRET (error_return);
      784     1320
      785     1321    2         CALL CHARBIN (exponent, SUBSTR (result_string, actual_width - exponent_digits)
              1321                  );
      786     1322    2         IF SUBSTR (result_string, actual_width - exponent_digits - 1, 1) = '-' THEN
      787     1323    2            exponent = -exponent;
      788     1324
      789     1325    3         IF exponent < -4 OR exponent >= original_precision THEN DO;
      790     1326    3            IF ~keep_trailing_zeros THEN
      791     1327    3               CALL remove_unwanted_zeros (exponent_digits + 2);
      792     1328    3            RETURN;
      793     1329    3         END;
      794     1330
      795     1331    2         precision = precision - exponent;
      796     1332
      797     1333    2         CALL format_f (value) ALTRET (error_return);
      798     1334    2         IF ~keep_trailing_zeros THEN CALL remove_unwanted_zeros (0);
      799     1335    2         RETURN;
      800     1336
      801     1337    2      error_return:
      802     1338    2         ALTRETURN;
      803     1339    2      END format_g_or_G;
      804     1340
      805     1341
      806     1342    1      argument_block$ = P_argument_block$;
      807     1343    1      argument_block_size = P_argument_block_size;
      808     1344    1      argument_words_used = 0;
      809     1345    1      out_next_char = 0;
      810     1346    1      result = 0;
      811     1347    1      format_next_char = 0;
      812     1348    1      S_next_char = 0;
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:23   
      813     1349    1      chars_flushed = 0;
      814     1350    1      call XBI$STRLEN( format, format_length );
      815     1351    1      format_length = format_length + 1;
      816     1352
      817     1353    2      DO WHILE '1'B;
      818     1354    2         CALL SEARCH (format_index, table_value, XBI$null_or_percent_table, format,
      819     1355    2                      format_next_char) ALTRET (format_string_too_long);
      820     1356    2         actual_width = format_index - format_next_char;
      821     1357    3         IF actual_width > 0 THEN DO;
      822     1358    3            width = 0;
      823     1359    3            result$ = ADDR (SUBSTR (format, format_next_char, 1));
      824     1360    3            format_next_char = format_next_char + actual_width;
      825     1361    3            CALL append_result_string ALTRET (error_return);
      826     1362    3         END;
      827     1363
      828     1364    3         IF table_value = 1 THEN DO;
      829     1365                 /* we found a null; the entire format has been processed */
      830     1366    3            CALL flush_out_buf ALTRET (error_return);
      831     1367    3            IF ADDR(F) ~= ADDR(NIL) AND F.is_unbuffered THEN
      832     1368    3               CALL XBI$FFLUSH (F) ALTRET (error_return);
      833     1369    3            IF ADDR(S) ~= ADDR(NIL) THEN
      834     1370    3               SUBSTR (S, S_next_char, 1) = BINASC (0);
      835     1371    3            result = chars_flushed;
      836     1372    3            RETURN;
      837     1373    3         END;
      838     1374
      839     1375              /* we found a % which denotes a format specification */
      840     1376
      841     1377    2         format_next_char = format_next_char + 1;  /* skip the % */
      842     1378
      843     1379    2         left_justify = '0'B;
      844     1380    2         use_zero_pad_character = '0'B;
      845     1381    2         use_plus_minus_sign = '0'B;
      846     1382    2         use_minus_space_sign = '0'B;
      847     1383    2         use_variant = '0'B;
      848     1384    2         width = 0;
      849     1385    2         precision = -1;
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:24   
      850     1386
      851     1387    2   look_for_flag_characters:
      852     1388    3         DO CASE (ASCBIN (SUBSTR (format, format_next_char, 1)));
      853     1389    3            CASE (%ASCBIN ('-'));
      854     1390    3               format_next_char = format_next_char + 1;
      855     1391    3               left_justify = '1'B;
      856     1392    3               GOTO look_for_flag_characters;
      857     1393    3            CASE (%ASCBIN ('+'));
      858     1394    3               format_next_char = format_next_char + 1;
      859     1395    3               use_plus_minus_sign = '1'B;
      860     1396    3               GOTO look_for_flag_characters;
      861     1397    3            CASE (%ASCBIN (' '));
      862     1398    3               format_next_char = format_next_char + 1;
      863     1399    3               use_minus_space_sign = '1'B;
      864     1400    3               GOTO look_for_flag_characters;
      865     1401    3            CASE (%ASCBIN ('#'));
      866     1402    3               format_next_char = format_next_char + 1;
      867     1403    3               use_variant = '1'B;
      868     1404    3               GOTO look_for_flag_characters;
      869     1405    3         END;
      870     1406
      871     1407              /* The space-sign flag is ignored if the plus-sign flag is specified */
      872     1408
      873     1409    2         IF use_plus_minus_sign THEN use_minus_space_sign = '0'B;
      874     1410
      875     1411              /* optional minimum field width */
      876     1412
      877     1413    2         CALL SEARCH (format_index, table_value, XBI$non_digit_table, format,
      878     1414    2                      format_next_char) ALTRET (format_string_too_long);
      879     1415    2         digits = format_index - format_next_char;
      880     1416    3         IF digits = 0 THEN DO;
      881     1417    4            IF SUBSTR (format, format_next_char, 1) = '*' THEN DO;
      882     1418    4               format_next_char = format_next_char + 1;
      883     1419    4               CALL get_word_argument (width) ALTRET (error_return);
      884     1420    5               IF width < 0 THEN DO;
      885     1421    5                  left_justify = '1'B;
      886     1422    5                  width = -width;
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:25   
      887     1423    5               END;
      888     1424    3            END; ELSE
      889     1425    3               width = 0;
      890     1426    3         END; ELSE DO;
      891     1427    4            IF digits > 6 THEN DO;
      892     1428    4               CALL set_errno (ERR$WIDTH_OR_PRECISION_TB);
      893     1429    4               GOTO error_return;
      894     1430    4            END;
      895     1431    4            IF SUBSTR (format, format_next_char, 1) = '0' THEN DO;
      896     1432    4               use_zero_pad_character = '1'B;
      897     1433    4            END;
      898     1434    3            CALL CHARBIN (width, SUBSTR (format, format_next_char, digits));
      899     1435    3            format_next_char = format_next_char + digits;
      900     1436    3         END;
      901     1437
      902     1438              /* the zero digit flag is relevant only if the field is right
      903     1439                 justified. */
      904     1440
      905     1441    2         IF left_justify THEN use_zero_pad_character = '0'B;
      906     1442
      907     1443              /* optional precision specification */
      908     1444
      909     1445    3         IF SUBSTR (format, format_next_char, 1) = '.' THEN DO;
      910     1446    3            format_next_char = format_next_char + 1;
      911     1447    3            CALL SEARCH (format_index, table_value, XBI$non_digit_table, format,
      912     1448    3                         format_next_char) ALTRET (format_string_too_long);
      913     1449    3            digits = format_index - format_next_char;
      914     1450    4            IF digits = 0 THEN DO;
      915     1451    5               IF SUBSTR (format, format_next_char, 1) = '*' THEN DO;
      916     1452    5                  format_next_char = format_next_char + 1;
      917     1453    5                  CALL get_word_argument (precision) ALTRET (error_return);
      918     1454    4               END; ELSE
      919     1455    4                  precision = 0;
      920     1456    4            END; ELSE DO;
      921     1457    5               IF digits > 6 THEN DO;
      922     1458    5                  CALL set_errno (ERR$WIDTH_OR_PRECISION_TB);
      923     1459    5                  GOTO error_return;
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:26   
      924     1460    5               END;
      925     1461    4               CALL CHARBIN (precision, SUBSTR (format, format_next_char, digits));
      926     1462    4               format_next_char = format_next_char + digits;
      927     1463    4            END;
      928     1464    3         END;
      929     1465
      930     1466              /* optional type modifier */
      931     1467
      932     1468    3         DO CASE (ASCBIN (SUBSTR (format, format_next_char, 1)));
      933     1469    3            CASE (%ASCBIN ('h'), %ASCBIN ('l'), %ASCBIN ('L'));
      934     1470    3               format_next_char = format_next_char + 1;
      935     1471    3         END;
      936     1472
      937     1473              /* compulsory type of conversion */
      938     1474
      939     1475    3         DO CASE (ASCBIN (SUBSTR (format, format_next_char, 1)));
      940     1476    3            CASE (%ASCBIN ('i'), %ASCBIN ('d'));
      941     1477    3               CALL format_decimal_integer ALTRET (error_return);
      942     1478    3               CALL append_result_string ALTRET (error_return);
      943     1479    3            CASE (%ASCBIN ('o'));
      944     1480    3               CALL format_octal_integer ALTRET (error_return);
      945     1481    3               CALL append_result_string ALTRET (error_return);
      946     1482    3            CASE (%ASCBIN ('p'));
      947     1483    3               use_variant = '1'B; /* force a leading zero */
      948     1484    3               CALL format_octal_integer ALTRET (error_return);
      949     1485    3               CALL append_result_string ALTRET (error_return);
      950     1486    3            CASE (%ASCBIN ('u'));
      951     1487    3               CALL format_unsigned_integer ALTRET (error_return);
      952     1488    3               CALL append_result_string ALTRET (error_return);
      953     1489    3            CASE (%ASCBIN ('x'));
      954     1490    3               CALL format_hex_integer ('1'B) ALTRET (error_return);
      955     1491    3               CALL append_result_string ALTRET (error_return);
      956     1492    3            CASE (%ASCBIN ('X'));
      957     1493    3               CALL format_hex_integer ('0'B) ALTRET (error_return);
      958     1494    3               CALL append_result_string ALTRET (error_return);
      959     1495    3            CASE (%ASCBIN ('c'));
      960     1496    3               CALL format_char ALTRET (error_return);
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:27   
      961     1497    3               CALL append_result_string ALTRET (error_return);
      962     1498    3            CASE (%ASCBIN ('%'));
      963     1499    3               CALL format_percent ALTRET (error_return);
      964     1500    3               CALL append_result_string ALTRET (error_return);
      965     1501    3            CASE (%ASCBIN ('s'));
      966     1502    3               CALL format_string ALTRET (error_return);
      967     1503    3               CALL append_result_string ALTRET (error_return);
      968     1504    3            CASE (%ASCBIN ('f'));
      969     1505    3               CALL get_double_argument (double_value) ALTRET (error_return);
      970     1506    3               CALL format_f (double_value) ALTRET (error_return);
      971     1507    3               CALL append_result_string ALTRET (error_return);
      972     1508    3            CASE (%ASCBIN ('e'));
      973     1509    3               CALL get_double_argument (double_value) ALTRET (error_return);
      974     1510    3               CALL format_e_or_E (double_value, '1'B) ALTRET (error_return);
      975     1511    3               CALL append_result_string ALTRET (error_return);
      976     1512    3            CASE (%ASCBIN ('E'));
      977     1513    3               CALL get_double_argument (double_value) ALTRET (error_return);
      978     1514    3               CALL format_e_or_E (double_value, '0'B) ALTRET (error_return);
      979     1515    3               CALL append_result_string ALTRET (error_return);
      980     1516    3            CASE (%ASCBIN ('g'));
      981     1517    3               CALL get_double_argument (double_value) ALTRET (error_return);
      982     1518    3               CALL format_g_or_G (double_value, '1'B) ALTRET (error_return);
      983     1519    3               CALL append_result_string ALTRET (error_return);
      984     1520    3            CASE (%ASCBIN ('G'));
      985     1521    3               CALL get_double_argument (double_value) ALTRET (error_return);
      986     1522    3               CALL format_g_or_G (double_value, '0'B) ALTRET (error_return);
      987     1523    3               CALL append_result_string ALTRET (error_return);
      988     1524    3            CASE (%ASCBIN ('n'));
      989     1525    3               CALL return_chars_output;
      990     1526    3            CASE (ELSE);
      991     1527    3               CALL set_errno (ERR$UNKNOWN_FORMAT_CONV);
      992     1528    3               GOTO error_return;
      993     1529    3         END;
      994     1530    2         format_next_char = format_next_char + 1;
      995     1531    2      END; /* while */
      996     1532
      997     1533    1   format_string_too_long:
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:28   
      998     1534    1      CALL set_errno (ERR$FORMAT_STRING_TOO_LONG);
      999     1535    1      result = %EOF;
     1000     1536    1      RETURN;
     1001     1537
     1002     1538    1   error_return:
     1003     1539    1      result = %EOF;
     1004     1540    1      RETURN;
     1005     1541
     1006     1542    1   XBI$FPUTB: PROC (s, F, s_length, result) ;
     1007     1543
     1008     1544    2      DCL s                   CHAR (s_length);
     1009     1545           %File_Header (Name=F, STCLASS=" ");
     1010     1657    2      DCL s_length               SBIN;
     1011     1658    2      DCL result                 SBIN;
     1012     1659
     1013     1660    2      DCL start                  SBIN;
     1014     1661    2      DCL ts_length              SBIN;
     1015     1662    2      DCL space                  SBIN;
     1016     1663           %Buffer;
     1017     1666
     1018     1667    2      DCL XBI_SET_STREAM_ERRNO   ENTRY (2);
     1019     1668    2      DCL XBI$WRITE_THIS_RECORD   ENTRY (1) ALTRET;
     1020     1669    2      DCL XB_IO_ERROR            ENTRY;
     1021     1670    2      DCL XBI$COMPLETE_OPEN      ENTRY (1) ALTRET;
     1022     1671    2      DCL XBI$POSITION_TO_EOF    ENTRY (1) ALTRET;
     1023     1672    2      DCL XBI$FFLUSH             ENTRY (1) ALTRET;
     1024     1673
     1025     1674    2      ts_length = s_length;
     1026     1675
     1027     1676    3      IF (F.auxio$ ~= ADDR(NIL)) THEN DO;
     1028     1677    3         CALL XBI_SET_STREAM_ERRNO (F, ERR$AUXIO_FILE_POINTER);
     1029     1678    3         CALL XB_IO_ERROR;
     1030     1679    3      END;
     1031     1680
     1032     1681    2      IF F.is_partly_open THEN CALL XBI$COMPLETE_OPEN (F) ALTRET (return_error);
     1033     1682
     1034     1683    3      IF F.state = %F_reading_state AND (NOT F.is_eof) THEN DO;
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:29   
     1035     1684    3         CALL XBI_SET_STREAM_ERRNO (F, ERR$WRITE_AFTER_READ);
     1036     1685    3         F.is_error = '1'B;
     1037     1686    3         GOTO return_error;
     1038     1687    3      END;
     1039     1688    2      F.state = %F_writing_state;
     1040     1689
     1041     1690    2      IF F.is_write_at_eof AND ~F.is_eof THEN
     1042     1691    2         CALL XBI$POSITION_TO_EOF (F) ALTRET (return_error);
     1043     1692
     1044     1693    2      start = 0;
     1045     1694    3      DO WHILE ts_length > 0;
     1046     1695    3         space = F.buffer_size - F.character_position;
     1047     1696    4         IF space > ts_length THEN DO;
     1048     1697    4            SUBSTR (buffer, F.character_position, ts_length) =
     1049     1698    4               SUBSTR (s, start, ts_length);
     1050     1699    4            F.character_position = F.character_position + ts_length;
     1051     1700    4            IF F.is_eof OR (F.ars < F.character_position) THEN
     1052     1701    4               F.ars = F.character_position;
     1053     1702    4            ts_length = 0;
     1054     1703    4            F.is_buffer_modified = '1'B;
     1055     1704    4         END; ELSE DO;
     1056     1705    4            SUBSTR (buffer, F.character_position, space) =
     1057     1706    4               SUBSTR (s, start, space);
     1058     1707    4            F.character_position = F.character_position + space;
     1059     1708    4            IF F.is_eof OR (F.ars < F.character_position) THEN
     1060     1709    4              F.ars = F.character_position;
     1061     1710    4            ts_length = ts_length - space;
     1062     1711    4            start = start + space;
     1063     1712    4            F.is_buffer_modified = '1'B;
     1064     1713    4            CALL XBI$WRITE_THIS_RECORD (F) ALTRET (return_error);
     1065     1714    4         END;
     1066     1715    3      END;
     1067     1716    2      IF F.is_unbuffered THEN CALL XBI$FFLUSH (F) ALTRET (return_error);
     1068     1717    2      result = 0; /* return zero */
     1069     1718    2      RETURN;
     1070     1719
     1071     1720    2   return_error:
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:30   
     1072     1721    2      result = %EOF;
     1073     1722    2      RETURN;
     1074     1723    2   END XBI$FPUTB;
     1075     1724
     1076     1725    1   END XBI$PRINT;

PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:31   
--  Include file information  --

   B$TABLES_C.:LIB_E04  cannot be made into a system file and is referenced.
   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI$PRINT.

   Procedure XBI$PRINT requires 2191 words for executable code.
   Procedure XBI$PRINT requires 628 words of local(AUTO) storage.

    No errors detected in file xbi_io_print:6.:XBC3TSI    .

PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:32   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:33   
          MINI XREF LISTING

ACTUAL_WIDTH
       553**DCL       585--IMP-SIZ   680>>ASSIGN    693>>DOWHILE   694>>ASSIGN    699>>ASSIGN    700>>ASSIGN
       748<<ASSIGN    805<<ASSIGN    832<<ASSIGN    877<<ASSIGN    903<<ASSIGN    938<<ASSIGN    969<<ASSIGN
      1015<<ASSIGN   1042<<ASSIGN   1066<<ASSIGN   1093<<ASSIGN   1096<<ASSIGN   1100<<ASSIGN   1157<<ASSIGN
      1195<<ASSIGN   1280<<ASSIGN   1296>>ASSIGN   1297>>DOWHILE  1298<<ASSIGN   1298>>ASSIGN   1300>>ASSIGN
      1300>>ASSIGN   1304>>IF       1305<<ASSIGN   1305>>ASSIGN   1307>>ASSIGN   1307>>ASSIGN   1321>>CALLBLT
      1321>>CALLBLT  1322>>IF       1322>>IF       1356<<ASSIGN   1357>>IF       1360>>ASSIGN
ADD_PAD_CHARS_TO_FIELD
       720**PROC      801--CALL      873--CALL      934--CALL     1011--CALL     1037--CALL     1061--CALL
      1090--CALL     1190--CALL     1275--CALL
APPEND_RESULT_STRING
       676**PROC     1361--CALL     1478--CALL     1481--CALL     1485--CALL     1488--CALL     1491--CALL
      1494--CALL     1497--CALL     1500--CALL     1503--CALL     1507--CALL     1511--CALL     1515--CALL
      1519--CALL     1523--CALL
ARGUMENT_BLOCK$
       554**DCL       644>>ASSIGN    645<<ASSIGN    645>>ASSIGN    660>>ASSIGN    663<<ASSIGN    663>>ASSIGN
       671>>ASSIGN    672<<ASSIGN    672>>ASSIGN   1342<<ASSIGN
ARGUMENT_BLOCK_SIZE
       555**DCL       640>>IF        666>>IF       1343<<ASSIGN
ARGUMENT_WORDS_USED
       556**DCL       640>>IF        646<<ASSIGN    646>>ASSIGN    662<<ASSIGN    662>>ASSIGN    666>>IF
       673<<ASSIGN    673>>ASSIGN   1344<<ASSIGN
B$SR_NON_DEC$
       570**DCL       571--IMP-PTR  1413>>CALLBLT  1447>>CALLBLT
B$SR_NON_ZERO$
       574**DCL       575--IMP-PTR   767>>CALLBLT   849>>CALLBLT   984>>CALLBLT
BASED_BIT36 IN PROCEDURE GET_WORD_ARGUMENT
       638**DCL       644>>ASSIGN
BASED_BIT72 IN PROCEDURE GET_DOUBLE_ARGUMENT
       651**DCL       671>>ASSIGN
BASED_INT IN PROCEDURE RETURN_CHARS_OUTPUT
      1111**DCL      1115<<ASSIGN
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:34   
BUFFER IN PROCEDURE XBI$FPUTB
      1664**DCL      1697<<ASSIGN   1705<<ASSIGN
CHARS_FLUSHED
       557**DCL       618<<ASSIGN    618>>ASSIGN   1115>>ASSIGN   1349<<ASSIGN   1371>>ASSIGN
CHARS_TO_MOVE IN PROCEDURE FORMAT_E_OR_E
      1203**DCL      1241<<ASSIGN   1242>>ASSIGN   1242>>ASSIGN   1277<<ASSIGN   1278>>ASSIGN   1278>>ASSIGN
      1280>>ASSIGN
DIGIT IN PROCEDURE FORMAT_UNSIGNED_INTEGER
       886**DCL       911<<ASSIGN    913>>ASSIGN
DIGITS
       558**DCL      1415<<ASSIGN   1416>>IF       1427>>IF       1434>>CALLBLT  1435>>ASSIGN   1449<<ASSIGN
      1450>>IF       1457>>IF       1461>>CALLBLT  1462>>ASSIGN
DIGITS IN PROCEDURE FORMAT_E_OR_E
      1204**DCL      1217<>CALL     1219>>ASSIGN   1221<>CALL     1234<>CALL
DOUBLE_VALUE
       559**DCL      1505<>CALL     1506<>CALL     1509<>CALL     1510<>CALL     1513<>CALL     1514<>CALL
      1517<>CALL     1518<>CALL     1521<>CALL     1522<>CALL
ERROR IN PROCEDURE SET_ERRNO
       606**DCL       605--PROC      609<>CALL      611<>CALL
ERROR_RETURN
      1539**LABEL    1361--CALLALT  1366--CALLALT  1368--CALLALT  1419--CALLALT  1429--GOTO     1453--CALLALT
      1459--GOTO     1477--CALLALT  1478--CALLALT  1480--CALLALT  1481--CALLALT  1484--CALLALT  1485--CALLALT
      1487--CALLALT  1488--CALLALT  1490--CALLALT  1491--CALLALT  1493--CALLALT  1494--CALLALT  1496--CALLALT
      1497--CALLALT  1499--CALLALT  1500--CALLALT  1502--CALLALT  1503--CALLALT  1505--CALLALT  1506--CALLALT
      1507--CALLALT  1509--CALLALT  1510--CALLALT  1511--CALLALT  1513--CALLALT  1514--CALLALT  1515--CALLALT
      1517--CALLALT  1518--CALLALT  1519--CALLALT  1521--CALLALT  1522--CALLALT  1523--CALLALT  1528--GOTO
ERROR_RETURN IN PROCEDURE APPEND_RESULT_STRING
       717**LABEL     686--CALLALT   697--CALLALT   708--CALLALT
ERROR_RETURN IN PROCEDURE FORMAT_CHAR
      1047**LABEL    1026--CALLALT
ERROR_RETURN IN PROCEDURE FORMAT_DECIMAL_INTEGER
       810**LABEL     745--CALLALT
ERROR_RETURN IN PROCEDURE FORMAT_G_OR_G
      1338**LABEL    1319--CALLALT  1333--CALLALT
ERROR_RETURN IN PROCEDURE FORMAT_HEX_INTEGER
      1020**LABEL     966--CALLALT
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:35   
ERROR_RETURN IN PROCEDURE FORMAT_OCTAL_INTEGER
       882**LABEL     829--CALLALT
ERROR_RETURN IN PROCEDURE FORMAT_STRING
      1106**LABEL    1076--CALLALT
ERROR_RETURN IN PROCEDURE FORMAT_UNSIGNED_INTEGER
       943**LABEL     900--CALLALT
ERROR_RETURN IN PROCEDURE RETURN_CHARS_OUTPUT
      1119**LABEL    1113--CALLALT
EVEN$ IN PROCEDURE GET_DOUBLE_ARGUMENT
       652**DCL       653--REDEF     660<<ASSIGN
EVEN_POINTER.WORD_OFFSET IN PROCEDURE GET_DOUBLE_ARGUMENT
       654**DCL       661>>IF
EXPONENT IN PROCEDURE FORMAT_E_OR_E
      1205**DCL      1217<>CALL     1219>>ASSIGN   1221<>CALL     1234<>CALL
EXPONENT IN PROCEDURE FORMAT_F
      1125**DCL      1136<>CALL     1138<>CALL     1146<>CALL
EXPONENT IN PROCEDURE FORMAT_G_OR_G
      1289**DCL      1321<<CALLBLT  1323<<ASSIGN   1323>>ASSIGN   1325>>IF       1325>>IF       1331>>ASSIGN
EXPONENT_DIGITS
       560**DCL      1230<<ASSIGN   1232<<ASSIGN   1233>>ASSIGN   1234<>CALL     1321>>CALLBLT  1322>>IF
      1327>>CALL
EXPONENT_TO_PRINT IN PROCEDURE FORMAT_E_OR_E
      1206**DCL      1219<<ASSIGN   1229>>IF       1229>>IF
F
       438**DCL         6--PROC      608--IF        609<>CALL      619--IF        626<>CALL      628<>CALL
      1367--IF       1368<>CALL
F.FPT_READ.V.DVBYTE.REREAD#
       500**DCL       501--REDEF
F.FPT_READ.V.INDX#
       493**DCL       494--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       538**DCL       539--REDEF
F.IS_TEXT
       439**DCL       625>>IF
F.IS_UNBUFFERED
       449**DCL      1367>>IF
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:36   
F IN PROCEDURE XBI$FPUTB
      1546**DCL      1542--PROC     1677<>CALL     1681<>CALL     1684<>CALL     1691<>CALL     1713<>CALL
      1716<>CALL
F.ARS IN PROCEDURE XBI$FPUTB
      1568**DCL      1700>>IF       1701<<ASSIGN   1708>>IF       1709<<ASSIGN
F.AUXIO$ IN PROCEDURE XBI$FPUTB
      1578**DCL      1676>>IF
F.BUFFER$ IN PROCEDURE XBI$FPUTB
      1570**DCL      1664--IMP-PTR  1697>>ASSIGN   1705>>ASSIGN
F.BUFFER_SIZE IN PROCEDURE XBI$FPUTB
      1571**DCL      1664--IMP-SIZ  1695>>ASSIGN   1697>>ASSIGN   1705>>ASSIGN
F.CHARACTER_POSITION IN PROCEDURE XBI$FPUTB
      1566**DCL      1695>>ASSIGN   1697>>ASSIGN   1699<<ASSIGN   1699>>ASSIGN   1700>>IF       1701>>ASSIGN
      1705>>ASSIGN   1707<<ASSIGN   1707>>ASSIGN   1708>>IF       1709>>ASSIGN
F.FPT_READ.V.DVBYTE.REREAD# IN PROCEDURE XBI$FPUTB
      1608**DCL      1609--REDEF
F.FPT_READ.V.INDX# IN PROCEDURE XBI$FPUTB
      1601**DCL      1602--REDEF
F.FPT_WRITE.V.DVBYTE.VFC# IN PROCEDURE XBI$FPUTB
      1646**DCL      1647--REDEF
F.IS_BUFFER_MODIFIED IN PROCEDURE XBI$FPUTB
      1550**DCL      1703<<ASSIGN   1712<<ASSIGN
F.IS_EOF IN PROCEDURE XBI$FPUTB
      1548**DCL      1683>>IF       1690>>IF       1700>>IF       1708>>IF
F.IS_ERROR IN PROCEDURE XBI$FPUTB
      1553**DCL      1685<<ASSIGN
F.IS_PARTLY_OPEN IN PROCEDURE XBI$FPUTB
      1558**DCL      1681>>IF
F.IS_UNBUFFERED IN PROCEDURE XBI$FPUTB
      1557**DCL      1716>>IF
F.IS_WRITE_AT_EOF IN PROCEDURE XBI$FPUTB
      1552**DCL      1690>>IF
F.STATE IN PROCEDURE XBI$FPUTB
      1573**DCL      1683>>IF       1688<<ASSIGN
FIELD_NEXT_CHAR
       561**DCL       725>>ASSIGN    726<<ASSIGN    726>>ASSIGN    776<<ASSIGN    779<<ASSIGN    783<<ASSIGN
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:37   
       787<<ASSIGN    794>>ASSIGN    796>>IF        803>>ASSIGN    805>>ASSIGN    858<<ASSIGN    861<<ASSIGN
       866>>ASSIGN    868>>IF        875>>ASSIGN    877>>ASSIGN    923<<ASSIGN    927>>ASSIGN    929>>IF
       936>>ASSIGN    938>>ASSIGN    993<<ASSIGN    999<<ASSIGN   1004>>ASSIGN   1006>>IF       1013>>ASSIGN
      1015>>ASSIGN   1028<<ASSIGN   1041>>ASSIGN   1042>>ASSIGN   1052<<ASSIGN   1065>>ASSIGN   1066>>ASSIGN
      1089<<ASSIGN   1091>>ASSIGN   1093>>ASSIGN   1154<<DOINDEX  1155>>ASSIGN   1166<<ASSIGN   1171<<ASSIGN
      1193>>ASSIGN   1195>>ASSIGN   1265<<ASSIGN   1271<<ASSIGN   1278>>ASSIGN   1280>>ASSIGN
FIELD_STRING
       563**DCL       725<<ASSIGN    749--ASSIGN    778<<ASSIGN    782<<ASSIGN    786<<ASSIGN    803<<ASSIGN
       806--ASSIGN    833--ASSIGN    860<<ASSIGN    875<<ASSIGN    878--ASSIGN    904--ASSIGN    936<<ASSIGN
       939--ASSIGN    970--ASSIGN    996<<ASSIGN    998<<ASSIGN   1013<<ASSIGN   1016--ASSIGN   1041<<ASSIGN
      1043--ASSIGN   1065<<ASSIGN   1067--ASSIGN   1091<<ASSIGN   1094--ASSIGN   1155<<ASSIGN   1158--ASSIGN
      1170<<ASSIGN   1193<<ASSIGN   1196--ASSIGN   1270<<ASSIGN   1278<<ASSIGN   1281--ASSIGN
FLUSH_OUT_BUF
       614**PROC      686--CALL      697--CALL      708--CALL     1366--CALL
FORMAT
       434**DCL         6--PROC     1350<>CALL     1354>>CALLBLT  1359--ASSIGN   1388>>DOCASE   1413>>CALLBLT
      1417>>IF       1431>>IF       1434>>CALLBLT  1445>>IF       1447>>CALLBLT  1451>>IF       1461>>CALLBLT
      1468>>DOCASE   1475>>DOCASE
FORMAT_CHAR
      1023**PROC     1496--CALL
FORMAT_DECIMAL_INTEGER
       730**PROC     1477--CALL
FORMAT_E_OR_E
      1199**PROC     1319--CALL     1510--CALL     1514--CALL
FORMAT_F
      1122**PROC     1333--CALL     1506--CALL
FORMAT_G_OR_G
      1284**PROC     1518--CALL     1522--CALL
FORMAT_HEX_INTEGER
       946**PROC     1490--CALL     1493--CALL
FORMAT_INDEX
       564**DCL      1354<<CALLBLT  1356>>ASSIGN   1413<<CALLBLT  1415>>ASSIGN   1447<<CALLBLT  1449>>ASSIGN
FORMAT_LENGTH
       552**DCL       434--IMP-SIZ  1350>>CALL     1350<>CALL     1351<<ASSIGN   1351>>ASSIGN   1354>>CALLBLT
      1359>>ASSIGN   1388>>DOCASE   1413>>CALLBLT  1417>>IF       1431>>IF       1434>>CALLBLT  1445>>IF
      1447>>CALLBLT  1451>>IF       1461>>CALLBLT  1468>>DOCASE   1475>>DOCASE
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:38   
FORMAT_NEXT_CHAR
       565**DCL      1347<<ASSIGN   1354>>CALLBLT  1356>>ASSIGN   1359>>ASSIGN   1360<<ASSIGN   1360>>ASSIGN
      1377<<ASSIGN   1377>>ASSIGN   1388>>DOCASE   1390<<ASSIGN   1390>>ASSIGN   1394<<ASSIGN   1394>>ASSIGN
      1398<<ASSIGN   1398>>ASSIGN   1402<<ASSIGN   1402>>ASSIGN   1413>>CALLBLT  1415>>ASSIGN   1417>>IF
      1418<<ASSIGN   1418>>ASSIGN   1431>>IF       1434>>CALLBLT  1435<<ASSIGN   1435>>ASSIGN   1445>>IF
      1446<<ASSIGN   1446>>ASSIGN   1447>>CALLBLT  1449>>ASSIGN   1451>>IF       1452<<ASSIGN   1452>>ASSIGN
      1461>>CALLBLT  1462<<ASSIGN   1462>>ASSIGN   1468>>DOCASE   1470<<ASSIGN   1470>>ASSIGN   1475>>DOCASE
      1530<<ASSIGN   1530>>ASSIGN
FORMAT_OCTAL_INTEGER
       813**PROC     1480--CALL     1484--CALL
FORMAT_PERCENT
      1050**PROC     1499--CALL
FORMAT_STRING
      1070**PROC     1502--CALL
FORMAT_STRING_TOO_LONG
      1534**LABEL    1354--CALLALT  1413--CALLALT  1447--CALLALT
FORMAT_UNSIGNED_INTEGER
       885**PROC     1487--CALL
FPUTS_RESULT IN PROCEDURE FLUSH_OUT_BUF
       615**DCL       626<>CALL      628<>CALL      629>>IF
GET_DOUBLE_ARGUMENT
       649**PROC     1505--CALL     1509--CALL     1513--CALL     1517--CALL     1521--CALL
GET_WORD_ARGUMENT
       636**PROC      745--CALL      829--CALL      900--CALL      966--CALL     1026--CALL     1076--CALL
      1113--CALL     1419--CALL     1453--CALL
I IN PROCEDURE ADD_PAD_CHARS_TO_FIELD
       722**DCL       724<<DOINDEX
I IN PROCEDURE APPEND_RESULT_STRING
       678**DCL       699<<ASSIGN    700>>ASSIGN    700>>ASSIGN    701>>ASSIGN
I IN PROCEDURE FORMAT_HEX_INTEGER
       949**DCL       975<<DOINDEX   976>>ASSIGN    976>>ASSIGN    979<<DOINDEX   980>>ASSIGN    980>>ASSIGN
INT$ IN PROCEDURE RETURN_CHARS_OUTPUT
      1110**DCL      1111--IMP-PTR  1113<>CALL     1115>>ASSIGN
JUNK
       566**DCL       767<<CALLBLT   849<<CALLBLT   984<<CALLBLT
KEEP_TRAILING_ZEROS IN PROCEDURE FORMAT_G_OR_G
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:39   
      1290**DCL      1316<<ASSIGN   1326>>IF       1334>>IF
LAST_FRACTION_CHAR IN PROCEDURE REMOVE_UNWANTED_ZEROS
      1294**DCL      1296<<ASSIGN   1297>>DOWHILE  1300>>ASSIGN   1300>>ASSIGN   1302<<ASSIGN   1302>>ASSIGN
      1304>>IF       1307>>ASSIGN   1307>>ASSIGN
LC_DIGITS IN PROCEDURE FORMAT_HEX_INTEGER
       950**DCL       976>>ASSIGN
LC_E IN PROCEDURE FORMAT_E_OR_E
      1200**DCL      1199--PROC     1249>>IF
LC_E IN PROCEDURE FORMAT_G_OR_G
      1286**DCL      1284--PROC     1319<>CALL
LEFT_JUSTIFY
       567**DCL       681>>IF        703>>IF       1379<<ASSIGN   1391<<ASSIGN   1421<<ASSIGN   1441>>IF
LOOK_FOR_FLAG_CHARACTERS
      1388**LABEL    1392--GOTO     1396--GOTO     1400--GOTO     1404--GOTO
MAXNEG IN PROCEDURE FORMAT_DECIMAL_INTEGER
       737**DCL       753>>IF
MINUS_MAXINT_BCD IN PROCEDURE FORMAT_DECIMAL_INTEGER
       731**DCL       757>>ASSIGN    758--ASSIGN
NEGATIVE
       568**DCL       756<<ASSIGN    762<<ASSIGN    765<<ASSIGN    777>>IF
OCTETS IN PROCEDURE FORMAT_OCTAL_INTEGER
       819**DCL       837>>ASSIGN    838>>ASSIGN    839>>ASSIGN    840>>ASSIGN    841>>ASSIGN    842>>ASSIGN
       843>>ASSIGN    844>>ASSIGN    845>>ASSIGN    846>>ASSIGN    847>>ASSIGN    848>>ASSIGN
ORIGINAL_PRECISION IN PROCEDURE FORMAT_G_OR_G
      1288**DCL      1314<<ASSIGN   1325>>IF
OUT_BUF
       579**DCL       620>>ASSIGN    624<<ASSIGN    626<>CALL      628<>CALL      683<<ASSIGN    688<<ASSIGN
       694<<ASSIGN    700<<ASSIGN    705<<ASSIGN    710<<ASSIGN
OUT_NEXT_CHAR
       580**DCL       617>>IF        618>>ASSIGN    620>>ASSIGN    620>>ASSIGN    622>>ASSIGN    624>>ASSIGN
       628<>CALL      633<<ASSIGN    682>>DOWHILE   683>>ASSIGN    684>>ASSIGN    685<<ASSIGN    688>>ASSIGN
       689<<ASSIGN    689>>ASSIGN    693>>DOWHILE   694>>ASSIGN    695>>ASSIGN    696<<ASSIGN    700>>ASSIGN
       701<<ASSIGN    701>>ASSIGN    704>>DOWHILE   705>>ASSIGN    706>>ASSIGN    707<<ASSIGN    710>>ASSIGN
       711<<ASSIGN    711>>ASSIGN   1115>>ASSIGN   1345<<ASSIGN
PAD_CHAR IN PROCEDURE APPEND_RESULT_STRING
       677**DCL       680<<ASSIGN    681>>IF        682>>DOWHILE   684<<ASSIGN    684>>ASSIGN    688>>ASSIGN
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:40   
       689>>ASSIGN    703>>IF        704>>DOWHILE   706<<ASSIGN    706>>ASSIGN    710>>ASSIGN    711>>ASSIGN
PAD_CHARS
       581**DCL       792<<ASSIGN    793>>IF        794<<ASSIGN    794>>ASSIGN    796>>IF        801>>IF
       801<>CALL      864<<ASSIGN    865>>IF        866<<ASSIGN    866>>ASSIGN    868>>IF        873>>IF
       873<>CALL      925<<ASSIGN    926>>IF        927<<ASSIGN    927>>ASSIGN    929>>IF        934>>IF
       934<>CALL     1002<<ASSIGN   1003>>IF       1004<<ASSIGN   1004>>ASSIGN   1006>>IF       1011>>IF
      1011<>CALL     1031<<ASSIGN   1032>>IF       1033>>IF       1037<>CALL     1055<<ASSIGN   1056>>IF
      1057>>IF       1061<>CALL     1083<<ASSIGN   1084>>IF       1085>>IF       1090<>CALL
PAD_CHARS IN PROCEDURE ADD_PAD_CHARS_TO_FIELD
       721**DCL       720--PROC      724>>DOINDEX
PAD_CHARS IN PROCEDURE FORMAT_E_OR_E
      1207**DCL      1262<<ASSIGN   1264<<ASSIGN   1266>>IF       1275<>CALL
PAD_CHARS IN PROCEDURE FORMAT_F
      1126**DCL      1178<<ASSIGN   1180<<ASSIGN   1183<<ASSIGN   1183>>ASSIGN   1185>>IF       1190>>IF
      1190<>CALL
PRECISION
       582**DCL       739>>IF        743>>IF        743<<ASSIGN    747>>IF        792>>ASSIGN    822>>IF
       827>>IF        827<<ASSIGN    831>>IF        864>>ASSIGN    894>>IF        898>>IF        898<<ASSIGN
       902>>IF        925>>ASSIGN    960>>IF        964>>IF        964<<ASSIGN    968>>IF       1002>>ASSIGN
      1080>>IF       1080>>ASSIGN   1134>>IF       1134<<ASSIGN   1138<>CALL     1153>>ASSIGN   1164>>IF
      1215>>IF       1215<<ASSIGN   1221>>CALL     1233>>ASSIGN   1239>>IF       1312>>IF       1312<<ASSIGN
      1313>>IF       1313<<ASSIGN   1314>>ASSIGN   1315<<ASSIGN   1315>>ASSIGN   1331<<ASSIGN   1331>>ASSIGN
      1385<<ASSIGN   1453<>CALL     1455<<ASSIGN   1461<<CALLBLT
P_ARGUMENT_BLOCK$
       435**DCL         6--PROC     1342>>ASSIGN
P_ARGUMENT_BLOCK_SIZE
       436**DCL         6--PROC     1343>>ASSIGN
QUADS IN PROCEDURE FORMAT_HEX_INTEGER
       956**DCL       976>>ASSIGN    980>>ASSIGN
REMOVE_UNWANTED_ZEROS IN PROCEDURE FORMAT_G_OR_G
      1292**PROC     1327--CALL     1334--CALL
RESULT
       550**DCL         6--PROC     1346<<ASSIGN   1371<<ASSIGN   1535<<ASSIGN   1539<<ASSIGN
RESULT IN PROCEDURE XBI$FPUTB
      1658**DCL      1542--PROC     1717<<ASSIGN   1721<<ASSIGN
RESULT$
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:41   
       583**DCL       585--IMP-PTR   694>>ASSIGN    700>>ASSIGN    749<<ASSIGN    806<<ASSIGN    833<<ASSIGN
       878<<ASSIGN    904<<ASSIGN    939<<ASSIGN    970<<ASSIGN   1016<<ASSIGN   1043<<ASSIGN   1067<<ASSIGN
      1094<<ASSIGN   1097<<ASSIGN   1101<<ASSIGN   1158<<ASSIGN   1196<<ASSIGN   1281<<ASSIGN   1297>>DOWHILE
      1300>>ASSIGN   1300>>ASSIGN   1304>>IF       1307>>ASSIGN   1307>>ASSIGN   1321>>CALLBLT  1322>>IF
      1359<<ASSIGN
RESULT_NEXT_CHAR
       584**DCL       692<<ASSIGN    693>>DOWHILE   694>>ASSIGN    695<<ASSIGN    695>>ASSIGN    699>>ASSIGN
       700>>ASSIGN
RESULT_STRING
       585**DCL       694>>ASSIGN    700>>ASSIGN   1297>>DOWHILE  1300<<ASSIGN   1300>>ASSIGN   1304>>IF
      1307<<ASSIGN   1307>>ASSIGN   1321>>CALLBLT  1322>>IF
RETURN_CHARS_OUTPUT
      1109**PROC     1525--CALL
RETURN_ERROR IN PROCEDURE XBI$FPUTB
      1721**LABEL    1681--CALLALT  1686--GOTO     1691--CALLALT  1713--CALLALT  1716--CALLALT
S
       549**DCL         6--PROC      620<<ASSIGN   1369--IF       1370<<ASSIGN
S IN PROCEDURE XBI$FPUTB
      1544**DCL      1542--PROC     1697>>ASSIGN   1705>>ASSIGN
SET_ERRNO
       605**PROC      641--CALL      667--CALL      797--CALL      869--CALL      930--CALL     1007--CALL
      1034--CALL     1058--CALL     1086--CALL     1150--CALL     1186--CALL     1428--CALL     1458--CALL
      1527--CALL     1534--CALL
SIGN_MODE IN PROCEDURE FORMAT_E_OR_E
      1208**DCL      1223<<ASSIGN   1225<<ASSIGN   1227<<ASSIGN   1234<>CALL     1258>>IF
SIGN_MODE IN PROCEDURE FORMAT_F
      1127**DCL      1140<<ASSIGN   1142<<ASSIGN   1144<<ASSIGN   1146<>CALL
SPACE IN PROCEDURE XBI$FPUTB
      1662**DCL      1695<<ASSIGN   1696>>IF       1705>>ASSIGN   1705>>ASSIGN   1707>>ASSIGN   1710>>ASSIGN
      1711>>ASSIGN
START IN PROCEDURE XBI$FPUTB
      1660**DCL      1693<<ASSIGN   1697>>ASSIGN   1705>>ASSIGN   1711<<ASSIGN   1711>>ASSIGN
STR$ IN PROCEDURE FORMAT_STRING
      1071**DCL      1072--IMP-PTR  1076<>CALL     1078>>CALL     1091>>ASSIGN   1097>>ASSIGN   1101>>ASSIGN
STRING IN PROCEDURE FORMAT_E_OR_E
      1209**DCL      1234<>CALL     1240>>CALLBLT  1242<<ASSIGN   1242>>ASSIGN   1250>>CALLBLT  1251<<ASSIGN
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:42   
      1258>>IF       1268>>DOSELCT  1270>>ASSIGN   1278>>ASSIGN
STRING IN PROCEDURE FORMAT_F
      1128**DCL      1146<>CALL     1146--CALL     1168>>DOSELCT  1170>>ASSIGN   1177>>IF       1193>>ASSIGN
STRING IN PROCEDURE FORMAT_STRING
      1072**DCL      1078<>CALL     1091>>ASSIGN
STRING_LEN IN PROCEDURE FORMAT_E_OR_E
      1210**DCL      1233<<ASSIGN   1234<>CALL     1240>>CALLBLT  1241>>ASSIGN   1244<<ASSIGN   1244>>ASSIGN
      1250>>CALLBLT  1262>>ASSIGN   1277>>ASSIGN
STRING_LEN IN PROCEDURE FORMAT_F
      1129**DCL      1146<>CALL     1164<<ASSIGN   1164>>ASSIGN   1183>>ASSIGN   1185>>IF       1192>>ASSIGN
STRING_LEN IN PROCEDURE FORMAT_STRING
      1073**DCL      1072--IMP-SIZ  1078>>CALL     1078<>CALL     1080<<ASSIGN   1080>>ASSIGN   1083>>ASSIGN
      1085>>IF       1091>>ASSIGN   1091>>ASSIGN   1091>>ASSIGN   1093>>ASSIGN   1096>>ASSIGN   1100>>ASSIGN
STRING_NEXT_CHAR IN PROCEDURE FORMAT_E_OR_E
      1211**DCL      1254<<ASSIGN   1259<<ASSIGN   1262>>ASSIGN   1267>>IF       1272<<ASSIGN   1277>>ASSIGN
      1278>>ASSIGN
STRING_NEXT_CHAR IN PROCEDURE FORMAT_F
      1130**DCL      1167<<ASSIGN   1172<<ASSIGN   1177>>IF       1192>>ASSIGN   1193>>ASSIGN
S_LENGTH IN PROCEDURE XBI$FPUTB
      1657**DCL      1542--PROC     1544--IMP-SIZ  1674>>ASSIGN   1697>>ASSIGN   1705>>ASSIGN
S_NEXT_CHAR
       586**DCL       620>>ASSIGN    622<<ASSIGN    622>>ASSIGN   1348<<ASSIGN   1370>>ASSIGN
TABLE_VALUE
       587**DCL      1354<<CALLBLT  1364>>IF       1413<<CALLBLT  1447<<CALLBLT
TEMP IN PROCEDURE FORMAT_E_OR_E
      1212**DCL      1240<<CALLBLT  1241>>ASSIGN   1242>>ASSIGN   1242>>ASSIGN   1250<<CALLBLT  1251>>ASSIGN
TEMP IN PROCEDURE FORMAT_F
      1131**DCL      1136<>CALL     1138<>CALL     1146<>CALL     1192<<ASSIGN   1193>>ASSIGN   1193>>ASSIGN
      1195>>ASSIGN
TEMP_LEN IN PROCEDURE FORMAT_DECIMAL_INTEGER
       732**DCL       758<<ASSIGN    769<<ASSIGN    773<<ASSIGN    792>>ASSIGN    794>>ASSIGN    796>>IF
       803>>ASSIGN    803>>ASSIGN    805>>ASSIGN
TEMP_LEN IN PROCEDURE FORMAT_HEX_INTEGER
       951**DCL       986<<ASSIGN    990<<ASSIGN   1002>>ASSIGN   1004>>ASSIGN   1006>>IF       1013>>ASSIGN
      1013>>ASSIGN   1015>>ASSIGN
TEMP_LEN IN PROCEDURE FORMAT_OCTAL_INTEGER
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:43   
       814**DCL       851<<ASSIGN    855<<ASSIGN    864>>ASSIGN    866>>ASSIGN    868>>IF        875>>ASSIGN
       875>>ASSIGN    877>>ASSIGN
TEMP_LEN IN PROCEDURE FORMAT_UNSIGNED_INTEGER
       887**DCL       909<<ASSIGN    914<<ASSIGN    914>>ASSIGN    917>>IF        920<<ASSIGN    925>>ASSIGN
       927>>ASSIGN    929>>IF        936>>ASSIGN    936>>ASSIGN    938>>ASSIGN
TEMP_START IN PROCEDURE FORMAT_DECIMAL_INTEGER
       733**DCL       759<<ASSIGN    767<<CALLBLT   769>>ASSIGN    772<<ASSIGN    803>>ASSIGN
TEMP_START IN PROCEDURE FORMAT_HEX_INTEGER
       952**DCL       984<<CALLBLT   986>>ASSIGN    989<<ASSIGN   1013>>ASSIGN
TEMP_START IN PROCEDURE FORMAT_OCTAL_INTEGER
       815**DCL       849<<CALLBLT   851>>ASSIGN    854<<ASSIGN    875>>ASSIGN
TEMP_START IN PROCEDURE FORMAT_UNSIGNED_INTEGER
       888**DCL       908<<ASSIGN    912<<ASSIGN    912>>ASSIGN    913>>ASSIGN    918<<ASSIGN    918>>ASSIGN
       919>>ASSIGN    936>>ASSIGN
TEMP_STR IN PROCEDURE FORMAT_DECIMAL_INTEGER
       735**DCL       757<<ASSIGN    766<<CALLBLT   767>>CALLBLT   803>>ASSIGN
TEMP_STR IN PROCEDURE FORMAT_HEX_INTEGER
       954**DCL       976<<ASSIGN    980<<ASSIGN    984>>CALLBLT  1013>>ASSIGN
TEMP_STR IN PROCEDURE FORMAT_OCTAL_INTEGER
       817**DCL       837<<ASSIGN    838<<ASSIGN    839<<ASSIGN    840<<ASSIGN    841<<ASSIGN    842<<ASSIGN
       843<<ASSIGN    844<<ASSIGN    845<<ASSIGN    846<<ASSIGN    847<<ASSIGN    848<<ASSIGN    849>>CALLBLT
       875>>ASSIGN
TEMP_STR IN PROCEDURE FORMAT_UNSIGNED_INTEGER
       890**DCL       913<<ASSIGN    919<<ASSIGN    936>>ASSIGN
TEMP_STRING IN PROCEDURE FORMAT_E_OR_E
      1213**DCL      1217<>CALL     1221<>CALL     1234<>CALL
TEMP_STRING IN PROCEDURE FORMAT_F
      1132**DCL      1136<>CALL     1138<>CALL     1146<>CALL
TEN IN PROCEDURE FORMAT_UNSIGNED_INTEGER
       892**DCL       911>>ASSIGN    915>>ASSIGN
TRAILING_CHARS IN PROCEDURE REMOVE_UNWANTED_ZEROS
      1293**DCL      1292--PROC     1296>>ASSIGN   1299>>IF       1300>>ASSIGN   1300>>ASSIGN   1306>>IF
      1307>>ASSIGN   1307>>ASSIGN
TS_LENGTH IN PROCEDURE XBI$FPUTB
      1661**DCL      1674<<ASSIGN   1694>>DOWHILE  1696>>IF       1697>>ASSIGN   1697>>ASSIGN   1699>>ASSIGN
      1702<<ASSIGN   1710<<ASSIGN   1710>>ASSIGN
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:44   
UC_DIGITS IN PROCEDURE FORMAT_HEX_INTEGER
       957**DCL       980>>ASSIGN
USE_LC_DIGITS IN PROCEDURE FORMAT_HEX_INTEGER
       947**DCL       946--PROC      974>>IF        995>>IF
USE_MINUS_SPACE_SIGN
       588**DCL       785>>IF       1143>>IF       1226>>IF       1382<<ASSIGN   1399<<ASSIGN   1409<<ASSIGN
USE_PLUS_MINUS_SIGN
       589**DCL       781>>IF       1141>>IF       1224>>IF       1381<<ASSIGN   1395<<ASSIGN   1409>>IF
USE_VARIANT
       590**DCL       822>>IF        859>>IF        994>>IF       1164>>IF       1239>>IF       1316>>ASSIGN
      1317<<ASSIGN   1383<<ASSIGN   1403<<ASSIGN   1483<<ASSIGN
USE_ZERO_PAD_CHARACTER
       591**DCL       739>>IF        740<<ASSIGN    793>>IF        822>>IF        824<<ASSIGN    865>>IF
       894>>IF        895<<ASSIGN    926>>IF        960>>IF        961<<ASSIGN   1003>>IF       1030>>IF
      1054>>IF       1082>>IF       1182>>IF       1261>>IF       1380<<ASSIGN   1432<<ASSIGN   1441<<ASSIGN
VALUE IN PROCEDURE FORMAT_CHAR
      1024**DCL      1026<>CALL     1041>>ASSIGN
VALUE IN PROCEDURE FORMAT_DECIMAL_INTEGER
       736**DCL       745<>CALL      747>>IF        753>>IF        761>>IF        763<<ASSIGN    763>>ASSIGN
       766>>CALLBLT
VALUE IN PROCEDURE FORMAT_E_OR_E
      1201**DCL      1199--PROC     1217<>CALL
VALUE IN PROCEDURE FORMAT_F
      1123**DCL      1122--PROC     1136<>CALL
VALUE IN PROCEDURE FORMAT_G_OR_G
      1285**DCL      1284--PROC     1319<>CALL     1333<>CALL
VALUE IN PROCEDURE FORMAT_HEX_INTEGER
       955**DCL       956--REDEF     966<>CALL      968>>IF
VALUE IN PROCEDURE FORMAT_OCTAL_INTEGER
       818**DCL       819--REDEF     829<>CALL      831>>IF
VALUE IN PROCEDURE FORMAT_UNSIGNED_INTEGER
       891**DCL       900<>CALL      902>>IF        910>>DOWHILE   911>>ASSIGN    915<<ASSIGN    915>>ASSIGN
VALUE IN PROCEDURE GET_DOUBLE_ARGUMENT
       650**DCL       649--PROC      671<<ASSIGN
VALUE IN PROCEDURE GET_WORD_ARGUMENT
       637**DCL       636--PROC      644<<ASSIGN
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:45   
WIDTH
       592**DCL       680>>ASSIGN    794>>ASSIGN    866>>ASSIGN    927>>ASSIGN   1004>>ASSIGN   1031>>ASSIGN
      1055>>ASSIGN   1083>>ASSIGN   1149>>IF       1153<<ASSIGN   1153>>ASSIGN   1154>>DOINDEX  1157>>ASSIGN
      1183>>ASSIGN   1185>>IF       1262>>ASSIGN   1358<<ASSIGN   1384<<ASSIGN   1419<>CALL     1420>>IF
      1422<<ASSIGN   1422>>ASSIGN   1425<<ASSIGN   1434<<CALLBLT
XB$ERR$AUXIO_FILE_POINTER
       321**DCL      1677<>CALL
XB$ERR$FIELD_TOO_BIG
       305**DCL       797<>CALL      869<>CALL      930<>CALL     1007<>CALL     1034<>CALL     1058<>CALL
      1086<>CALL     1150<>CALL     1186<>CALL
XB$ERR$FORMAT_STRING_TOO_LONG
       304**DCL      1534<>CALL
XB$ERR$NO_SUCH_ARGUMENT
       301**DCL       641<>CALL      667<>CALL
XB$ERR$UNKNOWN_FORMAT_CONV
       303**DCL      1527<>CALL
XB$ERR$WIDTH_OR_PRECISION_TB
       302**DCL      1428<>CALL     1458<>CALL
XB$ERR$WRITE_AFTER_READ
       298**DCL      1684<>CALL
XBI$COMPLETE_OPEN IN PROCEDURE XBI$FPUTB
      1670**DCL-ENT  1681--CALL
XBI$FFLUSH
       603**DCL-ENT  1368--CALL
XBI$FFLUSH IN PROCEDURE XBI$FPUTB
      1672**DCL-ENT  1716--CALL
XBI$FPUTB
      1542**PROC      628--CALL
XBI$FPUTS
       597**DCL-ENT   626--CALL
XBI$NON_DIGIT_TABLE
       571**DCL      1413>>CALLBLT  1447>>CALLBLT
XBI$NON_ZERO_TABLE
       575**DCL       767>>CALLBLT   849>>CALLBLT   984>>CALLBLT
XBI$NULL_OR_PERCENT_TABLE
       577**DCL      1354>>CALLBLT
PL6.E3A0      #001=XBI$PRINT File=xbi_io_print:6.:XBC3TSI                        FRI 01/06/95 11:27 Page:46   
XBI$POSITION_TO_EOF IN PROCEDURE XBI$FPUTB
      1671**DCL-ENT  1691--CALL
XBI$STRLEN
       594**DCL-ENT  1350--CALL
XBI$STRLEN IN PROCEDURE FORMAT_STRING
      1074**DCL-ENT  1078--CALL
XBI$WRITE_THIS_RECORD IN PROCEDURE XBI$FPUTB
      1668**DCL-ENT  1713--CALL
XBI_SET_ERRNO
       595**DCL-ENT   611--CALL
XBI_SET_STREAM_ERRNO
       596**DCL-ENT   609--CALL
XBI_SET_STREAM_ERRNO IN PROCEDURE XBI$FPUTB
      1667**DCL-ENT  1677--CALL     1684--CALL
XB_IO_ERROR IN PROCEDURE XBI$FPUTB
      1669**DCL-ENT  1678--CALL
XPN_5PREPARE_FOR_EXP_FMT
       601**DCL-ENT  1221--CALL
XPN_5PREPARE_FOR_FIXED_FMT
       599**DCL-ENT  1138--CALL
XPN_7DTOLS
       598**DCL-ENT  1136--CALL     1217--CALL
XPN_7ERJE1
       602**DCL-ENT  1234--CALL
XPN_7FLJ
       600**DCL-ENT  1146--CALL
