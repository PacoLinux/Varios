

11:10 JAN 06 '95 xb_stdio_i6.:XBC3TSI                                      1    
    1      /*M*  xb_stdio_i6    -C File Header Macros */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /* ####### WARNING! ######## Much of what is defined in here is also
    9         duplicated in the stdio.h header file.
   10      */
   11
   12      /* values for F.state field */
   13      %EQU F_reading_state          = 0;
   14      %EQU F_writing_state          = 1;
   15      %EQU F_dont_care_state        = 2;
   16      %EQU F_undefined_state        = 3;
   17
   18      DCL XBI$FIRST_FILE_HEADER        PTR EXTROOT;
   19
   20      %MACRO File_Header (Name=File_Header, Stclass=" ");
   21         DCL 1 Name Stclass DALIGNED,
   22               2 IS_TEXT         BIT(1) UNAL,
   23               2 IS_EOF          BIT(1) UNAL,
   24               2 IS_SAVED_CHAR   BIT(1) UNAL,
   25               2 IS_BUFFER_MODIFIED BIT(1) UNAL,
   26               2 IS_WRITES_OK    BIT(1) UNAL,
   27               2 IS_WRITE_AT_EOF BIT(1) UNAL,
   28               2 IS_ERROR        BIT(1) UNAL,
   29               2 IS_OPEN         BIT(1) UNAL,
   30               2 HAS_AUTO_BUFFER BIT(1) UNAL,
   31               2 IS_READS_OK     BIT(1) UNAL,
   32               2 IS_UNBUFFERED   BIT(1) UNAL,
   33               2 IS_PARTLY_OPEN  BIT(1) UNAL,
   34               2 CANCEL_XSA      BIT(1) UNAL,
   35               2 IS_IC           BIT(1)  UNAL,
   36               2 IS_SHARED       BIT(1)  UNAL,
   37               2 IS_FLUSHED      BIT(1)  UNAL,
11:10 JAN 06 '95 xb_stdio_i6.:XBC3TSI                                      2    
   38               2 *               BIT(20) UNAL,
   39               2 SAVED_CHAR      UBIN,
   40               2 RECORD_POSITION SBIN,
   41               2 CHARACTER_POSITION UBIN,
   42               2 CONTINUED_IOS   UBIN,
   43               2 ARS             UBIN,
   44               2 LAST_RECORD     SBIN,
   45               2 BUFFER$         PTR,
   46               2 BUFFER_SIZE     UBIN,
   47               2 XSA$            PTR,
   48               2 STATE           UBIN,
   49               2 NEXT_FILE_HEADER PTR,
   50               2 KEY             ALIGNED,
   51                  3 LEN          UBIN BYTE UNAL,
   52                  3 RECORD       UBIN (27) UNAL,
   53               2 AUXIO$          PTR,
   54               2 MOD_TIME        SBIN,
   55               2 CREATE_TIME     SBIN,
   56               2 USER            SBIN,
   57               2 RFU1            SBIN,
   58               2 RFU2            SBIN,
   59               2 RFU3            SBIN,
   60               2 FPT_READ DALIGNED,
   61                  3 V_           VECTOR,
   62                  3 KEY_         VECTOR,
   63                  3 BUF_         VECTOR,
   64                  3 STATION_     VECTOR,
   65                  3 V            DALIGNED,
   66                     4 DCB#      UBIN (18) UNAL,
   67                     4 WAIT#     BIT (1),
   68                     4 KEYS#     BIT (1),
   69                     4 KEYR#     BIT (1),
   70                     4 ID#       BIT (1),
   71                     4 KEYCHNG#  BIT (1),
   72                     4 FULL#     BIT (1),
   73                     4 IDS#      BIT (1),
   74                     4 PBS#      BIT (1),
11:10 JAN 06 '95 xb_stdio_i6.:XBC3TSI                                      3    
   75                     4 PBR#      BIT (1),
   76                     4 INDX#     UBIN (9) UNAL,
   77                     4 KEYTYPE# REDEF INDX# UBIN BYTE CALIGNED,
   78                     4 EVENT#    SBIN,
   79                     4 SEED#     BIT (36),
   80                     4 DVBYTE,
   81                        5 TOP#      BIT (1),
   82                        5 BP#       BIT (1),
   83                        5 REREAD#   BIT (1),
   84                        5 VFC#      REDEF REREAD# BIT(1),
   85                        5 BIN#      BIT (1),
   86                        5 TRANS#    BIT (1),
   87                        5  *        BIT (1),
   88                        5 NODAT#    BIT (1),
   89                        5  *        BIT (1),
   90                        5 CONT#     BIT (1),
   91                     4 STRPVFC#  BIT (1),
   92                     4  *        BIT (8),
   93                     4 RECNUM#   UBIN (18) UNAL,
   94                     4 SINPUTSIZE# UBIN (18) UNAL,
   95                     4 REREADPOS# UBIN (18) UNAL,
   96                     4  *        UBIN UNAL,
   97
   98               2 FPT_WRITE       DALIGNED,
   99                  3 V_           VECTOR,
  100                  3 KEY_         VECTOR,
  101                  3 BUF_         VECTOR,
  102                  3 STATION_     VECTOR,
  103                  3 V            DALIGNED,
  104                     4 DCB#      UBIN (18) UNAL,
  105                     4 WAIT#     BIT (1),
  106                     4  *        BIT (2),
  107                     4 ID#       BIT (1),
  108                     4  *        BIT (1),
  109                     4 FULL#     BIT (1),
  110                     4  *        BIT (3),
  111                     4 ONEWKEY#  BIT (1),
11:10 JAN 06 '95 xb_stdio_i6.:XBC3TSI                                      4    
  112                     4 NEWKEY#   BIT (1),
  113                     4 REWRITE#  BIT (1),
  114                     4 NOTIME#   BIT (1),
  115                     4  *        BIT (1),
  116                     4 KEYTYPE#  UBIN(4) UNAL,
  117                     4 EVENT#    SBIN,
  118                     4 SEED#     BIT (36),
  119                     4 DVBYTE,
  120                        5 TOP#      BIT (1),
  121                        5 BP#       BIT (1),
  122                        5 VFC#      BIT(1),
  123                        5 REREAD#   REDEF VFC# BIT (1),
  124                        5 BIN#      BIT (1),
  125                        5 TRANS#    BIT (1),
  126                        5 RRR#      BIT (1),
  127                        5 NODAT#    BIT (1),
  128                        5  *        BIT (1),
  129                        5 CONT#     BIT (1),
  130                     4  *           UBIN (9) UNAL,
  131                     4  *           UBIN (18) UNAL;
  132      %MEND;
  133
  134      %MACRO Buffer (Owner=F);
  135         DCL BUFFER                 CHAR (Owner.BUFFER_SIZE) BASED (Owner.BUFFER$);
  136      %MEND;
  137
  138      /* The fields in a file header are used as follows:
  139
  140         F.is_text is '1'B if this is a text stream, '0'B if it is a binary
  141            stream.
  142
  143         F.is_open is '1'B if the stream is open.  '0'B implies that the stream is
  144            closed and no DCB is associated with the stream, ie.
  145            F.fpt_read.v.dcb# and F.fpt_write.v.dcb# will be zero.
  146
  147         F.is_eof is '1'B if the stream is positioned at eof, '0'B if it is not.
  148
11:10 JAN 06 '95 xb_stdio_i6.:XBC3TSI                                      5    
  149         F.is_saved_char is '1'B if there is a saved character in the F.saved_char
  150            field.  This will be the next character read.
  151
  152         F.is_buffer_modified is '1'B if the contents of the buffer have been
  153            modified.  If the stream is positioned away from this record, fflush
  154            is called, or the file is closed then the buffer will have to be
  155            output.
  156
  157         F.is_writes_ok is '1'B if writes are allowed.
  158
  159         F.is_reads_ok is '1'B if reads are allowed.
  160
  161         F.is_write_at_eof is '1'B if the stream was open in append mode, in which
  162            case all writes are forced to eof.
  163
  164         F.is_error is '1'B if an error has occured on the stream.  This flag is
  165            cleared if the rewind or clearerr functions are called.
  166
  167         F.has_auto_buffer is '1'B if the stream is using a buffer that was
  168            automatically allocated and is '0'B if the user supplied a buffer.
  169
  170         F.is_unbuffered is '1'B if the stream is unbuffered.  This means that
  171            calls to fflush will cause output to be written immediately.
  172
  173         F.cancel_xsa is '1'B if the user overruled full buffering on the stream
  174            with a call to setbuf or setvbuf.
  175
  176         F.is_partly_open means that the stream is not completely ready for
  177            reading or writing.  This is the state of the file after a call
  178            to fopen or freopen.  It will be cleared by a call to
  179            any function that can read or write.
  180
  181         F.saved_char contains the saved character if F.is_saved_char is set.
  182
  183         F.record_position indicates what record the stream is positioned to.
  184            Record 0 is bof.
  185
11:10 JAN 06 '95 xb_stdio_i6.:XBC3TSI                                      6    
  186         F.character_position points to the next character in the buffer that
  187            will be read or written over.  In a text file, the character position
  188            within a record is F.continued_ios*F.buffer_size + F.character_position.
  189
  190         F.continued_ios is applicable only to text files.  It specifies how many
  191            continued reads/writes have been done to process the current record.
  192
  193         F.ars indicates how many characters are in the buffer.
  194
  195         F.last_record is the number of the last record that physically exists in
  196            the file.  F.record_position could be one greater than F.last_record
  197            if the file is positioned at eof.  In the latter case, F.last_record
  198            will be incremented when the record is actually written to the file.
  199
  200         F.buffer$ is a pointer to the buffer associated with the stream.
  201
  202         F.buffer_size specifies how many characters the buffer will hold.
  203
  204         F.state is used to enforce the restrictions on switching between reads
  205            and writes.
  206               F_reading_state means that writes cannot be made.
  207               F_writing_state means that reads cannot be made.
  208               F_dont_care_state means that reads or writes can be made.
  209               F_undefined_state means that the stream isn't completely
  210                  initialized yet.
  211
  212         F.next_file_header points to the next open file header.  If the file is
  213            closed, F.next_file_header is NIL.  This is needed
  214            so the XKI_CLOSE_DCBS routine can find and close any open files.
  215      */
  216
  217      %MACRO fpos_t (NAME=fpos_t, Stclass=" ");
  218         DCL 1 NAME Stclass ALIGNED,
  219            2  record_position            UBIN,
  220            2  character_position         UBIN;
  221      %MEND;
  222
11:10 JAN 06 '95 xb_stdio_i6.:XBC3TSI                                      7    
  223
  224      %EQU BUFSIZ = 1024;
  225      %EQU OPEN_MAX = 28;
  226      %EQU EOF = -1;
  227
  228      /* third argument to setvbuf function */
  229      %EQU SETVBUF_IOFBF = 0;
  230      %EQU SETVBUF_IOLBF = 1;
  231      %EQU SETVBUF_IONBF = 2;
  232
  233      /* third argument to fseek */
  234      %EQU SEEK_CUR = 1;
  235      %EQU SEEK_END = 2;
  236      %EQU SEEK_SET = 0;
  237
  238      /* special ascii characters */
  239
  240      %EQU ascii_zero = 0;
  241      %EQU newline = %(bitbin ('012'O));
  242      %EQU formfeed = %(bitbin ('014'O));

