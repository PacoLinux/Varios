

CC.C02    File=xb_interface:c.:XBC3TSI                                              Fri Jan  6 1995  Page=1  
        1         1             #include <stdio.h>
        2         2             #include <limits.h>
        3         3             #include <stdlib.h>
        4         4             #include <string.h>
        5         5             #include <locale.h>
        6         6             #include <time.h>
        7         7             #include <b$jit_c.h>
        8         8
        9         9             extern struct b_jit *B$JIT$;
       10        10
       11        11             extern void XBI$UTSTOGMT(int *, int *);
       12        12
       13        13                const    char     C_locale[]   =  "C";
       14        14                const    char     USA_locale[]   =  "USA";
       15        15                const    char     ENGCAN_locale[]=  "ENGLISH_CANADA";
       16        16                const    char     period_const[] =  ".";
       17        17                const    char     comma_const[]  =  ",";
       18        18                const    char     dollar_const[] =  "$";
       19        19                const    char     minus_const[]  =  "-";
       20        20                const    char     grouping_const[]  =  "\3";
       21        21                const    char     USA_symbol[]   =  "USA ";
       22        22                const    char     CAN_symbol[]   =  "CAN ";
       23        23
       24        24             struct lconv *localeconv ( )
       25        25             {
       26        26    1           char *locale;
       27        27    1           static struct lconv result;
       28        28    1
       29        29    1           locale = setlocale (LC_MONETARY, NULL);
       30        30    1           if (!strcmp (locale, C_locale)) {
       31        31    2              result.mon_decimal_point = "";
       32        32    2              result.mon_thousands_sep = "";
       33        33    2              result.mon_grouping = "";
       34        34    2              result.positive_sign = "";
       35        35    2              result.negative_sign = "";
       36        36    2              result.int_frac_digits = CHAR_MAX;
       37        37    2              result.frac_digits = CHAR_MAX;
CC.C02    File=xb_interface:c.:XBC3TSI                                              Fri Jan  6 1995  Page=2  
       38        38    2              result.p_cs_precedes = CHAR_MAX;
       39        39    2              result.p_sep_by_space = CHAR_MAX;
       40        40    2              result.n_cs_precedes = CHAR_MAX;
       41        41    2              result.n_sep_by_space = CHAR_MAX;
       42        42    2              result.p_sign_posn = CHAR_MAX;
       43        43    2              result.n_sign_posn = CHAR_MAX;
       44        44    2           }
       45        45    1           if ((!strcmp (locale, USA_locale)) ||
       46        46    1              (!strcmp (locale, ENGCAN_locale))) {
       47        47    2              result.mon_decimal_point = (char *) period_const;
       48        48    2              result.mon_thousands_sep = (char *) comma_const;
       49        49    2              result.mon_grouping = (char *) grouping_const;
       50        50    2              result.positive_sign = "";
       51        51    2              result.negative_sign = (char *) minus_const;
       52        52    2              result.int_frac_digits = 2;
       53        53    2              result.frac_digits = 2;
       54        54    2              result.p_cs_precedes = 1;
       55        55    2              result.p_sep_by_space = 0;
       56        56    2              result.n_cs_precedes = 1;
       57        57    2              result.n_sep_by_space = 0;
       58        58    2              result.p_sign_posn = 1;
       59        59    2              result.n_sign_posn = 2;
       60        60    2           }
       61        61    1
       62        62    1           locale = setlocale (LC_NUMERIC, NULL);
       63        63    1           if (!strcmp (locale, C_locale)) {
       64        64    2              result.decimal_point = (char *) period_const;
       65        65    2              result.thousands_sep = "";
       66        66    2              result.grouping = "";
       67        67    2              result.int_curr_symbol = "";
       68        68    2              result.currency_symbol = "";
       69        69    2           }
       70        70    1           if (!strcmp (locale, USA_locale)) {
       71        71    2              result.decimal_point = (char *) period_const;
       72        72    2              result.thousands_sep = (char *) comma_const;
       73        73    2              result.grouping = (char *) grouping_const;
       74        74    2              result.int_curr_symbol = (char *) USA_symbol;
CC.C02    File=xb_interface:c.:XBC3TSI                                              Fri Jan  6 1995  Page=3  
       75        75    2              result.currency_symbol = (char *) dollar_const;
       76        76    2           }
       77        77    1           if (!strcmp (locale, "ENGLISH_CANADA")) {
       78        78    2              result.decimal_point = ".";
       79        79    2              result.thousands_sep = ",";
       80        80    2              result.grouping = "\3";
       81        81    2              result.int_curr_symbol = (char *) CAN_symbol;
       82        82    2              result.currency_symbol = (char *) dollar_const;
       83        83    2           }
       84        84    1
       85        85    1           return &result;
       86        86    1        }
       87        87
       88        88             #pragma  LIST  EJECT
CC.C02    File=xb_interface:c.:XBC3TSI                                              Fri Jan  6 1995  Page=4  
       89        89
       90        90             char *ctime (timer)
       91        91                time_t *timer;
       92        92             {
       93        93    1           return asctime (localtime (timer));
       94        94    1        }
       95        95
       96        96             #pragma  LIST  EJECT
CC.C02    File=xb_interface:c.:XBC3TSI                                              Fri Jan  6 1995  Page=5  
       97        97
       98        98             /*F*    NAME:    mktemp
       99        99                     PURPOSE: make a unique filename
      100       100
      101       101                     DESCRIPTION:
      102       102
      103       103                        This function replaces the contents of the string pointed
      104       104                        to by template by a unique file name, and returns the
      105       105                        the address of template.  The string in template should
      106       106                        look like a file name with six trailing Xs; mktemp will
      107       107                        replace the Xs with a number.
      108       108                        The number will be chosen so that the resulting name does
      109       109                        not duplicate the name of an existing file.  If there are
      110       110                        less than 6 Xs, the number of X's will determine the max
      111       111                        number of files.
      112       112
      113       113                        Mktemp returns its argument except when it runs out of
      114       114                        numbers, in which case it the result is a pointer to the
      115       115                        empty string "".
      116       116             */
      117       117
      118       118             char *
      119       119             mktemp(char *template)
      120       120             {
      121       121    1           char  *ptr = 0;
      122       122    1           int temp_len = strlen(template);
      123       123    1           int maxnum[7] = {0, 9, 99, 999, 9999, 99999, 999999};
      124       124    1           int numdig;
      125       125    1           char  *dirpos;
      126       126    1           static int  cur_file = 0;
      127       127    1
      128       128    1        /*    Find the position of the directory if it exists and save it   */
      129       129    1
      130       130    1           if (dirpos = strrchr(template, '.')) {
      131       131    2              temp_len -= (dirpos - template - 1);
      132       132    2              *dirpos++ = '\0';
      133       133    2           }
CC.C02    File=xb_interface:c.:XBC3TSI                                              Fri Jan  6 1995  Page=6  
      134       134    1
      135       135    1        /* Get the position of the first 'X' */
      136       136    1
      137       137    1           if (ptr = strrchr(template, 'X')) {
      138       138    2              numdig = 0;
      139       139    2              while ((*ptr == 'X') && (numdig < 6)) {
      140       140    3                 ptr--;
      141       141    3                 numdig++;
      142       142    3              }
      143       143    2              *++ptr = '\0';
      144       144    2           }
      145       145    1           else {
      146       146    2              return("");
      147       147    2           }
      148       148    1           if (CREATE_TMPFILE(template, dirpos, maxnum[numdig], &cur_file, template))
                               {
      149       149    2              return("");
      150       150    2           }
      151       151    1           return (template);
      152       152    1        }
      153       153
      154       154             #pragma  LIST  EJECT
CC.C02    File=xb_interface:c.:XBC3TSI                                              Fri Jan  6 1995  Page=7  
      155       155
      156       156             /*F*    NAME:    tempnam
      157       157                     PURPOSE: make a unique filename in a specific directory
      158       158
      159       159                     DESCRIPTION:
      160       160
      161       161                        This function generates a file name that can safely be
      162       162                        used for a temporary file.  The argument dir points to
      163       163                        the name of the directory where the filename is to be
      164       164                        created.  The pfx argument is used as a prefix to the
      165       165                        name created by tempnam.  If dir is a null pointer the
      166       166                        filename is created in the current working directory.
      167       167
      168       168                        tempnam returns a pointer to the file name generated.
      169       169                        This value will be overwritten on successive calls to
      170       170                        the function.  If a name can not be created, a null
      171       171                        pointer is returned
      172       172             */
      173       173
      174       174             char *
      175       175             tempnam(char *dir, char *pfx) {
      176       176    1           static char  result[100];
      177       177    1           static int  cur_file = 0;
      178       178    1           char  *temp = dir;
      179       179    1
      180       180    1           result[0] = '\0';
      181       181    1           if (*temp == '.') {
      182       182    2              temp++;
      183       183    2           }
      184       184    1           if (CREATE_TMPFILE(pfx, temp, 9999, &cur_file, result)) {
      185       185    2              return((char *) 0);
      186       186    2           }
      187       187    1           else {
      188       188    2              return(result);
      189       189    2           }
      190       190    1        }
      191       191
CC.C02    File=xb_interface:c.:XBC3TSI                                              Fri Jan  6 1995  Page=8  
      192       192             #pragma  LIST  EJECT
CC.C02    File=xb_interface:c.:XBC3TSI                                              Fri Jan  6 1995  Page=9  
      193       193
      194       194             /*F*    NAME:    cuserid
      195       195                     PURPOSE: To return the user's logon name string.
      196       196
      197       197                     DESCRIPTION:
      198       198
      199       199                        This function returns the contents of B$JIT->accn
      200       200                        with trailing blanks removed.
      201       201
      202       202                        If the buf parameter is a NULL pointer, then the
      203       203                        result string is stored in an internal static area.
      204       204
      205       205                        The result is the pointer to the character string
      206       206                        constructed.
      207       207             */
      208       208
      209       209                static   char  static_area_cuserid[L_cuserid];
      210       210
      211       211             char *
      212       212             cuserid(char *s)
      213       213             {
      214       214    1           int   i;    /* to aid in scanning off trailing blanks */
      215       215    1
      216       216    1           i = 7;
      217       217    1           while (' ' == B$JIT$->accn[i] && i > 0)
      218       218    1              i--;
      219       219    1
      220       220    1
      221       221    1           if (!s)
      222       222    1              s = static_area_cuserid;
      223       223    1           memcpy(s, B$JIT$->accn, i+1), s[i+1] = 0;
      224       224    1
      225       225    1           return s;
      226       226    1        }
      227       227
      228       228             #pragma  LIST  EJECT
CC.C02    File=xb_interface:c.:XBC3TSI                                              Fri Jan  6 1995  Page=10 
      229       229
      230       230             /*M*  getlogin --    return user's logon name string   */
      231       231
      232       232
      233       233             /*F*    NAME:    getlogin
      234       234                     PURPOSE: To return the user's logon name string.
      235       235
      236       236                     DESCRIPTION:
      237       237
      238       238                        This function returns the contents of B$JIT->accn
      239       239                        with trailing blanks removed.
      240       240
      241       241
      242       242                        The result is the pointer to the character string
      243       243                        constructed.
      244       244             */
      245       245
      246       246                static   char  static_area_getlogin[L_cuserid];
      247       247
      248       248             char *
      249       249             getlogin()
      250       250             {
      251       251    1           int   i;    /* to aid in scanning off trailing blanks */
      252       252    1
      253       253    1           i = 7;
      254       254    1           while (' ' == B$JIT$->accn[i] && i > 0)
      255       255    1              i--;
      256       256    1
      257       257    1
      258       258    1           memcpy(static_area_getlogin, B$JIT$->accn, i+1), static_area_getlogin[i+1]
                               = 0;
      259       259    1
      260       260    1           return static_area_getlogin;
      261       261    1        }
      262       262
      263       263             #pragma  LIST  EJECT
CC.C02    File=xb_interface:c.:XBC3TSI                                              Fri Jan  6 1995  Page=11 
      264       264
      265       265             /*F*    NAME:    getpid
      266       266                     PURPOSE: To return the sysid of the calling process.
      267       267
      268       268                     DESCRIPTION:
      269       269
      270       270                        This function returns the contents of B$JIT->sysid
      271       271
      272       272
      273       273             */
      274       274
      275       275             int
      276       276             getpid()
      277       277             {
      278       278    1          return B$JIT$->sysid;
      279       279    1        }
      280       280
      281       281             #pragma  LIST  EJECT
CC.C02    File=xb_interface:c.:XBC3TSI                                              Fri Jan  6 1995  Page=12 
      282       282
      283       283             /*F*    NAME:    getcwd
      284       284                     PURPOSE: To return the current working directory.
      285       285
      286       286                     DESCRIPTION:
      287       287
      288       288                        This function returns the contents of B$JIT->faccn
      289       289                        with trailing blanks removed.
      290       290
      291       291                        If the buf parameter is a NULL pointer, then the
      292       292                        result string is obtained by the malloc function
      293       293                        for the space indicated by the size argument.
      294       294                        In any case, the size argument must be a meaningful
      295       295                        value.
      296       296
      297       297                        The result is the pointer to the character string
      298       298                        constructed.
      299       299             */
      300       300
      301       301             char *
      302       302             getcwd(char *buf, int size)
      303       303             {
      304       304    1          int   i;    /* to aid in scanning off trailing blanks */
      305       305    1
      306       306    1          i = 7;
      307       307    1          while (' ' == B$JIT$->faccn[i] && i > 0)
      308       308    1             i--;
      309       309    1
      310       310    1          if (i+2 > size) {
      311       311    2             return NULL;
      312       312    2             }
      313       313    1
      314       314    1          if (!buf)
      315       315    1             buf = malloc(size);
      316       316    1          if (buf)
      317       317    1             memcpy(buf, B$JIT$->faccn, i+1), buf[i+1] = 0;
      318       318    1
CC.C02    File=xb_interface:c.:XBC3TSI                                              Fri Jan  6 1995  Page=13 
      319       319    1          return buf;
      320       320    1        }
      321       321
      322       322             #pragma  LIST  EJECT
CC.C02    File=xb_interface:c.:XBC3TSI                                              Fri Jan  6 1995  Page=14 
      323       323
      324       324             /*F*    NAME:    XBI$UTSTOGMT
      325       325                     PURPOSE: To convert a CP6 UTS value into a UNIX GMT value.
      326       326
      327       327                     DESCRIPTION:
      328       328
      329       329                        This function converts a CP6 UTS value into a UNIX GMT
      330       330                        value.  It is necessary for the stat() function and
      331       331                        any other PL6 functions that need to do this.
      332       332
      333       333             */
      334       334
      335       335             void
      336       336             XBI$UTSTOGMT( int *gmt, int *uts) {
      337       337    1
      338       338    1           *gmt = utstogmt(*uts);
      339       339    1        }
---  Include file information  ---

   stdio:h.:XBC3TOU. is referenced
   limits:h.:XBC3TOU. is referenced
   stdlib:h.:XBC3TOU. is referenced
   string:h.:XBC3TOU. is referenced
   locale:h.:XBC3TOU. is referenced
   time:h.:XBC3TOU. is referenced
   b$jit_c:h.:XBC3TOU. is referenced
   xu_cp6_c:h.:XBC3TOU. is referenced

No diagnostics were issued in the file xb_interface:c.:XBC3TSI
