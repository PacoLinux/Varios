
PL6.E3A0      #001=XBI$WRITE_THIS_RECORD File=xbi_io_output:6.:XBC3TSI           FRI 01/06/95 11:26 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        XBI$WRITE_THIS_RECORD: PROC (F) ALTRET;
        7        7           /*D*  NAME: XBI$WRITE_THIS_RECORD
        8        8                 CALL: CALL XBI$WRITE_THIS_RECORD (F) ALTRET (..);
        9        9                 INPUT: F file_header;
       10       10                 PURPOSE: Writes the contents of the buffer associated with stream
       11       11                    F.
       12       12           */
       13       13
       14       14           %INCLUDE CP_6;
       15     5574           %INCLUDE CP_6_SUBS;
       16     6114           %INCLUDE XS_MACRO_C;
       17     6158           %INCLUDE xb_stdio_i6;
       18     6401           %INCLUDE xb_errors_i6;
       19     6472
       20     6473           %File_Header (Name=F);
       21     6585           %Buffer;
       22     6588           %XSA_PARAM (STCLASS="BASED (F.xsa$)");
       23     6618
       24     6619           %XSA_ENTRIES;
       25     6623
       26     6624    1      DCL read_next_record             BIT (1);
       27     6625    1      DCL XBI_SET_STREAM_ERRNO         ENTRY (2);
       28     6626    1      DCL XBI$READ_NEXT_RECORD         ENTRY (1) ALTRET;
       29     6627    1      DCL XBI$RELEASE_XSA_BUFFERS      ENTRY (1);
       30     6628    1      DCL XB_IO_ERROR                  ENTRY;
       31     6629    1      DCL 1 buf,
       32     6630    1        2  vfc    CHAR(1),
       33     6631    1        2  text   CHAR(1024);
       34     6632           %F$DCB(STCLASS="BASED(dcb$)");
       35     6689    1      DCL dcb$ ptr;
       36     6690
       37     6691    1      read_next_record = '1'B;
PL6.E3A0      #001=XBI$WRITE_THIS_RECORD File=xbi_io_output:6.:XBC3TSI           FRI 01/06/95 11:26 Page:2    
       38     6692
       39     6693    2      IF F.buffer$ = ADDR(NIL) THEN DO;
       40     6694    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$ASSERTION_FAILURE);
       41     6695    2         CALL XB_IO_ERROR;
       42     6696    2      END;
       43     6697
       44     6698    1      IF ~F.is_buffer_modified THEN
       45     6699    2         IF F.is_eof THEN DO;
       46     6700    2            CALL XBI_SET_STREAM_ERRNO (F, ERR$ASSERTION_FAILURE);
       47     6701    2            CALL XB_IO_ERROR;
       48     6702    2         END; ELSE DO;
       49     6703    2            CALL XBI$READ_NEXT_RECORD (F) ALTRET (error_occured);
       50     6704    2            RETURN;
       51     6705    2         END;
       52     6706
       53     6707    1      dcb$ = dcbaddr(F.fpt_write.v.dcb#);
       54     6708    2      IF F.is_text THEN DO;
       55     6709    2         IF SUBSTR (buffer, F.ars-1, 1) = BINASC(%formfeed) THEN
       56     6710    3            DO;
       57     6711    3               F.ars = F.ars - 1;
       58     6712    3               IF dcb$->F$DCB.ORG# = %UR# THEN F.fpt_write.v.dvbyte.vfc# = '1'B;
       59     6713    3            END;
       60     6714    2         ELSE  IF SUBSTR (buffer, F.ars-1, 1) = BINASC(%newline) THEN
       61     6715    2            F.ars = F.ars - 1;
       62     6716    2         F.fpt_write.v.dvbyte.cont# = '0'B;
       63     6717    2      END;
       64     6718    1      GOTO main_body;
       65     6719
       66     6720    1   XBI$CONTINUED_WRITE: ENTRY (F);
       67     6721    1      read_next_record = '0'B;
       68     6722    1      IF F.is_text THEN
       69     6723    1         F.fpt_write.v.dvbyte.cont# = '1'B;
       70     6724    1      GOTO main_body;
       71     6725
       72     6726    1   XBI$WRITE_BEFORE_POSITIONING: ENTRY (F);
       73     6727           /*D*  NAME: XBI$WRITE_BEFORE_POSITIONING
       74     6728                 CALL: CALL XBI$WRITE_BEFORE_POSITIONING (F) ALTRET (..);
PL6.E3A0      #001=XBI$WRITE_THIS_RECORD File=xbi_io_output:6.:XBC3TSI           FRI 01/06/95 11:26 Page:3    
       75     6729                 INPUT: F file_header;
       76     6730                 PURPOSE: Writes contents of buffer associated with stream F.
       77     6731                    This entry is called before positioning to a different record
       78     6732                    in the stream.
       79     6733           */
       80     6734
       81     6735    1      read_next_record = '1'B;
       82     6736    2      IF ~F.is_buffer_modified THEN DO;
       83     6737    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$ASSERTION_FAILURE);
       84     6738    2         CALL XB_IO_ERROR;
       85     6739    2      END;
       86     6740    2      IF F.is_text THEN DO;
       87     6741    2         F.fpt_write.v.dvbyte.cont# = '0'B;
       88     6742    2      END;
       89     6743
       90     6744    1   main_body:
       91     6745    1      F.is_buffer_modified = '0'B;
       92     6746    2      IF F.is_text THEN DO;
       93     6747    2         IF F.ars > 0 OR F.fpt_write.v.dvbyte.vfc# = '1'B THEN
       94     6748    2            IF F.fpt_write.v.dvbyte.vfc# = '1'B THEN
       95     6749    3            DO;
       96     6750    3               buf.vfc = 'P';
       97     6751    3               SUBSTR (buf.text,0,F.ars) = SUBSTR (buffer,0,F.ars);
       98     6752    3               F.fpt_write.buf_ = VECTOR (SUBSTR (buf.vfc,0,F.ars+1));
       99     6753    3            END;
      100     6754    2            ELSE  F.fpt_write.buf_ = VECTOR (SUBSTR (buffer, 0, F.ars));
      101     6755    2         ELSE
      102     6756    2            F.fpt_write.buf_ = VECTOR(NIL);
      103     6757    3         IF (F.fpt_write.key_ ~= VECTOR (NIL)) THEN DO;
      104     6758    3            F.key.record = F.record_position;
      105     6759    3         END;
      106     6760    3         IF F.xsa$ ~= ADDR(NIL) THEN DO;
      107     6761    3            CALL XSA$WRITE (F.FPT_WRITE, XSA_PARAM)
      108     6762    4               WHENALTRETURN DO;
      109     6763    4                  CALL XBI_SET_STREAM_ERRNO (F, XSA_PARAM.ERR);
      110     6764    4                  F.fpt_write.v.dvbyte.cont# = '0'B;
      111     6765    4                  GOTO error_occured;
PL6.E3A0      #001=XBI$WRITE_THIS_RECORD File=xbi_io_output:6.:XBC3TSI           FRI 01/06/95 11:26 Page:4    
      112     6766    4               END;
      113     6767    3            IF XSA_PARAM.ORG = 0 THEN CALL XBI$RELEASE_XSA_BUFFERS (F);
      114     6768    2         END; ELSE
      115     6769    2            CALL M$WRITE (F.FPT_WRITE)
      116     6770    3               WHENALTRETURN DO;
      117     6771    3                  CALL XBI_SET_STREAM_ERRNO (F);
      118     6772    3                  F.fpt_write.v.dvbyte.cont# = '0'B;
      119     6773    3                  GOTO error_occured;
      120     6774    3               END;
      121     6775    2         IF F.fpt_write.v.dvbyte.cont# THEN
      122     6776    2            F.continued_ios = F.continued_ios + 1;
      123     6777    3         ELSE DO;
      124     6778    3            F.continued_ios = 0;
      125     6779    3            F.record_position = F.record_position + 1;
      126     6780    3            F.last_record = F.last_record + 1;
      127     6781    3         END;
      128     6782    2         F.fpt_write.v.dvbyte.cont# = '0'B;
      129     6783    2         F.ars = 0;
      130     6784    2         F.character_position = 0;
      131     6785    2         F.fpt_write.v.dvbyte.vfc# = '0'B;
      132     6786    2      END; ELSE DO; /* it's a binary stream */
      133     6787    3         IF F.ars > F.buffer_size  THEN DO;
      134     6788    3            CALL XBI_SET_STREAM_ERRNO (F, ERR$ASSERTION_FAILURE);
      135     6789    3            CALL XB_IO_ERROR;
      136     6790    3         END;
      137     6791    2         IF F.ars > 0 THEN
      138     6792    2            F.fpt_write.buf_ = VECTOR (SUBSTR (buffer, 0, F.ars));
      139     6793    2         ELSE
      140     6794    2            F.fpt_write.buf_ = VECTOR(NIL);
      141     6795    2         F.key.record = F.record_position;
      142     6796    2         CALL M$WRITE (F.FPT_WRITE)
      143     6797    3            WHENALTRETURN DO;
      144     6798    3               CALL XBI_SET_STREAM_ERRNO (F);
      145     6799    3               GOTO error_occured;
      146     6800    3            END;
      147     6801    3         IF F.is_eof OR (F.record_position > F.last_record) THEN DO;
      148     6802    3            F.ars = 0;
PL6.E3A0      #001=XBI$WRITE_THIS_RECORD File=xbi_io_output:6.:XBC3TSI           FRI 01/06/95 11:26 Page:5    
      149     6803    3            F.record_position = F.record_position + 1;
      150     6804    3            F.last_record = F.last_record + 1;
      151     6805    3            F.character_position = 0;
      152     6806    2         END; ELSE /* not at eof */
      153     6807    2            IF read_next_record THEN
      154     6808    2               CALL XBI$READ_NEXT_RECORD (F) ALTRET (error_occured);
      155     6809    2            ELSE
      156     6810    2               F.record_position = F.record_position + 1;
      157     6811    2      END;
      158     6812    1      RETURN;
      159     6813
      160     6814    1   error_occured:;
      161     6815    1      ALTRETURN;
      162     6816    1   END XBI$WRITE_THIS_RECORD;
      163     6817        %EOD;

PL6.E3A0      #001=XBI$WRITE_THIS_RECORD File=xbi_io_output:6.:XBC3TSI           FRI 01/06/95 11:26 Page:6    
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   XS_MACRO_C.:LIB_E04  is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI$WRITE_THIS_RECORD.

   Procedure XBI$WRITE_THIS_RECORD requires 290 words for executable code.
   Procedure XBI$WRITE_THIS_RECORD requires 266 words of local(AUTO) storage.

PL6.E3A0      #001=XBI$WRITE_THIS_RECORD File=xbi_io_output:6.:XBC3TSI           FRI 01/06/95 11:26 Page:7    
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=XBI$WRITE_THIS_RECORD File=xbi_io_output:6.:XBC3TSI           FRI 01/06/95 11:26 Page:8    
          MINI XREF LISTING

BUF.TEXT
      6631**DCL      6751<<ASSIGN
BUF.VFC
      6630**DCL      6750<<ASSIGN   6752--ASSIGN
BUFFER
      6586**DCL      6709>>IF       6714>>IF       6751>>ASSIGN   6754--ASSIGN   6792--ASSIGN
DCB$
      6689**DCL      6633--IMP-PTR  6707<<ASSIGN   6712>>IF
ERROR_OCCURED
      6810**LABEL    6703--CALLALT  6765--GOTO     6773--GOTO     6799--GOTO     6808--CALLALT
F
      6474**DCL         6--PROC     6694<>CALL     6700<>CALL     6703<>CALL     6720--ENTRY    6726--ENTRY
      6737<>CALL     6763<>CALL     6767<>CALL     6771<>CALL     6788<>CALL     6798<>CALL     6808<>CALL
F.ARS
      6496**DCL      6709>>IF       6711<<ASSIGN   6711>>ASSIGN   6714>>IF       6715<<ASSIGN   6715>>ASSIGN
      6747>>IF       6751>>ASSIGN   6751>>ASSIGN   6752>>ASSIGN   6754>>ASSIGN   6783<<ASSIGN   6787>>IF
      6791>>IF       6792>>ASSIGN   6802<<ASSIGN
F.BUFFER$
      6498**DCL      6586--IMP-PTR  6693>>IF       6709>>IF       6714>>IF       6751>>ASSIGN   6754>>ASSIGN
      6792>>ASSIGN
F.BUFFER_SIZE
      6499**DCL      6586--IMP-SIZ  6709>>IF       6714>>IF       6751>>ASSIGN   6754>>ASSIGN   6787>>IF
      6792>>ASSIGN
F.CHARACTER_POSITION
      6494**DCL      6784<<ASSIGN   6805<<ASSIGN
F.CONTINUED_IOS
      6495**DCL      6776<<ASSIGN   6776>>ASSIGN   6778<<ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
      6536**DCL      6537--REDEF
F.FPT_READ.V.INDX#
      6529**DCL      6530--REDEF
F.FPT_WRITE
PL6.E3A0      #001=XBI$WRITE_THIS_RECORD File=xbi_io_output:6.:XBC3TSI           FRI 01/06/95 11:26 Page:9    
      6550**DCL      6761<>CALL     6769<>CALL     6796<>CALL
F.FPT_WRITE.BUF_
      6553**DCL      6752<<ASSIGN   6754<<ASSIGN   6756<<ASSIGN   6792<<ASSIGN   6794<<ASSIGN
F.FPT_WRITE.KEY_
      6552**DCL      6757>>IF
F.FPT_WRITE.V.DCB#
      6556**DCL      6707--ASSIGN
F.FPT_WRITE.V.DVBYTE.CONT#
      6581**DCL      6716<<ASSIGN   6723<<ASSIGN   6741<<ASSIGN   6764<<ASSIGN   6772<<ASSIGN   6775>>IF
      6782<<ASSIGN
F.FPT_WRITE.V.DVBYTE.VFC#
      6574**DCL      6575--REDEF    6712<<ASSIGN   6747>>IF       6748>>IF       6785<<ASSIGN
F.IS_BUFFER_MODIFIED
      6478**DCL      6698>>IF       6736>>IF       6745<<ASSIGN
F.IS_EOF
      6476**DCL      6699>>IF       6801>>IF
F.IS_TEXT
      6475**DCL      6708>>IF       6722>>IF       6740>>IF       6746>>IF
F.KEY.RECORD
      6505**DCL      6758<<ASSIGN   6795<<ASSIGN
F.LAST_RECORD
      6497**DCL      6780<<ASSIGN   6780>>ASSIGN   6801>>IF       6804<<ASSIGN   6804>>ASSIGN
F.RECORD_POSITION
      6493**DCL      6758>>ASSIGN   6779<<ASSIGN   6779>>ASSIGN   6795>>ASSIGN   6801>>IF       6803<<ASSIGN
      6803>>ASSIGN   6810<<ASSIGN   6810>>ASSIGN
F.XSA$
      6500**DCL      6596--IMP-PTR  6760>>IF       6761>>CALL     6763>>CALL     6767>>IF
F$DCB.ACTPOS
      6665**DCL      6665--REDEF
F$DCB.ARS#
      6639**DCL      6639--REDEF
F$DCB.ATTR
      6658**DCL      6659--REDEF
F$DCB.BORROW
      6673**DCL      6673--REDEF    6673--REDEF    6673--REDEF
F$DCB.DCBNAME.L
PL6.E3A0      #001=XBI$WRITE_THIS_RECORD File=xbi_io_output:6.:XBC3TSI           FRI 01/06/95 11:26 Page:10   
      6687**DCL      6687--IMP-SIZ
F$DCB.EOMCHAR#
      6643**DCL      6643--REDEF
F$DCB.FLDID
      6668**DCL      6668--REDEF
F$DCB.FORM$
      6662**DCL      6662--REDEF
F$DCB.FSECT
      6678**DCL      6678--REDEF
F$DCB.FSN#
      6655**DCL      6655--REDEF    6655--REDEF    6656--REDEF
F$DCB.HEADER$
      6661**DCL      6661--REDEF
F$DCB.IXTNSIZE#
      6659**DCL      6659--REDEF
F$DCB.LASTSTA$
      6648**DCL      6648--REDEF
F$DCB.LVL
      6674**DCL      6674--REDEF
F$DCB.NAME#.C
      6649**DCL      6649--REDEF
F$DCB.NOEOF
      6671**DCL      6671--REDEF
F$DCB.NRECS#
      6660**DCL      6660--REDEF
F$DCB.NRECX
      6679**DCL      6679--REDEF
F$DCB.OHDR
      6671**DCL      6671--REDEF
F$DCB.ORG#
      6654**DCL      6654--REDEF    6712>>IF
F$DCB.PRECNO
      6677**DCL      6677--REDEF
F$DCB.RCSZ
      6683**DCL      6683--REDEF
F$DCB.RES#
PL6.E3A0      #001=XBI$WRITE_THIS_RECORD File=xbi_io_output:6.:XBC3TSI           FRI 01/06/95 11:26 Page:11   
      6650**DCL      6650--REDEF
F$DCB.SETX
      6662**DCL      6662--REDEF
F$DCB.TAB$
      6662**DCL      6662--REDEF
F$DCB.TDA
      6676**DCL      6677--REDEF
F$DCB.WSN#
      6650**DCL      6650--REDEF
M$WRITE
      5503**DCL-ENT  6769--CALL     6796--CALL
MAIN_BODY
      6745**LABEL    6718--GOTO     6724--GOTO
READ_NEXT_RECORD
      6624**DCL      6691<<ASSIGN   6721<<ASSIGN   6735<<ASSIGN   6807>>IF
XB$ERR$ASSERTION_FAILURE
      6446**DCL      6694<>CALL     6700<>CALL     6737<>CALL     6788<>CALL
XBI$READ_NEXT_RECORD
      6626**DCL-ENT  6703--CALL     6808--CALL
XBI$RELEASE_XSA_BUFFERS
      6627**DCL-ENT  6767--CALL
XBI_SET_STREAM_ERRNO
      6625**DCL-ENT  6694--CALL     6700--CALL     6737--CALL     6763--CALL     6771--CALL     6788--CALL
      6798--CALL
XB_IO_ERROR
      6628**DCL-ENT  6695--CALL     6701--CALL     6738--CALL     6789--CALL
XSA$WRITE
      6620**DCL-ENT  6761--CALL
XSA_PARAM
      6596**DCL      6761<>CALL
XSA_PARAM.EOMCHAR#
      6612**DCL      6613--REDEF
XSA_PARAM.ERR
      6600**DCL      6763<>CALL
XSA_PARAM.ORG
      6611**DCL      6767>>IF
PL6.E3A0      #001=XBI$WRITE_THIS_RECORD File=xbi_io_output:6.:XBC3TSI           FRI 01/06/95 11:26 Page:12   
XSA_PARAM.SIG1
      6606**DCL      6606--REDEF
XSA_PARAM.SIG2
      6606**DCL      6607--REDEF

PL6.E3A0      #002=XBI$FFLUSH File=xbi_io_output:6.:XBC3TSI                      FRI 01/06/95 11:26 Page:13   
      164        1        /*T***********************************************************/
      165        2        /*T*                                                         */
      166        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      167        4        /*T*                                                         */
      168        5        /*T***********************************************************/
      169        6
      170        7        XBI$FFLUSH: PROC (F) ALTRET;
      171        8           /*i*  NAME: XBI$FFLUSH
      172        9                 CALL: CALL XBI$FFLUSH (F) ALTRET (..);
      173       10                 INPUT: F file_header;
      174       11                 PURPOSE: Flushes any output characters in buffer associated with
      175       12                    stream F.
      176       13           */
      177       14
      178       15           %INCLUDE CP_6;
      179     5575           %INCLUDE CP_6_SUBS;
      180     6115           %INCLUDE xb_stdio_i6;
      181     6358
      182     6359           %F$DCB(STCLASS="BASED(dcb$)");
      183     6416           %file_Header (Name=F, Stclass=" ");
      184     6528           %Buffer;
      185     6531
      186     6532           %EQU buf_size = 1024;
      187     6533    1      DCL 1 buf,
      188     6534    1         2  vfc            CHAR (1),
      189     6535    1         2  text           CHAR (%buf_size);
      190     6536    1      DCL start            UBIN;
      191     6537    1      DCL chars_to_write   UBIN;
      192     6538    1      DCL dcb$             PTR;
      193     6539
      194     6540    1      DCL XBI_SET_STREAM_ERRNO            ENTRY (2);
      195     6541
      196     6542    1      dcb$ = dcbaddr(F.fpt_write.v.dcb#);
      197     6543    1      IF F.ars > 0 AND F.is_buffer_modified = '1'b AND
      198     6544    1         dcb$->F$DCB.ASN# = %DEVICE#               AND
      199     6545    2         dcb$->F$DCB.DDEV.IC# = '1'b               THEN DO;
      200     6546    2         F.fpt_write.v.dvbyte.vfc# = '1'B;
PL6.E3A0      #002=XBI$FFLUSH File=xbi_io_output:6.:XBC3TSI                      FRI 01/06/95 11:26 Page:14   
      201     6547    2         buf.vfc = '@';
      202     6548    2         start = 0;
      203     6549    3         DO WHILE start < F.ars;
      204     6550    3            chars_to_write = MINIMUM (%buf_size, F.ars - start);
      205     6551    3            SUBSTR (buf.text, 0, chars_to_write) =
      206     6552    3               SUBSTR (buffer, start, chars_to_write);
      207     6553    3            F.fpt_write.buf_ = VECTOR (SUBSTR (buf.vfc, 0, chars_to_write + 1));
      208     6554    3            CALL M$WRITE (F.fpt_write)
      209     6555    4               WHENALTRETURN DO;
      210     6556    4                  CALL XBI_SET_STREAM_ERRNO (F);
      211     6557    4                  F.ars = 0;
      212     6558    4                  F.character_position = 0;
      213     6559    4                  F.fpt_write.v.dvbyte.vfc# = '0'B;
      214     6560    4                  F.is_buffer_modified = '0'B;
      215     6561    4                  ALTRETURN;
      216     6562    4               END;
      217     6563    3            start = start + chars_to_write;
      218     6564    3         END;
      219     6565    2         F.ars = 0;
      220     6566    2         F.character_position = 0;
      221     6567    2         F.fpt_write.v.dvbyte.vfc# = '0'B;
      222     6568    2         F.is_buffer_modified = '0'B;
      223     6569    2      END;
      224     6570    1   END XBI$FFLUSH;

PL6.E3A0      #002=XBI$FFLUSH File=xbi_io_output:6.:XBC3TSI                      FRI 01/06/95 11:26 Page:15   
--  Include file information  --

   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI$FFLUSH.

   Procedure XBI$FFLUSH requires 81 words for executable code.
   Procedure XBI$FFLUSH requires 266 words of local(AUTO) storage.

    No errors detected in file xbi_io_output:6.:XBC3TSI    .

PL6.E3A0      #002=XBI$FFLUSH File=xbi_io_output:6.:XBC3TSI                      FRI 01/06/95 11:26 Page:16   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=XBI$FFLUSH File=xbi_io_output:6.:XBC3TSI                      FRI 01/06/95 11:26 Page:17   
          MINI XREF LISTING

BUF.TEXT
      6535**DCL      6551<<ASSIGN
BUF.VFC
      6534**DCL      6547<<ASSIGN   6553--ASSIGN
BUFFER
      6529**DCL      6551>>ASSIGN
CHARS_TO_WRITE
      6537**DCL      6550<<ASSIGN   6551>>ASSIGN   6551>>ASSIGN   6553>>ASSIGN   6563>>ASSIGN
DCB$
      6538**DCL      6360--IMP-PTR  6542<<ASSIGN   6543>>IF       6543>>IF
F
      6417**DCL         7--PROC     6556<>CALL
F.ARS
      6439**DCL      6543>>IF       6549>>DOWHILE  6550>>ASSIGN   6557<<ASSIGN   6565<<ASSIGN
F.BUFFER$
      6441**DCL      6529--IMP-PTR  6551>>ASSIGN
F.BUFFER_SIZE
      6442**DCL      6529--IMP-SIZ  6551>>ASSIGN
F.CHARACTER_POSITION
      6437**DCL      6558<<ASSIGN   6566<<ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
      6479**DCL      6480--REDEF
F.FPT_READ.V.INDX#
      6472**DCL      6473--REDEF
F.FPT_WRITE
      6493**DCL      6554<>CALL
F.FPT_WRITE.BUF_
      6496**DCL      6553<<ASSIGN
F.FPT_WRITE.V.DCB#
      6499**DCL      6542--ASSIGN
F.FPT_WRITE.V.DVBYTE.VFC#
      6517**DCL      6518--REDEF    6546<<ASSIGN   6559<<ASSIGN   6567<<ASSIGN
PL6.E3A0      #002=XBI$FFLUSH File=xbi_io_output:6.:XBC3TSI                      FRI 01/06/95 11:26 Page:18   
F.IS_BUFFER_MODIFIED
      6421**DCL      6543>>IF       6560<<ASSIGN   6568<<ASSIGN
F$DCB.ACTPOS
      6392**DCL      6392--REDEF
F$DCB.ARS#
      6366**DCL      6366--REDEF
F$DCB.ASN#
      6381**DCL      6543>>IF
F$DCB.ATTR
      6385**DCL      6386--REDEF
F$DCB.BORROW
      6400**DCL      6400--REDEF    6400--REDEF    6400--REDEF
F$DCB.DCBNAME.L
      6414**DCL      6414--IMP-SIZ
F$DCB.DDEV.IC#
      6372**DCL      6543>>IF
F$DCB.EOMCHAR#
      6370**DCL      6370--REDEF
F$DCB.FLDID
      6395**DCL      6395--REDEF
F$DCB.FORM$
      6389**DCL      6389--REDEF
F$DCB.FSECT
      6405**DCL      6405--REDEF
F$DCB.FSN#
      6382**DCL      6382--REDEF    6382--REDEF    6383--REDEF
F$DCB.HEADER$
      6388**DCL      6388--REDEF
F$DCB.IXTNSIZE#
      6386**DCL      6386--REDEF
F$DCB.LASTSTA$
      6375**DCL      6375--REDEF
F$DCB.LVL
      6401**DCL      6401--REDEF
F$DCB.NAME#.C
      6376**DCL      6376--REDEF
PL6.E3A0      #002=XBI$FFLUSH File=xbi_io_output:6.:XBC3TSI                      FRI 01/06/95 11:26 Page:19   
F$DCB.NOEOF
      6398**DCL      6398--REDEF
F$DCB.NRECS#
      6387**DCL      6387--REDEF
F$DCB.NRECX
      6406**DCL      6406--REDEF
F$DCB.OHDR
      6398**DCL      6398--REDEF
F$DCB.ORG#
      6381**DCL      6381--REDEF
F$DCB.PRECNO
      6404**DCL      6404--REDEF
F$DCB.RCSZ
      6410**DCL      6410--REDEF
F$DCB.RES#
      6377**DCL      6377--REDEF
F$DCB.SETX
      6389**DCL      6389--REDEF
F$DCB.TAB$
      6389**DCL      6389--REDEF
F$DCB.TDA
      6403**DCL      6404--REDEF
F$DCB.WSN#
      6377**DCL      6377--REDEF
M$WRITE
      5504**DCL-ENT  6554--CALL
START
      6536**DCL      6548<<ASSIGN   6549>>DOWHILE  6550>>ASSIGN   6551>>ASSIGN   6563<<ASSIGN   6563>>ASSIGN
XBI_SET_STREAM_ERRNO
      6540**DCL-ENT  6556--CALL
