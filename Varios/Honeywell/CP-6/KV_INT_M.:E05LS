

14:56 JUL 28 '97 KV_INT_M.:E05SI                                           1    
    1      /*M* KV_INT_M VDH internal macros */
    2      /*T***********************************************************/

14:56 JUL 28 '97 KV_INT_M.:E05SI                                           2    
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      %EJECT;
    8      /*
    9      *   BOX
   10      *   Makes that cute little box around titles.
   11      *   Will even eject the page if you ask nicely.
   12      */
   13
   14      %MACRO KV$BOX (TITLE = "", SPACEVALUE = 1, PAGE = NO);
   15      %LSET LISTDIR = '0'B;
   16      %LSET LISTMAC = '1'B;
   17      %LSET LISTSUB = '1'B;
   18      %LSET LISTEXP = '1'B;
   19      %LSET LISTCOM='0'B;
   20      /* !C! */
   21      %LSET LISTCOM='1'B;
   22      %IF TEXTCHAR (PAGE) = 'YES';
   23      %EJECT;

14:56 JUL 28 '97 KV_INT_M.:E05SI                                           3    
   24      %ELSE;
   25      %SPACE %SPACEVALUE;
   26      %ENDIF;
   27      %LSET BLANKS = '                                                                ';
   28      %LSET LEN = LENGTHC (TEXTCHAR(TITLE));
   29      %LSET SEG1 = CONCAT (' *', SUBSTR(BLANKS, 0, (76 - LEN) / 2));
   30      %LSET SEG2 = CONCAT (SEG1, TEXTCHAR(TITLE));
   31      %LSET SEG3 = CHARTEXT(CONCAT(SEG2, SUBSTR(BLANKS, 0, 74 - LENGTHC(SEG2)), ' *'));
   32      %CHARTEXT('/*')**************************************************************************
   33       *                                                                         *
   34      %SEG3
   35       *                                                                         *
   36       **************************************************************************%CHARTEXT('*/')
   37      %LSET LISTCOM='0'B;
   38      /* ! ! */
   39      %SPACE %SPACEVALUE;
   40      %MEND;
   41      %EJECT;

14:56 JUL 28 '97 KV_INT_M.:E05SI                                           4    
   42      /*F* NAME: KV$CALUSR_EVT.                             */
   43      %MACRO KV$CALUSR_EVT (FPT=KV@USR_EVT, SBR$=KVV$CALUSR_EVT, EVT_ID=0, PRM=0,
   44                            ALTRET=, WHEN=);
   45      %LSET LISTSUB = '1'B;
   46      %LSET LISTEXP='1'B;
   47      %LSET LISTDIR='0'B;
   48      %LSET LISTMAC='1'B;
   49      %IF LENGTHC(TEXTCHAR(ALTRET))~=0;
   50      %LSET ALT=CHARTEXT(CONCAT(' ALTRET(',TEXTCHAR(ALTRET),');'));
   51      %ELSEIF TEXTCHAR(WHEN)='YES';
   52      %LSET ALT=CHARTEXT('');
   53      %ELSE;
   54      %LSET ALT=CHARTEXT(';');
   55      %ENDIF;
   56      /* !C! */
   57              IF %KV_VDI.USREVTENB (EVT_ID) THEN DO;
   58      %IF TEXTCHAR(PRM)~='0';
   59                 KV@USR_EVT = KV_USR_EVT;
   60                 KV@USR_EVT.ID = EVT_ID;
   61                 KV@USR_EVT.%CHARTEXT('PRM') = PRM;
   62                 CALL SBR$ (KV@USR_EVT)%ALT
   63      %ELSE;
   64                 CALL SBR$ (EVT_ID)%ALT
   65      %ENDIF;
   66      %IF TEXTCHAR(WHEN)~='YES';
   67                 END;
   68      %ENDIF;
   69      /* ! ! */
   70      %MEND;
   71      /*F* NAME: KV$CHNPHSPSTMOD.
   72
   73      Proc for changing physical positioning modes.
   74
   75      Format of reference:
   76
   77      %KV$CHNPHSPSTMOD (PHSPSTMOD = new-physical-positioning-mode) */
   78
14:56 JUL 28 '97 KV_INT_M.:E05SI                                           5    
   79      %MACRO KV$CHNPHSPSTMOD (PHSPSTMOD = 0);
   80      %LSET LISTSUB = '1'B;
   81      %LSET LISTDIR = '0'B;
   82      %LSET LISTEXP = '1'B;
   83      %LSET LISTCOM = '0'B;
   84      %LSET LISTMAC = '1'B;
   85      /* !C! */
   86      %IF PHSPSTMOD ~= 0;
   87              IF PHSPSTMOD ~= %KV_VDI.OTPCNDPND.PST THEN DO;
   88
   89      /* THE CURRENT POSITIONING MODE IS NOT EQUAL TO THE POSITIONING */
   90      /* MODE OF THE LAST POSITIONING ACTION. */
   91
   92                 IF %KV_MRD.BLANKERASES THEN DO;
   93      %ENDIF;
   94                    IF %KV_VDI.OTPCNDPND.PST ~= 0 THEN DO;
   95
   96      /* THERE IS STILL A POSITIONING REQUEST PENDING; GENERATE THE */
   97      /* CHARACTERS FOR IT (IF NECESSARY) BEFORE CHANGING MODES. */
   98
   99                       CALL KVV$CALUSR_PST;
  100                       END;                   /* END IF                             */
  101      %IF PHSPSTMOD ~= 0;
  102                    END;                      /* END IF                             */
  103                 %KV_VDI.OTPCNDPND.PST = PHSPSTMOD;
  104                 END;                         /* END IF                             */
  105      %ENDIF;
  106      %MEND;
  107      %EJECT;

14:56 JUL 28 '97 KV_INT_M.:E05SI                                           6    
  108      %MACRO KV$DSPTXT (TXT = );
  109      %LSET LISTDIR = '0'B;
  110      %LSET LISTSUB = '1'B;
  111      %LSET LISTEXP = '1'B;
  112      %LSET DSPTXT = %CHARTEXT(TXT);
  113      /*DSPTXT*/
  114      %MEND;
  115      %EJECT;

14:56 JUL 28 '97 KV_INT_M.:E05SI                                           7    
  116      /*F* NAME:  KV_VDOERR
  117
  118      Macro for recording an protocol error discovered when decoding
  119      a KV$VDO_ structure.
  120
  121      Format of reference:
  122
  123      KV_VDOERR (VDOFNC = KV$VDO.FNC value,
  124                 COD = error-code,
  125                 FLDID = field-id if appropriate);
  126      */
  127      %MACRO KV_VDOERR(VDOFNC = , COD = , FLDID = );
  128      %LSET LISTSUB = '1'B;
  129      %LSET LISTDIR = '0'B;
  130      %LSET LISTEXP = '1'B;
  131      %LSET LISTCOM = '0'B;
  132      %LSET LISTSUB = '1'B;
  133      IF %KV_STR.ERR.%CHARTEXT('COD') = 0 THEN DO;
  134      %IF LENGTHC(TEXTCHAR(VDOFNC))>0;
  135      %KV_STR.ERR.%CHARTEXT('VDOTYP') = VDOFNC;
  136      %ENDIF;
  137      %KV_STR.ERR.%CHARTEXT('COD') = COD;
  138      %IF LENGTHC(TEXTCHAR(FLDID))>0;
  139      %KV_LINLST.ERRFLDID = FLDID;
  140      %ENDIF;
  141      END; /* END IF KV_STR.ERR.COD = 0 */
  142      %MEND;

