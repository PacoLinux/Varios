VERSION E05

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:1    
        1        1        /*M* VXI$READ - reads object unit and run unit files.     */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=4,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8         */
        8        8        VXI$READ:
        9        9            PROC(         TYPE, BUF$, SIZE, KEY ) ALTRET;
       10       10        %INCLUDE VX_INC_C;
       11    10726        %INCLUDE B_ERRORS_C;
       12    11853        %B$TCB;
       13    11856        %B$ALT;
       14    11864        %T$C;

             11876    1   /*******************************************************************************
             11877    1   *                                                                              *
             11878    1   *                          T$C                                                 *
             11879    1   *                                                                              *
             11880    1   *******************************************************************************/

             11885    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             11886    1         2 COUNT        UBIN( 9) UNAL,
             11887    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             11888    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             11889    1         2 COUNT        UBIN( 9) UNAL,
             11890    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
       15    11893        %VX$WORD;

             11905    1   /*******************************************************************************
             11906    1   *                                                                              *
             11907    1   *                          VX$WORD                                                 *
             11908    1   *                                                                              *
             11909    1   *******************************************************************************/

             11914    1   DCL VX$WORD_A(0:0)       UBIN(36) ALIGNED    BASED PTR;
             11915    1   DCL VX$HALF_A(0:0)       UBIN(18) HALIGNED   BASED PTR;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:2    
             11916    1   DCL VX$BYTE_A(0:0)       UBIN( 9) CALIGNED   BASED PTR;
             11917    1   DCL VX$CHAR_A(0:0)       CHAR( 1) UNAL       BASED PTR;
             11918        /**/
             11919    1   DCL VX$WORD_SBIN_A(0:0)  SBIN WORD ALIGNED   BASED     PTR;
             11920    1   DCL VX$HALF_SBIN_A(0:0)  SBIN HALF HALIGNED  BASED     PTR;
             11921    1   DCL VX$BYTE_SBIN_A(0:0)  SBIN HALF CALIGNED  BASED     PTR;
             11922    1   DCL VX$BIT_A(0:0)        BIT(36)   ALIGNED   BASED     PTR;
       16    11925        %SET LISTMAC='1'B;
       17    11926        %SET LISTDIR='1'B;
       18    11927        %SET LISTSUB='1'B;
       19    11928        %SET LISTEXP='1'B;
       20    11929        %BANNER( ARG=SUBS );
             11930        %LSET LISTDIR='0'B;

             11937    1   /*******************************************************************************
             11938    1   *                                                                              *
             11939    1   *                          SUBS                                                 *
             11940    1   *                                                                              *
             11941    1   *******************************************************************************/

       21    11945        %B$RECORDSUBS;
             11946        %EQU TYPHEAD=0 ;
             11947        %EQU TYPDNAM=1 ;
             11948        %EQU TYPRNAM=2 ;
             11949        %EQU TYPSECT=3 ;
             11950        %EQU TYPEDEF=4 ;
             11951        %EQU TYPEREF=5 ;
             11952        %EQU TYPSDEF=6 ;
             11953        %EQU TYPSREF=7 ;
             11954        %EQU TYPSEGDEF=8 ;
             11955        %EQU TYPSEGREF=9 ;
             11956        %EQU TYPPROG=10 ;
             11957        %EQU SUBTYPPROG=0 ;
             11958        %EQU SUBTYPREL=1 ;
             11959        %EQU TYPLOGBLK=11 ;
             11960        %EQU TYPINTNTRY=12 ;
             11961        %EQU TYPEXST=13 ;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:3    
             11962        %EQU TYPVREBL=14 ;
             11963        %EQU TYPDBGNAM=15 ;
             11964        %EQU TYPLV1LB=16 ;
             11965        %EQU TYPLV1=17 ;
             11966        %EQU TYPDATASEG=18 ;
             11967        %EQU TYPRUM=20 ;
             11968        %EQU TYPBIRTH=21 ;
             11969        %EQU TYPPLOVER=22 ;
             11970        %EQU TYPCOMPID=23 ;
             11971        %EQU TYPROS=30 ;
       22    11973        %E;
             11974        %LSET LISTDIR='0'B;

             11981    1   /*******************************************************************************
             11982    1   *                                                                              *
             11983    1   *                          ENTRY                                                 *
             11984    1   *                                                                              *
             11985    1   *******************************************************************************/

       23    11989        %ENTRIES;
             11990    1   DCL VXE$ERROR       ENTRY(4);
             11991    1   DCL VXE$ERR         ENTRY(3);
             11992    1   DCL VXE$MERC        ENTRY;
             11993    1   DCL VXE$ERRMSG      ENTRY(3);
             11994    1   DCL VXR$READ        ENTRY( 3 );
             11995    1   DCL VXW$WRITE       ENTRY( 3 );
             11996    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             11997    1   DCL VXD$B2C         ENTRY( 5 );
             11998    1   DCL VXD$C2B         ENTRY( 3 );
             11999    1   DCL VXA$GET         ENTRY( 3 );
             12000    1   DCL VXF$FREE        ENTRY( 3 );
             12001    1   DCL VXQ$SORT        ENTRY( 7 );
             12002    1   DCL VXY$YESNO       ENTRY( 1 );
       24    12004        %P;
             12005        %LSET LISTDIR='0'B;

             12012    1   /*******************************************************************************
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:4    
             12013    1   *                                                                              *
             12014    1   *                          PARAMETERS                                              *
             12015    1   *                                                                              *
             12016    1   *******************************************************************************/

       25    12020    1   DCL TYPE            UBIN(36)       ALIGNED;
       26    12021    1   DCL BUF$            PTR            ALIGNED;
       27    12022    1   DCL SIZE            UBIN(36)       ALIGNED;
       28    12023    1   DCL KEY             UBIN(36)       ALIGNED;
       29    12024        %PTR;
             12025        %LSET LISTDIR='0'B;

             12032    1   /*******************************************************************************
             12033    1   *                                                                              *
             12034    1   *                          PTR                                                 *
             12035    1   *                                                                              *
             12036    1   *******************************************************************************/

       30    12040    1   DCL DCB$            PTR            ALIGNED   AUTO;
       31    12041    1   DCL FPT$            PTR            ALIGNED   AUTO;
       32    12042    1   DCL K$              PTR            ALIGNED   AUTO;
       33    12043        %U;
             12044        %LSET LISTDIR='0'B;

             12051    1   /*******************************************************************************
             12052    1   *                                                                              *
             12053    1   *                          UBIN                                                 *
             12054    1   *                                                                              *
             12055    1   *******************************************************************************/

       34    12059    1   DCL ERR             UBIN(36)       ALIGNED   AUTO;
       35    12060    1   DCL KEY_TYPE        UBIN(36)       ALIGNED   AUTO;
       36    12061    1   DCL RTYPE           UBIN(36)       ALIGNED   AUTO;
       37    12062    1   DCL INTERNAL_IO_SAVEPREV       UBIN(36)  ALIGNED   AUTO;
       38    12063    1   DCL COUNT           UBIN(36)       ALIGNED   AUTO;
       39    12064        %S;
             12065        %LSET LISTDIR='0'B;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:5    

             12072    1   /*******************************************************************************
             12073    1   *                                                                              *
             12074    1   *                          SBIN                                                 *
             12075    1   *                                                                              *
             12076    1   *******************************************************************************/

       40    12080    1   DCL PREV#           SBIN WORD      ALIGNED   AUTO;
       41    12081    1   DCL KEYFORM         SBIN WORD      ALIGNED   AUTO;
       42    12082    1   DCL CURR#           SBIN WORD      ALIGNED   AUTO;
       43    12083    1   DCL M$OF            DCB;
       44    12084    1   DCL M$RF            DCB;
       45    12085    1   DCL 1 C$STRING BASED,
       46    12086    1         2 COUNT UBIN(9) UNAL,
       47    12087    1         2 CHARS(0:510) CHAR(1) UNAL;
       48    12088        %FPT_WRITE( FPTN=F$W, STCLASS="BASED(FPT$)");
             12089        %LSET LISTDIR='0'B;
             12105    1   DCL 1 F$W BASED(FPT$),2 V_ BIT(72)/*(VECTOR(F$W.V))/**/,2 KEY_ BIT(72)/*(VECTOR(NIL)
             12105            )/**/,2 BUF_,3
             12106    1   BOUND UBIN(20)UNAL /*(SIZEV(NIL))/**/,3 * BIT(12)/*('7772'O)/**/,3 * BIT(4)/*('0'B)
             12107    1   /**/,3 BUF$ PTR /*(ADDR(NIL))/**/,2 STATION_ BIT(72)/*(VECTOR(NIL))/**/,2
             12108    1   IDBUF_ REDEF STATION_ BIT(72),2 V DALIGNED,3 DCB# UBIN(18)UNAL /*(DCBNUM(NIL))/**/,3
             12108            WAIT# BIT(1)/*('1'B
             12109    1   )/**/ ,3 * BIT(2)/*('0'B)/**/,3 ID# BIT(1)/*('0'B)/**/,3 * BIT(1)/*('0'B)
             12110    1   /**/,3 FULL# BIT(1)/*('0'B)/**/ ,3 * BIT(3)/*('0'B)/**/,3 ONEWKEY# BIT(1)/*('1'B)
             12111    1   /**/ ,3 NEWKEY# BIT(1)/*('0'B)/**/ ,3 REWRITE# BIT(1)/*('0'B)/**/ ,3 NOTIME# BIT(1)
             12111            /*
             12112    1   ('0'B)/**/ ,3 IOERROK# BIT(1)/*('0'B)/**/ ,3 KEYTYPE# UBIN(4)/*(0)/**/ UNAL,
             12113    1   3 EVENT# SBIN /*(0)/**/,3 SEED# BIT(36)/*('0'B)/**/,3 DVBYTE,4 TOP# BIT(1)/*('0'B)
             12114    1   /**/,4 BP# BIT(1)/*('0'B)/**/,4 VFC# BIT(1)/*('0'B)/**/,4 REREAD# REDEF VFC# BIT(1),
             12114            4 BIN# BIT(1
             12115    1   )/*('0'B)/**/,4 TRANS# BIT(1)/*('0'B)/**/,4 RRR# BIT(1)/*('0'B)/**/,4 NODAT# BIT(1
             12116    1   )/*('0'B)/**/,4 * BIT(1)/*('0'B)/**/,4 CONT# BIT(1)/*('0'B)/**/,3 * BIT(1)/*
             12117    1   ('0'B)/**/,3 ODFNC# UBIN(8)UNAL /*(0)/**/,3 * UBIN(18)UNAL /*(0)/**/;
       49    12119        %O_KEY_BUF( KEYBUF=K$B,
       50    12120                    STCLASS="BASED(K$)",
       51    12121                    INT="");
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:6    
             12122    1   DCL 1 K$B ALIGNED BASED(K$),
             12123    1          2 FORM0 ,
             12124    1           3 COUNT       UBIN( 9)  UNAL,
             12125    1           3 CHARS       CHAR(512) UNAL,
             12126    1         2 FORM1        REDEF     FORM0,
             12127    1           3 COUNT       UBIN( 9)  UNAL,
             12128    1           3 O777        UBIN( 9)  UNAL,   /* <- '777'O                          */
             12129    1           3 UTS         UBIN(36)  UNAL,
             12130    1           3 REC_TYPE    UBIN( 9)  UNAL,
             12131    1           3 PAGE#       UBIN( 9)  UNAL,
             12132    1           3 *           CHAR(505) UNAL,
             12133    1         2 FORM2        REDEF     FORM0,
             12134    1           3 COUNT       UBIN( 9)  UNAL,
             12135    1           3 O777        UBIN( 9)  UNAL,   /* <- '777'O                          */
             12136    1           3 UTS         UBIN(36)  UNAL,
             12137    1           3 D10         UBIN( 9)  UNAL,   /* <- 10                              */
             12138    1           3 SECT#       UBIN(18)  UNAL,
             12139    1           3 OFFSET      UBIN(18)  UNAL,
             12140    1           3 STYPE       UBIN( 9)  UNAL,
             12141    1           3 SEQUENCE    UBIN( 9)  UNAL,
             12142    1           3 *           CHAR(500) UNAL ;
       52    12144        %R_KEY_BUF( KEYBUF=K$R,
       53    12145                    STCLASS="BASED(K$)",
       54    12146                    INT="");
             12147    1   DCL 1 K$R                        BASED(K$),
             12148    1         2 FORM0                  ALIGNED,
             12149    1           3 COUNT       UBIN( 9)  UNAL,
             12150    1           3 CHARS       CHAR( 5)  UNAL,
             12151    1           3 *           CHAR( 6)  UNAL,
             12152    1         2 FORM1        REDEF     FORM0,
             12153    1           3 COUNT       UBIN( 9)  UNAL,
             12154    1           3 REC_TYPE    UBIN( 9)  UNAL,
             12155    1           3 NODE#       UBIN(18)  UNAL,
             12156    1           3 OFFSET      UBIN(18)  UNAL,
             12157    1           3 *           CHAR( 6)  UNAL,
             12158    1         2 FORM2        REDEF     FORM0,
             12159    1           3 COUNT       UBIN( 9)  UNAL,
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:7    
             12160    1           3 O777        UBIN( 9)  UNAL,   /* <- '777'O                          */
             12161    1           3 NODE#       UBIN(18)  UNAL,
             12162    1           3 P_ENTDEF    UBIN(18)  UNAL,
             12163    1           3 REC_TYPE    UBIN( 9)  UNAL,
             12164    1           3 PAGE#       UBIN( 9)  UNAL,
             12165    1           3 *           CHAR( 4)  UNAL;
       55    12167        %PLIST;
       56    12168        %F$DCB;
       57    12225        %FPT_READ( FPTN=F$R, STCLASS="BASED(FPT$)" );
       58    12264        %FPT_READ( FPTN=VX_OF_FPT_READ,
       59    12265                   DCB=M$OF,
       60    12266                   KEY=VX_O_KEY_BUF,
       61    12267                   KEYS=YES,
       62    12268                   KEYR=YES,
       63    12269                   STCLASS="STATIC SYMDEF");
       64    12308        %PLIST;
       65    12309        %FPT_READ( FPTN=VX_RF_FPT_READ,
       66    12310                   DCB=M$RF,
       67    12311                   KEY=VX_R_KEY_BUF,
       68    12312                   KEYS=YES,
       69    12313                   KEYR=YES,
       70    12314                   STCLASS="STATIC SYMDEF");
       71    12353        %FPT_WRITE( FPTN=VX_R_FPT_WRITE,
       72    12354                   DCB=M$RF,
       73    12355                   KEY=VX_R_KEY_BUF,
       74    12356                   STCLASS="STATIC SYMDEF");
       75    12387        %SET LISTEXP = '0'B;
       76    12388        %EJECT;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:8    
       77    12389    2       DO CASE( TYPE );
       78    12390    2         CASE( 0/*@OF*/ );
       79    12391    2           FPT$ = ADDR( VX_OF_FPT_READ );
       80    12392    2           DCB$ = M$OF$;
       81    12393    2         CASE( 1/*@RF*/ );
       82    12394    2           FPT$ = ADDR( VX_RF_FPT_READ );
       83    12395    2           DCB$ = M$RF$;
       84    12396    2         CASE( 2/*@LF*/ );
       85    12397    2           FPT$ = ADDR( VX_OF_FPT_READ );
       86    12398    2           DCB$ = M$OF$;
       87    12399    2         CASE(ELSE);
       88    12400        /*E*  ERROR: VXI-E$INTERNAL_READ_BAD_TYPE_VX-0
       89    12401              MESSAGE: Internal LINK error; Bad type passed to VXI$READ: TYPE = %U1.
       90    12402              DESCRIPTION: Self-explanatory.
       91    12403        */
       92    12404                %NUMBER( NUM1=TYPE );
       93    12421                %SCREAM(
       94    12422                ERR#=E$INTERNAL_READ_BAD_TYPE_VX,
       95    12423                MID="'I'",
       96    12424                LEVEL=@E$F_VX,
       97    12425                AUX=@E$OF_VX);
       98    12428    2         END;
       99    12429    1       F$R.BUF_.BOUND   = SIZE * 4 - 1;
      100    12430    1       F$R.BUF_.BUF$   = BUF$;
      101    12431    1       F$R.V.KEYR# = '1'B/*@YES_B*/;
      102    12432    1       KEY_TYPE = KEY;
      103    12433    1       IF KEY_TYPE = 3/*@NO_KEY*/ THEN KEY_TYPE = TYPE;
      104    12434    2       DO CASE( KEY_TYPE );
      105    12435    2         CASE( 0/*@OF*/ );
      106    12436    2           F$R.KEY_   = VECTOR( VX_O_KEY_BUF );
      107    12437    2           K$ = ADDR(VX_O_KEY_BUF);
      108    12438    2         CASE( 1/*@RF*/ );
      109    12439    2           F$R.KEY_   = VECTOR( VX_R_KEY_BUF );
      110    12440    2           K$ = ADDR( VX_R_KEY_BUF );
      111    12441    2         CASE( 2/*@LF*/ );
      112    12442    2           F$R.KEY_   = VECTOR( VX_O_KEY_BUF );
      113    12443    2           K$ = ADDR( VX_O_KEY_BUF );
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:9    
      114    12444    2         CASE(ELSE);
      115    12445        /*E*  ERROR: VXI-E$INTERNAL_READ_BAD_KEY_TP_VX-0
      116    12446              MESSAGE: Internal LINK error; Bad key type passed to VXI$READ: Key type = %U1.
      117    12447              DESCRIPTION: Self-explanatory.
      118    12448        */
      119    12449                %NUMBER( NUM1=KEY_TYPE );
      120    12466                %SCREAM(
      121    12467                ERR#=E$INTERNAL_READ_BAD_KEY_TP_VX,
      122    12468                MID="'I'",
      123    12469                LEVEL=@E$F_VX,
      124    12470                AUX=@E$OF_VX);
      125    12473    2         END;
      126    12474    2       IF KEY ~= 3/*@NO_KEY*/ THEN DO;
      127    12475    2           F$R.V.KEYS# = '1'B/*@YES_B*/;
      128    12476    3           IF VX_IO_USEPREV ~= 1/*@YES*/ THEN DO;
      129    12477    3              END;                         /* If VX_IO_USEPREV ~= @YES then do; */
      130    12478    3           ELSE DO;                        /* If VX_IO_USEPREV ~= @YES then do; */
      131    12479    3               VX_IO_USEPREV = 0/*@NO*/;
      132    12480    3               IF VX_IO_SAVEPREV = 2 THEN F$R.V.KEYS# = '0'B/*@NO_B*/;
      133    12481    4               DO CASE(KEY);
      134    12482    4                 CASE(0/*@OF*/);
      135    12483    4                   VX_O_KEY_BUF = VX_O_KEY_BUF_L;
      136    12484    4                 CASE(ELSE);
      137    12485        /*E*  ERROR: VXI-E$INTERNAL_READ_SAVE_PREV_VX-0
      138    12486         MESSAGE: Internal LINK error; Save previous switch set for non-object file in VXI$R
             12486        EAD.
      139    12487              DESCRIPTION: Self-explanatory.
      140    12488        */
      141    12489                        %SCREAM(
      142    12490                        ERR#=E$INTERNAL_READ_SAVE_PREV_VX,
      143    12491                        MID="'I'",
      144    12492                        LEVEL=@E$F_VX,
      145    12493                        AUX=@E$OF_VX);
      146    12496    4                 END;                      /* Do case(key); */
      147    12497    3              END;             /*Else do; - if VX_IO_USEPREV ~= @YES then do; */
      148    12498    2          END;                             /* If key ~= @NO_KEY then do; */
      149    12499    2       ELSE DO;                            /* If key ~= @NO_KEY then do; */
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:10   
      150    12500    2           F$R.V.KEYS# = '0'B/*@NO_B*/;
      151    12501    2          END;                         /* Else do; - if key ~= @NO_KEY then do; */
      152    12502    1       CALL M$READ( F$R )            ALTRET( READ_ERROR );
      153    12503    1       VX_IO_STATUS = -1;
      154    12504    1   CONTINUE:
      155    12505    1       INTERNAL_IO_SAVEPREV = VX_IO_SAVEPREV;
      156    12506    2       IF VX_IO_SAVEPREV ~= 0/*@NO*/ THEN DO;
      157    12507    2           VX_IO_SAVEPREV = 0/*@NO*/;           /*Reset*/
      158    12508    3           DO CASE( TYPE );
      159    12509    3             CASE(0/*@OF*/);
      160    12510    3               VX_O_KEY_BUF_L.FORM0.COUNT = VX_O_KEY_BUF.FORM0.COUNT;
      161    12511    3               VX_O_KEY_BUF_L.FORM0.CHARS = VX_O_KEY_BUF.FORM0.CHARS;
      162    12512    3             CASE(ELSE);
      163    12513        /*E*  ERROR: VXI-E$INTERNAL_READ_USE_PREV_VX-0
      164    12514         MESSAGE: Internal LINK error; Use previous switch set for non-object file in VXI$RE
             12514        AD.
      165    12515              DESCRIPTION: Self-explanatory.
      166    12516        */
      167    12517                    %SCREAM(
      168    12518                    ERR#=E$INTERNAL_READ_USE_PREV_VX,
      169    12519                    MID="'I'",
      170    12520                    LEVEL=@E$F_VX,
      171    12521                    AUX=@E$OF_VX);
      172    12524    3             END;
      173    12525    2          END;
      174    12526    1       VX_IO_SIZEC = DCB$ -> F$DCB.ARS#;
      175    12527    1       VX_IO_SIZEW = ( VX_IO_SIZEC + 4/*@CHAR_WORD*/ - 1 ) /4/*@CHAR_WORD*/;
      176    12528    1       VX_OK.KFILE = TYPE;
      177    12529    2       DO CASE( KEY_TYPE );
      178    12530    2         CASE( 0/*@OF*/, 2/*@LF*/ );
      179    12531    3           IF K$ -> C$STRING.CHARS(0) = VX_O_KEY_HEAD THEN DO;
      180    12532                                                /*Head record*/
      181    12533    3               VX_OK.KTYPE  = -1;
      182    12534    3               VX_LAST_UTS = VX_OU_HEAD.UTS; /* Save uts */
      183    12535    3               VX_OK.OUNAME.COUNT = K$B.FORM0.COUNT - 1; /* Set count */
      184    12536    3               VX_OK.OUNAME.CHARS = SUBSTR( K$B.FORM0.CHARS,1,VX_OK.OUNAME.COUNT);
      185    12537                                        /* Move object unit name into textc buffer */
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:11   
      186    12538    3              END;
      187    12539    2           ELSE
      188    12540    2               IF K$ -> T$C.CHARS = VX_O_KEY_TREE THEN VX_OK.KTYPE = -2;
      189    12541    2               ELSE
      190    12542    3                   IF K$B.FORM1.O777 = BITBIN('777'O) THEN DO; /* Form 1 or 2 */
      191    12543    3                       COUNT = K$B.FORM0.COUNT; /* Get count */
      192    12544    4                       IF COUNT = 7 THEN DO;
      193    12545    4                           VX_OK.KTYPE = 1; /* Set key form */
      194    12546    4                           RTYPE = K$B.FORM1.REC_TYPE; /* Set record type retrieved */
      195    12547    4                           IF RTYPE ~= VX_OK.KRTYPE THEN VX_OK.KPAGE# = -1;
      196    12548    4                           VX_OK.KRTYPE = RTYPE;
      197    12549    4                           IF VX_OK.KRTYPE < %TYPDNAM
      198    12550    4                                   OR
      199    12551    4                                   VX_OK.KRTYPE > %TYPDBGNAM
      200    12552    4                                   OR
      201    12553    4                                   VX_OK.KRTYPE = %TYPPROG
      202    12554    4                           THEN CALL REPORT_INCONSISTENCY( 1 /* Keyform 1 */ );
      203    12555    5                           IF VX_OK.KPAGE# > 0 THEN DO;
             12555                                    /* Check if checks should be performed */
      204    12556    6                               IF VX_OK.KPAGE# + 1 ~= K$B.FORM1.PAGE# THEN DO;
             12556                                        /* Sequence error*/
      205    12557        /*E*  ERROR: VXI-E$PAGE_SEQUENCE_VX-0
      206    12558              MESSAGE: Page sequence error for record type = %U1.
      207    12559              DESCRIPTION: Page sequence error has occurred for object unit records
      208    12560        */
      209    12561    6                                   CALL REPORT_SEQUENCE_ERROR(
      210    12562    6                                           401, /* ERR# */
      211    12563    6                                           VX_OK.KPAGE#, /*Set previous */
      212    12564    6                                           K$B.FORM1.PAGE# /* Set current */ );
      213    12565    6                                  END;
      214    12566    5                              END;
      215    12567    4                           VX_OK.KPAGE# = K$B.FORM1.PAGE#; /* Set page number */
      216    12568    4                           GOTO CHECK_UTS;
      217    12569    4                          END;
      218    12570    3                       ELSE
      219    12571    4                           IF COUNT = 11 OR COUNT = 12 THEN DO;
      220    12572    4                               VX_OK.KTYPE = 2; /* Set key form */
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:12   
      221    12573    4                               VX_OK.KRTYPE = K$B.FORM2.D10; /* Set record type */
      222    12574    5                               IF VX_OK.KRTYPE ~= %TYPPROG THEN DO;
             12574                                        /* Check if type 10 */
      223    12575    5                                   CALL REPORT_INCONSISTENCY( 2 /* Keyform 2 */ );
      224    12576    5                                  END;
      225    12577    4                               VX_OK.KSECT# = K$B.FORM2.SECT#; /* Set section # */
      226    12578    4                               VX_OK.KOFSET = K$B.FORM2.OFFSET; /* Setoffset */
      227    12579    4                               VX_OK.KSTYPE = K$B.FORM2.STYPE; /* Set SUB_TYPE*/
      228    12580    5                               IF VX_OK.KSTYPE > 1 THEN DO; /* Range error */
      229    12581        /*E*  ERROR: VXI-E$BAD_FORM1_SUB_TYPE_VX-0
      230    12582              MESSAGE: Illegal subtype value detected for record type 10; Subtype = %U1.
      231    12583              DESCRIPTION: Self-explanatory.
      232    12584        */
      233    12585                                        %NUMBER( NUM1="VX_OK.KSTYPE" );
      234    12602                                        %SCREAM(
      235    12603                                        ERR#=E$BAD_FORM1_SUB_TYPE_VX,
      236    12604                                        LEVEL=@E$F_VX,
      237    12605                                        MID="'I'",
      238    12606                                        AUX=@E$OUOF_VX);
      239    12609    5                                  END;
      240    12610    4                               IF COUNT = 11 THEN VX_OK.KSEQUENCE = -1;
             12610                                        /* Reset count */
      241    12611    5                               ELSE DO;    /* Check */
      242    12612    6                                   IF VX_OK.KSEQUENCE ~= -1 THEN DO;
             12612                                            /* Not the first */
      243    12613    7                                       IF VX_OK.KSEQUENCE + 1 < K$B.FORM2.SEQUENCE THEN
             12613                                                DO;
      244    12614        /*E*  ERROR: VXI-E$BAD_SEQUENCE_VX
      245    12615              MESSAGE: Text/relocation sequencing error for record type = %U1.
      246    12616              DESCRIPTION: A sequencing problem has arisen in the object unit for
      247    12617                           text/relocation(type 10 ) records.
      248    12618        */
      249    12619    7                                           CALL REPORT_SEQUENCE_ERROR(
      250    12620    7                                                   404,
      251    12621    7                                                   VX_OK.KSEQUENCE,
      252    12622    7                                                   K$B.FORM2.SEQUENCE );
      253    12623                                                /*Error-sequencing */
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:13   
      254    12624    7                                          END;
      255    12625    6                                       VX_OK.KSEQUENCE = K$B.FORM2.SEQUENCE;
      256    12626    6                                      END;
      257    12627    5                                  END;
      258    12628    4   CHECK_UTS:
      259    12629    5                               IF VX_LAST_UTS ~= K$B.FORM2.UTS THEN DO; /*Error*/
      260    12630        /**********ATTN: Need to remove ************/
      261    12631        %SET LISTCON='1'B;
      262    12632        %IF '0'B;
      263    12633 C      /*E*  ERROR: VXI-E$BAD_UTS_VX-0
      264    12634 C            MESSAGE: Inconsistent UTS values; Last value = %U1; Current value = %U2.
      265    12635 C            DESCRIPTION: A change in the uts value has occurred within an object unit.
      266    12636 C      */
      267    12637 C                                      PREV# = VX_LAST_UTS;
      268    12638 C                                      CURR# = K$B.FORM2.UTS;
      269    12639 C                                      %NUMBER(
      270    12640 C                                      NUM1=PREV#,
      271    12641 C                                      BASE1=8,
      272    12642 C                                      NUM2=CURR#,
      273    12643 C                                      BASE2=8);
      274    12644 C                                      %SCREAM(
      275    12645 C                                      ERR#=E$BAD_UTS_VX,
      276    12646 C                                      LEVEL=@E$F_VX,
      277    12647 C                                      MID="'I'",
      278    12648 C                                      AUX=@E$OUOF_VX);
      279    12649 C      /**********ATTN: Need to remove ***********/
      280    12650        %ENDIF;
      281    12651    5                                  END;
      282    12652    4                              END;
      283    12653    4                           ELSE DO;        /* Error */
      284    12654    4   BAD_O_KEY:
      285    12655        /*E*  ERROR: VXI-E$UNKNOWN_REC_TYPE_VX-0
      286    12656              MESSAGE: Unknown/illegal record type detected.
      287    12657              DESCRIPTION: Self-explanatory.
      288    12658        */
      289    12659                                    %SCREAM(
      290    12660                                    ERR#=E$UNKNOWN_REC_TYPE_VX,
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:14   
      291    12661                                    LEVEL=@E$F_VX,
      292    12662                                    MID="'I'",
      293    12663                                    AUX=@E$OUOF_VX);
      294    12666    4                              END;
      295    12667    3                      END;
      296    12668    3                   ELSE DO;                /* Check if lib search key */
      297    12669    3                       IF VX_LIBRARY_PROBE AND
      298    12670    3                               K$B.FORM0.COUNT <= 255 AND
      299    12671    3                               VX_IO_SIZEC <= 255 THEN
      300    12672    3                           VX_OK.KTYPE = -3; /* Assume library probe */
      301    12673    3                       ELSE IF INTERNAL_IO_SAVEPREV = 2
      302    12674    3                           THEN GOTO POP_OUT ;
      303    12675    3                           ELSE GOTO BAD_O_KEY ;
      304    12676    3                      END;
      305    12677        %EJECT;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:15   
      306    12678    2         CASE( 1/*@RF*/ );
      307    12679    2           COUNT = K$R.FORM0.COUNT;        /*Get key count */
      308    12680    3           IF COUNT = 4 THEN DO;           /*Head record */
      309    12681    3               IF K$ -> T$C.CHARS = VX_R_KEY_HEAD THEN VX_OK.KTYPE = -1;
      310    12682    3               ELSE GOTO BAD_R_KEY;
      311    12683    3              END;
      312    12684    2           ELSE
      313    12685    2               IF COUNT = 5 THEN
      314    12686    2                   IF K$ -> T$C.CHARS = VX_R_KEY_BIRTH THEN VX_OK.KTYPE = -2;
      315    12687    3                   ELSE DO;
      316    12688    3                       VX_OK.KTYPE = 1;    /* Form 1 */
      317    12689    3                       VX_OK.KRTYPE = K$R.FORM1.REC_TYPE;
      318    12690    3                       VX_OK.KNODE# = K$R.FORM1.NODE#;
      319    12691    3                       IF VX_OK.KRTYPE = %TYPPROG THEN VX_OK.KOFSET = K$R.FORM1.OFFSET;
      320    12692    3                       ELSE VX_OK.KPAGE# = K$R.FORM1.OFFSET;
      321    12693    3                       IF (VX_OK.KRTYPE >= %TYPDNAM AND VX_OK.KRTYPE <= %TYPPROG)
      322    12694    3                               OR VX_OK.KRTYPE = %TYPDATASEG
      323    12695    3                               OR VX_OK.KRTYPE = %TYPROS
      324    12696    3                       THEN ;              /* Key type is ok   */
      325    12697    4                       ELSE DO;            /* Error */
      326    12698
      327    12699        /*E*  ERROR: VXI-E$BAD_RUN_REC_TYPE_VX-0
      328    12700        MESSAGE: Inconsistency between key form and record type or bad record type in
      329    12701                 run file %FN; Type = %U1.
      330    12702        DESCRIPTION: Inconsistency between key form and record type has occurred for a recor
             12702        d in the run file.
      331    12703        */
      332    12704    4   BAD_R_TYPE:
      333    12705    5                           DO CASE( TYPE );
      334    12706    5                             CASE(0/*@OF*/);
      335    12707    5                               VX_FPT_ERRMSG.V.DCB# = DCBNUM(M$OF);
      336    12708    5                             CASE(1/*@RF*/);
      337    12709    5                               VX_FPT_ERRMSG.V.DCB# = DCBNUM( M$RF );
      338    12710    5                             CASE(2/*@LF*/);
      339    12711    5                               VX_FPT_ERRMSG.V.DCB# = DCBNUM( M$OF );
      340    12712    5                             END;
      341    12713                                %NUMBER( NUM1="VX_OK.KRTYPE" );
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:16   
      342    12730                                %SCREAM(
      343    12731                                ERR#=E$BAD_RUN_REC_TYPE_VX,
      344    12732                                LEVEL=@E$F_D_VX, MID="'I'" );
      345    12735    4                           CALL DUMP_KEY_BUF;
      346    12736    4                          END;
      347    12737    3                      END;
      348    12738    3               ELSE IF COUNT = 7 THEN DO;
      349    12739    3                       VX_OK.KTYPE = 2;    /* Form 2 */
      350    12740    3                       VX_OK.KRTYPE = K$R.FORM2.REC_TYPE;
      351    12741    3                       VX_OK.KNODE# = K$R.FORM2.NODE#;
      352    12742    3                       VX_OK.KPEDX = K$R.FORM2.P_ENTDEF;
      353    12743    3                       VX_OK.KPAGE# = K$R.FORM2.PAGE#;
      354    12744    3                       IF VX_OK.KRTYPE < %TYPPROG
      355    12745    3                               OR
      356    12746    3                               VX_OK.KRTYPE > %TYPDBGNAM THEN GOTO BAD_R_TYPE;
      357    12747    3                       IF K$R.FORM2.O777 ~= BITBIN('777'O) THEN GOTO BAD_R_KEY;
      358    12748    3                      END;
      359    12749    3                   ELSE DO;                /* Error */
      360    12750    3   BAD_R_KEY:
      361    12751    4                       DO CASE( TYPE );
      362    12752    4                         CASE( 0/*@OF*/ );
      363    12753    4                           VX_FPT_ERRMSG.V.DCB# = DCBNUM( M$OF );
      364    12754    4                         CASE( 1/*@RF*/ );
      365    12755    4                           VX_FPT_ERRMSG.V.DCB# = DCBNUM( M$RF );
      366    12756    4                         CASE( 2/*@LF*/ );
      367    12757    4                           VX_FPT_ERRMSG.V.DCB# = DCBNUM( M$OF );
      368    12758    4                         END;
      369    12759        /*E*  ERROR: VXI-E$UNKNOWN_RUN_REC_KEY_VX-0
      370    12760              MESSAGE: Unknown/illegal record detected in run file: %FN.
      371    12761              DESCRIPTION: Self-explanatory.
      372    12762        */
      373    12763                            %SCREAM(
      374    12764                            ERR#=E$UNKNOWN_RUN_REC_KEY_VX,
      375    12765                            LEVEL=@E$F_D_VX,
      376    12766                            MID="'I'");
      377    12769    3                       CALL DUMP_KEY_BUF;
      378    12770    3                      END;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:17   
      379    12771    2         END;
      380    12772    1       RETURN;
      381    12773        %EJECT;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:18   
      382    12774    1   READ_ERROR:
      383    12775    1       ERR = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.ERR#/*@ALT_ERROR*/;
      384    12776    2       IF ERR = %E$EOF THEN DO;
      385    12777    2           VX_IO_STATUS = 0/*@IO_EOF*/;
      386    12778    2          END;
      387    12779    1       ELSE
      388    12780    2           IF ERR = %E$NOKEY THEN DO;
      389    12781    2               VX_IO_STATUS = 1/*@IO_NOKEY*/;
      390    12782    2              END;
      391    12783    1           ELSE
      392    12784    2               IF ERR = %E$LD THEN DO;
      393    12785    2                   VX_IO_STATUS = 2/*@IO_LD*/;
      394    12786    2                   IF TYPE = 1/*@RF*/ THEN GOTO POP_OUT;
      395    12787    2                   IF VX_IO_SAVEPREV > 0 THEN GOTO CONTINUE;
      396    12788    2                  END;
      397    12789    2               ELSE DO;
      398    12790        /* Here for irrecoverable i/o errors */
      399    12791    2   WRITE_ERROR:
      400    12792    2                   CALL M$MERC ALTRET(MERC_ERROR);
      401    12793                        %ERROR_IT;
      402    12796    2                  END;
      403    12797    1   POP_OUT:
      404    12798        /* Reset global i/o variables */
      405    12799    1       VX_IO_SIZEC = 0;
      406    12800    1       VX_IO_SIZEW = 0;
      407    12801    1       VX_IO_SAVEPREV = 0/*@NO*/;
      408    12802    1       VX_OK.KTYPE = -5;
      409    12803    1       ALTRETURN;
      410    12804    1   MERC_ERROR:
      411    12805    1       CALL VXE$MERC;
      412    12806            %BANNER(ARG="End VXI$READ" );

             12814    1   /*******************************************************************************
             12815    1   *                                                                              *
             12816    1   *                          End VXI$READ                                            *
             12817    1   *                                                                              *
             12818    1   *******************************************************************************/
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:19   

      413    12822        %EJECT;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:20   
      414    12823            %BANNER(ARG="VXI$WRITE Entry" );

             12831    1   /*******************************************************************************
             12832    1   *                                                                              *
             12833    1   *                          VXI$WRITE Entry                                         *
             12834    1   *                                                                              *
             12835    1   *******************************************************************************/

      415    12839        %PLIST;
      416    12840    1   VXI$WRITE:
      417    12841    1       ENTRY(         TYPE, BUF$, SIZE, KEY )  ALTRET;
      418    12842    2       DO CASE( TYPE );
      419    12843        /* Not possible for LINKer
      420    12844                   CASE( @OF );
      421    12845                   FPT$ = ADDR( VX_O_FPT_WRITE );
      422    12846        */
      423    12847    2         CASE( 1/*@RF*/ );
      424    12848    2           FPT$ = ADDR( VX_R_FPT_WRITE );
      425    12849        /* Not possible for LINKer
      426    12850                   CASE( @LF );
      427    12851                   FPT$ = ADDR( VX_O_FPT_WRITE );
      428    12852        */
      429    12853    2         CASE(ELSE);
      430    12854        /*E*  ERROR: VXI-E$INTERNAL_WRITE_BAD_TYPE_VX-0
      431    12855              MESSAGE: Internal LINK error; Bad type passed to VXI$WRITE: Type = %U1.
      432    12856              DESCRIPTION: Self-explanatory.
      433    12857        */
      434    12858                %NUMBER( NUM1=TYPE );
      435    12875                %SCREAM(
      436    12876                ERR#=E$INTERNAL_WRITE_BAD_TYPE_VX,
      437    12877                MID="'I'",
      438    12878                LEVEL=@E$F_VX);
      439    12881    2         END;
      440    12882    1       F$W.BUF_.BOUND   = SIZE * 4 - 1;
      441    12883    1       F$W.BUF_.BUF$   = BUF$;
      442    12884    2       IF KEY ~= 3/*@NO_KEY*/ THEN DO;
      443    12885    3           DO CASE( KEY );
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:21   
      444    12886    3             CASE( 0/*@OF*/ );
      445    12887    3               F$W.KEY_   = VECTOR( VX_O_KEY_BUF );
      446    12888    3             CASE( 1/*@RF*/ );
      447    12889    3               F$W.KEY_   = VECTOR( VX_R_KEY_BUF );
      448    12890    3             CASE( 2/*@LF*/ );
      449    12891    3               F$W.KEY_   = VECTOR( VX_O_KEY_BUF );
      450    12892        /*E*  ERROR: VXI-E$INTERNAL_WRITE_BAD_KEY_TP_VX-0
      451    12893             MESSAGE: Internal LINK error; Bad key type passed to VXI$WRITE: Key type = %U1.
      452    12894              DESCRIPTION: Self-explanatory.
      453    12895        */
      454    12896                    %NUMBER( NUM1=KEY );
      455    12913                    %SCREAM(
      456    12914                    ERR#=E$INTERNAL_WRITE_BAD_KEY_TP_VX,
      457    12915                    MID="'I'",
      458    12916                    LEVEL=@E$F_VX);
      459    12919    3             END;
      460    12920    2          END;
      461    12921    2       ELSE DO;
      462    12922    2           F$W.KEY_   = VECTOR(NIL);
      463    12923    2          END;
      464    12924    1       CALL M$WRITE( F$W )           ALTRET( WRITE_ERROR );
      465    12925    1       VX_IO_STATUS = -1;
      466    12926
      467    12927            %BANNER(ARG="End VXI$WRITE" );

             12935    1   /*******************************************************************************
             12936    1   *                                                                              *
             12937    1   *                          End VXI$WRITE                                           *
             12938    1   *                                                                              *
             12939    1   *******************************************************************************/

      468    12943        %PLIST;
      469    12944        %EJECT;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:22   
      470    12945    1   REPORT_INCONSISTENCY: PROC( KEYFORM );
      471    12946
      472    12947    2   DCL KEYFORM      UBIN;
      473    12948
      474    12949        /*E*  ERROR: VXI-E$BAD_FORM1_REC_TYPE_VX-0
      475    12950              MESSAGE: Object language error.  Illegal record type/key form detected.
      476    12951                       Record type = %U1; Key form = %U2.
      477    12952              DESCRIPTION: A bad record type has been detected within an object unit.
      478    12953        */
      479    12954
      480    12955              %NUMBER( NUM1="VX_OK.KRTYPE", NUM2=KEYFORM );
      481    12972
      482    12973
      483    12974              %SCREAM(
      484    12975                      ERR#=E$BAD_FORM1_REC_TYPE_VX, LEVEL=@E$F_D_VX,
      485    12976                      MID="'I'", AUX=E$OUOF_VX );
      486    12979
      487    12980    2       CALL DUMP_KEY_BUF;
      488    12981
      489    12982    2   END REPORT_INCONSISTENCY;
      490    12983
      491    12984        %EJECT;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:23   
      492    12985    1   REPORT_SEQUENCE_ERROR: PROC( ERR_CODE, PREV#, CURR# );
      493    12986
      494    12987    2   DCL ERR_CODE  UBIN;
      495    12988    2   DCL PREV#     UBIN;
      496    12989    2   DCL CURR#     UBIN;
      497    12990
      498    12991              %NUMBER( NUM1="VX_OK.KRTYPE" );
      499    13008
      500    13009              %SCREAM( ERR# = ERR_CODE, LEVEL=@E$F_D_VX, MID="'I'" );
      501    13012
      502    13013        /*E*  ERROR: VXI-E$LAST_CURR_VX-0
      503    13014              MESSAGE: Last value = %U1; Current value = %U2.
      504    13015              DESCRIPTION: Display last/current values for appropriate error condition.
      505    13016        */
      506    13017              %NUMBER( NUM1=PREV#, NUM2=CURR# );
      507    13034
      508    13035              %SCREAM( ERR#=E$LAST_CURR_VX, LEVEL=E$F_VX, MID="'I'", AUX=E$OUOF_VX );
      509    13038
      510    13039    2   END REPORT_SEQUENCE_ERROR;
      511    13040
      512    13041        %EJECT;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:24   
      513    13042    1   DUMP_KEY_BUF: PROC;
      514    13043
      515    13044        /*E*  ERROR:  VXI-E$DUMP3_VX-0
      516    13045              MESSAGE: Words 0-2: %U1  %U2  %U3
      517    13046              DESCRIPTION: Dump 3 words in octal.
      518    13047        */
      519    13048
      520    13049              %NUMBER(
      521    13050                      NUM1="K$->VX$WORD_A(0)",  BASE1=8,
      522    13051                      NUM2="K$->VX$WORD_A(1)",  BASE2=8,
      523    13052                      NUM3="K$->VX$WORD_A(2)",  BASE3=8 );
      524    13069
      525    13070              %SCREAM( ERR#=E$DUMP3_VX, LEVEL=@E$F_VX, MID="'I'" );
      526    13073        /*
      527    13074                      Note that above call to VXE$ERROR causes VXE$ERROR to call M$ERR
      528    13075        */
      529    13076
      530    13077    2   END DUMP_KEY_BUF;
      531    13078
      532    13079
      533    13080
      534    13081
      535    13082    1   END VXI$READ;

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:25   
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXI$READ.

   Procedure VXI$READ requires 721 words for executable code.
   Procedure VXI$READ requires 28 words of local(AUTO) storage.

    No errors detected in file VXI$READ.:E05TSI    .

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:26   

 Object Unit name= VXI$READ                                   File name= VXI$READ.:E05TOU
 UTS= JUL 30 '97 08:15:02.40 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none    96    140  VX_CONST_DCB
    2   DCB   even  none     0      0  M$OF
    3   DCB   even  none     0      0  M$RF
    4   Data  even  none    40     50  VXI$READ
    5   Proc  even  none   721   1321  VXI$READ
    6  RoData even  none   109    155  VXI$READ

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     5      0   yes    yes     yes      Std        4  VXI$READ
     5   1022          yes     yes      Std        4  VXI$WRITE

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    4      0  VX_OF_FPT_READ                     4     16  VX_RF_FPT_READ
    4     34  VX_R_FPT_WRITE
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:27   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       5 VXD$B2C
         yes           Std       4 VXE$ERROR
         yes           Std       0 VXE$MERC
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_FPT_ERRMSG                         VX_O_KEY_BUF
     VX_O_KEY_BUF_L                        VX_R_KEY_BUF                          VX_OK
     B$TCB$                                VX_OU_HEAD                            VX_ERRORS
     VX_EFIELD1                            VX_EFIELD2                            VX_EFIELD3
     VX_IO_STATUS                          VX_IO_SIZEW                           VX_IO_SIZEC
     VX_IO_USEPREV                         VX_IO_SAVEPREV                        VX_O_KEY_HEAD
     VX_O_KEY_TREE                         VX_R_KEY_HEAD                         VX_R_KEY_BIRTH
     VX_LAST_UTS                           VX_LIBRARY_PROBE                      M$OF$
     M$RF$                                 M$OF                                  M$RF
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:28   


        1        1        /*M* VXI$READ - reads object unit and run unit files.     */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=4,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8         */
        8        8        VXI$READ:
        9        9            PROC(         TYPE, BUF$, SIZE, KEY ) ALTRET;

      9  5 000000   000000 700200 xent  VXI$READ     TSX0  ! X66_AUTO_4
         5 000001   000034 000004                    ZERO    28,4

       10       10        %INCLUDE VX_INC_C;
       11    10726        %INCLUDE B_ERRORS_C;
       12    11853        %B$TCB;
       13    11856        %B$ALT;
       14    11864        %T$C;

             11876    1   /*******************************************************************************
             11877    1   *                                                                              *
             11878    1   *                          T$C                                                 *
             11879    1   *                                                                              *
             11880    1   *******************************************************************************/

             11885    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             11886    1         2 COUNT        UBIN( 9) UNAL,
             11887    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             11888    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             11889    1         2 COUNT        UBIN( 9) UNAL,
             11890    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
       15    11893        %VX$WORD;

             11905    1   /*******************************************************************************
             11906    1   *                                                                              *
             11907    1   *                          VX$WORD                                                *
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:29   
             11908    1   *                                                                              *
             11909    1   *******************************************************************************/

             11914    1   DCL VX$WORD_A(0:0)       UBIN(36) ALIGNED    BASED PTR;
             11915    1   DCL VX$HALF_A(0:0)       UBIN(18) HALIGNED   BASED PTR;
             11916    1   DCL VX$BYTE_A(0:0)       UBIN( 9) CALIGNED   BASED PTR;
             11917    1   DCL VX$CHAR_A(0:0)       CHAR( 1) UNAL       BASED PTR;
             11918        /**/
             11919    1   DCL VX$WORD_SBIN_A(0:0)  SBIN WORD ALIGNED   BASED     PTR;
             11920    1   DCL VX$HALF_SBIN_A(0:0)  SBIN HALF HALIGNED  BASED     PTR;
             11921    1   DCL VX$BYTE_SBIN_A(0:0)  SBIN HALF CALIGNED  BASED     PTR;
             11922    1   DCL VX$BIT_A(0:0)        BIT(36)   ALIGNED   BASED     PTR;
       16    11925        %SET LISTMAC='1'B;
       17    11926        %SET LISTDIR='1'B;
       18    11927        %SET LISTSUB='1'B;
       19    11928        %SET LISTEXP='1'B;
       20    11929        %BANNER( ARG=SUBS );
             11930        %LSET LISTDIR='0'B;

             11937    1   /*******************************************************************************
             11938    1   *                                                                              *
             11939    1   *                          SUBS                                                 *
             11940    1   *                                                                              *
             11941    1   *******************************************************************************/

       21    11945        %B$RECORDSUBS;
             11946        %EQU TYPHEAD=0 ;
             11947        %EQU TYPDNAM=1 ;
             11948        %EQU TYPRNAM=2 ;
             11949        %EQU TYPSECT=3 ;
             11950        %EQU TYPEDEF=4 ;
             11951        %EQU TYPEREF=5 ;
             11952        %EQU TYPSDEF=6 ;
             11953        %EQU TYPSREF=7 ;
             11954        %EQU TYPSEGDEF=8 ;
             11955        %EQU TYPSEGREF=9 ;
             11956        %EQU TYPPROG=10 ;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:30   
             11957        %EQU SUBTYPPROG=0 ;
             11958        %EQU SUBTYPREL=1 ;
             11959        %EQU TYPLOGBLK=11 ;
             11960        %EQU TYPINTNTRY=12 ;
             11961        %EQU TYPEXST=13 ;
             11962        %EQU TYPVREBL=14 ;
             11963        %EQU TYPDBGNAM=15 ;
             11964        %EQU TYPLV1LB=16 ;
             11965        %EQU TYPLV1=17 ;
             11966        %EQU TYPDATASEG=18 ;
             11967        %EQU TYPRUM=20 ;
             11968        %EQU TYPBIRTH=21 ;
             11969        %EQU TYPPLOVER=22 ;
             11970        %EQU TYPCOMPID=23 ;
             11971        %EQU TYPROS=30 ;
       22    11973        %E;
             11974        %LSET LISTDIR='0'B;

             11981    1   /*******************************************************************************
             11982    1   *                                                                              *
             11983    1   *                          ENTRY                                                 *
             11984    1   *                                                                              *
             11985    1   *******************************************************************************/

       23    11989        %ENTRIES;
             11990    1   DCL VXE$ERROR       ENTRY(4);
             11991    1   DCL VXE$ERR         ENTRY(3);
             11992    1   DCL VXE$MERC        ENTRY;
             11993    1   DCL VXE$ERRMSG      ENTRY(3);
             11994    1   DCL VXR$READ        ENTRY( 3 );
             11995    1   DCL VXW$WRITE       ENTRY( 3 );
             11996    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             11997    1   DCL VXD$B2C         ENTRY( 5 );
             11998    1   DCL VXD$C2B         ENTRY( 3 );
             11999    1   DCL VXA$GET         ENTRY( 3 );
             12000    1   DCL VXF$FREE        ENTRY( 3 );
             12001    1   DCL VXQ$SORT        ENTRY( 7 );
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:31   
             12002    1   DCL VXY$YESNO       ENTRY( 1 );
       24    12004        %P;
             12005        %LSET LISTDIR='0'B;

             12012    1   /*******************************************************************************
             12013    1   *                                                                              *
             12014    1   *                          PARAMETERS                                             *
             12015    1   *                                                                              *
             12016    1   *******************************************************************************/

       25    12020    1   DCL TYPE            UBIN(36)       ALIGNED;
       26    12021    1   DCL BUF$            PTR            ALIGNED;
       27    12022    1   DCL SIZE            UBIN(36)       ALIGNED;
       28    12023    1   DCL KEY             UBIN(36)       ALIGNED;
       29    12024        %PTR;
             12025        %LSET LISTDIR='0'B;

             12032    1   /*******************************************************************************
             12033    1   *                                                                              *
             12034    1   *                          PTR                                                 *
             12035    1   *                                                                              *
             12036    1   *******************************************************************************/

       30    12040    1   DCL DCB$            PTR            ALIGNED   AUTO;
       31    12041    1   DCL FPT$            PTR            ALIGNED   AUTO;
       32    12042    1   DCL K$              PTR            ALIGNED   AUTO;
       33    12043        %U;
             12044        %LSET LISTDIR='0'B;

             12051    1   /*******************************************************************************
             12052    1   *                                                                              *
             12053    1   *                          UBIN                                                 *
             12054    1   *                                                                              *
             12055    1   *******************************************************************************/

       34    12059    1   DCL ERR             UBIN(36)       ALIGNED   AUTO;
       35    12060    1   DCL KEY_TYPE        UBIN(36)       ALIGNED   AUTO;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:32   
       36    12061    1   DCL RTYPE           UBIN(36)       ALIGNED   AUTO;
       37    12062    1   DCL INTERNAL_IO_SAVEPREV       UBIN(36)  ALIGNED   AUTO;
       38    12063    1   DCL COUNT           UBIN(36)       ALIGNED   AUTO;
       39    12064        %S;
             12065        %LSET LISTDIR='0'B;

             12072    1   /*******************************************************************************
             12073    1   *                                                                              *
             12074    1   *                          SBIN                                                 *
             12075    1   *                                                                              *
             12076    1   *******************************************************************************/

       40    12080    1   DCL PREV#           SBIN WORD      ALIGNED   AUTO;
       41    12081    1   DCL KEYFORM         SBIN WORD      ALIGNED   AUTO;
       42    12082    1   DCL CURR#           SBIN WORD      ALIGNED   AUTO;
       43    12083    1   DCL M$OF            DCB;
       44    12084    1   DCL M$RF            DCB;
       45    12085    1   DCL 1 C$STRING BASED,
       46    12086    1         2 COUNT UBIN(9) UNAL,
       47    12087    1         2 CHARS(0:510) CHAR(1) UNAL;
       48    12088        %FPT_WRITE( FPTN=F$W, STCLASS="BASED(FPT$)");
             12089        %LSET LISTDIR='0'B;
             12105    1  DCL 1 F$W BASED(FPT$),2 V_ BIT(72)/*(VECTOR(F$W.V))/**/,2 KEY_ BIT(72)/*(VECTOR(NIL)
             12105            )/**/,2 BUF_,3
             12106    1   BOUND UBIN(20)UNAL /*(SIZEV(NIL))/**/,3 * BIT(12)/*('7772'O)/**/,3 * BIT(4)/*('0'B)
             12107    1   /**/,3 BUF$ PTR /*(ADDR(NIL))/**/,2 STATION_ BIT(72)/*(VECTOR(NIL))/**/,2
             12108    1  IDBUF_ REDEF STATION_ BIT(72),2 V DALIGNED,3 DCB# UBIN(18)UNAL /*(DCBNUM(NIL))/**/,3
             12108            WAIT# BIT(1)/*('1'B
             12109    1   )/**/ ,3 * BIT(2)/*('0'B)/**/,3 ID# BIT(1)/*('0'B)/**/,3 * BIT(1)/*('0'B)
             12110    1   /**/,3 FULL# BIT(1)/*('0'B)/**/ ,3 * BIT(3)/*('0'B)/**/,3 ONEWKEY# BIT(1)/*('1'B)
             12111    1   /**/ ,3 NEWKEY# BIT(1)/*('0'B)/**/ ,3 REWRITE# BIT(1)/*('0'B)/**/ ,3 NOTIME# BIT(1)
             12111            /*
             12112    1   ('0'B)/**/ ,3 IOERROK# BIT(1)/*('0'B)/**/ ,3 KEYTYPE# UBIN(4)/*(0)/**/ UNAL,
             12113    1   3 EVENT# SBIN /*(0)/**/,3 SEED# BIT(36)/*('0'B)/**/,3 DVBYTE,4 TOP# BIT(1)/*('0'B)
             12114    1  /**/,4 BP# BIT(1)/*('0'B)/**/,4 VFC# BIT(1)/*('0'B)/**/,4 REREAD# REDEF VFC# BIT(1),
             12114            4 BIN# BIT(1
             12115    1   )/*('0'B)/**/,4 TRANS# BIT(1)/*('0'B)/**/,4 RRR# BIT(1)/*('0'B)/**/,4 NODAT# BIT(1
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:33   
             12116    1   )/*('0'B)/**/,4 * BIT(1)/*('0'B)/**/,4 CONT# BIT(1)/*('0'B)/**/,3 * BIT(1)/*
             12117    1   ('0'B)/**/,3 ODFNC# UBIN(8)UNAL /*(0)/**/,3 * UBIN(18)UNAL /*(0)/**/;
       49    12119        %O_KEY_BUF( KEYBUF=K$B,
       50    12120                    STCLASS="BASED(K$)",
       51    12121                    INT="");
             12122    1   DCL 1 K$B ALIGNED BASED(K$),
             12123    1          2 FORM0 ,
             12124    1           3 COUNT       UBIN( 9)  UNAL,
             12125    1           3 CHARS       CHAR(512) UNAL,
             12126    1         2 FORM1        REDEF     FORM0,
             12127    1           3 COUNT       UBIN( 9)  UNAL,
             12128    1           3 O777        UBIN( 9)  UNAL,   /* <- '777'O                          */
             12129    1           3 UTS         UBIN(36)  UNAL,
             12130    1           3 REC_TYPE    UBIN( 9)  UNAL,
             12131    1           3 PAGE#       UBIN( 9)  UNAL,
             12132    1           3 *           CHAR(505) UNAL,
             12133    1         2 FORM2        REDEF     FORM0,
             12134    1           3 COUNT       UBIN( 9)  UNAL,
             12135    1           3 O777        UBIN( 9)  UNAL,   /* <- '777'O                          */
             12136    1           3 UTS         UBIN(36)  UNAL,
             12137    1           3 D10         UBIN( 9)  UNAL,   /* <- 10                              */
             12138    1           3 SECT#       UBIN(18)  UNAL,
             12139    1           3 OFFSET      UBIN(18)  UNAL,
             12140    1           3 STYPE       UBIN( 9)  UNAL,
             12141    1           3 SEQUENCE    UBIN( 9)  UNAL,
             12142    1           3 *           CHAR(500) UNAL ;
       52    12144        %R_KEY_BUF( KEYBUF=K$R,
       53    12145                    STCLASS="BASED(K$)",
       54    12146                    INT="");
             12147    1   DCL 1 K$R                        BASED(K$),
             12148    1         2 FORM0                  ALIGNED,
             12149    1           3 COUNT       UBIN( 9)  UNAL,
             12150    1           3 CHARS       CHAR( 5)  UNAL,
             12151    1           3 *           CHAR( 6)  UNAL,
             12152    1         2 FORM1        REDEF     FORM0,
             12153    1           3 COUNT       UBIN( 9)  UNAL,
             12154    1           3 REC_TYPE    UBIN( 9)  UNAL,
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:34   
             12155    1           3 NODE#       UBIN(18)  UNAL,
             12156    1           3 OFFSET      UBIN(18)  UNAL,
             12157    1           3 *           CHAR( 6)  UNAL,
             12158    1         2 FORM2        REDEF     FORM0,
             12159    1           3 COUNT       UBIN( 9)  UNAL,
             12160    1           3 O777        UBIN( 9)  UNAL,   /* <- '777'O                          */
             12161    1           3 NODE#       UBIN(18)  UNAL,
             12162    1           3 P_ENTDEF    UBIN(18)  UNAL,
             12163    1           3 REC_TYPE    UBIN( 9)  UNAL,
             12164    1           3 PAGE#       UBIN( 9)  UNAL,
             12165    1           3 *           CHAR( 4)  UNAL;
       55    12167        %PLIST;
       56    12168        %F$DCB;
       57    12225        %FPT_READ( FPTN=F$R, STCLASS="BASED(FPT$)" );
       58    12264        %FPT_READ( FPTN=VX_OF_FPT_READ,
       59    12265                   DCB=M$OF,
       60    12266                   KEY=VX_O_KEY_BUF,
       61    12267                   KEYS=YES,
       62    12268                   KEYR=YES,
       63    12269                   STCLASS="STATIC SYMDEF");
       64    12308        %PLIST;
       65    12309        %FPT_READ( FPTN=VX_RF_FPT_READ,
       66    12310                   DCB=M$RF,
       67    12311                   KEY=VX_R_KEY_BUF,
       68    12312                   KEYS=YES,
       69    12313                   KEYR=YES,
       70    12314                   STCLASS="STATIC SYMDEF");
       71    12353        %FPT_WRITE( FPTN=VX_R_FPT_WRITE,
       72    12354                   DCB=M$RF,
       73    12355                   KEY=VX_R_KEY_BUF,
       74    12356                   STCLASS="STATIC SYMDEF");
       75    12387        %SET LISTEXP = '0'B;
       76    12388        %EJECT;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:35   
       77    12389    2       DO CASE( TYPE );

  12389  5 000002   200003 470500                    LDP0    @TYPE,,AUTO
         5 000003   000000 235100                    LDA     0,,PR0
         5 000004   000003 115007                    CMPA    3,DL
         5 000005   000007 602005 5                  TNC     s:12389+5,AL
         5 000006   000031 710000 5                  TRA     s:12410
         5 000007   000012 710000 5                  TRA     s:12391
         5 000010   000017 710000 5                  TRA     s:12394
         5 000011   000024 710000 5                  TRA     s:12397

       78    12390    2         CASE( 0/*@OF*/ );

       79    12391    2           FPT$ = ADDR( VX_OF_FPT_READ );

  12391  5 000012   000000 236000 6                  LDQ     0
         5 000013   200010 756100                    STQ     FPT$,,AUTO

       80    12392    2           DCB$ = M$OF$;

  12392  5 000014   000000 236000 xsym               LDQ     M$OF$
         5 000015   200007 756100                    STQ     DCB$,,AUTO
         5 000016   000050 710000 5                  TRA     s:12429

       81    12393    2         CASE( 1/*@RF*/ );

       82    12394    2           FPT$ = ADDR( VX_RF_FPT_READ );

  12394  5 000017   000001 236000 6                  LDQ     1
         5 000020   200010 756100                    STQ     FPT$,,AUTO

       83    12395    2           DCB$ = M$RF$;

  12395  5 000021   000000 236000 xsym               LDQ     M$RF$
         5 000022   200007 756100                    STQ     DCB$,,AUTO
         5 000023   000050 710000 5                  TRA     s:12429

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:36   
       84    12396    2         CASE( 2/*@LF*/ );

       85    12397    2           FPT$ = ADDR( VX_OF_FPT_READ );

  12397  5 000024   000000 236000 6                  LDQ     0
         5 000025   200010 756100                    STQ     FPT$,,AUTO

       86    12398    2           DCB$ = M$OF$;

  12398  5 000026   000000 236000 xsym               LDQ     M$OF$
         5 000027   200007 756100                    STQ     DCB$,,AUTO
         5 000030   000050 710000 5                  TRA     s:12429

       87    12399    2         CASE(ELSE);

       88    12400        /*E*  ERROR: VXI-E$INTERNAL_READ_BAD_TYPE_VX-0
       89    12401              MESSAGE: Internal LINK error; Bad type passed to VXI$READ: TYPE = %U1.
       90    12402              DESCRIPTION: Self-explanatory.
       91    12403        */
       92    12404                %NUMBER( NUM1=TYPE );

  12410  5 000031   000002 236000 6                  LDQ     2
         5 000032   200032 756100                    STQ     @CURR#+5,,AUTO
         5 000033   200003 236100                    LDQ     @TYPE,,AUTO
         5 000034   000003 235000 6                  LDA     3
         5 000035   200030 757100                    STAQ    @CURR#+3,,AUTO
         5 000036   000004 237000 6                  LDAQ    4
         5 000037   200026 757100                    STAQ    @CURR#+1,,AUTO
         5 000040   200026 630500                    EPPR0   @CURR#+1,,AUTO
         5 000041   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 000042   000000 701000 xent               TSX1    VXD$B2C
         5 000043   000000 011000                    NOP     0

       93    12421                %SCREAM(
       94    12422                ERR#=E$INTERNAL_READ_BAD_TYPE_VX,
       95    12423                MID="'I'",
       96    12424                LEVEL=@E$F_VX,
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:37   
       97    12425                AUX=@E$OF_VX);

  12426  5 000044   000010 630400 6                  EPPR0   8
         5 000045   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000046   000000 701000 xent               TSX1    VXE$ERROR
         5 000047   000000 011000                    NOP     0

       98    12428    2         END;

       99    12429    1       F$R.BUF_.BOUND   = SIZE * 4 - 1;

  12429  5 000050   200005 470500                    LDP0    @SIZE,,AUTO
         5 000051   200010 471500                    LDP1    FPT$,,AUTO
         5 000052   000000 236100                    LDQ     0,,PR0
         5 000053   000002 736000                    QLS     2
         5 000054   000001 136007                    SBLQ    1,DL
         5 000055   000020 736000                    QLS     16
         5 000056   100004 676100                    ERQ     4,,PR1
         5 000057   000034 376000 xsym               ANQ     B_VECTNIL+28
         5 000060   100004 656100                    ERSQ    4,,PR1

      100    12430    1       F$R.BUF_.BUF$   = BUF$;

  12430  5 000061   200004 473500                    LDP3    @BUF$,,AUTO
         5 000062   300000 236100                    LDQ     0,,PR3
         5 000063   100005 756100                    STQ     5,,PR1

      101    12431    1       F$R.V.KEYR# = '1'B/*@YES_B*/;

  12431  5 000064   100000 236007                    LDQ     32768,DL
         5 000065   100010 256100                    ORSQ    8,,PR1

      102    12432    1       KEY_TYPE = KEY;

  12432  5 000066   200006 474500                    LDP4    @KEY,,AUTO
         5 000067   400000 235100                    LDA     0,,PR4
         5 000070   200013 755100                    STA     KEY_TYPE,,AUTO
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:38   

      103    12433    1       IF KEY_TYPE = 3/*@NO_KEY*/ THEN KEY_TYPE = TYPE;

  12433  5 000071   000003 115007                    CMPA    3,DL
         5 000072   000076 601000 5                  TNZ     s:12434

  12433  5 000073   200003 475500                    LDP5    @TYPE,,AUTO
         5 000074   500000 235100                    LDA     0,,PR5
         5 000075   200013 755100                    STA     KEY_TYPE,,AUTO

      104    12434    2       DO CASE( KEY_TYPE );

  12434  5 000076   000003 115007                    CMPA    3,DL
         5 000077   000101 602005 5                  TNC     s:12434+3,AL
         5 000100   000123 710000 5                  TRA     s:12455
         5 000101   000104 710000 5                  TRA     s:12436
         5 000102   000111 710000 5                  TRA     s:12439
         5 000103   000116 710000 5                  TRA     s:12442

      105    12435    2         CASE( 0/*@OF*/ );

      106    12436    2           F$R.KEY_   = VECTOR( VX_O_KEY_BUF );

  12436  5 000104   000014 237000 6                  LDAQ    12
         5 000105   100002 757100                    STAQ    2,,PR1

      107    12437    2           K$ = ADDR(VX_O_KEY_BUF);

  12437  5 000106   000015 236000 6                  LDQ     13
         5 000107   200011 756100                    STQ     K$,,AUTO
         5 000110   000143 710000 5                  TRA     s:12474

      108    12438    2         CASE( 1/*@RF*/ );

      109    12439    2           F$R.KEY_   = VECTOR( VX_R_KEY_BUF );

  12439  5 000111   000016 237000 6                  LDAQ    14
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:39   
         5 000112   100002 757100                    STAQ    2,,PR1

      110    12440    2           K$ = ADDR( VX_R_KEY_BUF );

  12440  5 000113   000017 236000 6                  LDQ     15
         5 000114   200011 756100                    STQ     K$,,AUTO
         5 000115   000143 710000 5                  TRA     s:12474

      111    12441    2         CASE( 2/*@LF*/ );

      112    12442    2           F$R.KEY_   = VECTOR( VX_O_KEY_BUF );

  12442  5 000116   000014 237000 6                  LDAQ    12
         5 000117   100002 757100                    STAQ    2,,PR1

      113    12443    2           K$ = ADDR( VX_O_KEY_BUF );

  12443  5 000120   000015 236000 6                  LDQ     13
         5 000121   200011 756100                    STQ     K$,,AUTO
         5 000122   000143 710000 5                  TRA     s:12474

      114    12444    2         CASE(ELSE);

      115    12445        /*E*  ERROR: VXI-E$INTERNAL_READ_BAD_KEY_TP_VX-0
      116    12446             MESSAGE: Internal LINK error; Bad key type passed to VXI$READ: Key type = %U1.
      117    12447              DESCRIPTION: Self-explanatory.
      118    12448        */
      119    12449                %NUMBER( NUM1=KEY_TYPE );

  12455  5 000123   000002 236000 6                  LDQ     2
         5 000124   200032 756100                    STQ     @CURR#+5,,AUTO
         5 000125   200013 635500                    EPPR5   KEY_TYPE,,AUTO
         5 000126   200031 455500                    STP5    @CURR#+4,,AUTO
         5 000127   000003 236000 6                  LDQ     3
         5 000130   200030 756100                    STQ     @CURR#+3,,AUTO
         5 000131   000004 237000 6                  LDAQ    4
         5 000132   200026 757100                    STAQ    @CURR#+1,,AUTO
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:40   
         5 000133   200026 630500                    EPPR0   @CURR#+1,,AUTO
         5 000134   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 000135   000000 701000 xent               TSX1    VXD$B2C
         5 000136   000000 011000                    NOP     0

      120    12466                %SCREAM(
      121    12467                ERR#=E$INTERNAL_READ_BAD_KEY_TP_VX,
      122    12468                MID="'I'",
      123    12469                LEVEL=@E$F_VX,
      124    12470                AUX=@E$OF_VX);

  12471  5 000137   000021 630400 6                  EPPR0   17
         5 000140   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000141   000000 701000 xent               TSX1    VXE$ERROR
         5 000142   000000 011000                    NOP     0

      125    12473    2         END;

      126    12474    2       IF KEY ~= 3/*@NO_KEY*/ THEN DO;

  12474  5 000143   200006 470500                    LDP0    @KEY,,AUTO
         5 000144   000000 235100                    LDA     0,,PR0
         5 000145   000003 115007                    CMPA    3,DL
         5 000146   000202 600000 5                  TZE     s:12500

      127    12475    2           F$R.V.KEYS# = '1'B/*@YES_B*/;

  12475  5 000147   200010 471500                    LDP1    FPT$,,AUTO
         5 000150   200000 236007                    LDQ     65536,DL
         5 000151   100010 256100                    ORSQ    8,,PR1

      128    12476    3           IF VX_IO_USEPREV ~= 1/*@YES*/ THEN DO;

  12476  5 000152   000000 235000 xsym               LDA     VX_IO_USEPREV
         5 000153   000001 115007                    CMPA    1,DL
         5 000154   000156 600000 5                  TZE     s:12479

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:41   
      129    12477    3              END;                         /* If VX_IO_USEPREV ~= @YES then do; */

  12477  5 000155   000205 710000 5                  TRA     s:12502

      130    12478    3           ELSE DO;                        /* If VX_IO_USEPREV ~= @YES then do; */

      131    12479    3               VX_IO_USEPREV = 0/*@NO*/;

  12479  5 000156   000000 450000 xsym               STZ     VX_IO_USEPREV

      132    12480    3               IF VX_IO_SAVEPREV = 2 THEN F$R.V.KEYS# = '0'B/*@NO_B*/;

  12480  5 000157   000000 235000 xsym               LDA     VX_IO_SAVEPREV
         5 000160   000002 115007                    CMPA    2,DL
         5 000161   000164 601000 5                  TNZ     s:12481

  12480  5 000162   000025 236000 6                  LDQ     21
         5 000163   100010 356100                    ANSQ    8,,PR1

      133    12481    4               DO CASE(KEY);

  12481  5 000164   000000 235100                    LDA     0,,PR0
         5 000165   000001 115007                    CMPA    1,DL
         5 000166   000170 602005 5                  TNC     s:12481+4,AL
         5 000167   000175 710000 5                  TRA     s:12494
         5 000170   000171 710000 5                  TRA     s:12483

      134    12482    4                 CASE(0/*@OF*/);

      135    12483    4                   VX_O_KEY_BUF = VX_O_KEY_BUF_L;

  12483  5 000171   000000 100400                    MLR     fill='000'O
         5 000172   000000 001001 xsym               ADSC9   VX_O_KEY_BUF_L           cn=0,n=513
         5 000173   000000 001001 xsym               ADSC9   VX_O_KEY_BUF             cn=0,n=513
         5 000174   000205 710000 5                  TRA     s:12502

      136    12484    4                 CASE(ELSE);
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:42   

      137    12485        /*E*  ERROR: VXI-E$INTERNAL_READ_SAVE_PREV_VX-0
      138    12486        MESSAGE: Internal LINK error; Save previous switch set for non-object file in VXI$R
             12486        EAD.
      139    12487              DESCRIPTION: Self-explanatory.
      140    12488        */
      141    12489                        %SCREAM(
      142    12490                        ERR#=E$INTERNAL_READ_SAVE_PREV_VX,
      143    12491                        MID="'I'",
      144    12492                        LEVEL=@E$F_VX,
      145    12493                        AUX=@E$OF_VX);

  12494  5 000175   000027 630400 6                  EPPR0   23
         5 000176   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000177   000000 701000 xent               TSX1    VXE$ERROR
         5 000200   000000 011000                    NOP     0

      146    12496    4                 END;                      /* Do case(key); */

      147    12497    3              END;             /*Else do; - if VX_IO_USEPREV ~= @YES then do; */

      148    12498    2          END;                             /* If key ~= @NO_KEY then do; */

  12498  5 000201   000205 710000 5                  TRA     s:12502

      149    12499    2       ELSE DO;                            /* If key ~= @NO_KEY then do; */

      150    12500    2           F$R.V.KEYS# = '0'B/*@NO_B*/;

  12500  5 000202   200010 471500                    LDP1    FPT$,,AUTO
         5 000203   000025 236000 6                  LDQ     21
         5 000204   100010 356100                    ANSQ    8,,PR1

      151    12501    2          END;                         /* Else do; - if key ~= @NO_KEY then do; */

      152    12502    1       CALL M$READ( F$R )            ALTRET( READ_ERROR );

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:43   
  12502  5 000205   200010 470500                    LDP0    FPT$,,AUTO
         5 000206   440000 713400                    CLIMB   alt,read
         5 000207   401400 401760                    pmme    nvectors=4
         5 000210   000751 702000 5                  TSX2    READ_ERROR

      153    12503    1       VX_IO_STATUS = -1;

  12503  5 000211   000001 335007                    LCA     1,DL
         5 000212   000000 755000 xsym               STA     VX_IO_STATUS

      154    12504    1   CONTINUE:
      155    12505    1       INTERNAL_IO_SAVEPREV = VX_IO_SAVEPREV;

  12505  5 000213   000000 235000 xsym  CONTINUE     LDA     VX_IO_SAVEPREV
         5 000214   200015 755100                    STA     INTERNAL_IO_SAVEPREV,,AUTO

      156    12506    2       IF VX_IO_SAVEPREV ~= 0/*@NO*/ THEN DO;

  12506  5 000215   000237 600000 5                  TZE     s:12526

      157    12507    2           VX_IO_SAVEPREV = 0/*@NO*/;           /*Reset*/

  12507  5 000216   000000 450000 xsym               STZ     VX_IO_SAVEPREV

      158    12508    3           DO CASE( TYPE );

  12508  5 000217   200003 470500                    LDP0    @TYPE,,AUTO
         5 000220   000000 235100                    LDA     0,,PR0
         5 000221   000001 115007                    CMPA    1,DL
         5 000222   000224 602005 5                  TNC     s:12508+5,AL
         5 000223   000233 710000 5                  TRA     s:12522
         5 000224   000225 710000 5                  TRA     s:12510

      159    12509    3             CASE(0/*@OF*/);

      160    12510    3               VX_O_KEY_BUF_L.FORM0.COUNT = VX_O_KEY_BUF.FORM0.COUNT;

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:44   
  12510  5 000225   000000 236000 xsym               LDQ     VX_O_KEY_BUF
         5 000226   000000 552040 xsym               STBQ    VX_O_KEY_BUF_L,'40'O

      161    12511    3               VX_O_KEY_BUF_L.FORM0.CHARS = VX_O_KEY_BUF.FORM0.CHARS;

  12511  5 000227   040000 100400                    MLR     fill='040'O
         5 000230   000000 201000 xsym               ADSC9   VX_O_KEY_BUF             cn=1,n=512
         5 000231   000000 201000 xsym               ADSC9   VX_O_KEY_BUF_L           cn=1,n=512
         5 000232   000237 710000 5                  TRA     s:12526

      162    12512    3             CASE(ELSE);

      163    12513        /*E*  ERROR: VXI-E$INTERNAL_READ_USE_PREV_VX-0
      164    12514        MESSAGE: Internal LINK error; Use previous switch set for non-object file in VXI$RE
             12514        AD.
      165    12515              DESCRIPTION: Self-explanatory.
      166    12516        */
      167    12517                    %SCREAM(
      168    12518                    ERR#=E$INTERNAL_READ_USE_PREV_VX,
      169    12519                    MID="'I'",
      170    12520                    LEVEL=@E$F_VX,
      171    12521                    AUX=@E$OF_VX);

  12522  5 000233   000034 630400 6                  EPPR0   28
         5 000234   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000235   000000 701000 xent               TSX1    VXE$ERROR
         5 000236   000000 011000                    NOP     0

      172    12524    3             END;

      173    12525    2          END;

      174    12526    1       VX_IO_SIZEC = DCB$ -> F$DCB.ARS#;

  12526  5 000237   200007 470500                    LDP0    DCB$,,AUTO
         5 000240   000000 235100                    LDA     0,,PR0
         5 000241   000000 755000 xsym               STA     VX_IO_SIZEC
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:45   

      175    12527    1       VX_IO_SIZEW = ( VX_IO_SIZEC + 4/*@CHAR_WORD*/ - 1 ) /4/*@CHAR_WORD*/;

  12527  5 000242   000000 236000 xsym               LDQ     VX_IO_SIZEC
         5 000243   000003 036007                    ADLQ    3,DL
         5 000244   000004 506007                    DIV     4,DL
         5 000245   000000 756000 xsym               STQ     VX_IO_SIZEW

      176    12528    1       VX_OK.KFILE = TYPE;

  12528  5 000246   200003 471500                    LDP1    @TYPE,,AUTO
         5 000247   100000 235100                    LDA     0,,PR1
         5 000250   000000 755000 xsym               STA     VX_OK

      177    12529    2       DO CASE( KEY_TYPE );

  12529  5 000251   200013 235100                    LDA     KEY_TYPE,,AUTO
         5 000252   000003 115007                    CMPA    3,DL
         5 000253   000255 602005 5                  TNC     s:12529+4,AL
         5 000254   000750 710000 5                  TRA     s:12772
         5 000255   000260 710000 5                  TRA     s:12531
         5 000256   000544 710000 5                  TRA     s:12679
         5 000257   000260 710000 5                  TRA     s:12531

      178    12530    2         CASE( 0/*@OF*/, 2/*@LF*/ );

      179    12531    3           IF K$ -> C$STRING.CHARS(0) = VX_O_KEY_HEAD THEN DO;

  12531  5 000260   200011 473500                    LDP3    K$,,AUTO
         5 000261   040000 106500                    CMPC    fill='040'O
         5 000262   300000 200001                    ADSC9   0,,PR3                   cn=1,n=1
         5 000263   000000 000001 xsym               ADSC9   VX_O_KEY_HEAD            cn=0,n=1
         5 000264   000305 601000 5                  TNZ     s:12540

      180    12532                                                /*Head record*/
      181    12533    3               VX_OK.KTYPE  = -1;

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:46   
  12533  5 000265   000001 335007                    LCA     1,DL
         5 000266   000001 755000 xsym               STA     VX_OK+1

      182    12534    3               VX_LAST_UTS = VX_OU_HEAD.UTS; /* Save uts */

  12534  5 000267   000000 235000 xsym               LDA     VX_OU_HEAD
         5 000270   000000 755000 xsym               STA     VX_LAST_UTS

      183    12535    3               VX_OK.OUNAME.COUNT = K$B.FORM0.COUNT - 1; /* Set count */

  12535  5 000271   300000 236100                    LDQ     0,,PR3
         5 000272   000033 772000                    QRL     27
         5 000273   000001 136007                    SBLQ    1,DL
         5 000274   000033 736000                    QLS     27
         5 000275   000013 552040 xsym               STBQ    VX_OK+11,'40'O

      184    12536    3               VX_OK.OUNAME.CHARS = SUBSTR( K$B.FORM0.CHARS,1,VX_OK.OUNAME.COUNT);

  12536  5 000276   000013 236000 xsym               LDQ     VX_OK+11
         5 000277   000033 772000                    QRL     27
         5 000300   000000 620006                    EAX0    0,QL
         5 000301   040000 100540                    MLR     fill='040'O
         5 000302   300000 400010                    ADSC9   0,,PR3                   cn=2,n=*X0
         5 000303   000013 200037 xsym               ADSC9   VX_OK+11                 cn=1,n=31

      185    12537                                        /* Move object unit name into textc buffer */
      186    12538    3              END;

  12538  5 000304   000750 710000 5                  TRA     s:12772

      187    12539    2           ELSE
      188    12540    2               IF K$ -> T$C.CHARS = VX_O_KEY_TREE THEN VX_OK.KTYPE = -2;

  12540  5 000305   300000 236100                    LDQ     0,,PR3
         5 000306   000033 772000                    QRL     27
         5 000307   000000 620006                    EAX0    0,QL
         5 000310   040000 106540                    CMPC    fill='040'O
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:47   
         5 000311   300000 200010                    ADSC9   0,,PR3                   cn=1,n=*X0
         5 000312   000000 000006 xsym               ADSC9   VX_O_KEY_TREE            cn=0,n=6
         5 000313   000317 601000 5                  TNZ     s:12542

  12540  5 000314   000002 335007                    LCA     2,DL
         5 000315   000001 755000 xsym               STA     VX_OK+1
         5 000316   000750 710000 5                  TRA     s:12772

      189    12541    2               ELSE
      190    12542    3                   IF K$B.FORM1.O777 = BITBIN('777'O) THEN DO; /* Form 1 or 2 */

  12542  5 000317   300000 236100                    LDQ     0,,PR3
         5 000320   000777 376003                    ANQ     511,DU
         5 000321   000777 116003                    CMPQ    511,DU
         5 000322   000524 601000 5                  TNZ     s:12669

      191    12543    3                       COUNT = K$B.FORM0.COUNT; /* Get count */

  12543  5 000323   300000 236100                    LDQ     0,,PR3
         5 000324   000033 772000                    QRL     27
         5 000325   200016 756100                    STQ     COUNT,,AUTO

      192    12544    4                       IF COUNT = 7 THEN DO;

  12544  5 000326   000007 116007                    CMPQ    7,DL
         5 000327   000404 601000 5                  TNZ     s:12571

      193    12545    4                           VX_OK.KTYPE = 1; /* Set key form */

  12545  5 000330   000001 235007                    LDA     1,DL
         5 000331   000001 755000 xsym               STA     VX_OK+1

      194    12546    4                           RTYPE = K$B.FORM1.REC_TYPE; /* Set record type retrieved */

  12546  5 000332   300001 236100                    LDQ     1,,PR3
         5 000333   000011 772000                    QRL     9
         5 000334   000777 376007                    ANQ     511,DL
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:48   
         5 000335   200014 756100                    STQ     RTYPE,,AUTO

      195    12547    4                           IF RTYPE ~= VX_OK.KRTYPE THEN VX_OK.KPAGE# = -1;

  12547  5 000336   000002 116000 xsym               CMPQ    VX_OK+2
         5 000337   000342 600000 5                  TZE     s:12548

  12547  5 000340   000001 335007                    LCA     1,DL
         5 000341   000003 755000 xsym               STA     VX_OK+3

      196    12548    4                           VX_OK.KRTYPE = RTYPE;

  12548  5 000342   000002 756000 xsym               STQ     VX_OK+2

      197    12549    4                           IF VX_OK.KRTYPE < %TYPDNAM

  12549  5 000343   000000 116003                    CMPQ    0,DU
         5 000344   000351 600000 5                  TZE     s:12554
         5 000345   000020 116007                    CMPQ    16,DL
         5 000346   000351 603000 5                  TRC     s:12554
         5 000347   000012 116007                    CMPQ    10,DL
         5 000350   000355 601000 5                  TNZ     s:12555

      198    12550    4                                   OR
      199    12551    4                                   VX_OK.KRTYPE > %TYPDBGNAM
      200    12552    4                                   OR
      201    12553    4                                   VX_OK.KRTYPE = %TYPPROG
      202    12554    4                           THEN CALL REPORT_INCONSISTENCY( 1 /* Keyform 1 */ );

  12554  5 000351   000012 236000 6                  LDQ     10
         5 000352   200023 756100                    STQ     COUNT+5,,AUTO
         5 000353   001144 701000 5                  TSX1    REPORT_INCONSISTENCY
         5 000354   000000 011000                    NOP     0

      203    12555    5                           IF VX_OK.KPAGE# > 0 THEN DO;
             12555                                    /* Check if checks should be performed */

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:49   
  12555  5 000355   000003 235000 xsym               LDA     VX_OK+3
         5 000356   000377 604400 5                  TMOZ    s:12567

      204    12556    6                               IF VX_OK.KPAGE# + 1 ~= K$B.FORM1.PAGE# THEN DO;
             12556                                        /* Sequence error*/

  12556  5 000357   200011 470500                    LDP0    K$,,AUTO
         5 000360   000001 236100                    LDQ     1,,PR0
         5 000361   000777 376007                    ANQ     511,DL
         5 000362   200026 756100                    STQ     @CURR#+1,,AUTO
         5 000363   000003 236000 xsym               LDQ     VX_OK+3
         5 000364   000001 036007                    ADLQ    1,DL
         5 000365   200026 116100                    CMPQ    @CURR#+1,,AUTO
         5 000366   000377 600000 5                  TZE     s:12567

      205    12557        /*E*  ERROR: VXI-E$PAGE_SEQUENCE_VX-0
      206    12558              MESSAGE: Page sequence error for record type = %U1.
      207    12559              DESCRIPTION: Page sequence error has occurred for object unit records
      208    12560        */
      209    12561    6                                   CALL REPORT_SEQUENCE_ERROR(

  12561  5 000367   200011 236100                    LDQ     K$,,AUTO
         5 000370   000041 036000 6                  ADLQ    33
         5 000371   000042 235000 6                  LDA     34
         5 000372   200024 757100                    STAQ    @ERR_CODE+1,,AUTO
         5 000373   000043 236000 6                  LDQ     35
         5 000374   200023 756100                    STQ     COUNT+5,,AUTO
         5 000375   001174 701000 5                  TSX1    REPORT_SEQUENCE_ERROR
         5 000376   000000 011000                    NOP     0

      210    12562    6                                           401, /* ERR# */
      211    12563    6                                           VX_OK.KPAGE#, /*Set previous */
      212    12564    6                                           K$B.FORM1.PAGE# /* Set current */ );
      213    12565    6                                  END;

      214    12566    5                              END;

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:50   
      215    12567    4                           VX_OK.KPAGE# = K$B.FORM1.PAGE#; /* Set page number */

  12567  5 000377   200011 470500                    LDP0    K$,,AUTO
         5 000400   000001 236100                    LDQ     1,,PR0
         5 000401   000777 376007                    ANQ     511,DL
         5 000402   000003 756000 xsym               STQ     VX_OK+3

      216    12568    4                           GOTO CHECK_UTS;

  12568  5 000403   000510 710000 5                  TRA     CHECK_UTS

      217    12569    4                          END;
      218    12570    3                       ELSE
      219    12571    4                           IF COUNT = 11 OR COUNT = 12 THEN DO;

  12571  5 000404   000013 116007                    CMPQ    11,DL
         5 000405   000410 600000 5                  TZE     s:12572
         5 000406   000014 116007                    CMPQ    12,DL
         5 000407   000517 601000 5                  TNZ     BAD_O_KEY

      220    12572    4                               VX_OK.KTYPE = 2; /* Set key form */

  12572  5 000410   000002 235007                    LDA     2,DL
         5 000411   000001 755000 xsym               STA     VX_OK+1

      221    12573    4                               VX_OK.KRTYPE = K$B.FORM2.D10; /* Set record type */

  12573  5 000412   300001 236100                    LDQ     1,,PR3
         5 000413   000011 772000                    QRL     9
         5 000414   000777 376007                    ANQ     511,DL
         5 000415   000002 756000 xsym               STQ     VX_OK+2

      222    12574    5                               IF VX_OK.KRTYPE ~= %TYPPROG THEN DO;
             12574                                        /* Check if type 10 */

  12574  5 000416   000012 116007                    CMPQ    10,DL
         5 000417   000424 600000 5                  TZE     s:12577
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:51   

      223    12575    5                                   CALL REPORT_INCONSISTENCY( 2 /* Keyform 2 */ );

  12575  5 000420   000044 236000 6                  LDQ     36
         5 000421   200023 756100                    STQ     COUNT+5,,AUTO
         5 000422   001144 701000 5                  TSX1    REPORT_INCONSISTENCY
         5 000423   000000 011000                    NOP     0

      224    12576    5                                  END;

      225    12577    4                               VX_OK.KSECT# = K$B.FORM2.SECT#; /* Set section # */

  12577  5 000424   200011 470500                    LDP0    K$,,AUTO
         5 000425   000001 235100                    LDA     1,,PR0
         5 000426   000002 236100                    LDQ     2,,PR0
         5 000427   000033 773000                    LRL     27
         5 000430   777777 376007                    ANQ     -1,DL
         5 000431   000007 756000 xsym               STQ     VX_OK+7

      226    12578    4                               VX_OK.KOFSET = K$B.FORM2.OFFSET; /* Setoffset */

  12578  5 000432   000002 236100                    LDQ     2,,PR0
         5 000433   000011 772000                    QRL     9
         5 000434   777777 376007                    ANQ     -1,DL
         5 000435   000004 756000 xsym               STQ     VX_OK+4

      227    12579    4                               VX_OK.KSTYPE = K$B.FORM2.STYPE; /* Set SUB_TYPE*/

  12579  5 000436   000002 236100                    LDQ     2,,PR0
         5 000437   000777 376007                    ANQ     511,DL
         5 000440   000005 756000 xsym               STQ     VX_OK+5

      228    12580    5                               IF VX_OK.KSTYPE > 1 THEN DO; /* Range error */

  12580  5 000441   000002 116007                    CMPQ    2,DL
         5 000442   000453 602000 5                  TNC     s:12610

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:52   
      229    12581        /*E*  ERROR: VXI-E$BAD_FORM1_SUB_TYPE_VX-0
      230    12582              MESSAGE: Illegal subtype value detected for record type 10; Subtype = %U1.
      231    12583              DESCRIPTION: Self-explanatory.
      232    12584        */
      233    12585                                        %NUMBER( NUM1="VX_OK.KSTYPE" );

  12591  5 000443   000045 630400 6                  EPPR0   37
         5 000444   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 000445   000000 701000 xent               TSX1    VXD$B2C
         5 000446   000000 011000                    NOP     0

      234    12602                                        %SCREAM(
      235    12603                                        ERR#=E$BAD_FORM1_SUB_TYPE_VX,
      236    12604                                        LEVEL=@E$F_VX,
      237    12605                                        MID="'I'",
      238    12606                                        AUX=@E$OUOF_VX);

  12607  5 000447   000053 630400 6                  EPPR0   43
         5 000450   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000451   000000 701000 xent               TSX1    VXE$ERROR
         5 000452   000000 011000                    NOP     0

      239    12609    5                                  END;

      240    12610    4                               IF COUNT = 11 THEN VX_OK.KSEQUENCE = -1;
             12610                                        /* Reset count */

  12610  5 000453   200016 235100                    LDA     COUNT,,AUTO
         5 000454   000013 115007                    CMPA    11,DL
         5 000455   000461 601000 5                  TNZ     s:12612

  12610  5 000456   000001 336007                    LCQ     1,DL
         5 000457   000006 756000 xsym               STQ     VX_OK+6
         5 000460   000510 710000 5                  TRA     CHECK_UTS

      241    12611    5                               ELSE DO;    /* Check */

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:53   
      242    12612    6                                   IF VX_OK.KSEQUENCE ~= -1 THEN DO;
             12612                                            /* Not the first */

  12612  5 000461   000006 236000 xsym               LDQ     VX_OK+6
         5 000462   000027 116000 xsym               CMPQ    B_VECTNIL+23
         5 000463   000510 600000 5                  TZE     CHECK_UTS

      243    12613    7                                      IF VX_OK.KSEQUENCE + 1 < K$B.FORM2.SEQUENCE THEN
             12613                                                DO;

  12613  5 000464   200011 470500                    LDP0    K$,,AUTO
         5 000465   000003 236100                    LDQ     3,,PR0
         5 000466   000033 772000                    QRL     27
         5 000467   200026 756100                    STQ     @CURR#+1,,AUTO
         5 000470   000006 236000 xsym               LDQ     VX_OK+6
         5 000471   000001 036007                    ADLQ    1,DL
         5 000472   200026 116100                    CMPQ    @CURR#+1,,AUTO
         5 000473   000504 605000 5                  TPL     s:12625

      244    12614        /*E*  ERROR: VXI-E$BAD_SEQUENCE_VX
      245    12615              MESSAGE: Text/relocation sequencing error for record type = %U1.
      246    12616              DESCRIPTION: A sequencing problem has arisen in the object unit for
      247    12617                           text/relocation(type 10 ) records.
      248    12618        */
      249    12619    7                                           CALL REPORT_SEQUENCE_ERROR(

  12619  5 000474   200011 236100                    LDQ     K$,,AUTO
         5 000475   000003 036003                    ADLQ    3,DU
         5 000476   000060 235000 6                  LDA     48
         5 000477   200024 757100                    STAQ    @ERR_CODE+1,,AUTO
         5 000500   000061 236000 6                  LDQ     49
         5 000501   200023 756100                    STQ     COUNT+5,,AUTO
         5 000502   001174 701000 5                  TSX1    REPORT_SEQUENCE_ERROR
         5 000503   000000 011000                    NOP     0

      250    12620    7                                                   404,
      251    12621    7                                                   VX_OK.KSEQUENCE,
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:54   
      252    12622    7                                                   K$B.FORM2.SEQUENCE );
      253    12623                                                /*Error-sequencing */
      254    12624    7                                          END;

      255    12625    6                                       VX_OK.KSEQUENCE = K$B.FORM2.SEQUENCE;

  12625  5 000504   200011 470500                    LDP0    K$,,AUTO
         5 000505   000003 236100                    LDQ     3,,PR0
         5 000506   000033 772000                    QRL     27
         5 000507   000006 756000 xsym               STQ     VX_OK+6

      256    12626    6                                      END;

      257    12627    5                                  END;

      258    12628    4   CHECK_UTS:
      259    12629    5                               IF VX_LAST_UTS ~= K$B.FORM2.UTS THEN DO; /*Error*/

  12629  5 000510   200011 470500       CHECK_UTS    LDP0    K$,,AUTO
         5 000511   000000 235100                    LDA     0,,PR0
         5 000512   000001 236100                    LDQ     1,,PR0
         5 000513   000022 773000                    LRL     18
         5 000514   000000 116000 xsym               CMPQ    VX_LAST_UTS
         5 000515   000750 600000 5                  TZE     s:12772

      260    12630        /**********ATTN: Need to remove ************/
      261    12631        %SET LISTCON='1'B;
      262    12632        %IF '0'B;
      263    12633 C      /*E*  ERROR: VXI-E$BAD_UTS_VX-0
      264    12634 C            MESSAGE: Inconsistent UTS values; Last value = %U1; Current value = %U2.
      265    12635 C            DESCRIPTION: A change in the uts value has occurred within an object unit.
      266    12636 C      */
      267    12637 C                                      PREV# = VX_LAST_UTS;
      268    12638 C                                      CURR# = K$B.FORM2.UTS;
      269    12639 C                                      %NUMBER(
      270    12640 C                                      NUM1=PREV#,
      271    12641 C                                      BASE1=8,
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:55   
      272    12642 C                                      NUM2=CURR#,
      273    12643 C                                      BASE2=8);
      274    12644 C                                      %SCREAM(
      275    12645 C                                      ERR#=E$BAD_UTS_VX,
      276    12646 C                                      LEVEL=@E$F_VX,
      277    12647 C                                      MID="'I'",
      278    12648 C                                      AUX=@E$OUOF_VX);
      279    12649 C      /**********ATTN: Need to remove ***********/
      280    12650        %ENDIF;
      281    12651    5                                  END;

      282    12652    4                              END;

  12652  5 000516   000750 710000 5                  TRA     s:12772

      283    12653    4                           ELSE DO;        /* Error */

      284    12654    4   BAD_O_KEY:
      285    12655        /*E*  ERROR: VXI-E$UNKNOWN_REC_TYPE_VX-0
      286    12656              MESSAGE: Unknown/illegal record type detected.
      287    12657              DESCRIPTION: Self-explanatory.
      288    12658        */
      289    12659                                    %SCREAM(
      290    12660                                    ERR#=E$UNKNOWN_REC_TYPE_VX,
      291    12661                                    LEVEL=@E$F_VX,
      292    12662                                    MID="'I'",
      293    12663                                    AUX=@E$OUOF_VX);

  12664  5 000517   000063 630400 6     BAD_O_KEY    EPPR0   51
         5 000520   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000521   000000 701000 xent               TSX1    VXE$ERROR
         5 000522   000000 011000                    NOP     0

      294    12666    4                              END;

      295    12667    3                      END;

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:56   
  12667  5 000523   000750 710000 5                  TRA     s:12772

      296    12668    3                   ELSE DO;                /* Check if lib search key */

      297    12669    3                       IF VX_LIBRARY_PROBE AND

  12669  5 000524   000000 234000 xsym               SZN     VX_LIBRARY_PROBE
         5 000525   000540 605000 5                  TPL     s:12673
         5 000526   300000 236100                    LDQ     0,,PR3
         5 000527   777000 376003                    ANQ     -512,DU
         5 000530   400000 116003                    CMPQ    -131072,DU
         5 000531   000540 603000 5                  TRC     s:12673
         5 000532   000000 235000 xsym               LDA     VX_IO_SIZEC
         5 000533   000377 115007                    CMPA    255,DL
         5 000534   000540 605400 5                  TPNZ    s:12673

      298    12670    3                               K$B.FORM0.COUNT <= 255 AND
      299    12671    3                               VX_IO_SIZEC <= 255 THEN
      300    12672    3                           VX_OK.KTYPE = -3; /* Assume library probe */

  12672  5 000535   000003 335007                    LCA     3,DL
         5 000536   000001 755000 xsym               STA     VX_OK+1
         5 000537   000750 710000 5                  TRA     s:12772

      301    12673    3                       ELSE IF INTERNAL_IO_SAVEPREV = 2

  12673  5 000540   200015 235100                    LDA     INTERNAL_IO_SAVEPREV,,AUTO
         5 000541   000002 115007                    CMPA    2,DL
         5 000542   001010 600000 5                  TZE     POP_OUT

      302    12674    3                           THEN GOTO POP_OUT ;
      303    12675    3                           ELSE GOTO BAD_O_KEY ;

  12675  5 000543   000517 710000 5                  TRA     BAD_O_KEY

      304    12676    3                      END;
      305    12677        %EJECT;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:57   
      306    12678    2         CASE( 1/*@RF*/ );

      307    12679    2           COUNT = K$R.FORM0.COUNT;        /*Get key count */

  12679  5 000544   200011 473500                    LDP3    K$,,AUTO
         5 000545   300000 236100                    LDQ     0,,PR3
         5 000546   000033 772000                    QRL     27
         5 000547   200016 756100                    STQ     COUNT,,AUTO

      308    12680    3           IF COUNT = 4 THEN DO;           /*Head record */

  12680  5 000550   000004 116007                    CMPQ    4,DL
         5 000551   000562 601000 5                  TNZ     s:12685

      309    12681    3               IF K$ -> T$C.CHARS = VX_R_KEY_HEAD THEN VX_OK.KTYPE = -1;

  12681  5 000552   000000 620006                    EAX0    0,QL
         5 000553   040000 106540                    CMPC    fill='040'O
         5 000554   300000 200010                    ADSC9   0,,PR3                   cn=1,n=*X0
         5 000555   000000 000004 xsym               ADSC9   VX_R_KEY_HEAD            cn=0,n=4
         5 000556   000720 601000 5                  TNZ     BAD_R_KEY

  12681  5 000557   000001 335007                    LCA     1,DL
         5 000560   000001 755000 xsym               STA     VX_OK+1
         5 000561   000750 710000 5                  TRA     s:12772

      310    12682    3               ELSE GOTO BAD_R_KEY;
      311    12683    3              END;
      312    12684    2           ELSE
      313    12685    2               IF COUNT = 5 THEN

  12685  5 000562   000005 116007                    CMPQ    5,DL
         5 000563   000665 601000 5                  TNZ     s:12738

      314    12686    2                   IF K$ -> T$C.CHARS = VX_R_KEY_BIRTH THEN VX_OK.KTYPE = -2;

  12686  5 000564   000000 620006                    EAX0    0,QL
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:58   
         5 000565   040000 106540                    CMPC    fill='040'O
         5 000566   300000 200010                    ADSC9   0,,PR3                   cn=1,n=*X0
         5 000567   000000 000005 xsym               ADSC9   VX_R_KEY_BIRTH           cn=0,n=5
         5 000570   000574 601000 5                  TNZ     s:12688

  12686  5 000571   000002 335007                    LCA     2,DL
         5 000572   000001 755000 xsym               STA     VX_OK+1
         5 000573   000750 710000 5                  TRA     s:12772

      315    12687    3                   ELSE DO;

      316    12688    3                       VX_OK.KTYPE = 1;    /* Form 1 */

  12688  5 000574   000001 235007                    LDA     1,DL
         5 000575   000001 755000 xsym               STA     VX_OK+1

      317    12689    3                       VX_OK.KRTYPE = K$R.FORM1.REC_TYPE;

  12689  5 000576   300000 236100                    LDQ     0,,PR3
         5 000577   000022 772000                    QRL     18
         5 000600   000777 376007                    ANQ     511,DL
         5 000601   000002 756000 xsym               STQ     VX_OK+2

      318    12690    3                       VX_OK.KNODE# = K$R.FORM1.NODE#;

  12690  5 000602   300000 236100                    LDQ     0,,PR3
         5 000603   777777 376007                    ANQ     -1,DL
         5 000604   000010 756000 xsym               STQ     VX_OK+8

      319    12691    3                      IF VX_OK.KRTYPE = %TYPPROG THEN VX_OK.KOFSET = K$R.FORM1.OFFSET;

  12691  5 000605   000002 235000 xsym               LDA     VX_OK+2
         5 000606   000012 115007                    CMPA    10,DL
         5 000607   000614 601000 5                  TNZ     s:12692

  12691  5 000610   300001 236100                    LDQ     1,,PR3
         5 000611   000022 772000                    QRL     18
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:59   
         5 000612   000004 756000 xsym               STQ     VX_OK+4
         5 000613   000617 710000 5                  TRA     s:12693

      320    12692    3                       ELSE VX_OK.KPAGE# = K$R.FORM1.OFFSET;

  12692  5 000614   300001 236100                    LDQ     1,,PR3
         5 000615   000022 772000                    QRL     18
         5 000616   000003 756000 xsym               STQ     VX_OK+3

      321    12693    3                       IF (VX_OK.KRTYPE >= %TYPDNAM AND VX_OK.KRTYPE <= %TYPPROG)

  12693  5 000617   000000 115003                    CMPA    0,DU
         5 000620   000623 600000 5                  TZE     s:12693+4
         5 000621   000013 115007                    CMPA    11,DL
         5 000622   000750 602000 5                  TNC     s:12772
         5 000623   000022 115007                    CMPA    18,DL
         5 000624   000750 600000 5                  TZE     s:12772
         5 000625   000036 115007                    CMPA    30,DL
         5 000626   000750 600000 5                  TZE     s:12772

      322    12694    3                               OR VX_OK.KRTYPE = %TYPDATASEG
      323    12695    3                               OR VX_OK.KRTYPE = %TYPROS
      324    12696    3                       THEN ;              /* Key type is ok   */
      325    12697    4                       ELSE DO;            /* Error */

      326    12698
      327    12699        /*E*  ERROR: VXI-E$BAD_RUN_REC_TYPE_VX-0
      328    12700        MESSAGE: Inconsistency between key form and record type or bad record type in
      329    12701                 run file %FN; Type = %U1.
      330    12702       DESCRIPTION: Inconsistency between key form and record type has occurred for a recor
             12702        d in the run file.
      331    12703        */
      332    12704    4   BAD_R_TYPE:
      333    12705    5                           DO CASE( TYPE );

  12705  5 000627   200003 470500       BAD_R_TYPE   LDP0    @TYPE,,AUTO
         5 000630   000000 235100                    LDA     0,,PR0
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:60   
         5 000631   000003 115007                    CMPA    3,DL
         5 000632   000634 602005 5                  TNC     BAD_R_TYPE+5,AL
         5 000633   000652 710000 5                  TRA     s:12719
         5 000634   000637 710000 5                  TRA     s:12707
         5 000635   000643 710000 5                  TRA     s:12709
         5 000636   000647 710000 5                  TRA     s:12711

      334    12706    5                             CASE(0/*@OF*/);

      335    12707    5                               VX_FPT_ERRMSG.V.DCB# = DCBNUM(M$OF);

  12707  5 000637   000000 236007 xsym               LDQ     M$OF,DL
         5 000640   000000 620006                    EAX0    0,QL
         5 000641   000026 740000 xsym               STX0    VX_FPT_ERRMSG+22
         5 000642   000652 710000 5                  TRA     s:12719

      336    12708    5                             CASE(1/*@RF*/);

      337    12709    5                               VX_FPT_ERRMSG.V.DCB# = DCBNUM( M$RF );

  12709  5 000643   000000 236007 xsym               LDQ     M$RF,DL
         5 000644   000000 620006                    EAX0    0,QL
         5 000645   000026 740000 xsym               STX0    VX_FPT_ERRMSG+22
         5 000646   000652 710000 5                  TRA     s:12719

      338    12710    5                             CASE(2/*@LF*/);

      339    12711    5                               VX_FPT_ERRMSG.V.DCB# = DCBNUM( M$OF );

  12711  5 000647   000000 236007 xsym               LDQ     M$OF,DL
         5 000650   000000 620006                    EAX0    0,QL
         5 000651   000026 740000 xsym               STX0    VX_FPT_ERRMSG+22

      340    12712    5                             END;

      341    12713                                %NUMBER( NUM1="VX_OK.KRTYPE" );

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:61   
  12719  5 000652   000067 630400 6                  EPPR0   55
         5 000653   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 000654   000000 701000 xent               TSX1    VXD$B2C
         5 000655   000000 011000                    NOP     0

      342    12730                                %SCREAM(
      343    12731                                ERR#=E$BAD_RUN_REC_TYPE_VX,
      344    12732                                LEVEL=@E$F_D_VX, MID="'I'" );

  12733  5 000656   000076 630400 6                  EPPR0   62
         5 000657   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000660   000000 701000 xent               TSX1    VXE$ERROR
         5 000661   000000 011000                    NOP     0

      345    12735    4                           CALL DUMP_KEY_BUF;

  12735  5 000662   001246 701000 5                  TSX1    DUMP_KEY_BUF
         5 000663   000000 011000                    NOP     0

      346    12736    4                          END;

      347    12737    3                      END;

  12737  5 000664   000750 710000 5                  TRA     s:12772

      348    12738    3               ELSE IF COUNT = 7 THEN DO;

  12738  5 000665   000007 116007                    CMPQ    7,DL
         5 000666   000720 601000 5                  TNZ     BAD_R_KEY

      349    12739    3                       VX_OK.KTYPE = 2;    /* Form 2 */

  12739  5 000667   000002 235007                    LDA     2,DL
         5 000670   000001 755000 xsym               STA     VX_OK+1

      350    12740    3                       VX_OK.KRTYPE = K$R.FORM2.REC_TYPE;

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:62   
  12740  5 000671   300001 236100                    LDQ     1,,PR3
         5 000672   000011 772000                    QRL     9
         5 000673   000777 376007                    ANQ     511,DL
         5 000674   000002 756000 xsym               STQ     VX_OK+2

      351    12741    3                       VX_OK.KNODE# = K$R.FORM2.NODE#;

  12741  5 000675   300000 236100                    LDQ     0,,PR3
         5 000676   777777 376007                    ANQ     -1,DL
         5 000677   000010 756000 xsym               STQ     VX_OK+8

      352    12742    3                       VX_OK.KPEDX = K$R.FORM2.P_ENTDEF;

  12742  5 000700   300001 236100                    LDQ     1,,PR3
         5 000701   000022 772000                    QRL     18
         5 000702   000011 756000 xsym               STQ     VX_OK+9

      353    12743    3                       VX_OK.KPAGE# = K$R.FORM2.PAGE#;

  12743  5 000703   300001 236100                    LDQ     1,,PR3
         5 000704   000777 376007                    ANQ     511,DL
         5 000705   000003 756000 xsym               STQ     VX_OK+3

      354    12744    3                       IF VX_OK.KRTYPE < %TYPPROG

  12744  5 000706   000002 235000 xsym               LDA     VX_OK+2
         5 000707   000012 115007                    CMPA    10,DL
         5 000710   000627 602000 5                  TNC     BAD_R_TYPE
         5 000711   000020 115007                    CMPA    16,DL
         5 000712   000627 603000 5                  TRC     BAD_R_TYPE

      355    12745    3                               OR
      356    12746    3                               VX_OK.KRTYPE > %TYPDBGNAM THEN GOTO BAD_R_TYPE;
      357    12747    3                       IF K$R.FORM2.O777 ~= BITBIN('777'O) THEN GOTO BAD_R_KEY;

  12747  5 000713   300000 236100                    LDQ     0,,PR3
         5 000714   000777 376003                    ANQ     511,DU
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:63   
         5 000715   000777 116003                    CMPQ    511,DU
         5 000716   000720 601000 5                  TNZ     BAD_R_KEY

      358    12748    3                      END;

  12748  5 000717   000750 710000 5                  TRA     s:12772

      359    12749    3                   ELSE DO;                /* Error */

      360    12750    3   BAD_R_KEY:
      361    12751    4                       DO CASE( TYPE );

  12751  5 000720   100000 235100       BAD_R_KEY    LDA     0,,PR1
         5 000721   000003 115007                    CMPA    3,DL
         5 000722   000724 602005 5                  TNC     BAD_R_KEY+4,AL
         5 000723   000742 710000 5                  TRA     s:12767
         5 000724   000727 710000 5                  TRA     s:12753
         5 000725   000733 710000 5                  TRA     s:12755
         5 000726   000737 710000 5                  TRA     s:12757

      362    12752    4                         CASE( 0/*@OF*/ );

      363    12753    4                           VX_FPT_ERRMSG.V.DCB# = DCBNUM( M$OF );

  12753  5 000727   000000 236007 xsym               LDQ     M$OF,DL
         5 000730   000000 620006                    EAX0    0,QL
         5 000731   000026 740000 xsym               STX0    VX_FPT_ERRMSG+22
         5 000732   000742 710000 5                  TRA     s:12767

      364    12754    4                         CASE( 1/*@RF*/ );

      365    12755    4                           VX_FPT_ERRMSG.V.DCB# = DCBNUM( M$RF );

  12755  5 000733   000000 236007 xsym               LDQ     M$RF,DL
         5 000734   000000 620006                    EAX0    0,QL
         5 000735   000026 740000 xsym               STX0    VX_FPT_ERRMSG+22
         5 000736   000742 710000 5                  TRA     s:12767
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:64   

      366    12756    4                         CASE( 2/*@LF*/ );

      367    12757    4                           VX_FPT_ERRMSG.V.DCB# = DCBNUM( M$OF );

  12757  5 000737   000000 236007 xsym               LDQ     M$OF,DL
         5 000740   000000 620006                    EAX0    0,QL
         5 000741   000026 740000 xsym               STX0    VX_FPT_ERRMSG+22

      368    12758    4                         END;

      369    12759        /*E*  ERROR: VXI-E$UNKNOWN_RUN_REC_KEY_VX-0
      370    12760              MESSAGE: Unknown/illegal record detected in run file: %FN.
      371    12761              DESCRIPTION: Self-explanatory.
      372    12762        */
      373    12763                            %SCREAM(
      374    12764                            ERR#=E$UNKNOWN_RUN_REC_KEY_VX,
      375    12765                            LEVEL=@E$F_D_VX,
      376    12766                            MID="'I'");

  12767  5 000742   000103 630400 6                  EPPR0   67
         5 000743   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000744   000000 701000 xent               TSX1    VXE$ERROR
         5 000745   000000 011000                    NOP     0

      377    12769    3                       CALL DUMP_KEY_BUF;

  12769  5 000746   001246 701000 5                  TSX1    DUMP_KEY_BUF
         5 000747   000000 011000                    NOP     0

      378    12770    3                      END;

      379    12771    2         END;

      380    12772    1       RETURN;

  12772  5 000750   000000 702200 xent               TSX2  ! X66_ARET
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:65   

      381    12773        %EJECT;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:66   
      382    12774    1   READ_ERROR:
      383    12775    1       ERR = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.ERR#/*@ALT_ERROR*/;

  12775  5 000751   000000 470400 xsym  READ_ERROR   LDP0    B$TCB$
         5 000752   000000 471500                    LDP1    0,,PR0
         5 000753   100102 236100                    LDQ     66,,PR1
         5 000754   000003 772000                    QRL     3
         5 000755   037777 376007                    ANQ     16383,DL
         5 000756   200012 756100                    STQ     ERR,,AUTO

      384    12776    2       IF ERR = %E$EOF THEN DO;

  12776  5 000757   000006 116007                    CMPQ    6,DL
         5 000760   000763 601000 5                  TNZ     s:12780

      385    12777    2           VX_IO_STATUS = 0/*@IO_EOF*/;

  12777  5 000761   000000 450000 xsym               STZ     VX_IO_STATUS

      386    12778    2          END;

  12778  5 000762   001010 710000 5                  TRA     POP_OUT

      387    12779    1       ELSE
      388    12780    2           IF ERR = %E$NOKEY THEN DO;

  12780  5 000763   000102 116007                    CMPQ    66,DL
         5 000764   000770 601000 5                  TNZ     s:12784

      389    12781    2               VX_IO_STATUS = 1/*@IO_NOKEY*/;

  12781  5 000765   000001 235007                    LDA     1,DL
         5 000766   000000 755000 xsym               STA     VX_IO_STATUS

      390    12782    2              END;

  12782  5 000767   001010 710000 5                  TRA     POP_OUT
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:67   

      391    12783    1           ELSE
      392    12784    2               IF ERR = %E$LD THEN DO;

  12784  5 000770   000007 116007                    CMPQ    7,DL
         5 000771   001003 601000 5                  TNZ     WRITE_ERROR

      393    12785    2                   VX_IO_STATUS = 2/*@IO_LD*/;

  12785  5 000772   000002 235007                    LDA     2,DL
         5 000773   000000 755000 xsym               STA     VX_IO_STATUS

      394    12786    2                   IF TYPE = 1/*@RF*/ THEN GOTO POP_OUT;

  12786  5 000774   200003 471500                    LDP1    @TYPE,,AUTO
         5 000775   100000 235100                    LDA     0,,PR1
         5 000776   000001 115007                    CMPA    1,DL
         5 000777   001010 600000 5                  TZE     POP_OUT

      395    12787    2                   IF VX_IO_SAVEPREV > 0 THEN GOTO CONTINUE;

  12787  5 001000   000000 235000 xsym               LDA     VX_IO_SAVEPREV
         5 001001   000213 605400 5                  TPNZ    CONTINUE

      396    12788    2                  END;

  12788  5 001002   001010 710000 5                  TRA     POP_OUT

      397    12789    2               ELSE DO;

      398    12790        /* Here for irrecoverable i/o errors */
      399    12791    2   WRITE_ERROR:
      400    12792    2                   CALL M$MERC ALTRET(MERC_ERROR);

  12792  5 001003   410007 713400       WRITE_ERROR  CLIMB   alt,+4103
         5 001004   000000 401760                    pmme    nvectors=0
         5 001005   001016 702000 5                  TSX2    MERC_ERROR
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:68   

      401    12793                        %ERROR_IT;

  12794  5 001006   000002 713400                    CLIMB   err
         5 001007   000000 401760                    pmme    nvectors=0

      402    12796    2                  END;

      403    12797    1   POP_OUT:
      404    12798        /* Reset global i/o variables */
      405    12799    1       VX_IO_SIZEC = 0;

  12799  5 001010   000000 450000 xsym  POP_OUT      STZ     VX_IO_SIZEC

      406    12800    1       VX_IO_SIZEW = 0;

  12800  5 001011   000000 450000 xsym               STZ     VX_IO_SIZEW

      407    12801    1       VX_IO_SAVEPREV = 0/*@NO*/;

  12801  5 001012   000000 450000 xsym               STZ     VX_IO_SAVEPREV

      408    12802    1       VX_OK.KTYPE = -5;

  12802  5 001013   000005 335007                    LCA     5,DL
         5 001014   000001 755000 xsym               STA     VX_OK+1

      409    12803    1       ALTRETURN;

  12803  5 001015   000000 702200 xent               TSX2  ! X66_AALT

      410    12804    1   MERC_ERROR:
      411    12805    1       CALL VXE$MERC;

  12805  5 001016   000002 631400 xsym  MERC_ERROR   EPPR1   B_VECTNIL+2
         5 001017   000000 701000 xent               TSX1    VXE$MERC
         5 001020   000000 011000                    NOP     0
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:69   
         5 001021   001024 710000 5                  TRA     s:12842

      412    12806            %BANNER(ARG="End VXI$READ" );

             12814    1   /*******************************************************************************
             12815    1   *                                                                              *
             12816    1   *                          End VXI$READ                                           *
             12817    1   *                                                                              *
             12818    1   *******************************************************************************/

      413    12822        %EJECT;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:70   
      414    12823            %BANNER(ARG="VXI$WRITE Entry" );

             12831    1   /*******************************************************************************
             12832    1   *                                                                              *
             12833    1   *                          VXI$WRITE Entry                                        *
             12834    1   *                                                                              *
             12835    1   *******************************************************************************/

      415    12839        %PLIST;
      416    12840    1   VXI$WRITE:
      417    12841    1       ENTRY(         TYPE, BUF$, SIZE, KEY )  ALTRET;

  12841  5 001022   000000 700200 xent  VXI$WRITE    TSX0  ! X66_AUTO_4
         5 001023   000034 000004                    ZERO    28,4

      418    12842    2       DO CASE( TYPE );

  12842  5 001024   200003 470500                    LDP0    @TYPE,,AUTO
         5 001025   000000 235100                    LDA     0,,PR0
         5 001026   000002 115007                    CMPA    2,DL
         5 001027   001031 602005 5                  TNC     s:12842+5,AL
         5 001030   001036 710000 5                  TRA     s:12864
         5 001031   001036 710000 5                  TRA     s:12864
         5 001032   001033 710000 5                  TRA     s:12848

      419    12843        /* Not possible for LINKer
      420    12844                   CASE( @OF );
      421    12845                   FPT$ = ADDR( VX_O_FPT_WRITE );
      422    12846        */
      423    12847    2         CASE( 1/*@RF*/ );

      424    12848    2           FPT$ = ADDR( VX_R_FPT_WRITE );

  12848  5 001033   000107 236000 6                  LDQ     71
         5 001034   200010 756100                    STQ     FPT$,,AUTO
         5 001035   001055 710000 5                  TRA     s:12882

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:71   
      425    12849        /* Not possible for LINKer
      426    12850                   CASE( @LF );
      427    12851                   FPT$ = ADDR( VX_O_FPT_WRITE );
      428    12852        */
      429    12853    2         CASE(ELSE);

      430    12854        /*E*  ERROR: VXI-E$INTERNAL_WRITE_BAD_TYPE_VX-0
      431    12855              MESSAGE: Internal LINK error; Bad type passed to VXI$WRITE: Type = %U1.
      432    12856              DESCRIPTION: Self-explanatory.
      433    12857        */
      434    12858                %NUMBER( NUM1=TYPE );

  12864  5 001036   000002 236000 6                  LDQ     2
         5 001037   200032 756100                    STQ     @CURR#+5,,AUTO
         5 001040   200003 236100                    LDQ     @TYPE,,AUTO
         5 001041   000003 235000 6                  LDA     3
         5 001042   200030 757100                    STAQ    @CURR#+3,,AUTO
         5 001043   000004 237000 6                  LDAQ    4
         5 001044   200026 757100                    STAQ    @CURR#+1,,AUTO
         5 001045   200026 630500                    EPPR0   @CURR#+1,,AUTO
         5 001046   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001047   000000 701000 xent               TSX1    VXD$B2C
         5 001050   000000 011000                    NOP     0

      435    12875                %SCREAM(
      436    12876                ERR#=E$INTERNAL_WRITE_BAD_TYPE_VX,
      437    12877                MID="'I'",
      438    12878                LEVEL=@E$F_VX);

  12879  5 001051   000111 630400 6                  EPPR0   73
         5 001052   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 001053   000000 701000 xent               TSX1    VXE$ERROR
         5 001054   000000 011000                    NOP     0

      439    12881    2         END;

      440    12882    1       F$W.BUF_.BOUND   = SIZE * 4 - 1;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:72   

  12882  5 001055   200005 470500                    LDP0    @SIZE,,AUTO
         5 001056   200010 471500                    LDP1    FPT$,,AUTO
         5 001057   000000 236100                    LDQ     0,,PR0
         5 001060   000002 736000                    QLS     2
         5 001061   000001 136007                    SBLQ    1,DL
         5 001062   000020 736000                    QLS     16
         5 001063   100004 676100                    ERQ     4,,PR1
         5 001064   000034 376000 xsym               ANQ     B_VECTNIL+28
         5 001065   100004 656100                    ERSQ    4,,PR1

      441    12883    1       F$W.BUF_.BUF$   = BUF$;

  12883  5 001066   200004 473500                    LDP3    @BUF$,,AUTO
         5 001067   300000 236100                    LDQ     0,,PR3
         5 001070   100005 756100                    STQ     5,,PR1

      442    12884    2       IF KEY ~= 3/*@NO_KEY*/ THEN DO;

  12884  5 001071   200006 474500                    LDP4    @KEY,,AUTO
         5 001072   400000 235100                    LDA     0,,PR4
         5 001073   000003 115007                    CMPA    3,DL
         5 001074   001133 600000 5                  TZE     s:12922

      443    12885    3           DO CASE( KEY );

  12885  5 001075   000003 115007                    CMPA    3,DL
         5 001076   001100 602005 5                  TNC     s:12885+3,AL
         5 001077   001135 710000 5                  TRA     s:12924
         5 001100   001103 710000 5                  TRA     s:12887
         5 001101   001106 710000 5                  TRA     s:12889
         5 001102   001111 710000 5                  TRA     s:12891

      444    12886    3             CASE( 0/*@OF*/ );

      445    12887    3               F$W.KEY_   = VECTOR( VX_O_KEY_BUF );

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:73   
  12887  5 001103   000014 237000 6                  LDAQ    12
         5 001104   100002 757100                    STAQ    2,,PR1
         5 001105   001135 710000 5                  TRA     s:12924

      446    12888    3             CASE( 1/*@RF*/ );

      447    12889    3               F$W.KEY_   = VECTOR( VX_R_KEY_BUF );

  12889  5 001106   000016 237000 6                  LDAQ    14
         5 001107   100002 757100                    STAQ    2,,PR1
         5 001110   001135 710000 5                  TRA     s:12924

      448    12890    3             CASE( 2/*@LF*/ );

      449    12891    3               F$W.KEY_   = VECTOR( VX_O_KEY_BUF );

  12891  5 001111   000014 237000 6                  LDAQ    12
         5 001112   100002 757100                    STAQ    2,,PR1

      450    12892        /*E*  ERROR: VXI-E$INTERNAL_WRITE_BAD_KEY_TP_VX-0
      451    12893            MESSAGE: Internal LINK error; Bad key type passed to VXI$WRITE: Key type = %U1.
      452    12894              DESCRIPTION: Self-explanatory.
      453    12895        */
      454    12896                    %NUMBER( NUM1=KEY );

  12902  5 001113   000002 236000 6                  LDQ     2
         5 001114   200032 756100                    STQ     @CURR#+5,,AUTO
         5 001115   200006 236100                    LDQ     @KEY,,AUTO
         5 001116   000003 235000 6                  LDA     3
         5 001117   200030 757100                    STAQ    @CURR#+3,,AUTO
         5 001120   000004 237000 6                  LDAQ    4
         5 001121   200026 757100                    STAQ    @CURR#+1,,AUTO
         5 001122   200026 630500                    EPPR0   @CURR#+1,,AUTO
         5 001123   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001124   000000 701000 xent               TSX1    VXD$B2C
         5 001125   000000 011000                    NOP     0

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:74   
      455    12913                    %SCREAM(
      456    12914                    ERR#=E$INTERNAL_WRITE_BAD_KEY_TP_VX,
      457    12915                    MID="'I'",
      458    12916                    LEVEL=@E$F_VX);

  12917  5 001126   000116 630400 6                  EPPR0   78
         5 001127   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 001130   000000 701000 xent               TSX1    VXE$ERROR
         5 001131   000000 011000                    NOP     0

      459    12919    3             END;

      460    12920    2          END;

  12920  5 001132   001135 710000 5                  TRA     s:12924

      461    12921    2       ELSE DO;

      462    12922    2           F$W.KEY_   = VECTOR(NIL);

  12922  5 001133   000122 237000 6                  LDAQ    82
         5 001134   100002 757100                    STAQ    2,,PR1

      463    12923    2          END;

      464    12924    1       CALL M$WRITE( F$W )           ALTRET( WRITE_ERROR );

  12924  5 001135   200010 470500                    LDP0    FPT$,,AUTO
         5 001136   440001 713400                    CLIMB   alt,write
         5 001137   401400 401760                    pmme    nvectors=4
         5 001140   001003 702000 5                  TSX2    WRITE_ERROR

      465    12925    1       VX_IO_STATUS = -1;

  12925  5 001141   000001 335007                    LCA     1,DL
         5 001142   000000 755000 xsym               STA     VX_IO_STATUS
         5 001143   001320 710000 5                  TRA     s:13082
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:75   

      466    12926
      467    12927            %BANNER(ARG="End VXI$WRITE" );

             12935    1   /*******************************************************************************
             12936    1   *                                                                              *
             12937    1   *                          End VXI$WRITE                                          *
             12938    1   *                                                                              *
             12939    1   *******************************************************************************/

      468    12943        %PLIST;
      469    12944        %EJECT;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:76   
      470    12945    1   REPORT_INCONSISTENCY: PROC( KEYFORM );

  12945  5 001144   200022 741300       REPORT_INCO* STX1  ! COUNT+4,,AUTO

      471    12946
      472    12947    2   DCL KEYFORM      UBIN;
      473    12948
      474    12949        /*E*  ERROR: VXI-E$BAD_FORM1_REC_TYPE_VX-0
      475    12950              MESSAGE: Object language error.  Illegal record type/key form detected.
      476    12951                       Record type = %U1; Key form = %U2.
      477    12952              DESCRIPTION: A bad record type has been detected within an object unit.
      478    12953        */
      479    12954
      480    12955              %NUMBER( NUM1="VX_OK.KRTYPE", NUM2=KEYFORM );

  12961  5 001145   000067 630400 6                  EPPR0   55
         5 001146   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001147   000000 701000 xent               TSX1    VXD$B2C
         5 001150   000000 011000                    NOP     0

  12965  5 001151   000002 236000 6                  LDQ     2
         5 001152   200032 756100                    STQ     @CURR#+5,,AUTO
         5 001153   200023 236100                    LDQ     @KEYFORM,,AUTO
         5 001154   000125 235000 6                  LDA     85
         5 001155   200030 757100                    STAQ    @CURR#+3,,AUTO
         5 001156   000126 237000 6                  LDAQ    86
         5 001157   200026 757100                    STAQ    @CURR#+1,,AUTO
         5 001160   200026 630500                    EPPR0   @CURR#+1,,AUTO
         5 001161   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001162   000000 701000 xent               TSX1    VXD$B2C
         5 001163   000000 011000                    NOP     0

      481    12972
      482    12973
      483    12974              %SCREAM(
      484    12975                      ERR#=E$BAD_FORM1_REC_TYPE_VX, LEVEL=@E$F_D_VX,
      485    12976                      MID="'I'", AUX=E$OUOF_VX );
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:77   

  12977  5 001164   000131 630400 6                  EPPR0   89
         5 001165   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 001166   000000 701000 xent               TSX1    VXE$ERROR
         5 001167   000000 011000                    NOP     0

      486    12979
      487    12980    2       CALL DUMP_KEY_BUF;

  12980  5 001170   001246 701000 5                  TSX1    DUMP_KEY_BUF
         5 001171   000000 011000                    NOP     0

      488    12981
      489    12982    2   END REPORT_INCONSISTENCY;

  12982  5 001172   200022 221300                    LDX1  ! COUNT+4,,AUTO
         5 001173   000001 702211                    TSX2  ! 1,X1

      490    12983
      491    12984        %EJECT;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:78   
      492    12985    1   REPORT_SEQUENCE_ERROR: PROC( ERR_CODE, PREV#, CURR# );

  12985  5 001174   200022 741300       REPORT_SEQU* STX1  ! COUNT+4,,AUTO

      493    12986
      494    12987    2   DCL ERR_CODE  UBIN;
      495    12988    2   DCL PREV#     UBIN;
      496    12989    2   DCL CURR#     UBIN;
      497    12990
      498    12991              %NUMBER( NUM1="VX_OK.KRTYPE" );

  12997  5 001175   000067 630400 6                  EPPR0   55
         5 001176   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001177   000000 701000 xent               TSX1    VXD$B2C
         5 001200   000000 011000                    NOP     0

      499    13008
      500    13009              %SCREAM( ERR# = ERR_CODE, LEVEL=@E$F_D_VX, MID="'I'" );

  13010  5 001201   000100 237000 6                  LDAQ    64
         5 001202   200030 757100                    STAQ    @CURR#+3,,AUTO
         5 001203   000077 236000 6                  LDQ     63
         5 001204   200023 235100                    LDA     @ERR_CODE,,AUTO
         5 001205   200026 757100                    STAQ    @CURR#+1,,AUTO
         5 001206   200026 630500                    EPPR0   @CURR#+1,,AUTO
         5 001207   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 001210   000000 701000 xent               TSX1    VXE$ERROR
         5 001211   000000 011000                    NOP     0

      501    13012
      502    13013        /*E*  ERROR: VXI-E$LAST_CURR_VX-0
      503    13014              MESSAGE: Last value = %U1; Current value = %U2.
      504    13015              DESCRIPTION: Display last/current values for appropriate error condition.
      505    13016        */
      506    13017              %NUMBER( NUM1=PREV#, NUM2=CURR# );

  13023  5 001212   000002 236000 6                  LDQ     2
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:79   
         5 001213   200032 756100                    STQ     @CURR#+5,,AUTO
         5 001214   200024 236100                    LDQ     @PREV#,,AUTO
         5 001215   000003 235000 6                  LDA     3
         5 001216   200030 757100                    STAQ    @CURR#+3,,AUTO
         5 001217   000004 237000 6                  LDAQ    4
         5 001220   200026 757100                    STAQ    @CURR#+1,,AUTO
         5 001221   200026 630500                    EPPR0   @CURR#+1,,AUTO
         5 001222   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001223   000000 701000 xent               TSX1    VXD$B2C
         5 001224   000000 011000                    NOP     0

  13027  5 001225   000002 236000 6                  LDQ     2
         5 001226   200032 756100                    STQ     @CURR#+5,,AUTO
         5 001227   200025 236100                    LDQ     @CURR#,,AUTO
         5 001230   000125 235000 6                  LDA     85
         5 001231   200030 757100                    STAQ    @CURR#+3,,AUTO
         5 001232   000126 237000 6                  LDAQ    86
         5 001233   200026 757100                    STAQ    @CURR#+1,,AUTO
         5 001234   200026 630500                    EPPR0   @CURR#+1,,AUTO
         5 001235   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001236   000000 701000 xent               TSX1    VXD$B2C
         5 001237   000000 011000                    NOP     0

      507    13034
      508    13035              %SCREAM( ERR#=E$LAST_CURR_VX, LEVEL=E$F_VX, MID="'I'", AUX=E$OUOF_VX );

  13036  5 001240   000136 630400 6                  EPPR0   94
         5 001241   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 001242   000000 701000 xent               TSX1    VXE$ERROR
         5 001243   000000 011000                    NOP     0

      509    13038
      510    13039    2   END REPORT_SEQUENCE_ERROR;

  13039  5 001244   200022 221300                    LDX1  ! COUNT+4,,AUTO
         5 001245   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:80   
      511    13040
      512    13041        %EJECT;
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:81   
      513    13042    1   DUMP_KEY_BUF: PROC;

  13042  5 001246   200024 741300       DUMP_KEY_BUF STX1  ! @PREV#,,AUTO

      514    13043
      515    13044        /*E*  ERROR:  VXI-E$DUMP3_VX-0
      516    13045              MESSAGE: Words 0-2: %U1  %U2  %U3
      517    13046              DESCRIPTION: Dump 3 words in octal.
      518    13047        */
      519    13048
      520    13049              %NUMBER(
      521    13050                      NUM1="K$->VX$WORD_A(0)",  BASE1=8,
      522    13051                      NUM2="K$->VX$WORD_A(1)",  BASE2=8,
      523    13052                      NUM3="K$->VX$WORD_A(2)",  BASE3=8 );

  13058  5 001247   000142 236000 6                  LDQ     98
         5 001250   200032 756100                    STQ     @CURR#+5,,AUTO
         5 001251   200011 236100                    LDQ     K$,,AUTO
         5 001252   000003 235000 6                  LDA     3
         5 001253   200030 757100                    STAQ    @CURR#+3,,AUTO
         5 001254   000004 237000 6                  LDAQ    4
         5 001255   200026 757100                    STAQ    @CURR#+1,,AUTO
         5 001256   200026 630500                    EPPR0   @CURR#+1,,AUTO
         5 001257   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001260   000000 701000 xent               TSX1    VXD$B2C
         5 001261   000000 011000                    NOP     0

  13062  5 001262   000142 236000 6                  LDQ     98
         5 001263   200032 756100                    STQ     @CURR#+5,,AUTO
         5 001264   200011 236100                    LDQ     K$,,AUTO
         5 001265   000001 036003                    ADLQ    1,DU
         5 001266   000125 235000 6                  LDA     85
         5 001267   200030 757100                    STAQ    @CURR#+3,,AUTO
         5 001270   000126 237000 6                  LDAQ    86
         5 001271   200026 757100                    STAQ    @CURR#+1,,AUTO
         5 001272   200026 630500                    EPPR0   @CURR#+1,,AUTO
         5 001273   000023 631400 xsym               EPPR1   B_VECTNIL+19
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:82   
         5 001274   000000 701000 xent               TSX1    VXD$B2C
         5 001275   000000 011000                    NOP     0

  13066  5 001276   000142 236000 6                  LDQ     98
         5 001277   200032 756100                    STQ     @CURR#+5,,AUTO
         5 001300   200011 236100                    LDQ     K$,,AUTO
         5 001301   000002 036003                    ADLQ    2,DU
         5 001302   000144 235000 6                  LDA     100
         5 001303   200030 757100                    STAQ    @CURR#+3,,AUTO
         5 001304   000146 237000 6                  LDAQ    102
         5 001305   200026 757100                    STAQ    @CURR#+1,,AUTO
         5 001306   200026 630500                    EPPR0   @CURR#+1,,AUTO
         5 001307   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001310   000000 701000 xent               TSX1    VXD$B2C
         5 001311   000000 011000                    NOP     0

      524    13069
      525    13070              %SCREAM( ERR#=E$DUMP3_VX, LEVEL=@E$F_VX, MID="'I'" );

  13071  5 001312   000151 630400 6                  EPPR0   105
         5 001313   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 001314   000000 701000 xent               TSX1    VXE$ERROR
         5 001315   000000 011000                    NOP     0

      526    13073        /*
      527    13074                      Note that above call to VXE$ERROR causes VXE$ERROR to call M$ERR
      528    13075        */
      529    13076
      530    13077    2   END DUMP_KEY_BUF;

  13077  5 001316   200024 221300                    LDX1  ! @PREV#,,AUTO
         5 001317   000001 702211                    TSX2  ! 1,X1

      531    13078
      532    13079
      533    13080
      534    13081
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:83   
      535    13082    1   END VXI$READ;

  13082  5 001320   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:84   
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXI$READ.
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:85   

 **** Variables and constants ****

  ****  Section 004  Data  VXI$READ

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(504)   r     1 VX_OF_FPT_READ            16-0-0/d STRC(504)   r     1 VX_RF_FPT_READ
    34-0-0/d STRC(432)   r     1 VX_R_FPT_WRITE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @BUF$                     25-0-0/w PTR         r     1 @CURR#
    23-0-0/w PTR         r     1 @ERR_CODE                  6-0-0/w PTR         r     1 @KEY
    23-0-0/w PTR         r     1 @KEYFORM                  24-0-0/w PTR         r     1 @PREV#
     5-0-0/w PTR         r     1 @SIZE                      3-0-0/w PTR         r     1 @TYPE
    *0-0-0/w PTR         r     1 BUF$                      16-0-0/w UBIN        r     1 COUNT
    *0-0-0/w UBIN        r     1 CURR#                      7-0-0/w PTR         r     1 DCB$
    12-0-0/w UBIN        r     1 ERR                       *0-0-0/w UBIN        r     1 ERR_CODE
    10-0-0/w PTR         r     1 FPT$                      15-0-0/w UBIN        r     1 INTERNAL_IO_SAVEPREV
    11-0-0/w PTR         r     1 K$                        *0-0-0/w UBIN        r     1 KEY
    *0-0-0/w UBIN        r     1 KEYFORM                   13-0-0/w UBIN        r     1 KEY_TYPE
    *0-0-0/w UBIN        r     1 PREV#                     14-0-0/w UBIN        r     1 RTYPE
    *0-0-0/w UBIN        r     1 SIZE                      *0-0-0/w UBIN        r     1 TYPE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w PTR         r     1 M$OF$
     0-0-0/w PTR         r     1 M$RF$                      0-0-0/w STRC(720)   r     1 VX_EFIELD1
     0-0-0/w STRC(720)   r     1 VX_EFIELD2                 0-0-0/w STRC(720)   r     1 VX_EFIELD3
     0-0-0/d STRC(936)   r     1 VX_FPT_ERRMSG              0-0-0/w SBIN        r     1 VX_IO_SAVEPREV
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:86   
     0-0-0/w SBIN        r     1 VX_IO_SIZEC                0-0-0/w SBIN        r     1 VX_IO_SIZEW
     0-0-0/w SBIN        r     1 VX_IO_STATUS               0-0-0/w SBIN        r     1 VX_IO_USEPREV
     0-0-0/w UBIN        r     1 VX_LAST_UTS                0-0-0/w BIT         r     1 VX_LIBRARY_PROBE
     0-0-0/w STRC(1476)  r     1 VX_OK                      0-0-0/w STRC(1044)  r     1 VX_OU_HEAD
     0-0-0/w STRC(4617)  r     1 VX_O_KEY_BUF               0-0-0/w STRC(4617)  r     1 VX_O_KEY_BUF_L
     0-0-0/c CHAR        r     1 VX_O_KEY_HEAD              0-0-0/c CHAR(6)     r     1 VX_O_KEY_TREE
     0-0-0/c CHAR(5)     r     1 VX_R_KEY_BIRTH             0-0-0/w STRC(108)   r     1 VX_R_KEY_BUF
     0-0-0/c CHAR(4)     r     1 VX_R_KEY_HEAD

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/c STRC(4608)  r     1 C$STRING                   0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0/d STRC(504)   r     1 F$R                        0-0-0/d STRC(432)   r     1 F$W
     0-0-0/w STRC(4617)  r     1 K$B                        0-0-0/w STRC(108)   r     1 K$R
     0-0-0N  NULL        r     1 M$OF                       0-0-0N  NULL        r     1 M$RF
     0-0-0/w ASTR(9)     r     1 T$C                        0-0-0/c ASTR(9)     r     1 T$C_UNAL
     0-0-0/w UBIN        r     1 VX$WORD_A(0:0)


   Procedure VXI$READ requires 721 words for executable code.
   Procedure VXI$READ requires 28 words of local(AUTO) storage.

    No errors detected in file VXI$READ.:E05TSI    .
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:87   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:88   
          MINI XREF LISTING

B$ALT.CODE
     11858**DCL     11858--REDEF   11859--REDEF   11859--REDEF
B$ALT.ERR.ERR#
     11860**DCL     11860--REDEF   12775>>ASSIGN
B$ALT.EVID
     11859**DCL     11859--REDEF   11859--REDEF
B$TCB.ALT$
     11854**DCL     12775>>ASSIGN
B$TCB$
      8911**DCL     12775>>ASSIGN
BAD_O_KEY
     12664**LABEL   12675--GOTO
BAD_R_KEY
     12751**LABEL   12682--GOTO    12747--GOTO
BAD_R_TYPE
     12705**LABEL   12746--GOTO
BUF$
     12021**DCL         8--PROC    12430>>ASSIGN  12840--ENTRY   12883>>ASSIGN
C$STRING.CHARS
     12087**DCL     12531>>IF
CHECK_UTS
     12629**LABEL   12568--GOTO
CONTINUE
     12505**LABEL   12787--GOTO
COUNT
     12063**DCL     12543<<ASSIGN  12544>>IF      12571>>IF      12571>>IF      12610>>IF      12679<<ASSIGN
     12680>>IF      12685>>IF      12738>>IF
CURR# IN PROCEDURE REPORT_SEQUENCE_ERROR
     12989**DCL     12985--PROC    13027<>CALL
DCB$
     12040**DCL     12392<<ASSIGN  12395<<ASSIGN  12398<<ASSIGN  12526>>ASSIGN
DUMP_KEY_BUF
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:89   
     13042**PROC    12735--CALL    12769--CALL    12980--CALL
ERR
     12059**DCL     12775<<ASSIGN  12776>>IF      12780>>IF      12784>>IF
ERR_CODE IN PROCEDURE REPORT_SEQUENCE_ERROR
     12987**DCL     12985--PROC    13010<>CALL
F$DCB.ACTPOS
     12201**DCL     12201--REDEF
F$DCB.ARS#
     12175**DCL     12175--REDEF   12526>>ASSIGN
F$DCB.ATTR
     12194**DCL     12195--REDEF
F$DCB.BORROW
     12209**DCL     12209--REDEF   12209--REDEF   12209--REDEF
F$DCB.DCBNAME.L
     12223**DCL     12223--IMP-SIZ
F$DCB.EOMCHAR#
     12179**DCL     12179--REDEF
F$DCB.FLDID
     12204**DCL     12204--REDEF
F$DCB.FORM$
     12198**DCL     12198--REDEF
F$DCB.FSECT
     12214**DCL     12214--REDEF
F$DCB.FSN#
     12191**DCL     12191--REDEF   12191--REDEF   12192--REDEF
F$DCB.HEADER$
     12197**DCL     12197--REDEF
F$DCB.IXTNSIZE#
     12195**DCL     12195--REDEF
F$DCB.LASTSTA$
     12184**DCL     12184--REDEF
F$DCB.LVL
     12210**DCL     12210--REDEF
F$DCB.NAME#.C
     12185**DCL     12185--REDEF
F$DCB.NOEOF
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:90   
     12207**DCL     12207--REDEF
F$DCB.NRECS#
     12196**DCL     12196--REDEF
F$DCB.NRECX
     12215**DCL     12215--REDEF
F$DCB.OHDR
     12207**DCL     12207--REDEF
F$DCB.ORG#
     12190**DCL     12190--REDEF
F$DCB.PRECNO
     12213**DCL     12213--REDEF
F$DCB.RCSZ
     12219**DCL     12219--REDEF
F$DCB.RES#
     12186**DCL     12186--REDEF
F$DCB.SETX
     12198**DCL     12198--REDEF
F$DCB.TAB$
     12198**DCL     12198--REDEF
F$DCB.TDA
     12212**DCL     12213--REDEF
F$DCB.WSN#
     12186**DCL     12186--REDEF
F$R
     12242**DCL     12502<>CALL
F$R.BUF_.BOUND
     12244**DCL     12429<<ASSIGN
F$R.BUF_.BUF$
     12245**DCL     12430<<ASSIGN
F$R.KEY_
     12242**DCL     12436<<ASSIGN  12439<<ASSIGN  12442<<ASSIGN
F$R.STATION_
     12245**DCL     12246--REDEF
F$R.V.DVBYTE.REREAD#
     12257**DCL     12257--REDEF
F$R.V.INDX#
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:91   
     12255**DCL     12255--REDEF
F$R.V.KEYR#
     12247**DCL     12431<<ASSIGN
F$R.V.KEYS#
     12247**DCL     12475<<ASSIGN  12480<<ASSIGN  12500<<ASSIGN
F$W
     12105**DCL     12924<>CALL
F$W.BUF_.BOUND
     12105**DCL     12882<<ASSIGN
F$W.BUF_.BUF$
     12107**DCL     12883<<ASSIGN
F$W.KEY_
     12105**DCL     12887<<ASSIGN  12889<<ASSIGN  12891<<ASSIGN  12922<<ASSIGN
F$W.STATION_
     12107**DCL     12107--REDEF
F$W.V.DVBYTE.VFC#
     12114**DCL     12114--REDEF
FPT$
     12041**DCL     12105--IMP-PTR 12242--IMP-PTR 12391<<ASSIGN  12394<<ASSIGN  12397<<ASSIGN  12429>>ASSIGN
     12430>>ASSIGN  12431>>ASSIGN  12436>>ASSIGN  12439>>ASSIGN  12442>>ASSIGN  12475>>ASSIGN  12480>>ASSIGN
     12500>>ASSIGN  12502>>CALL    12848<<ASSIGN  12882>>ASSIGN  12883>>ASSIGN  12887>>ASSIGN  12889>>ASSIGN
     12891>>ASSIGN  12922>>ASSIGN  12924>>CALL
INTERNAL_IO_SAVEPREV
     12062**DCL     12505<<ASSIGN  12673>>IF
K$
     12042**DCL     12122--IMP-PTR 12147--IMP-PTR 12437<<ASSIGN  12440<<ASSIGN  12443<<ASSIGN  12531>>IF
     12535>>ASSIGN  12536>>ASSIGN  12540>>IF      12540>>IF      12542>>IF      12543>>ASSIGN  12546>>ASSIGN
     12556>>IF      12561>>CALL    12567>>ASSIGN  12573>>ASSIGN  12577>>ASSIGN  12578>>ASSIGN  12579>>ASSIGN
     12613>>IF      12619>>CALL    12625>>ASSIGN  12629>>IF      12669>>IF      12679>>ASSIGN  12681>>IF
     12681>>IF      12686>>IF      12686>>IF      12689>>ASSIGN  12690>>ASSIGN  12691>>ASSIGN  12692>>ASSIGN
     12740>>ASSIGN  12741>>ASSIGN  12742>>ASSIGN  12743>>ASSIGN  12747>>IF      13058>>CALL    13062>>CALL
     13066>>CALL
K$B.FORM0
     12123**DCL     12126--REDEF   12133--REDEF
K$B.FORM0.CHARS
     12125**DCL     12536>>ASSIGN
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:92   
K$B.FORM0.COUNT
     12124**DCL     12535>>ASSIGN  12543>>ASSIGN  12669>>IF
K$B.FORM1.O777
     12128**DCL     12542>>IF
K$B.FORM1.PAGE#
     12131**DCL     12556>>IF      12561<>CALL    12567>>ASSIGN
K$B.FORM1.REC_TYPE
     12130**DCL     12546>>ASSIGN
K$B.FORM2.D10
     12137**DCL     12573>>ASSIGN
K$B.FORM2.OFFSET
     12139**DCL     12578>>ASSIGN
K$B.FORM2.SECT#
     12138**DCL     12577>>ASSIGN
K$B.FORM2.SEQUENCE
     12141**DCL     12613>>IF      12619<>CALL    12625>>ASSIGN
K$B.FORM2.STYPE
     12140**DCL     12579>>ASSIGN
K$B.FORM2.UTS
     12136**DCL     12629>>IF
K$R.FORM0
     12148**DCL     12152--REDEF   12158--REDEF
K$R.FORM0.COUNT
     12149**DCL     12679>>ASSIGN
K$R.FORM1.NODE#
     12155**DCL     12690>>ASSIGN
K$R.FORM1.OFFSET
     12156**DCL     12691>>ASSIGN  12692>>ASSIGN
K$R.FORM1.REC_TYPE
     12154**DCL     12689>>ASSIGN
K$R.FORM2.NODE#
     12161**DCL     12741>>ASSIGN
K$R.FORM2.O777
     12160**DCL     12747>>IF
K$R.FORM2.PAGE#
     12164**DCL     12743>>ASSIGN
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:93   
K$R.FORM2.P_ENTDEF
     12162**DCL     12742>>ASSIGN
K$R.FORM2.REC_TYPE
     12163**DCL     12740>>ASSIGN
KEY
     12023**DCL         8--PROC    12432>>ASSIGN  12474>>IF      12481>>DOCASE  12840--ENTRY   12884>>IF
     12885>>DOCASE  12902<>CALL
KEYFORM IN PROCEDURE REPORT_INCONSISTENCY
     12947**DCL     12945--PROC    12965<>CALL
KEY_TYPE
     12060**DCL     12432<<ASSIGN  12433>>IF      12433<<ASSIGN  12434>>DOCASE  12455<>CALL    12529>>DOCASE
M$ERR
      5085**DCL-ENT 12794--CALL
M$MERC
      5129**DCL-ENT 12792--CALL
M$OF
     12083**DCL     12707>>ASSIGN  12711>>ASSIGN  12753>>ASSIGN  12757>>ASSIGN
M$OF$
     10646**DCL     12392>>ASSIGN  12398>>ASSIGN
M$READ
      5074**DCL-ENT 12502--CALL
M$RF
     12084**DCL     12709>>ASSIGN  12755>>ASSIGN
M$RF$
     10647**DCL     12395>>ASSIGN
M$WRITE
      5074**DCL-ENT 12924--CALL
MERC_ERROR
     12805**LABEL   12792--CALLALT
POP_OUT
     12799**LABEL   12674--GOTO    12786--GOTO
PREV# IN PROCEDURE REPORT_SEQUENCE_ERROR
     12988**DCL     12985--PROC    13023<>CALL
READ_ERROR
     12775**LABEL   12502--CALLALT
REPORT_INCONSISTENCY
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:94   
     12945**PROC    12554--CALL    12575--CALL
REPORT_SEQUENCE_ERROR
     12985**PROC    12561--CALL    12619--CALL
RTYPE
     12061**DCL     12546<<ASSIGN  12547>>IF      12548>>ASSIGN
SIZE
     12022**DCL         8--PROC    12429>>ASSIGN  12840--ENTRY   12882>>ASSIGN
T$C.CHARS
     11887**DCL     12540>>IF      12681>>IF      12686>>IF
T$C.COUNT
     11886**DCL     11887--IMP-SIZ 12540>>IF      12681>>IF      12686>>IF
T$C_UNAL.COUNT
     11889**DCL     11890--IMP-SIZ
TYPE
     12020**DCL         8--PROC    12389>>DOCASE  12410<>CALL    12433>>ASSIGN  12508>>DOCASE  12528>>ASSIGN
     12705>>DOCASE  12751>>DOCASE  12786>>IF      12840--ENTRY   12842>>DOCASE  12864<>CALL
VX$WORD_A
     11914**DCL     13058<>CALL    13062<>CALL    13066<>CALL
VXD$B2C
     11997**DCL-ENT 12410--CALL    12455--CALL    12591--CALL    12719--CALL    12864--CALL    12902--CALL
     12961--CALL    12965--CALL    12997--CALL    13023--CALL    13027--CALL    13058--CALL    13062--CALL
     13066--CALL
VXE$ERROR
     11990**DCL-ENT 12426--CALL    12471--CALL    12494--CALL    12522--CALL    12607--CALL    12664--CALL
     12733--CALL    12767--CALL    12879--CALL    12917--CALL    12977--CALL    13010--CALL    13036--CALL
     13071--CALL
VXE$MERC
     11992**DCL-ENT 12805--CALL
VX_BIAS.A
      9576**DCL      9577--REDEF
VX_CBUF.CHARS_A
      9510**DCL      9511--REDEF
VX_CONST_DCB.ACTPOS
     10692**DCL     10692--REDEF
VX_CONST_DCB.ARS#
     10651**DCL     10651--REDEF
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:95   
VX_CONST_DCB.ATTR#
     10681**DCL     10681--REDEF   10683--REDEF
VX_CONST_DCB.BORROW
     10703**DCL     10703--REDEF   10703--REDEF   10703--REDEF
VX_CONST_DCB.EOMCHAR#
     10658**DCL     10659--REDEF
VX_CONST_DCB.FLDID
     10695**DCL     10696--REDEF
VX_CONST_DCB.FORM$
     10687**DCL     10687--REDEF
VX_CONST_DCB.FSECT
     10710**DCL     10710--REDEF
VX_CONST_DCB.FSN#
     10677**DCL     10677--REDEF   10677--REDEF   10678--REDEF
VX_CONST_DCB.HEADER$
     10686**DCL     10687--REDEF
VX_CONST_DCB.IXTNSIZE#
     10683**DCL     10684--REDEF
VX_CONST_DCB.LASTSTA$
     10667**DCL     10667--REDEF
VX_CONST_DCB.LVL
     10704**DCL     10704--REDEF
VX_CONST_DCB.NAME#.C
     10667**DCL     10668--REDEF
VX_CONST_DCB.NOEOF
     10699**DCL     10699--REDEF
VX_CONST_DCB.NRECS#
     10684**DCL     10684--REDEF
VX_CONST_DCB.NRECX
     10711**DCL     10711--REDEF
VX_CONST_DCB.OHDR
     10700**DCL     10700--REDEF
VX_CONST_DCB.ORG#
     10675**DCL     10676--REDEF
VX_CONST_DCB.PRECNO
     10708**DCL     10708--REDEF
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:96   
VX_CONST_DCB.RCSZ
     10716**DCL     10716--REDEF
VX_CONST_DCB.RES#
     10669**DCL     10669--REDEF
VX_CONST_DCB.SETX
     10688**DCL     10688--REDEF
VX_CONST_DCB.TAB$
     10687**DCL     10687--REDEF
VX_CONST_DCB.TDA
     10707**DCL     10708--REDEF
VX_CONST_DCB.WSN#
     10669**DCL     10670--REDEF
VX_EBUF.CHARS_A
     10099**DCL     10100--REDEF
VX_EFIELD1.CHARS
     10108**DCL     10109--REDEF
VX_EFIELD1.CHARS_A
     10109**DCL     12410<>CALL    12455<>CALL    12591<>CALL    12719<>CALL    12864<>CALL    12902<>CALL
     12961<>CALL    12997<>CALL    13023<>CALL    13058<>CALL
VX_EFIELD2.CHARS
     10112**DCL     10113--REDEF
VX_EFIELD2.CHARS_A
     10113**DCL     12965<>CALL    13027<>CALL    13062<>CALL
VX_EFIELD3.CHARS
     10116**DCL     10117--REDEF
VX_EFIELD3.CHARS_A
     10117**DCL     13066<>CALL
VX_EI_KEY_BUF.KEY
     10492**DCL     10493--REDEF
VX_ERRORS
      9553**DCL      9564--REDEF
VX_ERRORS.CONFLICT_A
      9559**DCL      9560--REDEF
VX_ERRORS.UNSAT_A
      9555**DCL      9556--REDEF
VX_FPT_ERRMSG.V.DCB#
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:97   
      8501**DCL     12707<<ASSIGN  12709<<ASSIGN  12711<<ASSIGN  12753<<ASSIGN  12755<<ASSIGN  12757<<ASSIGN
VX_IMAGE_DATA.CPAGE#_A
      8690**DCL      8691--REDEF
VX_IMAGE_DATA.NODE_A$
      8702**DCL      8703--REDEF
VX_IMAGE_DATA.START_A$
      8694**DCL      8695--REDEF
VX_IMAGE_DATA.STOP_A$
      8698**DCL      8699--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8759**DCL      8760--REDEF
VX_IMAGE_DS3.NODE_A$
      8771**DCL      8772--REDEF
VX_IMAGE_DS3.START_A$
      8763**DCL      8764--REDEF
VX_IMAGE_DS3.STOP_A$
      8767**DCL      8768--REDEF
VX_IMAGE_DS4.CPAGE#_A
      8782**DCL      8783--REDEF
VX_IMAGE_DS4.NODE_A$
      8794**DCL      8795--REDEF
VX_IMAGE_DS4.START_A$
      8786**DCL      8787--REDEF
VX_IMAGE_DS4.STOP_A$
      8790**DCL      8791--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8805**DCL      8806--REDEF
VX_IMAGE_DS5.NODE_A$
      8817**DCL      8818--REDEF
VX_IMAGE_DS5.START_A$
      8809**DCL      8810--REDEF
VX_IMAGE_DS5.STOP_A$
      8813**DCL      8814--REDEF
VX_IMAGE_DS6.CPAGE#_A
      8828**DCL      8829--REDEF
VX_IMAGE_DS6.NODE_A$
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:98   
      8840**DCL      8841--REDEF
VX_IMAGE_DS6.START_A$
      8832**DCL      8833--REDEF
VX_IMAGE_DS6.STOP_A$
      8836**DCL      8837--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8851**DCL      8852--REDEF
VX_IMAGE_DS7.NODE_A$
      8863**DCL      8864--REDEF
VX_IMAGE_DS7.START_A$
      8855**DCL      8856--REDEF
VX_IMAGE_DS7.STOP_A$
      8859**DCL      8860--REDEF
VX_IMAGE_DS8.CPAGE#_A
      8874**DCL      8875--REDEF
VX_IMAGE_DS8.NODE_A$
      8886**DCL      8887--REDEF
VX_IMAGE_DS8.START_A$
      8878**DCL      8879--REDEF
VX_IMAGE_DS8.STOP_A$
      8882**DCL      8883--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8713**DCL      8714--REDEF
VX_IMAGE_PROC.NODE_A$
      8725**DCL      8726--REDEF
VX_IMAGE_PROC.START_A$
      8717**DCL      8718--REDEF
VX_IMAGE_PROC.STOP_A$
      8721**DCL      8722--REDEF
VX_IMAGE_ROS.CPAGE#_A
      8736**DCL      8737--REDEF
VX_IMAGE_ROS.NODE_A$
      8748**DCL      8749--REDEF
VX_IMAGE_ROS.START_A$
      8740**DCL      8741--REDEF
VX_IMAGE_ROS.STOP_A$
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:99   
      8744**DCL      8745--REDEF
VX_IO_SAVEPREV
     10133**DCL     12480>>IF      12505>>ASSIGN  12506>>IF      12507<<ASSIGN  12787>>IF      12801<<ASSIGN
VX_IO_SIZEC
     10131**DCL     12526<<ASSIGN  12527>>ASSIGN  12669>>IF      12799<<ASSIGN
VX_IO_SIZEW
     10130**DCL     12527<<ASSIGN  12800<<ASSIGN
VX_IO_STATUS
     10129**DCL     12503<<ASSIGN  12777<<ASSIGN  12781<<ASSIGN  12785<<ASSIGN  12925<<ASSIGN
VX_IO_USEPREV
     10132**DCL     12476>>IF      12479<<ASSIGN
VX_LAST_UTS
     10224**DCL     12534<<ASSIGN  12629>>IF
VX_LIBRARY_PROBE
     10530**DCL     12669>>IF
VX_M_VECTOR.F
      8541**DCL      8545--REDEF
VX_M_VECTOR_DP.F
      8576**DCL      8580--REDEF
VX_O.ACCTN_A$
      9705**DCL      9706--REDEF
VX_O.DCB_MATCH_A$
      9714**DCL      9715--REDEF
VX_O.DCB_MATCH_HIT_A
      9720**DCL      9721--REDEF
VX_O.FIDN_A$
      9699**DCL      9700--REDEF
VX_O.FID_A$
      9691**DCL      9692--REDEF
VX_O.INCLUDE_A$
      9711**DCL      9712--REDEF
VX_O.MAP_A
      9685**DCL      9686--REDEF
VX_O.NODCB_A
      9742**DCL      9743--REDEF
VX_O.NUM_A
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:100  
      9630**DCL      9632--REDEF
VX_O.OPT_A
      9730**DCL      9731--REDEF
VX_O.PRIV_A
      9646**DCL      9648--REDEF
VX_O.SIN_A
      9599**DCL      9600--REDEF
VX_O.TCB_A
      9726**DCL      9727--REDEF
VX_OD.ACCTN_A$
      9903**DCL      9904--REDEF
VX_OD.DCB_MATCH_A$
      9912**DCL      9913--REDEF
VX_OD.FIDN_A$
      9897**DCL      9898--REDEF
VX_OD.FID_A$
      9889**DCL      9890--REDEF
VX_OD.INCLUDE_A$
      9909**DCL      9910--REDEF
VX_OD.MAP_A
      9883**DCL      9884--REDEF
VX_OD.NODCB_A
      9927**DCL      9928--REDEF
VX_OD.NUM_A
      9830**DCL      9831--REDEF
VX_OD.PRIV_A
      9845**DCL      9846--REDEF
VX_OD.SIN_A
      9799**DCL      9800--REDEF
VX_OD.VECTOR_A$
      9918**DCL      9919--REDEF
VX_OF_FPT_READ
     12286**DCL     12391--ASSIGN  12397--ASSIGN
VX_OF_FPT_READ.STATION_
     12289**DCL     12290--REDEF
VX_OF_FPT_READ.V
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:101  
     12290**DCL     12286--DCLINIT
VX_OF_FPT_READ.V.DVBYTE.REREAD#
     12301**DCL     12301--REDEF
VX_OF_FPT_READ.V.INDX#
     12299**DCL     12299--REDEF
VX_OK.KFILE
      8659**DCL     12528<<ASSIGN
VX_OK.KNODE#
      8667**DCL     12690<<ASSIGN  12741<<ASSIGN
VX_OK.KOFSET
      8663**DCL     12578<<ASSIGN  12691<<ASSIGN
VX_OK.KPAGE#
      8662**DCL     12547<<ASSIGN  12555>>IF      12556>>IF      12561<>CALL    12567<<ASSIGN  12692<<ASSIGN
     12743<<ASSIGN
VX_OK.KPEDX
      8668**DCL     12742<<ASSIGN
VX_OK.KRTYPE
      8661**DCL     12547>>IF      12548<<ASSIGN  12549>>IF      12549>>IF      12549>>IF      12573<<ASSIGN
     12574>>IF      12689<<ASSIGN  12691>>IF      12693>>IF      12693>>IF      12693>>IF      12693>>IF
     12719<>CALL    12740<<ASSIGN  12744>>IF      12744>>IF      12961<>CALL    12997<>CALL
VX_OK.KSECT#
      8666**DCL     12577<<ASSIGN
VX_OK.KSEQUENCE
      8665**DCL     12610<<ASSIGN  12612>>IF      12613>>IF      12619<>CALL    12625<<ASSIGN
VX_OK.KSTYPE
      8664**DCL     12579<<ASSIGN  12580>>IF      12591<>CALL
VX_OK.KTYPE
      8660**DCL     12533<<ASSIGN  12540<<ASSIGN  12545<<ASSIGN  12572<<ASSIGN  12672<<ASSIGN  12681<<ASSIGN
     12686<<ASSIGN  12688<<ASSIGN  12739<<ASSIGN  12802<<ASSIGN
VX_OK.OUNAME.CHARS
      8672**DCL     12536<<ASSIGN
VX_OK.OUNAME.COUNT
      8671**DCL     12535<<ASSIGN  12536>>ASSIGN
VX_OL.MAX_A
      9774**DCL      9776--REDEF
VX_OL.MIN_A
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:102  
      9759**DCL      9760--REDEF
VX_ON.ACCTN_A$
     10048**DCL     10050--REDEF
VX_ON.DCB_MATCH_A$
     10059**DCL     10061--REDEF
VX_ON.FIDN_A$
     10041**DCL     10043--REDEF
VX_ON.FID_A$
     10032**DCL     10034--REDEF
VX_ON.INCLUDE_A$
     10055**DCL     10057--REDEF
VX_ON.MAP_A
     10025**DCL     10027--REDEF
VX_ON.NODCB_A$
     10075**DCL     10076--REDEF
VX_ON.NUM_A
      9970**DCL      9972--REDEF
VX_ON.PRIV_A
      9986**DCL      9988--REDEF
VX_ON.SIN_A
      9938**DCL      9940--REDEF
VX_ON.VECTOR_A$
     10066**DCL     10067--REDEF
VX_OUHEAD.VERSION
      9385**DCL      9387--REDEF
VX_OU_HEAD
      9328**DCL      9367--REDEF
VX_OU_HEAD.REC_A
      9340**DCL      9343--REDEF
VX_OU_HEAD.UTS
      9329**DCL     12534>>ASSIGN
VX_O_KEY_BUF
      8588**DCL     12286--DCLINIT 12287--DCLINIT 12436--ASSIGN  12437--ASSIGN  12442--ASSIGN  12443--ASSIGN
     12483<<ASSIGN  12887--ASSIGN  12891--ASSIGN
VX_O_KEY_BUF.FORM0
      8589**DCL      8592--REDEF    8599--REDEF
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:103  
VX_O_KEY_BUF.FORM0.CHARS
      8591**DCL     12511>>ASSIGN
VX_O_KEY_BUF.FORM0.COUNT
      8590**DCL     12510>>ASSIGN
VX_O_KEY_BUF_L
      8611**DCL     12483>>ASSIGN
VX_O_KEY_BUF_L.FORM0
      8612**DCL      8615--REDEF    8622--REDEF
VX_O_KEY_BUF_L.FORM0.CHARS
      8614**DCL     12511<<ASSIGN
VX_O_KEY_BUF_L.FORM0.COUNT
      8613**DCL     12510<<ASSIGN
VX_O_KEY_HEAD
     10147**DCL     12531>>IF
VX_O_KEY_TREE
     10149**DCL     12540>>IF
VX_PASS2_REF.OU.L_START
     10278**DCL     10283--REDEF
VX_PASS2_REF.OU.L_STOP
     10284**DCL     10289--REDEF
VX_PASS2_REF.OU.MAX
     10272**DCL     10277--REDEF
VX_PASS2_REF.OU.SIZE
     10290**DCL     10295--REDEF
VX_PASS2_REF.SAT.COUNT
     10317**DCL     10323--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
     10324**DCL     10330--REDEF
VX_PASS2_REF.SAT.L_START
     10303**DCL     10309--REDEF
VX_PASS2_REF.SAT.L_STOP
     10310**DCL     10316--REDEF
VX_PASS2_REF.SAT.MAX
     10297**DCL     10302--REDEF
VX_PASS2_REF.UNSAT.L_START
     10365**DCL     10370--REDEF
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:104  
VX_PASS2_REF.UNSAT.L_STOP
     10371**DCL     10376--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
     10377**DCL     10382--REDEF
VX_PASS2_REF.UNSAT.MAX
     10359**DCL     10364--REDEF
VX_PASS2_REF.UNSAT.PAGE#
     10389**DCL     10394--REDEF
VX_PASS2_REF.UNSAT.SIZE
     10383**DCL     10388--REDEF
VX_PHRASE.PHRASE
      9791**DCL      9793--REDEF
VX_PROGRAM_BIAS.A
      9569**DCL      9570--REDEF
VX_RF_FPT_READ
     12331**DCL     12394--ASSIGN
VX_RF_FPT_READ.STATION_
     12334**DCL     12335--REDEF
VX_RF_FPT_READ.V
     12335**DCL     12331--DCLINIT
VX_RF_FPT_READ.V.DVBYTE.REREAD#
     12346**DCL     12346--REDEF
VX_RF_FPT_READ.V.INDX#
     12344**DCL     12344--REDEF
VX_R_FPT_WRITE
     12373**DCL     12848--ASSIGN
VX_R_FPT_WRITE.STATION_
     12375**DCL     12375--REDEF
VX_R_FPT_WRITE.V
     12376**DCL     12373--DCLINIT
VX_R_FPT_WRITE.V.DVBYTE.VFC#
     12382**DCL     12382--REDEF
VX_R_KEY_BIRTH
     10151**DCL     12686>>IF
VX_R_KEY_BUF
      8637**DCL     12331--DCLINIT 12332--DCLINIT 12373--DCLINIT 12439--ASSIGN  12440--ASSIGN  12889--ASSIGN
PL6.E3A0      #001=VXI$READ File=VXI$READ.:E05TSI                                WED 07/30/97 08:15 Page:105  
VX_R_KEY_BUF.FORM0
      8638**DCL      8642--REDEF    8648--REDEF
VX_R_KEY_HEAD
     10150**DCL     12681>>IF
VX_SD.A
      8266**DCL      8267--REDEF
VX_SPC.B$.MINE
     10460**DCL     10466--REDEF
VX_SPC.B$.NAME
     10439**DCL     10445--REDEF
VX_SPC.B$.SKIP
     10453**DCL     10459--REDEF
VX_SPC.B$.VALUE
     10446**DCL     10452--REDEF
VX_SPC.SEG.NAME
     10408**DCL     10414--REDEF
VX_SPC.SEG.VALUE
     10415**DCL     10421--REDEF
VX_TSX0_OVERLAY.H
     10183**DCL     10186--REDEF
WRITE_ERROR
     12792**LABEL   12924--CALLALT
