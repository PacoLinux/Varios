

10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        1    
    1      /*M* XSP_ASN1_M - Macros for ASN.1 syntax definitions. */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /*F* NAME: XSP_ASN1_M.
    9           The macros contained in this file are to be used to build
   10           and interpret protocol definitions conforming to the ISO ASN.1
   11           conventions.
   12      */
   13
   14      /*F* name: XSP_ASN1_E
   15           Equates for node types, corresponding where possible to the transfer
   16           syntax encoding values.
   17           Also equates for CP6TYP and DATALGN for the syntax nodes,
   18           and for error codes.
   19      */
   20      %MACRO XSP_ASN1_E;
   21      %EQU XSP_ASN1_BOOLEAN = 1;
   22      %EQU XSP_ASN1_INTEGER = 2;
   23      %EQU XSP_ASN1_BIT_STRING = 3;
   24      %EQU XSP_ASN1_OCTET_STRING = 4;
   25      %EQU XSP_ASN1_NULL = 5;
   26      %EQU XSP_ASN1_OBJECT_IDENTIFIER = 6;
   27      %EQU XSP_ASN1_OBJECT_DESCRIPTOR = 7;
   28      %EQU XSP_ASN1_EXTERNAL = 8;
   29      %EQU XSP_ASN1_RES9 = 9;
   30      %EQU XSP_ASN1_RES10 = 10;
   31      %EQU XSP_ASN1_RES11 = 11;
   32      %EQU XSP_ASN1_RES12 = 12;
   33      %EQU XSP_ASN1_RES13 = 13;
   34      %EQU XSP_ASN1_RES14 = 14;
   35      %EQU XSP_ASN1_RES15 = 15;
   36      %EQU XSP_ASN1_SEQUENCE = 16;
   37      %EQU XSP_ASN1_SET = 17;
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        2    
   38      %EQU XSP_ASN1_NUMERIC_STRING = 18;
   39      %EQU XSP_ASN1_PRINTABLE_STRING = 19;
   40      %EQU XSP_ASN1_TELETEX_STRING = 20;
   41      %EQU XSP_ASN1_T61_STRING = 20;
   42      %EQU XSP_ASN1_VIDEOTEX_STRING = 21;
   43      %EQU XSP_ASN1_IA5_STRING = 22;
   44      %EQU XSP_ASN1_UTC_TIME = 23;
   45      %EQU XSP_ASN1_GENERALIZED_TIME = 24;
   46      %EQU XSP_ASN1_GRAPHIC_STRING = 25;
   47      %EQU XSP_ASN1_VISIBLE_STRING =26;
   48      %EQU XSP_ASN1_ISO646_STRING =26;
   49      %EQU XSP_ASN1_GENERAL_STRING =27;
   50      %EQU XSP_ASN1_CHOICE = 32;
   51      %EQU XSP_ASN1_SEQUENCE_OF = 32+16;
   52      %EQU XSP_ASN1_SET_OF = 32+17;
   53
   54      %EQU XSP_ASN1_UNIVERSAL_TYPE = 0*65536;
   55      %EQU XSP_ASN1_APPLICATION_TYPE = 1*65536;
   56      %EQU XSP_ASN1_CONTEXT_TYPE = 2*65536;
   57      %EQU XSP_ASN1_PRIVATE_TYPE = 3*65536;
   58
   59      %EQU XSP_ASN1_CP6TYP_TEXTC = 1;
   60      %EQU XSP_ASN1_CP6TYP_TEXT = 2;
   61      %EQU XSP_ASN1_CP6TYP_BIT = 3;
   62      %EQU XSP_ASN1_CP6TYP_UBIN = 4;
   63      %EQU XSP_ASN1_CP6TYP_SBIN = 5;
   64      %EQU XSP_ASN1_CP6TYP_UTS = 6;
   65      %EQU XSP_ASN1_CP6TYP_TEXTH = 7;
   66      %EQU XSP_ASN1_CP6TYP_TEXTNB = 8;
   67      %EQU XSP_ASN1_CP6TYP_TEXTFPTSIZ = 9;
   68
   69      %EQU XSP_ASN1_DATALGN_WORD = 0;
   70      %EQU XSP_ASN1_DATALGN_BYTE = 1;
   71      %EQU XSP_ASN1_DATALGN_BIT = 2;
   72
   73      %EQU XSP_ASN1_RCV_PRE = 0;
   74      %EQU XSP_ASN1_RCV_SUCC = 1;
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        3    
   75      %EQU XSP_ASN1_RCV_FAIL = 2;
   76      %EQU XSP_ASN1_SND_PRE = 3;
   77      %EQU XSP_ASN1_SND_SUCC = 4;
   78      %EQU XSP_ASN1_SND_FAIL = 5;
   79
   80      %EQU XSP_ASN1_E$WRONG_TAG = 1;
   81      %EQU XSP_ASN1_E$BAD_LENGTH = 2;
   82      %EQU XSP_ASN1_E$NOT_PRIMARY = 3;
   83      %EQU XSP_ASN1_E$NOT_CONSTRUCTED = 4;
   84      %EQU XSP_ASN1_E$LENGTH_ERR = 5;
   85      %EQU XSP_ASN1_E$BAD_VALUE = 6;
   86      %EQU XSP_ASN1_E$BIG_VALUE = 7;
   87      %EQU XSP_ASN1_E$WONT_FIT = 8;
   88      /* 9 not used yet */
   89      /* 10 not used yet */
   90      %EQU XSP_ASN1_E$NO_TAG = 11;
   91      %EQU XSP_ASN1_E$BIG_TAG = 12;
   92      %EQU XSP_ASN1_E$BIG_LENGTH = 13;
   93      %MEND;
   94
   95
   96      /*F* NAME: XSP_ASN1_N
   97           This macro defines one node of an ASN.1 syntax tree.
   98           Standard parameters for this macro are NAME and STCLASS.
   99      */
  100
  101      %MACRO XSP_ASN1_N (NAME=XSP_ASN1_N,
  102                         TYPE (
  103                    BOOLEAN = 1,
  104                    INTEGER = 2,
  105                    BIT_STRING = 3,
  106                    OCTET_STRING = 4,
  107                    NULL = 5,
  108                    OBJECT_IDENTIFIER = 6,
  109                    OBJECT_DESCRIPTOR = 7,
  110                    EXTERNAL = 8,
  111                    RES9 = 9,
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        4    
  112                    RES10 = 10,
  113                    RES11 = 11,
  114                    RES12 = 12,
  115                    RES13 = 13,
  116                    RES14 = 14,
  117                    RES15 = 15,
  118                    SEQUENCE = 16,
  119                    SET = 17,
  120                    NUMERIC_STRING = 18,
  121                    PRINTABLE_STRING = 19,
  122                    TELETEX_STRING = 20,
  123                    T61_STRING = 20,
  124                    VIDEOTEX_STRING = 21,
  125                    IA5_STRING = 22,
  126                    UTC_TIME = 23,
  127                    GENERALIZED_TIME = 24,
  128                    GRAPHIC_STRING = 25,
  129                    VISIBLE_STRING = 26,
  130                    ISO646_STRING = 26,
  131                    GENERAL_STRING = 27,
  132                    CHOICE = 32,
  133                    SEQUENCE_OF = 32+16,
  134                    SET_OF = 32+17) =0,
  135                    TAG=-1,
  136                    TAGTYPE(APPLICATION=1,APP=1,AP=1,A=1,PRIVATE=3,PR=3,P=3,
  137                    CONTEXT_SPECIFIC=2,CON=2,CO=2,CTX=2,C=2,UNIVERSAL=0)=2,
  138                    FPTID=0,
  139      /* Options for CHOICE, SEQUENCE [OF], SET [OF] nodes */
  140                    SUBNDS="",
  141                    PREFIX="",
  142                    SUFFIX="",
  143                    IMPLICIT(YES='1'B, NO='0'B)='0'B,
  144                    ORDERED(YES='1'B, NO='0'B)='0'B,
  145      /* Options for all but CHOICE nodes */
  146                    OPTIONL(YES='1'B, NO='0'B)='0'B,
  147                    SHORT(YES='1'B, NO='0'B)='0'B,
  148                    TAGR (YES='1'B, NO='0'B)='0'B,
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        5    
  149                    TAGS(YES='1'B, NO='0'B)='0'B,
  150                    PRE(SND='10'B, RCV='01'B, BOTH='11'B, NO='00'B)='00'B,
  151                    SUCC(SND='10'B, RCV='01'B, BOTH='11'B, NO='00'B)='00'B,
  152                    FAIL(SND='10'B, RCV='01'B, BOTH='11'B, NO='00'B)='00'B,
  153                    CONDITION=0,
  154      /* Options for data nodes */
  155                    DEFAULT=,
  156                    VALUE=,
  157                    OFFSET=0,
  158                    SIZE=0,
  159                    SIZELIM=0,
  160                    INCRPTR (YES='1'B, NO='0'B)='0'B,
  161                    IGNORE (YES='1'B, NO='0'B)='0'B,
  162                    CP6TYP (TEXTC=1, TEXT=2, BIT=3, UBIN=4, SBIN=5, UTS=6,
  163                    TEXTH=7, TEXTNB=8, TEXTFPTSIZ=9)=0,
  164                    FPTPTR=0,
  165                    DATALGN (WORD=0, BYTE=1, BIT=2)=0, /* for integer and bit types */
  166                    STCLASS=CONSTANT);
  167      %LSET LISTDIR = '0'B;
  168      %LSET LISTCOM = '0'B;
  169      %LSET LISTEXP = '1'B;
  170      %LSET LISTSUB = '1'B;
  171      %LSET STC=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
  172      %LSET STC=2*BITBIN('STA'=STC OR'CON'=STC OR'EXT'=STC);
  173      %LSET INIT=CHARTEXT(SUBSTR('/*INIT',STC,STC+2));
  174      %LSET ENIT=CHARTEXT(SUBSTR('*/',STC));
  175      DCL 1 NAME STCLASS ALIGNED,
  176         2 %CHARTEXT('TYPE') UBIN(6) UNAL %INIT(%(TYPE))%ENIT,
  177      /*K* TYPE = ASN.1 type - specifies the type of this node */
  178         2 %CHARTEXT('CP6TYP') UBIN(4) UNAL %INIT(%(CP6TYP))%ENIT,
  179      /*K* CP6TYP = option - specifies the form of the data pointed to by FPTPTR and
  180           OFFSET or in DEFAULT or VALUE.  If specified on a SET, SEQUENCE, or
  181           multiple-CHOICE node, CP6TYP is used to specify that this node's data
  182           specifications are to be used to supply the data location for any
  183           primitive subnodes, unless overridden by a similar such specification.
  184           Such usage can be nested to any depth.
  185
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        6    
  186           TEXTC - byte-0 contains the length of the byte string which follows
  187           immediately.
  188
  189           TEXT - byte string whose length is in NAME.SIZE.
  190
  191           BIT - bit string whose length is in NAME.SIZE.  The default size is
  192           one bit, and the maximum size that can be successfully encoded and
  193           decoded is 56 bits.
  194
  195           SBIN or UBIN - signed or unsigned value whose length in bits is in
  196           NAME.SIZE.  The default size is 36 bits.  Only 35 bits plus a sign
  197           bit can be successfully encoded or decoded.
  198
  199           UTS - standard CP-6 time value, treated the same as UBIN.
  200
  201           TEXTH - required to be word-aligned, the first two bytes contain the
  202           length of the byte string that follows immediately.
  203
  204           TEXTNB - byte string whose length is in NAME.SIZE, but whose trailing
  205           blanks are stripped for encoding.
  206
  207           TEXTFPTSIZ - byte string whose size is in FPT.DATSIZ(NAME.FPTPTR+1).
  208      */
  209         2 CONSTRUCTED BIT(1) %INIT(%((TYPE>31)|(TYPE=16)|(TYPE=17)))%ENIT,
  210      /*K* CONSTRUCTED = BIT(1).  Indicates whether the encoding of the node item
  211           is constructed.  This flag is set if, and only if, TYPE is SET, SEQUENCE,
  212           CHOICE, SET_OF, or SEQUENCE_OF. */
  213         2 %CHARTEXT('CONDITION') UBIN(7) UNAL %INIT(%(CONDITION))%ENIT,
  214      %ERROR(CONDITION>71,'*** CONDITION limited to 71');
  215      /*K* CONDITION = VALUE(0-71) - specifies the bit index into FPT.CONDITION to
  216            check for OPTIONL=YES nodes.  See OPTIONL for details. */
  217      %LSET TG=TEXTCHAR(TAG);
  218      %LSET TT=TAGTYPE;
  219      %IF SUBSTR(TG,0,1)='A';
  220       %LSET TG=CHARBIN(SUBSTR(TG,1));
  221       %LSET TT=1;
  222      %ELSEIF SUBSTR(TG,0,1)='C';
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        7    
  223       %LSET TG=CHARBIN(SUBSTR(TG,1));
  224       %LSET TT=2;
  225      %ELSEIF SUBSTR(TG,0,1)='P';
  226       %LSET TG=CHARBIN(SUBSTR(TG,1));
  227       %LSET TT=3;
  228      %ELSE;
  229       %LSET TG=TAG;
  230      %ENDIF;
  231      %ERROR(TG>65535,'*** TAG must fit 16 bits - 65535 maximum value');
  232      %LSET TG=(TG+TT*65536)*BITBIN(TG>=0) + MOD(TYPE,32)*BITBIN(TG<0);
  233         2 %CHARTEXT('TAG') UBIN(18) UNAL %INIT(%TG)%ENIT,
  234         2 TAGBITS REDEF %CHARTEXT('TAG'),
  235           3 TYP UBIN(2) UNAL,
  236           3 VAL UBIN(16) UNAL,
  237      /*K* TAG = VALUE(0-65535) - specifies the tag value associated with the node.
  238           For convenience, CONTEXT, APPLICATION, or PRIVATE tags may be specified
  239           as Cn, An, or Pn, respectively, where "n" is the tag number.  The
  240           default for TAG is the universal tag corresponding to TYPE. */
  241      /*K* TAGTYPE = {APP/LICATION|PR/IVATE|CON/TEXT_SPECIFIC|CTX|UNIVERSAL}.
  242           Can be used to specify the type of TAG if the convenient method
  243           is not used.  Slashes indicate minimum abbreviations.  The default
  244           tagtype is CONTEXT_SPECIFIC. */
  245         2 %CHARTEXT('OPTIONL') BIT(1) %INIT(OPTIONL)%ENIT,
  246      /*K* OPTIONL = {YES|NO} - indicates whether it is a protocol error if this
  247            item is missing in messages.  If OPTIONL=YES, then the item will
  248            be sent if FPT.CONDITION (NODE.CONDITION) is set, and is permitted
  249            to be absent on receipt if FPT.CONDITION (NODE.CONDITION) is reset. */
  250         2 %CHARTEXT('PRE'),
  251            3 SND BIT(1) %INIT(%SUBBIT(PRE,0,1))%ENIT,
  252            3 RCV BIT(1) %INIT(%SUBBIT(PRE,1))%ENIT,
  253      /*K* PRE = {SND|RCV|BOTH|NO} - user subroutine should be called before
  254            constructing or decoding for this node. */
  255         2 %CHARTEXT('SUCC'),
  256            3 SND BIT(1) %INIT(%SUBBIT(SUCC,0,1))%ENIT,
  257            3 RCV BIT(1) %INIT(%SUBBIT(SUCC,1))%ENIT,
  258      /*K* SUCC = {SND|RCV|BOTH|NO} - user subroutine should be called after
  259            constructing or successful decoding for this node. */
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        8    
  260         2 %CHARTEXT('FAIL'),
  261            3 SND BIT(1) %INIT(%SUBBIT(FAIL,0,1))%ENIT,
  262            3 RCV BIT(1) %INIT(%SUBBIT(FAIL,1))%ENIT,
  263      /*K* FAIL = {SND|RCV|BOTH|NO} - user subroutine should be called after
  264            failing to construct or decode for this node. */
  265         2 %CHARTEXT('IMPLICIT') BIT(1) %INIT(IMPLICIT)%ENIT,
  266      /*K* IMPLICIT = {YES|NO} - indicates for a list node (SET or SEQUENCE)
  267            that the tags for subnodes are to be computed by adding the subnode
  268            index to the tag specified for this node.  This node itself is not
  269            present in the transferred data.  ORDERED=YES is implied.
  270            Note that this meaning of implicit is different from that defined
  271            in ISO 8824.  The ISO definition is accomplished in CP-6 by specifying
  272            an XSP_ASN1_TAG node when IMPLICIT is absent. */
  273         2 %CHARTEXT('ORDERED') BIT(1) %INIT(ORDERED)%ENIT,
  274      /*K* ORDERED = {YES|NO} - indicates for a node with multiple subnodes that
  275            the TAG values for the subnodes are computable from the subnode index.
  276            The TAG value for subnode-X must be X+tag_for_subnode_0. */
  277         2 %CHARTEXT('TAGR') BIT(1) %INIT(TAGR)%ENIT,
  278      /*K* TAGR = {YES|NO} - Indicates that the tag of the next decoded item
  279            is to be returned in FPT.TAGS(NODE.FPTID).  Usually used on a CHOICE
  280            node.  Not currently implemented (use FPT.RESULT instead). */
  281         2 %CHARTEXT('TAGS') BIT(1) %INIT(TAGS)%ENIT,
  282      /*K* TAGS = {YES|NO} - Indicates for a CHOICE node that the subnode to be
  283            encoded has as its index the value that would be obtained for this
  284            node if it were a TYPE=INTEGER node.  If TAGS=NO, then the first
  285            subnode that doesn't fail the OPTIONL/CONDITION criteria will be
  286            sent. */
  287         2 %CHARTEXT('SHORT') BIT(1) %INIT(SHORT)%ENIT,
  288      /*K* SHORT = {YES|NO} - indicates for any constructed node that the total
  289            size will not exceed 127 bytes, so the short form for length may
  290            be used.  Message encoding speed is improved if this option is
  291            used when appropriate. */
  292         2 %CHARTEXT('INCRPTR') BIT(1) %INIT(INCRPTR)%ENIT,
  293      /*K* INCRPTR = {YES|NO} - indicates that FPT.DAT$(NODE.FPTPTR) is to be
  294           incremented by SIZELIM after fetching or storing data for this node. */
  295         2 %CHARTEXT('IGNORE') BIT(1) %INIT(IGNORE)%ENIT,
  296      /*K* IGNORE = {YES|NO} - indicates received data is not to be stored anywhere.
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        9    
  297           On a SUCC=RCV entry, XSP$ASN_PARM.P.VAL$ points to such data, and
  298           XSP$ASN1_PARM.SIZE contains its size, in bytes except for bit and
  299           integer data, where it is in bits. */
  300         2 * BIT(1) %INIT('0'B)%ENIT,
  301         2 %CHARTEXT('SIZE') UBIN(8) UNAL %INIT(%(SIZE))%ENIT,
  302      %LSET S=(SIZE>0 AND SUBBIT('41C'X,CP6TYP,1)&'1'B);
  303      %ERROR(S,'*** SIZE must be zero if CP6TYP=TEXTx');
  304      /*K* SIZE = VALUE(0-255) - specifies the size in bits or characters
  305           of the data associated with this node.  See OFFSET and FPTPTR.
  306           SIZE must be zero if CP6TYP is TEXTC, TEXTH, TEXTNB, or TEXTFPTSIZ. */
  307         2 %CHARTEXT('FPTID') UBIN(7) UNAL %INIT(%(FPTID))%ENIT,
  308      %ERROR(FPTID>71,'*** FPTID is limited to 71');
  309      /*K* FPTID = VALUE(0-71) - Specifies which bit in FPT.RESULT to set for
  310            receipt of this node, and in NULLRSLT if the data was NULL */
  311      /* !C! */
  312      %IF SUBSTR(CONCAT(TEXTCHAR(%  SUBNDS),'  '),0,2)=' ';
  313      /* ! ! */
  314       %SET XSP_COMMA_C = COUNT(SUBNDS)-1;
  315       %LSET ZIP=TEXTCHAR(SUBNDS);
  316      %ELSE;
  317       %XSP_COUNT (LIST=SUBNDS);
  318       %LSET ZIP=SUBNDS;
  319      %ENDIF;
  320      %LSET T=BITBIN((XSP_COMMA_C>=0) | (STC=0))+
  321         2*BITBIN(LENGTHC(TEXTCHAR(DEFAULT))>0)+
  322         4*BITBIN(LENGTHC(TEXTCHAR(VALUE))>0);
  323      %LSET L=CHARTEXT(SUBSTR(';,,,,,,,',T,1));
  324         2 NSUBNDS UBIN(6) UNAL %INIT(%(XSP_COMMA_C+1))%ENIT,
  325         2 %CHARTEXT('OFFSET') UBIN(18) UNAL %INIT(%(OFFSET))%ENIT,
  326      /*K* OFFSET = VALUE - specifies the offset from FPT.DAT$(FPTPTR) at
  327           which the data associated with this node is to be fetched or stored.
  328           For integer or bit-string data, OFFSET is specified in the units
  329           indicated by DATALGN.  For all other data, it is in bytes. */
  330         2 DEFAULT_EXISTS BIT(1) %INIT(%(LENGTHC(TEXTCHAR(DEFAULT))>0))%ENIT,
  331      /*K* DEFAULT_EXISTS = BIT(1) indicates that a DEFAULT has been specified.
  332            If the default value matches the value that would be sent for the
  333            node, it is not sent. */
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        10   
  334         2 VALUE_EXISTS BIT(1) %INIT(%(LENGTHC(TEXTCHAR(VALUE))>0))%ENIT,
  335      /*K* VALUE_EXISTS = BIT(1) indicates that a fixed VALUE has been specified */
  336         2 %CHARTEXT('DATALGN') UBIN(2) UNAL %INIT(%(DATALGN))%ENIT,
  337      /*K* DATALGN = {WORD|BYTE|BIT} - specifies the alignment of the data pointed
  338            to by FPTPTR and OFFSET, for integer or bit-string data. */
  339         2 %CHARTEXT('SIZELIM') UBIN(8) UNAL %INIT(%(MAX(SIZELIM,SIZE)))%ENIT,
  340      /*K* SIZELIM = VALUE(0-255) - specifies the amount of space available in
  341           which to store the data associated with this node.  Defaults to SIZE.
  342           If both SIZE and SIZELIM are zero, no data can be stored in receive
  343           mode unless CP6TYP is one of the variable-length text options, in
  344           which case, the effective value for SIZELIM comes from the initial
  345           value in the text-length field.  This is also the only way to indicate
  346           a value for SIZELIM greater than 255. */
  347         2 %CHARTEXT('FPTPTR') UBIN(6) UNAL %INIT(%(FPTPTR))%ENIT%L
  348      /*K* FPTPTR = VALUE(0-63) - specifies which of the FPT.DAT$ pointers to
  349           use for the data associated with this node.  See OFFSET. */
  350      %LSET L=TEXTCHAR(PREFIX SUFFIX);
  351      %IF STC>0;
  352       %IF XSP_COMMA_C>=0;
  353        %LSET L=CHARTEXT(SUBSTR(';;,,,,,,',T,1));
  354        %LSET PRF=CHARTEXT(CONCAT('ADDR(',TEXTCHAR(PREFIX)));
  355        %LSET SUF=CHARTEXT(CONCAT(TEXTCHAR(SUFFIX),')'));
  356         2 *(0:%XSP_COMMA_C) PTR INIT%CHARTEXT('(')
  357          %XSP_NEXT (LIST=%ZIP, PRE=%PRF, POST=%SUF, LAST=")%L");
  358       %ENDIF;
  359       %IF T>1;
  360        %LSET S=MIN(CP6TYP-1,3);
  361        %IF S<0;
  362         %LSET S=3-BITBIN(SUBBIT('DB003E70'X,MOD(TYPE,32),1))
  363          -BITBIN(SUBBIT('03003E70'X,MOD(TYPE,32),1));
  364        %ENDIF;
  365        %LSET D=CHARTEXT(SUBSTR('CHAR(CHAR(BIT (SBIN(',5*S,5));
  366        %LSET S=36*BITBIN(S>1)+SIZE*BITBIN(S=1);
  367        %IF SUBBIT('33'X,T,1)&'1'B;
  368         %IF S=0;
  369          2 * UBIN(9) UNAL INIT(%LENGTHC(DEFAULT)),
  370         %ENDIF;
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        11   
  371         %LSET L=CHARTEXT(SUBSTR(';,',T/4,1));
  372         2 * %D%S) INIT(%(DEFAULT))%L
  373        %ENDIF;
  374        %IF T>3;
  375         %IF S=0;
  376          2 * UBIN(9) UNAL INIT(%LENGTHC(VALUE)),
  377         %ENDIF;
  378         2 * %D%S) INIT(%(VALUE));
  379        %ENDIF;
  380       %ENDIF;
  381      %ELSE;
  382      /*K* SUBNDS = list-of-nodenames.  Specifies, separated by commas, the list
  383           of subnodes for a CHOICE, SET, SET_OF, SEQUENCE, or SEQUENCE_OF node.
  384           Since the preprocessor requires that the substitution-value for SUBNDS
  385           be contained on one line, the PREFIX and SUFFIX options can be used
  386           to shorten the length of the list, and the list can also be specified
  387           as a preprocessor CHAR variable (or expression). */
  388      /*K* PREFIX = text.  The characters comprising PREFIX are added to the
  389           beginning of each item in the SUBNDS list upon expansion. */
  390      /*K* SUFFIX = text.  The characters comprising SUFFIX are added to the
  391           end of each item in the SUBNDS list upon expansion. */
  392         2 SUBND$(0:0) PTR,
  393         2 %CHARTEXT('DEFAULT') REDEF SUBND$ SBIN,
  394         2 DEFAULTB REDEF SUBND$ BIT(36),
  395         2 %CHARTEXT('VALUE')(0:0) REDEF SUBND$ SBIN,
  396         2 VALUEC REDEF SUBND$ CHAR(4),
  397         2 VALUEB(0:0) REDEF SUBND$ BIT(36);
  398      %ENDIF;
  399      %MEND;
  400      %MACRO XSP_NEXT(LIST="",PRE="", POST="",LAST="");
  401      %SET XSP_COMMA_I=0;
  402      %XSP_COMMA(LIST=LIST);
  403      %IF XSP_COMMA_I=LENGTHC(LIST);
  404         PRE%CHARTEXT(LIST)POST LAST
  405      %ELSE;
  406         PRE%CHARTEXT(SUBSTR(LIST,0,XSP_COMMA_I))POST ,
  407      %LSET ZIP=SUBSTR(LIST,XSP_COMMA_I+1);
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        12   
  408         %XSP_NEXT (LIST=%ZIP,PRE=PRE,POST=POST,LAST=LAST);
  409      %ENDIF;
  410      %MEND;
  411      %MACRO XSP_COMMA(LIST="");
  412      %IF XSP_COMMA_I<LENGTHC(LIST);
  413       %IF SUBSTR(LIST,XSP_COMMA_I,1)~=',';
  414         %SET XSP_COMMA_I = XSP_COMMA_I+1;
  415         %XSP_COMMA(LIST=LIST);
  416       %ENDIF;
  417      %ENDIF;
  418      %MEND;
  419      %MACRO XSP_COUNT (LIST="");
  420      %SET XSP_COMMA_C = 0;
  421      %SET XSP_COMMA_I = 0;
  422      %XSP_COUNT1 (LIST=LIST);
  423      %MEND;
  424
  425      %MACRO XSP_COUNT1 (LIST="");
  426      %XSP_COMMA (LIST=LIST);
  427      %IF XSP_COMMA_I<LENGTHC(LIST);
  428       %SET XSP_COMMA_C = XSP_COMMA_C+1;
  429       %SET XSP_COMMA_I = XSP_COMMA_I+1;
  430       %XSP_COUNT1 (LIST=LIST);
  431      %ENDIF;
  432      %MEND;
  433      /*F* NAME: XSP_ASN1_type-nodes.
  434           A number of macros corresponding to commonly used syntax node types
  435           are available to improve legibility.
  436      */
  437      /*K* XSP_ASN1_TAG is used to insert a tag into the protocol, usually
  438           when IMPLICIT is not used in the ASN.1 standard notation.  It
  439           simply invokes XSP_ASN1_N with TYPE=CHOICE.  All normal options are
  440           available except that SUBNDS is spelled SUBND, since only one is
  441           expected.
  442      */
  443      %MACRO XSP_ASN1_TAG (NAME=, STCLASS=CONSTANT, SUBND=, OPTIONL(YES='1'B,
  444             NO='0'B)='0'B, TAG=-1, CONDITION=0,
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        13   
  445             INCRPTR (YES='1'B, NO='0'B)='0'B, IGNORE(YES='1'B, NO='0'B)='0'B,
  446             TAGTYPE (APPLICATION=1, APP=1,AP=1,A=1, PRIVATE=3, PR=3,P=3,
  447             CONTEXT_SPECIFIC=2, CON=2,CTX=2,C=2, UNIVERSAL=0)=2,
  448             FPTID=0,
  449             SHORT(YES='1'B, NO='0'B)='0'B,
  450             TAGR (YES='1'B, NO='0'B)='0'B,
  451             DEFAULT=,
  452             VALUE=,
  453             OFFSET=0,
  454             SIZE=0,
  455             SIZELIM=0,
  456             CP6TYP (TEXTC=1, TEXT=2, BIT=3, UBIN=4, SBIN=5, UTS=6, TEXTH=7, TEXTNB=8, TEXTFPTSIZ=9)=0,
  457             FPTPTR=0,
  458             PRE(SND='10'B, RCV='01'B, BOTH='11'B, NO='00'B)='00'B, SUCC(SND='10'B,
  459             RCV='01'B, BOTH='11'B, NO='00'B)='00'B, FAIL(SND='10'B, RCV='01'B,
  460             BOTH='11'B, NO='00'B)='00'B,
  461             DATALGN (WORD=0, BYTE=1, BIT=2)=0);
  462
  463      %XSP_ASN1_N (NAME=NAME, STCLASS=STCLASS, TYPE=CHOICE, SUBNDS=SUBND, TAG=TAG,
  464                  TAGTYPE=TAGTYPE, FPTID=FPTID, SHORT=SHORT, TAGR=TAGR,
  465                  DEFAULT=DEFAULT, VALUE=VALUE, OFFSET=OFFSET, SIZE=SIZE,
  466                  INCRPTR=INCRPTR, IGNORE=IGNORE, PRE=PRE, SUCC=SUCC, FAIL=FAIL,
  467                  SIZELIM=SIZELIM, FPTPTR=FPTPTR, DATALGN=DATALGN, CP6TYP=CP6TYP,
  468                  OPTIONL=OPTIONL, CONDITION=CONDITION);
  469      %MEND;
  470
  471      /*K* XSP_ASN1_CHOICE invokes XSP_ASN1_N with TYPE=CHOICE.
  472           The index of the SUBND to be sent can be specified as a UBIN data
  473           value for this node if TAGS=YES.  Otherwise, an attempt is made to
  474           send each SUBND until one actually gets sent (any PRE=SND call returns
  475           normally, and any OPTIONL CONDITION is met).  If TAGS=NO or there
  476           is only one SUBND, this node can be used to specify the location
  477           of data for its subnodes, by specifying CP6TYP and the other data
  478           value options.  To accomplish the same function while at the same
  479           time indicating with a data value which SUBND to send (TAGS=YES), a
  480           CHOICE node with only this node as a SUBND should be used to contain
  481           the data value options for the subnodes.
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        14   
  482      */
  483      %MACRO XSP_ASN1_CHOICE (NAME=, STCLASS=CONSTANT, SUBNDS=, OPTIONL(YES='1'B,
  484             NO='0'B)='0'B, IMPLICIT(YES='1'B, NO='0'B)='0'B, CONDITION=0,
  485             TAGTYPE (APPLICATION=1, APP=1,AP=1,A=1, PRIVATE=3, PR=3,P=3,
  486             CONTEXT_SPECIFIC=2, CON=2,CTX=2,C=2, UNIVERSAL=0)=2,
  487             SHORT(YES='1'B, NO='0'B)='0'B,
  488             TAGR (YES='1'B, NO='0'B)='0'B,
  489             TAGS(YES='1'B, NO='0'B)='0'B,
  490             INCRPTR (YES='1'B, NO='0'B)='0'B, IGNORE(YES='1'B, NO='0'B)='0'B,
  491             DEFAULT=, VALUE=, OFFSET=0, SIZE=0, SIZELIM=0,
  492             CP6TYP (TEXTC=1, TEXT=2, BIT=3, UBIN=4, SBIN=5, UTS=6, TEXTH=7, TEXTNB=8, TEXTFPTSIZ=9)=0,
  493             DATALGN (WORD=0, BYTE=1, BIT=2)=0, FPTPTR=0,
  494             ORDERED(YES='1'B, NO='0'B)='0'B, TAG=-1, FPTID=0, PRE(SND='10'B,
  495             RCV='01'B, BOTH='11'B, NO='00'B)='00'B, SUCC(SND='10'B, RCV='01'B,
  496             BOTH='11'B, NO='00'B)='00'B, FAIL(SND='10'B, RCV='01'B, BOTH='11'B,
  497             NO='00'B)='00'B, PREFIX=, SUFFIX=);
  498
  499      %LSET LISTDIR='0'B;
  500      %XSP_ASN1_N (NAME=NAME, STCLASS=STCLASS, TYPE=CHOICE, SUBNDS=SUBNDS, TAG=TAG,
  501                  IMPLICIT=IMPLICIT, OPTIONL=OPTIONL, ORDERED=ORDERED, TAGR=TAGR,
  502                  TAGTYPE=TAGTYPE, FPTID=FPTID, SHORT=SHORT, CP6TYP=CP6TYP,
  503                  DEFAULT=DEFAULT, VALUE=VALUE, OFFSET=OFFSET, SIZE=SIZE, TAGS=TAGS,
  504                  SIZELIM=SIZELIM, FPTPTR=FPTPTR, DATALGN=DATALGN,
  505                  INCRPTR=INCRPTR, IGNORE=IGNORE, PRE=PRE, SUCC=SUCC, FAIL=FAIL,
  506                  CONDITION=CONDITION, PREFIX=PREFIX, SUFFIX=SUFFIX);
  507      %MEND;
  508
  509      /*K* XSP_ASN1_SET invokes XSP_ASN1_N with TYPE=SET.
  510      */
  511      %MACRO XSP_ASN1_SET (NAME=, STCLASS=CONSTANT, SUBNDS=, OPTIONL(YES='1'B,
  512             NO='0'B)='0'B, CONDITION=0, IMPLICIT(YES='1'B, NO='0'B)='0'B,
  513             TAGTYPE (APPLICATION=1, APP=1,AP=1,A=1, PRIVATE=3, PR=3,P=3,
  514             CONTEXT_SPECIFIC=2, CON=2,CTX=2,C=2, UNIVERSAL=0)=2,
  515             INCRPTR (YES='1'B, NO='0'B)='0'B, IGNORE(YES='1'B, NO='0'B)='0'B,
  516             DEFAULT=, VALUE=, OFFSET=0, SIZE=0, SIZELIM=0,
  517             CP6TYP (TEXTC=1, TEXT=2, BIT=3, UBIN=4, SBIN=5, UTS=6, TEXTH=7, TEXTNB=8, TEXTFPTSIZ=9)=0,
  518             DATALGN (WORD=0, BYTE=1, BIT=2)=0, FPTPTR=0,
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        15   
  519             SHORT(YES='1'B, NO='0'B)='0'B,
  520             TAGR (YES='1'B, NO='0'B)='0'B,
  521             ORDERED(YES='1'B, NO='0'B)='0'B, TAG=-1, FPTID=0, PRE(SND='10'B,
  522             RCV='01'B, BOTH='11'B, NO='00'B)='00'B, SUCC(SND='10'B, RCV='01'B,
  523             BOTH='11'B, NO='00'B)='00'B, FAIL(SND='10'B, RCV='01'B, BOTH='11'B,
  524             NO='00'B)='00'B, PREFIX=, SUFFIX=);
  525
  526      %LSET LISTDIR='0'B;
  527      %XSP_ASN1_N (NAME=NAME, STCLASS=STCLASS, TYPE=SET, SUBNDS=SUBNDS,
  528                  IMPLICIT=IMPLICIT, OPTIONL=OPTIONL, ORDERED=ORDERED, SHORT=SHORT,
  529                  CONDITION=CONDITION, TAG=TAG, PRE=PRE, SUCC=SUCC, FAIL=FAIL,
  530                  DEFAULT=DEFAULT, VALUE=VALUE, OFFSET=OFFSET, SIZE=SIZE,
  531                  INCRPTR=INCRPTR, IGNORE=IGNORE,
  532                  SIZELIM=SIZELIM, FPTPTR=FPTPTR, DATALGN=DATALGN, CP6TYP=CP6TYP,
  533                  TAGTYPE=TAGTYPE, TAGR=TAGR,
  534                  FPTID=FPTID, PREFIX=PREFIX, SUFFIX=SUFFIX);
  535      %MEND;
  536
  537      /*K* XSP_ASN1_SET_OF invokes XSP_ASN1_N with TYPE=SET_OF.
  538           SUBNDS is spelled SUBND, since only one subnode is permitted.
  539           The number of times SUBND is sent is obtained from the data value,
  540           which is presumed to be UBIN unless CP6TYP=SBIN is specified.
  541           Negative values are treated as zero.  On receipt, the data value
  542           stored is the number of times the SUBND was included in the message,
  543           unless CP6TYP=IGNORE was specified, in which case no value is stored.
  544      */
  545      %MACRO XSP_ASN1_SET_OF (NAME=, STCLASS=CONSTANT, SUBND=, OPTIONL(YES='1'B,
  546             NO='0'B)='0'B, CONDITION=0,
  547             TAGTYPE (APPLICATION=1, APP=1,AP=1,A=1, PRIVATE=3, PR=3,P=3,
  548             CONTEXT_SPECIFIC=2, CON=2,CTX=2,C=2, UNIVERSAL=0)=2,
  549             INCRPTR (YES='1'B, NO='0'B)='0'B, IGNORE(YES='1'B, NO='0'B)='0'B,
  550             OFFSET=0, SIZE=0, SIZELIM=0,
  551             CP6TYP (UBIN=4, SBIN=5, IGNORE=0)=4, VALUE=,
  552             DATALGN (WORD=0, BYTE=1, BIT=2)=0, FPTPTR=0,
  553             SHORT(YES='1'B, NO='0'B)='0'B,
  554             TAGR (YES='1'B, NO='0'B)='0'B,
  555             ORDERED(YES='1'B, NO='0'B)='0'B, TAG=-1, FPTID=0, PRE(SND='10'B,
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        16   
  556             RCV='01'B, BOTH='11'B, NO='00'B)='00'B, SUCC(SND='10'B, RCV='01'B,
  557             BOTH='11'B, NO='00'B)='00'B, FAIL(SND='10'B, RCV='01'B, BOTH='11'B,
  558             NO='00'B)='00'B);
  559
  560      %LSET LISTDIR='0'B;
  561      %XSP_ASN1_N (NAME=NAME, STCLASS=STCLASS, TYPE=SET_OF, SUBNDS=SUBND,
  562                  OPTIONL=OPTIONL, ORDERED=ORDERED, SHORT=SHORT,
  563                  CONDITION=CONDITION, TAG=TAG, PRE=PRE, SUCC=SUCC, FAIL=FAIL,
  564                  OFFSET=OFFSET, SIZE=SIZE, INCRPTR=INCRPTR, IGNORE=IGNORE,
  565                  SIZELIM=SIZELIM, FPTPTR=FPTPTR, DATALGN=DATALGN, CP6TYP=CP6TYP,
  566                  VALUE=VALUE, FPTID=FPTID, TAGTYPE=TAGTYPE, TAGR=TAGR);
  567      %MEND;
  568
  569      /*K* XSP_ASN1_SEQUENCE invokes XSP_ASN1_N with TYPE=SEQUENCE.
  570      */
  571      %MACRO XSP_ASN1_SEQUENCE (NAME=, STCLASS=CONSTANT, SUBNDS=, OPTIONL(YES='1'B,
  572             NO='0'B)='0'B, IMPLICIT(YES='1'B, NO='0'B)='0'B, CONDITION=0,
  573             TAGTYPE (APPLICATION=1, APP=1,AP=1,A=1, PRIVATE=3, PR=3,P=3,
  574             CONTEXT_SPECIFIC=2, CON=2,CTX=2,C=2, UNIVERSAL=0)=2,
  575             INCRPTR (YES='1'B, NO='0'B)='0'B, IGNORE(YES='1'B, NO='0'B)='0'B,
  576             DEFAULT=, VALUE=, OFFSET=0, SIZE=0, SIZELIM=0,
  577             CP6TYP (TEXTC=1, TEXT=2, BIT=3, UBIN=4, SBIN=5, UTS=6, TEXTH=7, TEXTNB=8, TEXTFPTSIZ=9)=0,
  578             DATALGN (WORD=0, BYTE=1, BIT=2)=0, FPTPTR=0,
  579             SHORT(YES='1'B, NO='0'B)='0'B,
  580             TAGR (YES='1'B, NO='0'B)='0'B,
  581             ORDERED(YES='1'B, NO='0'B)='0'B, TAG=-1, FPTID=0, PRE(SND='10'B,
  582             RCV='01'B, BOTH='11'B, NO='00'B)='00'B, SUCC(SND='10'B, RCV='01'B,
  583             BOTH='11'B, NO='00'B)='00'B, FAIL(SND='10'B, RCV='01'B, BOTH='11'B,
  584             NO='00'B)='00'B, PREFIX=, SUFFIX=);
  585
  586      %LSET LISTDIR='0'B;
  587      %XSP_ASN1_N (NAME=NAME, STCLASS=STCLASS, TYPE=SEQUENCE, SUBNDS=SUBNDS,
  588                  IMPLICIT=IMPLICIT, OPTIONL=OPTIONL, ORDERED=ORDERED, SHORT=SHORT,
  589                  CONDITION=CONDITION, TAG=TAG, PRE=PRE, SUCC=SUCC, FAIL=FAIL,
  590                  TAGTYPE=TAGTYPE, TAGR=TAGR, DEFAULT=DEFAULT, VALUE=VALUE,
  591                  OFFSET=OFFSET, SIZE=SIZE, INCRPTR=INCRPTR, IGNORE=IGNORE,
  592                  SIZELIM=SIZELIM, FPTPTR=FPTPTR, DATALGN=DATALGN, CP6TYP=CP6TYP,
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        17   
  593                  FPTID=FPTID, PREFIX=PREFIX, SUFFIX=SUFFIX);
  594      %MEND;
  595
  596      /*K* XSP_ASN1_SEQUENCE_OF invokes XSP_ASN1_N with TYPE=SEQUENCE_OF.
  597           SUBNDS is spelled SUBND, since only one subnode is permitted.
  598           The number of times SUBND is sent is obtained from the data value,
  599           which is presumed to be UBIN unless CP6TYP=SBIN is specified.
  600           Negative values are treated as zero.  On receipt, the data value
  601           stored is the number of times the SUBND was included in the message,
  602           unless CP6TYP=IGNORE was specified, in which case no value is stored.
  603      */
  604      %MACRO XSP_ASN1_SEQUENCE_OF (NAME=, STCLASS=CONSTANT, SUBND=,
  605             OPTIONL(YES='1'B, NO='0'B)='0'B,
  606             TAGTYPE (APPLICATION=1, APP=1,AP=1,A=1, PRIVATE=3, PR=3,P=3,
  607             CONTEXT_SPECIFIC=2, CON=2,CTX=2,C=2, UNIVERSAL=0)=2,
  608             INCRPTR (YES='1'B, NO='0'B)='0'B, IGNORE(YES='1'B, NO='0'B)='0'B,
  609             OFFSET=0, SIZE=0, SIZELIM=0,
  610             CP6TYP (UBIN=4, SBIN=5, IGNORE=0)=4, VALUE=,
  611             DATALGN (WORD=0, BYTE=1, BIT=2)=0, FPTPTR=0,
  612             SHORT(YES='1'B, NO='0'B)='0'B,
  613             TAGR (YES='1'B, NO='0'B)='0'B,
  614             CONDITION=0, ORDERED(YES='1'B, NO='0'B)='0'B, TAG=-1, FPTID=0,
  615             PRE(SND='10'B, RCV='01'B, BOTH='11'B, NO='00'B)='00'B, SUCC(SND='10'B,
  616             RCV='01'B, BOTH='11'B, NO='00'B)='00'B, FAIL(SND='10'B, RCV='01'B,
  617             BOTH='11'B, NO='00'B)='00'B);
  618
  619      %LSET LISTDIR='0'B;
  620      %XSP_ASN1_N (NAME=NAME, STCLASS=STCLASS, TYPE=SEQUENCE_OF, SUBNDS=SUBND,
  621                  OPTIONL=OPTIONL, ORDERED=ORDERED, SHORT=SHORT,
  622                  CONDITION=CONDITION, TAG=TAG, PRE=PRE, SUCC=SUCC, FAIL=FAIL,
  623                  OFFSET=OFFSET, SIZE=SIZE, INCRPTR=INCRPTR, IGNORE=IGNORE,
  624                  SIZELIM=SIZELIM, FPTPTR=FPTPTR, DATALGN=DATALGN, CP6TYP=CP6TYP,
  625                  VALUE=VALUE, FPTID=FPTID, TAGTYPE=TAGTYPE, TAGR=TAGR);
  626      %MEND;
  627
  628      /*K* XSP_ASN1_BOOLEAN invokes XSP_ASN1_N with TYPE=BOOLEAN.
  629      */
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        18   
  630      %MACRO XSP_ASN1_BOOLEAN (NAME=, STCLASS=CONSTANT, OPTIONL(YES='1'B,
  631             NO='0'B)='0'B, CONDITION=0, FPTPTR=0, IGNORE(YES='1'B, NO='0'B)='0'B,
  632             INCRPTR (YES='1'B, NO='0'B)='0'B,
  633             SIZE=0, SIZELIM=0,
  634             CP6TYP (BIT=3, IGNORE=0)=3,
  635             DATALGN (WORD=0, BYTE=1, BIT=2)=2,
  636             OFFSET=0, DEFAULT(TRUE='1'B, FALSE='0'B)=, TAG=-1, FPTID=0,
  637             TAGTYPE (APPLICATION=1, APP=1,AP=1,A=1, PRIVATE=3, PR=3,P=3,
  638             CONTEXT_SPECIFIC=2, CON=2,CTX=2,C=2, UNIVERSAL=0)=2,
  639             TAGR (YES='1'B, NO='0'B)='0'B, VALUE (TRUE='1'B, FALSE='0'B)=,
  640             PRE(SND='10'B, RCV='01'B, BOTH='11'B, NO='00'B)='00'B, SUCC(SND='10'B,
  641             RCV='01'B, BOTH='11'B, NO='00'B)='00'B, FAIL(SND='10'B, RCV='01'B,
  642             BOTH='11'B, NO='00'B)='00'B);
  643
  644      %LSET LISTDIR='0'B;
  645      %XSP_ASN1_N (NAME=NAME, STCLASS=STCLASS, TYPE=BOOLEAN, DEFAULT=DEFAULT,
  646                  FPTPTR=FPTPTR, OFFSET=OFFSET, OPTIONL=OPTIONL,
  647                  CONDITION=CONDITION, TAG=TAG, PRE=PRE, SUCC=SUCC, FAIL=FAIL,
  648                  SIZE=SIZE, INCRPTR=INCRPTR, IGNORE=IGNORE,
  649                  SIZELIM=SIZELIM, DATALGN=DATALGN, CP6TYP=CP6TYP,
  650                  TAGTYPE=TAGTYPE, VALUE=VALUE, TAGR=TAGR, FPTID=FPTID);
  651      %MEND;
  652
  653      /*K* XSP_ASN1_INTEGER invokes XSP_ASN1_N with TYPE=INTEGER.
  654      */
  655      %MACRO XSP_ASN1_INTEGER (NAME=, STCLASS=CONSTANT, OPTIONL(YES='1'B,
  656             NO='0'B)='0'B, CONDITION=0, FPTPTR=0, IGNORE(YES='1'B, NO='0'B)='0'B,
  657             TAGTYPE (APPLICATION=1, APP=1,AP=1,A=1, PRIVATE=3, PR=3,P=3,
  658             CONTEXT_SPECIFIC=2, CON=2,CTX=2,C=2, UNIVERSAL=0)=2,
  659             TAGR (YES='1'B, NO='0'B)='0'B, INCRPTR (YES='1'B, NO='0'B)='0'B,
  660             SIZELIM=0, DATALGN (WORD=0, BYTE=1, BIT=2)=0,
  661             CP6TYP (UBIN=4, SBIN=5, IGNORE=0)=4,
  662             OFFSET=0, DEFAULT=, TAG=-1, SIZE=0, FPTID=0, VALUE=,
  663             PRE(SND='10'B, RCV='01'B, BOTH='11'B, NO='00'B)='00'B, SUCC(SND='10'B,
  664             RCV='01'B, BOTH='11'B, NO='00'B)='00'B, FAIL(SND='10'B, RCV='01'B,
  665             BOTH='11'B, NO='00'B)='00'B);
  666
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        19   
  667      %LSET LISTDIR='0'B;
  668      %XSP_ASN1_N (NAME=NAME, STCLASS=STCLASS, TYPE=INTEGER, DEFAULT=DEFAULT,
  669                  DATALGN=DATALGN, SIZE=SIZE, FPTPTR=FPTPTR, SIZELIM=SIZELIM,
  670                  OFFSET=OFFSET, OPTIONL=OPTIONL, CONDITION=CONDITION, TAG=TAG,
  671                  TAGTYPE=TAGTYPE, TAGR=TAGR, CP6TYP=CP6TYP, INCRPTR=INCRPTR,
  672                  IGNORE=IGNORE, PRE=PRE, SUCC=SUCC, FAIL=FAIL, FPTID=FPTID,
  673                  VALUE=VALUE);
  674      %MEND;
  675
  676      /*K* XSP_ASN1_TIME invokes XSP_ASN1_N with TYPE=GENERALIZED_TIME
  677           unless TYPE=UTC_TIME is specified.
  678      */
  679      %MACRO XSP_ASN1_TIME (NAME=, TYPE(GENERALIZED_TIME=24, UTC_TIME=23)=24,
  680             STCLASS=CONSTANT, IGNORE(YES='1'B, NO='0'B)='0'B, OPTIONL(YES='1'B,
  681             NO='0'B)='0'B, CONDITION=0, FPTPTR=0, OFFSET=0, DEFAULT=, VALUE=,
  682             TAGTYPE (APPLICATION=1, APP=1,AP=1,A=1, PRIVATE=3, PR=3,P=3,
  683             CONTEXT_SPECIFIC=2, CON=2,CTX=2,C=2, UNIVERSAL=0)=2,
  684             TAGR (YES='1'B, NO='0'B)='0'B, INCRPTR (YES='1'B, NO='0'B)='0'B,
  685             SIZELIM=0, DATALGN (WORD=0, BYTE=1, BIT=2)=0,
  686             CP6TYP (TEXTC=1, TEXT=2, UTS=6, TEXTH=7, TEXTNB=8, TEXTFPTSIZ=9)=6,
  687             TAG=-1, SIZE=0, FPTID=0, PRE(SND='10'B, RCV='01'B, BOTH='11'B,
  688             NO='00'B)='00'B, SUCC(SND='10'B, RCV='01'B, BOTH='11'B, NO='00'B)='00'B,
  689             FAIL(SND='10'B, RCV='01'B, BOTH='11'B, NO='00'B)='00'B);
  690
  691      %LSET LISTDIR='0'B;
  692      %XSP_ASN1_N (NAME=NAME, STCLASS=STCLASS, TYPE=TYPE, DEFAULT=DEFAULT, TAGR=TAGR,
  693                  SIZE=SIZE, FPTPTR=FPTPTR, OFFSET=OFFSET, INCRPTR=INCRPTR,
  694                  OPTIONL=OPTIONL, CP6TYP=CP6TYP, CONDITION=CONDITION, TAG=TAG,
  695                  TAGTYPE=TAGTYPE, SIZELIM=SIZELIM, IGNORE=IGNORE,
  696                  PRE=PRE, SUCC=SUCC, FAIL=FAIL, VALUE=VALUE, FPTID=FPTID);
  697      %MEND;
  698      /*F* NAME: XSP$ASN1_PARM.
  699           describes the parameter passed to FPT.UENTRY$ when called for
  700           PRE-, SUCC-, or FAIL- processing for a syntax node.  It is
  701           also used internally by XSP$SEND and XSP$RECV to control the
  702           recursive aspects of the process, so care should be taken to
  703           modify only those portions indicated as being modifyable by the
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        20   
  704           user.  Standard parameters for this macro are NAME and STCLASS.
  705      */
  706      %MACRO XSP$ASN1_PARM (NAME=XSP$ASN1_PARM, STCLASS=PARAM, PNAME=P,
  707         PTRONLY(YES='1'B, NO='0'B)='0'B);
  708      %LSET LISTDIR = '0'B;
  709      %LSET LISTCOM = '0'B;
  710      %LSET LISTEXP = '1'B;
  711      %LSET LISTSUB = '1'B;
  712      %LSET STC=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
  713      %LSET STC=2*BITBIN('STA'=STC OR'CON'=STC OR'EXT'=STC);
  714      %LSET INIT=CHARTEXT(SUBSTR('/*INIT',STC,STC+2));
  715      %LSET ENIT=CHARTEXT(SUBSTR('*/',STC));
  716      %IF PTRONLY;
  717      DCL 1 PNAME STCLASS ALIGNED,
  718      %LSET L2=2;
  719      %ELSE;
  720      DCL 1 NAME STCLASS ALIGNED,
  721      %LSET L2=3;
  722         2 PNAME,
  723      /*K* PNAME = name.  Specifies the name of a substructure containing pointers
  724           used by the routines.  The default name is P.
  725      */
  726      /*K* PTRONLY = {YES|NO} is used internally to declare a structure
  727           consisting only of the PNAME substructure.
  728      */
  729      %ENDIF;
  730      %LSET LAST=CHARTEXT(SUBSTR(';,',L2-2,1));
  731         %L2 NODE$ PTR %INIT(ADDR(NIL))%ENIT,
  732      /*K* PNAME.NODE$ = POINTER.  Points to the syntax node that caused the
  733           invokation of FPT.UENTRY$.  This pointer should not be modified.
  734      */
  735         %L2 BUF$ PTR %INIT(ADDR(NIL))%ENIT,
  736      /*K* PNAME.BUF$ = POINTER.   Is a copy of FPT.BUF$ and should not be
  737           modified.
  738      */
  739         %L2 FPT$ PTR %INIT(ADDR(NIL))%ENIT,
  740      /*K* PNAME.FPT$ = POINTER.  Points to the FPT and should not be modified.
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        21   
  741      */
  742         %L2 VAL$ PTR %INIT(ADDR(NIL))%ENIT,
  743      /*K* PNAME.VAL$ = POINTER.  For PRE=SND invokations of FPT.UENTRY$, this
  744           pointer can be used to supply the address of any byte string data
  745           or a word-aligned word of bit or binary data.  Its value is restored
  746           to ADDR(NIL) after every PRE=SND call, and should not otherwise be
  747           used.  For byte-string and bit data, SIZE in the PNAME.VNODE$ node
  748           still supplies the string length.  For byte-string and binary data,
  749           CP6TYP in that node is also used if SIZE=0 or CP6TYP=SBIN,
  750           respectively.
  751
  752           For SUCC=RCV calls for nodes with IGNORE=YES, PNAME.VAL$ points to
  753           the data that was received, and SIZE contains its size.  SIZE is
  754           in bits for integer or bit-string data, and in bytes otherwise.
  755      */
  756         %L2 VNODE$ PTR %INIT(ADDR(NIL))%ENIT%LAST
  757      /*K* PNAME.VNODE$ = POINTER.  Is used to implement the data override
  758           facility described in the CP6TYP parameter of XSP_ASN1_N.  It
  759           can usefully be modified by FPT.UENTRY$ routines to supply the
  760           data for the subnodes of a node specifying PRE processing.  It
  761           could be pointed at any arbitrary node, even one built at runtime.
  762      */
  763      %IF NOT PTRONLY;
  764         2 IMPLICIT BIT(1)%INIT('0'B)%ENIT,
  765      /*K* IMPLICIT = BIT.  Is used internally for the node parameter of
  766           the same name, and should not be modified.
  767      */
  768         2 TAGC BIT(1)%INIT('0'B)%ENIT,
  769      /*K* TAGC= BIT.  Is the value of the constructed flag in the most
  770           recently parsed tag.  It should not be modified.
  771      */
  772         2 PARSED BIT(1)%INIT('1'B)%ENIT,
  773      /*K* PARSED = BIT.  Is used internally and should not be modified.
  774      */
  775         2 USR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  776      /*K* USR = VALUE.  Contains the FPT.UENTRY$ invokation reason, and is
  777           an EQU from XSP_ASN1_E, of the form XSP_ASN1_fnc_typ, where fnc
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        22   
  778           is either RCV or SND, and typ is one of PRE, SUCC, or FAIL.
  779      */
  780         2 ABORT REMEMBER,
  781      /*K* ABORT = REMEMBER.  Is used internally to abort gracefully from
  782           an attempt to send more than the buffer can hold.
  783      */
  784         2 ERR SBIN %INIT(0)%ENIT,
  785      /*K* ERR = SBIN.  Is used to report error conditions.  In RCV_FAIL
  786           processing, it contains the reason for failure and is an EQU
  787           from XSP_ASN1_E of the form XSP_ASN1_E$reason.  If zero on RCV_FAIL,
  788           the node was not required either because a default value is
  789           permitted, or because the node is optional.
  790      */
  791         2 NXTX SBIN %INIT(0)%ENIT,
  792      /*K* NXTX = SBIN.  Contains the byte index into the buffer of the next
  793           unparsed or unused byte of transport protocol data.  It should not
  794           be modified.
  795      */
  796         2 SIZE SBIN %INIT(0)%ENIT,
  797      /*K* SIZE = SBIN.  Contains the length field upon successfully parsing
  798           a tag/length protocol element.  It should not be modified during
  799           XSP$RECV calls, but is unused internally during XSP$SEND.
  800      */
  801         2 TAG SBIN %INIT(0)%ENIT,
  802      /*K* TAG = SBIN.  Contains the tag value upon successfully parsing
  803           a tag/length protocol element.  It should not be modified during
  804           XSP$RECV calls, but is unused internally during XSP$SEND.
  805           The value is the tag value added to the tag-type shifted 16 bits
  806           with the constructed flag removed (the same format as is used in
  807           XSP_ASN1_N.TAG).
  808      */
  809         2 MAXX SBIN %INIT(0)%ENIT;
  810      /*K* MAXX = SBIN.  Contains the size of the buffer and should not be
  811           modified.  Unless the buffer size is changed, of course.
  812      */
  813      %ENDIF;
  814      %MEND;
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        23   
  815      /*F* NAME: XSP_ASN1_FPT.
  816           describes the FPT passed to XSP$SEND when called to encode an ASN.1
  817           message, or passed to XSP$RECV to parse one.  Standard parameters
  818           for this macro are FPTN, STCLASS, LVL, and LAST.
  819      */
  820      %MACRO XSP_ASN1_FPT (FPTN=XSP_ASN1_FPT, STCLASS=STATIC, LVL=1,
  821         LAST(YES=";",NO=",")=";",
  822         TOPNODE=NIL, UENTRY=NIL, DATVECS=1, CONDITION='1'B, DAT=NIL);
  823      %LSET LISTDIR = '0'B;
  824      %LSET LISTCOM = '0'B;
  825      %LSET LISTEXP = '1'B;
  826      %LSET LISTSUB = '1'B;
  827      %LSET STC=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
  828      %LSET STC=2*BITBIN('STA'=STC OR'CON'=STC OR'EXT'=STC);
  829      %LSET INIT=CHARTEXT(SUBSTR('/*INIT',STC,STC+2));
  830      %LSET ENIT=CHARTEXT(SUBSTR('*/',STC));
  831      %IF LVL=1;
  832      DCL 1 FPTN STCLASS ALIGNED,
  833      %ELSE;
  834         LVL FPTN ALIGNED,
  835      %ENDIF;
  836         %(LVL+1) TOPNODE$ PTR %INIT(ADDR(TOPNODE))%ENIT,
  837      /*K* TOPNODE = VARIABLE.  Specifies the address of the top node of
  838         the syntax tree defining the message to be parsed or encoded.
  839         Such a tree is built with invocations of XSP_ASN1_N and its derivatives.
  840         FPT.TOPNODE$ is initialized by this parameter.
  841      */
  842         %(LVL+1) BUF$ PTR %INIT(ADDR(NIL))%ENIT,
  843      /*K* BUF$ must be initialized at runtime, and specifies the address of
  844         the message to be parsed or of a buffer into which the message is to
  845         be encoded.  It may point at a CALIGNED location.  See also NXTX.
  846      */
  847         %(LVL+1) UENTRY$ EPTR %INIT(ENTADDR(UENTRY))%ENIT,
  848      /*K* UENTRY = ENTRY.  Specifies the procedure to be used for syntax nodes
  849         specifying the PRE, SUCC, or FAIL parameters.  FPT.UENTRY$ is initialized
  850         by this parameter.
  851      */
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        24   
  852         %(LVL+1) ERR UBIN %INIT(0)%ENIT,
  853      /*K* ERR is an error code used to explain an ALTRETURN from XSP$SEND or
  854         XSP$RECV.
  855      */
  856         %(LVL+1) LINK$ PTR %INIT(ADDR(NIL))%ENIT,
  857      /*K* LINK$ is initialized at runtime, and indicates the address of another
  858         XSP_ASN1_FPT containing another message to be parsed or encoded.
  859      */
  860         %(LVL+1) CTXTID SBIN %INIT(0)%ENIT,
  861      /*K* CTXTID is initialized at runtime, and indicates the context id of the
  862         Presentation context to be used to parse or encode this message.
  863      */
  864         %(LVL+1) R0 BIT(72)%INIT('0'B)%ENIT,
  865         %(LVL+1) RESULT(0:71) REDEF R0 BIT(1),
  866      /*K* RESULT = BIT-ARRAY (0:71) indicates which syntax nodes were successfully
  867         parsed.  R0 is a BIT(72) redef of the RESULT array.
  868      */
  869         %(LVL+1) C0 BIT(72) %INIT(CONDITION)%ENIT,
  870         %(LVL+1) %CHARTEXT('CONDITION')(0:71) REDEF C0 BIT(1),
  871      /*K* CONDITION = BIT-ARRAY (0:71) determines which optional nodes get sent
  872         or are truly optional when parsing.  The FPT parameter is a bit-string
  873         which initializes C0, a BIT(72) redef of CONDITION.
  874      */
  875         %(LVL+1) N0 BIT(72) %INIT('0'B)%ENIT,
  876         %(LVL+1) NULLRSLT(0:71) REDEF N0 BIT(1),
  877      /*K* NULLRSLT = BIT-ARRAY(0:71) indicates which NULL syntax nodes were
  878         successfully parsed.  N0 is a BIT(72) redef of NULLRSLT.
  879      */
  880         %(LVL+1) NXTX SBIN %INIT(0)%ENIT,
  881      /*K* NXTX = VALUE  must be initialized at runtime, and specifies the size
  882         of the message being parsed or of the buffer into which to encode the
  883         message.  On return, it indicates the amount of message that was parsed
  884         or the size of the message that was encoded.
  885      */
  886         %(LVL+1) DAT$(0:%(DATVECS-1)) PTR %INIT(ADDR(DAT)*0)%ENIT,
  887      /*K* DAT$ = PTR-ARRAY(0:DATVECS-1)  is an array of pointers to areas to
  888         be used to fetch or store data referenced by the syntax nodes.  The
10:40 OCT 01 '97 XSP_ASN1_M.:XSA1SI                                        25   
  889         alignment required for each pointer depends on the referencing nodes.
  890         This array is REDEFed as the UBIN DATSIZ array to implement the FPTSIZ
  891         option of the syntax nodes.
  892      */
  893      /*K* DATVECS = VALUE  specifies the number of DAT$ and DATSIZ entries to
  894         allocate in this FPT.  Note that the DAT$ and DATSIZ entries occupy
  895         the same space, so DATVECS is the sum of the number of pointers and
  896         sizes that you need.
  897      */
  898         %(LVL+1) DATSIZ(0:%(DATVECS-1)) REDEF DAT$ UBIN LAST
  899      %MEND;

