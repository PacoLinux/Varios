VERSION E05

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:1    
        1        1        /*M* TOM$MOLTS     TOLTS Mainframe On-Line Testing System */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P* NAME:         TOM$MOLTS
       12       12             PURPOSE:      provide service routines for slave mode MOLTS
       13       13             DESCRIPTION:  This module contains service routines for
       14       14                           the following MME requests from slave mode MOLTS:
       15       15                                CATADT (-50)     DATADT (-51)
       16       16                                FREEZE (-53)     UNFREZ (-54)
       17       17
       18       18                           Other MME's used by slave mode MOLTS are processed
       19       19                           by other interface modules, notably TOP$POLTS.
       20       20            LAST UPDATE:   02/27/86
       21       21            REFERENCE:     CP-6 D00 E integration
       22       22        */
       23       23        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:2    
       24       24        /*F*  NAME:        TOM$MOLTS
       25       25              DESCRIPTION: Procedure Nesting Hierarchy
       26       26
       27       27              TOM$MOLTS: procedure (MME,MREG,MME_INSTR$,RETURN_DELTA)
       28       28
       29       29                 TOM$MME_CATADT: procedure (X1, X2, X3, A, Q, RD)
       30       30                    TOM$REFORMAT_INIT: procedure (X1, X2, X3) ALTRET
       31       31                    TOM$BUILD_CATALOG_KEY: procedure (TCX) ALTRET
       32       32                       TOM$SET_ITR_CATALOG_KEY: procedure ALTRET
       33       33                       TOM$HAVE_USER_PICK: procedure
       34       34                          TOM$FETCH_CATALOG_TABLE: procedure
       35       35                          TOM$COUNT_APPL_CATALOGS: procedure
       36       36                          TOM$SHOW_APPL_CHOICES: procedure
       37       37                          TOM$GET_USER_CHOICE: procedure
       38       38                       TOM$SET_MDR_CATALOG_KEY: procedure ALTRET
       39       39                       TOM$SET_NIO_CATALOG_KEY: procedure
       40       40                    TOM$READ_CATALOG: procedure (X2, X3) ALTRET
       41       41                    TOM$REFORMAT_CATALOG_DATA: procedure (TCX, A)
       42       42                       TOM$RETURN_NIO_ENTRIES: procedure (A) ALTRET
       43       43                          TOM$BUILD_NIO_ENTRY: procedure
       44       44                       TOM$RETURN_STD_ENTRIES: procedure (A) ALTRET
       45       45                          TOM$BUILD_STD_ENTRY: procedure
       46       46                    TOM$CLEAR_EXCESS_DATA: procedure
       47       47                    TOM$SET_ERROR_RETURN_VALUES: procedure (E, A, Q, RD)
       48       48
       49       49                 TOM$MME_DATADT: procedure (X1, X2, X3, X4, A, Q, RD)
       50       50                    TOM$BUILD_CATALOG_ENTRY_KEY: procedure (X1, CS$)
       51       51                    TOM$ALLOCATE_SEGTBLS: procedure
       52       52                    TOM$SEEK_DECK: procedure (TCX, X2, X3, X4, A)
       53       53                       TOM$FIND_SEG_FOR_ENTRY: procedure (TCX, STX) ALTRET
       54       54                       TOM$FREE_SEG_FOR_ENTRY: procedure (TCX, STX)
       55       55                       TOM$FIND_UNUSED_SEG: procedure (TCX, STX)
       56       56                       TOM$ALLOCATE_SEG: procedure (TCX, STX)
       57       57                       TOM$COPY_CALL_SEQUENCE: procedure (TCX, STX, SEQ$)
       58       58                       TOM$RETURN_DATA: procedure (TCX, STX, X4)
       59       59                          TOM$MOVE_SECTORS: procedure (SEG$, SC, WC, EOF)
       60       60                    TOM$READ_DECK_KEY: procedure
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:3    
       61       61                    TOM$READ_DECK: procedure (TCX, CS$, X2, X3, A)
       62       62
       63       63                 TOM$MATCH_ICC: procedure (Q, TCX)
       64       64                 TOM$GET_DATA_SEGMENT: procedure (WC, WV)
       65       65                 TOM$FREE_DATA_SEGMENT: procedure (WC, WV)
       66       66                 TOM$SET_RETURN_VALUES: procedure (Q, RD)
       67       67
       68       68                 TOM$MME_FREEZE: procedure (RD)
       69       69                 TOM$MME_UNFREZ: procedure (RD)
       70       70        */
       71       71        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:4    
       72       72        TOM$MOLTS: PROC (MME, MREG, MME_INSTR$, RETURN_DELTA);
       73       73
       74       74        /* Include files */
       75       75
       76       76           %INCLUDE B_SEGIDS_C ;
       77      615           %INCLUDE CP_6;
       78     6174           %INCLUDE TOT_RQSTS_E ;
       79     6216           %INCLUDE TOT_TOLTS_M;
       80     7334           %INCLUDE TO_PERR_C ;
       81     7919
       82     7920        /* Parameters Passed at Call */
       83     7921
       84     7922           %MME ;
       85     7943           %MREG ;
       86     7965           %MME_INSTR$ ;
       87     7968           %RETURN_DELTA ;
       88     7971
       89     7972        /* External Entries */
       90     7973
       91     7974    1      DCL TOT$ASCII_BCD           ENTRY (3) ;
       92     7975    1      DCL TOL$CHECK_CALL_SEQUENCE ENTRY (11) ALTRET ;
       93     7976    1      DCL TOT$CONSOLE_IN          ENTRY ;
       94     7977    1      DCL TOT$CONSOLE_OUT         ENTRY ;
       95     7978    1      DCL TOL$GET_DATA            ENTRY (7) ;
       96     7979    1      DCL TOL$SAVE_DATA           ENTRY (7)  ALTRET ;
       97     7980    1      DCL TOL$CLEAR_DATA          ENTRY (7)  ALTRET ;
       98     7981    1      DCL TOL$GET_CATALOG         ENTRY (6)  ALTRET ;
       99     7982    1      DCL TOL$GET_DECK            ENTRY (7)  ALTRET ;
      100     7983    1      DCL TOL$GET_NIO_DECK        ENTRY (7)  ALTRET ;
      101     7984    1      DCL TOX$ERROR               ENTRY (1) ;
      102     7985    1      DCL TOX$SCREECH             ENTRY (1) ;
      103     7986           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:5    
      104     7987        /* Variables */
      105     7988
      106     7989    1      DCL DATA_IN$        STATIC PTR ALIGNED INIT (ADDR(OBJECT_KEY));
      107     7990    1      DCL DATA_OUT$       STATIC PTR ALIGNED INIT (ADDR(GCOS_STD_ENTRY));
      108     7991    1      DCL 1 DCW_I STATIC ALIGNED,
      109     7992    1            2 AD    UBIN(18) UNAL,
      110     7993    1            2 TYP   UBIN(6) UNAL,
      111     7994    1            2 SIZE  UBIN(12) UNAL;
      112     7995    1      DCL 1 DCW_O STATIC ALIGNED,
      113     7996    1            2 AD    UBIN(18) UNAL,
      114     7997    1            2 TYP   UBIN(6)UNAL,
      115     7998    1            2 SIZE  UBIN(12) UNAL;
      116     7999    1      DCL DATA_LENGTH_IN  STATIC UBIN(36) ALIGNED INIT (6);
      117     8000    1      DCL DATA_LENGTH_OUT STATIC UBIN(36) ALIGNED INIT (4);
      118     8001    1      DCL DATA_SIZE_IN    STATIC UBIN(36) ALIGNED;
      119     8002    1      DCL DATA_SIZE_OUT   STATIC UBIN(36) ALIGNED;
      120     8003    1      DCL ENTRY_NO        STATIC UBIN(18) ALIGNED;
      121     8004    1      DCL LAST_ENTRY_NO   STATIC UBIN(18) ALIGNED;
      122     8005           %IS$ (STCLASS = CONSTANT) ;
      123     8019    1      DCL LOAD_SIZE       STATIC UBIN(36) ALIGNED;
      124     8020    1      DCL START_LOAD$     STATIC PTR ALIGNED INIT (ADDR(LOAD));
      125     8021    1      DCL 1 LOAD STATIC ALIGNED,
      126     8022    1            2 *   UBIN(3) UNAL INIT (3),
      127     8023    1            2 *   UBIN(33) UNAL;
      128     8024           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:6    
      129     8025           /* MME CATA return entries */
      130     8026
      131     8027    1      DCL 1 CP6_STD_ENTRY STATIC ALIGNED,
      132     8028    1            2 NAME  UBIN(36) UNAL,
      133     8029    1            2 *     UBIN(6) UNAL,
      134     8030    1            2 DECK  UBIN(24) UNAL,
      135     8031    1            2 *     UBIN(6) UNAL,
      136     8032    1            2 REV   UBIN(12) UNAL,
      137     8033    1            2 *     UBIN(24) UNAL;
      138     8034    1      DCL 1 CP6_NIO_ENTRY REDEF CP6_STD_ENTRY ALIGNED,
      139     8035    1            2 CLASS      UBIN  (6) UNAL,
      140     8036    1            2 EQUIP_TYPE UBIN (24) UNAL,
      141     8037    1            2 FILE_NAME  BIT  (48) UNAL,
      142     8038    1            2 X_OF_N     UBIN (12) UNAL,
      143     8039    1            2 *          UBIN (18) UNAL ;
      144     8040    1      DCL 1 GCOS_STD_ENTRY STATIC ALIGNED,
      145     8041    1            2 DECK   UBIN(24) UNAL,
      146     8042    1            2 REV    UBIN(12) UNAL,
      147     8043    1            2 ENTRY# UBIN(18) UNAL,
      148     8044    1            2 *      UBIN (18) UNAL,
      149     8045    1            2 NAME   UBIN(36) UNAL,
      150     8046    1            2 USAGE  BIT (36) UNAL ;
      151     8047    1      DCL 1 GCOS_NIO_ENTRY REDEF GCOS_STD_ENTRY ALIGNED,
      152     8048    1            2 EQUIP_TYPE UBIN (24) UNAL,
      153     8049    1            2 X_OF_N     UBIN (12) UNAL,
      154     8050    1            2 ENTRY#     UBIN (18) UNAL,
      155     8051    1            2 NIO_FLAG   UBIN (18) UNAL,
      156     8052    1            2 FILE_NAME  BIT  (48) UNAL,
      157     8053    1            2 DISK_TAB   UBIN (12) UNAL,
      158     8054    1            2 PGM_TAB    UBIN (12) UNAL ;
      159     8055           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:7    
      160     8056        /* Call Sequences to communicate with the loader */
      161     8057
      162     8058    1      DCL CALL_SEQ$       PTR ALIGNED ;
      163     8059           %TOM$CALL_SEQUENCE (FPTN = CALL_SEQUENCE,
      164     8060                               STCLASS = BASED) ;
      165     8091           %TOM$CALL_SEQUENCE (FPTN = MY_CALL_SEQUENCE,
      166     8092                               STCLASS = STATIC) ;
      167     8123
      168     8124        /* Status Storage and Pointers */
      169     8125
      170     8126    1      DCL STATUS_I$ STATIC PTR ALIGNED INIT (ADDR(STAT_I));
      171     8127    1      DCL STATUS_O$ STATIC PTR ALIGNED INIT (ADDR(STAT_O));
      172     8128    1      DCL STATUS_U$ STATIC PTR ALIGNED;
      173     8129    1      DCL 1 STAT_I STATIC ALIGNED,
      174     8130    1            2 W1 BIT(36) ALIGNED,
      175     8131    1            2 AD UBIN(18) UNAL,
      176     8132    1            2 RES UBIN(18) UNAL;
      177     8133    1      DCL 1 STAT_O STATIC ALIGNED,
      178     8134    1            2 W1 BIT(36) ALIGNED,
      179     8135    1            2 AD UBIN(18) UNAL,
      180     8136    1            2 RES UBIN(18) UNAL;
      181     8137    1      DCL 1 STAT_U BASED,
      182     8138    1            2 W1 BIT(36) ALIGNED,
      183     8139    1            2 AD UBIN(18) UNAL,
      184     8140    1            2 RES UBIN(18) UNAL;
      185     8141           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:8    
      186     8142        /* Error Codes for the Loader */
      187     8143
      188     8144    1      DCL READ_ERROR_CODE STATIC UBIN(36) ALIGNED ;
      189     8145    1      DCL 1 READ_ERR_CODE REDEF READ_ERROR_CODE,
      190     8146    1            2 *           UBIN(27) UNAL,
      191     8147    1            2 CODE        UBIN(9) UNAL;
      192     8148           %VLP_ERRCODE (FPTN = TOM_ERROR_CODE,
      193     8149                         FCG  = 'TO',
      194     8150                         MID  = 'M',
      195     8151                         SEV  = 0) ;
      196     8196
      197     8197        /* Deckfile Key Images */
      198     8198
      199     8199    1      DCL 1 CATALOG_KEY STATIC CALIGNED,
      200     8200    1            2 SIZE    UBIN(9) UNAL INIT (23),
      201     8201    1            2 DATA    CHAR(23) UNAL,
      202     8202    1            2 NAME REDEF DATA,
      203     8203    1              3 CATA  CHAR(5) UNAL,
      204     8204    1              3 TYP   CHAR(4) UNAL,
      205     8205    1              3 APPL  CHAR(6) UNAL,
      206     8206    1              3 *     CHAR(8) UNAL;
      207     8207    1      DCL 1 CATALOG_ENTRY_KEY STATIC CALIGNED,
      208     8208    1            2 *       UBIN (9) UNAL INIT (4),
      209     8209    1            2 DECK    UBIN(18) UNAL,
      210     8210    1            2 ENTRY#  UBIN(18) UNAL;
      211     8211    1      DCL 1 OBJECT_KEY STATIC,
      212     8212    1            2 SIZE    UBIN(9) CALIGNED,
      213     8213    1            2 DATA    CHAR(23) CALIGNED ;
      214     8214           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:9    
      215     8215        /* External Variables */
      216     8216
      217     8217    1      DCL B$TCB$ PTR SYMREF ;
      218     8218           %B$ALT ;
      219     8226           %B$TCB ;
      220     8229           %FPT_WRITE (FPTN = CONSOLE_FPT,
      221     8230                       STCLASS = SYMREF) ;
      222     8261           %FPT_READ (FPTN = READ_IO,
      223     8262                      STCLASS = SYMREF) ;
      224     8301           %TOM$ITRTBL (STCLASS = "BASED (TOT$DMC.TOM$ITRTBL.PTR$)") ;
      225     8353           %TOM$SEGTBLS (STCLASS = "BASED (TOT$DMC.TOM$SEGTBLS.PTR$)") ;
      226     8365           %TOM$SEGTBL (STCLASS = BASED) ;
      227     8387           %TOM$SEG (STCLASS = BASED) ;
      228     8408           %TOT$DMC (STCLASS = SYMREF) ;
      229     8442           %TOP$TCP (STCLASS = "BASED (TOT$DMC.TOP$TCP.PTR$)") ;
      230     8530           %TOT$ECP (STCLASS = SYMREF) ;
      231     8579
      232     8580        /* Data Control Block for deckfile */
      233     8581
      234     8582    1      DCL M$DECKFILE DCB ;
      235     8583           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:10   
      236     8584        /* Main Code */
      237     8585
      238     8586    2      DO CASE (-MME.INST.NO);
      239     8587    2         CASE (%CATADT);
      240     8588    2            CALL TOM$MME_CATADT (MREG.X1, MREG.X2, MREG.X3,
      241     8589    2                    MREG.A, MREG.Q, RETURN_DELTA) ;
      242     8590    2         CASE (%DATADT);
      243     8591    2            CALL TOM$MME_DATADT (MREG.X1, MREG.X2, MREG.X3, MREG.X4,
      244     8592    2                    MREG.A, MREG.Q, RETURN_DELTA) ;
      245     8593    2         CASE (%FREEZE);
      246     8594    2            CALL TOM$MME_FREEZE (RETURN_DELTA) ;
      247     8595    2         CASE (%UNFREZ);
      248     8596    2            CALL TOM$MME_UNFREZ (RETURN_DELTA) ;
      249     8597    2      END /* CASE */ ;
      250     8598    1      RETURN ;
      251     8599
      252     8600        /* END TOM$MOLTS */
      253     8601        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:11   
      254     8602        /*I* NAME:         TOM$MME_CATADT
      255     8603             AUTHOR:       Scott S. Sheppard
      256     8604             PURPOSE:      MME CATA service routine
      257     8605             INTERFACE:    TOM$MATCH_ICC
      258     8606                           TOM$REFORMAT_INIT
      259     8607                           TOM$BUILD_CATALOG_KEY
      260     8608                           TOM$READ_CATALOG
      261     8609                           TOM$REFORMAT_CATALOG_DATA
      262     8610                           TOM$CLEAR_EXCESS_DATA
      263     8611                           TOM$SET_RETURN_VALUES
      264     8612                           TOM$SET_ERROR_RETURN_VALUES
      265     8613             PARAMETERS:   X1 - address of CALL SEQUENCE (input)
      266     8614                           X2 - max. load address (input)
      267     8615                           X3 - test page base (input)
      268     8616                           A - number of words read (output)
      269     8617                           Q - read error code (output)
      270     8618                                  0 - normal read
      271     8619                                  42 - more data exists but buffer is full
      272     8620                                  else - an error has occurred
      273     8621                           RETURN_DELTA - (output)
      274     8622                              3 - normal return
      275     8623                              2 - more data to be read return
      276     8624                              1 - error return
      277     8625             DATA:         READ_ERROR_CODE - input / output
      278     8626             DESCRIPTION:  This   procedure   uses   a  calling  sequence
      279     8627                           provided  by  the  caller  to  determine which
      280     8628                           catalog   to  read  from   the  deckfile.  The
      281     8629                           specified catalog is  read, the information is
      282     8630                           reformatted, and then returned to the caller.
      283     8631                            1. TOM$MATCH_ICC is called to locate the test
      284     8632                           control entry in  TOP$TCP which corresponds to
      285     8633                           this test request being serviced.
      286     8634                            2.   TOM$REFORMAT_INIT   is   called   to  do
      287     8635                           necessary DCW and pointer initialization.
      288     8636                            3.   TOM$BUILD_CATALOG_KEY   constructs   the
      289     8637                           catalog  key from  the test  control entry for
      290     8638                           the test.
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:12   
      291     8639                            4.  TOM$READ_CATALOG  is  called  to read the
      292     8640                           desired catalog from the deckfile.
      293     8641                            5.      TOM$REFORMAT_CATALOG_DATA     obtains
      294     8642                           information   from   a   CP-6   deckfile   and
      295     8643                           re-formats the data so that it may be returned
      296     8644                           to the caller in GCOS-like format.
      297     8645                            6.  TOM$CLEAR_EXCESS_DATA is  called to clean
      298     8646                           up  the  user's  buffer  space which is filled
      299     8647                           with  trailing  data  in  the  old  (non-GCOS)
      300     8648                           format.  This is required  because the data as
      301     8649                           read  from  the  deckfile  requires more space
      302     8650                           than the reformatted form.
      303     8651                            7. The read error code and return delta value
      304     8652                           are set by TOM$SET_RETURN_VALUES.
      305     8653        */
      306     8654
      307     8655    1   TOM$MME_CATADT: PROC (X1, X2, X3, A, Q, RETURN_DELTA) ;
      308     8656
      309     8657    2      DCL X1           UBIN HALF HALIGNED ;
      310     8658    2      DCL X2           UBIN HALF HALIGNED ;
      311     8659    2      DCL X3           UBIN HALF HALIGNED ;
      312     8660    2      DCL A            UBIN WORD ALIGNED ;
      313     8661    2      DCL Q            UBIN WORD ALIGNED ;
      314     8662    2      DCL RETURN_DELTA SBIN HALF HALIGNED ;
      315     8663    2      DCL TCX          UBIN WORD ALIGNED ;
      316     8664           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:13   
      317     8665        /* Code */
      318     8666
      319     8667    2      CALL TOM$MATCH_ICC (Q, TCX) ;
      320     8668
      321     8669    2      CALL TOM$REFORMAT_INIT (X1, X2, X3) WHENALTRETURN
      322     8670    3           DO ;
      323     8671    3              CALL TOM$SET_ERROR_RETURN_VALUES (1, A, Q, RETURN_DELTA) ;
      324     8672    3              RETURN ;
      325     8673    3           END /* WHENALTRETURN */ ;
      326     8674
      327     8675    2      CALL TOM$BUILD_CATALOG_KEY (TCX) WHENALTRETURN
      328     8676    3           DO ;
      329     8677    3              CALL TOM$SET_ERROR_RETURN_VALUES (2, A, Q, RETURN_DELTA) ;
      330     8678    3              RETURN ;
      331     8679    3           END /* WHENALTRETURN */ ;
      332     8680
      333     8681    2      CALL TOM$READ_CATALOG (X2, X3) WHENALTRETURN
      334     8682    3           DO ;
      335     8683    3              CALL TOM$SET_ERROR_RETURN_VALUES (3, A, Q, RETURN_DELTA) ;
      336     8684    3              RETURN ;
      337     8685    3           END /* WHENALTRETURN */ ;
      338     8686
      339     8687    2      CALL TOM$REFORMAT_CATALOG_DATA (TCX, A) ;
      340     8688
      341     8689    2      CALL TOM$CLEAR_EXCESS_DATA;
      342     8690
      343     8691    2      CALL TOM$SET_RETURN_VALUES (Q, RETURN_DELTA) ;
      344     8692    2      RETURN;
      345     8693
      346     8694        /* END TOM$MME_CATADT */
      347     8695        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:14   
      348     8696        /*I* NAME:         TOM$REFORMAT_INIT
      349     8697             PURPOSE:      initializes variables for MME CATA
      350     8698             INTERFACE:    TOL$CHECK_CALL_SEQUENCE
      351     8699             PARAMETERS:   X1 - address of call sequence (input)
      352     8700                           X2 - dummy variable
      353     8701                           X3 - dummy variable
      354     8702             DATA:         LOAD_SIZE - output
      355     8703                           CATALOG_KEY.DATA - output
      356     8704                           READ_ERROR_CODE - output
      357     8705                           CALL_SEQ$ - output
      358     8706                           IS$ - input
      359     8707                           MY_CALL_SEQUENCE - output
      360     8708                           STATUS_I$ - output
      361     8709                           DCW_I - output
      362     8710                           DCW_O - output
      363     8711                           STAT_I - output
      364     8712                           STAT_O - output
      365     8713                           DATA_SIZE_IN - output
      366     8714                           DATA_SIZE_OUT - output
      367     8715             DESCRIPTION:  This procedure calls  the loader to initialize
      368     8716                           some  parameters which  will be  used later in
      369     8717                           data reformatting. The user's call sequence is
      370     8718                           copied  into  a  dummy  call  sequence and the
      371     8719                           dummy  call sequence  is then  used to  do the
      372     8720                           initialization.
      373     8721        */
      374     8722        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:15   
      375     8723    2   TOM$REFORMAT_INIT: PROC (X1, X2, X3) ALTRET;
      376     8724
      377     8725    3      DCL X1        UBIN HALF HALIGNED ;
      378     8726    3      DCL X2        UBIN HALF HALIGNED ;
      379     8727    3      DCL X3        UBIN HALF HALIGNED ;
      380     8728    3      DCL DECK_TYPE STATIC CHAR(1) INIT ('D');
      381     8729
      382     8730        /* Code */
      383     8731
      384     8732    3      LOAD_SIZE = 0;
      385     8733    3      CATALOG_KEY.DATA = ' ';
      386     8734    3      READ_ERROR_CODE = 0;
      387     8735
      388     8736    3      CALL_SEQ$ = PINCRW (IS$, X1) ;
      389     8737    3      MY_CALL_SEQUENCE = CALL_SEQ$ -> CALL_SEQUENCE;
      390     8738    3      CALL TOL$CHECK_CALL_SEQUENCE (CATALOG_KEY,    /* N/A */
      391     8739    3              X3,                                   /* N/A */
      392     8740    3              MY_CALL_SEQUENCE,                     /* N/A */
      393     8741    3              X2,                                   /* N/A */
      394     8742    3              LOAD_SIZE,                            /* used by loader */
      395     8743    3              READ_ERROR_CODE,,                     /* set if error */
      396     8744    3              DECK_TYPE,
      397     8745    3              STATUS_I$,                            /* for status store */
      398     8746    3              DCW_I,                                /* working DCW */
      399     8747    3              DATA_SIZE_IN)                         /* total word size */
      400     8748    3              ALTRET (CHECK_CALL_ERROR);
      401     8749
      402     8750    3      DCW_O = DCW_I;
      403     8751    3      STAT_O = STAT_I;
      404     8752    3      DATA_SIZE_OUT = DATA_SIZE_IN;
      405     8753    3      RETURN;
      406     8754
      407     8755    3   CHECK_CALL_ERROR:
      408     8756    3      ALTRETURN;
      409     8757
      410     8758    3   END TOM$REFORMAT_INIT;
      411     8759        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:16   
      412     8760        /*I* NAME:         TOM$BUILD_CATALOG_KEY
      413     8761             AUTHOR:       Scott S. Sheppard
      414     8762             INTERFACE:    TOM$SET_ITR_CATALOG_KEY
      415     8763                           TOM$HAVE_USER_PICK
      416     8764                           TOM$SET_NIO_CATALOG_KEY
      417     8765                           TOM$SET_MDR_CATALOG_KEY
      418     8766             INPUT:        TCX - Test Control indeX
      419     8767             OUTPUT:       CATALOG_KEY
      420     8768             DESCRIPTION:  This procedure calls the proper routine to
      421     8769                           construct the catalog key based on the test
      422     8770                           type of the test being serviced.
      423     8771        */
      424     8772
      425     8773    2   TOM$BUILD_CATALOG_KEY: PROC (TCX) ALTRET ;
      426     8774
      427     8775    3      DCL TCX UBIN WORD ALIGNED ;
      428     8776
      429     8777        /* Code */
      430     8778
      431     8779    4      DO SELECT (TOP$TCP.TEST_TYPE(TCX)) ;
      432     8780    4         SELECT ('ITR') ;
      433     8781    4         CALL TOM$SET_ITR_CATALOG_KEY ALTRET (ERROR) ;
      434     8782    4         CALL TOM$HAVE_USER_PICK ;
      435     8783    4         SELECT ('NIO', 'RPM') ;
      436     8784    4         CALL TOM$SET_NIO_CATALOG_KEY ;
      437     8785    4         SELECT ('MDR') ;
      438     8786    4         CALL TOM$SET_MDR_CATALOG_KEY ALTRET (ERROR) ;
      439     8787    4         SELECT (ELSE) ;
      440     8788    4   ERROR: ALTRETURN ;
      441     8789    4      END /* SELECT */ ;
      442     8790    3      RETURN ;
      443     8791
      444     8792        /* END TOM$BUILD_CATALOG_KEY */
      445     8793        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:17   
      446     8794        /*I* NAME:         TOM$SET_ITR_CATALOG_KEY
      447     8795             INPUT:        TOP$TCP.FIRMWARE.TYPE(TCX)
      448     8796                           TCX
      449     8797             OUTPUT:       CATALOG_KEY
      450     8798             DESCRIPTION:  This procedure sets the catalog key for ITR's.
      451     8799        */
      452     8800
      453     8801    3   TOM$SET_ITR_CATALOG_KEY: PROC ALTRET ;
      454     8802
      455     8803        /* Code */
      456     8804
      457     8805    4      CATALOG_KEY.NAME.CATA = 'CATA.' ;
      458     8806    4      CATALOG_KEY.NAME.TYP  = 'ITR.' ;
      459     8807    5      DO SELECT (TOP$TCP.FIRMWARE.TYPE(TCX)) ;
      460     8808    5         SELECT ('M601') ;
      461     8809    5         CATALOG_KEY.NAME.APPL = 'MTP601';
      462     8810    5         SELECT ('M610') ;
      463     8811    5         CATALOG_KEY.NAME.APPL = 'MTP610';
      464     8812    5         SELECT ('UCMN') ;
      465     8813    5         CATALOG_KEY.NAME.APPL = 'URCMPC';
      466     8814    5         SELECT ('M191') ;
      467     8815    5         CATALOG_KEY.NAME.APPL = 'DSC191';
      468     8816    5         SELECT ('D500') ;
      469     8817    5         CATALOG_KEY.NAME.APPL = 'DSC500';
      470     8818    5         SELECT ('MSP8');
      471     8819    5         CATALOG_KEY.NAME.APPL = 'MSP800';
      472     8820    5         SELECT ('M500') ;
      473     8821    5         CATALOG_KEY.NAME.APPL = 'MTC500';
      474     8822    5         SELECT ('URTP') ;
      475     8823    5         CATALOG_KEY.NAME.APPL = 'URTMPC' ;
      476     8824    5         SELECT ('TPUR') ;
      477     8825    5         CATALOG_KEY.NAME.APPL = 'TURMPC' ;
      478     8826    5         SELECT (ELSE) ;
      479     8827    5      ALTRETURN ;
      480     8828    5      END /* SELECT */ ;
      481     8829    4      RETURN ;
      482     8830
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:18   
      483     8831    4   END TOM$SET_ITR_CATALOG_KEY ;
      484     8832        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:19   
      485     8833        /*I* NAME:         TOM$HAVE_USER_PICK
      486     8834             AUTHOR:       Carl Eichert
      487     8835             PURPOSE:      User selects firmware
      488     8836             INTERFACE:    TOM$GET_DATA_SEGMENT
      489     8837                           TOM$FETCH_CATALOG_TABLE
      490     8838                           TOM$COUNT_APPL_CATALOGS
      491     8839                           TOM$SHOW_APPL_CHOICES
      492     8840                           TOM$GET_USER_CHOICE
      493     8841             INPUT:        TOP$TCP.FIRMWARE.CHOICE_MADE(TCX)
      494     8842                           TOT$DMC.TOM$ITRTBL.PTR$
      495     8843             OUTPUT:       TOP$TCP.FIRMWARE.CHOICE_MADE(TCX)
      496     8844                           TOT$DMC.TOM$ITRTBL.PTR$
      497     8845                           TOM$ITRTBL
      498     8846             DESCRIPTION:  This procedure allows the user to select which
      499     8847                           ITR catalog to load based on the firmware type
      500     8848                           of the ITR catalog.
      501     8849        */
      502     8850
      503     8851    3   TOM$HAVE_USER_PICK: PROC ;
      504     8852
      505     8853    4      DCL NCIC UBIN (36) ALIGNED;
      506     8854    4      DCL 1 CUR_ITR_CATAS (0:4) ALIGNED,
      507     8855    4            2 DATA,
      508     8856    4              3 DECK# UBIN (18) HALIGNED,
      509     8857    4              3 * UBIN (18) HALIGNED,
      510     8858    4              3 * UBIN (36) ALIGNED,
      511     8859    4              3 OBJ_KEY_INX UBIN (36) ALIGNED,
      512     8860    4            2 CATA# UBIN (36) ALIGNED;
      513     8861           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:20   
      514     8862        /* Code */
      515     8863
      516     8864    4      IF TOP$TCP.FIRMWARE.CHOICE_MADE(TCX)
      517     8865    4      THEN /* choice made on a previous MME CATADT */ ;
      518     8866    5      ELSE DO ;
      519     8867    5              IF TOT$DMC.TOM$ITRTBL.PTR$ = ADDR(NIL)
      520     8868    6              THEN DO ;
      521     8869    6                      CALL TOM$GET_DATA_SEGMENT (%TOM$ITRTBL_LGTH,
      522     8870    6                              TOT$DMC.TOM$ITRTBL) ;
      523     8871    6                      TOM$ITRTBL = '0'B ;
      524     8872    6                      CALL TOM$FETCH_CATALOG_TABLE ;
      525     8873    6                   END /* THEN */ ;
      526     8874    5              ELSE /* table read on a previous MME CATADT */ ;
      527     8875    5              CALL TOM$COUNT_APPL_CATALOGS ;
      528     8876    5              IF NCIC > 1
      529     8877    6              THEN DO ;
      530     8878    6                      CALL TOM$SHOW_APPL_CHOICES ;
      531     8879    6                      CALL TOM$GET_USER_CHOICE ;
      532     8880    6                   END /* THEN */ ;
      533     8881    5              ELSE /* no multiple ITR catalogs for this TEST request */ ;
      534     8882    5              TOP$TCP.FIRMWARE.CHOICE_MADE(TCX) = %TRUE ;
      535     8883    5           END /* ELSE */ ;
      536     8884    4      RETURN ;
      537     8885
      538     8886        /* END TOM$HAVE_USER_PICK */
      539     8887        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:21   
      540     8888        /*I* NAME:          TOM$FETCH_CATALOG_TABLE
      541     8889             AUTHOR:        Carl Eichert
      542     8890             INTERFACE:     M$READ
      543     8891                            TOX$ERROR
      544     8892             INPUT:         None
      545     8893             OUTPUT:        CATALOGS
      546     8894             DESCRIPTION:   This subroutine loads up all the catalog keys
      547     8895                            from the deckfile for use in selecting the
      548     8896                            correct ITR catalog when there are more than
      549     8897                            1 for the controller to be tested.
      550     8898        */
      551     8899
      552     8900    4   TOM$FETCH_CATALOG_TABLE: PROC;
      553     8901
      554     8902    5      DCL 1 MASTER_DATA ALIGNED,
      555     8903    5            2 DECK# UBIN (18) UNAL,
      556     8904    5            2 NUM_ENTRIES UBIN (18) UNAL,
      557     8905    5            2 * UBIN (36) UNAL;
      558     8906    5      DCL 1 MASTER_KEY STATIC CALIGNED,
      559     8907    5            2 * UBIN (9) UNAL INIT (14),
      560     8908    5            2 * CHAR (14) UNAL INIT ('MASTER_CATALOG');
      561     8909    5      DCL 1 MASTER_ENTRY_KEY STATIC CALIGNED,
      562     8910    5            2 * UBIN (9) UNAL INIT (4),
      563     8911    5            2 DECK# UBIN (18) UNAL,
      564     8912    5            2 ENTRY# UBIN (18) UNAL;
      565     8913    5      DCL 1 CATALOG_ENTRY_KEY STATIC CALIGNED,
      566     8914    5            2 * UBIN (9) UNAL INIT (4),
      567     8915    5            2 DECK# UBIN (18) UNAL,
      568     8916    5            2 ENTRY# UBIN (18) UNAL;
      569     8917    5      DCL I UBIN (36) ALIGNED;
      570     8918    5      DCL J UBIN (36) ALIGNED;
      571     8919    5      DCL SLOT UBIN WORD ALIGNED ;
      572     8920           %FPT_READ (FPTN = GET_DECKFILE_DATA,
      573     8921                      DCB = M$DECKFILE,
      574     8922                      KEYS = YES);
      575     8961           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:22   
      576     8962        /* Code */
      577     8963
      578     8964    5      GET_DECKFILE_DATA.BUF_ = VECTOR (MASTER_DATA);
      579     8965    5      GET_DECKFILE_DATA.KEY_ = VECTOR (MASTER_KEY);
      580     8966    5      CALL M$READ (GET_DECKFILE_DATA) ALTRET (ERROR_EXIT);
      581     8967    5      MASTER_ENTRY_KEY.DECK# = MASTER_DATA.DECK#;
      582     8968    5      I = 0;
      583     8969    6      DO WHILE (I < MASTER_DATA.NUM_ENTRIES) ;
      584     8970    6         MASTER_ENTRY_KEY.ENTRY# = I + 1;
      585     8971    6         GET_DECKFILE_DATA.BUF_ = VECTOR (TOM$ITRTBL.CATA_KEYS(I));
      586     8972    6         GET_DECKFILE_DATA.KEY_ = VECTOR (MASTER_ENTRY_KEY);
      587     8973    6         CALL M$READ (GET_DECKFILE_DATA) ALTRET (ERROR_EXIT);
      588     8974    6         IF TOM$ITRTBL.CATA_KEYS.CNAME.TYP(I) = 'ITR'
      589     8975    7         THEN DO;
      590     8976    7                 GET_DECKFILE_DATA.BUF_ = VECTOR (TOM$ITRTBL.CATA_DATA(I));
      591     8977    7                 GET_DECKFILE_DATA.KEY_ = VECTOR (TOM$ITRTBL.CATA_KEYS(I));
      592     8978    7                 CALL M$READ (GET_DECKFILE_DATA) ALTRET (ERROR_EXIT) ;
      593     8979    7                 IF I > 0
      594     8980    7                 THEN TOM$ITRTBL.CATA_DATA.OBJ_KEY_INX(I) =
      595     8981    7                            TOM$ITRTBL.CATA_DATA.NUM_ENTRIES(I-1) +
      596     8982    7                            TOM$ITRTBL.CATA_DATA.OBJ_KEY_INX(I-1);
      597     8983    7                 ELSE TOM$ITRTBL.CATA_DATA.OBJ_KEY_INX(I) = 0;
      598     8984    7                 CATALOG_ENTRY_KEY.DECK# = TOM$ITRTBL.CATA_DATA.DECK#(I);
      599     8985    7                 GET_DECKFILE_DATA.KEY_ = VECTOR (CATALOG_ENTRY_KEY);
      600     8986    8                 DO J = 1 TO TOM$ITRTBL.CATA_DATA.NUM_ENTRIES(I);
      601     8987    8                    SLOT = TOM$ITRTBL.CATA_DATA.OBJ_KEY_INX(I) + J - 1 ;
      602     8988    8                    GET_DECKFILE_DATA.BUF_ = VECTOR (TOM$ITRTBL.OBJ_KEYS(SLOT)) ;
      603     8989    8                    CATALOG_ENTRY_KEY.ENTRY# = J;
      604     8990    8                    CALL M$READ (GET_DECKFILE_DATA) ALTRET (ERROR_EXIT);
      605     8991    8                 END /* DO */;
      606     8992    7              END /* THEN */;
      607     8993    6         ELSE /* Catalog key read was for a catalog other than ITR */ ;
      608     8994    6         I = I + 1;
      609     8995    6      END /* WHILE */;
      610     8996    5      RETURN ;
      611     8997           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:23   
      612     8998    5   ERROR_EXIT:
      613     8999    5      TOM_ERROR_CODE.ERR# = %E$TBLLOADERR ;
      614     9000    5      CALL TOX$ERROR (TOM_ERROR_CODE) ;
      615     9001
      616     9002    5   END TOM$FETCH_CATALOG_TABLE ;
      617     9003        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:24   
      618     9004        /*I* NAME:         TOM$COUNT_APPL_CATALOGS
      619     9005             AUTHOR:       Carl Eichert
      620     9006             PURPOSE:      Counts ITR catalogs
      621     9007             INTERFACE:    INDEX
      622     9008             DESCRIPTION:  This procedure determines how many ITR catalogs
      623     9009                           in the deckfile apply to a particular device.
      624     9010        */
      625     9011
      626     9012    4   TOM$COUNT_APPL_CATALOGS: PROC ;
      627     9013
      628     9014    5      DCL CATA_INX SBIN (36) ALIGNED;
      629     9015
      630     9016        /* Code */
      631     9017
      632     9018    5      CATA_INX = 0;
      633     9019    5      NCIC = 0 ;
      634     9020    6      DO WHILE CATA_INX < LENGTHC (TOM$ITRTBL.CATA_KEYS_);
      635     9021    6         CALL INDEX (CATA_INX,CATALOG_KEY.NAME.APPL,TOM$ITRTBL.CATA_KEYS_,CATA_INX)
      636     9022    7         WHENRETURN DO ;
      637     9023    7                 CUR_ITR_CATAS.DATA(NCIC) = TOM$ITRTBL.CATA_DATA(CATA_INX / 24);
      638     9024    7                 CUR_ITR_CATAS.CATA#(NCIC) = CATA_INX / 24 ;
      639     9025    7                 NCIC = NCIC + 1;
      640     9026    7                 CATA_INX = CATA_INX + 24;
      641     9027    7              END /* WHENRETURN */;
      642     9028    6      END /* WHILE */;
      643     9029    5      RETURN ;
      644     9030
      645     9031    5   END TOM$COUNT_APPL_CATALOGS ;
      646     9032        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:25   
      647     9033        /*I* NAME:         TOM$SHOW_APPL_CHOICES
      648     9034             AUTHOR:       Carl Eichert
      649     9035             PURPOSE:      Give menu of ITR catalogs
      650     9036             INTERFACE:    TOT$CONSOLE_OUT
      651     9037                           BINCHAR
      652     9038             DESCRIPTION:  This procedure lists all of the ITR catalogs
      653     9039                           (including deck numbers) that  apply to  the
      654     9040                           device to be tested.  The difference between
      655     9041                           the catalogs is the firmware used.
      656     9042        */
      657     9043
      658     9044    4   TOM$SHOW_APPL_CHOICES: PROC ;
      659     9045
      660     9046    5      DCL I UBIN (36) ALIGNED;
      661     9047    5      DCL J UBIN (36) ALIGNED;
      662     9048    5      DCL K UBIN (36) ALIGNED;
      663     9049    5      DCL SELECT_MSG CHAR (0) CONSTANT CALIGNED INIT
      664     9050    5             ('Select firmware catalog deck number from:') ;
      665     9051    5      DCL NON_ZERO_FOUND BIT (1) ALIGNED;
      666     9052    5      DCL DECK#_CHAR_ (0:3) CHAR (1) CALIGNED;
      667     9053    5      DCL DECK#_CHAR REDEF DECK#_CHAR_ CHAR (4) CALIGNED;
      668     9054    5      DCL FIRMWARE_FOUND BIT (1) ALIGNED;
      669     9055    5      DCL 1 SELECT_CATA_BUF STATIC CALIGNED,
      670     9056    5            2 * CHAR (2) CALIGNED INIT (' '),
      671     9057    5            2 * CHAR (9) CALIGNED INIT ('CATA.ITR.'),
      672     9058    5            2 CATA CHAR (6) CALIGNED INIT (' '),
      673     9059    5            2 * CHAR (15) CALIGNED INIT (' firmware rev. '),
      674     9060    5            2 FW_REV CHAR (4) CALIGNED INIT (' '),
      675     9061    5            2 * CHAR (8) CALIGNED INIT (' deck # '),
      676     9062    5            2 DECK# CHAR (4) CALIGNED INIT (' '),
      677     9063    5            2 DEFAULT CHAR (10) CALIGNED;
      678     9064           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:26   
      679     9065        /* Code */
      680     9066
      681     9067    5      CONSOLE_FPT.BUF_ = VECTOR (SELECT_MSG);
      682     9068    5      CALL TOT$CONSOLE_OUT ;
      683     9069    5      CONSOLE_FPT.BUF_ = VECTOR (SELECT_CATA_BUF);
      684     9070    6      DO I = 0 TO NCIC - 1 ;
      685     9071    6         SELECT_CATA_BUF.CATA  = CATALOG_KEY.NAME.APPL ;
      686     9072    6         FIRMWARE_FOUND = %FALSE;
      687     9073    6         J = CUR_ITR_CATAS.DATA.OBJ_KEY_INX(I) - 1;
      688     9074    7         DO UNTIL FIRMWARE_FOUND;
      689     9075    7            J = J + 1;
      690     9076    7            IF TOM$ITRTBL.OBJ_KEYS.ONAME.ITR_TYP(J) = 'ITR'
      691     9077    7            THEN /* Do Nothing */ ;
      692     9078    7            ELSE FIRMWARE_FOUND = %TRUE;
      693     9079    7         END /* DO */ ;
      694     9080    6         SELECT_CATA_BUF.FW_REV = TOM$ITRTBL.OBJ_KEYS.ONAME.FW_REV(J);
      695     9081    6         CALL BINCHAR (DECK#_CHAR, CUR_ITR_CATAS.DATA.DECK#(I)) ;
      696     9082    6         K = 0;
      697     9083    6         NON_ZERO_FOUND = %FALSE;
      698     9084    7         DO UNTIL NON_ZERO_FOUND OR K = 3;
      699     9085    7            IF DECK#_CHAR_(K) = '0'
      700     9086    7            THEN DECK#_CHAR_(K) = ' ';
      701     9087    7            ELSE NON_ZERO_FOUND = %TRUE;
      702     9088    7            K = K + 1;
      703     9089    7         END;
      704     9090    6         SELECT_CATA_BUF.DECK# = DECK#_CHAR;
      705     9091    6         IF I > 0
      706     9092    6         THEN SELECT_CATA_BUF.DEFAULT = ' ';
      707     9093    6         ELSE SELECT_CATA_BUF.DEFAULT = ' (default)';
      708     9094    6         CALL TOT$CONSOLE_OUT ;
      709     9095    6      END /* DO */ ;
      710     9096    5      RETURN ;
      711     9097
      712     9098    5   END TOM$SHOW_APPL_CHOICES ;
      713     9099        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:27   
      714     9100        /*I* NAME:         TOM$GET_USER_CHOICE
      715     9101             AUTHOR:       Carl Eichert
      716     9102             PURPOSE:      Select ITR Catalog
      717     9103             INTERFACE:    TOT$CONSOLE_IN
      718     9104                           CHARBIN
      719     9105                           M$PROMPT
      720     9106             DESCRIPTION:  This procedure accepts the deck number of the ITR
      721     9107                           catalog to load.  This is done only when there is
      722     9108                           more than one ITR catalog for a particular device
      723     9109        */
      724     9110
      725     9111    4   TOM$GET_USER_CHOICE: PROC ;
      726     9112
      727     9113    5      DCL I      UBIN WORD ALIGNED ;
      728     9114    5      DCL J      UBIN WORD ALIGNED ;
      729     9115    5      DCL UC_PROMPT CHAR (0) CALIGNED STATIC INIT ('aEnter <deck#> or <CR>:');
      730     9116    5      DCL DECK#_ (0:3) CHAR (1) STATIC CALIGNED;
      731     9117    5      DCL DECK# REDEF DECK#_ CHAR (4) CALIGNED;
      732     9118    5      DCL DECK_OCT UBIN (36) ALIGNED;
      733     9119    5      DCL MATCH BIT (1) ALIGNED;
      734     9120           %FPT_PROMPT(FPTN = ENTER_PROMPT,
      735     9121                       DCB = M$UC,
      736     9122                       PROMPT = UC_PROMPT,
      737     9123                       VFC = YES);
      738     9151           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:28   
      739     9152        /* Code */
      740     9153
      741     9154    5      CALL M$PROMPT (ENTER_PROMPT);
      742     9155    5      MATCH = %FALSE;
      743     9156    6      DO WHILE ~MATCH;
      744     9157    6         DECK# = ' ' ;
      745     9158    6         READ_IO.BUF_ = VECTOR (DECK#) ;
      746     9159    6         CALL TOT$CONSOLE_IN ;
      747     9160    6         IF DECK# = ' '
      748     9161    6         THEN MATCH = %TRUE;
      749     9162    7         ELSE DO;
      750     9163    7                 J = 3;
      751     9164                   /* The following wierd DO loop is used because CHARBIN
      752     9165                      only accepts digits and IPR's otherwise. */
      753     9166    8                 DO I = 0 TO 3;
      754     9167    8                    IF DECK#_(J) > '9' OR DECK#_(J) < '0'
      755     9168    9                    THEN DO CASE (J);
      756     9169    9                            CASE (0,1,2);
      757     9170    9                               DECK#_(J) = '0';
      758     9171    9                               J = J - 1;
      759     9172    9                            CASE (3);
      760     9173    9                               DECK#_(3) = DECK#_(2);
      761     9174    9                               DECK#_(2) = DECK#_(1);
      762     9175    9                               DECK#_(1) = DECK#_(0);
      763     9176    9                               DECK#_(0) = '0';
      764     9177    9                               J = 3;
      765     9178    9                         END /* THEN */ ;
      766     9179    8                    ELSE J = J - 1;
      767     9180    8                 END /* DO */ ;
      768     9181    7                 CALL CHARBIN (DECK_OCT,DECK#);
      769     9182    8                 DO I = 0 TO NCIC;
      770     9183    8                    IF DECK_OCT = CUR_ITR_CATAS.DATA.DECK#(I)
      771     9184    9                    THEN DO;
      772     9185    9                            MATCH = %TRUE;
      773     9186    9                            CALL_SEQ$ -> CALL_SEQUENCE.DECK = DECK_OCT ;
      774     9187    9                         END /* THEN */ ;
      775     9188    8                    ELSE /* Do Nothing */ ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:29   
      776     9189    8                 END /* DO */ ;
      777     9190    7                 DECK# = ' ';
      778     9191    7              END /* ELSE */ ;
      779     9192    6      END /* WHILE */ ;
      780     9193    5      RETURN ;
      781     9194
      782     9195    5   END TOM$GET_USER_CHOICE ;
      783     9196    4   END TOM$HAVE_USER_PICK ;
      784     9197        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:30   
      785     9198        /*I* NAME:         TOM$SET_MDR_CATALOG_KEY
      786     9199             INPUT:        TOP$TCP.DEVICE_CODE(TCX)
      787     9200                           TCX
      788     9201             OUTPUT:       CATALOG_KEY
      789     9202             DESCRIPTION:  This procedure sets the catalog key for an MDR.
      790     9203        */
      791     9204
      792     9205    3   TOM$SET_MDR_CATALOG_KEY: PROC ALTRET ;
      793     9206
      794     9207        /* Code */
      795     9208
      796     9209    4      CATALOG_KEY.NAME.CATA = 'CATA.' ;
      797     9210    4      CATALOG_KEY.NAME.TYP  = 'MDR.' ;
      798     9211    5      DO CASE (TOP$TCP.DEVICE_CODE(TCX)) ;
      799     9212    5         CASE ( %DMTC9);
      800     9213    5            CATALOG_KEY.NAME.APPL = 'TAPE  ';
      801     9214    5         CASE ( %DS450, %DS509, %DSA1B, %DSD1B, %DSC1B, %DSK1B );
      802     9215    5            CATALOG_KEY.NAME.APPL = 'DISK  ';
      803     9216    5         CASE (%DPR41, %DPR23);
      804     9217    5            CATALOG_KEY.NAME.APPL = 'PRINT ';
      805     9218    5         CASE (%DCP30, %DCR31);
      806     9219    5            CATALOG_KEY.NAME.APPL = 'CARD  ';
      807     9220    5         CASE (ELSE);
      808     9221    5            ALTRETURN;
      809     9222    5      END /* CASE */ ;
      810     9223    4      RETURN ;
      811     9224
      812     9225    4   END TOM$SET_MDR_CATALOG_KEY ;
      813     9226        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:31   
      814     9227        /*I* NAME:         TOM$SET_NIO_CATALOG_KEY
      815     9228             AUTHOR:       Scott S. Sheppard
      816     9229             PURPOSE:      Sets up the catalog key for NIO tests
      817     9230             INTERFACE:    None called.
      818     9231             PARAMETERS:   None passed.
      819     9232             DATA:         CATALOG_KEY - output
      820     9233             DESCRIPTION:  This  procedure  sets  up  the catalog key for
      821     9234                           DIPPER  testing.  Currently,  all DIPPER tests
      822     9235                           reside  in the  same catalog  in the deckfile.
      823     9236                           This  was  done  so  that  HELP file selection
      824     9237                           could be done more easily.
      825     9238        */
      826     9239
      827     9240    3   TOM$SET_NIO_CATALOG_KEY: PROC ;
      828     9241
      829     9242        /* Code */
      830     9243
      831     9244    4      CATALOG_KEY.NAME.CATA = 'CATA.' ;
      832     9245    4      CATALOG_KEY.NAME.TYP = 'NIO.' ;
      833     9246    4      CATALOG_KEY.NAME.APPL = 'MCA' ;
      834     9247    4      RETURN ;
      835     9248
      836     9249    4   END TOM$SET_NIO_CATALOG_KEY ;
      837     9250    3   END TOM$BUILD_CATALOG_KEY;
      838     9251        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:32   
      839     9252        /*I* NAME:         TOM$READ_CATALOG
      840     9253             PURPOSE:      reads the specified catalog
      841     9254             INTERFACE:    TOL$GET_CATALOG
      842     9255             PARAMETERS:   X2 - maximum load address (input)
      843     9256                           X3 - test page base (input)
      844     9257             DATA:         LOAD_SIZE - output
      845     9258                           READ_ERROR_CODE - output
      846     9259                           CALL_SEQUENCE - input
      847     9260             DESCRIPTION:  This  procedure calls  the loader  to read the
      848     9261                           ITR  or MDR  catalog specified  by the catalog
      849     9262                           which has been  previously built.  The catalog
      850     9263                           is read from the  deckfile and loaded into the
      851     9264                           buffer specified in  the user's call sequence.
      852     9265                           The  loader  will  return  an error code which
      853     9266                           indicates  the  status  of  the  catalog  read
      854     9267                           operation.
      855     9268                              Error Return values
      856     9269                                 0 - good read
      857     9270                                 42 - more to read
      858     9271                                 other - error occurred
      859     9272        */
      860     9273        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:33   
      861     9274    2   TOM$READ_CATALOG: PROC (X2, X3) ALTRET;
      862     9275
      863     9276    3      DCL X2 UBIN HALF HALIGNED ;
      864     9277    3      DCL X3 UBIN HALF HALIGNED ;
      865     9278
      866     9279        /* Code */
      867     9280
      868     9281    3      LOAD_SIZE = 0;
      869     9282    3      READ_ERROR_CODE = 0;
      870     9283    3      LAST_ENTRY_NO = CALL_SEQ$ -> CALL_SEQUENCE.NEXT_ENTRY;
      871     9284
      872     9285    3      CALL TOL$GET_CATALOG (CATALOG_KEY,
      873     9286    3              X3,
      874     9287    3              CALL_SEQ$ -> CALL_SEQUENCE,
      875     9288    3              X2,
      876     9289    3              LOAD_SIZE,
      877     9290    3              READ_ERROR_CODE);
      878     9291
      879     9292    4      DO CASE (READ_ERR_CODE.CODE);
      880     9293    4         CASE (0,42);
      881     9294    4            RETURN;
      882     9295    4         CASE (ELSE);
      883     9296    4            ALTRETURN;
      884     9297    4      END /* CASE */ ;
      885     9298
      886     9299    3   END TOM$READ_CATALOG;
      887     9300        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:34   
      888     9301        /*I* NAME:         TOM$REFORMAT_CATALOG_DATA
      889     9302             PURPOSE:      selects proper processing routine
      890     9303             INTERFACE:    TOM$RETURN_NIO_ENTRIES
      891     9304                           TOM$RETURN_STD_ENTRIES
      892     9305                           TOX$ERROR
      893     9306             PARAMETERS:   TCX - input
      894     9307             DATA:         TOP$TCP.TEST_TYPE(TCX) - input
      895     9308             DESCRIPTION:  This procedure  determines which catalog entry
      896     9309                           return  routine to  call based  on the type of
      897     9310                           test a MME CATA is being performed for.
      898     9311        */
      899     9312
      900     9313    2   TOM$REFORMAT_CATALOG_DATA: PROC (TCX, A) ;
      901     9314
      902     9315    3      DCL TCX UBIN WORD ALIGNED ;
      903     9316    3      DCL A   UBIN WORD ALIGNED ;
      904     9317
      905     9318        /* Code */
      906     9319
      907     9320    4      DO SELECT (TOP$TCP.TEST_TYPE(TCX)) ;
      908     9321    4         SELECT ('NIO', 'RPM') ;
      909     9322    4         CALL TOM$RETURN_NIO_ENTRIES (A) WHENALTRETURN
      910     9323    5              DO ;
      911     9324    5                 TOM_ERROR_CODE.ERR# = %E$SAVEALT ;
      912     9325    5                 CALL TOX$ERROR (TOM_ERROR_CODE) ;
      913     9326    5              END /* WHENALTRETURN */ ;
      914     9327    4         SELECT (ELSE) ;
      915     9328    4      CALL TOM$RETURN_STD_ENTRIES (A) WHENALTRETURN
      916     9329    5           DO ;
      917     9330    5              TOM_ERROR_CODE.ERR# = %E$SAVEALT ;
      918     9331    5              CALL TOX$ERROR (TOM_ERROR_CODE) ;
      919     9332    5           END /* WHENALTRETURN */ ;
      920     9333    4      END /* SELECT */ ;
      921     9334    3      RETURN ;
      922     9335
      923     9336        /* END TOM$REFORMAT_CATALOG_DATA */
      924     9337        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:35   
      925     9338        /*I* NAME:         TOM$RETURN_NIO_ENTRIES
      926     9339             AUTHOR:       Scott S. Sheppard
      927     9340             PURPOSE:      returns entries from the NIO catalog
      928     9341             INTERFACE:    TOL$GET_DATA
      929     9342                           TOM$BUILD_NIO_ENTRY
      930     9343                           TOL$SAVE_DATA
      931     9344                           ADDR function
      932     9345                           PINCRW function
      933     9346             PARAMETERS:   A - load size (output)
      934     9347             DATA:         ENTRY_NO - output
      935     9348                           DATA_SIZE_IN - output
      936     9349                           LOAD_SIZE - input
      937     9350                           DATA_IN$ - input
      938     9351                           DATA_LENGTH_IN - input
      939     9352                           DCW_I - input
      940     9353                           STAT_I - input
      941     9354                           START_LOAD$ - input
      942     9355                           DATA_SIZE_IN - input
      943     9356                           MY_CALL_SEQUENCE - input
      944     9357                           DATA_OUT$ - input
      945     9358                           DCW_O - input
      946     9359                           STAT_O - input
      947     9360                           DATA_SIZE_OUT - input
      948     9361                           CALL_SEQUENCE.STATUSP - input
      949     9362                           STATUS_U$ - output
      950     9363                           STAT_U - output
      951     9364             DESCRIPTION:  This   procedure  loops   through  a  catalog,
      952     9365                           reading   catalog  entries   in  CP-6  format,
      953     9366                           converting  the  entries  to  GCOS format, and
      954     9367                           returning the GCOS  entries to the caller. For
      955     9368                           a   more   detailed   description,   see   the
      956     9369                           documentation for TOM$RETURN_STD_ENTRIES which
      957     9370                           does   the  exact   same  thing   for  non-NIO
      958     9371                           catalogs.  The  reason  that  both  procedures
      959     9372                           exist is for efficiency. If one procedure were
      960     9373                           used it would have  to check the test type for
      961     9374                           each  entry  to  be  returned.  The  card  MDR
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:36   
      962     9375                           catalog  has over 900  entries. So in essence,
      963     9376                           TOM$RETURN_NIO_ENTRIES                     and
      964     9377                           TOM$RETURN_STD_ENTRIES  are identical  but one
      965     9378                           calls TOM$BUILD_NIO_ENTRY  and the other calls
      966     9379                           TOM$BUILD_STD_ENTRY.
      967     9380        */
      968     9381        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:37   
      969     9382    3   TOM$RETURN_NIO_ENTRIES: PROC (A) ALTRET ;
      970     9383
      971     9384    4      DCL A      UBIN WORD ALIGNED ;
      972     9385
      973     9386        /* Code */
      974     9387
      975     9388    4      IF LAST_ENTRY_NO = 0
      976     9389    4      THEN ENTRY_NO = 1;
      977     9390    4      A = 0;
      978     9391    4      DATA_SIZE_IN = LOAD_SIZE;
      979     9392
      980     9393           /* Reformat Catalog Entries one by one */
      981     9394    5      DO WHILE (DATA_SIZE_IN > 0) ;
      982     9395              /* Get an entry */
      983     9396    5         CALL TOL$GET_DATA (DATA_IN$,
      984     9397    5                 DATA_LENGTH_IN,
      985     9398    5                 DCW_I,
      986     9399    5                 STAT_I,
      987     9400    5                 START_LOAD$,
      988     9401    5                 DATA_SIZE_IN,
      989     9402    5                 MY_CALL_SEQUENCE);
      990     9403              /* Convert data to common format */
      991     9404    5         CALL TOM$BUILD_NIO_ENTRY;
      992     9405              /* Write reformatted entry back to user buffer */
      993     9406    5         CALL TOL$SAVE_DATA (DATA_OUT$,
      994     9407    5                 DATA_LENGTH_OUT,
      995     9408    5                 DCW_O,
      996     9409    5                 STAT_O,
      997     9410    5                 START_LOAD$,
      998     9411    5                 DATA_SIZE_OUT,
      999     9412    5                 MY_CALL_SEQUENCE) ALTRET (BAD_ENTRY_WRITE) ;
     1000     9413              /* Update counts */
     1001     9414    5         A = A + 4 ;
     1002     9415    5         ENTRY_NO = ENTRY_NO + 1 ;
     1003     9416    5         DATA_IN$ = ADDR (OBJECT_KEY);
     1004     9417    5         DATA_OUT$ = ADDR (GCOS_NIO_ENTRY);
     1005     9418    5      END /* WHILE */ ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:38   
     1006     9419           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:39   
     1007     9420           /* Set up Status Pointer */
     1008     9421    4      STATUS_U$ = PINCRW (IS$, CALL_SEQ$ -> CALL_SEQUENCE.STATUSP) ;
     1009     9422    4      STATUS_U$ -> STAT_U = STAT_O;
     1010     9423    4      RETURN;
     1011     9424
     1012     9425    4   BAD_ENTRY_WRITE:
     1013     9426    4      ALTRETURN ;
     1014     9427
     1015     9428        /* END TOM$RETURN_NIO_ENTRIES */
     1016     9429        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:40   
     1017     9430        /*I* NAME:         TOM$BUILD_NIO_ENTRY
     1018     9431             AUTHOR:       Scott S. Sheppard
     1019     9432             PURPOSE:      returns an entry in GCOS format
     1020     9433             INTERFACE:    TOT$ASCII_BCD
     1021     9434                           CHARBIN
     1022     9435             PARAMETERS:   None passed.
     1023     9436             DATA:         OBJECT_KEY.DATA - input
     1024     9437                           CP6_NIO_ENTRY - input / output
     1025     9438                           GCOS_NIO_ENTRY - output
     1026     9439             DESCRIPTION:  This procedure returns a CP-6 catalog entry in
     1027     9440                           GCOS  format.   A  CP-6  object  key (the data
     1028     9441                           returned  by reading a  catalog entry) for the
     1029     9442                           NIO catalog is of the form:
     1030     9443                              CEEEEFFFFFFFFXNDDDPPP
     1031     9444                                 where: C - class (Header or File)
     1032     9445                                        EEEE - equipment type
     1033     9446                                        FFFFFFFF - file name
     1034     9447                                        XN - Diskette X of N diskettes
     1035     9448                                        DDD - disk tab
     1036     9449                                        PPP -  program tab
     1037     9450                           This procedure
     1038     9451                           uses the object key to set up a NIO entry.
     1039     9452        */
     1040     9453        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:41   
     1041     9454    4   TOM$BUILD_NIO_ENTRY: PROC;
     1042     9455
     1043     9456    5      DCL CHAR_COUNT  UBIN WORD ALIGNED ;
     1044     9457    5      DCL VALUE       UBIN WORD ALIGNED ;
     1045     9458
     1046     9459        /* Code */
     1047     9460
     1048     9461           /* convert equip type and file name from ASCII to BCD */
     1049     9462    5      CHAR_COUNT = 15 ;
     1050     9463    5      CALL TOT$ASCII_BCD (OBJECT_KEY.DATA, CP6_NIO_ENTRY, CHAR_COUNT) ;
     1051     9464    5      GCOS_NIO_ENTRY.EQUIP_TYPE = CP6_NIO_ENTRY.EQUIP_TYPE ;
     1052     9465    5      GCOS_NIO_ENTRY.FILE_NAME = CP6_NIO_ENTRY.FILE_NAME ;
     1053     9466
     1054     9467           /* set up X_OF_N field */
     1055     9468    5      GCOS_NIO_ENTRY.X_OF_N = CP6_NIO_ENTRY.X_OF_N ;
     1056     9469
     1057     9470           /* plug in the catalog entry number */
     1058     9471    5      GCOS_NIO_ENTRY.ENTRY# = ENTRY_NO ;
     1059     9472
     1060     9473           /* set up NIO flag for MCAD search routine */
     1061     9474    5      IF SUBSTR (OBJECT_KEY.DATA, 0, 1) = 'H'
     1062     9475    5      THEN GCOS_NIO_ENTRY.NIO_FLAG = 4 ;
     1063     9476    5      ELSE GCOS_NIO_ENTRY.NIO_FLAG = 5 ;
     1064     9477
     1065     9478           /* convert disk tab from ASCII to binary */
     1066     9479    5      CALL CHARBIN (VALUE, SUBSTR (OBJECT_KEY.DATA, 15, 3)) ;
     1067     9480    5      GCOS_NIO_ENTRY.DISK_TAB = VALUE ;
     1068     9481
     1069     9482           /* convert program tab from ASCII to binary */
     1070     9483    5      CALL CHARBIN (VALUE, SUBSTR (OBJECT_KEY.DATA, 18, 3)) ;
     1071     9484    5      GCOS_NIO_ENTRY.PGM_TAB = VALUE ;
     1072     9485    5      RETURN;
     1073     9486
     1074     9487    5   END TOM$BUILD_NIO_ENTRY;
     1075     9488    4   END TOM$RETURN_NIO_ENTRIES ;
     1076     9489        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:42   
     1077     9490        /*I* NAME:         TOM$RETURN_STD_ENTRIES
     1078     9491             PURPOSE:      returns entries from the standard catalog
     1079     9492             INTERFACE:    TOL$GET_DATA
     1080     9493                           TOM$BUILD_STD_ENTRY
     1081     9494                           TOL$SAVE_DATA
     1082     9495                           ADDR function
     1083     9496                           PINCRW function
     1084     9497             PARAMETERS:   A - load size (output)
     1085     9498             DATA:         ENTRY_NO - output
     1086     9499                           DATA_SIZE_IN - output
     1087     9500                           LOAD_SIZE - input
     1088     9501                           DATA_IN$ - input
     1089     9502                           DATA_LENGTH_IN - input
     1090     9503                           DCW_I - input
     1091     9504                           STAT_I - input
     1092     9505                           START_LOAD$ - input
     1093     9506                           DATA_SIZE_IN - input
     1094     9507                           MY_CALL_SEQUENCE - input
     1095     9508                           DATA_OUT$ - input
     1096     9509                           DCW_O - input
     1097     9510                           STAT_O - input
     1098     9511                           DATA_SIZE_OUT - input
     1099     9512                           CALL_SEQUENCE.STATUSP - input
     1100     9513                           STATUS_U$ - output
     1101     9514                           STAT_U - output
     1102     9515             DESCRIPTION:  This  procedure  takes  catalog  data  from  a
     1103     9516                           standard  catalog  (non-NIO  catalog)  in  the
     1104     9517                           user's buffer (CP-6 deckfile format of 6 words
     1105     9518                           per  entry)  and  reformats  the entries (GCOS
     1106     9519                           format  of  4  words  per  entry).  The  total
     1107     9520                           modified count of words read and a status word
     1108     9521                           witha modified DCW residue are returned to the
     1109     9522                           user. Steps taken:
     1110     9523                            1. The catalog entry counter and the modified
     1111     9524                           word   count   are   initialized   to   0  and
     1112     9525                           DATA_SIZE_IN is set to the total count of data
     1113     9526                           words present in the user buffer (LOAD_SIZE).
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:43   
     1114     9527                            2. TOL$GET_DATA is called  to read one 6 word
     1115     9528                           catalog into the working buffer.
     1116     9529                            3. TOL$BUILD_STD_ENTRY  is called to reformat
     1117     9530                           the  CP-6 entry  into a  GCOS entry.  The GCOS
     1118     9531                           entry is in an output buffer.
     1119     9532                            4.  TOL$SAVE_DATA  is  called  to replace the
     1120     9533                           CP-6 entry in the  user's buffer with the GCOS
     1121     9534                           entry  in the  output buffer.  The reformmated
     1122     9535                           entry  is  only  4  words  long resulting in a
     1123     9536                           compression of data in the user's buffer.
     1124     9537                            5. The modified  word count is incremented by
     1125     9538                           4, the  entry number is incremented  by 1, and
     1126     9539                           the data pointers are re-initialized.
     1127     9540                            6.  Note: steps  2 -  5 are  repeated for all
     1128     9541                           entries of a catalog.
     1129     9542                            7.  The  final   store  status  generated  by
     1130     9543                           TOL$SAVE_DATA  is  stored  in  the user's call
     1131     9544                           sequence.  This provides  the user  with a DCW
     1132     9545                           residue  which reflects the  true end point of
     1133     9546                           the reformatted data entries.
     1134     9547        */
     1135     9548        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:44   
     1136     9549    3   TOM$RETURN_STD_ENTRIES: PROC (A) ALTRET ;
     1137     9550
     1138     9551    4      DCL A  UBIN WORD ALIGNED ;
     1139     9552
     1140     9553        /* Code */
     1141     9554
     1142     9555    4      ENTRY_NO = 1;
     1143     9556    4      A = 0;
     1144     9557    4      DATA_SIZE_IN = LOAD_SIZE;
     1145     9558
     1146     9559        /* Reformat Catalog Entries one by one */
     1147     9560    5      DO WHILE (DATA_SIZE_IN > 0) ;
     1148     9561              /* Get an entry */
     1149     9562    5         CALL TOL$GET_DATA (DATA_IN$,
     1150     9563    5                 DATA_LENGTH_IN,
     1151     9564    5                 DCW_I,
     1152     9565    5                 STAT_I,
     1153     9566    5                 START_LOAD$,
     1154     9567    5                 DATA_SIZE_IN,
     1155     9568    5                 MY_CALL_SEQUENCE);
     1156     9569              /* Convert data to common format */
     1157     9570    5         CALL TOM$BUILD_STD_ENTRY;
     1158     9571              /* Write reformatted entry back to user buffer */
     1159     9572    5         CALL TOL$SAVE_DATA (DATA_OUT$,
     1160     9573    5                 DATA_LENGTH_OUT,
     1161     9574    5                 DCW_O,
     1162     9575    5                 STAT_O,
     1163     9576    5                 START_LOAD$,
     1164     9577    5                 DATA_SIZE_OUT,
     1165     9578    5                 MY_CALL_SEQUENCE) ALTRET (BAD_ENTRY_WRITE) ;
     1166     9579              /* Update counts */
     1167     9580    5         A = A + 4 ;
     1168     9581    5         ENTRY_NO = ENTRY_NO + 1 ;
     1169     9582    5         DATA_IN$ = ADDR (OBJECT_KEY);
     1170     9583    5         DATA_OUT$ = ADDR (GCOS_STD_ENTRY);
     1171     9584    5      END /* WHILE */ ;
     1172     9585           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:45   
     1173     9586           /* Set up Status Pointer */
     1174     9587    4      STATUS_U$ = PINCRW (IS$, CALL_SEQ$ -> CALL_SEQUENCE.STATUSP) ;
     1175     9588    4      STATUS_U$ -> STAT_U = STAT_O;
     1176     9589    4      RETURN;
     1177     9590
     1178     9591    4   BAD_ENTRY_WRITE:
     1179     9592    4      ALTRETURN ;
     1180     9593
     1181     9594        /* END TOM$RETURN_STD_ENTRIES */
     1182     9595        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:46   
     1183     9596        /*I* NAME:         TOM$BUILD_STD_ENTRY
     1184     9597             PURPOSE:      reformats an entry from CP-6 to GCOS format
     1185     9598             INTERFACE:    TOT$ASCII_BCD
     1186     9599             PARAMETERS:   None passed.
     1187     9600             DATA:         OBJECT_KEY.DATA - input
     1188     9601                           CP6_STD_ENTRY - input / output
     1189     9602                           GCOS_STD_ENTRY - output
     1190     9603             DESCRIPTION:  This  procedure  constructs  an  entry in GCOS
     1191     9604                           format for a  standard CP-6 catalog entry. The
     1192     9605                           conversion consists  of translatig some fields
     1193     9606                           and re-arranging others.
     1194     9607
     1195     9608             GCOS_STD_ENTRY.USAGE - BCD deck type (6 characters)
     1196     9609             GCOS_STD_ENTRY.DECK - BCD edit name (4 characters)
     1197     9610             GCOS_STD_ENTRY.REV - BCD revision level (2 characters)
     1198     9611             GCOS_STD_ENTRY.ENTRY# - binary catalog entry number
     1199     9612             GCOS_STD_ENTRY.NAME - BCD GECALL name or IDENT CODE
     1200     9613        */
     1201     9614
     1202     9615    4   TOM$BUILD_STD_ENTRY: PROC;
     1203     9616
     1204     9617    5      DCL ASCII (0:15) CHAR(1) CALIGNED ;
     1205     9618    5      DCL ASCII_ REDEF ASCII CHAR(16) CALIGNED ;
     1206     9619    5      DCL CHAR_COUNT STATIC SBIN;
     1207     9620    5      DCL TAB_INDEX STATIC SBIN;
     1208     9621           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:47   
     1209     9622        /* Build GCOS usage field */
     1210     9623    6      DO SELECT (SUBSTR (OBJECT_KEY.DATA, 0, 3)) ;
     1211     9624    6         SELECT ('ITR') ;
     1212     9625                 /* assign USAGE a BCD '   ITR' */
     1213     9626    6         GCOS_STD_ENTRY.USAGE = '202020316351'O;
     1214     9627    6         TAB_INDEX = 4;
     1215     9628    6         SELECT ('MDR') ;
     1216     9629                 /* assign USAGE a BCD '   MDR' */
     1217     9630    6         GCOS_STD_ENTRY.USAGE = '202020442451'O;
     1218     9631    6         TAB_INDEX = 4;
     1219     9632    6         SELECT (ELSE) ;
     1220     9633    6      CHAR_COUNT = 6;
     1221     9634    6      ASCII_ = SUBSTR (OBJECT_KEY.DATA, 0, CHAR_COUNT) ;
     1222     9635    6      CALL TOT$ASCII_BCD (ASCII, GCOS_STD_ENTRY.USAGE, CHAR_COUNT);
     1223     9636    6      TAB_INDEX = 7;
     1224     9637    6      END /* SELECT */ ;
     1225     9638
     1226     9639        /* Build remainder of intermediate key */
     1227     9640    5      CHAR_COUNT = 14;
     1228     9641    5      ASCII_ = SUBSTR (OBJECT_KEY.DATA, TAB_INDEX, CHAR_COUNT);
     1229     9642    5      CALL TOT$ASCII_BCD (ASCII, CP6_STD_ENTRY, CHAR_COUNT);
     1230     9643
     1231     9644        /* Build entry in final form */
     1232     9645    5      GCOS_STD_ENTRY.DECK = CP6_STD_ENTRY.DECK;
     1233     9646    5      GCOS_STD_ENTRY.REV  = CP6_STD_ENTRY.REV;
     1234     9647    5      GCOS_STD_ENTRY.ENTRY# = ENTRY_NO;
     1235     9648    5      GCOS_STD_ENTRY.NAME = CP6_STD_ENTRY.NAME;
     1236     9649    5      RETURN;
     1237     9650
     1238     9651    5   END TOM$BUILD_STD_ENTRY;
     1239     9652    4   END TOM$RETURN_STD_ENTRIES ;
     1240     9653    3   END TOM$REFORMAT_CATALOG_DATA ;
     1241     9654        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:48   
     1242     9655        /*I* NAME:         TOM$CLEAR_EXCESS_DATA
     1243     9656             PURPOSE:      zero out end of user buffer
     1244     9657             INTERFACE:    TOL$CLEAR_DATA
     1245     9658                           TOX$ERROR
     1246     9659             PARAMETERS:   None passed.
     1247     9660             DATA:         DATA_OUT$ - input
     1248     9661                           DATA_SIZE_OUT - input
     1249     9662                           DCW_O - input
     1250     9663                           STAT_O - input
     1251     9664                           START_LOAD$ - input
     1252     9665                           MY_CALL_SEQUENCE - input
     1253     9666                           TOM_ERROR_CODE - output
     1254     9667             DESCRIPTION:  This  procedure  is  called  after the catalog
     1255     9668                           data from the T&D  deckfile has been read into
     1256     9669                           the user's buffer and reformatted. The purpose
     1257     9670                           of this procedure is  to clear (zero) the data
     1258     9671                           residue that results  from the reformatting of
     1259     9672                           the 6 word entries  into 4 word entries.  This
     1260     9673                           way  the  user  will  only see the reformatted
     1261     9674                           data.
     1262     9675                            - The  number of words to clear  is set up in
     1263     9676                           CLEAR_SIZE. This number  is equal to twice the
     1264     9677                           number  of  data  entries,  since reformatting
     1265     9678                           results in a compression of 2 words per entry.
     1266     9679                           The  user data buffer  therefore consists of a
     1267     9680                           block of reformatted  data followed by a block
     1268     9681                           of garbage data to be cleared.
     1269     9682                            -  TOL$CLEAR_DATA  is  called  to perform the
     1270     9683                           data  clearing.   The  DCW  and status residue
     1271     9684                           supplied with the call are those returned when
     1272     9685                           the  last write  of reformatted  data was done
     1273     9686                           via a call to TOL$SAVE_DATA.
     1274     9687        */
     1275     9688        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:49   
     1276     9689    2   TOM$CLEAR_EXCESS_DATA: PROC;
     1277     9690
     1278     9691    3      DCL CLEAR_SIZE STATIC UBIN(36) ALIGNED;
     1279     9692
     1280     9693        /* Code */
     1281     9694
     1282     9695    3      CLEAR_SIZE = DATA_SIZE_OUT;
     1283     9696    3      CALL TOL$CLEAR_DATA (DATA_OUT$,
     1284     9697    3              CLEAR_SIZE,
     1285     9698    3              DCW_O,
     1286     9699    3              STAT_O,
     1287     9700    3              START_LOAD$,
     1288     9701    3              DATA_SIZE_OUT,
     1289     9702    3              MY_CALL_SEQUENCE) ALTRET (BAD_CLEAR) ;
     1290     9703    3      RETURN;
     1291     9704
     1292     9705    3   BAD_CLEAR:
     1293     9706    3      TOM_ERROR_CODE.ERR# = %E$CLEARALT ;
     1294     9707    3      CALL TOX$ERROR (TOM_ERROR_CODE) ;
     1295     9708
     1296     9709    3   END TOM$CLEAR_EXCESS_DATA;
     1297     9710        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:50   
     1298     9711        /*I* NAME:         TOM$SET_ERROR_RETURN_VALUES
     1299     9712             AUTHOR:       Scott S. Sheppard
     1300     9713             PURPOSE:      sets error return values for MME CATADT
     1301     9714             INTERFACE:    None called.
     1302     9715             PARAMETERS:   ERROR_NUMBER - input
     1303     9716                           A - output
     1304     9717                           Q - output
     1305     9718                           RETURN_DELTA - output
     1306     9719             DATA:         READ_ERROR_CODE - input / output
     1307     9720             DESCRIPTION:  This  procedure sets  the error  return values
     1308     9721                           for  MME CATADT.  The error  number identifies
     1309     9722                           which  step in  the CATA  process that  was in
     1310     9723                           error.
     1311     9724                           The error number is set as follows:
     1312     9725
     1313     9726                              1 - TOM$REFORMAT_INIT
     1314     9727                              2 - TOM$BUILD_CATALOG_KEY
     1315     9728                              3 - TOM$READ_CATALOG
     1316     9729        */
     1317     9730        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:51   
     1318     9731    2   TOM$SET_ERROR_RETURN_VALUES: PROC (ERROR_NUMBER, A, Q, RETURN_DELTA) ;
     1319     9732
     1320     9733    3      DCL ERROR_NUMBER   UBIN WORD ALIGNED ;
     1321     9734    3      DCL A              UBIN WORD ALIGNED ;
     1322     9735    3      DCL Q              UBIN WORD ALIGNED ;
     1323     9736    3      DCL RETURN_DELTA   SBIN HALF HALIGNED ;
     1324     9737
     1325     9738        /* Code */
     1326     9739
     1327     9740    4      DO CASE (ERROR_NUMBER) ;
     1328     9741    4         CASE (1) ;
     1329     9742                 /* TOM$REFORMAT_INIT */
     1330     9743    4            A = 0 ;
     1331     9744    4            Q = READ_ERROR_CODE ;
     1332     9745    4         CASE (2) ;
     1333     9746                 /* TOM$BUILD_CATALOG_KEY */
     1334     9747    4            A = 0 ;
     1335     9748    4            READ_ERR_CODE.CODE = 51 ;
     1336     9749    4            Q = READ_ERROR_CODE ;
     1337     9750    4         CASE (3) ;
     1338     9751                 /* TOM$READ_CATALOG */
     1339     9752    4            Q = READ_ERROR_CODE ;
     1340     9753    4      END /* CASE */ ;
     1341     9754    3      RETURN_DELTA = 1 ;
     1342     9755    3      RETURN ;
     1343     9756
     1344     9757    3   END TOM$SET_ERROR_RETURN_VALUES ;
     1345     9758    2   END TOM$MME_CATADT ;
     1346     9759        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:52   
     1347     9760        /*I* NAME:         TOM$MME_DATADT
     1348     9761             PURPOSE:      MME DATA service routine
     1349     9762             INTERFACE:    TOM$MATCH_ICC
     1350     9763                           TOM$BUILD_CATALOG_ENTRY_KEY
     1351     9764                           TOM$SEEK_DECK
     1352     9765                           TOM$READ_DECK_KEY
     1353     9766                           TOM$READ_DECK
     1354     9767                           TOM$SET_RETURN_VALUES
     1355     9768             PARAMETERS:   X1 - address of CALL SEQUENCE (input)
     1356     9769                           X2 - max. load address (input)
     1357     9770                           X3 - test page base (input)
     1358     9771                           X4 - NIO file sector number (input)
     1359     9772                           A - number of words read (output)
     1360     9773                           Q - read error code (output)
     1361     9774                                  0 - normal read
     1362     9775                                  42 - more data exists but buffer is full
     1363     9776                                  else - an error has occurred
     1364     9777                           RETURN_DELTA - (output)
     1365     9778                              3 - normal return
     1366     9779                              2 - more data to be read return
     1367     9780                              1 - error return
     1368     9781             DATA:         READ_ERROR_CODE - input / output
     1369     9782             DESCRIPTION:  This   procedure   uses   a  calling  sequence
     1370     9783                           provided  by  the  caller  to read a requested
     1371     9784                           deck  from  a  deckfile  and  place  it in the
     1372     9785                           user's buffer.
     1373     9786                            1. TOM$MATCH_ICC is called to locate the test
     1374     9787                           control entry in  TOP$TCP which corresponds to
     1375     9788                           this test request being serviced.
     1376     9789                            2.  TOM$BUILD_CATALOG_ENTRY_KEY is  called to
     1377     9790                           construct  a catalog  entry key  from the call
     1378     9791                           sequence.
     1379     9792                            3. Based on the test type being serviced, the
     1380     9793                           test page is either:
     1381     9794                              a. seeked   from   a     data   segment  by
     1382     9795                                 TOM$SEEK_DECK (NIO requests)
     1383     9796                              b. actually  read from  the deckfile (other
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:53   
     1384     9797                                 requests)
     1385     9798                            4. The read error code and return delta value
     1386     9799                           are set by TOM$SET_RETURN_VALUES.
     1387     9800        */
     1388     9801
     1389     9802    1   TOM$MME_DATADT: PROC (X1, X2, X3, X4, A, Q, RETURN_DELTA) ;
     1390     9803
     1391     9804    2      DCL X1           UBIN HALF HALIGNED ;
     1392     9805    2      DCL X2           UBIN HALF HALIGNED ;
     1393     9806    2      DCL X3           UBIN HALF HALIGNED ;
     1394     9807    2      DCL X4           SBIN HALF HALIGNED ;
     1395     9808    2      DCL A            UBIN WORD ALIGNED ;
     1396     9809    2      DCL Q            UBIN WORD ALIGNED ;
     1397     9810    2      DCL RETURN_DELTA SBIN HALF HALIGNED ;
     1398     9811    2      DCL TCX          UBIN WORD ALIGNED ;
     1399     9812
     1400     9813        /* Code */
     1401     9814
     1402     9815    2      CALL TOM$MATCH_ICC (Q, TCX) ;
     1403     9816    2      CALL TOM$BUILD_CATALOG_ENTRY_KEY (X1, CALL_SEQ$) ;
     1404     9817
     1405     9818    3      DO SELECT (TOP$TCP.TEST_TYPE(TCX)) ;
     1406     9819    3         SELECT ('NIO', 'RPM') ;
     1407     9820    3         CALL TOM$ALLOCATE_SEGTBLS ;
     1408     9821    3         CALL TOM$SEEK_DECK (TCX, X2, X3, X4, A) ;
     1409     9822    3         SELECT (ELSE) ;
     1410     9823    3      CALL TOM$READ_DECK_KEY;
     1411     9824    3      CALL TOM$READ_DECK (TCX, CALL_SEQ$, X2, X3, A) ;
     1412     9825    3      END /* SELECT */ ;
     1413     9826
     1414     9827    2      CALL TOM$SET_RETURN_VALUES (Q, RETURN_DELTA) ;
     1415     9828    2      RETURN;
     1416     9829
     1417     9830        /* END TOM$MME_DATADT */
     1418     9831        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:54   
     1419     9832        /*I* NAME:         TOM$BUILD_CATALOG_ENTRY_KEY
     1420     9833             AUTHOR:       Scott S. Sheppard
     1421     9834             PURPOSE:      constructs an intermediate key
     1422     9835             INTERFACE:    PINCRW
     1423     9836             PARAMETERS:   X1 - input
     1424     9837                           CALL_SEQ$ - output
     1425     9838             DATA:         CALL_SEQUENCE.DECK - input
     1426     9839                           CALL_SEQUENCE.NEXT_ENTRY - input
     1427     9840             DESCRIPTION:  This  procedure obtains a  pointer to the call
     1428     9841                           sequence  from  the  address  stored in X1 and
     1429     9842                           build a catalog entry key. The key used is the
     1430     9843                           deck   number  and  entry   number.  The  data
     1431     9844                           returned  is  also  a  valid deckfile key, the
     1432     9845                           object  deck  key  used  to  actually read the
     1433     9846                           deck.
     1434     9847        */
     1435     9848
     1436     9849    2   TOM$BUILD_CATALOG_ENTRY_KEY: PROC (X1, CALL_SEQ$) ;
     1437     9850
     1438     9851    3      DCL X1        UBIN HALF HALIGNED ;
     1439     9852    3      DCL CALL_SEQ$ PTR ALIGNED ;
     1440     9853
     1441     9854        /* Code */
     1442     9855
     1443     9856    3      CALL_SEQ$ = PINCRW (IS$, X1) ;
     1444     9857    3      CATALOG_ENTRY_KEY.DECK = CALL_SEQ$ -> CALL_SEQUENCE.DECK;
     1445     9858    3      CATALOG_ENTRY_KEY.ENTRY# = CALL_SEQ$ -> CALL_SEQUENCE.NEXT_ENTRY ;
     1446     9859    3      RETURN ;
     1447     9860
     1448     9861    3   END TOM$BUILD_CATALOG_ENTRY_KEY ;
     1449     9862        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:55   
     1450     9863        /*I* NAME:         TOM$ALLOCATE_SEGTBLS
     1451     9864             AUTHOR:       Scott S. Sheppard
     1452     9865             PURPOSE:      obtains a segment table buffer
     1453     9866             INTERFACE:    TOM$GET_DATA_SEGMENT
     1454     9867                           ADDR function
     1455     9868             PARAMETERS:   None passed.
     1456     9869             DATA:         TOT$DMC.TOM$SEGTBLS.PTR$ - input / output
     1457     9870                           TOM$SEGTBLS - output
     1458     9871             DESCRIPTION:  This  procedure  obtains  a  dynamic buffer to
     1459     9872                           use  as  a control table for  a list of files.
     1460     9873                           The procedure obtains the memory for the table
     1461     9874                           and   zeroes  it   out.  The   segment  table,
     1462     9875                           TOM$SEGTBLS, is  an array of 8  entries, 1 per
     1463     9876                           possible test request. Each entry in the table
     1464     9877                           corresponds  to  the  control  for  that  test
     1465     9878                           request and  may control as many  as seven NIO
     1466     9879                           files.
     1467     9880        */
     1468     9881
     1469     9882    2   TOM$ALLOCATE_SEGTBLS: PROC ;
     1470     9883
     1471     9884        /* Code */
     1472     9885
     1473     9886    3      IF TOT$DMC.TOM$SEGTBLS.PTR$ = ADDR (NIL)
     1474     9887    4      THEN DO ;
     1475     9888    4              CALL TOM$GET_DATA_SEGMENT (%TOM$SEGTBLS_LGTH, TOT$DMC.TOM$SEGTBLS) ;
     1476     9889    4              TOM$SEGTBLS = '0'B ;
     1477     9890    4           END /* THEN */ ;
     1478     9891    3      ELSE /* Segment tables generated on a previous MME DATA */ ;
     1479     9892    3      RETURN ;
     1480     9893
     1481     9894    3   END TOM$ALLOCATE_SEGTBLS ;
     1482     9895        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:56   
     1483     9896        /*I* NAME:         TOM$SEEK_DECK
     1484     9897             AUTHOR:       Scott S. Sheppard
     1485     9898             PURPOSE:      performs a seek on an object deck
     1486     9899             INTERFACE:    TOM$FIND_SEG_FOR_ENTRY  TOM$READ_DECK_KEY
     1487     9900                           TOM$FREE_SEG_FOR_ENTRY  TOM$COPY_CALL_SEQUENCE
     1488     9901                           TOM$FIND_UNUSED_SEG     TOM$READ_DECK
     1489     9902                           TOM$ALLOCATE_SEG        TOM$RETURN_DATA
     1490     9903             PARAMETERS:   TCX - which test page is being serviced (input)
     1491     9904                           X2 - maximum load address (not used)
     1492     9905                           X3 - test page base (not used)
     1493     9906                           X4 - sector number requested (input)
     1494     9907                           A - number of words read (output)
     1495     9908             DATA:         TOM_ERROR_CODE - output
     1496     9909             DESCRIPTION:  This procedure simulates  diskette I/O for NIO
     1497     9910                           diskette  files using  MME DATA's.  Due to the
     1498     9911                           number of sector  seeks that will be performed
     1499     9912                           during   an   MCA   maintenance  session,  the
     1500     9913                           diskette  files to  be used  for a maintenance
     1501     9914                           session are read from the deckfile into memory
     1502     9915                           and  remain  there  until  the file is closed.
     1503     9916                           Seeks  are  simulated  by  having  the  caller
     1504     9917                           specify  the sector  number that  he wishes to
     1505     9918                           obtain  in  the  X4  register.  If  the sector
     1506     9919                           number is  -1, this means that  the file is no
     1507     9920                           longer needed and  may be closed. Handling MME
     1508     9921                           DATA's  for NIO  test requests  are handled as
     1509     9922                           follows:
     1510     9923                            1. If the sector  is -1, this means close the
     1511     9924                           file.   Steps  2  and  3  are  performed.  For
     1512     9925                           sector numbers  other than -1, Steps  2, 4, 5,
     1513     9926                           ... 9 are performed.
     1514     9927                            2. The segment table  is searched to find the
     1515     9928                           corresponding dynamic  data segment containing
     1516     9929                           the DIPPER diskette file for the corresponding
     1517     9930                           catalog  entry.   For  file  closes, the entry
     1518     9931                           should  exist.  It  it  does  not, an error is
     1519     9932                           reported  and  MOLTS  wraps  up.  For  seeking
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:57   
     1520     9933                           sectors,  if the  entry does  not exist one is
     1521     9934                           allocated using steps 4, 5, ... 8.
     1522     9935                            3. When the file  is closed, the data segment
     1523     9936                           containing the file  is released and the table
     1524     9937                           segment slot for that file is made available.
     1525     9938                            4.  An available table  segment slot is found
     1526     9939                           in the segment table.
     1527     9940                            5.  The  dynamic  segment  is allocated. This
     1528     9941                           segment  has  room  for  a  call  sequence, an
     1529     9942                           object  card, a set  of diskette sectors which
     1530     9943                           may be up to 64K bytes, and a deck end card.
     1531     9944                            6.  The catalog  entry is  read to return the
     1532     9945                           object deck key.
     1533     9946                            7.  The  call  sequence  is  copied  into the
     1534     9947                           dynamic buffer.
     1535     9948                            8. The object deck  is read from the deckfile
     1536     9949                           and placed in the dynamic segment.
     1537     9950                            9. The sector specified by the X4 register is
     1538     9951                           placed  in the location  specified in the call
     1539     9952                           sequence.
     1540     9953        */
     1541     9954
     1542     9955    2   TOM$SEEK_DECK: PROC (TCX, X2, X3, X4, A) ;
     1543     9956
     1544     9957    3      DCL TCX         UBIN WORD ALIGNED ;
     1545     9958    3      DCL X2          UBIN HALF HALIGNED ;
     1546     9959    3      DCL X3          UBIN HALF HALIGNED ;
     1547     9960    3      DCL X4          SBIN HALF HALIGNED ;
     1548     9961    3      DCL A           UBIN WORD ALIGNED ;
     1549     9962    3      DCL STX         UBIN WORD ALIGNED ;
     1550     9963    3      DCL SEQ$        PTR ALIGNED ;
     1551     9964           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:58   
     1552     9965        /* Code */
     1553     9966
     1554     9967    3      IF X4 = -1
     1555     9968    4      THEN DO ;
     1556     9969                   /* X4 set to -1 indicates that a file should be closed */
     1557     9970    4              CALL TOM$FIND_SEG_FOR_ENTRY (TCX, STX) WHENALTRETURN
     1558     9971    5                   DO ;
     1559     9972    5                      TOM_ERROR_CODE.ERR# = %E$NOSEG ;
     1560     9973    5                      CALL TOX$ERROR (TOM_ERROR_CODE) ;
     1561     9974    5                   END /* WHENALTRETURN */ ;
     1562     9975    4              CALL TOM$FREE_SEG_FOR_ENTRY (TCX, STX) ;
     1563     9976    4           END /* THEN */ ;
     1564     9977    4      ELSE DO ;
     1565     9978                   /* X4 contains the starting sector number to return */
     1566     9979    4              CALL TOM$FIND_SEG_FOR_ENTRY (TCX, STX) WHENALTRETURN
     1567     9980    5                   DO ;
     1568     9981    5                      CALL TOM$FIND_UNUSED_SEG (TCX, STX) ;
     1569     9982    5                      CALL TOM$ALLOCATE_SEG (TCX, STX) ;
     1570     9983    5                      CALL TOM$READ_DECK_KEY ;
     1571     9984    5                      CALL TOM$COPY_CALL_SEQUENCE (TCX, STX, SEQ$) ;
     1572     9985    5                      CALL TOM$READ_DECK (TCX, SEQ$, X2, X3, A) ;
     1573     9986    5                   END /* WHENALTRETURN */ ;
     1574     9987    4              CALL TOM$RETURN_DATA (TCX, STX, X4, A) ;
     1575     9988    4           END /* ELSE */ ;
     1576     9989    3      RETURN ;
     1577     9990
     1578     9991        /* END TOM$SEEK_DECK */
     1579     9992        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:59   
     1580     9993        /*I* NAME:         TOM$FIND_SEG_FOR_ENTRY
     1581     9994             AUTHOR:       Scott S. Sheppard
     1582     9995             PURPOSE:      table search
     1583     9996             INTERFACE:    ADDR function
     1584     9997             PARAMETERS:   TCX - test number (input)
     1585     9998                           STX - segment number (output)
     1586     9999             DATA:         CATALOG_ENTRY_KEY.ENTRY# - input
     1587    10000                           TOM$SEGTBLS(TCX) - set of segments for a test page
     1588    10001                           TOM$SEGTBL(STX) - one segment from the set above
     1589    10002             DESCRIPTION:  This  procedure  performs  a  table look up to
     1590    10003                           find   the  dynamic   segment  containing  the
     1591    10004                           diskette  file read  from the  deckfile.  On a
     1592    10005                           MME   CATA,  all  entries   from  the  catalog
     1593    10006                           CATA.NIO.MCA  were returned to  the user where
     1594    10007                           each  entry was  assigned an  entry number and
     1595    10008                           other  attributes   identifying  the  diskette
     1596    10009                           file. In order to have a portions (sectors) of
     1597    10010                           the file  placed in the test  page's memory, a
     1598    10011                           MME DATA is  performed. To indicate which file
     1599    10012                           to  retrieve,  the  catalog  entry  number  is
     1600    10013                           passed  in the  call sequence.  This procedure
     1601    10014                           checks  to see if  the data to  be returned is
     1602    10015                           from  a  file  already  resident  in a dynamic
     1603    10016                           segment controlled by CP-6 TOLTS. If the entry
     1604    10017                           number to retrieve  matches an entry number of
     1605    10018                           one  of the  dynamic segments,  this procedure
     1606    10019                           returns  with the dynamic  segment index being
     1607    10020                           returned in STX. The procedure altreturns when
     1608    10021                           the entry number was not found.
     1609    10022        */
     1610    10023        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:60   
     1611    10024    3   TOM$FIND_SEG_FOR_ENTRY: PROC (TCX, STX) ALTRET ;
     1612    10025
     1613    10026    4      DCL TCX         UBIN WORD ALIGNED ;
     1614    10027    4      DCL STX         UBIN WORD ALIGNED ;
     1615    10028    4      DCL SEGTBL$     PTR ALIGNED ;
     1616    10029
     1617    10030        /* Code */
     1618    10031
     1619    10032           /* point to the set of segments for this test request */
     1620    10033    4      SEGTBL$ = ADDR (TOM$SEGTBLS(TCX)) ;
     1621    10034
     1622    10035           /* start at 0 and step through the 7 possible segments */
     1623    10036    4      STX = 0 ;
     1624    10037    5      DO WHILE (STX < %MAX_SEGS) ;
     1625    10038    5         IF SEGTBL$ -> TOM$SEGTBL.ENTRY#(STX) = CATALOG_ENTRY_KEY.ENTRY#
     1626    10039    5         THEN RETURN ;
     1627    10040    5         ELSE STX = STX + 1 ;
     1628    10041    5      END /* WHILE */ ;
     1629    10042
     1630    10043           /* no segment allocated for this catalog entry */
     1631    10044    4      ALTRETURN ;
     1632    10045
     1633    10046    4   END TOM$FIND_SEG_FOR_ENTRY ;
     1634    10047        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:61   
     1635    10048        /*I* NAME:         TOM$FREE_SEG_FOR_ENTRY
     1636    10049             AUTHOR:       Scott S. Sheppard
     1637    10050             PURPOSE:      releases memory
     1638    10051             INTERFACE:    ADDR function
     1639    10052                           TOX$SCREECH
     1640    10053             PARAMETERS:   TCX - which test page (input)
     1641    10054                           STX - which segment for the test page (input)
     1642    10055             DATA:         TOM$SEGTBLS(TCX) - input
     1643    10056                           TOM$SEGTBL(STX) - input / output
     1644    10057                           TOM_ERROR_CODE - output
     1645    10058             DESCRIPTION:  When an  NIO test page wishes  to simulate the
     1646    10059                           closing  of  a  diskette  file,  a MME DATA is
     1647    10060                           performed  requesting  data  for sector number
     1648    10061                           -1. This indicates that  the file is no longer
     1649    10062                           needed  and  thus  the  memory containing that
     1650    10063                           file  may  be  released.   Once  released, the
     1651    10064                           segment  table  entry  for  that file (catalog
     1652    10065                           entry)   is  zeroed   out,  making   the  slot
     1653    10066                           available for another catalog entry if needed.
     1654    10067
     1655    10068                           If the catalog entry number was found,the file
     1656    10069                           should be active.   If it isn't,  something is
     1657    10070                           really wrong and a screech dump is produced.
     1658    10071        */
     1659    10072        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:62   
     1660    10073    3   TOM$FREE_SEG_FOR_ENTRY: PROC (TCX, STX) ;
     1661    10074
     1662    10075    4      DCL TCX         UBIN WORD ALIGNED ;
     1663    10076    4      DCL STX         UBIN WORD ALIGNED ;
     1664    10077    4      DCL SEGTBL$     PTR ALIGNED ;
     1665    10078
     1666    10079        /* Code */
     1667    10080
     1668    10081           /* point to the set of segments for this test request */
     1669    10082    4      SEGTBL$ = ADDR (TOM$SEGTBLS(TCX)) ;
     1670    10083
     1671    10084           /* ensure that nothing strange is going on */
     1672    10085    4      IF SEGTBL$ -> TOM$SEGTBL.ACTIVE(STX)
     1673    10086    5      THEN DO ;
     1674    10087                   /* free the segment for this catalog entry */
     1675    10088    5              CALL TOM$FREE_DATA_SEGMENT (%SEG_LGTH, SEGTBL$->TOM$SEGTBL.V(STX));
     1676    10089    5              SEGTBL$ -> TOM$SEGTBL(STX) = '0'B ;
     1677    10090    5              RETURN ;
     1678    10091    5           END /* THEN */ ;
     1679    10092    5      ELSE DO ;
     1680    10093                   /* can't happen - all existing entries should be active */
     1681    10094    5              TOM_ERROR_CODE.ERR# = %E$FREEINACTV ;
     1682    10095    5              CALL TOX$SCREECH (TOM_ERROR_CODE) ;
     1683    10096    5           END /* ELSE */ ;
     1684    10097
     1685    10098    4   END TOM$FREE_SEG_FOR_ENTRY ;
     1686    10099        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:63   
     1687    10100        /*I* NAME:         TOM$FIND_UNUSED_SEG
     1688    10101             AUTHOR:       Scott S. Sheppard
     1689    10102             PURPOSE:      locates vacant slot
     1690    10103             INTERFACE:    ADDR function
     1691    10104                           TOX$ERROR
     1692    10105             PARAMETERS:   TCX - which test page (input)
     1693    10106                           STX - Segment Table indeX (output)
     1694    10107             DATA:         TOM$SEGTBLS(TCX) - set of segments for a test page
     1695    10108                           TOM$SEGTBL(STX) - one of the segments from above
     1696    10109                           TOM_ERROR_CODE - output
     1697    10110             DESCRIPTION:  In  order  to  return  a  sector of a diskette
     1698    10111                           file, the file must be read into memory.  This
     1699    10112                           procedure  locates  an  unused  segment  table
     1700    10113                           entry  so that  a segment  may be allocated to
     1701    10114                           contain  the  entry.  The  segment table for a
     1702    10115                           test  page may control  up to 7  files. If all
     1703    10116                           seven  are  currently  in  use, this procedure
     1704    10117                           calls  TOX$ERROR which  reports the  error and
     1705    10118                           wraps  up MOLTS.  The slot  or entry number of
     1706    10119                           the available segment  table entry is returned
     1707    10120                           in STX.
     1708    10121        */
     1709    10122        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:64   
     1710    10123    3   TOM$FIND_UNUSED_SEG: PROC (TCX, STX) ;
     1711    10124
     1712    10125    4      DCL TCX         UBIN WORD ALIGNED ;
     1713    10126    4      DCL STX         UBIN WORD ALIGNED ;
     1714    10127    4      DCL SEGTBL$     PTR ALIGNED ;
     1715    10128
     1716    10129        /* Code */
     1717    10130
     1718    10131           /* point to the set of segments for this test request */
     1719    10132    4      SEGTBL$ = ADDR (TOM$SEGTBLS(TCX)) ;
     1720    10133
     1721    10134           /* start at 0 and step through the possible 7 segments */
     1722    10135    4      STX = 0 ;
     1723    10136    5      DO WHILE (STX < %MAX_SEGS) ;
     1724    10137    5         IF SEGTBL$ -> TOM$SEGTBL.ACTIVE(STX)
     1725    10138    5         THEN STX = STX + 1 ;
     1726    10139    5         ELSE RETURN ;
     1727    10140    5      END /* WHILE */ ;
     1728    10141
     1729    10142           /* all 7 segments are in use */
     1730    10143    4      TOM_ERROR_CODE.ERR# = %E$SEGSFULL ;
     1731    10144    4      CALL TOX$ERROR (TOM_ERROR_CODE) ;
     1732    10145
     1733    10146    4   END TOM$FIND_UNUSED_SEG ;
     1734    10147        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:65   
     1735    10148        /*I* NAME:         TOM$ALLOCATE_SEG
     1736    10149             PURPOSE:      obtains a data segment
     1737    10150             INTERFACE:    TOM$GET_DATA_SEGMENT
     1738    10151             PARAMETERS:   TCX - which test page (input)
     1739    10152             DATA:         TOM$SEGTBLS(TCX) - set of segments for a test page
     1740    10153                           TOM$SEGTBLS(STX) - one of the segments from above
     1741    10154                           TOM$SEG - segment is zeroed out
     1742    10155                           CATALOG_ENTRY_KEY.ENTRY#
     1743    10156             DESCRIPTION:  This  procedure allocates  a segment  for test
     1744    10157                           page TCX  using the segment table  slot STX to
     1745    10158                           contain  the file  data for  NIO catalog entry
     1746    10159                           number  CATALOG_ENTRY_KEY.ENTRY#.  The segment
     1747    10160                           table  vector,  active  flag,  and identifying
     1748    10161                           catalog entry number are initialized.
     1749    10162        */
     1750    10163
     1751    10164    3   TOM$ALLOCATE_SEG: PROC (TCX, STX) ;
     1752    10165
     1753    10166    4      DCL TCX         UBIN WORD ALIGNED ;
     1754    10167    4      DCL STX         UBIN WORD ALIGNED ;
     1755    10168    4      DCL SEGTBL$     PTR ALIGNED ;
     1756    10169
     1757    10170        /* Code */
     1758    10171
     1759    10172           /* point to the set of segments for this test request */
     1760    10173    4      SEGTBL$ = ADDR (TOM$SEGTBLS(TCX)) ;
     1761    10174
     1762    10175           /* allocate the segment and mark the segment table entry */
     1763    10176    4      CALL TOM$GET_DATA_SEGMENT (%SEG_LGTH, SEGTBL$ -> TOM$SEGTBL.V(STX)) ;
     1764    10177    4      SEGTBL$ -> TOM$SEGTBL.ACTIVE(STX) = %TRUE ;
     1765    10178    4      SEGTBL$ -> TOM$SEGTBL.ENTRY#(STX) = CATALOG_ENTRY_KEY.ENTRY# ;
     1766    10179    4      SEGTBL$ -> TOM$SEGTBL.V.PTR$(STX) -> TOM$SEG = '0'B ;
     1767    10180    4      RETURN ;
     1768    10181
     1769    10182    4   END TOM$ALLOCATE_SEG ;
     1770    10183        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:66   
     1771    10184        /*I* NAME:         TOM$COPY_CALL_SEQUENCE
     1772    10185             AUTHOR:       Scott S. Sheppard
     1773    10186             PURPOSE:      places call sequence in dynamic memory
     1774    10187             INTERFACE:    ADDR function
     1775    10188             PARAMETERS:   TCX - which test page (input)
     1776    10189                           STX - which segment for the test page (input)
     1777    10190                           SEQ$ - pointer to the call sequence (output)
     1778    10191             DATA:         TOM$SEGTBLS(TCX) - set of segments for a test page
     1779    10192                           TOM$SEGTBL(STX) - one data segment from above
     1780    10193                           CALL_SEQ$ -> CALL_SEQUENCE - input
     1781    10194             DESCRIPTION:  This procedure is  used for an unusual reason.
     1782    10195                           The  section of  the loader, TOL$GET_NIO_DECK,
     1783    10196                           used to load a catalog entry into memory loads
     1784    10197                           the  data into  the same  data segment  as the
     1785    10198                           call  sequence. By  placing the  a copy of the
     1786    10199                           call   sequence  at   the  beginning   of  the
     1787    10200                           dynamically  acquired  segment,  the  copy  is
     1788    10201                           passed to the loader and the data is read from
     1789    10202                           the deckfile  and loaded immediately following
     1790    10203                           the call sequence is the same data segment.
     1791    10204                           The  pointer  to the copied  call sequence  is
     1792    10205                           returned to the  caller  so it may used on the
     1793    10206                           call to TOM$READ_DECK.
     1794    10207        */
     1795    10208        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:67   
     1796    10209    3   TOM$COPY_CALL_SEQUENCE: PROC (TCX, STX, SEQ$) ;
     1797    10210
     1798    10211    4      DCL TCX         UBIN WORD ALIGNED ;
     1799    10212    4      DCL STX         UBIN WORD ALIGNED ;
     1800    10213    4      DCL SEQ$        PTR ALIGNED ;
     1801    10214    4      DCL SEGTBL$     PTR ALIGNED ;
     1802    10215
     1803    10216        /* Code */
     1804    10217
     1805    10218           /* point to the set of segments for this test request */
     1806    10219    4      SEGTBL$ = ADDR (TOM$SEGTBLS(TCX)) ;
     1807    10220
     1808    10221           /* point to the buffer in the segment table for the CALL SEQUENCE */
     1809    10222    4      SEQ$ = ADDR (SEGTBL$ -> TOM$SEGTBL.V.PTR$(STX) -> TOM$SEG.CALL_SEQUENCE) ;
     1810    10223
     1811    10224           /* copy the CALL SEQUENCE from the test page into the segment table */
     1812    10225    4      SEQ$ -> CALL_SEQUENCE = CALL_SEQ$ -> CALL_SEQUENCE ;
     1813    10226    4      RETURN ;
     1814    10227
     1815    10228    4   END TOM$COPY_CALL_SEQUENCE ;
     1816    10229        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:68   
     1817    10230        /*I* NAME:         TOM$RETURN_DATA
     1818    10231             AUTHOR:       Scott S. Sheppard
     1819    10232             PURPOSE:      returns diskette data
     1820    10233             INTERFACE:    ADDR function
     1821    10234                           TOM$MOVE_SECTORS
     1822    10235             PARAMETERS:   TCX - which test page (input)
     1823    10236                           STX - which segment to use (input)
     1824    10237                           X4 - sector to read (input)
     1825    10238                           A - number of words read (output)
     1826    10239             DATA:         TOM$SEGTBLS(TCX) - set of segments for a test page
     1827    10240                           TOM$SEGTBL(STX) - one of those segments
     1828    10241                           CALL_SEQUENCE.NO_MORE
     1829    10242                              0 - more data exists to be returned
     1830    10243                             -1 - no more data (simulates end of file)
     1831    10244                           READ_ERR_CODE.CODE
     1832    10245                              0 - no more data to return
     1833    10246                              42 - more data to return
     1834    10247                              52 - read past end of file
     1835    10248                           IS$ - pointer to instruction segment (input)
     1836    10249                           CALL_SEQ$ - input
     1837    10250             DESCRIPTION:  This  procedure  does  some  validation before
     1838    10251                           calling a routine, TOM$MOVE_SECTORS, to return
     1839    10252                           the data.  A pointer is set  up to the segment
     1840    10253                           in  question. X4, the  starting sector number,
     1841    10254                           is  checked to  ensure that  it is  within the
     1842    10255                           range of valid sectors for the particular file
     1843    10256                           segment.   If the  starting sectors  is valid,
     1844    10257                           TOM$MOVE_SECTORS  is  called  which  moves the
     1845    10258                           data  and  returns  the  number of words moved
     1846    10259                           along with whether or  not the end of file has
     1847    10260                           been reached.  The end of file flag is used to
     1848    10261                           set the read error  code and the call sequence
     1849    10262                           no more flag properly.
     1850    10263        */
     1851    10264        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:69   
     1852    10265    3   TOM$RETURN_DATA: PROC (TCX, STX, X4, A) ;
     1853    10266
     1854    10267    4      DCL TCX         UBIN WORD ALIGNED ;
     1855    10268    4      DCL STX         UBIN WORD ALIGNED ;
     1856    10269    4      DCL X4          SBIN HALF HALIGNED ;
     1857    10270    4      DCL A           UBIN WORD ALIGNED ;
     1858    10271    4      DCL SEGTBL$     PTR ALIGNED ;
     1859    10272    4      DCL SEG$        PTR ALIGNED ;
     1860    10273    4      DCL EOF         BIT (1) ALIGNED ;
     1861    10274
     1862    10275        /* Code */
     1863    10276
     1864    10277           /* point to the segment from the set of segments for the request */
     1865    10278    4      SEGTBL$ = ADDR (TOM$SEGTBLS(TCX)) ;
     1866    10279    4      SEG$ = SEGTBL$ -> TOM$SEGTBL.V.PTR$(STX) ;
     1867    10280
     1868    10281    4      READ_ERR_CODE = '0'B ;
     1869    10282
     1870    10283    4      IF X4 >= 0 & X4 <= SEG$ -> TOM$SEG.LAST_SECTOR
     1871    10284    5      THEN DO ;
     1872    10285                   /* move sectors and set return parameters */
     1873    10286    5              CALL TOM$MOVE_SECTORS (SEG$, X4, A, EOF) ;
     1874    10287    5              IF EOF
     1875    10288    5              THEN CALL_SEQ$ -> CALL_SEQUENCE.NO_MORE = -1 ;
     1876    10289    5              ELSE READ_ERR_CODE.CODE = 42 ;
     1877    10290    5           END /* THEN */ ;
     1878    10291    5      ELSE DO ;
     1879    10292                   /* sector requested is past the end of file */
     1880    10293    5              READ_ERR_CODE.CODE = 52 ;
     1881    10294    5              A = 0 ;
     1882    10295    5           END /* ELSE */ ;
     1883    10296    4      RETURN ;
     1884    10297
     1885    10298        /* END TOM$RETURN_DATA */
     1886    10299        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:70   
     1887    10300        /*I* NAME:         TOM$MOVE_SECTORS
     1888    10301             PURPOSE:      copies data into test page memory
     1889    10302             INTERFACE:    ADDR function
     1890    10303             PARAMETERS:   SEG$ - pointer to the data segment (input)
     1891    10304                           FIRST_SECTOR - staring sector number (input)
     1892    10305                           WORD_COUNT - number of words moved (output)
     1893    10306                           EOF - end of file hit? (output)
     1894    10307             DATA:         TOM$SEG.SECTORS - file data saved in memory (input)
     1895    10308                           CALL_SEQ$ - pointer to the call sequence (input)
     1896    10309                           CALL_SEQUENCE.FDCWP - address of file DCW (input)
     1897    10310                           CALL_SEQUENCE.STATUSP - address of status (input)
     1898    10311                           IS$ - pointer to start of instruction segment (input)
     1899    10312             DESCRIPTION:  This  procedure  moves  the  data  from TOLTS'
     1900    10313                           dynamic  data  segment  into  the  test page's
     1901    10314                           memory. The procedure  sets up pointers to the
     1902    10315                           starting point in  the data segment (SOURCE$),
     1903    10316                           the  DCW  which  describes  where and how many
     1904    10317                           words to  move (DCW$), and a  pointer to where
     1905    10318                           the data should be moved (TARGET$). The number
     1906    10319                           of words  to move is chcked to  see that it is
     1907    10320                           MOD  64.  There  are  64  words  to  a  DIPPER
     1908    10321                           diskette  sector  and   the  number  of  words
     1909    10322                           specified  here  should  be  an even number of
     1910    10323                           sectors.  The  number  of  sectors to actually
     1911    10324                           move is calculated  as the minimum between the
     1912    10325                           number  requested and the  number remaining in
     1913    10326                           the file. (If a  file has 20 sectors, numbered
     1914    10327                           0 - 19, and a request is issued for 10 sectors
     1915    10328                           starting at sector 15, only 5 sectors (numbers
     1916    10329                           15 -19)  will be returned.) The  word count is
     1917    10330                           used to reflect how many sectors were actually
     1918    10331                           returned.  The EOF  flag indicates  whether or
     1919    10332                           not the request was fully satisfied.
     1920    10333        */
     1921    10334        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:71   
     1922    10335    4   TOM$MOVE_SECTORS: PROC (SEG$, FIRST_SECTOR, WORD_COUNT, EOF) ;
     1923    10336
     1924    10337    5      DCL SEG$              PTR ALIGNED ;
     1925    10338    5      DCL FIRST_SECTOR      SBIN HALF HALIGNED ;
     1926    10339    5      DCL WORD_COUNT        UBIN WORD ALIGNED ;
     1927    10340    5      DCL EOF               BIT (1) ALIGNED ;
     1928    10341    5      DCL SECTOR_COUNT      UBIN WORD ALIGNED ;
     1929    10342    5      DCL SECTORS_REQUESTED UBIN WORD ALIGNED ;
     1930    10343    5      DCL SOURCE$           PTR ALIGNED ;
     1931    10344    5      DCL TARGET$           PTR ALIGNED ;
     1932    10345    5      DCL DCW$              PTR ALIGNED ;
     1933    10346    5      DCL 1 DCW BASED (DCW$) ALIGNED,
     1934    10347    5            2 ADDRESS       UBIN (18) UNAL,
     1935    10348    5            2 *             UBIN (3)  UNAL,
     1936    10349    5            2 TYPE          UBIN (3)  UNAL,
     1937    10350    5            2 WORD_COUNT    UBIN (12) UNAL ;
     1938    10351    5      DCL STATUS$           PTR ALIGNED ;
     1939    10352    5      DCL 1 STATUS BASED (STATUS$) ALIGNED,
     1940    10353    5            2 NEXT_ADDRESS  UBIN (18) UNAL,
     1941    10354    5            2 RESIDUE       UBIN (18) UNAL ;
     1942    10355    5      DCL I                 UBIN WORD ALIGNED ;
     1943    10356    5      DCL DATA_SECTOR       (0:255) CHAR (256) BASED ALIGNED ;
     1944    10357
     1945    10358        /* Code */
     1946    10359
     1947    10360           /* point to the first sector, DCW, and target */
     1948    10361    5      SOURCE$ = ADDR (SEG$ -> TOM$SEG.SECTORS(FIRST_SECTOR)) ;
     1949    10362    5      DCW$ = PINCRW (IS$, CALL_SEQ$ -> CALL_SEQUENCE.FDCWP) ;
     1950    10363    5      TARGET$ = PINCRW (IS$, DCW.ADDRESS) ;
     1951    10364    5      STATUS$ = PINCRW (IS$, CALL_SEQ$ -> CALL_SEQUENCE.STATUSP) ;
     1952    10365           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:72   
     1953    10366           /* calculate the number of sectors to move from the DCW */
     1954    10367    5      IF MOD (DCW.WORD_COUNT, 64) = 0
     1955    10368    6      THEN DO ;
     1956    10369    6              SECTORS_REQUESTED = DCW.WORD_COUNT / 64 ;
     1957    10370    6              IF FIRST_SECTOR + (SECTORS_REQUESTED - 1) < SEG$ -> TOM$SEG.LAST_SECTOR
     1958    10371    7              THEN DO ;
     1959    10372    7                      SECTOR_COUNT = SECTORS_REQUESTED ;
     1960    10373    7                      EOF = %FALSE ;
     1961    10374    7                   END /* THEN */ ;
     1962    10375    7              ELSE DO ;
     1963    10376    7                      SECTOR_COUNT = SEG$->TOM$SEG.LAST_SECTOR - FIRST_SECTOR + 1;
     1964    10377    7                      EOF = %TRUE ;
     1965    10378    7                   END /* ELSE */ ;
     1966    10379
     1967    10380                   /* copy the data from buffer to test page and return word count */
     1968    10381    7              DO I = 0 TO SECTOR_COUNT - 1 ;
     1969    10382    7                 TARGET$ -> DATA_SECTOR(I) = SOURCE$ -> DATA_SECTOR(I) ;
     1970    10383    7              END /* DO */ ;
     1971    10384    6              WORD_COUNT = SECTOR_COUNT * 64 ;
     1972    10385
     1973    10386                   /* return status */
     1974    10387    6              STATUS.NEXT_ADDRESS = DCW.ADDRESS + WORD_COUNT ;
     1975    10388    6              STATUS.RESIDUE = DCW.WORD_COUNT - WORD_COUNT ;
     1976    10389    6              RETURN ;
     1977    10390    6           END /* THEN */ ;
     1978    10391    6      ELSE DO ;
     1979    10392    6              TOM_ERROR_CODE.ERR# = %E$WDCNTNOT64 ;
     1980    10393    6              CALL TOX$ERROR (TOM_ERROR_CODE) ;
     1981    10394    6           END /* ELSE */ ;
     1982    10395
     1983    10396    5   END TOM$MOVE_SECTORS ;
     1984    10397    4   END TOM$RETURN_DATA ;
     1985    10398    3   END TOM$SEEK_DECK ;
     1986    10399        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:73   
     1987    10400        /*I* NAME:         TOM$READ_DECK_KEY
     1988    10401             AUTHOR:       Scott S. Sheppard
     1989    10402             PURPOSE:      obtains the object key for the catalog entry
     1990    10403             INTERFACE:    M$READ
     1991    10404                           TOX$ERROR
     1992    10405                           TOX$SCREECH
     1993    10406             PARAMETERS:   None passed.
     1994    10407             DATA:         CATALOG_ENTRY_KEY - input
     1995    10408                           OBJECT_KEY - output
     1996    10409                           TOM_ERROR_CODE - output
     1997    10410             DESCRIPTION:  This  procedure  uses  the  catalog  entry key
     1998    10411                           constructed  by TOM$BUILD_CATALOG_ENTRY_KEY to
     1999    10412                           do  a M$READ  on the  CP-6 deckfile.  The data
     2000    10413                           returned  by  the  read  is  itself  a key, an
     2001    10414                           object key.  The object key can  be used later
     2002    10415                           to actually obtain the $object, binary, patch,
     2003    10416                           and $dkend cardsa  which actually comprise the
     2004    10417                           deck.
     2005    10418        */
     2006    10419        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:74   
     2007    10420    2   TOM$READ_DECK_KEY: PROC;
     2008    10421
     2009    10422           %FPT_READ (FPTN = READ_OBJECT_KEY,
     2010    10423                      BUF = OBJECT_KEY,
     2011    10424                      DCB = M$DECKFILE,
     2012    10425                      KEY = CATALOG_ENTRY_KEY,
     2013    10426                      KEYS = YES,
     2014    10427                      WAIT = YES);
     2015    10466
     2016    10467        /* Code */
     2017    10468
     2018    10469    3      CALL M$READ (READ_OBJECT_KEY) WHENRETURN
     2019    10470    4           DO ;
     2020    10471    4              IF OBJECT_KEY.SIZE = 23
     2021    10472    4              THEN RETURN ;
     2022    10473    5              ELSE DO ;
     2023    10474    5                      TOM_ERROR_CODE.ERR# = %E$ILLOBJKEY ;
     2024    10475    5                      CALL TOX$SCREECH (TOM_ERROR_CODE) ;
     2025    10476    5                   END /* ELSE */ ;
     2026    10477    4           END /* WHENRETURN */ ;
     2027    10478    3      WHENALTRETURN
     2028    10479    4           DO ;
     2029    10480    4              TOM_ERROR_CODE.ERR# = %E$OBJREAD ;
     2030    10481    4              CALL TOX$ERROR (TOM_ERROR_CODE) ;
     2031    10482    4           END /* WHENALTRETURN */ ;
     2032    10483
     2033    10484    3   END TOM$READ_DECK_KEY;
     2034    10485        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:75   
     2035    10486        /*I* NAME:         TOM$READ_DECK
     2036    10487             AUTHOR:       Scott S. Sheppard
     2037    10488             PURPOSE:      obtains deck from the deckfile
     2038    10489             INTERFACE:    TOL$GET_DECK
     2039    10490                           TOL$GET_NIO_DECK
     2040    10491             PARAMETERS:   TCX - test control index (input)
     2041    10492                           CALL_SEQ$ - address of call sequence (input)
     2042    10493                           X2 - maximum load address (input)
     2043    10494                           X3 - test page base (input)
     2044    10495                           A - load size in words (output)
     2045    10496             DATA:         LOAD_SIZE - input
     2046    10497                           READ_ERROR_CODE - output
     2047    10498                           OBJECT_KEY - input
     2048    10499                           CALL_SEQUENCE - input
     2049    10500                           TOP$TCP.TEST_TYPE(TCX) - input
     2050    10501             DESCRIPTION:  This  procedure reads the  deck image from the
     2051    10502                           deckfile  and places it  in the user's buffer.
     2052    10503                           The  error code  is set  up, and  the count of
     2053    10504                           words read.
     2054    10505                            - the read error code and count of words read
     2055    10506                           are cleared
     2056    10507                            - TOL$GET_DECK is called to read the deck in,
     2057    10508                           using  the  object  key  built  previusly, the
     2058    10509                           user's call sequence, and load size
     2059    10510                            - the number of words read is saved in A
     2060    10511        */
     2061    10512        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:76   
     2062    10513    2   TOM$READ_DECK: PROC (TCX, CALL_SEQ$, X2, X3, A) ;
     2063    10514
     2064    10515    3      DCL TCX       UBIN WORD ALIGNED ;
     2065    10516    3      DCL CALL_SEQ$ PTR ALIGNED ;
     2066    10517    3      DCL X2        UBIN HALF HALIGNED ;
     2067    10518    3      DCL X3        UBIN HALF HALIGNED ;
     2068    10519    3      DCL A         UBIN WORD ALIGNED ;
     2069    10520
     2070    10521        /* Code */
     2071    10522
     2072    10523           /* initialize the values */
     2073    10524    3      LOAD_SIZE = 0;
     2074    10525    3      READ_ERROR_CODE = 0;
     2075    10526
     2076    10527           /* get the object deck from the deckfile */
     2077    10528    4      DO SELECT (TOP$TCP.TEST_TYPE(TCX)) ;
     2078    10529    4         SELECT ('NIO', 'RPM') ;
     2079    10530    4         CALL TOL$GET_NIO_DECK (OBJECT_KEY,
     2080    10531    4                 X3,
     2081    10532    4                 CALL_SEQ$ -> CALL_SEQUENCE,
     2082    10533    4                 X2,
     2083    10534    4                 LOAD_SIZE,
     2084    10535    4                 READ_ERROR_CODE,);
     2085    10536    4         SELECT (ELSE);
     2086    10537    4      CALL TOL$GET_DECK (OBJECT_KEY,
     2087    10538    4              X3,
     2088    10539    4              CALL_SEQ$ -> CALL_SEQUENCE,
     2089    10540    4              X2,
     2090    10541    4              LOAD_SIZE,
     2091    10542    4              READ_ERROR_CODE,);
     2092    10543    4      END /* DO SELECT */ ;
     2093    10544
     2094    10545           /* Save word count for user */
     2095    10546    3      A = LOAD_SIZE;
     2096    10547    3      RETURN;
     2097    10548
     2098    10549    3   END TOM$READ_DECK;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:77   
     2099    10550    2   END TOM$MME_DATADT ;
     2100    10551        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:78   
     2101    10552        /*I* NAME:         TOM$MATCH_ICC
     2102    10553             PURPOSE:      locate TEST CONTROL entry in TCP
     2103    10554             INTERFACE:    TOX$SCREECH
     2104    10555             INPUT:        Q - IOM, Channel Number
     2105    10556             OUTPUT:       TCX - index into TOP$TCP
     2106    10557             DESCRIPTION:  This procedure locates information from the
     2107    10558                           test control list by searching the list for
     2108    10559                           a matching  Iom number Channel number  from
     2109    10560                           the Q register.   The procedure returns the
     2110    10561                           index into the list of test information.
     2111    10562        */
     2112    10563
     2113    10564    1   TOM$MATCH_ICC: PROC (Q, TCX) ;
     2114    10565
     2115    10566    2      DCL 1 Q ALIGNED,
     2116    10567    2            2 *                      BIT (6) UNAL,
     2117    10568    2            2 FORMAT#                BIT (1) UNAL,
     2118    10569    2            2 NEW_FORMAT,
     2119    10570    2              3 IOM#                 UBIN (3) UNAL,
     2120    10571    2              3 CHAN#                UBIN (8) UNAL,
     2121    10572    2            2 OLD_FORMAT REDEF NEW_FORMAT,
     2122    10573    2              3 IOM#                 UBIN (5) UNAL,
     2123    10574    2              3 CHAN#                UBIN (6) UNAL,
     2124    10575    2            2 *                      BIT (18) UNAL ;
     2125    10576    2      DCL TCX                        UBIN WORD ALIGNED ;
     2126    10577    2      DCL I                          UBIN WORD ALIGNED ;
     2127    10578    2      DCL 1 ICC ALIGNED,
     2128    10579    2            2 IOM#                   UBIN (3) UNAL,
     2129    10580    2            2 CHAN#                  UBIN (8) UNAL ;
     2130    10581    2      DCL ICC_ REDEF ICC UBIN (11) ALIGNED ;
     2131    10582           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:79   
     2132    10583        /* Code */
     2133    10584
     2134    10585           /* set up the IOM and CHANNEL number for the search */
     2135    10586    2      IF Q.FORMAT#
     2136    10587    3      THEN DO ;
     2137    10588    3              ICC.IOM# = Q.NEW_FORMAT.IOM# ;
     2138    10589    3              ICC.CHAN# = Q.NEW_FORMAT.CHAN# ;
     2139    10590    3           END /* THEN */ ;
     2140    10591    3      ELSE DO ;
     2141    10592    3              ICC.IOM# = Q.OLD_FORMAT.IOM# ;
     2142    10593    3              ICC.CHAN# = Q.OLD_FORMAT.CHAN# ;
     2143    10594    3           END /* ELSE */ ;
     2144    10595
     2145    10596           /* start with first test page (zeroeth entry) and proceed */
     2146    10597    3      DO I = 0 TO 7 ;
     2147    10598    3         IF TOP$TCP.ICC.ICC#(I) = ICC_
     2148    10599    4         THEN DO ;
     2149    10600    4                 TCX = I ;
     2150    10601    4                 RETURN ;
     2151    10602    4              END /* THEN */ ;
     2152    10603    3         ELSE /* Do Nothing */ ;
     2153    10604    3      END /* DO */ ;
     2154    10605
     2155    10606           /* the IOM/CHANNEL number was not in the table */
     2156    10607    2      TOM_ERROR_CODE.ERR# = %E$INVICC ;
     2157    10608    2      CALL TOX$SCREECH (TOM_ERROR_CODE) ;
     2158    10609
     2159    10610    2   END TOM$MATCH_ICC ;
     2160    10611        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:80   
     2161    10612        /*I*  NAME:        TOM$GET_DATA_SEGMENT
     2162    10613              AUTHOR:      Scott S. Sheppard
     2163    10614              PURPOSE:     Gets Dynamic Memory Space
     2164    10615              INTERFACE:   M$GDS Monitor Service
     2165    10616                           TOX$ERROR
     2166    10617              PARAMETERS:  WORD_COUNT   - number of words needed
     2167    10618                           WORD_VECTOR  - vector to the set of words
     2168    10619              DESCRIPTION: This procedure gets a set of dynamic words to be
     2169    10620                           used as data area.
     2170    10621        */
     2171    10622
     2172    10623    1   TOM$GET_DATA_SEGMENT: PROC (WORD_COUNT, WORD_VECTOR) ;
     2173    10624
     2174    10625    2      DCL WORD_COUNT     UBIN WORD ALIGNED ;
     2175    10626    2      DCL WORD_VECTOR    BIT (72) DALIGNED ;
     2176    10627           %FPT_GDS (FPTN    = GET_BUFFER,
     2177    10628                     FREE    = YES) ;
     2178    10644
     2179    10645        /* Code */
     2180    10646
     2181    10647    2      GET_BUFFER.V.SEGSIZE# = WORD_COUNT ;
     2182    10648    2      GET_BUFFER.RESULTS_ = VECTOR (WORD_VECTOR) ;
     2183    10649    2      CALL M$GDS (GET_BUFFER) ALTRET (GET_ERROR) ;
     2184    10650    2      RETURN ;
     2185    10651
     2186    10652    2   GET_ERROR:
     2187    10653    2      CALL TOX$ERROR (B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR) ;
     2188    10654
     2189    10655    2   END TOM$GET_DATA_SEGMENT ;
     2190    10656        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:81   
     2191    10657        /*I*  NAME:        TOM$FREE_DATA_SEGMENT
     2192    10658              AUTHOR:      Scott S. Sheppard
     2193    10659              PURPOSE:     Frees Dynamic Memory Space
     2194    10660              INTERFACE:   M$FDS Monitor Service
     2195    10661                           TOX$ERROR
     2196    10662              PARAMETERS:  WORD_COUNT   - number of words in segment
     2197    10663                           WORD_VECTOR  - vector to the set of words
     2198    10664              DESCRIPTION: This procedure frees a set of dynamic words
     2199    10665                           that are no longer needed as data space.
     2200    10666        */
     2201    10667
     2202    10668    1   TOM$FREE_DATA_SEGMENT: PROC (WORD_COUNT, WORD_VECTOR) ;
     2203    10669
     2204    10670    2      DCL WORD_COUNT     UBIN WORD ALIGNED ;
     2205    10671    2      DCL WORD_VECTOR    BIT (72) DALIGNED ;
     2206    10672           %FPT_FDS (FPTN    = FREE_BUFFER) ;
     2207    10687
     2208    10688        /* Code */
     2209    10689
     2210    10690    2      FREE_BUFFER.V.SEGSIZE# = WORD_COUNT ;
     2211    10691    2      FREE_BUFFER.RESULTS_ = VECTOR (WORD_VECTOR) ;
     2212    10692    2      CALL M$FDS (FREE_BUFFER) ALTRET (FREE_ERROR) ;
     2213    10693    2      RETURN ;
     2214    10694
     2215    10695    2   FREE_ERROR:
     2216    10696    2      CALL TOX$ERROR (B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR) ;
     2217    10697
     2218    10698    2   END TOM$FREE_DATA_SEGMENT ;
     2219    10699        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:82   
     2220    10700        /*I* NAME:         TOM$SET_RETURN_VALUES
     2221    10701             AUTHOR:       Scott S. Sheppard
     2222    10702             PURPOSE:      returns data to caller from MME CATADT / DATADT
     2223    10703             INTERFACE:    None called.
     2224    10704             PARAMETERS:   RETURN_DELTA - output
     2225    10705                           Q - output
     2226    10706             DATA:         READ_ERROR_CODE - input / output
     2227    10707             DESCRIPTION:  This  procedure sets up  the return values for
     2228    10708                           MME CATADT. These values are based on the read
     2229    10709                           error  code  returned  by  the loader when the
     2230    10710                           catalog was read from the deckfile.
     2231    10711        */
     2232    10712
     2233    10713    1   TOM$SET_RETURN_VALUES: PROC (Q, RETURN_DELTA) ;
     2234    10714
     2235    10715    2      DCL Q            UBIN WORD ALIGNED ;
     2236    10716    2      DCL RETURN_DELTA SBIN HALF HALIGNED ;
     2237    10717
     2238    10718        /* Code */
     2239    10719
     2240    10720    3      DO CASE (READ_ERR_CODE.CODE) ;
     2241    10721    3         CASE (0) ;
     2242    10722    3            RETURN_DELTA = 3 ;
     2243    10723    3         CASE (42) ;
     2244    10724    3            READ_ERROR_CODE = 0 ;
     2245    10725    3            RETURN_DELTA = 2 ;
     2246    10726    3         CASE (ELSE) ;
     2247    10727    3            RETURN_DELTA = 1 ;
     2248    10728    3      END /* CASE */ ;
     2249    10729    2      Q = READ_ERROR_CODE ;
     2250    10730    2      RETURN ;
     2251    10731
     2252    10732    2   END TOM$SET_RETURN_VALUES ;
     2253    10733        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:83   
     2254    10734        /*I* NAME:         TOM$MME_FREEZE
     2255    10735             AUTHOR:       Scott S. Sheppard
     2256    10736             PURPOSE:      Handles MME FREEZE
     2257    10737             INTERFACE:    None called.
     2258    10738             PARAMETERS:   RETURN_DELTA - output
     2259    10739             DATA:         No external data accessed.
     2260    10740             DESCRIPTION:  This  procedure merely sets  RETURN DELTA to 1
     2261    10741                           (for a normal return)  since MME FREEZE is not
     2262    10742                           needed, but legal, for CP-6 TOLTS.
     2263    10743        */
     2264    10744
     2265    10745    1   TOM$MME_FREEZE: PROC (RETURN_DELTA) ;
     2266    10746
     2267    10747    2      DCL RETURN_DELTA SBIN HALF HALIGNED ;
     2268    10748
     2269    10749        /* Code */
     2270    10750
     2271    10751    2      RETURN_DELTA = 1 ;
     2272    10752    2      RETURN ;
     2273    10753
     2274    10754    2   END TOM$MME_FREEZE ;
     2275    10755        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:84   
     2276    10756        /*I* NAME:         TOM$MME_UNFREZ
     2277    10757             AUTHOR:       Scott S. Sheppard
     2278    10758             PURPOSE:      Handles MME UNFREZ
     2279    10759             INTERFACE:    None called.
     2280    10760             PARAMETERS:   RETURN_DELTA - output
     2281    10761             DATA:         No external data accessed.
     2282    10762             DESCRIPTION:  This  procedure merely sets  RETURN DELTA to 1
     2283    10763                           (for a normal return)  since MME UNFREZ is not
     2284    10764                           needed, but legal, for CP-6 TOLTS.
     2285    10765        */
     2286    10766
     2287    10767    1   TOM$MME_UNFREZ: PROC (RETURN_DELTA) ;
     2288    10768
     2289    10769    2      DCL RETURN_DELTA SBIN HALF HALIGNED ;
     2290    10770
     2291    10771        /* Code */
     2292    10772
     2293    10773    2      RETURN_DELTA = 1 ;
     2294    10774    2      RETURN ;
     2295    10775
     2296    10776    2   END TOM$MME_UNFREZ ;
     2297    10777    1   END TOM$MOLTS;

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:85   
--  Include file information  --

   TO_PERR_C.:E05TOU  is referenced.
   TOT_TOLTS_M.:E05TOU  is referenced.
   TOT_RQSTS_E.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure TOM$MOLTS.

   Procedure TOM$MOLTS requires 2066 words for executable code.
   Procedure TOM$MOLTS requires 60 words of local(AUTO) storage.

    No errors detected in file TOM$MOLTS.:E05TSI    .

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:86   

 Object Unit name= TOM$MOLTS                                  File name= TOM$MOLTS.:E05TOU
 UTS= JUL 30 '97 06:26:47.16 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none   136    210  TOM$MOLTS
    2  RoData even  UTS     62     76  TOM$MOLTS
    3   DCB   even  none     0      0  M$DECKFILE
    4   Proc  even  none  2066   4022  TOM$MOLTS
    5  RoData even  none    70    106  TOM$MOLTS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     4      0   yes            yes      Std        4  TOM$MOLTS
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:87   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std      11 TOL$CHECK_CALL_SEQUENCE
         yes           Std       1 TOX$ERROR
         yes           Std       0 TOT$CONSOLE_OUT
         yes           Std       0 TOT$CONSOLE_IN
 yes     yes           Std       6 TOL$GET_CATALOG
         yes           Std       7 TOL$GET_DATA
 yes     yes           Std       7 TOL$SAVE_DATA
         yes           Std       3 TOT$ASCII_BCD
 yes     yes           Std       7 TOL$CLEAR_DATA
         yes           Std       1 TOX$SCREECH
 yes     yes           Std       7 TOL$GET_NIO_DECK
 yes     yes           Std       7 TOL$GET_DECK
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_INDEX

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                CONSOLE_FPT
     READ_IO                               TOT$DMC                               M$DECKFILE
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:88   


        1        1        /*M* TOM$MOLTS     TOLTS Mainframe On-Line Testing System */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P* NAME:         TOM$MOLTS
       12       12             PURPOSE:      provide service routines for slave mode MOLTS
       13       13             DESCRIPTION:  This module contains service routines for
       14       14                           the following MME requests from slave mode MOLTS:
       15       15                                CATADT (-50)     DATADT (-51)
       16       16                                FREEZE (-53)     UNFREZ (-54)
       17       17
       18       18                           Other MME's used by slave mode MOLTS are processed
       19       19                           by other interface modules, notably TOP$POLTS.
       20       20            LAST UPDATE:   02/27/86
       21       21            REFERENCE:     CP-6 D00 E integration
       22       22        */
       23       23        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:89   
       24       24        /*F*  NAME:        TOM$MOLTS
       25       25              DESCRIPTION: Procedure Nesting Hierarchy
       26       26
       27       27              TOM$MOLTS: procedure (MME,MREG,MME_INSTR$,RETURN_DELTA)
       28       28
       29       29                 TOM$MME_CATADT: procedure (X1, X2, X3, A, Q, RD)
       30       30                    TOM$REFORMAT_INIT: procedure (X1, X2, X3) ALTRET
       31       31                    TOM$BUILD_CATALOG_KEY: procedure (TCX) ALTRET
       32       32                       TOM$SET_ITR_CATALOG_KEY: procedure ALTRET
       33       33                       TOM$HAVE_USER_PICK: procedure
       34       34                          TOM$FETCH_CATALOG_TABLE: procedure
       35       35                          TOM$COUNT_APPL_CATALOGS: procedure
       36       36                          TOM$SHOW_APPL_CHOICES: procedure
       37       37                          TOM$GET_USER_CHOICE: procedure
       38       38                       TOM$SET_MDR_CATALOG_KEY: procedure ALTRET
       39       39                       TOM$SET_NIO_CATALOG_KEY: procedure
       40       40                    TOM$READ_CATALOG: procedure (X2, X3) ALTRET
       41       41                    TOM$REFORMAT_CATALOG_DATA: procedure (TCX, A)
       42       42                       TOM$RETURN_NIO_ENTRIES: procedure (A) ALTRET
       43       43                          TOM$BUILD_NIO_ENTRY: procedure
       44       44                       TOM$RETURN_STD_ENTRIES: procedure (A) ALTRET
       45       45                          TOM$BUILD_STD_ENTRY: procedure
       46       46                    TOM$CLEAR_EXCESS_DATA: procedure
       47       47                    TOM$SET_ERROR_RETURN_VALUES: procedure (E, A, Q, RD)
       48       48
       49       49                 TOM$MME_DATADT: procedure (X1, X2, X3, X4, A, Q, RD)
       50       50                    TOM$BUILD_CATALOG_ENTRY_KEY: procedure (X1, CS$)
       51       51                    TOM$ALLOCATE_SEGTBLS: procedure
       52       52                    TOM$SEEK_DECK: procedure (TCX, X2, X3, X4, A)
       53       53                       TOM$FIND_SEG_FOR_ENTRY: procedure (TCX, STX) ALTRET
       54       54                       TOM$FREE_SEG_FOR_ENTRY: procedure (TCX, STX)
       55       55                       TOM$FIND_UNUSED_SEG: procedure (TCX, STX)
       56       56                       TOM$ALLOCATE_SEG: procedure (TCX, STX)
       57       57                       TOM$COPY_CALL_SEQUENCE: procedure (TCX, STX, SEQ$)
       58       58                       TOM$RETURN_DATA: procedure (TCX, STX, X4)
       59       59                          TOM$MOVE_SECTORS: procedure (SEG$, SC, WC, EOF)
       60       60                    TOM$READ_DECK_KEY: procedure
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:90   
       61       61                    TOM$READ_DECK: procedure (TCX, CS$, X2, X3, A)
       62       62
       63       63                 TOM$MATCH_ICC: procedure (Q, TCX)
       64       64                 TOM$GET_DATA_SEGMENT: procedure (WC, WV)
       65       65                 TOM$FREE_DATA_SEGMENT: procedure (WC, WV)
       66       66                 TOM$SET_RETURN_VALUES: procedure (Q, RD)
       67       67
       68       68                 TOM$MME_FREEZE: procedure (RD)
       69       69                 TOM$MME_UNFREZ: procedure (RD)
       70       70        */
       71       71        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:91   
       72       72        TOM$MOLTS: PROC (MME, MREG, MME_INSTR$, RETURN_DELTA);

     72  4 000000   000000 700200 xent  TOM$MOLTS    TSX0  ! X66_AUTO_4
         4 000001   000074 000004                    ZERO    60,4

       73       73
       74       74        /* Include files */
       75       75
       76       76           %INCLUDE B_SEGIDS_C ;
       77      615           %INCLUDE CP_6;
       78     6174           %INCLUDE TOT_RQSTS_E ;
       79     6216           %INCLUDE TOT_TOLTS_M;
       80     7334           %INCLUDE TO_PERR_C ;
       81     7919
       82     7920        /* Parameters Passed at Call */
       83     7921
       84     7922           %MME ;
       85     7943           %MREG ;
       86     7965           %MME_INSTR$ ;
       87     7968           %RETURN_DELTA ;
       88     7971
       89     7972        /* External Entries */
       90     7973
       91     7974    1      DCL TOT$ASCII_BCD           ENTRY (3) ;
       92     7975    1      DCL TOL$CHECK_CALL_SEQUENCE ENTRY (11) ALTRET ;
       93     7976    1      DCL TOT$CONSOLE_IN          ENTRY ;
       94     7977    1      DCL TOT$CONSOLE_OUT         ENTRY ;
       95     7978    1      DCL TOL$GET_DATA            ENTRY (7) ;
       96     7979    1      DCL TOL$SAVE_DATA           ENTRY (7)  ALTRET ;
       97     7980    1      DCL TOL$CLEAR_DATA          ENTRY (7)  ALTRET ;
       98     7981    1      DCL TOL$GET_CATALOG         ENTRY (6)  ALTRET ;
       99     7982    1      DCL TOL$GET_DECK            ENTRY (7)  ALTRET ;
      100     7983    1      DCL TOL$GET_NIO_DECK        ENTRY (7)  ALTRET ;
      101     7984    1      DCL TOX$ERROR               ENTRY (1) ;
      102     7985    1      DCL TOX$SCREECH             ENTRY (1) ;
      103     7986           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:92   
      104     7987        /* Variables */
      105     7988
      106     7989    1      DCL DATA_IN$        STATIC PTR ALIGNED INIT (ADDR(OBJECT_KEY));
      107     7990    1      DCL DATA_OUT$       STATIC PTR ALIGNED INIT (ADDR(GCOS_STD_ENTRY));
      108     7991    1      DCL 1 DCW_I STATIC ALIGNED,
      109     7992    1            2 AD    UBIN(18) UNAL,
      110     7993    1            2 TYP   UBIN(6) UNAL,
      111     7994    1            2 SIZE  UBIN(12) UNAL;
      112     7995    1      DCL 1 DCW_O STATIC ALIGNED,
      113     7996    1            2 AD    UBIN(18) UNAL,
      114     7997    1            2 TYP   UBIN(6)UNAL,
      115     7998    1            2 SIZE  UBIN(12) UNAL;
      116     7999    1      DCL DATA_LENGTH_IN  STATIC UBIN(36) ALIGNED INIT (6);
      117     8000    1      DCL DATA_LENGTH_OUT STATIC UBIN(36) ALIGNED INIT (4);
      118     8001    1      DCL DATA_SIZE_IN    STATIC UBIN(36) ALIGNED;
      119     8002    1      DCL DATA_SIZE_OUT   STATIC UBIN(36) ALIGNED;
      120     8003    1      DCL ENTRY_NO        STATIC UBIN(18) ALIGNED;
      121     8004    1      DCL LAST_ENTRY_NO   STATIC UBIN(18) ALIGNED;
      122     8005           %IS$ (STCLASS = CONSTANT) ;
      123     8019    1      DCL LOAD_SIZE       STATIC UBIN(36) ALIGNED;
      124     8020    1      DCL START_LOAD$     STATIC PTR ALIGNED INIT (ADDR(LOAD));
      125     8021    1      DCL 1 LOAD STATIC ALIGNED,
      126     8022    1            2 *   UBIN(3) UNAL INIT (3),
      127     8023    1            2 *   UBIN(33) UNAL;
      128     8024           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:93   
      129     8025           /* MME CATA return entries */
      130     8026
      131     8027    1      DCL 1 CP6_STD_ENTRY STATIC ALIGNED,
      132     8028    1            2 NAME  UBIN(36) UNAL,
      133     8029    1            2 *     UBIN(6) UNAL,
      134     8030    1            2 DECK  UBIN(24) UNAL,
      135     8031    1            2 *     UBIN(6) UNAL,
      136     8032    1            2 REV   UBIN(12) UNAL,
      137     8033    1            2 *     UBIN(24) UNAL;
      138     8034    1      DCL 1 CP6_NIO_ENTRY REDEF CP6_STD_ENTRY ALIGNED,
      139     8035    1            2 CLASS      UBIN  (6) UNAL,
      140     8036    1            2 EQUIP_TYPE UBIN (24) UNAL,
      141     8037    1            2 FILE_NAME  BIT  (48) UNAL,
      142     8038    1            2 X_OF_N     UBIN (12) UNAL,
      143     8039    1            2 *          UBIN (18) UNAL ;
      144     8040    1      DCL 1 GCOS_STD_ENTRY STATIC ALIGNED,
      145     8041    1            2 DECK   UBIN(24) UNAL,
      146     8042    1            2 REV    UBIN(12) UNAL,
      147     8043    1            2 ENTRY# UBIN(18) UNAL,
      148     8044    1            2 *      UBIN (18) UNAL,
      149     8045    1            2 NAME   UBIN(36) UNAL,
      150     8046    1            2 USAGE  BIT (36) UNAL ;
      151     8047    1      DCL 1 GCOS_NIO_ENTRY REDEF GCOS_STD_ENTRY ALIGNED,
      152     8048    1            2 EQUIP_TYPE UBIN (24) UNAL,
      153     8049    1            2 X_OF_N     UBIN (12) UNAL,
      154     8050    1            2 ENTRY#     UBIN (18) UNAL,
      155     8051    1            2 NIO_FLAG   UBIN (18) UNAL,
      156     8052    1            2 FILE_NAME  BIT  (48) UNAL,
      157     8053    1            2 DISK_TAB   UBIN (12) UNAL,
      158     8054    1            2 PGM_TAB    UBIN (12) UNAL ;
      159     8055           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:94   
      160     8056        /* Call Sequences to communicate with the loader */
      161     8057
      162     8058    1      DCL CALL_SEQ$       PTR ALIGNED ;
      163     8059           %TOM$CALL_SEQUENCE (FPTN = CALL_SEQUENCE,
      164     8060                               STCLASS = BASED) ;
      165     8091           %TOM$CALL_SEQUENCE (FPTN = MY_CALL_SEQUENCE,
      166     8092                               STCLASS = STATIC) ;
      167     8123
      168     8124        /* Status Storage and Pointers */
      169     8125
      170     8126    1      DCL STATUS_I$ STATIC PTR ALIGNED INIT (ADDR(STAT_I));
      171     8127    1      DCL STATUS_O$ STATIC PTR ALIGNED INIT (ADDR(STAT_O));
      172     8128    1      DCL STATUS_U$ STATIC PTR ALIGNED;
      173     8129    1      DCL 1 STAT_I STATIC ALIGNED,
      174     8130    1            2 W1 BIT(36) ALIGNED,
      175     8131    1            2 AD UBIN(18) UNAL,
      176     8132    1            2 RES UBIN(18) UNAL;
      177     8133    1      DCL 1 STAT_O STATIC ALIGNED,
      178     8134    1            2 W1 BIT(36) ALIGNED,
      179     8135    1            2 AD UBIN(18) UNAL,
      180     8136    1            2 RES UBIN(18) UNAL;
      181     8137    1      DCL 1 STAT_U BASED,
      182     8138    1            2 W1 BIT(36) ALIGNED,
      183     8139    1            2 AD UBIN(18) UNAL,
      184     8140    1            2 RES UBIN(18) UNAL;
      185     8141           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:95   
      186     8142        /* Error Codes for the Loader */
      187     8143
      188     8144    1      DCL READ_ERROR_CODE STATIC UBIN(36) ALIGNED ;
      189     8145    1      DCL 1 READ_ERR_CODE REDEF READ_ERROR_CODE,
      190     8146    1            2 *           UBIN(27) UNAL,
      191     8147    1            2 CODE        UBIN(9) UNAL;
      192     8148           %VLP_ERRCODE (FPTN = TOM_ERROR_CODE,
      193     8149                         FCG  = 'TO',
      194     8150                         MID  = 'M',
      195     8151                         SEV  = 0) ;
      196     8196
      197     8197        /* Deckfile Key Images */
      198     8198
      199     8199    1      DCL 1 CATALOG_KEY STATIC CALIGNED,
      200     8200    1            2 SIZE    UBIN(9) UNAL INIT (23),
      201     8201    1            2 DATA    CHAR(23) UNAL,
      202     8202    1            2 NAME REDEF DATA,
      203     8203    1              3 CATA  CHAR(5) UNAL,
      204     8204    1              3 TYP   CHAR(4) UNAL,
      205     8205    1              3 APPL  CHAR(6) UNAL,
      206     8206    1              3 *     CHAR(8) UNAL;
      207     8207    1      DCL 1 CATALOG_ENTRY_KEY STATIC CALIGNED,
      208     8208    1            2 *       UBIN (9) UNAL INIT (4),
      209     8209    1            2 DECK    UBIN(18) UNAL,
      210     8210    1            2 ENTRY#  UBIN(18) UNAL;
      211     8211    1      DCL 1 OBJECT_KEY STATIC,
      212     8212    1            2 SIZE    UBIN(9) CALIGNED,
      213     8213    1            2 DATA    CHAR(23) CALIGNED ;
      214     8214           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:96   
      215     8215        /* External Variables */
      216     8216
      217     8217    1      DCL B$TCB$ PTR SYMREF ;
      218     8218           %B$ALT ;
      219     8226           %B$TCB ;
      220     8229           %FPT_WRITE (FPTN = CONSOLE_FPT,
      221     8230                       STCLASS = SYMREF) ;
      222     8261           %FPT_READ (FPTN = READ_IO,
      223     8262                      STCLASS = SYMREF) ;
      224     8301           %TOM$ITRTBL (STCLASS = "BASED (TOT$DMC.TOM$ITRTBL.PTR$)") ;
      225     8353           %TOM$SEGTBLS (STCLASS = "BASED (TOT$DMC.TOM$SEGTBLS.PTR$)") ;
      226     8365           %TOM$SEGTBL (STCLASS = BASED) ;
      227     8387           %TOM$SEG (STCLASS = BASED) ;
      228     8408           %TOT$DMC (STCLASS = SYMREF) ;
      229     8442           %TOP$TCP (STCLASS = "BASED (TOT$DMC.TOP$TCP.PTR$)") ;
      230     8530           %TOT$ECP (STCLASS = SYMREF) ;
      231     8579
      232     8580        /* Data Control Block for deckfile */
      233     8581
      234     8582    1      DCL M$DECKFILE DCB ;
      235     8583           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:97   
      236     8584        /* Main Code */
      237     8585
      238     8586    2      DO CASE (-MME.INST.NO);

   8586  4 000002   200003 470500                    LDP0    @MME,,AUTO
         4 000003   000000 236100                    LDQ     0,,PR0
         4 000004   000022 732000                    QRS     18
         4 000005   000027 676000 xsym               ERQ     B_VECTNIL+23
         4 000006   000061 136007                    SBLQ    49,DL
         4 000007   000005 116007                    CMPQ    5,DL
         4 000010   000012 602006 4                  TNC     s:8586+8,QL
         4 000011   000103 710000 4                  TRA     s:8598
         4 000012   000017 710000 4                  TRA     s:8588
         4 000013   000043 710000 4                  TRA     s:8591
         4 000014   000103 710000 4                  TRA     s:8598
         4 000015   000072 710000 4                  TRA     s:8594
         4 000016   000077 710000 4                  TRA     s:8596

      239     8587    2         CASE (%CATADT);

      240     8588    2            CALL TOM$MME_CATADT (MREG.X1, MREG.X2, MREG.X3,

   8588  4 000017   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         4 000020   200016 756100                    STQ     @A+1,,AUTO
         4 000021   200004 236100                    LDQ     @MREG,,AUTO
         4 000022   000005 036003                    ADLQ    5,DU
         4 000023   200015 756100                    STQ     @X4+1,,AUTO
         4 000024   200004 236100                    LDQ     @MREG,,AUTO
         4 000025   000004 036003                    ADLQ    4,DU
         4 000026   200014 756100                    STQ     @X3+1,,AUTO
         4 000027   200004 236100                    LDQ     @MREG,,AUTO
         4 000030   000000 036000 5                  ADLQ    0
         4 000031   200013 756100                    STQ     @X2+1,,AUTO
         4 000032   200004 236100                    LDQ     @MREG,,AUTO
         4 000033   000001 036003                    ADLQ    1,DU
         4 000034   200012 756100                    STQ     @RETURN_DELTA+1,,AUTO
         4 000035   200004 236100                    LDQ     @MREG,,AUTO
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:98   
         4 000036   400000 036007                    ADLQ    -131072,DL
         4 000037   200011 756100                    STQ     CALL_SEQ$+2,,AUTO
         4 000040   000104 701000 4                  TSX1    TOM$MME_CATADT
         4 000041   000000 011000                    NOP     0
         4 000042   000103 710000 4                  TRA     s:8598

      241     8589    2                    MREG.A, MREG.Q, RETURN_DELTA) ;
      242     8590    2         CASE (%DATADT);

      243     8591    2            CALL TOM$MME_DATADT (MREG.X1, MREG.X2, MREG.X3, MREG.X4,

   8591  4 000043   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         4 000044   200017 756100                    STQ     @Q+1,,AUTO
         4 000045   200004 236100                    LDQ     @MREG,,AUTO
         4 000046   000005 036003                    ADLQ    5,DU
         4 000047   200016 756100                    STQ     @A+1,,AUTO
         4 000050   200004 236100                    LDQ     @MREG,,AUTO
         4 000051   000004 036003                    ADLQ    4,DU
         4 000052   200015 756100                    STQ     @X4+1,,AUTO
         4 000053   200004 236100                    LDQ     @MREG,,AUTO
         4 000054   000002 036003                    ADLQ    2,DU
         4 000055   200014 756100                    STQ     @X3+1,,AUTO
         4 000056   200004 236100                    LDQ     @MREG,,AUTO
         4 000057   000000 036000 5                  ADLQ    0
         4 000060   200013 756100                    STQ     @X2+1,,AUTO
         4 000061   200004 236100                    LDQ     @MREG,,AUTO
         4 000062   000001 036003                    ADLQ    1,DU
         4 000063   200012 756100                    STQ     @RETURN_DELTA+1,,AUTO
         4 000064   200004 236100                    LDQ     @MREG,,AUTO
         4 000065   400000 036007                    ADLQ    -131072,DL
         4 000066   200011 756100                    STQ     CALL_SEQ$+2,,AUTO
         4 000067   002342 701000 4                  TSX1    TOM$MME_DATADT
         4 000070   000000 011000                    NOP     0
         4 000071   000103 710000 4                  TRA     s:8598

      244     8592    2                    MREG.A, MREG.Q, RETURN_DELTA) ;
      245     8593    2         CASE (%FREEZE);
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:99   

      246     8594    2            CALL TOM$MME_FREEZE (RETURN_DELTA) ;

   8594  4 000072   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         4 000073   200011 756100                    STQ     CALL_SEQ$+2,,AUTO
         4 000074   004004 701000 4                  TSX1    TOM$MME_FREEZE
         4 000075   000000 011000                    NOP     0
         4 000076   000103 710000 4                  TRA     s:8598

      247     8595    2         CASE (%UNFREZ);

      248     8596    2            CALL TOM$MME_UNFREZ (RETURN_DELTA) ;

   8596  4 000077   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         4 000100   200011 756100                    STQ     CALL_SEQ$+2,,AUTO
         4 000101   004013 701000 4                  TSX1    TOM$MME_UNFREZ
         4 000102   000000 011000                    NOP     0

      249     8597    2      END /* CASE */ ;

      250     8598    1      RETURN ;

   8598  4 000103   000000 702200 xent               TSX2  ! X66_ARET

      251     8599
      252     8600        /* END TOM$MOLTS */
      253     8601        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:100  
      254     8602        /*I* NAME:         TOM$MME_CATADT
      255     8603             AUTHOR:       Scott S. Sheppard
      256     8604             PURPOSE:      MME CATA service routine
      257     8605             INTERFACE:    TOM$MATCH_ICC
      258     8606                           TOM$REFORMAT_INIT
      259     8607                           TOM$BUILD_CATALOG_KEY
      260     8608                           TOM$READ_CATALOG
      261     8609                           TOM$REFORMAT_CATALOG_DATA
      262     8610                           TOM$CLEAR_EXCESS_DATA
      263     8611                           TOM$SET_RETURN_VALUES
      264     8612                           TOM$SET_ERROR_RETURN_VALUES
      265     8613             PARAMETERS:   X1 - address of CALL SEQUENCE (input)
      266     8614                           X2 - max. load address (input)
      267     8615                           X3 - test page base (input)
      268     8616                           A - number of words read (output)
      269     8617                           Q - read error code (output)
      270     8618                                  0 - normal read
      271     8619                                  42 - more data exists but buffer is full
      272     8620                                  else - an error has occurred
      273     8621                           RETURN_DELTA - (output)
      274     8622                              3 - normal return
      275     8623                              2 - more data to be read return
      276     8624                              1 - error return
      277     8625             DATA:         READ_ERROR_CODE - input / output
      278     8626             DESCRIPTION:  This   procedure   uses   a  calling  sequence
      279     8627                           provided  by  the  caller  to  determine which
      280     8628                           catalog   to  read  from   the  deckfile.  The
      281     8629                           specified catalog is  read, the information is
      282     8630                           reformatted, and then returned to the caller.
      283     8631                            1. TOM$MATCH_ICC is called to locate the test
      284     8632                           control entry in  TOP$TCP which corresponds to
      285     8633                           this test request being serviced.
      286     8634                            2.   TOM$REFORMAT_INIT   is   called   to  do
      287     8635                           necessary DCW and pointer initialization.
      288     8636                            3.   TOM$BUILD_CATALOG_KEY   constructs   the
      289     8637                           catalog  key from  the test  control entry for
      290     8638                           the test.
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:101  
      291     8639                            4.  TOM$READ_CATALOG  is  called  to read the
      292     8640                           desired catalog from the deckfile.
      293     8641                            5.      TOM$REFORMAT_CATALOG_DATA     obtains
      294     8642                           information   from   a   CP-6   deckfile   and
      295     8643                           re-formats the data so that it may be returned
      296     8644                           to the caller in GCOS-like format.
      297     8645                            6.  TOM$CLEAR_EXCESS_DATA is  called to clean
      298     8646                           up  the  user's  buffer  space which is filled
      299     8647                           with  trailing  data  in  the  old  (non-GCOS)
      300     8648                           format.  This is required  because the data as
      301     8649                           read  from  the  deckfile  requires more space
      302     8650                           than the reformatted form.
      303     8651                            7. The read error code and return delta value
      304     8652                           are set by TOM$SET_RETURN_VALUES.
      305     8653        */
      306     8654
      307     8655    1   TOM$MME_CATADT: PROC (X1, X2, X3, A, Q, RETURN_DELTA) ;

   8655  4 000104   200010 741300       TOM$MME_CAT* STX1  ! CALL_SEQ$+1,,AUTO

      308     8656
      309     8657    2      DCL X1           UBIN HALF HALIGNED ;
      310     8658    2      DCL X2           UBIN HALF HALIGNED ;
      311     8659    2      DCL X3           UBIN HALF HALIGNED ;
      312     8660    2      DCL A            UBIN WORD ALIGNED ;
      313     8661    2      DCL Q            UBIN WORD ALIGNED ;
      314     8662    2      DCL RETURN_DELTA SBIN HALF HALIGNED ;
      315     8663    2      DCL TCX          UBIN WORD ALIGNED ;
      316     8664           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:102  
      317     8665        /* Code */
      318     8666
      319     8667    2      CALL TOM$MATCH_ICC (Q, TCX) ;

   8667  4 000105   200017 630500                    EPPR0   TCX,,AUTO
         4 000106   200024 450500                    STP0    @Q+1,,AUTO
         4 000107   200015 236100                    LDQ     @Q,,AUTO
         4 000110   200023 756100                    STQ     @A+1,,AUTO
         4 000111   003530 701000 4                  TSX1    TOM$MATCH_ICC
         4 000112   000000 011000                    NOP     0

      320     8668
      321     8669    2      CALL TOM$REFORMAT_INIT (X1, X2, X3) WHENALTRETURN

   8669  4 000113   200012 237100                    LDAQ    @X2,,AUTO
         4 000114   200022 757100                    STAQ    @ERROR_NUMBER+1,,AUTO
         4 000115   200011 236100                    LDQ     @X1,,AUTO
         4 000116   200021 756100                    STQ     TCX+1,,AUTO
         4 000117   000214 701000 4                  TSX1    TOM$REFORMAT_INIT
         4 000120   000122 702000 4                  TSX2    s:8671
         4 000121   000134 710000 4                  TRA     s:8675

      322     8670    3           DO ;

      323     8671    3              CALL TOM$SET_ERROR_RETURN_VALUES (1, A, Q, RETURN_DELTA) ;

   8671  4 000122   200016 236100                    LDQ     @RETURN_DELTA,,AUTO
         4 000123   200024 756100                    STQ     @Q+1,,AUTO
         4 000124   200014 237100                    LDAQ    @A,,AUTO
         4 000125   200022 757100                    STAQ    @ERROR_NUMBER+1,,AUTO
         4 000126   000001 236000 5                  LDQ     1
         4 000127   200021 756100                    STQ     TCX+1,,AUTO
         4 000130   002301 701000 4                  TSX1    TOM$SET_ERROR_RETURN_VALUES
         4 000131   000000 011000                    NOP     0

      324     8672    3              RETURN ;

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:103  
   8672  4 000132   200010 221300                    LDX1  ! CALL_SEQ$+1,,AUTO
         4 000133   000001 702211                    TSX2  ! 1,X1

      325     8673    3           END /* WHENALTRETURN */ ;
      326     8674
      327     8675    2      CALL TOM$BUILD_CATALOG_KEY (TCX) WHENALTRETURN

   8675  4 000134   200017 630500                    EPPR0   TCX,,AUTO
         4 000135   200021 450500                    STP0    TCX+1,,AUTO
         4 000136   000273 701000 4                  TSX1    TOM$BUILD_CATALOG_KEY
         4 000137   000141 702000 4                  TSX2    s:8677
         4 000140   000153 710000 4                  TRA     s:8681

      328     8676    3           DO ;

      329     8677    3              CALL TOM$SET_ERROR_RETURN_VALUES (2, A, Q, RETURN_DELTA) ;

   8677  4 000141   200016 236100                    LDQ     @RETURN_DELTA,,AUTO
         4 000142   200024 756100                    STQ     @Q+1,,AUTO
         4 000143   200014 237100                    LDAQ    @A,,AUTO
         4 000144   200022 757100                    STAQ    @ERROR_NUMBER+1,,AUTO
         4 000145   000002 236000 5                  LDQ     2
         4 000146   200021 756100                    STQ     TCX+1,,AUTO
         4 000147   002301 701000 4                  TSX1    TOM$SET_ERROR_RETURN_VALUES
         4 000150   000000 011000                    NOP     0

      330     8678    3              RETURN ;

   8678  4 000151   200010 221300                    LDX1  ! CALL_SEQ$+1,,AUTO
         4 000152   000001 702211                    TSX2  ! 1,X1

      331     8679    3           END /* WHENALTRETURN */ ;
      332     8680
      333     8681    2      CALL TOM$READ_CATALOG (X2, X3) WHENALTRETURN

   8681  4 000153   200013 236100                    LDQ     @X3,,AUTO
         4 000154   200022 756100                    STQ     @ERROR_NUMBER+1,,AUTO
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:104  
         4 000155   200012 236100                    LDQ     @X2,,AUTO
         4 000156   200021 756100                    STQ     TCX+1,,AUTO
         4 000157   001547 701000 4                  TSX1    TOM$READ_CATALOG
         4 000160   000162 702000 4                  TSX2    s:8683
         4 000161   000174 710000 4                  TRA     s:8687

      334     8682    3           DO ;

      335     8683    3              CALL TOM$SET_ERROR_RETURN_VALUES (3, A, Q, RETURN_DELTA) ;

   8683  4 000162   200016 236100                    LDQ     @RETURN_DELTA,,AUTO
         4 000163   200024 756100                    STQ     @Q+1,,AUTO
         4 000164   200014 237100                    LDAQ    @A,,AUTO
         4 000165   200022 757100                    STAQ    @ERROR_NUMBER+1,,AUTO
         4 000166   000003 236000 5                  LDQ     3
         4 000167   200021 756100                    STQ     TCX+1,,AUTO
         4 000170   002301 701000 4                  TSX1    TOM$SET_ERROR_RETURN_VALUES
         4 000171   000000 011000                    NOP     0

      336     8684    3              RETURN ;

   8684  4 000172   200010 221300                    LDX1  ! CALL_SEQ$+1,,AUTO
         4 000173   000001 702211                    TSX2  ! 1,X1

      337     8685    3           END /* WHENALTRETURN */ ;
      338     8686
      339     8687    2      CALL TOM$REFORMAT_CATALOG_DATA (TCX, A) ;

   8687  4 000174   200014 236100                    LDQ     @A,,AUTO
         4 000175   200022 756100                    STQ     @ERROR_NUMBER+1,,AUTO
         4 000176   200017 630500                    EPPR0   TCX,,AUTO
         4 000177   200021 450500                    STP0    TCX+1,,AUTO
         4 000200   001655 701000 4                  TSX1    TOM$REFORMAT_CATALOG_DATA
         4 000201   000000 011000                    NOP     0

      340     8688
      341     8689    2      CALL TOM$CLEAR_EXCESS_DATA;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:105  

   8689  4 000202   002256 701000 4                  TSX1    TOM$CLEAR_EXCESS_DATA
         4 000203   000000 011000                    NOP     0

      342     8690
      343     8691    2      CALL TOM$SET_RETURN_VALUES (Q, RETURN_DELTA) ;

   8691  4 000204   200016 236100                    LDQ     @RETURN_DELTA,,AUTO
         4 000205   200024 756100                    STQ     @Q+1,,AUTO
         4 000206   200015 236100                    LDQ     @Q,,AUTO
         4 000207   200023 756100                    STQ     @A+1,,AUTO
         4 000210   003677 701000 4                  TSX1    TOM$SET_RETURN_VALUES
         4 000211   000000 011000                    NOP     0

      344     8692    2      RETURN;

   8692  4 000212   200010 221300                    LDX1  ! CALL_SEQ$+1,,AUTO
         4 000213   000001 702211                    TSX2  ! 1,X1

      345     8693
      346     8694        /* END TOM$MME_CATADT */
      347     8695        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:106  
      348     8696        /*I* NAME:         TOM$REFORMAT_INIT
      349     8697             PURPOSE:      initializes variables for MME CATA
      350     8698             INTERFACE:    TOL$CHECK_CALL_SEQUENCE
      351     8699             PARAMETERS:   X1 - address of call sequence (input)
      352     8700                           X2 - dummy variable
      353     8701                           X3 - dummy variable
      354     8702             DATA:         LOAD_SIZE - output
      355     8703                           CATALOG_KEY.DATA - output
      356     8704                           READ_ERROR_CODE - output
      357     8705                           CALL_SEQ$ - output
      358     8706                           IS$ - input
      359     8707                           MY_CALL_SEQUENCE - output
      360     8708                           STATUS_I$ - output
      361     8709                           DCW_I - output
      362     8710                           DCW_O - output
      363     8711                           STAT_I - output
      364     8712                           STAT_O - output
      365     8713                           DATA_SIZE_IN - output
      366     8714                           DATA_SIZE_OUT - output
      367     8715             DESCRIPTION:  This procedure calls  the loader to initialize
      368     8716                           some  parameters which  will be  used later in
      369     8717                           data reformatting. The user's call sequence is
      370     8718                           copied  into  a  dummy  call  sequence and the
      371     8719                           dummy  call sequence  is then  used to  do the
      372     8720                           initialization.
      373     8721        */
      374     8722        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:107  
      375     8723    2   TOM$REFORMAT_INIT: PROC (X1, X2, X3) ALTRET;

   8723  4 000214   200020 741300       TOM$REFORMA* STX1  ! @RETURN_DELTA+1,,AUTO

      376     8724
      377     8725    3      DCL X1        UBIN HALF HALIGNED ;
      378     8726    3      DCL X2        UBIN HALF HALIGNED ;
      379     8727    3      DCL X3        UBIN HALF HALIGNED ;
      380     8728    3      DCL DECK_TYPE STATIC CHAR(1) INIT ('D');
      381     8729
      382     8730        /* Code */
      383     8731
      384     8732    3      LOAD_SIZE = 0;

   8732  4 000215   000012 450000 1                  STZ     LOAD_SIZE

      385     8733    3      CATALOG_KEY.DATA = ' ';

   8733  4 000216   040000 100400                    MLR     fill='040'O
         4 000217   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         4 000220   000044 200027 1                  ADSC9   CATALOG_KEY              cn=1,n=23

      386     8734    3      READ_ERROR_CODE = 0;

   8734  4 000221   000042 450000 1                  STZ     READ_ERROR_CODE

      387     8735
      388     8736    3      CALL_SEQ$ = PINCRW (IS$, X1) ;

   8736  4 000222   200021 470500                    LDP0    @X1,,AUTO
         4 000223   000100 100500                    MLR     fill='000'O
         4 000224   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         4 000225   200060 000004                    ADSC9   FIRMWARE_FOUND+2,,AUTO   cn=0,n=4
         4 000226   200060 220100                    LDX0    FIRMWARE_FOUND+2,,AUTO
         4 000227   000000 636010                    EAQ     0,X0
         4 000230   000000 036000 2                  ADLQ    FPTN_
         4 000231   200007 756100                    STQ     CALL_SEQ$,,AUTO
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:108  

      389     8737    3      MY_CALL_SEQUENCE = CALL_SEQ$ -> CALL_SEQUENCE;

   8737  4 000232   200007 471500                    LDP1    CALL_SEQ$,,AUTO
         4 000233   000000 100500                    MLR     fill='000'O
         4 000234   100000 000034                    ADSC9   0,,PR1                   cn=0,n=28
         4 000235   000024 000034 1                  ADSC9   MY_CALL_SEQUENCE         cn=0,n=28

      390     8738    3      CALL TOL$CHECK_CALL_SEQUENCE (CATALOG_KEY,    /* N/A */

   8738  4 000236   000005 236000 5                  LDQ     5
         4 000237   200072 756100                    STQ     FIRMWARE_FOUND+12,,AUTO
         4 000240   000006 237000 5                  LDAQ    6
         4 000241   200070 757100                    STAQ    FIRMWARE_FOUND+10,,AUTO
         4 000242   000010 236000 5                  LDQ     8
         4 000243   000001 235000 xsym               LDA     B_VECTNIL+1
         4 000244   200066 757100                    STAQ    FIRMWARE_FOUND+8,,AUTO
         4 000245   000012 237000 5                  LDAQ    10
         4 000246   200064 757100                    STAQ    FIRMWARE_FOUND+6,,AUTO
         4 000247   200022 236100                    LDQ     @X2,,AUTO
         4 000250   000014 235000 5                  LDA     12
         4 000251   200062 757100                    STAQ    FIRMWARE_FOUND+4,,AUTO
         4 000252   200023 236100                    LDQ     @X3,,AUTO
         4 000253   000015 235000 5                  LDA     13
         4 000254   200060 757100                    STAQ    FIRMWARE_FOUND+2,,AUTO
         4 000255   200060 630500                    EPPR0   FIRMWARE_FOUND+2,,AUTO
         4 000256   000004 631400 5                  EPPR1   4
         4 000257   000000 701000 xent               TSX1    TOL$CHECK_CALL_SEQUENCE
         4 000260   000271 702000 4                  TSX2    CHECK_CALL_ERROR

      391     8739    3              X3,                                   /* N/A */
      392     8740    3              MY_CALL_SEQUENCE,                     /* N/A */
      393     8741    3              X2,                                   /* N/A */
      394     8742    3              LOAD_SIZE,                            /* used by loader */
      395     8743    3              READ_ERROR_CODE,,                     /* set if error */
      396     8744    3              DECK_TYPE,
      397     8745    3              STATUS_I$,                            /* for status store */
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:109  
      398     8746    3              DCW_I,                                /* working DCW */
      399     8747    3              DATA_SIZE_IN)                         /* total word size */
      400     8748    3              ALTRET (CHECK_CALL_ERROR);
      401     8749
      402     8750    3      DCW_O = DCW_I;

   8750  4 000261   000002 236000 1                  LDQ     DCW_I
         4 000262   000003 756000 1                  STQ     DCW_O

      403     8751    3      STAT_O = STAT_I;

   8751  4 000263   000036 237000 1                  LDAQ    STAT_I
         4 000264   000040 757000 1                  STAQ    STAT_O

      404     8752    3      DATA_SIZE_OUT = DATA_SIZE_IN;

   8752  4 000265   000006 235000 1                  LDA     DATA_SIZE_IN
         4 000266   000007 755000 1                  STA     DATA_SIZE_OUT

      405     8753    3      RETURN;

   8753  4 000267   200020 221300                    LDX1  ! @RETURN_DELTA+1,,AUTO
         4 000270   000001 702211                    TSX2  ! 1,X1

      406     8754
      407     8755    3   CHECK_CALL_ERROR:
      408     8756    3      ALTRETURN;

   8756  4 000271   200020 221300       CHECK_CALL_* LDX1  ! @RETURN_DELTA+1,,AUTO
         4 000272   000000 702211                    TSX2  ! 0,X1

      409     8757
      410     8758    3   END TOM$REFORMAT_INIT;
      411     8759        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:110  
      412     8760        /*I* NAME:         TOM$BUILD_CATALOG_KEY
      413     8761             AUTHOR:       Scott S. Sheppard
      414     8762             INTERFACE:    TOM$SET_ITR_CATALOG_KEY
      415     8763                           TOM$HAVE_USER_PICK
      416     8764                           TOM$SET_NIO_CATALOG_KEY
      417     8765                           TOM$SET_MDR_CATALOG_KEY
      418     8766             INPUT:        TCX - Test Control indeX
      419     8767             OUTPUT:       CATALOG_KEY
      420     8768             DESCRIPTION:  This procedure calls the proper routine to
      421     8769                           construct the catalog key based on the test
      422     8770                           type of the test being serviced.
      423     8771        */
      424     8772
      425     8773    2   TOM$BUILD_CATALOG_KEY: PROC (TCX) ALTRET ;

   8773  4 000273   200020 741300       TOM$BUILD_C* STX1  ! @RETURN_DELTA+1,,AUTO

      426     8774
      427     8775    3      DCL TCX UBIN WORD ALIGNED ;
      428     8776
      429     8777        /* Code */
      430     8778
      431     8779    4      DO SELECT (TOP$TCP.TEST_TYPE(TCX)) ;

   8779  4 000274   200021 470500                    LDP0    @TCX,,AUTO
         4 000275   000000 236100                    LDQ     0,,PR0
         4 000276   000122 402007                    MPY     82,DL
         4 000277   000000 620006                    EAX0    0,QL
         4 000300   000003 736000                    QLS     3
         4 000301   000003 471400 xsym               LDP1    TOT$DMC+3
         4 000302   040000 106506                    CMPC    fill='040'O
         4 000303   100002 000003                    ADSC9   2,Q,PR1                  cn=0,n=3
         4 000304   000014 000003 2                  ADSC9   SELECT_MSG+11            cn=0,n=3
         4 000305   000323 602000 4                  TNC     s:8779+23
         4 000306   000000 635010                    EAA     0,X0
         4 000307   000021 771000                    ARL     17
         4 000310   100002 236105                    LDQ     2,AL,PR1
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:111  
         4 000311   000014 676000 2                  ERQ     SELECT_MSG+11
         4 000312   000016 376000 5                  ANQ     14
         4 000313   000353 600000 4                  TZE     s:8784
         4 000314   000000 635010                    EAA     0,X0
         4 000315   000021 771000                    ARL     17
         4 000316   100002 236105                    LDQ     2,AL,PR1
         4 000317   000015 676000 2                  ERQ     SELECT_MSG+12
         4 000320   000016 376000 5                  ANQ     14
         4 000321   000361 601000 4                  TNZ     ERROR
         4 000322   000353 710000 4                  TRA     s:8784
         4 000323   000000 635010                    EAA     0,X0
         4 000324   000017 771000                    ARL     15
         4 000325   040000 106505                    CMPC    fill='040'O
         4 000326   100002 000003                    ADSC9   2,A,PR1                  cn=0,n=3
         4 000327   000016 000003 2                  ADSC9   SELECT_MSG+13            cn=0,n=3
         4 000330   000361 602000 4                  TNC     ERROR
         4 000331   000000 636010                    EAQ     0,X0
         4 000332   000021 772000                    QRL     17
         4 000333   100002 236106                    LDQ     2,QL,PR1
         4 000334   000016 676000 2                  ERQ     SELECT_MSG+13
         4 000335   000016 376000 5                  ANQ     14
         4 000336   000346 600000 4                  TZE     s:8781
         4 000337   000000 636010                    EAQ     0,X0
         4 000340   000021 772000                    QRL     17
         4 000341   100002 236106                    LDQ     2,QL,PR1
         4 000342   000017 676000 2                  ERQ     SELECT_MSG+14
         4 000343   000016 376000 5                  ANQ     14
         4 000344   000361 601000 4                  TNZ     ERROR
         4 000345   000356 710000 4                  TRA     s:8786

      432     8780    4         SELECT ('ITR') ;

      433     8781    4         CALL TOM$SET_ITR_CATALOG_KEY ALTRET (ERROR) ;

   8781  4 000346   000365 701000 4                  TSX1    TOM$SET_ITR_CATALOG_KEY
         4 000347   000361 702000 4                  TSX2    ERROR

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:112  
      434     8782    4         CALL TOM$HAVE_USER_PICK ;

   8782  4 000350   000561 701000 4                  TSX1    TOM$HAVE_USER_PICK
         4 000351   000000 011000                    NOP     0
         4 000352   000363 710000 4                  TRA     s:8790

      435     8783    4         SELECT ('NIO', 'RPM') ;

      436     8784    4         CALL TOM$SET_NIO_CATALOG_KEY ;

   8784  4 000353   001534 701000 4                  TSX1    TOM$SET_NIO_CATALOG_KEY
         4 000354   000000 011000                    NOP     0
         4 000355   000363 710000 4                  TRA     s:8790

      437     8785    4         SELECT ('MDR') ;

      438     8786    4         CALL TOM$SET_MDR_CATALOG_KEY ALTRET (ERROR) ;

   8786  4 000356   001415 701000 4                  TSX1    TOM$SET_MDR_CATALOG_KEY
         4 000357   000361 702000 4                  TSX2    ERROR
         4 000360   000363 710000 4                  TRA     s:8790

      439     8787    4         SELECT (ELSE) ;

      440     8788    4   ERROR: ALTRETURN ;

   8788  4 000361   200020 221300       ERROR        LDX1  ! @RETURN_DELTA+1,,AUTO
         4 000362   000000 702211                    TSX2  ! 0,X1

      441     8789    4      END /* SELECT */ ;

      442     8790    3      RETURN ;

   8790  4 000363   200020 221300                    LDX1  ! @RETURN_DELTA+1,,AUTO
         4 000364   000001 702211                    TSX2  ! 1,X1

      443     8791
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:113  
      444     8792        /* END TOM$BUILD_CATALOG_KEY */
      445     8793        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:114  
      446     8794        /*I* NAME:         TOM$SET_ITR_CATALOG_KEY
      447     8795             INPUT:        TOP$TCP.FIRMWARE.TYPE(TCX)
      448     8796                           TCX
      449     8797             OUTPUT:       CATALOG_KEY
      450     8798             DESCRIPTION:  This procedure sets the catalog key for ITR's.
      451     8799        */
      452     8800
      453     8801    3   TOM$SET_ITR_CATALOG_KEY: PROC ALTRET ;

   8801  4 000365   200022 741300       TOM$SET_ITR* STX1  ! @X2,,AUTO

      454     8802
      455     8803        /* Code */
      456     8804
      457     8805    4      CATALOG_KEY.NAME.CATA = 'CATA.' ;

   8805  4 000366   040000 100400                    MLR     fill='040'O
         4 000367   000020 000005 2                  ADSC9   SELECT_MSG+15            cn=0,n=5
         4 000370   000044 200005 1                  ADSC9   CATALOG_KEY              cn=1,n=5

      458     8806    4      CATALOG_KEY.NAME.TYP  = 'ITR.' ;

   8806  4 000371   040000 100400                    MLR     fill='040'O
         4 000372   000022 000004 2                  ADSC9   SELECT_MSG+17            cn=0,n=4
         4 000373   000045 400004 1                  ADSC9   CATALOG_KEY+1            cn=2,n=4

      459     8807    5      DO SELECT (TOP$TCP.FIRMWARE.TYPE(TCX)) ;

   8807  4 000374   200021 470500                    LDP0    @TCX,,AUTO
         4 000375   000000 236100                    LDQ     0,,PR0
         4 000376   000122 402007                    MPY     82,DL
         4 000377   000000 620006                    EAX0    0,QL
         4 000400   000001 736000                    QLS     1
         4 000401   000003 471400 xsym               LDP1    TOT$DMC+3
         4 000402   100013 236106                    LDQ     11,QL,PR1
         4 000403   000023 116000 2                  CMPQ    SELECT_MSG+18
         4 000404   000452 602000 4                  TNC     s:8807+46
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:115  
         4 000405   000000 635010                    EAA     0,X0
         4 000406   000021 771000                    ARL     17
         4 000407   100013 236105                    LDQ     11,AL,PR1
         4 000410   000023 116000 2                  CMPQ    SELECT_MSG+18
         4 000411   000517 600000 4                  TZE     s:8811
         4 000412   000000 635010                    EAA     0,X0
         4 000413   000021 771000                    ARL     17
         4 000414   100013 236105                    LDQ     11,AL,PR1
         4 000415   000024 116000 2                  CMPQ    SELECT_MSG+19
         4 000416   000432 602000 4                  TNC     s:8807+30
         4 000417   000000 635010                    EAA     0,X0
         4 000420   000021 771000                    ARL     17
         4 000421   100013 236105                    LDQ     11,AL,PR1
         4 000422   000024 116000 2                  CMPQ    SELECT_MSG+19
         4 000423   000523 600000 4                  TZE     s:8813
         4 000424   000000 635010                    EAA     0,X0
         4 000425   000021 771000                    ARL     17
         4 000426   100013 236105                    LDQ     11,AL,PR1
         4 000427   000025 116000 2                  CMPQ    SELECT_MSG+20
         4 000430   000557 601000 4                  TNZ     s:8827
         4 000431   000547 710000 4                  TRA     s:8823
         4 000432   000000 635010                    EAA     0,X0
         4 000433   000021 771000                    ARL     17
         4 000434   100013 236105                    LDQ     11,AL,PR1
         4 000435   000026 116000 2                  CMPQ    SELECT_MSG+21
         4 000436   000557 602000 4                  TNC     s:8827
         4 000437   000000 635010                    EAA     0,X0
         4 000440   000021 771000                    ARL     17
         4 000441   100013 236105                    LDQ     11,AL,PR1
         4 000442   000026 116000 2                  CMPQ    SELECT_MSG+21
         4 000443   000537 600000 4                  TZE     s:8819
         4 000444   000000 635010                    EAA     0,X0
         4 000445   000021 771000                    ARL     17
         4 000446   100013 236105                    LDQ     11,AL,PR1
         4 000447   000027 116000 2                  CMPQ    SELECT_MSG+22
         4 000450   000557 601000 4                  TNZ     s:8827
         4 000451   000553 710000 4                  TRA     s:8825
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:116  
         4 000452   000000 635010                    EAA     0,X0
         4 000453   000021 771000                    ARL     17
         4 000454   100013 236105                    LDQ     11,AL,PR1
         4 000455   000030 116000 2                  CMPQ    SELECT_MSG+23
         4 000456   000505 602000 4                  TNC     s:8807+73
         4 000457   000000 635010                    EAA     0,X0
         4 000460   000021 771000                    ARL     17
         4 000461   100013 236105                    LDQ     11,AL,PR1
         4 000462   000030 116000 2                  CMPQ    SELECT_MSG+23
         4 000463   000527 600000 4                  TZE     s:8815
         4 000464   000000 635010                    EAA     0,X0
         4 000465   000021 771000                    ARL     17
         4 000466   100013 236105                    LDQ     11,AL,PR1
         4 000467   000031 116000 2                  CMPQ    SELECT_MSG+24
         4 000470   000477 602000 4                  TNC     s:8807+67
         4 000471   000000 635010                    EAA     0,X0
         4 000472   000021 771000                    ARL     17
         4 000473   100013 236105                    LDQ     11,AL,PR1
         4 000474   000031 116000 2                  CMPQ    SELECT_MSG+24
         4 000475   000513 600000 4                  TZE     s:8809
         4 000476   000557 710000 4                  TRA     s:8827
         4 000477   000000 635010                    EAA     0,X0
         4 000500   000021 771000                    ARL     17
         4 000501   100013 236105                    LDQ     11,AL,PR1
         4 000502   000032 116000 2                  CMPQ    SELECT_MSG+25
         4 000503   000557 601000 4                  TNZ     s:8827
         4 000504   000543 710000 4                  TRA     s:8821
         4 000505   000000 635010                    EAA     0,X0
         4 000506   000021 771000                    ARL     17
         4 000507   100013 236105                    LDQ     11,AL,PR1
         4 000510   000033 116000 2                  CMPQ    SELECT_MSG+26
         4 000511   000557 601000 4                  TNZ     s:8827
         4 000512   000533 710000 4                  TRA     s:8817

      460     8808    5         SELECT ('M601') ;

      461     8809    5         CATALOG_KEY.NAME.APPL = 'MTP601';
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:117  

   8809  4 000513   040000 100400                    MLR     fill='040'O
         4 000514   000034 000006 2                  ADSC9   SELECT_MSG+27            cn=0,n=6
         4 000515   000046 400006 1                  ADSC9   CATALOG_KEY+2            cn=2,n=6
         4 000516   000560 710000 4                  TRA     s:8829

      462     8810    5         SELECT ('M610') ;

      463     8811    5         CATALOG_KEY.NAME.APPL = 'MTP610';

   8811  4 000517   040000 100400                    MLR     fill='040'O
         4 000520   000036 000006 2                  ADSC9   SELECT_MSG+29            cn=0,n=6
         4 000521   000046 400006 1                  ADSC9   CATALOG_KEY+2            cn=2,n=6
         4 000522   000560 710000 4                  TRA     s:8829

      464     8812    5         SELECT ('UCMN') ;

      465     8813    5         CATALOG_KEY.NAME.APPL = 'URCMPC';

   8813  4 000523   040000 100400                    MLR     fill='040'O
         4 000524   000040 000006 2                  ADSC9   SELECT_MSG+31            cn=0,n=6
         4 000525   000046 400006 1                  ADSC9   CATALOG_KEY+2            cn=2,n=6
         4 000526   000560 710000 4                  TRA     s:8829

      466     8814    5         SELECT ('M191') ;

      467     8815    5         CATALOG_KEY.NAME.APPL = 'DSC191';

   8815  4 000527   040000 100400                    MLR     fill='040'O
         4 000530   000042 000006 2                  ADSC9   SELECT_MSG+33            cn=0,n=6
         4 000531   000046 400006 1                  ADSC9   CATALOG_KEY+2            cn=2,n=6
         4 000532   000560 710000 4                  TRA     s:8829

      468     8816    5         SELECT ('D500') ;

      469     8817    5         CATALOG_KEY.NAME.APPL = 'DSC500';

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:118  
   8817  4 000533   040000 100400                    MLR     fill='040'O
         4 000534   000044 000006 2                  ADSC9   SELECT_MSG+35            cn=0,n=6
         4 000535   000046 400006 1                  ADSC9   CATALOG_KEY+2            cn=2,n=6
         4 000536   000560 710000 4                  TRA     s:8829

      470     8818    5         SELECT ('MSP8');

      471     8819    5         CATALOG_KEY.NAME.APPL = 'MSP800';

   8819  4 000537   040000 100400                    MLR     fill='040'O
         4 000540   000046 000006 2                  ADSC9   SELECT_MSG+37            cn=0,n=6
         4 000541   000046 400006 1                  ADSC9   CATALOG_KEY+2            cn=2,n=6
         4 000542   000560 710000 4                  TRA     s:8829

      472     8820    5         SELECT ('M500') ;

      473     8821    5         CATALOG_KEY.NAME.APPL = 'MTC500';

   8821  4 000543   040000 100400                    MLR     fill='040'O
         4 000544   000050 000006 2                  ADSC9   SELECT_MSG+39            cn=0,n=6
         4 000545   000046 400006 1                  ADSC9   CATALOG_KEY+2            cn=2,n=6
         4 000546   000560 710000 4                  TRA     s:8829

      474     8822    5         SELECT ('URTP') ;

      475     8823    5         CATALOG_KEY.NAME.APPL = 'URTMPC' ;

   8823  4 000547   040000 100400                    MLR     fill='040'O
         4 000550   000052 000006 2                  ADSC9   SELECT_MSG+41            cn=0,n=6
         4 000551   000046 400006 1                  ADSC9   CATALOG_KEY+2            cn=2,n=6
         4 000552   000560 710000 4                  TRA     s:8829

      476     8824    5         SELECT ('TPUR') ;

      477     8825    5         CATALOG_KEY.NAME.APPL = 'TURMPC' ;

   8825  4 000553   040000 100400                    MLR     fill='040'O
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:119  
         4 000554   000054 000006 2                  ADSC9   SELECT_MSG+43            cn=0,n=6
         4 000555   000046 400006 1                  ADSC9   CATALOG_KEY+2            cn=2,n=6
         4 000556   000560 710000 4                  TRA     s:8829

      478     8826    5         SELECT (ELSE) ;

      479     8827    5      ALTRETURN ;

   8827  4 000557   000000 702211                    TSX2  ! 0,X1

      480     8828    5      END /* SELECT */ ;

      481     8829    4      RETURN ;

   8829  4 000560   000001 702211                    TSX2  ! 1,X1

      482     8830
      483     8831    4   END TOM$SET_ITR_CATALOG_KEY ;
      484     8832        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:120  
      485     8833        /*I* NAME:         TOM$HAVE_USER_PICK
      486     8834             AUTHOR:       Carl Eichert
      487     8835             PURPOSE:      User selects firmware
      488     8836             INTERFACE:    TOM$GET_DATA_SEGMENT
      489     8837                           TOM$FETCH_CATALOG_TABLE
      490     8838                           TOM$COUNT_APPL_CATALOGS
      491     8839                           TOM$SHOW_APPL_CHOICES
      492     8840                           TOM$GET_USER_CHOICE
      493     8841             INPUT:        TOP$TCP.FIRMWARE.CHOICE_MADE(TCX)
      494     8842                           TOT$DMC.TOM$ITRTBL.PTR$
      495     8843             OUTPUT:       TOP$TCP.FIRMWARE.CHOICE_MADE(TCX)
      496     8844                           TOT$DMC.TOM$ITRTBL.PTR$
      497     8845                           TOM$ITRTBL
      498     8846             DESCRIPTION:  This procedure allows the user to select which
      499     8847                           ITR catalog to load based on the firmware type
      500     8848                           of the ITR catalog.
      501     8849        */
      502     8850
      503     8851    3   TOM$HAVE_USER_PICK: PROC ;

   8851  4 000561   200022 741300       TOM$HAVE_US* STX1  ! @X2,,AUTO

      504     8852
      505     8853    4      DCL NCIC UBIN (36) ALIGNED;
      506     8854    4      DCL 1 CUR_ITR_CATAS (0:4) ALIGNED,
      507     8855    4            2 DATA,
      508     8856    4              3 DECK# UBIN (18) HALIGNED,
      509     8857    4              3 * UBIN (18) HALIGNED,
      510     8858    4              3 * UBIN (36) ALIGNED,
      511     8859    4              3 OBJ_KEY_INX UBIN (36) ALIGNED,
      512     8860    4            2 CATA# UBIN (36) ALIGNED;
      513     8861           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:121  
      514     8862        /* Code */
      515     8863
      516     8864    4      IF TOP$TCP.FIRMWARE.CHOICE_MADE(TCX)

   8864  4 000562   200021 470500                    LDP0    @TCX,,AUTO
         4 000563   000000 236100                    LDQ     0,,PR0
         4 000564   000122 402007                    MPY     82,DL
         4 000565   000001 736000                    QLS     1
         4 000566   000003 471400 xsym               LDP1    TOT$DMC+3
         4 000567   100012 236106                    LDQ     10,QL,PR1
         4 000570   000400 316007                    CANQ    256,DL
         4 000571   000633 601000 4                  TNZ     s:8884

      517     8865    4      THEN /* choice made on a previous MME CATADT */ ;
      518     8866    5      ELSE DO ;

      519     8867    5              IF TOT$DMC.TOM$ITRTBL.PTR$ = ADDR(NIL)

   8867  4 000572   000005 236000 xsym               LDQ     TOT$DMC+5
         4 000573   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 000574   000612 601000 4                  TNZ     s:8875

      520     8868    6              THEN DO ;

      521     8869    6                      CALL TOM$GET_DATA_SEGMENT (%TOM$ITRTBL_LGTH,

   8869  4 000575   000020 236000 5                  LDQ     16
         4 000576   200052 756100                    STQ     @WORD_COUNT+1,,AUTO
         4 000577   000021 236000 5                  LDQ     17
         4 000600   200051 756100                    STQ     SECTORS_REQUESTED+1,,AUTO
         4 000601   003621 701000 4                  TSX1    TOM$GET_DATA_SEGMENT
         4 000602   000000 011000                    NOP     0

      522     8870    6                              TOT$DMC.TOM$ITRTBL) ;
      523     8871    6                      TOM$ITRTBL = '0'B ;

   8871  4 000603   000005 470400 xsym               LDP0    TOT$DMC+5
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:122  
         4 000604   015364 220003                    LDX0    6900,DU
         4 000605   000140 100400                    MLR     fill='000'O
         4 000606   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         4 000607   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

      524     8872    6                      CALL TOM$FETCH_CATALOG_TABLE ;

   8872  4 000610   000635 701000 4                  TSX1    TOM$FETCH_CATALOG_TABLE
         4 000611   000000 011000                    NOP     0

      525     8873    6                   END /* THEN */ ;

      526     8874    5              ELSE /* table read on a previous MME CATADT */ ;
      527     8875    5              CALL TOM$COUNT_APPL_CATALOGS ;

   8875  4 000612   001055 701000 4                  TSX1    TOM$COUNT_APPL_CATALOGS
         4 000613   000000 011000                    NOP     0

      528     8876    5              IF NCIC > 1

   8876  4 000614   200023 235100                    LDA     NCIC,,AUTO
         4 000615   000002 115007                    CMPA    2,DL
         4 000616   000623 602000 4                  TNC     s:8882

      529     8877    6              THEN DO ;

      530     8878    6                      CALL TOM$SHOW_APPL_CHOICES ;

   8878  4 000617   001123 701000 4                  TSX1    TOM$SHOW_APPL_CHOICES
         4 000620   000000 011000                    NOP     0

      531     8879    6                      CALL TOM$GET_USER_CHOICE ;

   8879  4 000621   001254 701000 4                  TSX1    TOM$GET_USER_CHOICE
         4 000622   000000 011000                    NOP     0

      532     8880    6                   END /* THEN */ ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:123  

      533     8881    5              ELSE /* no multiple ITR catalogs for this TEST request */ ;
      534     8882    5              TOP$TCP.FIRMWARE.CHOICE_MADE(TCX) = %TRUE ;

   8882  4 000623   200021 470500                    LDP0    @TCX,,AUTO
         4 000624   000000 236100                    LDQ     0,,PR0
         4 000625   000122 402007                    MPY     82,DL
         4 000626   000001 736000                    QLS     1
         4 000627   000003 471400 xsym               LDP1    TOT$DMC+3
         4 000630   000000 620006                    EAX0    0,QL
         4 000631   000400 236007                    LDQ     256,DL
         4 000632   100012 256110                    ORSQ    10,X0,PR1

      535     8883    5           END /* ELSE */ ;

      536     8884    4      RETURN ;

   8884  4 000633   200022 221300                    LDX1  ! @X2,,AUTO
         4 000634   000001 702211                    TSX2  ! 1,X1

      537     8885
      538     8886        /* END TOM$HAVE_USER_PICK */
      539     8887        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:124  
      540     8888        /*I* NAME:          TOM$FETCH_CATALOG_TABLE
      541     8889             AUTHOR:        Carl Eichert
      542     8890             INTERFACE:     M$READ
      543     8891                            TOX$ERROR
      544     8892             INPUT:         None
      545     8893             OUTPUT:        CATALOGS
      546     8894             DESCRIPTION:   This subroutine loads up all the catalog keys
      547     8895                            from the deckfile for use in selecting the
      548     8896                            correct ITR catalog when there are more than
      549     8897                            1 for the controller to be tested.
      550     8898        */
      551     8899
      552     8900    4   TOM$FETCH_CATALOG_TABLE: PROC;

   8900  4 000635   200050 741300       TOM$FETCH_C* STX1  ! SECTOR_COUNT+1,,AUTO

      553     8901
      554     8902    5      DCL 1 MASTER_DATA ALIGNED,
      555     8903    5            2 DECK# UBIN (18) UNAL,
      556     8904    5            2 NUM_ENTRIES UBIN (18) UNAL,
      557     8905    5            2 * UBIN (36) UNAL;
      558     8906    5      DCL 1 MASTER_KEY STATIC CALIGNED,
      559     8907    5            2 * UBIN (9) UNAL INIT (14),
      560     8908    5            2 * CHAR (14) UNAL INIT ('MASTER_CATALOG');
      561     8909    5      DCL 1 MASTER_ENTRY_KEY STATIC CALIGNED,
      562     8910    5            2 * UBIN (9) UNAL INIT (4),
      563     8911    5            2 DECK# UBIN (18) UNAL,
      564     8912    5            2 ENTRY# UBIN (18) UNAL;
      565     8913    5      DCL 1 CATALOG_ENTRY_KEY STATIC CALIGNED,
      566     8914    5            2 * UBIN (9) UNAL INIT (4),
      567     8915    5            2 DECK# UBIN (18) UNAL,
      568     8916    5            2 ENTRY# UBIN (18) UNAL;
      569     8917    5      DCL I UBIN (36) ALIGNED;
      570     8918    5      DCL J UBIN (36) ALIGNED;
      571     8919    5      DCL SLOT UBIN WORD ALIGNED ;
      572     8920           %FPT_READ (FPTN = GET_DECKFILE_DATA,
      573     8921                      DCB = M$DECKFILE,
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:125  
      574     8922                      KEYS = YES);
      575     8961           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:126  
      576     8962        /* Code */
      577     8963
      578     8964    5      GET_DECKFILE_DATA.BUF_ = VECTOR (MASTER_DATA);

   8964  4 000636   000022 235000 5                  LDA     18
         4 000637   200060 452500                    STP2    FIRMWARE_FOUND+2,,AUTO
         4 000640   200060 236100                    LDQ     FIRMWARE_FOUND+2,,AUTO
         4 000641   000051 036003                    ADLQ    41,DU
         4 000642   000100 757000 1                  STAQ    GET_DECKFILE_DATA+4

      579     8965    5      GET_DECKFILE_DATA.KEY_ = VECTOR (MASTER_KEY);

   8965  4 000643   000024 237000 5                  LDAQ    20
         4 000644   000076 757000 1                  STAQ    GET_DECKFILE_DATA+2

      580     8966    5      CALL M$READ (GET_DECKFILE_DATA) ALTRET (ERROR_EXIT);

   8966  4 000645   000074 630400 1                  EPPR0   GET_DECKFILE_DATA
         4 000646   440000 713400                    CLIMB   alt,read
         4 000647   401400 401760                    pmme    nvectors=4
         4 000650   001043 702000 4                  TSX2    ERROR_EXIT

      581     8967    5      MASTER_ENTRY_KEY.DECK# = MASTER_DATA.DECK#;

   8967  4 000651   200051 236100                    LDQ     MASTER_DATA,,AUTO
         4 000652   000011 772000                    QRL     9
         4 000653   000067 552030 1                  STBQ    MASTER_ENTRY_KEY,'30'O

      582     8968    5      I = 0;

   8968  4 000654   200053 450100                    STZ     I,,AUTO

      583     8969    6      DO WHILE (I < MASTER_DATA.NUM_ENTRIES) ;

   8969  4 000655   200051 236100                    LDQ     MASTER_DATA,,AUTO
         4 000656   777777 376007                    ANQ     -1,DL
         4 000657   200053 116100                    CMPQ    I,,AUTO
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:127  
         4 000660   001041 602000 4                  TNC     s:8996
         4 000661   001041 600000 4                  TZE     s:8996

      584     8970    6         MASTER_ENTRY_KEY.ENTRY# = I + 1;

   8970  4 000662   200053 236100                    LDQ     I,,AUTO
         4 000663   000001 036007                    ADLQ    1,DL
         4 000664   200060 756100                    STQ     FIRMWARE_FOUND+2,,AUTO
         4 000665   000000 101500                    MRL     fill='000'O
         4 000666   200060 000004                    ADSC9   FIRMWARE_FOUND+2,,AUTO   cn=0,n=4
         4 000667   000067 600002 1                  ADSC9   MASTER_ENTRY_KEY         cn=3,n=2

      585     8971    6         GET_DECKFILE_DATA.BUF_ = VECTOR (TOM$ITRTBL.CATA_KEYS(I));

   8971  4 000670   000023 235000 5                  LDA     19
         4 000671   200053 236100                    LDQ     I,,AUTO
         4 000672   200060 755100                    STA     FIRMWARE_FOUND+2,,AUTO
         4 000673   000006 402003                    MPY     6,DU
         4 000674   000005 036000 xsym               ADLQ    TOT$DMC+5
         4 000675   200060 235100                    LDA     FIRMWARE_FOUND+2,,AUTO
         4 000676   000100 757000 1                  STAQ    GET_DECKFILE_DATA+4

      586     8972    6         GET_DECKFILE_DATA.KEY_ = VECTOR (MASTER_ENTRY_KEY);

   8972  4 000677   000026 237000 5                  LDAQ    22
         4 000700   000076 757000 1                  STAQ    GET_DECKFILE_DATA+2

      587     8973    6         CALL M$READ (GET_DECKFILE_DATA) ALTRET (ERROR_EXIT);

   8973  4 000701   000074 630400 1                  EPPR0   GET_DECKFILE_DATA
         4 000702   440000 713400                    CLIMB   alt,read
         4 000703   401400 401760                    pmme    nvectors=4
         4 000704   001043 702000 4                  TSX2    ERROR_EXIT

      588     8974    6         IF TOM$ITRTBL.CATA_KEYS.CNAME.TYP(I) = 'ITR'

   8974  4 000705   200053 236100                    LDQ     I,,AUTO
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:128  
         4 000706   000030 402007                    MPY     24,DL
         4 000707   000005 470400 xsym               LDP0    TOT$DMC+5
         4 000710   040000 106506                    CMPC    fill='040'O
         4 000711   000001 400003                    ADSC9   1,Q,PR0                  cn=2,n=3
         4 000712   000016 000003 2                  ADSC9   SELECT_MSG+13            cn=0,n=3
         4 000713   001031 601000 4                  TNZ     s:8994

      589     8975    7         THEN DO;

      590     8976    7                 GET_DECKFILE_DATA.BUF_ = VECTOR (TOM$ITRTBL.CATA_DATA(I));

   8976  4 000714   000030 235000 5                  LDA     24
         4 000715   200053 236100                    LDQ     I,,AUTO
         4 000716   200060 755100                    STA     FIRMWARE_FOUND+2,,AUTO
         4 000717   000003 402003                    MPY     3,DU
         4 000720   000226 036003                    ADLQ    150,DU
         4 000721   000005 036000 xsym               ADLQ    TOT$DMC+5
         4 000722   200060 235100                    LDA     FIRMWARE_FOUND+2,,AUTO
         4 000723   000100 757000 1                  STAQ    GET_DECKFILE_DATA+4

      591     8977    7                 GET_DECKFILE_DATA.KEY_ = VECTOR (TOM$ITRTBL.CATA_KEYS(I));

   8977  4 000724   000023 235000 5                  LDA     19
         4 000725   200053 236100                    LDQ     I,,AUTO
         4 000726   200060 755100                    STA     FIRMWARE_FOUND+2,,AUTO
         4 000727   000006 402003                    MPY     6,DU
         4 000730   000005 036000 xsym               ADLQ    TOT$DMC+5
         4 000731   200060 235100                    LDA     FIRMWARE_FOUND+2,,AUTO
         4 000732   000076 757000 1                  STAQ    GET_DECKFILE_DATA+2

      592     8978    7                 CALL M$READ (GET_DECKFILE_DATA) ALTRET (ERROR_EXIT) ;

   8978  4 000733   000074 630400 1                  EPPR0   GET_DECKFILE_DATA
         4 000734   440000 713400                    CLIMB   alt,read
         4 000735   401400 401760                    pmme    nvectors=4
         4 000736   001043 702000 4                  TSX2    ERROR_EXIT

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:129  
      593     8979    7                 IF I > 0

   8979  4 000737   200053 235100                    LDA     I,,AUTO
         4 000740   000753 600000 4                  TZE     s:8983

      594     8980    7                 THEN TOM$ITRTBL.CATA_DATA.OBJ_KEY_INX(I) =

   8980  4 000741   200053 236100                    LDQ     I,,AUTO
         4 000742   000003 402007                    MPY     3,DL
         4 000743   000005 470400 xsym               LDP0    TOT$DMC+5
         4 000744   000000 620006                    EAX0    0,QL
         4 000745   000000 621006                    EAX1    0,QL
         4 000746   000223 236110                    LDQ     147,X0,PR0
         4 000747   777777 376007                    ANQ     -1,DL
         4 000750   000225 036110                    ADLQ    149,X0,PR0
         4 000751   000230 756111                    STQ     152,X1,PR0
         4 000752   000757 710000 4                  TRA     s:8984

      595     8981    7                            TOM$ITRTBL.CATA_DATA.NUM_ENTRIES(I-1) +
      596     8982    7                            TOM$ITRTBL.CATA_DATA.OBJ_KEY_INX(I-1);
      597     8983    7                 ELSE TOM$ITRTBL.CATA_DATA.OBJ_KEY_INX(I) = 0;

   8983  4 000753   200053 236100                    LDQ     I,,AUTO
         4 000754   000003 402007                    MPY     3,DL
         4 000755   000005 470400 xsym               LDP0    TOT$DMC+5
         4 000756   000230 450106                    STZ     152,QL,PR0

      598     8984    7                 CATALOG_ENTRY_KEY.DECK# = TOM$ITRTBL.CATA_DATA.DECK#(I);

   8984  4 000757   200053 236100                    LDQ     I,,AUTO
         4 000760   000003 402007                    MPY     3,DL
         4 000761   000005 470400 xsym               LDP0    TOT$DMC+5
         4 000762   000226 236106                    LDQ     150,QL,PR0
         4 000763   000011 772000                    QRL     9
         4 000764   000071 552030 1                  STBQ    CATALOG_ENTRY_KEY,'30'O

      599     8985    7                 GET_DECKFILE_DATA.KEY_ = VECTOR (CATALOG_ENTRY_KEY);
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:130  

   8985  4 000765   000032 237000 5                  LDAQ    26
         4 000766   000076 757000 1                  STAQ    GET_DECKFILE_DATA+2

      600     8986    8                 DO J = 1 TO TOM$ITRTBL.CATA_DATA.NUM_ENTRIES(I);

   8986  4 000767   000001 235007                    LDA     1,DL
         4 000770   200054 755100                    STA     J,,AUTO
         4 000771   001022 710000 4                  TRA     s:8991+3

      601     8987    8                    SLOT = TOM$ITRTBL.CATA_DATA.OBJ_KEY_INX(I) + J - 1 ;

   8987  4 000772   200053 236100                    LDQ     I,,AUTO
         4 000773   000003 402007                    MPY     3,DL
         4 000774   000005 470400 xsym               LDP0    TOT$DMC+5
         4 000775   000230 236106                    LDQ     152,QL,PR0
         4 000776   200054 036100                    ADLQ    J,,AUTO
         4 000777   000001 136007                    SBLQ    1,DL
         4 001000   200055 756100                    STQ     SLOT,,AUTO

      602     8988    8                    GET_DECKFILE_DATA.BUF_ = VECTOR (TOM$ITRTBL.OBJ_KEYS(SLOT)) ;

   8988  4 001001   000023 235000 5                  LDA     19
         4 001002   200060 755100                    STA     FIRMWARE_FOUND+2,,AUTO
         4 001003   000006 402003                    MPY     6,DU
         4 001004   000341 036003                    ADLQ    225,DU
         4 001005   000005 036000 xsym               ADLQ    TOT$DMC+5
         4 001006   200060 235100                    LDA     FIRMWARE_FOUND+2,,AUTO
         4 001007   000100 757000 1                  STAQ    GET_DECKFILE_DATA+4

      603     8989    8                    CATALOG_ENTRY_KEY.ENTRY# = J;

   8989  4 001010   000000 101500                    MRL     fill='000'O
         4 001011   200054 000004                    ADSC9   J,,AUTO                  cn=0,n=4
         4 001012   000071 600002 1                  ADSC9   CATALOG_ENTRY_KEY        cn=3,n=2

      604     8990    8                    CALL M$READ (GET_DECKFILE_DATA) ALTRET (ERROR_EXIT);
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:131  

   8990  4 001013   000074 630400 1                  EPPR0   GET_DECKFILE_DATA
         4 001014   440000 713400                    CLIMB   alt,read
         4 001015   401400 401760                    pmme    nvectors=4
         4 001016   001043 702000 4                  TSX2    ERROR_EXIT

      605     8991    8                 END /* DO */;

   8991  4 001017   200054 235100                    LDA     J,,AUTO
         4 001020   000001 035007                    ADLA    1,DL
         4 001021   200054 755100                    STA     J,,AUTO
         4 001022   200053 236100                    LDQ     I,,AUTO
         4 001023   000003 402007                    MPY     3,DL
         4 001024   000005 470400 xsym               LDP0    TOT$DMC+5
         4 001025   000226 236106                    LDQ     150,QL,PR0
         4 001026   777777 376007                    ANQ     -1,DL
         4 001027   200054 116100                    CMPQ    J,,AUTO
         4 001030   000772 603000 4                  TRC     s:8987

      606     8992    7              END /* THEN */;

      607     8993    6         ELSE /* Catalog key read was for a catalog other than ITR */ ;
      608     8994    6         I = I + 1;

   8994  4 001031   200053 235100                    LDA     I,,AUTO
         4 001032   000001 035007                    ADLA    1,DL
         4 001033   200053 755100                    STA     I,,AUTO

      609     8995    6      END /* WHILE */;

   8995  4 001034   200051 236100                    LDQ     MASTER_DATA,,AUTO
         4 001035   777777 376007                    ANQ     -1,DL
         4 001036   200053 116100                    CMPQ    I,,AUTO
         4 001037   001041 600000 4                  TZE     s:8996
         4 001040   000662 603000 4                  TRC     s:8970

      610     8996    5      RETURN ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:132  

   8996  4 001041   200050 221300                    LDX1  ! SECTOR_COUNT+1,,AUTO
         4 001042   000001 702211                    TSX2  ! 1,X1

      611     8997           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:133  
      612     8998    5   ERROR_EXIT:
      613     8999    5      TOM_ERROR_CODE.ERR# = %E$TBLLOADERR ;

   8999  4 001043   000043 236000 1     ERROR_EXIT   LDQ     TOM_ERROR_CODE
         4 001044   000031 376000 5                  ANQ     25
         4 001045   002220 276007                    ORQ     1168,DL
         4 001046   000043 756000 1                  STQ     TOM_ERROR_CODE

      614     9000    5      CALL TOX$ERROR (TOM_ERROR_CODE) ;

   9000  4 001047   000034 630400 5                  EPPR0   28
         4 001050   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 001051   000000 701000 xent               TSX1    TOX$ERROR
         4 001052   000000 011000                    NOP     0

      615     9001
      616     9002    5   END TOM$FETCH_CATALOG_TABLE ;

   9002  4 001053   200050 221300                    LDX1  ! SECTOR_COUNT+1,,AUTO
         4 001054   000001 702211                    TSX2  ! 1,X1

      617     9003        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:134  
      618     9004        /*I* NAME:         TOM$COUNT_APPL_CATALOGS
      619     9005             AUTHOR:       Carl Eichert
      620     9006             PURPOSE:      Counts ITR catalogs
      621     9007             INTERFACE:    INDEX
      622     9008             DESCRIPTION:  This procedure determines how many ITR catalogs
      623     9009                           in the deckfile apply to a particular device.
      624     9010        */
      625     9011
      626     9012    4   TOM$COUNT_APPL_CATALOGS: PROC ;

   9012  4 001055   200050 741300       TOM$COUNT_A* STX1  ! SECTOR_COUNT+1,,AUTO

      627     9013
      628     9014    5      DCL CATA_INX SBIN (36) ALIGNED;
      629     9015
      630     9016        /* Code */
      631     9017
      632     9018    5      CATA_INX = 0;

   9018  4 001056   200051 450100                    STZ     CATA_INX,,AUTO

      633     9019    5      NCIC = 0 ;

   9019  4 001057   200023 450100                    STZ     NCIC,,AUTO

      634     9020    6      DO WHILE CATA_INX < LENGTHC (TOM$ITRTBL.CATA_KEYS_);

   9020  4 001060   001116 710000 4                  TRA     s:9028

      635     9021    6         CALL INDEX (CATA_INX,CATALOG_KEY.NAME.APPL,TOM$ITRTBL.CATA_KEYS_,CATA_INX)

   9021  4 001061   200051 631500                    EPPR1   CATA_INX,,AUTO
         4 001062   000046 633400 1                  EPPR3   CATALOG_KEY+2
         4 001063   000002 220003                    LDX0    2,DU
         4 001064   300000 500510                    A9BD    0,X0,PR3
         4 001065   000006 223003                    LDX3    6,DU
         4 001066   000005 470400 xsym               LDP0    TOT$DMC+5
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:135  
         4 001067   001130 220003                    LDX0    600,DU
         4 001070   200051 236100                    LDQ     CATA_INX,,AUTO
         4 001071   000000 701000 xent               TSX1    X66_INDEX
         4 001072   001116 710000 4                  TRA     s:9028

      636     9022    7         WHENRETURN DO ;

      637     9023    7                 CUR_ITR_CATAS.DATA(NCIC) = TOM$ITRTBL.CATA_DATA(CATA_INX / 24);

   9023  4 001073   200051 236100                    LDQ     CATA_INX,,AUTO
         4 001074   000030 506007                    DIV     24,DL
         4 001075   000014 402007                    MPY     12,DL
         4 001076   200023 235100                    LDA     NCIC,,AUTO
         4 001077   000004 735000                    ALS     4
         4 001100   000105 100506                    MLR     fill='000'O
         4 001101   000226 000014                    ADSC9   150,Q,PR0                cn=0,n=12
         4 001102   200024 000014                    ADSC9   CUR_ITR_CATAS,A,AUTO     cn=0,n=12

      638     9024    7                 CUR_ITR_CATAS.CATA#(NCIC) = CATA_INX / 24 ;

   9024  4 001103   200023 236100                    LDQ     NCIC,,AUTO
         4 001104   000002 736000                    QLS     2
         4 001105   000000 621006                    EAX1    0,QL
         4 001106   200051 236100                    LDQ     CATA_INX,,AUTO
         4 001107   000030 506007                    DIV     24,DL
         4 001110   200027 756111                    STQ     ICC+1,X1,AUTO

      639     9025    7                 NCIC = NCIC + 1;

   9025  4 001111   200023 235100                    LDA     NCIC,,AUTO
         4 001112   000001 035007                    ADLA    1,DL
         4 001113   200023 755100                    STA     NCIC,,AUTO

      640     9026    7                 CATA_INX = CATA_INX + 24;

   9026  4 001114   000030 236007                    LDQ     24,DL
         4 001115   200051 056100                    ASQ     CATA_INX,,AUTO
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:136  

      641     9027    7              END /* WHENRETURN */;

      642     9028    6      END /* WHILE */;

   9028  4 001116   200051 235100                    LDA     CATA_INX,,AUTO
         4 001117   001130 115007                    CMPA    600,DL
         4 001120   001061 604000 4                  TMI     s:9021

      643     9029    5      RETURN ;

   9029  4 001121   200050 221300                    LDX1  ! SECTOR_COUNT+1,,AUTO
         4 001122   000001 702211                    TSX2  ! 1,X1

      644     9030
      645     9031    5   END TOM$COUNT_APPL_CATALOGS ;
      646     9032        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:137  
      647     9033        /*I* NAME:         TOM$SHOW_APPL_CHOICES
      648     9034             AUTHOR:       Carl Eichert
      649     9035             PURPOSE:      Give menu of ITR catalogs
      650     9036             INTERFACE:    TOT$CONSOLE_OUT
      651     9037                           BINCHAR
      652     9038             DESCRIPTION:  This procedure lists all of the ITR catalogs
      653     9039                           (including deck numbers) that  apply to  the
      654     9040                           device to be tested.  The difference between
      655     9041                           the catalogs is the firmware used.
      656     9042        */
      657     9043
      658     9044    4   TOM$SHOW_APPL_CHOICES: PROC ;

   9044  4 001123   200050 741300       TOM$SHOW_AP* STX1  ! SECTOR_COUNT+1,,AUTO

      659     9045
      660     9046    5      DCL I UBIN (36) ALIGNED;
      661     9047    5      DCL J UBIN (36) ALIGNED;
      662     9048    5      DCL K UBIN (36) ALIGNED;
      663     9049    5      DCL SELECT_MSG CHAR (0) CONSTANT CALIGNED INIT
      664     9050    5             ('Select firmware catalog deck number from:') ;
      665     9051    5      DCL NON_ZERO_FOUND BIT (1) ALIGNED;
      666     9052    5      DCL DECK#_CHAR_ (0:3) CHAR (1) CALIGNED;
      667     9053    5      DCL DECK#_CHAR REDEF DECK#_CHAR_ CHAR (4) CALIGNED;
      668     9054    5      DCL FIRMWARE_FOUND BIT (1) ALIGNED;
      669     9055    5      DCL 1 SELECT_CATA_BUF STATIC CALIGNED,
      670     9056    5            2 * CHAR (2) CALIGNED INIT (' '),
      671     9057    5            2 * CHAR (9) CALIGNED INIT ('CATA.ITR.'),
      672     9058    5            2 CATA CHAR (6) CALIGNED INIT (' '),
      673     9059    5            2 * CHAR (15) CALIGNED INIT (' firmware rev. '),
      674     9060    5            2 FW_REV CHAR (4) CALIGNED INIT (' '),
      675     9061    5            2 * CHAR (8) CALIGNED INIT (' deck # '),
      676     9062    5            2 DECK# CHAR (4) CALIGNED INIT (' '),
      677     9063    5            2 DEFAULT CHAR (10) CALIGNED;
      678     9064           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:138  
      679     9065        /* Code */
      680     9066
      681     9067    5      CONSOLE_FPT.BUF_ = VECTOR (SELECT_MSG);

   9067  4 001124   000036 237000 5                  LDAQ    30
         4 001125   000004 757000 xsym               STAQ    CONSOLE_FPT+4

      682     9068    5      CALL TOT$CONSOLE_OUT ;

   9068  4 001126   000002 631400 xsym               EPPR1   B_VECTNIL+2
         4 001127   000000 701000 xent               TSX1    TOT$CONSOLE_OUT
         4 001130   000000 011000                    NOP     0

      683     9069    5      CONSOLE_FPT.BUF_ = VECTOR (SELECT_CATA_BUF);

   9069  4 001131   000040 237000 5                  LDAQ    32
         4 001132   000004 757000 xsym               STAQ    CONSOLE_FPT+4

      684     9070    6      DO I = 0 TO NCIC - 1 ;

   9070  4 001133   200051 450100                    STZ     I,,AUTO
         4 001134   001247 710000 4                  TRA     s:9095+3

      685     9071    6         SELECT_CATA_BUF.CATA  = CATALOG_KEY.NAME.APPL ;

   9071  4 001135   040000 100400                    MLR     fill='040'O
         4 001136   000046 400006 1                  ADSC9   CATALOG_KEY+2            cn=2,n=6
         4 001137   000114 600006 1                  ADSC9   SELECT_CATA_BUF+2        cn=3,n=6

      686     9072    6         FIRMWARE_FOUND = %FALSE;

   9072  4 001140   200056 450100                    STZ     FIRMWARE_FOUND,,AUTO

      687     9073    6         J = CUR_ITR_CATAS.DATA.OBJ_KEY_INX(I) - 1;

   9073  4 001141   200051 235100                    LDA     I,,AUTO
         4 001142   000002 735000                    ALS     2
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:139  
         4 001143   200026 235105                    LDA     I+1,AL,AUTO
         4 001144   000001 135007                    SBLA    1,DL
         4 001145   200052 755100                    STA     J,,AUTO

      688     9074    7         DO UNTIL FIRMWARE_FOUND;

      689     9075    7            J = J + 1;

   9075  4 001146   200052 235100                    LDA     J,,AUTO
         4 001147   000001 035007                    ADLA    1,DL
         4 001150   200052 755100                    STA     J,,AUTO

      690     9076    7            IF TOM$ITRTBL.OBJ_KEYS.ONAME.ITR_TYP(J) = 'ITR'

   9076  4 001151   200052 236100                    LDQ     J,,AUTO
         4 001152   000030 402007                    MPY     24,DL
         4 001153   000005 470400 xsym               LDP0    TOT$DMC+5
         4 001154   040000 106506                    CMPC    fill='040'O
         4 001155   000341 200003                    ADSC9   225,Q,PR0                cn=1,n=3
         4 001156   000016 000003 2                  ADSC9   SELECT_MSG+13            cn=0,n=3
         4 001157   001162 600000 4                  TZE     s:9079

      691     9077    7            THEN /* Do Nothing */ ;
      692     9078    7            ELSE FIRMWARE_FOUND = %TRUE;

   9078  4 001160   400000 236003                    LDQ     -131072,DU
         4 001161   200056 756100                    STQ     FIRMWARE_FOUND,,AUTO

      693     9079    7         END /* DO */ ;

   9079  4 001162   200056 234100                    SZN     FIRMWARE_FOUND,,AUTO
         4 001163   001146 605000 4                  TPL     s:9075

      694     9080    6         SELECT_CATA_BUF.FW_REV = TOM$ITRTBL.OBJ_KEYS.ONAME.FW_REV(J);

   9080  4 001164   200052 236100                    LDQ     J,,AUTO
         4 001165   000006 402007                    MPY     6,DL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:140  
         4 001166   000346 236106                    LDQ     230,QL,PR0
         4 001167   777777 376003                    ANQ     -1,DU
         4 001170   040040 276007                    ORQ     16416,DL
         4 001171   000122 756000 1                  STQ     SELECT_CATA_BUF+8

      695     9081    6         CALL BINCHAR (DECK#_CHAR, CUR_ITR_CATAS.DATA.DECK#(I)) ;

   9081  4 001172   200051 235100                    LDA     I,,AUTO
         4 001173   000002 735000                    ALS     2
         4 001174   200024 236105                    LDQ     CUR_ITR_CATAS,AL,AUTO
         4 001175   000022 772000                    QRL     18
         4 001176   000000 235003                    LDA     0,DU
         4 001177   200060 757100                    STAQ    FIRMWARE_FOUND+2,,AUTO
         4 001200   000100 301500                    BTD
         4 001201   200060 000010                    NDSC9   FIRMWARE_FOUND+2,,AUTO   cn=0,s=lsgnf,sf=0,n=8
         4 001202   200055 030004                    NDSC9   DECK#_CHAR_,,AUTO        cn=0,s=nosgn,sf=0,n=4

      696     9082    6         K = 0;

   9082  4 001203   200053 450100                    STZ     K,,AUTO

      697     9083    6         NON_ZERO_FOUND = %FALSE;

   9083  4 001204   200054 450100                    STZ     NON_ZERO_FOUND,,AUTO

      698     9084    7         DO UNTIL NON_ZERO_FOUND OR K = 3;

      699     9085    7            IF DECK#_CHAR_(K) = '0'

   9085  4 001205   200053 235100                    LDA     K,,AUTO
         4 001206   040000 106505                    CMPC    fill='040'O
         4 001207   200055 000001                    ADSC9   DECK#_CHAR_,A,AUTO       cn=0,n=1
         4 001210   000042 000001 5                  ADSC9   34                       cn=0,n=1
         4 001211   001216 601000 4                  TNZ     s:9087

      700     9086    7            THEN DECK#_CHAR_(K) = ' ';

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:141  
   9086  4 001212   040105 100400                    MLR     fill='040'O
         4 001213   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         4 001214   200055 000001                    ADSC9   DECK#_CHAR_,A,AUTO       cn=0,n=1
         4 001215   001220 710000 4                  TRA     s:9088

      701     9087    7            ELSE NON_ZERO_FOUND = %TRUE;

   9087  4 001216   400000 236003                    LDQ     -131072,DU
         4 001217   200054 756100                    STQ     NON_ZERO_FOUND,,AUTO

      702     9088    7            K = K + 1;

   9088  4 001220   000001 035007                    ADLA    1,DL
         4 001221   200053 755100                    STA     K,,AUTO

      703     9089    7         END;

   9089  4 001222   200054 234100                    SZN     NON_ZERO_FOUND,,AUTO
         4 001223   001226 604000 4                  TMI     s:9090
         4 001224   000003 115007                    CMPA    3,DL
         4 001225   001205 601000 4                  TNZ     s:9085

      704     9090    6         SELECT_CATA_BUF.DECK# = DECK#_CHAR;

   9090  4 001226   200055 236100                    LDQ     DECK#_CHAR_,,AUTO
         4 001227   000125 756000 1                  STQ     SELECT_CATA_BUF+11

      705     9091    6         IF I > 0

   9091  4 001230   200051 235100                    LDA     I,,AUTO
         4 001231   001236 600000 4                  TZE     s:9093

      706     9092    6         THEN SELECT_CATA_BUF.DEFAULT = ' ';

   9092  4 001232   040000 100400                    MLR     fill='040'O
         4 001233   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         4 001234   000126 000012 1                  ADSC9   SELECT_CATA_BUF+12       cn=0,n=10
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:142  
         4 001235   001241 710000 4                  TRA     s:9094

      707     9093    6         ELSE SELECT_CATA_BUF.DEFAULT = ' (default)';

   9093  4 001236   040000 100400                    MLR     fill='040'O
         4 001237   000056 000012 2                  ADSC9   SELECT_MSG+45            cn=0,n=10
         4 001240   000126 000012 1                  ADSC9   SELECT_CATA_BUF+12       cn=0,n=10

      708     9094    6         CALL TOT$CONSOLE_OUT ;

   9094  4 001241   000002 631400 xsym               EPPR1   B_VECTNIL+2
         4 001242   000000 701000 xent               TSX1    TOT$CONSOLE_OUT
         4 001243   000000 011000                    NOP     0

      709     9095    6      END /* DO */ ;

   9095  4 001244   200051 235100                    LDA     I,,AUTO
         4 001245   000001 035007                    ADLA    1,DL
         4 001246   200051 755100                    STA     I,,AUTO
         4 001247   200051 236100                    LDQ     I,,AUTO
         4 001250   200023 116100                    CMPQ    NCIC,,AUTO
         4 001251   001135 602000 4                  TNC     s:9071

      710     9096    5      RETURN ;

   9096  4 001252   200050 221300                    LDX1  ! SECTOR_COUNT+1,,AUTO
         4 001253   000001 702211                    TSX2  ! 1,X1

      711     9097
      712     9098    5   END TOM$SHOW_APPL_CHOICES ;
      713     9099        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:143  
      714     9100        /*I* NAME:         TOM$GET_USER_CHOICE
      715     9101             AUTHOR:       Carl Eichert
      716     9102             PURPOSE:      Select ITR Catalog
      717     9103             INTERFACE:    TOT$CONSOLE_IN
      718     9104                           CHARBIN
      719     9105                           M$PROMPT
      720     9106             DESCRIPTION:  This procedure accepts the deck number of the ITR
      721     9107                           catalog to load.  This is done only when there is
      722     9108                           more than one ITR catalog for a particular device
      723     9109        */
      724     9110
      725     9111    4   TOM$GET_USER_CHOICE: PROC ;

   9111  4 001254   200050 741300       TOM$GET_USE* STX1  ! SECTOR_COUNT+1,,AUTO

      726     9112
      727     9113    5      DCL I      UBIN WORD ALIGNED ;
      728     9114    5      DCL J      UBIN WORD ALIGNED ;
      729     9115    5      DCL UC_PROMPT CHAR (0) CALIGNED STATIC INIT ('aEnter <deck#> or <CR>:');
      730     9116    5      DCL DECK#_ (0:3) CHAR (1) STATIC CALIGNED;
      731     9117    5      DCL DECK# REDEF DECK#_ CHAR (4) CALIGNED;
      732     9118    5      DCL DECK_OCT UBIN (36) ALIGNED;
      733     9119    5      DCL MATCH BIT (1) ALIGNED;
      734     9120           %FPT_PROMPT(FPTN = ENTER_PROMPT,
      735     9121                       DCB = M$UC,
      736     9122                       PROMPT = UC_PROMPT,
      737     9123                       VFC = YES);
      738     9151           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:144  
      739     9152        /* Code */
      740     9153
      741     9154    5      CALL M$PROMPT (ENTER_PROMPT);

   9154  4 001255   000140 630400 1                  EPPR0   ENTER_PROMPT
         4 001256   160002 713400                    CLIMB   57346
         4 001257   401000 401760                    pmme    nvectors=3

      742     9155    5      MATCH = %FALSE;

   9155  4 001260   200054 450100                    STZ     MATCH,,AUTO

      743     9156    6      DO WHILE ~MATCH;

   9156  4 001261   001407 710000 4                  TRA     s:9192

      744     9157    6         DECK# = ' ' ;

   9157  4 001262   000035 236000 xsym               LDQ     B_VECTNIL+29
         4 001263   000137 756000 1                  STQ     DECK#_

      745     9158    6         READ_IO.BUF_ = VECTOR (DECK#) ;

   9158  4 001264   000044 237000 5                  LDAQ    36
         4 001265   000004 757000 xsym               STAQ    READ_IO+4

      746     9159    6         CALL TOT$CONSOLE_IN ;

   9159  4 001266   000002 631400 xsym               EPPR1   B_VECTNIL+2
         4 001267   000000 701000 xent               TSX1    TOT$CONSOLE_IN
         4 001270   000000 011000                    NOP     0

      747     9160    6         IF DECK# = ' '

   9160  4 001271   000137 236000 1                  LDQ     DECK#_
         4 001272   000035 116000 xsym               CMPQ    B_VECTNIL+29
         4 001273   001277 601000 4                  TNZ     s:9163
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:145  

      748     9161    6         THEN MATCH = %TRUE;

   9161  4 001274   400000 236003                    LDQ     -131072,DU
         4 001275   200054 756100                    STQ     MATCH,,AUTO
         4 001276   001407 710000 4                  TRA     s:9192

      749     9162    7         ELSE DO;

      750     9163    7                 J = 3;

   9163  4 001277   000003 235007                    LDA     3,DL
         4 001300   200052 755100                    STA     J,,AUTO

      751     9164                   /* The following wierd DO loop is used because CHARBIN
      752     9165                      only accepts digits and IPR's otherwise. */
      753     9166    8                 DO I = 0 TO 3;

   9166  4 001301   200051 450100                    STZ     I,,AUTO

      754     9167    8                    IF DECK#_(J) > '9' OR DECK#_(J) < '0'

   9167  4 001302   200052 235100                    LDA     J,,AUTO
         4 001303   040005 106400                    CMPC    fill='040'O
         4 001304   000043 000001 5                  ADSC9   35                       cn=0,n=1
         4 001305   000137 000001 1                  ADSC9   DECK#_,A                 cn=0,n=1
         4 001306   001313 602000 4                  TNC     s:9168
         4 001307   040000 106405                    CMPC    fill='040'O
         4 001310   000137 000001 1                  ADSC9   DECK#_,A                 cn=0,n=1
         4 001311   000042 000001 5                  ADSC9   34                       cn=0,n=1
         4 001312   001346 603000 4                  TRC     s:9179

      755     9168    9                    THEN DO CASE (J);

   9168  4 001313   000004 115007                    CMPA    4,DL
         4 001314   001316 602005 4                  TNC     s:9168+3,AL
         4 001315   001350 710000 4                  TRA     s:9180
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:146  
         4 001316   001322 710000 4                  TRA     s:9170
         4 001317   001322 710000 4                  TRA     s:9170
         4 001320   001322 710000 4                  TRA     s:9170
         4 001321   001330 710000 4                  TRA     s:9173

      756     9169    9                            CASE (0,1,2);

      757     9170    9                               DECK#_(J) = '0';

   9170  4 001322   040005 100400                    MLR     fill='040'O
         4 001323   000042 000001 5                  ADSC9   34                       cn=0,n=1
         4 001324   000137 000001 1                  ADSC9   DECK#_,A                 cn=0,n=1

      758     9171    9                               J = J - 1;

   9171  4 001325   000001 135007                    SBLA    1,DL
         4 001326   200052 755100                    STA     J,,AUTO
         4 001327   001350 710000 4                  TRA     s:9180

      759     9172    9                            CASE (3);

      760     9173    9                               DECK#_(3) = DECK#_(2);

   9173  4 001330   000137 236000 1                  LDQ     DECK#_
         4 001331   000011 772000                    QRL     9
         4 001332   000137 552004 1                  STBQ    DECK#_,'04'O

      761     9174    9                               DECK#_(2) = DECK#_(1);

   9174  4 001333   000137 236000 1                  LDQ     DECK#_
         4 001334   000011 772000                    QRL     9
         4 001335   000137 552010 1                  STBQ    DECK#_,'10'O

      762     9175    9                               DECK#_(1) = DECK#_(0);

   9175  4 001336   000137 236000 1                  LDQ     DECK#_
         4 001337   000011 772000                    QRL     9
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:147  
         4 001340   000137 552020 1                  STBQ    DECK#_,'20'O

      763     9176    9                               DECK#_(0) = '0';

   9176  4 001341   060000 236003                    LDQ     24576,DU
         4 001342   000137 552040 1                  STBQ    DECK#_,'40'O

      764     9177    9                               J = 3;

   9177  4 001343   000003 235007                    LDA     3,DL
         4 001344   200052 755100                    STA     J,,AUTO

      765     9178    9                         END /* THEN */ ;

   9178  4 001345   001350 710000 4                  TRA     s:9180

      766     9179    8                    ELSE J = J - 1;

   9179  4 001346   000001 135007                    SBLA    1,DL
         4 001347   200052 755100                    STA     J,,AUTO

      767     9180    8                 END /* DO */ ;

   9180  4 001350   200051 236100                    LDQ     I,,AUTO
         4 001351   000001 036007                    ADLQ    1,DL
         4 001352   200051 756100                    STQ     I,,AUTO
         4 001353   000004 116007                    CMPQ    4,DL
         4 001354   001302 602000 4                  TNC     s:9167

      768     9181    7                 CALL CHARBIN (DECK_OCT,DECK#);

   9181  4 001355   000100 305400                    DTB
         4 001356   000137 030004 1                  NDSC9   DECK#_                   cn=0,s=nosgn,sf=0,n=4
         4 001357   200060 000010                    NDSC9   FIRMWARE_FOUND+2,,AUTO   cn=0,s=lsgnf,sf=0,n=8
         4 001360   200061 235100                    LDA     FIRMWARE_FOUND+3,,AUTO
         4 001361   200053 755100                    STA     DECK_OCT,,AUTO

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:148  
      769     9182    8                 DO I = 0 TO NCIC;

   9182  4 001362   200051 450100                    STZ     I,,AUTO
         4 001363   001402 710000 4                  TRA     s:9189+3

      770     9183    8                    IF DECK_OCT = CUR_ITR_CATAS.DATA.DECK#(I)

   9183  4 001364   200051 235100                    LDA     I,,AUTO
         4 001365   000002 735000                    ALS     2
         4 001366   200024 236105                    LDQ     CUR_ITR_CATAS,AL,AUTO
         4 001367   000022 772000                    QRL     18
         4 001370   200053 116100                    CMPQ    DECK_OCT,,AUTO
         4 001371   001377 601000 4                  TNZ     s:9189

      771     9184    9                    THEN DO;

      772     9185    9                            MATCH = %TRUE;

   9185  4 001372   400000 236003                    LDQ     -131072,DU
         4 001373   200054 756100                    STQ     MATCH,,AUTO

      773     9186    9                            CALL_SEQ$ -> CALL_SEQUENCE.DECK = DECK_OCT ;

   9186  4 001374   200053 720100                    LXL0    DECK_OCT,,AUTO
         4 001375   200007 470500                    LDP0    CALL_SEQ$,,AUTO
         4 001376   000001 740100                    STX0    1,,PR0

      774     9187    9                         END /* THEN */ ;

      775     9188    8                    ELSE /* Do Nothing */ ;
      776     9189    8                 END /* DO */ ;

   9189  4 001377   200051 236100                    LDQ     I,,AUTO
         4 001400   000001 036007                    ADLQ    1,DL
         4 001401   200051 756100                    STQ     I,,AUTO
         4 001402   200023 236100                    LDQ     NCIC,,AUTO
         4 001403   200051 116100                    CMPQ    I,,AUTO
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:149  
         4 001404   001364 603000 4                  TRC     s:9183

      777     9190    7                 DECK# = ' ';

   9190  4 001405   000035 236000 xsym               LDQ     B_VECTNIL+29
         4 001406   000137 756000 1                  STQ     DECK#_

      778     9191    7              END /* ELSE */ ;

      779     9192    6      END /* WHILE */ ;

   9192  4 001407   200054 236100                    LDQ     MATCH,,AUTO
         4 001410   400000 376003                    ANQ     -131072,DU
         4 001411   400000 676003                    ERQ     -131072,DU
         4 001412   001262 601000 4                  TNZ     s:9157

      780     9193    5      RETURN ;

   9193  4 001413   200050 221300                    LDX1  ! SECTOR_COUNT+1,,AUTO
         4 001414   000001 702211                    TSX2  ! 1,X1

      781     9194
      782     9195    5   END TOM$GET_USER_CHOICE ;
      783     9196    4   END TOM$HAVE_USER_PICK ;
      784     9197        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:150  
      785     9198        /*I* NAME:         TOM$SET_MDR_CATALOG_KEY
      786     9199             INPUT:        TOP$TCP.DEVICE_CODE(TCX)
      787     9200                           TCX
      788     9201             OUTPUT:       CATALOG_KEY
      789     9202             DESCRIPTION:  This procedure sets the catalog key for an MDR.
      790     9203        */
      791     9204
      792     9205    3   TOM$SET_MDR_CATALOG_KEY: PROC ALTRET ;

   9205  4 001415   200022 741300       TOM$SET_MDR* STX1  ! @X2,,AUTO

      793     9206
      794     9207        /* Code */
      795     9208
      796     9209    4      CATALOG_KEY.NAME.CATA = 'CATA.' ;

   9209  4 001416   040000 100400                    MLR     fill='040'O
         4 001417   000020 000005 2                  ADSC9   SELECT_MSG+15            cn=0,n=5
         4 001420   000044 200005 1                  ADSC9   CATALOG_KEY              cn=1,n=5

      797     9210    4      CATALOG_KEY.NAME.TYP  = 'MDR.' ;

   9210  4 001421   040000 100400                    MLR     fill='040'O
         4 001422   000061 000004 2                  ADSC9   SELECT_MSG+48            cn=0,n=4
         4 001423   000045 400004 1                  ADSC9   CATALOG_KEY+1            cn=2,n=4

      798     9211    5      DO CASE (TOP$TCP.DEVICE_CODE(TCX)) ;

   9211  4 001424   200021 470500                    LDP0    @TCX,,AUTO
         4 001425   000000 236100                    LDQ     0,,PR0
         4 001426   000122 402007                    MPY     82,DL
         4 001427   000001 736000                    QLS     1
         4 001430   000003 471400 xsym               LDP1    TOT$DMC+3
         4 001431   100007 236106                    LDQ     7,QL,PR1
         4 001432   000022 772000                    QRL     18
         4 001433   000016 136007                    SBLQ    14,DL
         4 001434   000053 116007                    CMPQ    43,DL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:151  
         4 001435   001437 602006 4                  TNC     s:9211+11,QL
         4 001436   001532 710000 4                  TRA     s:9221
         4 001437   001512 710000 4                  TRA     s:9213
         4 001440   001532 710000 4                  TRA     s:9221
         4 001441   001532 710000 4                  TRA     s:9221
         4 001442   001532 710000 4                  TRA     s:9221
         4 001443   001532 710000 4                  TRA     s:9221
         4 001444   001532 710000 4                  TRA     s:9221
         4 001445   001522 710000 4                  TRA     s:9217
         4 001446   001532 710000 4                  TRA     s:9221
         4 001447   001532 710000 4                  TRA     s:9221
         4 001450   001532 710000 4                  TRA     s:9221
         4 001451   001532 710000 4                  TRA     s:9221
         4 001452   001532 710000 4                  TRA     s:9221
         4 001453   001526 710000 4                  TRA     s:9219
         4 001454   001532 710000 4                  TRA     s:9221
         4 001455   001526 710000 4                  TRA     s:9219
         4 001456   001532 710000 4                  TRA     s:9221
         4 001457   001522 710000 4                  TRA     s:9217
         4 001460   001532 710000 4                  TRA     s:9221
         4 001461   001532 710000 4                  TRA     s:9221
         4 001462   001532 710000 4                  TRA     s:9221
         4 001463   001532 710000 4                  TRA     s:9221
         4 001464   001532 710000 4                  TRA     s:9221
         4 001465   001532 710000 4                  TRA     s:9221
         4 001466   001532 710000 4                  TRA     s:9221
         4 001467   001532 710000 4                  TRA     s:9221
         4 001470   001532 710000 4                  TRA     s:9221
         4 001471   001516 710000 4                  TRA     s:9215
         4 001472   001532 710000 4                  TRA     s:9221
         4 001473   001532 710000 4                  TRA     s:9221
         4 001474   001516 710000 4                  TRA     s:9215
         4 001475   001532 710000 4                  TRA     s:9221
         4 001476   001516 710000 4                  TRA     s:9215
         4 001477   001516 710000 4                  TRA     s:9215
         4 001500   001532 710000 4                  TRA     s:9221
         4 001501   001532 710000 4                  TRA     s:9221
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:152  
         4 001502   001532 710000 4                  TRA     s:9221
         4 001503   001532 710000 4                  TRA     s:9221
         4 001504   001532 710000 4                  TRA     s:9221
         4 001505   001532 710000 4                  TRA     s:9221
         4 001506   001516 710000 4                  TRA     s:9215
         4 001507   001532 710000 4                  TRA     s:9221
         4 001510   001532 710000 4                  TRA     s:9221
         4 001511   001516 710000 4                  TRA     s:9215

      799     9212    5         CASE ( %DMTC9);

      800     9213    5            CATALOG_KEY.NAME.APPL = 'TAPE  ';

   9213  4 001512   040000 100400                    MLR     fill='040'O
         4 001513   000062 000006 2                  ADSC9   SELECT_MSG+49            cn=0,n=6
         4 001514   000046 400006 1                  ADSC9   CATALOG_KEY+2            cn=2,n=6
         4 001515   001533 710000 4                  TRA     s:9223

      801     9214    5         CASE ( %DS450, %DS509, %DSA1B, %DSD1B, %DSC1B, %DSK1B );

      802     9215    5            CATALOG_KEY.NAME.APPL = 'DISK  ';

   9215  4 001516   040000 100400                    MLR     fill='040'O
         4 001517   000064 000006 2                  ADSC9   SELECT_MSG+51            cn=0,n=6
         4 001520   000046 400006 1                  ADSC9   CATALOG_KEY+2            cn=2,n=6
         4 001521   001533 710000 4                  TRA     s:9223

      803     9216    5         CASE (%DPR41, %DPR23);

      804     9217    5            CATALOG_KEY.NAME.APPL = 'PRINT ';

   9217  4 001522   040000 100400                    MLR     fill='040'O
         4 001523   000066 000006 2                  ADSC9   SELECT_MSG+53            cn=0,n=6
         4 001524   000046 400006 1                  ADSC9   CATALOG_KEY+2            cn=2,n=6
         4 001525   001533 710000 4                  TRA     s:9223

      805     9218    5         CASE (%DCP30, %DCR31);
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:153  

      806     9219    5            CATALOG_KEY.NAME.APPL = 'CARD  ';

   9219  4 001526   040000 100400                    MLR     fill='040'O
         4 001527   000070 000006 2                  ADSC9   SELECT_MSG+55            cn=0,n=6
         4 001530   000046 400006 1                  ADSC9   CATALOG_KEY+2            cn=2,n=6
         4 001531   001533 710000 4                  TRA     s:9223

      807     9220    5         CASE (ELSE);

      808     9221    5            ALTRETURN;

   9221  4 001532   000000 702211                    TSX2  ! 0,X1

      809     9222    5      END /* CASE */ ;

      810     9223    4      RETURN ;

   9223  4 001533   000001 702211                    TSX2  ! 1,X1

      811     9224
      812     9225    4   END TOM$SET_MDR_CATALOG_KEY ;
      813     9226        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:154  
      814     9227        /*I* NAME:         TOM$SET_NIO_CATALOG_KEY
      815     9228             AUTHOR:       Scott S. Sheppard
      816     9229             PURPOSE:      Sets up the catalog key for NIO tests
      817     9230             INTERFACE:    None called.
      818     9231             PARAMETERS:   None passed.
      819     9232             DATA:         CATALOG_KEY - output
      820     9233             DESCRIPTION:  This  procedure  sets  up  the catalog key for
      821     9234                           DIPPER  testing.  Currently,  all DIPPER tests
      822     9235                           reside  in the  same catalog  in the deckfile.
      823     9236                           This  was  done  so  that  HELP file selection
      824     9237                           could be done more easily.
      825     9238        */
      826     9239
      827     9240    3   TOM$SET_NIO_CATALOG_KEY: PROC ;

   9240  4 001534   200022 741300       TOM$SET_NIO* STX1  ! @X2,,AUTO

      828     9241
      829     9242        /* Code */
      830     9243
      831     9244    4      CATALOG_KEY.NAME.CATA = 'CATA.' ;

   9244  4 001535   040000 100400                    MLR     fill='040'O
         4 001536   000020 000005 2                  ADSC9   SELECT_MSG+15            cn=0,n=5
         4 001537   000044 200005 1                  ADSC9   CATALOG_KEY              cn=1,n=5

      832     9245    4      CATALOG_KEY.NAME.TYP = 'NIO.' ;

   9245  4 001540   040000 100400                    MLR     fill='040'O
         4 001541   000072 000004 2                  ADSC9   SELECT_MSG+57            cn=0,n=4
         4 001542   000045 400004 1                  ADSC9   CATALOG_KEY+1            cn=2,n=4

      833     9246    4      CATALOG_KEY.NAME.APPL = 'MCA' ;

   9246  4 001543   040000 100400                    MLR     fill='040'O
         4 001544   000073 000003 2                  ADSC9   SELECT_MSG+58            cn=0,n=3
         4 001545   000046 400006 1                  ADSC9   CATALOG_KEY+2            cn=2,n=6
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:155  

      834     9247    4      RETURN ;

   9247  4 001546   000001 702211                    TSX2  ! 1,X1

      835     9248
      836     9249    4   END TOM$SET_NIO_CATALOG_KEY ;
      837     9250    3   END TOM$BUILD_CATALOG_KEY;
      838     9251        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:156  
      839     9252        /*I* NAME:         TOM$READ_CATALOG
      840     9253             PURPOSE:      reads the specified catalog
      841     9254             INTERFACE:    TOL$GET_CATALOG
      842     9255             PARAMETERS:   X2 - maximum load address (input)
      843     9256                           X3 - test page base (input)
      844     9257             DATA:         LOAD_SIZE - output
      845     9258                           READ_ERROR_CODE - output
      846     9259                           CALL_SEQUENCE - input
      847     9260             DESCRIPTION:  This  procedure calls  the loader  to read the
      848     9261                           ITR  or MDR  catalog specified  by the catalog
      849     9262                           which has been  previously built.  The catalog
      850     9263                           is read from the  deckfile and loaded into the
      851     9264                           buffer specified in  the user's call sequence.
      852     9265                           The  loader  will  return  an error code which
      853     9266                           indicates  the  status  of  the  catalog  read
      854     9267                           operation.
      855     9268                              Error Return values
      856     9269                                 0 - good read
      857     9270                                 42 - more to read
      858     9271                                 other - error occurred
      859     9272        */
      860     9273        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:157  
      861     9274    2   TOM$READ_CATALOG: PROC (X2, X3) ALTRET;

   9274  4 001547   200020 741300       TOM$READ_CA* STX1  ! @RETURN_DELTA+1,,AUTO

      862     9275
      863     9276    3      DCL X2 UBIN HALF HALIGNED ;
      864     9277    3      DCL X3 UBIN HALF HALIGNED ;
      865     9278
      866     9279        /* Code */
      867     9280
      868     9281    3      LOAD_SIZE = 0;

   9281  4 001550   000012 450000 1                  STZ     LOAD_SIZE

      869     9282    3      READ_ERROR_CODE = 0;

   9282  4 001551   000042 450000 1                  STZ     READ_ERROR_CODE

      870     9283    3      LAST_ENTRY_NO = CALL_SEQ$ -> CALL_SEQUENCE.NEXT_ENTRY;

   9283  4 001552   200007 470500                    LDP0    CALL_SEQ$,,AUTO
         4 001553   000001 720100                    LXL0    1,,PR0
         4 001554   000011 740000 1                  STX0    LAST_ENTRY_NO

      871     9284
      872     9285    3      CALL TOL$GET_CATALOG (CATALOG_KEY,

   9285  4 001555   000012 237000 5                  LDAQ    10
         4 001556   200064 757100                    STAQ    FIRMWARE_FOUND+6,,AUTO
         4 001557   200021 236100                    LDQ     @X2,,AUTO
         4 001560   200007 235100                    LDA     CALL_SEQ$,,AUTO
         4 001561   200062 757100                    STAQ    FIRMWARE_FOUND+4,,AUTO
         4 001562   200022 236100                    LDQ     @X3,,AUTO
         4 001563   000015 235000 5                  LDA     13
         4 001564   200060 757100                    STAQ    FIRMWARE_FOUND+2,,AUTO
         4 001565   200060 630500                    EPPR0   FIRMWARE_FOUND+2,,AUTO
         4 001566   000024 631400 xsym               EPPR1   B_VECTNIL+20
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:158  
         4 001567   000000 701000 xent               TSX1    TOL$GET_CATALOG
         4 001570   000000 011000                    NOP     0

      873     9286    3              X3,
      874     9287    3              CALL_SEQ$ -> CALL_SEQUENCE,
      875     9288    3              X2,
      876     9289    3              LOAD_SIZE,
      877     9290    3              READ_ERROR_CODE);
      878     9291
      879     9292    4      DO CASE (READ_ERR_CODE.CODE);

   9292  4 001571   000042 720000 1                  LXL0    READ_ERROR_CODE
         4 001572   000777 360003                    ANX0    511,DU
         4 001573   000053 100003                    CMPX0   43,DU
         4 001574   001576 602010 4                  TNC     s:9292+5,X0
         4 001575   001653 710000 4                  TRA     s:9296
         4 001576   001651 710000 4                  TRA     s:9294
         4 001577   001653 710000 4                  TRA     s:9296
         4 001600   001653 710000 4                  TRA     s:9296
         4 001601   001653 710000 4                  TRA     s:9296
         4 001602   001653 710000 4                  TRA     s:9296
         4 001603   001653 710000 4                  TRA     s:9296
         4 001604   001653 710000 4                  TRA     s:9296
         4 001605   001653 710000 4                  TRA     s:9296
         4 001606   001653 710000 4                  TRA     s:9296
         4 001607   001653 710000 4                  TRA     s:9296
         4 001610   001653 710000 4                  TRA     s:9296
         4 001611   001653 710000 4                  TRA     s:9296
         4 001612   001653 710000 4                  TRA     s:9296
         4 001613   001653 710000 4                  TRA     s:9296
         4 001614   001653 710000 4                  TRA     s:9296
         4 001615   001653 710000 4                  TRA     s:9296
         4 001616   001653 710000 4                  TRA     s:9296
         4 001617   001653 710000 4                  TRA     s:9296
         4 001620   001653 710000 4                  TRA     s:9296
         4 001621   001653 710000 4                  TRA     s:9296
         4 001622   001653 710000 4                  TRA     s:9296
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:159  
         4 001623   001653 710000 4                  TRA     s:9296
         4 001624   001653 710000 4                  TRA     s:9296
         4 001625   001653 710000 4                  TRA     s:9296
         4 001626   001653 710000 4                  TRA     s:9296
         4 001627   001653 710000 4                  TRA     s:9296
         4 001630   001653 710000 4                  TRA     s:9296
         4 001631   001653 710000 4                  TRA     s:9296
         4 001632   001653 710000 4                  TRA     s:9296
         4 001633   001653 710000 4                  TRA     s:9296
         4 001634   001653 710000 4                  TRA     s:9296
         4 001635   001653 710000 4                  TRA     s:9296
         4 001636   001653 710000 4                  TRA     s:9296
         4 001637   001653 710000 4                  TRA     s:9296
         4 001640   001653 710000 4                  TRA     s:9296
         4 001641   001653 710000 4                  TRA     s:9296
         4 001642   001653 710000 4                  TRA     s:9296
         4 001643   001653 710000 4                  TRA     s:9296
         4 001644   001653 710000 4                  TRA     s:9296
         4 001645   001653 710000 4                  TRA     s:9296
         4 001646   001653 710000 4                  TRA     s:9296
         4 001647   001653 710000 4                  TRA     s:9296
         4 001650   001651 710000 4                  TRA     s:9294

      880     9293    4         CASE (0,42);

      881     9294    4            RETURN;

   9294  4 001651   200020 221300                    LDX1  ! @RETURN_DELTA+1,,AUTO
         4 001652   000001 702211                    TSX2  ! 1,X1

      882     9295    4         CASE (ELSE);

      883     9296    4            ALTRETURN;

   9296  4 001653   200020 221300                    LDX1  ! @RETURN_DELTA+1,,AUTO
         4 001654   000000 702211                    TSX2  ! 0,X1

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:160  
      884     9297    4      END /* CASE */ ;

      885     9298
      886     9299    3   END TOM$READ_CATALOG;
      887     9300        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:161  
      888     9301        /*I* NAME:         TOM$REFORMAT_CATALOG_DATA
      889     9302             PURPOSE:      selects proper processing routine
      890     9303             INTERFACE:    TOM$RETURN_NIO_ENTRIES
      891     9304                           TOM$RETURN_STD_ENTRIES
      892     9305                           TOX$ERROR
      893     9306             PARAMETERS:   TCX - input
      894     9307             DATA:         TOP$TCP.TEST_TYPE(TCX) - input
      895     9308             DESCRIPTION:  This procedure  determines which catalog entry
      896     9309                           return  routine to  call based  on the type of
      897     9310                           test a MME CATA is being performed for.
      898     9311        */
      899     9312
      900     9313    2   TOM$REFORMAT_CATALOG_DATA: PROC (TCX, A) ;

   9313  4 001655   200020 741300       TOM$REFORMA* STX1  ! @RETURN_DELTA+1,,AUTO

      901     9314
      902     9315    3      DCL TCX UBIN WORD ALIGNED ;
      903     9316    3      DCL A   UBIN WORD ALIGNED ;
      904     9317
      905     9318        /* Code */
      906     9319
      907     9320    4      DO SELECT (TOP$TCP.TEST_TYPE(TCX)) ;

   9320  4 001656   200021 470500                    LDP0    @TCX,,AUTO
         4 001657   000000 236100                    LDQ     0,,PR0
         4 001660   000122 402007                    MPY     82,DL
         4 001661   000000 620006                    EAX0    0,QL
         4 001662   000003 736000                    QLS     3
         4 001663   000003 471400 xsym               LDP1    TOT$DMC+3
         4 001664   040000 106506                    CMPC    fill='040'O
         4 001665   100002 000003                    ADSC9   2,Q,PR1                  cn=0,n=3
         4 001666   000014 000003 2                  ADSC9   SELECT_MSG+11            cn=0,n=3
         4 001667   001723 602000 4                  TNC     s:9328
         4 001670   000000 635010                    EAA     0,X0
         4 001671   000021 771000                    ARL     17
         4 001672   100002 236105                    LDQ     2,AL,PR1
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:162  
         4 001673   000014 676000 2                  ERQ     SELECT_MSG+11
         4 001674   000016 376000 5                  ANQ     14
         4 001675   001705 600000 4                  TZE     s:9322
         4 001676   000000 635010                    EAA     0,X0
         4 001677   000021 771000                    ARL     17
         4 001700   100002 236105                    LDQ     2,AL,PR1
         4 001701   000015 676000 2                  ERQ     SELECT_MSG+12
         4 001702   000016 376000 5                  ANQ     14
         4 001703   001723 601000 4                  TNZ     s:9328
         4 001704   001705 710000 4                  TRA     s:9322

      908     9321    4         SELECT ('NIO', 'RPM') ;

      909     9322    4         CALL TOM$RETURN_NIO_ENTRIES (A) WHENALTRETURN

   9322  4 001705   200022 236100                    LDQ     @A,,AUTO
         4 001706   200025 756100                    STQ     @RETURN_DELTA+1,,AUTO
         4 001707   001742 701000 4                  TSX1    TOM$RETURN_NIO_ENTRIES
         4 001710   001712 702000 4                  TSX2    s:9324
         4 001711   001722 710000 4                  TRA     s:9326

      910     9323    5              DO ;

      911     9324    5                 TOM_ERROR_CODE.ERR# = %E$SAVEALT ;

   9324  4 001712   000043 236000 1                  LDQ     TOM_ERROR_CODE
         4 001713   000031 376000 5                  ANQ     25
         4 001714   002240 276007                    ORQ     1184,DL
         4 001715   000043 756000 1                  STQ     TOM_ERROR_CODE

      912     9325    5                 CALL TOX$ERROR (TOM_ERROR_CODE) ;

   9325  4 001716   000034 630400 5                  EPPR0   28
         4 001717   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 001720   000000 701000 xent               TSX1    TOX$ERROR
         4 001721   000000 011000                    NOP     0

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:163  
      913     9326    5              END /* WHENALTRETURN */ ;

   9326  4 001722   001740 710000 4                  TRA     s:9334

      914     9327    4         SELECT (ELSE) ;

      915     9328    4      CALL TOM$RETURN_STD_ENTRIES (A) WHENALTRETURN

   9328  4 001723   200022 236100                    LDQ     @A,,AUTO
         4 001724   200025 756100                    STQ     @RETURN_DELTA+1,,AUTO
         4 001725   002077 701000 4                  TSX1    TOM$RETURN_STD_ENTRIES
         4 001726   001730 702000 4                  TSX2    s:9330
         4 001727   001740 710000 4                  TRA     s:9334

      916     9329    5           DO ;

      917     9330    5              TOM_ERROR_CODE.ERR# = %E$SAVEALT ;

   9330  4 001730   000043 236000 1                  LDQ     TOM_ERROR_CODE
         4 001731   000031 376000 5                  ANQ     25
         4 001732   002240 276007                    ORQ     1184,DL
         4 001733   000043 756000 1                  STQ     TOM_ERROR_CODE

      918     9331    5              CALL TOX$ERROR (TOM_ERROR_CODE) ;

   9331  4 001734   000034 630400 5                  EPPR0   28
         4 001735   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 001736   000000 701000 xent               TSX1    TOX$ERROR
         4 001737   000000 011000                    NOP     0

      919     9332    5           END /* WHENALTRETURN */ ;

      920     9333    4      END /* SELECT */ ;

      921     9334    3      RETURN ;

   9334  4 001740   200020 221300                    LDX1  ! @RETURN_DELTA+1,,AUTO
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:164  
         4 001741   000001 702211                    TSX2  ! 1,X1

      922     9335
      923     9336        /* END TOM$REFORMAT_CATALOG_DATA */
      924     9337        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:165  
      925     9338        /*I* NAME:         TOM$RETURN_NIO_ENTRIES
      926     9339             AUTHOR:       Scott S. Sheppard
      927     9340             PURPOSE:      returns entries from the NIO catalog
      928     9341             INTERFACE:    TOL$GET_DATA
      929     9342                           TOM$BUILD_NIO_ENTRY
      930     9343                           TOL$SAVE_DATA
      931     9344                           ADDR function
      932     9345                           PINCRW function
      933     9346             PARAMETERS:   A - load size (output)
      934     9347             DATA:         ENTRY_NO - output
      935     9348                           DATA_SIZE_IN - output
      936     9349                           LOAD_SIZE - input
      937     9350                           DATA_IN$ - input
      938     9351                           DATA_LENGTH_IN - input
      939     9352                           DCW_I - input
      940     9353                           STAT_I - input
      941     9354                           START_LOAD$ - input
      942     9355                           DATA_SIZE_IN - input
      943     9356                           MY_CALL_SEQUENCE - input
      944     9357                           DATA_OUT$ - input
      945     9358                           DCW_O - input
      946     9359                           STAT_O - input
      947     9360                           DATA_SIZE_OUT - input
      948     9361                           CALL_SEQUENCE.STATUSP - input
      949     9362                           STATUS_U$ - output
      950     9363                           STAT_U - output
      951     9364             DESCRIPTION:  This   procedure  loops   through  a  catalog,
      952     9365                           reading   catalog  entries   in  CP-6  format,
      953     9366                           converting  the  entries  to  GCOS format, and
      954     9367                           returning the GCOS  entries to the caller. For
      955     9368                           a   more   detailed   description,   see   the
      956     9369                           documentation for TOM$RETURN_STD_ENTRIES which
      957     9370                           does   the  exact   same  thing   for  non-NIO
      958     9371                           catalogs.  The  reason  that  both  procedures
      959     9372                           exist is for efficiency. If one procedure were
      960     9373                           used it would have  to check the test type for
      961     9374                           each  entry  to  be  returned.  The  card  MDR
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:166  
      962     9375                           catalog  has over 900  entries. So in essence,
      963     9376                           TOM$RETURN_NIO_ENTRIES                     and
      964     9377                           TOM$RETURN_STD_ENTRIES  are identical  but one
      965     9378                           calls TOM$BUILD_NIO_ENTRY  and the other calls
      966     9379                           TOM$BUILD_STD_ENTRY.
      967     9380        */
      968     9381        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:167  
      969     9382    3   TOM$RETURN_NIO_ENTRIES: PROC (A) ALTRET ;

   9382  4 001742   200024 741300       TOM$RETURN_* STX1  ! CUR_ITR_CATAS,,AUTO

      970     9383
      971     9384    4      DCL A      UBIN WORD ALIGNED ;
      972     9385
      973     9386        /* Code */
      974     9387
      975     9388    4      IF LAST_ENTRY_NO = 0

   9388  4 001743   000011 220000 1                  LDX0    LAST_ENTRY_NO
         4 001744   001747 601000 4                  TNZ     s:9390

      976     9389    4      THEN ENTRY_NO = 1;

   9389  4 001745   000001 222003                    LDX2    1,DU
         4 001746   000010 742000 1                  STX2    ENTRY_NO

      977     9390    4      A = 0;

   9390  4 001747   200025 470500                    LDP0    @A,,AUTO
         4 001750   000000 450100                    STZ     0,,PR0

      978     9391    4      DATA_SIZE_IN = LOAD_SIZE;

   9391  4 001751   000012 235000 1                  LDA     LOAD_SIZE
         4 001752   000006 755000 1                  STA     DATA_SIZE_IN

      979     9392
      980     9393           /* Reformat Catalog Entries one by one */
      981     9394    5      DO WHILE (DATA_SIZE_IN > 0) ;

   9394  4 001753   002003 600000 4                  TZE     s:9421

      982     9395              /* Get an entry */
      983     9396    5         CALL TOL$GET_DATA (DATA_IN$,
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:168  

   9396  4 001754   000046 630400 5                  EPPR0   38
         4 001755   000025 631400 xsym               EPPR1   B_VECTNIL+21
         4 001756   000000 701000 xent               TSX1    TOL$GET_DATA
         4 001757   000000 011000                    NOP     0

      984     9397    5                 DATA_LENGTH_IN,
      985     9398    5                 DCW_I,
      986     9399    5                 STAT_I,
      987     9400    5                 START_LOAD$,
      988     9401    5                 DATA_SIZE_IN,
      989     9402    5                 MY_CALL_SEQUENCE);
      990     9403              /* Convert data to common format */
      991     9404    5         CALL TOM$BUILD_NIO_ENTRY;

   9404  4 001760   002020 701000 4                  TSX1    TOM$BUILD_NIO_ENTRY
         4 001761   000000 011000                    NOP     0

      992     9405              /* Write reformatted entry back to user buffer */
      993     9406    5         CALL TOL$SAVE_DATA (DATA_OUT$,

   9406  4 001762   000055 630400 5                  EPPR0   45
         4 001763   000025 631400 xsym               EPPR1   B_VECTNIL+21
         4 001764   000000 701000 xent               TSX1    TOL$SAVE_DATA
         4 001765   002016 702000 4                  TSX2    BAD_ENTRY_WRITE

      994     9407    5                 DATA_LENGTH_OUT,
      995     9408    5                 DCW_O,
      996     9409    5                 STAT_O,
      997     9410    5                 START_LOAD$,
      998     9411    5                 DATA_SIZE_OUT,
      999     9412    5                 MY_CALL_SEQUENCE) ALTRET (BAD_ENTRY_WRITE) ;
     1000     9413              /* Update counts */
     1001     9414    5         A = A + 4 ;

   9414  4 001766   200025 470500                    LDP0    @A,,AUTO
         4 001767   000000 235100                    LDA     0,,PR0
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:169  
         4 001770   000004 035007                    ADLA    4,DL
         4 001771   000000 755100                    STA     0,,PR0

     1002     9415    5         ENTRY_NO = ENTRY_NO + 1 ;

   9415  4 001772   000010 220000 1                  LDX0    ENTRY_NO
         4 001773   000001 621010                    EAX1    1,X0
         4 001774   000010 741000 1                  STX1    ENTRY_NO

     1003     9416    5         DATA_IN$ = ADDR (OBJECT_KEY);

   9416  4 001775   000064 236000 5                  LDQ     52
         4 001776   000000 756000 1                  STQ     DATA_IN$

     1004     9417    5         DATA_OUT$ = ADDR (GCOS_NIO_ENTRY);

   9417  4 001777   000065 236000 5                  LDQ     53
         4 002000   000001 756000 1                  STQ     DATA_OUT$

     1005     9418    5      END /* WHILE */ ;

   9418  4 002001   000006 235000 1                  LDA     DATA_SIZE_IN
         4 002002   001754 601000 4                  TNZ     s:9396

     1006     9419           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:170  
     1007     9420           /* Set up Status Pointer */
     1008     9421    4      STATUS_U$ = PINCRW (IS$, CALL_SEQ$ -> CALL_SEQUENCE.STATUSP) ;

   9421  4 002003   200007 471500                    LDP1    CALL_SEQ$,,AUTO
         4 002004   100000 720100                    LXL0    0,,PR1
         4 002005   000000 636010                    EAQ     0,X0
         4 002006   000000 036000 2                  ADLQ    FPTN_
         4 002007   000035 756000 1                  STQ     STATUS_U$

     1009     9422    4      STATUS_U$ -> STAT_U = STAT_O;

   9422  4 002010   000035 473400 1                  LDP3    STATUS_U$
         4 002011   000040 237000 1                  LDAQ    STAT_O
         4 002012   300000 755100                    STA     0,,PR3
         4 002013   300001 756100                    STQ     1,,PR3

     1010     9423    4      RETURN;

   9423  4 002014   200024 221300                    LDX1  ! CUR_ITR_CATAS,,AUTO
         4 002015   000001 702211                    TSX2  ! 1,X1

     1011     9424
     1012     9425    4   BAD_ENTRY_WRITE:
     1013     9426    4      ALTRETURN ;

   9426  4 002016   200024 221300       BAD_ENTRY_W* LDX1  ! CUR_ITR_CATAS,,AUTO
         4 002017   000000 702211                    TSX2  ! 0,X1

     1014     9427
     1015     9428        /* END TOM$RETURN_NIO_ENTRIES */
     1016     9429        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:171  
     1017     9430        /*I* NAME:         TOM$BUILD_NIO_ENTRY
     1018     9431             AUTHOR:       Scott S. Sheppard
     1019     9432             PURPOSE:      returns an entry in GCOS format
     1020     9433             INTERFACE:    TOT$ASCII_BCD
     1021     9434                           CHARBIN
     1022     9435             PARAMETERS:   None passed.
     1023     9436             DATA:         OBJECT_KEY.DATA - input
     1024     9437                           CP6_NIO_ENTRY - input / output
     1025     9438                           GCOS_NIO_ENTRY - output
     1026     9439             DESCRIPTION:  This procedure returns a CP-6 catalog entry in
     1027     9440                           GCOS  format.   A  CP-6  object  key (the data
     1028     9441                           returned  by reading a  catalog entry) for the
     1029     9442                           NIO catalog is of the form:
     1030     9443                              CEEEEFFFFFFFFXNDDDPPP
     1031     9444                                 where: C - class (Header or File)
     1032     9445                                        EEEE - equipment type
     1033     9446                                        FFFFFFFF - file name
     1034     9447                                        XN - Diskette X of N diskettes
     1035     9448                                        DDD - disk tab
     1036     9449                                        PPP -  program tab
     1037     9450                           This procedure
     1038     9451                           uses the object key to set up a NIO entry.
     1039     9452        */
     1040     9453        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:172  
     1041     9454    4   TOM$BUILD_NIO_ENTRY: PROC;

   9454  4 002020   200026 741300       TOM$BUILD_N* STX1  ! I+1,,AUTO

     1042     9455
     1043     9456    5      DCL CHAR_COUNT  UBIN WORD ALIGNED ;
     1044     9457    5      DCL VALUE       UBIN WORD ALIGNED ;
     1045     9458
     1046     9459        /* Code */
     1047     9460
     1048     9461           /* convert equip type and file name from ASCII to BCD */
     1049     9462    5      CHAR_COUNT = 15 ;

   9462  4 002021   000017 235007                    LDA     15,DL
         4 002022   200027 755100                    STA     CHAR_COUNT,,AUTO

     1050     9463    5      CALL TOT$ASCII_BCD (OBJECT_KEY.DATA, CP6_NIO_ENTRY, CHAR_COUNT) ;

   9463  4 002023   200027 630500                    EPPR0   CHAR_COUNT,,AUTO
         4 002024   200062 450500                    STP0    FIRMWARE_FOUND+4,,AUTO
         4 002025   000066 237000 5                  LDAQ    54
         4 002026   200060 757100                    STAQ    FIRMWARE_FOUND+2,,AUTO
         4 002027   200060 630500                    EPPR0   FIRMWARE_FOUND+2,,AUTO
         4 002030   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 002031   000000 701000 xent               TSX1    TOT$ASCII_BCD
         4 002032   000000 011000                    NOP     0

     1051     9464    5      GCOS_NIO_ENTRY.EQUIP_TYPE = CP6_NIO_ENTRY.EQUIP_TYPE ;

   9464  4 002033   000015 236000 1                  LDQ     CP6_STD_ENTRY
         4 002034   000006 736000                    QLS     6
         4 002035   000020 752074 1                  STCQ    GCOS_STD_ENTRY,'74'O

     1052     9465    5      GCOS_NIO_ENTRY.FILE_NAME = CP6_NIO_ENTRY.FILE_NAME ;

   9465  4 002036   000000 100400                    MLR     fill='000'O
         4 002037   000015 520010 1                  ADSC6   CP6_STD_ENTRY            cn=5,n=8
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:173  
         4 002040   000022 020010 1                  ADSC6   GCOS_STD_ENTRY+2         cn=0,n=8

     1053     9466
     1054     9467           /* set up X_OF_N field */
     1055     9468    5      GCOS_NIO_ENTRY.X_OF_N = CP6_NIO_ENTRY.X_OF_N ;

   9468  4 002041   000017 236000 1                  LDQ     CP6_STD_ENTRY+2
         4 002042   000022 772000                    QRL     18
         4 002043   000020 752003 1                  STCQ    GCOS_STD_ENTRY,'03'O

     1056     9469
     1057     9470           /* plug in the catalog entry number */
     1058     9471    5      GCOS_NIO_ENTRY.ENTRY# = ENTRY_NO ;

   9471  4 002044   000010 220000 1                  LDX0    ENTRY_NO
         4 002045   000021 740000 1                  STX0    GCOS_STD_ENTRY+1

     1059     9472
     1060     9473           /* set up NIO flag for MCAD search routine */
     1061     9474    5      IF SUBSTR (OBJECT_KEY.DATA, 0, 1) = 'H'

   9474  4 002046   000054 236000 1                  LDQ     OBJECT_KEY
         4 002047   000777 376003                    ANQ     511,DU
         4 002050   000110 116003                    CMPQ    72,DU
         4 002051   002055 601000 4                  TNZ     s:9476

     1062     9475    5      THEN GCOS_NIO_ENTRY.NIO_FLAG = 4 ;

   9475  4 002052   000004 221003                    LDX1    4,DU
         4 002053   000021 441000 1                  SXL1    GCOS_STD_ENTRY+1
         4 002054   002057 710000 4                  TRA     s:9479

     1063     9476    5      ELSE GCOS_NIO_ENTRY.NIO_FLAG = 5 ;

   9476  4 002055   000005 221003                    LDX1    5,DU
         4 002056   000021 441000 1                  SXL1    GCOS_STD_ENTRY+1

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:174  
     1064     9477
     1065     9478           /* convert disk tab from ASCII to binary */
     1066     9479    5      CALL CHARBIN (VALUE, SUBSTR (OBJECT_KEY.DATA, 15, 3)) ;

   9479  4 002057   000100 305400                    DTB
         4 002060   000060 030003 1                  NDSC9   OBJECT_KEY+4             cn=0,s=nosgn,sf=0,n=3
         4 002061   200060 000010                    NDSC9   FIRMWARE_FOUND+2,,AUTO   cn=0,s=lsgnf,sf=0,n=8
         4 002062   200061 235100                    LDA     FIRMWARE_FOUND+3,,AUTO
         4 002063   200030 755100                    STA     VALUE,,AUTO

     1067     9480    5      GCOS_NIO_ENTRY.DISK_TAB = VALUE ;

   9480  4 002064   200030 236100                    LDQ     VALUE,,AUTO
         4 002065   000014 736000                    QLS     12
         4 002066   000023 752014 1                  STCQ    GCOS_STD_ENTRY+3,'14'O

     1068     9481
     1069     9482           /* convert program tab from ASCII to binary */
     1070     9483    5      CALL CHARBIN (VALUE, SUBSTR (OBJECT_KEY.DATA, 18, 3)) ;

   9483  4 002067   000100 305400                    DTB
         4 002070   000060 630003 1                  NDSC9   OBJECT_KEY+4             cn=3,s=nosgn,sf=0,n=3
         4 002071   200060 000010                    NDSC9   FIRMWARE_FOUND+2,,AUTO   cn=0,s=lsgnf,sf=0,n=8
         4 002072   200061 236100                    LDQ     FIRMWARE_FOUND+3,,AUTO
         4 002073   200030 756100                    STQ     VALUE,,AUTO

     1071     9484    5      GCOS_NIO_ENTRY.PGM_TAB = VALUE ;

   9484  4 002074   000023 752003 1                  STCQ    GCOS_STD_ENTRY+3,'03'O

     1072     9485    5      RETURN;

   9485  4 002075   200026 221300                    LDX1  ! I+1,,AUTO
         4 002076   000001 702211                    TSX2  ! 1,X1

     1073     9486
     1074     9487    5   END TOM$BUILD_NIO_ENTRY;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:175  
     1075     9488    4   END TOM$RETURN_NIO_ENTRIES ;
     1076     9489        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:176  
     1077     9490        /*I* NAME:         TOM$RETURN_STD_ENTRIES
     1078     9491             PURPOSE:      returns entries from the standard catalog
     1079     9492             INTERFACE:    TOL$GET_DATA
     1080     9493                           TOM$BUILD_STD_ENTRY
     1081     9494                           TOL$SAVE_DATA
     1082     9495                           ADDR function
     1083     9496                           PINCRW function
     1084     9497             PARAMETERS:   A - load size (output)
     1085     9498             DATA:         ENTRY_NO - output
     1086     9499                           DATA_SIZE_IN - output
     1087     9500                           LOAD_SIZE - input
     1088     9501                           DATA_IN$ - input
     1089     9502                           DATA_LENGTH_IN - input
     1090     9503                           DCW_I - input
     1091     9504                           STAT_I - input
     1092     9505                           START_LOAD$ - input
     1093     9506                           DATA_SIZE_IN - input
     1094     9507                           MY_CALL_SEQUENCE - input
     1095     9508                           DATA_OUT$ - input
     1096     9509                           DCW_O - input
     1097     9510                           STAT_O - input
     1098     9511                           DATA_SIZE_OUT - input
     1099     9512                           CALL_SEQUENCE.STATUSP - input
     1100     9513                           STATUS_U$ - output
     1101     9514                           STAT_U - output
     1102     9515             DESCRIPTION:  This  procedure  takes  catalog  data  from  a
     1103     9516                           standard  catalog  (non-NIO  catalog)  in  the
     1104     9517                           user's buffer (CP-6 deckfile format of 6 words
     1105     9518                           per  entry)  and  reformats  the entries (GCOS
     1106     9519                           format  of  4  words  per  entry).  The  total
     1107     9520                           modified count of words read and a status word
     1108     9521                           witha modified DCW residue are returned to the
     1109     9522                           user. Steps taken:
     1110     9523                            1. The catalog entry counter and the modified
     1111     9524                           word   count   are   initialized   to   0  and
     1112     9525                           DATA_SIZE_IN is set to the total count of data
     1113     9526                           words present in the user buffer (LOAD_SIZE).
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:177  
     1114     9527                            2. TOL$GET_DATA is called  to read one 6 word
     1115     9528                           catalog into the working buffer.
     1116     9529                            3. TOL$BUILD_STD_ENTRY  is called to reformat
     1117     9530                           the  CP-6 entry  into a  GCOS entry.  The GCOS
     1118     9531                           entry is in an output buffer.
     1119     9532                            4.  TOL$SAVE_DATA  is  called  to replace the
     1120     9533                           CP-6 entry in the  user's buffer with the GCOS
     1121     9534                           entry  in the  output buffer.  The reformmated
     1122     9535                           entry  is  only  4  words  long resulting in a
     1123     9536                           compression of data in the user's buffer.
     1124     9537                            5. The modified  word count is incremented by
     1125     9538                           4, the  entry number is incremented  by 1, and
     1126     9539                           the data pointers are re-initialized.
     1127     9540                            6.  Note: steps  2 -  5 are  repeated for all
     1128     9541                           entries of a catalog.
     1129     9542                            7.  The  final   store  status  generated  by
     1130     9543                           TOL$SAVE_DATA  is  stored  in  the user's call
     1131     9544                           sequence.  This provides  the user  with a DCW
     1132     9545                           residue  which reflects the  true end point of
     1133     9546                           the reformatted data entries.
     1134     9547        */
     1135     9548        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:178  
     1136     9549    3   TOM$RETURN_STD_ENTRIES: PROC (A) ALTRET ;

   9549  4 002077   200024 741300       TOM$RETURN_* STX1  ! CUR_ITR_CATAS,,AUTO

     1137     9550
     1138     9551    4      DCL A  UBIN WORD ALIGNED ;
     1139     9552
     1140     9553        /* Code */
     1141     9554
     1142     9555    4      ENTRY_NO = 1;

   9555  4 002100   000001 220003                    LDX0    1,DU
         4 002101   000010 740000 1                  STX0    ENTRY_NO

     1143     9556    4      A = 0;

   9556  4 002102   200025 470500                    LDP0    @A,,AUTO
         4 002103   000000 450100                    STZ     0,,PR0

     1144     9557    4      DATA_SIZE_IN = LOAD_SIZE;

   9557  4 002104   000012 235000 1                  LDA     LOAD_SIZE
         4 002105   000006 755000 1                  STA     DATA_SIZE_IN

     1145     9558
     1146     9559        /* Reformat Catalog Entries one by one */
     1147     9560    5      DO WHILE (DATA_SIZE_IN > 0) ;

   9560  4 002106   002136 600000 4                  TZE     s:9587

     1148     9561              /* Get an entry */
     1149     9562    5         CALL TOL$GET_DATA (DATA_IN$,

   9562  4 002107   000046 630400 5                  EPPR0   38
         4 002110   000025 631400 xsym               EPPR1   B_VECTNIL+21
         4 002111   000000 701000 xent               TSX1    TOL$GET_DATA
         4 002112   000000 011000                    NOP     0
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:179  

     1150     9563    5                 DATA_LENGTH_IN,
     1151     9564    5                 DCW_I,
     1152     9565    5                 STAT_I,
     1153     9566    5                 START_LOAD$,
     1154     9567    5                 DATA_SIZE_IN,
     1155     9568    5                 MY_CALL_SEQUENCE);
     1156     9569              /* Convert data to common format */
     1157     9570    5         CALL TOM$BUILD_STD_ENTRY;

   9570  4 002113   002153 701000 4                  TSX1    TOM$BUILD_STD_ENTRY
         4 002114   000000 011000                    NOP     0

     1158     9571              /* Write reformatted entry back to user buffer */
     1159     9572    5         CALL TOL$SAVE_DATA (DATA_OUT$,

   9572  4 002115   000055 630400 5                  EPPR0   45
         4 002116   000025 631400 xsym               EPPR1   B_VECTNIL+21
         4 002117   000000 701000 xent               TSX1    TOL$SAVE_DATA
         4 002120   002151 702000 4                  TSX2    BAD_ENTRY_WRITE

     1160     9573    5                 DATA_LENGTH_OUT,
     1161     9574    5                 DCW_O,
     1162     9575    5                 STAT_O,
     1163     9576    5                 START_LOAD$,
     1164     9577    5                 DATA_SIZE_OUT,
     1165     9578    5                 MY_CALL_SEQUENCE) ALTRET (BAD_ENTRY_WRITE) ;
     1166     9579              /* Update counts */
     1167     9580    5         A = A + 4 ;

   9580  4 002121   200025 470500                    LDP0    @A,,AUTO
         4 002122   000000 235100                    LDA     0,,PR0
         4 002123   000004 035007                    ADLA    4,DL
         4 002124   000000 755100                    STA     0,,PR0

     1168     9581    5         ENTRY_NO = ENTRY_NO + 1 ;

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:180  
   9581  4 002125   000010 220000 1                  LDX0    ENTRY_NO
         4 002126   000001 621010                    EAX1    1,X0
         4 002127   000010 741000 1                  STX1    ENTRY_NO

     1169     9582    5         DATA_IN$ = ADDR (OBJECT_KEY);

   9582  4 002130   000064 236000 5                  LDQ     52
         4 002131   000000 756000 1                  STQ     DATA_IN$

     1170     9583    5         DATA_OUT$ = ADDR (GCOS_STD_ENTRY);

   9583  4 002132   000065 236000 5                  LDQ     53
         4 002133   000001 756000 1                  STQ     DATA_OUT$

     1171     9584    5      END /* WHILE */ ;

   9584  4 002134   000006 235000 1                  LDA     DATA_SIZE_IN
         4 002135   002107 601000 4                  TNZ     s:9562

     1172     9585           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:181  
     1173     9586           /* Set up Status Pointer */
     1174     9587    4      STATUS_U$ = PINCRW (IS$, CALL_SEQ$ -> CALL_SEQUENCE.STATUSP) ;

   9587  4 002136   200007 471500                    LDP1    CALL_SEQ$,,AUTO
         4 002137   100000 720100                    LXL0    0,,PR1
         4 002140   000000 636010                    EAQ     0,X0
         4 002141   000000 036000 2                  ADLQ    FPTN_
         4 002142   000035 756000 1                  STQ     STATUS_U$

     1175     9588    4      STATUS_U$ -> STAT_U = STAT_O;

   9588  4 002143   000035 473400 1                  LDP3    STATUS_U$
         4 002144   000040 237000 1                  LDAQ    STAT_O
         4 002145   300000 755100                    STA     0,,PR3
         4 002146   300001 756100                    STQ     1,,PR3

     1176     9589    4      RETURN;

   9589  4 002147   200024 221300                    LDX1  ! CUR_ITR_CATAS,,AUTO
         4 002150   000001 702211                    TSX2  ! 1,X1

     1177     9590
     1178     9591    4   BAD_ENTRY_WRITE:
     1179     9592    4      ALTRETURN ;

   9592  4 002151   200024 221300       BAD_ENTRY_W* LDX1  ! CUR_ITR_CATAS,,AUTO
         4 002152   000000 702211                    TSX2  ! 0,X1

     1180     9593
     1181     9594        /* END TOM$RETURN_STD_ENTRIES */
     1182     9595        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:182  
     1183     9596        /*I* NAME:         TOM$BUILD_STD_ENTRY
     1184     9597             PURPOSE:      reformats an entry from CP-6 to GCOS format
     1185     9598             INTERFACE:    TOT$ASCII_BCD
     1186     9599             PARAMETERS:   None passed.
     1187     9600             DATA:         OBJECT_KEY.DATA - input
     1188     9601                           CP6_STD_ENTRY - input / output
     1189     9602                           GCOS_STD_ENTRY - output
     1190     9603             DESCRIPTION:  This  procedure  constructs  an  entry in GCOS
     1191     9604                           format for a  standard CP-6 catalog entry. The
     1192     9605                           conversion consists  of translatig some fields
     1193     9606                           and re-arranging others.
     1194     9607
     1195     9608             GCOS_STD_ENTRY.USAGE - BCD deck type (6 characters)
     1196     9609             GCOS_STD_ENTRY.DECK - BCD edit name (4 characters)
     1197     9610             GCOS_STD_ENTRY.REV - BCD revision level (2 characters)
     1198     9611             GCOS_STD_ENTRY.ENTRY# - binary catalog entry number
     1199     9612             GCOS_STD_ENTRY.NAME - BCD GECALL name or IDENT CODE
     1200     9613        */
     1201     9614
     1202     9615    4   TOM$BUILD_STD_ENTRY: PROC;

   9615  4 002153   200026 741300       TOM$BUILD_S* STX1  ! I+1,,AUTO

     1203     9616
     1204     9617    5      DCL ASCII (0:15) CHAR(1) CALIGNED ;
     1205     9618    5      DCL ASCII_ REDEF ASCII CHAR(16) CALIGNED ;
     1206     9619    5      DCL CHAR_COUNT STATIC SBIN;
     1207     9620    5      DCL TAB_INDEX STATIC SBIN;
     1208     9621           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:183  
     1209     9622        /* Build GCOS usage field */
     1210     9623    6      DO SELECT (SUBSTR (OBJECT_KEY.DATA, 0, 3)) ;

   9623  4 002154   040000 106400                    CMPC    fill='040'O
         4 002155   000054 200003 1                  ADSC9   OBJECT_KEY               cn=1,n=3
         4 002156   000016 000003 2                  ADSC9   SELECT_MSG+13            cn=0,n=3
         4 002157   002200 602000 4                  TNC     s:9633
         4 002160   002166 600000 4                  TZE     s:9626
         4 002161   040000 106400                    CMPC    fill='040'O
         4 002162   000054 200003 1                  ADSC9   OBJECT_KEY               cn=1,n=3
         4 002163   000017 000003 2                  ADSC9   SELECT_MSG+14            cn=0,n=3
         4 002164   002200 601000 4                  TNZ     s:9633
         4 002165   002173 710000 4                  TRA     s:9630

     1211     9624    6         SELECT ('ITR') ;

     1212     9625                 /* assign USAGE a BCD '   ITR' */
     1213     9626    6         GCOS_STD_ENTRY.USAGE = '202020316351'O;

   9626  4 002166   000074 236000 2                  LDQ     SELECT_MSG+59
         4 002167   000023 756000 1                  STQ     GCOS_STD_ENTRY+3

     1214     9627    6         TAB_INDEX = 4;

   9627  4 002170   000004 235007                    LDA     4,DL
         4 002171   000153 755000 1                  STA     TAB_INDEX
         4 002172   002222 710000 4                  TRA     s:9640

     1215     9628    6         SELECT ('MDR') ;

     1216     9629                 /* assign USAGE a BCD '   MDR' */
     1217     9630    6         GCOS_STD_ENTRY.USAGE = '202020442451'O;

   9630  4 002173   000075 236000 2                  LDQ     SELECT_MSG+60
         4 002174   000023 756000 1                  STQ     GCOS_STD_ENTRY+3

     1218     9631    6         TAB_INDEX = 4;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:184  

   9631  4 002175   000004 235007                    LDA     4,DL
         4 002176   000153 755000 1                  STA     TAB_INDEX
         4 002177   002222 710000 4                  TRA     s:9640

     1219     9632    6         SELECT (ELSE) ;

     1220     9633    6      CHAR_COUNT = 6;

   9633  4 002200   000006 235007                    LDA     6,DL
         4 002201   000152 755000 1                  STA     CHAR_COUNT

     1221     9634    6      ASCII_ = SUBSTR (OBJECT_KEY.DATA, 0, CHAR_COUNT) ;

   9634  4 002202   000000 620005                    EAX0    0,AL
         4 002203   040100 100440                    MLR     fill='040'O
         4 002204   000054 200010 1                  ADSC9   OBJECT_KEY               cn=1,n=*X0
         4 002205   200027 000020                    ADSC9   ASCII,,AUTO              cn=0,n=16

     1222     9635    6      CALL TOT$ASCII_BCD (ASCII, GCOS_STD_ENTRY.USAGE, CHAR_COUNT);

   9635  4 002206   000070 236000 5                  LDQ     56
         4 002207   200062 756100                    STQ     FIRMWARE_FOUND+4,,AUTO
         4 002210   000071 236000 5                  LDQ     57
         4 002211   200061 756100                    STQ     FIRMWARE_FOUND+3,,AUTO
         4 002212   200027 630500                    EPPR0   ASCII,,AUTO
         4 002213   200060 450500                    STP0    FIRMWARE_FOUND+2,,AUTO
         4 002214   200060 630500                    EPPR0   FIRMWARE_FOUND+2,,AUTO
         4 002215   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 002216   000000 701000 xent               TSX1    TOT$ASCII_BCD
         4 002217   000000 011000                    NOP     0

     1223     9636    6      TAB_INDEX = 7;

   9636  4 002220   000007 235007                    LDA     7,DL
         4 002221   000153 755000 1                  STA     TAB_INDEX

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:185  
     1224     9637    6      END /* SELECT */ ;

     1225     9638
     1226     9639        /* Build remainder of intermediate key */
     1227     9640    5      CHAR_COUNT = 14;

   9640  4 002222   000016 236007                    LDQ     14,DL
         4 002223   000152 756000 1                  STQ     CHAR_COUNT

     1228     9641    5      ASCII_ = SUBSTR (OBJECT_KEY.DATA, TAB_INDEX, CHAR_COUNT);

   9641  4 002224   000000 620006                    EAX0    0,QL
         4 002225   040100 100445                    MLR     fill='040'O
         4 002226   000054 200010 1                  ADSC9   OBJECT_KEY,A             cn=1,n=*X0
         4 002227   200027 000020                    ADSC9   ASCII,,AUTO              cn=0,n=16

     1229     9642    5      CALL TOT$ASCII_BCD (ASCII, CP6_STD_ENTRY, CHAR_COUNT);

   9642  4 002230   000070 236000 5                  LDQ     56
         4 002231   200062 756100                    STQ     FIRMWARE_FOUND+4,,AUTO
         4 002232   000067 236000 5                  LDQ     55
         4 002233   200061 756100                    STQ     FIRMWARE_FOUND+3,,AUTO
         4 002234   200027 630500                    EPPR0   ASCII,,AUTO
         4 002235   200060 450500                    STP0    FIRMWARE_FOUND+2,,AUTO
         4 002236   200060 630500                    EPPR0   FIRMWARE_FOUND+2,,AUTO
         4 002237   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 002240   000000 701000 xent               TSX1    TOT$ASCII_BCD
         4 002241   000000 011000                    NOP     0

     1230     9643
     1231     9644        /* Build entry in final form */
     1232     9645    5      GCOS_STD_ENTRY.DECK = CP6_STD_ENTRY.DECK;

   9645  4 002242   000016 236000 1                  LDQ     CP6_STD_ENTRY+1
         4 002243   000006 736000                    QLS     6
         4 002244   000020 752074 1                  STCQ    GCOS_STD_ENTRY,'74'O

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:186  
     1233     9646    5      GCOS_STD_ENTRY.REV  = CP6_STD_ENTRY.REV;

   9646  4 002245   000017 236000 1                  LDQ     CP6_STD_ENTRY+2
         4 002246   000030 772000                    QRL     24
         4 002247   000020 752003 1                  STCQ    GCOS_STD_ENTRY,'03'O

     1234     9647    5      GCOS_STD_ENTRY.ENTRY# = ENTRY_NO;

   9647  4 002250   000010 220000 1                  LDX0    ENTRY_NO
         4 002251   000021 740000 1                  STX0    GCOS_STD_ENTRY+1

     1235     9648    5      GCOS_STD_ENTRY.NAME = CP6_STD_ENTRY.NAME;

   9648  4 002252   000015 235000 1                  LDA     CP6_STD_ENTRY
         4 002253   000022 755000 1                  STA     GCOS_STD_ENTRY+2

     1236     9649    5      RETURN;

   9649  4 002254   200026 221300                    LDX1  ! I+1,,AUTO
         4 002255   000001 702211                    TSX2  ! 1,X1

     1237     9650
     1238     9651    5   END TOM$BUILD_STD_ENTRY;
     1239     9652    4   END TOM$RETURN_STD_ENTRIES ;
     1240     9653    3   END TOM$REFORMAT_CATALOG_DATA ;
     1241     9654        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:187  
     1242     9655        /*I* NAME:         TOM$CLEAR_EXCESS_DATA
     1243     9656             PURPOSE:      zero out end of user buffer
     1244     9657             INTERFACE:    TOL$CLEAR_DATA
     1245     9658                           TOX$ERROR
     1246     9659             PARAMETERS:   None passed.
     1247     9660             DATA:         DATA_OUT$ - input
     1248     9661                           DATA_SIZE_OUT - input
     1249     9662                           DCW_O - input
     1250     9663                           STAT_O - input
     1251     9664                           START_LOAD$ - input
     1252     9665                           MY_CALL_SEQUENCE - input
     1253     9666                           TOM_ERROR_CODE - output
     1254     9667             DESCRIPTION:  This  procedure  is  called  after the catalog
     1255     9668                           data from the T&D  deckfile has been read into
     1256     9669                           the user's buffer and reformatted. The purpose
     1257     9670                           of this procedure is  to clear (zero) the data
     1258     9671                           residue that results  from the reformatting of
     1259     9672                           the 6 word entries  into 4 word entries.  This
     1260     9673                           way  the  user  will  only see the reformatted
     1261     9674                           data.
     1262     9675                            - The  number of words to clear  is set up in
     1263     9676                           CLEAR_SIZE. This number  is equal to twice the
     1264     9677                           number  of  data  entries,  since reformatting
     1265     9678                           results in a compression of 2 words per entry.
     1266     9679                           The  user data buffer  therefore consists of a
     1267     9680                           block of reformatted  data followed by a block
     1268     9681                           of garbage data to be cleared.
     1269     9682                            -  TOL$CLEAR_DATA  is  called  to perform the
     1270     9683                           data  clearing.   The  DCW  and status residue
     1271     9684                           supplied with the call are those returned when
     1272     9685                           the  last write  of reformatted  data was done
     1273     9686                           via a call to TOL$SAVE_DATA.
     1274     9687        */
     1275     9688        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:188  
     1276     9689    2   TOM$CLEAR_EXCESS_DATA: PROC;

   9689  4 002256   200020 741300       TOM$CLEAR_E* STX1  ! @RETURN_DELTA+1,,AUTO

     1277     9690
     1278     9691    3      DCL CLEAR_SIZE STATIC UBIN(36) ALIGNED;
     1279     9692
     1280     9693        /* Code */
     1281     9694
     1282     9695    3      CLEAR_SIZE = DATA_SIZE_OUT;

   9695  4 002257   000007 235000 1                  LDA     DATA_SIZE_OUT
         4 002260   000154 755000 1                  STA     CLEAR_SIZE

     1283     9696    3      CALL TOL$CLEAR_DATA (DATA_OUT$,

   9696  4 002261   000072 630400 5                  EPPR0   58
         4 002262   000025 631400 xsym               EPPR1   B_VECTNIL+21
         4 002263   000000 701000 xent               TSX1    TOL$CLEAR_DATA
         4 002264   002267 702000 4                  TSX2    BAD_CLEAR

     1284     9697    3              CLEAR_SIZE,
     1285     9698    3              DCW_O,
     1286     9699    3              STAT_O,
     1287     9700    3              START_LOAD$,
     1288     9701    3              DATA_SIZE_OUT,
     1289     9702    3              MY_CALL_SEQUENCE) ALTRET (BAD_CLEAR) ;
     1290     9703    3      RETURN;

   9703  4 002265   200020 221300                    LDX1  ! @RETURN_DELTA+1,,AUTO
         4 002266   000001 702211                    TSX2  ! 1,X1

     1291     9704
     1292     9705    3   BAD_CLEAR:
     1293     9706    3      TOM_ERROR_CODE.ERR# = %E$CLEARALT ;

   9706  4 002267   000043 236000 1     BAD_CLEAR    LDQ     TOM_ERROR_CODE
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:189  
         4 002270   000031 376000 5                  ANQ     25
         4 002271   002250 276007                    ORQ     1192,DL
         4 002272   000043 756000 1                  STQ     TOM_ERROR_CODE

     1294     9707    3      CALL TOX$ERROR (TOM_ERROR_CODE) ;

   9707  4 002273   000034 630400 5                  EPPR0   28
         4 002274   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 002275   000000 701000 xent               TSX1    TOX$ERROR
         4 002276   000000 011000                    NOP     0

     1295     9708
     1296     9709    3   END TOM$CLEAR_EXCESS_DATA;

   9709  4 002277   200020 221300                    LDX1  ! @RETURN_DELTA+1,,AUTO
         4 002300   000001 702211                    TSX2  ! 1,X1

     1297     9710        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:190  
     1298     9711        /*I* NAME:         TOM$SET_ERROR_RETURN_VALUES
     1299     9712             AUTHOR:       Scott S. Sheppard
     1300     9713             PURPOSE:      sets error return values for MME CATADT
     1301     9714             INTERFACE:    None called.
     1302     9715             PARAMETERS:   ERROR_NUMBER - input
     1303     9716                           A - output
     1304     9717                           Q - output
     1305     9718                           RETURN_DELTA - output
     1306     9719             DATA:         READ_ERROR_CODE - input / output
     1307     9720             DESCRIPTION:  This  procedure sets  the error  return values
     1308     9721                           for  MME CATADT.  The error  number identifies
     1309     9722                           which  step in  the CATA  process that  was in
     1310     9723                           error.
     1311     9724                           The error number is set as follows:
     1312     9725
     1313     9726                              1 - TOM$REFORMAT_INIT
     1314     9727                              2 - TOM$BUILD_CATALOG_KEY
     1315     9728                              3 - TOM$READ_CATALOG
     1316     9729        */
     1317     9730        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:191  
     1318     9731    2   TOM$SET_ERROR_RETURN_VALUES: PROC (ERROR_NUMBER, A, Q, RETURN_DELTA) ;

   9731  4 002301   200020 741300       TOM$SET_ERR* STX1  ! @RETURN_DELTA+1,,AUTO

     1319     9732
     1320     9733    3      DCL ERROR_NUMBER   UBIN WORD ALIGNED ;
     1321     9734    3      DCL A              UBIN WORD ALIGNED ;
     1322     9735    3      DCL Q              UBIN WORD ALIGNED ;
     1323     9736    3      DCL RETURN_DELTA   SBIN HALF HALIGNED ;
     1324     9737
     1325     9738        /* Code */
     1326     9739
     1327     9740    4      DO CASE (ERROR_NUMBER) ;

   9740  4 002302   200021 470500                    LDP0    @ERROR_NUMBER,,AUTO
         4 002303   000000 235100                    LDA     0,,PR0
         4 002304   000004 115007                    CMPA    4,DL
         4 002305   002307 602005 4                  TNC     s:9740+5,AL
         4 002306   002334 710000 4                  TRA     s:9754
         4 002307   002334 710000 4                  TRA     s:9754
         4 002310   002313 710000 4                  TRA     s:9743
         4 002311   002321 710000 4                  TRA     s:9747
         4 002312   002331 710000 4                  TRA     s:9752

     1328     9741    4         CASE (1) ;

     1329     9742                 /* TOM$REFORMAT_INIT */
     1330     9743    4            A = 0 ;

   9743  4 002313   200022 471500                    LDP1    @A,,AUTO
         4 002314   100000 450100                    STZ     0,,PR1

     1331     9744    4            Q = READ_ERROR_CODE ;

   9744  4 002315   200023 473500                    LDP3    @Q,,AUTO
         4 002316   000042 235000 1                  LDA     READ_ERROR_CODE
         4 002317   300000 755100                    STA     0,,PR3
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:192  
         4 002320   002334 710000 4                  TRA     s:9754

     1332     9745    4         CASE (2) ;

     1333     9746                 /* TOM$BUILD_CATALOG_KEY */
     1334     9747    4            A = 0 ;

   9747  4 002321   200022 471500                    LDP1    @A,,AUTO
         4 002322   100000 450100                    STZ     0,,PR1

     1335     9748    4            READ_ERR_CODE.CODE = 51 ;

   9748  4 002323   000063 236007                    LDQ     51,DL
         4 002324   000042 552004 1                  STBQ    READ_ERROR_CODE,'04'O

     1336     9749    4            Q = READ_ERROR_CODE ;

   9749  4 002325   200023 473500                    LDP3    @Q,,AUTO
         4 002326   000042 235000 1                  LDA     READ_ERROR_CODE
         4 002327   300000 755100                    STA     0,,PR3
         4 002330   002334 710000 4                  TRA     s:9754

     1337     9750    4         CASE (3) ;

     1338     9751                 /* TOM$READ_CATALOG */
     1339     9752    4            Q = READ_ERROR_CODE ;

   9752  4 002331   200023 471500                    LDP1    @Q,,AUTO
         4 002332   000042 236000 1                  LDQ     READ_ERROR_CODE
         4 002333   100000 756100                    STQ     0,,PR1

     1340     9753    4      END /* CASE */ ;

     1341     9754    3      RETURN_DELTA = 1 ;

   9754  4 002334   200024 471500                    LDP1    @RETURN_DELTA,,AUTO
         4 002335   000100 101400                    MRL     fill='000'O
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:193  
         4 002336   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         4 002337   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2

     1342     9755    3      RETURN ;

   9755  4 002340   200020 221300                    LDX1  ! @RETURN_DELTA+1,,AUTO
         4 002341   000001 702211                    TSX2  ! 1,X1

     1343     9756
     1344     9757    3   END TOM$SET_ERROR_RETURN_VALUES ;
     1345     9758    2   END TOM$MME_CATADT ;
     1346     9759        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:194  
     1347     9760        /*I* NAME:         TOM$MME_DATADT
     1348     9761             PURPOSE:      MME DATA service routine
     1349     9762             INTERFACE:    TOM$MATCH_ICC
     1350     9763                           TOM$BUILD_CATALOG_ENTRY_KEY
     1351     9764                           TOM$SEEK_DECK
     1352     9765                           TOM$READ_DECK_KEY
     1353     9766                           TOM$READ_DECK
     1354     9767                           TOM$SET_RETURN_VALUES
     1355     9768             PARAMETERS:   X1 - address of CALL SEQUENCE (input)
     1356     9769                           X2 - max. load address (input)
     1357     9770                           X3 - test page base (input)
     1358     9771                           X4 - NIO file sector number (input)
     1359     9772                           A - number of words read (output)
     1360     9773                           Q - read error code (output)
     1361     9774                                  0 - normal read
     1362     9775                                  42 - more data exists but buffer is full
     1363     9776                                  else - an error has occurred
     1364     9777                           RETURN_DELTA - (output)
     1365     9778                              3 - normal return
     1366     9779                              2 - more data to be read return
     1367     9780                              1 - error return
     1368     9781             DATA:         READ_ERROR_CODE - input / output
     1369     9782             DESCRIPTION:  This   procedure   uses   a  calling  sequence
     1370     9783                           provided  by  the  caller  to read a requested
     1371     9784                           deck  from  a  deckfile  and  place  it in the
     1372     9785                           user's buffer.
     1373     9786                            1. TOM$MATCH_ICC is called to locate the test
     1374     9787                           control entry in  TOP$TCP which corresponds to
     1375     9788                           this test request being serviced.
     1376     9789                            2.  TOM$BUILD_CATALOG_ENTRY_KEY is  called to
     1377     9790                           construct  a catalog  entry key  from the call
     1378     9791                           sequence.
     1379     9792                            3. Based on the test type being serviced, the
     1380     9793                           test page is either:
     1381     9794                              a. seeked   from   a     data   segment  by
     1382     9795                                 TOM$SEEK_DECK (NIO requests)
     1383     9796                              b. actually  read from  the deckfile (other
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:195  
     1384     9797                                 requests)
     1385     9798                            4. The read error code and return delta value
     1386     9799                           are set by TOM$SET_RETURN_VALUES.
     1387     9800        */
     1388     9801
     1389     9802    1   TOM$MME_DATADT: PROC (X1, X2, X3, X4, A, Q, RETURN_DELTA) ;

   9802  4 002342   200010 741300       TOM$MME_DAT* STX1  ! CALL_SEQ$+1,,AUTO

     1390     9803
     1391     9804    2      DCL X1           UBIN HALF HALIGNED ;
     1392     9805    2      DCL X2           UBIN HALF HALIGNED ;
     1393     9806    2      DCL X3           UBIN HALF HALIGNED ;
     1394     9807    2      DCL X4           SBIN HALF HALIGNED ;
     1395     9808    2      DCL A            UBIN WORD ALIGNED ;
     1396     9809    2      DCL Q            UBIN WORD ALIGNED ;
     1397     9810    2      DCL RETURN_DELTA SBIN HALF HALIGNED ;
     1398     9811    2      DCL TCX          UBIN WORD ALIGNED ;
     1399     9812
     1400     9813        /* Code */
     1401     9814
     1402     9815    2      CALL TOM$MATCH_ICC (Q, TCX) ;

   9815  4 002343   200020 630500                    EPPR0   TCX,,AUTO
         4 002344   200024 450500                    STP0    @RETURN_DELTA,,AUTO
         4 002345   200016 236100                    LDQ     @Q,,AUTO
         4 002346   200023 756100                    STQ     @Q,,AUTO
         4 002347   003530 701000 4                  TSX1    TOM$MATCH_ICC
         4 002350   000000 011000                    NOP     0

     1403     9816    2      CALL TOM$BUILD_CATALOG_ENTRY_KEY (X1, CALL_SEQ$) ;

   9816  4 002351   200007 630500                    EPPR0   CALL_SEQ$,,AUTO
         4 002352   200024 450500                    STP0    @RETURN_DELTA,,AUTO
         4 002353   200011 236100                    LDQ     @X1,,AUTO
         4 002354   200023 756100                    STQ     @Q,,AUTO
         4 002355   002443 701000 4                  TSX1    TOM$BUILD_CATALOG_ENTRY_KEY
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:196  
         4 002356   000000 011000                    NOP     0

     1404     9817
     1405     9818    3      DO SELECT (TOP$TCP.TEST_TYPE(TCX)) ;

   9818  4 002357   200020 236100                    LDQ     TCX,,AUTO
         4 002360   001220 402007                    MPY     656,DL
         4 002361   000003 470400 xsym               LDP0    TOT$DMC+3
         4 002362   040000 106506                    CMPC    fill='040'O
         4 002363   000002 000003                    ADSC9   2,Q,PR0                  cn=0,n=3
         4 002364   000014 000003 2                  ADSC9   SELECT_MSG+11            cn=0,n=3
         4 002365   002416 602000 4                  TNC     s:9823
         4 002366   200020 236100                    LDQ     TCX,,AUTO
         4 002367   000244 402007                    MPY     164,DL
         4 002370   000002 236106                    LDQ     2,QL,PR0
         4 002371   000014 676000 2                  ERQ     SELECT_MSG+11
         4 002372   000016 376000 5                  ANQ     14
         4 002373   002403 600000 4                  TZE     s:9820
         4 002374   200020 236100                    LDQ     TCX,,AUTO
         4 002375   000244 402007                    MPY     164,DL
         4 002376   000002 236106                    LDQ     2,QL,PR0
         4 002377   000015 676000 2                  ERQ     SELECT_MSG+12
         4 002400   000016 376000 5                  ANQ     14
         4 002401   002416 601000 4                  TNZ     s:9823
         4 002402   002403 710000 4                  TRA     s:9820

     1406     9819    3         SELECT ('NIO', 'RPM') ;

     1407     9820    3         CALL TOM$ALLOCATE_SEGTBLS ;

   9820  4 002403   002467 701000 4                  TSX1    TOM$ALLOCATE_SEGTBLS
         4 002404   000000 011000                    NOP     0

     1408     9821    3         CALL TOM$SEEK_DECK (TCX, X2, X3, X4, A) ;

   9821  4 002405   200014 237100                    LDAQ    @X4,,AUTO
         4 002406   200026 757100                    STAQ    I+1,,AUTO
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:197  
         4 002407   200012 237100                    LDAQ    @X2,,AUTO
         4 002410   200024 757100                    STAQ    @RETURN_DELTA,,AUTO
         4 002411   200020 630500                    EPPR0   TCX,,AUTO
         4 002412   200023 450500                    STP0    @Q,,AUTO
         4 002413   002507 701000 4                  TSX1    TOM$SEEK_DECK
         4 002414   000000 011000                    NOP     0
         4 002415   002433 710000 4                  TRA     s:9827

     1409     9822    3         SELECT (ELSE) ;

     1410     9823    3      CALL TOM$READ_DECK_KEY;

   9823  4 002416   003376 701000 4                  TSX1    TOM$READ_DECK_KEY
         4 002417   000000 011000                    NOP     0

     1411     9824    3      CALL TOM$READ_DECK (TCX, CALL_SEQ$, X2, X3, A) ;

   9824  4 002420   200015 236100                    LDQ     @A,,AUTO
         4 002421   200013 235100                    LDA     @X3,,AUTO
         4 002422   200036 757100                    STAQ    @X2+1,,AUTO
         4 002423   200012 236100                    LDQ     @X2,,AUTO
         4 002424   200035 756100                    STQ     @CALL_SEQ$+1,,AUTO
         4 002425   200007 630500                    EPPR0   CALL_SEQ$,,AUTO
         4 002426   200034 450500                    STP0    @TCX+1,,AUTO
         4 002427   200020 631500                    EPPR1   TCX,,AUTO
         4 002430   200033 451500                    STP1    SEQ$+2,,AUTO
         4 002431   003434 701000 4                  TSX1    TOM$READ_DECK
         4 002432   000000 011000                    NOP     0

     1412     9825    3      END /* SELECT */ ;

     1413     9826
     1414     9827    2      CALL TOM$SET_RETURN_VALUES (Q, RETURN_DELTA) ;

   9827  4 002433   200017 236100                    LDQ     @RETURN_DELTA,,AUTO
         4 002434   200024 756100                    STQ     @RETURN_DELTA,,AUTO
         4 002435   200016 236100                    LDQ     @Q,,AUTO
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:198  
         4 002436   200023 756100                    STQ     @Q,,AUTO
         4 002437   003677 701000 4                  TSX1    TOM$SET_RETURN_VALUES
         4 002440   000000 011000                    NOP     0

     1415     9828    2      RETURN;

   9828  4 002441   200010 221300                    LDX1  ! CALL_SEQ$+1,,AUTO
         4 002442   000001 702211                    TSX2  ! 1,X1

     1416     9829
     1417     9830        /* END TOM$MME_DATADT */
     1418     9831        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:199  
     1419     9832        /*I* NAME:         TOM$BUILD_CATALOG_ENTRY_KEY
     1420     9833             AUTHOR:       Scott S. Sheppard
     1421     9834             PURPOSE:      constructs an intermediate key
     1422     9835             INTERFACE:    PINCRW
     1423     9836             PARAMETERS:   X1 - input
     1424     9837                           CALL_SEQ$ - output
     1425     9838             DATA:         CALL_SEQUENCE.DECK - input
     1426     9839                           CALL_SEQUENCE.NEXT_ENTRY - input
     1427     9840             DESCRIPTION:  This  procedure obtains a  pointer to the call
     1428     9841                           sequence  from  the  address  stored in X1 and
     1429     9842                           build a catalog entry key. The key used is the
     1430     9843                           deck   number  and  entry   number.  The  data
     1431     9844                           returned  is  also  a  valid deckfile key, the
     1432     9845                           object  deck  key  used  to  actually read the
     1433     9846                           deck.
     1434     9847        */
     1435     9848
     1436     9849    2   TOM$BUILD_CATALOG_ENTRY_KEY: PROC (X1, CALL_SEQ$) ;

   9849  4 002443   200022 741300       TOM$BUILD_C* STX1  ! @A,,AUTO

     1437     9850
     1438     9851    3      DCL X1        UBIN HALF HALIGNED ;
     1439     9852    3      DCL CALL_SEQ$ PTR ALIGNED ;
     1440     9853
     1441     9854        /* Code */
     1442     9855
     1443     9856    3      CALL_SEQ$ = PINCRW (IS$, X1) ;

   9856  4 002444   200023 470500                    LDP0    @X1,,AUTO
         4 002445   000100 100500                    MLR     fill='000'O
         4 002446   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         4 002447   200060 000004                    ADSC9   FIRMWARE_FOUND+2,,AUTO   cn=0,n=4
         4 002450   200060 220100                    LDX0    FIRMWARE_FOUND+2,,AUTO
         4 002451   000000 636010                    EAQ     0,X0
         4 002452   000000 036000 2                  ADLQ    FPTN_
         4 002453   200024 471500                    LDP1    @CALL_SEQ$,,AUTO
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:200  
         4 002454   100000 756100                    STQ     0,,PR1

     1444     9857    3      CATALOG_ENTRY_KEY.DECK = CALL_SEQ$ -> CALL_SEQUENCE.DECK;

   9857  4 002455   100000 473500                    LDP3    0,,PR1
         4 002456   300001 236100                    LDQ     1,,PR3
         4 002457   000011 772000                    QRL     9
         4 002460   000052 552030 1                  STBQ    CATALOG_ENTRY_KEY,'30'O

     1445     9858    3      CATALOG_ENTRY_KEY.ENTRY# = CALL_SEQ$ -> CALL_SEQUENCE.NEXT_ENTRY ;

   9858  4 002461   100000 473500                    LDP3    0,,PR1
         4 002462   000000 100500                    MLR     fill='000'O
         4 002463   300001 400002                    ADSC9   1,,PR3                   cn=2,n=2
         4 002464   000052 600002 1                  ADSC9   CATALOG_ENTRY_KEY        cn=3,n=2

     1446     9859    3      RETURN ;

   9859  4 002465   200022 221300                    LDX1  ! @A,,AUTO
         4 002466   000001 702211                    TSX2  ! 1,X1

     1447     9860
     1448     9861    3   END TOM$BUILD_CATALOG_ENTRY_KEY ;
     1449     9862        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:201  
     1450     9863        /*I* NAME:         TOM$ALLOCATE_SEGTBLS
     1451     9864             AUTHOR:       Scott S. Sheppard
     1452     9865             PURPOSE:      obtains a segment table buffer
     1453     9866             INTERFACE:    TOM$GET_DATA_SEGMENT
     1454     9867                           ADDR function
     1455     9868             PARAMETERS:   None passed.
     1456     9869             DATA:         TOT$DMC.TOM$SEGTBLS.PTR$ - input / output
     1457     9870                           TOM$SEGTBLS - output
     1458     9871             DESCRIPTION:  This  procedure  obtains  a  dynamic buffer to
     1459     9872                           use  as  a control table for  a list of files.
     1460     9873                           The procedure obtains the memory for the table
     1461     9874                           and   zeroes  it   out.  The   segment  table,
     1462     9875                           TOM$SEGTBLS, is  an array of 8  entries, 1 per
     1463     9876                           possible test request. Each entry in the table
     1464     9877                           corresponds  to  the  control  for  that  test
     1465     9878                           request and  may control as many  as seven NIO
     1466     9879                           files.
     1467     9880        */
     1468     9881
     1469     9882    2   TOM$ALLOCATE_SEGTBLS: PROC ;

   9882  4 002467   200022 741300       TOM$ALLOCAT* STX1  ! @A,,AUTO

     1470     9883
     1471     9884        /* Code */
     1472     9885
     1473     9886    3      IF TOT$DMC.TOM$SEGTBLS.PTR$ = ADDR (NIL)

   9886  4 002470   000007 236000 xsym               LDQ     TOT$DMC+7
         4 002471   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 002472   002505 601000 4                  TNZ     s:9892

     1474     9887    4      THEN DO ;

     1475     9888    4              CALL TOM$GET_DATA_SEGMENT (%TOM$SEGTBLS_LGTH, TOT$DMC.TOM$SEGTBLS) ;

   9888  4 002473   000102 236000 5                  LDQ     66
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:202  
         4 002474   200052 756100                    STQ     J,,AUTO
         4 002475   000103 236000 5                  LDQ     67
         4 002476   200051 756100                    STQ     I,,AUTO
         4 002477   003621 701000 4                  TSX1    TOM$GET_DATA_SEGMENT
         4 002500   000000 011000                    NOP     0

     1476     9889    4              TOM$SEGTBLS = '0'B ;

   9889  4 002501   000007 470400 xsym               LDP0    TOT$DMC+7
         4 002502   000100 100400                    MLR     fill='000'O
         4 002503   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         4 002504   000000 001600                    ADSC9   0,,PR0                   cn=0,n=896

     1477     9890    4           END /* THEN */ ;

     1478     9891    3      ELSE /* Segment tables generated on a previous MME DATA */ ;
     1479     9892    3      RETURN ;

   9892  4 002505   200022 221300                    LDX1  ! @A,,AUTO
         4 002506   000001 702211                    TSX2  ! 1,X1

     1480     9893
     1481     9894    3   END TOM$ALLOCATE_SEGTBLS ;
     1482     9895        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:203  
     1483     9896        /*I* NAME:         TOM$SEEK_DECK
     1484     9897             AUTHOR:       Scott S. Sheppard
     1485     9898             PURPOSE:      performs a seek on an object deck
     1486     9899             INTERFACE:    TOM$FIND_SEG_FOR_ENTRY  TOM$READ_DECK_KEY
     1487     9900                           TOM$FREE_SEG_FOR_ENTRY  TOM$COPY_CALL_SEQUENCE
     1488     9901                           TOM$FIND_UNUSED_SEG     TOM$READ_DECK
     1489     9902                           TOM$ALLOCATE_SEG        TOM$RETURN_DATA
     1490     9903             PARAMETERS:   TCX - which test page is being serviced (input)
     1491     9904                           X2 - maximum load address (not used)
     1492     9905                           X3 - test page base (not used)
     1493     9906                           X4 - sector number requested (input)
     1494     9907                           A - number of words read (output)
     1495     9908             DATA:         TOM_ERROR_CODE - output
     1496     9909             DESCRIPTION:  This procedure simulates  diskette I/O for NIO
     1497     9910                           diskette  files using  MME DATA's.  Due to the
     1498     9911                           number of sector  seeks that will be performed
     1499     9912                           during   an   MCA   maintenance  session,  the
     1500     9913                           diskette  files to  be used  for a maintenance
     1501     9914                           session are read from the deckfile into memory
     1502     9915                           and  remain  there  until  the file is closed.
     1503     9916                           Seeks  are  simulated  by  having  the  caller
     1504     9917                           specify  the sector  number that  he wishes to
     1505     9918                           obtain  in  the  X4  register.  If  the sector
     1506     9919                           number is  -1, this means that  the file is no
     1507     9920                           longer needed and  may be closed. Handling MME
     1508     9921                           DATA's  for NIO  test requests  are handled as
     1509     9922                           follows:
     1510     9923                            1. If the sector  is -1, this means close the
     1511     9924                           file.   Steps  2  and  3  are  performed.  For
     1512     9925                           sector numbers  other than -1, Steps  2, 4, 5,
     1513     9926                           ... 9 are performed.
     1514     9927                            2. The segment table  is searched to find the
     1515     9928                           corresponding dynamic  data segment containing
     1516     9929                           the DIPPER diskette file for the corresponding
     1517     9930                           catalog  entry.   For  file  closes, the entry
     1518     9931                           should  exist.  It  it  does  not, an error is
     1519     9932                           reported  and  MOLTS  wraps  up.  For  seeking
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:204  
     1520     9933                           sectors,  if the  entry does  not exist one is
     1521     9934                           allocated using steps 4, 5, ... 8.
     1522     9935                            3. When the file  is closed, the data segment
     1523     9936                           containing the file  is released and the table
     1524     9937                           segment slot for that file is made available.
     1525     9938                            4.  An available table  segment slot is found
     1526     9939                           in the segment table.
     1527     9940                            5.  The  dynamic  segment  is allocated. This
     1528     9941                           segment  has  room  for  a  call  sequence, an
     1529     9942                           object  card, a set  of diskette sectors which
     1530     9943                           may be up to 64K bytes, and a deck end card.
     1531     9944                            6.  The catalog  entry is  read to return the
     1532     9945                           object deck key.
     1533     9946                            7.  The  call  sequence  is  copied  into the
     1534     9947                           dynamic buffer.
     1535     9948                            8. The object deck  is read from the deckfile
     1536     9949                           and placed in the dynamic segment.
     1537     9950                            9. The sector specified by the X4 register is
     1538     9951                           placed  in the location  specified in the call
     1539     9952                           sequence.
     1540     9953        */
     1541     9954
     1542     9955    2   TOM$SEEK_DECK: PROC (TCX, X2, X3, X4, A) ;

   9955  4 002507   200022 741300       TOM$SEEK_DE* STX1  ! @A,,AUTO

     1543     9956
     1544     9957    3      DCL TCX         UBIN WORD ALIGNED ;
     1545     9958    3      DCL X2          UBIN HALF HALIGNED ;
     1546     9959    3      DCL X3          UBIN HALF HALIGNED ;
     1547     9960    3      DCL X4          SBIN HALF HALIGNED ;
     1548     9961    3      DCL A           UBIN WORD ALIGNED ;
     1549     9962    3      DCL STX         UBIN WORD ALIGNED ;
     1550     9963    3      DCL SEQ$        PTR ALIGNED ;
     1551     9964           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:205  
     1552     9965        /* Code */
     1553     9966
     1554     9967    3      IF X4 = -1

   9967  4 002510   200026 470500                    LDP0    @X4,,AUTO
         4 002511   000100 100500                    MLR     fill='000'O
         4 002512   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         4 002513   200060 000004                    ADSC9   FIRMWARE_FOUND+2,,AUTO   cn=0,n=4
         4 002514   200060 236100                    LDQ     FIRMWARE_FOUND+2,,AUTO
         4 002515   000022 732000                    QRS     18
         4 002516   000027 116000 xsym               CMPQ    B_VECTNIL+23
         4 002517   002546 601000 4                  TNZ     s:9979

     1555     9968    4      THEN DO ;

     1556     9969                   /* X4 set to -1 indicates that a file should be closed */
     1557     9970    4              CALL TOM$FIND_SEG_FOR_ENTRY (TCX, STX) WHENALTRETURN

   9970  4 002520   200030 631500                    EPPR1   STX,,AUTO
         4 002521   200034 451500                    STP1    @TCX+1,,AUTO
         4 002522   200023 236100                    LDQ     @TCX,,AUTO
         4 002523   200033 756100                    STQ     SEQ$+2,,AUTO
         4 002524   002632 701000 4                  TSX1    TOM$FIND_SEG_FOR_ENTRY
         4 002525   002527 702000 4                  TSX2    s:9972
         4 002526   002537 710000 4                  TRA     s:9975

     1558     9971    5                   DO ;

     1559     9972    5                      TOM_ERROR_CODE.ERR# = %E$NOSEG ;

   9972  4 002527   000043 236000 1                  LDQ     TOM_ERROR_CODE
         4 002530   000031 376000 5                  ANQ     25
         4 002531   002300 276007                    ORQ     1216,DL
         4 002532   000043 756000 1                  STQ     TOM_ERROR_CODE

     1560     9973    5                      CALL TOX$ERROR (TOM_ERROR_CODE) ;

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:206  
   9973  4 002533   000034 630400 5                  EPPR0   28
         4 002534   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 002535   000000 701000 xent               TSX1    TOX$ERROR
         4 002536   000000 011000                    NOP     0

     1561     9974    5                   END /* WHENALTRETURN */ ;

     1562     9975    4              CALL TOM$FREE_SEG_FOR_ENTRY (TCX, STX) ;

   9975  4 002537   200030 630500                    EPPR0   STX,,AUTO
         4 002540   200034 450500                    STP0    @TCX+1,,AUTO
         4 002541   200023 236100                    LDQ     @TCX,,AUTO
         4 002542   200033 756100                    STQ     SEQ$+2,,AUTO
         4 002543   002677 701000 4                  TSX1    TOM$FREE_SEG_FOR_ENTRY
         4 002544   000000 011000                    NOP     0

     1563     9976    4           END /* THEN */ ;

   9976  4 002545   002630 710000 4                  TRA     s:9989

     1564     9977    4      ELSE DO ;

     1565     9978                   /* X4 contains the starting sector number to return */
     1566     9979    4              CALL TOM$FIND_SEG_FOR_ENTRY (TCX, STX) WHENALTRETURN

   9979  4 002546   200030 631500                    EPPR1   STX,,AUTO
         4 002547   200034 451500                    STP1    @TCX+1,,AUTO
         4 002550   200023 236100                    LDQ     @TCX,,AUTO
         4 002551   200033 756100                    STQ     SEQ$+2,,AUTO
         4 002552   002632 701000 4                  TSX1    TOM$FIND_SEG_FOR_ENTRY
         4 002553   002555 702000 4                  TSX2    s:9981
         4 002554   002616 710000 4                  TRA     s:9987

     1567     9980    5                   DO ;

     1568     9981    5                      CALL TOM$FIND_UNUSED_SEG (TCX, STX) ;

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:207  
   9981  4 002555   200030 630500                    EPPR0   STX,,AUTO
         4 002556   200034 450500                    STP0    @TCX+1,,AUTO
         4 002557   200023 236100                    LDQ     @TCX,,AUTO
         4 002560   200033 756100                    STQ     SEQ$+2,,AUTO
         4 002561   002753 701000 4                  TSX1    TOM$FIND_UNUSED_SEG
         4 002562   000000 011000                    NOP     0

     1569     9982    5                      CALL TOM$ALLOCATE_SEG (TCX, STX) ;

   9982  4 002563   200030 630500                    EPPR0   STX,,AUTO
         4 002564   200034 450500                    STP0    @TCX+1,,AUTO
         4 002565   200023 236100                    LDQ     @TCX,,AUTO
         4 002566   200033 756100                    STQ     SEQ$+2,,AUTO
         4 002567   003020 701000 4                  TSX1    TOM$ALLOCATE_SEG
         4 002570   000000 011000                    NOP     0

     1570     9983    5                      CALL TOM$READ_DECK_KEY ;

   9983  4 002571   003376 701000 4                  TSX1    TOM$READ_DECK_KEY
         4 002572   000000 011000                    NOP     0

     1571     9984    5                      CALL TOM$COPY_CALL_SEQUENCE (TCX, STX, SEQ$) ;

   9984  4 002573   200031 630500                    EPPR0   SEQ$,,AUTO
         4 002574   200035 450500                    STP0    @CALL_SEQ$+1,,AUTO
         4 002575   200030 631500                    EPPR1   STX,,AUTO
         4 002576   200034 451500                    STP1    @TCX+1,,AUTO
         4 002577   200023 236100                    LDQ     @TCX,,AUTO
         4 002600   200033 756100                    STQ     SEQ$+2,,AUTO
         4 002601   003075 701000 4                  TSX1    TOM$COPY_CALL_SEQUENCE
         4 002602   000000 011000                    NOP     0

     1572     9985    5                      CALL TOM$READ_DECK (TCX, SEQ$, X2, X3, A) ;

   9985  4 002603   200027 236100                    LDQ     @A,,AUTO
         4 002604   200025 235100                    LDA     @X3,,AUTO
         4 002605   200036 757100                    STAQ    @X2+1,,AUTO
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:208  
         4 002606   200024 236100                    LDQ     @X2,,AUTO
         4 002607   200035 756100                    STQ     @CALL_SEQ$+1,,AUTO
         4 002610   200031 630500                    EPPR0   SEQ$,,AUTO
         4 002611   200034 450500                    STP0    @TCX+1,,AUTO
         4 002612   200023 236100                    LDQ     @TCX,,AUTO
         4 002613   200033 756100                    STQ     SEQ$+2,,AUTO
         4 002614   003434 701000 4                  TSX1    TOM$READ_DECK
         4 002615   000000 011000                    NOP     0

     1573     9986    5                   END /* WHENALTRETURN */ ;

     1574     9987    4              CALL TOM$RETURN_DATA (TCX, STX, X4, A) ;

   9987  4 002616   200027 236100                    LDQ     @A,,AUTO
         4 002617   200036 756100                    STQ     @X2+1,,AUTO
         4 002620   200026 236100                    LDQ     @X4,,AUTO
         4 002621   200035 756100                    STQ     @CALL_SEQ$+1,,AUTO
         4 002622   200030 630500                    EPPR0   STX,,AUTO
         4 002623   200034 450500                    STP0    @TCX+1,,AUTO
         4 002624   200023 236100                    LDQ     @TCX,,AUTO
         4 002625   200033 756100                    STQ     SEQ$+2,,AUTO
         4 002626   003122 701000 4                  TSX1    TOM$RETURN_DATA
         4 002627   000000 011000                    NOP     0

     1575     9988    4           END /* ELSE */ ;

     1576     9989    3      RETURN ;

   9989  4 002630   200022 221300                    LDX1  ! @A,,AUTO
         4 002631   000001 702211                    TSX2  ! 1,X1

     1577     9990
     1578     9991        /* END TOM$SEEK_DECK */
     1579     9992        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:209  
     1580     9993        /*I* NAME:         TOM$FIND_SEG_FOR_ENTRY
     1581     9994             AUTHOR:       Scott S. Sheppard
     1582     9995             PURPOSE:      table search
     1583     9996             INTERFACE:    ADDR function
     1584     9997             PARAMETERS:   TCX - test number (input)
     1585     9998                           STX - segment number (output)
     1586     9999             DATA:         CATALOG_ENTRY_KEY.ENTRY# - input
     1587    10000                           TOM$SEGTBLS(TCX) - set of segments for a test page
     1588    10001                           TOM$SEGTBL(STX) - one segment from the set above
     1589    10002             DESCRIPTION:  This  procedure  performs  a  table look up to
     1590    10003                           find   the  dynamic   segment  containing  the
     1591    10004                           diskette  file read  from the  deckfile.  On a
     1592    10005                           MME   CATA,  all  entries   from  the  catalog
     1593    10006                           CATA.NIO.MCA  were returned to  the user where
     1594    10007                           each  entry was  assigned an  entry number and
     1595    10008                           other  attributes   identifying  the  diskette
     1596    10009                           file. In order to have a portions (sectors) of
     1597    10010                           the file  placed in the test  page's memory, a
     1598    10011                           MME DATA is  performed. To indicate which file
     1599    10012                           to  retrieve,  the  catalog  entry  number  is
     1600    10013                           passed  in the  call sequence.  This procedure
     1601    10014                           checks  to see if  the data to  be returned is
     1602    10015                           from  a  file  already  resident  in a dynamic
     1603    10016                           segment controlled by CP-6 TOLTS. If the entry
     1604    10017                           number to retrieve  matches an entry number of
     1605    10018                           one  of the  dynamic segments,  this procedure
     1606    10019                           returns  with the dynamic  segment index being
     1607    10020                           returned in STX. The procedure altreturns when
     1608    10021                           the entry number was not found.
     1609    10022        */
     1610    10023        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:210  
     1611    10024    3   TOM$FIND_SEG_FOR_ENTRY: PROC (TCX, STX) ALTRET ;

  10024  4 002632   200032 741300       TOM$FIND_SE* STX1  ! SEQ$+1,,AUTO

     1612    10025
     1613    10026    4      DCL TCX         UBIN WORD ALIGNED ;
     1614    10027    4      DCL STX         UBIN WORD ALIGNED ;
     1615    10028    4      DCL SEGTBL$     PTR ALIGNED ;
     1616    10029
     1617    10030        /* Code */
     1618    10031
     1619    10032           /* point to the set of segments for this test request */
     1620    10033    4      SEGTBL$ = ADDR (TOM$SEGTBLS(TCX)) ;

  10033  4 002633   200033 470500                    LDP0    @TCX,,AUTO
         4 002634   000000 236100                    LDQ     0,,PR0
         4 002635   000016 402007                    MPY     14,DL
         4 002636   000023 736000                    QLS     19
         4 002637   000007 036000 xsym               ADLQ    TOT$DMC+7
         4 002640   200035 756100                    STQ     SEGTBL$,,AUTO

     1621    10034
     1622    10035           /* start at 0 and step through the 7 possible segments */
     1623    10036    4      STX = 0 ;

  10036  4 002641   200034 471500                    LDP1    @STX,,AUTO
         4 002642   100000 450100                    STZ     0,,PR1

     1624    10037    5      DO WHILE (STX < %MAX_SEGS) ;

  10037  4 002643   100000 235100                    LDA     0,,PR1
         4 002644   000007 115007                    CMPA    7,DL
         4 002645   002675 603000 4                  TRC     s:10044

     1625    10038    5         IF SEGTBL$ -> TOM$SEGTBL.ENTRY#(STX) = CATALOG_ENTRY_KEY.ENTRY#

  10038  4 002646   200034 470500                    LDP0    @STX,,AUTO
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:211  
         4 002647   000000 235100                    LDA     0,,PR0
         4 002650   000001 735000                    ALS     1
         4 002651   000000 620005                    EAX0    0,AL
         4 002652   000052 235000 1                  LDA     CATALOG_ENTRY_KEY
         4 002653   000053 236000 1                  LDQ     CATALOG_ENTRY_KEY+1
         4 002654   000033 773000                    LRL     27
         4 002655   777777 376007                    ANQ     -1,DL
         4 002656   200060 756100                    STQ     FIRMWARE_FOUND+2,,AUTO
         4 002657   000000 635010                    EAA     0,X0
         4 002660   000021 771000                    ARL     17
         4 002661   200035 471500                    LDP1    SEGTBL$,,AUTO
         4 002662   100003 236105                    LDQ     3,AL,PR1
         4 002663   000022 772000                    QRL     18
         4 002664   200060 116100                    CMPQ    FIRMWARE_FOUND+2,,AUTO
         4 002665   002670 601000 4                  TNZ     s:10040

     1626    10039    5         THEN RETURN ;

  10039  4 002666   200032 221300                    LDX1  ! SEQ$+1,,AUTO
         4 002667   000001 702211                    TSX2  ! 1,X1

     1627    10040    5         ELSE STX = STX + 1 ;

  10040  4 002670   000000 235100                    LDA     0,,PR0
         4 002671   000001 035007                    ADLA    1,DL
         4 002672   000000 755100                    STA     0,,PR0

     1628    10041    5      END /* WHILE */ ;

  10041  4 002673   000007 115007                    CMPA    7,DL
         4 002674   002646 602000 4                  TNC     s:10038

     1629    10042
     1630    10043           /* no segment allocated for this catalog entry */
     1631    10044    4      ALTRETURN ;

  10044  4 002675   200032 221300                    LDX1  ! SEQ$+1,,AUTO
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:212  
         4 002676   000000 702211                    TSX2  ! 0,X1

     1632    10045
     1633    10046    4   END TOM$FIND_SEG_FOR_ENTRY ;
     1634    10047        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:213  
     1635    10048        /*I* NAME:         TOM$FREE_SEG_FOR_ENTRY
     1636    10049             AUTHOR:       Scott S. Sheppard
     1637    10050             PURPOSE:      releases memory
     1638    10051             INTERFACE:    ADDR function
     1639    10052                           TOX$SCREECH
     1640    10053             PARAMETERS:   TCX - which test page (input)
     1641    10054                           STX - which segment for the test page (input)
     1642    10055             DATA:         TOM$SEGTBLS(TCX) - input
     1643    10056                           TOM$SEGTBL(STX) - input / output
     1644    10057                           TOM_ERROR_CODE - output
     1645    10058             DESCRIPTION:  When an  NIO test page wishes  to simulate the
     1646    10059                           closing  of  a  diskette  file,  a MME DATA is
     1647    10060                           performed  requesting  data  for sector number
     1648    10061                           -1. This indicates that  the file is no longer
     1649    10062                           needed  and  thus  the  memory containing that
     1650    10063                           file  may  be  released.   Once  released, the
     1651    10064                           segment  table  entry  for  that file (catalog
     1652    10065                           entry)   is  zeroed   out,  making   the  slot
     1653    10066                           available for another catalog entry if needed.
     1654    10067
     1655    10068                           If the catalog entry number was found,the file
     1656    10069                           should be active.   If it isn't,  something is
     1657    10070                           really wrong and a screech dump is produced.
     1658    10071        */
     1659    10072        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:214  
     1660    10073    3   TOM$FREE_SEG_FOR_ENTRY: PROC (TCX, STX) ;

  10073  4 002677   200032 741300       TOM$FREE_SE* STX1  ! SEQ$+1,,AUTO

     1661    10074
     1662    10075    4      DCL TCX         UBIN WORD ALIGNED ;
     1663    10076    4      DCL STX         UBIN WORD ALIGNED ;
     1664    10077    4      DCL SEGTBL$     PTR ALIGNED ;
     1665    10078
     1666    10079        /* Code */
     1667    10080
     1668    10081           /* point to the set of segments for this test request */
     1669    10082    4      SEGTBL$ = ADDR (TOM$SEGTBLS(TCX)) ;

  10082  4 002700   200033 470500                    LDP0    @TCX,,AUTO
         4 002701   000000 236100                    LDQ     0,,PR0
         4 002702   000016 402007                    MPY     14,DL
         4 002703   000023 736000                    QLS     19
         4 002704   000007 036000 xsym               ADLQ    TOT$DMC+7
         4 002705   200035 756100                    STQ     SEGTBL$,,AUTO

     1670    10083
     1671    10084           /* ensure that nothing strange is going on */
     1672    10085    4      IF SEGTBL$ -> TOM$SEGTBL.ACTIVE(STX)

  10085  4 002706   200034 471500                    LDP1    @STX,,AUTO
         4 002707   100000 235100                    LDA     0,,PR1
         4 002710   000001 735000                    ALS     1
         4 002711   000001 735000                    ALS     1
         4 002712   200035 473500                    LDP3    SEGTBL$,,AUTO
         4 002713   300002 234105                    SZN     2,AL,PR3
         4 002714   002741 605000 4                  TPL     s:10094

     1673    10086    5      THEN DO ;

     1674    10087                   /* free the segment for this catalog entry */
     1675    10088    5              CALL TOM$FREE_DATA_SEGMENT (%SEG_LGTH, SEGTBL$->TOM$SEGTBL.V(STX));
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:215  

  10088  4 002715   100000 235100                    LDA     0,,PR1
         4 002716   000001 735000                    ALS     1
         4 002717   000044 733000                    LRS     36
         4 002720   000023 736000                    QLS     19
         4 002721   200035 036100                    ADLQ    SEGTBL$,,AUTO
         4 002722   200040 756100                    STQ     @WORD_COUNT+1,,AUTO
         4 002723   000105 236000 5                  LDQ     69
         4 002724   200037 756100                    STQ     @X3+1,,AUTO
         4 002725   003650 701000 4                  TSX1    TOM$FREE_DATA_SEGMENT
         4 002726   000000 011000                    NOP     0

     1676    10089    5              SEGTBL$ -> TOM$SEGTBL(STX) = '0'B ;

  10089  4 002727   200034 470500                    LDP0    @STX,,AUTO
         4 002730   000000 235100                    LDA     0,,PR0
         4 002731   000001 735000                    ALS     1
         4 002732   000003 735000                    ALS     3
         4 002733   200035 471500                    LDP1    SEGTBL$,,AUTO
         4 002734   000105 100400                    MLR     fill='000'O
         4 002735   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         4 002736   100000 000020                    ADSC9   0,A,PR1                  cn=0,n=16

     1677    10090    5              RETURN ;

  10090  4 002737   200032 221300                    LDX1  ! SEQ$+1,,AUTO
         4 002740   000001 702211                    TSX2  ! 1,X1

     1678    10091    5           END /* THEN */ ;
     1679    10092    5      ELSE DO ;

     1680    10093                   /* can't happen - all existing entries should be active */
     1681    10094    5              TOM_ERROR_CODE.ERR# = %E$FREEINACTV ;

  10094  4 002741   000043 236000 1                  LDQ     TOM_ERROR_CODE
         4 002742   000031 376000 5                  ANQ     25
         4 002743   002310 276007                    ORQ     1224,DL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:216  
         4 002744   000043 756000 1                  STQ     TOM_ERROR_CODE

     1682    10095    5              CALL TOX$SCREECH (TOM_ERROR_CODE) ;

  10095  4 002745   000034 630400 5                  EPPR0   28
         4 002746   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 002747   000000 701000 xent               TSX1    TOX$SCREECH
         4 002750   000000 011000                    NOP     0

     1683    10096    5           END /* ELSE */ ;

     1684    10097
     1685    10098    4   END TOM$FREE_SEG_FOR_ENTRY ;

  10098  4 002751   200032 221300                    LDX1  ! SEQ$+1,,AUTO
         4 002752   000001 702211                    TSX2  ! 1,X1

     1686    10099        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:217  
     1687    10100        /*I* NAME:         TOM$FIND_UNUSED_SEG
     1688    10101             AUTHOR:       Scott S. Sheppard
     1689    10102             PURPOSE:      locates vacant slot
     1690    10103             INTERFACE:    ADDR function
     1691    10104                           TOX$ERROR
     1692    10105             PARAMETERS:   TCX - which test page (input)
     1693    10106                           STX - Segment Table indeX (output)
     1694    10107             DATA:         TOM$SEGTBLS(TCX) - set of segments for a test page
     1695    10108                           TOM$SEGTBL(STX) - one of the segments from above
     1696    10109                           TOM_ERROR_CODE - output
     1697    10110             DESCRIPTION:  In  order  to  return  a  sector of a diskette
     1698    10111                           file, the file must be read into memory.  This
     1699    10112                           procedure  locates  an  unused  segment  table
     1700    10113                           entry  so that  a segment  may be allocated to
     1701    10114                           contain  the  entry.  The  segment table for a
     1702    10115                           test  page may control  up to 7  files. If all
     1703    10116                           seven  are  currently  in  use, this procedure
     1704    10117                           calls  TOX$ERROR which  reports the  error and
     1705    10118                           wraps  up MOLTS.  The slot  or entry number of
     1706    10119                           the available segment  table entry is returned
     1707    10120                           in STX.
     1708    10121        */
     1709    10122        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:218  
     1710    10123    3   TOM$FIND_UNUSED_SEG: PROC (TCX, STX) ;

  10123  4 002753   200032 741300       TOM$FIND_UN* STX1  ! SEQ$+1,,AUTO

     1711    10124
     1712    10125    4      DCL TCX         UBIN WORD ALIGNED ;
     1713    10126    4      DCL STX         UBIN WORD ALIGNED ;
     1714    10127    4      DCL SEGTBL$     PTR ALIGNED ;
     1715    10128
     1716    10129        /* Code */
     1717    10130
     1718    10131           /* point to the set of segments for this test request */
     1719    10132    4      SEGTBL$ = ADDR (TOM$SEGTBLS(TCX)) ;

  10132  4 002754   200033 470500                    LDP0    @TCX,,AUTO
         4 002755   000000 236100                    LDQ     0,,PR0
         4 002756   000016 402007                    MPY     14,DL
         4 002757   000023 736000                    QLS     19
         4 002760   000007 036000 xsym               ADLQ    TOT$DMC+7
         4 002761   200035 756100                    STQ     SEGTBL$,,AUTO

     1720    10133
     1721    10134           /* start at 0 and step through the possible 7 segments */
     1722    10135    4      STX = 0 ;

  10135  4 002762   200034 471500                    LDP1    @STX,,AUTO
         4 002763   100000 450100                    STZ     0,,PR1

     1723    10136    5      DO WHILE (STX < %MAX_SEGS) ;

  10136  4 002764   100000 235100                    LDA     0,,PR1
         4 002765   000007 115007                    CMPA    7,DL
         4 002766   003006 603000 4                  TRC     s:10143

     1724    10137    5         IF SEGTBL$ -> TOM$SEGTBL.ACTIVE(STX)

  10137  4 002767   200034 470500                    LDP0    @STX,,AUTO
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:219  
         4 002770   000000 235100                    LDA     0,,PR0
         4 002771   000001 735000                    ALS     1
         4 002772   000001 735000                    ALS     1
         4 002773   200035 471500                    LDP1    SEGTBL$,,AUTO
         4 002774   100002 234105                    SZN     2,AL,PR1
         4 002775   003002 605000 4                  TPL     s:10139

     1725    10138    5         THEN STX = STX + 1 ;

  10138  4 002776   000000 235100                    LDA     0,,PR0
         4 002777   000001 035007                    ADLA    1,DL
         4 003000   000000 755100                    STA     0,,PR0
         4 003001   003004 710000 4                  TRA     s:10140

     1726    10139    5         ELSE RETURN ;

  10139  4 003002   200032 221300                    LDX1  ! SEQ$+1,,AUTO
         4 003003   000001 702211                    TSX2  ! 1,X1

     1727    10140    5      END /* WHILE */ ;

  10140  4 003004   000007 115007                    CMPA    7,DL
         4 003005   002767 602000 4                  TNC     s:10137

     1728    10141
     1729    10142           /* all 7 segments are in use */
     1730    10143    4      TOM_ERROR_CODE.ERR# = %E$SEGSFULL ;

  10143  4 003006   000043 236000 1                  LDQ     TOM_ERROR_CODE
         4 003007   000031 376000 5                  ANQ     25
         4 003010   002320 276007                    ORQ     1232,DL
         4 003011   000043 756000 1                  STQ     TOM_ERROR_CODE

     1731    10144    4      CALL TOX$ERROR (TOM_ERROR_CODE) ;

  10144  4 003012   000034 630400 5                  EPPR0   28
         4 003013   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:220  
         4 003014   000000 701000 xent               TSX1    TOX$ERROR
         4 003015   000000 011000                    NOP     0

     1732    10145
     1733    10146    4   END TOM$FIND_UNUSED_SEG ;

  10146  4 003016   200032 221300                    LDX1  ! SEQ$+1,,AUTO
         4 003017   000001 702211                    TSX2  ! 1,X1

     1734    10147        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:221  
     1735    10148        /*I* NAME:         TOM$ALLOCATE_SEG
     1736    10149             PURPOSE:      obtains a data segment
     1737    10150             INTERFACE:    TOM$GET_DATA_SEGMENT
     1738    10151             PARAMETERS:   TCX - which test page (input)
     1739    10152             DATA:         TOM$SEGTBLS(TCX) - set of segments for a test page
     1740    10153                           TOM$SEGTBLS(STX) - one of the segments from above
     1741    10154                           TOM$SEG - segment is zeroed out
     1742    10155                           CATALOG_ENTRY_KEY.ENTRY#
     1743    10156             DESCRIPTION:  This  procedure allocates  a segment  for test
     1744    10157                           page TCX  using the segment table  slot STX to
     1745    10158                           contain  the file  data for  NIO catalog entry
     1746    10159                           number  CATALOG_ENTRY_KEY.ENTRY#.  The segment
     1747    10160                           table  vector,  active  flag,  and identifying
     1748    10161                           catalog entry number are initialized.
     1749    10162        */
     1750    10163
     1751    10164    3   TOM$ALLOCATE_SEG: PROC (TCX, STX) ;

  10164  4 003020   200032 741300       TOM$ALLOCAT* STX1  ! SEQ$+1,,AUTO

     1752    10165
     1753    10166    4      DCL TCX         UBIN WORD ALIGNED ;
     1754    10167    4      DCL STX         UBIN WORD ALIGNED ;
     1755    10168    4      DCL SEGTBL$     PTR ALIGNED ;
     1756    10169
     1757    10170        /* Code */
     1758    10171
     1759    10172           /* point to the set of segments for this test request */
     1760    10173    4      SEGTBL$ = ADDR (TOM$SEGTBLS(TCX)) ;

  10173  4 003021   200033 470500                    LDP0    @TCX,,AUTO
         4 003022   000000 236100                    LDQ     0,,PR0
         4 003023   000016 402007                    MPY     14,DL
         4 003024   000023 736000                    QLS     19
         4 003025   000007 036000 xsym               ADLQ    TOT$DMC+7
         4 003026   200035 756100                    STQ     SEGTBL$,,AUTO

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:222  
     1761    10174
     1762    10175           /* allocate the segment and mark the segment table entry */
     1763    10176    4      CALL TOM$GET_DATA_SEGMENT (%SEG_LGTH, SEGTBL$ -> TOM$SEGTBL.V(STX)) ;

  10176  4 003027   200034 471500                    LDP1    @STX,,AUTO
         4 003030   100000 235100                    LDA     0,,PR1
         4 003031   000001 735000                    ALS     1
         4 003032   000044 733000                    LRS     36
         4 003033   000023 736000                    QLS     19
         4 003034   200035 036100                    ADLQ    SEGTBL$,,AUTO
         4 003035   200052 756100                    STQ     J,,AUTO
         4 003036   000105 236000 5                  LDQ     69
         4 003037   200051 756100                    STQ     I,,AUTO
         4 003040   003621 701000 4                  TSX1    TOM$GET_DATA_SEGMENT
         4 003041   000000 011000                    NOP     0

     1764    10177    4      SEGTBL$ -> TOM$SEGTBL.ACTIVE(STX) = %TRUE ;

  10177  4 003042   200034 470500                    LDP0    @STX,,AUTO
         4 003043   000000 235100                    LDA     0,,PR0
         4 003044   000001 735000                    ALS     1
         4 003045   000001 735000                    ALS     1
         4 003046   400000 236003                    LDQ     -131072,DU
         4 003047   200035 471500                    LDP1    SEGTBL$,,AUTO
         4 003050   100002 756105                    STQ     2,AL,PR1

     1765    10178    4      SEGTBL$ -> TOM$SEGTBL.ENTRY#(STX) = CATALOG_ENTRY_KEY.ENTRY# ;

  10178  4 003051   000000 235100                    LDA     0,,PR0
         4 003052   000001 735000                    ALS     1
         4 003053   000001 735000                    ALS     1
         4 003054   000000 620005                    EAX0    0,AL
         4 003055   000052 235000 1                  LDA     CATALOG_ENTRY_KEY
         4 003056   000053 236000 1                  LDQ     CATALOG_ENTRY_KEY+1
         4 003057   000033 773000                    LRL     27
         4 003060   777777 376007                    ANQ     -1,DL
         4 003061   000000 621006                    EAX1    0,QL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:223  
         4 003062   100003 741110                    STX1    3,X0,PR1

     1766    10179    4      SEGTBL$ -> TOM$SEGTBL.V.PTR$(STX) -> TOM$SEG = '0'B ;

  10179  4 003063   000000 235100                    LDA     0,,PR0
         4 003064   000001 735000                    ALS     1
         4 003065   000001 735000                    ALS     1
         4 003066   100001 473505                    LDP3    1,AL,PR1
         4 003067   200324 220003                    LDX0    65748,DU
         4 003070   000140 100400                    MLR     fill='000'O
         4 003071   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         4 003072   300000 000010                    ADSC9   0,,PR3                   cn=0,n=*X0

     1767    10180    4      RETURN ;

  10180  4 003073   200032 221300                    LDX1  ! SEQ$+1,,AUTO
         4 003074   000001 702211                    TSX2  ! 1,X1

     1768    10181
     1769    10182    4   END TOM$ALLOCATE_SEG ;
     1770    10183        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:224  
     1771    10184        /*I* NAME:         TOM$COPY_CALL_SEQUENCE
     1772    10185             AUTHOR:       Scott S. Sheppard
     1773    10186             PURPOSE:      places call sequence in dynamic memory
     1774    10187             INTERFACE:    ADDR function
     1775    10188             PARAMETERS:   TCX - which test page (input)
     1776    10189                           STX - which segment for the test page (input)
     1777    10190                           SEQ$ - pointer to the call sequence (output)
     1778    10191             DATA:         TOM$SEGTBLS(TCX) - set of segments for a test page
     1779    10192                           TOM$SEGTBL(STX) - one data segment from above
     1780    10193                           CALL_SEQ$ -> CALL_SEQUENCE - input
     1781    10194             DESCRIPTION:  This procedure is  used for an unusual reason.
     1782    10195                           The  section of  the loader, TOL$GET_NIO_DECK,
     1783    10196                           used to load a catalog entry into memory loads
     1784    10197                           the  data into  the same  data segment  as the
     1785    10198                           call  sequence. By  placing the  a copy of the
     1786    10199                           call   sequence  at   the  beginning   of  the
     1787    10200                           dynamically  acquired  segment,  the  copy  is
     1788    10201                           passed to the loader and the data is read from
     1789    10202                           the deckfile  and loaded immediately following
     1790    10203                           the call sequence is the same data segment.
     1791    10204                           The  pointer  to the copied  call sequence  is
     1792    10205                           returned to the  caller  so it may used on the
     1793    10206                           call to TOM$READ_DECK.
     1794    10207        */
     1795    10208        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:225  
     1796    10209    3   TOM$COPY_CALL_SEQUENCE: PROC (TCX, STX, SEQ$) ;

  10209  4 003075   200032 741300       TOM$COPY_CA* STX1  ! SEQ$+1,,AUTO

     1797    10210
     1798    10211    4      DCL TCX         UBIN WORD ALIGNED ;
     1799    10212    4      DCL STX         UBIN WORD ALIGNED ;
     1800    10213    4      DCL SEQ$        PTR ALIGNED ;
     1801    10214    4      DCL SEGTBL$     PTR ALIGNED ;
     1802    10215
     1803    10216        /* Code */
     1804    10217
     1805    10218           /* point to the set of segments for this test request */
     1806    10219    4      SEGTBL$ = ADDR (TOM$SEGTBLS(TCX)) ;

  10219  4 003076   200033 470500                    LDP0    @TCX,,AUTO
         4 003077   000000 236100                    LDQ     0,,PR0
         4 003100   000016 402007                    MPY     14,DL
         4 003101   000023 736000                    QLS     19
         4 003102   000007 036000 xsym               ADLQ    TOT$DMC+7
         4 003103   200036 756100                    STQ     SEGTBL$,,AUTO

     1807    10220
     1808    10221           /* point to the buffer in the segment table for the CALL SEQUENCE */
     1809    10222    4      SEQ$ = ADDR (SEGTBL$ -> TOM$SEGTBL.V.PTR$(STX) -> TOM$SEG.CALL_SEQUENCE) ;

  10222  4 003104   200034 471500                    LDP1    @STX,,AUTO
         4 003105   100000 235100                    LDA     0,,PR1
         4 003106   000001 735000                    ALS     1
         4 003107   000001 735000                    ALS     1
         4 003110   200036 473500                    LDP3    SEGTBL$,,AUTO
         4 003111   300001 474505                    LDP4    1,AL,PR3
         4 003112   200035 475500                    LDP5    @SEQ$,,AUTO
         4 003113   500000 454500                    STP4    0,,PR5

     1810    10223
     1811    10224           /* copy the CALL SEQUENCE from the test page into the segment table */
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:226  
     1812    10225    4      SEQ$ -> CALL_SEQUENCE = CALL_SEQ$ -> CALL_SEQUENCE ;

  10225  4 003114   200007 476500                    LDP6    CALL_SEQ$,,AUTO
         4 003115   000100 100500                    MLR     fill='000'O
         4 003116   600000 000034                    ADSC9   0,,PR6                   cn=0,n=28
         4 003117   400000 000034                    ADSC9   0,,PR4                   cn=0,n=28

     1813    10226    4      RETURN ;

  10226  4 003120   200032 221300                    LDX1  ! SEQ$+1,,AUTO
         4 003121   000001 702211                    TSX2  ! 1,X1

     1814    10227
     1815    10228    4   END TOM$COPY_CALL_SEQUENCE ;
     1816    10229        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:227  
     1817    10230        /*I* NAME:         TOM$RETURN_DATA
     1818    10231             AUTHOR:       Scott S. Sheppard
     1819    10232             PURPOSE:      returns diskette data
     1820    10233             INTERFACE:    ADDR function
     1821    10234                           TOM$MOVE_SECTORS
     1822    10235             PARAMETERS:   TCX - which test page (input)
     1823    10236                           STX - which segment to use (input)
     1824    10237                           X4 - sector to read (input)
     1825    10238                           A - number of words read (output)
     1826    10239             DATA:         TOM$SEGTBLS(TCX) - set of segments for a test page
     1827    10240                           TOM$SEGTBL(STX) - one of those segments
     1828    10241                           CALL_SEQUENCE.NO_MORE
     1829    10242                              0 - more data exists to be returned
     1830    10243                             -1 - no more data (simulates end of file)
     1831    10244                           READ_ERR_CODE.CODE
     1832    10245                              0 - no more data to return
     1833    10246                              42 - more data to return
     1834    10247                              52 - read past end of file
     1835    10248                           IS$ - pointer to instruction segment (input)
     1836    10249                           CALL_SEQ$ - input
     1837    10250             DESCRIPTION:  This  procedure  does  some  validation before
     1838    10251                           calling a routine, TOM$MOVE_SECTORS, to return
     1839    10252                           the data.  A pointer is set  up to the segment
     1840    10253                           in  question. X4, the  starting sector number,
     1841    10254                           is  checked to  ensure that  it is  within the
     1842    10255                           range of valid sectors for the particular file
     1843    10256                           segment.   If the  starting sectors  is valid,
     1844    10257                           TOM$MOVE_SECTORS  is  called  which  moves the
     1845    10258                           data  and  returns  the  number of words moved
     1846    10259                           along with whether or  not the end of file has
     1847    10260                           been reached.  The end of file flag is used to
     1848    10261                           set the read error  code and the call sequence
     1849    10262                           no more flag properly.
     1850    10263        */
     1851    10264        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:228  
     1852    10265    3   TOM$RETURN_DATA: PROC (TCX, STX, X4, A) ;

  10265  4 003122   200032 741300       TOM$RETURN_* STX1  ! SEQ$+1,,AUTO

     1853    10266
     1854    10267    4      DCL TCX         UBIN WORD ALIGNED ;
     1855    10268    4      DCL STX         UBIN WORD ALIGNED ;
     1856    10269    4      DCL X4          SBIN HALF HALIGNED ;
     1857    10270    4      DCL A           UBIN WORD ALIGNED ;
     1858    10271    4      DCL SEGTBL$     PTR ALIGNED ;
     1859    10272    4      DCL SEG$        PTR ALIGNED ;
     1860    10273    4      DCL EOF         BIT (1) ALIGNED ;
     1861    10274
     1862    10275        /* Code */
     1863    10276
     1864    10277           /* point to the segment from the set of segments for the request */
     1865    10278    4      SEGTBL$ = ADDR (TOM$SEGTBLS(TCX)) ;

  10278  4 003123   200033 470500                    LDP0    @TCX,,AUTO
         4 003124   000000 236100                    LDQ     0,,PR0
         4 003125   000016 402007                    MPY     14,DL
         4 003126   000023 736000                    QLS     19
         4 003127   000007 036000 xsym               ADLQ    TOT$DMC+7
         4 003130   200037 756100                    STQ     SEGTBL$,,AUTO

     1866    10279    4      SEG$ = SEGTBL$ -> TOM$SEGTBL.V.PTR$(STX) ;

  10279  4 003131   200034 471500                    LDP1    @STX,,AUTO
         4 003132   100000 235100                    LDA     0,,PR1
         4 003133   000001 735000                    ALS     1
         4 003134   000001 735000                    ALS     1
         4 003135   200037 473500                    LDP3    SEGTBL$,,AUTO
         4 003136   300001 236105                    LDQ     1,AL,PR3
         4 003137   200040 756100                    STQ     SEG$,,AUTO

     1867    10280
     1868    10281    4      READ_ERR_CODE = '0'B ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:229  

  10281  4 003140   000042 450000 1                  STZ     READ_ERROR_CODE

     1869    10282
     1870    10283    4      IF X4 >= 0 & X4 <= SEG$ -> TOM$SEG.LAST_SECTOR

  10283  4 003141   400000 220003                    LDX0    -131072,DU
         4 003142   200035 474500                    LDP4    @X4,,AUTO
         4 003143   000100 100500                    MLR     fill='000'O
         4 003144   400000 000002                    ADSC9   0,,PR4                   cn=0,n=2
         4 003145   200060 000004                    ADSC9   FIRMWARE_FOUND+2,,AUTO   cn=0,n=4
         4 003146   200060 236100                    LDQ     FIRMWARE_FOUND+2,,AUTO
         4 003147   000022 732000                    QRS     18
         4 003150   000000 116003                    CMPQ    0,DU
         4 003151   003153 605000 4                  TPL     s:10283+10
         4 003152   000000 220003                    LDX0    0,DU
         4 003153   400000 222003                    LDX2    -131072,DU
         4 003154   200040 475500                    LDP5    SEG$,,AUTO
         4 003155   000100 100500                    MLR     fill='000'O
         4 003156   400000 000002                    ADSC9   0,,PR4                   cn=0,n=2
         4 003157   200061 000004                    ADSC9   FIRMWARE_FOUND+3,,AUTO   cn=0,n=4
         4 003160   200061 236100                    LDQ     FIRMWARE_FOUND+3,,AUTO
         4 003161   000022 732000                    QRS     18
         4 003162   003167 604000 4                  TMI     s:10283+22
         4 003163   500037 116100                    CMPQ    31,,PR5
         4 003164   003167 602000 4                  TNC     s:10283+22
         4 003165   003167 600000 4                  TZE     s:10283+22
         4 003166   000000 222003                    LDX2    0,DU
         4 003167   000000 636012                    EAQ     0,X2
         4 003170   200062 756100                    STQ     FIRMWARE_FOUND+4,,AUTO
         4 003171   000000 636010                    EAQ     0,X0
         4 003172   200062 376100                    ANQ     FIRMWARE_FOUND+4,,AUTO
         4 003173   003216 600000 4                  TZE     s:10293

     1871    10284    5      THEN DO ;

     1872    10285                   /* move sectors and set return parameters */
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:230  
     1873    10286    5              CALL TOM$MOVE_SECTORS (SEG$, X4, A, EOF) ;

  10286  4 003174   200041 636500                    EPPR6   EOF,,AUTO
         4 003175   200046 456500                    STP6    @WORD_COUNT+1,,AUTO
         4 003176   200036 236100                    LDQ     @A,,AUTO
         4 003177   200035 235100                    LDA     @X4,,AUTO
         4 003200   200044 757100                    STAQ    @SEG$+1,,AUTO
         4 003201   200040 637500                    EPPR7   SEG$,,AUTO
         4 003202   200043 457500                    STP7    EOF+2,,AUTO
         4 003203   003224 701000 4                  TSX1    TOM$MOVE_SECTORS
         4 003204   000000 011000                    NOP     0

     1874    10287    5              IF EOF

  10287  4 003205   200041 234100                    SZN     EOF,,AUTO
         4 003206   003213 605000 4                  TPL     s:10289

     1875    10288    5              THEN CALL_SEQ$ -> CALL_SEQUENCE.NO_MORE = -1 ;

  10288  4 003207   000001 335007                    LCA     1,DL
         4 003210   200007 470500                    LDP0    CALL_SEQ$,,AUTO
         4 003211   000006 755100                    STA     6,,PR0
         4 003212   003222 710000 4                  TRA     s:10296

     1876    10289    5              ELSE READ_ERR_CODE.CODE = 42 ;

  10289  4 003213   000052 236007                    LDQ     42,DL
         4 003214   000042 552004 1                  STBQ    READ_ERROR_CODE,'04'O

     1877    10290    5           END /* THEN */ ;

  10290  4 003215   003222 710000 4                  TRA     s:10296

     1878    10291    5      ELSE DO ;

     1879    10292                   /* sector requested is past the end of file */
     1880    10293    5              READ_ERR_CODE.CODE = 52 ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:231  

  10293  4 003216   000064 236007                    LDQ     52,DL
         4 003217   000042 552004 1                  STBQ    READ_ERROR_CODE,'04'O

     1881    10294    5              A = 0 ;

  10294  4 003220   200036 476500                    LDP6    @A,,AUTO
         4 003221   600000 450100                    STZ     0,,PR6

     1882    10295    5           END /* ELSE */ ;

     1883    10296    4      RETURN ;

  10296  4 003222   200032 221300                    LDX1  ! SEQ$+1,,AUTO
         4 003223   000001 702211                    TSX2  ! 1,X1

     1884    10297
     1885    10298        /* END TOM$RETURN_DATA */
     1886    10299        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:232  
     1887    10300        /*I* NAME:         TOM$MOVE_SECTORS
     1888    10301             PURPOSE:      copies data into test page memory
     1889    10302             INTERFACE:    ADDR function
     1890    10303             PARAMETERS:   SEG$ - pointer to the data segment (input)
     1891    10304                           FIRST_SECTOR - staring sector number (input)
     1892    10305                           WORD_COUNT - number of words moved (output)
     1893    10306                           EOF - end of file hit? (output)
     1894    10307             DATA:         TOM$SEG.SECTORS - file data saved in memory (input)
     1895    10308                           CALL_SEQ$ - pointer to the call sequence (input)
     1896    10309                           CALL_SEQUENCE.FDCWP - address of file DCW (input)
     1897    10310                           CALL_SEQUENCE.STATUSP - address of status (input)
     1898    10311                           IS$ - pointer to start of instruction segment (input)
     1899    10312             DESCRIPTION:  This  procedure  moves  the  data  from TOLTS'
     1900    10313                           dynamic  data  segment  into  the  test page's
     1901    10314                           memory. The procedure  sets up pointers to the
     1902    10315                           starting point in  the data segment (SOURCE$),
     1903    10316                           the  DCW  which  describes  where and how many
     1904    10317                           words to  move (DCW$), and a  pointer to where
     1905    10318                           the data should be moved (TARGET$). The number
     1906    10319                           of words  to move is chcked to  see that it is
     1907    10320                           MOD  64.  There  are  64  words  to  a  DIPPER
     1908    10321                           diskette  sector  and   the  number  of  words
     1909    10322                           specified  here  should  be  an even number of
     1910    10323                           sectors.  The  number  of  sectors to actually
     1911    10324                           move is calculated  as the minimum between the
     1912    10325                           number  requested and the  number remaining in
     1913    10326                           the file. (If a  file has 20 sectors, numbered
     1914    10327                           0 - 19, and a request is issued for 10 sectors
     1915    10328                           starting at sector 15, only 5 sectors (numbers
     1916    10329                           15 -19)  will be returned.) The  word count is
     1917    10330                           used to reflect how many sectors were actually
     1918    10331                           returned.  The EOF  flag indicates  whether or
     1919    10332                           not the request was fully satisfied.
     1920    10333        */
     1921    10334        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:233  
     1922    10335    4   TOM$MOVE_SECTORS: PROC (SEG$, FIRST_SECTOR, WORD_COUNT, EOF) ;

  10335  4 003224   200042 741300       TOM$MOVE_SE* STX1  ! EOF+1,,AUTO

     1923    10336
     1924    10337    5      DCL SEG$              PTR ALIGNED ;
     1925    10338    5      DCL FIRST_SECTOR      SBIN HALF HALIGNED ;
     1926    10339    5      DCL WORD_COUNT        UBIN WORD ALIGNED ;
     1927    10340    5      DCL EOF               BIT (1) ALIGNED ;
     1928    10341    5      DCL SECTOR_COUNT      UBIN WORD ALIGNED ;
     1929    10342    5      DCL SECTORS_REQUESTED UBIN WORD ALIGNED ;
     1930    10343    5      DCL SOURCE$           PTR ALIGNED ;
     1931    10344    5      DCL TARGET$           PTR ALIGNED ;
     1932    10345    5      DCL DCW$              PTR ALIGNED ;
     1933    10346    5      DCL 1 DCW BASED (DCW$) ALIGNED,
     1934    10347    5            2 ADDRESS       UBIN (18) UNAL,
     1935    10348    5            2 *             UBIN (3)  UNAL,
     1936    10349    5            2 TYPE          UBIN (3)  UNAL,
     1937    10350    5            2 WORD_COUNT    UBIN (12) UNAL ;
     1938    10351    5      DCL STATUS$           PTR ALIGNED ;
     1939    10352    5      DCL 1 STATUS BASED (STATUS$) ALIGNED,
     1940    10353    5            2 NEXT_ADDRESS  UBIN (18) UNAL,
     1941    10354    5            2 RESIDUE       UBIN (18) UNAL ;
     1942    10355    5      DCL I                 UBIN WORD ALIGNED ;
     1943    10356    5      DCL DATA_SECTOR       (0:255) CHAR (256) BASED ALIGNED ;
     1944    10357
     1945    10358        /* Code */
     1946    10359
     1947    10360           /* point to the first sector, DCW, and target */
     1948    10361    5      SOURCE$ = ADDR (SEG$ -> TOM$SEG.SECTORS(FIRST_SECTOR)) ;

  10361  4 003225   200043 470500                    LDP0    @SEG$,,AUTO
         4 003226   000000 471500                    LDP1    0,,PR0
         4 003227   200044 473500                    LDP3    @FIRST_SECTOR,,AUTO
         4 003230   000100 100500                    MLR     fill='000'O
         4 003231   300000 000002                    ADSC9   0,,PR3                   cn=0,n=2
         4 003232   200060 000004                    ADSC9   FIRMWARE_FOUND+2,,AUTO   cn=0,n=4
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:234  
         4 003233   200060 236100                    LDQ     FIRMWARE_FOUND+2,,AUTO
         4 003234   000022 732000                    QRS     18
         4 003235   000006 736000                    QLS     6
         4 003236   100040 634506                    EPPR4   32,QL,PR1
         4 003237   200051 454500                    STP4    SOURCE$,,AUTO

     1949    10362    5      DCW$ = PINCRW (IS$, CALL_SEQ$ -> CALL_SEQUENCE.FDCWP) ;

  10362  4 003240   200007 471500                    LDP1    CALL_SEQ$,,AUTO
         4 003241   100000 220100                    LDX0    0,,PR1
         4 003242   000000 636010                    EAQ     0,X0
         4 003243   000000 036000 2                  ADLQ    FPTN_
         4 003244   200053 756100                    STQ     DCW$,,AUTO

     1950    10363    5      TARGET$ = PINCRW (IS$, DCW.ADDRESS) ;

  10363  4 003245   200053 475500                    LDP5    DCW$,,AUTO
         4 003246   500000 222100                    LDX2    0,,PR5
         4 003247   000000 636012                    EAQ     0,X2
         4 003250   000000 036000 2                  ADLQ    FPTN_
         4 003251   200052 756100                    STQ     TARGET$,,AUTO

     1951    10364    5      STATUS$ = PINCRW (IS$, CALL_SEQ$ -> CALL_SEQUENCE.STATUSP) ;

  10364  4 003252   100000 723100                    LXL3    0,,PR1
         4 003253   000000 636013                    EAQ     0,X3
         4 003254   000000 036000 2                  ADLQ    FPTN_
         4 003255   200054 756100                    STQ     STATUS$,,AUTO

     1952    10365           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:235  
     1953    10366           /* calculate the number of sectors to move from the DCW */
     1954    10367    5      IF MOD (DCW.WORD_COUNT, 64) = 0

  10367  4 003256   500000 236100                    LDQ     0,,PR5
         4 003257   007777 376007                    ANQ     4095,DL
         4 003260   000077 376007                    ANQ     63,DL
         4 003261   003364 601000 4                  TNZ     s:10392

     1955    10368    6      THEN DO ;

     1956    10369    6              SECTORS_REQUESTED = DCW.WORD_COUNT / 64 ;

  10369  4 003262   500000 236100                    LDQ     0,,PR5
         4 003263   007777 376007                    ANQ     4095,DL
         4 003264   000006 772000                    QRL     6
         4 003265   200050 756100                    STQ     SECTORS_REQUESTED,,AUTO

     1957    10370    6              IF FIRST_SECTOR + (SECTORS_REQUESTED - 1) < SEG$ -> TOM$SEG.LAST_SECTOR

  10370  4 003266   000100 100500                    MLR     fill='000'O
         4 003267   300000 000002                    ADSC9   0,,PR3                   cn=0,n=2
         4 003270   200060 000004                    ADSC9   FIRMWARE_FOUND+2,,AUTO   cn=0,n=4
         4 003271   200060 236100                    LDQ     FIRMWARE_FOUND+2,,AUTO
         4 003272   000022 732000                    QRS     18
         4 003273   200050 036100                    ADLQ    SECTORS_REQUESTED,,AUTO
         4 003274   000000 476500                    LDP6    0,,PR0
         4 003275   003301 604000 4                  TMI     s:10372
         4 003276   600037 116100                    CMPQ    31,,PR6
         4 003277   003301 600000 4                  TZE     s:10372
         4 003300   003306 603000 4                  TRC     s:10376

     1958    10371    7              THEN DO ;

     1959    10372    7                      SECTOR_COUNT = SECTORS_REQUESTED ;

  10372  4 003301   200050 235100                    LDA     SECTORS_REQUESTED,,AUTO
         4 003302   200047 755100                    STA     SECTOR_COUNT,,AUTO
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:236  

     1960    10373    7                      EOF = %FALSE ;

  10373  4 003303   200046 477500                    LDP7    @EOF,,AUTO
         4 003304   700000 450100                    STZ     0,,PR7

     1961    10374    7                   END /* THEN */ ;

  10374  4 003305   003323 710000 4                  TRA     s:10381

     1962    10375    7              ELSE DO ;

     1963    10376    7                      SECTOR_COUNT = SEG$->TOM$SEG.LAST_SECTOR - FIRST_SECTOR + 1;

  10376  4 003306   000100 100500                    MLR     fill='000'O
         4 003307   300000 000002                    ADSC9   0,,PR3                   cn=0,n=2
         4 003310   200060 000004                    ADSC9   FIRMWARE_FOUND+2,,AUTO   cn=0,n=4
         4 003311   200060 236100                    LDQ     FIRMWARE_FOUND+2,,AUTO
         4 003312   000022 732000                    QRS     18
         4 003313   200061 756100                    STQ     FIRMWARE_FOUND+3,,AUTO
         4 003314   600037 236100                    LDQ     31,,PR6
         4 003315   200061 136100                    SBLQ    FIRMWARE_FOUND+3,,AUTO
         4 003316   000001 036007                    ADLQ    1,DL
         4 003317   200047 756100                    STQ     SECTOR_COUNT,,AUTO

     1964    10377    7                      EOF = %TRUE ;

  10377  4 003320   400000 236003                    LDQ     -131072,DU
         4 003321   200046 476500                    LDP6    @EOF,,AUTO
         4 003322   600000 756100                    STQ     0,,PR6

     1965    10378    7                   END /* ELSE */ ;

     1966    10379
     1967    10380                   /* copy the data from buffer to test page and return word count */
     1968    10381    7              DO I = 0 TO SECTOR_COUNT - 1 ;

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:237  
  10381  4 003323   200055 450100                    STZ     I,,AUTO
         4 003324   003337 710000 4                  TRA     s:10383+3

     1969    10382    7                 TARGET$ -> DATA_SECTOR(I) = SOURCE$ -> DATA_SECTOR(I) ;

  10382  4 003325   200055 235100                    LDA     I,,AUTO
         4 003326   000010 735000                    ALS     8
         4 003327   200051 470500                    LDP0    SOURCE$,,AUTO
         4 003330   200052 471500                    LDP1    TARGET$,,AUTO
         4 003331   040105 100505                    MLR     fill='040'O
         4 003332   000000 000400                    ADSC9   0,A,PR0                  cn=0,n=256
         4 003333   100000 000400                    ADSC9   0,A,PR1                  cn=0,n=256

     1970    10383    7              END /* DO */ ;

  10383  4 003334   200055 236100                    LDQ     I,,AUTO
         4 003335   000001 036007                    ADLQ    1,DL
         4 003336   200055 756100                    STQ     I,,AUTO
         4 003337   200055 236100                    LDQ     I,,AUTO
         4 003340   200047 116100                    CMPQ    SECTOR_COUNT,,AUTO
         4 003341   003325 602000 4                  TNC     s:10382

     1971    10384    6              WORD_COUNT = SECTOR_COUNT * 64 ;

  10384  4 003342   200045 470500                    LDP0    @WORD_COUNT,,AUTO
         4 003343   200047 235100                    LDA     SECTOR_COUNT,,AUTO
         4 003344   000006 735000                    ALS     6
         4 003345   000000 755100                    STA     0,,PR0

     1972    10385
     1973    10386                   /* return status */
     1974    10387    6              STATUS.NEXT_ADDRESS = DCW.ADDRESS + WORD_COUNT ;

  10387  4 003346   200053 471500                    LDP1    DCW$,,AUTO
         4 003347   100000 236100                    LDQ     0,,PR1
         4 003350   000022 772000                    QRL     18
         4 003351   000000 036100                    ADLQ    0,,PR0
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:238  
         4 003352   000000 620006                    EAX0    0,QL
         4 003353   200054 473500                    LDP3    STATUS$,,AUTO
         4 003354   300000 740100                    STX0    0,,PR3

     1975    10388    6              STATUS.RESIDUE = DCW.WORD_COUNT - WORD_COUNT ;

  10388  4 003355   100000 236100                    LDQ     0,,PR1
         4 003356   007777 376007                    ANQ     4095,DL
         4 003357   000000 136100                    SBLQ    0,,PR0
         4 003360   000000 621006                    EAX1    0,QL
         4 003361   300000 441100                    SXL1    0,,PR3

     1976    10389    6              RETURN ;

  10389  4 003362   200042 221300                    LDX1  ! EOF+1,,AUTO
         4 003363   000001 702211                    TSX2  ! 1,X1

     1977    10390    6           END /* THEN */ ;
     1978    10391    6      ELSE DO ;

     1979    10392    6              TOM_ERROR_CODE.ERR# = %E$WDCNTNOT64 ;

  10392  4 003364   000043 236000 1                  LDQ     TOM_ERROR_CODE
         4 003365   000031 376000 5                  ANQ     25
         4 003366   002330 276007                    ORQ     1240,DL
         4 003367   000043 756000 1                  STQ     TOM_ERROR_CODE

     1980    10393    6              CALL TOX$ERROR (TOM_ERROR_CODE) ;

  10393  4 003370   000034 630400 5                  EPPR0   28
         4 003371   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 003372   000000 701000 xent               TSX1    TOX$ERROR
         4 003373   000000 011000                    NOP     0

     1981    10394    6           END /* ELSE */ ;

     1982    10395
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:239  
     1983    10396    5   END TOM$MOVE_SECTORS ;

  10396  4 003374   200042 221300                    LDX1  ! EOF+1,,AUTO
         4 003375   000001 702211                    TSX2  ! 1,X1

     1984    10397    4   END TOM$RETURN_DATA ;
     1985    10398    3   END TOM$SEEK_DECK ;
     1986    10399        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:240  
     1987    10400        /*I* NAME:         TOM$READ_DECK_KEY
     1988    10401             AUTHOR:       Scott S. Sheppard
     1989    10402             PURPOSE:      obtains the object key for the catalog entry
     1990    10403             INTERFACE:    M$READ
     1991    10404                           TOX$ERROR
     1992    10405                           TOX$SCREECH
     1993    10406             PARAMETERS:   None passed.
     1994    10407             DATA:         CATALOG_ENTRY_KEY - input
     1995    10408                           OBJECT_KEY - output
     1996    10409                           TOM_ERROR_CODE - output
     1997    10410             DESCRIPTION:  This  procedure  uses  the  catalog  entry key
     1998    10411                           constructed  by TOM$BUILD_CATALOG_ENTRY_KEY to
     1999    10412                           do  a M$READ  on the  CP-6 deckfile.  The data
     2000    10413                           returned  by  the  read  is  itself  a key, an
     2001    10414                           object key.  The object key can  be used later
     2002    10415                           to actually obtain the $object, binary, patch,
     2003    10416                           and $dkend cardsa  which actually comprise the
     2004    10417                           deck.
     2005    10418        */
     2006    10419        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:241  
     2007    10420    2   TOM$READ_DECK_KEY: PROC;

  10420  4 003376   200032 741300       TOM$READ_DE* STX1  ! SEQ$+1,,AUTO

     2008    10421
     2009    10422           %FPT_READ (FPTN = READ_OBJECT_KEY,
     2010    10423                      BUF = OBJECT_KEY,
     2011    10424                      DCB = M$DECKFILE,
     2012    10425                      KEY = CATALOG_ENTRY_KEY,
     2013    10426                      KEYS = YES,
     2014    10427                      WAIT = YES);
     2015    10466
     2016    10467        /* Code */
     2017    10468
     2018    10469    3      CALL M$READ (READ_OBJECT_KEY) WHENRETURN

  10469  4 003377   000156 630400 1                  EPPR0   READ_OBJECT_KEY
         4 003400   440000 713400                    CLIMB   alt,read
         4 003401   401400 401760                    pmme    nvectors=4
         4 003402   003422 702000 4                  TSX2    s:10480

     2019    10470    4           DO ;

     2020    10471    4              IF OBJECT_KEY.SIZE = 23

  10471  4 003403   000054 236000 1                  LDQ     OBJECT_KEY
         4 003404   777000 376003                    ANQ     -512,DU
         4 003405   027000 116003                    CMPQ    11776,DU
         4 003406   003411 601000 4                  TNZ     s:10474

     2021    10472    4              THEN RETURN ;

  10472  4 003407   200032 221300                    LDX1  ! SEQ$+1,,AUTO
         4 003410   000001 702211                    TSX2  ! 1,X1

     2022    10473    5              ELSE DO ;

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:242  
     2023    10474    5                      TOM_ERROR_CODE.ERR# = %E$ILLOBJKEY ;

  10474  4 003411   000043 236000 1                  LDQ     TOM_ERROR_CODE
         4 003412   000031 376000 5                  ANQ     25
         4 003413   002260 276007                    ORQ     1200,DL
         4 003414   000043 756000 1                  STQ     TOM_ERROR_CODE

     2024    10475    5                      CALL TOX$SCREECH (TOM_ERROR_CODE) ;

  10475  4 003415   000034 630400 5                  EPPR0   28
         4 003416   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 003417   000000 701000 xent               TSX1    TOX$SCREECH
         4 003420   000000 011000                    NOP     0

     2025    10476    5                   END /* ELSE */ ;

     2026    10477    4           END /* WHENRETURN */ ;

  10477  4 003421   003432 710000 4                  TRA     s:10484

     2027    10478    3      WHENALTRETURN
     2028    10479    4           DO ;

     2029    10480    4              TOM_ERROR_CODE.ERR# = %E$OBJREAD ;

  10480  4 003422   000043 236000 1                  LDQ     TOM_ERROR_CODE
         4 003423   000031 376000 5                  ANQ     25
         4 003424   002270 276007                    ORQ     1208,DL
         4 003425   000043 756000 1                  STQ     TOM_ERROR_CODE

     2030    10481    4              CALL TOX$ERROR (TOM_ERROR_CODE) ;

  10481  4 003426   000034 630400 5                  EPPR0   28
         4 003427   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 003430   000000 701000 xent               TSX1    TOX$ERROR
         4 003431   000000 011000                    NOP     0

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:243  
     2031    10482    4           END /* WHENALTRETURN */ ;

     2032    10483
     2033    10484    3   END TOM$READ_DECK_KEY;

  10484  4 003432   200032 221300                    LDX1  ! SEQ$+1,,AUTO
         4 003433   000001 702211                    TSX2  ! 1,X1

     2034    10485        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:244  
     2035    10486        /*I* NAME:         TOM$READ_DECK
     2036    10487             AUTHOR:       Scott S. Sheppard
     2037    10488             PURPOSE:      obtains deck from the deckfile
     2038    10489             INTERFACE:    TOL$GET_DECK
     2039    10490                           TOL$GET_NIO_DECK
     2040    10491             PARAMETERS:   TCX - test control index (input)
     2041    10492                           CALL_SEQ$ - address of call sequence (input)
     2042    10493                           X2 - maximum load address (input)
     2043    10494                           X3 - test page base (input)
     2044    10495                           A - load size in words (output)
     2045    10496             DATA:         LOAD_SIZE - input
     2046    10497                           READ_ERROR_CODE - output
     2047    10498                           OBJECT_KEY - input
     2048    10499                           CALL_SEQUENCE - input
     2049    10500                           TOP$TCP.TEST_TYPE(TCX) - input
     2050    10501             DESCRIPTION:  This  procedure reads the  deck image from the
     2051    10502                           deckfile  and places it  in the user's buffer.
     2052    10503                           The  error code  is set  up, and  the count of
     2053    10504                           words read.
     2054    10505                            - the read error code and count of words read
     2055    10506                           are cleared
     2056    10507                            - TOL$GET_DECK is called to read the deck in,
     2057    10508                           using  the  object  key  built  previusly, the
     2058    10509                           user's call sequence, and load size
     2059    10510                            - the number of words read is saved in A
     2060    10511        */
     2061    10512        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:245  
     2062    10513    2   TOM$READ_DECK: PROC (TCX, CALL_SEQ$, X2, X3, A) ;

  10513  4 003434   200032 741300       TOM$READ_DE* STX1  ! SEQ$+1,,AUTO

     2063    10514
     2064    10515    3      DCL TCX       UBIN WORD ALIGNED ;
     2065    10516    3      DCL CALL_SEQ$ PTR ALIGNED ;
     2066    10517    3      DCL X2        UBIN HALF HALIGNED ;
     2067    10518    3      DCL X3        UBIN HALF HALIGNED ;
     2068    10519    3      DCL A         UBIN WORD ALIGNED ;
     2069    10520
     2070    10521        /* Code */
     2071    10522
     2072    10523           /* initialize the values */
     2073    10524    3      LOAD_SIZE = 0;

  10524  4 003435   000012 450000 1                  STZ     LOAD_SIZE

     2074    10525    3      READ_ERROR_CODE = 0;

  10525  4 003436   000042 450000 1                  STZ     READ_ERROR_CODE

     2075    10526
     2076    10527           /* get the object deck from the deckfile */
     2077    10528    4      DO SELECT (TOP$TCP.TEST_TYPE(TCX)) ;

  10528  4 003437   200033 470500                    LDP0    @TCX,,AUTO
         4 003440   000000 236100                    LDQ     0,,PR0
         4 003441   000122 402007                    MPY     82,DL
         4 003442   000000 620006                    EAX0    0,QL
         4 003443   000003 736000                    QLS     3
         4 003444   000003 471400 xsym               LDP1    TOT$DMC+3
         4 003445   040000 106506                    CMPC    fill='040'O
         4 003446   100002 000003                    ADSC9   2,Q,PR1                  cn=0,n=3
         4 003447   000014 000003 2                  ADSC9   SELECT_MSG+11            cn=0,n=3
         4 003450   003505 602000 4                  TNC     s:10537
         4 003451   000000 635010                    EAA     0,X0
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:246  
         4 003452   000021 771000                    ARL     17
         4 003453   100002 236105                    LDQ     2,AL,PR1
         4 003454   000014 676000 2                  ERQ     SELECT_MSG+11
         4 003455   000016 376000 5                  ANQ     14
         4 003456   003466 600000 4                  TZE     s:10530
         4 003457   000000 635010                    EAA     0,X0
         4 003460   000021 771000                    ARL     17
         4 003461   100002 236105                    LDQ     2,AL,PR1
         4 003462   000015 676000 2                  ERQ     SELECT_MSG+12
         4 003463   000016 376000 5                  ANQ     14
         4 003464   003505 601000 4                  TNZ     s:10537
         4 003465   003466 710000 4                  TRA     s:10530

     2078    10529    4         SELECT ('NIO', 'RPM') ;

     2079    10530    4         CALL TOL$GET_NIO_DECK (OBJECT_KEY,

  10530  4 003466   200034 473500                    LDP3    @CALL_SEQ$,,AUTO
         4 003467   300000 474500                    LDP4    0,,PR3
         4 003470   000012 237000 5                  LDAQ    10
         4 003471   200064 757100                    STAQ    FIRMWARE_FOUND+6,,AUTO
         4 003472   200035 236100                    LDQ     @X2,,AUTO
         4 003473   200063 756100                    STQ     FIRMWARE_FOUND+5,,AUTO
         4 003474   200062 454500                    STP4    FIRMWARE_FOUND+4,,AUTO
         4 003475   200036 236100                    LDQ     @X3,,AUTO
         4 003476   000064 235000 5                  LDA     52
         4 003477   200060 757100                    STAQ    FIRMWARE_FOUND+2,,AUTO
         4 003500   200060 630500                    EPPR0   FIRMWARE_FOUND+2,,AUTO
         4 003501   000024 631400 xsym               EPPR1   B_VECTNIL+20
         4 003502   000000 701000 xent               TSX1    TOL$GET_NIO_DECK
         4 003503   000000 011000                    NOP     0
         4 003504   003523 710000 4                  TRA     s:10546

     2080    10531    4                 X3,
     2081    10532    4                 CALL_SEQ$ -> CALL_SEQUENCE,
     2082    10533    4                 X2,
     2083    10534    4                 LOAD_SIZE,
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:247  
     2084    10535    4                 READ_ERROR_CODE,);
     2085    10536    4         SELECT (ELSE);

     2086    10537    4      CALL TOL$GET_DECK (OBJECT_KEY,

  10537  4 003505   200034 473500                    LDP3    @CALL_SEQ$,,AUTO
         4 003506   300000 474500                    LDP4    0,,PR3
         4 003507   000012 237000 5                  LDAQ    10
         4 003510   200064 757100                    STAQ    FIRMWARE_FOUND+6,,AUTO
         4 003511   200035 236100                    LDQ     @X2,,AUTO
         4 003512   200063 756100                    STQ     FIRMWARE_FOUND+5,,AUTO
         4 003513   200062 454500                    STP4    FIRMWARE_FOUND+4,,AUTO
         4 003514   200036 236100                    LDQ     @X3,,AUTO
         4 003515   000064 235000 5                  LDA     52
         4 003516   200060 757100                    STAQ    FIRMWARE_FOUND+2,,AUTO
         4 003517   200060 630500                    EPPR0   FIRMWARE_FOUND+2,,AUTO
         4 003520   000024 631400 xsym               EPPR1   B_VECTNIL+20
         4 003521   000000 701000 xent               TSX1    TOL$GET_DECK
         4 003522   000000 011000                    NOP     0

     2087    10538    4              X3,
     2088    10539    4              CALL_SEQ$ -> CALL_SEQUENCE,
     2089    10540    4              X2,
     2090    10541    4              LOAD_SIZE,
     2091    10542    4              READ_ERROR_CODE,);
     2092    10543    4      END /* DO SELECT */ ;

     2093    10544
     2094    10545           /* Save word count for user */
     2095    10546    3      A = LOAD_SIZE;

  10546  4 003523   200037 470500                    LDP0    @A,,AUTO
         4 003524   000012 235000 1                  LDA     LOAD_SIZE
         4 003525   000000 755100                    STA     0,,PR0

     2096    10547    3      RETURN;

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:248  
  10547  4 003526   200032 221300                    LDX1  ! SEQ$+1,,AUTO
         4 003527   000001 702211                    TSX2  ! 1,X1

     2097    10548
     2098    10549    3   END TOM$READ_DECK;
     2099    10550    2   END TOM$MME_DATADT ;
     2100    10551        %EJECT;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:249  
     2101    10552        /*I* NAME:         TOM$MATCH_ICC
     2102    10553             PURPOSE:      locate TEST CONTROL entry in TCP
     2103    10554             INTERFACE:    TOX$SCREECH
     2104    10555             INPUT:        Q - IOM, Channel Number
     2105    10556             OUTPUT:       TCX - index into TOP$TCP
     2106    10557             DESCRIPTION:  This procedure locates information from the
     2107    10558                           test control list by searching the list for
     2108    10559                           a matching  Iom number Channel number  from
     2109    10560                           the Q register.   The procedure returns the
     2110    10561                           index into the list of test information.
     2111    10562        */
     2112    10563
     2113    10564    1   TOM$MATCH_ICC: PROC (Q, TCX) ;

  10564  4 003530   200022 741300       TOM$MATCH_I* STX1  ! @A,,AUTO

     2114    10565
     2115    10566    2      DCL 1 Q ALIGNED,
     2116    10567    2            2 *                      BIT (6) UNAL,
     2117    10568    2            2 FORMAT#                BIT (1) UNAL,
     2118    10569    2            2 NEW_FORMAT,
     2119    10570    2              3 IOM#                 UBIN (3) UNAL,
     2120    10571    2              3 CHAN#                UBIN (8) UNAL,
     2121    10572    2            2 OLD_FORMAT REDEF NEW_FORMAT,
     2122    10573    2              3 IOM#                 UBIN (5) UNAL,
     2123    10574    2              3 CHAN#                UBIN (6) UNAL,
     2124    10575    2            2 *                      BIT (18) UNAL ;
     2125    10576    2      DCL TCX                        UBIN WORD ALIGNED ;
     2126    10577    2      DCL I                          UBIN WORD ALIGNED ;
     2127    10578    2      DCL 1 ICC ALIGNED,
     2128    10579    2            2 IOM#                   UBIN (3) UNAL,
     2129    10580    2            2 CHAN#                  UBIN (8) UNAL ;
     2130    10581    2      DCL ICC_ REDEF ICC UBIN (11) ALIGNED ;
     2131    10582           %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:250  
     2132    10583        /* Code */
     2133    10584
     2134    10585           /* set up the IOM and CHANNEL number for the search */
     2135    10586    2      IF Q.FORMAT#

  10586  4 003531   200023 470500                    LDP0    @Q,,AUTO
         4 003532   000000 236100                    LDQ     0,,PR0
         4 003533   004000 316003                    CANQ    2048,DU
         4 003534   003547 600000 4                  TZE     s:10592

     2136    10587    3      THEN DO ;

     2137    10588    3              ICC.IOM# = Q.NEW_FORMAT.IOM# ;

  10588  4 003535   000007 736000                    QLS     7
         4 003536   200026 676100                    ERQ     ICC,,AUTO
         4 003537   700000 376003                    ANQ     -32768,DU
         4 003540   200026 656100                    ERSQ    ICC,,AUTO

     2138    10589    3              ICC.CHAN# = Q.NEW_FORMAT.CHAN# ;

  10589  4 003541   000000 236100                    LDQ     0,,PR0
         4 003542   000007 736000                    QLS     7
         4 003543   200026 676100                    ERQ     ICC,,AUTO
         4 003544   077600 376003                    ANQ     32640,DU
         4 003545   200026 656100                    ERSQ    ICC,,AUTO

     2139    10590    3           END /* THEN */ ;

  10590  4 003546   003561 710000 4                  TRA     s:10597

     2140    10591    3      ELSE DO ;

     2141    10592    3              ICC.IOM# = Q.OLD_FORMAT.IOM# ;

  10592  4 003547   000011 736000                    QLS     9
         4 003550   200026 676100                    ERQ     ICC,,AUTO
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:251  
         4 003551   700000 376003                    ANQ     -32768,DU
         4 003552   200026 656100                    ERSQ    ICC,,AUTO

     2142    10593    3              ICC.CHAN# = Q.OLD_FORMAT.CHAN# ;

  10593  4 003553   000000 236100                    LDQ     0,,PR0
         4 003554   000077 376003                    ANQ     63,DU
         4 003555   000007 736000                    QLS     7
         4 003556   200026 676100                    ERQ     ICC,,AUTO
         4 003557   077600 376003                    ANQ     32640,DU
         4 003560   200026 656100                    ERSQ    ICC,,AUTO

     2143    10594    3           END /* ELSE */ ;

     2144    10595
     2145    10596           /* start with first test page (zeroeth entry) and proceed */
     2146    10597    3      DO I = 0 TO 7 ;

  10597  4 003561   200025 450100                    STZ     I,,AUTO

     2147    10598    3         IF TOP$TCP.ICC.ICC#(I) = ICC_

  10598  4 003562   200026 236100                    LDQ     ICC,,AUTO
         4 003563   000031 772000                    QRL     25
         4 003564   200060 756100                    STQ     FIRMWARE_FOUND+2,,AUTO
         4 003565   200025 236100                    LDQ     I,,AUTO
         4 003566   000244 402007                    MPY     164,DL
         4 003567   000003 470400 xsym               LDP0    TOT$DMC+3
         4 003570   000001 236106                    LDQ     1,QL,PR0
         4 003571   000025 772000                    QRL     21
         4 003572   003777 376007                    ANQ     2047,DL
         4 003573   200060 116100                    CMPQ    FIRMWARE_FOUND+2,,AUTO
         4 003574   003602 601000 4                  TNZ     s:10604

     2148    10599    4         THEN DO ;

     2149    10600    4                 TCX = I ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:252  

  10600  4 003575   200024 471500                    LDP1    @TCX,,AUTO
         4 003576   200025 235100                    LDA     I,,AUTO
         4 003577   100000 755100                    STA     0,,PR1

     2150    10601    4                 RETURN ;

  10601  4 003600   200022 221300                    LDX1  ! @A,,AUTO
         4 003601   000001 702211                    TSX2  ! 1,X1

     2151    10602    4              END /* THEN */ ;
     2152    10603    3         ELSE /* Do Nothing */ ;
     2153    10604    3      END /* DO */ ;

  10604  4 003602   200025 235100                    LDA     I,,AUTO
         4 003603   000001 035007                    ADLA    1,DL
         4 003604   200025 755100                    STA     I,,AUTO
         4 003605   000010 115007                    CMPA    8,DL
         4 003606   003562 602000 4                  TNC     s:10598

     2154    10605
     2155    10606           /* the IOM/CHANNEL number was not in the table */
     2156    10607    2      TOM_ERROR_CODE.ERR# = %E$INVICC ;

  10607  4 003607   000043 236000 1                  LDQ     TOM_ERROR_CODE
         4 003610   000031 376000 5                  ANQ     25
         4 003611   002230 276007                    ORQ     1176,DL
         4 003612   000043 756000 1                  STQ     TOM_ERROR_CODE

     2157    10608    2      CALL TOX$SCREECH (TOM_ERROR_CODE) ;

  10608  4 003613   000034 630400 5                  EPPR0   28
         4 003614   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 003615   000000 701000 xent               TSX1    TOX$SCREECH
         4 003616   000000 011000                    NOP     0

     2158    10609
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:253  
     2159    10610    2   END TOM$MATCH_ICC ;

  10610  4 003617   200022 221300                    LDX1  ! @A,,AUTO
         4 003620   000001 702211                    TSX2  ! 1,X1

     2160    10611        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:254  
     2161    10612        /*I*  NAME:        TOM$GET_DATA_SEGMENT
     2162    10613              AUTHOR:      Scott S. Sheppard
     2163    10614              PURPOSE:     Gets Dynamic Memory Space
     2164    10615              INTERFACE:   M$GDS Monitor Service
     2165    10616                           TOX$ERROR
     2166    10617              PARAMETERS:  WORD_COUNT   - number of words needed
     2167    10618                           WORD_VECTOR  - vector to the set of words
     2168    10619              DESCRIPTION: This procedure gets a set of dynamic words to be
     2169    10620                           used as data area.
     2170    10621        */
     2171    10622
     2172    10623    1   TOM$GET_DATA_SEGMENT: PROC (WORD_COUNT, WORD_VECTOR) ;

  10623  4 003621   200050 741300       TOM$GET_DAT* STX1  ! SECTORS_REQUESTED,,AUTO

     2173    10624
     2174    10625    2      DCL WORD_COUNT     UBIN WORD ALIGNED ;
     2175    10626    2      DCL WORD_VECTOR    BIT (72) DALIGNED ;
     2176    10627           %FPT_GDS (FPTN    = GET_BUFFER,
     2177    10628                     FREE    = YES) ;
     2178    10644
     2179    10645        /* Code */
     2180    10646
     2181    10647    2      GET_BUFFER.V.SEGSIZE# = WORD_COUNT ;

  10647  4 003622   200051 470500                    LDP0    @WORD_COUNT,,AUTO
         4 003623   000000 720100                    LXL0    0,,PR0
         4 003624   000200 440000 1                  SXL0    GET_BUFFER+4

     2182    10648    2      GET_BUFFER.RESULTS_ = VECTOR (WORD_VECTOR) ;

  10648  4 003625   000022 235000 5                  LDA     18
         4 003626   200052 236100                    LDQ     @WORD_VECTOR,,AUTO
         4 003627   000176 757000 1                  STAQ    GET_BUFFER+2

     2183    10649    2      CALL M$GDS (GET_BUFFER) ALTRET (GET_ERROR) ;

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:255  
  10649  4 003630   000174 630400 1                  EPPR0   GET_BUFFER
         4 003631   430001 713400                    CLIMB   alt,gds
         4 003632   400400 401760                    pmme    nvectors=2
         4 003633   003636 702000 4                  TSX2    GET_ERROR

     2184    10650    2      RETURN ;

  10650  4 003634   200050 221300                    LDX1  ! SECTORS_REQUESTED,,AUTO
         4 003635   000001 702211                    TSX2  ! 1,X1

     2185    10651
     2186    10652    2   GET_ERROR:
     2187    10653    2      CALL TOX$ERROR (B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR) ;

  10653  4 003636   000000 470400 xsym  GET_ERROR    LDP0    B$TCB$
         4 003637   000000 471500                    LDP1    0,,PR0
         4 003640   100102 633500                    EPPR3   66,,PR1
         4 003641   200060 453500                    STP3    FIRMWARE_FOUND+2,,AUTO
         4 003642   200060 630500                    EPPR0   FIRMWARE_FOUND+2,,AUTO
         4 003643   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 003644   000000 701000 xent               TSX1    TOX$ERROR
         4 003645   000000 011000                    NOP     0

     2188    10654
     2189    10655    2   END TOM$GET_DATA_SEGMENT ;

  10655  4 003646   200050 221300                    LDX1  ! SECTORS_REQUESTED,,AUTO
         4 003647   000001 702211                    TSX2  ! 1,X1

     2190    10656        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:256  
     2191    10657        /*I*  NAME:        TOM$FREE_DATA_SEGMENT
     2192    10658              AUTHOR:      Scott S. Sheppard
     2193    10659              PURPOSE:     Frees Dynamic Memory Space
     2194    10660              INTERFACE:   M$FDS Monitor Service
     2195    10661                           TOX$ERROR
     2196    10662              PARAMETERS:  WORD_COUNT   - number of words in segment
     2197    10663                           WORD_VECTOR  - vector to the set of words
     2198    10664              DESCRIPTION: This procedure frees a set of dynamic words
     2199    10665                           that are no longer needed as data space.
     2200    10666        */
     2201    10667
     2202    10668    1   TOM$FREE_DATA_SEGMENT: PROC (WORD_COUNT, WORD_VECTOR) ;

  10668  4 003650   200036 741300       TOM$FREE_DA* STX1  ! @X3,,AUTO

     2203    10669
     2204    10670    2      DCL WORD_COUNT     UBIN WORD ALIGNED ;
     2205    10671    2      DCL WORD_VECTOR    BIT (72) DALIGNED ;
     2206    10672           %FPT_FDS (FPTN    = FREE_BUFFER) ;
     2207    10687
     2208    10688        /* Code */
     2209    10689
     2210    10690    2      FREE_BUFFER.V.SEGSIZE# = WORD_COUNT ;

  10690  4 003651   200037 470500                    LDP0    @WORD_COUNT,,AUTO
         4 003652   000000 720100                    LXL0    0,,PR0
         4 003653   000206 440000 1                  SXL0    FREE_BUFFER+4

     2211    10691    2      FREE_BUFFER.RESULTS_ = VECTOR (WORD_VECTOR) ;

  10691  4 003654   000022 235000 5                  LDA     18
         4 003655   200040 236100                    LDQ     @WORD_VECTOR,,AUTO
         4 003656   000204 757000 1                  STAQ    FREE_BUFFER+2

     2212    10692    2      CALL M$FDS (FREE_BUFFER) ALTRET (FREE_ERROR) ;

  10692  4 003657   000202 630400 1                  EPPR0   FREE_BUFFER
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:257  
         4 003660   430002 713400                    CLIMB   alt,fds
         4 003661   400400 401760                    pmme    nvectors=2
         4 003662   003665 702000 4                  TSX2    FREE_ERROR

     2213    10693    2      RETURN ;

  10693  4 003663   200036 221300                    LDX1  ! @X3,,AUTO
         4 003664   000001 702211                    TSX2  ! 1,X1

     2214    10694
     2215    10695    2   FREE_ERROR:
     2216    10696    2      CALL TOX$ERROR (B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR) ;

  10696  4 003665   000000 470400 xsym  FREE_ERROR   LDP0    B$TCB$
         4 003666   000000 471500                    LDP1    0,,PR0
         4 003667   100102 633500                    EPPR3   66,,PR1
         4 003670   200060 453500                    STP3    FIRMWARE_FOUND+2,,AUTO
         4 003671   200060 630500                    EPPR0   FIRMWARE_FOUND+2,,AUTO
         4 003672   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 003673   000000 701000 xent               TSX1    TOX$ERROR
         4 003674   000000 011000                    NOP     0

     2217    10697
     2218    10698    2   END TOM$FREE_DATA_SEGMENT ;

  10698  4 003675   200036 221300                    LDX1  ! @X3,,AUTO
         4 003676   000001 702211                    TSX2  ! 1,X1

     2219    10699        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:258  
     2220    10700        /*I* NAME:         TOM$SET_RETURN_VALUES
     2221    10701             AUTHOR:       Scott S. Sheppard
     2222    10702             PURPOSE:      returns data to caller from MME CATADT / DATADT
     2223    10703             INTERFACE:    None called.
     2224    10704             PARAMETERS:   RETURN_DELTA - output
     2225    10705                           Q - output
     2226    10706             DATA:         READ_ERROR_CODE - input / output
     2227    10707             DESCRIPTION:  This  procedure sets up  the return values for
     2228    10708                           MME CATADT. These values are based on the read
     2229    10709                           error  code  returned  by  the loader when the
     2230    10710                           catalog was read from the deckfile.
     2231    10711        */
     2232    10712
     2233    10713    1   TOM$SET_RETURN_VALUES: PROC (Q, RETURN_DELTA) ;

  10713  4 003677   200022 741300       TOM$SET_RET* STX1  ! @A,,AUTO

     2234    10714
     2235    10715    2      DCL Q            UBIN WORD ALIGNED ;
     2236    10716    2      DCL RETURN_DELTA SBIN HALF HALIGNED ;
     2237    10717
     2238    10718        /* Code */
     2239    10719
     2240    10720    3      DO CASE (READ_ERR_CODE.CODE) ;

  10720  4 003700   000042 720000 1                  LXL0    READ_ERROR_CODE
         4 003701   000777 360003                    ANX0    511,DU
         4 003702   000053 100003                    CMPX0   43,DU
         4 003703   003705 602010 4                  TNC     s:10720+5,X0
         4 003704   003773 710000 4                  TRA     s:10727
         4 003705   003760 710000 4                  TRA     s:10722
         4 003706   003773 710000 4                  TRA     s:10727
         4 003707   003773 710000 4                  TRA     s:10727
         4 003710   003773 710000 4                  TRA     s:10727
         4 003711   003773 710000 4                  TRA     s:10727
         4 003712   003773 710000 4                  TRA     s:10727
         4 003713   003773 710000 4                  TRA     s:10727
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:259  
         4 003714   003773 710000 4                  TRA     s:10727
         4 003715   003773 710000 4                  TRA     s:10727
         4 003716   003773 710000 4                  TRA     s:10727
         4 003717   003773 710000 4                  TRA     s:10727
         4 003720   003773 710000 4                  TRA     s:10727
         4 003721   003773 710000 4                  TRA     s:10727
         4 003722   003773 710000 4                  TRA     s:10727
         4 003723   003773 710000 4                  TRA     s:10727
         4 003724   003773 710000 4                  TRA     s:10727
         4 003725   003773 710000 4                  TRA     s:10727
         4 003726   003773 710000 4                  TRA     s:10727
         4 003727   003773 710000 4                  TRA     s:10727
         4 003730   003773 710000 4                  TRA     s:10727
         4 003731   003773 710000 4                  TRA     s:10727
         4 003732   003773 710000 4                  TRA     s:10727
         4 003733   003773 710000 4                  TRA     s:10727
         4 003734   003773 710000 4                  TRA     s:10727
         4 003735   003773 710000 4                  TRA     s:10727
         4 003736   003773 710000 4                  TRA     s:10727
         4 003737   003773 710000 4                  TRA     s:10727
         4 003740   003773 710000 4                  TRA     s:10727
         4 003741   003773 710000 4                  TRA     s:10727
         4 003742   003773 710000 4                  TRA     s:10727
         4 003743   003773 710000 4                  TRA     s:10727
         4 003744   003773 710000 4                  TRA     s:10727
         4 003745   003773 710000 4                  TRA     s:10727
         4 003746   003773 710000 4                  TRA     s:10727
         4 003747   003773 710000 4                  TRA     s:10727
         4 003750   003773 710000 4                  TRA     s:10727
         4 003751   003773 710000 4                  TRA     s:10727
         4 003752   003773 710000 4                  TRA     s:10727
         4 003753   003773 710000 4                  TRA     s:10727
         4 003754   003773 710000 4                  TRA     s:10727
         4 003755   003773 710000 4                  TRA     s:10727
         4 003756   003773 710000 4                  TRA     s:10727
         4 003757   003765 710000 4                  TRA     s:10724

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:260  
     2241    10721    3         CASE (0) ;

     2242    10722    3            RETURN_DELTA = 3 ;

  10722  4 003760   200024 470500                    LDP0    @RETURN_DELTA,,AUTO
         4 003761   000100 101400                    MRL     fill='000'O
         4 003762   000005 000004 xsym               ADSC9   B_VECTNIL+5              cn=0,n=4
         4 003763   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         4 003764   003777 710000 4                  TRA     s:10729

     2243    10723    3         CASE (42) ;

     2244    10724    3            READ_ERROR_CODE = 0 ;

  10724  4 003765   000042 450000 1                  STZ     READ_ERROR_CODE

     2245    10725    3            RETURN_DELTA = 2 ;

  10725  4 003766   200024 470500                    LDP0    @RETURN_DELTA,,AUTO
         4 003767   000100 101400                    MRL     fill='000'O
         4 003770   000004 000004 xsym               ADSC9   B_VECTNIL+4              cn=0,n=4
         4 003771   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         4 003772   003777 710000 4                  TRA     s:10729

     2246    10726    3         CASE (ELSE) ;

     2247    10727    3            RETURN_DELTA = 1 ;

  10727  4 003773   200024 470500                    LDP0    @RETURN_DELTA,,AUTO
         4 003774   000100 101400                    MRL     fill='000'O
         4 003775   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         4 003776   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

     2248    10728    3      END /* CASE */ ;

     2249    10729    2      Q = READ_ERROR_CODE ;

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:261  
  10729  4 003777   200023 471500                    LDP1    @Q,,AUTO
         4 004000   000042 235000 1                  LDA     READ_ERROR_CODE
         4 004001   100000 755100                    STA     0,,PR1

     2250    10730    2      RETURN ;

  10730  4 004002   200022 221300                    LDX1  ! @A,,AUTO
         4 004003   000001 702211                    TSX2  ! 1,X1

     2251    10731
     2252    10732    2   END TOM$SET_RETURN_VALUES ;
     2253    10733        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:262  
     2254    10734        /*I* NAME:         TOM$MME_FREEZE
     2255    10735             AUTHOR:       Scott S. Sheppard
     2256    10736             PURPOSE:      Handles MME FREEZE
     2257    10737             INTERFACE:    None called.
     2258    10738             PARAMETERS:   RETURN_DELTA - output
     2259    10739             DATA:         No external data accessed.
     2260    10740             DESCRIPTION:  This  procedure merely sets  RETURN DELTA to 1
     2261    10741                           (for a normal return)  since MME FREEZE is not
     2262    10742                           needed, but legal, for CP-6 TOLTS.
     2263    10743        */
     2264    10744
     2265    10745    1   TOM$MME_FREEZE: PROC (RETURN_DELTA) ;

  10745  4 004004   200010 741300       TOM$MME_FRE* STX1  ! CALL_SEQ$+1,,AUTO

     2266    10746
     2267    10747    2      DCL RETURN_DELTA SBIN HALF HALIGNED ;
     2268    10748
     2269    10749        /* Code */
     2270    10750
     2271    10751    2      RETURN_DELTA = 1 ;

  10751  4 004005   200011 470500                    LDP0    @RETURN_DELTA,,AUTO
         4 004006   000100 101400                    MRL     fill='000'O
         4 004007   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         4 004010   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

     2272    10752    2      RETURN ;

  10752  4 004011   200010 221300                    LDX1  ! CALL_SEQ$+1,,AUTO
         4 004012   000001 702211                    TSX2  ! 1,X1

     2273    10753
     2274    10754    2   END TOM$MME_FREEZE ;
     2275    10755        %EJECT ;
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:263  
     2276    10756        /*I* NAME:         TOM$MME_UNFREZ
     2277    10757             AUTHOR:       Scott S. Sheppard
     2278    10758             PURPOSE:      Handles MME UNFREZ
     2279    10759             INTERFACE:    None called.
     2280    10760             PARAMETERS:   RETURN_DELTA - output
     2281    10761             DATA:         No external data accessed.
     2282    10762             DESCRIPTION:  This  procedure merely sets  RETURN DELTA to 1
     2283    10763                           (for a normal return)  since MME UNFREZ is not
     2284    10764                           needed, but legal, for CP-6 TOLTS.
     2285    10765        */
     2286    10766
     2287    10767    1   TOM$MME_UNFREZ: PROC (RETURN_DELTA) ;

  10767  4 004013   200010 741300       TOM$MME_UNF* STX1  ! CALL_SEQ$+1,,AUTO

     2288    10768
     2289    10769    2      DCL RETURN_DELTA SBIN HALF HALIGNED ;
     2290    10770
     2291    10771        /* Code */
     2292    10772
     2293    10773    2      RETURN_DELTA = 1 ;

  10773  4 004014   200011 470500                    LDP0    @RETURN_DELTA,,AUTO
         4 004015   000100 101400                    MRL     fill='000'O
         4 004016   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         4 004017   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

     2294    10774    2      RETURN ;

  10774  4 004020   200010 221300                    LDX1  ! CALL_SEQ$+1,,AUTO
         4 004021   000001 702211                    TSX2  ! 1,X1

DATA_IN$
 Sect OctLoc
   1     000   000054 006000                                                    .,..

DATA_OUT$
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:264  
 Sect OctLoc
   1     001   000020 006000                                                    ....

DATA_LENGTH_IN
 Sect OctLoc
   1     004   000000 000006                                                    ....

DATA_LENGTH_OUT
 Sect OctLoc
   1     005   000000 000004                                                    ....

START_LOAD$
 Sect OctLoc
   1     013   000014 006000                                                    ....

LOAD
 Sect OctLoc
   1     014   3***** ******                                                    ....

MY_CALL_SEQUENCE
 Sect OctLoc
   1     024   000000 000000   000000 000000   000000 000000   000000 000000    ................
   1     030   000000 000000   000000 000000   000000 000000                    ............

STATUS_I$
 Sect OctLoc
   1     033   000036 006000                                                    ....

(unnamed)
 Sect OctLoc
   1     034   000040 006000                                                    . ..

TOM_ERROR_CODE
 Sect OctLoc
   1     043   241715 000000                                                    ....

CATALOG_KEY
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:265  
 Sect OctLoc
   1     044   027*** ******   ****** ******   ****** ******   ****** ******    ................
   1     050   ****** ******   ****** ******                                    ........

CATALOG_ENTRY_KEY
 Sect OctLoc
   1     052   004*** ******   ****** ******                                    ........

OBJECT_KEY
 Sect OctLoc
   1     054   ****** ******   ****** ******   ****** ******   ****** ******    ................

DECK_TYPE
 Sect OctLoc
   1     062   104*** ******                                                    D...

MASTER_KEY
 Sect OctLoc
   1     063   016115 101123   124105 122137   103101 124101   114117 107***    .MASTER_CATALOG.

MASTER_ENTRY_KEY
 Sect OctLoc
   1     067   004*** ******   ****** ******                                    ........

CATALOG_ENTRY_KEY
 Sect OctLoc
   1     071   004*** ******   ****** ******                                    ........

GET_DECKFILE_DATA
 Sect OctLoc
   1     074   000005 777640   000104 006000   000000 177640   000000 006014    .....D..........
   1     100   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     104   000000 600000   000000 000000   000000 000000   000000 000000    ................
   1     110   000000 000000   000000 000000                                    ........

SELECT_CATA_BUF
 Sect OctLoc
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:266  
   1     112   040040 103101   124101 056111   124122 056040   040040 040040      CATA.ITR.
   1     116   040040 146151   162155 167141   162145 040162   145166 056040      firmware rev.
   1     122   040040 040040   040144 145143   153040 043040   040040 040040         deck #
   1     126   ****** ******   ****** ******   ****** ******                    ............

UC_PROMPT
 Sect OctLoc
   1     131   141105 156164   145162 040074   144145 143153   043076 040157    aEnter <deck#> o
   1     135   162040 074103   122076 072***                                    r <CR>:.

ENTER_PROMPT
 Sect OctLoc
   1     140   000003 777640   000146 006000   000000 177640   000000 006014    .....f..........
   1     144   000005 577640   000131 006000   000000 000000   000000 000000    .....Y..........
   1     150   100000 000000   000000 000000                                    @.......

READ_OBJECT_KEY
 Sect OctLoc
   1     156   000005 777640   000166 006000   000001 177640   000052 006000    .....v.......*..
   1     162   000005 777640   000054 006000   000000 177640   000000 006014    .....,..........
   1     166   000000 600000   000000 000000   000000 000000   000000 000000    ................
   1     172   000000 000000   000000 000000                                    ........

GET_BUFFER
 Sect OctLoc
   1     174   000001 777640   000200 006000   000000 177640   000000 006014    ................
   1     200   100600 000000   ****** ******                                    @.......

FREE_BUFFER
 Sect OctLoc
   1     202   000001 777640   000206 006000   000000 177640   000000 006014    ................
   1     206   000000 000000   ****** ******                                    ........

FPTN_
 Sect OctLoc
   2     000   000000 006000                                                    ....

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:267  
SELECT_MSG
 Sect OctLoc
   2     001   123145 154145   143164 040146   151162 155167   141162 145040    Select firmware
   2     005   143141 164141   154157 147040   144145 143153   040156 165155    catalog deck num
   2     011   142145 162040   146162 157155   072*** ******                    ber from:...

(unnamed)
 Sect OctLoc
   2     014   116111 117040   122120 115040   111124 122040   115104 122040    NIO RPM ITR MDR
   2     020   103101 124101   056040 040040   111124 122056   115066 061060    CATA.   ITR.M610
   2     024   125103 115116   125122 124120   115123 120070   124120 125122    UCMNURTPMSP8TPUR
   2     030   115061 071061   115066 060061   115065 060060   104065 060060    M191M601M500D500
   2     034   115124 120066   060061 040040   115124 120066   061060 040040    MTP601  MTP610
   2     040   125122 103115   120103 040040   104123 103061   071061 040040    URCMPC  DSC191
   2     044   104123 103065   060060 040040   115123 120070   060060 040040    DSC500  MSP800
   2     050   115124 103065   060060 040040   125122 124115   120103 040040    MTC500  URTMPC
   2     054   124125 122115   120103 040040   040050 144145   146141 165154    TURMPC   (defaul
   2     060   164051 040040   115104 122056   124101 120105   040040 040040    t)  MDR.TAPE
   2     064   104111 123113   040040 040040   120122 111116   124040 040040    DISK    PRINT
   2     070   103101 122104   040040 040040   116111 117056   115103 101040    CARD    NIO.MCA
   2     074   202020 316351   202020 442451                                    ........

(unnamed)
 Sect OctLoc
   5     000   000001 400000   000003 006000   000004 006000   000005 006000    ................
   5     004   000013 000000   000006 006000   000033 006000   000002 006000    ................
   5     010   000062 006000   000000 000000   000012 006000   000042 006000    .2..........."..
   5     014   000024 006000   000044 006000   777777 777000   000000 003275    .....$..........
   5     020   000004 006000   000017 006000   000001 777640   000005 777640    ................
   5     024   000003 577640   000063 006000   000001 177640   000067 006000    .....3.......7..
   5     030   000002 777640   777777 400007   000001 177640   000071 006000    .............9..
   5     034   000043 006000   000000 000000   000012 177640   000001 006000    .#..............
   5     040   000016 377640   000112 006000   060040 040040   071040 040040    .....J..0   9
   5     044   000000 777640   000137 006000   000000 006000   000004 006000    ....._..........
   5     050   000002 006000   000036 006000   000013 006000   000006 006000    ................
   5     054   000024 006000   000001 006000   000005 006000   000003 006000    ................
   5     060   000040 006000   000013 006000   000007 006000   000024 006000    . ..............
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:268  
   5     064   000054 006000   000020 006000   000054 206000   000015 006000    .,.......,......
   5     070   000152 006000   000023 006000   000001 006000   000154 006000    .j...........l..
   5     074   000003 006000   000040 006000   000013 006000   000007 006000    ..... ..........
   5     100   000024 006000   000000 000340   000006 006000   000101 006000    .............A..
   5     104   000000 040321   000104 006000                                    .. ..D..
     2295    10775
     2296    10776    2   END TOM$MME_UNFREZ ;
     2297    10777    1   END TOM$MOLTS;

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:269  
--  Include file information  --

   TO_PERR_C.:E05TOU  is referenced.
   TOT_TOLTS_M.:E05TOU  is referenced.
   TOT_RQSTS_E.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure TOM$MOLTS.
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:270  

 **** Procedure blocks ****

LB#    Line#s    #stmts #vars Sect# OctLoc  P A C   NP Lvl/name
  0    72- 10777    568   132     4      0  y   y    4   1 TOM$MOLTS
  1  8655-  9758    343    13     4    104  y   y    6     2 TOM$MME_CATADT
  2  8723-  8758     12     7     4    214  y y y    3      3 TOM$REFORMAT_INIT
  3  8773-  9250    193     2     4    273  y y y    1      3 TOM$BUILD_CATALOG_KEY
  4  8801-  8831     26     0     4    365  y y y    0       4 TOM$SET_ITR_CATALOG_KEY
  5  8851-  9196    133     6     4    561  y   y    0       4 TOM$HAVE_USER_PICK
  6  8900-  9002     34    17     4    635  y   y    0        5 TOM$FETCH_CATALOG_TABLE
  7  9012-  9031     13     1     4   1055  y   y    0        5 TOM$COUNT_APPL_CATALOGS
  8  9044-  9098     30    13     4   1123  y   y    0        5 TOM$SHOW_APPL_CHOICES
  9  9111-  9195     38     9     4   1254  y   y    0        5 TOM$GET_USER_CHOICE
 10  9205-  9225     16     0     4   1415  y y y    0       4 TOM$SET_MDR_CATALOG_KEY
 11  9240-  9249      5     0     4   1534  y   y    0       4 TOM$SET_NIO_CATALOG_KEY
 12  9274-  9299     11     4     4   1547  y y y    2      3 TOM$READ_CATALOG
 13  9313-  9653     88     4     4   1655  y   y    2      3 TOM$REFORMAT_CATALOG_DATA
 14  9382-  9488     33     2     4   1742  y y y    1       4 TOM$RETURN_NIO_ENTRIES
 15  9454-  9487     15     2     4   2020  y   y    0        5 TOM$BUILD_NIO_ENTRY
 16  9549-  9652     39     2     4   2077  y y y    1       4 TOM$RETURN_STD_ENTRIES
 17  9615-  9651     22     4     4   2153  y   y    0        5 TOM$BUILD_STD_ENTRY
 18  9689-  9709      7     1     4   2256  y   y    0      3 TOM$CLEAR_EXCESS_DATA
 19  9731-  9757     14     8     4   2301  y   y    4      3 TOM$SET_ERROR_RETURN_VALUES
 20  9802- 10550    162    15     4   2342  y   y    7     2 TOM$MME_DATADT
 21  9849-  9861      5     4     4   2443  y   y    2      3 TOM$BUILD_CATALOG_ENTRY_KEY
 22  9882-  9894      7     0     4   2467  y   y    0      3 TOM$ALLOCATE_SEGTBLS
 23  9955- 10398    111    12     4   2507  y   y    5      3 TOM$SEEK_DECK
 24 10024- 10046      9     5     4   2632  y y y    2       4 TOM$FIND_SEG_FOR_ENTRY
 25 10073- 10098     12     5     4   2677  y   y    2       4 TOM$FREE_SEG_FOR_ENTRY
 26 10123- 10146     11     5     4   2753  y   y    2       4 TOM$FIND_UNUSED_SEG
 27 10164- 10182      7     5     4   3020  y   y    2       4 TOM$ALLOCATE_SEG
 28 10209- 10228      5     7     4   3075  y   y    3       4 TOM$COPY_CALL_SEQUENCE
 29 10265- 10397     45    11     4   3122  y   y    4       4 TOM$RETURN_DATA
 30 10335- 10396     29    22     4   3224  y   y    4        5 TOM$MOVE_SECTORS
 31 10420- 10484     15     2     4   3376  y   y    0      3 TOM$READ_DECK_KEY
 32 10513- 10549     11    10     4   3434  y   y    5      3 TOM$READ_DECK
 33 10564- 10610     19    16     4   3530  y   y    2     2 TOM$MATCH_ICC
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:271  
 34 10623- 10655      7     8     4   3621  y   y    2     2 TOM$GET_DATA_SEGMENT
 35 10668- 10698      7     8     4   3650  y   y    2     2 TOM$FREE_DATA_SEGMENT
 36 10713- 10732     12     4     4   3677  y   y    2     2 TOM$SET_RETURN_VALUES
 37 10745- 10754      3     2     4   4004  y   y    1     2 TOM$MME_FREEZE
 38 10767- 10776      3     2     4   4013  y   y    1     2 TOM$MME_UNFREZ
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:272  

    **** Executable statements  ****

  Exec cost Stmt Sec OctLoc Type   LB Label              Exec cost Stmt Sec OctLoc Type   LB Label

              72   4      0 Proc    0                        $$$$  8586   4      2 DoCase  0
            8587   4     17 Case    0                      $$$$$$  8588   4     17 Call    0
            8590   4     43 Case    0                     $$$$$$$  8591   4     43 Call    0
            8593   4     72 Case    0                              8594   4     72 Call    0
            8595   4     77 Case    0                              8596   4     77 Call    0
            8597   4    103 EndCse  0                              8598   4    103 Return  0
            8655   4    104 Proc    1                           $  8667   4    105 Call    1
         $  8669   4    113 Call    1                              8670   4    122 Do      1
         $  8671   4    122 Call    1                              8672   4    132 Return  1
         $  8675   4    134 Call    1                              8676   4    141 Do      1
         $  8677   4    141 Call    1                              8678   4    151 Return  1
         $  8681   4    153 Call    1                              8682   4    162 Do      1
         $  8683   4    162 Call    1                              8684   4    172 Return  1
         $  8687   4    174 Call    1                              8689   4    202 Call    1
         $  8691   4    204 Call    1                              8692   4    212 Return  1
            8723   4    214 Proc    2                              8732   4    215 Assign  2
            8733   4    216 Assign  2                              8734   4    221 Assign  2
        $$  8736   4    222 Assign  2                           $  8737   4    232 Assign  2
    $$$$$$  8738   4    236 Call    2                              8750   4    261 Assign  2
            8751   4    263 Assign  2                              8752   4    265 Assign  2
            8753   4    267 Return  2                              8756   4    271 Altret  2 CHECK_CALL_ERROR
            8773   4    273 Proc    3                  $$$$$$$$$$  8779   4    274 Do Sel  3
            8780   4    346 Select  3                              8781   4    346 Call    3
            8782   4    350 Call    3                              8783   4    353 Select  3
            8784   4    353 Call    3                              8785   4    356 Select  3
            8786   4    356 Call    3                              8787   4    361 Select  3
            8788   4    361 Altret  3 ERROR                        8789   4    363 EndSel  3
            8790   4    363 Return  3                              8801   4    365 Proc    4
            8805   4    366 Assign  4                              8806   4    371 Assign  4
$$$$$$$$$$  8807   4    374 Do Sel  4                              8808   4    513 Select  4
            8809   4    513 Assign  4                              8810   4    517 Select  4
            8811   4    517 Assign  4                              8812   4    523 Select  4
            8813   4    523 Assign  4                              8814   4    527 Select  4
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:273  
            8815   4    527 Assign  4                              8816   4    533 Select  4
            8817   4    533 Assign  4                              8818   4    537 Select  4
            8819   4    537 Assign  4                              8820   4    543 Select  4
            8821   4    543 Assign  4                              8822   4    547 Select  4
            8823   4    547 Assign  4                              8824   4    553 Select  4
            8825   4    553 Assign  4                              8826   4    557 Select  4
            8827   4    557 Altret  4                              8828   4    560 EndSel  4
            8829   4    560 Return  4                              8851   4    561 Proc    5
      $$$$  8864   4    562 If      5                              8866   4    572 Do      5
            8867   4    572 If      5                              8868   4    575 Do      5
         $  8869   4    575 Call    5                           $  8871   4    603 Assign  5
            8872   4    610 Call    5                              8873   4    612 EndDo   5
            8875   4    612 Call    5                              8876   4    614 If      5
            8877   4    617 Do      5                              8878   4    617 Call    5
            8879   4    621 Call    5                              8880   4    623 EndDo   5
     $$$$$  8882   4    623 Assign  5                              8883   4    633 EndDo   5
            8884   4    633 Return  5                              8900   4    635 Proc    6
            8964   4    636 Assign  6                              8965   4    643 Assign  6
$$$$$$$$$$  8966   4    645 MonCal  6                              8967   4    651 Assign  6
            8968   4    654 Assign  6                              8969   4    655 DoWhil  6
        $$  8970   4    662 Assign  6                         $$$  8971   4    670 Assign  6
            8972   4    677 Assign  6                  $$$$$$$$$$  8973   4    701 MonCal  6
      $$$$  8974   4    705 If      6                              8975   4    714 Do      6
       $$$  8976   4    714 Assign  6                         $$$  8977   4    724 Assign  6
$$$$$$$$$$  8978   4    733 MonCal  6                              8979   4    737 If      6
      $$$$  8980   4    741 Assign  6                          $$  8983   4    753 Assign  6
       $$$  8984   4    757 Assign  6                              8985   4    765 Assign  6
            8986   4    767 DoIndx  6                         $$$  8987   4    772 Assign  6
       $$$  8988   4   1001 Assign  6                           $  8989   4   1010 Assign  6
$$$$$$$$$$  8990   4   1013 MonCal  6                        $$$$  8991   4   1017 EndInd  6
            8992   4   1031 EndDo   6                              8994   4   1031 Assign  6
            8995   4   1034 EndWhi  6                              8996   4   1041 Return  6
            8999   4   1043 Assign  6 ERROR_EXIT                   9000   4   1047 Call    6
            9002   4   1053 EndPrc  6                              9012   4   1055 Proc    7
            9018   4   1056 Assign  7                              9019   4   1057 Assign  7
            9020   4   1060 DoWhil  7                         $$$  9021   4   1061 IntCal  7
            9022   4   1073 Do      7                     $$$$$$$  9023   4   1073 Assign  7
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:274  
      $$$$  9024   4   1103 Assign  7                              9025   4   1111 Assign  7
            9026   4   1114 Assign  7                              9027   4   1116 EndDo   7
            9028   4   1116 EndWhi  7                              9029   4   1121 Return  7
            9044   4   1123 Proc    8                              9067   4   1124 Assign  8
            9068   4   1126 Call    8                              9069   4   1131 Assign  8
            9070   4   1133 DoIndx  8                              9071   4   1135 Assign  8
            9072   4   1140 Assign  8                              9073   4   1141 Assign  8
            9074   4   1146 DoUntl  8                              9075   4   1146 Assign  8
      $$$$  9076   4   1151 If      8                              9078   4   1160 Assign  8
            9079   4   1162 EndUnt  8                          $$  9080   4   1164 Assign  8
 $$$$$$$$$  9081   4   1172 IntCal  8                              9082   4   1203 Assign  8
            9083   4   1204 Assign  8                              9084   4   1205 DoUntl  8
         $  9085   4   1205 If      8                              9086   4   1212 Assign  8
            9087   4   1216 Assign  8                              9088   4   1220 Assign  8
            9089   4   1222 EndUnt  8                              9090   4   1226 Assign  8
            9091   4   1230 If      8                              9092   4   1232 Assign  8
            9093   4   1236 Assign  8                              9094   4   1241 Call    8
            9095   4   1244 EndInd  8                              9096   4   1252 Return  8
            9111   4   1254 Proc    9                  $$$$$$$$$$  9154   4   1255 MonCal  9
            9155   4   1260 Assign  9                              9156   4   1261 DoWhil  9
            9157   4   1262 Assign  9                              9158   4   1264 Assign  9
            9159   4   1266 Call    9                              9160   4   1271 If      9
            9161   4   1274 Assign  9                              9162   4   1277 Do      9
            9163   4   1277 Assign  9                              9166   4   1301 DoIndx  9
       $$$  9167   4   1302 If      9                           $  9168   4   1313 DoCase  9
            9169   4   1322 Case    9                              9170   4   1322 Assign  9
            9171   4   1325 Assign  9                              9172   4   1330 Case    9
            9173   4   1330 Assign  9                              9174   4   1333 Assign  9
            9175   4   1336 Assign  9                              9176   4   1341 Assign  9
            9177   4   1343 Assign  9                              9178   4   1345 EndCse  9
            9179   4   1346 Assign  9                              9180   4   1350 EndInd  9
   $$$$$$$  9181   4   1355 IntCal  9                              9182   4   1362 DoIndx  9
         $  9183   4   1364 If      9                              9184   4   1372 Do      9
            9185   4   1372 Assign  9                              9186   4   1374 Assign  9
            9187   4   1377 EndDo   9                              9189   4   1377 EndInd  9
            9190   4   1405 Assign  9                              9191   4   1407 EndDo   9
            9192   4   1407 EndWhi  9                              9193   4   1413 Return  9
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:275  
            9205   4   1415 Proc   10                              9209   4   1416 Assign 10
            9210   4   1421 Assign 10                  $$$$$$$$$$  9211   4   1424 DoCase 10
            9212   4   1512 Case   10                              9213   4   1512 Assign 10
            9214   4   1516 Case   10                              9215   4   1516 Assign 10
            9216   4   1522 Case   10                              9217   4   1522 Assign 10
            9218   4   1526 Case   10                              9219   4   1526 Assign 10
            9220   4   1532 Case   10                              9221   4   1532 Altret 10
            9222   4   1533 EndCse 10                              9223   4   1533 Return 10
            9240   4   1534 Proc   11                              9244   4   1535 Assign 11
            9245   4   1540 Assign 11                              9246   4   1543 Assign 11
            9247   4   1546 Return 11                              9274   4   1547 Proc   12
            9281   4   1550 Assign 12                              9282   4   1551 Assign 12
            9283   4   1552 Assign 12                         $$$  9285   4   1555 Call   12
$$$$$$$$$$  9292   4   1571 DoCase 12                              9293   4   1651 Case   12
            9294   4   1651 Return 12                              9295   4   1653 Case   12
            9296   4   1653 Altret 12                              9297   4   1655 EndCse 12
            9313   4   1655 Proc   13                  $$$$$$$$$$  9320   4   1656 Do Sel 13
            9321   4   1705 Select 13                           $  9322   4   1705 Call   13
            9323   4   1712 Do     13                              9324   4   1712 Assign 13
            9325   4   1716 Call   13                              9326   4   1722 EndDo  13
            9327   4   1723 Select 13                           $  9328   4   1723 Call   13
            9329   4   1730 Do     13                              9330   4   1730 Assign 13
            9331   4   1734 Call   13                              9332   4   1740 EndDo  13
            9333   4   1740 EndSel 13                              9334   4   1740 Return 13
            9382   4   1742 Proc   14                              9388   4   1743 If     14
            9389   4   1745 Assign 14                              9390   4   1747 Assign 14
            9391   4   1751 Assign 14                              9394   4   1753 DoWhil 14
            9396   4   1754 Call   14                              9404   4   1760 Call   14
            9406   4   1762 Call   14                           $  9414   4   1766 Assign 14
            9415   4   1772 Assign 14                              9416   4   1775 Assign 14
            9417   4   1777 Assign 14                              9418   4   2001 EndWhi 14
         $  9421   4   2003 Assign 14                           $  9422   4   2010 Assign 14
            9423   4   2014 Return 14                              9426   4   2016 Altret 14 BAD_ENTRY_WRITE
            9454   4   2020 Proc   15                              9462   4   2021 Assign 15
        $$  9463   4   2023 Call   15                              9464   4   2033 Assign 15
            9465   4   2036 Assign 15                              9468   4   2041 Assign 15
            9471   4   2044 Assign 15                              9474   4   2046 If     15
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:276  
            9475   4   2052 Assign 15                              9476   4   2055 Assign 15
   $$$$$$$  9479   4   2057 IntCal 15                              9480   4   2064 Assign 15
   $$$$$$$  9483   4   2067 IntCal 15                              9484   4   2074 Assign 15
            9485   4   2075 Return 15                              9549   4   2077 Proc   16
            9555   4   2100 Assign 16                              9556   4   2102 Assign 16
            9557   4   2104 Assign 16                              9560   4   2106 DoWhil 16
            9562   4   2107 Call   16                              9570   4   2113 Call   16
            9572   4   2115 Call   16                           $  9580   4   2121 Assign 16
            9581   4   2125 Assign 16                              9582   4   2130 Assign 16
            9583   4   2132 Assign 16                              9584   4   2134 EndWhi 16
         $  9587   4   2136 Assign 16                           $  9588   4   2143 Assign 16
            9589   4   2147 Return 16                              9592   4   2151 Altret 16 BAD_ENTRY_WRITE
            9615   4   2153 Proc   17                         $$$  9623   4   2154 Do Sel 17
            9624   4   2166 Select 17                              9626   4   2166 Assign 17
            9627   4   2170 Assign 17                              9628   4   2173 Select 17
            9630   4   2173 Assign 17                              9631   4   2175 Assign 17
            9632   4   2200 Select 17                              9633   4   2200 Assign 17
            9634   4   2202 Assign 17                          $$  9635   4   2206 Call   17
            9636   4   2220 Assign 17                              9637   4   2222 EndSel 17
            9640   4   2222 Assign 17                              9641   4   2224 Assign 17
        $$  9642   4   2230 Call   17                              9645   4   2242 Assign 17
            9646   4   2245 Assign 17                              9647   4   2250 Assign 17
            9648   4   2252 Assign 17                              9649   4   2254 Return 17
            9689   4   2256 Proc   18                              9695   4   2257 Assign 18
            9696   4   2261 Call   18                              9703   4   2265 Return 18
            9706   4   2267 Assign 18 BAD_CLEAR                    9707   4   2273 Call   18
            9709   4   2277 EndPrc 18                              9731   4   2301 Proc   19
       $$$  9740   4   2302 DoCase 19                              9741   4   2313 Case   19
            9743   4   2313 Assign 19                           $  9744   4   2315 Assign 19
            9745   4   2321 Case   19                              9747   4   2321 Assign 19
            9748   4   2323 Assign 19                           $  9749   4   2325 Assign 19
            9750   4   2331 Case   19                              9752   4   2331 Assign 19
            9753   4   2334 EndCse 19                          $$  9754   4   2334 Assign 19
            9755   4   2340 Return 19                              9802   4   2342 Proc   20
         $  9815   4   2343 Call   20                           $  9816   4   2351 Call   20
$$$$$$$$$$  9818   4   2357 Do Sel 20                              9819   4   2403 Select 20
            9820   4   2403 Call   20                          $$  9821   4   2405 Call   20
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:277  
            9822   4   2416 Select 20                              9823   4   2416 Call   20
       $$$  9824   4   2420 Call   20                              9825   4   2433 EndSel 20
         $  9827   4   2433 Call   20                              9828   4   2441 Return 20
            9849   4   2443 Proc   21                        $$$$  9856   4   2444 Assign 21
         $  9857   4   2455 Assign 21                           $  9858   4   2461 Assign 21
            9859   4   2465 Return 21                              9882   4   2467 Proc   22
            9886   4   2470 If     22                              9887   4   2473 Do     22
         $  9888   4   2473 Call   22                           $  9889   4   2501 Assign 22
            9890   4   2505 EndDo  22                              9892   4   2505 Return 22
            9955   4   2507 Proc   23                         $$$  9967   4   2510 If     23
            9968   4   2520 Do     23                          $$  9970   4   2520 Call   23
            9971   4   2527 Do     23                              9972   4   2527 Assign 23
            9973   4   2533 Call   23                              9974   4   2537 EndDo  23
         $  9975   4   2537 Call   23                              9976   4   2545 EndDo  23
            9977   4   2546 Do     23                          $$  9979   4   2546 Call   23
            9980   4   2555 Do     23                           $  9981   4   2555 Call   23
         $  9982   4   2563 Call   23                              9983   4   2571 Call   23
        $$  9984   4   2573 Call   23                         $$$  9985   4   2603 Call   23
            9986   4   2616 EndDo  23                          $$  9987   4   2616 Call   23
            9988   4   2630 EndDo  23                              9989   4   2630 Return 23
           10024   4   2632 Proc   24                         $$$ 10033   4   2633 Assign 24
           10036   4   2641 Assign 24                             10037   4   2643 DoWhil 24
    $$$$$$ 10038   4   2646 If     24                             10039   4   2666 Return 24
           10040   4   2670 Assign 24                             10041   4   2673 EndWhi 24
           10044   4   2675 Altret 24                             10073   4   2677 Proc   25
       $$$ 10082   4   2700 Assign 25                         $$$ 10085   4   2706 If     25
           10086   4   2715 Do     25                          $$ 10088   4   2715 Call   25
      $$$$ 10089   4   2727 Assign 25                             10090   4   2737 Return 25
           10092   4   2741 Do     25                             10094   4   2741 Assign 25
           10095   4   2745 Call   25                             10096   4   2751 EndDo  25
           10098   4   2751 EndPrc 25                             10123   4   2753 Proc   26
       $$$ 10132   4   2754 Assign 26                             10135   4   2762 Assign 26
           10136   4   2764 DoWhil 26                         $$$ 10137   4   2767 If     26
           10138   4   2776 Assign 26                             10139   4   3002 Return 26
           10140   4   3004 EndWhi 26                             10143   4   3006 Assign 26
           10144   4   3012 Call   26                             10146   4   3016 EndPrc 26
           10164   4   3020 Proc   27                         $$$ 10173   4   3021 Assign 27
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:278  
      $$$$ 10176   4   3027 Call   27                         $$$ 10177   4   3042 Assign 27
        $$ 10178   4   3051 Assign 27                         $$$ 10179   4   3063 Assign 27
           10180   4   3073 Return 27                             10209   4   3075 Proc   28
       $$$ 10219   4   3076 Assign 28                       $$$$$ 10222   4   3104 Assign 28
         $ 10225   4   3114 Assign 28                             10226   4   3120 Return 28
           10265   4   3122 Proc   29                         $$$ 10278   4   3123 Assign 29
       $$$ 10279   4   3131 Assign 29                             10281   4   3140 Assign 29
$$$$$$$$$$ 10283   4   3141 If     29                             10284   4   3174 Do     29
        $$ 10286   4   3174 Call   29                             10287   4   3205 If     29
         $ 10288   4   3207 Assign 29                             10289   4   3213 Assign 29
           10290   4   3215 EndDo  29                             10291   4   3216 Do     29
           10293   4   3216 Assign 29                             10294   4   3220 Assign 29
           10295   4   3222 EndDo  29                             10296   4   3222 Return 29
           10335   4   3224 Proc   30                      $$$$$$ 10361   4   3225 Assign 30
         $ 10362   4   3240 Assign 30                           $ 10363   4   3245 Assign 30
           10364   4   3252 Assign 30                             10367   4   3256 If     30
           10368   4   3262 Do     30                             10369   4   3262 Assign 30
       $$$ 10370   4   3266 If     30                             10371   4   3301 Do     30
           10372   4   3301 Assign 30                             10373   4   3303 Assign 30
           10374   4   3305 EndDo  30                             10375   4   3306 Do     30
       $$$ 10376   4   3306 Assign 30                             10377   4   3320 Assign 30
           10378   4   3323 EndDo  30                             10381   4   3323 DoIndx 30
       $$$ 10382   4   3325 Assign 30                             10383   4   3334 EndInd 30
         $ 10384   4   3342 Assign 30                         $$$ 10387   4   3346 Assign 30
           10388   4   3355 Assign 30                             10389   4   3362 Return 30
           10391   4   3364 Do     30                             10392   4   3364 Assign 30
           10393   4   3370 Call   30                             10394   4   3374 EndDo  30
           10396   4   3374 EndPrc 30                             10420   4   3376 Proc   31
$$$$$$$$$$ 10469   4   3377 MonCal 31                             10470   4   3403 Do     31
           10471   4   3403 If     31                             10472   4   3407 Return 31
           10473   4   3411 Do     31                             10474   4   3411 Assign 31
           10475   4   3415 Call   31                             10476   4   3421 EndDo  31
           10477   4   3421 EndDo  31                             10479   4   3422 Do     31
           10480   4   3422 Assign 31                             10481   4   3426 Call   31
           10482   4   3432 EndDo  31                             10484   4   3432 EndPrc 31
           10513   4   3434 Proc   32                             10524   4   3435 Assign 32
           10525   4   3436 Assign 32                  $$$$$$$$$$ 10528   4   3437 Do Sel 32
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:279  
           10529   4   3466 Select 32                      $$$$$$ 10530   4   3466 Call   32
           10536   4   3505 Select 32                      $$$$$$ 10537   4   3505 Call   32
           10543   4   3523 EndSel 32                             10546   4   3523 Assign 32
           10547   4   3526 Return 32                             10564   4   3530 Proc   33
         $ 10586   4   3531 If     33                             10587   4   3535 Do     33
           10588   4   3535 Assign 33                             10589   4   3541 Assign 33
           10590   4   3546 EndDo  33                             10591   4   3547 Do     33
           10592   4   3547 Assign 33                           $ 10593   4   3553 Assign 33
           10594   4   3561 EndDo  33                             10597   4   3561 DoIndx 33
     $$$$$ 10598   4   3562 If     33                             10599   4   3575 Do     33
           10600   4   3575 Assign 33                             10601   4   3600 Return 33
           10604   4   3602 EndInd 33                             10607   4   3607 Assign 33
           10608   4   3613 Call   33                             10610   4   3617 EndPrc 33
           10623   4   3621 Proc   34                             10647   4   3622 Assign 34
           10648   4   3625 Assign 34                  $$$$$$$$$$ 10649   4   3630 MonCal 34
           10650   4   3634 Return 34                         $$$ 10653   4   3636 Call   34 GET_ERROR
           10655   4   3646 EndPrc 34                             10668   4   3650 Proc   35
           10690   4   3651 Assign 35                             10691   4   3654 Assign 35
$$$$$$$$$$ 10692   4   3657 MonCal 35                             10693   4   3663 Return 35
       $$$ 10696   4   3665 Call   35 FREE_ERROR                  10698   4   3675 EndPrc 35
           10713   4   3677 Proc   36                  $$$$$$$$$$ 10720   4   3700 DoCase 36
           10721   4   3760 Case   36                          $$ 10722   4   3760 Assign 36
           10723   4   3765 Case   36                             10724   4   3765 Assign 36
        $$ 10725   4   3766 Assign 36                             10726   4   3773 Case   36
        $$ 10727   4   3773 Assign 36                             10728   4   3777 EndCse 36
           10729   4   3777 Assign 36                             10730   4   4002 Return 36
           10745   4   4004 Proc   37                          $$ 10751   4   4005 Assign 37
           10752   4   4011 Return 37                             10767   4   4013 Proc   38
        $$ 10773   4   4014 Assign 38                             10774   4   4020 Return 38


  **** Statement type totals  ****

   205 Assign    75 Call       8 MonCal    25 If        19 Case      42 Return
     8 Altret     5 IntCal     6 Do Sel     6 EndSel    23 Select     2 DoUntl
     6 DoIndx     7 DoWhil     6 DoCase    31 Do         2 EndUnt     6 EndInd
     7 EndWhi     6 EndCse    25 EndDo     39 Proc       9 EndPrc     8 Labels
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:280  


 # major stmts=  424 Code/major= 4.87 # stmts=  568 Code/stmt= 3.63  Point total=108.1
 Cost/major stmt=  5.0 Cost/stmt=  3.7 Total cost=   2156.0

   0-4  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
   4-6  $$$$$$$$$
   6-8  $$$$
  8-10  $$$$$$
 10-12  $$
 12-14
 14-16  $
 16-18  $
 18-20
 20-22
 22-??  $$$
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:281  

 **** Variables and constants ****

  ****  Section 001  Data  TOM$MOLTS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   152-0-0/w SBIN        r     1 CHAR_COUNT               154-0-0/w UBIN        r     1 CLEAR_SIZE
     0-0-0/w PTR         r     1 DATA_IN$                   4-0-0/w UBIN        r     1 DATA_LENGTH_IN
     5-0-0/w UBIN        r     1 DATA_LENGTH_OUT            1-0-0/w PTR         r     1 DATA_OUT$
     6-0-0/w UBIN        r     1 DATA_SIZE_IN               7-0-0/w UBIN        r     1 DATA_SIZE_OUT
     2-0-0/w STRC        r     1 DCW_I                      3-0-0/w STRC        r     1 DCW_O
   137-0-0/c CHAR(4)     r     1 DECK#                    137-0-0/c CHAR        r     1 DECK#_(0:3)
    62-0-0/c CHAR        r     1 DECK_TYPE                 10-0-0/w UBIN(18)    r     1 ENTRY_NO
    11-0-0/w UBIN(18)    r     1 LAST_ENTRY_NO             14-0-0/w STRC        r     1 LOAD
    12-0-0/w UBIN        r     1 LOAD_SIZE                 63-0-0/c STRC(135)   r     1 MASTER_KEY
    24-0-0/w STRC(252)   r     1 MY_CALL_SEQUENCE          42-0-0/w UBIN        r     1 READ_ERROR_CODE
    13-0-0/w PTR         r     1 START_LOAD$               33-0-0/w PTR         r     1 STATUS_I$
    35-0-0/w PTR         r     1 STATUS_U$                 36-0-0/w STRC(72)    r     1 STAT_I
    40-0-0/w STRC(72)    r     1 STAT_O                   153-0-0/w SBIN        r     1 TAB_INDEX
   131-0-0/c CHAR(23)    r     1 UC_PROMPT

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

    52-0-0/c STRC(45)    r     1 CATALOG_ENTRY_KEY
    52-1-0/b UBIN(18)    r         2 DECK
    52-3-0/b UBIN(18)    r         2 ENTRY#

    71-0-0/c STRC(45)    r     1 CATALOG_ENTRY_KEY
    71-1-0/b UBIN(18)    r         2 DECK#
    71-3-0/b UBIN(18)    r         2 ENTRY#

    44-0-0/c STRC(216)   r     1 CATALOG_KEY
    44-1-0/c CHAR(23)    r         2 DATA
    44-1-0/c STRC(207)   r         2 NAME
    44-1-0/c CHAR(5)     r          3 CATA
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:282  
    45-2-0/c CHAR(4)     r          3 TYP
    46-2-0/c CHAR(6)     r          3 APPL

    15-0-0/w STRC(108)   r     1 CP6_NIO_ENTRY
    15-0-6/b UBIN(24)    r         2 EQUIP_TYPE
    15-3-3/b BIT (48)    r         2 FILE_NAME
    17-0-6/b UBIN(12)    r         2 X_OF_N

    15-0-0/w STRC(108)   r     1 CP6_STD_ENTRY
    15-0-0/b UBIN        r         2 NAME
    16-0-6/b UBIN(24)    r         2 DECK
    17-0-0/b UBIN(12)    r         2 REV

   140-0-0/d STRC(360)   r     1 ENTER_PROMPT
   146-0-0/d STRC(144)   r         2 V

   202-0-0/d STRC(216)   r     1 FREE_BUFFER
   204-0-0/b BIT (72)    r         2 RESULTS_
   206-0-0/d STRC        r         2 V
   206-2-0/b UBIN(18)    r          3 SEGSIZE#

    20-0-0/w STRC(144)   r     1 GCOS_NIO_ENTRY
    20-0-0/b UBIN(24)    r         2 EQUIP_TYPE
    20-2-6/b UBIN(12)    r         2 X_OF_N
    21-0-0/b UBIN(18)    r         2 ENTRY#
    21-2-0/b UBIN(18)    r         2 NIO_FLAG
    22-0-0/b BIT (48)    r         2 FILE_NAME
    23-1-3/b UBIN(12)    r         2 DISK_TAB
    23-2-6/b UBIN(12)    r         2 PGM_TAB

    20-0-0/w STRC(144)   r     1 GCOS_STD_ENTRY
    20-0-0/b UBIN(24)    r         2 DECK
    20-2-6/b UBIN(12)    r         2 REV
    21-0-0/b UBIN(18)    r         2 ENTRY#
    22-0-0/b UBIN        r         2 NAME
    23-0-0/b BIT         r         2 USAGE

PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:283  
   174-0-0/d STRC(216)   r     1 GET_BUFFER
   176-0-0/b BIT (72)    r         2 RESULTS_
   200-0-0/d STRC        r         2 V
   200-2-0/b UBIN(18)    r          3 SEGSIZE#

    74-0-0/d STRC(504)   r     1 GET_DECKFILE_DATA
    76-0-0/w STRC(72)    r         2 KEY_
   100-0-0/w STRC(72)    r         2 BUF_
   104-0-0/d STRC(216)   r         2 V

    67-0-0/c STRC(45)    r     1 MASTER_ENTRY_KEY
    67-1-0/b UBIN(18)    r         2 DECK#
    67-3-0/b UBIN(18)    r         2 ENTRY#

    54-0-0/c STRC(216)   r     1 OBJECT_KEY
    54-0-0/c UBIN(9)     r         2 SIZE
    54-1-0/c CHAR(23)    r         2 DATA

    42-0-0/w STRC        r     1 READ_ERR_CODE
    42-3-0/b UBIN(9)     r         2 CODE

   156-0-0/d STRC(504)   r     1 READ_OBJECT_KEY
   166-0-0/d STRC(216)   r         2 V

   112-0-0/c STRC(522)   r     1 SELECT_CATA_BUF
   114-3-0/c CHAR(6)     r         2 CATA
   122-0-0/c CHAR(4)     r         2 FW_REV
   125-0-0/c CHAR(4)     r         2 DECK#
   126-0-0/c CHAR(10)    r         2 DEFAULT

    43-0-0/w STRC        r     1 TOM_ERROR_CODE
    43-2-1/b UBIN(14)    r         2 ERR#


  ****  Section 002 RoData TOM$MOLTS

  ****  Scalars and arrays  ****
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:284  
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 FPTN_                      0-0-0/w PTR         r     1 IS$
     1-0-0/c CHAR(41)    r     1 SELECT_MSG

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    14-0-0/w PTR         r     1 @A                        22-0-0/w PTR         r     1 @A
    25-0-0/w PTR         r     1 @A                        25-0-0/w PTR         r     1 @A
    22-0-0/w PTR         r     1 @A                        15-0-0/w PTR         r     1 @A
    27-0-0/w PTR         r     1 @A                        36-0-0/w PTR         r     1 @A
    37-0-0/w PTR         r     1 @A                        24-0-0/w PTR         r     1 @CALL_SEQ$
    34-0-0/w PTR         r     1 @CALL_SEQ$                46-0-0/w PTR         r     1 @EOF
    21-0-0/w PTR         r     1 @ERROR_NUMBER             44-0-0/w PTR         r     1 @FIRST_SECTOR
     3-0-0/w PTR         r     1 @MME                       5-0-0/w PTR         r     1 @MME_INSTR$
     4-0-0/w PTR         r     1 @MREG                     15-0-0/w PTR         r     1 @Q
    23-0-0/w PTR         r     1 @Q                        16-0-0/w PTR         r     1 @Q
    23-0-0/w PTR         r     1 @Q                        23-0-0/w PTR         r     1 @Q
     6-0-0/w PTR         r     1 @RETURN_DELTA             16-0-0/w PTR         r     1 @RETURN_DELTA
    24-0-0/w PTR         r     1 @RETURN_DELTA             17-0-0/w PTR         r     1 @RETURN_DELTA
    24-0-0/w PTR         r     1 @RETURN_DELTA             11-0-0/w PTR         r     1 @RETURN_DELTA
    11-0-0/w PTR         r     1 @RETURN_DELTA             43-0-0/w PTR         r     1 @SEG$
    35-0-0/w PTR         r     1 @SEQ$                     34-0-0/w PTR         r     1 @STX
    34-0-0/w PTR         r     1 @STX                      34-0-0/w PTR         r     1 @STX
    34-0-0/w PTR         r     1 @STX                      34-0-0/w PTR         r     1 @STX
    34-0-0/w PTR         r     1 @STX                      21-0-0/w PTR         r     1 @TCX
    21-0-0/w PTR         r     1 @TCX                      23-0-0/w PTR         r     1 @TCX
    33-0-0/w PTR         r     1 @TCX                      33-0-0/w PTR         r     1 @TCX
    33-0-0/w PTR         r     1 @TCX                      33-0-0/w PTR         r     1 @TCX
    33-0-0/w PTR         r     1 @TCX                      33-0-0/w PTR         r     1 @TCX
    33-0-0/w PTR         r     1 @TCX                      24-0-0/w PTR         r     1 @TCX
    45-0-0/w PTR         r     1 @WORD_COUNT               51-0-0/w PTR         r     1 @WORD_COUNT
    37-0-0/w PTR         r     1 @WORD_COUNT               52-0-0/w PTR         r     1 @WORD_VECTOR
    40-0-0/w PTR         r     1 @WORD_VECTOR              11-0-0/w PTR         r     1 @X1
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:285  
    21-0-0/w PTR         r     1 @X1                       11-0-0/w PTR         r     1 @X1
    23-0-0/w PTR         r     1 @X1                       12-0-0/w PTR         r     1 @X2
    22-0-0/w PTR         r     1 @X2                       21-0-0/w PTR         r     1 @X2
    12-0-0/w PTR         r     1 @X2                       24-0-0/w PTR         r     1 @X2
    35-0-0/w PTR         r     1 @X2                       13-0-0/w PTR         r     1 @X3
    23-0-0/w PTR         r     1 @X3                       22-0-0/w PTR         r     1 @X3
    13-0-0/w PTR         r     1 @X3                       25-0-0/w PTR         r     1 @X3
    36-0-0/w PTR         r     1 @X3                       14-0-0/w PTR         r     1 @X4
    26-0-0/w PTR         r     1 @X4                       35-0-0/w PTR         r     1 @X4
    *0-0-0/w UBIN        r     1 A                         *0-0-0/w UBIN        r     1 A
    *0-0-0/w UBIN        r     1 A                         *0-0-0/w UBIN        r     1 A
    *0-0-0/w UBIN        r     1 A                         *0-0-0/w UBIN        r     1 A
    *0-0-0/w UBIN        r     1 A                         *0-0-0/w UBIN        r     1 A
    *0-0-0/w UBIN        r     1 A                         27-0-0/c CHAR        r     1 ASCII(0:15)
    27-0-0/c CHAR(16)    r     1 ASCII_                     7-0-0/w PTR         r     1 CALL_SEQ$
    *0-0-0/w PTR         r     1 CALL_SEQ$                 *0-0-0/w PTR         r     1 CALL_SEQ$
    51-0-0/w SBIN        r     1 CATA_INX                  27-0-0/w UBIN        r     1 CHAR_COUNT
    53-0-0/w PTR         r     1 DCW$                      55-0-0/c CHAR(4)     r     1 DECK#_CHAR
    55-0-0/c CHAR        r     1 DECK#_CHAR_(0:3)
    53-0-0/w UBIN        r     1 DECK_OCT                  41-0-0/w BIT         r     1 EOF
    *0-0-0/w BIT         r     1 EOF                       *0-0-0/w UBIN        r     1 ERROR_NUMBER
    56-0-0/w BIT         r     1 FIRMWARE_FOUND            *0-0-0/h SBIN(18)    r     1 FIRST_SECTOR
    53-0-0/w UBIN        r     1 I                         51-0-0/w UBIN        r     1 I
    51-0-0/w UBIN        r     1 I                         55-0-0/w UBIN        r     1 I
    25-0-0/w UBIN        r     1 I                         26-0-0/w UBIN(11)    r     1 ICC_
    54-0-0/w UBIN        r     1 J                         52-0-0/w UBIN        r     1 J
    52-0-0/w UBIN        r     1 J                         53-0-0/w UBIN        r     1 K
    54-0-0/w BIT         r     1 MATCH                     *0-0-0/w PTR         r     1 MME_INSTR$
    23-0-0/w UBIN        r     1 NCIC                      54-0-0/w BIT         r     1 NON_ZERO_FOUND
    *0-0-0/w UBIN        r     1 Q                         *0-0-0/w UBIN        r     1 Q
    *0-0-0/w UBIN        r     1 Q                         *0-0-0/w UBIN        r     1 Q
    *0-0-0/w SBIN(18)    r     1 RETURN_DELTA              *0-0-0/h SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/h SBIN(18)    r     1 RETURN_DELTA              *0-0-0/h SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/h SBIN(18)    r     1 RETURN_DELTA              *0-0-0/h SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/h SBIN(18)    r     1 RETURN_DELTA              50-0-0/w UBIN        r     1 SECTORS_REQUESTED
    47-0-0/w UBIN        r     1 SECTOR_COUNT              40-0-0/w PTR         r     1 SEG$
    *0-0-0/w PTR         r     1 SEG$                      35-0-0/w PTR         r     1 SEGTBL$
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:286  
    35-0-0/w PTR         r     1 SEGTBL$                   35-0-0/w PTR         r     1 SEGTBL$
    35-0-0/w PTR         r     1 SEGTBL$                   36-0-0/w PTR         r     1 SEGTBL$
    37-0-0/w PTR         r     1 SEGTBL$                   31-0-0/w PTR         r     1 SEQ$
    *0-0-0/w PTR         r     1 SEQ$                      55-0-0/w UBIN        r     1 SLOT
    51-0-0/w PTR         r     1 SOURCE$                   54-0-0/w PTR         r     1 STATUS$
    30-0-0/w UBIN        r     1 STX                       *0-0-0/w UBIN        r     1 STX
    *0-0-0/w UBIN        r     1 STX                       *0-0-0/w UBIN        r     1 STX
    *0-0-0/w UBIN        r     1 STX                       *0-0-0/w UBIN        r     1 STX
    *0-0-0/w UBIN        r     1 STX                       52-0-0/w PTR         r     1 TARGET$
    17-0-0/w UBIN        r     1 TCX                       *0-0-0/w UBIN        r     1 TCX
    *0-0-0/w UBIN        r     1 TCX                       20-0-0/w UBIN        r     1 TCX
    *0-0-0/w UBIN        r     1 TCX                       *0-0-0/w UBIN        r     1 TCX
    *0-0-0/w UBIN        r     1 TCX                       *0-0-0/w UBIN        r     1 TCX
    *0-0-0/w UBIN        r     1 TCX                       *0-0-0/w UBIN        r     1 TCX
    *0-0-0/w UBIN        r     1 TCX                       *0-0-0/w UBIN        r     1 TCX
    *0-0-0/w UBIN        r     1 TCX                       30-0-0/w UBIN        r     1 VALUE
    *0-0-0/w UBIN        r     1 WORD_COUNT                *0-0-0/w UBIN        r     1 WORD_COUNT
    *0-0-0/w UBIN        r     1 WORD_COUNT                *0-0-0/d BIT (72)    r     1 WORD_VECTOR
    *0-0-0/d BIT (72)    r     1 WORD_VECTOR               *0-0-0/h UBIN(18)    r     1 X1
    *0-0-0/h UBIN(18)    r     1 X1                        *0-0-0/h UBIN(18)    r     1 X1
    *0-0-0/h UBIN(18)    r     1 X1                        *0-0-0/h UBIN(18)    r     1 X2
    *0-0-0/h UBIN(18)    r     1 X2                        *0-0-0/h UBIN(18)    r     1 X2
    *0-0-0/h UBIN(18)    r     1 X2                        *0-0-0/h UBIN(18)    r     1 X2
    *0-0-0/h UBIN(18)    r     1 X2                        *0-0-0/h UBIN(18)    r     1 X3
    *0-0-0/h UBIN(18)    r     1 X3                        *0-0-0/h UBIN(18)    r     1 X3
    *0-0-0/h UBIN(18)    r     1 X3                        *0-0-0/h UBIN(18)    r     1 X3
    *0-0-0/h UBIN(18)    r     1 X3                        *0-0-0/h SBIN(18)    r     1 X4
    *0-0-0/h SBIN(18)    r     1 X4                        *0-0-0/h SBIN(18)    r     1 X4

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

    24-0-0/w STRC(144)   r     1 CUR_ITR_CATAS(0:4)
    24-0-0/w STRC(108)   r         2 DATA
    24-0-0/h UBIN(18)    r          3 DECK#
    26-0-0/w UBIN        r          3 OBJ_KEY_INX
    27-0-0/w UBIN        r         2 CATA#
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:287  

    26-0-0/w STRC(11)    r     1 ICC
    26-0-0/b UBIN(3)     r         2 IOM#
    26-0-3/b UBIN(8)     r         2 CHAN#

    51-0-0/w STRC(72)    r     1 MASTER_DATA
    51-0-0/b UBIN(18)    r         2 DECK#
    51-2-0/b UBIN(18)    r         2 NUM_ENTRIES

    *0-0-0/w STRC(252)   r     1 MME
     0-0-0/b STRC        r         2 INST
     0-0-0/b SBIN(18)    r          3 NO

    *0-0-0/d STRC(252)   r     1 MREG
     0-2-0/b UBIN(18)    r         2 X1
     1-0-0/b UBIN(18)    r         2 X2
     1-2-0/b UBIN(18)    r         2 X3
     2-0-0/b UBIN(18)    r         2 X4
     4-0-0/b UBIN        r         2 A
     5-0-0/b UBIN        r         2 Q

    *0-0-0/w STRC        r     1 Q
     0-0-6/b BIT         r         2 FORMAT#
     0-0-7/b STRC(11)    r         2 NEW_FORMAT
     0-0-7/b UBIN(3)     r          3 IOM#
     0-1-1/b UBIN(8)     r          3 CHAN#
     0-0-7/b STRC(11)    r         2 OLD_FORMAT
     0-0-7/b UBIN(5)     r          3 IOM#
     0-1-3/b UBIN(6)     r          3 CHAN#


  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:288  

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(432)   r     1 CONSOLE_FPT
     4-0-0/w STRC(72)    r         2 BUF_

     0-0-0/d STRC(504)   r     1 READ_IO
     4-0-0/w STRC(72)    r         2 BUF_

     0-0-0/d STRC(288)   r     1 TOT$DMC
     2-0-0/d STRC(72)    r         2 TOP$TCP
     3-0-0/b PTR         r          3 PTR$
     4-0-0/d STRC(72)    r         2 TOM$ITRTBL
     5-0-0/b PTR         r          3 PTR$
     6-0-0/d STRC(72)    r         2 TOM$SEGTBLS
     7-0-0/b PTR         r          3 PTR$


  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w CHAR(256)   r     1 DATA_SECTOR(0:255)
     0-0-0N  NULL        r     1 M$DECKFILE                 0-0-0N  NULL        r     1 M$UC
     0-0-0/w STRC(72)    r     1 STAT_U
     0-0-0/d CHAR(112)   r     1 TOM$SEGTBLS(0:7)

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT
   102-0-0/b STRC        r         2 ERR

     0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w PTR         r         2 ALT$
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:289  

     0-0-0/w STRC(252)   r     1 CALL_SEQUENCE
     0-0-0/h UBIN(18)    r         2 FDCWP
     0-2-0/h UBIN(18)    r         2 STATUSP
     1-0-0/h UBIN(18)    r         2 DECK
     1-2-0/h UBIN(18)    r         2 NEXT_ENTRY
     6-0-0/w SBIN        r         2 NO_MORE

     0-0-0/w STRC        r     1 DCW
     0-0-0/b UBIN(18)    r         2 ADDRESS
     0-2-6/b UBIN(12)    r         2 WORD_COUNT

     0-0-0/w STRC        r     1 STATUS
     0-0-0/b UBIN(18)    r         2 NEXT_ADDRESS
     0-2-0/b UBIN(18)    r         2 RESIDUE

     0-0-0/w STRC(62100) r     1 TOM$ITRTBL
     0-0-0/c STRC(216)   r         2 CATA_KEYS(0:24)
     0-1-0/c STRC(207)   r          3 CNAME
     1-2-0/c CHAR(3)     r           4 TYP
     0-0-0/c CHAR(600)   r         2 CATA_KEYS_
   226-0-0/c STRC(108)   r         2 CATA_DATA(0:24)
   226-0-0/c UBIN(18)    r          3 DECK#
   226-2-0/c UBIN(18)    r          3 NUM_ENTRIES
   230-0-0/c UBIN        r          3 OBJ_KEY_INX
   341-0-0/c STRC(216)   r         2 OBJ_KEYS(0:249)
   341-1-0/c STRC(207)   r          3 ONAME
   341-1-0/c CHAR(3)     r           4 ITR_TYP
   346-0-0/c CHAR(2)     r           4 FW_REV

     0-0-0/w STRC(67444) r     1 TOM$SEG
     0-0-0/w UBIN        r         2 CALL_SEQUENCE(0:6)
    37-0-0/w UBIN        r         2 LAST_SECTOR
    40-0-0/w CHAR(256)   r         2 SECTORS(0:255)

     0-0-0/d STRC(144)   r     1 TOM$SEGTBL(0:6)
     0-0-0/d STRC(72)    r         2 V
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:290  
     1-0-0/b PTR         r          3 PTR$
     2-0-0/w BIT         r         2 ACTIVE
     3-0-0/w UBIN(18)    r         2 ENTRY#

     0-0-0/d STRC(5904)  r     1 TOP$TCP(0:7)
     1-0-0/w STRC(21)    r         2 ICC
     1-0-4/b UBIN(11)    r          3 ICC#
     2-0-0/c CHAR(3)     r         2 TEST_TYPE
     7-0-0/h UBIN(18)    r         2 DEVICE_CODE
    12-3-0/c STRC(117)   r         2 FIRMWARE
    12-3-0/c BIT         r          3 CHOICE_MADE
    13-0-0/c CHAR(4)     r          3 TYPE



   Procedure TOM$MOLTS requires 2066 words for executable code.
   Procedure TOM$MOLTS requires 60 words of local(AUTO) storage.

    No errors detected in file TOM$MOLTS.:E05TSI    .
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:291  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:292  
          MINI XREF LISTING

A IN PROCEDURE TOM$MME_CATADT
      8660**DCL      8655--PROC     8671<>CALL     8677<>CALL     8683<>CALL     8687<>CALL
A IN PROCEDURE TOM$MME_DATADT
      9808**DCL      9802--PROC     9821<>CALL     9824<>CALL
A IN PROCEDURE TOM$READ_DECK
     10519**DCL     10513--PROC    10546<<ASSIGN
A IN PROCEDURE TOM$REFORMAT_CATALOG_DATA
      9316**DCL      9313--PROC     9322<>CALL     9328<>CALL
A IN PROCEDURE TOM$RETURN_DATA
     10270**DCL     10265--PROC    10286<>CALL    10294<<ASSIGN
A IN PROCEDURE TOM$RETURN_NIO_ENTRIES
      9384**DCL      9382--PROC     9390<<ASSIGN   9414<<ASSIGN   9414>>ASSIGN
A IN PROCEDURE TOM$RETURN_STD_ENTRIES
      9551**DCL      9549--PROC     9556<<ASSIGN   9580<<ASSIGN   9580>>ASSIGN
A IN PROCEDURE TOM$SEEK_DECK
      9961**DCL      9955--PROC     9985<>CALL     9987<>CALL
A IN PROCEDURE TOM$SET_ERROR_RETURN_VALUES
      9734**DCL      9731--PROC     9743<<ASSIGN   9747<<ASSIGN
ASCII IN PROCEDURE TOM$BUILD_STD_ENTRY
      9617**DCL      9618--REDEF    9635<>CALL     9642<>CALL
ASCII_ IN PROCEDURE TOM$BUILD_STD_ENTRY
      9618**DCL      9634<<ASSIGN   9641<<ASSIGN
B$ALT.CODE
      8220**DCL      8220--REDEF    8221--REDEF    8221--REDEF
B$ALT.ERR
      8221**DCL     10653<>CALL    10696<>CALL
B$ALT.ERR.ERR#
      8222**DCL      8222--REDEF
B$ALT.EVID
      8221**DCL      8221--REDEF    8221--REDEF
B$TCB.ALT$
      8227**DCL     10653>>CALL    10696>>CALL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:293  
B$TCB$
      8217**DCL     10653>>CALL    10696>>CALL
BAD_CLEAR IN PROCEDURE TOM$CLEAR_EXCESS_DATA
      9706**LABEL    9696--CALLALT
BAD_ENTRY_WRITE IN PROCEDURE TOM$RETURN_NIO_ENTRIES
      9426**LABEL    9406--CALLALT
BAD_ENTRY_WRITE IN PROCEDURE TOM$RETURN_STD_ENTRIES
      9592**LABEL    9572--CALLALT
CALL_SEQ$
      8058**DCL      8736<<ASSIGN   8737>>ASSIGN   9186>>ASSIGN   9283>>ASSIGN   9285>>CALL     9421>>ASSIGN
      9587>>ASSIGN   9816<>CALL     9824<>CALL    10225>>ASSIGN  10288>>ASSIGN  10362>>ASSIGN  10364>>ASSIGN
CALL_SEQ$ IN PROCEDURE TOM$BUILD_CATALOG_ENTRY_KEY
      9852**DCL      9849--PROC     9856<<ASSIGN   9857>>ASSIGN   9858>>ASSIGN
CALL_SEQ$ IN PROCEDURE TOM$READ_DECK
     10516**DCL     10513--PROC    10530>>CALL    10537>>CALL
CALL_SEQUENCE
      8069**DCL      8737>>ASSIGN   9285<>CALL    10225<<ASSIGN  10225>>ASSIGN  10530<>CALL    10537<>CALL
CALL_SEQUENCE.DECK
      8074**DCL      9186<<ASSIGN   9857>>ASSIGN
CALL_SEQUENCE.FDCWP
      8070**DCL     10362>>ASSIGN
CALL_SEQUENCE.NEXT_ENTRY
      8076**DCL      9283>>ASSIGN   9858>>ASSIGN
CALL_SEQUENCE.NO_MORE
      8088**DCL     10288<<ASSIGN
CALL_SEQUENCE.STATUSP
      8072**DCL      9421>>ASSIGN   9587>>ASSIGN  10364>>ASSIGN
CATALOG_ENTRY_KEY
      8207**DCL     10444--DCLINIT 10445--DCLINIT
CATALOG_ENTRY_KEY.DECK
      8209**DCL      9857<<ASSIGN
CATALOG_ENTRY_KEY.ENTRY#
      8210**DCL      9858<<ASSIGN  10038>>IF      10178>>ASSIGN
CATALOG_ENTRY_KEY IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8913**DCL      8985--ASSIGN
CATALOG_ENTRY_KEY.DECK# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:294  
      8915**DCL      8984<<ASSIGN
CATALOG_ENTRY_KEY.ENTRY# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8916**DCL      8989<<ASSIGN
CATALOG_KEY
      8199**DCL      8738<>CALL     9285<>CALL
CATALOG_KEY.DATA
      8201**DCL      8202--REDEF    8733<<ASSIGN
CATALOG_KEY.NAME.APPL
      8205**DCL      8809<<ASSIGN   8811<<ASSIGN   8813<<ASSIGN   8815<<ASSIGN   8817<<ASSIGN   8819<<ASSIGN
      8821<<ASSIGN   8823<<ASSIGN   8825<<ASSIGN   9021>>CALLBLT  9071>>ASSIGN   9213<<ASSIGN   9215<<ASSIGN
      9217<<ASSIGN   9219<<ASSIGN   9246<<ASSIGN
CATALOG_KEY.NAME.CATA
      8203**DCL      8805<<ASSIGN   9209<<ASSIGN   9244<<ASSIGN
CATALOG_KEY.NAME.TYP
      8204**DCL      8806<<ASSIGN   9210<<ASSIGN   9245<<ASSIGN
CATA_INX IN PROCEDURE TOM$COUNT_APPL_CATALOGS
      9014**DCL      9018<<ASSIGN   9020>>DOWHILE  9021<<CALLBLT  9021>>CALLBLT  9023>>ASSIGN   9024>>ASSIGN
      9026<<ASSIGN   9026>>ASSIGN
CHAR_COUNT IN PROCEDURE TOM$BUILD_NIO_ENTRY
      9456**DCL      9462<<ASSIGN   9463<>CALL
CHAR_COUNT IN PROCEDURE TOM$BUILD_STD_ENTRY
      9619**DCL      9633<<ASSIGN   9634>>ASSIGN   9635<>CALL     9640<<ASSIGN   9641>>ASSIGN   9642<>CALL
CHECK_CALL_ERROR IN PROCEDURE TOM$REFORMAT_INIT
      8756**LABEL    8738--CALLALT
CLEAR_SIZE IN PROCEDURE TOM$CLEAR_EXCESS_DATA
      9691**DCL      9695<<ASSIGN   9696<>CALL
CONSOLE_FPT.BUF_
      8247**DCL      9067<<ASSIGN   9069<<ASSIGN
CONSOLE_FPT.STATION_
      8249**DCL      8249--REDEF
CONSOLE_FPT.V.DVBYTE.VFC#
      8256**DCL      8256--REDEF
CP6_NIO_ENTRY
      8034**DCL      9463<>CALL
CP6_NIO_ENTRY.EQUIP_TYPE
      8036**DCL      9464>>ASSIGN
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:295  
CP6_NIO_ENTRY.FILE_NAME
      8037**DCL      9465>>ASSIGN
CP6_NIO_ENTRY.X_OF_N
      8038**DCL      9468>>ASSIGN
CP6_STD_ENTRY
      8027**DCL      8034--REDEF    9642<>CALL
CP6_STD_ENTRY.DECK
      8030**DCL      9645>>ASSIGN
CP6_STD_ENTRY.NAME
      8028**DCL      9648>>ASSIGN
CP6_STD_ENTRY.REV
      8032**DCL      9646>>ASSIGN
CUR_ITR_CATAS.CATA# IN PROCEDURE TOM$HAVE_USER_PICK
      8860**DCL      9024<<ASSIGN
CUR_ITR_CATAS.DATA IN PROCEDURE TOM$HAVE_USER_PICK
      8855**DCL      9023<<ASSIGN
CUR_ITR_CATAS.DATA.DECK# IN PROCEDURE TOM$HAVE_USER_PICK
      8856**DCL      9081>>CALLBLT  9183>>IF
CUR_ITR_CATAS.DATA.OBJ_KEY_INX IN PROCEDURE TOM$HAVE_USER_PICK
      8859**DCL      9073>>ASSIGN
DATA_IN$
      7989**DCL      9396<>CALL     9416<<ASSIGN   9562<>CALL     9582<<ASSIGN
DATA_LENGTH_IN
      7999**DCL      9396<>CALL     9562<>CALL
DATA_LENGTH_OUT
      8000**DCL      9406<>CALL     9572<>CALL
DATA_OUT$
      7990**DCL      9406<>CALL     9417<<ASSIGN   9572<>CALL     9583<<ASSIGN   9696<>CALL
DATA_SECTOR IN PROCEDURE TOM$MOVE_SECTORS
     10356**DCL     10382<<ASSIGN  10382>>ASSIGN
DATA_SIZE_IN
      8001**DCL      8738<>CALL     8752>>ASSIGN   9391<<ASSIGN   9394>>DOWHILE  9396<>CALL     9557<<ASSIGN
      9560>>DOWHILE  9562<>CALL
DATA_SIZE_OUT
      8002**DCL      8752<<ASSIGN   9406<>CALL     9572<>CALL     9695>>ASSIGN   9696<>CALL
DCW.ADDRESS IN PROCEDURE TOM$MOVE_SECTORS
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:296  
     10347**DCL     10363>>ASSIGN  10387>>ASSIGN
DCW.WORD_COUNT IN PROCEDURE TOM$MOVE_SECTORS
     10350**DCL     10367>>IF      10369>>ASSIGN  10388>>ASSIGN
DCW$ IN PROCEDURE TOM$MOVE_SECTORS
     10345**DCL     10346--IMP-PTR 10362<<ASSIGN  10363>>ASSIGN  10367>>IF      10369>>ASSIGN  10387>>ASSIGN
     10388>>ASSIGN
DCW_I
      7991**DCL      8738<>CALL     8750>>ASSIGN   9396<>CALL     9562<>CALL
DCW_O
      7995**DCL      8750<<ASSIGN   9406<>CALL     9572<>CALL     9696<>CALL
DECK# IN PROCEDURE TOM$GET_USER_CHOICE
      9117**DCL      9157<<ASSIGN   9158--ASSIGN   9160>>IF       9181>>CALLBLT  9190<<ASSIGN
DECK#_ IN PROCEDURE TOM$GET_USER_CHOICE
      9116**DCL      9117--REDEF    9167>>IF       9167>>IF       9170<<ASSIGN   9173<<ASSIGN   9173>>ASSIGN
      9174<<ASSIGN   9174>>ASSIGN   9175<<ASSIGN   9175>>ASSIGN   9176<<ASSIGN
DECK#_CHAR IN PROCEDURE TOM$SHOW_APPL_CHOICES
      9053**DCL      9081<<CALLBLT  9090>>ASSIGN
DECK#_CHAR_ IN PROCEDURE TOM$SHOW_APPL_CHOICES
      9052**DCL      9053--REDEF    9085>>IF       9086<<ASSIGN
DECK_OCT IN PROCEDURE TOM$GET_USER_CHOICE
      9118**DCL      9181<<CALLBLT  9183>>IF       9186>>ASSIGN
DECK_TYPE IN PROCEDURE TOM$REFORMAT_INIT
      8728**DCL      8738<>CALL
ENTER_PROMPT IN PROCEDURE TOM$GET_USER_CHOICE
      9139**DCL      9154<>CALL
ENTER_PROMPT.V IN PROCEDURE TOM$GET_USER_CHOICE
      9147**DCL      9141--DCLINIT
ENTRY_NO
      8003**DCL      9389<<ASSIGN   9415<<ASSIGN   9415>>ASSIGN   9471>>ASSIGN   9555<<ASSIGN   9581<<ASSIGN
      9581>>ASSIGN   9647>>ASSIGN
EOF IN PROCEDURE TOM$MOVE_SECTORS
     10340**DCL     10335--PROC    10373<<ASSIGN  10377<<ASSIGN
EOF IN PROCEDURE TOM$RETURN_DATA
     10273**DCL     10286<>CALL    10287>>IF
ERROR IN PROCEDURE TOM$BUILD_CATALOG_KEY
      8788**LABEL    8781--CALLALT  8786--CALLALT
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:297  
ERROR_EXIT IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8999**LABEL    8966--CALLALT  8973--CALLALT  8978--CALLALT  8990--CALLALT
ERROR_NUMBER IN PROCEDURE TOM$SET_ERROR_RETURN_VALUES
      9733**DCL      9731--PROC     9740>>DOCASE
FIRMWARE_FOUND IN PROCEDURE TOM$SHOW_APPL_CHOICES
      9054**DCL      9072<<ASSIGN   9074>>DOUNTIL  9078<<ASSIGN
FIRST_SECTOR IN PROCEDURE TOM$MOVE_SECTORS
     10338**DCL     10335--PROC    10361>>ASSIGN  10370>>IF      10376>>ASSIGN
FPTN_
      8014**DCL      8017--REDEF
FREE_BUFFER IN PROCEDURE TOM$FREE_DATA_SEGMENT
     10683**DCL     10692<>CALL
FREE_BUFFER.RESULTS_ IN PROCEDURE TOM$FREE_DATA_SEGMENT
     10683**DCL     10691<<ASSIGN
FREE_BUFFER.V IN PROCEDURE TOM$FREE_DATA_SEGMENT
     10683**DCL     10683--DCLINIT
FREE_BUFFER.V.SEGSIZE# IN PROCEDURE TOM$FREE_DATA_SEGMENT
     10685**DCL     10690<<ASSIGN
FREE_ERROR IN PROCEDURE TOM$FREE_DATA_SEGMENT
     10696**LABEL   10692--CALLALT
GCOS_NIO_ENTRY
      8047**DCL      9417--ASSIGN
GCOS_NIO_ENTRY.DISK_TAB
      8053**DCL      9480<<ASSIGN
GCOS_NIO_ENTRY.ENTRY#
      8050**DCL      9471<<ASSIGN
GCOS_NIO_ENTRY.EQUIP_TYPE
      8048**DCL      9464<<ASSIGN
GCOS_NIO_ENTRY.FILE_NAME
      8052**DCL      9465<<ASSIGN
GCOS_NIO_ENTRY.NIO_FLAG
      8051**DCL      9475<<ASSIGN   9476<<ASSIGN
GCOS_NIO_ENTRY.PGM_TAB
      8054**DCL      9484<<ASSIGN
GCOS_NIO_ENTRY.X_OF_N
      8049**DCL      9468<<ASSIGN
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:298  
GCOS_STD_ENTRY
      8040**DCL      7990--DCLINIT  8047--REDEF    9583--ASSIGN
GCOS_STD_ENTRY.DECK
      8041**DCL      9645<<ASSIGN
GCOS_STD_ENTRY.ENTRY#
      8043**DCL      9647<<ASSIGN
GCOS_STD_ENTRY.NAME
      8045**DCL      9648<<ASSIGN
GCOS_STD_ENTRY.REV
      8042**DCL      9646<<ASSIGN
GCOS_STD_ENTRY.USAGE
      8046**DCL      9626<<ASSIGN   9630<<ASSIGN   9635<>CALL
GET_BUFFER IN PROCEDURE TOM$GET_DATA_SEGMENT
     10639**DCL     10649<>CALL
GET_BUFFER.RESULTS_ IN PROCEDURE TOM$GET_DATA_SEGMENT
     10639**DCL     10648<<ASSIGN
GET_BUFFER.V IN PROCEDURE TOM$GET_DATA_SEGMENT
     10639**DCL     10639--DCLINIT
GET_BUFFER.V.SEGSIZE# IN PROCEDURE TOM$GET_DATA_SEGMENT
     10642**DCL     10647<<ASSIGN
GET_DECKFILE_DATA IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8939**DCL      8966<>CALL     8973<>CALL     8978<>CALL     8990<>CALL
GET_DECKFILE_DATA.BUF_ IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8941**DCL      8964<<ASSIGN   8971<<ASSIGN   8976<<ASSIGN   8988<<ASSIGN
GET_DECKFILE_DATA.KEY_ IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8939**DCL      8965<<ASSIGN   8972<<ASSIGN   8977<<ASSIGN   8985<<ASSIGN
GET_DECKFILE_DATA.STATION_ IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8942**DCL      8943--REDEF
GET_DECKFILE_DATA.V IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8943**DCL      8939--DCLINIT
GET_DECKFILE_DATA.V.DVBYTE.REREAD# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8954**DCL      8954--REDEF
GET_DECKFILE_DATA.V.INDX# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8952**DCL      8952--REDEF
GET_ERROR IN PROCEDURE TOM$GET_DATA_SEGMENT
     10653**LABEL   10649--CALLALT
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:299  
I IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8917**DCL      8968<<ASSIGN   8969>>DOWHILE  8970>>ASSIGN   8971>>ASSIGN   8974>>IF       8976>>ASSIGN
      8977>>ASSIGN   8979>>IF       8980>>ASSIGN   8980>>ASSIGN   8980>>ASSIGN   8983>>ASSIGN   8984>>ASSIGN
      8986>>DOINDEX  8987>>ASSIGN   8994<<ASSIGN   8994>>ASSIGN
I IN PROCEDURE TOM$GET_USER_CHOICE
      9113**DCL      9166<<DOINDEX  9182<<DOINDEX  9183>>IF
I IN PROCEDURE TOM$MATCH_ICC
     10577**DCL     10597<<DOINDEX 10598>>IF      10600>>ASSIGN
I IN PROCEDURE TOM$MOVE_SECTORS
     10355**DCL     10381<<DOINDEX 10382>>ASSIGN  10382>>ASSIGN
I IN PROCEDURE TOM$SHOW_APPL_CHOICES
      9046**DCL      9070<<DOINDEX  9073>>ASSIGN   9081>>CALLBLT  9091>>IF
ICC IN PROCEDURE TOM$MATCH_ICC
     10578**DCL     10581--REDEF
ICC.CHAN# IN PROCEDURE TOM$MATCH_ICC
     10580**DCL     10589<<ASSIGN  10593<<ASSIGN
ICC.IOM# IN PROCEDURE TOM$MATCH_ICC
     10579**DCL     10588<<ASSIGN  10592<<ASSIGN
ICC_ IN PROCEDURE TOM$MATCH_ICC
     10581**DCL     10598>>IF
IS$
      8017**DCL      8736>>ASSIGN   9421>>ASSIGN   9587>>ASSIGN   9856>>ASSIGN  10362>>ASSIGN  10363>>ASSIGN
     10364>>ASSIGN
J IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8918**DCL      8986<<DOINDEX  8987>>ASSIGN   8989>>ASSIGN
J IN PROCEDURE TOM$GET_USER_CHOICE
      9114**DCL      9163<<ASSIGN   9167>>IF       9167>>IF       9168>>DOCASE   9170>>ASSIGN   9171<<ASSIGN
      9171>>ASSIGN   9177<<ASSIGN   9179<<ASSIGN   9179>>ASSIGN
J IN PROCEDURE TOM$SHOW_APPL_CHOICES
      9047**DCL      9073<<ASSIGN   9075<<ASSIGN   9075>>ASSIGN   9076>>IF       9080>>ASSIGN
K IN PROCEDURE TOM$SHOW_APPL_CHOICES
      9048**DCL      9082<<ASSIGN   9084>>DOUNTIL  9085>>IF       9086>>ASSIGN   9088<<ASSIGN   9088>>ASSIGN
LAST_ENTRY_NO
      8004**DCL      9283<<ASSIGN   9388>>IF
LOAD
      8021**DCL      8020--DCLINIT
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:300  
LOAD_SIZE
      8019**DCL      8732<<ASSIGN   8738<>CALL     9281<<ASSIGN   9285<>CALL     9391>>ASSIGN   9557>>ASSIGN
     10524<<ASSIGN  10530<>CALL    10537<>CALL    10546>>ASSIGN
M$FDS
      6137**DCL-ENT 10692--CALL
M$GDS
      6137**DCL-ENT 10649--CALL
M$PROMPT
      6126**DCL-ENT  9154--CALL
M$READ
      6103**DCL-ENT  8966--CALL     8973--CALL     8978--CALL     8990--CALL    10469--CALL
MASTER_DATA IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8902**DCL      8964--ASSIGN
MASTER_DATA.DECK# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8903**DCL      8967>>ASSIGN
MASTER_DATA.NUM_ENTRIES IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8904**DCL      8969>>DOWHILE
MASTER_ENTRY_KEY IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8909**DCL      8972--ASSIGN
MASTER_ENTRY_KEY.DECK# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8911**DCL      8967<<ASSIGN
MASTER_ENTRY_KEY.ENTRY# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8912**DCL      8970<<ASSIGN
MASTER_KEY IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8906**DCL      8965--ASSIGN
MATCH IN PROCEDURE TOM$GET_USER_CHOICE
      9119**DCL      9155<<ASSIGN   9156>>DOWHILE  9161<<ASSIGN   9185<<ASSIGN
MME
      7931**DCL        72--PROC
MME.INST.NO
      7934**DCL      8586>>DOCASE
MME.INSTR
      7932**DCL      7933--REDEF
MME_INSTR$
      7966**DCL        72--PROC
MREG
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:301  
      7952**DCL        72--PROC
MREG.A
      7961**DCL      8588<>CALL     8591<>CALL
MREG.Q
      7962**DCL      8588<>CALL     8591<>CALL
MREG.X1
      7954**DCL      8588<>CALL     8591<>CALL
MREG.X2
      7955**DCL      8588<>CALL     8591<>CALL
MREG.X3
      7956**DCL      8588<>CALL     8591<>CALL
MREG.X4
      7957**DCL      8591<>CALL
MY_CALL_SEQUENCE
      8101**DCL      8737<<ASSIGN   8738<>CALL     9396<>CALL     9406<>CALL     9562<>CALL     9572<>CALL
      9696<>CALL
NCIC IN PROCEDURE TOM$HAVE_USER_PICK
      8853**DCL      8876>>IF       9019<<ASSIGN   9023>>ASSIGN   9024>>ASSIGN   9025<<ASSIGN   9025>>ASSIGN
      9070>>DOINDEX  9182>>DOINDEX
NON_ZERO_FOUND IN PROCEDURE TOM$SHOW_APPL_CHOICES
      9051**DCL      9083<<ASSIGN   9084>>DOUNTIL  9087<<ASSIGN
OBJECT_KEY
      8211**DCL      7989--DCLINIT  9416--ASSIGN   9582--ASSIGN  10446--DCLINIT 10447--DCLINIT 10530<>CALL
     10537<>CALL
OBJECT_KEY.DATA
      8213**DCL      9463<>CALL     9474>>IF       9479>>CALLBLT  9483>>CALLBLT  9623>>DOSELCT  9634>>ASSIGN
      9641>>ASSIGN
OBJECT_KEY.SIZE
      8212**DCL     10471>>IF
Q IN PROCEDURE TOM$MATCH_ICC
     10566**DCL     10564--PROC
Q.FORMAT# IN PROCEDURE TOM$MATCH_ICC
     10568**DCL     10586>>IF
Q.NEW_FORMAT IN PROCEDURE TOM$MATCH_ICC
     10569**DCL     10572--REDEF
Q.NEW_FORMAT.CHAN# IN PROCEDURE TOM$MATCH_ICC
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:302  
     10571**DCL     10589>>ASSIGN
Q.NEW_FORMAT.IOM# IN PROCEDURE TOM$MATCH_ICC
     10570**DCL     10588>>ASSIGN
Q.OLD_FORMAT.CHAN# IN PROCEDURE TOM$MATCH_ICC
     10574**DCL     10593>>ASSIGN
Q.OLD_FORMAT.IOM# IN PROCEDURE TOM$MATCH_ICC
     10573**DCL     10592>>ASSIGN
Q IN PROCEDURE TOM$MME_CATADT
      8661**DCL      8655--PROC     8667<>CALL     8671<>CALL     8677<>CALL     8683<>CALL     8691<>CALL
Q IN PROCEDURE TOM$MME_DATADT
      9809**DCL      9802--PROC     9815<>CALL     9827<>CALL
Q IN PROCEDURE TOM$SET_ERROR_RETURN_VALUES
      9735**DCL      9731--PROC     9744<<ASSIGN   9749<<ASSIGN   9752<<ASSIGN
Q IN PROCEDURE TOM$SET_RETURN_VALUES
     10715**DCL     10713--PROC    10729<<ASSIGN
READ_ERROR_CODE
      8144**DCL      8145--REDEF    8734<<ASSIGN   8738<>CALL     9282<<ASSIGN   9285<>CALL     9744>>ASSIGN
      9749>>ASSIGN   9752>>ASSIGN  10525<<ASSIGN  10530<>CALL    10537<>CALL    10724<<ASSIGN  10729>>ASSIGN
READ_ERR_CODE
      8145**DCL     10281<<ASSIGN
READ_ERR_CODE.CODE
      8147**DCL      9292>>DOCASE   9748<<ASSIGN  10289<<ASSIGN  10293<<ASSIGN  10720>>DOCASE
READ_IO.BUF_
      8281**DCL      9158<<ASSIGN
READ_IO.STATION_
      8282**DCL      8283--REDEF
READ_IO.V.DVBYTE.REREAD#
      8294**DCL      8294--REDEF
READ_IO.V.INDX#
      8292**DCL      8292--REDEF
READ_OBJECT_KEY IN PROCEDURE TOM$READ_DECK_KEY
     10444**DCL     10469<>CALL
READ_OBJECT_KEY.STATION_ IN PROCEDURE TOM$READ_DECK_KEY
     10447**DCL     10448--REDEF
READ_OBJECT_KEY.V IN PROCEDURE TOM$READ_DECK_KEY
     10448**DCL     10444--DCLINIT
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:303  
READ_OBJECT_KEY.V.DVBYTE.REREAD# IN PROCEDURE TOM$READ_DECK_KEY
     10459**DCL     10459--REDEF
READ_OBJECT_KEY.V.INDX# IN PROCEDURE TOM$READ_DECK_KEY
     10457**DCL     10457--REDEF
RETURN_DELTA
      7969**DCL        72--PROC     8588<>CALL     8591<>CALL     8594<>CALL     8596<>CALL
RETURN_DELTA IN PROCEDURE TOM$MME_CATADT
      8662**DCL      8655--PROC     8671<>CALL     8677<>CALL     8683<>CALL     8691<>CALL
RETURN_DELTA IN PROCEDURE TOM$MME_DATADT
      9810**DCL      9802--PROC     9827<>CALL
RETURN_DELTA IN PROCEDURE TOM$MME_FREEZE
     10747**DCL     10745--PROC    10751<<ASSIGN
RETURN_DELTA IN PROCEDURE TOM$MME_UNFREZ
     10769**DCL     10767--PROC    10773<<ASSIGN
RETURN_DELTA IN PROCEDURE TOM$SET_ERROR_RETURN_VALUES
      9736**DCL      9731--PROC     9754<<ASSIGN
RETURN_DELTA IN PROCEDURE TOM$SET_RETURN_VALUES
     10716**DCL     10713--PROC    10722<<ASSIGN  10725<<ASSIGN  10727<<ASSIGN
SECTORS_REQUESTED IN PROCEDURE TOM$MOVE_SECTORS
     10342**DCL     10369<<ASSIGN  10370>>IF      10372>>ASSIGN
SECTOR_COUNT IN PROCEDURE TOM$MOVE_SECTORS
     10341**DCL     10372<<ASSIGN  10376<<ASSIGN  10381>>DOINDEX 10384>>ASSIGN
SEG$ IN PROCEDURE TOM$MOVE_SECTORS
     10337**DCL     10335--PROC    10361>>ASSIGN  10370>>IF      10376>>ASSIGN
SEG$ IN PROCEDURE TOM$RETURN_DATA
     10272**DCL     10279<<ASSIGN  10283>>IF      10286<>CALL
SEGTBL$ IN PROCEDURE TOM$ALLOCATE_SEG
     10168**DCL     10173<<ASSIGN  10176>>CALL    10177>>ASSIGN  10178>>ASSIGN  10179>>ASSIGN
SEGTBL$ IN PROCEDURE TOM$COPY_CALL_SEQUENCE
     10214**DCL     10219<<ASSIGN  10222>>ASSIGN
SEGTBL$ IN PROCEDURE TOM$FIND_SEG_FOR_ENTRY
     10028**DCL     10033<<ASSIGN  10038>>IF
SEGTBL$ IN PROCEDURE TOM$FIND_UNUSED_SEG
     10127**DCL     10132<<ASSIGN  10137>>IF
SEGTBL$ IN PROCEDURE TOM$FREE_SEG_FOR_ENTRY
     10077**DCL     10082<<ASSIGN  10085>>IF      10088>>CALL    10089>>ASSIGN
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:304  
SEGTBL$ IN PROCEDURE TOM$RETURN_DATA
     10271**DCL     10278<<ASSIGN  10279>>ASSIGN
SELECT_CATA_BUF IN PROCEDURE TOM$SHOW_APPL_CHOICES
      9055**DCL      9069--ASSIGN
SELECT_CATA_BUF.CATA IN PROCEDURE TOM$SHOW_APPL_CHOICES
      9058**DCL      9071<<ASSIGN
SELECT_CATA_BUF.DECK# IN PROCEDURE TOM$SHOW_APPL_CHOICES
      9062**DCL      9090<<ASSIGN
SELECT_CATA_BUF.DEFAULT IN PROCEDURE TOM$SHOW_APPL_CHOICES
      9063**DCL      9092<<ASSIGN   9093<<ASSIGN
SELECT_CATA_BUF.FW_REV IN PROCEDURE TOM$SHOW_APPL_CHOICES
      9060**DCL      9080<<ASSIGN
SELECT_MSG IN PROCEDURE TOM$SHOW_APPL_CHOICES
      9049**DCL      9067--ASSIGN
SEQ$ IN PROCEDURE TOM$COPY_CALL_SEQUENCE
     10213**DCL     10209--PROC    10222<<ASSIGN  10225>>ASSIGN
SEQ$ IN PROCEDURE TOM$SEEK_DECK
      9963**DCL      9984<>CALL     9985<>CALL
SLOT IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8919**DCL      8987<<ASSIGN   8988>>ASSIGN
SOURCE$ IN PROCEDURE TOM$MOVE_SECTORS
     10343**DCL     10361<<ASSIGN  10382>>ASSIGN
START_LOAD$
      8020**DCL      9396<>CALL     9406<>CALL     9562<>CALL     9572<>CALL     9696<>CALL
STATUS.NEXT_ADDRESS IN PROCEDURE TOM$MOVE_SECTORS
     10353**DCL     10387<<ASSIGN
STATUS.RESIDUE IN PROCEDURE TOM$MOVE_SECTORS
     10354**DCL     10388<<ASSIGN
STATUS$ IN PROCEDURE TOM$MOVE_SECTORS
     10351**DCL     10352--IMP-PTR 10364<<ASSIGN  10387>>ASSIGN  10388>>ASSIGN
STATUS_I$
      8126**DCL      8738<>CALL
STATUS_U$
      8128**DCL      9421<<ASSIGN   9422>>ASSIGN   9587<<ASSIGN   9588>>ASSIGN
STAT_I
      8129**DCL      8126--DCLINIT  8751>>ASSIGN   9396<>CALL     9562<>CALL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:305  
STAT_O
      8133**DCL      8127--DCLINIT  8751<<ASSIGN   9406<>CALL     9422>>ASSIGN   9572<>CALL     9588>>ASSIGN
      9696<>CALL
STAT_U
      8137**DCL      9422<<ASSIGN   9588<<ASSIGN
STX IN PROCEDURE TOM$ALLOCATE_SEG
     10167**DCL     10164--PROC    10176>>CALL    10177>>ASSIGN  10178>>ASSIGN  10179>>ASSIGN
STX IN PROCEDURE TOM$COPY_CALL_SEQUENCE
     10212**DCL     10209--PROC    10222>>ASSIGN
STX IN PROCEDURE TOM$FIND_SEG_FOR_ENTRY
     10027**DCL     10024--PROC    10036<<ASSIGN  10037>>DOWHILE 10038>>IF      10040<<ASSIGN  10040>>ASSIGN
STX IN PROCEDURE TOM$FIND_UNUSED_SEG
     10126**DCL     10123--PROC    10135<<ASSIGN  10136>>DOWHILE 10137>>IF      10138<<ASSIGN  10138>>ASSIGN
STX IN PROCEDURE TOM$FREE_SEG_FOR_ENTRY
     10076**DCL     10073--PROC    10085>>IF      10088>>CALL    10089>>ASSIGN
STX IN PROCEDURE TOM$RETURN_DATA
     10268**DCL     10265--PROC    10279>>ASSIGN
STX IN PROCEDURE TOM$SEEK_DECK
      9962**DCL      9970<>CALL     9975<>CALL     9979<>CALL     9981<>CALL     9982<>CALL     9984<>CALL
      9987<>CALL
TAB_INDEX IN PROCEDURE TOM$BUILD_STD_ENTRY
      9620**DCL      9627<<ASSIGN   9631<<ASSIGN   9636<<ASSIGN   9641>>ASSIGN
TARGET$ IN PROCEDURE TOM$MOVE_SECTORS
     10344**DCL     10363<<ASSIGN  10382>>ASSIGN
TCX IN PROCEDURE TOM$ALLOCATE_SEG
     10166**DCL     10164--PROC    10173>>ASSIGN
TCX IN PROCEDURE TOM$BUILD_CATALOG_KEY
      8775**DCL      8773--PROC     8779>>DOSELCT  8807>>DOSELCT  8864>>IF       8882>>ASSIGN   9211>>DOCASE
TCX IN PROCEDURE TOM$COPY_CALL_SEQUENCE
     10211**DCL     10209--PROC    10219>>ASSIGN
TCX IN PROCEDURE TOM$FIND_SEG_FOR_ENTRY
     10026**DCL     10024--PROC    10033>>ASSIGN
TCX IN PROCEDURE TOM$FIND_UNUSED_SEG
     10125**DCL     10123--PROC    10132>>ASSIGN
TCX IN PROCEDURE TOM$FREE_SEG_FOR_ENTRY
     10075**DCL     10073--PROC    10082>>ASSIGN
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:306  
TCX IN PROCEDURE TOM$MATCH_ICC
     10576**DCL     10564--PROC    10600<<ASSIGN
TCX IN PROCEDURE TOM$MME_CATADT
      8663**DCL      8667<>CALL     8675<>CALL     8687<>CALL
TCX IN PROCEDURE TOM$MME_DATADT
      9811**DCL      9815<>CALL     9818>>DOSELCT  9821<>CALL     9824<>CALL
TCX IN PROCEDURE TOM$READ_DECK
     10515**DCL     10513--PROC    10528>>DOSELCT
TCX IN PROCEDURE TOM$REFORMAT_CATALOG_DATA
      9315**DCL      9313--PROC     9320>>DOSELCT
TCX IN PROCEDURE TOM$RETURN_DATA
     10267**DCL     10265--PROC    10278>>ASSIGN
TCX IN PROCEDURE TOM$SEEK_DECK
      9957**DCL      9955--PROC     9970<>CALL     9975<>CALL     9979<>CALL     9981<>CALL     9982<>CALL
      9984<>CALL     9985<>CALL     9987<>CALL
TOL$CHECK_CALL_SEQUENCE
      7975**DCL-ENT  8738--CALL
TOL$CLEAR_DATA
      7980**DCL-ENT  9696--CALL
TOL$GET_CATALOG
      7981**DCL-ENT  9285--CALL
TOL$GET_DATA
      7978**DCL-ENT  9396--CALL     9562--CALL
TOL$GET_DECK
      7982**DCL-ENT 10537--CALL
TOL$GET_NIO_DECK
      7983**DCL-ENT 10530--CALL
TOL$SAVE_DATA
      7979**DCL-ENT  9406--CALL     9572--CALL
TOM$ALLOCATE_SEG IN PROCEDURE TOM$SEEK_DECK
     10164**PROC     9982--CALL
TOM$ALLOCATE_SEGTBLS IN PROCEDURE TOM$MME_DATADT
      9882**PROC     9820--CALL
TOM$BUILD_CATALOG_ENTRY_KEY IN PROCEDURE TOM$MME_DATADT
      9849**PROC     9816--CALL
TOM$BUILD_CATALOG_KEY IN PROCEDURE TOM$MME_CATADT
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:307  
      8773**PROC     8675--CALL
TOM$BUILD_NIO_ENTRY IN PROCEDURE TOM$RETURN_NIO_ENTRIES
      9454**PROC     9404--CALL
TOM$BUILD_STD_ENTRY IN PROCEDURE TOM$RETURN_STD_ENTRIES
      9615**PROC     9570--CALL
TOM$CLEAR_EXCESS_DATA IN PROCEDURE TOM$MME_CATADT
      9689**PROC     8689--CALL
TOM$COPY_CALL_SEQUENCE IN PROCEDURE TOM$SEEK_DECK
     10209**PROC     9984--CALL
TOM$COUNT_APPL_CATALOGS IN PROCEDURE TOM$HAVE_USER_PICK
      9012**PROC     8875--CALL
TOM$FETCH_CATALOG_TABLE IN PROCEDURE TOM$HAVE_USER_PICK
      8900**PROC     8872--CALL
TOM$FIND_SEG_FOR_ENTRY IN PROCEDURE TOM$SEEK_DECK
     10024**PROC     9970--CALL     9979--CALL
TOM$FIND_UNUSED_SEG IN PROCEDURE TOM$SEEK_DECK
     10123**PROC     9981--CALL
TOM$FREE_DATA_SEGMENT
     10668**PROC    10088--CALL
TOM$FREE_SEG_FOR_ENTRY IN PROCEDURE TOM$SEEK_DECK
     10073**PROC     9975--CALL
TOM$GET_DATA_SEGMENT
     10623**PROC     8869--CALL     9888--CALL    10176--CALL
TOM$GET_USER_CHOICE IN PROCEDURE TOM$HAVE_USER_PICK
      9111**PROC     8879--CALL
TOM$HAVE_USER_PICK IN PROCEDURE TOM$BUILD_CATALOG_KEY
      8851**PROC     8782--CALL
TOM$ITRTBL
      8310**DCL      8871<<ASSIGN
TOM$ITRTBL.CATA_DATA
      8329**DCL      8976--ASSIGN   9023>>ASSIGN
TOM$ITRTBL.CATA_DATA.DECK#
      8330**DCL      8984>>ASSIGN
TOM$ITRTBL.CATA_DATA.NUM_ENTRIES
      8332**DCL      8980>>ASSIGN   8986>>DOINDEX
TOM$ITRTBL.CATA_DATA.OBJ_KEY_INX
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:308  
      8336**DCL      8980<<ASSIGN   8980>>ASSIGN   8983<<ASSIGN   8987>>ASSIGN
TOM$ITRTBL.CATA_KEYS
      8311**DCL      8328--REDEF    8971--ASSIGN   8977--ASSIGN
TOM$ITRTBL.CATA_KEYS.CNAME
      8314**DCL      8327--REDEF
TOM$ITRTBL.CATA_KEYS.CNAME.TYP
      8317**DCL      8974>>IF
TOM$ITRTBL.CATA_KEYS_
      8328**DCL      9020--DOWHILE  9021>>CALLBLT
TOM$ITRTBL.OBJ_KEYS
      8338**DCL      8351--REDEF    8988--ASSIGN
TOM$ITRTBL.OBJ_KEYS.ONAME
      8341**DCL      8350--REDEF
TOM$ITRTBL.OBJ_KEYS.ONAME.FW_REV
      8346**DCL      9080>>ASSIGN
TOM$ITRTBL.OBJ_KEYS.ONAME.ITR_TYP
      8342**DCL      9076>>IF
TOM$MATCH_ICC
     10564**PROC     8667--CALL     9815--CALL
TOM$MME_CATADT
      8655**PROC     8588--CALL
TOM$MME_DATADT
      9802**PROC     8591--CALL
TOM$MME_FREEZE
     10745**PROC     8594--CALL
TOM$MME_UNFREZ
     10767**PROC     8596--CALL
TOM$MOVE_SECTORS IN PROCEDURE TOM$RETURN_DATA
     10335**PROC    10286--CALL
TOM$READ_CATALOG IN PROCEDURE TOM$MME_CATADT
      9274**PROC     8681--CALL
TOM$READ_DECK IN PROCEDURE TOM$MME_DATADT
     10513**PROC     9824--CALL     9985--CALL
TOM$READ_DECK_KEY IN PROCEDURE TOM$MME_DATADT
     10420**PROC     9823--CALL     9983--CALL
TOM$REFORMAT_CATALOG_DATA IN PROCEDURE TOM$MME_CATADT
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:309  
      9313**PROC     8687--CALL
TOM$REFORMAT_INIT IN PROCEDURE TOM$MME_CATADT
      8723**PROC     8669--CALL
TOM$RETURN_DATA IN PROCEDURE TOM$SEEK_DECK
     10265**PROC     9987--CALL
TOM$RETURN_NIO_ENTRIES IN PROCEDURE TOM$REFORMAT_CATALOG_DATA
      9382**PROC     9322--CALL
TOM$RETURN_STD_ENTRIES IN PROCEDURE TOM$REFORMAT_CATALOG_DATA
      9549**PROC     9328--CALL
TOM$SEEK_DECK IN PROCEDURE TOM$MME_DATADT
      9955**PROC     9821--CALL
TOM$SEG
      8396**DCL     10179<<ASSIGN
TOM$SEG.CALL_SEQUENCE
      8397**DCL     10222--ASSIGN
TOM$SEG.LAST_SECTOR
      8401**DCL     10283>>IF      10370>>IF      10376>>ASSIGN
TOM$SEG.SECTORS
      8403**DCL     10361--ASSIGN
TOM$SEGTBL
      8376**DCL     10089<<ASSIGN
TOM$SEGTBL.ACTIVE
      8382**DCL     10085>>IF      10137>>IF      10177<<ASSIGN
TOM$SEGTBL.ENTRY#
      8384**DCL     10038>>IF      10178<<ASSIGN
TOM$SEGTBL.V
      8377**DCL     10088<>CALL    10176<>CALL
TOM$SEGTBL.V.PTR$
      8380**DCL     10179>>ASSIGN  10222>>ASSIGN  10279>>ASSIGN
TOM$SEGTBLS
      8362**DCL      9889<<ASSIGN  10033--ASSIGN  10082--ASSIGN  10132--ASSIGN  10173--ASSIGN  10219--ASSIGN
     10278--ASSIGN
TOM$SET_ERROR_RETURN_VALUES IN PROCEDURE TOM$MME_CATADT
      9731**PROC     8671--CALL     8677--CALL     8683--CALL
TOM$SET_ITR_CATALOG_KEY IN PROCEDURE TOM$BUILD_CATALOG_KEY
      8801**PROC     8781--CALL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:310  
TOM$SET_MDR_CATALOG_KEY IN PROCEDURE TOM$BUILD_CATALOG_KEY
      9205**PROC     8786--CALL
TOM$SET_NIO_CATALOG_KEY IN PROCEDURE TOM$BUILD_CATALOG_KEY
      9240**PROC     8784--CALL
TOM$SET_RETURN_VALUES
     10713**PROC     8691--CALL     9827--CALL
TOM$SHOW_APPL_CHOICES IN PROCEDURE TOM$HAVE_USER_PICK
      9044**PROC     8878--CALL
TOM_ERROR_CODE
      8163**DCL      9000<>CALL     9325<>CALL     9331<>CALL     9707<>CALL     9973<>CALL    10095<>CALL
     10144<>CALL    10393<>CALL    10475<>CALL    10481<>CALL    10608<>CALL
TOM_ERROR_CODE.ERR#
      8193**DCL      8999<<ASSIGN   9324<<ASSIGN   9330<<ASSIGN   9706<<ASSIGN   9972<<ASSIGN  10094<<ASSIGN
     10143<<ASSIGN  10392<<ASSIGN  10474<<ASSIGN  10480<<ASSIGN  10607<<ASSIGN
TOP$TCP.DEVICE_CODE
      8471**DCL      9211>>DOCASE
TOP$TCP.FICCDD
      8454**DCL      8460--REDEF    8463--REDEF
TOP$TCP.FIRMWARE.CHOICE_MADE
      8507**DCL      8864>>IF       8882<<ASSIGN
TOP$TCP.FIRMWARE.TYPE
      8509**DCL      8807>>DOSELCT
TOP$TCP.ICC.ICC#
      8465**DCL     10598>>IF
TOP$TCP.TEST_TYPE
      8467**DCL      8779>>DOSELCT  9320>>DOSELCT  9818>>DOSELCT 10528>>DOSELCT
TOT$ASCII_BCD
      7974**DCL-ENT  9463--CALL     9635--CALL     9642--CALL
TOT$CONSOLE_IN
      7976**DCL-ENT  9159--CALL
TOT$CONSOLE_OUT
      7977**DCL-ENT  9068--CALL     9094--CALL
TOT$DMC.TOM$ITRTBL
      8431**DCL      8869<>CALL
TOT$DMC.TOM$ITRTBL.PTR$
      8434**DCL      8310--IMP-PTR  8867>>IF       8871>>ASSIGN   8971>>ASSIGN   8974>>IF       8976>>ASSIGN
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:311  
      8977>>ASSIGN   8980>>ASSIGN   8980>>ASSIGN   8980>>ASSIGN   8983>>ASSIGN   8984>>ASSIGN   8986>>DOINDEX
      8987>>ASSIGN   8988>>ASSIGN   9021>>CALLBLT  9023>>ASSIGN   9076>>IF       9080>>ASSIGN
TOT$DMC.TOM$SEGTBLS
      8436**DCL      9888<>CALL
TOT$DMC.TOM$SEGTBLS.PTR$
      8439**DCL      8362--IMP-PTR  9886>>IF       9889>>ASSIGN  10033>>ASSIGN  10082>>ASSIGN  10132>>ASSIGN
     10173>>ASSIGN  10219>>ASSIGN  10278>>ASSIGN
TOT$DMC.TOP$TCP.PTR$
      8429**DCL      8451--IMP-PTR  8779>>DOSELCT  8807>>DOSELCT  8864>>IF       8882>>ASSIGN   9211>>DOCASE
      9320>>DOSELCT  9818>>DOSELCT 10528>>DOSELCT 10598>>IF
TOT$ECP.TEST_REQ
      8540**DCL      8542--REDEF
TOX$ERROR
      7984**DCL-ENT  9000--CALL     9325--CALL     9331--CALL     9707--CALL     9973--CALL    10144--CALL
     10393--CALL    10481--CALL    10653--CALL    10696--CALL
TOX$SCREECH
      7985**DCL-ENT 10095--CALL    10475--CALL    10608--CALL
UC_PROMPT IN PROCEDURE TOM$GET_USER_CHOICE
      9115**DCL      9145--DCLINIT
VALUE IN PROCEDURE TOM$BUILD_NIO_ENTRY
      9457**DCL      9479<<CALLBLT  9480>>ASSIGN   9483<<CALLBLT  9484>>ASSIGN
WORD_COUNT IN PROCEDURE TOM$FREE_DATA_SEGMENT
     10670**DCL     10668--PROC    10690>>ASSIGN
WORD_COUNT IN PROCEDURE TOM$GET_DATA_SEGMENT
     10625**DCL     10623--PROC    10647>>ASSIGN
WORD_COUNT IN PROCEDURE TOM$MOVE_SECTORS
     10339**DCL     10335--PROC    10384<<ASSIGN  10387>>ASSIGN  10388>>ASSIGN
WORD_VECTOR IN PROCEDURE TOM$FREE_DATA_SEGMENT
     10671**DCL     10668--PROC    10691--ASSIGN
WORD_VECTOR IN PROCEDURE TOM$GET_DATA_SEGMENT
     10626**DCL     10623--PROC    10648--ASSIGN
X1 IN PROCEDURE TOM$BUILD_CATALOG_ENTRY_KEY
      9851**DCL      9849--PROC     9856>>ASSIGN
X1 IN PROCEDURE TOM$MME_CATADT
      8657**DCL      8655--PROC     8669<>CALL
X1 IN PROCEDURE TOM$MME_DATADT
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:312  
      9804**DCL      9802--PROC     9816<>CALL
X1 IN PROCEDURE TOM$REFORMAT_INIT
      8725**DCL      8723--PROC     8736>>ASSIGN
X2 IN PROCEDURE TOM$MME_CATADT
      8658**DCL      8655--PROC     8669<>CALL     8681<>CALL
X2 IN PROCEDURE TOM$MME_DATADT
      9805**DCL      9802--PROC     9821<>CALL     9824<>CALL
X2 IN PROCEDURE TOM$READ_CATALOG
      9276**DCL      9274--PROC     9285<>CALL
X2 IN PROCEDURE TOM$READ_DECK
     10517**DCL     10513--PROC    10530<>CALL    10537<>CALL
X2 IN PROCEDURE TOM$REFORMAT_INIT
      8726**DCL      8723--PROC     8738<>CALL
X2 IN PROCEDURE TOM$SEEK_DECK
      9958**DCL      9955--PROC     9985<>CALL
X3 IN PROCEDURE TOM$MME_CATADT
      8659**DCL      8655--PROC     8669<>CALL     8681<>CALL
X3 IN PROCEDURE TOM$MME_DATADT
      9806**DCL      9802--PROC     9821<>CALL     9824<>CALL
X3 IN PROCEDURE TOM$READ_CATALOG
      9277**DCL      9274--PROC     9285<>CALL
X3 IN PROCEDURE TOM$READ_DECK
     10518**DCL     10513--PROC    10530<>CALL    10537<>CALL
X3 IN PROCEDURE TOM$REFORMAT_INIT
      8727**DCL      8723--PROC     8738<>CALL
X3 IN PROCEDURE TOM$SEEK_DECK
      9959**DCL      9955--PROC     9985<>CALL
X4 IN PROCEDURE TOM$MME_DATADT
      9807**DCL      9802--PROC     9821<>CALL
X4 IN PROCEDURE TOM$RETURN_DATA
     10269**DCL     10265--PROC    10283>>IF      10283>>IF      10286<>CALL
X4 IN PROCEDURE TOM$SEEK_DECK
      9960**DCL      9955--PROC     9967>>IF       9987<>CALL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:313  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:314  
              FULL UREF LISTING

B$ALT
      8220**DCL
B$ALT.BRKCNT
      8221**DCL
B$ALT.DCB#
      8221**DCL
B$ALT.ERR.CODE
      8222**DCL
B$ALT.ERR.FCG
      8222**DCL
B$ALT.ERR.MID
      8222**DCL
B$ALT.ERR.MON
      8222**DCL
B$ALT.ERR.SEV
      8222**DCL
B$ALT.EVSC
      8221**DCL
B$ALT.FPT
      8220**DCL
B$ALT.FPT.FCG
      8220**DCL
B$ALT.FPT.PMME
      8220**DCL
B$ALT.P#
      8224**DCL
B$ALT.SSFRAME
      8220**DCL
B$ALT.SUBC
      8221**DCL
B$TCB
      8227**DCL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:315  
B$TCB.CURRSZ
      8227**DCL
B$TCB.STK$
      8227**DCL
B$TCB.TCBAVSZ
      8227**DCL
CALL_SEQUENCE.CAT_CKSM
      8078**DCL
CALL_SEQUENCE.CHECKSUM
      8084**DCL
CALL_SEQUENCE.ENTRY_COUNT
      8082**DCL
CALL_SEQUENCE.RELOCATION
      8086**DCL
CATALOG_KEY.NAME
      8202**DCL
CATALOG_KEY.SIZE
      8200**DCL
CONSOLE_FPT
      8247**DCL
CONSOLE_FPT.BUF_.BOUND
      8247**DCL
CONSOLE_FPT.BUF_.BUF$
      8249**DCL
CONSOLE_FPT.IDBUF_
      8249**DCL
CONSOLE_FPT.KEY_
      8247**DCL
CONSOLE_FPT.V
      8250**DCL
CONSOLE_FPT.V.DCB#
      8250**DCL
CONSOLE_FPT.V.DVBYTE
      8255**DCL
CONSOLE_FPT.V.DVBYTE.BIN#
      8256**DCL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:316  
CONSOLE_FPT.V.DVBYTE.BP#
      8256**DCL
CONSOLE_FPT.V.DVBYTE.CONT#
      8258**DCL
CONSOLE_FPT.V.DVBYTE.NODAT#
      8257**DCL
CONSOLE_FPT.V.DVBYTE.REREAD#
      8256**DCL
CONSOLE_FPT.V.DVBYTE.RRR#
      8257**DCL
CONSOLE_FPT.V.DVBYTE.TOP#
      8255**DCL
CONSOLE_FPT.V.DVBYTE.TRANS#
      8257**DCL
CONSOLE_FPT.V.EVENT#
      8255**DCL
CONSOLE_FPT.V.FULL#
      8252**DCL
CONSOLE_FPT.V.ID#
      8251**DCL
CONSOLE_FPT.V.IOERROK#
      8254**DCL
CONSOLE_FPT.V.KEYTYPE#
      8254**DCL
CONSOLE_FPT.V.NEWKEY#
      8253**DCL
CONSOLE_FPT.V.NOTIME#
      8253**DCL
CONSOLE_FPT.V.ODFNC#
      8259**DCL
CONSOLE_FPT.V.ONEWKEY#
      8252**DCL
CONSOLE_FPT.V.REWRITE#
      8253**DCL
CONSOLE_FPT.V.SEED#
      8255**DCL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:317  
CONSOLE_FPT.V.WAIT#
      8250**DCL
CONSOLE_FPT.V_
      8247**DCL
CP6_NIO_ENTRY.CLASS
      8035**DCL
CUR_ITR_CATAS IN PROCEDURE TOM$HAVE_USER_PICK
      8854**DCL
DCW IN PROCEDURE TOM$MOVE_SECTORS
     10346**DCL
DCW.TYPE IN PROCEDURE TOM$MOVE_SECTORS
     10349**DCL
DCW_I.AD
      7992**DCL
DCW_I.SIZE
      7994**DCL
DCW_I.TYP
      7993**DCL
DCW_O.AD
      7996**DCL
DCW_O.SIZE
      7998**DCL
DCW_O.TYP
      7997**DCL
ENTER_PROMPT.PROMPT_ IN PROCEDURE TOM$GET_USER_CHOICE
      9145**DCL
ENTER_PROMPT.STATION_ IN PROCEDURE TOM$GET_USER_CHOICE
      9143**DCL
ENTER_PROMPT.V.DCB# IN PROCEDURE TOM$GET_USER_CHOICE
      9147**DCL
ENTER_PROMPT.V.DVBYTE# IN PROCEDURE TOM$GET_USER_CHOICE
      9147**DCL
ENTER_PROMPT.V.DVBYTE#.BIN# IN PROCEDURE TOM$GET_USER_CHOICE
      9148**DCL
ENTER_PROMPT.V.DVBYTE#.TRANS# IN PROCEDURE TOM$GET_USER_CHOICE
      9148**DCL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:318  
ENTER_PROMPT.V.DVBYTE#.VFC# IN PROCEDURE TOM$GET_USER_CHOICE
      9148**DCL
ENTER_PROMPT.V_ IN PROCEDURE TOM$GET_USER_CHOICE
      9141**DCL
FREE_BUFFER.V.AUTOSEG# IN PROCEDURE TOM$FREE_DATA_SEGMENT
     10684**DCL
FREE_BUFFER.V.COMMON# IN PROCEDURE TOM$FREE_DATA_SEGMENT
     10684**DCL
FREE_BUFFER.V_ IN PROCEDURE TOM$FREE_DATA_SEGMENT
     10683**DCL
GET_BUFFER.V.AUTOSEG# IN PROCEDURE TOM$GET_DATA_SEGMENT
     10640**DCL
GET_BUFFER.V.COMMON# IN PROCEDURE TOM$GET_DATA_SEGMENT
     10640**DCL
GET_BUFFER.V.FREE# IN PROCEDURE TOM$GET_DATA_SEGMENT
     10640**DCL
GET_BUFFER.V.PROTECTION# IN PROCEDURE TOM$GET_DATA_SEGMENT
     10641**DCL
GET_BUFFER.V.VIRTONLY# IN PROCEDURE TOM$GET_DATA_SEGMENT
     10641**DCL
GET_BUFFER.V_ IN PROCEDURE TOM$GET_DATA_SEGMENT
     10639**DCL
GET_DECKFILE_DATA.BUF_.BOUND IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8941**DCL
GET_DECKFILE_DATA.BUF_.BUF$ IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8942**DCL
GET_DECKFILE_DATA.IDBUF_ IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8943**DCL
GET_DECKFILE_DATA.KEY_.BOUND IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8939**DCL
GET_DECKFILE_DATA.KEY_.KEY$ IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8940**DCL
GET_DECKFILE_DATA.V.DCB# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8943**DCL
GET_DECKFILE_DATA.V.DVBYTE IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8953**DCL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:319  
GET_DECKFILE_DATA.V.DVBYTE.BIN# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8954**DCL
GET_DECKFILE_DATA.V.DVBYTE.BP# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8953**DCL
GET_DECKFILE_DATA.V.DVBYTE.CONT# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8956**DCL
GET_DECKFILE_DATA.V.DVBYTE.NODAT# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8955**DCL
GET_DECKFILE_DATA.V.DVBYTE.TOP# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8953**DCL
GET_DECKFILE_DATA.V.DVBYTE.TRANS# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8955**DCL
GET_DECKFILE_DATA.V.DVBYTE.VFC# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8954**DCL
GET_DECKFILE_DATA.V.EVENT# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8952**DCL
GET_DECKFILE_DATA.V.FULL# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8945**DCL
GET_DECKFILE_DATA.V.ID# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8944**DCL
GET_DECKFILE_DATA.V.IDS# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8945**DCL
GET_DECKFILE_DATA.V.IOERROK# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8946**DCL
GET_DECKFILE_DATA.V.KEYCHNG# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8945**DCL
GET_DECKFILE_DATA.V.KEYR# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8944**DCL
GET_DECKFILE_DATA.V.KEYS# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8944**DCL
GET_DECKFILE_DATA.V.KEYTYPE# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8952**DCL
GET_DECKFILE_DATA.V.ODFNC# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8957**DCL
GET_DECKFILE_DATA.V.RECNUM# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8957**DCL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:320  
GET_DECKFILE_DATA.V.REREADPOS# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8958**DCL
GET_DECKFILE_DATA.V.SEED# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8953**DCL
GET_DECKFILE_DATA.V.SINPUTSIZE# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8957**DCL
GET_DECKFILE_DATA.V.STRPVFC# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8956**DCL
GET_DECKFILE_DATA.V.WAIT# IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8943**DCL
GET_DECKFILE_DATA.V_ IN PROCEDURE TOM$FETCH_CATALOG_TABLE
      8939**DCL
M$ACCT
      6119**DCL-ENT
M$ACTIVATE
      6122**DCL-ENT
M$ALIB
      6115**DCL-ENT
M$ASUSER
      6117**DCL-ENT
M$ATTACH
      6124**DCL-ENT
M$BADPP
      6142**DCL-ENT
M$CGCTL
      6123**DCL-ENT
M$CGINFO
      6123**DCL-ENT
M$CHECK
      6104**DCL-ENT
M$CHGUNIT
      6162**DCL-ENT
M$CLOSE
      6102**DCL-ENT
M$CLRSTK
      6160**DCL-ENT
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:321  
M$CMDVAR
      6171**DCL-ENT
M$CONFIG
      6132**DCL-ENT
M$CORRES
      6107**DCL-ENT
M$CPEXIT
      6116**DCL-ENT
M$CVM
      6140**DCL-ENT
M$CVOL
      6105**DCL-ENT
M$DCLFLD
      6132**DCL-ENT
M$DEACTIVATE
      6122**DCL-ENT
M$DECKFILE
      8582**DCL
M$DELREC
      6104**DCL-ENT
M$DEQ
      6169**DCL-ENT
M$DETACH
      6124**DCL-ENT
M$DEVICE
      6106**DCL-ENT
M$DISPLAY
      6169**DCL-ENT
M$DISPRES
      6109**DCL-ENT
M$DLIB
      6115**DCL-ENT
M$DRIBBLE
      6132**DCL-ENT
M$DRTN
      6160**DCL-ENT
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:322  
M$DSUSER
      6117**DCL-ENT
M$ENQ
      6168**DCL-ENT
M$EOM
      6127**DCL-ENT
M$ERASE
      6133**DCL-ENT
M$ERR
      6114**DCL-ENT
M$ERRMSG
      6165**DCL-ENT
M$EVENT
      6157**DCL-ENT
M$EXHUME
      6166**DCL-ENT
M$EXIT
      6114**DCL-ENT
M$EXTEND
      6106**DCL-ENT
M$FDP
      6138**DCL-ENT
M$FEBOOT
      6130**DCL-ENT
M$FECTL
      6131**DCL-ENT
M$FEDUMP
      6130**DCL-ENT
M$FID
      6165**DCL-ENT
M$FINDPROC
      6119**DCL-ENT
M$FSUSER
      6117**DCL-ENT
M$FVP
      6139**DCL-ENT
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:323  
M$FWCG
      6123**DCL-ENT
M$GBPL
      6143**DCL-ENT
M$GDDL
      6139**DCL-ENT
M$GDP
      6138**DCL-ENT
M$GETDCB
      6108**DCL-ENT
M$GETMOUSE
      6148**DCL-ENT
M$GETPM
      6149**DCL-ENT
M$GJOB
      6167**DCL-ENT
M$GLINEATTR
      6127**DCL-ENT
M$GOODPP
      6142**DCL-ENT
M$GPLATEN
      6135**DCL-ENT
M$GPROMPT
      6134**DCL-ENT
M$GTRMATTR
      6128**DCL-ENT
M$GTRMCTL
      6126**DCL-ENT
M$GTRMTAB
      6129**DCL-ENT
M$GVP
      6138**DCL-ENT
M$HELP
      6165**DCL-ENT
M$INT
      6157**DCL-ENT
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:324  
M$INTRTN
      6118**DCL-ENT
M$IOQ
      6153**DCL-ENT
M$JOBSTATS
      6167**DCL-ENT
M$KEYIN
      6107**DCL-ENT
M$LDEV
      6102**DCL-ENT
M$LDTRC
      6115**DCL-ENT
M$LIMIT
      6108**DCL-ENT
M$LINES
      6107**DCL-ENT
M$LINK
      6114**DCL-ENT
M$MADMUCK
      6110**DCL-ENT
M$MAKUSER
      6141**DCL-ENT
M$MBS
      6109**DCL-ENT
M$MDFFLD
      6133**DCL-ENT
M$MERC
      6158**DCL-ENT
M$MERCS
      6159**DCL-ENT
M$MIRROR
      6153**DCL-ENT
M$MONINFO
      6170**DCL-ENT
M$MPL
      6143**DCL-ENT
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:325  
M$NODEINFO
      6134**DCL-ENT
M$NXTUSR
      6168**DCL-ENT
M$OCMSG
      6166**DCL-ENT
M$OLAY
      6114**DCL-ENT
M$OPEN
      6102**DCL-ENT
M$PAS
      6143**DCL-ENT
M$PATHCON
      6166**DCL-ENT
M$PDS
      6137**DCL-ENT
M$PFIL
      6104**DCL-ENT
M$PLATEN
      6128**DCL-ENT
M$PRECORD
      6106**DCL-ENT
M$PROCNAME
      6119**DCL-ENT
M$PROFILE
      6130**DCL-ENT
M$RACST
      6110**DCL-ENT
M$RDSYSLOG
      6151**DCL-ENT
M$RELDCB
      6108**DCL-ENT
M$RELRES
      6109**DCL-ENT
M$RELSTARF
      6111**DCL-ENT
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:326  
M$REM
      6111**DCL-ENT
M$RENV
      6158**DCL-ENT
M$REQUIRE
      6110**DCL-ENT
M$RETRY
      6159**DCL-ENT
M$RETRYS
      6159**DCL-ENT
M$REW
      6105**DCL-ENT
M$RLSFLD
      6133**DCL-ENT
M$RPRIV
      6161**DCL-ENT
M$RSPP
      6140**DCL-ENT
M$RSWITCH
      6162**DCL-ENT
M$RUE
      6168**DCL-ENT
M$SAD
      6141**DCL-ENT
M$SAVE
      6117**DCL-ENT
M$SCON
      6118**DCL-ENT
M$SCREECH
      6116**DCL-ENT
M$SENV
      6158**DCL-ENT
M$SETFMA
      6102**DCL-ENT
M$SETFP
      6131**DCL-ENT
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:327  
M$SINPUT
      6129**DCL-ENT
M$SLCFLD
      6134**DCL-ENT
M$SMOUSE
      6148**DCL-ENT
M$SMPRT
      6140**DCL-ENT
M$SPRIV
      6161**DCL-ENT
M$SSC
      6141**DCL-ENT
M$SSWITCH
      6161**DCL-ENT
M$STATE
      6170**DCL-ENT
M$STD
      6142**DCL-ENT
M$STIMER
      6156**DCL-ENT
M$STLPP
      6139**DCL-ENT
M$STRAP
      6156**DCL-ENT
M$STRMATTR
      6128**DCL-ENT
M$STRMCTL
      6126**DCL-ENT
M$STRMTAB
      6129**DCL-ENT
M$SYMBIO
      6167**DCL-ENT
M$SYSCON
      6153**DCL-ENT
M$SYSID
      6171**DCL-ENT
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:328  
M$TDCLOSE
      6152**DCL-ENT
M$TDIO
      6152**DCL-ENT
M$TDOPEN
      6151**DCL-ENT
M$TDREQCPU
      6152**DCL-ENT
M$TEMPWROC
      6146**DCL-ENT
M$TIME
      6169**DCL-ENT
M$TRAP
      6156**DCL-ENT
M$TRMISC
      6131**DCL-ENT
M$TRMPRG
      6127**DCL-ENT
M$TRTN
      6160**DCL-ENT
M$TRUNC
      6103**DCL-ENT
M$TTIMER
      6156**DCL-ENT
M$UC
      6126**DCL
M$UMPL
      6143**DCL-ENT
M$UNFID
      6165**DCL-ENT
M$UNLATCH
      6122**DCL-ENT
M$UNSHARE
      6119**DCL-ENT
M$USRFIELD
      6162**DCL-ENT
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:329  
M$VIRTUAL
      6137**DCL-ENT
M$WAIT
      6160**DCL-ENT
M$WEOF
      6105**DCL-ENT
M$WRITE
      6103**DCL-ENT
M$WRSYSLOG
      6151**DCL-ENT
M$XCON
      6157**DCL-ENT
M$XCONRTN
      6118**DCL-ENT
M$XEQTIME
      6170**DCL-ENT
M$XFLUSH
      6111**DCL-ENT
M$XMOUSE
      6148**DCL-ENT
M$XXX
      6114**DCL-ENT
M$YC
      6116**DCL-ENT
MME.INST
      7933**DCL
MME.INST.OP
      7935**DCL
MME.WD_1
      7936**DCL
MME.WD_2
      7937**DCL
MME.WD_3
      7938**DCL
MME.WD_4
      7939**DCL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:330  
MME.WD_5
      7940**DCL
MME.WD_6
      7941**DCL
MREG.E
      7963**DCL
MREG.X0
      7953**DCL
MREG.X5
      7958**DCL
MREG.X6
      7959**DCL
MREG.X7
      7960**DCL
MY_CALL_SEQUENCE.CAT_CKSM
      8110**DCL
MY_CALL_SEQUENCE.CHECKSUM
      8116**DCL
MY_CALL_SEQUENCE.DECK
      8106**DCL
MY_CALL_SEQUENCE.ENTRY_COUNT
      8114**DCL
MY_CALL_SEQUENCE.FDCWP
      8102**DCL
MY_CALL_SEQUENCE.NEXT_ENTRY
      8108**DCL
MY_CALL_SEQUENCE.NO_MORE
      8120**DCL
MY_CALL_SEQUENCE.RELOCATION
      8118**DCL
MY_CALL_SEQUENCE.STATUSP
      8104**DCL
Q.OLD_FORMAT IN PROCEDURE TOM$MATCH_ICC
     10572**DCL
READ_IO
      8279**DCL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:331  
READ_IO.BUF_.BOUND
      8281**DCL
READ_IO.BUF_.BUF$
      8282**DCL
READ_IO.IDBUF_
      8283**DCL
READ_IO.KEY_
      8279**DCL
READ_IO.KEY_.BOUND
      8279**DCL
READ_IO.KEY_.KEY$
      8280**DCL
READ_IO.V
      8283**DCL
READ_IO.V.DCB#
      8283**DCL
READ_IO.V.DVBYTE
      8293**DCL
READ_IO.V.DVBYTE.BIN#
      8294**DCL
READ_IO.V.DVBYTE.BP#
      8293**DCL
READ_IO.V.DVBYTE.CONT#
      8296**DCL
READ_IO.V.DVBYTE.NODAT#
      8295**DCL
READ_IO.V.DVBYTE.TOP#
      8293**DCL
READ_IO.V.DVBYTE.TRANS#
      8295**DCL
READ_IO.V.DVBYTE.VFC#
      8294**DCL
READ_IO.V.EVENT#
      8292**DCL
READ_IO.V.FULL#
      8285**DCL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:332  
READ_IO.V.ID#
      8284**DCL
READ_IO.V.IDS#
      8285**DCL
READ_IO.V.IOERROK#
      8286**DCL
READ_IO.V.KEYCHNG#
      8285**DCL
READ_IO.V.KEYR#
      8284**DCL
READ_IO.V.KEYS#
      8284**DCL
READ_IO.V.KEYTYPE#
      8292**DCL
READ_IO.V.ODFNC#
      8297**DCL
READ_IO.V.RECNUM#
      8297**DCL
READ_IO.V.REREADPOS#
      8298**DCL
READ_IO.V.SEED#
      8293**DCL
READ_IO.V.SINPUTSIZE#
      8297**DCL
READ_IO.V.STRPVFC#
      8296**DCL
READ_IO.V.WAIT#
      8283**DCL
READ_IO.V_
      8279**DCL
READ_OBJECT_KEY.BUF_ IN PROCEDURE TOM$READ_DECK_KEY
     10446**DCL
READ_OBJECT_KEY.BUF_.BOUND IN PROCEDURE TOM$READ_DECK_KEY
     10446**DCL
READ_OBJECT_KEY.BUF_.BUF$ IN PROCEDURE TOM$READ_DECK_KEY
     10447**DCL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:333  
READ_OBJECT_KEY.IDBUF_ IN PROCEDURE TOM$READ_DECK_KEY
     10448**DCL
READ_OBJECT_KEY.KEY_ IN PROCEDURE TOM$READ_DECK_KEY
     10444**DCL
READ_OBJECT_KEY.KEY_.BOUND IN PROCEDURE TOM$READ_DECK_KEY
     10444**DCL
READ_OBJECT_KEY.KEY_.KEY$ IN PROCEDURE TOM$READ_DECK_KEY
     10445**DCL
READ_OBJECT_KEY.V.DCB# IN PROCEDURE TOM$READ_DECK_KEY
     10448**DCL
READ_OBJECT_KEY.V.DVBYTE IN PROCEDURE TOM$READ_DECK_KEY
     10458**DCL
READ_OBJECT_KEY.V.DVBYTE.BIN# IN PROCEDURE TOM$READ_DECK_KEY
     10459**DCL
READ_OBJECT_KEY.V.DVBYTE.BP# IN PROCEDURE TOM$READ_DECK_KEY
     10458**DCL
READ_OBJECT_KEY.V.DVBYTE.CONT# IN PROCEDURE TOM$READ_DECK_KEY
     10461**DCL
READ_OBJECT_KEY.V.DVBYTE.NODAT# IN PROCEDURE TOM$READ_DECK_KEY
     10460**DCL
READ_OBJECT_KEY.V.DVBYTE.TOP# IN PROCEDURE TOM$READ_DECK_KEY
     10458**DCL
READ_OBJECT_KEY.V.DVBYTE.TRANS# IN PROCEDURE TOM$READ_DECK_KEY
     10460**DCL
READ_OBJECT_KEY.V.DVBYTE.VFC# IN PROCEDURE TOM$READ_DECK_KEY
     10459**DCL
READ_OBJECT_KEY.V.EVENT# IN PROCEDURE TOM$READ_DECK_KEY
     10457**DCL
READ_OBJECT_KEY.V.FULL# IN PROCEDURE TOM$READ_DECK_KEY
     10450**DCL
READ_OBJECT_KEY.V.ID# IN PROCEDURE TOM$READ_DECK_KEY
     10449**DCL
READ_OBJECT_KEY.V.IDS# IN PROCEDURE TOM$READ_DECK_KEY
     10450**DCL
READ_OBJECT_KEY.V.IOERROK# IN PROCEDURE TOM$READ_DECK_KEY
     10451**DCL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:334  
READ_OBJECT_KEY.V.KEYCHNG# IN PROCEDURE TOM$READ_DECK_KEY
     10450**DCL
READ_OBJECT_KEY.V.KEYR# IN PROCEDURE TOM$READ_DECK_KEY
     10449**DCL
READ_OBJECT_KEY.V.KEYS# IN PROCEDURE TOM$READ_DECK_KEY
     10449**DCL
READ_OBJECT_KEY.V.KEYTYPE# IN PROCEDURE TOM$READ_DECK_KEY
     10457**DCL
READ_OBJECT_KEY.V.ODFNC# IN PROCEDURE TOM$READ_DECK_KEY
     10462**DCL
READ_OBJECT_KEY.V.RECNUM# IN PROCEDURE TOM$READ_DECK_KEY
     10462**DCL
READ_OBJECT_KEY.V.REREADPOS# IN PROCEDURE TOM$READ_DECK_KEY
     10463**DCL
READ_OBJECT_KEY.V.SEED# IN PROCEDURE TOM$READ_DECK_KEY
     10458**DCL
READ_OBJECT_KEY.V.SINPUTSIZE# IN PROCEDURE TOM$READ_DECK_KEY
     10462**DCL
READ_OBJECT_KEY.V.STRPVFC# IN PROCEDURE TOM$READ_DECK_KEY
     10461**DCL
READ_OBJECT_KEY.V.WAIT# IN PROCEDURE TOM$READ_DECK_KEY
     10448**DCL
READ_OBJECT_KEY.V_ IN PROCEDURE TOM$READ_DECK_KEY
     10444**DCL
STATUS IN PROCEDURE TOM$MOVE_SECTORS
     10352**DCL
STATUS_O$
      8127**DCL
STAT_I.AD
      8131**DCL
STAT_I.RES
      8132**DCL
STAT_I.W1
      8130**DCL
STAT_O.AD
      8135**DCL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:335  
STAT_O.RES
      8136**DCL
STAT_O.W1
      8134**DCL
STAT_U.AD
      8139**DCL
STAT_U.RES
      8140**DCL
STAT_U.W1
      8138**DCL
TOM$ITRTBL.CATA_KEYS.CNAME.APPL
      8321**DCL
TOM$ITRTBL.CATA_KEYS.CNAME.DECK#
      8325**DCL
TOM$ITRTBL.CATA_KEYS.CNAME_
      8327**DCL
TOM$ITRTBL.OBJ_KEYS.ONAME_
      8350**DCL
TOM$ITRTBL.OBJ_KEYS_
      8351**DCL
TOM$MOLTS
        72**PROC
TOM$SEG.DKEND
      8405**DCL
TOM$SEG.OBJECT
      8399**DCL
TOM_ERROR_CODE.FCG
      8179**DCL
TOM_ERROR_CODE.MID
      8192**DCL
TOM_ERROR_CODE.MON
      8192**DCL
TOM_ERROR_CODE.SEV
      8193**DCL
TOP$TCP
      8451**DCL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:336  
TOP$TCP.ADR
      8475**DCL
TOP$TCP.ADR.CSCT
      8478**DCL
TOP$TCP.ADR.IOENTRY
      8482**DCL
TOP$TCP.ADR.PAT
      8480**DCL
TOP$TCP.ADR.SCT
      8476**DCL
TOP$TCP.BFR
      8524**DCL
TOP$TCP.BFR.TRAIN_IMAGE
      8525**DCL
TOP$TCP.BFR.VFC_IMAGE
      8527**DCL
TOP$TCP.DCB#
      8473**DCL
TOP$TCP.DEVICE_MODEL
      8470**DCL
TOP$TCP.FICCDD.CHAN#
      8458**DCL
TOP$TCP.FICCDD.DEV#
      8459**DCL
TOP$TCP.FICCDD.FLAG#
      8455**DCL
TOP$TCP.FICCDD.FORMAT#
      8456**DCL
TOP$TCP.FICCDD.IOM#
      8457**DCL
TOP$TCP.FIRMWARE
      8506**DCL
TOP$TCP.FIRMWARE.LP_TYPE
      8511**DCL
TOP$TCP.FIRMWARE.RP_TYPE
      8513**DCL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:337  
TOP$TCP.ICC
      8463**DCL
TOP$TCP.ICCDD
      8460**DCL
TOP$TCP.ICCDD.ICCDD#
      8462**DCL
TOP$TCP.IN_USE
      8452**DCL
TOP$TCP.IO
      8484**DCL
TOP$TCP.IO.CC_PAID
      8495**DCL
TOP$TCP.IO.CONTROLLER
      8489**DCL
TOP$TCP.IO.DONE
      8493**DCL
TOP$TCP.IO.ISSUED
      8491**DCL
TOP$TCP.IO.ITR_INTERRUPT
      8485**DCL
TOP$TCP.IO.TERMINATED
      8487**DCL
TOP$TCP.MPC_MODEL
      8469**DCL
TOP$TCP.SCT
      8497**DCL
TOP$TCP.SCT.BIT12
      8502**DCL
TOP$TCP.SCT.BIT13
      8500**DCL
TOP$TCP.SCT.BIT17
      8498**DCL
TOP$TCP.SCT.TAPE_DENSITY
      8504**DCL
TOP$TCP.STATS
      8515**DCL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:338  
TOP$TCP.STATS.EDIT_NAME
      8520**DCL
TOP$TCP.STATS.GECALL_NAME
      8522**DCL
TOP$TCP.STATS.LOAD_ADDR
      8516**DCL
TOP$TCP.STATS.MAX_LOAD
      8518**DCL
TOT$DMC
      8420**DCL
TOT$DMC.TOO$IO_BUFFER
      8421**DCL
TOT$DMC.TOO$IO_BUFFER.PTR$
      8424**DCL
TOT$DMC.TOP$TCP
      8426**DCL
TOT$ECP
      8539**DCL
TOT$ECP.BOOT_CPU_TYPE
      8576**DCL
TOT$ECP.BREAK_ALLOWED
      8572**DCL
TOT$ECP.BREAK_RECEIVED
      8574**DCL
TOT$ECP.DYNAMIC_PAGE_COUNT
      8557**DCL
TOT$ECP.IO
      8543**DCL
TOT$ECP.IO.COUNT
      8546**DCL
TOT$ECP.IO.TYPE
      8544**DCL
TOT$ECP.ISC
      8548**DCL
TOT$ECP.ISC.GERELC_WAIT
      8553**DCL
PL6.E3A0      #001=TOM$MOLTS File=TOM$MOLTS.:E05TSI                              WED 07/30/97 06:26 Page:339  
TOT$ECP.ISC.READ_OUT
      8549**DCL
TOT$ECP.ISC.READ_PENDING
      8555**DCL
TOT$ECP.ISC.WRITE_OUT
      8551**DCL
TOT$ECP.SUBEXEC
      8559**DCL
TOT$ECP.SUBEXEC.ADDRESS
      8562**DCL
TOT$ECP.SUBEXEC.CURRENT
      8560**DCL
TOT$ECP.SUBEXEC.EDIT_NAME
      8564**DCL
TOT$ECP.SUBEXEC.TEST_PAGE_COUNT
      8570**DCL
TOT$ECP.SUBEXEC.WRAPUP$
      8568**DCL
TOT$ECP.SUBEXEC.WRAPUP_TRIED
      8566**DCL
TOT$ECP.TEST_REQ_
      8542**DCL
