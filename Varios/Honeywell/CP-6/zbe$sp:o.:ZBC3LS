

CC.C03    File=zbe$sp:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=1  
        1         1             /* $Header: sp.c,v 1.3 87/03/10 11:40:28 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /* S T A C K   P O L L U T I O N
        7         7              *
        8         8              * S P . C
        9         9              */
       10        10
       11        11
       12        12             #include <stdio:h>
       13        13             #include "types:h"
       14        14             #include "debug:h"
       15        15             #include "global:h"
       16        16             #include "files:h"
       17        17             #include "get:h"
       18        18             #include "put:h"
       19        19             #include "lset:h"
       20        20             #include "map:h"
       21        21             #include "alloc:h"
       22        22             #include "aux:h"
       23        23             #include "go:h"
       24        24             #include "stack_chg:h"
       25        25             #include "em_mnem:h"
       26        26             #include "em_spec:h"
       27        27
       28        28
       29        29             /* Stack pollution throws away the ASP instructions after a procedure call.
       30        30              * This saves a lot of code, at the cost of some extra stack space.
       31        31              * ASPs that are part of a loop are not removed.
       32        32              */
       33        33
       34        34             #define BF_MARK    04
       35        35             #define MARK(b)    b->b_flags |= BF_MARK
       36        36             #define NOT_MARKED(b) (!(b->b_flags&BF_MARK))
CC.C03    File=zbe$sp:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=2  
       37        37             #define IN_LOOP(b) (Lnrelems(b->b_loops) > 0)
       38        38
       39        39             STATIC int Ssp;  /* number of optimizations */
       40        40
       41        41             /* According to the EM definition, the stack must be cleaned up
       42        42              * before any return. However, for some backends it causes no harm
       43        43              * if the stack is not cleaned up. If so, we can do Stack Pollution
       44        44              * more globally.
       45        45              */
       46        46
       47        47             STATIC int globl_sp_allowed;
       48        48
       49        49
       50        50             #define IS_ASP(l)  (INSTR(l) == op_asp && TYPE(l) == OPSHORT && SHORT(l) > 0)
       51        51
       52        52
       53        53             STATIC sp_machinit(f)
       54        54              FILE *f;
       55        55             {
       56        56    1         /* Read target machine dependent information for this phase */
       57        57    1         char s[100];
       58        58    1
       59        59    1         for (;;) {
       60        60    2            while(getc(f) != '\n');
       61        61    2            fscanf(f,"%s",s);
       62        62    2            if (strcmp(s,"%%SP") == 0)break;
       63        63    2         }
       64        64    1         fscanf(f,"%d",&globl_sp_allowed);
       65        65    1        }
       66        66             comb_asps(l1,l2,b)
       67        67              line_p l1,l2;
       68        68              bblock_p b;
       69        69             {
       70        70    1         assert(INSTR(l1) == op_asp);
       71        71    1         assert(INSTR(l2) == op_asp);
       72        72    1         assert(TYPE(l1) == OPSHORT);
       73        73    1         assert(TYPE(l2) == OPSHORT);
CC.C03    File=zbe$sp:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=3  
       74        74    1
       75        75    1         SHORT(l2) += SHORT(l1);
       76        76    1         rm_line(l1,b);
       77        77    1        }
       78        78
       79        79
       80        80
       81        81
       82        82             stack_pollution(b)
       83        83              bblock_p b;
       84        84             {
       85        85    1         /* For every pair of successive ASP instructions in basic
       86        86    1          * block b, try to combine the two into one ASP.
       87        87    1          */
       88        88    1
       89        89    1         register line_p l;
       90        90    1         line_p asp,next = b->b_start;
       91        91    1         bool asp_seen = FALSE;
       92        92    1         int stack_diff,pop,push;
       93        93    1         bool ok;
       94        94    1
       95        95    1         do {
       96        96    2            stack_diff = 0;
       97        97    2            for (l = next; l != (line_p) 0; l = next)  {
       98        98    3               next = l->l_next;
       99        99    3               if (IS_ASP(l)) break;
      100       100    3               if (asp_seen) {
      101       101    4                  if (INSTR(l) == op_ret) {
      102       102    5                     stack_diff -= SHORT(l);
      103       103    5                  } else {
      104       104    5                     line_change(l,&ok,&pop,&push);
      105       105    5                     if (!ok || (stack_diff -= pop) < 0) {
      106       106    6                        /* can't eliminate last ASP */
      107       107    6                        asp_seen = FALSE;
      108       108    6                     } else {
      109       109    6                        stack_diff += push;
      110       110    6                     }
CC.C03    File=zbe$sp:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=4  
      111       111    5                  }
      112       112    4               }
      113       113    3            }
      114       114    2            if (asp_seen) {
      115       115    3               if (l == (line_p) 0) {
      116       116    4                  /* last asp of basic block */
      117       117    4                  if (globl_sp_allowed &&
      118       118    4                      NOT_MARKED(b) && !IN_LOOP(b)) {
      119       119    5                     Ssp++;
      120       120    5                     rm_line(asp,b);
      121       121    5                  }
      122       122    4               } else {
      123       123    4                  /* try to combine with previous asp */
      124       124    4                  if (SHORT(l) == stack_diff) {
      125       125    5                     Ssp++;
      126       126    5                     comb_asps(asp,l,b);
      127       127    5                  }
      128       128    4               }
      129       129    3            }
      130       130    2            asp = l;
      131       131    2            asp_seen = TRUE;  /* use new ASP for next try! */
      132       132    2         } while (asp != (line_p) 0);
      133       133    1        }
      134       134
      135       135             STATIC bool block_save(b)
      136       136              bblock_p b;
      137       137             {
      138       138    1
      139       139    1         register line_p l;
      140       140    1         int stack_diff,pop,push;
      141       141    1         bool ok;
      142       142    1
      143       143    1         stack_diff = 0;
      144       144    1         for (l = b->b_start; l != (line_p) 0; l = l->l_next)  {
      145       145    2            if (INSTR(l) == op_ret) {
      146       146    3               stack_diff -= SHORT(l);
      147       147    3               break;
CC.C03    File=zbe$sp:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=5  
      148       148    3            }
      149       149    2            line_change(l,&ok,&pop,&push);
      150       150    2            /* printf("instr %d, pop %d,push %d,ok %d\n",INSTR(l),pop,push,ok);  */
      151       151    2            if (!ok || (stack_diff -= pop) < 0) {
      152       152    3               return FALSE;
      153       153    3            } else {
      154       154    3               stack_diff += push;
      155       155    3            }
      156       156    2         }
      157       157    1         return stack_diff >= 0;
      158       158    1        }
      159       159
      160       160
      161       161
      162       162             STATIC mark_pred(b)
      163       163              bblock_p b;
      164       164             {
      165       165    1         Lindex i;
      166       166    1         bblock_p x;
      167       167    1
      168       168    1         for (i = Lfirst(b->b_pred); i != (Lindex) 0; i = Lnext(i,b->b_pred)) {
      169       169    2            x = (bblock_p) Lelem(i);
      170       170    2            if (NOT_MARKED(x)) {
      171       171    3               MARK(x);
      172       172    3               mark_pred(x);
      173       173    3            }
      174       174    2         }
      175       175    1        }
      176       176
      177       177
      178       178
      179       179
      180       180
      181       181             STATIC mark_unsave_blocks(p)
      182       182              proc_p p;
      183       183             {
      184       184    1         register bblock_p b;
CC.C03    File=zbe$sp:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=6  
      185       185    1
      186       186    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      187       187    2            if (NOT_MARKED(b) && !block_save(b)) {
      188       188    3               MARK(b);
      189       189    3               mark_pred(b);
      190       190    3            }
      191       191    2         }
      192       192    1        }
      193       193
      194       194
      195       195             sp_optimize(p)
      196       196              proc_p p;
      197       197             {
      198       198    1         register bblock_p b;
      199       199    1
      200       200    1         mark_unsave_blocks(p);
      201       201    1         for (b = p->p_start; b != 0; b = b->b_next) {
      202       202    2            stack_pollution(b);
      203       203    2         }
      204       204    1        }
      205       205
      206       206
      207       207
      208       208
      209       209             spmain(argc,argv)
      210       210              int argc;
      211       211              char *argv[];
      212       212             {
      213       213    1         globl_sp_allowed = 1;
      214       214    1         go(argc,argv,no_action,sp_optimize,sp_machinit,no_action);
      215       215    1         report("stack adjustments deleted",Ssp);
      216       216    1           return ;
      217       217    1        }
      218       218
      219       219
      220       220
      221       221
CC.C03    File=zbe$sp:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=7  
      222       222             /***** DEBUGGING:
      223       223
      224       224             debug_stack_pollution(p)
      225       225              proc_p p;
      226       226             {
      227       227              register bblock_p b;
      228       228              register line_p l;
      229       229              int lcnt,aspcnt,instr;
      230       230
      231       231              for (b = p->p_start; b != 0; b = b->b_next) {
      232       232                 lcnt = 0; aspcnt = 0;
      233       233                 for (l = b->b_start; l != 0; l= l->l_next) {
      234       234                    instr = INSTR(l);
      235       235                    if (instr >= sp_fmnem && instr <= sp_lmnem) {
      236       236                       lcnt++;
      237       237                       if (instr == op_asp && off_set(l) > 0) {
      238       238                          aspcnt++;
      239       239                       }
      240       240                    }
      241       241                 }
      242       242                 printf("%d\t%d\n",aspcnt,lcnt);
      243       243              }
      244       244             }
      245       245
      246       246             */
      247       247
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$files:h.:ZBC3TOU. is referenced
   zbe$get:h.:ZBC3TOU. is referenced
   zbe$put:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$map:h.:ZBC3TOU. is referenced
CC.C03    File=zbe$sp:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=8  
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$go:h.:ZBC3TOU. is referenced
   zbe$stack_chg:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$sp:c.:ZBC3TSI
