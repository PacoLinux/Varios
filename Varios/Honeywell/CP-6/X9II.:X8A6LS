
     DIRECTORY AND SEGMENT LIST  (OBJECT UNIT NAME '')

      * SYMDEF *        GLOBAL NAME               SEGMENT  OFFSET      ACCESS ATTRIBUTES
     1  X9II   'X9II'                              .X9II       0          R  W  E  L  U

      * SYMREF *        GLOBAL NAME                                    ACCESS ATTRIBUTES
     2  X9QQ   'X9QQ'                                                     R  W  E  L  U
     3  X8ER   'X8ER$ERROR'                                               R  W  E  L  U

      * SECTION *          SIZE          KIND
     4  .X9II               170           CODE
     5  .X9II.               36           DATA


     PROGRAM BREAK         226

                                      1 *M*
                                      2 *T***********************************************************
                                      3 *T*                                                         *
                                      4 *T* COPYRIGHT (C) BULL HN INFORMATION SYSTEMS INC., 1997    *
                                      5 *T*                                                         *
                                      6 *T***********************************************************
                        000000        7        SECT    .X9II,CODE
                                      8 *P*
                                      9 *P*
                                     10 *P*     NAME       : X9II
                                     11 *P*     AUTHOR     : JIM B. BEHM
                                     12 *P*     PURPOSE    : COMPUTES EXPONENTIATION OF A INTEGER BASE TO
                                     13 *P*                  INTEGER EXPONENT IN A HIGHLY OPTIMIZED FASHION.
                                     14 *P*
                                     15 *P*
                                     16 *D*
                                     17 *D*
                                     18 *D*     NAME       : X9RI
                                     19 *D*     CALL       :   . . .
                                     20 *D*                  EPPRO    NEWARG
                                     21 *D*                  EPPR4    INTGUY
                                     22 *D*                  STP4     NEWARG
                                     23 *D*                  EPPR4    INTGY2
                                     24 *D*                  STP4     NEWARG+1
                                     25 *D*                  EPPR4    INTRES
                                     26 *D*                  STP4     NEWARG+2
                                     27 *D*                  EPPR1    NUMARG
                                     28 *D*                  TSX1     X9RI
                                     29 *D*                    . . .
                                     30 *D*           NEWARG BSS      3
                                     31 *D*           NUMARG VFD      18/3,18/0
                                     32 *D*                    . . .
                                     33 *D*     INTERFACE  : 1.) X9QQ - FOR EXPONENTS >= 35 EXQQ IS
                                     34 *D*                      CALLED FOR THE LOGARITHM METHOD WHICH IS
                                     35 *D*                      QUICKER FOR LARGE NUMBERS.
                                     36 *D*     INPUT      : 1.) INTEGER BASE
                                     37 *D*                  2.) INTEGER EXPONENT

                                     38 *D*     OUTPUT     : INTEGER RESULT
                                     39 *D*     SCRATCH    : NONE
                                     40 *D*     REFERENCE  : X8LC$DOCUMENT, J. R. WILSON FOR THE ALGORITHM.
                                     41 *D*
                                     42 *D*
                                     43 *V*
                                     44 *V*
                                     45 *V*                    GENERAL_ALGORITHM
                                     46 *V*
                                     47 *V*     THE GENERAL ALGORITHM IS :
                                     48 *V*
                                     49 *V*                1.) TEST FOR SPECIAL CASES.
                                     50 *V*
                                     51 *V*                    A.) EXPONENT OF ZERO
                                     52 *V*                    B.) EXPONENT OF ONE
                                     53 *V*
                                     54 *V*                2.) IF EXPONENT IS >= 35 THEN CALL X9QQ
                                     55 *V*                    BECAUSE AN INTEGER BASE CANNOT BE A FRACTION,
                                     56 *V*                    THEREFORE PUTTING A CAP ON THE EXPONENT AT 35.
                                     57 *V*
                                     58 *V*                3.) COMPUTE PARTIAL SUMS:
                                     59 *V*
                                     60 *V*                    BASE, BASE ** 2, BASE ** 4, BASE ** 8 ETC
                                     61 *V*                    UNTIL THE NEXT EXPONENT OF THE PARTIAL SUM
                                     62 *V*                    GREATER THAN THE INPUT EXPONENT.
                                     63 *V*
                                     64 *V*                    NOTE : EACH PARTIAL SUM IS COMPUTED BY SQUARING
                                     65 *V*                           THE PREVIOUS PARTIAL SUM.
                                     66 *V*
                                     67 *V*                4.) TAKE THE LARGEST PARTIAL SUM AND PUT IT IN
                                     68 *V*                    THE ANSWER, SUBTRACT THE EXPONENT USED IN
                                     69 *V*                    COMPUTING THE PARTIAL SUM FROM THE INPUT
                                     70 *V*                    EXPONENT, REPEAT USING THE NEXT SMALLEST
                                     71 *V*                    PARTIAL SUM UNTIL THE EXPONENT IS ZERO,
                                     72 *V*                    AFTER EACH ITERATION MULTIPLYING THE PREVIOUS
                                     73 *V*                    ANSWER BY THE NEXT PARTIAL SUM.
                                     74 *V*

                                     75 *V*
                        000000       76        ENTDEF  X9II
                        000000       77        ENTREF  X9QQ
                        000000       78        ENTREF  (X8ER,X8ER$ERROR)
                                     79 *
                        000000       80 X9II   NULL
                                     81 *
      000000 000000 7530 00 010NN    82        SREG    REG
      000001 000031 4574 00 010NN    83        STP7    PR7
      000002 000032 4564 00 010NN    84        STP6    PR6
      000003 000033 4554 00 010NN    85        STP5    PR5
      000004 000034 4544 00 010NN    86        STP4    PR4
      000005 000000 4775 00          87        LDP7    0,,0       BASE
      000006 000001 4765 00          88        LDP6    1,,0       EXPONENT
      000007 000002 4755 00          89        LDP5    2,,0       ANSWER
      000010 600000 2351 00          90        LDA     0,,6
      000011 000031 6054 00 010NN    91        TPNZ    NXTEST     EXPONENT > 0
      000012 000027 6000 00 010NN    92        TZE     EXZERO     EXPONENT = 0

                                     94 *V*
                                     95 *V*            EXPONENT_IS_NEGATIVE
                                     96 *V*
                                     97 *V*      IT HAS BEEN DETERMINED THAT THE EXPONENT IS NEGATIVE
                                     98 *V*  SO, CHECK THE BASE FOR 1 AND -1; ALL OTHER CASES RETURN 0
                                     99 *V*  AS THE ANSWER BECAUSE OF INTEGER TRUNCATION.
                                    100 *V*
      000013 700000 2351 00         101        LDA     0,,7       GET THE BASE
      000014 000001 1150 07         102        CMPA    =1,DL      IS THE BASE ONE?
      000015 000136 6000 00 010NN   103        TZE     EXIT       BASE = 1
      000016 000164 1150 00 010NN   104        CMPA    =-1        IS THE BASE NEGATIVE ONE?
      000017 000025 6000 00 010NN   105        TZE     NOT1       BASE 0= -1
      000020 600000 2351 00         106        LDA     0,,6       GET EXPONENT
      000021 000001 3150 07         107        CANA    1,DL       EVEN OR ODD?
      000022 000027 6000 00 010NN   108        TZE     EXZERO     EXP. WAS EVEN ; ANSWER = 1.
      000023 000001 3350 07         109        LCA     =1,DL      EXP. WAS ODD  ; ANSWER = -1.
      000024 000136 7100 00 010NN   110        TRA     EXIT
      000025 000000 2350 07         111 NOT1   LDA     =0,DL      RESULT OF INTEGER TRUNCATION
      000026 000136 7100 00 010NN   112        TRA     EXIT

                                    114 *V*
                                    115 *V*
                                    116 *V*                    POWER_IS_ZERO
                                    117 *V*
                                    118 *V*     IF THE POWER IS ZERO THEN THE ANSWER WILL BE ONE AND THE
                                    119 *V*     EXPONENTIATION WILL BE DONE.
                                    120 *V*
                                    121 *V*
                        000027      122 EXZERO NULL
      000027 000001 2350 07         123        LDA     =1,DL
      000030 000136 7100 00 010NN   124        TRA     EXIT

                        000031      126 NXTEST NULL
                                    127 *
                                    128 *V*
                                    129 *V*
                                    130 *V*                    POWER_IS_ONE
                                    131 *V*
                                    132 *V*     IF THE POWER IS ONE THEN THE ANSWER IS THE BASE.  THE
                                    133 *V*     EXPONENTIATION IS DONE.
                                    134 *V*
                                    135 *V*
      000031 000001 1150 07         136        CMPA    =1,DL          IS THE EXPONENT 1 ?
      000032 000035 6010 00 010NN   137        TNZ     NT1OR0
      000033 700000 2351 00         138        LDA     0,,7           IT WAS ONE SO THE ANSWER IS THE BASE.
      000034 000136 7100 00 010NN   139        TRA     EXIT

                        000035      141 NT1OR0 NULL
                                    142 *
                                    143 *V*
                                    144 *V*
                                    145 *V*                    POWER_GTR_35
                                    146 *V*
                                    147 *V*     IF THE POWER IS GREATER THAN 35 THEN IT WOULD BE MORE
                                    148 *V*     EFFICIENT TO CALL X9QQ FOR THESE CASES.  THE CALLING
                                    149 *V*     SEQUENCE NEED NOT BE ADJUSTED, BUT THE INTEGER EXPONENT
                                    150 *V*     AND BASE MUST BE CONVERTED TO DOUBLE FLOAT, THEN CALL
                                    151 *V*     X9QQ.
                                    152 *V*
                                    153 *V*
      000035 000043 1150 07         154        CMPA    =35,DL         IS EXPONENT GREATER THAN 2 ** 35 WHICH IS OVE
      000036 000074 6040 00 010NN   155        TMI     ALLOK
      000037 000035 4504 00 010NN   156        STP0    PR0
      000040 000024 6304 00 010NN   157        EPPR0   QQARGS
                                    158
      000041 000000 2360 07         159        LDQ     0,DL
      000042 020000 4110 03         160        LDE     =8192,DU       THIS SEQUENCE OF INSTRUCTIONS CONVERTS
      000043 000003 7370 00         161        LLS     3              AN INTEGER NUMBER TO A REAL NUMBER AND
      000044 000000 5730 00         162        FNO     0              CALLS X9QQ.
      000045 000020 4570 00 010NN   163        DFST    TMPEXP
      000046 000020 6344 00 010NN   164        EPPR4   TMPEXP
      000047 000001 4545 00         165        STP4    1,,0
      000050 700000 2351 00         166        LDA     0,,7
      000051 000000 2360 07         167        LDQ     0,DL
      000052 020000 4110 03         168        LDE     =8192,DU
      000053 000003 7370 00         169        LLS     3
      000054 000000 5730 00         170        FNO     0
      000055 000016 4570 00 010NN   171        DFST    TMPBAS
      000056 000016 6344 00 010NN   172        EPPR4   TMPBAS
      000057 000000 4545 00         173        STP4    0,,0
      000060 000022 6344 00 010NN   174        EPPR4   TMPANS
      000061 000002 4545 00         175        STP4    2,,0
      000062 000000 7010 00 020NN   176        TSX1    X9QQ
      000063 000035 4704 00 010NN   177        LDP0    PR0

      000064 000022 4330 00 010NN   178        DFLD    TMPANS
      000065 000002 6050 04         179        TPL     2,IC
      000066 000165 4370 00 010NN   180        DUFA    =.999999999999999998
      000067 042000 4350 03         181        UFA     17408,DU
      000070 000003 7330 00         182        LRS     3
      000071 500000 7561 00         183        STQ     0,,5
      000072 000000 0110 07         184        NOP     0,DL
      000073 000136 7100 00 010NN   185        TRA     EXIT
                                    186 *

                        000074      188 ALLOK  NULL
                                    189 *
                                    190 *V*
                                    191 *V*
                                    192 *V*                    INITIALIZE
                                    193 *V*
                                    194 *V*     THE INDEXES TO THE PARTIAL RESULTS AND TO THE TABLES
                                    195 *V*     FOR THE BOUNDARIES FOR COMPARISONS.  THE INDEXES FOR
                                    196 *V*     THE PARTIAL RESULTS SHOULD BE INCREMENTED BY 1 AFTER
                                    197 *V*      EACH ADDITION TO IT TO HAVE ENOUGH SPACE FOR A POSSIBLE
                                    198 *V*     1 WORDS OF ANSWER OR PARTIAL RESULT.
                                    199 *V*
                                    200 *V*
      000074 000030 7550 00 010NN   201        STA     EXPONT
      000075 000000 2220 03         202        LDX2    0,DU
      000076 700000 2351 00         203        LDA     0,,7           GET THE BASE
      000077 000010 7550 12 010NN   204        STA     PAREXP,2
      000100 000001 0620 03         205        ADX2    1,DU

                                    207 *
                        000101      208 EXPINC NULL
                                    209 *
                                    210 *V*
                                    211 *V*
                                    212 *V*                    COMPUTE_PARTIAL_RESULTS
                                    213 *V*
                                    214 *V*     COMPUTE THE PARTIAL RESULTS FROM THE BASE.  KEEP ON
                                    215 *V*     COMUPUTING UNTIL THE EXPONENT IS LESS THAN THE EQUIV-
                                    216 *V*     ALENT EXPONENT OF THE BOUND TABLE ( EXPBND ), EG.
                                    217 *V*
                                    218 *V*             PARTIAL RESULTS         EXPBND
                                    219 *V*             ---------------         ------
                                    220 *V*
                                    221 *V*   4 ** 7 =   PR(1) = 4                1     = BASE ** EXPBND(1)
                                    222 *V*                      16               2        "         "   2
                                    223 *V*                      256              4        "         "   3
                                    224 *V*                      65536            8         "         "   4
                                    225 *V*
                                    226 *V*     WE WOULD STOP BUILDING THE PR TABLE WHEN THE EXPBND WAS
                                    227 *V*     GREATER THAN THE EXPONENT  =  8  >  7  =.  THE COMPUT-
                                    228 *V*     ATIONS COME LATER TO GET THE ANSWER.
                                    229 *V*
                                    230 *V*
      000101 000007 2360 12 010NN   231        LDQ     PAREXP-1,2     GET THE PREVIOUS ITERATION(MULTIPLE)
      000102 000007 4020 12 010NN   232        MPY     PAREXP-1,2     SQUARE IT
      000103 000010 7560 12 010NN   233        STQ     PAREXP,2       AND STORE IT(THIS ITERATION'S MULTIPLE)
      000104 000001 0620 03         234        ADX2    1,DU
      000105 000006 1020 03         235        CMPX2   =6,DU          IS X2 OUT OF THE RANGE( OUT OF BOUNDS
                                    236 *                             OF EXPBND )
      000106 000112 6000 00 010NN   237        TZE     X2EXIT
      000107 000146 2350 12 010NN   238        LDA     EXPBND,2
      000110 000030 1150 00 010NN   239        CMPA    EXPONT         COMPARE THE EXPONT TO THIS ITERATIONS
                                    240 *                             BOUNDRY - EXPBND <= EXPONT ?
      000111 000101 6044 00 010NN   241        TMOZ    EXPINC
                                    242 *
                                    243 *

                                    244 *                             NOW THE MULTIPLE( PARTIAL RESULTS )
                                    245 *                             TABLE IS BUILT SO JUST DECREMENT X2
                                    246 *                             TEST, AND GO AGAIN.
                                    247 *
                        000112      248 X2EXIT NULL
                                    249 *
                                    250 *V*
                                    251 *V*
                                    252 *V*                    DECREMENT_COUNTERS
                                    253 *V*
                                    254 *V*     THE COUNTERS ARE NOW AT ONE GREATER THAN WE NEED SO WE
                                    255 *V*     SUBTRACT THE NEEDED AMOUNT FOR EACH TABLE.
                                    256 *V*
                                    257 *V*
      000112 000001 1620 03         258        SBX2    1,DU
      000113 000001 2350 07         259        LDA     =1,DL
      000114 000027 7550 00 010NN   260        STA     ANSWER

                                    262 *
                        000115      263 COMPUT NULL
                                    264 *
                                    265 *V*
                                    266 *V*
                                    267 *V*                    COMPUTE_ANSWER
                                    268 *V*
                                    269 *V*     THE ANSWER IS COMPUTED BY COMPARING THE EXPONENT TO
                                    270 *V*     THE EXPONENT BOUND CURRENTLY OBTAINED BY THE OFFSET.
                                    271 *V*     IF THE EXPONENT IS LARGER THAN THE EXPONENT BOUND THEN
                                    272 *V*     WE USE THAT CURRENT PARTIAL RESULT AND MULTIPLY IT BY
                                    273 *V*     THE CURRENT ANSWER AND REPLACING IN THE CURRENT ANSWER.
                                    274 *V*     IF THE EXPONENT IS LESS THAN THE EXPONENT BOUND THEN GO
                                    275 *V*     AND SUBTRACT THE INDEXES TO GET ONE LESS ENTRY IN THE
                                    276 *V*     EXPBND TABLE OR THE NEXT LESS.  THEN REPEAT THIS PROCESS
                                    277 *V*     AND SUBTRACT THE EXPBND EXPONENT FROM THE EXPONENT EACH
                                    278 *V*     TIME OR UNTIL THE EXPONENT IS ZERO.
                                    279 *V*
                                    280 *V*
      000115 000030 2350 00 010NN   281        LDA     EXPONT
      000116 000146 1150 12 010NN   282        CMPA    EXPBND,2
      000117 000126 6044 00 010NN   283        TMOZ    SUBX2
      000120 000027 2360 00 010NN   284        LDQ     ANSWER
      000121 000010 4020 12 010NN   285        MPY     PAREXP,2
      000122 000027 7560 00 010NN   286        STQ     ANSWER
      000123 000030 2350 00 010NN   287        LDA     EXPONT
      000124 000154 1750 12 010NN   288        SBA     EXPSUB,2
      000125 000030 7550 00 010NN   289        STA     EXPONT
                                    290 *
                        000126      291 SUBX2  NULL
                                    292 *
      000126 000001 1620 03         293        SBX2    1,DU
      000127 000000 1020 03         294        CMPX2   =0,DU          WHEN X0 IS LESS THAN ZERO WE ARE DONE
      000130 000115 6050 00 010NN   295        TPL     COMPUT
                                    296 *
                                    297 *
      000131 000027 2350 00 010NN   298        LDA     ANSWER

      000132 000000 1050 03         299        CMPX5   =0,DU
      000133 000136 6000 00 010NN   300        TZE     EXIT
                                    301 *
                                    302 *  WE HAD A NEGATIVE EXPONENT SO, THE REAL ANSWER IS 1/X.
                                    303 *
      000134 000001 4310 03         304        FLD     =1,DU
      000135 000027 5650 00 010NN   305        FDV     ANSWER
                                    306 *
                        000136      307 EXIT   NULL
                                    308 *
      000136 500000 7551 00         309        STA     0,,5
      000137 000000 0730 00 010NN   310        LREG    REG
      000140 000031 4774 00 010NN   311        LDP7    PR7
      000141 000032 4764 00 010NN   312        LDP6    PR6
      000142 000033 4754 00 010NN   313        LDP5    PR5
      000143 000034 4744 00 010NN   314        LDP4    PR4
                                    315 *
      000144 000001 7100 11         316        TRA     1,1            NORMAL RETURN
                                    317 *
                                    318 *
                                    319 *              CONSTANTS AND TABLES
                                    320 *
                                    321 *
      000145 000000011007
                        000146      322        EVEN
      000146 000000000000           323 EXPBND DEC     0,1,3,7,15,31
      000147 000000000001
      000150 000000000003
      000151 000000000007
      000152 000000000017
      000153 000000000037
      000154 000000000000           324 EXPSUB DEC     0,2,4,8,16,32
      000155 000000000002
      000156 000000000004
      000157 000000000010
      000160 000000000020
      000161 000000000040

                        000000      325        SECT    .X9II.,DATA
                                    326 *
                                    327 *
                                    328 *              TEMPS, ETC...
                                    329 *
                                    330 *
                        000000      331        EIGHT
                        000000      332 REG    BSS     8
                        000010      333        EVEN
                        000010      334 PAREXP BSS     6
                        000016      335 TMPBAS BSS     2
                        000020      336 TMPEXP BSS     2
                        000022      337 TMPANS BSS     2
                        000024      338 QQARGS BSS     3
                        000027      339 ANSWER BSS     1
                        000030      340 EXPONT BSS     1
                        000031      341 PR7    BSS     1
                        000032      342 PR6    BSS     1
                        000033      343 PR5    BSS     1
                        000034      344 PR4    BSS     1
                        000035      345 PR0    BSS     1
                                    346 *
          LITERALS OF SECTION .X9II
      000164 777777777777
      000165 002400000000
                                    347        END
 GMAP6 VERSION/ASSEMBLY DATES  JNPA NO TTL/2(_00]      JNPB NO TTL/2(_00]      JNPC NO TTL/2(_00]
 THERE WERE    NO  WARNING FLAGS IN THE ABOVE ASSEMBLY

                             OCTAL    SYMBOL   * KIND *      REFERENCES BY ALTER NO. AN
    74   ALLOK    REL   .X9II    188  155T  188
    27   ANSWER   REL   .X9II.   339  260W  284R  286W  298R  305R  339
   115   COMPUT   REL   .X9II    263  263   295T
   136   EXIT     REL   .X9II    307  103T  110T  112T  124T  139T  185T  300T  307
   146   EXPBND   REL   .X9II    323  238R  282R  323
   101   EXPINC   REL   .X9II    208  208   241T
    30   EXPONT   REL   .X9II.   340  201W  239R  281R  287R  289W  340
   154   EXPSUB   REL   .X9II    324  288R  324
    27   EXZERO   REL   .X9II    122   92T  108T  122
  6000   .X9II    SEC   SECT       7    7
  6001   .X9II.   SEC   SECT     325  325
    25   NOT1     REL   .X9II    111  105T  111
    35   NT1OR0   REL   .X9II    141  137T  141
    31   NXTEST   REL   .X9II    126   91T  126
    10   PAREXP   REL   .X9II.   334  204W  231R  232R  233W  285R  334
    35   PR0      REL   .X9II.   345  156W  177R  345
    34   PR4      REL   .X9II.   344   86W  314R  344
    33   PR5      REL   .X9II.   343   85W  313R  343
    32   PR6      REL   .X9II.   342   84W  312R  342
    31   PR7      REL   .X9II.   341   83W  311R  341
    24   QQARGS   REL   .X9II.   338  157   338
     0   REG      REL   .X9II.   332   82W  310R  332
   126   SUBX2    REL   .X9II    291  283T  291
    22   TMPANS   REL   .X9II.   337  174   178R  337
    16   TMPBAS   REL   .X9II.   335  171W  172   335
    20   TMPEXP   REL   .X9II.   336  163W  164   336
   112   X2EXIT   REL   .X9II    248  237T  248
NO VAL   X8ER     EXT   SYMREF         78
     0   X9II     REL   .X9II     80   76    80
NO VAL   X9QQ     EXT   SYMREF         77   176T
