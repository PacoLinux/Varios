VERSION E05

PL6.E3A0      #001=JLU$DELSET File=JLU$UTIL.:E05TSI                              TUE 07/29/97 23:25 Page:1    
        1        1        /*M* JLU$UTIL - Utility routines for M$LINK and M$LDTRC.                     */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=8,IND=5,ENU=0,ECU=0    */
        8        8
        9        9        /*F*   NAME:   JLU$DELSET
       10       10               PURPOSE: To delete all of a record set in *N for a given IDN.
       11       11        */
       12       12
       13       13        JLU$DELSET: PROC(IDN);
       14       14    1   DCL IDN UBIN(36);
       15       15
       16       16    1   DCL 1 FIRST_KEY,
       17       17    1         2 CNT UBIN(9) UNAL,
       18       18    1         2 ID UBIN(27) UNAL,
       19       19    1         2 TYPE UBIN(9) UNAL,
       20       20    1         2 PGNO UBIN(18) UNAL;
       21       21    1   DCL 1 LAST_KEY,
       22       22    1         2 CNT UBIN(9) UNAL,
       23       23    1         2 ID UBIN(27) UNAL,
       24       24    1         2 TYPE UBIN(9) UNAL,
       25       25    1         2 PGNO UBIN(18) UNAL;
       26       26
       27       27    1   DCL M$MDELREC ENTRY(1) ALTRET;
       28       28    1   DCL SC_DELSET ENTRY CONV(2,0);
       29       29
       30       30        %INCLUDE JL_DATA_M;
       31      199        %INCLUDE CP_6;
       32     5758        %INCLUDE CP_6_SUBS;
       33     6298
       34     6299        %FPT_DELREC(STCLASS=CONSTANT);
       35     6318        %FPT_DELREC(FPTN=FPT$DELREC,STCLASS=AUTO);
       36     6337
       37     6338        %JL_SUBS;
PL6.E3A0      #001=JLU$DELSET File=JLU$UTIL.:E05TSI                              TUE 07/29/97 23:25 Page:2    
       38     6360        %EJECT;
PL6.E3A0      #001=JLU$DELSET File=JLU$UTIL.:E05TSI                              TUE 07/29/97 23:25 Page:3    
       39     6361
       40     6362        /* Build up first and last keys for this record set.
       41     6363        */
       42     6364    1           FIRST_KEY.CNT = 6;
       43     6365    1           FIRST_KEY.ID = IDN;
       44     6366    1           FIRST_KEY.TYPE = JL_HEADTYPE;
       45     6367    1           FIRST_KEY.PGNO = 0;
       46     6368    1           LAST_KEY.CNT = 6;
       47     6369    1           LAST_KEY.ID = IDN;
       48     6370    1           LAST_KEY.TYPE = JL_TRLRTYPE;
       49     6371    1           LAST_KEY.PGNO = 1023;
       50     6372
       51     6373        /* Set up fpt for doing delete records.
       52     6374        */
       53     6375    1           FPT$DELREC = FPT_DELREC;
       54     6376    1           FPT$DELREC.V_ = VECTOR(FPT$DELREC.V);
       55     6377    1           FPT$DELREC.V.DCB# = %M$STAR#;
       56     6378    1           FPT$DELREC.KEY_ = VECTOR(FIRST_KEY);
       57     6379    1           FPT$DELREC.LKEY_ = VECTOR(LAST_KEY);
       58     6380    1           CALL M$MDELREC(FPT$DELREC) ALTRET(TAKE_SNAP);
       59     6381    1           RETURN;
       60     6382
       61     6383    1   TAKE_SNAP: ;
       62     6384    1           CALL SC_DELSET;
       63     6385    1           RETURN;
       64     6386        /*S*  SCREECH_CODE: JLU-S$DELSET
       65     6387              TYPE:   SNAP
       66     6388              MESSAGE: Error deleting a set of M$LINK records from *N.
       67     6389        */
       68     6390
       69     6391    1   END JLU$DELSET;
       70     6392
       71     6393        %EOD;

PL6.E3A0      #001=JLU$DELSET File=JLU$UTIL.:E05TSI                              TUE 07/29/97 23:25 Page:4    
--  Include file information  --

   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   JL_DATA_M.:E05TOU  is referenced.
      No diagnostics issued in procedure JLU$DELSET.

   Procedure JLU$DELSET requires 48 words for executable code.
   Procedure JLU$DELSET requires 20 words of local(AUTO) storage.

PL6.E3A0      #001=JLU$DELSET File=JLU$UTIL.:E05TSI                              TUE 07/29/97 23:25 Page:5    

 Object Unit name= JLU$DELSET                                 File name= JLU$UTIL.:E05TOU
 UTS= JUL 29 '97 23:25:10.44 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     10     12  JLU$DELSET
    2   Proc  even  none    48     60  JLU$DELSET
    3  RoData even  none     3      3  JLU$DELSET

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        1  JLU$DELSET

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 M$MDELREC
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     SC_DELSET                             M$UC                                  B_VECTNIL
PL6.E3A0      #001=JLU$DELSET File=JLU$UTIL.:E05TSI                              TUE 07/29/97 23:25 Page:6    

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ASLENTSID
PL6.E3A0      #001=JLU$DELSET File=JLU$UTIL.:E05TSI                              TUE 07/29/97 23:25 Page:7    


        1        1        /*M* JLU$UTIL - Utility routines for M$LINK and M$LDTRC.                     */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=8,IND=5,ENU=0,ECU=0    */
        8        8
        9        9        /*F*   NAME:   JLU$DELSET
       10       10               PURPOSE: To delete all of a record set in *N for a given IDN.
       11       11        */
       12       12
       13       13        JLU$DELSET: PROC(IDN);

     13  2 000000   000000 700200 xent  JLU$DELSET   TSX0  ! X66_AUTO_1
         2 000001   000024 000001                    ZERO    20,1

       14       14    1   DCL IDN UBIN(36);
       15       15
       16       16    1   DCL 1 FIRST_KEY,
       17       17    1         2 CNT UBIN(9) UNAL,
       18       18    1         2 ID UBIN(27) UNAL,
       19       19    1         2 TYPE UBIN(9) UNAL,
       20       20    1         2 PGNO UBIN(18) UNAL;
       21       21    1   DCL 1 LAST_KEY,
       22       22    1         2 CNT UBIN(9) UNAL,
       23       23    1         2 ID UBIN(27) UNAL,
       24       24    1         2 TYPE UBIN(9) UNAL,
       25       25    1         2 PGNO UBIN(18) UNAL;
       26       26
       27       27    1   DCL M$MDELREC ENTRY(1) ALTRET;
       28       28    1   DCL SC_DELSET ENTRY CONV(2,0);
       29       29
       30       30        %INCLUDE JL_DATA_M;
       31      199        %INCLUDE CP_6;
       32     5758        %INCLUDE CP_6_SUBS;
PL6.E3A0      #001=JLU$DELSET File=JLU$UTIL.:E05TSI                              TUE 07/29/97 23:25 Page:8    
       33     6298
       34     6299        %FPT_DELREC(STCLASS=CONSTANT);
       35     6318        %FPT_DELREC(FPTN=FPT$DELREC,STCLASS=AUTO);
       36     6337
       37     6338        %JL_SUBS;
       38     6360        %EJECT;
PL6.E3A0      #001=JLU$DELSET File=JLU$UTIL.:E05TSI                              TUE 07/29/97 23:25 Page:9    
       39     6361
       40     6362        /* Build up first and last keys for this record set.
       41     6363        */
       42     6364    1           FIRST_KEY.CNT = 6;

   6364  2 000002   006000 236003                    LDQ     3072,DU
         2 000003   200004 552140                    STBQ    FIRST_KEY,'40'O,AUTO

       43     6365    1           FIRST_KEY.ID = IDN;

   6365  2 000004   200003 470500                    LDP0    @IDN,,AUTO
         2 000005   000000 236100                    LDQ     0,,PR0
         2 000006   200004 552134                    STBQ    FIRST_KEY,'34'O,AUTO

       44     6366    1           FIRST_KEY.TYPE = JL_HEADTYPE;

   6366  2 000007   000000 236003                    LDQ     0,DU
         2 000010   200005 552140                    STBQ    FIRST_KEY+1,'40'O,AUTO

       45     6367    1           FIRST_KEY.PGNO = 0;

   6367  2 000011   200005 552130                    STBQ    FIRST_KEY+1,'30'O,AUTO

       46     6368    1           LAST_KEY.CNT = 6;

   6368  2 000012   006000 236003                    LDQ     3072,DU
         2 000013   200006 552140                    STBQ    LAST_KEY,'40'O,AUTO

       47     6369    1           LAST_KEY.ID = IDN;

   6369  2 000014   000000 236100                    LDQ     0,,PR0
         2 000015   200006 552134                    STBQ    LAST_KEY,'34'O,AUTO

       48     6370    1           LAST_KEY.TYPE = JL_TRLRTYPE;

   6370  2 000016   777000 236003                    LDQ     -512,DU
         2 000017   200007 552140                    STBQ    LAST_KEY+1,'40'O,AUTO
PL6.E3A0      #001=JLU$DELSET File=JLU$UTIL.:E05TSI                              TUE 07/29/97 23:25 Page:10   

       49     6371    1           LAST_KEY.PGNO = 1023;

   6371  2 000020   000000 236000 3                  LDQ     0
         2 000021   200007 552130                    STBQ    LAST_KEY+1,'30'O,AUTO

       50     6372
       51     6373        /* Set up fpt for doing delete records.
       52     6374        */
       53     6375    1           FPT$DELREC = FPT_DELREC;

   6375  2 000022   000100 100400                    MLR     fill='000'O
         2 000023   000000 000050 1                  ADSC9   FPT_DELREC               cn=0,n=40
         2 000024   200010 000050                    ADSC9   FPT$DELREC,,AUTO         cn=0,n=40

       54     6376    1           FPT$DELREC.V_ = VECTOR(FPT$DELREC.V);

   6376  2 000025   000001 235000 3                  LDA     1
         2 000026   200022 452500                    STP2    FPT$DELREC+10,,AUTO
         2 000027   200022 236100                    LDQ     FPT$DELREC+10,,AUTO
         2 000030   000020 036003                    ADLQ    16,DU
         2 000031   200010 757100                    STAQ    FPT$DELREC,,AUTO

       55     6377    1           FPT$DELREC.V.DCB# = %M$STAR#;

   6377  2 000032   000001 220003                    LDX0    1,DU
         2 000033   200020 740100                    STX0    FPT$DELREC+8,,AUTO

       56     6378    1           FPT$DELREC.KEY_ = VECTOR(FIRST_KEY);

   6378  2 000034   000002 235000 3                  LDA     2
         2 000035   200022 452500                    STP2    FPT$DELREC+10,,AUTO
         2 000036   200022 236100                    LDQ     FPT$DELREC+10,,AUTO
         2 000037   000004 036003                    ADLQ    4,DU
         2 000040   200012 757100                    STAQ    FPT$DELREC+2,,AUTO

       57     6379    1           FPT$DELREC.LKEY_ = VECTOR(LAST_KEY);
PL6.E3A0      #001=JLU$DELSET File=JLU$UTIL.:E05TSI                              TUE 07/29/97 23:25 Page:11   

   6379  2 000041   000002 235000 3                  LDA     2
         2 000042   200022 452500                    STP2    FPT$DELREC+10,,AUTO
         2 000043   200022 236100                    LDQ     FPT$DELREC+10,,AUTO
         2 000044   000006 036003                    ADLQ    6,DU
         2 000045   200014 757100                    STAQ    FPT$DELREC+4,,AUTO

       58     6380    1           CALL M$MDELREC(FPT$DELREC) ALTRET(TAKE_SNAP);

   6380  2 000046   200010 631500                    EPPR1   FPT$DELREC,,AUTO
         2 000047   200022 451500                    STP1    FPT$DELREC+10,,AUTO
         2 000050   200022 630500                    EPPR0   FPT$DELREC+10,,AUTO
         2 000051   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000052   000000 701000 xent               TSX1    M$MDELREC
         2 000053   000055 702000 2                  TSX2    TAKE_SNAP

       59     6381    1           RETURN;

   6381  2 000054   000000 702200 xent               TSX2  ! X66_ARET

   6379  2 000055                       TAKE_SNAP    null
       60     6382
       61     6383    1   TAKE_SNAP: ;
       62     6384    1           CALL SC_DELSET;

   6384  2 000055   000000 713400 xsym               CLIMB   SC_DELSET
         2 000056   000000 600000 xsid               climb   nvectors=         0

       63     6385    1           RETURN;

   6385  2 000057   000000 702200 xent               TSX2  ! X66_ARET

FPT_DELREC
 Sect OctLoc
   1     000   000001 777640   000010 006000   000000 177640   000000 006014    ................
   1     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     010   000000 000000   000000 000000                                    ........
PL6.E3A0      #001=JLU$DELSET File=JLU$UTIL.:E05TSI                              TUE 07/29/97 23:25 Page:12   

(unnamed)
 Sect OctLoc
   3     000   000001 777000   000001 777640   000001 577640                    ............
       64     6386        /*S*  SCREECH_CODE: JLU-S$DELSET
       65     6387              TYPE:   SNAP
       66     6388              MESSAGE: Error deleting a set of M$LINK records from *N.
       67     6389        */
       68     6390
       69     6391    1   END JLU$DELSET;
       70     6392
       71     6393        %EOD;

PL6.E3A0      #001=JLU$DELSET File=JLU$UTIL.:E05TSI                              TUE 07/29/97 23:25 Page:13   
--  Include file information  --

   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   JL_DATA_M.:E05TOU  is referenced.
      No diagnostics issued in procedure JLU$DELSET.
PL6.E3A0      #001=JLU$DELSET File=JLU$UTIL.:E05TSI                              TUE 07/29/97 23:25 Page:14   

 **** Variables and constants ****

  ****  Section 001 RoData JLU$DELSET

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(360)   r     1 FPT_DELREC

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @IDN                       4-0-0/b STRC(63)    r     1 FIRST_KEY
    10-0-0/d STRC(360)   r     1 FPT$DELREC                *0-0-0/w UBIN        r     1 IDN
     6-0-0/b STRC(63)    r     1 LAST_KEY


   Procedure JLU$DELSET requires 48 words for executable code.
   Procedure JLU$DELSET requires 20 words of local(AUTO) storage.
PL6.E3A0      #001=JLU$DELSET File=JLU$UTIL.:E05TSI                              TUE 07/29/97 23:25 Page:15   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=JLU$DELSET File=JLU$UTIL.:E05TSI                              TUE 07/29/97 23:25 Page:16   
          MINI XREF LISTING

FIRST_KEY
        16**DCL      6378--ASSIGN
FIRST_KEY.CNT
        17**DCL      6364<<ASSIGN
FIRST_KEY.ID
        18**DCL      6365<<ASSIGN
FIRST_KEY.PGNO
        20**DCL      6367<<ASSIGN
FIRST_KEY.TYPE
        19**DCL      6366<<ASSIGN
FPT$DELREC
      6329**DCL      6375<<ASSIGN   6380<>CALL
FPT$DELREC.KEY_
      6329**DCL      6378<<ASSIGN
FPT$DELREC.LKEY_
      6331**DCL      6379<<ASSIGN
FPT$DELREC.V
      6332**DCL      6376--ASSIGN
FPT$DELREC.V.DCB#
      6333**DCL      6377<<ASSIGN
FPT$DELREC.V_
      6329**DCL      6376<<ASSIGN
FPT_DELREC
      6310**DCL      6375>>ASSIGN
FPT_DELREC.V
      6313**DCL      6310--DCLINIT
IDN
        14**DCL        13--PROC     6365>>ASSIGN   6369>>ASSIGN
LAST_KEY
        21**DCL      6379--ASSIGN
LAST_KEY.CNT
        22**DCL      6368<<ASSIGN
PL6.E3A0      #001=JLU$DELSET File=JLU$UTIL.:E05TSI                              TUE 07/29/97 23:25 Page:17   
LAST_KEY.ID
        23**DCL      6369<<ASSIGN
LAST_KEY.PGNO
        25**DCL      6371<<ASSIGN
LAST_KEY.TYPE
        24**DCL      6370<<ASSIGN
M$MDELREC
        27**DCL-ENT  6380--CALL
SC_DELSET
        28**DCL-ENT  6384--CALL
TAKE_SNAP
      6379**LABEL    6380--CALLALT

PL6.E3A0      #002=JLU$FPRG_REL File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:26 Page:18   
       72        1        /*T***********************************************************/
       73        2        /*T*                                                         */
       74        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       75        4        /*T*                                                         */
       76        5        /*T***********************************************************/
       77        6
       78        7        /*F*   NAME:   JLU$FPRG_REL
       79        8               PURPOSE: Set up to ignore FPRGs the M$LINKer has started up.
       80        9        */
       81       10
       82       11        JLU$FPRG_REL: PROC;
       83       12
       84       13        %INCLUDE B$JIT;
       85      616        %INCLUDE B$ROSEG;
       86      679        %INCLUDE F$DCB;
       87      728        %INCLUDE CP_6_SUBS;
       88     1268        %INCLUDE NK_LDCT_R;
       89     1277        %INCLUDE NK$LDCT;
       90     1379            %NK$LDCT( STCLASS="BASED( LDCT$)");
       91     1425
       92     1426    1   DCL FMP$CLSJ ENTRY;
       93     1427
       94     1428    1   DCL B$JIT$ PTR SYMREF READONLY;
       95     1429    1   DCL B$ROSEG$ PTR SYMREF READONLY;
       96     1430
       97     1431    1   DCL LDCT$ PTR;
       98     1432    1   DCL I SBIN;
       99     1433
      100     1434            /* On entry, B$JIT.DCB$ points to an FPRG DCB.  Set up to
      101     1435               ignore any input from the FPRG through this connection. */
      102     1436    1           LDCT$ = NK$LDCT$( B$JIT$->B$JIT.DCB$->F$DCB.LDCTX);
      103     1437    1           IF LDCT$ ~= ADDR( NIL) THEN
      104     1438    1                NK$LDCT.DFLG.RLSE = '1'B;
      105     1439    1           RETURN;
      106     1440
      107     1441        /*F*   NAME:   JLU$FPRG_GET
      108     1442               PURPOSE: Set up to listen to FPRGs the M$LINKer had started up.
PL6.E3A0      #002=JLU$FPRG_REL File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:26 Page:19   
      109     1443        */
      110     1444    1   JLU$FPRG_GET: ENTRY;
      111     1445
      112     1446            /* We've been called by the LOAD/LINK RETURN code.  Loop through
      113     1447               all the user DCBs to find those that were used for FPRG links
      114     1448               before the user program had M$LINKed away.  For each one found,
      115     1449               make sure the corresponding LDCT is still around.  If it is,
      116     1450               enable input from the FPRG through that LDCT/DCB, otherwise
      117     1451               get the DCB closed because the FPRG has disappeared.        */
      118     1452
      119     1453    2           DO I = 9 TO B$ROSEG$->B$ROSEG.NUMDCBS;
      120     1454    3                IF B$ROSEG$->B$ROSEG.DCBPTR$->B$RODCB$( I) ~= ADDR( NIL) THEN DO;
      121     1455    3                     B$JIT$->B$JIT.DCB$ = B$ROSEG$->B$ROSEG.DCBPTR$->B$RODCB$( I);
      122     1456    3                     IF NOT B$JIT$->B$JIT.DCB$->F$DCB.FCD THEN EXIT;
      123     1457    4                     IF B$JIT$->B$JIT.DCB$->F$DCB.IASN = %FPRGIASN# THEN DO;
      124     1458    4                          LDCT$ = NK$LDCT$( B$JIT$->B$JIT.DCB$->F$DCB.LDCTX);
      125     1459    5                          IF LDCT$ ~= ADDR( NIL) THEN DO;
      126     1460    5                               IF NK$LDCT.DCBNO = I AND NK$LDCT.USER = B$JIT.USER THEN
      127     1461    5                                    NK$LDCT.DFLG.RLSE = '0'B;
      128     1462    5                               ELSE
      129     1463    5                                    GOTO FPRG_GONE;
      130     1464    5                               END;
      131     1465    5                          ELSE DO;
      132     1466    5   FPRG_GONE:
      133     1467    5                               B$JIT$->B$JIT.DCB$->F$DCB.LDCTX = 0;
      134     1468    5                               CALL FMP$CLSJ;
      135     1469    5                               END;
      136     1470    4                          END;
      137     1471    3                     END;
      138     1472    2                END;
      139     1473    1           RETURN;
      140     1474
      141     1475    1   END JLU$FPRG_REL;
      142     1476        %EOD;

PL6.E3A0      #002=JLU$FPRG_REL File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:26 Page:20   
--  Include file information  --

   NK$LDCT.:E05TOU  is referenced.
   NK_LDCT_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B$ROSEG.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JLU$FPRG_REL.

   Procedure JLU$FPRG_REL requires 66 words for executable code.
   Procedure JLU$FPRG_REL requires 6 words of local(AUTO) storage.

PL6.E3A0      #002=JLU$FPRG_REL File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:26 Page:21   

 Object Unit name= JLU$FPRG_REL                               File name= JLU$UTIL.:E05TOU
 UTS= JUL 29 '97 23:26:10.76 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    66    102  JLU$FPRG_REL
    1  RoData even  none     1      1  JLU$FPRG_REL

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        0  JLU$FPRG_REL
     0     16                  yes      Std        0  JLU$FPRG_GET

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 FMP$CLSJ
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     N$DCT$$                          r    B$JIT$                           r    B$ROSEG$
     B_VECTNIL
PL6.E3A0      #002=JLU$FPRG_REL File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:26 Page:22   


       72        1        /*T***********************************************************/
       73        2        /*T*                                                         */
       74        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       75        4        /*T*                                                         */
       76        5        /*T***********************************************************/
       77        6
       78        7        /*F*   NAME:   JLU$FPRG_REL
       79        8               PURPOSE: Set up to ignore FPRGs the M$LINKer has started up.
       80        9        */
       81       10
       82       11        JLU$FPRG_REL: PROC;

     11  0 000000   000000 700200 xent  JLU$FPRG_REL TSX0  ! X66_AUTO_0
         0 000001   000006 000000                    ZERO    6,0

       83       12
       84       13        %INCLUDE B$JIT;
       85      616        %INCLUDE B$ROSEG;
       86      679        %INCLUDE F$DCB;
       87      728        %INCLUDE CP_6_SUBS;
       88     1268        %INCLUDE NK_LDCT_R;
       89     1277        %INCLUDE NK$LDCT;
       90     1379            %NK$LDCT( STCLASS="BASED( LDCT$)");
       91     1425
       92     1426    1   DCL FMP$CLSJ ENTRY;
       93     1427
       94     1428    1   DCL B$JIT$ PTR SYMREF READONLY;
       95     1429    1   DCL B$ROSEG$ PTR SYMREF READONLY;
       96     1430
       97     1431    1   DCL LDCT$ PTR;
       98     1432    1   DCL I SBIN;
       99     1433
      100     1434            /* On entry, B$JIT.DCB$ points to an FPRG DCB.  Set up to
      101     1435               ignore any input from the FPRG through this connection. */
      102     1436    1           LDCT$ = NK$LDCT$( B$JIT$->B$JIT.DCB$->F$DCB.LDCTX);

PL6.E3A0      #002=JLU$FPRG_REL File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:26 Page:23   
   1436  0 000002   000000 470400 xsym               LDP0    B$JIT$
         0 000003   000232 471500                    LDP1    154,,PR0
         0 000004   100051 220100                    LDX0    41,,PR1
         0 000005   000000 473400 xsym               LDP3    N$DCT$$
         0 000006   300000 236110                    LDQ     0,X0,PR3
         0 000007   200003 756100                    STQ     LDCT$,,AUTO

      103     1437    1           IF LDCT$ ~= ADDR( NIL) THEN

   1437  0 000010   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000011   000015 600000 0                  TZE     s:1439

      104     1438    1                NK$LDCT.DFLG.RLSE = '1'B;

   1438  0 000012   200003 474500                    LDP4    LDCT$,,AUTO
         0 000013   000400 236007                    LDQ     256,DL
         0 000014   400006 256100                    ORSQ    6,,PR4

      105     1439    1           RETURN;

   1439  0 000015   000000 702200 xent               TSX2  ! X66_ARET

      106     1440
      107     1441        /*F*   NAME:   JLU$FPRG_GET
      108     1442               PURPOSE: Set up to listen to FPRGs the M$LINKer had started up.
      109     1443        */
      110     1444    1   JLU$FPRG_GET: ENTRY;

   1444  0 000016   000000 700200 xent  JLU$FPRG_GET TSX0  ! X66_AUTO_0
         0 000017   000006 000000                    ZERO    6,0

      111     1445
      112     1446            /* We've been called by the LOAD/LINK RETURN code.  Loop through
      113     1447               all the user DCBs to find those that were used for FPRG links
      114     1448               before the user program had M$LINKed away.  For each one found,
      115     1449               make sure the corresponding LDCT is still around.  If it is,
      116     1450               enable input from the FPRG through that LDCT/DCB, otherwise
PL6.E3A0      #002=JLU$FPRG_REL File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:26 Page:24   
      117     1451               get the DCB closed because the FPRG has disappeared.        */
      118     1452
      119     1453    2           DO I = 9 TO B$ROSEG$->B$ROSEG.NUMDCBS;

   1453  0 000020   000011 235007                    LDA     9,DL
         0 000021   200004 755100                    STA     I,,AUTO
         0 000022   000074 710000 0                  TRA     s:1472+1

      120     1454    3                IF B$ROSEG$->B$ROSEG.DCBPTR$->B$RODCB$( I) ~= ADDR( NIL) THEN DO;

   1454  0 000023   000000 470400 xsym               LDP0    B$ROSEG$
         0 000024   000000 471500                    LDP1    0,,PR0
         0 000025   200004 720100                    LXL0    I,,AUTO
         0 000026   100000 236110                    LDQ     0,X0,PR1
         0 000027   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000030   000073 600000 0                  TZE     s:1472

      121     1455    3                     B$JIT$->B$JIT.DCB$ = B$ROSEG$->B$ROSEG.DCBPTR$->B$RODCB$( I);

   1455  0 000031   000000 473400 xsym               LDP3    B$JIT$
         0 000032   300232 756100                    STQ     154,,PR3

      122     1456    3                     IF NOT B$JIT$->B$JIT.DCB$->F$DCB.FCD THEN EXIT;

   1456  0 000033   300232 471500                    LDP1    154,,PR3
         0 000034   100031 236100                    LDQ     25,,PR1
         0 000035   020000 316007                    CANQ    8192,DL
         0 000036   000073 600000 0                  TZE     s:1472

      123     1457    4                     IF B$JIT$->B$JIT.DCB$->F$DCB.IASN = %FPRGIASN# THEN DO;

   1457  0 000037   100103 236100                    LDQ     67,,PR1
         0 000040   000777 376007                    ANQ     511,DL
         0 000041   000010 116007                    CMPQ    8,DL
         0 000042   000073 601000 0                  TNZ     s:1472

      124     1458    4                          LDCT$ = NK$LDCT$( B$JIT$->B$JIT.DCB$->F$DCB.LDCTX);
PL6.E3A0      #002=JLU$FPRG_REL File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:26 Page:25   

   1458  0 000043   100051 221100                    LDX1    41,,PR1
         0 000044   000000 474400 xsym               LDP4    N$DCT$$
         0 000045   400000 236111                    LDQ     0,X1,PR4
         0 000046   200003 756100                    STQ     LDCT$,,AUTO

      125     1459    5                          IF LDCT$ ~= ADDR( NIL) THEN DO;

   1459  0 000047   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000050   000066 600000 0                  TZE     FPRG_GONE

      126     1460    5                               IF NK$LDCT.DCBNO = I AND NK$LDCT.USER = B$JIT.USER THEN

   1460  0 000051   200003 475500                    LDP5    LDCT$,,AUTO
         0 000052   500014 236100                    LDQ     12,,PR5
         0 000053   000033 736000                    QLS     27
         0 000054   000033 732000                    QRS     27
         0 000055   200004 116100                    CMPQ    I,,AUTO
         0 000056   000066 601000 0                  TNZ     FPRG_GONE
         0 000057   500007 236100                    LDQ     7,,PR5
         0 000060   300000 676100                    ERQ     0,,PR3
         0 000061   000777 376003                    ANQ     511,DU
         0 000062   000066 601000 0                  TNZ     FPRG_GONE

      127     1461    5                                    NK$LDCT.DFLG.RLSE = '0'B;

   1461  0 000063   000000 236000 1                  LDQ     0
         0 000064   500006 356100                    ANSQ    6,,PR5
         0 000065   000073 710000 0                  TRA     s:1472

      128     1462    5                               ELSE
      129     1463    5                                    GOTO FPRG_GONE;
      130     1464    5                               END;
      131     1465    5                          ELSE DO;

      132     1466    5   FPRG_GONE:
      133     1467    5                               B$JIT$->B$JIT.DCB$->F$DCB.LDCTX = 0;
PL6.E3A0      #002=JLU$FPRG_REL File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:26 Page:26   

   1467  0 000066   000000 222003       FPRG_GONE    LDX2    0,DU
         0 000067   100051 742100                    STX2    41,,PR1

      134     1468    5                               CALL FMP$CLSJ;

   1468  0 000070   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000071   000000 701000 xent               TSX1    FMP$CLSJ
         0 000072   000000 011000                    NOP     0

      135     1469    5                               END;

      136     1470    4                          END;

      137     1471    3                     END;

      138     1472    2                END;

   1472  0 000073   200004 054100                    AOS     I,,AUTO
         0 000074   000000 470400 xsym               LDP0    B$ROSEG$
         0 000075   000002 236100                    LDQ     2,,PR0
         0 000076   000022 772000                    QRL     18
         0 000077   200004 116100                    CMPQ    I,,AUTO
         0 000100   000023 605000 0                  TPL     s:1454

      139     1473    1           RETURN;

   1473  0 000101   000000 702200 xent               TSX2  ! X66_ARET

(unnamed)
 Sect OctLoc
   1     000   777777 777377                                                    ....
      140     1474
      141     1475    1   END JLU$FPRG_REL;
      142     1476        %EOD;

PL6.E3A0      #002=JLU$FPRG_REL File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:26 Page:27   
--  Include file information  --

   NK$LDCT.:E05TOU  is referenced.
   NK_LDCT_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B$ROSEG.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JLU$FPRG_REL.
PL6.E3A0      #002=JLU$FPRG_REL File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:26 Page:28   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w SBIN        r     1 I                          3-0-0/w PTR         r     1 LDCT$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$ROSEG$
     0-0-0/w PTR         r     1 N$DCT$$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/w PTR         r     1 B$RODCB$(0:0)
     0-0-0/d STRC(3024)  r     1 B$ROSEG                    0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0/d STRC(864)   r     1 NK$LDCT
     0-0-0/w PTR         r     1 NK$LDCT$(0:0)


   Procedure JLU$FPRG_REL requires 66 words for executable code.
   Procedure JLU$FPRG_REL requires 6 words of local(AUTO) storage.
PL6.E3A0      #002=JLU$FPRG_REL File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:26 Page:29   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=JLU$FPRG_REL File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:26 Page:30   
          MINI XREF LISTING

B$JIT.CPFLAGS1.SLEAZE
       434**DCL       434--REDEF
B$JIT.DCB$
       508**DCL      1436>>ASSIGN   1455<<ASSIGN   1456>>IF       1457>>IF       1458>>ASSIGN   1467>>ASSIGN
B$JIT.ERR.MID
       341**DCL       341--REDEF
B$JIT.JRESPEAK
       502**DCL       503--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
       611**DCL       611--REDEF     612--REDEF
B$JIT.PNR
       515**DCL       515--REDEF
B$JIT.TSLINE
       609**DCL       610--REDEF
B$JIT.USER
       340**DCL      1460>>IF
B$JIT$
      1428**DCL       335--IMP-PTR  1436>>ASSIGN   1455>>ASSIGN   1456>>IF       1457>>IF       1458>>ASSIGN
      1460>>IF       1467>>ASSIGN
B$RODCB$
       663**DCL      1454>>IF       1455>>ASSIGN
B$ROSEG.DCBPTR$
       627**DCL      1454>>IF       1455>>ASSIGN
B$ROSEG.NUMDCBS
       629**DCL      1453>>DOINDEX
B$ROSEG$
      1429**DCL      1453>>DOINDEX  1454>>IF       1455>>ASSIGN
F$DCB.ACTPOS
       705**DCL       705--REDEF
F$DCB.ARS
       680**DCL       680--REDEF
F$DCB.ATTR
PL6.E3A0      #002=JLU$FPRG_REL File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:26 Page:31   
       698**DCL       699--REDEF
F$DCB.BORROW
       713**DCL       713--REDEF     713--REDEF     713--REDEF
F$DCB.DCBNAME.L
       727**DCL       727--IMP-SIZ
F$DCB.EOMCHAR
       684**DCL       684--REDEF
F$DCB.FCD
       693**DCL      1456>>IF
F$DCB.FLDID
       708**DCL       708--REDEF
F$DCB.FORM$
       702**DCL       702--REDEF
F$DCB.FSECT
       718**DCL       718--REDEF
F$DCB.FSN
       695**DCL       695--REDEF     695--REDEF     696--REDEF
F$DCB.HEADER$
       701**DCL       701--REDEF
F$DCB.IASN
       721**DCL      1457>>IF
F$DCB.IXTNSIZE
       699**DCL       699--REDEF
F$DCB.LASTSTA$
       689**DCL       689--REDEF
F$DCB.LDCTX
       702**DCL      1436>>ASSIGN   1458>>ASSIGN   1467<<ASSIGN
F$DCB.LVL
       714**DCL       714--REDEF
F$DCB.NAME.C
       689**DCL       689--REDEF
F$DCB.NOEOF
       710**DCL       710--REDEF
F$DCB.NRECS
       700**DCL       700--REDEF
F$DCB.NRECX
PL6.E3A0      #002=JLU$FPRG_REL File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:26 Page:32   
       719**DCL       719--REDEF
F$DCB.OHDR
       711**DCL       711--REDEF
F$DCB.ORG
       694**DCL       694--REDEF
F$DCB.PRECNO
       717**DCL       717--REDEF
F$DCB.RCSZ
       722**DCL       722--REDEF
F$DCB.RES
       690**DCL       690--REDEF
F$DCB.SETX
       702**DCL       702--REDEF
F$DCB.TAB$
       701**DCL       702--REDEF
F$DCB.TDA
       716**DCL       716--REDEF
F$DCB.WSN
       691**DCL       691--REDEF
FMP$CLSJ
      1426**DCL-ENT  1468--CALL
FPRG_GONE
      1467**LABEL    1463--GOTO
I
      1432**DCL      1453<<DOINDEX  1454>>IF       1455>>ASSIGN   1460>>IF
LDCT$
      1431**DCL      1392--IMP-PTR  1436<<ASSIGN   1437>>IF       1438>>ASSIGN   1458<<ASSIGN   1459>>IF
      1460>>IF       1460>>IF       1461>>ASSIGN
N$DCT$$
      1275**DCL      1275--IMP-PTR  1436>>ASSIGN   1458>>ASSIGN
NK$LDCT.DCBNO
      1416**DCL      1460>>IF
NK$LDCT.DDT$
      1394**DCL      1394--REDEF
NK$LDCT.DFLG.RLSE
      1399**DCL      1438<<ASSIGN   1461<<ASSIGN
PL6.E3A0      #002=JLU$FPRG_REL File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:26 Page:33   
NK$LDCT.IOQ$
      1393**DCL      1394--REDEF
NK$LDCT.LDCTX
      1395**DCL      1395--REDEF
NK$LDCT.LKFLG.ABORTED
      1407**DCL      1408--REDEF
NK$LDCT.RLCID.LDCTX
      1417**DCL      1417--REDEF
NK$LDCT.STA$
      1413**DCL      1414--REDEF
NK$LDCT.SYMB$
      1392**DCL      1392--REDEF    1392--REDEF    1393--REDEF
NK$LDCT.USER
      1402**DCL      1460>>IF
NK$LDCT$
      1275**DCL      1436>>ASSIGN   1458>>ASSIGN

PL6.E3A0      #003=JLU$MLINK File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:26 Page:34   
      143        1        /*T***********************************************************/
      144        2        /*T*                                                         */
      145        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      146        4        /*T*                                                         */
      147        5        /*T***********************************************************/
      148        6
      149        7        /*F* NAME: JLU$MLINK
      150        8             PURPOSE: To provide an interface between monitor modules that
      151        9                      wish to cause an M$LINK to a :SYS processor and the
      152       10                      standard user M$LINK handler, JLL$LDLNK.
      153       11
      154       12             CALL:   CALL JLU$MLINK (NAME$,CMD$,CLEANUP$)
      155       13
      156       14                     There is no normal return.
      157       15                     The alternate return will be taken only if JLU$VALID
      158       16                     fails (the user has CVMed pages into his procedure or data).
      159       17
      160       18             INPUT: NAME$ - PTR. This pointer is to contain the address of
      161       19                    the TEXTC name of the processor to be linked to.
      162       20
      163       21                    CMD$ - PTR.  This pointer is to contain the address of
      164       22                    a TEXTC command that is to be put in B$JIT.CCBUF.
      165       23
      166       24                    CLEANUP$ - EPTR.  Contains the ENTADDR of a monitor routine
      167       25                    to be called when the linked to processor terminates.
      168       26
      169       27                    B$JIT.ERR will be zero if the linked to program
      170       28                    terminated normally.  If the linked to program aborted,
      171       29                    B$JIT.ERR will contain the error code and the severity
      172       30                    will be zero.  If the linked to program could not be
      173       31                    put into execution, B$JIT.ERR will contain the error
      174       32                    code with a non-zero severity.
      175       33
      176       34                    The clean-up routine may reset JIT.ERR and/or JIT.RNST.
      177       35                    An alternate return from the clean-up routine will cause
      178       36                    the user abort logic to be entered.  Setting JIT.RNST
      179       37                    to any of the %RS_XCON# values will also cause the user
PL6.E3A0      #003=JLU$MLINK File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:26 Page:35   
      180       38                    abort logic to be entered.  Setting JIT.ERR.CODE non-zero,
      181       39                    while not setting JIT.RNST, will cause an ALTRET to the
      182       40                    user's monitor service that caused that service to do the
      183       41                    M$MLINK in the first place.
      184       42
      185       43        */
      186       44
      187       45        JLU$MLINK: PROC(NAME$,CMD$,CLEANUP$) ALTRET;
      188       46
      189       47        %INCLUDE B$JIT;
      190      650
      191      651    1   DCL NAME$ PTR;
      192      652    1   DCL CMD$ PTR;
      193      653    1   DCL CLEANUP$ EPTR;
      194      654
      195      655    1   DCL JLL$LINK ENTRY(6) ALTRET;
      196      656
      197      657    1   DCL B$JIT$ PTR SYMREF READONLY;
      198      658    1   DCL J_SYS$ PTR SYMREF READONLY;
      199      659
      200      660        %SUB B$JIT=B$JIT$->B$JIT;
      201      661
      202      662        %EJECT;
PL6.E3A0      #003=JLU$MLINK File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:26 Page:36   
      203      663    1           B$JIT.JUNK = B$JIT.JUNK | %JJ_MONLINK#;
      204      664    1           CALL JLL$LINK(NAME$,J_SYS$,ADDR(NIL),ADDR(NIL),CMD$,CLEANUP$);
      205      665    1           B$JIT.JUNK = B$JIT.JUNK & ~%JJ_MONLINK#;
      206      666    1           ALTRETURN;
      207      667
      208      668    1   END JLU$MLINK;
      209      669        %EOD;

PL6.E3A0      #003=JLU$MLINK File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:26 Page:37   
--  Include file information  --

   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JLU$MLINK.

   Procedure JLU$MLINK requires 27 words for executable code.
   Procedure JLU$MLINK requires 14 words of local(AUTO) storage.

PL6.E3A0      #003=JLU$MLINK File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:26 Page:38   

 Object Unit name= JLU$MLINK                                  File name= JLU$UTIL.:E05TOU
 UTS= JUL 29 '97 23:26:49.32 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    27     33  JLU$MLINK
    1  RoData even  none     1      1  JLU$MLINK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        3  JLU$MLINK

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       6 JLL$LINK
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    B$JIT$                           r    J_SYS$                                B_VECTNIL
PL6.E3A0      #003=JLU$MLINK File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:26 Page:39   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #003=JLU$MLINK File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:26 Page:40   


      143        1        /*T***********************************************************/
      144        2        /*T*                                                         */
      145        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      146        4        /*T*                                                         */
      147        5        /*T***********************************************************/
      148        6
      149        7        /*F* NAME: JLU$MLINK
      150        8             PURPOSE: To provide an interface between monitor modules that
      151        9                      wish to cause an M$LINK to a :SYS processor and the
      152       10                      standard user M$LINK handler, JLL$LDLNK.
      153       11
      154       12             CALL:   CALL JLU$MLINK (NAME$,CMD$,CLEANUP$)
      155       13
      156       14                     There is no normal return.
      157       15                     The alternate return will be taken only if JLU$VALID
      158       16                     fails (the user has CVMed pages into his procedure or data).
      159       17
      160       18             INPUT: NAME$ - PTR. This pointer is to contain the address of
      161       19                    the TEXTC name of the processor to be linked to.
      162       20
      163       21                    CMD$ - PTR.  This pointer is to contain the address of
      164       22                    a TEXTC command that is to be put in B$JIT.CCBUF.
      165       23
      166       24                    CLEANUP$ - EPTR.  Contains the ENTADDR of a monitor routine
      167       25                    to be called when the linked to processor terminates.
      168       26
      169       27                    B$JIT.ERR will be zero if the linked to program
      170       28                    terminated normally.  If the linked to program aborted,
      171       29                    B$JIT.ERR will contain the error code and the severity
      172       30                    will be zero.  If the linked to program could not be
      173       31                    put into execution, B$JIT.ERR will contain the error
      174       32                    code with a non-zero severity.
      175       33
      176       34                    The clean-up routine may reset JIT.ERR and/or JIT.RNST.
      177       35                    An alternate return from the clean-up routine will cause
      178       36                    the user abort logic to be entered.  Setting JIT.RNST
PL6.E3A0      #003=JLU$MLINK File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:26 Page:41   
      179       37                    to any of the %RS_XCON# values will also cause the user
      180       38                    abort logic to be entered.  Setting JIT.ERR.CODE non-zero,
      181       39                    while not setting JIT.RNST, will cause an ALTRET to the
      182       40                    user's monitor service that caused that service to do the
      183       41                    M$MLINK in the first place.
      184       42
      185       43        */
      186       44
      187       45        JLU$MLINK: PROC(NAME$,CMD$,CLEANUP$) ALTRET;

     45  0 000000   000000 700200 xent  JLU$MLINK    TSX0  ! X66_AUTO_3
         0 000001   000016 000003                    ZERO    14,3

      188       46
      189       47        %INCLUDE B$JIT;
      190      650
      191      651    1   DCL NAME$ PTR;
      192      652    1   DCL CMD$ PTR;
      193      653    1   DCL CLEANUP$ EPTR;
      194      654
      195      655    1   DCL JLL$LINK ENTRY(6) ALTRET;
      196      656
      197      657    1   DCL B$JIT$ PTR SYMREF READONLY;
      198      658    1   DCL J_SYS$ PTR SYMREF READONLY;
      199      659
      200      660        %SUB B$JIT=B$JIT$->B$JIT;
      201      661
      202      662        %EJECT;
PL6.E3A0      #003=JLU$MLINK File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:26 Page:42   
      203      663    1           B$JIT.JUNK = B$JIT.JUNK | %JJ_MONLINK#;

    663  0 000002   000000 470400 xsym               LDP0    B$JIT$
         0 000003   000315 220100                    LDX0    205,,PR0
         0 000004   000020 260003                    ORX0    16,DU
         0 000005   000315 740100                    STX0    205,,PR0

      204      664    1           CALL JLL$LINK(NAME$,J_SYS$,ADDR(NIL),ADDR(NIL),CMD$,CLEANUP$);

    664  0 000006   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000007   200006 756100                    STQ     @CLEANUP$+1,,AUTO
         0 000010   200007 756100                    STQ     @CLEANUP$+2,,AUTO
         0 000011   200004 237100                    LDAQ    @CMD$,,AUTO
         0 000012   200014 757100                    STAQ    @CLEANUP$+7,,AUTO
         0 000013   200007 631500                    EPPR1   @CLEANUP$+2,,AUTO
         0 000014   200013 451500                    STP1    @CLEANUP$+6,,AUTO
         0 000015   200006 633500                    EPPR3   @CLEANUP$+1,,AUTO
         0 000016   200012 453500                    STP3    @CLEANUP$+5,,AUTO
         0 000017   000000 236000 1                  LDQ     0
         0 000020   200003 235100                    LDA     @NAME$,,AUTO
         0 000021   200010 757100                    STAQ    @CLEANUP$+3,,AUTO
         0 000022   200010 630500                    EPPR0   @CLEANUP$+3,,AUTO
         0 000023   000024 631400 xsym               EPPR1   B_VECTNIL+20
         0 000024   000000 701000 xent               TSX1    JLL$LINK
         0 000025   000000 011000                    NOP     0

      205      665    1           B$JIT.JUNK = B$JIT.JUNK & ~%JJ_MONLINK#;

    665  0 000026   000000 470400 xsym               LDP0    B$JIT$
         0 000027   000315 220100                    LDX0    205,,PR0
         0 000030   777757 360003                    ANX0    -17,DU
         0 000031   000315 740100                    STX0    205,,PR0

      206      666    1           ALTRETURN;

    666  0 000032   000000 702200 xent               TSX2  ! X66_AALT

PL6.E3A0      #003=JLU$MLINK File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:26 Page:43   
(unnamed)
 Sect OctLoc
   1     000   000000 006000                                                    ....
      207      667
      208      668    1   END JLU$MLINK;
      209      669        %EOD;

PL6.E3A0      #003=JLU$MLINK File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:26 Page:44   
--  Include file information  --

   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JLU$MLINK.
PL6.E3A0      #003=JLU$MLINK File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:26 Page:45   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @CLEANUP$                  4-0-0/w PTR         r     1 @CMD$
     3-0-0/w PTR         r     1 @NAME$                    *0-0-0/w EPTR        r     1 CLEANUP$
    *0-0-0/w PTR         r     1 CMD$                      *0-0-0/w PTR         r     1 NAME$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 J_SYS$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT


   Procedure JLU$MLINK requires 27 words for executable code.
   Procedure JLU$MLINK requires 14 words of local(AUTO) storage.
PL6.E3A0      #003=JLU$MLINK File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:26 Page:46   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=JLU$MLINK File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:26 Page:47   
          MINI XREF LISTING

B$JIT.CPFLAGS1.SLEAZE
       468**DCL       468--REDEF
B$JIT.ERR.MID
       375**DCL       375--REDEF
B$JIT.JRESPEAK
       536**DCL       537--REDEF
B$JIT.JUNK
       574**DCL       663<<ASSIGN    663>>ASSIGN    665<<ASSIGN    665>>ASSIGN
B$JIT.ORIGINATOR_PORT.FROM_CR
       645**DCL       645--REDEF     646--REDEF
B$JIT.PNR
       549**DCL       549--REDEF
B$JIT.TSLINE
       643**DCL       644--REDEF
B$JIT$
       657**DCL       369--IMP-PTR   663>>ASSIGN    663>>ASSIGN    665>>ASSIGN    665>>ASSIGN
CLEANUP$
       653**DCL        45--PROC      664<>CALL
CMD$
       652**DCL        45--PROC      664<>CALL
JLL$LINK
       655**DCL-ENT   664--CALL
J_SYS$
       658**DCL       664<>CALL
NAME$
       651**DCL        45--PROC      664<>CALL

PL6.E3A0      #004=JLU$OPNSTARN File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:48   
      210        1        /*T***********************************************************/
      211        2        /*T*                                                         */
      212        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      213        4        /*T*                                                         */
      214        5        /*T***********************************************************/
      215        6
      216        7        /*F*   NAME:   JLU$OPNSTARN
      217        8               PURPOSE: To open the STAR-N file for update.
      218        9        */
      219       10
      220       11        JLU$OPNSTARN: PROC(ERR) ALTRET;
      221       12    1   DCL ERR SBIN;
      222       13
      223       14        %INCLUDE B$JIT;
      224      617        %INCLUDE F$DCB;
      225      666        %INCLUDE CP_6_SUBS;
      226     1206
      227     1207    1   DCL FMM$SCRUB ENTRY(1);
      228     1208    1   DCL FMM$DFLOPNP ENTRY;
      229     1209
      230     1210    1   DCL XTNSIZ UBIN;
      231     1211    1   DCL B$JIT$ PTR SYMREF READONLY;
      232     1212    1   DCL B$M$STAR$ PTR SYMREF READONLY;
      233     1213    1   DCL 1 STARN CONSTANT,
      234     1214    1         2 N UBIN(9) UNAL INIT(2),
      235     1215    1         2 T CHAR(2) UNAL INIT('*N');
      236     1216
      237     1217        %SUB M$STAR = B$M$STAR$->F$DCB;
      238     1218        %SUB B$JIT = B$JIT$->B$JIT;
      239     1219
      240     1220        %EJECT;
PL6.E3A0      #004=JLU$OPNSTARN File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:49   
      241     1221
      242     1222        /* Xtnsiz must be set to be one greater than the number of pages
      243     1223           to be written in order to allow for the header and trailer records.
      244     1224        */
      245     1225    1           XTNSIZ = B$JIT.PPC + 1;
      246     1226    1           CALL FMM$SCRUB(B$M$STAR$);
      247     1227
      248     1228    1           B$JIT.DCB$=B$M$STAR$;
      249     1229    1           M$STAR.ASN=%FILE#;
      250     1230    1           M$STAR.FUN=%CREATE#;
      251     1231    1           M$STAR.EXIST=%OLDFILE#;
      252     1232    1           M$STAR.ORG=%KEYED#;
      253     1233    1           M$STAR.NAME=STARN;
      254     1234    1           M$STAR.ACS = %DIRECT#;
      255     1235    1           M$STAR.IXTNSIZE = XTNSIZ;
      256     1236    1           B$JIT.ERR='0'B;
      257     1237
      258     1238    1           CALL FMM$DFLOPNP;
      259     1239    1           IF B$JIT.ERR
      260     1240    2           THEN DO;
      261     1241    2                ERR = B$JIT.ERR.CODE;
      262     1242    2                ALTRETURN;
      263     1243    2                END;
      264     1244
      265     1245    1           M$STAR.XTNSIZE = XTNSIZ;
      266     1246    1           RETURN;
      267     1247    1   END JLU$OPNSTARN;
      268     1248
      269     1249        %EOD;

PL6.E3A0      #004=JLU$OPNSTARN File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:50   
--  Include file information  --

   CP_6_SUBS.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JLU$OPNSTARN.

   Procedure JLU$OPNSTARN requires 49 words for executable code.
   Procedure JLU$OPNSTARN requires 6 words of local(AUTO) storage.

PL6.E3A0      #004=JLU$OPNSTARN File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:51   

 Object Unit name= JLU$OPNSTARN                               File name= JLU$UTIL.:E05TOU
 UTS= JUL 29 '97 23:27:07.72 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      1      1  JLU$OPNSTARN
    1   Proc  even  none    49     61  JLU$OPNSTARN
    2  RoData even  none     2      2  JLU$OPNSTARN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        1  JLU$OPNSTARN

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 FMM$SCRUB
         yes           Std       0 FMM$DFLOPNP
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    B$JIT$                           r    B$M$STAR$                             B_VECTNIL
PL6.E3A0      #004=JLU$OPNSTARN File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:52   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #004=JLU$OPNSTARN File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:53   


      210        1        /*T***********************************************************/
      211        2        /*T*                                                         */
      212        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      213        4        /*T*                                                         */
      214        5        /*T***********************************************************/
      215        6
      216        7        /*F*   NAME:   JLU$OPNSTARN
      217        8               PURPOSE: To open the STAR-N file for update.
      218        9        */
      219       10
      220       11        JLU$OPNSTARN: PROC(ERR) ALTRET;

     11  1 000000   000000 700200 xent  JLU$OPNSTARN TSX0  ! X66_AUTO_1
         1 000001   000006 000001                    ZERO    6,1

      221       12    1   DCL ERR SBIN;
      222       13
      223       14        %INCLUDE B$JIT;
      224      617        %INCLUDE F$DCB;
      225      666        %INCLUDE CP_6_SUBS;
      226     1206
      227     1207    1   DCL FMM$SCRUB ENTRY(1);
      228     1208    1   DCL FMM$DFLOPNP ENTRY;
      229     1209
      230     1210    1   DCL XTNSIZ UBIN;
      231     1211    1   DCL B$JIT$ PTR SYMREF READONLY;
      232     1212    1   DCL B$M$STAR$ PTR SYMREF READONLY;
      233     1213    1   DCL 1 STARN CONSTANT,
      234     1214    1         2 N UBIN(9) UNAL INIT(2),
      235     1215    1         2 T CHAR(2) UNAL INIT('*N');
      236     1216
      237     1217        %SUB M$STAR = B$M$STAR$->F$DCB;
      238     1218        %SUB B$JIT = B$JIT$->B$JIT;
      239     1219
      240     1220        %EJECT;
PL6.E3A0      #004=JLU$OPNSTARN File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:54   
      241     1221
      242     1222        /* Xtnsiz must be set to be one greater than the number of pages
      243     1223           to be written in order to allow for the header and trailer records.
      244     1224        */
      245     1225    1           XTNSIZ = B$JIT.PPC + 1;

   1225  1 000002   000000 470400 xsym               LDP0    B$JIT$
         1 000003   000207 236100                    LDQ     135,,PR0
         1 000004   777777 376007                    ANQ     -1,DL
         1 000005   000001 036007                    ADLQ    1,DL
         1 000006   200004 756100                    STQ     XTNSIZ,,AUTO

      246     1226    1           CALL FMM$SCRUB(B$M$STAR$);

   1226  1 000007   000000 630400 2                  EPPR0   0
         1 000010   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000011   000000 701000 xent               TSX1    FMM$SCRUB
         1 000012   000000 011000                    NOP     0

      247     1227
      248     1228    1           B$JIT.DCB$=B$M$STAR$;

   1228  1 000013   000000 236000 xsym               LDQ     B$M$STAR$
         1 000014   000000 470400 xsym               LDP0    B$JIT$
         1 000015   000232 756100                    STQ     154,,PR0

      249     1229    1           M$STAR.ASN=%FILE#;

   1229  1 000016   000000 471400 xsym               LDP1    B$M$STAR$
         1 000017   001000 236007                    LDQ     512,DL
         1 000020   100032 552110                    STBQ    26,'10'O,PR1

      250     1230    1           M$STAR.FUN=%CREATE#;

   1230  1 000021   000003 236003                    LDQ     3,DU
         1 000022   100032 552120                    STBQ    26,'20'O,PR1

PL6.E3A0      #004=JLU$OPNSTARN File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:55   
      251     1231    1           M$STAR.EXIST=%OLDFILE#;

   1231  1 000023   100031 236100                    LDQ     25,,PR1
         1 000024   000001 376000 2                  ANQ     1
         1 000025   002000 276007                    ORQ     1024,DL
         1 000026   100031 756100                    STQ     25,,PR1

      252     1232    1           M$STAR.ORG=%KEYED#;

   1232  1 000027   002000 236003                    LDQ     1024,DU
         1 000030   100032 552140                    STBQ    26,'40'O,PR1

      253     1233    1           M$STAR.NAME=STARN;

   1233  1 000031   000100 100400                    MLR     fill='000'O
         1 000032   000000 000003 0                  ADSC9   STARN                    cn=0,n=3
         1 000033   100010 000040                    ADSC9   8,,PR1                   cn=0,n=32

      254     1234    1           M$STAR.ACS = %DIRECT#;

   1234  1 000034   000002 236007                    LDQ     2,DL
         1 000035   100036 552104                    STBQ    30,'04'O,PR1

      255     1235    1           M$STAR.IXTNSIZE = XTNSIZ;

   1235  1 000036   200004 235100                    LDA     XTNSIZ,,AUTO
         1 000037   100041 755100                    STA     33,,PR1

      256     1236    1           B$JIT.ERR='0'B;

   1236  1 000040   000012 450100                    STZ     10,,PR0

      257     1237
      258     1238    1           CALL FMM$DFLOPNP;

   1238  1 000041   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000042   000000 701000 xent               TSX1    FMM$DFLOPNP
PL6.E3A0      #004=JLU$OPNSTARN File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:56   
         1 000043   000000 011000                    NOP     0

      259     1239    1           IF B$JIT.ERR

   1239  1 000044   000000 470400 xsym               LDP0    B$JIT$
         1 000045   000012 235100                    LDA     10,,PR0
         1 000046   000055 600000 1                  TZE     s:1245

      260     1240    2           THEN DO;

      261     1241    2                ERR = B$JIT.ERR.CODE;

   1241  1 000047   000012 236100                    LDQ     10,,PR0
         1 000050   000003 772000                    QRL     3
         1 000051   037777 376007                    ANQ     16383,DL
         1 000052   200003 471500                    LDP1    @ERR,,AUTO
         1 000053   100000 756100                    STQ     0,,PR1

      262     1242    2                ALTRETURN;

   1242  1 000054   000000 702200 xent               TSX2  ! X66_AALT

      263     1243    2                END;
      264     1244
      265     1245    1           M$STAR.XTNSIZE = XTNSIZ;

   1245  1 000055   200004 720100                    LXL0    XTNSIZ,,AUTO
         1 000056   000000 471400 xsym               LDP1    B$M$STAR$
         1 000057   100037 740100                    STX0    31,,PR1

      266     1246    1           RETURN;

   1246  1 000060   000000 702200 xent               TSX2  ! X66_ARET

STARN
 Sect OctLoc
   0     000   002052 116***                                                    .*N.
PL6.E3A0      #004=JLU$OPNSTARN File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:57   

(unnamed)
 Sect OctLoc
   2     000   000000 006000   777777 774777                                    ........
      267     1247    1   END JLU$OPNSTARN;
      268     1248
      269     1249        %EOD;

PL6.E3A0      #004=JLU$OPNSTARN File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:58   
--  Include file information  --

   CP_6_SUBS.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JLU$OPNSTARN.
PL6.E3A0      #004=JLU$OPNSTARN File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:59   

 **** Variables and constants ****

  ****  Section 000 RoData JLU$OPNSTARN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(27)    r     1 STARN

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @ERR                      *0-0-0/w SBIN        r     1 ERR
     4-0-0/w UBIN        r     1 XTNSIZ

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$M$STAR$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/d ASTR(3528)  r     1 F$DCB


   Procedure JLU$OPNSTARN requires 49 words for executable code.
   Procedure JLU$OPNSTARN requires 6 words of local(AUTO) storage.
PL6.E3A0      #004=JLU$OPNSTARN File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:60   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=JLU$OPNSTARN File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:61   
          MINI XREF LISTING

B$JIT.CPFLAGS1.SLEAZE
       435**DCL       435--REDEF
B$JIT.DCB$
       509**DCL      1228<<ASSIGN
B$JIT.ERR
       341**DCL      1236<<ASSIGN   1239>>IF
B$JIT.ERR.CODE
       342**DCL      1241>>ASSIGN
B$JIT.ERR.MID
       342**DCL       342--REDEF
B$JIT.JRESPEAK
       503**DCL       504--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
       612**DCL       612--REDEF     613--REDEF
B$JIT.PNR
       516**DCL       516--REDEF
B$JIT.PPC
       502**DCL      1225>>ASSIGN
B$JIT.TSLINE
       610**DCL       611--REDEF
B$JIT$
      1211**DCL       336--IMP-PTR  1225>>ASSIGN   1228>>ASSIGN   1236>>ASSIGN   1239>>IF       1241>>ASSIGN
B$M$STAR$
      1212**DCL      1226<>CALL     1228>>ASSIGN   1229>>ASSIGN   1230>>ASSIGN   1231>>ASSIGN   1232>>ASSIGN
      1233>>ASSIGN   1234>>ASSIGN   1235>>ASSIGN   1245>>ASSIGN
ERR
        12**DCL        11--PROC     1241<<ASSIGN
F$DCB.ACS
       635**DCL      1234<<ASSIGN
F$DCB.ACTPOS
       643**DCL       643--REDEF
F$DCB.ARS
PL6.E3A0      #004=JLU$OPNSTARN File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:62   
       618**DCL       618--REDEF
F$DCB.ASN
       633**DCL      1229<<ASSIGN
F$DCB.ATTR
       636**DCL       637--REDEF
F$DCB.BORROW
       651**DCL       651--REDEF     651--REDEF     651--REDEF
F$DCB.DCBNAME.L
       665**DCL       665--IMP-SIZ
F$DCB.EOMCHAR
       622**DCL       622--REDEF
F$DCB.EXIST
       631**DCL      1231<<ASSIGN
F$DCB.FLDID
       646**DCL       646--REDEF
F$DCB.FORM$
       640**DCL       640--REDEF
F$DCB.FSECT
       656**DCL       656--REDEF
F$DCB.FSN
       633**DCL       633--REDEF     633--REDEF     634--REDEF
F$DCB.FUN
       632**DCL      1230<<ASSIGN
F$DCB.HEADER$
       639**DCL       639--REDEF
F$DCB.IXTNSIZE
       637**DCL       637--REDEF    1235<<ASSIGN
F$DCB.LASTSTA$
       627**DCL       627--REDEF
F$DCB.LVL
       652**DCL       652--REDEF
F$DCB.NAME
       627**DCL      1233<<ASSIGN
F$DCB.NAME.C
       627**DCL       627--REDEF
F$DCB.NOEOF
PL6.E3A0      #004=JLU$OPNSTARN File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:63   
       648**DCL       648--REDEF
F$DCB.NRECS
       638**DCL       638--REDEF
F$DCB.NRECX
       657**DCL       657--REDEF
F$DCB.OHDR
       649**DCL       649--REDEF
F$DCB.ORG
       632**DCL       632--REDEF    1232<<ASSIGN
F$DCB.PRECNO
       655**DCL       655--REDEF
F$DCB.RCSZ
       660**DCL       660--REDEF
F$DCB.RES
       628**DCL       628--REDEF
F$DCB.SETX
       640**DCL       640--REDEF
F$DCB.TAB$
       639**DCL       640--REDEF
F$DCB.TDA
       654**DCL       654--REDEF
F$DCB.WSN
       629**DCL       629--REDEF
F$DCB.XTNSIZE
       635**DCL      1245<<ASSIGN
FMM$DFLOPNP
      1208**DCL-ENT  1238--CALL
FMM$SCRUB
      1207**DCL-ENT  1226--CALL
STARN
      1213**DCL      1233>>ASSIGN
XTNSIZ
      1210**DCL      1225<<ASSIGN   1235>>ASSIGN   1245>>ASSIGN

PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:64   
      270        1        /*T***********************************************************/
      271        2        /*T*                                                         */
      272        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      273        4        /*T*                                                         */
      274        5        /*T***********************************************************/
      275        6
      276        7        /*F*   NAME:   JLU$SAVE_AMR
      277        8
      278        9               PURPOSE: To read the assign/merge records for SAVE or M$LINK.
      279       10
      280       11               ENVIRONMENT:  M$STAR must be closed.
      281       12
      282       13               INPUT:   DEL_REC - UBIN WORD.
      283       14
      284       15               DESCRIPTION:
      285       16                  JLU$SAVE_AMR will obtain SBUF2 for a buffer and read
      286       17                  the assign/merge records for #1, #2, #3 and #4 into
      287       18                  the page obtained.
      288       19
      289       20                  If the DEL_REC parameter is non-zero, the assign/merge
      290       21                  record will be deleted after it is moved to the buffer.
      291       22
      292       23                  The calling routine must release SBUF2.
      293       24        */
      294       25
      295       26
      296       27        /*F*   NAME: JLU$RESTORE_AMR
      297       28               PURPOSE:  To restore the assign/merge records to *A for SAVE or M$LINK.
      298       29
      299       30               ENVIRONMENT: M$STAR must be closed.
      300       31                            SBUF2 must contain the DCB Assignment record from
      301       32                            the image file.
      302       33
      303       34               DESCRIPTION:
      304       35                 JLU$RESTORE_AMR will write the records from the SBUF2
      305       36                 into the *A file and return.
      306       37        */
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:65   
      307       38
      308       39        JLU$SAVE_AMR: PROC(DEL_REC) ALTRET;
      309       40
      310       41                                                /* INCLUDE Files                      */
      311       42        %INCLUDE B$JIT;
      312      645        %INCLUDE B_STRINGS_C;
      313      774        %INCLUDE CP_6_SUBS;
      314     1314        %INCLUDE F$DCB;
      315     1363        %INCLUDE F_CP6;
      316     2388        %INCLUDE JL_DATA_M;
      317     2557        %INCLUDE M_INFO_C;
      318     2697
      319     2698                                                /* Input Parameters                   */
      320     2699    1   DCL DEL_REC UBIN;
      321     2700
      322     2701                                                /* AUTO storage                       */
      323     2702    1   DCL I UBIN;
      324     2703    1   DCL BUF$ PTR;
      325     2704    1   DCL UNUSED_BOUND UBIN;
      326     2705    1   DCL ERR UBIN;
      327     2706    1   DCL ACCESS SBIN;
      328     2707    1   DCL 1 AMR@KEY,
      329     2708    1         2 CNT UBIN(9) UNAL,
      330     2709    1         2 TXT CHAR(2) UNAL,
      331     2710    1         2 NEXT REDEF TXT UBIN(18) UNAL;
      332     2711
      333     2712        %FPT_READ (FPTN=FPT@READ,STCLASS=AUTO);
      334     2751        %FPT_WRITE (FPTN=FPT@WRITE, STCLASS=AUTO);
      335     2782        %FPT_DELREC (FPTN=FPT@DELREC, STCLASS=AUTO);
      336     2801
      337     2802                                                /* BASED Structures                   */
      338     2803        %JL$AMR_BUF;
      339     2823
      340     2824                                                /* External Data                      */
      341     2825    1   DCL B$JIT$ PTR SYMREF READONLY;
      342     2826    1   DCL B$M$STAR$ PTR SYMREF READONLY;
      343     2827    1   DCL B$SBUF2$ PTR SYMREF;
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:66   
      344     2828
      345     2829        %FPT_CLOSE (FPTN=J_FPT_CL_SAVE, STCLASS=SYMREF);
      346     2871                                                /* Internal Data                      */
      347     2872    1   DCL 1 STARA CONSTANT WALIGNED,
      348     2873    1         2 N UBIN(9) UNAL INIT(2),
      349     2874    1         2 T CHAR(2) UNAL INIT('*A');
      350     2875
      351     2876    1   DCL 1 AMR_KEY CONSTANT WALIGNED,
      352     2877    1         2 CNT UBIN(9) INIT(2) UNAL,
      353     2878    1         2 TXT CHAR(2) INIT('#1');
      354     2879
      355     2880        %FPT_READ (FPTN=FPT_READ, STCLASS=CONSTANT, KEYS=YES);
      356     2919        %FPT_WRITE (FPTN=FPT_WRITE, STCLASS=CONSTANT);
      357     2950        %FPT_DELREC (FPTN=FPT_DELREC, STCLASS=CONSTANT);
      358     2969
      359     2970                                                /* External Procedures                */
      360     2971    1   DCL FMM$SCRUB ENTRY(1);
      361     2972    1   DCL FMM$DFLOPNP ENTRY;
      362     2973    1   DCL MME$WGVP ENTRY(4) ALTRET;
      363     2974    1   DCL M$MREAD ENTRY(1) ALTRET;
      364     2975    1   DCL M$MWRITE ENTRY(1) ALTRET;
      365     2976    1   DCL M$MDELREC ENTRY(1) ALTRET;
      366     2977    1   DCL M$MCLOSE ENTRY(1) ALTRET;
      367     2978
      368     2979        %SUB M$STAR = B$M$STAR$->F$DCB;
      369     2980        %SUB B$JIT = B$JIT$->B$JIT;
      370     2981
      371     2982        %EJECT;
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:67   
      372     2983
      373     2984        /*   Get SBUF2 for a buffer for the assign/merge records.
      374     2985        */
      375     2986    1           ACCESS = BITBIN(%PGINMEM | %PGWRITE | %PGIOM);
      376     2987    1           CALL MME$WGVP(%USERWSQ, %SBUF2PG, ACCESS, ERR)
      377     2988    2           WHENALTRETURN DO;
      378     2989    2                B$JIT.ERR.CODE = ERR;
      379     2990    2                ALTRETURN;
      380     2991    2                END;
      381     2992
      382     2993        /*   Open M$STAR to *A.
      383     2994        */
      384     2995    1           CALL OPEN_STARA
      385     2996    2           WHENALTRETURN DO;
      386     2997    2                JL$AMR_BUF = '0'B;
      387     2998    2                RETURN;
      388     2999    2                END;
      389     3000
      390     3001    1           JL$AMR_BUF.AMR_SIZE = SIZEC(JL$AMR_BUF);
      391     3002    1           UNUSED_BOUND = 4095 - SIZEC(JL$AMR_BUF);
      392     3003
      393     3004        /*   Initialize the READ FPT.
      394     3005        */
      395     3006    1           FPT@READ = FPT_READ;
      396     3007    1           FPT@READ.V_ = VECTOR(FPT@READ.V);
      397     3008    1           FPT@READ.V.DCB# = %M$STAR#;
      398     3009    1           FPT@READ.KEY_ = VECTOR(AMR@KEY);
      399     3010
      400     3011    1           AMR@KEY = AMR_KEY;
      401     3012
      402     3013        /*   Read the assign/merge records for #1 through #4 into SBUF2.
      403     3014        */
      404     3015    2           DO I=0 TO 3;
      405     3016    2                FPT@READ.BUF_.BUF$ = BUF$;
      406     3017    2                FPT@READ.BUF_.BOUND = UNUSED_BOUND;
      407     3018
      408     3019    2                CALL M$MREAD(FPT@READ)
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:68   
      409     3020    3                WHENRETURN DO;
      410     3021    3                     JL$AMR_BUF.REC.INFO$(I) = BUF$;
      411     3022    3                     JL$AMR_BUF.REC.SZ(I) = M$STAR.ARS;
      412     3023
      413     3024    3                     BUF$ = PINCRC(BUF$, JL$AMR_BUF.REC.SZ(I));
      414     3025    3                     UNUSED_BOUND = UNUSED_BOUND - JL$AMR_BUF.REC.SZ(I);
      415     3026    3                     JL$AMR_BUF.AMR_SIZE = JL$AMR_BUF.AMR_SIZE + JL$AMR_BUF.REC.SZ(I);
      416     3027
      417     3028    3                     IF DEL_REC ~= 0
      418     3029    3                     THEN CALL M$MDELREC(FPT@DELREC) ALTRET(ALT_DELREC);
      419     3030    3                     END;
      420     3031
      421     3032    3                WHENALTRETURN DO;
      422     3033    3                     JL$AMR_BUF.REC.INFO$(I) = ADDR(NIL);
      423     3034    3                     JL$AMR_BUF.REC.SZ(I) = DEL_REC;
      424     3035    3                     END;
      425     3036
      426     3037    2   ALT_DELREC:  ;
      427     3038    2                AMR@KEY.NEXT = AMR@KEY.NEXT + 1;
      428     3039    2                END;
      429     3040
      430     3041        /*   Close M$STAR and return.
      431     3042        */
      432     3043    1           CALL CLOSE_STARA;
      433     3044    1           RETURN;
      434     3045
      435     3046
      436     3047        %EJECT;
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:69   
      437     3048    1   JLU$RESTORE_AMR: ENTRY ALTRET;
      438     3049
      439     3050        /*   Open M$STAR to *A.
      440     3051        */
      441     3052    1           CALL OPEN_STARA
      442     3053    2           WHENALTRETURN DO;
      443     3054    2                RETURN;
      444     3055    2                END;
      445     3056
      446     3057        /*   Initialize the write FPT in auto.
      447     3058        */
      448     3059    1           FPT@WRITE = FPT_WRITE;
      449     3060    1           FPT@WRITE.V_ = VECTOR(FPT@WRITE.V);
      450     3061    1           FPT@WRITE.V.DCB# = %M$STAR#;
      451     3062    1           FPT@WRITE.KEY_ = VECTOR(AMR@KEY);
      452     3063
      453     3064    1           AMR@KEY = AMR_KEY;
      454     3065
      455     3066        /*   Write the assign/merge records for #1 through #4 from SBUF2.
      456     3067        */
      457     3068    2           DO I=0 TO 3;
      458     3069    2                IF JL$AMR_BUF.REC.INFO$(I) ~= ADDR(NIL)
      459     3070    3                THEN DO;
      460     3071    3                     FPT@WRITE.BUF_.BUF$ = JL$AMR_BUF.REC.INFO$(I);
      461     3072    3                     FPT@WRITE.BUF_.BOUND = JL$AMR_BUF.REC.SZ(I) -1;
      462     3073
      463     3074    3                     CALL M$MWRITE(FPT@WRITE)
      464     3075    4                     WHENALTRETURN DO;
      465     3076
      466     3077    4                          END;
      467     3078
      468     3079    3                     END;
      469     3080
      470     3081    3                ELSE DO;
      471     3082    3                     IF JL$AMR_BUF.REC.SZ(I) ~= 0
      472     3083    3                     THEN CALL M$MDELREC(FPT@DELREC) ALTRET(ALT2_DELREC);
      473     3084    3                     END;
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:70   
      474     3085
      475     3086    2   ALT2_DELREC: ;
      476     3087    2                AMR@KEY.NEXT = AMR@KEY.NEXT + 1;
      477     3088    2                END;
      478     3089
      479     3090        /*   Close M$STAR and return.
      480     3091        */
      481     3092    1           CALL CLOSE_STARA;
      482     3093    1           RETURN;
      483     3094        %EJECT;
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:71   
      484     3095        /*I*    NAME: OPEN_STARA
      485     3096
      486     3097                PURPOSE: To open the M$STAR DCB to *A.
      487     3098                         Also initializes FPT@DELREC, BUF$ and AMR@KEY.
      488     3099        */
      489     3100
      490     3101    1   OPEN_STARA: PROC ALTRET;
      491     3102    2           CALL FMM$SCRUB(B$M$STAR$);
      492     3103
      493     3104    2           B$JIT.DCB$ = B$M$STAR$;
      494     3105    2           M$STAR.ASN = %FILE#;
      495     3106    2           M$STAR.FUN = %CREATE#;
      496     3107    2           M$STAR.EXIST = %OLDFILE#;
      497     3108    2           M$STAR.ORG = %KEYED#;
      498     3109    2           M$STAR.NAME = STARA;
      499     3110    2           M$STAR.ACS = %DIRECT#;
      500     3111    2           B$JIT.ERR = '0'B;
      501     3112
      502     3113    2           CALL FMM$DFLOPNP;
      503     3114    2           IF B$JIT.ERR.CODE ~= 0
      504     3115    3           THEN DO;
      505     3116    3                ALTRETURN;
      506     3117    3                END;
      507     3118
      508     3119    2           BUF$ = PINCRW(B$SBUF2$, SIZEW(JL$AMR_BUF));
      509     3120    2           AMR@KEY = AMR_KEY;
      510     3121
      511     3122    2           FPT@DELREC = FPT_DELREC;
      512     3123    2           FPT@DELREC.V_ = VECTOR(FPT@DELREC.V);
      513     3124    2           FPT@DELREC.V.DCB# = %M$STAR#;
      514     3125    2           FPT@DELREC.KEY_ = VECTOR(AMR@KEY);
      515     3126    2           RETURN;
      516     3127    2   END OPEN_STARA;
      517     3128        %EJECT;
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:72   
      518     3129
      519     3130        /*I*   NAME:   CLOSE_STARA
      520     3131
      521     3132               PURPOSE: To close the *A file.
      522     3133        */
      523     3134
      524     3135    1   CLOSE_STARA: PROC;
      525     3136    2           J_FPT_CL_SAVE.V.DCB# = %M$STAR#;
      526     3137    2           CALL M$MCLOSE(J_FPT_CL_SAVE) ALTRET(NEVER);
      527     3138    2   NEVER:  ;
      528     3139    2           RETURN;
      529     3140    2   END CLOSE_STARA;
      530     3141
      531     3142    1   END JLU$SAVE_AMR;
      532     3143        %EOD;

PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:73   
--  Include file information  --

   M_INFO_C.:E05TOU  is referenced.
   JL_DATA_M.:E05TOU  is referenced.
   F_CP6.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JLU$SAVE_AMR.

   Procedure JLU$SAVE_AMR requires 252 words for executable code.
   Procedure JLU$SAVE_AMR requires 52 words of local(AUTO) storage.

PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:74   

 Object Unit name= JLU$SAVE_AMR                               File name= JLU$UTIL.:E05TOU
 UTS= JUL 29 '97 23:27:37.88 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS     38     46  JLU$SAVE_AMR
    1   Proc  even  none   252    374  JLU$SAVE_AMR
    2  RoData even  none    10     12  JLU$SAVE_AMR

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        1  JLU$SAVE_AMR
     1    171          yes     yes      Std        0  JLU$RESTORE_AMR

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       4 MME$WGVP
 yes     yes           Std       1 M$MREAD
 yes     yes           Std       1 M$MDELREC
 yes     yes           Std       1 M$MWRITE
         yes           Std       1 FMM$SCRUB
         yes           Std       0 FMM$DFLOPNP
 yes     yes           Std       1 M$MCLOSE
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:75   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    B$JIT$                           r    B$M$STAR$                             B$SBUF2$
     J_FPT_CL_SAVE                         B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:76   


      270        1        /*T***********************************************************/
      271        2        /*T*                                                         */
      272        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      273        4        /*T*                                                         */
      274        5        /*T***********************************************************/
      275        6
      276        7        /*F*   NAME:   JLU$SAVE_AMR
      277        8
      278        9               PURPOSE: To read the assign/merge records for SAVE or M$LINK.
      279       10
      280       11               ENVIRONMENT:  M$STAR must be closed.
      281       12
      282       13               INPUT:   DEL_REC - UBIN WORD.
      283       14
      284       15               DESCRIPTION:
      285       16                  JLU$SAVE_AMR will obtain SBUF2 for a buffer and read
      286       17                  the assign/merge records for #1, #2, #3 and #4 into
      287       18                  the page obtained.
      288       19
      289       20                  If the DEL_REC parameter is non-zero, the assign/merge
      290       21                  record will be deleted after it is moved to the buffer.
      291       22
      292       23                  The calling routine must release SBUF2.
      293       24        */
      294       25
      295       26
      296       27        /*F*   NAME: JLU$RESTORE_AMR
      297       28               PURPOSE:  To restore the assign/merge records to *A for SAVE or M$LINK.
      298       29
      299       30               ENVIRONMENT: M$STAR must be closed.
      300       31                            SBUF2 must contain the DCB Assignment record from
      301       32                            the image file.
      302       33
      303       34               DESCRIPTION:
      304       35                 JLU$RESTORE_AMR will write the records from the SBUF2
      305       36                 into the *A file and return.
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:77   
      306       37        */
      307       38
      308       39        JLU$SAVE_AMR: PROC(DEL_REC) ALTRET;

     39  1 000000   000000 700200 xent  JLU$SAVE_AMR TSX0  ! X66_AUTO_1
         1 000001   000064 000001                    ZERO    52,1

      309       40
      310       41                                                /* INCLUDE Files                      */
      311       42        %INCLUDE B$JIT;
      312      645        %INCLUDE B_STRINGS_C;
      313      774        %INCLUDE CP_6_SUBS;
      314     1314        %INCLUDE F$DCB;
      315     1363        %INCLUDE F_CP6;
      316     2388        %INCLUDE JL_DATA_M;
      317     2557        %INCLUDE M_INFO_C;
      318     2697
      319     2698                                                /* Input Parameters                   */
      320     2699    1   DCL DEL_REC UBIN;
      321     2700
      322     2701                                                /* AUTO storage                       */
      323     2702    1   DCL I UBIN;
      324     2703    1   DCL BUF$ PTR;
      325     2704    1   DCL UNUSED_BOUND UBIN;
      326     2705    1   DCL ERR UBIN;
      327     2706    1   DCL ACCESS SBIN;
      328     2707    1   DCL 1 AMR@KEY,
      329     2708    1         2 CNT UBIN(9) UNAL,
      330     2709    1         2 TXT CHAR(2) UNAL,
      331     2710    1         2 NEXT REDEF TXT UBIN(18) UNAL;
      332     2711
      333     2712        %FPT_READ (FPTN=FPT@READ,STCLASS=AUTO);
      334     2751        %FPT_WRITE (FPTN=FPT@WRITE, STCLASS=AUTO);
      335     2782        %FPT_DELREC (FPTN=FPT@DELREC, STCLASS=AUTO);
      336     2801
      337     2802                                                /* BASED Structures                   */
      338     2803        %JL$AMR_BUF;
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:78   
      339     2823
      340     2824                                                /* External Data                      */
      341     2825    1   DCL B$JIT$ PTR SYMREF READONLY;
      342     2826    1   DCL B$M$STAR$ PTR SYMREF READONLY;
      343     2827    1   DCL B$SBUF2$ PTR SYMREF;
      344     2828
      345     2829        %FPT_CLOSE (FPTN=J_FPT_CL_SAVE, STCLASS=SYMREF);
      346     2871                                                /* Internal Data                      */
      347     2872    1   DCL 1 STARA CONSTANT WALIGNED,
      348     2873    1         2 N UBIN(9) UNAL INIT(2),
      349     2874    1         2 T CHAR(2) UNAL INIT('*A');
      350     2875
      351     2876    1   DCL 1 AMR_KEY CONSTANT WALIGNED,
      352     2877    1         2 CNT UBIN(9) INIT(2) UNAL,
      353     2878    1         2 TXT CHAR(2) INIT('#1');
      354     2879
      355     2880        %FPT_READ (FPTN=FPT_READ, STCLASS=CONSTANT, KEYS=YES);
      356     2919        %FPT_WRITE (FPTN=FPT_WRITE, STCLASS=CONSTANT);
      357     2950        %FPT_DELREC (FPTN=FPT_DELREC, STCLASS=CONSTANT);
      358     2969
      359     2970                                                /* External Procedures                */
      360     2971    1   DCL FMM$SCRUB ENTRY(1);
      361     2972    1   DCL FMM$DFLOPNP ENTRY;
      362     2973    1   DCL MME$WGVP ENTRY(4) ALTRET;
      363     2974    1   DCL M$MREAD ENTRY(1) ALTRET;
      364     2975    1   DCL M$MWRITE ENTRY(1) ALTRET;
      365     2976    1   DCL M$MDELREC ENTRY(1) ALTRET;
      366     2977    1   DCL M$MCLOSE ENTRY(1) ALTRET;
      367     2978
      368     2979        %SUB M$STAR = B$M$STAR$->F$DCB;
      369     2980        %SUB B$JIT = B$JIT$->B$JIT;
      370     2981
      371     2982        %EJECT;
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:79   
      372     2983
      373     2984        /*   Get SBUF2 for a buffer for the assign/merge records.
      374     2985        */
      375     2986    1           ACCESS = BITBIN(%PGINMEM | %PGWRITE | %PGIOM);

   2986  1 000002   000064 235007                    LDA     52,DL
         1 000003   200010 755100                    STA     ACCESS,,AUTO

      376     2987    1           CALL MME$WGVP(%USERWSQ, %SBUF2PG, ACCESS, ERR)

   2987  1 000004   200007 630500                    EPPR0   ERR,,AUTO
         1 000005   200063 450500                    STP0    FPT@DELREC+15,,AUTO
         1 000006   200010 631500                    EPPR1   ACCESS,,AUTO
         1 000007   200062 451500                    STP1    FPT@DELREC+14,,AUTO
         1 000010   000002 237000 2                  LDAQ    2
         1 000011   200060 757100                    STAQ    FPT@DELREC+12,,AUTO
         1 000012   200060 630500                    EPPR0   FPT@DELREC+12,,AUTO
         1 000013   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000014   000000 701000 xent               TSX1    MME$WGVP
         1 000015   000017 702000 1                  TSX2    s:2989
         1 000016   000026 710000 1                  TRA     s:2995

      377     2988    2           WHENALTRETURN DO;

      378     2989    2                B$JIT.ERR.CODE = ERR;

   2989  1 000017   000000 470400 xsym               LDP0    B$JIT$
         1 000020   200007 236100                    LDQ     ERR,,AUTO
         1 000021   000003 736000                    QLS     3
         1 000022   000012 676100                    ERQ     10,,PR0
         1 000023   377770 376007                    ANQ     131064,DL
         1 000024   000012 656100                    ERSQ    10,,PR0

      379     2990    2                ALTRETURN;

   2990  1 000025   000000 702200 xent               TSX2  ! X66_AALT

PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:80   
      380     2991    2                END;
      381     2992
      382     2993        /*   Open M$STAR to *A.
      383     2994        */
      384     2995    1           CALL OPEN_STARA

   2995  1 000026   000272 701000 1                  TSX1    OPEN_STARA
         1 000027   000031 702000 1                  TSX2    s:2997
         1 000030   000036 710000 1                  TRA     s:3001

      385     2996    2           WHENALTRETURN DO;

      386     2997    2                JL$AMR_BUF = '0'B;

   2997  1 000031   000000 470400 xsym               LDP0    B$SBUF2$
         1 000032   000100 100400                    MLR     fill='000'O
         1 000033   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000034   000000 000044                    ADSC9   0,,PR0                   cn=0,n=36

      387     2998    2                RETURN;

   2998  1 000035   000000 702200 xent               TSX2  ! X66_ARET

      388     2999    2                END;
      389     3000
      390     3001    1           JL$AMR_BUF.AMR_SIZE = SIZEC(JL$AMR_BUF);

   3001  1 000036   000050 235007                    LDA     40,DL
         1 000037   000000 470400 xsym               LDP0    B$SBUF2$
         1 000040   000000 755100                    STA     0,,PR0

      391     3002    1           UNUSED_BOUND = 4095 - SIZEC(JL$AMR_BUF);

   3002  1 000041   007727 236007                    LDQ     4055,DL
         1 000042   200006 756100                    STQ     UNUSED_BOUND,,AUTO

      392     3003
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:81   
      393     3004        /*   Initialize the READ FPT.
      394     3005        */
      395     3006    1           FPT@READ = FPT_READ;

   3006  1 000043   000100 100400                    MLR     fill='000'O
         1 000044   000002 000070 0                  ADSC9   FPT_READ                 cn=0,n=56
         1 000045   200012 000070                    ADSC9   FPT@READ,,AUTO           cn=0,n=56

      396     3007    1           FPT@READ.V_ = VECTOR(FPT@READ.V);

   3007  1 000046   000001 235000 2                  LDA     1
         1 000047   200060 452500                    STP2    FPT@DELREC+12,,AUTO
         1 000050   200060 236100                    LDQ     FPT@DELREC+12,,AUTO
         1 000051   000022 036003                    ADLQ    18,DU
         1 000052   200012 757100                    STAQ    FPT@READ,,AUTO

      397     3008    1           FPT@READ.V.DCB# = %M$STAR#;

   3008  1 000053   000001 220003                    LDX0    1,DU
         1 000054   200022 740100                    STX0    FPT@READ+8,,AUTO

      398     3009    1           FPT@READ.KEY_ = VECTOR(AMR@KEY);

   3009  1 000055   577640 235007                    LDA     -65632,DL
         1 000056   200060 452500                    STP2    FPT@DELREC+12,,AUTO
         1 000057   200060 236100                    LDQ     FPT@DELREC+12,,AUTO
         1 000060   000011 036003                    ADLQ    9,DU
         1 000061   200014 757100                    STAQ    FPT@READ+2,,AUTO

      399     3010
      400     3011    1           AMR@KEY = AMR_KEY;

   3011  1 000062   000001 236000 0                  LDQ     AMR_KEY
         1 000063   000004 376000 2                  ANQ     4
         1 000064   200011 756100                    STQ     AMR@KEY,,AUTO

      401     3012
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:82   
      402     3013        /*   Read the assign/merge records for #1 through #4 into SBUF2.
      403     3014        */
      404     3015    2           DO I=0 TO 3;

   3015  1 000065   200004 450100                    STZ     I,,AUTO

      405     3016    2                FPT@READ.BUF_.BUF$ = BUF$;

   3016  1 000066   200005 236100                    LDQ     BUF$,,AUTO
         1 000067   200017 756100                    STQ     FPT@READ+5,,AUTO

      406     3017    2                FPT@READ.BUF_.BOUND = UNUSED_BOUND;

   3017  1 000070   200006 236100                    LDQ     UNUSED_BOUND,,AUTO
         1 000071   000020 736000                    QLS     16
         1 000072   200016 676100                    ERQ     FPT@READ+4,,AUTO
         1 000073   000034 376000 xsym               ANQ     B_VECTNIL+28
         1 000074   200016 656100                    ERSQ    FPT@READ+4,,AUTO

      407     3018
      408     3019    2                CALL M$MREAD(FPT@READ)

   3019  1 000075   200012 630500                    EPPR0   FPT@READ,,AUTO
         1 000076   200060 450500                    STP0    FPT@DELREC+12,,AUTO
         1 000077   200060 630500                    EPPR0   FPT@DELREC+12,,AUTO
         1 000100   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000101   000000 701000 xent               TSX1    M$MREAD
         1 000102   000144 702000 1                  TSX2    s:3033

      409     3020    3                WHENRETURN DO;

      410     3021    3                     JL$AMR_BUF.REC.INFO$(I) = BUF$;

   3021  1 000103   200004 235100                    LDA     I,,AUTO
         1 000104   000001 735000                    ALS     1
         1 000105   200005 236100                    LDQ     BUF$,,AUTO
         1 000106   000000 470400 xsym               LDP0    B$SBUF2$
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:83   
         1 000107   000001 756105                    STQ     1,AL,PR0

      411     3022    3                     JL$AMR_BUF.REC.SZ(I) = M$STAR.ARS;

   3022  1 000110   000000 470400 xsym               LDP0    B$M$STAR$
         1 000111   000000 620005                    EAX0    0,AL
         1 000112   000000 235100                    LDA     0,,PR0
         1 000113   000000 471400 xsym               LDP1    B$SBUF2$
         1 000114   100002 755110                    STA     2,X0,PR1

      412     3023
      413     3024    3                     BUF$ = PINCRC(BUF$, JL$AMR_BUF.REC.SZ(I));

   3024  1 000115   200004 235100                    LDA     I,,AUTO
         1 000116   000001 735000                    ALS     1
         1 000117   000000 471400 xsym               LDP1    B$SBUF2$
         1 000120   100002 236105                    LDQ     2,AL,PR1
         1 000121   000020 736000                    QLS     16
         1 000122   200005 036100                    ADLQ    BUF$,,AUTO
         1 000123   200005 756100                    STQ     BUF$,,AUTO

      414     3025    3                     UNUSED_BOUND = UNUSED_BOUND - JL$AMR_BUF.REC.SZ(I);

   3025  1 000124   200006 236100                    LDQ     UNUSED_BOUND,,AUTO
         1 000125   100002 136105                    SBLQ    2,AL,PR1
         1 000126   200006 756100                    STQ     UNUSED_BOUND,,AUTO

      415     3026    3                     JL$AMR_BUF.AMR_SIZE = JL$AMR_BUF.AMR_SIZE + JL$AMR_BUF.REC.SZ(I);

   3026  1 000127   100000 236100                    LDQ     0,,PR1
         1 000130   100002 036105                    ADLQ    2,AL,PR1
         1 000131   100000 756100                    STQ     0,,PR1

      416     3027
      417     3028    3                     IF DEL_REC ~= 0

   3028  1 000132   200003 471500                    LDP1    @DEL_REC,,AUTO
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:84   
         1 000133   100000 235100                    LDA     0,,PR1
         1 000134   000143 600000 1                  TZE     s:3030

      418     3029    3                     THEN CALL M$MDELREC(FPT@DELREC) ALTRET(ALT_DELREC);

   3029  1 000135   200044 633500                    EPPR3   FPT@DELREC,,AUTO
         1 000136   200060 453500                    STP3    FPT@DELREC+12,,AUTO
         1 000137   200060 630500                    EPPR0   FPT@DELREC+12,,AUTO
         1 000140   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000141   000000 701000 xent               TSX1    M$MDELREC
         1 000142   000156 702000 1                  TSX2    ALT_DELREC

      419     3030    3                     END;

   3030  1 000143   000156 710000 1                  TRA     ALT_DELREC

      420     3031
      421     3032    3                WHENALTRETURN DO;

      422     3033    3                     JL$AMR_BUF.REC.INFO$(I) = ADDR(NIL);

   3033  1 000144   200004 235100                    LDA     I,,AUTO
         1 000145   000001 735000                    ALS     1
         1 000146   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000147   000000 470400 xsym               LDP0    B$SBUF2$
         1 000150   000001 756105                    STQ     1,AL,PR0

      423     3034    3                     JL$AMR_BUF.REC.SZ(I) = DEL_REC;

   3034  1 000151   200003 470500                    LDP0    @DEL_REC,,AUTO
         1 000152   000000 471400 xsym               LDP1    B$SBUF2$
         1 000153   000000 620005                    EAX0    0,AL
         1 000154   000000 235100                    LDA     0,,PR0
         1 000155   100002 755110                    STA     2,X0,PR1

      424     3035    3                     END;

PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:85   
   3033  1 000156                       ALT_DELREC   null
      425     3036
      426     3037    2   ALT_DELREC:  ;
      427     3038    2                AMR@KEY.NEXT = AMR@KEY.NEXT + 1;

   3038  1 000156   200011 236100                    LDQ     AMR@KEY,,AUTO
         1 000157   001000 036007                    ADLQ    512,DL
         1 000160   200011 552130                    STBQ    AMR@KEY,'30'O,AUTO

      428     3039    2                END;

   3039  1 000161   200004 235100                    LDA     I,,AUTO
         1 000162   000001 035007                    ADLA    1,DL
         1 000163   200004 755100                    STA     I,,AUTO
         1 000164   000004 115007                    CMPA    4,DL
         1 000165   000066 602000 1                  TNC     s:3016

      429     3040
      430     3041        /*   Close M$STAR and return.
      431     3042        */
      432     3043    1           CALL CLOSE_STARA;

   3043  1 000166   000363 701000 1                  TSX1    CLOSE_STARA
         1 000167   000000 011000                    NOP     0

      433     3044    1           RETURN;

   3044  1 000170   000000 702200 xent               TSX2  ! X66_ARET

      434     3045
      435     3046
      436     3047        %EJECT;
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:86   
      437     3048    1   JLU$RESTORE_AMR: ENTRY ALTRET;

   3048  1 000171   000000 700200 xent  JLU$RESTORE* TSX0  ! X66_AUTO_1
         1 000172   000064 000001                    ZERO    52,1

      438     3049
      439     3050        /*   Open M$STAR to *A.
      440     3051        */
      441     3052    1           CALL OPEN_STARA

   3052  1 000173   000272 701000 1                  TSX1    OPEN_STARA
         1 000174   000176 702000 1                  TSX2    s:3054
         1 000175   000177 710000 1                  TRA     s:3059

      442     3053    2           WHENALTRETURN DO;

      443     3054    2                RETURN;

   3054  1 000176   000000 702200 xent               TSX2  ! X66_ARET

      444     3055    2                END;
      445     3056
      446     3057        /*   Initialize the write FPT in auto.
      447     3058        */
      448     3059    1           FPT@WRITE = FPT_WRITE;

   3059  1 000177   000100 100400                    MLR     fill='000'O
         1 000200   000020 000060 0                  ADSC9   FPT_WRITE                cn=0,n=48
         1 000201   200030 000060                    ADSC9   FPT@WRITE,,AUTO          cn=0,n=48

      449     3060    1           FPT@WRITE.V_ = VECTOR(FPT@WRITE.V);

   3060  1 000202   000005 235000 2                  LDA     5
         1 000203   200060 452500                    STP2    FPT@DELREC+12,,AUTO
         1 000204   200060 236100                    LDQ     FPT@DELREC+12,,AUTO
         1 000205   000040 036003                    ADLQ    32,DU
         1 000206   200030 757100                    STAQ    FPT@WRITE,,AUTO
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:87   

      450     3061    1           FPT@WRITE.V.DCB# = %M$STAR#;

   3061  1 000207   000001 220003                    LDX0    1,DU
         1 000210   200040 740100                    STX0    FPT@WRITE+8,,AUTO

      451     3062    1           FPT@WRITE.KEY_ = VECTOR(AMR@KEY);

   3062  1 000211   577640 235007                    LDA     -65632,DL
         1 000212   200060 452500                    STP2    FPT@DELREC+12,,AUTO
         1 000213   200060 236100                    LDQ     FPT@DELREC+12,,AUTO
         1 000214   000011 036003                    ADLQ    9,DU
         1 000215   200032 757100                    STAQ    FPT@WRITE+2,,AUTO

      452     3063
      453     3064    1           AMR@KEY = AMR_KEY;

   3064  1 000216   000001 236000 0                  LDQ     AMR_KEY
         1 000217   000004 376000 2                  ANQ     4
         1 000220   200011 756100                    STQ     AMR@KEY,,AUTO

      454     3065
      455     3066        /*   Write the assign/merge records for #1 through #4 from SBUF2.
      456     3067        */
      457     3068    2           DO I=0 TO 3;

   3068  1 000221   200004 450100                    STZ     I,,AUTO

      458     3069    2                IF JL$AMR_BUF.REC.INFO$(I) ~= ADDR(NIL)

   3069  1 000222   200004 235100                    LDA     I,,AUTO
         1 000223   000001 735000                    ALS     1
         1 000224   000000 470400 xsym               LDP0    B$SBUF2$
         1 000225   000001 236105                    LDQ     1,AL,PR0
         1 000226   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000227   000247 600000 1                  TZE     s:3082

PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:88   
      459     3070    3                THEN DO;

      460     3071    3                     FPT@WRITE.BUF_.BUF$ = JL$AMR_BUF.REC.INFO$(I);

   3071  1 000230   200035 756100                    STQ     FPT@WRITE+5,,AUTO

      461     3072    3                     FPT@WRITE.BUF_.BOUND = JL$AMR_BUF.REC.SZ(I) -1;

   3072  1 000231   000002 236105                    LDQ     2,AL,PR0
         1 000232   000001 136007                    SBLQ    1,DL
         1 000233   000020 736000                    QLS     16
         1 000234   200034 676100                    ERQ     FPT@WRITE+4,,AUTO
         1 000235   000034 376000 xsym               ANQ     B_VECTNIL+28
         1 000236   200034 656100                    ERSQ    FPT@WRITE+4,,AUTO

      462     3073
      463     3074    3                     CALL M$MWRITE(FPT@WRITE)

   3074  1 000237   200030 631500                    EPPR1   FPT@WRITE,,AUTO
         1 000240   200060 451500                    STP1    FPT@DELREC+12,,AUTO
         1 000241   200060 630500                    EPPR0   FPT@DELREC+12,,AUTO
         1 000242   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000243   000000 701000 xent               TSX1    M$MWRITE
         1 000244   000246 702000 1                  TSX2    s:3079
         1 000245   000246 710000 1                  TRA     s:3079

      464     3075    4                     WHENALTRETURN DO;

      465     3076
      466     3077    4                          END;

      467     3078
      468     3079    3                     END;

   3079  1 000246   000257 710000 1                  TRA     ALT2_DELREC

      469     3080
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:89   
      470     3081    3                ELSE DO;

      471     3082    3                     IF JL$AMR_BUF.REC.SZ(I) ~= 0

   3082  1 000247   000002 235105                    LDA     2,AL,PR0
         1 000250   000257 600000 1                  TZE     ALT2_DELREC

      472     3083    3                     THEN CALL M$MDELREC(FPT@DELREC) ALTRET(ALT2_DELREC);

   3083  1 000251   200044 631500                    EPPR1   FPT@DELREC,,AUTO
         1 000252   200060 451500                    STP1    FPT@DELREC+12,,AUTO
         1 000253   200060 630500                    EPPR0   FPT@DELREC+12,,AUTO
         1 000254   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000255   000000 701000 xent               TSX1    M$MDELREC
         1 000256   000257 702000 1                  TSX2    ALT2_DELREC

      473     3084    3                     END;

   3082  1 000257                       ALT2_DELREC  null
      474     3085
      475     3086    2   ALT2_DELREC: ;
      476     3087    2                AMR@KEY.NEXT = AMR@KEY.NEXT + 1;

   3087  1 000257   200011 236100                    LDQ     AMR@KEY,,AUTO
         1 000260   001000 036007                    ADLQ    512,DL
         1 000261   200011 552130                    STBQ    AMR@KEY,'30'O,AUTO

      477     3088    2                END;

   3088  1 000262   200004 235100                    LDA     I,,AUTO
         1 000263   000001 035007                    ADLA    1,DL
         1 000264   200004 755100                    STA     I,,AUTO
         1 000265   000004 115007                    CMPA    4,DL
         1 000266   000222 602000 1                  TNC     s:3069

      478     3089
      479     3090        /*   Close M$STAR and return.
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:90   
      480     3091        */
      481     3092    1           CALL CLOSE_STARA;

   3092  1 000267   000363 701000 1                  TSX1    CLOSE_STARA
         1 000270   000000 011000                    NOP     0

      482     3093    1           RETURN;

   3093  1 000271   000000 702200 xent               TSX2  ! X66_ARET

      483     3094        %EJECT;
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:91   
      484     3095        /*I*    NAME: OPEN_STARA
      485     3096
      486     3097                PURPOSE: To open the M$STAR DCB to *A.
      487     3098                         Also initializes FPT@DELREC, BUF$ and AMR@KEY.
      488     3099        */
      489     3100
      490     3101    1   OPEN_STARA: PROC ALTRET;

   3101  1 000272   200056 741300       OPEN_STARA   STX1  ! FPT@DELREC+10,,AUTO

      491     3102    2           CALL FMM$SCRUB(B$M$STAR$);

   3102  1 000273   000006 630400 2                  EPPR0   6
         1 000274   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000275   000000 701000 xent               TSX1    FMM$SCRUB
         1 000276   000000 011000                    NOP     0

      492     3103
      493     3104    2           B$JIT.DCB$ = B$M$STAR$;

   3104  1 000277   000000 236000 xsym               LDQ     B$M$STAR$
         1 000300   000000 470400 xsym               LDP0    B$JIT$
         1 000301   000232 756100                    STQ     154,,PR0

      494     3105    2           M$STAR.ASN = %FILE#;

   3105  1 000302   000000 471400 xsym               LDP1    B$M$STAR$
         1 000303   001000 236007                    LDQ     512,DL
         1 000304   100032 552110                    STBQ    26,'10'O,PR1

      495     3106    2           M$STAR.FUN = %CREATE#;

   3106  1 000305   000003 236003                    LDQ     3,DU
         1 000306   100032 552120                    STBQ    26,'20'O,PR1

      496     3107    2           M$STAR.EXIST = %OLDFILE#;

PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:92   
   3107  1 000307   100031 236100                    LDQ     25,,PR1
         1 000310   000007 376000 2                  ANQ     7
         1 000311   002000 276007                    ORQ     1024,DL
         1 000312   100031 756100                    STQ     25,,PR1

      497     3108    2           M$STAR.ORG = %KEYED#;

   3108  1 000313   002000 236003                    LDQ     1024,DU
         1 000314   100032 552140                    STBQ    26,'40'O,PR1

      498     3109    2           M$STAR.NAME = STARA;

   3109  1 000315   000100 100400                    MLR     fill='000'O
         1 000316   000000 000003 0                  ADSC9   STARA                    cn=0,n=3
         1 000317   100010 000040                    ADSC9   8,,PR1                   cn=0,n=32

      499     3110    2           M$STAR.ACS = %DIRECT#;

   3110  1 000320   000002 236007                    LDQ     2,DL
         1 000321   100036 552104                    STBQ    30,'04'O,PR1

      500     3111    2           B$JIT.ERR = '0'B;

   3111  1 000322   000012 450100                    STZ     10,,PR0

      501     3112
      502     3113    2           CALL FMM$DFLOPNP;

   3113  1 000323   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000324   000000 701000 xent               TSX1    FMM$DFLOPNP
         1 000325   000000 011000                    NOP     0

      503     3114    2           IF B$JIT.ERR.CODE ~= 0

   3114  1 000326   000000 470400 xsym               LDP0    B$JIT$
         1 000327   000012 236100                    LDQ     10,,PR0
         1 000330   377770 316007                    CANQ    131064,DL
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:93   
         1 000331   000334 600000 1                  TZE     s:3119

      504     3115    3           THEN DO;

      505     3116    3                ALTRETURN;

   3116  1 000332   200056 221300                    LDX1  ! FPT@DELREC+10,,AUTO
         1 000333   000000 702211                    TSX2  ! 0,X1

      506     3117    3                END;
      507     3118
      508     3119    2           BUF$ = PINCRW(B$SBUF2$, SIZEW(JL$AMR_BUF));

   3119  1 000334   000000 236000 xsym               LDQ     B$SBUF2$
         1 000335   000012 036003                    ADLQ    10,DU
         1 000336   200005 756100                    STQ     BUF$,,AUTO

      509     3120    2           AMR@KEY = AMR_KEY;

   3120  1 000337   000001 236000 0                  LDQ     AMR_KEY
         1 000340   000004 376000 2                  ANQ     4
         1 000341   200011 756100                    STQ     AMR@KEY,,AUTO

      510     3121
      511     3122    2           FPT@DELREC = FPT_DELREC;

   3122  1 000342   000100 100400                    MLR     fill='000'O
         1 000343   000034 000050 0                  ADSC9   FPT_DELREC               cn=0,n=40
         1 000344   200044 000050                    ADSC9   FPT@DELREC,,AUTO         cn=0,n=40

      512     3123    2           FPT@DELREC.V_ = VECTOR(FPT@DELREC.V);

   3123  1 000345   000010 235000 2                  LDA     8
         1 000346   200060 452500                    STP2    FPT@DELREC+12,,AUTO
         1 000347   200060 236100                    LDQ     FPT@DELREC+12,,AUTO
         1 000350   000054 036003                    ADLQ    44,DU
         1 000351   200044 757100                    STAQ    FPT@DELREC,,AUTO
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:94   

      513     3124    2           FPT@DELREC.V.DCB# = %M$STAR#;

   3124  1 000352   000001 220003                    LDX0    1,DU
         1 000353   200054 740100                    STX0    FPT@DELREC+8,,AUTO

      514     3125    2           FPT@DELREC.KEY_ = VECTOR(AMR@KEY);

   3125  1 000354   577640 235007                    LDA     -65632,DL
         1 000355   200060 452500                    STP2    FPT@DELREC+12,,AUTO
         1 000356   200060 236100                    LDQ     FPT@DELREC+12,,AUTO
         1 000357   000011 036003                    ADLQ    9,DU
         1 000360   200046 757100                    STAQ    FPT@DELREC+2,,AUTO

      515     3126    2           RETURN;

   3126  1 000361   200056 221300                    LDX1  ! FPT@DELREC+10,,AUTO
         1 000362   000001 702211                    TSX2  ! 1,X1

      516     3127    2   END OPEN_STARA;
      517     3128        %EJECT;
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:95   
      518     3129
      519     3130        /*I*   NAME:   CLOSE_STARA
      520     3131
      521     3132               PURPOSE: To close the *A file.
      522     3133        */
      523     3134
      524     3135    1   CLOSE_STARA: PROC;

   3135  1 000363   200056 741300       CLOSE_STARA  STX1  ! FPT@DELREC+10,,AUTO

      525     3136    2           J_FPT_CL_SAVE.V.DCB# = %M$STAR#;

   3136  1 000364   000001 220003                    LDX0    1,DU
         1 000365   000032 740000 xsym               STX0    J_FPT_CL_SAVE+26

      526     3137    2           CALL M$MCLOSE(J_FPT_CL_SAVE) ALTRET(NEVER);

   3137  1 000366   000011 630400 2                  EPPR0   9
         1 000367   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000370   000000 701000 xent               TSX1    M$MCLOSE
         1 000371   000372 702000 1                  TSX2    NEVER

   3136  1 000372                       NEVER        null
      527     3138    2   NEVER:  ;
      528     3139    2           RETURN;

   3139  1 000372   200056 221300                    LDX1  ! FPT@DELREC+10,,AUTO
         1 000373   000001 702211                    TSX2  ! 1,X1

STARA
 Sect OctLoc
   0     000   002052 101***                                                    .*A.

AMR_KEY
 Sect OctLoc
   0     001   002043 061***                                                    .#1.

PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:96   
FPT_READ
 Sect OctLoc
   0     002   000005 777640   000012 006000   000000 177640   000000 006014    ................
   0     006   000000 177640   000000 006014   000000 177640   000000 006014    ................
   0     012   000000 600000   000000 000000   000000 000000   000000 000000    ................
   0     016   000000 000000   000000 000000                                    ........

FPT_WRITE
 Sect OctLoc
   0     020   000003 777640   000030 006000   000000 177640   000000 006014    ................
   0     024   000000 177640   000000 006014   000000 177640   000000 006014    ................
   0     030   000000 400400   000000 000000   000000 000000   000000 000000    ................

FPT_DELREC
 Sect OctLoc
   0     034   000001 777640   000044 006000   000000 177640   000000 006014    .....$..........
   0     040   000000 177640   000000 006014   000000 177640   000000 006014    ................
   0     044   000000 000000   000000 000000                                    ........

(unnamed)
 Sect OctLoc
   2     000   000000 000500   000005 777640   000012 006000   000000 006000    ................
   2     004   777777 777000   000003 777640   000000 006000   777777 774777    ................
   2     010   000001 777640   000000 006000                                    ........
      529     3140    2   END CLOSE_STARA;
      530     3141
      531     3142    1   END JLU$SAVE_AMR;
      532     3143        %EOD;

PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:97   
--  Include file information  --

   M_INFO_C.:E05TOU  is referenced.
   JL_DATA_M.:E05TOU  is referenced.
   F_CP6.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JLU$SAVE_AMR.
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:98   

 **** Variables and constants ****

  ****  Section 000 RoData JLU$SAVE_AMR

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     1-0-0/w STRC(27)    r     1 AMR_KEY                   34-0-0/d STRC(360)   r     1 FPT_DELREC
     2-0-0/d STRC(504)   r     1 FPT_READ                  20-0-0/d STRC(432)   r     1 FPT_WRITE
     0-0-0/w STRC(27)    r     1 STARA

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @DEL_REC                  10-0-0/w SBIN        r     1 ACCESS
    11-0-0/c STRC(27)    r     1 AMR@KEY                    5-0-0/w PTR         r     1 BUF$
    *0-0-0/w UBIN        r     1 DEL_REC                    7-0-0/w UBIN        r     1 ERR
    44-0-0/d STRC(360)   r     1 FPT@DELREC                12-0-0/d STRC(504)   r     1 FPT@READ
    30-0-0/d STRC(432)   r     1 FPT@WRITE                  4-0-0/w UBIN        r     1 I
     6-0-0/w UBIN        r     1 UNUSED_BOUND

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$M$STAR$
     0-0-0/w PTR         r     1 B$SBUF2$                   0-0-0/d STRC(1080)  r     1 J_FPT_CL_SAVE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/d ASTR(3528)  r     1 F$DCB
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:99   
     0-0-0/d STRC(324)   r     1 JL$AMR_BUF


   Procedure JLU$SAVE_AMR requires 252 words for executable code.
   Procedure JLU$SAVE_AMR requires 52 words of local(AUTO) storage.
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:100  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:101  
          MINI XREF LISTING

ACCESS
      2706**DCL      2986<<ASSIGN   2987<>CALL
ALT2_DELREC
      3082**LABEL    3083--CALLALT
ALT_DELREC
      3033**LABEL    3029--CALLALT
AMR@KEY
      2707**DCL      3009--ASSIGN   3011<<ASSIGN   3062--ASSIGN   3064<<ASSIGN   3120<<ASSIGN   3125--ASSIGN
AMR@KEY.NEXT
      2710**DCL      3038<<ASSIGN   3038>>ASSIGN   3087<<ASSIGN   3087>>ASSIGN
AMR@KEY.TXT
      2709**DCL      2710--REDEF
AMR_KEY
      2876**DCL      3011>>ASSIGN   3064>>ASSIGN   3120>>ASSIGN
B$JIT.CPFLAGS1.SLEAZE
       463**DCL       463--REDEF
B$JIT.DCB$
       537**DCL      3104<<ASSIGN
B$JIT.ERR
       369**DCL      3111<<ASSIGN
B$JIT.ERR.CODE
       370**DCL      2989<<ASSIGN   3114>>IF
B$JIT.ERR.MID
       370**DCL       370--REDEF
B$JIT.JRESPEAK
       531**DCL       532--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
       640**DCL       640--REDEF     641--REDEF
B$JIT.PNR
       544**DCL       544--REDEF
B$JIT.TSLINE
       638**DCL       639--REDEF
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:102  
B$JIT$
      2825**DCL       364--IMP-PTR  2989>>ASSIGN   3104>>ASSIGN   3111>>ASSIGN   3114>>IF
B$M$STAR$
      2826**DCL      3022>>ASSIGN   3102<>CALL     3104>>ASSIGN   3105>>ASSIGN   3106>>ASSIGN   3107>>ASSIGN
      3108>>ASSIGN   3109>>ASSIGN   3110>>ASSIGN
B$SBUF2$
      2827**DCL      2804--IMP-PTR  2997>>ASSIGN   3001>>ASSIGN   3021>>ASSIGN   3022>>ASSIGN   3024>>ASSIGN
      3025>>ASSIGN   3026>>ASSIGN   3026>>ASSIGN   3026>>ASSIGN   3033>>ASSIGN   3034>>ASSIGN   3069>>IF
      3071>>ASSIGN   3072>>ASSIGN   3082>>IF       3119>>ASSIGN
BUF$
      2703**DCL      3016>>ASSIGN   3021>>ASSIGN   3024<<ASSIGN   3024>>ASSIGN   3119<<ASSIGN
CLOSE_STARA
      3135**PROC     3043--CALL     3092--CALL
DEL_REC
      2699**DCL        39--PROC     3028>>IF       3034>>ASSIGN
ERR
      2705**DCL      2987<>CALL     2989>>ASSIGN
F$DCB.ACS
      1332**DCL      3110<<ASSIGN
F$DCB.ACTPOS
      1340**DCL      1340--REDEF
F$DCB.ARS
      1315**DCL      1315--REDEF    3022>>ASSIGN
F$DCB.ASN
      1330**DCL      3105<<ASSIGN
F$DCB.ATTR
      1333**DCL      1334--REDEF
F$DCB.BORROW
      1348**DCL      1348--REDEF    1348--REDEF    1348--REDEF
F$DCB.DCBNAME.L
      1362**DCL      1362--IMP-SIZ
F$DCB.EOMCHAR
      1319**DCL      1319--REDEF
F$DCB.EXIST
      1328**DCL      3107<<ASSIGN
F$DCB.FLDID
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:103  
      1343**DCL      1343--REDEF
F$DCB.FORM$
      1337**DCL      1337--REDEF
F$DCB.FSECT
      1353**DCL      1353--REDEF
F$DCB.FSN
      1330**DCL      1330--REDEF    1330--REDEF    1331--REDEF
F$DCB.FUN
      1329**DCL      3106<<ASSIGN
F$DCB.HEADER$
      1336**DCL      1336--REDEF
F$DCB.IXTNSIZE
      1334**DCL      1334--REDEF
F$DCB.LASTSTA$
      1324**DCL      1324--REDEF
F$DCB.LVL
      1349**DCL      1349--REDEF
F$DCB.NAME
      1324**DCL      3109<<ASSIGN
F$DCB.NAME.C
      1324**DCL      1324--REDEF
F$DCB.NOEOF
      1345**DCL      1345--REDEF
F$DCB.NRECS
      1335**DCL      1335--REDEF
F$DCB.NRECX
      1354**DCL      1354--REDEF
F$DCB.OHDR
      1346**DCL      1346--REDEF
F$DCB.ORG
      1329**DCL      1329--REDEF    3108<<ASSIGN
F$DCB.PRECNO
      1352**DCL      1352--REDEF
F$DCB.RCSZ
      1357**DCL      1357--REDEF
F$DCB.RES
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:104  
      1325**DCL      1325--REDEF
F$DCB.SETX
      1337**DCL      1337--REDEF
F$DCB.TAB$
      1336**DCL      1337--REDEF
F$DCB.TDA
      1351**DCL      1351--REDEF
F$DCB.WSN
      1326**DCL      1326--REDEF
FMM$DFLOPNP
      2972**DCL-ENT  3113--CALL
FMM$SCRUB
      2971**DCL-ENT  3102--CALL
FPT@DELREC
      2793**DCL      3029<>CALL     3083<>CALL     3122<<ASSIGN
FPT@DELREC.KEY_
      2793**DCL      3125<<ASSIGN
FPT@DELREC.V
      2796**DCL      3123--ASSIGN
FPT@DELREC.V.DCB#
      2797**DCL      3124<<ASSIGN
FPT@DELREC.V_
      2793**DCL      3123<<ASSIGN
FPT@READ
      2729**DCL      3006<<ASSIGN   3019<>CALL
FPT@READ.BUF_.BOUND
      2731**DCL      3017<<ASSIGN
FPT@READ.BUF_.BUF$
      2732**DCL      3016<<ASSIGN
FPT@READ.KEY_
      2729**DCL      3009<<ASSIGN
FPT@READ.STATION_
      2732**DCL      2733--REDEF
FPT@READ.V
      2733**DCL      3007--ASSIGN
FPT@READ.V.DCB#
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:105  
      2733**DCL      3008<<ASSIGN
FPT@READ.V.DVBYTE.REREAD#
      2744**DCL      2744--REDEF
FPT@READ.V.INDX#
      2742**DCL      2742--REDEF
FPT@READ.V_
      2729**DCL      3007<<ASSIGN
FPT@WRITE
      2768**DCL      3059<<ASSIGN   3074<>CALL
FPT@WRITE.BUF_.BOUND
      2768**DCL      3072<<ASSIGN
FPT@WRITE.BUF_.BUF$
      2770**DCL      3071<<ASSIGN
FPT@WRITE.KEY_
      2768**DCL      3062<<ASSIGN
FPT@WRITE.STATION_
      2770**DCL      2770--REDEF
FPT@WRITE.V
      2771**DCL      3060--ASSIGN
FPT@WRITE.V.DCB#
      2771**DCL      3061<<ASSIGN
FPT@WRITE.V.DVBYTE.VFC#
      2777**DCL      2777--REDEF
FPT@WRITE.V_
      2768**DCL      3060<<ASSIGN
FPT_DELREC
      2961**DCL      3122>>ASSIGN
FPT_DELREC.V
      2964**DCL      2961--DCLINIT
FPT_READ
      2897**DCL      3006>>ASSIGN
FPT_READ.STATION_
      2900**DCL      2901--REDEF
FPT_READ.V
      2901**DCL      2897--DCLINIT
FPT_READ.V.DVBYTE.REREAD#
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:106  
      2912**DCL      2912--REDEF
FPT_READ.V.INDX#
      2910**DCL      2910--REDEF
FPT_WRITE
      2936**DCL      3059>>ASSIGN
FPT_WRITE.STATION_
      2938**DCL      2938--REDEF
FPT_WRITE.V
      2939**DCL      2936--DCLINIT
FPT_WRITE.V.DVBYTE.VFC#
      2945**DCL      2945--REDEF
I
      2702**DCL      3015<<DOINDEX  3021>>ASSIGN   3022>>ASSIGN   3024>>ASSIGN   3025>>ASSIGN   3026>>ASSIGN
      3033>>ASSIGN   3034>>ASSIGN   3068<<DOINDEX  3069>>IF       3071>>ASSIGN   3072>>ASSIGN   3082>>IF
JL$AMR_BUF
      2804**DCL      2997<<ASSIGN   3001--ASSIGN   3002--ASSIGN   3119--ASSIGN
JL$AMR_BUF.AMR_SIZE
      2805**DCL      3001<<ASSIGN   3026<<ASSIGN   3026>>ASSIGN
JL$AMR_BUF.REC.INFO$
      2812**DCL      3021<<ASSIGN   3033<<ASSIGN   3069>>IF       3071>>ASSIGN
JL$AMR_BUF.REC.SZ
      2816**DCL      3022<<ASSIGN   3024>>ASSIGN   3025>>ASSIGN   3026>>ASSIGN   3034<<ASSIGN   3072>>ASSIGN
      3082>>IF
J_FPT_CL_SAVE
      2852**DCL      3137<>CALL
J_FPT_CL_SAVE.SN_
      2852**DCL      2852--REDEF
J_FPT_CL_SAVE.UTL_
      2853**DCL      2853--REDEF
J_FPT_CL_SAVE.V.DCB#
      2858**DCL      3136<<ASSIGN
J_FPT_CL_SAVE.V.EXPIRE#
      2867**DCL      2867--REDEF
J_FPT_CL_SAVE.V.TYPE#
      2865**DCL      2865--REDEF
J_FPT_CL_SAVE.V.XTNSIZE#
PL6.E3A0      #005=JLU$SAVE_AMR File=JLU$UTIL.:E05TSI                            TUE 07/29/97 23:27 Page:107  
      2862**DCL      2862--REDEF    2864--REDEF
M$MCLOSE
      2977**DCL-ENT  3137--CALL
M$MDELREC
      2976**DCL-ENT  3029--CALL     3083--CALL
M$MREAD
      2974**DCL-ENT  3019--CALL
M$MWRITE
      2975**DCL-ENT  3074--CALL
MME$WGVP
      2973**DCL-ENT  2987--CALL
NEVER IN PROCEDURE CLOSE_STARA
      3136**LABEL    3137--CALLALT
OPEN_STARA
      3101**PROC     2995--CALL     3052--CALL
STARA
      2872**DCL      3109>>ASSIGN
UNUSED_BOUND
      2704**DCL      3002<<ASSIGN   3017>>ASSIGN   3025<<ASSIGN   3025>>ASSIGN

PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:108  
      533        1        /*T***********************************************************/
      534        2        /*T*                                                         */
      535        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      536        4        /*T*                                                         */
      537        5        /*T***********************************************************/
      538        6
      539        7        /*F*   NAME:   JLU$TRUNCDCBS
      540        8               PURPOSE: To truncate the blocking buffers on any open user dcbs
      541        9        */
      542       10
      543       11        JLU$TRUNCDCBS: PROC;
      544       12
      545       13    1   DCL I SBIN;
      546       14
      547       15    1   DCL B$JIT$ PTR SYMREF READONLY;
      548       16    1   DCL B$M$DO$ PTR SYMREF READONLY;
      549       17    1   DCL B$ROSEG$ PTR SYMREF READONLY;
      550       18
      551       19    1   DCL FMF$TRUNCM ENTRY(1);
      552       20    1   DCL FMM$RELDCBI ENTRY;
      553       21    1   DCL FMP$CLSJ ENTRY;
      554       22    1   DCL FMM$SCRUB ENTRY(1);
      555       23    1   DCL JLU$FPRG_REL ENTRY;
      556       24
      557       25        %INCLUDE B$JIT;
      558      628        %INCLUDE B$ROSEG;
      559      691        %INCLUDE F$DCB;
      560      740        %INCLUDE CP_6_SUBS;
      561     1280
      562     1281        %SUB M$DO = B$M$DO$->F$DCB;
      563     1282        %SUB DCBADDR = B$ROSEG$->B$ROSEG.DCBPTR$->B$RODCB$;
      564     1283
      565     1284        %EJECT;
PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:109  
      566     1285
      567     1286        /* Close & save M$DO.
      568     1287        */
      569     1288    1           B$JIT$->B$JIT.DCB$ = B$M$DO$;
      570     1289    1           IF NOT(B$JIT$->B$JIT.JUNK & %JJ_SAVEING#)
      571     1290    2           THEN DO;
      572     1291    2                CALL FMP$CLSJ;
      573     1292    2                IF (M$DO.TAB$ ~= ADDR(NIL)) OR
      574     1293    2                  (M$DO.HEADER$ ~= ADDR(NIL)) OR
      575     1294    2                  (M$DO.LASTSTA$ ~= ADDR(NIL)) OR
      576     1295    2                  (M$DO.FORM$ ~= ADDR(NIL))
      577     1296    2                THEN CALL FMM$SCRUB(B$M$DO$);
      578     1297    2                END;
      579     1298
      580     1299        /* Close and release system DCBs except DELTA's.
      581     1300        */
      582     1301    1           IF NOT(B$JIT.JUNK2 & %JJ2_ASAVE_LNK#)
      583     1302    2           THEN DO;
      584     1303    3                DO I = %M$IBEX# TO %M$IBEX2#;
      585     1304    3                     IF DCBADDR(I) ~= ADDR(NIL)
      586     1305    4                     THEN DO;
      587     1306    4                          B$JIT$->B$JIT.DCB$ = DCBADDR(I);
      588     1307    4                          B$JIT$->B$JIT.DCBNO = I;
      589     1308    4                          CALL FMP$CLSJ;
      590     1309    4                          CALL FMM$RELDCBI;
      591     1310    4                          END;
      592     1311    3                     END;
      593     1312    2                END;
      594     1313
      595     1314        /* Close and save all stream dcbs, trunc everything else.
      596     1315        */
      597     1316    2           DO I = 5 TO B$ROSEG$->B$ROSEG.NUMDCBS;
      598     1317    2                IF DCBADDR(I) ~= ADDR(NIL)
      599     1318    3                THEN DO;
      600     1319    3                     B$JIT$->B$JIT.DCB$ = DCBADDR(I);
      601     1320    3                     IF B$JIT$->B$JIT.DCB$->F$DCB.IASN = %FPRGIASN# THEN
      602     1321    3                          IF B$JIT$->B$JIT.JUNK&%JJ_SAVEING# THEN EXIT;
PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:110  
      603     1322    3                          ELSE IF NOT B$JIT$->B$JIT.JUNK2&%JJ2_ASAVE_LNK#
      604     1323    3                                 OR B$JIT$->B$JIT.DCB$->F$DCB.RESNT.TYP~='UC'
      605     1324    3                                 AND NOT B$JIT$->B$JIT.DCB$->F$DCB.FCN THEN
      606     1325    3                                    CALL JLU$FPRG_REL;
      607     1326    3                               ELSE
      608     1327    3                                    CALL FMP$CLSJ;
      609     1328    3                     ELSE IF B$JIT$->B$JIT.DCB$->F$DCB.IASN = %STREAM#
      610     1329    3   /* AND B$JIT$->B$JIT.DCB$->F$DCB.RESNT.TYP~='UC' */THEN
      611     1330    3                               CALL FMP$CLSJ;
      612     1331    3                          ELSE
      613     1332    3                               CALL FMF$TRUNCM(0);
      614     1333    3                     END;
      615     1334    2                END;
      616     1335    1           RETURN;
      617     1336    1   END JLU$TRUNCDCBS;
      618     1337
      619     1338        %EOD;

PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:111  
--  Include file information  --

   CP_6_SUBS.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B$ROSEG.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JLU$TRUNCDCBS.

   Procedure JLU$TRUNCDCBS requires 106 words for executable code.
   Procedure JLU$TRUNCDCBS requires 4 words of local(AUTO) storage.

PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:112  

 Object Unit name= JLU$TRUNCDCBS                              File name= JLU$UTIL.:E05TOU
 UTS= JUL 29 '97 23:28:44.68 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      1      1  JLU$TRUNCDCBS
    1   Proc  even  none   106    152  JLU$TRUNCDCBS
    2  RoData even  none     2      2  JLU$TRUNCDCBS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        0  JLU$TRUNCDCBS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 FMP$CLSJ
         yes           Std       1 FMM$SCRUB
         yes           Std       0 FMM$RELDCBI
         yes           Std       0 JLU$FPRG_REL
         yes           Std       1 FMF$TRUNCM
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:113  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    B$JIT$                           r    B$M$DO$                          r    B$ROSEG$
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:114  


      533        1        /*T***********************************************************/
      534        2        /*T*                                                         */
      535        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      536        4        /*T*                                                         */
      537        5        /*T***********************************************************/
      538        6
      539        7        /*F*   NAME:   JLU$TRUNCDCBS
      540        8               PURPOSE: To truncate the blocking buffers on any open user dcbs
      541        9        */
      542       10
      543       11        JLU$TRUNCDCBS: PROC;

     11  1 000000   000000 700200 xent  JLU$TRUNCDC* TSX0  ! X66_AUTO_0
         1 000001   000004 000000                    ZERO    4,0

      544       12
      545       13    1   DCL I SBIN;
      546       14
      547       15    1   DCL B$JIT$ PTR SYMREF READONLY;
      548       16    1   DCL B$M$DO$ PTR SYMREF READONLY;
      549       17    1   DCL B$ROSEG$ PTR SYMREF READONLY;
      550       18
      551       19    1   DCL FMF$TRUNCM ENTRY(1);
      552       20    1   DCL FMM$RELDCBI ENTRY;
      553       21    1   DCL FMP$CLSJ ENTRY;
      554       22    1   DCL FMM$SCRUB ENTRY(1);
      555       23    1   DCL JLU$FPRG_REL ENTRY;
      556       24
      557       25        %INCLUDE B$JIT;
      558      628        %INCLUDE B$ROSEG;
      559      691        %INCLUDE F$DCB;
      560      740        %INCLUDE CP_6_SUBS;
      561     1280
      562     1281        %SUB M$DO = B$M$DO$->F$DCB;
      563     1282        %SUB DCBADDR = B$ROSEG$->B$ROSEG.DCBPTR$->B$RODCB$;
      564     1283
PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:115  
      565     1284        %EJECT;
PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:116  
      566     1285
      567     1286        /* Close & save M$DO.
      568     1287        */
      569     1288    1           B$JIT$->B$JIT.DCB$ = B$M$DO$;

   1288  1 000002   000000 236000 xsym               LDQ     B$M$DO$
         1 000003   000000 470400 xsym               LDP0    B$JIT$
         1 000004   000232 756100                    STQ     154,,PR0

      570     1289    1           IF NOT(B$JIT$->B$JIT.JUNK & %JJ_SAVEING#)

   1289  1 000005   000315 220100                    LDX0    205,,PR0
         1 000006   010000 360003                    ANX0    4096,DU
         1 000007   000034 601000 1                  TNZ     s:1301

      571     1290    2           THEN DO;

      572     1291    2                CALL FMP$CLSJ;

   1291  1 000010   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000011   000000 701000 xent               TSX1    FMP$CLSJ
         1 000012   000000 011000                    NOP     0

      573     1292    2                IF (M$DO.TAB$ ~= ADDR(NIL)) OR

   1292  1 000013   000000 470400 xsym               LDP0    B$M$DO$
         1 000014   000047 236100                    LDQ     39,,PR0
         1 000015   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000016   000030 601000 1                  TNZ     s:1296
         1 000017   000046 236100                    LDQ     38,,PR0
         1 000020   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000021   000030 601000 1                  TNZ     s:1296
         1 000022   000007 236100                    LDQ     7,,PR0
         1 000023   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000024   000030 601000 1                  TNZ     s:1296
         1 000025   000050 236100                    LDQ     40,,PR0
         1 000026   000001 116000 xsym               CMPQ    B_VECTNIL+1
PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:117  
         1 000027   000034 600000 1                  TZE     s:1301

      574     1293    2                  (M$DO.HEADER$ ~= ADDR(NIL)) OR
      575     1294    2                  (M$DO.LASTSTA$ ~= ADDR(NIL)) OR
      576     1295    2                  (M$DO.FORM$ ~= ADDR(NIL))
      577     1296    2                THEN CALL FMM$SCRUB(B$M$DO$);

   1296  1 000030   000000 630400 2                  EPPR0   0
         1 000031   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000032   000000 701000 xent               TSX1    FMM$SCRUB
         1 000033   000000 011000                    NOP     0

      578     1297    2                END;

      579     1298
      580     1299        /* Close and release system DCBs except DELTA's.
      581     1300        */
      582     1301    1           IF NOT(B$JIT.JUNK2 & %JJ2_ASAVE_LNK#)

   1301  1 000034   000000 470400 xsym               LDP0    B$JIT$
         1 000035   000321 220100                    LDX0    209,,PR0
         1 000036   000020 360003                    ANX0    16,DU
         1 000037   000066 601000 1                  TNZ     s:1316

      583     1302    2           THEN DO;

      584     1303    3                DO I = %M$IBEX# TO %M$IBEX2#;

   1303  1 000040   000005 235007                    LDA     5,DL
         1 000041   200003 755100                    STA     I,,AUTO

      585     1304    3                     IF DCBADDR(I) ~= ADDR(NIL)

   1304  1 000042   000000 470400 xsym               LDP0    B$ROSEG$
         1 000043   000000 471500                    LDP1    0,,PR0
         1 000044   200003 720100                    LXL0    I,,AUTO
         1 000045   100000 236110                    LDQ     0,X0,PR1
PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:118  
         1 000046   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000047   000062 600000 1                  TZE     s:1311

      586     1305    4                     THEN DO;

      587     1306    4                          B$JIT$->B$JIT.DCB$ = DCBADDR(I);

   1306  1 000050   000000 473400 xsym               LDP3    B$JIT$
         1 000051   300232 756100                    STQ     154,,PR3

      588     1307    4                          B$JIT$->B$JIT.DCBNO = I;

   1307  1 000052   200003 236100                    LDQ     I,,AUTO
         1 000053   300022 552104                    STBQ    18,'04'O,PR3

      589     1308    4                          CALL FMP$CLSJ;

   1308  1 000054   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000055   000000 701000 xent               TSX1    FMP$CLSJ
         1 000056   000000 011000                    NOP     0

      590     1309    4                          CALL FMM$RELDCBI;

   1309  1 000057   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000060   000000 701000 xent               TSX1    FMM$RELDCBI
         1 000061   000000 011000                    NOP     0

      591     1310    4                          END;

      592     1311    3                     END;

   1311  1 000062   200003 054100                    AOS     I,,AUTO
         1 000063   200003 235100                    LDA     I,,AUTO
         1 000064   000010 115007                    CMPA    8,DL
         1 000065   000042 604400 1                  TMOZ    s:1304

      593     1312    2                END;
PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:119  

      594     1313
      595     1314        /* Close and save all stream dcbs, trunc everything else.
      596     1315        */
      597     1316    2           DO I = 5 TO B$ROSEG$->B$ROSEG.NUMDCBS;

   1316  1 000066   000005 235007                    LDA     5,DL
         1 000067   200003 755100                    STA     I,,AUTO
         1 000070   000144 710000 1                  TRA     s:1334+1

      598     1317    2                IF DCBADDR(I) ~= ADDR(NIL)

   1317  1 000071   000000 470400 xsym               LDP0    B$ROSEG$
         1 000072   000000 471500                    LDP1    0,,PR0
         1 000073   200003 720100                    LXL0    I,,AUTO
         1 000074   100000 236110                    LDQ     0,X0,PR1
         1 000075   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000076   000143 600000 1                  TZE     s:1334

      599     1318    3                THEN DO;

      600     1319    3                     B$JIT$->B$JIT.DCB$ = DCBADDR(I);

   1319  1 000077   000000 473400 xsym               LDP3    B$JIT$
         1 000100   300232 756100                    STQ     154,,PR3

      601     1320    3                     IF B$JIT$->B$JIT.DCB$->F$DCB.IASN = %FPRGIASN# THEN

   1320  1 000101   300232 471500                    LDP1    154,,PR3
         1 000102   100103 236100                    LDQ     67,,PR1
         1 000103   000777 376007                    ANQ     511,DL
         1 000104   000010 116007                    CMPQ    8,DL
         1 000105   000131 601000 1                  TNZ     s:1328

      602     1321    3                          IF B$JIT$->B$JIT.JUNK&%JJ_SAVEING# THEN EXIT;

   1321  1 000106   300315 221100                    LDX1    205,,PR3
PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:120  
         1 000107   010000 361003                    ANX1    4096,DU
         1 000110   000143 601000 1                  TNZ     s:1334

      603     1322    3                          ELSE IF NOT B$JIT$->B$JIT.JUNK2&%JJ2_ASAVE_LNK#

   1322  1 000111   300321 221100                    LDX1    209,,PR3
         1 000112   000020 361003                    ANX1    16,DU
         1 000113   000121 600000 1                  TZE     s:1325
         1 000114   100026 221100                    LDX1    22,,PR1
         1 000115   000000 101000 0                  CMPX1   0
         1 000116   000125 600000 1                  TZE     s:1327
         1 000117   100074 222100                    LDX2    60,,PR1
         1 000120   000125 601000 1                  TNZ     s:1327

      604     1323    3                                 OR B$JIT$->B$JIT.DCB$->F$DCB.RESNT.TYP~='UC'
      605     1324    3                                 AND NOT B$JIT$->B$JIT.DCB$->F$DCB.FCN THEN
      606     1325    3                                    CALL JLU$FPRG_REL;

   1325  1 000121   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000122   000000 701000 xent               TSX1    JLU$FPRG_REL
         1 000123   000000 011000                    NOP     0
         1 000124   000143 710000 1                  TRA     s:1334

      607     1326    3                               ELSE
      608     1327    3                                    CALL FMP$CLSJ;

   1327  1 000125   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000126   000000 701000 xent               TSX1    FMP$CLSJ
         1 000127   000000 011000                    NOP     0
         1 000130   000143 710000 1                  TRA     s:1334

      609     1328    3                     ELSE IF B$JIT$->B$JIT.DCB$->F$DCB.IASN = %STREAM#

   1328  1 000131   000005 116007                    CMPQ    5,DL
         1 000132   000137 601000 1                  TNZ     s:1332

      610     1329    3   /* AND B$JIT$->B$JIT.DCB$->F$DCB.RESNT.TYP~='UC' */THEN
PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:121  
      611     1330    3                               CALL FMP$CLSJ;

   1330  1 000133   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000134   000000 701000 xent               TSX1    FMP$CLSJ
         1 000135   000000 011000                    NOP     0
         1 000136   000143 710000 1                  TRA     s:1334

      612     1331    3                          ELSE
      613     1332    3                               CALL FMF$TRUNCM(0);

   1332  1 000137   000001 630400 2                  EPPR0   1
         1 000140   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000141   000000 701000 xent               TSX1    FMF$TRUNCM
         1 000142   000000 011000                    NOP     0

      614     1333    3                     END;

      615     1334    2                END;

   1334  1 000143   200003 054100                    AOS     I,,AUTO
         1 000144   000000 470400 xsym               LDP0    B$ROSEG$
         1 000145   000002 236100                    LDQ     2,,PR0
         1 000146   000022 772000                    QRL     18
         1 000147   200003 116100                    CMPQ    I,,AUTO
         1 000150   000071 605000 1                  TPL     s:1317

      616     1335    1           RETURN;

   1335  1 000151   000000 702200 xent               TSX2  ! X66_ARET

(unnamed)
 Sect OctLoc
   0     000   125103 040040                                                    UC

(unnamed)
 Sect OctLoc
   2     000   000000 006000   000002 006000                                    ........
PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:122  
      617     1336    1   END JLU$TRUNCDCBS;
      618     1337
      619     1338        %EOD;

PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:123  
--  Include file information  --

   CP_6_SUBS.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B$ROSEG.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JLU$TRUNCDCBS.
PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:124  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w SBIN        r     1 I

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$M$DO$
     0-0-0/w PTR         r     1 B$ROSEG$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/w PTR         r     1 B$RODCB$(0:0)
     0-0-0/d STRC(3024)  r     1 B$ROSEG                    0-0-0/d ASTR(3528)  r     1 F$DCB


   Procedure JLU$TRUNCDCBS requires 106 words for executable code.
   Procedure JLU$TRUNCDCBS requires 4 words of local(AUTO) storage.
PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:125  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:126  
          MINI XREF LISTING

B$JIT.CPFLAGS1.SLEAZE
       446**DCL       446--REDEF
B$JIT.DCB$
       520**DCL      1288<<ASSIGN   1306<<ASSIGN   1319<<ASSIGN   1320>>IF       1322>>IF       1322>>IF
      1328>>IF
B$JIT.DCBNO
       433**DCL      1307<<ASSIGN
B$JIT.ERR.MID
       353**DCL       353--REDEF
B$JIT.JRESPEAK
       514**DCL       515--REDEF
B$JIT.JUNK
       552**DCL      1289>>IF       1321>>IF
B$JIT.JUNK2
       606**DCL      1301>>IF       1322>>IF
B$JIT.ORIGINATOR_PORT.FROM_CR
       623**DCL       623--REDEF     624--REDEF
B$JIT.PNR
       527**DCL       527--REDEF
B$JIT.TSLINE
       621**DCL       622--REDEF
B$JIT$
        15**DCL       347--IMP-PTR  1288>>ASSIGN   1289>>IF       1301>>IF       1306>>ASSIGN   1307>>ASSIGN
      1319>>ASSIGN   1320>>IF       1321>>IF       1322>>IF       1322>>IF       1322>>IF       1328>>IF
B$M$DO$
        16**DCL      1288>>ASSIGN   1292>>IF       1292>>IF       1292>>IF       1292>>IF       1296<>CALL
B$RODCB$
       675**DCL      1304>>IF       1306>>ASSIGN   1317>>IF       1319>>ASSIGN
B$ROSEG.DCBPTR$
       639**DCL      1304>>IF       1306>>ASSIGN   1317>>IF       1319>>ASSIGN
B$ROSEG.NUMDCBS
       641**DCL      1316>>DOINDEX
PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:127  
B$ROSEG$
        17**DCL      1304>>IF       1306>>ASSIGN   1316>>DOINDEX  1317>>IF       1319>>ASSIGN
F$DCB.ACTPOS
       717**DCL       717--REDEF
F$DCB.ARS
       692**DCL       692--REDEF
F$DCB.ATTR
       710**DCL       711--REDEF
F$DCB.BORROW
       725**DCL       725--REDEF     725--REDEF     725--REDEF
F$DCB.DCBNAME.L
       739**DCL       739--IMP-SIZ
F$DCB.EOMCHAR
       696**DCL       696--REDEF
F$DCB.FCN
       729**DCL      1322>>IF
F$DCB.FLDID
       720**DCL       720--REDEF
F$DCB.FORM$
       714**DCL       714--REDEF    1292>>IF
F$DCB.FSECT
       730**DCL       730--REDEF
F$DCB.FSN
       707**DCL       707--REDEF     707--REDEF     708--REDEF
F$DCB.HEADER$
       713**DCL       713--REDEF    1292>>IF
F$DCB.IASN
       733**DCL      1320>>IF       1328>>IF
F$DCB.IXTNSIZE
       711**DCL       711--REDEF
F$DCB.LASTSTA$
       701**DCL       701--REDEF    1292>>IF
F$DCB.LVL
       726**DCL       726--REDEF
F$DCB.NAME.C
       701**DCL       701--REDEF
PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:128  
F$DCB.NOEOF
       722**DCL       722--REDEF
F$DCB.NRECS
       712**DCL       712--REDEF
F$DCB.NRECX
       731**DCL       731--REDEF
F$DCB.OHDR
       723**DCL       723--REDEF
F$DCB.ORG
       706**DCL       706--REDEF
F$DCB.PRECNO
       729**DCL       729--REDEF
F$DCB.RCSZ
       734**DCL       734--REDEF
F$DCB.RES
       702**DCL       702--REDEF
F$DCB.RESNT.TYP
       702**DCL      1322>>IF
F$DCB.SETX
       714**DCL       714--REDEF
F$DCB.TAB$
       713**DCL       714--REDEF    1292>>IF
F$DCB.TDA
       728**DCL       728--REDEF
F$DCB.WSN
       703**DCL       703--REDEF
FMF$TRUNCM
        19**DCL-ENT  1332--CALL
FMM$RELDCBI
        20**DCL-ENT  1309--CALL
FMM$SCRUB
        22**DCL-ENT  1296--CALL
FMP$CLSJ
        21**DCL-ENT  1291--CALL     1308--CALL     1327--CALL     1330--CALL
I
        13**DCL      1303<<DOINDEX  1304>>IF       1306>>ASSIGN   1307>>ASSIGN   1316<<DOINDEX  1317>>IF
PL6.E3A0      #006=JLU$TRUNCDCBS File=JLU$UTIL.:E05TSI                           TUE 07/29/97 23:28 Page:129  
      1319>>ASSIGN
JLU$FPRG_REL
        23**DCL-ENT  1325--CALL

PL6.E3A0      #007=JLU$VALID File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:29 Page:130  
      620        1        /*T***********************************************************/
      621        2        /*T*                                                         */
      622        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      623        4        /*T*                                                         */
      624        5        /*T***********************************************************/
      625        6
      626        7        /*F*   NAME:   JLU$VALID
      627        8               PURPOSE: To validate whether or not a LINK, LDTRC, or
      628        9                       implicit return on exit from a linked-to program is
      629       10                       currently possible.
      630       11        */
      631       12
      632       13        JLU$VALID: PROC(ERR) ALTRET;
      633       14    1   DCL ERR SBIN;
      634       15
      635       16    1   DCL I SBIN;
      636       17
      637       18    1   DCL B$JIT$ PTR SYMREF READONLY;
      638       19    1   DCL B$UPT$ PTR SYMREF READONLY;
      639       20    1   DCL B$USRT$ PTR SYMREF;
      640       21    1   DCL S$CU$ PTR SYMREF;
      641       22
      642       23        %INCLUDE B$MAP;
      643      122        %INCLUDE B$USER;
      644      338        %INCLUDE M$JIT_C;
      645      858        %INCLUDE B_STRINGS_C;
      646      987        %INCLUDE J_ERRORS_C;
      647     1074        %INCLUDE M_INFO_C;
      648     1214
      649     1215        %SUB B$PT = B$UPT$->B$MAP;
      650     1216        %SUB B$JIT = B$JIT$->B$JIT;
      651     1217        %SUB B$U = S$CU$->B$U;
      652     1218
      653     1219
      654     1220        /* Load-and-link enforces that no cvm-ed page be below any user-
      655     1221           owned pages.
      656     1222        */
PL6.E3A0      #007=JLU$VALID File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:29 Page:131  
      657     1223    1           IF NOT (B$U.FLG & %U_STIP)
      658     1224    2           THEN DO;
      659     1225    3                DO I = %ISEGLO TO B$JIT.TDP-1;
      660     1226    3                     IF B$PT.SCTRL(I) & %SCCVM
      661     1227    4                     THEN DO;
      662     1228    4                          ERR = %E$LDLNKCVM;
      663     1229    4                          ALTRETURN;
      664     1230    4                          END;
      665     1231    3                     END;
      666     1232    2                END;
      667     1233        /*E*    ERROR:  JLU-E$LDLNKCVM-4
      668     1234                MESSAGE: CVM page encountered below dynamic data area.
      669     1235        */
      670     1236
      671     1237
      672     1238        /*N* Here we must test for outstanding tp calls and possibly enq'd
      673     1239             resources before allowing the link/ldtrc/return to proceed.
      674     1240        */
      675     1241
      676     1242    1           RETURN;
      677     1243    1   END JLU$VALID;

PL6.E3A0      #007=JLU$VALID File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:29 Page:132  
--  Include file information  --

   M_INFO_C.:E05TOU  is referenced.
   J_ERRORS_C.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  is referenced.
   M$JIT_C.:E05TOU  cannot be made into a system file and is referenced.
   B$USER.:E05TOU  cannot be made into a system file and is referenced.
   B$MAP.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JLU$VALID.

   Procedure JLU$VALID requires 27 words for executable code.
   Procedure JLU$VALID requires 6 words of local(AUTO) storage.

    No errors detected in file JLU$UTIL.:E05TSI    .

PL6.E3A0      #007=JLU$VALID File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:29 Page:133  

 Object Unit name= JLU$VALID                                  File name= JLU$UTIL.:E05TOU
 UTS= JUL 29 '97 23:29:23.20 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      1      1  JLU$VALID
    1   Proc  even  none    27     33  JLU$VALID

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        1  JLU$VALID

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    B$JIT$                           r    B$UPT$                                S$CU$
PL6.E3A0      #007=JLU$VALID File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:29 Page:134  


      620        1        /*T***********************************************************/
      621        2        /*T*                                                         */
      622        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      623        4        /*T*                                                         */
      624        5        /*T***********************************************************/
      625        6
      626        7        /*F*   NAME:   JLU$VALID
      627        8               PURPOSE: To validate whether or not a LINK, LDTRC, or
      628        9                       implicit return on exit from a linked-to program is
      629       10                       currently possible.
      630       11        */
      631       12
      632       13        JLU$VALID: PROC(ERR) ALTRET;

     13  1 000000   000000 700200 xent  JLU$VALID    TSX0  ! X66_AUTO_1
         1 000001   000006 000001                    ZERO    6,1

      633       14    1   DCL ERR SBIN;
      634       15
      635       16    1   DCL I SBIN;
      636       17
      637       18    1   DCL B$JIT$ PTR SYMREF READONLY;
      638       19    1   DCL B$UPT$ PTR SYMREF READONLY;
      639       20    1   DCL B$USRT$ PTR SYMREF;
      640       21    1   DCL S$CU$ PTR SYMREF;
      641       22
      642       23        %INCLUDE B$MAP;
      643      122        %INCLUDE B$USER;
      644      338        %INCLUDE M$JIT_C;
      645      858        %INCLUDE B_STRINGS_C;
      646      987        %INCLUDE J_ERRORS_C;
      647     1074        %INCLUDE M_INFO_C;
      648     1214
      649     1215        %SUB B$PT = B$UPT$->B$MAP;
      650     1216        %SUB B$JIT = B$JIT$->B$JIT;
      651     1217        %SUB B$U = S$CU$->B$U;
PL6.E3A0      #007=JLU$VALID File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:29 Page:135  
      652     1218
      653     1219
      654     1220        /* Load-and-link enforces that no cvm-ed page be below any user-
      655     1221           owned pages.
      656     1222        */
      657     1223    1           IF NOT (B$U.FLG & %U_STIP)

   1223  1 000002   000000 470400 xsym               LDP0    S$CU$
         1 000003   000000 236100                    LDQ     0,,PR0
         1 000004   000000 376000 0                  ANQ     0
         1 000005   000032 601000 1                  TNZ     s:1242

      658     1224    2           THEN DO;

      659     1225    3                DO I = %ISEGLO TO B$JIT.TDP-1;

   1225  1 000006   000100 235007                    LDA     64,DL
         1 000007   200004 755100                    STA     I,,AUTO
         1 000010   000025 710000 1                  TRA     s:1231+1

      660     1226    3                     IF B$PT.SCTRL(I) & %SCCVM

   1226  1 000011   000000 470400 xsym               LDP0    B$UPT$
         1 000012   200004 720100                    LXL0    I,,AUTO
         1 000013   000000 236110                    LDQ     0,X0,PR0
         1 000014   000022 736000                    QLS     18
         1 000015   777400 376003                    ANQ     -256,DU
         1 000016   001000 376003                    ANQ     512,DU
         1 000017   000024 600000 1                  TZE     s:1231

      661     1227    4                     THEN DO;

      662     1228    4                          ERR = %E$LDLNKCVM;

   1228  1 000020   000500 235007                    LDA     320,DL
         1 000021   200003 471500                    LDP1    @ERR,,AUTO
         1 000022   100000 755100                    STA     0,,PR1
PL6.E3A0      #007=JLU$VALID File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:29 Page:136  

      663     1229    4                          ALTRETURN;

   1229  1 000023   000000 702200 xent               TSX2  ! X66_AALT

      664     1230    4                          END;
      665     1231    3                     END;

   1231  1 000024   200004 054100                    AOS     I,,AUTO
         1 000025   000000 470400 xsym               LDP0    B$JIT$
         1 000026   000204 236100                    LDQ     132,,PR0
         1 000027   000022 772000                    QRL     18
         1 000030   200004 116100                    CMPQ    I,,AUTO
         1 000031   000011 605400 1                  TPNZ    s:1226

      666     1232    2                END;

      667     1233        /*E*    ERROR:  JLU-E$LDLNKCVM-4
      668     1234                MESSAGE: CVM page encountered below dynamic data area.
      669     1235        */
      670     1236
      671     1237
      672     1238        /*N* Here we must test for outstanding tp calls and possibly enq'd
      673     1239             resources before allowing the link/ldtrc/return to proceed.
      674     1240        */
      675     1241
      676     1242    1           RETURN;

   1242  1 000032   000000 702200 xent               TSX2  ! X66_ARET

(unnamed)
 Sect OctLoc
   0     000   000200 000000                                                    ....
      677     1243    1   END JLU$VALID;

PL6.E3A0      #007=JLU$VALID File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:29 Page:137  
--  Include file information  --

   M_INFO_C.:E05TOU  is referenced.
   J_ERRORS_C.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  is referenced.
   M$JIT_C.:E05TOU  cannot be made into a system file and is referenced.
   B$USER.:E05TOU  cannot be made into a system file and is referenced.
   B$MAP.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JLU$VALID.
PL6.E3A0      #007=JLU$VALID File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:29 Page:138  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @ERR                      *0-0-0/w SBIN        r     1 ERR
     4-0-0/w SBIN        r     1 I

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$UPT$
     0-0-0/w PTR         r     1 S$CU$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/w STRC        r     1 B$MAP(0:1023)
     0-0-0/d STRC(576)   r     1 B$U


   Procedure JLU$VALID requires 27 words for executable code.
   Procedure JLU$VALID requires 6 words of local(AUTO) storage.

    No errors detected in file JLU$UTIL.:E05TSI    .
PL6.E3A0      #007=JLU$VALID File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:29 Page:139  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=JLU$VALID File=JLU$UTIL.:E05TSI                               TUE 07/29/97 23:29 Page:140  
          MINI XREF LISTING

B$DO.ECCINFO
       273**DCL       274--REDEF
B$JIT.ERR.MID
       666**DCL       666--REDEF
B$JIT.JRESPEAK
       756**DCL       757--REDEF
B$JIT.TDP
       754**DCL      1225>>DOINDEX
B$JIT$
        18**DCL       660--IMP-PTR  1225>>DOINDEX
B$MAP.SCTRL
        66**DCL        67--REDEF    1226>>IF
B$U.FLG
       139**DCL      1223>>IF
B$U.MISC
       252**DCL       253--REDEF
B$UPT$
        19**DCL      1226>>IF
B$USER.MISC
       328**DCL       329--REDEF
ERR
        14**DCL        13--PROC     1228<<ASSIGN
I
        16**DCL      1225<<DOINDEX  1226>>IF
S$CU$
        21**DCL      1223>>IF
