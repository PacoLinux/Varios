/*M*   DRAWOU  DRAW PICTURES FROM OU           */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
DRAWOU: PROC(SDCB,OUNAM,NAMREC,NAMRSIZ) ALTRET;
/*
*/
%PLIST;
%INCLUDE B$OBJECT_C;
%INCLUDE CP_6;
/*
*/
%B$RECORDSUBS;
%B$HEADKEY(NAME=HKEY,HFLAGINIT=);
%B$OUHEAD(NAME=HEAD);
%B$OUKEY(NAME=OUKEY);
%B$LBNTRY1(NAME=LGBLKHD,STCLASS="BASED(LGBLKHD$)");
DCL LGBLKHD$ PTR;
/*
*/
%B$DNAME(NAME=DBGNAM,STCLASS="BASED(DBGNAM$)");
DCL DBGNAM$ PTR;
%B$VREBL(NAME=VARENT,STCLASS="BASED(VARENT$)");
DCL VARENT$ PTR;
/*
%B$EXST(NAME=STMTENT,STCLASS="BASED(STMTENT$)");
DCL STMTENT$ PTR;
%B$INTNTRY(NAME=INTRYENT,STCLASS="BASED(INTRYENT$)");
DCL INTRYENT$ PTR;
*/
DCL SELNMOPT UBIN SYMREF;
DCL SELNMNAM CHAR(SELNMOPT) SYMREF;
/*
*/
DCL M$SI DCB;
DCL M$LO DCB;
DCL M$OU DCB;
DCL SDCB UBIN HALF;
DCL 1 OUNAM ALIGNED,
      2 CNT UBIN BYTE UNAL,
      2 TXT CHAR(OUNAM.CNT);
DCL NAMREC UBIN;
DCL NAMRSIZ UBIN;
DCL VARSIZ UBIN BASED;
/*
*/
%FPT_READ(FPTN=RDHEAD,BUF=HEAD,KEY=HKEY,KEYS=YES);
%FPT_READ(FPTN=RDFPT,KEY=OUKEY,KEYS=YES);
%FPT_GDS(FPTN=GDSFPT,RESULTS=BF,SEGSIZE=256,STCLASS=CONSTANT);
DCL 1 BF DALIGNED STATIC SYMDEF,
      2 WDS UBIN HALF UNAL INIT(0),
      2 * UBIN HALF UNAL,
      2 P$ PTR INIT(ADDR(NIL));
%FPT_WRITE(FPTN=WRDRAW,BUF=DRAWLINE,DCB=M$LO);
%FPT_WRITE(FPTN=WRHEAD,BUF=HEADLINE,DCB=M$LO);
%FPT_WRITE(FPTN=WRBREAK,BUF=BREAKLINE,DCB=M$LO);
%FPT_WRITE(FPTN=WRARRAY,BUF=ARRAYLINE,DCB=M$LO);
%FPT_WRITE(FPTN=WRSTRCT,BUF=STRCTLINE,DCB=M$LO);
%FPT_WRITE(FPTN=WREQU,BUF=EQULINE,DCB=M$OU);
%FPT_WRITE(FPTN=WRLVLS,BUF=LVLINE,DCB=M$LO,STCLASS=CONSTANT);
%FPT_WRITE(FPTN=TOF,BUF=TOFLINE,DCB=M$LO,VFC=YES,STCLASS=CONSTANT SYMDEF);
/*
*/
DCL 1 DRAWLINE STATIC SYMDEF,
      2 LVLN(0:2) CHAR(10),
      2 LVL REDEF LVLN CHAR(30),
      2 LOC CHAR(4),
      2 BANG CHAR(1) INIT('!'),
      2 LINE CHAR(72),
      2 ALIGNV CHAR(1);
DCL 1 STRCTLINE STATIC SYMDEF,
      2 * CHAR(5) INIT('FILE='),
      2 FNAM CHAR(30) ,
      2 NAM CHAR(20) INIT('DCLXX'),
      2 OUHD CHAR(3) INIT(' '),
      2 OUNAM CHAR(20) INIT(' ');
 
DCL 1 HEADLINE STATIC SYMDEF,
      2 LVLN(0:2) CHAR(10) INIT('LEVEL 2','LEVEL 3','LEVEL 4'),
      2 LOC CHAR(4) INIT(' '),
      2 BITS CHAR(72) INIT(
        ' 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8');
DCL 1 ARRAYLINE STATIC SYMDEF,
      2 * CHAR(35) INIT(' '),
      2 * CHAR(6) INIT('ARRAY:'),
      2 SIZE CHAR(5) INIT(' '),
      2 OX CHAR(18) INIT('''O ENTRIES TOTAL.');
DCL 1 BREAKLINE STATIC SYMDEF,
      2 * CHAR(34) INIT(' '),
      2 * CHAR(1) INIT('I'),
      2 BITS CHAR(72);
DCL 1 LVLINE STATIC,
      2 * CHAR(5) INIT(' '),
      2 LVLS CHAR(72);
DCL 1 OLDLVL STATIC CHAR(30) INIT(' ');
DCL 1 EQULINE STATIC CHAR(132);
DCL TOFLINE CHAR(0) CONSTANT INIT('0');
/*
*/
DCL DOTS CHAR(72) CONSTANT
INIT('. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ');
DCL DASHES CHAR(72) STATIC
INIT('-----------------I-----------------I-----------------I-----------------I');
DCL DASHBLANK CHAR(72) STATIC
INIT(' - - - - - - - - I - - - - - - - - I - - - - - - - - I - - - - - - - - I');
DCL DASHES6 CHAR(32) CONSTANT
INIT('---------------I---------------I');
DCL DASHBLANK6 CHAR(32) CONSTANT
INIT(' - - - - - - - I - - - - - - - I');
DCL SHARPS CHAR(72) CONSTANT
INIT('# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ');
DCL BLANKS CHAR(72) CONSTANT INIT (' ');
/*
*/
DCL ALIGNC(0:4) CHAR(1) CONSTANT INIT('D','W','H','C','B');
DCL ALIGNM(0:4) UBIN STATIC INIT(8,4,2,1,0);
DCL LENGS(0:63) UBIN STATIC SYMDEF
INIT(0,1,72,36  ,72,72,144,72  ,144,9,9,9  ,9,36,36,0
,0,1,0,1  ,1,9,9,0  ,1,0,9,1   ,36,18,36,9,
         18,36,36,36, 36,36,36,36, 9,9,9,9, 9,9,9,72,
         72,72,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0);
DCL LENGS6(0:63) UBIN CONSTANT SYMDEF
INIT (0,1,32,32, 64,32,64,64, 128,8,8,8, 8,32,32,0,
      0,1,0,1, 1,8,8,0, 1,8,8,1, 32,16,32,8,
         16,32,32,32, 32,32,32,32, 8,8,8,8, 8,8,8,48,
         64,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0);
DCL MOP4 BIT(18) CONSTANT SYMDEF INIT('103322'O); /*MVZB3,MVC2*/
DCL MOP5 BIT(18) CONSTANT SYMDEF INIT('104322'O); /*MVZB4,MVC2*/
/*
*/
 
DCL PAGE#(0:15) SBIN STATIC SYMDEF;
DCL PAGESIZ(0:15) SBIN STATIC SYMDEF;
DCL TOTSIZ(0:15) SBIN STATIC SYMDEF;
DCL PAGE$(0:15) PTR STATIC SYMDEF;
/*
*/
DCL BYTESIZE SBIN STATIC SYMDEF INIT(9);
DCL WORDSIZE SBIN STATIC SYMDEF INIT(36);
DCL LINECNT SBIN STATIC SYMDEF;
DCL LBLOPT BIT(1) STATIC SYMDEF INIT('1'B);
DCL NARROWOPT BIT(1) STATIC SYMDEF INIT('0'B);
DCL PL6OPT BIT(1) STATIC SYMDEF INIT('0'B);
DCL EQUOPT UBIN STATIC SYMDEF INIT(0);
DCL BITOPT UBIN STATIC SYMDEF INIT(0);
DCL MASKOPT UBIN STATIC SYMDEF INIT(0);
/*
*/
DCL TEMPS1 SBIN;
DCL TEMPU1 UBIN;
DCL TEMPU2 UBIN;
DCL DCLNUM SBIN HALF;
DCL FIRSTENT SBIN;
DCL BITNO SBIN;
DCL WORDNO SBIN;
DCL PPFLAG SBIN;
DCL FPFLG SBIN;
DCL DIM SBIN;
DCL ALIGN SBIN;
DCL ALIGNTYP UBIN;
DCL DATATYP UBIN;
DCL LENG SBIN;
DCL DISPBITS UBIN;
DCL BOUNDBITS SBIN;
DCL LVL UBIN;
DCL CLVL UBIN;
DCL BASE SBIN;
DCL ABASE SBIN;
DCL SBASE SBIN;
DCL OCTBIN UBIN;
DCL 1 OCTBINX(0:11) REDEF OCTBIN UBIN(3) UNAL;
DCL 1 HEXBINX(0:8) REDEF OCTBIN UBIN(4) UNAL;
DCL HEXCHARS CHAR(16) CONSTANT INIT('0123456789ABCDEF');
DCL OCTCHAR CHAR(4);
DCL OCTCHARX(0:3) REDEF OCTCHAR CHAR(1);
DCL OCTCHAR5 CHAR(5);
DCL TOTEND UBIN;
/*
*/
DCL LVLI(0:7) SBIN;
DCL LVLS(0:7) SBIN;
DCL LVLD(0:7) SBIN;
DCL LVLA(0:7) SBIN;
DCL LVLO(0:7) SBIN;
DCL LVLNS(0:7) UBIN;
DCL LVLN(0:7) CHAR(30);
/*
*/
/*
*/
%EJECT;
/*
*/
        HKEY.KEYSIZ=OUNAM.CNT+1;
        HKEY.HFLAG='042'O;
        HKEY.TEXT=OUNAM.TXT;
        RDHEAD.V.DCB#=SDCB;
        CALL M$READ(RDHEAD) ALTRET(ERROR);
        RDFPT.V.DCB#=SDCB;
        OUKEY.UTS=HEAD.UTS;
        WORDSIZE = HEAD.WORDSIZE;
        IF WORDSIZE < 36
        THEN
           BYTESIZE = 8;
        IF BF.WDS=0 THEN
           CALL M$GDS(GDSFPT) ALTRET(ERROR);
/**/
        TEMPU1=0;
        DO WHILE (TEMPU1<16);
           PAGE$(TEMPU1)=BF.P$;
           PAGE#(TEMPU1)=512;
           PAGESIZ(TEMPU1)=0;
           TOTSIZ(TEMPU1)=256;
           TEMPU1=TEMPU1+1;
           END;
        PAGESIZ(%TYPLOGBLK)=256;
        CALL GETENT(LGBLKHD$,262144,%TYPLOGBLK);
        PAGESIZ(%TYPLOGBLK)=8;
/*
PAGESIZ(%TYPDNAM)=HEAD.DNAMPSIZ;
TOTSIZ(%TYPDNAM)=HEAD.DNAMSIZ;
PAGESIZ(%TYPRNAM)=HEAD.RNAMPSIZ;
TOTSIZ(%TYPRNAM)=HEAD.RNAMSIZ;
PAGESIZ(TYPENTDEF)=HEAD.ENTDEFPSIZ;
TOTSIZ(TYPENTDEF)=HEAD.ENTDEFSIZ;
PAGESIZ(TYPENTREF)=HEAD.ENTREFPSIZ;
TOTSIZ(TYPENTREF)=HEAD.ENTREFSIZ;
PAGESIZ(TYPSYMDEF)=HEAD.SYMDEFPSIZ;
TOTSIZ(TYPSYMDEF)=HEAD.SYMDEFSIZ;
PAGESIZ(TYPSYMREF)=HEAD.SYMREFPSIZ;
TOTSIZ(TYPSYMREF)=HEAD.SYMREFSIZ;
PAGESIZ(%TYPSEGREF)=HEAD.SEGREFPSIZ;
TOTSIZ(%TYPSEGREF)=HEAD.SEGREFSIZ;
*/
        PAGESIZ(%TYPDBGNAM)=LGBLKHD.NAMPSIZ;
        TOTSIZ(%TYPDBGNAM)=LGBLKHD.NAMESIZ;
/*
PAGESIZ(%TYPEXST)=LGBLKHD.STMNTPSIZ;
TOTSIZ(%TYPEXST)=LGBLKHD.STMNTSIZ;
*/
        PAGESIZ(%TYPVREBL)=LGBLKHD.VREBLPSIZ;
        TOTSIZ(%TYPVREBL)=LGBLKHD.VREBLSIZ;
/*
PAGESIZ(TYPINTRY)=LGBLKHD.INTRYPSIZ;
TOTSIZ(TYPINTRY)=LGBLKHD.INTRYSIZ;
*/
/*
*/
        TEMPS1=0;
        TEMPU1=0;
        DO WHILE (TEMPU1<15);
           PAGE$(TEMPU1+1)=PINCRW(PAGE$(TEMPU1),PAGESIZ(TEMPU1));
           TEMPS1=TEMPS1+PAGESIZ(TEMPU1+1);
           TEMPU1=TEMPU1+1;
           END;
        DO WHILE (TEMPS1>BF.WDS);
           CALL M$GDS(GDSFPT) ALTRET(ERROR);
           END;
%EJECT;
        GOTO DCMN;
DRAWSOU: ENTRY(SDCB,OUNAM,NAMREC,NAMRSIZ) ALTRET;
        PAGE$(%TYPDBGNAM)=ADDR(NAMREC);
        PAGE$(%TYPVREBL)=ADDR(SDCB);
        PAGESIZ(%TYPDBGNAM)=NAMRSIZ;
        TOTSIZ(%TYPDBGNAM)=NAMRSIZ;
        PAGESIZ(%TYPVREBL)=ADDR(OUNAM)->VARSIZ;
        TOTSIZ(%TYPVREBL)=ADDR(OUNAM)->VARSIZ;
        PAGE#(%TYPDBGNAM)=0;
        PAGE#(%TYPVREBL)=0;
DCMN:   ;
        TOTEND=TOTSIZ(%TYPVREBL)/SIZEW(VARENT);
        IF WORDSIZE < 36
        THEN DO;
           DASHES = DASHES6;
           DASHBLANK = DASHBLANK6;
           SUBSTR(HEADLINE.BITS,16,16)=HEADLINE.BITS;
           SUBSTR(ARRAYLINE.OX,1,1)='X';
           ALIGNM(0) = 4;
           ALIGNM(1) = 2;
           LENGS = LENGS6;
           WRDRAW.BUF_.BOUND = SIZEV(DRAWLINE) - 40;
           WRHEAD.BUF_.BOUND = SIZEV(HEADLINE) - 40;
           WRBREAK.BUF_.BOUND = SIZEV(BREAKLINE) - 40;
           END;
        ELSE IF NARROWOPT
        THEN DO;
           WRDRAW.BUF_.BUF$=PINCRC(ADDR(DRAWLINE),SIZEC(DRAWLINE.LVL));
           WRDRAW.BUF_.BOUND=SIZEV(DRAWLINE)-SIZEC(DRAWLINE.LVL);
           WRHEAD.BUF_.BUF$=PINCRC(ADDR(HEADLINE),SIZEC(DRAWLINE.LVL));
           WRHEAD.BUF_.BOUND=SIZEV(HEADLINE)-SIZEC(DRAWLINE.LVL);
           WRBREAK.BUF_.BUF$=PINCRC(ADDR(BREAKLINE),SIZEC(DRAWLINE.LVL));
           WRBREAK.BUF_.BOUND=SIZEV(BREAKLINE)-SIZEC(DRAWLINE.LVL);
           WRARRAY.BUF_.BUF$=PINCRC(ADDR(ARRAYLINE),SIZEC(DRAWLINE.LVL));
           WRARRAY.BUF_.BOUND=SIZEV(ARRAYLINE)-SIZEC(DRAWLINE.LVL);
           END;
/*
*/
        BREAKLINE.BITS=DASHES;
        DCLNUM=0;
NXSTRCT: CALL GETENT(VARENT$,DCLNUM,%TYPVREBL) ALTRET(ENDOU);
        IF VARENT.DATATYP=17 OR VARENT.DATATYP=27 OR VARENT.DATATYP=46
        THEN DO;
/*         IF WORDSIZE = 36
           THEN*/
              SBASE=VARENT.ADR.W*WORDSIZE;
/*         ELSE
              SBASE = BITBIN(VARENT.ADR);*/
           CALL GETENT(DBGNAM$,VARENT.NPOINTER,%TYPDBGNAM) ALTRET(ERROR);
           IF SELNMOPT>0 AND SELNMNAM~=DBGNAM.TEXT THEN DO;
              DCLNUM=DCLNUM+1;
              GOTO NXSTRCT;
              END;
           ALIGNTYP=VARENT.ALIGNTYP;
           CALL INITSTRCT;
%EJECT;
/*
*/
           DO UNTIL (VARENT.LEVEL<=FIRSTENT);
/*         IF WORDSIZE = 36
           THEN*/
              BASE=VARENT.ADR.W*WORDSIZE+VARENT.ADR.C*BYTESIZE+VARENT.ADR.B;
/*         ELSE
              BASE = BITBIN(VARENT.ADR);*/
              LVL=VARENT.LEVEL;
              CALL LVLFX ALTRET(STRCTARRAYOU);
              ALIGNTYP=VARENT.ALIGNTYP;
              ALIGN=ALIGNM(ALIGNTYP)*BYTESIZE;
              IF ALIGN=0 THEN ALIGN=ALIGN+1;
              DATATYP=VARENT.DATATYP;
              IF DATATYP = 46 THEN DATATYP = 27;
              LENG=VARENT.LOGSIZ*LENGS(DATATYP);
              IF VARENT.SZTYP THEN LENG=LENGS(DATATYP);
              DIM=1;
              IF VARENT.ARRAYTYP=1 THEN DIM=VARENT.DIMS;
              CALL DRAWENTRY;
              VARENT$=PINCRW(VARENT$,SIZEW(VARENT));
              IF DCLNUM=TOTEND OR VARENT$=PAGE$(%TYPVREBL+1) THEN
STRCTARRAYOU:    CALL GETENT(VARENT$,DCLNUM,%TYPVREBL) ALTRET(ENDSTRCTOU);
              CALL GETENT(DBGNAM$,VARENT.NPOINTER,%TYPDBGNAM) ALTRET(ERROR);
              END;
ENDSTRCTOU: LVL=FIRSTENT;
           CALL LVLFX ALTRET(STRCTARRAYOU);
           END;
        ELSE DCLNUM=DCLNUM+1;
        GOTO NXSTRCT;
ENDOU:  RETURN;
%EJECT;
INITSTRCT:PROC;
        STRCTLINE.NAM=DBGNAM.TEXT;
        FPFLG=1000000;
        DRAWLINE.LVL=' ';
        BITNO=0;
        ABASE=0;
        CLVL=1;
        FIRSTENT=VARENT.LEVEL;
        RETURN;
END INITSTRCT;
%EJECT;
DRAWENTRY:PROC;
DCL TBASE SBIN;
        WORDNO = BITNO / WORDSIZE;
        TBASE=BASE-SBASE+ABASE;
        IF NOT TBASE = BITNO
        THEN IF TBASE < BITNO OR TBASE/WORDSIZE > WORDNO
           THEN DO;
              CALL PPRINT;
              BITNO=TBASE;
              CALL INITPICT;
              END;
           ELSE DO;
              TEMPS1 = 2*MOD(TBASE,WORDSIZE) - 2*MOD(BITNO,WORDSIZE);
              CALL CONCAT(SUBSTR(DRAWLINE.LINE,2*MOD(BITNO,WORDSIZE),TEMPS1),SUBSTR(DOTS,0,TEMPS1-1),'!');
              BITNO = TBASE;
              END;
        BOUNDBITS=ALIGN;
        CALL BOUND;
        IF EQUOPT >= LVL
        THEN DO;
         CALL EQUBLD ('  ' , BITNO / WORDSIZE);
            END;
         ELSE
            IF BITOPT >= LVL
            THEN
               CALL EQUBLD ('  ' , BITNO);
         IF MASKOPT >= LVL
         THEN DO;
            TEMPU1 = MOD (BITNO , WORDSIZE);
            IF TEMPU1 + LENG <= WORDSIZE
            THEN DO;
               DISPBITS = 0;
               TEMPU2 = 1;
               DO TEMPS1 = WORDSIZE - 1 DOWNTO TEMPU1 + LENG;
                  TEMPU2 = TEMPU2 * 2;
                  END;
               DO TEMPS1 = TEMPU1 + LENG - 1 DOWNTO TEMPU1;
                  DISPBITS = DISPBITS + TEMPU2;
                  TEMPU2 = TEMPU2 * 2;
                  END;
               CALL EQUBLD ('M#' , DISPBITS);
               END;
         END;
        IF DATATYP=17 OR DATATYP=27
        THEN DO;
           LVLO(LVL)=BITNO;
           LVLD(LVL)=DIM;
           LVLA(LVL)=ALIGN;
           TEMPS1=MOD(LENG,ALIGN);
           IF TEMPS1~=0 THEN LENG=LENG+ALIGN-TEMPS1;
           LVLS(LVL)=LENG;
           LVLI(LVL)=DCLNUM;
           CALL PPRINT;
           SUBSTR(DRAWLINE.LINE,2*WORDSIZE,1)=ALIGNC(ALIGNTYP);
           IF LVL<5 AND LVL>1 THEN
              DRAWLINE.LVLN(LVL-2)=DBGNAM.TEXT;
           END;
/*
*/
        ELSE DO;
ITEMARRAY: DISPBITS=LENG;
           CALL DISP;
           BOUNDBITS=ALIGN;
           CALL BOUND;
           IF DIM>1
           THEN DO;
              IF DIM*LENG>4*WORDSIZE
              THEN DO;
                 TEMPS1=MOD(LENG,ALIGN);
                 IF TEMPS1~=0 THEN LENG=LENG+ALIGN-TEMPS1;
                 CALL PPRINT;
                 CALL PLINE(-1,DIM);
                 BITNO=BITNO+(DIM-1)*LENG;
                 CALL INITPICT;
                 END;
              ELSE DO;
                 DIM=DIM-1;
                 GOTO ITEMARRAY;
                 END;
              END;
           END;
        DCLNUM=DCLNUM+1;
        RETURN;
END DRAWENTRY;
%EJECT;
EQUBLD:  PROC (SUF , VAL);
DCL SUF CHAR(2);
DCL VAL UBIN;
           LVLN (LVL) = DBGNAM.TEXT;
           LVLNS (LVL) = DBGNAM.COUNT;
         IF PL6OPT
         THEN DO;
            SUBSTR (EQULINE , 0 , 5) = '%EQU';
            TEMPS1 = 5;
            END;
         ELSE
              TEMPS1 = 0;
           DO TEMPU1 = 1 TO LVL;
              IF TEMPU1<LVL AND LVLD(TEMPU1)>1 THEN RETURN;
/* Only put out the last of an array of structures */
              IF TEMPU1 ~= 1
              THEN DO;
                 SUBSTR (EQULINE,TEMPS1,1) = '_';
                 TEMPS1 = TEMPS1 + 1;
                 END;
              SUBSTR (EQULINE,TEMPS1) = LVLN (TEMPU1);
              TEMPS1 = TEMPS1 + LVLNS (TEMPU1);
              END;
         IF PL6OPT AND TEMPS1>35
         THEN DO;
            TEMPS1 = 35;
            SUBSTR (EQULINE,TEMPS1) = ' ';
            END;
           SUBSTR (EQULINE,TEMPS1,1) = '#';
         IF SUF ~= ' '
         THEN DO;
            SUBSTR (EQULINE , TEMPS1 + 1 , 2) = SUF;
            TEMPS1 = TEMPS1 + 2;
            END;
           IF TEMPS1 < 20
           THEN
              TEMPS1 = 20;
         IF PL6OPT
         THEN
            SUBSTR (EQULINE , TEMPS1 + 1 , 5) = '  =';
         ELSE
           SUBSTR (EQULINE,TEMPS1+1,5) = ' EQU ';
         IF PL6OPT AND SUF ~= '  '
         THEN DO;
            SUBSTR (EQULINE , TEMPS1 + 6 , 1) ='''';
            TEMPU2 = VAL;
            DO TEMPU1 = 4 DOWNTO 1;
               SUBSTR (EQULINE , TEMPS1 + 6 + TEMPU1 , 1) = SUBSTR (HEXCHARS , MOD(TEMPU2,16) , 1);
               TEMPU2 = TEMPU2 / 16;
               END;
            SUBSTR (EQULINE , TEMPS1 + 11 , 3) = '''X;';
            END;
         ELSE DO;
           CALL BINCHAR (OCTCHAR5 , VAL);
           CALL EDITCHAR (SUBSTR (EQULINE,TEMPS1+6,5) , 0 , 5 , MOP5 , OCTCHAR5);
               IF PL6OPT
               THEN
                  SUBSTR (EQULINE , TEMPS1 + 11 , 1) = ';';
               END;
           WREQU.BUF_.BOUND = TEMPS1 + 15;
           IF DBGNAM.TEXT ~= '*'
           THEN
              CALL M$WRITE (WREQU);
END EQUBLD;
%EJECT;
INITPICT:PROC;
        TEMPS1=MOD(BITNO,WORDSIZE)*2;
        IF TEMPS1=0
        THEN
           DRAWLINE.LINE=' ';
        ELSE DO;
           TEMPS1=TEMPS1-1;
           CALL CONCAT(SUBSTR(DRAWLINE.LINE,0,WORDSIZE*2),SUBSTR(DOTS,0,TEMPS1),'!');
           END;
        RETURN;
END INITPICT;
%EJECT;
PPRINT: PROC;
        TEMPS1=MOD(BITNO,WORDSIZE)*2;
        IF PPFLAG~=0 OR TEMPS1=0 THEN RETURN;
        CALL INSERT(DRAWLINE.LINE,TEMPS1,2*WORDSIZE-1-TEMPS1,DOTS);
        CALL PLINE(0,0);
        CALL INITPICT;
        RETURN;
END PPRINT;
%EJECT;
PLINE:  PROC(BS,BE);
DCL BS SBIN;
DCL BE SBIN;
DCL BSX SBIN;
DCL BEX SBIN;
        PPFLAG=PPFLAG+1;
        IF FPFLG>=LINECNT
        THEN DO;
           CALL M$WRITE(TOF);
           CALL M$WRITE(WRSTRCT);
           CALL M$WRITE(WRHEAD);
           CALL M$WRITE(WRBREAK);
           FPFLG=0;
           END;
        IF BS<0
        THEN DO;
           OCTBIN=BE;
           CALL CVTOCT;
           SUBSTR (ARRAYLINE.SIZE,1,4) = OCTCHAR;
           SUBSTR (ARRAYLINE.SIZE,0,1) = ' ';
           SUBSTR (ARRAYLINE.SIZE,TEMPS1,1) = '''';
           CALL M$WRITE (WRARRAY);
           END;
        ELSE DO;
           BEX = MINIMUM (BE , 2*WORDSIZE);
           BSX = MINIMUM (BS , BEX);
           OCTBIN=WORDNO;
           CALL CVTOCT;
           SUBSTR (DRAWLINE.LOC,0,4) = OCTCHAR;
           CALL INSERT(DRAWLINE.LINE,WORDSIZE*2-1,1,'!');
           IF WORDSIZE = 36 AND NARROWOPT AND (DRAWLINE.LVL~=' ') AND (DRAWLINE.LVL~=OLDLVL)
           THEN DO;
              FPFLG=FPFLG+1;
              IF LBLOPT
              THEN
                 IF DRAWLINE.LVLN(0)=' '
                 THEN
                    CALL CONCAT(LVLINE.LVLS,'@=',DRAWLINE.LVLN(2));
                 ELSE
                    IF DRAWLINE.LVLN(1)=' '
                    THEN
                       IF DRAWLINE.LVLN(2)=' '
                       THEN
L2ONLY:                   CALL CONCAT(LVLINE.LVLS,'LVL2=',DRAWLINE.LVLN(0));
                       ELSE
                          CALL CONCAT(LVLINE.LVLS,'LVL2=',DRAWLINE.LVLN(0),
                            '  @=',DRAWLINE.LVLN(2));
                    ELSE
                       IF DRAWLINE.LVLN(2)=' '
                       THEN
L2L3ONLY:                 CALL CONCAT(LVLINE.LVLS,'LVL2=',DRAWLINE.LVLN(0),
                            '  LVL3=',DRAWLINE.LVLN(1));
                       ELSE
                          CALL CONCAT(LVLINE.LVLS,'LVL2=',DRAWLINE.LVLN(0),
                            '  LVL3=',DRAWLINE.LVLN(1),'  @=',DRAWLINE.LVLN(2));
              ELSE
                 IF DRAWLINE.LVLN(1)=' '
                 THEN
                    GOTO L2ONLY;
                 ELSE
                    IF DRAWLINE.LVLN(2)=' '
                    THEN
                       GOTO L2L3ONLY;
                    ELSE
                       CALL CONCAT(LVLINE.LVLS,'LVL2=',DRAWLINE.LVLN(0),
                         '  LVL3=',DRAWLINE.LVLN(1),'  LVL4=',DRAWLINE.LVLN(2));
              CALL M$WRITE(WRLVLS);
              END;
           CALL M$WRITE(WRDRAW);
           SUBSTR(DRAWLINE.LINE,2*WORDSIZE,1)=' ';
           CALL INSERT(BREAKLINE.BITS,0,BSX,DASHES);
           CALL INSERT(BREAKLINE.BITS,BSX,BEX-BSX,DASHBLANK);
           CALL INSERT(BREAKLINE.BITS,BEX,WORDSIZE*2-BEX,DASHES);
           END;
        CALL M$WRITE(WRBREAK);
        IF LBLOPT THEN DRAWLINE.LVLN(2)=' ';
        FPFLG=FPFLG+2;
        IF NARROWOPT AND NOT WORDSIZE<36 THEN OLDLVL=DRAWLINE.LVL;
        RETURN;
END PLINE;
%EJECT;
CVTOCT: PROC;
        OCTCHAR=' ';
        TEMPS1=4;
        DO UNTIL TEMPS1=0;
           TEMPS1=TEMPS1-1;
           IF WORDSIZE=36
           THEN DO;
              OCTCHARX(TEMPS1)=BINASC(OCTBINX(11)+ASCBIN('0'));
              OCTBIN=OCTBIN/8;
              END;
           ELSE DO;
              OCTCHARX(TEMPS1)=SUBSTR(HEXCHARS,HEXBINX(8),1);
              OCTBIN=OCTBIN/16;
              END;
           IF OCTBIN=0 THEN EXIT;
           END;
        RETURN;
END CVTOCT;
%EJECT;
DISP:   PROC;
DCL FILL$ PTR;
DCL FILL CHAR(72) BASED(FILL$);
DCL BT SBIN;
DCL BS SBIN;
        FILL$=ADDR(BLANKS);
        GOTO DISP1;
BOUND:  ENTRY;
        DISPBITS=MOD(BITNO,BOUNDBITS);
        IF DISPBITS=0 THEN RETURN;
        DISPBITS=BOUNDBITS-DISPBITS;
        FILL$=ADDR(SHARPS);
DISP1:  PPFLAG=0;
        BT=MOD(BITNO,WORDSIZE)*2;
        IF FILL$=ADDR(BLANKS)
        THEN DO;
           IF LBLOPT    AND DBGNAM.COUNT>=DISPBITS*2
           THEN DO;
              IF DRAWLINE.LVLN(2)~=' ' AND DRAWLINE.LVLN(2)~=DBGNAM.TEXT
              THEN DO;
                 CALL PPRINT;
                 PPFLAG=0;
                 END;
              DRAWLINE.LVLN(2)=DBGNAM.TEXT;
              CALL INSERT(DRAWLINE.LINE,BT,1,'@');
              END;
           ELSE SUBSTR(DRAWLINE.LINE,BT,2*WORDSIZE-BT)=DBGNAM.TEXT;
           END;
        ELSE SUBSTR(DRAWLINE.LINE,BT,2*WORDSIZE-BT)=FILL;
/*
*/
        WORDNO=BITNO/WORDSIZE;
        BITNO=BITNO+DISPBITS;
        BS=BT+2*DISPBITS;
        DO WHILE (BS>2*WORDSIZE-1);
           BS=BS-WORDSIZE*2;
           CALL PLINE(BT,BS);
           WORDNO=WORDNO+1;
           BT=0;
           SUBSTR(DRAWLINE.LINE,0,2*WORDSIZE)=FILL;
           END;
        IF BS=0 THEN RETURN;
        CALL INSERT(DRAWLINE.LINE,BS-1,1,'!');
        PPFLAG=0;
        RETURN;
END DISP;
%EJECT;
LVLFX:  PROC ALTRET;
DCL TEMPU1 UBIN;
        DO WHILE (LVL<CLVL);
           CLVL=CLVL-1;
           BOUNDBITS=LVLA(CLVL);
           CALL BOUND;
           IF LVLD(CLVL)>1
           THEN DO;
              IF LVLS(CLVL)*LVLD(CLVL)>4*WORDSIZE
              THEN DO;
                 CALL PPRINT;
                 CALL PLINE(-1,LVLD(CLVL));
                 BITNO=LVLO(CLVL)+LVLS(CLVL)*LVLD(CLVL);
                 CALL INITPICT;
                 END;
              ELSE DO;
                 LVLD(CLVL)=LVLD(CLVL)-1;
                 ABASE=ABASE+LVLS(CLVL);
                 DCLNUM=LVLI(CLVL)+1;
                 ALTRETURN;
                 END;
              END;
           ELSE DO;
              TEMPU1=1;
              DO WHILE (TEMPU1<CLVL);
                 IF LVLD(TEMPU1)>1 THEN GOTO LVLFX1;
                 TEMPU1=TEMPU1+1;
                 END;
              ABASE=0;
LVLFX1:       CALL PPRINT;
              END;
           IF CLVL<5 AND CLVL>1 THEN
              DRAWLINE.LVLN(CLVL-2)=BLANKS;
           END;
        CLVL=LVL;
        RETURN;
END LVLFX;
%EJECT;
GETENT: PROC(ENT$,ENTC,TYPE#) ALTRET;
DCL ENT$ PTR;
DCL 1 ENTC CHAR(2);
DCL TYPE# UBIN;
DCL TEMPC CHAR(2);
DCL TEMPS REDEF TEMPC UBIN HALF UNAL;
DCL ENTSIZ(0:15) UBIN CONSTANT INIT(0,1,1,2,2,1,2,1,0,1,0,4,2,3,5,1);
        TEMPC=ENTC;
        TEMPS=TEMPS*ENTSIZ(TYPE#);
        IF TEMPS>=TOTSIZ(TYPE#) THEN ALTRETURN;
        ENT$=PINCRW(PAGE$(TYPE#),MOD(TEMPS,PAGESIZ(TYPE#)));
        OUKEY.PAGE=TEMPS/PAGESIZ(TYPE#);
        IF OUKEY.PAGE = PAGE#(TYPE#) THEN RETURN;
        PAGE#(TYPE#)=OUKEY.PAGE;
        OUKEY.TYPE=TYPE#;
        RDFPT.BUF_.BUF$=PAGE$(TYPE#);
        RDFPT.BUF_.BOUND=PAGESIZ(TYPE#)*4-1;
        CALL M$READ(RDFPT) ALTRET(ERROR);
        RETURN;
ERROR:  ALTRETURN;
END GETENT;
%EJECT;
ERROR:  ;
/*
*/
        ALTRETURN;
END DRAWOU;
