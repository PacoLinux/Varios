VERSION E05

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:1    
        1        1        /*M* VXT$FIMAGE - TO PERFORM IMAGE FORMATION FROM OBJECT UNITS AND PROCESS DEBUG REC
                 1        ORDS*/
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=4,IND=3,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC     */
        8        8        /*F* NAME:        VXT$FIMAGE
        9        9        PURPOSE:     To perform image formation from object units and process debug records.
       10       10        Description:
       11       11        VXT$FIMAGE is entered once per object unit during pass 2. A keyed read is first
       12       12        performed to position the object file to the correct object unit for program/
       13       13        relocation records(type 10). Subsequent reads are sequential. Upon the successful
       14       14        completion of the read the decoded key variables are interrogated to determine
       15       15        which type of record was read. If it is a type 10 record then the sub-type
       16       16        variable is interrogated to determine whether it is a text record of a
       17       17        relocation record.  If it is a debug record (types 11-15) then if debug records
       18       18        are requested in the run unit, they are processed.
       19       19        Program records which are text are merely set up within the image formation
       20       20        buffers and moved into placed. Relocation records are processed by setting up
       21       21        the relocation item within the image formation buffers and appling the specified
       22       22        relocation operations to the item. Many range, integrity, and consistency checks
       23       23        are performed during all types of processing.
       24       24                                                                        */
       25       25
       26       26        VXT$FIMAGE: PROC;
       27       27
       28       28        %INCLUDE VX_INC_C;
       29    10744        %INCLUDE B_SEGIDS_C;
       30    11283        %SET LISTMAC='1'B;
       31    11284        %SET LISTSUB='1'B;
       32    11285        %SET LISTEXP='1'B;
       33    11286        %BANNER( ARG=SUBS );
             11287        %LSET LISTDIR='0'B;

             11294    1   /*******************************************************************************
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:2    
             11295    1   *                                                                              *
             11296    1   *                          SUBS                                                 *
             11297    1   *                                                                              *
             11298    1   *******************************************************************************/

       34    11302        %B$RELOCSUBS;
             11303        %EQU OPERSECT=1 ;
             11304        %EQU OPEREREF=2 ;
             11305        %EQU OPERSREF=3 ;
             11306        %EQU OPERCONST=4 ;
             11307        %EQU OPERSEGID=5 ;
             11308        %EQU OPERSEGREF=6 ;
             11309        %EQU OPERFREF=15 ;
             11310        %EQU FIELDLH=0 ;
             11311        %EQU FIELDRH=1 ;
             11312        %EQU FIELDSEGID=2 ;
             11313        %EQU FIELDY=3 ;
             11314        %EQU FIELDLAF=3 ;
             11315        %EQU FIELDWORD=4 ;
             11316        %EQU EVALOPIGNORE=0 ;                   /* Value not present, r = E(operand)  */
             11317        %EQU EVALOPADD=1 ;                      /* Add: r = E(operand) + Value  */
             11318        %EQU EVALOPSUB=2 ;                      /* Subtract: r = E(operand) - Value */
             11319        %EQU EVALOPMULT=3 ;                     /* Multiply: r = E(operand) * Value */
             11320        %EQU EVALOPDIV=4 ;                      /* Divide:   r = E(operand) / Value */
             11321        %EQU EVALOPSHFTR=5 ;               /* Shift right: r = E(operand) SR by Value */
             11322        %EQU EVALOPSHFTL=6 ;               /* Shift left:  r = E(operand) SL by Value */
             11323        %EQU EVALOPRPT=7 ;       /* Operand is a repeat count. Repeat Value n times*/
             11324        %EQU EVALOPFREF=8 ;
             11325        %EQU RELOCOPADD=1 ;
             11326        %EQU RELOCOPSUB=2 ;
             11327        %EQU RELOCOPMULT=3 ;
             11328        %EQU RELOCOPDIV=4 ;
             11329        %EQU RELOCOPSTORER=14 ;
             11330        %EQU RELOCOPSTOREL=15 ;
       35    11332        %B$RECORDSUBS;
             11333        %EQU TYPHEAD=0 ;
             11334        %EQU TYPDNAM=1 ;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:3    
             11335        %EQU TYPRNAM=2 ;
             11336        %EQU TYPSECT=3 ;
             11337        %EQU TYPEDEF=4 ;
             11338        %EQU TYPEREF=5 ;
             11339        %EQU TYPSDEF=6 ;
             11340        %EQU TYPSREF=7 ;
             11341        %EQU TYPSEGDEF=8 ;
             11342        %EQU TYPSEGREF=9 ;
             11343        %EQU TYPPROG=10 ;
             11344        %EQU SUBTYPPROG=0 ;
             11345        %EQU SUBTYPREL=1 ;
             11346        %EQU TYPLOGBLK=11 ;
             11347        %EQU TYPINTNTRY=12 ;
             11348        %EQU TYPEXST=13 ;
             11349        %EQU TYPVREBL=14 ;
             11350        %EQU TYPDBGNAM=15 ;
             11351        %EQU TYPLV1LB=16 ;
             11352        %EQU TYPLV1=17 ;
             11353        %EQU TYPDATASEG=18 ;
             11354        %EQU TYPRUM=20 ;
             11355        %EQU TYPBIRTH=21 ;
             11356        %EQU TYPPLOVER=22 ;
             11357        %EQU TYPCOMPID=23 ;
             11358        %EQU TYPROS=30 ;
       36    11360        %B$SECTIONSUBS;
             11361        %EQU DATASECTION=0 ;
             11362        %EQU CODESECTION=1 ;
             11363        %EQU UCOMSECTION=2 ;
             11364        %EQU RLCOMSECTION=3 ;
             11365        %EQU LCOMSECTION=4 ;
             11366        %EQU DCBSECTION=5 ;
             11367        %EQU ROSECTION=6 ;
             11368        %EQU RORLCOMSECTION=7 ;
             11369        %EQU ROLCOMSECTION=8 ;
             11370        %EQU EVENBOUNDSECTION=0 ;
             11371        %EQU ODDBOUNDSECTION=1 ;
             11372        %EQU EIGHTBOUNDSECTION=2 ;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:4    
             11373        %EQU PAGEBOUNDSECTION=3 ;
       37    11375        %BANNER(ARG=B$DNAME );
             11376        %LSET LISTDIR='0'B;

             11383    1   /*******************************************************************************
             11384    1   *                                                                              *
             11385    1   *                          B$DNAME                                                 *
             11386    1   *                                                                              *
             11387    1   *******************************************************************************/

       38    11391        %B$DNAME( NAME=B$DNAME, STCLASS=BASED );
             11392            %LSET STR='BASED        ';
             11393            %IF
             11394                '0'B;
             11396            %ELSE;
             11397                %LSET INIT=/*;
             11398            %ENDIF;
             11399    1   DCL 1 B$DNAME BASED ALIGNED,
             11400    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
             11401                /*K*  COUNT is the number of characters in the name */
             11402            %IF
             11403                '0'B;
             11406            %ELSE;
             11407    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;
             11408            %ENDIF;
       39    11410        %VX$SC;
             11411        %LSET LISTDIR='0'B;

             11423    1   /*******************************************************************************
             11424    1   *                                                                              *
             11425    1   *                          VX$SC                                                 *
             11426    1   *                                                                              *
             11427    1   *******************************************************************************/

             11432    1   DCL 1 VX$SC BASED ALIGNED,
             11433    1         2 SEG UBIN(3) UNAL,
             11434                /*K*  SEG - The segment number of this section */
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:5    
             11435    1         2 TYPE UBIN(6) UNAL,
             11436                /*K*  TYPE -
             11437                      Type code      Section type
             11438                      ---------      ------------
             11439                          0          Data control section with write access.
             11440                          1          Procedure control section.
             11441                          2          Unlabeled common, name pointer must be zero.
             11442                          3          Labeled common, with mandatory name pointer.
             11443                                     This is for labeled common which must be
             11444                                     in the root.
             11445                          4          Labeled common, with mandatory name pointer.
             11446                                     This is for labeled common which need not
             11447                                     be in the root.
             11448                          5          DCB, word 1 is name pointer.
             11449                          6          Data control section with read only access,
             11450                                     word 1 = 0 or name pointer.      */
             11451    1         2 EMPTY BIT(1) UNAL,
             11452                /*K*  EMPTY is the empty bit.  This bit is set if the control
             11453                      section is of size zero.  */
             11454    1         2 ATTR UNAL,
             11455    1           3 INT  UBIN(2) UNAL,
             11456                  /*K*  INT is the Section initialization.  */
             11457    1           3 SEGMENT BIT(1) UNAL,
             11458                  /*K* SEGMENT is set if the Section is defined in a data
             11459                       segment.  */
             11460    1           3 ALL BIT(1) UNAL,
             11461                  /*K*  ALL is set if the Section is allocated.  */
             11462    1           3 PRE_DCB BIT(1) UNAL,
             11463                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
             11464    1           3 MES_INIT BIT(1) UNAL,
             11465    1           3 ALIGN UBIN(2) UNAL,
             11466                  /*K*  ALIGN is the Section alignment.  */
             11467    1         2 ADDRESS UBIN HALF UNAL,
             11468                /*K*  ADDRESS is the address within the Instruction Segment of
             11469                      the entry point of the external procedure.  */
             11470    1         2 NAME_DISP SBIN HALF UNAL,
             11471                /*K*  NAME_DISP is the Name index.  */
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:6    
             11472    1         2 SIZE UBIN HALF UNAL,
             11473                /*K*  SIZE is the size, in words, of the section.  */
             11474    1         2 NODE# UBIN HALF UNAL,
             11475                /*K*  NODE# is the Node number of section.  */
             11476    1         2 COM_LINK UBIN HALF UNAL;
             11477                /*K*  COM_LINK is used internally by linker to link common sections */

             11487    1   /*******************************************************************************
             11488    1   *                                                                              *
             11489    1   *                          VX$SECT                                                 *
             11490    1   *                                                                              *
             11491    1   *******************************************************************************/

             11496    1   DCL 1 VX$SECT BASED ALIGNED,
             11497    1         2 TYPE UBIN BYTE UNAL,
             11498                /*K*  TYPE -
             11499                      Type code      Section type
             11500                      ---------      ------------
             11501                          0          Data control section with write access.
             11502                          1          Procedure control section.
             11503                          2          Unlabeled common, name pointer must be zero.
             11504                          3          Labeled common, with mandatory name pointer.
             11505                                     This is for labeled common which must be
             11506                                     in the root.
             11507                          4          Labeled common, with mandatory name pointer.
             11508                                     This is for labeled common which need not
             11509                                     be in the root.
             11510                          5          DCB, word 1 is name pointer.
             11511                          6          Data control section with read only access,
             11512                                     word 1 = 0 or name pointer.
             11513                          7          Constant labeled common, with mandatory name pointer.
             11514                                     This is for labeled common which must be
             11515                                     in the root.
             11516                          8          Constant labeled common, with mandatory name pointer.
             11517                                     This is for labeled common which need not
             11518                                     be in the root.                        */
             11519    1         2 * BIT(1),
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:7    
             11520                /*K*  * is reserved for future use and must be zero. */
             11521    1         2 INITZERO BIT(1),
             11522                /*K*  INITZERO - if 1, initialize with zero.  */
             11523    1         2 INITUTS BIT(1),
             11524                /*K*  INITUTS - if 1, initialize with UTS.  */
             11525    1         2 SEGMENT BIT(1),
             11526                /*K*  SEGMENT - if 1, specifies that this section is
             11527                                to be placed in the segment specified by
             11528                                SEG_NPOINTER.  */
             11529    1         2 * BIT(3),
             11530                /*K*  * is reserved for future use and must be zero. */
             11531    1         2 BOUND UBIN(2) UNAL,
             11532                /*K*  BOUND - bits 6-7 - defines starting location.
             11533                              00 - starts on even word
             11534                              01 - starts on odd word
             11535                              10 - starts on multiple of 8
             11536                              11 - starts on page boundary     */
             11537    1         2 SIZE UBIN HALF UNAL,
             11538                /*K*  SIZE is the size, in words, of the section.  */
             11539    1         2 NPOINTER SBIN HALF UNAL,
             11540                /*K*  NPOINTER is the word displacement into the name record
             11541                      (TYPE 1) locating the name of this section.  If the
             11542                      field is negative, the section has no name.  */
             11543    1         2 MBZ UBIN HALF UNAL,
             11544                /*K*  MBZ is reserved for future expansion and must be zero. */
             11545    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             11546                /*K*  SEG_NPOINTER locates a name in the Definition Names
             11547                      Section.  The name must be a valid segment name
             11548                      recognized by the linker.  */
             11549    1         2 G66 REDEF MBZ,
             11550                /*K*  G66 is not used on CP-6. */
             11551    1           3 * BIT(9),
             11552    1           3 NSAB BIT(9);
       40    11555        %VX$LLIST;
             11556        %LSET LISTDIR='0'B;

             11567    1   /*******************************************************************************
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:8    
             11568    1   *                                                                              *
             11569    1   *                          VX$LLIST                                                *
             11570    1   *                                                                              *
             11571    1   *******************************************************************************/

             11576    1   DCL 1 VX$LLIST                BASED     ALIGNED,
             11577    1         2 LINK$                  PTR  ALIGNED,
             11578    1         2 ITEM$                  PTR  ALIGNED;
       41    11581        %VX$NODE;
             11582        %LSET LISTDIR='0'B;

             11593    1   /*******************************************************************************
             11594    1   *                                                                              *
             11595    1   *                          VX$NODE                                                 *
             11596    1   *                                                                              *
             11597    1   *******************************************************************************/

             11613    1   DCL 1 VX$NODE      ALIGNED    BASED,
             11614    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             11615    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             11616    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             11617    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             11618    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             11619                              to list of file nodes for this node            */
             11620    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             11621    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             11621                  /* Head pointer to shared library list */
             11622    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             11622                  /* Head pointer to list of shared libraries
             11623                                          which have been mapped to included libraries */
             11624    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             11625    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             11626    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             11627    1         2 ADDR_START REDEF  ADDR_START_A,
             11628    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             11629    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             11630    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:9    
             11631    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             11632    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             11633    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             11634    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             11635    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             11636    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             11637    1         2 START_PAGE# REDEF START_PAGE#_A,
             11638    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             11639    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             11640    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             11641    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             11642    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             11643    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             11644    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             11645    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             11646    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             11646                  /* Starting pointer for common sections for this node */
             11647    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             11647                  /* Stopping pointer for common sections for this node */
             11648    1         2 L_START,
             11649    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             11650    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             11651    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             11652    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             11653    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             11654    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             11655    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             11656    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             11657    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             11658    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             11659    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             11660    1         2 L_STOP,
             11661    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             11662    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             11663    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             11664    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             11665    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:10   
             11666    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             11667    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             11668    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             11669    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             11670    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             11671    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             11672    1         2 L_SIZE,
             11673    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             11674    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             11675    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             11676    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             11677    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             11678    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             11679    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             11680    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             11681    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             11682    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             11683    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             11684    1         2 L_PREV_SIZE,
             11685    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             11686    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             11687    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             11688    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             11689    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             11690    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             11691    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             11692    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             11693    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             11694    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             11695    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             11696    1         2 BIT_MAP                ALIGNED,
             11697    1           3 DATA                  ALIGNED,
             11698    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             11699    1           3 RPROC                 ALIGNED,
             11700    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             11701    1           3 ROS                   ALIGNED,
             11702    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:11   
             11703    1         2 L_SC_START,
             11704    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             11705    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             11706    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             11707    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             11708    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             11709    1         2 L_SC_STOP,
             11710    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             11711    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             11712    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             11713    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             11714    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             11715    1         2 PROMOTE_HEAD,
             11716    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             11717    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             11718    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             11719    1         2 PROMOTE_TAIL,
             11720    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             11721    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             11722    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             11723    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             11724    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             11725    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             11726    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             11727    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       42    11731        %VXR$TMPLT;
             11732        %LSET LISTDIR='0'B;

             11744    1   /*******************************************************************************
             11745    1   *                                                                              *
             11746    1   *                          VXR$TMPLT                                               *
             11747    1   *                                                                              *
             11748    1   *******************************************************************************/

             11753    1   DCL 1 VXR$TMPLT BASED ALIGNED,
             11754    1         2 NPOINTER SBIN HALF UNAL,
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:12   
             11755                /*K*  NPOINTER is the word index to the symbol name.  */
             11756    1         2 SREF BIT(1) UNAL,
             11757                /*K*  SREF is set is this is a secondary reference.  */
             11758    1         2 READ_ONLY BIT(1) UNAL,
             11759    1         2 GOT BIT(1) UNAL,
             11760                /*K*  GOT is set if got the OU name displacement.  */
             11761    1         2 STATE REDEF GOT BIT(1) UNAL,
             11762    1         2 OPOINTER UBIN(15) UNAL;
             11763                /*K*  OPOINTER is the word index to the OU name.  */

             11785    1   /*******************************************************************************
             11786    1   *                                                                              *
             11787    1   *                          VXR$SAT                                                 *
             11788    1   *                                                                              *
             11789    1   *******************************************************************************/

             11793    1   DCL 1 VXR$SAT                 ALIGNED   BASED,
             11794    1         2 VALUE        UBIN(36)  ALIGNED,
             11795    1         2 SEG   REDEF  VALUE,
             11796    1           3 OFFSET     UBIN(18)  UNAL,
             11797    1           3 *          BIT(6)    UNAL,
             11798    1           3 SEGID      UBIN(12)  UNAL,
             11799    1         2 BELOW        BIT(1)    UNAL,
             11800    1         2 *            BIT(17)   UNAL,
             11801    1         2 NODE#        UBIN(18)  UNAL;
       43    11803        %VX$WORD;
             11804        %LSET LISTDIR='0'B;

             11815    1   /*******************************************************************************
             11816    1   *                                                                              *
             11817    1   *                          VX$WORD                                                 *
             11818    1   *                                                                              *
             11819    1   *******************************************************************************/

             11824    1   DCL VX$WORD_A(0:0)       UBIN(36) ALIGNED    BASED;
             11825    1   DCL VX$HALF_A(0:0)       UBIN(18) HALIGNED   BASED;
             11826    1   DCL VX$BYTE_A(0:0)       UBIN( 9) CALIGNED   BASED;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:13   
             11827    1   DCL VX$CHAR_A(0:0)       CHAR( 1) UNAL       BASED;
             11828        /**/
             11829    1   DCL VX$WORD_SBIN_A(0:0)  SBIN WORD ALIGNED   BASED;
             11830    1   DCL VX$HALF_SBIN_A(0:0)  SBIN HALF HALIGNED  BASED;
             11831    1   DCL VX$BYTE_SBIN_A(0:0)  SBIN HALF CALIGNED  BASED;
             11832    1   DCL VX$BIT_A(0:0)        BIT(36)   ALIGNED   BASED;
       44    11835        %B;
             11836        %LSET LISTDIR='0'B;

             11843    1   /*******************************************************************************
             11844    1   *                                                                              *
             11845    1   *                          BIT                                                 *
             11846    1   *                                                                              *
             11847    1   *******************************************************************************/

       45    11851    1   DCL FIRST           BIT(1)    ALIGNED   AUTO;
       46    11852    1   DCL DESCENDANT      BIT(1)    ALIGNED   AUTO;
       47    11853    1   DCL CHECK_OVERLAY   BIT(1)    ALIGNED   AUTO;
       48    11854        %E;
             11855        %LSET LISTDIR='0'B;

             11862    1   /*******************************************************************************
             11863    1   *                                                                              *
             11864    1   *                          ENTRY                                                 *
             11865    1   *                                                                              *
             11866    1   *******************************************************************************/

       49    11870        %ENTRIES;
             11871    1   DCL VXE$ERROR       ENTRY(4);
             11872    1   DCL VXE$ERR         ENTRY(3);
             11873    1   DCL VXE$MERC        ENTRY;
             11874    1   DCL VXE$ERRMSG      ENTRY(3);
             11875    1   DCL VXR$READ        ENTRY( 3 );
             11876    1   DCL VXW$WRITE       ENTRY( 3 );
             11877    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             11878    1   DCL VXD$B2C         ENTRY( 5 );
             11879    1   DCL VXD$C2B         ENTRY( 3 );
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:14   
             11880    1   DCL VXA$GET         ENTRY( 3 );
             11881    1   DCL VXF$FREE        ENTRY( 3 );
             11882    1   DCL VXQ$SORT        ENTRY( 7 );
             11883    1   DCL VXY$YESNO       ENTRY( 1 );
       50    11885        %ENTRIES_IO;
             11886    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
             11887    1   DCL VXF$CLOSE       ENTRY(3);
             11888    1   DCL VXU$PREAD       ENTRY(12);
             11889    1   DCL VXK$KEY         ENTRY(4);
             11890    1   DCL VXI$READ        ENTRY(4)  ALTRET;
             11891    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
       51    11893    1   DCL VXU$SETUP       ENTRY(5);
       52    11894        %PTR;
             11895        %LSET LISTDIR='0'B;

             11902    1   /*******************************************************************************
             11903    1   *                                                                              *
             11904    1   *                          PTR                                                 *
             11905    1   *                                                                              *
             11906    1   *******************************************************************************/

       53    11910        %POINTER;
             11911    1   DCL P$         PTR       ALIGNED AUTO;
             11912    1   DCL Q$         PTR       ALIGNED AUTO;
             11913    1   DCL R$         PTR       ALIGNED AUTO;
       54    11915    1   DCL SC_CURR$        PTR  ALIGNED   AUTO;
       55    11916    1   DCL FIRST_ADR_SETUP$ PTR ALIGNED   AUTO;
       56    11917    1   DCL ADR$            PTR  ALIGNED   AUTO;
       57    11918    1   DCL REC_BUF_STOP$   PTR  ALIGNED   AUTO;
       58    11919    1   DCL BREF$           PTR  ALIGNED   AUTO;
       59    11920    1   DCL BREF_STOP$      PTR  ALIGNED   AUTO;
       60    11921        %U;
             11922        %LSET LISTDIR='0'B;

             11929    1   /*******************************************************************************
             11930    1   *                                                                              *
             11931    1   *                          UBIN                                                 *
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:15   
             11932    1   *                                                                              *
             11933    1   *******************************************************************************/

       61    11937        %INDEX;
             11938    1   DCL I          UBIN(36) ALIGNED AUTO;
             11939    1   DCL SI REDEF I SBIN WORD ALIGNED;
             11940    1   DCL J          UBIN(36) ALIGNED AUTO;
             11941    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             11942    1   DCL K          UBIN(36) ALIGNED AUTO;
             11943    1   DCL SK REDEF K SBIN WORD ALIGNED;
             11944    1   DCL L          UBIN(36) ALIGNED AUTO;
             11945    1   DCL SL REDEF L    SBIN WORD ALIGNED;
       62    11947    1   DCL OPRD_TYPE       UBIN(36)  ALIGNED   AUTO;
       63    11948    1   DCL OPRT            UBIN(36)  ALIGNED   AUTO;
       64    11949    1   DCL FIELD           UBIN(36)  ALIGNED   AUTO;
       65    11950    1   DCL OPERAND         UBIN(36)  ALIGNED   AUTO;
       66    11951    1   DCL DISP            UBIN(36)  ALIGNED   AUTO;
       67    11952    1   DCL S_BIT           SBIN(36)  ALIGNED   AUTO;
       68    11953    1   DCL E_BIT           SBIN(36)  ALIGNED   AUTO;
       69    11954    1   DCL S_BIT_MOD       UBIN(36)  ALIGNED   AUTO;
       70    11955    1   DCL E_BIT_MOD       UBIN(36)  ALIGNED   AUTO;
       71    11956    1   DCL EVAL_OPRT       UBIN(36)  ALIGNED   AUTO;
       72    11957    1   DCL RELOC_OPRT      UBIN(36)  ALIGNED   AUTO;
       73    11958
       74    11959
       75    11960
       76    11961    1   DCL INIT_ADR        UBIN(36)  ALIGNED   AUTO;
       77    11962    1   DCL NODE_INX        UBIN(36)  ALIGNED   AUTO;
       78    11963    1   DCL BUF_TYPE        UBIN(36)  ALIGNED   AUTO;
       79    11964    1   DCL SETUP_SIZE      UBIN(36)  ALIGNED   AUTO;
       80    11965    1   DCL INC             UBIN(36)  ALIGNED   AUTO;
       81    11966    1   DCL ADR             UBIN(36)  ALIGNED   AUTO;
       82    11967    1   DCL ADR_SPAN_LAST   UBIN(36)  ALIGNED   AUTO;
       83    11968    1   DCL WHERE           UBIN(36)  ALIGNED   AUTO;
       84    11969    1   DCL SECT_COUNT      UBIN(36)  ALIGNED   AUTO;
       85    11970    1   DCL SECT#           UBIN(36)  ALIGNED   AUTO;
       86    11971    1   DCL SC_LAST_ADR     UBIN(36)  ALIGNED   AUTO;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:16   
       87    11972    1   DCL SC_SIZE         UBIN(36)  ALIGNED   AUTO;
       88    11973    1   DCL FIRST_ADR_SETUP UBIN(36)  ALIGNED   AUTO;
       89    11974    1   DCL RTYPE           UBIN(36)  ALIGNED   AUTO;
       90    11975    1   DCL IO_SIZEW        SBIN(36)  ALIGNED   AUTO;
       91    11976    1   DCL MAP_INDEX       UBIN(36)  ALIGNED   AUTO;
       92    11977        /*
       93    11978         Variables for debug record processing
       94    11979        */
       95    11980    1   DCL PSIZE           UBIN(36)  ALIGNED   AUTO;
       96    11981    1   DCL PAGE_SIZE       UBIN(36)  ALIGNED   AUTO;
       97    11982    1   DCL PAGE(0:15)     UBIN(36)  ALIGNED   AUTO;
       98    11983    1   DCL TOTAL(0:15)    SBIN WORD ALIGNED   AUTO;
       99    11984    1   DCL TSIZE           SBIN WORD ALIGNED   AUTO;
      100    11985
      101    11986    1   DCL ERR_NUM         UBIN(36)  ALIGNED   AUTO;
      102    11987    1   DCL ERR_LEVEL       SBIN WORD ALIGNED   AUTO;
      103    11988    1   DCL ERR_VALUE       UBIN(36)  ALIGNED   AUTO;
      104    11989    1   DCL ERR_FORM        UBIN(36)  ALIGNED   AUTO;
      105    11990    1   DCL ERR_WORD_DISP   UBIN(36)  ALIGNED   AUTO;
      106    11991
      107    11992    1   DCL BREF_OVERFLOW         UBIN(36)  ALIGNED   STATIC INIT(0);
      108    11993    1   DCL OP_CODE         UBIN(36)  ALIGNED   AUTO;
      109    11994    1   DCL OP_INX          UBIN(36)  ALIGNED   AUTO;
      110    11995    1   DCL SKELETON        UBIN(36)  ALIGNED   AUTO;
      111    11996    1   DCL DEPTH_NODE#     UBIN(36)  ALIGNED   AUTO;
      112    11997    1   DCL OP_TRANSFER_A(0:23)  UBIN(36)  ALIGNED   CONSTANT  INIT(
      113    11998    1              BITBIN('000000701000'O),
      114    11999    1              BITBIN('000000702000'O),
      115    12000    1              BITBIN('000000703000'O),
      116    12001    1              BITBIN('000000704000'O),
      117    12002    1              BITBIN('000000705000'O),
      118    12003    1              BITBIN('000000706000'O),
      119    12004    1              BITBIN('000000707000'O),
      120    12005    1              BITBIN('000000700000'O),
      121    12006    1              BITBIN('000000710000'O),
      122    12007    1              BITBIN('000000600000'O),
      123    12008    1              BITBIN('000000601000'O),
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:17   
      124    12009    1              BITBIN('000000604000'O),
      125    12010    1              BITBIN('000000605000'O),
      126    12011    1              BITBIN('000000603000'O),
      127    12012    1              BITBIN('000000602000'O),
      128    12013    1              BITBIN('000000617000'O),
      129    12014    1              BITBIN('000000614000'O),
      130    12015    1              BITBIN('000000615000'O),
      131    12016    1              BITBIN('000000607000'O),
      132    12017    1              BITBIN('000000600400'O),
      133    12018    1              BITBIN('000000601400'O),
      134    12019    1              BITBIN('000000606400'O),
      135    12020    1              BITBIN('000000605400'O),
      136    12021    1              BITBIN('000000604400'O)       );
      137    12022        %S;
             12023        %LSET LISTDIR='0'B;

             12030    1   /*******************************************************************************
             12031    1   *                                                                              *
             12032    1   *                          SBIN                                                 *
             12033    1   *                                                                              *
             12034    1   *******************************************************************************/

      138    12038    1   DCL LAST_ADR_SETUP  SBIN WORD ALIGNED   AUTO;
      139    12039    1   DCL PAGE#           SBIN WORD ALIGNED   AUTO;
      140    12040    1   DCL REPEAT_COUNT    SBIN WORD ALIGNED   AUTO;
      141    12041        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:18   
      142    12042        %B$RELOC1( NAME=R1, STCLASS="BASED(P$)" );
             12043    1   DCL 1 R1 BASED(P$) ALIGNED,
             12044    1         2 OPNDTYP UBIN(4) UNAL,
             12045                /*K*  OPNDTYP -
             12046                      (operand type) = 1 section
             12047                                     = 2 ENTREF
             12048                                     = 3 SYMREF
             12049                                     = 4 CONSTANT
             12050                                     = 5 SEGDEF
             12051                                     = 6 SEGREF    */
             12052    1         2 OP BIT(1),
             12053                /*K*  OP -   = 0 operand is an addend
             12054                                 (field) + (operand) -> field
             12055                             = 1 operand is a subtrahend
             12056                                 (field) - (operand) -> field   */
             12057    1         2 FIELD UBIN(4) UNAL,
             12058                /*K*  FIELD identifies common relocatable fields
             12059                         = 0 left-half 1/2 word length left
             12060                         = 1 right-half 1/2 word length right
             12061                         = 2 SEGID
             12062                         = 3 Y field (bits 3-17) FEP long address form
             12063                         = 4 whole word      */
             12064    1         2 OPERAND UBIN BYTE UNAL,
             12065                /*K*  OPERAND - If operand TYPE = 4, the operand field is
             12066                                an unsigned constant.
             12067                                If operand TYPE ~= 4 (or 0), the operand field
             12068                                is an entry number in the table specified by TYPE. */
             12069    1         2 DISP UBIN HALF UNAL;
             12070                /*K*  DISP is the word displacement from OFFSET (in the key)
             12071                      to the relocatable item.  */
      143    12073
      144    12074
      145    12075
      146    12076        %B$RELOC2( NAME=R2, STCLASS="BASED(P$)" );
             12077    1   DCL 1 R2 BASED(P$) ALIGNED,
             12078    1         2 MBZ UBIN(6) UNAL,
             12079                /*K*  MBZ is reserved for future use and must be zero. */
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:19   
             12080    1         2 OPNDTYP UBIN(4) UNAL,
             12081                /*K*  OPNDTYP -
             12082                      (operand type)  = 1 section
             12083                                      = 2 ENTREF
             12084                                      = 3 SYMREF
             12085                                      = 4 CONSTANT
             12086                                      = 5 SEGDEF
             12087                                      = 6 SEGREF    */
             12088    1         2 EVALOP UBIN(4) UNAL,
             12089                /*K*  EVALOP is the operator to be applied to the VALUE and
             12090                      the evaluation of the operand (yeilding an intermediate
             12091                      result, r).
             12092                      (Evaluation Op)     Meaning
             12093                      ---------------     -------
             12094                             0            indicates VALUE word is not present
             12095                                          (r = E(operand))
             12096                             1            add:  r = E(operand)+VALUE
             12097                             2            subtract:  r = E(operand)-VALUE
             12098                             3            multiply:  r = E(operand)*VALUE
             12099                             4            divide:  r = E(operand)/VALUE
             12100                             5            Shift right
             12101                                          r = E(operand) shifted right by
             12102                                          VALUE (i.e., VALUE = Shift count)
             12103                             6            Shift left
             12104                                          r = E(operand shifted left by
             12105                                          VALUE (i.e., VALUE = Shift count)
             12106                             7            Repeat:  The operand is a repeat
             12107                                          count, n.  Repeat VALUE n times.  */
             12108    1         2 RELOCOP UBIN(4) UNAL,
             12109                /*K*  RELOCOP is the operator to be applied to the intermediate
             12110                      result; r, and the field (defined by DISP, STBIT, and
             12111                      ENDBIT within the current program record).
             12112                      (Relocation Op)     Meaning
             12113                      ---------------     -------
             12114                             0            undefined
             12115                             1            add:  field+r -> field
             12116                             2            subtract:  field-r -> field
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:20   
             12117                             3            multiply:  field*r -> field
             12118                             4            divide:  field/r -> field
             12119                           5-0'15'        undefined
             12120                             0'16'        Store right justified:
             12121                                          r right justified -> field
             12122                             0'17'        Store left justified:
             12123                                          r left justified -> field  */
             12124    1         2 OPERAND UBIN HALF UNAL,
             12125                /*K*  OPERAND - If operand TYPE = 4, the operand field is
             12126                                an unsigned constant.
             12127                                If operand TYPE ~= 4 (or 0), the operand field
             12128                                is an entry number in the table specified by TYPE. */
             12129    1         2 DISP UBIN HALF UNAL,
             12130                /*K*  DISP is the word displacement from OFFSET (in the key)
             12131                      to the relocatable item.  */
             12132    1         2 STBIT UBIN BYTE UNAL,
             12133                /*K*  STBIT is the starting bit offset from the word located
             12134                      by DISP.  */
             12135    1         2 ENDBIT UBIN BYTE UNAL,
             12136                /*K*  ENDBIT is the ending bit offset from the word located
             12137                      by DISP.   */
             12138    1         2 VALUE SBIN;
             12139                /*K*  VALUE is a 36-bit constant to be used in the
             12140                      intermediate result, r.  This word is present only if
             12141                      EVALOP ~= 0.   */
      147    12143
      148    12144    1   DCL 1 FORM1$LH ALIGNED BASED(ADR$),
      149    12145    1         2 LH UBIN HALF UNAL,
      150    12146    1         2 DUMMY UBIN HALF UNAL;
      151    12147
      152    12148    1   DCL 1 FORM1$RH ALIGNED BASED(ADR$),
      153    12149    1         2 DUMMY UBIN HALF UNAL,
      154    12150    1         2 RH UBIN HALF UNAL;
      155    12151
      156    12152    1   DCL 1 FORM1$SEGID ALIGNED BASED(ADR$),
      157    12153    1         2 DUMMY UBIN(24) UNAL,
      158    12154    1         2 SEGID UBIN(12) UNAL;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:21   
      159    12155
      160    12156    1   DCL 1 FORM1$Y ALIGNED BASED(ADR$),
      161    12157    1         2 DUMMY1 UBIN(3) UNAL,
      162    12158    1         2 Y UBIN(15) UNAL,
      163    12159    1         2 DUMMY2 UBIN(18) UNAL;
      164    12160    1   DCL 1 FORM1$FW ALIGNED BASED(ADR$),
      165    12161    1         2 FW UBIN WORD;
      166    12162        /*
      167    12163                   Form 2
      168    12164        */
      169    12165    1   DCL FORM2$2              BIT( FORM2_COUNT )  UNAL BASED( BIT_ADR$ );
      170    12166    1   DCL FORM2_COUNT          SBIN WORD           ALIGNED   AUTO;
      171    12167    1   DCL BIT_ADR$             PTR                 ALIGNED   AUTO;
      172    12168
      173    12169
      174    12170    1   DCL TEMP_RESULT          SBIN(36)            ALIGNED   AUTO;
      175    12171    1   DCL TEMP$RESULT          BIT( FORM2_COUNT )  UNAL BASED( TEMP_RESULT$ );
      176    12172    1   DCL TEMP_RESULT$         PTR                 ALIGNED   AUTO;
      177    12173
      178    12174    1   DCL OPRD_MAP(0:6)        UBIN(36)  ALIGNED   CONSTANT  INIT(
      179    12175    1              999999,
      180    12176    1                   4,                      /* Sc                                 */
      181    12177    1                   1,                      /* Er                                 */
      182    12178    1                   2,                      /* Dr                                 */
      183    12179    1              999999,
      184    12180    1              999999,
      185    12181    1                   3    /* Sr */       );
      186    12182    1   DCL SHF_CON(0:35)        SBIN(36)  ALIGNED   CONSTANT  INIT(
      187    12183    1              BITBIN( '000000000001'O ),
      188    12184    1              BITBIN( '000000000002'O ),
      189    12185    1              BITBIN( '000000000004'O ),
      190    12186    1              BITBIN( '000000000010'O ),
      191    12187    1              BITBIN( '000000000020'O ),
      192    12188    1              BITBIN( '000000000040'O ),
      193    12189    1              BITBIN( '000000000100'O ),
      194    12190    1              BITBIN( '000000000200'O ),
      195    12191    1              BITBIN( '000000000400'O ),
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:22   
      196    12192    1              BITBIN( '000000001000'O ),
      197    12193    1              BITBIN( '000000002000'O ),
      198    12194    1              BITBIN( '000000004000'O ),
      199    12195    1              BITBIN( '000000010000'O ),
      200    12196    1              BITBIN( '000000020000'O ),
      201    12197    1              BITBIN( '000000040000'O ),
      202    12198    1              BITBIN( '000000100000'O ),
      203    12199    1              BITBIN( '000000200000'O ),
      204    12200    1              BITBIN( '000000400000'O ),
      205    12201    1              BITBIN( '000001000000'O ),
      206    12202    1              BITBIN( '000002000000'O ),
      207    12203    1              BITBIN( '000004000000'O ),
      208    12204    1              BITBIN( '000010000000'O ),
      209    12205    1              BITBIN( '000020000000'O ),
      210    12206    1              BITBIN( '000040000000'O ),
      211    12207    1              BITBIN( '000100000000'O ),
      212    12208    1              BITBIN( '000200000000'O ),
      213    12209    1              BITBIN( '000400000000'O ),
      214    12210    1              BITBIN( '001000000000'O ),
      215    12211    1              BITBIN( '002000000000'O ),
      216    12212    1              BITBIN( '004000000000'O ),
      217    12213    1              BITBIN( '010000000000'O ),
      218    12214    1              BITBIN( '020000000000'O ),
      219    12215    1              BITBIN( '040000000000'O ),
      220    12216    1              BITBIN( '100000000000'O ),
      221    12217    1              BITBIN( '200000000000'O ),
      222    12218    1              BITBIN( '400000000000'O )     );
      223    12219
      224    12220
      225    12221    1   DCL DEBUG_MAP(0:3)       UBIN(36)  ALIGNED   CONSTANT  INIT(
      226    12222    1              7,
      227    12223    1              5,
      228    12224    1              6,
      229    12225    1              4         );
      230    12226
      231    12227
      232    12228    1   DCL RESULT               SBIN(36)  ALIGNED   AUTO;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:23   
      233    12229    1   DCL INTER_RESULT         SBIN(36)  ALIGNED   AUTO;
      234    12230
      235    12231
      236    12232
      237    12233        %MOVE_TMPLT;
             12234    1   DCL VX$TARGET_B           BIT( VX_TARGET_COUNT ) ALIGNED    BASED;
             12235    1   DCL VX$SOURCE_B           BIT( VX_SOURCE_COUNT ) ALIGNED    BASED;
             12236    1   DCL VX$TARGET_C         CHAR( VX_TARGET_COUNT ) ALIGNED BASED;
             12237    1   DCL VX$SOURCE_C         CHAR( VX_SOURCE_COUNT ) ALIGNED BASED;
      238    12239        %MOVE_PAGE_DCL;
             12240    1   DCL MOVE_PAGE_REMAIN          SBIN WORD ALIGNED   AUTO;
             12241    1   DCL MOVE_TARGET$              PTR       ALIGNED   AUTO;
             12242    1   DCL MOVE_ADR_TEMP             UBIN(36)  ALIGNED   AUTO;
             12243    1   DCL MOVE_SRC$                 PTR       ALIGNED   AUTO;
             12244    1   DCL MOVE_TEMP                 UBIN(36)  ALIGNED   AUTO;
      239    12246
      240    12247
      241    12248
      242    12249    1   DCL M$OF       DCB;
      243    12250
      244    12251        %FPT_PRECORD(
      245    12252                   FPTN=FPT_PRECORD,
      246    12253                   STCLASS=CONSTANT,
      247    12254                   DCB=M$OF,
      248    12255                   N="-1");
             12256        %LSET LISTDIR='0'B;
             12266    1   DCL 1 FPT_PRECORD CONSTANT,2 V_ BIT(72)INIT(VECTOR(FPT_PRECORD.V))/**/,2 KEY_,3
             12266            BOUND UBIN(20)UNAL INIT(SIZEV(NIL))
             12267    1   /**/,3 * BIT(12)INIT('7772'O)/**/,3 * BIT(4)INIT('0'B)/**/,3 KEY$ PTR INIT(ADDR(NIL)
             12267            )
             12268    1   /**/,2 IDBUF_ BIT(72)INIT(VECTOR(NIL))/**/,2 V DALIGNED,3 DCB# UBIN(18)UNAL INIT(
             12268            DCBNUM(M$OF))/**/,
             12269    1   3 KEYS# BIT(1)INIT('0'B)/**/ ,3 KEYR# BIT(1)INIT('0'B)/**/ ,3 ID# BIT(1)INIT('0'B)
             12269            /**/ ,3
             12270    1   IDS# BIT(1)INIT('0'B)/**/ ,3 BOF# BIT(1)INIT('0'B)/**/ ,3 EOF# BIT(1)INIT('0'B)/**/
             12270            ,3 BRK#
             12271    1   BIT(1)INIT('0'B)/**/ ,3 IOERROK# BIT(1)INIT('0'B)/**/ ,3 IDALL# BIT(1)INIT('0'B)/**/
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:24   
             12271            ,3
             12272    1   INDX# UBIN(9)UNAL INIT(0)/**/,3 N# SBIN INIT(-1)/**/,3 RECNUM# UBIN(18)UNAL INIT(0)
             12273    1   /**/,3 NEXTKEY# BIT(1)INIT('0'B)/**/,3 NOMARKS# BIT(1)INIT('0'B)/**/,3 * BIT(16)INIT
             12273            ('0'B
             12274    1   )/**/;
      249    12276
      250    12277        /*         Based structures for debug records */
      251    12278
      252    12279        %B$LBNTRY0( NAME=B$LBNTRY0, STCLASS="BASED(P$)" ) ;
             12280    1   DCL 1 B$LBNTRY0 BASED(P$) ALIGNED,
             12281    1         2 * BIT(9) UNAL,
             12282                /*K*  * is reserved for future use and must be zero. */
             12283    1         2 COMPILER UBIN BYTE UNAL,
             12284                /*K*  COMPILER is supplied by the compiler according to
             12285                      convention and identifies the language as follows:
             12286                           0 - Assembler
             12287                           1 - PL-6
             12288                           2 - FORTRAN
             12289                           3 - COBOL
             12290                           4 - PL/I
             12291                           5 - RPG
             12292                           6 - Pascal
             12293                           7 - MOMUS
             12294                           8 - FPL                     */
             12295    1         2 VERSION UBIN HALF UNAL,
             12296                /*K*  VERSION is supplied by the compiler.    */
             12297    1         2 VERS REDEF VERSION,
             12298                /*K* X00 = 'X',0 ; X100 = 'X',100  */
             12299    1           3 LETTER CHAR(1) UNAL,
             12300                  /*K*  LETTER is the Release identifying letter.  */
             12301    1           3 NUMBER UBIN BYTE UNAL,
             12302                  /*K*  NUMBER is version number.  0-99 external, 100-511 internal.  */
             12303    1         2 UTS UBIN UNAL,
             12304                /*K*  UTS is the CP-6 universal time stamp as recorded at
             12305                      time of compilation.    */
             12306    1         2 NO_AUTO,                        /* Noauto frame address */
             12307    1           3 OPNDTYP UBIN(4) UNAL,
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:25   
             12308    1           3 * UBIN(5) UNAL,
             12309    1           3 OPERAND UBIN BYTE UNAL,
             12310    1           3 OFFSET UBIN HALF UNAL,
             12311    1         2 FRAME REDEF NO_AUTO UBIN,       /* Noauto frame address */
             12312    1         2 * BIT(36) UNAL;
             12313                /*K*  * is reserved for future use and must be zero.  */
      253    12315        %B$INTNTRY( NAME=B$INTNTRY, STCLASS="BASED(P$)");
             12316    1   DCL 1 B$INTNTRY BASED(P$) ALIGNED,
             12317    1         2 LBE UBIN BYTE UNAL,
             12318                /*K*  LBE is the entry number of the logical block table entry
             12319                      which describes this procedure.   */
             12320    1         2 OU UNAL,
             12321    1           3 SECTNUM UBIN BYTE UNAL,
             12322                  /*K*  SECTNUM contains an entry number into the control
             12323                        section table (TYPE 3) (OU only).  */
             12324    1           3 OFFSET UBIN HALF UNAL,
             12325                  /*K*  OFFSET is the word offset from the origin of the section
             12326                        (OU).   */
             12327    1         2 ISADDR REDEF OU UBIN(27) UNAL,
             12328                /*K*  ISADDR is the address within the instruction segment
             12329                      (RU).    */
             12330    1         2 NPOINTER SBIN HALF UNAL,
             12331                /*K*  NPOINTER is a word displacement into the debug name
             12332                      record (TYPE 15) locating the name of this entry.  */
             12333    1         2 PRI BIT(1) UNAL,
             12334                /*K*  PRI is a one-bit flag denoting primary name of the
             12335                      logical block.
             12336                      If PRI= 1, is primary name
             12337                            = 0, is not primary name    */
             12338    1         2 ALT BIT(1) UNAL,
             12339                /*K*  ALT is a one-bit flag denoting permissible alternate return.
             12340                         ALT = 1, alternate return allowed
             12341                             = 0, alternate return not allowed    */
             12342    1         2 CHECK BIT(1) UNAL,
             12343                /*K*  CHECK is a one-bit flag denoting arguments/parameter check
             12344                      and alternate return specification check.
             12345                         CHECK = 0, do not check for matching
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:26   
             12346                                    arguments/parameters and
             12347                                    alternate return specification.
             12348                               = 1, check for matching arguments/parameters
             12349                                    and alternate return specification.  */
             12350    1         2 CST UBIN(6) UNAL,
             12351                /*K*  CST is a 4-bit field denoting calling sequence type.
             12352                         CST =  0, Standard CP-6 Callable Procedure.
             12353                         CST =  1, Nonstandard Call Type.
             12354                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             12355                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             12356                         CST =  4, Standard CP-6 Function Procedure; a
             12357                                   variable table entry will be present to
             12358                                   define the attributes of the function.
             12359                         CST =  5, Same as 0, except USE, AVOID, or
             12360                                   MATERIALIZE attributes specified.
             12361                         CST =  7, Same as 2, except USE, AVOID, or
             12362                                   MATERIALIZE attributes specified.
             12363                         CST =  8, Same as 3, except USE, AVOID, or
             12364                                   MATERIALIZE attributes specified.
             12365                         CST =  9, Same as 4, except USE, AVOID, or
             12366                                   MATERIALIZE attributes specified.
             12367                         CST = 13, GCOS domain, save
             12368                         CST = 14, GCOS domain, no save
             12369                         CST = 15, Non-Callable Procedure.       */
             12370    1         2 NPARAM UBIN BYTE UNAL;
             12371                /*K*  NPARAM is a 9-bit field denoting number of parameters.  */
      254    12373        %B$EXST( NAME=B$EXST, STCLASS="BASED(P$)");
             12374    1   DCL 1 B$EXST BASED(P$) ALIGNED,
             12375    1         2 LA BIT(1) UNAL,
             12376                /*K*  LA is the label array indicator; when =1, SUBSCRIPT
             12377                      contains the associated subscript value, else SUBSCRIPT
             12378                      contains all zeros.  */
             12379    1         2 SUBSCRIPT SBIN(8) UNAL,
             12380                /*K*  SUBSCRIPT : when LA is 1, SUBSCRIPT contains the
             12381                      associated subscript value; otherwise, SUBSCRIPT is
             12382                      all zeros.   */
             12383    1         2 OU UNAL,
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:27   
             12384    1           3 SECTNUM UBIN BYTE UNAL,
             12385                  /*K*  SECTNUM contains an entry number into the control
             12386                        section table (TYPE 3) (OU only).  */
             12387    1           3 OFFSET UBIN HALF UNAL,
             12388                  /*K*  OFFSET is a word offset from the origin of the section (OU).  */
             12389    1         2 ISADDR REDEF OU UBIN(27) UNAL,
             12390                /*K*  ISADDR is the address within instruction segment (RU). */
             12391    1         2 NPOINTER SBIN HALF UNAL,
             12392                /*K*  NPOINTER is a word displacement into the debug name
             12393                      record (TYPE 15) locating the statement label.  A value
             12394                      of -1 indicates no label.  */
             12395    1         2 LBE UBIN HALF UNAL,
             12396                /*K*  LBE is the entry number (in the logical block table) of
             12397                      the logical block of the highest lexical level containing
             12398                      this statement.  */
             12399    1         2 COS BIT(1) UNAL,
             12400                /*K*  COS indicates a compiler optimized statement; when set,
             12401                      indicates this statement may not produce correct results
             12402                      if the compiled in program flow has been altered.  */
             12403    1         2 SUBSTTYPE UBIN(10) UNAL,
             12404                /*K*  SUBSTTYPE (Substatement Type) - This field may be used
             12405                      by compilers to elaborate on statement type.  This
             12406                      field is not used by the debugger.  */
             12407    1         2 STTYPE UBIN(7) UNAL,
             12408                /*K*  STTYPE (Statement Type) is a code which indicates the
             12409                      generic class of statement for use by the dubugger.
             12410                      The statement types and their value for STTYPE are:
             12411                       0 - Null Statement
             12412                       1 - Assignments
             12413                       2 - Call
             12414                       3 - Monitor Call
             12415                       4 - Alternate Shared Library Call
             12416                       5 - If
             12417                       6 - Else
             12418                       7 - Case
             12419                       8 - GOTO
             12420                       9 - Return
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:28   
             12421                      10 - Altreturn
             12422                      11 - Remember
             12423                      12 - Unwind
             12424                      13 - Report Writer
             12425                      14 - Alter
             12426                      15 - Evaluate
             12427                      16 - Intrinsic Call
             12428                      17 - Spoil
             12429                      18 - GOTO Subscripted
             12430                      19 - Assigned GOTO
             12431                      20 - If Logical
             12432                      21 - If Arithmetic
             12433                      22 - Pause
             12434                      23 - Perform
             12435                      24 - Stop Program
             12436                      25 - I/O Statement
             12437                      26 - Else If
             12438                      27 - Assigned
             12439                      28 - Do Select
             12440                      29 - Do Select End
             12441                      30 - Select
             12442                      31 - Do Uninhibit
             12443                      32 - Inspect
             12444                      33 - Do Until
             12445                      34 - Do Index
             12446                      35 - Do While
             12447                      36 - Do Case
             12448                      37 - DO
             12449                      38 - DO INHIBIT
             12450                      39 - Set
             12451                      40 - Exit
             12452                      41 - Do Uninhibit End
             12453                      42 - Purge
             12454                      43 - Do Until End
             12455                      44 - Do Index End
             12456                      45 - Do While End
             12457                      46 - Do Case End
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:29   
             12458                      47 - DO END
             12459                      48 - DO INHIBIT END
             12460                      49 - Release
             12461                      50 - Send
             12462                      51 - Data Base
             12463                      52 - Cancel
             12464                      53 - Initialize
             12465                      54 - Merge
             12466                      55 - Receive
             12467                      56 - Search
             12468                      57 - Sort
             12469                      58 - String
             12470                      59 - Unstring
             12471                      60 - Use
             12472                      61 - 100 Reserved for future use
             12473                     101 - Proc
             12474                     102 - Proc End
             12475                     103 - Entry
             12476                     104 - Compiler Miscellaneous     */
             12477    1         2 LINENUM UBIN HALF UNAL;
             12478                /*K*  LINENUM is the line number of this executable statement.  */
      255    12480        %B$VREBL( NAME=B$VREBL, STCLASS="BASED(P$)");
             12481    1   DCL 1 B$VREBL BASED(P$) ALIGNED,
             12482    1         2 ADR,
             12483                /*K*  ADR is a field containing an 18 bit word address
             12484                      (W), 2 bit byte address (C), and 4 bit bit address (B).
             12485                      Only the word portion is subject to relocation specified
             12486                      by OPNDTYP.  The meaning of ADR is dictated by the
             12487                      Address Type field.  */
             12488    1           3 W UBIN HALF UNAL,
             12489                  /*K*  W is a field containing an 18 bit word address. */
             12490    1           3 C UBIN(2) UNAL,
             12491                  /*K*  C is a field containing a 2 bit byte address.  */
             12492    1           3 B UBIN(4) UNAL,
             12493                  /*K*  B is a field containing a 4 bit bit address.  */
             12494    1         2 ADR6 REDEF ADR,
             12495                /*K*  ADR6 is a field for the FEP containing an 20 bit word address
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:30   
             12496                      (W), 1 bit byte address (C), and 3 bit bit address (B).
             12497                      Only the word portion is subject to relocation specified
             12498                      by OPNDTYP.  The meaning of ADR6 is dictated by the
             12499                      Address Type field.  Note that this form is only to
             12500                      be used in Run Units. The Object Unit always uses
             12501                      the ADR format.  */
             12502    1           3 W UBIN(20) UNAL,
             12503                  /*K*  W is a field containing an 20 bit word address. */
             12504    1           3 C UBIN(1) UNAL,
             12505                  /*K*  C is a field containing a 1 bit byte address.  */
             12506    1           3 B UBIN(3) UNAL,
             12507                  /*K*  B is a field containing a 3 bit bit address.  */
             12508    1         2 ADDRTYP UBIN(4) UNAL,
             12509                /*K*  ADDRTYP (Address Type) is a four bit field which
             12510                      determines how to use ADR (and possible other information)
             12511                      to locate the data described by the entry.  ADDRTYP can
             12512                      take on the following values:
             12513                      0 - No relocation to be done to this entry.
             12514                      1 - Static data - ADR is an offset within ISR.
             12515                      2 - Automatic Data - ADR is an offset within the current
             12516                          AUTO frame located by PR2.
             12517                      3 - Based data - ADR is an offset from user pointer
             12518                          (possibly defined by IMPTR).
             12519                      4 - DCB - ADR is an offset from the beginning of the DCB
             12520                          (which is located by IMPTR).
             12521                      5 - Parameter - ADR is an offset from the data located
             12522                          by the Implied Pointer into Automatic Storage.
             12523                      6 - Constant - ADR is a 18-bit constant.
             12524                      7 - Parameter in static - ADR is an offset from the data
             12525                          located by the Implied Point into Static Storage.
             12526                          In this case relocation information applies to IMPTR.
             12527                      8 - AREADEF - ADR is the offset into the segment for
             12528                          this item.
             12529                      9 - Virtual array - ADR is the IS offset in static of
             12530                          the descriptor block for this virtual array.
             12531                     10 - 15 - Reserved for future use.    */
             12532    1         2 DATATYP UBIN(6) UNAL,
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:31   
             12533                /*K*  DATATYP is a 6 bit field indicating the type of data
             12534                      described by this entry.  The defined data type codes
             12535                      can be found in the VREBL_DATATYPES macro.  */
             12536    1         2 REF BIT(1) UNAL,
             12537                /*K* REF is a one bit field which indicates whether the
             12538                     variable is referenced (REF=1) or not by this module.  */
             12539    1         2 MODF BIT(1) UNAL,
             12540                /*K*  MODF is a one bit field which indicates whether the
             12541                      variable is explicitely modified (MODF=1) or not by this
             12542                      module.    */
             12543    1         2 LOGSIZ UBIN HALF UNAL,
             12544                /*K* LOGSIZ is an 18 bit field containing the size of the data
             12545                     item or a locator of the variable containing the size.
             12546                     If SZTYP=0, this field contains the number of basic
             12547                     elements of this data type contained in the variable,
             12548                     e.g., the field contains five for a CHAR (5) variable.
             12549                     If SZTYP = 1, this field contains the entry number of
             12550                     the variable which contains the size.   */
             12551    1         2 LEVEL UBIN(6) UNAL,
             12552                /*K*  LEVEL is a 6 bit field containing the level number of
             12553                      the data item (for structures).   */
             12554    1         2 ALIGNTYP UBIN(3) UNAL,
             12555                /*K*  ALIGNTYP is a 3 bit field defining the explicit alignment
             12556                      of the data item.  The values and their meanings are:
             12557                      0 = Double Word Aligned
             12558                      1 = Word Aligned
             12559                      2 = Half Word Aligned
             12560                      3 = Byte Aligned
             12561                      4 = Bit Aligned
             12562                      5 = Digit Aligned  */
             12563    1         2 SZTYP BIT(1) UNAL,
             12564                /*K*  SZTYP - If SZTYP = 0, LOGSIZ contains the number of
             12565                      basic elements of this data type contained in the variable,
             12566                      e.g., the field contains five for a CHAR (5) variable.
             12567                      If SZTYP = 1, LOGZIS contains the entry number of the
             12568                      variable which contains the size.  */
             12569    1         2 ARRAYTYP UBIN(4) UNAL,
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:32   
             12570                /*K*  ARRAYTYP is a four bit field which determines the array
             12571                      characteristics of this variable and thus determines
             12572                      whether continuation entry(ies) exist for this item.
             12573                      The defined array types are:
             12574                      0 - The item is not dimensioned
             12575                      1 - The item is a single dimensional array with offset=0.
             12576                          DIMS contains the number of elements.  No continuation
             12577                          entry exists.
             12578                      2 - Same as type 1 except the offset (to be subtracted) =1.
             12579                      3 - All other arrays except virtual arrays.  DIMS,
             12580                          ELEMENTS, ELMNTSIZ, and OFFSET must be defined.  As
             12581                          many continuation entries as required will be present
             12582                          to accommodate the number of dimensions of the array
             12583                          with indeterminate number of elements, the ELEMENTS
             12584                          field will contain 0.
             12585                      4 - Virtual Array.  DIMS, ELEMENTS, ELMNTSIZ, and OFFSET
             12586                          must be defined.  As many continuation entries as
             12587                          required will be present to accommodate the number
             12588                          of dimensions of the array.
             12589                      5 - Adjustable dimensions uses continuation entries of
             12590                          the form of B$VREBLCA.    */
             12591    1         2 OPNDTYP UBIN(4) UNAL,
             12592                /*K*  OPNDTYP -
             12593                      (operand type) = 1 section
             12594                                     = 2 ENTREF
             12595                                     = 3 SYMREF
             12596                                     = 4 CONSTANT
             12597                                     = 5 SEGDEF
             12598                                     = 6 SEGREF    */
             12599    1         2 IMPTR SBIN HALF UNAL,
             12600                /*K*  IMPTR is unused for ADDRTYP = 1, 2, or 6.  If ADDRTYP = 3
             12601                      (Based) and bit 0 = 1, this based variable has no implied
             12602                      pointer.  If ADDRTYP = 3 (Based) and bit 0 = 0, bits 1-17
             12603                      contain the entry number of the variable table entry
             12604                      for the implied pointer to this variable.
             12605                      If ADDRTYP = 4 (DCB), this field contains the SYMREF
             12606                      number of the DCB.  After linking, the field will
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:33   
             12607                      contain the DCB number.
             12608                      If ADDRTYP = 5, this field contains the offset in the
             12609                      current automatic frame of the pointer to this parameter.
             12610                      If ADDRTYP = 7, this field contains the address in the
             12611                      Instruction Segment of the pointer to this parameter.  */
             12612    1         2 OPERAND UBIN HALF UNAL,
             12613                /*K*  OPERAND - If OPNDTYPE = 4, the OPERAND field is
             12614                                an unsigned constant.
             12615                                If OPNDTYPE ~= 4 (or 0), the OPERAND field
             12616                                is an entry number in the table specified by TYPE. */
             12617    1         2 ELMNTSIZ UBIN(24) UNAL,
             12618                /*K*  ELMNTSIZ is a 24 bit field defining the physical size
             12619                      (in bits) of the item or of an element of the item,
             12620                      if an array.  This includes all slack bits.  This is the
             12621                      multiplier needed to determine the bit offset
             12622                      in an array given the element offset.  */
             12623    1         2 STATUS_EXISTS BIT(1) UNAL,
             12624                /*K* STATUS EXISTS - If STATUS_EXISTS = 1,  */
             12625    1         2 * BIT(3) UNAL,
             12626                /*K*  * is reserved for future use and must be zero.  */
             12627    1         2 SCALE SBIN(8) UNAL,
             12628                /*K*  SCALE is the number of units by which this datum is
             12629                      assumed to be scaled.  The units depend on the data type.
             12630                      If this is a binary data type, the units are binary
             12631                      digits.  If this is a decimal data type, the units are
             12632                      decimal digits.  The field is meaningless for other data
             12633                      types.  The value of SCALE is such that:
             12634                      actual value = (value of datum) * (radix) ** SCALE  */
             12635    1         2 DIMS UBIN HALF UNAL,
             12636                /*K*  DIMS is an 18 bit field containing the number of dimensions
             12637                      for an array if ARRAYTYP = 3 or 4.  If ARRAYTYP = 1 or 2,
             12638                      this field contains the number of elements in the array.  */
             12639    1         2 NPOINTER SBIN HALF UNAL;
             12640                /*K*  NPOINTER is an 18 bit field containing the word offset
             12641                      into the debug name record (type 15) locating
             12642                      the name of this variable.  */
      256    12644
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:34   
      257    12645
      258    12646        %VX$BREF;
             12647    1   DCL 1 VX$BREF                    ALIGNED     BASED (VX_NEXT_BREF$),
             12648    1         2 WORD_A(0:1)       UBIN(36)  ALIGNED,
             12649    1         2 I  REDEF     WORD_A         ALIGNED,
             12650    1           3 WORD0            UBIN(36)  ALIGNED,
             12651    1           3 WORD1            UBIN(36)  ALIGNED;
      259    12653
      260    12654
      261    12655
      262    12656
      263    12657        %VX$LLIST_SC;
             12658        %LSET LISTDIR='0'B;

             12669    1   /*******************************************************************************
             12670    1   *                                                                              *
             12671    1   *                          VX$LLIST_SC                                             *
             12672    1   *                                                                              *
             12673    1   *******************************************************************************/

             12678    1   DCL 1 VX$LLIST_SC               BASED     ALIGNED,
             12679    1         2 LINK$             PTR,
             12680    1         2 BASE$             PTR,
             12681    1         2 COUNT             UBIN(36);
      264    12684        %PLIST;
      265    12685        %F$DCB;
      266    12742        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:35   
      267    12743    1       SECT_COUNT = VX_SC_PASS2$ -> VX$LLIST_SC.COUNT;
      268    12744    1       VX_SC_BASE$ = VX_SC_PASS2$ -> VX$LLIST_SC.BASE$;
      269    12745    1       VX_PASS2_REF.SAT.L_START.SC$     = VX_SC_BASE$;
      270    12746    1       VX_PASS2_REF.SAT.COUNT.SC     = SECT_COUNT;
      271    12747    1       TOTAL(11) = VX_OU_HEAD.LB_SIZE;
      272    12748    1       PAGE(11)  = TOTAL(11);
      273    12749    1       FIRST = '1'B/*@TRUE_B*/;
      274    12750    1   FIRST_READ:
      275    12751    1       CALL VXK$KEY(  0/*@OF*/, 10, 0, 0  );
      276    12752    1       CALL VXI$READ( 0/*@OF*/, VX_REC_BUF_START$, VX_REC_BUF_SIZE,
      277    12753    1               0/*@OF*/  )                        ALTRET(IO_ERROR_FIRST);
      278    12754    1       FIRST = '0'B/*@FALSE_B*/;
      279    12755    1       GOTO READ_RECORD;
      280    12756    1   IO_ERROR_FIRST:
      281    12757    2       DO CASE( VX_IO_STATUS );
      282    12758    2         CASE( 0/*@IO_EOF*/ );                  /* Error - empty */
      283    12759        /*E*  ERROR: VXT-E$FIMAGE_IO_EOF_VX-0
      284    12760              MESSAGE: No program or relocation records. End of file encountered.
      285    12761              DESCRIPTION: Self-explanatory.
      286    12762        */
      287    12763                %SCREAM(
      288    12764                ERR#=E$FIMAGE_IO_EOF_VX,
      289    12765                MID="'T'",
      290    12766                LEVEL=@E$F_VX,
      291    12767                AUX=@E$OUOF_VX);
      292    12770    2         CASE( 1/*@IO_NOKEY*/ );
      293    12771    2           GOTO NEXT_RECORD;
      294    12772    2         CASE( 2/*@IO_LD*/ );
      295    12773    2   IO_ERROR_LD:
      296    12774        /*E*  ERROR: VXT-E$FIMAGE_IO_LD_VX-0
      297    12775              MESSAGE: Object language error. Lost data condition for program/relocation.
      298    12776                       Attempting recovery.
      299    12777              DESCRIPTION: Self-explanatory.
      300    12778        */
      301    12779                %SCREAM(
      302    12780                ERR#=E$FIMAGE_IO_LD_VX,
      303    12781                MID="'T'",
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:36   
      304    12782                LEVEL=@E$S_VX,
      305    12783                AUX=@E$OUOF_VX);
      306    12786                %ALLOCATE(
      307    12787                PTR$=Q$,
      308    12788                TYPE=@RL_DS_2,
      309    12789                SIZE=VX_REC_BUF_SIZE);
      310    12796    2           VX_REC_BUF_SIZE = VX_REC_BUF_SIZE + VX_REC_BUF_SIZE;
      311    12797    2           IF FIRST THEN GOTO FIRST_READ;
      312    12798    2           CALL M$PRECORD( FPT_PRECORD );
      313    12799    2           GOTO NEXT_RECORD;
      314    12800    2         END;                              /* Do case( VX_IO_STATUS ); */
      315    12801
      316    12802        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:37   
      317    12803    2       DO WHILE( '1'B );
      318    12804    2   NEXT_RECORD:
      319    12805    2          CALL VXI$READ( 0/*@OF*/, VX_REC_BUF_START$, VX_REC_BUF_SIZE,
      320    12806    2                  3/*@NO_KEY*/   )                   ALTRET(IO_ERROR_SUBSEQUENT);
      321    12807    3          DO WHILE( '0'B );
      322    12808    3   IO_ERROR_SUBSEQUENT:
      323    12809    4             DO CASE( VX_IO_STATUS );
      324    12810    4               CASE( 0/*@IO_EOF*/ );
      325    12811    4                 GOTO POST;
      326    12812    4               CASE( 1/*@IO_NOKEY*/ );
      327    12813        /*E*  ERROR: VXT-E$INTERNAL_FIMAGE_NOKEY_VX-0
      328    12814         MESSAGE: Link internal error. No such key error in image processing on I-th read. I
             12814        >1.
      329    12815              DESCRIPTION: Self-explanatory.
      330    12816        */
      331    12817                      %SCREAM(
      332    12818                      ERR#=E$INTERNAL_FIMAGE_NOKEY_VX,
      333    12819                      LEVEL=@E$F_VX,
      334    12820                      MID="'T'",
      335    12821                      AUX=@E$OUOF_VX);
      336    12824    4               CASE( 2/*@IO_LD*/ );
      337    12825    4                 GOTO IO_ERROR_LD;
      338    12826    4               END;                        /* Do case( VX_IO_STATUS ); */
      339    12827    3             END;                          /* Do never */
      340    12828        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:38   
      341    12829    2   READ_RECORD:
      342    12830    2          IF VX_O_KEY_BUF.FORM2.UTS ~= VX_OU_HEAD.UTS THEN GOTO POST;
      343    12831    2          P$ = VX_REC_BUF_START$;
      344    12832    2          RTYPE = VX_OK.KRTYPE;
      345    12833    2          PAGE# = VX_OK.KPAGE#;
      346    12834    2          IO_SIZEW = VX_IO_SIZEW;
      347    12835    2          SECT# = VX_OK.KSECT#;
      348    12836    2          IF VX_IO_SIZEW > 0
      349    12837    2          THEN REC_BUF_STOP$  = PINCRW( VX_REC_BUF_START$, IO_SIZEW - 1 );
      350    12838    3          ELSE DO;                         /* 0 size */
      351    12839        /*E*   ERROR: VXT-E$FIMAGE_ZERO_REC_SIZE_VX-0
      352    12840              MESSAGE: Object language error: 0 record size.
      353    12841              DESCRIPTION: Self-explanatory.
      354    12842        */
      355    12843                  %SCREAM(
      356    12844                  ERR#=E$FIMAGE_ZERO_REC_SIZE_VX,
      357    12845                  LEVEL=@E$S_D_VX, MID="'T'" );
      358    12848    3             CALL TELL_PAGE_TYPE( -3 );
      359    12849    3             GOTO NEXT_RECORD;
      360    12850    3             END;
      361    12851    3          IF RTYPE = 10 THEN DO;
      362    12852    4             IF SECT# < SECT_COUNT THEN DO;
      363    12853    4                SC_CURR$ = PINCRW( VX_SC_BASE$, SECT# * SIZEW( VX$SC ) );
      364    12854    4                END;
      365    12855    4             ELSE DO;
      366    12856        /*E*  ERROR: VXT-E$FIMAGE_SC_RANGE_VX-0
      367    12857              MESSAGE: Object language error. Section number is out of range.
      368    12858                       Permissible range: 0 - %U1.  Attempted access: %U2.
      369    12859              DESCRIPTION: Self-explanatory.
      370    12860        */
      371    12861
      372    12862                     %NUMBER( NUM1="SECT_COUNT", NUM2="SECT#" );
      373    12879                     %SCREAM(
      374    12880                     ERR#=E$FIMAGE_SC_RANGE_VX,
      375    12881                     LEVEL=@E$F_D_VX, MID="'T'" );
      376    12884    4                CALL TELL_PAGE_TYPE( -4 );
      377    12885    4                GOTO NEXT_RECORD;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:39   
      378    12886    4                END;
      379    12887    4             IF VX_OK.KOFSET < SC_CURR$ -> VX$SC.SIZE THEN DO;
      380    12888    4                INIT_ADR = SC_CURR$ -> VX$SC.ADDRESS + VX_OK.KOFSET;
      381    12889    4                END;
      382    12890    4             ELSE DO;
      383    12891    4                IF SC_CURR$ -> VX$SC.TYPE ~= 5
      384    12892    4                        OR
      385    12893    4                        NOT SC_CURR$ -> VX$SC.ATTR.PRE_DCB
      386    12894    5                THEN DO;
      387    12895        /*E*  ERROR: VXT-E$FIMAGE_BAD_OFFSET_VX-0
      388    12896              MESSAGE: Offset value is out of bounds. Permissible range: 0 - %U1.
      389    12897                       Attempted access: %U2.
      390    12898              DESCRIPTION: Self-explanatory.
      391    12899        */
      392    12900    5                   J = SC_CURR$ -> VX$SC.SIZE - 1;
      393    12901                        %NUMBER( NUM1=J, NUM2="VX_OK.KOFSET" );
      394    12918                        %SCREAM(
      395    12919                        ERR#=E$FIMAGE_BAD_OFFSET_VX,
      396    12920                        LEVEL=@E$F_D_VX, MID="'T'" );
      397    12923    5                   CALL TELL_PAGE_TYPE( -4 );
      398    12924    5                   GOTO NEXT_RECORD;
      399    12925    5                   END;
      400    12926    4                END;                       /* If SC_CURR$ -> VX$SC.TYPE ... */
      401    12927
      402    12928
      403    12929
      404    12930    3             NODE_INX = SC_CURR$ -> VX$SC.NODE#;
      405    12931    3             SC_SIZE  = SC_CURR$ -> VX$SC.SIZE;
      406    12932    4             DO CASE( SC_CURR$ -> VX$SC.TYPE );
      407    12933    4               CASE( 0,2,4,3 );
      408    12934    4                 IF SC_CURR$ -> VX$SC.ATTR.SEGMENT
      409    12935    4                 THEN BUF_TYPE = 3/*@DS3*/ + SC_CURR$ -> VX$SC.SEG ;
      410    12936    4                 ELSE BUF_TYPE = 0/*@DATA*/;
      411    12937
      412    12938    4               CASE( 6,1,7,8 );
      413    12939    4                 IF SC_CURR$ -> VX$SC.ATTR.SEGMENT
      414    12940    4                 THEN BUF_TYPE = 3/*@DS3*/ + SC_CURR$ -> VX$SC.SEG ;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:40   
      415    12941    4                 ELSE BUF_TYPE = 1/*@PROC*/;
      416    12942
      417    12943    4               CASE(     5 );
      418    12944    5                 IF SC_CURR$ -> VX$SC.ATTR.PRE_DCB THEN DO;
             12944                          /* Cannot init predefined dcbs */
      419    12945        /*E*  ERROR: VXT-E$FIMAGE_PRE_DCB_VX-0
      420    12946              MESSAGE: Predefined DCB: %U1 can not be initialized. Skipping initialization.
      421    12947              DESCRIPTION: Self-explanatory,
      422    12948        */
      423    12949    5                    Q$ = PINCRW( VX_CURR$ -> VX$NODE.L_START.DN$,
      424    12950    5                            SC_CURR$ -> VX$SC.NAME_DISP );
      425    12951    5                    VX_EFIELD1.COUNT = Q$ -> B$DNAME.COUNT;
      426    12952    5                    VX_EFIELD1.CHARS = Q$ -> B$DNAME.TEXT;
      427    12953                         %SCREAM(
      428    12954                         ERR#=E$FIMAGE_PRE_DCB_VX,
      429    12955                         LEVEL=@E$S_VX,
      430    12956                         MID="'T'",
      431    12957                         AUX=@E$OUOF_VX);
      432    12960    5                    GOTO NEXT_RECORD;
      433    12961    5                    END;
      434    12962    5                 ELSE DO;                  /* A user dcb */
      435    12963    5                    END;
      436    12964        /* Turn initial bit off */
      437    12965    4                 ADR = SC_CURR$ -> VX$SC.ADDRESS;
      438    12966    4                 CALL VXU$SETUP( FIRST_ADR_SETUP$, 2/*@ROS*/, ADR, VX_DCB_SIZEW+1, 0 );
      439    12967    4                 FIRST_ADR_SETUP$ -> F$DCB.DCBNAME.S = '0'B;
      440    12968    4                 BUF_TYPE = 2/*@ROS*/;
      441    12969    4                 NODE_INX = 0;             /* In the root */
      442    12970    4                 SC_SIZE = VX_DCB_SIZEW;
      443    12971    4               END;                        /* Do case( SC_CURR$ -> VX$SC.TYPE ) */
      444    12972    3             SC_LAST_ADR = SC_CURR$ -> VX$SC.ADDRESS + SC_SIZE - 1;
      445    12973        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:41   
      446    12974    4             IF VX_OK.KSTYPE = 0 THEN DO;
      447    12975
      448    12976        /*  Text record  */
      449    12977
      450    12978    5                IF INIT_ADR + IO_SIZEW - 1 > SC_LAST_ADR THEN DO;
             12978                         /* Past end of section dcl */
      451    12979    5                   CALL REPORT_BAD_ADDRESS_GENERATION( IO_SIZEW );
      452    12980    5                   GOTO NEXT_RECORD;
      453    12981    5                   END;
      454    12982        %LIST;
      455    12983                     %SET LISTSUB='1'B;
      456    12984                     %MOVE_PAGE(
      457    12985                     MOVE_SOURCE$ = VX_REC_BUF_START$,
      458    12986                     MOVE_PAGE_SIZE = IO_SIZEW,
      459    12987                     MOVE_ADR=INIT_ADR,
      460    12988                     MOVE_UNIT = @BUF_SIZE,
      461    12989                     MOVE_BUFTYP = BUF_TYPE,
      462    12990                     MOVE_NODE# = NODE_INX);
             12991        /**/
             12992        /**/
             12993    4           MOVE_ADR_TEMP = INIT_ADR;
             12994    4           MOVE_PAGE_REMAIN = IO_SIZEW;
             12995    4           MOVE_SRC$ = VX_REC_BUF_START$;
             12996    5           DO WHILE( MOVE_PAGE_REMAIN > 0 );
             12997    5              IF MOVE_PAGE_REMAIN >= 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ THEN
             12997                       MOVE_TEMP = 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
             12998    5              ELSE MOVE_TEMP = MOVE_PAGE_REMAIN;
             12999    5              CALL VXU$SETUP( MOVE_TARGET$, BUF_TYPE, MOVE_ADR_TEMP, MOVE_TEMP,
             12999                       NODE_INX );
             13000    5              VX_TARGET_COUNT = MOVE_TEMP * 4/*@CHAR_WORD*/;
             13001    5              VX_SOURCE_COUNT = VX_TARGET_COUNT;
             13002    5              MOVE_TARGET$ -> VX$TARGET_C = MOVE_SRC$ -> VX$SOURCE_C;
             13003    5              MOVE_SRC$  = PINCRW( MOVE_SRC$,  MOVE_TEMP );
             13004    5              MOVE_PAGE_REMAIN = MOVE_PAGE_REMAIN - MOVE_TEMP;
             13005    5              MOVE_ADR_TEMP = MOVE_ADR_TEMP + MOVE_TEMP;
             13006    5              END;
      463    13008        %PLIST;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:42   
      464    13009    4                END;
      465    13010        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:43   
      466    13011    4             ELSE DO;
      467    13012
      468    13013        /*    Relocation record */
      469    13014
      470    13015    4                LAST_ADR_SETUP = -1; /* Set initial condition to force trip thru setup
      471    13016                                    the first time thru */
      472    13017    5                DO WHILE ( P$ <= REC_BUF_STOP$    );
      473    13018    5                   DESCENDANT    = '0'B/*@FALSE_B*/;
      474    13019    5                   CHECK_OVERLAY = '0'B/*@FALSE_B*/;
      475    13020        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:44   
      476    13021    6                   IF R1.OPNDTYP = 0 THEN DO;
      477    13022        /*
      478    13023              Form 2 relocation directive
      479    13024        */
      480    13025    6                      OPRD_TYPE      =         R2.OPNDTYP;
      481    13026    6                      EVAL_OPRT      =         R2.EVALOP;
      482    13027    6                      RELOC_OPRT     =         R2.RELOCOP;
      483    13028    6                      OPERAND        =         R2.OPERAND;
      484    13029
      485    13030    7                      DO CASE( OPRD_TYPE );
      486    13031    7                        CASE( 4 );
      487    13032    7                          RESULT  =   OPERAND;
      488    13033
      489    13034    7                        CASE( 5 );
      490    13035    7                          Q$ = PINCRW( VX_SC_BASE$, OPERAND * SIZEW(VX$SC) );
      491    13036    7                          IF Q$ -> VX$SC.ATTR.SEGMENT
      492    13037    7                          THEN RESULT = VX_SEGID( Q$ -> VX$SC.SEG );
      493    13038    7                          ELSE
      494    13039    7                             IF Q$ -> VX$SC.TYPE = 5
      495    13040    7                             THEN RESULT = BITBIN( '6003'O );
      496    13041    7                             ELSE RESULT = BITBIN( '6000'O );
      497    13042
      498    13043    7                        CASE(  1,
      499    13044    7                                        2,
      500    13045    7                                        3,
      501    13046    7                                        6 );
      502    13047    7                          MAP_INDEX = OPRD_MAP( OPRD_TYPE );
      503    13048    7                          IF OPERAND >= VX_PASS2_REF.SAT.COUNT_A(MAP_INDEX)
      504    13049    8                          THEN DO;
      505    13050    8                             CALL BAD_OPERAND_RANGE( -4 );
      506    13051    8                             GOTO NEXT_RECORD;
      507    13052    8                             END;
      508    13053    7                          Q$ = PINCRW( VX_PASS2_REF.SAT.L_START_A$(MAP_INDEX),
      509    13054    7                                  OPERAND * VX_PASS2_REF.SAT.ENT_SIZE_A(MAP_INDEX) );
      510    13055    7                          IF OPRD_TYPE = 1
      511    13056    7                          THEN RESULT = Q$ -> VX$SC.ADDRESS;
      512    13057    8                          ELSE DO;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:45   
      513    13058    8                             RESULT = Q$ -> VXR$SAT.VALUE;
      514    13059    8                             DESCENDANT = Q$ -> VXR$SAT.BELOW;
      515    13060    8                             DEPTH_NODE# = Q$ -> VXR$SAT.NODE#;
      516    13061    8                             END;
      517    13062
      518    13063    7                        CASE(ELSE);
      519    13064    7                          CALL REPORT_BAD_RELOC_VALUE( 1710, OPRD_TYPE );
      520    13065    7                          GOTO NEXT_RECORD;
      521    13066    7                        END;               /* Do case */
      522    13067
      523    13068
      524    13069
      525    13070    6                      REPEAT_COUNT = 1;
      526    13071    7                      IF EVAL_OPRT ~= 0 THEN DO;
      527    13072    8                         DO CASE( EVAL_OPRT);
      528    13073    8                           CASE( 1 );
      529    13074    8                             INTER_RESULT        =    RESULT + R2.VALUE;
      530    13075
      531    13076    8                           CASE( 2 );
      532    13077    8                             INTER_RESULT        =    RESULT - R2.VALUE;
      533    13078
      534    13079    8                           CASE( 3 );
      535    13080    8                             INTER_RESULT        =    RESULT * R2.VALUE;
      536    13081
      537    13082    8                           CASE( 4 );
      538    13083    8                             INTER_RESULT        =    RESULT / R2.VALUE;
      539    13084
      540    13085    8                           CASE( 5 );
      541    13086    8                             I = R2.VALUE;
      542    13087    9                             IF I >= SIZEW( SHF_CON ) - 1 THEN DO;
      543    13088        /*E*  ERROR: VXT-E$FIMAGE_BAD_SHR_VX-0
      544    13089              MESSAGE: Right shift count > 35 detected in form 2 directive. Result set to 0.
      545    13090              DESCRIPTION: Self-explanatory.
      546    13091        */
      547    13092                                     %SCREAM(
      548    13093                                     ERR#=E$FIMAGE_BAD_SHR_VX,
      549    13094                                     LEVEL=@E$S_VX, MID="'T'" );
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:46   
      550    13097    9                                CALL TELL_PAGE_TYPE( 3 );
      551    13098    9                                INTER_RESULT = 0;
      552    13099    9                                END;
      553    13100    8                             ELSE INTER_RESULT = RESULT / SHF_CON(I);
      554    13101    8                           CASE( 6 );
      555    13102
      556    13103    8                             I = R2.VALUE;
      557    13104    9                             IF I >= SIZEW( SHF_CON ) - 1 THEN DO;
      558    13105        /*E*  ERROR: VXT-E$FIMAGE_BAD_SHL_VX-0
      559    13106              MESSAGE: Left shift count > 35 detected in form 2 directive. Result set to 0.
      560    13107              DESCRIPTION: Self-explanatory.
      561    13108        */
      562    13109                                     %SCREAM(
      563    13110                                     ERR#=E$FIMAGE_BAD_SHL_VX,
      564    13111                                     LEVEL=@E$S_VX, MID="'T'" );
      565    13114    9                                CALL TELL_PAGE_TYPE( 3 );
      566    13115    9                                INTER_RESULT = 0;
      567    13116    9                                END;
      568    13117    8                             ELSE INTER_RESULT = RESULT * SHF_CON(I);
      569    13118
      570    13119    8                           CASE( 7 );
      571    13120    8                             REPEAT_COUNT = OPERAND;
      572    13121    8                             INTER_RESULT        =    R2.VALUE;
      573    13122
      574    13123    8                           CASE( ELSE );
      575    13124        /*Here => error */
      576    13125        /*E*  ERROR: VXT-E$FIMAGE_BAD_EVAL_OP_VX-0
      577    13126              MESSAGE: Illegal evaluation operator detected in form %U1 directive.
      578    13127                       Value = %U2.
      579    13128              DESCRIPTION: Self-explanatory.
      580    13129        */
      581    13130    8                             CALL REPORT_BAD_RELOC_VALUE(
      582    13131    8                                     1708,
      583    13132    8                                     EVAL_OPRT                 );
      584    13133    8                             GOTO NEXT_RECORD;
      585    13134    8                           END;            /* Do case( EVAL_OPRT ); */
      586    13135    7                         INC = SIZEW( R2 );
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:47   
      587    13136    7                         END;              /* If EVAL_OPRT ~= 0 then do; */
      588    13137    7                      ELSE DO;             /* Here => EVAL_OPRT = 0 */
      589    13138    7                         INTER_RESULT        =    RESULT;
      590    13139    7                         INC = SIZEW( R2 ) - SIZEW( R2.VALUE );
      591    13140    7                         END;              /* Else do */
      592    13141
      593    13142
      594    13143
      595    13144    6                      S_BIT = R2.STBIT;
      596    13145    6                      E_BIT = R2.ENDBIT;
      597    13146    6                      FORM2_COUNT = E_BIT - S_BIT + 1;
      598    13147    7                      IF FORM2_COUNT <= 0 OR FORM2_COUNT > SIZEB( S_BIT ) THEN DO;
      599    13148        /*E*  ERROR: VXT-E$FIMAGE_BAD_BITS_VX-0
      600    13149              MESSAGE: Object language error. Bit field definition in form 2 directive
      601    13150                       <= 0 or > 36.
      602    13151              DESCRIPTION: Self-explanatory.
      603    13152        */
      604    13153    7                         ERR_LEVEL = -4;
      605    13154                              %SCREAM(
      606    13155                              ERR#=E$FIMAGE_BAD_BITS_VX,
      607    13156                              MID="'T'",
      608    13157                              LEVEL=ERR_LEVEL);
      609    13160        /*E*  ERROR: VXT-E$FIMAGE_BAD_BITS_CONT_VX-0
      610    13161              MESSAGE: Starting bit = %U1. Ending bit = %U2.
      611    13162              DESCRIPTION: Self-explanatory.
      612    13163        */
      613    13164                              %NUMBER( NUM1=S_BIT, NUM2=E_BIT );
      614    13181                              %SCREAM(
      615    13182                              ERR#=E$FIMAGE_BAD_BITS_CONT_VX,
      616    13183                              MID="'T'",
      617    13184                              LEVEL=ERR_LEVEL);
      618    13187    7                         CALL TELL_PAGE_TYPE( ERR_LEVEL );
      619    13188    7                         GOTO NEXT_RECORD;
      620    13189    7                         END;
      621    13190        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:48   
      622    13191    6                      ADR = INIT_ADR + R2.DISP + S_BIT / 36;
      623    13192    6                      ADR_SPAN_LAST = INIT_ADR + R2.DISP +  E_BIT  / 36;
      624    13193    6                      S_BIT_MOD = MOD( S_BIT, 36 );
      625    13194    6                      E_BIT_MOD = MOD( E_BIT, 36 );
      626    13195    6                      IF REPEAT_COUNT = 1 THEN
      627    13196    6                         IF (S_BIT_MOD=0 OR S_BIT_MOD=3) AND E_BIT_MOD >= 17
      628    13197    6                         THEN CHECK_OVERLAY = '1'B/*@TRUE_B*/;
      629    13198    6                      ERR_VALUE = ADR + (S_BIT_MOD + REPEAT_COUNT * FORM2_COUNT - 1 ) /
             13198                               36;
      630    13199    7                      IF ERR_VALUE > SC_LAST_ADR THEN DO;
      631    13200    7                         CALL REPORT_BAD_ADDRESS_GENERATION( ERR_VALUE );
      632    13201    7                         GOTO NEXT_RECORD;
      633    13202    7                         END;
      634    13203    7                      DO SK = 1 TO REPEAT_COUNT;
      635    13204    7                         TEMP_RESULT = 0;  /* Clear bits */
      636    13205    7                         IF ADR < FIRST_ADR_SETUP
      637    13206    7                                 OR
      638    13207    7                                 ADR_SPAN_LAST > LAST_ADR_SETUP
      639    13208    8                         THEN DO;
      640    13209    8                            SETUP_SIZE = SC_LAST_ADR - ADR + 1;
      641    13210    8                            IF SETUP_SIZE > 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/
             13210                                     THEN SETUP_SIZE = 1024
             13210                                     /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      642    13211    8                            CALL VXU$SETUP( FIRST_ADR_SETUP$,
      643    13212    8                                    BUF_TYPE,
      644    13213    8                                    ADR,
      645    13214    8                                    SETUP_SIZE,
      646    13215    8                                    NODE_INX );
      647    13216    8                            FIRST_ADR_SETUP = ADR;
      648    13217    8                            LAST_ADR_SETUP = FIRST_ADR_SETUP + SETUP_SIZE - 1;
      649    13218    8                            END;
      650    13219    7                         ADR$  = PINCRW( FIRST_ADR_SETUP$, ADR - FIRST_ADR_SETUP );
      651    13220    7                         BIT_ADR$ = PINCRB( ADR$, S_BIT_MOD );/* Temp for now */
      652    13221    7                         TEMP_RESULT$ = PINCRB( ADDR(TEMP_RESULT), 36 - FORM2_COUNT );
             13221                                  /* Temp for now */
      653    13222
      654    13223    7                         TEMP$RESULT = FORM2$2; /* Move field into temporary */
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:49   
      655    13224
      656    13225    8                         DO CASE( R2.RELOCOP );
      657    13226    8                           CASE( 1 );
      658    13227    8                             TEMP_RESULT = TEMP_RESULT + INTER_RESULT;
      659    13228
      660    13229    8                           CASE( 2 );
      661    13230    8                             TEMP_RESULT = TEMP_RESULT - INTER_RESULT;
      662    13231
      663    13232    8                           CASE( 3 );
      664    13233    8                             TEMP_RESULT = TEMP_RESULT * INTER_RESULT;
      665    13234
      666    13235    8                           CASE( 4 );
      667    13236    8                             TEMP_RESULT = TEMP_RESULT / INTER_RESULT;
      668    13237
      669    13238    8                           CASE( 14 );
      670    13239    8                             TEMP_RESULT$ = PINCRB( ADDR( INTER_RESULT ),
      671    13240    8                                     36 - FORM2_COUNT );
      672    13241
      673    13242    8                           CASE( 15 );
      674    13243    8                             TEMP_RESULT$ = ADDR( INTER_RESULT );
      675    13244
      676    13245    8                           CASE( ELSE );
      677    13246        /*Here => bad relocation operation */
      678    13247        /*E*  ERROR: VXT-E$FIMAGE_BAD_RELOC_OP_VX-0
      679    13248              MESSAGE: Illegal relocation operator detected in form %U1 directive.
      680    13249                       Value = %U1.
      681    13250              DESCRIPTION: Self-explanatory.
      682    13251        */
      683    13252    8                             ERR_NUM = 1709;
      684    13253    8                             ERR_VALUE = R2.RELOCOP;
      685    13254    8                             CALL REPORT_BAD_RELOC_VALUE( ERR_NUM, ERR_VALUE );
      686    13255    8                             GOTO NEXT_RECORD;
      687    13256    8                           END;            /* Do case( R2.RELOCOP ); */
      688    13257
      689    13258
      690    13259    7                         FORM2$2 = TEMP$RESULT; /* Store it away */
      691    13260
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:50   
      692    13261    7                         S_BIT = S_BIT_MOD + FORM2_COUNT;
      693    13262    7                         E_BIT = E_BIT_MOD + FORM2_COUNT;
      694    13263    7                         ADR = ADR + S_BIT / 36;
      695    13264    7                         ADR_SPAN_LAST = ADR + E_BIT / 36;
      696    13265    7                         S_BIT_MOD = MOD( S_BIT, 36 );
      697    13266    7                         E_BIT_MOD = MOD( E_BIT, 36 );
      698    13267
      699    13268    7                         END;              /*  Do sk = 0 to REPEAT_COUNT */
      700    13269    6                      END;                 /* If R1.OPNDTYP = 0 then do */
      701    13270        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:51   
      702    13271    6                   ELSE DO;
      703    13272        /*
      704    13273                  Form 1 relocation directive
      705    13274        */
      706    13275    6                      OPRD_TYPE      =    R1.OPNDTYP;
      707    13276    6                      OPERAND        =    R1.OPERAND;
      708    13277
      709    13278
      710    13279    6                      INC            =    SIZEW( R1 );
      711    13280    6                      ADR   = INIT_ADR + R1.DISP;
      712    13281    7                      IF ADR > SC_LAST_ADR THEN DO;
      713    13282    7                         ERR_VALUE = R1.DISP;
      714    13283    7                         CALL REPORT_BAD_ADDRESS_GENERATION( ERR_VALUE );
      715    13284    7                         GOTO NEXT_RECORD;
      716    13285    7                         END;
      717    13286    6                      IF ADR < FIRST_ADR_SETUP
      718    13287    6                              OR
      719    13288    6                              ADR > LAST_ADR_SETUP
      720    13289    7                      THEN DO;
      721    13290    7                         SETUP_SIZE = SC_LAST_ADR - ADR + 1;
      722    13291    7                         IF SETUP_SIZE > 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ THEN
             13291                                  SETUP_SIZE = 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      723    13292    7                         CALL VXU$SETUP( FIRST_ADR_SETUP$,
      724    13293    7                                 BUF_TYPE,
      725    13294    7                                 ADR,
      726    13295    7                                 SETUP_SIZE,
      727    13296    7                                 NODE_INX );
      728    13297    7                         FIRST_ADR_SETUP = ADR;
      729    13298    7                         LAST_ADR_SETUP = FIRST_ADR_SETUP + SETUP_SIZE - 1;
      730    13299    7                         END;
      731    13300    6                      ADR$   = PINCRW( FIRST_ADR_SETUP$, ADR - FIRST_ADR_SETUP );
      732    13301    7                      DO CASE( OPRD_TYPE );
      733    13302    7                        CASE( 4 );
      734    13303    7                          RESULT  =   OPERAND;
      735    13304
      736    13305    7                        CASE( 5 );
      737    13306    7                          Q$ = PINCRW( VX_SC_BASE$, OPERAND * SIZEW(VX$SC) );
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:52   
      738    13307    7                          IF Q$ -> VX$SC.ATTR.SEGMENT
      739    13308    7                          THEN RESULT = VX_SEGID( Q$ -> VX$SC.SEG );
      740    13309    7                          ELSE
      741    13310    7                             IF Q$ -> VX$SC.TYPE = 5
      742    13311    7                             THEN RESULT = BITBIN( '6003'O );
      743    13312    7                             ELSE RESULT = BITBIN( '6000'O );
      744    13313
      745    13314    7                        CASE(  1,
      746    13315    7                                        2,
      747    13316    7                                        3,
      748    13317    7                                        6 );
      749    13318    7                          MAP_INDEX = OPRD_MAP( OPRD_TYPE );
      750    13319    7                          IF OPERAND >= VX_PASS2_REF.SAT.COUNT_A(MAP_INDEX)
      751    13320    8                          THEN DO;
      752    13321    8                             CALL BAD_OPERAND_RANGE( -4 );
      753    13322    8                             GOTO NEXT_RECORD;
      754    13323    8                             END;
      755    13324    7                          Q$ = PINCRW( VX_PASS2_REF.SAT.L_START_A$(MAP_INDEX),
      756    13325    7                                  OPERAND * VX_PASS2_REF.SAT.ENT_SIZE_A(MAP_INDEX) );
      757    13326    7                          IF OPRD_TYPE = 1
      758    13327    7                          THEN RESULT = Q$ -> VX$SC.ADDRESS;
      759    13328    8                          ELSE DO;
      760    13329    8                             RESULT = Q$ -> VXR$SAT.VALUE;
      761    13330    8                             DESCENDANT = Q$ -> VXR$SAT.BELOW;
      762    13331    8                             DEPTH_NODE# = Q$ -> VXR$SAT.NODE#;
      763    13332    8                             END;
      764    13333
      765    13334    7                        CASE(ELSE);
      766    13335        /*E*  ERROR: VXT-E$FIMAGE_BAD_OPRD_TYPE_VX-0
      767    13336              MESSAGE: Illegal operand type detected in form %U1 directive. Value = %U2.
      768    13337              DESCRIPTION: Self-explanatory.
      769    13338        */
      770    13339    7                          CALL REPORT_BAD_RELOC_VALUE( 1710, OPRD_TYPE );
      771    13340    7                          GOTO NEXT_RECORD;
      772    13341    7                        END;               /* Do case */
      773    13342
      774    13343    7                      DO CASE( R1.FIELD );
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:53   
      775    13344
      776    13345    7                        CASE( 0 );
      777    13346    7                          IF R1.OP
      778    13347    7                          THEN FORM1$LH.LH = FORM1$LH.LH - RESULT;
      779    13348    7                          ELSE FORM1$LH.LH = FORM1$LH.LH + RESULT;
      780    13349    7                          CHECK_OVERLAY = '1'B/*@TRUE_B*/;
      781    13350
      782    13351    7                        CASE( 1 );
      783    13352    7                          IF R1.OP
      784    13353    7                          THEN FORM1$RH.RH = FORM1$RH.RH - RESULT;
      785    13354    7                          ELSE FORM1$RH.RH = FORM1$RH.RH + RESULT;
      786    13355
      787    13356    7                        CASE( 2 );
      788    13357    7                          IF R1.OP
      789    13358    7                          THEN FORM1$SEGID.SEGID = FORM1$SEGID.SEGID - RESULT;
      790    13359    7                          ELSE FORM1$SEGID.SEGID = FORM1$SEGID.SEGID + RESULT;
      791    13360
      792    13361    7                        CASE( 3 );
      793    13362    7                          IF R1.OP
      794    13363    7                          THEN FORM1$Y.Y = FORM1$Y.Y - RESULT;
      795    13364    7                          ELSE FORM1$Y.Y = FORM1$Y.Y + RESULT;
      796    13365    7                          CHECK_OVERLAY = '1'B/*@TRUE_B*/;
      797    13366
      798    13367    7                        CASE( 4 );
      799    13368    7                          IF R1.OP
      800    13369    7                          THEN FORM1$FW.FW = FORM1$FW.FW - RESULT;
      801    13370    7                          ELSE FORM1$FW.FW = FORM1$FW.FW + RESULT;
      802    13371
      803    13372    7                        CASE( ELSE );
      804    13373        /* Here => error; bad field definition */
      805    13374        /*E*  ERROR: VXT-E$FIMAGE_BAD_FIELD_VX-0
      806    13375              MESSAGE: Illegal field definition detected in form %U1 directive.
      807    13376                       Value = %U2.
      808    13377              DESCRIPTION: Self-explanatory.
      809    13378        */
      810    13379    7                          ERR_NUM = 1707;
      811    13380    7                          ERR_VALUE = R1.FIELD;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:54   
      812    13381    7                          CALL REPORT_BAD_RELOC_VALUE( ERR_NUM, ERR_VALUE );
      813    13382    7                          GOTO NEXT_RECORD;
      814    13383    7                        END;               /* Do case( R1.FIELD ); */
      815    13384    6                      END;             /* Else do - if R1.OPNDTYP = 0 then do */
      816    13385        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:55   
      817    13386    6                   IF DESCENDANT AND CHECK_OVERLAY THEN DO;
      818    13387    7                      IF VX_O.NUM.BREF > 0 THEN DO;
      819    13388    7                         OP_CODE = BITBIN( ADR$ -> VX$BIT_A(0) & '000000777400'O );
      820    13389    8                         DO OP_INX = 0 TO SIZEW( OP_TRANSFER_A ) - 1;
      821    13390    8                            IF OP_CODE = OP_TRANSFER_A(OP_INX) THEN GOTO IS_A_TRANSFER;
      822    13391    8                            END;           /* Do OP_INX = OP_TRANSFER_A(OP_INX); */
      823    13392    7                         OP_CODE = MOD (ADR$ -> VX$WORD_A(0), 262144);
      824    13393    7                         IF OPRD_TYPE = 2 THEN GOTO IS_A_TRANSFER;
      825    13394    7                         GOTO NOT_A_TRANSFER;
      826    13395    7   IS_A_TRANSFER:
      827    13396    7                         VX_BREF_INSTANCE = VX_BREF_INSTANCE + 1;
      828    13397    7                         SKELETON = ADR$ -> VX$WORD_A(0) - OP_CODE;
      829    13398    8                         IF DEPTH_NODE# >=1024 THEN DO;
      830    13399        /*E*  ERROR: VXT-E$NODE_NUM_TOO_BIG_VX-0
      831    13400              MESSAGE: Maximum node number exceeded.
      832    13401              DESCRIPTION: Self-explanatory.
      833    13402        */
      834    13403                                 %SCREAM(ERR#=E$NODE_NUM_TOO_BIG_VX,
      835    13404                                 LEVEL=@E$F_VX, MID="'T'" );
      836    13407                                 %CHECK( SEV=@MAX_NODE# );
      837    13410    8                            GOTO NOT_A_TRANSFER;
      838    13411    8                            END;           /* If DEPTH_NODE# >=1024 then do;     */
      839    13412    7                         SKELETON = SKELETON + DEPTH_NODE# * 256;
      840    13413
      841    13414    7                         BREF$ = VX_BREF_START$;
      842    13415    7                         BREF_STOP$ = PINCRW( VX_NEXT_BREF$, -SIZEW(VX$BREF) );
      843    13416    8                         DO WHILE( BREF$ <= BREF_STOP$ );
      844    13417    8                            IF SKELETON = BREF$ -> VX$BREF.I.WORD1
      845    13418    8                            THEN GOTO SET_IN_ADDRESS;
      846    13419    8                            BREF$ = PINCRW( BREF$, SIZEW(VX$BREF) );
      847    13420    8                            END;           /* Do while ( BREF$ <= BREF_STOP$ )   */
      848    13421        /*Here=>not found */
      849    13422    7                         VX_BREF_DEFINITION = VX_BREF_DEFINITION + 1;
      850    13423    8                         IF VX_BREF_SIZE < SIZEW( VX$BREF ) THEN DO;
      851    13424    9                            IF BREF_OVERFLOW <= 0 THEN DO;
      852    13425        /*E*  ERROR: VXT-E$BREF_OVERFLOW_VX-0
      853    13426              MESSAGE: Branch reference table(BREF) overflow.  Run unit will not
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:56   
      854    13427                       execute correctly.
      855    13428              DESCRIPTION: Self-explanatory.
      856    13429        */
      857    13430    9                               BREF_OVERFLOW = 1;
      858    13431                                    %SCREAM(ERR#=E$BREF_OVERFLOW_VX, LEVEL=@E$S_VX,MID="'T'"
             13431                                        );
      859    13434                                    %CHECK( SEV=@BREF_OVERFLOW );
      860    13437    9                               END;        /* If BREF_OVERFLOW <= 0 then do;     */
      861    13438    8                            GOTO NOT_A_TRANSFER;
      862    13439    8                            END; /* If VX_BREF_SIZE < SIZEW(VX$BREF) then do     */
      863    13440
      864    13441    7                         VX_NEXT_BREF$ -> VX$BREF.I.WORD0 = VX_TSX0_OVERLAY.I.WORD0;
      865    13442    7                         VX_NEXT_BREF$ -> VX$BREF.I.WORD1 = SKELETON;
      866    13443    7                         VX_NEXT_BREF$ = PINCRW( VX_NEXT_BREF$, SIZEW( VX$BREF ) );
      867    13444    7                         VX_BREF_SIZE = VX_BREF_SIZE - SIZEW( VX$BREF );
      868    13445    7   SET_IN_ADDRESS:
      869    13446    7                         ADR$ -> VX$WORD_A(0) =
      870    13447    7                                 OP_CODE
      871    13448    7                                 +
      872    13449    7                                 ( VX_BREF_ADR  +
      873    13450    7                                 POFFW( BREF$, VX_BREF_START$ ) )
      874    13451    7                                 * 262144;
      875    13452    7                         END;              /* If VX_O.NUM.BREF > 0 then do;      */
      876    13453    6                      END;                 /* If descendant then do;             */
      877    13454    5   NOT_A_TRANSFER: ;
      878    13455
      879    13456        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:57   
      880    13457
      881    13458    5                   P$             =    PINCRW( P$, INC );
      882    13459    5                   END;                /* Do while( P$ <= VX_REC_BUF_STOP$ ); */
      883    13460    4                END;                   /* else do - if VX_OK.KSTYPE = 0 then do */
      884    13461    3             END;                          /* If rtype = typprog then do */
      885    13462        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:58   
      886    13463    3          ELSE DO;
      887    13464    4             IF RTYPE >= 11 AND RTYPE <= 15 THEN DO; /* In debug record range */
      888    13465    4                IF VX_O.SIN.NODEBUG ~= 0 THEN GOTO POST;
      889    13466    5                IF RTYPE ~= 11 THEN DO; /* It's not a logical block debug record */
      890    13467        /*E*  ERROR: VXT-E$FIMAGE_NO_LB_VX-0
      891    13468              MESSAGE: Object language error.  Debug records present but logical
      892    13469                       block record missing.  Skipping debug processing.
      893    13470              DESCRIPTION: Self-explanatory.
      894    13471        */
      895    13472                        %SCREAM(
      896    13473                        ERR#=E$FIMAGE_NO_LB_VX, MID="'T'", LEVEL=@E$S_VX,
      897    13474                        AUX=E$OUOF_VX );
      898    13477    5                   GOTO POST;
      899    13478    5                   END;
      900    13479    5                IF NOT VX_PRIMARY_ENTDEF_GOT THEN DO;
      901    13480        /*E*  ERROR: VXT-E$FIMAGE_D_PENTDEF_VX-0
      902    13481              MESSAGE: Cannot resolve primary entry definition: %U1.
      903    13482              DESCRIPTION: Self-explanatory.
      904    13483        */
      905    13484    5                   VX_EFIELD1.COUNT = VX_OK.OUNAME.COUNT;
      906    13485    5                   VX_EFIELD1.CHARS = VX_OK.OUNAME.CHARS;
      907    13486                        %SCREAM(
      908    13487                        ERR#=E$FIMAGE_D_PENTDEF_VX,
      909    13488                        MID="'T'",
      910    13489                        LEVEL=@E$S_D_VX);
      911    13492        /*E*  ERROR: VXT-E$FIMAGE_D_SKIP_VX-0
      912    13493              MESSAGE: Skipping debug record processing.
      913    13494              DESCRIPTION: Self-explanatory.
      914    13495        */
      915    13496                        %SCREAM( ERR#=E$FIMAGE_D_SKIP_VX,
      916    13497                        LEVEL=@E$S_VX, MID="'T'", AUX=E$OUOF_VX );
      917    13500    5                   GOTO POST;
      918    13501    5                   END;
      919    13502    5                IF PAGE# ~= 0 THEN DO;
      920    13503        /*E*  ERROR: VXT-E$FIMAGE_D_LB_VX-0
      921    13504              MESSAGE: First page of logical block records is %U1. Must be 0.
      922    13505              DESCRIPTION: Self-explanatory.
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:59   
      923    13506        */
      924    13507                        %NUMBER( NUM1=PAGE# );
      925    13524                        %SCREAM(
      926    13525                        ERR#=E$FIMAGE_D_LB_VX,
      927    13526                        MID="'T'", LEVEL=@E$S_D_VX );
      928    13529                        %SCREAM(
      929    13530                        ERR#=E$FIMAGE_D_SKIP_VX,
      930    13531                        LEVEL=@E$S_VX, MID="'T'", AUX=E$OUOF_VX );
      931    13534    5                   GOTO POST;
      932    13535    5                   END;
      933    13536    5                IF IO_SIZEW < 8 THEN DO;
      934    13537        /*E*  ERROR: VXT-E$FIMAGE_D_SHORT_LB_VX-0
      935    13538              MESSAGE: Page 0 of debug record type 11 is less than 8 words.
      936    13539              DESCRIPTION: Self-explanatory.
      937    13540        */
      938    13541                        %SCREAM(
      939    13542                        ERR#=E$FIMAGE_D_SHORT_LB_VX,
      940    13543                        MID="'T'", LEVEL=@E$S_D_VX );
      941    13546                        %SCREAM(
      942    13547                        ERR#=E$FIMAGE_D_SKIP_VX,
      943    13548                        LEVEL=@E$S_VX, MID="'T'", AUX=E$OUOF_VX );
      944    13551    5                   GOTO POST;
      945    13552    5                   END;
      946    13553    4                PAGE_SIZE = 0;
      947    13554    4                J = 0;
      948    13555    4                TOTAL(11) = VX_IO_SIZEW;
      949    13556    4                PAGE(11) = VX_IO_SIZEW;
      950    13557    4                IF B$LBNTRY0.FRAME ~= 0
      951    13558    5                THEN DO ;
      952    13559    5                   OPRD_TYPE = B$LBNTRY0.NO_AUTO.OPNDTYP ;
      953    13560    5                   OPERAND   = B$LBNTRY0.NO_AUTO.OPERAND ;
      954    13561    5                   DISP      = B$LBNTRY0.NO_AUTO.OFFSET  ;
      955    13562    6                   DO CASE( OPRD_TYPE ) ;
      956    13563    6                     CASE( 4 ) ;
      957    13564    6                       RESULT = OPERAND ;
      958    13565
      959    13566    6                     CASE( 5 ) ;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:60   
      960    13567    6                       Q$ = PINCRW( VX_SC_BASE$, OPERAND * SIZEW(VX$SC) ) ;
      961    13568    6                       IF Q$ -> VX$SC.ATTR.SEGMENT
      962    13569    6                       THEN RESULT = VX_SEGID( Q$ -> VX$SC.SEG ) ;
      963    13570    6                       ELSE
      964    13571    6                          IF Q$ -> VX$SC.TYPE = 5
      965    13572    6                          THEN RESULT = BITBIN( '6003'O );
      966    13573    6                          ELSE RESULT = BITBIN( '6000'O );
      967    13574
      968    13575    6                     CASE(   1,
      969    13576    6                                     2,
      970    13577    6                                     3,
      971    13578    6                                     6 );
      972    13579    6                       MAP_INDEX = OPRD_MAP( OPRD_TYPE );
      973    13580    6                       IF OPERAND >= VX_PASS2_REF.SAT.COUNT_A(MAP_INDEX)
      974    13581    7                       THEN DO;
      975    13582
      976    13583    7                          CALL BAD_OPERAND_RANGE( -3 );
      977    13584                               %SCREAM(
      978    13585                               ERR#=E$FIMAGE_D_SKIP_VX,
      979    13586                               LEVEL=@E$S_VX,
      980    13587                               MID="'T'" );
      981    13590    7                          GOTO POST;
      982    13591    7                          END;
      983    13592    6                       Q$ = PINCRW(
      984    13593    6                               VX_PASS2_REF.SAT.L_START_A$(MAP_INDEX),
      985    13594    6                               OPERAND *
      986    13595    6                               VX_PASS2_REF.SAT.ENT_SIZE_A(MAP_INDEX));
      987    13596    6                       IF OPRD_TYPE = 1
      988    13597    6                       THEN RESULT = Q$ -> VX$SC.ADDRESS;
      989    13598    6                       ELSE RESULT = Q$ -> VXR$SAT.VALUE;
      990    13599
      991    13600    6                     CASE(ELSE);
      992    13601                            %NUMBER( NUM1=OPRD_TYPE );
      993    13618                            %SCREAM(
      994    13619                            ERR#=E$FIMAGE_D_BAD_OPRD_TYPE_VX,
      995    13620                            MID="'T'",
      996    13621                            LEVEL=@E$S_D_VX);
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:61   
      997    13624    6                       CALL TELL_PAGE_TYPE( -3 );
      998    13625                            %SCREAM(
      999    13626                            ERR#=E$FIMAGE_D_SKIP_VX,
     1000    13627                            MID="'T'", LEVEL=@E$S_VX );
     1001    13630    6                       GOTO POST;
     1002    13631    6                     END;                  /* Do case */
     1003    13632    5                   B$LBNTRY0.FRAME = RESULT + DISP ;
     1004    13633    5                   END ;
     1005    13634    5                DO I = 12 TO 15;
     1006    13635    5                   Q$ = PINCRW( VX_REC_BUF_START$, DEBUG_MAP(J) );
     1007    13636    5                   TSIZE = Q$ -> VX$HALF_A(0);
     1008    13637    5                   PSIZE = Q$ -> VX$HALF_A(1);
     1009    13638    5                   IF PAGE_SIZE < PSIZE THEN PAGE_SIZE = PSIZE;
     1010    13639    5                   TOTAL(I) = TSIZE;
     1011    13640    5                   PAGE(I)  = PSIZE;
     1012    13641    5                   J = J + 1;
     1013    13642    5                   END;                    /* Do i = typintntry to typdbgnam */
     1014    13643    5                IF PAGE_SIZE > VX_REC_BUF_SIZE THEN DO;
     1015    13644    5                   J = PAGE_SIZE - VX_REC_BUF_SIZE;
     1016    13645                        %ALLOCATE(
     1017    13646                        PTR$=Q$,
     1018    13647                        TYPE=@RL_DS_2,
     1019    13648                        SIZE=J);
     1020    13655    5                   VX_REC_BUF_SIZE = VX_REC_BUF_SIZE + J;
     1021    13656    5                   END;            /* If PAGE_SIZE > VX_REC_BUF_SIZE then do; */
     1022    13657
     1023    13658
     1024    13659        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:62   
     1025    13660    5                DO WHILE( '1'B );
     1026    13661    6                   IF MOD( IO_SIZEW, VX_REC_SIZE_A(RTYPE) ) ~= 0 THEN DO;
     1027    13662        /*E*  ERROR: VXT-E$FIMAGE_D_ENTRIES_VX-0
     1028    13663              MESSAGE: Debug record type %U1 does not contain an integral # of entries.
     1029    13664              DESCRIPTION: Self-explanatory.
     1030    13665        */
     1031    13666                           %NUMBER( NUM1=RTYPE );
     1032    13683                           %SCREAM(
     1033    13684                           ERR#=E$FIMAGE_D_ENTRIES_VX,
     1034    13685                           LEVEL=@E$S_D_VX, MID="'T'" );
     1035    13688                           %SCREAM(
     1036    13689                           ERR#=E$FIMAGE_D_SKIP_VX,
     1037    13690                           LEVEL=@E$S_VX, MID="'T'", AUX=E$OUOF_VX );
     1038    13693    6                      GOTO POST;
     1039    13694    6                      END;
     1040    13695
     1041    13696    6                   DO CASE( RTYPE - 11 );
     1042    13697    6                     CASE( 0, 4 );         /* Lb & pn */
     1043    13698    6                     CASE( 1 );            /* Ie */
     1044    13699    6                       INC = SIZEW( B$INTNTRY );
     1045    13700    6                       GOTO ES_CONTINUE;
     1046    13701    6                     CASE( 2 );            /* Es */
     1047    13702    6                       INC = SIZEW( B$EXST );
     1048    13703    6   ES_CONTINUE:
     1049    13704    7                       DO WHILE( P$ < REC_BUF_STOP$ );
     1050    13705    7                          SECT# = B$EXST.OU.SECTNUM;
     1051    13706    8                          IF SECT# >= SECT_COUNT THEN DO;
     1052    13707                                  %NUMBER( NUM1=SECT_COUNT, NUM2=SECT# );
     1053    13724                                  %SCREAM(
     1054    13725                                  ERR#=E$FIMAGE_SC_RANGE_VX,
     1055    13726                                  LEVEL=@E$S_VX, MID="'T'" );
     1056    13729    8                             SC_CURR$ = VX_SC_BASE$;
     1057    13730    8                             CALL TELL_PAGE_TYPE( 3 );
     1058    13731    8                             DISP = 0;
     1059    13732    8                             GOTO D_INC_P;
     1060    13733    8                             END;
     1061    13734    7                          SC_CURR$ = PINCRW( VX_SC_BASE$, SECT# * SIZEW(VX$SC) );
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:63   
     1062    13735    7                          DISP = B$EXST.OU.OFFSET;
     1063    13736    8                          IF SC_CURR$ -> VX$SC.SIZE < DISP THEN DO;
     1064    13737                                  %NUMBER( NUM1=SECT#, NUM2=DISP );
     1065    13754                                  %SCREAM(
     1066    13755                                  ERR#=E$FIMAGE_BAD_ADR_VX,
     1067    13756                                  MID="'T'",
     1068    13757                                  LEVEL=@E$S_VX);
     1069    13760    8                             CALL TELL_PAGE_TYPE( 3 );
     1070    13761    8                             DISP = 0;
     1071    13762    8                             END;
     1072    13763    7   D_INC_P:
     1073    13764    7                          B$EXST.ISADDR = SC_CURR$ -> VX$SC.ADDRESS + DISP;
     1074    13765    7                          P$ = PINCRW( P$, INC );
     1075    13766    7                          END;             /* Do while( P$ < REC_BUF_STOP$ ) */
     1076    13767
     1077    13768
     1078    13769
     1079    13770
     1080    13771    6                     CASE( 3 );            /* Vr */
     1081    13772    7                       DO WHILE( P$ < REC_BUF_STOP$ );
     1082    13773    7                          J = B$VREBL.ADDRTYP;
     1083    13774    8                          DO CASE ( J );
     1084    13775    8                            CASE( 0, 2, 3, 5, 6 );
     1085    13776    8                            CASE( 1 /* Static data */, 9 /* Virtual arrays */);
     1086    13777    8                              DISP = B$VREBL.ADR.W;
     1087    13778    8                              GOTO VR_CONTINUE;
     1088    13779    8                            CASE( 4 );     /*Dcb */
     1089    13780    8                              DISP = 0;
     1090    13781    8                              OPRD_TYPE = 3; /* Symref */
     1091    13782    8                              OPERAND = B$VREBL.IMPTR;
     1092    13783    8                              GOTO VX_CONTINUE_2;
     1093    13784    8                            CASE( 7 );
     1094    13785    8                              DISP = B$VREBL.IMPTR;
     1095    13786    8   VR_CONTINUE:
     1096    13787    8                              OPRD_TYPE = B$VREBL.OPNDTYP;
     1097    13788    8                              OPERAND   = B$VREBL.OPERAND;
     1098    13789    8   VX_CONTINUE_2:
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:64   
     1099    13790    9                              DO CASE( OPRD_TYPE );
     1100    13791    9                                CASE( 4 );
     1101    13792    9                                  RESULT  =  OPERAND;
     1102    13793    9                                CASE( 5 );
     1103    13794    9                                  Q$ = PINCRW( VX_SC_BASE$,
     1104    13795    9                                          OPERAND * SIZEW(VX$SC) );
     1105    13796    9                                  IF Q$ -> VX$SC.ATTR.SEGMENT
     1106    13797    9                                  THEN RESULT = VX_SEGID( Q$ -> VX$SC.SEG );
     1107    13798    9                                  ELSE
     1108    13799    9                                     IF Q$ -> VX$SC.TYPE = 5
     1109    13800    9                                     THEN RESULT = BITBIN( '6003'O );
     1110    13801    9                                     ELSE RESULT = BITBIN( '6000'O );
     1111    13802    9                                CASE(   1,
     1112    13803    9                                                2,
     1113    13804    9                                                3,
     1114    13805    9                                                6 );
     1115    13806    9                                  MAP_INDEX = OPRD_MAP( OPRD_TYPE );
     1116    13807    9                                  IF OPERAND >= VX_PASS2_REF.SAT.COUNT_A(MAP_INDEX)
     1117    13808   10                                  THEN DO;
     1118    13809
     1119    13810   10                                     CALL BAD_OPERAND_RANGE( -3 );
     1120    13811                                          %SCREAM(
     1121    13812                                          ERR#=E$FIMAGE_D_SKIP_VX,
     1122    13813                                          LEVEL=@E$S_VX,
     1123    13814                                          MID="'T'" );
     1124    13817   10                                     GOTO POST;
     1125    13818   10                                     END;
     1126    13819    9                                  Q$ = PINCRW(
     1127    13820    9                                          VX_PASS2_REF.SAT.L_START_A$(MAP_INDEX),
     1128    13821    9                                          OPERAND *
     1129    13822    9                                          VX_PASS2_REF.SAT.ENT_SIZE_A(MAP_INDEX));
     1130    13823    9                                  IF OPRD_TYPE = 1
     1131    13824    9                                  THEN RESULT = Q$ -> VX$SC.ADDRESS;
     1132    13825    9                                  ELSE RESULT = Q$ -> VXR$SAT.VALUE;
     1133    13826
     1134    13827    9                                CASE(ELSE);
     1135    13828        /*E*  ERROR: VXT-E$FIMAGE_D_BAD_OPRD_TYPE_VX-0
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:65   
     1136    13829              MESSAGE: Illegal operand type detected in debug records. Value = %U1.
     1137    13830              DESCRIPTION: Self-explanatory.
     1138    13831        */
     1139    13832                                       %NUMBER( NUM1=OPRD_TYPE );
     1140    13849                                       %SCREAM(
     1141    13850                                       ERR#=E$FIMAGE_D_BAD_OPRD_TYPE_VX,
     1142    13851                                       MID="'T'",
     1143    13852                                       LEVEL=@E$S_D_VX);
     1144    13855    9                                  CALL TELL_PAGE_TYPE( -3 );
     1145    13856                                       %SCREAM(
     1146    13857                                       ERR#=E$FIMAGE_D_SKIP_VX,
     1147    13858                                       MID="'T'", LEVEL=@E$S_VX );
     1148    13861    9                                  GOTO POST;
     1149    13862    9                                END;       /* Do case */
     1150    13863    8   VR_INC_P:
     1151    13864    8                              IF J=1 OR J=9 THEN B$VREBL.ADR.W = RESULT + DISP;
     1152    13865    8                              ELSE B$VREBL.IMPTR = RESULT + DISP;
     1153    13866    8                            CASE( 8 );
     1154    13867    8                              OPRD_TYPE = B$VREBL.OPNDTYP;
     1155    13868    8                              OPERAND   = B$VREBL.OPERAND;
     1156    13869    9                              IF OPRD_TYPE = 1 THEN DO;
     1157    13870    9                                 Q$ = PINCRW( VX_SC_BASE$,
     1158    13871    9                                         OPERAND * SIZEW(VX$SC) );
     1159    13872    9                                 B$VREBL.IMPTR = Q$ -> VX$SC.ADDRESS;
     1160    13873    9                                 IF Q$ -> VX$SC.ATTR.SEGMENT
     1161    13874    9                                 THEN B$VREBL.OPERAND = VX_SEGID( Q$ -> VX$SC.SEG );
     1162    13875    9                                 ELSE
     1163    13876    9                                    IF Q$ -> VX$SC.TYPE = 5
     1164    13877    9                                    THEN B$VREBL.OPERAND = BITBIN( '6003'O );
     1165    13878    9                                    ELSE B$VREBL.OPERAND = BITBIN( '6000'O );
     1166    13879    9                                 END;
     1167    13880    8                              ELSE
     1168    13881    9                                 IF OPRD_TYPE = 6 THEN DO;
     1169    13882    9                                    Q$ = PINCRW( VX_PASS2_REF.SAT.L_START.SR$, OPERAND
             13882                                             * SIZEW(VXR$SAT) );
     1170    13883    9                                    B$VREBL.IMPTR = Q$ -> VXR$SAT.SEG.OFFSET;
     1171    13884    9                                    B$VREBL.OPERAND = Q$ -> VXR$SAT.SEG.SEGID;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:66   
     1172    13885    9                                    END;
     1173    13886    9                                 ELSE DO;
     1174    13887        /*E*  ERROR: VXT-E$FIMAGE_BAD_VD_OPTYPE_VX-0
     1175    13888              MESSAGE: Object language error.  Invalid operand type for a variable debug
     1176    13889                       record with address type 8.  Type = %U1.
     1177    13890              DESCRIPTION: The operand type field must be either type 1 (section)
     1178    13891                           or type 6 (SEGREF) for variable debug record of address
     1179    13892                           type 8.
     1180    13893        */
     1181    13894                                         %NUMBER( NUM1=OPRD_TYPE );
     1182    13911                                         %SCREAM(
     1183    13912                                         ERR#=E$FIMAGE_BAD_VD_OPTYPE_VX,
     1184    13913                                         LEVEL=@E$S_VX, MID="'T'" );
     1185    13916    9                                    CALL TELL_PAGE_TYPE( 2 );
     1186    13917    9                                    END;
     1187    13918
     1188    13919
     1189    13920    8                            CASE( ELSE );
     1190    13921        /*E*  ERROR: VXT-E$FIMAGE_D_ADR_TYPE_VX-0
     1191    13922              MESSAGE: Illegal address type in variable debug record. Value = %U1.
     1192    13923              DESCRIPTION: Self-explanatory.
     1193    13924        */
     1194    13925                                   %NUMBER( NUM1=J );
     1195    13942                                   %SCREAM(
     1196    13943                                   ERR#=E$FIMAGE_D_ADR_TYPE_VX,
     1197    13944                                   MID="'T'",
     1198    13945                                   LEVEL=@E$S_VX);
     1199    13948    8                              CALL TELL_PAGE_TYPE( 3 );
     1200    13949    8                            END;           /* Do case( j ) */
     1201    13950    7                          P$ = PINCRW( P$, SIZEW( B$VREBL ) );
     1202    13951    8                          DO WHILE( P$ -> B$VREBL.DATATYP >= 60
     1203    13952    8                                  AND
     1204    13953    8                                  P$ -> B$VREBL.DATATYP <= 62 );
     1205    13954    8                             P$ = PINCRW( P$, SIZEW( B$VREBL ) );
     1206    13955    8                             IF P$ >= REC_BUF_STOP$ THEN GOTO VR_OUT;
     1207    13956    8                             END;      /* Do while ( P$ -> B$VREL.DATATYP ... */
     1208    13957    7                          END;             /* Do while( P$ < REC_BUF_STOP$ ); */
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:67   
     1209    13958    6                     CASE( ELSE );         /* Error */
     1210    13959        /*E*  ERROR: VXT-E$INTERNAL_FIMAGE_DEBUG_VX-0
     1211    13960              MESSAGE: Internal link error while processing debug record type = %U1.
     1212    13961              DESCRIPTION: Self-explanatory.
     1213    13962        */
     1214    13963                            %NUMBER( NUM1=RTYPE );
     1215    13980                            %SCREAM(
     1216    13981                            ERR#=E$INTERNAL_FIMAGE_DEBUG_VX,
     1217    13982                            LEVEL=@E$F_VX,
     1218    13983                            MID="'T'",
     1219    13984                            AUX=@E$OUOF_VX);
     1220    13987    6                     END;                  /* Do case( state ); */
     1221    13988    5   VR_OUT:
     1222    13989        /*Now write the record out */
     1223    13990    5                   CALL VXK$KEY( 1/*@RF*/, RTYPE, VX_CURR$ -> VX$NODE.NUM, PAGE# );
     1224    13991    5                   CALL VXI$WRITE( 1/*@RF*/, VX_REC_BUF_START$, IO_SIZEW, 1/*@RF*/ );
     1225    13992
     1226    13993    5                   IF RTYPE = 15 THEN IO_SIZEW = PAGE( 15 );
     1227    13994    5                   TOTAL( RTYPE ) = TOTAL( RTYPE ) - IO_SIZEW;
     1228    13995
     1229    13996    6                   DO WHILE( TOTAL( RTYPE) <= 0  );
     1230    13997    6                      RTYPE = RTYPE + 1;
     1231    13998    6                      PAGE# = -1;
     1232    13999    6                      IF RTYPE > 15 THEN GOTO POST;
     1233    14000    6                      END;
     1234    14001
     1235    14002    5                   PAGE# = PAGE# + 1;
     1236    14003    5   D_READ:
     1237    14004    5                   CALL VXK$KEY( 0/*@OF*/, RTYPE, J, PAGE# );
     1238    14005    5                   CALL VXI$READ( 0/*@OF*/, VX_REC_BUF_START$, PAGE(RTYPE),
     1239    14006    5                           0/*@OF*/    )                ALTRET( IO_ERROR_DEBUG );
     1240    14007    5                   P$ = VX_REC_BUF_START$;
     1241    14008    5                   RTYPE = VX_OK.KRTYPE;
     1242    14009    5                   PAGE# = VX_OK.KPAGE#;
     1243    14010    5                   IO_SIZEW = VX_IO_SIZEW;
     1244    14011    5                   IF IO_SIZEW  > 0
     1245    14012    5                   THEN REC_BUF_STOP$ = PINCRW( VX_REC_BUF_START$, IO_SIZEW  - 1 );
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:68   
     1246    14013    6                   ELSE DO;                /* 0 size */
     1247    14014        /*E*   ERROR: VXT-E$FIMAGE_D_ZERO_REC_SIZE_VX-0
     1248    14015              MESSAGE: 0 record size for debug record type = %U1.
     1249    14016                       Skipping debug processing.
     1250    14017              DESCRIPTION: Self-explanatory.
     1251    14018        */
     1252    14019                           %NUMBER( NUM1=RTYPE );
     1253    14036                           %SCREAM(
     1254    14037                           ERR#=E$FIMAGE_D_ZERO_REC_SIZE_VX,
     1255    14038                           LEVEL=@E$S_VX,
     1256    14039                           MID="'T'");
     1257    14042    6                      GOTO POST;
     1258    14043    6                      END;                 /* Else do; */
     1259    14044    5                   END;                    /* Do forever */
     1260    14045
     1261    14046
     1262    14047    4   IO_ERROR_DEBUG:
     1263    14048    5                DO CASE( VX_IO_STATUS );
     1264    14049    5                  CASE( 0/*@IO_EOF*/ );
     1265    14050    5                  CASE( 1/*@IO_NOKEY*/ );
     1266    14051        /*E*  ERROR: VXT-E$FIMAGE_D_NOKEY_VX-0
     1267    14052              MESSAGE: No such key error while processing debug record type = %U1.
     1268    14053                       Skipping debug processing.
     1269    14054              DESCRIPTION: Self-explanatory.
     1270    14055        */
     1271    14056                         %NUMBER( NUM1=RTYPE );
     1272    14073                         %SCREAM(ERR#=E$FIMAGE_D_NOKEY_VX,LEVEL=@E$S_VX,MID="'T'",AUX=
             14073                             @E$OUOF_VX);
     1273    14076    5                  CASE( 2/*@IO_LD*/ );
     1274    14077        /*E*  ERROR: VXT-E$FIMAGE_D_IO_LD_VX-0
     1275    14078              MESSAGE: Object language error. Lost data condition for
     1276    14079                       debug record type = %U1.  Attempting recovery.
     1277    14080              DESCRIPTION: Self-explanatory.
     1278    14081        */
     1279    14082                         %NUMBER( NUM1=RTYPE );
     1280    14099                         %SCREAM(ERR#=E$FIMAGE_D_IO_LD_VX, LEVEL=@E$S_VX,MID="'T'",AUX=
             14099                             @E$OUOF_VX );
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:69   
     1281    14102                         %ALLOCATE( PTR$=Q$, TYPE=@RL_DS_2, SIZE=VX_REC_BUF_SIZE );
     1282    14109    5                    VX_REC_BUF_SIZE = VX_REC_BUF_SIZE + VX_REC_BUF_SIZE;
     1283    14110    5                    GOTO D_READ;
     1284    14111    5                  END;                     /* Do case( VX_IO_STATUS ); */
     1285    14112
     1286    14113    4                GOTO POST;
     1287    14114    4                END;
     1288    14115    4             ELSE DO;                      /* Scream bloody murder */
     1289    14116        /*E*  ERROR: VXT-E$FIMAGE_UNKNOWN_REC_VX-0
     1290    14117              MESSAGE: Object language error: Unknown record type.
     1291    14118              DESCRIPTION: Self-explanatory.
     1292    14119        */
     1293    14120                     %SCREAM(
     1294    14121                     ERR#=E$FIMAGE_UNKNOWN_REC_VX,
     1295    14122                     LEVEL=@E$S_VX,
     1296    14123                     MID="'T'",
     1297    14124                     AUX=@E$OUOF_VX);
     1298    14127    4                END;
     1299    14128    3             END;                          /* Else do */
     1300    14129    2          END;                             /* Do forever */
     1301    14130        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:70   
     1302    14131    1   POST:
     1303    14132        /* Check if start specified */
     1304    14133    1       IF VX_OU_HEAD.START_ADDRESS.OPERAND_TYPE = 0 THEN RETURN;
     1305    14134        /* Yes => check if we are in the root */
     1306    14135    2       IF VX_CURR$ ~= VX_ROOT$ THEN DO;    /* Nope => error */
     1307    14136        /*E*  ERROR: VXT-E$FIMAGE_START_NOT_ROOT_VX-0
     1308    14137              MESSAGE: Start address not within root; ignored.
     1309    14138              DESCRIPTION: Self-explanatory.
     1310    14139        */
     1311    14140               %SCREAM(
     1312    14141               ERR#=E$FIMAGE_START_NOT_ROOT_VX,
     1313    14142               LEVEL=@E$S_VX,
     1314    14143               MID="'T'",
     1315    14144               AUX=@E$REFOUOF_VX);
     1316    14147    2          END;
     1317    14148    2       ELSE DO;                            /* Here => found start at root */
     1318    14149    3          IF VX_O.OPT.START >= 0 THEN DO;  /* This is a multiple */
     1319    14150        /*E*  ERROR: VXT-E$FIMAGE_MULT_START_ADR_VX-0
     1320    14151              MESSAGE: Multiple start addresses specified. First taken. Other(s) ignored.
     1321    14152              DESCRIPTION: Self-explanatory.
     1322    14153        */
     1323    14154                  %SCREAM(
     1324    14155                  ERR#=E$FIMAGE_MULT_START_ADR_VX,
     1325    14156                  LEVEL=@E$W_VX,
     1326    14157                  MID="'T'",
     1327    14158                  AUX=@E$REFOUOF_VX);
     1328    14161    3             END;                          /* If VX_O.OPT.START >= 0 then do; */
     1329    14162    3          ELSE DO;                         /* First start address */
     1330    14163    3             OPRD_TYPE = VX_OU_HEAD.START_ADDRESS.OPERAND_TYPE;
     1331    14164        /*    Now do start address resolution */
     1332    14165    3             OPERAND   = VX_OU_HEAD.START_ADDRESS.OPERAND;
     1333    14166    4             DO CASE( OPRD_TYPE );
     1334    14167    4               CASE( 4 );
     1335    14168    4                 RESULT  =   OPERAND;
     1336    14169
     1337    14170    4               CASE( 5 );
     1338    14171    4                 Q$ = PINCRW( VX_SC_BASE$, OPERAND * SIZEW(VX$SC) );
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:71   
     1339    14172    4                 IF Q$ -> VX$SC.ATTR.SEGMENT
     1340    14173    4                 THEN RESULT = VX_SEGID( Q$ -> VX$SC.SEG );
     1341    14174    4                 ELSE
     1342    14175    4                    IF Q$ -> VX$SC.TYPE = 5
     1343    14176    4                    THEN RESULT = BITBIN( '6003'O );
     1344    14177    4                    ELSE RESULT = BITBIN( '6000'O );
     1345    14178
     1346    14179    4               CASE(  1,
     1347    14180    4                               2,
     1348    14181    4                               3,
     1349    14182    4                               6 );
     1350    14183    4                 MAP_INDEX = OPRD_MAP( OPRD_TYPE );
     1351    14184    4                 IF OPERAND >= VX_PASS2_REF.SAT.COUNT_A(MAP_INDEX)
     1352    14185    5                 THEN DO;
     1353    14186    5                    CALL BAD_OPERAND_RANGE( -4 );
     1354    14187        /*E*  ERROR: VXT-E$FIMAGE_SKIP_START_VX-0
     1355    14188              MESSAGE: Skipping start address specification.
     1356    14189              DESCRIPTION: Self-explanatory.
     1357    14190        */
     1358    14191                         %SCREAM(
     1359    14192                         ERR#=E$FIMAGE_SKIP_START_VX,
     1360    14193                         LEVEL=@E$S_VX,
     1361    14194                         MID="'T'",
     1362    14195                         AUX=@E$OUOF_VX);
     1363    14198    5                    RETURN;
     1364    14199    5                    END;
     1365    14200    4                 Q$ = PINCRW( VX_PASS2_REF.SAT.L_START_A$(MAP_INDEX),
     1366    14201    4                         OPERAND * VX_PASS2_REF.SAT.ENT_SIZE_A(MAP_INDEX) );
     1367    14202    4                 IF OPRD_TYPE = 1
     1368    14203    4                 THEN RESULT = Q$ -> VX$SC.ADDRESS;
     1369    14204    4                 ELSE RESULT = Q$ -> VXR$SAT.VALUE;
     1370    14205
     1371    14206    4               CASE(ELSE);
     1372    14207        /*E*  ERROR: VXT-E$FIMAGE_S_BAD_OPRD_TYPE_VX-0
     1373    14208              MESSAGE: Illegal operand type detected in start specification. Value = %U1.
     1374    14209              DESCRIPTION: Self-explanatory.
     1375    14210        */
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:72   
     1376    14211                      %NUMBER( NUM1 = OPRD_TYPE );
     1377    14228                      %SCREAM(
     1378    14229                      ERR#=E$FIMAGE_S_BAD_OPRD_TYPE_VX,
     1379    14230                      MID="'T'",
     1380    14231                      LEVEL=@E$S_D_VX);
     1381    14234                      %SCREAM(
     1382    14235                      ERR#=E$FIMAGE_SKIP_START_VX,
     1383    14236                      LEVEL=@E$S_VX, MID="'T'", AUX=E$OUOF_VX );
     1384    14239    4                 RETURN;
     1385    14240    4               END;                        /* Do case */
     1386    14241    3             RESULT = RESULT + VX_OU_HEAD.START_ADDRESS.OFFSET;
     1387    14242    3             IF ( VX_ROOT$ -> VX$NODE.ADDR_START.RDATA <= RESULT
     1388    14243    3                     AND
     1389    14244    3                     VX_ROOT$ -> VX$NODE.ADDR_STOP.RDATA  >= RESULT         )
     1390    14245    3                     OR
     1391    14246    3                     ( VX_ROOT$ -> VX$NODE.ADDR_START.RPROC <= RESULT
     1392    14247    3                     AND
     1393    14248    3                     VX_ROOT$ -> VX$NODE.ADDR_STOP.RPROC >= RESULT ) THEN
     1394    14249    3                VX_O.OPT.START = RESULT;   /* Within root bounds */
     1395    14250    4             ELSE DO;
     1396    14251                     %SCREAM(
     1397    14252                     ERR#=E$FIMAGE_START_NOT_ROOT_VX,
     1398    14253                     LEVEL=@E$W_VX, MID="'T'", AUX=@E$REFOUOF_VX );
     1399    14256    4                END;
     1400    14257
     1401    14258    3             END;                          /* Else do; */
     1402    14259    2          END;                             /* Else do; */
     1403    14260        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:73   
     1404    14261    1   TELL_PAGE_TYPE: PROC( SEVERITY );
     1405    14262
     1406    14263    2   DCL SEVERITY     SBIN;
     1407    14264
     1408    14265
     1409    14266    2       ERR_WORD_DISP = POFFW( P$, VX_REC_BUF_START$ );
     1410    14267
     1411    14268    2       IF SEVERITY < 0 THEN ERR_LEVEL = - SEVERITY;
     1412    14269    2       ELSE ERR_LEVEL = SEVERITY;
     1413    14270
     1414    14271    3       IF RTYPE = 10 THEN DO;
     1415    14272        /*E*  ERROR: VXT-E$FIMAGE_STYPE_KOFSET_VX-0
     1416    14273              MESSAGE: In record type 10 (sub-type %U1). Key offset = %U2 (octal).
     1417    14274                       Word displacement into record = %U3 (octal).
     1418    14275        */
     1419    14276               %NUMBER( NUM1="VX_OK.KSTYPE", NUM2="VX_OK.KOFSET", BASE2=8 );
     1420    14293    3          ERR_NUM = 1741;
     1421    14294    3          END;
     1422    14295    3       ELSE DO;
     1423    14296        /*E*  ERROR: VXT-E$FIMAGE_TYPE_PAGE_VX-0
     1424    14297              MESSAGE: The error occured in page %U1 of record type %U2.
     1425    14298                       Word displacement into page = %U3 (octal).
     1426    14299              DESCRIPTION: Self-explanatory.
     1427    14300        */
     1428    14301               %NUMBER( NUM1=PAGE#, NUM2=RTYPE );
     1429    14318    3          ERR_NUM = 1703;
     1430    14319    3          END;
     1431    14320
     1432    14321            %NUMBER( NUM3=ERR_WORD_DISP, BASE3=8 );
     1433    14338
     1434    14339            %SCREAM( ERR#=ERR_NUM, MID="'T'", LEVEL=ERR_LEVEL, AUX=E$OUOF_VX );
     1435    14342
     1436    14343
     1437    14344    2   END TELL_PAGE_TYPE;
     1438    14345
     1439    14346        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:74   
     1440    14347    1   REPORT_BAD_ADDRESS_GENERATION: PROC( ERR_VALUE );
     1441    14348
     1442    14349    2   DCL ERR_VALUE     UBIN;
     1443    14350
     1444    14351        /*E*  ERROR: VXT-E$FIMAGE_BAD_ADR_VX-0
     1445    14352              MESSAGE: Object language error.  Address generation extends past boundary
     1446    14353                       for section number %U1.  Displacement/size = %U2.
     1447    14354              DESCRIPTION: Self-explanatory.
     1448    14355        */
     1449    14356
     1450    14357              %NUMBER( NUM1="VX_OK.KSECT#",  NUM2=ERR_VALUE );
     1451    14374
     1452    14375              %SCREAM( ERR#=E$FIMAGE_BAD_ADR_VX, MID="'T'", LEVEL=@E$F_D_VX );
     1453    14378
     1454    14379    2       CALL TELL_PAGE_TYPE( -4 );
     1455    14380
     1456    14381    2   END REPORT_BAD_ADDRESS_GENERATION;
     1457    14382
     1458    14383        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:75   
     1459    14384    1   BAD_OPERAND_RANGE: PROC( SEVERITY );
     1460    14385
     1461    14386    2   DCL SEVERITY      SBIN;
     1462    14387
     1463    14388        /*E*  ERROR: VXT-E$FIMAGE_OPRD_RANGE_VX-0
     1464    14389              MESSAGE: Operand number is out of range for operand type = %U1.
     1465    14390                       Permissible range: 0 - %U2.  Attempted access = %U3.
     1466    14391              DESCRIPTION: Self-explanatory.
     1467    14392        */
     1468    14393
     1469    14394    2       MAP_INDEX = VX_PASS2_REF.SAT.COUNT_A(MAP_INDEX) - 1;
     1470    14395
     1471    14396            %NUMBER( NUM1=OPRD_TYPE, NUM2=MAP_INDEX, NUM3=OPERAND );
     1472    14413
     1473    14414            %SCREAM( ERR#=E$FIMAGE_OPRD_RANGE_VX, LEVEL=SEVERITY, MID="'T'" );
     1474    14417
     1475    14418    2       CALL TELL_PAGE_TYPE( SEVERITY );
     1476    14419
     1477    14420    2   END BAD_OPERAND_RANGE;
     1478    14421
     1479    14422        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:76   
     1480    14423    1   REPORT_BAD_RELOC_VALUE: PROC( ERR_NUM, ERR_VALUE );
     1481    14424
     1482    14425    2   DCL ERR_NUM       UBIN;
     1483    14426    2   DCL ERR_VALUE     UBIN;
     1484    14427
     1485    14428    2       IF P$ -> R1.OPNDTYP = 0 THEN ERR_FORM = 2;
     1486    14429    2       ELSE ERR_FORM = 1;
     1487    14430
     1488    14431            %NUMBER( NUM1=ERR_FORM, NUM2=ERR_VALUE );
     1489    14448
     1490    14449            %SCREAM( ERR#=ERR_NUM, MID="'T'", LEVEL=@E$F_D_VX );
     1491    14452
     1492    14453    2       CALL TELL_PAGE_TYPE( -4 );
     1493    14454
     1494    14455    2   END REPORT_BAD_RELOC_VALUE;
     1495    14456
     1496    14457        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:77   
     1497    14458    1   END VXT$FIMAGE;

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:78   
--  Include file information  --

   B_SEGIDS_C.:E05TOU  is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXT$FIMAGE.

   Procedure VXT$FIMAGE requires 2365 words for executable code.
   Procedure VXT$FIMAGE requires 116 words of local(AUTO) storage.

    No errors detected in file VXT$FIMAGE.:E05TSI    .

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:79   

 Object Unit name= VXT$FIMAGE                                 File name= VXT$FIMAGE.:E05TOU
 UTS= JUL 30 '97 08:38:00.80 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none    96    140  VX_CONST_DCB
    2   Data  even  none     1      1  VXT$FIMAGE
    3  RoData even  UTS     83    123  VXT$FIMAGE
    4   DCB   even  none     0      0  M$OF
    5   Proc  even  none  2365   4475  VXT$FIMAGE
    6  RoData even  none   225    341  VXT$FIMAGE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     5      0   yes            yes      Std        0  VXT$FIMAGE
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:80   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       4 VXK$KEY
 yes     yes           Std       4 VXI$READ
         yes           Std       5 VXU$SETUP
         yes           Std       4 VXE$ERROR
         yes           Std       3 VXA$GET
         yes           Std       5 VXD$B2C
 yes     yes           Std       4 VXI$WRITE
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_O_KEY_BUF                          VX_OK
     VX_OU_HEAD                            VX_PRIMARY_ENTDEF_GOT                 VX_ROOT$
     VX_CURR$                              VX_ERRORS                             VX_ERR_SEV
     VX_M_FREE                             VX_M_ALL                              VX_M_BASE_PTR
     VX_O                                  VX_EFIELD1                            VX_EFIELD2
     VX_EFIELD3                            VX_TARGET_COUNT                       VX_SOURCE_COUNT
     VX_IO_STATUS                          VX_IO_SIZEW                           VX_REC_BUF_START$
     VX_REC_BUF_SIZE                       VX_BREF_START$                        VX_NEXT_BREF$
     VX_BREF_SIZE                          VX_BREF_ADR                           VX_BREF_INSTANCE
     VX_BREF_DEFINITION                    VX_TSX0_OVERLAY                       VX_REC_SIZE_A
     VX_SC_PASS2$                          VX_SC_BASE$                           VX_PASS2_REF
     VX_SEGID                              VX_DCB_SIZEW                          M$OF
     B_VECTNIL
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:81   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:82   


        1        1       /*M* VXT$FIMAGE - TO PERFORM IMAGE FORMATION FROM OBJECT UNITS AND PROCESS DEBUG REC
                 1        ORDS*/
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=4,IND=3,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC     */
        8        8        /*F* NAME:        VXT$FIMAGE
        9        9        PURPOSE:    To perform image formation from object units and process debug records.
       10       10        Description:
       11       11        VXT$FIMAGE is entered once per object unit during pass 2. A keyed read is first
       12       12        performed to position the object file to the correct object unit for program/
       13       13        relocation records(type 10). Subsequent reads are sequential. Upon the successful
       14       14        completion of the read the decoded key variables are interrogated to determine
       15       15        which type of record was read. If it is a type 10 record then the sub-type
       16       16        variable is interrogated to determine whether it is a text record of a
       17       17        relocation record.  If it is a debug record (types 11-15) then if debug records
       18       18        are requested in the run unit, they are processed.
       19       19        Program records which are text are merely set up within the image formation
       20       20        buffers and moved into placed. Relocation records are processed by setting up
       21       21        the relocation item within the image formation buffers and appling the specified
       22       22        relocation operations to the item. Many range, integrity, and consistency checks
       23       23        are performed during all types of processing.
       24       24                                                                        */
       25       25
       26       26        VXT$FIMAGE: PROC;

     26  5 000000   000000 700200 xent  VXT$FIMAGE   TSX0  ! X66_AUTO_0
         5 000001   000164 000000                    ZERO    116,0

       27       27
       28       28        %INCLUDE VX_INC_C;
       29    10744        %INCLUDE B_SEGIDS_C;
       30    11283        %SET LISTMAC='1'B;
       31    11284        %SET LISTSUB='1'B;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:83   
       32    11285        %SET LISTEXP='1'B;
       33    11286        %BANNER( ARG=SUBS );
             11287        %LSET LISTDIR='0'B;

             11294    1   /*******************************************************************************
             11295    1   *                                                                              *
             11296    1   *                          SUBS                                                 *
             11297    1   *                                                                              *
             11298    1   *******************************************************************************/

       34    11302        %B$RELOCSUBS;
             11303        %EQU OPERSECT=1 ;
             11304        %EQU OPEREREF=2 ;
             11305        %EQU OPERSREF=3 ;
             11306        %EQU OPERCONST=4 ;
             11307        %EQU OPERSEGID=5 ;
             11308        %EQU OPERSEGREF=6 ;
             11309        %EQU OPERFREF=15 ;
             11310        %EQU FIELDLH=0 ;
             11311        %EQU FIELDRH=1 ;
             11312        %EQU FIELDSEGID=2 ;
             11313        %EQU FIELDY=3 ;
             11314        %EQU FIELDLAF=3 ;
             11315        %EQU FIELDWORD=4 ;
             11316        %EQU EVALOPIGNORE=0 ;                   /* Value not present, r = E(operand)  */
             11317        %EQU EVALOPADD=1 ;                      /* Add: r = E(operand) + Value  */
             11318        %EQU EVALOPSUB=2 ;                      /* Subtract: r = E(operand) - Value */
             11319        %EQU EVALOPMULT=3 ;                     /* Multiply: r = E(operand) * Value */
             11320        %EQU EVALOPDIV=4 ;                      /* Divide:   r = E(operand) / Value */
             11321        %EQU EVALOPSHFTR=5 ;               /* Shift right: r = E(operand) SR by Value */
             11322        %EQU EVALOPSHFTL=6 ;               /* Shift left:  r = E(operand) SL by Value */
             11323        %EQU EVALOPRPT=7 ;       /* Operand is a repeat count. Repeat Value n times*/
             11324        %EQU EVALOPFREF=8 ;
             11325        %EQU RELOCOPADD=1 ;
             11326        %EQU RELOCOPSUB=2 ;
             11327        %EQU RELOCOPMULT=3 ;
             11328        %EQU RELOCOPDIV=4 ;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:84   
             11329        %EQU RELOCOPSTORER=14 ;
             11330        %EQU RELOCOPSTOREL=15 ;
       35    11332        %B$RECORDSUBS;
             11333        %EQU TYPHEAD=0 ;
             11334        %EQU TYPDNAM=1 ;
             11335        %EQU TYPRNAM=2 ;
             11336        %EQU TYPSECT=3 ;
             11337        %EQU TYPEDEF=4 ;
             11338        %EQU TYPEREF=5 ;
             11339        %EQU TYPSDEF=6 ;
             11340        %EQU TYPSREF=7 ;
             11341        %EQU TYPSEGDEF=8 ;
             11342        %EQU TYPSEGREF=9 ;
             11343        %EQU TYPPROG=10 ;
             11344        %EQU SUBTYPPROG=0 ;
             11345        %EQU SUBTYPREL=1 ;
             11346        %EQU TYPLOGBLK=11 ;
             11347        %EQU TYPINTNTRY=12 ;
             11348        %EQU TYPEXST=13 ;
             11349        %EQU TYPVREBL=14 ;
             11350        %EQU TYPDBGNAM=15 ;
             11351        %EQU TYPLV1LB=16 ;
             11352        %EQU TYPLV1=17 ;
             11353        %EQU TYPDATASEG=18 ;
             11354        %EQU TYPRUM=20 ;
             11355        %EQU TYPBIRTH=21 ;
             11356        %EQU TYPPLOVER=22 ;
             11357        %EQU TYPCOMPID=23 ;
             11358        %EQU TYPROS=30 ;
       36    11360        %B$SECTIONSUBS;
             11361        %EQU DATASECTION=0 ;
             11362        %EQU CODESECTION=1 ;
             11363        %EQU UCOMSECTION=2 ;
             11364        %EQU RLCOMSECTION=3 ;
             11365        %EQU LCOMSECTION=4 ;
             11366        %EQU DCBSECTION=5 ;
             11367        %EQU ROSECTION=6 ;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:85   
             11368        %EQU RORLCOMSECTION=7 ;
             11369        %EQU ROLCOMSECTION=8 ;
             11370        %EQU EVENBOUNDSECTION=0 ;
             11371        %EQU ODDBOUNDSECTION=1 ;
             11372        %EQU EIGHTBOUNDSECTION=2 ;
             11373        %EQU PAGEBOUNDSECTION=3 ;
       37    11375        %BANNER(ARG=B$DNAME );
             11376        %LSET LISTDIR='0'B;

             11383    1   /*******************************************************************************
             11384    1   *                                                                              *
             11385    1   *                          B$DNAME                                                *
             11386    1   *                                                                              *
             11387    1   *******************************************************************************/

       38    11391        %B$DNAME( NAME=B$DNAME, STCLASS=BASED );
             11392            %LSET STR='BASED        ';
             11393            %IF
             11394                '0'B;
             11396            %ELSE;
             11397                %LSET INIT=/*;
             11398            %ENDIF;
             11399    1   DCL 1 B$DNAME BASED ALIGNED,
             11400    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
             11401                /*K*  COUNT is the number of characters in the name */
             11402            %IF
             11403                '0'B;
             11406            %ELSE;
             11407    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;
             11408            %ENDIF;
       39    11410        %VX$SC;
             11411        %LSET LISTDIR='0'B;

             11423    1   /*******************************************************************************
             11424    1   *                                                                              *
             11425    1   *                          VX$SC                                                 *
             11426    1   *                                                                              *
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:86   
             11427    1   *******************************************************************************/

             11432    1   DCL 1 VX$SC BASED ALIGNED,
             11433    1         2 SEG UBIN(3) UNAL,
             11434                /*K*  SEG - The segment number of this section */
             11435    1         2 TYPE UBIN(6) UNAL,
             11436                /*K*  TYPE -
             11437                      Type code      Section type
             11438                      ---------      ------------
             11439                          0          Data control section with write access.
             11440                          1          Procedure control section.
             11441                          2          Unlabeled common, name pointer must be zero.
             11442                          3          Labeled common, with mandatory name pointer.
             11443                                     This is for labeled common which must be
             11444                                     in the root.
             11445                          4          Labeled common, with mandatory name pointer.
             11446                                     This is for labeled common which need not
             11447                                     be in the root.
             11448                          5          DCB, word 1 is name pointer.
             11449                          6          Data control section with read only access,
             11450                                     word 1 = 0 or name pointer.      */
             11451    1         2 EMPTY BIT(1) UNAL,
             11452                /*K*  EMPTY is the empty bit.  This bit is set if the control
             11453                      section is of size zero.  */
             11454    1         2 ATTR UNAL,
             11455    1           3 INT  UBIN(2) UNAL,
             11456                  /*K*  INT is the Section initialization.  */
             11457    1           3 SEGMENT BIT(1) UNAL,
             11458                  /*K* SEGMENT is set if the Section is defined in a data
             11459                       segment.  */
             11460    1           3 ALL BIT(1) UNAL,
             11461                  /*K*  ALL is set if the Section is allocated.  */
             11462    1           3 PRE_DCB BIT(1) UNAL,
             11463                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
             11464    1           3 MES_INIT BIT(1) UNAL,
             11465    1           3 ALIGN UBIN(2) UNAL,
             11466                  /*K*  ALIGN is the Section alignment.  */
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:87   
             11467    1         2 ADDRESS UBIN HALF UNAL,
             11468                /*K*  ADDRESS is the address within the Instruction Segment of
             11469                      the entry point of the external procedure.  */
             11470    1         2 NAME_DISP SBIN HALF UNAL,
             11471                /*K*  NAME_DISP is the Name index.  */
             11472    1         2 SIZE UBIN HALF UNAL,
             11473                /*K*  SIZE is the size, in words, of the section.  */
             11474    1         2 NODE# UBIN HALF UNAL,
             11475                /*K*  NODE# is the Node number of section.  */
             11476    1         2 COM_LINK UBIN HALF UNAL;
             11477                /*K*  COM_LINK is used internally by linker to link common sections */

             11487    1   /*******************************************************************************
             11488    1   *                                                                              *
             11489    1   *                          VX$SECT                                                *
             11490    1   *                                                                              *
             11491    1   *******************************************************************************/

             11496    1   DCL 1 VX$SECT BASED ALIGNED,
             11497    1         2 TYPE UBIN BYTE UNAL,
             11498                /*K*  TYPE -
             11499                      Type code      Section type
             11500                      ---------      ------------
             11501                          0          Data control section with write access.
             11502                          1          Procedure control section.
             11503                          2          Unlabeled common, name pointer must be zero.
             11504                          3          Labeled common, with mandatory name pointer.
             11505                                     This is for labeled common which must be
             11506                                     in the root.
             11507                          4          Labeled common, with mandatory name pointer.
             11508                                     This is for labeled common which need not
             11509                                     be in the root.
             11510                          5          DCB, word 1 is name pointer.
             11511                          6          Data control section with read only access,
             11512                                     word 1 = 0 or name pointer.
             11513                          7          Constant labeled common, with mandatory name pointer.
             11514                                     This is for labeled common which must be
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:88   
             11515                                     in the root.
             11516                          8          Constant labeled common, with mandatory name pointer.
             11517                                     This is for labeled common which need not
             11518                                     be in the root.                        */
             11519    1         2 * BIT(1),
             11520                /*K*  * is reserved for future use and must be zero. */
             11521    1         2 INITZERO BIT(1),
             11522                /*K*  INITZERO - if 1, initialize with zero.  */
             11523    1         2 INITUTS BIT(1),
             11524                /*K*  INITUTS - if 1, initialize with UTS.  */
             11525    1         2 SEGMENT BIT(1),
             11526                /*K*  SEGMENT - if 1, specifies that this section is
             11527                                to be placed in the segment specified by
             11528                                SEG_NPOINTER.  */
             11529    1         2 * BIT(3),
             11530                /*K*  * is reserved for future use and must be zero. */
             11531    1         2 BOUND UBIN(2) UNAL,
             11532                /*K*  BOUND - bits 6-7 - defines starting location.
             11533                              00 - starts on even word
             11534                              01 - starts on odd word
             11535                              10 - starts on multiple of 8
             11536                              11 - starts on page boundary     */
             11537    1         2 SIZE UBIN HALF UNAL,
             11538                /*K*  SIZE is the size, in words, of the section.  */
             11539    1         2 NPOINTER SBIN HALF UNAL,
             11540                /*K*  NPOINTER is the word displacement into the name record
             11541                      (TYPE 1) locating the name of this section.  If the
             11542                      field is negative, the section has no name.  */
             11543    1         2 MBZ UBIN HALF UNAL,
             11544                /*K*  MBZ is reserved for future expansion and must be zero. */
             11545    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             11546                /*K*  SEG_NPOINTER locates a name in the Definition Names
             11547                      Section.  The name must be a valid segment name
             11548                      recognized by the linker.  */
             11549    1         2 G66 REDEF MBZ,
             11550                /*K*  G66 is not used on CP-6. */
             11551    1           3 * BIT(9),
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:89   
             11552    1           3 NSAB BIT(9);
       40    11555        %VX$LLIST;
             11556        %LSET LISTDIR='0'B;

             11567    1   /*******************************************************************************
             11568    1   *                                                                              *
             11569    1   *                          VX$LLIST                                               *
             11570    1   *                                                                              *
             11571    1   *******************************************************************************/

             11576    1   DCL 1 VX$LLIST                BASED     ALIGNED,
             11577    1         2 LINK$                  PTR  ALIGNED,
             11578    1         2 ITEM$                  PTR  ALIGNED;
       41    11581        %VX$NODE;
             11582        %LSET LISTDIR='0'B;

             11593    1   /*******************************************************************************
             11594    1   *                                                                              *
             11595    1   *                          VX$NODE                                                *
             11596    1   *                                                                              *
             11597    1   *******************************************************************************/

             11613    1   DCL 1 VX$NODE      ALIGNED    BASED,
             11614    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             11615    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             11616    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             11617    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             11618    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             11619                              to list of file nodes for this node            */
             11620    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             11621    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             11621                  /* Head pointer to shared library list */
             11622    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             11622                  /* Head pointer to list of shared libraries
             11623                                          which have been mapped to included libraries */
             11624    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             11625    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:90   
             11626    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             11627    1         2 ADDR_START REDEF  ADDR_START_A,
             11628    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             11629    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             11630    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             11631    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             11632    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             11633    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             11634    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             11635    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             11636    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             11637    1         2 START_PAGE# REDEF START_PAGE#_A,
             11638    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             11639    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             11640    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             11641    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             11642    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             11643    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             11644    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             11645    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             11646    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             11646                  /* Starting pointer for common sections for this node */
             11647    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             11647                  /* Stopping pointer for common sections for this node */
             11648    1         2 L_START,
             11649    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             11650    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             11651    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             11652    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             11653    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             11654    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             11655    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             11656    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             11657    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             11658    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             11659    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             11660    1         2 L_STOP,
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:91   
             11661    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             11662    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             11663    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             11664    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             11665    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             11666    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             11667    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             11668    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             11669    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             11670    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             11671    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             11672    1         2 L_SIZE,
             11673    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             11674    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             11675    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             11676    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             11677    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             11678    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             11679    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             11680    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             11681    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             11682    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             11683    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             11684    1         2 L_PREV_SIZE,
             11685    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             11686    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             11687    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             11688    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             11689    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             11690    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             11691    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             11692    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             11693    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             11694    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             11695    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             11696    1         2 BIT_MAP                ALIGNED,
             11697    1           3 DATA                  ALIGNED,
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:92   
             11698    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             11699    1           3 RPROC                 ALIGNED,
             11700    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             11701    1           3 ROS                   ALIGNED,
             11702    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             11703    1         2 L_SC_START,
             11704    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             11705    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             11706    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             11707    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             11708    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             11709    1         2 L_SC_STOP,
             11710    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             11711    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             11712    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             11713    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             11714    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             11715    1         2 PROMOTE_HEAD,
             11716    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             11717    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             11718    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             11719    1         2 PROMOTE_TAIL,
             11720    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             11721    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             11722    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             11723    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             11724    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             11725    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             11726    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             11727    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       42    11731        %VXR$TMPLT;
             11732        %LSET LISTDIR='0'B;

             11744    1   /*******************************************************************************
             11745    1   *                                                                              *
             11746    1   *                          VXR$TMPLT                                              *
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:93   
             11747    1   *                                                                              *
             11748    1   *******************************************************************************/

             11753    1   DCL 1 VXR$TMPLT BASED ALIGNED,
             11754    1         2 NPOINTER SBIN HALF UNAL,
             11755                /*K*  NPOINTER is the word index to the symbol name.  */
             11756    1         2 SREF BIT(1) UNAL,
             11757                /*K*  SREF is set is this is a secondary reference.  */
             11758    1         2 READ_ONLY BIT(1) UNAL,
             11759    1         2 GOT BIT(1) UNAL,
             11760                /*K*  GOT is set if got the OU name displacement.  */
             11761    1         2 STATE REDEF GOT BIT(1) UNAL,
             11762    1         2 OPOINTER UBIN(15) UNAL;
             11763                /*K*  OPOINTER is the word index to the OU name.  */

             11785    1   /*******************************************************************************
             11786    1   *                                                                              *
             11787    1   *                          VXR$SAT                                                *
             11788    1   *                                                                              *
             11789    1   *******************************************************************************/

             11793    1   DCL 1 VXR$SAT                 ALIGNED   BASED,
             11794    1         2 VALUE        UBIN(36)  ALIGNED,
             11795    1         2 SEG   REDEF  VALUE,
             11796    1           3 OFFSET     UBIN(18)  UNAL,
             11797    1           3 *          BIT(6)    UNAL,
             11798    1           3 SEGID      UBIN(12)  UNAL,
             11799    1         2 BELOW        BIT(1)    UNAL,
             11800    1         2 *            BIT(17)   UNAL,
             11801    1         2 NODE#        UBIN(18)  UNAL;
       43    11803        %VX$WORD;
             11804        %LSET LISTDIR='0'B;

             11815    1   /*******************************************************************************
             11816    1   *                                                                              *
             11817    1   *                          VX$WORD                                                *
             11818    1   *                                                                              *
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:94   
             11819    1   *******************************************************************************/

             11824    1   DCL VX$WORD_A(0:0)       UBIN(36) ALIGNED    BASED;
             11825    1   DCL VX$HALF_A(0:0)       UBIN(18) HALIGNED   BASED;
             11826    1   DCL VX$BYTE_A(0:0)       UBIN( 9) CALIGNED   BASED;
             11827    1   DCL VX$CHAR_A(0:0)       CHAR( 1) UNAL       BASED;
             11828        /**/
             11829    1   DCL VX$WORD_SBIN_A(0:0)  SBIN WORD ALIGNED   BASED;
             11830    1   DCL VX$HALF_SBIN_A(0:0)  SBIN HALF HALIGNED  BASED;
             11831    1   DCL VX$BYTE_SBIN_A(0:0)  SBIN HALF CALIGNED  BASED;
             11832    1   DCL VX$BIT_A(0:0)        BIT(36)   ALIGNED   BASED;
       44    11835        %B;
             11836        %LSET LISTDIR='0'B;

             11843    1   /*******************************************************************************
             11844    1   *                                                                              *
             11845    1   *                          BIT                                                 *
             11846    1   *                                                                              *
             11847    1   *******************************************************************************/

       45    11851    1   DCL FIRST           BIT(1)    ALIGNED   AUTO;
       46    11852    1   DCL DESCENDANT      BIT(1)    ALIGNED   AUTO;
       47    11853    1   DCL CHECK_OVERLAY   BIT(1)    ALIGNED   AUTO;
       48    11854        %E;
             11855        %LSET LISTDIR='0'B;

             11862    1   /*******************************************************************************
             11863    1   *                                                                              *
             11864    1   *                          ENTRY                                                 *
             11865    1   *                                                                              *
             11866    1   *******************************************************************************/

       49    11870        %ENTRIES;
             11871    1   DCL VXE$ERROR       ENTRY(4);
             11872    1   DCL VXE$ERR         ENTRY(3);
             11873    1   DCL VXE$MERC        ENTRY;
             11874    1   DCL VXE$ERRMSG      ENTRY(3);
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:95   
             11875    1   DCL VXR$READ        ENTRY( 3 );
             11876    1   DCL VXW$WRITE       ENTRY( 3 );
             11877    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             11878    1   DCL VXD$B2C         ENTRY( 5 );
             11879    1   DCL VXD$C2B         ENTRY( 3 );
             11880    1   DCL VXA$GET         ENTRY( 3 );
             11881    1   DCL VXF$FREE        ENTRY( 3 );
             11882    1   DCL VXQ$SORT        ENTRY( 7 );
             11883    1   DCL VXY$YESNO       ENTRY( 1 );
       50    11885        %ENTRIES_IO;
             11886    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
             11887    1   DCL VXF$CLOSE       ENTRY(3);
             11888    1   DCL VXU$PREAD       ENTRY(12);
             11889    1   DCL VXK$KEY         ENTRY(4);
             11890    1   DCL VXI$READ        ENTRY(4)  ALTRET;
             11891    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
       51    11893    1   DCL VXU$SETUP       ENTRY(5);
       52    11894        %PTR;
             11895        %LSET LISTDIR='0'B;

             11902    1   /*******************************************************************************
             11903    1   *                                                                              *
             11904    1   *                          PTR                                                 *
             11905    1   *                                                                              *
             11906    1   *******************************************************************************/

       53    11910        %POINTER;
             11911    1   DCL P$         PTR       ALIGNED AUTO;
             11912    1   DCL Q$         PTR       ALIGNED AUTO;
             11913    1   DCL R$         PTR       ALIGNED AUTO;
       54    11915    1   DCL SC_CURR$        PTR  ALIGNED   AUTO;
       55    11916    1   DCL FIRST_ADR_SETUP$ PTR ALIGNED   AUTO;
       56    11917    1   DCL ADR$            PTR  ALIGNED   AUTO;
       57    11918    1   DCL REC_BUF_STOP$   PTR  ALIGNED   AUTO;
       58    11919    1   DCL BREF$           PTR  ALIGNED   AUTO;
       59    11920    1   DCL BREF_STOP$      PTR  ALIGNED   AUTO;
       60    11921        %U;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:96   
             11922        %LSET LISTDIR='0'B;

             11929    1   /*******************************************************************************
             11930    1   *                                                                              *
             11931    1   *                          UBIN                                                 *
             11932    1   *                                                                              *
             11933    1   *******************************************************************************/

       61    11937        %INDEX;
             11938    1   DCL I          UBIN(36) ALIGNED AUTO;
             11939    1   DCL SI REDEF I SBIN WORD ALIGNED;
             11940    1   DCL J          UBIN(36) ALIGNED AUTO;
             11941    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             11942    1   DCL K          UBIN(36) ALIGNED AUTO;
             11943    1   DCL SK REDEF K SBIN WORD ALIGNED;
             11944    1   DCL L          UBIN(36) ALIGNED AUTO;
             11945    1   DCL SL REDEF L    SBIN WORD ALIGNED;
       62    11947    1   DCL OPRD_TYPE       UBIN(36)  ALIGNED   AUTO;
       63    11948    1   DCL OPRT            UBIN(36)  ALIGNED   AUTO;
       64    11949    1   DCL FIELD           UBIN(36)  ALIGNED   AUTO;
       65    11950    1   DCL OPERAND         UBIN(36)  ALIGNED   AUTO;
       66    11951    1   DCL DISP            UBIN(36)  ALIGNED   AUTO;
       67    11952    1   DCL S_BIT           SBIN(36)  ALIGNED   AUTO;
       68    11953    1   DCL E_BIT           SBIN(36)  ALIGNED   AUTO;
       69    11954    1   DCL S_BIT_MOD       UBIN(36)  ALIGNED   AUTO;
       70    11955    1   DCL E_BIT_MOD       UBIN(36)  ALIGNED   AUTO;
       71    11956    1   DCL EVAL_OPRT       UBIN(36)  ALIGNED   AUTO;
       72    11957    1   DCL RELOC_OPRT      UBIN(36)  ALIGNED   AUTO;
       73    11958
       74    11959
       75    11960
       76    11961    1   DCL INIT_ADR        UBIN(36)  ALIGNED   AUTO;
       77    11962    1   DCL NODE_INX        UBIN(36)  ALIGNED   AUTO;
       78    11963    1   DCL BUF_TYPE        UBIN(36)  ALIGNED   AUTO;
       79    11964    1   DCL SETUP_SIZE      UBIN(36)  ALIGNED   AUTO;
       80    11965    1   DCL INC             UBIN(36)  ALIGNED   AUTO;
       81    11966    1   DCL ADR             UBIN(36)  ALIGNED   AUTO;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:97   
       82    11967    1   DCL ADR_SPAN_LAST   UBIN(36)  ALIGNED   AUTO;
       83    11968    1   DCL WHERE           UBIN(36)  ALIGNED   AUTO;
       84    11969    1   DCL SECT_COUNT      UBIN(36)  ALIGNED   AUTO;
       85    11970    1   DCL SECT#           UBIN(36)  ALIGNED   AUTO;
       86    11971    1   DCL SC_LAST_ADR     UBIN(36)  ALIGNED   AUTO;
       87    11972    1   DCL SC_SIZE         UBIN(36)  ALIGNED   AUTO;
       88    11973    1   DCL FIRST_ADR_SETUP UBIN(36)  ALIGNED   AUTO;
       89    11974    1   DCL RTYPE           UBIN(36)  ALIGNED   AUTO;
       90    11975    1   DCL IO_SIZEW        SBIN(36)  ALIGNED   AUTO;
       91    11976    1   DCL MAP_INDEX       UBIN(36)  ALIGNED   AUTO;
       92    11977        /*
       93    11978         Variables for debug record processing
       94    11979        */
       95    11980    1   DCL PSIZE           UBIN(36)  ALIGNED   AUTO;
       96    11981    1   DCL PAGE_SIZE       UBIN(36)  ALIGNED   AUTO;
       97    11982    1   DCL PAGE(0:15)     UBIN(36)  ALIGNED   AUTO;
       98    11983    1   DCL TOTAL(0:15)    SBIN WORD ALIGNED   AUTO;
       99    11984    1   DCL TSIZE           SBIN WORD ALIGNED   AUTO;
      100    11985
      101    11986    1   DCL ERR_NUM         UBIN(36)  ALIGNED   AUTO;
      102    11987    1   DCL ERR_LEVEL       SBIN WORD ALIGNED   AUTO;
      103    11988    1   DCL ERR_VALUE       UBIN(36)  ALIGNED   AUTO;
      104    11989    1   DCL ERR_FORM        UBIN(36)  ALIGNED   AUTO;
      105    11990    1   DCL ERR_WORD_DISP   UBIN(36)  ALIGNED   AUTO;
      106    11991
      107    11992    1   DCL BREF_OVERFLOW         UBIN(36)  ALIGNED   STATIC INIT(0);
      108    11993    1   DCL OP_CODE         UBIN(36)  ALIGNED   AUTO;
      109    11994    1   DCL OP_INX          UBIN(36)  ALIGNED   AUTO;
      110    11995    1   DCL SKELETON        UBIN(36)  ALIGNED   AUTO;
      111    11996    1   DCL DEPTH_NODE#     UBIN(36)  ALIGNED   AUTO;
      112    11997    1   DCL OP_TRANSFER_A(0:23)  UBIN(36)  ALIGNED   CONSTANT  INIT(
      113    11998    1              BITBIN('000000701000'O),
      114    11999    1              BITBIN('000000702000'O),
      115    12000    1              BITBIN('000000703000'O),
      116    12001    1              BITBIN('000000704000'O),
      117    12002    1              BITBIN('000000705000'O),
      118    12003    1              BITBIN('000000706000'O),
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:98   
      119    12004    1              BITBIN('000000707000'O),
      120    12005    1              BITBIN('000000700000'O),
      121    12006    1              BITBIN('000000710000'O),
      122    12007    1              BITBIN('000000600000'O),
      123    12008    1              BITBIN('000000601000'O),
      124    12009    1              BITBIN('000000604000'O),
      125    12010    1              BITBIN('000000605000'O),
      126    12011    1              BITBIN('000000603000'O),
      127    12012    1              BITBIN('000000602000'O),
      128    12013    1              BITBIN('000000617000'O),
      129    12014    1              BITBIN('000000614000'O),
      130    12015    1              BITBIN('000000615000'O),
      131    12016    1              BITBIN('000000607000'O),
      132    12017    1              BITBIN('000000600400'O),
      133    12018    1              BITBIN('000000601400'O),
      134    12019    1              BITBIN('000000606400'O),
      135    12020    1              BITBIN('000000605400'O),
      136    12021    1              BITBIN('000000604400'O)       );
      137    12022        %S;
             12023        %LSET LISTDIR='0'B;

             12030    1   /*******************************************************************************
             12031    1   *                                                                              *
             12032    1   *                          SBIN                                                 *
             12033    1   *                                                                              *
             12034    1   *******************************************************************************/

      138    12038    1   DCL LAST_ADR_SETUP  SBIN WORD ALIGNED   AUTO;
      139    12039    1   DCL PAGE#           SBIN WORD ALIGNED   AUTO;
      140    12040    1   DCL REPEAT_COUNT    SBIN WORD ALIGNED   AUTO;
      141    12041        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:99   
      142    12042        %B$RELOC1( NAME=R1, STCLASS="BASED(P$)" );
             12043    1   DCL 1 R1 BASED(P$) ALIGNED,
             12044    1         2 OPNDTYP UBIN(4) UNAL,
             12045                /*K*  OPNDTYP -
             12046                      (operand type) = 1 section
             12047                                     = 2 ENTREF
             12048                                     = 3 SYMREF
             12049                                     = 4 CONSTANT
             12050                                     = 5 SEGDEF
             12051                                     = 6 SEGREF    */
             12052    1         2 OP BIT(1),
             12053                /*K*  OP -   = 0 operand is an addend
             12054                                 (field) + (operand) -> field
             12055                             = 1 operand is a subtrahend
             12056                                 (field) - (operand) -> field   */
             12057    1         2 FIELD UBIN(4) UNAL,
             12058                /*K*  FIELD identifies common relocatable fields
             12059                         = 0 left-half 1/2 word length left
             12060                         = 1 right-half 1/2 word length right
             12061                         = 2 SEGID
             12062                         = 3 Y field (bits 3-17) FEP long address form
             12063                         = 4 whole word      */
             12064    1         2 OPERAND UBIN BYTE UNAL,
             12065                /*K*  OPERAND - If operand TYPE = 4, the operand field is
             12066                                an unsigned constant.
             12067                                If operand TYPE ~= 4 (or 0), the operand field
             12068                                is an entry number in the table specified by TYPE. */
             12069    1         2 DISP UBIN HALF UNAL;
             12070                /*K*  DISP is the word displacement from OFFSET (in the key)
             12071                      to the relocatable item.  */
      143    12073
      144    12074
      145    12075
      146    12076        %B$RELOC2( NAME=R2, STCLASS="BASED(P$)" );
             12077    1   DCL 1 R2 BASED(P$) ALIGNED,
             12078    1         2 MBZ UBIN(6) UNAL,
             12079                /*K*  MBZ is reserved for future use and must be zero. */
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:100  
             12080    1         2 OPNDTYP UBIN(4) UNAL,
             12081                /*K*  OPNDTYP -
             12082                      (operand type)  = 1 section
             12083                                      = 2 ENTREF
             12084                                      = 3 SYMREF
             12085                                      = 4 CONSTANT
             12086                                      = 5 SEGDEF
             12087                                      = 6 SEGREF    */
             12088    1         2 EVALOP UBIN(4) UNAL,
             12089                /*K*  EVALOP is the operator to be applied to the VALUE and
             12090                      the evaluation of the operand (yeilding an intermediate
             12091                      result, r).
             12092                      (Evaluation Op)     Meaning
             12093                      ---------------     -------
             12094                             0            indicates VALUE word is not present
             12095                                          (r = E(operand))
             12096                             1            add:  r = E(operand)+VALUE
             12097                             2            subtract:  r = E(operand)-VALUE
             12098                             3            multiply:  r = E(operand)*VALUE
             12099                             4            divide:  r = E(operand)/VALUE
             12100                             5            Shift right
             12101                                          r = E(operand) shifted right by
             12102                                          VALUE (i.e., VALUE = Shift count)
             12103                             6            Shift left
             12104                                          r = E(operand shifted left by
             12105                                          VALUE (i.e., VALUE = Shift count)
             12106                             7            Repeat:  The operand is a repeat
             12107                                          count, n.  Repeat VALUE n times.  */
             12108    1         2 RELOCOP UBIN(4) UNAL,
             12109                /*K*  RELOCOP is the operator to be applied to the intermediate
             12110                      result; r, and the field (defined by DISP, STBIT, and
             12111                      ENDBIT within the current program record).
             12112                      (Relocation Op)     Meaning
             12113                      ---------------     -------
             12114                             0            undefined
             12115                             1            add:  field+r -> field
             12116                             2            subtract:  field-r -> field
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:101  
             12117                             3            multiply:  field*r -> field
             12118                             4            divide:  field/r -> field
             12119                           5-0'15'        undefined
             12120                             0'16'        Store right justified:
             12121                                          r right justified -> field
             12122                             0'17'        Store left justified:
             12123                                          r left justified -> field  */
             12124    1         2 OPERAND UBIN HALF UNAL,
             12125                /*K*  OPERAND - If operand TYPE = 4, the operand field is
             12126                                an unsigned constant.
             12127                                If operand TYPE ~= 4 (or 0), the operand field
             12128                                is an entry number in the table specified by TYPE. */
             12129    1         2 DISP UBIN HALF UNAL,
             12130                /*K*  DISP is the word displacement from OFFSET (in the key)
             12131                      to the relocatable item.  */
             12132    1         2 STBIT UBIN BYTE UNAL,
             12133                /*K*  STBIT is the starting bit offset from the word located
             12134                      by DISP.  */
             12135    1         2 ENDBIT UBIN BYTE UNAL,
             12136                /*K*  ENDBIT is the ending bit offset from the word located
             12137                      by DISP.   */
             12138    1         2 VALUE SBIN;
             12139                /*K*  VALUE is a 36-bit constant to be used in the
             12140                      intermediate result, r.  This word is present only if
             12141                      EVALOP ~= 0.   */
      147    12143
      148    12144    1   DCL 1 FORM1$LH ALIGNED BASED(ADR$),
      149    12145    1         2 LH UBIN HALF UNAL,
      150    12146    1         2 DUMMY UBIN HALF UNAL;
      151    12147
      152    12148    1   DCL 1 FORM1$RH ALIGNED BASED(ADR$),
      153    12149    1         2 DUMMY UBIN HALF UNAL,
      154    12150    1         2 RH UBIN HALF UNAL;
      155    12151
      156    12152    1   DCL 1 FORM1$SEGID ALIGNED BASED(ADR$),
      157    12153    1         2 DUMMY UBIN(24) UNAL,
      158    12154    1         2 SEGID UBIN(12) UNAL;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:102  
      159    12155
      160    12156    1   DCL 1 FORM1$Y ALIGNED BASED(ADR$),
      161    12157    1         2 DUMMY1 UBIN(3) UNAL,
      162    12158    1         2 Y UBIN(15) UNAL,
      163    12159    1         2 DUMMY2 UBIN(18) UNAL;
      164    12160    1   DCL 1 FORM1$FW ALIGNED BASED(ADR$),
      165    12161    1         2 FW UBIN WORD;
      166    12162        /*
      167    12163                   Form 2
      168    12164        */
      169    12165    1   DCL FORM2$2              BIT( FORM2_COUNT )  UNAL BASED( BIT_ADR$ );
      170    12166    1   DCL FORM2_COUNT          SBIN WORD           ALIGNED   AUTO;
      171    12167    1   DCL BIT_ADR$             PTR                 ALIGNED   AUTO;
      172    12168
      173    12169
      174    12170    1   DCL TEMP_RESULT          SBIN(36)            ALIGNED   AUTO;
      175    12171    1   DCL TEMP$RESULT          BIT( FORM2_COUNT )  UNAL BASED( TEMP_RESULT$ );
      176    12172    1   DCL TEMP_RESULT$         PTR                 ALIGNED   AUTO;
      177    12173
      178    12174    1   DCL OPRD_MAP(0:6)        UBIN(36)  ALIGNED   CONSTANT  INIT(
      179    12175    1              999999,
      180    12176    1                   4,                      /* Sc                                 */
      181    12177    1                   1,                      /* Er                                 */
      182    12178    1                   2,                      /* Dr                                 */
      183    12179    1              999999,
      184    12180    1              999999,
      185    12181    1                   3    /* Sr */       );
      186    12182    1   DCL SHF_CON(0:35)        SBIN(36)  ALIGNED   CONSTANT  INIT(
      187    12183    1              BITBIN( '000000000001'O ),
      188    12184    1              BITBIN( '000000000002'O ),
      189    12185    1              BITBIN( '000000000004'O ),
      190    12186    1              BITBIN( '000000000010'O ),
      191    12187    1              BITBIN( '000000000020'O ),
      192    12188    1              BITBIN( '000000000040'O ),
      193    12189    1              BITBIN( '000000000100'O ),
      194    12190    1              BITBIN( '000000000200'O ),
      195    12191    1              BITBIN( '000000000400'O ),
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:103  
      196    12192    1              BITBIN( '000000001000'O ),
      197    12193    1              BITBIN( '000000002000'O ),
      198    12194    1              BITBIN( '000000004000'O ),
      199    12195    1              BITBIN( '000000010000'O ),
      200    12196    1              BITBIN( '000000020000'O ),
      201    12197    1              BITBIN( '000000040000'O ),
      202    12198    1              BITBIN( '000000100000'O ),
      203    12199    1              BITBIN( '000000200000'O ),
      204    12200    1              BITBIN( '000000400000'O ),
      205    12201    1              BITBIN( '000001000000'O ),
      206    12202    1              BITBIN( '000002000000'O ),
      207    12203    1              BITBIN( '000004000000'O ),
      208    12204    1              BITBIN( '000010000000'O ),
      209    12205    1              BITBIN( '000020000000'O ),
      210    12206    1              BITBIN( '000040000000'O ),
      211    12207    1              BITBIN( '000100000000'O ),
      212    12208    1              BITBIN( '000200000000'O ),
      213    12209    1              BITBIN( '000400000000'O ),
      214    12210    1              BITBIN( '001000000000'O ),
      215    12211    1              BITBIN( '002000000000'O ),
      216    12212    1              BITBIN( '004000000000'O ),
      217    12213    1              BITBIN( '010000000000'O ),
      218    12214    1              BITBIN( '020000000000'O ),
      219    12215    1              BITBIN( '040000000000'O ),
      220    12216    1              BITBIN( '100000000000'O ),
      221    12217    1              BITBIN( '200000000000'O ),
      222    12218    1              BITBIN( '400000000000'O )     );
      223    12219
      224    12220
      225    12221    1   DCL DEBUG_MAP(0:3)       UBIN(36)  ALIGNED   CONSTANT  INIT(
      226    12222    1              7,
      227    12223    1              5,
      228    12224    1              6,
      229    12225    1              4         );
      230    12226
      231    12227
      232    12228    1   DCL RESULT               SBIN(36)  ALIGNED   AUTO;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:104  
      233    12229    1   DCL INTER_RESULT         SBIN(36)  ALIGNED   AUTO;
      234    12230
      235    12231
      236    12232
      237    12233        %MOVE_TMPLT;
             12234    1   DCL VX$TARGET_B           BIT( VX_TARGET_COUNT ) ALIGNED    BASED;
             12235    1   DCL VX$SOURCE_B           BIT( VX_SOURCE_COUNT ) ALIGNED    BASED;
             12236    1   DCL VX$TARGET_C         CHAR( VX_TARGET_COUNT ) ALIGNED BASED;
             12237    1   DCL VX$SOURCE_C         CHAR( VX_SOURCE_COUNT ) ALIGNED BASED;
      238    12239        %MOVE_PAGE_DCL;
             12240    1   DCL MOVE_PAGE_REMAIN          SBIN WORD ALIGNED   AUTO;
             12241    1   DCL MOVE_TARGET$              PTR       ALIGNED   AUTO;
             12242    1   DCL MOVE_ADR_TEMP             UBIN(36)  ALIGNED   AUTO;
             12243    1   DCL MOVE_SRC$                 PTR       ALIGNED   AUTO;
             12244    1   DCL MOVE_TEMP                 UBIN(36)  ALIGNED   AUTO;
      239    12246
      240    12247
      241    12248
      242    12249    1   DCL M$OF       DCB;
      243    12250
      244    12251        %FPT_PRECORD(
      245    12252                   FPTN=FPT_PRECORD,
      246    12253                   STCLASS=CONSTANT,
      247    12254                   DCB=M$OF,
      248    12255                   N="-1");
             12256        %LSET LISTDIR='0'B;
             12266    1   DCL 1 FPT_PRECORD CONSTANT,2 V_ BIT(72)INIT(VECTOR(FPT_PRECORD.V))/**/,2 KEY_,3
             12266            BOUND UBIN(20)UNAL INIT(SIZEV(NIL))
             12267    1  /**/,3 * BIT(12)INIT('7772'O)/**/,3 * BIT(4)INIT('0'B)/**/,3 KEY$ PTR INIT(ADDR(NIL)
             12267            )
             12268    1   /**/,2 IDBUF_ BIT(72)INIT(VECTOR(NIL))/**/,2 V DALIGNED,3 DCB# UBIN(18)UNAL INIT(
             12268            DCBNUM(M$OF))/**/,
             12269    1   3 KEYS# BIT(1)INIT('0'B)/**/ ,3 KEYR# BIT(1)INIT('0'B)/**/ ,3 ID# BIT(1)INIT('0'B)
             12269            /**/ ,3
             12270    1   IDS# BIT(1)INIT('0'B)/**/ ,3 BOF# BIT(1)INIT('0'B)/**/ ,3 EOF# BIT(1)INIT('0'B)/**/
             12270            ,3 BRK#
             12271    1  BIT(1)INIT('0'B)/**/ ,3 IOERROK# BIT(1)INIT('0'B)/**/ ,3 IDALL# BIT(1)INIT('0'B)/**/
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:105  
             12271            ,3
             12272    1   INDX# UBIN(9)UNAL INIT(0)/**/,3 N# SBIN INIT(-1)/**/,3 RECNUM# UBIN(18)UNAL INIT(0)
             12273    1  /**/,3 NEXTKEY# BIT(1)INIT('0'B)/**/,3 NOMARKS# BIT(1)INIT('0'B)/**/,3 * BIT(16)INIT
             12273            ('0'B
             12274    1   )/**/;
      249    12276
      250    12277        /*         Based structures for debug records */
      251    12278
      252    12279        %B$LBNTRY0( NAME=B$LBNTRY0, STCLASS="BASED(P$)" ) ;
             12280    1   DCL 1 B$LBNTRY0 BASED(P$) ALIGNED,
             12281    1         2 * BIT(9) UNAL,
             12282                /*K*  * is reserved for future use and must be zero. */
             12283    1         2 COMPILER UBIN BYTE UNAL,
             12284                /*K*  COMPILER is supplied by the compiler according to
             12285                      convention and identifies the language as follows:
             12286                           0 - Assembler
             12287                           1 - PL-6
             12288                           2 - FORTRAN
             12289                           3 - COBOL
             12290                           4 - PL/I
             12291                           5 - RPG
             12292                           6 - Pascal
             12293                           7 - MOMUS
             12294                           8 - FPL                     */
             12295    1         2 VERSION UBIN HALF UNAL,
             12296                /*K*  VERSION is supplied by the compiler.    */
             12297    1         2 VERS REDEF VERSION,
             12298                /*K* X00 = 'X',0 ; X100 = 'X',100  */
             12299    1           3 LETTER CHAR(1) UNAL,
             12300                  /*K*  LETTER is the Release identifying letter.  */
             12301    1           3 NUMBER UBIN BYTE UNAL,
             12302                  /*K*  NUMBER is version number.  0-99 external, 100-511 internal.  */
             12303    1         2 UTS UBIN UNAL,
             12304                /*K*  UTS is the CP-6 universal time stamp as recorded at
             12305                      time of compilation.    */
             12306    1         2 NO_AUTO,                        /* Noauto frame address */
             12307    1           3 OPNDTYP UBIN(4) UNAL,
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:106  
             12308    1           3 * UBIN(5) UNAL,
             12309    1           3 OPERAND UBIN BYTE UNAL,
             12310    1           3 OFFSET UBIN HALF UNAL,
             12311    1         2 FRAME REDEF NO_AUTO UBIN,       /* Noauto frame address */
             12312    1         2 * BIT(36) UNAL;
             12313                /*K*  * is reserved for future use and must be zero.  */
      253    12315        %B$INTNTRY( NAME=B$INTNTRY, STCLASS="BASED(P$)");
             12316    1   DCL 1 B$INTNTRY BASED(P$) ALIGNED,
             12317    1         2 LBE UBIN BYTE UNAL,
             12318                /*K*  LBE is the entry number of the logical block table entry
             12319                      which describes this procedure.   */
             12320    1         2 OU UNAL,
             12321    1           3 SECTNUM UBIN BYTE UNAL,
             12322                  /*K*  SECTNUM contains an entry number into the control
             12323                        section table (TYPE 3) (OU only).  */
             12324    1           3 OFFSET UBIN HALF UNAL,
             12325                  /*K*  OFFSET is the word offset from the origin of the section
             12326                        (OU).   */
             12327    1         2 ISADDR REDEF OU UBIN(27) UNAL,
             12328                /*K*  ISADDR is the address within the instruction segment
             12329                      (RU).    */
             12330    1         2 NPOINTER SBIN HALF UNAL,
             12331                /*K*  NPOINTER is a word displacement into the debug name
             12332                      record (TYPE 15) locating the name of this entry.  */
             12333    1         2 PRI BIT(1) UNAL,
             12334                /*K*  PRI is a one-bit flag denoting primary name of the
             12335                      logical block.
             12336                      If PRI= 1, is primary name
             12337                            = 0, is not primary name    */
             12338    1         2 ALT BIT(1) UNAL,
             12339                /*K*  ALT is a one-bit flag denoting permissible alternate return.
             12340                         ALT = 1, alternate return allowed
             12341                             = 0, alternate return not allowed    */
             12342    1         2 CHECK BIT(1) UNAL,
             12343                /*K*  CHECK is a one-bit flag denoting arguments/parameter check
             12344                      and alternate return specification check.
             12345                         CHECK = 0, do not check for matching
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:107  
             12346                                    arguments/parameters and
             12347                                    alternate return specification.
             12348                               = 1, check for matching arguments/parameters
             12349                                    and alternate return specification.  */
             12350    1         2 CST UBIN(6) UNAL,
             12351                /*K*  CST is a 4-bit field denoting calling sequence type.
             12352                         CST =  0, Standard CP-6 Callable Procedure.
             12353                         CST =  1, Nonstandard Call Type.
             12354                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             12355                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             12356                         CST =  4, Standard CP-6 Function Procedure; a
             12357                                   variable table entry will be present to
             12358                                   define the attributes of the function.
             12359                         CST =  5, Same as 0, except USE, AVOID, or
             12360                                   MATERIALIZE attributes specified.
             12361                         CST =  7, Same as 2, except USE, AVOID, or
             12362                                   MATERIALIZE attributes specified.
             12363                         CST =  8, Same as 3, except USE, AVOID, or
             12364                                   MATERIALIZE attributes specified.
             12365                         CST =  9, Same as 4, except USE, AVOID, or
             12366                                   MATERIALIZE attributes specified.
             12367                         CST = 13, GCOS domain, save
             12368                         CST = 14, GCOS domain, no save
             12369                         CST = 15, Non-Callable Procedure.       */
             12370    1         2 NPARAM UBIN BYTE UNAL;
             12371                /*K*  NPARAM is a 9-bit field denoting number of parameters.  */
      254    12373        %B$EXST( NAME=B$EXST, STCLASS="BASED(P$)");
             12374    1   DCL 1 B$EXST BASED(P$) ALIGNED,
             12375    1         2 LA BIT(1) UNAL,
             12376                /*K*  LA is the label array indicator; when =1, SUBSCRIPT
             12377                      contains the associated subscript value, else SUBSCRIPT
             12378                      contains all zeros.  */
             12379    1         2 SUBSCRIPT SBIN(8) UNAL,
             12380                /*K*  SUBSCRIPT : when LA is 1, SUBSCRIPT contains the
             12381                      associated subscript value; otherwise, SUBSCRIPT is
             12382                      all zeros.   */
             12383    1         2 OU UNAL,
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:108  
             12384    1           3 SECTNUM UBIN BYTE UNAL,
             12385                  /*K*  SECTNUM contains an entry number into the control
             12386                        section table (TYPE 3) (OU only).  */
             12387    1           3 OFFSET UBIN HALF UNAL,
             12388                  /*K*  OFFSET is a word offset from the origin of the section (OU).  */
             12389    1         2 ISADDR REDEF OU UBIN(27) UNAL,
             12390                /*K*  ISADDR is the address within instruction segment (RU). */
             12391    1         2 NPOINTER SBIN HALF UNAL,
             12392                /*K*  NPOINTER is a word displacement into the debug name
             12393                      record (TYPE 15) locating the statement label.  A value
             12394                      of -1 indicates no label.  */
             12395    1         2 LBE UBIN HALF UNAL,
             12396                /*K*  LBE is the entry number (in the logical block table) of
             12397                      the logical block of the highest lexical level containing
             12398                      this statement.  */
             12399    1         2 COS BIT(1) UNAL,
             12400                /*K*  COS indicates a compiler optimized statement; when set,
             12401                      indicates this statement may not produce correct results
             12402                      if the compiled in program flow has been altered.  */
             12403    1         2 SUBSTTYPE UBIN(10) UNAL,
             12404                /*K*  SUBSTTYPE (Substatement Type) - This field may be used
             12405                      by compilers to elaborate on statement type.  This
             12406                      field is not used by the debugger.  */
             12407    1         2 STTYPE UBIN(7) UNAL,
             12408                /*K*  STTYPE (Statement Type) is a code which indicates the
             12409                      generic class of statement for use by the dubugger.
             12410                      The statement types and their value for STTYPE are:
             12411                       0 - Null Statement
             12412                       1 - Assignments
             12413                       2 - Call
             12414                       3 - Monitor Call
             12415                       4 - Alternate Shared Library Call
             12416                       5 - If
             12417                       6 - Else
             12418                       7 - Case
             12419                       8 - GOTO
             12420                       9 - Return
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:109  
             12421                      10 - Altreturn
             12422                      11 - Remember
             12423                      12 - Unwind
             12424                      13 - Report Writer
             12425                      14 - Alter
             12426                      15 - Evaluate
             12427                      16 - Intrinsic Call
             12428                      17 - Spoil
             12429                      18 - GOTO Subscripted
             12430                      19 - Assigned GOTO
             12431                      20 - If Logical
             12432                      21 - If Arithmetic
             12433                      22 - Pause
             12434                      23 - Perform
             12435                      24 - Stop Program
             12436                      25 - I/O Statement
             12437                      26 - Else If
             12438                      27 - Assigned
             12439                      28 - Do Select
             12440                      29 - Do Select End
             12441                      30 - Select
             12442                      31 - Do Uninhibit
             12443                      32 - Inspect
             12444                      33 - Do Until
             12445                      34 - Do Index
             12446                      35 - Do While
             12447                      36 - Do Case
             12448                      37 - DO
             12449                      38 - DO INHIBIT
             12450                      39 - Set
             12451                      40 - Exit
             12452                      41 - Do Uninhibit End
             12453                      42 - Purge
             12454                      43 - Do Until End
             12455                      44 - Do Index End
             12456                      45 - Do While End
             12457                      46 - Do Case End
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:110  
             12458                      47 - DO END
             12459                      48 - DO INHIBIT END
             12460                      49 - Release
             12461                      50 - Send
             12462                      51 - Data Base
             12463                      52 - Cancel
             12464                      53 - Initialize
             12465                      54 - Merge
             12466                      55 - Receive
             12467                      56 - Search
             12468                      57 - Sort
             12469                      58 - String
             12470                      59 - Unstring
             12471                      60 - Use
             12472                      61 - 100 Reserved for future use
             12473                     101 - Proc
             12474                     102 - Proc End
             12475                     103 - Entry
             12476                     104 - Compiler Miscellaneous     */
             12477    1         2 LINENUM UBIN HALF UNAL;
             12478                /*K*  LINENUM is the line number of this executable statement.  */
      255    12480        %B$VREBL( NAME=B$VREBL, STCLASS="BASED(P$)");
             12481    1   DCL 1 B$VREBL BASED(P$) ALIGNED,
             12482    1         2 ADR,
             12483                /*K*  ADR is a field containing an 18 bit word address
             12484                      (W), 2 bit byte address (C), and 4 bit bit address (B).
             12485                      Only the word portion is subject to relocation specified
             12486                      by OPNDTYP.  The meaning of ADR is dictated by the
             12487                      Address Type field.  */
             12488    1           3 W UBIN HALF UNAL,
             12489                  /*K*  W is a field containing an 18 bit word address. */
             12490    1           3 C UBIN(2) UNAL,
             12491                  /*K*  C is a field containing a 2 bit byte address.  */
             12492    1           3 B UBIN(4) UNAL,
             12493                  /*K*  B is a field containing a 4 bit bit address.  */
             12494    1         2 ADR6 REDEF ADR,
             12495                /*K*  ADR6 is a field for the FEP containing an 20 bit word address
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:111  
             12496                      (W), 1 bit byte address (C), and 3 bit bit address (B).
             12497                      Only the word portion is subject to relocation specified
             12498                      by OPNDTYP.  The meaning of ADR6 is dictated by the
             12499                      Address Type field.  Note that this form is only to
             12500                      be used in Run Units. The Object Unit always uses
             12501                      the ADR format.  */
             12502    1           3 W UBIN(20) UNAL,
             12503                  /*K*  W is a field containing an 20 bit word address. */
             12504    1           3 C UBIN(1) UNAL,
             12505                  /*K*  C is a field containing a 1 bit byte address.  */
             12506    1           3 B UBIN(3) UNAL,
             12507                  /*K*  B is a field containing a 3 bit bit address.  */
             12508    1         2 ADDRTYP UBIN(4) UNAL,
             12509                /*K*  ADDRTYP (Address Type) is a four bit field which
             12510                      determines how to use ADR (and possible other information)
             12511                      to locate the data described by the entry.  ADDRTYP can
             12512                      take on the following values:
             12513                      0 - No relocation to be done to this entry.
             12514                      1 - Static data - ADR is an offset within ISR.
             12515                      2 - Automatic Data - ADR is an offset within the current
             12516                          AUTO frame located by PR2.
             12517                      3 - Based data - ADR is an offset from user pointer
             12518                          (possibly defined by IMPTR).
             12519                      4 - DCB - ADR is an offset from the beginning of the DCB
             12520                          (which is located by IMPTR).
             12521                      5 - Parameter - ADR is an offset from the data located
             12522                          by the Implied Pointer into Automatic Storage.
             12523                      6 - Constant - ADR is a 18-bit constant.
             12524                      7 - Parameter in static - ADR is an offset from the data
             12525                          located by the Implied Point into Static Storage.
             12526                          In this case relocation information applies to IMPTR.
             12527                      8 - AREADEF - ADR is the offset into the segment for
             12528                          this item.
             12529                      9 - Virtual array - ADR is the IS offset in static of
             12530                          the descriptor block for this virtual array.
             12531                     10 - 15 - Reserved for future use.    */
             12532    1         2 DATATYP UBIN(6) UNAL,
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:112  
             12533                /*K*  DATATYP is a 6 bit field indicating the type of data
             12534                      described by this entry.  The defined data type codes
             12535                      can be found in the VREBL_DATATYPES macro.  */
             12536    1         2 REF BIT(1) UNAL,
             12537                /*K* REF is a one bit field which indicates whether the
             12538                     variable is referenced (REF=1) or not by this module.  */
             12539    1         2 MODF BIT(1) UNAL,
             12540                /*K*  MODF is a one bit field which indicates whether the
             12541                      variable is explicitely modified (MODF=1) or not by this
             12542                      module.    */
             12543    1         2 LOGSIZ UBIN HALF UNAL,
             12544                /*K* LOGSIZ is an 18 bit field containing the size of the data
             12545                     item or a locator of the variable containing the size.
             12546                     If SZTYP=0, this field contains the number of basic
             12547                     elements of this data type contained in the variable,
             12548                     e.g., the field contains five for a CHAR (5) variable.
             12549                     If SZTYP = 1, this field contains the entry number of
             12550                     the variable which contains the size.   */
             12551    1         2 LEVEL UBIN(6) UNAL,
             12552                /*K*  LEVEL is a 6 bit field containing the level number of
             12553                      the data item (for structures).   */
             12554    1         2 ALIGNTYP UBIN(3) UNAL,
             12555                /*K*  ALIGNTYP is a 3 bit field defining the explicit alignment
             12556                      of the data item.  The values and their meanings are:
             12557                      0 = Double Word Aligned
             12558                      1 = Word Aligned
             12559                      2 = Half Word Aligned
             12560                      3 = Byte Aligned
             12561                      4 = Bit Aligned
             12562                      5 = Digit Aligned  */
             12563    1         2 SZTYP BIT(1) UNAL,
             12564                /*K*  SZTYP - If SZTYP = 0, LOGSIZ contains the number of
             12565                      basic elements of this data type contained in the variable,
             12566                      e.g., the field contains five for a CHAR (5) variable.
             12567                      If SZTYP = 1, LOGZIS contains the entry number of the
             12568                      variable which contains the size.  */
             12569    1         2 ARRAYTYP UBIN(4) UNAL,
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:113  
             12570                /*K*  ARRAYTYP is a four bit field which determines the array
             12571                      characteristics of this variable and thus determines
             12572                      whether continuation entry(ies) exist for this item.
             12573                      The defined array types are:
             12574                      0 - The item is not dimensioned
             12575                      1 - The item is a single dimensional array with offset=0.
             12576                          DIMS contains the number of elements.  No continuation
             12577                          entry exists.
             12578                      2 - Same as type 1 except the offset (to be subtracted) =1.
             12579                      3 - All other arrays except virtual arrays.  DIMS,
             12580                          ELEMENTS, ELMNTSIZ, and OFFSET must be defined.  As
             12581                          many continuation entries as required will be present
             12582                          to accommodate the number of dimensions of the array
             12583                          with indeterminate number of elements, the ELEMENTS
             12584                          field will contain 0.
             12585                      4 - Virtual Array.  DIMS, ELEMENTS, ELMNTSIZ, and OFFSET
             12586                          must be defined.  As many continuation entries as
             12587                          required will be present to accommodate the number
             12588                          of dimensions of the array.
             12589                      5 - Adjustable dimensions uses continuation entries of
             12590                          the form of B$VREBLCA.    */
             12591    1         2 OPNDTYP UBIN(4) UNAL,
             12592                /*K*  OPNDTYP -
             12593                      (operand type) = 1 section
             12594                                     = 2 ENTREF
             12595                                     = 3 SYMREF
             12596                                     = 4 CONSTANT
             12597                                     = 5 SEGDEF
             12598                                     = 6 SEGREF    */
             12599    1         2 IMPTR SBIN HALF UNAL,
             12600                /*K*  IMPTR is unused for ADDRTYP = 1, 2, or 6.  If ADDRTYP = 3
             12601                      (Based) and bit 0 = 1, this based variable has no implied
             12602                      pointer.  If ADDRTYP = 3 (Based) and bit 0 = 0, bits 1-17
             12603                      contain the entry number of the variable table entry
             12604                      for the implied pointer to this variable.
             12605                      If ADDRTYP = 4 (DCB), this field contains the SYMREF
             12606                      number of the DCB.  After linking, the field will
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:114  
             12607                      contain the DCB number.
             12608                      If ADDRTYP = 5, this field contains the offset in the
             12609                      current automatic frame of the pointer to this parameter.
             12610                      If ADDRTYP = 7, this field contains the address in the
             12611                      Instruction Segment of the pointer to this parameter.  */
             12612    1         2 OPERAND UBIN HALF UNAL,
             12613                /*K*  OPERAND - If OPNDTYPE = 4, the OPERAND field is
             12614                                an unsigned constant.
             12615                                If OPNDTYPE ~= 4 (or 0), the OPERAND field
             12616                                is an entry number in the table specified by TYPE. */
             12617    1         2 ELMNTSIZ UBIN(24) UNAL,
             12618                /*K*  ELMNTSIZ is a 24 bit field defining the physical size
             12619                      (in bits) of the item or of an element of the item,
             12620                      if an array.  This includes all slack bits.  This is the
             12621                      multiplier needed to determine the bit offset
             12622                      in an array given the element offset.  */
             12623    1         2 STATUS_EXISTS BIT(1) UNAL,
             12624                /*K* STATUS EXISTS - If STATUS_EXISTS = 1,  */
             12625    1         2 * BIT(3) UNAL,
             12626                /*K*  * is reserved for future use and must be zero.  */
             12627    1         2 SCALE SBIN(8) UNAL,
             12628                /*K*  SCALE is the number of units by which this datum is
             12629                      assumed to be scaled.  The units depend on the data type.
             12630                      If this is a binary data type, the units are binary
             12631                      digits.  If this is a decimal data type, the units are
             12632                      decimal digits.  The field is meaningless for other data
             12633                      types.  The value of SCALE is such that:
             12634                      actual value = (value of datum) * (radix) ** SCALE  */
             12635    1         2 DIMS UBIN HALF UNAL,
             12636                /*K*  DIMS is an 18 bit field containing the number of dimensions
             12637                      for an array if ARRAYTYP = 3 or 4.  If ARRAYTYP = 1 or 2,
             12638                      this field contains the number of elements in the array.  */
             12639    1         2 NPOINTER SBIN HALF UNAL;
             12640                /*K*  NPOINTER is an 18 bit field containing the word offset
             12641                      into the debug name record (type 15) locating
             12642                      the name of this variable.  */
      256    12644
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:115  
      257    12645
      258    12646        %VX$BREF;
             12647    1   DCL 1 VX$BREF                    ALIGNED     BASED (VX_NEXT_BREF$),
             12648    1         2 WORD_A(0:1)       UBIN(36)  ALIGNED,
             12649    1         2 I  REDEF     WORD_A         ALIGNED,
             12650    1           3 WORD0            UBIN(36)  ALIGNED,
             12651    1           3 WORD1            UBIN(36)  ALIGNED;
      259    12653
      260    12654
      261    12655
      262    12656
      263    12657        %VX$LLIST_SC;
             12658        %LSET LISTDIR='0'B;

             12669    1   /*******************************************************************************
             12670    1   *                                                                              *
             12671    1   *                          VX$LLIST_SC                                            *
             12672    1   *                                                                              *
             12673    1   *******************************************************************************/

             12678    1   DCL 1 VX$LLIST_SC               BASED     ALIGNED,
             12679    1         2 LINK$             PTR,
             12680    1         2 BASE$             PTR,
             12681    1         2 COUNT             UBIN(36);
      264    12684        %PLIST;
      265    12685        %F$DCB;
      266    12742        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:116  
      267    12743    1       SECT_COUNT = VX_SC_PASS2$ -> VX$LLIST_SC.COUNT;

  12743  5 000002   000000 470400 xsym               LDP0    VX_SC_PASS2$
         5 000003   000002 235100                    LDA     2,,PR0
         5 000004   200046 755100                    STA     SECT_COUNT,,AUTO

      268    12744    1       VX_SC_BASE$ = VX_SC_PASS2$ -> VX$LLIST_SC.BASE$;

  12744  5 000005   000001 236100                    LDQ     1,,PR0
         5 000006   000000 756000 xsym               STQ     VX_SC_BASE$

      269    12745    1       VX_PASS2_REF.SAT.L_START.SC$     = VX_SC_BASE$;

  12745  5 000007   000030 756000 xsym               STQ     VX_PASS2_REF+24

      270    12746    1       VX_PASS2_REF.SAT.COUNT.SC     = SECT_COUNT;

  12746  5 000010   000042 755000 xsym               STA     VX_PASS2_REF+34

      271    12747    1       TOTAL(11) = VX_OU_HEAD.LB_SIZE;

  12747  5 000011   000003 236000 xsym               LDQ     VX_OU_HEAD+3
         5 000012   777777 376007                    ANQ     -1,DL
         5 000013   200113 756100                    STQ     TOTAL+11,,AUTO

      272    12748    1       PAGE(11)  = TOTAL(11);

  12748  5 000014   200073 756100                    STQ     PAGE+11,,AUTO

      273    12749    1       FIRST = '1'B/*@TRUE_B*/;

  12749  5 000015   400000 236003                    LDQ     -131072,DU
         5 000016   200003 756100                    STQ     FIRST,,AUTO

      274    12750    1   FIRST_READ:
      275    12751    1       CALL VXK$KEY(  0/*@OF*/, 10, 0, 0  );

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:117  
  12751  5 000017   000000 630400 6     FIRST_READ   EPPR0   0
         5 000020   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000021   000000 701000 xent               TSX1    VXK$KEY
         5 000022   000000 011000                    NOP     0

      276    12752    1       CALL VXI$READ( 0/*@OF*/, VX_REC_BUF_START$, VX_REC_BUF_SIZE,

  12752  5 000023   000004 630400 6                  EPPR0   4
         5 000024   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000025   000000 701000 xent               TSX1    VXI$READ
         5 000026   000031 702000 5                  TSX2    IO_ERROR_FIRST

      277    12753    1               0/*@OF*/  )                        ALTRET(IO_ERROR_FIRST);
      278    12754    1       FIRST = '0'B/*@FALSE_B*/;

  12754  5 000027   200003 450100                    STZ     FIRST,,AUTO

      279    12755    1       GOTO READ_RECORD;

  12755  5 000030   000135 710000 5                  TRA     READ_RECORD

      280    12756    1   IO_ERROR_FIRST:
      281    12757    2       DO CASE( VX_IO_STATUS );

  12757  5 000031   000000 235000 xsym  IO_ERROR_FI* LDA     VX_IO_STATUS
         5 000032   000003 115007                    CMPA    3,DL
         5 000033   000035 602005 5                  TNC     IO_ERROR_FIRST+4,AL
         5 000034   000112 710000 5                  TRA     NEXT_RECORD
         5 000035   000040 710000 5                  TRA     s:12768
         5 000036   000045 710000 5                  TRA     s:12771
         5 000037   000046 710000 5                  TRA     IO_ERROR_LD

      282    12758    2         CASE( 0/*@IO_EOF*/ );                  /* Error - empty */

      283    12759        /*E*  ERROR: VXT-E$FIMAGE_IO_EOF_VX-0
      284    12760              MESSAGE: No program or relocation records. End of file encountered.
      285    12761              DESCRIPTION: Self-explanatory.
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:118  
      286    12762        */
      287    12763                %SCREAM(
      288    12764                ERR#=E$FIMAGE_IO_EOF_VX,
      289    12765                MID="'T'",
      290    12766                LEVEL=@E$F_VX,
      291    12767                AUX=@E$OUOF_VX);

  12768  5 000040   000012 630400 6                  EPPR0   10
         5 000041   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000042   000000 701000 xent               TSX1    VXE$ERROR
         5 000043   000000 011000                    NOP     0
         5 000044   000112 710000 5                  TRA     NEXT_RECORD

      292    12770    2         CASE( 1/*@IO_NOKEY*/ );

      293    12771    2           GOTO NEXT_RECORD;

  12771  5 000045   000112 710000 5                  TRA     NEXT_RECORD

      294    12772    2         CASE( 2/*@IO_LD*/ );

      295    12773    2   IO_ERROR_LD:
      296    12774        /*E*  ERROR: VXT-E$FIMAGE_IO_LD_VX-0
      297    12775              MESSAGE: Object language error. Lost data condition for program/relocation.
      298    12776                       Attempting recovery.
      299    12777              DESCRIPTION: Self-explanatory.
      300    12778        */
      301    12779                %SCREAM(
      302    12780                ERR#=E$FIMAGE_IO_LD_VX,
      303    12781                MID="'T'",
      304    12782                LEVEL=@E$S_VX,
      305    12783                AUX=@E$OUOF_VX);

  12784  5 000046   000017 630400 6     IO_ERROR_LD  EPPR0   15
         5 000047   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000050   000000 701000 xent               TSX1    VXE$ERROR
         5 000051   000000 011000                    NOP     0
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:119  

      306    12786                %ALLOCATE(
      307    12787                PTR$=Q$,
      308    12788                TYPE=@RL_DS_2,
      309    12789                SIZE=VX_REC_BUF_SIZE);

  12790  5 000052   000007 236000 xsym               LDQ     VX_M_ALL+7
         5 000053   000007 136000 xsym               SBLQ    VX_M_FREE+7
         5 000054   000067 604000 5                  TMI     s:12794
         5 000055   000000 116000 xsym               CMPQ    VX_REC_BUF_SIZE
         5 000056   000067 602000 5                  TNC     s:12794

  12791  5 000057   000007 236000 xsym               LDQ     VX_M_FREE+7
         5 000060   000022 736000                    QLS     18
         5 000061   000007 036000 xsym               ADLQ    VX_M_BASE_PTR+7
         5 000062   200007 756100                    STQ     Q$,,AUTO

  12792  5 000063   000007 236000 xsym               LDQ     VX_M_FREE+7
         5 000064   000000 036000 xsym               ADLQ    VX_REC_BUF_SIZE
         5 000065   000007 756000 xsym               STQ     VX_M_FREE+7

  12793  5 000066   000101 710000 5                  TRA     s:12796

  12794  5 000067   000006 236000 6                  LDQ     6
         5 000070   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 000071   000023 236000 6                  LDQ     19
         5 000072   200157 756100                    STQ     @SEVERITY+2,,AUTO
         5 000073   200007 630500                    EPPR0   Q$,,AUTO
         5 000074   200156 450500                    STP0    @SEVERITY+1,,AUTO
         5 000075   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 000076   000021 631400 xsym               EPPR1   B_VECTNIL+17
         5 000077   000000 701000 xent               TSX1    VXA$GET
         5 000100   000000 011000                    NOP     0

      310    12796    2           VX_REC_BUF_SIZE = VX_REC_BUF_SIZE + VX_REC_BUF_SIZE;

  12796  5 000101   000000 236000 xsym               LDQ     VX_REC_BUF_SIZE
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:120  
         5 000102   000000 036000 xsym               ADLQ    VX_REC_BUF_SIZE
         5 000103   000000 756000 xsym               STQ     VX_REC_BUF_SIZE

      311    12797    2           IF FIRST THEN GOTO FIRST_READ;

  12797  5 000104   200003 234100                    SZN     FIRST,,AUTO
         5 000105   000017 604000 5                  TMI     FIRST_READ

      312    12798    2           CALL M$PRECORD( FPT_PRECORD );

  12798  5 000106   000110 630400 3                  EPPR0   FPT_PRECORD
         5 000107   040003 713400                    CLIMB   16387
         5 000110   401000 401760                    pmme    nvectors=3

      313    12799    2           GOTO NEXT_RECORD;

  12799  5 000111   000112 710000 5                  TRA     NEXT_RECORD

      314    12800    2         END;                              /* Do case( VX_IO_STATUS ); */

      315    12801
      316    12802        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:121  
      317    12803    2       DO WHILE( '1'B );

      318    12804    2   NEXT_RECORD:
      319    12805    2          CALL VXI$READ( 0/*@OF*/, VX_REC_BUF_START$, VX_REC_BUF_SIZE,

  12805  5 000112   000024 630400 6     NEXT_RECORD  EPPR0   20
         5 000113   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000114   000000 701000 xent               TSX1    VXI$READ
         5 000115   000117 702000 5                  TSX2    IO_ERROR_SUBSEQUENT

      320    12806    2                  3/*@NO_KEY*/   )                   ALTRET(IO_ERROR_SUBSEQUENT);
      321    12807    3          DO WHILE( '0'B );

  12807  5 000116   000135 710000 5                  TRA     READ_RECORD

      322    12808    3   IO_ERROR_SUBSEQUENT:
      323    12809    4             DO CASE( VX_IO_STATUS );

  12809  5 000117   000000 235000 xsym  IO_ERROR_SU* LDA     VX_IO_STATUS
         5 000120   000003 115007                    CMPA    3,DL
         5 000121   000123 602005 5                  TNC     IO_ERROR_SUBSEQUENT+4,AL
         5 000122   000135 710000 5                  TRA     READ_RECORD
         5 000123   000126 710000 5                  TRA     s:12811
         5 000124   000127 710000 5                  TRA     s:12822
         5 000125   000134 710000 5                  TRA     s:12825

      324    12810    4               CASE( 0/*@IO_EOF*/ );

      325    12811    4                 GOTO POST;

  12811  5 000126   003750 710000 5                  TRA     POST

      326    12812    4               CASE( 1/*@IO_NOKEY*/ );

      327    12813        /*E*  ERROR: VXT-E$INTERNAL_FIMAGE_NOKEY_VX-0
      328    12814        MESSAGE: Link internal error. No such key error in image processing on I-th read. I
             12814        >1.
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:122  
      329    12815              DESCRIPTION: Self-explanatory.
      330    12816        */
      331    12817                      %SCREAM(
      332    12818                      ERR#=E$INTERNAL_FIMAGE_NOKEY_VX,
      333    12819                      LEVEL=@E$F_VX,
      334    12820                      MID="'T'",
      335    12821                      AUX=@E$OUOF_VX);

  12822  5 000127   000031 630400 6                  EPPR0   25
         5 000130   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000131   000000 701000 xent               TSX1    VXE$ERROR
         5 000132   000000 011000                    NOP     0
         5 000133   000135 710000 5                  TRA     READ_RECORD

      336    12824    4               CASE( 2/*@IO_LD*/ );

      337    12825    4                 GOTO IO_ERROR_LD;

  12825  5 000134   000046 710000 5                  TRA     IO_ERROR_LD

      338    12826    4               END;                        /* Do case( VX_IO_STATUS ); */

      339    12827    3             END;                          /* Do never */

      340    12828        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:123  
      341    12829    2   READ_RECORD:
      342    12830    2          IF VX_O_KEY_BUF.FORM2.UTS ~= VX_OU_HEAD.UTS THEN GOTO POST;

  12830  5 000135   000000 235000 xsym  READ_RECORD  LDA     VX_O_KEY_BUF
         5 000136   000001 236000 xsym               LDQ     VX_O_KEY_BUF+1
         5 000137   000022 773000                    LRL     18
         5 000140   000000 116000 xsym               CMPQ    VX_OU_HEAD
         5 000141   003750 601000 5                  TNZ     POST

      343    12831    2          P$ = VX_REC_BUF_START$;

  12831  5 000142   000000 236000 xsym               LDQ     VX_REC_BUF_START$
         5 000143   200006 756100                    STQ     P$,,AUTO

      344    12832    2          RTYPE = VX_OK.KRTYPE;

  12832  5 000144   000002 235000 xsym               LDA     VX_OK+2
         5 000145   200053 755100                    STA     RTYPE,,AUTO

      345    12833    2          PAGE# = VX_OK.KPAGE#;

  12833  5 000146   000003 235000 xsym               LDA     VX_OK+3
         5 000147   200133 755100                    STA     PAGE#,,AUTO

      346    12834    2          IO_SIZEW = VX_IO_SIZEW;

  12834  5 000150   000000 235000 xsym               LDA     VX_IO_SIZEW
         5 000151   200054 755100                    STA     IO_SIZEW,,AUTO

      347    12835    2          SECT# = VX_OK.KSECT#;

  12835  5 000152   000007 235000 xsym               LDA     VX_OK+7
         5 000153   200047 755100                    STA     SECT#,,AUTO

      348    12836    2          IF VX_IO_SIZEW > 0

  12836  5 000154   000000 235000 xsym               LDA     VX_IO_SIZEW
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:124  
         5 000155   000164 604400 5                  TMOZ    s:12846

      349    12837    2          THEN REC_BUF_STOP$  = PINCRW( VX_REC_BUF_START$, IO_SIZEW - 1 );

  12837  5 000156   200054 236100                    LDQ     IO_SIZEW,,AUTO
         5 000157   000022 736000                    QLS     18
         5 000160   000001 136003                    SBLQ    1,DU
         5 000161   000000 036000 xsym               ADLQ    VX_REC_BUF_START$
         5 000162   200014 756100                    STQ     REC_BUF_STOP$,,AUTO
         5 000163   000175 710000 5                  TRA     s:12851

      350    12838    3          ELSE DO;                         /* 0 size */

      351    12839        /*E*   ERROR: VXT-E$FIMAGE_ZERO_REC_SIZE_VX-0
      352    12840              MESSAGE: Object language error: 0 record size.
      353    12841              DESCRIPTION: Self-explanatory.
      354    12842        */
      355    12843                  %SCREAM(
      356    12844                  ERR#=E$FIMAGE_ZERO_REC_SIZE_VX,
      357    12845                  LEVEL=@E$S_D_VX, MID="'T'" );

  12846  5 000164   000037 630400 6                  EPPR0   31
         5 000165   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000166   000000 701000 xent               TSX1    VXE$ERROR
         5 000167   000000 011000                    NOP     0

      358    12848    3             CALL TELL_PAGE_TYPE( -3 );

  12848  5 000170   000040 236000 6                  LDQ     32
         5 000171   200155 756100                    STQ     @ERR_VALUE+3,,AUTO
         5 000172   004152 701000 5                  TSX1    TELL_PAGE_TYPE
         5 000173   000000 011000                    NOP     0

      359    12849    3             GOTO NEXT_RECORD;

  12849  5 000174   000112 710000 5                  TRA     NEXT_RECORD

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:125  
      360    12850    3             END;
      361    12851    3          IF RTYPE = 10 THEN DO;

  12851  5 000175   200053 235100                    LDA     RTYPE,,AUTO
         5 000176   000012 115007                    CMPA    10,DL
         5 000177   002256 601000 5                  TNZ     s:13464

      362    12852    4             IF SECT# < SECT_COUNT THEN DO;

  12852  5 000200   200047 236100                    LDQ     SECT#,,AUTO
         5 000201   200046 116100                    CMPQ    SECT_COUNT,,AUTO
         5 000202   000207 603000 5                  TRC     s:12868

      363    12853    4                SC_CURR$ = PINCRW( VX_SC_BASE$, SECT# * SIZEW( VX$SC ) );

  12853  5 000203   000003 402003                    MPY     3,DU
         5 000204   000000 036000 xsym               ADLQ    VX_SC_BASE$
         5 000205   200011 756100                    STQ     SC_CURR$,,AUTO

      364    12854    4                END;

  12854  5 000206   000250 710000 5                  TRA     s:12887

      365    12855    4             ELSE DO;

      366    12856        /*E*  ERROR: VXT-E$FIMAGE_SC_RANGE_VX-0
      367    12857              MESSAGE: Object language error. Section number is out of range.
      368    12858                       Permissible range: 0 - %U1.  Attempted access: %U2.
      369    12859              DESCRIPTION: Self-explanatory.
      370    12860        */
      371    12861
      372    12862                     %NUMBER( NUM1="SECT_COUNT", NUM2="SECT#" );

  12868  5 000207   000001 236000 6                  LDQ     1
         5 000210   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 000211   200046 630500                    EPPR0   SECT_COUNT,,AUTO
         5 000212   200161 450500                    STP0    @SEVERITY+4,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:126  
         5 000213   000043 236000 6                  LDQ     35
         5 000214   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 000215   000044 237000 6                  LDAQ    36
         5 000216   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 000217   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 000220   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 000221   000000 701000 xent               TSX1    VXD$B2C
         5 000222   000000 011000                    NOP     0

  12872  5 000223   000001 236000 6                  LDQ     1
         5 000224   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 000225   200047 630500                    EPPR0   SECT#,,AUTO
         5 000226   200161 450500                    STP0    @SEVERITY+4,,AUTO
         5 000227   000047 236000 6                  LDQ     39
         5 000230   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 000231   000050 237000 6                  LDAQ    40
         5 000232   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 000233   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 000234   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 000235   000000 701000 xent               TSX1    VXD$B2C
         5 000236   000000 011000                    NOP     0

      373    12879                     %SCREAM(
      374    12880                     ERR#=E$FIMAGE_SC_RANGE_VX,
      375    12881                     LEVEL=@E$F_D_VX, MID="'T'" );

  12882  5 000237   000054 630400 6                  EPPR0   44
         5 000240   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000241   000000 701000 xent               TSX1    VXE$ERROR
         5 000242   000000 011000                    NOP     0

      376    12884    4                CALL TELL_PAGE_TYPE( -4 );

  12884  5 000243   000055 236000 6                  LDQ     45
         5 000244   200155 756100                    STQ     @ERR_VALUE+3,,AUTO
         5 000245   004152 701000 5                  TSX1    TELL_PAGE_TYPE
         5 000246   000000 011000                    NOP     0
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:127  

      377    12885    4                GOTO NEXT_RECORD;

  12885  5 000247   000112 710000 5                  TRA     NEXT_RECORD

      378    12886    4                END;
      379    12887    4             IF VX_OK.KOFSET < SC_CURR$ -> VX$SC.SIZE THEN DO;

  12887  5 000250   200011 470500                    LDP0    SC_CURR$,,AUTO
         5 000251   000001 236100                    LDQ     1,,PR0
         5 000252   777777 376007                    ANQ     -1,DL
         5 000253   000004 116000 xsym               CMPQ    VX_OK+4
         5 000254   000263 602000 5                  TNC     s:12891
         5 000255   000263 600000 5                  TZE     s:12891

      380    12888    4                INIT_ADR = SC_CURR$ -> VX$SC.ADDRESS + VX_OK.KOFSET;

  12888  5 000256   000000 236100                    LDQ     0,,PR0
         5 000257   777777 376007                    ANQ     -1,DL
         5 000260   000004 036000 xsym               ADLQ    VX_OK+4
         5 000261   200036 756100                    STQ     INIT_ADR,,AUTO

      381    12889    4                END;

  12889  5 000262   000327 710000 5                  TRA     s:12930

      382    12890    4             ELSE DO;

      383    12891    4                IF SC_CURR$ -> VX$SC.TYPE ~= 5

  12891  5 000263   000000 236100                    LDQ     0,,PR0
         5 000264   077000 376003                    ANQ     32256,DU
         5 000265   005000 116003                    CMPQ    2560,DU
         5 000266   000272 601000 5                  TNZ     s:12900
         5 000267   000000 236100                    LDQ     0,,PR0
         5 000270   000010 316003                    CANQ    8,DU
         5 000271   000327 601000 5                  TNZ     s:12930
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:128  

      384    12892    4                        OR
      385    12893    4                        NOT SC_CURR$ -> VX$SC.ATTR.PRE_DCB
      386    12894    5                THEN DO;

      387    12895        /*E*  ERROR: VXT-E$FIMAGE_BAD_OFFSET_VX-0
      388    12896              MESSAGE: Offset value is out of bounds. Permissible range: 0 - %U1.
      389    12897                       Attempted access: %U2.
      390    12898              DESCRIPTION: Self-explanatory.
      391    12899        */
      392    12900    5                   J = SC_CURR$ -> VX$SC.SIZE - 1;

  12900  5 000272   000001 236100                    LDQ     1,,PR0
         5 000273   777777 376007                    ANQ     -1,DL
         5 000274   000001 136007                    SBLQ    1,DL
         5 000275   200020 756100                    STQ     J,,AUTO

      393    12901                        %NUMBER( NUM1=J, NUM2="VX_OK.KOFSET" );

  12907  5 000276   000001 236000 6                  LDQ     1
         5 000277   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 000300   200020 631500                    EPPR1   J,,AUTO
         5 000301   200161 451500                    STP1    @SEVERITY+4,,AUTO
         5 000302   000043 236000 6                  LDQ     35
         5 000303   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 000304   000044 237000 6                  LDAQ    36
         5 000305   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 000306   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 000307   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 000310   000000 701000 xent               TSX1    VXD$B2C
         5 000311   000000 011000                    NOP     0

  12911  5 000312   000060 630400 6                  EPPR0   48
         5 000313   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 000314   000000 701000 xent               TSX1    VXD$B2C
         5 000315   000000 011000                    NOP     0

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:129  
      394    12918                        %SCREAM(
      395    12919                        ERR#=E$FIMAGE_BAD_OFFSET_VX,
      396    12920                        LEVEL=@E$F_D_VX, MID="'T'" );

  12921  5 000316   000066 630400 6                  EPPR0   54
         5 000317   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000320   000000 701000 xent               TSX1    VXE$ERROR
         5 000321   000000 011000                    NOP     0

      397    12923    5                   CALL TELL_PAGE_TYPE( -4 );

  12923  5 000322   000055 236000 6                  LDQ     45
         5 000323   200155 756100                    STQ     @ERR_VALUE+3,,AUTO
         5 000324   004152 701000 5                  TSX1    TELL_PAGE_TYPE
         5 000325   000000 011000                    NOP     0

      398    12924    5                   GOTO NEXT_RECORD;

  12924  5 000326   000112 710000 5                  TRA     NEXT_RECORD

      399    12925    5                   END;
      400    12926    4                END;                       /* If SC_CURR$ -> VX$SC.TYPE ... */
      401    12927
      402    12928
      403    12929
      404    12930    3             NODE_INX = SC_CURR$ -> VX$SC.NODE#;

  12930  5 000327   000002 236100                    LDQ     2,,PR0
         5 000330   000022 772000                    QRL     18
         5 000331   200037 756100                    STQ     NODE_INX,,AUTO

      405    12931    3             SC_SIZE  = SC_CURR$ -> VX$SC.SIZE;

  12931  5 000332   000001 236100                    LDQ     1,,PR0
         5 000333   777777 376007                    ANQ     -1,DL
         5 000334   200051 756100                    STQ     SC_SIZE,,AUTO

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:130  
      406    12932    4             DO CASE( SC_CURR$ -> VX$SC.TYPE );

  12932  5 000335   000000 236100                    LDQ     0,,PR0
         5 000336   000033 772000                    QRL     27
         5 000337   000077 376007                    ANQ     63,DL
         5 000340   000011 116007                    CMPQ    9,DL
         5 000341   000343 602006 5                  TNC     s:12932+6,QL
         5 000342   000461 710000 5                  TRA     s:12972
         5 000343   000354 710000 5                  TRA     s:12934
         5 000344   000366 710000 5                  TRA     s:12939
         5 000345   000354 710000 5                  TRA     s:12934
         5 000346   000354 710000 5                  TRA     s:12934
         5 000347   000354 710000 5                  TRA     s:12934
         5 000350   000401 710000 5                  TRA     s:12944
         5 000351   000366 710000 5                  TRA     s:12939
         5 000352   000366 710000 5                  TRA     s:12939
         5 000353   000366 710000 5                  TRA     s:12939

      407    12933    4               CASE( 0,2,4,3 );

      408    12934    4                 IF SC_CURR$ -> VX$SC.ATTR.SEGMENT

  12934  5 000354   000000 236100                    LDQ     0,,PR0
         5 000355   000040 316003                    CANQ    32,DU
         5 000356   000364 600000 5                  TZE     s:12936

      409    12935    4                 THEN BUF_TYPE = 3/*@DS3*/ + SC_CURR$ -> VX$SC.SEG ;

  12935  5 000357   000000 236100                    LDQ     0,,PR0
         5 000360   000041 772000                    QRL     33
         5 000361   000003 036007                    ADLQ    3,DL
         5 000362   200040 756100                    STQ     BUF_TYPE,,AUTO
         5 000363   000461 710000 5                  TRA     s:12972

      410    12936    4                 ELSE BUF_TYPE = 0/*@DATA*/;

  12936  5 000364   200040 450100                    STZ     BUF_TYPE,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:131  
         5 000365   000461 710000 5                  TRA     s:12972

      411    12937
      412    12938    4               CASE( 6,1,7,8 );

      413    12939    4                 IF SC_CURR$ -> VX$SC.ATTR.SEGMENT

  12939  5 000366   000000 236100                    LDQ     0,,PR0
         5 000367   000040 316003                    CANQ    32,DU
         5 000370   000376 600000 5                  TZE     s:12941

      414    12940    4                 THEN BUF_TYPE = 3/*@DS3*/ + SC_CURR$ -> VX$SC.SEG ;

  12940  5 000371   000000 236100                    LDQ     0,,PR0
         5 000372   000041 772000                    QRL     33
         5 000373   000003 036007                    ADLQ    3,DL
         5 000374   200040 756100                    STQ     BUF_TYPE,,AUTO
         5 000375   000461 710000 5                  TRA     s:12972

      415    12941    4                 ELSE BUF_TYPE = 1/*@PROC*/;

  12941  5 000376   000001 235007                    LDA     1,DL
         5 000377   200040 755100                    STA     BUF_TYPE,,AUTO
         5 000400   000461 710000 5                  TRA     s:12972

      416    12942
      417    12943    4               CASE(     5 );

      418    12944    5                 IF SC_CURR$ -> VX$SC.ATTR.PRE_DCB THEN DO;
             12944                          /* Cannot init predefined dcbs */

  12944  5 000401   000000 236100                    LDQ     0,,PR0
         5 000402   000010 316003                    CANQ    8,DU
         5 000403   000425 600000 5                  TZE     s:12965

      419    12945        /*E*  ERROR: VXT-E$FIMAGE_PRE_DCB_VX-0
      420    12946              MESSAGE: Predefined DCB: %U1 can not be initialized. Skipping initialization.
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:132  
      421    12947              DESCRIPTION: Self-explanatory,
      422    12948        */
      423    12949    5                    Q$ = PINCRW( VX_CURR$ -> VX$NODE.L_START.DN$,

  12949  5 000404   000001 220100                    LDX0    1,,PR0
         5 000405   000000 471400 xsym               LDP1    VX_CURR$
         5 000406   100031 473500                    LDP3    25,,PR1
         5 000407   300000 634510                    EPPR4   0,X0,PR3
         5 000410   200007 454500                    STP4    Q$,,AUTO

      424    12950    5                            SC_CURR$ -> VX$SC.NAME_DISP );
      425    12951    5                    VX_EFIELD1.COUNT = Q$ -> B$DNAME.COUNT;

  12951  5 000411   400000 236100                    LDQ     0,,PR4
         5 000412   000011 736000                    QLS     9
         5 000413   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O

      426    12952    5                    VX_EFIELD1.CHARS = Q$ -> B$DNAME.TEXT;

  12952  5 000414   400000 220100                    LDX0    0,,PR4
         5 000415   040000 100540                    MLR     fill='040'O
         5 000416   400000 400010                    ADSC9   0,,PR4                   cn=2,n=*X0
         5 000417   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      427    12953                         %SCREAM(
      428    12954                         ERR#=E$FIMAGE_PRE_DCB_VX,
      429    12955                         LEVEL=@E$S_VX,
      430    12956                         MID="'T'",
      431    12957                         AUX=@E$OUOF_VX);

  12958  5 000420   000073 630400 6                  EPPR0   59
         5 000421   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000422   000000 701000 xent               TSX1    VXE$ERROR
         5 000423   000000 011000                    NOP     0

      432    12960    5                    GOTO NEXT_RECORD;

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:133  
  12960  5 000424   000112 710000 5                  TRA     NEXT_RECORD

      433    12961    5                    END;
      434    12962    5                 ELSE DO;                  /* A user dcb */

      435    12963    5                    END;

      436    12964        /* Turn initial bit off */
      437    12965    4                 ADR = SC_CURR$ -> VX$SC.ADDRESS;

  12965  5 000425   000000 236100                    LDQ     0,,PR0
         5 000426   777777 376007                    ANQ     -1,DL
         5 000427   200043 756100                    STQ     ADR,,AUTO

      438    12966    4                CALL VXU$SETUP( FIRST_ADR_SETUP$, 2/*@ROS*/, ADR, VX_DCB_SIZEW+1, 0 );

  12966  5 000430   000000 235000 xsym               LDA     VX_DCB_SIZEW
         5 000431   000001 035007                    ADLA    1,DL
         5 000432   200156 755100                    STA     @SEVERITY+1,,AUTO
         5 000433   000000 236000 6                  LDQ     0
         5 000434   200163 756100                    STQ     @SEVERITY+6,,AUTO
         5 000435   200156 631500                    EPPR1   @SEVERITY+1,,AUTO
         5 000436   200162 451500                    STP1    @SEVERITY+5,,AUTO
         5 000437   200043 633500                    EPPR3   ADR,,AUTO
         5 000440   200161 453500                    STP3    @SEVERITY+4,,AUTO
         5 000441   000014 236000 6                  LDQ     12
         5 000442   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 000443   200012 634500                    EPPR4   FIRST_ADR_SETUP$,,AUTO
         5 000444   200157 454500                    STP4    @SEVERITY+2,,AUTO
         5 000445   200157 630500                    EPPR0   @SEVERITY+2,,AUTO
         5 000446   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 000447   000000 701000 xent               TSX1    VXU$SETUP
         5 000450   000000 011000                    NOP     0

      439    12967    4                 FIRST_ADR_SETUP$ -> F$DCB.DCBNAME.S = '0'B;

  12967  5 000451   200012 470500                    LDP0    FIRST_ADR_SETUP$,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:134  
         5 000452   000077 236000 6                  LDQ     63
         5 000453   000140 356100                    ANSQ    96,,PR0

      440    12968    4                 BUF_TYPE = 2/*@ROS*/;

  12968  5 000454   000002 235007                    LDA     2,DL
         5 000455   200040 755100                    STA     BUF_TYPE,,AUTO

      441    12969    4                 NODE_INX = 0;             /* In the root */

  12969  5 000456   200037 450100                    STZ     NODE_INX,,AUTO

      442    12970    4                 SC_SIZE = VX_DCB_SIZEW;

  12970  5 000457   000000 235000 xsym               LDA     VX_DCB_SIZEW
         5 000460   200051 755100                    STA     SC_SIZE,,AUTO

      443    12971    4               END;                        /* Do case( SC_CURR$ -> VX$SC.TYPE ) */

      444    12972    3             SC_LAST_ADR = SC_CURR$ -> VX$SC.ADDRESS + SC_SIZE - 1;

  12972  5 000461   200011 470500                    LDP0    SC_CURR$,,AUTO
         5 000462   000000 236100                    LDQ     0,,PR0
         5 000463   777777 376007                    ANQ     -1,DL
         5 000464   200051 036100                    ADLQ    SC_SIZE,,AUTO
         5 000465   000001 136007                    SBLQ    1,DL
         5 000466   200050 756100                    STQ     SC_LAST_ADR,,AUTO

      445    12973        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:135  
      446    12974    4             IF VX_OK.KSTYPE = 0 THEN DO;

  12974  5 000467   000005 235000 xsym               LDA     VX_OK+5
         5 000470   000572 601000 5                  TNZ     s:13015

      447    12975
      448    12976        /*  Text record  */
      449    12977
      450    12978    5                IF INIT_ADR + IO_SIZEW - 1 > SC_LAST_ADR THEN DO;
             12978                         /* Past end of section dcl */

  12978  5 000471   200036 236100                    LDQ     INIT_ADR,,AUTO
         5 000472   200054 036100                    ADLQ    IO_SIZEW,,AUTO
         5 000473   000001 136007                    SBLQ    1,DL
         5 000474   000505 604000 5                  TMI     s:12993
         5 000475   200050 116100                    CMPQ    SC_LAST_ADR,,AUTO
         5 000476   000505 602000 5                  TNC     s:12993
         5 000477   000505 600000 5                  TZE     s:12993

      451    12979    5                   CALL REPORT_BAD_ADDRESS_GENERATION( IO_SIZEW );

  12979  5 000500   200054 631500                    EPPR1   IO_SIZEW,,AUTO
         5 000501   200151 451500                    STP1    MOVE_TEMP+2,,AUTO
         5 000502   004272 701000 5                  TSX1    REPORT_BAD_ADDRESS_GENERATION
         5 000503   000000 011000                    NOP     0

      452    12980    5                   GOTO NEXT_RECORD;

  12980  5 000504   000112 710000 5                  TRA     NEXT_RECORD

      453    12981    5                   END;
      454    12982        %LIST;
      455    12983                     %SET LISTSUB='1'B;
      456    12984                     %MOVE_PAGE(
      457    12985                     MOVE_SOURCE$ = VX_REC_BUF_START$,
      458    12986                     MOVE_PAGE_SIZE = IO_SIZEW,
      459    12987                     MOVE_ADR=INIT_ADR,
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:136  
      460    12988                     MOVE_UNIT = @BUF_SIZE,
      461    12989                     MOVE_BUFTYP = BUF_TYPE,
      462    12990                     MOVE_NODE# = NODE_INX);
             12991        /**/
             12992        /**/
             12993    4           MOVE_ADR_TEMP = INIT_ADR;

  12993  5 000505   200036 236100                    LDQ     INIT_ADR,,AUTO
         5 000506   200145 756100                    STQ     MOVE_ADR_TEMP,,AUTO

             12994    4           MOVE_PAGE_REMAIN = IO_SIZEW;

  12994  5 000507   200054 235100                    LDA     IO_SIZEW,,AUTO
         5 000510   200143 755100                    STA     MOVE_PAGE_REMAIN,,AUTO

             12995    4           MOVE_SRC$ = VX_REC_BUF_START$;

  12995  5 000511   000000 236000 xsym               LDQ     VX_REC_BUF_START$
         5 000512   200146 756100                    STQ     MOVE_SRC$,,AUTO

             12996    5           DO WHILE( MOVE_PAGE_REMAIN > 0 );

  12996  5 000513   000000 115003                    CMPA    0,DU
         5 000514   000112 604400 5                  TMOZ    NEXT_RECORD

             12997    5              IF MOVE_PAGE_REMAIN >= 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ THEN
             12997                       MOVE_TEMP = 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;

  12997  5 000515   200143 235100                    LDA     MOVE_PAGE_REMAIN,,AUTO
         5 000516   002000 115007                    CMPA    1024,DL
         5 000517   000523 604000 5                  TMI     s:12998

  12997  5 000520   002000 236007                    LDQ     1024,DL
         5 000521   200147 756100                    STQ     MOVE_TEMP,,AUTO
         5 000522   000524 710000 5                  TRA     s:12999

             12998    5              ELSE MOVE_TEMP = MOVE_PAGE_REMAIN;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:137  

  12998  5 000523   200147 755100                    STA     MOVE_TEMP,,AUTO

             12999    5              CALL VXU$SETUP( MOVE_TARGET$, BUF_TYPE, MOVE_ADR_TEMP, MOVE_TEMP,
             12999                       NODE_INX );

  12999  5 000524   200037 630500                    EPPR0   NODE_INX,,AUTO
         5 000525   200162 450500                    STP0    @SEVERITY+5,,AUTO
         5 000526   200147 631500                    EPPR1   MOVE_TEMP,,AUTO
         5 000527   200161 451500                    STP1    @SEVERITY+4,,AUTO
         5 000530   200145 633500                    EPPR3   MOVE_ADR_TEMP,,AUTO
         5 000531   200160 453500                    STP3    @SEVERITY+3,,AUTO
         5 000532   200040 634500                    EPPR4   BUF_TYPE,,AUTO
         5 000533   200157 454500                    STP4    @SEVERITY+2,,AUTO
         5 000534   200144 635500                    EPPR5   MOVE_TARGET$,,AUTO
         5 000535   200156 455500                    STP5    @SEVERITY+1,,AUTO
         5 000536   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 000537   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 000540   000000 701000 xent               TSX1    VXU$SETUP
         5 000541   000000 011000                    NOP     0

             13000    5              VX_TARGET_COUNT = MOVE_TEMP * 4/*@CHAR_WORD*/;

  13000  5 000542   200147 235100                    LDA     MOVE_TEMP,,AUTO
         5 000543   000002 735000                    ALS     2
         5 000544   000000 755000 xsym               STA     VX_TARGET_COUNT

             13001    5              VX_SOURCE_COUNT = VX_TARGET_COUNT;

  13001  5 000545   000000 755000 xsym               STA     VX_SOURCE_COUNT

             13002    5              MOVE_TARGET$ -> VX$TARGET_C = MOVE_SRC$ -> VX$SOURCE_C;

  13002  5 000546   200146 470500                    LDP0    MOVE_SRC$,,AUTO
         5 000547   000000 620005                    EAX0    0,AL
         5 000550   200144 471500                    LDP1    MOVE_TARGET$,,AUTO
         5 000551   000000 721000 xsym               LXL1    VX_TARGET_COUNT
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:138  
         5 000552   040140 100540                    MLR     fill='040'O
         5 000553   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         5 000554   100000 000011                    ADSC9   0,,PR1                   cn=0,n=*X1

             13003    5              MOVE_SRC$  = PINCRW( MOVE_SRC$,  MOVE_TEMP );

  13003  5 000555   200147 236100                    LDQ     MOVE_TEMP,,AUTO
         5 000556   000022 736000                    QLS     18
         5 000557   200146 036100                    ADLQ    MOVE_SRC$,,AUTO
         5 000560   200146 756100                    STQ     MOVE_SRC$,,AUTO

             13004    5              MOVE_PAGE_REMAIN = MOVE_PAGE_REMAIN - MOVE_TEMP;

  13004  5 000561   200143 236100                    LDQ     MOVE_PAGE_REMAIN,,AUTO
         5 000562   200147 136100                    SBLQ    MOVE_TEMP,,AUTO
         5 000563   200143 756100                    STQ     MOVE_PAGE_REMAIN,,AUTO

             13005    5              MOVE_ADR_TEMP = MOVE_ADR_TEMP + MOVE_TEMP;

  13005  5 000564   200145 236100                    LDQ     MOVE_ADR_TEMP,,AUTO
         5 000565   200147 036100                    ADLQ    MOVE_TEMP,,AUTO
         5 000566   200145 756100                    STQ     MOVE_ADR_TEMP,,AUTO

             13006    5              END;

  13006  5 000567   200143 235100                    LDA     MOVE_PAGE_REMAIN,,AUTO
         5 000570   000515 605400 5                  TPNZ    s:12997

      463    13008        %PLIST;
      464    13009    4                END;

  13009  5 000571   000112 710000 5                  TRA     NEXT_RECORD

      465    13010        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:139  
      466    13011    4             ELSE DO;

      467    13012
      468    13013        /*    Relocation record */
      469    13014
      470    13015    4                LAST_ADR_SETUP = -1; /* Set initial condition to force trip thru setup

  13015  5 000572   000001 335007                    LCA     1,DL
         5 000573   200132 755100                    STA     LAST_ADR_SETUP,,AUTO

      471    13016                                    the first time thru */
      472    13017    5                DO WHILE ( P$ <= REC_BUF_STOP$    );

  13017  5 000574   200014 236100                    LDQ     REC_BUF_STOP$,,AUTO
         5 000575   200006 116100                    CMPQ    P$,,AUTO
         5 000576   000112 602000 5                  TNC     NEXT_RECORD

      473    13018    5                   DESCENDANT    = '0'B/*@FALSE_B*/;

  13018  5 000577   200004 450100                    STZ     DESCENDANT,,AUTO

      474    13019    5                   CHECK_OVERLAY = '0'B/*@FALSE_B*/;

  13019  5 000600   200005 450100                    STZ     CHECK_OVERLAY,,AUTO

      475    13020        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:140  
      476    13021    6                   IF R1.OPNDTYP = 0 THEN DO;

  13021  5 000601   200006 470500                    LDP0    P$,,AUTO
         5 000602   000000 236100                    LDQ     0,,PR0
         5 000603   740000 316003                    CANQ    -16384,DU
         5 000604   001470 601000 5                  TNZ     s:13275

      477    13022        /*
      478    13023              Form 2 relocation directive
      479    13024        */
      480    13025    6                      OPRD_TYPE      =         R2.OPNDTYP;

  13025  5 000605   000000 236100                    LDQ     0,,PR0
         5 000606   000032 772000                    QRL     26
         5 000607   000017 376007                    ANQ     15,DL
         5 000610   200023 756100                    STQ     OPRD_TYPE,,AUTO

      481    13026    6                      EVAL_OPRT      =         R2.EVALOP;

  13026  5 000611   000000 236100                    LDQ     0,,PR0
         5 000612   000026 772000                    QRL     22
         5 000613   000017 376007                    ANQ     15,DL
         5 000614   200034 756100                    STQ     EVAL_OPRT,,AUTO

      482    13027    6                      RELOC_OPRT     =         R2.RELOCOP;

  13027  5 000615   000000 236100                    LDQ     0,,PR0
         5 000616   000022 772000                    QRL     18
         5 000617   000017 376007                    ANQ     15,DL
         5 000620   200035 756100                    STQ     RELOC_OPRT,,AUTO

      483    13028    6                      OPERAND        =         R2.OPERAND;

  13028  5 000621   000000 236100                    LDQ     0,,PR0
         5 000622   777777 376007                    ANQ     -1,DL
         5 000623   200026 756100                    STQ     OPERAND,,AUTO

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:141  
      484    13029
      485    13030    7                      DO CASE( OPRD_TYPE );

  13030  5 000624   200023 235100                    LDA     OPRD_TYPE,,AUTO
         5 000625   000007 115007                    CMPA    7,DL
         5 000626   000630 602005 5                  TNC     s:13030+4,AL
         5 000627   000725 710000 5                  TRA     s:13064
         5 000630   000725 710000 5                  TRA     s:13064
         5 000631   000667 710000 5                  TRA     s:13047
         5 000632   000667 710000 5                  TRA     s:13047
         5 000633   000667 710000 5                  TRA     s:13047
         5 000634   000637 710000 5                  TRA     s:13032
         5 000635   000641 710000 5                  TRA     s:13035
         5 000636   000667 710000 5                  TRA     s:13047

      486    13031    7                        CASE( 4 );

      487    13032    7                          RESULT  =   OPERAND;

  13032  5 000637   200141 756100                    STQ     RESULT,,AUTO
         5 000640   000734 710000 5                  TRA     s:13070

      488    13033
      489    13034    7                        CASE( 5 );

      490    13035    7                          Q$ = PINCRW( VX_SC_BASE$, OPERAND * SIZEW(VX$SC) );

  13035  5 000641   000003 402003                    MPY     3,DU
         5 000642   000000 036000 xsym               ADLQ    VX_SC_BASE$
         5 000643   200007 756100                    STQ     Q$,,AUTO

      491    13036    7                          IF Q$ -> VX$SC.ATTR.SEGMENT

  13036  5 000644   200007 471500                    LDP1    Q$,,AUTO
         5 000645   100000 236100                    LDQ     0,,PR1
         5 000646   000040 316003                    CANQ    32,DU
         5 000647   000655 600000 5                  TZE     s:13039
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:142  

      492    13037    7                          THEN RESULT = VX_SEGID( Q$ -> VX$SC.SEG );

  13037  5 000650   100000 236100                    LDQ     0,,PR1
         5 000651   000041 772000                    QRL     33
         5 000652   000000 235006 xsym               LDA     VX_SEGID,QL
         5 000653   200141 755100                    STA     RESULT,,AUTO
         5 000654   000734 710000 5                  TRA     s:13070

      493    13038    7                          ELSE
      494    13039    7                             IF Q$ -> VX$SC.TYPE = 5

  13039  5 000655   100000 236100                    LDQ     0,,PR1
         5 000656   077000 376003                    ANQ     32256,DU
         5 000657   005000 116003                    CMPQ    2560,DU
         5 000660   000664 601000 5                  TNZ     s:13041

      495    13040    7                             THEN RESULT = BITBIN( '6003'O );

  13040  5 000661   006003 235007                    LDA     3075,DL
         5 000662   200141 755100                    STA     RESULT,,AUTO
         5 000663   000734 710000 5                  TRA     s:13070

      496    13041    7                             ELSE RESULT = BITBIN( '6000'O );

  13041  5 000664   006000 235007                    LDA     3072,DL
         5 000665   200141 755100                    STA     RESULT,,AUTO
         5 000666   000734 710000 5                  TRA     s:13070

      497    13042
      498    13043    7                        CASE(  1,

      499    13044    7                                        2,
      500    13045    7                                        3,
      501    13046    7                                        6 );
      502    13047    7                          MAP_INDEX = OPRD_MAP( OPRD_TYPE );

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:143  
  13047  5 000667   000030 235005 3                  LDA     OPRD_MAP,AL
         5 000670   200055 755100                    STA     MAP_INDEX,,AUTO

      503    13048    7                          IF OPERAND >= VX_PASS2_REF.SAT.COUNT_A(MAP_INDEX)

  13048  5 000671   000036 116005 xsym               CMPQ    VX_PASS2_REF+30,AL
         5 000672   000700 602000 5                  TNC     s:13053

      504    13049    8                          THEN DO;

      505    13050    8                             CALL BAD_OPERAND_RANGE( -4 );

  13050  5 000673   000055 236000 6                  LDQ     45
         5 000674   200151 756100                    STQ     MOVE_TEMP+2,,AUTO
         5 000675   004324 701000 5                  TSX1    BAD_OPERAND_RANGE
         5 000676   000000 011000                    NOP     0

      506    13051    8                             GOTO NEXT_RECORD;

  13051  5 000677   000112 710000 5                  TRA     NEXT_RECORD

      507    13052    8                             END;
      508    13053    7                          Q$ = PINCRW( VX_PASS2_REF.SAT.L_START_A$(MAP_INDEX),

  13053  5 000700   200055 720100                    LXL0    MAP_INDEX,,AUTO
         5 000701   000043 402010 xsym               MPY     VX_PASS2_REF+35,X0
         5 000702   000024 471410 xsym               LDP1    VX_PASS2_REF+20,X0
         5 000703   100000 633506                    EPPR3   0,QL,PR1
         5 000704   200007 453500                    STP3    Q$,,AUTO

      509    13054    7                                  OPERAND * VX_PASS2_REF.SAT.ENT_SIZE_A(MAP_INDEX) );
      510    13055    7                          IF OPRD_TYPE = 1

  13055  5 000705   200023 235100                    LDA     OPRD_TYPE,,AUTO
         5 000706   000001 115007                    CMPA    1,DL
         5 000707   000714 601000 5                  TNZ     s:13058

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:144  
      511    13056    7                          THEN RESULT = Q$ -> VX$SC.ADDRESS;

  13056  5 000710   300000 236100                    LDQ     0,,PR3
         5 000711   777777 376007                    ANQ     -1,DL
         5 000712   200141 756100                    STQ     RESULT,,AUTO
         5 000713   000734 710000 5                  TRA     s:13070

      512    13057    8                          ELSE DO;

      513    13058    8                             RESULT = Q$ -> VXR$SAT.VALUE;

  13058  5 000714   300000 235100                    LDA     0,,PR3
         5 000715   200141 755100                    STA     RESULT,,AUTO

      514    13059    8                             DESCENDANT = Q$ -> VXR$SAT.BELOW;

  13059  5 000716   300001 236100                    LDQ     1,,PR3
         5 000717   400000 376003                    ANQ     -131072,DU
         5 000720   200004 756100                    STQ     DESCENDANT,,AUTO

      515    13060    8                             DEPTH_NODE# = Q$ -> VXR$SAT.NODE#;

  13060  5 000721   300001 236100                    LDQ     1,,PR3
         5 000722   777777 376007                    ANQ     -1,DL
         5 000723   200131 756100                    STQ     DEPTH_NODE#,,AUTO

      516    13061    8                             END;

  13061  5 000724   000734 710000 5                  TRA     s:13070

      517    13062
      518    13063    7                        CASE(ELSE);

      519    13064    7                          CALL REPORT_BAD_RELOC_VALUE( 1710, OPRD_TYPE );

  13064  5 000725   200023 631500                    EPPR1   OPRD_TYPE,,AUTO
         5 000726   200152 451500                    STP1    @ERR_NUM+1,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:145  
         5 000727   000101 236000 6                  LDQ     65
         5 000730   200151 756100                    STQ     MOVE_TEMP+2,,AUTO
         5 000731   004414 701000 5                  TSX1    REPORT_BAD_RELOC_VALUE
         5 000732   000000 011000                    NOP     0

      520    13065    7                          GOTO NEXT_RECORD;

  13065  5 000733   000112 710000 5                  TRA     NEXT_RECORD

      521    13066    7                        END;               /* Do case */

      522    13067
      523    13068
      524    13069
      525    13070    6                      REPEAT_COUNT = 1;

  13070  5 000734   000001 235007                    LDA     1,DL
         5 000735   200134 755100                    STA     REPEAT_COUNT,,AUTO

      526    13071    7                      IF EVAL_OPRT ~= 0 THEN DO;

  13071  5 000736   200034 236100                    LDQ     EVAL_OPRT,,AUTO
         5 000737   001056 600000 5                  TZE     s:13138

      527    13072    8                         DO CASE( EVAL_OPRT);

  13072  5 000740   000010 116007                    CMPQ    8,DL
         5 000741   000743 602006 5                  TNC     s:13072+3,QL
         5 000742   001044 710000 5                  TRA     s:13130
         5 000743   001044 710000 5                  TRA     s:13130
         5 000744   000753 710000 5                  TRA     s:13074
         5 000745   000757 710000 5                  TRA     s:13077
         5 000746   000763 710000 5                  TRA     s:13080
         5 000747   000767 710000 5                  TRA     s:13083
         5 000750   000773 710000 5                  TRA     s:13086
         5 000751   001015 710000 5                  TRA     s:13103
         5 000752   001037 710000 5                  TRA     s:13120
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:146  

      528    13073    8                           CASE( 1 );

      529    13074    8                             INTER_RESULT        =    RESULT + R2.VALUE;

  13074  5 000753   200141 236100                    LDQ     RESULT,,AUTO
         5 000754   000002 036100                    ADLQ    2,,PR0
         5 000755   200142 756100                    STQ     INTER_RESULT,,AUTO
         5 000756   001053 710000 5                  TRA     s:13135

      530    13075
      531    13076    8                           CASE( 2 );

      532    13077    8                             INTER_RESULT        =    RESULT - R2.VALUE;

  13077  5 000757   200141 236100                    LDQ     RESULT,,AUTO
         5 000760   000002 136100                    SBLQ    2,,PR0
         5 000761   200142 756100                    STQ     INTER_RESULT,,AUTO
         5 000762   001053 710000 5                  TRA     s:13135

      533    13078
      534    13079    8                           CASE( 3 );

      535    13080    8                             INTER_RESULT        =    RESULT * R2.VALUE;

  13080  5 000763   200141 236100                    LDQ     RESULT,,AUTO
         5 000764   000002 402100                    MPY     2,,PR0
         5 000765   200142 756100                    STQ     INTER_RESULT,,AUTO
         5 000766   001053 710000 5                  TRA     s:13135

      536    13081
      537    13082    8                           CASE( 4 );

      538    13083    8                             INTER_RESULT        =    RESULT / R2.VALUE;

  13083  5 000767   200141 236100                    LDQ     RESULT,,AUTO
         5 000770   000002 506100                    DIV     2,,PR0
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:147  
         5 000771   200142 756100                    STQ     INTER_RESULT,,AUTO
         5 000772   001053 710000 5                  TRA     s:13135

      539    13084
      540    13085    8                           CASE( 5 );

      541    13086    8                             I = R2.VALUE;

  13086  5 000773   000002 235100                    LDA     2,,PR0
         5 000774   200017 755100                    STA     I,,AUTO

      542    13087    9                             IF I >= SIZEW( SHF_CON ) - 1 THEN DO;

  13087  5 000775   000043 115007                    CMPA    35,DL
         5 000776   001011 602000 5                  TNC     s:13100

      543    13088        /*E*  ERROR: VXT-E$FIMAGE_BAD_SHR_VX-0
      544    13089             MESSAGE: Right shift count > 35 detected in form 2 directive. Result set to 0.
      545    13090              DESCRIPTION: Self-explanatory.
      546    13091        */
      547    13092                                     %SCREAM(
      548    13093                                     ERR#=E$FIMAGE_BAD_SHR_VX,
      549    13094                                     LEVEL=@E$S_VX, MID="'T'" );

  13095  5 000777   000103 630400 6                  EPPR0   67
         5 001000   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 001001   000000 701000 xent               TSX1    VXE$ERROR
         5 001002   000000 011000                    NOP     0

      550    13097    9                                CALL TELL_PAGE_TYPE( 3 );

  13097  5 001003   000020 236000 6                  LDQ     16
         5 001004   200155 756100                    STQ     @ERR_VALUE+3,,AUTO
         5 001005   004152 701000 5                  TSX1    TELL_PAGE_TYPE
         5 001006   000000 011000                    NOP     0

      551    13098    9                                INTER_RESULT = 0;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:148  

  13098  5 001007   200142 450100                    STZ     INTER_RESULT,,AUTO

      552    13099    9                                END;

  13099  5 001010   001053 710000 5                  TRA     s:13135

      553    13100    8                             ELSE INTER_RESULT = RESULT / SHF_CON(I);

  13100  5 001011   200141 236100                    LDQ     RESULT,,AUTO
         5 001012   000037 506005 3                  DIV     SHF_CON,AL
         5 001013   200142 756100                    STQ     INTER_RESULT,,AUTO
         5 001014   001053 710000 5                  TRA     s:13135

      554    13101    8                           CASE( 6 );

      555    13102
      556    13103    8                             I = R2.VALUE;

  13103  5 001015   000002 235100                    LDA     2,,PR0
         5 001016   200017 755100                    STA     I,,AUTO

      557    13104    9                             IF I >= SIZEW( SHF_CON ) - 1 THEN DO;

  13104  5 001017   000043 115007                    CMPA    35,DL
         5 001020   001033 602000 5                  TNC     s:13117

      558    13105        /*E*  ERROR: VXT-E$FIMAGE_BAD_SHL_VX-0
      559    13106              MESSAGE: Left shift count > 35 detected in form 2 directive. Result set to 0.
      560    13107              DESCRIPTION: Self-explanatory.
      561    13108        */
      562    13109                                     %SCREAM(
      563    13110                                     ERR#=E$FIMAGE_BAD_SHL_VX,
      564    13111                                     LEVEL=@E$S_VX, MID="'T'" );

  13112  5 001021   000110 630400 6                  EPPR0   72
         5 001022   000022 631400 xsym               EPPR1   B_VECTNIL+18
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:149  
         5 001023   000000 701000 xent               TSX1    VXE$ERROR
         5 001024   000000 011000                    NOP     0

      565    13114    9                                CALL TELL_PAGE_TYPE( 3 );

  13114  5 001025   000020 236000 6                  LDQ     16
         5 001026   200155 756100                    STQ     @ERR_VALUE+3,,AUTO
         5 001027   004152 701000 5                  TSX1    TELL_PAGE_TYPE
         5 001030   000000 011000                    NOP     0

      566    13115    9                                INTER_RESULT = 0;

  13115  5 001031   200142 450100                    STZ     INTER_RESULT,,AUTO

      567    13116    9                                END;

  13116  5 001032   001053 710000 5                  TRA     s:13135

      568    13117    8                             ELSE INTER_RESULT = RESULT * SHF_CON(I);

  13117  5 001033   200141 236100                    LDQ     RESULT,,AUTO
         5 001034   000037 402005 3                  MPY     SHF_CON,AL
         5 001035   200142 756100                    STQ     INTER_RESULT,,AUTO
         5 001036   001053 710000 5                  TRA     s:13135

      569    13118
      570    13119    8                           CASE( 7 );

      571    13120    8                             REPEAT_COUNT = OPERAND;

  13120  5 001037   200026 235100                    LDA     OPERAND,,AUTO
         5 001040   200134 755100                    STA     REPEAT_COUNT,,AUTO

      572    13121    8                             INTER_RESULT        =    R2.VALUE;

  13121  5 001041   000002 235100                    LDA     2,,PR0
         5 001042   200142 755100                    STA     INTER_RESULT,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:150  
         5 001043   001053 710000 5                  TRA     s:13135

      573    13122
      574    13123    8                           CASE( ELSE );

      575    13124        /*Here => error */
      576    13125        /*E*  ERROR: VXT-E$FIMAGE_BAD_EVAL_OP_VX-0
      577    13126              MESSAGE: Illegal evaluation operator detected in form %U1 directive.
      578    13127                       Value = %U2.
      579    13128              DESCRIPTION: Self-explanatory.
      580    13129        */
      581    13130    8                             CALL REPORT_BAD_RELOC_VALUE(

  13130  5 001044   200034 631500                    EPPR1   EVAL_OPRT,,AUTO
         5 001045   200152 451500                    STP1    @ERR_NUM+1,,AUTO
         5 001046   000115 236000 6                  LDQ     77
         5 001047   200151 756100                    STQ     MOVE_TEMP+2,,AUTO
         5 001050   004414 701000 5                  TSX1    REPORT_BAD_RELOC_VALUE
         5 001051   000000 011000                    NOP     0

      582    13131    8                                     1708,
      583    13132    8                                     EVAL_OPRT                 );
      584    13133    8                             GOTO NEXT_RECORD;

  13133  5 001052   000112 710000 5                  TRA     NEXT_RECORD

      585    13134    8                           END;            /* Do case( EVAL_OPRT ); */

      586    13135    7                         INC = SIZEW( R2 );

  13135  5 001053   000003 235007                    LDA     3,DL
         5 001054   200042 755100                    STA     INC,,AUTO

      587    13136    7                         END;              /* If EVAL_OPRT ~= 0 then do; */

  13136  5 001055   001062 710000 5                  TRA     s:13144

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:151  
      588    13137    7                      ELSE DO;             /* Here => EVAL_OPRT = 0 */

      589    13138    7                         INTER_RESULT        =    RESULT;

  13138  5 001056   200141 235100                    LDA     RESULT,,AUTO
         5 001057   200142 755100                    STA     INTER_RESULT,,AUTO

      590    13139    7                         INC = SIZEW( R2 ) - SIZEW( R2.VALUE );

  13139  5 001060   000002 235007                    LDA     2,DL
         5 001061   200042 755100                    STA     INC,,AUTO

      591    13140    7                         END;              /* Else do */

      592    13141
      593    13142
      594    13143
      595    13144    6                      S_BIT = R2.STBIT;

  13144  5 001062   200006 470500                    LDP0    P$,,AUTO
         5 001063   000001 236100                    LDQ     1,,PR0
         5 001064   000011 772000                    QRL     9
         5 001065   000777 376007                    ANQ     511,DL
         5 001066   200030 756100                    STQ     S_BIT,,AUTO

      596    13145    6                      E_BIT = R2.ENDBIT;

  13145  5 001067   000001 236100                    LDQ     1,,PR0
         5 001070   000777 376007                    ANQ     511,DL
         5 001071   200031 756100                    STQ     E_BIT,,AUTO

      597    13146    6                      FORM2_COUNT = E_BIT - S_BIT + 1;

  13146  5 001072   200030 136100                    SBLQ    S_BIT,,AUTO
         5 001073   000001 036007                    ADLQ    1,DL
         5 001074   200135 756100                    STQ     FORM2_COUNT,,AUTO

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:152  
      598    13147    7                      IF FORM2_COUNT <= 0 OR FORM2_COUNT > SIZEB( S_BIT ) THEN DO;

  13147  5 001075   001100 604400 5                  TMOZ    s:13153
         5 001076   000044 116007                    CMPQ    36,DL
         5 001077   001163 604400 5                  TMOZ    s:13191

      599    13148        /*E*  ERROR: VXT-E$FIMAGE_BAD_BITS_VX-0
      600    13149              MESSAGE: Object language error. Bit field definition in form 2 directive
      601    13150                       <= 0 or > 36.
      602    13151              DESCRIPTION: Self-explanatory.
      603    13152        */
      604    13153    7                         ERR_LEVEL = -4;

  13153  5 001100   000004 335007                    LCA     4,DL
         5 001101   200122 755100                    STA     ERR_LEVEL,,AUTO

      605    13154                              %SCREAM(
      606    13155                              ERR#=E$FIMAGE_BAD_BITS_VX,
      607    13156                              MID="'T'",
      608    13157                              LEVEL=ERR_LEVEL);

  13158  5 001102   000056 237000 6                  LDAQ    46
         5 001103   200160 757100                    STAQ    @SEVERITY+3,,AUTO
         5 001104   200122 631500                    EPPR1   ERR_LEVEL,,AUTO
         5 001105   200157 451500                    STP1    @SEVERITY+2,,AUTO
         5 001106   000117 236000 6                  LDQ     79
         5 001107   200156 756100                    STQ     @SEVERITY+1,,AUTO
         5 001110   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 001111   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 001112   000000 701000 xent               TSX1    VXE$ERROR
         5 001113   000000 011000                    NOP     0

      609    13160        /*E*  ERROR: VXT-E$FIMAGE_BAD_BITS_CONT_VX-0
      610    13161              MESSAGE: Starting bit = %U1. Ending bit = %U2.
      611    13162              DESCRIPTION: Self-explanatory.
      612    13163        */
      613    13164                              %NUMBER( NUM1=S_BIT, NUM2=E_BIT );
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:153  

  13170  5 001114   000001 236000 6                  LDQ     1
         5 001115   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 001116   200030 630500                    EPPR0   S_BIT,,AUTO
         5 001117   200161 450500                    STP0    @SEVERITY+4,,AUTO
         5 001120   000043 236000 6                  LDQ     35
         5 001121   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 001122   000044 237000 6                  LDAQ    36
         5 001123   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 001124   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 001125   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001126   000000 701000 xent               TSX1    VXD$B2C
         5 001127   000000 011000                    NOP     0

  13174  5 001130   000001 236000 6                  LDQ     1
         5 001131   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 001132   200031 630500                    EPPR0   E_BIT,,AUTO
         5 001133   200161 450500                    STP0    @SEVERITY+4,,AUTO
         5 001134   000047 236000 6                  LDQ     39
         5 001135   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 001136   000050 237000 6                  LDAQ    40
         5 001137   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 001140   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 001141   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001142   000000 701000 xent               TSX1    VXD$B2C
         5 001143   000000 011000                    NOP     0

      614    13181                              %SCREAM(
      615    13182                              ERR#=E$FIMAGE_BAD_BITS_CONT_VX,
      616    13183                              MID="'T'",
      617    13184                              LEVEL=ERR_LEVEL);

  13185  5 001144   000056 237000 6                  LDAQ    46
         5 001145   200160 757100                    STAQ    @SEVERITY+3,,AUTO
         5 001146   200122 630500                    EPPR0   ERR_LEVEL,,AUTO
         5 001147   200157 450500                    STP0    @SEVERITY+2,,AUTO
         5 001150   000121 236000 6                  LDQ     81
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:154  
         5 001151   200156 756100                    STQ     @SEVERITY+1,,AUTO
         5 001152   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 001153   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 001154   000000 701000 xent               TSX1    VXE$ERROR
         5 001155   000000 011000                    NOP     0

      618    13187    7                         CALL TELL_PAGE_TYPE( ERR_LEVEL );

  13187  5 001156   200122 630500                    EPPR0   ERR_LEVEL,,AUTO
         5 001157   200155 450500                    STP0    @ERR_VALUE+3,,AUTO
         5 001160   004152 701000 5                  TSX1    TELL_PAGE_TYPE
         5 001161   000000 011000                    NOP     0

      619    13188    7                         GOTO NEXT_RECORD;

  13188  5 001162   000112 710000 5                  TRA     NEXT_RECORD

      620    13189    7                         END;
      621    13190        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:155  
      622    13191    6                      ADR = INIT_ADR + R2.DISP + S_BIT / 36;

  13191  5 001163   000001 236100                    LDQ     1,,PR0
         5 001164   000022 772000                    QRL     18
         5 001165   200036 036100                    ADLQ    INIT_ADR,,AUTO
         5 001166   200156 756100                    STQ     @SEVERITY+1,,AUTO
         5 001167   200030 236100                    LDQ     S_BIT,,AUTO
         5 001170   000044 506007                    DIV     36,DL
         5 001171   200156 036100                    ADLQ    @SEVERITY+1,,AUTO
         5 001172   200043 756100                    STQ     ADR,,AUTO

      623    13192    6                      ADR_SPAN_LAST = INIT_ADR + R2.DISP +  E_BIT  / 36;

  13192  5 001173   000001 236100                    LDQ     1,,PR0
         5 001174   000022 772000                    QRL     18
         5 001175   200036 036100                    ADLQ    INIT_ADR,,AUTO
         5 001176   200156 756100                    STQ     @SEVERITY+1,,AUTO
         5 001177   200031 236100                    LDQ     E_BIT,,AUTO
         5 001200   000044 506007                    DIV     36,DL
         5 001201   200156 036100                    ADLQ    @SEVERITY+1,,AUTO
         5 001202   200044 756100                    STQ     ADR_SPAN_LAST,,AUTO

      624    13193    6                      S_BIT_MOD = MOD( S_BIT, 36 );

  13193  5 001203   200030 236100                    LDQ     S_BIT,,AUTO
         5 001204   000044 506007                    DIV     36,DL
         5 001205   200032 755100                    STA     S_BIT_MOD,,AUTO

      625    13194    6                      E_BIT_MOD = MOD( E_BIT, 36 );

  13194  5 001206   200031 236100                    LDQ     E_BIT,,AUTO
         5 001207   000044 506007                    DIV     36,DL
         5 001210   200033 755100                    STA     E_BIT_MOD,,AUTO

      626    13195    6                      IF REPEAT_COUNT = 1 THEN

  13195  5 001211   200134 236100                    LDQ     REPEAT_COUNT,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:156  
         5 001212   000001 116007                    CMPQ    1,DL
         5 001213   001225 601000 5                  TNZ     s:13198

      627    13196    6                         IF (S_BIT_MOD=0 OR S_BIT_MOD=3) AND E_BIT_MOD >= 17

  13196  5 001214   200032 235100                    LDA     S_BIT_MOD,,AUTO
         5 001215   001220 600000 5                  TZE     s:13196+4
         5 001216   000003 115007                    CMPA    3,DL
         5 001217   001225 601000 5                  TNZ     s:13198
         5 001220   200033 235100                    LDA     E_BIT_MOD,,AUTO
         5 001221   000021 115007                    CMPA    17,DL
         5 001222   001225 602000 5                  TNC     s:13198

      628    13197    6                         THEN CHECK_OVERLAY = '1'B/*@TRUE_B*/;

  13197  5 001223   400000 236003                    LDQ     -131072,DU
         5 001224   200005 756100                    STQ     CHECK_OVERLAY,,AUTO

      629    13198    6                     ERR_VALUE = ADR + (S_BIT_MOD + REPEAT_COUNT * FORM2_COUNT - 1 ) /
             13198                               36;

  13198  5 001225   200134 236100                    LDQ     REPEAT_COUNT,,AUTO
         5 001226   200135 402100                    MPY     FORM2_COUNT,,AUTO
         5 001227   200032 036100                    ADLQ    S_BIT_MOD,,AUTO
         5 001230   000001 136007                    SBLQ    1,DL
         5 001231   000044 506007                    DIV     36,DL
         5 001232   200043 036100                    ADLQ    ADR,,AUTO
         5 001233   200123 756100                    STQ     ERR_VALUE,,AUTO

      630    13199    7                      IF ERR_VALUE > SC_LAST_ADR THEN DO;

  13199  5 001234   200050 116100                    CMPQ    SC_LAST_ADR,,AUTO
         5 001235   001244 602000 5                  TNC     s:13203
         5 001236   001244 600000 5                  TZE     s:13203

      631    13200    7                         CALL REPORT_BAD_ADDRESS_GENERATION( ERR_VALUE );

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:157  
  13200  5 001237   200123 631500                    EPPR1   ERR_VALUE,,AUTO
         5 001240   200151 451500                    STP1    MOVE_TEMP+2,,AUTO
         5 001241   004272 701000 5                  TSX1    REPORT_BAD_ADDRESS_GENERATION
         5 001242   000000 011000                    NOP     0

      632    13201    7                         GOTO NEXT_RECORD;

  13201  5 001243   000112 710000 5                  TRA     NEXT_RECORD

      633    13202    7                         END;
      634    13203    7                      DO SK = 1 TO REPEAT_COUNT;

  13203  5 001244   000001 235007                    LDA     1,DL
         5 001245   200021 755100                    STA     K,,AUTO
         5 001246   001464 710000 5                  TRA     s:13268+1

      635    13204    7                         TEMP_RESULT = 0;  /* Clear bits */

  13204  5 001247   200137 450100                    STZ     TEMP_RESULT,,AUTO

      636    13205    7                         IF ADR < FIRST_ADR_SETUP

  13205  5 001250   200043 236100                    LDQ     ADR,,AUTO
         5 001251   200052 116100                    CMPQ    FIRST_ADR_SETUP,,AUTO
         5 001252   001257 602000 5                  TNC     s:13209
         5 001253   200044 236100                    LDQ     ADR_SPAN_LAST,,AUTO
         5 001254   001257 604000 5                  TMI     s:13209
         5 001255   200132 116100                    CMPQ    LAST_ADR_SETUP,,AUTO
         5 001256   001313 604400 5                  TMOZ    s:13219

      637    13206    7                                 OR
      638    13207    7                                 ADR_SPAN_LAST > LAST_ADR_SETUP
      639    13208    8                         THEN DO;

      640    13209    8                            SETUP_SIZE = SC_LAST_ADR - ADR + 1;

  13209  5 001257   200050 236100                    LDQ     SC_LAST_ADR,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:158  
         5 001260   200043 136100                    SBLQ    ADR,,AUTO
         5 001261   000001 036007                    ADLQ    1,DL
         5 001262   200041 756100                    STQ     SETUP_SIZE,,AUTO

      641    13210    8                            IF SETUP_SIZE > 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/
             13210                                     THEN SETUP_SIZE = 1024
             13210                                     /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;

  13210  5 001263   002001 116007                    CMPQ    1025,DL
         5 001264   001267 602000 5                  TNC     s:13211

  13210  5 001265   002000 235007                    LDA     1024,DL
         5 001266   200041 755100                    STA     SETUP_SIZE,,AUTO

      642    13211    8                            CALL VXU$SETUP( FIRST_ADR_SETUP$,

  13211  5 001267   200037 630500                    EPPR0   NODE_INX,,AUTO
         5 001270   200162 450500                    STP0    @SEVERITY+5,,AUTO
         5 001271   200041 631500                    EPPR1   SETUP_SIZE,,AUTO
         5 001272   200161 451500                    STP1    @SEVERITY+4,,AUTO
         5 001273   200043 633500                    EPPR3   ADR,,AUTO
         5 001274   200160 453500                    STP3    @SEVERITY+3,,AUTO
         5 001275   200040 634500                    EPPR4   BUF_TYPE,,AUTO
         5 001276   200157 454500                    STP4    @SEVERITY+2,,AUTO
         5 001277   200012 635500                    EPPR5   FIRST_ADR_SETUP$,,AUTO
         5 001300   200156 455500                    STP5    @SEVERITY+1,,AUTO
         5 001301   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 001302   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001303   000000 701000 xent               TSX1    VXU$SETUP
         5 001304   000000 011000                    NOP     0

      643    13212    8                                    BUF_TYPE,
      644    13213    8                                    ADR,
      645    13214    8                                    SETUP_SIZE,
      646    13215    8                                    NODE_INX );
      647    13216    8                            FIRST_ADR_SETUP = ADR;

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:159  
  13216  5 001305   200043 235100                    LDA     ADR,,AUTO
         5 001306   200052 755100                    STA     FIRST_ADR_SETUP,,AUTO

      648    13217    8                            LAST_ADR_SETUP = FIRST_ADR_SETUP + SETUP_SIZE - 1;

  13217  5 001307   200052 236100                    LDQ     FIRST_ADR_SETUP,,AUTO
         5 001310   200041 036100                    ADLQ    SETUP_SIZE,,AUTO
         5 001311   000001 136007                    SBLQ    1,DL
         5 001312   200132 756100                    STQ     LAST_ADR_SETUP,,AUTO

      649    13218    8                            END;

      650    13219    7                         ADR$  = PINCRW( FIRST_ADR_SETUP$, ADR - FIRST_ADR_SETUP );

  13219  5 001313   200043 236100                    LDQ     ADR,,AUTO
         5 001314   200052 136100                    SBLQ    FIRST_ADR_SETUP,,AUTO
         5 001315   000022 736000                    QLS     18
         5 001316   200012 036100                    ADLQ    FIRST_ADR_SETUP$,,AUTO
         5 001317   200013 756100                    STQ     ADR$,,AUTO

      651    13220    7                         BIT_ADR$ = PINCRB( ADR$, S_BIT_MOD );/* Temp for now */

  13220  5 001320   200013 470500                    LDP0    ADR$,,AUTO
         5 001321   200032 235100                    LDA     S_BIT_MOD,,AUTO
         5 001322   000000 503505                    ABD     0,AL,PR0
         5 001323   200136 450500                    STP0    BIT_ADR$,,AUTO

      652    13221    7                         TEMP_RESULT$ = PINCRB( ADDR(TEMP_RESULT), 36 - FORM2_COUNT );
             13221                                  /* Temp for now */

  13221  5 001324   200000 631500                    EPPR1   0,,AUTO
         5 001325   200135 335100                    LCA     FORM2_COUNT,,AUTO
         5 001326   001330 605000 5                  TPL     s:13221+4
         5 001327   000044 035003                    ADLA    36,DU
         5 001330   100140 503505                    ABD     96,AL,PR1
         5 001331   200140 451500                    STP1    TEMP_RESULT$,,AUTO

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:160  
      653    13222
      654    13223    7                         TEMP$RESULT = FORM2$2; /* Move field into temporary */

  13223  5 001332   200135 720100                    LXL0    FORM2_COUNT,,AUTO
         5 001333   003140 060540                    CSL     bolr='003'O
         5 001334   000000 000010                    BDSC    0,,PR0                   by=0,bit=0,n=*X0
         5 001335   100000 000010                    BDSC    0,,PR1                   by=0,bit=0,n=*X0

      655    13224
      656    13225    8                         DO CASE( R2.RELOCOP );

  13225  5 001336   200006 473500                    LDP3    P$,,AUTO
         5 001337   300000 221100                    LDX1    0,,PR3
         5 001340   000017 361003                    ANX1    15,DU
         5 001341   000020 101003                    CMPX1   16,DU
         5 001342   001344 602011 5                  TNC     s:13225+6,X1
         5 001343   001416 710000 5                  TRA     s:13252
         5 001344   001416 710000 5                  TRA     s:13252
         5 001345   001364 710000 5                  TRA     s:13227
         5 001346   001370 710000 5                  TRA     s:13230
         5 001347   001374 710000 5                  TRA     s:13233
         5 001350   001400 710000 5                  TRA     s:13236
         5 001351   001416 710000 5                  TRA     s:13252
         5 001352   001416 710000 5                  TRA     s:13252
         5 001353   001416 710000 5                  TRA     s:13252
         5 001354   001416 710000 5                  TRA     s:13252
         5 001355   001416 710000 5                  TRA     s:13252
         5 001356   001416 710000 5                  TRA     s:13252
         5 001357   001416 710000 5                  TRA     s:13252
         5 001360   001416 710000 5                  TRA     s:13252
         5 001361   001416 710000 5                  TRA     s:13252
         5 001362   001404 710000 5                  TRA     s:13239
         5 001363   001413 710000 5                  TRA     s:13243

      657    13226    8                           CASE( 1 );

      658    13227    8                             TEMP_RESULT = TEMP_RESULT + INTER_RESULT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:161  

  13227  5 001364   200137 236100                    LDQ     TEMP_RESULT,,AUTO
         5 001365   200142 036100                    ADLQ    INTER_RESULT,,AUTO
         5 001366   200137 756100                    STQ     TEMP_RESULT,,AUTO
         5 001367   001433 710000 5                  TRA     s:13259

      659    13228
      660    13229    8                           CASE( 2 );

      661    13230    8                             TEMP_RESULT = TEMP_RESULT - INTER_RESULT;

  13230  5 001370   200137 236100                    LDQ     TEMP_RESULT,,AUTO
         5 001371   200142 136100                    SBLQ    INTER_RESULT,,AUTO
         5 001372   200137 756100                    STQ     TEMP_RESULT,,AUTO
         5 001373   001433 710000 5                  TRA     s:13259

      662    13231
      663    13232    8                           CASE( 3 );

      664    13233    8                             TEMP_RESULT = TEMP_RESULT * INTER_RESULT;

  13233  5 001374   200137 236100                    LDQ     TEMP_RESULT,,AUTO
         5 001375   200142 402100                    MPY     INTER_RESULT,,AUTO
         5 001376   200137 756100                    STQ     TEMP_RESULT,,AUTO
         5 001377   001433 710000 5                  TRA     s:13259

      665    13234
      666    13235    8                           CASE( 4 );

      667    13236    8                             TEMP_RESULT = TEMP_RESULT / INTER_RESULT;

  13236  5 001400   200137 236100                    LDQ     TEMP_RESULT,,AUTO
         5 001401   200142 506100                    DIV     INTER_RESULT,,AUTO
         5 001402   200137 756100                    STQ     TEMP_RESULT,,AUTO
         5 001403   001433 710000 5                  TRA     s:13259

      668    13237
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:162  
      669    13238    8                           CASE( 14 );

      670    13239    8                             TEMP_RESULT$ = PINCRB( ADDR( INTER_RESULT ),

  13239  5 001404   200000 634500                    EPPR4   0,,AUTO
         5 001405   200135 335100                    LCA     FORM2_COUNT,,AUTO
         5 001406   001410 605000 5                  TPL     s:13239+4
         5 001407   000044 035003                    ADLA    36,DU
         5 001410   400143 503505                    ABD     99,AL,PR4
         5 001411   200140 454500                    STP4    TEMP_RESULT$,,AUTO
         5 001412   001433 710000 5                  TRA     s:13259

      671    13240    8                                     36 - FORM2_COUNT );
      672    13241
      673    13242    8                           CASE( 15 );

      674    13243    8                             TEMP_RESULT$ = ADDR( INTER_RESULT );

  13243  5 001413   200142 634500                    EPPR4   INTER_RESULT,,AUTO
         5 001414   200140 454500                    STP4    TEMP_RESULT$,,AUTO
         5 001415   001433 710000 5                  TRA     s:13259

      675    13244
      676    13245    8                           CASE( ELSE );

      677    13246        /*Here => bad relocation operation */
      678    13247        /*E*  ERROR: VXT-E$FIMAGE_BAD_RELOC_OP_VX-0
      679    13248              MESSAGE: Illegal relocation operator detected in form %U1 directive.
      680    13249                       Value = %U1.
      681    13250              DESCRIPTION: Self-explanatory.
      682    13251        */
      683    13252    8                             ERR_NUM = 1709;

  13252  5 001416   003255 235007                    LDA     1709,DL
         5 001417   200121 755100                    STA     ERR_NUM,,AUTO

      684    13253    8                             ERR_VALUE = R2.RELOCOP;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:163  

  13253  5 001420   300000 236100                    LDQ     0,,PR3
         5 001421   000022 772000                    QRL     18
         5 001422   000017 376007                    ANQ     15,DL
         5 001423   200123 756100                    STQ     ERR_VALUE,,AUTO

      685    13254    8                             CALL REPORT_BAD_RELOC_VALUE( ERR_NUM, ERR_VALUE );

  13254  5 001424   200123 634500                    EPPR4   ERR_VALUE,,AUTO
         5 001425   200152 454500                    STP4    @ERR_NUM+1,,AUTO
         5 001426   200121 635500                    EPPR5   ERR_NUM,,AUTO
         5 001427   200151 455500                    STP5    MOVE_TEMP+2,,AUTO
         5 001430   004414 701000 5                  TSX1    REPORT_BAD_RELOC_VALUE
         5 001431   000000 011000                    NOP     0

      686    13255    8                             GOTO NEXT_RECORD;

  13255  5 001432   000112 710000 5                  TRA     NEXT_RECORD

      687    13256    8                           END;            /* Do case( R2.RELOCOP ); */

      688    13257
      689    13258
      690    13259    7                         FORM2$2 = TEMP$RESULT; /* Store it away */

  13259  5 001433   200140 471500                    LDP1    TEMP_RESULT$,,AUTO
         5 001434   003140 060540                    CSL     bolr='003'O
         5 001435   100000 000010                    BDSC    0,,PR1                   by=0,bit=0,n=*X0
         5 001436   000000 000010                    BDSC    0,,PR0                   by=0,bit=0,n=*X0

      691    13260
      692    13261    7                         S_BIT = S_BIT_MOD + FORM2_COUNT;

  13261  5 001437   200032 236100                    LDQ     S_BIT_MOD,,AUTO
         5 001440   200135 036100                    ADLQ    FORM2_COUNT,,AUTO
         5 001441   200030 756100                    STQ     S_BIT,,AUTO

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:164  
      693    13262    7                         E_BIT = E_BIT_MOD + FORM2_COUNT;

  13262  5 001442   200033 236100                    LDQ     E_BIT_MOD,,AUTO
         5 001443   200135 036100                    ADLQ    FORM2_COUNT,,AUTO
         5 001444   200031 756100                    STQ     E_BIT,,AUTO

      694    13263    7                         ADR = ADR + S_BIT / 36;

  13263  5 001445   200030 236100                    LDQ     S_BIT,,AUTO
         5 001446   000044 506007                    DIV     36,DL
         5 001447   200043 036100                    ADLQ    ADR,,AUTO
         5 001450   200043 756100                    STQ     ADR,,AUTO

      695    13264    7                         ADR_SPAN_LAST = ADR + E_BIT / 36;

  13264  5 001451   200031 236100                    LDQ     E_BIT,,AUTO
         5 001452   000044 506007                    DIV     36,DL
         5 001453   200043 036100                    ADLQ    ADR,,AUTO
         5 001454   200044 756100                    STQ     ADR_SPAN_LAST,,AUTO

      696    13265    7                         S_BIT_MOD = MOD( S_BIT, 36 );

  13265  5 001455   200030 236100                    LDQ     S_BIT,,AUTO
         5 001456   000044 506007                    DIV     36,DL
         5 001457   200032 755100                    STA     S_BIT_MOD,,AUTO

      697    13266    7                         E_BIT_MOD = MOD( E_BIT, 36 );

  13266  5 001460   200031 236100                    LDQ     E_BIT,,AUTO
         5 001461   000044 506007                    DIV     36,DL
         5 001462   200033 755100                    STA     E_BIT_MOD,,AUTO

      698    13267
      699    13268    7                         END;              /*  Do sk = 0 to REPEAT_COUNT */

  13268  5 001463   200021 054100                    AOS     K,,AUTO
         5 001464   200021 236100                    LDQ     K,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:165  
         5 001465   200134 116100                    CMPQ    REPEAT_COUNT,,AUTO
         5 001466   001247 604400 5                  TMOZ    s:13204

      700    13269    6                      END;                 /* If R1.OPNDTYP = 0 then do */

  13269  5 001467   002064 710000 5                  TRA     s:13386

      701    13270        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:166  
      702    13271    6                   ELSE DO;

      703    13272        /*
      704    13273                  Form 1 relocation directive
      705    13274        */
      706    13275    6                      OPRD_TYPE      =    R1.OPNDTYP;

  13275  5 001470   000000 236100                    LDQ     0,,PR0
         5 001471   000040 772000                    QRL     32
         5 001472   200023 756100                    STQ     OPRD_TYPE,,AUTO

      707    13276    6                      OPERAND        =    R1.OPERAND;

  13276  5 001473   000000 236100                    LDQ     0,,PR0
         5 001474   000022 772000                    QRL     18
         5 001475   000777 376007                    ANQ     511,DL
         5 001476   200026 756100                    STQ     OPERAND,,AUTO

      708    13277
      709    13278
      710    13279    6                      INC            =    SIZEW( R1 );

  13279  5 001477   000001 235007                    LDA     1,DL
         5 001500   200042 755100                    STA     INC,,AUTO

      711    13280    6                      ADR   = INIT_ADR + R1.DISP;

  13280  5 001501   000000 236100                    LDQ     0,,PR0
         5 001502   777777 376007                    ANQ     -1,DL
         5 001503   200036 036100                    ADLQ    INIT_ADR,,AUTO
         5 001504   200043 756100                    STQ     ADR,,AUTO

      712    13281    7                      IF ADR > SC_LAST_ADR THEN DO;

  13281  5 001505   200050 116100                    CMPQ    SC_LAST_ADR,,AUTO
         5 001506   001520 602000 5                  TNC     s:13286
         5 001507   001520 600000 5                  TZE     s:13286
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:167  

      713    13282    7                         ERR_VALUE = R1.DISP;

  13282  5 001510   000000 236100                    LDQ     0,,PR0
         5 001511   777777 376007                    ANQ     -1,DL
         5 001512   200123 756100                    STQ     ERR_VALUE,,AUTO

      714    13283    7                         CALL REPORT_BAD_ADDRESS_GENERATION( ERR_VALUE );

  13283  5 001513   200123 631500                    EPPR1   ERR_VALUE,,AUTO
         5 001514   200151 451500                    STP1    MOVE_TEMP+2,,AUTO
         5 001515   004272 701000 5                  TSX1    REPORT_BAD_ADDRESS_GENERATION
         5 001516   000000 011000                    NOP     0

      715    13284    7                         GOTO NEXT_RECORD;

  13284  5 001517   000112 710000 5                  TRA     NEXT_RECORD

      716    13285    7                         END;
      717    13286    6                      IF ADR < FIRST_ADR_SETUP

  13286  5 001520   200052 116100                    CMPQ    FIRST_ADR_SETUP,,AUTO
         5 001521   001526 602000 5                  TNC     s:13290
         5 001522   000000 116003                    CMPQ    0,DU
         5 001523   001526 604000 5                  TMI     s:13290
         5 001524   200132 116100                    CMPQ    LAST_ADR_SETUP,,AUTO
         5 001525   001562 604400 5                  TMOZ    s:13300

      718    13287    6                              OR
      719    13288    6                              ADR > LAST_ADR_SETUP
      720    13289    7                      THEN DO;

      721    13290    7                         SETUP_SIZE = SC_LAST_ADR - ADR + 1;

  13290  5 001526   200050 236100                    LDQ     SC_LAST_ADR,,AUTO
         5 001527   200043 136100                    SBLQ    ADR,,AUTO
         5 001530   000001 036007                    ADLQ    1,DL
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:168  
         5 001531   200041 756100                    STQ     SETUP_SIZE,,AUTO

      722    13291    7                         IF SETUP_SIZE > 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ THEN
             13291                                  SETUP_SIZE = 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;

  13291  5 001532   002001 116007                    CMPQ    1025,DL
         5 001533   001536 602000 5                  TNC     s:13292

  13291  5 001534   002000 235007                    LDA     1024,DL
         5 001535   200041 755100                    STA     SETUP_SIZE,,AUTO

      723    13292    7                         CALL VXU$SETUP( FIRST_ADR_SETUP$,

  13292  5 001536   200037 631500                    EPPR1   NODE_INX,,AUTO
         5 001537   200162 451500                    STP1    @SEVERITY+5,,AUTO
         5 001540   200041 633500                    EPPR3   SETUP_SIZE,,AUTO
         5 001541   200161 453500                    STP3    @SEVERITY+4,,AUTO
         5 001542   200043 634500                    EPPR4   ADR,,AUTO
         5 001543   200160 454500                    STP4    @SEVERITY+3,,AUTO
         5 001544   200040 635500                    EPPR5   BUF_TYPE,,AUTO
         5 001545   200157 455500                    STP5    @SEVERITY+2,,AUTO
         5 001546   200012 636500                    EPPR6   FIRST_ADR_SETUP$,,AUTO
         5 001547   200156 456500                    STP6    @SEVERITY+1,,AUTO
         5 001550   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 001551   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001552   000000 701000 xent               TSX1    VXU$SETUP
         5 001553   000000 011000                    NOP     0

      724    13293    7                                 BUF_TYPE,
      725    13294    7                                 ADR,
      726    13295    7                                 SETUP_SIZE,
      727    13296    7                                 NODE_INX );
      728    13297    7                         FIRST_ADR_SETUP = ADR;

  13297  5 001554   200043 235100                    LDA     ADR,,AUTO
         5 001555   200052 755100                    STA     FIRST_ADR_SETUP,,AUTO

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:169  
      729    13298    7                         LAST_ADR_SETUP = FIRST_ADR_SETUP + SETUP_SIZE - 1;

  13298  5 001556   200052 236100                    LDQ     FIRST_ADR_SETUP,,AUTO
         5 001557   200041 036100                    ADLQ    SETUP_SIZE,,AUTO
         5 001560   000001 136007                    SBLQ    1,DL
         5 001561   200132 756100                    STQ     LAST_ADR_SETUP,,AUTO

      730    13299    7                         END;

      731    13300    6                      ADR$   = PINCRW( FIRST_ADR_SETUP$, ADR - FIRST_ADR_SETUP );

  13300  5 001562   200043 236100                    LDQ     ADR,,AUTO
         5 001563   200052 136100                    SBLQ    FIRST_ADR_SETUP,,AUTO
         5 001564   000022 736000                    QLS     18
         5 001565   200012 036100                    ADLQ    FIRST_ADR_SETUP$,,AUTO
         5 001566   200013 756100                    STQ     ADR$,,AUTO

      732    13301    7                      DO CASE( OPRD_TYPE );

  13301  5 001567   200023 235100                    LDA     OPRD_TYPE,,AUTO
         5 001570   000007 115007                    CMPA    7,DL
         5 001571   001573 602005 5                  TNC     s:13301+4,AL
         5 001572   001673 710000 5                  TRA     s:13339
         5 001573   001673 710000 5                  TRA     s:13339
         5 001574   001634 710000 5                  TRA     s:13318
         5 001575   001634 710000 5                  TRA     s:13318
         5 001576   001634 710000 5                  TRA     s:13318
         5 001577   001602 710000 5                  TRA     s:13303
         5 001600   001605 710000 5                  TRA     s:13306
         5 001601   001634 710000 5                  TRA     s:13318

      733    13302    7                        CASE( 4 );

      734    13303    7                          RESULT  =   OPERAND;

  13303  5 001602   200026 235100                    LDA     OPERAND,,AUTO
         5 001603   200141 755100                    STA     RESULT,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:170  
         5 001604   001702 710000 5                  TRA     s:13343

      735    13304
      736    13305    7                        CASE( 5 );

      737    13306    7                          Q$ = PINCRW( VX_SC_BASE$, OPERAND * SIZEW(VX$SC) );

  13306  5 001605   200026 236100                    LDQ     OPERAND,,AUTO
         5 001606   000003 402003                    MPY     3,DU
         5 001607   000000 036000 xsym               ADLQ    VX_SC_BASE$
         5 001610   200007 756100                    STQ     Q$,,AUTO

      738    13307    7                          IF Q$ -> VX$SC.ATTR.SEGMENT

  13307  5 001611   200007 470500                    LDP0    Q$,,AUTO
         5 001612   000000 236100                    LDQ     0,,PR0
         5 001613   000040 316003                    CANQ    32,DU
         5 001614   001622 600000 5                  TZE     s:13310

      739    13308    7                          THEN RESULT = VX_SEGID( Q$ -> VX$SC.SEG );

  13308  5 001615   000000 236100                    LDQ     0,,PR0
         5 001616   000041 772000                    QRL     33
         5 001617   000000 235006 xsym               LDA     VX_SEGID,QL
         5 001620   200141 755100                    STA     RESULT,,AUTO
         5 001621   001702 710000 5                  TRA     s:13343

      740    13309    7                          ELSE
      741    13310    7                             IF Q$ -> VX$SC.TYPE = 5

  13310  5 001622   000000 236100                    LDQ     0,,PR0
         5 001623   077000 376003                    ANQ     32256,DU
         5 001624   005000 116003                    CMPQ    2560,DU
         5 001625   001631 601000 5                  TNZ     s:13312

      742    13311    7                             THEN RESULT = BITBIN( '6003'O );

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:171  
  13311  5 001626   006003 235007                    LDA     3075,DL
         5 001627   200141 755100                    STA     RESULT,,AUTO
         5 001630   001702 710000 5                  TRA     s:13343

      743    13312    7                             ELSE RESULT = BITBIN( '6000'O );

  13312  5 001631   006000 235007                    LDA     3072,DL
         5 001632   200141 755100                    STA     RESULT,,AUTO
         5 001633   001702 710000 5                  TRA     s:13343

      744    13313
      745    13314    7                        CASE(  1,

      746    13315    7                                        2,
      747    13316    7                                        3,
      748    13317    7                                        6 );
      749    13318    7                          MAP_INDEX = OPRD_MAP( OPRD_TYPE );

  13318  5 001634   000030 235005 3                  LDA     OPRD_MAP,AL
         5 001635   200055 755100                    STA     MAP_INDEX,,AUTO

      750    13319    7                          IF OPERAND >= VX_PASS2_REF.SAT.COUNT_A(MAP_INDEX)

  13319  5 001636   200026 236100                    LDQ     OPERAND,,AUTO
         5 001637   000036 116005 xsym               CMPQ    VX_PASS2_REF+30,AL
         5 001640   001646 602000 5                  TNC     s:13324

      751    13320    8                          THEN DO;

      752    13321    8                             CALL BAD_OPERAND_RANGE( -4 );

  13321  5 001641   000055 236000 6                  LDQ     45
         5 001642   200151 756100                    STQ     MOVE_TEMP+2,,AUTO
         5 001643   004324 701000 5                  TSX1    BAD_OPERAND_RANGE
         5 001644   000000 011000                    NOP     0

      753    13322    8                             GOTO NEXT_RECORD;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:172  

  13322  5 001645   000112 710000 5                  TRA     NEXT_RECORD

      754    13323    8                             END;
      755    13324    7                          Q$ = PINCRW( VX_PASS2_REF.SAT.L_START_A$(MAP_INDEX),

  13324  5 001646   200055 720100                    LXL0    MAP_INDEX,,AUTO
         5 001647   000043 402010 xsym               MPY     VX_PASS2_REF+35,X0
         5 001650   000024 470410 xsym               LDP0    VX_PASS2_REF+20,X0
         5 001651   000000 631506                    EPPR1   0,QL,PR0
         5 001652   200007 451500                    STP1    Q$,,AUTO

      756    13325    7                                  OPERAND * VX_PASS2_REF.SAT.ENT_SIZE_A(MAP_INDEX) );
      757    13326    7                          IF OPRD_TYPE = 1

  13326  5 001653   200023 235100                    LDA     OPRD_TYPE,,AUTO
         5 001654   000001 115007                    CMPA    1,DL
         5 001655   001662 601000 5                  TNZ     s:13329

      758    13327    7                          THEN RESULT = Q$ -> VX$SC.ADDRESS;

  13327  5 001656   100000 236100                    LDQ     0,,PR1
         5 001657   777777 376007                    ANQ     -1,DL
         5 001660   200141 756100                    STQ     RESULT,,AUTO
         5 001661   001702 710000 5                  TRA     s:13343

      759    13328    8                          ELSE DO;

      760    13329    8                             RESULT = Q$ -> VXR$SAT.VALUE;

  13329  5 001662   100000 235100                    LDA     0,,PR1
         5 001663   200141 755100                    STA     RESULT,,AUTO

      761    13330    8                             DESCENDANT = Q$ -> VXR$SAT.BELOW;

  13330  5 001664   100001 236100                    LDQ     1,,PR1
         5 001665   400000 376003                    ANQ     -131072,DU
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:173  
         5 001666   200004 756100                    STQ     DESCENDANT,,AUTO

      762    13331    8                             DEPTH_NODE# = Q$ -> VXR$SAT.NODE#;

  13331  5 001667   100001 236100                    LDQ     1,,PR1
         5 001670   777777 376007                    ANQ     -1,DL
         5 001671   200131 756100                    STQ     DEPTH_NODE#,,AUTO

      763    13332    8                             END;

  13332  5 001672   001702 710000 5                  TRA     s:13343

      764    13333
      765    13334    7                        CASE(ELSE);

      766    13335        /*E*  ERROR: VXT-E$FIMAGE_BAD_OPRD_TYPE_VX-0
      767    13336              MESSAGE: Illegal operand type detected in form %U1 directive. Value = %U2.
      768    13337              DESCRIPTION: Self-explanatory.
      769    13338        */
      770    13339    7                          CALL REPORT_BAD_RELOC_VALUE( 1710, OPRD_TYPE );

  13339  5 001673   200023 630500                    EPPR0   OPRD_TYPE,,AUTO
         5 001674   200152 450500                    STP0    @ERR_NUM+1,,AUTO
         5 001675   000101 236000 6                  LDQ     65
         5 001676   200151 756100                    STQ     MOVE_TEMP+2,,AUTO
         5 001677   004414 701000 5                  TSX1    REPORT_BAD_RELOC_VALUE
         5 001700   000000 011000                    NOP     0

      771    13340    7                          GOTO NEXT_RECORD;

  13340  5 001701   000112 710000 5                  TRA     NEXT_RECORD

      772    13341    7                        END;               /* Do case */

      773    13342
      774    13343    7                      DO CASE( R1.FIELD );

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:174  
  13343  5 001702   200006 470500                    LDP0    P$,,AUTO
         5 001703   000000 236100                    LDQ     0,,PR0
         5 001704   000033 772000                    QRL     27
         5 001705   000017 376007                    ANQ     15,DL
         5 001706   000005 116007                    CMPQ    5,DL
         5 001707   001711 602006 5                  TNC     s:13343+7,QL
         5 001710   002047 710000 5                  TRA     s:13379
         5 001711   001716 710000 5                  TRA     s:13346
         5 001712   001741 710000 5                  TRA     s:13352
         5 001713   001762 710000 5                  TRA     s:13357
         5 001714   002001 710000 5                  TRA     s:13362
         5 001715   002032 710000 5                  TRA     s:13368

      775    13344
      776    13345    7                        CASE( 0 );

      777    13346    7                          IF R1.OP

  13346  5 001716   000000 236100                    LDQ     0,,PR0
         5 001717   020000 316003                    CANQ    8192,DU
         5 001720   001730 600000 5                  TZE     s:13348

      778    13347    7                          THEN FORM1$LH.LH = FORM1$LH.LH - RESULT;

  13347  5 001721   200013 471500                    LDP1    ADR$,,AUTO
         5 001722   100000 236100                    LDQ     0,,PR1
         5 001723   000022 772000                    QRL     18
         5 001724   200141 136100                    SBLQ    RESULT,,AUTO
         5 001725   000000 620006                    EAX0    0,QL
         5 001726   100000 740100                    STX0    0,,PR1
         5 001727   001736 710000 5                  TRA     s:13349

      779    13348    7                          ELSE FORM1$LH.LH = FORM1$LH.LH + RESULT;

  13348  5 001730   200013 471500                    LDP1    ADR$,,AUTO
         5 001731   100000 236100                    LDQ     0,,PR1
         5 001732   000022 772000                    QRL     18
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:175  
         5 001733   200141 036100                    ADLQ    RESULT,,AUTO
         5 001734   000000 620006                    EAX0    0,QL
         5 001735   100000 740100                    STX0    0,,PR1

      780    13349    7                          CHECK_OVERLAY = '1'B/*@TRUE_B*/;

  13349  5 001736   400000 236003                    LDQ     -131072,DU
         5 001737   200005 756100                    STQ     CHECK_OVERLAY,,AUTO
         5 001740   002064 710000 5                  TRA     s:13386

      781    13350
      782    13351    7                        CASE( 1 );

      783    13352    7                          IF R1.OP

  13352  5 001741   000000 236100                    LDQ     0,,PR0
         5 001742   020000 316003                    CANQ    8192,DU
         5 001743   001753 600000 5                  TZE     s:13354

      784    13353    7                          THEN FORM1$RH.RH = FORM1$RH.RH - RESULT;

  13353  5 001744   200013 471500                    LDP1    ADR$,,AUTO
         5 001745   100000 236100                    LDQ     0,,PR1
         5 001746   777777 376007                    ANQ     -1,DL
         5 001747   200141 136100                    SBLQ    RESULT,,AUTO
         5 001750   000000 620006                    EAX0    0,QL
         5 001751   100000 440100                    SXL0    0,,PR1
         5 001752   002064 710000 5                  TRA     s:13386

      785    13354    7                          ELSE FORM1$RH.RH = FORM1$RH.RH + RESULT;

  13354  5 001753   200013 471500                    LDP1    ADR$,,AUTO
         5 001754   100000 236100                    LDQ     0,,PR1
         5 001755   777777 376007                    ANQ     -1,DL
         5 001756   200141 036100                    ADLQ    RESULT,,AUTO
         5 001757   000000 620006                    EAX0    0,QL
         5 001760   100000 440100                    SXL0    0,,PR1
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:176  
         5 001761   002064 710000 5                  TRA     s:13386

      786    13355
      787    13356    7                        CASE( 2 );

      788    13357    7                          IF R1.OP

  13357  5 001762   000000 236100                    LDQ     0,,PR0
         5 001763   020000 316003                    CANQ    8192,DU
         5 001764   001773 600000 5                  TZE     s:13359

      789    13358    7                          THEN FORM1$SEGID.SEGID = FORM1$SEGID.SEGID - RESULT;

  13358  5 001765   200013 471500                    LDP1    ADR$,,AUTO
         5 001766   100000 236100                    LDQ     0,,PR1
         5 001767   007777 376007                    ANQ     4095,DL
         5 001770   200141 136100                    SBLQ    RESULT,,AUTO
         5 001771   100000 752103                    STCQ    0,'03'O,PR1
         5 001772   002064 710000 5                  TRA     s:13386

      790    13359    7                          ELSE FORM1$SEGID.SEGID = FORM1$SEGID.SEGID + RESULT;

  13359  5 001773   200013 471500                    LDP1    ADR$,,AUTO
         5 001774   100000 236100                    LDQ     0,,PR1
         5 001775   007777 376007                    ANQ     4095,DL
         5 001776   200141 036100                    ADLQ    RESULT,,AUTO
         5 001777   100000 752103                    STCQ    0,'03'O,PR1
         5 002000   002064 710000 5                  TRA     s:13386

      791    13360
      792    13361    7                        CASE( 3 );

      793    13362    7                          IF R1.OP

  13362  5 002001   000000 236100                    LDQ     0,,PR0
         5 002002   020000 316003                    CANQ    8192,DU
         5 002003   002016 600000 5                  TZE     s:13364
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:177  

      794    13363    7                          THEN FORM1$Y.Y = FORM1$Y.Y - RESULT;

  13363  5 002004   200013 471500                    LDP1    ADR$,,AUTO
         5 002005   100000 236100                    LDQ     0,,PR1
         5 002006   000022 772000                    QRL     18
         5 002007   077777 376007                    ANQ     32767,DL
         5 002010   200141 136100                    SBLQ    RESULT,,AUTO
         5 002011   000022 736000                    QLS     18
         5 002012   100000 676100                    ERQ     0,,PR1
         5 002013   077777 376003                    ANQ     32767,DU
         5 002014   100000 656100                    ERSQ    0,,PR1
         5 002015   002027 710000 5                  TRA     s:13365

      795    13364    7                          ELSE FORM1$Y.Y = FORM1$Y.Y + RESULT;

  13364  5 002016   200013 471500                    LDP1    ADR$,,AUTO
         5 002017   100000 236100                    LDQ     0,,PR1
         5 002020   000022 772000                    QRL     18
         5 002021   077777 376007                    ANQ     32767,DL
         5 002022   200141 036100                    ADLQ    RESULT,,AUTO
         5 002023   000022 736000                    QLS     18
         5 002024   100000 676100                    ERQ     0,,PR1
         5 002025   077777 376003                    ANQ     32767,DU
         5 002026   100000 656100                    ERSQ    0,,PR1

      796    13365    7                          CHECK_OVERLAY = '1'B/*@TRUE_B*/;

  13365  5 002027   400000 236003                    LDQ     -131072,DU
         5 002030   200005 756100                    STQ     CHECK_OVERLAY,,AUTO
         5 002031   002064 710000 5                  TRA     s:13386

      797    13366
      798    13367    7                        CASE( 4 );

      799    13368    7                          IF R1.OP

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:178  
  13368  5 002032   000000 236100                    LDQ     0,,PR0
         5 002033   020000 316003                    CANQ    8192,DU
         5 002034   002042 600000 5                  TZE     s:13370

      800    13369    7                          THEN FORM1$FW.FW = FORM1$FW.FW - RESULT;

  13369  5 002035   200013 471500                    LDP1    ADR$,,AUTO
         5 002036   100000 236100                    LDQ     0,,PR1
         5 002037   200141 136100                    SBLQ    RESULT,,AUTO
         5 002040   100000 756100                    STQ     0,,PR1
         5 002041   002064 710000 5                  TRA     s:13386

      801    13370    7                          ELSE FORM1$FW.FW = FORM1$FW.FW + RESULT;

  13370  5 002042   200013 471500                    LDP1    ADR$,,AUTO
         5 002043   100000 236100                    LDQ     0,,PR1
         5 002044   200141 036100                    ADLQ    RESULT,,AUTO
         5 002045   100000 756100                    STQ     0,,PR1
         5 002046   002064 710000 5                  TRA     s:13386

      802    13371
      803    13372    7                        CASE( ELSE );

      804    13373        /* Here => error; bad field definition */
      805    13374        /*E*  ERROR: VXT-E$FIMAGE_BAD_FIELD_VX-0
      806    13375              MESSAGE: Illegal field definition detected in form %U1 directive.
      807    13376                       Value = %U2.
      808    13377              DESCRIPTION: Self-explanatory.
      809    13378        */
      810    13379    7                          ERR_NUM = 1707;

  13379  5 002047   003253 235007                    LDA     1707,DL
         5 002050   200121 755100                    STA     ERR_NUM,,AUTO

      811    13380    7                          ERR_VALUE = R1.FIELD;

  13380  5 002051   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:179  
         5 002052   000033 772000                    QRL     27
         5 002053   000017 376007                    ANQ     15,DL
         5 002054   200123 756100                    STQ     ERR_VALUE,,AUTO

      812    13381    7                          CALL REPORT_BAD_RELOC_VALUE( ERR_NUM, ERR_VALUE );

  13381  5 002055   200123 631500                    EPPR1   ERR_VALUE,,AUTO
         5 002056   200152 451500                    STP1    @ERR_NUM+1,,AUTO
         5 002057   200121 633500                    EPPR3   ERR_NUM,,AUTO
         5 002060   200151 453500                    STP3    MOVE_TEMP+2,,AUTO
         5 002061   004414 701000 5                  TSX1    REPORT_BAD_RELOC_VALUE
         5 002062   000000 011000                    NOP     0

      813    13382    7                          GOTO NEXT_RECORD;

  13382  5 002063   000112 710000 5                  TRA     NEXT_RECORD

      814    13383    7                        END;               /* Do case( R1.FIELD ); */

      815    13384    6                      END;             /* Else do - if R1.OPNDTYP = 0 then do */
      816    13385        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:180  
      817    13386    6                   IF DESCENDANT AND CHECK_OVERLAY THEN DO;

  13386  5 002064   200004 234100                    SZN     DESCENDANT,,AUTO
         5 002065   002246 605000 5                  TPL     NOT_A_TRANSFER
         5 002066   200005 234100                    SZN     CHECK_OVERLAY,,AUTO
         5 002067   002246 605000 5                  TPL     NOT_A_TRANSFER

      818    13387    7                      IF VX_O.NUM.BREF > 0 THEN DO;

  13387  5 002070   000035 235000 xsym               LDA     VX_O+29
         5 002071   002246 604400 5                  TMOZ    NOT_A_TRANSFER

      819    13388    7                         OP_CODE = BITBIN( ADR$ -> VX$BIT_A(0) & '000000777400'O );

  13388  5 002072   200013 470500                    LDP0    ADR$,,AUTO
         5 002073   000000 236100                    LDQ     0,,PR0
         5 002074   000122 376000 3                  ANQ     FPT_PRECORD+10
         5 002075   200126 756100                    STQ     OP_CODE,,AUTO

      820    13389    8                         DO OP_INX = 0 TO SIZEW( OP_TRANSFER_A ) - 1;

  13389  5 002076   200127 450100                    STZ     OP_INX,,AUTO
         5 002077   002107 710000 5                  TRA     s:13391+3

      821    13390    8                           IF OP_CODE = OP_TRANSFER_A(OP_INX) THEN GOTO IS_A_TRANSFER;

  13390  5 002100   200127 720100                    LXL0    OP_INX,,AUTO
         5 002101   200126 236100                    LDQ     OP_CODE,,AUTO
         5 002102   000000 116010 3                  CMPQ    OP_TRANSFER_A,X0
         5 002103   002122 600000 5                  TZE     IS_A_TRANSFER

      822    13391    8                            END;           /* Do OP_INX = OP_TRANSFER_A(OP_INX); */

  13391  5 002104   200127 235100                    LDA     OP_INX,,AUTO
         5 002105   000001 035007                    ADLA    1,DL
         5 002106   200127 755100                    STA     OP_INX,,AUTO
         5 002107   200127 235100                    LDA     OP_INX,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:181  
         5 002110   000030 115007                    CMPA    24,DL
         5 002111   002100 602000 5                  TNC     s:13390

      823    13392    7                         OP_CODE = MOD (ADR$ -> VX$WORD_A(0), 262144);

  13392  5 002112   200013 470500                    LDP0    ADR$,,AUTO
         5 002113   000000 236100                    LDQ     0,,PR0
         5 002114   777777 376007                    ANQ     -1,DL
         5 002115   200126 756100                    STQ     OP_CODE,,AUTO

      824    13393    7                         IF OPRD_TYPE = 2 THEN GOTO IS_A_TRANSFER;

  13393  5 002116   200023 235100                    LDA     OPRD_TYPE,,AUTO
         5 002117   000002 115007                    CMPA    2,DL
         5 002120   002122 600000 5                  TZE     IS_A_TRANSFER

      825    13394    7                         GOTO NOT_A_TRANSFER;

  13394  5 002121   002246 710000 5                  TRA     NOT_A_TRANSFER

      826    13395    7   IS_A_TRANSFER:
      827    13396    7                         VX_BREF_INSTANCE = VX_BREF_INSTANCE + 1;

  13396  5 002122   000000 235000 xsym  IS_A_TRANSF* LDA     VX_BREF_INSTANCE
         5 002123   000001 035007                    ADLA    1,DL
         5 002124   000000 755000 xsym               STA     VX_BREF_INSTANCE

      828    13397    7                         SKELETON = ADR$ -> VX$WORD_A(0) - OP_CODE;

  13397  5 002125   200013 470500                    LDP0    ADR$,,AUTO
         5 002126   000000 236100                    LDQ     0,,PR0
         5 002127   200126 136100                    SBLQ    OP_CODE,,AUTO
         5 002130   200130 756100                    STQ     SKELETON,,AUTO

      829    13398    8                         IF DEPTH_NODE# >=1024 THEN DO;

  13398  5 002131   200131 235100                    LDA     DEPTH_NODE#,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:182  
         5 002132   002000 115007                    CMPA    1024,DL
         5 002133   002146 602000 5                  TNC     s:13412

      830    13399        /*E*  ERROR: VXT-E$NODE_NUM_TOO_BIG_VX-0
      831    13400              MESSAGE: Maximum node number exceeded.
      832    13401              DESCRIPTION: Self-explanatory.
      833    13402        */
      834    13403                                 %SCREAM(ERR#=E$NODE_NUM_TOO_BIG_VX,
      835    13404                                 LEVEL=@E$F_VX, MID="'T'" );

  13405  5 002134   000123 630400 6                  EPPR0   83
         5 002135   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 002136   000000 701000 xent               TSX1    VXE$ERROR
         5 002137   000000 011000                    NOP     0

      836    13407                                 %CHECK( SEV=@MAX_NODE# );

  13408  5 002140   000000 235000 xsym               LDA     VX_ERR_SEV
         5 002141   000013 115007                    CMPA    11,DL
         5 002142   002145 603000 5                  TRC     s:13410

  13408  5 002143   000013 236007                    LDQ     11,DL
         5 002144   000000 756000 xsym               STQ     VX_ERR_SEV

      837    13410    8                            GOTO NOT_A_TRANSFER;

  13410  5 002145   002246 710000 5                  TRA     NOT_A_TRANSFER

      838    13411    8                            END;           /* If DEPTH_NODE# >=1024 then do;     */
      839    13412    7                         SKELETON = SKELETON + DEPTH_NODE# * 256;

  13412  5 002146   200131 236100                    LDQ     DEPTH_NODE#,,AUTO
         5 002147   000010 736000                    QLS     8
         5 002150   200130 036100                    ADLQ    SKELETON,,AUTO
         5 002151   200130 756100                    STQ     SKELETON,,AUTO

      840    13413
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:183  
      841    13414    7                         BREF$ = VX_BREF_START$;

  13414  5 002152   000000 236000 xsym               LDQ     VX_BREF_START$
         5 002153   200015 756100                    STQ     BREF$,,AUTO

      842    13415    7                         BREF_STOP$ = PINCRW( VX_NEXT_BREF$, -SIZEW(VX$BREF) );

  13415  5 002154   000000 236000 xsym               LDQ     VX_NEXT_BREF$
         5 002155   777776 036003                    ADLQ    -2,DU
         5 002156   200016 756100                    STQ     BREF_STOP$,,AUTO

      843    13416    8                         DO WHILE( BREF$ <= BREF_STOP$ );

  13416  5 002157   200015 116100                    CMPQ    BREF$,,AUTO
         5 002160   002173 602000 5                  TNC     s:13422

      844    13417    8                            IF SKELETON = BREF$ -> VX$BREF.I.WORD1

  13417  5 002161   200015 470500                    LDP0    BREF$,,AUTO
         5 002162   200130 236100                    LDQ     SKELETON,,AUTO
         5 002163   000001 116100                    CMPQ    1,,PR0
         5 002164   002233 600000 5                  TZE     SET_IN_ADDRESS

      845    13418    8                            THEN GOTO SET_IN_ADDRESS;
      846    13419    8                            BREF$ = PINCRW( BREF$, SIZEW(VX$BREF) );

  13419  5 002165   200015 236100                    LDQ     BREF$,,AUTO
         5 002166   000002 036003                    ADLQ    2,DU
         5 002167   200015 756100                    STQ     BREF$,,AUTO

      847    13420    8                            END;           /* Do while ( BREF$ <= BREF_STOP$ )   */

  13420  5 002170   200016 116100                    CMPQ    BREF_STOP$,,AUTO
         5 002171   002161 602000 5                  TNC     s:13417
         5 002172   002161 600000 5                  TZE     s:13417

      848    13421        /*Here=>not found */
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:184  
      849    13422    7                         VX_BREF_DEFINITION = VX_BREF_DEFINITION + 1;

  13422  5 002173   000000 235000 xsym               LDA     VX_BREF_DEFINITION
         5 002174   000001 035007                    ADLA    1,DL
         5 002175   000000 755000 xsym               STA     VX_BREF_DEFINITION

      850    13423    8                         IF VX_BREF_SIZE < SIZEW( VX$BREF ) THEN DO;

  13423  5 002176   000000 236000 xsym               LDQ     VX_BREF_SIZE
         5 002177   000002 116007                    CMPQ    2,DL
         5 002200   002217 603000 5                  TRC     s:13441

      851    13424    9                            IF BREF_OVERFLOW <= 0 THEN DO;

  13424  5 002201   000000 235000 2                  LDA     BREF_OVERFLOW
         5 002202   002216 601000 5                  TNZ     s:13438

      852    13425        /*E*  ERROR: VXT-E$BREF_OVERFLOW_VX-0
      853    13426              MESSAGE: Branch reference table(BREF) overflow.  Run unit will not
      854    13427                       execute correctly.
      855    13428              DESCRIPTION: Self-explanatory.
      856    13429        */
      857    13430    9                               BREF_OVERFLOW = 1;

  13430  5 002203   000001 235007                    LDA     1,DL
         5 002204   000000 755000 2                  STA     BREF_OVERFLOW

      858    13431                                   %SCREAM(ERR#=E$BREF_OVERFLOW_VX, LEVEL=@E$S_VX,MID="'T'"
             13431                                        );

  13432  5 002205   000130 630400 6                  EPPR0   88
         5 002206   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 002207   000000 701000 xent               TSX1    VXE$ERROR
         5 002210   000000 011000                    NOP     0

      859    13434                                    %CHECK( SEV=@BREF_OVERFLOW );

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:185  
  13435  5 002211   000000 235000 xsym               LDA     VX_ERR_SEV
         5 002212   000013 115007                    CMPA    11,DL
         5 002213   002216 603000 5                  TRC     s:13438

  13435  5 002214   000013 236007                    LDQ     11,DL
         5 002215   000000 756000 xsym               STQ     VX_ERR_SEV

      860    13437    9                               END;        /* If BREF_OVERFLOW <= 0 then do;     */

      861    13438    8                            GOTO NOT_A_TRANSFER;

  13438  5 002216   002246 710000 5                  TRA     NOT_A_TRANSFER

      862    13439    8                            END; /* If VX_BREF_SIZE < SIZEW(VX$BREF) then do     */
      863    13440
      864    13441    7                         VX_NEXT_BREF$ -> VX$BREF.I.WORD0 = VX_TSX0_OVERLAY.I.WORD0;

  13441  5 002217   000000 470400 xsym               LDP0    VX_NEXT_BREF$
         5 002220   000000 235000 xsym               LDA     VX_TSX0_OVERLAY
         5 002221   000000 755100                    STA     0,,PR0

      865    13442    7                         VX_NEXT_BREF$ -> VX$BREF.I.WORD1 = SKELETON;

  13442  5 002222   000000 470400 xsym               LDP0    VX_NEXT_BREF$
         5 002223   200130 235100                    LDA     SKELETON,,AUTO
         5 002224   000001 755100                    STA     1,,PR0

      866    13443    7                         VX_NEXT_BREF$ = PINCRW( VX_NEXT_BREF$, SIZEW( VX$BREF ) );

  13443  5 002225   000000 236000 xsym               LDQ     VX_NEXT_BREF$
         5 002226   000002 036003                    ADLQ    2,DU
         5 002227   000000 756000 xsym               STQ     VX_NEXT_BREF$

      867    13444    7                         VX_BREF_SIZE = VX_BREF_SIZE - SIZEW( VX$BREF );

  13444  5 002230   000000 235000 xsym               LDA     VX_BREF_SIZE
         5 002231   000002 135007                    SBLA    2,DL
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:186  
         5 002232   000000 755000 xsym               STA     VX_BREF_SIZE

      868    13445    7   SET_IN_ADDRESS:
      869    13446    7                         ADR$ -> VX$WORD_A(0) =

  13446  5 002233   000000 235000 xsym  SET_IN_ADDR* LDA     VX_BREF_START$
         5 002234   000022 771000                    ARL     18
         5 002235   200156 755100                    STA     @SEVERITY+1,,AUTO
         5 002236   200015 236100                    LDQ     BREF$,,AUTO
         5 002237   000022 772000                    QRL     18
         5 002240   200156 136100                    SBLQ    @SEVERITY+1,,AUTO
         5 002241   000000 036000 xsym               ADLQ    VX_BREF_ADR
         5 002242   000022 736000                    QLS     18
         5 002243   200126 036100                    ADLQ    OP_CODE,,AUTO
         5 002244   200013 470500                    LDP0    ADR$,,AUTO
         5 002245   000000 756100                    STQ     0,,PR0

      870    13447    7                                 OP_CODE
      871    13448    7                                 +
      872    13449    7                                 ( VX_BREF_ADR  +
      873    13450    7                                 POFFW( BREF$, VX_BREF_START$ ) )
      874    13451    7                                 * 262144;
      875    13452    7                         END;              /* If VX_O.NUM.BREF > 0 then do;      */

      876    13453    6                      END;                 /* If descendant then do;             */

  13449  5 002246                       NOT_A_TRANS* null
      877    13454    5   NOT_A_TRANSFER: ;
      878    13455
      879    13456        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:187  
      880    13457
      881    13458    5                   P$             =    PINCRW( P$, INC );

  13458  5 002246   200042 236100                    LDQ     INC,,AUTO
         5 002247   000022 736000                    QLS     18
         5 002250   200006 036100                    ADLQ    P$,,AUTO
         5 002251   200006 756100                    STQ     P$,,AUTO

      882    13459    5                   END;                /* Do while( P$ <= VX_REC_BUF_STOP$ ); */

  13459  5 002252   200014 116100                    CMPQ    REC_BUF_STOP$,,AUTO
         5 002253   000577 602000 5                  TNC     s:13018
         5 002254   000577 600000 5                  TZE     s:13018

      883    13460    4                END;                   /* else do - if VX_OK.KSTYPE = 0 then do */

      884    13461    3             END;                          /* If rtype = typprog then do */

  13461  5 002255   000112 710000 5                  TRA     NEXT_RECORD

      885    13462        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:188  
      886    13463    3          ELSE DO;

      887    13464    4             IF RTYPE >= 11 AND RTYPE <= 15 THEN DO; /* In debug record range */

  13464  5 002256   000013 115007                    CMPA    11,DL
         5 002257   003743 602000 5                  TNC     s:14125
         5 002260   000020 115007                    CMPA    16,DL
         5 002261   003743 603000 5                  TRC     s:14125

      888    13465    4                IF VX_O.SIN.NODEBUG ~= 0 THEN GOTO POST;

  13465  5 002262   000003 235000 xsym               LDA     VX_O+3
         5 002263   003750 601000 5                  TNZ     POST

      889    13466    5                IF RTYPE ~= 11 THEN DO; /* It's not a logical block debug record */

  13466  5 002264   200053 235100                    LDA     RTYPE,,AUTO
         5 002265   000013 115007                    CMPA    11,DL
         5 002266   002274 600000 5                  TZE     s:13479

      890    13467        /*E*  ERROR: VXT-E$FIMAGE_NO_LB_VX-0
      891    13468              MESSAGE: Object language error.  Debug records present but logical
      892    13469                       block record missing.  Skipping debug processing.
      893    13470              DESCRIPTION: Self-explanatory.
      894    13471        */
      895    13472                        %SCREAM(
      896    13473                        ERR#=E$FIMAGE_NO_LB_VX, MID="'T'", LEVEL=@E$S_VX,
      897    13474                        AUX=E$OUOF_VX );

  13475  5 002267   000135 630400 6                  EPPR0   93
         5 002270   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 002271   000000 701000 xent               TSX1    VXE$ERROR
         5 002272   000000 011000                    NOP     0

      898    13477    5                   GOTO POST;

  13477  5 002273   003750 710000 5                  TRA     POST
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:189  

      899    13478    5                   END;
      900    13479    5                IF NOT VX_PRIMARY_ENTDEF_GOT THEN DO;

  13479  5 002274   000000 234000 xsym               SZN     VX_PRIMARY_ENTDEF_GOT
         5 002275   002314 604000 5                  TMI     s:13502

      901    13480        /*E*  ERROR: VXT-E$FIMAGE_D_PENTDEF_VX-0
      902    13481              MESSAGE: Cannot resolve primary entry definition: %U1.
      903    13482              DESCRIPTION: Self-explanatory.
      904    13483        */
      905    13484    5                   VX_EFIELD1.COUNT = VX_OK.OUNAME.COUNT;

  13484  5 002276   000013 236000 xsym               LDQ     VX_OK+11
         5 002277   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O

      906    13485    5                   VX_EFIELD1.CHARS = VX_OK.OUNAME.CHARS;

  13485  5 002300   040000 100400                    MLR     fill='040'O
         5 002301   000013 200037 xsym               ADSC9   VX_OK+11                 cn=1,n=31
         5 002302   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      907    13486                        %SCREAM(
      908    13487                        ERR#=E$FIMAGE_D_PENTDEF_VX,
      909    13488                        MID="'T'",
      910    13489                        LEVEL=@E$S_D_VX);

  13490  5 002303   000142 630400 6                  EPPR0   98
         5 002304   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 002305   000000 701000 xent               TSX1    VXE$ERROR
         5 002306   000000 011000                    NOP     0

      911    13492        /*E*  ERROR: VXT-E$FIMAGE_D_SKIP_VX-0
      912    13493              MESSAGE: Skipping debug record processing.
      913    13494              DESCRIPTION: Self-explanatory.
      914    13495        */
      915    13496                        %SCREAM( ERR#=E$FIMAGE_D_SKIP_VX,
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:190  
      916    13497                        LEVEL=@E$S_VX, MID="'T'", AUX=E$OUOF_VX );

  13498  5 002307   000147 630400 6                  EPPR0   103
         5 002310   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 002311   000000 701000 xent               TSX1    VXE$ERROR
         5 002312   000000 011000                    NOP     0

      917    13500    5                   GOTO POST;

  13500  5 002313   003750 710000 5                  TRA     POST

      918    13501    5                   END;
      919    13502    5                IF PAGE# ~= 0 THEN DO;

  13502  5 002314   200133 235100                    LDA     PAGE#,,AUTO
         5 002315   002343 600000 5                  TZE     s:13536

      920    13503        /*E*  ERROR: VXT-E$FIMAGE_D_LB_VX-0
      921    13504              MESSAGE: First page of logical block records is %U1. Must be 0.
      922    13505              DESCRIPTION: Self-explanatory.
      923    13506        */
      924    13507                        %NUMBER( NUM1=PAGE# );

  13513  5 002316   000001 236000 6                  LDQ     1
         5 002317   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 002320   200133 630500                    EPPR0   PAGE#,,AUTO
         5 002321   200161 450500                    STP0    @SEVERITY+4,,AUTO
         5 002322   000043 236000 6                  LDQ     35
         5 002323   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 002324   000044 237000 6                  LDAQ    36
         5 002325   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 002326   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 002327   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 002330   000000 701000 xent               TSX1    VXD$B2C
         5 002331   000000 011000                    NOP     0

      925    13524                        %SCREAM(
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:191  
      926    13525                        ERR#=E$FIMAGE_D_LB_VX,
      927    13526                        MID="'T'", LEVEL=@E$S_D_VX );

  13527  5 002332   000154 630400 6                  EPPR0   108
         5 002333   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 002334   000000 701000 xent               TSX1    VXE$ERROR
         5 002335   000000 011000                    NOP     0

      928    13529                        %SCREAM(
      929    13530                        ERR#=E$FIMAGE_D_SKIP_VX,
      930    13531                        LEVEL=@E$S_VX, MID="'T'", AUX=E$OUOF_VX );

  13532  5 002336   000147 630400 6                  EPPR0   103
         5 002337   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 002340   000000 701000 xent               TSX1    VXE$ERROR
         5 002341   000000 011000                    NOP     0

      931    13534    5                   GOTO POST;

  13534  5 002342   003750 710000 5                  TRA     POST

      932    13535    5                   END;
      933    13536    5                IF IO_SIZEW < 8 THEN DO;

  13536  5 002343   200054 235100                    LDA     IO_SIZEW,,AUTO
         5 002344   000010 115007                    CMPA    8,DL
         5 002345   002357 605000 5                  TPL     s:13553

      934    13537        /*E*  ERROR: VXT-E$FIMAGE_D_SHORT_LB_VX-0
      935    13538              MESSAGE: Page 0 of debug record type 11 is less than 8 words.
      936    13539              DESCRIPTION: Self-explanatory.
      937    13540        */
      938    13541                        %SCREAM(
      939    13542                        ERR#=E$FIMAGE_D_SHORT_LB_VX,
      940    13543                        MID="'T'", LEVEL=@E$S_D_VX );

  13544  5 002346   000161 630400 6                  EPPR0   113
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:192  
         5 002347   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 002350   000000 701000 xent               TSX1    VXE$ERROR
         5 002351   000000 011000                    NOP     0

      941    13546                        %SCREAM(
      942    13547                        ERR#=E$FIMAGE_D_SKIP_VX,
      943    13548                        LEVEL=@E$S_VX, MID="'T'", AUX=E$OUOF_VX );

  13549  5 002352   000147 630400 6                  EPPR0   103
         5 002353   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 002354   000000 701000 xent               TSX1    VXE$ERROR
         5 002355   000000 011000                    NOP     0

      944    13551    5                   GOTO POST;

  13551  5 002356   003750 710000 5                  TRA     POST

      945    13552    5                   END;
      946    13553    4                PAGE_SIZE = 0;

  13553  5 002357   200057 450100                    STZ     PAGE_SIZE,,AUTO

      947    13554    4                J = 0;

  13554  5 002360   200020 450100                    STZ     J,,AUTO

      948    13555    4                TOTAL(11) = VX_IO_SIZEW;

  13555  5 002361   000000 235000 xsym               LDA     VX_IO_SIZEW
         5 002362   200113 755100                    STA     TOTAL+11,,AUTO

      949    13556    4                PAGE(11) = VX_IO_SIZEW;

  13556  5 002363   200073 755100                    STA     PAGE+11,,AUTO

      950    13557    4                IF B$LBNTRY0.FRAME ~= 0

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:193  
  13557  5 002364   200006 470500                    LDP0    P$,,AUTO
         5 002365   000002 235100                    LDA     2,,PR0
         5 002366   002537 600000 5                  TZE     s:13634

      951    13558    5                THEN DO ;

      952    13559    5                   OPRD_TYPE = B$LBNTRY0.NO_AUTO.OPNDTYP ;

  13559  5 002367   000002 236100                    LDQ     2,,PR0
         5 002370   000040 772000                    QRL     32
         5 002371   200023 756100                    STQ     OPRD_TYPE,,AUTO

      953    13560    5                   OPERAND   = B$LBNTRY0.NO_AUTO.OPERAND ;

  13560  5 002372   000002 236100                    LDQ     2,,PR0
         5 002373   000022 772000                    QRL     18
         5 002374   000777 376007                    ANQ     511,DL
         5 002375   200026 756100                    STQ     OPERAND,,AUTO

      954    13561    5                   DISP      = B$LBNTRY0.NO_AUTO.OFFSET  ;

  13561  5 002376   000002 236100                    LDQ     2,,PR0
         5 002377   777777 376007                    ANQ     -1,DL
         5 002400   200027 756100                    STQ     DISP,,AUTO

      955    13562    6                   DO CASE( OPRD_TYPE ) ;

  13562  5 002401   200023 235100                    LDA     OPRD_TYPE,,AUTO
         5 002402   000007 115007                    CMPA    7,DL
         5 002403   002405 602005 5                  TNC     s:13562+4,AL
         5 002404   002503 710000 5                  TRA     s:13607
         5 002405   002503 710000 5                  TRA     s:13607
         5 002406   002446 710000 5                  TRA     s:13579
         5 002407   002446 710000 5                  TRA     s:13579
         5 002410   002446 710000 5                  TRA     s:13579
         5 002411   002414 710000 5                  TRA     s:13564
         5 002412   002417 710000 5                  TRA     s:13567
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:194  
         5 002413   002446 710000 5                  TRA     s:13579

      956    13563    6                     CASE( 4 ) ;

      957    13564    6                       RESULT = OPERAND ;

  13564  5 002414   200026 235100                    LDA     OPERAND,,AUTO
         5 002415   200141 755100                    STA     RESULT,,AUTO
         5 002416   002534 710000 5                  TRA     s:13632

      958    13565
      959    13566    6                     CASE( 5 ) ;

      960    13567    6                       Q$ = PINCRW( VX_SC_BASE$, OPERAND * SIZEW(VX$SC) ) ;

  13567  5 002417   200026 236100                    LDQ     OPERAND,,AUTO
         5 002420   000003 402003                    MPY     3,DU
         5 002421   000000 036000 xsym               ADLQ    VX_SC_BASE$
         5 002422   200007 756100                    STQ     Q$,,AUTO

      961    13568    6                       IF Q$ -> VX$SC.ATTR.SEGMENT

  13568  5 002423   200007 471500                    LDP1    Q$,,AUTO
         5 002424   100000 236100                    LDQ     0,,PR1
         5 002425   000040 316003                    CANQ    32,DU
         5 002426   002434 600000 5                  TZE     s:13571

      962    13569    6                       THEN RESULT = VX_SEGID( Q$ -> VX$SC.SEG ) ;

  13569  5 002427   100000 236100                    LDQ     0,,PR1
         5 002430   000041 772000                    QRL     33
         5 002431   000000 235006 xsym               LDA     VX_SEGID,QL
         5 002432   200141 755100                    STA     RESULT,,AUTO
         5 002433   002534 710000 5                  TRA     s:13632

      963    13570    6                       ELSE
      964    13571    6                          IF Q$ -> VX$SC.TYPE = 5
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:195  

  13571  5 002434   100000 236100                    LDQ     0,,PR1
         5 002435   077000 376003                    ANQ     32256,DU
         5 002436   005000 116003                    CMPQ    2560,DU
         5 002437   002443 601000 5                  TNZ     s:13573

      965    13572    6                          THEN RESULT = BITBIN( '6003'O );

  13572  5 002440   006003 235007                    LDA     3075,DL
         5 002441   200141 755100                    STA     RESULT,,AUTO
         5 002442   002534 710000 5                  TRA     s:13632

      966    13573    6                          ELSE RESULT = BITBIN( '6000'O );

  13573  5 002443   006000 235007                    LDA     3072,DL
         5 002444   200141 755100                    STA     RESULT,,AUTO
         5 002445   002534 710000 5                  TRA     s:13632

      967    13574
      968    13575    6                     CASE(   1,

      969    13576    6                                     2,
      970    13577    6                                     3,
      971    13578    6                                     6 );
      972    13579    6                       MAP_INDEX = OPRD_MAP( OPRD_TYPE );

  13579  5 002446   000030 235005 3                  LDA     OPRD_MAP,AL
         5 002447   200055 755100                    STA     MAP_INDEX,,AUTO

      973    13580    6                       IF OPERAND >= VX_PASS2_REF.SAT.COUNT_A(MAP_INDEX)

  13580  5 002450   200026 236100                    LDQ     OPERAND,,AUTO
         5 002451   000036 116005 xsym               CMPQ    VX_PASS2_REF+30,AL
         5 002452   002464 602000 5                  TNC     s:13592

      974    13581    7                       THEN DO;

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:196  
      975    13582
      976    13583    7                          CALL BAD_OPERAND_RANGE( -3 );

  13583  5 002453   000040 236000 6                  LDQ     32
         5 002454   200151 756100                    STQ     MOVE_TEMP+2,,AUTO
         5 002455   004324 701000 5                  TSX1    BAD_OPERAND_RANGE
         5 002456   000000 011000                    NOP     0

      977    13584                               %SCREAM(
      978    13585                               ERR#=E$FIMAGE_D_SKIP_VX,
      979    13586                               LEVEL=@E$S_VX,
      980    13587                               MID="'T'" );

  13588  5 002457   000165 630400 6                  EPPR0   117
         5 002460   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 002461   000000 701000 xent               TSX1    VXE$ERROR
         5 002462   000000 011000                    NOP     0

      981    13590    7                          GOTO POST;

  13590  5 002463   003750 710000 5                  TRA     POST

      982    13591    7                          END;
      983    13592    6                       Q$ = PINCRW(

  13592  5 002464   200055 720100                    LXL0    MAP_INDEX,,AUTO
         5 002465   000043 402010 xsym               MPY     VX_PASS2_REF+35,X0
         5 002466   000024 471410 xsym               LDP1    VX_PASS2_REF+20,X0
         5 002467   100000 633506                    EPPR3   0,QL,PR1
         5 002470   200007 453500                    STP3    Q$,,AUTO

      984    13593    6                               VX_PASS2_REF.SAT.L_START_A$(MAP_INDEX),
      985    13594    6                               OPERAND *
      986    13595    6                               VX_PASS2_REF.SAT.ENT_SIZE_A(MAP_INDEX));
      987    13596    6                       IF OPRD_TYPE = 1

  13596  5 002471   200023 235100                    LDA     OPRD_TYPE,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:197  
         5 002472   000001 115007                    CMPA    1,DL
         5 002473   002500 601000 5                  TNZ     s:13598

      988    13597    6                       THEN RESULT = Q$ -> VX$SC.ADDRESS;

  13597  5 002474   300000 236100                    LDQ     0,,PR3
         5 002475   777777 376007                    ANQ     -1,DL
         5 002476   200141 756100                    STQ     RESULT,,AUTO
         5 002477   002534 710000 5                  TRA     s:13632

      989    13598    6                       ELSE RESULT = Q$ -> VXR$SAT.VALUE;

  13598  5 002500   300000 235100                    LDA     0,,PR3
         5 002501   200141 755100                    STA     RESULT,,AUTO
         5 002502   002534 710000 5                  TRA     s:13632

      990    13599
      991    13600    6                     CASE(ELSE);

      992    13601                            %NUMBER( NUM1=OPRD_TYPE );

  13607  5 002503   000001 236000 6                  LDQ     1
         5 002504   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 002505   200023 631500                    EPPR1   OPRD_TYPE,,AUTO
         5 002506   200161 451500                    STP1    @SEVERITY+4,,AUTO
         5 002507   000043 236000 6                  LDQ     35
         5 002510   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 002511   000044 237000 6                  LDAQ    36
         5 002512   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 002513   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 002514   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 002515   000000 701000 xent               TSX1    VXD$B2C
         5 002516   000000 011000                    NOP     0

      993    13618                            %SCREAM(
      994    13619                            ERR#=E$FIMAGE_D_BAD_OPRD_TYPE_VX,
      995    13620                            MID="'T'",
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:198  
      996    13621                            LEVEL=@E$S_D_VX);

  13622  5 002517   000172 630400 6                  EPPR0   122
         5 002520   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 002521   000000 701000 xent               TSX1    VXE$ERROR
         5 002522   000000 011000                    NOP     0

      997    13624    6                       CALL TELL_PAGE_TYPE( -3 );

  13624  5 002523   000040 236000 6                  LDQ     32
         5 002524   200155 756100                    STQ     @ERR_VALUE+3,,AUTO
         5 002525   004152 701000 5                  TSX1    TELL_PAGE_TYPE
         5 002526   000000 011000                    NOP     0

      998    13625                            %SCREAM(
      999    13626                            ERR#=E$FIMAGE_D_SKIP_VX,
     1000    13627                            MID="'T'", LEVEL=@E$S_VX );

  13628  5 002527   000165 630400 6                  EPPR0   117
         5 002530   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 002531   000000 701000 xent               TSX1    VXE$ERROR
         5 002532   000000 011000                    NOP     0

     1001    13630    6                       GOTO POST;

  13630  5 002533   003750 710000 5                  TRA     POST

     1002    13631    6                     END;                  /* Do case */

     1003    13632    5                   B$LBNTRY0.FRAME = RESULT + DISP ;

  13632  5 002534   200141 236100                    LDQ     RESULT,,AUTO
         5 002535   200027 036100                    ADLQ    DISP,,AUTO
         5 002536   000002 756100                    STQ     2,,PR0

     1004    13633    5                   END ;

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:199  
     1005    13634    5                DO I = 12 TO 15;

  13634  5 002537   000014 235007                    LDA     12,DL
         5 002540   200017 755100                    STA     I,,AUTO

     1006    13635    5                   Q$ = PINCRW( VX_REC_BUF_START$, DEBUG_MAP(J) );

  13635  5 002541   200020 720100                    LXL0    J,,AUTO
         5 002542   000103 721010 3                  LXL1    DEBUG_MAP,X0
         5 002543   000000 636011                    EAQ     0,X1
         5 002544   000000 036000 xsym               ADLQ    VX_REC_BUF_START$
         5 002545   200007 756100                    STQ     Q$,,AUTO

     1007    13636    5                   TSIZE = Q$ -> VX$HALF_A(0);

  13636  5 002546   200007 470500                    LDP0    Q$,,AUTO
         5 002547   000100 101500                    MRL     fill='000'O
         5 002550   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         5 002551   200120 000004                    ADSC9   TSIZE,,AUTO              cn=0,n=4

     1008    13637    5                   PSIZE = Q$ -> VX$HALF_A(1);

  13637  5 002552   000100 101500                    MRL     fill='000'O
         5 002553   000000 400002                    ADSC9   0,,PR0                   cn=2,n=2
         5 002554   200056 000004                    ADSC9   PSIZE,,AUTO              cn=0,n=4

     1009    13638    5                   IF PAGE_SIZE < PSIZE THEN PAGE_SIZE = PSIZE;

  13638  5 002555   200057 236100                    LDQ     PAGE_SIZE,,AUTO
         5 002556   200056 116100                    CMPQ    PSIZE,,AUTO
         5 002557   002562 603000 5                  TRC     s:13639

  13638  5 002560   200056 235100                    LDA     PSIZE,,AUTO
         5 002561   200057 755100                    STA     PAGE_SIZE,,AUTO

     1010    13639    5                   TOTAL(I) = TSIZE;

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:200  
  13639  5 002562   200017 722100                    LXL2    I,,AUTO
         5 002563   200120 235100                    LDA     TSIZE,,AUTO
         5 002564   200100 755112                    STA     TOTAL,X2,AUTO

     1011    13640    5                   PAGE(I)  = PSIZE;

  13640  5 002565   200056 236100                    LDQ     PSIZE,,AUTO
         5 002566   200060 756112                    STQ     PAGE,X2,AUTO

     1012    13641    5                   J = J + 1;

  13641  5 002567   200020 235100                    LDA     J,,AUTO
         5 002570   000001 035007                    ADLA    1,DL
         5 002571   200020 755100                    STA     J,,AUTO

     1013    13642    5                   END;                    /* Do i = typintntry to typdbgnam */

  13642  5 002572   200017 235100                    LDA     I,,AUTO
         5 002573   000001 035007                    ADLA    1,DL
         5 002574   200017 755100                    STA     I,,AUTO
         5 002575   000020 115007                    CMPA    16,DL
         5 002576   002541 602000 5                  TNC     s:13635

     1014    13643    5                IF PAGE_SIZE > VX_REC_BUF_SIZE THEN DO;

  13643  5 002577   000000 236000 xsym               LDQ     VX_REC_BUF_SIZE
         5 002600   200057 116100                    CMPQ    PAGE_SIZE,,AUTO
         5 002601   002637 603000 5                  TRC     s:13661

     1015    13644    5                   J = PAGE_SIZE - VX_REC_BUF_SIZE;

  13644  5 002602   200057 236100                    LDQ     PAGE_SIZE,,AUTO
         5 002603   000000 136000 xsym               SBLQ    VX_REC_BUF_SIZE
         5 002604   200020 756100                    STQ     J,,AUTO

     1016    13645                        %ALLOCATE(
     1017    13646                        PTR$=Q$,
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:201  
     1018    13647                        TYPE=@RL_DS_2,
     1019    13648                        SIZE=J);

  13649  5 002605   000007 236000 xsym               LDQ     VX_M_ALL+7
         5 002606   000007 136000 xsym               SBLQ    VX_M_FREE+7
         5 002607   002622 604000 5                  TMI     s:13653
         5 002610   200020 116100                    CMPQ    J,,AUTO
         5 002611   002622 602000 5                  TNC     s:13653

  13650  5 002612   000007 236000 xsym               LDQ     VX_M_FREE+7
         5 002613   000022 736000                    QLS     18
         5 002614   000007 036000 xsym               ADLQ    VX_M_BASE_PTR+7
         5 002615   200007 756100                    STQ     Q$,,AUTO

  13651  5 002616   000007 236000 xsym               LDQ     VX_M_FREE+7
         5 002617   200020 036100                    ADLQ    J,,AUTO
         5 002620   000007 756000 xsym               STQ     VX_M_FREE+7

  13652  5 002621   002634 710000 5                  TRA     s:13655

  13653  5 002622   200020 630500                    EPPR0   J,,AUTO
         5 002623   200160 450500                    STP0    @SEVERITY+3,,AUTO
         5 002624   000023 236000 6                  LDQ     19
         5 002625   200157 756100                    STQ     @SEVERITY+2,,AUTO
         5 002626   200007 631500                    EPPR1   Q$,,AUTO
         5 002627   200156 451500                    STP1    @SEVERITY+1,,AUTO
         5 002630   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 002631   000021 631400 xsym               EPPR1   B_VECTNIL+17
         5 002632   000000 701000 xent               TSX1    VXA$GET
         5 002633   000000 011000                    NOP     0

     1020    13655    5                   VX_REC_BUF_SIZE = VX_REC_BUF_SIZE + J;

  13655  5 002634   000000 236000 xsym               LDQ     VX_REC_BUF_SIZE
         5 002635   200020 036100                    ADLQ    J,,AUTO
         5 002636   000000 756000 xsym               STQ     VX_REC_BUF_SIZE

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:202  
     1021    13656    5                   END;            /* If PAGE_SIZE > VX_REC_BUF_SIZE then do; */

     1022    13657
     1023    13658
     1024    13659        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:203  
     1025    13660    5                DO WHILE( '1'B );

     1026    13661    6                   IF MOD( IO_SIZEW, VX_REC_SIZE_A(RTYPE) ) ~= 0 THEN DO;

  13661  5 002637   200053 720100                    LXL0    RTYPE,,AUTO
         5 002640   200054 236100                    LDQ     IO_SIZEW,,AUTO
         5 002641   000000 506010 xsym               DIV     VX_REC_SIZE_A,X0
         5 002642   000044 733000                    LRS     36
         5 002643   000000 116003                    CMPQ    0,DU
         5 002644   002672 600000 5                  TZE     s:13696

     1027    13662        /*E*  ERROR: VXT-E$FIMAGE_D_ENTRIES_VX-0
     1028    13663              MESSAGE: Debug record type %U1 does not contain an integral # of entries.
     1029    13664              DESCRIPTION: Self-explanatory.
     1030    13665        */
     1031    13666                           %NUMBER( NUM1=RTYPE );

  13672  5 002645   000001 236000 6                  LDQ     1
         5 002646   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 002647   200053 630500                    EPPR0   RTYPE,,AUTO
         5 002650   200161 450500                    STP0    @SEVERITY+4,,AUTO
         5 002651   000043 236000 6                  LDQ     35
         5 002652   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 002653   000044 237000 6                  LDAQ    36
         5 002654   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 002655   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 002656   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 002657   000000 701000 xent               TSX1    VXD$B2C
         5 002660   000000 011000                    NOP     0

     1032    13683                           %SCREAM(
     1033    13684                           ERR#=E$FIMAGE_D_ENTRIES_VX,
     1034    13685                           LEVEL=@E$S_D_VX, MID="'T'" );

  13686  5 002661   000177 630400 6                  EPPR0   127
         5 002662   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 002663   000000 701000 xent               TSX1    VXE$ERROR
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:204  
         5 002664   000000 011000                    NOP     0

     1035    13688                           %SCREAM(
     1036    13689                           ERR#=E$FIMAGE_D_SKIP_VX,
     1037    13690                           LEVEL=@E$S_VX, MID="'T'", AUX=E$OUOF_VX );

  13691  5 002665   000147 630400 6                  EPPR0   103
         5 002666   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 002667   000000 701000 xent               TSX1    VXE$ERROR
         5 002670   000000 011000                    NOP     0

     1038    13693    6                      GOTO POST;

  13693  5 002671   003750 710000 5                  TRA     POST

     1039    13694    6                      END;
     1040    13695
     1041    13696    6                   DO CASE( RTYPE - 11 );

  13696  5 002672   200053 235100                    LDA     RTYPE,,AUTO
         5 002673   000013 135007                    SBLA    11,DL
         5 002674   000005 115007                    CMPA    5,DL
         5 002675   002677 602005 5                  TNC     s:13696+5,AL
         5 002676   003454 710000 5                  TRA     s:13969
         5 002677   003474 710000 5                  TRA     VR_OUT
         5 002700   002704 710000 5                  TRA     s:13699
         5 002701   002707 710000 5                  TRA     s:13702
         5 002702   003060 710000 5                  TRA     s:13772
         5 002703   003474 710000 5                  TRA     VR_OUT

     1042    13697    6                     CASE( 0, 4 );         /* Lb & pn */

     1043    13698    6                     CASE( 1 );            /* Ie */

     1044    13699    6                       INC = SIZEW( B$INTNTRY );

  13699  5 002704   000002 236007                    LDQ     2,DL
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:205  
         5 002705   200042 756100                    STQ     INC,,AUTO

     1045    13700    6                       GOTO ES_CONTINUE;

  13700  5 002706   002711 710000 5                  TRA     ES_CONTINUE

     1046    13701    6                     CASE( 2 );            /* Es */

     1047    13702    6                       INC = SIZEW( B$EXST );

  13702  5 002707   000003 236007                    LDQ     3,DL
         5 002710   200042 756100                    STQ     INC,,AUTO

     1048    13703    6   ES_CONTINUE:
     1049    13704    7                       DO WHILE( P$ < REC_BUF_STOP$ );

  13704  5 002711   200006 236100       ES_CONTINUE  LDQ     P$,,AUTO
         5 002712   200014 116100                    CMPQ    REC_BUF_STOP$,,AUTO
         5 002713   003474 603000 5                  TRC     VR_OUT

     1050    13705    7                          SECT# = B$EXST.OU.SECTNUM;

  13705  5 002714   200006 470500                    LDP0    P$,,AUTO
         5 002715   000000 236100                    LDQ     0,,PR0
         5 002716   000022 772000                    QRL     18
         5 002717   000777 376007                    ANQ     511,DL
         5 002720   200047 756100                    STQ     SECT#,,AUTO

     1051    13706    8                          IF SECT# >= SECT_COUNT THEN DO;

  13706  5 002721   200046 116100                    CMPQ    SECT_COUNT,,AUTO
         5 002722   002767 602000 5                  TNC     s:13734

     1052    13707                                  %NUMBER( NUM1=SECT_COUNT, NUM2=SECT# );

  13713  5 002723   000001 236000 6                  LDQ     1
         5 002724   200162 756100                    STQ     @SEVERITY+5,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:206  
         5 002725   200046 631500                    EPPR1   SECT_COUNT,,AUTO
         5 002726   200161 451500                    STP1    @SEVERITY+4,,AUTO
         5 002727   000043 236000 6                  LDQ     35
         5 002730   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 002731   000044 237000 6                  LDAQ    36
         5 002732   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 002733   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 002734   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 002735   000000 701000 xent               TSX1    VXD$B2C
         5 002736   000000 011000                    NOP     0

  13717  5 002737   000001 236000 6                  LDQ     1
         5 002740   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 002741   200047 630500                    EPPR0   SECT#,,AUTO
         5 002742   200161 450500                    STP0    @SEVERITY+4,,AUTO
         5 002743   000047 236000 6                  LDQ     39
         5 002744   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 002745   000050 237000 6                  LDAQ    40
         5 002746   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 002747   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 002750   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 002751   000000 701000 xent               TSX1    VXD$B2C
         5 002752   000000 011000                    NOP     0

     1053    13724                                  %SCREAM(
     1054    13725                                  ERR#=E$FIMAGE_SC_RANGE_VX,
     1055    13726                                  LEVEL=@E$S_VX, MID="'T'" );

  13727  5 002753   000203 630400 6                  EPPR0   131
         5 002754   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 002755   000000 701000 xent               TSX1    VXE$ERROR
         5 002756   000000 011000                    NOP     0

     1056    13729    8                             SC_CURR$ = VX_SC_BASE$;

  13729  5 002757   000000 236000 xsym               LDQ     VX_SC_BASE$
         5 002760   200011 756100                    STQ     SC_CURR$,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:207  

     1057    13730    8                             CALL TELL_PAGE_TYPE( 3 );

  13730  5 002761   000020 236000 6                  LDQ     16
         5 002762   200155 756100                    STQ     @ERR_VALUE+3,,AUTO
         5 002763   004152 701000 5                  TSX1    TELL_PAGE_TYPE
         5 002764   000000 011000                    NOP     0

     1058    13731    8                             DISP = 0;

  13731  5 002765   200027 450100                    STZ     DISP,,AUTO

     1059    13732    8                             GOTO D_INC_P;

  13732  5 002766   003043 710000 5                  TRA     D_INC_P

     1060    13733    8                             END;
     1061    13734    7                          SC_CURR$ = PINCRW( VX_SC_BASE$, SECT# * SIZEW(VX$SC) );

  13734  5 002767   000003 402003                    MPY     3,DU
         5 002770   000000 036000 xsym               ADLQ    VX_SC_BASE$
         5 002771   200011 756100                    STQ     SC_CURR$,,AUTO

     1062    13735    7                          DISP = B$EXST.OU.OFFSET;

  13735  5 002772   000000 236100                    LDQ     0,,PR0
         5 002773   777777 376007                    ANQ     -1,DL
         5 002774   200027 756100                    STQ     DISP,,AUTO

     1063    13736    8                          IF SC_CURR$ -> VX$SC.SIZE < DISP THEN DO;

  13736  5 002775   200011 471500                    LDP1    SC_CURR$,,AUTO
         5 002776   100001 236100                    LDQ     1,,PR1
         5 002777   777777 376007                    ANQ     -1,DL
         5 003000   200027 116100                    CMPQ    DISP,,AUTO
         5 003001   003043 603000 5                  TRC     D_INC_P

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:208  
     1064    13737                                  %NUMBER( NUM1=SECT#, NUM2=DISP );

  13743  5 003002   000001 236000 6                  LDQ     1
         5 003003   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 003004   200047 633500                    EPPR3   SECT#,,AUTO
         5 003005   200161 453500                    STP3    @SEVERITY+4,,AUTO
         5 003006   000043 236000 6                  LDQ     35
         5 003007   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 003010   000044 237000 6                  LDAQ    36
         5 003011   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 003012   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 003013   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 003014   000000 701000 xent               TSX1    VXD$B2C
         5 003015   000000 011000                    NOP     0

  13747  5 003016   000001 236000 6                  LDQ     1
         5 003017   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 003020   200027 630500                    EPPR0   DISP,,AUTO
         5 003021   200161 450500                    STP0    @SEVERITY+4,,AUTO
         5 003022   000047 236000 6                  LDQ     39
         5 003023   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 003024   000050 237000 6                  LDAQ    40
         5 003025   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 003026   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 003027   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 003030   000000 701000 xent               TSX1    VXD$B2C
         5 003031   000000 011000                    NOP     0

     1065    13754                                  %SCREAM(
     1066    13755                                  ERR#=E$FIMAGE_BAD_ADR_VX,
     1067    13756                                  MID="'T'",
     1068    13757                                  LEVEL=@E$S_VX);

  13758  5 003032   000210 630400 6                  EPPR0   136
         5 003033   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 003034   000000 701000 xent               TSX1    VXE$ERROR
         5 003035   000000 011000                    NOP     0
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:209  

     1069    13760    8                             CALL TELL_PAGE_TYPE( 3 );

  13760  5 003036   000020 236000 6                  LDQ     16
         5 003037   200155 756100                    STQ     @ERR_VALUE+3,,AUTO
         5 003040   004152 701000 5                  TSX1    TELL_PAGE_TYPE
         5 003041   000000 011000                    NOP     0

     1070    13761    8                             DISP = 0;

  13761  5 003042   200027 450100                    STZ     DISP,,AUTO

     1071    13762    8                             END;

     1072    13763    7   D_INC_P:
     1073    13764    7                          B$EXST.ISADDR = SC_CURR$ -> VX$SC.ADDRESS + DISP;

  13764  5 003043   200011 470500       D_INC_P      LDP0    SC_CURR$,,AUTO
         5 003044   000000 236100                    LDQ     0,,PR0
         5 003045   777777 376007                    ANQ     -1,DL
         5 003046   200027 036100                    ADLQ    DISP,,AUTO
         5 003047   200006 471500                    LDP1    P$,,AUTO
         5 003050   100000 552134                    STBQ    0,'34'O,PR1

     1074    13765    7                          P$ = PINCRW( P$, INC );

  13765  5 003051   200042 236100                    LDQ     INC,,AUTO
         5 003052   000022 736000                    QLS     18
         5 003053   200006 036100                    ADLQ    P$,,AUTO
         5 003054   200006 756100                    STQ     P$,,AUTO

     1075    13766    7                          END;             /* Do while( P$ < REC_BUF_STOP$ ) */

  13766  5 003055   200014 116100                    CMPQ    REC_BUF_STOP$,,AUTO
         5 003056   002714 602000 5                  TNC     s:13705
         5 003057   003474 710000 5                  TRA     VR_OUT

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:210  
     1076    13767
     1077    13768
     1078    13769
     1079    13770
     1080    13771    6                     CASE( 3 );            /* Vr */

     1081    13772    7                       DO WHILE( P$ < REC_BUF_STOP$ );

  13772  5 003060   200006 236100                    LDQ     P$,,AUTO
         5 003061   200014 116100                    CMPQ    REC_BUF_STOP$,,AUTO
         5 003062   003474 603000 5                  TRC     VR_OUT

     1082    13773    7                          J = B$VREBL.ADDRTYP;

  13773  5 003063   200006 470500                    LDP0    P$,,AUTO
         5 003064   000000 236100                    LDQ     0,,PR0
         5 003065   000010 772000                    QRL     8
         5 003066   000017 376007                    ANQ     15,DL
         5 003067   200020 756100                    STQ     J,,AUTO

     1083    13774    8                          DO CASE ( J );

  13774  5 003070   000012 116007                    CMPQ    10,DL
         5 003071   003073 602006 5                  TNC     s:13774+3,QL
         5 003072   003404 710000 5                  TRA     s:13931
         5 003073   003430 710000 5                  TRA     s:13950
         5 003074   003105 710000 5                  TRA     s:13777
         5 003075   003430 710000 5                  TRA     s:13950
         5 003076   003430 710000 5                  TRA     s:13950
         5 003077   003111 710000 5                  TRA     s:13780
         5 003100   003430 710000 5                  TRA     s:13950
         5 003101   003430 710000 5                  TRA     s:13950
         5 003102   003120 710000 5                  TRA     s:13785
         5 003103   003300 710000 5                  TRA     s:13867
         5 003104   003105 710000 5                  TRA     s:13777

     1084    13775    8                            CASE( 0, 2, 3, 5, 6 );
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:211  

     1085    13776    8                            CASE( 1 /* Static data */, 9 /* Virtual arrays */);

     1086    13777    8                              DISP = B$VREBL.ADR.W;

  13777  5 003105   000000 236100                    LDQ     0,,PR0
         5 003106   000022 772000                    QRL     18
         5 003107   200027 756100                    STQ     DISP,,AUTO

     1087    13778    8                              GOTO VR_CONTINUE;

  13778  5 003110   003123 710000 5                  TRA     VR_CONTINUE

     1088    13779    8                            CASE( 4 );     /*Dcb */

     1089    13780    8                              DISP = 0;

  13780  5 003111   200027 450100                    STZ     DISP,,AUTO

     1090    13781    8                              OPRD_TYPE = 3; /* Symref */

  13781  5 003112   000003 235007                    LDA     3,DL
         5 003113   200023 755100                    STA     OPRD_TYPE,,AUTO

     1091    13782    8                              OPERAND = B$VREBL.IMPTR;

  13782  5 003114   000002 236100                    LDQ     2,,PR0
         5 003115   000022 732000                    QRS     18
         5 003116   200026 756100                    STQ     OPERAND,,AUTO

     1092    13783    8                              GOTO VX_CONTINUE_2;

  13783  5 003117   003131 710000 5                  TRA     VX_CONTINUE_2

     1093    13784    8                            CASE( 7 );

     1094    13785    8                              DISP = B$VREBL.IMPTR;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:212  

  13785  5 003120   000002 236100                    LDQ     2,,PR0
         5 003121   000022 732000                    QRS     18
         5 003122   200027 756100                    STQ     DISP,,AUTO

     1095    13786    8   VR_CONTINUE:
     1096    13787    8                              OPRD_TYPE = B$VREBL.OPNDTYP;

  13787  5 003123   000001 236100       VR_CONTINUE  LDQ     1,,PR0
         5 003124   000017 376007                    ANQ     15,DL
         5 003125   200023 756100                    STQ     OPRD_TYPE,,AUTO

     1097    13788    8                              OPERAND   = B$VREBL.OPERAND;

  13788  5 003126   000002 236100                    LDQ     2,,PR0
         5 003127   777777 376007                    ANQ     -1,DL
         5 003130   200026 756100                    STQ     OPERAND,,AUTO

     1098    13789    8   VX_CONTINUE_2:
     1099    13790    9                              DO CASE( OPRD_TYPE );

  13790  5 003131   200023 235100       VX_CONTINUE* LDA     OPRD_TYPE,,AUTO
         5 003132   000007 115007                    CMPA    7,DL
         5 003133   003135 602005 5                  TNC     VX_CONTINUE_2+4,AL
         5 003134   003230 710000 5                  TRA     s:13838
         5 003135   003230 710000 5                  TRA     s:13838
         5 003136   003174 710000 5                  TRA     s:13806
         5 003137   003174 710000 5                  TRA     s:13806
         5 003140   003174 710000 5                  TRA     s:13806
         5 003141   003144 710000 5                  TRA     s:13792
         5 003142   003146 710000 5                  TRA     s:13794
         5 003143   003174 710000 5                  TRA     s:13806

     1100    13791    9                                CASE( 4 );

     1101    13792    9                                  RESULT  =  OPERAND;

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:213  
  13792  5 003144   200141 756100                    STQ     RESULT,,AUTO
         5 003145   003261 710000 5                  TRA     VR_INC_P

     1102    13793    9                                CASE( 5 );

     1103    13794    9                                  Q$ = PINCRW( VX_SC_BASE$,

  13794  5 003146   000003 402003                    MPY     3,DU
         5 003147   000000 036000 xsym               ADLQ    VX_SC_BASE$
         5 003150   200007 756100                    STQ     Q$,,AUTO

     1104    13795    9                                          OPERAND * SIZEW(VX$SC) );
     1105    13796    9                                  IF Q$ -> VX$SC.ATTR.SEGMENT

  13796  5 003151   200007 471500                    LDP1    Q$,,AUTO
         5 003152   100000 236100                    LDQ     0,,PR1
         5 003153   000040 316003                    CANQ    32,DU
         5 003154   003162 600000 5                  TZE     s:13799

     1106    13797    9                                  THEN RESULT = VX_SEGID( Q$ -> VX$SC.SEG );

  13797  5 003155   100000 236100                    LDQ     0,,PR1
         5 003156   000041 772000                    QRL     33
         5 003157   000000 235006 xsym               LDA     VX_SEGID,QL
         5 003160   200141 755100                    STA     RESULT,,AUTO
         5 003161   003261 710000 5                  TRA     VR_INC_P

     1107    13798    9                                  ELSE
     1108    13799    9                                     IF Q$ -> VX$SC.TYPE = 5

  13799  5 003162   100000 236100                    LDQ     0,,PR1
         5 003163   077000 376003                    ANQ     32256,DU
         5 003164   005000 116003                    CMPQ    2560,DU
         5 003165   003171 601000 5                  TNZ     s:13801

     1109    13800    9                                     THEN RESULT = BITBIN( '6003'O );

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:214  
  13800  5 003166   006003 235007                    LDA     3075,DL
         5 003167   200141 755100                    STA     RESULT,,AUTO
         5 003170   003261 710000 5                  TRA     VR_INC_P

     1110    13801    9                                     ELSE RESULT = BITBIN( '6000'O );

  13801  5 003171   006000 235007                    LDA     3072,DL
         5 003172   200141 755100                    STA     RESULT,,AUTO
         5 003173   003261 710000 5                  TRA     VR_INC_P

     1111    13802    9                                CASE(   1,

     1112    13803    9                                                2,
     1113    13804    9                                                3,
     1114    13805    9                                                6 );
     1115    13806    9                                  MAP_INDEX = OPRD_MAP( OPRD_TYPE );

  13806  5 003174   000030 235005 3                  LDA     OPRD_MAP,AL
         5 003175   200055 755100                    STA     MAP_INDEX,,AUTO

     1116    13807    9                                  IF OPERAND >= VX_PASS2_REF.SAT.COUNT_A(MAP_INDEX)

  13807  5 003176   000036 116005 xsym               CMPQ    VX_PASS2_REF+30,AL
         5 003177   003211 602000 5                  TNC     s:13819

     1117    13808   10                                  THEN DO;

     1118    13809
     1119    13810   10                                     CALL BAD_OPERAND_RANGE( -3 );

  13810  5 003200   000040 236000 6                  LDQ     32
         5 003201   200151 756100                    STQ     MOVE_TEMP+2,,AUTO
         5 003202   004324 701000 5                  TSX1    BAD_OPERAND_RANGE
         5 003203   000000 011000                    NOP     0

     1120    13811                                          %SCREAM(
     1121    13812                                          ERR#=E$FIMAGE_D_SKIP_VX,
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:215  
     1122    13813                                          LEVEL=@E$S_VX,
     1123    13814                                          MID="'T'" );

  13815  5 003204   000165 630400 6                  EPPR0   117
         5 003205   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 003206   000000 701000 xent               TSX1    VXE$ERROR
         5 003207   000000 011000                    NOP     0

     1124    13817   10                                     GOTO POST;

  13817  5 003210   003750 710000 5                  TRA     POST

     1125    13818   10                                     END;
     1126    13819    9                                  Q$ = PINCRW(

  13819  5 003211   200055 720100                    LXL0    MAP_INDEX,,AUTO
         5 003212   000043 402010 xsym               MPY     VX_PASS2_REF+35,X0
         5 003213   000024 471410 xsym               LDP1    VX_PASS2_REF+20,X0
         5 003214   100000 633506                    EPPR3   0,QL,PR1
         5 003215   200007 453500                    STP3    Q$,,AUTO

     1127    13820    9                                          VX_PASS2_REF.SAT.L_START_A$(MAP_INDEX),
     1128    13821    9                                          OPERAND *
     1129    13822    9                                          VX_PASS2_REF.SAT.ENT_SIZE_A(MAP_INDEX));
     1130    13823    9                                  IF OPRD_TYPE = 1

  13823  5 003216   200023 235100                    LDA     OPRD_TYPE,,AUTO
         5 003217   000001 115007                    CMPA    1,DL
         5 003220   003225 601000 5                  TNZ     s:13825

     1131    13824    9                                  THEN RESULT = Q$ -> VX$SC.ADDRESS;

  13824  5 003221   300000 236100                    LDQ     0,,PR3
         5 003222   777777 376007                    ANQ     -1,DL
         5 003223   200141 756100                    STQ     RESULT,,AUTO
         5 003224   003261 710000 5                  TRA     VR_INC_P

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:216  
     1132    13825    9                                  ELSE RESULT = Q$ -> VXR$SAT.VALUE;

  13825  5 003225   300000 235100                    LDA     0,,PR3
         5 003226   200141 755100                    STA     RESULT,,AUTO
         5 003227   003261 710000 5                  TRA     VR_INC_P

     1133    13826
     1134    13827    9                                CASE(ELSE);

     1135    13828        /*E*  ERROR: VXT-E$FIMAGE_D_BAD_OPRD_TYPE_VX-0
     1136    13829              MESSAGE: Illegal operand type detected in debug records. Value = %U1.
     1137    13830              DESCRIPTION: Self-explanatory.
     1138    13831        */
     1139    13832                                       %NUMBER( NUM1=OPRD_TYPE );

  13838  5 003230   000001 236000 6                  LDQ     1
         5 003231   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 003232   200023 631500                    EPPR1   OPRD_TYPE,,AUTO
         5 003233   200161 451500                    STP1    @SEVERITY+4,,AUTO
         5 003234   000043 236000 6                  LDQ     35
         5 003235   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 003236   000044 237000 6                  LDAQ    36
         5 003237   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 003240   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 003241   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 003242   000000 701000 xent               TSX1    VXD$B2C
         5 003243   000000 011000                    NOP     0

     1140    13849                                       %SCREAM(
     1141    13850                                       ERR#=E$FIMAGE_D_BAD_OPRD_TYPE_VX,
     1142    13851                                       MID="'T'",
     1143    13852                                       LEVEL=@E$S_D_VX);

  13853  5 003244   000172 630400 6                  EPPR0   122
         5 003245   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 003246   000000 701000 xent               TSX1    VXE$ERROR
         5 003247   000000 011000                    NOP     0
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:217  

     1144    13855    9                                  CALL TELL_PAGE_TYPE( -3 );

  13855  5 003250   000040 236000 6                  LDQ     32
         5 003251   200155 756100                    STQ     @ERR_VALUE+3,,AUTO
         5 003252   004152 701000 5                  TSX1    TELL_PAGE_TYPE
         5 003253   000000 011000                    NOP     0

     1145    13856                                       %SCREAM(
     1146    13857                                       ERR#=E$FIMAGE_D_SKIP_VX,
     1147    13858                                       MID="'T'", LEVEL=@E$S_VX );

  13859  5 003254   000165 630400 6                  EPPR0   117
         5 003255   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 003256   000000 701000 xent               TSX1    VXE$ERROR
         5 003257   000000 011000                    NOP     0

     1148    13861    9                                  GOTO POST;

  13861  5 003260   003750 710000 5                  TRA     POST

     1149    13862    9                                END;       /* Do case */

     1150    13863    8   VR_INC_P:
     1151    13864    8                              IF J=1 OR J=9 THEN B$VREBL.ADR.W = RESULT + DISP;

  13864  5 003261   200020 235100       VR_INC_P     LDA     J,,AUTO
         5 003262   000001 115007                    CMPA    1,DL
         5 003263   003266 600000 5                  TZE     s:13864
         5 003264   000011 115007                    CMPA    9,DL
         5 003265   003273 601000 5                  TNZ     s:13865

  13864  5 003266   200141 236100                    LDQ     RESULT,,AUTO
         5 003267   200027 036100                    ADLQ    DISP,,AUTO
         5 003270   000000 620006                    EAX0    0,QL
         5 003271   000000 740100                    STX0    0,,PR0
         5 003272   003430 710000 5                  TRA     s:13950
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:218  

     1152    13865    8                              ELSE B$VREBL.IMPTR = RESULT + DISP;

  13865  5 003273   200141 236100                    LDQ     RESULT,,AUTO
         5 003274   200027 036100                    ADLQ    DISP,,AUTO
         5 003275   000000 620006                    EAX0    0,QL
         5 003276   000002 740100                    STX0    2,,PR0
         5 003277   003430 710000 5                  TRA     s:13950

     1153    13866    8                            CASE( 8 );

     1154    13867    8                              OPRD_TYPE = B$VREBL.OPNDTYP;

  13867  5 003300   000001 236100                    LDQ     1,,PR0
         5 003301   000017 376007                    ANQ     15,DL
         5 003302   200023 756100                    STQ     OPRD_TYPE,,AUTO

     1155    13868    8                              OPERAND   = B$VREBL.OPERAND;

  13868  5 003303   000002 236100                    LDQ     2,,PR0
         5 003304   777777 376007                    ANQ     -1,DL
         5 003305   200026 756100                    STQ     OPERAND,,AUTO

     1156    13869    9                              IF OPRD_TYPE = 1 THEN DO;

  13869  5 003306   200023 235100                    LDA     OPRD_TYPE,,AUTO
         5 003307   000001 115007                    CMPA    1,DL
         5 003310   003342 601000 5                  TNZ     s:13881

     1157    13870    9                                 Q$ = PINCRW( VX_SC_BASE$,

  13870  5 003311   000003 402003                    MPY     3,DU
         5 003312   000000 036000 xsym               ADLQ    VX_SC_BASE$
         5 003313   200007 756100                    STQ     Q$,,AUTO

     1158    13871    9                                         OPERAND * SIZEW(VX$SC) );
     1159    13872    9                                 B$VREBL.IMPTR = Q$ -> VX$SC.ADDRESS;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:219  

  13872  5 003314   200007 471500                    LDP1    Q$,,AUTO
         5 003315   100000 720100                    LXL0    0,,PR1
         5 003316   000002 740100                    STX0    2,,PR0

     1160    13873    9                                 IF Q$ -> VX$SC.ATTR.SEGMENT

  13873  5 003317   200007 471500                    LDP1    Q$,,AUTO
         5 003320   100000 236100                    LDQ     0,,PR1
         5 003321   000040 316003                    CANQ    32,DU
         5 003322   003330 600000 5                  TZE     s:13876

     1161    13874    9                                 THEN B$VREBL.OPERAND = VX_SEGID( Q$ -> VX$SC.SEG );

  13874  5 003323   100000 236100                    LDQ     0,,PR1
         5 003324   000041 772000                    QRL     33
         5 003325   000000 721006 xsym               LXL1    VX_SEGID,QL
         5 003326   000002 441100                    SXL1    2,,PR0
         5 003327   003430 710000 5                  TRA     s:13950

     1162    13875    9                                 ELSE
     1163    13876    9                                    IF Q$ -> VX$SC.TYPE = 5

  13876  5 003330   100000 236100                    LDQ     0,,PR1
         5 003331   077000 376003                    ANQ     32256,DU
         5 003332   005000 116003                    CMPQ    2560,DU
         5 003333   003337 601000 5                  TNZ     s:13878

     1164    13877    9                                    THEN B$VREBL.OPERAND = BITBIN( '6003'O );

  13877  5 003334   006003 221003                    LDX1    3075,DU
         5 003335   000002 441100                    SXL1    2,,PR0
         5 003336   003430 710000 5                  TRA     s:13950

     1165    13878    9                                    ELSE B$VREBL.OPERAND = BITBIN( '6000'O );

  13878  5 003337   006000 221003                    LDX1    3072,DU
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:220  
         5 003340   000002 441100                    SXL1    2,,PR0

     1166    13879    9                                 END;

  13879  5 003341   003430 710000 5                  TRA     s:13950

     1167    13880    8                              ELSE
     1168    13881    9                                 IF OPRD_TYPE = 6 THEN DO;

  13881  5 003342   000006 115007                    CMPA    6,DL
         5 003343   003357 601000 5                  TNZ     s:13900

     1169    13882    9                                    Q$ = PINCRW( VX_PASS2_REF.SAT.L_START.SR$, OPERAND
             13882                                             * SIZEW(VXR$SAT) );

  13882  5 003344   000023 736000                    QLS     19
         5 003345   000027 036000 xsym               ADLQ    VX_PASS2_REF+23
         5 003346   200007 756100                    STQ     Q$,,AUTO

     1170    13883    9                                    B$VREBL.IMPTR = Q$ -> VXR$SAT.SEG.OFFSET;

  13883  5 003347   200007 471500                    LDP1    Q$,,AUTO
         5 003350   100000 220100                    LDX0    0,,PR1
         5 003351   000002 740100                    STX0    2,,PR0

     1171    13884    9                                    B$VREBL.OPERAND = Q$ -> VXR$SAT.SEG.SEGID;

  13884  5 003352   200007 471500                    LDP1    Q$,,AUTO
         5 003353   100000 721100                    LXL1    0,,PR1
         5 003354   007777 361003                    ANX1    4095,DU
         5 003355   000002 441100                    SXL1    2,,PR0

     1172    13885    9                                    END;

  13885  5 003356   003430 710000 5                  TRA     s:13950

     1173    13886    9                                 ELSE DO;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:221  

     1174    13887        /*E*  ERROR: VXT-E$FIMAGE_BAD_VD_OPTYPE_VX-0
     1175    13888              MESSAGE: Object language error.  Invalid operand type for a variable debug
     1176    13889                       record with address type 8.  Type = %U1.
     1177    13890              DESCRIPTION: The operand type field must be either type 1 (section)
     1178    13891                           or type 6 (SEGREF) for variable debug record of address
     1179    13892                           type 8.
     1180    13893        */
     1181    13894                                         %NUMBER( NUM1=OPRD_TYPE );

  13900  5 003357   000001 236000 6                  LDQ     1
         5 003360   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 003361   200023 631500                    EPPR1   OPRD_TYPE,,AUTO
         5 003362   200161 451500                    STP1    @SEVERITY+4,,AUTO
         5 003363   000043 236000 6                  LDQ     35
         5 003364   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 003365   000044 237000 6                  LDAQ    36
         5 003366   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 003367   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 003370   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 003371   000000 701000 xent               TSX1    VXD$B2C
         5 003372   000000 011000                    NOP     0

     1182    13911                                         %SCREAM(
     1183    13912                                         ERR#=E$FIMAGE_BAD_VD_OPTYPE_VX,
     1184    13913                                         LEVEL=@E$S_VX, MID="'T'" );

  13914  5 003373   000215 630400 6                  EPPR0   141
         5 003374   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 003375   000000 701000 xent               TSX1    VXE$ERROR
         5 003376   000000 011000                    NOP     0

     1185    13916    9                                    CALL TELL_PAGE_TYPE( 2 );

  13916  5 003377   000014 236000 6                  LDQ     12
         5 003400   200155 756100                    STQ     @ERR_VALUE+3,,AUTO
         5 003401   004152 701000 5                  TSX1    TELL_PAGE_TYPE
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:222  
         5 003402   000000 011000                    NOP     0

     1186    13917    9                                    END;

  13917  5 003403   003430 710000 5                  TRA     s:13950

     1187    13918
     1188    13919
     1189    13920    8                            CASE( ELSE );

     1190    13921        /*E*  ERROR: VXT-E$FIMAGE_D_ADR_TYPE_VX-0
     1191    13922              MESSAGE: Illegal address type in variable debug record. Value = %U1.
     1192    13923              DESCRIPTION: Self-explanatory.
     1193    13924        */
     1194    13925                                   %NUMBER( NUM1=J );

  13931  5 003404   000001 236000 6                  LDQ     1
         5 003405   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 003406   200020 631500                    EPPR1   J,,AUTO
         5 003407   200161 451500                    STP1    @SEVERITY+4,,AUTO
         5 003410   000043 236000 6                  LDQ     35
         5 003411   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 003412   000044 237000 6                  LDAQ    36
         5 003413   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 003414   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 003415   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 003416   000000 701000 xent               TSX1    VXD$B2C
         5 003417   000000 011000                    NOP     0

     1195    13942                                   %SCREAM(
     1196    13943                                   ERR#=E$FIMAGE_D_ADR_TYPE_VX,
     1197    13944                                   MID="'T'",
     1198    13945                                   LEVEL=@E$S_VX);

  13946  5 003420   000222 630400 6                  EPPR0   146
         5 003421   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 003422   000000 701000 xent               TSX1    VXE$ERROR
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:223  
         5 003423   000000 011000                    NOP     0

     1199    13948    8                              CALL TELL_PAGE_TYPE( 3 );

  13948  5 003424   000020 236000 6                  LDQ     16
         5 003425   200155 756100                    STQ     @ERR_VALUE+3,,AUTO
         5 003426   004152 701000 5                  TSX1    TELL_PAGE_TYPE
         5 003427   000000 011000                    NOP     0

     1200    13949    8                            END;           /* Do case( j ) */

     1201    13950    7                          P$ = PINCRW( P$, SIZEW( B$VREBL ) );

  13950  5 003430   200006 236100                    LDQ     P$,,AUTO
         5 003431   000005 036003                    ADLQ    5,DU
         5 003432   200006 756100                    STQ     P$,,AUTO

     1202    13951    8                          DO WHILE( P$ -> B$VREBL.DATATYP >= 60

  13951  5 003433   003441 710000 5                  TRA     s:13956

     1203    13952    8                                  AND
     1204    13953    8                                  P$ -> B$VREBL.DATATYP <= 62 );
     1205    13954    8                             P$ = PINCRW( P$, SIZEW( B$VREBL ) );

  13954  5 003434   200006 236100                    LDQ     P$,,AUTO
         5 003435   000005 036003                    ADLQ    5,DU
         5 003436   200006 756100                    STQ     P$,,AUTO

     1206    13955    8                             IF P$ >= REC_BUF_STOP$ THEN GOTO VR_OUT;

  13955  5 003437   200014 116100                    CMPQ    REC_BUF_STOP$,,AUTO
         5 003440   003474 603000 5                  TRC     VR_OUT

     1207    13956    8                             END;      /* Do while ( P$ -> B$VREL.DATATYP ... */

  13956  5 003441   200006 470500                    LDP0    P$,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:224  
         5 003442   000000 236100                    LDQ     0,,PR0
         5 003443   000374 376007                    ANQ     252,DL
         5 003444   000360 116007                    CMPQ    240,DL
         5 003445   003450 602000 5                  TNC     s:13957
         5 003446   000374 116007                    CMPQ    252,DL
         5 003447   003434 602000 5                  TNC     s:13954

     1208    13957    7                          END;             /* Do while( P$ < REC_BUF_STOP$ ); */

  13957  5 003450   200006 236100                    LDQ     P$,,AUTO
         5 003451   200014 116100                    CMPQ    REC_BUF_STOP$,,AUTO
         5 003452   003063 602000 5                  TNC     s:13773
         5 003453   003474 710000 5                  TRA     VR_OUT

     1209    13958    6                     CASE( ELSE );         /* Error */

     1210    13959        /*E*  ERROR: VXT-E$INTERNAL_FIMAGE_DEBUG_VX-0
     1211    13960              MESSAGE: Internal link error while processing debug record type = %U1.
     1212    13961              DESCRIPTION: Self-explanatory.
     1213    13962        */
     1214    13963                            %NUMBER( NUM1=RTYPE );

  13969  5 003454   000001 236000 6                  LDQ     1
         5 003455   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 003456   200053 630500                    EPPR0   RTYPE,,AUTO
         5 003457   200161 450500                    STP0    @SEVERITY+4,,AUTO
         5 003460   000043 236000 6                  LDQ     35
         5 003461   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 003462   000044 237000 6                  LDAQ    36
         5 003463   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 003464   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 003465   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 003466   000000 701000 xent               TSX1    VXD$B2C
         5 003467   000000 011000                    NOP     0

     1215    13980                            %SCREAM(
     1216    13981                            ERR#=E$INTERNAL_FIMAGE_DEBUG_VX,
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:225  
     1217    13982                            LEVEL=@E$F_VX,
     1218    13983                            MID="'T'",
     1219    13984                            AUX=@E$OUOF_VX);

  13985  5 003470   000227 630400 6                  EPPR0   151
         5 003471   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 003472   000000 701000 xent               TSX1    VXE$ERROR
         5 003473   000000 011000                    NOP     0

     1220    13987    6                     END;                  /* Do case( state ); */

     1221    13988    5   VR_OUT:
     1222    13989        /*Now write the record out */
     1223    13990    5                   CALL VXK$KEY( 1/*@RF*/, RTYPE, VX_CURR$ -> VX$NODE.NUM, PAGE# );

  13990  5 003474   200133 630500       VR_OUT       EPPR0   PAGE#,,AUTO
         5 003475   200161 450500                    STP0    @SEVERITY+4,,AUTO
         5 003476   000000 236000 xsym               LDQ     VX_CURR$
         5 003477   000010 036003                    ADLQ    8,DU
         5 003500   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 003501   200053 631500                    EPPR1   RTYPE,,AUTO
         5 003502   200157 451500                    STP1    @SEVERITY+2,,AUTO
         5 003503   000233 236000 6                  LDQ     155
         5 003504   200156 756100                    STQ     @SEVERITY+1,,AUTO
         5 003505   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 003506   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 003507   000000 701000 xent               TSX1    VXK$KEY
         5 003510   000000 011000                    NOP     0

     1224    13991    5                   CALL VXI$WRITE( 1/*@RF*/, VX_REC_BUF_START$, IO_SIZEW, 1/*@RF*/ );

  13991  5 003511   000233 236000 6                  LDQ     155
         5 003512   200161 756100                    STQ     @SEVERITY+4,,AUTO
         5 003513   200054 630500                    EPPR0   IO_SIZEW,,AUTO
         5 003514   200160 450500                    STP0    @SEVERITY+3,,AUTO
         5 003515   000234 237000 6                  LDAQ    156
         5 003516   200156 757100                    STAQ    @SEVERITY+1,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:226  
         5 003517   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 003520   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 003521   000000 701000 xent               TSX1    VXI$WRITE
         5 003522   000000 011000                    NOP     0

     1225    13992
     1226    13993    5                   IF RTYPE = 15 THEN IO_SIZEW = PAGE( 15 );

  13993  5 003523   200053 235100                    LDA     RTYPE,,AUTO
         5 003524   000017 115007                    CMPA    15,DL
         5 003525   003530 601000 5                  TNZ     s:13994

  13993  5 003526   200077 236100                    LDQ     PAGE+15,,AUTO
         5 003527   200054 756100                    STQ     IO_SIZEW,,AUTO

     1227    13994    5                   TOTAL( RTYPE ) = TOTAL( RTYPE ) - IO_SIZEW;

  13994  5 003530   200100 236105                    LDQ     TOTAL,AL,AUTO
         5 003531   200054 136100                    SBLQ    IO_SIZEW,,AUTO
         5 003532   200053 720100                    LXL0    RTYPE,,AUTO
         5 003533   200100 756110                    STQ     TOTAL,X0,AUTO

     1228    13995
     1229    13996    6                   DO WHILE( TOTAL( RTYPE) <= 0  );

  13996  5 003534   000000 116003                    CMPQ    0,DU
         5 003535   003547 605400 5                  TPNZ    s:14002

     1230    13997    6                      RTYPE = RTYPE + 1;

  13997  5 003536   200053 235100                    LDA     RTYPE,,AUTO
         5 003537   000001 035007                    ADLA    1,DL
         5 003540   200053 755100                    STA     RTYPE,,AUTO

     1231    13998    6                      PAGE# = -1;

  13998  5 003541   000001 336007                    LCQ     1,DL
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:227  
         5 003542   200133 756100                    STQ     PAGE#,,AUTO

     1232    13999    6                      IF RTYPE > 15 THEN GOTO POST;

  13999  5 003543   000020 115007                    CMPA    16,DL
         5 003544   003750 603000 5                  TRC     POST

     1233    14000    6                      END;

  14000  5 003545   200100 235105                    LDA     TOTAL,AL,AUTO
         5 003546   003536 604400 5                  TMOZ    s:13997

     1234    14001
     1235    14002    5                   PAGE# = PAGE# + 1;

  14002  5 003547   200133 054100                    AOS     PAGE#,,AUTO

     1236    14003    5   D_READ:
     1237    14004    5                   CALL VXK$KEY( 0/*@OF*/, RTYPE, J, PAGE# );

  14004  5 003550   200133 630500       D_READ       EPPR0   PAGE#,,AUTO
         5 003551   200161 450500                    STP0    @SEVERITY+4,,AUTO
         5 003552   200020 631500                    EPPR1   J,,AUTO
         5 003553   200160 451500                    STP1    @SEVERITY+3,,AUTO
         5 003554   200053 633500                    EPPR3   RTYPE,,AUTO
         5 003555   200157 453500                    STP3    @SEVERITY+2,,AUTO
         5 003556   000000 236000 6                  LDQ     0
         5 003557   200156 756100                    STQ     @SEVERITY+1,,AUTO
         5 003560   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 003561   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 003562   000000 701000 xent               TSX1    VXK$KEY
         5 003563   000000 011000                    NOP     0

     1238    14005    5                   CALL VXI$READ( 0/*@OF*/, VX_REC_BUF_START$, PAGE(RTYPE),

  14005  5 003564   000000 236000 6                  LDQ     0
         5 003565   200161 756100                    STQ     @SEVERITY+4,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:228  
         5 003566   200053 720100                    LXL0    RTYPE,,AUTO
         5 003567   200060 630510                    EPPR0   PAGE,X0,AUTO
         5 003570   200160 450500                    STP0    @SEVERITY+3,,AUTO
         5 003571   000004 237000 6                  LDAQ    4
         5 003572   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 003573   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 003574   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 003575   000000 701000 xent               TSX1    VXI$READ
         5 003576   003637 702000 5                  TSX2    IO_ERROR_DEBUG

     1239    14006    5                           0/*@OF*/    )                ALTRET( IO_ERROR_DEBUG );
     1240    14007    5                   P$ = VX_REC_BUF_START$;

  14007  5 003577   000000 236000 xsym               LDQ     VX_REC_BUF_START$
         5 003600   200006 756100                    STQ     P$,,AUTO

     1241    14008    5                   RTYPE = VX_OK.KRTYPE;

  14008  5 003601   000002 235000 xsym               LDA     VX_OK+2
         5 003602   200053 755100                    STA     RTYPE,,AUTO

     1242    14009    5                   PAGE# = VX_OK.KPAGE#;

  14009  5 003603   000003 235000 xsym               LDA     VX_OK+3
         5 003604   200133 755100                    STA     PAGE#,,AUTO

     1243    14010    5                   IO_SIZEW = VX_IO_SIZEW;

  14010  5 003605   000000 235000 xsym               LDA     VX_IO_SIZEW
         5 003606   200054 755100                    STA     IO_SIZEW,,AUTO

     1244    14011    5                   IF IO_SIZEW  > 0

  14011  5 003607   003616 604400 5                  TMOZ    s:14025

     1245    14012    5                   THEN REC_BUF_STOP$ = PINCRW( VX_REC_BUF_START$, IO_SIZEW  - 1 );

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:229  
  14012  5 003610   200054 236100                    LDQ     IO_SIZEW,,AUTO
         5 003611   000022 736000                    QLS     18
         5 003612   000001 136003                    SBLQ    1,DU
         5 003613   000000 036000 xsym               ADLQ    VX_REC_BUF_START$
         5 003614   200014 756100                    STQ     REC_BUF_STOP$,,AUTO
         5 003615   002637 710000 5                  TRA     s:13661

     1246    14013    6                   ELSE DO;                /* 0 size */

     1247    14014        /*E*   ERROR: VXT-E$FIMAGE_D_ZERO_REC_SIZE_VX-0
     1248    14015              MESSAGE: 0 record size for debug record type = %U1.
     1249    14016                       Skipping debug processing.
     1250    14017              DESCRIPTION: Self-explanatory.
     1251    14018        */
     1252    14019                           %NUMBER( NUM1=RTYPE );

  14025  5 003616   000001 236000 6                  LDQ     1
         5 003617   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 003620   200053 630500                    EPPR0   RTYPE,,AUTO
         5 003621   200161 450500                    STP0    @SEVERITY+4,,AUTO
         5 003622   000043 236000 6                  LDQ     35
         5 003623   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 003624   000044 237000 6                  LDAQ    36
         5 003625   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 003626   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 003627   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 003630   000000 701000 xent               TSX1    VXD$B2C
         5 003631   000000 011000                    NOP     0

     1253    14036                           %SCREAM(
     1254    14037                           ERR#=E$FIMAGE_D_ZERO_REC_SIZE_VX,
     1255    14038                           LEVEL=@E$S_VX,
     1256    14039                           MID="'T'");

  14040  5 003632   000237 630400 6                  EPPR0   159
         5 003633   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 003634   000000 701000 xent               TSX1    VXE$ERROR
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:230  
         5 003635   000000 011000                    NOP     0

     1257    14042    6                      GOTO POST;

  14042  5 003636   003750 710000 5                  TRA     POST

     1258    14043    6                      END;                 /* Else do; */
     1259    14044    5                   END;                    /* Do forever */

     1260    14045
     1261    14046
     1262    14047    4   IO_ERROR_DEBUG:
     1263    14048    5                DO CASE( VX_IO_STATUS );

  14048  5 003637   000000 235000 xsym  IO_ERROR_DE* LDA     VX_IO_STATUS
         5 003640   000003 115007                    CMPA    3,DL
         5 003641   003643 602005 5                  TNC     IO_ERROR_DEBUG+4,AL
         5 003642   003742 710000 5                  TRA     s:14113
         5 003643   003742 710000 5                  TRA     s:14113
         5 003644   003646 710000 5                  TRA     s:14062
         5 003645   003667 710000 5                  TRA     s:14088

     1264    14049    5                  CASE( 0/*@IO_EOF*/ );

     1265    14050    5                  CASE( 1/*@IO_NOKEY*/ );

     1266    14051        /*E*  ERROR: VXT-E$FIMAGE_D_NOKEY_VX-0
     1267    14052              MESSAGE: No such key error while processing debug record type = %U1.
     1268    14053                       Skipping debug processing.
     1269    14054              DESCRIPTION: Self-explanatory.
     1270    14055        */
     1271    14056                         %NUMBER( NUM1=RTYPE );

  14062  5 003646   000001 236000 6                  LDQ     1
         5 003647   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 003650   200053 630500                    EPPR0   RTYPE,,AUTO
         5 003651   200161 450500                    STP0    @SEVERITY+4,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:231  
         5 003652   000043 236000 6                  LDQ     35
         5 003653   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 003654   000044 237000 6                  LDAQ    36
         5 003655   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 003656   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 003657   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 003660   000000 701000 xent               TSX1    VXD$B2C
         5 003661   000000 011000                    NOP     0

     1272    14073                         %SCREAM(ERR#=E$FIMAGE_D_NOKEY_VX,LEVEL=@E$S_VX,MID="'T'",AUX=
             14073                             @E$OUOF_VX);

  14074  5 003662   000244 630400 6                  EPPR0   164
         5 003663   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 003664   000000 701000 xent               TSX1    VXE$ERROR
         5 003665   000000 011000                    NOP     0
         5 003666   003742 710000 5                  TRA     s:14113

     1273    14076    5                  CASE( 2/*@IO_LD*/ );

     1274    14077        /*E*  ERROR: VXT-E$FIMAGE_D_IO_LD_VX-0
     1275    14078              MESSAGE: Object language error. Lost data condition for
     1276    14079                       debug record type = %U1.  Attempting recovery.
     1277    14080              DESCRIPTION: Self-explanatory.
     1278    14081        */
     1279    14082                         %NUMBER( NUM1=RTYPE );

  14088  5 003667   000001 236000 6                  LDQ     1
         5 003670   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 003671   200053 630500                    EPPR0   RTYPE,,AUTO
         5 003672   200161 450500                    STP0    @SEVERITY+4,,AUTO
         5 003673   000043 236000 6                  LDQ     35
         5 003674   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 003675   000044 237000 6                  LDAQ    36
         5 003676   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 003677   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 003700   000023 631400 xsym               EPPR1   B_VECTNIL+19
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:232  
         5 003701   000000 701000 xent               TSX1    VXD$B2C
         5 003702   000000 011000                    NOP     0

     1280    14099                         %SCREAM(ERR#=E$FIMAGE_D_IO_LD_VX, LEVEL=@E$S_VX,MID="'T'",AUX=
             14099                             @E$OUOF_VX );

  14100  5 003703   000251 630400 6                  EPPR0   169
         5 003704   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 003705   000000 701000 xent               TSX1    VXE$ERROR
         5 003706   000000 011000                    NOP     0

     1281    14102                         %ALLOCATE( PTR$=Q$, TYPE=@RL_DS_2, SIZE=VX_REC_BUF_SIZE );

  14103  5 003707   000007 236000 xsym               LDQ     VX_M_ALL+7
         5 003710   000007 136000 xsym               SBLQ    VX_M_FREE+7
         5 003711   003724 604000 5                  TMI     s:14107
         5 003712   000000 116000 xsym               CMPQ    VX_REC_BUF_SIZE
         5 003713   003724 602000 5                  TNC     s:14107

  14104  5 003714   000007 236000 xsym               LDQ     VX_M_FREE+7
         5 003715   000022 736000                    QLS     18
         5 003716   000007 036000 xsym               ADLQ    VX_M_BASE_PTR+7
         5 003717   200007 756100                    STQ     Q$,,AUTO

  14105  5 003720   000007 236000 xsym               LDQ     VX_M_FREE+7
         5 003721   000000 036000 xsym               ADLQ    VX_REC_BUF_SIZE
         5 003722   000007 756000 xsym               STQ     VX_M_FREE+7

  14106  5 003723   003736 710000 5                  TRA     s:14109

  14107  5 003724   000006 236000 6                  LDQ     6
         5 003725   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 003726   000023 236000 6                  LDQ     19
         5 003727   200157 756100                    STQ     @SEVERITY+2,,AUTO
         5 003730   200007 630500                    EPPR0   Q$,,AUTO
         5 003731   200156 450500                    STP0    @SEVERITY+1,,AUTO
         5 003732   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:233  
         5 003733   000021 631400 xsym               EPPR1   B_VECTNIL+17
         5 003734   000000 701000 xent               TSX1    VXA$GET
         5 003735   000000 011000                    NOP     0

     1282    14109    5                    VX_REC_BUF_SIZE = VX_REC_BUF_SIZE + VX_REC_BUF_SIZE;

  14109  5 003736   000000 236000 xsym               LDQ     VX_REC_BUF_SIZE
         5 003737   000000 036000 xsym               ADLQ    VX_REC_BUF_SIZE
         5 003740   000000 756000 xsym               STQ     VX_REC_BUF_SIZE

     1283    14110    5                    GOTO D_READ;

  14110  5 003741   003550 710000 5                  TRA     D_READ

     1284    14111    5                  END;                     /* Do case( VX_IO_STATUS ); */

     1285    14112
     1286    14113    4                GOTO POST;

  14113  5 003742   003750 710000 5                  TRA     POST

     1287    14114    4                END;
     1288    14115    4             ELSE DO;                      /* Scream bloody murder */

     1289    14116        /*E*  ERROR: VXT-E$FIMAGE_UNKNOWN_REC_VX-0
     1290    14117              MESSAGE: Object language error: Unknown record type.
     1291    14118              DESCRIPTION: Self-explanatory.
     1292    14119        */
     1293    14120                     %SCREAM(
     1294    14121                     ERR#=E$FIMAGE_UNKNOWN_REC_VX,
     1295    14122                     LEVEL=@E$S_VX,
     1296    14123                     MID="'T'",
     1297    14124                     AUX=@E$OUOF_VX);

  14125  5 003743   000256 630400 6                  EPPR0   174
         5 003744   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 003745   000000 701000 xent               TSX1    VXE$ERROR
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:234  
         5 003746   000000 011000                    NOP     0

     1298    14127    4                END;

     1299    14128    3             END;                          /* Else do */

     1300    14129    2          END;                             /* Do forever */

  14129  5 003747   000112 710000 5                  TRA     NEXT_RECORD

     1301    14130        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:235  
     1302    14131    1   POST:
     1303    14132        /* Check if start specified */
     1304    14133    1       IF VX_OU_HEAD.START_ADDRESS.OPERAND_TYPE = 0 THEN RETURN;

  14133  5 003750   000002 236000 xsym  POST         LDQ     VX_OU_HEAD+2
         5 003751   740000 316003                    CANQ    -16384,DU
         5 003752   003754 601000 5                  TNZ     s:14135

  14133  5 003753   000000 702200 xent               TSX2  ! X66_ARET

     1305    14134        /* Yes => check if we are in the root */
     1306    14135    2       IF VX_CURR$ ~= VX_ROOT$ THEN DO;    /* Nope => error */

  14135  5 003754   000000 236000 xsym               LDQ     VX_CURR$
         5 003755   000000 116000 xsym               CMPQ    VX_ROOT$
         5 003756   003764 600000 5                  TZE     s:14149

     1307    14136        /*E*  ERROR: VXT-E$FIMAGE_START_NOT_ROOT_VX-0
     1308    14137              MESSAGE: Start address not within root; ignored.
     1309    14138              DESCRIPTION: Self-explanatory.
     1310    14139        */
     1311    14140               %SCREAM(
     1312    14141               ERR#=E$FIMAGE_START_NOT_ROOT_VX,
     1313    14142               LEVEL=@E$S_VX,
     1314    14143               MID="'T'",
     1315    14144               AUX=@E$REFOUOF_VX);

  14145  5 003757   000263 630400 6                  EPPR0   179
         5 003760   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 003761   000000 701000 xent               TSX1    VXE$ERROR
         5 003762   000000 011000                    NOP     0

     1316    14147    2          END;

  14147  5 003763   004151 710000 5                  TRA     s:14259

     1317    14148    2       ELSE DO;                            /* Here => found start at root */
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:236  

     1318    14149    3          IF VX_O.OPT.START >= 0 THEN DO;  /* This is a multiple */

  14149  5 003764   000154 235000 xsym               LDA     VX_O+108
         5 003765   003773 604000 5                  TMI     s:14163

     1319    14150        /*E*  ERROR: VXT-E$FIMAGE_MULT_START_ADR_VX-0
     1320    14151              MESSAGE: Multiple start addresses specified. First taken. Other(s) ignored.
     1321    14152              DESCRIPTION: Self-explanatory.
     1322    14153        */
     1323    14154                  %SCREAM(
     1324    14155                  ERR#=E$FIMAGE_MULT_START_ADR_VX,
     1325    14156                  LEVEL=@E$W_VX,
     1326    14157                  MID="'T'",
     1327    14158                  AUX=@E$REFOUOF_VX);

  14159  5 003766   000270 630400 6                  EPPR0   184
         5 003767   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 003770   000000 701000 xent               TSX1    VXE$ERROR
         5 003771   000000 011000                    NOP     0

     1328    14161    3             END;                          /* If VX_O.OPT.START >= 0 then do; */

  14161  5 003772   004151 710000 5                  TRA     s:14259

     1329    14162    3          ELSE DO;                         /* First start address */

     1330    14163    3             OPRD_TYPE = VX_OU_HEAD.START_ADDRESS.OPERAND_TYPE;

  14163  5 003773   000002 236000 xsym               LDQ     VX_OU_HEAD+2
         5 003774   000040 772000                    QRL     32
         5 003775   200023 756100                    STQ     OPRD_TYPE,,AUTO

     1331    14164        /*    Now do start address resolution */
     1332    14165    3             OPERAND   = VX_OU_HEAD.START_ADDRESS.OPERAND;

  14165  5 003776   000002 236000 xsym               LDQ     VX_OU_HEAD+2
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:237  
         5 003777   000022 772000                    QRL     18
         5 004000   000777 376007                    ANQ     511,DL
         5 004001   200026 756100                    STQ     OPERAND,,AUTO

     1333    14166    4             DO CASE( OPRD_TYPE );

  14166  5 004002   200023 235100                    LDA     OPRD_TYPE,,AUTO
         5 004003   000007 115007                    CMPA    7,DL
         5 004004   004006 602005 5                  TNC     s:14166+4,AL
         5 004005   004101 710000 5                  TRA     s:14217
         5 004006   004101 710000 5                  TRA     s:14217
         5 004007   004045 710000 5                  TRA     s:14183
         5 004010   004045 710000 5                  TRA     s:14183
         5 004011   004045 710000 5                  TRA     s:14183
         5 004012   004015 710000 5                  TRA     s:14168
         5 004013   004017 710000 5                  TRA     s:14171
         5 004014   004045 710000 5                  TRA     s:14183

     1334    14167    4               CASE( 4 );

     1335    14168    4                 RESULT  =   OPERAND;

  14168  5 004015   200141 756100                    STQ     RESULT,,AUTO
         5 004016   004126 710000 5                  TRA     s:14241

     1336    14169
     1337    14170    4               CASE( 5 );

     1338    14171    4                 Q$ = PINCRW( VX_SC_BASE$, OPERAND * SIZEW(VX$SC) );

  14171  5 004017   000003 402003                    MPY     3,DU
         5 004020   000000 036000 xsym               ADLQ    VX_SC_BASE$
         5 004021   200007 756100                    STQ     Q$,,AUTO

     1339    14172    4                 IF Q$ -> VX$SC.ATTR.SEGMENT

  14172  5 004022   200007 470500                    LDP0    Q$,,AUTO
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:238  
         5 004023   000000 236100                    LDQ     0,,PR0
         5 004024   000040 316003                    CANQ    32,DU
         5 004025   004033 600000 5                  TZE     s:14175

     1340    14173    4                 THEN RESULT = VX_SEGID( Q$ -> VX$SC.SEG );

  14173  5 004026   000000 236100                    LDQ     0,,PR0
         5 004027   000041 772000                    QRL     33
         5 004030   000000 235006 xsym               LDA     VX_SEGID,QL
         5 004031   200141 755100                    STA     RESULT,,AUTO
         5 004032   004126 710000 5                  TRA     s:14241

     1341    14174    4                 ELSE
     1342    14175    4                    IF Q$ -> VX$SC.TYPE = 5

  14175  5 004033   000000 236100                    LDQ     0,,PR0
         5 004034   077000 376003                    ANQ     32256,DU
         5 004035   005000 116003                    CMPQ    2560,DU
         5 004036   004042 601000 5                  TNZ     s:14177

     1343    14176    4                    THEN RESULT = BITBIN( '6003'O );

  14176  5 004037   006003 235007                    LDA     3075,DL
         5 004040   200141 755100                    STA     RESULT,,AUTO
         5 004041   004126 710000 5                  TRA     s:14241

     1344    14177    4                    ELSE RESULT = BITBIN( '6000'O );

  14177  5 004042   006000 235007                    LDA     3072,DL
         5 004043   200141 755100                    STA     RESULT,,AUTO
         5 004044   004126 710000 5                  TRA     s:14241

     1345    14178
     1346    14179    4               CASE(  1,

     1347    14180    4                               2,
     1348    14181    4                               3,
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:239  
     1349    14182    4                               6 );
     1350    14183    4                 MAP_INDEX = OPRD_MAP( OPRD_TYPE );

  14183  5 004045   000030 235005 3                  LDA     OPRD_MAP,AL
         5 004046   200055 755100                    STA     MAP_INDEX,,AUTO

     1351    14184    4                 IF OPERAND >= VX_PASS2_REF.SAT.COUNT_A(MAP_INDEX)

  14184  5 004047   000036 116005 xsym               CMPQ    VX_PASS2_REF+30,AL
         5 004050   004062 602000 5                  TNC     s:14200

     1352    14185    5                 THEN DO;

     1353    14186    5                    CALL BAD_OPERAND_RANGE( -4 );

  14186  5 004051   000055 236000 6                  LDQ     45
         5 004052   200151 756100                    STQ     MOVE_TEMP+2,,AUTO
         5 004053   004324 701000 5                  TSX1    BAD_OPERAND_RANGE
         5 004054   000000 011000                    NOP     0

     1354    14187        /*E*  ERROR: VXT-E$FIMAGE_SKIP_START_VX-0
     1355    14188              MESSAGE: Skipping start address specification.
     1356    14189              DESCRIPTION: Self-explanatory.
     1357    14190        */
     1358    14191                         %SCREAM(
     1359    14192                         ERR#=E$FIMAGE_SKIP_START_VX,
     1360    14193                         LEVEL=@E$S_VX,
     1361    14194                         MID="'T'",
     1362    14195                         AUX=@E$OUOF_VX);

  14196  5 004055   000275 630400 6                  EPPR0   189
         5 004056   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 004057   000000 701000 xent               TSX1    VXE$ERROR
         5 004060   000000 011000                    NOP     0

     1363    14198    5                    RETURN;

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:240  
  14198  5 004061   000000 702200 xent               TSX2  ! X66_ARET

     1364    14199    5                    END;
     1365    14200    4                 Q$ = PINCRW( VX_PASS2_REF.SAT.L_START_A$(MAP_INDEX),

  14200  5 004062   200055 720100                    LXL0    MAP_INDEX,,AUTO
         5 004063   000043 402010 xsym               MPY     VX_PASS2_REF+35,X0
         5 004064   000024 470410 xsym               LDP0    VX_PASS2_REF+20,X0
         5 004065   000000 631506                    EPPR1   0,QL,PR0
         5 004066   200007 451500                    STP1    Q$,,AUTO

     1366    14201    4                         OPERAND * VX_PASS2_REF.SAT.ENT_SIZE_A(MAP_INDEX) );
     1367    14202    4                 IF OPRD_TYPE = 1

  14202  5 004067   200023 235100                    LDA     OPRD_TYPE,,AUTO
         5 004070   000001 115007                    CMPA    1,DL
         5 004071   004076 601000 5                  TNZ     s:14204

     1368    14203    4                 THEN RESULT = Q$ -> VX$SC.ADDRESS;

  14203  5 004072   100000 236100                    LDQ     0,,PR1
         5 004073   777777 376007                    ANQ     -1,DL
         5 004074   200141 756100                    STQ     RESULT,,AUTO
         5 004075   004126 710000 5                  TRA     s:14241

     1369    14204    4                 ELSE RESULT = Q$ -> VXR$SAT.VALUE;

  14204  5 004076   100000 235100                    LDA     0,,PR1
         5 004077   200141 755100                    STA     RESULT,,AUTO
         5 004100   004126 710000 5                  TRA     s:14241

     1370    14205
     1371    14206    4               CASE(ELSE);

     1372    14207        /*E*  ERROR: VXT-E$FIMAGE_S_BAD_OPRD_TYPE_VX-0
     1373    14208              MESSAGE: Illegal operand type detected in start specification. Value = %U1.
     1374    14209              DESCRIPTION: Self-explanatory.
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:241  
     1375    14210        */
     1376    14211                      %NUMBER( NUM1 = OPRD_TYPE );

  14217  5 004101   000001 236000 6                  LDQ     1
         5 004102   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 004103   200023 630500                    EPPR0   OPRD_TYPE,,AUTO
         5 004104   200161 450500                    STP0    @SEVERITY+4,,AUTO
         5 004105   000043 236000 6                  LDQ     35
         5 004106   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 004107   000044 237000 6                  LDAQ    36
         5 004110   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 004111   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 004112   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 004113   000000 701000 xent               TSX1    VXD$B2C
         5 004114   000000 011000                    NOP     0

     1377    14228                      %SCREAM(
     1378    14229                      ERR#=E$FIMAGE_S_BAD_OPRD_TYPE_VX,
     1379    14230                      MID="'T'",
     1380    14231                      LEVEL=@E$S_D_VX);

  14232  5 004115   000302 630400 6                  EPPR0   194
         5 004116   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 004117   000000 701000 xent               TSX1    VXE$ERROR
         5 004120   000000 011000                    NOP     0

     1381    14234                      %SCREAM(
     1382    14235                      ERR#=E$FIMAGE_SKIP_START_VX,
     1383    14236                      LEVEL=@E$S_VX, MID="'T'", AUX=E$OUOF_VX );

  14237  5 004121   000275 630400 6                  EPPR0   189
         5 004122   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 004123   000000 701000 xent               TSX1    VXE$ERROR
         5 004124   000000 011000                    NOP     0

     1384    14239    4                 RETURN;

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:242  
  14239  5 004125   000000 702200 xent               TSX2  ! X66_ARET

     1385    14240    4               END;                        /* Do case */

     1386    14241    3             RESULT = RESULT + VX_OU_HEAD.START_ADDRESS.OFFSET;

  14241  5 004126   000002 236000 xsym               LDQ     VX_OU_HEAD+2
         5 004127   777777 376007                    ANQ     -1,DL
         5 004130   200141 036100                    ADLQ    RESULT,,AUTO
         5 004131   200141 756100                    STQ     RESULT,,AUTO

     1387    14242    3             IF ( VX_ROOT$ -> VX$NODE.ADDR_START.RDATA <= RESULT

  14242  5 004132   000000 470400 xsym               LDP0    VX_ROOT$
         5 004133   000012 116100                    CMPQ    10,,PR0
         5 004134   004137 604000 5                  TMI     s:14242+5
         5 004135   000015 116100                    CMPQ    13,,PR0
         5 004136   004143 604400 5                  TMOZ    s:14249
         5 004137   000013 116100                    CMPQ    11,,PR0
         5 004140   004145 604000 5                  TMI     s:14254
         5 004141   000016 116100                    CMPQ    14,,PR0
         5 004142   004145 605400 5                  TPNZ    s:14254

     1388    14243    3                     AND
     1389    14244    3                     VX_ROOT$ -> VX$NODE.ADDR_STOP.RDATA  >= RESULT         )
     1390    14245    3                     OR
     1391    14246    3                     ( VX_ROOT$ -> VX$NODE.ADDR_START.RPROC <= RESULT
     1392    14247    3                     AND
     1393    14248    3                     VX_ROOT$ -> VX$NODE.ADDR_STOP.RPROC >= RESULT ) THEN
     1394    14249    3                VX_O.OPT.START = RESULT;   /* Within root bounds */

  14249  5 004143   000154 756000 xsym               STQ     VX_O+108
         5 004144   004151 710000 5                  TRA     s:14259

     1395    14250    4             ELSE DO;

     1396    14251                     %SCREAM(
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:243  
     1397    14252                     ERR#=E$FIMAGE_START_NOT_ROOT_VX,
     1398    14253                     LEVEL=@E$W_VX, MID="'T'", AUX=@E$REFOUOF_VX );

  14254  5 004145   000306 630400 6                  EPPR0   198
         5 004146   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 004147   000000 701000 xent               TSX1    VXE$ERROR
         5 004150   000000 011000                    NOP     0

     1399    14256    4                END;

     1400    14257
     1401    14258    3             END;                          /* Else do; */

     1402    14259    2          END;                             /* Else do; */

  14259  5 004151   004474 710000 5                  TRA     s:14458

     1403    14260        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:244  
     1404    14261    1   TELL_PAGE_TYPE: PROC( SEVERITY );

  14261  5 004152   200154 741300       TELL_PAGE_T* STX1  ! @ERR_VALUE+2,,AUTO

     1405    14262
     1406    14263    2   DCL SEVERITY     SBIN;
     1407    14264
     1408    14265
     1409    14266    2       ERR_WORD_DISP = POFFW( P$, VX_REC_BUF_START$ );

  14266  5 004153   000000 235000 xsym               LDA     VX_REC_BUF_START$
         5 004154   000022 771000                    ARL     18
         5 004155   200156 755100                    STA     @SEVERITY+1,,AUTO
         5 004156   200006 236100                    LDQ     P$,,AUTO
         5 004157   000022 772000                    QRL     18
         5 004160   200156 136100                    SBLQ    @SEVERITY+1,,AUTO
         5 004161   200125 756100                    STQ     ERR_WORD_DISP,,AUTO

     1410    14267
     1411    14268    2       IF SEVERITY < 0 THEN ERR_LEVEL = - SEVERITY;

  14268  5 004162   200155 470500                    LDP0    @SEVERITY,,AUTO
         5 004163   000000 235100                    LDA     0,,PR0
         5 004164   004171 605000 5                  TPL     s:14269

  14268  5 004165   000000 235100                    LDA     0,,PR0
         5 004166   000000 531000                    NEG     0
         5 004167   200122 755100                    STA     ERR_LEVEL,,AUTO
         5 004170   004172 710000 5                  TRA     s:14271

     1412    14269    2       ELSE ERR_LEVEL = SEVERITY;

  14269  5 004171   200122 755100                    STA     ERR_LEVEL,,AUTO

     1413    14270
     1414    14271    3       IF RTYPE = 10 THEN DO;

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:245  
  14271  5 004172   200053 235100                    LDA     RTYPE,,AUTO
         5 004173   000012 115007                    CMPA    10,DL
         5 004174   004210 601000 5                  TNZ     s:14307

     1415    14272        /*E*  ERROR: VXT-E$FIMAGE_STYPE_KOFSET_VX-0
     1416    14273              MESSAGE: In record type 10 (sub-type %U1). Key offset = %U2 (octal).
     1417    14274                       Word displacement into record = %U3 (octal).
     1418    14275        */
     1419    14276               %NUMBER( NUM1="VX_OK.KSTYPE", NUM2="VX_OK.KOFSET", BASE2=8 );

  14282  5 004175   000312 630400 6                  EPPR0   202
         5 004176   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 004177   000000 701000 xent               TSX1    VXD$B2C
         5 004200   000000 011000                    NOP     0

  14286  5 004201   000317 630400 6                  EPPR0   207
         5 004202   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 004203   000000 701000 xent               TSX1    VXD$B2C
         5 004204   000000 011000                    NOP     0

     1420    14293    3          ERR_NUM = 1741;

  14293  5 004205   003315 235007                    LDA     1741,DL
         5 004206   200121 755100                    STA     ERR_NUM,,AUTO

     1421    14294    3          END;

  14294  5 004207   004242 710000 5                  TRA     s:14335

     1422    14295    3       ELSE DO;

     1423    14296        /*E*  ERROR: VXT-E$FIMAGE_TYPE_PAGE_VX-0
     1424    14297              MESSAGE: The error occured in page %U1 of record type %U2.
     1425    14298                       Word displacement into page = %U3 (octal).
     1426    14299              DESCRIPTION: Self-explanatory.
     1427    14300        */
     1428    14301               %NUMBER( NUM1=PAGE#, NUM2=RTYPE );
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:246  

  14307  5 004210   000001 236000 6                  LDQ     1
         5 004211   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 004212   200133 631500                    EPPR1   PAGE#,,AUTO
         5 004213   200161 451500                    STP1    @SEVERITY+4,,AUTO
         5 004214   000043 236000 6                  LDQ     35
         5 004215   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 004216   000044 237000 6                  LDAQ    36
         5 004217   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 004220   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 004221   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 004222   000000 701000 xent               TSX1    VXD$B2C
         5 004223   000000 011000                    NOP     0

  14311  5 004224   000001 236000 6                  LDQ     1
         5 004225   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 004226   200053 630500                    EPPR0   RTYPE,,AUTO
         5 004227   200161 450500                    STP0    @SEVERITY+4,,AUTO
         5 004230   000047 236000 6                  LDQ     39
         5 004231   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 004232   000050 237000 6                  LDAQ    40
         5 004233   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 004234   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 004235   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 004236   000000 701000 xent               TSX1    VXD$B2C
         5 004237   000000 011000                    NOP     0

     1429    14318    3          ERR_NUM = 1703;

  14318  5 004240   003247 235007                    LDA     1703,DL
         5 004241   200121 755100                    STA     ERR_NUM,,AUTO

     1430    14319    3          END;

     1431    14320
     1432    14321            %NUMBER( NUM3=ERR_WORD_DISP, BASE3=8 );

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:247  
  14335  5 004242   000323 236000 6                  LDQ     211
         5 004243   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 004244   200125 630500                    EPPR0   ERR_WORD_DISP,,AUTO
         5 004245   200161 450500                    STP0    @SEVERITY+4,,AUTO
         5 004246   000040 236000 6                  LDQ     32
         5 004247   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 004250   000324 237000 6                  LDAQ    212
         5 004251   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 004252   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 004253   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 004254   000000 701000 xent               TSX1    VXD$B2C
         5 004255   000000 011000                    NOP     0

     1433    14338
     1434    14339            %SCREAM( ERR#=ERR_NUM, MID="'T'", LEVEL=ERR_LEVEL, AUX=E$OUOF_VX );

  14340  5 004256   000014 237000 6                  LDAQ    12
         5 004257   200160 757100                    STAQ    @SEVERITY+3,,AUTO
         5 004260   200122 630500                    EPPR0   ERR_LEVEL,,AUTO
         5 004261   200157 450500                    STP0    @SEVERITY+2,,AUTO
         5 004262   200121 631500                    EPPR1   ERR_NUM,,AUTO
         5 004263   200156 451500                    STP1    @SEVERITY+1,,AUTO
         5 004264   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 004265   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 004266   000000 701000 xent               TSX1    VXE$ERROR
         5 004267   000000 011000                    NOP     0

     1435    14342
     1436    14343
     1437    14344    2   END TELL_PAGE_TYPE;

  14344  5 004270   200154 221300                    LDX1  ! @ERR_VALUE+2,,AUTO
         5 004271   000001 702211                    TSX2  ! 1,X1

     1438    14345
     1439    14346        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:248  
     1440    14347    1   REPORT_BAD_ADDRESS_GENERATION: PROC( ERR_VALUE );

  14347  5 004272   200150 741300       REPORT_BAD_* STX1  ! MOVE_TEMP+1,,AUTO

     1441    14348
     1442    14349    2   DCL ERR_VALUE     UBIN;
     1443    14350
     1444    14351        /*E*  ERROR: VXT-E$FIMAGE_BAD_ADR_VX-0
     1445    14352              MESSAGE: Object language error.  Address generation extends past boundary
     1446    14353                       for section number %U1.  Displacement/size = %U2.
     1447    14354              DESCRIPTION: Self-explanatory.
     1448    14355        */
     1449    14356
     1450    14357              %NUMBER( NUM1="VX_OK.KSECT#",  NUM2=ERR_VALUE );

  14363  5 004273   000326 630400 6                  EPPR0   214
         5 004274   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 004275   000000 701000 xent               TSX1    VXD$B2C
         5 004276   000000 011000                    NOP     0

  14367  5 004277   000001 236000 6                  LDQ     1
         5 004300   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 004301   200151 236100                    LDQ     @ERR_VALUE,,AUTO
         5 004302   000047 235000 6                  LDA     39
         5 004303   200160 757100                    STAQ    @SEVERITY+3,,AUTO
         5 004304   000050 237000 6                  LDAQ    40
         5 004305   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 004306   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 004307   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 004310   000000 701000 xent               TSX1    VXD$B2C
         5 004311   000000 011000                    NOP     0

     1451    14374
     1452    14375              %SCREAM( ERR#=E$FIMAGE_BAD_ADR_VX, MID="'T'", LEVEL=@E$F_D_VX );

  14376  5 004312   000333 630400 6                  EPPR0   219
         5 004313   000022 631400 xsym               EPPR1   B_VECTNIL+18
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:249  
         5 004314   000000 701000 xent               TSX1    VXE$ERROR
         5 004315   000000 011000                    NOP     0

     1453    14378
     1454    14379    2       CALL TELL_PAGE_TYPE( -4 );

  14379  5 004316   000055 236000 6                  LDQ     45
         5 004317   200155 756100                    STQ     @SEVERITY,,AUTO
         5 004320   004152 701000 5                  TSX1    TELL_PAGE_TYPE
         5 004321   000000 011000                    NOP     0

     1455    14380
     1456    14381    2   END REPORT_BAD_ADDRESS_GENERATION;

  14381  5 004322   200150 221300                    LDX1  ! MOVE_TEMP+1,,AUTO
         5 004323   000001 702211                    TSX2  ! 1,X1

     1457    14382
     1458    14383        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:250  
     1459    14384    1   BAD_OPERAND_RANGE: PROC( SEVERITY );

  14384  5 004324   200150 741300       BAD_OPERAND* STX1  ! MOVE_TEMP+1,,AUTO

     1460    14385
     1461    14386    2   DCL SEVERITY      SBIN;
     1462    14387
     1463    14388        /*E*  ERROR: VXT-E$FIMAGE_OPRD_RANGE_VX-0
     1464    14389              MESSAGE: Operand number is out of range for operand type = %U1.
     1465    14390                       Permissible range: 0 - %U2.  Attempted access = %U3.
     1466    14391              DESCRIPTION: Self-explanatory.
     1467    14392        */
     1468    14393
     1469    14394    2       MAP_INDEX = VX_PASS2_REF.SAT.COUNT_A(MAP_INDEX) - 1;

  14394  5 004325   200055 720100                    LXL0    MAP_INDEX,,AUTO
         5 004326   000036 235010 xsym               LDA     VX_PASS2_REF+30,X0
         5 004327   000001 135007                    SBLA    1,DL
         5 004330   200055 755100                    STA     MAP_INDEX,,AUTO

     1470    14395
     1471    14396            %NUMBER( NUM1=OPRD_TYPE, NUM2=MAP_INDEX, NUM3=OPERAND );

  14402  5 004331   000001 236000 6                  LDQ     1
         5 004332   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 004333   200023 630500                    EPPR0   OPRD_TYPE,,AUTO
         5 004334   200161 450500                    STP0    @SEVERITY+4,,AUTO
         5 004335   000043 236000 6                  LDQ     35
         5 004336   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 004337   000044 237000 6                  LDAQ    36
         5 004340   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 004341   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 004342   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 004343   000000 701000 xent               TSX1    VXD$B2C
         5 004344   000000 011000                    NOP     0

  14406  5 004345   000001 236000 6                  LDQ     1
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:251  
         5 004346   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 004347   200055 630500                    EPPR0   MAP_INDEX,,AUTO
         5 004350   200161 450500                    STP0    @SEVERITY+4,,AUTO
         5 004351   000047 236000 6                  LDQ     39
         5 004352   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 004353   000050 237000 6                  LDAQ    40
         5 004354   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 004355   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 004356   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 004357   000000 701000 xent               TSX1    VXD$B2C
         5 004360   000000 011000                    NOP     0

  14410  5 004361   000001 236000 6                  LDQ     1
         5 004362   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 004363   200026 630500                    EPPR0   OPERAND,,AUTO
         5 004364   200161 450500                    STP0    @SEVERITY+4,,AUTO
         5 004365   000040 236000 6                  LDQ     32
         5 004366   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 004367   000324 237000 6                  LDAQ    212
         5 004370   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 004371   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 004372   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 004373   000000 701000 xent               TSX1    VXD$B2C
         5 004374   000000 011000                    NOP     0

     1472    14413
     1473    14414            %SCREAM( ERR#=E$FIMAGE_OPRD_RANGE_VX, LEVEL=SEVERITY, MID="'T'" );

  14415  5 004375   000056 237000 6                  LDAQ    46
         5 004376   200160 757100                    STAQ    @SEVERITY+3,,AUTO
         5 004377   200151 236100                    LDQ     @SEVERITY,,AUTO
         5 004400   000340 235000 6                  LDA     224
         5 004401   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 004402   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 004403   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 004404   000000 701000 xent               TSX1    VXE$ERROR
         5 004405   000000 011000                    NOP     0
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:252  

     1474    14417
     1475    14418    2       CALL TELL_PAGE_TYPE( SEVERITY );

  14418  5 004406   200151 236100                    LDQ     @SEVERITY,,AUTO
         5 004407   200155 756100                    STQ     @SEVERITY,,AUTO
         5 004410   004152 701000 5                  TSX1    TELL_PAGE_TYPE
         5 004411   000000 011000                    NOP     0

     1476    14419
     1477    14420    2   END BAD_OPERAND_RANGE;

  14420  5 004412   200150 221300                    LDX1  ! MOVE_TEMP+1,,AUTO
         5 004413   000001 702211                    TSX2  ! 1,X1

     1478    14421
     1479    14422        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:253  
     1480    14423    1   REPORT_BAD_RELOC_VALUE: PROC( ERR_NUM, ERR_VALUE );

  14423  5 004414   200150 741300       REPORT_BAD_* STX1  ! MOVE_TEMP+1,,AUTO

     1481    14424
     1482    14425    2   DCL ERR_NUM       UBIN;
     1483    14426    2   DCL ERR_VALUE     UBIN;
     1484    14427
     1485    14428    2       IF P$ -> R1.OPNDTYP = 0 THEN ERR_FORM = 2;

  14428  5 004415   200006 470500                    LDP0    P$,,AUTO
         5 004416   000000 236100                    LDQ     0,,PR0
         5 004417   740000 316003                    CANQ    -16384,DU
         5 004420   004424 601000 5                  TNZ     s:14429

  14428  5 004421   000002 235007                    LDA     2,DL
         5 004422   200124 755100                    STA     ERR_FORM,,AUTO
         5 004423   004426 710000 5                  TRA     s:14437

     1486    14429    2       ELSE ERR_FORM = 1;

  14429  5 004424   000001 235007                    LDA     1,DL
         5 004425   200124 755100                    STA     ERR_FORM,,AUTO

     1487    14430
     1488    14431            %NUMBER( NUM1=ERR_FORM, NUM2=ERR_VALUE );

  14437  5 004426   000001 236000 6                  LDQ     1
         5 004427   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 004430   200124 631500                    EPPR1   ERR_FORM,,AUTO
         5 004431   200161 451500                    STP1    @SEVERITY+4,,AUTO
         5 004432   000043 236000 6                  LDQ     35
         5 004433   200160 756100                    STQ     @SEVERITY+3,,AUTO
         5 004434   000044 237000 6                  LDAQ    36
         5 004435   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 004436   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 004437   000023 631400 xsym               EPPR1   B_VECTNIL+19
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:254  
         5 004440   000000 701000 xent               TSX1    VXD$B2C
         5 004441   000000 011000                    NOP     0

  14441  5 004442   000001 236000 6                  LDQ     1
         5 004443   200162 756100                    STQ     @SEVERITY+5,,AUTO
         5 004444   200152 236100                    LDQ     @ERR_VALUE,,AUTO
         5 004445   000047 235000 6                  LDA     39
         5 004446   200160 757100                    STAQ    @SEVERITY+3,,AUTO
         5 004447   000050 237000 6                  LDAQ    40
         5 004450   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 004451   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 004452   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 004453   000000 701000 xent               TSX1    VXD$B2C
         5 004454   000000 011000                    NOP     0

     1489    14448
     1490    14449            %SCREAM( ERR#=ERR_NUM, MID="'T'", LEVEL=@E$F_D_VX );

  14450  5 004455   000056 237000 6                  LDAQ    46
         5 004456   200160 757100                    STAQ    @SEVERITY+3,,AUTO
         5 004457   000055 236000 6                  LDQ     45
         5 004460   200151 235100                    LDA     @ERR_NUM,,AUTO
         5 004461   200156 757100                    STAQ    @SEVERITY+1,,AUTO
         5 004462   200156 630500                    EPPR0   @SEVERITY+1,,AUTO
         5 004463   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 004464   000000 701000 xent               TSX1    VXE$ERROR
         5 004465   000000 011000                    NOP     0

     1491    14452
     1492    14453    2       CALL TELL_PAGE_TYPE( -4 );

  14453  5 004466   000055 236000 6                  LDQ     45
         5 004467   200155 756100                    STQ     @SEVERITY,,AUTO
         5 004470   004152 701000 5                  TSX1    TELL_PAGE_TYPE
         5 004471   000000 011000                    NOP     0

     1493    14454
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:255  
     1494    14455    2   END REPORT_BAD_RELOC_VALUE;

  14455  5 004472   200150 221300                    LDX1  ! MOVE_TEMP+1,,AUTO
         5 004473   000001 702211                    TSX2  ! 1,X1

     1495    14456
     1496    14457        %EJECT;
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:256  
     1497    14458    1   END VXT$FIMAGE;

  14458  5 004474   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:257  
--  Include file information  --

   B_SEGIDS_C.:E05TOU  is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXT$FIMAGE.
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:258  

 **** Variables and constants ****

  ****  Section 002  Data  VXT$FIMAGE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 BREF_OVERFLOW

  ****  Section 003 RoData VXT$FIMAGE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   103-0-0/w UBIN        r     1 DEBUG_MAP(0:3)
   110-0-0/d STRC(360)   r     1 FPT_PRECORD
    30-0-0/w UBIN        r     1 OPRD_MAP(0:6)
     0-0-0/w UBIN        r     1 OP_TRANSFER_A(0:23)
    37-0-0/w SBIN        r     1 SHF_CON(0:35)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   151-0-0/w PTR         r     1 @ERR_NUM                 151-0-0/w PTR         r     1 @ERR_VALUE
   152-0-0/w PTR         r     1 @ERR_VALUE               155-0-0/w PTR         r     1 @SEVERITY
   151-0-0/w PTR         r     1 @SEVERITY                 43-0-0/w UBIN        r     1 ADR
    13-0-0/w PTR         r     1 ADR$                      44-0-0/w UBIN        r     1 ADR_SPAN_LAST
   136-0-0/w PTR         r     1 BIT_ADR$                  15-0-0/w PTR         r     1 BREF$
    16-0-0/w PTR         r     1 BREF_STOP$                40-0-0/w UBIN        r     1 BUF_TYPE
     5-0-0/w BIT         r     1 CHECK_OVERLAY            131-0-0/w UBIN        r     1 DEPTH_NODE#
     4-0-0/w BIT         r     1 DESCENDANT                27-0-0/w UBIN        r     1 DISP
   124-0-0/w UBIN        r     1 ERR_FORM                 122-0-0/w SBIN        r     1 ERR_LEVEL
   121-0-0/w UBIN        r     1 ERR_NUM                   *0-0-0/w UBIN        r     1 ERR_NUM
   123-0-0/w UBIN        r     1 ERR_VALUE                 *0-0-0/w UBIN        r     1 ERR_VALUE
    *0-0-0/w UBIN        r     1 ERR_VALUE                125-0-0/w UBIN        r     1 ERR_WORD_DISP
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:259  
    34-0-0/w UBIN        r     1 EVAL_OPRT                 31-0-0/w SBIN        r     1 E_BIT
    33-0-0/w UBIN        r     1 E_BIT_MOD                  3-0-0/w BIT         r     1 FIRST
    52-0-0/w UBIN        r     1 FIRST_ADR_SETUP           12-0-0/w PTR         r     1 FIRST_ADR_SETUP$
   135-0-0/w SBIN        r     1 FORM2_COUNT               17-0-0/w UBIN        r     1 I
    42-0-0/w UBIN        r     1 INC                       36-0-0/w UBIN        r     1 INIT_ADR
   142-0-0/w SBIN        r     1 INTER_RESULT              54-0-0/w SBIN        r     1 IO_SIZEW
    20-0-0/w UBIN        r     1 J                         21-0-0/w UBIN        r     1 K
   132-0-0/w SBIN        r     1 LAST_ADR_SETUP            55-0-0/w UBIN        r     1 MAP_INDEX
   145-0-0/w UBIN        r     1 MOVE_ADR_TEMP            143-0-0/w SBIN        r     1 MOVE_PAGE_REMAIN
   146-0-0/w PTR         r     1 MOVE_SRC$                144-0-0/w PTR         r     1 MOVE_TARGET$
   147-0-0/w UBIN        r     1 MOVE_TEMP                 37-0-0/w UBIN        r     1 NODE_INX
    26-0-0/w UBIN        r     1 OPERAND                   23-0-0/w UBIN        r     1 OPRD_TYPE
   126-0-0/w UBIN        r     1 OP_CODE                  127-0-0/w UBIN        r     1 OP_INX
     6-0-0/w PTR         r     1 P$                        60-0-0/w UBIN        r     1 PAGE(0:15)
   133-0-0/w SBIN        r     1 PAGE#                     57-0-0/w UBIN        r     1 PAGE_SIZE
    56-0-0/w UBIN        r     1 PSIZE                      7-0-0/w PTR         r     1 Q$
    14-0-0/w PTR         r     1 REC_BUF_STOP$             35-0-0/w UBIN        r     1 RELOC_OPRT
   134-0-0/w SBIN        r     1 REPEAT_COUNT             141-0-0/w SBIN        r     1 RESULT
    53-0-0/w UBIN        r     1 RTYPE                     11-0-0/w PTR         r     1 SC_CURR$
    50-0-0/w UBIN        r     1 SC_LAST_ADR               51-0-0/w UBIN        r     1 SC_SIZE
    47-0-0/w UBIN        r     1 SECT#                     46-0-0/w UBIN        r     1 SECT_COUNT
    41-0-0/w UBIN        r     1 SETUP_SIZE                *0-0-0/w SBIN        r     1 SEVERITY
    *0-0-0/w SBIN        r     1 SEVERITY                  21-0-0/w SBIN        r     1 SK
   130-0-0/w UBIN        r     1 SKELETON                  30-0-0/w SBIN        r     1 S_BIT
    32-0-0/w UBIN        r     1 S_BIT_MOD                137-0-0/w SBIN        r     1 TEMP_RESULT
   140-0-0/w PTR         r     1 TEMP_RESULT$             100-0-0/w SBIN        r     1 TOTAL(0:15)
   120-0-0/w SBIN        r     1 TSIZE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 VX_BREF_ADR                0-0-0/w UBIN        r     1 VX_BREF_DEFINITION
     0-0-0/w UBIN        r     1 VX_BREF_INSTANCE           0-0-0/w UBIN        r     1 VX_BREF_SIZE
     0-0-0/w PTR         r     1 VX_BREF_START$             0-0-0/w PTR         r     1 VX_CURR$
     0-0-0/w UBIN        r     1 VX_DCB_SIZEW               0-0-0/w STRC(720)   r     1 VX_EFIELD1
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:260  
     0-0-0/w STRC(720)   r     1 VX_EFIELD2                 0-0-0/w STRC(720)   r     1 VX_EFIELD3
     0-0-0/w UBIN        r     1 VX_ERR_SEV                 0-0-0/w SBIN        r     1 VX_IO_SIZEW
     0-0-0/w SBIN        r     1 VX_IO_STATUS
     0-0-0/w SBIN        r     1 VX_M_ALL(0:8)
     0-0-0/w PTR         r     1 VX_M_BASE_PTR(0:8)
     0-0-0/w SBIN        r     1 VX_M_FREE(0:8)
     0-0-0/w PTR         r     1 VX_NEXT_BREF$              0-0-0/w STRC(4572)  r     1 VX_O
     0-0-0/w STRC(1476)  r     1 VX_OK                      0-0-0/w STRC(1044)  r     1 VX_OU_HEAD
     0-0-0/w STRC(4617)  r     1 VX_O_KEY_BUF               0-0-0/w STRC(2340)  r     1 VX_PASS2_REF
     0-0-0/b BIT         r     1 VX_PRIMARY_ENTDEF_GOT
     0-0-0/w UBIN        r     1 VX_REC_BUF_SIZE            0-0-0/w PTR         r     1 VX_REC_BUF_START$
     0-0-0/w SBIN        r     1 VX_REC_SIZE_A(0:15)
     0-0-0/w PTR         r     1 VX_ROOT$                   0-0-0/w PTR         r     1 VX_SC_BASE$
     0-0-0/w PTR         r     1 VX_SC_PASS2$
     0-0-0/w UBIN        r     1 VX_SEGID(0:5)
     0-0-0/w UBIN        r     1 VX_SOURCE_COUNT            0-0-0/w UBIN        r     1 VX_TARGET_COUNT
     0-0-0/w STRC        r     1 VX_TSX0_OVERLAY

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(18)    r     1 B$DNAME                    0-0-0/w STRC(108)   r     1 B$EXST
     0-0-0/w STRC(72)    r     1 B$INTNTRY                  0-0-0/w STRC(144)   r     1 B$LBNTRY0
     0-0-0/w STRC(180)   r     1 B$VREBL                    0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0/w STRC        r     1 FORM1$FW                   0-0-0/w STRC        r     1 FORM1$LH
     0-0-0/w STRC        r     1 FORM1$RH                   0-0-0/w STRC        r     1 FORM1$SEGID
     0-0-0/w STRC        r     1 FORM1$Y                    0-0-0/b ABIT        r     1 FORM2$2
     0-0-0N  NULL        r     1 M$OF                       0-0-0/w STRC        r     1 R1
     0-0-0/w STRC(108)   r     1 R2                         0-0-0/b ABIT        r     1 TEMP$RESULT
     0-0-0/w BIT         r     1 VX$BIT_A(0:0)
     0-0-0/w STRC(72)    r     1 VX$BREF
     0-0-0/h UBIN(18)    r     1 VX$HALF_A(0:0)
     0-0-0/w STRC(108)   r     1 VX$LLIST_SC                0-0-0/w STRC(3672)  r     1 VX$NODE
     0-0-0/w STRC(108)   r     1 VX$SC                      0-0-0/w ACHR        r     1 VX$SOURCE_C
     0-0-0/w ACHR        r     1 VX$TARGET_C
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:261  
     0-0-0/w UBIN        r     1 VX$WORD_A(0:0)
     0-0-0/w STRC(72)    r     1 VXR$SAT


   Procedure VXT$FIMAGE requires 2365 words for executable code.
   Procedure VXT$FIMAGE requires 116 words of local(AUTO) storage.

    No errors detected in file VXT$FIMAGE.:E05TSI    .
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:262  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:263  
          MINI XREF LISTING

ADR
     11966**DCL     12965<<ASSIGN  12966<>CALL    13191<<ASSIGN  13198>>ASSIGN  13205>>IF      13209>>ASSIGN
     13211<>CALL    13216>>ASSIGN  13219>>ASSIGN  13263<<ASSIGN  13263>>ASSIGN  13264>>ASSIGN  13280<<ASSIGN
     13281>>IF      13286>>IF      13286>>IF      13290>>ASSIGN  13292<>CALL    13297>>ASSIGN  13300>>ASSIGN
ADR$
     11917**DCL     12144--IMP-PTR 12148--IMP-PTR 12152--IMP-PTR 12156--IMP-PTR 12160--IMP-PTR 13219<<ASSIGN
     13220>>ASSIGN  13300<<ASSIGN  13347>>ASSIGN  13347>>ASSIGN  13348>>ASSIGN  13348>>ASSIGN  13353>>ASSIGN
     13353>>ASSIGN  13354>>ASSIGN  13354>>ASSIGN  13358>>ASSIGN  13358>>ASSIGN  13359>>ASSIGN  13359>>ASSIGN
     13363>>ASSIGN  13363>>ASSIGN  13364>>ASSIGN  13364>>ASSIGN  13369>>ASSIGN  13369>>ASSIGN  13370>>ASSIGN
     13370>>ASSIGN  13388>>ASSIGN  13392>>ASSIGN  13397>>ASSIGN  13446>>ASSIGN
ADR_SPAN_LAST
     11967**DCL     13192<<ASSIGN  13205>>IF      13264<<ASSIGN
B$DNAME.COUNT
     11400**DCL     11407--IMP-SIZ 12951>>ASSIGN  12952>>ASSIGN
B$DNAME.TEXT
     11407**DCL     12952>>ASSIGN
B$EXST
     12374**DCL     13702--ASSIGN
B$EXST.ISADDR
     12389**DCL     13764<<ASSIGN
B$EXST.OU
     12383**DCL     12389--REDEF
B$EXST.OU.OFFSET
     12387**DCL     13735>>ASSIGN
B$EXST.OU.SECTNUM
     12384**DCL     13705>>ASSIGN
B$INTNTRY
     12316**DCL     13699--ASSIGN
B$INTNTRY.OU
     12320**DCL     12327--REDEF
B$LBNTRY0.FRAME
     12311**DCL     13557>>IF      13632<<ASSIGN
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:264  
B$LBNTRY0.NO_AUTO
     12306**DCL     12311--REDEF
B$LBNTRY0.NO_AUTO.OFFSET
     12310**DCL     13561>>ASSIGN
B$LBNTRY0.NO_AUTO.OPERAND
     12309**DCL     13560>>ASSIGN
B$LBNTRY0.NO_AUTO.OPNDTYP
     12307**DCL     13559>>ASSIGN
B$LBNTRY0.VERSION
     12295**DCL     12297--REDEF
B$VREBL
     12481**DCL     13950--ASSIGN  13954--ASSIGN
B$VREBL.ADDRTYP
     12508**DCL     13773>>ASSIGN
B$VREBL.ADR
     12482**DCL     12494--REDEF
B$VREBL.ADR.W
     12488**DCL     13777>>ASSIGN  13864<<ASSIGN
B$VREBL.DATATYP
     12532**DCL     13951>>DOWHILE 13951>>DOWHILE
B$VREBL.IMPTR
     12599**DCL     13782>>ASSIGN  13785>>ASSIGN  13865<<ASSIGN  13872<<ASSIGN  13883<<ASSIGN
B$VREBL.OPERAND
     12612**DCL     13788>>ASSIGN  13868>>ASSIGN  13874<<ASSIGN  13877<<ASSIGN  13878<<ASSIGN  13884<<ASSIGN
B$VREBL.OPNDTYP
     12591**DCL     13787>>ASSIGN  13867>>ASSIGN
BAD_OPERAND_RANGE
     14384**PROC    13050--CALL    13321--CALL    13583--CALL    13810--CALL    14186--CALL
BIT_ADR$
     12167**DCL     12165--IMP-PTR 13220<<ASSIGN  13223>>ASSIGN  13259>>ASSIGN
BREF$
     11919**DCL     13414<<ASSIGN  13416>>DOWHILE 13417>>IF      13419<<ASSIGN  13419>>ASSIGN  13446>>ASSIGN
BREF_OVERFLOW
     11992**DCL     13424>>IF      13430<<ASSIGN
BREF_STOP$
     11920**DCL     13415<<ASSIGN  13416>>DOWHILE
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:265  
BUF_TYPE
     11963**DCL     12935<<ASSIGN  12936<<ASSIGN  12940<<ASSIGN  12941<<ASSIGN  12968<<ASSIGN  12999<>CALL
     13211<>CALL    13292<>CALL
CHECK_OVERLAY
     11853**DCL     13019<<ASSIGN  13197<<ASSIGN  13349<<ASSIGN  13365<<ASSIGN  13386>>IF
DEBUG_MAP
     12221**DCL     13635>>ASSIGN
DEPTH_NODE#
     11996**DCL     13060<<ASSIGN  13331<<ASSIGN  13398>>IF      13412>>ASSIGN
DESCENDANT
     11852**DCL     13018<<ASSIGN  13059<<ASSIGN  13330<<ASSIGN  13386>>IF
DISP
     11951**DCL     13561<<ASSIGN  13632>>ASSIGN  13731<<ASSIGN  13735<<ASSIGN  13736>>IF      13747<>CALL
     13761<<ASSIGN  13764>>ASSIGN  13777<<ASSIGN  13780<<ASSIGN  13785<<ASSIGN  13864>>ASSIGN  13865>>ASSIGN
D_INC_P
     13764**LABEL   13732--GOTO
D_READ
     14004**LABEL   14110--GOTO
ERR_FORM
     11989**DCL     14428<<ASSIGN  14429<<ASSIGN  14437<>CALL
ERR_LEVEL
     11987**DCL     13153<<ASSIGN  13158<>CALL    13185<>CALL    13187<>CALL    14268<<ASSIGN  14269<<ASSIGN
     14340<>CALL
ERR_NUM
     11986**DCL     13252<<ASSIGN  13254<>CALL    13379<<ASSIGN  13381<>CALL    14293<<ASSIGN  14318<<ASSIGN
     14340<>CALL
ERR_NUM IN PROCEDURE REPORT_BAD_RELOC_VALUE
     14425**DCL     14423--PROC    14450<>CALL
ERR_VALUE
     11988**DCL     13198<<ASSIGN  13199>>IF      13200<>CALL    13253<<ASSIGN  13254<>CALL    13282<<ASSIGN
     13283<>CALL    13380<<ASSIGN  13381<>CALL
ERR_VALUE IN PROCEDURE REPORT_BAD_ADDRESS_GENERATION
     14349**DCL     14347--PROC    14367<>CALL
ERR_VALUE IN PROCEDURE REPORT_BAD_RELOC_VALUE
     14426**DCL     14423--PROC    14441<>CALL
ERR_WORD_DISP
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:266  
     11990**DCL     14266<<ASSIGN  14335<>CALL
ES_CONTINUE
     13704**LABEL   13700--GOTO
EVAL_OPRT
     11956**DCL     13026<<ASSIGN  13071>>IF      13072>>DOCASE  13130<>CALL
E_BIT
     11953**DCL     13145<<ASSIGN  13146>>ASSIGN  13174<>CALL    13192>>ASSIGN  13194>>ASSIGN  13262<<ASSIGN
     13264>>ASSIGN  13266>>ASSIGN
E_BIT_MOD
     11955**DCL     13194<<ASSIGN  13196>>IF      13262>>ASSIGN  13266<<ASSIGN
F$DCB.ACTPOS
     12718**DCL     12718--REDEF
F$DCB.ARS#
     12692**DCL     12692--REDEF
F$DCB.ATTR
     12711**DCL     12712--REDEF
F$DCB.BORROW
     12726**DCL     12726--REDEF   12726--REDEF   12726--REDEF
F$DCB.DCBNAME.L
     12740**DCL     12740--IMP-SIZ
F$DCB.DCBNAME.S
     12740**DCL     12967<<ASSIGN
F$DCB.EOMCHAR#
     12696**DCL     12696--REDEF
F$DCB.FLDID
     12721**DCL     12721--REDEF
F$DCB.FORM$
     12715**DCL     12715--REDEF
F$DCB.FSECT
     12731**DCL     12731--REDEF
F$DCB.FSN#
     12708**DCL     12708--REDEF   12708--REDEF   12709--REDEF
F$DCB.HEADER$
     12714**DCL     12714--REDEF
F$DCB.IXTNSIZE#
     12712**DCL     12712--REDEF
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:267  
F$DCB.LASTSTA$
     12701**DCL     12701--REDEF
F$DCB.LVL
     12727**DCL     12727--REDEF
F$DCB.NAME#.C
     12702**DCL     12702--REDEF
F$DCB.NOEOF
     12724**DCL     12724--REDEF
F$DCB.NRECS#
     12713**DCL     12713--REDEF
F$DCB.NRECX
     12732**DCL     12732--REDEF
F$DCB.OHDR
     12724**DCL     12724--REDEF
F$DCB.ORG#
     12707**DCL     12707--REDEF
F$DCB.PRECNO
     12730**DCL     12730--REDEF
F$DCB.RCSZ
     12736**DCL     12736--REDEF
F$DCB.RES#
     12703**DCL     12703--REDEF
F$DCB.SETX
     12715**DCL     12715--REDEF
F$DCB.TAB$
     12715**DCL     12715--REDEF
F$DCB.TDA
     12729**DCL     12730--REDEF
F$DCB.WSN#
     12703**DCL     12703--REDEF
FIRST
     11851**DCL     12749<<ASSIGN  12754<<ASSIGN  12797>>IF
FIRST_ADR_SETUP
     11973**DCL     13205>>IF      13216<<ASSIGN  13217>>ASSIGN  13219>>ASSIGN  13286>>IF      13297<<ASSIGN
     13298>>ASSIGN  13300>>ASSIGN
FIRST_ADR_SETUP$
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:268  
     11916**DCL     12966<>CALL    12967>>ASSIGN  13211<>CALL    13219>>ASSIGN  13292<>CALL    13300>>ASSIGN
FIRST_READ
     12751**LABEL   12797--GOTO
FORM1$FW.FW
     12161**DCL     13369<<ASSIGN  13369>>ASSIGN  13370<<ASSIGN  13370>>ASSIGN
FORM1$LH.LH
     12145**DCL     13347<<ASSIGN  13347>>ASSIGN  13348<<ASSIGN  13348>>ASSIGN
FORM1$RH.RH
     12150**DCL     13353<<ASSIGN  13353>>ASSIGN  13354<<ASSIGN  13354>>ASSIGN
FORM1$SEGID.SEGID
     12154**DCL     13358<<ASSIGN  13358>>ASSIGN  13359<<ASSIGN  13359>>ASSIGN
FORM1$Y.Y
     12158**DCL     13363<<ASSIGN  13363>>ASSIGN  13364<<ASSIGN  13364>>ASSIGN
FORM2$2
     12165**DCL     13223>>ASSIGN  13259<<ASSIGN
FORM2_COUNT
     12166**DCL     12165--IMP-SIZ 12171--IMP-SIZ 13146<<ASSIGN  13147>>IF      13147>>IF      13198>>ASSIGN
     13221>>ASSIGN  13223>>ASSIGN  13223>>ASSIGN  13239>>ASSIGN  13259>>ASSIGN  13259>>ASSIGN  13261>>ASSIGN
     13262>>ASSIGN
FPT_PRECORD
     12266**DCL     12798<>CALL
FPT_PRECORD.V
     12268**DCL     12266--DCLINIT
I
     11938**DCL     11939--REDEF   13086<<ASSIGN  13087>>IF      13100>>ASSIGN  13103<<ASSIGN  13104>>IF
     13117>>ASSIGN  13634<<DOINDEX 13639>>ASSIGN  13640>>ASSIGN
INC
     11965**DCL     13135<<ASSIGN  13139<<ASSIGN  13279<<ASSIGN  13458>>ASSIGN  13699<<ASSIGN  13702<<ASSIGN
     13765>>ASSIGN
INIT_ADR
     11961**DCL     12888<<ASSIGN  12978>>IF      12993>>ASSIGN  13191>>ASSIGN  13192>>ASSIGN  13280>>ASSIGN
INTER_RESULT
     12229**DCL     13074<<ASSIGN  13077<<ASSIGN  13080<<ASSIGN  13083<<ASSIGN  13098<<ASSIGN  13100<<ASSIGN
     13115<<ASSIGN  13117<<ASSIGN  13121<<ASSIGN  13138<<ASSIGN  13227>>ASSIGN  13230>>ASSIGN  13233>>ASSIGN
     13236>>ASSIGN  13239--ASSIGN  13243--ASSIGN
IO_ERROR_DEBUG
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:269  
     14048**LABEL   14005--CALLALT
IO_ERROR_FIRST
     12757**LABEL   12752--CALLALT
IO_ERROR_LD
     12784**LABEL   12825--GOTO
IO_ERROR_SUBSEQUENT
     12809**LABEL   12805--CALLALT
IO_SIZEW
     11975**DCL     12834<<ASSIGN  12837>>ASSIGN  12978>>IF      12979<>CALL    12994>>ASSIGN  13536>>IF
     13661>>IF      13991<>CALL    13993<<ASSIGN  13994>>ASSIGN  14010<<ASSIGN  14011>>IF      14012>>ASSIGN
IS_A_TRANSFER
     13396**LABEL   13390--GOTO    13393--GOTO
J
     11940**DCL     11941--REDEF   12900<<ASSIGN  12907<>CALL    13554<<ASSIGN  13635>>ASSIGN  13641<<ASSIGN
     13641>>ASSIGN  13644<<ASSIGN  13649>>IF      13651>>ASSIGN  13653<>CALL    13655>>ASSIGN  13773<<ASSIGN
     13774>>DOCASE  13864>>IF      13864>>IF      13931<>CALL    14004<>CALL
K
     11942**DCL     11943--REDEF
L
     11944**DCL     11945--REDEF
LAST_ADR_SETUP
     12038**DCL     13015<<ASSIGN  13205>>IF      13217<<ASSIGN  13286>>IF      13298<<ASSIGN
M$PRECORD
      5095**DCL-ENT 12798--CALL
MAP_INDEX
     11976**DCL     13047<<ASSIGN  13048>>IF      13053>>ASSIGN  13053>>ASSIGN  13318<<ASSIGN  13319>>IF
     13324>>ASSIGN  13324>>ASSIGN  13579<<ASSIGN  13580>>IF      13592>>ASSIGN  13592>>ASSIGN  13806<<ASSIGN
     13807>>IF      13819>>ASSIGN  13819>>ASSIGN  14183<<ASSIGN  14184>>IF      14200>>ASSIGN  14200>>ASSIGN
     14394<<ASSIGN  14394>>ASSIGN  14406<>CALL
MOVE_ADR_TEMP
     12242**DCL     12993<<ASSIGN  12999<>CALL    13005<<ASSIGN  13005>>ASSIGN
MOVE_PAGE_REMAIN
     12240**DCL     12994<<ASSIGN  12996>>DOWHILE 12997>>IF      12998>>ASSIGN  13004<<ASSIGN  13004>>ASSIGN
MOVE_SRC$
     12243**DCL     12995<<ASSIGN  13002>>ASSIGN  13003<<ASSIGN  13003>>ASSIGN
MOVE_TARGET$
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:270  
     12241**DCL     12999<>CALL    13002>>ASSIGN
MOVE_TEMP
     12244**DCL     12997<<ASSIGN  12998<<ASSIGN  12999<>CALL    13000>>ASSIGN  13003>>ASSIGN  13004>>ASSIGN
     13005>>ASSIGN
NEXT_RECORD
     12805**LABEL   12771--GOTO    12799--GOTO    12849--GOTO    12885--GOTO    12924--GOTO    12960--GOTO
     12980--GOTO    13051--GOTO    13065--GOTO    13133--GOTO    13188--GOTO    13201--GOTO    13255--GOTO
     13284--GOTO    13322--GOTO    13340--GOTO    13382--GOTO
NODE_INX
     11962**DCL     12930<<ASSIGN  12969<<ASSIGN  12999<>CALL    13211<>CALL    13292<>CALL
NOT_A_TRANSFER
     13449**LABEL   13394--GOTO    13410--GOTO    13438--GOTO
OPERAND
     11950**DCL     13028<<ASSIGN  13032>>ASSIGN  13035>>ASSIGN  13048>>IF      13053>>ASSIGN  13120>>ASSIGN
     13276<<ASSIGN  13303>>ASSIGN  13306>>ASSIGN  13319>>IF      13324>>ASSIGN  13560<<ASSIGN  13564>>ASSIGN
     13567>>ASSIGN  13580>>IF      13592>>ASSIGN  13782<<ASSIGN  13788<<ASSIGN  13792>>ASSIGN  13794>>ASSIGN
     13807>>IF      13819>>ASSIGN  13868<<ASSIGN  13870>>ASSIGN  13882>>ASSIGN  14165<<ASSIGN  14168>>ASSIGN
     14171>>ASSIGN  14184>>IF      14200>>ASSIGN  14410<>CALL
OPRD_MAP
     12174**DCL     13047>>ASSIGN  13318>>ASSIGN  13579>>ASSIGN  13806>>ASSIGN  14183>>ASSIGN
OPRD_TYPE
     11947**DCL     13025<<ASSIGN  13030>>DOCASE  13047>>ASSIGN  13055>>IF      13064<>CALL    13275<<ASSIGN
     13301>>DOCASE  13318>>ASSIGN  13326>>IF      13339<>CALL    13393>>IF      13559<<ASSIGN  13562>>DOCASE
     13579>>ASSIGN  13596>>IF      13607<>CALL    13781<<ASSIGN  13787<<ASSIGN  13790>>DOCASE  13806>>ASSIGN
     13823>>IF      13838<>CALL    13867<<ASSIGN  13869>>IF      13881>>IF      13900<>CALL    14163<<ASSIGN
     14166>>DOCASE  14183>>ASSIGN  14202>>IF      14217<>CALL    14402<>CALL
OP_CODE
     11993**DCL     13388<<ASSIGN  13390>>IF      13392<<ASSIGN  13397>>ASSIGN  13446>>ASSIGN
OP_INX
     11994**DCL     13389<<DOINDEX 13390>>IF
OP_TRANSFER_A
     11997**DCL     13389--DOINDEX 13390>>IF
P$
     11911**DCL     12043--IMP-PTR 12077--IMP-PTR 12280--IMP-PTR 12316--IMP-PTR 12374--IMP-PTR 12481--IMP-PTR
     12831<<ASSIGN  13017>>DOWHILE 13021>>IF      13025>>ASSIGN  13026>>ASSIGN  13027>>ASSIGN  13028>>ASSIGN
     13074>>ASSIGN  13077>>ASSIGN  13080>>ASSIGN  13083>>ASSIGN  13086>>ASSIGN  13103>>ASSIGN  13121>>ASSIGN
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:271  
     13144>>ASSIGN  13145>>ASSIGN  13191>>ASSIGN  13192>>ASSIGN  13225>>DOCASE  13253>>ASSIGN  13275>>ASSIGN
     13276>>ASSIGN  13280>>ASSIGN  13282>>ASSIGN  13343>>DOCASE  13346>>IF      13352>>IF      13357>>IF
     13362>>IF      13368>>IF      13380>>ASSIGN  13458<<ASSIGN  13458>>ASSIGN  13557>>IF      13559>>ASSIGN
     13560>>ASSIGN  13561>>ASSIGN  13632>>ASSIGN  13704>>DOWHILE 13705>>ASSIGN  13735>>ASSIGN  13764>>ASSIGN
     13765<<ASSIGN  13765>>ASSIGN  13772>>DOWHILE 13773>>ASSIGN  13777>>ASSIGN  13782>>ASSIGN  13785>>ASSIGN
     13787>>ASSIGN  13788>>ASSIGN  13864>>ASSIGN  13865>>ASSIGN  13867>>ASSIGN  13868>>ASSIGN  13872>>ASSIGN
     13874>>ASSIGN  13877>>ASSIGN  13878>>ASSIGN  13883>>ASSIGN  13884>>ASSIGN  13950<<ASSIGN  13950>>ASSIGN
     13951>>DOWHILE 13951>>DOWHILE 13954<<ASSIGN  13954>>ASSIGN  13955>>IF      14007<<ASSIGN  14266>>ASSIGN
     14428>>IF
PAGE
     11982**DCL     12748<<ASSIGN  13556<<ASSIGN  13640<<ASSIGN  13993>>ASSIGN  14005<>CALL
PAGE#
     12039**DCL     12833<<ASSIGN  13502>>IF      13513<>CALL    13990<>CALL    13998<<ASSIGN  14002<<ASSIGN
     14002>>ASSIGN  14004<>CALL    14009<<ASSIGN  14307<>CALL
PAGE_SIZE
     11981**DCL     13553<<ASSIGN  13638>>IF      13638<<ASSIGN  13643>>IF      13644>>ASSIGN
POST
     14133**LABEL   12811--GOTO    12830--GOTO    13465--GOTO    13477--GOTO    13500--GOTO    13534--GOTO
     13551--GOTO    13590--GOTO    13630--GOTO    13693--GOTO    13817--GOTO    13861--GOTO    13999--GOTO
     14042--GOTO    14113--GOTO
PSIZE
     11980**DCL     13637<<ASSIGN  13638>>IF      13638>>ASSIGN  13640>>ASSIGN
Q$
     11912**DCL     12791<<ASSIGN  12794<>CALL    12949<<ASSIGN  12951>>ASSIGN  12952>>ASSIGN  12952>>ASSIGN
     13035<<ASSIGN  13036>>IF      13037>>ASSIGN  13039>>IF      13053<<ASSIGN  13056>>ASSIGN  13058>>ASSIGN
     13059>>ASSIGN  13060>>ASSIGN  13306<<ASSIGN  13307>>IF      13308>>ASSIGN  13310>>IF      13324<<ASSIGN
     13327>>ASSIGN  13329>>ASSIGN  13330>>ASSIGN  13331>>ASSIGN  13567<<ASSIGN  13568>>IF      13569>>ASSIGN
     13571>>IF      13592<<ASSIGN  13597>>ASSIGN  13598>>ASSIGN  13635<<ASSIGN  13636>>ASSIGN  13637>>ASSIGN
     13650<<ASSIGN  13653<>CALL    13794<<ASSIGN  13796>>IF      13797>>ASSIGN  13799>>IF      13819<<ASSIGN
     13824>>ASSIGN  13825>>ASSIGN  13870<<ASSIGN  13872>>ASSIGN  13873>>IF      13874>>ASSIGN  13876>>IF
     13882<<ASSIGN  13883>>ASSIGN  13884>>ASSIGN  14104<<ASSIGN  14107<>CALL    14171<<ASSIGN  14172>>IF
     14173>>ASSIGN  14175>>IF      14200<<ASSIGN  14203>>ASSIGN  14204>>ASSIGN
R1
     12043**DCL     13279--ASSIGN
R1.DISP
     12069**DCL     13280>>ASSIGN  13282>>ASSIGN
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:272  
R1.FIELD
     12057**DCL     13343>>DOCASE  13380>>ASSIGN
R1.OP
     12052**DCL     13346>>IF      13352>>IF      13357>>IF      13362>>IF      13368>>IF
R1.OPERAND
     12064**DCL     13276>>ASSIGN
R1.OPNDTYP
     12044**DCL     13021>>IF      13275>>ASSIGN  14428>>IF
R2
     12077**DCL     13135--ASSIGN  13139--ASSIGN
R2.DISP
     12129**DCL     13191>>ASSIGN  13192>>ASSIGN
R2.ENDBIT
     12135**DCL     13145>>ASSIGN
R2.EVALOP
     12088**DCL     13026>>ASSIGN
R2.OPERAND
     12124**DCL     13028>>ASSIGN
R2.OPNDTYP
     12080**DCL     13025>>ASSIGN
R2.RELOCOP
     12108**DCL     13027>>ASSIGN  13225>>DOCASE  13253>>ASSIGN
R2.STBIT
     12132**DCL     13144>>ASSIGN
R2.VALUE
     12138**DCL     13074>>ASSIGN  13077>>ASSIGN  13080>>ASSIGN  13083>>ASSIGN  13086>>ASSIGN  13103>>ASSIGN
     13121>>ASSIGN  13139--ASSIGN
READ_RECORD
     12830**LABEL   12755--GOTO
REC_BUF_STOP$
     11918**DCL     12837<<ASSIGN  13017>>DOWHILE 13704>>DOWHILE 13772>>DOWHILE 13955>>IF      14012<<ASSIGN
RELOC_OPRT
     11957**DCL     13027<<ASSIGN
REPEAT_COUNT
     12040**DCL     13070<<ASSIGN  13120<<ASSIGN  13195>>IF      13198>>ASSIGN  13203>>DOINDEX
REPORT_BAD_ADDRESS_GENERATION
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:273  
     14347**PROC    12979--CALL    13200--CALL    13283--CALL
REPORT_BAD_RELOC_VALUE
     14423**PROC    13064--CALL    13130--CALL    13254--CALL    13339--CALL    13381--CALL
RESULT
     12228**DCL     13032<<ASSIGN  13037<<ASSIGN  13040<<ASSIGN  13041<<ASSIGN  13056<<ASSIGN  13058<<ASSIGN
     13074>>ASSIGN  13077>>ASSIGN  13080>>ASSIGN  13083>>ASSIGN  13100>>ASSIGN  13117>>ASSIGN  13138>>ASSIGN
     13303<<ASSIGN  13308<<ASSIGN  13311<<ASSIGN  13312<<ASSIGN  13327<<ASSIGN  13329<<ASSIGN  13347>>ASSIGN
     13348>>ASSIGN  13353>>ASSIGN  13354>>ASSIGN  13358>>ASSIGN  13359>>ASSIGN  13363>>ASSIGN  13364>>ASSIGN
     13369>>ASSIGN  13370>>ASSIGN  13564<<ASSIGN  13569<<ASSIGN  13572<<ASSIGN  13573<<ASSIGN  13597<<ASSIGN
     13598<<ASSIGN  13632>>ASSIGN  13792<<ASSIGN  13797<<ASSIGN  13800<<ASSIGN  13801<<ASSIGN  13824<<ASSIGN
     13825<<ASSIGN  13864>>ASSIGN  13865>>ASSIGN  14168<<ASSIGN  14173<<ASSIGN  14176<<ASSIGN  14177<<ASSIGN
     14203<<ASSIGN  14204<<ASSIGN  14241<<ASSIGN  14241>>ASSIGN  14242>>IF      14242>>IF      14242>>IF
     14242>>IF      14249>>ASSIGN
RTYPE
     11974**DCL     12832<<ASSIGN  12851>>IF      13464>>IF      13464>>IF      13466>>IF      13661>>IF
     13672<>CALL    13696>>DOCASE  13969<>CALL    13990<>CALL    13993>>IF      13994>>ASSIGN  13994>>ASSIGN
     13996>>DOWHILE 13997<<ASSIGN  13997>>ASSIGN  13999>>IF      14004<>CALL    14005>>CALL    14008<<ASSIGN
     14025<>CALL    14062<>CALL    14088<>CALL    14271>>IF      14311<>CALL
SC_CURR$
     11915**DCL     12853<<ASSIGN  12887>>IF      12888>>ASSIGN  12891>>IF      12891>>IF      12900>>ASSIGN
     12930>>ASSIGN  12931>>ASSIGN  12932>>DOCASE  12934>>IF      12935>>ASSIGN  12939>>IF      12940>>ASSIGN
     12944>>IF      12949>>ASSIGN  12965>>ASSIGN  12972>>ASSIGN  13729<<ASSIGN  13734<<ASSIGN  13736>>IF
     13764>>ASSIGN
SC_LAST_ADR
     11971**DCL     12972<<ASSIGN  12978>>IF      13199>>IF      13209>>ASSIGN  13281>>IF      13290>>ASSIGN
SC_SIZE
     11972**DCL     12931<<ASSIGN  12970<<ASSIGN  12972>>ASSIGN
SECT#
     11970**DCL     12835<<ASSIGN  12852>>IF      12853>>ASSIGN  12872<>CALL    13705<<ASSIGN  13706>>IF
     13717<>CALL    13734>>ASSIGN  13743<>CALL
SECT_COUNT
     11969**DCL     12743<<ASSIGN  12746>>ASSIGN  12852>>IF      12868<>CALL    13706>>IF      13713<>CALL
SETUP_SIZE
     11964**DCL     13209<<ASSIGN  13210>>IF      13210<<ASSIGN  13211<>CALL    13217>>ASSIGN  13290<<ASSIGN
     13291>>IF      13291<<ASSIGN  13292<>CALL    13298>>ASSIGN
SET_IN_ADDRESS
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:274  
     13446**LABEL   13418--GOTO
SEVERITY IN PROCEDURE BAD_OPERAND_RANGE
     14386**DCL     14384--PROC    14415<>CALL    14418<>CALL
SEVERITY IN PROCEDURE TELL_PAGE_TYPE
     14263**DCL     14261--PROC    14268>>IF      14268>>ASSIGN  14269>>ASSIGN
SHF_CON
     12182**DCL     13087--IF      13100>>ASSIGN  13104--IF      13117>>ASSIGN
SK
     11943**DCL     13203<<DOINDEX
SKELETON
     11995**DCL     13397<<ASSIGN  13412<<ASSIGN  13412>>ASSIGN  13417>>IF      13442>>ASSIGN
S_BIT
     11952**DCL     13144<<ASSIGN  13146>>ASSIGN  13147--IF      13170<>CALL    13191>>ASSIGN  13193>>ASSIGN
     13261<<ASSIGN  13263>>ASSIGN  13265>>ASSIGN
S_BIT_MOD
     11954**DCL     13193<<ASSIGN  13196>>IF      13196>>IF      13198>>ASSIGN  13220>>ASSIGN  13261>>ASSIGN
     13265<<ASSIGN
TELL_PAGE_TYPE
     14261**PROC    12848--CALL    12884--CALL    12923--CALL    13097--CALL    13114--CALL    13187--CALL
     13624--CALL    13730--CALL    13760--CALL    13855--CALL    13916--CALL    13948--CALL    14379--CALL
     14418--CALL    14453--CALL
TEMP$RESULT
     12171**DCL     13223<<ASSIGN  13259>>ASSIGN
TEMP_RESULT
     12170**DCL     13204<<ASSIGN  13221--ASSIGN  13227<<ASSIGN  13227>>ASSIGN  13230<<ASSIGN  13230>>ASSIGN
     13233<<ASSIGN  13233>>ASSIGN  13236<<ASSIGN  13236>>ASSIGN
TEMP_RESULT$
     12172**DCL     12171--IMP-PTR 13221<<ASSIGN  13223>>ASSIGN  13239<<ASSIGN  13243<<ASSIGN  13259>>ASSIGN
TOTAL
     11983**DCL     12747<<ASSIGN  12748>>ASSIGN  13555<<ASSIGN  13639<<ASSIGN  13994<<ASSIGN  13994>>ASSIGN
     13996>>DOWHILE
TSIZE
     11984**DCL     13636<<ASSIGN  13639>>ASSIGN
VR_CONTINUE
     13787**LABEL   13778--GOTO
VR_OUT
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:275  
     13990**LABEL   13955--GOTO
VX$BIT_A
     11832**DCL     13388>>ASSIGN
VX$BREF
     12647**DCL     13415--ASSIGN  13419--ASSIGN  13423--IF      13443--ASSIGN  13444--ASSIGN
VX$BREF.I.WORD0
     12650**DCL     13441<<ASSIGN
VX$BREF.I.WORD1
     12651**DCL     13417>>IF      13442<<ASSIGN
VX$BREF.WORD_A
     12648**DCL     12649--REDEF
VX$HALF_A
     11825**DCL     13636>>ASSIGN  13637>>ASSIGN
VX$LLIST_SC.BASE$
     12680**DCL     12744>>ASSIGN
VX$LLIST_SC.COUNT
     12681**DCL     12743>>ASSIGN
VX$NODE.ADDR_START.RDATA
     11628**DCL     14242>>IF
VX$NODE.ADDR_START.RPROC
     11629**DCL     14242>>IF
VX$NODE.ADDR_START_A
     11626**DCL     11627--REDEF
VX$NODE.ADDR_STOP.RDATA
     11633**DCL     14242>>IF
VX$NODE.ADDR_STOP.RPROC
     11634**DCL     14242>>IF
VX$NODE.ADDR_STOP_A
     11631**DCL     11632--REDEF
VX$NODE.L_PREV_SIZE
     11684**DCL     11695--REDEF
VX$NODE.L_SC_START
     11703**DCL     11708--REDEF
VX$NODE.L_SC_STOP
     11709**DCL     11714--REDEF
VX$NODE.L_SIZE
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:276  
     11672**DCL     11683--REDEF
VX$NODE.L_START
     11648**DCL     11659--REDEF
VX$NODE.L_START.DN$
     11650**DCL     12949>>ASSIGN
VX$NODE.L_STOP
     11660**DCL     11671--REDEF
VX$NODE.NUM
     11624**DCL     13990<>CALL
VX$NODE.PROMOTE_HEAD
     11715**DCL     11718--REDEF
VX$NODE.PROMOTE_TAIL
     11719**DCL     11722--REDEF
VX$NODE.START_PAGE#_A
     11636**DCL     11637--REDEF
VX$NODE.STOP_PAGE#_A
     11641**DCL     11642--REDEF
VX$SC
     11432**DCL     12853--ASSIGN  13035--ASSIGN  13306--ASSIGN  13567--ASSIGN  13734--ASSIGN  13794--ASSIGN
     13870--ASSIGN  14171--ASSIGN
VX$SC.ADDRESS
     11467**DCL     12888>>ASSIGN  12965>>ASSIGN  12972>>ASSIGN  13056>>ASSIGN  13327>>ASSIGN  13597>>ASSIGN
     13764>>ASSIGN  13824>>ASSIGN  13872>>ASSIGN  14203>>ASSIGN
VX$SC.ATTR.PRE_DCB
     11462**DCL     12891>>IF      12944>>IF
VX$SC.ATTR.SEGMENT
     11457**DCL     12934>>IF      12939>>IF      13036>>IF      13307>>IF      13568>>IF      13796>>IF
     13873>>IF      14172>>IF
VX$SC.NAME_DISP
     11470**DCL     12949>>ASSIGN
VX$SC.NODE#
     11474**DCL     12930>>ASSIGN
VX$SC.SEG
     11433**DCL     12935>>ASSIGN  12940>>ASSIGN  13037>>ASSIGN  13308>>ASSIGN  13569>>ASSIGN  13797>>ASSIGN
     13874>>ASSIGN  14173>>ASSIGN
VX$SC.SIZE
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:277  
     11472**DCL     12887>>IF      12900>>ASSIGN  12931>>ASSIGN  13736>>IF
VX$SC.TYPE
     11435**DCL     12891>>IF      12932>>DOCASE  13039>>IF      13310>>IF      13571>>IF      13799>>IF
     13876>>IF      14175>>IF
VX$SECT.MBZ
     11543**DCL     11545--REDEF   11549--REDEF
VX$SOURCE_C
     12237**DCL     13002>>ASSIGN
VX$TARGET_C
     12236**DCL     13002<<ASSIGN
VX$WORD_A
     11824**DCL     13392>>ASSIGN  13397>>ASSIGN  13446<<ASSIGN
VXA$GET
     11880**DCL-ENT 12794--CALL    13653--CALL    14107--CALL
VXD$B2C
     11878**DCL-ENT 12868--CALL    12872--CALL    12907--CALL    12911--CALL    13170--CALL    13174--CALL
     13513--CALL    13607--CALL    13672--CALL    13713--CALL    13717--CALL    13743--CALL    13747--CALL
     13838--CALL    13900--CALL    13931--CALL    13969--CALL    14025--CALL    14062--CALL    14088--CALL
     14217--CALL    14282--CALL    14286--CALL    14307--CALL    14311--CALL    14335--CALL    14363--CALL
     14367--CALL    14402--CALL    14406--CALL    14410--CALL    14437--CALL    14441--CALL
VXE$ERROR
     11871**DCL-ENT 12768--CALL    12784--CALL    12822--CALL    12846--CALL    12882--CALL    12921--CALL
     12958--CALL    13095--CALL    13112--CALL    13158--CALL    13185--CALL    13405--CALL    13432--CALL
     13475--CALL    13490--CALL    13498--CALL    13527--CALL    13532--CALL    13544--CALL    13549--CALL
     13588--CALL    13622--CALL    13628--CALL    13686--CALL    13691--CALL    13727--CALL    13758--CALL
     13815--CALL    13853--CALL    13859--CALL    13914--CALL    13946--CALL    13985--CALL    14040--CALL
     14074--CALL    14100--CALL    14125--CALL    14145--CALL    14159--CALL    14196--CALL    14232--CALL
     14237--CALL    14254--CALL    14340--CALL    14376--CALL    14415--CALL    14450--CALL
VXI$READ
     11890**DCL-ENT 12752--CALL    12805--CALL    14005--CALL
VXI$WRITE
     11891**DCL-ENT 13991--CALL
VXK$KEY
     11889**DCL-ENT 12751--CALL    13990--CALL    14004--CALL
VXR$SAT
     11793**DCL     13882--ASSIGN
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:278  
VXR$SAT.BELOW
     11799**DCL     13059>>ASSIGN  13330>>ASSIGN
VXR$SAT.NODE#
     11801**DCL     13060>>ASSIGN  13331>>ASSIGN
VXR$SAT.SEG.OFFSET
     11796**DCL     13883>>ASSIGN
VXR$SAT.SEG.SEGID
     11798**DCL     13884>>ASSIGN
VXR$SAT.VALUE
     11794**DCL     11795--REDEF   13058>>ASSIGN  13329>>ASSIGN  13598>>ASSIGN  13825>>ASSIGN  14204>>ASSIGN
VXR$TMPLT.GOT
     11759**DCL     11761--REDEF
VXU$SETUP
     11893**DCL-ENT 12966--CALL    12999--CALL    13211--CALL    13292--CALL
VX_BIAS.A
      9594**DCL      9595--REDEF
VX_BREF_ADR
     10193**DCL     13446>>ASSIGN
VX_BREF_DEFINITION
     10195**DCL     13422<<ASSIGN  13422>>ASSIGN
VX_BREF_INSTANCE
     10194**DCL     13396<<ASSIGN  13396>>ASSIGN
VX_BREF_SIZE
     10192**DCL     13423>>IF      13444<<ASSIGN  13444>>ASSIGN
VX_BREF_START$
     10190**DCL     13414>>ASSIGN  13446>>ASSIGN
VX_CBUF.CHARS_A
      9528**DCL      9529--REDEF
VX_CONST_DCB.ACTPOS
     10710**DCL     10710--REDEF
VX_CONST_DCB.ARS#
     10669**DCL     10669--REDEF
VX_CONST_DCB.ATTR#
     10699**DCL     10699--REDEF   10701--REDEF
VX_CONST_DCB.BORROW
     10721**DCL     10721--REDEF   10721--REDEF   10721--REDEF
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:279  
VX_CONST_DCB.EOMCHAR#
     10676**DCL     10677--REDEF
VX_CONST_DCB.FLDID
     10713**DCL     10714--REDEF
VX_CONST_DCB.FORM$
     10705**DCL     10705--REDEF
VX_CONST_DCB.FSECT
     10728**DCL     10728--REDEF
VX_CONST_DCB.FSN#
     10695**DCL     10695--REDEF   10695--REDEF   10696--REDEF
VX_CONST_DCB.HEADER$
     10704**DCL     10705--REDEF
VX_CONST_DCB.IXTNSIZE#
     10701**DCL     10702--REDEF
VX_CONST_DCB.LASTSTA$
     10685**DCL     10685--REDEF
VX_CONST_DCB.LVL
     10722**DCL     10722--REDEF
VX_CONST_DCB.NAME#.C
     10685**DCL     10686--REDEF
VX_CONST_DCB.NOEOF
     10717**DCL     10717--REDEF
VX_CONST_DCB.NRECS#
     10702**DCL     10702--REDEF
VX_CONST_DCB.NRECX
     10729**DCL     10729--REDEF
VX_CONST_DCB.OHDR
     10718**DCL     10718--REDEF
VX_CONST_DCB.ORG#
     10693**DCL     10694--REDEF
VX_CONST_DCB.PRECNO
     10726**DCL     10726--REDEF
VX_CONST_DCB.RCSZ
     10734**DCL     10734--REDEF
VX_CONST_DCB.RES#
     10687**DCL     10687--REDEF
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:280  
VX_CONST_DCB.SETX
     10706**DCL     10706--REDEF
VX_CONST_DCB.TAB$
     10705**DCL     10705--REDEF
VX_CONST_DCB.TDA
     10725**DCL     10726--REDEF
VX_CONST_DCB.WSN#
     10687**DCL     10688--REDEF
VX_CONTINUE_2
     13790**LABEL   13783--GOTO
VX_CURR$
      9563**DCL     12949>>ASSIGN  13990>>CALL    14135>>IF
VX_DCB_SIZEW
     10742**DCL     12966>>CALL    12970>>ASSIGN
VX_EBUF.CHARS_A
     10117**DCL     10118--REDEF
VX_EFIELD1.CHARS
     10126**DCL     10127--REDEF   12952<<ASSIGN  13485<<ASSIGN
VX_EFIELD1.CHARS_A
     10127**DCL     12868<>CALL    12907<>CALL    13170<>CALL    13513<>CALL    13607<>CALL    13672<>CALL
     13713<>CALL    13743<>CALL    13838<>CALL    13900<>CALL    13931<>CALL    13969<>CALL    14025<>CALL
     14062<>CALL    14088<>CALL    14217<>CALL    14282<>CALL    14307<>CALL    14363<>CALL    14402<>CALL
     14437<>CALL
VX_EFIELD1.COUNT
     10125**DCL     12951<<ASSIGN  13484<<ASSIGN
VX_EFIELD2.CHARS
     10130**DCL     10131--REDEF
VX_EFIELD2.CHARS_A
     10131**DCL     12872<>CALL    12911<>CALL    13174<>CALL    13717<>CALL    13747<>CALL    14286<>CALL
     14311<>CALL    14367<>CALL    14406<>CALL    14441<>CALL
VX_EFIELD3.CHARS
     10134**DCL     10135--REDEF
VX_EFIELD3.CHARS_A
     10135**DCL     14335<>CALL    14410<>CALL
VX_EI_KEY_BUF.KEY
     10510**DCL     10511--REDEF
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:281  
VX_ERRORS
      9571**DCL      9582--REDEF
VX_ERRORS.CONFLICT_A
      9577**DCL      9578--REDEF
VX_ERRORS.UNSAT_A
      9573**DCL      9574--REDEF
VX_ERR_SEV
      9584**DCL     13408>>IF      13408<<ASSIGN  13435>>IF      13435<<ASSIGN
VX_IMAGE_DATA.CPAGE#_A
      8708**DCL      8709--REDEF
VX_IMAGE_DATA.NODE_A$
      8720**DCL      8721--REDEF
VX_IMAGE_DATA.START_A$
      8712**DCL      8713--REDEF
VX_IMAGE_DATA.STOP_A$
      8716**DCL      8717--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8777**DCL      8778--REDEF
VX_IMAGE_DS3.NODE_A$
      8789**DCL      8790--REDEF
VX_IMAGE_DS3.START_A$
      8781**DCL      8782--REDEF
VX_IMAGE_DS3.STOP_A$
      8785**DCL      8786--REDEF
VX_IMAGE_DS4.CPAGE#_A
      8800**DCL      8801--REDEF
VX_IMAGE_DS4.NODE_A$
      8812**DCL      8813--REDEF
VX_IMAGE_DS4.START_A$
      8804**DCL      8805--REDEF
VX_IMAGE_DS4.STOP_A$
      8808**DCL      8809--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8823**DCL      8824--REDEF
VX_IMAGE_DS5.NODE_A$
      8835**DCL      8836--REDEF
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:282  
VX_IMAGE_DS5.START_A$
      8827**DCL      8828--REDEF
VX_IMAGE_DS5.STOP_A$
      8831**DCL      8832--REDEF
VX_IMAGE_DS6.CPAGE#_A
      8846**DCL      8847--REDEF
VX_IMAGE_DS6.NODE_A$
      8858**DCL      8859--REDEF
VX_IMAGE_DS6.START_A$
      8850**DCL      8851--REDEF
VX_IMAGE_DS6.STOP_A$
      8854**DCL      8855--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8869**DCL      8870--REDEF
VX_IMAGE_DS7.NODE_A$
      8881**DCL      8882--REDEF
VX_IMAGE_DS7.START_A$
      8873**DCL      8874--REDEF
VX_IMAGE_DS7.STOP_A$
      8877**DCL      8878--REDEF
VX_IMAGE_DS8.CPAGE#_A
      8892**DCL      8893--REDEF
VX_IMAGE_DS8.NODE_A$
      8904**DCL      8905--REDEF
VX_IMAGE_DS8.START_A$
      8896**DCL      8897--REDEF
VX_IMAGE_DS8.STOP_A$
      8900**DCL      8901--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8731**DCL      8732--REDEF
VX_IMAGE_PROC.NODE_A$
      8743**DCL      8744--REDEF
VX_IMAGE_PROC.START_A$
      8735**DCL      8736--REDEF
VX_IMAGE_PROC.STOP_A$
      8739**DCL      8740--REDEF
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:283  
VX_IMAGE_ROS.CPAGE#_A
      8754**DCL      8755--REDEF
VX_IMAGE_ROS.NODE_A$
      8766**DCL      8767--REDEF
VX_IMAGE_ROS.START_A$
      8758**DCL      8759--REDEF
VX_IMAGE_ROS.STOP_A$
      8762**DCL      8763--REDEF
VX_IO_SIZEW
     10148**DCL     12834>>ASSIGN  12836>>IF      13555>>ASSIGN  13556>>ASSIGN  14010>>ASSIGN
VX_IO_STATUS
     10147**DCL     12757>>DOCASE  12809>>DOCASE  14048>>DOCASE
VX_M_ALL
      9605**DCL     12790>>IF      13649>>IF      14103>>IF
VX_M_BASE_PTR
      9607**DCL     12791>>ASSIGN  13650>>ASSIGN  14104>>ASSIGN
VX_M_FREE
      9603**DCL     12790>>IF      12791>>ASSIGN  12792<<ASSIGN  12792>>ASSIGN  13649>>IF      13650>>ASSIGN
     13651<<ASSIGN  13651>>ASSIGN  14103>>IF      14104>>ASSIGN  14105<<ASSIGN  14105>>ASSIGN
VX_M_VECTOR.F
      8559**DCL      8563--REDEF
VX_M_VECTOR_DP.F
      8594**DCL      8598--REDEF
VX_NEXT_BREF$
     10191**DCL     12647--IMP-PTR 13415>>ASSIGN  13441>>ASSIGN  13442>>ASSIGN  13443<<ASSIGN  13443>>ASSIGN
VX_O.ACCTN_A$
      9723**DCL      9724--REDEF
VX_O.DCB_MATCH_A$
      9732**DCL      9733--REDEF
VX_O.DCB_MATCH_HIT_A
      9738**DCL      9739--REDEF
VX_O.FIDN_A$
      9717**DCL      9718--REDEF
VX_O.FID_A$
      9709**DCL      9710--REDEF
VX_O.INCLUDE_A$
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:284  
      9729**DCL      9730--REDEF
VX_O.MAP_A
      9703**DCL      9704--REDEF
VX_O.NODCB_A
      9760**DCL      9761--REDEF
VX_O.NUM.BREF
      9651**DCL     13387>>IF
VX_O.NUM_A
      9648**DCL      9650--REDEF
VX_O.OPT.START
      9751**DCL     14149>>IF      14249<<ASSIGN
VX_O.OPT_A
      9748**DCL      9749--REDEF
VX_O.PRIV_A
      9664**DCL      9666--REDEF
VX_O.SIN.NODEBUG
      9622**DCL     13465>>IF
VX_O.SIN_A
      9617**DCL      9618--REDEF
VX_O.TCB_A
      9744**DCL      9745--REDEF
VX_OD.ACCTN_A$
      9921**DCL      9922--REDEF
VX_OD.DCB_MATCH_A$
      9930**DCL      9931--REDEF
VX_OD.FIDN_A$
      9915**DCL      9916--REDEF
VX_OD.FID_A$
      9907**DCL      9908--REDEF
VX_OD.INCLUDE_A$
      9927**DCL      9928--REDEF
VX_OD.MAP_A
      9901**DCL      9902--REDEF
VX_OD.NODCB_A
      9945**DCL      9946--REDEF
VX_OD.NUM_A
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:285  
      9848**DCL      9849--REDEF
VX_OD.PRIV_A
      9863**DCL      9864--REDEF
VX_OD.SIN_A
      9817**DCL      9818--REDEF
VX_OD.VECTOR_A$
      9936**DCL      9937--REDEF
VX_OK.KOFSET
      8681**DCL     12887>>IF      12888>>ASSIGN  12911<>CALL    14286<>CALL
VX_OK.KPAGE#
      8680**DCL     12833>>ASSIGN  14009>>ASSIGN
VX_OK.KRTYPE
      8679**DCL     12832>>ASSIGN  14008>>ASSIGN
VX_OK.KSECT#
      8684**DCL     12835>>ASSIGN  14363<>CALL
VX_OK.KSTYPE
      8682**DCL     12974>>IF      14282<>CALL
VX_OK.OUNAME.CHARS
      8690**DCL     13485>>ASSIGN
VX_OK.OUNAME.COUNT
      8689**DCL     13484>>ASSIGN
VX_OL.MAX_A
      9792**DCL      9794--REDEF
VX_OL.MIN_A
      9777**DCL      9778--REDEF
VX_ON.ACCTN_A$
     10066**DCL     10068--REDEF
VX_ON.DCB_MATCH_A$
     10077**DCL     10079--REDEF
VX_ON.FIDN_A$
     10059**DCL     10061--REDEF
VX_ON.FID_A$
     10050**DCL     10052--REDEF
VX_ON.INCLUDE_A$
     10073**DCL     10075--REDEF
VX_ON.MAP_A
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:286  
     10043**DCL     10045--REDEF
VX_ON.NODCB_A$
     10093**DCL     10094--REDEF
VX_ON.NUM_A
      9988**DCL      9990--REDEF
VX_ON.PRIV_A
     10004**DCL     10006--REDEF
VX_ON.SIN_A
      9956**DCL      9958--REDEF
VX_ON.VECTOR_A$
     10084**DCL     10085--REDEF
VX_OUHEAD.VERSION
      9403**DCL      9405--REDEF
VX_OU_HEAD
      9346**DCL      9385--REDEF
VX_OU_HEAD.LB_SIZE
      9355**DCL     12747>>ASSIGN
VX_OU_HEAD.REC_A
      9358**DCL      9361--REDEF
VX_OU_HEAD.START_ADDRESS.OFFSET
      9353**DCL     14241>>ASSIGN
VX_OU_HEAD.START_ADDRESS.OPERAND
      9352**DCL     14165>>ASSIGN
VX_OU_HEAD.START_ADDRESS.OPERAND_TYPE
      9350**DCL     14133>>IF      14163>>ASSIGN
VX_OU_HEAD.UTS
      9347**DCL     12830>>IF
VX_O_KEY_BUF.FORM0
      8607**DCL      8610--REDEF    8617--REDEF
VX_O_KEY_BUF.FORM2.UTS
      8620**DCL     12830>>IF
VX_O_KEY_BUF_L.FORM0
      8630**DCL      8633--REDEF    8640--REDEF
VX_PASS2_REF.OU.L_START
     10296**DCL     10301--REDEF
VX_PASS2_REF.OU.L_STOP
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:287  
     10302**DCL     10307--REDEF
VX_PASS2_REF.OU.MAX
     10290**DCL     10295--REDEF
VX_PASS2_REF.OU.SIZE
     10308**DCL     10313--REDEF
VX_PASS2_REF.SAT.COUNT
     10335**DCL     10341--REDEF
VX_PASS2_REF.SAT.COUNT.SC
     10340**DCL     12746<<ASSIGN
VX_PASS2_REF.SAT.COUNT_A
     10341**DCL     13048>>IF      13319>>IF      13580>>IF      13807>>IF      14184>>IF      14394>>ASSIGN
VX_PASS2_REF.SAT.ENT_SIZE
     10342**DCL     10348--REDEF
VX_PASS2_REF.SAT.ENT_SIZE_A
     10348**DCL     13053>>ASSIGN  13324>>ASSIGN  13592>>ASSIGN  13819>>ASSIGN  14200>>ASSIGN
VX_PASS2_REF.SAT.L_START
     10321**DCL     10327--REDEF
VX_PASS2_REF.SAT.L_START.SC$
     10326**DCL     12745<<ASSIGN
VX_PASS2_REF.SAT.L_START.SR$
     10325**DCL     13882>>ASSIGN
VX_PASS2_REF.SAT.L_START_A$
     10327**DCL     13053>>ASSIGN  13324>>ASSIGN  13592>>ASSIGN  13819>>ASSIGN  14200>>ASSIGN
VX_PASS2_REF.SAT.L_STOP
     10328**DCL     10334--REDEF
VX_PASS2_REF.SAT.MAX
     10315**DCL     10320--REDEF
VX_PASS2_REF.UNSAT.L_START
     10383**DCL     10388--REDEF
VX_PASS2_REF.UNSAT.L_STOP
     10389**DCL     10394--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
     10395**DCL     10400--REDEF
VX_PASS2_REF.UNSAT.MAX
     10377**DCL     10382--REDEF
VX_PASS2_REF.UNSAT.PAGE#
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:288  
     10407**DCL     10412--REDEF
VX_PASS2_REF.UNSAT.SIZE
     10401**DCL     10406--REDEF
VX_PHRASE.PHRASE
      9809**DCL      9811--REDEF
VX_PRIMARY_ENTDEF_GOT
      9551**DCL     13479>>IF
VX_PROGRAM_BIAS.A
      9587**DCL      9588--REDEF
VX_REC_BUF_SIZE
     10189**DCL     12752<>CALL    12790>>IF      12792>>ASSIGN  12794<>CALL    12796<<ASSIGN  12796>>ASSIGN
     12796>>ASSIGN  12805<>CALL    13643>>IF      13644>>ASSIGN  13655<<ASSIGN  13655>>ASSIGN  14103>>IF
     14105>>ASSIGN  14107<>CALL    14109<<ASSIGN  14109>>ASSIGN  14109>>ASSIGN
VX_REC_BUF_START$
     10188**DCL     12752<>CALL    12805<>CALL    12831>>ASSIGN  12837>>ASSIGN  12995>>ASSIGN  13635>>ASSIGN
     13991<>CALL    14005<>CALL    14007>>ASSIGN  14012>>ASSIGN  14266>>ASSIGN
VX_REC_SIZE_A
     10234**DCL     13661>>IF
VX_ROOT$
      9560**DCL     14135>>IF      14242>>IF      14242>>IF      14242>>IF      14242>>IF
VX_R_KEY_BUF.FORM0
      8656**DCL      8660--REDEF    8666--REDEF
VX_SC_BASE$
     10247**DCL     12744<<ASSIGN  12745>>ASSIGN  12853>>ASSIGN  13035>>ASSIGN  13306>>ASSIGN  13567>>ASSIGN
     13729>>ASSIGN  13734>>ASSIGN  13794>>ASSIGN  13870>>ASSIGN  14171>>ASSIGN
VX_SC_PASS2$
     10244**DCL     12743>>ASSIGN  12744>>ASSIGN
VX_SD.A
      8284**DCL      8285--REDEF
VX_SEGID
     10420**DCL     13037>>ASSIGN  13308>>ASSIGN  13569>>ASSIGN  13797>>ASSIGN  13874>>ASSIGN  14173>>ASSIGN
VX_SOURCE_COUNT
     10143**DCL     12235--IMP-SIZ 12237--IMP-SIZ 13001<<ASSIGN  13002>>ASSIGN
VX_SPC.B$.MINE
     10478**DCL     10484--REDEF
VX_SPC.B$.NAME
PL6.E3A0      #001=VXT$FIMAGE File=VXT$FIMAGE.:E05TSI                            WED 07/30/97 08:38 Page:289  
     10457**DCL     10463--REDEF
VX_SPC.B$.SKIP
     10471**DCL     10477--REDEF
VX_SPC.B$.VALUE
     10464**DCL     10470--REDEF
VX_SPC.SEG.NAME
     10426**DCL     10432--REDEF
VX_SPC.SEG.VALUE
     10433**DCL     10439--REDEF
VX_TARGET_COUNT
     10142**DCL     12234--IMP-SIZ 12236--IMP-SIZ 13000<<ASSIGN  13001>>ASSIGN  13002>>ASSIGN
VX_TSX0_OVERLAY.H
     10201**DCL     10204--REDEF
VX_TSX0_OVERLAY.I.WORD0
     10205**DCL     13441>>ASSIGN
