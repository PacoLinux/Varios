

CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             #ifndef NORCSID
        2         2             static char rcsid2[] = "$Header: fillem.c,v 0.5 87/03/10 01:01:23 ceriel Exp $
                               ";
        3         3             #endif
        4         4
        5         5             #include <stdio:h>
        6         6             #include "assert:h"
        7         7             #include <em_spec:h>
        8         8             #include <em_pseu:h>
        9         9             #include <em_flag:h>
       10        10             #include <em_ptyp:h>
       11        11             #include <em_mes:h>
       12        12             #include "mach:h"
       13        13             #include "param:h"
       14        14             #include "tables:h"
       15        15             #include "types:h"
       16        16             #include <cgg_cg:h>
       17        17             #include "data:h"
       18        18             #include "result:h"
       19        19             #ifdef REGVARS
       20        20             #include "regvar:h"
       21        21             #include <em_reg:h>
       22        22             #endif
       23        23             #include "extern:h"
       24        24             #include "em_mnem:h"
       25        25
       26        26             /*
       27        27              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
       28        28              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
       29        29              *
       30        30              * Author: Hans van Staveren
       31        31              */
       32        32
       33        33             #ifndef newplb        /* retrofit for older mach.h */
       34        34   *S*       #define newplb newilb
       35        35   *S*       #endif
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       36        36
       37        37             #ifdef fmt_id
       38        38             #ifdef id_first
       39        39   *S*       It is an error to define both fmt_id and id_first.
       40        40   *S*       Read the documentation.
       41        41   *S*       #endif
       42        42             #endif
       43        43
       44        44             #ifdef fmt_ilb
       45        45   *S*       #ifdef ilb_fmt
       46        46   *S*       It is an error to define both fmt_ilb and ilb_fmt.
       47        47   *S*       Read the documentation.
       48        48   *S*       #endif
       49        49   *S*       #endif
       50        50
       51        51             /* segment types for switchseg() */
       52        52             #define SEGTXT          0
       53        53             #define SEGCON          1
       54        54             #define SEGROM          2
       55        55             #define SEGBSS          3
       56        56
       57        57             long con();
       58        58
       59        59             #define get8()  getc(emfile)
       60        60
       61        61             #define MAXSTR 256
       62        62
       63        63             FILE *emfile = 0;
       64        64             extern   int   debug_num;
       65        65             extern   char  *cur_func;
       66        66             extern FILE *codefile;
       67        67
       68        68             int nextispseu,savetab1;
       69        69             int opcode;
       70        70             int offtyp;
       71        71             long argval;
       72        72             int dlbval;
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       73        73             char str[MAXSTR],argstr[128],labstr[128];
       74        74             int strsiz;
       75        75             int holno=0;
       76        76             int procno=0;
       77        77             int curseg= -1;
       78        78             int part_size=0;
       79        79             word part_word=0;
       80        80             int endofprog=0;
       81        81             #ifdef REGVARS
       82        82             int regallowed=0;
       83        83             #endif
       84        84
       85        85             extern char em_flag[];
       86        86             extern short em_ptyp[];
       87        87             extern unsigned long strtoul();
       88        88             extern double atof();
       89        89
       90        90             #define sp_cstx sp_cst2
       91        91
       92        92             string tostring();
       93        93             string holstr();
       94        94             string strarg();
       95        95             string mystrcpy();
       96        96             long get32();
       97        97
       98        98             in_init(filename) char *filename; {
       99        99    1
      100       100    1         if ((emfile=freopen(filename,"rb",stdin))==(FILE *)0)
      101       101    1            error("Can't open %s",filename);
      102       102    1         if (get16()!=sp_magic)
      103       103    1            error("Bad format %s",filename);
      104       104    1        }
      105       105
      106       106             in_start() {
      107       107    1        #ifdef modhead
      108       108    1         fprintf(codefile,"%s",modhead) ;
      109       109    1        #endif
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      110       110    1        }
      111       111
      112       112             in_finish() {
      113       113    1        }
      114       114
      115       115             fillemlines() {
      116       116    1         register int t,i;
      117       117    1         register struct emline *lp;
      118       118    1
      119       119    1         while ((emlines+nemlines)-emp<MAXEMLINES-5) {
      120       120    2            assert(nemlines<MAXEMLINES);
      121       121    2            if (nextispseu) {
      122       122    3               emlines[nemlines].em_instr=0;
      123       123    3               return;
      124       124    3            }
      125       125    2            lp = &emlines[nemlines++];
      126       126    2
      127       127    2            switch(t=table1()) {
      128       128    3            default:
      129       129    3               error("unknown instruction byte");
      130       130    3            case sp_ilb1:
      131       131    3            case sp_ilb2:
      132       132    3            case sp_fpseu:
      133       133    3            case sp_dlb1:
      134       134    3            case sp_dlb2:
      135       135    3            case sp_dnam:
      136       136    3               nextispseu=1; savetab1=t;
      137       137    3               nemlines--;
      138       138    3               lp->em_instr = 0;
      139       139    3               return;
      140       140    3            case EOF:
      141       141    3               nextispseu=1; savetab1=t;
      142       142    3               endofprog=1;
      143       143    3               nemlines--;
      144       144    3               lp->em_instr = 0;
      145       145    3               return;
      146       146    3            case sp_fmnem:
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      147       147    3               lp->em_instr = opcode;
      148       148    3                if (opcode == op_lni)
      149       149    3                   debug_num++;
      150       150    3               break;
      151       151    3            }
      152       152    2            i=em_flag[lp->em_instr-sp_fmnem] & EM_PAR;
      153       153    2            if ( i == PAR_NO ) {
      154       154    3               lp->em_optyp = OPNO;
      155       155    3               lp->em_soper = 0;
      156       156    3               continue;
      157       157    3            }
      158       158    2            t= em_ptyp[i];
      159       159    2            t= getarg(t);
      160       160    2            switch(i) {
      161       161    3            case PAR_L:
      162       162    3               assert(t == sp_cstx);
      163       163    3               if (argval >= 0)
      164       164    3                  argval += TEM_BSIZE;
      165       165    3               lp->em_optyp = OPINT;
      166       166    3               lp->em_u.em_ioper = argval;
      167       167    3               lp->em_soper = tostring((word) argval);
      168       168    3               continue;
      169       169    3            case PAR_G:
      170       170    3               if (t != sp_cstx)
      171       171    3                  break;
      172       172    3               lp->em_optyp = OPSYMBOL;
      173       173    3               lp->em_soper = holstr((word) argval);
      174       174    3               continue;
      175       175    3            case PAR_B:
      176       176    3               t = sp_ilb2;
      177       177    3               break;
      178       178    3            case PAR_D:
      179       179    3               assert(t == sp_cstx);
      180       180    3               lp->em_optyp = OPSYMBOL;
      181       181    3               lp->em_soper = strarg(t);
      182       182    3               lp->em_u.em_loper = argval;
      183       183    3               continue;
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=6  
      184       184    3            }
      185       185    2            lp->em_soper = strarg(t);
      186       186    2             if (opcode == op_lin)
      187       187    2                debug_num = 0x00003ffff & argval;
      188       188    2            if (t==sp_cend)
      189       189    2               lp->em_optyp = OPNO;
      190       190    2            else if (t==sp_cstx) {
      191       191    3               lp->em_optyp = OPINT;
      192       192    3               lp->em_u.em_ioper = argval;
      193       193    3            } else
      194       194    2               lp->em_optyp = OPSYMBOL;
      195       195    2         }
      196       196    1        }
      197       197
      198       198             dopseudo() {
      199       199    1        #include <setjmp:h>
      200       215    1         register b,t;
      201       216    1         register FULL n;
      202       217    1         register long save;
      203       218    1         word romcont[MAXROM+1];
      204       219    1         int nromwords;
      205       220    1         int rombit,rommask;
      206       221    1         unsigned dummy,stackupto();
      207       222    1         extern jmp_buf environment;                     /* declared in  main */
      208       223    1
      209       224    1         if (nextispseu==0 || nemlines>0)
      210       225    1             error ("No table entry for line number=%d instruct=%d",
      211       226    1                     debug_num, emlines[0].em_instr);
      212       227    1         nextispseu=0;
      213       228    1         switch(savetab1) {
      214       229    2         case sp_ilb1:
      215       230    2         case sp_ilb2:
      216       231    2            swtxt();
      217       232    2            dummy = stackupto(&fakestack[stackheight-1],maxply,TRUE);
      218       233    2            cleanregs();
      219       234    2            strarg(savetab1);
      220       235    2            newilb(argstr);
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=7  
      221       236    2        #ifndef NDEBUG
      222       237    2            { extern int Debug; extern char * strtdebug;
      223       238    3            if (strcmp(strtdebug,argstr)==0)
      224       239    3               Debug = strtdebug[-2]-'0';
      225       240    3            }
      226       241    2        #endif
      227       242    2            return;
      228       243    2         case sp_dlb1:
      229       244    2         case sp_dlb2:
      230       245    2         case sp_dnam:
      231       246    2            strarg(savetab1);
      232       247    2            savelab();
      233       248    2            return;
      234       249    2         case sp_fpseu:
      235       250    2            break;
      236       251    2         case EOF:
      237       252    2            swtxt();
      238       253    2            in_finish();
      239       254    2            out_finish();
      240       255    2            popstr(0);
      241       256    2            tstoutput();
      242       257    2         longjmp(environment, 1);                        /* jump to main */
      243       258    2         default:
      244       259    2            error("Unknown opcode %d",savetab1);
      245       260    2         }
      246       261    1         switch (opcode) {
      247       262    2         case ps_hol:
      248       263    2            sprintf(labstr,hol_fmt,++holno);
      249       264    2         case ps_bss:
      250       265    2            getarg(cst_ptyp);
      251       266    2            n = (FULL) argval;
      252       267    2            t = getarg(val_ptyp);
      253       268    2            save = argval;
      254       269    2            getarg(cst_ptyp);
      255       270    2            b = (int) argval;
      256       271    2            argval = save;
      257       272    2            bss(n,t,b);
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=8  
      258       273    2            break;
      259       274    2         case ps_con:
      260       275    2            switchseg(SEGCON);
      261       276    2            dumplab();
      262       277    2            con(getarg(val_ptyp));
      263       278    2            while ((t = getarg(any_ptyp)) != sp_cend)
      264       279    2               con(t);
      265       280    2            break;
      266       281    2         case ps_rom:
      267       282    2            switchseg(SEGROM);
      268       283    2            xdumplab();
      269       284    2            nromwords=0;
      270       285    2            rommask=0;
      271       286    2            rombit=1;
      272       287    2            t=getarg(val_ptyp);
      273       288    2            while (t!=sp_cend) {
      274       289    3               if (t==sp_cstx && nromwords<MAXROM) {
      275       290    4                  romcont[nromwords] = (word) argval;
      276       291    4                  rommask |= rombit;
      277       292    4               }
      278       293    3               nromwords++;
      279       294    3               rombit <<= 1;
      280       295    3               con(t);
      281       296    3               t=getarg(any_ptyp);
      282       297    3            }
      283       298    2            if (rommask != 0) {
      284       299    3               romcont[MAXROM]=rommask;
      285       300    3               enterglo(labstr,romcont);
      286       301    3            }
      287       302    2            labstr[0]=0;
      288       303    2            break;
      289       304    2         case ps_mes:
      290       305    2            getarg(ptyp(sp_cst2));
      291       306    2            if (argval == ms_emx) {
      292       307    3               getarg(ptyp(sp_cst2));
      293       308    3               if (argval != TEM_WSIZE)
      294       309    3                  fatal("bad word size");
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=9  
      295       310    3               getarg(ptyp(sp_cst2));
      296       311    3               if (argval != TEM_PSIZE)
      297       312    3                  fatal("bad pointer size");
      298       313    3               if ( getarg(any_ptyp)!=sp_cend )
      299       314    3                  fatal("too many parameters");
      300       315    3        #ifdef REGVARS
      301       316    3            } else if (argval == ms_gto) {
      302       317    3               getarg(ptyp(sp_cend));
      303       318    3               if (!regallowed)
      304       319    3                  error("mes 3 not allowed here");
      305       320    3               fixregvars(TRUE);
      306       321    3               regallowed=0;
      307       322    3            } else if (argval == ms_reg) {
      308       323    3               long r_off;
      309       324    3               int r_size,r_type,r_score;
      310       325    3               struct regvar *linkreg();
      311       326    3
      312       327    3               if (!regallowed)
      313       328    3                  error("mes 3 not allowed here");
      314       329    3               if(getarg(ptyp(sp_cst2)|ptyp(sp_cend)) == sp_cend) {
      315       330    4                  fixregvars(FALSE);
      316       331    4                  regallowed=0;
      317       332    4               } else {
      318       333    4                  r_off = argval;
      319       334    4                     if (r_off >= 0)
      320       335    4                        r_off += TEM_BSIZE;
      321       336    4                  getarg(ptyp(sp_cst2));
      322       337    4                  r_size = argval;
      323       338    4                  getarg(ptyp(sp_cst2));
      324       339    4                  r_type = argval;
      325       340    4                  if (r_type<reg_any || r_type>reg_float)
      326       341    4                     fatal("Bad type in register message");
      327       342    4                  if(getarg(ptyp(sp_cst2)|ptyp(sp_cend)) == sp_cend)
      328       343    4                     r_score = 0;
      329       344    4                  else {
      330       345    5                     r_score = argval;
      331       346    5                     if ( getarg(any_ptyp)!=sp_cend )
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=10 
      332       347    5                        fatal("too many parameters");
      333       348    5                  }
      334       349    4                  tryreg(linkreg(r_off,r_size,r_type,r_score),r_type);
      335       350    4               }
      336       351    3        #endif
      337       352    3            } else
      338       353    2               mes((word)argval);
      339       354    2            break;
      340       355    2         case ps_exa:
      341       356    2            strarg(getarg(sym_ptyp));
      342       357    2            ex_ap(argstr);
      343       358    2            break;
      344       359    2         case ps_ina:
      345       360    2            strarg(getarg(sym_ptyp));
      346       361    2            in_ap(argstr);
      347       362    2            break;
      348       363    2         case ps_exp:
      349       364    2            strarg(getarg(ptyp(sp_pnam)));
      350       365    2            ex_ap(argstr);
      351       366    2            break;
      352       367    2         case ps_inp:
      353       368    2            strarg(getarg(ptyp(sp_pnam)));
      354       369    2            in_ap(argstr);
      355       370    2            break;
      356       371    2         case ps_pro:
      357       372    2            switchseg(SEGTXT);
      358       373    2            procno++;
      359       374    2            strarg(getarg(ptyp(sp_pnam)));
      360       375    2            newplb(argstr);
      361       376    2             strncpy (cur_func, argstr, 80);
      362       377    2            getarg(cst_ptyp);
      363       378    2            prolog((FULL)argval);
      364       379    2        #ifdef REGVARS
      365       380    2            regallowed++;
      366       381    2        #endif
      367       382    2            break;
      368       383    2         case ps_end:
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=11 
      369       384    2            getarg(cst_ptyp | ptyp(sp_cend));
      370       385    2            cleanregs();
      371       386    2        #ifdef REGVARS
      372       387    2            unlinkregs();
      373       388    2        #endif
      374       389    2            tstoutput();
      375       390    2            end_of_function();
      376       391    2            break;
      377       392    2         default:
      378       393    2            error("No table entry for %d",savetab1);
      379       394    2         }
      380       395    1        }
      381       396
      382       397             /* ----- input ----- */
      383       398
      384       399             int getarg(typset) {
      385       400    1         register t,argtyp;
      386       401    1
      387       402    1         argtyp = t = table2();
      388       403    1         if (t == EOF)
      389       404    1            fatal("unexpected EOF");
      390       405    1         t -= sp_fspec;
      391       406    1         t = 1 << t;
      392       407    1         if ((typset & t) == 0)
      393       408    1            error("bad argument type %d",argtyp);
      394       409    1         return(argtyp);
      395       410    1        }
      396       411
      397       412             int table1() {
      398       413    1         register i;
      399       414    1
      400       415    1         i = get8();
      401       416    1         if (i < sp_fmnem+sp_nmnem && i >= sp_fmnem) {
      402       417    2            opcode = i;
      403       418    2            return(sp_fmnem);
      404       419    2         }
      405       420    1         if (i < sp_fpseu+sp_npseu && i >= sp_fpseu) {
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=12 
      406       421    2            opcode = i;
      407       422    2            return(sp_fpseu);
      408       423    2         }
      409       424    1         if (i < sp_filb0+sp_nilb0 && i >= sp_filb0) {
      410       425    2            argval = i - sp_filb0;
      411       426    2            return(sp_ilb2);
      412       427    2         }
      413       428    1         return(table3(i));
      414       429    1        }
      415       430
      416       431             int table2() {
      417       432    1         register i;
      418       433    1
      419       434    1         i = get8();
      420       435    1         if (i < sp_fcst0+sp_ncst0 && i >= sp_fcst0) {
      421       436    2            argval = i - sp_zcst0;
      422       437    2            return(sp_cstx);
      423       438    2         }
      424       439    1         return(table3(i));
      425       440    1        }
      426       441
      427       442             int table3(i) {
      428       443    1         word consiz;
      429       444    1
      430       445    1         switch(i) {
      431       446    2         case sp_ilb1:
      432       447    2            argval = get8();
      433       448    2            break;
      434       449    2         case sp_dlb1:
      435       450    2            dlbval = get8();
      436       451    2            break;
      437       452    2         case sp_dlb2:
      438       453    2            dlbval = get16();
      439       454    2            break;
      440       455    2         case sp_cst2:
      441       456    2            i = sp_cstx;
      442       457    2         case sp_ilb2:
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=13 
      443       458    2            argval = get16();
      444       459    2            break;
      445       460    2         case sp_cst4:
      446       461    2            i = sp_cstx;
      447       462    2            argval = get32();
      448       463    2            break;
      449       464    2         case sp_dnam:
      450       465    2         case sp_pnam:
      451       466    2         case sp_scon:
      452       467    2            getstring();
      453       468    2            break;
      454       469    2         case sp_doff:
      455       470    2            offtyp = getarg(sym_ptyp);
      456       471    2            getarg(cst_ptyp);
      457       472    2            break;
      458       473    2         case sp_icon:
      459       474    2         case sp_ucon:
      460       475    2         case sp_fcon:
      461       476    2            getarg(cst_ptyp);
      462       477    2            consiz = (word) argval;
      463       478    2            getstring();
      464       479    2            argval = consiz;
      465       480    2            break;
      466       481    2         }
      467       482    1         return(i);
      468       483    1        }
      469       484
      470       485             int get16() {
      471       486    1         register int l_byte, h_byte;
      472       487    1
      473       488    1         l_byte = get8();
      474       489    1         h_byte = get8();
      475       490    1        #ifdef TM_L66
      476       491    1         if ( h_byte>= 256 ) h_byte -= 512;
      477       492    1         return l_byte | (h_byte<<9);
      478       493    1        #else
      479       494   *S*        if ( h_byte>=128 ) h_byte -= 256 ;
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=14 
      480       495   *S*        return l_byte | (h_byte*256) ;
      481       496   *S*       #endif
      482       497    1        }
      483       498
      484       499             long get32() {
      485       500    1         register long l;
      486       501    1         register int h_byte;
      487       502    1
      488       503    1        #ifdef TM_L66
      489       504    1         l = get8();   l |= (get8()<<9);      l |= get8()<<18;
      490       505    1         h_byte = get8();
      491       506    1         if ( h_byte >= 256 ) h_byte -= 512;
      492       507    1         return l | (h_byte<<27);
      493       508    1        #else
      494       509   *S*        l = get8();
      495       510   *S*        l |= ((unsigned) get8())*256 ;
      496       511   *S*        l |= get8()*256L*256L ;
      497       512   *S*        h_byte = get8() ;
      498       513   *S*        if ( h_byte>=128 ) h_byte -= 256 ;
      499       514   *S*        return l | (h_byte*256L*256*256L) ;
      500       515   *S*       #endif
      501       516    1        }
      502       517
      503       518             getstring() {
      504       519    1         register char *p;
      505       520    1         register n;
      506       521    1
      507       522    1         getarg(cst_ptyp);
      508       523    1         if (argval < 0 || argval > MAXSTR-1)
      509       524    1            fatal("string/identifier too long");
      510       525    1         strsiz = n = (int) argval;
      511       526    1         p = str;
      512       527    1         while (--n >= 0)
      513       528    1            *p++ = get8();
      514       529    1         *p++ = '\0';
      515       530    1        }
      516       531
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=15 
      517       532             char *strarg(t) {
      518       533    1         register char *p;
      519       534    1
      520       535    1         switch (t) {
      521       536    2         case sp_ilb1:
      522       537    2         case sp_ilb2:
      523       538    2        #ifdef fmt_ilb
      524       539   *S*           fmt_ilb(procno,((int) argval),argstr);
      525       540   *S*       #else
      526       541    2            sprintf(argstr,ilb_fmt,procno,(int)argval);
      527       542    2        #endif
      528       543    2            break;
      529       544    2         case sp_dlb1:
      530       545    2         case sp_dlb2:
      531       546    2            sprintf(argstr,dlb_fmt,dlbval);
      532       547    2            break;
      533       548    2         case sp_cstx:
      534       549    2            sprintf(argstr,cst_fmt,(FULL)argval);
      535       550    2            break;
      536       551    2         case sp_dnam:
      537       552    2         case sp_pnam:
      538       553    2        #ifdef fmt_id
      539       554    2            fmt_id(str,argstr);
      540       555    2        #else
      541       556   *S*           p = argstr;
      542       557   *S*           if (strsiz < 8 || str[0] == id_first)
      543       558   *S*              *p++ = id_first;
      544       559   *S*           sprintf(p,"%.*s",strsiz,str);
      545       560   *S*       #endif
      546       561    2            break;
      547       562    2         case sp_doff:
      548       563    2            strarg(offtyp);
      549       564    2            for (p = argstr; *p; p++)
      550       565    2               ;
      551       566    2            if ((FULL) argval >= 0)
      552       567    2               *p++ = '+';
      553       568    2            else {
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=16 
      554       569    3               *p++ = '-';
      555       570    3               argval = - (FULL) argval;
      556       571    3            }
      557       572    2            sprintf(p,off_fmt,(FULL)argval);
      558       573    2            break;
      559       574    2         case sp_cend:
      560       575    2            return("");
      561       576    2         }
      562       577    1         return(mystrcpy(argstr));
      563       578    1        }
      564       579
      565       580             bss(n,t,b) FULL n; {
      566       581    1         register long s;
      567       582    1
      568       583    1         if (n % TEM_WSIZE)
      569       584    1                 { fprintf(stderr,"Oops: BSS %d! Ignored.\n", n);
      570       585    2                  return; }
      571       586    1         if (b==0
      572       587    1        #ifdef BSS_INIT
      573       588    1             || (t==sp_cstx && argval==BSS_INIT)
      574       589    1        #endif BSS_INIT
      575       590    1            ) {
      576       591    2            switchseg(SEGBSS);
      577       592    2            newlbss(labstr,n);
      578       593    2            labstr[0]=0;
      579       594    2            return;
      580       595    2         }
      581       596    1         switchseg(SEGCON);
      582       597    1         dumplab();
      583       598    1         while (n > 0)
      584       599    1            n -= (s = con(t));
      585       600    1         if (s % TEM_WSIZE)
      586       601    1            fatal("bad BSS initializer");
      587       602    1        }
      588       603
      589       604             long con(t) {
      590       605    1         register i;
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=17 
      591       606    1
      592       607    1         strarg(t);
      593       608    1         switch (t) {
      594       609    2         case sp_ilb1:
      595       610    2         case sp_ilb2:
      596       611    2         case sp_pnam:
      597       612    2            part_flush();
      598       613    2            con_ilb(argstr);
      599       614    2            return((long)TEM_PSIZE);
      600       615    2         case sp_dlb1:
      601       616    2         case sp_dlb2:
      602       617    2         case sp_dnam:
      603       618    2         case sp_doff:
      604       619    2            part_flush();
      605       620    2            con_dlb(argstr);
      606       621    2            return((long)TEM_PSIZE);
      607       622    2         case sp_cstx:
      608       623    2            con_part(TEM_WSIZE,(word)argval);
      609       624    2            return((long)TEM_WSIZE);
      610       625    2         case sp_scon:
      611       626    2            for (i = 0; i < strsiz; i++)
      612       627    2               con_part(1,(word) str[i]);
      613       628    2            return((long)strsiz);
      614       629    2         case sp_icon:
      615       630    2         case sp_ucon:
      616       631    2            if (argval > TEM_WSIZE) {
      617       632    3               part_flush();
      618       633    3               con_mult((word)argval);
      619       634    3            } else {
      620       635    3               con_part((int)argval,(word)strtoul(str,(char*)0,0));
      621       636    3            }
      622       637    2            return(argval);
      623       638    2         case sp_fcon:
      624       639    2            part_flush();
      625       640    2            con_float();
      626       641    2            return(argval);
      627       642    2         }
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=18 
      628       643    1         assert(FALSE);
      629       644    1         /* NOTREACHED */
      630       645    1        }
      631       646
      632       647             swtxt() {
      633       648    1         switchseg(SEGTXT);
      634       649    1        }
      635       650
      636       651             switchseg(s) {
      637       652    1
      638       653    1         if (s == curseg)
      639       654    1            return;
      640       655    1         part_flush();
      641       656    1         if ((curseg = s) >= 0)
      642       657    1            fprintf(codefile,"%d %d\n",ZUSE,s);
      643       658    1        }
      644       659
      645       660             savelab() {
      646       661    1         register char *p,*q;
      647       662    1
      648       663    1         part_flush();
      649       664    1         if (labstr[0]) {
      650       665    2            dlbdlb(argstr,labstr);
      651       666    2            return;
      652       667    2         }
      653       668    1         p = argstr;
      654       669    1         q = labstr;
      655       670    1         while (*q++ = *p++)
      656       671    1            ;
      657       672    1        }
      658       673
      659       674             dumplab() {
      660       675    1
      661       676    1         if (labstr[0] == 0)
      662       677    1            return;
      663       678    1         assert(part_size == 0);
      664       679    1         newdlb(labstr);
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=19 
      665       680    1         labstr[0] = 0;
      666       681    1        }
      667       682
      668       683             xdumplab() {
      669       684    1
      670       685    1         if (labstr[0] == 0)
      671       686    1            return;
      672       687    1         assert(part_size == 0);
      673       688    1         newdlb(labstr);
      674       689    1        }
      675       690
      676       691             part_flush() {
      677       692    1
      678       693    1         /*
      679       694    1          * Each new data fragment and each data label starts at
      680       695    1          * a new target machine word
      681       696    1          */
      682       697    1         if (part_size == 0)
      683       698    1            return;
      684       699    1         con_cst(part_word);
      685       700    1         part_size = 0;
      686       701    1         part_word = 0;
      687       702    1        }
      688       703
      689       704             string holstr(n) word n; {
      690       705    1
      691       706    1         sprintf(str,hol_off,n,holno);
      692       707    1         return(mystrcpy(str));
      693       708    1        }
      694       709
      695       710
      696       711             /* ----- machine dependent routines ----- */
      697       712
      698       713             #if defined(TS_CP6) && defined(__STDC__)
      699       714             #pragma LIST INCLUDE_ON
      700       715             #endif
      701       716
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=20 
      702       717             #include        "mach.c"
        1+      718             /*M* mach:c   -- machine specific tailoring for CP-6          */
        2+      719
        3+      720             #include <codegen:h>   /* defines Z... as number values. */
        1+      721             #define ZLDG        31
        2+      722             #define ZLCG        32
        3+      723             #define ZSTG        33
        4+      724             #define ZLDX        34
        5+      725             #define ZSTX        35
        6+      726             #define ZADX        36
        7+      727             #define ZASX        37
        8+      728             #define ZLXL        38
        9+      729             #define ZSXL        39
       10+      730             #define ZEAX        40
       11+      731             #define ZEAG        41
       12+      732             #define ZLDP        42
       13+      733             #define ZSTP        43
       14+      734             #define ZEPPR       44
       15+      735             #define ZADG        45
       16+      736             #define ZADLG       46
       17+      737             #define ZSBG        47
       18+      738             #define ZSBLG       48
       19+      739             #define ZASG        49
       20+      740             #define ZCMPG       50
       21+      741             #define ZANG        51
       22+      742             #define ZORG        52
       23+      743             #define ZERG        53
       24+      744             #define ZERSG       54
       25+      745             #define ZGLS        55
       26+      746             #define ZGLR        56
       27+      747             #define ZGRS        57
       28+      748             #define ZGRL        58
       29+      749             #define ZLDA        59
       30+      750             #define ZLDQ        60
       31+      751             #define ZSTQ        61
       32+      752             #define ZADLQ       62
       33+      753             #define ZSBQ        63
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=21 
       34+      754             #define ZSBLA       64
       35+      755             #define ZSBLQ       65
       36+      756             #define ZANQ        66
       37+      757             #define ZQLS        67
       38+      758             #define ZQRS        68
       39+      759             #define ZLDE        69
       40+      760             #define ZSTZ        70
       41+      761             #define ZAOS        71
       42+      762             #define ZSZN        72
       43+      763             #define ZSTI        73
       44+      764             #define ZMPY        74
       45+      765             #define ZDIV        75
       46+      766             #define ZDVF        76
       47+      767             #define ZNEG        77
       48+      768             #define ZCMPA       78
       49+      769             #define ZCMPQ       79
       50+      770             #define ZARL        80
       51+      771             #define ZLLS        81
       52+      772             #define ZLRS        82
       53+      773             #define ZLRL        83
       54+      774             #define ZFLD        84
       55+      775             #define ZFST        85
       56+      776             #define ZFAD        86
       57+      777             #define ZFSB        87
       58+      778             #define ZFMP        88
       59+      779             #define ZFDV        89
       60+      780             #define ZFDI        90
       61+      781             #define ZFCMP       91
       62+      782             #define ZFSZN       92
       63+      783             #define ZDFLD       93
       64+      784             #define ZDFST       94
       65+      785             #define ZDFAD       95
       66+      786             #define ZDFSB       96
       67+      787             #define ZDFMP       97
       68+      788             #define ZDFDV       98
       69+      789             #define ZDFDI       99
       70+      790             #define ZDFCMP     100
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=22 
       71+      791             #define ZFNEG      101
       72+      792             #define ZUFA       102
       73+      793             #define ZLDAQ      103
       74+      794             #define ZSTAQ      104
       75+      795             #define ZLDX0      105
       76+      796             #define ZLDX7      106
       77+      797             #define ZEPPR0     107
       78+      798             #define ZEPPR1     108
       79+      799             #define ZEPPR7     109
       80+      800             #define ZLDP0      110
       81+      801             #define ZSTP0      111
       82+      802             #define ZSTP7      112
       83+      803             #define ZA9BD      113
       84+      804             #define ZNOP       114
       85+      805             #define ZTSX0      115
       86+      806             #define ZTSX1      116
       87+      807             #define ZTSX2      117
       88+      808             #define ZTMI       118
       89+      809             #define ZTMOZ      119
       90+      810             #define ZTEQ       120
       91+      811             #define ZTNE       121
       92+      812             #define ZTPL       122
       93+      813             #define ZTZE       123
       94+      814             #define ZTNC       124
       95+      815             #define ZTRC       125
       96+      816             #define ZTTN       126
       97+      817             #define ZTTF       127
       98+      818             #define ZTRCANE    128
       99+      819             #define ZTNCOEQ    129
      100+      820             #define ZTPNZ      130
      101+      821             #define ZTRA       131
      102+      822             #define ZA9BDX7    132
      103+      823             #define ZA9BDX7P7  133
      104+      824             #define ZMLR4      134
      105+      825             #define ZMLR8      135
      106+      826             #define ZMLR1      136
      107+      827             #define ZMLR       137
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=23 
      108+      828             #define ZMLRX      138
      109+      829             #define ZMRL       139
      110+      830             #define ZMRLX      140
      111+      831             #define ZCMPC      141
      112+      832             #define ZCMPCX     142
      113+      833             #define ZSCM       143
      114+      834             #define ZSCMX      144
      115+      835             #define ZSCMR      145
      116+      836             #define ZSCMRX     146
      117+      837             #define ZBLT       147
      118+      838             #define ZBLE       148
      119+      839             #define ZBEQ       149
      120+      840             #define ZBNE       150
      121+      841             #define ZBGE       151
      122+      842             #define ZBGT       152
      123+      843             #define ZCIF       153
      124+      844             #define ZCUF       154
      125+      845             #define ZCID       155
      126+      846             #define ZCUD       156
      127+      847             #define ZCFI       157
      128+      848             #define ZCFU       158
      129+      849             #define ZCDI       159
      130+      850             #define ZCDU       160
      131+      851             #define ZUSE       161
      132+      852             #define ZFIL       162
      133+      853             #define ZLIN       163
      134+      854             #define ZLNI       164
      135+      855             #define ZHALF      165
      136+      856             #define ZOCT       166
      137+      857             #define ZDEC       167
      138+      858             #define ZPTR       168
      139+      859             #define ZEPTR      169
      140+      860             #define ZNULL      170
      141+      861             #define ZFLOAT     171
      142+      862             #define ZDFLOAT    172
      143+      863             #define ZEQU       173
      144+      864             #define ZBSS       174
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=24 
      145+      865             #define ZDEF       175
      146+      866             #define ZDUMMY     176
      147+      867             #define ZERROR     999
      148+      868             #define PS_STMT_OP 177
      149+      869             #define PS_LBL_OP  178
      150+      870             #define PS_BLK_OP  179
      151+      871             #define PS_VAR_OP  180
      152+      872             #define PS_FUN_OP  181
      153+      873             #define PS_CTLN_OP 182
      154+      874             #define PS_SFUN_OP 183
      155+      875             #define PS_RFUN_OP 184
      156+      876             #define ZA           5
      157+      877             #define ZQ           6
      158+      878             #define ZAU          1
      159+      879             #define ZQU          2
      160+      880             #define ZDU          3
      161+      881             #define ZIC          4
      162+      882             #define ZAL          5
      163+      883             #define ZQL          6
      164+      884             #define ZDL          7
      165+      885             #define ZN           0
      166+      886             #define ZX0          8
      167+      887             #define ZX1          9
      168+      888             #define ZX2         10
      169+      889             #define ZX3         11
      170+      890             #define ZX4         12
      171+      891             #define ZX5         13
      172+      892             #define ZX6         14
      173+      893             #define ZX7         15
      174+      894             #define ZP0         16
      175+      895             #define ZP1         17
      176+      896             #define ZP2         18
      177+      897             #define ZP3         19
      178+      898             #define ZP4         20
      179+      899             #define ZP5         21
      180+      900             #define ZP6         22
      181+      901             #define ZP7         23
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=25 
        4+      902             #include <zb_cp6_object:h>
        1+      903             /*M* zb_cp6_object  --   #defines from B$OBJECT_C                */
        2+      904
        3+      905             /*P* NAME:       CP-6 Object Language Defines
        4+      906                  PURPOSE:    To provide a means of communicating CP6 object
        5+      907                              language information from C programs to PL6
        6+      908                              programs.
        7+      909
        8+      910                  DESCRIPTION:
        9+      911                              This file contains defines for the following
       10+      912                              object language features of CP-6:
       11+      913
       12+      914                              VREBL_DATATYPES   -- variable datatypes
       13+      915                              B$STTYPESUBS      -- statement types
       14+      916
       15+      917             */
       16+      918
       17+      919             #ifndef  __ZB__CP6_OBJECT__
       18+      920             #define  __ZB__CP6_OBJECT__
       19+      921
       20+      922             /***
       21+      923              ***       VREBL_DATATYPES
       22+      924              ***/
       23+      925
       24+      926
       25+      927             #define NO_DATATYPE              0      /* No data type specified */
       26+      928             #define SBIN_DATATYPE            1      /* Real binary fixed single precision
                               */
       27+      929             #define DFIX_DATATYPE            2      /* Real binary fixed double precision
                               */
       28+      930             #define SFLT_DATATYPE            3      /* Real binary float single precision
                               */
       29+      931             #define DFLT_DATATYPE            4      /* Real binary float double precision
                               */
       30+      932             #define SCFIX_DATATYPE           5 /* Comlex binary fixed single precision */
       31+      933             #define DCFIX_DATATYPE           6 /* Comlex binary fixed double precision */
       32+      934             #define COMPLEX_DATATYPE         7 /* Comlex binary float single precision */
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=26 
       33+      935             #define DCOMPLEX_DATATYPE        8 /* Comlex binary float double precision */
       34+      936             #define PDLA_DATATYPE            9 /* Packed decimal fixed, lead ASCII sign */

       35+      937             #define PDFLT_DATATYPE          10      /* Packed decimal float */
       36+      938             #define PDCLA_DATATYPE          11 /* Packed decimal fixed complex, lead ASCII
                                sign */
       37+      939             #define PDCFLT_DATATYPE         12      /* Packed decimal float complex */
       38+      940             #define POINTER_DATATYPE        13      /* Pointer */
       39+      941             #define OFFSET_DATATYPE         14      /* Offset */
       40+      942             #define LABEL_DATATYPE          15      /* Label */
       41+      943             #define ENTRY_DATATYPE          16      /* Entry */
       42+      944             #define STRUCTURE_DATATYPE      17      /* Structure */
       43+      945             #define AREA_DATATYPE           18      /* Area */
       44+      946             #define BIT_DATATYPE            19      /* Bit string */
       45+      947             #define VBIT_DATATYPE           20      /* Varying bit string */
       46+      948             #define CHAR_DATATYPE           21      /* Character string */
       47+      949             #define VCHAR_DATATYPE          22      /* Varying character string */
       48+      950             #define TEXTC_DATATYPE          22      /* Different name for VCHAR */
       49+      951             #define FILE_DATATYPE           23      /* File */
       50+      952             #define UBIN_DATATYPE           24      /* UBIN */
       51+      953             #define PDTA_DATATYPE           25 /* Packed decimal fixed, trail ASCII sign *
                               /
       52+      954             #define ACHAR_DATATYPE          26      /* Adjustable character string */
       53+      955             #define ABIT_DATATYPE           27      /* Adjustable bit string */
       54+      956             #define EPTR_DATATYPE           28      /* EPTR */
       55+      957             #define COMP1_DATATYPE          29      /* 16 bit signed integer */
       56+      958             #define COMP2_DATATYPE          30      /* 32 bit signed integer */
       57+      959             #define PDTE_DATATYPE           31 /* Packed decimal fixed, trail EBCDIC sign
                               */
       58+      960             #define INDEX1_DATATYPE         32      /* INDEX-1 */
       59+      961             #define INDEX2_DATATYPE         33      /* INDEX-2 */
       60+      962             #define FEVERY_DATATYPE         34      /* Fortran every */
       61+      963             #define FLOGICAL_DATATYPE       35      /* Fortran logical */
       62+      964             #define FANY_DATATYPE           36      /* Fortran any */
       63+      965             #define FLABEL_DATATYPE         37      /* Fortran label */
       64+      966             #define FUCB_DATATYPE           38      /* Fortran UCB */
       65+      967             #define INTCNST_DATATYPE        39      /* Intrinsic constant */
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=27 
       66+      968             #define PDNS_DATATYPE           40      /* Packed decimal fixed, no sign */
       67+      969             #define UDNS_DATATYPE           41      /* Unpacked decimal fixed, no sign */
       68+      970             #define UDLS_DATATYPE           42      /* Unpacked decimal fixed, lead sign *
                               /
       69+      971             #define UDTS_DATATYPE           43      /* Unpacked decimal fixed, trail sign
                               */
       70+      972             #define UDLO_DATATYPE           44 /* Unpacked decimal fixed, lead over punche
                               d sign */
       71+      973             #define UDTO_DATATYPE           45 /* Unpacked decimal fixed, trail over punch
                               ed sign */
       72+      974             #define ASTRUCTURE_DATATYPE     46      /* Adjustable structure */
       73+      975             #define VECTOR_DATATYPE         47      /* Vector - also used for
       74+      976                                                        an ARES type array       */
       75+      977             #define LIST_DATATYPE           47      /* List - used for an ARES
       76+      978                                                        type array               */
       77+      979             #define REMEMBER_DATATYPE       48      /* Remember */
       78+      980             #define VARVECTOR_DATATYPE      48      /* ARES type variable length
       79+      981                                                        array                   */
       80+      982             #define VLIST_DATATYPE          48      /* ARES type variable length
       81+      983                                                        array                   */
       82+      984             #define DSCR_DATATYPE           49      /* Descriptor */
       83+      985             #define UDFLT_DATATYPE          50      /* Unpacked decimal float */
       84+      986             #define PDLE_DATATYPE           51 /* Packed decimal fixed, lead EBCDIC sign *
                               /
       85+      987             #define ENUMTYPE_DATATYPE       52      /* Enumerated Type */
       86+      988             #define SET_DATATYPE            53      /* Set */
       87+      989             #define DATE_DATATYPE           54      /* Date same as PDLA, len 16,
       88+      990                                                        byte aligned             */
       89+      991             #define UTS_DATATYPE            55      /* UTS - a UBIN value */
       90+      992             #define TEXTH_DATATYPE          56      /* Text with half-word size */
       91+      993             #define TIME_DATATYPE           57      /* Time in 1/100 sec, PDLA,
       92+      994                                                        len 16, byte aligned     */
       93+      995             /* 58-59 unused */
       94+      996             #define NULL_DATATYPE           60      /* Null entry */
       95+      997             #define VIRTUAL_ARRAY_DATATYPE 61       /* Virtural array dimension */
       96+      998             #define REAL_ARRAY_DATATYPE     62      /* Array dimension entry */
       97+      999             /* 63 unused */
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=28 
       98+     1000
       99+     1001
      100+     1002
      101+     1003             /***
      102+     1004              ***    ADDRTYPEs
      103+     1005              ***/
      104+     1006
      105+     1007
      106+     1008             #define STATIC_ADDRTYPE 1
      107+     1009             #define   AUTO_ADDRTYPE 2
      108+     1010             #define SYMREF_ADDRTYPE 3
      109+     1011             #define SYMDEF_ADDRTYPE 4
      110+     1012             #define  FIELD_ADDRTYPE 5
      111+     1013             #define  BASED_ADDRTYPE 6
      112+     1014
      113+     1015
      114+     1016             /***
      115+     1017              ***    B$STTYPESUBS
      116+     1018              ***/
      117+     1019
      118+     1020
      119+     1021             #define S_NULL               0
      120+     1022             #define S_ASSIGNMENT         1
      121+     1023             #define S_CALL               2
      122+     1024             #define S_MONITOR_CALL       3
      123+     1025             #define S_ASL_CALL           4
      124+     1026             #define S_IF                 5
      125+     1027             #define S_ELSE               6
      126+     1028             #define S_CASE               7
      127+     1029             #define S_GOTO               8
      128+     1030             #define S_RETURN             9
      129+     1031             #define S_ALTRETURN         10
      130+     1032             #define S_REMEMBER          11
      131+     1033             #define S_UNWIND            12
      132+     1034             #define S_REPORT_WRITER     13
      133+     1035             #define S_ALTER             14
      134+     1036             #define S_EVALUATE          15
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=29 
      135+     1037             #define S_INTRINSIC_CALL    16
      136+     1038             #define S_SPOIL             17
      137+     1039             #define S_GOTO_SUBSCRIPTED  18
      138+     1040             #define S_ASSIGNED_GOTO     19
      139+     1041             #define S_IF_LOGICAL        20
      140+     1042             #define S_IF_ARITHMETIC     21
      141+     1043             #define S_PAUSE             22
      142+     1044             #define S_PERFORM           23
      143+     1045             #define S_STOP              24
      144+     1046             #define S_I_O               25
      145+     1047             #define S_ELSE_IF           26
      146+     1048             #define S_ASSIGNED          27
      147+     1049             #define S_DO_SELECT         28
      148+     1050             #define S_DO_SELECT_END     29
      149+     1051             #define S_SELECT            30
      150+     1052             #define S_DO_UNINHIBIT      31
      151+     1053             #define S_INSPECT           32
      152+     1054             #define S_DO_UNTIL          33
      153+     1055             #define S_DO_INDEX          34
      154+     1056             #define S_DO_WHILE          35
      155+     1057             #define S_DO_CASE           36
      156+     1058             #define S_DO                37
      157+     1059             #define S_DO_INHIBIT        38
      158+     1060             #define S_SET               39
      159+     1061             #define S_EXIT              40
      160+     1062             #define S_DO_UNINHIBIT_END  41
      161+     1063             #define S_PURGE             42
      162+     1064             #define S_DO_UNTIL_END      43
      163+     1065             #define S_DO_INDEX_END      44
      164+     1066             #define S_DO_WHILE_END      45
      165+     1067             #define S_DO_CASE_END       46
      166+     1068             #define S_DO_END            47
      167+     1069             #define S_DO_INHIBIT_END    48
      168+     1070             #define S_RELEASE           49
      169+     1071             #define S_SEND              50
      170+     1072             #define S_DATA_BASE         51
      171+     1073             #define S_CANCEL            52
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=30 
      172+     1074             #define S_INITIALIZE        53
      173+     1075             #define S_MERGE             54
      174+     1076             #define S_RECEIVE           55
      175+     1077             #define S_SEARCH            56
      176+     1078             #define S_SORT              57
      177+     1079             #define S_STRING            58
      178+     1080             #define S_UNSTRING          59
      179+     1081             #define S_USE               60
      180+     1082             #define S_LOAD              61
      181+     1083             /* 62 - 100 UNUSED */
      182+     1084             #define S_PROC             101
      183+     1085             #define S_PROC_END         102
      184+     1086             #define S_ENTRY            103
      185+     1087             #define S_MISC             104
      186+     1088
      187+     1089
      188+     1090
      189+     1091
      190+     1092             #endif __ZB_CP6_OBJECT__
        5+     1093
        6+     1094             #define ATW(n) (((n)+3)/4)
        7+     1095             #define ATD(n) (((n)+7)/8*8)
        8+     1096
        9+     1097             int main_func = 0;
       10+     1098             int have_auto_structure = 0;
       11+     1099
       12+     1100             /*
       13+     1101              * machine dependent back end routines for the L66
       14+     1102              */
       15+     1103
       16+     1104             con_part(sz,w) register sz; word w; {
       17+     1105    1
       18+     1106    1                while (part_size % sz)
       19+     1107    1                        part_size++;
       20+     1108    1                if (part_size == 4)
       21+     1109    1                        part_flush();
       22+     1110    1                if (sz == 1) {
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=31 
       23+     1111    2                        w &= 0x1FF;
       24+     1112    2                        w <<= 9*(3-part_size);
       25+     1113    2                        part_word |= w;
       26+     1114    2                } else if (sz == 2) {
       27+     1115    2                        w &= 0x3FFFF;
       28+     1116    2                        if (part_size == 0)
       29+     1117    2                                w <<= 18;
       30+     1118    2                        part_word |= w;
       31+     1119    2                } else {
       32+     1120    2                        assert(sz == 4);
       33+     1121    2                        part_word = w;
       34+     1122    2                }
       35+     1123    1                part_size += sz;
       36+     1124    1        }
       37+     1125
       38+     1126             con_mult(sz) word sz; {
       39+     1127    1
       40+     1128    1                if (sz != 4)
       41+     1129    1                        fatal("bad icon/ucon size");
       42+     1130    1                fprintf(codefile, "%d %s\n", ZDEC, str);
       43+     1131    1        }
       44+     1132
       45+     1133             con_float() {
       46+     1134    1
       47+     1135    1                if (argval==4)
       48+     1136    1                   fprintf(codefile, "%d %s\n", ZFLOAT, str);
       49+     1137    1                else if (argval==8)
       50+     1138    1                   fprintf(codefile, "%d %s\n", ZDFLOAT, str);
       51+     1139    1                else
       52+     1140    1                   fatal("bad fcon size");
       53+     1141    1        }
       54+     1142
       55+     1143             #ifdef REGVARS
       56+     1144
       57+     1145             regscore(off,size,typ,score,totyp)
       58+     1146                     long off;
       59+     1147             {
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=32 
       60+     1148    1                if (score == 0) return -1;
       61+     1149    1                switch(typ) {
       62+     1150    2                        case reg_float:
       63+     1151    2                                return -1;
       64+     1152    2                        case reg_pointer:
       65+     1153    2                                if (size != 4 || totyp != reg_pointer) return -1;
       66+     1154    2                                score *= 2;
       67+     1155    2                                break;
       68+     1156    2                        case reg_loop:
       69+     1157    2                                score += 5;
       70+     1158    2                                /* fall through .. */
       71+     1159    2                        case reg_any:
       72+     1160    2                                if (size != 4 || totyp == reg_pointer) return -1;
       73+     1161    2                                break;
       74+     1162    2                }
       75+     1163    1                if (off >= 0) {
       76+     1164    2                        /* parameters must be initialized with an instruction
       77+     1165    2                         * like "ldg q,0,dl", which costs 1 word.
       78+     1166    2                         */
       79+     1167    2                        score -= 1;
       80+     1168    2                }
       81+     1169    1                score -= 1; /* take save/restore into account */
       82+     1170    1                return score;
       83+     1171    1        }
       84+     1172             struct regsav_t {
       85+     1173    1                char    *rs_reg;        /* e.g. "a3" or "d5" */
       86+     1174    1                long    rs_off;         /* offset of variable */
       87+     1175    1                int     rs_size;        /* 2 or 4 bytes */
       88+     1176    1        } regsav[9];
       89+     1177
       90+     1178
       91+     1179             int regnr;
       92+     1180
       93+     1181             i_regsave()
       94+     1182             {
       95+     1183    1                regnr = 0;
       96+     1184    1        }
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=33 
       97+     1185
       98+     1186             f_regsave()
       99+     1187             {
      100+     1188    1                register struct regsav_t *p;
      101+     1189    1
      102+     1190    1                for (p = regsav; p < &regsav[regnr]; p++) {
      103+     1191    2                        fprintf(codefile," pushg %s\n",p->rs_reg);
      104+     1192    2                }
      105+     1193    1                /* initialise register-parameters */
      106+     1194    1                for (p = regsav; p < &regsav[regnr]; p++) {
      107+     1195    2                        if (p->rs_off >= 0) {
      108+     1196    3                                fprintf(codefile, "%d %s,%ld,,%d)\n",
      109+     1197    3                                        ZLDG,
      110+     1198    3                                        p->rs_reg,
      111+     1199    3                                        p->rs_off/4+4,
      112+     1200    3                                        ZP2);
      113+     1201    3                        }
      114+     1202    2                }
      115+     1203    1        }
      116+     1204
      117+     1205
      118+     1206             regsave(str,off,size)
      119+     1207                     char *str;
      120+     1208                     long off;
      121+     1209             {
      122+     1210    1           return;  /* until we REALLY have reg vars! */
      123+     1211    1                assert (regnr < 9);
      124+     1212    1                regsav[regnr].rs_reg = str;
      125+     1213    1                regsav[regnr].rs_off = off;
      126+     1214    1                regsav[regnr++].rs_size = size;
      127+     1215    1                fprintf(codefile, "*Local %ld into %s\n",off,str);
      128+     1216    1        }
      129+     1217
      130+     1218             regreturn()
      131+     1219             {
      132+     1220    1                register struct regsav_t *p;
      133+     1221    1
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=34 
      134+     1222    1                for (p = &regsav[regnr-1]; p >= regsav; p--) {
      135+     1223    2                        fprintf(codefile," popg %s\n",p->rs_reg);
      136+     1224    2                }
      137+     1225    1                if (main_func)
      138+     1226    1                     fprintf(codefile, "%d _XBI_MARET\n", ZTSX2);
      139+     1227    1                else fprintf(codefile, "%d _XBC_FARET\n", ZTSX2);
      140+     1228    1        }
      141+     1229
      142+     1230             #endif
      143+     1231
      144+     1232             prolog(nlocals) FULL nlocals;
      145+     1233             {
      146+     1234    1                int nargs; char aargs;
      147+     1235    1                extern int zb_auto_info[8];
      148+     1236    1
      149+     1237    1                main_func = 0;
      150+     1238    1                /* setting actual temp value used. */
      151+     1239    1                zb_auto_info[4] = ATD(zb_auto_info[3]) + ATD(nlocals);
      152+     1240    1                zb_auto_info[5] = zb_auto_info[6] = zb_auto_info[4];
      153+     1241    1                zb_auto_info[0] = zb_auto_info[4];
      154+     1242    1                if (strcmp(argstr,"main") == 0) main_func++;
      155+     1243    1                nargs = ((zb_auto_info[3]+3)>>2)-4;
      156+     1244    1                aargs = (nargs < 6)? '0'+nargs : 'N';
      157+     1245    1                fprintf(codefile, "%d _XBC_AUTO_%c\n%d $AUTOSIZE,%d\n",
      158+     1246    1                                        ZTSX0, aargs, ZHALF, nargs);
      159+     1247    1        }
      160+     1248
      161+     1249             end_of_function()
      162+     1250             {
      163+     1251    1              extern int zb_auto_info[8];
      164+     1252    1              fprintf(codefile, "%d $AUTOSIZE,%d\n", ZEQU, (zb_auto_info[6]+7)/8*2);
      165+     1253    1        }
      166+     1254
      167+     1255             mes(type) word type;
      168+     1256             {
      169+     1257    1          int argt;
      170+     1258    1
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=35 
      171+     1259    1          part_flush();
      172+     1260    1          switch ( (int)type ) {
      173+     1261    2          case ms_ext:
      174+     1262    2              for (;;) {
      175+     1263    3                 argt = getarg( ptyp(sp_cend) | ptyp(sp_pnam) | sym_ptyp );
      176+     1264    3                 if (argt == sp_cend) return;
      177+     1265    3                 strarg(argt);
      178+     1266    3                 fprintf(codefile, "%d %s\n", ZERROR, argstr);
      179+     1267    3                 break;
      180+     1268    3              }
      181+     1269    2          case ms_fun:
      182+     1270    2             {  /*  mes 16,<str>,<cst1>,<cst2>,<cst3>,<cst4> */
      183+     1271    3              int i;
      184+     1272    3              extern int zb_auto_info[8], zb_temp_info[10];
      185+     1273    3              zb_auto_info[0] = zb_auto_info[1] = zb_auto_info[2] = 0;
      186+     1274    3              zb_auto_info[3] = zb_auto_info[4] = zb_auto_info[5] = 0;
      187+     1275    3              zb_auto_info[6] = zb_auto_info[7] = 0;
      188+     1276    3              if ( getarg( ptyp(sp_cend) | ptyp(sp_scon) ) == sp_cend)
      189+     1277    3                return;
      190+     1278    3              fprintf(codefile, "%d %s,", PS_FUN_OP, str);
      191+     1279    3              for (i=0 ;; ) {
      192+     1280    4                 argt = getarg( ptyp(sp_cend) | cst_ptyp );
      193+     1281    4                 if (argt == sp_cend) break;
      194+     1282    4                 if (i<6)
      195+     1283    4                   zb_auto_info[i++] = argval;
      196+     1284    4              }
      197+     1285    3              fprintf(codefile,"%d,%d,%d,%d,%d\n",zb_auto_info[0],
      198+     1286    3                      zb_auto_info[1],zb_auto_info[2],
      199+     1287    3                      zb_auto_info[3],zb_auto_info[4]           );
      200+     1288    3              zb_auto_info[4] = ATD(zb_auto_info[3]) + ATD(zb_auto_info[4]);
      201+     1289    3              zb_auto_info[5] = zb_auto_info[6] = zb_auto_info[4];
      202+     1290    3              zb_temp_info[0] = zb_auto_info[4];
      203+     1291    3              return;
      204+     1292    3             }
      205+     1293    2          case ms_stmt:
      206+     1294    2             {  /*  mes 17,<cst1>,<cst2>,<cst3>              */
      207+     1295    3                int stmt[3], i;
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=36 
      208+     1296    3                stmt[0] = stmt[1] = stmt[2] = 0;
      209+     1297    3                for ( i=0 ;; i++ ) {
      210+     1298    4                   argt = getarg( ptyp(sp_cend) | cst_ptyp );
      211+     1299    4                   if (argt == sp_cend) break;
      212+     1300    4                   if (i<4) stmt[i] = argval;
      213+     1301    4                }
      214+     1302    3                fprintf(codefile, "%d %d,%d,%d\n", PS_STMT_OP,
      215+     1303    3                         stmt[0], stmt[1], stmt[2]           );
      216+     1304    3                return;
      217+     1305    3             }
      218+     1306    2          case ms_lbl:
      219+     1307    2             {  /*  mes  18,<cst1>,<cst2>,<str>                    */
      220+     1308    3                int lineno[2], i;
      221+     1309    3                lineno[0] = lineno[1] = 0;
      222+     1310    3                for (i = 0; i < 2; ++i)   {
      223+     1311    4                   argt = getarg( ptyp(sp_cend) | cst_ptyp );
      224+     1312    4                   if (argt == sp_cend) return;
      225+     1313    4                   lineno[i] = argval;
      226+     1314    4                }
      227+     1315    3                argt = getarg( ptyp(sp_cend) | str_ptyp );
      228+     1316    3                if (argt == sp_cend) return;
      229+     1317    3                fprintf(codefile, "%d %d,%d,%s\n", PS_LBL_OP, lineno[0], lineno[1], st
                               r);
      230+     1318    3                while(getarg(any_ptyp) != sp_cend);
      231+     1319    3                return;
      232+     1320    3             }
      233+     1321    2          case ms_blk:
      234+     1322    2             {  /*  mes 19,<cst1>,<cst2>,<cst3>                    */
      235+     1323    3                int blk[4], i;
      236+     1324    3                blk[0] = blk[1] = blk[2] = blk[3] = 0;
      237+     1325    3                for ( i = 0 ;; i++ ) {
      238+     1326    4                   argt = getarg( ptyp(sp_cend) | cst_ptyp );
      239+     1327    4                   if (argt == sp_cend) break;
      240+     1328    4                   if (i < 4)
      241+     1329    4                      blk[i] = argval;
      242+     1330    4                }
      243+     1331    3                fprintf(codefile, "%d %d,%d,%d,%d\n",PS_BLK_OP,blk[0],blk[1],blk[2],bl
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=37 
                               k[3]);
      244+     1332    3                return;
      245+     1333    3             }
      246+     1334    2          case ms_var:
      247+     1335    2             {  /*  mes 20,<str1>,<str2>,<cst1>,<cst2>,<cst3>,...,<cstn> */
      248+     1336    3                static int auto_struct = 0;
      249+     1337    3                int decl[10], i, j = 0;
      250+     1338    3                getarg(ptyp(sp_scon));
      251+     1339    3                fprintf(codefile, "%d %s", PS_VAR_OP, str);
      252+     1340    3                getarg(ptyp(sp_scon));
      253+     1341    3                fprintf(codefile,",%s",str);
      254+     1342    3                for ( i=0 ;;)  {
      255+     1343    4                   argt = getarg( ptyp(sp_cend) | cst_ptyp );
      256+     1344    4                   if (argt == sp_cend) break;
      257+     1345    4                   decl[i++] = argval;
      258+     1346    4                   if (i > 9)  {
      259+     1347    5                      if (decl[4]==STRUCTURE_DATATYPE)
      260+     1348    5                         auto_struct = (decl[3]==AUTO_ADDRTYPE);
      261+     1349    5                      if ( j == 0 && decl[7] < 0 &&
      262+     1350    5                            (( decl[3]==AUTO_ADDRTYPE || (auto_struct && decl[3]==FIEL
                               D_ADDRTYPE)) ||
      263+     1351    5                               (decl[2] > 0 && decl[3] == 5 && have_auto_structure)))
      264+     1352    5                         decl[7] = zb_auto_info[4] + decl[7];
      265+     1353    5                      if (j == 0 && decl[2] == 0) {
      266+     1354    6                        if(decl[4] == 17 && decl[3] == 2) {
      267+     1355    7                          have_auto_structure = 1; }
      268+     1356    6                        else {
      269+     1357    7                          have_auto_structure = 0; }
      270+     1358    6                      }
      271+     1359    5                      j++;
      272+     1360    5                      fprintf(codefile,",%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
      273+     1361    5                         decl[0],decl[1],decl[2],decl[3],decl[4],
      274+     1362    5                         decl[5],decl[6],decl[7],decl[8],decl[9]         );
      275+     1363    5                      i = 0;
      276+     1364    5                   }
      277+     1365    4                }
      278+     1366    3                for (j=0 ; j<i ; )   fprintf(codefile,",%d",decl[j++]);
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=38 
      279+     1367    3                fprintf(codefile,"\n");
      280+     1368    3                return;
      281+     1369    3             }
      282+     1370    2
      283+     1371    2        case ms_ctln:
      284+     1372    2           {  /*  mes 21,<str>                   */
      285+     1373    3             if (getarg( ptyp(sp_cend) | ptyp(sp_scon)) == sp_cend)
      286+     1374    3                return;
      287+     1375    3             fprintf(codefile, "%d %s\n", PS_CTLN_OP, str);
      288+     1376    3             getarg( ptyp(sp_cend) );
      289+     1377    3             break;
      290+     1378    3           }
      291+     1379    2
      292+     1380    2        case ms_sfun:
      293+     1381    2           {  /*  mes 22,<str>,<str>,<str>,...   */
      294+     1382    3             if (getarg( ptyp(sp_cend) | ptyp(sp_scon) ) != sp_cend)  {
      295+     1383    4                fprintf(codefile, "%d %s", PS_SFUN_OP, str);
      296+     1384    4
      297+     1385    4                while (getarg( ptyp(sp_cend) | ptyp(sp_scon) ) != sp_cend)
      298+     1386    4                   fprintf(codefile, ",%s", str);
      299+     1387    4
      300+     1388    4                fprintf(codefile,"\n");
      301+     1389    4             }
      302+     1390    3             break;
      303+     1391    3           }
      304+     1392    2          case ms_rfun:
      305+     1393    2             {  /*  mes 23,<str>,<cst1>,<cst2>,<cst3> */
      306+     1394    3              int i;
      307+     1395    3              int vals[3];
      308+     1396    3              vals[0] = vals[1] = vals[2] = 0;
      309+     1397    3              if ( getarg( ptyp(sp_cend) | ptyp(sp_scon) ) == sp_cend)
      310+     1398    3                return;
      311+     1399    3              fprintf(codefile, "%d %s,", PS_RFUN_OP, str);
      312+     1400    3              for (i=0 ;; ) {
      313+     1401    4                 argt = getarg( ptyp(sp_cend) | cst_ptyp );
      314+     1402    4                 if (argt == sp_cend) break;
      315+     1403    4                 if (i<3)
CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=39 
      316+     1404    4                   vals[i++] = argval;
      317+     1405    4              }
      318+     1406    3              fprintf(codefile,"%d,%d,%d\n",vals[0], vals[1], vals[2]);
      319+     1407    3              return;
      320+     1408    3             }
      321+     1409    2          default:
      322+     1410    2              while ( getarg(any_ptyp) != sp_cend );
      323+     1411    2              break;
      324+     1412    2          }
      325+     1413    1        }
      703      1414
---  Include file information  ---

   stdio:h.:LIB_E05. is referenced
   zbg$assert:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   em_flag:h.:ZBC3TOU. is referenced
   em_ptyp:h.:ZBC3TOU. is referenced
   em_mes:h.:ZBC3TOU. is referenced
   zbd$mach:h.:ZBC3TOU. is referenced
   codegen:h.:ZBC3TOU. is referenced
   zbg$param:h.:ZBC3TOU. is referenced
   tables:h.:ZBC3TOU. is referenced
   zbg$types:h.:ZBC3TOU. is referenced
   cgg_cg:h.:ZBC3TOU. is referenced
   zbg$data:h.:ZBC3TOU. is referenced
   zbg$result:h.:ZBC3TOU. is referenced
   zbg$regvar:h.:ZBC3TOU. is referenced
   em_reg:h.:ZBC3TOU. is referenced
   zbg$extern:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   setjmp:h.:LIB_E05. is referenced
   zbd$mach:c.:ZBC3TOU. is referenced
   zb_cp6_object:h.:ZBC3TOU. is referenced

CC.C03    File=zbg$fillem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=40 
No diagnostics were issued in the file zbg$fillem:c.:ZBC3TSI
