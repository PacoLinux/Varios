

CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: eval.c,v 3.20 87/03/25 22:53:03 ceriel Exp $ */
        6         6             /* EXPRESSION-CODE GENERATOR */
        7         7
        8         8             #include "nofloat:h"
        9         9             #include <em:h>
       10        10             #include "debug:h"
       11        11             #include "nobitfield:h"
       12        12             #include "dataflow:h"
       13        13             #include "arith:h"
       14        14             #include "type:h"
       15        15             #include "idf:h"
       16        16             #include "label:h"
       17        17             #include "code:h"
       18        18             #include "assert:h"
       19        19             #include "def:h"
       20        20             #include "expr:h"
       21        21             #include "sizes:h"
       22        22             #include "Lpars:h"
       23        23             #include "level:h"
       24        24             #include "stack:h"
       25        25             #include "align:h"
       26        26             #include "mes:h"
       27        27             #include "atw:h"
       28        28             #include "zb_target:h"
       29        29             #include "declar:h"
       30        30             #include "zb_target:h"
       31        31             #include "dataFirst:h"
       32        32             #include "use_tmp:h"
       33        33
       34        34             #define   CRASH()     crash("EVAL: CRASH at line %u", __LINE__)
       35        35             #define   toword(n)   ((n) < word_size ? word_size : (n))
       36        36
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=2  
       37        37             char *symbol2str();
       38        38             char *long2str();
       39        39             arith tmp_pointer_var();
       40        40             arith alloc_param_list();
       41        41             void free_param_list();
       42        42             arith store_param_list();
       43        43             extern char options[255];
       44        44             static char zeroes[8] = {"\000\000\000\000\000\000\000"};
       45        45             static label last_function_arglist = 0;
       46        46
       47        47             /*  EVAL() is the main expression-tree evaluator, which turns
       48        48              any legal expression tree into EM code. Parameters:
       49        49
       50        50              struct expr *expr
       51        51                 pointer to root of the expression tree to be evaluated
       52        52
       53        53              int val
       54        54                 indicates whether the resulting expression is to be
       55        55                 dereferenced (if val == RVAL and expr->ex_lvalue == 1)
       56        56                 or not (val == LVAL).  The latter case indicates that
       57        57                 the resulting expression is an lvalue expression which
       58        58                 should not be dereferenced by EVAL
       59        59
       60        60              int code
       61        61                 indicates whether the expression tree must be turned
       62        62                 into EM code or not. E.g. the expression statement "12;"
       63        63                 delivers the expression "12" to EVAL while this should
       64        64                 not result in any EM code
       65        65
       66        66              label false_label, label true_label
       67        67                 if the expression is a logical or relational expression
       68        68                 and if the loop of the program depends on the resulting
       69        69                 value then EVAL generates jumps to the specified program
       70        70                 labels, in case they are specified (i.e. are non-zero)
       71        71             */
       72        72
       73        73             EVAL(expr, val, code, true_label, false_label)
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=3  
       74        74              register struct expr *expr;
       75        75              int val, code;
       76        76              label true_label, false_label;
       77        77             {
       78        78    1         register int gencode = (code == TRUE);
       79        79    1
       80        80    1         switch (expr->ex_class) {
       81        81    2         case Value: /* just a simple value  */
       82        82    2            if (gencode)
       83        83    2               load_val(expr, val);
       84        84    2            break;
       85        85    2         case String:   /* a string constant */
       86        86    2            if (gencode) {
       87        87    3               string2pointer(expr);
       88        88    3               C_lae_dlb(expr->VL_LBL, expr->VL_VALUE);
       89        89    3            }
       90        90    2            break;
       91        91    2        #ifndef NOFLOAT
       92        92    2         case Float: /* a floating constant  */
       93        93    2            if (gencode) {
       94        94    3               label datlab = data_label();
       95        95    3        #ifdef FLOATOPT
       96        96    3               char fbuf[44];
       97        97    3        #endif
       98        98    3
       99        99    3        #if DATAFIRST && defined(USE_TMP)
      100       100    3               if (!options['N']) EM_File_No = 1;
      101       101    3        #endif
      102       102    3               if (zb_target_sys == TARGET_CP6)  {
      103       103    4                  int s = align(constant_data, expr->ex_type->tp_align)-constant_data;

      104       104    4                  if (s) {
      105       105    5                     C_rom_scon(zeroes, (arith) s);
      106       106    5                     constant_data += s;
      107       107    5                  }
      108       108    4               }
      109       109    3               constant_data = ATW(constant_data);
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=4  
      110       110    3               C_df_dlb(datlab);
      111       111    3        #ifdef FLOATOPT
      112       112    3               sprintf(fbuf, "%.20g", expr->FL_VALUE);
      113       113    3               C_rom_fcon(fbuf, expr->ex_type->tp_size);
      114       114    3        #else
      115       115   *S*              C_rom_fcon(expr->FL_VALUE, expr->ex_type->tp_size);
      116       116   *S*       #endif
      117       117    3               constant_data += expr->ex_type->tp_size;
      118       118    3        #if DATAFIRST && defined(USE_TMP)
      119       119    3               EM_File_No = 0;
      120       120    3        #endif
      121       121    3               C_lae_dlb(datlab, (arith)0);
      122       122    3               C_loi(expr->ex_type->tp_size);
      123       123    3            }
      124       124    2            break;
      125       125    2        #endif NOFLOAT
      126       126    2         case Oper:  /* compound expression  */
      127       127    2         {
      128       128    3            int oper = expr->OP_OPER;
      129       129    3            register struct expr *left = expr->OP_LEFT;
      130       130    3            register struct expr *right = expr->OP_RIGHT;
      131       131    3            register struct type *tp = expr->OP_TYPE;
      132       132    3            register int uns = tp->tp_unsigned == UNSIGNED;
      133       133    3
      134       134    3            if (tp->tp_fund == ERRONEOUS || (expr->ex_flags & EX_ERROR)) {
      135       135    4               /* stop immediately */
      136       136    4               break;
      137       137    4            }
      138       138    3            if (tp->tp_fund == VOID)
      139       139    3               gencode = 0;
      140       140    3            switch (oper) {
      141       141    4            case '+':
      142       142    4               /* We have the following possibilities :
      143       143    4                  int + int, pointer + int, pointer + long,
      144       144    4                  long + long, double + double
      145       145    4               */
      146       146    4               EVAL(left, RVAL, gencode, NO_LABEL, NO_LABEL);
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=5  
      147       147    4               EVAL(right, RVAL, gencode, NO_LABEL, NO_LABEL);
      148       148    4               if (gencode) {
      149       149    5                  switch (tp->tp_fund) {
      150       150    6                  case INT:
      151       151    6                  case LONG:
      152       152    6                     if (uns)
      153       153    6                        C_adu(tp->tp_size);
      154       154    6                     else
      155       155    6                        C_adi(tp->tp_size);
      156       156    6                     break;
      157       157    6                  case POINTER:
      158       158    6                     C_ads(right->ex_type->tp_size);
      159       159    6                     break;
      160       160    6        #ifndef NOFLOAT
      161       161    6                  case DOUBLE:
      162       162    6                  case FLOAT:
      163       163    6                     C_adf(tp->tp_size);
      164       164    6                     break;
      165       165    6        #endif NOFLOAT
      166       166    6                  default:
      167       167    6                     crash("bad type +");
      168       168    6                  }
      169       169    5               }
      170       170    4               break;
      171       171    4            case '-':
      172       172    4               if (left == 0) {  /* unary */
      173       173    5                  EVAL(right, RVAL, gencode, NO_LABEL, NO_LABEL);
      174       174    5                  if (gencode) {
      175       175    6                     switch (tp->tp_fund) {
      176       176    7                     case INT:
      177       177    7                     case LONG:
      178       178    7                     case POINTER:
      179       179    7                        C_ngi(tp->tp_size);
      180       180    7                        break;
      181       181    7        #ifndef NOFLOAT
      182       182    7                     case DOUBLE:
      183       183    7                     case FLOAT:
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=6  
      184       184    7                        C_ngf(tp->tp_size);
      185       185    7                        break;
      186       186    7        #endif NOFLOAT
      187       187    7                     default:
      188       188    7                        CRASH();
      189       189    7                     }
      190       190    6                  }
      191       191    5                  break;
      192       192    5               }
      193       193    4               /* else binary; we have the following flavours:
      194       194    4                  int - int, pointer - int, pointer - long,
      195       195    4                  pointer - pointer, long - long, double - double
      196       196    4               */
      197       197    4               EVAL(left, RVAL, gencode, NO_LABEL, NO_LABEL);
      198       198    4               EVAL(right, RVAL, gencode, NO_LABEL, NO_LABEL);
      199       199    4               if (!gencode)
      200       200    4                  break;
      201       201    4               switch (tp->tp_fund) {
      202       202    5               case INT:
      203       203    5               case LONG:
      204       204    5                  if (uns)
      205       205    5                     C_sbu(tp->tp_size);
      206       206    5                  else
      207       207    5                     C_sbi(tp->tp_size);
      208       208    5                  break;
      209       209    5               case POINTER:
      210       210    5                  if (right->ex_type->tp_fund == POINTER)
      211       211    5                     C_sbs(pointer_size);
      212       212    5                  else {
      213       213    6                     C_ngi(right->ex_type->tp_size);
      214       214    6                     C_ads(right->ex_type->tp_size);
      215       215    6                  }
      216       216    5                  break;
      217       217    5        #ifndef NOFLOAT
      218       218    5               case DOUBLE:
      219       219    5               case FLOAT:
      220       220    5                  C_sbf(tp->tp_size);
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=7  
      221       221    5                  break;
      222       222    5        #endif NOFLOAT
      223       223    5               default:
      224       224    5                  crash("bad type -");
      225       225    5               }
      226       226    4               break;
      227       227    4            case '*':
      228       228    4               if (left == 0) /* unary */
      229       229    4                  EVAL(right, RVAL, gencode, NO_LABEL, NO_LABEL);
      230       230    4               else { /* binary */
      231       231    5                  EVAL(left, RVAL, gencode, NO_LABEL, NO_LABEL);
      232       232    5                  EVAL(right, RVAL, gencode, NO_LABEL, NO_LABEL);
      233       233    5                  if (gencode)
      234       234    5                     switch (tp->tp_fund) {
      235       235    6                     case INT:
      236       236    6                     case LONG:
      237       237    6                     case POINTER:
      238       238    6                        if (uns)
      239       239    6                           C_mlu(tp->tp_size);
      240       240    6                        else
      241       241    6                           C_mli(tp->tp_size);
      242       242    6                        break;
      243       243    6        #ifndef NOFLOAT
      244       244    6                     case DOUBLE:
      245       245    6                     case FLOAT:
      246       246    6                        C_mlf(tp->tp_size);
      247       247    6                        break;
      248       248    6        #endif NOFLOAT
      249       249    6                     default:
      250       250    6                        crash("bad type *");
      251       251    6                     }
      252       252    5               }
      253       253    4               break;
      254       254    4            case '/':
      255       255    4               EVAL(left, RVAL, gencode, NO_LABEL, NO_LABEL);
      256       256    4               EVAL(right, RVAL, gencode, NO_LABEL, NO_LABEL);
      257       257    4               if (gencode)
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=8  
      258       258    4                  switch (tp->tp_fund) {
      259       259    5                  case INT:
      260       260    5                  case LONG:
      261       261    5                  case POINTER:
      262       262    5                     if (uns)
      263       263    5                        C_dvu(tp->tp_size);
      264       264    5                     else
      265       265    5                        C_dvi(tp->tp_size);
      266       266    5                     break;
      267       267    5        #ifndef NOFLOAT
      268       268    5                  case DOUBLE:
      269       269    5                  case FLOAT:
      270       270    5                     C_dvf(tp->tp_size);
      271       271    5                     break;
      272       272    5        #endif NOFLOAT
      273       273    5                  default:
      274       274    5                     crash("bad type /");
      275       275    5                  }
      276       276    4               break;
      277       277    4            case '%':
      278       278    4               EVAL(left, RVAL, gencode, NO_LABEL, NO_LABEL);
      279       279    4               EVAL(right, RVAL, gencode, NO_LABEL, NO_LABEL);
      280       280    4               ASSERT(tp->tp_fund==INT || tp->tp_fund==LONG);
      281       281    4               if (gencode)
      282       282    4                  if (uns)
      283       283    4                     C_rmu(tp->tp_size);
      284       284    4                  else
      285       285    4                     C_rmi(tp->tp_size);
      286       286    4               break;
      287       287    4            case LEFT:
      288       288    4               EVAL(left, RVAL, gencode, NO_LABEL, NO_LABEL);
      289       289    4               EVAL(right, RVAL, gencode, NO_LABEL, NO_LABEL);
      290       290    4               if (gencode)
      291       291    4                  if (uns)
      292       292    4                     C_slu(tp->tp_size);
      293       293    4                  else
      294       294    4                     C_sli(tp->tp_size);
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=9  
      295       295    4               break;
      296       296    4            case RIGHT:
      297       297    4               EVAL(left, RVAL, gencode, NO_LABEL, NO_LABEL);
      298       298    4               EVAL(right, RVAL, gencode, NO_LABEL, NO_LABEL);
      299       299    4               if (gencode)
      300       300    4                  if (uns)
      301       301    4                     C_sru(tp->tp_size);
      302       302    4                  else
      303       303    4                     C_sri(tp->tp_size);
      304       304    4               break;
      305       305    4            case '<':
      306       306    4            case LESSEQ:
      307       307    4            case '>':
      308       308    4            case GREATEREQ:
      309       309    4            case EQUAL:
      310       310    4            case NOTEQUAL:
      311       311    4               EVAL(left, RVAL, gencode, NO_LABEL, NO_LABEL);
      312       312    4               EVAL(right, RVAL, gencode, NO_LABEL, NO_LABEL);
      313       313    4               if (gencode) {
      314       314    5                  /* The operands have the same type */
      315       315    5                  arith size = left->ex_type->tp_size;
      316       316    5
      317       317    5                  switch (tp->tp_fund) {
      318       318    6                  case INT:
      319       319    6                  case LONG:
      320       320    6                     if (left->ex_type->tp_unsigned == UNSIGNED)
      321       321    6                        C_cmu(size);
      322       322    6                     else
      323       323    6                        C_cmi(size);
      324       324    6                     break;
      325       325    6        #ifndef NOFLOAT
      326       326    6                  case FLOAT: /* thought they were converted??? */
      327       327    6                  case DOUBLE:
      328       328    6                     C_cmf(size);
      329       329    6                     break;
      330       330    6        #endif NOFLOAT
      331       331    6                  case POINTER:
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=10 
      332       332    6                     C_cmp();
      333       333    6                     break;
      334       334    6                  case ENUM:
      335       335    6                     C_cmi(size);
      336       336    6                     break;
      337       337    6                  default:
      338       338    6                     CRASH();
      339       339    6                  }
      340       340    5                  if (true_label != 0) {
      341       341    6                     compare(oper, true_label);
      342       342    6                     C_bra(false_label);
      343       343    6                  }
      344       344    5                  else {
      345       345    6                     truthvalue(oper);
      346       346    6                  }
      347       347    5               }
      348       348    4               break;
      349       349    4            case '&':
      350       350    4            case '|':
      351       351    4            case '^':
      352       352    4               /* both operands should have type int  */
      353       353    4               EVAL(left, RVAL, gencode, NO_LABEL, NO_LABEL);
      354       354    4               EVAL(right, RVAL, gencode, NO_LABEL, NO_LABEL);
      355       355    4               if (gencode) {
      356       356    5                  arith size = tp->tp_size;
      357       357    5
      358       358    5                  if (size < word_size)
      359       359    5                     size = word_size;
      360       360    5                  switch (oper) {
      361       361    6                  case '&':
      362       362    6                     C_and(size);
      363       363    6                     break;
      364       364    6                  case '|':
      365       365    6                     C_ior(size);
      366       366    6                     break;
      367       367    6                  case '^':
      368       368    6                     C_xor(size);
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=11 
      369       369    6                     break;
      370       370    6                  }
      371       371    5               }
      372       372    4               break;
      373       373    4            case '=': {
      374       374    5               int newcode = tp->tp_size > 0;   /* CJ */
      375       375    5               if (left->ex_type->tp_const)
      376       376    5                  expr_error(left,"cannot assign to a \"const\"");
      377       377    5        #ifndef NOBITFIELD
      378       378    5               if (left->ex_type->tp_fund == FIELD) {
      379       379    6                  eval_field(expr, gencode);
      380       380    6                  break;
      381       381    6               }
      382       382    5        #endif NOBITFIELD
      383       383    5               EVAL(right, RVAL, newcode, NO_LABEL, NO_LABEL);
      384       384    5               if (gencode)
      385       385    5                  C_dup(ATW(tp->tp_size));
      386       386    5               if (left->ex_class != Value) {
      387       387    6                  EVAL(left, LVAL, newcode, NO_LABEL, NO_LABEL);
      388       388    6                  if (newcode)
      389       389    6                     store_block(tp->tp_size, tp->tp_align);
      390       390    6               }
      391       391    5               else if (newcode)
      392       392    5                  store_val(&(left->ex_object.ex_value),
      393       393    5                     left->ex_type);
      394       394    5               }
      395       395    4               break;
      396       396    4            case PLUSAB:
      397       397    4            case MINAB:
      398       398    4            case TIMESAB:
      399       399    4            case DIVAB:
      400       400    4            case MODAB:
      401       401    4            case LEFTAB:
      402       402    4            case RIGHTAB:
      403       403    4            case ANDAB:
      404       404    4            case XORAB:
      405       405    4            case ORAB:
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=12 
      406       406    4            case POSTINCR:
      407       407    4            case POSTDECR:
      408       408    4            case PLUSPLUS:
      409       409    4            case MINMIN:
      410       410    4            {
      411       411    5               arith old_offset, tmp;
      412       412    5               int compl;  /* Complexity of left operand */
      413       413    5               int newcode = left->ex_type->tp_size > 0; /* CJ */
      414       414    5               if (left->ex_type->tp_const)
      415       415    5                  expr_error(left,"cannot assign to a \"const\"");
      416       416    5        #ifndef NOBITFIELD
      417       417    5               if (left->ex_type->tp_fund == FIELD) {
      418       418    6                  eval_field(expr, gencode);
      419       419    6                  break;
      420       420    6               }
      421       421    5        #endif NOBITFIELD
      422       422    5               if (newcode && left->ex_class == Value) {
      423       423    6                  compl = 0; /* Value */
      424       424    6                  load_val(left, RVAL);
      425       425    6               }
      426       426    5               else
      427       427    5               if (left->ex_depth == 1 &&
      428       428    5                   !(left->ex_flags & EX_SIDEEFFECTS))   {
      429       429    6                  compl = 1;
      430       430    6                  EVAL(left, RVAL, newcode, NO_LABEL, NO_LABEL);
      431       431    6               }
      432       432    5               else {
      433       433    6                  compl = 2; /* otherwise */
      434       434    6                  EVAL(left, LVAL, newcode, NO_LABEL, NO_LABEL);
      435       435    6                  if (newcode) {
      436       436    7                     tmp = tmp_pointer_var(&old_offset);
      437       437    7                     C_dup(pointer_size);
      438       438    7                     C_lal(tmp);
      439       439    7                     C_sti(pointer_size);
      440       440    7                     C_loi(left->ex_type->tp_size);
      441       441    7                  }
      442       442    6               }
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=13 
      443       443    5               if (newcode) {
      444       444    6                  if (gencode && (oper == POSTINCR ||
      445       445    6                        oper == POSTDECR))
      446       446    6                     C_dup(ATW(left->ex_type->tp_size));
      447       447    6                  conversion(left->ex_type, tp);
      448       448    6               }
      449       449    5               EVAL(right, RVAL, newcode, NO_LABEL, NO_LABEL);
      450       450    5               if (newcode) {
      451       451    6                  int dupval = gencode && oper != POSTINCR &&
      452       452    6                        oper != POSTDECR;
      453       453    6                  assop(tp, oper);
      454       454    6                  conversion(tp, left->ex_type);
      455       455    6                  if (compl == 0) {
      456       456    7                     store_val(&(left->ex_object.ex_value),
      457       457    7                        left->ex_type);
      458       458    7                     if (dupval) load_val(left, RVAL);
      459       459    7                  }
      460       460    6                  else if (compl == 1) {
      461       461    7                     EVAL(left, LVAL,1, NO_LABEL, NO_LABEL);
      462       462    7                     C_sti(left->ex_type->tp_size);
      463       463    7                     if (dupval) {
      464       464    8                        EVAL(left, LVAL, 1, NO_LABEL,
      465       465    8                           NO_LABEL);
      466       466    8                        C_loi(left->ex_type->tp_size);
      467       467    8                     }
      468       468    7                  }
      469       469    6                  else {
      470       470    7                     C_lal(tmp); /* always init'd */
      471       471    7                     C_loi(pointer_size);
      472       472    7                     C_sti(left->ex_type->tp_size);
      473       473    7                     if (dupval) {
      474       474    8                        C_lal(tmp);
      475       475    8                        C_loi(pointer_size);
      476       476    8                        C_loi(left->ex_type->tp_size);
      477       477    8                     }
      478       478    7                     free_tmp_var(old_offset);
      479       479    7                  }
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=14 
      480       480    6               }
      481       481    5               break;
      482       482    5            }
      483       483    4            case '(':
      484       484    4            {
      485       485    5               register struct expr *ex;
      486       486    5               arith ParSize = (arith)0;
      487       487    5               arith arglist = (arith)0, before_args = (arith)0;
      488       488    5               struct formallist *fm = left->ex_type->tp_formal;
      489       489    5               int alt = 4;   /*  minimum alignment for arg  list */
      490       490    5               arith pl, ps = 0;
      491       491    5               arith builtin = (left->ex_class==Value &&
      492       492    5                                left->VL_CLASS==Name &&
      493       493    5                                left->VL_IDF->id_special > 63);
      494       494    5               arith xbuiltin = builtin && left->VL_IDF->id_special > 127;
      495       495    5
      496       496    5                  if (xbuiltin)   {
      497       497    6                     xbuiltin = 10;
      498       498    6                     builtin  = 0;
      499       499    6                     }
      500       500    5                  if (fm)   {  /*  A function prototype was provided... */
      501       501    6                    if (fm->fl_num > 1 || fm->fl_type[0] != void_type)
      502       502    6                    { /*    If there is at least one argument   */
      503       503    7                      if (!right) {
      504       504    8                         expr_error(expr,"function prototype requires formal arguments
                               ");
      505       505    8                         fm = (struct formallist *)0;
      506       506    8                      }
      507       507    7                    }
      508       508    6                    else if (right)  {
      509       509    7                      expr_error(expr,"function prototype permits no formal arguments"
                               );
      510       510    7                      fm = (struct formallist *)0;
      511       511    7                    }
      512       512    6                   }
      513       513    5                  if (tp->tp_size < 0)
      514       514    5                     error("Size of function result unknown");
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=15 
      515       515    5                  if (zb_target_sys==TARGET_CP6 && is_struct_or_union(tp->tp_fund)) {
      516       516    6                     ParSize = tp->tp_size;
      517       517    6                     if (tp->tp_align > 4) alt = 8;
      518       518    6                     }
      519       519    5                  if ((ex = right) != NILEXPR) {
      520       520    6                     /* function call with parameters*/
      521       521    6                     int al = 4;
      522       522    6                     struct type *tp;
      523       523    6                     if (zb_target_sys == TARGET_CP6)  {
      524       524    7                        /*  evaluate params left to right on CP-6  */
      525       525    7                        if (ex->ex_class == Oper && ex->OP_OPER == PARCOMMA) {
      526       526    8                           register struct expr *exl = ex->OP_LEFT;
      527       527    8                           register struct expr *exr = ex->OP_RIGHT;
      528       528    8                           ex->OP_LEFT = exr;
      529       529    8                           while(exl->ex_class==Oper && exl->OP_OPER==PARCOMMA){
      530       530    9                              ex->OP_RIGHT = exl->OP_RIGHT;
      531       531    9                              ex->ex_type  = exl->ex_type;
      532       532    9                              exr = exl->OP_LEFT;
      533       533    9                              exl->OP_LEFT = ex;
      534       534    9                              ex = exl;
      535       535    9                              exl = exr;
      536       536    9                           }
      537       537    8                           ex->OP_RIGHT = exl;
      538       538    8                           ex->ex_type  = exl->ex_type;
      539       539    8                           expr->OP_RIGHT = right = ex;
      540       540    8                        }
      541       541    7                        /**  Allocate argument list in locals         **/
      542       542    7                        ps  = 0;  /** words in argument list          **/
      543       543    7                        while (ex->ex_class == Oper && ex->OP_OPER == PARCOMMA){
      544       544    8                           tp = ex->ex_type;
      545       545    8                           al = ( tp->tp_align <= 4)?4:(alt=8);
      546       546    8                           ps = align(ps + tp->tp_size, al);
      547       547    8                           ex = ex->OP_LEFT;
      548       548    8                        }
      549       549    7                        tp = ex->ex_type;
      550       550    7                        al = ( tp->tp_align <= 4)? 4 : (alt=8);
      551       551    7                        ps = align(ps + tp->tp_size, al);
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=16 
      552       552    7                        if (ps > ParSize) ParSize = ps;
      553       553    7                        ex = right;
      554       554    7                        if (fm) fm->fl_fbytes = ParSize;
      555       555    7                        arglist = alloc_param_list(&before_args,ParSize,alt);
      556       556    7                        last_function_arglist = pl = arglist; /* loc of arglist start
                               */
      557       557    7                     }   /*  Of if (zb_target_sys == TARGET_CP6) {....   */
      558       558    6                     while (ex->ex_class == Oper && ex->OP_OPER == PARCOMMA) {
      559       559    7                        EVAL(ex->OP_RIGHT, RVAL, ex->ex_type->tp_size > 0, NO_LABEL, N
                               O_LABEL);
      560       560    7                        if (zb_target_sys == TARGET_CP6 && !builtin) {
      561       561    8                           pl = store_param_list(ex->ex_type,pl);
      562       562    8                        }
      563       563    7                        else ParSize += ATW(ex->ex_type->tp_size);
      564       564    7                        ex = ex->OP_LEFT;
      565       565    7                     }
      566       566    6                     EVAL(ex, RVAL, ex->ex_type->tp_size > 0, NO_LABEL, NO_LABEL);
      567       567    6                     if (zb_target_sys == TARGET_CP6 && !builtin)  {
      568       568    7                        pl = store_param_list(ex->ex_type,pl);
      569       569    7                     }
      570       570    6                     else ParSize += ATW(ex->ex_type->tp_size);
      571       571    6                  }
      572       572    5                  else if (zb_target_sys == TARGET_CP6) {
      573       573    6                      if (ParSize > 0) {
      574       574    7                         arglist = alloc_param_list(&before_args, ParSize, alt);
      575       575    7                         last_function_arglist = arglist;
      576       576    7                         }
      577       577    6                  }
      578       578    5             if (builtin)   {
      579       579    6                C_loc(left->VL_IDF->id_special);
      580       580    6                C_mon();
      581       581    6                ParSize = 0;
      582       582    6                }
      583       583    5             else
      584       584    5               if (left->ex_class == Value && left->VL_CLASS == Name) {
      585       585    6                  /* e.g., main() { (*((int (*)())0))(); } */
      586       586    6                  if (zb_target_sys == TARGET_CP6) {
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=17 
      587       587    7                        C_lal(arglist);
      588       588    7                     C_loc(ps); /* ParSize=allocated size, ps=wds of args */
      589       589    7                     }
      590       590    6                  C_cal(left->VL_IDF->id_text+xbuiltin);
      591       591    6        #ifdef DATAFLOW
      592       592    6                  {  extern char options[];
      593       593    7                     if (options['d'])
      594       594    7                        DfaCallFunction(
      595       595    7                           left->VL_IDF->id_text);
      596       596    7                  }
      597       597    6        #endif DATAFLOW
      598       598    6               }
      599       599    5               else {
      600       600    6                  EVAL(left, LVAL, TRUE, NO_LABEL, NO_LABEL);
      601       601    6                  if (zb_target_sys == TARGET_CP6) {
      602       602    7                     arith oldauto;
      603       603    7                     arith fp = tmp_pointer_var(&oldauto);
      604       604    7                     C_lal(fp);
      605       605    7                     C_sti(pointer_size);
      606       606    7                        C_lal(arglist);
      607       607    7                     C_loc(ps); /* ParSize=allocated size, ps=wds of args */
      608       608    7                     last_function_arglist = arglist;
      609       609    7                     C_lol(fp);
      610       610    7                     free_tmp_var(oldauto);
      611       611    7                     }
      612       612    6                  C_cai();
      613       613    6               }
      614       614    5               /* remove parameters from stack  */
      615       615    5               if (zb_target_sys == TARGET_CP6) {
      616       616    6                  if (ParSize > 0)
      617       617    6                     free_param_list(before_args);
      618       618    6                  ParSize = 0;
      619       619    6                  }
      620       620    5               else if (ParSize > (arith)0)
      621       621    5                  C_asp(ParSize);
      622       622    5               if (gencode) {
      623       623    6                  if (is_struct_or_union(tp->tp_fund)) {
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=18 
      624       624    7                     C_lfr(pointer_size);
      625       625    7                     load_block(tp->tp_size, tp->tp_align);
      626       626    7                  }
      627       627    6                  else
      628       628    6                     C_lfr(ATW((tp->tp_fund==FLOAT)? double_size : tp->tp_size));
      629       629    6               }
      630       630    5               break;
      631       631    5            }
      632       632    4            case '.':
      633       633    4               if (gencode && left->ex_class==Oper && left->OP_OPER == '(') {
      634       634    5                  EVAL(left, RVAL, FALSE, NO_LABEL, NO_LABEL);
      635       635    5                  C_lal(last_function_arglist);
      636       636    5                  }
      637       637    4               else EVAL(left, LVAL, gencode, NO_LABEL, NO_LABEL);
      638       638    4               ASSERT(is_cp_cst(right));
      639       639    4               if (gencode)
      640       640    4                  C_adp(right->VL_VALUE);
      641       641    4               break;
      642       642    4            case ARROW:
      643       643    4               EVAL(left, RVAL, gencode, NO_LABEL, NO_LABEL);
      644       644    4               ASSERT(is_cp_cst(right));
      645       645    4               if (gencode)
      646       646    4                  C_adp(right->VL_VALUE);
      647       647    4               break;
      648       648    4            case ',':
      649       649    4               EVAL(left, RVAL, FALSE, NO_LABEL, NO_LABEL);
      650       650    4               EVAL(right, RVAL, gencode, NO_LABEL, NO_LABEL);
      651       651    4               break;
      652       652    4            case '~':
      653       653    4               EVAL(right, RVAL, gencode, NO_LABEL, NO_LABEL);
      654       654    4               if (gencode)
      655       655    4                  C_com(tp->tp_size);
      656       656    4               break;
      657       657    4            case '?':   /* must be followed by ':' */
      658       658    4            {
      659       659    5               label l_true = text_label();
      660       660    5               label l_false = text_label();
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=19 
      661       661    5               label l_end = text_label();
      662       662    5               arith d_val = 0, o_val = 0;
      663       663    5               struct type *ltp = expr->ex_type;
      664       664    5               int tpal = ltp->tp_align;
      665       665    5
      666       666    5               EVAL(left, RVAL, TRUE, l_true, l_false);
      667       667    5               C_df_ilb(l_true);
      668       668    5               EVAL(right->OP_LEFT, RVAL, gencode, NO_LABEL, NO_LABEL);
      669       669    5               if (gencode && zb_target_sys == TARGET_CP6) {
      670       670    6                  d_val = alloc_param_list( &o_val, ltp->tp_size, (tpal<word_align)?wo
                               rd_align:tpal);
      671       671    6                  store_local_value(ltp, d_val);
      672       672    6               }
      673       673    5               C_bra(l_end);
      674       674    5               C_df_ilb(l_false);
      675       675    5               EVAL(right->OP_RIGHT, RVAL, gencode, NO_LABEL, NO_LABEL);
      676       676    5               if (d_val) store_local_value(ltp, d_val);
      677       677    5               C_df_ilb(l_end);
      678       678    5               if (d_val)  {
      679       679    6                  load_local_value(ltp, d_val);
      680       680    6                  free_param_list( o_val );
      681       681    6                  }
      682       682    5               break;
      683       683    5            }
      684       684    4            case OR:
      685       685    4            case AND: {
      686       686    5               label l_false, l_true, l_maybe;
      687       687    5               arith d_val = 0, o_val = 0;
      688       688    5
      689       689    5               l_maybe = text_label();
      690       690    5               if (true_label) {
      691       691    6                  l_false = false_label;
      692       692    6                  l_true = true_label;
      693       693    6               }
      694       694    5               else {
      695       695    6                  l_false = text_label();
      696       696    6                  l_true = gencode ? text_label(): l_false;
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=20 
      697       697    6               }
      698       698    5
      699       699    5               EVAL(left, RVAL, TRUE, oper == AND ? l_maybe : l_true,
      700       700    5                            oper == AND ? l_false : l_maybe);
      701       701    5               C_df_ilb(l_maybe);
      702       702    5               EVAL(right, RVAL, gencode, l_true, l_false);
      703       703    5               if (gencode && !true_label) {
      704       704    6                  label l_end = text_label();
      705       705    6
      706       706    6                  C_df_ilb(l_true);
      707       707    6                  C_loc((arith)1);
      708       708    6               if (zb_target_sys == TARGET_CP6) {
      709       709    7                  d_val = tmp_pointer_var( &o_val );
      710       710    7                  C_stl(d_val);
      711       711    7                  }
      712       712    6                  C_bra(l_end);
      713       713    6                  C_df_ilb(l_false);
      714       714    6                  C_loc((arith)0);
      715       715    6                  if (d_val) C_stl(d_val);
      716       716    6                  C_df_ilb(l_end);
      717       717    6                  if (d_val)  {
      718       718    7                     C_lol(d_val);
      719       719    7                     free_tmp_var(o_val);
      720       720    7                     }
      721       721    6               }
      722       722    5               else {
      723       723    6                  if (! true_label) C_df_ilb(l_false);
      724       724    6               }
      725       725    5               }
      726       726    4               break;
      727       727    4            case '!':
      728       728    4               if (true_label == 0) {
      729       729    5                  EVAL(right, RVAL, gencode, NO_LABEL, NO_LABEL);
      730       730    5                  if (gencode) {
      731       731    6                     C_teq();
      732       732    6                  }
      733       733    5               }
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=21 
      734       734    4               else
      735       735    4                  EVAL(right, RVAL, gencode, false_label,
      736       736    4                              true_label);
      737       737    4               break;
      738       738    4            case INT2INT:
      739       739    4        #ifndef NOFLOAT
      740       740    4            case INT2FLOAT:
      741       741    4            case FLOAT2INT:
      742       742    4            case FLOAT2FLOAT:
      743       743    4        #endif NOFLOAT
      744       744    4               EVAL(right, RVAL, gencode, NO_LABEL, NO_LABEL);
      745       745    4               if (gencode)
      746       746    4                  conversion(right->ex_type, left->ex_type);
      747       747    4               break;
      748       748    4          case INT2PTR:
      749       749    4          case PTR2INT:
      750       750    4           EVAL(right,RVAL,gencode,NO_LABEL,NO_LABEL);
      751       751    4           if (gencode && zb_target_sys == TARGET_CP6) {
      752       752    5             C_loc( (arith) CP6_NULL_INT );
      753       753    5             C_xor( (arith) 4 );
      754       754    5           }
      755       755    4           break;
      756       756    4
      757       757    4            default:
      758       758    4               crash("(EVAL) bad operator %s\n", symbol2str(oper));
      759       759    4            }
      760       760    3            /* If the rvalue of the expression is required but
      761       761    3               only its lvalue is evaluated, its rvalue is
      762       762    3               loaded by the following statements:
      763       763    3            */
      764       764    3            if (gencode && val == RVAL && expr->ex_lvalue == 1)
      765       765    3               load_block(expr->ex_type->tp_size,
      766       766    3                  expr->ex_type->tp_align);
      767       767    3            break;
      768       768    3         }
      769       769    2         default:
      770       770    2            crash("(EVAL) bad expression class");
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=22 
      771       771    2         }
      772       772    1        }
      773       773
      774       774             /*  compare() serves as an auxiliary function of EVAL  */
      775       775             compare(relop, lbl)
      776       776              int relop;
      777       777              label lbl;
      778       778             {
      779       779    1         switch (relop) {
      780       780    2         case '<':
      781       781    2            C_zlt(lbl);
      782       782    2            break;
      783       783    2         case LESSEQ:
      784       784    2            C_zle(lbl);
      785       785    2            break;
      786       786    2         case '>':
      787       787    2            C_zgt(lbl);
      788       788    2            break;
      789       789    2         case GREATEREQ:
      790       790    2            C_zge(lbl);
      791       791    2            break;
      792       792    2         case EQUAL:
      793       793    2            C_zeq(lbl);
      794       794    2            break;
      795       795    2         case NOTEQUAL:
      796       796    2            C_zne(lbl);
      797       797    2            break;
      798       798    2         default:
      799       799    2            CRASH();
      800       800    2         }
      801       801    1        }
      802       802
      803       803             /*  truthvalue() serves as an auxiliary function of EVAL  */
      804       804             truthvalue(relop)
      805       805              int relop;
      806       806             {
      807       807    1         switch (relop) {
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=23 
      808       808    2         case '<':
      809       809    2            C_tlt();
      810       810    2            break;
      811       811    2         case LESSEQ:
      812       812    2            C_tle();
      813       813    2            break;
      814       814    2         case '>':
      815       815    2            C_tgt();
      816       816    2            break;
      817       817    2         case GREATEREQ:
      818       818    2            C_tge();
      819       819    2            break;
      820       820    2         case EQUAL:
      821       821    2            C_teq();
      822       822    2            break;
      823       823    2         case NOTEQUAL:
      824       824    2            C_tne();
      825       825    2            break;
      826       826    2         default:
      827       827    2            CRASH();
      828       828    2         }
      829       829    1        }
      830       830
      831       831
      832       832             /*  assop() generates the opcode of an assignment operators op= */
      833       833             assop(type, oper)
      834       834              register struct type *type;
      835       835              int oper;
      836       836             {
      837       837    1         register arith size;
      838       838    1         register uns = type->tp_unsigned == UNSIGNED;
      839       839    1
      840       840    1         if ((size = type->tp_size) < word_size)
      841       841    1            size = word_size;
      842       842    1         switch (type->tp_fund) {
      843       843    2         case CHAR:
      844       844    2         case SHORT:
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=24 
      845       845    2         case INT:
      846       846    2         case LONG:
      847       847    2         case ENUM:
      848       848    2            switch (oper) {
      849       849    3            case PLUSAB:
      850       850    3            case PLUSPLUS:
      851       851    3            case POSTINCR:
      852       852    3               if (uns)
      853       853    3                  C_adu(size);
      854       854    3               else
      855       855    3                  C_adi(size);
      856       856    3               break;
      857       857    3            case MINAB:
      858       858    3            case MINMIN:
      859       859    3            case POSTDECR:
      860       860    3               if (uns)
      861       861    3                  C_sbu(size);
      862       862    3               else
      863       863    3                  C_sbi(size);
      864       864    3               break;
      865       865    3            case TIMESAB:
      866       866    3               if (uns)
      867       867    3                  C_mlu(size);
      868       868    3               else
      869       869    3                  C_mli(size);
      870       870    3               break;
      871       871    3            case DIVAB:
      872       872    3               if (uns)
      873       873    3                  C_dvu(size);
      874       874    3               else
      875       875    3                  C_dvi(size);
      876       876    3               break;
      877       877    3            case MODAB:
      878       878    3               if (uns)
      879       879    3                  C_rmu(size);
      880       880    3               else
      881       881    3                  C_rmi(size);
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=25 
      882       882    3               break;
      883       883    3            case LEFTAB:
      884       884    3               if (uns)
      885       885    3                  C_slu(size);
      886       886    3               else
      887       887    3                  C_sli(size);
      888       888    3               break;
      889       889    3            case RIGHTAB:
      890       890    3               if (uns)
      891       891    3                  C_sru(size);
      892       892    3               else
      893       893    3                  C_sri(size);
      894       894    3               break;
      895       895    3            case ANDAB:
      896       896    3               C_and(size);
      897       897    3               break;
      898       898    3            case XORAB:
      899       899    3               C_xor(size);
      900       900    3               break;
      901       901    3            case ORAB:
      902       902    3               C_ior(size);
      903       903    3               break;
      904       904    3            }
      905       905    2            break;
      906       906    2        #ifndef NOFLOAT
      907       907    2         case FLOAT:
      908       908    2         case DOUBLE:
      909       909    2            switch (oper) {
      910       910    3            case PLUSAB:
      911       911    3            case PLUSPLUS:
      912       912    3            case POSTINCR:
      913       913    3               C_adf(size);
      914       914    3               break;
      915       915    3            case MINAB:
      916       916    3            case MINMIN:
      917       917    3            case POSTDECR:
      918       918    3               C_sbf(size);
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=26 
      919       919    3               break;
      920       920    3            case TIMESAB:
      921       921    3               C_mlf(size);
      922       922    3               break;
      923       923    3            case DIVAB:
      924       924    3               C_dvf(size);
      925       925    3               break;
      926       926    3            }
      927       927    2            break;
      928       928    2        #endif NOFLOAT
      929       929    2         case POINTER:
      930       930    2            if (oper == MINAB || oper == MINMIN || oper == POSTDECR)
      931       931    2               C_ngi(size);
      932       932    2            C_ads(size);
      933       933    2            break;
      934       934    2         case ERRONEOUS:
      935       935    2            break;
      936       936    2         default:
      937       937    2            crash("(assop) bad type %s\n", symbol2str(type->tp_fund));
      938       938    2         }
      939       939    1        }
      940       940
      941       941             /*  tmp_pointer_var() returns the EM address of a new temporary
      942       942              pointer variable needed at increment, decrement and assignment
      943       943              operations to store the address of some variable or lvalue-expression.
      944       944             */
      945       945             arith
      946       946             tmp_pointer_var(oldoffset)
      947       947              arith *oldoffset; /* previous allocated address */
      948       948             {
      949       949    1         register struct stack_level *stl = local_level;
      950       950    1
      951       951    1         *oldoffset = stl->sl_local_offset;
      952       952    1         stl->sl_local_offset =
      953       953    1            - align(-stl->sl_local_offset + pointer_size, pointer_align);
      954       954    1         if (stl->sl_local_offset < stl->sl_max_block)
      955       955    1            stl->sl_max_block = stl->sl_local_offset;
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=27 
      956       956    1         return stl->sl_local_offset;
      957       957    1        }
      958       958
      959       959             /*  free_tmp_var() returns the address allocated by tmp_pointer_var()
      960       960              and resets the last allocated address.
      961       961             */
      962       962             free_tmp_var(oldoffset)
      963       963              arith oldoffset;
      964       964             {
      965       965    1         local_level->sl_local_offset = oldoffset;
      966       966    1        }
      967       967
      968       968             /*  store_val() generates code for a store operation.
      969       969              There are four ways of storing data:
      970       970              - into a global variable
      971       971              - into an automatic local variable
      972       972              - into a local static variable
      973       973              - absolute addressing
      974       974             */
      975       975             store_val(vl, tp)
      976       976              register struct value *vl;
      977       977              struct type *tp;
      978       978             {
      979       979    1         arith size = tp->tp_size;
      980       980    1         int tpalign = tp->tp_align;
      981       981    1         int al_on_word;
      982       982    1         register int inword;
      983       983    1         register int indword;
      984       984    1         arith val = vl->vl_value;
      985       985    1
      986       986    1         if (vl->vl_class == Const) {  /* absolute addressing */
      987       987    2            load_cst(val, pointer_size);
      988       988    2            store_block(size, tpalign);
      989       989    2            return;
      990       990    2         }
      991       991    1         al_on_word = (tpalign % word_align == 0);
      992       992    1         if (!(inword = (size == word_size && al_on_word)))
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=28 
      993       993    1        #ifdef TM_L66
      994       994    1            indword = (size == dword_size && (tpalign == double_align));
      995       995    1        #else
      996       996   *S*           indword = (size == dword_size && al_on_word);
      997       997   *S*       #endif
      998       998    1         if (vl->vl_class == Name) {
      999       999    2            register struct idf *id = vl->vl_data.vl_idf;
     1000      1000    2            register struct def *df = id->id_def;
     1001      1001    2
     1002      1002    2            if (df->df_level == L_GLOBAL || df->df_sc==EXTERN || df->df_sc==GLOBAL) {
     1003      1003    3               if (inword)
     1004      1004    3                  C_ste_dnam(id->id_text, val);
     1005      1005    3               else
     1006      1006    3               if (indword)
     1007      1007    3                  C_sde_dnam(id->id_text, val);
     1008      1008    3               else {
     1009      1009    4                  C_lae_dnam(id->id_text, val);
     1010      1010    4                  store_block(size, tpalign);
     1011      1011    4               }
     1012      1012    3            }
     1013      1013    2            else {
     1014      1014    3               ASSERT(df->df_sc != STATIC);
     1015      1015    3               if (inword)
     1016      1016    3                  C_stl(df->df_address + val);
     1017      1017    3               else
     1018      1018    3               if (indword)
     1019      1019    3                  C_sdl(df->df_address + val);
     1020      1020    3               else {
     1021      1021    4                  C_lal(df->df_address + val);
     1022      1022    4                  store_block(size, tpalign);
     1023      1023    4                  df->df_register = REG_NONE;
     1024      1024    4               }
     1025      1025    3            }
     1026      1026    2         }
     1027      1027    1         else {
     1028      1028    2            label dlb = vl->vl_data.vl_lbl;
     1029      1029    2
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=29 
     1030      1030    2            ASSERT(vl->vl_class == Label);
     1031      1031    2            if (inword)
     1032      1032    2               C_ste_dlb(dlb, val);
     1033      1033    2            else
     1034      1034    2            if (indword)
     1035      1035    2               C_sde_dlb(dlb, val);
     1036      1036    2            else {
     1037      1037    3               C_lae_dlb(dlb, val);
     1038      1038    3               store_block(size, tpalign);
     1039      1039    3            }
     1040      1040    2         }
     1041      1041    1        }
     1042      1042
     1043      1043
     1044      1044             /*  load_val() generates code for stacking a certain value (from ex),
     1045      1045              which can be obtained in one of the following ways:
     1046      1046              - value from absolute addressed memory
     1047      1047              - constant value
     1048      1048              - function result
     1049      1049              - global variable
     1050      1050              - static variable
     1051      1051              - local variable
     1052      1052             */
     1053      1053             load_val(expr, rlval)
     1054      1054              register struct expr *expr; /* expression containing the value */
     1055      1055              int rlval;     /* generate either LVAL or RVAL     */
     1056      1056             {
     1057      1057    1         register struct type *tp = expr->ex_type;
     1058      1058    1         int rvalue = (rlval == RVAL && expr->ex_lvalue != 0);
     1059      1059    1         arith size = tp->tp_size;
     1060      1060    1         int tpalign = tp->tp_align;
     1061      1061    1         int al_on_word;
     1062      1062    1         register int inword, indword;
     1063      1063    1         register arith val = expr->VL_VALUE;
     1064      1064    1
     1065      1065    1         if (expr->VL_CLASS == Const) {
     1066      1066    2            if (rvalue) { /* absolute addressing */
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=30 
     1067      1067    3               load_cst(val, pointer_size);
     1068      1068    3               load_block(size, tpalign);
     1069      1069    3            }
     1070      1070    2            else  /* integer, unsigned, long, enum etc   */
     1071      1071    2               load_cst(val, size);
     1072      1072    2            return;
     1073      1073    2         }
     1074      1074    1         if (rvalue) {
     1075      1075    2            al_on_word = (tpalign % word_align == 0);
     1076      1076    2            if (!(inword = (size == word_size && al_on_word)))
     1077      1077    2        #ifdef TM_L66
     1078      1078    2               indword = (size == dword_size && (tpalign == double_align));
     1079      1079    2        #else
     1080      1080   *S*              indword = (size == dword_size && al_on_word);
     1081      1081   *S*       #endif
     1082      1082    2         }
     1083      1083    1         if (expr->VL_CLASS == Label) {
     1084      1084    2            if (rvalue) {
     1085      1085    3               if (inword)
     1086      1086    3                  C_loe_dlb(expr->VL_LBL, val);
     1087      1087    3               else
     1088      1088    3               if (indword)
     1089      1089    3                  C_lde_dlb(expr->VL_LBL, val);
     1090      1090    3               else {
     1091      1091    4                  C_lae_dlb(expr->VL_LBL, val);
     1092      1092    4                  load_block(size, tpalign);
     1093      1093    4               }
     1094      1094    3
     1095      1095    3            }
     1096      1096    2            else {
     1097      1097    3               C_lae_dlb(expr->VL_LBL, (arith)0);
     1098      1098    3               C_adp(val);
     1099      1099    3            }
     1100      1100    2         }
     1101      1101    1         else {
     1102      1102    2            register struct idf *id = expr->VL_IDF;
     1103      1103    2            register struct def *df;
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=31 
     1104      1104    2
     1105      1105    2            ASSERT(expr->VL_CLASS == Name);
     1106      1106    2            if ((df = id->id_def)->df_type->tp_fund == FUNCTION)
     1107      1107    2               /* the previous statement tried to catch a function
     1108      1108    2                  identifier, which may be cast to a pointer to a
     1109      1109    2                  function.
     1110      1110    2                  ASSERT(!(rvalue)); ???
     1111      1111    2               */
     1112      1112    2               C_lpi(id->id_text);
     1113      1113    2            else
     1114      1114    2            if (df->df_level == L_GLOBAL || df->df_sc==EXTERN || df->df_sc==GLOBAL) {
     1115      1115    3               if (rvalue) {
     1116      1116    4                  if (inword)
     1117      1117    4                     C_loe_dnam(id->id_text, val);
     1118      1118    4                  else
     1119      1119    4                  if (indword)
     1120      1120    4                     C_lde_dnam(id->id_text, val);
     1121      1121    4                  else {
     1122      1122    5                     C_lae_dnam(id->id_text, val);
     1123      1123    5                     load_block(size, tpalign);
     1124      1124    5                  }
     1125      1125    4               }
     1126      1126    3               else {
     1127      1127    4                  C_lae_dnam(id->id_text, (arith)0);
     1128      1128    4                  C_adp(val);
     1129      1129    4               }
     1130      1130    3            }
     1131      1131    2            else {
     1132      1132    3               ASSERT(df->df_sc != STATIC);
     1133      1133    3               if (rvalue) {
     1134      1134    4                  if (inword)
     1135      1135    4                     C_lol(df->df_address + val);
     1136      1136    4                  else
     1137      1137    4                  if (indword)
     1138      1138    4                     C_ldl(df->df_address + val);
     1139      1139    4                  else {
     1140      1140    5                     C_lal(df->df_address + val);
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=32 
     1141      1141    5                     load_block(size, tpalign);
     1142      1142    5                     df->df_register = REG_NONE;
     1143      1143    5                  }
     1144      1144    4               }
     1145      1145    3               else {
     1146      1146    4                  C_lal(df->df_address);
     1147      1147    4                  C_adp(val);
     1148      1148    4                  df->df_register = REG_NONE;
     1149      1149    4               }
     1150      1150    3            }
     1151      1151    2         }
     1152      1152    1        }
     1153      1153
     1154      1154             load_cst(val, siz)
     1155      1155              arith val, siz;
     1156      1156             {
     1157      1157    1         if (siz <= word_size)
     1158      1158    1            C_loc(val);
     1159      1159    1         else
     1160      1160    1         if (siz == dword_size)
     1161      1161    1            C_ldc(val);
     1162      1162    1         else {
     1163      1163    2            label datlab;
     1164      1164    2
     1165      1165    2        #if DATAFIRST && defined(USE_TMP)
     1166      1166    2            if (!options['N']) EM_File_No = 1;
     1167      1167    2        #endif
     1168      1168    2            if (zb_target_sys == TARGET_CP6)  {
     1169      1169    3               int s = align(constant_data, word_align)-constant_data;
     1170      1170    3               if (s) {
     1171      1171    4                  C_rom_scon(zeroes, (arith) (s));
     1172      1172    4                  constant_data += s;
     1173      1173    4               }
     1174      1174    3            }
     1175      1175    2            constant_data = ATW(constant_data);
     1176      1176    2            C_df_dlb(datlab = data_label());
     1177      1177    2            C_rom_icon(long2str((long)val, 10), siz);
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=33 
     1178      1178    2        #if DATAFIRST && defined(USE_TMP)
     1179      1179    2            EM_File_No = 0;
     1180      1180    2        #endif
     1181      1181    2            C_lae_dlb(datlab, (arith)0);
     1182      1182    2            C_loi(siz);
     1183      1183    2         }
     1184      1184    1        }
     1185      1185
     1186      1186
     1187      1187             arith
     1188      1188             alloc_param_list(origoffset,psize,al)   arith *origoffset,psize;   {
     1189      1189    1          register struct stack_level *stl = local_level;
     1190      1190    1
     1191      1191    1          *origoffset = stl->sl_local_offset;
     1192      1192    1          stl->sl_local_offset = -align(-stl->sl_local_offset + psize, al);
     1193      1193    1
     1194      1194    1          if (stl->sl_local_offset < stl->sl_max_block)
     1195      1195    1             stl->sl_max_block = stl->sl_local_offset;
     1196      1196    1
     1197      1197    1          return stl->sl_local_offset;
     1198      1198    1        }
     1199      1199
     1200      1200             void
     1201      1201             free_param_list(origoffset)  arith origoffset; {
     1202      1202    1
     1203      1203    1          local_level->sl_local_offset = origoffset;
     1204      1204    1        }
     1205      1205
     1206      1206             arith
     1207      1207             store_param_list(tp, pl) struct type *tp; arith pl; {
     1208      1208    1
     1209      1209    1          int al = tp->tp_align;
     1210      1210    1          int alt = (al <= 4) ? 4 : 8;
     1211      1211    1          arith size = tp->tp_size;
     1212      1212    1
     1213      1213    1          pl = -align( -pl-alt+1, alt);
     1214      1214    1          if (size == dword_size && al == dword_size && dword_size != word_size)
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=34 
     1215      1215    1             C_sdl(pl);
     1216      1216    1          else
     1217      1217    1          if (size == word_size)
     1218      1218    1             C_stl(pl);
     1219      1219    1          else {
     1220      1220    2             C_lal(pl);
     1221      1221    2             store_block(size,al);
     1222      1222    2          }
     1223      1223    1          return pl + ATW(size);
     1224      1224    1        }
     1225      1225
     1226      1226
     1227      1227             store_local_value(tp, loc)
     1228      1228               struct type *tp;
     1229      1229               arith        loc;
     1230      1230             {
     1231      1231    1          int   al = tp->tp_align;
     1232      1232    1          int   at = (al <= 4)? 4 : 8;
"zbc$eval:c.:ZBC3TSI", line 1232: (warning) identifier "at" is not used
     1233      1233    1          arith size = tp->tp_size;
     1234      1234    1
     1235      1235    1          if (size == dword_size && al == dword_size && dword_size != word_size)
     1236      1236    1             C_sdl(loc);
     1237      1237    1          else
     1238      1238    1          if (size == word_size)
     1239      1239    1             C_stl(loc);
     1240      1240    1          else  {
     1241      1241    2             C_lal(loc);
     1242      1242    2             store_block(size, al);
     1243      1243    2             }
     1244      1244    1          return;
     1245      1245    1        }
     1246      1246
     1247      1247             load_local_value(tp, loc)
     1248      1248               struct   type *tp;
     1249      1249               arith          loc;
     1250      1250             {
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=35 
     1251      1251    1          int   al = tp->tp_align;
     1252      1252    1          int   at = (al <= 4)? 4 : 8;
"zbc$eval:c.:ZBC3TSI", line 1252: (warning) identifier "at" is not used
     1253      1253    1          arith size = tp->tp_size;
     1254      1254    1
     1255      1255    1          if (size == dword_size && al == dword_size && dword_size != word_size)
     1256      1256    1             C_ldl(loc);
     1257      1257    1          else
     1258      1258    1          if (size == word_size)
     1259      1259    1             C_lol(loc);
     1260      1260    1          else  {
     1261      1261    2             C_lal(loc);
     1262      1262    2             load_block(size, al);
     1263      1263    2             }
     1264      1264    1          return;
     1265      1265    1        }
---  Include file information  ---

   zbc$nofloat:h.:ZBC3TOU. is referenced
   em:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   em_label:h.:ZBC3TOU. is referenced
   em_code:h.:ZBC3TOU. is referenced
   zbc$debug:h.:ZBC3TOU. is referenced
   zbc$nobitfield:h.:ZBC3TOU. is referenced
   zbc$dataflow:h.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   zbc$type:h.:ZBC3TOU. is referenced
   zbc$idf:h.:ZBC3TOU. is referenced
   zbc$nopp:h.:ZBC3TOU. is referenced
   zbc$label:h.:ZBC3TOU. is referenced
   zbc$code:h.:ZBC3TOU. is referenced
   zbc$assert:h.:ZBC3TOU. is referenced
   zbc$def:h.:ZBC3TOU. is referenced
   zbc$expr:h.:ZBC3TOU. is referenced
   zbc$sizes:h.:ZBC3TOU. is referenced
CC.C03    File=zbc$eval:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=36 
   zbc$nocross:h.:ZBC3TOU. is referenced
   zbc$target_sizes:h.:ZBC3TOU. is referenced
   zbc$Lpars:h.:ZBC3TOU. is referenced
   zbc$level:h.:ZBC3TOU. is referenced
   zbc$stack:h.:ZBC3TOU. is referenced
   zbc$align:h.:ZBC3TOU. is referenced
   zbc$mes:h.:ZBC3TOU. is referenced
   zbc$atw:h.:ZBC3TOU. is referenced
   zbc$zb_target:h.:ZBC3TOU. is referenced
   zbc$declar:h.:ZBC3TOU. is referenced
   zbc$dataFirst:h.:ZBC3TOU. is referenced
   zbc$use_tmp:h.:ZBC3TOU. is referenced

2 warnings were detected in the file zbc$eval:c.:ZBC3TSI
