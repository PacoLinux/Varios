

09:11 AUG 09 '97 Z8A_ETT.:Z8A6SI/Z8A_ETT.:Z8A6TUI                          1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6      /* INCLUDE FILE "ETT", ACCOUNT IS C80C80 */
    7
    8
    9      DCL   ETT$   PTR EXT ;
   10      DCL   HEAD_ETT$ PTR EXT
   11      %IF INITIALIZE;
   12      INIT (ADDR(NIL))
   13      %ENDIF;
   14      ;
   15
   16      DCL   ETT_BUCKETS (0:511) PTR EXT
   17      %IF INITIALIZE;
   18      INIT (ADDR(NIL)*512)
   19      %ENDIF;
   20      ;
   21
   22      DCL 1 ETT_   EXT,
   23          2 TOP    PTR INIT (ADDR(NIL)),
   24          2 FIRST  PTR,               /* FIRST ITEM IN PAGE  */
   25          2 BOTTOM SBIN INIT(0),      /* NEXT AVAILABLE      */
   26          2 FLOOR  SBIN INIT(0),      /* LAST WORD IN PAGE   */
   27          2 SIZE   SBIN INIT(0);      /* SIZE IN # PAGES     */
   28
   29      DCL 1 ETT    BASED (ETT$) ALIGNED,
   30          2 ID     UBIN HALF UNAL, /* OPERATION CODE */
   31          2 COUNT  UBIN HALF UNAL, /* #REFS TO NEXT REDEFINITION */
   32          2 LOP    PTR,            /* LEFT OPERAND */
   33          2 ROP    PTR,            /* RIGHT OPERAND */
   34          2 ROPCON REDEF ROP SBIN  WORD, /* ROP CONSTANT */
   35
   36          2 OFFSET REDEF ROP,      /* FOR OFF TRIAD */
   37          3 VALUE  SBIN HALF UNAL, /* -128K -> +128K */
09:11 AUG 09 '97 Z8A_ETT.:Z8A6SI/Z8A_ETT.:Z8A6TUI                          2    
   38          3 TYPE   UBIN HALF UNAL, /* 0=BIT,1=4-BIT,2=BYTE,3=WORD */
   39
   40          2 SIZE   REDEF ROP,      /* For FISS triad */
   41          3 VALUE  SBIN HALF UNAL, /* -128K -> +128K */
   42          3 TYPE   UBIN HALF UNAL, /* 0=Alpha, 1=Numeric */
   43
   44          2 ESCINF REDEF ROP,     /* For ESC and ARGP */
   45          3 ARG# UBIN HALF UNAL,  /* Number of Arg in arglist */
   46          3 BLK# UBIN HALF UNAL,  /* 16k block                */
   47
   48          2 DESC REDEF ROP,
   49          %DESCRIPTOR(LVL=3);
   50
   51          2 FILL_CHAR REDEF ROP , /* Used for CFILL */
   52          3 SYMBOL    CHAR(1) UNAL ,
   53          3 *         CHAR(3) UNAL ,
   54
   55          2 REF$   PTR,            /* Points to REFerence item (Gen only) */
   56          2 NEXT$  REDEF REF$ PTR, /* SRCH_ETT link            */
   57          2 EVALP$ REDEF REF$ PTR, /* PHASE 3 PTR TO EVALP     */
   58
   59          2 CMP_SC UBIN HALF UNAL, /* COMPUTE SEQUENCE         */
   60          2 STATE  REDEF CMP_SC UBIN HALF  UNAL, /* Triad state */
   61          2 LOP_RELATE REDEF CMP_SC UBIN HALF UNAL, /* LOP relational_operator */
   62
   63          2 CMP_BD UBIN HALF UNAL, /* Backward Definition Point */
   64          2 ROP_RELATE REDEF CMP_BD UBIN HALF UNAL, /* ROP relational_operator */
   65          2 B REDEF CMP_BD,
   66            3 ESC_LIST    BOOLEAN,
   67            3 OPTION      UBIN(5) UNAL,
   68            3 PR#         UBIN(5) UNAL,
   69    *       3 *           BIT(2) UNAL,
   70    *       3 OPT_SEARCH  BOOLEAN,
   71    *       3 MPI         BIT(1) UNAL,
   72            3 REVERSED_RELATE BIT(1) UNAL, /* Is this a reversed comparison */
   73            3 POOLED      BIT(1)  UNAL,
   74            3 POOLABLE    BIT(1)  UNAL; /* Is this a poolable ETT item? */
09:11 AUG 09 '97 Z8A_ETT.:Z8A6SI/Z8A_ETT.:Z8A6TUI                          3    
   75
   76      %MACRO RESERVE_ETT (ITEM=%TRIAD, POINTER=ETT$) ;
   77
   78           DO;
   79             IF HEAD_ETT$ = ADDR(NIL) THEN
   80               DO ;
   81                 IF ETT_.BOTTOM + SIZEW(ETT) >= ETT_.FLOOR THEN
   82                   CALL Z8AR$RESERVER(ADDR(ETT_));
   83
   84                 POINTER = PINCRW(ETT_.FIRST, ETT_.BOTTOM);
   85                 ETT_.BOTTOM = ETT_.BOTTOM + SIZEW(ETT);
   86               END ;
   87             ELSE
   88               %REMOVE_FROM_SL_LIST(PTR=POINTER, ITEM=ETT, HEAD=HEAD_ETT$,
   89                                    NEXT=NEXT$);
   90
   91             POINTER -> ETT.ID = ITEM;
   92           END;
   93
   94      %MEND;
   95
   96
   97
   98      %MACRO NEW_ETT( @ID     = ,  @POINTER = ETT$ ,
   99                      @LOP    = ,
  100                      @ROP    = ,
  101                      @ROPCON = ,
  102                      @STATE  = 0,
  103                      @LOP_RELATE = ,
  104                      @ROP_RELATE = ,
  105                      @COUNT  = 0,
  106                      @REF$   = "ADDR(NIL)",
  107                      @POOLABLE(YES = '1'B, NO = '0'B) = '0'B);
  108
  109           DO;
  110             %RESERVE_ETT(ITEM=@ID, POINTER=@POINTER);
  111
09:11 AUG 09 '97 Z8A_ETT.:Z8A6SI/Z8A_ETT.:Z8A6TUI                          4    
  112             %IF PHASE = 4;
  113               %IF TEXTCHAR(@LOP) ~= '';
  114                 @POINTER -> ETT.LOP = @LOP;
  115               %ENDIF;
  116
  117               %IF TEXTCHAR(@ROP) = '' AND TEXTCHAR(@ROPCON) = '';
  118                 @POINTER -> ETT.ROP = ADDR(NIL);
  119               %ENDIF;
  120
  121               %IF TEXTCHAR(@ROP) ~= '';
  122                 @POINTER -> ETT.ROP = @ROP;
  123               %ENDIF;
  124
  125               %IF TEXTCHAR(@ROPCON) ~= '';
  126                 @POINTER -> ETT.ROPCON = @ROPCON;
  127               %ENDIF;
  128
  129               @POINTER -> ETT.B = '0'O;
  130               @POINTER -> ETT.B.POOLABLE = @POOLABLE;
  131               @POINTER -> ETT.COUNT = @COUNT;
  132               @POINTER -> ETT.STATE = @STATE;
  133               @POINTER -> ETT.REF$  = @REF$;
  134             %ELSE;
  135               %IF TEXTCHAR(@LOP) ~= '';
  136                 @POINTER -> ETT.LOP = @LOP;
  137               %ENDIF;
  138
  139               %IF TEXTCHAR(@ROP) = '' AND TEXTCHAR(@ROPCON) = '';
  140                 @POINTER -> ETT.ROP = ADDR(NIL);
  141               %ENDIF;
  142
  143                 @POINTER -> ETT.REF$ = ADDR(NIL) ;
  144
  145               %IF TEXTCHAR(@ROP) ~= '';
  146                 @POINTER -> ETT.ROP = @ROP;
  147               %ENDIF;
  148
09:11 AUG 09 '97 Z8A_ETT.:Z8A6SI/Z8A_ETT.:Z8A6TUI                          5    
  149               %IF TEXTCHAR(@ROPCON) ~= '';
  150                 @POINTER -> ETT.ROPCON = @ROPCON;
  151               %ENDIF;
  152
  153               %IF TEXTCHAR(@LOP_RELATE) ~= '';
  154                 @POINTER -> ETT.LOP_RELATE = @LOP_RELATE ;
  155               %ENDIF ;
  156
  157               %IF TEXTCHAR(@ROP_RELATE) ~= '';
  158                 @POINTER -> ETT.ROP_RELATE = @ROP_RELATE ;
  159               %ENDIF ;
  160             %ENDIF;
  161           END;
  162
  163      %MEND;
  164
  165
  166      %MACRO TOP_ETT (POINTER = ETT$) ;
  167
  168           DO;
  169             POINTER = ETT_.TOP;
  170           END;
  171
  172      %MEND ;
  173
  174      %MACRO STEP_ETT (POINTER = ETT$) ;
  175
  176           DO;
  177             POINTER = PINCRW(POINTER, SIZEW(ETT));
  178
  179             IF POINTER = PINCRW(ETT_.FIRST, ETT_.BOTTOM) THEN
  180               POINTER = ADDR(NIL);
  181             ELSE
  182               IF POINTER -> ETT.ID = %CONTINUE THEN
  183                 POINTER = POINTER -> CONT.NEXT;
  184           END ;
  185
09:11 AUG 09 '97 Z8A_ETT.:Z8A6SI/Z8A_ETT.:Z8A6TUI                          6    
  186      %MEND ;
  187
  188
  189      %EQU FIRST_REFERENCE_TRIAD = BITBIN('001'O);
  190      %EQU LAST_REDEF_REFERENCE  = BITBIN('010'O);
  191      %EQU LAST_REFERENCE_TRIAD  = BITBIN('017'O);
  192
  193
  194      %MACRO SET_OF_COMPARISONS;
  195
  196           %CMGI, %CMGQ, %CMGR, %CMPA, %CMPC, %CMPD, %CMPI,
  197    *      %CMPQ, %CMPR, %CMGP, %CFILL, %CMPAO, %CMPAA,
  198    *      %CFILLR, %CMK, %CMPT, %CMPO
  199
  200      %MEND;
  201
  202      %MACRO SET_OF_ALPHANUM_COMPARISONS;
  203
  204    *      %CMPA, %CFILL, %CFILLR, %CMPAO, %CMPAA, %CMPT
  205
  206      %MEND;
  207
  208
  209      /* Codes for CVHI   */
  210      %EQU CVHI_UPPER           = 0;
  211      %EQU CVHI_LOWER           = 1;
  212      %EQU CVHI_UNKNOWN         = 2;
  213
  214      /* Codes for CVKI   */
  215      %EQU CVKI_BYTE0           = 0;
  216      %EQU CVKI_BYTE1           = 1;
  217      %EQU CVKI_BYTE2           = 2;
  218      %EQU CVKI_BYTE3           = 3;
  219      %EQU CVKI_UNKNOWN         = 4;
  220
  221      /* Codes for CVJI   */
  222      %EQU CVJI_BYTE0           = 0;
09:11 AUG 09 '97 Z8A_ETT.:Z8A6SI/Z8A_ETT.:Z8A6TUI                          7    
  223      %EQU CVJI_BYTE1           = 1;
  224      %EQU CVJI_BYTE2           = 2;
  225      %EQU CVJI_BYTE3           = 3;
  226      %EQU CVJI_UNKNOWN         = 4;
  227
  228
  229      /* CODES FOR OFF TRIAD, OFFSET.TYPE FIELD */
  230      %EQU BIT_     = 0 ; /* BIT UNITS */
  231      %EQU NUMERIC4 = 1 ; /* 4-BIT NUMERIC UNITS */
  232      %EQU ALPHA4   = 2 ; /* 4-BIT ALPHA UNITS */
  233      %EQU ALPHA6   = 3 ; /* 6-BIT ALPHA UNITS (BCD) */
  234      %EQU NUMERIC9 = 4 ; /* 9-BIT NUMERIC UNITS */
  235      %EQU ALPHA9   = 5 ; /* 9-BIT ALPHA UNITS */
  236      %EQU WORD_    = 6 ; /* WORD UNITS */
  237      /* Codes for Fiss triad, Size.Type field */
  238      %EQU ALPHA_NUMERIC_FISS = 0;
  239      %EQU NUMERIC_FISS = 1;
  240
  241      /* RUN TIME DATA TYPE CODES */
  242      %EQU PACKED_DECIMAL_LEAD_SIGN = 9;
  243      %EQU PACKED_DECIMAL_TRAIL_SIGN = 25;
  244      %EQU PACKED_DECIMAL_NO_SIGN = 40;
  245      %EQU PACKED_FLOATING_DECIMAL = 10;
  246      %EQU UNPACKED_DECIMAL_LEAD_SIGN = 42;
  247      %EQU UNPACKED_DECIMAL_TRAIL_SIGN = 43;
  248      %EQU UNPACKED_DECIMAL_NO_SIGN = 41;
  249      %EQU UNPACKED_FLOATING_DECIMAL = 46;
  250
  251    * /* CONVERSION TRIAD TEMP LENGTHS */
  252      %EQU CVID9_LENGTH = 12;
  253      %EQU CVQD9_LENGTH = 20;
  254      %EQU CVRD9_LENGTH = 10;
  255      %EQU CVID4_LENGTH = 12 ;
  256      %EQU CVHI_LENGTH  = 7 ;
  257
  258      /* Conversion triad temp scale factors */
  259      %EQU CVID4_SCALE_FACTOR = 0 ;
09:11 AUG 09 '97 Z8A_ETT.:Z8A6SI/Z8A_ETT.:Z8A6TUI                          8    
  260
  261      /* Codes for ROPCON of ADDR triad */
  262
  263      /* %EQU BIT_   = 0 ; See OFF codes */
  264         %EQU DIGIT_ = 2 ; /* 4-BIT      */
  265         %EQU BYTE_  = 4 ; /* 9-BIT      */
  266      /* %EQU WORD_  = 6 ; See OFF codes */
  267
  268
  269      /* Codes for COUNT field of ETT items */
  270      %EQU DONT_MESS = BITBIN('777777'O);
  271      %EQU MAX_COUNT = %#256K - 1;
  272
  273      %EJECT;


