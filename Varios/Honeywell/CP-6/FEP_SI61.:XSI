/*M* FEP - a program to display the channels on feps */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
FEP:    PROC MAIN;
 
/**/
/*  AUTHOR:   BEN FAUL, L.A.D.C */
 
DCL M$LO DCB;
 
DCL OUTPUT CHAR(80) STATIC;
 
DCL J SBIN;
DCL I SBIN;
 
DCL TTYPS(0:10) CHAR(15) STATIC INIT(   'Device station',
                              'Sync subdevice',
                              'Async device',
                              'Sync terminal',
                              'HDLC device',
                              'FEP',
                              'UNITREC device',
                              '3270 controller',
                              'Alien Network',
                              'Line link',
                              '3270 subdevice');
 
DCL USEAGE(0:9) CHAR(10) STATIC INIT('Terminal',
'Console',
'ISCG',
'OSCG',
'Comgroup',
'TPCG',
'Resource',
'3270',
'HDLC',
'RFEP');
 
DCL MINOR(0:255) UBIN;
DCL 1 MAJOR(0:255) WALIGNED,
      2 FEX UBIN(9) CALIGNED,
      2 TTYP UBIN(9) CALIGNED,
      2 PORT UBIN(18) CALIGNED,
      2 ASSOCTRM CHAR(8) CALIGNED,
      2 DNAME CHAR(8) CALIGNED,
      2 UTS UBIN CALIGNED,
      2 DEV UBIN HALF CALIGNED,
      2 SDEV UBIN HALF CALIGNED,
      2 LEV UBIN BYTE CALIGNED,
      2 USEAGE UBIN(9);
 
DCL INDX UBIN;
 
DCL 1 TEMP STATIC CALIGNED,
      2 * CHAR(1) CALIGNED INIT('-'),
      2 F1 CHAR(4) CALIGNED INIT(' '),
      2 * CHAR(1) CALIGNED INIT('-'),
      2 F2 CHAR(4) CALIGNED INIT(' ');
DCL TEMP2 REDEF TEMP CHAR(10);
 
DCL ITEMP SBIN;
DCL JTEMP SBIN;
DCL KTEMP SBIN;
 
DCL INPUT CHAR(256) STATIC;
 
DCL JUNK CHAR(16);
DCL N UBIN;
DCL X UBIN;
DCL K UBIN;
 
DCL OUTPUT$ PTR;
DCL B$JIT$ PTR SYMREF;
 
DCL B$TCB$ PTR SYMREF;
 
DCL X$PARSE ENTRY(1) ALTRET;
 
 
%INCLUDE CP_6;
%INCLUDE B$JIT;
%B$TCB;
%B$ALT;
%B$EXCFR;
%INCLUDE AZ_MACRO_C;
%INCLUDE AZ_SUBS_C;
%INCLUDE KL_SUPER_C;
%INCLUDE B_ERRORS_C;
%INCLUDE CP_6_SUBS;
%FPT_PFIL(FPTN=FPT_PFIL,
DCB=F$COMAC,
BOF=YES,
STCLASS=STATIC);
 
%FPT_WRITE(FPTN=WRITE,
BUF=OUTPUT,
DCB=M$LO,
STCLASS=STATIC);
 
%FPT_CLOSE(FPTN=CLOSE,DISP=SAVE);
 
%FPT_PRIV(FPTN=FPT_FMS,
AUTH=YES,PRIV=%PR_FMSEC#);
%VLP_CRITERIA(FPTN=VLP_CRITERIA,
ACCT='        ');
 
%VLP_NAME(FPTN=VLP_NAME,STCLASS=STATIC);
%VLP_ACCT(FPTN=VLP_ACCT,STCLASS=STATIC);
%FPT_TIME(FPTN=CHANGE_TIME,SOURCE=UTS,DEST=LOCAL,DATE=DATE,TIME=TIME,TSTAMP=TIMER);
DCL TIMER UBIN STATIC;
DCL TIME CHAR(11)  STATIC;
DCL DATE CHAR(8) STATIC;
 
%FPT_OPEN(FPTN=OPEN_INPUT,
STCLASS=STATIC,
FUN=IN,
NAME=VLP_NAME,
ACS=DIRECT,
ACCT=VLP_ACCT,
ASN=FILE);
%INCLUDE XU_MACRO_C;
DCL PARSE_WORK CHAR(1024) STATIC;
DCL COMMAND UBIN SYMREF;
%P_PCB(T=INPUT,
R=COMMAND,
W=PARSE_WORK,
WSZ=256,
N#=256);
%PARSE$SYM(NAME=OUTSYM,STCLASS=BASED);
%PARSE$OUT(NAME=OUTBLK,STCLASS=BASED);
/**/
/*  :COMAC STUFF */
/**/
 
DCL MSG_COUNT SBIN;
 
DCL FOUND BIT(1) UNAL;
 
DCL 1 COM_KEY STATIC,
      2 LEN UBIN BYTE UNAL,
      2 FEX UBIN BYTE UNAL,
      2 DTW,
        3 TW CHAR(4),
        3 D CHAR(4);
 
%COMACCTNG (NAME=COM_BUF,STCLASS = STATIC);
 
DCL 1 ST_KEY STATIC,
      2 LEN UBIN BYTE UNAL,
      2 FEX UBIN BYTE UNAL,
      2 DTW,
        3 TW CHAR(4),
        3 D CHAR(4);
 
DCL F$COMAC DCB;
DCL F$STAR DCB;
 
%FPT_READ(FPTN=FPT_RDCOM,
DCB=F$COMAC,
BUF=COM_BUF,
STCLASS=STATIC);
 
DCL REC$ PTR;
 
%FPT_OPEN(FPTN=OPEN_COMAC,
STCLASS=STATIC,
FUN=IN,
DCB=F$COMAC,
NAME=VLP_NAME,
ACCT=VLP_ACCT,
SHARE=ALL,
ASN=FILE);
 
%FPT_EXIT(FPTN=CODE);
 
%FPT_WRITE(FPTN=WRITE_COMAC,
BUF=COM_BUF,
DCB=M$LO,
STCLASS=STATIC);
 
DCL ANYBASE ENTRY(4);
 
/**/
%EJECT;
 
        VLP_NAME.L#=6;
        VLP_NAME.NAME#=':COMAC';
        VLP_ACCT.ACCT#=':SYS';
 
        CALL M$SPRIV(FPT_FMS);
 
 
        CALL M$OPEN(OPEN_COMAC) ALTRET(ABORT);
 
 
        INPUT=B$JIT.CCBUF;
 
 
        GOTO PROCESS;
 
ABORT:
        OUTPUT='*** you need FMR priv.';
        CALL M$WRITE(WRITE);
 
        CALL M$EXIT;
 
 
PROCESS: INPUT=B$JIT.CCBUF;
        CALL X$PARSE(P_PCB) ALTRET(SYNTAX);
 
        DO WHILE('0'B);
 
SYNTAX:    OUTPUT='*** Specify fep numbers seperated by commas!';
           CALL M$WRITE(WRITE);
           CALL M$EXIT;
 
           END;
 
        IF P_PCB.OUT$->OUTBLK.NSUBLKS=1 THEN DO;
 
           INDX=0;
           CALL M$PFIL(FPT_PFIL);
           J=0;
           K=0;
           DO WHILE('1'B);
UP:           CALL M$READ(FPT_RDCOM) ALTRET(LAST);
              IF COM_BUF.TERMID.CHANNEL=2102 THEN GOTO UP; /* Bogus record in :comac */
              IF COM_BUF.TTYP > %KLTY_LINEDEV#
              THEN
                 GOTO UP;
              IF COM_BUF.ASSOCTRM = 'LOCAL   '
              THEN
                 GOTO UP;
              IF COM_BUF.FEX=J THEN CALL STUFFIT;
              ELSE CALL NEWFEP;
              END;
           END;
 
        X=0;
        DO WHILE(X<P_PCB.OUT$->OUTBLK.SUBLK$(1)->OUTBLK.NSUBLKS);
           J=0;
           INDX=0;
           CALL M$PFIL(FPT_PFIL);
           CALL CHARBIN(K,P_PCB.OUT$->OUTBLK.SUBLK$(1)->OUTBLK.SUBLK$(X)->OUTSYM.TEXT);
UP1:       CALL M$READ(FPT_RDCOM) ALTRET(AGAIN);
                                        /* BOGUS RECORD?                      */
           IF COM_BUF.TERMID.CHANNEL=2102 THEN GOTO UP1;
           IF COM_BUF.TTYP > %KLTY_LINEDEV#
           THEN
              GOTO UP1;
           IF COM_BUF.ASSOCTRM = 'LOCAL   '
           THEN
              GOTO UP1;
           IF COM_BUF.FEX~=K THEN GOTO UP1;
           IF COM_BUF.FEX=J THEN CALL STUFFIT;
           ELSE CALL NEWFEP;
           GOTO UP1;
AGAIN:     X=X+1;
           CALL NEWFEP;
           CALL M$PFIL(FPT_PFIL);
           END;
 
        CALL M$EXIT;
 
LAST:   CALL NEWFEP;
 
%EJECT;
ANLZ:   PROC;
 
DCL L UBIN;
 
        DO L=0 TO INDX-1;
 
 
 
/* process records in order */
 
           OUTPUT=' ';
           SUBSTR(OUTPUT,23,15)=TTYPS(MAJOR.TTYP(L));
           CALL BINCHAR(JUNK,MAJOR.PORT(L));
           CALL ANYBASE(JUNK,10,SUBSTR(OUTPUT,0,15),16);
           IF SUBSTR(OUTPUT,12,1) = ' '
           THEN
              SUBSTR(OUTPUT,12,1)='0';
           IF SUBSTR(OUTPUT,13,1)=' ' THEN
              SUBSTR(OUTPUT,13,1)='0';
           IF SUBSTR(OUTPUT,14,1)=' ' THEN
              SUBSTR(OUTPUT,14,1)='0';
           SUBSTR(OUTPUT,11,1) = '-';
           JUNK = ' ';
           CALL BINCHAR(JUNK,MAJOR.FEX(L));
           ITEMP=0;
           DO WHILE (ITEMP<SIZEC(JUNK)-1
             AND
             SUBSTR(JUNK,ITEMP,1)='0');
              SUBSTR(JUNK,ITEMP,1)=' ';
              ITEMP=ITEMP+1;
              END;
           SUBSTR(OUTPUT,0,11)=SUBSTR(JUNK,5,11);
           IF MAJOR.LEV(L) > 1
           THEN
           DO;
              CALL BINCHAR(TEMP.F1,MAJOR.DEV(L));
              CALL BINCHAR(TEMP.F2,MAJOR.SDEV(L));
              ITEMP=0;
              DO WHILE(SUBSTR(TEMP.F1,ITEMP,1)='0' AND ITEMP<3);
                 SUBSTR(TEMP.F1,ITEMP,1)=' ';
                 ITEMP=ITEMP+1;
                 END;
              ITEMP=0;
              DO WHILE(SUBSTR(TEMP.F2,ITEMP,1)='0' AND ITEMP<3);
                 SUBSTR(TEMP.F2,ITEMP,1)=' ';
                 ITEMP=ITEMP+1;
                 END;
              JTEMP=0;
              IF MAJOR.LEV(L) = 3
              THEN
                 KTEMP = SIZEC(TEMP2);
              ELSE
                 KTEMP = SIZEC(TEMP2)/2;
              DO ITEMP=0 TO KTEMP-1;
                 IF SUBSTR(TEMP2,ITEMP,1) ~= ' '
                 THEN
                 DO;
                    SUBSTR(OUTPUT,16+JTEMP,1)=SUBSTR(TEMP2,ITEMP,1);
                    JTEMP=JTEMP+1;
                    END;
                 END;                   /* do if possible subdev cnvsn        */
              END;
           SUBSTR(OUTPUT,40,8)=MAJOR.ASSOCTRM(L);
           SUBSTR(OUTPUT,55,10)=USEAGE(MAJOR.USEAGE(L));
           IF MAJOR.DNAME(L) ~= '~~~~~~~~'
           THEN
           DO;
              KTEMP=SIZEC(OUTPUT)-1;
              DO WHILE(SUBSTR(OUTPUT,KTEMP,1) = ' ');
                 KTEMP = KTEMP - 1;
                 END;
              KTEMP = KTEMP + 2;
              SUBSTR(OUTPUT,KTEMP,1)='[';
              JTEMP=0;
              DO WHILE(SUBSTR(MAJOR.DNAME(L),JTEMP,1) ~= ' '
                AND
                JTEMP < SIZEC(MAJOR.DNAME(L)));
                 KTEMP=KTEMP+1;
                 SUBSTR(OUTPUT,KTEMP,1) =
                   SUBSTR(MAJOR.DNAME(L),JTEMP,1);
                 JTEMP=JTEMP+1;
                 END;
              KTEMP=KTEMP+1;
              SUBSTR(OUTPUT,KTEMP,1)=']';
              END;                      /* DO IF DEVNAME AROUND               */
           CALL M$WRITE(WRITE);
 
           END;
 
 
END;
 
%EJECT;
NEWFEP: PROC;
 
DCL JUNK CHAR(2);
 
        IF J=0 THEN GOTO OVER;
 
        OUTPUT=' ';
        CALL M$WRITE(WRITE);
        CALL BINCHAR(JUNK,MAJOR.FEX(INDX-1));
        IF SUBSTR(JUNK,0,1)='0' THEN SUBSTR(JUNK,0,1)=' '; /* suppress        */
          TIMER=BITBIN('777777777777'O);
          I = INDX-1;
          DO WHILE (I>=0);
            IF TIMER>MAJOR.UTS(I) THEN
               TIMER=MAJOR.UTS(I);
               I=I-1;
               END;
        CALL M$TIME(CHANGE_TIME);
        CALL CONCAT(OUTPUT,'     FEP ',JUNK,' On at: ',TIME, ' ',DATE);
        CALL M$WRITE(WRITE);
        OUTPUT=' ';
        CALL M$WRITE(WRITE);
        OUTPUT='           Channel#     Type            Logon          Usage';
        CALL M$WRITE(WRITE);
        CALL BUBSORT;
        CALL ANLZ;
OVER:   J=COM_BUF.FEX;
 
        DO INDX=0 TO 255;
           MAJOR.PORT(INDX)=0;
           END;
 
        INDX=0;
        CALL STUFFIT;
 
END;
 
%EJECT;
STUFFIT: PROC;
 
        MAJOR.FEX(INDX)=COM_BUF.FEX;
        MAJOR.USEAGE(INDX)=COM_BUF.USEAGE;
        MAJOR.ASSOCTRM(INDX)=COM_BUF.ASSOCTRM;
        MAJOR.PORT(INDX)=COM_BUF.TERMID.CHANNEL;
        MAJOR.TTYP(INDX)=COM_BUF.TTYP;
        IF COM_BUF.ATYP = %KLAT_LINE#
        THEN
           MAJOR.TTYP(INDX) = 7;
        IF COM_BUF.ATYP = %KLAT_LNKLINE#
        THEN
           MAJOR.TTYP(INDX) = 4;
        IF COM_BUF.ATYP = %KLAT_NETWORK#
        THEN
           MAJOR.TTYP (INDX) = 8;
        IF COM_BUF.USEAGE = %AZ_USETP#
        THEN
        DO;
           MAJOR.ASSOCTRM(INDX) = COM_BUF.DEVNM;
           MAJOR.DNAME(INDX) = COM_BUF.INSTANCE;
           END;
        ELSE
        DO;
           MAJOR.ASSOCTRM(INDX) = COM_BUF.ASSOCTRM;
           IF MAJOR.TTYP(INDX) = %KLTY_SDEV#
           THEN
              MAJOR.DNAME(INDX) = COM_BUF.DEVNM;
           ELSE
              MAJOR.DNAME(INDX) = '~~~~~~~~';
           END;
        MAJOR.UTS(INDX)=COM_BUF.UTS;
        MAJOR.LEV(INDX) = COM_BUF.TERMID.LEV;
        MAJOR.DEV(INDX) = COM_BUF.TERMID.SUBDEVICE;
        MAJOR.SDEV(INDX) = COM_BUF.TERMID.SUBSUBDEVICE;
        J=COM_BUF.FEX;
 
        INDX=INDX+1;
END;
%EJECT;
BUBSORT: PROC;
 
DCL M UBIN;
DCL I UBIN;
DCL IP UBIN;
DCL 1 TEMP WALIGNED,
      2 FEX UBIN(9) CALIGNED,
      2 TTYP UBIN(9) CALIGNED,
      2 PORT UBIN(18) CALIGNED,
      2 ASSOCTRM CHAR(8) CALIGNED,
      2 DNAME CHAR(8) CALIGNED,
      2 UTS UBIN CALIGNED,
      2 DEV UBIN HALF CALIGNED,
      2 SDEV UBIN HALF CALIGNED,
      2 LEV UBIN BYTE CALIGNED,
      2 USEAGE UBIN(9);
 
        DO I=0 TO INDX-1;
           IP=I+1;
           M=I;
           DO J=IP TO INDX;
              IF MAJOR.PORT(M)>=MAJOR.PORT(J) THEN;
              ELSE M=J;
              END;
           TEMP=MAJOR(I);
           MAJOR(I)=MAJOR(M);
           MAJOR(M)=TEMP;
           END;
END;
END;
%EOD;
/*M* ANYBASE: Converts a number from anybase to anybase */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*
   BASEIN is number in radix B (character... 16 bytes wide)
   BASEOUT is number in radix B1 (character... 16 bytes wide)
 
   If BASEIN contains an illegal digit then the routine will
   altreturn with B holding the illegal character.
 
   Notice: This routine, ANYBASE is general purpose and can be used to
           convert from anybase up to radix 62
 
*/
 
/* Author: Ben Faul LADC, Computer Operations */
ANYBASE: PROC(BASEIN,B,BASEOUT,B1);
 
DCL ROUND ENTRY(4);
DCL Q CHAR(66) STATIC INIT('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz');
DCL BASEIN CHAR(16);
DCL BASEOUT CHAR(16);
DCL B UBIN;
DCL B1 UBIN;
 
DCL N UBIN;
DCL N1 UBIN;
DCL I UBIN;
DCL I1 UBIN;
DCL A UBIN;
DCL R UBIN;
DCL X UBIN;
DCL L UBIN;
DCL L1 UBIN;
 
        L1=15;
        L=15;
        N=0;
 
        DO I=0 TO L;
           DO I1=0 TO B-1;
              IF SUBSTR(BASEIN,I,1)~=SUBSTR(Q,I1,1) THEN GOTO OVER;
              N=N*B+I1;
              GOTO OVER1;
OVER:         END;
           B=I;
/*         ALTRETURN;    */
/* when using this routine in other programs, use the altreturn to find
  illegal digits input to the program */
OVER1:     END;
 
        X=15;
        N1=N;
 
LOOP:   CALL ROUND(R,N,B1,A);
 
        R=N-A*B1;
        SUBSTR(BASEOUT,X,1)=SUBSTR(Q,R,1);
        GOTO N3490;
N3490:  X=X-1;
 
        IF A<=0 THEN GOTO N3530;
        N=A;
        GOTO LOOP;
 
N3530:  ;
 
END;
