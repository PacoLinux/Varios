

CC.C03    File=zbc$decspecs:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: decspecs.c,v 3.6 87/03/25 22:50:59 ceriel Exp $ */
        6         6             /*  D E C L A R A T I O N   S P E C I F I E R   C H E C K I N G */
        7         7
        8         8             #include "nofloat:h"
        9         9             #include "Lpars:h"
       10        10             #include "decspecs:h"
       11        11             #include "arith:h"
       12        12             #include "type:h"
       13        13             #include "level:h"
       14        14             #include "def:h"
       15        15             #include "noRoption:h"
       16        16
       17        17             extern char options[];
       18        18             extern int level;
       19        19             extern char *symbol2str();
       20        20
       21        21             struct decspecs null_decspecs = {0, 0, 0, 0, 0, 0};
       22        22
       23        23             do_decspecs(ds)
       24        24              register struct decspecs *ds;
       25        25             {
       26        26    1         /* The provisional decspecs ds as obtained from the program
       27        27    1            is turned into a legal consistent decspecs.
       28        28    1         */
       29        29    1         register struct type *tp = ds->ds_type;
       30        30    1
       31        31    1         if (level == L_FORMAL1)
       32        32    1            crash("do_decspecs");
       33        33    1
       34        34    1         if (  level == L_GLOBAL &&
       35        35    1            (ds->ds_sc == AUTO || ds->ds_sc == REGISTER)
       36        36    1         )  {
CC.C03    File=zbc$decspecs:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=2  
       37        37    2            warning("no global %s variable allowed",
       38        38    2               symbol2str(ds->ds_sc));
       39        39    2            ds->ds_sc = GLOBAL;
       40        40    2         }
       41        41    1
       42        42    1         if (level == L_FORMAL2) {
       43        43    2            if (ds->ds_sc_given && ds->ds_sc != REGISTER) {
       44        44    3               extern char *symbol2str();
       45        45    3               if (ds->ds_sc == AUTO)
       46        46    3                  warning("\"%s\" attribute illegal for formal argument", symbol2str(d
                               s->ds_sc));
       47        47    3               else error("\"%s\" attribute illegal for formal argument", symbol2str(d
                               s->ds_sc));
       48        48    3               ds->ds_sc = FORMAL;
       49        49    3            }
       50        50    2         }
       51        51    1         /* The tests concerning types require a full knowledge of the
       52        52    1            type and will have to be postponed to declare_idf.
       53        53    1         */
       54        54    1
       55        55    1         /* some adjustments as described in RM 8.2 */
       56        56    1         if (tp == 0)
       57        57    1            tp = int_type;
       58        58    1         if (ds->ds_size && ds->ds_tplvl)
       59        59    1            warning("type specifiers not permitted with typedef type");
       60        60    1         switch (ds->ds_size) {
       61        61    2         case SHORT:
       62        62    2            if (tp == int_type)
       63        63    2               tp = short_type;
       64        64    2            else
       65        65    2               error("short with illegal type");
       66        66    2            break;
       67        67    2         case LONG:
       68        68    2            if (tp == int_type)
       69        69    2               tp = long_type;
       70        70    2            else
       71        71    2        #ifndef NOFLOAT
CC.C03    File=zbc$decspecs:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=3  
       72        72    2            if (tp == double_type)
       73        73    2               tp = ldouble_type;
       74        74    2            else
       75        75    2        #endif NOFLOAT
       76        76    2               error("long with illegal type");
       77        77    2            break;
       78        78    2         }
       79        79    1         if (ds->ds_unsigned) {
       80        80    2            switch (tp->tp_fund) {
       81        81    3            case CHAR:
       82        82    3        #ifndef NOROPTION
       83        83    3               if (options['R'])
       84        84    3                  warning("unsigned char not allowed");
       85        85    3        #endif
       86        86    3           tp = (ds->ds_unsigned != SIGNED) ? uchar_type : schar_type;
       87        87    3               break;
       88        88    3            case SHORT:
       89        89    3        #ifndef NOROPTION
       90        90    3               if (options['R'])
       91        91    3                  warning("unsigned short not allowed");
       92        92    3        #endif
       93        93    3           tp = (ds->ds_unsigned == UNSIGNED) ? ushort_type : short_type;
       94        94    3               break;
       95        95    3            case INT:
       96        96    3           tp = (ds->ds_unsigned == UNSIGNED) ? uint_type : sint_type;
       97        97    3               break;
       98        98    3            case LONG:
       99        99    3        #ifndef NOROPTION
      100       100    3               if (options['R'])
      101       101    3                  warning("unsigned long not allowed");
      102       102    3        #endif
      103       103    3           tp = (ds->ds_unsigned == UNSIGNED) ? ulong_type : long_type;
      104       104    3               break;
      105       105    3            default:
      106       106    3               error("unsigned with illegal type");
      107       107    3               break;
      108       108    3            }
CC.C03    File=zbc$decspecs:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=4  
      109       109    2         }
      110       110    1         if (tp->tp_const && ds->ds_const)
      111       111    1            error("type already has \"const\" attribute");
      112       112    1         if (tp->tp_volatile && ds->ds_volatile)
      113       113    1            error("type already has \"volatile\" attribute");
      114       114    1         if (ds->ds_const != tp->tp_const || tp->tp_volatile != ds->ds_volatile) {
      115       115    2            tp = build_qualified_type(tp,(ds->ds_const || tp->tp_const),(ds->ds_volati
                               le || tp->tp_volatile));
      116       116    2         }
      117       117    1         ds->ds_type = tp;
      118       118    1        }
      119       119
---  Include file information  ---

   zbc$nofloat:h.:ZBC3TOU. is referenced
   zbc$Lpars:h.:ZBC3TOU. is referenced
   zbc$decspecs:h.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   zbc$type:h.:ZBC3TOU. is referenced
   zbc$nobitfield:h.:ZBC3TOU. is referenced
   zbc$level:h.:ZBC3TOU. is referenced
   zbc$def:h.:ZBC3TOU. is referenced
   zbc$noRoption:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbc$decspecs:c.:ZBC3TSI
