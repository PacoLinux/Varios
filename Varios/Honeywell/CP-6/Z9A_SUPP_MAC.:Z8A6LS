

09:24 AUG 09 '97 Z9A_SUPP_MAC.:Z8A6SI/Z9A_SUPP_MAC.:Z8A6TUI                1    
    1      /*M* Z9A_SUPP_MAC - System-dependent support macros for CP-6 */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /*X* DDA */
    9
   10      %MACRO DCBPTR (STCLASS=SYMREF);
   11      %LSET LISTDIR='0'B;
   12      %LSET LISTEXP='1'B;
   13      %LSET LISTCOM='0'B;
   14      %LSET LISTSUB='1'B;
   15      DCL Z9A8$M$ES$ PTR STCLASS;
   16      DCL Z9A8$M$SI$ PTR STCLASS;
   17      DCL Z9A8$M$UI$ PTR STCLASS;
   18      DCL Z9A8$M$SO$ PTR STCLASS;
   19      DCL Z9A8$M$OU$ PTR STCLASS;
   20      DCL Z9A8$M$LO$ PTR STCLASS;
   21      DCL Z9A8$M$ME$ PTR STCLASS;
   22      DCL Z9A8$M$DO$ PTR STCLASS;
   23      DCL Z9A8$M$OBJFILE$ PTR STCLASS;
   24      DCL Z9A8$M$ES# UBIN STCLASS;
   25      DCL Z9A8$M$SI# UBIN STCLASS;
   26      DCL Z9A8$M$UI# UBIN STCLASS;
   27      DCL Z9A8$M$SO# UBIN STCLASS;
   28      DCL Z9A8$M$OU# UBIN STCLASS;
   29      DCL Z9A8$M$LO# UBIN STCLASS;
   30      DCL Z9A8$M$ME# UBIN STCLASS;
   31      DCL Z9A8$M$DO# UBIN STCLASS;
   32      DCL Z9A8$M$OBJFILE# UBIN STCLASS;
   33      %MEND;
   34
   35
   36       %MACRO OVERLAY_FALL_THRU;
   37         DO;
09:24 AUG 09 '97 Z9A_SUPP_MAC.:Z8A6SI/Z9A_SUPP_MAC.:Z8A6TUI                2    
   38           /* This CALL on CP-6 is not implemented yet */
   39         END;
   40       %MEND;
   41
   42       %MACRO OVERLAY_ALTERED_GO (@ARG1 = "ADDR(NIL)", @ARG2 = 0);
   43         DO;
   44            IF @ARG1 = ADDR(NIL) OR
   45              @ARG2 = 0 THEN
   46              DO;
   47               /* This CALL on CP-6 is not implemented yet */
   48              END;
   49         END;
   50       %MEND;
   51
   52       %MACRO OVERLAY_REGULAR_GO;
   53         DO;
   54           /* This part code is not completed yet on CP-6 */
   55
   56             %RSV_ILS_ILL (@ILL_ITEM = %LINOI);
   57
   58             SUB_TAIL$ -> ILS.ILL$ -> LINOI = ENTRY_LINOI$ -> LINOI;
   59
   60             %RSV_ILS_ILL (@ILL_ITEM = %GO);
   61
   62             SUB_TAIL$ -> ILS.ILL$ -> GO.CODE = %GO_UNCONDITIONAL;
   63             SUB_TAIL$ -> ILS.ILL$ -> GO.LOP = ILL$ -> GO.LOP;
   64             SUB_TAIL$ -> ILS.ILL$ -> GO.ROP = ADDR(NIL);
   65
   66         END;
   67       %MEND;
   68       %MACRO CP6_RETURN_CHECK;
   69         DO;
   70           IF NOT PERFORM_CHANGE THEN
   71             RETURN;    /* If it is on CP-6 then RETURN */
   72         END;
   73       %MEND;
   74
09:24 AUG 09 '97 Z9A_SUPP_MAC.:Z8A6SI/Z9A_SUPP_MAC.:Z8A6TUI                3    
   75
   76       %MACRO GOTO_FIXED_SEGMENT;
   77         DO;
   78           /*  NOT IMPLEMENTED ON CP-6 YET */
   79         END;
   80       %MEND;
   81
   82       %MACRO SEGMENT_ORG_MOD;
   83         DO;
   84           /* NOT INPLEMENTED ON CP-6 YET */
   85         END;
   86       %MEND;
   87
   88       %MACRO CREATE_X9SG_SYMREF;
   89         DO;
   90           /* NOT INPLEMENTED YET ON CP-6 */
   91         END;
   92       %MEND;
   93
   94
   95      %EQU ENTRY_NAME_LENGTH = 12;
   96      %EQU ZERO_ARG_NAME  = 'X66_STATIC_0';
   97      %EQU ONE_ARG_NAME   = 'X66_STATIC_1';
   98      %EQU TWO_ARG_NAME   = 'X66_STATIC_2';
   99      %EQU THREE_ARG_NAME = 'X66_STATIC_3';
  100      %EQU FOUR_ARG_NAME  = 'X66_STATIC_4';
  101      %EQU N_ARG_NAME     = 'X66_STATIC_N';
  102
  103
  104      %MACRO USE_LIBRARY_RETURN;
  105         DO;
  106           %NEW_ILL (@ID = %USE_END,
  107                     @CODE = %USE_PROC);
  108         END;
  109      %MEND;
  110
  111      %MACRO DB_EXCEPT_LIBRARY_RETURN;
09:24 AUG 09 '97 Z9A_SUPP_MAC.:Z8A6SI/Z9A_SUPP_MAC.:Z8A6TUI                4    
  112         DO;
  113           %NEW_ILL (@ID   = %USE_END,
  114                     @CODE = %DB_EXCEPT_PROC);
  115         END;
  116      %MEND;
  117
  118
  119      %MACRO SEGNUM_CHECK;
  120        DO;
  121          IF ILL$ -> ILL.LOP -> LABEL.SECTION$ ~= ADDR(NIL) AND
  122            ILL$ -> ILL.LOP -> LABEL.SECTION$ -> SECTION.SEGMENT$ ~= ADDR(NIL) AND
  123            (ILL$ -> ILL.LOP -> LABEL.SECTION$ -> SECTION.SEGMENT$ ->
  124              SEGMENT_LTS.SEGMENT_NO# = ALTER_LTS$ -> ALTER_LTS.SEG_NO# OR
  125            ALTER_LTS$ -> ALTER_LTS.SEG_NO# < COMCOM.SEG_LIMIT ) THEN
  126            GENERATE_CODE = FALSE;
  127        END;
  128      %MEND;
  129
  130      %MACRO REPLACE_OLD_GO (@GO_ILL$ = ILS$ -> ILS.ILL$,
  131                             @LABEL$  = LABEL_USE$);
  132        DO;
  133          @GO_ILL$ -> GO.CODE = %GO_UNCONDITIONAL;
  134          @GO_ILL$ -> GO.LOP  = @LABEL$;
  135          @GO_ILL$ -> GO.ROP  = ADDR(NIL);
  136
  137        END;
  138      %MEND;
  139
  140
  141
  142      %MACRO GO_TO_NEW_LABEL (@GO_LABEL$ = NEW_LABEL$,
  143                              @GO_ILL$ = ILL$);
  144        DO;
  145
  146          @GO_ILL$ -> GO.LOP  = @GO_LABEL$;
  147
  148        END;
09:24 AUG 09 '97 Z9A_SUPP_MAC.:Z8A6SI/Z9A_SUPP_MAC.:Z8A6TUI                5    
  149      %MEND;
  150
  151      %MACRO ASSIGN_SEGMENTC;
  152        DO;
  153          /* DO NOTHING HERE */
  154        END;
  155      %MEND;
  156
  157       %MACRO SEGMENT_COUNT_CHECK;
  158         DO;
  159           /* DO NOTHING IN THE SINGLE SEGMENT ENVIRONMENT */
  160         END;
  161       %MEND;
  162       %MACRO IF_SEGMENT_COUNT_VALID_THEN;
  163           /* DO NOTHING IN THE SINGLE SEGMENT ENVIRONMENT */
  164       %MEND;
  165
  166       %MACRO GOTO_DIFFERENT_SEGMENT;
  167         DO;
  168           /* Do nothing in single segment environment */
  169         END;
  170       %MEND;
  171
  172       %MACRO VIRTUAL_SEGMENT_CHECK;
  173         DO;
  174           /* Do nothing in single segment environment */
  175         END;
  176       %MEND;
  177
  178       %MACRO PERFORM_TO_GO;
  179         DO;
  180    *        %RESERVE_ILS(ITEM = %OPN, POINTER = PFORM_ILS$->ILS.NEXT);
  181    *        %NEXT_ILS(POINTER = PFORM_ILS$) ;
  182    *        %RESERVE_ILL(ITEM = %LINOI, POINTER = PFORM_ILS$->ILS.ILL$);
  183    *        PFORM_ILS$->ILS.ILL$->LINOI.PREV_LINE = COMCOM.CURRENT.LINE;
  184    *        PFORM_ILS$->ILS.ILL$->LINOI.LINE_NO = COMCOM.CURRENT.LINE;
  185    *        PFORM_ILS$->ILS.ILL$->LINOI.PREV_COL = COMCOM.CURRENT.COLUMN;
09:24 AUG 09 '97 Z9A_SUPP_MAC.:Z8A6SI/Z9A_SUPP_MAC.:Z8A6TUI                6    
  186    *        PFORM_ILS$->ILS.ILL$->LINOI.COLUMN_NO = COMCOM.CURRENT.COLUMN;
  187             IF PERFORM_CHANGE THEN
  188               DO;
  189                 CALL GEN_ALTER_CHANGE (START_LABEL$,
  190                                        TO_SEG_NO#,
  191                                        NEW_LABEL$);
  192                 CALL CREATE_ITEM_ILS (%GO, NEW_LABEL$, ADDR(NIL));
  193               END;
  194             ELSE
  195               CALL CREATE_ITEM_ILS(%GO, START_LABEL$, ADDR(NIL)) ;
  196
  197         END;
  198       %MEND;
  199
  200       %MACRO PRE_PERFORM_ALTER;
  201         DO;
  202             IF PRE_ALTER_CHANGE THEN
  203               DO;
  204                 CALL GEN_ALTER_CHANGE (ALTER_LBL$,
  205                                        FROM_SEG_NO#,
  206                                        NEW_LABEL$);
  207                 CALL CREATE_ITEM_ILS (%ALTER, POINTER$, NEW_LABEL$);
  208               END;
  209             ELSE
  210               CALL CREATE_ITEM_ILS(%ALTER, POINTER$, ALTER_LBL$) ;
  211         END;
  212       %MEND;
  213
  214       %MACRO POST_PERFORM_ALTER;
  215         DO;
  216             IF POST_ALTER_CHANGE THEN
  217               DO;
  218                 CALL GEN_ALTER_CHANGE (END_LABEL_74$,
  219                                        END_SEG_NO#,
  220                                        NEW_LABEL$);
  221                 CALL CREATE_ITEM_ILS (%ALTER, POINTER$, NEW_LABEL$);
  222               END;
09:24 AUG 09 '97 Z9A_SUPP_MAC.:Z8A6SI/Z9A_SUPP_MAC.:Z8A6TUI                7    
  223             ELSE
  224               CALL CREATE_ITEM_ILS(%ALTER, POINTER$, END_LABEL_74$) ;
  225         END;
  226       %MEND;
  227
  228       %MACRO CALL_REFRESH_SUB;
  229         DO;
  230           PREV_ILS$ = ILL$ -> ILL.LOP -> LABEL.PREV_ILS$;
  231
  232           %FIND_LINE_NO (@START_ITEM$ = PREV_ILS$);
  233
  234           %RESERVE_ILS (ITEM = %OPN,
  235                         POINTER = TEMP$);
  236
  237           %RESERVE_ILL (ITEM = %LINOI,
  238                        POINTER = TEMP$ -> ILS.ILL$);
  239
  240           TEMP$ -> ILS.ILL$ -> LINOI = O2COM.LINE_NO$ -> ILS.ILL$ -> LINOI;
  241
  242           %RESERVE_ILS (ITEM = %OPN,
  243                         POINTER = TEMP$ -> ILS.NEXT);
  244
  245           %RESERVE_ILL (ITEM = %GO,
  246                         POINTER = TEMP$ -> ILS.NEXT -> ILS.ILL$);
  247
  248           TEMP$ -> ILS.NEXT -> ILS.ILL$ -> GO.CODE = %GO_AND_SAVE_IC_IN_X1;
  249           TEMP$ -> ILS.NEXT -> ILS.ILL$ -> GO.LOP = CALL_LABEL$;
  250           TEMP$ -> ILS.NEXT -> ILS.ILL$ -> GO.ROP = ADDR(NIL);
  251           ILL$ -> ILL.LOP -> LABEL.PREV_ILS$ = TEMP$ -> ILS.NEXT;
  252           TEMP$ -> ILS.NEXT -> ILS.NEXT = PREV_ILS$ -> ILS.NEXT;
  253           PREV_ILS$ -> ILS.NEXT = TEMP$;
  254         END;
  255       %MEND;
  256
  257       %MACRO GET_RESET_OVERLAY;
  258         DO;
  259           CALL CREATE_ITEM_ILS (%GO, CALL_LABEL$, ADDR(NIL));
09:24 AUG 09 '97 Z9A_SUPP_MAC.:Z8A6SI/Z9A_SUPP_MAC.:Z8A6TUI                8    
  260
  261           PFORM_ILS$ -> ILS.ILL$ -> ILL.CODE = %GO_AND_SAVE_IC_IN_X1;
  262         END;
  263       %MEND;
  264
  265       %MACRO CHECK_VIRTUAL_ALTERED_GO;
  266         DO;
  267           /* Do nothing in single segment environment */
  268         END;
  269       %MEND;
  270
  271       %MACRO CHECK_VIRTUAL_SIMPLE_GO;
  272         DO;
  273           /* Do nothing in single segment environment */
  274         END;
  275       %MEND;
  276
  277       %MACRO SEGMENT_OPTZ_CHECK;
  278           /* Do nothing in single segment environment */
  279       %MEND;
  280
  281       %MACRO SEGMENTED_BLOCK_CHECK;
  282           /* Do nothing in single segment environment */
  283       %MEND;
  284
  285       %MACRO SEGMENTED_TEMP_CHECK;
  286           /* Do nothing in single segment environment */
  287       %MEND;
  288

