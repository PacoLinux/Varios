

09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6      %MACRO LOCALLY_LEAST_COST_PROC;
    7
    8      LOCALLY_LEAST_COST_CORRECTION : PROC;
    9
   10      %ERROR_COST_SYMREFS;
   11      %ERROR_PATH_SYMREFS;
   12      %TSTRING_SYMREFS;
   13
   14      %MACRO CORR_BODY;
   15            2 DEL_LEN    SBIN WORD,
   16            2 DEL_COST   SBIN WORD,
   17            2 INS_TO_SYM SBIN WORD,
   18            2 INSRT_LEN  SBIN WORD,
   19            2 INSRT_COST SBIN WORD,
   20            2 INSRT (0:%INSRT_LEN_MAX) SBIN HALF HALIGNED;
   21      %MEND;
   22
   23
   24      DCL 1 LC,
   25            %CORR_BODY;
   26
   27      DCL 1 LR,
   28            %CORR_BODY;
   29
   30      DCL LARGE_DELETION BIT(1);
   31      DCL ACCUM_DEL_LEN SBIN WORD;
   32      DCL ACCUM_DEL_COST SBIN WORD;
   33      DCL ACCUM_INS_TO_SYM SBIN WORD;
   34
   35
   36      %MACRO TRIAL_PARSE_STACK_OVERFLOW;
   37
09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      2    
   38             /* The parse stack has overflowed, so abort the compilation.
   39             */
   40
   41      DO;
   42        %RESET_ERROR_LOC(L="LA_STK.LINE(LA_GET)",C="LA_STK.COLUMN(LA_GET)");
   43        CALL ERROR (%E$PARSE_STACK_OVERFLOW_ERROR);
   44        %TERMINATE;
   45      END;
   46
   47      %MEND;
   48
   49
   50
   51
   52      %EJECT;

09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      3    
   53      CREATE_LARGE_DELETION: PROC;
   54
   55      /* Skip a number of lookahead tokens in the list in
   56         order to make room for more.   We still have not
   57         found a viable correction.
   58         KEEP ONLY THE FIRST SYMBOL WHICH IS THE ORIGINAL ERROR SYMBOL
   59         FOR ERROR MESSAGE TEXT AND LOCATION.
   60      */
   61
   62      DCL OLA_GET SBIN WORD;
   63      DCL OLINK SBIN WORD;
   64
   65      OLA_GET = LA_GET;
   66
   67      DO WHILE LA_STK.LINK(LA_STK.LINK(LA_GET)) ~= LA_PUT;
   68
   69        LA_GET = LA_STK.LINK(LA_GET);
   70
   71      END;
   72
   73      OLINK                = LA_STK.LINK(LA_GET);
   74      LA_STK(LA_GET)       = LA_STK(OLA_GET);
   75      LA_STK.LINK(LA_GET)  = OLINK;
   76      ACCUM_INS_TO_SYM     = LA_STK.LINK(LA_GET);
   77      LR.INS_TO_SYM        = ACCUM_INS_TO_SYM;
   78      ACCUM_DEL_LEN        = 2;
   79      ACCUM_DEL_COST       = DEL_COST(LA_STK.SYMBOL(LA_GET));
   80      LR.DEL_COST          = ACCUM_DEL_COST;
   81      LR.DEL_LEN           = ACCUM_DEL_LEN;
   82      LA_CNT               = 2;
   83
   84      LARGE_DELETION       = '1'B;
   85
   86
   87      END;
   88
   89      %EJECT;

09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      4    
   90
   91      ABORT_CORRECTION : PROC;
   92
   93
   94      /* ABORT THE CORRECTION DUE TO SOME LIMITATION -- PROBABLY SPACE */
   95
   96      %RESET_ERROR_LOC(L="LA_STK.LINE(LA_GET)",C="LA_STK.COLUMN(LA_GET)");
   97      CALL ERROR (%E$CORRECTION_FAILURE);
   98      %TERMINATE;
   99
  100
  101      END ABORT_CORRECTION;
  102      %EJECT;

09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      5    
  103      CALC_CORRECTION : PROC (LRC);
  104
  105      /* Expand the least cost string of symbols to their
  106         least cost terminal equivalent
  107      */
  108
  109      DCL 1 LRC ALIGNED,
  110            %CORR_BODY;
  111
  112      DCL I SBIN WORD;
  113      DCL J SBIN WORD;
  114
  115      CORRECTION.LEN  = 0;
  116      CORRECTION.INDX = 0;
  117
  118      DO I = 0 TO LRC.INSRT_LEN - 1;
  119        DO J = LCS.INDX(LRC.INSRT(I)) TO
  120                  LCS.INDX(LRC.INSRT(I)) + LCS.LEN(LRC.INSRT(I)) - 1;
  121
  122          IF CORRECTION.LEN < %INSRT_LEN_MAX THEN
  123            DO;
  124              CORRECTION.SYM(CORRECTION.LEN) = LCS_ELEM(J);
  125              CORRECTION.LEN = CORRECTION.LEN + 1;
  126            END;
  127
  128        END;
  129      END;
  130
  131
  132      END CALC_CORRECTION;
  133      %EJECT;

09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      6    
  134      GIVE_CORRECTION_MESSAGE : PROC;
  135
  136
  137
  138      DCL DEL_CHAR_OVERFLOW    SBIN WORD;
  139      DCL 1 DEL,
  140            2 TEXT,
  141              3 LENGTH SBIN WORD,
  142              3 NAME CHAR(%DI_CHAR_LEN_MAX);
  143
  144      DCL INS_CHAR_OVERFLOW    SBIN WORD;
  145      DCL 1 INS,
  146            2 TEXT,
  147              3 LENGTH SBIN WORD,
  148              3 NAME CHAR(%DI_CHAR_LEN_MAX);
  149      DCL 1 BEF,
  150            2 TEXT,
  151              3 LENGTH SBIN WORD,
  152              3 NAME CHAR(%DI_CHAR_LEN_MAX);
  153
  154      DCL DEL_DNT$             PTR;  /* TO DELETION STRING */
  155      DCL INS_DNT$             PTR;  /* TO INSERTION STRING */
  156      DCL INS_BEF_DNT$         PTR;  /* TO INSERTION BEFORE SYMBOL STRING */
  157
  158
  159
  160
  161
  162      %EJECT;

09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      7    
  163      PACK_TERM : PROC ( DI,       /* IN GIVE_CORRECTION_MESSAGE */
  164                         DI_CHAR_OVERFLOW,
  165                         PT_LEN,
  166                         PT_PTR);
  167
  168      DCL 1 DI ALIGNED,
  169            2 TEXT,
  170              3 LENGTH SBIN WORD,
  171                3 NAME CHAR(%DI_CHAR_LEN_MAX);
  172
  173      DCL DI_CHAR_OVERFLOW   SBIN WORD;
  174      DCL PT_LEN             SBIN WORD;
  175      DCL PT_PTR             PTR;
  176      DCL PT_CHAR            CHAR(PT_LEN) UNAL BASED(PT_PTR);
  177
  178
  179      IF (DI.TEXT.LENGTH < %DI_CHAR_LEN_MAX) AND (DI.TEXT.LENGTH > 0) THEN
  180        DO;
  181          SUBSTR(DI.TEXT.NAME, DI.TEXT.LENGTH, 1) = ' ';
  182          DI.TEXT.LENGTH = DI.TEXT.LENGTH + 1;
  183        END;
  184
  185      IF %DI_CHAR_LEN_MAX - DI.TEXT.LENGTH >= PT_LEN THEN
  186        DO;
  187          SUBSTR (DI.TEXT.NAME, DI.TEXT.LENGTH) = PT_CHAR;
  188          DI.TEXT.LENGTH = DI.TEXT.LENGTH + PT_LEN;
  189        END;
  190      ELSE
  191        IF DI_CHAR_OVERFLOW > 0 THEN
  192          DO;
  193            SUBSTR(DI.TEXT.NAME, DI_CHAR_OVERFLOW) = PT_CHAR;
  194            DI.TEXT.LENGTH = MINIMUM(DI_CHAR_OVERFLOW + PT_LEN,
  195                                 %DI_CHAR_LEN_MAX);
  196          END;
  197        ELSE
  198          IF DI.TEXT.LENGTH > 0 THEN
  199            DO;
09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      8    
  200              DI_CHAR_OVERFLOW = MINIMUM (%DI_CHAR_LEN_MAX/2 - 2,
  201                                          DI.TEXT.LENGTH);
  202              SUBSTR(DI.TEXT.NAME, DI_CHAR_OVERFLOW) = '... ';
  203              DI_CHAR_OVERFLOW = DI_CHAR_OVERFLOW + 4;
  204              SUBSTR(DI.TEXT.NAME, DI_CHAR_OVERFLOW) = PT_CHAR;
  205              DI.TEXT.LENGTH = MINIMUM(DI_CHAR_OVERFLOW + PT_LEN,
  206                                    %DI_CHAR_LEN_MAX);
  207            END;
  208          ELSE
  209            DO;
  210              DI.TEXT.LENGTH = %DI_CHAR_LEN_MAX;
  211              DI.TEXT.NAME   = PT_CHAR;
  212            END;
  213
  214      END PACK_TERM;
  215
  216
  217
  218      %EJECT;

09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      9    
  219      CREATE_DEL_DNT : PROC;   /* IN GIVE_CORRECTION_MESSAGE */
  220
  221      /* Create DNT items for the deletion.
  222      */
  223
  224      DCL CONT_STR CHAR(4) STATIC INIT('... ');
  225
  226      %EJECT;

09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      10   
  227      PACK_DEL_TERM : PROC;  /* IN CREATE_DEL_DNT */
  228
  229
  230      IF LA_STK.DNTPTR(LA_GET) = ADDR(NIL) THEN
  231        CALL PACK_TERM(DEL,
  232                       DEL_CHAR_OVERFLOW,
  233                       BINBIT(TERM_STRING.LEN(LA_STK.SYMBOL(LA_GET)), 36),
  234                       ADDR(SUBSTR(TSTRING_SPACE,TERM_STRING.INDX(LA_STK.SYMBOL(LA_GET)))));
  235      ELSE
  236              CALL PACK_TERM ( DEL,
  237                                DEL_CHAR_OVERFLOW,
  238                                BINBIT(LA_STK.DNTPTR(LA_GET) -> DNT.TEXT.LENGTH,36),
  239                                ADDR(LA_STK.DNTPTR(LA_GET) -> DNT.TEXT.NAME));
  240
  241
  242      END PACK_DEL_TERM;
  243
  244
  245      %EJECT;

09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      11   
  246           /* MAIN BODY OF CREATE_DEL_DNT */
  247      DEL_DNT$           = ADDR(NIL);
  248      DEL.TEXT.LENGTH    = 0;
  249      DEL_CHAR_OVERFLOW  = 0;
  250
  251      IF LC.DEL_LEN > 0 THEN
  252        DO;
  253          IF LARGE_DELETION THEN
  254            DO;
  255              CALL PACK_DEL_TERM;
  256              CALL PACK_TERM ( DEL,
  257                               DEL_CHAR_OVERFLOW,
  258                               LENGTHC(CONT_STR),
  259                               ADDR(CONT_STR));
  260              DEL_CHAR_OVERFLOW = DEL.TEXT.LENGTH;
  261              LA_GET     = LA_STK.LINK(LA_GET);
  262              LA_CNT     = LA_CNT - 1;
  263              LC.DEL_LEN = LC.DEL_LEN - 1;
  264            END;
  265          DO WHILE LC.DEL_LEN > 0;
  266            CALL PACK_DEL_TERM;
  267            LA_GET     = LA_STK.LINK(LA_GET);
  268            LA_CNT     = LA_CNT - 1;
  269            LC.DEL_LEN = LC.DEL_LEN - 1;
  270          END;
  271
  272          IF DEL.TEXT.LENGTH > 0 THEN
  273            DO;
  274               DEL_DNT$ = ADDR(DEL);
  275            END;
  276        END;
  277
  278      END CREATE_DEL_DNT;
  279
  280
  281      %EJECT;

09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      12   
  282      CREATE_INS_DNT : PROC;   /* IN GIVE_CORRECTION_MESSAGE */
  283
  284      /* Create INS items for the insertion.
  285      */
  286
  287      DCL I SBIN WORD;
  288
  289      INS_DNT$           = ADDR(NIL);
  290      INS_BEF_DNT$       = ADDR(NIL);
  291      INS.TEXT.LENGTH       = 0;
  292      INS_CHAR_OVERFLOW  = 0;
  293
  294      IF CORRECTION.LEN > 0 THEN
  295        DO;
  296          DO I = 0 TO CORRECTION.LEN - 1;
  297            CALL PACK_TERM (INS,
  298                            INS_CHAR_OVERFLOW,
  299                            BINBIT(TERM_STRING.LEN(CORRECTION.SYM(I)),36),
  300                            ADDR(SUBSTR(TSTRING_SPACE,TERM_STRING.INDX(CORRECTION.SYM(I)))));
  301          END;
  302
  303          IF INS.TEXT.LENGTH > 0 THEN
  304            DO;
  305               INS_DNT$ = ADDR(INS);
  306            END;
  307          IF LA_STK.DNTPTR(LA_GET) = ADDR(NIL) THEN
  308            DO;
  309              BEF.TEXT.LENGTH = MINIMUM(TERM_STRING.LEN(LA_STK.SYMBOL(LA_GET)),%DI_CHAR_LEN_MAX);
  310              BEF.TEXT.NAME = SUBSTR(TSTRING_SPACE,TERM_STRING.INDX(LA_STK.SYMBOL(LA_GET)));
  311               INS_BEF_DNT$ = ADDR(BEF);
  312            END;
  313          ELSE
  314            DO;
  315              BEF.TEXT.LENGTH = MINIMUM(LA_STK.DNTPTR(LA_GET) -> DNT.TEXT.LENGTH,
  316                                        %DI_CHAR_LEN_MAX);
  317              BEF.TEXT.NAME = LA_STK.DNTPTR(LA_GET) -> DNT.TEXT.NAME;
  318              INS_BEF_DNT$ = ADDR(BEF);
09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      13   
  319            END;
  320
  321        END;
  322
  323      END CREATE_INS_DNT;
  324
  325      %EJECT;

09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      14   
  326      /* MAIN BODY OF GIVE_CORRECTION_MESSAGE */
  327
  328      %RESET_ERROR_LOC(L="LA_STK.LINE(LA_GET)",C="LA_STK.COLUMN(LA_GET)");
  329
  330      CALL CALC_CORRECTION (LC);
  331      CALL CREATE_DEL_DNT;
  332      CALL CREATE_INS_DNT;
  333
  334      IF DEL_DNT$ = ADDR(NIL) THEN
  335        CALL ERROR (%E$SYNTAX_INS, INS_DNT$, INS_BEF_DNT$);
  336      ELSE
  337        IF INS_DNT$=ADDR(NIL) THEN
  338          CALL ERROR (%E$SYNTAX_DEL, DEL_DNT$);
  339        ELSE
  340          CALL ERROR (%E$SYNTAX_REP, DEL_DNT$, INS_DNT$);
  341
  342      IF CORRECTION.LEN > 0 THEN
  343        DO;
  344          ERR_LA_GET = LA_GET;
  345          ERR_LA_PUT = LA_PUT;
  346          ERR_LA_CNT = LA_CNT;
  347          LA_CNT     = 0;
  348          LA_GET     = LA_PUT;
  349        END;
  350
  351      END GIVE_CORRECTION_MESSAGE;
  352      %EJECT;

09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      15   
  353      %IF TRIAL_PARSE_LENGTH > 0;
  354      CHECK_CONTEXT: PROC;
  355
  356      DCL PS(0:%PARSE_STACK_MAX) SBIN WORD;
  357      DCL PS_IDX SBIN WORD;
  358      DCL PSTATE SBIN WORD;
  359
  360      DCL INDX SBIN WORD;
  361      DCL ACTION SBIN WORD;
  362      DCL NT SBIN WORD;
  363
  364      %PARSE_SYMREFS;
  365
  366
  367      GET_CONTEXT : PROC;
  368
  369        DO WHILE (LR.DEL_LEN > LA_CNT - %TRIAL_PARSE_LENGTH);
  370          %CALL_SCANNER;
  371          LA_PUT = LA_STK.LINK(LA_PUT);
  372          IF LA_CNT > %LA_MAX THEN
  373            CALL ABORT_CORRECTION;
  374          LA_CNT = LA_CNT + 1;
  375        END;
  376
  377      END GET_CONTEXT;
  378
  379
  380      SAVE_STATE : PROC;
  381
  382        PS               = PARSE_STACK;
  383        PS_IDX           = PARSE_STACK_IDX;
  384        PSTATE           = STATE;
  385        ERR_LA_GET       = LA_GET;
  386        ERR_LA_PUT       = LA_PUT;
  387        ERR_LA_CNT       = LA_CNT;
  388
  389      END SAVE_STATE;
09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      16   
  390
  391
  392      RESTORE_STATE : PROC;
  393
  394        LA_CNT           = ERR_LA_CNT;
  395        LA_GET           = ERR_LA_GET;
  396        LA_PUT           = ERR_LA_PUT;
  397        PARSE_STACK      = PS;
  398        PARSE_STACK_IDX  = PS_IDX;
  399        STATE            = PSTATE;
  400        CORRECTION.LEN   = 0;
  401        CORRECTION.INDX  = 0;
  402
  403      END RESTORE_STATE;
  404
  405
  406      BUILD_LOOKAHEAD : PROC;
  407
  408      DCL I SBIN WORD;
  409      DCL J SBIN WORD;
  410
  411        CALL CALC_CORRECTION (LR);
  412
  413        IF CORRECTION.LEN > 0 THEN
  414          DO;
  415            LA_CNT = 0;
  416            LA_GET = LA_PUT;
  417          END;
  418        ELSE
  419          DO;
  420            LA_CNT = ERR_LA_CNT - LR.DEL_LEN;
  421            LA_GET = LR.INS_TO_SYM;
  422          END;
  423
  424      END BUILD_LOOKAHEAD;
  425
  426
09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      17   
  427      TRIAL_PARSE : PROC;
  428
  429      DO WHILE '1'B;
  430
  431        IF ACTION_COL.BASE(STATE) = 0 THEN
  432          ACTION = ACTION_COL.DEFAULT(STATE);
  433        ELSE
  434          DO;
  435            IF LA_CNT < 1 THEN
  436              IF CORRECTION.LEN = 0 AND CORRECTION.INDX = 0 THEN
  437                GOTO CORRECT_PARSE;
  438              ELSE
  439                IF CORRECTION.LEN > 0 THEN
  440                  DO;
  441                    LA_GET = LA_PUT;
  442                    LA_CNT = 1;
  443                    LA_STK.SYMBOL(LA_GET) = CORRECTION.SYM(CORRECTION.INDX);
  444                    CORRECTION.LEN        = CORRECTION.LEN - 1;
  445                    CORRECTION.INDX       = CORRECTION.INDX + 1;
  446                  END;
  447                ELSE
  448                  DO;
  449                    CORRECTION.INDX = 0;
  450                    LA_CNT = ERR_LA_CNT - LR.DEL_LEN;
  451                    LA_GET = LR.INS_TO_SYM;
  452                  END;
  453            INDX = ACTION_COL.BASE(STATE) + LA_STK.SYMBOL(LA_GET);
  454            IF ACTION_ROW.CHECK(INDX) = STATE THEN
  455              DO;
  456                ACTION = ACTION_ROW.NEXT(INDX);
  457                IF ACTION = 0 THEN
  458                  GOTO CORRECT_PARSE;
  459              END;
  460             ELSE
  461               ACTION = ACTION_COL.DEFAULT(STATE);
  462          END;
  463
09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      18   
  464            IF ACTION > 0 THEN
  465              DO;  /* SHIFT */
  466                LA_CNT = LA_CNT - 1;
  467                LA_GET = LA_STK.LINK(LA_GET);
  468                IF PARSE_STACK_IDX >= %PARSE_STACK_MAX THEN
  469                  %TRIAL_PARSE_STACK_OVERFLOW;
  470                ELSE
  471                  DO;
  472                    STATE                        = ACTION;
  473                    PARSE_STACK_IDX              = PARSE_STACK_IDX + 1;
  474                    PARSE_STACK(PARSE_STACK_IDX) = STATE;
  475                  END;
  476              END;
  477            ELSE
  478              IF ACTION < 0 THEN
  479                DO;
  480                  ACTION           = - ACTION;
  481                  PARSE_STACK_IDX  = PARSE_STACK_IDX - PRODR.POPSTACK(ACTION);
  482                  NT               = PRODR.GOAL(ACTION);
  483                  IF GOTO_COL.BASE(NT) = 0 THEN
  484                    STATE = GOTO_COL.DEFAULT(NT);
  485                  ELSE
  486                    DO;
  487                      INDX = GOTO_COL.BASE(NT) + PARSE_STACK(PARSE_STACK_IDX);
  488                      IF GOTO_ROW.CHECK(INDX) = NT THEN
  489                        STATE = GOTO_ROW.NEXT(INDX);
  490                      ELSE
  491                        STATE = GOTO_COL.DEFAULT(NT);
  492                    END;
  493                  PARSE_STACK_IDX              = PARSE_STACK_IDX + 1;
  494                  PARSE_STACK(PARSE_STACK_IDX) = STATE;
  495                END;
  496              ELSE
  497                GOTO BAD_PARSE;
  498
  499      END;
  500
09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      19   
  501      BAD_PARSE:
  502          LR.INSRT_COST = LR.INSRT_COST * 2;
  503
  504      CORRECT_PARSE:
  505
  506      END TRIAL_PARSE;
  507
  508
  509      CALL GET_CONTEXT;
  510      CALL SAVE_STATE;
  511      CALL BUILD_LOOKAHEAD;
  512      CALL TRIAL_PARSE;
  513      CALL RESTORE_STATE;
  514
  515      END CHECK_CONTEXT;
  516      %ENDIF;
  517      %EJECT;

09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      20   
  518      LR_INSERT : PROC;
  519
  520
  521      DCL I          SBIN WORD;
  522      DCL J          SBIN WORD;
  523      DCL K          SBIN WORD;  /* Current parse stack being considered */
  524      DCL I2         SBIN WORD;
  525      DCL H          UBIN WORD;
  526      DCL L          UBIN WORD;
  527      DCL M          UBIN WORD;
  528
  529      DCL LOWBASIS   SBIN WORD;
  530      DCL HIGHBASIS  SBIN WORD;
  531
  532      DCL MINITEM    SBIN WORD;
  533      DCL MINCOST    SBIN WORD;
  534      DCL MINPOS     SBIN WORD;
  535      DCL MINLCPINDX SBIN WORD;
  536      DCL MINPATH    SBIN WORD;
  537
  538      DCL LCP_ELEM_RET SBIN WORD;
  539
  540      DCL TRYCOST    SBIN WORD;
  541      DCL ACCUM_COST SBIN WORD;
  542
  543      /* THE NEXT DATA STRUCTURE IS A PL6 TWO DIMENSIONAL ARRAY */
  544
  545      DCL CURRSTAGE$ PTR;
  546      DCL NEXTSTAGE$ PTR;
  547
  548      DCL STAGE1$(0:%NR_BASIS_MAX) PTR;
  549      DCL STAGE2$(0:%NR_BASIS_MAX) PTR;
  550
  551      DCL 1 LCC BASED,
  552            2 COST SBIN HALF HALIGNED,
  553            2 LEN  SBIN HALF HALIGNED,
  554            2 STR(0:%INSRT_LEN_MAX) SBIN HALF HALIGNED;
09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      21   
  555
  556      DCL LCC_SPACE(0:%((INSRT_LEN_MAX/2 + 2)*(NR_BASIS_MAX*2 + 2))) SBIN WORD;
  557
  558      DCL CURRSTAGE(0:%NR_BASIS_MAX) PTR BASED(CURRSTAGE$);
  559      DCL NEXTSTAGE(0:%NR_BASIS_MAX) PTR BASED(NEXTSTAGE$);
  560
  561      /* END OF TWO DIMENSIONAL ARRAY */
  562
  563      DCL PRED_ITEM        SBIN WORD;
  564      DCL PRED_CLOSURE     BIT(1);
  565      DCL WORTHCONTINUING  BIT(1);
  566
  567      DCL CURRLOWBASIS     SBIN WORD;
  568      DCL CURRHIGHBASIS    SBIN WORD;
  569      DCL ITM              SBIN WORD;
  570      DCL NEXTLOWBASIS     SBIN WORD;
  571      DCL NEXTHIGHBASIS    SBIN WORD;
  572      DCL NEXTITEM         SBIN WORD;
  573      DCL P                SBIN WORD;
  574      DCL PE               SBIN WORD;
  575      DCL PATH_COST        SBIN WORD;
  576      DCL PELEM            UBIN HALF;
  577
  578
  579      %MACRO BASIS_ITEM_LIMITS(S=0, LOWB=LOWBASIS, HIGHB = HIGHBASIS);
  580
  581        DO;
  582          LOWB  = STATE_ITEM.CLOSURE(S-1) + 1;
  583          HIGHB = STATE_ITEM.BASIS(S);
  584        END;
  585
  586      %MEND;
  587
  588
  589      %MACRO BINSRCH_LCP(NTS=0);
  590
  591        DO;
09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      22   
  592          H            = LCP_UBOUND(LA_STK.SYMBOL(LR.INS_TO_SYM));
  593          L            = LCP_UBOUND(LA_STK.SYMBOL(LR.INS_TO_SYM) - 1) + 1;
  594          LCP_ELEM_RET = -1;
  595
  596          DO WHILE H >= L;
  597
  598            M = (L+H) / 2;
  599            IF NTS = LCP.NT(M) THEN
  600              DO;
  601                LCP_ELEM_RET = M;
  602                H = L - 1;
  603              END;
  604            ELSE
  605              IF NTS < LCP.NT(M) THEN
  606                H = M - 1;
  607              ELSE
  608                L = M + 1;
  609
  610          END; /* WHILE */
  611        END;
  612
  613      %MEND;
  614
  615
  616      %EJECT;

09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      23   
  617      INITSTAGES : PROC;  /* IN LR_INSERT */
  618
  619      /* INITIALIZE BOTH TWO DIMENSIONAL ARRAYS */
  620
  621      DCL I SBIN WORD;
  622
  623      DO I = 0 TO %NR_BASIS_MAX;
  624
  625        STAGE1$(I) = ADDR(LCC_SPACE(SIZEW(LCC)*I));
  626        STAGE2$(I) = ADDR(LCC_SPACE(SIZEW(LCC)*(I + 1 + %NR_BASIS_MAX)));
  627
  628      END;  /* DO */
  629
  630      CURRSTAGE$ = ADDR(STAGE1$);
  631      NEXTSTAGE$ = ADDR(STAGE2$);
  632      CALL NEWSTAGE;
  633      CALL NEWSTAGE;
  634
  635      END INITSTAGES;
  636
  637      %EJECT;

09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      24   
  638      NEWSTAGE : PROC;  /* IN LR_INSERT */
  639
  640      /* SWAP TWO DIMENSIONAL ARRAYS FOR LOOKING AT NEXT STACK LEVEL */
  641      DCL I SBIN WORD;
  642      DCL TPTR PTR;
  643
  644      TPTR = NEXTSTAGE$;
  645      NEXTSTAGE$ = CURRSTAGE$;
  646      CURRSTAGE$ = TPTR;
  647
  648      DO I = 0 TO %NR_BASIS_MAX ;
  649
  650        NEXTSTAGE(I) -> LCC.COST = %INFINITE_COST;
  651        NEXTSTAGE(I) -> LCC.LEN = 0;
  652
  653      END;  /* DO */
  654
  655      END NEWSTAGE;
  656
  657
  658      %EJECT;

09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      25   
  659      FINDPRED : PROC (PREVSTATE, SUCCSTATE, ITM);  /* IN LR_INSERT */
  660
  661      /* FIND THE PREDECESSOR OF THE CURRENT ITEM */
  662
  663      DCL PREVSTATE SBIN WORD;
  664      DCL SUCCSTATE SBIN WORD;
  665      DCL ITM       SBIN WORD;
  666
  667      DCL I         SBIN WORD;
  668
  669      I = STATE_ITEM.CLOSURE(PREVSTATE -1) + 1;
  670
  671      DO WHILE (ITEM.SUCC_STATE(I) ~= SUCCSTATE)
  672            OR (ITEM.SUCC_ITEM(I) ~= ITM);
  673        I = I + 1;
  674      END;
  675
  676      PRED_ITEM = I;
  677      PRED_CLOSURE = I > STATE_ITEM.BASIS(PREVSTATE);
  678
  679      END FINDPRED;
  680
  681
  682
  683
  684      %EJECT;

09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      26   
  685      /* MAIN BODY OF LR_INSERT */
  686
  687      CALL INITSTAGES;
  688
  689      K = PARSE_STACK_IDX;
  690
  691      LR.INSRT_COST = %INFINITE_COST;
  692      LR.INSRT_LEN = 0;
  693
  694      %BASIS_ITEM_LIMITS(S="PARSE_STACK(PARSE_STACK_IDX)",
  695               LOWB=LOWBASIS,HIGHB=HIGHBASIS);
  696      MINCOST = %INFINITE_COST;
  697
  698      DO I = LOWBASIS TO HIGHBASIS;
  699
  700
  701        /* LCC(K,I) = S(B(I)) */
  702
  703        CURRSTAGE(I-LOWBASIS) -> LCC.LEN = ITEM.LEN(I);
  704        I2       = 0;
  705        TRYCOST  = 0;
  706        CURRSTAGE(I-LOWBASIS) -> LCC.COST = 0;
  707
  708        DO J = ITEM.INDX(I) TO ITEM.INDX(I) + ITEM.LEN(I) -1;
  709
  710          %BINSRCH_LCP(NTS = "PATH_ELEM(J)");
  711
  712          IF LCP_ELEM_RET >= 0 THEN
  713            DO;
  714              TRYCOST = CURRSTAGE(I-LOWBASIS) -> LCC.COST + LCP.COST(LCP_ELEM_RET);
  715              IF TRYCOST < MINCOST THEN
  716                DO;
  717                  MINITEM    = I;
  718                  MINPOS     = J;
  719                  MINCOST    = TRYCOST;
  720                  MINLCPINDX = LCP_ELEM_RET;
  721                END;
09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      27   
  722            END;
  723
  724          CURRSTAGE(I-LOWBASIS) -> LCC.COST = CURRSTAGE(I-LOWBASIS) ->
  725                    LCC.COST + LCS.COST(PATH_ELEM(J));
  726          CURRSTAGE(I-LOWBASIS) -> LCC.STR(I2) = PATH_ELEM(J);
  727
  728          I2 = I2 + 1;
  729        END;  /* DO J */
  730
  731      END;  /* DO I */
  732
  733      /* SET UP THE INITIAL VALUE OF THE INSERT STRING */
  734
  735      IF MINCOST < %INFINITE_COST THEN
  736        DO;
  737          LR.INSRT_COST = MINCOST;
  738          LR.INSRT_LEN  = 0;
  739
  740          DO J = ITEM.INDX(MINITEM) TO MINPOS - 1;
  741
  742            LR.INSRT(LR.INSRT_LEN) = PATH_ELEM(J);
  743            LR.INSRT_LEN           = LR.INSRT_LEN + 1;
  744
  745          END;
  746
  747          /* INSERT E(B(I), A) */
  748
  749          IF LR.INSRT_LEN + LCP.LEN(MINLCPINDX) > %INSRT_LEN_MAX THEN
  750            CALL ABORT_CORRECTION;
  751
  752          DO J = LCP.INDX(MINLCPINDX) TO
  753                     LCP.INDX(MINLCPINDX) + LCP.LEN(MINLCPINDX) - 1;
  754
  755            LR.INSRT(LR.INSRT_LEN) = LCP_ELEM(J);
  756            LR.INSRT_LEN           = LR.INSRT_LEN + 1;
  757
  758          END;
09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      28   
  759        END;
  760
  761      WORTHCONTINUING = K > 0;
  762
  763      DO WHILE WORTHCONTINUING;
  764
  765        WORTHCONTINUING = '0'B;
  766
  767        %BASIS_ITEM_LIMITS( S="PARSE_STACK(K)",
  768                            LOWB = CURRLOWBASIS,
  769                            HIGHB = CURRHIGHBASIS);
  770
  771        DO ITM = 0 TO CURRHIGHBASIS - CURRLOWBASIS;
  772
  773          IF CURRSTAGE(ITM) -> LCC.COST < LR.INSRT_COST THEN
  774            DO;
  775              WORTHCONTINUING = '1'B;
  776
  777              CALL FINDPRED (PARSE_STACK(K-1),
  778                             PARSE_STACK(K),
  779                             ITM);
  780
  781              %BASIS_ITEM_LIMITS(S="PARSE_STACK(K-1)",
  782                            LOWB = NEXTLOWBASIS,
  783                            HIGHB = NEXTHIGHBASIS);
  784
  785              IF PRED_CLOSURE THEN
  786                DO;
  787
  788                  DO NEXTITEM = 0 TO NEXTHIGHBASIS - NEXTLOWBASIS;
  789
  790                    /* CALC S(LP(S(K-1), PRED_ITEM, NEXTITEM) */
  791
  792                    P = ITEM.INDX(PRED_ITEM) + NEXTITEM;
  793
  794                    IF PATH.INDX(P) < 0 THEN
  795                      PATH_COST = %INFINITE_COST;
09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      29   
  796                    ELSE
  797                      DO;
  798                        PATH_COST = 0;
  799                        DO PE = PATH.INDX(P) TO PATH.INDX(P) + PATH.LEN(P) - 1;
  800                          PATH_COST = PATH_COST + LCS.COST(PATH_ELEM(PE));
  801                        END;
  802                      END;
  803                    IF CURRSTAGE(ITM) -> LCC.COST + PATH_COST
  804                        < NEXTSTAGE(NEXTITEM) -> LCC.COST THEN
  805                      DO;
  806                        NEXTSTAGE(NEXTITEM) -> LCC = CURRSTAGE(ITM) -> LCC;
  807
  808                        DO PE = PATH.INDX(P) TO PATH.INDX(P) + PATH.LEN(P) - 1;
  809                          IF NEXTSTAGE(NEXTITEM) -> LCC.LEN >= %INSRT_LEN_MAX THEN
  810                            CALL ABORT_CORRECTION;
  811                          NEXTSTAGE(NEXTITEM) -> LCC.STR(NEXTSTAGE(NEXTITEM) -> LCC.LEN)
  812                                 = PATH_ELEM(PE);
  813                          NEXTSTAGE(NEXTITEM) -> LCC.LEN
  814                                   = NEXTSTAGE(NEXTITEM) -> LCC.LEN + 1;
  815                        END;  /* DO */
  816
  817                        NEXTSTAGE(NEXTITEM) -> LCC.COST = CURRSTAGE(ITM) -> LCC.COST + PATH_COST;
  818                      END;  /* IF */
  819                  END;  /* DO NEXTITEM */
  820
  821                  /* CALC E(LP(S(K-1),PRED_ITEM), A) */
  822
  823                  IF CURRSTAGE(ITM) -> LCC.COST < LR.INSRT_COST THEN
  824                    DO;
  825                      MINCOST = %INFINITE_COST;
  826
  827                      DO P = ITEM.INDX(PRED_ITEM)
  828                              TO ITEM.INDX(PRED_ITEM)
  829                                   + ITEM.LEN(PRED_ITEM) -1;
  830
  831                        TRYCOST    = 0;
  832                        ACCUM_COST = 0;
09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      30   
  833                        IF PATH.INDX(P) >= 0 THEN
  834                        DO PE = PATH.INDX(P) TO PATH.INDX(P) + PATH.LEN(P) -1;
  835                          PELEM = PATH_ELEM(PE);
  836                          %BINSRCH_LCP(NTS=PELEM);
  837
  838                          IF LCP_ELEM_RET >= 0 THEN
  839                            DO;
  840                              TRYCOST = ACCUM_COST + LCP.COST(LCP_ELEM_RET);
  841                              IF TRYCOST < MINCOST THEN
  842                                DO;
  843                                  MINPATH     = P;
  844                                  MINPOS      = PE;
  845                                  MINCOST     = TRYCOST;
  846                                  MINLCPINDX  = LCP_ELEM_RET;
  847                                END;
  848                            END;
  849                          ACCUM_COST = ACCUM_COST + LCS.COST(PATH_ELEM(PE));
  850                        END;
  851                       END;
  852                      IF MINCOST + CURRSTAGE(ITM) -> LCC.COST < LR.INSRT_COST THEN
  853                        DO;
  854                         /* UPDATE INSERT */
  855                          LR.INSRT_LEN        = CURRSTAGE(ITM) -> LCC.LEN;
  856                          LR.INSRT            = CURRSTAGE(ITM) -> LCC.STR;
  857                          LR.INSRT_COST       = MINCOST + CURRSTAGE(ITM) -> LCC.COST;
  858
  859                          DO PE = PATH.INDX(MINPATH) TO MINPOS - 1;
  860                            IF LR.INSRT_LEN >= %INSRT_LEN_MAX THEN
  861                              CALL ABORT_CORRECTION;
  862                            LR.INSRT(LR.INSRT_LEN) = PATH_ELEM(PE);
  863                            LR.INSRT_LEN           = LR.INSRT_LEN + 1;
  864                          END;
  865                          IF LR.INSRT_LEN + LCP.LEN(MINLCPINDX) > %INSRT_LEN_MAX THEN
  866                            CALL ABORT_CORRECTION;
  867
  868                          DO I = LCP.INDX(MINLCPINDX) TO
  869                                    LCP.INDX(MINLCPINDX) + LCP.LEN(MINLCPINDX) - 1;
09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      31   
  870
  871                            LR.INSRT(LR.INSRT_LEN) = LCP_ELEM(I);
  872                            LR.INSRT_LEN           = LR.INSRT_LEN + 1;
  873                          END;  /* DO */
  874                        END; /* IF */
  875                   END; /* IF */
  876
  877                END; /* IF */
  878              ELSE
  879                /* BASIS ITEM */
  880                IF CURRSTAGE(ITM) -> LCC.COST < NEXTSTAGE(PRED_ITEM - NEXTLOWBASIS) -> LCC.COST THEN
  881                   NEXTSTAGE(PRED_ITEM - NEXTLOWBASIS) -> LCC = CURRSTAGE(ITM) -> LCC;
  882            END;
  883        END;
  884
  885        IF K <= 1 THEN
  886          WORTHCONTINUING = '0'B;
  887
  888        IF WORTHCONTINUING THEN
  889          DO;
  890            K = K - 1;
  891            CALL NEWSTAGE;
  892          END;
  893
  894      END; /* WHILE */
  895
  896
  897      END LR_INSERT;
  898      %EJECT;

09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      32   
  899
  900
  901
  902      /* MAIN BODY OF LOCALLY_LEAST_COST_CORRECTION */
  903
  904      LR.INSRT_LEN     = 0;
  905      LR.INSRT_COST    = %INFINITE_COST;
  906      ACCUM_DEL_LEN    = 0;
  907      ACCUM_DEL_COST   = 0;
  908      LR.DEL_LEN       = ACCUM_DEL_LEN;
  909      LR.DEL_COST      = ACCUM_DEL_COST;
  910
  911      LARGE_DELETION   = '0'B;
  912
  913      ACCUM_INS_TO_SYM = LA_GET;
  914      LR.INS_TO_SYM    = ACCUM_INS_TO_SYM;
  915
  916
  917      DO UNTIL (LR.INSRT_COST < %INFINITE_COST);
  918
  919        CALL LR_INSERT;
  920
  921        IF LR.INSRT_COST >= %INFINITE_COST THEN
  922          DO;
  923            ACCUM_DEL_LEN = ACCUM_DEL_LEN + 1;
  924               LR.DEL_LEN = ACCUM_DEL_LEN;
  925            IF LR.DEL_LEN >= %LA_MAX THEN
  926              CALL CREATE_LARGE_DELETION;
  927            ACCUM_DEL_COST = ACCUM_DEL_COST + DEL_COST(LA_STK.SYMBOL(ACCUM_INS_TO_SYM));
  928            LR.DEL_COST = ACCUM_DEL_COST;
  929            IF LR.DEL_COST >= %INFINITE_COST THEN
  930              CALL ABORT_CORRECTION;
  931            IF LR.DEL_LEN >= LA_CNT THEN
  932              DO;
  933                %CALL_SCANNER;
  934                LA_PUT = LA_STK.LINK(LA_PUT);
  935                LA_CNT = LA_CNT + 1;
09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      33   
  936              END;
  937            ACCUM_INS_TO_SYM = LA_STK.LINK(ACCUM_INS_TO_SYM);
  938            LR.INS_TO_SYM    = ACCUM_INS_TO_SYM;
  939          END;
  940      END;
  941
  942      %IF TRIAL_PARSE_LENGTH > 0;
  943      CALL CHECK_CONTEXT;
  944      %ENDIF;
  945      LC = LR;
  946
  947      ACCUM_DEL_COST = ACCUM_DEL_COST + DEL_COST(LA_STK.SYMBOL(ACCUM_INS_TO_SYM));
  948      LR.DEL_COST    = ACCUM_DEL_COST;
  949
  950      DO WHILE ((ACCUM_DEL_COST < LC.DEL_COST + LC.INSRT_COST)
  951             AND (ACCUM_DEL_LEN < %LA_MAX-1));
  952
  953        /* ENSURE ONE MORE SYMBOL */
  954
  955
  956        ACCUM_DEL_LEN = ACCUM_DEL_LEN + 1;
  957        LR.DEL_LEN    = ACCUM_DEL_LEN;
  958        IF LR.DEL_LEN >= LA_CNT THEN
  959          DO;
  960            %CALL_SCANNER;
  961            LA_PUT = LA_STK.LINK(LA_PUT);
  962            LA_CNT = LA_CNT + 1;
  963          END;
  964
  965
  966        ACCUM_INS_TO_SYM = LA_STK.LINK(ACCUM_INS_TO_SYM);
  967        LR.INS_TO_SYM    = ACCUM_INS_TO_SYM;
  968
  969
  970            CALL LR_INSERT;
  971
  972            %IF TRIAL_PARSE_LENGTH > 0;
09:09 AUG 09 '97 PARSER_EC_SI.:Z8A6SI                                      34   
  973            IF LR.INSRT_COST + LR.DEL_COST < LC.DEL_COST + LC.INSRT_COST THEN
  974              CALL CHECK_CONTEXT;
  975            %ENDIF;
  976            IF LR.INSRT_COST + LR.DEL_COST < LC.DEL_COST + LC.INSRT_COST THEN
  977                LC = LR;
  978
  979        ACCUM_DEL_COST = ACCUM_DEL_COST + DEL_COST(LA_STK.SYMBOL(ACCUM_INS_TO_SYM));
  980        LR.DEL_COST    = ACCUM_DEL_COST;
  981
  982      END;  /* DO WHILE */
  983
  984      CALL GIVE_CORRECTION_MESSAGE;
  985
  986
  987      END LOCALLY_LEAST_COST_CORRECTION;
  988
  989      %MEND;

