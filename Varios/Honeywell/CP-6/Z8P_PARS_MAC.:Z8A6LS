

09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6
    7      %INCLUDE Z8P_PARS_STS;
    8
    9             /* Data necessary for the parse */
   10
   11      %PARSE_SYMREFS;
   12
   13
   14      DCL PSI    SBIN HALF;    /* PARSE STACK INDX */
   15      DCL NT     SBIN HALF;    /* Current non_terminal just reduced */
   16      DCL ACTION SBIN HALF;    /* Action to be performed - shift or reduce */
   17      DCL INDX   SBIN HALF;    /* temporary index into arrays */
   18
   19      %IF NOT LOCALLY_LEAST_COST_RECOVERY;
   20      DCL PANIC_MODE_IN_PROGRESS BIT(1) ALIGNED STATIC INIT('0'B);
   21      %ENDIF;
   22      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      2    
   23
   24
   25      %MACRO RECOVERY;
   26
   27      /* Any of three recovery algorithms may be used:
   28
   29               QUIT_RECOVERY
   30               PANIC_RECOVERY
   31               LOCALLY_LEAST_COST_CORRECTION
   32
   33      */
   34
   35
   36      DO;
   37
   38        ERR_RECOVERY_IN_PROGRESS = '1'B;
   39        PARSE_ERROR_COUNT = PARSE_ERROR_COUNT + 1;
   40
   41        %IF LOCALLY_LEAST_COST_RECOVERY;
   42          %RESTORE_IED_STATE;
   43          CALL LOCALLY_LEAST_COST_CORRECTION;
   44        %ELSEIF TERM_ERROR_SYM = 0;
   45          %QUIT_RECOVERY;
   46        %ELSE;
   47          %PANIC_RECOVERY;
   48        %ENDIF;
   49
   50        ERR_RECOVERY_IN_PROGRESS = '0'B;
   51
   52      END;
   53
   54      %MEND;
   55      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      3    
   56      %MACRO PARSE_STACK_OVERFLOW;
   57
   58             /* The parse stack has overflowed, so abort the compilation.
   59             */
   60
   61      DO;
   62      %RESET_ERROR_LOC;
   63        CALL ERROR (%E$PARSE_STACK_OVERFLOW_ERROR);
   64        %TERMINATE;
   65      END;
   66
   67      %MEND;
   68      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      4    
   69      %MACRO SEMANTIC_TOKEN_STACK_OVERFLOW;
   70
   71             /* The semantic token stack has overflowed, so abort
   72                the compilation.
   73             */
   74
   75      DO;
   76      %RESET_ERROR_LOC;
   77        CALL ERROR (%E$SEMANTIC_TOKEN_STACK_OVERFLW);
   78        %TERMINATE;
   79        RETURN;
   80      END;
   81
   82      %MEND;
   83      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      5    
   84      %MACRO  RED_STACK_OVERFLOW;
   85
   86             /* The reduction stack for semantic calls has overflowed,
   87                so abort the compilation.
   88             */
   89
   90      DO;
   91      %RESET_ERROR_LOC;
   92        CALL ERROR(%E$RED_STACK_OVERFLOW_ERROR);
   93        %TERMINATE;
   94      END;
   95
   96      %MEND;
   97      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      6    
   98      %MACRO SAVE_IED_STATE;
   99
  100             /* Our error correction scheme requires that we detect errors
  101                immediately;  that is, before we do any reductions.
  102                Unfortunately, it is a property of LALR parsers that
  103                some reductions may be performed upon  encountering an
  104                error symbol, before recognizing the error.  Therefore, we
  105                must save the state of the parser at any reduction and stack
  106                all semantic calls until the next shift has been performed,
  107                which means the next token has been accepted.
  108             */
  109
  110        DO;
  111          IF NOT IED_FLAG THEN
  112            DO;
  113              ALT_PARSE_STACK_IDX = PARSE_STACK_IDX;
  114              PARSE_STACK_IDX_IN_CHARS = PARSE_STACK_IDX * 4 + 4;
  115              ADDR(ALT_PARSE_STACK) -> PARSE_STACK_USED
  116                  = ADDR(PARSE_STACK) -> PARSE_STACK_USED;
  117              ALT_LX_TOP          = LX_TOP;
  118              IED_FLAG            = '1'B;
  119            END;
  120        END;
  121
  122      %MEND;
  123      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      7    
  124      %MACRO RESTORE_IED_STATE;
  125
  126      /* Restore the parse state to that before
  127         the last lookahead was done;  This represents
  128         the immediiate error detection state.
  129      */
  130
  131      DO;
  132        IF IED_FLAG THEN
  133          DO;
  134            PARSE_STACK_IDX  = ALT_PARSE_STACK_IDX;
  135            PARSE_STACK_IDX_IN_CHARS = ALT_PARSE_STACK_IDX * 4 + 4;
  136            ADDR(PARSE_STACK) -> PARSE_STACK_USED
  137                  = ADDR(ALT_PARSE_STACK) -> PARSE_STACK_USED;
  138            LX_TOP           = ALT_LX_TOP;
  139            STATE            = PARSE_STACK(PARSE_STACK_IDX);
  140            IED_FLAG         = '0'B;
  141            RED_STACK_TOP    = 0;
  142          END;
  143      END;
  144      %MEND;
  145      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      8    
  146      %MACRO PUSH_SEMANTIC_ACTION;
  147
  148             /* Do to the immediate error detection problem, we need to
  149                save all semantic actions until a shift is about to be done,
  150                signaling that no error has been encountered.
  151             */
  152
  153      DO;
  154        IF RED_STACK_TOP < %RED_STACK_MAX - 2 THEN
  155          DO;
  156            RED_STACK(RED_STACK_TOP)     = ACTION;
  157            RED_STACK(RED_STACK_TOP + 1) = LX_TOP;
  158            RED_STACK_TOP                = RED_STACK_TOP + 2;
  159          END;
  160        ELSE
  161          DO;
  162            %AT_LEAST_ONE_TOKEN;
  163            %RED_STACK_OVERFLOW;
  164          END;
  165      END;
  166
  167      %MEND;
  168      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      9    
  169      %MACRO CLEAR_SEMANTIC_ACTIONS;
  170
  171             /* We are about to do a shift and know that no error has
  172                occurred;  therefore, do all semantic actions which have
  173                been accumulated.
  174             */
  175
  176      DO;
  177        ALT_LX_TOP    = LX_TOP;
  178        RED_STACK_TOP = RED_STACK_TOP - 2;
  179        DO INDX = 0 TO RED_STACK_TOP  BY 2;
  180          LX_TOP    = RED_STACK(INDX + 1);
  181          REDUCTION = RED_STACK(INDX);
  182          IF PRODR.SEMANTIC(REDUCTION) > 0 THEN
  183            DO;
  184              %CALL_Z8PA$SEMANTICS(A="BINBIT(PRODR.SEMANTIC(REDUCTION),36)");
  185            END;
  186          IF PRODR.POPSTACK(REDUCTION) = 0 THEN
  187            DO;
  188              LX_TOP = LX_TOP + 1;
  189              %CREATE_EMPTY_TERMINAL_ON_LX_STK;
  190            END;
  191        END;
  192        RED_STACK_TOP  = 0;
  193        LX_TOP         = ALT_LX_TOP;
  194        IED_FLAG       = '0'B;
  195      END;
  196
  197      %MEND;
  198      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      10   
  199      %MACRO AT_LEAST_ONE_TOKEN;
  200
  201             /* Make sure at least one token is available to
  202                 a shift operation.
  203             */
  204
  205        DO;
  206          %IF LOCALLY_LEAST_COST_RECOVERY;
  207            IF LA_CNT < 1 THEN  /* NEED TOKENS */
  208              IF CORRECTION.LEN = 0 AND CORRECTION.INDX = 0 THEN
  209                DO;
  210                  %CALL_SCANNER;
  211                  LA_PUT = LA_STK.LINK(LA_PUT);
  212                  LA_CNT = 1;
  213                END;
  214              ELSE
  215                IF CORRECTION.LEN > 0 THEN  /* NEED TO INSERT AN ERROR TOKEN */
  216                  DO;
  217                    %CREATE_DUMMY_TOKEN;
  218                    CORRECTION.LEN   = CORRECTION.LEN - 1;
  219                    CORRECTION.INDX  = CORRECTION.INDX + 1;
  220                    LA_GET           = LA_PUT;
  221                    LA_CNT           = 1;
  222                  END;
  223                ELSE
  224                  DO;  /* HAVE EXHAUSTED ALL ERROR CORRECTION */
  225                    CORRECTION.INDX  = 0;
  226                    LA_CNT           = ERR_LA_CNT;
  227                    LA_PUT           = ERR_LA_PUT;
  228                    LA_GET           = ERR_LA_GET;
  229                  END;
  230
  231          %ELSE;
  232
  233            IF LA_CNT < 1 THEN  /* NEED TOKENS */
  234              IF NOT PANIC_MODE_IN_PROGRESS THEN
  235                DO;
09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      11   
  236                  %CALL_SCANNER;
  237                  LA_PUT = LA_STK.LINK(LA_PUT);
  238                  LA_CNT = 1;
  239                END;
  240              ELSE
  241                DO;  /* GET VALID SYMBOL FOR PANIC SHIFT */
  242                  LA_CNT = ERR_LA_CNT;
  243                  LA_PUT = ERR_LA_PUT;
  244                  LA_GET = ERR_LA_GET;
  245                  DO WHILE ACTION_ROW.CHECK(ACTION_COL.BASE(STATE) + LA_STK.SYMBOL(LA_GET)) ~= STATE;
  246                    IF LA_STK.SYMBOL(LA_GET) = %TERM_EOF_SYM THEN
  247                      DO;
  248                        %RESET_ERROR_LOC;
  249                        CALL ERROR(%E$UNEXP_EOF_DURING_RECOVERY);
  250                        %TERMINATE;
  251                      END;
  252                    LA_CNT = LA_CNT - 1;
  253                    LA_GET = LA_STK.LINK(LA_GET);
  254                    IF LA_CNT < 1 THEN
  255                      DO;
  256                        %CALL_SCANNER;
  257                        LA_PUT = LA_STK.LINK(LA_PUT);
  258                        LA_CNT = 1;
  259                      END;
  260                  END;
  261                  PANIC_MODE_IN_PROGRESS = '0'B;
  262                  %RESET_ERROR_LOC;
  263                  CALL ERROR (%E$PARSING_RESUMED);
  264                END;
  265
  266            %ENDIF;
  267
  268        END;
  269
  270      %MEND;
  271      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      12   
  272      %MACRO QUIT_RECOVERY;
  273
  274      DO;
  275
  276        %RESET_ERROR_LOC;
  277        CALL ERROR(%E$PARSE_ERROR);
  278        %TERMINATE;
  279
  280      END;
  281
  282      %MEND;
  283      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      13   
  284      %MACRO PANIC_RECOVERY;
  285      DO;
  286
  287        %RESET_ERROR_LOC;
  288        CALL ERROR(%E$PARSE_ERROR);
  289
  290
  291        PSI = PARSE_STACK_IDX + 1;
  292        DO UNTIL (ACTION_ROW.CHECK(INDX) = PARSE_STACK(PSI))  OR (PSI = 0);
  293
  294          PSI  = PSI - 1;
  295          INDX = ACTION_COL.BASE (PARSE_STACK(PSI)) + %TERM_ERROR_SYM;
  296
  297        END;
  298
  299        IF ACTION_ROW.CHECK(INDX) = PARSE_STACK(PSI) THEN
  300          DO;
  301             /* INSERT THE =ERROR= TOKEN */
  302            IF PSI = %PARSE_STACK_MAX THEN
  303              %PARSE_STACK_OVERFLOW;
  304            ELSE
  305              DO;
  306                PARSE_STACK_IDX         = PSI ;
  307                STATE                   = PARSE_STACK(PARSE_STACK_IDX);
  308                LX_TOP                  = PARSE_STACK_IDX ;
  309                ERR_LA_CNT              = LA_CNT;
  310                ERR_LA_PUT              = LA_PUT;
  311                ERR_LA_GET              = LA_GET;
  312                PANIC_MODE_IN_PROGRESS  = '1'B;
  313                /* CREATE ERROR TOKEN */
  314                LA_STK.SYMBOL(LA_PUT)   = %TERM_ERROR_SYM;
  315                LA_STK.DNTPTR(LA_PUT)   = ADDR(NIL);
  316                LA_STK.SYMPTR(LA_PUT)   = ADDR(NIL);
  317                LA_STK.LINE (LA_PUT)    = ERRLINE;
  318                LA_STK.COLUMN(LA_PUT)   = ERRCOL;
  319                LA_CNT                  = 1;
  320                LA_GET                  = LA_PUT;
09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      14   
  321                LA_PUT                  = LA_STK.LINK(LA_PUT);
  322              END;
  323          END;
  324        ELSE
  325          DO;
  326        %RESET_ERROR_LOC;
  327            CALL ERROR(%E$UNEXP_EOF_DURING_RECOVERY);
  328            %TERMINATE;
  329          END;
  330
  331      END;
  332      %MEND;
  333      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      15   
  334      %MACRO GET_ACTION_ITEM;
  335
  336             /* Get the next action from the action table.  This will be
  337                either a shift, reduce, or an error.
  338             */
  339
  340        IF ACTION_COL.BASE(STATE) = 0 THEN
  341          DO;
  342            %IF PARSING_STATS;
  343            %INC_ACTION_COL_STATS(I=STATE);
  344            %ENDIF;
  345            ACTION = ACTION_COL.DEFAULT(STATE);
  346          END;
  347        ELSE
  348          DO;
  349            %AT_LEAST_ONE_TOKEN;
  350            INDX = ACTION_COL.BASE(STATE) + LA_STK.SYMBOL(LA_GET);
  351            IF ACTION_ROW.CHECK(INDX) = STATE THEN
  352              DO;
  353                %IF PARSING_STATS;
  354                %INC_ACTION_ROW_STATS(I=INDX);
  355                %ENDIF;
  356                ACTION = ACTION_ROW.NEXT(INDX);
  357                IF ACTION = 0 THEN
  358                  DO;
  359                    %IF LOCALLY_LEAST_COST_RECOVERY;
  360                      %CLEAR_SEMANTIC_ACTIONS;
  361                    %ENDIF;
  362                    %DUMP_PARSER_STATS;
  363                    %LAST_SHIFTED_LOC;
  364                    RETURN;
  365                  END;
  366              END;
  367            ELSE
  368              DO;
  369                %IF PARSING_STATS;
  370                %INC_ACTION_COL_STATS(I=STATE);
09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      16   
  371                %ENDIF;
  372                ACTION = ACTION_COL.DEFAULT(STATE);
  373              END;
  374          END;
  375
  376      %MEND;
  377      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      17   
  378      %MACRO SHIFT;
  379
  380             /* Shift the symbol and go to the next state.
  381                The symbol is always a terminal, and it is placed on the token
  382                stack (LX_STK) for reference by a semantics action ala Dave
  383                Ward's parser.
  384             */
  385
  386          DO;
  387            %IF LOCALLY_LEAST_COST_RECOVERY;
  388              %CLEAR_SEMANTIC_ACTIONS;
  389            %ENDIF;
  390            %AT_LEAST_ONE_TOKEN;
  391            IF LX_TOP = %LX_MAX THEN
  392              %SEMANTIC_TOKEN_STACK_OVERFLOW;
  393            LX_TOP         = LX_TOP + 1;
  394            LX_STK(LX_TOP) = LA_STK(LA_GET);
  395            LX_STK.LINK(LX_TOP) = ADDR(NIL);
  396            %LAST_SHIFTED_LOC;
  397            IF PARSE_STACK_IDX = %PARSE_STACK_MAX THEN
  398              %PARSE_STACK_OVERFLOW;
  399            ELSE
  400              DO;
  401                LA_CNT         = LA_CNT -1 ;
  402                LA_GET         = LA_STK.LINK(LA_GET);
  403                STATE                         = ACTION;
  404                PARSE_STACK_IDX               = PARSE_STACK_IDX + 1;
  405                PARSE_STACK(PARSE_STACK_IDX)  = STATE;
  406              END;
  407          END;
  408
  409      %MEND;
  410      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      18   
  411      %MACRO REDUCE;
  412
  413             /* Reduce the symbols and states on the stack by the appropriate
  414                production, after calling any required semantic routine.
  415                The token stack (LX_STK) is left with one dummy token to
  416                represent the non_terminal that was just reduced.  This non_terminal
  417                and the state on the stack after the reduction are used to
  418                index into the GOTO table to obtain the next state.
  419             */
  420
  421            DO;
  422              ACTION          = - ACTION;
  423              %IF LOCALLY_LEAST_COST_RECOVERY;
  424                %SAVE_IED_STATE;
  425              %ENDIF;
  426              %IF LOCALLY_LEAST_COST_RECOVERY;
  427                %PUSH_SEMANTIC_ACTION;
  428              %ELSE;
  429                IF PRODR.SEMANTIC(ACTION) > 0 THEN
  430                  DO;
  431                    REDUCTION = ACTION;
  432                    %CALL_Z8PA$SEMANTICS(A="BINBIT(PRODR.SEMANTIC(REDUCTION),36)");
  433                  END;
  434              %ENDIF;
  435              %IF PARSING_STATS;
  436                %INC_PRODR_STATS(I=ACTION);
  437              %ENDIF;
  438              PARSE_STACK_IDX = PARSE_STACK_IDX - PRODR.POPSTACK(ACTION);
  439              LX_TOP          = PARSE_STACK_IDX + 1;
  440              %IF ~ LOCALLY_LEAST_COST_RECOVERY;
  441                IF PRODR.POPSTACK(ACTION) = 0 THEN
  442                  DO;
  443                    %CREATE_EMPTY_TERMINAL_ON_LX_STK;
  444                  END;
  445              %ENDIF;
  446
  447              /* Get new state */
09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      19   
  448
  449              NT = PRODR.GOAL(ACTION);
  450              IF GOTO_COL.BASE(NT) = 0 THEN
  451                DO;
  452                  %IF PARSING_STATS;
  453                  %INC_GOTO_COL_STATS(I=NT);
  454                  %ENDIF;
  455                  STATE = GOTO_COL.DEFAULT(NT);
  456                END;
  457              ELSE
  458                DO;
  459                  INDX = GOTO_COL.BASE(NT) + PARSE_STACK(PARSE_STACK_IDX);
  460                  IF GOTO_ROW.CHECK(INDX) = NT THEN
  461                    DO;
  462                      %IF PARSING_STATS;
  463                      %INC_GOTO_ROW_STATS(I=INDX);
  464                      %ENDIF;
  465                      STATE = GOTO_ROW.NEXT (INDX);
  466                    END;
  467                  ELSE
  468                    DO;
  469                      %IF PARSING_STATS;
  470                      %INC_GOTO_COL_STATS(I=NT);
  471                      %ENDIF;
  472                      STATE = GOTO_COL.DEFAULT(NT);
  473                    END;
  474                END;
  475
  476              /* Push state on stack */
  477
  478              IF PARSE_STACK_IDX = %PARSE_STACK_MAX THEN
  479                DO;
  480                  %AT_LEAST_ONE_TOKEN;
  481                  %PARSE_STACK_OVERFLOW;
  482                END;
  483              ELSE
  484                DO;
09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      20   
  485                  PARSE_STACK_IDX               = PARSE_STACK_IDX + 1;
  486                  PARSE_STACK(PARSE_STACK_IDX)  = STATE;
  487                END;
  488            END;
  489
  490      %MEND;
  491      %EJECT;

09:23 AUG 09 '97 Z8P_PARS_MAC.:Z8A6SI                                      21   
  492
  493
  494
  495
  496             /* Initialize circular list of lookahead tokens for fast
  497                 additions and retrieval. */
  498
  499      %MACRO INITIAL_INITIALIZATION;
  500      DO INDX = 0 TO %LA_MAX - 1;
  501        LA_STK.LINK(INDX) = INDX + 1;
  502      END;
  503      LA_STK.LINK(%LA_MAX) = 0;
  504      %MEND;
  505
  506      %MACRO RESTART_INITIALIZATION;
  507      %IF LOCALLY_LEAST_COST_RECOVERY;
  508        RED_STACK_TOP = 0;
  509        IED_FLAG = '0'B;
  510      %ENDIF;
  511      PARSE_STACK_IDX = 0;
  512      STATE = 1;
  513      LX_TOP          = 0;
  514      PARSE_STACK(PARSE_STACK_IDX)  = STATE;
  515      %MEND;
  516      %EJECT;


