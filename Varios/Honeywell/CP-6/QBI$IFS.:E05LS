VERSION E05

PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:1    
        1        1        /*M* QBI$IFS:  IF class, IF condition, and IF relation.  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=0,DCI=4,CSI=2,IAD=2,DTI=2,AND,ECI=0,DIN=2,STI=2 */
        8        8
        9        9        /*D*       NAME: QBI$IFS
       10       10                PURPOSE: To provide a common module for all "B" level
       11       11                          FPL IF operations.
       12       12                ENTRIES: QBI$IFCLS, QBI$IFCNDA, QBI$IFCNDN, QBI$IFRELA,
       13       13                         QBI$IFRELG, and QBI$IFRELN.
       14       14              INTERFACE: QCS$SETUP_SOURCE, QSC$SETUP_TARGET, QCI$IFA, QCI$IFN
       15       15                                                            */
       16       16        QBI$IFS: PROC ALTRET;
       17       17
       18       18          %INCLUDE LCP_6;
       19      209
       20      210          %INCLUDE QG_MACRO_M;
       21      347          %INCLUDE QI_EQUATES_E;
       22      706        %INCLUDE QI_MACROS_M;
       23     5764        %QI$ALL;
       24    16877
       25    16878    1     DCL QCS$SETUP_SOURCE ENTRY;
       26    16879    1     DCL QCS$SETUP_TARGET ENTRY;
       27    16880    1     DCL QCI$IFA ENTRY;
       28    16881    1     DCL QCI$IFN ENTRY;
       29    16882    1     DCL QCI$IFG ENTRY;
       30    16883
       31    16884    1     DCL CCB$ PTR;
       32    16885    1     DCL STATUS_FLAG BIT(1) ALIGNED;
       33    16886    1     DCL IFCNDA BIT(1) ALIGNED;
       34    16887    1     DCL IFRELA BIT(1) ALIGNED;
       35    16888    1     DCL IFRELG BIT(1) ALIGNED;
       36    16889    1     DCL REL UBIN;
       37    16890    1     DCL CURRENT_INDEX UBIN;
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:2    
       38    16891    1     DCL ENDING_INDEX UBIN;
       39    16892    1     DCL TEST_BYTE UBIN BYTE ALIGNED;
       40    16893
       41    16894          %QI@OTTER_SPACE;
       42    16922        %EJECT;
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:3    
       43    16923        /**************************************************************/
       44    16924        /*                                                            */
       45    16925        /*                       CLASS IFs                            */
       46    16926        /*                                                            */
       47    16927        /**************************************************************/
       48    16928
       49    16929    1   QBI$IFCLS: ENTRY ALTRET;
       50    16930                                                /**/
       51    16931        /*D*       NAME: QBI$IFCLASS
       52    16932                PURPOSE: To provide FPL with a "class" verification on items.
       53    16933              INTERFACE: None
       54    16934            DESCRIPTION: This routine checks classes of data beginning with
       55    16935                            ALPHA, then DIGITS, and finally NUMERICS (which
       56    16936                            consist of leading, trailing seperate, and over-
       57    16937                            punched signs).  The value (operand) is analyzed
       58    16938                            in a piecemeal fashion by indexing through it
       59    16939                            from start to finish.  We'll use SELECTs instead
       60    16940                            of CASEs to try to spade thangs up. */
       61    16941                                                /**/
       62    16942                                                /* SETUP the operand                  */
       63    16943                                                /**/
       64    16944    1       CALL QCS$SETUP_SOURCE;
       65    16945
       66    16946
       67    16947                                                /**/
       68    16948                                                /* First, check the alphabetic case   */
       69    16949                                                /**/
       70    16950                                           /* Get the ATOM offset of the operand.     */
       71    16951                                                /**/
       72    16952    1       CURRENT_INDEX = QI_1.OFFSET.S;  /* Index                              */
       73    16953                                                /**/
       74    16954                                       /* Add length to ATOM offset to get
       75    16955                                          ending index. */
       76    16956                                                /**/
       77    16957    1       ENDING_INDEX = QI_1.OP.LEN.S + QI_1.OFFSET.S; /* Index end            */
       78    16958                                                /**/
       79    16959                                           /* Do from start to finish of operand.     */
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:4    
       80    16960                                                /**/
       81    16961    2       DO SELECT ( QI_1.INSTR$ -> QI$OP_IFCLS.ATTRIBUTE.TYPES );
       82    16962
       83    16963    2         SELECT ( %QI#IF_CLASS_ALPHA );
       84    16964                                                /**/
       85    16965    3         DO WHILE ( CURRENT_INDEX < ENDING_INDEX );
       86    16966                                           /* Point to operand & get (indexed) byte.  */
       87    16967    3           TEST_BYTE = QI_1.OP.DATA.S$ -> QI$UBYTE_A (CURRENT_INDEX);
       88    16968                                                /**/
       89    16969                                                /* Here, do the alphanumeric verify.  */
       90    16970                                                /**/
       91    16971    3           IF (TEST_BYTE < ASCBIN ('A') OR TEST_BYTE > ASCBIN ('Z'))
       92    16972    3             AND (TEST_BYTE < ASCBIN ('a') OR TEST_BYTE > ASCBIN ('z'))
       93    16973    3             AND (TEST_BYTE ~= ASCBIN (' '))
       94    16974    3             AND (NOT QI_1.INSTR$ -> QI$OP_IFCLS.ATTRIBUTE.TYPE.IS_NUMERIC
       95    16975    3             OR TEST_BYTE < ASCBIN ('0')
       96    16976    3             OR TEST_BYTE > ASCBIN ('9'))
       97    16977    3           THEN
       98    16978    4             DO;                       /* Test failed - not alphanumeric     */
       99    16979    4               STATUS_FLAG = %NO;
      100    16980    4               GOTO CHECK_NOT_ATTRIBUTE;
      101    16981    4             END;
      102    16982                                                /**/
      103    16983                                                /* Increment index to next operand.   */
      104    16984                                                /**/
      105    16985    3           CURRENT_INDEX = CURRENT_INDEX + 1;
      106    16986    3         END;
      107    16987
      108    16988    2         STATUS_FLAG = %YES;          /* Test succeeded - its alphanumeric  */
      109    16989    2         GOTO CHECK_NOT_ATTRIBUTE;
      110    16990
      111    16991    2         SELECT ( %QI#IF_CLASS_DIGITS );
      112    16992    3         DO WHILE ( CURRENT_INDEX <= ENDING_INDEX );
      113    16993    3           TEST_BYTE = QI_1.OP.DATA.S$ -> QI$UBYTE_A (CURRENT_INDEX);
      114    16994    3           IF TEST_BYTE < ASCBIN ('0') OR TEST_BYTE > ASCBIN ('9')
      115    16995    3           THEN
      116    16996    4             DO;                       /* Not digits - test failed           */
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:5    
      117    16997    4               STATUS_FLAG = %NO;
      118    16998    4               GOTO CHECK_NOT_ATTRIBUTE;
      119    16999    4             END;
      120    17000    3           CURRENT_INDEX = CURRENT_INDEX + 1; /* Set index for the next byte. */
      121    17001    3         END;
      122    17002
      123    17003    2         STATUS_FLAG = %YES;          /* It's digits - test succeeded       */
      124    17004    2         GOTO CHECK_NOT_ATTRIBUTE;
      125    17005
      126    17006    2         SELECT ( %QI#IF_CLASS_NUMERIC );
      127    17007                                                /**/
      128    17008                                                /* -1 for the sign                    */
      129    17009                                                /**/
      130    17010    2         ENDING_INDEX = ENDING_INDEX - 1; /* Index end                      */
      131    17011                                                /* Is it unpacked decimal             */
      132    17012    2         IF QI_1.TYPE.S = %QI#TYPE_DISPLAY
      133    17013    2         THEN
      134    17014    3           DO;
      135    17015                                                /**/
      136    17016                                   /* DISPLAY - If type is display and
      137    17017                                      value has a leading sign, make sure
      138    17018                                      it's either a '+' or a '-'.  If
      139    17019                                      so, increment index to first number;
      140    17020                                      if not, it's not numeric. */
      141    17021                                                /**/
      142    17022    4             DO SELECT ( QI_1.OP.CIP.S.CD.SIGN );
      143    17023
      144    17024    4               SELECT ( %QI#CD_SIGN_LEADING_SEPARATE );
      145    17025    4               TEST_BYTE = QI_1.OP.DATA.S$ -> QI$UBYTE_A (CURRENT_INDEX);
      146    17026    4               IF TEST_BYTE ~= ASCBIN ('+') AND TEST_BYTE ~= ASCBIN ('-')
      147    17027    4               THEN
      148    17028    5                 DO;                   /* Test failed - not numeric          */
      149    17029    5                   STATUS_FLAG = %NO;
      150    17030    5                   GOTO CHECK_NOT_ATTRIBUTE;
      151    17031    5                 END;
      152    17032    4               CURRENT_INDEX = CURRENT_INDEX + 1; /* increment index to next byte. */
      153    17033
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:6    
      154    17034    4               SELECT ( %QI#CD_SIGN_TRAILING_SEPARATE );
      155    17035                                                /**/
      156    17036                               /* Trailing Seperate - If not a leading
      157    17037                                  sign, lets check trailing seperate.
      158    17038                                  First, get the last nibble and see
      159    17039                                  if it's a '+' or a '-'.  If not,
      160    17040                                  test fails (it's not numeric).  If
      161    17041                                  test succeeds, decrement ending
      162    17042                                  index to NOT include the sign. */
      163    17043                                                /**/
      164    17044    4               TEST_BYTE = QI_1.OP.DATA.S$ -> QI$UBYTE_A (ENDING_INDEX);
      165    17045    4               IF TEST_BYTE ~= ASCBIN ('+') AND TEST_BYTE ~= ASCBIN ('-')
      166    17046    4               THEN
      167    17047    5                 DO;                   /* Test failed - not numeric          */
      168    17048    5                   STATUS_FLAG = %NO;
      169    17049    5                   GOTO CHECK_NOT_ATTRIBUTE;
      170    17050    5                 END;
      171    17051    4               ENDING_INDEX = ENDING_INDEX - 1; /* Success - decr. end (sign) */
      172    17052
      173    17053    4               SELECT ( %QI#CD_SIGN_TRAILING_OVER );
      174    17054                                                /**/
      175    17055                         /* Overpunched - Check legal overpunches.
      176    17056                            When we find one decrement ending
      177    17057                            index so the remainder of the number
      178    17058                            can be ckecked. */
      179    17059                                                /**/
      180    17060    4               TEST_BYTE = QI_1.OP.DATA.S$ -> QI$UBYTE_A (ENDING_INDEX);
      181    17061    4               IF TEST_BYTE ~= %BITBIN ('7B'X) AND TEST_BYTE ~= %BITBIN ('7D'X)
      182    17062    4                 AND (TEST_BYTE < ASCBIN ('A') OR TEST_BYTE > ASCBIN ('I'))
      183    17063    4                 AND (TEST_BYTE < ASCBIN ('0') OR TEST_BYTE > ASCBIN ('9'))
      184    17064    4                 AND (TEST_BYTE < ASCBIN ('J') OR TEST_BYTE > ASCBIN ('R'))
      185    17065    4               THEN
      186    17066    5                 DO;                   /* Test failed - not numeric          */
      187    17067    5                   STATUS_FLAG = %NO;
      188    17068    5                   GOTO CHECK_NOT_ATTRIBUTE;
      189    17069    5                 END;
      190    17070    4               ENDING_INDEX = ENDING_INDEX - 1; /* Decr. end (sign)         */
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:7    
      191    17071
      192    17072    4             END;                     /* do select QI_1.OP.CIP.S.CD.SIGN    */
      193    17073    3           END;                      /* END %TYPE_DISPLAY#                 */
      194    17074                                                /**/
      195    17075                                   /* Now that we have removed the sign,
      196    17076                                      loop on remainder of the numeric
      197    17077                                      value. */
      198    17078                                                /**/
      199    17079    3         DO WHILE ( CURRENT_INDEX <= ENDING_INDEX );
      200    17080    3           TEST_BYTE = QI_1.OP.DATA.S$ -> QI$UBYTE_A (CURRENT_INDEX);
      201    17081    3           IF TEST_BYTE < ASCBIN ('0') OR TEST_BYTE > ASCBIN ('9')
      202    17082    3           THEN
      203    17083    4             DO;                       /* Not numeric                        */
      204    17084    4               STATUS_FLAG = %NO;
      205    17085    4               GOTO CHECK_NOT_ATTRIBUTE;
      206    17086    4             END;
      207    17087    3           CURRENT_INDEX = CURRENT_INDEX + 1;
      208    17088    3         END;            /* END Do until CURRENT_INDEX > ENDING_INDEX    */
      209    17089
      210    17090    2       END;                           /* do select ATTRIBUTE.TYPE           */
      211    17091
      212    17092
      213    17093    1       STATUS_FLAG = %YES;
      214    17094                                                /**/
      215    17095                                       /* Here we check the "NOT" clause on
      216    17096                                          the current statement:
      217    17097                                          1) If the comparison fails (STATUS_
      218    17098                                             FLAG = %NO) and "NOT" was specified
      219    17099                                             in source, we have a negated false
      220    17100                                             condition - go to succeed.
      221    17101                                          2) If the comparison fails and "NOT"
      222    17102                                             wasn't specified in source, we
      223    17103                                             have a true failure - go to fail.
      224    17104                                          3) If the comparison succeeds
      225    17105                                             (STATUS_FLAG = %YES) and "NOT" was
      226    17106                                             specified in source, we have a
      227    17107                                             negated true condition - go to
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:8    
      228    17108                                             fail.
      229    17109                                          4) If the comparison succeeds and
      230    17110                                             "NOT" wasn't specified in source
      231    17111                                             then we have a true success -
      232    17112                                             go to succeed. */
      233    17113                                                /**/
      234    17114    1   CHECK_NOT_ATTRIBUTE:
      235    17115    1       IF STATUS_FLAG = %NO
      236    17116    1       THEN
      237    17117    2         DO;                             /* Test failed                        */
      238    17118    2           IF QI_1.INSTR$ -> QI$OP_IFCLS.ATTRIBUTE.IS_NOT
      239    17119    2           THEN
      240    17120    2             GOTO SUCCEED;
      241    17121    2           ELSE
      242    17122    2             GOTO FAIL;
      243    17123    2         END;
      244    17124    1       ELSE
      245    17125    2         DO;                             /* Test succeeded                     */
      246    17126    2           IF QI_1.INSTR$ -> QI$OP_IFCLS.ATTRIBUTE.IS_NOT
      247    17127    2           THEN
      248    17128    2             GOTO FAIL;
      249    17129    2           ELSE
      250    17130    2             GOTO SUCCEED;
      251    17131    2         END;
      252    17132
      253    17133    1   SUCCEED:
      254    17134    1       QI_1.INSTR$ = ADDR (QI_1.INSTR$ -> QI$OP_IFCLS.NEXT_CODE@P);
      255    17135    1       RETURN;
      256    17136
      257    17137    1   FAIL:
      258    17138            %PROC_ADDRESS ( THING@P = "QI_1.INSTR$ -> QI$OP_IFCLS.FALSE_CONDITION@P",
      259    17139            CHECK_FOR_INDIRECTION = NO,
      260    17140            RESULT$ = "QI_1.INSTR$" );
      261    17177    1       ALTRETURN;
      262    17178        %EJECT;
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:9    
      263    17179        /**************************************************************/
      264    17180        /*                                                            */
      265    17181        /*                    CONDITIONAL IFs                         */
      266    17182        /*                                                            */
      267    17183        /**************************************************************/
      268    17184
      269    17185
      270    17186        /*D*    ENTRIES: QBI$IFCNDA & QBI$IFCNDN
      271    17187                PURPOSE: To provide a runtime conditional alpha and
      272    17188                          conditional numeric statements.
      273    17189              INTERFACE: QCS$SETUP_SOURCE, QDS$SETUP_TARGET, QCI$IFA, QCI$IFN
      274    17190            DESCRIPTION: This entry does a conditional branch depending on
      275    17191                          whether or not an (alpha)numeric value is within a
      276    17192                          range or among a list of elements.  The branch is
      277    17193                          executed if one of these conditions is satisfied,
      278    17194                          otherwise control transfers to the next sequential
      279    17195                          instruction.  If the "through" bit is set, the range
      280    17196                          comparison is done; if not, the list comparison is
      281    17197                          is done.  The "through" bit resides in the Cond-
      282    17198                          itional Control Block (which also contains the num
      283    17199                          of list items, and the DADs to each of these items).
      284    17200          CODE SEQUENCE: Addr of DAD, Addr of CCB, NOT, False addr
      285    17201        CONDITION BLOCK: Bit for through + Num of items, Addrs to DADs of
      286    17202                         items.
      287    17203                                                          */
      288    17204
      289    17205
      290    17206        /************** IF CONDITIONAL ALPHANUMERIC *******************/
      291    17207
      292    17208    1   QBI$IFCNDA: ENTRY ALTRET;               /* If conditional alpha               */
      293    17209
      294    17210    1       IFCNDA = %YES;
      295    17211
      296    17212            /*  QCI$IFA may decide to call QCU$UNSIGN later, so
      297    17213                we'll tell it where to stick any unsigned stuff.  */
      298    17214    1       QI_1.OTTER_SPACE.S$ = ADDR ( QI@OTTER_SPACE );
      299    17215    1       QI_1.OTTER_SPACE.T$ = ADDR ( QI@OTTER_SPACE );
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:10   
      300    17216
      301    17217    1       GOTO IF_CONDITIONAL_COMMON;
      302    17218
      303    17219        /**************** IF CONDITIONAL NUMERIC **********************/
      304    17220
      305    17221    1   QBI$IFCNDN: ENTRY ALTRET;               /* If conditional numeric             */
      306    17222
      307    17223    1       IFCNDA = %NO;
      308    17224
      309    17225                                           /* Common point for both alpha-
      310    17226                                              numeric & numeric conditional
      311    17227                                              IFs */
      312    17228
      313    17229    1   IF_CONDITIONAL_COMMON:
      314    17230
      315    17231    1       CALL QCS$SETUP_SOURCE;
      316    17232
      317    17233                                           /*
      318    17234                                          Get the address of the conditional
      319    17235                                          control block (the block of settings
      320    17236                                          describing this "IF").
      321    17237                                                          */
      322    17238            %PROC_ADDRESS ( THING@P =
             17238                "QI_1.INSTR$ -> QI$OP_IFCNDA.CONDITION_CONTROL_BLOCK@P",
      323    17239            CHECK_FOR_INDIRECTION = NO,
      324    17240            RESULT$ = CCB$ );
      325    17277
      326    17278                                           /*
      327    17279                                          Check if the "through" bit is set.
      328    17280                                          This means we are to check between
      329    17281                                          two values.
      330    17282                                                          */
      331    17283    1       IF CCB$ -> QI$CONDITION_CONTROL_BLOCK.WORD0_FLAGS.IS_THROUGH
      332    17284    1       THEN
      333    17285    2         DO;
      334    17286                                           /*
      335    17287                                          The CCB contains a through bit, the
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:11   
      336    17288                                          number of items, and DADs which
      337    17289                                          reference these items.  Point to
      338    17290                                          the first addr of the DAD refer-
      339    17291                                          encing the first item.
      340    17292                                                           */
      341    17293    2           QI_1.SOURCE$ = ADDR ( CCB$ -> QI$CONDITION_CONTROL_BLOCK.RANGE_A@P (0) );
      342    17294                                           /*
      343    17295                                          SETUP the lower bound.  If its
      344    17296                                          >= to the lower bound, then SETUP
      345    17297                                          the upper bound.  If its <= to
      346    17298                                          the upper bound, we have satisfied
      347    17299                                          the condition.
      348    17300                                                          */
      349    17301    2           CALL QCS$SETUP_TARGET;
      350    17302    2           IF IFCNDA = %YES
      351    17303    2           THEN
      352    17304    2             CALL QCI$IFA;
      353    17305    2           ELSE
      354    17306    2             CALL QCI$IFN;
      355    17307    2           IF QI_1.OP.COMP_RESULT ~= %QI#IF_LESS
      356    17308    2           THEN
      357    17309    3             DO;
      358    17310    3               CALL QCS$SETUP_TARGET;
      359    17311    3               IF IFCNDA = %YES
      360    17312    3               THEN
      361    17313    3                 CALL QCI$IFA;
      362    17314    3               ELSE
      363    17315    3                 CALL QCI$IFN;
      364    17316
      365    17317    3               IF QI_1.OP.COMP_RESULT ~= %QI#IF_GREATER
      366    17318    3               THEN
      367    17319    4                 DO;
      368    17320    4                   STATUS_FLAG = %YES;    /* TRUE (value is in the range)       */
      369    17321    4                   GOTO CHECK_THE_NOT_ATTRIBUTE;
      370    17322    4                 END;
      371    17323    3             END;
      372    17324    2           STATUS_FLAG = %NO;           /* FALSE (value out of range)         */
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:12   
      373    17325    2           GOTO CHECK_THE_NOT_ATTRIBUTE;
      374    17326    2         END;
      375    17327
      376    17328                                           /*
      377    17329                                          The through bit (range check) isn't
      378    17330                                          set, so it must be a list check.
      379    17331                                                          */
      380    17332    1       QI_1.SOURCE$ = ADDR ( CCB$ -> QI$CONDITION_CONTROL_BLOCK.LIST_A@P (0) );
      381    17333
      382    17334    1       DO CURRENT_INDEX = CCB$ -> QI$CONDITION_CONTROL_BLOCK.LIST_LENGTH
      383    17335    2         DOWNTO 1
      384    17336    2         BY -1;
      385    17337    2         CALL QCS$SETUP_TARGET;
      386    17338    2         IF IFCNDA = %YES
      387    17339    2         THEN
      388    17340    2           CALL QCI$IFA;
      389    17341    2         ELSE
      390    17342    2           CALL QCI$IFN;
      391    17343
      392    17344    2         IF QI_1.OP.COMP_RESULT = %QI#IF_EQUAL /* Found a match?            */
      393    17345    2         THEN
      394    17346    3           DO;
      395    17347    3             STATUS_FLAG = %YES;       /* TRUE (element in list)             */
      396    17348    3             GOTO CHECK_THE_NOT_ATTRIBUTE;
      397    17349    3           END;
      398    17350    2       END;
      399    17351
      400    17352    1       STATUS_FLAG = %NO;              /* FALSE (element not in list)        */
      401    17353
      402    17354    1   CHECK_THE_NOT_ATTRIBUTE:
      403    17355    1       IF STATUS_FLAG = %YES           /* TRUE condition                     */
      404    17356    1       THEN
      405    17357    2         DO;
      406    17358    2           IF QI_1.INSTR$ -> QI$OP_IFCNDA.ATTRIBUTE.IS_NOT
      407    17359    2           THEN
      408    17360    2             GOTO IFCND_BRANCH;
      409    17361    2           ELSE
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:13   
      410    17362    2             GOTO DONT_IFCND_BRANCH;
      411    17363    2         END;
      412    17364    1       ELSE                            /* FALSE condition                    */
      413    17365    2         DO;
      414    17366    2           IF QI_1.INSTR$ -> QI$OP_IFCNDA.ATTRIBUTE.IS_NOT
      415    17367    2           THEN
      416    17368    2             GOTO DONT_IFCND_BRANCH;
      417    17369    2           ELSE
      418    17370    2             GOTO IFCND_BRANCH;
      419    17371    2         END;
      420    17372
      421    17373    1   IFCND_BRANCH:
      422    17374            %PROC_ADDRESS ( THING@P = "QI_1.INSTR$ -> QI$OP_IFCNDA.FALSE_CONDITION@P",
      423    17375            CHECK_FOR_INDIRECTION = NO,
      424    17376            RESULT$ = "QI_1.INSTR$" );
      425    17413    1       ALTRETURN;
      426    17414
      427    17415    1   DONT_IFCND_BRANCH:
      428    17416                                           /*
      429    17417                                              Point to next instruction
      430    17418                                                          */
      431    17419    1       QI_1.INSTR$ = ADDR (QI_1.INSTR$ -> QI$OP_IFCNDA.NEXT_CODE@P);
      432    17420    1       RETURN;
      433    17421
      434    17422        %EJECT;
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:14   
      435    17423        /**************************************************************/
      436    17424        /*                                                            */
      437    17425        /*                    RELATIONAL IFs                          */
      438    17426        /*                                                            */
      439    17427        /**************************************************************/
      440    17428
      441    17429
      442    17430        /*D*    ENTRIES: QBI$IFRELA, QBI$IFRELN, & QBI$IFRELG
      443    17431                PURPOSE: To provide relational alphanumeric and numeric
      444    17432                           comparisons.
      445    17433              INTERFACE: QCS$SETUP_SOURCE, QCS$SETUP_TARGET, QCI$IFA, QCI$IFN
      446    17434            DESCRIPTION: This module does relational tests on two operands,
      447    17435                           to determine if the statements immediately fol-
      448    17436                           lowing the IF condition should be executed or
      449    17437                           bypassed.  After the relationship between
      450    17438                           the two operands is discovered, we must find out
      451    17439                           what kind of procedure statement was specified so
      452    17440                           that a final decision on where to branch can be
      453    17441                           made.  The following hex values are used to find
      454    17442                           out what kind of procedure statement was specified.
      455    17443                           If the first number of the field is "1" then NOT
      456    17444                           was specified. For the second number - 0 means
      457    17445                           greater, 1 means less, and 2 means equal to. For
      458    17446                           example, '10'X which is a binary 16, is not greaterrr20
      459    17447                           than, and '0012'X, which is binary 18, is not equal
      460    17448                           to.
      461    17449                                                          */
      462    17450
      463    17451        %EJECT;
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:15   
      464    17452        /************** IF RELATIONAL ALPHANUMERIC ********************/
      465    17453
      466    17454    1   QBI$IFRELA: ENTRY ALTRET;
      467    17455
      468    17456    1       IFRELG = %NO;
      469    17457
      470    17458            /*  QCI$IFA may decide to call QCU$UNSIGN later, so
      471    17459                we'll tell it where to stick any unsigned stuff.  */
      472    17460    1       QI_1.OTTER_SPACE.S$ = ADDR ( QI@OTTER_SPACE );
      473    17461    1       QI_1.OTTER_SPACE.T$ = ADDR ( QI@OTTER_SPACE );
      474    17462
      475    17463    1       CALL QCS$SETUP_SOURCE;
      476    17464    1       CALL QCS$SETUP_TARGET;
      477    17465
      478    17466    1       CALL QCI$IFA;
      479    17467
      480    17468    1       REL = QI_1.INSTR$ -> QI$OP_IFRELA.RELATIONAL_ATTRIBUTE;
      481    17469
      482    17470    1       GOTO SO_JUMP_ALREADY;
      483    17471        /***************** IF RELATIONAL NUMERIC **********************/
      484    17472
      485    17473    1   QBI$IFRELN: ENTRY ALTRET;
      486    17474
      487    17475    1       IFRELG = %NO;
      488    17476
      489    17477    1       CALL QCS$SETUP_SOURCE;
      490    17478    1       CALL QCS$SETUP_TARGET;
      491    17479
      492    17480    1       CALL QCI$IFN;
      493    17481
      494    17482    1       REL = QI_1.INSTR$ -> QI$OP_IFRELN.RELATIONAL_ATTRIBUTE;
      495    17483
      496    17484    1       GOTO SO_JUMP_ALREADY;
      497    17485        %EJECT;
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:16   
      498    17486        /***************** IF RELATIONAL GROUP  ***********************/
      499    17487
      500    17488    1   QBI$IFRELG: ENTRY ALTRET;
      501    17489
      502    17490    1       IFRELG = %YES;
      503    17491
      504    17492    1       QI_1.SOURCE$ = ADDR (QI_1.INSTR$ -> QI$OP_IFRELG.SOURCE@P);
      505    17493
      506    17494    1       CALL QCS$SETUP_SOURCE;
      507    17495    1       CALL QCS$SETUP_TARGET;
      508    17496
      509    17497           /*  This is the closest I can figure out:
      510    17498               IS_SOURCE_GROUP means that, of the two items being compared,
      511    17499               the first item is the group item.  Group items are easy to
      512    17500               deal with because their DADs have the correct length in them,
      513    17501               i.e., the length in a group DAD takes into account all the
      514    17502               various lengths and offsets of the items within that group
      515    17503               (be they packed, binary, alphanumeric, etc.).  The OTHER
      516    17504               item, however, may be some sort of weird numeric, say, packed,
      517    17505               and, for example, its alphanumeric length would be 2 even
      518    17506               if its DAD said 4, because the DAD was counting in half-bytes.
      519    17507               In fact, as the compiler stands now, the resulting generated
      520    17508               code for various group stuff is as follows:
      521    17509
      522    17510               GROUP vs. NUMERIC    GROUP vs. ALPHANUMERIC    GROUP vs. GROUP
      523    17511                   IFRELG                 IFRELA                   IFRELA
      524    17512               non-group length           item-1                   item-2
      525    17513                   item-1                 item-2                   item-2
      526    17514                    etc.                   etc.                     etc.
      527    17515
      528    17516               which means that we'll only get an IFRELG op-code for a group
      529    17517               vs. numeric comparison, and we'll only need that non-group
      530    17518               length if the non-group is packed.  Here's the kicker:  the
      531    17519               compiler currently disallows group vs. comp-item comparisons.
      532    17520               That means that we'll never-ever need "non-group length"
      533    17521               because it'll always be the same as the length in the
      534    17522               non-group item's DAD.  This code is left in, however, for
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:17   
      535    17523               old time's sake and just in case that type of comparison
      536    17524               is ever allowed.  JJL, C00.  */
      537    17525    1       IF QI_1.INSTR$ -> QI$OP_IFRELG.IS_SOURCE_GROUP
      538    17526    1       THEN
      539    17527    1         QI_1.OP.LEN.T = QI_1.INSTR$ -> QI$OP_IFRELG.ANTI_GROUP_LENGTH;
      540    17528    1       ELSE
      541    17529    1         QI_1.OP.LEN.S = QI_1.INSTR$ -> QI$OP_IFRELG.ANTI_GROUP_LENGTH;
      542    17530
      543    17531    1       CALL QCI$IFG;
      544    17532
      545    17533    1       REL = QI_1.INSTR$ -> QI$OP_IFRELG.RELATIONAL_ATTRIBUTE;
      546    17534
      547    17535        %EJECT;
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:18   
      548    17536    1   SO_JUMP_ALREADY:
      549    17537                                           /*
      550    17538                                           First check if the result of the
      551    17539                                           operand comparison is equal. If
      552    17540                                           not equal, then check if the first
      553    17541                                           operand is < the second. Finally,
      554    17542                                           if neither of these conditions is
      555    17543                                           met assume the first operand is
      556    17544                                           > the second.
      557    17545                                           */
      558    17546                                           /*
      559    17547                                           EQUAL - If the result is equal
      560    17548                                           and they specified equal, not
      561    17549                                           greater than, or not less than
      562    17550                                           go to next sequential instruction.
      563    17551                                           Otherwise branch around the IF.
      564    17552                                                                          */
      565    17553    1       IF QI_1.OP.COMP_RESULT = %QI#IF_EQUAL
      566    17554    1       THEN
      567    17555    2         DO;
      568    17556    2           IF REL = %QI#IF_EQUAL
      569    17557    2             OR REL = %QI#IF_NOT_GREATER
      570    17558    2             OR REL = %QI#IF_NOT_LESS
      571    17559    2           THEN
      572    17560    2             GOTO DONT_IFREL_BRANCH;
      573    17561    2           ELSE
      574    17562    2             GOTO IFREL_BRANCH;
      575    17563    2         END;
      576    17564    1       ELSE
      577    17565    2         DO;
      578    17566                                           /*
      579    17567                                           LESS THAN - If the result is less
      580    17568                                           than and they specified less than,
      581    17569                                           not greater than, or not equal to
      582    17570                                           go to the next sequential instruct-
      583    17571                                           ion.  Otherwise branch around IF.
      584    17572                                                                          */
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:19   
      585    17573    2           IF QI_1.OP.COMP_RESULT = %QI#IF_LESS
      586    17574    2           THEN
      587    17575    3             DO;
      588    17576    3               IF REL  = %QI#IF_LESS
      589    17577    3                 OR REL = %QI#IF_NOT_GREATER
      590    17578    3                 OR REL = %QI#IF_NOT_EQUAL
      591    17579    3               THEN
      592    17580    3                 GOTO DONT_IFREL_BRANCH;
      593    17581    3               ELSE
      594    17582    3                 GOTO IFREL_BRANCH;
      595    17583    3             END;
      596    17584    2           ELSE
      597    17585    3             DO;
      598    17586                                           /*
      599    17587                                           GREATER THAN - If the result is
      600    17588                                           greater than and they specified
      601    17589                                           greater than, not less than, or
      602    17590                                           not equal to go to next sequential
      603    17591                                           instruction.  Otherwise branch
      604    17592                                                                          */
      605    17593    3               IF REL  = %QI#IF_GREATER
      606    17594    3                 OR REL = %QI#IF_NOT_LESS
      607    17595    3                 OR REL = %QI#IF_NOT_EQUAL
      608    17596    3               THEN
      609    17597    3                 GOTO DONT_IFREL_BRANCH;
      610    17598    3               ELSE
      611    17599    3                 GOTO IFREL_BRANCH;
      612    17600    3             END;
      613    17601    2         END;
      614    17602
      615    17603    1   DONT_IFREL_BRANCH:
      616    17604    1       IF IFRELG = %YES
      617    17605    1       THEN
      618    17606    1         QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_IFRELG.NEXT_CODE@P );
      619    17607    1       ELSE
      620    17608    1         QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_IFRELA.NEXT_CODE@P );
      621    17609
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:20   
      622    17610    1       RETURN;
      623    17611
      624    17612    1   IFREL_BRANCH:
      625    17613    1       IF IFRELG = %YES
      626    17614    1       THEN
      627    17615              %PROC_ADDRESS ( THING@P = "QI_1.INSTR$ -> QI$OP_IFRELG.FALSE_CONDITION@P",
      628    17616                CHECK_FOR_INDIRECTION = NO,
      629    17617                RESULT$ = "QI_1.INSTR$" );
      630    17654    1       ELSE
      631    17655              %PROC_ADDRESS ( THING@P = "QI_1.INSTR$ -> QI$OP_IFRELA.FALSE_CONDITION@P",
      632    17656                CHECK_FOR_INDIRECTION = NO,
      633    17657                RESULT$ = "QI_1.INSTR$" );
      634    17694
      635    17695    1       ALTRETURN;
      636    17696
      637    17697    1   END QBI$IFS;

PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:21   
--  Include file information  --

   QI_MACROS_M.:E05TOU  is referenced.
   QI_EQUATES_E.:E05TOU  is referenced.
   QG_MACRO_M.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure QBI$IFS.

   Procedure QBI$IFS requires 796 words for executable code.
   Procedure QBI$IFS requires 22 words of local(AUTO) storage.

    No errors detected in file QBI$IFS.:E05TSI    .

PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:22   

 Object Unit name= QBI$IFS                                    File name= QBI$IFS.:E05TOU
 UTS= JUL 30 '97 04:48:27.84 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Proc  even  none   796    31C  QBI$IFS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        0  QBI$IFS
     0      7          yes     yes      Std        0  QBI$IFCLS
     0    158          yes     yes      Std        0  QBI$IFCNDA
     0    16C          yes     yes      Std        0  QBI$IFCNDN
     0    235          yes     yes      Std        0  QBI$IFRELA
     0    261          yes     yes      Std        0  QBI$IFRELN
     0    283          yes     yes      Std        0  QBI$IFRELG

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 QCS$SETUP_SOURCE
         yes           Std       0 QCS$SETUP_TARGET
         yes           Std       0 QCI$IFN
         yes           Std       0 QCI$IFA
         yes           Std       0 QCI$IFG
                       nStd      0 X6A_AUTO_0
                       nStd      0 X6A_ARET
                       nStd      0 X6A_AALT
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:23   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     QI_1                                  QI_4_CHAR_ALPHANUMERIC                QI_31_DIGIT_SLS_DISPLAY
     QI_16_BIT_BINARY                      QI_32_BIT_BINARY                      QI_31_DIGIT_ST_PACKED
     QI_PICTURE_STRING                r    G$ROS$
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:24   


        1        1        /*M* QBI$IFS:  IF class, IF condition, and IF relation.  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=0,DCI=4,CSI=2,IAD=2,DTI=2,AND,ECI=0,DIN=2,STI=2 */
        8        8
        9        9        /*D*       NAME: QBI$IFS
       10       10                PURPOSE: To provide a common module for all "B" level
       11       11                          FPL IF operations.
       12       12                ENTRIES: QBI$IFCLS, QBI$IFCNDA, QBI$IFCNDN, QBI$IFRELA,
       13       13                         QBI$IFRELG, and QBI$IFRELN.
       14       14              INTERFACE: QCS$SETUP_SOURCE, QSC$SETUP_TARGET, QCI$IFA, QCI$IFN
       15       15                                                            */
       16       16        QBI$IFS: PROC ALTRET;

     16   0 000000  D380 0000 0000  xent QBI$IFS         LNJ,B5   X6A_AUTO_0
          0 000003       0016 0000                       DC       22,0
          0 000005  0F81 0006                            B        s:16944,PREL

       17       17
       18       18          %INCLUDE LCP_6;
       19      209
       20      210          %INCLUDE QG_MACRO_M;
       21      347          %INCLUDE QI_EQUATES_E;
       22      706        %INCLUDE QI_MACROS_M;
       23     5764        %QI$ALL;
       24    16877
       25    16878    1     DCL QCS$SETUP_SOURCE ENTRY;
       26    16879    1     DCL QCS$SETUP_TARGET ENTRY;
       27    16880    1     DCL QCI$IFA ENTRY;
       28    16881    1     DCL QCI$IFN ENTRY;
       29    16882    1     DCL QCI$IFG ENTRY;
       30    16883
       31    16884    1     DCL CCB$ PTR;
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:25   
       32    16885    1     DCL STATUS_FLAG BIT(1) ALIGNED;
       33    16886    1     DCL IFCNDA BIT(1) ALIGNED;
       34    16887    1     DCL IFRELA BIT(1) ALIGNED;
       35    16888    1     DCL IFRELG BIT(1) ALIGNED;
       36    16889    1     DCL REL UBIN;
       37    16890    1     DCL CURRENT_INDEX UBIN;
       38    16891    1     DCL ENDING_INDEX UBIN;
       39    16892    1     DCL TEST_BYTE UBIN BYTE ALIGNED;
       40    16893
       41    16894          %QI@OTTER_SPACE;
       42    16922        %EJECT;
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:26   
       43    16923        /**************************************************************/
       44    16924        /*                                                            */
       45    16925        /*                       CLASS IFs                            */
       46    16926        /*                                                            */
       47    16927        /**************************************************************/
       48    16928
       49    16929    1   QBI$IFCLS: ENTRY ALTRET;

  16929   0 000007  D380 0000 0000  xent QBI$IFCLS       LNJ,B5   X6A_AUTO_0
          0 00000A       0016 0000                       DC       22,0

       50    16930                                                /**/
       51    16931        /*D*       NAME: QBI$IFCLASS
       52    16932                PURPOSE: To provide FPL with a "class" verification on items.
       53    16933              INTERFACE: None
       54    16934            DESCRIPTION: This routine checks classes of data beginning with
       55    16935                            ALPHA, then DIGITS, and finally NUMERICS (which
       56    16936                            consist of leading, trailing seperate, and over-
       57    16937                            punched signs).  The value (operand) is analyzed
       58    16938                            in a piecemeal fashion by indexing through it
       59    16939                            from start to finish.  We'll use SELECTs instead
       60    16940                            of CASEs to try to spade thangs up. */
       61    16941                                                /**/
       62    16942                                                /* SETUP the operand                  */
       63    16943                                                /**/
       64    16944    1       CALL QCS$SETUP_SOURCE;

  16944   0 00000C  CBF0 0000                            LAB,B4   0,IMO
          0 00000E  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 000011       0001                            DC       s:16952,PREL

       65    16945
       66    16946
       67    16947                                                /**/
       68    16948                                                /* First, check the alphabetic case   */
       69    16949                                                /**/
       70    16950                                           /* Get the ATOM offset of the operand.     */
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:27   
       71    16951                                                /**/
       72    16952    1       CURRENT_INDEX = QI_1.OFFSET.S;  /* Index                              */

  16952   0 000012  E800 0000 0041  xsym                 LDR,R6   QI_1+65
          0 000015  EF47 000B                            STR,R6   CURRENT_INDEX,AUTO

       73    16953                                                /**/
       74    16954                                       /* Add length to ATOM offset to get
       75    16955                                          ending index. */
       76    16956                                                /**/
       77    16957    1       ENDING_INDEX = QI_1.OP.LEN.S + QI_1.OFFSET.S; /* Index end            */

  16957   0 000017  EA00 0000 0026  xsym                 ADD,R6   QI_1+38
          0 00001A  EF47 000C                            STR,R6   ENDING_INDEX,AUTO

       78    16958                                                /**/
       79    16959                                           /* Do from start to finish of operand.     */
       80    16960                                                /**/
       81    16961    2       DO SELECT ( QI_1.INSTR$ -> QI$OP_IFCLS.ATTRIBUTE.TYPES );

  16961   0 00001C  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 00001F  D846 0002                            LDR,R5   2,B6
          0 000021  D570 000F                            AND,R5   15,IMO
          0 000023  D970 0004                            CMR,R5   4,IMO
          0 000025  0201 0008                            BL       s:16961+18,PREL
          0 000027  0901 006A                            BE       s:17010,PREL
          0 000029  5D08                                 CMV,R5   8
          0 00002A  0981 00FD                            BNE      s:17093,PREL
          0 00002C  0F81 0006                            B        s:16965,PREL
          0 00002E  5D02                                 CMV,R5   2
          0 00002F  0981 00F8                            BNE      s:17093,PREL
          0 000031  0F81 003C                            B        s:16992,PREL

       82    16962
       83    16963    2         SELECT ( %QI#IF_CLASS_ALPHA );

       84    16964                                                /**/
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:28   
       85    16965    3         DO WHILE ( CURRENT_INDEX < ENDING_INDEX );

  16965   0 000033  E947 000B                            CMR,R6   CURRENT_INDEX,AUTO
          0 000035  0381 0033                            BLE      s:16988,PREL

       86    16966                                           /* Point to operand & get (indexed) byte.  */
       87    16967    3           TEST_BYTE = QI_1.OP.DATA.S$ -> QI$UBYTE_A (CURRENT_INDEX);

  16967   0 000037  EC80 0000 0020  xsym                 LDB,B6   QI_1+32
          0 00003A  B847 000B                            LDR,R3   CURRENT_INDEX,AUTO
          0 00003C  E2B6                                 LLH,R6   ,B6,R3
          0 00003D  E7C7 000D                            STH,R6   TEST_BYTE,AUTO

       88    16968                                                /**/
       89    16969                                                /* Here, do the alphanumeric verify.  */
       90    16970                                                /**/
       91    16971    3           IF (TEST_BYTE < ASCBIN ('A') OR TEST_BYTE > ASCBIN ('Z'))

  16971   0 00003F  D2C7 000D                            LLH,R5   TEST_BYTE,AUTO
          0 000041  5D41                                 CMV,R5   65
          0 000042  0201 0004                            BL       s:16971+8,PREL
          0 000044  5D5A                                 CMV,R5   90
          0 000045  0381 001C                            BLE      s:16985,PREL
          0 000047  5D61                                 CMV,R5   97
          0 000048  0201 0004                            BL       s:16971+14,PREL
          0 00004A  5D7A                                 CMV,R5   122
          0 00004B  0381 0016                            BLE      s:16985,PREL
          0 00004D  5D20                                 CMV,R5   32
          0 00004E  0901 0013                            BE       s:16985,PREL
          0 000050  DC80 0000 0006  xsym                 LDB,B5   QI_1+6
          0 000053  82C5 0002                            LB,'0004'X        2,B5
          0 000055       0004
          0 000056  0581 0007                            BBF      s:16979,PREL
          0 000058  5D30                                 CMV,R5   48
          0 000059  0201 0004                            BL       s:16979,PREL
          0 00005B  5D39                                 CMV,R5   57
          0 00005C  0381 0005                            BLE      s:16985,PREL
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:29   

       92    16972    3             AND (TEST_BYTE < ASCBIN ('a') OR TEST_BYTE > ASCBIN ('z'))
       93    16973    3             AND (TEST_BYTE ~= ASCBIN (' '))
       94    16974    3             AND (NOT QI_1.INSTR$ -> QI$OP_IFCLS.ATTRIBUTE.TYPE.IS_NUMERIC
       95    16975    3             OR TEST_BYTE < ASCBIN ('0')
       96    16976    3             OR TEST_BYTE > ASCBIN ('9'))
       97    16977    3           THEN
       98    16978    4             DO;                       /* Test failed - not alphanumeric     */

       99    16979    4               STATUS_FLAG = %NO;

  16979   0 00005E  8747 0006                            CL       STATUS_FLAG,AUTO

      100    16980    4               GOTO CHECK_NOT_ATTRIBUTE;

  16980   0 000060  0F81 00CA                            B        s:17115,PREL

      101    16981    4             END;
      102    16982                                                /**/
      103    16983                                                /* Increment index to next operand.   */
      104    16984                                                /**/
      105    16985    3           CURRENT_INDEX = CURRENT_INDEX + 1;

  16985   0 000062  8AC7 000B                            INC      CURRENT_INDEX,AUTO

      106    16986    3         END;

  16986   0 000064  E847 000B                            LDR,R6   CURRENT_INDEX,AUTO
          0 000066  E947 000C                            CMR,R6   ENDING_INDEX,AUTO
          0 000068  024F                                 BL       s:16967,SPREL

      107    16987
      108    16988    2         STATUS_FLAG = %YES;          /* Test succeeded - its alphanumeric  */

  16988   0 000069  8947 0006                            LBT,'8000'X       STATUS_FLAG,AUTO
  16988   0 00006B       8000

PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:30   
      109    16989    2         GOTO CHECK_NOT_ATTRIBUTE;

  16989   0 00006C  0F81 00BE                            B        s:17115,PREL

      110    16990
      111    16991    2         SELECT ( %QI#IF_CLASS_DIGITS );

      112    16992    3         DO WHILE ( CURRENT_INDEX <= ENDING_INDEX );

  16992   0 00006E  E947 000B                            CMR,R6   CURRENT_INDEX,AUTO
          0 000070  0201 001C                            BL       s:17003,PREL

      113    16993    3           TEST_BYTE = QI_1.OP.DATA.S$ -> QI$UBYTE_A (CURRENT_INDEX);

  16993   0 000072  EC80 0000 0020  xsym                 LDB,B6   QI_1+32
          0 000075  B847 000B                            LDR,R3   CURRENT_INDEX,AUTO
          0 000077  E2B6                                 LLH,R6   ,B6,R3
          0 000078  E7C7 000D                            STH,R6   TEST_BYTE,AUTO

      114    16994    3           IF TEST_BYTE < ASCBIN ('0') OR TEST_BYTE > ASCBIN ('9')

  16994   0 00007A  D2C7 000D                            LLH,R5   TEST_BYTE,AUTO
          0 00007C  5D30                                 CMV,R5   48
          0 00007D  0201 0004                            BL       s:16997,PREL
          0 00007F  5D39                                 CMV,R5   57
          0 000080  0381 0005                            BLE      s:17000,PREL

      115    16995    3           THEN
      116    16996    4             DO;                       /* Not digits - test failed           */

      117    16997    4               STATUS_FLAG = %NO;

  16997   0 000082  8747 0006                            CL       STATUS_FLAG,AUTO

      118    16998    4               GOTO CHECK_NOT_ATTRIBUTE;

  16998   0 000084  0F81 00A6                            B        s:17115,PREL
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:31   

      119    16999    4             END;
      120    17000    3           CURRENT_INDEX = CURRENT_INDEX + 1; /* Set index for the next byte. */

  17000   0 000086  8AC7 000B                            INC      CURRENT_INDEX,AUTO

      121    17001    3         END;

  17001   0 000088  E847 000B                            LDR,R6   CURRENT_INDEX,AUTO
          0 00008A  E947 000C                            CMR,R6   ENDING_INDEX,AUTO
          0 00008C  03E6                                 BLE      s:16993,SPREL

      122    17002
      123    17003    2         STATUS_FLAG = %YES;          /* It's digits - test succeeded       */

  17003   0 00008D  8947 0006                            LBT,'8000'X       STATUS_FLAG,AUTO
  17003   0 00008F       8000

      124    17004    2         GOTO CHECK_NOT_ATTRIBUTE;

  17004   0 000090  0F81 009A                            B        s:17115,PREL

      125    17005
      126    17006    2         SELECT ( %QI#IF_CLASS_NUMERIC );

      127    17007                                                /**/
      128    17008                                                /* -1 for the sign                    */
      129    17009                                                /**/
      130    17010    2         ENDING_INDEX = ENDING_INDEX - 1; /* Index end                      */

  17010   0 000092  88C7 000C                            DEC      ENDING_INDEX,AUTO

      131    17011                                                /* Is it unpacked decimal             */
      132    17012    2         IF QI_1.TYPE.S = %QI#TYPE_DISPLAY

  17012   0 000094  E800 0000 0050  xsym                 LDR,R6   QI_1+80
          0 000097  6981 006F                            BNEZ,R6  s:17079,PREL
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:32   

      133    17013    2         THEN
      134    17014    3           DO;

      135    17015                                                /**/
      136    17016                                   /* DISPLAY - If type is display and
      137    17017                                      value has a leading sign, make sure
      138    17018                                      it's either a '+' or a '-'.  If
      139    17019                                      so, increment index to first number;
      140    17020                                      if not, it's not numeric. */
      141    17021                                                /**/
      142    17022    4             DO SELECT ( QI_1.OP.CIP.S.CD.SIGN );

  17022   0 000099  C800 0000 001A  xsym                 LDR,R4   QI_1+26
          0 00009C  404D                                 SOR,R4   13
          0 00009D  C570 0003                            AND,R4   3,IMO
          0 00009F  C970 0002                            CMR,R4   2,IMO
          0 0000A1  0201 0008                            BL       s:17022+17,PREL
          0 0000A3  0901 000B                            BE       s:17025,PREL
          0 0000A5  4D03                                 CMV,R4   3
          0 0000A6  0981 0060                            BNE      s:17079,PREL
          0 0000A8  0F81 001E                            B        s:17044,PREL
          0 0000AA  4D01                                 CMV,R4   1
          0 0000AB  0981 005B                            BNE      s:17079,PREL
          0 0000AD  0F81 0031                            B        s:17060,PREL

      143    17023
      144    17024    4               SELECT ( %QI#CD_SIGN_LEADING_SEPARATE );

      145    17025    4               TEST_BYTE = QI_1.OP.DATA.S$ -> QI$UBYTE_A (CURRENT_INDEX);

  17025   0 0000AF  DC80 0000 0020  xsym                 LDB,B5   QI_1+32
          0 0000B2  B847 000B                            LDR,R3   CURRENT_INDEX,AUTO
          0 0000B4  A2B5                                 LLH,R2   ,B5,R3
          0 0000B5  A7C7 000D                            STH,R2   TEST_BYTE,AUTO

      146    17026    4               IF TEST_BYTE ~= ASCBIN ('+') AND TEST_BYTE ~= ASCBIN ('-')
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:33   

  17026   0 0000B7  92C7 000D                            LLH,R1   TEST_BYTE,AUTO
          0 0000B9  1D2B                                 CMV,R1   43
          0 0000BA  0901 0008                            BE       s:17032,PREL
          0 0000BC  1D2D                                 CMV,R1   45
          0 0000BD  0901 0005                            BE       s:17032,PREL

      147    17027    4               THEN
      148    17028    5                 DO;                   /* Test failed - not numeric          */

      149    17029    5                   STATUS_FLAG = %NO;

  17029   0 0000BF  8747 0006                            CL       STATUS_FLAG,AUTO

      150    17030    5                   GOTO CHECK_NOT_ATTRIBUTE;

  17030   0 0000C1  0F81 0069                            B        s:17115,PREL

      151    17031    5                 END;
      152    17032    4               CURRENT_INDEX = CURRENT_INDEX + 1; /* increment index to next byte. */

  17032   0 0000C3  8AC7 000B                            INC      CURRENT_INDEX,AUTO
          0 0000C5  0F81 0041                            B        s:17079,PREL

      153    17033
      154    17034    4               SELECT ( %QI#CD_SIGN_TRAILING_SEPARATE );

      155    17035                                                /**/
      156    17036                               /* Trailing Seperate - If not a leading
      157    17037                                  sign, lets check trailing seperate.
      158    17038                                  First, get the last nibble and see
      159    17039                                  if it's a '+' or a '-'.  If not,
      160    17040                                  test fails (it's not numeric).  If
      161    17041                                  test succeeds, decrement ending
      162    17042                                  index to NOT include the sign. */
      163    17043                                                /**/
      164    17044    4               TEST_BYTE = QI_1.OP.DATA.S$ -> QI$UBYTE_A (ENDING_INDEX);
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:34   

  17044   0 0000C7  DC80 0000 0020  xsym                 LDB,B5   QI_1+32
          0 0000CA  B847 000C                            LDR,R3   ENDING_INDEX,AUTO
          0 0000CC  A2B5                                 LLH,R2   ,B5,R3
          0 0000CD  A7C7 000D                            STH,R2   TEST_BYTE,AUTO

      165    17045    4               IF TEST_BYTE ~= ASCBIN ('+') AND TEST_BYTE ~= ASCBIN ('-')

  17045   0 0000CF  92C7 000D                            LLH,R1   TEST_BYTE,AUTO
          0 0000D1  1D2B                                 CMV,R1   43
          0 0000D2  0901 0008                            BE       s:17051,PREL
          0 0000D4  1D2D                                 CMV,R1   45
          0 0000D5  0901 0005                            BE       s:17051,PREL

      166    17046    4               THEN
      167    17047    5                 DO;                   /* Test failed - not numeric          */

      168    17048    5                   STATUS_FLAG = %NO;

  17048   0 0000D7  8747 0006                            CL       STATUS_FLAG,AUTO

      169    17049    5                   GOTO CHECK_NOT_ATTRIBUTE;

  17049   0 0000D9  0F81 0051                            B        s:17115,PREL

      170    17050    5                 END;
      171    17051    4               ENDING_INDEX = ENDING_INDEX - 1; /* Success - decr. end (sign) */

  17051   0 0000DB  88C7 000C                            DEC      ENDING_INDEX,AUTO
          0 0000DD  0F81 0029                            B        s:17079,PREL

      172    17052
      173    17053    4               SELECT ( %QI#CD_SIGN_TRAILING_OVER );

      174    17054                                                /**/
      175    17055                         /* Overpunched - Check legal overpunches.
      176    17056                            When we find one decrement ending
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:35   
      177    17057                            index so the remainder of the number
      178    17058                            can be ckecked. */
      179    17059                                                /**/
      180    17060    4               TEST_BYTE = QI_1.OP.DATA.S$ -> QI$UBYTE_A (ENDING_INDEX);

  17060   0 0000DF  DC80 0000 0020  xsym                 LDB,B5   QI_1+32
          0 0000E2  B847 000C                            LDR,R3   ENDING_INDEX,AUTO
          0 0000E4  A2B5                                 LLH,R2   ,B5,R3
          0 0000E5  A7C7 000D                            STH,R2   TEST_BYTE,AUTO

      181    17061    4               IF TEST_BYTE ~= %BITBIN ('7B'X) AND TEST_BYTE ~= %BITBIN ('7D'X)

  17061   0 0000E7  92C7 000D                            LLH,R1   TEST_BYTE,AUTO
          0 0000E9  1D7B                                 CMV,R1   123
          0 0000EA  0901 001A                            BE       s:17070,PREL
          0 0000EC  1D7D                                 CMV,R1   125
          0 0000ED  0901 0017                            BE       s:17070,PREL
          0 0000EF  1D41                                 CMV,R1   65
          0 0000F0  0201 0004                            BL       s:17061+14,PREL
          0 0000F2  1D49                                 CMV,R1   73
          0 0000F3  0381 0011                            BLE      s:17070,PREL
          0 0000F5  1D30                                 CMV,R1   48
          0 0000F6  0201 0004                            BL       s:17061+20,PREL
          0 0000F8  1D39                                 CMV,R1   57
          0 0000F9  0381 000B                            BLE      s:17070,PREL
          0 0000FB  1D4A                                 CMV,R1   74
          0 0000FC  0201 0004                            BL       s:17067,PREL
          0 0000FE  1D52                                 CMV,R1   82
          0 0000FF  0381 0005                            BLE      s:17070,PREL

      182    17062    4                 AND (TEST_BYTE < ASCBIN ('A') OR TEST_BYTE > ASCBIN ('I'))
      183    17063    4                 AND (TEST_BYTE < ASCBIN ('0') OR TEST_BYTE > ASCBIN ('9'))
      184    17064    4                 AND (TEST_BYTE < ASCBIN ('J') OR TEST_BYTE > ASCBIN ('R'))
      185    17065    4               THEN
      186    17066    5                 DO;                   /* Test failed - not numeric          */

      187    17067    5                   STATUS_FLAG = %NO;
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:36   

  17067   0 000101  8747 0006                            CL       STATUS_FLAG,AUTO

      188    17068    5                   GOTO CHECK_NOT_ATTRIBUTE;

  17068   0 000103  0F81 0027                            B        s:17115,PREL

      189    17069    5                 END;
      190    17070    4               ENDING_INDEX = ENDING_INDEX - 1; /* Decr. end (sign)         */

  17070   0 000105  88C7 000C                            DEC      ENDING_INDEX,AUTO

      191    17071
      192    17072    4             END;                     /* do select QI_1.OP.CIP.S.CD.SIGN    */

      193    17073    3           END;                      /* END %TYPE_DISPLAY#                 */

      194    17074                                                /**/
      195    17075                                   /* Now that we have removed the sign,
      196    17076                                      loop on remainder of the numeric
      197    17077                                      value. */
      198    17078                                                /**/
      199    17079    3         DO WHILE ( CURRENT_INDEX <= ENDING_INDEX );

  17079   0 000107  C847 000B                            LDR,R4   CURRENT_INDEX,AUTO
          0 000109  C947 000C                            CMR,R4   ENDING_INDEX,AUTO
          0 00010B  0301 001C                            BG       s:17093,PREL

      200    17080    3           TEST_BYTE = QI_1.OP.DATA.S$ -> QI$UBYTE_A (CURRENT_INDEX);

  17080   0 00010D  EC80 0000 0020  xsym                 LDB,B6   QI_1+32
          0 000110  B847 000B                            LDR,R3   CURRENT_INDEX,AUTO
          0 000112  E2B6                                 LLH,R6   ,B6,R3
          0 000113  E7C7 000D                            STH,R6   TEST_BYTE,AUTO

      201    17081    3           IF TEST_BYTE < ASCBIN ('0') OR TEST_BYTE > ASCBIN ('9')

PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:37   
  17081   0 000115  D2C7 000D                            LLH,R5   TEST_BYTE,AUTO
          0 000117  5D30                                 CMV,R5   48
          0 000118  0201 0004                            BL       s:17084,PREL
          0 00011A  5D39                                 CMV,R5   57
          0 00011B  0381 0005                            BLE      s:17087,PREL

      202    17082    3           THEN
      203    17083    4             DO;                       /* Not numeric                        */

      204    17084    4               STATUS_FLAG = %NO;

  17084   0 00011D  8747 0006                            CL       STATUS_FLAG,AUTO

      205    17085    4               GOTO CHECK_NOT_ATTRIBUTE;

  17085   0 00011F  0F81 000B                            B        s:17115,PREL

      206    17086    4             END;
      207    17087    3           CURRENT_INDEX = CURRENT_INDEX + 1;

  17087   0 000121  8AC7 000B                            INC      CURRENT_INDEX,AUTO

      208    17088    3         END;            /* END Do until CURRENT_INDEX > ENDING_INDEX    */

  17088   0 000123  E847 000B                            LDR,R6   CURRENT_INDEX,AUTO
          0 000125  E947 000C                            CMR,R6   ENDING_INDEX,AUTO
          0 000127  03E6                                 BLE      s:17080,SPREL

      209    17089
      210    17090    2       END;                           /* do select ATTRIBUTE.TYPE           */

      211    17091
      212    17092
      213    17093    1       STATUS_FLAG = %YES;

  17093   0 000128  8947 0006                            LBT,'8000'X       STATUS_FLAG,AUTO
  17093   0 00012A       8000
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:38   

      214    17094                                                /**/
      215    17095                                       /* Here we check the "NOT" clause on
      216    17096                                          the current statement:
      217    17097                                          1) If the comparison fails (STATUS_
      218    17098                                             FLAG = %NO) and "NOT" was specified
      219    17099                                             in source, we have a negated false
      220    17100                                             condition - go to succeed.
      221    17101                                          2) If the comparison fails and "NOT"
      222    17102                                             wasn't specified in source, we
      223    17103                                             have a true failure - go to fail.
      224    17104                                          3) If the comparison succeeds
      225    17105                                             (STATUS_FLAG = %YES) and "NOT" was
      226    17106                                             specified in source, we have a
      227    17107                                             negated true condition - go to
      228    17108                                             fail.
      229    17109                                          4) If the comparison succeeds and
      230    17110                                             "NOT" wasn't specified in source
      231    17111                                             then we have a true success -
      232    17112                                             go to succeed. */
      233    17113                                                /**/
      234    17114    1   CHECK_NOT_ATTRIBUTE:
      235    17115    1       IF STATUS_FLAG = %NO

  17115   0 00012B  89C7 0006            CHECK_NOT_ATTRI*CMZ      STATUS_FLAG,AUTO
          0 00012D  0801 000B                            BAL      s:17126,PREL

      236    17116    1       THEN
      237    17117    2         DO;                             /* Test failed                        */

      238    17118    2           IF QI_1.INSTR$ -> QI$OP_IFCLS.ATTRIBUTE.IS_NOT

  17118   0 00012F  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 000132  82C6 0002                            LB,'0010'X        2,B6
          0 000134       0010
          0 000135  0501 000D                            BBT      s:17134,PREL

PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:39   
      239    17119    2           THEN
      240    17120    2             GOTO SUCCEED;
      241    17121    2           ELSE
      242    17122    2             GOTO FAIL;

  17122   0 000137  0F81 0013                            B        s:17157,PREL

      243    17123    2         END;
      244    17124    1       ELSE
      245    17125    2         DO;                             /* Test succeeded                     */

      246    17126    2           IF QI_1.INSTR$ -> QI$OP_IFCLS.ATTRIBUTE.IS_NOT

  17126   0 000139  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 00013C  82C6 0002                            LB,'0010'X        2,B6
          0 00013E       0010
          0 00013F  0501 000B                            BBT      s:17157,PREL

      247    17127    2           THEN
      248    17128    2             GOTO FAIL;
      249    17129    2           ELSE
      250    17130    2             GOTO SUCCEED;

  17130   0 000141  0F81 0001                            B        s:17134,PREL

      251    17131    2         END;
      252    17132
      253    17133    1   SUCCEED:
      254    17134    1       QI_1.INSTR$ = ADDR (QI_1.INSTR$ -> QI$OP_IFCLS.NEXT_CODE@P);

  17134   0 000143  DBC6 0004            SUCCEED         LAB,B5   4,B6
          0 000145  DF80 0000 0006  xsym                 STB,B5   QI_1+6

      255    17135    1       RETURN;

  17135   0 000148  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:40   
      256    17136
      257    17137    1   FAIL:
      258    17138            %PROC_ADDRESS ( THING@P = "QI_1.INSTR$ -> QI$OP_IFCLS.FALSE_CONDITION@P",
      259    17139            CHECK_FOR_INDIRECTION = NO,
      260    17140            RESULT$ = "QI_1.INSTR$" );

  17157   0                              FAIL            null
  17158   0 00014B  B846 0003            FAIL            LDR,R3   3,B6
          0 00014D  F853                                 LDR,R7   R3
          0 00014E  6C00                                 LDV,R6   0
          0 00014F  8400 0000 0002  xsym                 AID      QI_1+2
          0 000152  8D00 0000 0006  xsym                 SDI      QI_1+6

      261    17177    1       ALTRETURN;

  17177   0 000155  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      262    17178        %EJECT;
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:41   
      263    17179        /**************************************************************/
      264    17180        /*                                                            */
      265    17181        /*                    CONDITIONAL IFs                         */
      266    17182        /*                                                            */
      267    17183        /**************************************************************/
      268    17184
      269    17185
      270    17186        /*D*    ENTRIES: QBI$IFCNDA & QBI$IFCNDN
      271    17187                PURPOSE: To provide a runtime conditional alpha and
      272    17188                          conditional numeric statements.
      273    17189              INTERFACE: QCS$SETUP_SOURCE, QDS$SETUP_TARGET, QCI$IFA, QCI$IFN
      274    17190            DESCRIPTION: This entry does a conditional branch depending on
      275    17191                          whether or not an (alpha)numeric value is within a
      276    17192                          range or among a list of elements.  The branch is
      277    17193                          executed if one of these conditions is satisfied,
      278    17194                          otherwise control transfers to the next sequential
      279    17195                          instruction.  If the "through" bit is set, the range
      280    17196                          comparison is done; if not, the list comparison is
      281    17197                          is done.  The "through" bit resides in the Cond-
      282    17198                          itional Control Block (which also contains the num
      283    17199                          of list items, and the DADs to each of these items).
      284    17200          CODE SEQUENCE: Addr of DAD, Addr of CCB, NOT, False addr
      285    17201        CONDITION BLOCK: Bit for through + Num of items, Addrs to DADs of
      286    17202                         items.
      287    17203                                                          */
      288    17204
      289    17205
      290    17206        /************** IF CONDITIONAL ALPHANUMERIC *******************/
      291    17207
      292    17208    1   QBI$IFCNDA: ENTRY ALTRET;               /* If conditional alpha               */

  17208   0 000158  D380 0000 0000  xent QBI$IFCNDA      LNJ,B5   X6A_AUTO_0
          0 00015B       0016 0000                       DC       22,0

      293    17209
      294    17210    1       IFCNDA = %YES;

PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:42   
  17210   0 00015D  8947 0007                            LBT,'8000'X       IFCNDA,AUTO
  17210   0 00015F       8000

      295    17211
      296    17212            /*  QCI$IFA may decide to call QCU$UNSIGN later, so
      297    17213                we'll tell it where to stick any unsigned stuff.  */
      298    17214    1       QI_1.OTTER_SPACE.S$ = ADDR ( QI@OTTER_SPACE );

  17214   0 000160  EBC7 000E                            LAB,B6   QI@OTTER_SPACE,AUTO
          0 000162  EF80 0000 0044  xsym                 STB,B6   QI_1+68

      299    17215    1       QI_1.OTTER_SPACE.T$ = ADDR ( QI@OTTER_SPACE );

  17215   0 000165  DBC7 000E                            LAB,B5   QI@OTTER_SPACE,AUTO
          0 000167  DF80 0000 0046  xsym                 STB,B5   QI_1+70

      300    17216
      301    17217    1       GOTO IF_CONDITIONAL_COMMON;

  17217   0 00016A  0F81 0008                            B        s:17231,PREL

      302    17218
      303    17219        /**************** IF CONDITIONAL NUMERIC **********************/
      304    17220
      305    17221    1   QBI$IFCNDN: ENTRY ALTRET;               /* If conditional numeric             */

  17221   0 00016C  D380 0000 0000  xent QBI$IFCNDN      LNJ,B5   X6A_AUTO_0
          0 00016F       0016 0000                       DC       22,0

      306    17222
      307    17223    1       IFCNDA = %NO;

  17223   0 000171  8747 0007                            CL       IFCNDA,AUTO

      308    17224
      309    17225                                           /* Common point for both alpha-
      310    17226                                              numeric & numeric conditional
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:43   
      311    17227                                              IFs */
      312    17228
      313    17229    1   IF_CONDITIONAL_COMMON:
      314    17230
      315    17231    1       CALL QCS$SETUP_SOURCE;

  17231   0 000173  CBF0 0000            IF_CONDITIONAL_*LAB,B4   0,IMO
          0 000175  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 000178       0001                            DC       s:17258,PREL

      316    17232
      317    17233                                           /*
      318    17234                                          Get the address of the conditional
      319    17235                                          control block (the block of settings
      320    17236                                          describing this "IF").
      321    17237                                                          */
      322    17238            %PROC_ADDRESS ( THING@P =
             17238                "QI_1.INSTR$ -> QI$OP_IFCNDA.CONDITION_CONTROL_BLOCK@P",
      323    17239            CHECK_FOR_INDIRECTION = NO,
      324    17240            RESULT$ = CCB$ );

  17258   0 000179  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 00017C  B846 0002                            LDR,R3   2,B6
          0 00017E  F853                                 LDR,R7   R3
          0 00017F  6C00                                 LDV,R6   0
          0 000180  8400 0000 0002  xsym                 AID      QI_1+2
          0 000183  8D47 0004                            SDI      CCB$,AUTO

      325    17277
      326    17278                                           /*
      327    17279                                          Check if the "through" bit is set.
      328    17280                                          This means we are to check between
      329    17281                                          two values.
      330    17282                                                          */
      331    17283    1       IF CCB$ -> QI$CONDITION_CONTROL_BLOCK.WORD0_FLAGS.IS_THROUGH

  17283   0 000185  DCC7 0004                            LDB,B5   CCB$,AUTO
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:44   
          0 000187  8985                                 CMZ      ,B5
          0 000188  0881 004A                            BAGE     s:17332,PREL

      332    17284    1       THEN
      333    17285    2         DO;

      334    17286                                           /*
      335    17287                                          The CCB contains a through bit, the
      336    17288                                          number of items, and DADs which
      337    17289                                          reference these items.  Point to
      338    17290                                          the first addr of the DAD refer-
      339    17291                                          encing the first item.
      340    17292                                                           */
      341    17293    2           QI_1.SOURCE$ = ADDR ( CCB$ -> QI$CONDITION_CONTROL_BLOCK.RANGE_A@P (0) );

  17293   0 00018A  CBC5 0001                            LAB,B4   1,B5
          0 00018C  CF80 0000 0018  xsym                 STB,B4   QI_1+24

      342    17294                                           /*
      343    17295                                          SETUP the lower bound.  If its
      344    17296                                          >= to the lower bound, then SETUP
      345    17297                                          the upper bound.  If its <= to
      346    17298                                          the upper bound, we have satisfied
      347    17299                                          the condition.
      348    17300                                                          */
      349    17301    2           CALL QCS$SETUP_TARGET;

  17301   0 00018F  CBF0 0000                            LAB,B4   0,IMO
          0 000191  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
          0 000194       0001                            DC       s:17302,PREL

      350    17302    2           IF IFCNDA = %YES

  17302   0 000195  89C7 0007                            CMZ      IFCNDA,AUTO
          0 000197  0881 0009                            BAGE     s:17306,PREL

      351    17303    2           THEN
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:45   
      352    17304    2             CALL QCI$IFA;

  17304   0 000199  CBF0 0000                            LAB,B4   0,IMO
          0 00019B  E380 0000 0000  xent                 LNJ,B6   QCI$IFA
          0 00019E       0001                            DC       s:17304+6,PREL
          0 00019F  0F81 0007                            B        s:17307,PREL

      353    17305    2           ELSE
      354    17306    2             CALL QCI$IFN;

  17306   0 0001A1  CBF0 0000                            LAB,B4   0,IMO
          0 0001A3  E380 0000 0000  xent                 LNJ,B6   QCI$IFN
          0 0001A6       0001                            DC       s:17307,PREL

      355    17307    2           IF QI_1.OP.COMP_RESULT ~= %QI#IF_LESS

  17307   0 0001A7  E800 0000 0031  xsym                 LDR,R6   QI_1+49
          0 0001AA  6D01                                 CMV,R6   1
          0 0001AB  0901 0023                            BE       s:17324,PREL

      356    17308    2           THEN
      357    17309    3             DO;

      358    17310    3               CALL QCS$SETUP_TARGET;

  17310   0 0001AD  CBF0 0000                            LAB,B4   0,IMO
          0 0001AF  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
          0 0001B2       0001                            DC       s:17311,PREL

      359    17311    3               IF IFCNDA = %YES

  17311   0 0001B3  89C7 0007                            CMZ      IFCNDA,AUTO
          0 0001B5  0881 0009                            BAGE     s:17315,PREL

      360    17312    3               THEN
      361    17313    3                 CALL QCI$IFA;

PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:46   
  17313   0 0001B7  CBF0 0000                            LAB,B4   0,IMO
          0 0001B9  E380 0000 0000  xent                 LNJ,B6   QCI$IFA
          0 0001BC       0001                            DC       s:17313+6,PREL
          0 0001BD  0F81 0007                            B        s:17317,PREL

      362    17314    3               ELSE
      363    17315    3                 CALL QCI$IFN;

  17315   0 0001BF  CBF0 0000                            LAB,B4   0,IMO
          0 0001C1  E380 0000 0000  xent                 LNJ,B6   QCI$IFN
          0 0001C4       0001                            DC       s:17317,PREL

      364    17316
      365    17317    3               IF QI_1.OP.COMP_RESULT ~= %QI#IF_GREATER

  17317   0 0001C5  E800 0000 0031  xsym                 LDR,R6   QI_1+49
          0 0001C8  6901 0006                            BEZ,R6   s:17324,PREL

      366    17318    3               THEN
      367    17319    4                 DO;

      368    17320    4                   STATUS_FLAG = %YES;    /* TRUE (value is in the range)       */

  17320   0 0001CA  8947 0006                            LBT,'8000'X       STATUS_FLAG,AUTO
  17320   0 0001CC       8000

      369    17321    4                   GOTO CHECK_THE_NOT_ATTRIBUTE;

  17321   0 0001CD  0F81 003A                            B        s:17355,PREL

      370    17322    4                 END;
      371    17323    3             END;
      372    17324    2           STATUS_FLAG = %NO;           /* FALSE (value out of range)         */

  17324   0 0001CF  8747 0006                            CL       STATUS_FLAG,AUTO

      373    17325    2           GOTO CHECK_THE_NOT_ATTRIBUTE;
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:47   

  17325   0 0001D1  0F81 0036                            B        s:17355,PREL

      374    17326    2         END;
      375    17327
      376    17328                                           /*
      377    17329                                          The through bit (range check) isn't
      378    17330                                          set, so it must be a list check.
      379    17331                                                          */
      380    17332    1       QI_1.SOURCE$ = ADDR ( CCB$ -> QI$CONDITION_CONTROL_BLOCK.LIST_A@P (0) );

  17332   0 0001D3  CBC5 0001                            LAB,B4   1,B5
          0 0001D5  CF80 0000 0018  xsym                 STB,B4   QI_1+24

      381    17333
      382    17334    1       DO CURRENT_INDEX = CCB$ -> QI$CONDITION_CONTROL_BLOCK.LIST_LENGTH
      383    17335    2         DOWNTO 1

  17335   0 0001D8  D805                                 LDR,R5   ,B5
          0 0001D9  DF47 000B                            STR,R5   CURRENT_INDEX,AUTO
          0 0001DB  0F81 0026                            B        s:17350+2,PREL

      384    17336    2         BY -1;
      385    17337    2         CALL QCS$SETUP_TARGET;

  17337   0 0001DD  CBF0 0000                            LAB,B4   0,IMO
          0 0001DF  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
          0 0001E2       0001                            DC       s:17338,PREL

      386    17338    2         IF IFCNDA = %YES

  17338   0 0001E3  89C7 0007                            CMZ      IFCNDA,AUTO
          0 0001E5  0881 0009                            BAGE     s:17342,PREL

      387    17339    2         THEN
      388    17340    2           CALL QCI$IFA;

PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:48   
  17340   0 0001E7  CBF0 0000                            LAB,B4   0,IMO
          0 0001E9  E380 0000 0000  xent                 LNJ,B6   QCI$IFA
          0 0001EC       0001                            DC       s:17340+6,PREL
          0 0001ED  0F81 0007                            B        s:17344,PREL

      389    17341    2         ELSE
      390    17342    2           CALL QCI$IFN;

  17342   0 0001EF  CBF0 0000                            LAB,B4   0,IMO
          0 0001F1  E380 0000 0000  xent                 LNJ,B6   QCI$IFN
          0 0001F4       0001                            DC       s:17344,PREL

      391    17343
      392    17344    2         IF QI_1.OP.COMP_RESULT = %QI#IF_EQUAL /* Found a match?            */

  17344   0 0001F5  E800 0000 0031  xsym                 LDR,R6   QI_1+49
          0 0001F8  6D02                                 CMV,R6   2
          0 0001F9  0981 0006                            BNE      s:17350,PREL

      393    17345    2         THEN
      394    17346    3           DO;

      395    17347    3             STATUS_FLAG = %YES;       /* TRUE (element in list)             */

  17347   0 0001FB  8947 0006                            LBT,'8000'X       STATUS_FLAG,AUTO
  17347   0 0001FD       8000

      396    17348    3             GOTO CHECK_THE_NOT_ATTRIBUTE;

  17348   0 0001FE  0F81 0009                            B        s:17355,PREL

      397    17349    3           END;
      398    17350    2       END;

  17350   0 000200  88C7 000B                            DEC      CURRENT_INDEX,AUTO
          0 000202  E847 000B                            LDR,R6   CURRENT_INDEX,AUTO
          0 000204  6D01                                 CMV,R6   1
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:49   
          0 000205  02D8                                 BGE      s:17337,SPREL

      399    17351
      400    17352    1       STATUS_FLAG = %NO;              /* FALSE (element not in list)        */

  17352   0 000206  8747 0006                            CL       STATUS_FLAG,AUTO

      401    17353
      402    17354    1   CHECK_THE_NOT_ATTRIBUTE:
      403    17355    1       IF STATUS_FLAG = %YES           /* TRUE condition                     */

  17355   0 000208  89C7 0006            CHECK_THE_NOT_A*CMZ      STATUS_FLAG,AUTO
          0 00020A  0881 000B                            BAGE     s:17366,PREL

      404    17356    1       THEN
      405    17357    2         DO;

      406    17358    2           IF QI_1.INSTR$ -> QI$OP_IFCNDA.ATTRIBUTE.IS_NOT

  17358   0 00020C  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 00020F  82C6 0003                            LB,'0010'X        3,B6
          0 000211       0010
          0 000212  0501 000D                            BBT      s:17393,PREL

      407    17359    2           THEN
      408    17360    2             GOTO IFCND_BRANCH;
      409    17361    2           ELSE
      410    17362    2             GOTO DONT_IFCND_BRANCH;

  17362   0 000214  0F81 0018                            B        s:17419,PREL

      411    17363    2         END;
      412    17364    1       ELSE                            /* FALSE condition                    */
      413    17365    2         DO;

      414    17366    2           IF QI_1.INSTR$ -> QI$OP_IFCNDA.ATTRIBUTE.IS_NOT

PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:50   
  17366   0 000216  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 000219  82C6 0003                            LB,'0010'X        3,B6
          0 00021B       0010
          0 00021C  0501 0010                            BBT      s:17419,PREL

      415    17367    2           THEN
      416    17368    2             GOTO DONT_IFCND_BRANCH;
      417    17369    2           ELSE
      418    17370    2             GOTO IFCND_BRANCH;

  17370   0 00021E  0F81 0001                            B        s:17393,PREL

      419    17371    2         END;
      420    17372
      421    17373    1   IFCND_BRANCH:
      422    17374            %PROC_ADDRESS ( THING@P = "QI_1.INSTR$ -> QI$OP_IFCNDA.FALSE_CONDITION@P",
      423    17375            CHECK_FOR_INDIRECTION = NO,
      424    17376            RESULT$ = "QI_1.INSTR$" );

  17393   0                              IFCND_BRANCH    null
  17394   0 000220  B846 0004            IFCND_BRANCH    LDR,R3   4,B6
          0 000222  F853                                 LDR,R7   R3
          0 000223  6C00                                 LDV,R6   0
          0 000224  8400 0000 0002  xsym                 AID      QI_1+2
          0 000227  8D00 0000 0006  xsym                 SDI      QI_1+6

      425    17413    1       ALTRETURN;

  17413   0 00022A  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      426    17414
      427    17415    1   DONT_IFCND_BRANCH:
      428    17416                                           /*
      429    17417                                              Point to next instruction
      430    17418                                                          */
      431    17419    1       QI_1.INSTR$ = ADDR (QI_1.INSTR$ -> QI$OP_IFCNDA.NEXT_CODE@P);

PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:51   
  17419   0 00022D  DBC6 0005            DONT_IFCND_BRAN*LAB,B5   5,B6
          0 00022F  DF80 0000 0006  xsym                 STB,B5   QI_1+6

      432    17420    1       RETURN;

  17420   0 000232  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      433    17421
      434    17422        %EJECT;
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:52   
      435    17423        /**************************************************************/
      436    17424        /*                                                            */
      437    17425        /*                    RELATIONAL IFs                          */
      438    17426        /*                                                            */
      439    17427        /**************************************************************/
      440    17428
      441    17429
      442    17430        /*D*    ENTRIES: QBI$IFRELA, QBI$IFRELN, & QBI$IFRELG
      443    17431                PURPOSE: To provide relational alphanumeric and numeric
      444    17432                           comparisons.
      445    17433              INTERFACE: QCS$SETUP_SOURCE, QCS$SETUP_TARGET, QCI$IFA, QCI$IFN
      446    17434            DESCRIPTION: This module does relational tests on two operands,
      447    17435                           to determine if the statements immediately fol-
      448    17436                           lowing the IF condition should be executed or
      449    17437                           bypassed.  After the relationship between
      450    17438                           the two operands is discovered, we must find out
      451    17439                           what kind of procedure statement was specified so
      452    17440                           that a final decision on where to branch can be
      453    17441                           made.  The following hex values are used to find
      454    17442                           out what kind of procedure statement was specified.
      455    17443                           If the first number of the field is "1" then NOT
      456    17444                           was specified. For the second number - 0 means
      457    17445                           greater, 1 means less, and 2 means equal to. For
      458    17446                           example, '10'X which is a binary 16, is not greaterrr20
      459    17447                           than, and '0012'X, which is binary 18, is not equal
      460    17448                           to.
      461    17449                                                          */
      462    17450
      463    17451        %EJECT;
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:53   
      464    17452        /************** IF RELATIONAL ALPHANUMERIC ********************/
      465    17453
      466    17454    1   QBI$IFRELA: ENTRY ALTRET;

  17454   0 000235  D380 0000 0000  xent QBI$IFRELA      LNJ,B5   X6A_AUTO_0
          0 000238       0016 0000                       DC       22,0

      467    17455
      468    17456    1       IFRELG = %NO;

  17456   0 00023A  8747 0009                            CL       IFRELG,AUTO

      469    17457
      470    17458            /*  QCI$IFA may decide to call QCU$UNSIGN later, so
      471    17459                we'll tell it where to stick any unsigned stuff.  */
      472    17460    1       QI_1.OTTER_SPACE.S$ = ADDR ( QI@OTTER_SPACE );

  17460   0 00023C  EBC7 000E                            LAB,B6   QI@OTTER_SPACE,AUTO
          0 00023E  EF80 0000 0044  xsym                 STB,B6   QI_1+68

      473    17461    1       QI_1.OTTER_SPACE.T$ = ADDR ( QI@OTTER_SPACE );

  17461   0 000241  DBC7 000E                            LAB,B5   QI@OTTER_SPACE,AUTO
          0 000243  DF80 0000 0046  xsym                 STB,B5   QI_1+70

      474    17462
      475    17463    1       CALL QCS$SETUP_SOURCE;

  17463   0 000246  CBF0 0000                            LAB,B4   0,IMO
          0 000248  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 00024B       0001                            DC       s:17464,PREL

      476    17464    1       CALL QCS$SETUP_TARGET;

  17464   0 00024C  CBF0 0000                            LAB,B4   0,IMO
          0 00024E  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
          0 000251       0001                            DC       s:17466,PREL
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:54   

      477    17465
      478    17466    1       CALL QCI$IFA;

  17466   0 000252  CBF0 0000                            LAB,B4   0,IMO
          0 000254  E380 0000 0000  xent                 LNJ,B6   QCI$IFA
          0 000257       0001                            DC       s:17468,PREL

      479    17467
      480    17468    1       REL = QI_1.INSTR$ -> QI$OP_IFRELA.RELATIONAL_ATTRIBUTE;

  17468   0 000258  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 00025B  E846 0003                            LDR,R6   3,B6
          0 00025D  EF47 000A                            STR,R6   REL,AUTO

      481    17469
      482    17470    1       GOTO SO_JUMP_ALREADY;

  17470   0 00025F  0F81 0063                            B        s:17553,PREL

      483    17471        /***************** IF RELATIONAL NUMERIC **********************/
      484    17472
      485    17473    1   QBI$IFRELN: ENTRY ALTRET;

  17473   0 000261  D380 0000 0000  xent QBI$IFRELN      LNJ,B5   X6A_AUTO_0
          0 000264       0016 0000                       DC       22,0

      486    17474
      487    17475    1       IFRELG = %NO;

  17475   0 000266  8747 0009                            CL       IFRELG,AUTO

      488    17476
      489    17477    1       CALL QCS$SETUP_SOURCE;

  17477   0 000268  CBF0 0000                            LAB,B4   0,IMO
          0 00026A  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:55   
          0 00026D       0001                            DC       s:17478,PREL

      490    17478    1       CALL QCS$SETUP_TARGET;

  17478   0 00026E  CBF0 0000                            LAB,B4   0,IMO
          0 000270  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
          0 000273       0001                            DC       s:17480,PREL

      491    17479
      492    17480    1       CALL QCI$IFN;

  17480   0 000274  CBF0 0000                            LAB,B4   0,IMO
          0 000276  E380 0000 0000  xent                 LNJ,B6   QCI$IFN
          0 000279       0001                            DC       s:17482,PREL

      493    17481
      494    17482    1       REL = QI_1.INSTR$ -> QI$OP_IFRELN.RELATIONAL_ATTRIBUTE;

  17482   0 00027A  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 00027D  E846 0003                            LDR,R6   3,B6
          0 00027F  EF47 000A                            STR,R6   REL,AUTO

      495    17483
      496    17484    1       GOTO SO_JUMP_ALREADY;

  17484   0 000281  0F81 0041                            B        s:17553,PREL

      497    17485        %EJECT;
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:56   
      498    17486        /***************** IF RELATIONAL GROUP  ***********************/
      499    17487
      500    17488    1   QBI$IFRELG: ENTRY ALTRET;

  17488   0 000283  D380 0000 0000  xent QBI$IFRELG      LNJ,B5   X6A_AUTO_0
          0 000286       0016 0000                       DC       22,0

      501    17489
      502    17490    1       IFRELG = %YES;

  17490   0 000288  8947 0009                            LBT,'8000'X       IFRELG,AUTO
  17490   0 00028A       8000

      503    17491
      504    17492    1       QI_1.SOURCE$ = ADDR (QI_1.INSTR$ -> QI$OP_IFRELG.SOURCE@P);

  17492   0 00028B  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 00028E  DBC6 0002                            LAB,B5   2,B6
          0 000290  DF80 0000 0018  xsym                 STB,B5   QI_1+24

      505    17493
      506    17494    1       CALL QCS$SETUP_SOURCE;

  17494   0 000293  CBF0 0000                            LAB,B4   0,IMO
          0 000295  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 000298       0001                            DC       s:17495,PREL

      507    17495    1       CALL QCS$SETUP_TARGET;

  17495   0 000299  CBF0 0000                            LAB,B4   0,IMO
          0 00029B  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
          0 00029E       0001                            DC       s:17525,PREL

      508    17496
      509    17497           /*  This is the closest I can figure out:
      510    17498               IS_SOURCE_GROUP means that, of the two items being compared,
      511    17499               the first item is the group item.  Group items are easy to
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:57   
      512    17500               deal with because their DADs have the correct length in them,
      513    17501               i.e., the length in a group DAD takes into account all the
      514    17502               various lengths and offsets of the items within that group
      515    17503               (be they packed, binary, alphanumeric, etc.).  The OTHER
      516    17504               item, however, may be some sort of weird numeric, say, packed,
      517    17505               and, for example, its alphanumeric length would be 2 even
      518    17506               if its DAD said 4, because the DAD was counting in half-bytes.
      519    17507               In fact, as the compiler stands now, the resulting generated
      520    17508               code for various group stuff is as follows:
      521    17509
      522    17510               GROUP vs. NUMERIC    GROUP vs. ALPHANUMERIC    GROUP vs. GROUP
      523    17511                   IFRELG                 IFRELA                   IFRELA
      524    17512               non-group length           item-1                   item-2
      525    17513                   item-1                 item-2                   item-2
      526    17514                    etc.                   etc.                     etc.
      527    17515
      528    17516               which means that we'll only get an IFRELG op-code for a group
      529    17517               vs. numeric comparison, and we'll only need that non-group
      530    17518               length if the non-group is packed.  Here's the kicker:  the
      531    17519               compiler currently disallows group vs. comp-item comparisons.
      532    17520               That means that we'll never-ever need "non-group length"
      533    17521               because it'll always be the same as the length in the
      534    17522               non-group item's DAD.  This code is left in, however, for
      535    17523               old time's sake and just in case that type of comparison
      536    17524               is ever allowed.  JJL, C00.  */
      537    17525    1       IF QI_1.INSTR$ -> QI$OP_IFRELG.IS_SOURCE_GROUP

  17525   0 00029F  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 0002A2  89C6 0001                            CMZ      1,B6
          0 0002A4  0881 000A                            BAGE     s:17529,PREL

      538    17526    1       THEN
      539    17527    1         QI_1.OP.LEN.T = QI_1.INSTR$ -> QI$OP_IFRELG.ANTI_GROUP_LENGTH;

  17527   0 0002A6  E846 0001                            LDR,R6   1,B6
          0 0002A8  E570 3FFF                            AND,R6   16383,IMO
          0 0002AA  EF00 0000 0027  xsym                 STR,R6   QI_1+39
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:58   
          0 0002AD  0F81 0008                            B        s:17531,PREL

      540    17528    1       ELSE
      541    17529    1         QI_1.OP.LEN.S = QI_1.INSTR$ -> QI$OP_IFRELG.ANTI_GROUP_LENGTH;

  17529   0 0002AF  E846 0001                            LDR,R6   1,B6
          0 0002B1  E570 3FFF                            AND,R6   16383,IMO
          0 0002B3  EF00 0000 0026  xsym                 STR,R6   QI_1+38

      542    17530
      543    17531    1       CALL QCI$IFG;

  17531   0 0002B6  CBF0 0000                            LAB,B4   0,IMO
          0 0002B8  E380 0000 0000  xent                 LNJ,B6   QCI$IFG
          0 0002BB       0001                            DC       s:17533,PREL

      544    17532
      545    17533    1       REL = QI_1.INSTR$ -> QI$OP_IFRELG.RELATIONAL_ATTRIBUTE;

  17533   0 0002BC  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 0002BF  E846 0004                            LDR,R6   4,B6
          0 0002C1  EF47 000A                            STR,R6   REL,AUTO

      546    17534
      547    17535        %EJECT;
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:59   
      548    17536    1   SO_JUMP_ALREADY:
      549    17537                                           /*
      550    17538                                           First check if the result of the
      551    17539                                           operand comparison is equal. If
      552    17540                                           not equal, then check if the first
      553    17541                                           operand is < the second. Finally,
      554    17542                                           if neither of these conditions is
      555    17543                                           met assume the first operand is
      556    17544                                           > the second.
      557    17545                                           */
      558    17546                                           /*
      559    17547                                           EQUAL - If the result is equal
      560    17548                                           and they specified equal, not
      561    17549                                           greater than, or not less than
      562    17550                                           go to next sequential instruction.
      563    17551                                           Otherwise branch around the IF.
      564    17552                                                                          */
      565    17553    1       IF QI_1.OP.COMP_RESULT = %QI#IF_EQUAL

  17553   0 0002C3  D800 0000 0031  xsym SO_JUMP_ALREADY LDR,R5   QI_1+49
          0 0002C6  5D02                                 CMV,R5   2
          0 0002C7  0981 000C                            BNE      s:17573,PREL

      566    17554    1       THEN
      567    17555    2         DO;

      568    17556    2           IF REL = %QI#IF_EQUAL

  17556   0 0002C9  6D02                                 CMV,R6   2
          0 0002CA  0901 0021                            BE       s:17604,PREL
          0 0002CC  6D10                                 CMV,R6   16
          0 0002CD  0901 001E                            BE       s:17604,PREL
          0 0002CF  6D11                                 CMV,R6   17
          0 0002D0  0901 001B                            BE       s:17604,PREL

      569    17557    2             OR REL = %QI#IF_NOT_GREATER
      570    17558    2             OR REL = %QI#IF_NOT_LESS
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:60   
      571    17559    2           THEN
      572    17560    2             GOTO DONT_IFREL_BRANCH;
      573    17561    2           ELSE
      574    17562    2             GOTO IFREL_BRANCH;

  17562   0 0002D2  0F81 002C                            B        s:17613,PREL

      575    17563    2         END;
      576    17564    1       ELSE
      577    17565    2         DO;

      578    17566                                           /*
      579    17567                                           LESS THAN - If the result is less
      580    17568                                           than and they specified less than,
      581    17569                                           not greater than, or not equal to
      582    17570                                           go to the next sequential instruct-
      583    17571                                           ion.  Otherwise branch around IF.
      584    17572                                                                          */
      585    17573    2           IF QI_1.OP.COMP_RESULT = %QI#IF_LESS

  17573   0 0002D4  5D01                                 CMV,R5   1
          0 0002D5  0981 000C                            BNE      s:17593,PREL

      586    17574    2           THEN
      587    17575    3             DO;

      588    17576    3               IF REL  = %QI#IF_LESS

  17576   0 0002D7  6D01                                 CMV,R6   1
          0 0002D8  0901 0013                            BE       s:17604,PREL
          0 0002DA  6D10                                 CMV,R6   16
          0 0002DB  0901 0010                            BE       s:17604,PREL
          0 0002DD  6D12                                 CMV,R6   18
          0 0002DE  0901 000D                            BE       s:17604,PREL

      589    17577    3                 OR REL = %QI#IF_NOT_GREATER
      590    17578    3                 OR REL = %QI#IF_NOT_EQUAL
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:61   
      591    17579    3               THEN
      592    17580    3                 GOTO DONT_IFREL_BRANCH;
      593    17581    3               ELSE
      594    17582    3                 GOTO IFREL_BRANCH;

  17582   0 0002E0  0F81 001E                            B        s:17613,PREL

      595    17583    3             END;
      596    17584    2           ELSE
      597    17585    3             DO;

      598    17586                                           /*
      599    17587                                           GREATER THAN - If the result is
      600    17588                                           greater than and they specified
      601    17589                                           greater than, not less than, or
      602    17590                                           not equal to go to next sequential
      603    17591                                           instruction.  Otherwise branch
      604    17592                                                                          */
      605    17593    3               IF REL  = %QI#IF_GREATER

  17593   0 0002E2  6901 0009                            BEZ,R6   s:17604,PREL
          0 0002E4  6D11                                 CMV,R6   17
          0 0002E5  0901 0006                            BE       s:17604,PREL
          0 0002E7  6D12                                 CMV,R6   18
          0 0002E8  0901 0003                            BE       s:17604,PREL

      606    17594    3                 OR REL = %QI#IF_NOT_LESS
      607    17595    3                 OR REL = %QI#IF_NOT_EQUAL
      608    17596    3               THEN
      609    17597    3                 GOTO DONT_IFREL_BRANCH;
      610    17598    3               ELSE
      611    17599    3                 GOTO IFREL_BRANCH;

  17599   0 0002EA  0F81 0014                            B        s:17613,PREL

      612    17600    3             END;
      613    17601    2         END;
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:62   
      614    17602
      615    17603    1   DONT_IFREL_BRANCH:
      616    17604    1       IF IFRELG = %YES

  17604   0 0002EC  89C7 0009            DONT_IFREL_BRAN*CMZ      IFRELG,AUTO
          0 0002EE  0881 0008                            BAGE     s:17608,PREL

      617    17605    1       THEN
      618    17606    1         QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_IFRELG.NEXT_CODE@P );

  17606   0 0002F0  DBC6 0006                            LAB,B5   6,B6
          0 0002F2  DF80 0000 0006  xsym                 STB,B5   QI_1+6
          0 0002F5  0F81 0006                            B        s:17610,PREL

      619    17607    1       ELSE
      620    17608    1         QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_IFRELA.NEXT_CODE@P );

  17608   0 0002F7  DBC6 0005                            LAB,B5   5,B6
          0 0002F9  DF80 0000 0006  xsym                 STB,B5   QI_1+6

      621    17609
      622    17610    1       RETURN;

  17610   0 0002FC  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      623    17611
      624    17612    1   IFREL_BRANCH:
      625    17613    1       IF IFRELG = %YES

  17613   0 0002FF  89C7 0009            IFREL_BRANCH    CMZ      IFRELG,AUTO
          0 000301  0881 000D                            BAGE     s:17675,PREL

      626    17614    1       THEN
      627    17615              %PROC_ADDRESS ( THING@P = "QI_1.INSTR$ -> QI$OP_IFRELG.FALSE_CONDITION@P",
      628    17616                CHECK_FOR_INDIRECTION = NO,
      629    17617                RESULT$ = "QI_1.INSTR$" );

PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:63   
  17635   0 000303  B846 0005                            LDR,R3   5,B6
          0 000305  F853                                 LDR,R7   R3
          0 000306  6C00                                 LDV,R6   0
          0 000307  8400 0000 0002  xsym                 AID      QI_1+2
          0 00030A  8D00 0000 0006  xsym                 SDI      QI_1+6

  17644   0 00030D  0F81 000B                            B        s:17695,PREL

      630    17654    1       ELSE
      631    17655              %PROC_ADDRESS ( THING@P = "QI_1.INSTR$ -> QI$OP_IFRELA.FALSE_CONDITION@P",
      632    17656                CHECK_FOR_INDIRECTION = NO,
      633    17657                RESULT$ = "QI_1.INSTR$" );

  17675   0 00030F  B846 0004                            LDR,R3   4,B6
          0 000311  F853                                 LDR,R7   R3
          0 000312  6C00                                 LDV,R6   0
          0 000313  8400 0000 0002  xsym                 AID      QI_1+2
          0 000316  8D00 0000 0006  xsym                 SDI      QI_1+6

      634    17694
      635    17695    1       ALTRETURN;

  17695   0 000319  C380 0000 0000  xent                 LNJ,B4   X6A_AALT
      636    17696
      637    17697    1   END QBI$IFS;

PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:64   
--  Include file information  --

   QI_MACROS_M.:E05TOU  is referenced.
   QI_EQUATES_E.:E05TOU  is referenced.
   QG_MACRO_M.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure QBI$IFS.
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:65   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 CCB$                       B-0-0/w UBIN(16)    r     1 CURRENT_INDEX
     C-0-0/w UBIN(16)    r     1 ENDING_INDEX               7-0-0/w BIT         r     1 IFCNDA
     9-0-0/w BIT         r     1 IFRELG                     E-0-0/w STRC(128)   r     1 QI@OTTER_SPACE
     A-0-0/w UBIN(16)    r     1 REL                        6-0-0/w BIT         r     1 STATUS_FLAG
     D-0-0/w UBIN(8)     r     1 TEST_BYTE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(2576)  r     1 QI_1

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(32)    r     1 QI$CONDITION_CONTROL_BLOCK
     0-0-0/w STRC(80)    r     1 QI$OP_IFCLS                0-0-0/w STRC(96)    r     1 QI$OP_IFCNDA
     0-0-0/w STRC(96)    r     1 QI$OP_IFRELA               0-0-0/w STRC(112)   r     1 QI$OP_IFRELG
     0-0-0/w STRC(96)    r     1 QI$OP_IFRELN
     0-0-0/c UBIN(8)     r     1 QI$UBYTE_A(0:0)
     0-0-0/c ASTR(8)     r     1 QI$VARIABLE_IDENTIFIER


   Procedure QBI$IFS requires 796 words for executable code.
   Procedure QBI$IFS requires 22 words of local(AUTO) storage.
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:66   

    No errors detected in file QBI$IFS.:E05TSI    .
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:67   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:68   
          MINI XREF LISTING

CCB$
     16884**DCL     17258<<ASSIGN  17283>>IF      17293>>ASSIGN  17332>>ASSIGN  17335>>DOINDEX
CHECK_NOT_ATTRIBUTE
     17115**LABEL   16980--GOTO    16989--GOTO    16998--GOTO    17004--GOTO    17030--GOTO    17049--GOTO
     17068--GOTO    17085--GOTO
CHECK_THE_NOT_ATTRIBUTE
     17355**LABEL   17321--GOTO    17325--GOTO    17348--GOTO
CURRENT_INDEX
     16890**DCL     16952<<ASSIGN  16965>>DOWHILE 16967>>ASSIGN  16985<<ASSIGN  16985>>ASSIGN  16992>>DOWHILE
     16993>>ASSIGN  17000<<ASSIGN  17000>>ASSIGN  17025>>ASSIGN  17032<<ASSIGN  17032>>ASSIGN  17079>>DOWHILE
     17080>>ASSIGN  17087<<ASSIGN  17087>>ASSIGN  17335<<DOINDEX
DONT_IFCND_BRANCH
     17419**LABEL   17362--GOTO    17368--GOTO
DONT_IFREL_BRANCH
     17604**LABEL   17560--GOTO    17580--GOTO    17597--GOTO
ENDING_INDEX
     16891**DCL     16957<<ASSIGN  16965>>DOWHILE 16992>>DOWHILE 17010<<ASSIGN  17010>>ASSIGN  17044>>ASSIGN
     17051<<ASSIGN  17051>>ASSIGN  17060>>ASSIGN  17070<<ASSIGN  17070>>ASSIGN  17079>>DOWHILE
FAIL
     17157**LABEL   17122--GOTO    17128--GOTO
IFCNDA
     16886**DCL     17210<<ASSIGN  17223<<ASSIGN  17302>>IF      17311>>IF      17338>>IF
IFCND_BRANCH
     17393**LABEL   17360--GOTO    17370--GOTO
IFRELG
     16888**DCL     17456<<ASSIGN  17475<<ASSIGN  17490<<ASSIGN  17604>>IF      17613>>IF
IFREL_BRANCH
     17613**LABEL   17562--GOTO    17582--GOTO    17599--GOTO
IF_CONDITIONAL_COMMON
     17231**LABEL   17217--GOTO
QCI$IFA
     16880**DCL-ENT 17304--CALL    17313--CALL    17340--CALL    17466--CALL
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:69   
QCI$IFG
     16882**DCL-ENT 17531--CALL
QCI$IFN
     16881**DCL-ENT 17306--CALL    17315--CALL    17342--CALL    17480--CALL
QCS$SETUP_SOURCE
     16878**DCL-ENT 16944--CALL    17231--CALL    17463--CALL    17477--CALL    17494--CALL
QCS$SETUP_TARGET
     16879**DCL-ENT 17301--CALL    17310--CALL    17337--CALL    17464--CALL    17478--CALL    17495--CALL
QGB_PARAM.DVE.DVBYTE.VFC
     11361**DCL     11362--REDEF
QGB_PARAM.DVE.EOMCHAR
     11373**DCL     11374--REDEF
QGB_PARAM.MSG$
     11355**DCL     11356--REDEF
QGB_PARAM.UHDR$
     11380**DCL     11381--REDEF
QI$ACTIVATION_STATUS
      9119**DCL      9125--REDEF
QI$CIP
      7960**DCL      8030--REDEF
QI$CIP.CA
      7965**DCL      7969--REDEF    7972--REDEF    7975--REDEF
QI$COBOL_DAD.PSEUDO_CIP
      8204**DCL      8229--REDEF
QI$COBOL_DAD.PSEUDO_CIP.ALPHANUMERIC
      8206**DCL      8211--REDEF
QI$COBOL_DAD.PSEUDO_CIP.NUMERIC.CB
      8212**DCL      8215--REDEF    8218--REDEF
QI$COBOL_DAD.VARIABLE_LENGTH_ITEMS
      8240**DCL      8256--REDEF    8264--REDEF    8272--REDEF
QI$COBOL_DAD.VARIABLE_LENGTH_ITEMS.LEVEL_MULTIPLIERS
      8241**DCL      8251--REDEF    8254--REDEF
QI$COBOL_DAD.WORD0
      8168**DCL      8169--REDEF    8183--REDEF
QI$COBOL_DAD_P_BITS.P
      8308**DCL      8314--REDEF
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:70   
QI$CONDITION_CONTROL_BLOCK.LIST_A@P
      7794**DCL      7795--REDEF   17332--ASSIGN
QI$CONDITION_CONTROL_BLOCK.LIST_LENGTH
      7793**DCL     17335>>DOINDEX
QI$CONDITION_CONTROL_BLOCK.RANGE_A@P
      7795**DCL     17293--ASSIGN
QI$CONDITION_CONTROL_BLOCK.WORD0_FLAGS
      7790**DCL      7793--REDEF
QI$CONDITION_CONTROL_BLOCK.WORD0_FLAGS.IS_THROUGH
      7791**DCL     17283>>IF
QI$CONDITION_LEGAL_BLOCK.ARRAY@P
      7827**DCL      7828--REDEF    7829--REDEF
QI$DAD.PSEUDO_CIP
      8107**DCL      8132--REDEF
QI$DAD.PSEUDO_CIP.ALPHANUMERIC
      8109**DCL      8114--REDEF
QI$DAD.PSEUDO_CIP.NUMERIC.CB
      8115**DCL      8118--REDEF    8121--REDEF
QI$DAD.WORD0
      8076**DCL      8077--REDEF
QI$ERROR_MESSAGE_LINE
     11468**DCL     11470--REDEF
QI$ERROR_STATUS
     11465**DCL     11467--REDEF
QI$FIELD_DAD.ELEMENTARY_ITEM.P
      8522**DCL      8529--REDEF
QI$FIELD_DAD.ONE_DIMENSIONAL_ITEM.P
      8542**DCL      8549--REDEF
QI$FIELD_DAD.PSEUDO_CIP
      8449**DCL      8474--REDEF
QI$FIELD_DAD.PSEUDO_CIP.ALPHANUMERIC
      8451**DCL      8456--REDEF
QI$FIELD_DAD.PSEUDO_CIP.NUMERIC.CB
      8457**DCL      8460--REDEF    8463--REDEF
QI$FIELD_DAD.TWO_DIMENSIONAL_ITEM.P
      8562**DCL      8569--REDEF
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:71   
QI$FIELD_DAD.VARIABLE_LENGTH_ITEMS
      8505**DCL      8521--REDEF    8539--REDEF    8557--REDEF
QI$FIELD_DAD.VARIABLE_LENGTH_ITEMS.LEVEL_MULTIPLIERS
      8506**DCL      8516--REDEF    8519--REDEF
QI$FIELD_DAD.WORD0
      8401**DCL      8402--REDEF
QI$FIELD_DAD.WORD0_FLAGS.IO_FLAGS
      8405**DCL      8410--REDEF
QI$FIELD_DAD_P.P
      8603**DCL      8610--REDEF
QI$FIELD_STATUS.INDICATORS
      9269**DCL      9301--REDEF
QI$FIELD_STATUS.INDICATORS.ENABLED_FLAGS
      9273**DCL      9278--REDEF
QI$FIELD_STATUS.INDICATORS.OPEN_FLAGS
      9285**DCL      9292--REDEF
QI$FIELD_STATUS.INDICATORS.STATE_FLAGS
      9279**DCL      9284--REDEF
QI$FILE.WORD0
      8725**DCL      8726--REDEF
QI$FILE_STATUS.INDICATORS
      9562**DCL      9594--REDEF
QI$FILE_STATUS.INDICATORS.ENABLED_FLAGS
      9566**DCL      9571--REDEF
QI$FILE_STATUS.INDICATORS.OPEN_FLAGS
      9578**DCL      9585--REDEF
QI$FILE_STATUS.INDICATORS.STATE_FLAGS
      9572**DCL      9577--REDEF
QI$FORM_FILE.USE_PROCEDURE
      8825**DCL      8832--REDEF
QI$FORM_FILE.WORD0
      8779**DCL      8780--REDEF
QI$FORM_STATUS.INDICATORS
      9683**DCL      9715--REDEF
QI$FORM_STATUS.INDICATORS.ENABLED_FLAGS
      9687**DCL      9692--REDEF
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:72   
QI$FORM_STATUS.INDICATORS.OPEN_FLAGS
      9699**DCL      9706--REDEF
QI$FORM_STATUS.INDICATORS.STATE_FLAGS
      9693**DCL      9698--REDEF
QI$FRAME.WORD0
      8940**DCL      8941--REDEF
QI$FRAME_STATUS.INDICATORS
      9912**DCL      9944--REDEF
QI$FRAME_STATUS.INDICATORS.ENABLED_FLAGS
      9916**DCL      9921--REDEF
QI$FRAME_STATUS.INDICATORS.OPEN_FLAGS
      9928**DCL      9935--REDEF
QI$FRAME_STATUS.INDICATORS.STATE_FLAGS
      9922**DCL      9927--REDEF
QI$GZ_FIELD.DESCRIPTION.IO_FLAGS
     16794**DCL     16799--REDEF
QI$IDENTIFIER
     11471**DCL     11473--REDEF
QI$INDICATORS
      9183**DCL      9213--REDEF
QI$INDICATORS.ENABLED_FLAGS
      9189**DCL      9194--REDEF
QI$INDICATORS.OPEN_FLAGS
      9201**DCL      9208--REDEF
QI$INDICATORS.STATE_FLAGS
      9195**DCL      9200--REDEF
QI$MAJOR_NODE.WORD0
      8639**DCL      8640--REDEF
QI$MAJOR_STATUS.INDICATORS
      9362**DCL      9394--REDEF
QI$MAJOR_STATUS.INDICATORS.ENABLED_FLAGS
      9366**DCL      9371--REDEF
QI$MAJOR_STATUS.INDICATORS.OPEN_FLAGS
      9378**DCL      9385--REDEF
QI$MAJOR_STATUS.INDICATORS.STATE_FLAGS
      9372**DCL      9377--REDEF
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:73   
QI$MESSAGE_TYPE
     11462**DCL     11464--REDEF
QI$MINOR_NODE.WORD0
      8682**DCL      8683--REDEF
QI$MINOR_STATUS.INDICATORS
      9455**DCL      9487--REDEF
QI$MINOR_STATUS.INDICATORS.ENABLED_FLAGS
      9459**DCL      9464--REDEF
QI$MINOR_STATUS.INDICATORS.OPEN_FLAGS
      9471**DCL      9478--REDEF
QI$MINOR_STATUS.INDICATORS.STATE_FLAGS
      9465**DCL      9470--REDEF
QI$OP_ACCEPT.DATANAME@P
      5870**DCL      5871--REDEF
QI$OP_CALL.EPTR$
      6042**DCL      6043--REDEF
QI$OP_CLEAR.IO_FLAGS
      6075**DCL      6078--REDEF
QI$OP_DISPLAY.FIELD_A@P
      6342**DCL      6343--REDEF
QI$OP_ENABLE.IO_FLAGS
      6429**DCL      6432--REDEF
QI$OP_IFCLS.ATTRIBUTE.IS_NOT
      6521**DCL     17118>>IF      17126>>IF
QI$OP_IFCLS.ATTRIBUTE.TYPE
      6522**DCL      6527--REDEF
QI$OP_IFCLS.ATTRIBUTE.TYPE.IS_NUMERIC
      6524**DCL     16971>>IF
QI$OP_IFCLS.ATTRIBUTE.TYPES
      6527**DCL     16961>>DOSELCT
QI$OP_IFCLS.FALSE_CONDITION@P
      6528**DCL     17158>>ASSIGN
QI$OP_IFCLS.NEXT_CODE@P
      6529**DCL     17134--ASSIGN
QI$OP_IFCNDA.ATTRIBUTE.IS_NOT
      6560**DCL     17358>>IF      17366>>IF
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:74   
QI$OP_IFCNDA.CONDITION_CONTROL_BLOCK@P
      6557**DCL     17258>>ASSIGN
QI$OP_IFCNDA.FALSE_CONDITION@P
      6562**DCL     17394>>ASSIGN
QI$OP_IFCNDA.NEXT_CODE@P
      6563**DCL     17419--ASSIGN
QI$OP_IFRELA.FALSE_CONDITION@P
      6660**DCL     17675>>ASSIGN
QI$OP_IFRELA.NEXT_CODE@P
      6661**DCL     17608--ASSIGN
QI$OP_IFRELA.RELATIONAL_ATTRIBUTE
      6659**DCL     17468>>ASSIGN
QI$OP_IFRELG.ANTI_GROUP_LENGTH
      6690**DCL     17527>>ASSIGN  17529>>ASSIGN
QI$OP_IFRELG.FALSE_CONDITION@P
      6694**DCL     17635>>ASSIGN
QI$OP_IFRELG.IS_SOURCE_GROUP
      6688**DCL     17525>>IF
QI$OP_IFRELG.NEXT_CODE@P
      6695**DCL     17606--ASSIGN
QI$OP_IFRELG.RELATIONAL_ATTRIBUTE
      6693**DCL     17533>>ASSIGN
QI$OP_IFRELG.SOURCE@P
      6691**DCL     17492--ASSIGN
QI$OP_IFRELN.RELATIONAL_ATTRIBUTE
      6724**DCL     17482>>ASSIGN
QI$OP_INSPECT.TALLYING_FOR_ITEM@P
      6756**DCL      6757--REDEF
QI$OP_INSPECT.TALLYING_INITIAL_ITEM@P
      6758**DCL      6759--REDEF
QI$OP_INSPECT.TALLYING_ITEM@P
      6754**DCL      6755--REDEF
QI$OP_OPEN.IO_FLAGS
      7316**DCL      7319--REDEF
QI$OP_PERFM.BINARY_ITERATION_COUNT@P
      7354**DCL      7355--REDEF
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:75   
QI$PSEUDO_CIP
      7855**DCL      7879--REDEF
QI$PSEUDO_CIP.ALPHANUMERIC
      7859**DCL      7864--REDEF
QI$PSEUDO_CIP.NUMERIC.CB
      7865**DCL      7868--REDEF    7871--REDEF
QI$TERMINAL_ATTRIBUTES
      9076**DCL      9089--REDEF
QI$TRAN_FILE.WORD0
      8861**DCL      8862--REDEF
QI$TRAN_STATUS.INDICATORS
      9796**DCL      9828--REDEF
QI$TRAN_STATUS.INDICATORS.ENABLED_FLAGS
      9800**DCL      9805--REDEF
QI$TRAN_STATUS.INDICATORS.OPEN_FLAGS
      9812**DCL      9819--REDEF
QI$TRAN_STATUS.INDICATORS.STATE_FLAGS
      9806**DCL      9811--REDEF
QI$UBYTE_A
     11456**DCL     16967>>ASSIGN  16993>>ASSIGN  17025>>ASSIGN  17044>>ASSIGN  17060>>ASSIGN  17080>>ASSIGN
QI$VARIABLE_IDENTIFIER.LENGTH
     11475**DCL     11476--IMP-SIZ
QI@OTTER_SPACE
     16909**DCL     16911--REDEF   16912--REDEF   17214--ASSIGN  17215--ASSIGN  17460--ASSIGN  17461--ASSIGN
QI_1.BASE
     10004**DCL     10011--REDEF
QI_1.BASE.PROC$
     10007**DCL     17158>>ASSIGN  17258>>ASSIGN  17394>>ASSIGN  17635>>ASSIGN  17675>>ASSIGN
QI_1.CURRENT.FILE$
     10895**DCL     10897--REDEF   10899--REDEF
QI_1.CURRENT.FILE_STATUS$
     10901**DCL     10903--REDEF   10905--REDEF
QI_1.DAD
     10699**DCL     10704--REDEF
QI_1.FILE_HEAD
     10882**DCL     10889--REDEF
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:76   
QI_1.INSTR$
     10012**DCL     16961>>DOSELCT 16971>>IF      17118>>IF      17126>>IF      17134<<ASSIGN  17134>>ASSIGN
     17158<<ASSIGN  17158>>ASSIGN  17258>>ASSIGN  17358>>IF      17366>>IF      17394<<ASSIGN  17394>>ASSIGN
     17419<<ASSIGN  17419>>ASSIGN  17468>>ASSIGN  17482>>ASSIGN  17492>>ASSIGN  17525>>IF      17527>>ASSIGN
     17529>>ASSIGN  17533>>ASSIGN  17606<<ASSIGN  17606>>ASSIGN  17608<<ASSIGN  17608>>ASSIGN  17635<<ASSIGN
     17635>>ASSIGN  17675<<ASSIGN  17675>>ASSIGN
QI_1.IS_ALL_LIT
     10705**DCL     10710--REDEF
QI_1.IS_FORM_VARIABLE
     10711**DCL     10716--REDEF
QI_1.IS_TEMP
     10717**DCL     10722--REDEF
QI_1.MESSAGE_LINE_DAD.PSEUDO_CIP
     10815**DCL     10840--REDEF
QI_1.MESSAGE_LINE_DAD.PSEUDO_CIP.ALPHANUMERIC
     10817**DCL     10822--REDEF
QI_1.MESSAGE_LINE_DAD.PSEUDO_CIP.NUMERIC.CB
     10823**DCL     10826--REDEF   10829--REDEF
QI_1.MESSAGE_LINE_DAD.WORD0
     10784**DCL     10785--REDEF
QI_1.OFFSET
     10723**DCL     10728--REDEF
QI_1.OFFSET.S
     10725**DCL     16952>>ASSIGN  16957>>ASSIGN
QI_1.OP.CIP
     10084**DCL     10535--REDEF
QI_1.OP.CIP.AUX
     10450**DCL     10521--REDEF
QI_1.OP.CIP.AUX.CD
     10495**DCL     10498--REDEF   10502--REDEF   10505--REDEF
QI_1.OP.CIP.S
     10154**DCL     10225--REDEF
QI_1.OP.CIP.S.CD
     10199**DCL     10202--REDEF   10206--REDEF   10209--REDEF
QI_1.OP.CIP.S.CD.SIGN
     10201**DCL     17022>>DOSELCT
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:77   
QI_1.OP.CIP.T
     10302**DCL     10373--REDEF
QI_1.OP.CIP.T.CD
     10347**DCL     10350--REDEF   10354--REDEF   10357--REDEF
QI_1.OP.COMP_RESULT
     10686**DCL     17307>>IF      17317>>IF      17344>>IF      17553>>IF      17573>>IF
QI_1.OP.DATA
     10542**DCL     10546--REDEF
QI_1.OP.DATA.S$
     10543**DCL     16967>>ASSIGN  16993>>ASSIGN  17025>>ASSIGN  17044>>ASSIGN  17060>>ASSIGN  17080>>ASSIGN
QI_1.OP.FILL_CHAR
     10666**DCL     10669--REDEF
QI_1.OP.INX
     10599**DCL     10603--REDEF   10604--REDEF   10608--REDEF
QI_1.OP.LEN
     10582**DCL     10586--REDEF   10587--REDEF   10591--REDEF   10592--REDEF   10596--REDEF
QI_1.OP.LEN.AUX
     10585**DCL     11486--IMP-SIZ
QI_1.OP.LEN.S
     10583**DCL     11482--IMP-SIZ 16957>>ASSIGN  17529<<ASSIGN
QI_1.OP.LEN.T
     10584**DCL     11484--IMP-SIZ 17527<<ASSIGN
QI_1.OP.PICTURE_STRING
     10652**DCL     10655--REDEF   10656--REDEF   10659--REDEF   10660--REDEF   10663--REDEF
QI_1.OP.ROUND
     10685**DCL     10686--REDEF   10687--REDEF
QI_1.OP.SRCH_VRFY_ELEMS
     10621**DCL     10624--REDEF
QI_1.OPENED_COUNT
     10890**DCL     10893--REDEF
QI_1.OTTER_SPACE
     10729**DCL     10734--REDEF
QI_1.OTTER_SPACE.S$
     10731**DCL     17214<<ASSIGN  17460<<ASSIGN
QI_1.OTTER_SPACE.T$
     10732**DCL     17215<<ASSIGN  17461<<ASSIGN
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:78   
QI_1.PICTURE_STRING
     10735**DCL     10740--REDEF
QI_1.SOURCE$
     10055**DCL     17293<<ASSIGN  17332<<ASSIGN  17492<<ASSIGN
QI_1.SPECIAL_NAMES
     10918**DCL     10927--REDEF
QI_1.TYPE
     10741**DCL     10746--REDEF
QI_1.TYPE.S
     10743**DCL     17012>>IF
QI_16_BIT_BINARY
     15931**DCL     16001--REDEF
QI_16_BIT_BINARY.CB
     15950**DCL     15953--REDEF   15957--REDEF   15960--REDEF
QI_31_DIGIT_SLS_DISPLAY
     15764**DCL     15834--REDEF
QI_31_DIGIT_SLS_DISPLAY.CD
     15811**DCL     15814--REDEF   15818--REDEF   15821--REDEF
QI_31_DIGIT_ST_PACKED
     16266**DCL     16336--REDEF
QI_31_DIGIT_ST_PACKED.CP
     16299**DCL     16302--REDEF   16306--REDEF   16309--REDEF
QI_32_BIT_BINARY
     16098**DCL     16168--REDEF
QI_32_BIT_BINARY.CB
     16117**DCL     16120--REDEF   16124--REDEF   16127--REDEF
QI_4_CHAR_ALPHANUMERIC
     15596**DCL     15666--REDEF
QI_4_CHAR_ALPHANUMERIC.CA
     15601**DCL     15605--REDEF   15608--REDEF   15611--REDEF
QI_ACCUMULATOR_DAD.CIP
     16609**DCL     16680--REDEF
QI_ACCUMULATOR_DAD.CIP.CP
     16640**DCL     16643--REDEF   16647--REDEF   16650--REDEF
QI_ALR.CIP
     11561**DCL     12012--REDEF
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:79   
QI_ALR.CIP.AUX
     11927**DCL     11998--REDEF
QI_ALR.CIP.AUX.CA
     11930**DCL     11934--REDEF   11937--REDEF   11940--REDEF
QI_ALR.CIP.S
     11631**DCL     11702--REDEF
QI_ALR.CIP.S.CA
     11634**DCL     11638--REDEF   11641--REDEF   11644--REDEF
QI_ALR.CIP.T
     11779**DCL     11850--REDEF
QI_ALR.CIP.T.CA
     11782**DCL     11786--REDEF   11789--REDEF   11792--REDEF
QI_ALR.DATA
     12019**DCL     12023--REDEF
QI_ALR.FILL_CHAR
     12143**DCL     12146--REDEF
QI_ALR.INX
     12076**DCL     12080--REDEF   12081--REDEF   12085--REDEF
QI_ALR.LEN
     12059**DCL     12063--REDEF   12064--REDEF   12068--REDEF   12069--REDEF   12073--REDEF
QI_ALR.PICTURE_STRING
     12129**DCL     12132--REDEF   12133--REDEF   12136--REDEF   12137--REDEF   12140--REDEF
QI_ALR.ROUND
     12162**DCL     12163--REDEF   12164--REDEF
QI_ALR.SRCH_VRFY_ELEMS
     12098**DCL     12101--REDEF
QI_MAT.CIP
     14900**DCL     15351--REDEF
QI_MAT.CIP.AUX
     15266**DCL     15337--REDEF
QI_MAT.CIP.AUX.CA
     15269**DCL     15273--REDEF   15276--REDEF   15279--REDEF
QI_MAT.CIP.S
     14970**DCL     15041--REDEF
QI_MAT.CIP.S.CA
     14973**DCL     14977--REDEF   14980--REDEF   14983--REDEF
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:80   
QI_MAT.CIP.T
     15118**DCL     15189--REDEF
QI_MAT.CIP.T.CA
     15121**DCL     15125--REDEF   15128--REDEF   15131--REDEF
QI_MAT.DATA
     15358**DCL     15362--REDEF
QI_MAT.DEC
     15426**DCL     15430--REDEF   15431--REDEF   15435--REDEF
QI_MAT.FILL_CHAR
     15482**DCL     15485--REDEF
QI_MAT.LEN
     15398**DCL     15402--REDEF   15403--REDEF   15407--REDEF   15408--REDEF   15412--REDEF
QI_MAT.PICTURE_STRING
     15468**DCL     15471--REDEF   15472--REDEF   15475--REDEF   15476--REDEF   15479--REDEF
QI_MAT.ROUND
     15501**DCL     15502--REDEF   15503--REDEF
QI_MAT.SRCH_VRFY_ELEMS
     15437**DCL     15440--REDEF
QI_PICTURE_STRING
     16434**DCL     16504--REDEF
QI_PICTURE_STRING.CA
     16439**DCL     16443--REDEF   16446--REDEF   16449--REDEF
QI_SRCH_VRFY.CIP
     14231**DCL     14682--REDEF
QI_SRCH_VRFY.CIP.AUX
     14597**DCL     14668--REDEF
QI_SRCH_VRFY.CIP.AUX.CA
     14600**DCL     14604--REDEF   14607--REDEF   14610--REDEF
QI_SRCH_VRFY.CIP.S
     14301**DCL     14372--REDEF
QI_SRCH_VRFY.CIP.S.CA
     14304**DCL     14308--REDEF   14311--REDEF   14314--REDEF
QI_SRCH_VRFY.CIP.T
     14449**DCL     14520--REDEF
QI_SRCH_VRFY.CIP.T.CA
     14452**DCL     14456--REDEF   14459--REDEF   14462--REDEF
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:81   
QI_SRCH_VRFY.DATA
     14689**DCL     14693--REDEF
QI_SRCH_VRFY.DEC
     14757**DCL     14761--REDEF   14762--REDEF   14766--REDEF
QI_SRCH_VRFY.FILL_CHAR
     14813**DCL     14816--REDEF
QI_SRCH_VRFY.ROUND
     14832**DCL     14833--REDEF   14834--REDEF
QI_SRCH_VRFY.SRCH_RESULT
     14773**DCL     14776--REDEF   14777--REDEF   14780--REDEF   14781--REDEF   14784--REDEF
QI_SRCH_VRFY.SRCH_VRFY_ARGS
     14697**DCL     14701--REDEF   14702--REDEF   14706--REDEF   14707--REDEF   14711--REDEF
QI_SRCH_VRFY.SRCH_VRFY_ELEMS
     14768**DCL     14771--REDEF
QI_TYPE_BINARY_TARGET.CIP
     13558**DCL     14009--REDEF
QI_TYPE_BINARY_TARGET.CIP.AUX
     13924**DCL     13995--REDEF
QI_TYPE_BINARY_TARGET.CIP.AUX.CA
     13927**DCL     13931--REDEF   13934--REDEF   13937--REDEF
QI_TYPE_BINARY_TARGET.CIP.S
     13628**DCL     13699--REDEF
QI_TYPE_BINARY_TARGET.CIP.S.CA
     13631**DCL     13635--REDEF   13638--REDEF   13641--REDEF
QI_TYPE_BINARY_TARGET.CIP.T
     13776**DCL     13847--REDEF
QI_TYPE_BINARY_TARGET.CIP.T.CB
     13793**DCL     13796--REDEF   13800--REDEF   13803--REDEF
QI_TYPE_BINARY_TARGET.DATA
     14016**DCL     14020--REDEF
QI_TYPE_BINARY_TARGET.DEC
     14084**DCL     14088--REDEF   14089--REDEF   14093--REDEF
QI_TYPE_BINARY_TARGET.LEN
     14056**DCL     14060--REDEF   14061--REDEF   14065--REDEF   14066--REDEF   14070--REDEF
QI_TYPE_BINARY_TARGET.PICTURE_STRING
     14126**DCL     14129--REDEF   14130--REDEF   14133--REDEF   14134--REDEF   14137--REDEF
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:82   
QI_TYPE_BINARY_TARGET.ROUND
     14159**DCL     14160--REDEF   14161--REDEF
QI_TYPE_BINARY_TARGET.SIZE_ERROR
     14145**DCL     14146--REDEF
QI_TYPE_BINARY_TARGET.SRCH_VRFY_ELEMS
     14095**DCL     14098--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP
     12226**DCL     12677--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.AUX
     12592**DCL     12663--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.AUX.CA
     12595**DCL     12599--REDEF   12602--REDEF   12605--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.S
     12296**DCL     12367--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.S.CD
     12341**DCL     12344--REDEF   12348--REDEF   12351--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.T
     12444**DCL     12515--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.T.CA
     12447**DCL     12451--REDEF   12454--REDEF   12457--REDEF
QI_TYPE_DISPLAY_SOURCE.DATA
     12684**DCL     12688--REDEF
QI_TYPE_DISPLAY_SOURCE.DEC
     12752**DCL     12756--REDEF   12757--REDEF   12761--REDEF
QI_TYPE_DISPLAY_SOURCE.LEN
     12724**DCL     12728--REDEF   12729--REDEF   12733--REDEF   12734--REDEF   12738--REDEF
QI_TYPE_DISPLAY_SOURCE.PICTURE_STRING
     12794**DCL     12797--REDEF   12798--REDEF   12801--REDEF   12802--REDEF   12805--REDEF
QI_TYPE_DISPLAY_SOURCE.ROUND
     12827**DCL     12828--REDEF   12829--REDEF
QI_TYPE_DISPLAY_SOURCE.SIZE_ERROR
     12813**DCL     12814--REDEF
QI_TYPE_DISPLAY_SOURCE.SRCH_VRFY_ELEMS
     12763**DCL     12766--REDEF
QI_TYPE_DISPLAY_TARGET.CIP
     12892**DCL     13343--REDEF
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:83   
QI_TYPE_DISPLAY_TARGET.CIP.AUX
     13258**DCL     13329--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.AUX.CA
     13261**DCL     13265--REDEF   13268--REDEF   13271--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.S
     12962**DCL     13033--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.S.CA
     12965**DCL     12969--REDEF   12972--REDEF   12975--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.T
     13110**DCL     13181--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.T.CD
     13155**DCL     13158--REDEF   13162--REDEF   13165--REDEF
QI_TYPE_DISPLAY_TARGET.DATA
     13350**DCL     13354--REDEF
QI_TYPE_DISPLAY_TARGET.DEC
     13418**DCL     13422--REDEF   13423--REDEF   13427--REDEF
QI_TYPE_DISPLAY_TARGET.LEN
     13390**DCL     13394--REDEF   13395--REDEF   13399--REDEF   13400--REDEF   13404--REDEF
QI_TYPE_DISPLAY_TARGET.PICTURE_STRING
     13460**DCL     13463--REDEF   13464--REDEF   13467--REDEF   13468--REDEF   13471--REDEF
QI_TYPE_DISPLAY_TARGET.ROUND
     13493**DCL     13494--REDEF   13495--REDEF
QI_TYPE_DISPLAY_TARGET.SIZE_ERROR
     13479**DCL     13480--REDEF
QI_TYPE_DISPLAY_TARGET.SRCH_VRFY_ELEMS
     13429**DCL     13432--REDEF
REL
     16889**DCL     17468<<ASSIGN  17482<<ASSIGN  17533<<ASSIGN  17556>>IF      17556>>IF      17556>>IF
     17576>>IF      17576>>IF      17576>>IF      17593>>IF      17593>>IF      17593>>IF
SO_JUMP_ALREADY
     17553**LABEL   17470--GOTO    17484--GOTO
STATUS_FLAG
     16885**DCL     16979<<ASSIGN  16988<<ASSIGN  16997<<ASSIGN  17003<<ASSIGN  17029<<ASSIGN  17048<<ASSIGN
     17067<<ASSIGN  17084<<ASSIGN  17093<<ASSIGN  17115>>IF      17320<<ASSIGN  17324<<ASSIGN  17347<<ASSIGN
     17352<<ASSIGN  17355>>IF
SUCCEED
PL6.E3A0      #001=QBI$IFS File=QBI$IFS.:E05TSI                                  WED 07/30/97 04:48 Page:84   
     17134**LABEL   17120--GOTO    17130--GOTO
TEST_BYTE
     16892**DCL     16967<<ASSIGN  16971>>IF      16971>>IF      16971>>IF      16971>>IF      16971>>IF
     16971>>IF      16971>>IF      16993<<ASSIGN  16994>>IF      16994>>IF      17025<<ASSIGN  17026>>IF
     17026>>IF      17044<<ASSIGN  17045>>IF      17045>>IF      17060<<ASSIGN  17061>>IF      17061>>IF
     17061>>IF      17061>>IF      17061>>IF      17061>>IF      17061>>IF      17061>>IF      17080<<ASSIGN
     17081>>IF      17081>>IF
